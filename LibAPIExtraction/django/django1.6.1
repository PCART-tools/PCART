
----------------------------------------/home/zhang/Packages/django/django1.6.1/__init__.py----------------------------------------
django.__init__.get_version(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/exceptions.py----------------------------------------
django.contrib.formtools.exceptions.WizardViewCookieModified(SuspiciousOperation)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/preview.py----------------------------------------
A:django.contrib.formtools.preview.stage->{'1': 'preview', '2': 'post'}.get(request.POST.get(self.unused_name('stage')), 'preview')
A:django.contrib.formtools.preview.method->getattr(self, stage + '_' + request.method.lower())
A:django.contrib.formtools.preview.f->self.form(request.POST, auto_id=self.get_auto_id())
A:django.contrib.formtools.preview.context->self.get_context(request, f)
A:django.contrib.formtools.preview.context['hash_field']->self.unused_name('hash')
A:django.contrib.formtools.preview.context['hash_value']->self.security_hash(request, f)
A:django.contrib.formtools.preview.expected->self.security_hash(request, form)
django.contrib.formtools.preview.FormPreview(self,form)
django.contrib.formtools.preview.FormPreview.__init__(self,form)
django.contrib.formtools.preview.FormPreview._check_security_hash(self,token,request,form)
django.contrib.formtools.preview.FormPreview.done(self,request,cleaned_data)
django.contrib.formtools.preview.FormPreview.failed_hash(self,request)
django.contrib.formtools.preview.FormPreview.get_auto_id(self)
django.contrib.formtools.preview.FormPreview.get_context(self,request,form)
django.contrib.formtools.preview.FormPreview.get_initial(self,request)
django.contrib.formtools.preview.FormPreview.parse_params(self,*args,**kwargs)
django.contrib.formtools.preview.FormPreview.post_post(self,request)
django.contrib.formtools.preview.FormPreview.preview_get(self,request)
django.contrib.formtools.preview.FormPreview.preview_post(self,request)
django.contrib.formtools.preview.FormPreview.process_preview(self,request,form,context)
django.contrib.formtools.preview.FormPreview.security_hash(self,request,form)
django.contrib.formtools.preview.FormPreview.unused_name(self,name)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/views.py----------------------------------------
A:django.contrib.formtools.wizard.views.new->re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\1', name)
A:django.contrib.formtools.wizard.views.initkwargs->super(NamedUrlWizardView, cls).get_initkwargs(*args, **kwargs)
A:django.contrib.formtools.wizard.views.computed_form_list->SortedDict()
A:django.contrib.formtools.wizard.views.form_list->self.get_form_list()
A:django.contrib.formtools.wizard.views.condition->condition(self)
A:django.contrib.formtools.wizard.views.self.prefix->self.get_prefix(*args, **kwargs)
A:django.contrib.formtools.wizard.views.self.storage->get_storage(self.storage_name, self.prefix, request, getattr(self, 'file_storage', None))
A:django.contrib.formtools.wizard.views.self.steps->StepsHelper(self)
A:django.contrib.formtools.wizard.views.response->super(WizardView, self).dispatch(request, *args, **kwargs)
A:django.contrib.formtools.wizard.views.wizard_goto_step->self.request.POST.get('wizard_goto_step', None)
A:django.contrib.formtools.wizard.views.management_form->ManagementForm(self.request.POST, prefix=self.prefix)
A:django.contrib.formtools.wizard.views.form->self.get_form(data=self.storage.get_step_data(self.steps.current), files=self.storage.get_step_files(self.steps.current))
A:django.contrib.formtools.wizard.views.new_form->self.get_form(next_step, data=self.storage.get_step_data(next_step), files=self.storage.get_step_files(next_step))
A:django.contrib.formtools.wizard.views.form_obj->self.get_form(step=step, data=self.storage.get_step_data(step), files=self.storage.get_step_files(step))
A:django.contrib.formtools.wizard.views.done_response->self.done(final_form_list, **kwargs)
A:django.contrib.formtools.wizard.views.kwargs->self.get_form_kwargs(step)
A:django.contrib.formtools.wizard.views.context->super(NamedUrlWizardView, self).get_context_data(form=form, **kwargs)
A:django.contrib.formtools.wizard.views.step_url->self.get_form_kwargs(step).get('step', None)
A:django.contrib.formtools.wizard.views.next_step->self.get_next_step()
django.contrib.formtools.wizard.views.CookieWizardView(WizardView)
django.contrib.formtools.wizard.views.NamedUrlCookieWizardView(NamedUrlWizardView)
django.contrib.formtools.wizard.views.NamedUrlSessionWizardView(NamedUrlWizardView)
django.contrib.formtools.wizard.views.NamedUrlWizardView(WizardView)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get(self,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_context_data(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_initkwargs(cls,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_step_url(self,step)
django.contrib.formtools.wizard.views.NamedUrlWizardView.post(self,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_done(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_goto_step(self,goto_step,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_next_step(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_revalidation_failure(self,failed_step,form,**kwargs)
django.contrib.formtools.wizard.views.SessionWizardView(WizardView)
django.contrib.formtools.wizard.views.StepsHelper(self,wizard)
django.contrib.formtools.wizard.views.StepsHelper.__dir__(self)
django.contrib.formtools.wizard.views.StepsHelper.__init__(self,wizard)
django.contrib.formtools.wizard.views.StepsHelper.__len__(self)
django.contrib.formtools.wizard.views.StepsHelper.__repr__(self)
django.contrib.formtools.wizard.views.StepsHelper.all(self)
django.contrib.formtools.wizard.views.StepsHelper.count(self)
django.contrib.formtools.wizard.views.StepsHelper.current(self)
django.contrib.formtools.wizard.views.StepsHelper.first(self)
django.contrib.formtools.wizard.views.StepsHelper.index(self)
django.contrib.formtools.wizard.views.StepsHelper.last(self)
django.contrib.formtools.wizard.views.StepsHelper.next(self)
django.contrib.formtools.wizard.views.StepsHelper.prev(self)
django.contrib.formtools.wizard.views.StepsHelper.step0(self)
django.contrib.formtools.wizard.views.StepsHelper.step1(self)
django.contrib.formtools.wizard.views.WizardView(TemplateView)
django.contrib.formtools.wizard.views.WizardView.__repr__(self)
django.contrib.formtools.wizard.views.WizardView.as_view(cls,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.done(self,form_list,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get(self,request,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_all_cleaned_data(self)
django.contrib.formtools.wizard.views.WizardView.get_cleaned_data_for_step(self,step)
django.contrib.formtools.wizard.views.WizardView.get_context_data(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_form(self,step=None,data=None,files=None)
django.contrib.formtools.wizard.views.WizardView.get_form_initial(self,step)
django.contrib.formtools.wizard.views.WizardView.get_form_instance(self,step)
django.contrib.formtools.wizard.views.WizardView.get_form_kwargs(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_form_list(self)
django.contrib.formtools.wizard.views.WizardView.get_form_prefix(self,step=None,form=None)
django.contrib.formtools.wizard.views.WizardView.get_form_step_data(self,form)
django.contrib.formtools.wizard.views.WizardView.get_form_step_files(self,form)
django.contrib.formtools.wizard.views.WizardView.get_initkwargs(cls,form_list=None,initial_dict=None,instance_dict=None,condition_dict=None,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_next_step(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_prefix(self,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_prev_step(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_step_index(self,step=None)
django.contrib.formtools.wizard.views.WizardView.post(self,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.process_step(self,form)
django.contrib.formtools.wizard.views.WizardView.process_step_files(self,form)
django.contrib.formtools.wizard.views.WizardView.render(self,form=None,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_done(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_goto_step(self,goto_step,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_next_step(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_revalidation_failure(self,step,form,**kwargs)
django.contrib.formtools.wizard.views.normalize_name(name)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/forms.py----------------------------------------
A:django.contrib.formtools.wizard.forms.current_step->django.forms.CharField(widget=forms.HiddenInput)
django.contrib.formtools.wizard.forms.ManagementForm(forms.Form)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/storage/session.py----------------------------------------
A:django.contrib.formtools.wizard.storage.session.data->property(_get_data, _set_data)
django.contrib.formtools.wizard.storage.session.SessionStorage(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.session.SessionStorage.__init__(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.session.SessionStorage._get_data(self)
django.contrib.formtools.wizard.storage.session.SessionStorage._set_data(self,value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/storage/base.py----------------------------------------
A:django.contrib.formtools.wizard.storage.base.current_step->lazy_property(_get_current_step, _set_current_step)
A:django.contrib.formtools.wizard.storage.base.extra_data->lazy_property(_get_extra_data, _set_extra_data)
A:django.contrib.formtools.wizard.storage.base.values->MultiValueDict(values)
A:django.contrib.formtools.wizard.storage.base.cleaned_data->dict(cleaned_data.lists())
A:django.contrib.formtools.wizard.storage.base.wizard_files->self.data[self.step_files_key].get(step, {})
A:django.contrib.formtools.wizard.storage.base.field_dict->field_dict.copy().copy()
A:django.contrib.formtools.wizard.storage.base.tmp_name->field_dict.copy().copy().pop('tmp_name')
A:django.contrib.formtools.wizard.storage.base.files[field]->UploadedFile(file=self.file_storage.open(tmp_name), **field_dict)
A:django.contrib.formtools.wizard.storage.base.tmp_filename->self.file_storage.save(field_file.name, field_file)
django.contrib.formtools.wizard.storage.BaseStorage(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.BaseStorage._get_current_step(self)
django.contrib.formtools.wizard.storage.BaseStorage._get_extra_data(self)
django.contrib.formtools.wizard.storage.BaseStorage._set_current_step(self,step)
django.contrib.formtools.wizard.storage.BaseStorage._set_extra_data(self,extra_data)
django.contrib.formtools.wizard.storage.BaseStorage.current_step_data(self)
django.contrib.formtools.wizard.storage.BaseStorage.current_step_files(self)
django.contrib.formtools.wizard.storage.BaseStorage.get_step_data(self,step)
django.contrib.formtools.wizard.storage.BaseStorage.get_step_files(self,step)
django.contrib.formtools.wizard.storage.BaseStorage.init_data(self)
django.contrib.formtools.wizard.storage.BaseStorage.reset(self)
django.contrib.formtools.wizard.storage.BaseStorage.set_step_data(self,step,cleaned_data)
django.contrib.formtools.wizard.storage.BaseStorage.set_step_files(self,step,files)
django.contrib.formtools.wizard.storage.BaseStorage.update_response(self,response)
django.contrib.formtools.wizard.storage.base.BaseStorage(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.base.BaseStorage.__init__(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.base.BaseStorage._get_current_step(self)
django.contrib.formtools.wizard.storage.base.BaseStorage._get_extra_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage._set_current_step(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage._set_extra_data(self,extra_data)
django.contrib.formtools.wizard.storage.base.BaseStorage.current_step_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.current_step_files(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.get_step_data(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage.get_step_files(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage.init_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.reset(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.set_step_data(self,step,cleaned_data)
django.contrib.formtools.wizard.storage.base.BaseStorage.set_step_files(self,step,files)
django.contrib.formtools.wizard.storage.base.BaseStorage.update_response(self,response)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/storage/cookie.py----------------------------------------
A:django.contrib.formtools.wizard.storage.cookie.encoder->json.JSONEncoder(separators=(',', ':'))
A:django.contrib.formtools.wizard.storage.cookie.self.data->self.load_data()
A:django.contrib.formtools.wizard.storage.cookie.data->self.request.get_signed_cookie(self.prefix)
django.contrib.formtools.wizard.storage.cookie.CookieStorage(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.__init__(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.load_data(self)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.update_response(self,response)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/storage/exceptions.py----------------------------------------
django.contrib.formtools.wizard.storage.MissingStorage(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.NoFileStorageConfigured(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.exceptions.MissingStorage(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.exceptions.NoFileStorageConfigured(ImproperlyConfigured)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/formtools/wizard/storage/__init__.py----------------------------------------
A:django.contrib.formtools.wizard.storage.__init__.storage_class->import_by_path(path)
django.contrib.formtools.wizard.storage.__init__.get_storage(path,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/utils.py----------------------------------------
A:django.contrib.messages.utils.level_tags->django.contrib.messages.constants.DEFAULT_TAGS.copy()
django.contrib.messages.utils.get_level_tags()


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/middleware.py----------------------------------------
A:django.contrib.messages.middleware.request._messages->default_storage(request)
A:django.contrib.messages.middleware.unstored_messages->request._messages.update(response)
django.contrib.messages.middleware.MessageMiddleware(object)
django.contrib.messages.middleware.MessageMiddleware.process_request(self,request)
django.contrib.messages.middleware.MessageMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/views.py----------------------------------------
A:django.contrib.messages.views.response->super(SuccessMessageMixin, self).form_valid(form)
A:django.contrib.messages.views.success_message->self.get_success_message(form.cleaned_data)
django.contrib.messages.views.SuccessMessageMixin(object)
django.contrib.messages.views.SuccessMessageMixin.form_valid(self,form)
django.contrib.messages.views.SuccessMessageMixin.get_success_message(self,cleaned_data)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/api.py----------------------------------------
A:django.contrib.messages.api.storage->default_storage(request)
django.contrib.messages.MessageFailure(Exception)
django.contrib.messages.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.MessageFailure(Exception)
django.contrib.messages.api.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.get_level(request)
django.contrib.messages.api.get_messages(request)
django.contrib.messages.api.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.set_level(request,level)
django.contrib.messages.api.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.warning(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.get_level(request)
django.contrib.messages.get_messages(request)
django.contrib.messages.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.set_level(request,level)
django.contrib.messages.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.warning(request,message,extra_tags='',fail_silently=False)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/context_processors.py----------------------------------------
django.contrib.messages.context_processors.messages(request)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/storage/session.py----------------------------------------
A:django.contrib.messages.storage.session.self.request.session[self.session_key]->self.serialize_messages(messages)
A:django.contrib.messages.storage.session.encoder->MessageEncoder(separators=(',', ':'))
django.contrib.messages.storage.session.SessionStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.deserialize_messages(self,data)
django.contrib.messages.storage.session.SessionStorage.serialize_messages(self,messages)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/storage/base.py----------------------------------------
A:django.contrib.messages.storage.base.LEVEL_TAGS->django.contrib.messages.utils.get_level_tags()
A:django.contrib.messages.storage.base.self.level->int(level)
A:django.contrib.messages.storage.base.self.message->force_text(self.message, strings_only=True)
A:django.contrib.messages.storage.base.self.extra_tags->force_text(self.extra_tags, strings_only=True)
A:django.contrib.messages.storage.base.label_tag->force_text(LEVEL_TAGS.get(self.level, ''), strings_only=True)
A:django.contrib.messages.storage.base.extra_tags->force_text(self.extra_tags, strings_only=True)
A:django.contrib.messages.storage.base.tags->property(_get_tags)
A:django.contrib.messages.storage.base.(messages, all_retrieved)->self._get()
A:django.contrib.messages.storage.base.level->property(_get_level, _set_level, _set_level)
A:django.contrib.messages.storage.base.message->Message(level, message, extra_tags=extra_tags)
A:django.contrib.messages.storage.base.self._level->int(value)
django.contrib.messages.storage.base.BaseStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__contains__(self,item)
django.contrib.messages.storage.base.BaseStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__iter__(self)
django.contrib.messages.storage.base.BaseStorage.__len__(self)
django.contrib.messages.storage.base.BaseStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage._get_level(self)
django.contrib.messages.storage.base.BaseStorage._loaded_messages(self)
django.contrib.messages.storage.base.BaseStorage._prepare_messages(self,messages)
django.contrib.messages.storage.base.BaseStorage._set_level(self,value=None)
django.contrib.messages.storage.base.BaseStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.add(self,level,message,extra_tags='')
django.contrib.messages.storage.base.BaseStorage.update(self,response)
django.contrib.messages.storage.base.Message(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__eq__(self,other)
django.contrib.messages.storage.base.Message.__init__(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__str__(self)
django.contrib.messages.storage.base.Message._get_tags(self)
django.contrib.messages.storage.base.Message._prepare(self)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/storage/cookie.py----------------------------------------
A:django.contrib.messages.storage.cookie.obj[3]->mark_safe(obj[3])
A:django.contrib.messages.storage.cookie.decoded->super(MessageDecoder, self).decode(s, **kwargs)
A:django.contrib.messages.storage.cookie.data->self.request.COOKIES.get(self.cookie_name)
A:django.contrib.messages.storage.cookie.messages->self._decode(data)
A:django.contrib.messages.storage.cookie.encoded_data->self._encode(messages + [self.not_finished], encode_empty=unstored_messages)
A:django.contrib.messages.storage.cookie.cookie->SimpleCookie()
A:django.contrib.messages.storage.cookie.encoder->MessageEncoder(separators=(',', ':'))
A:django.contrib.messages.storage.cookie.value->MessageEncoder(separators=(',', ':')).encode(messages)
A:django.contrib.messages.storage.cookie.bits->self.request.COOKIES.get(self.cookie_name).split('$', 1)
django.contrib.messages.storage.cookie.CookieStorage(BaseStorage)
django.contrib.messages.storage.cookie.CookieStorage._decode(self,data)
django.contrib.messages.storage.cookie.CookieStorage._encode(self,messages,encode_empty=False)
django.contrib.messages.storage.cookie.CookieStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._hash(self,value)
django.contrib.messages.storage.cookie.CookieStorage._store(self,messages,response,remove_oldest=True,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._update_cookie(self,encoded_data,response)
django.contrib.messages.storage.cookie.MessageDecoder(json.JSONDecoder)
django.contrib.messages.storage.cookie.MessageDecoder.decode(self,s,**kwargs)
django.contrib.messages.storage.cookie.MessageDecoder.process_messages(self,obj)
django.contrib.messages.storage.cookie.MessageEncoder(json.JSONEncoder)
django.contrib.messages.storage.cookie.MessageEncoder.default(self,obj)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/storage/fallback.py----------------------------------------
A:django.contrib.messages.storage.fallback.self._used_storages->set()
A:django.contrib.messages.storage.fallback.(messages, all_retrieved)->storage._get()
A:django.contrib.messages.storage.fallback.messages->storage._store(messages, response, remove_oldest=False)
django.contrib.messages.storage.fallback.FallbackStorage(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage.__init__(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._store(self,messages,response,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/storage/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/test_cookie.py----------------------------------------
A:django.contrib.messages.tests.test_cookie.encoded_data->self.get_storage()._encode(messages, encode_empty=encode_empty)
A:django.contrib.messages.tests.test_cookie.cookie->self.get_response().cookies.get(storage.cookie_name)
A:django.contrib.messages.tests.test_cookie.data->self.get_storage()._decode(cookie.value)
A:django.contrib.messages.tests.test_cookie.storage->self.get_storage()
A:django.contrib.messages.tests.test_cookie.response->self.get_response()
A:django.contrib.messages.tests.test_cookie.request->self.get_request()
A:django.contrib.messages.tests.test_cookie.msg_size->int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)
A:django.contrib.messages.tests.test_cookie.unstored_messages->self.get_storage().update(response)
A:django.contrib.messages.tests.test_cookie.cookie_storing->self.stored_messages_count(storage, response)
A:django.contrib.messages.tests.test_cookie.encoder->MessageEncoder(separators=(',', ':'))
A:django.contrib.messages.tests.test_cookie.value->MessageEncoder(separators=(',', ':')).encode(messages)
A:django.contrib.messages.tests.test_cookie.decoded_messages->json.loads(value, cls=MessageDecoder)
A:django.contrib.messages.tests.test_cookie.message->Message(constants.DEBUG, data)
A:django.contrib.messages.tests.test_cookie.encoded->self.get_storage()._encode(message)
A:django.contrib.messages.tests.test_cookie.decoded->self.get_storage()._decode(encoded)
django.contrib.messages.tests.test_cookie.CookieTest(BaseTests,TestCase)
django.contrib.messages.tests.test_cookie.CookieTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_cookie.CookieTest.test_domain(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_get(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_get_bad_cookie(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_json_encoder_decoder(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_max_cookie_length(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_safedata(self)
django.contrib.messages.tests.test_cookie.set_cookie_data(storage,messages,invalid=False,encode_empty=False)
django.contrib.messages.tests.test_cookie.stored_cookie_messages_count(storage,response)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/test_fallback.py----------------------------------------
A:django.contrib.messages.tests.test_fallback.request->self.get_request()
A:django.contrib.messages.tests.test_fallback.storage->self.get_storage()
A:django.contrib.messages.tests.test_fallback.cookie_storage->self.get_cookie_storage(storage)
A:django.contrib.messages.tests.test_fallback.session_storage->self.get_session_storage(storage)
A:django.contrib.messages.tests.test_fallback.response->self.get_response()
A:django.contrib.messages.tests.test_fallback.session_storing->self.stored_session_messages_count(storage, response)
A:django.contrib.messages.tests.test_fallback.cookie_storing->self.stored_cookie_messages_count(storage, response)
A:django.contrib.messages.tests.test_fallback.msg_size->int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)
django.contrib.messages.tests.test_fallback.FallbackTest(BaseTests,TestCase)
django.contrib.messages.tests.test_fallback.FallbackTest.get_cookie_storage(self,storage)
django.contrib.messages.tests.test_fallback.FallbackTest.get_request(self)
django.contrib.messages.tests.test_fallback.FallbackTest.get_session_storage(self,storage)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_cookie_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_session_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.test_flush_used_backends(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_empty(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_fallback_only(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_no_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_session_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_session_fallback_only(self)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/test_session.py----------------------------------------
A:django.contrib.messages.tests.test_session.storage.request.session[storage.session_key]->self.get_storage().serialize_messages(messages)
A:django.contrib.messages.tests.test_session.data->self.get_storage().deserialize_messages(storage.request.session.get(storage.session_key, []))
A:django.contrib.messages.tests.test_session.request->super(SessionTest, self).get_request()
A:django.contrib.messages.tests.test_session.storage->self.get_storage()
A:django.contrib.messages.tests.test_session.message->Message(constants.DEBUG, mark_safe('<b>Hello Django!</b>'))
django.contrib.messages.tests.test_session.SessionTest(BaseTests,TestCase)
django.contrib.messages.tests.test_session.SessionTest.get_request(self)
django.contrib.messages.tests.test_session.SessionTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_session.SessionTest.test_get(self)
django.contrib.messages.tests.test_session.SessionTest.test_safedata(self)
django.contrib.messages.tests.test_session.set_session_data(storage,messages)
django.contrib.messages.tests.test_session.stored_session_messages_count(storage)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/base.py----------------------------------------
A:django.contrib.messages.tests.base.base.LEVEL_TAGS->django.contrib.messages.utils.get_level_tags()
A:django.contrib.messages.tests.base.self.settings_override->override_settings_tags(TEMPLATE_DIRS=(), TEMPLATE_CONTEXT_PROCESSORS=global_settings.TEMPLATE_CONTEXT_PROCESSORS, MESSAGE_TAGS='', MESSAGE_STORAGE='%s.%s' % (self.storage_class.__module__, self.storage_class.__name__), SESSION_SERIALIZER='django.contrib.sessions.serializers.JSONSerializer')
A:django.contrib.messages.tests.base.storage->self.get_storage()
A:django.contrib.messages.tests.base.response->self.client.post(add_url, data, follow=True)
A:django.contrib.messages.tests.base.storing->self.stored_messages_count(storage, response)
A:django.contrib.messages.tests.base.show_url->reverse('django.contrib.messages.tests.urls.show')
A:django.contrib.messages.tests.base.add_url->reverse('django.contrib.messages.tests.urls.add', args=(level,))
A:django.contrib.messages.tests.base.data->list(storage)
A:django.contrib.messages.tests.base.request->self.get_request()
django.contrib.messages.tests.base.BaseTests(object)
django.contrib.messages.tests.base.BaseTests.get_existing_storage(self)
django.contrib.messages.tests.base.BaseTests.get_request(self)
django.contrib.messages.tests.base.BaseTests.get_response(self)
django.contrib.messages.tests.base.BaseTests.get_storage(self,data=None)
django.contrib.messages.tests.base.BaseTests.setUp(self)
django.contrib.messages.tests.base.BaseTests.stored_messages_count(self,storage,response)
django.contrib.messages.tests.base.BaseTests.tearDown(self)
django.contrib.messages.tests.base.BaseTests.test_add(self)
django.contrib.messages.tests.base.BaseTests.test_add_lazy_translation(self)
django.contrib.messages.tests.base.BaseTests.test_add_update(self)
django.contrib.messages.tests.base.BaseTests.test_custom_tags(self)
django.contrib.messages.tests.base.BaseTests.test_default_level(self)
django.contrib.messages.tests.base.BaseTests.test_existing_add(self)
django.contrib.messages.tests.base.BaseTests.test_existing_add_read_update(self)
django.contrib.messages.tests.base.BaseTests.test_existing_read(self)
django.contrib.messages.tests.base.BaseTests.test_existing_read_add_update(self)
django.contrib.messages.tests.base.BaseTests.test_full_request_response_cycle(self)
django.contrib.messages.tests.base.BaseTests.test_get(self)
django.contrib.messages.tests.base.BaseTests.test_high_level(self)
django.contrib.messages.tests.base.BaseTests.test_low_level(self)
django.contrib.messages.tests.base.BaseTests.test_middleware_disabled(self)
django.contrib.messages.tests.base.BaseTests.test_middleware_disabled_fail_silently(self)
django.contrib.messages.tests.base.BaseTests.test_multiple_posts(self)
django.contrib.messages.tests.base.BaseTests.test_no_update(self)
django.contrib.messages.tests.base.BaseTests.test_settings_level(self)
django.contrib.messages.tests.base.BaseTests.test_tags(self)
django.contrib.messages.tests.base.BaseTests.test_with_template_response(self)
django.contrib.messages.tests.base.add_level_messages(storage)
django.contrib.messages.tests.base.override_settings_tags(override_settings)
django.contrib.messages.tests.base.override_settings_tags.disable(self)
django.contrib.messages.tests.base.override_settings_tags.enable(self)
django.contrib.messages.tests.base.skipUnlessAuthIsInstalled(func)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/test_mixins.py----------------------------------------
A:django.contrib.messages.tests.test_mixins.add_url->reverse('add_success_msg')
A:django.contrib.messages.tests.test_mixins.req->self.client.post(add_url, author)
django.contrib.messages.tests.test_mixins.SuccessMessageMixinTests(TestCase)
django.contrib.messages.tests.test_mixins.SuccessMessageMixinTests.test_set_messages_success(self)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/test_middleware.py----------------------------------------
A:django.contrib.messages.tests.test_middleware.self.middleware->MessageMiddleware()
A:django.contrib.messages.tests.test_middleware.request->django.http.HttpRequest()
A:django.contrib.messages.tests.test_middleware.response->django.http.HttpResponse()
django.contrib.messages.tests.test_middleware.MiddlewareTest(unittest.TestCase)
django.contrib.messages.tests.test_middleware.MiddlewareTest.setUp(self)
django.contrib.messages.tests.test_middleware.MiddlewareTest.test_response_without_messages(self)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/messages/tests/urls.py----------------------------------------
A:django.contrib.messages.tests.urls.fail_silently->request.POST.get('fail_silently', None)
A:django.contrib.messages.tests.urls.show_url->reverse('django.contrib.messages.tests.urls.show_template_response')
A:django.contrib.messages.tests.urls.t->Template(TEMPLATE)
A:django.contrib.messages.tests.urls.name->django.forms.CharField(required=True)
A:django.contrib.messages.tests.urls.slug->django.forms.SlugField(required=True)
A:django.contrib.messages.tests.urls.urlpatterns->patterns('', ('^add/(debug|info|success|warning|error)/$', add), url('^add/msg/$', ContactFormViewWithMsg.as_view(), name='add_success_msg'), ('^show/$', show), ('^template_response/add/(debug|info|success|warning|error)/$', add_template_response), ('^template_response/show/$', show_template_response))
django.contrib.messages.tests.urls.ContactForm(forms.Form)
django.contrib.messages.tests.urls.ContactFormViewWithMsg(SuccessMessageMixin,FormView)
django.contrib.messages.tests.urls.add(request,message_type)
django.contrib.messages.tests.urls.add_template_response(request,message_type)
django.contrib.messages.tests.urls.show(request)
django.contrib.messages.tests.urls.show_template_response(request)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/humanize/tests.py----------------------------------------
A:django.contrib.humanize.tests.now->datetime.datetime(2012, 3, 9, 22, 30)
A:django.contrib.humanize.tests.t->Template('{%% load humanize %%}{{ test_content|%s }}' % method)
A:django.contrib.humanize.tests.rendered->Template('{%% load humanize %%}{{ test_content|%s }}' % method).render(Context(locals())).strip()
A:django.contrib.humanize.tests.today->datetime.date.today()
A:django.contrib.humanize.tests.someday_result->django.template.defaultfilters.date(someday)
A:django.contrib.humanize.tests.tz_one->django.utils.tzinfo.FixedOffset(datetime.timedelta(hours=-12))
A:django.contrib.humanize.tests.tz_two->django.utils.tzinfo.FixedOffset(datetime.timedelta(hours=12))
A:django.contrib.humanize.tests.date_one->datetime.datetime(today.year, today.month, today.day, tzinfo=tz_one)
A:django.contrib.humanize.tests.naturalday_one->django.contrib.humanize.templatetags.humanize.naturalday(date_one)
A:django.contrib.humanize.tests.date_two->datetime.datetime(today.year, today.month, today.day, tzinfo=tz_two)
A:django.contrib.humanize.tests.naturalday_two->django.contrib.humanize.templatetags.humanize.naturalday(date_two)
A:django.contrib.humanize.tests.dt->datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)
django.contrib.humanize.tests.HumanizeTests(TransRealMixin,TestCase)
django.contrib.humanize.tests.HumanizeTests.humanize_tester(self,test_list,result_list,method)
django.contrib.humanize.tests.HumanizeTests.test_apnumber(self)
django.contrib.humanize.tests.HumanizeTests.test_i18n_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_i18n_intword(self)
django.contrib.humanize.tests.HumanizeTests.test_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_intcomma_without_number_grouping(self)
django.contrib.humanize.tests.HumanizeTests.test_intword(self)
django.contrib.humanize.tests.HumanizeTests.test_l10n_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday_tz(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday_uses_localtime(self)
django.contrib.humanize.tests.HumanizeTests.test_naturaltime(self)
django.contrib.humanize.tests.HumanizeTests.test_ordinal(self)
django.contrib.humanize.tests.MockDateTime(datetime.datetime)
django.contrib.humanize.tests.MockDateTime.now(self,tz=None)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/humanize/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/humanize/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/humanize/templatetags/humanize.py----------------------------------------
A:django.contrib.humanize.templatetags.humanize.register->django.template.Library()
A:django.contrib.humanize.templatetags.humanize.value->date(value.year, value.month, value.day)
A:django.contrib.humanize.templatetags.humanize.orig->force_text(value)
A:django.contrib.humanize.templatetags.humanize.new->re.sub('^(-?\\d+)(\\d{3})', '\\g<1>,\\g<2>', orig)
A:django.contrib.humanize.templatetags.humanize.tzinfo->getattr(value, 'tzinfo', None)
A:django.contrib.humanize.templatetags.humanize.today->datetime.datetime.now(tzinfo).date()
A:django.contrib.humanize.templatetags.humanize.now->datetime.datetime.now(utc if is_aware(value) else None)
django.contrib.humanize.templatetags.humanize.apnumber(value)
django.contrib.humanize.templatetags.humanize.intcomma(value,use_l10n=True)
django.contrib.humanize.templatetags.humanize.intword(value)
django.contrib.humanize.templatetags.humanize.naturalday(value,arg=None)
django.contrib.humanize.templatetags.humanize.naturaltime(value)
django.contrib.humanize.templatetags.humanize.ordinal(value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/contrib/humanize/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/cache.py----------------------------------------
A:django.templatetags.cache.register->Library()
A:django.templatetags.cache.expire_time->int(expire_time)
A:django.templatetags.cache.cache_key->make_template_fragment_key(self.fragment_name, vary_on)
A:django.templatetags.cache.value->self.nodelist.render(context)
A:django.templatetags.cache.nodelist->parser.parse(('endcache',))
A:django.templatetags.cache.tokens->token.split_contents()
django.templatetags.cache.CacheNode(self,nodelist,expire_time_var,fragment_name,vary_on)
django.templatetags.cache.CacheNode.__init__(self,nodelist,expire_time_var,fragment_name,vary_on)
django.templatetags.cache.CacheNode.render(self,context)
django.templatetags.cache.do_cache(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/l10n.py----------------------------------------
A:django.templatetags.l10n.register->Library()
A:django.templatetags.l10n.output->self.nodelist.render(context)
A:django.templatetags.l10n.bits->list(token.split_contents())
A:django.templatetags.l10n.nodelist->parser.parse(('endlocalize',))
django.templatetags.l10n.LocalizeNode(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__init__(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__repr__(self)
django.templatetags.l10n.LocalizeNode.render(self,context)
django.templatetags.l10n.localize(value)
django.templatetags.l10n.localize_tag(parser,token)
django.templatetags.l10n.unlocalize(value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/future.py----------------------------------------
A:django.templatetags.future.register->Library()
django.templatetags.future.cycle(parser,token)
django.templatetags.future.firstof(parser,token)
django.templatetags.future.ssi(parser,token)
django.templatetags.future.url(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/i18n.py----------------------------------------
A:django.templatetags.i18n.register->Library()
A:django.templatetags.i18n.lang_code->self.lang_code.resolve(context)
A:django.templatetags.i18n.context[self.variable]->django.utils.translation.get_language_bidi()
A:django.templatetags.i18n.langs->self.languages.resolve(context)
A:django.templatetags.i18n.self.filter_expression.var->Variable("'%s'" % self.filter_expression.var)
A:django.templatetags.i18n.self.filter_expression.var.message_context->self.message_context.resolve(context)
A:django.templatetags.i18n.output->self.nodelist.render(context)
A:django.templatetags.i18n.value->parser.compile_filter(value)
A:django.templatetags.i18n.message_context->parser.compile_filter(self.value())
A:django.templatetags.i18n.tmp_context[var]->val.resolve(context)
A:django.templatetags.i18n.(singular, vars)->self.render_token_list(self.singular)
A:django.templatetags.i18n.count->self.counter.resolve(context)
A:django.templatetags.i18n.(plural, plural_vars)->self.render_token_list(self.plural)
A:django.templatetags.i18n.result->self.render(context, nested=True)
A:django.templatetags.i18n.data->dict([(v, render_value(v)) for v in vars])
A:django.templatetags.i18n.args->parser.next_token().contents.split()
A:django.templatetags.i18n.m->re.match("^'([^']+)'(\\|.*$)", value)
A:django.templatetags.i18n.tag->self.tag()
A:django.templatetags.i18n.asvar->self.tag()
A:django.templatetags.i18n.(value, noop, asvar, message_context)->TranslateParser(token.contents).top()
A:django.templatetags.i18n.bits->parser.next_token().split_contents()
A:django.templatetags.i18n.option->remaining_bits.pop(0)
A:django.templatetags.i18n.extra_context->options.get('with', {})
A:django.templatetags.i18n.token->parser.next_token()
A:django.templatetags.i18n.language->parser.compile_filter(bits[1])
A:django.templatetags.i18n.nodelist->parser.parse(('endlanguage',))
django.templatetags.i18n.BlockTranslateNode(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None)
django.templatetags.i18n.BlockTranslateNode.__init__(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None)
django.templatetags.i18n.BlockTranslateNode.render(self,context,nested=False)
django.templatetags.i18n.BlockTranslateNode.render_token_list(self,tokens)
django.templatetags.i18n.GetAvailableLanguagesNode(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.__init__(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageBidiNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoListNode(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.__init__(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.get_language_info(self,language)
django.templatetags.i18n.GetLanguageInfoListNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoNode(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.__init__(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.render(self,context)
django.templatetags.i18n.LanguageNode(self,nodelist,language)
django.templatetags.i18n.LanguageNode.__init__(self,nodelist,language)
django.templatetags.i18n.LanguageNode.render(self,context)
django.templatetags.i18n.TranslateNode(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.__init__(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.render(self,context)
django.templatetags.i18n.do_block_translate(parser,token)
django.templatetags.i18n.do_get_available_languages(parser,token)
django.templatetags.i18n.do_get_current_language(parser,token)
django.templatetags.i18n.do_get_current_language_bidi(parser,token)
django.templatetags.i18n.do_get_language_info(parser,token)
django.templatetags.i18n.do_get_language_info_list(parser,token)
django.templatetags.i18n.do_translate(parser,token)
django.templatetags.i18n.language(parser,token)
django.templatetags.i18n.language_bidi(lang_code)
django.templatetags.i18n.language_name(lang_code)
django.templatetags.i18n.language_name_local(lang_code)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/static.py----------------------------------------
A:django.templatetags.static.register->django.template.Library()
A:django.templatetags.static.tokens->token.contents.split()
A:django.templatetags.static.prefix->self.handle_simple(self.name)
A:django.templatetags.static.path->parser.compile_filter(bits[1])
A:django.templatetags.static.url->self.url(context)
A:django.templatetags.static.bits->token.split_contents()
django.templatetags.static.PrefixNode(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__init__(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__repr__(self)
django.templatetags.static.PrefixNode.handle_simple(cls,name)
django.templatetags.static.PrefixNode.handle_token(cls,parser,token,name)
django.templatetags.static.PrefixNode.render(self,context)
django.templatetags.static.StaticNode(self,varname=None,path=None)
django.templatetags.static.StaticNode.__init__(self,varname=None,path=None)
django.templatetags.static.StaticNode.handle_simple(cls,path)
django.templatetags.static.StaticNode.handle_token(cls,parser,token)
django.templatetags.static.StaticNode.render(self,context)
django.templatetags.static.StaticNode.url(self,context)
django.templatetags.static.do_static(parser,token)
django.templatetags.static.get_media_prefix(parser,token)
django.templatetags.static.get_static_prefix(parser,token)
django.templatetags.static.static(path)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/tz.py----------------------------------------
A:django.templatetags.tz.register->Library()
A:django.templatetags.tz.default_timezone->django.utils.timezone.get_default_timezone()
A:django.templatetags.tz.value->django.utils.timezone.make_aware(value, default_timezone)
A:django.templatetags.tz.tz->parser.compile_filter(bits[1])
A:django.templatetags.tz.result->datetimeobject(result.year, result.month, result.day, result.hour, result.minute, result.second, result.microsecond, result.tzinfo)
A:django.templatetags.tz.output->self.nodelist.render(context)
A:django.templatetags.tz.context[self.variable]->django.utils.timezone.get_current_timezone_name()
A:django.templatetags.tz.bits->token.split_contents()
A:django.templatetags.tz.nodelist->parser.parse(('endtimezone',))
A:django.templatetags.tz.args->token.contents.split()
django.templatetags.tz.GetCurrentTimezoneNode(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.__init__(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.render(self,context)
django.templatetags.tz.LocalTimeNode(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.__init__(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.render(self,context)
django.templatetags.tz.TimezoneNode(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.__init__(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.render(self,context)
django.templatetags.tz.datetimeobject(datetime,object)
django.templatetags.tz.do_timezone(value,arg)
django.templatetags.tz.get_current_timezone_tag(parser,token)
django.templatetags.tz.localtime(value)
django.templatetags.tz.localtime_tag(parser,token)
django.templatetags.tz.timezone_tag(parser,token)
django.templatetags.tz.utc(value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/__init__.py----------------------------------------
A:django.conf.__init__.self._wrapped->Settings(settings_module)
A:django.conf.__init__.logging_config_func->import_by_path(self.LOGGING_CONFIG)
A:django.conf.__init__.holder->UserSettingsHolder(default_settings)
A:django.conf.__init__.mod->django.utils.importlib.import_module(self.SETTINGS_MODULE)
A:django.conf.__init__.setting_value->getattr(mod, setting)
A:django.conf.__init__.self.__dict__['_deleted']->set()
A:django.conf.__init__.settings->LazySettings()
django.conf.__init__.BaseSettings(object)
django.conf.__init__.BaseSettings.__setattr__(self,name,value)
django.conf.__init__.LazySettings(LazyObject)
django.conf.__init__.LazySettings.__getattr__(self,name)
django.conf.__init__.LazySettings._configure_logging(self)
django.conf.__init__.LazySettings._setup(self,name=None)
django.conf.__init__.LazySettings.configure(self,default_settings=global_settings,**options)
django.conf.__init__.LazySettings.configured(self)
django.conf.__init__.Settings(self,settings_module)
django.conf.__init__.Settings.__init__(self,settings_module)
django.conf.__init__.UserSettingsHolder(self,default_settings)
django.conf.__init__.UserSettingsHolder.__delattr__(self,name)
django.conf.__init__.UserSettingsHolder.__dir__(self)
django.conf.__init__.UserSettingsHolder.__getattr__(self,name)
django.conf.__init__.UserSettingsHolder.__init__(self,default_settings)
django.conf.__init__.UserSettingsHolder.__setattr__(self,name,value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/global_settings.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/app_template/tests.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/app_template/admin.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/app_template/views.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/app_template/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/app_template/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/urls/i18n.py----------------------------------------
A:django.conf.urls.i18n.pattern_list->patterns(prefix, *args)
A:django.conf.urls.i18n.urlpatterns->patterns('', url('^setlang/$', 'django.views.i18n.set_language', name='set_language'))
django.conf.urls.i18n.i18n_patterns(prefix,*args)


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/urls/static.py----------------------------------------
django.conf.urls.static.static(prefix,view='django.views.static.serve',**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/urls/shortcut.py----------------------------------------
A:django.conf.urls.shortcut.urlpatterns->patterns('django.views', ('^(?P<content_type_id>\\d+)/(?P<object_id>.*)/$', 'defaults.shortcut'))


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/urls/__init__.py----------------------------------------
A:django.conf.urls.__init__.urlconf_module->import_module(urlconf_module)
A:django.conf.urls.__init__.patterns->getattr(urlconf_module, 'urlpatterns', urlconf_module)
A:django.conf.urls.__init__.t->url(*t, prefix=prefix)
django.conf.urls.__init__.include(arg,namespace=None,app_name=None)
django.conf.urls.__init__.patterns(prefix,*args)
django.conf.urls.__init__.url(regex,view,kwargs=None,name=None,prefix='')


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/is/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/is/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/th/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/th/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/en_GB/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/en_GB/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/mk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/mk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/eu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/eu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sr_Latn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sr_Latn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/de/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/de/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ja/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ja/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/zh_CN/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/zh_CN/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/da/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/da/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/it/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/it/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/te/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/te/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bg/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/id/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/id/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ar/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ar/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/gl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/gl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_MX/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_MX/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ro/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ro/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/en/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/en/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_NI/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_NI/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/mn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/mn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ru/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ru/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/cs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/cs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/lv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/lv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ta/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fy_NL/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fy_NL/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ml/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ml/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/cy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/cy/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/tr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/tr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/he/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/he/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ko/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ko/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nb/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nb/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/bn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/el/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/el/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ca/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ca/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ka/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ka/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fa/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/fa/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_AR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_AR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/uk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/uk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/de_CH/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/de_CH/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/nn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/et/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/et/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pt_BR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pt_BR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/km/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/km/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/pl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_PR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/es_PR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/hi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/zh_TW/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/zh_TW/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ga/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/ga/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/kn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/kn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/lt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/lt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sq/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/sq/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/vi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/locale/vi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/project_template/manage.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/project_template/project_name/settings.py----------------------------------------
A:django.conf.project_template.project_name.settings.BASE_DIR->os.path.dirname(os.path.dirname(__file__))


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/project_template/project_name/wsgi.py----------------------------------------
A:django.conf.project_template.project_name.wsgi.application->get_wsgi_application()


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/project_template/project_name/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/conf/project_template/project_name/urls.py----------------------------------------
A:django.conf.project_template.project_name.urls.urlpatterns->patterns('', url('^admin/', include(admin.site.urls)))


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/defaultfilters.py----------------------------------------
A:django.template.defaultfilters.register->Library()
A:django.template.defaultfilters.args->list(args)
A:django.template.defaultfilters.args[0]->force_text(args[0])
A:django.template.defaultfilters._dec._decorated_function->getattr(func, '_decorated_function', func)
A:django.template.defaultfilters.input_val->force_text(text)
A:django.template.defaultfilters.d->Decimal(force_text(float(text)))
A:django.template.defaultfilters.p->int(arg)
A:django.template.defaultfilters.exp->Decimal(1)
A:django.template.defaultfilters.tupl->Decimal(force_text(float(text))).as_tuple()
A:django.template.defaultfilters.(sign, digits, exponent)->Decimal(force_text(float(text))).quantize(exp, ROUND_HALF_UP, Context(prec=prec)).as_tuple()
A:django.template.defaultfilters.number->''.join(reversed(digits))
A:django.template.defaultfilters.lines->int(value).split('\n')
A:django.template.defaultfilters.width->django.utils.six.text_type(len(six.text_type(len(lines))))
A:django.template.defaultfilters.t->re.sub("([a-z])'([A-Z])", lambda m: m.group(0).lower(), value.title())
A:django.template.defaultfilters.length->int(arg)
A:django.template.defaultfilters.safe->isinstance(value, SafeData)
A:django.template.defaultfilters.value->int(value)
A:django.template.defaultfilters.data->conditional_escape(arg).join(value)
A:django.template.defaultfilters.(item, old_style_list)->convert_old_style_list(sublist)
A:django.template.defaultfilters.list_length->len(list_)
A:django.template.defaultfilters.sublist->_helper(sublist_item, tabs + 1)
A:django.template.defaultfilters.(value, converted)->convert_old_style_list(value)
A:django.template.defaultfilters.arg->ugettext('yes,no,maybe')
A:django.template.defaultfilters.bits->ugettext('yes,no,maybe').split(',')
A:django.template.defaultfilters.bytes->float(bytes)
django.template.defaultfilters.add(value,arg)
django.template.defaultfilters.addslashes(value)
django.template.defaultfilters.capfirst(value)
django.template.defaultfilters.center(value,arg)
django.template.defaultfilters.cut(value,arg)
django.template.defaultfilters.date(value,arg=None)
django.template.defaultfilters.default(value,arg)
django.template.defaultfilters.default_if_none(value,arg)
django.template.defaultfilters.dictsort(value,arg)
django.template.defaultfilters.dictsortreversed(value,arg)
django.template.defaultfilters.divisibleby(value,arg)
django.template.defaultfilters.escape_filter(value)
django.template.defaultfilters.escapejs_filter(value)
django.template.defaultfilters.filesizeformat(bytes)
django.template.defaultfilters.first(value)
django.template.defaultfilters.fix_ampersands_filter(value)
django.template.defaultfilters.floatformat(text,arg=-1)
django.template.defaultfilters.force_escape(value)
django.template.defaultfilters.get_digit(value,arg)
django.template.defaultfilters.iriencode(value)
django.template.defaultfilters.join(value,arg,autoescape=None)
django.template.defaultfilters.last(value)
django.template.defaultfilters.length(value)
django.template.defaultfilters.length_is(value,arg)
django.template.defaultfilters.linebreaks_filter(value,autoescape=None)
django.template.defaultfilters.linebreaksbr(value,autoescape=None)
django.template.defaultfilters.linenumbers(value,autoescape=None)
django.template.defaultfilters.ljust(value,arg)
django.template.defaultfilters.lower(value)
django.template.defaultfilters.make_list(value)
django.template.defaultfilters.phone2numeric_filter(value)
django.template.defaultfilters.pluralize(value,arg='s')
django.template.defaultfilters.pprint(value)
django.template.defaultfilters.random(value)
django.template.defaultfilters.removetags(value,tags)
django.template.defaultfilters.rjust(value,arg)
django.template.defaultfilters.safe(value)
django.template.defaultfilters.safeseq(value)
django.template.defaultfilters.slice_filter(value,arg)
django.template.defaultfilters.slugify(value)
django.template.defaultfilters.stringfilter(func)
django.template.defaultfilters.stringformat(value,arg)
django.template.defaultfilters.striptags(value)
django.template.defaultfilters.time(value,arg=None)
django.template.defaultfilters.timesince_filter(value,arg=None)
django.template.defaultfilters.timeuntil_filter(value,arg=None)
django.template.defaultfilters.title(value)
django.template.defaultfilters.truncatechars(value,arg)
django.template.defaultfilters.truncatewords(value,arg)
django.template.defaultfilters.truncatewords_html(value,arg)
django.template.defaultfilters.unordered_list(value,autoescape=None)
django.template.defaultfilters.upper(value)
django.template.defaultfilters.urlencode(value,safe=None)
django.template.defaultfilters.urlize(value,autoescape=None)
django.template.defaultfilters.urlizetrunc(value,limit,autoescape=None)
django.template.defaultfilters.wordcount(value)
django.template.defaultfilters.wordwrap(value,arg)
django.template.defaultfilters.yesno(value,arg=None)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/defaulttags.py----------------------------------------
A:django.template.defaulttags.register->Library()
A:django.template.defaulttags.output->self.nodelist.render(context)
A:django.template.defaulttags.csrf_token->context.get('csrf_token', None)
A:django.template.defaulttags.context.render_context[self]->itertools_cycle(self.cyclevars)
A:django.template.defaulttags.value->float(value)
A:django.template.defaulttags.filtered->self.filter_expr.resolve(context)
A:django.template.defaulttags.self.nodelist_empty->NodeList()
A:django.template.defaulttags.values->dict([(key, val.resolve(context)) for (key, val) in six.iteritems(self.extra_context)])
A:django.template.defaulttags.len_values->len(values)
A:django.template.defaulttags.nodelist->parser.parse(('endwith',))
A:django.template.defaulttags.unpacked_vars->dict(zip(self.loopvars, item))
A:django.template.defaulttags.state_frame->self._get_context_stack_frame(context)
A:django.template.defaulttags.compare_tonodelist_true_output->self.nodelist_true.render(context)
A:django.template.defaulttags.val1->parser.compile_filter(bits[1])
A:django.template.defaulttags.val2->parser.compile_filter(bits[2])
A:django.template.defaulttags.match->django.template.base.kwarg_re.match(bit)
A:django.template.defaulttags.obj_list->self.target.resolve(context, True)
A:django.template.defaulttags.filepath->parser.compile_filter(bits[1])
A:django.template.defaulttags.t->Template(output, name=filepath)
A:django.template.defaulttags.kwargs->dict([(smart_text(k, 'ascii'), v.resolve(context)) for (k, v) in self.kwargs.items()])
A:django.template.defaulttags.view_name->self.view_name.resolve(context)
A:django.template.defaulttags.url->reverse(project_name + '.' + view_name, args=args, kwargs=kwargs, current_app=context.current_app)
A:django.template.defaulttags.exc_info->sys.exc_info()
A:django.template.defaulttags.max_value->float(max_value)
A:django.template.defaulttags.max_width->int(self.max_width.resolve(context))
A:django.template.defaulttags.args->parser.next_token().split_contents()
A:django.template.defaulttags.node->CycleNode(values, escape=escape)
A:django.template.defaulttags.(_, rest)->parser.next_token().contents.split(None, 1)
A:django.template.defaulttags.filter_expr->parser.compile_filter('var|%s' % rest)
A:django.template.defaulttags.filter_name->getattr(func, '_filter_name', None)
A:django.template.defaulttags.bits->parser.next_token().split_contents()
A:django.template.defaulttags.loopvars->re.split(' *, *', ' '.join(bits[1:in_index]))
A:django.template.defaulttags.sequence->parser.compile_filter(bits[in_index + 1])
A:django.template.defaulttags.nodelist_loop->parser.parse(('empty', 'endfor'))
A:django.template.defaulttags.token->parser.next_token()
A:django.template.defaulttags.nodelist_empty->parser.parse(('endfor',))
A:django.template.defaulttags.nodelist_true->parser.parse(('else', 'endifchanged'))
A:django.template.defaulttags.nodelist_false->NodeList()
A:django.template.defaulttags.condition->TemplateIfParser(parser, bits).parse()
A:django.template.defaulttags.lib->get_library(taglib)
A:django.template.defaulttags.temp_lib->Library()
A:django.template.defaulttags.target->parser.compile_filter(bits[1])
A:django.template.defaulttags.expression->parser.compile_filter(var_name + VARIABLE_ATTRIBUTE_SEPARATOR + bits[3])
A:django.template.defaulttags.viewname->parser.compile_filter(bits[1])
A:django.template.defaulttags.(name, value)->django.template.base.kwarg_re.match(bit).groups()
A:django.template.defaulttags.kwargs[name]->parser.compile_filter(value)
A:django.template.defaulttags.extra_context->token_kwargs(remaining_bits, parser, support_legacy=True)
django.template.defaulttags.AutoEscapeControlNode(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.__init__(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.render(self,context)
django.template.defaulttags.CommentNode(Node)
django.template.defaulttags.CommentNode.render(self,context)
django.template.defaulttags.CsrfTokenNode(Node)
django.template.defaulttags.CsrfTokenNode.render(self,context)
django.template.defaulttags.CycleNode(self,cyclevars,variable_name=None,silent=False,escape=False)
django.template.defaulttags.CycleNode.__init__(self,cyclevars,variable_name=None,silent=False,escape=False)
django.template.defaulttags.CycleNode.render(self,context)
django.template.defaulttags.DebugNode(Node)
django.template.defaulttags.DebugNode.render(self,context)
django.template.defaulttags.FilterNode(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.__init__(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.render(self,context)
django.template.defaulttags.FirstOfNode(self,variables,escape=False)
django.template.defaulttags.FirstOfNode.__init__(self,variables,escape=False)
django.template.defaulttags.FirstOfNode.render(self,context)
django.template.defaulttags.ForNode(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__init__(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__iter__(self)
django.template.defaulttags.ForNode.__repr__(self)
django.template.defaulttags.ForNode.render(self,context)
django.template.defaulttags.IfChangedNode(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode.__init__(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode._get_context_stack_frame(self,context)
django.template.defaulttags.IfChangedNode.render(self,context)
django.template.defaulttags.IfEqualNode(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__init__(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__repr__(self)
django.template.defaulttags.IfEqualNode.render(self,context)
django.template.defaulttags.IfNode(self,conditions_nodelists)
django.template.defaulttags.IfNode.__init__(self,conditions_nodelists)
django.template.defaulttags.IfNode.__iter__(self)
django.template.defaulttags.IfNode.__repr__(self)
django.template.defaulttags.IfNode.nodelist(self)
django.template.defaulttags.IfNode.render(self,context)
django.template.defaulttags.LoadNode(Node)
django.template.defaulttags.LoadNode.render(self,context)
django.template.defaulttags.NowNode(self,format_string)
django.template.defaulttags.NowNode.__init__(self,format_string)
django.template.defaulttags.NowNode.render(self,context)
django.template.defaulttags.RegroupNode(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.__init__(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.render(self,context)
django.template.defaulttags.RegroupNode.resolve_expression(self,obj,context)
django.template.defaulttags.SpacelessNode(self,nodelist)
django.template.defaulttags.SpacelessNode.__init__(self,nodelist)
django.template.defaulttags.SpacelessNode.render(self,context)
django.template.defaulttags.SsiNode(self,filepath,parsed)
django.template.defaulttags.SsiNode.__init__(self,filepath,parsed)
django.template.defaulttags.SsiNode.render(self,context)
django.template.defaulttags.TemplateIfParser(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.__init__(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.create_var(self,value)
django.template.defaulttags.TemplateLiteral(self,value,text)
django.template.defaulttags.TemplateLiteral.__init__(self,value,text)
django.template.defaulttags.TemplateLiteral.display(self)
django.template.defaulttags.TemplateLiteral.eval(self,context)
django.template.defaulttags.TemplateTagNode(self,tagtype)
django.template.defaulttags.TemplateTagNode.__init__(self,tagtype)
django.template.defaulttags.TemplateTagNode.render(self,context)
django.template.defaulttags.URLNode(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.__init__(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.render(self,context)
django.template.defaulttags.VerbatimNode(self,content)
django.template.defaulttags.VerbatimNode.__init__(self,content)
django.template.defaulttags.VerbatimNode.render(self,context)
django.template.defaulttags.WidthRatioNode(self,val_expr,max_expr,max_width)
django.template.defaulttags.WidthRatioNode.__init__(self,val_expr,max_expr,max_width)
django.template.defaulttags.WidthRatioNode.render(self,context)
django.template.defaulttags.WithNode(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__init__(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__repr__(self)
django.template.defaulttags.WithNode.render(self,context)
django.template.defaulttags.autoescape(parser,token)
django.template.defaulttags.comment(parser,token)
django.template.defaulttags.csrf_token(parser,token)
django.template.defaulttags.cycle(parser,token,escape=False)
django.template.defaulttags.debug(parser,token)
django.template.defaulttags.do_filter(parser,token)
django.template.defaulttags.do_for(parser,token)
django.template.defaulttags.do_if(parser,token)
django.template.defaulttags.do_ifequal(parser,token,negate)
django.template.defaulttags.do_with(parser,token)
django.template.defaulttags.firstof(parser,token,escape=False)
django.template.defaulttags.ifchanged(parser,token)
django.template.defaulttags.ifequal(parser,token)
django.template.defaulttags.ifnotequal(parser,token)
django.template.defaulttags.include_is_allowed(filepath)
django.template.defaulttags.load(parser,token)
django.template.defaulttags.now(parser,token)
django.template.defaulttags.regroup(parser,token)
django.template.defaulttags.spaceless(parser,token)
django.template.defaulttags.ssi(parser,token)
django.template.defaulttags.templatetag(parser,token)
django.template.defaulttags.url(parser,token)
django.template.defaulttags.verbatim(parser,token)
django.template.defaulttags.widthratio(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/smartif.py----------------------------------------
A:django.template.smartif.self.second->parser.expression(bp)
A:django.template.smartif.self.first->parser.expression(bp)
A:django.template.smartif.EndToken->EndToken()
A:django.template.smartif.l->len(tokens)
A:django.template.smartif.self.current_token->self.next_token()
A:django.template.smartif.retval->self.expression()
A:django.template.smartif.left->t.led(left, self)
django.template.smartif.EndToken(TokenBase)
django.template.smartif.EndToken.nud(self,parser)
django.template.smartif.IfParser(self,tokens)
django.template.smartif.IfParser.__init__(self,tokens)
django.template.smartif.IfParser.create_var(self,value)
django.template.smartif.IfParser.expression(self,rbp=0)
django.template.smartif.IfParser.next_token(self)
django.template.smartif.IfParser.parse(self)
django.template.smartif.IfParser.translate_token(self,token)
django.template.smartif.Literal(self,value)
django.template.smartif.Literal.__init__(self,value)
django.template.smartif.Literal.__repr__(self)
django.template.smartif.Literal.display(self)
django.template.smartif.Literal.eval(self,context)
django.template.smartif.Literal.nud(self,parser)
django.template.smartif.TokenBase(object)
django.template.smartif.TokenBase.__repr__(self)
django.template.smartif.TokenBase.display(self)
django.template.smartif.TokenBase.led(self,left,parser)
django.template.smartif.TokenBase.nud(self,parser)
django.template.smartif.infix(bp,func)
django.template.smartif.prefix(bp,func)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/debug.py----------------------------------------
A:django.template.debug.(start, end)->match.span()
A:django.template.debug.token->super(DebugLexer, self).create_token(token_string, in_tag)
A:django.template.debug.e->TemplateSyntaxError(msg)
A:django.template.debug.(command, source)->self.command_stack.pop()
A:django.template.debug.output->force_text(output)
django.template.debug.DebugLexer(self,template_string,origin)
django.template.debug.DebugLexer.__init__(self,template_string,origin)
django.template.debug.DebugLexer.create_token(self,token_string,source,in_tag)
django.template.debug.DebugLexer.tokenize(self)
django.template.debug.DebugNodeList(NodeList)
django.template.debug.DebugNodeList.render_node(self,node,context)
django.template.debug.DebugParser(self,lexer)
django.template.debug.DebugParser.__init__(self,lexer)
django.template.debug.DebugParser.compile_filter_error(self,token,e)
django.template.debug.DebugParser.compile_function_error(self,token,e)
django.template.debug.DebugParser.create_nodelist(self)
django.template.debug.DebugParser.create_variable_node(self,contents)
django.template.debug.DebugParser.enter_command(self,command,token)
django.template.debug.DebugParser.error(self,token,msg)
django.template.debug.DebugParser.exit_command(self)
django.template.debug.DebugParser.extend_nodelist(self,nodelist,node,token)
django.template.debug.DebugParser.source_error(self,source,msg)
django.template.debug.DebugParser.unclosed_block_tag(self,parse_until)
django.template.debug.DebugVariableNode(VariableNode)
django.template.debug.DebugVariableNode.render(self,context)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/base.py----------------------------------------
A:django.template.base.tag_re->re.compile('(%s.*?%s|%s.*?%s|%s.*?%s)' % (re.escape(BLOCK_TAG_START), re.escape(BLOCK_TAG_END), re.escape(VARIABLE_TAG_START), re.escape(VARIABLE_TAG_END), re.escape(COMMENT_TAG_START), re.escape(COMMENT_TAG_END)))
A:django.template.base.template_string->force_text(template_string)
A:django.template.base.origin->StringOrigin(template_string)
A:django.template.base.self.nodelist->compile_string(template_string, origin)
A:django.template.base.lexer->lexer_class(template_string, origin)
A:django.template.base.parser->parser_class(lexer.tokenize())
A:django.template.base.bits->iter(smart_split(self.contents))
A:django.template.base.bit->self.render_node(node, context)
A:django.template.base.block_content->token_string[2:-2].strip()
A:django.template.base.token->self.next_token()
A:django.template.base.content->token_string[2:-2].strip()
A:django.template.base.nodelist->getattr(self, attr, None)
A:django.template.base.filter_expression->self.compile_filter(token.contents)
A:django.template.base.var_node->self.create_variable_node(filter_expression)
A:django.template.base.compiled_result->compile_func(self, token)
A:django.template.base.self.tagname->self.tag()
A:django.template.base.self.pointer->self.backout.pop()
A:django.template.base.i->next_space_index(subject, i)
A:django.template.base.constant_string->constant_string.replace('\n', '').replace('\n', '')
A:django.template.base.filter_re->re.compile(filter_raw_string, re.UNICODE | re.VERBOSE)
A:django.template.base.matches->re.compile(filter_raw_string, re.UNICODE | re.VERBOSE).finditer(token)
A:django.template.base.start->kwarg_re.match(bits[0]).start()
A:django.template.base.(var, constant)->kwarg_re.match(bits[0]).group('var', 'constant')
A:django.template.base.var_obj->Variable(var)
A:django.template.base.filter_name->kwarg_re.match(bits[0]).group('filter_name')
A:django.template.base.(constant_arg, var_arg)->kwarg_re.match(bits[0]).group('constant_arg', 'var_arg')
A:django.template.base.filter_func->parser_class(lexer.tokenize()).find_filter(filter_name)
A:django.template.base.upto->kwarg_re.match(bits[0]).end()
A:django.template.base.obj->mark_for_escaping(new_obj)
A:django.template.base.new_obj->func(obj, *arg_vals)
A:django.template.base.provided->list(provided)
A:django.template.base.plen->len(provided)
A:django.template.base.func->getattr(func, '_decorated_function', func)
A:django.template.base.(args, varargs, varkw, defaults)->getargspec(func)
A:django.template.base.args_check->staticmethod(args_check)
A:django.template.base.self.literal->mark_safe(unescape_string_literal(var))
A:django.template.base.self.lookups->tuple(var.split(VARIABLE_ATTRIBUTE_SEPARATOR))
A:django.template.base.value->force_text(value)
A:django.template.base.current->current()
A:django.template.base.output->self.filter_expression.resolve(context)
A:django.template.base.kwarg_re->re.compile('(?:(\\w+)=)?(.+)')
A:django.template.base.match->re.compile('(?:(\\w+)=)?(.+)').match(bits[0])
A:django.template.base.(key, value)->re.compile('(?:(\\w+)=)?(.+)').match(bits[0]).groups()
A:django.template.base.kwargs[key]->parser_class(lexer.tokenize()).compile_filter(value)
A:django.template.base.unhandled_params->list(params)
A:django.template.base.kwarg->token_kwargs([bit], parser)
A:django.template.base.(args, kwargs)->parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, function_name)
A:django.template.base.resolved_kwargs->dict(((k, v.resolve(context)) for (k, v) in self.kwargs.items()))
A:django.template.base.(params, varargs, varkw, defaults)->getargspec(func)
A:django.template.base.(resolved_args, resolved_kwargs)->self.get_resolved_arguments(context)
A:django.template.base.compile_func->partial(generic_tag_compiler, params=params, varargs=varargs, varkw=varkw, defaults=defaults, name=function_name, takes_context=takes_context, node_class=InclusionNode)
A:django.template.base.context[self.target_var]->func(*resolved_args, **resolved_kwargs)
A:django.template.base._dict->func(*resolved_args, **resolved_kwargs)
A:django.template.base.t->get_template(file_name)
A:django.template.base.new_context->context_class(_dict, **{'autoescape': context.autoescape, 'current_app': context.current_app, 'use_l10n': context.use_l10n, 'use_tz': context.use_tz})
A:django.template.base.csrf_token->context.get('csrf_token', None)
A:django.template.base.(path, module)->name.rsplit('.', 1)
A:django.template.base.package->import_module(path)
A:django.template.base.mod->import_module(taglib_module)
A:django.template.base.lib->import_library(taglib_module)
A:django.template.base.templatetags_modules->get_templatetags_modules()
django.template.FilterExpression(self,token,parser)
django.template.FilterExpression.__str__(self)
django.template.FilterExpression.args_check(name,func,provided)
django.template.FilterExpression.resolve(self,context,ignore_failures=False)
django.template.InvalidTemplateLibrary(Exception)
django.template.Lexer(self,template_string,origin)
django.template.Lexer.create_token(self,token_string,in_tag)
django.template.Lexer.tokenize(self)
django.template.Library(self)
django.template.Library.assignment_tag(self,func=None,takes_context=None,name=None)
django.template.Library.filter(self,name=None,filter_func=None,**flags)
django.template.Library.filter_function(self,func,**flags)
django.template.Library.inclusion_tag(self,file_name,context_class=Context,takes_context=False,name=None)
django.template.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.Library.tag(self,name=None,compile_function=None)
django.template.Library.tag_function(self,func)
django.template.Node(object)
django.template.Node.__iter__(self)
django.template.Node.get_nodes_by_type(self,nodetype)
django.template.Node.render(self,context)
django.template.NodeList(list)
django.template.NodeList.get_nodes_by_type(self,nodetype)
django.template.NodeList.render(self,context)
django.template.NodeList.render_node(self,node,context)
django.template.Origin(self,name)
django.template.Origin.__str__(self)
django.template.Origin.reload(self)
django.template.Parser(self,tokens)
django.template.Parser.add_library(self,lib)
django.template.Parser.compile_filter(self,token)
django.template.Parser.compile_filter_error(self,token,e)
django.template.Parser.compile_function_error(self,token,e)
django.template.Parser.create_nodelist(self)
django.template.Parser.create_variable_node(self,filter_expression)
django.template.Parser.delete_first_token(self)
django.template.Parser.empty_block_tag(self,token)
django.template.Parser.empty_variable(self,token)
django.template.Parser.enter_command(self,command,token)
django.template.Parser.error(self,token,msg)
django.template.Parser.exit_command(self)
django.template.Parser.extend_nodelist(self,nodelist,node,token)
django.template.Parser.find_filter(self,filter_name)
django.template.Parser.invalid_block_tag(self,token,command,parse_until=None)
django.template.Parser.next_token(self)
django.template.Parser.parse(self,parse_until=None)
django.template.Parser.prepend_token(self,token)
django.template.Parser.skip_past(self,endtag)
django.template.Parser.unclosed_block_tag(self,parse_until)
django.template.StringOrigin(self,source)
django.template.StringOrigin.reload(self)
django.template.Template(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.Template.__iter__(self)
django.template.Template._render(self,context)
django.template.Template.render(self,context)
django.template.TemplateDoesNotExist(Exception)
django.template.TemplateEncodingError(Exception)
django.template.TemplateSyntaxError(Exception)
django.template.TextNode(self,s)
django.template.TextNode.__repr__(self)
django.template.TextNode.render(self,context)
django.template.Token(self,token_type,contents)
django.template.Token.__str__(self)
django.template.Token.split_contents(self)
django.template.TokenParser(self,subject)
django.template.TokenParser.back(self)
django.template.TokenParser.more(self)
django.template.TokenParser.tag(self)
django.template.TokenParser.top(self)
django.template.TokenParser.value(self)
django.template.Variable(self,var)
django.template.Variable.__repr__(self)
django.template.Variable.__str__(self)
django.template.Variable._resolve_lookup(self,context)
django.template.Variable.resolve(self,context)
django.template.VariableDoesNotExist(self,msg,params=())
django.template.VariableDoesNotExist.__str__(self)
django.template.VariableNode(self,filter_expression)
django.template.VariableNode.__repr__(self)
django.template.VariableNode.render(self,context)
django.template.add_to_builtins(module)
django.template.base.FilterExpression(self,token,parser)
django.template.base.FilterExpression.__init__(self,token,parser)
django.template.base.FilterExpression.__str__(self)
django.template.base.FilterExpression.args_check(name,func,provided)
django.template.base.FilterExpression.resolve(self,context,ignore_failures=False)
django.template.base.InvalidTemplateLibrary(Exception)
django.template.base.Lexer(self,template_string,origin)
django.template.base.Lexer.__init__(self,template_string,origin)
django.template.base.Lexer.create_token(self,token_string,in_tag)
django.template.base.Lexer.tokenize(self)
django.template.base.Library(self)
django.template.base.Library.__init__(self)
django.template.base.Library.assignment_tag(self,func=None,takes_context=None,name=None)
django.template.base.Library.filter(self,name=None,filter_func=None,**flags)
django.template.base.Library.filter_function(self,func,**flags)
django.template.base.Library.inclusion_tag(self,file_name,context_class=Context,takes_context=False,name=None)
django.template.base.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.base.Library.tag(self,name=None,compile_function=None)
django.template.base.Library.tag_function(self,func)
django.template.base.Node(object)
django.template.base.Node.__iter__(self)
django.template.base.Node.get_nodes_by_type(self,nodetype)
django.template.base.Node.render(self,context)
django.template.base.NodeList(list)
django.template.base.NodeList.get_nodes_by_type(self,nodetype)
django.template.base.NodeList.render(self,context)
django.template.base.NodeList.render_node(self,node,context)
django.template.base.Origin(self,name)
django.template.base.Origin.__init__(self,name)
django.template.base.Origin.__str__(self)
django.template.base.Origin.reload(self)
django.template.base.Parser(self,tokens)
django.template.base.Parser.__init__(self,tokens)
django.template.base.Parser.add_library(self,lib)
django.template.base.Parser.compile_filter(self,token)
django.template.base.Parser.compile_filter_error(self,token,e)
django.template.base.Parser.compile_function_error(self,token,e)
django.template.base.Parser.create_nodelist(self)
django.template.base.Parser.create_variable_node(self,filter_expression)
django.template.base.Parser.delete_first_token(self)
django.template.base.Parser.empty_block_tag(self,token)
django.template.base.Parser.empty_variable(self,token)
django.template.base.Parser.enter_command(self,command,token)
django.template.base.Parser.error(self,token,msg)
django.template.base.Parser.exit_command(self)
django.template.base.Parser.extend_nodelist(self,nodelist,node,token)
django.template.base.Parser.find_filter(self,filter_name)
django.template.base.Parser.invalid_block_tag(self,token,command,parse_until=None)
django.template.base.Parser.next_token(self)
django.template.base.Parser.parse(self,parse_until=None)
django.template.base.Parser.prepend_token(self,token)
django.template.base.Parser.skip_past(self,endtag)
django.template.base.Parser.unclosed_block_tag(self,parse_until)
django.template.base.StringOrigin(self,source)
django.template.base.StringOrigin.__init__(self,source)
django.template.base.StringOrigin.reload(self)
django.template.base.TagHelperNode(self,takes_context,args,kwargs)
django.template.base.TagHelperNode.__init__(self,takes_context,args,kwargs)
django.template.base.TagHelperNode.get_resolved_arguments(self,context)
django.template.base.Template(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.base.Template.__init__(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.base.Template.__iter__(self)
django.template.base.Template._render(self,context)
django.template.base.Template.render(self,context)
django.template.base.TemplateDoesNotExist(Exception)
django.template.base.TemplateEncodingError(Exception)
django.template.base.TemplateSyntaxError(Exception)
django.template.base.TextNode(self,s)
django.template.base.TextNode.__init__(self,s)
django.template.base.TextNode.__repr__(self)
django.template.base.TextNode.render(self,context)
django.template.base.Token(self,token_type,contents)
django.template.base.Token.__init__(self,token_type,contents)
django.template.base.Token.__str__(self)
django.template.base.Token.split_contents(self)
django.template.base.TokenParser(self,subject)
django.template.base.TokenParser.__init__(self,subject)
django.template.base.TokenParser.back(self)
django.template.base.TokenParser.more(self)
django.template.base.TokenParser.tag(self)
django.template.base.TokenParser.top(self)
django.template.base.TokenParser.value(self)
django.template.base.Variable(self,var)
django.template.base.Variable.__init__(self,var)
django.template.base.Variable.__repr__(self)
django.template.base.Variable.__str__(self)
django.template.base.Variable._resolve_lookup(self,context)
django.template.base.Variable.resolve(self,context)
django.template.base.VariableDoesNotExist(self,msg,params=())
django.template.base.VariableDoesNotExist.__init__(self,msg,params=())
django.template.base.VariableDoesNotExist.__str__(self)
django.template.base.VariableNode(self,filter_expression)
django.template.base.VariableNode.__init__(self,filter_expression)
django.template.base.VariableNode.__repr__(self)
django.template.base.VariableNode.render(self,context)
django.template.base.add_to_builtins(module)
django.template.base.compile_string(template_string,origin)
django.template.base.generic_tag_compiler(parser,token,params,varargs,varkw,defaults,name,takes_context,node_class)
django.template.base.get_library(library_name)
django.template.base.get_templatetags_modules()
django.template.base.import_library(taglib_module)
django.template.base.is_library_missing(name)
django.template.base.parse_bits(parser,bits,params,varargs,varkw,defaults,takes_context,name)
django.template.base.render_value_in_context(value,context)
django.template.base.resolve_variable(path,context)
django.template.base.token_kwargs(bits,parser,support_legacy=False)
django.template.compile_string(template_string,origin)
django.template.generic_tag_compiler(parser,token,params,varargs,varkw,defaults,name,takes_context,node_class)
django.template.get_library(library_name)
django.template.get_templatetags_modules()
django.template.import_library(taglib_module)
django.template.resolve_variable(path,context)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loader_tags.py----------------------------------------
A:django.template.loader_tags.register->Library()
A:django.template.loader_tags.self.blocks->dict([(n.name, n) for n in nodelist.get_nodes_by_type(BlockNode)])
A:django.template.loader_tags.block_context->context.render_context.get(BLOCK_CONTEXT_KEY)
A:django.template.loader_tags.result->BlockNode(block.name, block.nodelist).nodelist.render(context)
A:django.template.loader_tags.pushblock->context.render_context.get(BLOCK_CONTEXT_KEY).pop(self.name)
A:django.template.loader_tags.block->BlockNode(block.name, block.nodelist)
A:django.template.loader_tags.parent->self.parent_name.resolve(context)
A:django.template.loader_tags.compiled_parent->self.get_parent(context)
A:django.template.loader_tags.context.render_context[BLOCK_CONTEXT_KEY]->BlockContext()
A:django.template.loader_tags.blocks->dict([(n.name, n) for n in compiled_parent.nodelist.get_nodes_by_type(BlockNode)])
A:django.template.loader_tags.self.extra_context->kwargs.pop('extra_context', {})
A:django.template.loader_tags.self.isolated_context->kwargs.pop('isolated_context', False)
A:django.template.loader_tags.values->dict([(name, var.resolve(context)) for (name, var) in six.iteritems(self.extra_context)])
A:django.template.loader_tags.output->get_template(template_name).render(context)
A:django.template.loader_tags.t->get_template(template_path)
A:django.template.loader_tags.template_name->self.template_name.resolve(context)
A:django.template.loader_tags.template->get_template(template_name)
A:django.template.loader_tags.bits->token.split_contents()
A:django.template.loader_tags.nodelist->parser.parse()
A:django.template.loader_tags.endblock->parser.next_token()
A:django.template.loader_tags.parent_name->parser.compile_filter(bits[1])
A:django.template.loader_tags.option->remaining_bits.pop(0)
A:django.template.loader_tags.value->token_kwargs(remaining_bits, parser, support_legacy=False)
A:django.template.loader_tags.isolated_context->options.get('only', False)
A:django.template.loader_tags.namemap->options.get('with', {})
django.template.loader_tags.BaseIncludeNode(self,*args,**kwargs)
django.template.loader_tags.BaseIncludeNode.__init__(self,*args,**kwargs)
django.template.loader_tags.BaseIncludeNode.render_template(self,template,context)
django.template.loader_tags.BlockContext(self)
django.template.loader_tags.BlockContext.__init__(self)
django.template.loader_tags.BlockContext.add_blocks(self,blocks)
django.template.loader_tags.BlockContext.get_block(self,name)
django.template.loader_tags.BlockContext.pop(self,name)
django.template.loader_tags.BlockContext.push(self,name,block)
django.template.loader_tags.BlockNode(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__init__(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__repr__(self)
django.template.loader_tags.BlockNode.render(self,context)
django.template.loader_tags.BlockNode.super(self)
django.template.loader_tags.ConstantIncludeNode(self,template_path,*args,**kwargs)
django.template.loader_tags.ConstantIncludeNode.__init__(self,template_path,*args,**kwargs)
django.template.loader_tags.ConstantIncludeNode.render(self,context)
django.template.loader_tags.ExtendsError(Exception)
django.template.loader_tags.ExtendsNode(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__init__(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__repr__(self)
django.template.loader_tags.ExtendsNode.get_parent(self,context)
django.template.loader_tags.ExtendsNode.render(self,context)
django.template.loader_tags.IncludeNode(self,template_name,*args,**kwargs)
django.template.loader_tags.IncludeNode.__init__(self,template_name,*args,**kwargs)
django.template.loader_tags.IncludeNode.render(self,context)
django.template.loader_tags.do_block(parser,token)
django.template.loader_tags.do_extends(parser,token)
django.template.loader_tags.do_include(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/context.py----------------------------------------
A:django.template.context.duplicate->super(Context, self).__copy__()
A:django.template.context.new_context->copy(self)
A:django.template.context.self.render_context->RenderContext()
A:django.template.context.duplicate.render_context->copy(self.render_context)
A:django.template.context.func->import_by_path(path)
A:django.template.context._standard_context_processors->tuple(processors)
A:django.template.context.processors->tuple(processors)
django.template.context.BaseContext(self,dict_=None)
django.template.context.BaseContext.__contains__(self,key)
django.template.context.BaseContext.__copy__(self)
django.template.context.BaseContext.__delitem__(self,key)
django.template.context.BaseContext.__getitem__(self,key)
django.template.context.BaseContext.__init__(self,dict_=None)
django.template.context.BaseContext.__iter__(self)
django.template.context.BaseContext.__repr__(self)
django.template.context.BaseContext.__setitem__(self,key,value)
django.template.context.BaseContext._reset_dicts(self,value=None)
django.template.context.BaseContext.get(self,key,otherwise=None)
django.template.context.BaseContext.has_key(self,key)
django.template.context.BaseContext.new(self,values=None)
django.template.context.BaseContext.pop(self)
django.template.context.BaseContext.push(self)
django.template.context.Context(self,dict_=None,autoescape=True,current_app=None,use_l10n=None,use_tz=None)
django.template.context.Context.__copy__(self)
django.template.context.Context.__init__(self,dict_=None,autoescape=True,current_app=None,use_l10n=None,use_tz=None)
django.template.context.Context.update(self,other_dict)
django.template.context.ContextPopException(Exception)
django.template.context.RenderContext(BaseContext)
django.template.context.RenderContext.__iter__(self)
django.template.context.RenderContext.get(self,key,otherwise=None)
django.template.context.RenderContext.has_key(self,key)
django.template.context.RequestContext(self,request,dict_=None,processors=None,current_app=None,use_l10n=None,use_tz=None)
django.template.context.RequestContext.__init__(self,request,dict_=None,processors=None,current_app=None,use_l10n=None,use_tz=None)
django.template.context.get_standard_processors()


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loader.py----------------------------------------
A:django.template.loader.(source, display_name)->loader(name, dirs)
A:django.template.loader.origin->make_origin(display_name, self.load_template_source, template_name, template_dirs)
A:django.template.loader.template->get_template_from_string(template, origin, template_name)
A:django.template.loader.TemplateLoader->import_by_path(loader)
A:django.template.loader.func->TemplateLoader(*args)
A:django.template.loader.loader->find_template_loader(loader_name)
A:django.template.loader.template_source_loaders->tuple(loaders)
A:django.template.loader.(template, origin)->find_template(template_name)
A:django.template.loader.t->get_template(template_name)
django.template.loader.BaseLoader(self,*args,**kwargs)
django.template.loader.BaseLoader.__init__(self,*args,**kwargs)
django.template.loader.BaseLoader.load_template(self,template_name,template_dirs=None)
django.template.loader.BaseLoader.load_template_source(self,template_name,template_dirs=None)
django.template.loader.BaseLoader.reset(self)
django.template.loader.LoaderOrigin(self,display_name,loader,name,dirs)
django.template.loader.LoaderOrigin.__init__(self,display_name,loader,name,dirs)
django.template.loader.LoaderOrigin.reload(self)
django.template.loader.find_template(name,dirs=None)
django.template.loader.find_template_loader(loader)
django.template.loader.get_template(template_name)
django.template.loader.get_template_from_string(source,origin=None,name=None)
django.template.loader.make_origin(display_name,loader,name,dirs)
django.template.loader.render_to_string(template_name,dictionary=None,context_instance=None)
django.template.loader.select_template(template_name_list)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/response.py----------------------------------------
A:django.template.response.obj_dict->super(SimpleTemplateResponse, self).__getstate__()
A:django.template.response.template->self.resolve_template(self.template_name)
A:django.template.response.context->self.resolve_context(self.context_data)
A:django.template.response.content->self.resolve_template(self.template_name).render(context)
A:django.template.response.newretval->post_callback(retval)
django.template.response.ContentNotRenderedError(Exception)
django.template.response.SimpleTemplateResponse(self,template,context=None,content_type=None,status=None,mimetype=None)
django.template.response.SimpleTemplateResponse.__getstate__(self)
django.template.response.SimpleTemplateResponse.__init__(self,template,context=None,content_type=None,status=None,mimetype=None)
django.template.response.SimpleTemplateResponse.__iter__(self)
django.template.response.SimpleTemplateResponse.add_post_render_callback(self,callback)
django.template.response.SimpleTemplateResponse.content(self)
django.template.response.SimpleTemplateResponse.content(self,value)
django.template.response.SimpleTemplateResponse.is_rendered(self)
django.template.response.SimpleTemplateResponse.render(self)
django.template.response.SimpleTemplateResponse.rendered_content(self)
django.template.response.SimpleTemplateResponse.resolve_context(self,context)
django.template.response.SimpleTemplateResponse.resolve_template(self,template)
django.template.response.TemplateResponse(self,request,template,context=None,content_type=None,status=None,mimetype=None,current_app=None)
django.template.response.TemplateResponse.__init__(self,request,template,context=None,content_type=None,status=None,mimetype=None,current_app=None)
django.template.response.TemplateResponse.resolve_context(self,context)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loaders/eggs.py----------------------------------------
A:django.template.loaders.eggs.resource->resource.decode(settings.FILE_CHARSET).decode(settings.FILE_CHARSET)
django.template.loaders.eggs.Loader(BaseLoader)
django.template.loaders.eggs.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loaders/filesystem.py----------------------------------------
django.template.loaders.filesystem.Loader(BaseLoader)
django.template.loaders.filesystem.Loader.get_template_sources(self,template_name,template_dirs=None)
django.template.loaders.filesystem.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loaders/app_directories.py----------------------------------------
A:django.template.loaders.app_directories.mod->import_module(app)
A:django.template.loaders.app_directories.template_dir->template_dir.decode(fs_encoding).decode(fs_encoding)
A:django.template.loaders.app_directories.app_template_dirs->tuple(app_template_dirs)
django.template.loaders.app_directories.Loader(BaseLoader)
django.template.loaders.app_directories.Loader.get_template_sources(self,template_name,template_dirs=None)
django.template.loaders.app_directories.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loaders/cached.py----------------------------------------
A:django.template.loaders.cached.(template, display_name)->loader(name, dirs)
A:django.template.loaders.cached.key->'-'.join([template_name, hashlib.sha1(force_bytes('|'.join(template_dirs))).hexdigest()])
A:django.template.loaders.cached.(template, origin)->self.find_template(template_name, template_dirs)
A:django.template.loaders.cached.template->get_template_from_string(template, origin, template_name)
django.template.loaders.cached.Loader(self,loaders)
django.template.loaders.cached.Loader.__init__(self,loaders)
django.template.loaders.cached.Loader.find_template(self,name,dirs=None)
django.template.loaders.cached.Loader.load_template(self,template_name,template_dirs=None)
django.template.loaders.cached.Loader.loaders(self)
django.template.loaders.cached.Loader.reset(self)


----------------------------------------/home/zhang/Packages/django/django1.6.1/template/loaders/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/util.py----------------------------------------
A:django.forms.util.current_timezone->django.utils.timezone.get_current_timezone()
A:django.forms.util.message->_("%(datetime)s couldn't be interpreted in time zone %(current_timezone)s; it may be ambiguous or it may not exist.")
django.forms.util.ErrorDict(dict)
django.forms.util.ErrorDict.__str__(self)
django.forms.util.ErrorDict.as_text(self)
django.forms.util.ErrorDict.as_ul(self)
django.forms.util.ErrorList(list)
django.forms.util.ErrorList.__repr__(self)
django.forms.util.ErrorList.__str__(self)
django.forms.util.ErrorList.as_text(self)
django.forms.util.ErrorList.as_ul(self)
django.forms.util.flatatt(attrs)
django.forms.util.from_current_timezone(value)
django.forms.util.to_current_timezone(value)
django.util.ErrorDict(dict)
django.util.ErrorDict.__str__(self)
django.util.ErrorDict.as_text(self)
django.util.ErrorDict.as_ul(self)
django.util.ErrorList(list)
django.util.ErrorList.__repr__(self)
django.util.ErrorList.__str__(self)
django.util.ErrorList.as_text(self)
django.util.ErrorList.as_ul(self)
django.util.flatatt(attrs)
django.util.from_current_timezone(value)
django.util.to_current_timezone(value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/widgets.py----------------------------------------
A:django.forms.widgets.media->property(_get_media)
A:django.forms.widgets.combined->Media()
A:django.forms.widgets.sup_cls->super(cls, self)
A:django.forms.widgets.base->Media()
A:django.forms.widgets.definition->getattr(cls, 'Media', None)
A:django.forms.widgets.extend->getattr(definition, 'extend', True)
A:django.forms.widgets.m->Media()
A:django.forms.widgets.new_class->super(MediaDefiningClass, cls).__new__(cls, name, bases, attrs)
A:django.forms.widgets.new_class.media->media_property(new_class)
A:django.forms.widgets.self.attrs->dict(self.attrs, **kwargs).copy()
A:django.forms.widgets.obj->super(MultiWidget, self).__deepcopy__(memo)
A:django.forms.widgets.obj.attrs->self.attrs.copy()
A:django.forms.widgets.attrs->dict(self.attrs, **kwargs)
A:django.forms.widgets.final_attrs->dict(final_attrs, id='%s_%s' % (id_, i))
A:django.forms.widgets.final_attrs['value']->force_text(value)
A:django.forms.widgets.self.input_type->dict(self.attrs, **kwargs).pop('type', self.input_type)
A:django.forms.widgets.id_->dict(final_attrs, id='%s_%s' % (id_, i)).get('id', None)
A:django.forms.widgets.input_attrs->dict(value=force_text(v), **final_attrs)
A:django.forms.widgets.FILE_INPUT_CONTRADICTION->object()
A:django.forms.widgets.initial_text->ugettext_lazy('Currently')
A:django.forms.widgets.input_text->ugettext_lazy('Change')
A:django.forms.widgets.clear_checkbox_label->ugettext_lazy('Clear')
A:django.forms.widgets.substitutions['input']->super(ClearableFileInput, self).render(name, value, attrs)
A:django.forms.widgets.substitutions['initial']->format_html(self.url_markup_template, value.url, force_text(value))
A:django.forms.widgets.checkbox_name->self.clear_checkbox_name(name)
A:django.forms.widgets.checkbox_id->self.clear_checkbox_id(checkbox_name)
A:django.forms.widgets.substitutions['clear_checkbox_name']->conditional_escape(checkbox_name)
A:django.forms.widgets.substitutions['clear_checkbox_id']->conditional_escape(checkbox_id)
A:django.forms.widgets.substitutions['clear']->CheckboxInput().render(checkbox_name, False, attrs={'id': checkbox_id})
A:django.forms.widgets.upload->super(ClearableFileInput, self).value_from_datadict(data, files, name)
A:django.forms.widgets.value->to_current_timezone(value)
A:django.forms.widgets.self.choices->list(choices)
A:django.forms.widgets.options->self.render_options(choices, value)
A:django.forms.widgets.option_value->force_text(option_value)
A:django.forms.widgets.selected_html->mark_safe(' selected="selected"')
A:django.forms.widgets.selected_choices->set((force_text(v) for v in selected_choices))
A:django.forms.widgets.self.choice_value->force_text(choice[0])
A:django.forms.widgets.self.choice_label->force_text(choice[1])
A:django.forms.widgets.label_for->format_html(' for="{0}_{1}"', self.attrs['id'], self.index)
A:django.forms.widgets.self.value->set((force_text(v) for v in self.value))
A:django.forms.widgets.renderer->kwargs.pop('renderer', None)
A:django.forms.widgets.choices->list(chain(self.choices, choices))
A:django.forms.widgets.obj.widgets->copy.deepcopy(self.widgets)
django.forms.CheckboxChoiceInput(self,*args,**kwargs)
django.forms.CheckboxChoiceInput.is_checked(self)
django.forms.CheckboxFieldRenderer(ChoiceFieldRenderer)
django.forms.CheckboxInput(self,attrs=None,check_test=None)
django.forms.CheckboxInput.render(self,name,value,attrs=None)
django.forms.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.CheckboxSelectMultiple(RendererMixin,SelectMultiple)
django.forms.ChoiceFieldRenderer(self,name,value,attrs,choices)
django.forms.ChoiceFieldRenderer.__getitem__(self,idx)
django.forms.ChoiceFieldRenderer.__iter__(self)
django.forms.ChoiceFieldRenderer.__str__(self)
django.forms.ChoiceFieldRenderer.render(self)
django.forms.ChoiceInput(self,name,value,attrs,choice,index)
django.forms.ChoiceInput.__str__(self)
django.forms.ChoiceInput.is_checked(self)
django.forms.ChoiceInput.render(self,name=None,value=None,attrs=None,choices=())
django.forms.ChoiceInput.tag(self)
django.forms.ClearableFileInput(FileInput)
django.forms.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.ClearableFileInput.render(self,name,value,attrs=None)
django.forms.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.DateInput(self,attrs=None,format=None)
django.forms.DateInput._format_value(self,value)
django.forms.DateTimeInput(self,attrs=None,format=None)
django.forms.DateTimeInput._format_value(self,value)
django.forms.EmailInput(TextInput)
django.forms.FileInput(Input)
django.forms.FileInput.render(self,name,value,attrs=None)
django.forms.FileInput.value_from_datadict(self,data,files,name)
django.forms.HiddenInput(Input)
django.forms.Input(Widget)
django.forms.Input._format_value(self,value)
django.forms.Input.render(self,name,value,attrs=None)
django.forms.Media(self,media=None,**kwargs)
django.forms.Media.__add__(self,other)
django.forms.Media.__getitem__(self,name)
django.forms.Media.__str__(self)
django.forms.Media.absolute_path(self,path,prefix=None)
django.forms.Media.add_css(self,data)
django.forms.Media.add_js(self,data)
django.forms.Media.render(self)
django.forms.Media.render_css(self)
django.forms.Media.render_js(self)
django.forms.MediaDefiningClass(cls,name,bases,attrs)
django.forms.MultiWidget(self,widgets,attrs=None)
django.forms.MultiWidget.__deepcopy__(self,memo)
django.forms.MultiWidget._get_media(self)
django.forms.MultiWidget.decompress(self,value)
django.forms.MultiWidget.format_output(self,rendered_widgets)
django.forms.MultiWidget.id_for_label(self,id_)
django.forms.MultiWidget.needs_multipart_form(self)
django.forms.MultiWidget.render(self,name,value,attrs=None)
django.forms.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.MultipleHiddenInput(self,attrs=None,choices=())
django.forms.MultipleHiddenInput.render(self,name,value,attrs=None,choices=())
django.forms.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.NullBooleanSelect(self,attrs=None)
django.forms.NullBooleanSelect.render(self,name,value,attrs=None,choices=())
django.forms.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.NumberInput(TextInput)
django.forms.PasswordInput(self,attrs=None,render_value=False)
django.forms.PasswordInput.render(self,name,value,attrs=None)
django.forms.RadioChoiceInput(self,*args,**kwargs)
django.forms.RadioFieldRenderer(ChoiceFieldRenderer)
django.forms.RadioInput(self,*args,**kwargs)
django.forms.RadioSelect(RendererMixin,Select)
django.forms.RendererMixin(self,*args,**kwargs)
django.forms.RendererMixin.get_renderer(self,name,value,attrs=None,choices=())
django.forms.RendererMixin.id_for_label(self,id_)
django.forms.RendererMixin.render(self,name,value,attrs=None,choices=())
django.forms.RendererMixin.subwidgets(self,name,value,attrs=None,choices=())
django.forms.Select(self,attrs=None,choices=())
django.forms.Select.render(self,name,value,attrs=None,choices=())
django.forms.Select.render_option(self,selected_choices,option_value,option_label)
django.forms.Select.render_options(self,choices,selected_choices)
django.forms.SelectMultiple(Select)
django.forms.SelectMultiple.render(self,name,value,attrs=None,choices=())
django.forms.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.SplitDateTimeWidget.decompress(self,value)
django.forms.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.SubWidget(self,parent_widget,name,value,attrs,choices)
django.forms.SubWidget.__str__(self)
django.forms.TextInput(self,attrs=None)
django.forms.Textarea(self,attrs=None)
django.forms.Textarea.render(self,name,value,attrs=None)
django.forms.TimeInput(self,attrs=None,format=None)
django.forms.TimeInput._format_value(self,value)
django.forms.URLInput(TextInput)
django.forms.Widget(self,attrs=None)
django.forms.Widget.__deepcopy__(self,memo)
django.forms.Widget.build_attrs(self,extra_attrs=None,**kwargs)
django.forms.Widget.id_for_label(self,id_)
django.forms.Widget.render(self,name,value,attrs=None)
django.forms.Widget.subwidgets(self,name,value,attrs=None,choices=())
django.forms.Widget.value_from_datadict(self,data,files,name)
django.forms.boolean_check(v)
django.forms.media_property(cls)
django.forms.widgets.CheckboxChoiceInput(self,*args,**kwargs)
django.forms.widgets.CheckboxChoiceInput.__init__(self,*args,**kwargs)
django.forms.widgets.CheckboxChoiceInput.is_checked(self)
django.forms.widgets.CheckboxFieldRenderer(ChoiceFieldRenderer)
django.forms.widgets.CheckboxInput(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.__init__(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.render(self,name,value,attrs=None)
django.forms.widgets.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.widgets.CheckboxSelectMultiple(RendererMixin,SelectMultiple)
django.forms.widgets.ChoiceFieldRenderer(self,name,value,attrs,choices)
django.forms.widgets.ChoiceFieldRenderer.__getitem__(self,idx)
django.forms.widgets.ChoiceFieldRenderer.__init__(self,name,value,attrs,choices)
django.forms.widgets.ChoiceFieldRenderer.__iter__(self)
django.forms.widgets.ChoiceFieldRenderer.__str__(self)
django.forms.widgets.ChoiceFieldRenderer.render(self)
django.forms.widgets.ChoiceInput(self,name,value,attrs,choice,index)
django.forms.widgets.ChoiceInput.__init__(self,name,value,attrs,choice,index)
django.forms.widgets.ChoiceInput.__str__(self)
django.forms.widgets.ChoiceInput.is_checked(self)
django.forms.widgets.ChoiceInput.render(self,name=None,value=None,attrs=None,choices=())
django.forms.widgets.ChoiceInput.tag(self)
django.forms.widgets.ClearableFileInput(FileInput)
django.forms.widgets.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.widgets.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.widgets.ClearableFileInput.render(self,name,value,attrs=None)
django.forms.widgets.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.DateInput(self,attrs=None,format=None)
django.forms.widgets.DateInput.__init__(self,attrs=None,format=None)
django.forms.widgets.DateInput._format_value(self,value)
django.forms.widgets.DateTimeInput(self,attrs=None,format=None)
django.forms.widgets.DateTimeInput.__init__(self,attrs=None,format=None)
django.forms.widgets.DateTimeInput._format_value(self,value)
django.forms.widgets.EmailInput(TextInput)
django.forms.widgets.FileInput(Input)
django.forms.widgets.FileInput.render(self,name,value,attrs=None)
django.forms.widgets.FileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.HiddenInput(Input)
django.forms.widgets.Input(Widget)
django.forms.widgets.Input._format_value(self,value)
django.forms.widgets.Input.render(self,name,value,attrs=None)
django.forms.widgets.Media(self,media=None,**kwargs)
django.forms.widgets.Media.__add__(self,other)
django.forms.widgets.Media.__getitem__(self,name)
django.forms.widgets.Media.__init__(self,media=None,**kwargs)
django.forms.widgets.Media.__str__(self)
django.forms.widgets.Media.absolute_path(self,path,prefix=None)
django.forms.widgets.Media.add_css(self,data)
django.forms.widgets.Media.add_js(self,data)
django.forms.widgets.Media.render(self)
django.forms.widgets.Media.render_css(self)
django.forms.widgets.Media.render_js(self)
django.forms.widgets.MediaDefiningClass(cls,name,bases,attrs)
django.forms.widgets.MediaDefiningClass.__new__(cls,name,bases,attrs)
django.forms.widgets.MultiWidget(self,widgets,attrs=None)
django.forms.widgets.MultiWidget.__deepcopy__(self,memo)
django.forms.widgets.MultiWidget.__init__(self,widgets,attrs=None)
django.forms.widgets.MultiWidget._get_media(self)
django.forms.widgets.MultiWidget.decompress(self,value)
django.forms.widgets.MultiWidget.format_output(self,rendered_widgets)
django.forms.widgets.MultiWidget.id_for_label(self,id_)
django.forms.widgets.MultiWidget.needs_multipart_form(self)
django.forms.widgets.MultiWidget.render(self,name,value,attrs=None)
django.forms.widgets.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.widgets.MultipleHiddenInput(self,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.__init__(self,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.render(self,name,value,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.widgets.NullBooleanSelect(self,attrs=None)
django.forms.widgets.NullBooleanSelect.__init__(self,attrs=None)
django.forms.widgets.NullBooleanSelect.render(self,name,value,attrs=None,choices=())
django.forms.widgets.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.widgets.NumberInput(TextInput)
django.forms.widgets.PasswordInput(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.__init__(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.render(self,name,value,attrs=None)
django.forms.widgets.RadioChoiceInput(self,*args,**kwargs)
django.forms.widgets.RadioChoiceInput.__init__(self,*args,**kwargs)
django.forms.widgets.RadioFieldRenderer(ChoiceFieldRenderer)
django.forms.widgets.RadioInput(self,*args,**kwargs)
django.forms.widgets.RadioInput.__init__(self,*args,**kwargs)
django.forms.widgets.RadioSelect(RendererMixin,Select)
django.forms.widgets.RendererMixin(self,*args,**kwargs)
django.forms.widgets.RendererMixin.__init__(self,*args,**kwargs)
django.forms.widgets.RendererMixin.get_renderer(self,name,value,attrs=None,choices=())
django.forms.widgets.RendererMixin.id_for_label(self,id_)
django.forms.widgets.RendererMixin.render(self,name,value,attrs=None,choices=())
django.forms.widgets.RendererMixin.subwidgets(self,name,value,attrs=None,choices=())
django.forms.widgets.Select(self,attrs=None,choices=())
django.forms.widgets.Select.__init__(self,attrs=None,choices=())
django.forms.widgets.Select.render(self,name,value,attrs=None,choices=())
django.forms.widgets.Select.render_option(self,selected_choices,option_value,option_label)
django.forms.widgets.Select.render_options(self,choices,selected_choices)
django.forms.widgets.SelectMultiple(Select)
django.forms.widgets.SelectMultiple.render(self,name,value,attrs=None,choices=())
django.forms.widgets.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.widgets.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitDateTimeWidget.decompress(self,value)
django.forms.widgets.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitHiddenDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SubWidget(self,parent_widget,name,value,attrs,choices)
django.forms.widgets.SubWidget.__init__(self,parent_widget,name,value,attrs,choices)
django.forms.widgets.SubWidget.__str__(self)
django.forms.widgets.TextInput(self,attrs=None)
django.forms.widgets.TextInput.__init__(self,attrs=None)
django.forms.widgets.Textarea(self,attrs=None)
django.forms.widgets.Textarea.__init__(self,attrs=None)
django.forms.widgets.Textarea.render(self,name,value,attrs=None)
django.forms.widgets.TimeInput(self,attrs=None,format=None)
django.forms.widgets.TimeInput.__init__(self,attrs=None,format=None)
django.forms.widgets.TimeInput._format_value(self,value)
django.forms.widgets.URLInput(TextInput)
django.forms.widgets.Widget(self,attrs=None)
django.forms.widgets.Widget.__deepcopy__(self,memo)
django.forms.widgets.Widget.__init__(self,attrs=None)
django.forms.widgets.Widget.build_attrs(self,extra_attrs=None,**kwargs)
django.forms.widgets.Widget.id_for_label(self,id_)
django.forms.widgets.Widget.render(self,name,value,attrs=None)
django.forms.widgets.Widget.subwidgets(self,name,value,attrs=None,choices=())
django.forms.widgets.Widget.value_from_datadict(self,data,files,name)
django.forms.widgets.boolean_check(v)
django.forms.widgets.media_property(cls)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/formsets.py----------------------------------------
A:django.forms.formsets.self.base_fields[TOTAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[INITIAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[MAX_NUM_FORM_COUNT]->IntegerField(required=False, widget=HiddenInput)
A:django.forms.formsets.form->self.form(auto_id=self.auto_id, prefix=self.add_prefix('__prefix__'), empty_permitted=True)
A:django.forms.formsets.initial_forms->self.initial_form_count()
A:django.forms.formsets.self._non_form_errors->self.error_class(e.messages)
A:django.forms.formsets.form.fields[ORDERING_FIELD_NAME]->IntegerField(label=_('Order'), required=False)
A:django.forms.formsets.form.fields[DELETION_FIELD_NAME]->BooleanField(label=_('Delete'), required=False)
A:django.forms.formsets.forms->' '.join([form.as_ul() for form in self])
django.forms.formsets.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.forms.formsets.BaseFormSet.__bool__(self)
django.forms.formsets.BaseFormSet.__getitem__(self,index)
django.forms.formsets.BaseFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.forms.formsets.BaseFormSet.__iter__(self)
django.forms.formsets.BaseFormSet.__len__(self)
django.forms.formsets.BaseFormSet.__nonzero__(self)
django.forms.formsets.BaseFormSet.__str__(self)
django.forms.formsets.BaseFormSet._construct_form(self,i,**kwargs)
django.forms.formsets.BaseFormSet._should_delete_form(self,form)
django.forms.formsets.BaseFormSet.add_fields(self,form,index)
django.forms.formsets.BaseFormSet.add_prefix(self,index)
django.forms.formsets.BaseFormSet.as_p(self)
django.forms.formsets.BaseFormSet.as_table(self)
django.forms.formsets.BaseFormSet.as_ul(self)
django.forms.formsets.BaseFormSet.clean(self)
django.forms.formsets.BaseFormSet.cleaned_data(self)
django.forms.formsets.BaseFormSet.deleted_forms(self)
django.forms.formsets.BaseFormSet.empty_form(self)
django.forms.formsets.BaseFormSet.errors(self)
django.forms.formsets.BaseFormSet.extra_forms(self)
django.forms.formsets.BaseFormSet.forms(self)
django.forms.formsets.BaseFormSet.full_clean(self)
django.forms.formsets.BaseFormSet.get_default_prefix(cls)
django.forms.formsets.BaseFormSet.has_changed(self)
django.forms.formsets.BaseFormSet.initial_form_count(self)
django.forms.formsets.BaseFormSet.initial_forms(self)
django.forms.formsets.BaseFormSet.is_multipart(self)
django.forms.formsets.BaseFormSet.is_valid(self)
django.forms.formsets.BaseFormSet.management_form(self)
django.forms.formsets.BaseFormSet.media(self)
django.forms.formsets.BaseFormSet.non_form_errors(self)
django.forms.formsets.BaseFormSet.ordered_forms(self)
django.forms.formsets.BaseFormSet.total_error_count(self)
django.forms.formsets.BaseFormSet.total_form_count(self)
django.forms.formsets.ManagementForm(self,*args,**kwargs)
django.forms.formsets.ManagementForm.__init__(self,*args,**kwargs)
django.forms.formsets.all_valid(formsets)
django.forms.formsets.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False)
django.formsets.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.formsets.BaseFormSet.__bool__(self)
django.formsets.BaseFormSet.__getitem__(self,index)
django.formsets.BaseFormSet.__iter__(self)
django.formsets.BaseFormSet.__len__(self)
django.formsets.BaseFormSet.__nonzero__(self)
django.formsets.BaseFormSet.__str__(self)
django.formsets.BaseFormSet._construct_form(self,i,**kwargs)
django.formsets.BaseFormSet._should_delete_form(self,form)
django.formsets.BaseFormSet.add_fields(self,form,index)
django.formsets.BaseFormSet.add_prefix(self,index)
django.formsets.BaseFormSet.as_p(self)
django.formsets.BaseFormSet.as_table(self)
django.formsets.BaseFormSet.as_ul(self)
django.formsets.BaseFormSet.clean(self)
django.formsets.BaseFormSet.cleaned_data(self)
django.formsets.BaseFormSet.deleted_forms(self)
django.formsets.BaseFormSet.empty_form(self)
django.formsets.BaseFormSet.errors(self)
django.formsets.BaseFormSet.extra_forms(self)
django.formsets.BaseFormSet.forms(self)
django.formsets.BaseFormSet.full_clean(self)
django.formsets.BaseFormSet.get_default_prefix(cls)
django.formsets.BaseFormSet.has_changed(self)
django.formsets.BaseFormSet.initial_form_count(self)
django.formsets.BaseFormSet.initial_forms(self)
django.formsets.BaseFormSet.is_multipart(self)
django.formsets.BaseFormSet.is_valid(self)
django.formsets.BaseFormSet.management_form(self)
django.formsets.BaseFormSet.media(self)
django.formsets.BaseFormSet.non_form_errors(self)
django.formsets.BaseFormSet.ordered_forms(self)
django.formsets.BaseFormSet.total_error_count(self)
django.formsets.BaseFormSet.total_form_count(self)
django.formsets.ManagementForm(self,*args,**kwargs)
django.formsets.all_valid(formsets)
django.formsets.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/models.py----------------------------------------
A:django.forms.models.instance->construct_instance(form, instance, fields, exclude)
A:django.forms.models.data[f.name]->f.value_from_object(instance)
A:django.forms.models.formfield->formfield_callback(f, **kwargs)
A:django.forms.models.field_dict->SortedDict([(f, field_dict.get(f)) for f in fields if (not exclude or (exclude and f not in exclude)) and f not in ignored])
A:django.forms.models.self.model->getattr(options, 'model', None)
A:django.forms.models.self.fields->getattr(options, 'fields', None)
A:django.forms.models.self.exclude->getattr(options, 'exclude', None)
A:django.forms.models.self.widgets->getattr(options, 'widgets', None)
A:django.forms.models.self.localized_fields->getattr(options, 'localized_fields', None)
A:django.forms.models.self.labels->getattr(options, 'labels', None)
A:django.forms.models.self.help_texts->getattr(options, 'help_texts', None)
A:django.forms.models.self.error_messages->getattr(options, 'error_messages', None)
A:django.forms.models.formfield_callback->attrs.pop('formfield_callback', None)
A:django.forms.models.declared_fields->get_declared_fields(bases, attrs, False)
A:django.forms.models.new_class->super(ModelFormMetaclass, cls).__new__(cls, name, bases, attrs)
A:django.forms.models.new_class.media->media_property(new_class)
A:django.forms.models.optsnew_class._meta->ModelFormOptions(getattr(new_class, 'Meta', None))
A:django.forms.models.value->self.queryset.get(**{key: value})
A:django.forms.models.fields->fields_for_model(opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, opts.error_messages)
A:django.forms.models.self.instance->self.fk.rel.to()
A:django.forms.models.object_data->model_to_dict(instance, opts.fields, opts.exclude)
A:django.forms.models.field_value->self.cleaned_data.get(field, None)
A:django.forms.models.exclude->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._get_validation_exclusions()
A:django.forms.models.Meta->type(str('Meta'), parent, attrs)
A:django.forms.models.self.initial_extra->kwargs.pop('initial', None)
A:django.forms.models.self._object_dict->dict([(o.pk, o) for o in self.get_queryset()])
A:django.forms.models.pk->pk_field.get_db_prep_lookup('exact', pk, connection=connections[self.get_queryset().db])
A:django.forms.models.kwargs['instance']->self._existing_object(pk)
A:django.forms.models.qs->self.queryset.filter(**{'%s__in' % key: value})
A:django.forms.models.all_unique_checks->all_unique_checks.union(set(unique_checks)).union(set(unique_checks))
A:django.forms.models.all_date_checks->all_date_checks.union(set(date_checks)).union(set(date_checks))
A:django.forms.models.(unique_checks, date_checks)->super(BaseInlineFormSet, self)._construct_form(i, **kwargs).instance._get_unique_checks(exclude=exclude)
A:django.forms.models.seen_data->set()
A:django.forms.models.row_data->tuple([form.cleaned_data[field] for field in unique_check if field in form.cleaned_data])
A:django.forms.models.form._errors[NON_FIELD_ERRORS]->self.error_class([self.get_form_error()])
A:django.forms.models.raw_pk_value->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._raw_value(pk_name)
A:django.forms.models.pk_value->getattr(self.instance, self.fk.rel.field_name)
A:django.forms.models.obj->super(BaseInlineFormSet, self)._construct_form(i, **kwargs).save(commit=False)
A:django.forms.models.widget->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._meta.widgets.get(self._pk_field.name, HiddenInput)
A:django.forms.models.form.fields[self._pk_field.name]->ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)
A:django.forms.models.meta->type(str('Meta'), (object,), {})
A:django.forms.models.form->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)
A:django.forms.models.FormSet->modelformset_factory(model, **kwargs)
A:django.forms.models.form.fields[name]->InlineForeignKeyField(self.instance, **kwargs)
A:django.forms.models.form._meta.fields->list(form._meta.fields)
A:django.forms.models.fk->_get_foreign_key(parent_model, model, fk_name=fk_name)
A:django.forms.models.self.pk_field->kwargs.pop('pk_field', False)
A:django.forms.models.self.to_field->kwargs.pop('to_field', None)
A:django.forms.models.kwargs['initial']->getattr(self.parent_instance, self.to_field)
A:django.forms.models.orig->getattr(self.parent_instance, self.to_field)
A:django.forms.models.result->super(ChoiceField, self).__deepcopy__(memo)
A:django.forms.models.queryset->property(_get_queryset, _set_queryset)
A:django.forms.models.choices->property(_get_choices, ChoiceField._set_choices)
A:django.forms.models.msg->_('Hold down "Control", or "Command" on a Mac, to select more than one.')
A:django.forms.models.self.help_text->string_concat(self.help_text, ' ', msg)
A:django.forms.models.pks->set([force_text(getattr(o, key)) for o in qs])
A:django.forms.models.initial_set->set([force_text(value) for value in self.prepare_value(initial)])
A:django.forms.models.data_set->set([force_text(value) for value in data])
django.forms.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.BaseInlineFormSet.add_fields(self,form,index)
django.forms.BaseInlineFormSet.get_default_prefix(cls)
django.forms.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseInlineFormSet.initial_form_count(self)
django.forms.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.BaseModelForm._get_validation_exclusions(self)
django.forms.BaseModelForm._post_clean(self)
django.forms.BaseModelForm._update_errors(self,errors)
django.forms.BaseModelForm.clean(self)
django.forms.BaseModelForm.save(self,commit=True)
django.forms.BaseModelForm.validate_unique(self)
django.forms.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.BaseModelFormSet._existing_object(self,pk)
django.forms.BaseModelFormSet.add_fields(self,form,index)
django.forms.BaseModelFormSet.clean(self)
django.forms.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.BaseModelFormSet.get_form_error(self)
django.forms.BaseModelFormSet.get_queryset(self)
django.forms.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseModelFormSet.initial_form_count(self)
django.forms.BaseModelFormSet.save(self,commit=True)
django.forms.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.BaseModelFormSet.validate_unique(self)
django.forms.InlineForeignKeyField(self,parent_instance,*args,**kwargs)
django.forms.InlineForeignKeyField._has_changed(self,initial,data)
django.forms.InlineForeignKeyField.clean(self,value)
django.forms.ModelChoiceField(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.ModelChoiceField.__deepcopy__(self,memo)
django.forms.ModelChoiceField._get_choices(self)
django.forms.ModelChoiceField._get_queryset(self)
django.forms.ModelChoiceField._has_changed(self,initial,data)
django.forms.ModelChoiceField._set_queryset(self,queryset)
django.forms.ModelChoiceField.label_from_instance(self,obj)
django.forms.ModelChoiceField.prepare_value(self,value)
django.forms.ModelChoiceField.to_python(self,value)
django.forms.ModelChoiceField.validate(self,value)
django.forms.ModelChoiceIterator(self,field)
django.forms.ModelChoiceIterator.__iter__(self)
django.forms.ModelChoiceIterator.__len__(self)
django.forms.ModelChoiceIterator.choice(self,obj)
django.forms.ModelForm(six.with_metaclass(ModelFormMetaclass,BaseModelForm))
django.forms.ModelFormMetaclass(cls,name,bases,attrs)
django.forms.ModelFormOptions(self,options=None)
django.forms.ModelMultipleChoiceField(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.ModelMultipleChoiceField._has_changed(self,initial,data)
django.forms.ModelMultipleChoiceField.clean(self,value)
django.forms.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.ModelMultipleChoiceField.to_python(self,value)
django.forms._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.construct_instance(form,instance,fields=None,exclude=None)
django.forms.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.model_to_dict(instance,fields=None,exclude=None)
django.forms.modelform_defines_fields(form_class)
django.forms.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet.__init__(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseInlineFormSet.add_fields(self,form,index)
django.forms.models.BaseInlineFormSet.get_default_prefix(cls)
django.forms.models.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseInlineFormSet.initial_form_count(self)
django.forms.models.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.models.BaseModelForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.models.BaseModelForm._get_validation_exclusions(self)
django.forms.models.BaseModelForm._post_clean(self)
django.forms.models.BaseModelForm._update_errors(self,errors)
django.forms.models.BaseModelForm.clean(self)
django.forms.models.BaseModelForm.save(self,commit=True)
django.forms.models.BaseModelForm.validate_unique(self)
django.forms.models.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.models.BaseModelFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.models.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseModelFormSet._existing_object(self,pk)
django.forms.models.BaseModelFormSet.add_fields(self,form,index)
django.forms.models.BaseModelFormSet.clean(self)
django.forms.models.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.models.BaseModelFormSet.get_form_error(self)
django.forms.models.BaseModelFormSet.get_queryset(self)
django.forms.models.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseModelFormSet.initial_form_count(self)
django.forms.models.BaseModelFormSet.save(self,commit=True)
django.forms.models.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.models.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.models.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.models.BaseModelFormSet.validate_unique(self)
django.forms.models.InlineForeignKeyField(self,parent_instance,*args,**kwargs)
django.forms.models.InlineForeignKeyField.__init__(self,parent_instance,*args,**kwargs)
django.forms.models.InlineForeignKeyField._has_changed(self,initial,data)
django.forms.models.InlineForeignKeyField.clean(self,value)
django.forms.models.ModelChoiceField(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.models.ModelChoiceField.__deepcopy__(self,memo)
django.forms.models.ModelChoiceField.__init__(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.models.ModelChoiceField._get_choices(self)
django.forms.models.ModelChoiceField._get_queryset(self)
django.forms.models.ModelChoiceField._has_changed(self,initial,data)
django.forms.models.ModelChoiceField._set_queryset(self,queryset)
django.forms.models.ModelChoiceField.label_from_instance(self,obj)
django.forms.models.ModelChoiceField.prepare_value(self,value)
django.forms.models.ModelChoiceField.to_python(self,value)
django.forms.models.ModelChoiceField.validate(self,value)
django.forms.models.ModelChoiceIterator(self,field)
django.forms.models.ModelChoiceIterator.__init__(self,field)
django.forms.models.ModelChoiceIterator.__iter__(self)
django.forms.models.ModelChoiceIterator.__len__(self)
django.forms.models.ModelChoiceIterator.choice(self,obj)
django.forms.models.ModelForm(six.with_metaclass(ModelFormMetaclass,BaseModelForm))
django.forms.models.ModelFormMetaclass(cls,name,bases,attrs)
django.forms.models.ModelFormMetaclass.__new__(cls,name,bases,attrs)
django.forms.models.ModelFormOptions(self,options=None)
django.forms.models.ModelFormOptions.__init__(self,options=None)
django.forms.models.ModelMultipleChoiceField(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.models.ModelMultipleChoiceField.__init__(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.models.ModelMultipleChoiceField._has_changed(self,initial,data)
django.forms.models.ModelMultipleChoiceField.clean(self,value)
django.forms.models.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.models.ModelMultipleChoiceField.to_python(self,value)
django.forms.models._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.models.construct_instance(form,instance,fields=None,exclude=None)
django.forms.models.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.model_to_dict(instance,fields=None,exclude=None)
django.forms.models.modelform_defines_fields(form_class)
django.forms.models.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.save_instance(form,instance,fields=None,fail_message='saved',commit=True,exclude=None,construct=True)
django.forms.save_instance(form,instance,fields=None,fail_message='saved',commit=True,exclude=None,construct=True)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/fields.py----------------------------------------
A:django.forms.fields.empty_values->list(validators.EMPTY_VALUES)
A:django.forms.fields.widget->widget()
A:django.forms.fields.extra_attrs->self.widget_attrs(widget)
A:django.forms.fields.value->self.to_python(value).strip()
A:django.forms.fields.data->bool(data)
A:django.forms.fields.result->datetime.datetime.combine(*data_list)
A:django.forms.fields.result.widget->copy.deepcopy(self.widget, memo)
A:django.forms.fields.attrs->super(DecimalField, self).widget_attrs(widget)
A:django.forms.fields.(sign, digittuple, exponent)->self.to_python(value).strip().as_tuple()
A:django.forms.fields.decimals->abs(exponent)
A:django.forms.fields.digits->len(digittuple)
A:django.forms.fields.step->str(Decimal('1') / 10 ** self.decimal_places).lower()
A:django.forms.fields.unicode_value->force_text(value, strings_only=True)
A:django.forms.fields.input_formats->django.utils.formats.get_format_lazy('DATETIME_INPUT_FORMATS')
A:django.forms.fields.regex->property(_get_regex, _set_regex)
A:django.forms.fields.self._regex_validator->django.core.validators.RegexValidator(regex=regex)
A:django.forms.fields.self.max_length->kwargs.pop('max_length', None)
A:django.forms.fields.self.allow_empty_file->kwargs.pop('allow_empty_file', False)
A:django.forms.fields.f->os.path.join(root, f)
A:django.forms.fields.file->BytesIO(data['content'])
A:django.forms.fields.url_fields->split_url(urlunsplit(url_fields))
A:django.forms.fields.initial->self.widget.decompress(initial)
A:django.forms.fields.result._choices->copy.deepcopy(self._choices, memo)
A:django.forms.fields.self._choicesself.widget.choices->list(value)
A:django.forms.fields.choices->property(_get_choices, _set_choices)
A:django.forms.fields.text_value->force_text(value)
A:django.forms.fields.self.coerce->kwargs.pop('coerce', lambda val: val)
A:django.forms.fields.self.empty_value->kwargs.pop('empty_value', [])
A:django.forms.fields.initial_set->set([force_text(value) for value in initial])
A:django.forms.fields.data_set->set([force_text(value) for value in data])
A:django.forms.fields.errors->self.default_error_messages.copy()
A:django.forms.fields.out->self.compress(clean_data)
A:django.forms.fields.self.match_re->re.compile(self.match)
A:django.forms.fields.full_file->os.path.join(self.path, f)
A:django.forms.fields.localize->kwargs.get('localize', False)
django.fields.BaseTemporalField(self,input_formats=None,*args,**kwargs)
django.fields.BaseTemporalField.strptime(self,value,format)
django.fields.BaseTemporalField.to_python(self,value)
django.fields.BooleanField(Field)
django.fields.BooleanField._has_changed(self,initial,data)
django.fields.BooleanField.to_python(self,value)
django.fields.BooleanField.validate(self,value)
django.fields.CharField(self,max_length=None,min_length=None,*args,**kwargs)
django.fields.CharField.to_python(self,value)
django.fields.CharField.widget_attrs(self,widget)
django.fields.ChoiceField(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.fields.ChoiceField.__deepcopy__(self,memo)
django.fields.ChoiceField._get_choices(self)
django.fields.ChoiceField._set_choices(self,value)
django.fields.ChoiceField.to_python(self,value)
django.fields.ChoiceField.valid_value(self,value)
django.fields.ChoiceField.validate(self,value)
django.fields.ComboField(self,fields=(),*args,**kwargs)
django.fields.ComboField.clean(self,value)
django.fields.DateField(BaseTemporalField)
django.fields.DateField.strptime(self,value,format)
django.fields.DateField.to_python(self,value)
django.fields.DateTimeField(BaseTemporalField)
django.fields.DateTimeField.prepare_value(self,value)
django.fields.DateTimeField.strptime(self,value,format)
django.fields.DateTimeField.to_python(self,value)
django.fields.DecimalField(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.fields.DecimalField.to_python(self,value)
django.fields.DecimalField.validate(self,value)
django.fields.DecimalField.widget_attrs(self,widget)
django.fields.EmailField(CharField)
django.fields.EmailField.clean(self,value)
django.fields.Field(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.fields.Field.__deepcopy__(self,memo)
django.fields.Field._has_changed(self,initial,data)
django.fields.Field.bound_data(self,data,initial)
django.fields.Field.clean(self,value)
django.fields.Field.prepare_value(self,value)
django.fields.Field.run_validators(self,value)
django.fields.Field.to_python(self,value)
django.fields.Field.validate(self,value)
django.fields.Field.widget_attrs(self,widget)
django.fields.FileField(self,*args,**kwargs)
django.fields.FileField._has_changed(self,initial,data)
django.fields.FileField.bound_data(self,data,initial)
django.fields.FileField.clean(self,data,initial=None)
django.fields.FileField.to_python(self,data)
django.fields.FilePathField(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.fields.FloatField(IntegerField)
django.fields.FloatField.to_python(self,value)
django.fields.FloatField.widget_attrs(self,widget)
django.fields.GenericIPAddressField(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.fields.GenericIPAddressField.to_python(self,value)
django.fields.IPAddressField(CharField)
django.fields.IPAddressField.to_python(self,value)
django.fields.ImageField(FileField)
django.fields.ImageField.to_python(self,data)
django.fields.IntegerField(self,max_value=None,min_value=None,*args,**kwargs)
django.fields.IntegerField.to_python(self,value)
django.fields.IntegerField.widget_attrs(self,widget)
django.fields.MultiValueField(self,fields=(),*args,**kwargs)
django.fields.MultiValueField._has_changed(self,initial,data)
django.fields.MultiValueField.clean(self,value)
django.fields.MultiValueField.compress(self,data_list)
django.fields.MultiValueField.validate(self,value)
django.fields.MultipleChoiceField(ChoiceField)
django.fields.MultipleChoiceField._has_changed(self,initial,data)
django.fields.MultipleChoiceField.to_python(self,value)
django.fields.MultipleChoiceField.validate(self,value)
django.fields.NullBooleanField(BooleanField)
django.fields.NullBooleanField._has_changed(self,initial,data)
django.fields.NullBooleanField.to_python(self,value)
django.fields.NullBooleanField.validate(self,value)
django.fields.RegexField(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.fields.RegexField._get_regex(self)
django.fields.RegexField._set_regex(self,regex)
django.fields.SlugField(CharField)
django.fields.SlugField.clean(self,value)
django.fields.SplitDateTimeField(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.fields.SplitDateTimeField.compress(self,data_list)
django.fields.TimeField(BaseTemporalField)
django.fields.TimeField.strptime(self,value,format)
django.fields.TimeField.to_python(self,value)
django.fields.TypedChoiceField(self,*args,**kwargs)
django.fields.TypedChoiceField.to_python(self,value)
django.fields.TypedMultipleChoiceField(self,*args,**kwargs)
django.fields.TypedMultipleChoiceField.to_python(self,value)
django.fields.TypedMultipleChoiceField.validate(self,value)
django.fields.URLField(CharField)
django.fields.URLField.clean(self,value)
django.fields.URLField.to_python(self,value)
django.forms.fields.BaseTemporalField(self,input_formats=None,*args,**kwargs)
django.forms.fields.BaseTemporalField.__init__(self,input_formats=None,*args,**kwargs)
django.forms.fields.BaseTemporalField.strptime(self,value,format)
django.forms.fields.BaseTemporalField.to_python(self,value)
django.forms.fields.BooleanField(Field)
django.forms.fields.BooleanField._has_changed(self,initial,data)
django.forms.fields.BooleanField.to_python(self,value)
django.forms.fields.BooleanField.validate(self,value)
django.forms.fields.CharField(self,max_length=None,min_length=None,*args,**kwargs)
django.forms.fields.CharField.__init__(self,max_length=None,min_length=None,*args,**kwargs)
django.forms.fields.CharField.to_python(self,value)
django.forms.fields.CharField.widget_attrs(self,widget)
django.forms.fields.ChoiceField(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.ChoiceField.__deepcopy__(self,memo)
django.forms.fields.ChoiceField.__init__(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.ChoiceField._get_choices(self)
django.forms.fields.ChoiceField._set_choices(self,value)
django.forms.fields.ChoiceField.to_python(self,value)
django.forms.fields.ChoiceField.valid_value(self,value)
django.forms.fields.ChoiceField.validate(self,value)
django.forms.fields.ComboField(self,fields=(),*args,**kwargs)
django.forms.fields.ComboField.__init__(self,fields=(),*args,**kwargs)
django.forms.fields.ComboField.clean(self,value)
django.forms.fields.DateField(BaseTemporalField)
django.forms.fields.DateField.strptime(self,value,format)
django.forms.fields.DateField.to_python(self,value)
django.forms.fields.DateTimeField(BaseTemporalField)
django.forms.fields.DateTimeField.prepare_value(self,value)
django.forms.fields.DateTimeField.strptime(self,value,format)
django.forms.fields.DateTimeField.to_python(self,value)
django.forms.fields.DecimalField(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.forms.fields.DecimalField.__init__(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.forms.fields.DecimalField.to_python(self,value)
django.forms.fields.DecimalField.validate(self,value)
django.forms.fields.DecimalField.widget_attrs(self,widget)
django.forms.fields.EmailField(CharField)
django.forms.fields.EmailField.clean(self,value)
django.forms.fields.Field(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.forms.fields.Field.__deepcopy__(self,memo)
django.forms.fields.Field.__init__(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.forms.fields.Field._has_changed(self,initial,data)
django.forms.fields.Field.bound_data(self,data,initial)
django.forms.fields.Field.clean(self,value)
django.forms.fields.Field.prepare_value(self,value)
django.forms.fields.Field.run_validators(self,value)
django.forms.fields.Field.to_python(self,value)
django.forms.fields.Field.validate(self,value)
django.forms.fields.Field.widget_attrs(self,widget)
django.forms.fields.FileField(self,*args,**kwargs)
django.forms.fields.FileField.__init__(self,*args,**kwargs)
django.forms.fields.FileField._has_changed(self,initial,data)
django.forms.fields.FileField.bound_data(self,data,initial)
django.forms.fields.FileField.clean(self,data,initial=None)
django.forms.fields.FileField.to_python(self,data)
django.forms.fields.FilePathField(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.FilePathField.__init__(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.FloatField(IntegerField)
django.forms.fields.FloatField.to_python(self,value)
django.forms.fields.FloatField.widget_attrs(self,widget)
django.forms.fields.GenericIPAddressField(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.forms.fields.GenericIPAddressField.__init__(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.forms.fields.GenericIPAddressField.to_python(self,value)
django.forms.fields.IPAddressField(CharField)
django.forms.fields.IPAddressField.to_python(self,value)
django.forms.fields.ImageField(FileField)
django.forms.fields.ImageField.to_python(self,data)
django.forms.fields.IntegerField(self,max_value=None,min_value=None,*args,**kwargs)
django.forms.fields.IntegerField.__init__(self,max_value=None,min_value=None,*args,**kwargs)
django.forms.fields.IntegerField.to_python(self,value)
django.forms.fields.IntegerField.widget_attrs(self,widget)
django.forms.fields.MultiValueField(self,fields=(),*args,**kwargs)
django.forms.fields.MultiValueField.__init__(self,fields=(),*args,**kwargs)
django.forms.fields.MultiValueField._has_changed(self,initial,data)
django.forms.fields.MultiValueField.clean(self,value)
django.forms.fields.MultiValueField.compress(self,data_list)
django.forms.fields.MultiValueField.validate(self,value)
django.forms.fields.MultipleChoiceField(ChoiceField)
django.forms.fields.MultipleChoiceField._has_changed(self,initial,data)
django.forms.fields.MultipleChoiceField.to_python(self,value)
django.forms.fields.MultipleChoiceField.validate(self,value)
django.forms.fields.NullBooleanField(BooleanField)
django.forms.fields.NullBooleanField._has_changed(self,initial,data)
django.forms.fields.NullBooleanField.to_python(self,value)
django.forms.fields.NullBooleanField.validate(self,value)
django.forms.fields.RegexField(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.forms.fields.RegexField.__init__(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.forms.fields.RegexField._get_regex(self)
django.forms.fields.RegexField._set_regex(self,regex)
django.forms.fields.SlugField(CharField)
django.forms.fields.SlugField.clean(self,value)
django.forms.fields.SplitDateTimeField(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.forms.fields.SplitDateTimeField.__init__(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.forms.fields.SplitDateTimeField.compress(self,data_list)
django.forms.fields.TimeField(BaseTemporalField)
django.forms.fields.TimeField.strptime(self,value,format)
django.forms.fields.TimeField.to_python(self,value)
django.forms.fields.TypedChoiceField(self,*args,**kwargs)
django.forms.fields.TypedChoiceField.__init__(self,*args,**kwargs)
django.forms.fields.TypedChoiceField.to_python(self,value)
django.forms.fields.TypedMultipleChoiceField(self,*args,**kwargs)
django.forms.fields.TypedMultipleChoiceField.__init__(self,*args,**kwargs)
django.forms.fields.TypedMultipleChoiceField.to_python(self,value)
django.forms.fields.TypedMultipleChoiceField.validate(self,value)
django.forms.fields.URLField(CharField)
django.forms.fields.URLField.clean(self,value)
django.forms.fields.URLField.to_python(self,value)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/forms.py----------------------------------------
A:django.forms.forms.attrs['base_fields']->get_declared_fields(bases, attrs)
A:django.forms.forms.new_class->super(DeclarativeFieldsMetaclass, cls).__new__(cls, name, bases, attrs)
A:django.forms.forms.new_class.media->media_property(new_class)
A:django.forms.forms.self.fields->copy.deepcopy(self.base_fields)
A:django.forms.forms.top_errors->self.non_field_errors()
A:django.forms.forms.bf_errors->self.error_class([conditional_escape(error) for error in bf.errors])
A:django.forms.forms.css_classes->bf.css_classes()
A:django.forms.forms.label->conditional_escape(force_text(bf.label))
A:django.forms.forms.str_hidden->''.join(hidden_fields)
A:django.forms.forms.prefix->self.add_prefix(fieldname)
A:django.forms.forms.self._errors->ErrorDict()
A:django.forms.forms.value->getattr(self, 'clean_%s' % name)()
A:django.forms.forms.initial->self.initial.get(name, field.initial)
A:django.forms.forms.self._errors[name]->self.error_class(e.messages)
A:django.forms.forms.self.cleaned_data->self.clean()
A:django.forms.forms.self._errors[NON_FIELD_ERRORS]->self.error_class(e.messages)
A:django.forms.forms.prefixed_name->self.add_prefix(name)
A:django.forms.forms.data_value->field.widget.value_from_datadict(self.data, self.files, prefixed_name)
A:django.forms.forms.initial_value->field.to_python(hidden_widget.value_from_datadict(self.data, self.files, initial_prefixed_name))
A:django.forms.forms.initial_prefixed_name->self.add_initial_prefix(name)
A:django.forms.forms.hidden_widget->field.hidden_widget()
A:django.forms.forms.media->Media()
A:django.forms.forms.self.html_name->form.add_prefix(name)
A:django.forms.forms.self.html_initial_name->form.add_initial_prefix(name)
A:django.forms.forms.self.html_initial_id->form.add_initial_prefix(self.auto_id)
A:django.forms.forms.self.label->pretty_name(name)
A:django.forms.forms.data->self.field.bound_data(self.data, self.form.initial.get(self.name, self.field.initial))
A:django.forms.forms.contents->conditional_escape(contents)
A:django.forms.forms.id_for_label->widget.id_for_label(id_)
A:django.forms.forms.attrs->dict(attrs or {}, **{'for': id_for_label})
A:django.forms.forms.extra_classes->set(extra_classes or [])
django.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.BaseForm.__getitem__(self,name)
django.BaseForm.__iter__(self)
django.BaseForm.__str__(self)
django.BaseForm._clean_fields(self)
django.BaseForm._clean_form(self)
django.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.BaseForm._post_clean(self)
django.BaseForm._raw_value(self,fieldname)
django.BaseForm.add_initial_prefix(self,field_name)
django.BaseForm.add_prefix(self,field_name)
django.BaseForm.as_p(self)
django.BaseForm.as_table(self)
django.BaseForm.as_ul(self)
django.BaseForm.changed_data(self)
django.BaseForm.clean(self)
django.BaseForm.errors(self)
django.BaseForm.full_clean(self)
django.BaseForm.has_changed(self)
django.BaseForm.hidden_fields(self)
django.BaseForm.is_multipart(self)
django.BaseForm.is_valid(self)
django.BaseForm.media(self)
django.BaseForm.non_field_errors(self)
django.BaseForm.visible_fields(self)
django.BoundField(self,form,field,name)
django.BoundField.__getitem__(self,idx)
django.BoundField.__iter__(self)
django.BoundField.__len__(self)
django.BoundField.__str__(self)
django.BoundField.as_hidden(self,attrs=None,**kwargs)
django.BoundField.as_text(self,attrs=None,**kwargs)
django.BoundField.as_textarea(self,attrs=None,**kwargs)
django.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.BoundField.auto_id(self)
django.BoundField.css_classes(self,extra_classes=None)
django.BoundField.data(self)
django.BoundField.errors(self)
django.BoundField.id_for_label(self)
django.BoundField.is_hidden(self)
django.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.BoundField.value(self)
django.DeclarativeFieldsMetaclass(cls,name,bases,attrs)
django.Form(six.with_metaclass(DeclarativeFieldsMetaclass,BaseForm))
django.forms.forms.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.forms.forms.BaseForm.__getitem__(self,name)
django.forms.forms.BaseForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.forms.forms.BaseForm.__iter__(self)
django.forms.forms.BaseForm.__str__(self)
django.forms.forms.BaseForm._clean_fields(self)
django.forms.forms.BaseForm._clean_form(self)
django.forms.forms.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.forms.forms.BaseForm._post_clean(self)
django.forms.forms.BaseForm._raw_value(self,fieldname)
django.forms.forms.BaseForm.add_initial_prefix(self,field_name)
django.forms.forms.BaseForm.add_prefix(self,field_name)
django.forms.forms.BaseForm.as_p(self)
django.forms.forms.BaseForm.as_table(self)
django.forms.forms.BaseForm.as_ul(self)
django.forms.forms.BaseForm.changed_data(self)
django.forms.forms.BaseForm.clean(self)
django.forms.forms.BaseForm.errors(self)
django.forms.forms.BaseForm.full_clean(self)
django.forms.forms.BaseForm.has_changed(self)
django.forms.forms.BaseForm.hidden_fields(self)
django.forms.forms.BaseForm.is_multipart(self)
django.forms.forms.BaseForm.is_valid(self)
django.forms.forms.BaseForm.media(self)
django.forms.forms.BaseForm.non_field_errors(self)
django.forms.forms.BaseForm.visible_fields(self)
django.forms.forms.BoundField(self,form,field,name)
django.forms.forms.BoundField.__getitem__(self,idx)
django.forms.forms.BoundField.__init__(self,form,field,name)
django.forms.forms.BoundField.__iter__(self)
django.forms.forms.BoundField.__len__(self)
django.forms.forms.BoundField.__str__(self)
django.forms.forms.BoundField.as_hidden(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_text(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_textarea(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.forms.forms.BoundField.auto_id(self)
django.forms.forms.BoundField.css_classes(self,extra_classes=None)
django.forms.forms.BoundField.data(self)
django.forms.forms.BoundField.errors(self)
django.forms.forms.BoundField.id_for_label(self)
django.forms.forms.BoundField.is_hidden(self)
django.forms.forms.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.forms.forms.BoundField.value(self)
django.forms.forms.DeclarativeFieldsMetaclass(cls,name,bases,attrs)
django.forms.forms.DeclarativeFieldsMetaclass.__new__(cls,name,bases,attrs)
django.forms.forms.Form(six.with_metaclass(DeclarativeFieldsMetaclass,BaseForm))
django.forms.forms.get_declared_fields(bases,attrs,with_base_fields=True)
django.forms.forms.pretty_name(name)
django.get_declared_fields(bases,attrs,with_base_fields=True)
django.pretty_name(name)


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/extras/widgets.py----------------------------------------
A:django.forms.extras.widgets.RE_DATE->re.compile('(\\d{4})-(\\d\\d?)-(\\d\\d?)$')
A:django.forms.extras.widgets.fmt->get_format('DATE_FORMAT')
A:django.forms.extras.widgets.self.years->range(this_year, this_year + 10)
A:django.forms.extras.widgets.v->datetime.datetime.strptime(force_str(value), input_format)
A:django.forms.extras.widgets.match->re.compile('(\\d{4})-(\\d\\d?)-(\\d\\d?)$').match(value)
A:django.forms.extras.widgets.year_html->self.create_select(name, self.year_field, value, year_val, choices)
A:django.forms.extras.widgets.choices->list(six.iteritems(MONTHS))
A:django.forms.extras.widgets.month_html->self.create_select(name, self.month_field, value, month_val, choices)
A:django.forms.extras.widgets.day_html->self.create_select(name, self.day_field, value, day_val, choices)
A:django.forms.extras.widgets.field_list->_parse_date_fmt()
A:django.forms.extras.widgets.y->data.get(self.year_field % name)
A:django.forms.extras.widgets.m->data.get(self.month_field % name)
A:django.forms.extras.widgets.d->data.get(self.day_field % name)
A:django.forms.extras.widgets.date_value->django.utils.datetime_safe.new_date(date_value)
A:django.forms.extras.widgets.local_attrs->self.build_attrs(id=field % id_)
A:django.forms.extras.widgets.s->Select(choices=choices)
A:django.forms.extras.widgets.select_html->Select(choices=choices).render(field % name, val, local_attrs)
django.extras.SelectDateWidget(self,attrs=None,years=None,required=True)
django.extras.SelectDateWidget.create_select(self,name,field,value,val,choices)
django.extras.SelectDateWidget.id_for_label(self,id_)
django.extras.SelectDateWidget.render(self,name,value,attrs=None)
django.extras.SelectDateWidget.value_from_datadict(self,data,files,name)
django.extras._parse_date_fmt()
django.forms.extras.widgets.SelectDateWidget(self,attrs=None,years=None,required=True)
django.forms.extras.widgets.SelectDateWidget.__init__(self,attrs=None,years=None,required=True)
django.forms.extras.widgets.SelectDateWidget.create_select(self,name,field,value,val,choices)
django.forms.extras.widgets.SelectDateWidget.id_for_label(self,id_)
django.forms.extras.widgets.SelectDateWidget.render(self,name,value,attrs=None)
django.forms.extras.widgets.SelectDateWidget.value_from_datadict(self,data,files,name)
django.forms.extras.widgets._parse_date_fmt()


----------------------------------------/home/zhang/Packages/django/django1.6.1/forms/extras/__init__.py----------------------------------------

