
----------------------------------------/home/zhang/Packages/django/django1.6.6/__init__.py----------------------------------------
django.__init__.get_version(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/redirects/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/redirects/models.py----------------------------------------
A:django.contrib.redirects.models.site->django.db.models.ForeignKey(Site)
A:django.contrib.redirects.models.old_path->django.db.models.CharField(_('redirect from'), max_length=200, db_index=True, help_text=_("This should be an absolute path, excluding the domain name. Example: '/events/search/'."))
A:django.contrib.redirects.models.new_path->django.db.models.CharField(_('redirect to'), max_length=200, blank=True, help_text=_("This can be either an absolute path (as above) or a full URL starting with 'http://'."))
A:django.contrib.redirects.models.verbose_name->_('redirect')
A:django.contrib.redirects.models.verbose_name_plural->_('redirects')
django.contrib.redirects.models.Redirect(models.Model)
django.contrib.redirects.models.Redirect.Meta
django.contrib.redirects.models.Redirect.__str__(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/admin.py----------------------------------------
A:django.contrib.auth.admin.csrf_protect_m->method_decorator(csrf_protect)
A:django.contrib.auth.admin.sensitive_post_parameters_m->method_decorator(sensitive_post_parameters())
A:django.contrib.auth.admin.qs->kwargs.get('queryset', db_field.rel.to.objects)
A:django.contrib.auth.admin.kwargs['queryset']->kwargs.get('queryset', db_field.rel.to.objects).select_related('content_type')
A:django.contrib.auth.admin.username_field->self.model._meta.get_field(self.model.USERNAME_FIELD)
A:django.contrib.auth.admin.user->get_object_or_404(self.get_queryset(request), pk=id)
A:django.contrib.auth.admin.form->self.change_password_form(user)
A:django.contrib.auth.admin.change_message->self.construct_change_message(request, form, None)
A:django.contrib.auth.admin.msg->ugettext('Password changed successfully.')
A:django.contrib.auth.admin.adminForm->django.contrib.admin.helpers.AdminForm(form, fieldsets, {})
django.contrib.auth.admin.GroupAdmin(admin.ModelAdmin)
django.contrib.auth.admin.GroupAdmin.formfield_for_manytomany(self,db_field,request=None,**kwargs)
django.contrib.auth.admin.UserAdmin(admin.ModelAdmin)
django.contrib.auth.admin.UserAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.auth.admin.UserAdmin.get_fieldsets(self,request,obj=None)
django.contrib.auth.admin.UserAdmin.get_form(self,request,obj=None,**kwargs)
django.contrib.auth.admin.UserAdmin.get_urls(self)
django.contrib.auth.admin.UserAdmin.lookup_allowed(self,lookup,value)
django.contrib.auth.admin.UserAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.auth.admin.UserAdmin.user_change_password(self,request,id,form_url='')


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/hashers.py----------------------------------------
A:django.contrib.auth.hashers.preferred->get_hasher(preferred)
A:django.contrib.auth.hashers.hasher->import_by_path(backend)()
A:django.contrib.auth.hashers.must_update->get_hasher(preferred).must_update(encoded)
A:django.contrib.auth.hashers.is_correct->import_by_path(backend)().verify(password, encoded)
A:django.contrib.auth.hashers.salt->import_by_path(backend)().salt()
A:django.contrib.auth.hashers.HASHERS->dict([(hasher.algorithm, hasher) for hasher in hashers])
A:django.contrib.auth.hashers.module->django.utils.importlib.import_module(mod_path)
A:django.contrib.auth.hashers.hash->hashlib.sha1(force_bytes(password)).hexdigest()
A:django.contrib.auth.hashers.(algorithm, iterations, salt, hash)->encoded.split('$', 3)
A:django.contrib.auth.hashers.encoded_2->self.encode(password, '')
A:django.contrib.auth.hashers.bcrypt->self._load_library()
A:django.contrib.auth.hashers.password->force_bytes(password)
A:django.contrib.auth.hashers.data->self._load_library().crypt(force_str(password), salt)
A:django.contrib.auth.hashers.(algorithm, data)->encoded.split('$', 1)
A:django.contrib.auth.hashers.hashpw->force_bytes(bcrypt.hashpw(password, data))
A:django.contrib.auth.hashers.(algorithm, empty, algostr, work_factor, data)->encoded.split('$', 4)
A:django.contrib.auth.hashers.(algorithm, salt, hash)->encoded.split('$', 2)
A:django.contrib.auth.hashers.crypt->self._load_library()
A:django.contrib.auth.hashers.(algorithm, salt, data)->encoded.split('$', 2)
django.contrib.auth.hashers.BCryptPasswordHasher(BCryptSHA256PasswordHasher)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.salt(self)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.BasePasswordHasher(object)
django.contrib.auth.hashers.BasePasswordHasher._load_library(self)
django.contrib.auth.hashers.BasePasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.BasePasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.BasePasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.BasePasswordHasher.salt(self)
django.contrib.auth.hashers.BasePasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.CryptPasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.CryptPasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.CryptPasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.CryptPasswordHasher.salt(self)
django.contrib.auth.hashers.CryptPasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.MD5PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.MD5PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.MD5PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.MD5PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.PBKDF2PasswordHasher.encode(self,password,salt,iterations=None)
django.contrib.auth.hashers.PBKDF2PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher)
django.contrib.auth.hashers.SHA1PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.SHA1PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.SHA1PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.SHA1PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.salt(self)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.salt(self)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.check_password(password,encoded,setter=None,preferred='default')
django.contrib.auth.hashers.get_hasher(algorithm='default')
django.contrib.auth.hashers.identify_hasher(encoded)
django.contrib.auth.hashers.is_password_usable(encoded)
django.contrib.auth.hashers.load_hashers(password_hashers=None)
django.contrib.auth.hashers.make_password(password,salt=None,hasher='default')
django.contrib.auth.hashers.mask_hash(hash,show=6,char='*')
django.contrib.auth.hashers.reset_hashers(**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/signals.py----------------------------------------
A:django.contrib.auth.signals.user_logged_in->Signal(providing_args=['request', 'user'])
A:django.contrib.auth.signals.user_login_failed->Signal(providing_args=['credentials'])
A:django.contrib.auth.signals.user_logged_out->Signal(providing_args=['request', 'user'])


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/middleware.py----------------------------------------
A:django.contrib.auth.middleware.request._cached_user->django.contrib.auth.get_user(request)
A:django.contrib.auth.middleware.request.user->SimpleLazyObject(lambda : get_user(request))
A:django.contrib.auth.middleware.user->django.contrib.auth.authenticate(remote_user=username)
A:django.contrib.auth.middleware.backend->django.contrib.auth.load_backend(backend_str)
A:django.contrib.auth.middleware.username->django.contrib.auth.load_backend(backend_str).clean_username(username)
A:django.contrib.auth.middleware.stored_backend->load_backend(request.session.get(auth.BACKEND_SESSION_KEY, ''))
django.contrib.auth.middleware.AuthenticationMiddleware(object)
django.contrib.auth.middleware.AuthenticationMiddleware.process_request(self,request)
django.contrib.auth.middleware.RemoteUserMiddleware(object)
django.contrib.auth.middleware.RemoteUserMiddleware._remove_invalid_user(self,request)
django.contrib.auth.middleware.RemoteUserMiddleware.clean_username(self,username,request)
django.contrib.auth.middleware.RemoteUserMiddleware.process_request(self,request)
django.contrib.auth.middleware.get_user(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/views.py----------------------------------------
A:django.contrib.auth.views.redirect_to->resolve_url(settings.LOGIN_REDIRECT_URL)
A:django.contrib.auth.views.form->password_change_form(user=request.user)
A:django.contrib.auth.views.current_site->get_current_site(request)
A:django.contrib.auth.views.next_page->resolve_url(next_page)
A:django.contrib.auth.views.login_url->resolve_url(login_url)
A:django.contrib.auth.views.resolved_url->resolve_url(login_url or settings.LOGIN_URL)
A:django.contrib.auth.views.login_url_parts->list(urlparse(resolved_url))
A:django.contrib.auth.views.querystring->QueryDict(login_url_parts[4], mutable=True)
A:django.contrib.auth.views.login_url_parts[4]->QueryDict(login_url_parts[4], mutable=True).urlencode(safe='/')
A:django.contrib.auth.views.post_reset_redirect->resolve_url(post_reset_redirect)
A:django.contrib.auth.views.opts->dict(opts, domain_override=request.get_host())
A:django.contrib.auth.views.UserModel->get_user_model()
A:django.contrib.auth.views.uid->urlsafe_base64_decode(uidb64)
A:django.contrib.auth.views.user->get_user_model()._default_manager.get(pk=uid)
A:django.contrib.auth.views.uidb64->force_text(urlsafe_base64_encode(force_bytes(base36_to_int(uidb36))))
A:django.contrib.auth.views.post_change_redirect->resolve_url(post_change_redirect)
django.contrib.auth.views.login(request,template_name='registration/login.html',redirect_field_name=REDIRECT_FIELD_NAME,authentication_form=AuthenticationForm,current_app=None,extra_context=None)
django.contrib.auth.views.logout(request,next_page=None,template_name='registration/logged_out.html',redirect_field_name=REDIRECT_FIELD_NAME,current_app=None,extra_context=None)
django.contrib.auth.views.logout_then_login(request,login_url=None,current_app=None,extra_context=None)
django.contrib.auth.views.password_change(request,template_name='registration/password_change_form.html',post_change_redirect=None,password_change_form=PasswordChangeForm,current_app=None,extra_context=None)
django.contrib.auth.views.password_change_done(request,template_name='registration/password_change_done.html',current_app=None,extra_context=None)
django.contrib.auth.views.password_reset(request,is_admin_site=False,template_name='registration/password_reset_form.html',email_template_name='registration/password_reset_email.html',subject_template_name='registration/password_reset_subject.txt',password_reset_form=PasswordResetForm,token_generator=default_token_generator,post_reset_redirect=None,from_email=None,current_app=None,extra_context=None)
django.contrib.auth.views.password_reset_complete(request,template_name='registration/password_reset_complete.html',current_app=None,extra_context=None)
django.contrib.auth.views.password_reset_confirm(request,uidb64=None,token=None,template_name='registration/password_reset_confirm.html',token_generator=default_token_generator,set_password_form=SetPasswordForm,post_reset_redirect=None,current_app=None,extra_context=None)
django.contrib.auth.views.password_reset_confirm_uidb36(request,uidb36=None,**kwargs)
django.contrib.auth.views.password_reset_done(request,template_name='registration/password_reset_done.html',current_app=None,extra_context=None)
django.contrib.auth.views.redirect_to_login(next,login_url=None,redirect_field_name=REDIRECT_FIELD_NAME)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tokens.py----------------------------------------
A:django.contrib.auth.tokens.(ts_b36, hash)->token.split('-')
A:django.contrib.auth.tokens.ts->base36_to_int(ts_b36)
A:django.contrib.auth.tokens.ts_b36->int_to_base36(timestamp)
A:django.contrib.auth.tokens.login_timestamp->user.last_login.replace(microsecond=0, tzinfo=None)
A:django.contrib.auth.tokens.default_token_generator->PasswordResetTokenGenerator()
django.contrib.auth.tokens.PasswordResetTokenGenerator(object)
django.contrib.auth.tokens.PasswordResetTokenGenerator._make_token_with_timestamp(self,user,timestamp)
django.contrib.auth.tokens.PasswordResetTokenGenerator._num_days(self,dt)
django.contrib.auth.tokens.PasswordResetTokenGenerator._today(self)
django.contrib.auth.tokens.PasswordResetTokenGenerator.check_token(self,user,token)
django.contrib.auth.tokens.PasswordResetTokenGenerator.make_token(self,user)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/backends.py----------------------------------------
A:django.contrib.auth.backends.UserModel->get_user_model()
A:django.contrib.auth.backends.username->self.clean_username(remote_user)
A:django.contrib.auth.backends.user->get_user_model().objects.get_by_natural_key(username)
A:django.contrib.auth.backends.perms->perms.values_list('content_type__app_label', 'codename').order_by().values_list('content_type__app_label', 'codename').order_by()
A:django.contrib.auth.backends.user_groups_field->get_user_model()._meta.get_field('groups')
A:django.contrib.auth.backends.user_obj._group_perm_cache->set(['%s.%s' % (ct, name) for (ct, name) in perms])
A:django.contrib.auth.backends.user_obj._perm_cache->set(['%s.%s' % (p.content_type.app_label, p.codename) for p in user_obj.user_permissions.select_related()])
A:django.contrib.auth.backends.(user, created)->get_user_model().objects.get_or_create(**{UserModel.USERNAME_FIELD: username})
django.contrib.auth.backends.ModelBackend(object)
django.contrib.auth.backends.ModelBackend.authenticate(self,username=None,password=None,**kwargs)
django.contrib.auth.backends.ModelBackend.get_all_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.ModelBackend.get_group_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.ModelBackend.get_user(self,user_id)
django.contrib.auth.backends.ModelBackend.has_module_perms(self,user_obj,app_label)
django.contrib.auth.backends.ModelBackend.has_perm(self,user_obj,perm,obj=None)
django.contrib.auth.backends.RemoteUserBackend(ModelBackend)
django.contrib.auth.backends.RemoteUserBackend.authenticate(self,remote_user)
django.contrib.auth.backends.RemoteUserBackend.clean_username(self,username)
django.contrib.auth.backends.RemoteUserBackend.configure_user(self,user)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/create_superuser.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/context_processors.py----------------------------------------
A:django.contrib.auth.context_processors.(app_label, perm_name)->perm_name.split('.', 1)
A:django.contrib.auth.context_processors.user->AnonymousUser()
django.contrib.auth.context_processors.PermLookupDict(self,user,app_label)
django.contrib.auth.context_processors.PermLookupDict.__bool__(self)
django.contrib.auth.context_processors.PermLookupDict.__getitem__(self,perm_name)
django.contrib.auth.context_processors.PermLookupDict.__init__(self,user,app_label)
django.contrib.auth.context_processors.PermLookupDict.__iter__(self)
django.contrib.auth.context_processors.PermLookupDict.__nonzero__(self)
django.contrib.auth.context_processors.PermLookupDict.__repr__(self)
django.contrib.auth.context_processors.PermWrapper(self,user)
django.contrib.auth.context_processors.PermWrapper.__contains__(self,perm_name)
django.contrib.auth.context_processors.PermWrapper.__getitem__(self,app_label)
django.contrib.auth.context_processors.PermWrapper.__init__(self,user)
django.contrib.auth.context_processors.PermWrapper.__iter__(self)
django.contrib.auth.context_processors.auth(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/__init__.py----------------------------------------
A:django.contrib.auth.__init__.SENSITIVE_CREDENTIALS->re.compile('api|token|key|secret|password|signature', re.I)
A:django.contrib.auth.__init__.user->AnonymousUser()
A:django.contrib.auth.__init__.language->request.session.get('django_language')
A:django.contrib.auth.__init__.request.user->AnonymousUser()
A:django.contrib.auth.__init__.(app_label, model_name)->django.conf.settings.AUTH_USER_MODEL.split('.')
A:django.contrib.auth.__init__.user_model->get_model(app_label, model_name)
A:django.contrib.auth.__init__.backend->load_backend(backend_path)
django.contrib.auth.__init__._clean_credentials(credentials)
django.contrib.auth.__init__.authenticate(**credentials)
django.contrib.auth.__init__.get_backends()
django.contrib.auth.__init__.get_permission_codename(action,opts)
django.contrib.auth.__init__.get_user(request)
django.contrib.auth.__init__.get_user_model()
django.contrib.auth.__init__.load_backend(path)
django.contrib.auth.__init__.login(request,user)
django.contrib.auth.__init__.logout(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/models.py----------------------------------------
A:django.contrib.auth.models.user.last_login->django.utils.timezone.now()
A:django.contrib.auth.models.name->django.db.models.CharField(_('name'), max_length=80, unique=True)
A:django.contrib.auth.models.content_type->django.db.models.ForeignKey(ContentType)
A:django.contrib.auth.models.codename->django.db.models.CharField(_('codename'), max_length=100)
A:django.contrib.auth.models.objects->UserManager()
A:django.contrib.auth.models.verbose_name->_('user')
A:django.contrib.auth.models.verbose_name_plural->_('users')
A:django.contrib.auth.models.permissions->set()
A:django.contrib.auth.models.(email_name, domain_part)->django.db.models.EmailField(_('email address'), blank=True).strip().rsplit('@', 1)
A:django.contrib.auth.models.email->django.db.models.EmailField(_('email address'), blank=True)
A:django.contrib.auth.models.now->django.utils.timezone.now()
A:django.contrib.auth.models.user->self.model(username=username, email=email, is_staff=is_staff, is_active=True, is_superuser=is_superuser, last_login=now, date_joined=now, **extra_fields)
A:django.contrib.auth.models.password->django.db.models.CharField(_('password'), max_length=128)
A:django.contrib.auth.models.last_login->django.db.models.DateTimeField(_('last login'), default=timezone.now)
A:django.contrib.auth.models.self.password->make_password(None)
A:django.contrib.auth.models.is_superuser->django.db.models.BooleanField(_('superuser status'), default=False, help_text=_('Designates that this user has all permissions without explicitly assigning them.'))
A:django.contrib.auth.models.groups->property(_get_groups)
A:django.contrib.auth.models.user_permissions->property(_get_user_permissions)
A:django.contrib.auth.models.username->django.db.models.CharField(_('username'), max_length=30, unique=True, help_text=_('Required. 30 characters or fewer. Letters, numbers and @/./+/-/_ characters'), validators=[validators.RegexValidator(re.compile('^[\\w.@+-]+$'), _('Enter a valid username.'), 'invalid')])
A:django.contrib.auth.models.first_name->django.db.models.CharField(_('first name'), max_length=30, blank=True)
A:django.contrib.auth.models.last_name->django.db.models.CharField(_('last name'), max_length=30, blank=True)
A:django.contrib.auth.models.is_staff->django.db.models.BooleanField(_('staff status'), default=False, help_text=_('Designates whether the user can log into this admin site.'))
A:django.contrib.auth.models.is_active->django.db.models.BooleanField(_('active'), default=True, help_text=_('Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'))
A:django.contrib.auth.models.date_joined->django.db.models.DateTimeField(_('date joined'), default=timezone.now)
A:django.contrib.auth.models.(app_label, model_name)->django.conf.settings.AUTH_PROFILE_MODULE.split('.')
A:django.contrib.auth.models.model->django.db.models.get_model(app_label, model_name)
A:django.contrib.auth.models.self._profile_cache->django.db.models.get_model(app_label, model_name)._default_manager.using(self._state.db).get(user__id__exact=self.id)
A:django.contrib.auth.models._groups->EmptyManager(Group)
A:django.contrib.auth.models._user_permissions->EmptyManager(Permission)
django.contrib.auth.AnonymousUser(self)
django.contrib.auth.AnonymousUser.__eq__(self,other)
django.contrib.auth.AnonymousUser.__hash__(self)
django.contrib.auth.AnonymousUser.__ne__(self,other)
django.contrib.auth.AnonymousUser.__str__(self)
django.contrib.auth.AnonymousUser._get_groups(self)
django.contrib.auth.AnonymousUser._get_user_permissions(self)
django.contrib.auth.AnonymousUser.check_password(self,raw_password)
django.contrib.auth.AnonymousUser.delete(self)
django.contrib.auth.AnonymousUser.get_all_permissions(self,obj=None)
django.contrib.auth.AnonymousUser.get_group_permissions(self,obj=None)
django.contrib.auth.AnonymousUser.has_module_perms(self,module)
django.contrib.auth.AnonymousUser.has_perm(self,perm,obj=None)
django.contrib.auth.AnonymousUser.has_perms(self,perm_list,obj=None)
django.contrib.auth.AnonymousUser.is_anonymous(self)
django.contrib.auth.AnonymousUser.is_authenticated(self)
django.contrib.auth.AnonymousUser.save(self)
django.contrib.auth.AnonymousUser.set_password(self,raw_password)
django.contrib.auth.models.AbstractBaseUser(models.Model)
django.contrib.auth.models.AbstractBaseUser.Meta
django.contrib.auth.models.AbstractBaseUser.__str__(self)
django.contrib.auth.models.AbstractBaseUser.check_password(self,raw_password)
django.contrib.auth.models.AbstractBaseUser.get_full_name(self)
django.contrib.auth.models.AbstractBaseUser.get_short_name(self)
django.contrib.auth.models.AbstractBaseUser.get_username(self)
django.contrib.auth.models.AbstractBaseUser.has_usable_password(self)
django.contrib.auth.models.AbstractBaseUser.is_anonymous(self)
django.contrib.auth.models.AbstractBaseUser.is_authenticated(self)
django.contrib.auth.models.AbstractBaseUser.natural_key(self)
django.contrib.auth.models.AbstractBaseUser.set_password(self,raw_password)
django.contrib.auth.models.AbstractBaseUser.set_unusable_password(self)
django.contrib.auth.models.AbstractUser(AbstractBaseUser,PermissionsMixin)
django.contrib.auth.models.AbstractUser.Meta
django.contrib.auth.models.AbstractUser.email_user(self,subject,message,from_email=None)
django.contrib.auth.models.AbstractUser.get_absolute_url(self)
django.contrib.auth.models.AbstractUser.get_full_name(self)
django.contrib.auth.models.AbstractUser.get_profile(self)
django.contrib.auth.models.AbstractUser.get_short_name(self)
django.contrib.auth.models.AnonymousUser(self)
django.contrib.auth.models.AnonymousUser.__eq__(self,other)
django.contrib.auth.models.AnonymousUser.__hash__(self)
django.contrib.auth.models.AnonymousUser.__init__(self)
django.contrib.auth.models.AnonymousUser.__ne__(self,other)
django.contrib.auth.models.AnonymousUser.__str__(self)
django.contrib.auth.models.AnonymousUser._get_groups(self)
django.contrib.auth.models.AnonymousUser._get_user_permissions(self)
django.contrib.auth.models.AnonymousUser.check_password(self,raw_password)
django.contrib.auth.models.AnonymousUser.delete(self)
django.contrib.auth.models.AnonymousUser.get_all_permissions(self,obj=None)
django.contrib.auth.models.AnonymousUser.get_group_permissions(self,obj=None)
django.contrib.auth.models.AnonymousUser.has_module_perms(self,module)
django.contrib.auth.models.AnonymousUser.has_perm(self,perm,obj=None)
django.contrib.auth.models.AnonymousUser.has_perms(self,perm_list,obj=None)
django.contrib.auth.models.AnonymousUser.is_anonymous(self)
django.contrib.auth.models.AnonymousUser.is_authenticated(self)
django.contrib.auth.models.AnonymousUser.save(self)
django.contrib.auth.models.AnonymousUser.set_password(self,raw_password)
django.contrib.auth.models.BaseUserManager(models.Manager)
django.contrib.auth.models.BaseUserManager.get_by_natural_key(self,username)
django.contrib.auth.models.BaseUserManager.make_random_password(self,length=10,allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')
django.contrib.auth.models.BaseUserManager.normalize_email(cls,email)
django.contrib.auth.models.Group(models.Model)
django.contrib.auth.models.Group.Meta
django.contrib.auth.models.Group.__str__(self)
django.contrib.auth.models.Group.natural_key(self)
django.contrib.auth.models.GroupManager(models.Manager)
django.contrib.auth.models.GroupManager.get_by_natural_key(self,name)
django.contrib.auth.models.Permission(models.Model)
django.contrib.auth.models.Permission.Meta
django.contrib.auth.models.Permission.__str__(self)
django.contrib.auth.models.Permission.natural_key(self)
django.contrib.auth.models.PermissionManager(models.Manager)
django.contrib.auth.models.PermissionManager.get_by_natural_key(self,codename,app_label,model)
django.contrib.auth.models.PermissionsMixin(models.Model)
django.contrib.auth.models.PermissionsMixin.Meta
django.contrib.auth.models.PermissionsMixin.get_all_permissions(self,obj=None)
django.contrib.auth.models.PermissionsMixin.get_group_permissions(self,obj=None)
django.contrib.auth.models.PermissionsMixin.has_module_perms(self,app_label)
django.contrib.auth.models.PermissionsMixin.has_perm(self,perm,obj=None)
django.contrib.auth.models.PermissionsMixin.has_perms(self,perm_list,obj=None)
django.contrib.auth.models.SiteProfileNotAvailable(Exception)
django.contrib.auth.models.User(AbstractUser)
django.contrib.auth.models.User.Meta(AbstractUser.Meta)
django.contrib.auth.models.UserManager(BaseUserManager)
django.contrib.auth.models.UserManager._create_user(self,username,email,password,is_staff,is_superuser,**extra_fields)
django.contrib.auth.models.UserManager.create_superuser(self,username,email,password,**extra_fields)
django.contrib.auth.models.UserManager.create_user(self,username,email=None,password=None,**extra_fields)
django.contrib.auth.models._user_get_all_permissions(user,obj)
django.contrib.auth.models._user_has_module_perms(user,app_label)
django.contrib.auth.models._user_has_perm(user,perm,obj)
django.contrib.auth.models.update_last_login(sender,user,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/decorators.py----------------------------------------
A:django.contrib.auth.decorators.path->request.get_full_path()
A:django.contrib.auth.decorators.resolved_login_url->force_str(resolve_url(login_url or settings.LOGIN_URL))
A:django.contrib.auth.decorators.actual_decorator->user_passes_test(lambda u: u.is_authenticated(), login_url=login_url, redirect_field_name=redirect_field_name)
django.contrib.auth.decorators.login_required(function=None,redirect_field_name=REDIRECT_FIELD_NAME,login_url=None)
django.contrib.auth.decorators.permission_required(perm,login_url=None,raise_exception=False)
django.contrib.auth.decorators.user_passes_test(test_func,login_url=None,redirect_field_name=REDIRECT_FIELD_NAME)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/urls.py----------------------------------------
A:django.contrib.auth.urls.urlpatterns->patterns('', url('^login/$', 'django.contrib.auth.views.login', name='login'), url('^logout/$', 'django.contrib.auth.views.logout', name='logout'), url('^password_change/$', 'django.contrib.auth.views.password_change', name='password_change'), url('^password_change/done/$', 'django.contrib.auth.views.password_change_done', name='password_change_done'), url('^password_reset/$', 'django.contrib.auth.views.password_reset', name='password_reset'), url('^password_reset/done/$', 'django.contrib.auth.views.password_reset_done', name='password_reset_done'), url('^reset/(?P<uidb36>[0-9A-Za-z]{1,13})-(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$', 'django.contrib.auth.views.password_reset_confirm_uidb36'), url('^reset/(?P<uidb64>[0-9A-Za-z_\\-]+)/(?P<token>[0-9A-Za-z]{1,13}-[0-9A-Za-z]{1,20})/$', 'django.contrib.auth.views.password_reset_confirm', name='password_reset_confirm'), url('^reset/done/$', 'django.contrib.auth.views.password_reset_complete', name='password_reset_complete'))


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/forms.py----------------------------------------
A:django.contrib.auth.forms.final_attrs->self.build_attrs(attrs)
A:django.contrib.auth.forms.summary->format_html_join('', '<strong>{0}</strong>: {1} ', ((ugettext(key), value) for (key, value) in hasher.safe_summary(encoded).items()))
A:django.contrib.auth.forms.hasher->identify_hasher(encoded)
A:django.contrib.auth.forms.username->self.cleaned_data.get('username')
A:django.contrib.auth.forms.password1->self.cleaned_data.get('password1')
A:django.contrib.auth.forms.password2->self.cleaned_data.get('password2')
A:django.contrib.auth.forms.user->super(UserCreationForm, self).save(commit=False)
A:django.contrib.auth.forms.password->self.cleaned_data.get('password')
A:django.contrib.auth.forms.f->self.fields.get('user_permissions', None)
A:django.contrib.auth.forms.f.queryset->self.fields.get('user_permissions', None).queryset.select_related('content_type')
A:django.contrib.auth.forms.UserModel->get_user_model()
A:django.contrib.auth.forms.self.username_field->get_user_model()._meta.get_field(UserModel.USERNAME_FIELD)
A:django.contrib.auth.forms.self.fields['username'].label->capfirst(self.username_field.verbose_name)
A:django.contrib.auth.forms.self.user_cache->authenticate(username=username, password=password)
A:django.contrib.auth.forms.email->django.template.loader.render_to_string(email_template_name, c)
A:django.contrib.auth.forms.active_users->get_user_model()._default_manager.filter(email__iexact=email, is_active=True)
A:django.contrib.auth.forms.current_site->get_current_site(request)
A:django.contrib.auth.forms.subject->''.join(subject.splitlines())
A:django.contrib.auth.forms.new_password1->django.forms.CharField(label=_('New password'), widget=forms.PasswordInput)
A:django.contrib.auth.forms.new_password2->django.forms.CharField(label=_('New password confirmation'), widget=forms.PasswordInput)
A:django.contrib.auth.forms.error_messages->dict(SetPasswordForm.error_messages, **{'password_incorrect': _('Your old password was entered incorrectly. Please enter it again.')})
A:django.contrib.auth.forms.old_password->django.forms.CharField(label=_('Old password'), widget=forms.PasswordInput)
A:django.contrib.auth.forms.PasswordChangeForm.base_fields->SortedDict([(k, PasswordChangeForm.base_fields[k]) for k in ['old_password', 'new_password1', 'new_password2']])
A:django.contrib.auth.forms.changed_data->property(_get_changed_data)
django.contrib.auth.forms.AdminPasswordChangeForm(self,user,*args,**kwargs)
django.contrib.auth.forms.AdminPasswordChangeForm.__init__(self,user,*args,**kwargs)
django.contrib.auth.forms.AdminPasswordChangeForm._get_changed_data(self)
django.contrib.auth.forms.AdminPasswordChangeForm.clean_password2(self)
django.contrib.auth.forms.AdminPasswordChangeForm.save(self,commit=True)
django.contrib.auth.forms.AuthenticationForm(self,request=None,*args,**kwargs)
django.contrib.auth.forms.AuthenticationForm.__init__(self,request=None,*args,**kwargs)
django.contrib.auth.forms.AuthenticationForm.check_for_test_cookie(self)
django.contrib.auth.forms.AuthenticationForm.clean(self)
django.contrib.auth.forms.AuthenticationForm.get_user(self)
django.contrib.auth.forms.AuthenticationForm.get_user_id(self)
django.contrib.auth.forms.PasswordChangeForm(SetPasswordForm)
django.contrib.auth.forms.PasswordChangeForm.clean_old_password(self)
django.contrib.auth.forms.PasswordResetForm(forms.Form)
django.contrib.auth.forms.PasswordResetForm.save(self,domain_override=None,subject_template_name='registration/password_reset_subject.txt',email_template_name='registration/password_reset_email.html',use_https=False,token_generator=default_token_generator,from_email=None,request=None)
django.contrib.auth.forms.ReadOnlyPasswordHashField(self,*args,**kwargs)
django.contrib.auth.forms.ReadOnlyPasswordHashField.__init__(self,*args,**kwargs)
django.contrib.auth.forms.ReadOnlyPasswordHashField._has_changed(self,initial,data)
django.contrib.auth.forms.ReadOnlyPasswordHashField.bound_data(self,data,initial)
django.contrib.auth.forms.ReadOnlyPasswordHashWidget(forms.Widget)
django.contrib.auth.forms.ReadOnlyPasswordHashWidget.render(self,name,value,attrs)
django.contrib.auth.forms.SetPasswordForm(self,user,*args,**kwargs)
django.contrib.auth.forms.SetPasswordForm.__init__(self,user,*args,**kwargs)
django.contrib.auth.forms.SetPasswordForm.clean_new_password2(self)
django.contrib.auth.forms.SetPasswordForm.save(self,commit=True)
django.contrib.auth.forms.UserChangeForm(self,*args,**kwargs)
django.contrib.auth.forms.UserChangeForm.Meta
django.contrib.auth.forms.UserChangeForm.__init__(self,*args,**kwargs)
django.contrib.auth.forms.UserChangeForm.clean_password(self)
django.contrib.auth.forms.UserCreationForm(forms.ModelForm)
django.contrib.auth.forms.UserCreationForm.Meta
django.contrib.auth.forms.UserCreationForm.clean_password2(self)
django.contrib.auth.forms.UserCreationForm.clean_username(self)
django.contrib.auth.forms.UserCreationForm.save(self,commit=True)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_decorators.py----------------------------------------
A:django.contrib.auth.tests.test_decorators.response->self.client.get(view_url)
django.contrib.auth.tests.test_decorators.LoginRequiredTestCase(AuthViewsTestCase)
django.contrib.auth.tests.test_decorators.LoginRequiredTestCase.testCallable(self)
django.contrib.auth.tests.test_decorators.LoginRequiredTestCase.testLoginRequired(self,view_url='/login_required/',login_url=None)
django.contrib.auth.tests.test_decorators.LoginRequiredTestCase.testLoginRequiredNextUrl(self)
django.contrib.auth.tests.test_decorators.LoginRequiredTestCase.testView(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_views.py----------------------------------------
A:django.contrib.auth.tests.test_views.response->self.client.post('/admin/auth/user/%s/password/' % u.pk, {'password1': 'password1', 'password2': 'password1'})
A:django.contrib.auth.tests.test_views.form_errors->list(itertools.chain(*response.context['form'].errors.values()))
A:django.contrib.auth.tests.test_views.urlmatch->re.search('https?://[^/]*(/.*reset/\\S*)', email.body)
A:django.contrib.auth.tests.test_views.(url, path)->self._test_confirm_start()
A:django.contrib.auth.tests.test_views.path_parts->path.replace('/reset/', '/reset/custom/named/').strip('/').split('/')
A:django.contrib.auth.tests.test_views.path_parts[1]->int_to_base36(int(urlsafe_base64_decode(path_parts[1])))
A:django.contrib.auth.tests.test_views.u->django.contrib.auth.models.User.objects.get(email='staffmember@example.com')
A:django.contrib.auth.tests.test_views.path->path.replace('/reset/', '/reset/custom/named/').replace('/reset/', '/reset/custom/named/')
A:django.contrib.auth.tests.test_views.site->django.contrib.sites.models.Site.objects.get_current()
A:django.contrib.auth.tests.test_views.login_url->reverse('login')
A:django.contrib.auth.tests.test_views.req->HttpRequest()
A:django.contrib.auth.tests.test_views.resp->login_view(req)
A:django.contrib.auth.tests.test_views.resp2->CsrfViewMiddleware().process_response(req, resp)
A:django.contrib.auth.tests.test_views.csrf_cookie->CsrfViewMiddleware().process_response(req, resp).cookies.get(settings.CSRF_COOKIE_NAME, None)
A:django.contrib.auth.tests.test_views.quoted_next->urlquote('http://testserver/login_required/')
A:django.contrib.auth.tests.test_views.logout_url->reverse('logout')
A:django.contrib.auth.tests.test_views.engine->import_module(settings.SESSION_ENGINE)
A:django.contrib.auth.tests.test_views.session->import_module(settings.SESSION_ENGINE).SessionStore()
A:django.contrib.auth.tests.test_views.self.admin->django.contrib.auth.models.User.objects.get(pk=1)
A:django.contrib.auth.tests.test_views.data->self.get_user_data(self.admin)
A:django.contrib.auth.tests.test_views.row->django.contrib.admin.models.LogEntry.objects.latest('id')
django.contrib.auth.tests.test_views.AuthViewNamedURLTests(AuthViewsTestCase)
django.contrib.auth.tests.test_views.AuthViewNamedURLTests.test_named_urls(self)
django.contrib.auth.tests.test_views.AuthViewsTestCase(TestCase)
django.contrib.auth.tests.test_views.AuthViewsTestCase.assertFormError(self,response,error)
django.contrib.auth.tests.test_views.AuthViewsTestCase.assertURLEqual(self,url,expected,parse_qs=False)
django.contrib.auth.tests.test_views.AuthViewsTestCase.login(self,password='password')
django.contrib.auth.tests.test_views.AuthViewsTestCase.logout(self)
django.contrib.auth.tests.test_views.ChangePasswordTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.ChangePasswordTest.fail_login(self,password='password')
django.contrib.auth.tests.test_views.ChangePasswordTest.logout(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_done_fails(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_done_succeeds(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_fails_with_invalid_old_password(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_fails_with_mismatched_passwords(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_redirect_custom(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_redirect_custom_named(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_redirect_default(self)
django.contrib.auth.tests.test_views.ChangePasswordTest.test_password_change_succeeds(self)
django.contrib.auth.tests.test_views.ChangelistTests(AuthViewsTestCase)
django.contrib.auth.tests.test_views.ChangelistTests.get_user_data(self,user)
django.contrib.auth.tests.test_views.ChangelistTests.setUp(self)
django.contrib.auth.tests.test_views.ChangelistTests.test_changelist_disallows_password_lookups(self)
django.contrib.auth.tests.test_views.ChangelistTests.test_user_change_different_user_password(self)
django.contrib.auth.tests.test_views.ChangelistTests.test_user_change_email(self)
django.contrib.auth.tests.test_views.ChangelistTests.test_user_change_password(self)
django.contrib.auth.tests.test_views.ChangelistTests.test_user_not_change(self)
django.contrib.auth.tests.test_views.CustomUserPasswordResetTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.CustomUserPasswordResetTest._read_signup_email(self,email)
django.contrib.auth.tests.test_views.CustomUserPasswordResetTest._test_confirm_start(self)
django.contrib.auth.tests.test_views.CustomUserPasswordResetTest.test_confirm_valid_custom_user(self)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest.assertLoginRedirectURLEqual(self,url)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest.test_custom(self)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest.test_default(self)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest.test_named(self)
django.contrib.auth.tests.test_views.LoginRedirectUrlTest.test_remote(self)
django.contrib.auth.tests.test_views.LoginTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.LoginTest.test_current_site_in_context_after_login(self)
django.contrib.auth.tests.test_views.LoginTest.test_login_csrf_rotate(self,password='password')
django.contrib.auth.tests.test_views.LoginTest.test_login_form_contains_request(self)
django.contrib.auth.tests.test_views.LoginTest.test_security_check(self,password='password')
django.contrib.auth.tests.test_views.LoginURLSettings(AuthViewsTestCase)
django.contrib.auth.tests.test_views.LoginURLSettings.assertLoginURLEquals(self,url,parse_qs=False)
django.contrib.auth.tests.test_views.LoginURLSettings.test_https_login_url(self)
django.contrib.auth.tests.test_views.LoginURLSettings.test_login_url_with_querystring(self)
django.contrib.auth.tests.test_views.LoginURLSettings.test_named_login_url(self)
django.contrib.auth.tests.test_views.LoginURLSettings.test_remote_login_url(self)
django.contrib.auth.tests.test_views.LoginURLSettings.test_remote_login_url_with_next_querystring(self)
django.contrib.auth.tests.test_views.LoginURLSettings.test_standard_login_url(self)
django.contrib.auth.tests.test_views.LogoutTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.LogoutTest.confirm_logged_out(self)
django.contrib.auth.tests.test_views.LogoutTest.test_14377(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_default(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_preserve_language(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_with_custom_redirect_argument(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_with_named_redirect(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_with_next_page_specified(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_with_overridden_redirect_url(self)
django.contrib.auth.tests.test_views.LogoutTest.test_logout_with_redirect_argument(self)
django.contrib.auth.tests.test_views.LogoutTest.test_security_check(self,password='password')
django.contrib.auth.tests.test_views.PasswordResetTest(AuthViewsTestCase)
django.contrib.auth.tests.test_views.PasswordResetTest._read_signup_email(self,email)
django.contrib.auth.tests.test_views.PasswordResetTest._test_confirm_start(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_admin_reset(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_complete(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_different_passwords(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_invalid(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_invalid_post(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_invalid_user(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_invalid_user_base36(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_overflow_user(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_overflow_user_base36(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_redirect_custom(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_redirect_custom_named(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_redirect_default(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_valid(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_confirm_valid_base36(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_email_found(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_email_found_custom_from(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_email_not_found(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_poisoned_http_host(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_poisoned_http_host_admin_site(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_reset_custom_redirect(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_reset_custom_redirect_named(self)
django.contrib.auth.tests.test_views.PasswordResetTest.test_reset_redirect_default(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_signals.py----------------------------------------
A:django.contrib.auth.tests.test_signals.user->django.contrib.auth.models.User.objects.get(pk=3)
A:django.contrib.auth.tests.test_signals.request->RequestFactory().get('/login')
django.contrib.auth.tests.test_signals.SignalTestCase(TestCase)
django.contrib.auth.tests.test_signals.SignalTestCase.listener_login(self,user,**kwargs)
django.contrib.auth.tests.test_signals.SignalTestCase.listener_login_failed(self,sender,credentials,**kwargs)
django.contrib.auth.tests.test_signals.SignalTestCase.listener_logout(self,user,**kwargs)
django.contrib.auth.tests.test_signals.SignalTestCase.setUp(self)
django.contrib.auth.tests.test_signals.SignalTestCase.tearDown(self)
django.contrib.auth.tests.test_signals.SignalTestCase.test_login(self)
django.contrib.auth.tests.test_signals.SignalTestCase.test_logout(self)
django.contrib.auth.tests.test_signals.SignalTestCase.test_logout_anonymous(self)
django.contrib.auth.tests.test_signals.SignalTestCase.test_update_last_login(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/utils.py----------------------------------------
django.contrib.auth.tests.utils.skipIfCustomUser(test_func)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_auth_backends.py----------------------------------------
A:django.contrib.auth.tests.test_auth_backends.user->get_user(request)
A:django.contrib.auth.tests.test_auth_backends.content_type->django.contrib.contenttypes.models.ContentType.objects.get_for_model(Group)
A:django.contrib.auth.tests.test_auth_backends.perm->django.contrib.auth.models.Permission.objects.create(name='test', content_type=content_type, codename='test')
A:django.contrib.auth.tests.test_auth_backends.group->django.contrib.auth.models.Group.objects.create(name='test_group')
A:django.contrib.auth.tests.test_auth_backends.exp->set(['auth.test2', 'auth.test', 'auth.test3', 'auth.test_group'])
A:django.contrib.auth.tests.test_auth_backends.username->getattr(self.user, self.UserModel.USERNAME_FIELD)
A:django.contrib.auth.tests.test_auth_backends.self.user->django.contrib.auth.models.User.objects.create_user('test', 'test@example.com', 'test')
A:django.contrib.auth.tests.test_auth_backends.self.superuser->django.contrib.auth.tests.custom_user.CustomPermissionsUser._default_manager.create_superuser(email='test2@example.com', password='test', date_of_birth=date(1976, 11, 8))
A:django.contrib.auth.tests.test_auth_backends.test_user->django.contrib.auth.tests.custom_user.CustomUser._default_manager.create_user(email='test@example.com', password='test', date_of_birth=date(2006, 4, 25))
A:django.contrib.auth.tests.test_auth_backends.authenticated_user->authenticate(email='test@example.com', password='test')
A:django.contrib.auth.tests.test_auth_backends.self.user1->django.contrib.auth.models.User.objects.create_user('test', 'test@example.com', 'test')
A:django.contrib.auth.tests.test_auth_backends.self.user2->django.contrib.auth.models.User.objects.create_user('test2', 'test2@example.com', 'test')
A:django.contrib.auth.tests.test_auth_backends.self.user3->django.contrib.auth.models.User.objects.create_user('test3', 'test3@example.com', 'test')
A:django.contrib.auth.tests.test_auth_backends.request->HttpRequest()
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest(TestCase)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.tearDown(self)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.test_get_all_permissions(self)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.test_has_module_perms(self)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.test_has_perm(self)
django.contrib.auth.tests.test_auth_backends.AnonymousUserBackendTest.test_has_perms(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest(object)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.tearDown(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.test_authentication_timing(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.test_custom_perms(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.test_get_all_superuser_permissions(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.test_has_no_object_perm(self)
django.contrib.auth.tests.test_auth_backends.BaseModelBackendTest.test_has_perm(self)
django.contrib.auth.tests.test_auth_backends.ChangedBackendSettingsTest(TestCase)
django.contrib.auth.tests.test_auth_backends.ChangedBackendSettingsTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.ChangedBackendSettingsTest.test_changed_backend_settings(self)
django.contrib.auth.tests.test_auth_backends.CountingMD5PasswordHasher(MD5PasswordHasher)
django.contrib.auth.tests.test_auth_backends.CountingMD5PasswordHasher.encode(self,*args,**kwargs)
django.contrib.auth.tests.test_auth_backends.CustomPermissionsUserModelBackendTest(BaseModelBackendTest,TestCase)
django.contrib.auth.tests.test_auth_backends.CustomPermissionsUserModelBackendTest.create_users(self)
django.contrib.auth.tests.test_auth_backends.CustomUserModelBackendAuthenticateTest(TestCase)
django.contrib.auth.tests.test_auth_backends.CustomUserModelBackendAuthenticateTest.test_authenticate(self)
django.contrib.auth.tests.test_auth_backends.ExtensionUserModelBackendTest(BaseModelBackendTest,TestCase)
django.contrib.auth.tests.test_auth_backends.ExtensionUserModelBackendTest.create_users(self)
django.contrib.auth.tests.test_auth_backends.ImproperlyConfiguredUserModelTest(TestCase)
django.contrib.auth.tests.test_auth_backends.ImproperlyConfiguredUserModelTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.ImproperlyConfiguredUserModelTest.test_does_not_shadow_exception(self)
django.contrib.auth.tests.test_auth_backends.InActiveUserBackendTest(TestCase)
django.contrib.auth.tests.test_auth_backends.InActiveUserBackendTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.InActiveUserBackendTest.tearDown(self)
django.contrib.auth.tests.test_auth_backends.InActiveUserBackendTest.test_has_module_perms(self)
django.contrib.auth.tests.test_auth_backends.InActiveUserBackendTest.test_has_perm(self)
django.contrib.auth.tests.test_auth_backends.ModelBackendTest(BaseModelBackendTest,TestCase)
django.contrib.auth.tests.test_auth_backends.ModelBackendTest.create_users(self)
django.contrib.auth.tests.test_auth_backends.NewModelBackend(ModelBackend)
django.contrib.auth.tests.test_auth_backends.NoBackendsTest(TestCase)
django.contrib.auth.tests.test_auth_backends.NoBackendsTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.NoBackendsTest.test_raises_exception(self)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackend(object)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackend.authenticate(self,username=None,password=None)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackendTest(TestCase)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackendTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackendTest.test_authenticates(self)
django.contrib.auth.tests.test_auth_backends.PermissionDeniedBackendTest.test_permission_denied(self)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest(TestCase)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest.setUp(self)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest.tearDown(self)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest.test_get_all_permissions(self)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest.test_get_group_permissions(self)
django.contrib.auth.tests.test_auth_backends.RowlevelBackendTest.test_has_perm(self)
django.contrib.auth.tests.test_auth_backends.SimpleRowlevelBackend(object)
django.contrib.auth.tests.test_auth_backends.SimpleRowlevelBackend.get_all_permissions(self,user,obj=None)
django.contrib.auth.tests.test_auth_backends.SimpleRowlevelBackend.get_group_permissions(self,user,obj=None)
django.contrib.auth.tests.test_auth_backends.SimpleRowlevelBackend.has_module_perms(self,user,app_label)
django.contrib.auth.tests.test_auth_backends.SimpleRowlevelBackend.has_perm(self,user,perm,obj=None)
django.contrib.auth.tests.test_auth_backends.TestObj(object)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_remote_user.py----------------------------------------
A:django.contrib.auth.tests.test_remote_user.num_users->django.contrib.auth.models.User.objects.count()
A:django.contrib.auth.tests.test_remote_user.response->self.client.get('/remote_user/', REMOTE_USER='newuser')
A:django.contrib.auth.tests.test_remote_user.user->django.contrib.auth.models.User.objects.get(username='knownuser')
A:django.contrib.auth.tests.test_remote_user.default_login->default_login.replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)
A:django.contrib.auth.tests.test_remote_user.newuser->django.contrib.auth.models.User.objects.get(username='newuser')
django.contrib.auth.tests.test_remote_user.CustomRemoteUserBackend(RemoteUserBackend)
django.contrib.auth.tests.test_remote_user.CustomRemoteUserBackend.clean_username(self,username)
django.contrib.auth.tests.test_remote_user.CustomRemoteUserBackend.configure_user(self,user)
django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest(RemoteUserTest)
django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_known_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserCustomTest.test_unknown_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateBackend(RemoteUserBackend)
django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest(RemoteUserTest)
django.contrib.auth.tests.test_remote_user.RemoteUserNoCreateTest.test_unknown_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest(TestCase)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.setUp(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.tearDown(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_header_disappears(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_known_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_last_login(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_no_remote_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_unknown_user(self)
django.contrib.auth.tests.test_remote_user.RemoteUserTest.test_user_switch_forces_new_login(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_models.py----------------------------------------
A:django.contrib.auth.tests.test_models.user->UserModel(username='foo')
A:django.contrib.auth.tests.test_models.staff_user->django.contrib.auth.models.User.objects.get(username='staff')
A:django.contrib.auth.tests.test_models.users_group->django.contrib.auth.models.Group.objects.create(name='users')
A:django.contrib.auth.tests.test_models.group->django.contrib.auth.models.Group.objects.get(name='my_group')
A:django.contrib.auth.tests.test_models.returned->django.contrib.auth.models.UserManager.normalize_email('email\\ with_whitespace@D.COM')
A:django.contrib.auth.tests.test_models.user_fetched->get_user_model()._default_manager.get(pk=user.pk)
A:django.contrib.auth.tests.test_models.UserModel->get_user_model()
django.contrib.auth.tests.test_models.IsActiveTestCase(TestCase)
django.contrib.auth.tests.test_models.IsActiveTestCase.test_builtin_user_isactive(self)
django.contrib.auth.tests.test_models.IsActiveTestCase.test_is_active_field_default(self)
django.contrib.auth.tests.test_models.LoadDataWithNaturalKeysTestCase(TestCase)
django.contrib.auth.tests.test_models.LoadDataWithNaturalKeysTestCase.test_user_is_created_and_added_to_group(self)
django.contrib.auth.tests.test_models.LoadDataWithoutNaturalKeysTestCase(TestCase)
django.contrib.auth.tests.test_models.LoadDataWithoutNaturalKeysTestCase.test_user_is_created_and_added_to_group(self)
django.contrib.auth.tests.test_models.NaturalKeysTestCase(TestCase)
django.contrib.auth.tests.test_models.NaturalKeysTestCase.test_group_natural_key(self)
django.contrib.auth.tests.test_models.NaturalKeysTestCase.test_user_natural_key(self)
django.contrib.auth.tests.test_models.ProfileTestCase(TestCase)
django.contrib.auth.tests.test_models.ProfileTestCase.test_site_profile_not_available(self)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals(TestCase)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals.post_save_listener(self,*args,**kwargs)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals.setUp(self)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals.tearDown(self)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals.test_create_superuser(self)
django.contrib.auth.tests.test_models.TestCreateSuperUserSignals.test_create_user(self)
django.contrib.auth.tests.test_models.UserManagerTestCase(TestCase)
django.contrib.auth.tests.test_models.UserManagerTestCase.test_create_user(self)
django.contrib.auth.tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize(self)
django.contrib.auth.tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize_rfc3696(self)
django.contrib.auth.tests.test_models.UserManagerTestCase.test_create_user_email_domain_normalize_with_whitespace(self)
django.contrib.auth.tests.test_models.UserManagerTestCase.test_empty_username(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_basic.py----------------------------------------
A:django.contrib.auth.tests.test_basic.prompt->str(prompt)
A:django.contrib.auth.tests.test_basic.u->django.contrib.auth.models.User.objects.get(username='nolocale@somewhere.org')
A:django.contrib.auth.tests.test_basic.u2->django.contrib.auth.models.User.objects.create_user('testuser2', email='')
A:django.contrib.auth.tests.test_basic.u3->django.contrib.auth.models.User.objects.create_user('testuser3', email=None)
A:django.contrib.auth.tests.test_basic.a->AnonymousUser()
A:django.contrib.auth.tests.test_basic.super->django.contrib.auth.models.User.objects.create_superuser('super', 'super@example.com', 'super')
A:django.contrib.auth.tests.test_basic.new_io->StringIO()
A:django.contrib.auth.tests.test_basic.command_output->StringIO().getvalue().strip()
A:django.contrib.auth.tests.test_basic.username_field->django.contrib.auth.models.User._meta.get_field('username')
A:django.contrib.auth.tests.test_basic.username_field.verbose_name->ulazy('uživatel')
django.contrib.auth.tests.test_basic.BasicTestCase(TestCase)
django.contrib.auth.tests.test_basic.BasicTestCase.test_anonymous_user(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_createsuperuser_management_command(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_createsuperuser_nolocale(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_createsuperuser_non_ascii_verbose_name(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_get_user_model(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_superuser(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_swappable_user(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_swappable_user_bad_setting(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_swappable_user_nonexistent_model(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_user(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_user_no_email(self)
django.contrib.auth.tests.test_basic.BasicTestCase.test_user_verbose_names_translatable(self)
django.contrib.auth.tests.test_basic.mock_inputs(inputs)
django.contrib.auth.tests.test_basic.user_model_swapped(**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_tokens.py----------------------------------------
A:django.contrib.auth.tests.test_tokens.user->django.contrib.auth.models.User.objects.create_user('ima1337h4x0r', 'test4@example.com', 'p4ssw0rd')
A:django.contrib.auth.tests.test_tokens.p0->PasswordResetTokenGenerator()
A:django.contrib.auth.tests.test_tokens.tk1->PasswordResetTokenGenerator().make_token(user)
A:django.contrib.auth.tests.test_tokens.reload->django.contrib.auth.models.User.objects.get(username='comebackkid')
A:django.contrib.auth.tests.test_tokens.tk2->PasswordResetTokenGenerator().make_token(reload)
A:django.contrib.auth.tests.test_tokens.p1->Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS))
A:django.contrib.auth.tests.test_tokens.p2->Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS + 1))
django.contrib.auth.tests.test_tokens.TokenGeneratorTest(TestCase)
django.contrib.auth.tests.test_tokens.TokenGeneratorTest.test_10265(self)
django.contrib.auth.tests.test_tokens.TokenGeneratorTest.test_date_length(self)
django.contrib.auth.tests.test_tokens.TokenGeneratorTest.test_make_token(self)
django.contrib.auth.tests.test_tokens.TokenGeneratorTest.test_timeout(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_forms.py----------------------------------------
A:django.contrib.auth.tests.test_forms.form->PasswordResetForm(data)
A:django.contrib.auth.tests.test_forms.u->PasswordResetForm(data).save()
A:django.contrib.auth.tests.test_forms.username->CharField(label='')
A:django.contrib.auth.tests.test_forms.UserModel->get_user_model()
A:django.contrib.auth.tests.test_forms.username_field->get_user_model()._meta.get_field(UserModel.USERNAME_FIELD)
A:django.contrib.auth.tests.test_forms.user->django.contrib.auth.models.User.objects.create_user('testuser', 'test@example.com', 'test')
A:django.contrib.auth.tests.test_forms.form_for_data->UserChangeForm(instance=user)
A:django.contrib.auth.tests.test_forms.(user, username, email)->self.create_dummy_user()
A:django.contrib.auth.tests.test_forms.widget->ReadOnlyPasswordHashWidget()
A:django.contrib.auth.tests.test_forms.html->ReadOnlyPasswordHashWidget().render(name='password', value=None, attrs={})
A:django.contrib.auth.tests.test_forms.field->ReadOnlyPasswordHashField()
django.contrib.auth.tests.test_forms.AuthenticationFormTest(TestCase)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_inactive_user(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_inactive_user_i18n(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_invalid_username(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_success(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_username_field_label(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_username_field_label_empty_string(self)
django.contrib.auth.tests.test_forms.AuthenticationFormTest.test_username_field_label_not_set(self)
django.contrib.auth.tests.test_forms.PasswordChangeFormTest(TestCase)
django.contrib.auth.tests.test_forms.PasswordChangeFormTest.test_field_order(self)
django.contrib.auth.tests.test_forms.PasswordChangeFormTest.test_incorrect_password(self)
django.contrib.auth.tests.test_forms.PasswordChangeFormTest.test_password_verification(self)
django.contrib.auth.tests.test_forms.PasswordChangeFormTest.test_success(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest(TestCase)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.create_dummy_user(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_cleaned_data(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_custom_email_subject(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_inactive_user(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_invalid_email(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_nonexistant_email(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_preserve_username_case(self)
django.contrib.auth.tests.test_forms.PasswordResetFormTest.test_unusable_password(self)
django.contrib.auth.tests.test_forms.ReadOnlyPasswordHashTest(TestCase)
django.contrib.auth.tests.test_forms.ReadOnlyPasswordHashTest.test_bug_19349_render_with_none_value(self)
django.contrib.auth.tests.test_forms.ReadOnlyPasswordHashTest.test_readonly_field_has_changed(self)
django.contrib.auth.tests.test_forms.SetPasswordFormTest(TestCase)
django.contrib.auth.tests.test_forms.SetPasswordFormTest.test_password_verification(self)
django.contrib.auth.tests.test_forms.SetPasswordFormTest.test_success(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest(TestCase)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_14242(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_17944_empty_password(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_17944_unknown_password_algorithm(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_17944_unmanageable_password(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_19133(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_bug_19349_bound_password_field(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_unsuable_password(self)
django.contrib.auth.tests.test_forms.UserChangeFormTest.test_username_validity(self)
django.contrib.auth.tests.test_forms.UserCreationFormTest(TestCase)
django.contrib.auth.tests.test_forms.UserCreationFormTest.test_both_passwords(self)
django.contrib.auth.tests.test_forms.UserCreationFormTest.test_invalid_data(self)
django.contrib.auth.tests.test_forms.UserCreationFormTest.test_password_verification(self)
django.contrib.auth.tests.test_forms.UserCreationFormTest.test_success(self)
django.contrib.auth.tests.test_forms.UserCreationFormTest.test_user_already_exists(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_handlers.py----------------------------------------
A:django.contrib.auth.tests.test_handlers.user1->django.contrib.auth.models.User.objects.create_user('test', 'test@example.com', 'test')
A:django.contrib.auth.tests.test_handlers.group->django.contrib.auth.models.Group.objects.create(name='test_group')
django.contrib.auth.tests.test_handlers.ModWsgiHandlerTestCase(TransactionTestCase)
django.contrib.auth.tests.test_handlers.ModWsgiHandlerTestCase.test_check_password(self)
django.contrib.auth.tests.test_handlers.ModWsgiHandlerTestCase.test_check_password_custom_user(self)
django.contrib.auth.tests.test_handlers.ModWsgiHandlerTestCase.test_groups_for_user(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/urls_admin.py----------------------------------------
A:django.contrib.auth.tests.urls_admin.site->django.contrib.admin.AdminSite(name='auth_test_admin')


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/urls.py----------------------------------------
A:django.contrib.auth.tests.urls.t->Template('Username is {{ user }}.')
A:django.contrib.auth.tests.urls.c->RequestContext(request, {})
A:django.contrib.auth.tests.urls.r1->render_to_response('context_processors/auth_attrs_access.html', RequestContext(request, {}, processors=[context_processors.auth]))
django.contrib.auth.tests.urls.CustomRequestAuthenticationForm(self,request,*args,**kwargs)
django.contrib.auth.tests.urls.CustomRequestAuthenticationForm.__init__(self,request,*args,**kwargs)
django.contrib.auth.tests.urls.auth_processor_attr_access(request)
django.contrib.auth.tests.urls.auth_processor_messages(request)
django.contrib.auth.tests.urls.auth_processor_no_attr_access(request)
django.contrib.auth.tests.urls.auth_processor_perm_in_perms(request)
django.contrib.auth.tests.urls.auth_processor_perms(request)
django.contrib.auth.tests.urls.auth_processor_user(request)
django.contrib.auth.tests.urls.custom_request_auth_login(request)
django.contrib.auth.tests.urls.remote_user_auth_view(request)
django.contrib.auth.tests.urls.userpage(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_context_processors.py----------------------------------------
A:django.contrib.auth.tests.test_context_processors.perms->PermWrapper(MockUser())
A:django.contrib.auth.tests.test_context_processors.pldict->PermLookupDict(MockUser(), 'mockapp')
A:django.contrib.auth.tests.test_context_processors.response->self.client.get('/auth_processor_user/')
A:django.contrib.auth.tests.test_context_processors.u->django.contrib.auth.models.User.objects.create_user(username='normal', password='secret')
A:django.contrib.auth.tests.test_context_processors.user->authenticate(username='super', password='secret')
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests(TestCase)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_message_attrs(self)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_perm_in_perms_attrs(self)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_perms_attrs(self)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_session_is_accessed(self)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_session_not_accessed(self)
django.contrib.auth.tests.test_context_processors.AuthContextProcessorTests.test_user_attrs(self)
django.contrib.auth.tests.test_context_processors.MockUser(object)
django.contrib.auth.tests.test_context_processors.MockUser.has_module_perms(self,perm)
django.contrib.auth.tests.test_context_processors.MockUser.has_perm(self,perm)
django.contrib.auth.tests.test_context_processors.PermWrapperTests(TestCase)
django.contrib.auth.tests.test_context_processors.PermWrapperTests.EQLimiterObject(self)
django.contrib.auth.tests.test_context_processors.PermWrapperTests.EQLimiterObject.__eq__(self,other)
django.contrib.auth.tests.test_context_processors.PermWrapperTests.EQLimiterObject.__init__(self)
django.contrib.auth.tests.test_context_processors.PermWrapperTests.test_permlookupdict_in(self)
django.contrib.auth.tests.test_context_processors.PermWrapperTests.test_permwrapper_in(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_management.py----------------------------------------
A:django.contrib.auth.tests.test_management.self.user->django.contrib.auth.models.User.objects.create_user(username='joe', password='qwerty')
A:django.contrib.auth.tests.test_management.self.stdout->StringIO()
A:django.contrib.auth.tests.test_management.self.stderr->StringIO()
A:django.contrib.auth.tests.test_management.command->django.contrib.auth.management.commands.changepassword.Command()
A:django.contrib.auth.tests.test_management.command_output->StringIO().getvalue().strip()
A:django.contrib.auth.tests.test_management.new_io->StringIO()
A:django.contrib.auth.tests.test_management.u->django.contrib.auth.tests.custom_user.CustomUser._default_manager.get(email='joe@somewhere.org')
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase(TestCase)
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase.setUp(self)
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase.tearDown(self)
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase.test_that_changepassword_command_changes_joes_password(self)
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase.test_that_changepassword_command_works_with_nonascii_output(self)
django.contrib.auth.tests.test_management.ChangepasswordManagementCommandTestCase.test_that_max_tries_exits_1(self)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase(TestCase)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase.test_createsuperuser(self)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase.test_email_in_username(self)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase.test_swappable_user(self)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase.test_swappable_user_missing_required_field(self)
django.contrib.auth.tests.test_management.CreatesuperuserManagementCommandTestCase.test_verbosity_zero(self)
django.contrib.auth.tests.test_management.CustomUserModelValidationTestCase(TestCase)
django.contrib.auth.tests.test_management.CustomUserModelValidationTestCase.test_required_fields_is_list(self)
django.contrib.auth.tests.test_management.CustomUserModelValidationTestCase.test_username_non_unique(self)
django.contrib.auth.tests.test_management.CustomUserModelValidationTestCase.test_username_not_in_required_fields(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase(TestCase)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.setUp(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.tearDown(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.test_actual_implementation(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.test_existing(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.test_i18n(self)
django.contrib.auth.tests.test_management.GetDefaultUsernameTestCase.test_simple(self)
django.contrib.auth.tests.test_management.PermissionDuplicationTestCase(TestCase)
django.contrib.auth.tests.test_management.PermissionDuplicationTestCase.setUp(self)
django.contrib.auth.tests.test_management.PermissionDuplicationTestCase.tearDown(self)
django.contrib.auth.tests.test_management.PermissionDuplicationTestCase.test_duplicated_permissions(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/test_hashers.py----------------------------------------
A:django.contrib.auth.tests.test_hashers.encoded->make_password('letmein')
A:django.contrib.auth.tests.test_hashers.blank_encoded->make_password('', hasher='bcrypt')
A:django.contrib.auth.tests.test_hashers.hasher->get_hasher('default')
A:django.contrib.auth.tests.test_hashers.(algo, iterations, salt, hash)->make_password('letmein').split('$', 3)
A:django.contrib.auth.tests.test_hashers.PlainHasher->type(str('PlainHasher'), (BasePasswordHasher,), {'algorithm': 'plain', 'library': 'plain'})
django.contrib.auth.tests.test_hashers.PBKDF2SingleIterationHasher(PBKDF2PasswordHasher)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass(SimpleTestCase)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.setUp(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_bad_algorithm(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_bad_encoded(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_bcrypt(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_bcrypt_sha256(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_crypt(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_load_library_importerror(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_load_library_no_algorithm(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_low_level_pbkdf2_sha1(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_low_level_pkbdf2(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_md5(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_no_upgrade(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_no_upgrade_on_incorrect_pass(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_pbkdf2_upgrade_new_hasher(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_pkbdf2(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_sha1(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_simple(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_unsalted_md5(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_unsalted_sha1(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_unspecified_password(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_unusable(self)
django.contrib.auth.tests.test_hashers.TestUtilsHashPass.test_upgrade(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/tests/custom_user.py----------------------------------------
A:django.contrib.auth.tests.custom_user.user->self.model(email=self.normalize_email(email), date_of_birth=date_of_birth)
A:django.contrib.auth.tests.custom_user.u->self.create_user(email, password=password, date_of_birth=date_of_birth)
A:django.contrib.auth.tests.custom_user.email->django.db.models.EmailField(verbose_name='email address', max_length=255, unique=True)
A:django.contrib.auth.tests.custom_user.is_active->django.db.models.BooleanField(default=True)
A:django.contrib.auth.tests.custom_user.is_admin->django.db.models.BooleanField(default=False)
A:django.contrib.auth.tests.custom_user.date_of_birth->django.db.models.DateField()
A:django.contrib.auth.tests.custom_user.custom_objects->BaseUserManager()
A:django.contrib.auth.tests.custom_user.groups->django.db.models.ManyToManyField(Group, blank=True)
A:django.contrib.auth.tests.custom_user.user_permissions->django.db.models.ManyToManyField(Permission, blank=True)
A:django.contrib.auth.tests.custom_user.username->django.db.models.CharField(max_length=30, unique=True)
django.contrib.auth.tests.custom_user.CustomPermissionsUser(AbstractBaseUser,PermissionsMixin)
django.contrib.auth.tests.custom_user.CustomPermissionsUser.Meta
django.contrib.auth.tests.custom_user.CustomPermissionsUser.__unicode__(self)
django.contrib.auth.tests.custom_user.CustomPermissionsUser.get_full_name(self)
django.contrib.auth.tests.custom_user.CustomPermissionsUser.get_short_name(self)
django.contrib.auth.tests.custom_user.CustomPermissionsUserManager(CustomUserManager)
django.contrib.auth.tests.custom_user.CustomPermissionsUserManager.create_superuser(self,email,password,date_of_birth)
django.contrib.auth.tests.custom_user.CustomUser(AbstractBaseUser)
django.contrib.auth.tests.custom_user.CustomUser.Meta
django.contrib.auth.tests.custom_user.CustomUser.__unicode__(self)
django.contrib.auth.tests.custom_user.CustomUser.get_all_permissions(self,obj=None)
django.contrib.auth.tests.custom_user.CustomUser.get_full_name(self)
django.contrib.auth.tests.custom_user.CustomUser.get_group_permissions(self,obj=None)
django.contrib.auth.tests.custom_user.CustomUser.get_short_name(self)
django.contrib.auth.tests.custom_user.CustomUser.has_module_perms(self,app_label)
django.contrib.auth.tests.custom_user.CustomUser.has_perm(self,perm,obj=None)
django.contrib.auth.tests.custom_user.CustomUser.has_perms(self,perm_list,obj=None)
django.contrib.auth.tests.custom_user.CustomUser.is_staff(self)
django.contrib.auth.tests.custom_user.CustomUserBadRequiredFields(AbstractBaseUser)
django.contrib.auth.tests.custom_user.CustomUserBadRequiredFields.Meta
django.contrib.auth.tests.custom_user.CustomUserManager(BaseUserManager)
django.contrib.auth.tests.custom_user.CustomUserManager.create_superuser(self,email,password,date_of_birth)
django.contrib.auth.tests.custom_user.CustomUserManager.create_user(self,email,date_of_birth,password=None)
django.contrib.auth.tests.custom_user.CustomUserNonListRequiredFields(AbstractBaseUser)
django.contrib.auth.tests.custom_user.CustomUserNonListRequiredFields.Meta
django.contrib.auth.tests.custom_user.CustomUserNonUniqueUsername(AbstractBaseUser)
django.contrib.auth.tests.custom_user.CustomUserNonUniqueUsername.Meta
django.contrib.auth.tests.custom_user.ExtensionUser(AbstractUser)
django.contrib.auth.tests.custom_user.ExtensionUser.Meta
django.contrib.auth.tests.custom_user.IsActiveTestUser1(AbstractBaseUser)
django.contrib.auth.tests.custom_user.IsActiveTestUser1.Meta


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/management/__init__.py----------------------------------------
A:django.contrib.auth.management.__init__.builtin->_get_builtin_permissions(opts)
A:django.contrib.auth.management.__init__.custom->list(opts.permissions)
A:django.contrib.auth.management.__init__.pool->set()
A:django.contrib.auth.management.__init__.builtin_codenames->set((p[0] for p in builtin))
A:django.contrib.auth.management.__init__.app_models->get_models(app)
A:django.contrib.auth.management.__init__.searched_perms->list()
A:django.contrib.auth.management.__init__.ctypes->set()
A:django.contrib.auth.management.__init__.ctype->django.contrib.contenttypes.models.ContentType.objects.db_manager(db).get_for_model(klass)
A:django.contrib.auth.management.__init__.all_perms->set(auth_app.Permission.objects.using(db).filter(content_type__in=ctypes).values_list('content_type', 'codename'))
A:django.contrib.auth.management.__init__.UserModel->get_user_model()
A:django.contrib.auth.management.__init__.confirm->input('Please enter either "yes" or "no": ')
A:django.contrib.auth.management.__init__.result->result.decode(DEFAULT_LOCALE_ENCODING).decode(DEFAULT_LOCALE_ENCODING)
A:django.contrib.auth.management.__init__.default_username->unicodedata.normalize('NFKD', default_username).encode('ascii', 'ignore').decode('ascii').replace(' ', '').lower()
django.contrib.auth.management.__init__._check_permission_clashing(custom,builtin,ctype)
django.contrib.auth.management.__init__._get_all_permissions(opts,ctype)
django.contrib.auth.management.__init__._get_builtin_permissions(opts)
django.contrib.auth.management.__init__.create_permissions(app,created_models,verbosity,db=DEFAULT_DB_ALIAS,**kwargs)
django.contrib.auth.management.__init__.create_superuser(app,created_models,verbosity,db,**kwargs)
django.contrib.auth.management.__init__.get_default_username(check_db=True)
django.contrib.auth.management.__init__.get_system_username()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/management/commands/changepassword.py----------------------------------------
A:django.contrib.auth.management.commands.changepassword.p->getpass.getpass(prompt=force_str(prompt))
A:django.contrib.auth.management.commands.changepassword.username->getpass.getuser()
A:django.contrib.auth.management.commands.changepassword.UserModel->get_user_model()
A:django.contrib.auth.management.commands.changepassword.u->get_user_model()._default_manager.using(options.get('database')).get(**{UserModel.USERNAME_FIELD: username})
A:django.contrib.auth.management.commands.changepassword.p1->self._get_pass()
A:django.contrib.auth.management.commands.changepassword.p2->self._get_pass('Password (again): ')
django.contrib.auth.management.commands.changepassword.Command(BaseCommand)
django.contrib.auth.management.commands.changepassword.Command._get_pass(self,prompt='Password:')
django.contrib.auth.management.commands.changepassword.Command.handle(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/management/commands/createsuperuser.py----------------------------------------
A:django.contrib.auth.management.commands.createsuperuser.self.UserModel->get_user_model()
A:django.contrib.auth.management.commands.createsuperuser.self.username_field->self.UserModel._meta.get_field(self.UserModel.USERNAME_FIELD)
A:django.contrib.auth.management.commands.createsuperuser.username->self.username_field.clean(raw_value, None)
A:django.contrib.auth.management.commands.createsuperuser.interactive->options.get('interactive')
A:django.contrib.auth.management.commands.createsuperuser.verbosity->int(options.get('verbosity', 1))
A:django.contrib.auth.management.commands.createsuperuser.database->options.get('database')
A:django.contrib.auth.management.commands.createsuperuser.field->self.UserModel._meta.get_field(field_name)
A:django.contrib.auth.management.commands.createsuperuser.user_data[field_name]->self.UserModel._meta.get_field(field_name).clean(raw_value, None)
A:django.contrib.auth.management.commands.createsuperuser.default_username->get_default_username()
A:django.contrib.auth.management.commands.createsuperuser.input_msg->capfirst(verbose_field_name)
A:django.contrib.auth.management.commands.createsuperuser.raw_value->input(force_str('%s: ' % capfirst(field.verbose_name)))
A:django.contrib.auth.management.commands.createsuperuser.password->getpass.getpass()
A:django.contrib.auth.management.commands.createsuperuser.password2->getpass.getpass(force_str('Password (again): '))
django.contrib.auth.management.commands.createsuperuser.Command(self,*args,**kwargs)
django.contrib.auth.management.commands.createsuperuser.Command.__init__(self,*args,**kwargs)
django.contrib.auth.management.commands.createsuperuser.Command.handle(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/handlers/modwsgi.py----------------------------------------
A:django.contrib.auth.handlers.modwsgi.UserModel->django.contrib.auth.get_user_model()
A:django.contrib.auth.handlers.modwsgi.user->django.contrib.auth.get_user_model()._default_manager.get_by_natural_key(username)
django.contrib.auth.handlers.modwsgi.check_password(environ,username,password)
django.contrib.auth.handlers.modwsgi.groups_for_user(environ,username)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/auth/handlers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/storage.py----------------------------------------
A:django.contrib.staticfiles.storage.self.cache->get_cache('staticfiles')
A:django.contrib.staticfiles.storage.self._patterns->SortedDict()
A:django.contrib.staticfiles.storage.compiled->re.compile(pattern, re.IGNORECASE)
A:django.contrib.staticfiles.storage.md5->hashlib.md5()
A:django.contrib.staticfiles.storage.parsed_name->urlsplit(unquote(name))
A:django.contrib.staticfiles.storage.clean_name->urlsplit(unquote(name)).path.strip()
A:django.contrib.staticfiles.storage.content->pattern.sub(converter, content)
A:django.contrib.staticfiles.storage.file_hash->self.file_hash(clean_name, content)
A:django.contrib.staticfiles.storage.(path, filename)->os.path.split(clean_name)
A:django.contrib.staticfiles.storage.(root, ext)->os.path.splitext(filename)
A:django.contrib.staticfiles.storage.hashed_name->force_text(saved_name.replace('\\', '/'))
A:django.contrib.staticfiles.storage.unparsed_name->list(parsed_name)
A:django.contrib.staticfiles.storage.(clean_name, fragment)->urldefrag(name)
A:django.contrib.staticfiles.storage.cache_key->self.cache_key(name)
A:django.contrib.staticfiles.storage.final_url->urlunsplit(urlparts)
A:django.contrib.staticfiles.storage.urlparts->list(urlsplit(final_url))
A:django.contrib.staticfiles.storage.(matched, url)->matchobj.groups()
A:django.contrib.staticfiles.storage.name_parts->name.split(os.sep)
A:django.contrib.staticfiles.storage.url->posixpath.normpath(url)
A:django.contrib.staticfiles.storage.url_parts->posixpath.normpath(url).split('/')
A:django.contrib.staticfiles.storage.joined_result->'/'.join(name_parts[:-start] + url_parts[end:])
A:django.contrib.staticfiles.storage.hashed_url->self.url(unquote(joined_result), force=True)
A:django.contrib.staticfiles.storage.relative_url->'/'.join(url.split('/')[:-1] + file_name)
A:django.contrib.staticfiles.storage.hashed_file_exists->self.exists(hashed_name)
A:django.contrib.staticfiles.storage.converter->self.url_converter(name, template)
A:django.contrib.staticfiles.storage.content_file->ContentFile(force_bytes(content))
A:django.contrib.staticfiles.storage.saved_name->self._save(hashed_name, original_file)
A:django.contrib.staticfiles.storage.mod->import_module(app)
A:django.contrib.staticfiles.storage.mod_path->os.path.dirname(upath(mod.__file__))
A:django.contrib.staticfiles.storage.location->os.path.join(mod_path, self.source_dir)
A:django.contrib.staticfiles.storage.self._wrapped->get_storage_class(settings.STATICFILES_STORAGE)()
A:django.contrib.staticfiles.storage.staticfiles_storage->ConfiguredStorage()
django.contrib.staticfiles.storage.AppStaticStorage(self,app,*args,**kwargs)
django.contrib.staticfiles.storage.AppStaticStorage.__init__(self,app,*args,**kwargs)
django.contrib.staticfiles.storage.CachedFilesMixin(self,*args,**kwargs)
django.contrib.staticfiles.storage.CachedFilesMixin.__init__(self,*args,**kwargs)
django.contrib.staticfiles.storage.CachedFilesMixin.cache_key(self,name)
django.contrib.staticfiles.storage.CachedFilesMixin.file_hash(self,name,content=None)
django.contrib.staticfiles.storage.CachedFilesMixin.hashed_name(self,name,content=None)
django.contrib.staticfiles.storage.CachedFilesMixin.post_process(self,paths,dry_run=False,**options)
django.contrib.staticfiles.storage.CachedFilesMixin.url(self,name,force=False)
django.contrib.staticfiles.storage.CachedFilesMixin.url_converter(self,name,template=None)
django.contrib.staticfiles.storage.CachedStaticFilesStorage(CachedFilesMixin,StaticFilesStorage)
django.contrib.staticfiles.storage.ConfiguredStorage(LazyObject)
django.contrib.staticfiles.storage.ConfiguredStorage._setup(self)
django.contrib.staticfiles.storage.StaticFilesStorage(self,location=None,base_url=None,*args,**kwargs)
django.contrib.staticfiles.storage.StaticFilesStorage.__init__(self,location=None,base_url=None,*args,**kwargs)
django.contrib.staticfiles.storage.StaticFilesStorage.path(self,name)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/finders.py----------------------------------------
A:django.contrib.staticfiles.finders._finders->SortedDict()
A:django.contrib.staticfiles.finders.self.storages->SortedDict()
A:django.contrib.staticfiles.finders.filesystem_storage->FileSystemStorage(location=root)
A:django.contrib.staticfiles.finders.matched_path->self.storages.get(app, None).path(path)
A:django.contrib.staticfiles.finders.path->safe_join(root, path)
A:django.contrib.staticfiles.finders.app_storage->self.storage_class(app)
A:django.contrib.staticfiles.finders.match->self.storage.path(path)
A:django.contrib.staticfiles.finders.storage->self.storages.get(app, None)
A:django.contrib.staticfiles.finders.self.storage->self.storage()
A:django.contrib.staticfiles.finders.base_location->getattr(self.storage, 'base_location', empty)
A:django.contrib.staticfiles.finders.result->finder.find(path, all=all)
A:django.contrib.staticfiles.finders.Finder->import_by_path(import_path)
A:django.contrib.staticfiles.finders.get_finder->memoize(_get_finder, _finders, 1)
django.contrib.staticfiles.finders.AppDirectoriesFinder(self,apps=None,*args,**kwargs)
django.contrib.staticfiles.finders.AppDirectoriesFinder.__init__(self,apps=None,*args,**kwargs)
django.contrib.staticfiles.finders.AppDirectoriesFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.AppDirectoriesFinder.find_in_app(self,app,path)
django.contrib.staticfiles.finders.AppDirectoriesFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.BaseFinder(object)
django.contrib.staticfiles.finders.BaseFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.BaseFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.BaseStorageFinder(self,storage=None,*args,**kwargs)
django.contrib.staticfiles.finders.BaseStorageFinder.__init__(self,storage=None,*args,**kwargs)
django.contrib.staticfiles.finders.BaseStorageFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.BaseStorageFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.DefaultStorageFinder(self,*args,**kwargs)
django.contrib.staticfiles.finders.DefaultStorageFinder.__init__(self,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder(self,apps=None,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder.__init__(self,apps=None,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.FileSystemFinder.find_location(self,root,path,prefix=None)
django.contrib.staticfiles.finders.FileSystemFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders._get_finder(import_path)
django.contrib.staticfiles.finders.find(path,all=False)
django.contrib.staticfiles.finders.get_finders()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/utils.py----------------------------------------
A:django.contrib.staticfiles.utils.(directories, files)->storage.listdir(location)
A:django.contrib.staticfiles.utils.fn->os.path.join(location, fn)
A:django.contrib.staticfiles.utils.dir->os.path.join(location, dir)
django.contrib.staticfiles.utils.check_settings(base_url=None)
django.contrib.staticfiles.utils.get_files(storage,ignore_patterns=None,location='')
django.contrib.staticfiles.utils.matches_patterns(path,patterns=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/views.py----------------------------------------
A:django.contrib.staticfiles.views.normalized_path->posixpath.normpath(unquote(path)).lstrip('/')
A:django.contrib.staticfiles.views.absolute_path->django.contrib.staticfiles.finders.find(normalized_path)
A:django.contrib.staticfiles.views.(document_root, path)->os.path.split(absolute_path)
django.contrib.staticfiles.views.serve(request,path,insecure=False,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/handlers.py----------------------------------------
A:django.contrib.staticfiles.handlers.self.base_dir->self.get_base_dir()
A:django.contrib.staticfiles.handlers.self.base_url->urlparse(self.get_base_url())
django.contrib.staticfiles.handlers.StaticFilesHandler(self,application,base_dir=None)
django.contrib.staticfiles.handlers.StaticFilesHandler.__init__(self,application,base_dir=None)
django.contrib.staticfiles.handlers.StaticFilesHandler._should_handle(self,path)
django.contrib.staticfiles.handlers.StaticFilesHandler.file_path(self,url)
django.contrib.staticfiles.handlers.StaticFilesHandler.get_base_dir(self)
django.contrib.staticfiles.handlers.StaticFilesHandler.get_base_url(self)
django.contrib.staticfiles.handlers.StaticFilesHandler.get_response(self,request)
django.contrib.staticfiles.handlers.StaticFilesHandler.serve(self,request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/urls.py----------------------------------------
django.contrib.staticfiles.urls.staticfiles_urlpatterns(prefix=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/management/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/management/commands/runserver.py----------------------------------------
A:django.contrib.staticfiles.management.commands.runserver.handler->super(Command, self).get_handler(*args, **options)
A:django.contrib.staticfiles.management.commands.runserver.use_static_handler->options.get('use_static_handler', True)
A:django.contrib.staticfiles.management.commands.runserver.insecure_serving->options.get('insecure_serving', False)
django.contrib.staticfiles.management.commands.runserver.Command(RunserverCommand)
django.contrib.staticfiles.management.commands.runserver.Command.get_handler(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/management/commands/findstatic.py----------------------------------------
A:django.contrib.staticfiles.management.commands.findstatic.verbosity->int(options.get('verbosity', 1))
A:django.contrib.staticfiles.management.commands.findstatic.result->django.contrib.staticfiles.finders.find(path, all=options['all'])
A:django.contrib.staticfiles.management.commands.findstatic.path->force_text(path)
A:django.contrib.staticfiles.management.commands.findstatic.output->'\n  '.join(result)
django.contrib.staticfiles.management.commands.findstatic.Command(LabelCommand)
django.contrib.staticfiles.management.commands.findstatic.Command.handle_label(self,path,**options)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/management/commands/collectstatic.py----------------------------------------
A:django.contrib.staticfiles.management.commands.collectstatic.self.verbosity->int(options.get('verbosity', 1))
A:django.contrib.staticfiles.management.commands.collectstatic.self.ignore_patterns->list(set(ignore_patterns))
A:django.contrib.staticfiles.management.commands.collectstatic.found_files->SortedDict()
A:django.contrib.staticfiles.management.commands.collectstatic.prefixed_path->os.path.join(storage.prefix, path)
A:django.contrib.staticfiles.management.commands.collectstatic.processor->self.storage.post_process(found_files, dry_run=self.dry_run)
A:django.contrib.staticfiles.management.commands.collectstatic.collected->self.collect()
A:django.contrib.staticfiles.management.commands.collectstatic.modified_count->len(collected['modified'])
A:django.contrib.staticfiles.management.commands.collectstatic.unmodified_count->len(collected['unmodified'])
A:django.contrib.staticfiles.management.commands.collectstatic.post_processed_count->len(collected['post_processed'])
A:django.contrib.staticfiles.management.commands.collectstatic.(dirs, files)->self.storage.listdir(path)
A:django.contrib.staticfiles.management.commands.collectstatic.fpath->os.path.join(path, f)
A:django.contrib.staticfiles.management.commands.collectstatic.target_last_modified->self.storage.modified_time(prefixed_path)
A:django.contrib.staticfiles.management.commands.collectstatic.source_last_modified->source_storage.modified_time(path)
A:django.contrib.staticfiles.management.commands.collectstatic.full_path->self.storage.path(prefixed_path)
A:django.contrib.staticfiles.management.commands.collectstatic.source_path->source_storage.path(path)
django.contrib.staticfiles.management.commands.collectstatic.Command(self,*args,**kwargs)
django.contrib.staticfiles.management.commands.collectstatic.Command.__init__(self,*args,**kwargs)
django.contrib.staticfiles.management.commands.collectstatic.Command.clear_dir(self,path)
django.contrib.staticfiles.management.commands.collectstatic.Command.collect(self)
django.contrib.staticfiles.management.commands.collectstatic.Command.copy_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.delete_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.handle_noargs(self,**options)
django.contrib.staticfiles.management.commands.collectstatic.Command.is_local_storage(self)
django.contrib.staticfiles.management.commands.collectstatic.Command.link_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.log(self,msg,level=2)
django.contrib.staticfiles.management.commands.collectstatic.Command.set_options(self,**options)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/templatetags/staticfiles.py----------------------------------------
A:django.contrib.staticfiles.templatetags.staticfiles.register->django.template.Library()
A:django.contrib.staticfiles.templatetags.staticfiles.path->self.path.resolve(context)
django.contrib.staticfiles.templatetags.staticfiles.StaticFilesNode(StaticNode)
django.contrib.staticfiles.templatetags.staticfiles.StaticFilesNode.url(self,context)
django.contrib.staticfiles.templatetags.staticfiles.do_static(parser,token)
django.contrib.staticfiles.templatetags.staticfiles.static(path)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/staticfiles/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/admin.py----------------------------------------
django.contrib.flatpages.admin.FlatPageAdmin(admin.ModelAdmin)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/middleware.py----------------------------------------
django.contrib.flatpages.middleware.FlatpageFallbackMiddleware(object)
django.contrib.flatpages.middleware.FlatpageFallbackMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/views.py----------------------------------------
A:django.contrib.flatpages.views.f->get_object_or_404(FlatPage, url__exact=url, sites__id__exact=site_id)
A:django.contrib.flatpages.views.t->django.template.loader.get_template(DEFAULT_TEMPLATE)
A:django.contrib.flatpages.views.f.title->mark_safe(f.title)
A:django.contrib.flatpages.views.f.content->mark_safe(f.content)
A:django.contrib.flatpages.views.c->RequestContext(request, {'flatpage': f})
A:django.contrib.flatpages.views.response->HttpResponse(t.render(c))
django.contrib.flatpages.views.flatpage(request,url)
django.contrib.flatpages.views.render_flatpage(request,f)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/models.py----------------------------------------
A:django.contrib.flatpages.models.url->django.db.models.CharField(_('URL'), max_length=100, db_index=True)
A:django.contrib.flatpages.models.title->django.db.models.CharField(_('title'), max_length=200)
A:django.contrib.flatpages.models.content->django.db.models.TextField(_('content'), blank=True)
A:django.contrib.flatpages.models.enable_comments->django.db.models.BooleanField(_('enable comments'), default=False)
A:django.contrib.flatpages.models.template_name->django.db.models.CharField(_('template name'), max_length=70, blank=True, help_text=_("Example: 'flatpages/contact_page.html'. If this isn't provided, the system will use 'flatpages/default.html'."))
A:django.contrib.flatpages.models.registration_required->django.db.models.BooleanField(_('registration required'), help_text=_('If this is checked, only logged-in users will be able to view the page.'), default=False)
A:django.contrib.flatpages.models.sites->django.db.models.ManyToManyField(Site)
A:django.contrib.flatpages.models.verbose_name->_('flat page')
A:django.contrib.flatpages.models.verbose_name_plural->_('flat pages')
django.contrib.flatpages.models.FlatPage(models.Model)
django.contrib.flatpages.models.FlatPage.Meta
django.contrib.flatpages.models.FlatPage.__str__(self)
django.contrib.flatpages.models.FlatPage.get_absolute_url(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/urls.py----------------------------------------
A:django.contrib.flatpages.urls.urlpatterns->patterns('django.contrib.flatpages.views', ('^(?P<url>.*)$', 'flatpage'))


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/forms.py----------------------------------------
A:django.contrib.flatpages.forms.url->self.cleaned_data.get('url', None)
A:django.contrib.flatpages.forms.sites->self.cleaned_data.get('sites', None)
A:django.contrib.flatpages.forms.same_url->same_url.exclude(pk=self.instance.pk).exclude(pk=self.instance.pk)
django.contrib.flatpages.forms.FlatpageForm(forms.ModelForm)
django.contrib.flatpages.forms.FlatpageForm.Meta
django.contrib.flatpages.forms.FlatpageForm.clean(self)
django.contrib.flatpages.forms.FlatpageForm.clean_url(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_csrf.py----------------------------------------
A:django.contrib.flatpages.tests.test_csrf.self.client->Client(enforce_csrf_checks=True)
A:django.contrib.flatpages.tests.test_csrf.response->self.client.post('/no_such_page/')
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests(TestCase)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.setUp(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_fallback_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_fallback_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_post_fallback_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_post_unknown_page(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_post_view_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_view_authenticated_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_view_flatpage(self)
django.contrib.flatpages.tests.test_csrf.FlatpageCSRFTests.test_view_non_existent_flatpage(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_views.py----------------------------------------
A:django.contrib.flatpages.tests.test_views.response->self.client.get('/flatpage_root/some.very_special~chars-here')
A:django.contrib.flatpages.tests.test_views.fp->django.contrib.flatpages.models.FlatPage.objects.create(url='/some.very_special~chars-here/', title='A very special page', content="Isn't it special!", enable_comments=False, registration_required=False)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests(TestCase)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests.test_redirect_fallback_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests.test_redirect_fallback_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests.test_redirect_view_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests.test_redirect_view_flatpage_special_chars(self)
django.contrib.flatpages.tests.test_views.FlatpageViewAppendSlashTests.test_redirect_view_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests(TestCase)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_fallback_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_fallback_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_view_authenticated_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_view_flatpage(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_view_flatpage_special_chars(self)
django.contrib.flatpages.tests.test_views.FlatpageViewTests.test_view_non_existent_flatpage(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_templatetags.py----------------------------------------
A:django.contrib.flatpages.tests.test_templatetags.out->Template('{% load flatpages %}{% get_flatpages location_prefix as location_flatpages %}{% for page in location_flatpages %}{{ page.title }},{% endfor %}').render(Context({'location_prefix': '/location/'}))
A:django.contrib.flatpages.tests.test_templatetags.me->django.contrib.auth.models.User.objects.create_user('testuser', 'test@example.com', 's3krit')
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests(TestCase)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_tag(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_tag_for_anon_user(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_tag_for_user(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_with_prefix(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_with_prefix_for_anon_user(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_with_prefix_for_user(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_get_flatpages_with_variable_prefix(self)
django.contrib.flatpages.tests.test_templatetags.FlatpageTemplateTagTests.test_parsing_errors(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_models.py----------------------------------------
A:django.contrib.flatpages.tests.test_models.pf->FlatPage(title='Tea!', url='/tea/')
django.contrib.flatpages.tests.test_models.FlatpageModelTests(TestCase)
django.contrib.flatpages.tests.test_models.FlatpageModelTests.test_get_absolute_url_honors_script_prefix(self)
django.contrib.flatpages.tests.test_models.FlatpageModelTests.test_get_absolute_url_urlencodes(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_forms.py----------------------------------------
A:django.contrib.flatpages.tests.test_forms.form->FlatpageForm(data=dict(url='/no_trailing_slash', **self.form_data))
A:django.contrib.flatpages.tests.test_forms.data->dict(url='/myflatpage1/', **self.form_data)
A:django.contrib.flatpages.tests.test_forms.f->FlatpageForm(data=data)
A:django.contrib.flatpages.tests.test_forms.existing->django.contrib.flatpages.models.FlatPage.objects.create(url='/myflatpage1/', title='Some page', content='The content')
A:django.contrib.flatpages.tests.test_forms.updated->FlatpageForm(data=data).save()
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests(TestCase)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.setUp(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_admin_form_edit(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_admin_form_url_uniqueness_validation(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_admin_form_url_validation(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_doesnt_requires_trailing_slash_without_append_slash(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_nosites(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_requires_leading_slash(self)
django.contrib.flatpages.tests.test_forms.FlatpageAdminFormTests.test_flatpage_requires_trailing_slash_with_append_slash(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/test_middleware.py----------------------------------------
A:django.contrib.flatpages.tests.test_middleware.response->self.client.get('/')
A:django.contrib.flatpages.tests.test_middleware.fp->django.contrib.flatpages.models.FlatPage.objects.create(url='/', title='Root', content='Root', enable_comments=False, registration_required=False)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests(TestCase)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_fallback_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_fallback_flatpage_root(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_fallback_flatpage_special_chars(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_fallback_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_view_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareAppendSlashTests.test_redirect_view_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests(TestCase)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_fallback_authenticated_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_fallback_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_fallback_flatpage_special_chars(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_fallback_non_existent_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_view_authenticated_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_view_flatpage(self)
django.contrib.flatpages.tests.test_middleware.FlatpageMiddlewareTests.test_view_non_existent_flatpage(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/tests/urls.py----------------------------------------
A:django.contrib.flatpages.tests.urls.urlpatterns->patterns('', ('^flatpage_root', include('django.contrib.flatpages.urls')), ('^accounts/', include('django.contrib.auth.urls')))


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/flatpages/templatetags/flatpages.py----------------------------------------
A:django.contrib.flatpages.templatetags.flatpages.register->django.template.Library()
A:django.contrib.flatpages.templatetags.flatpages.self.starts_with->django.template.Variable(starts_with)
A:django.contrib.flatpages.templatetags.flatpages.self.user->django.template.Variable(user)
A:django.contrib.flatpages.templatetags.flatpages.flatpages->flatpages.filter(registration_required=False).filter(registration_required=False)
A:django.contrib.flatpages.templatetags.flatpages.user->self.user.resolve(context)
A:django.contrib.flatpages.templatetags.flatpages.bits->token.split_contents()
django.contrib.flatpages.templatetags.flatpages.FlatpageNode(self,context_name,starts_with=None,user=None)
django.contrib.flatpages.templatetags.flatpages.FlatpageNode.__init__(self,context_name,starts_with=None,user=None)
django.contrib.flatpages.templatetags.flatpages.FlatpageNode.render(self,context)
django.contrib.flatpages.templatetags.flatpages.get_flatpages(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/util.py----------------------------------------
A:django.contrib.admin.util.value->getattr(obj, name)
A:django.contrib.admin.util.res->list(s)
A:django.contrib.admin.util.list->s.split('_')
A:django.contrib.admin.util.collector->NestedObjects(using=using)
A:django.contrib.admin.util.perms_needed->set()
A:django.contrib.admin.util.admin_url->reverse('%s:%s_%s_change' % (admin_site.name, opts.app_label, opts.model_name), None, (quote(obj._get_pk_val()),))
A:django.contrib.admin.util.to_delete->NestedObjects(using=using).nested(format_callback)
A:django.contrib.admin.util.self.protected->set()
A:django.contrib.admin.util.qs->super(NestedObjects, self).related_objects(related, objs)
A:django.contrib.admin.util.seen->set()
A:django.contrib.admin.util.n->obj.count()
A:django.contrib.admin.util.d->model_format_dict(obj)
A:django.contrib.admin.util.f->opts.get_field(name)
A:django.contrib.admin.util.attr->getattr(model, name)
A:django.contrib.admin.util.label->pretty_name(name)
A:django.contrib.admin.util.field_data->model._meta.get_field_by_name(name)
A:django.contrib.admin.util.pieces->path.split(LOOKUP_SEP)
A:django.contrib.admin.util.(field, model, direct, m2m)->get_model_from_relation(fields[-1])._meta.get_field_by_name(piece)
A:django.contrib.admin.util.related_name->field.related_query_name()
A:django.contrib.admin.util.parent->get_model_from_relation(fields[-1])
A:django.contrib.admin.util.fields->remove_trailing_data_field(fields)
django.contrib.admin.util.NestedObjects(self,*args,**kwargs)
django.contrib.admin.util.NestedObjects.__init__(self,*args,**kwargs)
django.contrib.admin.util.NestedObjects._nested(self,obj,seen,format_callback)
django.contrib.admin.util.NestedObjects.add_edge(self,source,target)
django.contrib.admin.util.NestedObjects.can_fast_delete(self,*args,**kwargs)
django.contrib.admin.util.NestedObjects.collect(self,objs,source_attr=None,**kwargs)
django.contrib.admin.util.NestedObjects.nested(self,format_callback=None)
django.contrib.admin.util.NestedObjects.related_objects(self,related,objs)
django.contrib.admin.util.NotRelationField(Exception)
django.contrib.admin.util.display_for_field(value,field)
django.contrib.admin.util.display_for_value(value,boolean=False)
django.contrib.admin.util.flatten_fieldsets(fieldsets)
django.contrib.admin.util.get_deleted_objects(objs,opts,user,admin_site,using)
django.contrib.admin.util.get_fields_from_path(model,path)
django.contrib.admin.util.get_limit_choices_to_from_path(model,path)
django.contrib.admin.util.get_model_from_relation(field)
django.contrib.admin.util.help_text_for_field(name,model)
django.contrib.admin.util.label_for_field(name,model,model_admin=None,return_attr=False)
django.contrib.admin.util.lookup_field(name,obj,model_admin=None)
django.contrib.admin.util.lookup_needs_distinct(opts,lookup_path)
django.contrib.admin.util.model_format_dict(obj)
django.contrib.admin.util.model_ngettext(obj,n=None)
django.contrib.admin.util.prepare_lookup_value(key,value)
django.contrib.admin.util.quote(s)
django.contrib.admin.util.remove_trailing_data_field(fields)
django.contrib.admin.util.reverse_field_path(model,path)
django.contrib.admin.util.unquote(s)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/sites.py----------------------------------------
A:django.contrib.admin.sites.self._global_actions->self._actions.copy()
A:django.contrib.admin.sites.admin_class->type('%sAdmin' % model.__name__, (admin_class,), options)
A:django.contrib.admin.sites.self._registry[model]->admin_class(model, self)
A:django.contrib.admin.sites.index_path->reverse('admin:index', current_app=self.name)
A:django.contrib.admin.sites.inner->csrf_protect(inner)
A:django.contrib.admin.sites.urlpatterns->patterns('', url('^$', wrap(self.index), name='index'), url('^logout/$', wrap(self.logout), name='logout'), url('^password_change/$', wrap(self.password_change, cacheable=True), name='password_change'), url('^password_change/done/$', wrap(self.password_change_done, cacheable=True), name='password_change_done'), url('^jsi18n/$', wrap(self.i18n_javascript, cacheable=True), name='jsi18n'), url('^r/(?P<content_type_id>\\d+)/(?P<object_id>.+)/$', wrap(contenttype_views.shortcut), name='view_on_site'), url('^(?P<app_label>\\w+)/$', wrap(self.app_index), name='app_list'))
A:django.contrib.admin.sites.url->reverse('admin:password_change_done', current_app=self.name)
A:django.contrib.admin.sites.has_module_perms->user.has_module_perms(app_label)
A:django.contrib.admin.sites.perms->model_admin.get_model_perms(request)
A:django.contrib.admin.sites.model_dict['admin_url']->reverse('admin:%s_%s_changelist' % info, current_app=self.name)
A:django.contrib.admin.sites.model_dict['add_url']->reverse('admin:%s_%s_add' % info, current_app=self.name)
A:django.contrib.admin.sites.app_list->list(six.itervalues(app_dict))
A:django.contrib.admin.sites.site->AdminSite()
django.contrib.admin.AdminSite(self,name='admin',app_name='admin')
django.contrib.admin.AdminSite.actions(self)
django.contrib.admin.AdminSite.add_action(self,action,name=None)
django.contrib.admin.AdminSite.admin_view(self,view,cacheable=False)
django.contrib.admin.AdminSite.app_index(self,request,app_label,extra_context=None)
django.contrib.admin.AdminSite.check_dependencies(self)
django.contrib.admin.AdminSite.disable_action(self,name)
django.contrib.admin.AdminSite.get_action(self,name)
django.contrib.admin.AdminSite.get_urls(self)
django.contrib.admin.AdminSite.has_permission(self,request)
django.contrib.admin.AdminSite.i18n_javascript(self,request)
django.contrib.admin.AdminSite.index(self,request,extra_context=None)
django.contrib.admin.AdminSite.login(self,request,extra_context=None)
django.contrib.admin.AdminSite.logout(self,request,extra_context=None)
django.contrib.admin.AdminSite.password_change(self,request)
django.contrib.admin.AdminSite.password_change_done(self,request,extra_context=None)
django.contrib.admin.AdminSite.register(self,model_or_iterable,admin_class=None,**options)
django.contrib.admin.AdminSite.unregister(self,model_or_iterable)
django.contrib.admin.AdminSite.urls(self)
django.contrib.admin.sites.AdminSite(self,name='admin',app_name='admin')
django.contrib.admin.sites.AdminSite.__init__(self,name='admin',app_name='admin')
django.contrib.admin.sites.AdminSite.actions(self)
django.contrib.admin.sites.AdminSite.add_action(self,action,name=None)
django.contrib.admin.sites.AdminSite.admin_view(self,view,cacheable=False)
django.contrib.admin.sites.AdminSite.app_index(self,request,app_label,extra_context=None)
django.contrib.admin.sites.AdminSite.check_dependencies(self)
django.contrib.admin.sites.AdminSite.disable_action(self,name)
django.contrib.admin.sites.AdminSite.get_action(self,name)
django.contrib.admin.sites.AdminSite.get_urls(self)
django.contrib.admin.sites.AdminSite.has_permission(self,request)
django.contrib.admin.sites.AdminSite.i18n_javascript(self,request)
django.contrib.admin.sites.AdminSite.index(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.login(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.logout(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.password_change(self,request)
django.contrib.admin.sites.AdminSite.password_change_done(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.register(self,model_or_iterable,admin_class=None,**options)
django.contrib.admin.sites.AdminSite.unregister(self,model_or_iterable)
django.contrib.admin.sites.AdminSite.urls(self)
django.contrib.admin.sites.AlreadyRegistered(Exception)
django.contrib.admin.sites.NotRegistered(Exception)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/tests.py----------------------------------------
A:django.contrib.admin.tests.cls.selenium->import_by_path(cls.webdriver_class)()
A:django.contrib.admin.tests.username_input->self.selenium.find_element_by_name('username')
A:django.contrib.admin.tests.password_input->self.selenium.find_element_by_name('password')
A:django.contrib.admin.tests.login_text->_('Log in')
A:django.contrib.admin.tests.options->self.selenium.find_elements_by_css_selector('%s > option' % selector)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase(LiveServerTestCase)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase._tearDownClassInternal(cls)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.admin_login(self,username,password,login_url='/admin/')
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.assertSelectOptions(self,selector,values)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.get_css_value(self,selector,attribute)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.get_select_option(self,selector,value)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.has_css_class(self,selector,klass)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.setUpClass(cls)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.wait_loaded_tag(self,tag_name,timeout=10)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.wait_page_loaded(self)
django.contrib.admin.tests.AdminSeleniumWebDriverTestCase.wait_until(self,callback,timeout=10)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/validation.py----------------------------------------
A:django.contrib.admin.validation.f->get_field(cls, model, 'fk_name', cls.fk_name)
A:django.contrib.admin.validation.flattened_fieldsets->flatten_fieldsets(cls.fieldsets)
A:django.contrib.admin.validation.fk->_get_foreign_key(parent_model, cls.model, fk_name=cls.fk_name, can_fail=True)
A:django.contrib.admin.validation.list_select_related->getattr(cls, 'list_select_related', None)
django.contrib.admin.validation.BaseValidator(self)
django.contrib.admin.validation.BaseValidator.__init__(self)
django.contrib.admin.validation.BaseValidator.check_field_spec(self,cls,model,flds,label)
django.contrib.admin.validation.BaseValidator.validate(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_exclude(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_fields(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_fieldsets(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_filter_horizontal(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_filter_vertical(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_form(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_ordering(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_prepopulated_fields(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_radio_fields(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_raw_id_fields(self,cls,model)
django.contrib.admin.validation.BaseValidator.validate_readonly_fields(self,cls,model)
django.contrib.admin.validation.InlineValidator(BaseValidator)
django.contrib.admin.validation.InlineValidator.validate_extra(self,cls,model)
django.contrib.admin.validation.InlineValidator.validate_fk_name(self,cls,model)
django.contrib.admin.validation.InlineValidator.validate_formset(self,cls,model)
django.contrib.admin.validation.InlineValidator.validate_max_num(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator(BaseValidator)
django.contrib.admin.validation.ModelAdminValidator.check_inline(self,cls,parent_model)
django.contrib.admin.validation.ModelAdminValidator.validate_date_hierarchy(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_inlines(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_display(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_display_links(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_editable(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_filter(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_max_show_all(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_per_page(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_list_select_related(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_save_as(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_save_on_top(self,cls,model)
django.contrib.admin.validation.ModelAdminValidator.validate_search_fields(self,cls,model)
django.contrib.admin.validation.check_isdict(cls,label,obj)
django.contrib.admin.validation.check_isseq(cls,label,obj)
django.contrib.admin.validation.check_type(cls,attr,type_)
django.contrib.admin.validation.fetch_attr(cls,model,label,field)
django.contrib.admin.validation.get_field(cls,model,label,field)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/options.py----------------------------------------
A:django.contrib.admin.options.csrf_protect_m->method_decorator(csrf_protect)
A:django.contrib.admin.options.validator->cls.validator_class()
A:django.contrib.admin.options.overrides->FORMFIELD_FOR_DBFIELD_DEFAULTS.copy()
A:django.contrib.admin.options.request->dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs).pop('request', None)
A:django.contrib.admin.options.kwargs->dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs)
A:django.contrib.admin.options.formfield->self.formfield_for_manytomany(db_field, request, **kwargs)
A:django.contrib.admin.options.related_modeladmin->self.admin_site._registry.get(db_field.rel.to)
A:django.contrib.admin.options.can_add_related->bool(related_modeladmin and related_modeladmin.has_add_permission(request))
A:django.contrib.admin.options.formfield.widget->django.contrib.admin.widgets.RelatedFieldWidgetWrapper(formfield.widget, db_field.rel, self.admin_site, can_add_related=can_add_related)
A:django.contrib.admin.options.kwargs['widget']->django.contrib.admin.widgets.FilteredSelectMultiple(db_field.verbose_name, db_field.name in self.filter_vertical)
A:django.contrib.admin.options.kwargs['choices']->db_field.get_choices(include_blank=db_field.blank, blank_choice=[('', _('None'))])
A:django.contrib.admin.options.related_admin->self.admin_site._registry.get(db_field.rel.to, None)
A:django.contrib.admin.options.ordering->self.get_ordering(request)
A:django.contrib.admin.options.db->dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs).get('using')
A:django.contrib.admin.options.queryset->queryset.none().none()
A:django.contrib.admin.options.declared_fieldsets->property(_declared_fieldsets)
A:django.contrib.admin.options.qs->qs.order_by(*ordering).order_by(*ordering)
A:django.contrib.admin.options.parts->lookup.split(LOOKUP_SEP)
A:django.contrib.admin.options.(field, _, _, _)->model._meta.get_field_by_name(part)
A:django.contrib.admin.options.clean_lookup->django.db.models.constants.LOOKUP_SEP.join(parts)
A:django.contrib.admin.options.field->opts.get_field(to_field)
A:django.contrib.admin.options.codename->get_permission_codename('change', opts)
A:django.contrib.admin.options.inline->inline_class(self.model, self.admin_site)
A:django.contrib.admin.options.urlpatterns->patterns('', url('^$', wrap(self.changelist_view), name='%s_%s_changelist' % info), url('^add/$', wrap(self.add_view), name='%s_%s_add' % info), url('^(.+)/history/$', wrap(self.history_view), name='%s_%s_history' % info), url('^(.+)/delete/$', wrap(self.delete_view), name='%s_%s_delete' % info), url('^(.+)/$', wrap(self.change_view), name='%s_%s_change' % info))
A:django.contrib.admin.options.urls->property(urls)
A:django.contrib.admin.options.form->ModelForm(instance=obj)
A:django.contrib.admin.options.fields->flatten_fieldsets(self.get_fieldsets(request, obj))
A:django.contrib.admin.options.exclude->list(self.exclude)
A:django.contrib.admin.options.object_id->model._meta.pk.to_python(object_id)
A:django.contrib.admin.options.action_checkbox.short_description->mark_safe('<input type="checkbox" id="action-toggle" />')
A:django.contrib.admin.options.description->capfirst(action.replace('_', ' '))
A:django.contrib.admin.options.class_actions->getattr(klass, 'actions', [])
A:django.contrib.admin.options.actions->self.get_actions(request)
A:django.contrib.admin.options.func->self.admin_site.get_action(action)
A:django.contrib.admin.options.preserved_filters->self.get_preserved_filters(request)
A:django.contrib.admin.options.change_message->self.construct_change_message(request, form, formsets)
A:django.contrib.admin.options.level->getattr(messages.constants, level.upper())
A:django.contrib.admin.options.levels->django.contrib.messages.constants.DEFAULT_TAGS.values()
A:django.contrib.admin.options.levels_repr->', '.join(('`%s`' % l for l in levels))
A:django.contrib.admin.options.form_url->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, form_url)
A:django.contrib.admin.options.pk_value->get_object_or_404(model, pk=unquote(object_id))._get_pk_val()
A:django.contrib.admin.options.post_url_continue->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url_continue)
A:django.contrib.admin.options.redirect_url->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)
A:django.contrib.admin.options.post_url->reverse('admin:index', current_app=self.admin_site.name)
A:django.contrib.admin.options.action_index->int(request.POST.get('index', 0))
A:django.contrib.admin.options.data->dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs).pop('request', None).POST.copy()
A:django.contrib.admin.options.action_form->self.action_form(auto_id=None)
A:django.contrib.admin.options.action_form.fields['action'].choices->self.get_action_choices(request)
A:django.contrib.admin.options.selected->dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs).pop('request', None).POST.getlist(helpers.ACTION_CHECKBOX_NAME)
A:django.contrib.admin.options.msg->_('Deleting %(class_name)s %(instance)s would require deleting the following protected related objects: %(related_objects)s')
A:django.contrib.admin.options.response->self.response_action(request, queryset=cl.get_queryset(request))
A:django.contrib.admin.options.ModelForm->self.get_form(request, obj)
A:django.contrib.admin.options.inline_instances->self.get_inline_instances(request, obj)
A:django.contrib.admin.options.new_object->self.save_form(request, form, change=True)
A:django.contrib.admin.options.prefix->self.get_changelist_formset(request).get_default_prefix()
A:django.contrib.admin.options.formset->FormSet(instance=obj, prefix=prefix, queryset=inline.get_queryset(request))
A:django.contrib.admin.options.initial->dict(request.GET.items())
A:django.contrib.admin.options.f->opts.get_field(k)
A:django.contrib.admin.options.initial[k]->initial[k].split(',').split(',')
A:django.contrib.admin.options.adminForm->django.contrib.admin.helpers.AdminForm(form, self.get_fieldsets(request, obj), self.get_prepopulated_fields(request, obj), self.get_readonly_fields(request, obj), model_admin=self)
A:django.contrib.admin.options.fieldsets->list(inline.get_fieldsets(request, obj))
A:django.contrib.admin.options.readonly->list(inline.get_readonly_fields(request, obj))
A:django.contrib.admin.options.prepopulated->dict(inline.get_prepopulated_fields(request, obj))
A:django.contrib.admin.options.inline_admin_formset->django.contrib.admin.helpers.InlineAdminFormSet(inline, formset, fieldsets, prepopulated, readonly, model_admin=self)
A:django.contrib.admin.options.obj->get_object_or_404(model, pk=unquote(object_id))
A:django.contrib.admin.options.list_display->self.get_list_display(request)
A:django.contrib.admin.options.list_display_links->self.get_list_display_links(request, list_display)
A:django.contrib.admin.options.list_filter->self.get_list_filter(request)
A:django.contrib.admin.options.ChangeList->self.get_changelist(request)
A:django.contrib.admin.options.cl->ChangeList(request, self.model, list_display, list_display_links, list_filter, self.date_hierarchy, self.search_fields, self.list_select_related, self.list_per_page, self.list_max_show_all, self.list_editable, self)
A:django.contrib.admin.options.FormSet->self.get_changelist_formset(request)
A:django.contrib.admin.options.formsetcl.formset->FormSet(queryset=cl.result_list)
A:django.contrib.admin.options.change_msg->self.construct_change_message(request, form, None)
A:django.contrib.admin.options.name->force_text(opts.verbose_name_plural)
A:django.contrib.admin.options.selection_note_all->ungettext('%(total_count)s selected', 'All %(total_count)s selected', cl.result_count)
A:django.contrib.admin.options.using->django.db.router.db_for_write(self._meta.model)
A:django.contrib.admin.options.(deleted_objects, perms_needed, protected)->get_deleted_objects([obj], opts, request.user, self.admin_site, using)
A:django.contrib.admin.options.obj_display->force_text(obj)
A:django.contrib.admin.options.object_name->force_text(opts.verbose_name)
A:django.contrib.admin.options.title->_('Are you sure?')
A:django.contrib.admin.options.action_list->django.contrib.admin.models.LogEntry.objects.filter(object_id=unquote(object_id), content_type__id__exact=ContentType.objects.get_for_model(model).id).select_related().order_by('action_time')
A:django.contrib.admin.options.collector->NestedObjects(using=using)
A:django.contrib.admin.options.result->super(DeleteProtectedModelForm, self).is_valid()
django.contrib.admin.ModelAdmin(self,model,admin_site)
django.contrib.admin.ModelAdmin.action_checkbox(self,obj)
django.contrib.admin.ModelAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.admin.ModelAdmin.change_view(self,request,object_id,form_url='',extra_context=None)
django.contrib.admin.ModelAdmin.changelist_view(self,request,extra_context=None)
django.contrib.admin.ModelAdmin.construct_change_message(self,request,form,formsets)
django.contrib.admin.ModelAdmin.delete_model(self,request,obj)
django.contrib.admin.ModelAdmin.delete_view(self,request,object_id,extra_context=None)
django.contrib.admin.ModelAdmin.get_action(self,action)
django.contrib.admin.ModelAdmin.get_action_choices(self,request,default_choices=BLANK_CHOICE_DASH)
django.contrib.admin.ModelAdmin.get_actions(self,request)
django.contrib.admin.ModelAdmin.get_changelist(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_changelist_form(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_changelist_formset(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_fieldsets(self,request,obj=None)
django.contrib.admin.ModelAdmin.get_form(self,request,obj=None,**kwargs)
django.contrib.admin.ModelAdmin.get_formsets(self,request,obj=None)
django.contrib.admin.ModelAdmin.get_inline_instances(self,request,obj=None)
django.contrib.admin.ModelAdmin.get_list_display(self,request)
django.contrib.admin.ModelAdmin.get_list_display_links(self,request,list_display)
django.contrib.admin.ModelAdmin.get_list_filter(self,request)
django.contrib.admin.ModelAdmin.get_model_perms(self,request)
django.contrib.admin.ModelAdmin.get_object(self,request,object_id)
django.contrib.admin.ModelAdmin.get_paginator(self,request,queryset,per_page,orphans=0,allow_empty_first_page=True)
django.contrib.admin.ModelAdmin.get_preserved_filters(self,request)
django.contrib.admin.ModelAdmin.get_search_results(self,request,queryset,search_term)
django.contrib.admin.ModelAdmin.get_urls(self)
django.contrib.admin.ModelAdmin.history_view(self,request,object_id,extra_context=None)
django.contrib.admin.ModelAdmin.log_addition(self,request,object)
django.contrib.admin.ModelAdmin.log_change(self,request,object,message)
django.contrib.admin.ModelAdmin.log_deletion(self,request,object,object_repr)
django.contrib.admin.ModelAdmin.media(self)
django.contrib.admin.ModelAdmin.message_user(self,request,message,level=messages.INFO,extra_tags='',fail_silently=False)
django.contrib.admin.ModelAdmin.render_change_form(self,request,context,add=False,change=False,form_url='',obj=None)
django.contrib.admin.ModelAdmin.response_action(self,request,queryset)
django.contrib.admin.ModelAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.admin.ModelAdmin.response_change(self,request,obj)
django.contrib.admin.ModelAdmin.response_post_save_add(self,request,obj)
django.contrib.admin.ModelAdmin.response_post_save_change(self,request,obj)
django.contrib.admin.ModelAdmin.save_form(self,request,form,change)
django.contrib.admin.ModelAdmin.save_formset(self,request,form,formset,change)
django.contrib.admin.ModelAdmin.save_model(self,request,obj,form,change)
django.contrib.admin.ModelAdmin.save_related(self,request,form,formsets,change)
django.contrib.admin.ModelAdmin.urls(self)
django.contrib.admin.StackedInline(InlineModelAdmin)
django.contrib.admin.TabularInline(InlineModelAdmin)
django.contrib.admin.options.BaseModelAdmin(self)
django.contrib.admin.options.BaseModelAdmin.__init__(self)
django.contrib.admin.options.BaseModelAdmin._declared_fieldsets(self)
django.contrib.admin.options.BaseModelAdmin.formfield_for_choice_field(self,db_field,request=None,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_dbfield(self,db_field,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_foreignkey(self,db_field,request=None,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_manytomany(self,db_field,request=None,**kwargs)
django.contrib.admin.options.BaseModelAdmin.get_field_queryset(self,db,db_field,request)
django.contrib.admin.options.BaseModelAdmin.get_ordering(self,request)
django.contrib.admin.options.BaseModelAdmin.get_prepopulated_fields(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_queryset(self,request)
django.contrib.admin.options.BaseModelAdmin.get_readonly_fields(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_add_permission(self,request)
django.contrib.admin.options.BaseModelAdmin.has_change_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_delete_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.lookup_allowed(self,lookup,value)
django.contrib.admin.options.BaseModelAdmin.to_field_allowed(self,request,to_field)
django.contrib.admin.options.BaseModelAdmin.validate(cls,model)
django.contrib.admin.options.IncorrectLookupParameters(Exception)
django.contrib.admin.options.InlineModelAdmin(self,parent_model,admin_site)
django.contrib.admin.options.InlineModelAdmin.__init__(self,parent_model,admin_site)
django.contrib.admin.options.InlineModelAdmin.get_extra(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_fieldsets(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.get_formset(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_max_num(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_queryset(self,request)
django.contrib.admin.options.InlineModelAdmin.has_add_permission(self,request)
django.contrib.admin.options.InlineModelAdmin.has_change_permission(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.has_delete_permission(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.media(self)
django.contrib.admin.options.ModelAdmin(self,model,admin_site)
django.contrib.admin.options.ModelAdmin.__init__(self,model,admin_site)
django.contrib.admin.options.ModelAdmin.action_checkbox(self,obj)
django.contrib.admin.options.ModelAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.admin.options.ModelAdmin.change_view(self,request,object_id,form_url='',extra_context=None)
django.contrib.admin.options.ModelAdmin.changelist_view(self,request,extra_context=None)
django.contrib.admin.options.ModelAdmin.construct_change_message(self,request,form,formsets)
django.contrib.admin.options.ModelAdmin.delete_model(self,request,obj)
django.contrib.admin.options.ModelAdmin.delete_view(self,request,object_id,extra_context=None)
django.contrib.admin.options.ModelAdmin.get_action(self,action)
django.contrib.admin.options.ModelAdmin.get_action_choices(self,request,default_choices=BLANK_CHOICE_DASH)
django.contrib.admin.options.ModelAdmin.get_actions(self,request)
django.contrib.admin.options.ModelAdmin.get_changelist(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_changelist_form(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_changelist_formset(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_fieldsets(self,request,obj=None)
django.contrib.admin.options.ModelAdmin.get_form(self,request,obj=None,**kwargs)
django.contrib.admin.options.ModelAdmin.get_formsets(self,request,obj=None)
django.contrib.admin.options.ModelAdmin.get_inline_instances(self,request,obj=None)
django.contrib.admin.options.ModelAdmin.get_list_display(self,request)
django.contrib.admin.options.ModelAdmin.get_list_display_links(self,request,list_display)
django.contrib.admin.options.ModelAdmin.get_list_filter(self,request)
django.contrib.admin.options.ModelAdmin.get_model_perms(self,request)
django.contrib.admin.options.ModelAdmin.get_object(self,request,object_id)
django.contrib.admin.options.ModelAdmin.get_paginator(self,request,queryset,per_page,orphans=0,allow_empty_first_page=True)
django.contrib.admin.options.ModelAdmin.get_preserved_filters(self,request)
django.contrib.admin.options.ModelAdmin.get_search_results(self,request,queryset,search_term)
django.contrib.admin.options.ModelAdmin.get_urls(self)
django.contrib.admin.options.ModelAdmin.history_view(self,request,object_id,extra_context=None)
django.contrib.admin.options.ModelAdmin.log_addition(self,request,object)
django.contrib.admin.options.ModelAdmin.log_change(self,request,object,message)
django.contrib.admin.options.ModelAdmin.log_deletion(self,request,object,object_repr)
django.contrib.admin.options.ModelAdmin.media(self)
django.contrib.admin.options.ModelAdmin.message_user(self,request,message,level=messages.INFO,extra_tags='',fail_silently=False)
django.contrib.admin.options.ModelAdmin.render_change_form(self,request,context,add=False,change=False,form_url='',obj=None)
django.contrib.admin.options.ModelAdmin.response_action(self,request,queryset)
django.contrib.admin.options.ModelAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.admin.options.ModelAdmin.response_change(self,request,obj)
django.contrib.admin.options.ModelAdmin.response_post_save_add(self,request,obj)
django.contrib.admin.options.ModelAdmin.response_post_save_change(self,request,obj)
django.contrib.admin.options.ModelAdmin.save_form(self,request,form,change)
django.contrib.admin.options.ModelAdmin.save_formset(self,request,form,formset,change)
django.contrib.admin.options.ModelAdmin.save_model(self,request,obj,form,change)
django.contrib.admin.options.ModelAdmin.save_related(self,request,form,formsets,change)
django.contrib.admin.options.ModelAdmin.urls(self)
django.contrib.admin.options.RenameBaseModelAdminMethods(forms.MediaDefiningClass,RenameMethodsBase)
django.contrib.admin.options.StackedInline(InlineModelAdmin)
django.contrib.admin.options.TabularInline(InlineModelAdmin)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/widgets.py----------------------------------------
A:django.contrib.admin.widgets.v->django.utils.six.text_type(v)
A:django.contrib.admin.widgets.related_url->reverse('admin:%s_%s_add' % info, current_app=self.admin_site.name)
A:django.contrib.admin.widgets.params->self.base_url_parameters()
A:django.contrib.admin.widgets.obj->copy.copy(self)
A:django.contrib.admin.widgets.value->force_text(self._format_value(value))
A:django.contrib.admin.widgets.obj.widget->copy.deepcopy(self.widget, memo)
A:django.contrib.admin.widgets.self.attrs->self.widget.build_attrs(extra_attrs=None, **kwargs)
A:django.contrib.admin.widgets.html->format_html('<p class="url">{0} <a{1}>{2}</a><br />{3} {4}</p>', _('Currently:'), flatatt(final_attrs), value, _('Change:'), html)
django.contrib.admin.widgets.AdminBigIntegerFieldWidget(AdminIntegerFieldWidget)
django.contrib.admin.widgets.AdminCommaSeparatedIntegerFieldWidget(self,attrs=None)
django.contrib.admin.widgets.AdminCommaSeparatedIntegerFieldWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminDateWidget(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminDateWidget.__init__(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminDateWidget.media(self)
django.contrib.admin.widgets.AdminEmailInputWidget(self,attrs=None)
django.contrib.admin.widgets.AdminEmailInputWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminFileWidget(forms.ClearableFileInput)
django.contrib.admin.widgets.AdminIntegerFieldWidget(self,attrs=None)
django.contrib.admin.widgets.AdminIntegerFieldWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminRadioFieldRenderer(RadioFieldRenderer)
django.contrib.admin.widgets.AdminRadioFieldRenderer.render(self)
django.contrib.admin.widgets.AdminRadioSelect(forms.RadioSelect)
django.contrib.admin.widgets.AdminSplitDateTime(self,attrs=None)
django.contrib.admin.widgets.AdminSplitDateTime.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminSplitDateTime.format_output(self,rendered_widgets)
django.contrib.admin.widgets.AdminTextInputWidget(self,attrs=None)
django.contrib.admin.widgets.AdminTextInputWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminTextareaWidget(self,attrs=None)
django.contrib.admin.widgets.AdminTextareaWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminTimeWidget(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminTimeWidget.__init__(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminTimeWidget.media(self)
django.contrib.admin.widgets.AdminURLFieldWidget(self,attrs=None)
django.contrib.admin.widgets.AdminURLFieldWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminURLFieldWidget.render(self,name,value,attrs=None)
django.contrib.admin.widgets.FilteredSelectMultiple(self,verbose_name,is_stacked,attrs=None,choices=())
django.contrib.admin.widgets.FilteredSelectMultiple.__init__(self,verbose_name,is_stacked,attrs=None,choices=())
django.contrib.admin.widgets.FilteredSelectMultiple.media(self)
django.contrib.admin.widgets.FilteredSelectMultiple.render(self,name,value,attrs=None,choices=())
django.contrib.admin.widgets.ForeignKeyRawIdWidget(self,rel,admin_site,attrs=None,using=None)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.__init__(self,rel,admin_site,attrs=None,using=None)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.base_url_parameters(self)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.label_for_value(self,value)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.render(self,name,value,attrs=None)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.url_parameters(self)
django.contrib.admin.widgets.ManyToManyRawIdWidget(ForeignKeyRawIdWidget)
django.contrib.admin.widgets.ManyToManyRawIdWidget.label_for_value(self,value)
django.contrib.admin.widgets.ManyToManyRawIdWidget.render(self,name,value,attrs=None)
django.contrib.admin.widgets.ManyToManyRawIdWidget.url_parameters(self)
django.contrib.admin.widgets.ManyToManyRawIdWidget.value_from_datadict(self,data,files,name)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper(self,widget,rel,admin_site,can_add_related=None)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.__deepcopy__(self,memo)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.__init__(self,widget,rel,admin_site,can_add_related=None)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.build_attrs(self,extra_attrs=None,**kwargs)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.id_for_label(self,id_)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.media(self)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.render(self,name,value,*args,**kwargs)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.value_from_datadict(self,data,files,name)
django.contrib.admin.widgets.url_params_from_lookup_dict(lookups)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/exceptions.py----------------------------------------
django.contrib.admin.exceptions.DisallowedModelAdminLookup(SuspiciousOperation)
django.contrib.admin.exceptions.DisallowedModelAdminToField(SuspiciousOperation)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/helpers.py----------------------------------------
A:django.contrib.admin.helpers.action->django.forms.ChoiceField(label=_('Action:'))
A:django.contrib.admin.helpers.select_across->django.forms.BooleanField(label='', required=False, initial=0, widget=forms.HiddenInput({'class': 'select-across'}))
A:django.contrib.admin.helpers.checkbox->django.forms.CheckboxInput({'class': 'action-select'}, lambda value: False)
A:django.contrib.admin.helpers.media->property(_media)
A:django.contrib.admin.helpers.self.classes->' '.join(classes)
A:django.contrib.admin.helpers.self.is_checkbox->isinstance(self.field.field.widget, forms.CheckboxInput)
A:django.contrib.admin.helpers.contents->conditional_escape(force_text(self.field.label))
A:django.contrib.admin.helpers.label->label_for_field(field, form._meta.model, model_admin)
A:django.contrib.admin.helpers.(f, attr, value)->lookup_field(field, obj, model_admin)
A:django.contrib.admin.helpers.boolean->getattr(attr, 'boolean', False)
A:django.contrib.admin.helpers.result_repr->display_for_field(value, f)
A:django.contrib.admin.helpers.fk->getattr(self.formset, 'fk', None)
django.contrib.admin.helpers.ActionForm(forms.Form)
django.contrib.admin.helpers.AdminErrorList(self,form,inline_formsets)
django.contrib.admin.helpers.AdminErrorList.__init__(self,form,inline_formsets)
django.contrib.admin.helpers.AdminField(self,form,field,is_first)
django.contrib.admin.helpers.AdminField.__init__(self,form,field,is_first)
django.contrib.admin.helpers.AdminField.errors(self)
django.contrib.admin.helpers.AdminField.label_tag(self)
django.contrib.admin.helpers.AdminForm(self,form,fieldsets,prepopulated_fields,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.AdminForm.__init__(self,form,fieldsets,prepopulated_fields,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.AdminForm.__iter__(self)
django.contrib.admin.helpers.AdminForm._media(self)
django.contrib.admin.helpers.AdminForm.first_field(self)
django.contrib.admin.helpers.AdminReadonlyField(self,form,field,is_first,model_admin=None)
django.contrib.admin.helpers.AdminReadonlyField.__init__(self,form,field,is_first,model_admin=None)
django.contrib.admin.helpers.AdminReadonlyField.contents(self)
django.contrib.admin.helpers.AdminReadonlyField.label_tag(self)
django.contrib.admin.helpers.Fieldline(self,form,field,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.Fieldline.__init__(self,form,field,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.Fieldline.__iter__(self)
django.contrib.admin.helpers.Fieldline.errors(self)
django.contrib.admin.helpers.Fieldset(self,form,name=None,readonly_fields=(),fields=(),classes=(),description=None,model_admin=None)
django.contrib.admin.helpers.Fieldset.__init__(self,form,name=None,readonly_fields=(),fields=(),classes=(),description=None,model_admin=None)
django.contrib.admin.helpers.Fieldset.__iter__(self)
django.contrib.admin.helpers.Fieldset._media(self)
django.contrib.admin.helpers.InlineAdminForm(self,formset,form,fieldsets,prepopulated_fields,original,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.InlineAdminForm.__init__(self,formset,form,fieldsets,prepopulated_fields,original,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.InlineAdminForm.__iter__(self)
django.contrib.admin.helpers.InlineAdminForm.deletion_field(self)
django.contrib.admin.helpers.InlineAdminForm.field_count(self)
django.contrib.admin.helpers.InlineAdminForm.fk_field(self)
django.contrib.admin.helpers.InlineAdminForm.needs_explicit_pk_field(self)
django.contrib.admin.helpers.InlineAdminForm.ordering_field(self)
django.contrib.admin.helpers.InlineAdminForm.pk_field(self)
django.contrib.admin.helpers.InlineAdminFormSet(self,inline,formset,fieldsets,prepopulated_fields=None,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.InlineAdminFormSet.__init__(self,inline,formset,fieldsets,prepopulated_fields=None,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.InlineAdminFormSet.__iter__(self)
django.contrib.admin.helpers.InlineAdminFormSet._media(self)
django.contrib.admin.helpers.InlineAdminFormSet.fields(self)
django.contrib.admin.helpers.InlineFieldset(self,formset,*args,**kwargs)
django.contrib.admin.helpers.InlineFieldset.__init__(self,formset,*args,**kwargs)
django.contrib.admin.helpers.InlineFieldset.__iter__(self)
django.contrib.admin.helpers.normalize_dictionary(data_dict)
django.contrib.admin.helpers.normalize_fieldsets(fieldsets)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/__init__.py----------------------------------------
A:django.contrib.admin.__init__.mod->import_module(app)
A:django.contrib.admin.__init__.before_import_registry->copy.copy(site._registry)
django.contrib.admin.__init__.autodiscover()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/filters.py----------------------------------------
A:django.contrib.admin.filters.lookup_choices->self.lookups(request, model_admin)
A:django.contrib.admin.filters.self.lookup_choices->queryset.filter(limit_choices_to).distinct().order_by(field.name).values_list(field.name, flat=True)
A:django.contrib.admin.filters.value->params.pop(p)
A:django.contrib.admin.filters.self.title->getattr(field, 'verbose_name', field_path)
A:django.contrib.admin.filters.self.used_parameters[p]->prepare_lookup_value(p, value)
A:django.contrib.admin.filters.other_model->get_model_from_relation(field)
A:django.contrib.admin.filters.self.lookup_val->request.GET.get(self.lookup_kwarg, None)
A:django.contrib.admin.filters.self.lookup_val_isnull->request.GET.get(self.lookup_kwarg_isnull, None)
A:django.contrib.admin.filters.self.lookup_val2->request.GET.get(self.lookup_kwarg2, None)
A:django.contrib.admin.filters.self.date_params->dict([(k, v) for (k, v) in params.items() if k.startswith(self.field_generic)])
A:django.contrib.admin.filters.now->django.utils.timezone.localtime(now)
A:django.contrib.admin.filters.today->django.utils.timezone.localtime(now).date()
A:django.contrib.admin.filters.next_month->django.utils.timezone.localtime(now).date().replace(month=today.month + 1, day=1)
A:django.contrib.admin.filters.next_year->django.utils.timezone.localtime(now).date().replace(year=today.year + 1, month=1, day=1)
A:django.contrib.admin.filters.(parent_model, reverse_path)->reverse_field_path(model, field_path)
A:django.contrib.admin.filters.queryset->queryset.filter(limit_choices_to).filter(limit_choices_to)
A:django.contrib.admin.filters.limit_choices_to->get_limit_choices_to_from_path(model, field_path)
A:django.contrib.admin.filters.val->smart_text(val)
django.contrib.admin.AllValuesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.AllValuesFieldListFilter.choices(self,cl)
django.contrib.admin.AllValuesFieldListFilter.expected_parameters(self)
django.contrib.admin.BooleanFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.BooleanFieldListFilter.choices(self,cl)
django.contrib.admin.BooleanFieldListFilter.expected_parameters(self)
django.contrib.admin.ChoicesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.ChoicesFieldListFilter.choices(self,cl)
django.contrib.admin.ChoicesFieldListFilter.expected_parameters(self)
django.contrib.admin.DateFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.DateFieldListFilter.choices(self,cl)
django.contrib.admin.DateFieldListFilter.expected_parameters(self)
django.contrib.admin.FieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.FieldListFilter.create(cls,field,request,params,model,model_admin,field_path)
django.contrib.admin.FieldListFilter.has_output(self)
django.contrib.admin.FieldListFilter.queryset(self,request,queryset)
django.contrib.admin.FieldListFilter.register(cls,test,list_filter_class,take_priority=False)
django.contrib.admin.ListFilter(self,request,params,model,model_admin)
django.contrib.admin.ListFilter.choices(self,cl)
django.contrib.admin.ListFilter.expected_parameters(self)
django.contrib.admin.ListFilter.has_output(self)
django.contrib.admin.ListFilter.queryset(self,request,queryset)
django.contrib.admin.RelatedFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.RelatedFieldListFilter.choices(self,cl)
django.contrib.admin.RelatedFieldListFilter.expected_parameters(self)
django.contrib.admin.RelatedFieldListFilter.has_output(self)
django.contrib.admin.SimpleListFilter(self,request,params,model,model_admin)
django.contrib.admin.SimpleListFilter.choices(self,cl)
django.contrib.admin.SimpleListFilter.expected_parameters(self)
django.contrib.admin.SimpleListFilter.has_output(self)
django.contrib.admin.SimpleListFilter.lookups(self,request,model_admin)
django.contrib.admin.SimpleListFilter.value(self)
django.contrib.admin.filters.AllValuesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.AllValuesFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.AllValuesFieldListFilter.choices(self,cl)
django.contrib.admin.filters.AllValuesFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.BooleanFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.BooleanFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.BooleanFieldListFilter.choices(self,cl)
django.contrib.admin.filters.BooleanFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.ChoicesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.ChoicesFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.ChoicesFieldListFilter.choices(self,cl)
django.contrib.admin.filters.ChoicesFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.DateFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.DateFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.DateFieldListFilter.choices(self,cl)
django.contrib.admin.filters.DateFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.FieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.create(cls,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.has_output(self)
django.contrib.admin.filters.FieldListFilter.queryset(self,request,queryset)
django.contrib.admin.filters.FieldListFilter.register(cls,test,list_filter_class,take_priority=False)
django.contrib.admin.filters.ListFilter(self,request,params,model,model_admin)
django.contrib.admin.filters.ListFilter.__init__(self,request,params,model,model_admin)
django.contrib.admin.filters.ListFilter.choices(self,cl)
django.contrib.admin.filters.ListFilter.expected_parameters(self)
django.contrib.admin.filters.ListFilter.has_output(self)
django.contrib.admin.filters.ListFilter.queryset(self,request,queryset)
django.contrib.admin.filters.RelatedFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.RelatedFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.RelatedFieldListFilter.choices(self,cl)
django.contrib.admin.filters.RelatedFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.RelatedFieldListFilter.has_output(self)
django.contrib.admin.filters.SimpleListFilter(self,request,params,model,model_admin)
django.contrib.admin.filters.SimpleListFilter.__init__(self,request,params,model,model_admin)
django.contrib.admin.filters.SimpleListFilter.choices(self,cl)
django.contrib.admin.filters.SimpleListFilter.expected_parameters(self)
django.contrib.admin.filters.SimpleListFilter.has_output(self)
django.contrib.admin.filters.SimpleListFilter.lookups(self,request,model_admin)
django.contrib.admin.filters.SimpleListFilter.value(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/models.py----------------------------------------
A:django.contrib.admin.models.e->self.model(None, None, user_id, content_type_id, smart_text(object_id), object_repr[:200], action_flag, change_message)
A:django.contrib.admin.models.action_time->django.db.models.DateTimeField(_('action time'), auto_now=True)
A:django.contrib.admin.models.user->django.db.models.ForeignKey(settings.AUTH_USER_MODEL)
A:django.contrib.admin.models.content_type->django.db.models.ForeignKey(ContentType, blank=True, null=True)
A:django.contrib.admin.models.object_id->django.db.models.TextField(_('object id'), blank=True, null=True)
A:django.contrib.admin.models.object_repr->django.db.models.CharField(_('object repr'), max_length=200)
A:django.contrib.admin.models.action_flag->django.db.models.PositiveSmallIntegerField(_('action flag'))
A:django.contrib.admin.models.change_message->django.db.models.TextField(_('change message'), blank=True)
A:django.contrib.admin.models.objects->LogEntryManager()
A:django.contrib.admin.models.verbose_name->_('log entry')
A:django.contrib.admin.models.verbose_name_plural->_('log entries')
django.contrib.admin.models.LogEntry(models.Model)
django.contrib.admin.models.LogEntry.Meta
django.contrib.admin.models.LogEntry.__repr__(self)
django.contrib.admin.models.LogEntry.__str__(self)
django.contrib.admin.models.LogEntry.get_admin_url(self)
django.contrib.admin.models.LogEntry.get_edited_object(self)
django.contrib.admin.models.LogEntry.is_addition(self)
django.contrib.admin.models.LogEntry.is_change(self)
django.contrib.admin.models.LogEntry.is_deletion(self)
django.contrib.admin.models.LogEntryManager(models.Manager)
django.contrib.admin.models.LogEntryManager.log_action(self,user_id,content_type_id,object_id,object_repr,action_flag,change_message='')


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/actions.py----------------------------------------
A:django.contrib.admin.actions.using->django.db.router.db_for_write(modeladmin.model)
A:django.contrib.admin.actions.(deletable_objects, perms_needed, protected)->get_deleted_objects(queryset, opts, request.user, modeladmin.admin_site, using)
A:django.contrib.admin.actions.n->queryset.count()
A:django.contrib.admin.actions.obj_display->force_text(obj)
A:django.contrib.admin.actions.objects_name->force_text(opts.verbose_name_plural)
A:django.contrib.admin.actions.title->_('Are you sure?')
A:django.contrib.admin.actions.delete_selected.short_description->ugettext_lazy('Delete selected %(verbose_name_plural)s')
django.contrib.admin.actions.delete_selected(modeladmin,request,queryset)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/forms.py----------------------------------------
A:django.contrib.admin.forms.ERROR_MESSAGE->ugettext_lazy('Please enter the correct %(username)s and password for a staff account. Note that both fields may be case-sensitive.')
A:django.contrib.admin.forms.this_is_the_login_form->django.forms.BooleanField(widget=forms.HiddenInput, initial=1, error_messages={'required': ugettext_lazy('Please log in again, because your session has expired.')})
A:django.contrib.admin.forms.username->self.cleaned_data.get('username')
A:django.contrib.admin.forms.password->self.cleaned_data.get('password')
A:django.contrib.admin.forms.self.user_cache->authenticate(username=username, password=password)
django.contrib.admin.forms.AdminAuthenticationForm(AuthenticationForm)
django.contrib.admin.forms.AdminAuthenticationForm.clean(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/views/main.py----------------------------------------
A:django.contrib.admin.views.main.EMPTY_CHANGELIST_VALUE->ugettext_lazy('(None)')
A:django.contrib.admin.views.main.self.root_queryset->model_admin.get_queryset(request)
A:django.contrib.admin.views.main.self.preserved_filters->model_admin.get_preserved_filters(request)
A:django.contrib.admin.views.main.self.page_num->int(request.GET.get(PAGE_VAR, 0))
A:django.contrib.admin.views.main.self.is_popup->_is_changelist_popup(request)
A:django.contrib.admin.views.main.to_field->request.GET.get(TO_FIELD_VAR)
A:django.contrib.admin.views.main.self.params->dict(request.GET.items())
A:django.contrib.admin.views.main.self.query->request.GET.get(SEARCH_VAR, '')
A:django.contrib.admin.views.main.self.queryset->self.get_queryset(request)
A:django.contrib.admin.views.main.title->ugettext('Select %s to change')
A:django.contrib.admin.views.main.lookup_params->self.get_filters_params()
A:django.contrib.admin.views.main.spec->field_list_filter_class(field, request, lookup_params, self.model, self.model_admin, field_path=field_path)
A:django.contrib.admin.views.main.lookup_params[key]->prepare_lookup_value(key, value)
A:django.contrib.admin.views.main.p->self.params.copy()
A:django.contrib.admin.views.main.paginator->self.model_admin.get_paginator(request, self.queryset, self.list_per_page)
A:django.contrib.admin.views.main.full_result_count->self.root_queryset.count()
A:django.contrib.admin.views.main.result_list->self.queryset._clone()
A:django.contrib.admin.views.main.field->self.lookup_opts.get_field(field_name)
A:django.contrib.admin.views.main.attr->getattr(self.model, field_name)
A:django.contrib.admin.views.main.ordering->self.get_ordering(request, qs)
A:django.contrib.admin.views.main.order_params->params[ORDER_VAR].split('.')
A:django.contrib.admin.views.main.(none, pfx, idx)->self.params.copy().rpartition('-')
A:django.contrib.admin.views.main.order_field->self.get_ordering_field(field_name)
A:django.contrib.admin.views.main.ordering_fields->SortedDict()
A:django.contrib.admin.views.main.idx->int(idx)
A:django.contrib.admin.views.main.(self.filter_specs, self.has_filters, remaining_lookup_params, filters_use_distinct)->self.get_filters(request)
A:django.contrib.admin.views.main.new_qs->filter_spec.queryset(request, qs)
A:django.contrib.admin.views.main.qs->qs.order_by(*ordering).order_by(*ordering)
A:django.contrib.admin.views.main.(qs, search_use_distinct)->self.model_admin.get_search_results(request, qs, self.query)
A:django.contrib.admin.views.main.pk->getattr(result, self.pk_attname)
django.contrib.admin.views.main.ChangeList(self,request,model,list_display,list_display_links,list_filter,date_hierarchy,search_fields,list_select_related,list_per_page,list_max_show_all,list_editable,model_admin)
django.contrib.admin.views.main.ChangeList.__init__(self,request,model,list_display,list_display_links,list_filter,date_hierarchy,search_fields,list_select_related,list_per_page,list_max_show_all,list_editable,model_admin)
django.contrib.admin.views.main.ChangeList._get_default_ordering(self)
django.contrib.admin.views.main.ChangeList.apply_select_related(self,qs)
django.contrib.admin.views.main.ChangeList.get_filters(self,request)
django.contrib.admin.views.main.ChangeList.get_filters_params(self,params=None)
django.contrib.admin.views.main.ChangeList.get_ordering(self,request,queryset)
django.contrib.admin.views.main.ChangeList.get_ordering_field(self,field_name)
django.contrib.admin.views.main.ChangeList.get_ordering_field_columns(self)
django.contrib.admin.views.main.ChangeList.get_query_string(self,new_params=None,remove=None)
django.contrib.admin.views.main.ChangeList.get_queryset(self,request)
django.contrib.admin.views.main.ChangeList.get_results(self,request)
django.contrib.admin.views.main.ChangeList.has_related_field_in_list_display(self)
django.contrib.admin.views.main.ChangeList.query_set(self)
django.contrib.admin.views.main.ChangeList.root_query_set(self)
django.contrib.admin.views.main.ChangeList.url_for_result(self,result)
django.contrib.admin.views.main.RenameChangeListMethods(RenameMethodsBase)
django.contrib.admin.views.main._is_changelist_popup(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/views/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/views/decorators.py----------------------------------------
django.contrib.admin.views.decorators.staff_member_required(view_func)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/bin/compress.py----------------------------------------
A:django.contrib.admin.bin.compress.js_path->os.path.join(os.path.dirname(os.path.dirname(__file__)), 'static', 'admin', 'js')
A:django.contrib.admin.bin.compress.parser->optparse.OptionParser(usage, description=description)
A:django.contrib.admin.bin.compress.(options, args)->optparse.OptionParser(usage, description=description).parse_args()
A:django.contrib.admin.bin.compress.compiler->os.path.expanduser(options.compiler)
A:django.contrib.admin.bin.compress.to_compress->os.path.expanduser(arg)
django.contrib.admin.bin.compress.main()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/admin_static.py----------------------------------------
A:django.contrib.admin.templatetags.admin_static.register->Library()
A:django.contrib.admin.templatetags.admin_static.static->Library().simple_tag(static)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/admin_modify.py----------------------------------------
A:django.contrib.admin.templatetags.admin_modify.register->django.template.Library()
django.contrib.admin.templatetags.admin_modify.cell_count(inline_admin_form)
django.contrib.admin.templatetags.admin_modify.prepopulated_fields_js(context)
django.contrib.admin.templatetags.admin_modify.submit_row(context)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/admin_list.py----------------------------------------
A:django.contrib.admin.templatetags.admin_list.register->Library()
A:django.contrib.admin.templatetags.admin_list.page_range->range(paginator.num_pages)
A:django.contrib.admin.templatetags.admin_list.ordering_field_columns->cl.get_ordering_field_columns()
A:django.contrib.admin.templatetags.admin_list.(text, attr)->label_for_field(field_name, cl.model, model_admin=cl.model_admin, return_attr=True)
A:django.contrib.admin.templatetags.admin_list.admin_order_field->getattr(attr, 'admin_order_field', None)
A:django.contrib.admin.templatetags.admin_list.order_type->cl.get_ordering_field_columns().get(i).lower()
A:django.contrib.admin.templatetags.admin_list.param->make_qs_param(ot, j)
A:django.contrib.admin.templatetags.admin_list.icon_url->static('admin/img/icon-%s.gif' % {True: 'yes', False: 'no', None: 'unknown'}[field_val])
A:django.contrib.admin.templatetags.admin_list.(f, attr, value)->lookup_field(field_name, result, cl.model_admin)
A:django.contrib.admin.templatetags.admin_list.row_class->mark_safe(' class="nowrap"')
A:django.contrib.admin.templatetags.admin_list.allow_tags->getattr(attr, 'allow_tags', False)
A:django.contrib.admin.templatetags.admin_list.boolean->getattr(attr, 'boolean', False)
A:django.contrib.admin.templatetags.admin_list.result_repr->mark_safe(force_text(bf.errors) + force_text(bf))
A:django.contrib.admin.templatetags.admin_list.field_val->getattr(result, f.name)
A:django.contrib.admin.templatetags.admin_list.url->add_preserved_filters({'preserved_filters': cl.preserved_filters, 'opts': cl.opts}, url)
A:django.contrib.admin.templatetags.admin_list.attr->str(cl.to_field)
A:django.contrib.admin.templatetags.admin_list.value->result.serializable_value(attr)
A:django.contrib.admin.templatetags.admin_list.result_id->escapejs(value)
A:django.contrib.admin.templatetags.admin_list.headers->list(result_headers(cl))
A:django.contrib.admin.templatetags.admin_list.year_lookup->cl.params.get(year_field)
A:django.contrib.admin.templatetags.admin_list.month_lookup->cl.params.get(month_field)
A:django.contrib.admin.templatetags.admin_list.day_lookup->cl.params.get(day_field)
A:django.contrib.admin.templatetags.admin_list.date_range->cl.queryset.aggregate(first=models.Min(field_name), last=models.Max(field_name))
A:django.contrib.admin.templatetags.admin_list.day->datetime.date(int(year_lookup), int(month_lookup), int(day_lookup))
A:django.contrib.admin.templatetags.admin_list.days->getattr(days, dates_or_datetimes)(field_name, 'day')
A:django.contrib.admin.templatetags.admin_list.months->getattr(months, dates_or_datetimes)(field_name, 'month')
A:django.contrib.admin.templatetags.admin_list.years->getattr(cl.queryset, dates_or_datetimes)(field_name, 'year')
A:django.contrib.admin.templatetags.admin_list.tpl->get_template(spec.template)
django.contrib.admin.templatetags.admin_list.ResultList(self,form,*items)
django.contrib.admin.templatetags.admin_list.ResultList.__init__(self,form,*items)
django.contrib.admin.templatetags.admin_list._boolean_icon(field_val)
django.contrib.admin.templatetags.admin_list.admin_actions(context)
django.contrib.admin.templatetags.admin_list.admin_list_filter(cl,spec)
django.contrib.admin.templatetags.admin_list.date_hierarchy(cl)
django.contrib.admin.templatetags.admin_list.items_for_result(cl,result,form)
django.contrib.admin.templatetags.admin_list.pagination(cl)
django.contrib.admin.templatetags.admin_list.paginator_number(cl,i)
django.contrib.admin.templatetags.admin_list.result_headers(cl)
django.contrib.admin.templatetags.admin_list.result_hidden_fields(cl)
django.contrib.admin.templatetags.admin_list.result_list(cl)
django.contrib.admin.templatetags.admin_list.results(cl)
django.contrib.admin.templatetags.admin_list.search_form(cl)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/admin_urls.py----------------------------------------
A:django.contrib.admin.templatetags.admin_urls.register->django.template.Library()
A:django.contrib.admin.templatetags.admin_urls.opts->context.get('opts')
A:django.contrib.admin.templatetags.admin_urls.preserved_filters->dict(parse_qsl(preserved_filters['_changelist_filters']))
A:django.contrib.admin.templatetags.admin_urls.parsed_url->list(urlparse(url))
A:django.contrib.admin.templatetags.admin_urls.parsed_qs->dict(parse_qsl(parsed_url[4]))
A:django.contrib.admin.templatetags.admin_urls.merged_qs->dict()
A:django.contrib.admin.templatetags.admin_urls.match->resolve(match_url)
A:django.contrib.admin.templatetags.admin_urls.parsed_url[4]->urlencode(merged_qs)
django.contrib.admin.templatetags.admin_urls.add_preserved_filters(context,url,popup=False)
django.contrib.admin.templatetags.admin_urls.admin_urlname(value,arg)
django.contrib.admin.templatetags.admin_urls.admin_urlquote(value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/log.py----------------------------------------
A:django.contrib.admin.templatetags.log.register->django.template.Library()
A:django.contrib.admin.templatetags.log.tokens->token.contents.split()
django.contrib.admin.templatetags.log.AdminLogNode(self,limit,varname,user)
django.contrib.admin.templatetags.log.AdminLogNode.__init__(self,limit,varname,user)
django.contrib.admin.templatetags.log.AdminLogNode.__repr__(self)
django.contrib.admin.templatetags.log.AdminLogNode.render(self,context)
django.contrib.admin.templatetags.log.get_admin_log(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/admin/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/utils.py----------------------------------------
A:django.contrib.formtools.utils.value->value.strip().strip()
A:django.contrib.formtools.utils.pickled->pickle.dumps(data, pickle.HIGHEST_PROTOCOL)
django.contrib.formtools.utils.form_hmac(form)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/exceptions.py----------------------------------------
django.contrib.formtools.exceptions.WizardViewCookieModified(SuspiciousOperation)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/preview.py----------------------------------------
A:django.contrib.formtools.preview.stage->{'1': 'preview', '2': 'post'}.get(request.POST.get(self.unused_name('stage')), 'preview')
A:django.contrib.formtools.preview.method->getattr(self, stage + '_' + request.method.lower())
A:django.contrib.formtools.preview.f->self.form(request.POST, auto_id=self.get_auto_id())
A:django.contrib.formtools.preview.context->self.get_context(request, f)
A:django.contrib.formtools.preview.context['hash_field']->self.unused_name('hash')
A:django.contrib.formtools.preview.context['hash_value']->self.security_hash(request, f)
A:django.contrib.formtools.preview.expected->self.security_hash(request, form)
django.contrib.formtools.preview.FormPreview(self,form)
django.contrib.formtools.preview.FormPreview.__init__(self,form)
django.contrib.formtools.preview.FormPreview._check_security_hash(self,token,request,form)
django.contrib.formtools.preview.FormPreview.done(self,request,cleaned_data)
django.contrib.formtools.preview.FormPreview.failed_hash(self,request)
django.contrib.formtools.preview.FormPreview.get_auto_id(self)
django.contrib.formtools.preview.FormPreview.get_context(self,request,form)
django.contrib.formtools.preview.FormPreview.get_initial(self,request)
django.contrib.formtools.preview.FormPreview.parse_params(self,*args,**kwargs)
django.contrib.formtools.preview.FormPreview.post_post(self,request)
django.contrib.formtools.preview.FormPreview.preview_get(self,request)
django.contrib.formtools.preview.FormPreview.preview_post(self,request)
django.contrib.formtools.preview.FormPreview.process_preview(self,request,form,context)
django.contrib.formtools.preview.FormPreview.security_hash(self,request,form)
django.contrib.formtools.preview.FormPreview.unused_name(self,name)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/tests.py----------------------------------------
A:django.contrib.formtools.tests.tests.success_string_encoded->success_string.encode()
A:django.contrib.formtools.tests.tests.context->super(TestFormPreview, self).get_context(request, form)
A:django.contrib.formtools.tests.tests.self.preview->django.contrib.formtools.preview.FormPreview(TestForm)
A:django.contrib.formtools.tests.tests.response->self.client.post('/previewpreview/', self.test_data)
A:django.contrib.formtools.tests.tests.hash->django.contrib.formtools.utils.form_hmac(TestForm(self.test_data))
A:django.contrib.formtools.tests.tests.f1->HashTestBlankForm({})
A:django.contrib.formtools.tests.tests.f2->HashTestForm({}, empty_permitted=True)
A:django.contrib.formtools.tests.tests.hash1->django.contrib.formtools.utils.form_hmac(f1)
A:django.contrib.formtools.tests.tests.hash2->django.contrib.formtools.utils.form_hmac(f2)
django.contrib.formtools.tests.tests.FormHmacTests(unittest.TestCase)
django.contrib.formtools.tests.tests.FormHmacTests.test_empty_permitted(self)
django.contrib.formtools.tests.tests.FormHmacTests.test_textfield_hash(self)
django.contrib.formtools.tests.tests.PreviewTests(TestCase)
django.contrib.formtools.tests.tests.PreviewTests.setUp(self)
django.contrib.formtools.tests.tests.PreviewTests.test_bool_submit(self)
django.contrib.formtools.tests.tests.PreviewTests.test_form_get(self)
django.contrib.formtools.tests.tests.PreviewTests.test_form_preview(self)
django.contrib.formtools.tests.tests.PreviewTests.test_form_submit(self)
django.contrib.formtools.tests.tests.PreviewTests.test_form_submit_bad_hash(self)
django.contrib.formtools.tests.tests.PreviewTests.test_form_submit_good_hash(self)
django.contrib.formtools.tests.tests.PreviewTests.test_unused_name(self)
django.contrib.formtools.tests.tests.TestFormPreview(preview.FormPreview)
django.contrib.formtools.tests.tests.TestFormPreview.done(self,request,cleaned_data)
django.contrib.formtools.tests.tests.TestFormPreview.get_context(self,request,form)
django.contrib.formtools.tests.tests.TestFormPreview.get_initial(self,request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/urls.py----------------------------------------
A:django.contrib.formtools.tests.urls.urlpatterns->patterns('', url('^preview/', TestFormPreview(TestForm)))


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/forms.py----------------------------------------
A:django.contrib.formtools.tests.forms.field1->django.forms.CharField()
A:django.contrib.formtools.tests.forms.field1_->django.forms.CharField()
A:django.contrib.formtools.tests.forms.bool1->django.forms.BooleanField(required=False)
A:django.contrib.formtools.tests.forms.date1->django.forms.DateField(required=False)
A:django.contrib.formtools.tests.forms.name->django.forms.CharField(required=False)
A:django.contrib.formtools.tests.forms.bio->django.forms.CharField(required=False)
django.contrib.formtools.tests.forms.HashTestBlankForm(forms.Form)
django.contrib.formtools.tests.forms.HashTestForm(forms.Form)
django.contrib.formtools.tests.forms.TestForm(forms.Form)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/storage.py----------------------------------------
A:django.contrib.formtools.tests.wizard.storage.request->get_request()
A:django.contrib.formtools.tests.wizard.storage.engine->import_module(settings.SESSION_ENGINE)
A:django.contrib.formtools.tests.wizard.storage.request.session->import_module(settings.SESSION_ENGINE).SessionStore(None)
A:django.contrib.formtools.tests.wizard.storage.(self.testuser, created)->django.contrib.auth.models.User.objects.get_or_create(username='testuser1')
A:django.contrib.formtools.tests.wizard.storage.storage->self.get_storage()('wizard1', request, None)
A:django.contrib.formtools.tests.wizard.storage.storage2->self.get_storage()('wizard2', request, None)
django.contrib.formtools.tests.wizard.storage.TestStorage(object)
django.contrib.formtools.tests.wizard.storage.TestStorage.setUp(self)
django.contrib.formtools.tests.wizard.storage.TestStorage.test_current_step(self)
django.contrib.formtools.tests.wizard.storage.TestStorage.test_extra_context(self)
django.contrib.formtools.tests.wizard.storage.TestStorage.test_extra_context_key_persistence(self)
django.contrib.formtools.tests.wizard.storage.TestStorage.test_step_data(self)
django.contrib.formtools.tests.wizard.storage.get_request()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/test_sessionstorage.py----------------------------------------
django.contrib.formtools.tests.wizard.TestSessionStorage(TestStorage,TestCase)
django.contrib.formtools.tests.wizard.TestSessionStorage.get_storage(self)
django.contrib.formtools.tests.wizard.test_sessionstorage.TestSessionStorage(TestStorage,TestCase)
django.contrib.formtools.tests.wizard.test_sessionstorage.TestSessionStorage.get_storage(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/test_cookiestorage.py----------------------------------------
A:django.contrib.formtools.tests.wizard.test_cookiestorage.request->get_request()
A:django.contrib.formtools.tests.wizard.test_cookiestorage.storage->self.get_storage()('wizard1', request, None)
A:django.contrib.formtools.tests.wizard.test_cookiestorage.cookie_signer->django.core.signing.get_cookie_signer(storage.prefix)
A:django.contrib.formtools.tests.wizard.test_cookiestorage.storage.request.COOKIES[storage.prefix]->django.core.signing.get_cookie_signer(storage.prefix).sign(storage.encoder.encode({'key1': 'value1'}))
A:django.contrib.formtools.tests.wizard.test_cookiestorage.response->HttpResponse()
A:django.contrib.formtools.tests.wizard.test_cookiestorage.signed_cookie_data->django.core.signing.get_cookie_signer(storage.prefix).sign(storage.encoder.encode(storage.data))
A:django.contrib.formtools.tests.wizard.test_cookiestorage.unsigned_cookie_data->django.core.signing.get_cookie_signer(storage.prefix).unsign(response.cookies[storage.prefix].value)
django.contrib.formtools.tests.wizard.TestCookieStorage(TestStorage,TestCase)
django.contrib.formtools.tests.wizard.TestCookieStorage.get_storage(self)
django.contrib.formtools.tests.wizard.TestCookieStorage.test_manipulated_cookie(self)
django.contrib.formtools.tests.wizard.TestCookieStorage.test_reset_cookie(self)
django.contrib.formtools.tests.wizard.test_cookiestorage.TestCookieStorage(TestStorage,TestCase)
django.contrib.formtools.tests.wizard.test_cookiestorage.TestCookieStorage.get_storage(self)
django.contrib.formtools.tests.wizard.test_cookiestorage.TestCookieStorage.test_manipulated_cookie(self)
django.contrib.formtools.tests.wizard.test_cookiestorage.TestCookieStorage.test_reset_cookie(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/test_forms.py----------------------------------------
A:django.contrib.formtools.tests.wizard.test_forms.request->get_request()
A:django.contrib.formtools.tests.wizard.test_forms.engine->import_module(settings.SESSION_ENGINE)
A:django.contrib.formtools.tests.wizard.test_forms.request.session->import_module(settings.SESSION_ENGINE).SessionStore(None)
A:django.contrib.formtools.tests.wizard.test_forms.name->django.db.models.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.test_forms.data->django.forms.CharField()
A:django.contrib.formtools.tests.wizard.test_forms.TestModelFormSet->django.forms.models.modelformset_factory(TestModel, form=TestModelForm, extra=2, fields='__all__')
A:django.contrib.formtools.tests.wizard.test_forms.response->super(TestWizard, self).dispatch(request, *args, **kwargs)
A:django.contrib.formtools.tests.wizard.test_forms.kwargs->super(TestWizard, self).get_form_kwargs(step, *args, **kwargs)
A:django.contrib.formtools.tests.wizard.test_forms.testform->django.contrib.formtools.wizard.views.CookieWizardView.as_view([('start', Step1)])
A:django.contrib.formtools.tests.wizard.test_forms.(response, instance)->testform(request)
A:django.contrib.formtools.tests.wizard.test_forms.testform2->TestWizard.as_view([('start', Step1), ('step2', Step2)])
A:django.contrib.formtools.tests.wizard.test_forms.the_instance->TestModel()
A:django.contrib.formtools.tests.wizard.test_forms.(the_instance1, created)->TestModel.objects.get_or_create(name='test object 1')
A:django.contrib.formtools.tests.wizard.test_forms.(the_instance2, created)->TestModel.objects.get_or_create(name='test object 2')
django.contrib.formtools.tests.wizard.CookieFormTests(TestCase)
django.contrib.formtools.tests.wizard.CookieFormTests.test_init(self)
django.contrib.formtools.tests.wizard.FormTests(TestCase)
django.contrib.formtools.tests.wizard.FormTests.test_done(self)
django.contrib.formtools.tests.wizard.FormTests.test_first_step(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_condition(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_init(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_initial(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_instance(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_kwargs(self)
django.contrib.formtools.tests.wizard.FormTests.test_form_prefix(self)
django.contrib.formtools.tests.wizard.FormTests.test_formset_instance(self)
django.contrib.formtools.tests.wizard.FormTests.test_persistence(self)
django.contrib.formtools.tests.wizard.FormTests.test_revalidation(self)
django.contrib.formtools.tests.wizard.SessionFormTests(TestCase)
django.contrib.formtools.tests.wizard.SessionFormTests.test_init(self)
django.contrib.formtools.tests.wizard.test_forms.CookieFormTests(TestCase)
django.contrib.formtools.tests.wizard.test_forms.CookieFormTests.test_init(self)
django.contrib.formtools.tests.wizard.test_forms.CustomKwargsStep1(self,test=None,*args,**kwargs)
django.contrib.formtools.tests.wizard.test_forms.CustomKwargsStep1.__init__(self,test=None,*args,**kwargs)
django.contrib.formtools.tests.wizard.test_forms.DummyRequest(self,POST=None)
django.contrib.formtools.tests.wizard.test_forms.DummyRequest.__init__(self,POST=None)
django.contrib.formtools.tests.wizard.test_forms.FormTests(TestCase)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_done(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_first_step(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_condition(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_init(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_initial(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_instance(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_kwargs(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_form_prefix(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_formset_instance(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_persistence(self)
django.contrib.formtools.tests.wizard.test_forms.FormTests.test_revalidation(self)
django.contrib.formtools.tests.wizard.test_forms.SessionFormTests(TestCase)
django.contrib.formtools.tests.wizard.test_forms.SessionFormTests.test_init(self)
django.contrib.formtools.tests.wizard.test_forms.Step1(forms.Form)
django.contrib.formtools.tests.wizard.test_forms.Step2(forms.Form)
django.contrib.formtools.tests.wizard.test_forms.Step3(forms.Form)
django.contrib.formtools.tests.wizard.test_forms.TestModel(models.Model)
django.contrib.formtools.tests.wizard.test_forms.TestModel.Meta
django.contrib.formtools.tests.wizard.test_forms.TestModelForm(forms.ModelForm)
django.contrib.formtools.tests.wizard.test_forms.TestModelForm.Meta
django.contrib.formtools.tests.wizard.test_forms.TestWizard(WizardView)
django.contrib.formtools.tests.wizard.test_forms.TestWizard.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.tests.wizard.test_forms.TestWizard.get_form_kwargs(self,step,*args,**kwargs)
django.contrib.formtools.tests.wizard.test_forms.TestWizardWithInitAttrs(TestWizard)
django.contrib.formtools.tests.wizard.test_forms.get_request(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/test_loadstorage.py----------------------------------------
django.contrib.formtools.tests.wizard.TestLoadStorage(TestCase)
django.contrib.formtools.tests.wizard.TestLoadStorage.test_load_storage(self)
django.contrib.formtools.tests.wizard.TestLoadStorage.test_missing_storage(self)
django.contrib.formtools.tests.wizard.test_loadstorage.TestLoadStorage(TestCase)
django.contrib.formtools.tests.wizard.test_loadstorage.TestLoadStorage.test_load_storage(self)
django.contrib.formtools.tests.wizard.test_loadstorage.TestLoadStorage.test_missing_storage(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/wizardtests/tests.py----------------------------------------
A:django.contrib.formtools.tests.wizard.wizardtests.tests.UserFormSet->django.forms.models.modelformset_factory(User, form=UserForm, extra=2)
A:django.contrib.formtools.tests.wizard.wizardtests.tests.(self.testuser, created)->django.contrib.auth.models.User.objects.get_or_create(username='testuser1')
A:django.contrib.formtools.tests.wizard.wizardtests.tests.response->view(self.rf.get('/'))
A:django.contrib.formtools.tests.wizard.wizardtests.tests.post_data['form2-file1']->open(upath(__file__), 'rb')
A:django.contrib.formtools.tests.wizard.wizardtests.tests.templates->os.path.join(os.path.dirname(upath(__file__)), 'templates')
A:django.contrib.formtools.tests.wizard.wizardtests.tests.context->super(TestWizard, self).get_context_data(**kwargs)
A:django.contrib.formtools.tests.wizard.wizardtests.tests.factory->RequestFactory()
A:django.contrib.formtools.tests.wizard.wizardtests.tests.view->QuerySetOverrideWizard.as_view([UserFormSet])
A:django.contrib.formtools.tests.wizard.wizardtests.tests.self.rf->RequestFactory()
A:django.contrib.formtools.tests.wizard.wizardtests.tests.self.normal_user->django.contrib.auth.models.User.objects.create(username='test1', email='normal@example.com')
A:django.contrib.formtools.tests.wizard.wizardtests.tests.self.staff_user->django.contrib.auth.models.User.objects.create(username='test2', email='staff@example.com', is_staff=True)
A:django.contrib.formtools.tests.wizard.wizardtests.tests.queryset->django.contrib.auth.models.User.objects.filter(pk=self.staff_user.pk)
django.contrib.formtools.tests.wizard.CookieWizardTests(WizardTests,TestCase)
django.contrib.formtools.tests.wizard.SessionWizardTests(WizardTests,TestCase)
django.contrib.formtools.tests.wizard.WizardFormKwargsOverrideTests(TestCase)
django.contrib.formtools.tests.wizard.WizardFormKwargsOverrideTests.setUp(self)
django.contrib.formtools.tests.wizard.WizardFormKwargsOverrideTests.test_instance_is_maintained(self)
django.contrib.formtools.tests.wizard.WizardFormKwargsOverrideTests.test_queryset_is_maintained(self)
django.contrib.formtools.tests.wizard.WizardTestGenericViewInterface(TestCase)
django.contrib.formtools.tests.wizard.WizardTestGenericViewInterface.test_get_context_data_inheritance(self)
django.contrib.formtools.tests.wizard.WizardTestGenericViewInterface.test_get_context_data_with_mixin(self)
django.contrib.formtools.tests.wizard.WizardTestKwargs(TestCase)
django.contrib.formtools.tests.wizard.WizardTestKwargs.setUp(self)
django.contrib.formtools.tests.wizard.WizardTestKwargs.test_template(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.CookieWizardTests(WizardTests,TestCase)
django.contrib.formtools.tests.wizard.wizardtests.tests.SessionWizardTests(WizardTests,TestCase)
django.contrib.formtools.tests.wizard.wizardtests.tests.UserForm(forms.ModelForm)
django.contrib.formtools.tests.wizard.wizardtests.tests.UserForm.Meta
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardFormKwargsOverrideTests(TestCase)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardFormKwargsOverrideTests.setUp(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardFormKwargsOverrideTests.test_instance_is_maintained(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardFormKwargsOverrideTests.test_queryset_is_maintained(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestGenericViewInterface(TestCase)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestGenericViewInterface.test_get_context_data_inheritance(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestGenericViewInterface.test_get_context_data_with_mixin(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestKwargs(TestCase)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestKwargs.setUp(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTestKwargs.test_template(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests(object)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.setUp(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_cleaned_data(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_form_finish(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_form_post_error(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_form_post_success(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_form_refresh(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_form_stepback(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_initial_call(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_manipulated_data(self)
django.contrib.formtools.tests.wizard.wizardtests.tests.WizardTests.test_template_context(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/wizardtests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/wizardtests/urls.py----------------------------------------
A:django.contrib.formtools.tests.wizard.wizardtests.urls.urlpatterns->patterns('', url('^wiz_session/$', SessionContactWizard.as_view([('form1', Page1), ('form2', Page2), ('form3', Page3), ('form4', Page4)])), url('^wiz_cookie/$', CookieContactWizard.as_view([('form1', Page1), ('form2', Page2), ('form3', Page3), ('form4', Page4)])), url('^wiz_other_template/$', CookieContactWizard.as_view([('form1', Page1), ('form2', Page2), ('form3', Page3), ('form4', Page4)], template_name='other_wizard_form.html')))


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/wizardtests/forms.py----------------------------------------
A:django.contrib.formtools.tests.wizard.wizardtests.forms.temp_storage_location->tempfile.mkdtemp(dir=os.environ.get('DJANGO_TEST_TEMP_DIR'))
A:django.contrib.formtools.tests.wizard.wizardtests.forms.temp_storage->FileSystemStorage(location=temp_storage_location)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.name->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.user->django.forms.ModelChoiceField(queryset=User.objects.all())
A:django.contrib.formtools.tests.wizard.wizardtests.forms.thirsty->django.forms.NullBooleanField()
A:django.contrib.formtools.tests.wizard.wizardtests.forms.address1->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.address2->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.file1->django.forms.FileField()
A:django.contrib.formtools.tests.wizard.wizardtests.forms.random_crap->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.Page4->formset_factory(Page3, extra=2)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.c->Context({'form_list': [x.cleaned_data for x in form_list], 'all_cleaned_data': self.get_all_cleaned_data()})
A:django.contrib.formtools.tests.wizard.wizardtests.forms.c[form]->self.get_cleaned_data_for_step(form)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.c['this_will_fail']->self.get_cleaned_data_for_step('this_will_fail')
A:django.contrib.formtools.tests.wizard.wizardtests.forms.context->super(ContactWizard, self).get_context_data(form, **kwargs)
A:django.contrib.formtools.tests.wizard.wizardtests.forms.UserFormSet->modelformset_factory(User, form=UserForm)
django.contrib.formtools.tests.wizard.wizardtests.forms.ContactWizard(WizardView)
django.contrib.formtools.tests.wizard.wizardtests.forms.ContactWizard.done(self,form_list,**kwargs)
django.contrib.formtools.tests.wizard.wizardtests.forms.ContactWizard.get_context_data(self,form,**kwargs)
django.contrib.formtools.tests.wizard.wizardtests.forms.CookieContactWizard(ContactWizard)
django.contrib.formtools.tests.wizard.wizardtests.forms.Page1(forms.Form)
django.contrib.formtools.tests.wizard.wizardtests.forms.Page2(forms.Form)
django.contrib.formtools.tests.wizard.wizardtests.forms.Page3(forms.Form)
django.contrib.formtools.tests.wizard.wizardtests.forms.SessionContactWizard(ContactWizard)
django.contrib.formtools.tests.wizard.wizardtests.forms.UserForm(forms.ModelForm)
django.contrib.formtools.tests.wizard.wizardtests.forms.UserForm.Meta


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/namedwizardtests/tests.py----------------------------------------
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.(self.testuser, created)->django.contrib.auth.models.User.objects.get_or_create(username='testuser1')
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.response->super(TestNamedUrlCookieWizardView, self).dispatch(request, *args, **kwargs)
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.querydict->QueryDict(location[location.find('?') + 1:])
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.post_data['form2-file1']->open(__file__, 'rb')
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.step2_url->reverse(self.wizard_urlname, kwargs={'step': 'form2'})
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.request->get_request()
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.testform->self.formwizard_class.as_view([('start', Step1), ('step2', Step2)], url_name=self.wizard_urlname)
A:django.contrib.formtools.tests.wizard.namedwizardtests.tests.(response, instance)->testform(request, step='done')
django.contrib.formtools.tests.wizard.NamedCookieFormTests(NamedFormTests,TestCase)
django.contrib.formtools.tests.wizard.NamedCookieWizardTests(NamedWizardTests,TestCase)
django.contrib.formtools.tests.wizard.NamedSessionFormTests(NamedFormTests,TestCase)
django.contrib.formtools.tests.wizard.NamedSessionWizardTests(NamedWizardTests,TestCase)
django.contrib.formtools.tests.wizard.TestNamedUrlCookieWizardView(NamedUrlCookieWizardView)
django.contrib.formtools.tests.wizard.TestNamedUrlCookieWizardView.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.tests.wizard.TestNamedUrlSessionWizardView(NamedUrlSessionWizardView)
django.contrib.formtools.tests.wizard.TestNamedUrlSessionWizardView.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedCookieFormTests(NamedFormTests,TestCase)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedCookieWizardTests(NamedWizardTests,TestCase)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedFormTests(object)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedFormTests.test_revalidation(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedSessionFormTests(NamedFormTests,TestCase)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedSessionWizardTests(NamedWizardTests,TestCase)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests(object)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.setUp(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_cleaned_data(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_finish(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_jump(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_post_error(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_post_success(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_reset(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_form_stepback(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_initial_call(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_initial_call_with_params(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.NamedWizardTests.test_manipulated_data(self)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.TestNamedUrlCookieWizardView(NamedUrlCookieWizardView)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.TestNamedUrlCookieWizardView.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.TestNamedUrlSessionWizardView(NamedUrlSessionWizardView)
django.contrib.formtools.tests.wizard.namedwizardtests.tests.TestNamedUrlSessionWizardView.dispatch(self,request,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/namedwizardtests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/namedwizardtests/urls.py----------------------------------------
A:django.contrib.formtools.tests.wizard.namedwizardtests.urls.urlpatterns->patterns('', url('^nwiz_session/(?P<step>.+)/$', get_named_session_wizard(), name='nwiz_session'), url('^nwiz_session/$', get_named_session_wizard(), name='nwiz_session_start'), url('^nwiz_cookie/(?P<step>.+)/$', get_named_cookie_wizard(), name='nwiz_cookie'), url('^nwiz_cookie/$', get_named_cookie_wizard(), name='nwiz_cookie_start'))
django.contrib.formtools.tests.wizard.namedwizardtests.urls.get_named_cookie_wizard()
django.contrib.formtools.tests.wizard.namedwizardtests.urls.get_named_session_wizard()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/tests/wizard/namedwizardtests/forms.py----------------------------------------
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.temp_storage_location->tempfile.mkdtemp(dir=os.environ.get('DJANGO_TEST_TEMP_DIR'))
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.temp_storage->FileSystemStorage(location=temp_storage_location)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.name->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.user->django.forms.ModelChoiceField(queryset=User.objects.all())
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.thirsty->django.forms.NullBooleanField()
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.address1->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.address2->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.file1->django.forms.FileField()
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.random_crap->django.forms.CharField(max_length=100)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.Page4->formset_factory(Page3, extra=2)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.c->Context({'form_list': [x.cleaned_data for x in form_list], 'all_cleaned_data': self.get_all_cleaned_data()})
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.c[form]->self.get_cleaned_data_for_step(form)
A:django.contrib.formtools.tests.wizard.namedwizardtests.forms.c['this_will_fail']->self.get_cleaned_data_for_step('this_will_fail')
django.contrib.formtools.tests.wizard.namedwizardtests.forms.ContactWizard(NamedUrlWizardView)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.ContactWizard.done(self,form_list,**kwargs)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.CookieContactWizard(ContactWizard)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.Page1(forms.Form)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.Page2(forms.Form)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.Page3(forms.Form)
django.contrib.formtools.tests.wizard.namedwizardtests.forms.SessionContactWizard(ContactWizard)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/views.py----------------------------------------
A:django.contrib.formtools.wizard.views.new->re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\1', name)
A:django.contrib.formtools.wizard.views.initkwargs->super(NamedUrlWizardView, cls).get_initkwargs(*args, **kwargs)
A:django.contrib.formtools.wizard.views.computed_form_list->SortedDict()
A:django.contrib.formtools.wizard.views.form_list->self.get_form_list()
A:django.contrib.formtools.wizard.views.condition->condition(self)
A:django.contrib.formtools.wizard.views.self.prefix->self.get_prefix(*args, **kwargs)
A:django.contrib.formtools.wizard.views.self.storage->get_storage(self.storage_name, self.prefix, request, getattr(self, 'file_storage', None))
A:django.contrib.formtools.wizard.views.self.steps->StepsHelper(self)
A:django.contrib.formtools.wizard.views.response->super(WizardView, self).dispatch(request, *args, **kwargs)
A:django.contrib.formtools.wizard.views.wizard_goto_step->self.request.POST.get('wizard_goto_step', None)
A:django.contrib.formtools.wizard.views.management_form->ManagementForm(self.request.POST, prefix=self.prefix)
A:django.contrib.formtools.wizard.views.form->self.get_form(data=self.storage.get_step_data(self.steps.current), files=self.storage.get_step_files(self.steps.current))
A:django.contrib.formtools.wizard.views.new_form->self.get_form(next_step, data=self.storage.get_step_data(next_step), files=self.storage.get_step_files(next_step))
A:django.contrib.formtools.wizard.views.form_obj->self.get_form(step=step, data=self.storage.get_step_data(step), files=self.storage.get_step_files(step))
A:django.contrib.formtools.wizard.views.done_response->self.done(final_form_list, **kwargs)
A:django.contrib.formtools.wizard.views.kwargs->self.get_form_kwargs(step)
A:django.contrib.formtools.wizard.views.context->super(NamedUrlWizardView, self).get_context_data(form=form, **kwargs)
A:django.contrib.formtools.wizard.views.step_url->self.get_form_kwargs(step).get('step', None)
A:django.contrib.formtools.wizard.views.next_step->self.get_next_step()
django.contrib.formtools.wizard.views.CookieWizardView(WizardView)
django.contrib.formtools.wizard.views.NamedUrlCookieWizardView(NamedUrlWizardView)
django.contrib.formtools.wizard.views.NamedUrlSessionWizardView(NamedUrlWizardView)
django.contrib.formtools.wizard.views.NamedUrlWizardView(WizardView)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get(self,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_context_data(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_initkwargs(cls,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.get_step_url(self,step)
django.contrib.formtools.wizard.views.NamedUrlWizardView.post(self,*args,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_done(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_goto_step(self,goto_step,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_next_step(self,form,**kwargs)
django.contrib.formtools.wizard.views.NamedUrlWizardView.render_revalidation_failure(self,failed_step,form,**kwargs)
django.contrib.formtools.wizard.views.SessionWizardView(WizardView)
django.contrib.formtools.wizard.views.StepsHelper(self,wizard)
django.contrib.formtools.wizard.views.StepsHelper.__dir__(self)
django.contrib.formtools.wizard.views.StepsHelper.__init__(self,wizard)
django.contrib.formtools.wizard.views.StepsHelper.__len__(self)
django.contrib.formtools.wizard.views.StepsHelper.__repr__(self)
django.contrib.formtools.wizard.views.StepsHelper.all(self)
django.contrib.formtools.wizard.views.StepsHelper.count(self)
django.contrib.formtools.wizard.views.StepsHelper.current(self)
django.contrib.formtools.wizard.views.StepsHelper.first(self)
django.contrib.formtools.wizard.views.StepsHelper.index(self)
django.contrib.formtools.wizard.views.StepsHelper.last(self)
django.contrib.formtools.wizard.views.StepsHelper.next(self)
django.contrib.formtools.wizard.views.StepsHelper.prev(self)
django.contrib.formtools.wizard.views.StepsHelper.step0(self)
django.contrib.formtools.wizard.views.StepsHelper.step1(self)
django.contrib.formtools.wizard.views.WizardView(TemplateView)
django.contrib.formtools.wizard.views.WizardView.__repr__(self)
django.contrib.formtools.wizard.views.WizardView.as_view(cls,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.dispatch(self,request,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.done(self,form_list,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get(self,request,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_all_cleaned_data(self)
django.contrib.formtools.wizard.views.WizardView.get_cleaned_data_for_step(self,step)
django.contrib.formtools.wizard.views.WizardView.get_context_data(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_form(self,step=None,data=None,files=None)
django.contrib.formtools.wizard.views.WizardView.get_form_initial(self,step)
django.contrib.formtools.wizard.views.WizardView.get_form_instance(self,step)
django.contrib.formtools.wizard.views.WizardView.get_form_kwargs(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_form_list(self)
django.contrib.formtools.wizard.views.WizardView.get_form_prefix(self,step=None,form=None)
django.contrib.formtools.wizard.views.WizardView.get_form_step_data(self,form)
django.contrib.formtools.wizard.views.WizardView.get_form_step_files(self,form)
django.contrib.formtools.wizard.views.WizardView.get_initkwargs(cls,form_list=None,initial_dict=None,instance_dict=None,condition_dict=None,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_next_step(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_prefix(self,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.get_prev_step(self,step=None)
django.contrib.formtools.wizard.views.WizardView.get_step_index(self,step=None)
django.contrib.formtools.wizard.views.WizardView.post(self,*args,**kwargs)
django.contrib.formtools.wizard.views.WizardView.process_step(self,form)
django.contrib.formtools.wizard.views.WizardView.process_step_files(self,form)
django.contrib.formtools.wizard.views.WizardView.render(self,form=None,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_done(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_goto_step(self,goto_step,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_next_step(self,form,**kwargs)
django.contrib.formtools.wizard.views.WizardView.render_revalidation_failure(self,step,form,**kwargs)
django.contrib.formtools.wizard.views.normalize_name(name)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/forms.py----------------------------------------
A:django.contrib.formtools.wizard.forms.current_step->django.forms.CharField(widget=forms.HiddenInput)
django.contrib.formtools.wizard.forms.ManagementForm(forms.Form)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/storage/session.py----------------------------------------
A:django.contrib.formtools.wizard.storage.session.data->property(_get_data, _set_data)
django.contrib.formtools.wizard.storage.session.SessionStorage(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.session.SessionStorage.__init__(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.session.SessionStorage._get_data(self)
django.contrib.formtools.wizard.storage.session.SessionStorage._set_data(self,value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/storage/base.py----------------------------------------
A:django.contrib.formtools.wizard.storage.base.current_step->lazy_property(_get_current_step, _set_current_step)
A:django.contrib.formtools.wizard.storage.base.extra_data->lazy_property(_get_extra_data, _set_extra_data)
A:django.contrib.formtools.wizard.storage.base.values->MultiValueDict(values)
A:django.contrib.formtools.wizard.storage.base.cleaned_data->dict(cleaned_data.lists())
A:django.contrib.formtools.wizard.storage.base.wizard_files->self.data[self.step_files_key].get(step, {})
A:django.contrib.formtools.wizard.storage.base.field_dict->field_dict.copy().copy()
A:django.contrib.formtools.wizard.storage.base.tmp_name->field_dict.copy().copy().pop('tmp_name')
A:django.contrib.formtools.wizard.storage.base.files[field]->UploadedFile(file=self.file_storage.open(tmp_name), **field_dict)
A:django.contrib.formtools.wizard.storage.base.tmp_filename->self.file_storage.save(field_file.name, field_file)
django.contrib.formtools.wizard.storage.BaseStorage(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.BaseStorage._get_current_step(self)
django.contrib.formtools.wizard.storage.BaseStorage._get_extra_data(self)
django.contrib.formtools.wizard.storage.BaseStorage._set_current_step(self,step)
django.contrib.formtools.wizard.storage.BaseStorage._set_extra_data(self,extra_data)
django.contrib.formtools.wizard.storage.BaseStorage.current_step_data(self)
django.contrib.formtools.wizard.storage.BaseStorage.current_step_files(self)
django.contrib.formtools.wizard.storage.BaseStorage.get_step_data(self,step)
django.contrib.formtools.wizard.storage.BaseStorage.get_step_files(self,step)
django.contrib.formtools.wizard.storage.BaseStorage.init_data(self)
django.contrib.formtools.wizard.storage.BaseStorage.reset(self)
django.contrib.formtools.wizard.storage.BaseStorage.set_step_data(self,step,cleaned_data)
django.contrib.formtools.wizard.storage.BaseStorage.set_step_files(self,step,files)
django.contrib.formtools.wizard.storage.BaseStorage.update_response(self,response)
django.contrib.formtools.wizard.storage.base.BaseStorage(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.base.BaseStorage.__init__(self,prefix,request=None,file_storage=None)
django.contrib.formtools.wizard.storage.base.BaseStorage._get_current_step(self)
django.contrib.formtools.wizard.storage.base.BaseStorage._get_extra_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage._set_current_step(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage._set_extra_data(self,extra_data)
django.contrib.formtools.wizard.storage.base.BaseStorage.current_step_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.current_step_files(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.get_step_data(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage.get_step_files(self,step)
django.contrib.formtools.wizard.storage.base.BaseStorage.init_data(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.reset(self)
django.contrib.formtools.wizard.storage.base.BaseStorage.set_step_data(self,step,cleaned_data)
django.contrib.formtools.wizard.storage.base.BaseStorage.set_step_files(self,step,files)
django.contrib.formtools.wizard.storage.base.BaseStorage.update_response(self,response)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/storage/cookie.py----------------------------------------
A:django.contrib.formtools.wizard.storage.cookie.encoder->json.JSONEncoder(separators=(',', ':'))
A:django.contrib.formtools.wizard.storage.cookie.self.data->self.load_data()
A:django.contrib.formtools.wizard.storage.cookie.data->self.request.get_signed_cookie(self.prefix)
django.contrib.formtools.wizard.storage.cookie.CookieStorage(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.__init__(self,*args,**kwargs)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.load_data(self)
django.contrib.formtools.wizard.storage.cookie.CookieStorage.update_response(self,response)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/storage/exceptions.py----------------------------------------
django.contrib.formtools.wizard.storage.MissingStorage(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.NoFileStorageConfigured(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.exceptions.MissingStorage(ImproperlyConfigured)
django.contrib.formtools.wizard.storage.exceptions.NoFileStorageConfigured(ImproperlyConfigured)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/formtools/wizard/storage/__init__.py----------------------------------------
A:django.contrib.formtools.wizard.storage.__init__.storage_class->import_by_path(path)
django.contrib.formtools.wizard.storage.__init__.get_storage(path,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/utils.py----------------------------------------
A:django.contrib.messages.utils.level_tags->django.contrib.messages.constants.DEFAULT_TAGS.copy()
django.contrib.messages.utils.get_level_tags()


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/middleware.py----------------------------------------
A:django.contrib.messages.middleware.request._messages->default_storage(request)
A:django.contrib.messages.middleware.unstored_messages->request._messages.update(response)
django.contrib.messages.middleware.MessageMiddleware(object)
django.contrib.messages.middleware.MessageMiddleware.process_request(self,request)
django.contrib.messages.middleware.MessageMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/views.py----------------------------------------
A:django.contrib.messages.views.response->super(SuccessMessageMixin, self).form_valid(form)
A:django.contrib.messages.views.success_message->self.get_success_message(form.cleaned_data)
django.contrib.messages.views.SuccessMessageMixin(object)
django.contrib.messages.views.SuccessMessageMixin.form_valid(self,form)
django.contrib.messages.views.SuccessMessageMixin.get_success_message(self,cleaned_data)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/api.py----------------------------------------
A:django.contrib.messages.api.storage->default_storage(request)
django.contrib.messages.MessageFailure(Exception)
django.contrib.messages.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.MessageFailure(Exception)
django.contrib.messages.api.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.get_level(request)
django.contrib.messages.api.get_messages(request)
django.contrib.messages.api.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.set_level(request,level)
django.contrib.messages.api.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.warning(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.get_level(request)
django.contrib.messages.get_messages(request)
django.contrib.messages.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.set_level(request,level)
django.contrib.messages.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.warning(request,message,extra_tags='',fail_silently=False)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/context_processors.py----------------------------------------
django.contrib.messages.context_processors.messages(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/storage/session.py----------------------------------------
A:django.contrib.messages.storage.session.self.request.session[self.session_key]->self.serialize_messages(messages)
A:django.contrib.messages.storage.session.encoder->MessageEncoder(separators=(',', ':'))
django.contrib.messages.storage.session.SessionStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.deserialize_messages(self,data)
django.contrib.messages.storage.session.SessionStorage.serialize_messages(self,messages)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/storage/base.py----------------------------------------
A:django.contrib.messages.storage.base.LEVEL_TAGS->django.contrib.messages.utils.get_level_tags()
A:django.contrib.messages.storage.base.self.level->int(level)
A:django.contrib.messages.storage.base.self.message->force_text(self.message, strings_only=True)
A:django.contrib.messages.storage.base.self.extra_tags->force_text(self.extra_tags, strings_only=True)
A:django.contrib.messages.storage.base.label_tag->force_text(LEVEL_TAGS.get(self.level, ''), strings_only=True)
A:django.contrib.messages.storage.base.extra_tags->force_text(self.extra_tags, strings_only=True)
A:django.contrib.messages.storage.base.tags->property(_get_tags)
A:django.contrib.messages.storage.base.(messages, all_retrieved)->self._get()
A:django.contrib.messages.storage.base.level->property(_get_level, _set_level, _set_level)
A:django.contrib.messages.storage.base.message->Message(level, message, extra_tags=extra_tags)
A:django.contrib.messages.storage.base.self._level->int(value)
django.contrib.messages.storage.base.BaseStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__contains__(self,item)
django.contrib.messages.storage.base.BaseStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__iter__(self)
django.contrib.messages.storage.base.BaseStorage.__len__(self)
django.contrib.messages.storage.base.BaseStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage._get_level(self)
django.contrib.messages.storage.base.BaseStorage._loaded_messages(self)
django.contrib.messages.storage.base.BaseStorage._prepare_messages(self,messages)
django.contrib.messages.storage.base.BaseStorage._set_level(self,value=None)
django.contrib.messages.storage.base.BaseStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.add(self,level,message,extra_tags='')
django.contrib.messages.storage.base.BaseStorage.update(self,response)
django.contrib.messages.storage.base.Message(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__eq__(self,other)
django.contrib.messages.storage.base.Message.__init__(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__str__(self)
django.contrib.messages.storage.base.Message._get_tags(self)
django.contrib.messages.storage.base.Message._prepare(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/storage/cookie.py----------------------------------------
A:django.contrib.messages.storage.cookie.obj[3]->mark_safe(obj[3])
A:django.contrib.messages.storage.cookie.decoded->super(MessageDecoder, self).decode(s, **kwargs)
A:django.contrib.messages.storage.cookie.data->self.request.COOKIES.get(self.cookie_name)
A:django.contrib.messages.storage.cookie.messages->self._decode(data)
A:django.contrib.messages.storage.cookie.encoded_data->self._encode(messages + [self.not_finished], encode_empty=unstored_messages)
A:django.contrib.messages.storage.cookie.cookie->SimpleCookie()
A:django.contrib.messages.storage.cookie.encoder->MessageEncoder(separators=(',', ':'))
A:django.contrib.messages.storage.cookie.value->MessageEncoder(separators=(',', ':')).encode(messages)
A:django.contrib.messages.storage.cookie.bits->self.request.COOKIES.get(self.cookie_name).split('$', 1)
django.contrib.messages.storage.cookie.CookieStorage(BaseStorage)
django.contrib.messages.storage.cookie.CookieStorage._decode(self,data)
django.contrib.messages.storage.cookie.CookieStorage._encode(self,messages,encode_empty=False)
django.contrib.messages.storage.cookie.CookieStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._hash(self,value)
django.contrib.messages.storage.cookie.CookieStorage._store(self,messages,response,remove_oldest=True,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._update_cookie(self,encoded_data,response)
django.contrib.messages.storage.cookie.MessageDecoder(json.JSONDecoder)
django.contrib.messages.storage.cookie.MessageDecoder.decode(self,s,**kwargs)
django.contrib.messages.storage.cookie.MessageDecoder.process_messages(self,obj)
django.contrib.messages.storage.cookie.MessageEncoder(json.JSONEncoder)
django.contrib.messages.storage.cookie.MessageEncoder.default(self,obj)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/storage/fallback.py----------------------------------------
A:django.contrib.messages.storage.fallback.self._used_storages->set()
A:django.contrib.messages.storage.fallback.(messages, all_retrieved)->storage._get()
A:django.contrib.messages.storage.fallback.messages->storage._store(messages, response, remove_oldest=False)
django.contrib.messages.storage.fallback.FallbackStorage(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage.__init__(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._store(self,messages,response,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/storage/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/test_cookie.py----------------------------------------
A:django.contrib.messages.tests.test_cookie.encoded_data->self.get_storage()._encode(messages, encode_empty=encode_empty)
A:django.contrib.messages.tests.test_cookie.cookie->self.get_response().cookies.get(storage.cookie_name)
A:django.contrib.messages.tests.test_cookie.data->self.get_storage()._decode(cookie.value)
A:django.contrib.messages.tests.test_cookie.storage->self.get_storage()
A:django.contrib.messages.tests.test_cookie.response->self.get_response()
A:django.contrib.messages.tests.test_cookie.request->self.get_request()
A:django.contrib.messages.tests.test_cookie.msg_size->int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)
A:django.contrib.messages.tests.test_cookie.unstored_messages->self.get_storage().update(response)
A:django.contrib.messages.tests.test_cookie.cookie_storing->self.stored_messages_count(storage, response)
A:django.contrib.messages.tests.test_cookie.encoder->MessageEncoder(separators=(',', ':'))
A:django.contrib.messages.tests.test_cookie.value->MessageEncoder(separators=(',', ':')).encode(messages)
A:django.contrib.messages.tests.test_cookie.decoded_messages->json.loads(encoded_messages, cls=MessageDecoder)
A:django.contrib.messages.tests.test_cookie.message->Message(constants.DEBUG, data)
A:django.contrib.messages.tests.test_cookie.encoded->self.get_storage()._encode(message)
A:django.contrib.messages.tests.test_cookie.decoded->self.get_storage()._decode(encoded)
A:django.contrib.messages.tests.test_cookie.encoded_messages->json.dumps(encoded_messages, separators=(',', ':'))
django.contrib.messages.tests.test_cookie.CookieTest(BaseTests,TestCase)
django.contrib.messages.tests.test_cookie.CookieTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_cookie.CookieTest.test_domain(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_get(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_get_bad_cookie(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_json_encoder_decoder(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_max_cookie_length(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_pre_1_5_message_format(self)
django.contrib.messages.tests.test_cookie.CookieTest.test_safedata(self)
django.contrib.messages.tests.test_cookie.set_cookie_data(storage,messages,invalid=False,encode_empty=False)
django.contrib.messages.tests.test_cookie.stored_cookie_messages_count(storage,response)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/test_fallback.py----------------------------------------
A:django.contrib.messages.tests.test_fallback.request->self.get_request()
A:django.contrib.messages.tests.test_fallback.storage->self.get_storage()
A:django.contrib.messages.tests.test_fallback.cookie_storage->self.get_cookie_storage(storage)
A:django.contrib.messages.tests.test_fallback.session_storage->self.get_session_storage(storage)
A:django.contrib.messages.tests.test_fallback.response->self.get_response()
A:django.contrib.messages.tests.test_fallback.session_storing->self.stored_session_messages_count(storage, response)
A:django.contrib.messages.tests.test_fallback.cookie_storing->self.stored_cookie_messages_count(storage, response)
A:django.contrib.messages.tests.test_fallback.msg_size->int((CookieStorage.max_cookie_size - 54) / 4.5 - 37)
django.contrib.messages.tests.test_fallback.FallbackTest(BaseTests,TestCase)
django.contrib.messages.tests.test_fallback.FallbackTest.get_cookie_storage(self,storage)
django.contrib.messages.tests.test_fallback.FallbackTest.get_request(self)
django.contrib.messages.tests.test_fallback.FallbackTest.get_session_storage(self,storage)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_cookie_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.stored_session_messages_count(self,storage,response)
django.contrib.messages.tests.test_fallback.FallbackTest.test_flush_used_backends(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_empty(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_get_fallback_only(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_no_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_session_fallback(self)
django.contrib.messages.tests.test_fallback.FallbackTest.test_session_fallback_only(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/test_session.py----------------------------------------
A:django.contrib.messages.tests.test_session.storage.request.session[storage.session_key]->self.get_storage().serialize_messages(messages)
A:django.contrib.messages.tests.test_session.data->self.get_storage().deserialize_messages(storage.request.session.get(storage.session_key, []))
A:django.contrib.messages.tests.test_session.request->super(SessionTest, self).get_request()
A:django.contrib.messages.tests.test_session.storage->self.get_storage()
A:django.contrib.messages.tests.test_session.message->Message(constants.DEBUG, mark_safe('<b>Hello Django!</b>'))
django.contrib.messages.tests.test_session.SessionTest(BaseTests,TestCase)
django.contrib.messages.tests.test_session.SessionTest.get_request(self)
django.contrib.messages.tests.test_session.SessionTest.stored_messages_count(self,storage,response)
django.contrib.messages.tests.test_session.SessionTest.test_get(self)
django.contrib.messages.tests.test_session.SessionTest.test_safedata(self)
django.contrib.messages.tests.test_session.set_session_data(storage,messages)
django.contrib.messages.tests.test_session.stored_session_messages_count(storage)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/base.py----------------------------------------
A:django.contrib.messages.tests.base.base.LEVEL_TAGS->django.contrib.messages.utils.get_level_tags()
A:django.contrib.messages.tests.base.self.settings_override->override_settings_tags(TEMPLATE_DIRS=(), TEMPLATE_CONTEXT_PROCESSORS=global_settings.TEMPLATE_CONTEXT_PROCESSORS, MESSAGE_TAGS='', MESSAGE_STORAGE='%s.%s' % (self.storage_class.__module__, self.storage_class.__name__), SESSION_SERIALIZER='django.contrib.sessions.serializers.JSONSerializer')
A:django.contrib.messages.tests.base.storage->self.get_storage()
A:django.contrib.messages.tests.base.response->self.client.post(add_url, data, follow=True)
A:django.contrib.messages.tests.base.storing->self.stored_messages_count(storage, response)
A:django.contrib.messages.tests.base.show_url->reverse('django.contrib.messages.tests.urls.show')
A:django.contrib.messages.tests.base.add_url->reverse('django.contrib.messages.tests.urls.add', args=(level,))
A:django.contrib.messages.tests.base.data->list(storage)
A:django.contrib.messages.tests.base.request->self.get_request()
django.contrib.messages.tests.base.BaseTests(object)
django.contrib.messages.tests.base.BaseTests.get_existing_storage(self)
django.contrib.messages.tests.base.BaseTests.get_request(self)
django.contrib.messages.tests.base.BaseTests.get_response(self)
django.contrib.messages.tests.base.BaseTests.get_storage(self,data=None)
django.contrib.messages.tests.base.BaseTests.setUp(self)
django.contrib.messages.tests.base.BaseTests.stored_messages_count(self,storage,response)
django.contrib.messages.tests.base.BaseTests.tearDown(self)
django.contrib.messages.tests.base.BaseTests.test_add(self)
django.contrib.messages.tests.base.BaseTests.test_add_lazy_translation(self)
django.contrib.messages.tests.base.BaseTests.test_add_update(self)
django.contrib.messages.tests.base.BaseTests.test_custom_tags(self)
django.contrib.messages.tests.base.BaseTests.test_default_level(self)
django.contrib.messages.tests.base.BaseTests.test_existing_add(self)
django.contrib.messages.tests.base.BaseTests.test_existing_add_read_update(self)
django.contrib.messages.tests.base.BaseTests.test_existing_read(self)
django.contrib.messages.tests.base.BaseTests.test_existing_read_add_update(self)
django.contrib.messages.tests.base.BaseTests.test_full_request_response_cycle(self)
django.contrib.messages.tests.base.BaseTests.test_get(self)
django.contrib.messages.tests.base.BaseTests.test_high_level(self)
django.contrib.messages.tests.base.BaseTests.test_low_level(self)
django.contrib.messages.tests.base.BaseTests.test_middleware_disabled(self)
django.contrib.messages.tests.base.BaseTests.test_middleware_disabled_fail_silently(self)
django.contrib.messages.tests.base.BaseTests.test_multiple_posts(self)
django.contrib.messages.tests.base.BaseTests.test_no_update(self)
django.contrib.messages.tests.base.BaseTests.test_settings_level(self)
django.contrib.messages.tests.base.BaseTests.test_tags(self)
django.contrib.messages.tests.base.BaseTests.test_with_template_response(self)
django.contrib.messages.tests.base.add_level_messages(storage)
django.contrib.messages.tests.base.override_settings_tags(override_settings)
django.contrib.messages.tests.base.override_settings_tags.disable(self)
django.contrib.messages.tests.base.override_settings_tags.enable(self)
django.contrib.messages.tests.base.skipUnlessAuthIsInstalled(func)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/test_mixins.py----------------------------------------
A:django.contrib.messages.tests.test_mixins.add_url->reverse('add_success_msg')
A:django.contrib.messages.tests.test_mixins.req->self.client.post(add_url, author)
django.contrib.messages.tests.test_mixins.SuccessMessageMixinTests(TestCase)
django.contrib.messages.tests.test_mixins.SuccessMessageMixinTests.test_set_messages_success(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/test_middleware.py----------------------------------------
A:django.contrib.messages.tests.test_middleware.self.middleware->MessageMiddleware()
A:django.contrib.messages.tests.test_middleware.request->django.http.HttpRequest()
A:django.contrib.messages.tests.test_middleware.response->django.http.HttpResponse()
django.contrib.messages.tests.test_middleware.MiddlewareTest(unittest.TestCase)
django.contrib.messages.tests.test_middleware.MiddlewareTest.setUp(self)
django.contrib.messages.tests.test_middleware.MiddlewareTest.test_response_without_messages(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/messages/tests/urls.py----------------------------------------
A:django.contrib.messages.tests.urls.fail_silently->request.POST.get('fail_silently', None)
A:django.contrib.messages.tests.urls.show_url->reverse('django.contrib.messages.tests.urls.show_template_response')
A:django.contrib.messages.tests.urls.t->Template(TEMPLATE)
A:django.contrib.messages.tests.urls.name->django.forms.CharField(required=True)
A:django.contrib.messages.tests.urls.slug->django.forms.SlugField(required=True)
A:django.contrib.messages.tests.urls.urlpatterns->patterns('', ('^add/(debug|info|success|warning|error)/$', add), url('^add/msg/$', ContactFormViewWithMsg.as_view(), name='add_success_msg'), ('^show/$', show), ('^template_response/add/(debug|info|success|warning|error)/$', add_template_response), ('^template_response/show/$', show_template_response))
django.contrib.messages.tests.urls.ContactForm(forms.Form)
django.contrib.messages.tests.urls.ContactFormViewWithMsg(SuccessMessageMixin,FormView)
django.contrib.messages.tests.urls.add(request,message_type)
django.contrib.messages.tests.urls.add_template_response(request,message_type)
django.contrib.messages.tests.urls.show(request)
django.contrib.messages.tests.urls.show_template_response(request)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/humanize/tests.py----------------------------------------
A:django.contrib.humanize.tests.now->datetime.datetime(2012, 3, 9, 22, 30)
A:django.contrib.humanize.tests.t->Template('{%% load humanize %%}{{ test_content|%s }}' % method)
A:django.contrib.humanize.tests.rendered->Template('{%% load humanize %%}{{ test_content|%s }}' % method).render(Context(locals())).strip()
A:django.contrib.humanize.tests.today->datetime.date.today()
A:django.contrib.humanize.tests.someday_result->django.template.defaultfilters.date(someday)
A:django.contrib.humanize.tests.tz_one->django.utils.tzinfo.FixedOffset(datetime.timedelta(hours=-12))
A:django.contrib.humanize.tests.tz_two->django.utils.tzinfo.FixedOffset(datetime.timedelta(hours=12))
A:django.contrib.humanize.tests.date_one->datetime.datetime(today.year, today.month, today.day, tzinfo=tz_one)
A:django.contrib.humanize.tests.naturalday_one->django.contrib.humanize.templatetags.humanize.naturalday(date_one)
A:django.contrib.humanize.tests.date_two->datetime.datetime(today.year, today.month, today.day, tzinfo=tz_two)
A:django.contrib.humanize.tests.naturalday_two->django.contrib.humanize.templatetags.humanize.naturalday(date_two)
A:django.contrib.humanize.tests.dt->datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)
django.contrib.humanize.tests.HumanizeTests(TransRealMixin,TestCase)
django.contrib.humanize.tests.HumanizeTests.humanize_tester(self,test_list,result_list,method)
django.contrib.humanize.tests.HumanizeTests.test_apnumber(self)
django.contrib.humanize.tests.HumanizeTests.test_i18n_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_i18n_intword(self)
django.contrib.humanize.tests.HumanizeTests.test_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_intcomma_without_number_grouping(self)
django.contrib.humanize.tests.HumanizeTests.test_intword(self)
django.contrib.humanize.tests.HumanizeTests.test_l10n_intcomma(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday_tz(self)
django.contrib.humanize.tests.HumanizeTests.test_naturalday_uses_localtime(self)
django.contrib.humanize.tests.HumanizeTests.test_naturaltime(self)
django.contrib.humanize.tests.HumanizeTests.test_ordinal(self)
django.contrib.humanize.tests.MockDateTime(datetime.datetime)
django.contrib.humanize.tests.MockDateTime.now(self,tz=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/humanize/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/humanize/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/humanize/templatetags/humanize.py----------------------------------------
A:django.contrib.humanize.templatetags.humanize.register->django.template.Library()
A:django.contrib.humanize.templatetags.humanize.value->date(value.year, value.month, value.day)
A:django.contrib.humanize.templatetags.humanize.orig->force_text(value)
A:django.contrib.humanize.templatetags.humanize.new->re.sub('^(-?\\d+)(\\d{3})', '\\g<1>,\\g<2>', orig)
A:django.contrib.humanize.templatetags.humanize.tzinfo->getattr(value, 'tzinfo', None)
A:django.contrib.humanize.templatetags.humanize.today->datetime.datetime.now(tzinfo).date()
A:django.contrib.humanize.templatetags.humanize.now->datetime.datetime.now(utc if is_aware(value) else None)
django.contrib.humanize.templatetags.humanize.apnumber(value)
django.contrib.humanize.templatetags.humanize.intcomma(value,use_l10n=True)
django.contrib.humanize.templatetags.humanize.intword(value)
django.contrib.humanize.templatetags.humanize.naturalday(value,arg=None)
django.contrib.humanize.templatetags.humanize.naturaltime(value)
django.contrib.humanize.templatetags.humanize.ordinal(value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/contrib/humanize/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/cache.py----------------------------------------
A:django.templatetags.cache.register->Library()
A:django.templatetags.cache.expire_time->int(expire_time)
A:django.templatetags.cache.cache_key->make_template_fragment_key(self.fragment_name, vary_on)
A:django.templatetags.cache.value->self.nodelist.render(context)
A:django.templatetags.cache.nodelist->parser.parse(('endcache',))
A:django.templatetags.cache.tokens->token.split_contents()
django.templatetags.cache.CacheNode(self,nodelist,expire_time_var,fragment_name,vary_on)
django.templatetags.cache.CacheNode.__init__(self,nodelist,expire_time_var,fragment_name,vary_on)
django.templatetags.cache.CacheNode.render(self,context)
django.templatetags.cache.do_cache(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/l10n.py----------------------------------------
A:django.templatetags.l10n.register->Library()
A:django.templatetags.l10n.output->self.nodelist.render(context)
A:django.templatetags.l10n.bits->list(token.split_contents())
A:django.templatetags.l10n.nodelist->parser.parse(('endlocalize',))
django.templatetags.l10n.LocalizeNode(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__init__(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__repr__(self)
django.templatetags.l10n.LocalizeNode.render(self,context)
django.templatetags.l10n.localize(value)
django.templatetags.l10n.localize_tag(parser,token)
django.templatetags.l10n.unlocalize(value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/future.py----------------------------------------
A:django.templatetags.future.register->Library()
django.templatetags.future.cycle(parser,token)
django.templatetags.future.firstof(parser,token)
django.templatetags.future.ssi(parser,token)
django.templatetags.future.url(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/i18n.py----------------------------------------
A:django.templatetags.i18n.register->Library()
A:django.templatetags.i18n.lang_code->self.lang_code.resolve(context)
A:django.templatetags.i18n.context[self.variable]->django.utils.translation.get_language_bidi()
A:django.templatetags.i18n.langs->self.languages.resolve(context)
A:django.templatetags.i18n.self.filter_expression.var->Variable("'%s'" % self.filter_expression.var)
A:django.templatetags.i18n.self.filter_expression.var.message_context->self.message_context.resolve(context)
A:django.templatetags.i18n.output->self.nodelist.render(context)
A:django.templatetags.i18n.value->parser.compile_filter(value)
A:django.templatetags.i18n.message_context->parser.compile_filter(self.value())
A:django.templatetags.i18n.tmp_context[var]->val.resolve(context)
A:django.templatetags.i18n.(singular, vars)->self.render_token_list(self.singular)
A:django.templatetags.i18n.count->self.counter.resolve(context)
A:django.templatetags.i18n.(plural, plural_vars)->self.render_token_list(self.plural)
A:django.templatetags.i18n.result->self.render(context, nested=True)
A:django.templatetags.i18n.data->dict([(v, render_value(v)) for v in vars])
A:django.templatetags.i18n.args->parser.next_token().contents.split()
A:django.templatetags.i18n.m->re.match("^'([^']+)'(\\|.*$)", value)
A:django.templatetags.i18n.tag->self.tag()
A:django.templatetags.i18n.asvar->self.tag()
A:django.templatetags.i18n.(value, noop, asvar, message_context)->TranslateParser(token.contents).top()
A:django.templatetags.i18n.bits->parser.next_token().split_contents()
A:django.templatetags.i18n.option->remaining_bits.pop(0)
A:django.templatetags.i18n.extra_context->options.get('with', {})
A:django.templatetags.i18n.token->parser.next_token()
A:django.templatetags.i18n.language->parser.compile_filter(bits[1])
A:django.templatetags.i18n.nodelist->parser.parse(('endlanguage',))
django.templatetags.i18n.BlockTranslateNode(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None)
django.templatetags.i18n.BlockTranslateNode.__init__(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None)
django.templatetags.i18n.BlockTranslateNode.render(self,context,nested=False)
django.templatetags.i18n.BlockTranslateNode.render_token_list(self,tokens)
django.templatetags.i18n.GetAvailableLanguagesNode(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.__init__(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageBidiNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoListNode(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.__init__(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.get_language_info(self,language)
django.templatetags.i18n.GetLanguageInfoListNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoNode(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.__init__(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.render(self,context)
django.templatetags.i18n.LanguageNode(self,nodelist,language)
django.templatetags.i18n.LanguageNode.__init__(self,nodelist,language)
django.templatetags.i18n.LanguageNode.render(self,context)
django.templatetags.i18n.TranslateNode(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.__init__(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.render(self,context)
django.templatetags.i18n.do_block_translate(parser,token)
django.templatetags.i18n.do_get_available_languages(parser,token)
django.templatetags.i18n.do_get_current_language(parser,token)
django.templatetags.i18n.do_get_current_language_bidi(parser,token)
django.templatetags.i18n.do_get_language_info(parser,token)
django.templatetags.i18n.do_get_language_info_list(parser,token)
django.templatetags.i18n.do_translate(parser,token)
django.templatetags.i18n.language(parser,token)
django.templatetags.i18n.language_bidi(lang_code)
django.templatetags.i18n.language_name(lang_code)
django.templatetags.i18n.language_name_local(lang_code)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/static.py----------------------------------------
A:django.templatetags.static.register->django.template.Library()
A:django.templatetags.static.tokens->token.contents.split()
A:django.templatetags.static.prefix->self.handle_simple(self.name)
A:django.templatetags.static.path->parser.compile_filter(bits[1])
A:django.templatetags.static.url->self.url(context)
A:django.templatetags.static.bits->token.split_contents()
django.templatetags.static.PrefixNode(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__init__(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__repr__(self)
django.templatetags.static.PrefixNode.handle_simple(cls,name)
django.templatetags.static.PrefixNode.handle_token(cls,parser,token,name)
django.templatetags.static.PrefixNode.render(self,context)
django.templatetags.static.StaticNode(self,varname=None,path=None)
django.templatetags.static.StaticNode.__init__(self,varname=None,path=None)
django.templatetags.static.StaticNode.handle_simple(cls,path)
django.templatetags.static.StaticNode.handle_token(cls,parser,token)
django.templatetags.static.StaticNode.render(self,context)
django.templatetags.static.StaticNode.url(self,context)
django.templatetags.static.do_static(parser,token)
django.templatetags.static.get_media_prefix(parser,token)
django.templatetags.static.get_static_prefix(parser,token)
django.templatetags.static.static(path)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/tz.py----------------------------------------
A:django.templatetags.tz.register->Library()
A:django.templatetags.tz.default_timezone->django.utils.timezone.get_default_timezone()
A:django.templatetags.tz.value->django.utils.timezone.make_aware(value, default_timezone)
A:django.templatetags.tz.tz->parser.compile_filter(bits[1])
A:django.templatetags.tz.result->datetimeobject(result.year, result.month, result.day, result.hour, result.minute, result.second, result.microsecond, result.tzinfo)
A:django.templatetags.tz.output->self.nodelist.render(context)
A:django.templatetags.tz.context[self.variable]->django.utils.timezone.get_current_timezone_name()
A:django.templatetags.tz.bits->token.split_contents()
A:django.templatetags.tz.nodelist->parser.parse(('endtimezone',))
A:django.templatetags.tz.args->token.contents.split()
django.templatetags.tz.GetCurrentTimezoneNode(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.__init__(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.render(self,context)
django.templatetags.tz.LocalTimeNode(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.__init__(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.render(self,context)
django.templatetags.tz.TimezoneNode(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.__init__(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.render(self,context)
django.templatetags.tz.datetimeobject(datetime,object)
django.templatetags.tz.do_timezone(value,arg)
django.templatetags.tz.get_current_timezone_tag(parser,token)
django.templatetags.tz.localtime(value)
django.templatetags.tz.localtime_tag(parser,token)
django.templatetags.tz.timezone_tag(parser,token)
django.templatetags.tz.utc(value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/__init__.py----------------------------------------
A:django.conf.__init__.self._wrapped->Settings(settings_module)
A:django.conf.__init__.logging_config_func->import_by_path(self.LOGGING_CONFIG)
A:django.conf.__init__.holder->UserSettingsHolder(default_settings)
A:django.conf.__init__.mod->django.utils.importlib.import_module(self.SETTINGS_MODULE)
A:django.conf.__init__.setting_value->getattr(mod, setting)
A:django.conf.__init__.self.__dict__['_deleted']->set()
A:django.conf.__init__.settings->LazySettings()
django.conf.__init__.BaseSettings(object)
django.conf.__init__.BaseSettings.__setattr__(self,name,value)
django.conf.__init__.LazySettings(LazyObject)
django.conf.__init__.LazySettings.__getattr__(self,name)
django.conf.__init__.LazySettings._configure_logging(self)
django.conf.__init__.LazySettings._setup(self,name=None)
django.conf.__init__.LazySettings.configure(self,default_settings=global_settings,**options)
django.conf.__init__.LazySettings.configured(self)
django.conf.__init__.Settings(self,settings_module)
django.conf.__init__.Settings.__init__(self,settings_module)
django.conf.__init__.UserSettingsHolder(self,default_settings)
django.conf.__init__.UserSettingsHolder.__delattr__(self,name)
django.conf.__init__.UserSettingsHolder.__dir__(self)
django.conf.__init__.UserSettingsHolder.__getattr__(self,name)
django.conf.__init__.UserSettingsHolder.__init__(self,default_settings)
django.conf.__init__.UserSettingsHolder.__setattr__(self,name,value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/global_settings.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/app_template/tests.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/app_template/admin.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/app_template/views.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/app_template/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/app_template/models.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/urls/i18n.py----------------------------------------
A:django.conf.urls.i18n.pattern_list->patterns(prefix, *args)
A:django.conf.urls.i18n.urlpatterns->patterns('', url('^setlang/$', 'django.views.i18n.set_language', name='set_language'))
django.conf.urls.i18n.i18n_patterns(prefix,*args)


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/urls/static.py----------------------------------------
django.conf.urls.static.static(prefix,view='django.views.static.serve',**kwargs)


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/urls/shortcut.py----------------------------------------
A:django.conf.urls.shortcut.urlpatterns->patterns('django.views', ('^(?P<content_type_id>\\d+)/(?P<object_id>.*)/$', 'defaults.shortcut'))


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/urls/__init__.py----------------------------------------
A:django.conf.urls.__init__.urlconf_module->import_module(urlconf_module)
A:django.conf.urls.__init__.patterns->getattr(urlconf_module, 'urlpatterns', urlconf_module)
A:django.conf.urls.__init__.t->url(*t, prefix=prefix)
django.conf.urls.__init__.include(arg,namespace=None,app_name=None)
django.conf.urls.__init__.patterns(prefix,*args)
django.conf.urls.__init__.url(regex,view,kwargs=None,name=None,prefix='')


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/is/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/is/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/th/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/th/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/en_GB/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/en_GB/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/mk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/mk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/eu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/eu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sr_Latn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sr_Latn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/de/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/de/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ja/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ja/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/zh_CN/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/zh_CN/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/da/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/da/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/it/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/it/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/te/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/te/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bg/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/id/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/id/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ar/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ar/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/gl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/gl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_MX/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_MX/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ro/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ro/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/en/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/en/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_NI/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_NI/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/mn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/mn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ru/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ru/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/cs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/cs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/lv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/lv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ta/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fy_NL/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fy_NL/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ml/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ml/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/cy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/cy/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/tr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/tr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/he/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/he/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ko/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ko/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nb/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nb/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/bn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/el/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/el/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ca/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ca/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ka/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ka/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fa/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/fa/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_AR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_AR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/uk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/uk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/de_CH/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/de_CH/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/nn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/et/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/et/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pt_BR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pt_BR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/km/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/km/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/pl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_PR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/es_PR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/hi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/zh_TW/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/zh_TW/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ga/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/ga/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/kn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/kn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/lt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/lt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sq/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/sq/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/vi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/locale/vi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/project_template/manage.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/project_template/project_name/settings.py----------------------------------------
A:django.conf.project_template.project_name.settings.BASE_DIR->os.path.dirname(os.path.dirname(__file__))


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/project_template/project_name/wsgi.py----------------------------------------
A:django.conf.project_template.project_name.wsgi.application->get_wsgi_application()


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/project_template/project_name/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/conf/project_template/project_name/urls.py----------------------------------------
A:django.conf.project_template.project_name.urls.urlpatterns->patterns('', url('^admin/', include(admin.site.urls)))


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/defaultfilters.py----------------------------------------
A:django.template.defaultfilters.register->Library()
A:django.template.defaultfilters.args->list(args)
A:django.template.defaultfilters.args[0]->force_text(args[0])
A:django.template.defaultfilters._dec._decorated_function->getattr(func, '_decorated_function', func)
A:django.template.defaultfilters.input_val->force_text(text)
A:django.template.defaultfilters.d->Decimal(force_text(float(text)))
A:django.template.defaultfilters.p->int(arg)
A:django.template.defaultfilters.exp->Decimal(1)
A:django.template.defaultfilters.tupl->Decimal(force_text(float(text))).as_tuple()
A:django.template.defaultfilters.(sign, digits, exponent)->Decimal(force_text(float(text))).quantize(exp, ROUND_HALF_UP, Context(prec=prec)).as_tuple()
A:django.template.defaultfilters.number->''.join(reversed(digits))
A:django.template.defaultfilters.lines->int(value).split('\n')
A:django.template.defaultfilters.width->django.utils.six.text_type(len(six.text_type(len(lines))))
A:django.template.defaultfilters.t->re.sub("([a-z])'([A-Z])", lambda m: m.group(0).lower(), value.title())
A:django.template.defaultfilters.length->int(arg)
A:django.template.defaultfilters.safe->isinstance(value, SafeData)
A:django.template.defaultfilters.value->int(value)
A:django.template.defaultfilters.data->conditional_escape(arg).join(value)
A:django.template.defaultfilters.(item, old_style_list)->convert_old_style_list(sublist)
A:django.template.defaultfilters.list_length->len(list_)
A:django.template.defaultfilters.sublist->_helper(sublist_item, tabs + 1)
A:django.template.defaultfilters.(value, converted)->convert_old_style_list(value)
A:django.template.defaultfilters.arg->ugettext('yes,no,maybe')
A:django.template.defaultfilters.bits->ugettext('yes,no,maybe').split(',')
A:django.template.defaultfilters.bytes->float(bytes)
django.template.defaultfilters.add(value,arg)
django.template.defaultfilters.addslashes(value)
django.template.defaultfilters.capfirst(value)
django.template.defaultfilters.center(value,arg)
django.template.defaultfilters.cut(value,arg)
django.template.defaultfilters.date(value,arg=None)
django.template.defaultfilters.default(value,arg)
django.template.defaultfilters.default_if_none(value,arg)
django.template.defaultfilters.dictsort(value,arg)
django.template.defaultfilters.dictsortreversed(value,arg)
django.template.defaultfilters.divisibleby(value,arg)
django.template.defaultfilters.escape_filter(value)
django.template.defaultfilters.escapejs_filter(value)
django.template.defaultfilters.filesizeformat(bytes)
django.template.defaultfilters.first(value)
django.template.defaultfilters.fix_ampersands_filter(value)
django.template.defaultfilters.floatformat(text,arg=-1)
django.template.defaultfilters.force_escape(value)
django.template.defaultfilters.get_digit(value,arg)
django.template.defaultfilters.iriencode(value)
django.template.defaultfilters.join(value,arg,autoescape=None)
django.template.defaultfilters.last(value)
django.template.defaultfilters.length(value)
django.template.defaultfilters.length_is(value,arg)
django.template.defaultfilters.linebreaks_filter(value,autoescape=None)
django.template.defaultfilters.linebreaksbr(value,autoescape=None)
django.template.defaultfilters.linenumbers(value,autoescape=None)
django.template.defaultfilters.ljust(value,arg)
django.template.defaultfilters.lower(value)
django.template.defaultfilters.make_list(value)
django.template.defaultfilters.phone2numeric_filter(value)
django.template.defaultfilters.pluralize(value,arg='s')
django.template.defaultfilters.pprint(value)
django.template.defaultfilters.random(value)
django.template.defaultfilters.removetags(value,tags)
django.template.defaultfilters.rjust(value,arg)
django.template.defaultfilters.safe(value)
django.template.defaultfilters.safeseq(value)
django.template.defaultfilters.slice_filter(value,arg)
django.template.defaultfilters.slugify(value)
django.template.defaultfilters.stringfilter(func)
django.template.defaultfilters.stringformat(value,arg)
django.template.defaultfilters.striptags(value)
django.template.defaultfilters.time(value,arg=None)
django.template.defaultfilters.timesince_filter(value,arg=None)
django.template.defaultfilters.timeuntil_filter(value,arg=None)
django.template.defaultfilters.title(value)
django.template.defaultfilters.truncatechars(value,arg)
django.template.defaultfilters.truncatewords(value,arg)
django.template.defaultfilters.truncatewords_html(value,arg)
django.template.defaultfilters.unordered_list(value,autoescape=None)
django.template.defaultfilters.upper(value)
django.template.defaultfilters.urlencode(value,safe=None)
django.template.defaultfilters.urlize(value,autoescape=None)
django.template.defaultfilters.urlizetrunc(value,limit,autoescape=None)
django.template.defaultfilters.wordcount(value)
django.template.defaultfilters.wordwrap(value,arg)
django.template.defaultfilters.yesno(value,arg=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/defaulttags.py----------------------------------------
A:django.template.defaulttags.register->Library()
A:django.template.defaulttags.output->self.nodelist.render(context)
A:django.template.defaulttags.csrf_token->context.get('csrf_token', None)
A:django.template.defaulttags.context.render_context[self]->itertools_cycle(self.cyclevars)
A:django.template.defaulttags.value->float(value)
A:django.template.defaulttags.filtered->self.filter_expr.resolve(context)
A:django.template.defaulttags.self.nodelist_empty->NodeList()
A:django.template.defaulttags.values->dict([(key, val.resolve(context)) for (key, val) in six.iteritems(self.extra_context)])
A:django.template.defaulttags.len_values->len(values)
A:django.template.defaulttags.nodelist->parser.parse(('endwith',))
A:django.template.defaulttags.unpacked_vars->dict(zip(self.loopvars, item))
A:django.template.defaulttags.state_frame->self._get_context_stack_frame(context)
A:django.template.defaulttags.compare_tonodelist_true_output->self.nodelist_true.render(context)
A:django.template.defaulttags.val1->parser.compile_filter(bits[1])
A:django.template.defaulttags.val2->parser.compile_filter(bits[2])
A:django.template.defaulttags.match->django.template.base.kwarg_re.match(bit)
A:django.template.defaulttags.obj_list->self.target.resolve(context, True)
A:django.template.defaulttags.filepath->parser.compile_filter(bits[1])
A:django.template.defaulttags.t->Template(output, name=filepath)
A:django.template.defaulttags.kwargs->dict([(smart_text(k, 'ascii'), v.resolve(context)) for (k, v) in self.kwargs.items()])
A:django.template.defaulttags.view_name->self.view_name.resolve(context)
A:django.template.defaulttags.url->reverse(project_name + '.' + view_name, args=args, kwargs=kwargs, current_app=context.current_app)
A:django.template.defaulttags.exc_info->sys.exc_info()
A:django.template.defaulttags.max_value->float(max_value)
A:django.template.defaulttags.max_width->int(self.max_width.resolve(context))
A:django.template.defaulttags.args->parser.next_token().split_contents()
A:django.template.defaulttags.node->CycleNode(values, escape=escape)
A:django.template.defaulttags.(_, rest)->parser.next_token().contents.split(None, 1)
A:django.template.defaulttags.filter_expr->parser.compile_filter('var|%s' % rest)
A:django.template.defaulttags.filter_name->getattr(func, '_filter_name', None)
A:django.template.defaulttags.bits->parser.next_token().split_contents()
A:django.template.defaulttags.loopvars->re.split(' *, *', ' '.join(bits[1:in_index]))
A:django.template.defaulttags.sequence->parser.compile_filter(bits[in_index + 1])
A:django.template.defaulttags.nodelist_loop->parser.parse(('empty', 'endfor'))
A:django.template.defaulttags.token->parser.next_token()
A:django.template.defaulttags.nodelist_empty->parser.parse(('endfor',))
A:django.template.defaulttags.nodelist_true->parser.parse(('else', 'endifchanged'))
A:django.template.defaulttags.nodelist_false->NodeList()
A:django.template.defaulttags.condition->TemplateIfParser(parser, bits).parse()
A:django.template.defaulttags.lib->get_library(taglib)
A:django.template.defaulttags.temp_lib->Library()
A:django.template.defaulttags.target->parser.compile_filter(bits[1])
A:django.template.defaulttags.expression->parser.compile_filter(var_name + VARIABLE_ATTRIBUTE_SEPARATOR + bits[3])
A:django.template.defaulttags.viewname->parser.compile_filter(bits[1])
A:django.template.defaulttags.(name, value)->django.template.base.kwarg_re.match(bit).groups()
A:django.template.defaulttags.kwargs[name]->parser.compile_filter(value)
A:django.template.defaulttags.extra_context->token_kwargs(remaining_bits, parser, support_legacy=True)
django.template.defaulttags.AutoEscapeControlNode(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.__init__(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.render(self,context)
django.template.defaulttags.CommentNode(Node)
django.template.defaulttags.CommentNode.render(self,context)
django.template.defaulttags.CsrfTokenNode(Node)
django.template.defaulttags.CsrfTokenNode.render(self,context)
django.template.defaulttags.CycleNode(self,cyclevars,variable_name=None,silent=False,escape=False)
django.template.defaulttags.CycleNode.__init__(self,cyclevars,variable_name=None,silent=False,escape=False)
django.template.defaulttags.CycleNode.render(self,context)
django.template.defaulttags.DebugNode(Node)
django.template.defaulttags.DebugNode.render(self,context)
django.template.defaulttags.FilterNode(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.__init__(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.render(self,context)
django.template.defaulttags.FirstOfNode(self,variables,escape=False)
django.template.defaulttags.FirstOfNode.__init__(self,variables,escape=False)
django.template.defaulttags.FirstOfNode.render(self,context)
django.template.defaulttags.ForNode(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__init__(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__iter__(self)
django.template.defaulttags.ForNode.__repr__(self)
django.template.defaulttags.ForNode.render(self,context)
django.template.defaulttags.IfChangedNode(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode.__init__(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode._get_context_stack_frame(self,context)
django.template.defaulttags.IfChangedNode.render(self,context)
django.template.defaulttags.IfEqualNode(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__init__(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__repr__(self)
django.template.defaulttags.IfEqualNode.render(self,context)
django.template.defaulttags.IfNode(self,conditions_nodelists)
django.template.defaulttags.IfNode.__init__(self,conditions_nodelists)
django.template.defaulttags.IfNode.__iter__(self)
django.template.defaulttags.IfNode.__repr__(self)
django.template.defaulttags.IfNode.nodelist(self)
django.template.defaulttags.IfNode.render(self,context)
django.template.defaulttags.LoadNode(Node)
django.template.defaulttags.LoadNode.render(self,context)
django.template.defaulttags.NowNode(self,format_string)
django.template.defaulttags.NowNode.__init__(self,format_string)
django.template.defaulttags.NowNode.render(self,context)
django.template.defaulttags.RegroupNode(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.__init__(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.render(self,context)
django.template.defaulttags.RegroupNode.resolve_expression(self,obj,context)
django.template.defaulttags.SpacelessNode(self,nodelist)
django.template.defaulttags.SpacelessNode.__init__(self,nodelist)
django.template.defaulttags.SpacelessNode.render(self,context)
django.template.defaulttags.SsiNode(self,filepath,parsed)
django.template.defaulttags.SsiNode.__init__(self,filepath,parsed)
django.template.defaulttags.SsiNode.render(self,context)
django.template.defaulttags.TemplateIfParser(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.__init__(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.create_var(self,value)
django.template.defaulttags.TemplateLiteral(self,value,text)
django.template.defaulttags.TemplateLiteral.__init__(self,value,text)
django.template.defaulttags.TemplateLiteral.display(self)
django.template.defaulttags.TemplateLiteral.eval(self,context)
django.template.defaulttags.TemplateTagNode(self,tagtype)
django.template.defaulttags.TemplateTagNode.__init__(self,tagtype)
django.template.defaulttags.TemplateTagNode.render(self,context)
django.template.defaulttags.URLNode(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.__init__(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.render(self,context)
django.template.defaulttags.VerbatimNode(self,content)
django.template.defaulttags.VerbatimNode.__init__(self,content)
django.template.defaulttags.VerbatimNode.render(self,context)
django.template.defaulttags.WidthRatioNode(self,val_expr,max_expr,max_width)
django.template.defaulttags.WidthRatioNode.__init__(self,val_expr,max_expr,max_width)
django.template.defaulttags.WidthRatioNode.render(self,context)
django.template.defaulttags.WithNode(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__init__(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__repr__(self)
django.template.defaulttags.WithNode.render(self,context)
django.template.defaulttags.autoescape(parser,token)
django.template.defaulttags.comment(parser,token)
django.template.defaulttags.csrf_token(parser,token)
django.template.defaulttags.cycle(parser,token,escape=False)
django.template.defaulttags.debug(parser,token)
django.template.defaulttags.do_filter(parser,token)
django.template.defaulttags.do_for(parser,token)
django.template.defaulttags.do_if(parser,token)
django.template.defaulttags.do_ifequal(parser,token,negate)
django.template.defaulttags.do_with(parser,token)
django.template.defaulttags.firstof(parser,token,escape=False)
django.template.defaulttags.ifchanged(parser,token)
django.template.defaulttags.ifequal(parser,token)
django.template.defaulttags.ifnotequal(parser,token)
django.template.defaulttags.include_is_allowed(filepath)
django.template.defaulttags.load(parser,token)
django.template.defaulttags.now(parser,token)
django.template.defaulttags.regroup(parser,token)
django.template.defaulttags.spaceless(parser,token)
django.template.defaulttags.ssi(parser,token)
django.template.defaulttags.templatetag(parser,token)
django.template.defaulttags.url(parser,token)
django.template.defaulttags.verbatim(parser,token)
django.template.defaulttags.widthratio(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/smartif.py----------------------------------------
A:django.template.smartif.self.second->parser.expression(bp)
A:django.template.smartif.self.first->parser.expression(bp)
A:django.template.smartif.EndToken->EndToken()
A:django.template.smartif.l->len(tokens)
A:django.template.smartif.self.current_token->self.next_token()
A:django.template.smartif.retval->self.expression()
A:django.template.smartif.left->t.led(left, self)
django.template.smartif.EndToken(TokenBase)
django.template.smartif.EndToken.nud(self,parser)
django.template.smartif.IfParser(self,tokens)
django.template.smartif.IfParser.__init__(self,tokens)
django.template.smartif.IfParser.create_var(self,value)
django.template.smartif.IfParser.expression(self,rbp=0)
django.template.smartif.IfParser.next_token(self)
django.template.smartif.IfParser.parse(self)
django.template.smartif.IfParser.translate_token(self,token)
django.template.smartif.Literal(self,value)
django.template.smartif.Literal.__init__(self,value)
django.template.smartif.Literal.__repr__(self)
django.template.smartif.Literal.display(self)
django.template.smartif.Literal.eval(self,context)
django.template.smartif.Literal.nud(self,parser)
django.template.smartif.TokenBase(object)
django.template.smartif.TokenBase.__repr__(self)
django.template.smartif.TokenBase.display(self)
django.template.smartif.TokenBase.led(self,left,parser)
django.template.smartif.TokenBase.nud(self,parser)
django.template.smartif.infix(bp,func)
django.template.smartif.prefix(bp,func)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/debug.py----------------------------------------
A:django.template.debug.(start, end)->match.span()
A:django.template.debug.token->super(DebugLexer, self).create_token(token_string, in_tag)
A:django.template.debug.e->TemplateSyntaxError(msg)
A:django.template.debug.(command, source)->self.command_stack.pop()
A:django.template.debug.output->force_text(output)
django.template.debug.DebugLexer(self,template_string,origin)
django.template.debug.DebugLexer.__init__(self,template_string,origin)
django.template.debug.DebugLexer.create_token(self,token_string,source,in_tag)
django.template.debug.DebugLexer.tokenize(self)
django.template.debug.DebugNodeList(NodeList)
django.template.debug.DebugNodeList.render_node(self,node,context)
django.template.debug.DebugParser(self,lexer)
django.template.debug.DebugParser.__init__(self,lexer)
django.template.debug.DebugParser.compile_filter_error(self,token,e)
django.template.debug.DebugParser.compile_function_error(self,token,e)
django.template.debug.DebugParser.create_nodelist(self)
django.template.debug.DebugParser.create_variable_node(self,contents)
django.template.debug.DebugParser.enter_command(self,command,token)
django.template.debug.DebugParser.error(self,token,msg)
django.template.debug.DebugParser.exit_command(self)
django.template.debug.DebugParser.extend_nodelist(self,nodelist,node,token)
django.template.debug.DebugParser.source_error(self,source,msg)
django.template.debug.DebugParser.unclosed_block_tag(self,parse_until)
django.template.debug.DebugVariableNode(VariableNode)
django.template.debug.DebugVariableNode.render(self,context)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/base.py----------------------------------------
A:django.template.base.tag_re->re.compile('(%s.*?%s|%s.*?%s|%s.*?%s)' % (re.escape(BLOCK_TAG_START), re.escape(BLOCK_TAG_END), re.escape(VARIABLE_TAG_START), re.escape(VARIABLE_TAG_END), re.escape(COMMENT_TAG_START), re.escape(COMMENT_TAG_END)))
A:django.template.base.template_string->force_text(template_string)
A:django.template.base.origin->StringOrigin(template_string)
A:django.template.base.self.nodelist->compile_string(template_string, origin)
A:django.template.base.lexer->lexer_class(template_string, origin)
A:django.template.base.parser->parser_class(lexer.tokenize())
A:django.template.base.bits->iter(smart_split(self.contents))
A:django.template.base.bit->self.render_node(node, context)
A:django.template.base.block_content->token_string[2:-2].strip()
A:django.template.base.token->self.next_token()
A:django.template.base.content->token_string[2:-2].strip()
A:django.template.base.nodelist->getattr(self, attr, None)
A:django.template.base.filter_expression->self.compile_filter(token.contents)
A:django.template.base.var_node->self.create_variable_node(filter_expression)
A:django.template.base.compiled_result->compile_func(self, token)
A:django.template.base.self.tagname->self.tag()
A:django.template.base.self.pointer->self.backout.pop()
A:django.template.base.i->next_space_index(subject, i)
A:django.template.base.constant_string->constant_string.replace('\n', '').replace('\n', '')
A:django.template.base.filter_re->re.compile(filter_raw_string, re.UNICODE | re.VERBOSE)
A:django.template.base.matches->re.compile(filter_raw_string, re.UNICODE | re.VERBOSE).finditer(token)
A:django.template.base.start->kwarg_re.match(bits[0]).start()
A:django.template.base.(var, constant)->kwarg_re.match(bits[0]).group('var', 'constant')
A:django.template.base.var_obj->Variable(var)
A:django.template.base.filter_name->kwarg_re.match(bits[0]).group('filter_name')
A:django.template.base.(constant_arg, var_arg)->kwarg_re.match(bits[0]).group('constant_arg', 'var_arg')
A:django.template.base.filter_func->parser_class(lexer.tokenize()).find_filter(filter_name)
A:django.template.base.upto->kwarg_re.match(bits[0]).end()
A:django.template.base.obj->mark_for_escaping(new_obj)
A:django.template.base.new_obj->func(obj, *arg_vals)
A:django.template.base.provided->list(provided)
A:django.template.base.plen->len(provided)
A:django.template.base.func->getattr(func, '_decorated_function', func)
A:django.template.base.(args, varargs, varkw, defaults)->getargspec(func)
A:django.template.base.args_check->staticmethod(args_check)
A:django.template.base.self.literal->mark_safe(unescape_string_literal(var))
A:django.template.base.self.lookups->tuple(var.split(VARIABLE_ATTRIBUTE_SEPARATOR))
A:django.template.base.value->force_text(value)
A:django.template.base.current->current()
A:django.template.base.output->self.filter_expression.resolve(context)
A:django.template.base.kwarg_re->re.compile('(?:(\\w+)=)?(.+)')
A:django.template.base.match->re.compile('(?:(\\w+)=)?(.+)').match(bits[0])
A:django.template.base.(key, value)->re.compile('(?:(\\w+)=)?(.+)').match(bits[0]).groups()
A:django.template.base.kwargs[key]->parser_class(lexer.tokenize()).compile_filter(value)
A:django.template.base.unhandled_params->list(params)
A:django.template.base.kwarg->token_kwargs([bit], parser)
A:django.template.base.(args, kwargs)->parse_bits(parser, bits, params, varargs, varkw, defaults, takes_context, function_name)
A:django.template.base.resolved_kwargs->dict(((k, v.resolve(context)) for (k, v) in self.kwargs.items()))
A:django.template.base.(params, varargs, varkw, defaults)->getargspec(func)
A:django.template.base.(resolved_args, resolved_kwargs)->self.get_resolved_arguments(context)
A:django.template.base.compile_func->partial(generic_tag_compiler, params=params, varargs=varargs, varkw=varkw, defaults=defaults, name=function_name, takes_context=takes_context, node_class=InclusionNode)
A:django.template.base.context[self.target_var]->func(*resolved_args, **resolved_kwargs)
A:django.template.base._dict->func(*resolved_args, **resolved_kwargs)
A:django.template.base.t->get_template(file_name)
A:django.template.base.new_context->context_class(_dict, **{'autoescape': context.autoescape, 'current_app': context.current_app, 'use_l10n': context.use_l10n, 'use_tz': context.use_tz})
A:django.template.base.csrf_token->context.get('csrf_token', None)
A:django.template.base.(path, module)->name.rsplit('.', 1)
A:django.template.base.package->import_module(path)
A:django.template.base.mod->import_module(taglib_module)
A:django.template.base.lib->import_library(taglib_module)
A:django.template.base.templatetags_modules->get_templatetags_modules()
django.template.FilterExpression(self,token,parser)
django.template.FilterExpression.__str__(self)
django.template.FilterExpression.args_check(name,func,provided)
django.template.FilterExpression.resolve(self,context,ignore_failures=False)
django.template.InvalidTemplateLibrary(Exception)
django.template.Lexer(self,template_string,origin)
django.template.Lexer.create_token(self,token_string,in_tag)
django.template.Lexer.tokenize(self)
django.template.Library(self)
django.template.Library.assignment_tag(self,func=None,takes_context=None,name=None)
django.template.Library.filter(self,name=None,filter_func=None,**flags)
django.template.Library.filter_function(self,func,**flags)
django.template.Library.inclusion_tag(self,file_name,context_class=Context,takes_context=False,name=None)
django.template.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.Library.tag(self,name=None,compile_function=None)
django.template.Library.tag_function(self,func)
django.template.Node(object)
django.template.Node.__iter__(self)
django.template.Node.get_nodes_by_type(self,nodetype)
django.template.Node.render(self,context)
django.template.NodeList(list)
django.template.NodeList.get_nodes_by_type(self,nodetype)
django.template.NodeList.render(self,context)
django.template.NodeList.render_node(self,node,context)
django.template.Origin(self,name)
django.template.Origin.__str__(self)
django.template.Origin.reload(self)
django.template.Parser(self,tokens)
django.template.Parser.add_library(self,lib)
django.template.Parser.compile_filter(self,token)
django.template.Parser.compile_filter_error(self,token,e)
django.template.Parser.compile_function_error(self,token,e)
django.template.Parser.create_nodelist(self)
django.template.Parser.create_variable_node(self,filter_expression)
django.template.Parser.delete_first_token(self)
django.template.Parser.empty_block_tag(self,token)
django.template.Parser.empty_variable(self,token)
django.template.Parser.enter_command(self,command,token)
django.template.Parser.error(self,token,msg)
django.template.Parser.exit_command(self)
django.template.Parser.extend_nodelist(self,nodelist,node,token)
django.template.Parser.find_filter(self,filter_name)
django.template.Parser.invalid_block_tag(self,token,command,parse_until=None)
django.template.Parser.next_token(self)
django.template.Parser.parse(self,parse_until=None)
django.template.Parser.prepend_token(self,token)
django.template.Parser.skip_past(self,endtag)
django.template.Parser.unclosed_block_tag(self,parse_until)
django.template.StringOrigin(self,source)
django.template.StringOrigin.reload(self)
django.template.Template(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.Template.__iter__(self)
django.template.Template._render(self,context)
django.template.Template.render(self,context)
django.template.TemplateDoesNotExist(Exception)
django.template.TemplateEncodingError(Exception)
django.template.TemplateSyntaxError(Exception)
django.template.TextNode(self,s)
django.template.TextNode.__repr__(self)
django.template.TextNode.render(self,context)
django.template.Token(self,token_type,contents)
django.template.Token.__str__(self)
django.template.Token.split_contents(self)
django.template.TokenParser(self,subject)
django.template.TokenParser.back(self)
django.template.TokenParser.more(self)
django.template.TokenParser.tag(self)
django.template.TokenParser.top(self)
django.template.TokenParser.value(self)
django.template.Variable(self,var)
django.template.Variable.__repr__(self)
django.template.Variable.__str__(self)
django.template.Variable._resolve_lookup(self,context)
django.template.Variable.resolve(self,context)
django.template.VariableDoesNotExist(self,msg,params=())
django.template.VariableDoesNotExist.__str__(self)
django.template.VariableNode(self,filter_expression)
django.template.VariableNode.__repr__(self)
django.template.VariableNode.render(self,context)
django.template.add_to_builtins(module)
django.template.base.FilterExpression(self,token,parser)
django.template.base.FilterExpression.__init__(self,token,parser)
django.template.base.FilterExpression.__str__(self)
django.template.base.FilterExpression.args_check(name,func,provided)
django.template.base.FilterExpression.resolve(self,context,ignore_failures=False)
django.template.base.InvalidTemplateLibrary(Exception)
django.template.base.Lexer(self,template_string,origin)
django.template.base.Lexer.__init__(self,template_string,origin)
django.template.base.Lexer.create_token(self,token_string,in_tag)
django.template.base.Lexer.tokenize(self)
django.template.base.Library(self)
django.template.base.Library.__init__(self)
django.template.base.Library.assignment_tag(self,func=None,takes_context=None,name=None)
django.template.base.Library.filter(self,name=None,filter_func=None,**flags)
django.template.base.Library.filter_function(self,func,**flags)
django.template.base.Library.inclusion_tag(self,file_name,context_class=Context,takes_context=False,name=None)
django.template.base.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.base.Library.tag(self,name=None,compile_function=None)
django.template.base.Library.tag_function(self,func)
django.template.base.Node(object)
django.template.base.Node.__iter__(self)
django.template.base.Node.get_nodes_by_type(self,nodetype)
django.template.base.Node.render(self,context)
django.template.base.NodeList(list)
django.template.base.NodeList.get_nodes_by_type(self,nodetype)
django.template.base.NodeList.render(self,context)
django.template.base.NodeList.render_node(self,node,context)
django.template.base.Origin(self,name)
django.template.base.Origin.__init__(self,name)
django.template.base.Origin.__str__(self)
django.template.base.Origin.reload(self)
django.template.base.Parser(self,tokens)
django.template.base.Parser.__init__(self,tokens)
django.template.base.Parser.add_library(self,lib)
django.template.base.Parser.compile_filter(self,token)
django.template.base.Parser.compile_filter_error(self,token,e)
django.template.base.Parser.compile_function_error(self,token,e)
django.template.base.Parser.create_nodelist(self)
django.template.base.Parser.create_variable_node(self,filter_expression)
django.template.base.Parser.delete_first_token(self)
django.template.base.Parser.empty_block_tag(self,token)
django.template.base.Parser.empty_variable(self,token)
django.template.base.Parser.enter_command(self,command,token)
django.template.base.Parser.error(self,token,msg)
django.template.base.Parser.exit_command(self)
django.template.base.Parser.extend_nodelist(self,nodelist,node,token)
django.template.base.Parser.find_filter(self,filter_name)
django.template.base.Parser.invalid_block_tag(self,token,command,parse_until=None)
django.template.base.Parser.next_token(self)
django.template.base.Parser.parse(self,parse_until=None)
django.template.base.Parser.prepend_token(self,token)
django.template.base.Parser.skip_past(self,endtag)
django.template.base.Parser.unclosed_block_tag(self,parse_until)
django.template.base.StringOrigin(self,source)
django.template.base.StringOrigin.__init__(self,source)
django.template.base.StringOrigin.reload(self)
django.template.base.TagHelperNode(self,takes_context,args,kwargs)
django.template.base.TagHelperNode.__init__(self,takes_context,args,kwargs)
django.template.base.TagHelperNode.get_resolved_arguments(self,context)
django.template.base.Template(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.base.Template.__init__(self,template_string,origin=None,name='<UnknownTemplate>')
django.template.base.Template.__iter__(self)
django.template.base.Template._render(self,context)
django.template.base.Template.render(self,context)
django.template.base.TemplateDoesNotExist(Exception)
django.template.base.TemplateEncodingError(Exception)
django.template.base.TemplateSyntaxError(Exception)
django.template.base.TextNode(self,s)
django.template.base.TextNode.__init__(self,s)
django.template.base.TextNode.__repr__(self)
django.template.base.TextNode.render(self,context)
django.template.base.Token(self,token_type,contents)
django.template.base.Token.__init__(self,token_type,contents)
django.template.base.Token.__str__(self)
django.template.base.Token.split_contents(self)
django.template.base.TokenParser(self,subject)
django.template.base.TokenParser.__init__(self,subject)
django.template.base.TokenParser.back(self)
django.template.base.TokenParser.more(self)
django.template.base.TokenParser.tag(self)
django.template.base.TokenParser.top(self)
django.template.base.TokenParser.value(self)
django.template.base.Variable(self,var)
django.template.base.Variable.__init__(self,var)
django.template.base.Variable.__repr__(self)
django.template.base.Variable.__str__(self)
django.template.base.Variable._resolve_lookup(self,context)
django.template.base.Variable.resolve(self,context)
django.template.base.VariableDoesNotExist(self,msg,params=())
django.template.base.VariableDoesNotExist.__init__(self,msg,params=())
django.template.base.VariableDoesNotExist.__str__(self)
django.template.base.VariableNode(self,filter_expression)
django.template.base.VariableNode.__init__(self,filter_expression)
django.template.base.VariableNode.__repr__(self)
django.template.base.VariableNode.render(self,context)
django.template.base.add_to_builtins(module)
django.template.base.compile_string(template_string,origin)
django.template.base.generic_tag_compiler(parser,token,params,varargs,varkw,defaults,name,takes_context,node_class)
django.template.base.get_library(library_name)
django.template.base.get_templatetags_modules()
django.template.base.import_library(taglib_module)
django.template.base.is_library_missing(name)
django.template.base.parse_bits(parser,bits,params,varargs,varkw,defaults,takes_context,name)
django.template.base.render_value_in_context(value,context)
django.template.base.resolve_variable(path,context)
django.template.base.token_kwargs(bits,parser,support_legacy=False)
django.template.compile_string(template_string,origin)
django.template.generic_tag_compiler(parser,token,params,varargs,varkw,defaults,name,takes_context,node_class)
django.template.get_library(library_name)
django.template.get_templatetags_modules()
django.template.import_library(taglib_module)
django.template.resolve_variable(path,context)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loader_tags.py----------------------------------------
A:django.template.loader_tags.register->Library()
A:django.template.loader_tags.self.blocks->dict([(n.name, n) for n in nodelist.get_nodes_by_type(BlockNode)])
A:django.template.loader_tags.block_context->context.render_context.get(BLOCK_CONTEXT_KEY)
A:django.template.loader_tags.result->BlockNode(block.name, block.nodelist).nodelist.render(context)
A:django.template.loader_tags.pushblock->context.render_context.get(BLOCK_CONTEXT_KEY).pop(self.name)
A:django.template.loader_tags.block->BlockNode(block.name, block.nodelist)
A:django.template.loader_tags.parent->self.parent_name.resolve(context)
A:django.template.loader_tags.compiled_parent->self.get_parent(context)
A:django.template.loader_tags.context.render_context[BLOCK_CONTEXT_KEY]->BlockContext()
A:django.template.loader_tags.blocks->dict([(n.name, n) for n in compiled_parent.nodelist.get_nodes_by_type(BlockNode)])
A:django.template.loader_tags.self.extra_context->kwargs.pop('extra_context', {})
A:django.template.loader_tags.self.isolated_context->kwargs.pop('isolated_context', False)
A:django.template.loader_tags.values->dict([(name, var.resolve(context)) for (name, var) in six.iteritems(self.extra_context)])
A:django.template.loader_tags.output->get_template(template_name).render(context)
A:django.template.loader_tags.t->get_template(template_path)
A:django.template.loader_tags.template_name->self.template_name.resolve(context)
A:django.template.loader_tags.template->get_template(template_name)
A:django.template.loader_tags.bits->token.split_contents()
A:django.template.loader_tags.nodelist->parser.parse()
A:django.template.loader_tags.endblock->parser.next_token()
A:django.template.loader_tags.parent_name->parser.compile_filter(bits[1])
A:django.template.loader_tags.option->remaining_bits.pop(0)
A:django.template.loader_tags.value->token_kwargs(remaining_bits, parser, support_legacy=False)
A:django.template.loader_tags.isolated_context->options.get('only', False)
A:django.template.loader_tags.namemap->options.get('with', {})
django.template.loader_tags.BaseIncludeNode(self,*args,**kwargs)
django.template.loader_tags.BaseIncludeNode.__init__(self,*args,**kwargs)
django.template.loader_tags.BaseIncludeNode.render_template(self,template,context)
django.template.loader_tags.BlockContext(self)
django.template.loader_tags.BlockContext.__init__(self)
django.template.loader_tags.BlockContext.add_blocks(self,blocks)
django.template.loader_tags.BlockContext.get_block(self,name)
django.template.loader_tags.BlockContext.pop(self,name)
django.template.loader_tags.BlockContext.push(self,name,block)
django.template.loader_tags.BlockNode(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__init__(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__repr__(self)
django.template.loader_tags.BlockNode.render(self,context)
django.template.loader_tags.BlockNode.super(self)
django.template.loader_tags.ConstantIncludeNode(self,template_path,*args,**kwargs)
django.template.loader_tags.ConstantIncludeNode.__init__(self,template_path,*args,**kwargs)
django.template.loader_tags.ConstantIncludeNode.render(self,context)
django.template.loader_tags.ExtendsError(Exception)
django.template.loader_tags.ExtendsNode(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__init__(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__repr__(self)
django.template.loader_tags.ExtendsNode.get_parent(self,context)
django.template.loader_tags.ExtendsNode.render(self,context)
django.template.loader_tags.IncludeNode(self,template_name,*args,**kwargs)
django.template.loader_tags.IncludeNode.__init__(self,template_name,*args,**kwargs)
django.template.loader_tags.IncludeNode.render(self,context)
django.template.loader_tags.do_block(parser,token)
django.template.loader_tags.do_extends(parser,token)
django.template.loader_tags.do_include(parser,token)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/context.py----------------------------------------
A:django.template.context.duplicate->super(Context, self).__copy__()
A:django.template.context.new_context->copy(self)
A:django.template.context.self.render_context->RenderContext()
A:django.template.context.duplicate.render_context->copy(self.render_context)
A:django.template.context.func->import_by_path(path)
A:django.template.context._standard_context_processors->tuple(processors)
A:django.template.context.processors->tuple(processors)
django.template.context.BaseContext(self,dict_=None)
django.template.context.BaseContext.__contains__(self,key)
django.template.context.BaseContext.__copy__(self)
django.template.context.BaseContext.__delitem__(self,key)
django.template.context.BaseContext.__getitem__(self,key)
django.template.context.BaseContext.__init__(self,dict_=None)
django.template.context.BaseContext.__iter__(self)
django.template.context.BaseContext.__repr__(self)
django.template.context.BaseContext.__setitem__(self,key,value)
django.template.context.BaseContext._reset_dicts(self,value=None)
django.template.context.BaseContext.get(self,key,otherwise=None)
django.template.context.BaseContext.has_key(self,key)
django.template.context.BaseContext.new(self,values=None)
django.template.context.BaseContext.pop(self)
django.template.context.BaseContext.push(self)
django.template.context.Context(self,dict_=None,autoescape=True,current_app=None,use_l10n=None,use_tz=None)
django.template.context.Context.__copy__(self)
django.template.context.Context.__init__(self,dict_=None,autoescape=True,current_app=None,use_l10n=None,use_tz=None)
django.template.context.Context.update(self,other_dict)
django.template.context.ContextPopException(Exception)
django.template.context.RenderContext(BaseContext)
django.template.context.RenderContext.__iter__(self)
django.template.context.RenderContext.get(self,key,otherwise=None)
django.template.context.RenderContext.has_key(self,key)
django.template.context.RequestContext(self,request,dict_=None,processors=None,current_app=None,use_l10n=None,use_tz=None)
django.template.context.RequestContext.__init__(self,request,dict_=None,processors=None,current_app=None,use_l10n=None,use_tz=None)
django.template.context.get_standard_processors()


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loader.py----------------------------------------
A:django.template.loader.(source, display_name)->loader(name, dirs)
A:django.template.loader.origin->make_origin(display_name, self.load_template_source, template_name, template_dirs)
A:django.template.loader.template->get_template_from_string(template, origin, template_name)
A:django.template.loader.TemplateLoader->import_by_path(loader)
A:django.template.loader.func->TemplateLoader(*args)
A:django.template.loader.loader->find_template_loader(loader_name)
A:django.template.loader.template_source_loaders->tuple(loaders)
A:django.template.loader.(template, origin)->find_template(template_name)
A:django.template.loader.t->get_template(template_name)
django.template.loader.BaseLoader(self,*args,**kwargs)
django.template.loader.BaseLoader.__init__(self,*args,**kwargs)
django.template.loader.BaseLoader.load_template(self,template_name,template_dirs=None)
django.template.loader.BaseLoader.load_template_source(self,template_name,template_dirs=None)
django.template.loader.BaseLoader.reset(self)
django.template.loader.LoaderOrigin(self,display_name,loader,name,dirs)
django.template.loader.LoaderOrigin.__init__(self,display_name,loader,name,dirs)
django.template.loader.LoaderOrigin.reload(self)
django.template.loader.find_template(name,dirs=None)
django.template.loader.find_template_loader(loader)
django.template.loader.get_template(template_name)
django.template.loader.get_template_from_string(source,origin=None,name=None)
django.template.loader.make_origin(display_name,loader,name,dirs)
django.template.loader.render_to_string(template_name,dictionary=None,context_instance=None)
django.template.loader.select_template(template_name_list)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/response.py----------------------------------------
A:django.template.response.obj_dict->super(SimpleTemplateResponse, self).__getstate__()
A:django.template.response.template->self.resolve_template(self.template_name)
A:django.template.response.context->self.resolve_context(self.context_data)
A:django.template.response.content->self.resolve_template(self.template_name).render(context)
A:django.template.response.newretval->post_callback(retval)
django.template.response.ContentNotRenderedError(Exception)
django.template.response.SimpleTemplateResponse(self,template,context=None,content_type=None,status=None,mimetype=None)
django.template.response.SimpleTemplateResponse.__getstate__(self)
django.template.response.SimpleTemplateResponse.__init__(self,template,context=None,content_type=None,status=None,mimetype=None)
django.template.response.SimpleTemplateResponse.__iter__(self)
django.template.response.SimpleTemplateResponse.add_post_render_callback(self,callback)
django.template.response.SimpleTemplateResponse.content(self)
django.template.response.SimpleTemplateResponse.content(self,value)
django.template.response.SimpleTemplateResponse.is_rendered(self)
django.template.response.SimpleTemplateResponse.render(self)
django.template.response.SimpleTemplateResponse.rendered_content(self)
django.template.response.SimpleTemplateResponse.resolve_context(self,context)
django.template.response.SimpleTemplateResponse.resolve_template(self,template)
django.template.response.TemplateResponse(self,request,template,context=None,content_type=None,status=None,mimetype=None,current_app=None)
django.template.response.TemplateResponse.__init__(self,request,template,context=None,content_type=None,status=None,mimetype=None,current_app=None)
django.template.response.TemplateResponse.resolve_context(self,context)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loaders/eggs.py----------------------------------------
A:django.template.loaders.eggs.resource->resource.decode(settings.FILE_CHARSET).decode(settings.FILE_CHARSET)
django.template.loaders.eggs.Loader(BaseLoader)
django.template.loaders.eggs.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loaders/filesystem.py----------------------------------------
django.template.loaders.filesystem.Loader(BaseLoader)
django.template.loaders.filesystem.Loader.get_template_sources(self,template_name,template_dirs=None)
django.template.loaders.filesystem.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loaders/app_directories.py----------------------------------------
A:django.template.loaders.app_directories.mod->import_module(app)
A:django.template.loaders.app_directories.template_dir->template_dir.decode(fs_encoding).decode(fs_encoding)
A:django.template.loaders.app_directories.app_template_dirs->tuple(app_template_dirs)
django.template.loaders.app_directories.Loader(BaseLoader)
django.template.loaders.app_directories.Loader.get_template_sources(self,template_name,template_dirs=None)
django.template.loaders.app_directories.Loader.load_template_source(self,template_name,template_dirs=None)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loaders/cached.py----------------------------------------
A:django.template.loaders.cached.(template, display_name)->loader(name, dirs)
A:django.template.loaders.cached.key->'-'.join([template_name, hashlib.sha1(force_bytes('|'.join(template_dirs))).hexdigest()])
A:django.template.loaders.cached.(template, origin)->self.find_template(template_name, template_dirs)
A:django.template.loaders.cached.template->get_template_from_string(template, origin, template_name)
django.template.loaders.cached.Loader(self,loaders)
django.template.loaders.cached.Loader.__init__(self,loaders)
django.template.loaders.cached.Loader.find_template(self,name,dirs=None)
django.template.loaders.cached.Loader.load_template(self,template_name,template_dirs=None)
django.template.loaders.cached.Loader.loaders(self)
django.template.loaders.cached.Loader.reset(self)


----------------------------------------/home/zhang/Packages/django/django1.6.6/template/loaders/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/util.py----------------------------------------
A:django.forms.util.current_timezone->django.utils.timezone.get_current_timezone()
A:django.forms.util.message->_("%(datetime)s couldn't be interpreted in time zone %(current_timezone)s; it may be ambiguous or it may not exist.")
django.forms.util.ErrorDict(dict)
django.forms.util.ErrorDict.__str__(self)
django.forms.util.ErrorDict.as_text(self)
django.forms.util.ErrorDict.as_ul(self)
django.forms.util.ErrorList(list)
django.forms.util.ErrorList.__repr__(self)
django.forms.util.ErrorList.__str__(self)
django.forms.util.ErrorList.as_text(self)
django.forms.util.ErrorList.as_ul(self)
django.forms.util.flatatt(attrs)
django.forms.util.from_current_timezone(value)
django.forms.util.to_current_timezone(value)
django.util.ErrorDict(dict)
django.util.ErrorDict.__str__(self)
django.util.ErrorDict.as_text(self)
django.util.ErrorDict.as_ul(self)
django.util.ErrorList(list)
django.util.ErrorList.__repr__(self)
django.util.ErrorList.__str__(self)
django.util.ErrorList.as_text(self)
django.util.ErrorList.as_ul(self)
django.util.flatatt(attrs)
django.util.from_current_timezone(value)
django.util.to_current_timezone(value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/widgets.py----------------------------------------
A:django.forms.widgets.media->property(_get_media)
A:django.forms.widgets.combined->Media()
A:django.forms.widgets.sup_cls->super(cls, self)
A:django.forms.widgets.base->Media()
A:django.forms.widgets.definition->getattr(cls, 'Media', None)
A:django.forms.widgets.extend->getattr(definition, 'extend', True)
A:django.forms.widgets.m->Media()
A:django.forms.widgets.new_class->super(MediaDefiningClass, cls).__new__(cls, name, bases, attrs)
A:django.forms.widgets.new_class.media->media_property(new_class)
A:django.forms.widgets.self.attrs->dict(self.attrs, **kwargs).copy()
A:django.forms.widgets.obj->super(MultiWidget, self).__deepcopy__(memo)
A:django.forms.widgets.obj.attrs->self.attrs.copy()
A:django.forms.widgets.attrs->dict(self.attrs, **kwargs)
A:django.forms.widgets.final_attrs->dict(final_attrs, id='%s_%s' % (id_, i))
A:django.forms.widgets.final_attrs['value']->force_text(value)
A:django.forms.widgets.self.input_type->dict(self.attrs, **kwargs).pop('type', self.input_type)
A:django.forms.widgets.id_->dict(final_attrs, id='%s_%s' % (id_, i)).get('id', None)
A:django.forms.widgets.input_attrs->dict(value=force_text(v), **final_attrs)
A:django.forms.widgets.FILE_INPUT_CONTRADICTION->object()
A:django.forms.widgets.initial_text->ugettext_lazy('Currently')
A:django.forms.widgets.input_text->ugettext_lazy('Change')
A:django.forms.widgets.clear_checkbox_label->ugettext_lazy('Clear')
A:django.forms.widgets.substitutions['input']->super(ClearableFileInput, self).render(name, value, attrs)
A:django.forms.widgets.substitutions['initial']->format_html(self.url_markup_template, value.url, force_text(value))
A:django.forms.widgets.checkbox_name->self.clear_checkbox_name(name)
A:django.forms.widgets.checkbox_id->self.clear_checkbox_id(checkbox_name)
A:django.forms.widgets.substitutions['clear_checkbox_name']->conditional_escape(checkbox_name)
A:django.forms.widgets.substitutions['clear_checkbox_id']->conditional_escape(checkbox_id)
A:django.forms.widgets.substitutions['clear']->CheckboxInput().render(checkbox_name, False, attrs={'id': checkbox_id})
A:django.forms.widgets.upload->super(ClearableFileInput, self).value_from_datadict(data, files, name)
A:django.forms.widgets.value->to_current_timezone(value)
A:django.forms.widgets.self.choices->list(choices)
A:django.forms.widgets.options->self.render_options(choices, value)
A:django.forms.widgets.option_value->force_text(option_value)
A:django.forms.widgets.selected_html->mark_safe(' selected="selected"')
A:django.forms.widgets.selected_choices->set((force_text(v) for v in selected_choices))
A:django.forms.widgets.self.choice_value->force_text(choice[0])
A:django.forms.widgets.self.choice_label->force_text(choice[1])
A:django.forms.widgets.label_for->format_html(' for="{0}_{1}"', self.attrs['id'], self.index)
A:django.forms.widgets.self.value->set((force_text(v) for v in self.value))
A:django.forms.widgets.renderer->kwargs.pop('renderer', None)
A:django.forms.widgets.choices->list(chain(self.choices, choices))
A:django.forms.widgets.obj.widgets->copy.deepcopy(self.widgets)
django.forms.CheckboxChoiceInput(self,*args,**kwargs)
django.forms.CheckboxChoiceInput.is_checked(self)
django.forms.CheckboxFieldRenderer(ChoiceFieldRenderer)
django.forms.CheckboxInput(self,attrs=None,check_test=None)
django.forms.CheckboxInput.render(self,name,value,attrs=None)
django.forms.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.CheckboxSelectMultiple(RendererMixin,SelectMultiple)
django.forms.ChoiceFieldRenderer(self,name,value,attrs,choices)
django.forms.ChoiceFieldRenderer.__getitem__(self,idx)
django.forms.ChoiceFieldRenderer.__iter__(self)
django.forms.ChoiceFieldRenderer.__str__(self)
django.forms.ChoiceFieldRenderer.render(self)
django.forms.ChoiceInput(self,name,value,attrs,choice,index)
django.forms.ChoiceInput.__str__(self)
django.forms.ChoiceInput.is_checked(self)
django.forms.ChoiceInput.render(self,name=None,value=None,attrs=None,choices=())
django.forms.ChoiceInput.tag(self)
django.forms.ClearableFileInput(FileInput)
django.forms.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.ClearableFileInput.render(self,name,value,attrs=None)
django.forms.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.DateInput(self,attrs=None,format=None)
django.forms.DateInput._format_value(self,value)
django.forms.DateTimeInput(self,attrs=None,format=None)
django.forms.DateTimeInput._format_value(self,value)
django.forms.EmailInput(TextInput)
django.forms.FileInput(Input)
django.forms.FileInput.render(self,name,value,attrs=None)
django.forms.FileInput.value_from_datadict(self,data,files,name)
django.forms.HiddenInput(Input)
django.forms.Input(Widget)
django.forms.Input._format_value(self,value)
django.forms.Input.render(self,name,value,attrs=None)
django.forms.Media(self,media=None,**kwargs)
django.forms.Media.__add__(self,other)
django.forms.Media.__getitem__(self,name)
django.forms.Media.__str__(self)
django.forms.Media.absolute_path(self,path,prefix=None)
django.forms.Media.add_css(self,data)
django.forms.Media.add_js(self,data)
django.forms.Media.render(self)
django.forms.Media.render_css(self)
django.forms.Media.render_js(self)
django.forms.MediaDefiningClass(cls,name,bases,attrs)
django.forms.MultiWidget(self,widgets,attrs=None)
django.forms.MultiWidget.__deepcopy__(self,memo)
django.forms.MultiWidget._get_media(self)
django.forms.MultiWidget.decompress(self,value)
django.forms.MultiWidget.format_output(self,rendered_widgets)
django.forms.MultiWidget.id_for_label(self,id_)
django.forms.MultiWidget.needs_multipart_form(self)
django.forms.MultiWidget.render(self,name,value,attrs=None)
django.forms.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.MultipleHiddenInput(self,attrs=None,choices=())
django.forms.MultipleHiddenInput.render(self,name,value,attrs=None,choices=())
django.forms.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.NullBooleanSelect(self,attrs=None)
django.forms.NullBooleanSelect.render(self,name,value,attrs=None,choices=())
django.forms.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.NumberInput(TextInput)
django.forms.PasswordInput(self,attrs=None,render_value=False)
django.forms.PasswordInput.render(self,name,value,attrs=None)
django.forms.RadioChoiceInput(self,*args,**kwargs)
django.forms.RadioFieldRenderer(ChoiceFieldRenderer)
django.forms.RadioInput(self,*args,**kwargs)
django.forms.RadioSelect(RendererMixin,Select)
django.forms.RendererMixin(self,*args,**kwargs)
django.forms.RendererMixin.get_renderer(self,name,value,attrs=None,choices=())
django.forms.RendererMixin.id_for_label(self,id_)
django.forms.RendererMixin.render(self,name,value,attrs=None,choices=())
django.forms.RendererMixin.subwidgets(self,name,value,attrs=None,choices=())
django.forms.Select(self,attrs=None,choices=())
django.forms.Select.render(self,name,value,attrs=None,choices=())
django.forms.Select.render_option(self,selected_choices,option_value,option_label)
django.forms.Select.render_options(self,choices,selected_choices)
django.forms.SelectMultiple(Select)
django.forms.SelectMultiple.render(self,name,value,attrs=None,choices=())
django.forms.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.SplitDateTimeWidget.decompress(self,value)
django.forms.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.SubWidget(self,parent_widget,name,value,attrs,choices)
django.forms.SubWidget.__str__(self)
django.forms.TextInput(self,attrs=None)
django.forms.Textarea(self,attrs=None)
django.forms.Textarea.render(self,name,value,attrs=None)
django.forms.TimeInput(self,attrs=None,format=None)
django.forms.TimeInput._format_value(self,value)
django.forms.URLInput(TextInput)
django.forms.Widget(self,attrs=None)
django.forms.Widget.__deepcopy__(self,memo)
django.forms.Widget.build_attrs(self,extra_attrs=None,**kwargs)
django.forms.Widget.id_for_label(self,id_)
django.forms.Widget.render(self,name,value,attrs=None)
django.forms.Widget.subwidgets(self,name,value,attrs=None,choices=())
django.forms.Widget.value_from_datadict(self,data,files,name)
django.forms.boolean_check(v)
django.forms.media_property(cls)
django.forms.widgets.CheckboxChoiceInput(self,*args,**kwargs)
django.forms.widgets.CheckboxChoiceInput.__init__(self,*args,**kwargs)
django.forms.widgets.CheckboxChoiceInput.is_checked(self)
django.forms.widgets.CheckboxFieldRenderer(ChoiceFieldRenderer)
django.forms.widgets.CheckboxInput(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.__init__(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.render(self,name,value,attrs=None)
django.forms.widgets.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.widgets.CheckboxSelectMultiple(RendererMixin,SelectMultiple)
django.forms.widgets.ChoiceFieldRenderer(self,name,value,attrs,choices)
django.forms.widgets.ChoiceFieldRenderer.__getitem__(self,idx)
django.forms.widgets.ChoiceFieldRenderer.__init__(self,name,value,attrs,choices)
django.forms.widgets.ChoiceFieldRenderer.__iter__(self)
django.forms.widgets.ChoiceFieldRenderer.__str__(self)
django.forms.widgets.ChoiceFieldRenderer.render(self)
django.forms.widgets.ChoiceInput(self,name,value,attrs,choice,index)
django.forms.widgets.ChoiceInput.__init__(self,name,value,attrs,choice,index)
django.forms.widgets.ChoiceInput.__str__(self)
django.forms.widgets.ChoiceInput.is_checked(self)
django.forms.widgets.ChoiceInput.render(self,name=None,value=None,attrs=None,choices=())
django.forms.widgets.ChoiceInput.tag(self)
django.forms.widgets.ClearableFileInput(FileInput)
django.forms.widgets.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.widgets.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.widgets.ClearableFileInput.render(self,name,value,attrs=None)
django.forms.widgets.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.DateInput(self,attrs=None,format=None)
django.forms.widgets.DateInput.__init__(self,attrs=None,format=None)
django.forms.widgets.DateInput._format_value(self,value)
django.forms.widgets.DateTimeInput(self,attrs=None,format=None)
django.forms.widgets.DateTimeInput.__init__(self,attrs=None,format=None)
django.forms.widgets.DateTimeInput._format_value(self,value)
django.forms.widgets.EmailInput(TextInput)
django.forms.widgets.FileInput(Input)
django.forms.widgets.FileInput.render(self,name,value,attrs=None)
django.forms.widgets.FileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.HiddenInput(Input)
django.forms.widgets.Input(Widget)
django.forms.widgets.Input._format_value(self,value)
django.forms.widgets.Input.render(self,name,value,attrs=None)
django.forms.widgets.Media(self,media=None,**kwargs)
django.forms.widgets.Media.__add__(self,other)
django.forms.widgets.Media.__getitem__(self,name)
django.forms.widgets.Media.__init__(self,media=None,**kwargs)
django.forms.widgets.Media.__str__(self)
django.forms.widgets.Media.absolute_path(self,path,prefix=None)
django.forms.widgets.Media.add_css(self,data)
django.forms.widgets.Media.add_js(self,data)
django.forms.widgets.Media.render(self)
django.forms.widgets.Media.render_css(self)
django.forms.widgets.Media.render_js(self)
django.forms.widgets.MediaDefiningClass(cls,name,bases,attrs)
django.forms.widgets.MediaDefiningClass.__new__(cls,name,bases,attrs)
django.forms.widgets.MultiWidget(self,widgets,attrs=None)
django.forms.widgets.MultiWidget.__deepcopy__(self,memo)
django.forms.widgets.MultiWidget.__init__(self,widgets,attrs=None)
django.forms.widgets.MultiWidget._get_media(self)
django.forms.widgets.MultiWidget.decompress(self,value)
django.forms.widgets.MultiWidget.format_output(self,rendered_widgets)
django.forms.widgets.MultiWidget.id_for_label(self,id_)
django.forms.widgets.MultiWidget.needs_multipart_form(self)
django.forms.widgets.MultiWidget.render(self,name,value,attrs=None)
django.forms.widgets.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.widgets.MultipleHiddenInput(self,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.__init__(self,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.render(self,name,value,attrs=None,choices=())
django.forms.widgets.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.widgets.NullBooleanSelect(self,attrs=None)
django.forms.widgets.NullBooleanSelect.__init__(self,attrs=None)
django.forms.widgets.NullBooleanSelect.render(self,name,value,attrs=None,choices=())
django.forms.widgets.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.widgets.NumberInput(TextInput)
django.forms.widgets.PasswordInput(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.__init__(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.render(self,name,value,attrs=None)
django.forms.widgets.RadioChoiceInput(self,*args,**kwargs)
django.forms.widgets.RadioChoiceInput.__init__(self,*args,**kwargs)
django.forms.widgets.RadioFieldRenderer(ChoiceFieldRenderer)
django.forms.widgets.RadioInput(self,*args,**kwargs)
django.forms.widgets.RadioInput.__init__(self,*args,**kwargs)
django.forms.widgets.RadioSelect(RendererMixin,Select)
django.forms.widgets.RendererMixin(self,*args,**kwargs)
django.forms.widgets.RendererMixin.__init__(self,*args,**kwargs)
django.forms.widgets.RendererMixin.get_renderer(self,name,value,attrs=None,choices=())
django.forms.widgets.RendererMixin.id_for_label(self,id_)
django.forms.widgets.RendererMixin.render(self,name,value,attrs=None,choices=())
django.forms.widgets.RendererMixin.subwidgets(self,name,value,attrs=None,choices=())
django.forms.widgets.Select(self,attrs=None,choices=())
django.forms.widgets.Select.__init__(self,attrs=None,choices=())
django.forms.widgets.Select.render(self,name,value,attrs=None,choices=())
django.forms.widgets.Select.render_option(self,selected_choices,option_value,option_label)
django.forms.widgets.Select.render_options(self,choices,selected_choices)
django.forms.widgets.SelectMultiple(Select)
django.forms.widgets.SelectMultiple.render(self,name,value,attrs=None,choices=())
django.forms.widgets.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.widgets.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitDateTimeWidget.decompress(self,value)
django.forms.widgets.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SplitHiddenDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None)
django.forms.widgets.SubWidget(self,parent_widget,name,value,attrs,choices)
django.forms.widgets.SubWidget.__init__(self,parent_widget,name,value,attrs,choices)
django.forms.widgets.SubWidget.__str__(self)
django.forms.widgets.TextInput(self,attrs=None)
django.forms.widgets.TextInput.__init__(self,attrs=None)
django.forms.widgets.Textarea(self,attrs=None)
django.forms.widgets.Textarea.__init__(self,attrs=None)
django.forms.widgets.Textarea.render(self,name,value,attrs=None)
django.forms.widgets.TimeInput(self,attrs=None,format=None)
django.forms.widgets.TimeInput.__init__(self,attrs=None,format=None)
django.forms.widgets.TimeInput._format_value(self,value)
django.forms.widgets.URLInput(TextInput)
django.forms.widgets.Widget(self,attrs=None)
django.forms.widgets.Widget.__deepcopy__(self,memo)
django.forms.widgets.Widget.__init__(self,attrs=None)
django.forms.widgets.Widget.build_attrs(self,extra_attrs=None,**kwargs)
django.forms.widgets.Widget.id_for_label(self,id_)
django.forms.widgets.Widget.render(self,name,value,attrs=None)
django.forms.widgets.Widget.subwidgets(self,name,value,attrs=None,choices=())
django.forms.widgets.Widget.value_from_datadict(self,data,files,name)
django.forms.widgets.boolean_check(v)
django.forms.widgets.media_property(cls)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/formsets.py----------------------------------------
A:django.forms.formsets.self.base_fields[TOTAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[INITIAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[MAX_NUM_FORM_COUNT]->IntegerField(required=False, widget=HiddenInput)
A:django.forms.formsets.form->self.form(auto_id=self.auto_id, prefix=self.add_prefix('__prefix__'), empty_permitted=True)
A:django.forms.formsets.initial_forms->self.initial_form_count()
A:django.forms.formsets.self._non_form_errors->self.error_class(e.messages)
A:django.forms.formsets.form.fields[ORDERING_FIELD_NAME]->IntegerField(label=_('Order'), required=False)
A:django.forms.formsets.form.fields[DELETION_FIELD_NAME]->BooleanField(label=_('Delete'), required=False)
A:django.forms.formsets.forms->' '.join([form.as_ul() for form in self])
django.forms.formsets.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.forms.formsets.BaseFormSet.__bool__(self)
django.forms.formsets.BaseFormSet.__getitem__(self,index)
django.forms.formsets.BaseFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.forms.formsets.BaseFormSet.__iter__(self)
django.forms.formsets.BaseFormSet.__len__(self)
django.forms.formsets.BaseFormSet.__nonzero__(self)
django.forms.formsets.BaseFormSet.__str__(self)
django.forms.formsets.BaseFormSet._construct_form(self,i,**kwargs)
django.forms.formsets.BaseFormSet._should_delete_form(self,form)
django.forms.formsets.BaseFormSet.add_fields(self,form,index)
django.forms.formsets.BaseFormSet.add_prefix(self,index)
django.forms.formsets.BaseFormSet.as_p(self)
django.forms.formsets.BaseFormSet.as_table(self)
django.forms.formsets.BaseFormSet.as_ul(self)
django.forms.formsets.BaseFormSet.clean(self)
django.forms.formsets.BaseFormSet.cleaned_data(self)
django.forms.formsets.BaseFormSet.deleted_forms(self)
django.forms.formsets.BaseFormSet.empty_form(self)
django.forms.formsets.BaseFormSet.errors(self)
django.forms.formsets.BaseFormSet.extra_forms(self)
django.forms.formsets.BaseFormSet.forms(self)
django.forms.formsets.BaseFormSet.full_clean(self)
django.forms.formsets.BaseFormSet.get_default_prefix(cls)
django.forms.formsets.BaseFormSet.has_changed(self)
django.forms.formsets.BaseFormSet.initial_form_count(self)
django.forms.formsets.BaseFormSet.initial_forms(self)
django.forms.formsets.BaseFormSet.is_multipart(self)
django.forms.formsets.BaseFormSet.is_valid(self)
django.forms.formsets.BaseFormSet.management_form(self)
django.forms.formsets.BaseFormSet.media(self)
django.forms.formsets.BaseFormSet.non_form_errors(self)
django.forms.formsets.BaseFormSet.ordered_forms(self)
django.forms.formsets.BaseFormSet.total_error_count(self)
django.forms.formsets.BaseFormSet.total_form_count(self)
django.forms.formsets.ManagementForm(self,*args,**kwargs)
django.forms.formsets.ManagementForm.__init__(self,*args,**kwargs)
django.forms.formsets.all_valid(formsets)
django.forms.formsets.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False)
django.formsets.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList)
django.formsets.BaseFormSet.__bool__(self)
django.formsets.BaseFormSet.__getitem__(self,index)
django.formsets.BaseFormSet.__iter__(self)
django.formsets.BaseFormSet.__len__(self)
django.formsets.BaseFormSet.__nonzero__(self)
django.formsets.BaseFormSet.__str__(self)
django.formsets.BaseFormSet._construct_form(self,i,**kwargs)
django.formsets.BaseFormSet._should_delete_form(self,form)
django.formsets.BaseFormSet.add_fields(self,form,index)
django.formsets.BaseFormSet.add_prefix(self,index)
django.formsets.BaseFormSet.as_p(self)
django.formsets.BaseFormSet.as_table(self)
django.formsets.BaseFormSet.as_ul(self)
django.formsets.BaseFormSet.clean(self)
django.formsets.BaseFormSet.cleaned_data(self)
django.formsets.BaseFormSet.deleted_forms(self)
django.formsets.BaseFormSet.empty_form(self)
django.formsets.BaseFormSet.errors(self)
django.formsets.BaseFormSet.extra_forms(self)
django.formsets.BaseFormSet.forms(self)
django.formsets.BaseFormSet.full_clean(self)
django.formsets.BaseFormSet.get_default_prefix(cls)
django.formsets.BaseFormSet.has_changed(self)
django.formsets.BaseFormSet.initial_form_count(self)
django.formsets.BaseFormSet.initial_forms(self)
django.formsets.BaseFormSet.is_multipart(self)
django.formsets.BaseFormSet.is_valid(self)
django.formsets.BaseFormSet.management_form(self)
django.formsets.BaseFormSet.media(self)
django.formsets.BaseFormSet.non_form_errors(self)
django.formsets.BaseFormSet.ordered_forms(self)
django.formsets.BaseFormSet.total_error_count(self)
django.formsets.BaseFormSet.total_form_count(self)
django.formsets.ManagementForm(self,*args,**kwargs)
django.formsets.all_valid(formsets)
django.formsets.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/models.py----------------------------------------
A:django.forms.models.instance->construct_instance(form, instance, fields, exclude)
A:django.forms.models.data[f.name]->f.value_from_object(instance)
A:django.forms.models.formfield->formfield_callback(f, **kwargs)
A:django.forms.models.field_dict->SortedDict([(f, field_dict.get(f)) for f in fields if (not exclude or (exclude and f not in exclude)) and f not in ignored])
A:django.forms.models.self.model->getattr(options, 'model', None)
A:django.forms.models.self.fields->getattr(options, 'fields', None)
A:django.forms.models.self.exclude->getattr(options, 'exclude', None)
A:django.forms.models.self.widgets->getattr(options, 'widgets', None)
A:django.forms.models.self.localized_fields->getattr(options, 'localized_fields', None)
A:django.forms.models.self.labels->getattr(options, 'labels', None)
A:django.forms.models.self.help_texts->getattr(options, 'help_texts', None)
A:django.forms.models.self.error_messages->getattr(options, 'error_messages', None)
A:django.forms.models.formfield_callback->attrs.pop('formfield_callback', None)
A:django.forms.models.declared_fields->get_declared_fields(bases, attrs, False)
A:django.forms.models.new_class->super(ModelFormMetaclass, cls).__new__(cls, name, bases, attrs)
A:django.forms.models.new_class.media->media_property(new_class)
A:django.forms.models.optsnew_class._meta->ModelFormOptions(getattr(new_class, 'Meta', None))
A:django.forms.models.value->self.queryset.get(**{key: value})
A:django.forms.models.fields->fields_for_model(opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, opts.error_messages)
A:django.forms.models.self.instance->self.fk.rel.to()
A:django.forms.models.object_data->model_to_dict(instance, opts.fields, opts.exclude)
A:django.forms.models.field_value->self.cleaned_data.get(field, None)
A:django.forms.models.exclude->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._get_validation_exclusions()
A:django.forms.models.Meta->type(str('Meta'), parent, attrs)
A:django.forms.models.self.initial_extra->kwargs.pop('initial', None)
A:django.forms.models.self._object_dict->dict([(o.pk, o) for o in self.get_queryset()])
A:django.forms.models.pk->pk_field.get_db_prep_lookup('exact', pk, connection=connections[self.get_queryset().db])
A:django.forms.models.kwargs['instance']->self._existing_object(pk)
A:django.forms.models.qs->self.queryset.filter(**{'%s__in' % key: value})
A:django.forms.models.all_unique_checks->all_unique_checks.union(set(unique_checks)).union(set(unique_checks))
A:django.forms.models.all_date_checks->all_date_checks.union(set(date_checks)).union(set(date_checks))
A:django.forms.models.(unique_checks, date_checks)->super(BaseInlineFormSet, self)._construct_form(i, **kwargs).instance._get_unique_checks(exclude=exclude)
A:django.forms.models.seen_data->set()
A:django.forms.models.row_data->tuple([form.cleaned_data[field] for field in unique_check if field in form.cleaned_data])
A:django.forms.models.form._errors[NON_FIELD_ERRORS]->self.error_class([self.get_form_error()])
A:django.forms.models.raw_pk_value->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._raw_value(pk_name)
A:django.forms.models.pk_value->getattr(self.instance, self.fk.rel.field_name)
A:django.forms.models.obj->super(BaseInlineFormSet, self)._construct_form(i, **kwargs).save(commit=False)
A:django.forms.models.widget->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)._meta.widgets.get(self._pk_field.name, HiddenInput)
A:django.forms.models.form.fields[self._pk_field.name]->ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)
A:django.forms.models.meta->type(str('Meta'), (object,), {})
A:django.forms.models.form->super(BaseInlineFormSet, self)._construct_form(i, **kwargs)
A:django.forms.models.FormSet->modelformset_factory(model, **kwargs)
A:django.forms.models.fk_value->getattr(fk_value, 'pk', fk_value)
A:django.forms.models.form.fields[name]->InlineForeignKeyField(self.instance, **kwargs)
A:django.forms.models.form._meta.fields->list(form._meta.fields)
A:django.forms.models.fk->_get_foreign_key(parent_model, model, fk_name=fk_name)
A:django.forms.models.self.pk_field->kwargs.pop('pk_field', False)
A:django.forms.models.self.to_field->kwargs.pop('to_field', None)
A:django.forms.models.kwargs['initial']->getattr(self.parent_instance, self.to_field)
A:django.forms.models.orig->getattr(self.parent_instance, self.to_field)
A:django.forms.models.result->super(ChoiceField, self).__deepcopy__(memo)
A:django.forms.models.queryset->property(_get_queryset, _set_queryset)
A:django.forms.models.choices->property(_get_choices, ChoiceField._set_choices)
A:django.forms.models.msg->_('Hold down "Control", or "Command" on a Mac, to select more than one.')
A:django.forms.models.self.help_text->string_concat(self.help_text, ' ', msg)
A:django.forms.models.pks->set([force_text(getattr(o, key)) for o in qs])
A:django.forms.models.initial_set->set([force_text(value) for value in self.prepare_value(initial)])
A:django.forms.models.data_set->set([force_text(value) for value in data])
django.forms.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.BaseInlineFormSet.add_fields(self,form,index)
django.forms.BaseInlineFormSet.get_default_prefix(cls)
django.forms.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseInlineFormSet.initial_form_count(self)
django.forms.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.BaseModelForm._get_validation_exclusions(self)
django.forms.BaseModelForm._post_clean(self)
django.forms.BaseModelForm._update_errors(self,errors)
django.forms.BaseModelForm.clean(self)
django.forms.BaseModelForm.save(self,commit=True)
django.forms.BaseModelForm.validate_unique(self)
django.forms.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.BaseModelFormSet._existing_object(self,pk)
django.forms.BaseModelFormSet.add_fields(self,form,index)
django.forms.BaseModelFormSet.clean(self)
django.forms.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.BaseModelFormSet.get_form_error(self)
django.forms.BaseModelFormSet.get_queryset(self)
django.forms.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseModelFormSet.initial_form_count(self)
django.forms.BaseModelFormSet.save(self,commit=True)
django.forms.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.BaseModelFormSet.validate_unique(self)
django.forms.InlineForeignKeyField(self,parent_instance,*args,**kwargs)
django.forms.InlineForeignKeyField._has_changed(self,initial,data)
django.forms.InlineForeignKeyField.clean(self,value)
django.forms.ModelChoiceField(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.ModelChoiceField.__deepcopy__(self,memo)
django.forms.ModelChoiceField._get_choices(self)
django.forms.ModelChoiceField._get_queryset(self)
django.forms.ModelChoiceField._has_changed(self,initial,data)
django.forms.ModelChoiceField._set_queryset(self,queryset)
django.forms.ModelChoiceField.label_from_instance(self,obj)
django.forms.ModelChoiceField.prepare_value(self,value)
django.forms.ModelChoiceField.to_python(self,value)
django.forms.ModelChoiceField.validate(self,value)
django.forms.ModelChoiceIterator(self,field)
django.forms.ModelChoiceIterator.__iter__(self)
django.forms.ModelChoiceIterator.__len__(self)
django.forms.ModelChoiceIterator.choice(self,obj)
django.forms.ModelForm(six.with_metaclass(ModelFormMetaclass,BaseModelForm))
django.forms.ModelFormMetaclass(cls,name,bases,attrs)
django.forms.ModelFormOptions(self,options=None)
django.forms.ModelMultipleChoiceField(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.ModelMultipleChoiceField._has_changed(self,initial,data)
django.forms.ModelMultipleChoiceField.clean(self,value)
django.forms.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.ModelMultipleChoiceField.to_python(self,value)
django.forms._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.construct_instance(form,instance,fields=None,exclude=None)
django.forms.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.model_to_dict(instance,fields=None,exclude=None)
django.forms.modelform_defines_fields(form_class)
django.forms.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet.__init__(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseInlineFormSet.add_fields(self,form,index)
django.forms.models.BaseInlineFormSet.get_default_prefix(cls)
django.forms.models.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseInlineFormSet.initial_form_count(self)
django.forms.models.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.models.BaseModelForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None)
django.forms.models.BaseModelForm._get_validation_exclusions(self)
django.forms.models.BaseModelForm._post_clean(self)
django.forms.models.BaseModelForm._update_errors(self,errors)
django.forms.models.BaseModelForm.clean(self)
django.forms.models.BaseModelForm.save(self,commit=True)
django.forms.models.BaseModelForm.validate_unique(self)
django.forms.models.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.models.BaseModelFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,**kwargs)
django.forms.models.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseModelFormSet._existing_object(self,pk)
django.forms.models.BaseModelFormSet.add_fields(self,form,index)
django.forms.models.BaseModelFormSet.clean(self)
django.forms.models.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.models.BaseModelFormSet.get_form_error(self)
django.forms.models.BaseModelFormSet.get_queryset(self)
django.forms.models.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseModelFormSet.initial_form_count(self)
django.forms.models.BaseModelFormSet.save(self,commit=True)
django.forms.models.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.models.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.models.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.models.BaseModelFormSet.validate_unique(self)
django.forms.models.InlineForeignKeyField(self,parent_instance,*args,**kwargs)
django.forms.models.InlineForeignKeyField.__init__(self,parent_instance,*args,**kwargs)
django.forms.models.InlineForeignKeyField._has_changed(self,initial,data)
django.forms.models.InlineForeignKeyField.clean(self,value)
django.forms.models.ModelChoiceField(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.models.ModelChoiceField.__deepcopy__(self,memo)
django.forms.models.ModelChoiceField.__init__(self,queryset,empty_label='---------',cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,*args,**kwargs)
django.forms.models.ModelChoiceField._get_choices(self)
django.forms.models.ModelChoiceField._get_queryset(self)
django.forms.models.ModelChoiceField._has_changed(self,initial,data)
django.forms.models.ModelChoiceField._set_queryset(self,queryset)
django.forms.models.ModelChoiceField.label_from_instance(self,obj)
django.forms.models.ModelChoiceField.prepare_value(self,value)
django.forms.models.ModelChoiceField.to_python(self,value)
django.forms.models.ModelChoiceField.validate(self,value)
django.forms.models.ModelChoiceIterator(self,field)
django.forms.models.ModelChoiceIterator.__init__(self,field)
django.forms.models.ModelChoiceIterator.__iter__(self)
django.forms.models.ModelChoiceIterator.__len__(self)
django.forms.models.ModelChoiceIterator.choice(self,obj)
django.forms.models.ModelForm(six.with_metaclass(ModelFormMetaclass,BaseModelForm))
django.forms.models.ModelFormMetaclass(cls,name,bases,attrs)
django.forms.models.ModelFormMetaclass.__new__(cls,name,bases,attrs)
django.forms.models.ModelFormOptions(self,options=None)
django.forms.models.ModelFormOptions.__init__(self,options=None)
django.forms.models.ModelMultipleChoiceField(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.models.ModelMultipleChoiceField.__init__(self,queryset,cache_choices=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.models.ModelMultipleChoiceField._has_changed(self,initial,data)
django.forms.models.ModelMultipleChoiceField.clean(self,value)
django.forms.models.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.models.ModelMultipleChoiceField.to_python(self,value)
django.forms.models._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.models.construct_instance(form,instance,fields=None,exclude=None)
django.forms.models.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.model_to_dict(instance,fields=None,exclude=None)
django.forms.models.modelform_defines_fields(form_class)
django.forms.models.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None)
django.forms.models.save_instance(form,instance,fields=None,fail_message='saved',commit=True,exclude=None,construct=True)
django.forms.save_instance(form,instance,fields=None,fail_message='saved',commit=True,exclude=None,construct=True)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/fields.py----------------------------------------
A:django.forms.fields.empty_values->list(validators.EMPTY_VALUES)
A:django.forms.fields.widget->widget()
A:django.forms.fields.extra_attrs->self.widget_attrs(widget)
A:django.forms.fields.value->self.to_python(value).strip()
A:django.forms.fields.data->bool(data)
A:django.forms.fields.result->datetime.datetime.combine(*data_list)
A:django.forms.fields.result.widget->copy.deepcopy(self.widget, memo)
A:django.forms.fields.attrs->super(DecimalField, self).widget_attrs(widget)
A:django.forms.fields.(sign, digittuple, exponent)->self.to_python(value).strip().as_tuple()
A:django.forms.fields.decimals->abs(exponent)
A:django.forms.fields.digits->len(digittuple)
A:django.forms.fields.step->str(Decimal('1') / 10 ** self.decimal_places).lower()
A:django.forms.fields.unicode_value->force_text(value, strings_only=True)
A:django.forms.fields.input_formats->django.utils.formats.get_format_lazy('DATETIME_INPUT_FORMATS')
A:django.forms.fields.regex->property(_get_regex, _set_regex)
A:django.forms.fields.self._regex_validator->django.core.validators.RegexValidator(regex=regex)
A:django.forms.fields.self.max_length->kwargs.pop('max_length', None)
A:django.forms.fields.self.allow_empty_file->kwargs.pop('allow_empty_file', False)
A:django.forms.fields.f->os.path.join(root, f)
A:django.forms.fields.file->BytesIO(data['content'])
A:django.forms.fields.url_fields->split_url(urlunsplit(url_fields))
A:django.forms.fields.initial->self.widget.decompress(initial)
A:django.forms.fields.result._choices->copy.deepcopy(self._choices, memo)
A:django.forms.fields.self._choicesself.widget.choices->list(value)
A:django.forms.fields.choices->property(_get_choices, _set_choices)
A:django.forms.fields.text_value->force_text(value)
A:django.forms.fields.self.coerce->kwargs.pop('coerce', lambda val: val)
A:django.forms.fields.self.empty_value->kwargs.pop('empty_value', [])
A:django.forms.fields.initial_set->set([force_text(value) for value in initial])
A:django.forms.fields.data_set->set([force_text(value) for value in data])
A:django.forms.fields.errors->self.default_error_messages.copy()
A:django.forms.fields.out->self.compress(clean_data)
A:django.forms.fields.self.match_re->re.compile(self.match)
A:django.forms.fields.full_file->os.path.join(self.path, f)
A:django.forms.fields.localize->kwargs.get('localize', False)
django.fields.BaseTemporalField(self,input_formats=None,*args,**kwargs)
django.fields.BaseTemporalField.strptime(self,value,format)
django.fields.BaseTemporalField.to_python(self,value)
django.fields.BooleanField(Field)
django.fields.BooleanField._has_changed(self,initial,data)
django.fields.BooleanField.to_python(self,value)
django.fields.BooleanField.validate(self,value)
django.fields.CharField(self,max_length=None,min_length=None,*args,**kwargs)
django.fields.CharField.to_python(self,value)
django.fields.CharField.widget_attrs(self,widget)
django.fields.ChoiceField(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.fields.ChoiceField.__deepcopy__(self,memo)
django.fields.ChoiceField._get_choices(self)
django.fields.ChoiceField._set_choices(self,value)
django.fields.ChoiceField.to_python(self,value)
django.fields.ChoiceField.valid_value(self,value)
django.fields.ChoiceField.validate(self,value)
django.fields.ComboField(self,fields=(),*args,**kwargs)
django.fields.ComboField.clean(self,value)
django.fields.DateField(BaseTemporalField)
django.fields.DateField.strptime(self,value,format)
django.fields.DateField.to_python(self,value)
django.fields.DateTimeField(BaseTemporalField)
django.fields.DateTimeField.prepare_value(self,value)
django.fields.DateTimeField.strptime(self,value,format)
django.fields.DateTimeField.to_python(self,value)
django.fields.DecimalField(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.fields.DecimalField.to_python(self,value)
django.fields.DecimalField.validate(self,value)
django.fields.DecimalField.widget_attrs(self,widget)
django.fields.EmailField(CharField)
django.fields.EmailField.clean(self,value)
django.fields.Field(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.fields.Field.__deepcopy__(self,memo)
django.fields.Field._has_changed(self,initial,data)
django.fields.Field.bound_data(self,data,initial)
django.fields.Field.clean(self,value)
django.fields.Field.prepare_value(self,value)
django.fields.Field.run_validators(self,value)
django.fields.Field.to_python(self,value)
django.fields.Field.validate(self,value)
django.fields.Field.widget_attrs(self,widget)
django.fields.FileField(self,*args,**kwargs)
django.fields.FileField._has_changed(self,initial,data)
django.fields.FileField.bound_data(self,data,initial)
django.fields.FileField.clean(self,data,initial=None)
django.fields.FileField.to_python(self,data)
django.fields.FilePathField(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.fields.FloatField(IntegerField)
django.fields.FloatField.to_python(self,value)
django.fields.FloatField.widget_attrs(self,widget)
django.fields.GenericIPAddressField(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.fields.GenericIPAddressField.to_python(self,value)
django.fields.IPAddressField(CharField)
django.fields.IPAddressField.to_python(self,value)
django.fields.ImageField(FileField)
django.fields.ImageField.to_python(self,data)
django.fields.IntegerField(self,max_value=None,min_value=None,*args,**kwargs)
django.fields.IntegerField.to_python(self,value)
django.fields.IntegerField.widget_attrs(self,widget)
django.fields.MultiValueField(self,fields=(),*args,**kwargs)
django.fields.MultiValueField._has_changed(self,initial,data)
django.fields.MultiValueField.clean(self,value)
django.fields.MultiValueField.compress(self,data_list)
django.fields.MultiValueField.validate(self,value)
django.fields.MultipleChoiceField(ChoiceField)
django.fields.MultipleChoiceField._has_changed(self,initial,data)
django.fields.MultipleChoiceField.to_python(self,value)
django.fields.MultipleChoiceField.validate(self,value)
django.fields.NullBooleanField(BooleanField)
django.fields.NullBooleanField._has_changed(self,initial,data)
django.fields.NullBooleanField.to_python(self,value)
django.fields.NullBooleanField.validate(self,value)
django.fields.RegexField(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.fields.RegexField._get_regex(self)
django.fields.RegexField._set_regex(self,regex)
django.fields.SlugField(CharField)
django.fields.SlugField.clean(self,value)
django.fields.SplitDateTimeField(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.fields.SplitDateTimeField.compress(self,data_list)
django.fields.TimeField(BaseTemporalField)
django.fields.TimeField.strptime(self,value,format)
django.fields.TimeField.to_python(self,value)
django.fields.TypedChoiceField(self,*args,**kwargs)
django.fields.TypedChoiceField.to_python(self,value)
django.fields.TypedMultipleChoiceField(self,*args,**kwargs)
django.fields.TypedMultipleChoiceField.to_python(self,value)
django.fields.TypedMultipleChoiceField.validate(self,value)
django.fields.URLField(CharField)
django.fields.URLField.clean(self,value)
django.fields.URLField.to_python(self,value)
django.forms.fields.BaseTemporalField(self,input_formats=None,*args,**kwargs)
django.forms.fields.BaseTemporalField.__init__(self,input_formats=None,*args,**kwargs)
django.forms.fields.BaseTemporalField.strptime(self,value,format)
django.forms.fields.BaseTemporalField.to_python(self,value)
django.forms.fields.BooleanField(Field)
django.forms.fields.BooleanField._has_changed(self,initial,data)
django.forms.fields.BooleanField.to_python(self,value)
django.forms.fields.BooleanField.validate(self,value)
django.forms.fields.CharField(self,max_length=None,min_length=None,*args,**kwargs)
django.forms.fields.CharField.__init__(self,max_length=None,min_length=None,*args,**kwargs)
django.forms.fields.CharField.to_python(self,value)
django.forms.fields.CharField.widget_attrs(self,widget)
django.forms.fields.ChoiceField(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.ChoiceField.__deepcopy__(self,memo)
django.forms.fields.ChoiceField.__init__(self,choices=(),required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.ChoiceField._get_choices(self)
django.forms.fields.ChoiceField._set_choices(self,value)
django.forms.fields.ChoiceField.to_python(self,value)
django.forms.fields.ChoiceField.valid_value(self,value)
django.forms.fields.ChoiceField.validate(self,value)
django.forms.fields.ComboField(self,fields=(),*args,**kwargs)
django.forms.fields.ComboField.__init__(self,fields=(),*args,**kwargs)
django.forms.fields.ComboField.clean(self,value)
django.forms.fields.DateField(BaseTemporalField)
django.forms.fields.DateField.strptime(self,value,format)
django.forms.fields.DateField.to_python(self,value)
django.forms.fields.DateTimeField(BaseTemporalField)
django.forms.fields.DateTimeField.prepare_value(self,value)
django.forms.fields.DateTimeField.strptime(self,value,format)
django.forms.fields.DateTimeField.to_python(self,value)
django.forms.fields.DecimalField(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.forms.fields.DecimalField.__init__(self,max_value=None,min_value=None,max_digits=None,decimal_places=None,*args,**kwargs)
django.forms.fields.DecimalField.to_python(self,value)
django.forms.fields.DecimalField.validate(self,value)
django.forms.fields.DecimalField.widget_attrs(self,widget)
django.forms.fields.EmailField(CharField)
django.forms.fields.EmailField.clean(self,value)
django.forms.fields.Field(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.forms.fields.Field.__deepcopy__(self,memo)
django.forms.fields.Field.__init__(self,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=[],localize=False)
django.forms.fields.Field._has_changed(self,initial,data)
django.forms.fields.Field.bound_data(self,data,initial)
django.forms.fields.Field.clean(self,value)
django.forms.fields.Field.prepare_value(self,value)
django.forms.fields.Field.run_validators(self,value)
django.forms.fields.Field.to_python(self,value)
django.forms.fields.Field.validate(self,value)
django.forms.fields.Field.widget_attrs(self,widget)
django.forms.fields.FileField(self,*args,**kwargs)
django.forms.fields.FileField.__init__(self,*args,**kwargs)
django.forms.fields.FileField._has_changed(self,initial,data)
django.forms.fields.FileField.bound_data(self,data,initial)
django.forms.fields.FileField.clean(self,data,initial=None)
django.forms.fields.FileField.to_python(self,data)
django.forms.fields.FilePathField(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.FilePathField.__init__(self,path,match=None,recursive=False,allow_files=True,allow_folders=False,required=True,widget=None,label=None,initial=None,help_text='',*args,**kwargs)
django.forms.fields.FloatField(IntegerField)
django.forms.fields.FloatField.to_python(self,value)
django.forms.fields.FloatField.widget_attrs(self,widget)
django.forms.fields.GenericIPAddressField(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.forms.fields.GenericIPAddressField.__init__(self,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.forms.fields.GenericIPAddressField.to_python(self,value)
django.forms.fields.IPAddressField(CharField)
django.forms.fields.IPAddressField.to_python(self,value)
django.forms.fields.ImageField(FileField)
django.forms.fields.ImageField.to_python(self,data)
django.forms.fields.IntegerField(self,max_value=None,min_value=None,*args,**kwargs)
django.forms.fields.IntegerField.__init__(self,max_value=None,min_value=None,*args,**kwargs)
django.forms.fields.IntegerField.to_python(self,value)
django.forms.fields.IntegerField.widget_attrs(self,widget)
django.forms.fields.MultiValueField(self,fields=(),*args,**kwargs)
django.forms.fields.MultiValueField.__init__(self,fields=(),*args,**kwargs)
django.forms.fields.MultiValueField._has_changed(self,initial,data)
django.forms.fields.MultiValueField.clean(self,value)
django.forms.fields.MultiValueField.compress(self,data_list)
django.forms.fields.MultiValueField.validate(self,value)
django.forms.fields.MultipleChoiceField(ChoiceField)
django.forms.fields.MultipleChoiceField._has_changed(self,initial,data)
django.forms.fields.MultipleChoiceField.to_python(self,value)
django.forms.fields.MultipleChoiceField.validate(self,value)
django.forms.fields.NullBooleanField(BooleanField)
django.forms.fields.NullBooleanField._has_changed(self,initial,data)
django.forms.fields.NullBooleanField.to_python(self,value)
django.forms.fields.NullBooleanField.validate(self,value)
django.forms.fields.RegexField(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.forms.fields.RegexField.__init__(self,regex,max_length=None,min_length=None,error_message=None,*args,**kwargs)
django.forms.fields.RegexField._get_regex(self)
django.forms.fields.RegexField._set_regex(self,regex)
django.forms.fields.SlugField(CharField)
django.forms.fields.SlugField.clean(self,value)
django.forms.fields.SplitDateTimeField(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.forms.fields.SplitDateTimeField.__init__(self,input_date_formats=None,input_time_formats=None,*args,**kwargs)
django.forms.fields.SplitDateTimeField.compress(self,data_list)
django.forms.fields.TimeField(BaseTemporalField)
django.forms.fields.TimeField.strptime(self,value,format)
django.forms.fields.TimeField.to_python(self,value)
django.forms.fields.TypedChoiceField(self,*args,**kwargs)
django.forms.fields.TypedChoiceField.__init__(self,*args,**kwargs)
django.forms.fields.TypedChoiceField.to_python(self,value)
django.forms.fields.TypedMultipleChoiceField(self,*args,**kwargs)
django.forms.fields.TypedMultipleChoiceField.__init__(self,*args,**kwargs)
django.forms.fields.TypedMultipleChoiceField.to_python(self,value)
django.forms.fields.TypedMultipleChoiceField.validate(self,value)
django.forms.fields.URLField(CharField)
django.forms.fields.URLField.clean(self,value)
django.forms.fields.URLField.to_python(self,value)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/forms.py----------------------------------------
A:django.forms.forms.attrs['base_fields']->get_declared_fields(bases, attrs)
A:django.forms.forms.new_class->super(DeclarativeFieldsMetaclass, cls).__new__(cls, name, bases, attrs)
A:django.forms.forms.new_class.media->media_property(new_class)
A:django.forms.forms.self.fields->copy.deepcopy(self.base_fields)
A:django.forms.forms.top_errors->self.non_field_errors()
A:django.forms.forms.bf_errors->self.error_class([conditional_escape(error) for error in bf.errors])
A:django.forms.forms.css_classes->bf.css_classes()
A:django.forms.forms.label->conditional_escape(force_text(bf.label))
A:django.forms.forms.str_hidden->''.join(hidden_fields)
A:django.forms.forms.prefix->self.add_prefix(fieldname)
A:django.forms.forms.self._errors->ErrorDict()
A:django.forms.forms.value->getattr(self, 'clean_%s' % name)()
A:django.forms.forms.initial->self.initial.get(name, field.initial)
A:django.forms.forms.self._errors[name]->self.error_class(e.messages)
A:django.forms.forms.self.cleaned_data->self.clean()
A:django.forms.forms.self._errors[NON_FIELD_ERRORS]->self.error_class(e.messages)
A:django.forms.forms.prefixed_name->self.add_prefix(name)
A:django.forms.forms.data_value->field.widget.value_from_datadict(self.data, self.files, prefixed_name)
A:django.forms.forms.initial_value->field.to_python(hidden_widget.value_from_datadict(self.data, self.files, initial_prefixed_name))
A:django.forms.forms.initial_prefixed_name->self.add_initial_prefix(name)
A:django.forms.forms.hidden_widget->field.hidden_widget()
A:django.forms.forms.media->Media()
A:django.forms.forms.self.html_name->form.add_prefix(name)
A:django.forms.forms.self.html_initial_name->form.add_initial_prefix(name)
A:django.forms.forms.self.html_initial_id->form.add_initial_prefix(self.auto_id)
A:django.forms.forms.self.label->pretty_name(name)
A:django.forms.forms.data->self.field.bound_data(self.data, self.form.initial.get(self.name, self.field.initial))
A:django.forms.forms.contents->conditional_escape(contents)
A:django.forms.forms.id_for_label->widget.id_for_label(id_)
A:django.forms.forms.attrs->dict(attrs or {}, **{'for': id_for_label})
A:django.forms.forms.extra_classes->set(extra_classes or [])
django.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.BaseForm.__getitem__(self,name)
django.BaseForm.__iter__(self)
django.BaseForm.__str__(self)
django.BaseForm._clean_fields(self)
django.BaseForm._clean_form(self)
django.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.BaseForm._post_clean(self)
django.BaseForm._raw_value(self,fieldname)
django.BaseForm.add_initial_prefix(self,field_name)
django.BaseForm.add_prefix(self,field_name)
django.BaseForm.as_p(self)
django.BaseForm.as_table(self)
django.BaseForm.as_ul(self)
django.BaseForm.changed_data(self)
django.BaseForm.clean(self)
django.BaseForm.errors(self)
django.BaseForm.full_clean(self)
django.BaseForm.has_changed(self)
django.BaseForm.hidden_fields(self)
django.BaseForm.is_multipart(self)
django.BaseForm.is_valid(self)
django.BaseForm.media(self)
django.BaseForm.non_field_errors(self)
django.BaseForm.visible_fields(self)
django.BoundField(self,form,field,name)
django.BoundField.__getitem__(self,idx)
django.BoundField.__iter__(self)
django.BoundField.__len__(self)
django.BoundField.__str__(self)
django.BoundField.as_hidden(self,attrs=None,**kwargs)
django.BoundField.as_text(self,attrs=None,**kwargs)
django.BoundField.as_textarea(self,attrs=None,**kwargs)
django.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.BoundField.auto_id(self)
django.BoundField.css_classes(self,extra_classes=None)
django.BoundField.data(self)
django.BoundField.errors(self)
django.BoundField.id_for_label(self)
django.BoundField.is_hidden(self)
django.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.BoundField.value(self)
django.DeclarativeFieldsMetaclass(cls,name,bases,attrs)
django.Form(six.with_metaclass(DeclarativeFieldsMetaclass,BaseForm))
django.forms.forms.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.forms.forms.BaseForm.__getitem__(self,name)
django.forms.forms.BaseForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False)
django.forms.forms.BaseForm.__iter__(self)
django.forms.forms.BaseForm.__str__(self)
django.forms.forms.BaseForm._clean_fields(self)
django.forms.forms.BaseForm._clean_form(self)
django.forms.forms.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.forms.forms.BaseForm._post_clean(self)
django.forms.forms.BaseForm._raw_value(self,fieldname)
django.forms.forms.BaseForm.add_initial_prefix(self,field_name)
django.forms.forms.BaseForm.add_prefix(self,field_name)
django.forms.forms.BaseForm.as_p(self)
django.forms.forms.BaseForm.as_table(self)
django.forms.forms.BaseForm.as_ul(self)
django.forms.forms.BaseForm.changed_data(self)
django.forms.forms.BaseForm.clean(self)
django.forms.forms.BaseForm.errors(self)
django.forms.forms.BaseForm.full_clean(self)
django.forms.forms.BaseForm.has_changed(self)
django.forms.forms.BaseForm.hidden_fields(self)
django.forms.forms.BaseForm.is_multipart(self)
django.forms.forms.BaseForm.is_valid(self)
django.forms.forms.BaseForm.media(self)
django.forms.forms.BaseForm.non_field_errors(self)
django.forms.forms.BaseForm.visible_fields(self)
django.forms.forms.BoundField(self,form,field,name)
django.forms.forms.BoundField.__getitem__(self,idx)
django.forms.forms.BoundField.__init__(self,form,field,name)
django.forms.forms.BoundField.__iter__(self)
django.forms.forms.BoundField.__len__(self)
django.forms.forms.BoundField.__str__(self)
django.forms.forms.BoundField.as_hidden(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_text(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_textarea(self,attrs=None,**kwargs)
django.forms.forms.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.forms.forms.BoundField.auto_id(self)
django.forms.forms.BoundField.css_classes(self,extra_classes=None)
django.forms.forms.BoundField.data(self)
django.forms.forms.BoundField.errors(self)
django.forms.forms.BoundField.id_for_label(self)
django.forms.forms.BoundField.is_hidden(self)
django.forms.forms.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.forms.forms.BoundField.value(self)
django.forms.forms.DeclarativeFieldsMetaclass(cls,name,bases,attrs)
django.forms.forms.DeclarativeFieldsMetaclass.__new__(cls,name,bases,attrs)
django.forms.forms.Form(six.with_metaclass(DeclarativeFieldsMetaclass,BaseForm))
django.forms.forms.get_declared_fields(bases,attrs,with_base_fields=True)
django.forms.forms.pretty_name(name)
django.get_declared_fields(bases,attrs,with_base_fields=True)
django.pretty_name(name)


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/extras/widgets.py----------------------------------------
A:django.forms.extras.widgets.RE_DATE->re.compile('(\\d{4})-(\\d\\d?)-(\\d\\d?)$')
A:django.forms.extras.widgets.fmt->get_format('DATE_FORMAT')
A:django.forms.extras.widgets.self.years->range(this_year, this_year + 10)
A:django.forms.extras.widgets.v->datetime.datetime.strptime(force_str(value), input_format)
A:django.forms.extras.widgets.match->re.compile('(\\d{4})-(\\d\\d?)-(\\d\\d?)$').match(value)
A:django.forms.extras.widgets.year_html->self.create_select(name, self.year_field, value, year_val, choices)
A:django.forms.extras.widgets.choices->list(six.iteritems(MONTHS))
A:django.forms.extras.widgets.month_html->self.create_select(name, self.month_field, value, month_val, choices)
A:django.forms.extras.widgets.day_html->self.create_select(name, self.day_field, value, day_val, choices)
A:django.forms.extras.widgets.field_list->_parse_date_fmt()
A:django.forms.extras.widgets.y->data.get(self.year_field % name)
A:django.forms.extras.widgets.m->data.get(self.month_field % name)
A:django.forms.extras.widgets.d->data.get(self.day_field % name)
A:django.forms.extras.widgets.date_value->django.utils.datetime_safe.new_date(date_value)
A:django.forms.extras.widgets.local_attrs->self.build_attrs(id=field % id_)
A:django.forms.extras.widgets.s->Select(choices=choices)
A:django.forms.extras.widgets.select_html->Select(choices=choices).render(field % name, val, local_attrs)
django.extras.SelectDateWidget(self,attrs=None,years=None,required=True)
django.extras.SelectDateWidget.create_select(self,name,field,value,val,choices)
django.extras.SelectDateWidget.id_for_label(self,id_)
django.extras.SelectDateWidget.render(self,name,value,attrs=None)
django.extras.SelectDateWidget.value_from_datadict(self,data,files,name)
django.extras._parse_date_fmt()
django.forms.extras.widgets.SelectDateWidget(self,attrs=None,years=None,required=True)
django.forms.extras.widgets.SelectDateWidget.__init__(self,attrs=None,years=None,required=True)
django.forms.extras.widgets.SelectDateWidget.create_select(self,name,field,value,val,choices)
django.forms.extras.widgets.SelectDateWidget.id_for_label(self,id_)
django.forms.extras.widgets.SelectDateWidget.render(self,name,value,attrs=None)
django.forms.extras.widgets.SelectDateWidget.value_from_datadict(self,data,files,name)
django.forms.extras.widgets._parse_date_fmt()


----------------------------------------/home/zhang/Packages/django/django1.6.6/forms/extras/__init__.py----------------------------------------

