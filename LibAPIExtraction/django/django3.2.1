
----------------------------------------/home/zhang/Packages/django/django3.2.1/shortcuts.py----------------------------------------
A:django.shortcuts.content->django.template.loader.render_to_string(template_name, context, request, using=using)
A:django.shortcuts.queryset->_get_queryset(klass)
A:django.shortcuts.obj_list->list(queryset.filter(*args, **kwargs))
A:django.shortcuts.to->str(to)
django.shortcuts._get_queryset(klass)
django.shortcuts.get_list_or_404(klass,*args,**kwargs)
django.shortcuts.get_object_or_404(klass,*args,**kwargs)
django.shortcuts.redirect(to,*args,permanent=False,**kwargs)
django.shortcuts.render(request,template_name,context=None,content_type=None,status=None,using=None)
django.shortcuts.resolve_url(to,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/__init__.py----------------------------------------
A:django.__init__.__version__->get_version(VERSION)
django.__init__.setup(set_prefix=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/locale.py----------------------------------------
A:django.middleware.locale.urlconf->getattr(request, 'urlconf', settings.ROOT_URLCONF)
A:django.middleware.locale.(i18n_patterns_used, prefixed_default_language)->is_language_prefix_patterns_used(urlconf)
A:django.middleware.locale.language->django.utils.translation.get_language()
A:django.middleware.locale.language_from_path->django.utils.translation.get_language_from_path(request.path_info)
A:django.middleware.locale.request.LANGUAGE_CODE->django.utils.translation.get_language()
A:django.middleware.locale.path_valid->is_valid_path(language_path, urlconf)
A:django.middleware.locale.script_prefix->get_script_prefix()
A:django.middleware.locale.language_url->request.get_full_path(force_append_slash=path_needs_slash).replace(script_prefix, '%s%s/' % (script_prefix, language), 1)
django.middleware.locale.LocaleMiddleware(MiddlewareMixin)
django.middleware.locale.LocaleMiddleware.process_request(self,request)
django.middleware.locale.LocaleMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/cache.py----------------------------------------
A:django.middleware.cache.timeout->get_max_age(response)
A:django.middleware.cache.cache_key->get_cache_key(request, self.key_prefix, 'HEAD', cache=self.cache)
A:django.middleware.cache.response->self.cache.get(cache_key)
django.middleware.cache.CacheMiddleware(self,get_response=None,cache_timeout=None,page_timeout=None,**kwargs)
django.middleware.cache.CacheMiddleware.__init__(self,get_response=None,cache_timeout=None,page_timeout=None,**kwargs)
django.middleware.cache.FetchFromCacheMiddleware(self,get_response=None)
django.middleware.cache.FetchFromCacheMiddleware.__init__(self,get_response=None)
django.middleware.cache.FetchFromCacheMiddleware.process_request(self,request)
django.middleware.cache.UpdateCacheMiddleware(self,get_response=None)
django.middleware.cache.UpdateCacheMiddleware.__init__(self,get_response=None)
django.middleware.cache.UpdateCacheMiddleware._should_update_cache(self,request,response)
django.middleware.cache.UpdateCacheMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/gzip.py----------------------------------------
A:django.middleware.gzip.re_accepts_gzip->_lazy_re_compile('\\bgzip\\b')
A:django.middleware.gzip.ae->request.META.get('HTTP_ACCEPT_ENCODING', '')
A:django.middleware.gzip.response.streaming_content->compress_sequence(response.streaming_content)
A:django.middleware.gzip.compressed_content->compress_string(response.content)
A:django.middleware.gzip.response.headers['Content-Length']->str(len(response.content))
A:django.middleware.gzip.etag->response.get('ETag')
django.middleware.gzip.GZipMiddleware(MiddlewareMixin)
django.middleware.gzip.GZipMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/common.py----------------------------------------
A:django.middleware.common.user_agent->request.META.get('HTTP_USER_AGENT')
A:django.middleware.common.host->request.get_host()
A:django.middleware.common.path->request.get_full_path()
A:django.middleware.common.urlconf->getattr(request, 'urlconf', None)
A:django.middleware.common.match->is_valid_path('%s/' % request.path_info, urlconf)
A:django.middleware.common.new_path->escape_leading_slashes(new_path)
A:django.middleware.common.response.headers['Content-Length']->str(len(response.content))
A:django.middleware.common.domain->request.get_host()
A:django.middleware.common.referer->request.META.get('HTTP_REFERER', '')
A:django.middleware.common.ua->request.META.get('HTTP_USER_AGENT', '<none>')
A:django.middleware.common.ip->request.META.get('REMOTE_ADDR', '<none>')
A:django.middleware.common.parsed_referer->urlparse(referer)
django.middleware.common.BrokenLinkEmailsMiddleware(MiddlewareMixin)
django.middleware.common.BrokenLinkEmailsMiddleware.is_ignorable_request(self,request,uri,domain,referer)
django.middleware.common.BrokenLinkEmailsMiddleware.is_internal_request(self,domain,referer)
django.middleware.common.BrokenLinkEmailsMiddleware.process_response(self,request,response)
django.middleware.common.CommonMiddleware(MiddlewareMixin)
django.middleware.common.CommonMiddleware.get_full_path_with_slash(self,request)
django.middleware.common.CommonMiddleware.process_request(self,request)
django.middleware.common.CommonMiddleware.process_response(self,request,response)
django.middleware.common.CommonMiddleware.should_redirect_with_slash(self,request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/csrf.py----------------------------------------
A:django.middleware.csrf.logger->logging.getLogger('django.security.csrf')
A:django.middleware.csrf.mask->_get_new_csrf_string()
A:django.middleware.csrf.pairs->zip((chars.index(x) for x in token), (chars.index(x) for x in mask))
A:django.middleware.csrf.cipher->''.join((chars[(x + y) % len(chars)] for (x, y) in pairs))
A:django.middleware.csrf.csrf_secret->_unmask_cipher_token(request.META['CSRF_COOKIE'])
A:django.middleware.csrf.request.META['CSRF_COOKIE']->_mask_cipher_secret(csrf_secret)
A:django.middleware.csrf.response->_get_failure_view()(request, reason=reason)
A:django.middleware.csrf.csrf_token->self._get_token(request)
A:django.middleware.csrf.referer->urlparse(referer)
A:django.middleware.csrf.server_port->request.get_port()
A:django.middleware.csrf.good_referer->request.get_host()
A:django.middleware.csrf.good_hosts->list(settings.CSRF_TRUSTED_ORIGINS)
A:django.middleware.csrf.request_csrf_token->_sanitize_token(request_csrf_token)
django.middleware.csrf.CsrfViewMiddleware(MiddlewareMixin)
django.middleware.csrf.CsrfViewMiddleware._accept(self,request)
django.middleware.csrf.CsrfViewMiddleware._get_token(self,request)
django.middleware.csrf.CsrfViewMiddleware._reject(self,request,reason)
django.middleware.csrf.CsrfViewMiddleware._set_token(self,request,response)
django.middleware.csrf.CsrfViewMiddleware.process_request(self,request)
django.middleware.csrf.CsrfViewMiddleware.process_response(self,request,response)
django.middleware.csrf.CsrfViewMiddleware.process_view(self,request,callback,callback_args,callback_kwargs)
django.middleware.csrf._compare_masked_tokens(request_csrf_token,csrf_token)
django.middleware.csrf._get_failure_view()
django.middleware.csrf._get_new_csrf_string()
django.middleware.csrf._get_new_csrf_token()
django.middleware.csrf._mask_cipher_secret(secret)
django.middleware.csrf._sanitize_token(token)
django.middleware.csrf._unmask_cipher_token(token)
django.middleware.csrf.get_token(request)
django.middleware.csrf.rotate_token(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/http.py----------------------------------------
A:django.middleware.http.etag->response.get('ETag')
A:django.middleware.http.last_modified->response.get('Last-Modified')
A:django.middleware.http.cache_control_headers->django.utils.cache.cc_delim_re.split(response.get('Cache-Control', ''))
django.middleware.http.ConditionalGetMiddleware(MiddlewareMixin)
django.middleware.http.ConditionalGetMiddleware.needs_etag(self,response)
django.middleware.http.ConditionalGetMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/clickjacking.py----------------------------------------
A:django.middleware.clickjacking.response.headers['X-Frame-Options']->self.get_xframe_options_value(request, response)
django.middleware.clickjacking.XFrameOptionsMiddleware(MiddlewareMixin)
django.middleware.clickjacking.XFrameOptionsMiddleware.get_xframe_options_value(self,request,response)
django.middleware.clickjacking.XFrameOptionsMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/middleware/security.py----------------------------------------
A:django.middleware.security.path->request.path.lstrip('/')
django.middleware.security.SecurityMiddleware(self,get_response=None)
django.middleware.security.SecurityMiddleware.__init__(self,get_response=None)
django.middleware.security.SecurityMiddleware.process_request(self,request)
django.middleware.security.SecurityMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/transaction.py----------------------------------------
A:django.db.transaction.connection->get_connection(self.using)
A:django.db.transaction.sid->get_connection(self.using).savepoint_ids.pop()
django.db.transaction.Atomic(self,using,savepoint,durable)
django.db.transaction.Atomic.__enter__(self)
django.db.transaction.Atomic.__exit__(self,exc_type,exc_value,traceback)
django.db.transaction.Atomic.__init__(self,using,savepoint,durable)
django.db.transaction.TransactionManagementError(ProgrammingError)
django.db.transaction._non_atomic_requests(view,using)
django.db.transaction.atomic(using=None,savepoint=True,durable=False)
django.db.transaction.clean_savepoints(using=None)
django.db.transaction.commit(using=None)
django.db.transaction.get_autocommit(using=None)
django.db.transaction.get_connection(using=None)
django.db.transaction.get_rollback(using=None)
django.db.transaction.mark_for_rollback_on_error(using=None)
django.db.transaction.non_atomic_requests(using=None)
django.db.transaction.on_commit(func,using=None)
django.db.transaction.rollback(using=None)
django.db.transaction.savepoint(using=None)
django.db.transaction.savepoint_commit(sid,using=None)
django.db.transaction.savepoint_rollback(sid,using=None)
django.db.transaction.set_autocommit(autocommit,using=None)
django.db.transaction.set_rollback(rollback,using=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/utils.py----------------------------------------
A:django.db.utils.db_exc_type->getattr(self.wrapper.Database, dj_exc_type.__name__)
A:django.db.utils.dj_exc_value->dj_exc_type(*exc_value.args)
A:django.db.utils.backend_reprs->map(repr, sorted(builtin_backends))
A:django.db.utils.databases->super().configure_settings(databases)
A:django.db.utils.test_settings->conn.setdefault('TEST', {})
A:django.db.utils.backend->load_backend(db['ENGINE'])
A:django.db.utils.connection->getattr(self._connections, alias)
A:django.db.utils.router->import_string(r)()
A:django.db.utils.method->getattr(router, action)
A:django.db.utils.chosen_db->method(model, **hints)
A:django.db.utils.instance->hints.get('instance')
A:django.db.utils.db_for_read->_router_func('db_for_read')
A:django.db.utils.db_for_write->_router_func('db_for_write')
A:django.db.utils.allow->method(db, app_label, **hints)
A:django.db.utils.models->app_config.get_models(include_auto_created=include_auto_created)
django.db.ConnectionHandler(BaseConnectionHandler)
django.db.ConnectionHandler.close_all(self)
django.db.ConnectionHandler.configure_settings(self,databases)
django.db.ConnectionHandler.create_connection(self,alias)
django.db.ConnectionHandler.databases(self)
django.db.ConnectionHandler.ensure_defaults(self,alias)
django.db.ConnectionHandler.prepare_test_settings(self,alias)
django.db.ConnectionRouter(self,routers=None)
django.db.ConnectionRouter._router_func(action)
django.db.ConnectionRouter.allow_migrate(self,db,app_label,**hints)
django.db.ConnectionRouter.allow_migrate_model(self,db,model)
django.db.ConnectionRouter.allow_relation(self,obj1,obj2,**hints)
django.db.ConnectionRouter.get_migratable_models(self,app_config,db,include_auto_created=False)
django.db.ConnectionRouter.routers(self)
django.db.DataError(DatabaseError)
django.db.DatabaseError(Error)
django.db.DatabaseErrorWrapper(self,wrapper)
django.db.DatabaseErrorWrapper.__enter__(self)
django.db.DatabaseErrorWrapper.__exit__(self,exc_type,exc_value,traceback)
django.db.Error(Exception)
django.db.IntegrityError(DatabaseError)
django.db.InterfaceError(Error)
django.db.InternalError(DatabaseError)
django.db.NotSupportedError(DatabaseError)
django.db.OperationalError(DatabaseError)
django.db.ProgrammingError(DatabaseError)
django.db.utils.ConnectionHandler(BaseConnectionHandler)
django.db.utils.ConnectionHandler.close_all(self)
django.db.utils.ConnectionHandler.configure_settings(self,databases)
django.db.utils.ConnectionHandler.create_connection(self,alias)
django.db.utils.ConnectionHandler.databases(self)
django.db.utils.ConnectionHandler.ensure_defaults(self,alias)
django.db.utils.ConnectionHandler.prepare_test_settings(self,alias)
django.db.utils.ConnectionRouter(self,routers=None)
django.db.utils.ConnectionRouter.__init__(self,routers=None)
django.db.utils.ConnectionRouter._router_func(action)
django.db.utils.ConnectionRouter.allow_migrate(self,db,app_label,**hints)
django.db.utils.ConnectionRouter.allow_migrate_model(self,db,model)
django.db.utils.ConnectionRouter.allow_relation(self,obj1,obj2,**hints)
django.db.utils.ConnectionRouter.get_migratable_models(self,app_config,db,include_auto_created=False)
django.db.utils.ConnectionRouter.routers(self)
django.db.utils.DataError(DatabaseError)
django.db.utils.DatabaseError(Error)
django.db.utils.DatabaseErrorWrapper(self,wrapper)
django.db.utils.DatabaseErrorWrapper.__enter__(self)
django.db.utils.DatabaseErrorWrapper.__exit__(self,exc_type,exc_value,traceback)
django.db.utils.DatabaseErrorWrapper.__init__(self,wrapper)
django.db.utils.Error(Exception)
django.db.utils.IntegrityError(DatabaseError)
django.db.utils.InterfaceError(Error)
django.db.utils.InternalError(DatabaseError)
django.db.utils.NotSupportedError(DatabaseError)
django.db.utils.OperationalError(DatabaseError)
django.db.utils.ProgrammingError(DatabaseError)
django.db.utils.load_backend(backend_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/__init__.py----------------------------------------
A:django.db.__init__.connections->ConnectionHandler()
A:django.db.__init__.router->ConnectionRouter()
A:django.db.__init__.connection->ConnectionProxy(connections, DEFAULT_DB_ALIAS)
django.db.__init__.close_old_connections(**kwargs)
django.db.__init__.reset_queries(**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/utils.py----------------------------------------
A:django.db.backends.utils.logger->logging.getLogger('django.db.backends')
A:django.db.backends.utils.WRAP_ERROR_ATTRS->frozenset(['fetchone', 'fetchmany', 'fetchall', 'nextset'])
A:django.db.backends.utils.cursor_attr->getattr(self.cursor, attr)
A:django.db.backends.utils.executor->functools.partial(wrapper, executor)
A:django.db.backends.utils.start->time.monotonic()
A:django.db.backends.utils.stop->time.monotonic()
A:django.db.backends.utils.sql->self.db.ops.last_executed_query(self.cursor, sql, params)
A:django.db.backends.utils.(hour, minutes, seconds)->s.split(':')
A:django.db.backends.utils.(seconds, microseconds)->seconds.split('.')
A:django.db.backends.utils.(d, t)->s.split()
A:django.db.backends.utils.(t, _)->t.split('+', 1)
A:django.db.backends.utils.dates->d.split('-')
A:django.db.backends.utils.times->t.split(':')
A:django.db.backends.utils.(namespace, name)->split_identifier(identifier)
A:django.db.backends.utils.digest->names_digest(name, length=hash_len)
A:django.db.backends.utils.h->hashlib.md5()
A:django.db.backends.utils.context->decimal.getcontext().copy()
A:django.db.backends.utils.value->decimal.getcontext().copy().create_decimal(value)
django.db.backends.utils.CursorDebugWrapper(CursorWrapper)
django.db.backends.utils.CursorDebugWrapper.debug_sql(self,sql=None,params=None,use_last_executed_query=False,many=False)
django.db.backends.utils.CursorDebugWrapper.execute(self,sql,params=None)
django.db.backends.utils.CursorDebugWrapper.executemany(self,sql,param_list)
django.db.backends.utils.CursorWrapper(self,cursor,db)
django.db.backends.utils.CursorWrapper.__enter__(self)
django.db.backends.utils.CursorWrapper.__exit__(self,type,value,traceback)
django.db.backends.utils.CursorWrapper.__getattr__(self,attr)
django.db.backends.utils.CursorWrapper.__init__(self,cursor,db)
django.db.backends.utils.CursorWrapper.__iter__(self)
django.db.backends.utils.CursorWrapper._execute(self,sql,params,*ignored_wrapper_args)
django.db.backends.utils.CursorWrapper._execute_with_wrappers(self,sql,params,many,executor)
django.db.backends.utils.CursorWrapper._executemany(self,sql,param_list,*ignored_wrapper_args)
django.db.backends.utils.CursorWrapper.callproc(self,procname,params=None,kparams=None)
django.db.backends.utils.CursorWrapper.execute(self,sql,params=None)
django.db.backends.utils.CursorWrapper.executemany(self,sql,param_list)
django.db.backends.utils.format_number(value,max_digits,decimal_places)
django.db.backends.utils.names_digest(*args,length)
django.db.backends.utils.split_identifier(identifier)
django.db.backends.utils.strip_quotes(table_name)
django.db.backends.utils.truncate_name(identifier,length=None,hash_len=4)
django.db.backends.utils.typecast_date(s)
django.db.backends.utils.typecast_time(s)
django.db.backends.utils.typecast_timestamp(s)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/signals.py----------------------------------------
A:django.db.backends.signals.connection_created->Signal()


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/ddl_references.py----------------------------------------
A:django.db.backends.ddl_references.col->'{} {}'.format(col, suffix)
A:django.db.backends.ddl_references.self.to_reference->TableColumns(to_table, to_columns)
A:django.db.backends.ddl_references.expressions->deepcopy(self.expressions)
A:django.db.backends.ddl_references.(sql, params)->self.compiler.compile(self.expressions)
A:django.db.backends.ddl_references.params->map(self.quote_value, params)
django.db.backends.ddl_references.Columns(self,table,columns,quote_name,col_suffixes=())
django.db.backends.ddl_references.Columns.__init__(self,table,columns,quote_name,col_suffixes=())
django.db.backends.ddl_references.Columns.__str__(self)
django.db.backends.ddl_references.Expressions(self,table,expressions,compiler,quote_value)
django.db.backends.ddl_references.Expressions.__init__(self,table,expressions,compiler,quote_value)
django.db.backends.ddl_references.Expressions.__str__(self)
django.db.backends.ddl_references.Expressions.rename_column_references(self,table,old_column,new_column)
django.db.backends.ddl_references.Expressions.rename_table_references(self,old_table,new_table)
django.db.backends.ddl_references.ForeignKeyName(self,from_table,from_columns,to_table,to_columns,suffix_template,create_fk_name)
django.db.backends.ddl_references.ForeignKeyName.__init__(self,from_table,from_columns,to_table,to_columns,suffix_template,create_fk_name)
django.db.backends.ddl_references.ForeignKeyName.__str__(self)
django.db.backends.ddl_references.ForeignKeyName.references_column(self,table,column)
django.db.backends.ddl_references.ForeignKeyName.references_table(self,table)
django.db.backends.ddl_references.ForeignKeyName.rename_column_references(self,table,old_column,new_column)
django.db.backends.ddl_references.ForeignKeyName.rename_table_references(self,old_table,new_table)
django.db.backends.ddl_references.IndexColumns(self,table,columns,quote_name,col_suffixes=(),opclasses=())
django.db.backends.ddl_references.IndexColumns.__init__(self,table,columns,quote_name,col_suffixes=(),opclasses=())
django.db.backends.ddl_references.IndexColumns.__str__(self)
django.db.backends.ddl_references.IndexName(self,table,columns,suffix,create_index_name)
django.db.backends.ddl_references.IndexName.__init__(self,table,columns,suffix,create_index_name)
django.db.backends.ddl_references.IndexName.__str__(self)
django.db.backends.ddl_references.Reference
django.db.backends.ddl_references.Reference.__repr__(self)
django.db.backends.ddl_references.Reference.__str__(self)
django.db.backends.ddl_references.Reference.references_column(self,table,column)
django.db.backends.ddl_references.Reference.references_table(self,table)
django.db.backends.ddl_references.Reference.rename_column_references(self,table,old_column,new_column)
django.db.backends.ddl_references.Reference.rename_table_references(self,old_table,new_table)
django.db.backends.ddl_references.Statement(self,template,**parts)
django.db.backends.ddl_references.Statement.__init__(self,template,**parts)
django.db.backends.ddl_references.Statement.__str__(self)
django.db.backends.ddl_references.Statement.references_column(self,table,column)
django.db.backends.ddl_references.Statement.references_table(self,table)
django.db.backends.ddl_references.Statement.rename_column_references(self,table,old_column,new_column)
django.db.backends.ddl_references.Statement.rename_table_references(self,old_table,new_table)
django.db.backends.ddl_references.Table(self,table,quote_name)
django.db.backends.ddl_references.Table.__init__(self,table,quote_name)
django.db.backends.ddl_references.Table.__str__(self)
django.db.backends.ddl_references.Table.references_table(self,table)
django.db.backends.ddl_references.Table.rename_table_references(self,old_table,new_table)
django.db.backends.ddl_references.TableColumns(self,table,columns)
django.db.backends.ddl_references.TableColumns.__init__(self,table,columns)
django.db.backends.ddl_references.TableColumns.references_column(self,table,column)
django.db.backends.ddl_references.TableColumns.rename_column_references(self,table,old_column,new_column)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/validation.py----------------------------------------
django.db.backends.oracle.validation.DatabaseValidation(BaseDatabaseValidation)
django.db.backends.oracle.validation.DatabaseValidation.check_field_type(self,field,field_type)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/functions.py----------------------------------------
django.db.backends.oracle.functions.IntervalToSeconds(self,expression,*,output_field=None,**extra)
django.db.backends.oracle.functions.IntervalToSeconds.__init__(self,expression,*,output_field=None,**extra)
django.db.backends.oracle.functions.SecondsToInterval(self,expression,*,output_field=None,**extra)
django.db.backends.oracle.functions.SecondsToInterval.__init__(self,expression,*,output_field=None,**extra)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/utils.py----------------------------------------
A:django.db.backends.oracle.utils.internal_type->getattr(field, 'target_field', field).get_internal_type()
A:django.db.backends.oracle.utils.self.db_type->self.types.get(internal_type, str)
A:django.db.backends.oracle.utils.self.bound_param->cursor.cursor.var(self.db_type)
django.db.backends.oracle.utils.BulkInsertMapper
django.db.backends.oracle.utils.InsertVar(self,field)
django.db.backends.oracle.utils.InsertVar.__init__(self,field)
django.db.backends.oracle.utils.InsertVar.bind_parameter(self,cursor)
django.db.backends.oracle.utils.InsertVar.get_value(self)
django.db.backends.oracle.utils.Oracle_datetime(datetime.datetime)
django.db.backends.oracle.utils.Oracle_datetime.from_datetime(cls,dt)
django.db.backends.oracle.utils.dsn(settings_dict)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/features.py----------------------------------------
django.db.backends.oracle.features.DatabaseFeatures(BaseDatabaseFeatures)
django.db.backends.oracle.features.DatabaseFeatures.has_json_object_function(self)
django.db.backends.oracle.features.DatabaseFeatures.introspected_field_types(self)
django.db.backends.oracle.features.DatabaseFeatures.supports_collation_on_charfield(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/base.py----------------------------------------
A:django.db.backends.oracle.base.kernel32->ctypes.CDLL('kernel32')
A:django.db.backends.oracle.base.operators->_UninitializedOperatorsDescriptor()
A:django.db.backends.oracle.base.use_returning_into->self.settings_dict['OPTIONS'].get('use_returning_into', True)
A:django.db.backends.oracle.base.conn_params->self.settings_dict['OPTIONS'].copy()
A:django.db.backends.oracle.base.cursor->self.create_cursor()
A:django.db.backends.oracle.base.param->utils.Oracle_datetime.from_datetime(param)
A:django.db.backends.oracle.base.self.force_bytes->force_str(param, cursor.charset, strings_only)
A:django.db.backends.oracle.base.string_size->len(force_bytes(param, cursor.charset, strings_only))
A:django.db.backends.oracle.base.self.cursor->connection.cursor()
A:django.db.backends.oracle.base.context->decimal.Context(prec=precision)
A:django.db.backends.oracle.base.quantize_value->decimal.Decimal(1).scaleb(-scale)
A:django.db.backends.oracle.base.outconverter->FormatStylePlaceholderCursor._get_decimal_converter(precision, scale)
A:django.db.backends.oracle.base.(query, params)->self._fix_for_params(query, params, unify_by_values=True)
A:django.db.backends.oracle.base.params_iter->iter(params)
A:django.db.backends.oracle.base.(query, firstparams)->self._fix_for_params(query, next(params_iter))
django.db.backends.oracle.base.DatabaseWrapper(self,*args,**kwargs)
django.db.backends.oracle.base.DatabaseWrapper.__init__(self,*args,**kwargs)
django.db.backends.oracle.base.DatabaseWrapper._commit(self)
django.db.backends.oracle.base.DatabaseWrapper._savepoint_commit(self,sid)
django.db.backends.oracle.base.DatabaseWrapper._set_autocommit(self,autocommit)
django.db.backends.oracle.base.DatabaseWrapper.check_constraints(self,table_names=None)
django.db.backends.oracle.base.DatabaseWrapper.create_cursor(self,name=None)
django.db.backends.oracle.base.DatabaseWrapper.cx_oracle_version(self)
django.db.backends.oracle.base.DatabaseWrapper.get_connection_params(self)
django.db.backends.oracle.base.DatabaseWrapper.get_new_connection(self,conn_params)
django.db.backends.oracle.base.DatabaseWrapper.init_connection_state(self)
django.db.backends.oracle.base.DatabaseWrapper.is_usable(self)
django.db.backends.oracle.base.DatabaseWrapper.oracle_version(self)
django.db.backends.oracle.base.FormatStylePlaceholderCursor(self,connection)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.__getattr__(self,attr)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.__init__(self,connection)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.__iter__(self)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._fix_for_params(self,query,params,unify_by_values=False)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._format_params(self,params)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._get_decimal_converter(precision,scale)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._guess_input_sizes(self,params_list)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._output_number_converter(value)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._output_type_handler(cursor,name,defaultType,length,precision,scale)
django.db.backends.oracle.base.FormatStylePlaceholderCursor._param_generator(self,params)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.arrayvar(self,*args)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.close(self)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.execute(self,query,params=None)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.executemany(self,query,params=None)
django.db.backends.oracle.base.FormatStylePlaceholderCursor.var(self,*args)
django.db.backends.oracle.base.OracleParam(self,param,cursor,strings_only=False)
django.db.backends.oracle.base.OracleParam.__init__(self,param,cursor,strings_only=False)
django.db.backends.oracle.base.VariableWrapper(self,var)
django.db.backends.oracle.base.VariableWrapper.__getattr__(self,key)
django.db.backends.oracle.base.VariableWrapper.__init__(self,var)
django.db.backends.oracle.base.VariableWrapper.__setattr__(self,key,value)
django.db.backends.oracle.base.VariableWrapper.bind_parameter(self,cursor)
django.db.backends.oracle.base._UninitializedOperatorsDescriptor
django.db.backends.oracle.base._UninitializedOperatorsDescriptor.__get__(self,instance,cls=None)
django.db.backends.oracle.base._setup_environment(environ)
django.db.backends.oracle.base.wrap_oracle_errors()


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/schema.py----------------------------------------
A:django.db.backends.oracle.schema.description->str(e)
A:django.db.backends.oracle.schema.new_temp_field->copy.deepcopy(new_field)
A:django.db.backends.oracle.schema.new_temp_field.column->self._generate_temp_name(new_field.column)
A:django.db.backends.oracle.schema.new_value->self.quote_name(old_field.column)
A:django.db.backends.oracle.schema.old_type->old_field.db_type(self.connection)
A:django.db.backends.oracle.schema.new_internal_type->new_field.get_internal_type()
A:django.db.backends.oracle.schema.nn->self.quote_name(name)
A:django.db.backends.oracle.schema.create_index->super()._field_should_be_indexed(model, field)
A:django.db.backends.oracle.schema.db_type->field.db_type(self.connection)
A:django.db.backends.oracle.schema.row->cursor.fetchone()
A:django.db.backends.oracle.schema.new_collation->self._get_default_collation(model._meta.db_table)
django.db.backends.oracle.schema.DatabaseSchemaEditor(BaseDatabaseSchemaEditor)
django.db.backends.oracle.schema.DatabaseSchemaEditor._alter_column_collation_sql(self,model,new_field,new_type,new_collation)
django.db.backends.oracle.schema.DatabaseSchemaEditor._alter_column_type_sql(self,model,old_field,new_field,new_type)
django.db.backends.oracle.schema.DatabaseSchemaEditor._alter_field_type_workaround(self,model,old_field,new_field)
django.db.backends.oracle.schema.DatabaseSchemaEditor._drop_identity(self,table_name,column_name)
django.db.backends.oracle.schema.DatabaseSchemaEditor._field_should_be_indexed(self,model,field)
django.db.backends.oracle.schema.DatabaseSchemaEditor._generate_temp_name(self,for_name)
django.db.backends.oracle.schema.DatabaseSchemaEditor._get_default_collation(self,table_name)
django.db.backends.oracle.schema.DatabaseSchemaEditor._is_identity_column(self,table_name,column_name)
django.db.backends.oracle.schema.DatabaseSchemaEditor._unique_should_be_added(self,old_field,new_field)
django.db.backends.oracle.schema.DatabaseSchemaEditor.alter_field(self,model,old_field,new_field,strict=False)
django.db.backends.oracle.schema.DatabaseSchemaEditor.delete_model(self,model)
django.db.backends.oracle.schema.DatabaseSchemaEditor.normalize_name(self,name)
django.db.backends.oracle.schema.DatabaseSchemaEditor.prepare_default(self,value)
django.db.backends.oracle.schema.DatabaseSchemaEditor.quote_value(self,value)
django.db.backends.oracle.schema.DatabaseSchemaEditor.remove_field(self,model,field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/creation.py----------------------------------------
A:django.db.backends.oracle.creation.DatabaseWrapper->type(self.connection)
A:django.db.backends.oracle.creation.parameters->self._get_test_db_params()
A:django.db.backends.oracle.creation.confirm->input("Type 'yes' to delete user %s: " % parameters['user'])
A:django.db.backends.oracle.creation.success->self._execute_allow_fail_statements(cursor, [extra], parameters, verbosity, 'ORA-01031')
A:django.db.backends.oracle.creation.description->str(err)
A:django.db.backends.oracle.creation.val->settings_dict['TEST'].get(key, default)
A:django.db.backends.oracle.creation.password->get_random_string(30)
django.db.backends.oracle.creation.DatabaseCreation(BaseDatabaseCreation)
django.db.backends.oracle.creation.DatabaseCreation._create_test_db(self,verbosity=1,autoclobber=False,keepdb=False)
django.db.backends.oracle.creation.DatabaseCreation._create_test_user(self,cursor,parameters,verbosity,keepdb=False)
django.db.backends.oracle.creation.DatabaseCreation._destroy_test_db(self,test_database_name,verbosity=1)
django.db.backends.oracle.creation.DatabaseCreation._destroy_test_user(self,cursor,parameters,verbosity)
django.db.backends.oracle.creation.DatabaseCreation._execute_allow_fail_statements(self,cursor,statements,parameters,verbosity,acceptable_ora_err)
django.db.backends.oracle.creation.DatabaseCreation._execute_statements(self,cursor,statements,parameters,verbosity,allow_quiet_fail=False)
django.db.backends.oracle.creation.DatabaseCreation._execute_test_db_creation(self,cursor,parameters,verbosity,keepdb=False)
django.db.backends.oracle.creation.DatabaseCreation._execute_test_db_destruction(self,cursor,parameters,verbosity)
django.db.backends.oracle.creation.DatabaseCreation._get_test_db_name(self)
django.db.backends.oracle.creation.DatabaseCreation._get_test_db_params(self)
django.db.backends.oracle.creation.DatabaseCreation._handle_objects_preventing_db_destruction(self,cursor,parameters,verbosity,autoclobber)
django.db.backends.oracle.creation.DatabaseCreation._maindb_connection(self)
django.db.backends.oracle.creation.DatabaseCreation._switch_to_test_user(self,parameters)
django.db.backends.oracle.creation.DatabaseCreation._test_database_create(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_name(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_oracle_managed_files(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_passwd(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_datafile(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_extsize(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_maxsize(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_size(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_tmp(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_tmp_datafile(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_tmp_extsize(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_tmp_maxsize(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_tblspace_tmp_size(self)
django.db.backends.oracle.creation.DatabaseCreation._test_database_user(self)
django.db.backends.oracle.creation.DatabaseCreation._test_settings_get(self,key,default=None,prefixed=None)
django.db.backends.oracle.creation.DatabaseCreation._test_user_create(self)
django.db.backends.oracle.creation.DatabaseCreation.set_as_test_mirror(self,primary_settings_dict)
django.db.backends.oracle.creation.DatabaseCreation.test_db_signature(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/operations.py----------------------------------------
A:django.db.backends.oracle.operations.field_name->self._convert_field_to_tz(field_name, tzname)
A:django.db.backends.oracle.operations._tzname_re->_lazy_re_compile('^[\\w/:+-]+$')
A:django.db.backends.oracle.operations.converters->super().get_db_converters(expression)
A:django.db.backends.oracle.operations.internal_type->getattr(fields[i], 'target_field', fields[i]).get_internal_type()
A:django.db.backends.oracle.operations.value->django.utils.timezone.make_naive(value, self.connection.timezone)
A:django.db.backends.oracle.operations.(fetch, offset)->self._get_limit_offset_params(low_mark, high_mark)
A:django.db.backends.oracle.operations.statement->statement.replace(':%s' % key, force_str(param, errors='replace')).replace(':%s' % key, force_str(param, errors='replace'))
A:django.db.backends.oracle.operations.sq_name->self._get_sequence_name(cursor, strip_quotes(table_name), pk_name)
A:django.db.backends.oracle.operations.name->name.replace('%', '%%').replace('%', '%%')
A:django.db.backends.oracle.operations.constraints->set()
A:django.db.backends.oracle.operations.no_autofield_sequence_name->self._get_no_autofield_sequence_name(model._meta.db_table)
A:django.db.backends.oracle.operations.table->self.quote_name(model._meta.db_table)
A:django.db.backends.oracle.operations.column->self.quote_name(f.column)
A:django.db.backends.oracle.operations.row->cursor.fetchone()
django.db.backends.oracle.operations.DatabaseOperations(BaseDatabaseOperations)
django.db.backends.oracle.operations.DatabaseOperations.__foreign_key_constraints(self,table_name,recursive)
django.db.backends.oracle.operations.DatabaseOperations._convert_field_to_tz(self,field_name,tzname)
django.db.backends.oracle.operations.DatabaseOperations._foreign_key_constraints(self)
django.db.backends.oracle.operations.DatabaseOperations._get_no_autofield_sequence_name(self,table)
django.db.backends.oracle.operations.DatabaseOperations._get_sequence_name(self,cursor,table,pk_name)
django.db.backends.oracle.operations.DatabaseOperations._prepare_tzname_delta(self,tzname)
django.db.backends.oracle.operations.DatabaseOperations.adapt_datefield_value(self,value)
django.db.backends.oracle.operations.DatabaseOperations.adapt_datetimefield_value(self,value)
django.db.backends.oracle.operations.DatabaseOperations.adapt_decimalfield_value(self,value,max_digits=None,decimal_places=None)
django.db.backends.oracle.operations.DatabaseOperations.adapt_timefield_value(self,value)
django.db.backends.oracle.operations.DatabaseOperations.bulk_batch_size(self,fields,objs)
django.db.backends.oracle.operations.DatabaseOperations.bulk_insert_sql(self,fields,placeholder_rows)
django.db.backends.oracle.operations.DatabaseOperations.cache_key_culling_sql(self)
django.db.backends.oracle.operations.DatabaseOperations.combine_expression(self,connector,sub_expressions)
django.db.backends.oracle.operations.DatabaseOperations.conditional_expression_supported_in_where_clause(self,expression)
django.db.backends.oracle.operations.DatabaseOperations.convert_binaryfield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_booleanfield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_datefield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_datetimefield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_empty_bytes(value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_empty_string(value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_textfield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_timefield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.convert_uuidfield_value(self,value,expression,connection)
django.db.backends.oracle.operations.DatabaseOperations.date_extract_sql(self,lookup_type,field_name)
django.db.backends.oracle.operations.DatabaseOperations.date_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.oracle.operations.DatabaseOperations.datetime_cast_date_sql(self,field_name,tzname)
django.db.backends.oracle.operations.DatabaseOperations.datetime_cast_time_sql(self,field_name,tzname)
django.db.backends.oracle.operations.DatabaseOperations.datetime_extract_sql(self,lookup_type,field_name,tzname)
django.db.backends.oracle.operations.DatabaseOperations.datetime_trunc_sql(self,lookup_type,field_name,tzname)
django.db.backends.oracle.operations.DatabaseOperations.deferrable_sql(self)
django.db.backends.oracle.operations.DatabaseOperations.fetch_returned_insert_columns(self,cursor,returning_params)
django.db.backends.oracle.operations.DatabaseOperations.field_cast_sql(self,db_type,internal_type)
django.db.backends.oracle.operations.DatabaseOperations.get_db_converters(self,expression)
django.db.backends.oracle.operations.DatabaseOperations.last_executed_query(self,cursor,sql,params)
django.db.backends.oracle.operations.DatabaseOperations.last_insert_id(self,cursor,table_name,pk_name)
django.db.backends.oracle.operations.DatabaseOperations.limit_offset_sql(self,low_mark,high_mark)
django.db.backends.oracle.operations.DatabaseOperations.lookup_cast(self,lookup_type,internal_type=None)
django.db.backends.oracle.operations.DatabaseOperations.max_in_list_size(self)
django.db.backends.oracle.operations.DatabaseOperations.max_name_length(self)
django.db.backends.oracle.operations.DatabaseOperations.no_limit_value(self)
django.db.backends.oracle.operations.DatabaseOperations.pk_default_value(self)
django.db.backends.oracle.operations.DatabaseOperations.prep_for_iexact_query(self,x)
django.db.backends.oracle.operations.DatabaseOperations.process_clob(self,value)
django.db.backends.oracle.operations.DatabaseOperations.quote_name(self,name)
django.db.backends.oracle.operations.DatabaseOperations.regex_lookup(self,lookup_type)
django.db.backends.oracle.operations.DatabaseOperations.return_insert_columns(self,fields)
django.db.backends.oracle.operations.DatabaseOperations.sequence_reset_by_name_sql(self,style,sequences)
django.db.backends.oracle.operations.DatabaseOperations.sequence_reset_sql(self,style,model_list)
django.db.backends.oracle.operations.DatabaseOperations.sql_flush(self,style,tables,*,reset_sequences=False,allow_cascade=False)
django.db.backends.oracle.operations.DatabaseOperations.start_transaction_sql(self)
django.db.backends.oracle.operations.DatabaseOperations.subtract_temporals(self,internal_type,lhs,rhs)
django.db.backends.oracle.operations.DatabaseOperations.tablespace_sql(self,tablespace,inline=False)
django.db.backends.oracle.operations.DatabaseOperations.time_trunc_sql(self,lookup_type,field_name,tzname=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/client.py----------------------------------------
A:django.db.backends.oracle.client.wrapper_path->shutil.which(cls.wrapper_name)
django.db.backends.oracle.client.DatabaseClient(BaseDatabaseClient)
django.db.backends.oracle.client.DatabaseClient.connect_string(settings_dict)
django.db.backends.oracle.client.DatabaseClient.settings_to_cmd_args_env(cls,settings_dict,parameters)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/oracle/introspection.py----------------------------------------
A:django.db.backends.oracle.introspection.FieldInfo->namedtuple('FieldInfo', BaseFieldInfo._fields + ('is_autofield', 'is_json'))
A:django.db.backends.oracle.introspection.row->cursor.fetchone()
A:django.db.backends.oracle.introspection.table_name->table_name.upper().upper()
A:django.db.backends.oracle.introspection.constraint->self.identifier_converter(constraint)
django.db.backends.oracle.introspection.DatabaseIntrospection(BaseDatabaseIntrospection)
django.db.backends.oracle.introspection.DatabaseIntrospection.data_types_reverse(self)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_constraints(self,cursor,table_name)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_field_type(self,data_type,description)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_key_columns(self,cursor,table_name)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_primary_key_column(self,cursor,table_name)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_relations(self,cursor,table_name)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_sequences(self,cursor,table_name,table_fields=())
django.db.backends.oracle.introspection.DatabaseIntrospection.get_table_description(self,cursor,table_name)
django.db.backends.oracle.introspection.DatabaseIntrospection.get_table_list(self,cursor)
django.db.backends.oracle.introspection.DatabaseIntrospection.identifier_converter(self,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/validation.py----------------------------------------
A:django.db.backends.mysql.validation.issues->super().check(**kwargs)
django.db.backends.mysql.validation.DatabaseValidation(BaseDatabaseValidation)
django.db.backends.mysql.validation.DatabaseValidation._check_sql_mode(self,**kwargs)
django.db.backends.mysql.validation.DatabaseValidation.check(self,**kwargs)
django.db.backends.mysql.validation.DatabaseValidation.check_field_type(self,field,field_type)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/features.py----------------------------------------
A:django.db.backends.mysql.features.can_return_rows_from_bulk_insert->property(operator.attrgetter('can_return_columns_from_insert'))
A:django.db.backends.mysql.features.supports_frame_range_fixed_distance->property(operator.attrgetter('supports_over_clause'))
A:django.db.backends.mysql.features.supports_table_check_constraints->property(operator.attrgetter('supports_column_check_constraints'))
django.db.backends.mysql.features.DatabaseFeatures(BaseDatabaseFeatures)
django.db.backends.mysql.features.DatabaseFeatures._mysql_storage_engine(self)
django.db.backends.mysql.features.DatabaseFeatures.allows_auto_pk_0(self)
django.db.backends.mysql.features.DatabaseFeatures.can_introspect_check_constraints(self)
django.db.backends.mysql.features.DatabaseFeatures.can_introspect_foreign_keys(self)
django.db.backends.mysql.features.DatabaseFeatures.can_introspect_json_field(self)
django.db.backends.mysql.features.DatabaseFeatures.can_return_columns_from_insert(self)
django.db.backends.mysql.features.DatabaseFeatures.django_test_skips(self)
django.db.backends.mysql.features.DatabaseFeatures.has_select_for_update_nowait(self)
django.db.backends.mysql.features.DatabaseFeatures.has_select_for_update_of(self)
django.db.backends.mysql.features.DatabaseFeatures.has_select_for_update_skip_locked(self)
django.db.backends.mysql.features.DatabaseFeatures.has_zoneinfo_database(self)
django.db.backends.mysql.features.DatabaseFeatures.ignores_table_name_case(self)
django.db.backends.mysql.features.DatabaseFeatures.introspected_field_types(self)
django.db.backends.mysql.features.DatabaseFeatures.is_sql_auto_is_null_enabled(self)
django.db.backends.mysql.features.DatabaseFeatures.supported_explain_formats(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_column_check_constraints(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_default_in_lead_lag(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_explain_analyze(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_expression_indexes(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_index_column_ordering(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_json_field(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_over_clause(self)
django.db.backends.mysql.features.DatabaseFeatures.supports_transactions(self)
django.db.backends.mysql.features.DatabaseFeatures.update_can_self_select(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/base.py----------------------------------------
A:django.db.backends.mysql.base.server_version_re->_lazy_re_compile('(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})')
A:django.db.backends.mysql.base.kwargs['port']->int(settings_dict['PORT'])
A:django.db.backends.mysql.base.options->settings_dict['OPTIONS'].copy()
A:django.db.backends.mysql.base.isolation_level->isolation_level.lower().lower()
A:django.db.backends.mysql.base.connection->MySQLdb.connect(**conn_params)
A:django.db.backends.mysql.base.cursor->self.connection.cursor()
A:django.db.backends.mysql.base.table_names->self.introspection.table_names(cursor)
A:django.db.backends.mysql.base.primary_key_column_name->self.introspection.get_primary_key_column(cursor, table_name)
A:django.db.backends.mysql.base.key_columns->self.introspection.get_key_columns(cursor, table_name)
A:django.db.backends.mysql.base.row->self.connection.cursor().fetchone()
A:django.db.backends.mysql.base.match->_lazy_re_compile('(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})').match(self.mysql_server_info)
django.db.backends.mysql.base.CursorWrapper(self,cursor)
django.db.backends.mysql.base.CursorWrapper.__getattr__(self,attr)
django.db.backends.mysql.base.CursorWrapper.__init__(self,cursor)
django.db.backends.mysql.base.CursorWrapper.__iter__(self)
django.db.backends.mysql.base.CursorWrapper.execute(self,query,args=None)
django.db.backends.mysql.base.CursorWrapper.executemany(self,query,args)
django.db.backends.mysql.base.DatabaseWrapper(BaseDatabaseWrapper)
django.db.backends.mysql.base.DatabaseWrapper._rollback(self)
django.db.backends.mysql.base.DatabaseWrapper._set_autocommit(self,autocommit)
django.db.backends.mysql.base.DatabaseWrapper.check_constraints(self,table_names=None)
django.db.backends.mysql.base.DatabaseWrapper.create_cursor(self,name=None)
django.db.backends.mysql.base.DatabaseWrapper.data_type_check_constraints(self)
django.db.backends.mysql.base.DatabaseWrapper.disable_constraint_checking(self)
django.db.backends.mysql.base.DatabaseWrapper.display_name(self)
django.db.backends.mysql.base.DatabaseWrapper.enable_constraint_checking(self)
django.db.backends.mysql.base.DatabaseWrapper.get_connection_params(self)
django.db.backends.mysql.base.DatabaseWrapper.get_new_connection(self,conn_params)
django.db.backends.mysql.base.DatabaseWrapper.init_connection_state(self)
django.db.backends.mysql.base.DatabaseWrapper.is_usable(self)
django.db.backends.mysql.base.DatabaseWrapper.mysql_is_mariadb(self)
django.db.backends.mysql.base.DatabaseWrapper.mysql_server_data(self)
django.db.backends.mysql.base.DatabaseWrapper.mysql_server_info(self)
django.db.backends.mysql.base.DatabaseWrapper.mysql_version(self)
django.db.backends.mysql.base.DatabaseWrapper.sql_mode(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/compiler.py----------------------------------------
A:django.db.backends.mysql.compiler.(sql, params)->self.as_sql()
A:django.db.backends.mysql.compiler.(where, having)->self.query.where.split_having()
A:django.db.backends.mysql.compiler.(from_sql, from_params)->self.get_from_clause()
A:django.db.backends.mysql.compiler.(where_sql, where_params)->self.compile(where)
A:django.db.backends.mysql.compiler.(update_query, update_params)->super().as_sql()
django.db.backends.mysql.compiler.SQLAggregateCompiler(compiler.SQLAggregateCompiler,SQLCompiler)
django.db.backends.mysql.compiler.SQLCompiler(compiler.SQLCompiler)
django.db.backends.mysql.compiler.SQLCompiler.as_subquery_condition(self,alias,columns,compiler)
django.db.backends.mysql.compiler.SQLDeleteCompiler(compiler.SQLDeleteCompiler,SQLCompiler)
django.db.backends.mysql.compiler.SQLDeleteCompiler.as_sql(self)
django.db.backends.mysql.compiler.SQLInsertCompiler(compiler.SQLInsertCompiler,SQLCompiler)
django.db.backends.mysql.compiler.SQLUpdateCompiler(compiler.SQLUpdateCompiler,SQLCompiler)
django.db.backends.mysql.compiler.SQLUpdateCompiler.as_sql(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/schema.py----------------------------------------
A:django.db.backends.mysql.schema.value->value.replace('%', '%%').replace('%', '%%')
A:django.db.backends.mysql.schema.quoted->quoted.decode().decode()
A:django.db.backends.mysql.schema.db_type->field.db_type(self.connection)
A:django.db.backends.mysql.schema.effective_default->self.effective_default(field)
A:django.db.backends.mysql.schema.create_index->super()._field_should_be_indexed(model, field)
A:django.db.backends.mysql.schema.storage->self.connection.introspection.get_storage_engine(self.connection.cursor(), model._meta.db_table)
A:django.db.backends.mysql.schema.first_field->model._meta.get_field(fields[0])
A:django.db.backends.mysql.schema.constraint_names->self._constraint_names(model, [first_field.column], index=True)
A:django.db.backends.mysql.schema.new_type->self._set_field_new_type_null_status(old_field, new_type)
django.db.backends.mysql.schema.DatabaseSchemaEditor(BaseDatabaseSchemaEditor)
django.db.backends.mysql.schema.DatabaseSchemaEditor._alter_column_type_sql(self,model,old_field,new_field,new_type)
django.db.backends.mysql.schema.DatabaseSchemaEditor._column_default_sql(self,field)
django.db.backends.mysql.schema.DatabaseSchemaEditor._delete_composed_index(self,model,fields,*args)
django.db.backends.mysql.schema.DatabaseSchemaEditor._field_should_be_indexed(self,model,field)
django.db.backends.mysql.schema.DatabaseSchemaEditor._is_limited_data_type(self,field)
django.db.backends.mysql.schema.DatabaseSchemaEditor._rename_field_sql(self,table,old_field,new_field,new_type)
django.db.backends.mysql.schema.DatabaseSchemaEditor._set_field_new_type_null_status(self,field,new_type)
django.db.backends.mysql.schema.DatabaseSchemaEditor._supports_limited_data_type_defaults(self)
django.db.backends.mysql.schema.DatabaseSchemaEditor.add_field(self,model,field)
django.db.backends.mysql.schema.DatabaseSchemaEditor.quote_value(self,value)
django.db.backends.mysql.schema.DatabaseSchemaEditor.skip_default(self,field)
django.db.backends.mysql.schema.DatabaseSchemaEditor.sql_delete_check(self)
django.db.backends.mysql.schema.DatabaseSchemaEditor.sql_rename_column(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/creation.py----------------------------------------
A:django.db.backends.mysql.creation.(cmd_args, cmd_env)->client.DatabaseClient.settings_to_cmd_args_env(self.connection.settings_dict, [])
django.db.backends.mysql.creation.DatabaseCreation(BaseDatabaseCreation)
django.db.backends.mysql.creation.DatabaseCreation._clone_db(self,source_database_name,target_database_name)
django.db.backends.mysql.creation.DatabaseCreation._clone_test_db(self,suffix,verbosity,keepdb=False)
django.db.backends.mysql.creation.DatabaseCreation._execute_create_test_db(self,cursor,parameters,keepdb=False)
django.db.backends.mysql.creation.DatabaseCreation.sql_table_creation_suffix(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/operations.py----------------------------------------
A:django.db.backends.mysql.operations.field_name->self._convert_field_to_tz(field_name, tzname)
A:django.db.backends.mysql.operations.format_str->''.join(format[:i] + format_def[i:])
A:django.db.backends.mysql.operations.value->uuid.UUID(value)
A:django.db.backends.mysql.operations.values_sql->', '.join(('(%s)' % sql for sql in placeholder_rows_sql))
A:django.db.backends.mysql.operations.converters->super().get_db_converters(expression)
A:django.db.backends.mysql.operations.internal_type->expression.output_field.get_internal_type()
A:django.db.backends.mysql.operations.analyze->options.pop('analyze', False)
A:django.db.backends.mysql.operations.prefix->super().explain_query_prefix(format, **options)
django.db.backends.mysql.operations.DatabaseOperations(BaseDatabaseOperations)
django.db.backends.mysql.operations.DatabaseOperations._convert_field_to_tz(self,field_name,tzname)
django.db.backends.mysql.operations.DatabaseOperations._prepare_tzname_delta(self,tzname)
django.db.backends.mysql.operations.DatabaseOperations.adapt_datetimefield_value(self,value)
django.db.backends.mysql.operations.DatabaseOperations.adapt_timefield_value(self,value)
django.db.backends.mysql.operations.DatabaseOperations.binary_placeholder_sql(self,value)
django.db.backends.mysql.operations.DatabaseOperations.bulk_insert_sql(self,fields,placeholder_rows)
django.db.backends.mysql.operations.DatabaseOperations.combine_expression(self,connector,sub_expressions)
django.db.backends.mysql.operations.DatabaseOperations.convert_booleanfield_value(self,value,expression,connection)
django.db.backends.mysql.operations.DatabaseOperations.convert_datetimefield_value(self,value,expression,connection)
django.db.backends.mysql.operations.DatabaseOperations.convert_uuidfield_value(self,value,expression,connection)
django.db.backends.mysql.operations.DatabaseOperations.date_extract_sql(self,lookup_type,field_name)
django.db.backends.mysql.operations.DatabaseOperations.date_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.mysql.operations.DatabaseOperations.datetime_cast_date_sql(self,field_name,tzname)
django.db.backends.mysql.operations.DatabaseOperations.datetime_cast_time_sql(self,field_name,tzname)
django.db.backends.mysql.operations.DatabaseOperations.datetime_extract_sql(self,lookup_type,field_name,tzname)
django.db.backends.mysql.operations.DatabaseOperations.datetime_trunc_sql(self,lookup_type,field_name,tzname)
django.db.backends.mysql.operations.DatabaseOperations.explain_query_prefix(self,format=None,**options)
django.db.backends.mysql.operations.DatabaseOperations.fetch_returned_insert_rows(self,cursor)
django.db.backends.mysql.operations.DatabaseOperations.force_no_ordering(self)
django.db.backends.mysql.operations.DatabaseOperations.format_for_duration_arithmetic(self,sql)
django.db.backends.mysql.operations.DatabaseOperations.get_db_converters(self,expression)
django.db.backends.mysql.operations.DatabaseOperations.insert_statement(self,ignore_conflicts=False)
django.db.backends.mysql.operations.DatabaseOperations.last_executed_query(self,cursor,sql,params)
django.db.backends.mysql.operations.DatabaseOperations.lookup_cast(self,lookup_type,internal_type=None)
django.db.backends.mysql.operations.DatabaseOperations.max_name_length(self)
django.db.backends.mysql.operations.DatabaseOperations.no_limit_value(self)
django.db.backends.mysql.operations.DatabaseOperations.pk_default_value(self)
django.db.backends.mysql.operations.DatabaseOperations.quote_name(self,name)
django.db.backends.mysql.operations.DatabaseOperations.regex_lookup(self,lookup_type)
django.db.backends.mysql.operations.DatabaseOperations.return_insert_columns(self,fields)
django.db.backends.mysql.operations.DatabaseOperations.sequence_reset_by_name_sql(self,style,sequences)
django.db.backends.mysql.operations.DatabaseOperations.sql_flush(self,style,tables,*,reset_sequences=False,allow_cascade=False)
django.db.backends.mysql.operations.DatabaseOperations.subtract_temporals(self,internal_type,lhs,rhs)
django.db.backends.mysql.operations.DatabaseOperations.time_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.mysql.operations.DatabaseOperations.validate_autopk_value(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/client.py----------------------------------------
A:django.db.backends.mysql.client.db->settings_dict['OPTIONS'].get('db', settings_dict['NAME'])
A:django.db.backends.mysql.client.user->settings_dict['OPTIONS'].get('user', settings_dict['USER'])
A:django.db.backends.mysql.client.password->settings_dict['OPTIONS'].get('password', settings_dict['OPTIONS'].get('passwd', settings_dict['PASSWORD']))
A:django.db.backends.mysql.client.host->settings_dict['OPTIONS'].get('host', settings_dict['HOST'])
A:django.db.backends.mysql.client.port->settings_dict['OPTIONS'].get('port', settings_dict['PORT'])
A:django.db.backends.mysql.client.server_ca->settings_dict['OPTIONS'].get('ssl', {}).get('ca')
A:django.db.backends.mysql.client.client_cert->settings_dict['OPTIONS'].get('ssl', {}).get('cert')
A:django.db.backends.mysql.client.client_key->settings_dict['OPTIONS'].get('ssl', {}).get('key')
A:django.db.backends.mysql.client.defaults_file->settings_dict['OPTIONS'].get('read_default_file')
A:django.db.backends.mysql.client.charset->settings_dict['OPTIONS'].get('charset')
django.db.backends.mysql.client.DatabaseClient(BaseDatabaseClient)
django.db.backends.mysql.client.DatabaseClient.settings_to_cmd_args_env(cls,settings_dict,parameters)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/mysql/introspection.py----------------------------------------
A:django.db.backends.mysql.introspection.FieldInfo->namedtuple('FieldInfo', BaseFieldInfo._fields + ('extra', 'is_unsigned', 'has_json_constraint'))
A:django.db.backends.mysql.introspection.InfoLine->namedtuple('InfoLine', 'col_name data_type max_len num_prec num_scale extra column_default collation is_unsigned')
A:django.db.backends.mysql.introspection.field_type->super().get_field_type(data_type, description)
A:django.db.backends.mysql.introspection.row->cursor.fetchone()
A:django.db.backends.mysql.introspection.constraints->self.get_key_columns(cursor, table_name)
A:django.db.backends.mysql.introspection.result->cursor.fetchone()
A:django.db.backends.mysql.introspection.check_columns->OrderedSet()
A:django.db.backends.mysql.introspection.constraint_columns->self._parse_constraint_columns(check_clause, columns)
A:django.db.backends.mysql.introspection.constraint['columns']->list(constraint['columns'])
django.db.backends.mysql.introspection.DatabaseIntrospection(BaseDatabaseIntrospection)
django.db.backends.mysql.introspection.DatabaseIntrospection._parse_constraint_columns(self,check_clause,columns)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_constraints(self,cursor,table_name)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_field_type(self,data_type,description)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_key_columns(self,cursor,table_name)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_relations(self,cursor,table_name)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_sequences(self,cursor,table_name,table_fields=())
django.db.backends.mysql.introspection.DatabaseIntrospection.get_storage_engine(self,cursor,table_name)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_table_description(self,cursor,table_name)
django.db.backends.mysql.introspection.DatabaseIntrospection.get_table_list(self,cursor)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/dummy/features.py----------------------------------------
django.db.backends.dummy.features.DummyDatabaseFeatures(BaseDatabaseFeatures)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/dummy/base.py----------------------------------------
django.db.backends.dummy.base.DatabaseClient(BaseDatabaseClient)
django.db.backends.dummy.base.DatabaseCreation(BaseDatabaseCreation)
django.db.backends.dummy.base.DatabaseIntrospection(BaseDatabaseIntrospection)
django.db.backends.dummy.base.DatabaseOperations(BaseDatabaseOperations)
django.db.backends.dummy.base.DatabaseWrapper(BaseDatabaseWrapper)
django.db.backends.dummy.base.DatabaseWrapper.is_usable(self)
django.db.backends.dummy.base.complain(*args,**kwargs)
django.db.backends.dummy.base.ignore(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/dummy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/features.py----------------------------------------
A:django.db.backends.sqlite3.features.can_introspect_json_field->property(operator.attrgetter('supports_json_field'))
A:django.db.backends.sqlite3.features.has_json_object_function->property(operator.attrgetter('supports_json_field'))
django.db.backends.sqlite3.features.DatabaseFeatures(BaseDatabaseFeatures)
django.db.backends.sqlite3.features.DatabaseFeatures.django_test_skips(self)
django.db.backends.sqlite3.features.DatabaseFeatures.introspected_field_types(self)
django.db.backends.sqlite3.features.DatabaseFeatures.supports_atomic_references_rename(self)
django.db.backends.sqlite3.features.DatabaseFeatures.supports_json_field(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/base.py----------------------------------------
A:django.db.backends.sqlite3.base.conn->sqlite3.dbapi2.connect(**conn_params)
A:django.db.backends.sqlite3.base.create_deterministic_function->functools.partial(conn.create_function, deterministic=True)
A:django.db.backends.sqlite3.base.violations->itertools.chain.from_iterable((cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall() for table_name in table_names))
A:django.db.backends.sqlite3.base.primary_key_column_name->self.introspection.get_primary_key_column(cursor, table_name)
A:django.db.backends.sqlite3.base.(primary_key_value, bad_value)->cursor.execute('SELECT %s, %s FROM %s WHERE rowid = %%s' % (self.ops.quote_name(primary_key_column_name), self.ops.quote_name(column_name), self.ops.quote_name(table_name)), (rowid,)).fetchone()
A:django.db.backends.sqlite3.base.table_names->self.introspection.table_names(cursor)
A:django.db.backends.sqlite3.base.key_columns->self.introspection.get_key_columns(cursor, table_name)
A:django.db.backends.sqlite3.base.FORMAT_QMARK_REGEX->_lazy_re_compile('(?<!%)%s')
A:django.db.backends.sqlite3.base.query->self.convert_query(query)
A:django.db.backends.sqlite3.base.dt->django.db.backends.utils.typecast_time(dt)
A:django.db.backends.sqlite3.base.(tzname, offset)->tzname.split(sign)
A:django.db.backends.sqlite3.base.(hours, minutes)->offset.split(':')
A:django.db.backends.sqlite3.base.offset_delta->datetime.timedelta(hours=int(hours), minutes=int(minutes))
A:django.db.backends.sqlite3.base.dt_parsed->_sqlite_datetime_parse(dt, tzname, conn_tzname)
A:django.db.backends.sqlite3.base.left->django.db.backends.utils.typecast_timestamp(lhs)
A:django.db.backends.sqlite3.base.right->django.db.backends.utils.typecast_timestamp(rhs)
django.db.backends.sqlite3.base.DatabaseWrapper(BaseDatabaseWrapper)
django.db.backends.sqlite3.base.DatabaseWrapper._savepoint_allowed(self)
django.db.backends.sqlite3.base.DatabaseWrapper._set_autocommit(self,autocommit)
django.db.backends.sqlite3.base.DatabaseWrapper._start_transaction_under_autocommit(self)
django.db.backends.sqlite3.base.DatabaseWrapper.check_constraints(self,table_names=None)
django.db.backends.sqlite3.base.DatabaseWrapper.close(self)
django.db.backends.sqlite3.base.DatabaseWrapper.create_cursor(self,name=None)
django.db.backends.sqlite3.base.DatabaseWrapper.disable_constraint_checking(self)
django.db.backends.sqlite3.base.DatabaseWrapper.enable_constraint_checking(self)
django.db.backends.sqlite3.base.DatabaseWrapper.get_connection_params(self)
django.db.backends.sqlite3.base.DatabaseWrapper.get_new_connection(self,conn_params)
django.db.backends.sqlite3.base.DatabaseWrapper.init_connection_state(self)
django.db.backends.sqlite3.base.DatabaseWrapper.is_in_memory_db(self)
django.db.backends.sqlite3.base.DatabaseWrapper.is_usable(self)
django.db.backends.sqlite3.base.SQLiteCursorWrapper(Database.Cursor)
django.db.backends.sqlite3.base.SQLiteCursorWrapper.convert_query(self,query)
django.db.backends.sqlite3.base.SQLiteCursorWrapper.execute(self,query,params=None)
django.db.backends.sqlite3.base.SQLiteCursorWrapper.executemany(self,query,param_list)
django.db.backends.sqlite3.base._sqlite_date_trunc(lookup_type,dt,tzname,conn_tzname)
django.db.backends.sqlite3.base._sqlite_datetime_cast_date(dt,tzname,conn_tzname)
django.db.backends.sqlite3.base._sqlite_datetime_cast_time(dt,tzname,conn_tzname)
django.db.backends.sqlite3.base._sqlite_datetime_extract(lookup_type,dt,tzname=None,conn_tzname=None)
django.db.backends.sqlite3.base._sqlite_datetime_parse(dt,tzname=None,conn_tzname=None)
django.db.backends.sqlite3.base._sqlite_datetime_trunc(lookup_type,dt,tzname,conn_tzname)
django.db.backends.sqlite3.base._sqlite_format_dtdelta(conn,lhs,rhs)
django.db.backends.sqlite3.base._sqlite_lpad(text,length,fill_text)
django.db.backends.sqlite3.base._sqlite_regexp(re_pattern,re_string)
django.db.backends.sqlite3.base._sqlite_rpad(text,length,fill_text)
django.db.backends.sqlite3.base._sqlite_time_diff(lhs,rhs)
django.db.backends.sqlite3.base._sqlite_time_extract(lookup_type,dt)
django.db.backends.sqlite3.base._sqlite_time_trunc(lookup_type,dt,tzname,conn_tzname)
django.db.backends.sqlite3.base._sqlite_timestamp_diff(lhs,rhs)
django.db.backends.sqlite3.base.check_sqlite_version()
django.db.backends.sqlite3.base.decoder(conv_func)
django.db.backends.sqlite3.base.list_aggregate(function)
django.db.backends.sqlite3.base.none_guard(func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/schema.py----------------------------------------
A:django.db.backends.sqlite3.schema.value->sqlite3.adapt(value)
A:django.db.backends.sqlite3.schema.constraints->list(model._meta.constraints)
A:django.db.backends.sqlite3.schema.(_, old_column_name)->old_field.get_attname_column()
A:django.db.backends.sqlite3.schema.mapping[create_field.column]->self.quote_value(self.effective_default(create_field))
A:django.db.backends.sqlite3.schema.mapping[new_field.column]->self.quote_name(old_field.column)
A:django.db.backends.sqlite3.schema.apps->Apps()
A:django.db.backends.sqlite3.schema.body_copy->copy.deepcopy(body)
A:django.db.backends.sqlite3.schema.meta->type('Meta', (), meta_contents)
A:django.db.backends.sqlite3.schema.new_model->type('New%s' % model._meta.object_name, model.__bases__, body_copy)
A:django.db.backends.sqlite3.schema.related_models->set()
django.db.backends.sqlite3.schema.DatabaseSchemaEditor(BaseDatabaseSchemaEditor)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.__enter__(self)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.__exit__(self,exc_type,exc_value,traceback)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor._alter_field(self,model,old_field,new_field,old_type,new_type,old_db_params,new_db_params,strict=False)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor._alter_many_to_many(self,model,old_field,new_field,strict)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor._collate_sql(self,collation)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor._is_referenced_by_fk_constraint(self,table_name,column_name=None,ignore_self=False)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor._remake_table(self,model,create_field=None,delete_field=None,alter_field=None)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.add_constraint(self,model,constraint)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.add_field(self,model,field)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.alter_db_table(self,model,old_db_table,new_db_table,disable_constraints=True)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.alter_field(self,model,old_field,new_field,strict=False)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.delete_model(self,model,handle_autom2m=True)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.quote_value(self,value)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.remove_constraint(self,model,constraint)
django.db.backends.sqlite3.schema.DatabaseSchemaEditor.remove_field(self,model,field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/creation.py----------------------------------------
A:django.db.backends.sqlite3.creation.test_database_name->self._get_test_db_name()
A:django.db.backends.sqlite3.creation.confirm->input("Type 'yes' if you would like to try deleting the test database '%s', or 'no' to cancel: " % test_database_name)
A:django.db.backends.sqlite3.creation.(root, ext)->os.path.splitext(orig_settings_dict['NAME'])
django.db.backends.sqlite3.creation.DatabaseCreation(BaseDatabaseCreation)
django.db.backends.sqlite3.creation.DatabaseCreation._clone_test_db(self,suffix,verbosity,keepdb=False)
django.db.backends.sqlite3.creation.DatabaseCreation._create_test_db(self,verbosity,autoclobber,keepdb=False)
django.db.backends.sqlite3.creation.DatabaseCreation._destroy_test_db(self,test_database_name,verbosity)
django.db.backends.sqlite3.creation.DatabaseCreation._get_test_db_name(self)
django.db.backends.sqlite3.creation.DatabaseCreation.get_test_db_clone_settings(self,suffix)
django.db.backends.sqlite3.creation.DatabaseCreation.is_in_memory_db(database_name)
django.db.backends.sqlite3.creation.DatabaseCreation.test_db_signature(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/operations.py----------------------------------------
A:django.db.backends.sqlite3.operations.cursor->self.connection.connection.cursor()
A:django.db.backends.sqlite3.operations.params->dict(zip(params, values))
A:django.db.backends.sqlite3.operations.values->self._quote_params_for_last_executed_query(values)
A:django.db.backends.sqlite3.operations.results->self.connection.connection.cursor().execute(query, params)
A:django.db.backends.sqlite3.operations.tables->set(chain.from_iterable((self._references_graph(table) for table in tables)))
A:django.db.backends.sqlite3.operations.value->uuid.UUID(value)
A:django.db.backends.sqlite3.operations.converters->super().get_db_converters(expression)
A:django.db.backends.sqlite3.operations.internal_type->expression.output_field.get_internal_type()
A:django.db.backends.sqlite3.operations.quantize_value->decimal.Decimal(1).scaleb(-expression.output_field.decimal_places)
django.db.backends.sqlite3.operations.DatabaseOperations(BaseDatabaseOperations)
django.db.backends.sqlite3.operations.DatabaseOperations.__references_graph(self,table_name)
django.db.backends.sqlite3.operations.DatabaseOperations._convert_tznames_to_sql(self,tzname)
django.db.backends.sqlite3.operations.DatabaseOperations._quote_params_for_last_executed_query(self,params)
django.db.backends.sqlite3.operations.DatabaseOperations._references_graph(self)
django.db.backends.sqlite3.operations.DatabaseOperations.adapt_datetimefield_value(self,value)
django.db.backends.sqlite3.operations.DatabaseOperations.adapt_timefield_value(self,value)
django.db.backends.sqlite3.operations.DatabaseOperations.bulk_batch_size(self,fields,objs)
django.db.backends.sqlite3.operations.DatabaseOperations.bulk_insert_sql(self,fields,placeholder_rows)
django.db.backends.sqlite3.operations.DatabaseOperations.check_expression_support(self,expression)
django.db.backends.sqlite3.operations.DatabaseOperations.combine_duration_expression(self,connector,sub_expressions)
django.db.backends.sqlite3.operations.DatabaseOperations.combine_expression(self,connector,sub_expressions)
django.db.backends.sqlite3.operations.DatabaseOperations.convert_booleanfield_value(self,value,expression,connection)
django.db.backends.sqlite3.operations.DatabaseOperations.convert_datefield_value(self,value,expression,connection)
django.db.backends.sqlite3.operations.DatabaseOperations.convert_datetimefield_value(self,value,expression,connection)
django.db.backends.sqlite3.operations.DatabaseOperations.convert_timefield_value(self,value,expression,connection)
django.db.backends.sqlite3.operations.DatabaseOperations.convert_uuidfield_value(self,value,expression,connection)
django.db.backends.sqlite3.operations.DatabaseOperations.date_extract_sql(self,lookup_type,field_name)
django.db.backends.sqlite3.operations.DatabaseOperations.date_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.sqlite3.operations.DatabaseOperations.datetime_cast_date_sql(self,field_name,tzname)
django.db.backends.sqlite3.operations.DatabaseOperations.datetime_cast_time_sql(self,field_name,tzname)
django.db.backends.sqlite3.operations.DatabaseOperations.datetime_extract_sql(self,lookup_type,field_name,tzname)
django.db.backends.sqlite3.operations.DatabaseOperations.datetime_trunc_sql(self,lookup_type,field_name,tzname)
django.db.backends.sqlite3.operations.DatabaseOperations.format_for_duration_arithmetic(self,sql)
django.db.backends.sqlite3.operations.DatabaseOperations.get_db_converters(self,expression)
django.db.backends.sqlite3.operations.DatabaseOperations.get_decimalfield_converter(self,expression)
django.db.backends.sqlite3.operations.DatabaseOperations.insert_statement(self,ignore_conflicts=False)
django.db.backends.sqlite3.operations.DatabaseOperations.integer_field_range(self,internal_type)
django.db.backends.sqlite3.operations.DatabaseOperations.last_executed_query(self,cursor,sql,params)
django.db.backends.sqlite3.operations.DatabaseOperations.no_limit_value(self)
django.db.backends.sqlite3.operations.DatabaseOperations.pk_default_value(self)
django.db.backends.sqlite3.operations.DatabaseOperations.quote_name(self,name)
django.db.backends.sqlite3.operations.DatabaseOperations.sequence_reset_by_name_sql(self,style,sequences)
django.db.backends.sqlite3.operations.DatabaseOperations.sql_flush(self,style,tables,*,reset_sequences=False,allow_cascade=False)
django.db.backends.sqlite3.operations.DatabaseOperations.subtract_temporals(self,internal_type,lhs,rhs)
django.db.backends.sqlite3.operations.DatabaseOperations.time_extract_sql(self,lookup_type,field_name)
django.db.backends.sqlite3.operations.DatabaseOperations.time_trunc_sql(self,lookup_type,field_name,tzname=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/client.py----------------------------------------
django.db.backends.sqlite3.client.DatabaseClient(BaseDatabaseClient)
django.db.backends.sqlite3.client.DatabaseClient.settings_to_cmd_args_env(cls,settings_dict,parameters)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/sqlite3/introspection.py----------------------------------------
A:django.db.backends.sqlite3.introspection.FieldInfo->namedtuple('FieldInfo', BaseFieldInfo._fields + ('pk', 'has_json_constraint'))
A:django.db.backends.sqlite3.introspection.field_size_re->_lazy_re_compile('^\\s*(?:var)?char\\s*\\(\\s*(\\d+)\\s*\\)\\s*$')
A:django.db.backends.sqlite3.introspection.m->re.match('(?:(?:["`\\[])(.*)(?:["`\\]])|(\\w+)).*PRIMARY KEY.*', field_desc)
A:django.db.backends.sqlite3.introspection.key->key.lower().split('(', 1)[0].strip().lower().split('(', 1)[0].strip()
A:django.db.backends.sqlite3.introspection.data_types_reverse->FlexibleFieldLookupDict()
A:django.db.backends.sqlite3.introspection.field_type->super().get_field_type(data_type, description)
A:django.db.backends.sqlite3.introspection.table_info->cursor.fetchall()
A:django.db.backends.sqlite3.introspection.collations->self._get_column_collations(cursor, table_name)
A:django.db.backends.sqlite3.introspection.json_columns->set()
A:django.db.backends.sqlite3.introspection.has_json_constraint->cursor.execute("\n                    SELECT sql\n                    FROM sqlite_master\n                    WHERE\n                        type = 'table' AND\n                        name = %s AND\n                        sql LIKE %s\n                ", [table_name, json_constraint_sql]).fetchone()
A:django.db.backends.sqlite3.introspection.pk_col->self.get_primary_key_column(cursor, table_name)
A:django.db.backends.sqlite3.introspection.(create_sql, table_type)->cursor.fetchone()
A:django.db.backends.sqlite3.introspection.field_desc->field_desc.strip().strip()
A:django.db.backends.sqlite3.introspection.field_name->field_desc.strip().strip().split()[0].strip('"')
A:django.db.backends.sqlite3.introspection.other_table_results->result[0].strip()
A:django.db.backends.sqlite3.introspection.other_desc->other_desc.strip().strip()
A:django.db.backends.sqlite3.introspection.other_name->other_desc.strip().strip().split(' ', 1)[0].strip('"')
A:django.db.backends.sqlite3.introspection.results->cursor.fetchone()[0].strip()
A:django.db.backends.sqlite3.introspection.row->cursor.execute("\n            SELECT sql\n            FROM sqlite_master\n            WHERE type = 'table' AND name = %s\n        ", [table_name]).fetchone()
A:django.db.backends.sqlite3.introspection.is_constraint_definition->token.match(sqlparse.tokens.Keyword, 'CONSTRAINT')
A:django.db.backends.sqlite3.introspection.(constraint_name, unique, check, end_token)->self._parse_column_or_constraint_definition(tokens, columns)
A:django.db.backends.sqlite3.introspection.orders->self._get_index_columns_orders(sql)
A:django.db.backends.sqlite3.introspection.pk_column->self.get_primary_key_column(cursor, table_name)
A:django.db.backends.sqlite3.introspection.columns->str(sqlparse.parse(sql)[0][-1]).strip('()').split(', ')
A:django.db.backends.sqlite3.introspection.tokens->column[1:].split()
A:django.db.backends.sqlite3.introspection.column_name->tokens[0].strip('"')
django.db.backends.sqlite3.introspection.DatabaseIntrospection(BaseDatabaseIntrospection)
django.db.backends.sqlite3.introspection.DatabaseIntrospection._get_column_collations(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection._get_foreign_key_constraints(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection._get_index_columns_orders(self,sql)
django.db.backends.sqlite3.introspection.DatabaseIntrospection._parse_column_or_constraint_definition(self,tokens,columns)
django.db.backends.sqlite3.introspection.DatabaseIntrospection._parse_table_constraints(self,sql,columns)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_constraints(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_field_type(self,data_type,description)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_key_columns(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_primary_key_column(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_relations(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_sequences(self,cursor,table_name,table_fields=())
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_table_description(self,cursor,table_name)
django.db.backends.sqlite3.introspection.DatabaseIntrospection.get_table_list(self,cursor)
django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict
django.db.backends.sqlite3.introspection.FlexibleFieldLookupDict.__getitem__(self,key)
django.db.backends.sqlite3.introspection.get_field_size(name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/validation.py----------------------------------------
A:django.db.backends.base.validation.db_supports_all_required_features->all((getattr(self.connection.features, feature, False) for feature in field.model._meta.required_db_features))
A:django.db.backends.base.validation.field_type->field.db_type(self.connection)
django.db.backends.base.validation.BaseDatabaseValidation(self,connection)
django.db.backends.base.validation.BaseDatabaseValidation.__init__(self,connection)
django.db.backends.base.validation.BaseDatabaseValidation.check(self,**kwargs)
django.db.backends.base.validation.BaseDatabaseValidation.check_field(self,field,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/features.py----------------------------------------
A:django.db.backends.base.features.supported_explain_formats->set()
A:django.db.backends.base.features.django_test_expected_failures->set()
A:django.db.backends.base.features.(count,)->cursor.fetchone()
django.db.backends.base.features.BaseDatabaseFeatures(self,connection)
django.db.backends.base.features.BaseDatabaseFeatures.__init__(self,connection)
django.db.backends.base.features.BaseDatabaseFeatures.allows_group_by_selected_pks_on_model(self,model)
django.db.backends.base.features.BaseDatabaseFeatures.supports_explaining_query_execution(self)
django.db.backends.base.features.BaseDatabaseFeatures.supports_transactions(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/base.py----------------------------------------
A:django.db.backends.base.base.self.queries_log->deque(maxlen=self.queries_limit)
A:django.db.backends.base.base.self._thread_sharing_lock->threading.Lock()
A:django.db.backends.base.base.self._thread_ident->_thread.get_ident()
A:django.db.backends.base.base.self.client->self.client_class(self)
A:django.db.backends.base.base.self.creation->self.creation_class(self)
A:django.db.backends.base.base.self.features->self.features_class(self)
A:django.db.backends.base.base.self.introspection->self.introspection_class(self)
A:django.db.backends.base.base.self.ops->self.ops_class(self)
A:django.db.backends.base.base.self.validation->self.validation_class(self)
A:django.db.backends.base.base.conn_params->self.get_connection_params()
A:django.db.backends.base.base.self.connection->self.get_new_connection(conn_params)
A:django.db.backends.base.base.wrapped_cursor->self.make_cursor(cursor)
A:django.db.backends.base.base.thread_ident->_thread.get_ident()
A:django.db.backends.base.base.tid->str(thread_ident).replace('-', '')
A:django.db.backends.base.base.disabled->self.disable_constraint_checking()
A:django.db.backends.base.base.conn->self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)
A:django.db.backends.base.base.(sids, func)->current_run_on_commit.pop(0)
A:django.db.backends.base.base.settings_dict->copy.deepcopy(self.settings_dict)
django.db.backends.base.base.BaseDatabaseWrapper(self,settings_dict,alias=DEFAULT_DB_ALIAS)
django.db.backends.base.base.BaseDatabaseWrapper.__init__(self,settings_dict,alias=DEFAULT_DB_ALIAS)
django.db.backends.base.base.BaseDatabaseWrapper._close(self)
django.db.backends.base.base.BaseDatabaseWrapper._commit(self)
django.db.backends.base.base.BaseDatabaseWrapper._cursor(self,name=None)
django.db.backends.base.base.BaseDatabaseWrapper._nodb_cursor(self)
django.db.backends.base.base.BaseDatabaseWrapper._prepare_cursor(self,cursor)
django.db.backends.base.base.BaseDatabaseWrapper._rollback(self)
django.db.backends.base.base.BaseDatabaseWrapper._savepoint(self,sid)
django.db.backends.base.base.BaseDatabaseWrapper._savepoint_allowed(self)
django.db.backends.base.base.BaseDatabaseWrapper._savepoint_commit(self,sid)
django.db.backends.base.base.BaseDatabaseWrapper._savepoint_rollback(self,sid)
django.db.backends.base.base.BaseDatabaseWrapper._set_autocommit(self,autocommit)
django.db.backends.base.base.BaseDatabaseWrapper.allow_thread_sharing(self)
django.db.backends.base.base.BaseDatabaseWrapper.check_constraints(self,table_names=None)
django.db.backends.base.base.BaseDatabaseWrapper.check_settings(self)
django.db.backends.base.base.BaseDatabaseWrapper.chunked_cursor(self)
django.db.backends.base.base.BaseDatabaseWrapper.clean_savepoints(self)
django.db.backends.base.base.BaseDatabaseWrapper.close(self)
django.db.backends.base.base.BaseDatabaseWrapper.close_if_unusable_or_obsolete(self)
django.db.backends.base.base.BaseDatabaseWrapper.commit(self)
django.db.backends.base.base.BaseDatabaseWrapper.connect(self)
django.db.backends.base.base.BaseDatabaseWrapper.constraint_checks_disabled(self)
django.db.backends.base.base.BaseDatabaseWrapper.copy(self,alias=None)
django.db.backends.base.base.BaseDatabaseWrapper.create_cursor(self,name=None)
django.db.backends.base.base.BaseDatabaseWrapper.cursor(self)
django.db.backends.base.base.BaseDatabaseWrapper.dec_thread_sharing(self)
django.db.backends.base.base.BaseDatabaseWrapper.disable_constraint_checking(self)
django.db.backends.base.base.BaseDatabaseWrapper.enable_constraint_checking(self)
django.db.backends.base.base.BaseDatabaseWrapper.ensure_connection(self)
django.db.backends.base.base.BaseDatabaseWrapper.ensure_timezone(self)
django.db.backends.base.base.BaseDatabaseWrapper.execute_wrapper(self,wrapper)
django.db.backends.base.base.BaseDatabaseWrapper.get_autocommit(self)
django.db.backends.base.base.BaseDatabaseWrapper.get_connection_params(self)
django.db.backends.base.base.BaseDatabaseWrapper.get_new_connection(self,conn_params)
django.db.backends.base.base.BaseDatabaseWrapper.get_rollback(self)
django.db.backends.base.base.BaseDatabaseWrapper.inc_thread_sharing(self)
django.db.backends.base.base.BaseDatabaseWrapper.init_connection_state(self)
django.db.backends.base.base.BaseDatabaseWrapper.is_usable(self)
django.db.backends.base.base.BaseDatabaseWrapper.make_cursor(self,cursor)
django.db.backends.base.base.BaseDatabaseWrapper.make_debug_cursor(self,cursor)
django.db.backends.base.base.BaseDatabaseWrapper.on_commit(self,func)
django.db.backends.base.base.BaseDatabaseWrapper.prepare_database(self)
django.db.backends.base.base.BaseDatabaseWrapper.queries(self)
django.db.backends.base.base.BaseDatabaseWrapper.queries_logged(self)
django.db.backends.base.base.BaseDatabaseWrapper.rollback(self)
django.db.backends.base.base.BaseDatabaseWrapper.run_and_clear_commit_hooks(self)
django.db.backends.base.base.BaseDatabaseWrapper.savepoint(self)
django.db.backends.base.base.BaseDatabaseWrapper.savepoint_commit(self,sid)
django.db.backends.base.base.BaseDatabaseWrapper.savepoint_rollback(self,sid)
django.db.backends.base.base.BaseDatabaseWrapper.schema_editor(self,*args,**kwargs)
django.db.backends.base.base.BaseDatabaseWrapper.set_autocommit(self,autocommit,force_begin_transaction_with_broken_autocommit=False)
django.db.backends.base.base.BaseDatabaseWrapper.set_rollback(self,rollback)
django.db.backends.base.base.BaseDatabaseWrapper.temporary_connection(self)
django.db.backends.base.base.BaseDatabaseWrapper.timezone(self)
django.db.backends.base.base.BaseDatabaseWrapper.timezone_name(self)
django.db.backends.base.base.BaseDatabaseWrapper.validate_no_atomic_block(self)
django.db.backends.base.base.BaseDatabaseWrapper.validate_no_broken_transaction(self)
django.db.backends.base.base.BaseDatabaseWrapper.validate_thread_sharing(self)
django.db.backends.base.base.BaseDatabaseWrapper.wrap_database_errors(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/schema.py----------------------------------------
A:django.db.backends.base.schema.logger->logging.getLogger('django.db.backends.schema')
A:django.db.backends.base.schema.self.atomic->atomic(self.connection.alias)
A:django.db.backends.base.schema.sql->self._create_unique_sql(model, fields, name=name, condition=condition, include=include, opclasses=opclasses)
A:django.db.backends.base.schema.(definition, extra_params)->self.column_sql(model, field)
A:django.db.backends.base.schema.db_params->field.db_parameters(connection=self.connection)
A:django.db.backends.base.schema.col_type_suffix->field.db_type_suffix(connection=self.connection)
A:django.db.backends.base.schema.autoinc_sql->self.connection.ops.autoinc_sql(model._meta.db_table, field.column)
A:django.db.backends.base.schema.tablespace_sql->self._get_index_tablespace_sql(model, fields, db_tablespace=db_tablespace)
A:django.db.backends.base.schema.collation->getattr(field, 'db_collation', None)
A:django.db.backends.base.schema.default_value->self.effective_default(field)
A:django.db.backends.base.schema.default->self.prepare_default(new_default)
A:django.db.backends.base.schema.internal_type->field.get_internal_type()
A:django.db.backends.base.schema.(sql, params)->tuple(zip(*actions))
A:django.db.backends.base.schema.constraint_names->self._constraint_names(model, primary_key=True)
A:django.db.backends.base.schema.(definition, params)->self.column_sql(model, field, include_default=True)
A:django.db.backends.base.schema.(namespace, _)->split_identifier(model._meta.db_table)
A:django.db.backends.base.schema.(changes_sql, params)->self._alter_column_default_sql(model, old_field, new_field, drop=True)
A:django.db.backends.base.schema.fk_names->self._constraint_names(model, [old_field.column], foreign_key=True)
A:django.db.backends.base.schema.old_db_params->old_field.db_parameters(connection=self.connection)
A:django.db.backends.base.schema.new_db_params->new_field.db_parameters(connection=self.connection)
A:django.db.backends.base.schema.fks_dropped->set()
A:django.db.backends.base.schema.rel_fk_names->self._constraint_names(new_rel.related_model, [new_rel.field.column], foreign_key=True)
A:django.db.backends.base.schema.index_names->self._constraint_names(model, [old_field.column], index=True, type_=Index.suffix, exclude=meta_index_names)
A:django.db.backends.base.schema.old_collation->getattr(old_field, 'db_collation', None)
A:django.db.backends.base.schema.new_collation->getattr(new_field, 'db_collation', None)
A:django.db.backends.base.schema.fragment->self._alter_column_null_sql(model, old_field, new_field)
A:django.db.backends.base.schema.(fragment, other_actions)->self._alter_column_type_sql(new_rel.related_model, old_rel.field, new_rel.field, rel_type)
A:django.db.backends.base.schema.old_default->self.effective_default(old_field)
A:django.db.backends.base.schema.new_default->self.effective_default(new_field)
A:django.db.backends.base.schema.rel_db_params->new_rel.field.db_parameters(connection=self.connection)
A:django.db.backends.base.schema.constraint_name->self._create_index_name(model._meta.db_table, [new_field.column], suffix='_check')
A:django.db.backends.base.schema.(_, table_name)->split_identifier(table_name)
A:django.db.backends.base.schema.compiler->Query(model, alias_cols=False).get_compiler(connection=self.connection)
A:django.db.backends.base.schema.name->self.quote_name(name)
A:django.db.backends.base.schema.(_, old_path, old_args, old_kwargs)->old_field.deconstruct()
A:django.db.backends.base.schema.(_, new_path, new_args, new_kwargs)->new_field.deconstruct()
A:django.db.backends.base.schema.table->Table(model._meta.db_table, self.quote_name)
A:django.db.backends.base.schema.column->Columns(model._meta.db_table, [field.column], self.quote_name)
A:django.db.backends.base.schema.to_table->Table(field.target_field.model._meta.db_table, self.quote_name)
A:django.db.backends.base.schema.to_column->Columns(field.target_field.model._meta.db_table, [field.target_field.column], self.quote_name)
A:django.db.backends.base.schema.deferrable->self.connection.ops.deferrable_sql()
A:django.db.backends.base.schema.columns->self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)
A:django.db.backends.base.schema.constraints->self.connection.introspection.get_constraints(cursor, model._meta.db_table)
django.db.backends.base.schema.BaseDatabaseSchemaEditor(self,connection,collect_sql=False,atomic=True)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.__enter__(self)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.__exit__(self,exc_type,exc_value,traceback)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.__init__(self,connection,collect_sql=False,atomic=True)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_column_collation_sql(self,model,new_field,new_type,new_collation)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_column_default_sql(self,model,old_field,new_field,drop=False)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_column_null_sql(self,model,old_field,new_field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_column_type_sql(self,model,old_field,new_field,new_type)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_field(self,model,old_field,new_field,old_type,new_type,old_db_params,new_db_params,strict=False)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._alter_many_to_many(self,model,old_field,new_field,strict)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._check_sql(self,name,check)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._collate_sql(self,collation)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._column_default_sql(self,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._constraint_names(self,model,column_names=None,unique=None,primary_key=None,index=None,foreign_key=None,check=None,type_=None,exclude=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_check_sql(self,model,name,check)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_fk_sql(self,model,field,suffix)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_index_name(self,table_name,column_names,suffix='')
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_index_sql(self,model,*,fields=None,name=None,suffix='',using='',db_tablespace=None,col_suffixes=(),sql=None,opclasses=(),condition=None,include=None,expressions=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_primary_key_sql(self,model,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._create_unique_sql(self,model,columns,name=None,condition=None,deferrable=None,include=None,opclasses=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._deferrable_constraint_sql(self,deferrable)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_check_sql(self,model,name)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_composed_index(self,model,fields,constraint_kwargs,sql)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_constraint_sql(self,template,model,name)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_fk_sql(self,model,name)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_index_sql(self,model,name,sql=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_primary_key(self,model,strict=False)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_primary_key_sql(self,model,name)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._delete_unique_sql(self,model,name,condition=None,deferrable=None,include=None,opclasses=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._effective_default(field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._field_became_primary_key(self,old_field,new_field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._field_indexes_sql(self,model,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._field_should_be_altered(self,old_field,new_field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._field_should_be_indexed(self,model,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._fk_constraint_name(self,model,field,suffix)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._get_index_tablespace_sql(self,model,fields,db_tablespace=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._index_columns(self,table,columns,col_suffixes,opclasses)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._index_condition_sql(self,condition)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._index_include_sql(self,model,columns)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._model_indexes_sql(self,model)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._rename_field_sql(self,table,old_field,new_field,new_type)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._unique_should_be_added(self,old_field,new_field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor._unique_sql(self,model,fields,name,condition=None,deferrable=None,include=None,opclasses=None)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_constraint(self,model,constraint)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_field(self,model,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.add_index(self,model,index)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_table(self,model,old_db_table,new_db_table)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_db_tablespace(self,model,old_db_tablespace,new_db_tablespace)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_field(self,model,old_field,new_field,strict=False)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_index_together(self,model,old_index_together,new_index_together)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.alter_unique_together(self,model,old_unique_together,new_unique_together)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.column_sql(self,model,field,include_default=False)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.create_model(self,model)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.delete_model(self,model)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.effective_default(self,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.execute(self,sql,params=())
django.db.backends.base.schema.BaseDatabaseSchemaEditor.prepare_default(self,value)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.quote_name(self,name)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.quote_value(self,value)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_constraint(self,model,constraint)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_field(self,model,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_index(self,model,index)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.remove_procedure(self,procedure_name,param_types=())
django.db.backends.base.schema.BaseDatabaseSchemaEditor.skip_default(self,field)
django.db.backends.base.schema.BaseDatabaseSchemaEditor.table_sql(self,model)
django.db.backends.base.schema._all_related_fields(model)
django.db.backends.base.schema._is_relevant_relation(relation,altered_field)
django.db.backends.base.schema._related_non_m2m_objects(old_field,new_field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/creation.py----------------------------------------
A:django.db.backends.base.creation.test_database_name->self._get_test_db_name()
A:django.db.backends.base.creation.self.connection._test_serialized_contents->self.serialize_db_to_string()
A:django.db.backends.base.creation.loader->MigrationLoader(self.connection)
A:django.db.backends.base.creation.queryset->model._base_manager.using(self.connection.alias).order_by(model._meta.pk.name)
A:django.db.backends.base.creation.out->StringIO()
A:django.db.backends.base.creation.data->StringIO(data)
A:django.db.backends.base.creation.table_names->set()
A:django.db.backends.base.creation.confirm->input("Type 'yes' if you would like to try deleting the test database '%s', or 'no' to cancel: " % test_database_name)
A:django.db.backends.base.creation.(test_case_name, _, test_method_name)->test_name.rpartition('.')
A:django.db.backends.base.creation.test_case->import_string(test_case_name)
A:django.db.backends.base.creation.test_method->getattr(test_case, test_method_name)
django.db.backends.base.creation.BaseDatabaseCreation(self,connection)
django.db.backends.base.creation.BaseDatabaseCreation.__init__(self,connection)
django.db.backends.base.creation.BaseDatabaseCreation._clone_test_db(self,suffix,verbosity,keepdb=False)
django.db.backends.base.creation.BaseDatabaseCreation._create_test_db(self,verbosity,autoclobber,keepdb=False)
django.db.backends.base.creation.BaseDatabaseCreation._destroy_test_db(self,test_database_name,verbosity)
django.db.backends.base.creation.BaseDatabaseCreation._execute_create_test_db(self,cursor,parameters,keepdb=False)
django.db.backends.base.creation.BaseDatabaseCreation._get_database_display_str(self,verbosity,database_name)
django.db.backends.base.creation.BaseDatabaseCreation._get_test_db_name(self)
django.db.backends.base.creation.BaseDatabaseCreation._nodb_cursor(self)
django.db.backends.base.creation.BaseDatabaseCreation.clone_test_db(self,suffix,verbosity=1,autoclobber=False,keepdb=False)
django.db.backends.base.creation.BaseDatabaseCreation.create_test_db(self,verbosity=1,autoclobber=False,serialize=True,keepdb=False)
django.db.backends.base.creation.BaseDatabaseCreation.deserialize_db_from_string(self,data)
django.db.backends.base.creation.BaseDatabaseCreation.destroy_test_db(self,old_database_name=None,verbosity=1,keepdb=False,suffix=None)
django.db.backends.base.creation.BaseDatabaseCreation.get_test_db_clone_settings(self,suffix)
django.db.backends.base.creation.BaseDatabaseCreation.log(self,msg)
django.db.backends.base.creation.BaseDatabaseCreation.mark_expected_failures_and_skips(self)
django.db.backends.base.creation.BaseDatabaseCreation.serialize_db_to_string(self)
django.db.backends.base.creation.BaseDatabaseCreation.set_as_test_mirror(self,primary_settings_dict)
django.db.backends.base.creation.BaseDatabaseCreation.sql_table_creation_suffix(self)
django.db.backends.base.creation.BaseDatabaseCreation.test_db_signature(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/operations.py----------------------------------------
A:django.db.backends.base.operations.(limit, offset)->self._get_limit_offset_params(low_mark, high_mark)
A:django.db.backends.base.operations.u_params->tuple((to_string(val) for val in params))
A:django.db.backends.base.operations.self._cache->import_module(self.compiler_module)
A:django.db.backends.base.operations.first->self.adapt_datetimefield_value(first)
A:django.db.backends.base.operations.second->self.adapt_datetimefield_value(second)
A:django.db.backends.base.operations.tz->django.utils.timezone.get_current_timezone()
A:django.db.backends.base.operations.(start_, end_)->self.window_frame_rows_start_end(start, end)
A:django.db.backends.base.operations.normalized_format->format.upper()
django.db.backends.base.operations.BaseDatabaseOperations(self,connection)
django.db.backends.base.operations.BaseDatabaseOperations.__init__(self,connection)
django.db.backends.base.operations.BaseDatabaseOperations._get_limit_offset_params(self,low_mark,high_mark)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_datefield_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_datetimefield_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_decimalfield_value(self,value,max_digits=None,decimal_places=None)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_ipaddressfield_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_timefield_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.adapt_unknown_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.autoinc_sql(self,table,column)
django.db.backends.base.operations.BaseDatabaseOperations.binary_placeholder_sql(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.bulk_batch_size(self,fields,objs)
django.db.backends.base.operations.BaseDatabaseOperations.cache_key_culling_sql(self)
django.db.backends.base.operations.BaseDatabaseOperations.check_expression_support(self,expression)
django.db.backends.base.operations.BaseDatabaseOperations.combine_duration_expression(self,connector,sub_expressions)
django.db.backends.base.operations.BaseDatabaseOperations.combine_expression(self,connector,sub_expressions)
django.db.backends.base.operations.BaseDatabaseOperations.compiler(self,compiler_name)
django.db.backends.base.operations.BaseDatabaseOperations.conditional_expression_supported_in_where_clause(self,expression)
django.db.backends.base.operations.BaseDatabaseOperations.convert_durationfield_value(self,value,expression,connection)
django.db.backends.base.operations.BaseDatabaseOperations.date_extract_sql(self,lookup_type,field_name)
django.db.backends.base.operations.BaseDatabaseOperations.date_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.base.operations.BaseDatabaseOperations.datetime_cast_date_sql(self,field_name,tzname)
django.db.backends.base.operations.BaseDatabaseOperations.datetime_cast_time_sql(self,field_name,tzname)
django.db.backends.base.operations.BaseDatabaseOperations.datetime_extract_sql(self,lookup_type,field_name,tzname)
django.db.backends.base.operations.BaseDatabaseOperations.datetime_trunc_sql(self,lookup_type,field_name,tzname)
django.db.backends.base.operations.BaseDatabaseOperations.deferrable_sql(self)
django.db.backends.base.operations.BaseDatabaseOperations.distinct_sql(self,fields,params)
django.db.backends.base.operations.BaseDatabaseOperations.end_transaction_sql(self,success=True)
django.db.backends.base.operations.BaseDatabaseOperations.execute_sql_flush(self,sql_list)
django.db.backends.base.operations.BaseDatabaseOperations.explain_query_prefix(self,format=None,**options)
django.db.backends.base.operations.BaseDatabaseOperations.fetch_returned_insert_columns(self,cursor,returning_params)
django.db.backends.base.operations.BaseDatabaseOperations.field_cast_sql(self,db_type,internal_type)
django.db.backends.base.operations.BaseDatabaseOperations.for_update_sql(self,nowait=False,skip_locked=False,of=(),no_key=False)
django.db.backends.base.operations.BaseDatabaseOperations.force_no_ordering(self)
django.db.backends.base.operations.BaseDatabaseOperations.get_db_converters(self,expression)
django.db.backends.base.operations.BaseDatabaseOperations.ignore_conflicts_suffix_sql(self,ignore_conflicts=None)
django.db.backends.base.operations.BaseDatabaseOperations.insert_statement(self,ignore_conflicts=False)
django.db.backends.base.operations.BaseDatabaseOperations.integer_field_range(self,internal_type)
django.db.backends.base.operations.BaseDatabaseOperations.last_executed_query(self,cursor,sql,params)
django.db.backends.base.operations.BaseDatabaseOperations.last_insert_id(self,cursor,table_name,pk_name)
django.db.backends.base.operations.BaseDatabaseOperations.limit_offset_sql(self,low_mark,high_mark)
django.db.backends.base.operations.BaseDatabaseOperations.lookup_cast(self,lookup_type,internal_type=None)
django.db.backends.base.operations.BaseDatabaseOperations.max_in_list_size(self)
django.db.backends.base.operations.BaseDatabaseOperations.max_name_length(self)
django.db.backends.base.operations.BaseDatabaseOperations.modify_insert_params(self,placeholder,params)
django.db.backends.base.operations.BaseDatabaseOperations.no_limit_value(self)
django.db.backends.base.operations.BaseDatabaseOperations.pk_default_value(self)
django.db.backends.base.operations.BaseDatabaseOperations.prep_for_like_query(self,x)
django.db.backends.base.operations.BaseDatabaseOperations.prepare_sql_script(self,sql)
django.db.backends.base.operations.BaseDatabaseOperations.process_clob(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.quote_name(self,name)
django.db.backends.base.operations.BaseDatabaseOperations.regex_lookup(self,lookup_type)
django.db.backends.base.operations.BaseDatabaseOperations.return_insert_columns(self,fields)
django.db.backends.base.operations.BaseDatabaseOperations.savepoint_commit_sql(self,sid)
django.db.backends.base.operations.BaseDatabaseOperations.savepoint_create_sql(self,sid)
django.db.backends.base.operations.BaseDatabaseOperations.savepoint_rollback_sql(self,sid)
django.db.backends.base.operations.BaseDatabaseOperations.sequence_reset_by_name_sql(self,style,sequences)
django.db.backends.base.operations.BaseDatabaseOperations.sequence_reset_sql(self,style,model_list)
django.db.backends.base.operations.BaseDatabaseOperations.set_time_zone_sql(self)
django.db.backends.base.operations.BaseDatabaseOperations.sql_flush(self,style,tables,*,reset_sequences=False,allow_cascade=False)
django.db.backends.base.operations.BaseDatabaseOperations.start_transaction_sql(self)
django.db.backends.base.operations.BaseDatabaseOperations.subtract_temporals(self,internal_type,lhs,rhs)
django.db.backends.base.operations.BaseDatabaseOperations.tablespace_sql(self,tablespace,inline=False)
django.db.backends.base.operations.BaseDatabaseOperations.time_extract_sql(self,lookup_type,field_name)
django.db.backends.base.operations.BaseDatabaseOperations.time_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.base.operations.BaseDatabaseOperations.unification_cast_sql(self,output_field)
django.db.backends.base.operations.BaseDatabaseOperations.validate_autopk_value(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.window_frame_end(self,end)
django.db.backends.base.operations.BaseDatabaseOperations.window_frame_range_start_end(self,start=None,end=None)
django.db.backends.base.operations.BaseDatabaseOperations.window_frame_rows_start_end(self,start=None,end=None)
django.db.backends.base.operations.BaseDatabaseOperations.window_frame_start(self,start)
django.db.backends.base.operations.BaseDatabaseOperations.year_lookup_bounds_for_date_field(self,value)
django.db.backends.base.operations.BaseDatabaseOperations.year_lookup_bounds_for_datetime_field(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/client.py----------------------------------------
A:django.db.backends.base.client.(args, env)->self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)
django.db.backends.base.client.BaseDatabaseClient(self,connection)
django.db.backends.base.client.BaseDatabaseClient.__init__(self,connection)
django.db.backends.base.client.BaseDatabaseClient.runshell(self,parameters)
django.db.backends.base.client.BaseDatabaseClient.settings_to_cmd_args_env(cls,settings_dict,parameters)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/base/introspection.py----------------------------------------
A:django.db.backends.base.introspection.TableInfo->namedtuple('TableInfo', ['name', 'type'])
A:django.db.backends.base.introspection.FieldInfo->namedtuple('FieldInfo', 'name type_code display_size internal_size precision scale null_ok default collation')
A:django.db.backends.base.introspection.tables->set(map(self.identifier_converter, tables))
A:django.db.backends.base.introspection.existing_tables->set(self.table_names(include_views=include_views))
A:django.db.backends.base.introspection.sequence->self.get_sequences(cursor, f.m2m_db_table())
django.db.backends.base.introspection.BaseDatabaseIntrospection(self,connection)
django.db.backends.base.introspection.BaseDatabaseIntrospection.__init__(self,connection)
django.db.backends.base.introspection.BaseDatabaseIntrospection.django_table_names(self,only_existing=False,include_views=True)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_constraints(self,cursor,table_name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_field_type(self,data_type,description)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_key_columns(self,cursor,table_name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_migratable_models(self)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_primary_key_column(self,cursor,table_name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_relations(self,cursor,table_name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_sequences(self,cursor,table_name,table_fields=())
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_table_description(self,cursor,table_name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.get_table_list(self,cursor)
django.db.backends.base.introspection.BaseDatabaseIntrospection.identifier_converter(self,name)
django.db.backends.base.introspection.BaseDatabaseIntrospection.installed_models(self,tables)
django.db.backends.base.introspection.BaseDatabaseIntrospection.sequence_list(self)
django.db.backends.base.introspection.BaseDatabaseIntrospection.table_names(self,cursor=None,include_views=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/features.py----------------------------------------
A:django.db.backends.postgresql.features.has_brin_autosummarize->property(operator.attrgetter('is_postgresql_10'))
A:django.db.backends.postgresql.features.has_websearch_to_tsquery->property(operator.attrgetter('is_postgresql_11'))
A:django.db.backends.postgresql.features.supports_table_partitions->property(operator.attrgetter('is_postgresql_10'))
A:django.db.backends.postgresql.features.supports_covering_indexes->property(operator.attrgetter('is_postgresql_11'))
A:django.db.backends.postgresql.features.supports_covering_gist_indexes->property(operator.attrgetter('is_postgresql_12'))
A:django.db.backends.postgresql.features.supports_non_deterministic_collations->property(operator.attrgetter('is_postgresql_12'))
A:django.db.backends.postgresql.features.supports_alternate_collation_providers->property(operator.attrgetter('is_postgresql_10'))
django.db.backends.postgresql.features.DatabaseFeatures(BaseDatabaseFeatures)
django.db.backends.postgresql.features.DatabaseFeatures.introspected_field_types(self)
django.db.backends.postgresql.features.DatabaseFeatures.is_postgresql_10(self)
django.db.backends.postgresql.features.DatabaseFeatures.is_postgresql_11(self)
django.db.backends.postgresql.features.DatabaseFeatures.is_postgresql_12(self)
django.db.backends.postgresql.features.DatabaseFeatures.is_postgresql_13(self)
django.db.backends.postgresql.features.DatabaseFeatures.test_collations(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/base.py----------------------------------------
A:django.db.backends.postgresql.base.PSYCOPG2_VERSION->psycopg2_version()
A:django.db.backends.postgresql.base.INETARRAY->psycopg2.extensions.new_array_type((INETARRAY_OID,), 'INETARRAY', psycopg2.extensions.UNICODE)
A:django.db.backends.postgresql.base.connection->psycopg2.connect(**conn_params)
A:django.db.backends.postgresql.base.conn_timezone_name->self.connection.get_parameter_status('TimeZone')
A:django.db.backends.postgresql.base.timezone_changed->self.ensure_timezone()
A:django.db.backends.postgresql.base.cursor->self.connection.cursor()
A:django.db.backends.postgresql.base.current_task->asyncio.Task.current_task()
A:django.db.backends.postgresql.base.task_ident->str(id(current_task))
A:django.db.backends.postgresql.base.conn->self.__class__({**self.settings_dict, 'NAME': connection.settings_dict['NAME']}, alias=self.alias)
django.db.backends.postgresql.base.CursorDebugWrapper(BaseCursorDebugWrapper)
django.db.backends.postgresql.base.CursorDebugWrapper.copy_expert(self,sql,file,*args)
django.db.backends.postgresql.base.CursorDebugWrapper.copy_to(self,file,table,*args,**kwargs)
django.db.backends.postgresql.base.DatabaseWrapper(BaseDatabaseWrapper)
django.db.backends.postgresql.base.DatabaseWrapper._nodb_cursor(self)
django.db.backends.postgresql.base.DatabaseWrapper._set_autocommit(self,autocommit)
django.db.backends.postgresql.base.DatabaseWrapper.check_constraints(self,table_names=None)
django.db.backends.postgresql.base.DatabaseWrapper.chunked_cursor(self)
django.db.backends.postgresql.base.DatabaseWrapper.create_cursor(self,name=None)
django.db.backends.postgresql.base.DatabaseWrapper.ensure_timezone(self)
django.db.backends.postgresql.base.DatabaseWrapper.get_connection_params(self)
django.db.backends.postgresql.base.DatabaseWrapper.get_new_connection(self,conn_params)
django.db.backends.postgresql.base.DatabaseWrapper.init_connection_state(self)
django.db.backends.postgresql.base.DatabaseWrapper.is_usable(self)
django.db.backends.postgresql.base.DatabaseWrapper.make_debug_cursor(self,cursor)
django.db.backends.postgresql.base.DatabaseWrapper.pg_version(self)
django.db.backends.postgresql.base.DatabaseWrapper.tzinfo_factory(self,offset)
django.db.backends.postgresql.base.psycopg2_version()


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/schema.py----------------------------------------
A:django.db.backends.postgresql.schema.value->value.replace('%', '%%').replace('%', '%%')
A:django.db.backends.postgresql.schema.adapted->psycopg2.extensions.adapt(value)
A:django.db.backends.postgresql.schema.output->super()._field_indexes_sql(model, field)
A:django.db.backends.postgresql.schema.like_index_statement->self._create_like_index_sql(model, new_field)
A:django.db.backends.postgresql.schema.db_type->field.db_type(connection=self.connection)
A:django.db.backends.postgresql.schema.new_internal_type->new_field.get_internal_type()
A:django.db.backends.postgresql.schema.old_internal_type->old_field.get_internal_type()
A:django.db.backends.postgresql.schema.table->strip_quotes(model._meta.db_table)
A:django.db.backends.postgresql.schema.column->strip_quotes(new_field.column)
A:django.db.backends.postgresql.schema.(fragment, _)->super()._alter_column_type_sql(model, old_field, new_field, new_type)
A:django.db.backends.postgresql.schema.index_name->self._create_index_name(model._meta.db_table, [old_field.column], suffix='_like')
A:django.db.backends.postgresql.schema.index_to_remove->self._create_index_name(model._meta.db_table, [old_field.column], suffix='_like')
django.db.backends.postgresql.schema.DatabaseSchemaEditor(BaseDatabaseSchemaEditor)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._alter_column_type_sql(self,model,old_field,new_field,new_type)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._alter_field(self,model,old_field,new_field,old_type,new_type,old_db_params,new_db_params,strict=False)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._create_index_sql(self,model,*,fields=None,name=None,suffix='',using='',db_tablespace=None,col_suffixes=(),sql=None,opclasses=(),condition=None,concurrently=False,include=None,expressions=None)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._create_like_index_sql(self,model,field)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._delete_index_sql(self,model,name,sql=None,concurrently=False)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._field_base_data_types(self,field)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._field_data_type(self,field)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._field_indexes_sql(self,model,field)
django.db.backends.postgresql.schema.DatabaseSchemaEditor._index_columns(self,table,columns,col_suffixes,opclasses)
django.db.backends.postgresql.schema.DatabaseSchemaEditor.add_index(self,model,index,concurrently=False)
django.db.backends.postgresql.schema.DatabaseSchemaEditor.quote_value(self,value)
django.db.backends.postgresql.schema.DatabaseSchemaEditor.remove_index(self,model,index,concurrently=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/creation.py----------------------------------------
django.db.backends.postgresql.creation.DatabaseCreation(BaseDatabaseCreation)
django.db.backends.postgresql.creation.DatabaseCreation._clone_test_db(self,suffix,verbosity,keepdb=False)
django.db.backends.postgresql.creation.DatabaseCreation._database_exists(self,cursor,database_name)
django.db.backends.postgresql.creation.DatabaseCreation._execute_create_test_db(self,cursor,parameters,keepdb=False)
django.db.backends.postgresql.creation.DatabaseCreation._get_database_create_suffix(self,encoding=None,template=None)
django.db.backends.postgresql.creation.DatabaseCreation._quote_name(self,name)
django.db.backends.postgresql.creation.DatabaseCreation.sql_table_creation_suffix(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/operations.py----------------------------------------
A:django.db.backends.postgresql.operations.internal_type->output_field.get_internal_type()
A:django.db.backends.postgresql.operations.field_name->self._convert_field_to_tz(field_name, tzname)
A:django.db.backends.postgresql.operations.values_sql->', '.join(('(%s)' % sql for sql in placeholder_rows_sql))
A:django.db.backends.postgresql.operations.prefix->super().explain_query_prefix(format)
django.db.backends.postgresql.operations.DatabaseOperations(BaseDatabaseOperations)
django.db.backends.postgresql.operations.DatabaseOperations._convert_field_to_tz(self,field_name,tzname)
django.db.backends.postgresql.operations.DatabaseOperations._prepare_tzname_delta(self,tzname)
django.db.backends.postgresql.operations.DatabaseOperations.adapt_datefield_value(self,value)
django.db.backends.postgresql.operations.DatabaseOperations.adapt_datetimefield_value(self,value)
django.db.backends.postgresql.operations.DatabaseOperations.adapt_decimalfield_value(self,value,max_digits=None,decimal_places=None)
django.db.backends.postgresql.operations.DatabaseOperations.adapt_ipaddressfield_value(self,value)
django.db.backends.postgresql.operations.DatabaseOperations.adapt_timefield_value(self,value)
django.db.backends.postgresql.operations.DatabaseOperations.bulk_insert_sql(self,fields,placeholder_rows)
django.db.backends.postgresql.operations.DatabaseOperations.date_extract_sql(self,lookup_type,field_name)
django.db.backends.postgresql.operations.DatabaseOperations.date_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.postgresql.operations.DatabaseOperations.datetime_cast_date_sql(self,field_name,tzname)
django.db.backends.postgresql.operations.DatabaseOperations.datetime_cast_time_sql(self,field_name,tzname)
django.db.backends.postgresql.operations.DatabaseOperations.datetime_extract_sql(self,lookup_type,field_name,tzname)
django.db.backends.postgresql.operations.DatabaseOperations.datetime_trunc_sql(self,lookup_type,field_name,tzname)
django.db.backends.postgresql.operations.DatabaseOperations.deferrable_sql(self)
django.db.backends.postgresql.operations.DatabaseOperations.distinct_sql(self,fields,params)
django.db.backends.postgresql.operations.DatabaseOperations.explain_query_prefix(self,format=None,**options)
django.db.backends.postgresql.operations.DatabaseOperations.fetch_returned_insert_rows(self,cursor)
django.db.backends.postgresql.operations.DatabaseOperations.ignore_conflicts_suffix_sql(self,ignore_conflicts=None)
django.db.backends.postgresql.operations.DatabaseOperations.last_executed_query(self,cursor,sql,params)
django.db.backends.postgresql.operations.DatabaseOperations.lookup_cast(self,lookup_type,internal_type=None)
django.db.backends.postgresql.operations.DatabaseOperations.max_name_length(self)
django.db.backends.postgresql.operations.DatabaseOperations.no_limit_value(self)
django.db.backends.postgresql.operations.DatabaseOperations.prep_for_iexact_query(self,x)
django.db.backends.postgresql.operations.DatabaseOperations.prepare_sql_script(self,sql)
django.db.backends.postgresql.operations.DatabaseOperations.quote_name(self,name)
django.db.backends.postgresql.operations.DatabaseOperations.return_insert_columns(self,fields)
django.db.backends.postgresql.operations.DatabaseOperations.sequence_reset_by_name_sql(self,style,sequences)
django.db.backends.postgresql.operations.DatabaseOperations.sequence_reset_sql(self,style,model_list)
django.db.backends.postgresql.operations.DatabaseOperations.set_time_zone_sql(self)
django.db.backends.postgresql.operations.DatabaseOperations.sql_flush(self,style,tables,*,reset_sequences=False,allow_cascade=False)
django.db.backends.postgresql.operations.DatabaseOperations.subtract_temporals(self,internal_type,lhs,rhs)
django.db.backends.postgresql.operations.DatabaseOperations.tablespace_sql(self,tablespace,inline=False)
django.db.backends.postgresql.operations.DatabaseOperations.time_trunc_sql(self,lookup_type,field_name,tzname=None)
django.db.backends.postgresql.operations.DatabaseOperations.unification_cast_sql(self,output_field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/client.py----------------------------------------
A:django.db.backends.postgresql.client.options->settings_dict.get('OPTIONS', {})
A:django.db.backends.postgresql.client.host->settings_dict.get('HOST')
A:django.db.backends.postgresql.client.port->settings_dict.get('PORT')
A:django.db.backends.postgresql.client.user->settings_dict.get('USER')
A:django.db.backends.postgresql.client.passwd->settings_dict.get('PASSWORD')
A:django.db.backends.postgresql.client.sslmode->settings_dict.get('OPTIONS', {}).get('sslmode')
A:django.db.backends.postgresql.client.sslrootcert->settings_dict.get('OPTIONS', {}).get('sslrootcert')
A:django.db.backends.postgresql.client.sslcert->settings_dict.get('OPTIONS', {}).get('sslcert')
A:django.db.backends.postgresql.client.sslkey->settings_dict.get('OPTIONS', {}).get('sslkey')
A:django.db.backends.postgresql.client.env['PGPASSWORD']->str(passwd)
A:django.db.backends.postgresql.client.env['PGSSLMODE']->str(sslmode)
A:django.db.backends.postgresql.client.env['PGSSLROOTCERT']->str(sslrootcert)
A:django.db.backends.postgresql.client.env['PGSSLCERT']->str(sslcert)
A:django.db.backends.postgresql.client.env['PGSSLKEY']->str(sslkey)
A:django.db.backends.postgresql.client.sigint_handler->signal.getsignal(signal.SIGINT)
django.db.backends.postgresql.client.DatabaseClient(BaseDatabaseClient)
django.db.backends.postgresql.client.DatabaseClient.runshell(self,parameters)
django.db.backends.postgresql.client.DatabaseClient.settings_to_cmd_args_env(cls,settings_dict,parameters)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/backends/postgresql/introspection.py----------------------------------------
A:django.db.backends.postgresql.introspection.field_type->super().get_field_type(data_type, description)
django.db.backends.postgresql.introspection.DatabaseIntrospection(BaseDatabaseIntrospection)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_constraints(self,cursor,table_name)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_field_type(self,data_type,description)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_key_columns(self,cursor,table_name)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_relations(self,cursor,table_name)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_sequences(self,cursor,table_name,table_fields=())
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_table_description(self,cursor,table_name)
django.db.backends.postgresql.introspection.DatabaseIntrospection.get_table_list(self,cursor)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/utils.py----------------------------------------
A:django.db.migrations.utils.COMPILED_REGEX_TYPE->type(re.compile(''))
django.db.migrations.utils.RegexObject(self,obj)
django.db.migrations.utils.RegexObject.__eq__(self,other)
django.db.migrations.utils.RegexObject.__init__(self,obj)
django.db.migrations.utils.get_migration_name_timestamp()


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/writer.py----------------------------------------
A:django.db.migrations.writer.(key_string, key_imports)->MigrationWriter.serialize(key)
A:django.db.migrations.writer.(arg_string, arg_imports)->MigrationWriter.serialize(_arg_value)
A:django.db.migrations.writer.args->arg_string.splitlines()
A:django.db.migrations.writer.imports->set()
A:django.db.migrations.writer.(name, args, kwargs)->self.operation.deconstruct()
A:django.db.migrations.writer.operation_args->get_func_args(self.operation.__init__)
A:django.db.migrations.writer.i->len(args)
A:django.db.migrations.writer.(operation_string, operation_imports)->OperationWriter(operation).serialize()
A:django.db.migrations.writer.migration_imports->set()
A:django.db.migrations.writer.sorted_imports->sorted(imports, key=lambda i: i.split()[1])
A:django.db.migrations.writer.(migrations_package_name, _)->django.db.migrations.loader.MigrationLoader.migrations_module(self.migration.app_label)
A:django.db.migrations.writer.migrations_module->import_module(migrations_package_name)
A:django.db.migrations.writer.app_config->django.apps.apps.get_app_config(self.migration.app_label)
A:django.db.migrations.writer.(maybe_app_name, _, migrations_package_basename)->migrations_package_name.rpartition('.')
A:django.db.migrations.writer.base_module->import_module('.'.join(existing_dirs))
A:django.db.migrations.writer.base_dir->os.path.join(base_dir, missing_dir)
A:django.db.migrations.writer.final_dir->os.path.join(base_dir, *missing_dirs)
django.db.migrations.writer.MigrationWriter(self,migration,include_header=True)
django.db.migrations.writer.MigrationWriter.__init__(self,migration,include_header=True)
django.db.migrations.writer.MigrationWriter.as_string(self)
django.db.migrations.writer.MigrationWriter.basedir(self)
django.db.migrations.writer.MigrationWriter.filename(self)
django.db.migrations.writer.MigrationWriter.path(self)
django.db.migrations.writer.MigrationWriter.register_serializer(cls,type_,serializer)
django.db.migrations.writer.MigrationWriter.serialize(cls,value)
django.db.migrations.writer.MigrationWriter.unregister_serializer(cls,type_)
django.db.migrations.writer.OperationWriter(self,operation,indentation=2)
django.db.migrations.writer.OperationWriter.__init__(self,operation,indentation=2)
django.db.migrations.writer.OperationWriter.feed(self,line)
django.db.migrations.writer.OperationWriter.indent(self)
django.db.migrations.writer.OperationWriter.render(self)
django.db.migrations.writer.OperationWriter.serialize(self)
django.db.migrations.writer.OperationWriter.unindent(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/executor.py----------------------------------------
A:django.db.migrations.executor.self.loader->MigrationLoader(self.connection)
A:django.db.migrations.executor.self.recorder->MigrationRecorder(self.connection)
A:django.db.migrations.executor.applied->self.recorder.applied_migrations()
A:django.db.migrations.executor.next_in_app->sorted((n for n in self.loader.graph.node_map[target].children if n[0] == target[0]))
A:django.db.migrations.executor.state->migration.unapply(state, schema_editor)
A:django.db.migrations.executor.full_plan->self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)
A:django.db.migrations.executor.plan->self.migration_plan(targets)
A:django.db.migrations.executor.all_forwards->all((not backwards for (mig, backwards) in plan))
A:django.db.migrations.executor.all_backwards->all((backwards for (mig, backwards) in plan))
A:django.db.migrations.executor.(applied, state)->self.detect_soft_applied(state, migration)
A:django.db.migrations.executor.all_applied->all((m in applied for m in migration.replaces))
A:django.db.migrations.executor.after_state->migration.mutate_state(project_state)
A:django.db.migrations.executor.existing_table_names->set(self.connection.introspection.table_names(cursor))
A:django.db.migrations.executor.model->django.apps.registry.apps.get_model(model._meta.swapped)
A:django.db.migrations.executor.db_table->db_table.casefold().casefold()
A:django.db.migrations.executor.field->django.apps.registry.apps.get_model(model._meta.swapped)._meta.get_field(operation.name)
A:django.db.migrations.executor.through_db_table->through_db_table.casefold().casefold()
A:django.db.migrations.executor.columns->self.connection.introspection.get_table_description(cursor, table)
A:django.db.migrations.executor.column_name->column_name.casefold().casefold()
A:django.db.migrations.executor.field_column->field_column.casefold().casefold()
django.db.migrations.executor.MigrationExecutor(self,connection,progress_callback=None)
django.db.migrations.executor.MigrationExecutor.__init__(self,connection,progress_callback=None)
django.db.migrations.executor.MigrationExecutor._create_project_state(self,with_applied_migrations=False)
django.db.migrations.executor.MigrationExecutor._migrate_all_backwards(self,plan,full_plan,fake)
django.db.migrations.executor.MigrationExecutor._migrate_all_forwards(self,state,plan,full_plan,fake,fake_initial)
django.db.migrations.executor.MigrationExecutor.apply_migration(self,state,migration,fake=False,fake_initial=False)
django.db.migrations.executor.MigrationExecutor.check_replacements(self)
django.db.migrations.executor.MigrationExecutor.detect_soft_applied(self,project_state,migration)
django.db.migrations.executor.MigrationExecutor.migrate(self,targets,plan=None,state=None,fake=False,fake_initial=False)
django.db.migrations.executor.MigrationExecutor.migration_plan(self,targets,clean_start=False)
django.db.migrations.executor.MigrationExecutor.record_migration(self,migration)
django.db.migrations.executor.MigrationExecutor.unapply_migration(self,state,migration,fake=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/questioner.py----------------------------------------
A:django.db.migrations.questioner.app_config->django.apps.apps.get_app_config(app_label)
A:django.db.migrations.questioner.(migrations_import_path, _)->loader.MigrationLoader.migrations_module(app_config.label)
A:django.db.migrations.questioner.migrations_module->importlib.import_module(migrations_import_path)
A:django.db.migrations.questioner.filenames->os.listdir(list(migrations_module.__path__)[0])
A:django.db.migrations.questioner.result->input('Please select a valid option: ')
A:django.db.migrations.questioner.value->int(result)
A:django.db.migrations.questioner.prompt->'[default: {}] >>> '.format(default)
A:django.db.migrations.questioner.code->input(prompt)
A:django.db.migrations.questioner.choice->self._choice_input("You are trying to add the field '{}' with 'auto_now_add=True' to {} without a default; the database needs something to populate existing rows.\n".format(field_name, model_name), ['Provide a one-off default now (will be set on all existing rows)', 'Quit, and let me add a default in models.py'])
django.db.migrations.questioner.InteractiveMigrationQuestioner(MigrationQuestioner)
django.db.migrations.questioner.InteractiveMigrationQuestioner._ask_default(self,default='')
django.db.migrations.questioner.InteractiveMigrationQuestioner._boolean_input(self,question,default=None)
django.db.migrations.questioner.InteractiveMigrationQuestioner._choice_input(self,question,choices)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_auto_now_add_addition(self,field_name,model_name)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_merge(self,app_label)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_not_null_addition(self,field_name,model_name)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_not_null_alteration(self,field_name,model_name)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_rename(self,model_name,old_name,new_name,field_instance)
django.db.migrations.questioner.InteractiveMigrationQuestioner.ask_rename_model(self,old_model_state,new_model_state)
django.db.migrations.questioner.MigrationQuestioner(self,defaults=None,specified_apps=None,dry_run=None)
django.db.migrations.questioner.MigrationQuestioner.__init__(self,defaults=None,specified_apps=None,dry_run=None)
django.db.migrations.questioner.MigrationQuestioner.ask_auto_now_add_addition(self,field_name,model_name)
django.db.migrations.questioner.MigrationQuestioner.ask_initial(self,app_label)
django.db.migrations.questioner.MigrationQuestioner.ask_merge(self,app_label)
django.db.migrations.questioner.MigrationQuestioner.ask_not_null_addition(self,field_name,model_name)
django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration(self,field_name,model_name)
django.db.migrations.questioner.MigrationQuestioner.ask_rename(self,model_name,old_name,new_name,field_instance)
django.db.migrations.questioner.MigrationQuestioner.ask_rename_model(self,old_model_state,new_model_state)
django.db.migrations.questioner.NonInteractiveMigrationQuestioner(MigrationQuestioner)
django.db.migrations.questioner.NonInteractiveMigrationQuestioner.ask_auto_now_add_addition(self,field_name,model_name)
django.db.migrations.questioner.NonInteractiveMigrationQuestioner.ask_not_null_addition(self,field_name,model_name)
django.db.migrations.questioner.NonInteractiveMigrationQuestioner.ask_not_null_alteration(self,field_name,model_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/optimizer.py----------------------------------------
A:django.db.migrations.optimizer.result->operation.reduce(other, app_label)
django.db.migrations.optimizer.MigrationOptimizer
django.db.migrations.optimizer.MigrationOptimizer.optimize(self,operations,app_label)
django.db.migrations.optimizer.MigrationOptimizer.optimize_inner(self,operations,app_label)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/serializer.py----------------------------------------
A:django.db.migrations.serializer.imports->set()
A:django.db.migrations.serializer.(item_string, item_imports)->serializer_factory(item).serialize()
A:django.db.migrations.serializer.value->str(value)
A:django.db.migrations.serializer.self.value->self.value.astimezone(utc)
A:django.db.migrations.serializer.(name, imports)->self._serialize_path(qs_path)
A:django.db.migrations.serializer.(arg_string, arg_imports)->serializer_factory(arg).serialize()
A:django.db.migrations.serializer.(module, name)->path.rsplit('.', 1)
A:django.db.migrations.serializer.(k_string, k_imports)->serializer_factory(k).serialize()
A:django.db.migrations.serializer.(v_string, v_imports)->serializer_factory(v).serialize()
A:django.db.migrations.serializer.(func_string, func_imports)->serializer_factory(self.value.func).serialize()
A:django.db.migrations.serializer.(args_string, args_imports)->serializer_factory(self.value.args).serialize()
A:django.db.migrations.serializer.(keywords_string, keywords_imports)->serializer_factory(self.value.keywords).serialize()
A:django.db.migrations.serializer.(attr_name, path, args, kwargs)->self.value.deconstruct()
A:django.db.migrations.serializer.(as_manager, manager_path, qs_path, args, kwargs)->self.value.deconstruct()
A:django.db.migrations.serializer.(string, imports)->OperationWriter(self.value, indentation=0).serialize()
A:django.db.migrations.serializer.(regex_pattern, pattern_imports)->serializer_factory(self.value.pattern).serialize()
A:django.db.migrations.serializer.(regex_flags, flag_imports)->serializer_factory(flags).serialize()
django.db.migrations.serializer.BaseSequenceSerializer(BaseSerializer)
django.db.migrations.serializer.BaseSequenceSerializer._format(self)
django.db.migrations.serializer.BaseSequenceSerializer.serialize(self)
django.db.migrations.serializer.BaseSerializer(self,value)
django.db.migrations.serializer.BaseSerializer.__init__(self,value)
django.db.migrations.serializer.BaseSerializer.serialize(self)
django.db.migrations.serializer.BaseSimpleSerializer(BaseSerializer)
django.db.migrations.serializer.BaseSimpleSerializer.serialize(self)
django.db.migrations.serializer.ChoicesSerializer(BaseSerializer)
django.db.migrations.serializer.ChoicesSerializer.serialize(self)
django.db.migrations.serializer.DateTimeSerializer(BaseSerializer)
django.db.migrations.serializer.DateTimeSerializer.serialize(self)
django.db.migrations.serializer.DatetimeDatetimeSerializer(BaseSerializer)
django.db.migrations.serializer.DatetimeDatetimeSerializer.serialize(self)
django.db.migrations.serializer.DecimalSerializer(BaseSerializer)
django.db.migrations.serializer.DecimalSerializer.serialize(self)
django.db.migrations.serializer.DeconstructableSerializer(BaseSerializer)
django.db.migrations.serializer.DeconstructableSerializer._serialize_path(path)
django.db.migrations.serializer.DeconstructableSerializer.serialize(self)
django.db.migrations.serializer.DeconstructableSerializer.serialize_deconstructed(path,args,kwargs)
django.db.migrations.serializer.DictionarySerializer(BaseSerializer)
django.db.migrations.serializer.DictionarySerializer.serialize(self)
django.db.migrations.serializer.EnumSerializer(BaseSerializer)
django.db.migrations.serializer.EnumSerializer.serialize(self)
django.db.migrations.serializer.FloatSerializer(BaseSimpleSerializer)
django.db.migrations.serializer.FloatSerializer.serialize(self)
django.db.migrations.serializer.FrozensetSerializer(BaseSequenceSerializer)
django.db.migrations.serializer.FrozensetSerializer._format(self)
django.db.migrations.serializer.FunctionTypeSerializer(BaseSerializer)
django.db.migrations.serializer.FunctionTypeSerializer.serialize(self)
django.db.migrations.serializer.FunctoolsPartialSerializer(BaseSerializer)
django.db.migrations.serializer.FunctoolsPartialSerializer.serialize(self)
django.db.migrations.serializer.IterableSerializer(BaseSerializer)
django.db.migrations.serializer.IterableSerializer.serialize(self)
django.db.migrations.serializer.ModelFieldSerializer(DeconstructableSerializer)
django.db.migrations.serializer.ModelFieldSerializer.serialize(self)
django.db.migrations.serializer.ModelManagerSerializer(DeconstructableSerializer)
django.db.migrations.serializer.ModelManagerSerializer.serialize(self)
django.db.migrations.serializer.OperationSerializer(BaseSerializer)
django.db.migrations.serializer.OperationSerializer.serialize(self)
django.db.migrations.serializer.PathLikeSerializer(BaseSerializer)
django.db.migrations.serializer.PathLikeSerializer.serialize(self)
django.db.migrations.serializer.PathSerializer(BaseSerializer)
django.db.migrations.serializer.PathSerializer.serialize(self)
django.db.migrations.serializer.RegexSerializer(BaseSerializer)
django.db.migrations.serializer.RegexSerializer.serialize(self)
django.db.migrations.serializer.SequenceSerializer(BaseSequenceSerializer)
django.db.migrations.serializer.SequenceSerializer._format(self)
django.db.migrations.serializer.Serializer
django.db.migrations.serializer.Serializer.register(cls,type_,serializer)
django.db.migrations.serializer.Serializer.unregister(cls,type_)
django.db.migrations.serializer.SetSerializer(BaseSequenceSerializer)
django.db.migrations.serializer.SetSerializer._format(self)
django.db.migrations.serializer.SettingsReferenceSerializer(BaseSerializer)
django.db.migrations.serializer.SettingsReferenceSerializer.serialize(self)
django.db.migrations.serializer.TupleSerializer(BaseSequenceSerializer)
django.db.migrations.serializer.TupleSerializer._format(self)
django.db.migrations.serializer.TypeSerializer(BaseSerializer)
django.db.migrations.serializer.TypeSerializer.serialize(self)
django.db.migrations.serializer.UUIDSerializer(BaseSerializer)
django.db.migrations.serializer.UUIDSerializer.serialize(self)
django.db.migrations.serializer.serializer_factory(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/autodetector.py----------------------------------------
A:django.db.migrations.autodetector.changes->self._trim_to_apps(changes, trim_to_apps)
A:django.db.migrations.autodetector.deconstructed->obj.deconstruct()
A:django.db.migrations.autodetector.deconstruction->self.deep_deconstruct(field)
A:django.db.migrations.autodetector.self.old_model_keys->set()
A:django.db.migrations.autodetector.self.old_proxy_keys->set()
A:django.db.migrations.autodetector.self.old_unmanaged_keys->set()
A:django.db.migrations.autodetector.self.new_model_keys->set()
A:django.db.migrations.autodetector.self.new_proxy_keys->set()
A:django.db.migrations.autodetector.self.new_unmanaged_keys->set()
A:django.db.migrations.autodetector.model->self.old_apps.get_model(app_label, model_name)
A:django.db.migrations.autodetector.old_model_name->self.renamed_models.get((app_label, model_name), model_name)
A:django.db.migrations.autodetector.old_field->self.old_apps.get_model(app_label, old_model_name)._meta.get_field(old_field_name)
A:django.db.migrations.autodetector.(resolved_app_label, resolved_object_name)->getattr(settings, dependency[1]).split('.')
A:django.db.migrations.autodetector.num_ops->sum((len(x) for x in self.generated_operations.values()))
A:django.db.migrations.autodetector.dependencies->self._get_dependencies_for_foreign_key(field)
A:django.db.migrations.autodetector.operation_dependencies->set()
A:django.db.migrations.autodetector.(dep, is_swappable_dep)->self._resolve_dependency(dep)
A:django.db.migrations.autodetector.subclass->type('Migration', (Migration,), {'operations': [], 'dependencies': []})
A:django.db.migrations.autodetector.instance->subclass('auto_%i' % (len(self.migrations.get(app_label, [])) + 1), app_label)
A:django.db.migrations.autodetector.instance.dependencies->list(dependencies)
A:django.db.migrations.autodetector.new_num_ops->sum((len(x) for x in self.generated_operations.values()))
A:django.db.migrations.autodetector.self.generated_operations[app_label]->stable_topological_sort(ops, dependency_graph)
A:django.db.migrations.autodetector.migration.dependencies->list(set(migration.dependencies))
A:django.db.migrations.autodetector.migration.operations->MigrationOptimizer().optimize(migration.operations, app_label)
A:django.db.migrations.autodetector.model_fields_def->self.only_relation_agnostic_fields(model_state.fields)
A:django.db.migrations.autodetector.rem_model_fields_def->self.only_relation_agnostic_fields(rem_model_state.fields)
A:django.db.migrations.autodetector.all_added_models->chain(sorted(added_models, key=self.swappable_first_key, reverse=True), sorted(added_unmanaged_models, key=self.swappable_first_key, reverse=True))
A:django.db.migrations.autodetector.indexes->model_state.options.pop('indexes')
A:django.db.migrations.autodetector.constraints->model_state.options.pop('constraints')
A:django.db.migrations.autodetector.unique_together->model_state.options.pop('unique_together', None)
A:django.db.migrations.autodetector.index_together->model_state.options.pop('index_together', None)
A:django.db.migrations.autodetector.order_with_respect_to->model_state.options.pop('order_with_respect_to', None)
A:django.db.migrations.autodetector.(base_app_label, base_name)->base.split('.', 1)
A:django.db.migrations.autodetector.old_base_model_state->self.from_state.models.get((base_app_label, base_name))
A:django.db.migrations.autodetector.new_base_model_state->self.to_state.models.get((base_app_label, base_name))
A:django.db.migrations.autodetector.removed_base_fields->set(old_base_model_state.fields).difference(new_base_model_state.fields).intersection(model_state.fields)
A:django.db.migrations.autodetector.all_deleted_models->chain(sorted(deleted_models), sorted(deleted_unmanaged_models))
A:django.db.migrations.autodetector.through_user->self.through_users.get((app_label, model_state.name_lower))
A:django.db.migrations.autodetector.field->self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
A:django.db.migrations.autodetector.field_dec->self.deep_deconstruct(field)
A:django.db.migrations.autodetector.old_field_dec->self.deep_deconstruct(old_field)
A:django.db.migrations.autodetector.field.default->self.questioner.ask_not_null_addition(field_name, model_name)
A:django.db.migrations.autodetector.old_field_name->self.renamed_fields.get((app_label, model_name, field_name), field_name)
A:django.db.migrations.autodetector.new_field->self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)
A:django.db.migrations.autodetector.remote_field_name->getattr(new_field.remote_field, 'field_name', None)
A:django.db.migrations.autodetector.from_fields->getattr(new_field, 'from_fields', None)
A:django.db.migrations.autodetector.new_field.from_fields->tuple([self.renamed_fields.get(from_rename_key + (from_field,), from_field) for from_field in from_fields])
A:django.db.migrations.autodetector.new_field.to_fields->tuple([self.renamed_fields.get(rename_key + (to_field,), to_field) for to_field in new_field.to_fields])
A:django.db.migrations.autodetector.new_field_dec->self.deep_deconstruct(new_field)
A:django.db.migrations.autodetector.new_default->self.questioner.ask_not_null_alteration(field_name, model_name)
A:django.db.migrations.autodetector.swappable_setting->getattr(field, 'swappable_setting', None)
A:django.db.migrations.autodetector.old_value->old_model_state.options.get(option_name)
A:django.db.migrations.autodetector.new_value->new_model_state.options.get(option_name)
A:django.db.migrations.autodetector.models_to_check->self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys, self.old_unmanaged_keys & self.new_model_keys, self.old_model_keys & self.new_unmanaged_keys)
A:django.db.migrations.autodetector.old_db_table_name->old_model_state.options.get('db_table')
A:django.db.migrations.autodetector.new_db_table_name->new_model_state.options.get('db_table')
A:django.db.migrations.autodetector.leaves->graph.leaf_nodes()
A:django.db.migrations.autodetector.new_name->'_'.join(new_name_parts)
A:django.db.migrations.autodetector.required_apps->set(app_labels)
A:django.db.migrations.autodetector.old_required_apps->set(required_apps)
A:django.db.migrations.autodetector.match->re.match('^\\d+', name)
django.db.migrations.autodetector.MigrationAutodetector(self,from_state,to_state,questioner=None)
django.db.migrations.autodetector.MigrationAutodetector.__init__(self,from_state,to_state,questioner=None)
django.db.migrations.autodetector.MigrationAutodetector._build_migration_list(self,graph=None)
django.db.migrations.autodetector.MigrationAutodetector._detect_changes(self,convert_apps=None,graph=None)
django.db.migrations.autodetector.MigrationAutodetector._generate_added_field(self,app_label,model_name,field_name)
django.db.migrations.autodetector.MigrationAutodetector._generate_altered_foo_together(self,operation)
django.db.migrations.autodetector.MigrationAutodetector._generate_removed_field(self,app_label,model_name,field_name)
django.db.migrations.autodetector.MigrationAutodetector._generate_through_model_map(self)
django.db.migrations.autodetector.MigrationAutodetector._get_dependencies_for_foreign_key(self,field)
django.db.migrations.autodetector.MigrationAutodetector._optimize_migrations(self)
django.db.migrations.autodetector.MigrationAutodetector._prepare_field_lists(self)
django.db.migrations.autodetector.MigrationAutodetector._resolve_dependency(dependency)
django.db.migrations.autodetector.MigrationAutodetector._sort_migrations(self)
django.db.migrations.autodetector.MigrationAutodetector._trim_to_apps(self,changes,app_labels)
django.db.migrations.autodetector.MigrationAutodetector.add_operation(self,app_label,operation,dependencies=None,beginning=False)
django.db.migrations.autodetector.MigrationAutodetector.arrange_for_graph(self,changes,graph,migration_name=None)
django.db.migrations.autodetector.MigrationAutodetector.changes(self,graph,trim_to_apps=None,convert_apps=None,migration_name=None)
django.db.migrations.autodetector.MigrationAutodetector.check_dependency(self,operation,dependency)
django.db.migrations.autodetector.MigrationAutodetector.create_altered_constraints(self)
django.db.migrations.autodetector.MigrationAutodetector.create_altered_indexes(self)
django.db.migrations.autodetector.MigrationAutodetector.deep_deconstruct(self,obj)
django.db.migrations.autodetector.MigrationAutodetector.generate_added_constraints(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_added_fields(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_added_indexes(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_db_table(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_fields(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_index_together(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_managers(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_options(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_order_with_respect_to(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_altered_unique_together(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_created_models(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_created_proxies(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_deleted_models(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_deleted_proxies(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_removed_constraints(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_removed_fields(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_removed_indexes(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_renamed_fields(self)
django.db.migrations.autodetector.MigrationAutodetector.generate_renamed_models(self)
django.db.migrations.autodetector.MigrationAutodetector.only_relation_agnostic_fields(self,fields)
django.db.migrations.autodetector.MigrationAutodetector.parse_number(cls,name)
django.db.migrations.autodetector.MigrationAutodetector.swappable_first_key(self,item)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/graph.py----------------------------------------
A:django.db.migrations.graph.self.children->set()
A:django.db.migrations.graph.self.parents->set()
A:django.db.migrations.graph.node->stack.pop()
A:django.db.migrations.graph.replaced->set(replaced)
A:django.db.migrations.graph.replaced_node->self.node_map.get(key)
A:django.db.migrations.graph.replacement_node->self.node_map.pop(replacement)
A:django.db.migrations.graph.replaced_nodes->set()
A:django.db.migrations.graph.replaced_nodes_parents->set()
A:django.db.migrations.graph.visited_set->set()
A:django.db.migrations.graph.(node, processed)->stack.pop()
A:django.db.migrations.graph.roots->set()
A:django.db.migrations.graph.leaves->set()
A:django.db.migrations.graph.todo->set(self.nodes)
A:django.db.migrations.graph.(nodes, edges)->self._nodes_and_edges()
A:django.db.migrations.graph.nodes->list(self.leaf_nodes())
A:django.db.migrations.graph.plan->self._generate_plan(nodes, at_end)
A:django.db.migrations.graph.project_state->self.nodes[node].mutate_state(project_state, preserve=False)
django.db.migrations.graph.DummyNode(self,key,origin,error_message)
django.db.migrations.graph.DummyNode.__init__(self,key,origin,error_message)
django.db.migrations.graph.DummyNode.raise_error(self)
django.db.migrations.graph.MigrationGraph(self)
django.db.migrations.graph.MigrationGraph.__contains__(self,node)
django.db.migrations.graph.MigrationGraph.__init__(self)
django.db.migrations.graph.MigrationGraph.__repr__(self)
django.db.migrations.graph.MigrationGraph.__str__(self)
django.db.migrations.graph.MigrationGraph._generate_plan(self,nodes,at_end)
django.db.migrations.graph.MigrationGraph._nodes_and_edges(self)
django.db.migrations.graph.MigrationGraph.add_dependency(self,migration,child,parent,skip_validation=False)
django.db.migrations.graph.MigrationGraph.add_dummy_node(self,key,origin,error_message)
django.db.migrations.graph.MigrationGraph.add_node(self,key,migration)
django.db.migrations.graph.MigrationGraph.backwards_plan(self,target)
django.db.migrations.graph.MigrationGraph.ensure_not_cyclic(self)
django.db.migrations.graph.MigrationGraph.forwards_plan(self,target)
django.db.migrations.graph.MigrationGraph.iterative_dfs(self,start,forwards=True)
django.db.migrations.graph.MigrationGraph.leaf_nodes(self,app=None)
django.db.migrations.graph.MigrationGraph.make_state(self,nodes=None,at_end=True,real_apps=None)
django.db.migrations.graph.MigrationGraph.remove_replaced_nodes(self,replacement,replaced)
django.db.migrations.graph.MigrationGraph.remove_replacement_node(self,replacement,replaced)
django.db.migrations.graph.MigrationGraph.root_nodes(self,app=None)
django.db.migrations.graph.MigrationGraph.validate_consistency(self)
django.db.migrations.graph.Node(self,key)
django.db.migrations.graph.Node.__eq__(self,other)
django.db.migrations.graph.Node.__getitem__(self,item)
django.db.migrations.graph.Node.__hash__(self)
django.db.migrations.graph.Node.__init__(self,key)
django.db.migrations.graph.Node.__lt__(self,other)
django.db.migrations.graph.Node.__repr__(self)
django.db.migrations.graph.Node.__str__(self)
django.db.migrations.graph.Node.add_child(self,child)
django.db.migrations.graph.Node.add_parent(self,parent)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/exceptions.py----------------------------------------
django.db.migrations.exceptions.AmbiguityError(Exception)
django.db.migrations.exceptions.BadMigrationError(Exception)
django.db.migrations.exceptions.CircularDependencyError(Exception)
django.db.migrations.exceptions.InconsistentMigrationHistory(Exception)
django.db.migrations.exceptions.InvalidBasesError(ValueError)
django.db.migrations.exceptions.InvalidMigrationPlan(ValueError)
django.db.migrations.exceptions.IrreversibleError(RuntimeError)
django.db.migrations.exceptions.MigrationSchemaMissing(DatabaseError)
django.db.migrations.exceptions.NodeNotFoundError(self,message,node,origin=None)
django.db.migrations.exceptions.NodeNotFoundError.__init__(self,message,node,origin=None)
django.db.migrations.exceptions.NodeNotFoundError.__repr__(self)
django.db.migrations.exceptions.NodeNotFoundError.__str__(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/recorder.py----------------------------------------
A:django.db.migrations.recorder.app->django.db.models.CharField(max_length=255)
A:django.db.migrations.recorder.name->django.db.models.CharField(max_length=255)
A:django.db.migrations.recorder.applied->django.db.models.DateTimeField(default=now)
A:django.db.migrations.recorder.apps->Apps()
A:django.db.migrations.recorder.tables->self.connection.introspection.table_names(cursor)
django.db.migrations.recorder.MigrationRecorder(self,connection)
django.db.migrations.recorder.MigrationRecorder.Migration(cls)
django.db.migrations.recorder.MigrationRecorder.__init__(self,connection)
django.db.migrations.recorder.MigrationRecorder.applied_migrations(self)
django.db.migrations.recorder.MigrationRecorder.ensure_schema(self)
django.db.migrations.recorder.MigrationRecorder.flush(self)
django.db.migrations.recorder.MigrationRecorder.has_table(self)
django.db.migrations.recorder.MigrationRecorder.migration_qs(self)
django.db.migrations.recorder.MigrationRecorder.record_applied(self,app,name)
django.db.migrations.recorder.MigrationRecorder.record_unapplied(self,app,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/migration.py----------------------------------------
A:django.db.migrations.migration.self.operations->list(self.__class__.operations)
A:django.db.migrations.migration.self.dependencies->list(self.__class__.dependencies)
A:django.db.migrations.migration.self.run_before->list(self.__class__.run_before)
A:django.db.migrations.migration.self.replaces->list(self.__class__.replaces)
A:django.db.migrations.migration.new_state->new_state.clone().clone()
A:django.db.migrations.migration.old_state->new_state.clone().clone().clone()
A:django.db.migrations.migration.name->'_'.join(sorted((o.migration_name_fragment for o in self.operations)))
A:django.db.migrations.migration.self->tuple.__new__(cls, value)
django.db.migrations.Migration(self,name,app_label)
django.db.migrations.Migration.__eq__(self,other)
django.db.migrations.Migration.__hash__(self)
django.db.migrations.Migration.__repr__(self)
django.db.migrations.Migration.__str__(self)
django.db.migrations.Migration.apply(self,project_state,schema_editor,collect_sql=False)
django.db.migrations.Migration.mutate_state(self,project_state,preserve=True)
django.db.migrations.Migration.suggest_name(self)
django.db.migrations.Migration.unapply(self,project_state,schema_editor,collect_sql=False)
django.db.migrations.migration.Migration(self,name,app_label)
django.db.migrations.migration.Migration.__eq__(self,other)
django.db.migrations.migration.Migration.__hash__(self)
django.db.migrations.migration.Migration.__init__(self,name,app_label)
django.db.migrations.migration.Migration.__repr__(self)
django.db.migrations.migration.Migration.__str__(self)
django.db.migrations.migration.Migration.apply(self,project_state,schema_editor,collect_sql=False)
django.db.migrations.migration.Migration.mutate_state(self,project_state,preserve=True)
django.db.migrations.migration.Migration.suggest_name(self)
django.db.migrations.migration.Migration.unapply(self,project_state,schema_editor,collect_sql=False)
django.db.migrations.migration.SwappableTuple(cls,value,setting)
django.db.migrations.migration.SwappableTuple.__new__(cls,value,setting)
django.db.migrations.migration.swappable_dependency(value)
django.db.migrations.swappable_dependency(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/state.py----------------------------------------
A:django.db.migrations.state.split->model.split('.', 1)
A:django.db.migrations.state.related_fields_models->set()
A:django.db.migrations.state.seen->set()
A:django.db.migrations.state.queue->_get_related_models(model)
A:django.db.migrations.state.related_models->set()
A:django.db.migrations.state.old_model->self.apps.get_model(app_label, model_name)
A:django.db.migrations.state.direct_related_models->set()
A:django.db.migrations.state.(rel_app_label, rel_model_name)->_get_app_label_and_model_name(field.related_model, app_label)
A:django.db.migrations.state.rel_model->self.apps.get_model(rel_app_label, rel_model_name)
A:django.db.migrations.state.new_state->ProjectState(models={k: v.clone() for (k, v) in self.models.items()}, real_apps=self.real_apps)
A:django.db.migrations.state.new_state.apps->self.apps.clone()
A:django.db.migrations.state.self.apps->StateApps(self.real_apps, self.models, ignore_swappable=True)
A:django.db.migrations.state.model_state->ModelState.from_model(model)
A:django.db.migrations.state.app->django.apps.registry.apps.get_app_config(app_label)
A:django.db.migrations.state.errors->_check_lazy_references(self, ignore=ignore)
A:django.db.migrations.state.clone->StateApps([], {})
A:django.db.migrations.state.clone.all_models->copy.deepcopy(self.all_models)
A:django.db.migrations.state.clone.app_configs->copy.deepcopy(self.app_configs)
A:django.db.migrations.state.self.app_configs[app_label]->AppConfigStub(app_label)
A:django.db.migrations.state.self.fields->dict(fields)
A:django.db.migrations.state.options[name]->set(normalize_together(it))
A:django.db.migrations.state.flattened_bases->sorted(set(flatten_bases(model)), key=lambda x: model.__mro__.index(x))
A:django.db.migrations.state.bases->tuple((apps.get_model(base) if isinstance(base, str) else base for base in self.bases))
A:django.db.migrations.state.manager_names->set()
A:django.db.migrations.state.new_manager->django.db.models.Manager()
A:django.db.migrations.state.sorted_managers->sorted(self.managers, key=lambda v: v[1].creation_counter)
A:django.db.migrations.state.(as_manager, manager_path, qs_path, args, kwargs)->manager.deconstruct()
A:django.db.migrations.state.qs_class->import_string(qs_path)
A:django.db.migrations.state.manager_class->import_string(manager_path)
A:django.db.migrations.state.meta->type('Meta', (), meta_contents)
django.db.migrations.state.AppConfigStub(self,label)
django.db.migrations.state.AppConfigStub.__init__(self,label)
django.db.migrations.state.AppConfigStub.import_models(self)
django.db.migrations.state.ModelState(self,app_label,name,fields,options=None,bases=None,managers=None)
django.db.migrations.state.ModelState.__eq__(self,other)
django.db.migrations.state.ModelState.__init__(self,app_label,name,fields,options=None,bases=None,managers=None)
django.db.migrations.state.ModelState.__repr__(self)
django.db.migrations.state.ModelState.clone(self)
django.db.migrations.state.ModelState.construct_managers(self)
django.db.migrations.state.ModelState.from_model(cls,model,exclude_rels=False)
django.db.migrations.state.ModelState.get_constraint_by_name(self,name)
django.db.migrations.state.ModelState.get_index_by_name(self,name)
django.db.migrations.state.ModelState.name_lower(self)
django.db.migrations.state.ModelState.render(self,apps)
django.db.migrations.state.ProjectState(self,models=None,real_apps=None)
django.db.migrations.state.ProjectState.__eq__(self,other)
django.db.migrations.state.ProjectState.__init__(self,models=None,real_apps=None)
django.db.migrations.state.ProjectState._find_reload_model(self,app_label,model_name,delay=False)
django.db.migrations.state.ProjectState._reload(self,related_models)
django.db.migrations.state.ProjectState.add_model(self,model_state)
django.db.migrations.state.ProjectState.apps(self)
django.db.migrations.state.ProjectState.clear_delayed_apps_cache(self)
django.db.migrations.state.ProjectState.clone(self)
django.db.migrations.state.ProjectState.concrete_apps(self)
django.db.migrations.state.ProjectState.from_apps(cls,apps)
django.db.migrations.state.ProjectState.reload_model(self,app_label,model_name,delay=False)
django.db.migrations.state.ProjectState.reload_models(self,models,delay=True)
django.db.migrations.state.ProjectState.remove_model(self,app_label,model_name)
django.db.migrations.state.StateApps(self,real_apps,models,ignore_swappable=False)
django.db.migrations.state.StateApps.__init__(self,real_apps,models,ignore_swappable=False)
django.db.migrations.state.StateApps.bulk_update(self)
django.db.migrations.state.StateApps.clone(self)
django.db.migrations.state.StateApps.register_model(self,app_label,model)
django.db.migrations.state.StateApps.render_multiple(self,model_states)
django.db.migrations.state.StateApps.unregister_model(self,app_label,model_name)
django.db.migrations.state._get_app_label_and_model_name(model,app_label='')
django.db.migrations.state._get_related_models(m)
django.db.migrations.state.get_related_models_recursive(model)
django.db.migrations.state.get_related_models_tuples(model)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/loader.py----------------------------------------
A:django.db.migrations.loader.self.unmigrated_apps->set()
A:django.db.migrations.loader.self.migrated_apps->set()
A:django.db.migrations.loader.(module_name, explicit)->self.migrations_module(app_config.label)
A:django.db.migrations.loader.module->import_module(module_name)
A:django.db.migrations.loader.migration_module->import_module(migration_path)
A:django.db.migrations.loader.self.disk_migrations[app_config.label, migration_name]->import_module(migration_path).Migration(migration_name, app_config.label)
A:django.db.migrations.loader.parent->self.check_key(parent, key[0])
A:django.db.migrations.loader.child->self.check_key(child, key[0])
A:django.db.migrations.loader.recorder->MigrationRecorder(connection)
A:django.db.migrations.loader.self.applied_migrations->MigrationRecorder(connection).applied_migrations()
A:django.db.migrations.loader.self.graph->MigrationGraph()
A:django.db.migrations.loader.candidates->reverse_replacements.get(exc.node, set())
A:django.db.migrations.loader.is_replaced->any((candidate in self.graph.nodes for candidate in candidates))
A:django.db.migrations.loader.tries->', '.join(('%s.%s' % c for c in candidates))
A:django.db.migrations.loader.applied->MigrationRecorder(connection).applied_migrations()
A:django.db.migrations.loader.conflicting_apps->set()
A:django.db.migrations.loader.state->migration.unapply(state, schema_editor, collect_sql=True)
django.db.migrations.loader.MigrationLoader(self,connection,load=True,ignore_no_migrations=False,replace_migrations=True)
django.db.migrations.loader.MigrationLoader.__init__(self,connection,load=True,ignore_no_migrations=False,replace_migrations=True)
django.db.migrations.loader.MigrationLoader.add_external_dependencies(self,key,migration)
django.db.migrations.loader.MigrationLoader.add_internal_dependencies(self,key,migration)
django.db.migrations.loader.MigrationLoader.build_graph(self)
django.db.migrations.loader.MigrationLoader.check_consistent_history(self,connection)
django.db.migrations.loader.MigrationLoader.check_key(self,key,current_app)
django.db.migrations.loader.MigrationLoader.collect_sql(self,plan)
django.db.migrations.loader.MigrationLoader.detect_conflicts(self)
django.db.migrations.loader.MigrationLoader.get_migration(self,app_label,name_prefix)
django.db.migrations.loader.MigrationLoader.get_migration_by_prefix(self,app_label,name_prefix)
django.db.migrations.loader.MigrationLoader.load_disk(self)
django.db.migrations.loader.MigrationLoader.migrations_module(cls,app_label)
django.db.migrations.loader.MigrationLoader.project_state(self,nodes=None,at_end=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/utils.py----------------------------------------
A:django.db.migrations.operations.utils.(app_label, model_name)->model.split('.', 1)
A:django.db.migrations.operations.utils.FieldReference->namedtuple('FieldReference', 'to through')
A:django.db.migrations.operations.utils.to_fields->getattr(field, 'to_fields', None)
A:django.db.migrations.operations.utils.through->getattr(remote_field, 'through', None)
A:django.db.migrations.operations.utils.reference->field_references(state_model_tuple, field, model_tuple, *field_tuple)
django.db.migrations.operations.utils.field_is_referenced(state,model_tuple,field_tuple)
django.db.migrations.operations.utils.field_references(model_tuple,field,reference_model_tuple,reference_field_name=None,reference_field=None)
django.db.migrations.operations.utils.get_references(state,model_tuple,field_tuple=())
django.db.migrations.operations.utils.resolve_relation(model,app_label=None,model_name=None)
django.db.migrations.utils.field_is_referenced(state,model_tuple,field_tuple)
django.db.migrations.utils.field_references(model_tuple,field,reference_model_tuple,reference_field_name=None,reference_field=None)
django.db.migrations.utils.get_references(state,model_tuple,field_tuple=())
django.db.migrations.utils.resolve_relation(model,app_label=None,model_name=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/base.py----------------------------------------
A:django.db.migrations.operations.base.self->object.__new__(cls)
django.db.migrations.base.Operation(cls,*args,**kwargs)
django.db.migrations.base.Operation.__repr__(self)
django.db.migrations.base.Operation.allow_migrate_model(self,connection_alias,model)
django.db.migrations.base.Operation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.base.Operation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.base.Operation.deconstruct(self)
django.db.migrations.base.Operation.describe(self)
django.db.migrations.base.Operation.migration_name_fragment(self)
django.db.migrations.base.Operation.reduce(self,operation,app_label)
django.db.migrations.base.Operation.references_field(self,model_name,name,app_label)
django.db.migrations.base.Operation.references_model(self,name,app_label)
django.db.migrations.base.Operation.state_forwards(self,app_label,state)
django.db.migrations.operations.base.Operation(cls,*args,**kwargs)
django.db.migrations.operations.base.Operation.__new__(cls,*args,**kwargs)
django.db.migrations.operations.base.Operation.__repr__(self)
django.db.migrations.operations.base.Operation.allow_migrate_model(self,connection_alias,model)
django.db.migrations.operations.base.Operation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.base.Operation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.base.Operation.deconstruct(self)
django.db.migrations.operations.base.Operation.describe(self)
django.db.migrations.operations.base.Operation.migration_name_fragment(self)
django.db.migrations.operations.base.Operation.reduce(self,operation,app_label)
django.db.migrations.operations.base.Operation.references_field(self,model_name,name,app_label)
django.db.migrations.operations.base.Operation.references_model(self,name,app_label)
django.db.migrations.operations.base.Operation.state_forwards(self,app_label,state)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/special.py----------------------------------------
A:django.db.migrations.operations.special.to_state->to_state.clone().clone()
A:django.db.migrations.operations.special.elements->len(sql)
A:django.db.migrations.operations.special.statements->schema_editor.connection.ops.prepare_sql_script(sqls)
django.db.migrations.RunPython(self,code,reverse_code=None,atomic=None,hints=None,elidable=False)
django.db.migrations.RunPython.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RunPython.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RunPython.deconstruct(self)
django.db.migrations.RunPython.describe(self)
django.db.migrations.RunPython.noop(apps,schema_editor)
django.db.migrations.RunPython.reversible(self)
django.db.migrations.RunPython.state_forwards(self,app_label,state)
django.db.migrations.RunSQL(self,sql,reverse_sql=None,state_operations=None,hints=None,elidable=False)
django.db.migrations.RunSQL._run_sql(self,schema_editor,sqls)
django.db.migrations.RunSQL.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RunSQL.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RunSQL.deconstruct(self)
django.db.migrations.RunSQL.describe(self)
django.db.migrations.RunSQL.reversible(self)
django.db.migrations.RunSQL.state_forwards(self,app_label,state)
django.db.migrations.SeparateDatabaseAndState(self,database_operations=None,state_operations=None)
django.db.migrations.SeparateDatabaseAndState.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.SeparateDatabaseAndState.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.SeparateDatabaseAndState.deconstruct(self)
django.db.migrations.SeparateDatabaseAndState.describe(self)
django.db.migrations.SeparateDatabaseAndState.state_forwards(self,app_label,state)
django.db.migrations.operations.special.RunPython(self,code,reverse_code=None,atomic=None,hints=None,elidable=False)
django.db.migrations.operations.special.RunPython.__init__(self,code,reverse_code=None,atomic=None,hints=None,elidable=False)
django.db.migrations.operations.special.RunPython.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.RunPython.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.RunPython.deconstruct(self)
django.db.migrations.operations.special.RunPython.describe(self)
django.db.migrations.operations.special.RunPython.noop(apps,schema_editor)
django.db.migrations.operations.special.RunPython.reversible(self)
django.db.migrations.operations.special.RunPython.state_forwards(self,app_label,state)
django.db.migrations.operations.special.RunSQL(self,sql,reverse_sql=None,state_operations=None,hints=None,elidable=False)
django.db.migrations.operations.special.RunSQL.__init__(self,sql,reverse_sql=None,state_operations=None,hints=None,elidable=False)
django.db.migrations.operations.special.RunSQL._run_sql(self,schema_editor,sqls)
django.db.migrations.operations.special.RunSQL.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.RunSQL.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.RunSQL.deconstruct(self)
django.db.migrations.operations.special.RunSQL.describe(self)
django.db.migrations.operations.special.RunSQL.reversible(self)
django.db.migrations.operations.special.RunSQL.state_forwards(self,app_label,state)
django.db.migrations.operations.special.SeparateDatabaseAndState(self,database_operations=None,state_operations=None)
django.db.migrations.operations.special.SeparateDatabaseAndState.__init__(self,database_operations=None,state_operations=None)
django.db.migrations.operations.special.SeparateDatabaseAndState.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.SeparateDatabaseAndState.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.special.SeparateDatabaseAndState.deconstruct(self)
django.db.migrations.operations.special.SeparateDatabaseAndState.describe(self)
django.db.migrations.operations.special.SeparateDatabaseAndState.state_forwards(self,app_label,state)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/models.py----------------------------------------
A:django.db.migrations.operations.models.used_vals->set()
A:django.db.migrations.operations.models.model->to_state.apps.get_model(app_label, self.model_name)
A:django.db.migrations.operations.models.name_lower->name.lower()
A:django.db.migrations.operations.models.options->self.options.copy()
A:django.db.migrations.operations.models.option->self.options.copy().get(option_name)
A:django.db.migrations.operations.models.order_with_respect_to->self.options.copy().get('order_with_respect_to')
A:django.db.migrations.operations.models.renamed_model->state.models[app_label, self.old_name_lower].clone()
A:django.db.migrations.operations.models.to_reload->set()
A:django.db.migrations.operations.models.changed_field->to_model._meta.get_field('_order').clone()
A:django.db.migrations.operations.models.new_model->to_state.apps.get_model(app_label, self.name)
A:django.db.migrations.operations.models.old_model->from_state.apps.get_model(app_label, self.name)
A:django.db.migrations.operations.models.to_field->to_state.apps.get_model(*related_key)._meta.get_field(related_object.field.name)
A:django.db.migrations.operations.models.fields->zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)
A:django.db.migrations.operations.models.option_value->set(normalize_together(option_value))
A:django.db.migrations.operations.models.alter_together->getattr(schema_editor, 'alter_%s' % self.option_name)
A:django.db.migrations.operations.models.to_model->to_state.apps.get_model(app_label, self.name)
A:django.db.migrations.operations.models.from_model->from_state.apps.get_model(app_label, self.name)
A:django.db.migrations.operations.models.field->to_state.apps.get_model(app_label, self.name)._meta.get_field('_order')
A:django.db.migrations.operations.models.model_state.managers->list(self.managers)
A:django.db.migrations.operations.models.index->to_model_state.get_index_by_name(self.name)
A:django.db.migrations.operations.models.constraint->to_model_state.get_constraint_by_name(self.name)
django.db.migrations.AddConstraint(self,model_name,constraint)
django.db.migrations.AddConstraint.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddConstraint.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddConstraint.deconstruct(self)
django.db.migrations.AddConstraint.describe(self)
django.db.migrations.AddConstraint.migration_name_fragment(self)
django.db.migrations.AddConstraint.state_forwards(self,app_label,state)
django.db.migrations.AddIndex(self,model_name,index)
django.db.migrations.AddIndex.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddIndex.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddIndex.deconstruct(self)
django.db.migrations.AddIndex.describe(self)
django.db.migrations.AddIndex.migration_name_fragment(self)
django.db.migrations.AddIndex.state_forwards(self,app_label,state)
django.db.migrations.AlterIndexTogether(self,name,index_together)
django.db.migrations.AlterModelManagers(self,name,managers)
django.db.migrations.AlterModelManagers.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelManagers.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelManagers.deconstruct(self)
django.db.migrations.AlterModelManagers.describe(self)
django.db.migrations.AlterModelManagers.migration_name_fragment(self)
django.db.migrations.AlterModelManagers.state_forwards(self,app_label,state)
django.db.migrations.AlterModelOptions(self,name,options)
django.db.migrations.AlterModelOptions.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelOptions.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelOptions.deconstruct(self)
django.db.migrations.AlterModelOptions.describe(self)
django.db.migrations.AlterModelOptions.migration_name_fragment(self)
django.db.migrations.AlterModelOptions.state_forwards(self,app_label,state)
django.db.migrations.AlterModelTable(self,name,table)
django.db.migrations.AlterModelTable.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelTable.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterModelTable.deconstruct(self)
django.db.migrations.AlterModelTable.describe(self)
django.db.migrations.AlterModelTable.migration_name_fragment(self)
django.db.migrations.AlterModelTable.state_forwards(self,app_label,state)
django.db.migrations.AlterOrderWithRespectTo(self,name,order_with_respect_to)
django.db.migrations.AlterOrderWithRespectTo.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterOrderWithRespectTo.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterOrderWithRespectTo.deconstruct(self)
django.db.migrations.AlterOrderWithRespectTo.describe(self)
django.db.migrations.AlterOrderWithRespectTo.migration_name_fragment(self)
django.db.migrations.AlterOrderWithRespectTo.references_field(self,model_name,name,app_label)
django.db.migrations.AlterOrderWithRespectTo.state_forwards(self,app_label,state)
django.db.migrations.AlterUniqueTogether(self,name,unique_together)
django.db.migrations.CreateModel(self,name,fields,options=None,bases=None,managers=None)
django.db.migrations.CreateModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.CreateModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.CreateModel.deconstruct(self)
django.db.migrations.CreateModel.describe(self)
django.db.migrations.CreateModel.migration_name_fragment(self)
django.db.migrations.CreateModel.reduce(self,operation,app_label)
django.db.migrations.CreateModel.references_model(self,name,app_label)
django.db.migrations.CreateModel.state_forwards(self,app_label,state)
django.db.migrations.DeleteModel(ModelOperation)
django.db.migrations.DeleteModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.DeleteModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.DeleteModel.deconstruct(self)
django.db.migrations.DeleteModel.describe(self)
django.db.migrations.DeleteModel.migration_name_fragment(self)
django.db.migrations.DeleteModel.references_model(self,name,app_label)
django.db.migrations.DeleteModel.state_forwards(self,app_label,state)
django.db.migrations.RemoveConstraint(self,model_name,name)
django.db.migrations.RemoveConstraint.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveConstraint.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveConstraint.deconstruct(self)
django.db.migrations.RemoveConstraint.describe(self)
django.db.migrations.RemoveConstraint.migration_name_fragment(self)
django.db.migrations.RemoveConstraint.state_forwards(self,app_label,state)
django.db.migrations.RemoveIndex(self,model_name,name)
django.db.migrations.RemoveIndex.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveIndex.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveIndex.deconstruct(self)
django.db.migrations.RemoveIndex.describe(self)
django.db.migrations.RemoveIndex.migration_name_fragment(self)
django.db.migrations.RemoveIndex.state_forwards(self,app_label,state)
django.db.migrations.RenameModel(self,old_name,new_name)
django.db.migrations.RenameModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RenameModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RenameModel.deconstruct(self)
django.db.migrations.RenameModel.describe(self)
django.db.migrations.RenameModel.migration_name_fragment(self)
django.db.migrations.RenameModel.new_name_lower(self)
django.db.migrations.RenameModel.old_name_lower(self)
django.db.migrations.RenameModel.reduce(self,operation,app_label)
django.db.migrations.RenameModel.references_model(self,name,app_label)
django.db.migrations.RenameModel.state_forwards(self,app_label,state)
django.db.migrations.models.AlterTogetherOptionOperation(self,name,option_value)
django.db.migrations.models.AlterTogetherOptionOperation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.models.AlterTogetherOptionOperation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.models.AlterTogetherOptionOperation.deconstruct(self)
django.db.migrations.models.AlterTogetherOptionOperation.describe(self)
django.db.migrations.models.AlterTogetherOptionOperation.migration_name_fragment(self)
django.db.migrations.models.AlterTogetherOptionOperation.option_value(self)
django.db.migrations.models.AlterTogetherOptionOperation.references_field(self,model_name,name,app_label)
django.db.migrations.models.AlterTogetherOptionOperation.state_forwards(self,app_label,state)
django.db.migrations.models.IndexOperation(Operation)
django.db.migrations.models.IndexOperation.model_name_lower(self)
django.db.migrations.models.ModelOperation(self,name)
django.db.migrations.models.ModelOperation.name_lower(self)
django.db.migrations.models.ModelOperation.reduce(self,operation,app_label)
django.db.migrations.models.ModelOperation.references_model(self,name,app_label)
django.db.migrations.models.ModelOptionOperation(ModelOperation)
django.db.migrations.models.ModelOptionOperation.reduce(self,operation,app_label)
django.db.migrations.models._check_for_duplicates(arg_name,objs)
django.db.migrations.operations.models.AddConstraint(self,model_name,constraint)
django.db.migrations.operations.models.AddConstraint.__init__(self,model_name,constraint)
django.db.migrations.operations.models.AddConstraint.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AddConstraint.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AddConstraint.deconstruct(self)
django.db.migrations.operations.models.AddConstraint.describe(self)
django.db.migrations.operations.models.AddConstraint.migration_name_fragment(self)
django.db.migrations.operations.models.AddConstraint.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AddIndex(self,model_name,index)
django.db.migrations.operations.models.AddIndex.__init__(self,model_name,index)
django.db.migrations.operations.models.AddIndex.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AddIndex.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AddIndex.deconstruct(self)
django.db.migrations.operations.models.AddIndex.describe(self)
django.db.migrations.operations.models.AddIndex.migration_name_fragment(self)
django.db.migrations.operations.models.AddIndex.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterIndexTogether(self,name,index_together)
django.db.migrations.operations.models.AlterIndexTogether.__init__(self,name,index_together)
django.db.migrations.operations.models.AlterModelManagers(self,name,managers)
django.db.migrations.operations.models.AlterModelManagers.__init__(self,name,managers)
django.db.migrations.operations.models.AlterModelManagers.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelManagers.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelManagers.deconstruct(self)
django.db.migrations.operations.models.AlterModelManagers.describe(self)
django.db.migrations.operations.models.AlterModelManagers.migration_name_fragment(self)
django.db.migrations.operations.models.AlterModelManagers.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterModelOptions(self,name,options)
django.db.migrations.operations.models.AlterModelOptions.__init__(self,name,options)
django.db.migrations.operations.models.AlterModelOptions.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelOptions.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelOptions.deconstruct(self)
django.db.migrations.operations.models.AlterModelOptions.describe(self)
django.db.migrations.operations.models.AlterModelOptions.migration_name_fragment(self)
django.db.migrations.operations.models.AlterModelOptions.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterModelTable(self,name,table)
django.db.migrations.operations.models.AlterModelTable.__init__(self,name,table)
django.db.migrations.operations.models.AlterModelTable.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelTable.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterModelTable.deconstruct(self)
django.db.migrations.operations.models.AlterModelTable.describe(self)
django.db.migrations.operations.models.AlterModelTable.migration_name_fragment(self)
django.db.migrations.operations.models.AlterModelTable.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterOrderWithRespectTo(self,name,order_with_respect_to)
django.db.migrations.operations.models.AlterOrderWithRespectTo.__init__(self,name,order_with_respect_to)
django.db.migrations.operations.models.AlterOrderWithRespectTo.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterOrderWithRespectTo.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterOrderWithRespectTo.deconstruct(self)
django.db.migrations.operations.models.AlterOrderWithRespectTo.describe(self)
django.db.migrations.operations.models.AlterOrderWithRespectTo.migration_name_fragment(self)
django.db.migrations.operations.models.AlterOrderWithRespectTo.references_field(self,model_name,name,app_label)
django.db.migrations.operations.models.AlterOrderWithRespectTo.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterTogetherOptionOperation(self,name,option_value)
django.db.migrations.operations.models.AlterTogetherOptionOperation.__init__(self,name,option_value)
django.db.migrations.operations.models.AlterTogetherOptionOperation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterTogetherOptionOperation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.AlterTogetherOptionOperation.deconstruct(self)
django.db.migrations.operations.models.AlterTogetherOptionOperation.describe(self)
django.db.migrations.operations.models.AlterTogetherOptionOperation.migration_name_fragment(self)
django.db.migrations.operations.models.AlterTogetherOptionOperation.option_value(self)
django.db.migrations.operations.models.AlterTogetherOptionOperation.references_field(self,model_name,name,app_label)
django.db.migrations.operations.models.AlterTogetherOptionOperation.state_forwards(self,app_label,state)
django.db.migrations.operations.models.AlterUniqueTogether(self,name,unique_together)
django.db.migrations.operations.models.AlterUniqueTogether.__init__(self,name,unique_together)
django.db.migrations.operations.models.CreateModel(self,name,fields,options=None,bases=None,managers=None)
django.db.migrations.operations.models.CreateModel.__init__(self,name,fields,options=None,bases=None,managers=None)
django.db.migrations.operations.models.CreateModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.CreateModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.CreateModel.deconstruct(self)
django.db.migrations.operations.models.CreateModel.describe(self)
django.db.migrations.operations.models.CreateModel.migration_name_fragment(self)
django.db.migrations.operations.models.CreateModel.reduce(self,operation,app_label)
django.db.migrations.operations.models.CreateModel.references_model(self,name,app_label)
django.db.migrations.operations.models.CreateModel.state_forwards(self,app_label,state)
django.db.migrations.operations.models.DeleteModel(ModelOperation)
django.db.migrations.operations.models.DeleteModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.DeleteModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.DeleteModel.deconstruct(self)
django.db.migrations.operations.models.DeleteModel.describe(self)
django.db.migrations.operations.models.DeleteModel.migration_name_fragment(self)
django.db.migrations.operations.models.DeleteModel.references_model(self,name,app_label)
django.db.migrations.operations.models.DeleteModel.state_forwards(self,app_label,state)
django.db.migrations.operations.models.IndexOperation(Operation)
django.db.migrations.operations.models.IndexOperation.model_name_lower(self)
django.db.migrations.operations.models.ModelOperation(self,name)
django.db.migrations.operations.models.ModelOperation.__init__(self,name)
django.db.migrations.operations.models.ModelOperation.name_lower(self)
django.db.migrations.operations.models.ModelOperation.reduce(self,operation,app_label)
django.db.migrations.operations.models.ModelOperation.references_model(self,name,app_label)
django.db.migrations.operations.models.ModelOptionOperation(ModelOperation)
django.db.migrations.operations.models.ModelOptionOperation.reduce(self,operation,app_label)
django.db.migrations.operations.models.RemoveConstraint(self,model_name,name)
django.db.migrations.operations.models.RemoveConstraint.__init__(self,model_name,name)
django.db.migrations.operations.models.RemoveConstraint.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RemoveConstraint.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RemoveConstraint.deconstruct(self)
django.db.migrations.operations.models.RemoveConstraint.describe(self)
django.db.migrations.operations.models.RemoveConstraint.migration_name_fragment(self)
django.db.migrations.operations.models.RemoveConstraint.state_forwards(self,app_label,state)
django.db.migrations.operations.models.RemoveIndex(self,model_name,name)
django.db.migrations.operations.models.RemoveIndex.__init__(self,model_name,name)
django.db.migrations.operations.models.RemoveIndex.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RemoveIndex.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RemoveIndex.deconstruct(self)
django.db.migrations.operations.models.RemoveIndex.describe(self)
django.db.migrations.operations.models.RemoveIndex.migration_name_fragment(self)
django.db.migrations.operations.models.RemoveIndex.state_forwards(self,app_label,state)
django.db.migrations.operations.models.RenameModel(self,old_name,new_name)
django.db.migrations.operations.models.RenameModel.__init__(self,old_name,new_name)
django.db.migrations.operations.models.RenameModel.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RenameModel.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.models.RenameModel.deconstruct(self)
django.db.migrations.operations.models.RenameModel.describe(self)
django.db.migrations.operations.models.RenameModel.migration_name_fragment(self)
django.db.migrations.operations.models.RenameModel.new_name_lower(self)
django.db.migrations.operations.models.RenameModel.old_name_lower(self)
django.db.migrations.operations.models.RenameModel.reduce(self,operation,app_label)
django.db.migrations.operations.models.RenameModel.references_model(self,name,app_label)
django.db.migrations.operations.models.RenameModel.state_forwards(self,app_label,state)
django.db.migrations.operations.models._check_for_duplicates(arg_name,objs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/migrations/operations/fields.py----------------------------------------
A:django.db.migrations.operations.fields.name_lower->name.lower()
A:django.db.migrations.operations.fields.model_name_lower->model_name.lower()
A:django.db.migrations.operations.fields.field->self.field.clone()
A:django.db.migrations.operations.fields.to_model->to_state.apps.get_model(app_label, self.model_name)
A:django.db.migrations.operations.fields.from_model->from_state.apps.get_model(app_label, self.model_name)
A:django.db.migrations.operations.fields.old_field->model_state.fields.pop(self.name)
A:django.db.migrations.operations.fields.from_field->from_state.apps.get_model(app_label, self.model_name)._meta.get_field(self.name)
A:django.db.migrations.operations.fields.to_field->to_state.apps.get_model(app_label, self.model_name)._meta.get_field(self.name)
A:django.db.migrations.operations.fields.found->fields.pop(self.old_name)
A:django.db.migrations.operations.fields.from_fields->getattr(field, 'from_fields', None)
A:django.db.migrations.operations.fields.field.from_fields->tuple([self.new_name if from_field_name == self.old_name else from_field_name for from_field_name in from_fields])
A:django.db.migrations.operations.fields.references->get_references(state, (app_label, self.model_name_lower), (self.old_name, found))
A:django.db.migrations.operations.fields.field.to_fields->tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields])
django.db.migrations.AddField(self,model_name,name,field,preserve_default=True)
django.db.migrations.AddField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AddField.deconstruct(self)
django.db.migrations.AddField.describe(self)
django.db.migrations.AddField.migration_name_fragment(self)
django.db.migrations.AddField.reduce(self,operation,app_label)
django.db.migrations.AddField.state_forwards(self,app_label,state)
django.db.migrations.AlterField(self,model_name,name,field,preserve_default=True)
django.db.migrations.AlterField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.AlterField.deconstruct(self)
django.db.migrations.AlterField.describe(self)
django.db.migrations.AlterField.migration_name_fragment(self)
django.db.migrations.AlterField.reduce(self,operation,app_label)
django.db.migrations.AlterField.state_forwards(self,app_label,state)
django.db.migrations.RemoveField(FieldOperation)
django.db.migrations.RemoveField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RemoveField.deconstruct(self)
django.db.migrations.RemoveField.describe(self)
django.db.migrations.RemoveField.migration_name_fragment(self)
django.db.migrations.RemoveField.reduce(self,operation,app_label)
django.db.migrations.RemoveField.state_forwards(self,app_label,state)
django.db.migrations.RenameField(self,model_name,old_name,new_name)
django.db.migrations.RenameField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RenameField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.RenameField.deconstruct(self)
django.db.migrations.RenameField.describe(self)
django.db.migrations.RenameField.migration_name_fragment(self)
django.db.migrations.RenameField.new_name_lower(self)
django.db.migrations.RenameField.old_name_lower(self)
django.db.migrations.RenameField.reduce(self,operation,app_label)
django.db.migrations.RenameField.references_field(self,model_name,name,app_label)
django.db.migrations.RenameField.state_forwards(self,app_label,state)
django.db.migrations.fields.FieldOperation(self,model_name,name,field=None)
django.db.migrations.fields.FieldOperation.is_same_field_operation(self,operation)
django.db.migrations.fields.FieldOperation.is_same_model_operation(self,operation)
django.db.migrations.fields.FieldOperation.model_name_lower(self)
django.db.migrations.fields.FieldOperation.name_lower(self)
django.db.migrations.fields.FieldOperation.reduce(self,operation,app_label)
django.db.migrations.fields.FieldOperation.references_field(self,model_name,name,app_label)
django.db.migrations.fields.FieldOperation.references_model(self,name,app_label)
django.db.migrations.operations.fields.AddField(self,model_name,name,field,preserve_default=True)
django.db.migrations.operations.fields.AddField.__init__(self,model_name,name,field,preserve_default=True)
django.db.migrations.operations.fields.AddField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.AddField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.AddField.deconstruct(self)
django.db.migrations.operations.fields.AddField.describe(self)
django.db.migrations.operations.fields.AddField.migration_name_fragment(self)
django.db.migrations.operations.fields.AddField.reduce(self,operation,app_label)
django.db.migrations.operations.fields.AddField.state_forwards(self,app_label,state)
django.db.migrations.operations.fields.AlterField(self,model_name,name,field,preserve_default=True)
django.db.migrations.operations.fields.AlterField.__init__(self,model_name,name,field,preserve_default=True)
django.db.migrations.operations.fields.AlterField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.AlterField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.AlterField.deconstruct(self)
django.db.migrations.operations.fields.AlterField.describe(self)
django.db.migrations.operations.fields.AlterField.migration_name_fragment(self)
django.db.migrations.operations.fields.AlterField.reduce(self,operation,app_label)
django.db.migrations.operations.fields.AlterField.state_forwards(self,app_label,state)
django.db.migrations.operations.fields.FieldOperation(self,model_name,name,field=None)
django.db.migrations.operations.fields.FieldOperation.__init__(self,model_name,name,field=None)
django.db.migrations.operations.fields.FieldOperation.is_same_field_operation(self,operation)
django.db.migrations.operations.fields.FieldOperation.is_same_model_operation(self,operation)
django.db.migrations.operations.fields.FieldOperation.model_name_lower(self)
django.db.migrations.operations.fields.FieldOperation.name_lower(self)
django.db.migrations.operations.fields.FieldOperation.reduce(self,operation,app_label)
django.db.migrations.operations.fields.FieldOperation.references_field(self,model_name,name,app_label)
django.db.migrations.operations.fields.FieldOperation.references_model(self,name,app_label)
django.db.migrations.operations.fields.RemoveField(FieldOperation)
django.db.migrations.operations.fields.RemoveField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.RemoveField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.RemoveField.deconstruct(self)
django.db.migrations.operations.fields.RemoveField.describe(self)
django.db.migrations.operations.fields.RemoveField.migration_name_fragment(self)
django.db.migrations.operations.fields.RemoveField.reduce(self,operation,app_label)
django.db.migrations.operations.fields.RemoveField.state_forwards(self,app_label,state)
django.db.migrations.operations.fields.RenameField(self,model_name,old_name,new_name)
django.db.migrations.operations.fields.RenameField.__init__(self,model_name,old_name,new_name)
django.db.migrations.operations.fields.RenameField.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.RenameField.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.db.migrations.operations.fields.RenameField.deconstruct(self)
django.db.migrations.operations.fields.RenameField.describe(self)
django.db.migrations.operations.fields.RenameField.migration_name_fragment(self)
django.db.migrations.operations.fields.RenameField.new_name_lower(self)
django.db.migrations.operations.fields.RenameField.old_name_lower(self)
django.db.migrations.operations.fields.RenameField.reduce(self,operation,app_label)
django.db.migrations.operations.fields.RenameField.references_field(self,model_name,name,app_label)
django.db.migrations.operations.fields.RenameField.state_forwards(self,app_label,state)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/deletion.py----------------------------------------
A:django.db.models.deletion.self.data->defaultdict(set)
A:django.db.models.deletion.self.field_updates->defaultdict(partial(defaultdict, set))
A:django.db.models.deletion.self.restricted_objects->defaultdict(partial(defaultdict, set))
A:django.db.models.deletion.self.dependencies->defaultdict(set)
A:django.db.models.deletion.objs->set(qs.filter(pk__in=[obj.pk for objs in self.restricted_objects[model].values() for obj in objs]))
A:django.db.models.deletion.conn_batch_size->max(connections[self.using].ops.bulk_batch_size(field_names, objs), 1)
A:django.db.models.deletion.new_objs->self.add(objs, source, nullable, reverse_dependency=reverse_dependency)
A:django.db.models.deletion.parents->set(model._meta.get_parent_list())
A:django.db.models.deletion.model_fast_deletes->defaultdict(list)
A:django.db.models.deletion.protected_objects->defaultdict(list)
A:django.db.models.deletion.batches->self.get_del_batches(new_objs, related_fields)
A:django.db.models.deletion.sub_objs->field.bulk_related_objects(new_objs, self.using)
A:django.db.models.deletion.referenced_fields->set(chain.from_iterable(((rf.attname for rf in rel.field.foreign_related_fields) for rel in get_candidate_relations_to_delete(related_model._meta))))
A:django.db.models.deletion.restricted_objects->defaultdict(list)
A:django.db.models.deletion.predicate->reduce(operator.or_, (query_utils.Q(**{'%s__in' % related_field.name: objs}) for related_field in related_fields))
A:django.db.models.deletion.concrete_models->set()
A:django.db.models.deletion.models->list(self.data)
A:django.db.models.deletion.dependencies->self.dependencies.get(model._meta.concrete_model)
A:django.db.models.deletion.self.data[model]->sorted(instances, key=attrgetter('pk'))
A:django.db.models.deletion.deleted_counter->Counter()
A:django.db.models.deletion.count->django.db.models.sql.DeleteQuery(model).delete_batch(pk_list, self.using)
A:django.db.models.deletion.query->django.db.models.sql.DeleteQuery(model)
django.db.models.CASCADE(collector,field,sub_objs,using)
django.db.models.DO_NOTHING(collector,field,sub_objs,using)
django.db.models.PROTECT(collector,field,sub_objs,using)
django.db.models.ProtectedError(self,msg,protected_objects)
django.db.models.RESTRICT(collector,field,sub_objs,using)
django.db.models.RestrictedError(self,msg,restricted_objects)
django.db.models.SET(value)
django.db.models.SET_DEFAULT(collector,field,sub_objs,using)
django.db.models.SET_NULL(collector,field,sub_objs,using)
django.db.models.deletion.CASCADE(collector,field,sub_objs,using)
django.db.models.deletion.Collector(self,using)
django.db.models.deletion.Collector.__init__(self,using)
django.db.models.deletion.Collector._has_signal_listeners(self,model)
django.db.models.deletion.Collector.add(self,objs,source=None,nullable=False,reverse_dependency=False)
django.db.models.deletion.Collector.add_dependency(self,model,dependency,reverse_dependency=False)
django.db.models.deletion.Collector.add_field_update(self,field,value,objs)
django.db.models.deletion.Collector.add_restricted_objects(self,field,objs)
django.db.models.deletion.Collector.can_fast_delete(self,objs,from_field=None)
django.db.models.deletion.Collector.clear_restricted_objects_from_queryset(self,model,qs)
django.db.models.deletion.Collector.clear_restricted_objects_from_set(self,model,objs)
django.db.models.deletion.Collector.collect(self,objs,source=None,nullable=False,collect_related=True,source_attr=None,reverse_dependency=False,keep_parents=False,fail_on_restricted=True)
django.db.models.deletion.Collector.delete(self)
django.db.models.deletion.Collector.get_del_batches(self,objs,fields)
django.db.models.deletion.Collector.instances_with_model(self)
django.db.models.deletion.Collector.related_objects(self,related_model,related_fields,objs)
django.db.models.deletion.Collector.sort(self)
django.db.models.deletion.DO_NOTHING(collector,field,sub_objs,using)
django.db.models.deletion.PROTECT(collector,field,sub_objs,using)
django.db.models.deletion.ProtectedError(self,msg,protected_objects)
django.db.models.deletion.ProtectedError.__init__(self,msg,protected_objects)
django.db.models.deletion.RESTRICT(collector,field,sub_objs,using)
django.db.models.deletion.RestrictedError(self,msg,restricted_objects)
django.db.models.deletion.RestrictedError.__init__(self,msg,restricted_objects)
django.db.models.deletion.SET(value)
django.db.models.deletion.SET_DEFAULT(collector,field,sub_objs,using)
django.db.models.deletion.SET_NULL(collector,field,sub_objs,using)
django.db.models.deletion.get_candidate_relations_to_delete(opts)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/enums.py----------------------------------------
A:django.db.models.enums.value->tuple(value)
A:django.db.models.enums.label->key.replace('_', ' ').title()
A:django.db.models.enums.cls->super().__new__(metacls, classname, bases, classdict, **kwds)
A:django.db.models.enums.cls._value2label_map_->dict(zip(cls._value2member_map_, labels))
A:django.db.models.enums.cls.label->property(lambda self: cls._value2label_map_.get(self.value))
django.db.models.Choices(enum.Enum,metaclass=ChoicesMeta)
django.db.models.Choices.__str__(self)
django.db.models.ChoicesMeta(metacls,classname,bases,classdict,**kwds)
django.db.models.ChoicesMeta.__contains__(cls,member)
django.db.models.ChoicesMeta.choices(cls)
django.db.models.ChoicesMeta.labels(cls)
django.db.models.ChoicesMeta.names(cls)
django.db.models.ChoicesMeta.values(cls)
django.db.models.IntegerChoices(int,Choices)
django.db.models.TextChoices(str,Choices)
django.db.models.TextChoices._generate_next_value_(name,start,count,last_values)
django.db.models.enums.Choices(enum.Enum,metaclass=ChoicesMeta)
django.db.models.enums.Choices.__str__(self)
django.db.models.enums.ChoicesMeta(metacls,classname,bases,classdict,**kwds)
django.db.models.enums.ChoicesMeta.__contains__(cls,member)
django.db.models.enums.ChoicesMeta.__new__(metacls,classname,bases,classdict,**kwds)
django.db.models.enums.ChoicesMeta.choices(cls)
django.db.models.enums.ChoicesMeta.labels(cls)
django.db.models.enums.ChoicesMeta.names(cls)
django.db.models.enums.ChoicesMeta.values(cls)
django.db.models.enums.IntegerChoices(int,Choices)
django.db.models.enums.TextChoices(str,Choices)
django.db.models.enums.TextChoices._generate_next_value_(name,start,count,last_values)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/lookups.py----------------------------------------
A:django.db.models.lookups.self.rhs->Replace(self.rhs, Value('-'), Value(''), output_field=CharField())
A:django.db.models.lookups.bilateral_transforms->self.lhs.get_bilateral_transforms()
A:django.db.models.lookups.value->value.resolve_expression(compiler.query).resolve_expression(compiler.query)
A:django.db.models.lookups.(sql, sql_params)->compiler.compile(value)
A:django.db.models.lookups.(_, params)->self.get_db_prep_lookup(rhs, connection)
A:django.db.models.lookups.lhs->lhs.resolve_expression(compiler.query).resolve_expression(compiler.query)
A:django.db.models.lookups.new->copy(self)
A:django.db.models.lookups.new.lhs->copy(self).lhs.relabeled_clone(relabels)
A:django.db.models.lookups.new.rhs->copy(self).rhs.relabeled_clone(relabels)
A:django.db.models.lookups.cols->self.lhs.get_group_by_cols()
A:django.db.models.lookups.expr->Case(When(expr, then=True), default=False)
A:django.db.models.lookups.(lhs_sql, params)->self.process_lhs(compiler, connection, self.lhs.lhs)
A:django.db.models.lookups.field_internal_type->self.lhs.output_field.get_internal_type()
A:django.db.models.lookups.db_type->self.lhs.output_field.db_type(connection=connection)
A:django.db.models.lookups.(rhs_sql, rhs_params)->self.process_rhs(compiler, connection)
A:django.db.models.lookups.rhs_sql->self.get_direct_rhs_sql(connection, rhs_sql)
A:django.db.models.lookups.field->getattr(self.lhs.output_field, 'target_field', None)
A:django.db.models.lookups.rhs_value->self.lhs.output_field.get_prep_value(rhs_value)
A:django.db.models.lookups.param->param.resolve_expression(compiler.query).resolve_expression(compiler.query)
A:django.db.models.lookups.(sql, params)->compiler.compile(self.lhs)
A:django.db.models.lookups.pre_processed->super().batch_process_rhs(compiler, connection, rhs)
A:django.db.models.lookups.params->itertools.chain.from_iterable(params)
A:django.db.models.lookups.(lhs, lhs_params)->self.process_lhs(compiler, connection)
A:django.db.models.lookups.(rhs, rhs_params)->self.process_rhs(compiler, connection)
A:django.db.models.lookups.(rhs, params)->super().process_rhs(qn, connection)
A:django.db.models.lookups.params[0]->connection.ops.prep_for_iexact_query(params[0])
A:django.db.models.lookups.db_rhs->getattr(self.rhs, '_db', None)
A:django.db.models.lookups.rhs->OrderedSet(self.rhs)
A:django.db.models.lookups.(sqls, sqls_params)->self.batch_process_rhs(compiler, connection, rhs)
A:django.db.models.lookups.max_in_list_size->connection.ops.max_in_list_size()
A:django.db.models.lookups.param_group->', '.join(sqls)
A:django.db.models.lookups.pattern->connection.pattern_ops[self.lookup_name].format(connection.pattern_esc)
A:django.db.models.lookups.sql_template->connection.ops.regex_lookup(self.lookup_name)
A:django.db.models.lookups.bounds->connection.ops.year_lookup_bounds_for_date_field(year)
A:django.db.models.lookups.(rhs_sql, _)->self.process_rhs(compiler, connection)
A:django.db.models.lookups.(start, finish)->self.year_lookup_bounds(connection, self.rhs)
django.db.models.Lookup(self,lhs,rhs)
django.db.models.Lookup.__eq__(self,other)
django.db.models.Lookup.__hash__(self)
django.db.models.Lookup.apply_bilateral_transforms(self,value)
django.db.models.Lookup.as_oracle(self,compiler,connection)
django.db.models.Lookup.as_sql(self,compiler,connection)
django.db.models.Lookup.batch_process_rhs(self,compiler,connection,rhs=None)
django.db.models.Lookup.contains_aggregate(self)
django.db.models.Lookup.contains_over_clause(self)
django.db.models.Lookup.get_db_prep_lookup(self,value,connection)
django.db.models.Lookup.get_group_by_cols(self,alias=None)
django.db.models.Lookup.get_prep_lookup(self)
django.db.models.Lookup.get_source_expressions(self)
django.db.models.Lookup.identity(self)
django.db.models.Lookup.is_summary(self)
django.db.models.Lookup.process_lhs(self,compiler,connection,lhs=None)
django.db.models.Lookup.process_rhs(self,compiler,connection)
django.db.models.Lookup.relabeled_clone(self,relabels)
django.db.models.Lookup.rhs_is_direct_value(self)
django.db.models.Lookup.set_source_expressions(self,new_exprs)
django.db.models.Transform(RegisterLookupMixin,Func)
django.db.models.Transform.get_bilateral_transforms(self)
django.db.models.Transform.lhs(self)
django.db.models.lookups.BuiltinLookup(Lookup)
django.db.models.lookups.BuiltinLookup.as_sql(self,compiler,connection)
django.db.models.lookups.BuiltinLookup.get_rhs_op(self,connection,rhs)
django.db.models.lookups.BuiltinLookup.process_lhs(self,compiler,connection,lhs=None)
django.db.models.lookups.Contains(PatternLookup)
django.db.models.lookups.EndsWith(PatternLookup)
django.db.models.lookups.Exact(FieldGetDbPrepValueMixin,BuiltinLookup)
django.db.models.lookups.Exact.as_sql(self,compiler,connection)
django.db.models.lookups.Exact.process_rhs(self,compiler,connection)
django.db.models.lookups.FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin)
django.db.models.lookups.FieldGetDbPrepValueIterableMixin.batch_process_rhs(self,compiler,connection,rhs=None)
django.db.models.lookups.FieldGetDbPrepValueIterableMixin.get_prep_lookup(self)
django.db.models.lookups.FieldGetDbPrepValueIterableMixin.process_rhs(self,compiler,connection)
django.db.models.lookups.FieldGetDbPrepValueIterableMixin.resolve_expression_parameter(self,compiler,connection,sql,param)
django.db.models.lookups.FieldGetDbPrepValueMixin
django.db.models.lookups.FieldGetDbPrepValueMixin.get_db_prep_lookup(self,value,connection)
django.db.models.lookups.GreaterThan(FieldGetDbPrepValueMixin,BuiltinLookup)
django.db.models.lookups.GreaterThanOrEqual(FieldGetDbPrepValueMixin,BuiltinLookup)
django.db.models.lookups.IContains(Contains)
django.db.models.lookups.IEndsWith(EndsWith)
django.db.models.lookups.IExact(BuiltinLookup)
django.db.models.lookups.IExact.process_rhs(self,qn,connection)
django.db.models.lookups.IRegex(Regex)
django.db.models.lookups.IStartsWith(StartsWith)
django.db.models.lookups.In(FieldGetDbPrepValueIterableMixin,BuiltinLookup)
django.db.models.lookups.In.as_sql(self,compiler,connection)
django.db.models.lookups.In.get_rhs_op(self,connection,rhs)
django.db.models.lookups.In.process_rhs(self,compiler,connection)
django.db.models.lookups.In.split_parameter_list_as_sql(self,compiler,connection)
django.db.models.lookups.IntegerFieldFloatRounding
django.db.models.lookups.IntegerFieldFloatRounding.get_prep_lookup(self)
django.db.models.lookups.IntegerGreaterThanOrEqual(IntegerFieldFloatRounding,GreaterThanOrEqual)
django.db.models.lookups.IntegerLessThan(IntegerFieldFloatRounding,LessThan)
django.db.models.lookups.IsNull(BuiltinLookup)
django.db.models.lookups.IsNull.as_sql(self,compiler,connection)
django.db.models.lookups.LessThan(FieldGetDbPrepValueMixin,BuiltinLookup)
django.db.models.lookups.LessThanOrEqual(FieldGetDbPrepValueMixin,BuiltinLookup)
django.db.models.lookups.Lookup(self,lhs,rhs)
django.db.models.lookups.Lookup.__eq__(self,other)
django.db.models.lookups.Lookup.__hash__(self)
django.db.models.lookups.Lookup.__init__(self,lhs,rhs)
django.db.models.lookups.Lookup.apply_bilateral_transforms(self,value)
django.db.models.lookups.Lookup.as_oracle(self,compiler,connection)
django.db.models.lookups.Lookup.as_sql(self,compiler,connection)
django.db.models.lookups.Lookup.batch_process_rhs(self,compiler,connection,rhs=None)
django.db.models.lookups.Lookup.contains_aggregate(self)
django.db.models.lookups.Lookup.contains_over_clause(self)
django.db.models.lookups.Lookup.get_db_prep_lookup(self,value,connection)
django.db.models.lookups.Lookup.get_group_by_cols(self,alias=None)
django.db.models.lookups.Lookup.get_prep_lookup(self)
django.db.models.lookups.Lookup.get_source_expressions(self)
django.db.models.lookups.Lookup.identity(self)
django.db.models.lookups.Lookup.is_summary(self)
django.db.models.lookups.Lookup.process_lhs(self,compiler,connection,lhs=None)
django.db.models.lookups.Lookup.process_rhs(self,compiler,connection)
django.db.models.lookups.Lookup.relabeled_clone(self,relabels)
django.db.models.lookups.Lookup.rhs_is_direct_value(self)
django.db.models.lookups.Lookup.set_source_expressions(self,new_exprs)
django.db.models.lookups.PatternLookup(BuiltinLookup)
django.db.models.lookups.PatternLookup.get_rhs_op(self,connection,rhs)
django.db.models.lookups.PatternLookup.process_rhs(self,qn,connection)
django.db.models.lookups.PostgresOperatorLookup(FieldGetDbPrepValueMixin,Lookup)
django.db.models.lookups.PostgresOperatorLookup.as_postgresql(self,compiler,connection)
django.db.models.lookups.Range(FieldGetDbPrepValueIterableMixin,BuiltinLookup)
django.db.models.lookups.Range.get_rhs_op(self,connection,rhs)
django.db.models.lookups.Regex(BuiltinLookup)
django.db.models.lookups.Regex.as_sql(self,compiler,connection)
django.db.models.lookups.StartsWith(PatternLookup)
django.db.models.lookups.Transform(RegisterLookupMixin,Func)
django.db.models.lookups.Transform.get_bilateral_transforms(self)
django.db.models.lookups.Transform.lhs(self)
django.db.models.lookups.UUIDContains(UUIDTextMixin,Contains)
django.db.models.lookups.UUIDEndsWith(UUIDTextMixin,EndsWith)
django.db.models.lookups.UUIDIContains(UUIDTextMixin,IContains)
django.db.models.lookups.UUIDIEndsWith(UUIDTextMixin,IEndsWith)
django.db.models.lookups.UUIDIExact(UUIDTextMixin,IExact)
django.db.models.lookups.UUIDIStartsWith(UUIDTextMixin,IStartsWith)
django.db.models.lookups.UUIDStartsWith(UUIDTextMixin,StartsWith)
django.db.models.lookups.UUIDTextMixin
django.db.models.lookups.UUIDTextMixin.process_rhs(self,qn,connection)
django.db.models.lookups.YearExact(YearLookup,Exact)
django.db.models.lookups.YearExact.get_bound_params(self,start,finish)
django.db.models.lookups.YearExact.get_direct_rhs_sql(self,connection,rhs)
django.db.models.lookups.YearGt(YearLookup,GreaterThan)
django.db.models.lookups.YearGt.get_bound_params(self,start,finish)
django.db.models.lookups.YearGte(YearLookup,GreaterThanOrEqual)
django.db.models.lookups.YearGte.get_bound_params(self,start,finish)
django.db.models.lookups.YearLookup(Lookup)
django.db.models.lookups.YearLookup.as_sql(self,compiler,connection)
django.db.models.lookups.YearLookup.get_bound_params(self,start,finish)
django.db.models.lookups.YearLookup.get_direct_rhs_sql(self,connection,rhs)
django.db.models.lookups.YearLookup.year_lookup_bounds(self,connection,year)
django.db.models.lookups.YearLt(YearLookup,LessThan)
django.db.models.lookups.YearLt.get_bound_params(self,start,finish)
django.db.models.lookups.YearLte(YearLookup,LessThanOrEqual)
django.db.models.lookups.YearLte.get_bound_params(self,start,finish)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/indexes.py----------------------------------------
A:django.db.models.indexes.self.fields->list(fields)
A:django.db.models.indexes.self.expressions->tuple((F(expression) if isinstance(expression, str) else expression for expression in expressions))
A:django.db.models.indexes.query->Query(model=model, alias_cols=False)
A:django.db.models.indexes.where->Query(model=model, alias_cols=False).build_where(self.condition)
A:django.db.models.indexes.compiler->Query(model=model, alias_cols=False).get_compiler(connection=schema_editor.connection)
A:django.db.models.indexes.(sql, params)->Query(model=model, alias_cols=False).build_where(self.condition).as_sql(compiler, schema_editor.connection)
A:django.db.models.indexes.condition->self._get_condition_sql(model, schema_editor)
A:django.db.models.indexes.index_expression->IndexExpression(expression)
A:django.db.models.indexes.expressions->list(self.flatten())
A:django.db.models.indexes.path->path.replace('django.db.models.indexes', 'django.db.models').replace('django.db.models.indexes', 'django.db.models')
A:django.db.models.indexes.(_, args, kwargs)->self.deconstruct()
A:django.db.models.indexes.(_, table_name)->split_identifier(model._meta.db_table)
A:django.db.models.indexes.self.wrapper_classes->tuple([wrapper_cls for wrapper_cls in self.wrapper_classes if wrapper_cls is not Collate])
A:django.db.models.indexes.(index_expressions, wrappers)->partition(lambda e: isinstance(e, self.wrapper_classes), expressions)
A:django.db.models.indexes.resolve_root_expression->Func(root_expression, template='(%(expressions)s)').resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.indexes.root_expression->Func(root_expression, template='(%(expressions)s)')
A:django.db.models.indexes.wrappers->sorted(wrappers, key=lambda w: self.wrapper_classes.index(type(w)))
django.db.models.Index(self,*expressions,fields=(),name=None,db_tablespace=None,opclasses=(),condition=None,include=None)
django.db.models.Index.__eq__(self,other)
django.db.models.Index.__repr__(self)
django.db.models.Index._get_condition_sql(self,model,schema_editor)
django.db.models.Index.clone(self)
django.db.models.Index.contains_expressions(self)
django.db.models.Index.create_sql(self,model,schema_editor,using='',**kwargs)
django.db.models.Index.deconstruct(self)
django.db.models.Index.remove_sql(self,model,schema_editor,**kwargs)
django.db.models.Index.set_name_with_model(self,model)
django.db.models.IndexExpression(Func)
django.db.models.IndexExpression.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.IndexExpression.register_wrappers(cls,*wrapper_classes)
django.db.models.IndexExpression.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.IndexExpression.set_wrapper_classes(self,connection=None)
django.db.models.indexes.Index(self,*expressions,fields=(),name=None,db_tablespace=None,opclasses=(),condition=None,include=None)
django.db.models.indexes.Index.__eq__(self,other)
django.db.models.indexes.Index.__init__(self,*expressions,fields=(),name=None,db_tablespace=None,opclasses=(),condition=None,include=None)
django.db.models.indexes.Index.__repr__(self)
django.db.models.indexes.Index._get_condition_sql(self,model,schema_editor)
django.db.models.indexes.Index.clone(self)
django.db.models.indexes.Index.contains_expressions(self)
django.db.models.indexes.Index.create_sql(self,model,schema_editor,using='',**kwargs)
django.db.models.indexes.Index.deconstruct(self)
django.db.models.indexes.Index.remove_sql(self,model,schema_editor,**kwargs)
django.db.models.indexes.Index.set_name_with_model(self,model)
django.db.models.indexes.IndexExpression(Func)
django.db.models.indexes.IndexExpression.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.indexes.IndexExpression.register_wrappers(cls,*wrapper_classes)
django.db.models.indexes.IndexExpression.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.indexes.IndexExpression.set_wrapper_classes(self,connection=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/utils.py----------------------------------------
A:django.db.models.utils.(app_label, model_name)->model.split('.')
django.db.models.utils.create_namedtuple_class(*names)
django.db.models.utils.make_model_tuple(model)
django.db.models.utils.resolve_callables(mapping)
django.db.models.utils.unpickle_named_row(names,values)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/aggregates.py----------------------------------------
A:django.db.models.aggregates.source_expressions->self.copy().get_source_expressions()
A:django.db.models.aggregates.c->super().resolve_expression(query, allow_joins, reuse, summarize)
A:django.db.models.aggregates.expressions->self.get_source_expressions()
A:django.db.models.aggregates.(filter_sql, filter_params)->self.filter.as_sql(compiler, connection)
A:django.db.models.aggregates.(sql, params)->super().as_sql(compiler, connection, template=template, filter=filter_sql, **extra_context)
A:django.db.models.aggregates.copy->self.copy()
A:django.db.models.aggregates.condition->When(self.filter, then=source_expressions[0])
A:django.db.models.aggregates.options->super()._get_repr_options()
A:django.db.models.aggregates.output_field->IntegerField()
A:django.db.models.aggregates.expression->Star()
django.db.models.Aggregate(self,*expressions,distinct=False,filter=None,**extra)
django.db.models.Aggregate._get_repr_options(self)
django.db.models.Aggregate.as_sql(self,compiler,connection,**extra_context)
django.db.models.Aggregate.default_alias(self)
django.db.models.Aggregate.get_group_by_cols(self,alias=None)
django.db.models.Aggregate.get_source_expressions(self)
django.db.models.Aggregate.get_source_fields(self)
django.db.models.Aggregate.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.Aggregate.set_source_expressions(self,exprs)
django.db.models.Avg(FixDurationInputMixin,NumericOutputFieldMixin,Aggregate)
django.db.models.Count(self,expression,filter=None,**extra)
django.db.models.Count.convert_value(self,value,expression,connection)
django.db.models.Max(Aggregate)
django.db.models.Min(Aggregate)
django.db.models.StdDev(self,expression,sample=False,**extra)
django.db.models.StdDev._get_repr_options(self)
django.db.models.Sum(FixDurationInputMixin,Aggregate)
django.db.models.Variance(self,expression,sample=False,**extra)
django.db.models.Variance._get_repr_options(self)
django.db.models.aggregates.Aggregate(self,*expressions,distinct=False,filter=None,**extra)
django.db.models.aggregates.Aggregate.__init__(self,*expressions,distinct=False,filter=None,**extra)
django.db.models.aggregates.Aggregate._get_repr_options(self)
django.db.models.aggregates.Aggregate.as_sql(self,compiler,connection,**extra_context)
django.db.models.aggregates.Aggregate.default_alias(self)
django.db.models.aggregates.Aggregate.get_group_by_cols(self,alias=None)
django.db.models.aggregates.Aggregate.get_source_expressions(self)
django.db.models.aggregates.Aggregate.get_source_fields(self)
django.db.models.aggregates.Aggregate.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.aggregates.Aggregate.set_source_expressions(self,exprs)
django.db.models.aggregates.Avg(FixDurationInputMixin,NumericOutputFieldMixin,Aggregate)
django.db.models.aggregates.Count(self,expression,filter=None,**extra)
django.db.models.aggregates.Count.__init__(self,expression,filter=None,**extra)
django.db.models.aggregates.Count.convert_value(self,value,expression,connection)
django.db.models.aggregates.Max(Aggregate)
django.db.models.aggregates.Min(Aggregate)
django.db.models.aggregates.StdDev(self,expression,sample=False,**extra)
django.db.models.aggregates.StdDev.__init__(self,expression,sample=False,**extra)
django.db.models.aggregates.StdDev._get_repr_options(self)
django.db.models.aggregates.Sum(FixDurationInputMixin,Aggregate)
django.db.models.aggregates.Variance(self,expression,sample=False,**extra)
django.db.models.aggregates.Variance.__init__(self,expression,sample=False,**extra)
django.db.models.aggregates.Variance._get_repr_options(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/options.py----------------------------------------
A:django.db.models.options.PROXY_PARENTS->object()
A:django.db.models.options.self.model_name->self.object_name.lower()
A:django.db.models.options.self.verbose_name->camel_case_to_spaces(self.object_name)
A:django.db.models.options.meta_attrs->self.meta.__dict__.copy()
A:django.db.models.options.self.original_attrs[attr_name]->getattr(self, attr_name)
A:django.db.models.options.self.unique_together->normalize_together(self.unique_together)
A:django.db.models.options.self.index_together->normalize_together(self.index_together)
A:django.db.models.options.objs->getattr(self, attr_name, [])
A:django.db.models.options.self.verbose_name_plural->format_lazy('{}s', self.verbose_name)
A:django.db.models.options.self._ordering_clash->bool(self.ordering and self.order_with_respect_to)
A:django.db.models.options.self.db_table->truncate_name(self.db_table, connection.ops.max_name_length())
A:django.db.models.options.obj->obj.clone().clone()
A:django.db.models.options.pk_class_path->getattr(self.app_config, 'default_auto_field', settings.DEFAULT_AUTO_FIELD)
A:django.db.models.options.app_config_class->type(self.app_config)
A:django.db.models.options.pk_class->self._get_default_pk_class()
A:django.db.models.options.self.order_with_respect_to->next((f for f in self._get_fields(reverse=False) if f.name == query or f.attname == query))
A:django.db.models.options.field->next(iter(self.parents.values()))
A:django.db.models.options.auto->pk_class(verbose_name='ID', primary_key=True, auto_created=True)
A:django.db.models.options.swapped_for->getattr(settings, self.swappable, None)
A:django.db.models.options.(swapped_label, swapped_object)->getattr(settings, self.swappable, None).split('.')
A:django.db.models.options.seen_managers->set()
A:django.db.models.options.manager->Manager()
A:django.db.models.options.all_related_fields->self._get_fields(forward=False, reverse=True, include_hidden=True)
A:django.db.models.options.fields->make_immutable_fields_list('get_fields()', fields)
A:django.db.models.options.res->parent._meta.get_base_chain(model)
A:django.db.models.options.result->OrderedSet(self.parents)
A:django.db.models.options.parent_link->parent._meta.get_ancestor_link(ancestor)
A:django.db.models.options.chain->model._meta.get_base_chain(parent)
A:django.db.models.options.link->child._meta.get_ancestor_link(ancestor)
A:django.db.models.options.related_objects_graph->defaultdict(list)
A:django.db.models.options.all_models->self.apps.get_models(include_auto_created=True)
A:django.db.models.options.seen_models->set()
A:django.db.models.options.attr->inspect.getattr_static(self.model, name)
django.db.models.options.Options(self,meta,app_label=None)
django.db.models.options.Options.__init__(self,meta,app_label=None)
django.db.models.options.Options.__repr__(self)
django.db.models.options.Options.__str__(self)
django.db.models.options.Options._expire_cache(self,forward=True,reverse=True)
django.db.models.options.Options._format_names_with_class(self,cls,objs)
django.db.models.options.Options._forward_fields_map(self)
django.db.models.options.Options._get_default_pk_class(self)
django.db.models.options.Options._get_fields(self,forward=True,reverse=True,include_parents=True,include_hidden=False,seen_models=None)
django.db.models.options.Options._populate_directed_relation_graph(self)
django.db.models.options.Options._prepare(self,model)
django.db.models.options.Options._property_names(self)
django.db.models.options.Options._relation_tree(self)
django.db.models.options.Options.add_field(self,field,private=False)
django.db.models.options.Options.add_manager(self,manager)
django.db.models.options.Options.app_config(self)
django.db.models.options.Options.base_manager(self)
django.db.models.options.Options.can_migrate(self,connection)
django.db.models.options.Options.concrete_fields(self)
django.db.models.options.Options.contribute_to_class(self,cls,name)
django.db.models.options.Options.db_returning_fields(self)
django.db.models.options.Options.default_manager(self)
django.db.models.options.Options.fields(self)
django.db.models.options.Options.fields_map(self)
django.db.models.options.Options.get_ancestor_link(self,ancestor)
django.db.models.options.Options.get_base_chain(self,model)
django.db.models.options.Options.get_field(self,field_name)
django.db.models.options.Options.get_fields(self,include_parents=True,include_hidden=False)
django.db.models.options.Options.get_parent_list(self)
django.db.models.options.Options.get_path_from_parent(self,parent)
django.db.models.options.Options.get_path_to_parent(self,parent)
django.db.models.options.Options.installed(self)
django.db.models.options.Options.label(self)
django.db.models.options.Options.label_lower(self)
django.db.models.options.Options.local_concrete_fields(self)
django.db.models.options.Options.managers(self)
django.db.models.options.Options.managers_map(self)
django.db.models.options.Options.many_to_many(self)
django.db.models.options.Options.related_objects(self)
django.db.models.options.Options.setup_pk(self,field)
django.db.models.options.Options.setup_proxy(self,target)
django.db.models.options.Options.swapped(self)
django.db.models.options.Options.total_unique_constraints(self)
django.db.models.options.Options.verbose_name_raw(self)
django.db.models.options.make_immutable_fields_list(name,data)
django.db.models.options.normalize_together(option_together)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/query.py----------------------------------------
A:django.db.models.query.compiler->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db)
A:django.db.models.query.results->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db).execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
A:django.db.models.query.related_populators->get_related_populators(klass_info, select, db)
A:django.db.models.query.obj->self.model_cls.from_db(self.db, self.init_list, obj_data)
A:django.db.models.query.rel_obj_id->rel_getter(obj)
A:django.db.models.query.indexes->range(len(names))
A:django.db.models.query.rowfactory->operator.itemgetter(*[index_map[f] for f in fields])
A:django.db.models.query.tuple_class->create_namedtuple_class(*names)
A:django.db.models.query.manager->getattr(obj, to_attr)
A:django.db.models.query.as_manager->classmethod(as_manager)
A:django.db.models.query.obj.__dict__[k]->copy.deepcopy(v, memo)
A:django.db.models.query.pickled_version->state.get(DJANGO_VERSION_PICKLE_KEY)
A:django.db.models.query.data->list(self[:REPR_OUTPUT_SIZE + 1])
A:django.db.models.query.qs->getattr(obj, to_attr).get_queryset()
A:django.db.models.query.start->int(k.start)
A:django.db.models.query.stop->int(k.stop)
A:django.db.models.query.combined->compiler.apply_converters(query, converters)._chain()
A:django.db.models.query.other->other.model._base_manager.filter(pk__in=other.values('pk')).model._base_manager.filter(pk__in=other.values('pk'))
A:django.db.models.query.query->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db).apply_converters(query, converters)
A:django.db.models.query.clone->self._clone()
A:django.db.models.query.num->len(clone)
A:django.db.models.query.obj.pk->self.model_cls.from_db(self.db, self.init_list, obj_data)._meta.pk.get_pk_value_on_save(obj)
A:django.db.models.query.objs->tuple(objs)
A:django.db.models.query.(objs_with_pk, objs_without_pk)->partition(lambda o: o.pk is None, objs)
A:django.db.models.query.returned_columns->self._batched_insert(objs_without_pk, fields, batch_size, ignore_conflicts=ignore_conflicts)
A:django.db.models.query.max_batch_size->max(ops.bulk_batch_size(fields, objs), 1)
A:django.db.models.query.attr->Value(attr, output_field=field)
A:django.db.models.query.case_statement->Cast(case_statement, output_field=field)
A:django.db.models.query.params->dict(resolve_callables(params))
A:django.db.models.query.(obj, created)->self.select_for_update().get_or_create(defaults, **kwargs)
A:django.db.models.query.order_by->getattr(self.model._meta, 'get_latest_by')
A:django.db.models.query.filter_key->'{}__in'.format(field_name)
A:django.db.models.query.id_list->tuple(id_list)
A:django.db.models.query.del_query->self._chain()
A:django.db.models.query.collector->Collector(using=del_query.db)
A:django.db.models.query.(deleted, _rows_count)->Collector(using=del_query.db).delete()
A:django.db.models.query.cursor->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db).apply_converters(query, converters).get_compiler(using).execute_sql(CURSOR)
A:django.db.models.query.rows->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db).apply_converters(query, converters).get_compiler(self.db).execute_sql(CURSOR)
A:django.db.models.query.field_id_prefix->getattr(field, 'default_alias', field.__class__.__name__.lower())
A:django.db.models.query.tzinfo->django.utils.timezone.get_current_timezone()
A:django.db.models.query.names->set(chain.from_iterable(((field.name, field.attname) if hasattr(field, 'attname') else (field.name,) for field in self.model._meta.get_fields())))
A:django.db.models.query.c->self.__class__(self.raw_query, model=self.model, query=self.query, params=self.params, translations=self.translations, using=self._db, hints=self._hints)
A:django.db.models.query.self._result_cache->list(self.iterator())
A:django.db.models.query.invalid_args->sorted((str(arg) for arg in values if not hasattr(arg, 'resolve_expression')))
A:django.db.models.query.(model_init_names, model_init_pos, annotation_fields)->self.resolve_model_init_order()
A:django.db.models.query.converters->connections[db].ops.compiler('SQLCompiler')(self.query, connections[db], db).get_converters([f.get_col(f.model._meta.db_table) if f else None for f in fields])
A:django.db.models.query.instance->model_cls.from_db(db, model_init_names, model_init_values)
A:django.db.models.query.columns->self.query.get_columns()
A:django.db.models.query.index->self.query.get_columns().index(query_name)
A:django.db.models.query.(name, column)->field.get_attname_column()
A:django.db.models.query.self.prefetch_to->django.db.models.constants.LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])
A:django.db.models.query.obj_dict->self.__dict__.copy()
A:django.db.models.query.obj_dict['queryset']->self.queryset._chain(_result_cache=[], _prefetch_done=True)
A:django.db.models.query.parts->self.prefetch_to.split(LOOKUP_SEP)
A:django.db.models.query.lookup->normalize_prefetch_lookups(reversed(related_lookups)).pop()
A:django.db.models.query.auto_lookups->set()
A:django.db.models.query.followed_descriptors->set()
A:django.db.models.query.all_lookups->normalize_prefetch_lookups(reversed(related_lookups))
A:django.db.models.query.through_attrs->normalize_prefetch_lookups(reversed(related_lookups)).pop().prefetch_through.split(LOOKUP_SEP)
A:django.db.models.query.prefetch_to->normalize_prefetch_lookups(reversed(related_lookups)).pop().get_current_prefetch_to(level)
A:django.db.models.query.(prefetcher, descriptor, attr_found, is_fetched)->get_prefetcher(first_obj, through_attr, to_attr)
A:django.db.models.query.(obj_list, additional_lookups)->prefetch_one_level(obj_to_fetch, prefetcher, lookup, level)
A:django.db.models.query.new_lookups->normalize_prefetch_lookups(reversed(additional_lookups), prefetch_to)
A:django.db.models.query.new_obj->getattr(obj, through_attr)
A:django.db.models.query.rel_obj_descriptor->getattr(instance.__class__, through_attr, None)
A:django.db.models.query.attr_found->hasattr(instance, through_attr)
A:django.db.models.query.rel_obj->getattr(instance, through_attr)
A:django.db.models.query.(rel_qs, rel_obj_attr, instance_attr, single, cache_name, is_descriptor)->prefetcher.get_prefetch_queryset(instances, lookup.get_current_queryset(level))
A:django.db.models.query.all_related_objects->list(rel_qs)
A:django.db.models.query.rel_attr_val->rel_obj_attr(rel_obj)
A:django.db.models.query.(to_attr, as_attr)->normalize_prefetch_lookups(reversed(related_lookups)).pop().get_current_to_attr(level)
A:django.db.models.query.instance_attr_val->instance_attr(obj)
A:django.db.models.query.vals->rel_obj_cache.get(instance_attr_val, [])
A:django.db.models.query.self.reorder_for_init->operator.itemgetter(*[attname_indexes[attname] for attname in self.init_list])
A:django.db.models.query.self.pk_idx->self.init_list.index(self.model_cls._meta.pk.attname)
A:django.db.models.query.self.related_populators->get_related_populators(klass_info, select, self.db)
A:django.db.models.query.obj_data->self.reorder_for_init(row)
A:django.db.models.query.related_klass_infos->klass_info.get('related_klass_infos', [])
A:django.db.models.query.rel_cls->RelatedPopulator(rel_klass_info, select, db)
django.db.models.Prefetch(self,lookup,queryset=None,to_attr=None)
django.db.models.Prefetch.__eq__(self,other)
django.db.models.Prefetch.__getstate__(self)
django.db.models.Prefetch.__hash__(self)
django.db.models.Prefetch.add_prefix(self,prefix)
django.db.models.Prefetch.get_current_prefetch_to(self,level)
django.db.models.Prefetch.get_current_queryset(self,level)
django.db.models.Prefetch.get_current_to_attr(self,level)
django.db.models.QuerySet(self,model=None,query=None,using=None,hints=None)
django.db.models.QuerySet.__and__(self,other)
django.db.models.QuerySet.__bool__(self)
django.db.models.QuerySet.__class_getitem__(cls,*args,**kwargs)
django.db.models.QuerySet.__deepcopy__(self,memo)
django.db.models.QuerySet.__getitem__(self,k)
django.db.models.QuerySet.__getstate__(self)
django.db.models.QuerySet.__iter__(self)
django.db.models.QuerySet.__len__(self)
django.db.models.QuerySet.__or__(self,other)
django.db.models.QuerySet.__repr__(self)
django.db.models.QuerySet.__setstate__(self,state)
django.db.models.QuerySet._add_hints(self,**hints)
django.db.models.QuerySet._annotate(self,args,kwargs,select=True)
django.db.models.QuerySet._batched_insert(self,objs,fields,batch_size,ignore_conflicts=False)
django.db.models.QuerySet._chain(self,**kwargs)
django.db.models.QuerySet._clone(self)
django.db.models.QuerySet._combinator_query(self,combinator,*other_qs,all=False)
django.db.models.QuerySet._earliest(self,*fields)
django.db.models.QuerySet._extract_model_params(self,defaults,**kwargs)
django.db.models.QuerySet._fetch_all(self)
django.db.models.QuerySet._filter_or_exclude(self,negate,args,kwargs)
django.db.models.QuerySet._filter_or_exclude_inplace(self,negate,args,kwargs)
django.db.models.QuerySet._has_filters(self)
django.db.models.QuerySet._insert(self,objs,fields,returning_fields=None,raw=False,using=None,ignore_conflicts=False)
django.db.models.QuerySet._iterator(self,use_chunked_fetch,chunk_size)
django.db.models.QuerySet._merge_known_related_objects(self,other)
django.db.models.QuerySet._merge_sanity_check(self,other)
django.db.models.QuerySet._next_is_sticky(self)
django.db.models.QuerySet._not_support_combined_queries(self,operation_name)
django.db.models.QuerySet._prefetch_related_objects(self)
django.db.models.QuerySet._prepare_for_bulk_create(self,objs)
django.db.models.QuerySet._raw_delete(self,using)
django.db.models.QuerySet._update(self,values)
django.db.models.QuerySet._validate_values_are_expressions(values,method_name)
django.db.models.QuerySet._values(self,*fields,**expressions)
django.db.models.QuerySet.aggregate(self,*args,**kwargs)
django.db.models.QuerySet.alias(self,*args,**kwargs)
django.db.models.QuerySet.all(self)
django.db.models.QuerySet.annotate(self,*args,**kwargs)
django.db.models.QuerySet.as_manager(cls)
django.db.models.QuerySet.bulk_create(self,objs,batch_size=None,ignore_conflicts=False)
django.db.models.QuerySet.bulk_update(self,objs,fields,batch_size=None)
django.db.models.QuerySet.complex_filter(self,filter_obj)
django.db.models.QuerySet.count(self)
django.db.models.QuerySet.create(self,**kwargs)
django.db.models.QuerySet.dates(self,field_name,kind,order='ASC')
django.db.models.QuerySet.datetimes(self,field_name,kind,order='ASC',tzinfo=None,is_dst=None)
django.db.models.QuerySet.db(self)
django.db.models.QuerySet.defer(self,*fields)
django.db.models.QuerySet.delete(self)
django.db.models.QuerySet.difference(self,*other_qs)
django.db.models.QuerySet.distinct(self,*field_names)
django.db.models.QuerySet.earliest(self,*fields)
django.db.models.QuerySet.exclude(self,*args,**kwargs)
django.db.models.QuerySet.exists(self)
django.db.models.QuerySet.explain(self,*,format=None,**options)
django.db.models.QuerySet.extra(self,select=None,where=None,params=None,tables=None,order_by=None,select_params=None)
django.db.models.QuerySet.filter(self,*args,**kwargs)
django.db.models.QuerySet.first(self)
django.db.models.QuerySet.get(self,*args,**kwargs)
django.db.models.QuerySet.get_or_create(self,defaults=None,**kwargs)
django.db.models.QuerySet.in_bulk(self,id_list=None,*,field_name='pk')
django.db.models.QuerySet.intersection(self,*other_qs)
django.db.models.QuerySet.iterator(self,chunk_size=2000)
django.db.models.QuerySet.last(self)
django.db.models.QuerySet.latest(self,*fields)
django.db.models.QuerySet.none(self)
django.db.models.QuerySet.only(self,*fields)
django.db.models.QuerySet.order_by(self,*field_names)
django.db.models.QuerySet.ordered(self)
django.db.models.QuerySet.prefetch_related(self,*lookups)
django.db.models.QuerySet.query(self)
django.db.models.QuerySet.query(self,value)
django.db.models.QuerySet.raw(self,raw_query,params=(),translations=None,using=None)
django.db.models.QuerySet.resolve_expression(self,*args,**kwargs)
django.db.models.QuerySet.reverse(self)
django.db.models.QuerySet.select_for_update(self,nowait=False,skip_locked=False,of=(),no_key=False)
django.db.models.QuerySet.select_related(self,*fields)
django.db.models.QuerySet.union(self,*other_qs,all=False)
django.db.models.QuerySet.update(self,**kwargs)
django.db.models.QuerySet.update_or_create(self,defaults=None,**kwargs)
django.db.models.QuerySet.using(self,alias)
django.db.models.QuerySet.values(self,*fields,**expressions)
django.db.models.QuerySet.values_list(self,*fields,flat=False,named=False)
django.db.models.prefetch_related_objects(model_instances,*related_lookups)
django.db.models.query.BaseIterable(self,queryset,chunked_fetch=False,chunk_size=GET_ITERATOR_CHUNK_SIZE)
django.db.models.query.BaseIterable.__init__(self,queryset,chunked_fetch=False,chunk_size=GET_ITERATOR_CHUNK_SIZE)
django.db.models.query.EmptyQuerySet(self,*args,**kwargs)
django.db.models.query.EmptyQuerySet.__init__(self,*args,**kwargs)
django.db.models.query.FlatValuesListIterable(BaseIterable)
django.db.models.query.FlatValuesListIterable.__iter__(self)
django.db.models.query.InstanceCheckMeta(type)
django.db.models.query.InstanceCheckMeta.__instancecheck__(self,instance)
django.db.models.query.ModelIterable(BaseIterable)
django.db.models.query.ModelIterable.__iter__(self)
django.db.models.query.NamedValuesListIterable(ValuesListIterable)
django.db.models.query.NamedValuesListIterable.__iter__(self)
django.db.models.query.Prefetch(self,lookup,queryset=None,to_attr=None)
django.db.models.query.Prefetch.__eq__(self,other)
django.db.models.query.Prefetch.__getstate__(self)
django.db.models.query.Prefetch.__hash__(self)
django.db.models.query.Prefetch.__init__(self,lookup,queryset=None,to_attr=None)
django.db.models.query.Prefetch.add_prefix(self,prefix)
django.db.models.query.Prefetch.get_current_prefetch_to(self,level)
django.db.models.query.Prefetch.get_current_queryset(self,level)
django.db.models.query.Prefetch.get_current_to_attr(self,level)
django.db.models.query.QuerySet(self,model=None,query=None,using=None,hints=None)
django.db.models.query.QuerySet.__and__(self,other)
django.db.models.query.QuerySet.__bool__(self)
django.db.models.query.QuerySet.__class_getitem__(cls,*args,**kwargs)
django.db.models.query.QuerySet.__deepcopy__(self,memo)
django.db.models.query.QuerySet.__getitem__(self,k)
django.db.models.query.QuerySet.__getstate__(self)
django.db.models.query.QuerySet.__init__(self,model=None,query=None,using=None,hints=None)
django.db.models.query.QuerySet.__iter__(self)
django.db.models.query.QuerySet.__len__(self)
django.db.models.query.QuerySet.__or__(self,other)
django.db.models.query.QuerySet.__repr__(self)
django.db.models.query.QuerySet.__setstate__(self,state)
django.db.models.query.QuerySet._add_hints(self,**hints)
django.db.models.query.QuerySet._annotate(self,args,kwargs,select=True)
django.db.models.query.QuerySet._batched_insert(self,objs,fields,batch_size,ignore_conflicts=False)
django.db.models.query.QuerySet._chain(self,**kwargs)
django.db.models.query.QuerySet._clone(self)
django.db.models.query.QuerySet._combinator_query(self,combinator,*other_qs,all=False)
django.db.models.query.QuerySet._earliest(self,*fields)
django.db.models.query.QuerySet._extract_model_params(self,defaults,**kwargs)
django.db.models.query.QuerySet._fetch_all(self)
django.db.models.query.QuerySet._filter_or_exclude(self,negate,args,kwargs)
django.db.models.query.QuerySet._filter_or_exclude_inplace(self,negate,args,kwargs)
django.db.models.query.QuerySet._has_filters(self)
django.db.models.query.QuerySet._insert(self,objs,fields,returning_fields=None,raw=False,using=None,ignore_conflicts=False)
django.db.models.query.QuerySet._iterator(self,use_chunked_fetch,chunk_size)
django.db.models.query.QuerySet._merge_known_related_objects(self,other)
django.db.models.query.QuerySet._merge_sanity_check(self,other)
django.db.models.query.QuerySet._next_is_sticky(self)
django.db.models.query.QuerySet._not_support_combined_queries(self,operation_name)
django.db.models.query.QuerySet._prefetch_related_objects(self)
django.db.models.query.QuerySet._prepare_for_bulk_create(self,objs)
django.db.models.query.QuerySet._raw_delete(self,using)
django.db.models.query.QuerySet._update(self,values)
django.db.models.query.QuerySet._validate_values_are_expressions(values,method_name)
django.db.models.query.QuerySet._values(self,*fields,**expressions)
django.db.models.query.QuerySet.aggregate(self,*args,**kwargs)
django.db.models.query.QuerySet.alias(self,*args,**kwargs)
django.db.models.query.QuerySet.all(self)
django.db.models.query.QuerySet.annotate(self,*args,**kwargs)
django.db.models.query.QuerySet.as_manager(cls)
django.db.models.query.QuerySet.bulk_create(self,objs,batch_size=None,ignore_conflicts=False)
django.db.models.query.QuerySet.bulk_update(self,objs,fields,batch_size=None)
django.db.models.query.QuerySet.complex_filter(self,filter_obj)
django.db.models.query.QuerySet.count(self)
django.db.models.query.QuerySet.create(self,**kwargs)
django.db.models.query.QuerySet.dates(self,field_name,kind,order='ASC')
django.db.models.query.QuerySet.datetimes(self,field_name,kind,order='ASC',tzinfo=None,is_dst=None)
django.db.models.query.QuerySet.db(self)
django.db.models.query.QuerySet.defer(self,*fields)
django.db.models.query.QuerySet.delete(self)
django.db.models.query.QuerySet.difference(self,*other_qs)
django.db.models.query.QuerySet.distinct(self,*field_names)
django.db.models.query.QuerySet.earliest(self,*fields)
django.db.models.query.QuerySet.exclude(self,*args,**kwargs)
django.db.models.query.QuerySet.exists(self)
django.db.models.query.QuerySet.explain(self,*,format=None,**options)
django.db.models.query.QuerySet.extra(self,select=None,where=None,params=None,tables=None,order_by=None,select_params=None)
django.db.models.query.QuerySet.filter(self,*args,**kwargs)
django.db.models.query.QuerySet.first(self)
django.db.models.query.QuerySet.get(self,*args,**kwargs)
django.db.models.query.QuerySet.get_or_create(self,defaults=None,**kwargs)
django.db.models.query.QuerySet.in_bulk(self,id_list=None,*,field_name='pk')
django.db.models.query.QuerySet.intersection(self,*other_qs)
django.db.models.query.QuerySet.iterator(self,chunk_size=2000)
django.db.models.query.QuerySet.last(self)
django.db.models.query.QuerySet.latest(self,*fields)
django.db.models.query.QuerySet.none(self)
django.db.models.query.QuerySet.only(self,*fields)
django.db.models.query.QuerySet.order_by(self,*field_names)
django.db.models.query.QuerySet.ordered(self)
django.db.models.query.QuerySet.prefetch_related(self,*lookups)
django.db.models.query.QuerySet.query(self)
django.db.models.query.QuerySet.query(self,value)
django.db.models.query.QuerySet.raw(self,raw_query,params=(),translations=None,using=None)
django.db.models.query.QuerySet.resolve_expression(self,*args,**kwargs)
django.db.models.query.QuerySet.reverse(self)
django.db.models.query.QuerySet.select_for_update(self,nowait=False,skip_locked=False,of=(),no_key=False)
django.db.models.query.QuerySet.select_related(self,*fields)
django.db.models.query.QuerySet.union(self,*other_qs,all=False)
django.db.models.query.QuerySet.update(self,**kwargs)
django.db.models.query.QuerySet.update_or_create(self,defaults=None,**kwargs)
django.db.models.query.QuerySet.using(self,alias)
django.db.models.query.QuerySet.values(self,*fields,**expressions)
django.db.models.query.QuerySet.values_list(self,*fields,flat=False,named=False)
django.db.models.query.RawQuerySet(self,raw_query,model=None,query=None,params=(),translations=None,using=None,hints=None)
django.db.models.query.RawQuerySet.__bool__(self)
django.db.models.query.RawQuerySet.__getitem__(self,k)
django.db.models.query.RawQuerySet.__init__(self,raw_query,model=None,query=None,params=(),translations=None,using=None,hints=None)
django.db.models.query.RawQuerySet.__iter__(self)
django.db.models.query.RawQuerySet.__len__(self)
django.db.models.query.RawQuerySet.__repr__(self)
django.db.models.query.RawQuerySet._clone(self)
django.db.models.query.RawQuerySet._fetch_all(self)
django.db.models.query.RawQuerySet._prefetch_related_objects(self)
django.db.models.query.RawQuerySet.columns(self)
django.db.models.query.RawQuerySet.db(self)
django.db.models.query.RawQuerySet.iterator(self)
django.db.models.query.RawQuerySet.model_fields(self)
django.db.models.query.RawQuerySet.prefetch_related(self,*lookups)
django.db.models.query.RawQuerySet.resolve_model_init_order(self)
django.db.models.query.RawQuerySet.using(self,alias)
django.db.models.query.RelatedPopulator(self,klass_info,select,db)
django.db.models.query.RelatedPopulator.__init__(self,klass_info,select,db)
django.db.models.query.RelatedPopulator.populate(self,row,from_obj)
django.db.models.query.ValuesIterable(BaseIterable)
django.db.models.query.ValuesIterable.__iter__(self)
django.db.models.query.ValuesListIterable(BaseIterable)
django.db.models.query.ValuesListIterable.__iter__(self)
django.db.models.query.get_prefetcher(instance,through_attr,to_attr)
django.db.models.query.get_related_populators(klass_info,select,db)
django.db.models.query.normalize_prefetch_lookups(lookups,prefix=None)
django.db.models.query.prefetch_one_level(instances,prefetcher,lookup,level)
django.db.models.query.prefetch_related_objects(model_instances,*related_lookups)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/signals.py----------------------------------------
A:django.db.models.signals.class_prepared->Signal()
A:django.db.models.signals.partial_method->partial(method, receiver, **kwargs)
A:django.db.models.signals.pre_init->ModelSignal(use_caching=True)
A:django.db.models.signals.post_init->ModelSignal(use_caching=True)
A:django.db.models.signals.pre_save->ModelSignal(use_caching=True)
A:django.db.models.signals.post_save->ModelSignal(use_caching=True)
A:django.db.models.signals.pre_delete->ModelSignal(use_caching=True)
A:django.db.models.signals.post_delete->ModelSignal(use_caching=True)
A:django.db.models.signals.m2m_changed->ModelSignal(use_caching=True)
A:django.db.models.signals.pre_migrate->Signal()
A:django.db.models.signals.post_migrate->Signal()
django.db.models.signals.ModelSignal(Signal)
django.db.models.signals.ModelSignal._lazy_method(self,method,apps,receiver,sender,**kwargs)
django.db.models.signals.ModelSignal.connect(self,receiver,sender=None,weak=True,dispatch_uid=None,apps=None)
django.db.models.signals.ModelSignal.disconnect(self,receiver=None,sender=None,dispatch_uid=None,apps=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/expressions.py----------------------------------------
A:django.db.models.expressions.(sql, params)->super().as_sql(compiler, connection, template=template, query=query, **extra_context)
A:django.db.models.expressions.other->Value(other)
A:django.db.models.expressions.state->self.__dict__.copy()
A:django.db.models.expressions.c->super().copy()
A:django.db.models.expressions.output_field->django.db.models.fields.BooleanField()
A:django.db.models.expressions.internal_type->field.get_internal_type()
A:django.db.models.expressions.clone->self.copy()
A:django.db.models.expressions.constructor_signature->inspect.signature(self.__init__)
A:django.db.models.expressions.signature->inspect.signature(self.__init__).bind_partial(*args, **kwargs)
A:django.db.models.expressions.arguments->inspect.signature(self.__init__).bind_partial(*args, **kwargs).arguments.items()
A:django.db.models.expressions.value->make_hashable(value)
A:django.db.models.expressions.combinators->_connector_combinators.get(connector, ())
A:django.db.models.expressions.combined_type->_resolve_combined_type(self.connector, type(self.lhs.output_field), type(self.rhs.output_field))
A:django.db.models.expressions.sql->'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)
A:django.db.models.expressions.lhs->compiler.compile(self.lhs)
A:django.db.models.expressions.rhs->compiler.compile(self.rhs)
A:django.db.models.expressions.lhs_type->compiler.compile(self.lhs).output_field.get_internal_type()
A:django.db.models.expressions.rhs_type->compiler.compile(self.rhs).output_field.get_internal_type()
A:django.db.models.expressions.col->super().resolve_expression(*args, **kwargs)
A:django.db.models.expressions.self.source_expressions->self._parse_expressions(*expressions)
A:django.db.models.expressions.args->self.arg_joiner.join((str(arg) for arg in self.source_expressions))
A:django.db.models.expressions.extra->', '.join((str(key) + '=' + str(val) for (key, val) in sorted(extra.items())))
A:django.db.models.expressions.c.source_expressions[pos]->arg.resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.expressions.(arg_sql, arg_params)->compiler.compile(arg)
A:django.db.models.expressions.data['expressions']data['field']->arg_joiner.join(sql_parts)
A:django.db.models.expressions.copy->self.copy()
A:django.db.models.expressions.copy.extra->self.extra.copy()
A:django.db.models.expressions.val->django.db.models.fields.BooleanField().get_db_prep_value(val, connection=connection)
A:django.db.models.expressions.(_, column_name)->parent_field.get_attname_column()
A:django.db.models.expressions.expression->self.expression.copy()
A:django.db.models.expressions.c.condition->super().copy().condition.resolve_expression(query, allow_joins, reuse, summarize, False)
A:django.db.models.expressions.c.result->super().copy().result.resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.expressions.(condition_sql, condition_params)->compiler.compile(self.condition)
A:django.db.models.expressions.(result_sql, result_params)->compiler.compile(self.result)
A:django.db.models.expressions.self.cases->list(cases)
A:django.db.models.expressions.c.cases[pos]->case.resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.expressions.c.default->super().copy().default.resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.expressions.(case_sql, case_params)->compiler.compile(case)
A:django.db.models.expressions.(default_sql, default_params)->compiler.compile(self.default)
A:django.db.models.expressions.template_params['cases']->case_joiner.join(case_parts)
A:django.db.models.expressions.self.query->getattr(queryset, 'query', queryset)
A:django.db.models.expressions.clone.query->self.copy().query.clone()
A:django.db.models.expressions.(subquery_sql, sql_params)->self.query.exists(using=connection.alias).as_sql(compiler, connection)
A:django.db.models.expressions.external_cols->self.get_external_cols()
A:django.db.models.expressions.query->self.query.exists(using=connection.alias)
A:django.db.models.expressions.(expression_sql, params)->compiler.compile(self.expression)
A:django.db.models.expressions.copy.expression->Case(When(self.expression, then=True), default=False)
A:django.db.models.expressions.self.partition_by->ExpressionList(*self.partition_by)
A:django.db.models.expressions.self.order_by->ExpressionList(*self.order_by)
A:django.db.models.expressions.(expr_sql, params)->compiler.compile(self.source_expression)
A:django.db.models.expressions.(sql_expr, sql_params)->self.partition_by.as_sql(compiler=compiler, connection=connection, template='PARTITION BY %(expressions)s')
A:django.db.models.expressions.(order_sql, order_params)->compiler.compile(self.order_by)
A:django.db.models.expressions.(frame_sql, frame_params)->compiler.compile(self.frame)
A:django.db.models.expressions.source_expressions->self.copy().get_source_expressions()
A:django.db.models.expressions.source_expressions[0].output_field->django.db.models.fields.FloatField()
A:django.db.models.expressions.self.start->Value(start)
A:django.db.models.expressions.self.end->Value(end)
A:django.db.models.expressions.(start, end)->self.window_frame_start_end(connection, self.start.value, self.end.value)
django.db.models.Case(self,*cases,default=None,output_field=None,**extra)
django.db.models.Case.__repr__(self)
django.db.models.Case.__str__(self)
django.db.models.Case.as_sql(self,compiler,connection,template=None,case_joiner=None,**extra_context)
django.db.models.Case.copy(self)
django.db.models.Case.get_group_by_cols(self,alias=None)
django.db.models.Case.get_source_expressions(self)
django.db.models.Case.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.Case.set_source_expressions(self,exprs)
django.db.models.Exists(self,queryset,negated=False,**kwargs)
django.db.models.Exists.__invert__(self)
django.db.models.Exists.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.Exists.select_format(self,compiler,sql,params)
django.db.models.Expression(BaseExpression,Combinable)
django.db.models.Expression.__eq__(self,other)
django.db.models.Expression.__hash__(self)
django.db.models.Expression.identity(self)
django.db.models.ExpressionList(self,*expressions,**extra)
django.db.models.ExpressionList.__str__(self)
django.db.models.ExpressionList.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.ExpressionWrapper(self,expression,output_field)
django.db.models.ExpressionWrapper.__repr__(self)
django.db.models.ExpressionWrapper.as_sql(self,compiler,connection)
django.db.models.ExpressionWrapper.get_group_by_cols(self,alias=None)
django.db.models.ExpressionWrapper.get_source_expressions(self)
django.db.models.ExpressionWrapper.set_source_expressions(self,exprs)
django.db.models.F(self,name)
django.db.models.F.__eq__(self,other)
django.db.models.F.__hash__(self)
django.db.models.F.__repr__(self)
django.db.models.F.asc(self,**kwargs)
django.db.models.F.desc(self,**kwargs)
django.db.models.F.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.Func(self,*expressions,output_field=None,**extra)
django.db.models.Func.__repr__(self)
django.db.models.Func._get_repr_options(self)
django.db.models.Func.as_sql(self,compiler,connection,function=None,template=None,arg_joiner=None,**extra_context)
django.db.models.Func.copy(self)
django.db.models.Func.get_source_expressions(self)
django.db.models.Func.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.Func.set_source_expressions(self,exprs)
django.db.models.OrderBy(self,expression,descending=False,nulls_first=False,nulls_last=False)
django.db.models.OrderBy.__repr__(self)
django.db.models.OrderBy.as_oracle(self,compiler,connection)
django.db.models.OrderBy.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.OrderBy.asc(self)
django.db.models.OrderBy.desc(self)
django.db.models.OrderBy.get_group_by_cols(self,alias=None)
django.db.models.OrderBy.get_source_expressions(self)
django.db.models.OrderBy.reverse_ordering(self)
django.db.models.OrderBy.set_source_expressions(self,exprs)
django.db.models.OuterRef(F)
django.db.models.OuterRef.relabeled_clone(self,relabels)
django.db.models.OuterRef.resolve_expression(self,*args,**kwargs)
django.db.models.RowRange(WindowFrame)
django.db.models.RowRange.window_frame_start_end(self,connection,start,end)
django.db.models.Subquery(self,queryset,output_field=None,**extra)
django.db.models.Subquery._resolve_output_field(self)
django.db.models.Subquery.as_sql(self,compiler,connection,template=None,query=None,**extra_context)
django.db.models.Subquery.copy(self)
django.db.models.Subquery.external_aliases(self)
django.db.models.Subquery.get_external_cols(self)
django.db.models.Subquery.get_group_by_cols(self,alias=None)
django.db.models.Subquery.get_source_expressions(self)
django.db.models.Subquery.set_source_expressions(self,exprs)
django.db.models.Value(self,value,output_field=None)
django.db.models.Value.__repr__(self)
django.db.models.Value._resolve_output_field(self)
django.db.models.Value.as_sql(self,compiler,connection)
django.db.models.Value.get_group_by_cols(self,alias=None)
django.db.models.Value.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.ValueRange(WindowFrame)
django.db.models.ValueRange.window_frame_start_end(self,connection,start,end)
django.db.models.When(self,condition=None,then=None,**lookups)
django.db.models.When.__repr__(self)
django.db.models.When.__str__(self)
django.db.models.When.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.When.get_group_by_cols(self,alias=None)
django.db.models.When.get_source_expressions(self)
django.db.models.When.get_source_fields(self)
django.db.models.When.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.When.set_source_expressions(self,exprs)
django.db.models.Window(self,expression,partition_by=None,order_by=None,frame=None,output_field=None)
django.db.models.Window.__repr__(self)
django.db.models.Window.__str__(self)
django.db.models.Window._resolve_output_field(self)
django.db.models.Window.as_sql(self,compiler,connection,template=None)
django.db.models.Window.as_sqlite(self,compiler,connection)
django.db.models.Window.get_group_by_cols(self,alias=None)
django.db.models.Window.get_source_expressions(self)
django.db.models.Window.set_source_expressions(self,exprs)
django.db.models.WindowFrame(self,start=None,end=None)
django.db.models.WindowFrame.__repr__(self)
django.db.models.WindowFrame.__str__(self)
django.db.models.WindowFrame.as_sql(self,compiler,connection)
django.db.models.WindowFrame.get_group_by_cols(self,alias=None)
django.db.models.WindowFrame.get_source_expressions(self)
django.db.models.WindowFrame.set_source_expressions(self,exprs)
django.db.models.WindowFrame.window_frame_start_end(self,connection,start,end)
django.db.models.expressions.BaseExpression(self,output_field=None)
django.db.models.expressions.BaseExpression.__getstate__(self)
django.db.models.expressions.BaseExpression.__init__(self,output_field=None)
django.db.models.expressions.BaseExpression._convert_value_noop(value,expression,connection)
django.db.models.expressions.BaseExpression._output_field_or_none(self)
django.db.models.expressions.BaseExpression._parse_expressions(self,*expressions)
django.db.models.expressions.BaseExpression._resolve_output_field(self)
django.db.models.expressions.BaseExpression.as_sql(self,compiler,connection)
django.db.models.expressions.BaseExpression.asc(self,**kwargs)
django.db.models.expressions.BaseExpression.conditional(self)
django.db.models.expressions.BaseExpression.contains_aggregate(self)
django.db.models.expressions.BaseExpression.contains_column_references(self)
django.db.models.expressions.BaseExpression.contains_over_clause(self)
django.db.models.expressions.BaseExpression.convert_value(self)
django.db.models.expressions.BaseExpression.copy(self)
django.db.models.expressions.BaseExpression.desc(self,**kwargs)
django.db.models.expressions.BaseExpression.field(self)
django.db.models.expressions.BaseExpression.flatten(self)
django.db.models.expressions.BaseExpression.get_db_converters(self,connection)
django.db.models.expressions.BaseExpression.get_group_by_cols(self,alias=None)
django.db.models.expressions.BaseExpression.get_lookup(self,lookup)
django.db.models.expressions.BaseExpression.get_source_expressions(self)
django.db.models.expressions.BaseExpression.get_source_fields(self)
django.db.models.expressions.BaseExpression.get_transform(self,name)
django.db.models.expressions.BaseExpression.output_field(self)
django.db.models.expressions.BaseExpression.relabeled_clone(self,change_map)
django.db.models.expressions.BaseExpression.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.BaseExpression.reverse_ordering(self)
django.db.models.expressions.BaseExpression.select_format(self,compiler,sql,params)
django.db.models.expressions.BaseExpression.set_source_expressions(self,exprs)
django.db.models.expressions.Case(self,*cases,default=None,output_field=None,**extra)
django.db.models.expressions.Case.__init__(self,*cases,default=None,output_field=None,**extra)
django.db.models.expressions.Case.__repr__(self)
django.db.models.expressions.Case.__str__(self)
django.db.models.expressions.Case.as_sql(self,compiler,connection,template=None,case_joiner=None,**extra_context)
django.db.models.expressions.Case.copy(self)
django.db.models.expressions.Case.get_group_by_cols(self,alias=None)
django.db.models.expressions.Case.get_source_expressions(self)
django.db.models.expressions.Case.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.Case.set_source_expressions(self,exprs)
django.db.models.expressions.Col(self,alias,target,output_field=None)
django.db.models.expressions.Col.__init__(self,alias,target,output_field=None)
django.db.models.expressions.Col.__repr__(self)
django.db.models.expressions.Col.as_sql(self,compiler,connection)
django.db.models.expressions.Col.get_db_converters(self,connection)
django.db.models.expressions.Col.get_group_by_cols(self,alias=None)
django.db.models.expressions.Col.relabeled_clone(self,relabels)
django.db.models.expressions.Combinable
django.db.models.expressions.Combinable.__add__(self,other)
django.db.models.expressions.Combinable.__and__(self,other)
django.db.models.expressions.Combinable.__mod__(self,other)
django.db.models.expressions.Combinable.__mul__(self,other)
django.db.models.expressions.Combinable.__neg__(self)
django.db.models.expressions.Combinable.__or__(self,other)
django.db.models.expressions.Combinable.__pow__(self,other)
django.db.models.expressions.Combinable.__radd__(self,other)
django.db.models.expressions.Combinable.__rand__(self,other)
django.db.models.expressions.Combinable.__rmod__(self,other)
django.db.models.expressions.Combinable.__rmul__(self,other)
django.db.models.expressions.Combinable.__ror__(self,other)
django.db.models.expressions.Combinable.__rpow__(self,other)
django.db.models.expressions.Combinable.__rsub__(self,other)
django.db.models.expressions.Combinable.__rtruediv__(self,other)
django.db.models.expressions.Combinable.__sub__(self,other)
django.db.models.expressions.Combinable.__truediv__(self,other)
django.db.models.expressions.Combinable._combine(self,other,connector,reversed)
django.db.models.expressions.Combinable.bitand(self,other)
django.db.models.expressions.Combinable.bitleftshift(self,other)
django.db.models.expressions.Combinable.bitor(self,other)
django.db.models.expressions.Combinable.bitrightshift(self,other)
django.db.models.expressions.Combinable.bitxor(self,other)
django.db.models.expressions.CombinedExpression(self,lhs,connector,rhs,output_field=None)
django.db.models.expressions.CombinedExpression.__init__(self,lhs,connector,rhs,output_field=None)
django.db.models.expressions.CombinedExpression.__repr__(self)
django.db.models.expressions.CombinedExpression.__str__(self)
django.db.models.expressions.CombinedExpression._resolve_output_field(self)
django.db.models.expressions.CombinedExpression.as_sql(self,compiler,connection)
django.db.models.expressions.CombinedExpression.get_source_expressions(self)
django.db.models.expressions.CombinedExpression.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.CombinedExpression.set_source_expressions(self,exprs)
django.db.models.expressions.DurationExpression(CombinedExpression)
django.db.models.expressions.DurationExpression.as_sql(self,compiler,connection)
django.db.models.expressions.DurationExpression.compile(self,side,compiler,connection)
django.db.models.expressions.Exists(self,queryset,negated=False,**kwargs)
django.db.models.expressions.Exists.__init__(self,queryset,negated=False,**kwargs)
django.db.models.expressions.Exists.__invert__(self)
django.db.models.expressions.Exists.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.expressions.Exists.select_format(self,compiler,sql,params)
django.db.models.expressions.Expression(BaseExpression,Combinable)
django.db.models.expressions.Expression.__eq__(self,other)
django.db.models.expressions.Expression.__hash__(self)
django.db.models.expressions.Expression.identity(self)
django.db.models.expressions.ExpressionList(self,*expressions,**extra)
django.db.models.expressions.ExpressionList.__init__(self,*expressions,**extra)
django.db.models.expressions.ExpressionList.__str__(self)
django.db.models.expressions.ExpressionList.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.expressions.ExpressionWrapper(self,expression,output_field)
django.db.models.expressions.ExpressionWrapper.__init__(self,expression,output_field)
django.db.models.expressions.ExpressionWrapper.__repr__(self)
django.db.models.expressions.ExpressionWrapper.as_sql(self,compiler,connection)
django.db.models.expressions.ExpressionWrapper.get_group_by_cols(self,alias=None)
django.db.models.expressions.ExpressionWrapper.get_source_expressions(self)
django.db.models.expressions.ExpressionWrapper.set_source_expressions(self,exprs)
django.db.models.expressions.F(self,name)
django.db.models.expressions.F.__eq__(self,other)
django.db.models.expressions.F.__hash__(self)
django.db.models.expressions.F.__init__(self,name)
django.db.models.expressions.F.__repr__(self)
django.db.models.expressions.F.asc(self,**kwargs)
django.db.models.expressions.F.desc(self,**kwargs)
django.db.models.expressions.F.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.Func(self,*expressions,output_field=None,**extra)
django.db.models.expressions.Func.__init__(self,*expressions,output_field=None,**extra)
django.db.models.expressions.Func.__repr__(self)
django.db.models.expressions.Func._get_repr_options(self)
django.db.models.expressions.Func.as_sql(self,compiler,connection,function=None,template=None,arg_joiner=None,**extra_context)
django.db.models.expressions.Func.copy(self)
django.db.models.expressions.Func.get_source_expressions(self)
django.db.models.expressions.Func.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.Func.set_source_expressions(self,exprs)
django.db.models.expressions.OrderBy(self,expression,descending=False,nulls_first=False,nulls_last=False)
django.db.models.expressions.OrderBy.__init__(self,expression,descending=False,nulls_first=False,nulls_last=False)
django.db.models.expressions.OrderBy.__repr__(self)
django.db.models.expressions.OrderBy.as_oracle(self,compiler,connection)
django.db.models.expressions.OrderBy.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.expressions.OrderBy.asc(self)
django.db.models.expressions.OrderBy.desc(self)
django.db.models.expressions.OrderBy.get_group_by_cols(self,alias=None)
django.db.models.expressions.OrderBy.get_source_expressions(self)
django.db.models.expressions.OrderBy.reverse_ordering(self)
django.db.models.expressions.OrderBy.set_source_expressions(self,exprs)
django.db.models.expressions.OuterRef(F)
django.db.models.expressions.OuterRef.relabeled_clone(self,relabels)
django.db.models.expressions.OuterRef.resolve_expression(self,*args,**kwargs)
django.db.models.expressions.RawSQL(self,sql,params,output_field=None)
django.db.models.expressions.RawSQL.__init__(self,sql,params,output_field=None)
django.db.models.expressions.RawSQL.__repr__(self)
django.db.models.expressions.RawSQL.as_sql(self,compiler,connection)
django.db.models.expressions.RawSQL.get_group_by_cols(self,alias=None)
django.db.models.expressions.RawSQL.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.Ref(self,refs,source)
django.db.models.expressions.Ref.__init__(self,refs,source)
django.db.models.expressions.Ref.__repr__(self)
django.db.models.expressions.Ref.as_sql(self,compiler,connection)
django.db.models.expressions.Ref.get_group_by_cols(self,alias=None)
django.db.models.expressions.Ref.get_source_expressions(self)
django.db.models.expressions.Ref.relabeled_clone(self,relabels)
django.db.models.expressions.Ref.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.Ref.set_source_expressions(self,exprs)
django.db.models.expressions.ResolvedOuterRef(F)
django.db.models.expressions.ResolvedOuterRef.as_sql(self,*args,**kwargs)
django.db.models.expressions.ResolvedOuterRef.get_group_by_cols(self,alias=None)
django.db.models.expressions.ResolvedOuterRef.relabeled_clone(self,relabels)
django.db.models.expressions.ResolvedOuterRef.resolve_expression(self,*args,**kwargs)
django.db.models.expressions.RowRange(WindowFrame)
django.db.models.expressions.RowRange.window_frame_start_end(self,connection,start,end)
django.db.models.expressions.SQLiteNumericMixin
django.db.models.expressions.SQLiteNumericMixin.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.expressions.Star(Expression)
django.db.models.expressions.Star.__repr__(self)
django.db.models.expressions.Star.as_sql(self,compiler,connection)
django.db.models.expressions.Subquery(self,queryset,output_field=None,**extra)
django.db.models.expressions.Subquery.__init__(self,queryset,output_field=None,**extra)
django.db.models.expressions.Subquery._resolve_output_field(self)
django.db.models.expressions.Subquery.as_sql(self,compiler,connection,template=None,query=None,**extra_context)
django.db.models.expressions.Subquery.copy(self)
django.db.models.expressions.Subquery.external_aliases(self)
django.db.models.expressions.Subquery.get_external_cols(self)
django.db.models.expressions.Subquery.get_group_by_cols(self,alias=None)
django.db.models.expressions.Subquery.get_source_expressions(self)
django.db.models.expressions.Subquery.set_source_expressions(self,exprs)
django.db.models.expressions.TemporalSubtraction(self,lhs,rhs)
django.db.models.expressions.TemporalSubtraction.__init__(self,lhs,rhs)
django.db.models.expressions.TemporalSubtraction.as_sql(self,compiler,connection)
django.db.models.expressions.Value(self,value,output_field=None)
django.db.models.expressions.Value.__init__(self,value,output_field=None)
django.db.models.expressions.Value.__repr__(self)
django.db.models.expressions.Value._resolve_output_field(self)
django.db.models.expressions.Value.as_sql(self,compiler,connection)
django.db.models.expressions.Value.get_group_by_cols(self,alias=None)
django.db.models.expressions.Value.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.ValueRange(WindowFrame)
django.db.models.expressions.ValueRange.window_frame_start_end(self,connection,start,end)
django.db.models.expressions.When(self,condition=None,then=None,**lookups)
django.db.models.expressions.When.__init__(self,condition=None,then=None,**lookups)
django.db.models.expressions.When.__repr__(self)
django.db.models.expressions.When.__str__(self)
django.db.models.expressions.When.as_sql(self,compiler,connection,template=None,**extra_context)
django.db.models.expressions.When.get_group_by_cols(self,alias=None)
django.db.models.expressions.When.get_source_expressions(self)
django.db.models.expressions.When.get_source_fields(self)
django.db.models.expressions.When.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.expressions.When.set_source_expressions(self,exprs)
django.db.models.expressions.Window(self,expression,partition_by=None,order_by=None,frame=None,output_field=None)
django.db.models.expressions.Window.__init__(self,expression,partition_by=None,order_by=None,frame=None,output_field=None)
django.db.models.expressions.Window.__repr__(self)
django.db.models.expressions.Window.__str__(self)
django.db.models.expressions.Window._resolve_output_field(self)
django.db.models.expressions.Window.as_sql(self,compiler,connection,template=None)
django.db.models.expressions.Window.as_sqlite(self,compiler,connection)
django.db.models.expressions.Window.get_group_by_cols(self,alias=None)
django.db.models.expressions.Window.get_source_expressions(self)
django.db.models.expressions.Window.set_source_expressions(self,exprs)
django.db.models.expressions.WindowFrame(self,start=None,end=None)
django.db.models.expressions.WindowFrame.__init__(self,start=None,end=None)
django.db.models.expressions.WindowFrame.__repr__(self)
django.db.models.expressions.WindowFrame.__str__(self)
django.db.models.expressions.WindowFrame.as_sql(self,compiler,connection)
django.db.models.expressions.WindowFrame.get_group_by_cols(self,alias=None)
django.db.models.expressions.WindowFrame.get_source_expressions(self)
django.db.models.expressions.WindowFrame.set_source_expressions(self,exprs)
django.db.models.expressions.WindowFrame.window_frame_start_end(self,connection,start,end)
django.db.models.expressions._resolve_combined_type(connector,lhs_type,rhs_type)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/base.py----------------------------------------
A:django.db.models.base.DEFERRED->Deferred()
A:django.db.models.base.module->attrs.pop('__module__')
A:django.db.models.base.classcell->attrs.pop('__classcell__', None)
A:django.db.models.base.attr_meta->attrs.pop('Meta', None)
A:django.db.models.base.new_class->super_new(cls, name, bases, new_attrs, **kwargs)
A:django.db.models.base.abstract->getattr(attr_meta, 'abstract', False)
A:django.db.models.base.base_meta->getattr(new_class, '_meta', None)
A:django.db.models.base.app_config->django.apps.apps.get_containing_app_config(module)
A:django.db.models.base.new_fields->chain(new_class._meta.local_fields, new_class._meta.local_many_to_many, new_class._meta.private_fields)
A:django.db.models.base.related->resolve_relation(new_class, field.remote_field.model)
A:django.db.models.base.inherited_attributes->set()
A:django.db.models.base.base_key->make_model_tuple(base)
A:django.db.models.base.field->cls._meta.get_field(field_name)
A:django.db.models.base.base_parents->base._meta.parents.copy()
A:django.db.models.base.new_field->copy.deepcopy(field)
A:django.db.models.base.cls.get_next_in_order->partialmethod(cls._get_next_or_previous_in_order, is_next=True)
A:django.db.models.base.cls.get_previous_in_order->partialmethod(cls._get_next_or_previous_in_order, is_next=False)
A:django.db.models.base.get_absolute_url_override->django.conf.settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
A:django.db.models.base.manager->Manager()
A:django.db.models.base.fields_cache->ModelStateFieldsCacheDescriptor()
A:django.db.models.base.self._state->ModelState()
A:django.db.models.base.fields_iter->iter(opts.fields)
A:django.db.models.base.rel_obj->kwargs.pop(field.name)
A:django.db.models.base.val->cls._meta.get_field(field_name).get_default()
A:django.db.models.base.values_iter->iter(values)
A:django.db.models.base.new->cls(*values)
A:django.db.models.base.data->self.__getstate__()
A:django.db.models.base.state->self.__dict__.copy()
A:django.db.models.base.state['_state']->copy.copy(state['_state'])
A:django.db.models.base.state['_state'].fields_cache->copy.copy(state['_state']).fields_cache.copy()
A:django.db.models.base.pickled_version->self.__dict__.copy().get(DJANGO_VERSION_PICKLE_KEY)
A:django.db.models.base.pk->property(_get_pk_val, _set_pk_val)
A:django.db.models.base.prefetched_objects_cache->getattr(self, '_prefetched_objects_cache', ())
A:django.db.models.base.db_instance_qs->db_instance_qs.only(*fields).only(*fields)
A:django.db.models.base.deferred_fields->self.get_deferred_fields()
A:django.db.models.base.fields->set(chain.from_iterable(((*constraint.fields, *constraint.include) for constraint in cls._meta.constraints if isinstance(constraint, UniqueConstraint))))
A:django.db.models.base.db_instance->db_instance_qs.only(*fields).only(*fields).get()
A:django.db.models.base.non_loaded_fields->db_instance_qs.only(*fields).only(*fields).get().get_deferred_fields()
A:django.db.models.base.update_fields->frozenset(loaded_fields)
A:django.db.models.base.field_names->set()
A:django.db.models.base.non_model_fields->frozenset(loaded_fields).difference(field_names)
A:django.db.models.base.loaded_fields->set().difference(deferred_fields)
A:django.db.models.base.context_manager->django.db.transaction.mark_for_rollback_on_error(using=using)
A:django.db.models.base.parent_inserted->self._save_parents(cls=parent, using=using, update_fields=update_fields)
A:django.db.models.base.updated->self._do_update(base_qs, using, pk_val, values, update_fields, forced_update)
A:django.db.models.base.pk_val->meta.pk.get_pk_value_on_save(self)
A:django.db.models.base.base_qs->cls._base_manager.using(using)
A:django.db.models.base.filter_args->order_wrt.get_forward_related_filter(self)
A:django.db.models.base.results->self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
A:django.db.models.base.filtered->cls._base_manager.using(using).filter(pk=pk_val)
A:django.db.models.base.obj->self.__class__._default_manager.filter(**filter_args).filter(**{'_order__%s' % op: self.__class__._default_manager.values('_order').filter(**{self._meta.pk.name: self.pk})}).order_by(order)[:1].get()
A:django.db.models.base.collector->Collector(using=using)
A:django.db.models.base.value->getattr(self, field.attname)
A:django.db.models.base.choices_dict->dict(make_hashable(field.flatchoices))
A:django.db.models.base.param->getattr(self, field.attname)
A:django.db.models.base.q->Q(**{'%s__%s' % (field.name, op): param})
A:django.db.models.base.qs->qs.exclude(pk=self.pk).exclude(pk=self.pk)
A:django.db.models.base.(unique_checks, date_checks)->self._get_unique_checks(exclude=exclude)
A:django.db.models.base.errors->e.update_error_dict(errors)
A:django.db.models.base.date_errors->self._perform_date_checks(date_checks)
A:django.db.models.base.f->self._meta.get_field(field_name)
A:django.db.models.base.lookup_value->getattr(self, f.attname)
A:django.db.models.base.model_class_pk->self._get_pk_val(model_class._meta)
A:django.db.models.base.date->getattr(self, unique_for)
A:django.db.models.base.lookup_kwargs['%s__%s' % (unique_for, lookup_type)]->getattr(date, lookup_type)
A:django.db.models.base.lookup_kwargs[field]->getattr(self, field)
A:django.db.models.base.params['field_label']->capfirst(field.verbose_name)
A:django.db.models.base.params['field_labels']->get_text_list(field_labels, _('and'))
A:django.db.models.base.exclude->list(exclude)
A:django.db.models.base.raw_value->getattr(self, f.attname)
A:django.db.models.base.(app_label, model_name)->cls._meta.swapped.split('.')
A:django.db.models.base.(_, column_name)->self._meta.get_field(field_name).get_attname_column()
A:django.db.models.base.references->set()
A:django.db.models.base.fld->_cls._meta.get_field(part)
A:django.db.models.base.valid_fields->set(chain.from_iterable(((f.name, f.attname) if not (f.auto_created and (not f.concrete)) else (f.field.related_query_name(),) for f in chain(opts.fields, opts.related_objects))))
A:django.db.models.base.max_name_length->django.db.connection.ops.max_name_length()
A:django.db.models.base.(_, rel_name)->m2m.get_attname_column()
A:django.db.models.base.model->django.apps.apps.get_model(*model_id)
django.db.models.Model(self,*args,**kwargs)
django.db.models.Model.__eq__(self,other)
django.db.models.Model.__getstate__(self)
django.db.models.Model.__hash__(self)
django.db.models.Model.__reduce__(self)
django.db.models.Model.__repr__(self)
django.db.models.Model.__setstate__(self,state)
django.db.models.Model.__str__(self)
django.db.models.Model._check_column_name_clashes(cls)
django.db.models.Model._check_constraints(cls,databases)
django.db.models.Model._check_default_pk(cls)
django.db.models.Model._check_field_name_clashes(cls)
django.db.models.Model._check_fields(cls,**kwargs)
django.db.models.Model._check_id_field(cls)
django.db.models.Model._check_index_together(cls)
django.db.models.Model._check_indexes(cls,databases)
django.db.models.Model._check_local_fields(cls,fields,option)
django.db.models.Model._check_long_column_names(cls,databases)
django.db.models.Model._check_m2m_through_same_relationship(cls)
django.db.models.Model._check_managers(cls,**kwargs)
django.db.models.Model._check_model(cls)
django.db.models.Model._check_model_name_db_lookup_clashes(cls)
django.db.models.Model._check_ordering(cls)
django.db.models.Model._check_property_name_related_field_accessor_clashes(cls)
django.db.models.Model._check_single_primary_key(cls)
django.db.models.Model._check_swappable(cls)
django.db.models.Model._check_unique_together(cls)
django.db.models.Model._do_insert(self,manager,using,fields,returning_fields,raw)
django.db.models.Model._do_update(self,base_qs,using,pk_val,values,update_fields,forced_update)
django.db.models.Model._get_FIELD_display(self,field)
django.db.models.Model._get_expr_references(cls,expr)
django.db.models.Model._get_next_or_previous_by_FIELD(self,field,is_next,**kwargs)
django.db.models.Model._get_next_or_previous_in_order(self,is_next)
django.db.models.Model._get_pk_val(self,meta=None)
django.db.models.Model._get_unique_checks(self,exclude=None)
django.db.models.Model._perform_date_checks(self,date_checks)
django.db.models.Model._perform_unique_checks(self,unique_checks)
django.db.models.Model._prepare_related_fields_for_save(self,operation_name)
django.db.models.Model._save_parents(self,cls,using,update_fields)
django.db.models.Model._save_table(self,raw=False,cls=None,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.Model._set_pk_val(self,value)
django.db.models.Model.check(cls,**kwargs)
django.db.models.Model.clean(self)
django.db.models.Model.clean_fields(self,exclude=None)
django.db.models.Model.date_error_message(self,lookup_type,field_name,unique_for)
django.db.models.Model.delete(self,using=None,keep_parents=False)
django.db.models.Model.from_db(cls,db,field_names,values)
django.db.models.Model.full_clean(self,exclude=None,validate_unique=True)
django.db.models.Model.get_deferred_fields(self)
django.db.models.Model.prepare_database_save(self,field)
django.db.models.Model.refresh_from_db(self,using=None,fields=None)
django.db.models.Model.save(self,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.Model.save_base(self,raw=False,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.Model.serializable_value(self,field_name)
django.db.models.Model.unique_error_message(self,model_class,unique_check)
django.db.models.Model.validate_unique(self,exclude=None)
django.db.models.ModelBase(cls,name,bases,attrs,**kwargs)
django.db.models.ModelBase._base_manager(cls)
django.db.models.ModelBase._default_manager(cls)
django.db.models.ModelBase._prepare(cls)
django.db.models.ModelBase.add_to_class(cls,name,value)
django.db.models.ModelState
django.db.models.ModelStateFieldsCacheDescriptor
django.db.models.ModelStateFieldsCacheDescriptor.__get__(self,instance,cls=None)
django.db.models.base.Deferred
django.db.models.base.Deferred.__repr__(self)
django.db.models.base.Deferred.__str__(self)
django.db.models.base.Model(self,*args,**kwargs)
django.db.models.base.Model.__eq__(self,other)
django.db.models.base.Model.__getstate__(self)
django.db.models.base.Model.__hash__(self)
django.db.models.base.Model.__init__(self,*args,**kwargs)
django.db.models.base.Model.__reduce__(self)
django.db.models.base.Model.__repr__(self)
django.db.models.base.Model.__setstate__(self,state)
django.db.models.base.Model.__str__(self)
django.db.models.base.Model._check_column_name_clashes(cls)
django.db.models.base.Model._check_constraints(cls,databases)
django.db.models.base.Model._check_default_pk(cls)
django.db.models.base.Model._check_field_name_clashes(cls)
django.db.models.base.Model._check_fields(cls,**kwargs)
django.db.models.base.Model._check_id_field(cls)
django.db.models.base.Model._check_index_together(cls)
django.db.models.base.Model._check_indexes(cls,databases)
django.db.models.base.Model._check_local_fields(cls,fields,option)
django.db.models.base.Model._check_long_column_names(cls,databases)
django.db.models.base.Model._check_m2m_through_same_relationship(cls)
django.db.models.base.Model._check_managers(cls,**kwargs)
django.db.models.base.Model._check_model(cls)
django.db.models.base.Model._check_model_name_db_lookup_clashes(cls)
django.db.models.base.Model._check_ordering(cls)
django.db.models.base.Model._check_property_name_related_field_accessor_clashes(cls)
django.db.models.base.Model._check_single_primary_key(cls)
django.db.models.base.Model._check_swappable(cls)
django.db.models.base.Model._check_unique_together(cls)
django.db.models.base.Model._do_insert(self,manager,using,fields,returning_fields,raw)
django.db.models.base.Model._do_update(self,base_qs,using,pk_val,values,update_fields,forced_update)
django.db.models.base.Model._get_FIELD_display(self,field)
django.db.models.base.Model._get_expr_references(cls,expr)
django.db.models.base.Model._get_next_or_previous_by_FIELD(self,field,is_next,**kwargs)
django.db.models.base.Model._get_next_or_previous_in_order(self,is_next)
django.db.models.base.Model._get_pk_val(self,meta=None)
django.db.models.base.Model._get_unique_checks(self,exclude=None)
django.db.models.base.Model._perform_date_checks(self,date_checks)
django.db.models.base.Model._perform_unique_checks(self,unique_checks)
django.db.models.base.Model._prepare_related_fields_for_save(self,operation_name)
django.db.models.base.Model._save_parents(self,cls,using,update_fields)
django.db.models.base.Model._save_table(self,raw=False,cls=None,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.base.Model._set_pk_val(self,value)
django.db.models.base.Model.check(cls,**kwargs)
django.db.models.base.Model.clean(self)
django.db.models.base.Model.clean_fields(self,exclude=None)
django.db.models.base.Model.date_error_message(self,lookup_type,field_name,unique_for)
django.db.models.base.Model.delete(self,using=None,keep_parents=False)
django.db.models.base.Model.from_db(cls,db,field_names,values)
django.db.models.base.Model.full_clean(self,exclude=None,validate_unique=True)
django.db.models.base.Model.get_deferred_fields(self)
django.db.models.base.Model.prepare_database_save(self,field)
django.db.models.base.Model.refresh_from_db(self,using=None,fields=None)
django.db.models.base.Model.save(self,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.base.Model.save_base(self,raw=False,force_insert=False,force_update=False,using=None,update_fields=None)
django.db.models.base.Model.serializable_value(self,field_name)
django.db.models.base.Model.unique_error_message(self,model_class,unique_check)
django.db.models.base.Model.validate_unique(self,exclude=None)
django.db.models.base.ModelBase(cls,name,bases,attrs,**kwargs)
django.db.models.base.ModelBase.__new__(cls,name,bases,attrs,**kwargs)
django.db.models.base.ModelBase._base_manager(cls)
django.db.models.base.ModelBase._default_manager(cls)
django.db.models.base.ModelBase._prepare(cls)
django.db.models.base.ModelBase.add_to_class(cls,name,value)
django.db.models.base.ModelState
django.db.models.base.ModelStateFieldsCacheDescriptor
django.db.models.base.ModelStateFieldsCacheDescriptor.__get__(self,instance,cls=None)
django.db.models.base._has_contribute_to_class(value)
django.db.models.base.make_foreign_order_accessors(model,related_model)
django.db.models.base.method_get_order(self,ordered_obj)
django.db.models.base.method_set_order(self,ordered_obj,id_list,using=None)
django.db.models.base.model_unpickle(model_id)
django.db.models.base.subclass_exception(name,bases,module,attached_to)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/manager.py----------------------------------------
A:django.db.models.manager.obj->copy.copy(self)
A:django.db.models.manager.module->import_module(module_name)
A:django.db.models.manager.queryset_only->getattr(method, 'queryset_only', None)
A:django.db.models.manager.new_methods[name]->create_method(name, method)
django.db.models.Manager(BaseManager.from_queryset(QuerySet))
django.db.models.ManagerDescriptor(self,manager)
django.db.models.ManagerDescriptor.__get__(self,instance,cls=None)
django.db.models.manager.BaseManager(self)
django.db.models.manager.BaseManager.__class_getitem__(cls,*args,**kwargs)
django.db.models.manager.BaseManager.__eq__(self,other)
django.db.models.manager.BaseManager.__hash__(self)
django.db.models.manager.BaseManager.__init__(self)
django.db.models.manager.BaseManager.__str__(self)
django.db.models.manager.BaseManager._get_queryset_methods(cls,queryset_class)
django.db.models.manager.BaseManager._set_creation_counter(self)
django.db.models.manager.BaseManager.all(self)
django.db.models.manager.BaseManager.check(self,**kwargs)
django.db.models.manager.BaseManager.contribute_to_class(self,cls,name)
django.db.models.manager.BaseManager.db(self)
django.db.models.manager.BaseManager.db_manager(self,using=None,hints=None)
django.db.models.manager.BaseManager.deconstruct(self)
django.db.models.manager.BaseManager.from_queryset(cls,queryset_class,class_name=None)
django.db.models.manager.BaseManager.get_queryset(self)
django.db.models.manager.EmptyManager(self,model)
django.db.models.manager.EmptyManager.__init__(self,model)
django.db.models.manager.EmptyManager.get_queryset(self)
django.db.models.manager.Manager(BaseManager.from_queryset(QuerySet))
django.db.models.manager.ManagerDescriptor(self,manager)
django.db.models.manager.ManagerDescriptor.__get__(self,instance,cls=None)
django.db.models.manager.ManagerDescriptor.__init__(self,manager)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/constraints.py----------------------------------------
A:django.db.models.constraints.path->path.replace('django.db.models.constraints', 'django.db.models').replace('django.db.models.constraints', 'django.db.models')
A:django.db.models.constraints.(_, args, kwargs)->self.deconstruct()
A:django.db.models.constraints.query->Query(model=model, alias_cols=False)
A:django.db.models.constraints.where->Query(model=model, alias_cols=False).build_where(self.condition)
A:django.db.models.constraints.compiler->Query(model=model, alias_cols=False).get_compiler(connection=schema_editor.connection)
A:django.db.models.constraints.(sql, params)->Query(model=model, alias_cols=False).build_where(self.condition).as_sql(compiler, schema_editor.connection)
A:django.db.models.constraints.check->self._get_check_sql(model, schema_editor)
A:django.db.models.constraints.(path, args, kwargs)->super().deconstruct()
A:django.db.models.constraints.self.fields->tuple(fields)
A:django.db.models.constraints.condition->self._get_condition_sql(model, schema_editor)
django.db.models.BaseConstraint(self,name)
django.db.models.BaseConstraint.clone(self)
django.db.models.BaseConstraint.constraint_sql(self,model,schema_editor)
django.db.models.BaseConstraint.create_sql(self,model,schema_editor)
django.db.models.BaseConstraint.deconstruct(self)
django.db.models.BaseConstraint.remove_sql(self,model,schema_editor)
django.db.models.CheckConstraint(self,*,check,name)
django.db.models.CheckConstraint.__eq__(self,other)
django.db.models.CheckConstraint.__repr__(self)
django.db.models.CheckConstraint._get_check_sql(self,model,schema_editor)
django.db.models.CheckConstraint.constraint_sql(self,model,schema_editor)
django.db.models.CheckConstraint.create_sql(self,model,schema_editor)
django.db.models.CheckConstraint.deconstruct(self)
django.db.models.CheckConstraint.remove_sql(self,model,schema_editor)
django.db.models.Deferrable(Enum)
django.db.models.UniqueConstraint(self,*,fields,name,condition=None,deferrable=None,include=None,opclasses=())
django.db.models.UniqueConstraint.__eq__(self,other)
django.db.models.UniqueConstraint.__repr__(self)
django.db.models.UniqueConstraint._get_condition_sql(self,model,schema_editor)
django.db.models.UniqueConstraint.constraint_sql(self,model,schema_editor)
django.db.models.UniqueConstraint.create_sql(self,model,schema_editor)
django.db.models.UniqueConstraint.deconstruct(self)
django.db.models.UniqueConstraint.remove_sql(self,model,schema_editor)
django.db.models.constraints.BaseConstraint(self,name)
django.db.models.constraints.BaseConstraint.__init__(self,name)
django.db.models.constraints.BaseConstraint.clone(self)
django.db.models.constraints.BaseConstraint.constraint_sql(self,model,schema_editor)
django.db.models.constraints.BaseConstraint.create_sql(self,model,schema_editor)
django.db.models.constraints.BaseConstraint.deconstruct(self)
django.db.models.constraints.BaseConstraint.remove_sql(self,model,schema_editor)
django.db.models.constraints.CheckConstraint(self,*,check,name)
django.db.models.constraints.CheckConstraint.__eq__(self,other)
django.db.models.constraints.CheckConstraint.__init__(self,*,check,name)
django.db.models.constraints.CheckConstraint.__repr__(self)
django.db.models.constraints.CheckConstraint._get_check_sql(self,model,schema_editor)
django.db.models.constraints.CheckConstraint.constraint_sql(self,model,schema_editor)
django.db.models.constraints.CheckConstraint.create_sql(self,model,schema_editor)
django.db.models.constraints.CheckConstraint.deconstruct(self)
django.db.models.constraints.CheckConstraint.remove_sql(self,model,schema_editor)
django.db.models.constraints.Deferrable(Enum)
django.db.models.constraints.UniqueConstraint(self,*,fields,name,condition=None,deferrable=None,include=None,opclasses=())
django.db.models.constraints.UniqueConstraint.__eq__(self,other)
django.db.models.constraints.UniqueConstraint.__init__(self,*,fields,name,condition=None,deferrable=None,include=None,opclasses=())
django.db.models.constraints.UniqueConstraint.__repr__(self)
django.db.models.constraints.UniqueConstraint._get_condition_sql(self,model,schema_editor)
django.db.models.constraints.UniqueConstraint.constraint_sql(self,model,schema_editor)
django.db.models.constraints.UniqueConstraint.create_sql(self,model,schema_editor)
django.db.models.constraints.UniqueConstraint.deconstruct(self)
django.db.models.constraints.UniqueConstraint.remove_sql(self,model,schema_editor)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/query_utils.py----------------------------------------
A:django.db.models.query_utils.PathInfo->namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')
A:django.db.models.query_utils.(_, args, kwargs)->self.deconstruct()
A:django.db.models.query_utils.obj->type(self)()
A:django.db.models.query_utils.(clause, joins)->query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False, check_filterable=False)
A:django.db.models.query_utils.path->path.replace('django.db.models.query_utils', 'django.db.models').replace('django.db.models.query_utils', 'django.db.models')
A:django.db.models.query_utils.args->tuple(self.children)
A:django.db.models.query_utils.val->self._check_parent_chain(instance)
A:django.db.models.query_utils.link_field->opts.get_ancestor_link(self.field.model)
A:django.db.models.query_utils.found->self._get_lookup(lookup_name)
A:django.db.models.query_utils.level_n_lookup->django.db.models.constants.LOOKUP_SEP.join(lookup_parts[0:n])
A:django.db.models.query_utils.clone->FilteredRelation(self.relation_name, condition=self.condition)
A:django.db.models.query_utils.where->query.build_filtered_relation_q(self.condition, reuse=set(self.path))
django.db.models.FilteredRelation(self,relation_name,*,condition=Q())
django.db.models.FilteredRelation.__eq__(self,other)
django.db.models.FilteredRelation.as_sql(self,compiler,connection)
django.db.models.FilteredRelation.clone(self)
django.db.models.FilteredRelation.resolve_expression(self,*args,**kwargs)
django.db.models.Q(self,*args,_connector=None,_negated=False,**kwargs)
django.db.models.Q.__and__(self,other)
django.db.models.Q.__invert__(self)
django.db.models.Q.__or__(self,other)
django.db.models.Q._combine(self,other,conn)
django.db.models.Q.deconstruct(self)
django.db.models.Q.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.query_utils.DeferredAttribute(self,field)
django.db.models.query_utils.DeferredAttribute.__get__(self,instance,cls=None)
django.db.models.query_utils.DeferredAttribute.__init__(self,field)
django.db.models.query_utils.DeferredAttribute._check_parent_chain(self,instance)
django.db.models.query_utils.FilteredRelation(self,relation_name,*,condition=Q())
django.db.models.query_utils.FilteredRelation.__eq__(self,other)
django.db.models.query_utils.FilteredRelation.__init__(self,relation_name,*,condition=Q())
django.db.models.query_utils.FilteredRelation.as_sql(self,compiler,connection)
django.db.models.query_utils.FilteredRelation.clone(self)
django.db.models.query_utils.FilteredRelation.resolve_expression(self,*args,**kwargs)
django.db.models.query_utils.InvalidQuery(Exception,metaclass=InvalidQueryType)
django.db.models.query_utils.InvalidQueryType(type)
django.db.models.query_utils.InvalidQueryType.__instancecheck__(self,instance)
django.db.models.query_utils.InvalidQueryType.__subclasscheck__(self,subclass)
django.db.models.query_utils.InvalidQueryType.__warn(self)
django.db.models.query_utils.InvalidQueryType._subclasses(self)
django.db.models.query_utils.Q(self,*args,_connector=None,_negated=False,**kwargs)
django.db.models.query_utils.Q.__and__(self,other)
django.db.models.query_utils.Q.__init__(self,*args,_connector=None,_negated=False,**kwargs)
django.db.models.query_utils.Q.__invert__(self)
django.db.models.query_utils.Q.__or__(self,other)
django.db.models.query_utils.Q._combine(self,other,conn)
django.db.models.query_utils.Q.deconstruct(self)
django.db.models.query_utils.Q.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.query_utils.RegisterLookupMixin
django.db.models.query_utils.RegisterLookupMixin._clear_cached_lookups(cls)
django.db.models.query_utils.RegisterLookupMixin._get_lookup(cls,lookup_name)
django.db.models.query_utils.RegisterLookupMixin._unregister_lookup(cls,lookup,lookup_name=None)
django.db.models.query_utils.RegisterLookupMixin.get_lookup(self,lookup_name)
django.db.models.query_utils.RegisterLookupMixin.get_lookups(cls)
django.db.models.query_utils.RegisterLookupMixin.get_transform(self,lookup_name)
django.db.models.query_utils.RegisterLookupMixin.merge_dicts(dicts)
django.db.models.query_utils.RegisterLookupMixin.register_lookup(cls,lookup,lookup_name=None)
django.db.models.query_utils.check_rel_lookup_compatibility(model,target_opts,field)
django.db.models.query_utils.refs_expression(lookup_parts,annotations)
django.db.models.query_utils.select_related_descend(field,restricted,requested,load_fields,reverse=False)
django.db.models.query_utils.subclasses(cls)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/reverse_related.py----------------------------------------
A:django.db.models.fields.reverse_related.qs->qs.order_by(*ordering).order_by(*ordering)
A:django.db.models.fields.reverse_related.state->self.__dict__.copy()
A:django.db.models.fields.reverse_related.field->opts.get_field(self.through_fields[0])
A:django.db.models.fields.reverse_related.rel->getattr(field, 'remote_field', None)
django.db.models.fields.reverse_related.ForeignObjectRel(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.fields.reverse_related.ForeignObjectRel.__eq__(self,other)
django.db.models.fields.reverse_related.ForeignObjectRel.__hash__(self)
django.db.models.fields.reverse_related.ForeignObjectRel.__init__(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.fields.reverse_related.ForeignObjectRel.__repr__(self)
django.db.models.fields.reverse_related.ForeignObjectRel.db_type(self)
django.db.models.fields.reverse_related.ForeignObjectRel.get_accessor_name(self,model=None)
django.db.models.fields.reverse_related.ForeignObjectRel.get_cache_name(self)
django.db.models.fields.reverse_related.ForeignObjectRel.get_choices(self,include_blank=True,blank_choice=BLANK_CHOICE_DASH,limit_choices_to=None,ordering=())
django.db.models.fields.reverse_related.ForeignObjectRel.get_extra_restriction(self,where_class,alias,related_alias)
django.db.models.fields.reverse_related.ForeignObjectRel.get_internal_type(self)
django.db.models.fields.reverse_related.ForeignObjectRel.get_joining_columns(self)
django.db.models.fields.reverse_related.ForeignObjectRel.get_lookup(self,lookup_name)
django.db.models.fields.reverse_related.ForeignObjectRel.get_path_info(self,filtered_relation=None)
django.db.models.fields.reverse_related.ForeignObjectRel.hidden(self)
django.db.models.fields.reverse_related.ForeignObjectRel.identity(self)
django.db.models.fields.reverse_related.ForeignObjectRel.is_hidden(self)
django.db.models.fields.reverse_related.ForeignObjectRel.many_to_many(self)
django.db.models.fields.reverse_related.ForeignObjectRel.many_to_one(self)
django.db.models.fields.reverse_related.ForeignObjectRel.name(self)
django.db.models.fields.reverse_related.ForeignObjectRel.one_to_many(self)
django.db.models.fields.reverse_related.ForeignObjectRel.one_to_one(self)
django.db.models.fields.reverse_related.ForeignObjectRel.related_model(self)
django.db.models.fields.reverse_related.ForeignObjectRel.remote_field(self)
django.db.models.fields.reverse_related.ForeignObjectRel.set_field_name(self)
django.db.models.fields.reverse_related.ForeignObjectRel.target_field(self)
django.db.models.fields.reverse_related.ManyToManyRel(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=True,through=None,through_fields=None,db_constraint=True)
django.db.models.fields.reverse_related.ManyToManyRel.__init__(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=True,through=None,through_fields=None,db_constraint=True)
django.db.models.fields.reverse_related.ManyToManyRel.get_related_field(self)
django.db.models.fields.reverse_related.ManyToManyRel.identity(self)
django.db.models.fields.reverse_related.ManyToOneRel(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.fields.reverse_related.ManyToOneRel.__getstate__(self)
django.db.models.fields.reverse_related.ManyToOneRel.__init__(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.fields.reverse_related.ManyToOneRel.get_related_field(self)
django.db.models.fields.reverse_related.ManyToOneRel.identity(self)
django.db.models.fields.reverse_related.ManyToOneRel.set_field_name(self)
django.db.models.fields.reverse_related.OneToOneRel(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.fields.reverse_related.OneToOneRel.__init__(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.reverse_related.ForeignObjectRel(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.reverse_related.ForeignObjectRel.__eq__(self,other)
django.db.models.reverse_related.ForeignObjectRel.__hash__(self)
django.db.models.reverse_related.ForeignObjectRel.__repr__(self)
django.db.models.reverse_related.ForeignObjectRel.db_type(self)
django.db.models.reverse_related.ForeignObjectRel.get_accessor_name(self,model=None)
django.db.models.reverse_related.ForeignObjectRel.get_cache_name(self)
django.db.models.reverse_related.ForeignObjectRel.get_choices(self,include_blank=True,blank_choice=BLANK_CHOICE_DASH,limit_choices_to=None,ordering=())
django.db.models.reverse_related.ForeignObjectRel.get_extra_restriction(self,where_class,alias,related_alias)
django.db.models.reverse_related.ForeignObjectRel.get_internal_type(self)
django.db.models.reverse_related.ForeignObjectRel.get_joining_columns(self)
django.db.models.reverse_related.ForeignObjectRel.get_lookup(self,lookup_name)
django.db.models.reverse_related.ForeignObjectRel.get_path_info(self,filtered_relation=None)
django.db.models.reverse_related.ForeignObjectRel.hidden(self)
django.db.models.reverse_related.ForeignObjectRel.identity(self)
django.db.models.reverse_related.ForeignObjectRel.is_hidden(self)
django.db.models.reverse_related.ForeignObjectRel.many_to_many(self)
django.db.models.reverse_related.ForeignObjectRel.many_to_one(self)
django.db.models.reverse_related.ForeignObjectRel.name(self)
django.db.models.reverse_related.ForeignObjectRel.one_to_many(self)
django.db.models.reverse_related.ForeignObjectRel.one_to_one(self)
django.db.models.reverse_related.ForeignObjectRel.related_model(self)
django.db.models.reverse_related.ForeignObjectRel.remote_field(self)
django.db.models.reverse_related.ForeignObjectRel.set_field_name(self)
django.db.models.reverse_related.ForeignObjectRel.target_field(self)
django.db.models.reverse_related.ManyToManyRel(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=True,through=None,through_fields=None,db_constraint=True)
django.db.models.reverse_related.ManyToManyRel.get_related_field(self)
django.db.models.reverse_related.ManyToManyRel.identity(self)
django.db.models.reverse_related.ManyToOneRel(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)
django.db.models.reverse_related.ManyToOneRel.__getstate__(self)
django.db.models.reverse_related.ManyToOneRel.get_related_field(self)
django.db.models.reverse_related.ManyToOneRel.identity(self)
django.db.models.reverse_related.ManyToOneRel.set_field_name(self)
django.db.models.reverse_related.OneToOneRel(self,field,to,field_name,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,on_delete=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/related_lookups.py----------------------------------------
A:django.db.models.fields.related_lookups.source->source.remote_field.model._meta.get_field(source.remote_field.field_name).remote_field.model._meta.get_field(source.remote_field.field_name)
A:django.db.models.fields.related_lookups.root_constraint->WhereNode()
A:django.db.models.fields.related_lookups.value_constraint->WhereNode()
A:django.db.models.fields.related_lookups.lookup_class->target.get_lookup(self.lookup_name)
A:django.db.models.fields.related_lookups.lookup->lookup_class(target.get_col(self.lhs.alias, source), val)
A:django.db.models.fields.related_lookups.self.rhs->get_normalized_value(self.rhs, self.lhs)
django.db.models.fields.related_lookups.MultiColSource(self,alias,targets,sources,field)
django.db.models.fields.related_lookups.MultiColSource.__init__(self,alias,targets,sources,field)
django.db.models.fields.related_lookups.MultiColSource.__repr__(self)
django.db.models.fields.related_lookups.MultiColSource.get_lookup(self,lookup)
django.db.models.fields.related_lookups.MultiColSource.relabeled_clone(self,relabels)
django.db.models.fields.related_lookups.RelatedExact(RelatedLookupMixin,Exact)
django.db.models.fields.related_lookups.RelatedGreaterThan(RelatedLookupMixin,GreaterThan)
django.db.models.fields.related_lookups.RelatedGreaterThanOrEqual(RelatedLookupMixin,GreaterThanOrEqual)
django.db.models.fields.related_lookups.RelatedIn(In)
django.db.models.fields.related_lookups.RelatedIn.as_sql(self,compiler,connection)
django.db.models.fields.related_lookups.RelatedIn.get_prep_lookup(self)
django.db.models.fields.related_lookups.RelatedIsNull(RelatedLookupMixin,IsNull)
django.db.models.fields.related_lookups.RelatedLessThan(RelatedLookupMixin,LessThan)
django.db.models.fields.related_lookups.RelatedLessThanOrEqual(RelatedLookupMixin,LessThanOrEqual)
django.db.models.fields.related_lookups.RelatedLookupMixin
django.db.models.fields.related_lookups.RelatedLookupMixin.as_sql(self,compiler,connection)
django.db.models.fields.related_lookups.RelatedLookupMixin.get_prep_lookup(self)
django.db.models.fields.related_lookups.get_normalized_value(value,lhs)
django.db.models.related_lookups.MultiColSource(self,alias,targets,sources,field)
django.db.models.related_lookups.MultiColSource.__repr__(self)
django.db.models.related_lookups.MultiColSource.get_lookup(self,lookup)
django.db.models.related_lookups.MultiColSource.relabeled_clone(self,relabels)
django.db.models.related_lookups.RelatedExact(RelatedLookupMixin,Exact)
django.db.models.related_lookups.RelatedGreaterThan(RelatedLookupMixin,GreaterThan)
django.db.models.related_lookups.RelatedGreaterThanOrEqual(RelatedLookupMixin,GreaterThanOrEqual)
django.db.models.related_lookups.RelatedIn(In)
django.db.models.related_lookups.RelatedIn.as_sql(self,compiler,connection)
django.db.models.related_lookups.RelatedIn.get_prep_lookup(self)
django.db.models.related_lookups.RelatedIsNull(RelatedLookupMixin,IsNull)
django.db.models.related_lookups.RelatedLessThan(RelatedLookupMixin,LessThan)
django.db.models.related_lookups.RelatedLessThanOrEqual(RelatedLookupMixin,LessThanOrEqual)
django.db.models.related_lookups.RelatedLookupMixin
django.db.models.related_lookups.RelatedLookupMixin.as_sql(self,compiler,connection)
django.db.models.related_lookups.RelatedLookupMixin.get_prep_lookup(self)
django.db.models.related_lookups.get_normalized_value(value,lhs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/mixins.py----------------------------------------
A:django.db.models.fields.mixins.NOT_PROVIDED->object()
A:django.db.models.fields.mixins.cache_name->self.get_cache_name()
A:django.db.models.fields.mixins.errors->super().check(**kwargs)
django.db.models.fields.mixins.CheckFieldDefaultMixin
django.db.models.fields.mixins.CheckFieldDefaultMixin._check_default(self)
django.db.models.fields.mixins.CheckFieldDefaultMixin.check(self,**kwargs)
django.db.models.fields.mixins.FieldCacheMixin
django.db.models.fields.mixins.FieldCacheMixin.delete_cached_value(self,instance)
django.db.models.fields.mixins.FieldCacheMixin.get_cache_name(self)
django.db.models.fields.mixins.FieldCacheMixin.get_cached_value(self,instance,default=NOT_PROVIDED)
django.db.models.fields.mixins.FieldCacheMixin.is_cached(self,instance)
django.db.models.fields.mixins.FieldCacheMixin.set_cached_value(self,instance,value)
django.db.models.mixins.CheckFieldDefaultMixin
django.db.models.mixins.CheckFieldDefaultMixin._check_default(self)
django.db.models.mixins.CheckFieldDefaultMixin.check(self,**kwargs)
django.db.models.mixins.FieldCacheMixin
django.db.models.mixins.FieldCacheMixin.delete_cached_value(self,instance)
django.db.models.mixins.FieldCacheMixin.get_cache_name(self)
django.db.models.mixins.FieldCacheMixin.get_cached_value(self,instance,default=NOT_PROVIDED)
django.db.models.mixins.FieldCacheMixin.is_cached(self,instance)
django.db.models.mixins.FieldCacheMixin.set_cached_value(self,instance,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/proxy.py----------------------------------------
django.db.models.OrderWrt(self,*args,**kwargs)
django.db.models.fields.proxy.OrderWrt(self,*args,**kwargs)
django.db.models.fields.proxy.OrderWrt.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/files.py----------------------------------------
A:django.db.models.fields.files.self._file->self.storage.open(self.name, 'rb')
A:django.db.models.fields.files.file->getattr(instance, self.attname)
A:django.db.models.fields.files.self.file->self.storage.open(self.name, mode)
A:django.db.models.fields.files.name->self.field.generate_filename(self.instance, name)
A:django.db.models.fields.files.self.name->self.storage.save(name, content, max_length=self.field.max_length)
A:django.db.models.fields.files.attr->self.field.attr_class(instance, self.field, file)
A:django.db.models.fields.files.file_copy->self.field.attr_class(instance, self.field, file.name)
A:django.db.models.fields.files.description->_('Image')
A:django.db.models.fields.files.self.storage->self.storage()
A:django.db.models.fields.files.(name, path, args, kwargs)->super().deconstruct()
A:django.db.models.fields.files.kwargs['storage']->getattr(self, '_storage_callable', self.storage)
A:django.db.models.fields.files.value->super().get_prep_value(value)
A:django.db.models.fields.files.filename->posixpath.join(dirname, filename)
A:django.db.models.fields.files.dirname->datetime.datetime.now().strftime(str(self.upload_to))
A:django.db.models.fields.files.previous_file->instance.__dict__.get(self.field.attname)
django.db.models.FileField(self,verbose_name=None,name=None,upload_to='',storage=None,**kwargs)
django.db.models.FileField._check_primary_key(self)
django.db.models.FileField._check_upload_to(self)
django.db.models.FileField.check(self,**kwargs)
django.db.models.FileField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.FileField.deconstruct(self)
django.db.models.FileField.formfield(self,**kwargs)
django.db.models.FileField.generate_filename(self,instance,filename)
django.db.models.FileField.get_internal_type(self)
django.db.models.FileField.get_prep_value(self,value)
django.db.models.FileField.pre_save(self,model_instance,add)
django.db.models.FileField.save_form_data(self,instance,data)
django.db.models.ImageField(self,verbose_name=None,name=None,width_field=None,height_field=None,**kwargs)
django.db.models.ImageField._check_image_library_installed(self)
django.db.models.ImageField.check(self,**kwargs)
django.db.models.ImageField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.ImageField.deconstruct(self)
django.db.models.ImageField.formfield(self,**kwargs)
django.db.models.ImageField.update_dimension_fields(self,instance,force=False,*args,**kwargs)
django.db.models.ImageFieldFile(ImageFile,FieldFile)
django.db.models.ImageFieldFile.delete(self,save=True)
django.db.models.fields.files.FieldFile(self,instance,field,name)
django.db.models.fields.files.FieldFile.__eq__(self,other)
django.db.models.fields.files.FieldFile.__getstate__(self)
django.db.models.fields.files.FieldFile.__hash__(self)
django.db.models.fields.files.FieldFile.__init__(self,instance,field,name)
django.db.models.fields.files.FieldFile.__setstate__(self,state)
django.db.models.fields.files.FieldFile._del_file(self)
django.db.models.fields.files.FieldFile._get_file(self)
django.db.models.fields.files.FieldFile._require_file(self)
django.db.models.fields.files.FieldFile._set_file(self,file)
django.db.models.fields.files.FieldFile.close(self)
django.db.models.fields.files.FieldFile.closed(self)
django.db.models.fields.files.FieldFile.delete(self,save=True)
django.db.models.fields.files.FieldFile.open(self,mode='rb')
django.db.models.fields.files.FieldFile.path(self)
django.db.models.fields.files.FieldFile.save(self,name,content,save=True)
django.db.models.fields.files.FieldFile.size(self)
django.db.models.fields.files.FieldFile.url(self)
django.db.models.fields.files.FileDescriptor(DeferredAttribute)
django.db.models.fields.files.FileDescriptor.__get__(self,instance,cls=None)
django.db.models.fields.files.FileDescriptor.__set__(self,instance,value)
django.db.models.fields.files.FileField(self,verbose_name=None,name=None,upload_to='',storage=None,**kwargs)
django.db.models.fields.files.FileField.__init__(self,verbose_name=None,name=None,upload_to='',storage=None,**kwargs)
django.db.models.fields.files.FileField._check_primary_key(self)
django.db.models.fields.files.FileField._check_upload_to(self)
django.db.models.fields.files.FileField.check(self,**kwargs)
django.db.models.fields.files.FileField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.fields.files.FileField.deconstruct(self)
django.db.models.fields.files.FileField.formfield(self,**kwargs)
django.db.models.fields.files.FileField.generate_filename(self,instance,filename)
django.db.models.fields.files.FileField.get_internal_type(self)
django.db.models.fields.files.FileField.get_prep_value(self,value)
django.db.models.fields.files.FileField.pre_save(self,model_instance,add)
django.db.models.fields.files.FileField.save_form_data(self,instance,data)
django.db.models.fields.files.ImageField(self,verbose_name=None,name=None,width_field=None,height_field=None,**kwargs)
django.db.models.fields.files.ImageField.__init__(self,verbose_name=None,name=None,width_field=None,height_field=None,**kwargs)
django.db.models.fields.files.ImageField._check_image_library_installed(self)
django.db.models.fields.files.ImageField.check(self,**kwargs)
django.db.models.fields.files.ImageField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.fields.files.ImageField.deconstruct(self)
django.db.models.fields.files.ImageField.formfield(self,**kwargs)
django.db.models.fields.files.ImageField.update_dimension_fields(self,instance,force=False,*args,**kwargs)
django.db.models.fields.files.ImageFieldFile(ImageFile,FieldFile)
django.db.models.fields.files.ImageFieldFile.delete(self,save=True)
django.db.models.fields.files.ImageFileDescriptor(FileDescriptor)
django.db.models.fields.files.ImageFileDescriptor.__set__(self,instance,value)
django.db.models.files.FieldFile(self,instance,field,name)
django.db.models.files.FieldFile.__eq__(self,other)
django.db.models.files.FieldFile.__getstate__(self)
django.db.models.files.FieldFile.__hash__(self)
django.db.models.files.FieldFile.__setstate__(self,state)
django.db.models.files.FieldFile._del_file(self)
django.db.models.files.FieldFile._get_file(self)
django.db.models.files.FieldFile._require_file(self)
django.db.models.files.FieldFile._set_file(self,file)
django.db.models.files.FieldFile.close(self)
django.db.models.files.FieldFile.closed(self)
django.db.models.files.FieldFile.delete(self,save=True)
django.db.models.files.FieldFile.open(self,mode='rb')
django.db.models.files.FieldFile.path(self)
django.db.models.files.FieldFile.save(self,name,content,save=True)
django.db.models.files.FieldFile.size(self)
django.db.models.files.FieldFile.url(self)
django.db.models.files.FileDescriptor(DeferredAttribute)
django.db.models.files.FileDescriptor.__get__(self,instance,cls=None)
django.db.models.files.FileDescriptor.__set__(self,instance,value)
django.db.models.files.ImageFileDescriptor(FileDescriptor)
django.db.models.files.ImageFileDescriptor.__set__(self,instance,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/related.py----------------------------------------
A:django.db.models.fields.related.rel_query_name->self.related_query_name()
A:django.db.models.fields.related.rel_is_string->isinstance(self.remote_field.model, str)
A:django.db.models.fields.related.rel_is_hidden->self.remote_field.is_hidden()
A:django.db.models.fields.related.rel_name->self.remote_field.get_accessor_name()
A:django.db.models.fields.related.(name, path, args, kwargs)->super().deconstruct()
A:django.db.models.fields.related.descriptor_filter->self.get_extra_descriptor_filter(obj)
A:django.db.models.fields.related.base_q->Q(**base_filter)
A:django.db.models.fields.related.rel->self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, parent_link=parent_link, on_delete=on_delete)
A:django.db.models.fields.related.has_unique_constraint->any((u <= foreign_fields for u in unique_foreign_fields))
A:django.db.models.fields.related.field_combination->', '.join(("'%s'" % rel_field.name for rel_field in self.foreign_related_fields))
A:django.db.models.fields.related.(app_label, model_name)->self.remote_field.model.split('.')
A:django.db.models.fields.related.kwargs['to']->SettingsReference(kwargs['to'], swappable_setting)
A:django.db.models.fields.related.possible_parent_link->opts.get_ancestor_link(field.model)
A:django.db.models.fields.related.(attname, column)->super().get_attname_column()
A:django.db.models.fields.related.bases->inspect.getmro(cls)
A:django.db.models.fields.related.description->_('Many-to-many relationship')
A:django.db.models.fields.related.kwargs['rel']->self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)
A:django.db.models.fields.related.on_delete->getattr(self.remote_field, 'on_delete', None)
A:django.db.models.fields.related.to_meta->getattr(self.remote_field.model, '_meta', None)
A:django.db.models.fields.related.using->django.db.router.db_for_read(self.remote_field.model, instance=model_instance)
A:django.db.models.fields.related.qs->qs.complex_filter(self.get_limit_choices_to()).complex_filter(self.get_limit_choices_to())
A:django.db.models.fields.related.related_fields->super().resolve_related_fields()
A:django.db.models.fields.related.attname->self.get_attname()
A:django.db.models.fields.related.field_default->super().get_default()
A:django.db.models.fields.related.converters->super().get_db_converters(connection)
A:django.db.models.fields.related.to_model->resolve_relation(from_model, self.remote_field.model)
A:django.db.models.fields.related.meta->type('Meta', (), {'db_table': field._get_m2m_db_table(klass._meta), 'auto_created': klass, 'app_label': klass._meta.app_label, 'db_tablespace': klass._meta.db_tablespace, 'unique_together': (from_, to), 'verbose_name': _('%(from)s-%(to)s relationship') % {'from': from_, 'to': to}, 'verbose_name_plural': _('%(from)s-%(to)s relationships') % {'from': from_, 'to': to}, 'apps': field.model._meta.apps})
A:django.db.models.fields.related.seen_self->sum((from_model == getattr(field.remote_field, 'model', None) for field in self.remote_field.through._meta.fields))
A:django.db.models.fields.related.seen_from->sum((from_model == getattr(field.remote_field, 'model', None) for field in self.remote_field.through._meta.fields))
A:django.db.models.fields.related.seen_to->sum((to_model == getattr(field.remote_field, 'model', None) for field in self.remote_field.through._meta.fields))
A:django.db.models.fields.related.field->through._meta.get_field(field_name)
A:django.db.models.fields.related.m2m_db_table->self.m2m_db_table()
A:django.db.models.fields.related.model->registered_tables.get(m2m_db_table)
A:django.db.models.fields.related.linkfield1->int_model._meta.get_field(self.m2m_field_name())
A:django.db.models.fields.related.linkfield2->int_model._meta.get_field(self.m2m_reverse_field_name())
A:django.db.models.fields.related.join1infos->int_model._meta.get_field(self.m2m_reverse_field_name()).get_reverse_path_info()
A:django.db.models.fields.related.join2infos->int_model._meta.get_field(self.m2m_field_name()).get_path_info(filtered_relation)
A:django.db.models.fields.related.intermediate_infos->join2_initial.get_path_from_parent(join1_final.model)
A:django.db.models.fields.related.self.remote_field.through->create_many_to_many_intermediary_model(self, cls)
A:django.db.models.fields.related.self.m2m_db_table->partial(self._get_m2m_db_table, cls._meta)
A:django.db.models.fields.related.self.m2m_column_name->partial(self._get_m2m_attr, related, 'column')
A:django.db.models.fields.related.self.m2m_reverse_name->partial(self._get_m2m_reverse_attr, related, 'column')
A:django.db.models.fields.related.self.m2m_field_name->partial(self._get_m2m_attr, related, 'name')
A:django.db.models.fields.related.self.m2m_reverse_field_name->partial(self._get_m2m_reverse_attr, related, 'name')
A:django.db.models.fields.related.get_m2m_rel->partial(self._get_m2m_attr, related, 'remote_field')
A:django.db.models.fields.related.get_m2m_reverse_rel->partial(self._get_m2m_reverse_attr, related, 'remote_field')
A:django.db.models.fields.related.initial->initial()
django.db.models.ForeignKey(self,to,on_delete,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,to_field=None,db_constraint=True,**kwargs)
django.db.models.ForeignKey._check_on_delete(self)
django.db.models.ForeignKey._check_unique(self,**kwargs)
django.db.models.ForeignKey.check(self,**kwargs)
django.db.models.ForeignKey.contribute_to_related_class(self,cls,related)
django.db.models.ForeignKey.convert_empty_strings(self,value,expression,connection)
django.db.models.ForeignKey.db_check(self,connection)
django.db.models.ForeignKey.db_parameters(self,connection)
django.db.models.ForeignKey.db_type(self,connection)
django.db.models.ForeignKey.deconstruct(self)
django.db.models.ForeignKey.formfield(self,*,using=None,**kwargs)
django.db.models.ForeignKey.get_attname(self)
django.db.models.ForeignKey.get_attname_column(self)
django.db.models.ForeignKey.get_col(self,alias,output_field=None)
django.db.models.ForeignKey.get_db_converters(self,connection)
django.db.models.ForeignKey.get_db_prep_save(self,value,connection)
django.db.models.ForeignKey.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.ForeignKey.get_default(self)
django.db.models.ForeignKey.get_prep_value(self,value)
django.db.models.ForeignKey.get_reverse_path_info(self,filtered_relation=None)
django.db.models.ForeignKey.resolve_related_fields(self)
django.db.models.ForeignKey.target_field(self)
django.db.models.ForeignKey.to_python(self,value)
django.db.models.ForeignKey.validate(self,value,model_instance)
django.db.models.ForeignObject(self,to,on_delete,from_fields,to_fields,rel=None,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,swappable=True,**kwargs)
django.db.models.ForeignObject._check_to_fields_exist(self)
django.db.models.ForeignObject._check_unique_target(self)
django.db.models.ForeignObject.check(self,**kwargs)
django.db.models.ForeignObject.contribute_to_class(self,cls,name,private_only=False,**kwargs)
django.db.models.ForeignObject.contribute_to_related_class(self,cls,related)
django.db.models.ForeignObject.deconstruct(self)
django.db.models.ForeignObject.foreign_related_fields(self)
django.db.models.ForeignObject.get_attname_column(self)
django.db.models.ForeignObject.get_extra_descriptor_filter(self,instance)
django.db.models.ForeignObject.get_extra_restriction(self,where_class,alias,related_alias)
django.db.models.ForeignObject.get_foreign_related_value(self,instance)
django.db.models.ForeignObject.get_instance_value_for_fields(instance,fields)
django.db.models.ForeignObject.get_joining_columns(self,reverse_join=False)
django.db.models.ForeignObject.get_local_related_value(self,instance)
django.db.models.ForeignObject.get_lookups(cls)
django.db.models.ForeignObject.get_path_info(self,filtered_relation=None)
django.db.models.ForeignObject.get_reverse_joining_columns(self)
django.db.models.ForeignObject.get_reverse_path_info(self,filtered_relation=None)
django.db.models.ForeignObject.local_related_fields(self)
django.db.models.ForeignObject.related_fields(self)
django.db.models.ForeignObject.resolve_related_fields(self)
django.db.models.ForeignObject.reverse_related_fields(self)
django.db.models.ManyToManyField(self,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=None,through=None,through_fields=None,db_constraint=True,db_table=None,swappable=True,**kwargs)
django.db.models.ManyToManyField._check_ignored_options(self,**kwargs)
django.db.models.ManyToManyField._check_relationship_model(self,from_model=None,**kwargs)
django.db.models.ManyToManyField._check_table_uniqueness(self,**kwargs)
django.db.models.ManyToManyField._check_unique(self,**kwargs)
django.db.models.ManyToManyField._get_m2m_attr(self,related,attr)
django.db.models.ManyToManyField._get_m2m_db_table(self,opts)
django.db.models.ManyToManyField._get_m2m_reverse_attr(self,related,attr)
django.db.models.ManyToManyField._get_path_info(self,direct=False,filtered_relation=None)
django.db.models.ManyToManyField.check(self,**kwargs)
django.db.models.ManyToManyField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.ManyToManyField.contribute_to_related_class(self,cls,related)
django.db.models.ManyToManyField.db_check(self,connection)
django.db.models.ManyToManyField.db_parameters(self,connection)
django.db.models.ManyToManyField.db_type(self,connection)
django.db.models.ManyToManyField.deconstruct(self)
django.db.models.ManyToManyField.formfield(self,*,using=None,**kwargs)
django.db.models.ManyToManyField.get_path_info(self,filtered_relation=None)
django.db.models.ManyToManyField.get_reverse_path_info(self,filtered_relation=None)
django.db.models.ManyToManyField.save_form_data(self,instance,data)
django.db.models.ManyToManyField.set_attributes_from_rel(self)
django.db.models.ManyToManyField.value_from_object(self,obj)
django.db.models.OneToOneField(self,to,on_delete,to_field=None,**kwargs)
django.db.models.OneToOneField._check_unique(self,**kwargs)
django.db.models.OneToOneField.deconstruct(self)
django.db.models.OneToOneField.formfield(self,**kwargs)
django.db.models.OneToOneField.save_form_data(self,instance,data)
django.db.models.fields.related.ForeignKey(self,to,on_delete,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,to_field=None,db_constraint=True,**kwargs)
django.db.models.fields.related.ForeignKey.__init__(self,to,on_delete,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,to_field=None,db_constraint=True,**kwargs)
django.db.models.fields.related.ForeignKey._check_on_delete(self)
django.db.models.fields.related.ForeignKey._check_unique(self,**kwargs)
django.db.models.fields.related.ForeignKey.check(self,**kwargs)
django.db.models.fields.related.ForeignKey.contribute_to_related_class(self,cls,related)
django.db.models.fields.related.ForeignKey.convert_empty_strings(self,value,expression,connection)
django.db.models.fields.related.ForeignKey.db_check(self,connection)
django.db.models.fields.related.ForeignKey.db_parameters(self,connection)
django.db.models.fields.related.ForeignKey.db_type(self,connection)
django.db.models.fields.related.ForeignKey.deconstruct(self)
django.db.models.fields.related.ForeignKey.formfield(self,*,using=None,**kwargs)
django.db.models.fields.related.ForeignKey.get_attname(self)
django.db.models.fields.related.ForeignKey.get_attname_column(self)
django.db.models.fields.related.ForeignKey.get_col(self,alias,output_field=None)
django.db.models.fields.related.ForeignKey.get_db_converters(self,connection)
django.db.models.fields.related.ForeignKey.get_db_prep_save(self,value,connection)
django.db.models.fields.related.ForeignKey.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.related.ForeignKey.get_default(self)
django.db.models.fields.related.ForeignKey.get_prep_value(self,value)
django.db.models.fields.related.ForeignKey.get_reverse_path_info(self,filtered_relation=None)
django.db.models.fields.related.ForeignKey.resolve_related_fields(self)
django.db.models.fields.related.ForeignKey.target_field(self)
django.db.models.fields.related.ForeignKey.to_python(self,value)
django.db.models.fields.related.ForeignKey.validate(self,value,model_instance)
django.db.models.fields.related.ForeignObject(self,to,on_delete,from_fields,to_fields,rel=None,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,swappable=True,**kwargs)
django.db.models.fields.related.ForeignObject.__init__(self,to,on_delete,from_fields,to_fields,rel=None,related_name=None,related_query_name=None,limit_choices_to=None,parent_link=False,swappable=True,**kwargs)
django.db.models.fields.related.ForeignObject._check_to_fields_exist(self)
django.db.models.fields.related.ForeignObject._check_unique_target(self)
django.db.models.fields.related.ForeignObject.check(self,**kwargs)
django.db.models.fields.related.ForeignObject.contribute_to_class(self,cls,name,private_only=False,**kwargs)
django.db.models.fields.related.ForeignObject.contribute_to_related_class(self,cls,related)
django.db.models.fields.related.ForeignObject.deconstruct(self)
django.db.models.fields.related.ForeignObject.foreign_related_fields(self)
django.db.models.fields.related.ForeignObject.get_attname_column(self)
django.db.models.fields.related.ForeignObject.get_extra_descriptor_filter(self,instance)
django.db.models.fields.related.ForeignObject.get_extra_restriction(self,where_class,alias,related_alias)
django.db.models.fields.related.ForeignObject.get_foreign_related_value(self,instance)
django.db.models.fields.related.ForeignObject.get_instance_value_for_fields(instance,fields)
django.db.models.fields.related.ForeignObject.get_joining_columns(self,reverse_join=False)
django.db.models.fields.related.ForeignObject.get_local_related_value(self,instance)
django.db.models.fields.related.ForeignObject.get_lookups(cls)
django.db.models.fields.related.ForeignObject.get_path_info(self,filtered_relation=None)
django.db.models.fields.related.ForeignObject.get_reverse_joining_columns(self)
django.db.models.fields.related.ForeignObject.get_reverse_path_info(self,filtered_relation=None)
django.db.models.fields.related.ForeignObject.local_related_fields(self)
django.db.models.fields.related.ForeignObject.related_fields(self)
django.db.models.fields.related.ForeignObject.resolve_related_fields(self)
django.db.models.fields.related.ForeignObject.reverse_related_fields(self)
django.db.models.fields.related.ManyToManyField(self,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=None,through=None,through_fields=None,db_constraint=True,db_table=None,swappable=True,**kwargs)
django.db.models.fields.related.ManyToManyField.__init__(self,to,related_name=None,related_query_name=None,limit_choices_to=None,symmetrical=None,through=None,through_fields=None,db_constraint=True,db_table=None,swappable=True,**kwargs)
django.db.models.fields.related.ManyToManyField._check_ignored_options(self,**kwargs)
django.db.models.fields.related.ManyToManyField._check_relationship_model(self,from_model=None,**kwargs)
django.db.models.fields.related.ManyToManyField._check_table_uniqueness(self,**kwargs)
django.db.models.fields.related.ManyToManyField._check_unique(self,**kwargs)
django.db.models.fields.related.ManyToManyField._get_m2m_attr(self,related,attr)
django.db.models.fields.related.ManyToManyField._get_m2m_db_table(self,opts)
django.db.models.fields.related.ManyToManyField._get_m2m_reverse_attr(self,related,attr)
django.db.models.fields.related.ManyToManyField._get_path_info(self,direct=False,filtered_relation=None)
django.db.models.fields.related.ManyToManyField.check(self,**kwargs)
django.db.models.fields.related.ManyToManyField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.fields.related.ManyToManyField.contribute_to_related_class(self,cls,related)
django.db.models.fields.related.ManyToManyField.db_check(self,connection)
django.db.models.fields.related.ManyToManyField.db_parameters(self,connection)
django.db.models.fields.related.ManyToManyField.db_type(self,connection)
django.db.models.fields.related.ManyToManyField.deconstruct(self)
django.db.models.fields.related.ManyToManyField.formfield(self,*,using=None,**kwargs)
django.db.models.fields.related.ManyToManyField.get_path_info(self,filtered_relation=None)
django.db.models.fields.related.ManyToManyField.get_reverse_path_info(self,filtered_relation=None)
django.db.models.fields.related.ManyToManyField.save_form_data(self,instance,data)
django.db.models.fields.related.ManyToManyField.set_attributes_from_rel(self)
django.db.models.fields.related.ManyToManyField.value_from_object(self,obj)
django.db.models.fields.related.OneToOneField(self,to,on_delete,to_field=None,**kwargs)
django.db.models.fields.related.OneToOneField.__init__(self,to,on_delete,to_field=None,**kwargs)
django.db.models.fields.related.OneToOneField._check_unique(self,**kwargs)
django.db.models.fields.related.OneToOneField.deconstruct(self)
django.db.models.fields.related.OneToOneField.formfield(self,**kwargs)
django.db.models.fields.related.OneToOneField.save_form_data(self,instance,data)
django.db.models.fields.related.RelatedField(FieldCacheMixin,Field)
django.db.models.fields.related.RelatedField._check_clashes(self)
django.db.models.fields.related.RelatedField._check_referencing_to_swapped_model(self)
django.db.models.fields.related.RelatedField._check_related_name_is_valid(self)
django.db.models.fields.related.RelatedField._check_related_query_name_is_valid(self)
django.db.models.fields.related.RelatedField._check_relation_model_exists(self)
django.db.models.fields.related.RelatedField.check(self,**kwargs)
django.db.models.fields.related.RelatedField.contribute_to_class(self,cls,name,private_only=False,**kwargs)
django.db.models.fields.related.RelatedField.db_type(self,connection)
django.db.models.fields.related.RelatedField.deconstruct(self)
django.db.models.fields.related.RelatedField.do_related_class(self,other,cls)
django.db.models.fields.related.RelatedField.formfield(self,**kwargs)
django.db.models.fields.related.RelatedField.get_cache_name(self)
django.db.models.fields.related.RelatedField.get_forward_related_filter(self,obj)
django.db.models.fields.related.RelatedField.get_limit_choices_to(self)
django.db.models.fields.related.RelatedField.get_reverse_related_filter(self,obj)
django.db.models.fields.related.RelatedField.related_model(self)
django.db.models.fields.related.RelatedField.related_query_name(self)
django.db.models.fields.related.RelatedField.set_attributes_from_rel(self)
django.db.models.fields.related.RelatedField.swappable_setting(self)
django.db.models.fields.related.RelatedField.target_field(self)
django.db.models.fields.related.create_many_to_many_intermediary_model(field,klass)
django.db.models.fields.related.lazy_related_operation(function,model,*related_models,**kwargs)
django.db.models.fields.related.resolve_relation(scope_model,relation)
django.db.models.related.RelatedField(FieldCacheMixin,Field)
django.db.models.related.RelatedField._check_clashes(self)
django.db.models.related.RelatedField._check_referencing_to_swapped_model(self)
django.db.models.related.RelatedField._check_related_name_is_valid(self)
django.db.models.related.RelatedField._check_related_query_name_is_valid(self)
django.db.models.related.RelatedField._check_relation_model_exists(self)
django.db.models.related.RelatedField.check(self,**kwargs)
django.db.models.related.RelatedField.contribute_to_class(self,cls,name,private_only=False,**kwargs)
django.db.models.related.RelatedField.db_type(self,connection)
django.db.models.related.RelatedField.deconstruct(self)
django.db.models.related.RelatedField.do_related_class(self,other,cls)
django.db.models.related.RelatedField.formfield(self,**kwargs)
django.db.models.related.RelatedField.get_cache_name(self)
django.db.models.related.RelatedField.get_forward_related_filter(self,obj)
django.db.models.related.RelatedField.get_limit_choices_to(self)
django.db.models.related.RelatedField.get_reverse_related_filter(self,obj)
django.db.models.related.RelatedField.related_model(self)
django.db.models.related.RelatedField.related_query_name(self)
django.db.models.related.RelatedField.set_attributes_from_rel(self)
django.db.models.related.RelatedField.swappable_setting(self)
django.db.models.related.RelatedField.target_field(self)
django.db.models.related.create_many_to_many_intermediary_model(field,klass)
django.db.models.related.lazy_related_operation(function,model,*related_models,**kwargs)
django.db.models.related.resolve_relation(scope_model,relation)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/json.py----------------------------------------
A:django.db.models.fields.json.description->_('A JSON object')
A:django.db.models.fields.json.errors->super().check(**kwargs)
A:django.db.models.fields.json.(name, path, args, kwargs)->super().deconstruct()
A:django.db.models.fields.json.transform->super().get_transform(name)
A:django.db.models.fields.json.num->int(key_transform)
A:django.db.models.fields.json.(lhs, lhs_params)->super().process_lhs(compiler, connection)
A:django.db.models.fields.json.(rhs, rhs_params)->super().process_rhs(compiler, connection)
A:django.db.models.fields.json.(lhs, lhs_params, lhs_key_transforms)->self.lhs.preprocess_lhs(compiler, connection)
A:django.db.models.fields.json.lhs_json_path->compile_json_path(lhs_key_transforms)
A:django.db.models.fields.json.(*_, rhs_key_transforms)->self.rhs.preprocess_lhs(compiler, connection)
A:django.db.models.fields.json.(sql, params)->super().resolve_expression_parameter(compiler, connection, sql, param)
A:django.db.models.fields.json.self.lhs->KeyTransform(key, self.lhs)
A:django.db.models.fields.json.self.key_name->str(key_name)
A:django.db.models.fields.json.(lhs, params)->compiler.compile(previous)
A:django.db.models.fields.json.(lhs, params, key_transforms)->self.preprocess_lhs(compiler, connection)
A:django.db.models.fields.json.json_path->compile_json_path(key_transforms)
A:django.db.models.fields.json.lookup->int(self.key_name)
A:django.db.models.fields.json.key_text_transform->KeyTextTransform(key_transform.key_name, *key_transform.source_expressions, **key_transform.extra)
A:django.db.models.fields.json.(lhs, lhs_params, _)->self.lhs.preprocess_lhs(compiler, connection)
A:django.db.models.fields.json.value->json.loads(value)
A:django.db.models.fields.json.(lhs, *_)->self.lhs.preprocess_lhs(compiler, connection)
A:django.db.models.fields.json.has_key_expr->HasKey(self.lhs.lhs, self.lhs.key_name)
A:django.db.models.fields.json.(has_key_sql, has_key_params)->HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)
A:django.db.models.fields.json.is_null_expr->self.lhs.get_lookup('isnull')(self.lhs, True)
A:django.db.models.fields.json.(is_null_sql, is_null_params)->self.lhs.get_lookup('isnull')(self.lhs, True).as_sql(compiler, connection)
django.db.models.JSONField(self,verbose_name=None,name=None,encoder=None,decoder=None,**kwargs)
django.db.models.JSONField._check_supported(self,databases)
django.db.models.JSONField.check(self,**kwargs)
django.db.models.JSONField.deconstruct(self)
django.db.models.JSONField.formfield(self,**kwargs)
django.db.models.JSONField.from_db_value(self,value,expression,connection)
django.db.models.JSONField.get_internal_type(self)
django.db.models.JSONField.get_prep_value(self,value)
django.db.models.JSONField.get_transform(self,name)
django.db.models.JSONField.validate(self,value,model_instance)
django.db.models.JSONField.value_to_string(self,obj)
django.db.models.fields.json.CaseInsensitiveMixin
django.db.models.fields.json.CaseInsensitiveMixin.process_lhs(self,compiler,connection)
django.db.models.fields.json.CaseInsensitiveMixin.process_rhs(self,compiler,connection)
django.db.models.fields.json.ContainedBy(PostgresOperatorLookup)
django.db.models.fields.json.ContainedBy.as_sql(self,compiler,connection)
django.db.models.fields.json.DataContains(PostgresOperatorLookup)
django.db.models.fields.json.DataContains.as_sql(self,compiler,connection)
django.db.models.fields.json.HasAnyKeys(HasKeys)
django.db.models.fields.json.HasKey(HasKeyLookup)
django.db.models.fields.json.HasKeyLookup(PostgresOperatorLookup)
django.db.models.fields.json.HasKeyLookup.as_mysql(self,compiler,connection)
django.db.models.fields.json.HasKeyLookup.as_oracle(self,compiler,connection)
django.db.models.fields.json.HasKeyLookup.as_postgresql(self,compiler,connection)
django.db.models.fields.json.HasKeyLookup.as_sql(self,compiler,connection,template=None)
django.db.models.fields.json.HasKeyLookup.as_sqlite(self,compiler,connection)
django.db.models.fields.json.HasKeys(HasKeyLookup)
django.db.models.fields.json.HasKeys.get_prep_lookup(self)
django.db.models.fields.json.JSONExact(lookups.Exact)
django.db.models.fields.json.JSONExact.process_lhs(self,compiler,connection)
django.db.models.fields.json.JSONExact.process_rhs(self,compiler,connection)
django.db.models.fields.json.JSONField(self,verbose_name=None,name=None,encoder=None,decoder=None,**kwargs)
django.db.models.fields.json.JSONField.__init__(self,verbose_name=None,name=None,encoder=None,decoder=None,**kwargs)
django.db.models.fields.json.JSONField._check_supported(self,databases)
django.db.models.fields.json.JSONField.check(self,**kwargs)
django.db.models.fields.json.JSONField.deconstruct(self)
django.db.models.fields.json.JSONField.formfield(self,**kwargs)
django.db.models.fields.json.JSONField.from_db_value(self,value,expression,connection)
django.db.models.fields.json.JSONField.get_internal_type(self)
django.db.models.fields.json.JSONField.get_prep_value(self,value)
django.db.models.fields.json.JSONField.get_transform(self,name)
django.db.models.fields.json.JSONField.validate(self,value,model_instance)
django.db.models.fields.json.JSONField.value_to_string(self,obj)
django.db.models.fields.json.KeyTextTransform(KeyTransform)
django.db.models.fields.json.KeyTransform(self,key_name,*args,**kwargs)
django.db.models.fields.json.KeyTransform.__init__(self,key_name,*args,**kwargs)
django.db.models.fields.json.KeyTransform.as_mysql(self,compiler,connection)
django.db.models.fields.json.KeyTransform.as_oracle(self,compiler,connection)
django.db.models.fields.json.KeyTransform.as_postgresql(self,compiler,connection)
django.db.models.fields.json.KeyTransform.as_sqlite(self,compiler,connection)
django.db.models.fields.json.KeyTransform.preprocess_lhs(self,compiler,connection)
django.db.models.fields.json.KeyTransformEndsWith(KeyTransformTextLookupMixin,lookups.EndsWith)
django.db.models.fields.json.KeyTransformExact(JSONExact)
django.db.models.fields.json.KeyTransformExact.as_oracle(self,compiler,connection)
django.db.models.fields.json.KeyTransformExact.process_lhs(self,compiler,connection)
django.db.models.fields.json.KeyTransformExact.process_rhs(self,compiler,connection)
django.db.models.fields.json.KeyTransformFactory(self,key_name)
django.db.models.fields.json.KeyTransformFactory.__init__(self,key_name)
django.db.models.fields.json.KeyTransformGt(KeyTransformNumericLookupMixin,lookups.GreaterThan)
django.db.models.fields.json.KeyTransformGte(KeyTransformNumericLookupMixin,lookups.GreaterThanOrEqual)
django.db.models.fields.json.KeyTransformIContains(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IContains)
django.db.models.fields.json.KeyTransformIEndsWith(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IEndsWith)
django.db.models.fields.json.KeyTransformIExact(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IExact)
django.db.models.fields.json.KeyTransformIRegex(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IRegex)
django.db.models.fields.json.KeyTransformIStartsWith(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IStartsWith)
django.db.models.fields.json.KeyTransformIn(lookups.In)
django.db.models.fields.json.KeyTransformIn.resolve_expression_parameter(self,compiler,connection,sql,param)
django.db.models.fields.json.KeyTransformIsNull(lookups.IsNull)
django.db.models.fields.json.KeyTransformIsNull.as_oracle(self,compiler,connection)
django.db.models.fields.json.KeyTransformIsNull.as_sqlite(self,compiler,connection)
django.db.models.fields.json.KeyTransformLt(KeyTransformNumericLookupMixin,lookups.LessThan)
django.db.models.fields.json.KeyTransformLte(KeyTransformNumericLookupMixin,lookups.LessThanOrEqual)
django.db.models.fields.json.KeyTransformNumericLookupMixin
django.db.models.fields.json.KeyTransformNumericLookupMixin.process_rhs(self,compiler,connection)
django.db.models.fields.json.KeyTransformRegex(KeyTransformTextLookupMixin,lookups.Regex)
django.db.models.fields.json.KeyTransformStartsWith(KeyTransformTextLookupMixin,lookups.StartsWith)
django.db.models.fields.json.KeyTransformTextLookupMixin(self,key_transform,*args,**kwargs)
django.db.models.fields.json.KeyTransformTextLookupMixin.__init__(self,key_transform,*args,**kwargs)
django.db.models.fields.json.compile_json_path(key_transforms,include_root=True)
django.db.models.json.CaseInsensitiveMixin
django.db.models.json.CaseInsensitiveMixin.process_lhs(self,compiler,connection)
django.db.models.json.CaseInsensitiveMixin.process_rhs(self,compiler,connection)
django.db.models.json.ContainedBy(PostgresOperatorLookup)
django.db.models.json.ContainedBy.as_sql(self,compiler,connection)
django.db.models.json.DataContains(PostgresOperatorLookup)
django.db.models.json.DataContains.as_sql(self,compiler,connection)
django.db.models.json.HasAnyKeys(HasKeys)
django.db.models.json.HasKey(HasKeyLookup)
django.db.models.json.HasKeyLookup(PostgresOperatorLookup)
django.db.models.json.HasKeyLookup.as_mysql(self,compiler,connection)
django.db.models.json.HasKeyLookup.as_oracle(self,compiler,connection)
django.db.models.json.HasKeyLookup.as_postgresql(self,compiler,connection)
django.db.models.json.HasKeyLookup.as_sql(self,compiler,connection,template=None)
django.db.models.json.HasKeyLookup.as_sqlite(self,compiler,connection)
django.db.models.json.HasKeys(HasKeyLookup)
django.db.models.json.HasKeys.get_prep_lookup(self)
django.db.models.json.JSONExact(lookups.Exact)
django.db.models.json.JSONExact.process_lhs(self,compiler,connection)
django.db.models.json.JSONExact.process_rhs(self,compiler,connection)
django.db.models.json.KeyTextTransform(KeyTransform)
django.db.models.json.KeyTransform(self,key_name,*args,**kwargs)
django.db.models.json.KeyTransform.as_mysql(self,compiler,connection)
django.db.models.json.KeyTransform.as_oracle(self,compiler,connection)
django.db.models.json.KeyTransform.as_postgresql(self,compiler,connection)
django.db.models.json.KeyTransform.as_sqlite(self,compiler,connection)
django.db.models.json.KeyTransform.preprocess_lhs(self,compiler,connection)
django.db.models.json.KeyTransformEndsWith(KeyTransformTextLookupMixin,lookups.EndsWith)
django.db.models.json.KeyTransformExact(JSONExact)
django.db.models.json.KeyTransformExact.as_oracle(self,compiler,connection)
django.db.models.json.KeyTransformExact.process_lhs(self,compiler,connection)
django.db.models.json.KeyTransformExact.process_rhs(self,compiler,connection)
django.db.models.json.KeyTransformFactory(self,key_name)
django.db.models.json.KeyTransformGt(KeyTransformNumericLookupMixin,lookups.GreaterThan)
django.db.models.json.KeyTransformGte(KeyTransformNumericLookupMixin,lookups.GreaterThanOrEqual)
django.db.models.json.KeyTransformIContains(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IContains)
django.db.models.json.KeyTransformIEndsWith(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IEndsWith)
django.db.models.json.KeyTransformIExact(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IExact)
django.db.models.json.KeyTransformIRegex(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IRegex)
django.db.models.json.KeyTransformIStartsWith(CaseInsensitiveMixin,KeyTransformTextLookupMixin,lookups.IStartsWith)
django.db.models.json.KeyTransformIn(lookups.In)
django.db.models.json.KeyTransformIn.resolve_expression_parameter(self,compiler,connection,sql,param)
django.db.models.json.KeyTransformIsNull(lookups.IsNull)
django.db.models.json.KeyTransformIsNull.as_oracle(self,compiler,connection)
django.db.models.json.KeyTransformIsNull.as_sqlite(self,compiler,connection)
django.db.models.json.KeyTransformLt(KeyTransformNumericLookupMixin,lookups.LessThan)
django.db.models.json.KeyTransformLte(KeyTransformNumericLookupMixin,lookups.LessThanOrEqual)
django.db.models.json.KeyTransformNumericLookupMixin
django.db.models.json.KeyTransformNumericLookupMixin.process_rhs(self,compiler,connection)
django.db.models.json.KeyTransformRegex(KeyTransformTextLookupMixin,lookups.Regex)
django.db.models.json.KeyTransformStartsWith(KeyTransformTextLookupMixin,lookups.StartsWith)
django.db.models.json.KeyTransformTextLookupMixin(self,key_transform,*args,**kwargs)
django.db.models.json.compile_json_path(key_transforms,include_root=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/__init__.py----------------------------------------
A:django.db.models.fields.__init__.new->Empty()
A:django.db.models.fields.__init__.empty_values->list(validators.EMPTY_VALUES)
A:django.db.models.fields.__init__.description->_('Universally unique identifier')
A:django.db.models.fields.__init__.choices->list(self.choices)
A:django.db.models.fields.__init__.self._validators->list(validators)
A:django.db.models.fields.__init__.name->getattr(self, 'name', None)
A:django.db.models.fields.__init__.choice_max_length->max(choice_max_length, len(value))
A:django.db.models.fields.__init__.value->django.db.connection.ops.validate_autopk_value(value)
A:django.db.models.fields.__init__.path->path.replace('django.db.models.fields', 'django.db.models').replace('django.db.models.fields', 'django.db.models')
A:django.db.models.fields.__init__.(name, path, args, kwargs)->super().deconstruct()
A:django.db.models.fields.__init__.obj->Empty()
A:django.db.models.fields.__init__.obj.remote_field->copy.copy(self.remote_field)
A:django.db.models.fields.__init__.obj.__dict__->self.__dict__.copy()
A:django.db.models.fields.__init__.state->self.__dict__.copy()
A:django.db.models.fields.__init__.data->self.db_type_parameters(connection)
A:django.db.models.fields.__init__.db_type->django.db.connection.ops.cast_data_types.get(self.get_internal_type())
A:django.db.models.fields.__init__.type_string->self.db_type(connection)
A:django.db.models.fields.__init__.check_string->self.db_check(connection)
A:django.db.models.fields.__init__.(self.attname, self.column)->self.get_attname_column()
A:django.db.models.fields.__init__.self.verbose_name->self.name.replace('_', ' ')
A:django.db.models.fields.__init__.attname->self.get_attname()
A:django.db.models.fields.__init__.blank_defined->any((choice in ('', None) for (choice, _) in self.flatchoices))
A:django.db.models.fields.__init__.choice_func->operator.attrgetter(self.remote_field.get_related_field().attname if hasattr(self.remote_field, 'get_related_field') else 'pk')
A:django.db.models.fields.__init__.qs->qs.order_by(*ordering).order_by(*ordering)
A:django.db.models.fields.__init__.flatchoices->property(_get_flatchoices)
A:django.db.models.fields.__init__.defaults['initial']->self.get_default()
A:django.db.models.fields.__init__.defaults['choices']->self.get_choices(include_blank=include_blank)
A:django.db.models.fields.__init__.enabled_options->[option not in (None, False) for option in mutually_exclusive_options].count(True)
A:django.db.models.fields.__init__.now->django.utils.timezone.make_naive(now, timezone.utc)
A:django.db.models.fields.__init__.offset->datetime.timedelta(days=1)
A:django.db.models.fields.__init__.lower->datetime.datetime(lower.year, lower.month, lower.day)
A:django.db.models.fields.__init__.upper->datetime.datetime(upper.year, upper.month, upper.day)
A:django.db.models.fields.__init__.default_timezone->django.utils.timezone.get_default_timezone()
A:django.db.models.fields.__init__.parsed->parse_time(value)
A:django.db.models.fields.__init__.val->self.value_from_object(obj)
A:django.db.models.fields.__init__.second_offset->datetime.timedelta(seconds=10)
A:django.db.models.fields.__init__.errors->super().check(**kwargs)
A:django.db.models.fields.__init__.decimal_places->int(self.decimal_places)
A:django.db.models.fields.__init__.max_digits->int(self.max_digits)
A:django.db.models.fields.__init__.internal_type->self.get_internal_type()
A:django.db.models.fields.__init__.(min_value, max_value)->django.db.connection.ops.integer_field_range(internal_type)
A:django.db.models.fields.__init__.(self.default_validators, invalid_error_message)->django.core.validators.ip_address_validators(protocol, unpack_ipv4)
A:django.db.models.fields.__init__.cls.integer_field_class->next((parent for parent in cls.__mro__[1:] if issubclass(parent, IntegerField)), None)
A:django.db.models.fields.__init__.default->super().get_default()
django.db.models.__init__.AutoField(AutoFieldMixin,IntegerField,metaclass=AutoFieldMeta)
django.db.models.__init__.AutoField.get_internal_type(self)
django.db.models.__init__.AutoField.rel_db_type(self,connection)
django.db.models.__init__.AutoFieldMeta(type)
django.db.models.__init__.AutoFieldMeta.__instancecheck__(self,instance)
django.db.models.__init__.AutoFieldMeta.__subclasscheck__(self,subclass)
django.db.models.__init__.AutoFieldMeta._subclasses(self)
django.db.models.__init__.AutoFieldMixin(self,*args,**kwargs)
django.db.models.__init__.AutoFieldMixin._check_primary_key(self)
django.db.models.__init__.AutoFieldMixin.check(self,**kwargs)
django.db.models.__init__.AutoFieldMixin.contribute_to_class(self,cls,name,**kwargs)
django.db.models.__init__.AutoFieldMixin.deconstruct(self)
django.db.models.__init__.AutoFieldMixin.formfield(self,**kwargs)
django.db.models.__init__.AutoFieldMixin.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.AutoFieldMixin.validate(self,value,model_instance)
django.db.models.__init__.BigAutoField(AutoFieldMixin,BigIntegerField)
django.db.models.__init__.BigAutoField.get_internal_type(self)
django.db.models.__init__.BigAutoField.rel_db_type(self,connection)
django.db.models.__init__.BigIntegerField(IntegerField)
django.db.models.__init__.BigIntegerField.formfield(self,**kwargs)
django.db.models.__init__.BigIntegerField.get_internal_type(self)
django.db.models.__init__.BinaryField(self,*args,**kwargs)
django.db.models.__init__.BinaryField._check_str_default_value(self)
django.db.models.__init__.BinaryField.check(self,**kwargs)
django.db.models.__init__.BinaryField.deconstruct(self)
django.db.models.__init__.BinaryField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.BinaryField.get_default(self)
django.db.models.__init__.BinaryField.get_internal_type(self)
django.db.models.__init__.BinaryField.get_placeholder(self,value,compiler,connection)
django.db.models.__init__.BinaryField.to_python(self,value)
django.db.models.__init__.BinaryField.value_to_string(self,obj)
django.db.models.__init__.BooleanField(Field)
django.db.models.__init__.BooleanField.formfield(self,**kwargs)
django.db.models.__init__.BooleanField.get_internal_type(self)
django.db.models.__init__.BooleanField.get_prep_value(self,value)
django.db.models.__init__.BooleanField.to_python(self,value)
django.db.models.__init__.CharField(self,*args,db_collation=None,**kwargs)
django.db.models.__init__.CharField._check_db_collation(self,databases)
django.db.models.__init__.CharField._check_max_length_attribute(self,**kwargs)
django.db.models.__init__.CharField.cast_db_type(self,connection)
django.db.models.__init__.CharField.check(self,**kwargs)
django.db.models.__init__.CharField.deconstruct(self)
django.db.models.__init__.CharField.formfield(self,**kwargs)
django.db.models.__init__.CharField.get_internal_type(self)
django.db.models.__init__.CharField.get_prep_value(self,value)
django.db.models.__init__.CharField.to_python(self,value)
django.db.models.__init__.CommaSeparatedIntegerField(CharField)
django.db.models.__init__.DateField(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.__init__.DateField._check_fix_default_value(self)
django.db.models.__init__.DateField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.__init__.DateField.deconstruct(self)
django.db.models.__init__.DateField.formfield(self,**kwargs)
django.db.models.__init__.DateField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.DateField.get_internal_type(self)
django.db.models.__init__.DateField.get_prep_value(self,value)
django.db.models.__init__.DateField.pre_save(self,model_instance,add)
django.db.models.__init__.DateField.to_python(self,value)
django.db.models.__init__.DateField.value_to_string(self,obj)
django.db.models.__init__.DateTimeCheckMixin
django.db.models.__init__.DateTimeCheckMixin._check_fix_default_value(self)
django.db.models.__init__.DateTimeCheckMixin._check_mutually_exclusive_options(self)
django.db.models.__init__.DateTimeCheckMixin.check(self,**kwargs)
django.db.models.__init__.DateTimeField(DateField)
django.db.models.__init__.DateTimeField._check_fix_default_value(self)
django.db.models.__init__.DateTimeField.formfield(self,**kwargs)
django.db.models.__init__.DateTimeField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.DateTimeField.get_internal_type(self)
django.db.models.__init__.DateTimeField.get_prep_value(self,value)
django.db.models.__init__.DateTimeField.pre_save(self,model_instance,add)
django.db.models.__init__.DateTimeField.to_python(self,value)
django.db.models.__init__.DateTimeField.value_to_string(self,obj)
django.db.models.__init__.DecimalField(self,verbose_name=None,name=None,max_digits=None,decimal_places=None,**kwargs)
django.db.models.__init__.DecimalField._check_decimal_places(self)
django.db.models.__init__.DecimalField._check_decimal_places_and_max_digits(self,**kwargs)
django.db.models.__init__.DecimalField._check_max_digits(self)
django.db.models.__init__.DecimalField.check(self,**kwargs)
django.db.models.__init__.DecimalField.context(self)
django.db.models.__init__.DecimalField.deconstruct(self)
django.db.models.__init__.DecimalField.formfield(self,**kwargs)
django.db.models.__init__.DecimalField.get_db_prep_save(self,value,connection)
django.db.models.__init__.DecimalField.get_internal_type(self)
django.db.models.__init__.DecimalField.get_prep_value(self,value)
django.db.models.__init__.DecimalField.to_python(self,value)
django.db.models.__init__.DecimalField.validators(self)
django.db.models.__init__.DurationField(Field)
django.db.models.__init__.DurationField.formfield(self,**kwargs)
django.db.models.__init__.DurationField.get_db_converters(self,connection)
django.db.models.__init__.DurationField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.DurationField.get_internal_type(self)
django.db.models.__init__.DurationField.to_python(self,value)
django.db.models.__init__.DurationField.value_to_string(self,obj)
django.db.models.__init__.EmailField(self,*args,**kwargs)
django.db.models.__init__.EmailField.deconstruct(self)
django.db.models.__init__.EmailField.formfield(self,**kwargs)
django.db.models.__init__.Empty
django.db.models.__init__.Field(self,verbose_name=None,name=None,primary_key=False,max_length=None,unique=False,blank=False,null=False,db_index=False,rel=None,default=NOT_PROVIDED,editable=True,serialize=True,unique_for_date=None,unique_for_month=None,unique_for_year=None,choices=None,help_text='',db_column=None,db_tablespace=None,auto_created=False,validators=(),error_messages=None)
django.db.models.__init__.Field.__copy__(self)
django.db.models.__init__.Field.__deepcopy__(self,memodict)
django.db.models.__init__.Field.__eq__(self,other)
django.db.models.__init__.Field.__hash__(self)
django.db.models.__init__.Field.__lt__(self,other)
django.db.models.__init__.Field.__reduce__(self)
django.db.models.__init__.Field.__repr__(self)
django.db.models.__init__.Field.__str__(self)
django.db.models.__init__.Field._check_backend_specific_checks(self,databases=None,**kwargs)
django.db.models.__init__.Field._check_choices(self)
django.db.models.__init__.Field._check_db_index(self)
django.db.models.__init__.Field._check_deprecation_details(self)
django.db.models.__init__.Field._check_field_name(self)
django.db.models.__init__.Field._check_null_allowed_for_primary_keys(self)
django.db.models.__init__.Field._check_validators(self)
django.db.models.__init__.Field._choices_is_value(cls,value)
django.db.models.__init__.Field._description(self)
django.db.models.__init__.Field._get_default(self)
django.db.models.__init__.Field._get_flatchoices(self)
django.db.models.__init__.Field.cached_col(self)
django.db.models.__init__.Field.cast_db_type(self,connection)
django.db.models.__init__.Field.check(self,**kwargs)
django.db.models.__init__.Field.clean(self,value,model_instance)
django.db.models.__init__.Field.clone(self)
django.db.models.__init__.Field.contribute_to_class(self,cls,name,private_only=False)
django.db.models.__init__.Field.db_check(self,connection)
django.db.models.__init__.Field.db_parameters(self,connection)
django.db.models.__init__.Field.db_returning(self)
django.db.models.__init__.Field.db_tablespace(self)
django.db.models.__init__.Field.db_type(self,connection)
django.db.models.__init__.Field.db_type_parameters(self,connection)
django.db.models.__init__.Field.db_type_suffix(self,connection)
django.db.models.__init__.Field.deconstruct(self)
django.db.models.__init__.Field.formfield(self,form_class=None,choices_form_class=None,**kwargs)
django.db.models.__init__.Field.get_attname(self)
django.db.models.__init__.Field.get_attname_column(self)
django.db.models.__init__.Field.get_choices(self,include_blank=True,blank_choice=BLANK_CHOICE_DASH,limit_choices_to=None,ordering=())
django.db.models.__init__.Field.get_col(self,alias,output_field=None)
django.db.models.__init__.Field.get_db_converters(self,connection)
django.db.models.__init__.Field.get_db_prep_save(self,value,connection)
django.db.models.__init__.Field.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.Field.get_default(self)
django.db.models.__init__.Field.get_filter_kwargs_for_object(self,obj)
django.db.models.__init__.Field.get_internal_type(self)
django.db.models.__init__.Field.get_pk_value_on_save(self,instance)
django.db.models.__init__.Field.get_prep_value(self,value)
django.db.models.__init__.Field.has_default(self)
django.db.models.__init__.Field.pre_save(self,model_instance,add)
django.db.models.__init__.Field.rel_db_type(self,connection)
django.db.models.__init__.Field.run_validators(self,value)
django.db.models.__init__.Field.save_form_data(self,instance,data)
django.db.models.__init__.Field.select_format(self,compiler,sql,params)
django.db.models.__init__.Field.set_attributes_from_name(self,name)
django.db.models.__init__.Field.to_python(self,value)
django.db.models.__init__.Field.unique(self)
django.db.models.__init__.Field.validate(self,value,model_instance)
django.db.models.__init__.Field.validators(self)
django.db.models.__init__.Field.value_from_object(self,obj)
django.db.models.__init__.Field.value_to_string(self,obj)
django.db.models.__init__.FilePathField(self,verbose_name=None,name=None,path='',match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.db.models.__init__.FilePathField._check_allowing_files_or_folders(self,**kwargs)
django.db.models.__init__.FilePathField.check(self,**kwargs)
django.db.models.__init__.FilePathField.deconstruct(self)
django.db.models.__init__.FilePathField.formfield(self,**kwargs)
django.db.models.__init__.FilePathField.get_internal_type(self)
django.db.models.__init__.FilePathField.get_prep_value(self,value)
django.db.models.__init__.FloatField(Field)
django.db.models.__init__.FloatField.formfield(self,**kwargs)
django.db.models.__init__.FloatField.get_internal_type(self)
django.db.models.__init__.FloatField.get_prep_value(self,value)
django.db.models.__init__.FloatField.to_python(self,value)
django.db.models.__init__.GenericIPAddressField(self,verbose_name=None,name=None,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.db.models.__init__.GenericIPAddressField._check_blank_and_null_values(self,**kwargs)
django.db.models.__init__.GenericIPAddressField.check(self,**kwargs)
django.db.models.__init__.GenericIPAddressField.deconstruct(self)
django.db.models.__init__.GenericIPAddressField.formfield(self,**kwargs)
django.db.models.__init__.GenericIPAddressField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.GenericIPAddressField.get_internal_type(self)
django.db.models.__init__.GenericIPAddressField.get_prep_value(self,value)
django.db.models.__init__.GenericIPAddressField.to_python(self,value)
django.db.models.__init__.IPAddressField(self,*args,**kwargs)
django.db.models.__init__.IPAddressField.deconstruct(self)
django.db.models.__init__.IPAddressField.get_internal_type(self)
django.db.models.__init__.IPAddressField.get_prep_value(self,value)
django.db.models.__init__.IntegerField(Field)
django.db.models.__init__.IntegerField._check_max_length_warning(self)
django.db.models.__init__.IntegerField.check(self,**kwargs)
django.db.models.__init__.IntegerField.formfield(self,**kwargs)
django.db.models.__init__.IntegerField.get_internal_type(self)
django.db.models.__init__.IntegerField.get_prep_value(self,value)
django.db.models.__init__.IntegerField.to_python(self,value)
django.db.models.__init__.IntegerField.validators(self)
django.db.models.__init__.NOT_PROVIDED
django.db.models.__init__.NullBooleanField(self,*args,**kwargs)
django.db.models.__init__.NullBooleanField.deconstruct(self)
django.db.models.__init__.NullBooleanField.get_internal_type(self)
django.db.models.__init__.PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin,BigIntegerField)
django.db.models.__init__.PositiveBigIntegerField.formfield(self,**kwargs)
django.db.models.__init__.PositiveBigIntegerField.get_internal_type(self)
django.db.models.__init__.PositiveIntegerField(PositiveIntegerRelDbTypeMixin,IntegerField)
django.db.models.__init__.PositiveIntegerField.formfield(self,**kwargs)
django.db.models.__init__.PositiveIntegerField.get_internal_type(self)
django.db.models.__init__.PositiveIntegerRelDbTypeMixin
django.db.models.__init__.PositiveIntegerRelDbTypeMixin.__init_subclass__(cls,**kwargs)
django.db.models.__init__.PositiveIntegerRelDbTypeMixin.rel_db_type(self,connection)
django.db.models.__init__.PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin,SmallIntegerField)
django.db.models.__init__.PositiveSmallIntegerField.formfield(self,**kwargs)
django.db.models.__init__.PositiveSmallIntegerField.get_internal_type(self)
django.db.models.__init__.SlugField(self,*args,max_length=50,db_index=True,allow_unicode=False,**kwargs)
django.db.models.__init__.SlugField.deconstruct(self)
django.db.models.__init__.SlugField.formfield(self,**kwargs)
django.db.models.__init__.SlugField.get_internal_type(self)
django.db.models.__init__.SmallAutoField(AutoFieldMixin,SmallIntegerField)
django.db.models.__init__.SmallAutoField.get_internal_type(self)
django.db.models.__init__.SmallAutoField.rel_db_type(self,connection)
django.db.models.__init__.SmallIntegerField(IntegerField)
django.db.models.__init__.SmallIntegerField.get_internal_type(self)
django.db.models.__init__.TextField(self,*args,db_collation=None,**kwargs)
django.db.models.__init__.TextField._check_db_collation(self,databases)
django.db.models.__init__.TextField.check(self,**kwargs)
django.db.models.__init__.TextField.deconstruct(self)
django.db.models.__init__.TextField.formfield(self,**kwargs)
django.db.models.__init__.TextField.get_internal_type(self)
django.db.models.__init__.TextField.get_prep_value(self,value)
django.db.models.__init__.TextField.to_python(self,value)
django.db.models.__init__.TimeField(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.__init__.TimeField._check_fix_default_value(self)
django.db.models.__init__.TimeField.deconstruct(self)
django.db.models.__init__.TimeField.formfield(self,**kwargs)
django.db.models.__init__.TimeField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.TimeField.get_internal_type(self)
django.db.models.__init__.TimeField.get_prep_value(self,value)
django.db.models.__init__.TimeField.pre_save(self,model_instance,add)
django.db.models.__init__.TimeField.to_python(self,value)
django.db.models.__init__.TimeField.value_to_string(self,obj)
django.db.models.__init__.URLField(self,verbose_name=None,name=None,**kwargs)
django.db.models.__init__.URLField.deconstruct(self)
django.db.models.__init__.URLField.formfield(self,**kwargs)
django.db.models.__init__.UUIDField(self,verbose_name=None,**kwargs)
django.db.models.__init__.UUIDField.deconstruct(self)
django.db.models.__init__.UUIDField.formfield(self,**kwargs)
django.db.models.__init__.UUIDField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.__init__.UUIDField.get_internal_type(self)
django.db.models.__init__.UUIDField.get_prep_value(self,value)
django.db.models.__init__.UUIDField.to_python(self,value)
django.db.models.__init__._empty(of_cls)
django.db.models.__init__._load_field(app_label,model_name,field_name)
django.db.models.__init__.return_None()
django.db.models.fields.__init__.AutoField(AutoFieldMixin,IntegerField,metaclass=AutoFieldMeta)
django.db.models.fields.__init__.AutoField.get_internal_type(self)
django.db.models.fields.__init__.AutoField.rel_db_type(self,connection)
django.db.models.fields.__init__.AutoFieldMeta(type)
django.db.models.fields.__init__.AutoFieldMeta.__instancecheck__(self,instance)
django.db.models.fields.__init__.AutoFieldMeta.__subclasscheck__(self,subclass)
django.db.models.fields.__init__.AutoFieldMeta._subclasses(self)
django.db.models.fields.__init__.AutoFieldMixin(self,*args,**kwargs)
django.db.models.fields.__init__.AutoFieldMixin.__init__(self,*args,**kwargs)
django.db.models.fields.__init__.AutoFieldMixin._check_primary_key(self)
django.db.models.fields.__init__.AutoFieldMixin.check(self,**kwargs)
django.db.models.fields.__init__.AutoFieldMixin.contribute_to_class(self,cls,name,**kwargs)
django.db.models.fields.__init__.AutoFieldMixin.deconstruct(self)
django.db.models.fields.__init__.AutoFieldMixin.formfield(self,**kwargs)
django.db.models.fields.__init__.AutoFieldMixin.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.AutoFieldMixin.validate(self,value,model_instance)
django.db.models.fields.__init__.BigAutoField(AutoFieldMixin,BigIntegerField)
django.db.models.fields.__init__.BigAutoField.get_internal_type(self)
django.db.models.fields.__init__.BigAutoField.rel_db_type(self,connection)
django.db.models.fields.__init__.BigIntegerField(IntegerField)
django.db.models.fields.__init__.BigIntegerField.formfield(self,**kwargs)
django.db.models.fields.__init__.BigIntegerField.get_internal_type(self)
django.db.models.fields.__init__.BinaryField(self,*args,**kwargs)
django.db.models.fields.__init__.BinaryField.__init__(self,*args,**kwargs)
django.db.models.fields.__init__.BinaryField._check_str_default_value(self)
django.db.models.fields.__init__.BinaryField.check(self,**kwargs)
django.db.models.fields.__init__.BinaryField.deconstruct(self)
django.db.models.fields.__init__.BinaryField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.BinaryField.get_default(self)
django.db.models.fields.__init__.BinaryField.get_internal_type(self)
django.db.models.fields.__init__.BinaryField.get_placeholder(self,value,compiler,connection)
django.db.models.fields.__init__.BinaryField.to_python(self,value)
django.db.models.fields.__init__.BinaryField.value_to_string(self,obj)
django.db.models.fields.__init__.BooleanField(Field)
django.db.models.fields.__init__.BooleanField.formfield(self,**kwargs)
django.db.models.fields.__init__.BooleanField.get_internal_type(self)
django.db.models.fields.__init__.BooleanField.get_prep_value(self,value)
django.db.models.fields.__init__.BooleanField.to_python(self,value)
django.db.models.fields.__init__.CharField(self,*args,db_collation=None,**kwargs)
django.db.models.fields.__init__.CharField.__init__(self,*args,db_collation=None,**kwargs)
django.db.models.fields.__init__.CharField._check_db_collation(self,databases)
django.db.models.fields.__init__.CharField._check_max_length_attribute(self,**kwargs)
django.db.models.fields.__init__.CharField.cast_db_type(self,connection)
django.db.models.fields.__init__.CharField.check(self,**kwargs)
django.db.models.fields.__init__.CharField.deconstruct(self)
django.db.models.fields.__init__.CharField.formfield(self,**kwargs)
django.db.models.fields.__init__.CharField.get_internal_type(self)
django.db.models.fields.__init__.CharField.get_prep_value(self,value)
django.db.models.fields.__init__.CharField.to_python(self,value)
django.db.models.fields.__init__.CommaSeparatedIntegerField(CharField)
django.db.models.fields.__init__.DateField(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.fields.__init__.DateField.__init__(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.fields.__init__.DateField._check_fix_default_value(self)
django.db.models.fields.__init__.DateField.contribute_to_class(self,cls,name,**kwargs)
django.db.models.fields.__init__.DateField.deconstruct(self)
django.db.models.fields.__init__.DateField.formfield(self,**kwargs)
django.db.models.fields.__init__.DateField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.DateField.get_internal_type(self)
django.db.models.fields.__init__.DateField.get_prep_value(self,value)
django.db.models.fields.__init__.DateField.pre_save(self,model_instance,add)
django.db.models.fields.__init__.DateField.to_python(self,value)
django.db.models.fields.__init__.DateField.value_to_string(self,obj)
django.db.models.fields.__init__.DateTimeCheckMixin
django.db.models.fields.__init__.DateTimeCheckMixin._check_fix_default_value(self)
django.db.models.fields.__init__.DateTimeCheckMixin._check_mutually_exclusive_options(self)
django.db.models.fields.__init__.DateTimeCheckMixin.check(self,**kwargs)
django.db.models.fields.__init__.DateTimeField(DateField)
django.db.models.fields.__init__.DateTimeField._check_fix_default_value(self)
django.db.models.fields.__init__.DateTimeField.formfield(self,**kwargs)
django.db.models.fields.__init__.DateTimeField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.DateTimeField.get_internal_type(self)
django.db.models.fields.__init__.DateTimeField.get_prep_value(self,value)
django.db.models.fields.__init__.DateTimeField.pre_save(self,model_instance,add)
django.db.models.fields.__init__.DateTimeField.to_python(self,value)
django.db.models.fields.__init__.DateTimeField.value_to_string(self,obj)
django.db.models.fields.__init__.DecimalField(self,verbose_name=None,name=None,max_digits=None,decimal_places=None,**kwargs)
django.db.models.fields.__init__.DecimalField.__init__(self,verbose_name=None,name=None,max_digits=None,decimal_places=None,**kwargs)
django.db.models.fields.__init__.DecimalField._check_decimal_places(self)
django.db.models.fields.__init__.DecimalField._check_decimal_places_and_max_digits(self,**kwargs)
django.db.models.fields.__init__.DecimalField._check_max_digits(self)
django.db.models.fields.__init__.DecimalField.check(self,**kwargs)
django.db.models.fields.__init__.DecimalField.context(self)
django.db.models.fields.__init__.DecimalField.deconstruct(self)
django.db.models.fields.__init__.DecimalField.formfield(self,**kwargs)
django.db.models.fields.__init__.DecimalField.get_db_prep_save(self,value,connection)
django.db.models.fields.__init__.DecimalField.get_internal_type(self)
django.db.models.fields.__init__.DecimalField.get_prep_value(self,value)
django.db.models.fields.__init__.DecimalField.to_python(self,value)
django.db.models.fields.__init__.DecimalField.validators(self)
django.db.models.fields.__init__.DurationField(Field)
django.db.models.fields.__init__.DurationField.formfield(self,**kwargs)
django.db.models.fields.__init__.DurationField.get_db_converters(self,connection)
django.db.models.fields.__init__.DurationField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.DurationField.get_internal_type(self)
django.db.models.fields.__init__.DurationField.to_python(self,value)
django.db.models.fields.__init__.DurationField.value_to_string(self,obj)
django.db.models.fields.__init__.EmailField(self,*args,**kwargs)
django.db.models.fields.__init__.EmailField.__init__(self,*args,**kwargs)
django.db.models.fields.__init__.EmailField.deconstruct(self)
django.db.models.fields.__init__.EmailField.formfield(self,**kwargs)
django.db.models.fields.__init__.Empty
django.db.models.fields.__init__.Field(self,verbose_name=None,name=None,primary_key=False,max_length=None,unique=False,blank=False,null=False,db_index=False,rel=None,default=NOT_PROVIDED,editable=True,serialize=True,unique_for_date=None,unique_for_month=None,unique_for_year=None,choices=None,help_text='',db_column=None,db_tablespace=None,auto_created=False,validators=(),error_messages=None)
django.db.models.fields.__init__.Field.__copy__(self)
django.db.models.fields.__init__.Field.__deepcopy__(self,memodict)
django.db.models.fields.__init__.Field.__eq__(self,other)
django.db.models.fields.__init__.Field.__hash__(self)
django.db.models.fields.__init__.Field.__init__(self,verbose_name=None,name=None,primary_key=False,max_length=None,unique=False,blank=False,null=False,db_index=False,rel=None,default=NOT_PROVIDED,editable=True,serialize=True,unique_for_date=None,unique_for_month=None,unique_for_year=None,choices=None,help_text='',db_column=None,db_tablespace=None,auto_created=False,validators=(),error_messages=None)
django.db.models.fields.__init__.Field.__lt__(self,other)
django.db.models.fields.__init__.Field.__reduce__(self)
django.db.models.fields.__init__.Field.__repr__(self)
django.db.models.fields.__init__.Field.__str__(self)
django.db.models.fields.__init__.Field._check_backend_specific_checks(self,databases=None,**kwargs)
django.db.models.fields.__init__.Field._check_choices(self)
django.db.models.fields.__init__.Field._check_db_index(self)
django.db.models.fields.__init__.Field._check_deprecation_details(self)
django.db.models.fields.__init__.Field._check_field_name(self)
django.db.models.fields.__init__.Field._check_null_allowed_for_primary_keys(self)
django.db.models.fields.__init__.Field._check_validators(self)
django.db.models.fields.__init__.Field._choices_is_value(cls,value)
django.db.models.fields.__init__.Field._description(self)
django.db.models.fields.__init__.Field._get_default(self)
django.db.models.fields.__init__.Field._get_flatchoices(self)
django.db.models.fields.__init__.Field.cached_col(self)
django.db.models.fields.__init__.Field.cast_db_type(self,connection)
django.db.models.fields.__init__.Field.check(self,**kwargs)
django.db.models.fields.__init__.Field.clean(self,value,model_instance)
django.db.models.fields.__init__.Field.clone(self)
django.db.models.fields.__init__.Field.contribute_to_class(self,cls,name,private_only=False)
django.db.models.fields.__init__.Field.db_check(self,connection)
django.db.models.fields.__init__.Field.db_parameters(self,connection)
django.db.models.fields.__init__.Field.db_returning(self)
django.db.models.fields.__init__.Field.db_tablespace(self)
django.db.models.fields.__init__.Field.db_type(self,connection)
django.db.models.fields.__init__.Field.db_type_parameters(self,connection)
django.db.models.fields.__init__.Field.db_type_suffix(self,connection)
django.db.models.fields.__init__.Field.deconstruct(self)
django.db.models.fields.__init__.Field.formfield(self,form_class=None,choices_form_class=None,**kwargs)
django.db.models.fields.__init__.Field.get_attname(self)
django.db.models.fields.__init__.Field.get_attname_column(self)
django.db.models.fields.__init__.Field.get_choices(self,include_blank=True,blank_choice=BLANK_CHOICE_DASH,limit_choices_to=None,ordering=())
django.db.models.fields.__init__.Field.get_col(self,alias,output_field=None)
django.db.models.fields.__init__.Field.get_db_converters(self,connection)
django.db.models.fields.__init__.Field.get_db_prep_save(self,value,connection)
django.db.models.fields.__init__.Field.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.Field.get_default(self)
django.db.models.fields.__init__.Field.get_filter_kwargs_for_object(self,obj)
django.db.models.fields.__init__.Field.get_internal_type(self)
django.db.models.fields.__init__.Field.get_pk_value_on_save(self,instance)
django.db.models.fields.__init__.Field.get_prep_value(self,value)
django.db.models.fields.__init__.Field.has_default(self)
django.db.models.fields.__init__.Field.pre_save(self,model_instance,add)
django.db.models.fields.__init__.Field.rel_db_type(self,connection)
django.db.models.fields.__init__.Field.run_validators(self,value)
django.db.models.fields.__init__.Field.save_form_data(self,instance,data)
django.db.models.fields.__init__.Field.select_format(self,compiler,sql,params)
django.db.models.fields.__init__.Field.set_attributes_from_name(self,name)
django.db.models.fields.__init__.Field.to_python(self,value)
django.db.models.fields.__init__.Field.unique(self)
django.db.models.fields.__init__.Field.validate(self,value,model_instance)
django.db.models.fields.__init__.Field.validators(self)
django.db.models.fields.__init__.Field.value_from_object(self,obj)
django.db.models.fields.__init__.Field.value_to_string(self,obj)
django.db.models.fields.__init__.FilePathField(self,verbose_name=None,name=None,path='',match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.db.models.fields.__init__.FilePathField.__init__(self,verbose_name=None,name=None,path='',match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.db.models.fields.__init__.FilePathField._check_allowing_files_or_folders(self,**kwargs)
django.db.models.fields.__init__.FilePathField.check(self,**kwargs)
django.db.models.fields.__init__.FilePathField.deconstruct(self)
django.db.models.fields.__init__.FilePathField.formfield(self,**kwargs)
django.db.models.fields.__init__.FilePathField.get_internal_type(self)
django.db.models.fields.__init__.FilePathField.get_prep_value(self,value)
django.db.models.fields.__init__.FloatField(Field)
django.db.models.fields.__init__.FloatField.formfield(self,**kwargs)
django.db.models.fields.__init__.FloatField.get_internal_type(self)
django.db.models.fields.__init__.FloatField.get_prep_value(self,value)
django.db.models.fields.__init__.FloatField.to_python(self,value)
django.db.models.fields.__init__.GenericIPAddressField(self,verbose_name=None,name=None,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.db.models.fields.__init__.GenericIPAddressField.__init__(self,verbose_name=None,name=None,protocol='both',unpack_ipv4=False,*args,**kwargs)
django.db.models.fields.__init__.GenericIPAddressField._check_blank_and_null_values(self,**kwargs)
django.db.models.fields.__init__.GenericIPAddressField.check(self,**kwargs)
django.db.models.fields.__init__.GenericIPAddressField.deconstruct(self)
django.db.models.fields.__init__.GenericIPAddressField.formfield(self,**kwargs)
django.db.models.fields.__init__.GenericIPAddressField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.GenericIPAddressField.get_internal_type(self)
django.db.models.fields.__init__.GenericIPAddressField.get_prep_value(self,value)
django.db.models.fields.__init__.GenericIPAddressField.to_python(self,value)
django.db.models.fields.__init__.IPAddressField(self,*args,**kwargs)
django.db.models.fields.__init__.IPAddressField.__init__(self,*args,**kwargs)
django.db.models.fields.__init__.IPAddressField.deconstruct(self)
django.db.models.fields.__init__.IPAddressField.get_internal_type(self)
django.db.models.fields.__init__.IPAddressField.get_prep_value(self,value)
django.db.models.fields.__init__.IntegerField(Field)
django.db.models.fields.__init__.IntegerField._check_max_length_warning(self)
django.db.models.fields.__init__.IntegerField.check(self,**kwargs)
django.db.models.fields.__init__.IntegerField.formfield(self,**kwargs)
django.db.models.fields.__init__.IntegerField.get_internal_type(self)
django.db.models.fields.__init__.IntegerField.get_prep_value(self,value)
django.db.models.fields.__init__.IntegerField.to_python(self,value)
django.db.models.fields.__init__.IntegerField.validators(self)
django.db.models.fields.__init__.NOT_PROVIDED
django.db.models.fields.__init__.NullBooleanField(self,*args,**kwargs)
django.db.models.fields.__init__.NullBooleanField.__init__(self,*args,**kwargs)
django.db.models.fields.__init__.NullBooleanField.deconstruct(self)
django.db.models.fields.__init__.NullBooleanField.get_internal_type(self)
django.db.models.fields.__init__.PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin,BigIntegerField)
django.db.models.fields.__init__.PositiveBigIntegerField.formfield(self,**kwargs)
django.db.models.fields.__init__.PositiveBigIntegerField.get_internal_type(self)
django.db.models.fields.__init__.PositiveIntegerField(PositiveIntegerRelDbTypeMixin,IntegerField)
django.db.models.fields.__init__.PositiveIntegerField.formfield(self,**kwargs)
django.db.models.fields.__init__.PositiveIntegerField.get_internal_type(self)
django.db.models.fields.__init__.PositiveIntegerRelDbTypeMixin
django.db.models.fields.__init__.PositiveIntegerRelDbTypeMixin.__init_subclass__(cls,**kwargs)
django.db.models.fields.__init__.PositiveIntegerRelDbTypeMixin.rel_db_type(self,connection)
django.db.models.fields.__init__.PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin,SmallIntegerField)
django.db.models.fields.__init__.PositiveSmallIntegerField.formfield(self,**kwargs)
django.db.models.fields.__init__.PositiveSmallIntegerField.get_internal_type(self)
django.db.models.fields.__init__.SlugField(self,*args,max_length=50,db_index=True,allow_unicode=False,**kwargs)
django.db.models.fields.__init__.SlugField.__init__(self,*args,max_length=50,db_index=True,allow_unicode=False,**kwargs)
django.db.models.fields.__init__.SlugField.deconstruct(self)
django.db.models.fields.__init__.SlugField.formfield(self,**kwargs)
django.db.models.fields.__init__.SlugField.get_internal_type(self)
django.db.models.fields.__init__.SmallAutoField(AutoFieldMixin,SmallIntegerField)
django.db.models.fields.__init__.SmallAutoField.get_internal_type(self)
django.db.models.fields.__init__.SmallAutoField.rel_db_type(self,connection)
django.db.models.fields.__init__.SmallIntegerField(IntegerField)
django.db.models.fields.__init__.SmallIntegerField.get_internal_type(self)
django.db.models.fields.__init__.TextField(self,*args,db_collation=None,**kwargs)
django.db.models.fields.__init__.TextField.__init__(self,*args,db_collation=None,**kwargs)
django.db.models.fields.__init__.TextField._check_db_collation(self,databases)
django.db.models.fields.__init__.TextField.check(self,**kwargs)
django.db.models.fields.__init__.TextField.deconstruct(self)
django.db.models.fields.__init__.TextField.formfield(self,**kwargs)
django.db.models.fields.__init__.TextField.get_internal_type(self)
django.db.models.fields.__init__.TextField.get_prep_value(self,value)
django.db.models.fields.__init__.TextField.to_python(self,value)
django.db.models.fields.__init__.TimeField(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.fields.__init__.TimeField.__init__(self,verbose_name=None,name=None,auto_now=False,auto_now_add=False,**kwargs)
django.db.models.fields.__init__.TimeField._check_fix_default_value(self)
django.db.models.fields.__init__.TimeField.deconstruct(self)
django.db.models.fields.__init__.TimeField.formfield(self,**kwargs)
django.db.models.fields.__init__.TimeField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.TimeField.get_internal_type(self)
django.db.models.fields.__init__.TimeField.get_prep_value(self,value)
django.db.models.fields.__init__.TimeField.pre_save(self,model_instance,add)
django.db.models.fields.__init__.TimeField.to_python(self,value)
django.db.models.fields.__init__.TimeField.value_to_string(self,obj)
django.db.models.fields.__init__.URLField(self,verbose_name=None,name=None,**kwargs)
django.db.models.fields.__init__.URLField.__init__(self,verbose_name=None,name=None,**kwargs)
django.db.models.fields.__init__.URLField.deconstruct(self)
django.db.models.fields.__init__.URLField.formfield(self,**kwargs)
django.db.models.fields.__init__.UUIDField(self,verbose_name=None,**kwargs)
django.db.models.fields.__init__.UUIDField.__init__(self,verbose_name=None,**kwargs)
django.db.models.fields.__init__.UUIDField.deconstruct(self)
django.db.models.fields.__init__.UUIDField.formfield(self,**kwargs)
django.db.models.fields.__init__.UUIDField.get_db_prep_value(self,value,connection,prepared=False)
django.db.models.fields.__init__.UUIDField.get_internal_type(self)
django.db.models.fields.__init__.UUIDField.get_prep_value(self,value)
django.db.models.fields.__init__.UUIDField.to_python(self,value)
django.db.models.fields.__init__._empty(of_cls)
django.db.models.fields.__init__._load_field(app_label,model_name,field_name)
django.db.models.fields.__init__.return_None()


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/fields/related_descriptors.py----------------------------------------
A:django.db.models.fields.related_descriptors.queryset->queryset.extra(select={'_prefetch_related_val_%s' % f.attname: '%s.%s' % (qn(join_table), qn(f.column)) for f in fk.local_related_fields}).extra(select={'_prefetch_related_val_%s' % f.attname: '%s.%s' % (qn(join_table), qn(f.column)) for f in fk.local_related_fields})
A:django.db.models.fields.related_descriptors.qs->self.get_queryset(instance=instance)
A:django.db.models.fields.related_descriptors.rel_obj->self.related.get_cached_value(instance, default=None)
A:django.db.models.fields.related_descriptors.ancestor->ancestor_link.get_cached_value(instance)
A:django.db.models.fields.related_descriptors.instance._state.db->django.db.router.db_for_write(instance.__class__, instance=value)
A:django.db.models.fields.related_descriptors.value._state.db->django.db.router.db_for_write(value.__class__, instance=instance)
A:django.db.models.fields.related_descriptors.related->self.field.get_cached_value(instance, default=None)
A:django.db.models.fields.related_descriptors.deferred->instance.get_deferred_fields()
A:django.db.models.fields.related_descriptors.obj->rel_model(**kwargs)
A:django.db.models.fields.related_descriptors.filter_args->self.related.field.get_forward_related_filter(instance)
A:django.db.models.fields.related_descriptors.related_pk->tuple((getattr(instance, field.attname) for field in self.related.field.foreign_related_fields))
A:django.db.models.fields.related_descriptors.manager->getattr(self.model, manager)
A:django.db.models.fields.related_descriptors.manager_class->create_forward_many_to_many_manager(manager.__class__, rel, reverse)
A:django.db.models.fields.related_descriptors.val->self.field.get_foreign_related_value(self.instance)
A:django.db.models.fields.related_descriptors.rel_obj_id->getattr(self.instance, target_field.attname)
A:django.db.models.fields.related_descriptors.cache_name->self.field.remote_field.get_cache_name()
A:django.db.models.fields.related_descriptors.db->django.db.router.db_for_write(self.through, instance=self.instance)
A:django.db.models.fields.related_descriptors.old_ids->set()
A:django.db.models.fields.related_descriptors.objs->tuple(objs)
A:django.db.models.fields.related_descriptors.old_objs->set(self.using(db).all())
A:django.db.models.fields.related_descriptors.self.query_field_name->rel.field.related_query_name()
A:django.db.models.fields.related_descriptors.self.source_field_name->rel.field.m2m_reverse_field_name()
A:django.db.models.fields.related_descriptors.self.target_field_name->rel.field.m2m_field_name()
A:django.db.models.fields.related_descriptors.self.prefetch_cache_name->rel.field.related_query_name()
A:django.db.models.fields.related_descriptors.self.source_field->self.through._meta.get_field(self.source_field_name)
A:django.db.models.fields.related_descriptors.self.target_field->self.through._meta.get_field(self.target_field_name)
A:django.db.models.fields.related_descriptors.self.core_filters[core_filter_key]->getattr(instance, rh_field.attname)
A:django.db.models.fields.related_descriptors.self.related_val->self.source_field.get_foreign_related_value(instance)
A:django.db.models.fields.related_descriptors.filters->self._build_remove_filters(old_vals)
A:django.db.models.fields.related_descriptors.symmetrical_filters->Q(**{self.target_field_name: self.related_val})
A:django.db.models.fields.related_descriptors.fk->self.through._meta.get_field(self.source_field_name)
A:django.db.models.fields.related_descriptors.new_obj->super(ManyRelatedManager, self.db_manager(db)).create(**kwargs)
A:django.db.models.fields.related_descriptors.(obj, created)->super(ManyRelatedManager, self.db_manager(db)).update_or_create(**kwargs)
A:django.db.models.fields.related_descriptors.target_ids->self._get_target_ids(target_field_name, objs)
A:django.db.models.fields.related_descriptors.target_field->self.through._meta.get_field(target_field_name)
A:django.db.models.fields.related_descriptors.vals->self.through._default_manager.using(db).values_list(target_field_name, flat=True).filter(**{source_field_name: self.related_val[0], '%s__in' % target_field_name: target_ids})
A:django.db.models.fields.related_descriptors.through_defaults->dict(resolve_callables(through_defaults or {}))
A:django.db.models.fields.related_descriptors.(can_ignore_conflicts, must_send_signals, can_fast_add)->self._get_add_plan(db, source_field_name)
A:django.db.models.fields.related_descriptors.missing_target_ids->self._get_missing_target_ids(source_field_name, target_field_name, db, target_ids)
A:django.db.models.fields.related_descriptors.target_model_qs->super().get_queryset()
A:django.db.models.fields.related_descriptors.old_vals->super().get_queryset().using(db).filter(**{'%s__in' % self.target_field.target_field.attname: old_ids})
django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute(DeferredAttribute)
django.db.models.fields.related_descriptors.ForeignKeyDeferredAttribute.__set__(self,instance,value)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor(self,field_with_rel)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.RelatedObjectDoesNotExist(self)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__init__(self,field_with_rel)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__reduce__(self)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.__set__(self,instance,value)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_object(self,instance)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_prefetch_queryset(self,instances,queryset=None)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.get_queryset(self,**hints)
django.db.models.fields.related_descriptors.ForwardManyToOneDescriptor.is_cached(self,instance)
django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor(ForwardManyToOneDescriptor)
django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor.__set__(self,instance,value)
django.db.models.fields.related_descriptors.ForwardOneToOneDescriptor.get_object(self,instance)
django.db.models.fields.related_descriptors.ManyToManyDescriptor(self,rel,reverse=False)
django.db.models.fields.related_descriptors.ManyToManyDescriptor.__init__(self,rel,reverse=False)
django.db.models.fields.related_descriptors.ManyToManyDescriptor._get_set_deprecation_msg_params(self)
django.db.models.fields.related_descriptors.ManyToManyDescriptor.related_manager_cls(self)
django.db.models.fields.related_descriptors.ManyToManyDescriptor.through(self)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor(self,rel)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__init__(self,rel)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.__set__(self,instance,value)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor._get_set_deprecation_msg_params(self)
django.db.models.fields.related_descriptors.ReverseManyToOneDescriptor.related_manager_cls(self)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor(self,related)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.RelatedObjectDoesNotExist(self)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__init__(self,related)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__reduce__(self)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.__set__(self,instance,value)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.get_prefetch_queryset(self,instances,queryset=None)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.get_queryset(self,**hints)
django.db.models.fields.related_descriptors.ReverseOneToOneDescriptor.is_cached(self,instance)
django.db.models.fields.related_descriptors.create_forward_many_to_many_manager(superclass,rel,reverse)
django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager(superclass,rel)
django.db.models.related_descriptors.ForeignKeyDeferredAttribute(DeferredAttribute)
django.db.models.related_descriptors.ForeignKeyDeferredAttribute.__set__(self,instance,value)
django.db.models.related_descriptors.ForwardManyToOneDescriptor(self,field_with_rel)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.RelatedObjectDoesNotExist(self)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.__reduce__(self)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.__set__(self,instance,value)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.get_object(self,instance)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.get_prefetch_queryset(self,instances,queryset=None)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.get_queryset(self,**hints)
django.db.models.related_descriptors.ForwardManyToOneDescriptor.is_cached(self,instance)
django.db.models.related_descriptors.ForwardOneToOneDescriptor(ForwardManyToOneDescriptor)
django.db.models.related_descriptors.ForwardOneToOneDescriptor.__set__(self,instance,value)
django.db.models.related_descriptors.ForwardOneToOneDescriptor.get_object(self,instance)
django.db.models.related_descriptors.ManyToManyDescriptor(self,rel,reverse=False)
django.db.models.related_descriptors.ManyToManyDescriptor._get_set_deprecation_msg_params(self)
django.db.models.related_descriptors.ManyToManyDescriptor.related_manager_cls(self)
django.db.models.related_descriptors.ManyToManyDescriptor.through(self)
django.db.models.related_descriptors.ReverseManyToOneDescriptor(self,rel)
django.db.models.related_descriptors.ReverseManyToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.related_descriptors.ReverseManyToOneDescriptor.__set__(self,instance,value)
django.db.models.related_descriptors.ReverseManyToOneDescriptor._get_set_deprecation_msg_params(self)
django.db.models.related_descriptors.ReverseManyToOneDescriptor.related_manager_cls(self)
django.db.models.related_descriptors.ReverseOneToOneDescriptor(self,related)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.RelatedObjectDoesNotExist(self)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.__get__(self,instance,cls=None)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.__reduce__(self)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.__set__(self,instance,value)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.get_prefetch_queryset(self,instances,queryset=None)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.get_queryset(self,**hints)
django.db.models.related_descriptors.ReverseOneToOneDescriptor.is_cached(self,instance)
django.db.models.related_descriptors.create_forward_many_to_many_manager(superclass,rel,reverse)
django.db.models.related_descriptors.create_reverse_many_to_one_manager(superclass,rel)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/text.py----------------------------------------
A:django.db.models.functions.text.coalesced->self.coalesce()
A:django.db.models.functions.text.c->self.copy()
A:django.db.models.functions.text.paired->self._paired(expressions)
A:django.db.models.functions.text.output_field->CharField()
A:django.db.models.functions.text.rpad->RPad(expression, length, expression)
django.db.models.functions.Chr(Transform)
django.db.models.functions.Chr.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.Chr.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Chr.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Concat(self,*expressions,**extra)
django.db.models.functions.Concat._paired(self,expressions)
django.db.models.functions.ConcatPair(Func)
django.db.models.functions.ConcatPair.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.ConcatPair.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.ConcatPair.coalesce(self)
django.db.models.functions.LPad(self,expression,length,fill_text=Value(''),**extra)
django.db.models.functions.LTrim(Transform)
django.db.models.functions.Left(self,expression,length,**extra)
django.db.models.functions.Left.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Left.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Left.get_substr(self)
django.db.models.functions.Length(Transform)
django.db.models.functions.Length.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.Lower(Transform)
django.db.models.functions.MD5(OracleHashMixin,Transform)
django.db.models.functions.Ord(Transform)
django.db.models.functions.Ord.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.Ord.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.RPad(LPad)
django.db.models.functions.RTrim(Transform)
django.db.models.functions.Repeat(self,expression,number,**extra)
django.db.models.functions.Repeat.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Replace(self,expression,text,replacement=Value(''),**extra)
django.db.models.functions.Reverse(Transform)
django.db.models.functions.Reverse.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Right(Left)
django.db.models.functions.Right.get_substr(self)
django.db.models.functions.SHA1(OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.SHA224(MySQLSHA2Mixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.SHA224.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.SHA256(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.SHA384(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.SHA512(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.StrIndex(Func)
django.db.models.functions.StrIndex.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.Substr(self,expression,pos,length=None,**extra)
django.db.models.functions.Substr.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Substr.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Trim(Transform)
django.db.models.functions.Upper(Transform)
django.db.models.functions.text.Chr(Transform)
django.db.models.functions.text.Chr.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.text.Chr.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Chr.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.text.Concat(self,*expressions,**extra)
django.db.models.functions.text.Concat.__init__(self,*expressions,**extra)
django.db.models.functions.text.Concat._paired(self,expressions)
django.db.models.functions.text.ConcatPair(Func)
django.db.models.functions.text.ConcatPair.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.text.ConcatPair.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.text.ConcatPair.coalesce(self)
django.db.models.functions.text.LPad(self,expression,length,fill_text=Value(''),**extra)
django.db.models.functions.text.LPad.__init__(self,expression,length,fill_text=Value(''),**extra)
django.db.models.functions.text.LTrim(Transform)
django.db.models.functions.text.Left(self,expression,length,**extra)
django.db.models.functions.text.Left.__init__(self,expression,length,**extra)
django.db.models.functions.text.Left.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Left.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.text.Left.get_substr(self)
django.db.models.functions.text.Length(Transform)
django.db.models.functions.text.Length.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.text.Lower(Transform)
django.db.models.functions.text.MD5(OracleHashMixin,Transform)
django.db.models.functions.text.MySQLSHA2Mixin
django.db.models.functions.text.MySQLSHA2Mixin.as_mysql(self,compiler,connection,**extra_content)
django.db.models.functions.text.OracleHashMixin
django.db.models.functions.text.OracleHashMixin.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Ord(Transform)
django.db.models.functions.text.Ord.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.text.Ord.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.text.PostgreSQLSHAMixin
django.db.models.functions.text.PostgreSQLSHAMixin.as_postgresql(self,compiler,connection,**extra_content)
django.db.models.functions.text.RPad(LPad)
django.db.models.functions.text.RTrim(Transform)
django.db.models.functions.text.Repeat(self,expression,number,**extra)
django.db.models.functions.text.Repeat.__init__(self,expression,number,**extra)
django.db.models.functions.text.Repeat.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Replace(self,expression,text,replacement=Value(''),**extra)
django.db.models.functions.text.Replace.__init__(self,expression,text,replacement=Value(''),**extra)
django.db.models.functions.text.Reverse(Transform)
django.db.models.functions.text.Reverse.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Right(Left)
django.db.models.functions.text.Right.get_substr(self)
django.db.models.functions.text.SHA1(OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.text.SHA224(MySQLSHA2Mixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.text.SHA224.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.SHA256(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.text.SHA384(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.text.SHA512(MySQLSHA2Mixin,OracleHashMixin,PostgreSQLSHAMixin,Transform)
django.db.models.functions.text.StrIndex(Func)
django.db.models.functions.text.StrIndex.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.text.Substr(self,expression,pos,length=None,**extra)
django.db.models.functions.text.Substr.__init__(self,expression,pos,length=None,**extra)
django.db.models.functions.text.Substr.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.text.Substr.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.text.Trim(Transform)
django.db.models.functions.text.Upper(Transform)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/mixins.py----------------------------------------
A:django.db.models.functions.mixins.output_field->DecimalField(decimal_places=sys.float_info.dig, max_digits=1000)
A:django.db.models.functions.mixins.clone->self.copy()
A:django.db.models.functions.mixins.(sql, params)->super().as_sql(compiler, connection, **extra_context)
A:django.db.models.functions.mixins.options->self._get_repr_options()
A:django.db.models.functions.mixins.source_fields->self.get_source_fields()
django.db.models.functions.mixins.FixDecimalInputMixin
django.db.models.functions.mixins.FixDecimalInputMixin.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.mixins.FixDurationInputMixin
django.db.models.functions.mixins.FixDurationInputMixin.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.mixins.FixDurationInputMixin.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.mixins.NumericOutputFieldMixin
django.db.models.functions.mixins.NumericOutputFieldMixin._resolve_output_field(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/window.py----------------------------------------
A:django.db.models.functions.window.output_field->IntegerField()
A:django.db.models.functions.window.sources->self.get_source_expressions()
django.db.models.functions.CumeDist(Func)
django.db.models.functions.DenseRank(Func)
django.db.models.functions.FirstValue(Func)
django.db.models.functions.Lag(LagLeadFunction)
django.db.models.functions.LagLeadFunction(self,expression,offset=1,default=None,**extra)
django.db.models.functions.LagLeadFunction._resolve_output_field(self)
django.db.models.functions.LastValue(Func)
django.db.models.functions.Lead(LagLeadFunction)
django.db.models.functions.NthValue(self,expression,nth=1,**extra)
django.db.models.functions.NthValue._resolve_output_field(self)
django.db.models.functions.Ntile(self,num_buckets=1,**extra)
django.db.models.functions.PercentRank(Func)
django.db.models.functions.Rank(Func)
django.db.models.functions.RowNumber(Func)
django.db.models.functions.window.CumeDist(Func)
django.db.models.functions.window.DenseRank(Func)
django.db.models.functions.window.FirstValue(Func)
django.db.models.functions.window.Lag(LagLeadFunction)
django.db.models.functions.window.LagLeadFunction(self,expression,offset=1,default=None,**extra)
django.db.models.functions.window.LagLeadFunction.__init__(self,expression,offset=1,default=None,**extra)
django.db.models.functions.window.LagLeadFunction._resolve_output_field(self)
django.db.models.functions.window.LastValue(Func)
django.db.models.functions.window.Lead(LagLeadFunction)
django.db.models.functions.window.NthValue(self,expression,nth=1,**extra)
django.db.models.functions.window.NthValue.__init__(self,expression,nth=1,**extra)
django.db.models.functions.window.NthValue._resolve_output_field(self)
django.db.models.functions.window.Ntile(self,num_buckets=1,**extra)
django.db.models.functions.window.Ntile.__init__(self,num_buckets=1,**extra)
django.db.models.functions.window.PercentRank(Func)
django.db.models.functions.window.Rank(Func)
django.db.models.functions.window.RowNumber(Func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/math.py----------------------------------------
A:django.db.models.functions.math.clone->self.copy()
django.db.models.functions.ACos(NumericOutputFieldMixin,Transform)
django.db.models.functions.ASin(NumericOutputFieldMixin,Transform)
django.db.models.functions.ATan(NumericOutputFieldMixin,Transform)
django.db.models.functions.ATan2(NumericOutputFieldMixin,Func)
django.db.models.functions.ATan2.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Abs(Transform)
django.db.models.functions.Ceil(Transform)
django.db.models.functions.Ceil.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Cos(NumericOutputFieldMixin,Transform)
django.db.models.functions.Cot(NumericOutputFieldMixin,Transform)
django.db.models.functions.Cot.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Degrees(NumericOutputFieldMixin,Transform)
django.db.models.functions.Degrees.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Exp(NumericOutputFieldMixin,Transform)
django.db.models.functions.Floor(Transform)
django.db.models.functions.Ln(NumericOutputFieldMixin,Transform)
django.db.models.functions.Log(FixDecimalInputMixin,NumericOutputFieldMixin,Func)
django.db.models.functions.Log.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Mod(FixDecimalInputMixin,NumericOutputFieldMixin,Func)
django.db.models.functions.Pi(NumericOutputFieldMixin,Func)
django.db.models.functions.Pi.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Power(NumericOutputFieldMixin,Func)
django.db.models.functions.Radians(NumericOutputFieldMixin,Transform)
django.db.models.functions.Radians.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Random(NumericOutputFieldMixin,Func)
django.db.models.functions.Random.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.Random.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Random.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Random.get_group_by_cols(self,alias=None)
django.db.models.functions.Round(Transform)
django.db.models.functions.Sign(Transform)
django.db.models.functions.Sin(NumericOutputFieldMixin,Transform)
django.db.models.functions.Sqrt(NumericOutputFieldMixin,Transform)
django.db.models.functions.Tan(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.ACos(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.ASin(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.ATan(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.ATan2(NumericOutputFieldMixin,Func)
django.db.models.functions.math.ATan2.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.math.Abs(Transform)
django.db.models.functions.math.Ceil(Transform)
django.db.models.functions.math.Ceil.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Cos(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Cot(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Cot.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Degrees(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Degrees.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Exp(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Floor(Transform)
django.db.models.functions.math.Ln(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Log(FixDecimalInputMixin,NumericOutputFieldMixin,Func)
django.db.models.functions.math.Log.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.math.Mod(FixDecimalInputMixin,NumericOutputFieldMixin,Func)
django.db.models.functions.math.Pi(NumericOutputFieldMixin,Func)
django.db.models.functions.math.Pi.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Power(NumericOutputFieldMixin,Func)
django.db.models.functions.math.Radians(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Radians.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Random(NumericOutputFieldMixin,Func)
django.db.models.functions.math.Random.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.math.Random.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.math.Random.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.math.Random.get_group_by_cols(self,alias=None)
django.db.models.functions.math.Round(Transform)
django.db.models.functions.math.Sign(Transform)
django.db.models.functions.math.Sin(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Sqrt(NumericOutputFieldMixin,Transform)
django.db.models.functions.math.Tan(NumericOutputFieldMixin,Transform)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/datetime.py----------------------------------------
A:django.db.models.functions.datetime.tzname->self.get_tzname()
A:django.db.models.functions.datetime.output_field->TimeField()
A:django.db.models.functions.datetime.(sql, params)->compiler.compile(self.lhs)
A:django.db.models.functions.datetime.sql->connection.ops.datetime_cast_time_sql(lhs, tzname)
A:django.db.models.functions.datetime.copy->super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.db.models.functions.datetime.(inner_sql, inner_params)->compiler.compile(self.lhs)
A:django.db.models.functions.datetime.value->value.time().time()
A:django.db.models.functions.datetime.(lhs, lhs_params)->compiler.compile(self.lhs)
django.db.models.functions.Extract(self,expression,lookup_name=None,tzinfo=None,**extra)
django.db.models.functions.Extract.as_sql(self,compiler,connection)
django.db.models.functions.Extract.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.functions.ExtractDay(Extract)
django.db.models.functions.ExtractHour(Extract)
django.db.models.functions.ExtractIsoWeekDay(Extract)
django.db.models.functions.ExtractIsoYear(Extract)
django.db.models.functions.ExtractMinute(Extract)
django.db.models.functions.ExtractMonth(Extract)
django.db.models.functions.ExtractQuarter(Extract)
django.db.models.functions.ExtractSecond(Extract)
django.db.models.functions.ExtractWeek(Extract)
django.db.models.functions.ExtractWeekDay(Extract)
django.db.models.functions.ExtractYear(Extract)
django.db.models.functions.Now(Func)
django.db.models.functions.Now.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.Trunc(self,expression,kind,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.TruncBase(self,expression,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.TruncBase.as_sql(self,compiler,connection)
django.db.models.functions.TruncBase.convert_value(self,value,expression,connection)
django.db.models.functions.TruncBase.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.functions.TruncDate(TruncBase)
django.db.models.functions.TruncDate.as_sql(self,compiler,connection)
django.db.models.functions.TruncDay(TruncBase)
django.db.models.functions.TruncHour(TruncBase)
django.db.models.functions.TruncMinute(TruncBase)
django.db.models.functions.TruncMonth(TruncBase)
django.db.models.functions.TruncQuarter(TruncBase)
django.db.models.functions.TruncSecond(TruncBase)
django.db.models.functions.TruncTime(TruncBase)
django.db.models.functions.TruncTime.as_sql(self,compiler,connection)
django.db.models.functions.TruncWeek(TruncBase)
django.db.models.functions.TruncYear(TruncBase)
django.db.models.functions.datetime.Extract(self,expression,lookup_name=None,tzinfo=None,**extra)
django.db.models.functions.datetime.Extract.__init__(self,expression,lookup_name=None,tzinfo=None,**extra)
django.db.models.functions.datetime.Extract.as_sql(self,compiler,connection)
django.db.models.functions.datetime.Extract.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.functions.datetime.ExtractDay(Extract)
django.db.models.functions.datetime.ExtractHour(Extract)
django.db.models.functions.datetime.ExtractIsoWeekDay(Extract)
django.db.models.functions.datetime.ExtractIsoYear(Extract)
django.db.models.functions.datetime.ExtractMinute(Extract)
django.db.models.functions.datetime.ExtractMonth(Extract)
django.db.models.functions.datetime.ExtractQuarter(Extract)
django.db.models.functions.datetime.ExtractSecond(Extract)
django.db.models.functions.datetime.ExtractWeek(Extract)
django.db.models.functions.datetime.ExtractWeekDay(Extract)
django.db.models.functions.datetime.ExtractYear(Extract)
django.db.models.functions.datetime.Now(Func)
django.db.models.functions.datetime.Now.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.datetime.TimezoneMixin
django.db.models.functions.datetime.TimezoneMixin.get_tzname(self)
django.db.models.functions.datetime.Trunc(self,expression,kind,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.datetime.Trunc.__init__(self,expression,kind,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.datetime.TruncBase(self,expression,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.datetime.TruncBase.__init__(self,expression,output_field=None,tzinfo=None,is_dst=None,**extra)
django.db.models.functions.datetime.TruncBase.as_sql(self,compiler,connection)
django.db.models.functions.datetime.TruncBase.convert_value(self,value,expression,connection)
django.db.models.functions.datetime.TruncBase.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.db.models.functions.datetime.TruncDate(TruncBase)
django.db.models.functions.datetime.TruncDate.as_sql(self,compiler,connection)
django.db.models.functions.datetime.TruncDay(TruncBase)
django.db.models.functions.datetime.TruncHour(TruncBase)
django.db.models.functions.datetime.TruncMinute(TruncBase)
django.db.models.functions.datetime.TruncMonth(TruncBase)
django.db.models.functions.datetime.TruncQuarter(TruncBase)
django.db.models.functions.datetime.TruncSecond(TruncBase)
django.db.models.functions.datetime.TruncTime(TruncBase)
django.db.models.functions.datetime.TruncTime.as_sql(self,compiler,connection)
django.db.models.functions.datetime.TruncWeek(TruncBase)
django.db.models.functions.datetime.TruncYear(TruncBase)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/comparison.py----------------------------------------
A:django.db.models.functions.comparison.extra_context['db_type']->self.output_field.cast_db_type(connection)
A:django.db.models.functions.comparison.db_type->self.output_field.db_type(connection)
A:django.db.models.functions.comparison.(sql, params)->super().as_sql(compiler, connection, template=template, **extra_context)
A:django.db.models.functions.comparison.output_type->self.output_field.get_internal_type()
A:django.db.models.functions.comparison.clone->self.copy()
A:django.db.models.functions.comparison.collation_re->_lazy_re_compile('^[\\w\\-]+$')
A:django.db.models.functions.comparison.output_field->JSONField()
django.db.models.functions.Cast(self,expression,output_field)
django.db.models.functions.Cast.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.Cast.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Cast.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.Cast.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.Coalesce(self,*expressions,**extra)
django.db.models.functions.Coalesce.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.Collate(self,expression,collation)
django.db.models.functions.Collate.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.Greatest(self,*expressions,**extra)
django.db.models.functions.Greatest.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.JSONObject(self,**fields)
django.db.models.functions.JSONObject.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.JSONObject.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.JSONObject.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.Least(self,*expressions,**extra)
django.db.models.functions.Least.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.NullIf(Func)
django.db.models.functions.NullIf.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Cast(self,expression,output_field)
django.db.models.functions.comparison.Cast.__init__(self,expression,output_field)
django.db.models.functions.comparison.Cast.as_mysql(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Cast.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Cast.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Cast.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Coalesce(self,*expressions,**extra)
django.db.models.functions.comparison.Coalesce.__init__(self,*expressions,**extra)
django.db.models.functions.comparison.Coalesce.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Collate(self,expression,collation)
django.db.models.functions.comparison.Collate.__init__(self,expression,collation)
django.db.models.functions.comparison.Collate.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Greatest(self,*expressions,**extra)
django.db.models.functions.comparison.Greatest.__init__(self,*expressions,**extra)
django.db.models.functions.comparison.Greatest.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.JSONObject(self,**fields)
django.db.models.functions.comparison.JSONObject.__init__(self,**fields)
django.db.models.functions.comparison.JSONObject.as_oracle(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.JSONObject.as_postgresql(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.JSONObject.as_sql(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.Least(self,*expressions,**extra)
django.db.models.functions.comparison.Least.__init__(self,*expressions,**extra)
django.db.models.functions.comparison.Least.as_sqlite(self,compiler,connection,**extra_context)
django.db.models.functions.comparison.NullIf(Func)
django.db.models.functions.comparison.NullIf.as_oracle(self,compiler,connection,**extra_context)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/functions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/subqueries.py----------------------------------------
A:django.db.models.sql.subqueries.cursor->self.get_compiler(using).execute_sql(CURSOR)
A:django.db.models.sql.subqueries.self.where->self.where_class()
A:django.db.models.sql.subqueries.obj->super().clone()
A:django.db.models.sql.subqueries.obj.related_updates->self.related_updates.copy()
A:django.db.models.sql.subqueries.field->self.get_meta().get_field(name)
A:django.db.models.sql.subqueries.val->val.resolve_expression(self, allow_joins=False, for_save=True).resolve_expression(self, allow_joins=False, for_save=True)
A:django.db.models.sql.subqueries.query->UpdateQuery(model)
django.db.models.sql.AggregateQuery(self,model,inner_query)
django.db.models.sql.DeleteQuery(Query)
django.db.models.sql.DeleteQuery.delete_batch(self,pk_list,using)
django.db.models.sql.DeleteQuery.do_query(self,table,where,using)
django.db.models.sql.InsertQuery(self,*args,ignore_conflicts=False,**kwargs)
django.db.models.sql.InsertQuery.insert_values(self,fields,objs,raw=False)
django.db.models.sql.UpdateQuery(self,*args,**kwargs)
django.db.models.sql.UpdateQuery._setup_query(self)
django.db.models.sql.UpdateQuery.add_related_update(self,model,field,value)
django.db.models.sql.UpdateQuery.add_update_fields(self,values_seq)
django.db.models.sql.UpdateQuery.add_update_values(self,values)
django.db.models.sql.UpdateQuery.clone(self)
django.db.models.sql.UpdateQuery.get_related_updates(self)
django.db.models.sql.UpdateQuery.update_batch(self,pk_list,values,using)
django.db.models.sql.subqueries.AggregateQuery(self,model,inner_query)
django.db.models.sql.subqueries.AggregateQuery.__init__(self,model,inner_query)
django.db.models.sql.subqueries.DeleteQuery(Query)
django.db.models.sql.subqueries.DeleteQuery.delete_batch(self,pk_list,using)
django.db.models.sql.subqueries.DeleteQuery.do_query(self,table,where,using)
django.db.models.sql.subqueries.InsertQuery(self,*args,ignore_conflicts=False,**kwargs)
django.db.models.sql.subqueries.InsertQuery.__init__(self,*args,ignore_conflicts=False,**kwargs)
django.db.models.sql.subqueries.InsertQuery.insert_values(self,fields,objs,raw=False)
django.db.models.sql.subqueries.UpdateQuery(self,*args,**kwargs)
django.db.models.sql.subqueries.UpdateQuery.__init__(self,*args,**kwargs)
django.db.models.sql.subqueries.UpdateQuery._setup_query(self)
django.db.models.sql.subqueries.UpdateQuery.add_related_update(self,model,field,value)
django.db.models.sql.subqueries.UpdateQuery.add_update_fields(self,values_seq)
django.db.models.sql.subqueries.UpdateQuery.add_update_values(self,values)
django.db.models.sql.subqueries.UpdateQuery.clone(self)
django.db.models.sql.subqueries.UpdateQuery.get_related_updates(self)
django.db.models.sql.subqueries.UpdateQuery.update_batch(self,pk_list,values,using)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/where.py----------------------------------------
A:django.db.models.sql.where.(where_part, having_part)->c.split_having(in_negated)
A:django.db.models.sql.where.(sql, params)->compiler.compile(child)
A:django.db.models.sql.where.sql_string->conn.join(result)
A:django.db.models.sql.where.self.children[pos]->child.relabeled_clone(change_map)
A:django.db.models.sql.where.clone->self.clone()
A:django.db.models.sql.where.expr->expr.resolve_expression(query, *args, **kwargs).resolve_expression(query, *args, **kwargs)
A:django.db.models.sql.where.node.lhs->cls._resolve_leaf(node.lhs, query, *args, **kwargs)
A:django.db.models.sql.where.node.rhs->cls._resolve_leaf(node.rhs, query, *args, **kwargs)
A:django.db.models.sql.where.query_compiler->query.get_compiler(connection=connection)
django.db.models.sql.where.ExtraWhere(self,sqls,params)
django.db.models.sql.where.ExtraWhere.__init__(self,sqls,params)
django.db.models.sql.where.ExtraWhere.as_sql(self,compiler=None,connection=None)
django.db.models.sql.where.NothingNode
django.db.models.sql.where.NothingNode.as_sql(self,compiler=None,connection=None)
django.db.models.sql.where.SubqueryConstraint(self,alias,columns,targets,query_object)
django.db.models.sql.where.SubqueryConstraint.__init__(self,alias,columns,targets,query_object)
django.db.models.sql.where.SubqueryConstraint.as_sql(self,compiler,connection)
django.db.models.sql.where.WhereNode(tree.Node)
django.db.models.sql.where.WhereNode._contains_aggregate(cls,obj)
django.db.models.sql.where.WhereNode._contains_over_clause(cls,obj)
django.db.models.sql.where.WhereNode._resolve_leaf(expr,query,*args,**kwargs)
django.db.models.sql.where.WhereNode._resolve_node(cls,node,query,*args,**kwargs)
django.db.models.sql.where.WhereNode.as_sql(self,compiler,connection)
django.db.models.sql.where.WhereNode.clone(self)
django.db.models.sql.where.WhereNode.contains_aggregate(self)
django.db.models.sql.where.WhereNode.contains_over_clause(self)
django.db.models.sql.where.WhereNode.copy(self)
django.db.models.sql.where.WhereNode.get_group_by_cols(self,alias=None)
django.db.models.sql.where.WhereNode.get_source_expressions(self)
django.db.models.sql.where.WhereNode.is_summary(self)
django.db.models.sql.where.WhereNode.relabel_aliases(self,change_map)
django.db.models.sql.where.WhereNode.relabeled_clone(self,change_map)
django.db.models.sql.where.WhereNode.resolve_expression(self,*args,**kwargs)
django.db.models.sql.where.WhereNode.set_source_expressions(self,children)
django.db.models.sql.where.WhereNode.split_having(self,negated=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/query.py----------------------------------------
A:django.db.models.sql.query.JoinInfo->namedtuple('JoinInfo', ('final_field', 'targets', 'opts', 'joins', 'path', 'transform_function'))
A:django.db.models.sql.query.result->next(compiler.apply_converters((result,), converters))
A:django.db.models.sql.query.params->tuple((adapter(val) for val in self.params))
A:django.db.models.sql.query.self.cursor->Join(opts.db_table, alias, table_alias, INNER, join.join_field, nullable, filtered_relation=filtered_relation).cursor()
A:django.db.models.sql.query.subq_aliases->frozenset([alias_prefix])
A:django.db.models.sql.query.self.used_aliases->set()
A:django.db.models.sql.query.self.where->where()
A:django.db.models.sql.query.(sql, params)->self.get_compiler(connection=connection).as_sql()
A:django.db.models.sql.query.obj->self.clone()
A:django.db.models.sql.query.obj.__dict__->self.__dict__.copy()
A:django.db.models.sql.query.obj.alias_refcount->self.alias_refcount.copy()
A:django.db.models.sql.query.obj.alias_map->self.alias_map.copy()
A:django.db.models.sql.query.obj.external_aliases->self.external_aliases.copy()
A:django.db.models.sql.query.obj.table_map->self.table_map.copy()
A:django.db.models.sql.query.obj.where->self.where.clone()
A:django.db.models.sql.query.obj.annotations->self.annotations.copy()
A:django.db.models.sql.query.obj.annotation_select_mask->self.annotation_select_mask.copy()
A:django.db.models.sql.query.obj.combined_queries->tuple((query.clone() for query in self.combined_queries))
A:django.db.models.sql.query.obj.extra->self.extra.copy()
A:django.db.models.sql.query.obj.extra_select_mask->self.extra_select_mask.copy()
A:django.db.models.sql.query.obj._extra_select_cache->self._extra_select_cache.copy()
A:django.db.models.sql.query.obj.select_related->copy.deepcopy(obj.select_related)
A:django.db.models.sql.query.obj.subq_aliases->self.subq_aliases.copy()
A:django.db.models.sql.query.obj.used_aliases->set()
A:django.db.models.sql.query.obj._filtered_relations->self._filtered_relations.copy()
A:django.db.models.sql.query.clone->self.clone()
A:django.db.models.sql.query.orig_exprs->self.try_transform(annotation, transform).get_source_expressions()
A:django.db.models.sql.query.(new_expr, col_cnt)->self.rewrite_cols(expr, col_cnt)
A:django.db.models.sql.query.new_expr->Ref(col_alias, expr)
A:django.db.models.sql.query.inner_query->self.clone()
A:django.db.models.sql.query.outer_query->AggregateQuery(self.model, inner_query)
A:django.db.models.sql.query.has_existing_aggregate_annotations->any((annotation for annotation in existing_annotations if getattr(annotation, 'contains_aggregate', True)))
A:django.db.models.sql.query.(expression, col_cnt)->self.clone().rewrite_cols(expression, col_cnt)
A:django.db.models.sql.query.outer_query.annotations[alias]->expression.relabeled_clone(relabels)
A:django.db.models.sql.query.compiler->self.clone().get_compiler(using=using)
A:django.db.models.sql.query.converters->self.clone().get_compiler(using=using).get_converters(outer_query.annotation_select.values())
A:django.db.models.sql.query.q->self.clone()
A:django.db.models.sql.query.q.combined_queries->tuple((combined_query.exists(using, limit=limit_combined) for combined_query in q.combined_queries))
A:django.db.models.sql.query.joinpromoter->JoinPromoter(q_object.connector, len(q_object.children), current_negated)
A:django.db.models.sql.query.rhs_votes->set()
A:django.db.models.sql.query.join->join.relabeled_clone(change_map).relabeled_clone(change_map)
A:django.db.models.sql.query.new_alias->self.join(join, reuse=reuse)
A:django.db.models.sql.query.w->rhs.where.clone()
A:django.db.models.sql.query.extra_select_mask->set()
A:django.db.models.sql.query.orig_opts->self.get_meta()
A:django.db.models.sql.query.parts->join.filtered_relation.clone().relation_name.split(LOOKUP_SEP)
A:django.db.models.sql.query.source->self.get_meta().get_field(name)
A:django.db.models.sql.query.field->self.get_meta().get_field(filtered_relation.relation_name)
A:django.db.models.sql.query.alias_list->self.table_map.get(table_name)
A:django.db.models.sql.query.aliases->list(aliases)
A:django.db.models.sql.query.alias->self.get_initial_alias()
A:django.db.models.sql.query.self.alias_map[alias]->self.alias_map[alias].demote()
A:django.db.models.sql.query.self.group_by->tuple(group_by)
A:django.db.models.sql.query.self.select->tuple(cols)
A:django.db.models.sql.query.alias_data->self.alias_map[old_alias].relabeled_clone(change_map)
A:django.db.models.sql.query.prefix->chr(ord(self.alias_prefix) + 1)
A:django.db.models.sql.query.self.subq_aliases->self.subq_aliases.union([self.alias_prefix])
A:django.db.models.sql.query.outer_query.subq_aliases->AggregateQuery(self.model, inner_query).subq_aliases.union(self.subq_aliases)
A:django.db.models.sql.query.(alias, _)->self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)
A:django.db.models.sql.query.chain->self.get_meta().get_base_chain(model)
A:django.db.models.sql.query.link_field->curr_opts.get_ancestor_link(int_model)
A:django.db.models.sql.query.join_info->self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m)
A:django.db.models.sql.query.annotation->self.try_transform(annotation, transform)
A:django.db.models.sql.query.resolved->list(value).resolve_expression(query, *args, **kwargs)
A:django.db.models.sql.query.exprs->chain(self.annotations.values(), self.where.children)
A:django.db.models.sql.query.value->list(value)
A:django.db.models.sql.query.type_->type(value)
A:django.db.models.sql.query.lookup_splitted->lookup_class(col, ResolvedOuterRef(trimmed_prefix)).split(LOOKUP_SEP)
A:django.db.models.sql.query.(expression, expression_lookups)->refs_expression(lookup_splitted, self.annotations)
A:django.db.models.sql.query.(_, field, _, lookup_parts)->self.names_to_path(lookup_splitted, self.get_meta())
A:django.db.models.sql.query.lhs->self.try_transform(lhs, lookup_name)
A:django.db.models.sql.query.lookup_class->select_field.get_lookup('exact')
A:django.db.models.sql.query.lookup->lookup_class(col, ResolvedOuterRef(trimmed_prefix))
A:django.db.models.sql.query.transform_class->self.try_transform(lhs, lookup_name).get_transform(name)
A:django.db.models.sql.query.suggested_lookups->difflib.get_close_matches(name, output_field.get_lookups())
A:django.db.models.sql.query.condition->self.build_lookup(lookups, col, value)
A:django.db.models.sql.query.clause->self.where_class()
A:django.db.models.sql.query.(lookups, parts, reffed_expression)->self.solve_lookup_type(arg)
A:django.db.models.sql.query.pre_joins->self.alias_refcount.copy()
A:django.db.models.sql.query.opts->self.get_meta()
A:django.db.models.sql.query.(targets, alias, join_list)->self.trim_joins(join_info.targets, join_info.joins, join_info.path)
A:django.db.models.sql.query.num_lookups->len(lookups)
A:django.db.models.sql.query.col->self._get_col(targets[0], join_info.targets[0], alias)
A:django.db.models.sql.query.(clause, _)->self._add_q(q_object, self.used_aliases)
A:django.db.models.sql.query.target_clause->self.where_class(connector=connector, negated=q_object.negated)
A:django.db.models.sql.query.(child_clause, needed_inner)->self.build_filter(child, can_reuse=used_aliases, branch_negated=branch_negated, current_negated=current_negated, allow_joins=allow_joins, split_subq=split_subq, check_filterable=check_filterable)
A:django.db.models.sql.query.needed_inner->JoinPromoter(q_object.connector, len(q_object.children), current_negated).update_join_types(self)
A:django.db.models.sql.query.child_clause->self.build_filtered_relation_q(child, reuse=reuse, branch_negated=branch_negated, current_negated=current_negated)
A:django.db.models.sql.query.(child_clause, _)->self.build_filter(child, can_reuse=reuse, branch_negated=branch_negated, current_negated=current_negated, allow_joins=True, split_subq=False, reuse_with_filtered_relation=True)
A:django.db.models.sql.query.lookups->dict(get_children_from_q(filtered_relation.condition))
A:django.db.models.sql.query.(relation_lookup_parts, relation_field_parts, _)->self.solve_lookup_type(filtered_relation.relation_name)
A:django.db.models.sql.query.(lookup_parts, lookup_field_parts, _)->self.solve_lookup_type(lookup)
A:django.db.models.sql.query.(filtered_relation_path, field, _, _)->self.names_to_path(parts, opts, allow_many, fail_on_missing)
A:django.db.models.sql.query.available->sorted([*get_field_names_from_opts(opts), *self.annotation_select, *self._filtered_relations])
A:django.db.models.sql.query.path_to_parent->self.get_meta().get_path_to_parent(model)
A:django.db.models.sql.query.pathinfos->self.get_meta().get_field(filtered_relation.relation_name).get_path_info(filtered_relation)
A:django.db.models.sql.query.(path, final_field, targets, rest)->self.names_to_path(names[:pivot], opts, allow_many, fail_on_missing=True)
A:django.db.models.sql.query.wrapped->previous(field, alias)
A:django.db.models.sql.query.final_transformer->functools.partial(transform, name=name, previous=final_transformer)
A:django.db.models.sql.query.filtered_relation->join.relabeled_clone(change_map).relabeled_clone(change_map).filtered_relation.clone()
A:django.db.models.sql.query.nullable->self.is_nullable(join.join_field)
A:django.db.models.sql.query.connection->Join(opts.db_table, alias, table_alias, INNER, join.join_field, nullable, filtered_relation=filtered_relation)
A:django.db.models.sql.query.targets->tuple((targets_dict[t.column] for t in targets))
A:django.db.models.sql.query.field_list->name.split(LOOKUP_SEP)
A:django.db.models.sql.query.(targets, final_alias, join_list)->self.trim_joins(join_info.targets, join_info.joins, join_info.path)
A:django.db.models.sql.query.transform->self.setup_joins(name.split(LOOKUP_SEP), opts, alias, allow_many=allow_m2m).transform_function(targets[0], final_alias)
A:django.db.models.sql.query.query->Query(self.model)
A:django.db.models.sql.query.(trimmed_prefix, contains_louter)->Query(self.model).trim_start(names_with_path)
A:django.db.models.sql.query.(condition, needed_inner)->self.build_filter(Exists(query))
A:django.db.models.sql.query.(or_null_condition, _)->self.build_filter(('%s__isnull' % trimmed_prefix, True), current_negated=True, branch_negated=True, can_reuse=can_reuse)
A:django.db.models.sql.query.self.high_mark->min(self.high_mark, self.low_mark + high)
A:django.db.models.sql.query.self.low_mark->min(self.high_mark, self.low_mark + low)
A:django.db.models.sql.query.(targets, final_alias, joins)->self.trim_joins(join_info.targets, join_info.joins, join_info.path)
A:django.db.models.sql.query.names->sorted([*get_field_names_from_opts(opts), *self.extra, *self.annotation_select, *self._filtered_relations])
A:django.db.models.sql.query.column_names->set()
A:django.db.models.sql.query.seen_models->set()
A:django.db.models.sql.query.group_by->list(self.select)
A:django.db.models.sql.query.signature->inspect.signature(annotation.get_group_by_cols)
A:django.db.models.sql.query.group_by_cols->self.try_transform(annotation, transform).get_group_by_cols(alias=alias)
A:django.db.models.sql.query.d->d.setdefault(part, {}).setdefault(part, {})
A:django.db.models.sql.query.param_iter->iter([])
A:django.db.models.sql.query.entry->str(entry)
A:django.db.models.sql.query.pos->str(entry).find('%s', pos + 2)
A:django.db.models.sql.query.field_names->list(fields)
A:django.db.models.sql.query.self.annotation_select_mask->set(names)
A:django.db.models.sql.query.self.extra_select_mask->set(names)
A:django.db.models.sql.query.selected->frozenset(field_names)
A:django.db.models.sql.query.self.values_select->tuple(field_names)
A:django.db.models.sql.query.trimmed_prefix->django.db.models.constants.LOOKUP_SEP.join(trimmed_prefix)
A:django.db.models.sql.query.extra_restriction->join_field.get_extra_restriction(self.where_class, None, lookup_tables[trimmed_paths + 1])
A:django.db.models.sql.query.self.alias_map[table]->BaseTable(self.alias_map[table].table_name, table)
A:django.db.models.sql.query.self.votes->Counter()
A:django.db.models.sql.query.to_promote->set()
A:django.db.models.sql.query.to_demote->set()
django.db.models.sql.JoinPromoter(self,connector,num_children,negated)
django.db.models.sql.JoinPromoter.add_votes(self,votes)
django.db.models.sql.JoinPromoter.update_join_types(self,query)
django.db.models.sql.Query(self,model,where=WhereNode,alias_cols=True)
django.db.models.sql.Query.__deepcopy__(self,memo)
django.db.models.sql.Query.__str__(self)
django.db.models.sql.Query._add_q(self,q_object,used_aliases,branch_negated=False,current_negated=False,allow_joins=True,split_subq=True,check_filterable=True)
django.db.models.sql.Query._gen_col_aliases(cls,exprs)
django.db.models.sql.Query._gen_cols(cls,exprs,include_external=False)
django.db.models.sql.Query._get_col(self,target,field,alias)
django.db.models.sql.Query.add_annotation(self,annotation,alias,is_summary=False,select=True)
django.db.models.sql.Query.add_deferred_loading(self,field_names)
django.db.models.sql.Query.add_distinct_fields(self,*field_names)
django.db.models.sql.Query.add_extra(self,select,select_params,where,params,tables,order_by)
django.db.models.sql.Query.add_fields(self,field_names,allow_m2m=True)
django.db.models.sql.Query.add_filter(self,filter_clause)
django.db.models.sql.Query.add_filtered_relation(self,filtered_relation,alias)
django.db.models.sql.Query.add_immediate_loading(self,field_names)
django.db.models.sql.Query.add_ordering(self,*ordering)
django.db.models.sql.Query.add_q(self,q_object)
django.db.models.sql.Query.add_select_col(self,col,name)
django.db.models.sql.Query.add_select_related(self,fields)
django.db.models.sql.Query.annotation_select(self)
django.db.models.sql.Query.append_annotation_mask(self,names)
django.db.models.sql.Query.as_sql(self,compiler,connection)
django.db.models.sql.Query.base_table(self)
django.db.models.sql.Query.build_filter(self,filter_expr,branch_negated=False,current_negated=False,can_reuse=None,allow_joins=True,split_subq=True,reuse_with_filtered_relation=False,check_filterable=True)
django.db.models.sql.Query.build_filtered_relation_q(self,q_object,reuse,branch_negated=False,current_negated=False)
django.db.models.sql.Query.build_lookup(self,lookups,lhs,rhs)
django.db.models.sql.Query.build_where(self,filter_expr)
django.db.models.sql.Query.bump_prefix(self,outer_query)
django.db.models.sql.Query.can_filter(self)
django.db.models.sql.Query.chain(self,klass=None)
django.db.models.sql.Query.change_aliases(self,change_map)
django.db.models.sql.Query.check_filterable(self,expression)
django.db.models.sql.Query.check_query_object_type(self,value,opts,field)
django.db.models.sql.Query.check_related_objects(self,field,value,opts)
django.db.models.sql.Query.clear_deferred_loading(self)
django.db.models.sql.Query.clear_limits(self)
django.db.models.sql.Query.clear_ordering(self,force_empty)
django.db.models.sql.Query.clear_select_clause(self)
django.db.models.sql.Query.clear_select_fields(self)
django.db.models.sql.Query.clone(self)
django.db.models.sql.Query.combine(self,rhs,connector)
django.db.models.sql.Query.count_active_tables(self)
django.db.models.sql.Query.deferred_to_data(self,target,callback)
django.db.models.sql.Query.demote_joins(self,aliases)
django.db.models.sql.Query.exists(self,using,limit=True)
django.db.models.sql.Query.explain(self,using,format=None,**options)
django.db.models.sql.Query.extra_select(self)
django.db.models.sql.Query.get_aggregation(self,using,added_aggregate_names)
django.db.models.sql.Query.get_compiler(self,using=None,connection=None)
django.db.models.sql.Query.get_count(self,using)
django.db.models.sql.Query.get_external_cols(self)
django.db.models.sql.Query.get_initial_alias(self)
django.db.models.sql.Query.get_loaded_field_names(self)
django.db.models.sql.Query.get_loaded_field_names_cb(self,target,model,fields)
django.db.models.sql.Query.get_meta(self)
django.db.models.sql.Query.has_filters(self)
django.db.models.sql.Query.has_limit_one(self)
django.db.models.sql.Query.has_results(self,using)
django.db.models.sql.Query.has_select_fields(self)
django.db.models.sql.Query.is_empty(self)
django.db.models.sql.Query.is_nullable(self,field)
django.db.models.sql.Query.is_sliced(self)
django.db.models.sql.Query.join(self,join,reuse=None,reuse_with_filtered_relation=False)
django.db.models.sql.Query.join_parent_model(self,opts,model,alias,seen)
django.db.models.sql.Query.names_to_path(self,names,opts,allow_many=True,fail_on_missing=False)
django.db.models.sql.Query.output_field(self)
django.db.models.sql.Query.promote_joins(self,aliases)
django.db.models.sql.Query.ref_alias(self,alias)
django.db.models.sql.Query.relabeled_clone(self,change_map)
django.db.models.sql.Query.reset_refcounts(self,to_counts)
django.db.models.sql.Query.resolve_expression(self,query,*args,**kwargs)
django.db.models.sql.Query.resolve_lookup_value(self,value,can_reuse,allow_joins)
django.db.models.sql.Query.resolve_ref(self,name,allow_joins=True,reuse=None,summarize=False)
django.db.models.sql.Query.rewrite_cols(self,annotation,col_cnt)
django.db.models.sql.Query.set_annotation_mask(self,names)
django.db.models.sql.Query.set_empty(self)
django.db.models.sql.Query.set_extra_mask(self,names)
django.db.models.sql.Query.set_group_by(self,allow_aliases=True)
django.db.models.sql.Query.set_limits(self,low=None,high=None)
django.db.models.sql.Query.set_select(self,cols)
django.db.models.sql.Query.set_values(self,fields)
django.db.models.sql.Query.setup_joins(self,names,opts,alias,can_reuse=None,allow_many=True,reuse_with_filtered_relation=False)
django.db.models.sql.Query.solve_lookup_type(self,lookup)
django.db.models.sql.Query.split_exclude(self,filter_expr,can_reuse,names_with_path)
django.db.models.sql.Query.sql_with_params(self)
django.db.models.sql.Query.table_alias(self,table_name,create=False,filtered_relation=None)
django.db.models.sql.Query.trim_joins(self,targets,joins,path)
django.db.models.sql.Query.trim_start(self,names_with_path)
django.db.models.sql.Query.try_transform(self,lhs,name)
django.db.models.sql.Query.unref_alias(self,alias,amount=1)
django.db.models.sql.RawQuery(self,sql,using,params=())
django.db.models.sql.RawQuery.__iter__(self)
django.db.models.sql.RawQuery.__repr__(self)
django.db.models.sql.RawQuery.__str__(self)
django.db.models.sql.RawQuery._execute_query(self)
django.db.models.sql.RawQuery.chain(self,using)
django.db.models.sql.RawQuery.clone(self,using)
django.db.models.sql.RawQuery.get_columns(self)
django.db.models.sql.RawQuery.params_type(self)
django.db.models.sql.add_to_dict(data,key,value)
django.db.models.sql.get_children_from_q(q)
django.db.models.sql.get_field_names_from_opts(opts)
django.db.models.sql.get_order_dir(field,default='ASC')
django.db.models.sql.is_reverse_o2o(field)
django.db.models.sql.query.JoinPromoter(self,connector,num_children,negated)
django.db.models.sql.query.JoinPromoter.__init__(self,connector,num_children,negated)
django.db.models.sql.query.JoinPromoter.add_votes(self,votes)
django.db.models.sql.query.JoinPromoter.update_join_types(self,query)
django.db.models.sql.query.Query(self,model,where=WhereNode,alias_cols=True)
django.db.models.sql.query.Query.__deepcopy__(self,memo)
django.db.models.sql.query.Query.__init__(self,model,where=WhereNode,alias_cols=True)
django.db.models.sql.query.Query.__str__(self)
django.db.models.sql.query.Query._add_q(self,q_object,used_aliases,branch_negated=False,current_negated=False,allow_joins=True,split_subq=True,check_filterable=True)
django.db.models.sql.query.Query._gen_col_aliases(cls,exprs)
django.db.models.sql.query.Query._gen_cols(cls,exprs,include_external=False)
django.db.models.sql.query.Query._get_col(self,target,field,alias)
django.db.models.sql.query.Query.add_annotation(self,annotation,alias,is_summary=False,select=True)
django.db.models.sql.query.Query.add_deferred_loading(self,field_names)
django.db.models.sql.query.Query.add_distinct_fields(self,*field_names)
django.db.models.sql.query.Query.add_extra(self,select,select_params,where,params,tables,order_by)
django.db.models.sql.query.Query.add_fields(self,field_names,allow_m2m=True)
django.db.models.sql.query.Query.add_filter(self,filter_clause)
django.db.models.sql.query.Query.add_filtered_relation(self,filtered_relation,alias)
django.db.models.sql.query.Query.add_immediate_loading(self,field_names)
django.db.models.sql.query.Query.add_ordering(self,*ordering)
django.db.models.sql.query.Query.add_q(self,q_object)
django.db.models.sql.query.Query.add_select_col(self,col,name)
django.db.models.sql.query.Query.add_select_related(self,fields)
django.db.models.sql.query.Query.annotation_select(self)
django.db.models.sql.query.Query.append_annotation_mask(self,names)
django.db.models.sql.query.Query.as_sql(self,compiler,connection)
django.db.models.sql.query.Query.base_table(self)
django.db.models.sql.query.Query.build_filter(self,filter_expr,branch_negated=False,current_negated=False,can_reuse=None,allow_joins=True,split_subq=True,reuse_with_filtered_relation=False,check_filterable=True)
django.db.models.sql.query.Query.build_filtered_relation_q(self,q_object,reuse,branch_negated=False,current_negated=False)
django.db.models.sql.query.Query.build_lookup(self,lookups,lhs,rhs)
django.db.models.sql.query.Query.build_where(self,filter_expr)
django.db.models.sql.query.Query.bump_prefix(self,outer_query)
django.db.models.sql.query.Query.can_filter(self)
django.db.models.sql.query.Query.chain(self,klass=None)
django.db.models.sql.query.Query.change_aliases(self,change_map)
django.db.models.sql.query.Query.check_filterable(self,expression)
django.db.models.sql.query.Query.check_query_object_type(self,value,opts,field)
django.db.models.sql.query.Query.check_related_objects(self,field,value,opts)
django.db.models.sql.query.Query.clear_deferred_loading(self)
django.db.models.sql.query.Query.clear_limits(self)
django.db.models.sql.query.Query.clear_ordering(self,force_empty)
django.db.models.sql.query.Query.clear_select_clause(self)
django.db.models.sql.query.Query.clear_select_fields(self)
django.db.models.sql.query.Query.clone(self)
django.db.models.sql.query.Query.combine(self,rhs,connector)
django.db.models.sql.query.Query.count_active_tables(self)
django.db.models.sql.query.Query.deferred_to_data(self,target,callback)
django.db.models.sql.query.Query.demote_joins(self,aliases)
django.db.models.sql.query.Query.exists(self,using,limit=True)
django.db.models.sql.query.Query.explain(self,using,format=None,**options)
django.db.models.sql.query.Query.extra_select(self)
django.db.models.sql.query.Query.get_aggregation(self,using,added_aggregate_names)
django.db.models.sql.query.Query.get_compiler(self,using=None,connection=None)
django.db.models.sql.query.Query.get_count(self,using)
django.db.models.sql.query.Query.get_external_cols(self)
django.db.models.sql.query.Query.get_initial_alias(self)
django.db.models.sql.query.Query.get_loaded_field_names(self)
django.db.models.sql.query.Query.get_loaded_field_names_cb(self,target,model,fields)
django.db.models.sql.query.Query.get_meta(self)
django.db.models.sql.query.Query.has_filters(self)
django.db.models.sql.query.Query.has_limit_one(self)
django.db.models.sql.query.Query.has_results(self,using)
django.db.models.sql.query.Query.has_select_fields(self)
django.db.models.sql.query.Query.is_empty(self)
django.db.models.sql.query.Query.is_nullable(self,field)
django.db.models.sql.query.Query.is_sliced(self)
django.db.models.sql.query.Query.join(self,join,reuse=None,reuse_with_filtered_relation=False)
django.db.models.sql.query.Query.join_parent_model(self,opts,model,alias,seen)
django.db.models.sql.query.Query.names_to_path(self,names,opts,allow_many=True,fail_on_missing=False)
django.db.models.sql.query.Query.output_field(self)
django.db.models.sql.query.Query.promote_joins(self,aliases)
django.db.models.sql.query.Query.ref_alias(self,alias)
django.db.models.sql.query.Query.relabeled_clone(self,change_map)
django.db.models.sql.query.Query.reset_refcounts(self,to_counts)
django.db.models.sql.query.Query.resolve_expression(self,query,*args,**kwargs)
django.db.models.sql.query.Query.resolve_lookup_value(self,value,can_reuse,allow_joins)
django.db.models.sql.query.Query.resolve_ref(self,name,allow_joins=True,reuse=None,summarize=False)
django.db.models.sql.query.Query.rewrite_cols(self,annotation,col_cnt)
django.db.models.sql.query.Query.set_annotation_mask(self,names)
django.db.models.sql.query.Query.set_empty(self)
django.db.models.sql.query.Query.set_extra_mask(self,names)
django.db.models.sql.query.Query.set_group_by(self,allow_aliases=True)
django.db.models.sql.query.Query.set_limits(self,low=None,high=None)
django.db.models.sql.query.Query.set_select(self,cols)
django.db.models.sql.query.Query.set_values(self,fields)
django.db.models.sql.query.Query.setup_joins(self,names,opts,alias,can_reuse=None,allow_many=True,reuse_with_filtered_relation=False)
django.db.models.sql.query.Query.solve_lookup_type(self,lookup)
django.db.models.sql.query.Query.split_exclude(self,filter_expr,can_reuse,names_with_path)
django.db.models.sql.query.Query.sql_with_params(self)
django.db.models.sql.query.Query.table_alias(self,table_name,create=False,filtered_relation=None)
django.db.models.sql.query.Query.trim_joins(self,targets,joins,path)
django.db.models.sql.query.Query.trim_start(self,names_with_path)
django.db.models.sql.query.Query.try_transform(self,lhs,name)
django.db.models.sql.query.Query.unref_alias(self,alias,amount=1)
django.db.models.sql.query.RawQuery(self,sql,using,params=())
django.db.models.sql.query.RawQuery.__init__(self,sql,using,params=())
django.db.models.sql.query.RawQuery.__iter__(self)
django.db.models.sql.query.RawQuery.__repr__(self)
django.db.models.sql.query.RawQuery.__str__(self)
django.db.models.sql.query.RawQuery._execute_query(self)
django.db.models.sql.query.RawQuery.chain(self,using)
django.db.models.sql.query.RawQuery.clone(self,using)
django.db.models.sql.query.RawQuery.get_columns(self)
django.db.models.sql.query.RawQuery.params_type(self)
django.db.models.sql.query.add_to_dict(data,key,value)
django.db.models.sql.query.get_children_from_q(q)
django.db.models.sql.query.get_field_names_from_opts(opts)
django.db.models.sql.query.get_order_dir(field,default='ASC')
django.db.models.sql.query.is_reverse_o2o(field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/compiler.py----------------------------------------
A:django.db.models.sql.compiler.ordering_parts->_lazy_re_compile('^(.*)\\s(?:ASC|DESC).*', re.MULTILINE | re.DOTALL)
A:django.db.models.sql.compiler.(self.select, self.klass_info, self.annotation_col_map)->self.get_select()
A:django.db.models.sql.compiler.self.col_count->len(self.query.annotation_select)
A:django.db.models.sql.compiler.order_by->self.get_order_by()
A:django.db.models.sql.compiler.(self.where, self.having)->self.query.where.split_having()
A:django.db.models.sql.compiler.extra_select->self.get_extra_select(order_by, self.select)
A:django.db.models.sql.compiler.self.has_extra_select->bool(extra_select)
A:django.db.models.sql.compiler.group_by->self.get_group_by(self.select + extra_select, order_by)
A:django.db.models.sql.compiler.cols->self.get_default_columns()
A:django.db.models.sql.compiler.seen->set()
A:django.db.models.sql.compiler.expressions->self.collapse_group_by(expressions, having_group_by)
A:django.db.models.sql.compiler.(sql, params)->self.compile(val)
A:django.db.models.sql.compiler.params_hash->make_hashable(params)
A:django.db.models.sql.compiler.related_klass_infos->self.get_related_selections(select)
A:django.db.models.sql.compiler.field->field.copy().copy()
A:django.db.models.sql.compiler.(col, order)->get_order_dir(field, asc)
A:django.db.models.sql.compiler.expr->Cast(expr, expr.output_field)
A:django.db.models.sql.compiler.(table, col)->_get_first_selected_col_from_model(klass_info).split('.', 1)
A:django.db.models.sql.compiler.resolved->Cast(expr, expr.output_field).resolve_expression(self.query, allow_joins=True, reuse=None)
A:django.db.models.sql.compiler.r->self.connection.ops.quote_name(name)
A:django.db.models.sql.compiler.vendor_impl->getattr(node, 'as_' + self.connection.vendor, None)
A:django.db.models.sql.compiler.compiler.query->compiler.query.clone()
A:django.db.models.sql.compiler.(part_sql, part_args)->compiler.as_sql()
A:django.db.models.sql.compiler.part_sql->'({})'.format(part_sql)
A:django.db.models.sql.compiler.(sql_parts, args_parts)->zip(*((braces.format(sql), args) for (sql, args) in parts))
A:django.db.models.sql.compiler.refcounts_before->self.query.alias_refcount.copy()
A:django.db.models.sql.compiler.(extra_select, order_by, group_by)->self.pre_sql_setup()
A:django.db.models.sql.compiler.(result, params)->self.get_combinator_sql(combinator, self.query.combinator_all)
A:django.db.models.sql.compiler.(distinct_fields, distinct_params)->self.get_distinct()
A:django.db.models.sql.compiler.(from_, f_params)->self.get_from_clause()
A:django.db.models.sql.compiler.(distinct_result, distinct_params)->self.connection.ops.distinct_sql(distinct_fields, distinct_params)
A:django.db.models.sql.compiler.for_update_part->self.connection.ops.for_update_sql(nowait=nowait, skip_locked=skip_locked, of=self.get_select_for_update_of_arguments(), no_key=no_key)
A:django.db.models.sql.compiler.select_clone->select.relabeled_clone({select.alias: 'subquery'})
A:django.db.models.sql.compiler.(subselect, subparams)->select.relabeled_clone({select.alias: 'subquery'}).as_sql(self, self.connection)
A:django.db.models.sql.compiler.opts->self.query.get_meta()
A:django.db.models.sql.compiler.only_load->self.query.get_loaded_field_names()
A:django.db.models.sql.compiler.alias->self.query.join_parent_model(opts, model, start_alias, seen_models)
A:django.db.models.sql.compiler.column->field.copy().copy().get_col(alias)
A:django.db.models.sql.compiler.parts->name.split(LOOKUP_SEP)
A:django.db.models.sql.compiler.(_, targets, alias, joins, path, _, transform_function)->self._setup_joins(parts, opts, None)
A:django.db.models.sql.compiler.(targets, alias, _)->self.query.trim_joins(targets, joins, path)
A:django.db.models.sql.compiler.(r, p)->self.compile(transform_function(target, alias))
A:django.db.models.sql.compiler.(name, order)->get_order_dir(name, default_order)
A:django.db.models.sql.compiler.pieces->name.split(LOOKUP_SEP)
A:django.db.models.sql.compiler.(field, targets, alias, joins, path, opts, transform_function)->self._setup_joins(pieces, opts, alias)
A:django.db.models.sql.compiler.join_tuple->tuple((getattr(self.query.alias_map[j], 'join_cols', None) for j in joins))
A:django.db.models.sql.compiler.(field, targets, opts, joins, path, transform_function)->self.query.setup_joins(pieces, opts, alias)
A:django.db.models.sql.compiler.(clause_sql, clause_params)->self.compile(from_clause)
A:django.db.models.sql.compiler.(alias, _)->self.query.table_alias(t)
A:django.db.models.sql.compiler.root_alias->self.query.get_initial_alias()
A:django.db.models.sql.compiler.fields_found->set()
A:django.db.models.sql.compiler.restricted->isinstance(self.query.select_related, dict)
A:django.db.models.sql.compiler.next->requested.get(f.related_query_name(), {})
A:django.db.models.sql.compiler.(_, _, _, joins, _, _)->self.query.setup_joins([f.name], opts, root_alias)
A:django.db.models.sql.compiler.columns->self.get_default_columns(start_alias=alias, opts=model._meta, from_parent=opts.model)
A:django.db.models.sql.compiler.next_klass_infos->self.get_related_selections(select, opts=model._meta, root_alias=alias, cur_depth=cur_depth + 1, requested=next_requested, restricted=restricted)
A:django.db.models.sql.compiler.related_field_name->f.related_query_name()
A:django.db.models.sql.compiler.join_info->self.query.setup_joins([related_field_name], opts, root_alias)
A:django.db.models.sql.compiler.(f, _, join_opts, joins, _, _)->self.query.setup_joins([name], opts, root_alias)
A:django.db.models.sql.compiler.next_requested->requested.get(name, {})
A:django.db.models.sql.compiler.fields_not_found->set(requested).difference(fields_found)
A:django.db.models.sql.compiler.parent_list->parent_model._meta.get_parent_list()
A:django.db.models.sql.compiler.queue->collections.deque([(None, self.klass_info)])
A:django.db.models.sql.compiler.(parent_path, klass_info)->collections.deque([(None, self.klass_info)]).popleft()
A:django.db.models.sql.compiler.col->_get_first_selected_col_from_model(klass_info)
A:django.db.models.sql.compiler.backend_converters->self.connection.ops.get_db_converters(expression)
A:django.db.models.sql.compiler.field_converters->expression.get_db_converters(self.connection)
A:django.db.models.sql.compiler.converters->self.get_converters(fields)
A:django.db.models.sql.compiler.value->field.copy().copy().get_db_prep_save(value, connection=self.connection)
A:django.db.models.sql.compiler.results->self.execute_sql(MULTI, chunked_fetch=chunked_fetch, chunk_size=chunk_size)
A:django.db.models.sql.compiler.rows->map(tuple, rows)
A:django.db.models.sql.compiler.cursor->super().execute_sql(result_type)
A:django.db.models.sql.compiler.val->field.copy().copy().get_db_prep_save(val, connection=self.connection)
A:django.db.models.sql.compiler.result->list(self.execute_sql())
A:django.db.models.sql.compiler.(lhs_sql, lhs_params)->self.compile(select_col)
A:django.db.models.sql.compiler.returning_params->tuple()
A:django.db.models.sql.compiler.params->tuple(params)
A:django.db.models.sql.compiler.(placeholder_rows, param_rows)->self.assemble_as_sql(fields, value_rows)
A:django.db.models.sql.compiler.insert_statement->self.connection.ops.insert_statement(ignore_conflicts=self.query.ignore_conflicts)
A:django.db.models.sql.compiler.ignore_conflicts_suffix_sql->self.connection.ops.ignore_conflicts_suffix_sql(ignore_conflicts=self.query.ignore_conflicts)
A:django.db.models.sql.compiler.(r_sql, self.returning_params)->self.connection.ops.return_insert_columns(self.returning_fields)
A:django.db.models.sql.compiler.(where, params)->self.compile(self.query.where)
A:django.db.models.sql.compiler.innerq->RawSQL('SELECT * FROM (%s) subquery' % sql, params)
A:django.db.models.sql.compiler.outerq->Query(self.query.model)
A:django.db.models.sql.compiler.outerq.where->self.query.where_class()
A:django.db.models.sql.compiler.placeholder->field.copy().copy().get_placeholder(val, self, self.connection)
A:django.db.models.sql.compiler.aux_rows->self.query.chain(klass=Query).get_compiler(self.using).execute_sql(result_type)
A:django.db.models.sql.compiler.count->self.query.count_active_tables()
A:django.db.models.sql.compiler.query->self.query.chain(klass=Query)
A:django.db.models.sql.compiler.self.query.where->self.query.where_class()
A:django.db.models.sql.compiler.(ann_sql, ann_params)->annotation.select_format(self, ann_sql, ann_params)
A:django.db.models.sql.compiler.sql->', '.join(sql)
A:django.db.models.sql.compiler.(inner_query_sql, inner_query_params)->self.query.inner_query.get_compiler(self.using).as_sql(with_col_aliases=True)
django.db.models.sql.compiler.SQLAggregateCompiler(SQLCompiler)
django.db.models.sql.compiler.SQLAggregateCompiler.as_sql(self)
django.db.models.sql.compiler.SQLCompiler(self,query,connection,using)
django.db.models.sql.compiler.SQLCompiler.__init__(self,query,connection,using)
django.db.models.sql.compiler.SQLCompiler._setup_joins(self,pieces,opts,alias)
django.db.models.sql.compiler.SQLCompiler.apply_converters(self,rows,converters)
django.db.models.sql.compiler.SQLCompiler.as_sql(self,with_limits=True,with_col_aliases=False)
django.db.models.sql.compiler.SQLCompiler.as_subquery_condition(self,alias,columns,compiler)
django.db.models.sql.compiler.SQLCompiler.collapse_group_by(self,expressions,having)
django.db.models.sql.compiler.SQLCompiler.compile(self,node)
django.db.models.sql.compiler.SQLCompiler.deferred_to_columns(self)
django.db.models.sql.compiler.SQLCompiler.execute_sql(self,result_type=MULTI,chunked_fetch=False,chunk_size=GET_ITERATOR_CHUNK_SIZE)
django.db.models.sql.compiler.SQLCompiler.explain_query(self)
django.db.models.sql.compiler.SQLCompiler.find_ordering_name(self,name,opts,alias=None,default_order='ASC',already_seen=None)
django.db.models.sql.compiler.SQLCompiler.get_combinator_sql(self,combinator,all)
django.db.models.sql.compiler.SQLCompiler.get_converters(self,expressions)
django.db.models.sql.compiler.SQLCompiler.get_default_columns(self,start_alias=None,opts=None,from_parent=None)
django.db.models.sql.compiler.SQLCompiler.get_distinct(self)
django.db.models.sql.compiler.SQLCompiler.get_extra_select(self,order_by,select)
django.db.models.sql.compiler.SQLCompiler.get_from_clause(self)
django.db.models.sql.compiler.SQLCompiler.get_group_by(self,select,order_by)
django.db.models.sql.compiler.SQLCompiler.get_order_by(self)
django.db.models.sql.compiler.SQLCompiler.get_related_selections(self,select,opts=None,root_alias=None,cur_depth=1,requested=None,restricted=None)
django.db.models.sql.compiler.SQLCompiler.get_select(self)
django.db.models.sql.compiler.SQLCompiler.get_select_for_update_of_arguments(self)
django.db.models.sql.compiler.SQLCompiler.has_results(self)
django.db.models.sql.compiler.SQLCompiler.pre_sql_setup(self)
django.db.models.sql.compiler.SQLCompiler.quote_name_unless_alias(self,name)
django.db.models.sql.compiler.SQLCompiler.results_iter(self,results=None,tuple_expected=False,chunked_fetch=False,chunk_size=GET_ITERATOR_CHUNK_SIZE)
django.db.models.sql.compiler.SQLCompiler.setup_query(self)
django.db.models.sql.compiler.SQLDeleteCompiler(SQLCompiler)
django.db.models.sql.compiler.SQLDeleteCompiler._as_sql(self,query)
django.db.models.sql.compiler.SQLDeleteCompiler._expr_refs_base_model(cls,expr,base_model)
django.db.models.sql.compiler.SQLDeleteCompiler.as_sql(self)
django.db.models.sql.compiler.SQLDeleteCompiler.contains_self_reference_subquery(self)
django.db.models.sql.compiler.SQLDeleteCompiler.single_alias(self)
django.db.models.sql.compiler.SQLInsertCompiler(SQLCompiler)
django.db.models.sql.compiler.SQLInsertCompiler.as_sql(self)
django.db.models.sql.compiler.SQLInsertCompiler.assemble_as_sql(self,fields,value_rows)
django.db.models.sql.compiler.SQLInsertCompiler.execute_sql(self,returning_fields=None)
django.db.models.sql.compiler.SQLInsertCompiler.field_as_sql(self,field,val)
django.db.models.sql.compiler.SQLInsertCompiler.pre_save_val(self,field,obj)
django.db.models.sql.compiler.SQLInsertCompiler.prepare_value(self,field,value)
django.db.models.sql.compiler.SQLUpdateCompiler(SQLCompiler)
django.db.models.sql.compiler.SQLUpdateCompiler.as_sql(self)
django.db.models.sql.compiler.SQLUpdateCompiler.execute_sql(self,result_type)
django.db.models.sql.compiler.SQLUpdateCompiler.pre_sql_setup(self)
django.db.models.sql.compiler.cursor_iter(cursor,sentinel,col_count,itersize)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/datastructures.py----------------------------------------
A:django.db.models.sql.datastructures.self.join_cols->join_field.get_joining_columns()
A:django.db.models.sql.datastructures.extra_cond->self.join_field.get_extra_restriction(compiler.query.where_class, self.table_alias, self.parent_alias)
A:django.db.models.sql.datastructures.(extra_sql, extra_params)->compiler.compile(self.filtered_relation)
A:django.db.models.sql.datastructures.declared_field->getattr(self.join_field, 'field', self.join_field)
A:django.db.models.sql.datastructures.on_clause_sql->' AND '.join(join_conditions)
A:django.db.models.sql.datastructures.new_parent_alias->change_map.get(self.parent_alias, self.parent_alias)
A:django.db.models.sql.datastructures.new_table_alias->change_map.get(self.table_alias, self.table_alias)
A:django.db.models.sql.datastructures.filtered_relation->self.filtered_relation.clone()
A:django.db.models.sql.datastructures.new->self.relabeled_clone({})
A:django.db.models.sql.datastructures.base_sql->compiler.quote_name_unless_alias(self.table_name)
django.db.models.sql.datastructures.BaseTable(self,table_name,alias)
django.db.models.sql.datastructures.BaseTable.__eq__(self,other)
django.db.models.sql.datastructures.BaseTable.__hash__(self)
django.db.models.sql.datastructures.BaseTable.__init__(self,table_name,alias)
django.db.models.sql.datastructures.BaseTable.as_sql(self,compiler,connection)
django.db.models.sql.datastructures.BaseTable.equals(self,other,with_filtered_relation)
django.db.models.sql.datastructures.BaseTable.identity(self)
django.db.models.sql.datastructures.BaseTable.relabeled_clone(self,change_map)
django.db.models.sql.datastructures.Empty
django.db.models.sql.datastructures.Join(self,table_name,parent_alias,table_alias,join_type,join_field,nullable,filtered_relation=None)
django.db.models.sql.datastructures.Join.__eq__(self,other)
django.db.models.sql.datastructures.Join.__hash__(self)
django.db.models.sql.datastructures.Join.__init__(self,table_name,parent_alias,table_alias,join_type,join_field,nullable,filtered_relation=None)
django.db.models.sql.datastructures.Join.as_sql(self,compiler,connection)
django.db.models.sql.datastructures.Join.demote(self)
django.db.models.sql.datastructures.Join.equals(self,other,with_filtered_relation)
django.db.models.sql.datastructures.Join.identity(self)
django.db.models.sql.datastructures.Join.promote(self)
django.db.models.sql.datastructures.Join.relabeled_clone(self,change_map)
django.db.models.sql.datastructures.MultiJoin(self,names_pos,path_with_names)
django.db.models.sql.datastructures.MultiJoin.__init__(self,names_pos,path_with_names)


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/db/models/sql/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/http/multipartparser.py----------------------------------------
A:django.http.multipartparser.content_type->content_type.strip().strip()
A:django.http.multipartparser.(ctypes, opts)->parse_header(content_type.encode('ascii'))
A:django.http.multipartparser.boundary->self._find_boundary(chunk)
A:django.http.multipartparser.content_length->int(meta_data.get('content-length')[0])
A:django.http.multipartparser.self._chunk_size->min([2 ** 31 - 4] + possible_sizes)
A:django.http.multipartparser.result->handler.handle_raw_input(self._input_data, self._meta, self._content_length, self._boundary, encoding)
A:django.http.multipartparser.self._post->QueryDict(mutable=True)
A:django.http.multipartparser.self._files->MultiValueDict()
A:django.http.multipartparser.stream->LazyStream(ChunkIter(self._input_data, self._chunk_size))
A:django.http.multipartparser.field_name->force_str(field_name, encoding, errors='replace')
A:django.http.multipartparser.transfer_encoding->transfer_encoding[0].strip()
A:django.http.multipartparser.raw_data->field_stream.read(size=read_size)
A:django.http.multipartparser.data->self.flo.read(self.chunk_size)
A:django.http.multipartparser.file_name->html.unescape(file_name)
A:django.http.multipartparser.(content_type, content_type_extra)->meta_data.get('content-type', ('', {}))
A:django.http.multipartparser.charset->content_type_extra.get('charset')
A:django.http.multipartparser.stripped_chunk->b''.join(chunk.split())
A:django.http.multipartparser.over_chunk->field_stream.read(4 - remaining)
A:django.http.multipartparser.chunk->LazyStream(ChunkIter(self._input_data, self._chunk_size)).read(max_header_size)
A:django.http.multipartparser.chunk_length->len(chunk)
A:django.http.multipartparser.file_obj->handler.file_complete(counters[i])
A:django.http.multipartparser.output->next(self._producer)
A:django.http.multipartparser.number_equal->len([current_number for current_number in self._unget_history if current_number == num_bytes])
A:django.http.multipartparser.unused_char->self._stream.read(1)
A:django.http.multipartparser.index->self.flo.read(self.chunk_size).find(self._boundary)
A:django.http.multipartparser.last->max(0, end - 1)
A:django.http.multipartparser.iterator->ChunkIter(stream_or_iterable, 16384)
A:django.http.multipartparser.header_end->LazyStream(ChunkIter(self._input_data, self._chunk_size)).read(max_header_size).find(b'\r\n\r\n')
A:django.http.multipartparser.(main_value_pair, params)->parse_header(line)
A:django.http.multipartparser.(name, value)->main_value_pair.split(':', 1)
A:django.http.multipartparser.(name, (value, params))->_parse_header(line)
A:django.http.multipartparser.boundarystream->InterBoundaryIter(self._stream, self._separator)
A:django.http.multipartparser.plist->_parse_header_params(b';' + line)
A:django.http.multipartparser.key->_parse_header_params(b';' + line).pop(0).lower().decode('ascii')
A:django.http.multipartparser.i->p.find(b'=')
A:django.http.multipartparser.name->p[:i].strip().lower().decode('ascii')
A:django.http.multipartparser.value->unquote(value.decode(), encoding=encoding.decode())
A:django.http.multipartparser.(encoding, lang, value)->unquote(value.decode(), encoding=encoding.decode()).split(b"'")
A:django.http.multipartparser.end->len(s)
django.http.multipartparser.BoundaryIter(self,stream,boundary)
django.http.multipartparser.BoundaryIter.__init__(self,stream,boundary)
django.http.multipartparser.BoundaryIter.__iter__(self)
django.http.multipartparser.BoundaryIter.__next__(self)
django.http.multipartparser.BoundaryIter._find_boundary(self,data)
django.http.multipartparser.ChunkIter(self,flo,chunk_size=64*1024)
django.http.multipartparser.ChunkIter.__init__(self,flo,chunk_size=64*1024)
django.http.multipartparser.ChunkIter.__iter__(self)
django.http.multipartparser.ChunkIter.__next__(self)
django.http.multipartparser.InputStreamExhausted(Exception)
django.http.multipartparser.InterBoundaryIter(self,stream,boundary)
django.http.multipartparser.InterBoundaryIter.__init__(self,stream,boundary)
django.http.multipartparser.InterBoundaryIter.__iter__(self)
django.http.multipartparser.InterBoundaryIter.__next__(self)
django.http.multipartparser.LazyStream(self,producer,length=None)
django.http.multipartparser.LazyStream.__init__(self,producer,length=None)
django.http.multipartparser.LazyStream.__iter__(self)
django.http.multipartparser.LazyStream.__next__(self)
django.http.multipartparser.LazyStream._update_unget_history(self,num_bytes)
django.http.multipartparser.LazyStream.close(self)
django.http.multipartparser.LazyStream.read(self,size=None)
django.http.multipartparser.LazyStream.tell(self)
django.http.multipartparser.LazyStream.unget(self,bytes)
django.http.multipartparser.MultiPartParser(self,META,input_data,upload_handlers,encoding=None)
django.http.multipartparser.MultiPartParser.__init__(self,META,input_data,upload_handlers,encoding=None)
django.http.multipartparser.MultiPartParser._close_files(self)
django.http.multipartparser.MultiPartParser.handle_file_complete(self,old_field_name,counters)
django.http.multipartparser.MultiPartParser.parse(self)
django.http.multipartparser.MultiPartParser.sanitize_file_name(self,file_name)
django.http.multipartparser.MultiPartParserError(Exception)
django.http.multipartparser.Parser(self,stream,boundary)
django.http.multipartparser.Parser.__init__(self,stream,boundary)
django.http.multipartparser.Parser.__iter__(self)
django.http.multipartparser._parse_header_params(s)
django.http.multipartparser.exhaust(stream_or_iterable)
django.http.multipartparser.parse_boundary_stream(stream,max_header_size)
django.http.multipartparser.parse_header(line)


----------------------------------------/home/zhang/Packages/django/django3.2.1/http/cookie.py----------------------------------------
A:django.http.cookie.(key, val)->chunk.split('=', 1)
A:django.http.cookie.cookiedict[key]->http.cookies._unquote(val)
django.http.cookie.parse_cookie(cookie)
django.http.parse_cookie(cookie)


----------------------------------------/home/zhang/Packages/django/django3.2.1/http/request.py----------------------------------------
A:django.http.request.RAISE_ERROR->object()
A:django.http.request.host_validation_re->_lazy_re_compile('^([a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])(:\\d+)?$')
A:django.http.request.self.GET->QueryDict(mutable=True)
A:django.http.request.self.POST->QueryDict(mutable=True)
A:django.http.request.self.FILES->MultiValueDict()
A:django.http.request.(self.content_type, self.content_params)->cgi.parse_header(meta.get('CONTENT_TYPE', ''))
A:django.http.request.server_port->self.get_port()
A:django.http.request.host->host.lower().lower()
A:django.http.request.(domain, port)->split_domain_port(host)
A:django.http.request.value->bytes_to_text(value, self.encoding)
A:django.http.request.location->urljoin(self._current_scheme_host + self.path, location)
A:django.http.request.bits->host.lower().lower().rsplit(':', 1)
A:django.http.request.header_value->self.META.get(header)
A:django.http.request.self.upload_handlers->ImmutableList(self.upload_handlers, warning='You cannot alter upload handlers after the upload has been processed.')
A:django.http.request.parser->MultiPartParser(META, post_data, self.upload_handlers, self.encoding)
A:django.http.request.self._body->self.read()
A:django.http.request.self._stream->BytesIO(self._body)
A:django.http.request.self._post->QueryDict()
A:django.http.request.self._files->MultiValueDict()
A:django.http.request.data->BytesIO(self._body)
A:django.http.request.(self._post, self._files)->self.parse_file_upload(self.META, data)
A:django.http.request.name->self.parse_header_name(header)
A:django.http.request.query_string->query_string.decode('iso-8859-1').decode('iso-8859-1')
A:django.http.request.q->cls('', mutable=True, encoding=encoding)
A:django.http.request.key->bytes_to_text(key, self.encoding)
A:django.http.request.result->self.__class__('', mutable=True, encoding=self.encoding)
A:django.http.request.default->bytes_to_text(default, self.encoding)
A:django.http.request.safe->safe.encode(self.encoding).encode(self.encoding)
A:django.http.request.(full_type, self.params)->parse_header(media_type_raw_line.encode('ascii') if media_type_raw_line else b'')
A:django.http.request.(self.main_type, _, self.sub_type)->full_type.partition('/')
A:django.http.request.params_str->''.join(('; %s=%s' % (k, v.decode('ascii')) for (k, v) in self.params.items()))
A:django.http.request.other->MediaType(other)
django.http.HttpRequest(self)
django.http.HttpRequest.__iter__(self)
django.http.HttpRequest.__repr__(self)
django.http.HttpRequest._current_scheme_host(self)
django.http.HttpRequest._get_full_path(self,path,force_append_slash)
django.http.HttpRequest._get_raw_host(self)
django.http.HttpRequest._get_scheme(self)
django.http.HttpRequest._initialize_handlers(self)
django.http.HttpRequest._load_post_and_files(self)
django.http.HttpRequest._mark_post_parse_error(self)
django.http.HttpRequest._set_content_type_params(self,meta)
django.http.HttpRequest.accepted_types(self)
django.http.HttpRequest.accepts(self,media_type)
django.http.HttpRequest.body(self)
django.http.HttpRequest.build_absolute_uri(self,location=None)
django.http.HttpRequest.close(self)
django.http.HttpRequest.encoding(self)
django.http.HttpRequest.encoding(self,val)
django.http.HttpRequest.get_full_path(self,force_append_slash=False)
django.http.HttpRequest.get_full_path_info(self,force_append_slash=False)
django.http.HttpRequest.get_host(self)
django.http.HttpRequest.get_port(self)
django.http.HttpRequest.get_raw_uri(self)
django.http.HttpRequest.get_signed_cookie(self,key,default=RAISE_ERROR,salt='',max_age=None)
django.http.HttpRequest.headers(self)
django.http.HttpRequest.is_ajax(self)
django.http.HttpRequest.is_secure(self)
django.http.HttpRequest.parse_file_upload(self,META,post_data)
django.http.HttpRequest.read(self,*args,**kwargs)
django.http.HttpRequest.readline(self,*args,**kwargs)
django.http.HttpRequest.readlines(self)
django.http.HttpRequest.scheme(self)
django.http.HttpRequest.upload_handlers(self)
django.http.HttpRequest.upload_handlers(self,upload_handlers)
django.http.QueryDict(self,query_string=None,mutable=False,encoding=None)
django.http.QueryDict.__copy__(self)
django.http.QueryDict.__deepcopy__(self,memo)
django.http.QueryDict.__delitem__(self,key)
django.http.QueryDict.__setitem__(self,key,value)
django.http.QueryDict._assert_mutable(self)
django.http.QueryDict.appendlist(self,key,value)
django.http.QueryDict.clear(self)
django.http.QueryDict.copy(self)
django.http.QueryDict.encoding(self)
django.http.QueryDict.encoding(self,value)
django.http.QueryDict.fromkeys(cls,iterable,value='',mutable=False,encoding=None)
django.http.QueryDict.pop(self,key,*args)
django.http.QueryDict.popitem(self)
django.http.QueryDict.setdefault(self,key,default=None)
django.http.QueryDict.setlist(self,key,list_)
django.http.QueryDict.setlistdefault(self,key,default_list=None)
django.http.QueryDict.urlencode(self,safe=None)
django.http.RawPostDataException(Exception)
django.http.UnreadablePostError(OSError)
django.http.request.HttpHeaders(self,environ)
django.http.request.HttpHeaders.__getitem__(self,key)
django.http.request.HttpHeaders.__init__(self,environ)
django.http.request.HttpHeaders.parse_header_name(cls,header)
django.http.request.HttpRequest(self)
django.http.request.HttpRequest.__init__(self)
django.http.request.HttpRequest.__iter__(self)
django.http.request.HttpRequest.__repr__(self)
django.http.request.HttpRequest._current_scheme_host(self)
django.http.request.HttpRequest._get_full_path(self,path,force_append_slash)
django.http.request.HttpRequest._get_raw_host(self)
django.http.request.HttpRequest._get_scheme(self)
django.http.request.HttpRequest._initialize_handlers(self)
django.http.request.HttpRequest._load_post_and_files(self)
django.http.request.HttpRequest._mark_post_parse_error(self)
django.http.request.HttpRequest._set_content_type_params(self,meta)
django.http.request.HttpRequest.accepted_types(self)
django.http.request.HttpRequest.accepts(self,media_type)
django.http.request.HttpRequest.body(self)
django.http.request.HttpRequest.build_absolute_uri(self,location=None)
django.http.request.HttpRequest.close(self)
django.http.request.HttpRequest.encoding(self)
django.http.request.HttpRequest.encoding(self,val)
django.http.request.HttpRequest.get_full_path(self,force_append_slash=False)
django.http.request.HttpRequest.get_full_path_info(self,force_append_slash=False)
django.http.request.HttpRequest.get_host(self)
django.http.request.HttpRequest.get_port(self)
django.http.request.HttpRequest.get_raw_uri(self)
django.http.request.HttpRequest.get_signed_cookie(self,key,default=RAISE_ERROR,salt='',max_age=None)
django.http.request.HttpRequest.headers(self)
django.http.request.HttpRequest.is_ajax(self)
django.http.request.HttpRequest.is_secure(self)
django.http.request.HttpRequest.parse_file_upload(self,META,post_data)
django.http.request.HttpRequest.read(self,*args,**kwargs)
django.http.request.HttpRequest.readline(self,*args,**kwargs)
django.http.request.HttpRequest.readlines(self)
django.http.request.HttpRequest.scheme(self)
django.http.request.HttpRequest.upload_handlers(self)
django.http.request.HttpRequest.upload_handlers(self,upload_handlers)
django.http.request.MediaType(self,media_type_raw_line)
django.http.request.MediaType.__init__(self,media_type_raw_line)
django.http.request.MediaType.__repr__(self)
django.http.request.MediaType.__str__(self)
django.http.request.MediaType.is_all_types(self)
django.http.request.MediaType.match(self,other)
django.http.request.QueryDict(self,query_string=None,mutable=False,encoding=None)
django.http.request.QueryDict.__copy__(self)
django.http.request.QueryDict.__deepcopy__(self,memo)
django.http.request.QueryDict.__delitem__(self,key)
django.http.request.QueryDict.__init__(self,query_string=None,mutable=False,encoding=None)
django.http.request.QueryDict.__setitem__(self,key,value)
django.http.request.QueryDict._assert_mutable(self)
django.http.request.QueryDict.appendlist(self,key,value)
django.http.request.QueryDict.clear(self)
django.http.request.QueryDict.copy(self)
django.http.request.QueryDict.encoding(self)
django.http.request.QueryDict.encoding(self,value)
django.http.request.QueryDict.fromkeys(cls,iterable,value='',mutable=False,encoding=None)
django.http.request.QueryDict.pop(self,key,*args)
django.http.request.QueryDict.popitem(self)
django.http.request.QueryDict.setdefault(self,key,default=None)
django.http.request.QueryDict.setlist(self,key,list_)
django.http.request.QueryDict.setlistdefault(self,key,default_list=None)
django.http.request.QueryDict.urlencode(self,safe=None)
django.http.request.RawPostDataException(Exception)
django.http.request.UnreadablePostError(OSError)
django.http.request.bytes_to_text(s,encoding)
django.http.request.parse_accept_header(header)
django.http.request.split_domain_port(host)
django.http.request.validate_host(host,allowed_hosts)


----------------------------------------/home/zhang/Packages/django/django3.2.1/http/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/http/response.py----------------------------------------
A:django.http.response._charset_from_content_type_re->_lazy_re_compile(';\\s*charset=(?P<charset>[^\\s;]+)', re.I)
A:django.http.response.value->iter(lambda : filelike.read(self.block_size), b'')
A:django.http.response.key->self._convert_to_charset(key, 'ascii')
A:django.http.response.self.headers->ResponseHeaders(headers or {})
A:django.http.response.self.cookies->SimpleCookie()
A:django.http.response.self.status_code->int(status)
A:django.http.response.content_type->encoding_map.get(encoding, content_type)
A:django.http.response.matched->_lazy_re_compile(';\\s*charset=(?P<charset>[^\\s;]+)', re.I).search(content_type)
A:django.http.response.expires->django.utils.timezone.make_naive(expires, timezone.utc)
A:django.http.response.max_age->max(0, delta.days * 86400 + delta.seconds)
A:django.http.response.self.cookies[key]['max-age']->int(max_age)
A:django.http.response.self.cookies[key]['expires']->http_date(time.time() + max_age)
A:django.http.response.content->self.make_bytes(value)
A:django.http.response.self._iterator->iter(value)
A:django.http.response.filename->getattr(filelike, 'name', None)
A:django.http.response.self.headers['Content-Length']->os.path.getsize(filelike.name)
A:django.http.response.(content_type, encoding)->mimetypes.guess_type(filename)
A:django.http.response.file_expr->"filename*=utf-8''{}".format(quote(filename))
A:django.http.response.self.headers['Content-Disposition']->'{}; {}'.format(disposition, file_expr)
A:django.http.response.self['Location']->iri_to_uri(redirect_to)
A:django.http.response.parsed->urlparse(str(redirect_to))
A:django.http.response.url->property(lambda self: self['Location'])
A:django.http.response.self['Allow']->', '.join(permitted_methods)
A:django.http.response.data->json.dumps(data, cls=encoder, **json_dumps_params)
django.http.BadHeaderError(ValueError)
django.http.FileResponse(self,*args,as_attachment=False,filename='',**kwargs)
django.http.FileResponse._set_streaming_content(self,value)
django.http.FileResponse.set_headers(self,filelike)
django.http.Http404(Exception)
django.http.HttpResponse(self,content=b'',*args,**kwargs)
django.http.HttpResponse.__iter__(self)
django.http.HttpResponse.__repr__(self)
django.http.HttpResponse.content(self)
django.http.HttpResponse.content(self,value)
django.http.HttpResponse.getvalue(self)
django.http.HttpResponse.serialize(self)
django.http.HttpResponse.tell(self)
django.http.HttpResponse.writable(self)
django.http.HttpResponse.write(self,content)
django.http.HttpResponse.writelines(self,lines)
django.http.HttpResponseBadRequest(HttpResponse)
django.http.HttpResponseBase(self,content_type=None,status=None,reason=None,charset=None,headers=None)
django.http.HttpResponseBase.__delitem__(self,header)
django.http.HttpResponseBase.__getitem__(self,header)
django.http.HttpResponseBase.__setitem__(self,header,value)
django.http.HttpResponseBase._content_type_for_repr(self)
django.http.HttpResponseBase.charset(self)
django.http.HttpResponseBase.charset(self,value)
django.http.HttpResponseBase.close(self)
django.http.HttpResponseBase.delete_cookie(self,key,path='/',domain=None,samesite=None)
django.http.HttpResponseBase.flush(self)
django.http.HttpResponseBase.get(self,header,alternate=None)
django.http.HttpResponseBase.has_header(self,header)
django.http.HttpResponseBase.items(self)
django.http.HttpResponseBase.make_bytes(self,value)
django.http.HttpResponseBase.readable(self)
django.http.HttpResponseBase.reason_phrase(self)
django.http.HttpResponseBase.reason_phrase(self,value)
django.http.HttpResponseBase.seekable(self)
django.http.HttpResponseBase.serialize_headers(self)
django.http.HttpResponseBase.set_cookie(self,key,value='',max_age=None,expires=None,path='/',domain=None,secure=False,httponly=False,samesite=None)
django.http.HttpResponseBase.set_signed_cookie(self,key,value,salt='',**kwargs)
django.http.HttpResponseBase.setdefault(self,key,value)
django.http.HttpResponseBase.tell(self)
django.http.HttpResponseBase.writable(self)
django.http.HttpResponseBase.write(self,content)
django.http.HttpResponseBase.writelines(self,lines)
django.http.HttpResponseForbidden(HttpResponse)
django.http.HttpResponseGone(HttpResponse)
django.http.HttpResponseNotAllowed(self,permitted_methods,*args,**kwargs)
django.http.HttpResponseNotAllowed.__repr__(self)
django.http.HttpResponseNotFound(HttpResponse)
django.http.HttpResponseNotModified(self,*args,**kwargs)
django.http.HttpResponseNotModified.content(self,value)
django.http.HttpResponsePermanentRedirect(HttpResponseRedirectBase)
django.http.HttpResponseRedirect(HttpResponseRedirectBase)
django.http.HttpResponseRedirectBase(self,redirect_to,*args,**kwargs)
django.http.HttpResponseRedirectBase.__repr__(self)
django.http.HttpResponseServerError(HttpResponse)
django.http.JsonResponse(self,data,encoder=DjangoJSONEncoder,safe=True,json_dumps_params=None,**kwargs)
django.http.StreamingHttpResponse(self,streaming_content=(),*args,**kwargs)
django.http.StreamingHttpResponse.__iter__(self)
django.http.StreamingHttpResponse._set_streaming_content(self,value)
django.http.StreamingHttpResponse.content(self)
django.http.StreamingHttpResponse.getvalue(self)
django.http.StreamingHttpResponse.streaming_content(self)
django.http.StreamingHttpResponse.streaming_content(self,value)
django.http.response.BadHeaderError(ValueError)
django.http.response.FileResponse(self,*args,as_attachment=False,filename='',**kwargs)
django.http.response.FileResponse.__init__(self,*args,as_attachment=False,filename='',**kwargs)
django.http.response.FileResponse._set_streaming_content(self,value)
django.http.response.FileResponse.set_headers(self,filelike)
django.http.response.Http404(Exception)
django.http.response.HttpResponse(self,content=b'',*args,**kwargs)
django.http.response.HttpResponse.__init__(self,content=b'',*args,**kwargs)
django.http.response.HttpResponse.__iter__(self)
django.http.response.HttpResponse.__repr__(self)
django.http.response.HttpResponse.content(self)
django.http.response.HttpResponse.content(self,value)
django.http.response.HttpResponse.getvalue(self)
django.http.response.HttpResponse.serialize(self)
django.http.response.HttpResponse.tell(self)
django.http.response.HttpResponse.writable(self)
django.http.response.HttpResponse.write(self,content)
django.http.response.HttpResponse.writelines(self,lines)
django.http.response.HttpResponseBadRequest(HttpResponse)
django.http.response.HttpResponseBase(self,content_type=None,status=None,reason=None,charset=None,headers=None)
django.http.response.HttpResponseBase.__delitem__(self,header)
django.http.response.HttpResponseBase.__getitem__(self,header)
django.http.response.HttpResponseBase.__init__(self,content_type=None,status=None,reason=None,charset=None,headers=None)
django.http.response.HttpResponseBase.__setitem__(self,header,value)
django.http.response.HttpResponseBase._content_type_for_repr(self)
django.http.response.HttpResponseBase.charset(self)
django.http.response.HttpResponseBase.charset(self,value)
django.http.response.HttpResponseBase.close(self)
django.http.response.HttpResponseBase.delete_cookie(self,key,path='/',domain=None,samesite=None)
django.http.response.HttpResponseBase.flush(self)
django.http.response.HttpResponseBase.get(self,header,alternate=None)
django.http.response.HttpResponseBase.has_header(self,header)
django.http.response.HttpResponseBase.items(self)
django.http.response.HttpResponseBase.make_bytes(self,value)
django.http.response.HttpResponseBase.readable(self)
django.http.response.HttpResponseBase.reason_phrase(self)
django.http.response.HttpResponseBase.reason_phrase(self,value)
django.http.response.HttpResponseBase.seekable(self)
django.http.response.HttpResponseBase.serialize_headers(self)
django.http.response.HttpResponseBase.set_cookie(self,key,value='',max_age=None,expires=None,path='/',domain=None,secure=False,httponly=False,samesite=None)
django.http.response.HttpResponseBase.set_signed_cookie(self,key,value,salt='',**kwargs)
django.http.response.HttpResponseBase.setdefault(self,key,value)
django.http.response.HttpResponseBase.tell(self)
django.http.response.HttpResponseBase.writable(self)
django.http.response.HttpResponseBase.write(self,content)
django.http.response.HttpResponseBase.writelines(self,lines)
django.http.response.HttpResponseForbidden(HttpResponse)
django.http.response.HttpResponseGone(HttpResponse)
django.http.response.HttpResponseNotAllowed(self,permitted_methods,*args,**kwargs)
django.http.response.HttpResponseNotAllowed.__init__(self,permitted_methods,*args,**kwargs)
django.http.response.HttpResponseNotAllowed.__repr__(self)
django.http.response.HttpResponseNotFound(HttpResponse)
django.http.response.HttpResponseNotModified(self,*args,**kwargs)
django.http.response.HttpResponseNotModified.__init__(self,*args,**kwargs)
django.http.response.HttpResponseNotModified.content(self,value)
django.http.response.HttpResponsePermanentRedirect(HttpResponseRedirectBase)
django.http.response.HttpResponseRedirect(HttpResponseRedirectBase)
django.http.response.HttpResponseRedirectBase(self,redirect_to,*args,**kwargs)
django.http.response.HttpResponseRedirectBase.__init__(self,redirect_to,*args,**kwargs)
django.http.response.HttpResponseRedirectBase.__repr__(self)
django.http.response.HttpResponseServerError(HttpResponse)
django.http.response.JsonResponse(self,data,encoder=DjangoJSONEncoder,safe=True,json_dumps_params=None,**kwargs)
django.http.response.JsonResponse.__init__(self,data,encoder=DjangoJSONEncoder,safe=True,json_dumps_params=None,**kwargs)
django.http.response.ResponseHeaders(self,data)
django.http.response.ResponseHeaders.__delitem__(self,key)
django.http.response.ResponseHeaders.__init__(self,data)
django.http.response.ResponseHeaders.__setitem__(self,key,value)
django.http.response.ResponseHeaders._convert_to_charset(self,value,charset,mime_encode=False)
django.http.response.ResponseHeaders.pop(self,key,default=None)
django.http.response.ResponseHeaders.setdefault(self,key,value)
django.http.response.StreamingHttpResponse(self,streaming_content=(),*args,**kwargs)
django.http.response.StreamingHttpResponse.__init__(self,streaming_content=(),*args,**kwargs)
django.http.response.StreamingHttpResponse.__iter__(self)
django.http.response.StreamingHttpResponse._set_streaming_content(self,value)
django.http.response.StreamingHttpResponse.content(self)
django.http.response.StreamingHttpResponse.getvalue(self)
django.http.response.StreamingHttpResponse.streaming_content(self)
django.http.response.StreamingHttpResponse.streaming_content(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/safestring.py----------------------------------------
A:django.utils.safestring.t->super().__add__(rhs)
django.utils.safestring.SafeData
django.utils.safestring.SafeData.__html__(self)
django.utils.safestring.SafeString(str,SafeData)
django.utils.safestring.SafeString.__add__(self,rhs)
django.utils.safestring.SafeString.__str__(self)
django.utils.safestring._safety_decorator(safety_marker,func)
django.utils.safestring.mark_safe(s)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/deprecation.py----------------------------------------
A:django.utils.deprecation.new_class->super().__new__(cls, name, bases, attrs)
A:django.utils.deprecation.old_method->base.__dict__.get(old_method_name)
A:django.utils.deprecation.new_method->base.__dict__.get(new_method_name)
A:django.utils.deprecation.wrapper->warn_about_renamed_method(class_name, *renamed_method)
A:django.utils.deprecation.response->self.process_response(request, response)
django.utils.deprecation.DeprecationInstanceCheck(type)
django.utils.deprecation.DeprecationInstanceCheck.__instancecheck__(self,instance)
django.utils.deprecation.MiddlewareMixin(self,get_response=None)
django.utils.deprecation.MiddlewareMixin.__init__(self,get_response=None)
django.utils.deprecation.MiddlewareMixin._async_check(self)
django.utils.deprecation.MiddlewareMixin._get_response_none_deprecation(self,get_response)
django.utils.deprecation.RemovedInDjango40Warning(DeprecationWarning)
django.utils.deprecation.RemovedInDjango41Warning(PendingDeprecationWarning)
django.utils.deprecation.RenameMethodsBase(cls,name,bases,attrs)
django.utils.deprecation.RenameMethodsBase.__new__(cls,name,bases,attrs)
django.utils.deprecation.warn_about_renamed_method(self,class_name,old_method_name,new_method_name,deprecation_warning)
django.utils.deprecation.warn_about_renamed_method.__init__(self,class_name,old_method_name,new_method_name,deprecation_warning)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/module_loading.py----------------------------------------
A:django.utils.module_loading.(module_path, class_name)->dotted_path.rsplit('.', 1)
A:django.utils.module_loading.module->import_module(module_path)
A:django.utils.module_loading.register_to->kwargs.get('register_to')
A:django.utils.module_loading.before_import_registry->copy.copy(register_to._registry)
A:django.utils.module_loading.paths->list(getattr(module, '__path__', []))
A:django.utils.module_loading.filename->getattr(module, '__file__', None)
django.utils.module_loading.autodiscover_modules(*args,**kwargs)
django.utils.module_loading.import_string(dotted_path)
django.utils.module_loading.module_dir(module)
django.utils.module_loading.module_has_submodule(package,module_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/inspect.py----------------------------------------
A:django.utils.inspect.parameters->tuple(inspect.signature(func).parameters.values())
A:django.utils.inspect.is_method->inspect.ismethod(meth_or_func)
A:django.utils.inspect.params->_get_callable_parameters(func)
A:django.utils.inspect.count->len([p for p in _get_callable_parameters(meth) if p.kind == p.POSITIONAL_OR_KEYWORD])
django.utils.inspect._get_callable_parameters(meth_or_func)
django.utils.inspect._get_func_parameters(func,remove_first)
django.utils.inspect.func_accepts_kwargs(func)
django.utils.inspect.func_accepts_var_args(func)
django.utils.inspect.func_supports_parameter(func,name)
django.utils.inspect.get_func_args(func)
django.utils.inspect.get_func_full_args(func)
django.utils.inspect.method_has_no_args(meth)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/timesince.py----------------------------------------
A:django.utils.timesince.d->datetime.datetime(d.year, d.month, d.day)
A:django.utils.timesince.now->datetime.datetime(now.year, now.month, now.day)
A:django.utils.timesince.leapdays->calendar.leapdays(d.year, now.year)
django.utils.timesince.timesince(d,now=None,reversed=False,time_strings=None,depth=2)
django.utils.timesince.timeuntil(d,now=None,time_strings=None,depth=2)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/archive.py----------------------------------------
A:django.utils.archive.self._archive->zipfile.ZipFile(file)
A:django.utils.archive.(base, tail_ext)->os.path.splitext(filename.lower())
A:django.utils.archive.cls->dict.fromkeys(('.tar', '.tar.bz2', '.tbz2', '.tbz', '.tz2', '.tar.gz', '.tgz', '.taz', '.tar.lzma', '.tlz', '.tar.xz', '.txz'), TarArchive).get(ext)
A:django.utils.archive.(base, ext)->os.path.splitext(base)
A:django.utils.archive.path->path.lstrip('/').lstrip('\\').lstrip('/').lstrip('\\')
A:django.utils.archive.(prefix, rest)->self.split_leading_dir(path)
A:django.utils.archive.target_path->os.path.abspath(to_path)
A:django.utils.archive.filename->self.target_filename(to_path, name)
A:django.utils.archive.members->self._archive.getmembers()
A:django.utils.archive.leading->self.has_leading_dir(namelist)
A:django.utils.archive.extracted->self._archive.extractfile(member)
A:django.utils.archive.dirname->os.path.dirname(filename)
A:django.utils.archive.namelist->self._archive.namelist()
A:django.utils.archive.data->self._archive.read(name)
A:django.utils.archive.info->self._archive.getinfo(name)
A:django.utils.archive.extension_map->dict.fromkeys(('.tar', '.tar.bz2', '.tbz2', '.tbz', '.tz2', '.tar.gz', '.tgz', '.taz', '.tar.lzma', '.tlz', '.tar.xz', '.txz'), TarArchive)
django.utils.archive.Archive(self,file)
django.utils.archive.Archive.__enter__(self)
django.utils.archive.Archive.__exit__(self,exc_type,exc_value,traceback)
django.utils.archive.Archive.__init__(self,file)
django.utils.archive.Archive._archive_cls(file)
django.utils.archive.Archive.close(self)
django.utils.archive.Archive.extract(self,to_path)
django.utils.archive.Archive.list(self)
django.utils.archive.ArchiveException(Exception)
django.utils.archive.BaseArchive
django.utils.archive.BaseArchive._copy_permissions(mode,filename)
django.utils.archive.BaseArchive.extract(self)
django.utils.archive.BaseArchive.has_leading_dir(self,paths)
django.utils.archive.BaseArchive.list(self)
django.utils.archive.BaseArchive.split_leading_dir(self,path)
django.utils.archive.BaseArchive.target_filename(self,to_path,name)
django.utils.archive.TarArchive(self,file)
django.utils.archive.TarArchive.__init__(self,file)
django.utils.archive.TarArchive.close(self)
django.utils.archive.TarArchive.extract(self,to_path)
django.utils.archive.TarArchive.list(self,*args,**kwargs)
django.utils.archive.UnrecognizedArchiveFormat(ArchiveException)
django.utils.archive.ZipArchive(self,file)
django.utils.archive.ZipArchive.__init__(self,file)
django.utils.archive.ZipArchive.close(self)
django.utils.archive.ZipArchive.extract(self,to_path)
django.utils.archive.ZipArchive.list(self,*args,**kwargs)
django.utils.archive.extract(path,to_path)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/datetime_safe.py----------------------------------------
A:django.utils.datetime_safe._illegal_formatting->_lazy_re_compile('((^|[^%])(%%)*%[sy])')
A:django.utils.datetime_safe.i->text.find(substr, i)
A:django.utils.datetime_safe.illegal_formatting->_lazy_re_compile('((^|[^%])(%%)*%[sy])').search(fmt)
A:django.utils.datetime_safe.timetuple->dt.timetuple()
A:django.utils.datetime_safe.s1->time.strftime(fmt, (year,) + timetuple[1:])
A:django.utils.datetime_safe.sites1->_findall(s1, str(year))
A:django.utils.datetime_safe.s2->time.strftime(fmt, (year + 28,) + timetuple[1:])
A:django.utils.datetime_safe.sites2->_findall(s2, str(year + 28))
django.utils.datetime_safe._findall(text,substr)
django.utils.datetime_safe.date(real_date)
django.utils.datetime_safe.date.strftime(self,fmt)
django.utils.datetime_safe.datetime(real_datetime)
django.utils.datetime_safe.datetime.combine(cls,date,time)
django.utils.datetime_safe.datetime.date(self)
django.utils.datetime_safe.datetime.strftime(self,fmt)
django.utils.datetime_safe.new_date(d)
django.utils.datetime_safe.new_datetime(d)
django.utils.datetime_safe.strftime(dt,fmt)
django.utils.datetime_safe.time(real_time)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/itercompat.py----------------------------------------
django.utils.itercompat.is_iterable(x)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/cache.py----------------------------------------
A:django.utils.cache.cc_delim_re->_lazy_re_compile('\\s*,\\s*')
A:django.utils.cache.t->s.split('=', 1)
A:django.utils.cache.cc->dict((_to_tuple(el) for el in cc_delim_re.split(response.headers['Cache-Control'])))
A:django.utils.cache.(directive, value)->dictitem(field)
A:django.utils.cache.kwargs['max_age']->min(int(cc['max-age']), kwargs['max_age'])
A:django.utils.cache.directive->k.replace('_', '-')
A:django.utils.cache.response.headers['ETag']->quote_etag(hashlib.md5(response.content).hexdigest())
A:django.utils.cache.response->HttpResponse(status=412)
A:django.utils.cache.new_response->HttpResponseNotModified()
A:django.utils.cache.if_match_etags->parse_etags(request.META.get('HTTP_IF_MATCH', ''))
A:django.utils.cache.if_unmodified_since->request.META.get('HTTP_IF_UNMODIFIED_SINCE')
A:django.utils.cache.if_none_match_etags->parse_etags(request.META.get('HTTP_IF_NONE_MATCH', ''))
A:django.utils.cache.if_modified_since->request.META.get('HTTP_IF_MODIFIED_SINCE')
A:django.utils.cache.target_etag->target_etag.strip('W/').strip('W/')
A:django.utils.cache.response.headers['Expires']->http_date(time.time() + cache_timeout)
A:django.utils.cache.vary_headers->_lazy_re_compile('\\s*,\\s*').split(response.headers['Vary'])
A:django.utils.cache.response.headers['Vary']->', '.join(vary_headers)
A:django.utils.cache.ctx->hashlib.md5()
A:django.utils.cache.value->request.META.get(header)
A:django.utils.cache.url->hashlib.md5(request.build_absolute_uri().encode('ascii'))
A:django.utils.cache.cache_key->_generate_cache_header_key(key_prefix, request)
A:django.utils.cache.headerlist->cache.get(cache_key)
A:django.utils.cache.header->header.upper().replace('-', '_').upper().replace('-', '_')
django.utils.cache._generate_cache_header_key(key_prefix,request)
django.utils.cache._generate_cache_key(request,method,headerlist,key_prefix)
django.utils.cache._i18n_cache_key_suffix(request,cache_key)
django.utils.cache._if_match_passes(target_etag,etags)
django.utils.cache._if_modified_since_passes(last_modified,if_modified_since)
django.utils.cache._if_none_match_passes(target_etag,etags)
django.utils.cache._if_unmodified_since_passes(last_modified,if_unmodified_since)
django.utils.cache._not_modified(request,response=None)
django.utils.cache._precondition_failed(request)
django.utils.cache._to_tuple(s)
django.utils.cache.add_never_cache_headers(response)
django.utils.cache.get_cache_key(request,key_prefix=None,method='GET',cache=None)
django.utils.cache.get_conditional_response(request,etag=None,last_modified=None,response=None)
django.utils.cache.get_max_age(response)
django.utils.cache.has_vary_header(response,header_query)
django.utils.cache.learn_cache_key(request,response,cache_timeout=None,key_prefix=None,cache=None)
django.utils.cache.patch_cache_control(response,**kwargs)
django.utils.cache.patch_response_headers(response,cache_timeout=None)
django.utils.cache.patch_vary_headers(response,newheaders)
django.utils.cache.set_response_etag(response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/jslex.py----------------------------------------
A:django.utils.jslex.self.regexes[state]->re.compile('|'.join(parts), re.MULTILINE | re.VERBOSE)
A:django.utils.jslex.end->len(text)
A:django.utils.jslex.lexer->JsLexer()
A:django.utils.jslex.guts->re.sub('\\\\.|.', escape_quotes, tok[1:-1])
A:django.utils.jslex.tok->tok.replace('\\', 'U').replace('\\', 'U')
django.utils.jslex.JsLexer(self)
django.utils.jslex.JsLexer.__init__(self)
django.utils.jslex.Lexer(self,states,first)
django.utils.jslex.Lexer.__init__(self,states,first)
django.utils.jslex.Lexer.lex(self,text)
django.utils.jslex.Tok(self,name,regex,next=None)
django.utils.jslex.Tok.__init__(self,name,regex,next=None)
django.utils.jslex.literals(choices,prefix='',suffix='')
django.utils.jslex.prepare_js_for_gettext(js)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/text.py----------------------------------------
A:django.utils.text.re_words->_lazy_re_compile('<[^>]+?>|([^<>\\s]+)', re.S)
A:django.utils.text.re_chars->_lazy_re_compile('<[^>]+?>|(.)', re.S)
A:django.utils.text.re_tag->_lazy_re_compile('<(/)?(\\S+?)(?:(\\s*/)|\\s.*?)?>', re.S)
A:django.utils.text.re_newlines->_lazy_re_compile('\\r\\n|\\r')
A:django.utils.text.re_camel_case->_lazy_re_compile('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))')
A:django.utils.text.max_width->min(line.endswith('\n') and width + 1 or width, width)
A:django.utils.text.truncate->pgettext('String to return when truncating text', '%(truncated_text)s…')
A:django.utils.text.length->int(num)
A:django.utils.text.text->unicodedata.normalize('NFC', self._wrapped)
A:django.utils.text.words->self._wrapped.split()
A:django.utils.text.m->regex.search(text, pos)
A:django.utils.text.pos->regex.search(text, pos).end(0)
A:django.utils.text.tag->_lazy_re_compile('<(/)?(\\S+?)(?:(\\s*/)|\\s.*?)?>', re.S).match(m[0])
A:django.utils.text.(closing_tag, tagname, self_closing)->_lazy_re_compile('<(/)?(\\S+?)(?:(\\s*/)|\\s.*?)?>', re.S).match(m[0]).groups()
A:django.utils.text.tagname->tagname.lower().lower()
A:django.utils.text.i->open_tags.index(tagname)
A:django.utils.text.truncate_text->self.add_truncation_text('', truncate)
A:django.utils.text.s->re.sub('(?u)[^-\\w.]', '', s)
A:django.utils.text.zbuf->BytesIO()
A:django.utils.text.ret->self.getvalue()
A:django.utils.text.buf->StreamingBuffer()
A:django.utils.text.data->StreamingBuffer().read()
A:django.utils.text.smart_split_re->_lazy_re_compile('\n    ((?:\n        [^\\s\'"]*\n        (?:\n            (?:"(?:[^"\\\\]|\\\\.)*" | \'(?:[^\'\\\\]|\\\\.)*\')\n            [^\\s\'"]*\n        )+\n    ) | \\S+)\n', re.VERBOSE)
A:django.utils.text.c->int(text)
A:django.utils.text._entity_re->_lazy_re_compile('&(#?[xX]?(?:[0-9a-fA-F]+|\\w{1,8}));')
A:django.utils.text.value->re.sub('[^\\w\\s-]', '', value.lower())
A:django.utils.text.format_lazy->lazy(_format_lazy, str)
django.utils.text.StreamingBuffer(BytesIO)
django.utils.text.StreamingBuffer.read(self)
django.utils.text.Truncator(self,text)
django.utils.text.Truncator.__init__(self,text)
django.utils.text.Truncator._text_chars(self,length,truncate,text,truncate_len)
django.utils.text.Truncator._text_words(self,length,truncate)
django.utils.text.Truncator._truncate_html(self,length,truncate,text,truncate_len,words)
django.utils.text.Truncator.add_truncation_text(self,text,truncate=None)
django.utils.text.Truncator.chars(self,num,truncate=None,html=False)
django.utils.text.Truncator.words(self,num,truncate=None,html=False)
django.utils.text._format_lazy(format_string,*args,**kwargs)
django.utils.text._replace_entity(match)
django.utils.text.camel_case_to_spaces(value)
django.utils.text.capfirst(x)
django.utils.text.compress_sequence(sequence)
django.utils.text.compress_string(s)
django.utils.text.get_text_list(list_,last_word=gettext_lazy('or'))
django.utils.text.get_valid_filename(name)
django.utils.text.normalize_newlines(text)
django.utils.text.phone2numeric(phone)
django.utils.text.slugify(value,allow_unicode=False)
django.utils.text.smart_split(text)
django.utils.text.unescape_entities(text)
django.utils.text.unescape_string_literal(s)
django.utils.text.wrap(text,width)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/timezone.py----------------------------------------
A:django.utils.timezone._active->Local()
A:django.utils.timezone._active.value->pytz.timezone(timezone)
A:django.utils.timezone.self.old_timezone->getattr(_active, 'value', None)
A:django.utils.timezone.value->now()
A:django.utils.timezone.timezone->get_current_timezone()
django.utils.timezone._datetime_ambiguous_or_imaginary(dt,tz)
django.utils.timezone._get_timezone_name(timezone)
django.utils.timezone._is_pytz_zone(tz)
django.utils.timezone.activate(timezone)
django.utils.timezone.deactivate()
django.utils.timezone.get_current_timezone()
django.utils.timezone.get_current_timezone_name()
django.utils.timezone.get_default_timezone()
django.utils.timezone.get_default_timezone_name()
django.utils.timezone.get_fixed_timezone(offset)
django.utils.timezone.is_aware(value)
django.utils.timezone.is_naive(value)
django.utils.timezone.localdate(value=None,timezone=None)
django.utils.timezone.localtime(value=None,timezone=None)
django.utils.timezone.make_aware(value,timezone=None,is_dst=None)
django.utils.timezone.make_naive(value,timezone=None)
django.utils.timezone.now()
django.utils.timezone.override(self,timezone)
django.utils.timezone.override.__enter__(self)
django.utils.timezone.override.__exit__(self,exc_type,exc_value,traceback)
django.utils.timezone.override.__init__(self,timezone)
django.utils.timezone.template_localtime(value,use_tz=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/topological_sort.py----------------------------------------
A:django.utils.topological_sort.todo->dependency_graph.copy()
django.utils.topological_sort.CyclicDependencyError(ValueError)
django.utils.topological_sort.stable_topological_sort(nodes,dependency_graph)
django.utils.topological_sort.topological_sort_as_sets(dependency_graph)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/crypto.py----------------------------------------
A:django.utils.crypto.key_salt->force_bytes(key_salt)
A:django.utils.crypto.secret->force_bytes(secret)
A:django.utils.crypto.hasher->getattr(hashlib, algorithm)
A:django.utils.crypto.key->hasher(key_salt + secret).digest()
A:django.utils.crypto.NOT_PROVIDED->object()
A:django.utils.crypto.password->force_bytes(password)
A:django.utils.crypto.salt->force_bytes(salt)
django.utils.crypto.InvalidAlgorithm(ValueError)
django.utils.crypto.constant_time_compare(val1,val2)
django.utils.crypto.get_random_string(length=NOT_PROVIDED,allowed_chars=RANDOM_STRING_CHARS)
django.utils.crypto.pbkdf2(password,salt,iterations,dklen=0,digest=None)
django.utils.crypto.salted_hmac(key_salt,value,secret=None,*,algorithm='sha1')


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/log.py----------------------------------------
A:django.utils.log.request_logger->logging.getLogger('django.request')
A:django.utils.log.logging_config_func->import_string(logging_config)
A:django.utils.log.self.reporter_class->import_string(reporter_class or settings.DEFAULT_EXCEPTION_REPORTER)
A:django.utils.log.subject->self.format_subject(subject)
A:django.utils.log.no_exc_record->copy(record)
A:django.utils.log.reporter->self.reporter_class(request, *exc_info, is_email=True)
A:django.utils.log.self.style->color_style()
A:django.utils.log.status_code->getattr(record, 'status_code', None)
A:django.utils.log.msg->self.style.HTTP_SERVER_ERROR(msg)
A:django.utils.log.record.server_time->self.formatTime(record, self.datefmt)
django.configure_logging(logging_config,logging_settings)
django.utils.log.AdminEmailHandler(self,include_html=False,email_backend=None,reporter_class=None)
django.utils.log.AdminEmailHandler.__init__(self,include_html=False,email_backend=None,reporter_class=None)
django.utils.log.AdminEmailHandler.connection(self)
django.utils.log.AdminEmailHandler.emit(self,record)
django.utils.log.AdminEmailHandler.format_subject(self,subject)
django.utils.log.AdminEmailHandler.send_mail(self,subject,message,*args,**kwargs)
django.utils.log.CallbackFilter(self,callback)
django.utils.log.CallbackFilter.__init__(self,callback)
django.utils.log.CallbackFilter.filter(self,record)
django.utils.log.RequireDebugFalse(logging.Filter)
django.utils.log.RequireDebugFalse.filter(self,record)
django.utils.log.RequireDebugTrue(logging.Filter)
django.utils.log.RequireDebugTrue.filter(self,record)
django.utils.log.ServerFormatter(self,*args,**kwargs)
django.utils.log.ServerFormatter.__init__(self,*args,**kwargs)
django.utils.log.ServerFormatter.format(self,record)
django.utils.log.ServerFormatter.uses_server_time(self)
django.utils.log.configure_logging(logging_config,logging_settings)
django.utils.log.log_response(message,*args,response=None,request=None,logger=request_logger,level=None,exc_info=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/lorem_ipsum.py----------------------------------------
A:django.utils.lorem_ipsum.s->', '.join(sections)
A:django.utils.lorem_ipsum.c->min(count, len(WORDS))
django.utils.lorem_ipsum.paragraph()
django.utils.lorem_ipsum.paragraphs(count,common=True)
django.utils.lorem_ipsum.sentence()
django.utils.lorem_ipsum.words(count,common=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/dateformat.py----------------------------------------
A:django.utils.dateformat.re_formatchars->_lazy_re_compile('(?<!\\\\)([aAbcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])')
A:django.utils.dateformat.re_escaped->_lazy_re_compile('\\\\(.)')
A:django.utils.dateformat.self.timezone->get_default_timezone()
A:django.utils.dateformat.seconds->abs(seconds)
A:django.utils.dateformat.name->self.format('O')
A:django.utils.dateformat.offset->self.timezone.utcoffset(self.data)
A:django.utils.dateformat.dt->make_aware(self.data, timezone=self.timezone)
A:django.utils.dateformat.df->DateFormat(value)
A:django.utils.dateformat.tf->TimeFormat(value)
django.utils.dateformat.DateFormat(TimeFormat)
django.utils.dateformat.DateFormat.D(self)
django.utils.dateformat.DateFormat.E(self)
django.utils.dateformat.DateFormat.F(self)
django.utils.dateformat.DateFormat.I(self)
django.utils.dateformat.DateFormat.L(self)
django.utils.dateformat.DateFormat.M(self)
django.utils.dateformat.DateFormat.N(self)
django.utils.dateformat.DateFormat.S(self)
django.utils.dateformat.DateFormat.U(self)
django.utils.dateformat.DateFormat.W(self)
django.utils.dateformat.DateFormat.Y(self)
django.utils.dateformat.DateFormat.b(self)
django.utils.dateformat.DateFormat.c(self)
django.utils.dateformat.DateFormat.d(self)
django.utils.dateformat.DateFormat.j(self)
django.utils.dateformat.DateFormat.l(self)
django.utils.dateformat.DateFormat.m(self)
django.utils.dateformat.DateFormat.n(self)
django.utils.dateformat.DateFormat.o(self)
django.utils.dateformat.DateFormat.r(self)
django.utils.dateformat.DateFormat.t(self)
django.utils.dateformat.DateFormat.w(self)
django.utils.dateformat.DateFormat.y(self)
django.utils.dateformat.DateFormat.z(self)
django.utils.dateformat.Formatter
django.utils.dateformat.Formatter.format(self,formatstr)
django.utils.dateformat.TimeFormat(self,obj)
django.utils.dateformat.TimeFormat.A(self)
django.utils.dateformat.TimeFormat.G(self)
django.utils.dateformat.TimeFormat.H(self)
django.utils.dateformat.TimeFormat.O(self)
django.utils.dateformat.TimeFormat.P(self)
django.utils.dateformat.TimeFormat.T(self)
django.utils.dateformat.TimeFormat.Z(self)
django.utils.dateformat.TimeFormat.__init__(self,obj)
django.utils.dateformat.TimeFormat.a(self)
django.utils.dateformat.TimeFormat.e(self)
django.utils.dateformat.TimeFormat.f(self)
django.utils.dateformat.TimeFormat.g(self)
django.utils.dateformat.TimeFormat.h(self)
django.utils.dateformat.TimeFormat.i(self)
django.utils.dateformat.TimeFormat.s(self)
django.utils.dateformat.TimeFormat.u(self)
django.utils.dateformat.format(value,format_string)
django.utils.dateformat.time_format(value,format_string)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/encoding.py----------------------------------------
A:django.utils.encoding.s->str(s)
A:django.utils.encoding.iri->b''.join(parts)
A:django.utils.encoding.uri->force_bytes(uri)
A:django.utils.encoding.bits->force_bytes(uri).split(b'%')
A:django.utils.encoding.repercent->quote(path[e.start:e.end], safe=b"/#%[]=:;$&()+,!?*@'~")
A:django.utils.encoding.DEFAULT_LOCALE_ENCODING->get_system_encoding()
django.utils.encoding.DjangoUnicodeDecodeError(self,obj,*args)
django.utils.encoding.DjangoUnicodeDecodeError.__init__(self,obj,*args)
django.utils.encoding.DjangoUnicodeDecodeError.__str__(self)
django.utils.encoding.escape_uri_path(path)
django.utils.encoding.filepath_to_uri(path)
django.utils.encoding.force_bytes(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.force_str(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.force_text(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.get_system_encoding()
django.utils.encoding.iri_to_uri(iri)
django.utils.encoding.is_protected_type(obj)
django.utils.encoding.punycode(domain)
django.utils.encoding.repercent_broken_unicode(path)
django.utils.encoding.smart_bytes(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.smart_str(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.smart_text(s,encoding='utf-8',strings_only=False,errors='strict')
django.utils.encoding.uri_to_iri(uri)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/asyncio.py----------------------------------------
A:django.utils.asyncio.event_loop->asyncio.get_event_loop()
django.utils.asyncio.async_unsafe(message)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/baseconv.py----------------------------------------
A:django.utils.baseconv.(neg, value)->self.convert(s, self.digits, self.decimal_digits, self.sign)
A:django.utils.baseconv.x->int(x // len(to_digits))
A:django.utils.baseconv.base2->BaseConverter(BASE2_ALPHABET)
A:django.utils.baseconv.base16->BaseConverter(BASE16_ALPHABET)
A:django.utils.baseconv.base36->BaseConverter(BASE36_ALPHABET)
A:django.utils.baseconv.base56->BaseConverter(BASE56_ALPHABET)
A:django.utils.baseconv.base62->BaseConverter(BASE62_ALPHABET)
A:django.utils.baseconv.base64->BaseConverter(BASE64_ALPHABET, sign='$')
django.utils.baseconv.BaseConverter(self,digits,sign='-')
django.utils.baseconv.BaseConverter.__init__(self,digits,sign='-')
django.utils.baseconv.BaseConverter.__repr__(self)
django.utils.baseconv.BaseConverter.convert(self,number,from_digits,to_digits,sign)
django.utils.baseconv.BaseConverter.decode(self,s)
django.utils.baseconv.BaseConverter.encode(self,i)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/ipv6.py----------------------------------------
A:django.utils.ipv6.addr->ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))
django.utils.ipv6.clean_ipv6_address(ip_str,unpack_ipv4=False,error_message=_('ThisisnotavalidIPv6address.'))
django.utils.ipv6.is_valid_ipv6_address(ip_str)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/feedgenerator.py----------------------------------------
A:django.utils.feedgenerator.date->datetime.datetime.combine(date, datetime.time())
A:django.utils.feedgenerator.bits->urlparse(url)
A:django.utils.feedgenerator.s->StringIO()
A:django.utils.feedgenerator.item_date->item.get(date_key)
A:django.utils.feedgenerator.self.url->iri_to_uri(url)
A:django.utils.feedgenerator.handler->SimplerXMLGenerator(outfile, encoding)
A:django.utils.feedgenerator.guid_attrs['isPermaLink']->str(item['unique_id_is_permalink']).lower()
A:django.utils.feedgenerator.enclosures->list(item['enclosures'])
A:django.utils.feedgenerator.unique_id->get_tag_uri(item['link'], item['pubdate'])
django.utils.feedgenerator.Atom1Feed(SyndicationFeed)
django.utils.feedgenerator.Atom1Feed.add_item_elements(self,handler,item)
django.utils.feedgenerator.Atom1Feed.add_root_elements(self,handler)
django.utils.feedgenerator.Atom1Feed.root_attributes(self)
django.utils.feedgenerator.Atom1Feed.write(self,outfile,encoding)
django.utils.feedgenerator.Atom1Feed.write_items(self,handler)
django.utils.feedgenerator.Enclosure(self,url,length,mime_type)
django.utils.feedgenerator.Enclosure.__init__(self,url,length,mime_type)
django.utils.feedgenerator.Rss201rev2Feed(RssFeed)
django.utils.feedgenerator.Rss201rev2Feed.add_item_elements(self,handler,item)
django.utils.feedgenerator.RssFeed(SyndicationFeed)
django.utils.feedgenerator.RssFeed.add_root_elements(self,handler)
django.utils.feedgenerator.RssFeed.endChannelElement(self,handler)
django.utils.feedgenerator.RssFeed.rss_attributes(self)
django.utils.feedgenerator.RssFeed.write(self,outfile,encoding)
django.utils.feedgenerator.RssFeed.write_items(self,handler)
django.utils.feedgenerator.RssUserland091Feed(RssFeed)
django.utils.feedgenerator.RssUserland091Feed.add_item_elements(self,handler,item)
django.utils.feedgenerator.SyndicationFeed(self,title,link,description,language=None,author_email=None,author_name=None,author_link=None,subtitle=None,categories=None,feed_url=None,feed_copyright=None,feed_guid=None,ttl=None,**kwargs)
django.utils.feedgenerator.SyndicationFeed.__init__(self,title,link,description,language=None,author_email=None,author_name=None,author_link=None,subtitle=None,categories=None,feed_url=None,feed_copyright=None,feed_guid=None,ttl=None,**kwargs)
django.utils.feedgenerator.SyndicationFeed.add_item(self,title,link,description,author_email=None,author_name=None,author_link=None,pubdate=None,comments=None,unique_id=None,unique_id_is_permalink=None,categories=(),item_copyright=None,ttl=None,updateddate=None,enclosures=None,**kwargs)
django.utils.feedgenerator.SyndicationFeed.add_item_elements(self,handler,item)
django.utils.feedgenerator.SyndicationFeed.add_root_elements(self,handler)
django.utils.feedgenerator.SyndicationFeed.item_attributes(self,item)
django.utils.feedgenerator.SyndicationFeed.latest_post_date(self)
django.utils.feedgenerator.SyndicationFeed.num_items(self)
django.utils.feedgenerator.SyndicationFeed.root_attributes(self)
django.utils.feedgenerator.SyndicationFeed.write(self,outfile,encoding)
django.utils.feedgenerator.SyndicationFeed.writeString(self,encoding)
django.utils.feedgenerator.get_tag_uri(url,date)
django.utils.feedgenerator.rfc2822_date(date)
django.utils.feedgenerator.rfc3339_date(date)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/functional.py----------------------------------------
A:django.utils.functional.self.__doc__->getattr(func, '__doc__')
A:django.utils.functional.resinstance.__dict__[self.name]->self.func(instance)
A:django.utils.functional.meth->cls.__promise__(method_name)
A:django.utils.functional.res->func(*self.__args, **self.__kw)
A:django.utils.functional.other->other.__cast().__cast()
A:django.utils.functional.lazy_func->lazy(func, *resultclasses)
A:django.utils.functional.empty->object()
A:django.utils.functional.__getattr__->new_method_proxy(getattr)
A:django.utils.functional.result->SimpleLazyObject(self._setupfunc)
A:django.utils.functional.__bytes__->new_method_proxy(bytes)
A:django.utils.functional.__str__->new_method_proxy(str)
A:django.utils.functional.__bool__->new_method_proxy(bool)
A:django.utils.functional.__dir__->new_method_proxy(dir)
A:django.utils.functional.__class__->property(new_method_proxy(operator.attrgetter('__class__')))
A:django.utils.functional.__eq__->new_method_proxy(operator.eq)
A:django.utils.functional.__lt__->new_method_proxy(operator.lt)
A:django.utils.functional.__gt__->new_method_proxy(operator.gt)
A:django.utils.functional.__ne__->new_method_proxy(operator.ne)
A:django.utils.functional.__hash__->new_method_proxy(hash)
A:django.utils.functional.__getitem__->new_method_proxy(operator.getitem)
A:django.utils.functional.__setitem__->new_method_proxy(operator.setitem)
A:django.utils.functional.__delitem__->new_method_proxy(operator.delitem)
A:django.utils.functional.__iter__->new_method_proxy(iter)
A:django.utils.functional.__len__->new_method_proxy(len)
A:django.utils.functional.__contains__->new_method_proxy(operator.contains)
A:django.utils.functional.self._wrapped->self._setupfunc()
django.utils.functional.LazyObject(self)
django.utils.functional.LazyObject.__copy__(self)
django.utils.functional.LazyObject.__deepcopy__(self,memo)
django.utils.functional.LazyObject.__delattr__(self,name)
django.utils.functional.LazyObject.__init__(self)
django.utils.functional.LazyObject.__reduce__(self)
django.utils.functional.LazyObject.__setattr__(self,name,value)
django.utils.functional.LazyObject._setup(self)
django.utils.functional.Promise
django.utils.functional.SimpleLazyObject(self,func)
django.utils.functional.SimpleLazyObject.__copy__(self)
django.utils.functional.SimpleLazyObject.__deepcopy__(self,memo)
django.utils.functional.SimpleLazyObject.__init__(self,func)
django.utils.functional.SimpleLazyObject.__repr__(self)
django.utils.functional.SimpleLazyObject._setup(self)
django.utils.functional._lazy_proxy_unpickle(func,args,kwargs,*resultclasses)
django.utils.functional.cached_property(self,func,name=None)
django.utils.functional.cached_property.__get__(self,instance,cls=None)
django.utils.functional.cached_property.__init__(self,func,name=None)
django.utils.functional.cached_property.__set_name__(self,owner,name)
django.utils.functional.cached_property.func(instance)
django.utils.functional.classproperty(self,method=None)
django.utils.functional.classproperty.__get__(self,instance,cls=None)
django.utils.functional.classproperty.__init__(self,method=None)
django.utils.functional.classproperty.getter(self,method)
django.utils.functional.keep_lazy(*resultclasses)
django.utils.functional.keep_lazy_text(func)
django.utils.functional.lazy(func,*resultclasses)
django.utils.functional.lazystr(text)
django.utils.functional.new_method_proxy(func)
django.utils.functional.partition(predicate,values)
django.utils.functional.unpickle_lazyobject(wrapped)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/autoreload.py----------------------------------------
A:django.utils.autoreload.autoreload_started->Signal()
A:django.utils.autoreload.file_changed->Signal()
A:django.utils.autoreload.logger->logging.getLogger('django.utils.autoreload')
A:django.utils.autoreload._exception->sys.exc_info()
A:django.utils.autoreload.attr_list->termios.tcgetattr(sys.stdin)
A:django.utils.autoreload.old_handler->signal.signal(signal.SIGTTOU, signal.SIG_IGN)
A:django.utils.autoreload.keys->sorted(sys.modules)
A:django.utils.autoreload.modules->tuple((m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes)))
A:django.utils.autoreload.results->Signal().send(sender=self, file_path=path)
A:django.utils.autoreload.path->path.absolute().absolute()
A:django.utils.autoreload.resolved_path->path.absolute().absolute().resolve().absolute()
A:django.utils.autoreload.path_parts->sorted([x.parts for x in paths], key=len, reverse=True)
A:django.utils.autoreload.node->node.setdefault(chunk, {}).setdefault(chunk, {})
A:django.utils.autoreload.py_script->Path(sys.argv[0])
A:django.utils.autoreload.exe_entrypoint->Path(sys.argv[0]).with_suffix('.exe')
A:django.utils.autoreload.script_entrypoint->Path(sys.argv[0]).with_name('%s-script.py' % py_script.name)
A:django.utils.autoreload.args->get_child_arguments()
A:django.utils.autoreload.p->subprocess.run(args, env=new_environ, close_fds=False)
A:django.utils.autoreload.self.extra_files->set()
A:django.utils.autoreload.self.directory_globs->defaultdict(set)
A:django.utils.autoreload.self._stop_condition->threading.Event()
A:django.utils.autoreload.ticker->self.tick()
A:django.utils.autoreload.old_time->mtimes.get(filepath)
A:django.utils.autoreload.seen_files->set()
A:django.utils.autoreload.self.roots->defaultdict(set)
A:django.utils.autoreload.self.processed_request->threading.Event()
A:django.utils.autoreload.self.client_timeout->int(os.environ.get('DJANGO_WATCHMAN_TIMEOUT', 5))
A:django.utils.autoreload.result->pywatchman.client(timeout=0.1).capabilityCheck()
A:django.utils.autoreload.(root, rel_path)->self._watch_root(directory)
A:django.utils.autoreload.extra_directories->self.directory_globs.keys()
A:django.utils.autoreload.sys_paths->list(sys_path_directories())
A:django.utils.autoreload.watched_files->list(self.watched_files(include_globs=False))
A:django.utils.autoreload.found_roots->common_roots(self.watched_roots(watched_files))
A:django.utils.autoreload.sorted_files->sorted(watched_files, key=lambda p: p.parent)
A:django.utils.autoreload.subscription->self.client.getSubscription(sub)
A:django.utils.autoreload.root_directory->Path(result['subscription'].split(':', 1)[1])
A:django.utils.autoreload.client->pywatchman.client(timeout=0.1)
A:django.utils.autoreload.version->get_version_tuple(result['version'])
A:django.utils.autoreload.main_func->check_errors(main_func)
A:django.utils.autoreload.django_main_thread->threading.Thread(target=main_func, args=args, kwargs=kwargs, name='django-main-thread')
A:django.utils.autoreload.reloader->get_reloader()
A:django.utils.autoreload.exit_code->restart_with_reloader()
django.utils.autoreload.BaseReloader(self)
django.utils.autoreload.BaseReloader.__init__(self)
django.utils.autoreload.BaseReloader.check_availability(cls)
django.utils.autoreload.BaseReloader.notify_file_changed(self,path)
django.utils.autoreload.BaseReloader.run(self,django_main_thread)
django.utils.autoreload.BaseReloader.run_loop(self)
django.utils.autoreload.BaseReloader.should_stop(self)
django.utils.autoreload.BaseReloader.stop(self)
django.utils.autoreload.BaseReloader.tick(self)
django.utils.autoreload.BaseReloader.wait_for_apps_ready(self,app_reg,django_main_thread)
django.utils.autoreload.BaseReloader.watch_dir(self,path,glob)
django.utils.autoreload.BaseReloader.watched_files(self,include_globs=True)
django.utils.autoreload.StatReloader(BaseReloader)
django.utils.autoreload.StatReloader.check_availability(cls)
django.utils.autoreload.StatReloader.snapshot_files(self)
django.utils.autoreload.StatReloader.tick(self)
django.utils.autoreload.WatchmanReloader(self)
django.utils.autoreload.WatchmanReloader.__init__(self)
django.utils.autoreload.WatchmanReloader._check_subscription(self,sub)
django.utils.autoreload.WatchmanReloader._get_clock(self,root)
django.utils.autoreload.WatchmanReloader._subscribe(self,directory,name,expression)
django.utils.autoreload.WatchmanReloader._subscribe_dir(self,directory,filenames)
django.utils.autoreload.WatchmanReloader._update_watches(self)
django.utils.autoreload.WatchmanReloader._watch_glob(self,directory,patterns)
django.utils.autoreload.WatchmanReloader._watch_root(self,root)
django.utils.autoreload.WatchmanReloader.check_availability(cls)
django.utils.autoreload.WatchmanReloader.check_server_status(self,inner_ex=None)
django.utils.autoreload.WatchmanReloader.client(self)
django.utils.autoreload.WatchmanReloader.request_processed(self,**kwargs)
django.utils.autoreload.WatchmanReloader.stop(self)
django.utils.autoreload.WatchmanReloader.tick(self)
django.utils.autoreload.WatchmanReloader.update_watches(self)
django.utils.autoreload.WatchmanReloader.watched_roots(self,watched_files)
django.utils.autoreload.WatchmanUnavailable(RuntimeError)
django.utils.autoreload.check_errors(fn)
django.utils.autoreload.common_roots(paths)
django.utils.autoreload.ensure_echo_on()
django.utils.autoreload.get_child_arguments()
django.utils.autoreload.get_reloader()
django.utils.autoreload.is_django_module(module)
django.utils.autoreload.is_django_path(path)
django.utils.autoreload.iter_all_python_module_files()
django.utils.autoreload.iter_modules_and_files(modules,extra_files)
django.utils.autoreload.raise_last_exception()
django.utils.autoreload.restart_with_reloader()
django.utils.autoreload.run_with_reloader(main_func,*args,**kwargs)
django.utils.autoreload.start_django(reloader,main_func,*args,**kwargs)
django.utils.autoreload.sys_path_directories()
django.utils.autoreload.trigger_reload(filename)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/hashable.py----------------------------------------
django.utils.hashable.make_hashable(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/termcolors.py----------------------------------------
A:django.utils.termcolors.parts->config_string.lower().split(';')
A:django.utils.termcolors.palette->PALETTES[NOCOLOR_PALETTE].copy()
A:django.utils.termcolors.(role, instructions)->part.split('=')
A:django.utils.termcolors.role->role.upper().upper()
A:django.utils.termcolors.styles->instructions.split(',')
A:django.utils.termcolors.colors->instructions.split(',').pop().split('/')
A:django.utils.termcolors.fg->instructions.split(',').pop().split('/').pop()
A:django.utils.termcolors.opts->tuple((s for s in styles if s in opt_dict))
django.utils.termcolors.colorize(text='',opts=(),**kwargs)
django.utils.termcolors.make_style(opts=(),**kwargs)
django.utils.termcolors.parse_color_setting(config_string)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/datastructures.py----------------------------------------
A:django.utils.datastructures.self.dict->dict.fromkeys(iterable or ())
A:django.utils.datastructures.list_->super().__getitem__(key)
A:django.utils.datastructures.result->tuple.__new__(cls, *args, **kwargs).__class__()
A:django.utils.datastructures.data->obj_dict.pop('_data', {})
A:django.utils.datastructures.values->super().__getitem__(key)
A:django.utils.datastructures.arg->arg.items().items()
A:django.utils.datastructures.self->tuple.__new__(cls, *args, **kwargs)
A:django.utils.datastructures.use_func->key.startswith(self.prefix)
A:django.utils.datastructures.value->super().__getitem__(key)
django.utils.datastructures.CaseInsensitiveMapping(self,data)
django.utils.datastructures.CaseInsensitiveMapping.__eq__(self,other)
django.utils.datastructures.CaseInsensitiveMapping.__getitem__(self,key)
django.utils.datastructures.CaseInsensitiveMapping.__init__(self,data)
django.utils.datastructures.CaseInsensitiveMapping.__iter__(self)
django.utils.datastructures.CaseInsensitiveMapping.__len__(self)
django.utils.datastructures.CaseInsensitiveMapping.__repr__(self)
django.utils.datastructures.CaseInsensitiveMapping.copy(self)
django.utils.datastructures.DictWrapper(self,data,func,prefix)
django.utils.datastructures.DictWrapper.__getitem__(self,key)
django.utils.datastructures.DictWrapper.__init__(self,data,func,prefix)
django.utils.datastructures.ImmutableList(cls,*args,warning='ImmutableListobjectisimmutable.',**kwargs)
django.utils.datastructures.ImmutableList.__new__(cls,*args,warning='ImmutableListobjectisimmutable.',**kwargs)
django.utils.datastructures.ImmutableList.complain(self,*args,**kwargs)
django.utils.datastructures.MultiValueDict(self,key_to_list_mapping=())
django.utils.datastructures.MultiValueDict.__copy__(self)
django.utils.datastructures.MultiValueDict.__deepcopy__(self,memo)
django.utils.datastructures.MultiValueDict.__getitem__(self,key)
django.utils.datastructures.MultiValueDict.__getstate__(self)
django.utils.datastructures.MultiValueDict.__init__(self,key_to_list_mapping=())
django.utils.datastructures.MultiValueDict.__repr__(self)
django.utils.datastructures.MultiValueDict.__setitem__(self,key,value)
django.utils.datastructures.MultiValueDict.__setstate__(self,obj_dict)
django.utils.datastructures.MultiValueDict._getlist(self,key,default=None,force_list=False)
django.utils.datastructures.MultiValueDict.appendlist(self,key,value)
django.utils.datastructures.MultiValueDict.copy(self)
django.utils.datastructures.MultiValueDict.dict(self)
django.utils.datastructures.MultiValueDict.get(self,key,default=None)
django.utils.datastructures.MultiValueDict.getlist(self,key,default=None)
django.utils.datastructures.MultiValueDict.items(self)
django.utils.datastructures.MultiValueDict.lists(self)
django.utils.datastructures.MultiValueDict.setdefault(self,key,default=None)
django.utils.datastructures.MultiValueDict.setlist(self,key,list_)
django.utils.datastructures.MultiValueDict.setlistdefault(self,key,default_list=None)
django.utils.datastructures.MultiValueDict.update(self,*args,**kwargs)
django.utils.datastructures.MultiValueDict.values(self)
django.utils.datastructures.MultiValueDictKeyError(KeyError)
django.utils.datastructures.OrderedSet(self,iterable=None)
django.utils.datastructures.OrderedSet.__bool__(self)
django.utils.datastructures.OrderedSet.__contains__(self,item)
django.utils.datastructures.OrderedSet.__init__(self,iterable=None)
django.utils.datastructures.OrderedSet.__iter__(self)
django.utils.datastructures.OrderedSet.__len__(self)
django.utils.datastructures.OrderedSet.add(self,item)
django.utils.datastructures.OrderedSet.discard(self,item)
django.utils.datastructures.OrderedSet.remove(self,item)
django.utils.datastructures._destruct_iterable_mapping_values(data)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/xmlutils.py----------------------------------------
django.utils.xmlutils.SimplerXMLGenerator(XMLGenerator)
django.utils.xmlutils.SimplerXMLGenerator.addQuickElement(self,name,contents=None,attrs=None)
django.utils.xmlutils.SimplerXMLGenerator.characters(self,content)
django.utils.xmlutils.SimplerXMLGenerator.startElement(self,name,attrs)
django.utils.xmlutils.UnserializableContentError(ValueError)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/version.py----------------------------------------
A:django.utils.version.version->get_complete_version(version)
A:django.utils.version.main->get_main_version(version)
A:django.utils.version.git_changeset->get_git_changeset()
A:django.utils.version.repo_dir->os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
A:django.utils.version.git_log->subprocess.run(['git', 'log', '--pretty=format:%ct', '--quiet', '-1', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, cwd=repo_dir, universal_newlines=True)
A:django.utils.version.timestamp->datetime.datetime.utcfromtimestamp(int(timestamp))
A:django.utils.version.loose_version->LooseVersion(version)
django.get_version(version=None)
django.get_version_tuple(version)
django.utils.version.get_complete_version(version=None)
django.utils.version.get_docs_version(version=None)
django.utils.version.get_git_changeset()
django.utils.version.get_main_version(version=None)
django.utils.version.get_version(version=None)
django.utils.version.get_version_tuple(version)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/html.py----------------------------------------
A:django.utils.html.word_split_re->_lazy_re_compile('([\\s<>"\']+)')
A:django.utils.html.simple_url_re->_lazy_re_compile('^https?://\\[?\\w', re.IGNORECASE)
A:django.utils.html.simple_url_2_re->_lazy_re_compile('^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
A:django.utils.html.json_str->json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)
A:django.utils.html.text->str(text)
A:django.utils.html.args_safe->map(conditional_escape, args)
A:django.utils.html.value->str(value)
A:django.utils.html.paras->re.split('\n{2,}', str(value))
A:django.utils.html.s->MLStripper()
A:django.utils.html.new_value->_strip_once(value)
A:django.utils.html.segment->unquote(segment)
A:django.utils.html.(scheme, netloc, path, query, fragment)->urlsplit(url)
A:django.utils.html.netloc->punycode(netloc)
A:django.utils.html.query->urlencode(query_parts)
A:django.utils.html.path->unquote_quote(path)
A:django.utils.html.fragment->unquote_quote(fragment)
A:django.utils.html.safe_input->isinstance(text, SafeData)
A:django.utils.html.middle_unescaped->html.unescape(middle)
A:django.utils.html.stripped->html.unescape(middle).rstrip(TRAILING_PUNCTUATION_CHARS)
A:django.utils.html.(p1, p2)->str(value).split('@')
A:django.utils.html.words->_lazy_re_compile('([\\s<>"\']+)').split(str(text))
A:django.utils.html.(lead, middle, trail)->trim_punctuation(lead, middle, trail)
A:django.utils.html.url->smart_urlquote('http://%s' % html.unescape(middle))
A:django.utils.html.(local, domain)->middle.rsplit('@', 1)
A:django.utils.html.domain->punycode(domain)
A:django.utils.html.trimmed->escape(trimmed)
A:django.utils.html.words[i]->escape(word)
django.utils.html.MLStripper(self)
django.utils.html.MLStripper.__init__(self)
django.utils.html.MLStripper.get_data(self)
django.utils.html.MLStripper.handle_charref(self,name)
django.utils.html.MLStripper.handle_data(self,d)
django.utils.html.MLStripper.handle_entityref(self,name)
django.utils.html._strip_once(value)
django.utils.html.avoid_wrapping(value)
django.utils.html.conditional_escape(text)
django.utils.html.escape(text)
django.utils.html.escapejs(value)
django.utils.html.format_html(format_string,*args,**kwargs)
django.utils.html.format_html_join(sep,format_string,args_generator)
django.utils.html.html_safe(klass)
django.utils.html.json_script(value,element_id)
django.utils.html.linebreaks(value,autoescape=False)
django.utils.html.smart_urlquote(url)
django.utils.html.strip_spaces_between_tags(value)
django.utils.html.strip_tags(value)
django.utils.html.urlize(text,trim_url_limit=None,nofollow=False,autoescape=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/http.py----------------------------------------
A:django.utils.http.ETAG_MATCH->_lazy_re_compile('\n    \\A(      # start of string and capture group\n    (?:W/)?  # optional weak indicator\n    "        # opening quote\n    [^"]*    # any sequence of non-quote characters\n    "        # end quote\n    )\\Z      # end of string and capture group\n', re.X)
A:django.utils.http.MONTHS->'jan feb mar apr may jun jul aug sep oct nov dec'.split()
A:django.utils.http.RFC1123_DATE->_lazy_re_compile('^\\w{3}, %s %s %s %s GMT$' % (__D, __M, __Y, __T))
A:django.utils.http.RFC850_DATE->_lazy_re_compile('^\\w{6,9}, %s-%s-%s %s GMT$' % (__D, __M, __Y2, __T))
A:django.utils.http.ASCTIME_DATE->_lazy_re_compile('^\\w{3} %s %s %s %s$' % (__M, __D2, __T, __Y))
A:django.utils.http.query->query.items().items()
A:django.utils.http.itr->iter(value)
A:django.utils.http.item->str(item)
A:django.utils.http.m->regex.match(date)
A:django.utils.http.year->int(m['year'])
A:django.utils.http.day->int(m['day'])
A:django.utils.http.hour->int(m['hour'])
A:django.utils.http.min->int(m['min'])
A:django.utils.http.sec->int(m['sec'])
A:django.utils.http.result->ParseResult(scheme, netloc, url, params, query, fragment)
A:django.utils.http.(i, n)->divmod(i, 36)
A:django.utils.http.s->s.encode().encode()
A:django.utils.http.pattern->pattern.lower().lower()
A:django.utils.http.url->'/%2F{}'.format(url[2:])
A:django.utils.http.allowed_hosts->set()
A:django.utils.http.(url, scheme, _coerce_result)->_coerce_args(url, scheme)
A:django.utils.http.splitresult->_urlsplit(url, scheme, allow_fragments)
A:django.utils.http.(url, params)->_splitparams(url)
A:django.utils.http.i->'/%2F{}'.format(url[2:]).find(':')
A:django.utils.http.(netloc, url)->_splitnetloc(url, 2)
A:django.utils.http.(url, fragment)->'/%2F{}'.format(url[2:]).split('#', 1)
A:django.utils.http.(url, query)->'/%2F{}'.format(url[2:]).split('?', 1)
A:django.utils.http.v->SplitResult(scheme, netloc, url, query, fragment)
A:django.utils.http.url_info->_urlparse(url)
A:django.utils.http.(qs, _coerce_result)->_coerce_args(qs)
A:django.utils.http.nv->name_value.split('=', 1)
A:django.utils.http.name->_coerce_result(name)
A:django.utils.http.value->_coerce_result(value)
django.utils.http._url_has_allowed_host_and_scheme(url,allowed_hosts,require_https=False)
django.utils.http._urlparse(url,scheme='',allow_fragments=True)
django.utils.http._urlsplit(url,scheme='',allow_fragments=True)
django.utils.http.base36_to_int(s)
django.utils.http.escape_leading_slashes(url)
django.utils.http.http_date(epoch_seconds=None)
django.utils.http.int_to_base36(i)
django.utils.http.is_safe_url(url,allowed_hosts,require_https=False)
django.utils.http.is_same_domain(host,pattern)
django.utils.http.parse_etags(etag_str)
django.utils.http.parse_http_date(date)
django.utils.http.parse_http_date_safe(date)
django.utils.http.parse_qsl(qs,keep_blank_values=False,strict_parsing=False,encoding='utf-8',errors='replace',max_num_fields=None,separator='&')
django.utils.http.quote_etag(etag_str)
django.utils.http.url_has_allowed_host_and_scheme(url,allowed_hosts,require_https=False)
django.utils.http.urlencode(query,doseq=False)
django.utils.http.urlquote(url,safe='/')
django.utils.http.urlquote_plus(url,safe='')
django.utils.http.urlsafe_base64_decode(s)
django.utils.http.urlsafe_base64_encode(s)
django.utils.http.urlunquote(quoted_url)
django.utils.http.urlunquote_plus(quoted_url)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/duration.py----------------------------------------
A:django.utils.duration.(days, hours, minutes, seconds, microseconds)->_get_duration_components(duration)
A:django.utils.duration.string->'{:02d}:{:02d}:{:02d}'.format(hours, minutes, seconds)
django.utils.duration._get_duration_components(duration)
django.utils.duration.duration_iso_string(duration)
django.utils.duration.duration_microseconds(delta)
django.utils.duration.duration_string(duration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/deconstruct.py----------------------------------------
A:django.utils.deconstruct.obj->super(klass, cls).__new__(cls)
A:django.utils.deconstruct.(module_name, _, name)->path.rpartition('.')
A:django.utils.deconstruct.module->import_module(module_name)
A:django.utils.deconstruct.klass.__new__->staticmethod(__new__)
django.utils.deconstruct.deconstructible(*args,path=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/_os.py----------------------------------------
A:django.utils._os.final_path->abspath(join(base, *paths))
A:django.utils._os.base_path->abspath(base)
A:django.utils._os.original_path->os.path.join(temp_dir, 'original')
A:django.utils._os.symlink_path->os.path.join(temp_dir, 'symlink')
django.utils._os.safe_join(base,*paths)
django.utils._os.symlinks_supported()
django.utils._os.to_path(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/decorators.py----------------------------------------
A:django.utils.decorators.bound_method->dec(bound_method)
A:django.utils.decorators.method->getattr(obj, name)
A:django.utils.decorators._wrapper->_multi_decorate(decorator, method)
A:django.utils.decorators.middleware->middleware_class(view_func, *m_args, **m_kwargs)
A:django.utils.decorators.result->middleware_class(view_func, *m_args, **m_kwargs).process_exception(request, e)
A:django.utils.decorators.response->middleware_class(view_func, *m_args, **m_kwargs).process_template_response(request, response)
django.utils.decorators._multi_decorate(decorators,method)
django.utils.decorators._update_method_wrapper(_wrapper,decorator)
django.utils.decorators.async_only_middleware(func)
django.utils.decorators.classonlymethod(classmethod)
django.utils.decorators.classonlymethod.__get__(self,instance,cls=None)
django.utils.decorators.decorator_from_middleware(middleware_class)
django.utils.decorators.decorator_from_middleware_with_args(middleware_class)
django.utils.decorators.make_middleware_decorator(middleware_class)
django.utils.decorators.method_decorator(decorator,name='')
django.utils.decorators.sync_and_async_middleware(func)
django.utils.decorators.sync_only_middleware(func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/tree.py----------------------------------------
A:django.utils.tree.obj->self._new_instance(self.children, self.connector, self.negated)
A:django.utils.tree.obj.children->copy.deepcopy(self.children, memodict)
django.utils.tree.Node(self,children=None,connector=None,negated=False)
django.utils.tree.Node.__bool__(self)
django.utils.tree.Node.__contains__(self,other)
django.utils.tree.Node.__deepcopy__(self,memodict)
django.utils.tree.Node.__eq__(self,other)
django.utils.tree.Node.__hash__(self)
django.utils.tree.Node.__init__(self,children=None,connector=None,negated=False)
django.utils.tree.Node.__len__(self)
django.utils.tree.Node.__repr__(self)
django.utils.tree.Node.__str__(self)
django.utils.tree.Node._new_instance(cls,children=None,connector=None,negated=False)
django.utils.tree.Node.add(self,data,conn_type,squash=True)
django.utils.tree.Node.negate(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/connection.py----------------------------------------
A:django.utils.connection.self._connections->Local(self.thread_critical)
A:django.utils.connection.self._settings->self.configure_settings(self._settings)
A:django.utils.connection.settings->getattr(django_settings, self.settings_name)
A:django.utils.connection.conn->self.create_connection(alias)
django.utils.connection.BaseConnectionHandler(self,settings=None)
django.utils.connection.BaseConnectionHandler.__delitem__(self,key)
django.utils.connection.BaseConnectionHandler.__getitem__(self,alias)
django.utils.connection.BaseConnectionHandler.__init__(self,settings=None)
django.utils.connection.BaseConnectionHandler.__iter__(self)
django.utils.connection.BaseConnectionHandler.__setitem__(self,key,value)
django.utils.connection.BaseConnectionHandler.all(self)
django.utils.connection.BaseConnectionHandler.configure_settings(self,settings)
django.utils.connection.BaseConnectionHandler.create_connection(self,alias)
django.utils.connection.BaseConnectionHandler.settings(self)
django.utils.connection.ConnectionDoesNotExist(Exception)
django.utils.connection.ConnectionProxy(self,connections,alias)
django.utils.connection.ConnectionProxy.__contains__(self,key)
django.utils.connection.ConnectionProxy.__delattr__(self,name)
django.utils.connection.ConnectionProxy.__eq__(self,other)
django.utils.connection.ConnectionProxy.__getattr__(self,item)
django.utils.connection.ConnectionProxy.__init__(self,connections,alias)
django.utils.connection.ConnectionProxy.__setattr__(self,name,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/dateparse.py----------------------------------------
A:django.utils.dateparse.date_re->_lazy_re_compile('(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})$')
A:django.utils.dateparse.time_re->_lazy_re_compile('(?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:[\\.,](?P<microsecond>\\d{1,6})\\d{0,6})?)?')
A:django.utils.dateparse.datetime_re->_lazy_re_compile('(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:[\\.,](?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$')
A:django.utils.dateparse.standard_duration_re->_lazy_re_compile('^(?:(?P<days>-?\\d+) (days?, )?)?(?P<sign>-?)((?:(?P<hours>\\d+):)(?=\\d+:\\d+))?(?:(?P<minutes>\\d+):)?(?P<seconds>\\d+)(?:[\\.,](?P<microseconds>\\d{1,6})\\d{0,6})?$')
A:django.utils.dateparse.iso8601_duration_re->_lazy_re_compile('^(?P<sign>[-+]?)P(?:(?P<days>\\d+(.\\d+)?)D)?(?:T(?:(?P<hours>\\d+(.\\d+)?)H)?(?:(?P<minutes>\\d+(.\\d+)?)M)?(?:(?P<seconds>\\d+(.\\d+)?)S)?)?$')
A:django.utils.dateparse.postgres_interval_re->_lazy_re_compile('^(?:(?P<days>-?\\d+) (days? ?))?(?:(?P<sign>[-+])?(?P<hours>\\d+):(?P<minutes>\\d\\d):(?P<seconds>\\d\\d)(?:\\.(?P<microseconds>\\d{1,6}))?)?$')
A:django.utils.dateparse.match->_lazy_re_compile('(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:[\\.,](?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$').match(value)
A:django.utils.dateparse.kw->_lazy_re_compile('(?P<year>\\d{4})-(?P<month>\\d{1,2})-(?P<day>\\d{1,2})[T ](?P<hour>\\d{1,2}):(?P<minute>\\d{1,2})(?::(?P<second>\\d{1,2})(?:[\\.,](?P<microsecond>\\d{1,6})\\d{0,6})?)?(?P<tzinfo>Z|[+-]\\d{2}(?::?\\d{2})?)?$').match(value).groupdict()
A:django.utils.dateparse.tzinfo->get_fixed_timezone(offset)
A:django.utils.dateparse.kw['microseconds']->kw['microseconds'].ljust(6, '0').ljust(6, '0')
A:django.utils.dateparse.days->datetime.timedelta(kw.pop('days', 0.0) or 0.0)
django.utils.dateparse.parse_date(value)
django.utils.dateparse.parse_datetime(value)
django.utils.dateparse.parse_duration(value)
django.utils.dateparse.parse_time(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/numberformat.py----------------------------------------
A:django.utils.numberformat.number->'{:e}'.format(number)
A:django.utils.numberformat.cutoff->Decimal('0.' + '1'.rjust(decimal_pos, '0'))
A:django.utils.numberformat.(_, digits, exponent)->'{:e}'.format(number).as_tuple()
A:django.utils.numberformat.(coefficient, exponent)->'{:e}'.format(number).split('e')
A:django.utils.numberformat.coefficient->format(coefficient, decimal_sep, decimal_pos, grouping, thousand_sep, force_grouping, use_l10n)
A:django.utils.numberformat.str_number->str(number)
A:django.utils.numberformat.(int_part, dec_part)->str(number).split('.')
A:django.utils.numberformat.intervals->list(grouping)
A:django.utils.numberformat.active_interval->list(grouping).pop(0)
django.utils.numberformat.format(number,decimal_sep,decimal_pos=None,grouping=0,thousand_sep='',force_grouping=False,use_l10n=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/regex_helper.py----------------------------------------
A:django.utils.regex_helper.pattern_iter->next_char(iter(pattern))
A:django.utils.regex_helper.(ch, escaped)->next(input_iter)
A:django.utils.regex_helper.start->non_capturing_groups.pop()
A:django.utils.regex_helper.inner->NonCapture(result[start:])
A:django.utils.regex_helper.param->''.join(name)
A:django.utils.regex_helper.(count, ch)->get_quantifier(ch, pattern_iter)
A:django.utils.regex_helper.result[-1]->Choice([None, result[-1]])
A:django.utils.regex_helper.ch->next(input_iter)
A:django.utils.regex_helper.representative->ESCAPE_MAPPINGS.get(ch, ch)
A:django.utils.regex_helper.(ch2, escaped)->next(input_iter)
A:django.utils.regex_helper.values->''.join(quant).split(',')
A:django.utils.regex_helper.piece->''.join(source[last:])
A:django.utils.regex_helper.(res, args)->flatten_result(item)
django.utils.regex_helper.Choice(list)
django.utils.regex_helper.Group(list)
django.utils.regex_helper.NonCapture(list)
django.utils.regex_helper._lazy_re_compile(regex,flags=0)
django.utils.regex_helper.contains(source,inst)
django.utils.regex_helper.flatten_result(source)
django.utils.regex_helper.get_quantifier(ch,input_iter)
django.utils.regex_helper.next_char(input_iter)
django.utils.regex_helper.normalize(pattern)
django.utils.regex_helper.walk_to_end(ch,input_iter)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/formats.py----------------------------------------
A:django.utils.formats.FORMAT_SETTINGS->frozenset(['DECIMAL_SEPARATOR', 'THOUSAND_SEPARATOR', 'NUMBER_GROUPING', 'FIRST_DAY_OF_WEEK', 'MONTH_DAY_FORMAT', 'TIME_FORMAT', 'DATE_FORMAT', 'DATETIME_FORMAT', 'SHORT_DATE_FORMAT', 'SHORT_DATETIME_FORMAT', 'YEAR_MONTH_FORMAT', 'DATE_INPUT_FORMATS', 'TIME_INPUT_FORMATS', 'DATETIME_INPUT_FORMATS'])
A:django.utils.formats.locale->to_locale(lang)
A:django.utils.formats.lang->get_language()
A:django.utils.formats._format_modules_cache[lang]->list(iter_format_modules(lang, settings.FORMAT_MODULE_PATH))
A:django.utils.formats.val->list(val)
A:django.utils.formats.get_format_lazy->lazy(get_format, str, list, tuple)
A:django.utils.formats.value->'.'.join(reversed(parts))
A:django.utils.formats.decimal_separator->get_format('DECIMAL_SEPARATOR')
A:django.utils.formats.(value, decimals)->'.'.join(reversed(parts)).split(decimal_separator, 1)
A:django.utils.formats.thousand_sep->get_format('THOUSAND_SEPARATOR')
django.utils.formats.date_format(value,format=None,use_l10n=None)
django.utils.formats.get_format(format_type,lang=None,use_l10n=None)
django.utils.formats.get_format_modules(lang=None,reverse=False)
django.utils.formats.iter_format_modules(lang,format_module_path=None)
django.utils.formats.localize(value,use_l10n=None)
django.utils.formats.localize_input(value,default=None)
django.utils.formats.number_format(value,decimal_pos=None,use_l10n=None,force_grouping=False)
django.utils.formats.reset_format_cache()
django.utils.formats.sanitize_separators(value)
django.utils.formats.time_format(value,format=None,use_l10n=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/dates.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/translation/trans_null.py----------------------------------------
django.utils.translation.trans.activate(x)
django.utils.translation.trans.check_for_language(x)
django.utils.translation.trans.deactivate()
django.utils.translation.trans.get_language()
django.utils.translation.trans.get_language_bidi()
django.utils.translation.trans.get_language_from_path(request)
django.utils.translation.trans.get_language_from_request(request,check_path=False)
django.utils.translation.trans.get_supported_language_variant(lang_code,strict=False)
django.utils.translation.trans.gettext(message)
django.utils.translation.trans.ngettext(singular,plural,number)
django.utils.translation.trans.npgettext(context,singular,plural,number)
django.utils.translation.trans.pgettext(context,message)
django.utils.translation.trans_null.activate(x)
django.utils.translation.trans_null.check_for_language(x)
django.utils.translation.trans_null.deactivate()
django.utils.translation.trans_null.get_language()
django.utils.translation.trans_null.get_language_bidi()
django.utils.translation.trans_null.get_language_from_path(request)
django.utils.translation.trans_null.get_language_from_request(request,check_path=False)
django.utils.translation.trans_null.get_supported_language_variant(lang_code,strict=False)
django.utils.translation.trans_null.gettext(message)
django.utils.translation.trans_null.ngettext(singular,plural,number)
django.utils.translation.trans_null.npgettext(context,singular,plural,number)
django.utils.translation.trans_null.pgettext(context,message)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/translation/template.py----------------------------------------
A:django.utils.translation.template.dot_re->_lazy_re_compile('\\S')
A:django.utils.translation.template.context_re->_lazy_re_compile('^\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\'))\\s*')
A:django.utils.translation.template.inline_re->_lazy_re_compile('^\\s*trans(?:late)?\\s+((?:"[^"]*?")|(?:\'[^\']*?\'))(?:\\s*\\|\\s*[^\\s:]+(?::(?:[^\\s\'":]+|(?:"[^"]*?")|(?:\'[^\']*?\')))?)*(\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\')))?\\s*')
A:django.utils.translation.template.block_re->_lazy_re_compile('^\\s*blocktrans(?:late)?(\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\')))?(?:\\s+|$)')
A:django.utils.translation.template.endblock_re->_lazy_re_compile('^\\s*endblocktrans(?:late)?$')
A:django.utils.translation.template.plural_re->_lazy_re_compile('^\\s*plural$')
A:django.utils.translation.template.constant_re->_lazy_re_compile('_\\(((?:".*?")|(?:\'.*?\'))\\)')
A:django.utils.translation.template.out->StringIO('')
A:django.utils.translation.template.message->trim_whitespace(message)
A:django.utils.translation.template.content->''.join(comment)
A:django.utils.translation.template.endbmatch->_lazy_re_compile('^\\s*endblocktrans(?:late)?$').match(t.contents)
A:django.utils.translation.template.pluralmatch->_lazy_re_compile('^\\s*plural$').match(t.contents)
A:django.utils.translation.template.contents->t.contents.replace('%', '%%')
A:django.utils.translation.template.imatch->_lazy_re_compile('^\\s*trans(?:late)?\\s+((?:"[^"]*?")|(?:\'[^\']*?\'))(?:\\s*\\|\\s*[^\\s:]+(?::(?:[^\\s\'":]+|(?:"[^"]*?")|(?:\'[^\']*?\')))?)*(\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\')))?\\s*').match(t.contents)
A:django.utils.translation.template.bmatch->_lazy_re_compile('^\\s*blocktrans(?:late)?(\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\')))?(?:\\s+|$)').match(t.contents)
A:django.utils.translation.template.cmatches->_lazy_re_compile('_\\(((?:".*?")|(?:\'.*?\'))\\)').findall(t.contents)
A:django.utils.translation.template.g->g.replace('%', '%%').replace('%', '%%')
A:django.utils.translation.template.context_match->_lazy_re_compile('^\\s+.*context\\s+((?:"[^"]*?")|(?:\'[^\']*?\'))\\s*').match(bmatch[1])
A:django.utils.translation.template.message_context->message_context.strip("'").strip("'")
A:django.utils.translation.template.parts->t.contents.split('|')
A:django.utils.translation.template.cmatch->_lazy_re_compile('_\\(((?:".*?")|(?:\'.*?\'))\\)').match(parts[0])
django.utils.translation.template.blankout(src,char)
django.utils.translation.template.templatize(src,origin=None)
django.utils.translation.templatize(src,origin=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/translation/trans_real.py----------------------------------------
A:django.utils.translation.trans_real._active->Local()
A:django.utils.translation.trans_real.accept_language_re->_lazy_re_compile('\n        ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\\*)      # "en", "en-au", "x-y-z", "es-419", "*"\n        (?:\\s*;\\s*q=(0(?:\\.\\d{,3})?|1(?:\\.0{,3})?))?  # Optional "q=1.00", "q=0.8"\n        (?:\\s*,\\s*|$)                                 # Multiple accepts per header.\n        ', re.VERBOSE)
A:django.utils.translation.trans_real.language_code_re->_lazy_re_compile('^[a-z]{1,8}(?:-[a-z0-9]{1,8})*(?:@[a-z0-9]{1,20})?$', re.IGNORECASE)
A:django.utils.translation.trans_real.language_code_prefix_re->_lazy_re_compile('^/(\\w+([@-]\\w+)?)(/|$)')
A:django.utils.translation.trans_real.missing->object()
A:django.utils.translation.trans_real.result->ngettext(singular, plural, number)
A:django.utils.translation.trans_real.tmsg->self._catalog.plural(msgid1, n)
A:django.utils.translation.trans_real.self.__to_language->to_language(language)
A:django.utils.translation.trans_real.self.__locale->to_locale(language)
A:django.utils.translation.trans_real.translation->self._new_gnu_trans(localedir)
A:django.utils.translation.trans_real.self._catalog->TranslationCatalog(other)
A:django.utils.translation.trans_real.localedir->os.path.join(app_config.path, 'locale')
A:django.utils.translation.trans_real.app_configs->reversed(list(apps.get_app_configs()))
A:django.utils.translation.trans_real.default_translation->DjangoTranslation(settings.LANGUAGE_CODE, domain=self.domain, localedirs=localedirs)
A:django.utils.translation.trans_real.self._info->other._info.copy()
A:django.utils.translation.trans_real._translations[language]->DjangoTranslation(language)
A:django.utils.translation.trans_real._active.value->gettext.NullTranslations()
A:django.utils.translation.trans_real.t->getattr(_active, 'value', None)
A:django.utils.translation.trans_real.lang->get_language()
A:django.utils.translation.trans_real._default->translation(settings.LANGUAGE_CODE)
A:django.utils.translation.trans_real.eol_message->message.replace('\r\n', '\n').replace('\r', '\n')
A:django.utils.translation.trans_real.translation_object->getattr(_active, 'value', _default)
A:django.utils.translation.trans_real.globalpath->os.path.join(os.path.dirname(sys.modules[settings.__module__].__file__), 'locale')
A:django.utils.translation.trans_real.locale_path->os.path.join(app_config.path, 'locale')
A:django.utils.translation.trans_real.supported_lang_codes->get_languages()
A:django.utils.translation.trans_real.regex_match->_lazy_re_compile('^/(\\w+([@-]\\w+)?)(/|$)').match(path)
A:django.utils.translation.trans_real.lang_code->request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME)
A:django.utils.translation.trans_real.accept->request.META.get('HTTP_ACCEPT_LANGUAGE', '')
A:django.utils.translation.trans_real.pieces->_lazy_re_compile('\n        ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\\*)      # "en", "en-au", "x-y-z", "es-419", "*"\n        (?:\\s*;\\s*q=(0(?:\\.\\d{,3})?|1(?:\\.0{,3})?))?  # Optional "q=1.00", "q=0.8"\n        (?:\\s*,\\s*|$)                                 # Multiple accepts per header.\n        ', re.VERBOSE).split(lang_string.lower())
A:django.utils.translation.trans_real.priority->float(priority)
django.utils.translation.trans.DjangoTranslation(self,language,domain=None,localedirs=None)
django.utils.translation.trans.DjangoTranslation.__repr__(self)
django.utils.translation.trans.DjangoTranslation._add_fallback(self,localedirs=None)
django.utils.translation.trans.DjangoTranslation._add_installed_apps_translations(self)
django.utils.translation.trans.DjangoTranslation._add_local_translations(self)
django.utils.translation.trans.DjangoTranslation._init_translation_catalog(self)
django.utils.translation.trans.DjangoTranslation._new_gnu_trans(self,localedir,use_null_fallback=True)
django.utils.translation.trans.DjangoTranslation.language(self)
django.utils.translation.trans.DjangoTranslation.merge(self,other)
django.utils.translation.trans.DjangoTranslation.ngettext(self,msgid1,msgid2,n)
django.utils.translation.trans.DjangoTranslation.to_language(self)
django.utils.translation.trans.TranslationCatalog(self,trans=None)
django.utils.translation.trans.TranslationCatalog.__contains__(self,key)
django.utils.translation.trans.TranslationCatalog.__getitem__(self,key)
django.utils.translation.trans.TranslationCatalog.__setitem__(self,key,value)
django.utils.translation.trans.TranslationCatalog.get(self,key,default=None)
django.utils.translation.trans.TranslationCatalog.items(self)
django.utils.translation.trans.TranslationCatalog.keys(self)
django.utils.translation.trans.TranslationCatalog.plural(self,msgid,num)
django.utils.translation.trans.TranslationCatalog.update(self,trans)
django.utils.translation.trans.activate(language)
django.utils.translation.trans.all_locale_paths()
django.utils.translation.trans.catalog()
django.utils.translation.trans.check_for_language(lang_code)
django.utils.translation.trans.deactivate()
django.utils.translation.trans.deactivate_all()
django.utils.translation.trans.do_ntranslate(singular,plural,number,translation_function)
django.utils.translation.trans.get_language()
django.utils.translation.trans.get_language_bidi()
django.utils.translation.trans.get_language_from_path(path,strict=False)
django.utils.translation.trans.get_language_from_request(request,check_path=False)
django.utils.translation.trans.get_languages()
django.utils.translation.trans.get_supported_language_variant(lang_code,strict=False)
django.utils.translation.trans.gettext(message)
django.utils.translation.trans.gettext_noop(message)
django.utils.translation.trans.ngettext(singular,plural,number)
django.utils.translation.trans.npgettext(context,singular,plural,number)
django.utils.translation.trans.parse_accept_lang_header(lang_string)
django.utils.translation.trans.pgettext(context,message)
django.utils.translation.trans.reset_cache(**kwargs)
django.utils.translation.trans.translation(language)
django.utils.translation.trans_real.DjangoTranslation(self,language,domain=None,localedirs=None)
django.utils.translation.trans_real.DjangoTranslation.__init__(self,language,domain=None,localedirs=None)
django.utils.translation.trans_real.DjangoTranslation.__repr__(self)
django.utils.translation.trans_real.DjangoTranslation._add_fallback(self,localedirs=None)
django.utils.translation.trans_real.DjangoTranslation._add_installed_apps_translations(self)
django.utils.translation.trans_real.DjangoTranslation._add_local_translations(self)
django.utils.translation.trans_real.DjangoTranslation._init_translation_catalog(self)
django.utils.translation.trans_real.DjangoTranslation._new_gnu_trans(self,localedir,use_null_fallback=True)
django.utils.translation.trans_real.DjangoTranslation.language(self)
django.utils.translation.trans_real.DjangoTranslation.merge(self,other)
django.utils.translation.trans_real.DjangoTranslation.ngettext(self,msgid1,msgid2,n)
django.utils.translation.trans_real.DjangoTranslation.to_language(self)
django.utils.translation.trans_real.TranslationCatalog(self,trans=None)
django.utils.translation.trans_real.TranslationCatalog.__contains__(self,key)
django.utils.translation.trans_real.TranslationCatalog.__getitem__(self,key)
django.utils.translation.trans_real.TranslationCatalog.__init__(self,trans=None)
django.utils.translation.trans_real.TranslationCatalog.__setitem__(self,key,value)
django.utils.translation.trans_real.TranslationCatalog.get(self,key,default=None)
django.utils.translation.trans_real.TranslationCatalog.items(self)
django.utils.translation.trans_real.TranslationCatalog.keys(self)
django.utils.translation.trans_real.TranslationCatalog.plural(self,msgid,num)
django.utils.translation.trans_real.TranslationCatalog.update(self,trans)
django.utils.translation.trans_real.activate(language)
django.utils.translation.trans_real.all_locale_paths()
django.utils.translation.trans_real.catalog()
django.utils.translation.trans_real.check_for_language(lang_code)
django.utils.translation.trans_real.deactivate()
django.utils.translation.trans_real.deactivate_all()
django.utils.translation.trans_real.do_ntranslate(singular,plural,number,translation_function)
django.utils.translation.trans_real.get_language()
django.utils.translation.trans_real.get_language_bidi()
django.utils.translation.trans_real.get_language_from_path(path,strict=False)
django.utils.translation.trans_real.get_language_from_request(request,check_path=False)
django.utils.translation.trans_real.get_languages()
django.utils.translation.trans_real.get_supported_language_variant(lang_code,strict=False)
django.utils.translation.trans_real.gettext(message)
django.utils.translation.trans_real.gettext_noop(message)
django.utils.translation.trans_real.ngettext(singular,plural,number)
django.utils.translation.trans_real.npgettext(context,singular,plural,number)
django.utils.translation.trans_real.parse_accept_lang_header(lang_string)
django.utils.translation.trans_real.pgettext(context,message)
django.utils.translation.trans_real.reset_cache(**kwargs)
django.utils.translation.trans_real.translation(language)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/translation/__init__.py----------------------------------------
A:django.utils.translation.__init__._trans->Trans()
A:django.utils.translation.__init__.gettext_lazy->lazy(gettext, str)
A:django.utils.translation.__init__.pgettext_lazy->lazy(pgettext, str)
A:django.utils.translation.__init__.proxy->lazy(lambda **kwargs: NumberAwareString(), NumberAwareString)(**kwargs)
A:django.utils.translation.__init__.original_kwargs->kwargs.copy()
A:django.utils.translation.__init__.number_value->self._get_number_value(rhs)
A:django.utils.translation.__init__.translated->self._translate(number_value)
A:django.utils.translation.__init__.self.old_language->get_language()
A:django.utils.translation.__init__.p->locale.find('_')
A:django.utils.translation.__init__.(language, _, country)->language.lower().partition('-')
A:django.utils.translation.__init__.(country, _, tail)->country.partition('-')
A:django.utils.translation.__init__.info->get_language_info(lang_info['fallback'][0])
A:django.utils.translation.__init__.info['name_translated']->gettext_lazy(info['name'])
A:django.utils.translation.__init__.trim_whitespace_re->_lazy_re_compile('\\s*\\n\\s*')
django.utils.translation.__init__.Trans
django.utils.translation.__init__.Trans.__getattr__(self,real_name)
django.utils.translation.__init__.TranslatorCommentWarning(SyntaxWarning)
django.utils.translation.__init__._lazy_number_unpickle(func,resultclass,number,kwargs)
django.utils.translation.__init__.activate(language)
django.utils.translation.__init__.check_for_language(lang_code)
django.utils.translation.__init__.deactivate()
django.utils.translation.__init__.deactivate_all()
django.utils.translation.__init__.get_language()
django.utils.translation.__init__.get_language_bidi()
django.utils.translation.__init__.get_language_from_path(path)
django.utils.translation.__init__.get_language_from_request(request,check_path=False)
django.utils.translation.__init__.get_language_info(lang_code)
django.utils.translation.__init__.get_supported_language_variant(lang_code,*,strict=False)
django.utils.translation.__init__.gettext(message)
django.utils.translation.__init__.gettext_noop(message)
django.utils.translation.__init__.lazy_number(func,resultclass,number=None,**kwargs)
django.utils.translation.__init__.ngettext(singular,plural,number)
django.utils.translation.__init__.ngettext_lazy(singular,plural,number=None)
django.utils.translation.__init__.npgettext(context,singular,plural,number)
django.utils.translation.__init__.npgettext_lazy(context,singular,plural,number=None)
django.utils.translation.__init__.override(self,language,deactivate=False)
django.utils.translation.__init__.override.__enter__(self)
django.utils.translation.__init__.override.__exit__(self,exc_type,exc_value,traceback)
django.utils.translation.__init__.override.__init__(self,language,deactivate=False)
django.utils.translation.__init__.pgettext(context,message)
django.utils.translation.__init__.round_away_from_one(value)
django.utils.translation.__init__.templatize(src,**kwargs)
django.utils.translation.__init__.to_language(locale)
django.utils.translation.__init__.to_locale(language)
django.utils.translation.__init__.trim_whitespace(s)
django.utils.translation.__init__.ugettext(message)
django.utils.translation.__init__.ugettext_lazy(message)
django.utils.translation.__init__.ugettext_noop(message)
django.utils.translation.__init__.ungettext(singular,plural,number)
django.utils.translation.__init__.ungettext_lazy(singular,plural,number=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/utils/translation/reloader.py----------------------------------------
A:django.utils.translation.reloader.trans_real._active->Local()
django.utils.translation.reloader.translation_file_changed(sender,file_path,**kwargs)
django.utils.translation.reloader.watch_for_translation_changes(sender,**kwargs)
django.utils.translation.translation_file_changed(sender,file_path,**kwargs)
django.utils.translation.watch_for_translation_changes(sender,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/dispatch/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/dispatch/dispatcher.py----------------------------------------
A:django.dispatch.dispatcher.logger->logging.getLogger('django.dispatch')
A:django.dispatch.dispatcher.NONE_ID->_make_id(None)
A:django.dispatch.dispatcher.NO_RECEIVERS->object()
A:django.dispatch.dispatcher.self.lock->threading.Lock()
A:django.dispatch.dispatcher.receiver->receiver()
A:django.dispatch.dispatcher.response->receiver(signal=self, sender=sender, **named)
A:django.dispatch.dispatcher.receivers->self.sender_receivers_cache.get(sender)
A:django.dispatch.dispatcher.senderkey->_make_id(sender)
django.dispatch.Signal(self,providing_args=None,use_caching=False)
django.dispatch.Signal._clear_dead_receivers(self)
django.dispatch.Signal._live_receivers(self,sender)
django.dispatch.Signal._remove_receiver(self,receiver=None)
django.dispatch.Signal.connect(self,receiver,sender=None,weak=True,dispatch_uid=None)
django.dispatch.Signal.disconnect(self,receiver=None,sender=None,dispatch_uid=None)
django.dispatch.Signal.has_listeners(self,sender=None)
django.dispatch.Signal.send(self,sender,**named)
django.dispatch.Signal.send_robust(self,sender,**named)
django.dispatch.dispatcher.Signal(self,providing_args=None,use_caching=False)
django.dispatch.dispatcher.Signal.__init__(self,providing_args=None,use_caching=False)
django.dispatch.dispatcher.Signal._clear_dead_receivers(self)
django.dispatch.dispatcher.Signal._live_receivers(self,sender)
django.dispatch.dispatcher.Signal._remove_receiver(self,receiver=None)
django.dispatch.dispatcher.Signal.connect(self,receiver,sender=None,weak=True,dispatch_uid=None)
django.dispatch.dispatcher.Signal.disconnect(self,receiver=None,sender=None,dispatch_uid=None)
django.dispatch.dispatcher.Signal.has_listeners(self,sender=None)
django.dispatch.dispatcher.Signal.send(self,sender,**named)
django.dispatch.dispatcher.Signal.send_robust(self,sender,**named)
django.dispatch.dispatcher._make_id(target)
django.dispatch.dispatcher.receiver(signal,**kwargs)
django.dispatch.receiver(signal,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/i18n.py----------------------------------------
A:django.views.i18n.next_url->request.META.get('HTTP_REFERER')
A:django.views.i18n.lang_code->request.POST.get(LANGUAGE_QUERY_PARAMETER)
A:django.views.i18n.next_trans->translate_url(next_url, lang_code)
A:django.views.i18n.response->HttpResponseRedirect(next_trans)
A:django.views.i18n.locale->get_language()
A:django.views.i18n.domain->kwargs.get('domain', self.domain)
A:django.views.i18n.packages->kwargs.get('packages', '')
A:django.views.i18n.self.translation->DjangoTranslation(locale, domain=domain, localedirs=paths)
A:django.views.i18n.context->self.get_context_data(**kwargs)
A:django.views.i18n.match->re.search('nplurals=\\s*(\\d+)', self._plural_string or '')
A:django.views.i18n.seen_keys->set()
A:django.views.i18n.template->Engine().from_string(js_catalog_template)
A:django.views.i18n.context['formats_str']->indent(json.dumps(context['formats'], sort_keys=True, indent=2))
django.views.i18n.JSONCatalog(JavaScriptCatalog)
django.views.i18n.JSONCatalog.render_to_response(self,context,**response_kwargs)
django.views.i18n.JavaScriptCatalog(View)
django.views.i18n.JavaScriptCatalog._num_plurals(self)
django.views.i18n.JavaScriptCatalog._plural_string(self)
django.views.i18n.JavaScriptCatalog.get(self,request,*args,**kwargs)
django.views.i18n.JavaScriptCatalog.get_catalog(self)
django.views.i18n.JavaScriptCatalog.get_context_data(self,**kwargs)
django.views.i18n.JavaScriptCatalog.get_paths(self,packages)
django.views.i18n.JavaScriptCatalog.get_plural(self)
django.views.i18n.JavaScriptCatalog.render_to_response(self,context,**response_kwargs)
django.views.i18n.get_formats()
django.views.i18n.set_language(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/defaults.py----------------------------------------
A:django.views.defaults.template->django.template.loader.get_template(template_name)
A:django.views.defaults.body->django.template.loader.get_template(template_name).render(Context(context))
django.views.defaults.bad_request(request,exception,template_name=ERROR_400_TEMPLATE_NAME)
django.views.defaults.page_not_found(request,exception,template_name=ERROR_404_TEMPLATE_NAME)
django.views.defaults.permission_denied(request,exception,template_name=ERROR_403_TEMPLATE_NAME)
django.views.defaults.server_error(request,template_name=ERROR_500_TEMPLATE_NAME)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/csrf.py----------------------------------------
A:django.views.csrf.t->Engine().from_string(CSRF_FAILURE_TEMPLATE)
A:django.views.csrf.c->Context(c)
django.views.csrf.csrf_failure(request,reason='',template_name=CSRF_FAILURE_TEMPLATE_NAME)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/debug.py----------------------------------------
A:django.views.debug.DEBUG_ENGINE->Engine(debug=True, libraries={'i18n': 'django.templatetags.i18n'})
A:django.views.debug.reporter->get_exception_reporter_class(request)(request, exc_type, exc_value, tb)
A:django.views.debug.html->get_exception_reporter_class(request)(request, exc_type, exc_value, tb).get_traceback_html()
A:django.views.debug.text->get_exception_reporter_class(request)(request, exc_type, exc_value, tb).get_traceback_text()
A:django.views.debug.default_filter->get_default_exception_reporter_filter()
A:django.views.debug.default_exception_reporter_class->import_string(settings.DEFAULT_EXCEPTION_REPORTER)
A:django.views.debug.hidden_settings->_lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)
A:django.views.debug.is_sensitive->self.hidden_settings.search(key)
A:django.views.debug.cleansed->request.POST.copy()
A:django.views.debug.settings_dict[k]->self.cleanse_setting(k, getattr(settings, k))
A:django.views.debug.sensitive_post_parameters->getattr(request, 'sensitive_post_parameters', [])
A:django.views.debug.multivaluedict->multivaluedict.copy().copy()
A:django.views.debug.is_multivalue_dict->isinstance(value, MultiValueDict)
A:django.views.debug.value->self.cleanse_special_types(request, value)
A:django.views.debug.sensitive_variables->getattr(wrapper, 'sensitive_variables', None)
A:django.views.debug.cleansed[name]->self.cleanse_special_types(request, value)
A:django.views.debug.self.filter->get_exception_reporter_filter(self.request)
A:django.views.debug.self.template_info->getattr(self.exc_value, 'template_debug', None)
A:django.views.debug.frames->self.get_traceback_frames()
A:django.views.debug.v->pprint(v)
A:django.views.debug.start->getattr(self.exc_value, 'start', None)
A:django.views.debug.end->getattr(self.exc_value, 'end', None)
A:django.views.debug.unicode_hint->force_str(unicode_str[max(start - 5, 0):min(end + 5, len(unicode_str))], 'ascii', errors='replace')
A:django.views.debug.user_str->str(self.request.user)
A:django.views.debug.c['request_GET_items']->self.request.GET.items()
A:django.views.debug.c['request_FILES_items']->self.request.FILES.items()
A:django.views.debug.c['request_COOKIES_items']->self.request.COOKIES.items()
A:django.views.debug.c['exception_value']->str(self.exc_value)
A:django.views.debug.t->Engine(debug=True, libraries={'i18n': 'django.templatetags.i18n'}).from_string(fh.read())
A:django.views.debug.c->Context({'version': get_docs_version()})
A:django.views.debug.source->self._get_source(filename, loader, module_name)
A:django.views.debug.match->re.search(b'coding[:=]\\s*([-\\w.]+)', line)
A:django.views.debug.encoding->match[1].decode('ascii')
A:django.views.debug.lower_bound->max(0, lineno - context_lines)
A:django.views.debug.explicit->getattr(exc_value, '__cause__', None)
A:django.views.debug.suppress_context->getattr(exc_value, '__suppress_context__', None)
A:django.views.debug.implicit->getattr(exc_value, '__context__', None)
A:django.views.debug.exc_value->exceptions.pop()
A:django.views.debug.exc_cause->self._get_explicit_or_implicit_cause(exc_value)
A:django.views.debug.exc_cause_explicit->getattr(exc_value, '__cause__', True)
A:django.views.debug.loader->tb.tb_frame.f_globals.get('__loader__')
A:django.views.debug.(pre_context_lineno, pre_context, context_line, post_context)->self._get_lines_from_file(filename, lineno, 7, loader, module_name)
A:django.views.debug.urlconf->getattr(request, 'urlconf', settings.ROOT_URLCONF)
A:django.views.debug.resolver_match->resolve(request.path)
A:django.views.debug.reporter_filter->get_default_exception_reporter_filter()
django.views.debug.CallableSettingWrapper(self,callable_setting)
django.views.debug.CallableSettingWrapper.__init__(self,callable_setting)
django.views.debug.CallableSettingWrapper.__repr__(self)
django.views.debug.ExceptionCycleWarning(UserWarning)
django.views.debug.ExceptionReporter(self,request,exc_type,exc_value,tb,is_email=False)
django.views.debug.ExceptionReporter.__init__(self,request,exc_type,exc_value,tb,is_email=False)
django.views.debug.ExceptionReporter._get_explicit_or_implicit_cause(self,exc_value)
django.views.debug.ExceptionReporter._get_lines_from_file(self,filename,lineno,context_lines,loader=None,module_name=None)
django.views.debug.ExceptionReporter._get_source(self,filename,loader,module_name)
django.views.debug.ExceptionReporter.get_exception_traceback_frames(self,exc_value,tb)
django.views.debug.ExceptionReporter.get_traceback_data(self)
django.views.debug.ExceptionReporter.get_traceback_frames(self)
django.views.debug.ExceptionReporter.get_traceback_html(self)
django.views.debug.ExceptionReporter.get_traceback_text(self)
django.views.debug.ExceptionReporter.html_template_path(self)
django.views.debug.ExceptionReporter.text_template_path(self)
django.views.debug.SafeExceptionReporterFilter
django.views.debug.SafeExceptionReporterFilter.cleanse_setting(self,key,value)
django.views.debug.SafeExceptionReporterFilter.cleanse_special_types(self,request,value)
django.views.debug.SafeExceptionReporterFilter.get_cleansed_multivaluedict(self,request,multivaluedict)
django.views.debug.SafeExceptionReporterFilter.get_post_parameters(self,request)
django.views.debug.SafeExceptionReporterFilter.get_safe_request_meta(self,request)
django.views.debug.SafeExceptionReporterFilter.get_safe_settings(self)
django.views.debug.SafeExceptionReporterFilter.get_traceback_frame_variables(self,request,tb_frame)
django.views.debug.SafeExceptionReporterFilter.is_active(self,request)
django.views.debug.default_urlconf(request)
django.views.debug.get_default_exception_reporter_filter()
django.views.debug.get_exception_reporter_class(request)
django.views.debug.get_exception_reporter_filter(request)
django.views.debug.technical_404_response(request,exception)
django.views.debug.technical_500_response(request,exc_type,exc_value,tb,status_code=500)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/static.py----------------------------------------
A:django.views.static.path->posixpath.normpath(path).lstrip('/')
A:django.views.static.fullpath->Path(safe_join(document_root, path))
A:django.views.static.statobj->Path(safe_join(document_root, path)).stat()
A:django.views.static.(content_type, encoding)->mimetypes.guess_type(str(fullpath))
A:django.views.static.response->FileResponse(fullpath.open('rb'), content_type=content_type)
A:django.views.static.response.headers['Last-Modified']->http_date(statobj.st_mtime)
A:django.views.static.template_translatable->gettext_lazy('Index of %(directory)s')
A:django.views.static.t->Engine(libraries={'i18n': 'django.templatetags.i18n'}).from_string(DEFAULT_DIRECTORY_INDEX_TEMPLATE)
A:django.views.static.c->Context()
A:django.views.static.url->str(f.relative_to(fullpath))
A:django.views.static.matches->re.match('^([^;]+)(; length=([0-9]+))?$', header, re.IGNORECASE)
A:django.views.static.header_mtime->parse_http_date(matches[1])
django.views.static.directory_index(path,fullpath)
django.views.static.serve(request,path,document_root=None,show_indexes=False)
django.views.static.was_modified_since(header=None,mtime=0,size=0)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/cache.py----------------------------------------
A:django.views.decorators.cache.response->view_func(request, *args, **kwargs)
django.views.decorators.cache.cache_control(**kwargs)
django.views.decorators.cache.cache_page(timeout,*,cache=None,key_prefix=None)
django.views.decorators.cache.never_cache(view_func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/gzip.py----------------------------------------
A:django.views.decorators.gzip.gzip_page->decorator_from_middleware(GZipMiddleware)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/common.py----------------------------------------
django.views.decorators.common.no_append_slash(view_func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/csrf.py----------------------------------------
A:django.views.decorators.csrf.csrf_protect->decorator_from_middleware(CsrfViewMiddleware)
A:django.views.decorators.csrf.requires_csrf_token->decorator_from_middleware(_EnsureCsrfToken)
A:django.views.decorators.csrf.retval->super().process_view(request, callback, callback_args, callback_kwargs)
A:django.views.decorators.csrf.ensure_csrf_cookie->decorator_from_middleware(_EnsureCsrfCookie)
django.views.decorators.csrf._EnsureCsrfCookie(CsrfViewMiddleware)
django.views.decorators.csrf._EnsureCsrfCookie._reject(self,request,reason)
django.views.decorators.csrf._EnsureCsrfCookie.process_view(self,request,callback,callback_args,callback_kwargs)
django.views.decorators.csrf._EnsureCsrfToken(CsrfViewMiddleware)
django.views.decorators.csrf._EnsureCsrfToken._reject(self,request,reason)
django.views.decorators.csrf.csrf_exempt(view_func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/debug.py----------------------------------------
django.views.decorators.debug.sensitive_post_parameters(*parameters)
django.views.decorators.debug.sensitive_variables(*variables)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/http.py----------------------------------------
A:django.views.decorators.http.conditional_page->decorator_from_middleware(ConditionalGetMiddleware)
A:django.views.decorators.http.response->func(request, *args, **kwargs)
A:django.views.decorators.http.require_GET->require_http_methods(['GET'])
A:django.views.decorators.http.require_POST->require_http_methods(['POST'])
A:django.views.decorators.http.require_safe->require_http_methods(['GET', 'HEAD'])
A:django.views.decorators.http.dt->last_modified_func(request, *args, **kwargs)
A:django.views.decorators.http.res_last_modified->get_last_modified()
A:django.views.decorators.http.response.headers['Last-Modified']->http_date(res_last_modified)
django.views.decorators.http.condition(etag_func=None,last_modified_func=None)
django.views.decorators.http.etag(etag_func)
django.views.decorators.http.last_modified(last_modified_func)
django.views.decorators.http.require_http_methods(request_method_list)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/clickjacking.py----------------------------------------
A:django.views.decorators.clickjacking.resp->view_func(*args, **kwargs)
django.views.decorators.clickjacking.xframe_options_deny(view_func)
django.views.decorators.clickjacking.xframe_options_exempt(view_func)
django.views.decorators.clickjacking.xframe_options_sameorigin(view_func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/decorators/vary.py----------------------------------------
A:django.views.decorators.vary.response->func(*args, **kwargs)
django.views.decorators.vary.vary_on_cookie(func)
django.views.decorators.vary.vary_on_headers(*headers)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/edit.py----------------------------------------
A:django.views.generic.edit.form_class->self.get_form_class()
A:django.views.generic.edit.kwargs['form']->self.get_form()
A:django.views.generic.edit.kwargs->super().get_form_kwargs()
A:django.views.generic.edit.url->self.object.get_absolute_url()
A:django.views.generic.edit.self.object->self.get_object()
A:django.views.generic.edit.form->self.get_form()
A:django.views.generic.edit.success_url->self.get_success_url()
django.views.generic.CreateView(SingleObjectTemplateResponseMixin,BaseCreateView)
django.views.generic.DeleteView(SingleObjectTemplateResponseMixin,BaseDeleteView)
django.views.generic.FormView(TemplateResponseMixin,BaseFormView)
django.views.generic.UpdateView(SingleObjectTemplateResponseMixin,BaseUpdateView)
django.views.generic.edit.BaseCreateView(ModelFormMixin,ProcessFormView)
django.views.generic.edit.BaseCreateView.get(self,request,*args,**kwargs)
django.views.generic.edit.BaseCreateView.post(self,request,*args,**kwargs)
django.views.generic.edit.BaseDeleteView(DeletionMixin,BaseDetailView)
django.views.generic.edit.BaseFormView(FormMixin,ProcessFormView)
django.views.generic.edit.BaseUpdateView(ModelFormMixin,ProcessFormView)
django.views.generic.edit.BaseUpdateView.get(self,request,*args,**kwargs)
django.views.generic.edit.BaseUpdateView.post(self,request,*args,**kwargs)
django.views.generic.edit.CreateView(SingleObjectTemplateResponseMixin,BaseCreateView)
django.views.generic.edit.DeleteView(SingleObjectTemplateResponseMixin,BaseDeleteView)
django.views.generic.edit.DeletionMixin
django.views.generic.edit.DeletionMixin.delete(self,request,*args,**kwargs)
django.views.generic.edit.DeletionMixin.get_success_url(self)
django.views.generic.edit.DeletionMixin.post(self,request,*args,**kwargs)
django.views.generic.edit.FormMixin(ContextMixin)
django.views.generic.edit.FormMixin.form_invalid(self,form)
django.views.generic.edit.FormMixin.form_valid(self,form)
django.views.generic.edit.FormMixin.get_context_data(self,**kwargs)
django.views.generic.edit.FormMixin.get_form(self,form_class=None)
django.views.generic.edit.FormMixin.get_form_class(self)
django.views.generic.edit.FormMixin.get_form_kwargs(self)
django.views.generic.edit.FormMixin.get_initial(self)
django.views.generic.edit.FormMixin.get_prefix(self)
django.views.generic.edit.FormMixin.get_success_url(self)
django.views.generic.edit.FormView(TemplateResponseMixin,BaseFormView)
django.views.generic.edit.ModelFormMixin(FormMixin,SingleObjectMixin)
django.views.generic.edit.ModelFormMixin.form_valid(self,form)
django.views.generic.edit.ModelFormMixin.get_form_class(self)
django.views.generic.edit.ModelFormMixin.get_form_kwargs(self)
django.views.generic.edit.ModelFormMixin.get_success_url(self)
django.views.generic.edit.ProcessFormView(View)
django.views.generic.edit.ProcessFormView.get(self,request,*args,**kwargs)
django.views.generic.edit.ProcessFormView.post(self,request,*args,**kwargs)
django.views.generic.edit.ProcessFormView.put(self,*args,**kwargs)
django.views.generic.edit.UpdateView(SingleObjectTemplateResponseMixin,BaseUpdateView)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/detail.py----------------------------------------
A:django.views.generic.detail.queryset->queryset.filter(**{slug_field: slug}).filter(**{slug_field: slug})
A:django.views.generic.detail.pk->self.kwargs.get(self.pk_url_kwarg)
A:django.views.generic.detail.slug->self.kwargs.get(self.slug_url_kwarg)
A:django.views.generic.detail.slug_field->self.get_slug_field()
A:django.views.generic.detail.obj->queryset.filter(**{slug_field: slug}).filter(**{slug_field: slug}).get()
A:django.views.generic.detail.context_object_name->self.get_context_object_name(self.object)
A:django.views.generic.detail.self.object->self.get_object()
A:django.views.generic.detail.context->self.get_context_data(object=self.object)
A:django.views.generic.detail.names->super().get_template_names()
A:django.views.generic.detail.name->getattr(self.object, self.template_name_field, None)
django.views.generic.DetailView(SingleObjectTemplateResponseMixin,BaseDetailView)
django.views.generic.detail.BaseDetailView(SingleObjectMixin,View)
django.views.generic.detail.BaseDetailView.get(self,request,*args,**kwargs)
django.views.generic.detail.DetailView(SingleObjectTemplateResponseMixin,BaseDetailView)
django.views.generic.detail.SingleObjectMixin(ContextMixin)
django.views.generic.detail.SingleObjectMixin.get_context_data(self,**kwargs)
django.views.generic.detail.SingleObjectMixin.get_context_object_name(self,obj)
django.views.generic.detail.SingleObjectMixin.get_object(self,queryset=None)
django.views.generic.detail.SingleObjectMixin.get_queryset(self)
django.views.generic.detail.SingleObjectMixin.get_slug_field(self)
django.views.generic.detail.SingleObjectTemplateResponseMixin(TemplateResponseMixin)
django.views.generic.detail.SingleObjectTemplateResponseMixin.get_template_names(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/base.py----------------------------------------
A:django.views.generic.base.logger->logging.getLogger('django.request')
A:django.views.generic.base.self->cls(**initkwargs)
A:django.views.generic.base.handler->getattr(self, request.method.lower(), self.http_method_not_allowed)
A:django.views.generic.base.response->HttpResponse()
A:django.views.generic.base.response.headers['Allow']->', '.join(self._allowed_methods())
A:django.views.generic.base.context->cls(**initkwargs).get_context_data(**kwargs)
A:django.views.generic.base.url->cls(**initkwargs).get_redirect_url(*args, **kwargs)
A:django.views.generic.base.args->cls(**initkwargs).request.META.get('QUERY_STRING', '')
django.views.generic.RedirectView(View)
django.views.generic.RedirectView.delete(self,request,*args,**kwargs)
django.views.generic.RedirectView.get(self,request,*args,**kwargs)
django.views.generic.RedirectView.get_redirect_url(self,*args,**kwargs)
django.views.generic.RedirectView.head(self,request,*args,**kwargs)
django.views.generic.RedirectView.options(self,request,*args,**kwargs)
django.views.generic.RedirectView.patch(self,request,*args,**kwargs)
django.views.generic.RedirectView.post(self,request,*args,**kwargs)
django.views.generic.RedirectView.put(self,request,*args,**kwargs)
django.views.generic.TemplateView(TemplateResponseMixin,ContextMixin,View)
django.views.generic.TemplateView.get(self,request,*args,**kwargs)
django.views.generic.View(self,**kwargs)
django.views.generic.View._allowed_methods(self)
django.views.generic.View.as_view(cls,**initkwargs)
django.views.generic.View.dispatch(self,request,*args,**kwargs)
django.views.generic.View.http_method_not_allowed(self,request,*args,**kwargs)
django.views.generic.View.options(self,request,*args,**kwargs)
django.views.generic.View.setup(self,request,*args,**kwargs)
django.views.generic.base.ContextMixin
django.views.generic.base.ContextMixin.get_context_data(self,**kwargs)
django.views.generic.base.RedirectView(View)
django.views.generic.base.RedirectView.delete(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.get(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.get_redirect_url(self,*args,**kwargs)
django.views.generic.base.RedirectView.head(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.options(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.patch(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.post(self,request,*args,**kwargs)
django.views.generic.base.RedirectView.put(self,request,*args,**kwargs)
django.views.generic.base.TemplateResponseMixin
django.views.generic.base.TemplateResponseMixin.get_template_names(self)
django.views.generic.base.TemplateResponseMixin.render_to_response(self,context,**response_kwargs)
django.views.generic.base.TemplateView(TemplateResponseMixin,ContextMixin,View)
django.views.generic.base.TemplateView.get(self,request,*args,**kwargs)
django.views.generic.base.View(self,**kwargs)
django.views.generic.base.View.__init__(self,**kwargs)
django.views.generic.base.View._allowed_methods(self)
django.views.generic.base.View.as_view(cls,**initkwargs)
django.views.generic.base.View.dispatch(self,request,*args,**kwargs)
django.views.generic.base.View.http_method_not_allowed(self,request,*args,**kwargs)
django.views.generic.base.View.options(self,request,*args,**kwargs)
django.views.generic.base.View.setup(self,request,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/__init__.py----------------------------------------
django.views.generic.__init__.GenericViewError(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/list.py----------------------------------------
A:django.views.generic.list.queryset->queryset.order_by(*ordering).order_by(*ordering)
A:django.views.generic.list.ordering->self.get_ordering()
A:django.views.generic.list.paginator->self.get_paginator(queryset, page_size, orphans=self.get_paginate_orphans(), allow_empty_first_page=self.get_allow_empty())
A:django.views.generic.list.page_number->int(page)
A:django.views.generic.list.page->self.get_paginator(queryset, page_size, orphans=self.get_paginate_orphans(), allow_empty_first_page=self.get_allow_empty()).page(page_number)
A:django.views.generic.list.page_size->self.get_paginate_by(queryset)
A:django.views.generic.list.context_object_name->self.get_context_object_name(queryset)
A:django.views.generic.list.(paginator, page, queryset, is_paginated)->self.paginate_queryset(queryset, page_size)
A:django.views.generic.list.self.object_list->self.get_queryset()
A:django.views.generic.list.allow_empty->self.get_allow_empty()
A:django.views.generic.list.context->self.get_context_data()
A:django.views.generic.list.names->super().get_template_names()
django.views.generic.ListView(MultipleObjectTemplateResponseMixin,BaseListView)
django.views.generic.list.BaseListView(MultipleObjectMixin,View)
django.views.generic.list.BaseListView.get(self,request,*args,**kwargs)
django.views.generic.list.ListView(MultipleObjectTemplateResponseMixin,BaseListView)
django.views.generic.list.MultipleObjectMixin(ContextMixin)
django.views.generic.list.MultipleObjectMixin.get_allow_empty(self)
django.views.generic.list.MultipleObjectMixin.get_context_data(self,*,object_list=None,**kwargs)
django.views.generic.list.MultipleObjectMixin.get_context_object_name(self,object_list)
django.views.generic.list.MultipleObjectMixin.get_ordering(self)
django.views.generic.list.MultipleObjectMixin.get_paginate_by(self,queryset)
django.views.generic.list.MultipleObjectMixin.get_paginate_orphans(self)
django.views.generic.list.MultipleObjectMixin.get_paginator(self,queryset,per_page,orphans=0,allow_empty_first_page=True,**kwargs)
django.views.generic.list.MultipleObjectMixin.get_queryset(self)
django.views.generic.list.MultipleObjectMixin.paginate_queryset(self,queryset,page_size)
django.views.generic.list.MultipleObjectTemplateResponseMixin(TemplateResponseMixin)
django.views.generic.list.MultipleObjectTemplateResponseMixin.get_template_names(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/views/generic/dates.py----------------------------------------
A:django.views.generic.dates.week_format->self.get_week_format()
A:django.views.generic.dates.field->model._meta.get_field(self.get_date_field())
A:django.views.generic.dates.value->django.utils.timezone.make_aware(value)
A:django.views.generic.dates.date_field->generic_view.get_date_field()
A:django.views.generic.dates.since->self._make_date_lookup_arg(date)
A:django.views.generic.dates.until->self._make_date_lookup_arg(self._get_next_week(date))
A:django.views.generic.dates.(self.date_list, self.object_list, extra_context)->self.get_dated_items()
A:django.views.generic.dates.context->self.get_context_data(object_list=self.object_list, date_list=self.date_list, **extra_context)
A:django.views.generic.dates.qs->generic_view.get_queryset().filter(**lookup).order_by(ordering)
A:django.views.generic.dates.allow_future->generic_view.get_allow_future()
A:django.views.generic.dates.allow_empty->generic_view.get_allow_empty()
A:django.views.generic.dates.paginate_by->self.get_paginate_by(qs)
A:django.views.generic.dates.date_type->self.get_date_list_period()
A:django.views.generic.dates.date_list->self.get_date_list(qs)
A:django.views.generic.dates.year->self.get_year()
A:django.views.generic.dates.date->_date_from_string(year, self.get_year_format(), month, self.get_month_format(), day, self.get_day_format())
A:django.views.generic.dates.month->self.get_month()
A:django.views.generic.dates.week->self.get_week()
A:django.views.generic.dates.year_format->self.get_year_format()
A:django.views.generic.dates.day->self.get_day()
A:django.views.generic.dates.lookup_kwargs->self._make_single_date_lookup(date)
A:django.views.generic.dates.get_current->getattr(generic_view, '_get_current_%s' % period)
A:django.views.generic.dates.get_next->getattr(generic_view, '_get_next_%s' % period)
A:django.views.generic.dates.result->result.date().date()
A:django.views.generic.dates.now->timezone_today()
django.views.generic.ArchiveIndexView(MultipleObjectTemplateResponseMixin,BaseArchiveIndexView)
django.views.generic.DateDetailView(SingleObjectTemplateResponseMixin,BaseDateDetailView)
django.views.generic.DayArchiveView(MultipleObjectTemplateResponseMixin,BaseDayArchiveView)
django.views.generic.MonthArchiveView(MultipleObjectTemplateResponseMixin,BaseMonthArchiveView)
django.views.generic.TodayArchiveView(MultipleObjectTemplateResponseMixin,BaseTodayArchiveView)
django.views.generic.WeekArchiveView(MultipleObjectTemplateResponseMixin,BaseWeekArchiveView)
django.views.generic.YearArchiveView(MultipleObjectTemplateResponseMixin,BaseYearArchiveView)
django.views.generic.dates.ArchiveIndexView(MultipleObjectTemplateResponseMixin,BaseArchiveIndexView)
django.views.generic.dates.BaseArchiveIndexView(BaseDateListView)
django.views.generic.dates.BaseArchiveIndexView.get_dated_items(self)
django.views.generic.dates.BaseDateDetailView(YearMixin,MonthMixin,DayMixin,DateMixin,BaseDetailView)
django.views.generic.dates.BaseDateDetailView.get_object(self,queryset=None)
django.views.generic.dates.BaseDateListView(MultipleObjectMixin,DateMixin,View)
django.views.generic.dates.BaseDateListView.get(self,request,*args,**kwargs)
django.views.generic.dates.BaseDateListView.get_date_list(self,queryset,date_type=None,ordering='ASC')
django.views.generic.dates.BaseDateListView.get_date_list_period(self)
django.views.generic.dates.BaseDateListView.get_dated_items(self)
django.views.generic.dates.BaseDateListView.get_dated_queryset(self,**lookup)
django.views.generic.dates.BaseDateListView.get_ordering(self)
django.views.generic.dates.BaseDayArchiveView(YearMixin,MonthMixin,DayMixin,BaseDateListView)
django.views.generic.dates.BaseDayArchiveView._get_dated_items(self,date)
django.views.generic.dates.BaseDayArchiveView.get_dated_items(self)
django.views.generic.dates.BaseMonthArchiveView(YearMixin,MonthMixin,BaseDateListView)
django.views.generic.dates.BaseMonthArchiveView.get_dated_items(self)
django.views.generic.dates.BaseTodayArchiveView(BaseDayArchiveView)
django.views.generic.dates.BaseTodayArchiveView.get_dated_items(self)
django.views.generic.dates.BaseWeekArchiveView(YearMixin,WeekMixin,BaseDateListView)
django.views.generic.dates.BaseWeekArchiveView.get_dated_items(self)
django.views.generic.dates.BaseYearArchiveView(YearMixin,BaseDateListView)
django.views.generic.dates.BaseYearArchiveView.get_dated_items(self)
django.views.generic.dates.BaseYearArchiveView.get_make_object_list(self)
django.views.generic.dates.DateDetailView(SingleObjectTemplateResponseMixin,BaseDateDetailView)
django.views.generic.dates.DateMixin
django.views.generic.dates.DateMixin._make_date_lookup_arg(self,value)
django.views.generic.dates.DateMixin._make_single_date_lookup(self,date)
django.views.generic.dates.DateMixin.get_allow_future(self)
django.views.generic.dates.DateMixin.get_date_field(self)
django.views.generic.dates.DateMixin.uses_datetime_field(self)
django.views.generic.dates.DayArchiveView(MultipleObjectTemplateResponseMixin,BaseDayArchiveView)
django.views.generic.dates.DayMixin
django.views.generic.dates.DayMixin._get_current_day(self,date)
django.views.generic.dates.DayMixin._get_next_day(self,date)
django.views.generic.dates.DayMixin.get_day(self)
django.views.generic.dates.DayMixin.get_day_format(self)
django.views.generic.dates.DayMixin.get_next_day(self,date)
django.views.generic.dates.DayMixin.get_previous_day(self,date)
django.views.generic.dates.MonthArchiveView(MultipleObjectTemplateResponseMixin,BaseMonthArchiveView)
django.views.generic.dates.MonthMixin
django.views.generic.dates.MonthMixin._get_current_month(self,date)
django.views.generic.dates.MonthMixin._get_next_month(self,date)
django.views.generic.dates.MonthMixin.get_month(self)
django.views.generic.dates.MonthMixin.get_month_format(self)
django.views.generic.dates.MonthMixin.get_next_month(self,date)
django.views.generic.dates.MonthMixin.get_previous_month(self,date)
django.views.generic.dates.TodayArchiveView(MultipleObjectTemplateResponseMixin,BaseTodayArchiveView)
django.views.generic.dates.WeekArchiveView(MultipleObjectTemplateResponseMixin,BaseWeekArchiveView)
django.views.generic.dates.WeekMixin
django.views.generic.dates.WeekMixin._get_current_week(self,date)
django.views.generic.dates.WeekMixin._get_next_week(self,date)
django.views.generic.dates.WeekMixin._get_weekday(self,date)
django.views.generic.dates.WeekMixin.get_next_week(self,date)
django.views.generic.dates.WeekMixin.get_previous_week(self,date)
django.views.generic.dates.WeekMixin.get_week(self)
django.views.generic.dates.WeekMixin.get_week_format(self)
django.views.generic.dates.YearArchiveView(MultipleObjectTemplateResponseMixin,BaseYearArchiveView)
django.views.generic.dates.YearMixin
django.views.generic.dates.YearMixin._get_current_year(self,date)
django.views.generic.dates.YearMixin._get_next_year(self,date)
django.views.generic.dates.YearMixin.get_next_year(self,date)
django.views.generic.dates.YearMixin.get_previous_year(self,date)
django.views.generic.dates.YearMixin.get_year(self)
django.views.generic.dates.YearMixin.get_year_format(self)
django.views.generic.dates._date_from_string(year,year_format,month='',month_format='',day='',day_format='',delim='__')
django.views.generic.dates._get_next_prev(generic_view,date,is_previous,period)
django.views.generic.dates.timezone_today()


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/selenium.py----------------------------------------
A:django.test.selenium.test_class->super().__new__(cls, name, bases, attrs)
A:django.test.selenium.browser_test_class->cls.__new__(cls, '%s%s' % (capfirst(browser), name), (test_class,), {'browser': browser, 'host': host, 'external_host': cls.external_host, '__module__': test_class.__module__})
A:django.test.selenium.options->self.import_options(self.browser)()
A:django.test.selenium.cls.selenium->cls.create_webdriver()
django.test.selenium.SeleniumTestCase(LiveServerTestCase,metaclass=SeleniumTestCaseBase)
django.test.selenium.SeleniumTestCase._tearDownClassInternal(cls)
django.test.selenium.SeleniumTestCase.allowed_host(cls)
django.test.selenium.SeleniumTestCase.disable_implicit_wait(self)
django.test.selenium.SeleniumTestCase.live_server_url(cls)
django.test.selenium.SeleniumTestCase.setUpClass(cls)
django.test.selenium.SeleniumTestCaseBase(cls,name,bases,attrs)
django.test.selenium.SeleniumTestCaseBase.__new__(cls,name,bases,attrs)
django.test.selenium.SeleniumTestCaseBase.create_options(self)
django.test.selenium.SeleniumTestCaseBase.create_webdriver(self)
django.test.selenium.SeleniumTestCaseBase.get_capability(cls,browser)
django.test.selenium.SeleniumTestCaseBase.import_options(cls,browser)
django.test.selenium.SeleniumTestCaseBase.import_webdriver(cls,browser)


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/utils.py----------------------------------------
A:django.test.utils.TZ_SUPPORT->hasattr(time, 'tzset')
A:django.test.utils.saved_data->SimpleNamespace()
A:django.test.utils.time_keeper->NullTimeKeeper()
A:django.test.utils.(test_databases, mirrored_aliases)->get_unique_databases_and_mirrors(aliases)
A:django.test.utils.resolved_databases->set()
A:django.test.utils.all_deps->set()
A:django.test.utils.default_sig->connections[DEFAULT_DB_ALIAS].creation.test_db_signature()
A:django.test.utils.item->dict(dependency_ordered(test_databases.items(), dependencies)).setdefault(connection.creation.test_db_signature(), (connection.settings_dict['NAME'], []))
A:django.test.utils.dependencies[alias]->test_settings.get('DEPENDENCIES', [DEFAULT_DB_ALIAS])
A:django.test.utils.test_databases->dict(dependency_ordered(test_databases.items(), dependencies))
A:django.test.utils.test_path->test_runner_class.split('.')
A:django.test.utils.test_module_name->'.'.join(test_path[:-1])
A:django.test.utils.test_module->__import__(test_module_name, {}, {}, test_path[-1])
A:django.test.utils.context->self.enable()
A:django.test.utils.override->UserSettingsHolder(settings._wrapped)
A:django.test.utils.new_value->getattr(settings, key, None)
A:django.test.utils.responses_for_setting->django.test.signals.setting_changed.send_robust(sender=settings._wrapped.__class__, setting=key, value=new_value, enter=False)
A:django.test.utils.self.operations->list(kwargs.items())
A:django.test.utils.value->list(getattr(settings, name, []))
A:django.test.utils.self.registry.registered_checks->set()
A:django.test.utils.self.registry.deployment_checks->set()
A:django.test.utils._norm_whitespace_re->re.compile('[ \\t\\n][ \\t\\n]+')
A:django.test.utils.want_children->children(want_element)
A:django.test.utils.got_children->children(got_element)
A:django.test.utils.want->want.strip().replace('\\n', '\n').strip().replace('\\n', '\n')
A:django.test.utils.got->got.strip().replace('\\n', '\n').strip().replace('\\n', '\n')
A:django.test.utils.want_root->first_node(parseString(want))
A:django.test.utils.got_root->first_node(parseString(got))
A:django.test.utils.self.initial_queries->len(self.connection.queries_log)
A:django.test.utils.self.final_queries->len(self.connection.queries_log)
A:django.test.utils.self.catch_warnings->warnings.catch_warnings()
A:django.test.utils.requires_tz_support->skipUnless(TZ_SUPPORT, "This test relies on the ability to run a program in an arbitrary time zone, but your operating system isn't able to do that.")
A:django.test.utils.orig_stdout->getattr(sys, stream_name)
A:django.test.utils.test_func->skipIf(jinja2 is None, 'this test requires jinja2')(test_func)
A:django.test.utils.self.old_prefix->get_script_prefix()
A:django.test.utils.self.logger->logging.getLogger('django')
A:django.test.utils.self.logger_output->StringIO()
A:django.test.utils.apps->Apps(self.installed_apps)
A:django.test.utils.self.records->collections.defaultdict(list)
A:django.test.utils.start_time->time.perf_counter()
A:django.test.utils.obj.tags->obj.tags.union(tags)
django.test.ignore_warnings(self,**kwargs)
django.test.ignore_warnings.disable(self)
django.test.ignore_warnings.enable(self)
django.test.modify_settings(self,*args,**kwargs)
django.test.modify_settings.enable(self)
django.test.modify_settings.save_options(self,test_func)
django.test.override_settings(self,**kwargs)
django.test.override_settings.decorate_class(self,cls)
django.test.override_settings.disable(self)
django.test.override_settings.enable(self)
django.test.override_settings.save_options(self,test_func)
django.test.override_system_checks(self,new_checks,deployment_checks=None)
django.test.override_system_checks.disable(self)
django.test.override_system_checks.enable(self)
django.test.tag(*tags)
django.test.utils.Approximate(self,val,places=7)
django.test.utils.Approximate.__eq__(self,other)
django.test.utils.Approximate.__init__(self,val,places=7)
django.test.utils.Approximate.__repr__(self)
django.test.utils.CaptureQueriesContext(self,connection)
django.test.utils.CaptureQueriesContext.__enter__(self)
django.test.utils.CaptureQueriesContext.__exit__(self,exc_type,exc_value,traceback)
django.test.utils.CaptureQueriesContext.__getitem__(self,index)
django.test.utils.CaptureQueriesContext.__init__(self,connection)
django.test.utils.CaptureQueriesContext.__iter__(self)
django.test.utils.CaptureQueriesContext.__len__(self)
django.test.utils.CaptureQueriesContext.captured_queries(self)
django.test.utils.ContextList(list)
django.test.utils.ContextList.__contains__(self,key)
django.test.utils.ContextList.__getitem__(self,key)
django.test.utils.ContextList.get(self,key,default=None)
django.test.utils.ContextList.keys(self)
django.test.utils.LoggingCaptureMixin
django.test.utils.LoggingCaptureMixin.setUp(self)
django.test.utils.LoggingCaptureMixin.tearDown(self)
django.test.utils.NullTimeKeeper
django.test.utils.NullTimeKeeper.print_results(self)
django.test.utils.NullTimeKeeper.timed(self,name)
django.test.utils.TestContextDecorator(self,attr_name=None,kwarg_name=None)
django.test.utils.TestContextDecorator.__enter__(self)
django.test.utils.TestContextDecorator.__exit__(self,exc_type,exc_value,traceback)
django.test.utils.TestContextDecorator.__init__(self,attr_name=None,kwarg_name=None)
django.test.utils.TestContextDecorator.decorate_callable(self,func)
django.test.utils.TestContextDecorator.decorate_class(self,cls)
django.test.utils.TestContextDecorator.disable(self)
django.test.utils.TestContextDecorator.enable(self)
django.test.utils.TimeKeeper(self)
django.test.utils.TimeKeeper.__init__(self)
django.test.utils.TimeKeeper.print_results(self)
django.test.utils.TimeKeeper.timed(self,name)
django.test.utils._TestState
django.test.utils.captured_output(stream_name)
django.test.utils.captured_stderr()
django.test.utils.captured_stdin()
django.test.utils.captured_stdout()
django.test.utils.compare_xml(want,got)
django.test.utils.dependency_ordered(test_databases,dependencies)
django.test.utils.extend_sys_path(*paths)
django.test.utils.freeze_time(t)
django.test.utils.get_runner(settings,test_runner_class=None)
django.test.utils.get_unique_databases_and_mirrors(aliases=None)
django.test.utils.ignore_warnings(self,**kwargs)
django.test.utils.ignore_warnings.__init__(self,**kwargs)
django.test.utils.ignore_warnings.disable(self)
django.test.utils.ignore_warnings.enable(self)
django.test.utils.instrumented_test_render(self,context)
django.test.utils.isolate_apps(self,*installed_apps,**kwargs)
django.test.utils.isolate_apps.__init__(self,*installed_apps,**kwargs)
django.test.utils.isolate_apps.disable(self)
django.test.utils.isolate_apps.enable(self)
django.test.utils.isolate_lru_cache(lru_cache_object)
django.test.utils.modify_settings(self,*args,**kwargs)
django.test.utils.modify_settings.__init__(self,*args,**kwargs)
django.test.utils.modify_settings.enable(self)
django.test.utils.modify_settings.save_options(self,test_func)
django.test.utils.override_script_prefix(self,prefix)
django.test.utils.override_script_prefix.__init__(self,prefix)
django.test.utils.override_script_prefix.disable(self)
django.test.utils.override_script_prefix.enable(self)
django.test.utils.override_settings(self,**kwargs)
django.test.utils.override_settings.__init__(self,**kwargs)
django.test.utils.override_settings.decorate_class(self,cls)
django.test.utils.override_settings.disable(self)
django.test.utils.override_settings.enable(self)
django.test.utils.override_settings.save_options(self,test_func)
django.test.utils.override_system_checks(self,new_checks,deployment_checks=None)
django.test.utils.override_system_checks.__init__(self,new_checks,deployment_checks=None)
django.test.utils.override_system_checks.disable(self)
django.test.utils.override_system_checks.enable(self)
django.test.utils.register_lookup(field,*lookups,lookup_name=None)
django.test.utils.require_jinja2(test_func)
django.test.utils.setup_databases(verbosity,interactive,*,time_keeper=None,keepdb=False,debug_sql=False,parallel=0,aliases=None,**kwargs)
django.test.utils.setup_test_environment(debug=None)
django.test.utils.tag(*tags)
django.test.utils.teardown_databases(old_config,verbosity,parallel=0,keepdb=False)
django.test.utils.teardown_test_environment()


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/signals.py----------------------------------------
A:django.test.signals.template_rendered->Signal()
A:django.test.signals.caches._settingscaches.settings->django.core.cache.caches.configure_settings(None)
A:django.test.signals.caches._connections->Local()
A:django.test.signals.trans_real._active->Local()
A:django.test.signals.UserModel->get_user_model()
django.test.signals.auth_password_validators_changed(**kwargs)
django.test.signals.clear_cache_handlers(**kwargs)
django.test.signals.clear_routers_cache(**kwargs)
django.test.signals.clear_serializers_cache(**kwargs)
django.test.signals.complex_setting_changed(**kwargs)
django.test.signals.file_storage_changed(**kwargs)
django.test.signals.language_changed(**kwargs)
django.test.signals.localize_settings_changed(**kwargs)
django.test.signals.reset_template_engines(**kwargs)
django.test.signals.root_urlconf_changed(**kwargs)
django.test.signals.static_finders_changed(**kwargs)
django.test.signals.static_storage_changed(**kwargs)
django.test.signals.update_connections_time_zone(**kwargs)
django.test.signals.update_installed_apps(**kwargs)
django.test.signals.user_model_swapped(**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/testcases.py----------------------------------------
A:django.test.testcases.dom->parse_html(html)
A:django.test.testcases.executed->len(self)
A:django.test.testcases.self.context->ContextList()
A:django.test.testcases.message->self.message()
A:django.test.testcases.databases->getattr(test_item, 'databases', None)
A:django.test.testcases.cls._cls_overridden_context->override_settings(**cls._overridden_settings)
A:django.test.testcases.cls._cls_modified_context->modify_settings(cls._modified_settings)
A:django.test.testcases.close_matches->get_close_matches(alias, list(connections))
A:django.test.testcases.cls.databases->cls._validate_databases()
A:django.test.testcases.method->getattr(connection, name)
A:django.test.testcases.debug_result->_DebugResult()
A:django.test.testcases.testMethod->getattr(self, self._testMethodName)
A:django.test.testcases.self.client->self.client_class()
A:django.test.testcases.self.async_client->self.async_client_class()
A:django.test.testcases.(scheme, netloc, path, query, fragment)->urlsplit(url)
A:django.test.testcases.url->str(url)
A:django.test.testcases.path->urljoin(response.request['PATH_INFO'], path)
A:django.test.testcases.(domain, port)->split_domain_port(netloc)
A:django.test.testcases.redirect_response->response.client.get(path, QueryDict(query), secure=scheme == 'https', **extra)
A:django.test.testcases.(scheme, netloc, path, params, query, fragment)->urlparse(url)
A:django.test.testcases.query_parts->sorted(parse_qsl(query))
A:django.test.testcases.content->assert_and_parse_html(self, content, None, "Response's content is not valid HTML:")
A:django.test.testcases.text->assert_and_parse_html(self, text, None, 'Second argument is not valid HTML:')
A:django.test.testcases.text_repr->repr(text)
A:django.test.testcases.real_count->assert_and_parse_html(self, haystack, None, 'Second argument is not valid HTML:').count(needle)
A:django.test.testcases.(text_repr, real_count, msg_prefix)->self._assert_contains(response, text, status_code, msg_prefix, html)
A:django.test.testcases.contexts->to_list(response.context)
A:django.test.testcases.errors->to_list(errors)
A:django.test.testcases.non_field_errors->context[formset].forms[form_index].non_field_errors()
A:django.test.testcases.non_form_errors->context[formset].non_form_errors()
A:django.test.testcases.(context_mgr_template, template_names, msg_prefix)->self._assert_template_used(response, template_name, msg_prefix)
A:django.test.testcases.cm->self._assert_raises_or_warns_cm(func, cm_attr, expected_exception, expected_message)
A:django.test.testcases.required->fieldclass(*field_args, **field_kwargs)
A:django.test.testcases.optional->fieldclass(*field_args, **{**field_kwargs, 'required': False})
A:django.test.testcases.dom1->assert_and_parse_html(self, html1, msg, 'First argument is not valid HTML:')
A:django.test.testcases.dom2->assert_and_parse_html(self, html2, msg, 'Second argument is not valid HTML:')
A:django.test.testcases.standardMsg->self._truncateMessage(standardMsg, diff)
A:django.test.testcases.needle->assert_and_parse_html(self, needle, None, 'First argument is not valid HTML:')
A:django.test.testcases.haystack->assert_and_parse_html(self, haystack, None, 'Second argument is not valid HTML:')
A:django.test.testcases.data->deepcopy(self.data, memo)
A:django.test.testcases.expected_data->json.loads(expected_data)
A:django.test.testcases.result->compare_xml(xml1, xml2)
A:django.test.testcases.sql_list->conn.ops.sequence_reset_by_name_sql(no_style(), conn.introspection.sequence_list())
A:django.test.testcases.values->list(values)
A:django.test.testcases.items->map(transform, items)
A:django.test.testcases.context->_AssertNumQueriesContext(self, num, conn)
A:django.test.testcases.memo->self.get_memo(instance)
A:django.test.testcases.atomics[db_name]->django.db.transaction.atomic(using=db_name)
A:django.test.testcases.cls.cls_atomics->cls._enter_atomics()
A:django.test.testcases.pre_attrs->cls.__dict__.copy()
A:django.test.testcases.self.atomics->self._enter_atomics()
A:django.test.testcases.start_count->len(connections[using].run_on_commit)
A:django.test.testcases.skip->test_func.__dict__.get('__unittest_skip__')
A:django.test.testcases.test_item.__unittest_skip__->CheckCondition((condition, reason))
A:django.test.testcases.self.base_url->urlparse(self.get_base_url())
A:django.test.testcases.os_rel_path->posixpath.normpath(unquote(os_rel_path))
A:django.test.testcases.final_rel_path->posixpath.normpath(unquote(os_rel_path)).replace('\\', '/').lstrip('/')
A:django.test.testcases.self.is_ready->threading.Event()
A:django.test.testcases.handler->self.static_handler(_MediaFilesHandler(WSGIHandler()))
A:django.test.testcases.self.httpd->self._create_server()
A:django.test.testcases.cls._live_server_modified_settings->modify_settings(ALLOWED_HOSTS={'append': cls.allowed_host})
A:django.test.testcases.cls.server_thread->cls._create_server_thread(connections_override)
A:django.test.testcases.cls._lockfile->open(cls.lockfile)
django.test.LiveServerTestCase(TransactionTestCase)
django.test.LiveServerTestCase._create_server_thread(cls,connections_override)
django.test.LiveServerTestCase._tearDownClassInternal(cls)
django.test.LiveServerTestCase.allowed_host(cls)
django.test.LiveServerTestCase.live_server_url(cls)
django.test.LiveServerTestCase.setUpClass(cls)
django.test.LiveServerTestCase.tearDownClass(cls)
django.test.SimpleTestCase(self,result=None)
django.test.SimpleTestCase._add_databases_failures(cls)
django.test.SimpleTestCase._assertFooMessage(self,func,cm_attr,expected_exception,expected_message,*args,**kwargs)
django.test.SimpleTestCase._assert_contains(self,response,text,status_code,msg_prefix,html)
django.test.SimpleTestCase._assert_raises_or_warns_cm(self,func,cm_attr,expected_exception,expected_message)
django.test.SimpleTestCase._assert_template_used(self,response,template_name,msg_prefix)
django.test.SimpleTestCase._post_teardown(self)
django.test.SimpleTestCase._pre_setup(self)
django.test.SimpleTestCase._remove_databases_failures(cls)
django.test.SimpleTestCase._setup_and_call(self,result,debug=False)
django.test.SimpleTestCase._validate_databases(cls)
django.test.SimpleTestCase.assertContains(self,response,text,count=None,status_code=200,msg_prefix='',html=False)
django.test.SimpleTestCase.assertFieldOutput(self,fieldclass,valid,invalid,field_args=None,field_kwargs=None,empty_value='')
django.test.SimpleTestCase.assertFormError(self,response,form,field,errors,msg_prefix='')
django.test.SimpleTestCase.assertFormsetError(self,response,formset,form_index,field,errors,msg_prefix='')
django.test.SimpleTestCase.assertHTMLEqual(self,html1,html2,msg=None)
django.test.SimpleTestCase.assertHTMLNotEqual(self,html1,html2,msg=None)
django.test.SimpleTestCase.assertInHTML(self,needle,haystack,count=None,msg_prefix='')
django.test.SimpleTestCase.assertJSONEqual(self,raw,expected_data,msg=None)
django.test.SimpleTestCase.assertJSONNotEqual(self,raw,expected_data,msg=None)
django.test.SimpleTestCase.assertNotContains(self,response,text,status_code=200,msg_prefix='',html=False)
django.test.SimpleTestCase.assertRaisesMessage(self,expected_exception,expected_message,*args,**kwargs)
django.test.SimpleTestCase.assertRedirects(self,response,expected_url,status_code=302,target_status_code=200,msg_prefix='',fetch_redirect_response=True)
django.test.SimpleTestCase.assertTemplateNotUsed(self,response=None,template_name=None,msg_prefix='')
django.test.SimpleTestCase.assertTemplateUsed(self,response=None,template_name=None,msg_prefix='',count=None)
django.test.SimpleTestCase.assertURLEqual(self,url1,url2,msg_prefix='')
django.test.SimpleTestCase.assertWarnsMessage(self,expected_warning,expected_message,*args,**kwargs)
django.test.SimpleTestCase.assertXMLEqual(self,xml1,xml2,msg=None)
django.test.SimpleTestCase.assertXMLNotEqual(self,xml1,xml2,msg=None)
django.test.SimpleTestCase.debug(self)
django.test.SimpleTestCase.modify_settings(self,**kwargs)
django.test.SimpleTestCase.setUpClass(cls)
django.test.SimpleTestCase.settings(self,**kwargs)
django.test.SimpleTestCase.tearDownClass(cls)
django.test.TestCase(TransactionTestCase)
django.test.TestCase._databases_support_transactions(cls)
django.test.TestCase._enter_atomics(cls)
django.test.TestCase._fixture_setup(self)
django.test.TestCase._fixture_teardown(self)
django.test.TestCase._rollback_atomics(cls,atomics)
django.test.TestCase._should_check_constraints(self,connection)
django.test.TestCase._should_reload_connections(self)
django.test.TestCase.captureOnCommitCallbacks(cls,*,using=DEFAULT_DB_ALIAS,execute=False)
django.test.TestCase.setUpClass(cls)
django.test.TestCase.setUpTestData(cls)
django.test.TestCase.tearDownClass(cls)
django.test.TransactionTestCase(SimpleTestCase)
django.test.TransactionTestCase._databases_names(cls,include_mirrors=True)
django.test.TransactionTestCase._fixture_setup(self)
django.test.TransactionTestCase._fixture_teardown(self)
django.test.TransactionTestCase._post_teardown(self)
django.test.TransactionTestCase._pre_setup(self)
django.test.TransactionTestCase._reset_sequences(self,db_name)
django.test.TransactionTestCase._should_reload_connections(self)
django.test.TransactionTestCase.assertNumQueries(self,num,func=None,*args,using=DEFAULT_DB_ALIAS,**kwargs)
django.test.TransactionTestCase.assertQuerysetEqual(self,qs,values,transform=None,ordered=True,msg=None)
django.test.skipIfDBFeature(*features)
django.test.skipUnlessAnyDBFeature(*features)
django.test.skipUnlessDBFeature(*features)
django.test.testcases.CheckCondition(self,*conditions)
django.test.testcases.CheckCondition.__get__(self,instance,cls=None)
django.test.testcases.CheckCondition.__init__(self,*conditions)
django.test.testcases.CheckCondition.add_condition(self,condition,reason)
django.test.testcases.FSFilesHandler(self,application)
django.test.testcases.FSFilesHandler.__init__(self,application)
django.test.testcases.FSFilesHandler._should_handle(self,path)
django.test.testcases.FSFilesHandler.file_path(self,url)
django.test.testcases.FSFilesHandler.get_response(self,request)
django.test.testcases.FSFilesHandler.serve(self,request)
django.test.testcases.LiveServerTestCase(TransactionTestCase)
django.test.testcases.LiveServerTestCase._create_server_thread(cls,connections_override)
django.test.testcases.LiveServerTestCase._tearDownClassInternal(cls)
django.test.testcases.LiveServerTestCase.allowed_host(cls)
django.test.testcases.LiveServerTestCase.live_server_url(cls)
django.test.testcases.LiveServerTestCase.setUpClass(cls)
django.test.testcases.LiveServerTestCase.tearDownClass(cls)
django.test.testcases.LiveServerThread(self,host,static_handler,connections_override=None,port=0)
django.test.testcases.LiveServerThread.__init__(self,host,static_handler,connections_override=None,port=0)
django.test.testcases.LiveServerThread._create_server(self)
django.test.testcases.LiveServerThread.run(self)
django.test.testcases.LiveServerThread.terminate(self)
django.test.testcases.QuietWSGIRequestHandler(WSGIRequestHandler)
django.test.testcases.QuietWSGIRequestHandler.log_message(*args)
django.test.testcases.SerializeMixin
django.test.testcases.SerializeMixin.setUpClass(cls)
django.test.testcases.SerializeMixin.tearDownClass(cls)
django.test.testcases.SimpleTestCase(self,result=None)
django.test.testcases.SimpleTestCase.__call__(self,result=None)
django.test.testcases.SimpleTestCase._add_databases_failures(cls)
django.test.testcases.SimpleTestCase._assertFooMessage(self,func,cm_attr,expected_exception,expected_message,*args,**kwargs)
django.test.testcases.SimpleTestCase._assert_contains(self,response,text,status_code,msg_prefix,html)
django.test.testcases.SimpleTestCase._assert_raises_or_warns_cm(self,func,cm_attr,expected_exception,expected_message)
django.test.testcases.SimpleTestCase._assert_template_used(self,response,template_name,msg_prefix)
django.test.testcases.SimpleTestCase._post_teardown(self)
django.test.testcases.SimpleTestCase._pre_setup(self)
django.test.testcases.SimpleTestCase._remove_databases_failures(cls)
django.test.testcases.SimpleTestCase._setup_and_call(self,result,debug=False)
django.test.testcases.SimpleTestCase._validate_databases(cls)
django.test.testcases.SimpleTestCase.assertContains(self,response,text,count=None,status_code=200,msg_prefix='',html=False)
django.test.testcases.SimpleTestCase.assertFieldOutput(self,fieldclass,valid,invalid,field_args=None,field_kwargs=None,empty_value='')
django.test.testcases.SimpleTestCase.assertFormError(self,response,form,field,errors,msg_prefix='')
django.test.testcases.SimpleTestCase.assertFormsetError(self,response,formset,form_index,field,errors,msg_prefix='')
django.test.testcases.SimpleTestCase.assertHTMLEqual(self,html1,html2,msg=None)
django.test.testcases.SimpleTestCase.assertHTMLNotEqual(self,html1,html2,msg=None)
django.test.testcases.SimpleTestCase.assertInHTML(self,needle,haystack,count=None,msg_prefix='')
django.test.testcases.SimpleTestCase.assertJSONEqual(self,raw,expected_data,msg=None)
django.test.testcases.SimpleTestCase.assertJSONNotEqual(self,raw,expected_data,msg=None)
django.test.testcases.SimpleTestCase.assertNotContains(self,response,text,status_code=200,msg_prefix='',html=False)
django.test.testcases.SimpleTestCase.assertRaisesMessage(self,expected_exception,expected_message,*args,**kwargs)
django.test.testcases.SimpleTestCase.assertRedirects(self,response,expected_url,status_code=302,target_status_code=200,msg_prefix='',fetch_redirect_response=True)
django.test.testcases.SimpleTestCase.assertTemplateNotUsed(self,response=None,template_name=None,msg_prefix='')
django.test.testcases.SimpleTestCase.assertTemplateUsed(self,response=None,template_name=None,msg_prefix='',count=None)
django.test.testcases.SimpleTestCase.assertURLEqual(self,url1,url2,msg_prefix='')
django.test.testcases.SimpleTestCase.assertWarnsMessage(self,expected_warning,expected_message,*args,**kwargs)
django.test.testcases.SimpleTestCase.assertXMLEqual(self,xml1,xml2,msg=None)
django.test.testcases.SimpleTestCase.assertXMLNotEqual(self,xml1,xml2,msg=None)
django.test.testcases.SimpleTestCase.debug(self)
django.test.testcases.SimpleTestCase.modify_settings(self,**kwargs)
django.test.testcases.SimpleTestCase.setUpClass(cls)
django.test.testcases.SimpleTestCase.settings(self,**kwargs)
django.test.testcases.SimpleTestCase.tearDownClass(cls)
django.test.testcases.TestCase(TransactionTestCase)
django.test.testcases.TestCase._databases_support_transactions(cls)
django.test.testcases.TestCase._enter_atomics(cls)
django.test.testcases.TestCase._fixture_setup(self)
django.test.testcases.TestCase._fixture_teardown(self)
django.test.testcases.TestCase._rollback_atomics(cls,atomics)
django.test.testcases.TestCase._should_check_constraints(self,connection)
django.test.testcases.TestCase._should_reload_connections(self)
django.test.testcases.TestCase.captureOnCommitCallbacks(cls,*,using=DEFAULT_DB_ALIAS,execute=False)
django.test.testcases.TestCase.setUpClass(cls)
django.test.testcases.TestCase.setUpTestData(cls)
django.test.testcases.TestCase.tearDownClass(cls)
django.test.testcases.TestData(self,name,data)
django.test.testcases.TestData.__get__(self,instance,owner)
django.test.testcases.TestData.__init__(self,name,data)
django.test.testcases.TestData.__repr__(self)
django.test.testcases.TestData.get_memo(self,testcase)
django.test.testcases.TransactionTestCase(SimpleTestCase)
django.test.testcases.TransactionTestCase._databases_names(cls,include_mirrors=True)
django.test.testcases.TransactionTestCase._fixture_setup(self)
django.test.testcases.TransactionTestCase._fixture_teardown(self)
django.test.testcases.TransactionTestCase._post_teardown(self)
django.test.testcases.TransactionTestCase._pre_setup(self)
django.test.testcases.TransactionTestCase._reset_sequences(self,db_name)
django.test.testcases.TransactionTestCase._should_reload_connections(self)
django.test.testcases.TransactionTestCase.assertNumQueries(self,num,func=None,*args,using=DEFAULT_DB_ALIAS,**kwargs)
django.test.testcases.TransactionTestCase.assertQuerysetEqual(self,qs,values,transform=None,ordered=True,msg=None)
django.test.testcases._AssertNumQueriesContext(self,test_case,num,connection)
django.test.testcases._AssertNumQueriesContext.__exit__(self,exc_type,exc_value,traceback)
django.test.testcases._AssertNumQueriesContext.__init__(self,test_case,num,connection)
django.test.testcases._AssertTemplateNotUsedContext(_AssertTemplateUsedContext)
django.test.testcases._AssertTemplateNotUsedContext.message(self)
django.test.testcases._AssertTemplateNotUsedContext.test(self)
django.test.testcases._AssertTemplateUsedContext(self,test_case,template_name)
django.test.testcases._AssertTemplateUsedContext.__enter__(self)
django.test.testcases._AssertTemplateUsedContext.__exit__(self,exc_type,exc_value,traceback)
django.test.testcases._AssertTemplateUsedContext.__init__(self,test_case,template_name)
django.test.testcases._AssertTemplateUsedContext.message(self)
django.test.testcases._AssertTemplateUsedContext.on_template_render(self,sender,signal,template,context,**kwargs)
django.test.testcases._AssertTemplateUsedContext.test(self)
django.test.testcases._DatabaseFailure(self,wrapped,message)
django.test.testcases._DatabaseFailure.__init__(self,wrapped,message)
django.test.testcases._MediaFilesHandler(FSFilesHandler)
django.test.testcases._MediaFilesHandler.get_base_dir(self)
django.test.testcases._MediaFilesHandler.get_base_url(self)
django.test.testcases._StaticFilesHandler(FSFilesHandler)
django.test.testcases._StaticFilesHandler.get_base_dir(self)
django.test.testcases._StaticFilesHandler.get_base_url(self)
django.test.testcases._deferredSkip(condition,reason,name)
django.test.testcases.assert_and_parse_html(self,html,user_msg,msg)
django.test.testcases.connections_support_transactions(aliases=None)
django.test.testcases.skipIfDBFeature(*features)
django.test.testcases.skipUnlessAnyDBFeature(*features)
django.test.testcases.skipUnlessDBFeature(*features)
django.test.testcases.to_list(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/runner.py----------------------------------------
A:django.test.runner.self.logger->logging.getLogger('django.db.backends')
A:django.test.runner.self.debug_sql_stream->StringIO()
A:django.test.runner.self.handler->logging.StreamHandler(self.debug_sql_stream)
A:django.test.runner.sql->self.debug_sql_stream.read()
A:django.test.runner.original_exc_txt->textwrap.fill(original_exc_txt, 75, initial_indent='    ', subsequent_indent='    ')
A:django.test.runner.pickle_exc_txt->textwrap.fill(pickle_exc_txt, 75, initial_indent='    ', subsequent_indent='    ')
A:django.test.runner.result->self.run_suite(suite)
A:django.test.runner.settings_dict->connection.creation.get_test_db_clone_settings(str(_worker_id))
A:django.test.runner.runner->self.test_runner(**kwargs)
A:django.test.runner.self.subsuites->partition_suite_by_case(suite)
A:django.test.runner.counter->multiprocessing.Value(ctypes.c_int, 0)
A:django.test.runner.pool->multiprocessing.Pool(processes=self.processes, initializer=self.init_worker.__func__, initargs=[counter])
A:django.test.runner.test_results->multiprocessing.Pool(processes=self.processes, initializer=self.init_worker.__func__, initargs=[counter]).imap_unordered(self.run_subsuite.__func__, args)
A:django.test.runner.(subsuite_index, events)->multiprocessing.Pool(processes=self.processes, initializer=self.init_worker.__func__, initargs=[counter]).imap_unordered(self.run_subsuite.__func__, args).next(timeout=0.1)
A:django.test.runner.tests->self.test_loader.discover(start_dir=label, **kwargs)
A:django.test.runner.handler->getattr(result, event_name, None)
A:django.test.runner.self.tags->set(tags or [])
A:django.test.runner.self.exclude_tags->set(exclude_tags or [])
A:django.test.runner.suite->reversed(tuple(suite))
A:django.test.runner.kwargs->self.get_test_runner_kwargs()
A:django.test.runner.label_as_path->os.path.abspath(label)
A:django.test.runner.init_py->os.path.join(top_level, '__init__.py')
A:django.test.runner.try_next->os.path.dirname(top_level)
A:django.test.runner.parallel_suite->self.parallel_test_suite(suite, self.parallel, self.failfast)
A:django.test.runner.parallel_units->len(parallel_suite.subsuites)
A:django.test.runner.self.parallel->min(self.parallel, parallel_units)
A:django.test.runner.databases->self.get_databases(suite)
A:django.test.runner.test_databases->getattr(test, 'databases', None)
A:django.test.runner.old_config->self.setup_databases(aliases=databases)
A:django.test.runner.mod->import_module(label)
A:django.test.runner.class_count->len(classes)
A:django.test.runner.suite_class->type(suite)
A:django.test.runner.reordered_suite->suite_class()
A:django.test.runner.filtered_suite->suite_class()
A:django.test.runner.test_tags->set(getattr(test, 'tags', set()))
A:django.test.runner.test_fn_name->getattr(test, '_testMethodName', str(test))
A:django.test.runner.test_fn->getattr(test, test_fn_name, test)
A:django.test.runner.test_fn_tags->set(getattr(test_fn, 'tags', set()))
A:django.test.runner.all_tags->set(getattr(test, 'tags', set())).union(test_fn_tags)
A:django.test.runner.matched_tags->set(getattr(test, 'tags', set())).union(test_fn_tags).intersection(tags)
django.test.runner.DebugSQLTextTestResult(self,stream,descriptions,verbosity)
django.test.runner.DebugSQLTextTestResult.__init__(self,stream,descriptions,verbosity)
django.test.runner.DebugSQLTextTestResult.addError(self,test,err)
django.test.runner.DebugSQLTextTestResult.addFailure(self,test,err)
django.test.runner.DebugSQLTextTestResult.addSubTest(self,test,subtest,err)
django.test.runner.DebugSQLTextTestResult.printErrorList(self,flavour,errors)
django.test.runner.DebugSQLTextTestResult.startTest(self,test)
django.test.runner.DebugSQLTextTestResult.stopTest(self,test)
django.test.runner.DiscoverRunner(self,pattern=None,top_level=None,verbosity=1,interactive=True,failfast=False,keepdb=False,reverse=False,debug_mode=False,debug_sql=False,parallel=0,tags=None,exclude_tags=None,test_name_patterns=None,pdb=False,buffer=False,enable_faulthandler=True,timing=False,**kwargs)
django.test.runner.DiscoverRunner.__init__(self,pattern=None,top_level=None,verbosity=1,interactive=True,failfast=False,keepdb=False,reverse=False,debug_mode=False,debug_sql=False,parallel=0,tags=None,exclude_tags=None,test_name_patterns=None,pdb=False,buffer=False,enable_faulthandler=True,timing=False,**kwargs)
django.test.runner.DiscoverRunner._get_databases(self,suite)
django.test.runner.DiscoverRunner.add_arguments(cls,parser)
django.test.runner.DiscoverRunner.build_suite(self,test_labels=None,extra_tests=None,**kwargs)
django.test.runner.DiscoverRunner.get_databases(self,suite)
django.test.runner.DiscoverRunner.get_resultclass(self)
django.test.runner.DiscoverRunner.get_test_runner_kwargs(self)
django.test.runner.DiscoverRunner.run_checks(self,databases)
django.test.runner.DiscoverRunner.run_suite(self,suite,**kwargs)
django.test.runner.DiscoverRunner.run_tests(self,test_labels,extra_tests=None,**kwargs)
django.test.runner.DiscoverRunner.setup_databases(self,**kwargs)
django.test.runner.DiscoverRunner.setup_test_environment(self,**kwargs)
django.test.runner.DiscoverRunner.suite_result(self,suite,result,**kwargs)
django.test.runner.DiscoverRunner.teardown_databases(self,old_config,**kwargs)
django.test.runner.DiscoverRunner.teardown_test_environment(self,**kwargs)
django.test.runner.PDBDebugResult(unittest.TextTestResult)
django.test.runner.PDBDebugResult.addError(self,test,err)
django.test.runner.PDBDebugResult.addFailure(self,test,err)
django.test.runner.PDBDebugResult.debug(self,error)
django.test.runner.ParallelTestSuite(self,suite,processes,failfast=False)
django.test.runner.ParallelTestSuite.__init__(self,suite,processes,failfast=False)
django.test.runner.ParallelTestSuite.__iter__(self)
django.test.runner.ParallelTestSuite.run(self,result)
django.test.runner.RemoteTestResult(self)
django.test.runner.RemoteTestResult.__init__(self)
django.test.runner.RemoteTestResult._confirm_picklable(self,obj)
django.test.runner.RemoteTestResult._print_unpicklable_subtest(self,test,subtest,pickle_exc)
django.test.runner.RemoteTestResult.addError(self,test,err)
django.test.runner.RemoteTestResult.addExpectedFailure(self,test,err)
django.test.runner.RemoteTestResult.addFailure(self,test,err)
django.test.runner.RemoteTestResult.addSkip(self,test,reason)
django.test.runner.RemoteTestResult.addSubTest(self,test,subtest,err)
django.test.runner.RemoteTestResult.addSuccess(self,test)
django.test.runner.RemoteTestResult.addUnexpectedSuccess(self,test)
django.test.runner.RemoteTestResult.check_picklable(self,test,err)
django.test.runner.RemoteTestResult.check_subtest_picklable(self,test,subtest)
django.test.runner.RemoteTestResult.startTest(self,test)
django.test.runner.RemoteTestResult.startTestRun(self)
django.test.runner.RemoteTestResult.stop(self)
django.test.runner.RemoteTestResult.stopTest(self,test)
django.test.runner.RemoteTestResult.stopTestRun(self)
django.test.runner.RemoteTestResult.stop_if_failfast(self)
django.test.runner.RemoteTestResult.test_index(self)
django.test.runner.RemoteTestRunner(self,failfast=False,resultclass=None)
django.test.runner.RemoteTestRunner.__init__(self,failfast=False,resultclass=None)
django.test.runner.RemoteTestRunner.run(self,test)
django.test.runner._init_worker(counter)
django.test.runner._run_subsuite(args)
django.test.runner.default_test_processes()
django.test.runner.filter_tests_by_tags(suite,tags,exclude_tags)
django.test.runner.is_discoverable(label)
django.test.runner.partition_suite_by_case(suite)
django.test.runner.partition_suite_by_type(suite,classes,bins,reverse=False)
django.test.runner.reorder_suite(suite,classes,reverse=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/html.py----------------------------------------
A:django.test.html.ASCII_WHITESPACE->_lazy_re_compile('[\\t\\n\\f\\r ]+')
A:django.test.html.self.attributes->sorted(attributes)
A:django.test.html.element->self.open_tags.pop()
A:django.test.html.self.children[-1]->normalize_whitespace(self.children[-1])
A:django.test.html.children[-1]->children[-1].rstrip().rstrip()
A:django.test.html.children->rstrip_last_element(children)
A:django.test.html.self.children[i]->child.strip()
A:django.test.html.self.root->RootElement()
A:django.test.html.position->self.getpos()
A:django.test.html.self.element_positions[element]->self.getpos()
A:django.test.html.parser->Parser()
django.test.html.Element(self,name,attributes)
django.test.html.Element.__contains__(self,element)
django.test.html.Element.__eq__(self,element)
django.test.html.Element.__getitem__(self,key)
django.test.html.Element.__hash__(self)
django.test.html.Element.__init__(self,name,attributes)
django.test.html.Element.__repr__(self)
django.test.html.Element.__str__(self)
django.test.html.Element._count(self,element,count=True)
django.test.html.Element.append(self,element)
django.test.html.Element.count(self,element)
django.test.html.Element.finalize(self)
django.test.html.HTMLParseError(Exception)
django.test.html.Parser(self)
django.test.html.Parser.__init__(self)
django.test.html.Parser.current(self)
django.test.html.Parser.error(self,msg)
django.test.html.Parser.format_position(self,position=None,element=None)
django.test.html.Parser.handle_data(self,data)
django.test.html.Parser.handle_endtag(self,tag)
django.test.html.Parser.handle_startendtag(self,tag,attrs)
django.test.html.Parser.handle_starttag(self,tag,attrs)
django.test.html.RootElement(self)
django.test.html.RootElement.__init__(self)
django.test.html.RootElement.__str__(self)
django.test.html.normalize_whitespace(string)
django.test.html.parse_html(html)


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/test/client.py----------------------------------------
A:django.test.client.CONTENT_TYPE_RE->_lazy_re_compile('.*; charset=([\\w\\d-]+);?')
A:django.test.client.JSON_CONTENT_TYPE_RE->_lazy_re_compile('^application\\/(.+\\+)?json')
A:django.test.client.self.__content->BytesIO()
A:django.test.client.content->force_bytes(content)
A:django.test.client.request->HttpRequest()
A:django.test.client.response->request_method(path, data=data, content_type=content_type, follow=False, **extra)
A:django.test.client.response.streaming_content->closing_iterator_wrapper(response.streaming_content, response.close)
A:django.test.client.body_file->FakePayload('')
A:django.test.client.store['context']->ContextList()
A:django.test.client.self.cookies->SimpleCookie()
A:django.test.client.self.errors->BytesIO()
A:django.test.client.match->_lazy_re_compile('.*; charset=([\\w\\d-]+);?').match(content_type)
A:django.test.client.path->urljoin(response.request['PATH_INFO'], path)
A:django.test.client.data->QueryDict(url.query)
A:django.test.client.post_data->self._encode_data(data, content_type)
A:django.test.client.parsed->urlparse(str(path))
A:django.test.client.query_string->parsed[4].encode().decode('iso-8859-1')
A:django.test.client.s['_body_file']->FakePayload(data)
A:django.test.client.follow->extra.pop('follow', None)
A:django.test.client.self.exc_info->sys.exc_info()
A:django.test.client.engine->import_module(settings.SESSION_ENGINE)
A:django.test.client.cookie->self.cookies.get(settings.SESSION_COOKIE_NAME)
A:django.test.client.session->import_module(settings.SESSION_ENGINE).SessionStore()
A:django.test.client.user->authenticate(**credentials)
A:django.test.client.backend->get_backend()
A:django.test.client.request.session->import_module(settings.SESSION_ENGINE).SessionStore()
A:django.test.client.request.user->get_user(request)
A:django.test.client.response._json->json.loads(response.content.decode(response.charset), **extra)
A:django.test.client.self.handler->AsyncClientHandler(enforce_csrf_checks)
A:django.test.client.environ->self._base_environ(**request)
A:django.test.client.on_template_render->partial(store_rendered_templates, data)
A:django.test.client.response.templates->QueryDict(url.query).get('templates', [])
A:django.test.client.response.context->QueryDict(url.query).get('context')
A:django.test.client.response.json->partial(self._parse_json, response)
A:django.test.client.response.resolver_match->SimpleLazyObject(lambda : resolve(request['path']))
A:django.test.client.url->urlsplit(response_url)
A:django.test.client.extra['SERVER_PORT']->str(url.port)
A:django.test.client.request_method->getattr(self, request_method)
A:django.test.client.scope->self._base_scope(**request)
django.test.AsyncClient(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.AsyncClientHandler(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.AsyncRequestFactory(RequestFactory)
django.test.AsyncRequestFactory._base_scope(self,**request)
django.test.AsyncRequestFactory.generic(self,method,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.AsyncRequestFactory.request(self,**request)
django.test.Client(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.Client._handle_redirects(self,response,data='',content_type='',**extra)
django.test.Client.delete(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.Client.get(self,path,data=None,follow=False,secure=False,**extra)
django.test.Client.head(self,path,data=None,follow=False,secure=False,**extra)
django.test.Client.options(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.Client.patch(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.Client.post(self,path,data=None,content_type=MULTIPART_CONTENT,follow=False,secure=False,**extra)
django.test.Client.put(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.Client.request(self,**request)
django.test.Client.trace(self,path,data='',follow=False,secure=False,**extra)
django.test.ClientHandler(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.ClientMixin
django.test.ClientMixin._login(self,user,backend=None)
django.test.ClientMixin._parse_json(self,response,**extra)
django.test.ClientMixin.check_exception(self,response)
django.test.ClientMixin.force_login(self,user,backend=None)
django.test.ClientMixin.login(self,**credentials)
django.test.ClientMixin.logout(self)
django.test.ClientMixin.session(self)
django.test.ClientMixin.store_exc_info(self,**kwargs)
django.test.RequestFactory(self,*,json_encoder=DjangoJSONEncoder,**defaults)
django.test.RequestFactory._base_environ(self,**request)
django.test.RequestFactory._encode_data(self,data,content_type)
django.test.RequestFactory._encode_json(self,data,content_type)
django.test.RequestFactory._get_path(self,parsed)
django.test.RequestFactory.delete(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.RequestFactory.generic(self,method,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.RequestFactory.get(self,path,data=None,secure=False,**extra)
django.test.RequestFactory.head(self,path,data=None,secure=False,**extra)
django.test.RequestFactory.options(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.RequestFactory.patch(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.RequestFactory.post(self,path,data=None,content_type=MULTIPART_CONTENT,secure=False,**extra)
django.test.RequestFactory.put(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.RequestFactory.request(self,**request)
django.test.RequestFactory.trace(self,path,secure=False,**extra)
django.test.client.AsyncClient(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.client.AsyncClient.__init__(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.client.AsyncClientHandler(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.client.AsyncClientHandler.__init__(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.client.AsyncRequestFactory(RequestFactory)
django.test.client.AsyncRequestFactory._base_scope(self,**request)
django.test.client.AsyncRequestFactory.generic(self,method,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.AsyncRequestFactory.request(self,**request)
django.test.client.Client(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.client.Client.__init__(self,enforce_csrf_checks=False,raise_request_exception=True,**defaults)
django.test.client.Client._handle_redirects(self,response,data='',content_type='',**extra)
django.test.client.Client.delete(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.client.Client.get(self,path,data=None,follow=False,secure=False,**extra)
django.test.client.Client.head(self,path,data=None,follow=False,secure=False,**extra)
django.test.client.Client.options(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.client.Client.patch(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.client.Client.post(self,path,data=None,content_type=MULTIPART_CONTENT,follow=False,secure=False,**extra)
django.test.client.Client.put(self,path,data='',content_type='application/octet-stream',follow=False,secure=False,**extra)
django.test.client.Client.request(self,**request)
django.test.client.Client.trace(self,path,data='',follow=False,secure=False,**extra)
django.test.client.ClientHandler(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.client.ClientHandler.__init__(self,enforce_csrf_checks=True,*args,**kwargs)
django.test.client.ClientMixin
django.test.client.ClientMixin._login(self,user,backend=None)
django.test.client.ClientMixin._parse_json(self,response,**extra)
django.test.client.ClientMixin.check_exception(self,response)
django.test.client.ClientMixin.force_login(self,user,backend=None)
django.test.client.ClientMixin.login(self,**credentials)
django.test.client.ClientMixin.logout(self)
django.test.client.ClientMixin.session(self)
django.test.client.ClientMixin.store_exc_info(self,**kwargs)
django.test.client.FakePayload(self,content=None)
django.test.client.FakePayload.__init__(self,content=None)
django.test.client.FakePayload.__len__(self)
django.test.client.FakePayload.read(self,num_bytes=None)
django.test.client.FakePayload.write(self,content)
django.test.client.RedirectCycleError(self,message,last_response)
django.test.client.RedirectCycleError.__init__(self,message,last_response)
django.test.client.RequestFactory(self,*,json_encoder=DjangoJSONEncoder,**defaults)
django.test.client.RequestFactory.__init__(self,*,json_encoder=DjangoJSONEncoder,**defaults)
django.test.client.RequestFactory._base_environ(self,**request)
django.test.client.RequestFactory._encode_data(self,data,content_type)
django.test.client.RequestFactory._encode_json(self,data,content_type)
django.test.client.RequestFactory._get_path(self,parsed)
django.test.client.RequestFactory.delete(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.RequestFactory.generic(self,method,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.RequestFactory.get(self,path,data=None,secure=False,**extra)
django.test.client.RequestFactory.head(self,path,data=None,secure=False,**extra)
django.test.client.RequestFactory.options(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.RequestFactory.patch(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.RequestFactory.post(self,path,data=None,content_type=MULTIPART_CONTENT,secure=False,**extra)
django.test.client.RequestFactory.put(self,path,data='',content_type='application/octet-stream',secure=False,**extra)
django.test.client.RequestFactory.request(self,**request)
django.test.client.RequestFactory.trace(self,path,secure=False,**extra)
django.test.client.closing_iterator_wrapper(iterable,close)
django.test.client.conditional_content_removal(request,response)
django.test.client.encode_file(boundary,key,file)
django.test.client.encode_multipart(boundary,data)
django.test.client.store_rendered_templates(store,signal,sender,template,context,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/paginator.py----------------------------------------
A:django.core.paginator.ELLIPSIS->_('…')
A:django.core.paginator.self.per_page->int(per_page)
A:django.core.paginator.self.orphans->int(orphans)
A:django.core.paginator.number->self.validate_number(number)
A:django.core.paginator.c->getattr(self.object_list, 'count', None)
A:django.core.paginator.hits->max(1, self.count - self.orphans)
A:django.core.paginator.ordered->getattr(self.object_list, 'ordered', None)
A:django.core.paginator.self.object_list->list(self.object_list)
django.core.paginator.EmptyPage(InvalidPage)
django.core.paginator.InvalidPage(Exception)
django.core.paginator.Page(self,object_list,number,paginator)
django.core.paginator.Page.__getitem__(self,index)
django.core.paginator.Page.__init__(self,object_list,number,paginator)
django.core.paginator.Page.__len__(self)
django.core.paginator.Page.__repr__(self)
django.core.paginator.Page.end_index(self)
django.core.paginator.Page.has_next(self)
django.core.paginator.Page.has_other_pages(self)
django.core.paginator.Page.has_previous(self)
django.core.paginator.Page.next_page_number(self)
django.core.paginator.Page.previous_page_number(self)
django.core.paginator.Page.start_index(self)
django.core.paginator.PageNotAnInteger(InvalidPage)
django.core.paginator.Paginator(self,object_list,per_page,orphans=0,allow_empty_first_page=True)
django.core.paginator.Paginator.__init__(self,object_list,per_page,orphans=0,allow_empty_first_page=True)
django.core.paginator.Paginator.__iter__(self)
django.core.paginator.Paginator._check_object_list_is_ordered(self)
django.core.paginator.Paginator._get_page(self,*args,**kwargs)
django.core.paginator.Paginator.count(self)
django.core.paginator.Paginator.get_elided_page_range(self,number=1,*,on_each_side=3,on_ends=2)
django.core.paginator.Paginator.get_page(self,number)
django.core.paginator.Paginator.num_pages(self)
django.core.paginator.Paginator.page(self,number)
django.core.paginator.Paginator.page_range(self)
django.core.paginator.Paginator.validate_number(self,number)
django.core.paginator.UnorderedObjectListWarning(RuntimeWarning)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/validators.py----------------------------------------
A:django.core.validators.message->_('Null characters are not allowed.')
A:django.core.validators.self.regex->_lazy_re_compile(self.regex, self.flags)
A:django.core.validators.regex_matches->self.regex.search(str(value))
A:django.core.validators.regex->_lazy_re_compile('^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:' + ipv4_re + '|' + ipv6_re + '|' + host_re + ')(?::\\d{2,5})?(?:[/?#][^\\s]*)?\\Z', re.IGNORECASE)
A:django.core.validators.scheme->value.split('://')[0].lower()
A:django.core.validators.(scheme, netloc, path, query, fragment)->urlsplit(value)
A:django.core.validators.netloc->punycode(netloc)
A:django.core.validators.url->urlunsplit((scheme, netloc, path, query, fragment))
A:django.core.validators.host_match->re.search('^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)
A:django.core.validators.integer_validator->RegexValidator(_lazy_re_compile('^-?\\d+\\Z'), message=_('Enter a valid integer.'), code='invalid')
A:django.core.validators.user_regex->_lazy_re_compile('(^[-!#$%&\'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&\'*+/=?^_`{}|~0-9A-Z]+)*\\Z|^"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*"\\Z)', re.IGNORECASE)
A:django.core.validators.domain_regex->_lazy_re_compile('((?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+)(?:[A-Z0-9-]{2,63}(?<!-))\\Z', re.IGNORECASE)
A:django.core.validators.literal_regex->_lazy_re_compile('\\[([A-f0-9:.]+)\\]\\Z', re.IGNORECASE)
A:django.core.validators.(user_part, domain_part)->value.rsplit('@', 1)
A:django.core.validators.domain_part->punycode(domain_part)
A:django.core.validators.literal_match->self.literal_regex.match(domain_part)
A:django.core.validators.validate_email->EmailValidator()
A:django.core.validators.slug_re->_lazy_re_compile('^[-a-zA-Z0-9_]+\\Z')
A:django.core.validators.validate_slug->RegexValidator(slug_re, _('Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.'), 'invalid')
A:django.core.validators.slug_unicode_re->_lazy_re_compile('^[-\\w]+\\Z')
A:django.core.validators.validate_unicode_slug->RegexValidator(slug_unicode_re, _('Enter a valid “slug” consisting of Unicode letters, numbers, underscores, or hyphens.'), 'invalid')
A:django.core.validators.regexp->_lazy_re_compile('^%(neg)s\\d+(?:%(sep)s%(neg)s\\d+)*\\Z' % {'neg': '(-)?' if allow_negative else '', 'sep': re.escape(sep)})
A:django.core.validators.validate_comma_separated_integer_list->int_list_validator(message=_('Enter only digits separated by commas.'))
A:django.core.validators.cleaned->self.clean(value)
A:django.core.validators.digitsdecimals->abs(exponent)
A:django.core.validators.digits->len(digit_tuple)
A:django.core.validators.decimals->abs(exponent)
A:django.core.validators.extension->Path(value.name).suffix[1:].lower()
django.core.validators.BaseValidator(self,limit_value,message=None)
django.core.validators.BaseValidator.__eq__(self,other)
django.core.validators.BaseValidator.__init__(self,limit_value,message=None)
django.core.validators.BaseValidator.clean(self,x)
django.core.validators.BaseValidator.compare(self,a,b)
django.core.validators.DecimalValidator(self,max_digits,decimal_places)
django.core.validators.DecimalValidator.__eq__(self,other)
django.core.validators.DecimalValidator.__init__(self,max_digits,decimal_places)
django.core.validators.EmailValidator(self,message=None,code=None,allowlist=None,*,whitelist=None)
django.core.validators.EmailValidator.__eq__(self,other)
django.core.validators.EmailValidator.__init__(self,message=None,code=None,allowlist=None,*,whitelist=None)
django.core.validators.EmailValidator.domain_whitelist(self)
django.core.validators.EmailValidator.domain_whitelist(self,allowlist)
django.core.validators.EmailValidator.validate_domain_part(self,domain_part)
django.core.validators.FileExtensionValidator(self,allowed_extensions=None,message=None,code=None)
django.core.validators.FileExtensionValidator.__eq__(self,other)
django.core.validators.FileExtensionValidator.__init__(self,allowed_extensions=None,message=None,code=None)
django.core.validators.MaxLengthValidator(BaseValidator)
django.core.validators.MaxLengthValidator.clean(self,x)
django.core.validators.MaxLengthValidator.compare(self,a,b)
django.core.validators.MaxValueValidator(BaseValidator)
django.core.validators.MaxValueValidator.compare(self,a,b)
django.core.validators.MinLengthValidator(BaseValidator)
django.core.validators.MinLengthValidator.clean(self,x)
django.core.validators.MinLengthValidator.compare(self,a,b)
django.core.validators.MinValueValidator(BaseValidator)
django.core.validators.MinValueValidator.compare(self,a,b)
django.core.validators.ProhibitNullCharactersValidator(self,message=None,code=None)
django.core.validators.ProhibitNullCharactersValidator.__eq__(self,other)
django.core.validators.ProhibitNullCharactersValidator.__init__(self,message=None,code=None)
django.core.validators.RegexValidator(self,regex=None,message=None,code=None,inverse_match=None,flags=None)
django.core.validators.RegexValidator.__eq__(self,other)
django.core.validators.RegexValidator.__init__(self,regex=None,message=None,code=None,inverse_match=None,flags=None)
django.core.validators.URLValidator(self,schemes=None,**kwargs)
django.core.validators.URLValidator.__init__(self,schemes=None,**kwargs)
django.core.validators.get_available_image_extensions()
django.core.validators.int_list_validator(sep=',',message=None,code='invalid',allow_negative=False)
django.core.validators.ip_address_validators(protocol,unpack_ipv4)
django.core.validators.validate_image_file_extension(value)
django.core.validators.validate_integer(value)
django.core.validators.validate_ipv46_address(value)
django.core.validators.validate_ipv4_address(value)
django.core.validators.validate_ipv6_address(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/signing.py----------------------------------------
A:django.core.signing._SEP_UNSAFE->_lazy_re_compile('^[A-z0-9-_=]*$')
A:django.core.signing.Signer->import_string(settings.SIGNING_BACKEND)
A:django.core.signing.key->force_bytes(settings.SECRET_KEY)
A:django.core.signing.(value, sig)->signed_value.rsplit(self.sep, 1)
A:django.core.signing.data->zlib.decompress(data)
A:django.core.signing.compressed->zlib.compress(data)
A:django.core.signing.base64d->self.unsign(signed_obj, **kwargs).encode()
A:django.core.signing.result->super().unsign(value)
A:django.core.signing.(value, timestamp)->super().unsign(value).rsplit(self.sep, 1)
A:django.core.signing.timestamp->django.utils.baseconv.base62.decode(timestamp)
A:django.core.signing.max_age->max_age.total_seconds().total_seconds()
django.core.signing.BadSignature(Exception)
django.core.signing.JSONSerializer
django.core.signing.JSONSerializer.dumps(self,obj)
django.core.signing.JSONSerializer.loads(self,data)
django.core.signing.SignatureExpired(BadSignature)
django.core.signing.Signer(self,key=None,sep=':',salt=None,algorithm=None)
django.core.signing.Signer.__init__(self,key=None,sep=':',salt=None,algorithm=None)
django.core.signing.Signer._legacy_signature(self,value)
django.core.signing.Signer.sign(self,value)
django.core.signing.Signer.sign_object(self,obj,serializer=JSONSerializer,compress=False)
django.core.signing.Signer.signature(self,value)
django.core.signing.Signer.unsign(self,signed_value)
django.core.signing.Signer.unsign_object(self,signed_obj,serializer=JSONSerializer,**kwargs)
django.core.signing.TimestampSigner(Signer)
django.core.signing.TimestampSigner.sign(self,value)
django.core.signing.TimestampSigner.timestamp(self)
django.core.signing.TimestampSigner.unsign(self,value,max_age=None)
django.core.signing.b64_decode(s)
django.core.signing.b64_encode(s)
django.core.signing.base64_hmac(salt,value,key,algorithm='sha1')
django.core.signing.dumps(obj,key=None,salt='django.core.signing',serializer=JSONSerializer,compress=False)
django.core.signing.get_cookie_signer(salt='django.core.signing.get_cookie_signer')
django.core.signing.loads(s,key=None,salt='django.core.signing',serializer=JSONSerializer,max_age=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/signals.py----------------------------------------
A:django.core.signals.request_started->Signal()
A:django.core.signals.request_finished->Signal()
A:django.core.signals.got_request_exception->Signal()
A:django.core.signals.setting_changed->Signal()


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/wsgi.py----------------------------------------
django.core.wsgi.get_wsgi_application()


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/exceptions.py----------------------------------------
A:django.core.exceptions.messages->ValidationError(messages)
A:django.core.exceptions.message->ValidationError(message)
django.core.exceptions.AppRegistryNotReady(Exception)
django.core.exceptions.BadRequest(Exception)
django.core.exceptions.DisallowedHost(SuspiciousOperation)
django.core.exceptions.DisallowedRedirect(SuspiciousOperation)
django.core.exceptions.EmptyResultSet(Exception)
django.core.exceptions.FieldDoesNotExist(Exception)
django.core.exceptions.FieldError(Exception)
django.core.exceptions.ImproperlyConfigured(Exception)
django.core.exceptions.MiddlewareNotUsed(Exception)
django.core.exceptions.MultipleObjectsReturned(Exception)
django.core.exceptions.ObjectDoesNotExist(Exception)
django.core.exceptions.PermissionDenied(Exception)
django.core.exceptions.RequestAborted(Exception)
django.core.exceptions.RequestDataTooBig(SuspiciousOperation)
django.core.exceptions.SuspiciousFileOperation(SuspiciousOperation)
django.core.exceptions.SuspiciousMultipartForm(SuspiciousOperation)
django.core.exceptions.SuspiciousOperation(Exception)
django.core.exceptions.SynchronousOnlyOperation(Exception)
django.core.exceptions.TooManyFieldsSent(SuspiciousOperation)
django.core.exceptions.ValidationError(self,message,code=None,params=None)
django.core.exceptions.ValidationError.__eq__(self,other)
django.core.exceptions.ValidationError.__hash__(self)
django.core.exceptions.ValidationError.__init__(self,message,code=None,params=None)
django.core.exceptions.ValidationError.__iter__(self)
django.core.exceptions.ValidationError.__repr__(self)
django.core.exceptions.ValidationError.__str__(self)
django.core.exceptions.ValidationError.message_dict(self)
django.core.exceptions.ValidationError.messages(self)
django.core.exceptions.ValidationError.update_error_dict(self,error_dict)
django.core.exceptions.ViewDoesNotExist(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/asgi.py----------------------------------------
django.core.asgi.get_asgi_application()


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/jsonl.py----------------------------------------
A:django.core.serializers.jsonl.self.json_kwargs->self.options.copy()
A:django.core.serializers.jsonl.stream_or_string->stream_or_string.split('\n').split('\n')
django.core.serializers.jsonl.Deserializer(stream_or_string,**options)
django.core.serializers.jsonl.Serializer(PythonSerializer)
django.core.serializers.jsonl.Serializer._init_options(self)
django.core.serializers.jsonl.Serializer.end_object(self,obj)
django.core.serializers.jsonl.Serializer.getvalue(self)
django.core.serializers.jsonl.Serializer.start_serialization(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/xml_serializer.py----------------------------------------
A:django.core.serializers.xml_serializer.self.xml->SimplerXMLGenerator(self.stream, self.options.get('encoding', settings.DEFAULT_CHARSET))
A:django.core.serializers.xml_serializer.attrs['pk']->str(obj_pk)
A:django.core.serializers.xml_serializer.value->json.loads(value, cls=field.decoder)
A:django.core.serializers.xml_serializer.related_att->getattr(obj, field.get_attname())
A:django.core.serializers.xml_serializer.related->related.natural_key().natural_key()
A:django.core.serializers.xml_serializer.natural->json.loads(value, cls=field.decoder).natural_key()
A:django.core.serializers.xml_serializer.m2m_iter->getattr(obj, '_prefetched_objects_cache', {}).get(field.name, getattr(obj, field.name).iterator())
A:django.core.serializers.xml_serializer.self.handle_forward_references->options.pop('handle_forward_references', False)
A:django.core.serializers.xml_serializer.self.event_stream->xml.dom.pulldom.parse(self.stream, self._make_parser())
A:django.core.serializers.xml_serializer.Model->self._get_model_from_node(node, 'model')
A:django.core.serializers.xml_serializer.data[Model._meta.pk.attname]->self._get_model_from_node(node, 'model')._meta.pk.to_python(node.getAttribute('pk'))
A:django.core.serializers.xml_serializer.field_name->field_node.getAttribute('name')
A:django.core.serializers.xml_serializer.field->self._get_model_from_node(node, 'model')._meta.get_field(field_name)
A:django.core.serializers.xml_serializer.obj->model._default_manager.db_manager(self.db).get_by_natural_key(*field_value)
A:django.core.serializers.xml_serializer.keys->n.getElementsByTagName('natural')
A:django.core.serializers.xml_serializer.obj_pk->model._meta.pk.to_python(n.getAttribute('pk'))
A:django.core.serializers.xml_serializer.field_value->getInnerText(node).strip()
A:django.core.serializers.xml_serializer.model_identifier->node.getAttribute(attr)
django.core.serializers.xml_serializer.DTDForbidden(self,name,sysid,pubid)
django.core.serializers.xml_serializer.DTDForbidden.__init__(self,name,sysid,pubid)
django.core.serializers.xml_serializer.DTDForbidden.__str__(self)
django.core.serializers.xml_serializer.DefusedExpatParser(self,*args,**kwargs)
django.core.serializers.xml_serializer.DefusedExpatParser.__init__(self,*args,**kwargs)
django.core.serializers.xml_serializer.DefusedExpatParser.entity_decl(self,name,is_parameter_entity,value,base,sysid,pubid,notation_name)
django.core.serializers.xml_serializer.DefusedExpatParser.external_entity_ref_handler(self,context,base,sysid,pubid)
django.core.serializers.xml_serializer.DefusedExpatParser.reset(self)
django.core.serializers.xml_serializer.DefusedExpatParser.start_doctype_decl(self,name,sysid,pubid,has_internal_subset)
django.core.serializers.xml_serializer.DefusedExpatParser.unparsed_entity_decl(self,name,base,sysid,pubid,notation_name)
django.core.serializers.xml_serializer.DefusedXmlException(ValueError)
django.core.serializers.xml_serializer.DefusedXmlException.__repr__(self)
django.core.serializers.xml_serializer.Deserializer(self,stream_or_string,*,using=DEFAULT_DB_ALIAS,ignorenonexistent=False,**options)
django.core.serializers.xml_serializer.Deserializer.__init__(self,stream_or_string,*,using=DEFAULT_DB_ALIAS,ignorenonexistent=False,**options)
django.core.serializers.xml_serializer.Deserializer.__next__(self)
django.core.serializers.xml_serializer.Deserializer._get_model_from_node(self,node,attr)
django.core.serializers.xml_serializer.Deserializer._handle_fk_field_node(self,node,field)
django.core.serializers.xml_serializer.Deserializer._handle_m2m_field_node(self,node,field)
django.core.serializers.xml_serializer.Deserializer._handle_object(self,node)
django.core.serializers.xml_serializer.Deserializer._make_parser(self)
django.core.serializers.xml_serializer.EntitiesForbidden(self,name,value,base,sysid,pubid,notation_name)
django.core.serializers.xml_serializer.EntitiesForbidden.__init__(self,name,value,base,sysid,pubid,notation_name)
django.core.serializers.xml_serializer.EntitiesForbidden.__str__(self)
django.core.serializers.xml_serializer.ExternalReferenceForbidden(self,context,base,sysid,pubid)
django.core.serializers.xml_serializer.ExternalReferenceForbidden.__init__(self,context,base,sysid,pubid)
django.core.serializers.xml_serializer.ExternalReferenceForbidden.__str__(self)
django.core.serializers.xml_serializer.Serializer(base.Serializer)
django.core.serializers.xml_serializer.Serializer._start_relational_field(self,field)
django.core.serializers.xml_serializer.Serializer.end_object(self,obj)
django.core.serializers.xml_serializer.Serializer.end_serialization(self)
django.core.serializers.xml_serializer.Serializer.handle_field(self,obj,field)
django.core.serializers.xml_serializer.Serializer.handle_fk_field(self,obj,field)
django.core.serializers.xml_serializer.Serializer.handle_m2m_field(self,obj,field)
django.core.serializers.xml_serializer.Serializer.indent(self,level)
django.core.serializers.xml_serializer.Serializer.start_object(self,obj)
django.core.serializers.xml_serializer.Serializer.start_serialization(self)
django.core.serializers.xml_serializer.getInnerText(node)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/base.py----------------------------------------
A:django.core.serializers.base.DEFER_FIELD->object()
A:django.core.serializers.base.progress_bar->self.progress_class(progress_output, object_count)
A:django.core.serializers.base.self.stream->StringIO(stream_or_string)
A:django.core.serializers.base.values->deserialize_m2m_values(field, field_value, using, handle_forward_references=False)
A:django.core.serializers.base.value->getattr(obj, field_name)
A:django.core.serializers.base.pk->data.get(Model._meta.pk.attname)
A:django.core.serializers.base.natural_key->Model(**data).natural_key()
A:django.core.serializers.base.data[Model._meta.pk.attname]->Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)
A:django.core.serializers.base.pks_iter->iter(field_value)
A:django.core.serializers.base.obj->default_manager.db_manager(using).get_by_natural_key(*field_value)
django.core.serializers.SerializerDoesNotExist(KeyError)
django.core.serializers.base.DeserializationError(Exception)
django.core.serializers.base.DeserializationError.WithData(cls,original_exc,model,fk,field_value)
django.core.serializers.base.DeserializedObject(self,obj,m2m_data=None,deferred_fields=None)
django.core.serializers.base.DeserializedObject.__init__(self,obj,m2m_data=None,deferred_fields=None)
django.core.serializers.base.DeserializedObject.__repr__(self)
django.core.serializers.base.DeserializedObject.save(self,save_m2m=True,using=None,**kwargs)
django.core.serializers.base.DeserializedObject.save_deferred_fields(self,using=None)
django.core.serializers.base.Deserializer(self,stream_or_string,**options)
django.core.serializers.base.Deserializer.__init__(self,stream_or_string,**options)
django.core.serializers.base.Deserializer.__iter__(self)
django.core.serializers.base.Deserializer.__next__(self)
django.core.serializers.base.M2MDeserializationError(self,original_exc,pk)
django.core.serializers.base.M2MDeserializationError.__init__(self,original_exc,pk)
django.core.serializers.base.ProgressBar(self,output,total_count)
django.core.serializers.base.ProgressBar.__init__(self,output,total_count)
django.core.serializers.base.ProgressBar.update(self,count)
django.core.serializers.base.SerializationError(Exception)
django.core.serializers.base.Serializer
django.core.serializers.base.Serializer.end_object(self,obj)
django.core.serializers.base.Serializer.end_serialization(self)
django.core.serializers.base.Serializer.getvalue(self)
django.core.serializers.base.Serializer.handle_field(self,obj,field)
django.core.serializers.base.Serializer.handle_fk_field(self,obj,field)
django.core.serializers.base.Serializer.handle_m2m_field(self,obj,field)
django.core.serializers.base.Serializer.serialize(self,queryset,*,stream=None,fields=None,use_natural_foreign_keys=False,use_natural_primary_keys=False,progress_output=None,object_count=0,**options)
django.core.serializers.base.Serializer.start_object(self,obj)
django.core.serializers.base.Serializer.start_serialization(self)
django.core.serializers.base.SerializerDoesNotExist(KeyError)
django.core.serializers.base.build_instance(Model,data,db)
django.core.serializers.base.deserialize_fk_value(field,field_value,using,handle_forward_references)
django.core.serializers.base.deserialize_m2m_values(field,field_value,using,handle_forward_references)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/pyyaml.py----------------------------------------
A:django.core.serializers.pyyaml.self._current[field.name]->str(getattr(obj, field.name))
A:django.core.serializers.pyyaml.stream_or_string->stream_or_string.decode().decode()
A:django.core.serializers.pyyaml.stream->StringIO(stream_or_string)
django.core.serializers.pyyaml.Deserializer(stream_or_string,**options)
django.core.serializers.pyyaml.DjangoSafeDumper(SafeDumper)
django.core.serializers.pyyaml.DjangoSafeDumper.represent_decimal(self,data)
django.core.serializers.pyyaml.DjangoSafeDumper.represent_ordered_dict(self,data)
django.core.serializers.pyyaml.Serializer(PythonSerializer)
django.core.serializers.pyyaml.Serializer.end_serialization(self)
django.core.serializers.pyyaml.Serializer.getvalue(self)
django.core.serializers.pyyaml.Serializer.handle_field(self,obj,field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/json.py----------------------------------------
A:django.core.serializers.json.self.json_kwargs->self.options.copy()
A:django.core.serializers.json.indent->self.options.get('indent')
A:django.core.serializers.json.stream_or_string->stream_or_string.decode().decode()
A:django.core.serializers.json.objects->json.loads(stream_or_string)
A:django.core.serializers.json.r->o.isoformat()
django.core.serializers.json.Deserializer(stream_or_string,**options)
django.core.serializers.json.DjangoJSONEncoder(json.JSONEncoder)
django.core.serializers.json.DjangoJSONEncoder.default(self,o)
django.core.serializers.json.Serializer(PythonSerializer)
django.core.serializers.json.Serializer._init_options(self)
django.core.serializers.json.Serializer.end_object(self,obj)
django.core.serializers.json.Serializer.end_serialization(self)
django.core.serializers.json.Serializer.getvalue(self)
django.core.serializers.json.Serializer.start_serialization(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/__init__.py----------------------------------------
A:django.core.serializers.__init__.module->type('BadSerializerModule', (), {'Deserializer': bad_serializer, 'Serializer': bad_serializer})
A:django.core.serializers.__init__.bad_serializer->BadSerializer(exc)
A:django.core.serializers.__init__.s->get_serializer(format)()
A:django.core.serializers.__init__.d->get_deserializer(format)
A:django.core.serializers.__init__.models->set()
A:django.core.serializers.__init__.model_list->app_config.get_models()
A:django.core.serializers.__init__.deps->getattr(model.natural_key, 'dependencies', [])
A:django.core.serializers.__init__.(model, deps)->model_dependencies.pop()
A:django.core.serializers.__init__.(model, _)->skipped.pop()
django.core.serializers.__init__.BadSerializer(self,exception)
django.core.serializers.__init__.BadSerializer.__init__(self,exception)
django.core.serializers.__init__._load_serializers()
django.core.serializers.__init__.deserialize(format,stream_or_string,**options)
django.core.serializers.__init__.get_deserializer(format)
django.core.serializers.__init__.get_public_serializer_formats()
django.core.serializers.__init__.get_serializer(format)
django.core.serializers.__init__.get_serializer_formats()
django.core.serializers.__init__.register_serializer(format,serializer_module,serializers=None)
django.core.serializers.__init__.serialize(format,queryset,**options)
django.core.serializers.__init__.sort_dependencies(app_list,allow_cycles=False)
django.core.serializers.__init__.unregister_serializer(format)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/serializers/python.py----------------------------------------
A:django.core.serializers.python.data['pk']->self._value_from_field(obj, obj._meta.pk)
A:django.core.serializers.python.value->django.core.serializers.base.deserialize_fk_value(field, field_value, using, handle_forward_references)
A:django.core.serializers.python.self._current[field.name]->self._value_from_field(obj, field)
A:django.core.serializers.python.related->getattr(obj, field.name)
A:django.core.serializers.python.m2m_iter->getattr(obj, '_prefetched_objects_cache', {}).get(field.name, getattr(obj, field.name).iterator())
A:django.core.serializers.python.handle_forward_references->options.pop('handle_forward_references', False)
A:django.core.serializers.python.Model->_get_model(d['model'])
A:django.core.serializers.python.data[Model._meta.pk.attname]->_get_model(d['model'])._meta.pk.to_python(d.get('pk'))
A:django.core.serializers.python.field->_get_model(d['model'])._meta.get_field(field_name)
A:django.core.serializers.python.values->django.core.serializers.base.deserialize_m2m_values(field, field_value, using, handle_forward_references)
A:django.core.serializers.python.data[field.name]->_get_model(d['model'])._meta.get_field(field_name).to_python(field_value)
A:django.core.serializers.python.obj->django.core.serializers.base.build_instance(Model, data, using)
django.core.serializers.python.Deserializer(object_list,*,using=DEFAULT_DB_ALIAS,ignorenonexistent=False,**options)
django.core.serializers.python.Serializer(base.Serializer)
django.core.serializers.python.Serializer._value_from_field(self,obj,field)
django.core.serializers.python.Serializer.end_object(self,obj)
django.core.serializers.python.Serializer.end_serialization(self)
django.core.serializers.python.Serializer.get_dump_object(self,obj)
django.core.serializers.python.Serializer.getvalue(self)
django.core.serializers.python.Serializer.handle_field(self,obj,field)
django.core.serializers.python.Serializer.handle_fk_field(self,obj,field)
django.core.serializers.python.Serializer.handle_m2m_field(self,obj,field)
django.core.serializers.python.Serializer.start_object(self,obj)
django.core.serializers.python.Serializer.start_serialization(self)
django.core.serializers.python._get_model(model_identifier)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/color.py----------------------------------------
A:django.core.management.color.reg_key->winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Console')
A:django.core.management.color.(reg_key_value, _)->winreg.QueryValueEx(reg_key, 'VirtualTerminalLevel')
A:django.core.management.color.style->Style()
A:django.core.management.color.color_settings->django.utils.termcolors.parse_color_setting(config_string)
A:django.core.management.color.format->django.utils.termcolors.parse_color_setting(config_string).get(role, {})
A:django.core.management.color.style_func->django.utils.termcolors.make_style(**format)
django.core.management.color.Style
django.core.management.color.color_style(force_color=False)
django.core.management.color.make_style(config_string='')
django.core.management.color.no_style()
django.core.management.color.supports_color()
django.core.management.color_style(force_color=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/utils.py----------------------------------------
A:django.core.management.utils.p->run(args, stdout=PIPE, stderr=PIPE, close_fds=os.name != 'nt')
A:django.core.management.utils.path->Path(path)
A:django.core.management.utils.pathext->os.environ.get('PATHEXT', '.COM;.EXE;.BAT;.CMD').split(os.pathsep)
A:django.core.management.utils.f->os.path.join(p, cmd)
A:django.core.management.utils.apps->set()
A:django.core.management.utils.models->set()
A:django.core.management.utils.model->django.apps.apps.get_model(label)
A:django.core.management.utils.app_config->django.apps.apps.get_app_config(label)
A:django.core.management.utils.parser->CommandParser(add_help=False, allow_abbrev=False)
A:django.core.management.utils.(options, _)->CommandParser(add_help=False, allow_abbrev=False).parse_known_args(argv[2:])
django.core.management.utils.find_command(cmd,path=None,pathext=None)
django.core.management.utils.get_command_line_option(argv,option)
django.core.management.utils.get_random_secret_key()
django.core.management.utils.handle_extensions(extensions)
django.core.management.utils.is_ignored_path(path,ignore_patterns)
django.core.management.utils.normalize_path_patterns(patterns)
django.core.management.utils.parse_apps_and_model_labels(labels)
django.core.management.utils.popen_wrapper(args,stdout_encoding='utf-8')


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/base.py----------------------------------------
A:django.core.management.base.saved_locale->django.utils.translation.get_language()
A:django.core.management.base.res->handle_func(*args, **kwargs)
A:django.core.management.base.self.stdout->OutputWrapper(options['stdout'])
A:django.core.management.base.self.stderr->OutputWrapper(options['stderr'])
A:django.core.management.base.self.style->no_style()
A:django.core.management.base.parser->self.create_parser(argv[0], argv[1])
A:django.core.management.base.options->self.create_parser(argv[0], argv[1]).parse_args(argv[2:])
A:django.core.management.base.cmd_options->vars(options)
A:django.core.management.base.args->vars(options).pop('args', ())
A:django.core.management.base.output->self.handle(*args, **options)
A:django.core.management.base.all_issues->django.core.checks.run_checks(app_configs=app_configs, tags=tags, include_deployment_checks=include_deployment_checks, databases=databases)
A:django.core.management.base.formatted->'\n'.join(sorted(formatted))
A:django.core.management.base.executor->MigrationExecutor(connections[DEFAULT_DB_ALIAS])
A:django.core.management.base.plan->MigrationExecutor(connections[DEFAULT_DB_ALIAS]).migration_plan(executor.loader.graph.leaf_nodes())
A:django.core.management.base.apps_waiting_migration->sorted({migration.app_label for (migration, backwards) in plan})
A:django.core.management.base.app_output->self.handle_app_config(app_config, **options)
A:django.core.management.base.label_output->self.handle_label(label, **options)
django.core.management.BaseCommand(self,stdout=None,stderr=None,no_color=False,force_color=False)
django.core.management.BaseCommand.add_arguments(self,parser)
django.core.management.BaseCommand.check(self,app_configs=None,tags=None,display_num_errors=False,include_deployment_checks=False,fail_level=checks.ERROR,databases=None)
django.core.management.BaseCommand.check_migrations(self)
django.core.management.BaseCommand.create_parser(self,prog_name,subcommand,**kwargs)
django.core.management.BaseCommand.execute(self,*args,**options)
django.core.management.BaseCommand.get_version(self)
django.core.management.BaseCommand.handle(self,*args,**options)
django.core.management.BaseCommand.print_help(self,prog_name,subcommand)
django.core.management.BaseCommand.run_from_argv(self,argv)
django.core.management.CommandError(self,*args,returncode=1,**kwargs)
django.core.management.CommandParser(self,*,missing_args_message=None,called_from_command_line=None,**kwargs)
django.core.management.CommandParser.error(self,message)
django.core.management.CommandParser.parse_args(self,args=None,namespace=None)
django.core.management.base.AppCommand(BaseCommand)
django.core.management.base.AppCommand.add_arguments(self,parser)
django.core.management.base.AppCommand.handle(self,*app_labels,**options)
django.core.management.base.AppCommand.handle_app_config(self,app_config,**options)
django.core.management.base.BaseCommand(self,stdout=None,stderr=None,no_color=False,force_color=False)
django.core.management.base.BaseCommand.__init__(self,stdout=None,stderr=None,no_color=False,force_color=False)
django.core.management.base.BaseCommand.add_arguments(self,parser)
django.core.management.base.BaseCommand.check(self,app_configs=None,tags=None,display_num_errors=False,include_deployment_checks=False,fail_level=checks.ERROR,databases=None)
django.core.management.base.BaseCommand.check_migrations(self)
django.core.management.base.BaseCommand.create_parser(self,prog_name,subcommand,**kwargs)
django.core.management.base.BaseCommand.execute(self,*args,**options)
django.core.management.base.BaseCommand.get_version(self)
django.core.management.base.BaseCommand.handle(self,*args,**options)
django.core.management.base.BaseCommand.print_help(self,prog_name,subcommand)
django.core.management.base.BaseCommand.run_from_argv(self,argv)
django.core.management.base.CommandError(self,*args,returncode=1,**kwargs)
django.core.management.base.CommandError.__init__(self,*args,returncode=1,**kwargs)
django.core.management.base.CommandParser(self,*,missing_args_message=None,called_from_command_line=None,**kwargs)
django.core.management.base.CommandParser.__init__(self,*,missing_args_message=None,called_from_command_line=None,**kwargs)
django.core.management.base.CommandParser.error(self,message)
django.core.management.base.CommandParser.parse_args(self,args=None,namespace=None)
django.core.management.base.DjangoHelpFormatter(HelpFormatter)
django.core.management.base.DjangoHelpFormatter._reordered_actions(self,actions)
django.core.management.base.DjangoHelpFormatter.add_arguments(self,actions)
django.core.management.base.DjangoHelpFormatter.add_usage(self,usage,actions,*args,**kwargs)
django.core.management.base.LabelCommand(BaseCommand)
django.core.management.base.LabelCommand.add_arguments(self,parser)
django.core.management.base.LabelCommand.handle(self,*labels,**options)
django.core.management.base.LabelCommand.handle_label(self,label,**options)
django.core.management.base.OutputWrapper(self,out,ending='\n')
django.core.management.base.OutputWrapper.__getattr__(self,name)
django.core.management.base.OutputWrapper.__init__(self,out,ending='\n')
django.core.management.base.OutputWrapper.flush(self)
django.core.management.base.OutputWrapper.isatty(self)
django.core.management.base.OutputWrapper.style_func(self)
django.core.management.base.OutputWrapper.style_func(self,style_func)
django.core.management.base.OutputWrapper.write(self,msg='',style_func=None,ending=None)
django.core.management.base.SystemCheckError(CommandError)
django.core.management.base.handle_default_options(options)
django.core.management.base.no_translations(handle_func)
django.core.management.handle_default_options(options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/sql.py----------------------------------------
A:django.core.management.sql.tables->connection.introspection.django_table_names(only_existing=True, include_views=False)
django.core.management.sql.emit_post_migrate_signal(verbosity,interactive,db,**kwargs)
django.core.management.sql.emit_pre_migrate_signal(verbosity,interactive,db,**kwargs)
django.core.management.sql.sql_flush(style,connection,reset_sequences=True,allow_cascade=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/templates.py----------------------------------------
A:django.core.management.templates.top_dir->os.path.abspath(os.path.expanduser(target))
A:django.core.management.templates.extensions->tuple(handle_extensions(options['extensions']))
A:django.core.management.templates.camel_case_value->''.join((x for x in name.title() if x != '_'))
A:django.core.management.templates.context->Context({**options, base_name: name, base_directory: top_dir, camel_case_name: camel_case_value, 'docs_version': get_docs_version(), 'django_version': django.__version__}, autoescape=False)
A:django.core.management.templates.template_dir->self.handle_template(options['template'], base_subdir)
A:django.core.management.templates.relative_dir->path_rest.replace(base_name, name)
A:django.core.management.templates.target_dir->os.path.join(top_dir, relative_dir)
A:django.core.management.templates.old_path->os.path.join(root, filename)
A:django.core.management.templates.new_path->os.path.join(top_dir, relative_dir, filename.replace(base_name, name))
A:django.core.management.templates.content->Engine().from_string(content).render(context)
A:django.core.management.templates.template->Engine().from_string(content)
A:django.core.management.templates.expanded_template->os.path.normpath(expanded_template)
A:django.core.management.templates.absolute_path->os.path.abspath(expanded_template)
A:django.core.management.templates.tmp->url.rstrip('/')
A:django.core.management.templates.tempdir->tempfile.mkdtemp(prefix=prefix, suffix='_extract')
A:django.core.management.templates.(filename, display_url)->cleanup_url(url)
A:django.core.management.templates.(the_path, info)->urlretrieve(url, os.path.join(tempdir, filename))
A:django.core.management.templates.content_disposition->info.get('content-disposition')
A:django.core.management.templates.(_, params)->cgi.parse_header(content_disposition)
A:django.core.management.templates.content_type->info.get('content-type')
A:django.core.management.templates.ext->mimetypes.guess_extension(content_type)
A:django.core.management.templates.guessed_path->os.path.join(tempdir, guessed_filename)
A:django.core.management.templates.(base, ext)->posixpath.splitext(the_path)
A:django.core.management.templates.scheme->Engine().from_string(content).split(':', 1)[0].lower()
A:django.core.management.templates.st->os.stat(filename)
django.core.management.templates.TemplateCommand(BaseCommand)
django.core.management.templates.TemplateCommand.add_arguments(self,parser)
django.core.management.templates.TemplateCommand.download(self,url)
django.core.management.templates.TemplateCommand.extract(self,filename)
django.core.management.templates.TemplateCommand.handle(self,app_or_project,name,target=None,**options)
django.core.management.templates.TemplateCommand.handle_template(self,template,subdir)
django.core.management.templates.TemplateCommand.is_url(self,template)
django.core.management.templates.TemplateCommand.make_writeable(self,filename)
django.core.management.templates.TemplateCommand.splitext(self,the_path)
django.core.management.templates.TemplateCommand.validate_name(self,name,name_or_dir='name')


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/__init__.py----------------------------------------
A:django.core.management.__init__.command_dir->os.path.join(management_dir, 'commands')
A:django.core.management.__init__.module->import_module('%s.management.commands.%s' % (app_name, name))
A:django.core.management.__init__.path->os.path.join(app_config.path, 'management')
A:django.core.management.__init__.command->load_command_class(app_name, command_name)
A:django.core.management.__init__.parser->CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)
A:django.core.management.__init__.parser_actions->list(get_actions(parser))
A:django.core.management.__init__.defaults->dict(defaults._get_kwargs(), **arg_options)
A:django.core.management.__init__.stealth_options->set(command.base_stealth_options + command.stealth_options)
A:django.core.management.__init__.valid_options->(dest_parameters | stealth_options).union(opt_mapping)
A:django.core.management.__init__.args->dict(defaults._get_kwargs(), **arg_options).pop('args', ())
A:django.core.management.__init__.self.prog_name->os.path.basename(self.argv[0])
A:django.core.management.__init__.usage->sorted(get_commands())
A:django.core.management.__init__.commands_dict->defaultdict(lambda : [])
A:django.core.management.__init__.style->color_style()
A:django.core.management.__init__.commands->get_commands()
A:django.core.management.__init__.possible_matches->get_close_matches(subcommand, commands)
A:django.core.management.__init__.klass->load_command_class(app_name, subcommand)
A:django.core.management.__init__.cword->int(os.environ['COMP_CWORD'])
A:django.core.management.__init__.subcommand_cls->self.fetch_command(cwords[0])
A:django.core.management.__init__.app_configs->django.apps.apps.get_app_configs()
A:django.core.management.__init__.options->sorted(((k, v) for (k, v) in options if k.startswith(curr)))
A:django.core.management.__init__.(options, args)->CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False).parse_known_args(self.argv[2:])
A:django.core.management.__init__.apps.all_models->defaultdict(dict)
A:django.core.management.__init__._parser->self.fetch_command('runserver').create_parser('django', 'runserver')
A:django.core.management.__init__.(_options, _args)->self.fetch_command('runserver').create_parser('django', 'runserver').parse_known_args(self.argv[2:])
A:django.core.management.__init__.utility->ManagementUtility(argv)
django.core.management.__init__.ManagementUtility(self,argv=None)
django.core.management.__init__.ManagementUtility.__init__(self,argv=None)
django.core.management.__init__.ManagementUtility.autocomplete(self)
django.core.management.__init__.ManagementUtility.execute(self)
django.core.management.__init__.ManagementUtility.fetch_command(self,subcommand)
django.core.management.__init__.ManagementUtility.main_help_text(self,commands_only=False)
django.core.management.__init__.call_command(command_name,*args,**options)
django.core.management.__init__.execute_from_command_line(argv=None)
django.core.management.__init__.find_commands(management_dir)
django.core.management.__init__.get_commands()
django.core.management.__init__.load_command_class(app_name,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/check.py----------------------------------------
A:django.core.management.commands.check.invalid_tag->next((tag for tag in tags if not checks.tag_exists(tag, include_deployment_checks)))
django.core.management.commands.check.Command(BaseCommand)
django.core.management.commands.check.Command.add_arguments(self,parser)
django.core.management.commands.check.Command.handle(self,*app_labels,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/sendtestemail.py----------------------------------------
django.core.management.commands.sendtestemail.Command(BaseCommand)
django.core.management.commands.sendtestemail.Command.add_arguments(self,parser)
django.core.management.commands.sendtestemail.Command.handle(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/test.py----------------------------------------
A:django.core.management.commands.test.self.test_runner->get_command_line_option(argv, '--testrunner')
A:django.core.management.commands.test.test_runner_class->get_runner(settings, self.test_runner)
A:django.core.management.commands.test.TestRunner->get_runner(settings, options['testrunner'])
A:django.core.management.commands.test.test_runner->TestRunner(**options)
A:django.core.management.commands.test.failures->TestRunner(**options).run_tests(test_labels)
django.core.management.commands.test.Command(BaseCommand)
django.core.management.commands.test.Command.add_arguments(self,parser)
django.core.management.commands.test.Command.handle(self,*test_labels,**options)
django.core.management.commands.test.Command.run_from_argv(self,argv)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/squashmigrations.py----------------------------------------
A:django.core.management.commands.squashmigrations.loader->MigrationLoader(connections[DEFAULT_DB_ALIAS])
A:django.core.management.commands.squashmigrations.migration->self.find_migration(loader, app_label, migration_name)
A:django.core.management.commands.squashmigrations.start_migration->self.find_migration(loader, app_label, start_migration_name)
A:django.core.management.commands.squashmigrations.start->MigrationLoader(connections[DEFAULT_DB_ALIAS]).get_migration(start_migration.app_label, start_migration.name)
A:django.core.management.commands.squashmigrations.start_index->migrations_to_squash.index(start)
A:django.core.management.commands.squashmigrations.answer->answer[0].lower()
A:django.core.management.commands.squashmigrations.dependencies->set()
A:django.core.management.commands.squashmigrations.optimizer->MigrationOptimizer()
A:django.core.management.commands.squashmigrations.new_operations->MigrationOptimizer().optimize(operations, migration.app_label)
A:django.core.management.commands.squashmigrations.subclass->type('Migration', (migrations.Migration,), {'dependencies': dependencies, 'operations': new_operations, 'replaces': replaces})
A:django.core.management.commands.squashmigrations.(prefix, _)->self.find_migration(loader, app_label, start_migration_name).name.split('_', 1)
A:django.core.management.commands.squashmigrations.new_migration->subclass(name, app_label)
A:django.core.management.commands.squashmigrations.writer->MigrationWriter(new_migration, include_header)
django.core.management.commands.squashmigrations.Command(BaseCommand)
django.core.management.commands.squashmigrations.Command.add_arguments(self,parser)
django.core.management.commands.squashmigrations.Command.find_migration(self,loader,app_label,name)
django.core.management.commands.squashmigrations.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/inspectdb.py----------------------------------------
A:django.core.management.commands.inspectdb.table_name_filter->options.get('table_name_filter')
A:django.core.management.commands.inspectdb.table_info->connection.introspection.get_table_list(cursor)
A:django.core.management.commands.inspectdb.relations->connection.introspection.get_relations(cursor, table_name)
A:django.core.management.commands.inspectdb.constraints->connection.introspection.get_constraints(cursor, table_name)
A:django.core.management.commands.inspectdb.primary_key_column->connection.introspection.get_primary_key_column(cursor, table_name)
A:django.core.management.commands.inspectdb.table_description->connection.introspection.get_table_description(cursor, table_name)
A:django.core.management.commands.inspectdb.(att_name, params, notes)->self.normalize_col_name(column_name, used_column_names, is_relation)
A:django.core.management.commands.inspectdb.(field_type, field_params, field_notes)->self.get_field_type(connection, table_name, row)
A:django.core.management.commands.inspectdb.is_view->any((info.name == table_name and info.type == 'v' for info in table_info))
A:django.core.management.commands.inspectdb.is_partition->any((info.name == table_name and info.type == 'p' for info in table_info))
A:django.core.management.commands.inspectdb.new_name->new_name.replace(LOOKUP_SEP, '_').replace(LOOKUP_SEP, '_')
A:django.core.management.commands.inspectdb.(new_name, num_repl)->re.subn('\\W', '_', new_name)
A:django.core.management.commands.inspectdb.field_type->connection.introspection.get_field_type(row.type_code, row)
A:django.core.management.commands.inspectdb.field_params['max_length']->int(row.internal_size)
django.core.management.commands.inspectdb.Command(BaseCommand)
django.core.management.commands.inspectdb.Command.add_arguments(self,parser)
django.core.management.commands.inspectdb.Command.get_field_type(self,connection,table_name,row)
django.core.management.commands.inspectdb.Command.get_meta(self,table_name,constraints,column_to_field_name,is_view,is_partition)
django.core.management.commands.inspectdb.Command.handle(self,**options)
django.core.management.commands.inspectdb.Command.handle_inspection(self,options)
django.core.management.commands.inspectdb.Command.normalize_col_name(self,col_name,used_column_names,is_relation)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/makemessages.py----------------------------------------
A:django.core.management.commands.makemessages.plural_forms_re->_lazy_re_compile('^(?P<value>"Plural-Forms.+?\\\\n")\\s*$', re.MULTILINE | re.DOTALL)
A:django.core.management.commands.makemessages.NO_LOCALE_DIR->object()
A:django.core.management.commands.makemessages.extension->{'djangojs': 'c', 'django': 'py'}.get(self.domain)
A:django.core.management.commands.makemessages.src_data->fp.read()
A:django.core.management.commands.makemessages.content->templatize(src_data, origin=self.path[2:])
A:django.core.management.commands.makemessages.lines_list->raw_contents.splitlines()
A:django.core.management.commands.makemessages.pot_lines->'\n'.join(lines).splitlines()
A:django.core.management.commands.makemessages.lines->dropwhile(len, pot_lines)
A:django.core.management.commands.makemessages.line->line.replace('charset=CHARSET', 'charset=UTF-8').replace('charset=CHARSET', 'charset=UTF-8')
A:django.core.management.commands.makemessages.msgs->'\n'.join(lines)
A:django.core.management.commands.makemessages.self.ignore_patterns->list(set(ignore_patterns))
A:django.core.management.commands.makemessages.self.extensions->handle_extensions(exts)
A:django.core.management.commands.makemessages.looks_like_locale->re.compile('[a-z]{2}')
A:django.core.management.commands.makemessages.locale_dirs->filter(os.path.isdir, glob.glob('%s/*' % self.default_locale_path))
A:django.core.management.commands.makemessages.locales->set(locales).difference(exclude)
A:django.core.management.commands.makemessages.potfiles->self.build_potfiles()
A:django.core.management.commands.makemessages.(out, err, status)->popen_wrapper(['xgettext', '--version'], stdout_encoding=DEFAULT_LOCALE_ENCODING)
A:django.core.management.commands.makemessages.m->_lazy_re_compile('^(?P<value>"Plural-Forms.+?\\\\n")\\s*$', re.MULTILINE | re.DOTALL).search(fp.read())
A:django.core.management.commands.makemessages.file_list->self.find_files('.')
A:django.core.management.commands.makemessages.potfile->os.path.join(locale_dir, '%s.pot' % self.domain)
A:django.core.management.commands.makemessages.(msgs, errors, status)->popen_wrapper(args)
A:django.core.management.commands.makemessages.pot_path->os.path.join(path, '%s.pot' % self.domain)
A:django.core.management.commands.makemessages.file_path->os.path.normpath(build_files[0].path)
A:django.core.management.commands.makemessages.file_group->file_groups.setdefault(translatable.locale_dir, [])
A:django.core.management.commands.makemessages.build_file->self.build_file_class(self, self.domain, translatable)
A:django.core.management.commands.makemessages.basedir->os.path.join(os.path.dirname(potfile), locale, 'LC_MESSAGES')
A:django.core.management.commands.makemessages.pofile->os.path.join(basedir, '%s.po' % self.domain)
A:django.core.management.commands.makemessages.django_dir->os.path.normpath(os.path.join(os.path.dirname(django.__file__)))
A:django.core.management.commands.makemessages.django_po->os.path.join(django_dir, 'conf', 'locale', locale, 'LC_MESSAGES', '%s.po' % domain)
django.core.management.commands.makemessages.BuildFile(self,command,domain,translatable)
django.core.management.commands.makemessages.BuildFile.__init__(self,command,domain,translatable)
django.core.management.commands.makemessages.BuildFile.cleanup(self)
django.core.management.commands.makemessages.BuildFile.is_templatized(self)
django.core.management.commands.makemessages.BuildFile.path(self)
django.core.management.commands.makemessages.BuildFile.postprocess_messages(self,msgs)
django.core.management.commands.makemessages.BuildFile.preprocess(self)
django.core.management.commands.makemessages.BuildFile.work_path(self)
django.core.management.commands.makemessages.Command(BaseCommand)
django.core.management.commands.makemessages.Command.add_arguments(self,parser)
django.core.management.commands.makemessages.Command.build_potfiles(self)
django.core.management.commands.makemessages.Command.copy_plural_forms(self,msgs,locale)
django.core.management.commands.makemessages.Command.find_files(self,root)
django.core.management.commands.makemessages.Command.gettext_version(self)
django.core.management.commands.makemessages.Command.handle(self,*args,**options)
django.core.management.commands.makemessages.Command.process_files(self,file_list)
django.core.management.commands.makemessages.Command.process_locale_dir(self,locale_dir,files)
django.core.management.commands.makemessages.Command.remove_potfiles(self)
django.core.management.commands.makemessages.Command.settings_available(self)
django.core.management.commands.makemessages.Command.write_po_file(self,potfile,locale)
django.core.management.commands.makemessages.TranslatableFile(self,dirpath,file_name,locale_dir)
django.core.management.commands.makemessages.TranslatableFile.__eq__(self,other)
django.core.management.commands.makemessages.TranslatableFile.__init__(self,dirpath,file_name,locale_dir)
django.core.management.commands.makemessages.TranslatableFile.__lt__(self,other)
django.core.management.commands.makemessages.TranslatableFile.__repr__(self)
django.core.management.commands.makemessages.TranslatableFile.path(self)
django.core.management.commands.makemessages.check_programs(*programs)
django.core.management.commands.makemessages.normalize_eols(raw_contents)
django.core.management.commands.makemessages.write_pot_file(potfile,msgs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/testserver.py----------------------------------------
A:django.core.management.commands.testserver.db_name->django.db.connection.creation.create_test_db(verbosity=verbosity, autoclobber=not interactive, serialize=False)
django.core.management.commands.testserver.Command(BaseCommand)
django.core.management.commands.testserver.Command.add_arguments(self,parser)
django.core.management.commands.testserver.Command.handle(self,*fixture_labels,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/runserver.py----------------------------------------
A:django.core.management.commands.runserver.naiveip_re->_lazy_re_compile('^(?:\n(?P<addr>\n    (?P<ipv4>\\d{1,3}(?:\\.\\d{1,3}){3}) |         # IPv4 address\n    (?P<ipv6>\\[[a-fA-F0-9:]+\\]) |               # IPv6 address\n    (?P<fqdn>[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*) # FQDN\n):)?(?P<port>\\d+)$', re.X)
A:django.core.management.commands.runserver.m->re.match(naiveip_re, options['addrport'])
A:django.core.management.commands.runserver.(self.addr, _ipv4, _ipv6, _fqdn, self.port)->re.match(naiveip_re, options['addrport']).groups()
A:django.core.management.commands.runserver.shutdown_message->options.get('shutdown_message', '')
A:django.core.management.commands.runserver.now->datetime.datetime.now().strftime('%B %d, %Y - %X')
A:django.core.management.commands.runserver.handler->self.get_handler(*args, **options)
django.core.management.commands.runserver.Command(BaseCommand)
django.core.management.commands.runserver.Command.add_arguments(self,parser)
django.core.management.commands.runserver.Command.execute(self,*args,**options)
django.core.management.commands.runserver.Command.get_handler(self,*args,**options)
django.core.management.commands.runserver.Command.handle(self,*args,**options)
django.core.management.commands.runserver.Command.inner_run(self,*args,**options)
django.core.management.commands.runserver.Command.run(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/showmigrations.py----------------------------------------
A:django.core.management.commands.showmigrations.formats->parser.add_mutually_exclusive_group()
A:django.core.management.commands.showmigrations.loader->MigrationLoader(connection)
A:django.core.management.commands.showmigrations.app_names->sorted(loader.migrated_apps)
A:django.core.management.commands.showmigrations.shown->set()
A:django.core.management.commands.showmigrations.applied_migration->MigrationLoader(connection).applied_migrations.get(plan_node)
A:django.core.management.commands.showmigrations.targets->graph.leaf_nodes()
A:django.core.management.commands.showmigrations.seen->set()
A:django.core.management.commands.showmigrations.deps->print_deps(node)
django.core.management.commands.showmigrations.Command(BaseCommand)
django.core.management.commands.showmigrations.Command._validate_app_names(self,loader,app_names)
django.core.management.commands.showmigrations.Command.add_arguments(self,parser)
django.core.management.commands.showmigrations.Command.handle(self,*args,**options)
django.core.management.commands.showmigrations.Command.show_list(self,connection,app_names=None)
django.core.management.commands.showmigrations.Command.show_plan(self,connection,app_names=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/startapp.py----------------------------------------
A:django.core.management.commands.startapp.app_name->options.pop('name')
A:django.core.management.commands.startapp.target->options.pop('directory')
django.core.management.commands.startapp.Command(TemplateCommand)
django.core.management.commands.startapp.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/sqlflush.py----------------------------------------
A:django.core.management.commands.sqlflush.sql_statements->sql_flush(self.style, connections[options['database']])
django.core.management.commands.sqlflush.Command(BaseCommand)
django.core.management.commands.sqlflush.Command.add_arguments(self,parser)
django.core.management.commands.sqlflush.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/sqlsequencereset.py----------------------------------------
A:django.core.management.commands.sqlsequencereset.models->app_config.get_models(include_auto_created=True)
A:django.core.management.commands.sqlsequencereset.statements->connection.ops.sequence_reset_sql(self.style, models)
django.core.management.commands.sqlsequencereset.Command(AppCommand)
django.core.management.commands.sqlsequencereset.Command.add_arguments(self,parser)
django.core.management.commands.sqlsequencereset.Command.handle_app_config(self,app_config,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/compilemessages.py----------------------------------------
A:django.core.management.commands.compilemessages.sample->f.read(4)
A:django.core.management.commands.compilemessages.ignore_patterns->set(options['ignore_patterns'])
A:django.core.management.commands.compilemessages.basedirs->set(map(os.path.abspath, filter(os.path.isdir, basedirs)))
A:django.core.management.commands.compilemessages.locale_dirs->filter(os.path.isdir, glob.glob('%s/*' % basedir))
A:django.core.management.commands.compilemessages.locales->set(locales).difference(exclude)
A:django.core.management.commands.compilemessages.mo_path->po_path.with_suffix('.mo')
A:django.core.management.commands.compilemessages.(output, errors, status)->future.result()
django.core.management.commands.compilemessages.Command(BaseCommand)
django.core.management.commands.compilemessages.Command.add_arguments(self,parser)
django.core.management.commands.compilemessages.Command.compile_messages(self,locations)
django.core.management.commands.compilemessages.Command.handle(self,**options)
django.core.management.commands.compilemessages.has_bom(fn)
django.core.management.commands.compilemessages.is_writable(path)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/startproject.py----------------------------------------
A:django.core.management.commands.startproject.project_name->options.pop('name')
A:django.core.management.commands.startproject.target->options.pop('directory')
django.core.management.commands.startproject.Command(TemplateCommand)
django.core.management.commands.startproject.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/flush.py----------------------------------------
A:django.core.management.commands.flush.reset_sequences->options.get('reset_sequences', True)
A:django.core.management.commands.flush.allow_cascade->options.get('allow_cascade', False)
A:django.core.management.commands.flush.inhibit_post_migrate->options.get('inhibit_post_migrate', False)
A:django.core.management.commands.flush.self.style->no_style()
A:django.core.management.commands.flush.sql_list->sql_flush(self.style, connection, reset_sequences=reset_sequences, allow_cascade=allow_cascade)
A:django.core.management.commands.flush.confirm->input('You have requested a flush of the database.\nThis will IRREVERSIBLY DESTROY all data currently in the "%s" database,\nand return each table to an empty state.\nAre you sure you want to do this?\n\n    Type \'yes\' to continue, or \'no\' to cancel: ' % connection.settings_dict['NAME'])
django.core.management.commands.flush.Command(BaseCommand)
django.core.management.commands.flush.Command.add_arguments(self,parser)
django.core.management.commands.flush.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/shell.py----------------------------------------
A:django.core.management.commands.shell.readline_doc->getattr(readline, '__doc__', '')
A:django.core.management.commands.shell.pythonrc_code->handle.read()
django.core.management.commands.shell.Command(BaseCommand)
django.core.management.commands.shell.Command.add_arguments(self,parser)
django.core.management.commands.shell.Command.bpython(self,options)
django.core.management.commands.shell.Command.handle(self,**options)
django.core.management.commands.shell.Command.ipython(self,options)
django.core.management.commands.shell.Command.python(self,options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/sqlmigrate.py----------------------------------------
A:django.core.management.commands.sqlmigrate.loader->MigrationLoader(connection, replace_migrations=False)
A:django.core.management.commands.sqlmigrate.migration->MigrationLoader(connection, replace_migrations=False).get_migration_by_prefix(app_label, migration_name)
A:django.core.management.commands.sqlmigrate.sql_statements->MigrationLoader(connection, replace_migrations=False).collect_sql(plan)
django.core.management.commands.sqlmigrate.Command(BaseCommand)
django.core.management.commands.sqlmigrate.Command.add_arguments(self,parser)
django.core.management.commands.sqlmigrate.Command.execute(self,*args,**options)
django.core.management.commands.sqlmigrate.Command.handle(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/migrate.py----------------------------------------
A:django.core.management.commands.migrate.executor->MigrationExecutor(connection, self.migration_progress_callback)
A:django.core.management.commands.migrate.conflicts->MigrationExecutor(connection, self.migration_progress_callback).loader.detect_conflicts()
A:django.core.management.commands.migrate.name_str->'; '.join(('%s in %s' % (', '.join(names), app) for (app, names) in conflicts.items()))
A:django.core.management.commands.migrate.migration->MigrationExecutor(connection, self.migration_progress_callback).loader.get_migration_by_prefix(app_label, migration_name)
A:django.core.management.commands.migrate.targets->MigrationExecutor(connection, self.migration_progress_callback).loader.graph.leaf_nodes()
A:django.core.management.commands.migrate.plan->MigrationExecutor(connection, self.migration_progress_callback).migration_plan(targets)
A:django.core.management.commands.migrate.(message, is_error)->self.describe_operation(operation, backwards)
A:django.core.management.commands.migrate.pre_migrate_state->MigrationExecutor(connection, self.migration_progress_callback)._create_project_state(with_applied_migrations=True)
A:django.core.management.commands.migrate.autodetector->MigrationAutodetector(executor.loader.project_state(), ProjectState.from_apps(apps))
A:django.core.management.commands.migrate.changes->MigrationAutodetector(executor.loader.project_state(), ProjectState.from_apps(apps)).changes(graph=executor.loader.graph)
A:django.core.management.commands.migrate.post_migrate_state->MigrationExecutor(connection, self.migration_progress_callback).migrate(targets, plan=plan, state=pre_migrate_state.clone(), fake=fake, fake_initial=fake_initial)
A:django.core.management.commands.migrate.self.start->time.monotonic()
A:django.core.management.commands.migrate.tables->connection.introspection.table_names(cursor)
A:django.core.management.commands.migrate.action->str(action).replace('\n', '')
A:django.core.management.commands.migrate.truncated->Truncator(action)
django.core.management.commands.migrate.Command(BaseCommand)
django.core.management.commands.migrate.Command.add_arguments(self,parser)
django.core.management.commands.migrate.Command.describe_operation(operation,backwards)
django.core.management.commands.migrate.Command.handle(self,*args,**options)
django.core.management.commands.migrate.Command.migration_progress_callback(self,action,migration=None,fake=False)
django.core.management.commands.migrate.Command.sync_apps(self,connection,app_labels)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/dbshell.py----------------------------------------
A:django.core.management.commands.dbshell.parameters->parser.add_argument_group('parameters', prefix_chars='--')
django.core.management.commands.dbshell.Command(BaseCommand)
django.core.management.commands.dbshell.Command.add_arguments(self,parser)
django.core.management.commands.dbshell.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/dumpdata.py----------------------------------------
A:django.core.management.commands.dumpdata.(excluded_models, excluded_apps)->parse_apps_and_model_labels(excludes)
A:django.core.management.commands.dumpdata.app_list->dict.fromkeys((app_config for app_config in apps.get_app_configs() if app_config.models_module is not None and app_config not in excluded_apps))
A:django.core.management.commands.dumpdata.(app_label, model_label)->label.split('.')
A:django.core.management.commands.dumpdata.app_config->django.apps.apps.get_app_config(app_label)
A:django.core.management.commands.dumpdata.model->django.apps.apps.get_app_config(app_label).get_model(model_label)
A:django.core.management.commands.dumpdata.app_list_value->dict.fromkeys((app_config for app_config in apps.get_app_configs() if app_config.models_module is not None and app_config not in excluded_apps)).setdefault(app_config, [])
A:django.core.management.commands.dumpdata.models->django.core.serializers.sort_dependencies(app_list.items(), allow_cycles=True)
A:django.core.management.commands.dumpdata.queryset->queryset.filter(pk__in=primary_keys).filter(pk__in=primary_keys)
A:django.core.management.commands.dumpdata.object_count->sum(get_objects(count_only=True))
A:django.core.management.commands.dumpdata.(file_root, file_ext)->os.path.splitext(output)
A:django.core.management.commands.dumpdata.file_name->os.path.basename(file_path)
A:django.core.management.commands.dumpdata.stream->open_method(file_path, 'wt', **kwargs)
django.core.management.commands.dumpdata.Command(BaseCommand)
django.core.management.commands.dumpdata.Command.add_arguments(self,parser)
django.core.management.commands.dumpdata.Command.handle(self,*app_labels,**options)
django.core.management.commands.dumpdata.ProxyModelWarning(Warning)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/makemigrations.py----------------------------------------
A:django.core.management.commands.makemigrations.app_labels->set(app_labels)
A:django.core.management.commands.makemigrations.loader->MigrationLoader(None, ignore_no_migrations=True)
A:django.core.management.commands.makemigrations.conflicts->MigrationLoader(None, ignore_no_migrations=True).detect_conflicts()
A:django.core.management.commands.makemigrations.name_str->'; '.join(('%s in %s' % (', '.join(names), app) for (app, names) in conflicts.items()))
A:django.core.management.commands.makemigrations.questioner->MigrationQuestioner(defaults={'ask_merge': True})
A:django.core.management.commands.makemigrations.autodetector->MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner)
A:django.core.management.commands.makemigrations.changes->MigrationAutodetector(loader.project_state(), ProjectState.from_apps(apps), questioner).changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)
A:django.core.management.commands.makemigrations.writer->MigrationWriter(new_migration, self.include_header)
A:django.core.management.commands.makemigrations.migration_string->MigrationWriter(new_migration, self.include_header).as_string()
A:django.core.management.commands.makemigrations.migrations_directory->os.path.dirname(writer.path)
A:django.core.management.commands.makemigrations.init_path->os.path.join(migrations_directory, '__init__.py')
A:django.core.management.commands.makemigrations.migration->MigrationLoader(None, ignore_no_migrations=True).get_migration(app_label, migration_name)
A:django.core.management.commands.makemigrations.merge_migrations_generations->zip(*(m.ancestry for m in merge_migrations))
A:django.core.management.commands.makemigrations.common_ancestor_count->sum((1 for common_ancestor_generation in takewhile(all_items_equal, merge_migrations_generations)))
A:django.core.management.commands.makemigrations.migration.merged_operations->sum(migrations_ops, [])
A:django.core.management.commands.makemigrations.biggest_number->max((x for x in numbers if x is not None))
A:django.core.management.commands.makemigrations.subclass->type('Migration', (Migration,), {'dependencies': [(app_label, migration.name) for migration in merge_migrations]})
A:django.core.management.commands.makemigrations.leaf_names->'_'.join(sorted((migration.name for migration in merge_migrations)))
A:django.core.management.commands.makemigrations.migration_name->'_'.join(parts)
A:django.core.management.commands.makemigrations.new_migration->subclass(migration_name, app_label)
django.core.management.commands.makemigrations.Command(BaseCommand)
django.core.management.commands.makemigrations.Command.add_arguments(self,parser)
django.core.management.commands.makemigrations.Command.handle(self,*app_labels,**options)
django.core.management.commands.makemigrations.Command.handle_merge(self,loader,conflicts)
django.core.management.commands.makemigrations.Command.write_migration_files(self,changes)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/createcachetable.py----------------------------------------
A:django.core.management.commands.createcachetable.cache->BaseDatabaseCache(tablename, {})
A:django.core.management.commands.createcachetable.full_statement->'\n'.join(full_statement)
django.core.management.commands.createcachetable.Command(BaseCommand)
django.core.management.commands.createcachetable.Command.add_arguments(self,parser)
django.core.management.commands.createcachetable.Command.create_table(self,database,tablename,dry_run)
django.core.management.commands.createcachetable.Command.handle(self,*tablenames,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/diffsettings.py----------------------------------------
A:django.core.management.commands.diffsettings.user_settings->module_to_dict(settings._wrapped)
A:django.core.management.commands.diffsettings.default_settings->module_to_dict(Settings(default) if default else global_settings)
django.core.management.commands.diffsettings.Command(BaseCommand)
django.core.management.commands.diffsettings.Command.add_arguments(self,parser)
django.core.management.commands.diffsettings.Command.handle(self,**options)
django.core.management.commands.diffsettings.Command.output_hash(self,user_settings,default_settings,**options)
django.core.management.commands.diffsettings.Command.output_unified(self,user_settings,default_settings,**options)
django.core.management.commands.diffsettings.module_to_dict(module,omittable=lambdak:k.startswith('_')ornotk.isupper())


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/management/commands/loaddata.py----------------------------------------
A:django.core.management.commands.loaddata.(self.excluded_models, self.excluded_apps)->parse_apps_and_model_labels(options['exclude'])
A:django.core.management.commands.loaddata.self.models->set()
A:django.core.management.commands.loaddata.self.serialization_formats->django.core.serializers.get_public_serializer_formats()
A:django.core.management.commands.loaddata.sequence_sql->connection.ops.sequence_reset_sql(no_style(), self.models)
A:django.core.management.commands.loaddata.(_, ser_fmt, cmp_fmt)->self.parse_name(os.path.basename(fixture_file))
A:django.core.management.commands.loaddata.fixture->open_method(fixture_file, mode)
A:django.core.management.commands.loaddata.objects->django.core.serializers.deserialize(ser_fmt, fixture, using=self.using, ignorenonexistent=self.ignore, handle_forward_references=True)
A:django.core.management.commands.loaddata.(fixture_name, ser_fmt, cmp_fmt)->self.parse_name(fixture_label)
A:django.core.management.commands.loaddata.fixture_name->os.path.basename(fixture_name)
A:django.core.management.commands.loaddata.path->os.path.join(fixture_dir, fixture_name)
A:django.core.management.commands.loaddata.app_dir->os.path.join(app_config.path, 'fixtures')
A:django.core.management.commands.loaddata.parts->os.path.basename(fixture_name).rsplit('.', 2)
A:django.core.management.commands.loaddata.name->'.'.join(parts)
django.core.management.commands.loaddata.Command(BaseCommand)
django.core.management.commands.loaddata.Command.add_arguments(self,parser)
django.core.management.commands.loaddata.Command.find_fixtures(self,fixture_label)
django.core.management.commands.loaddata.Command.fixture_dirs(self)
django.core.management.commands.loaddata.Command.handle(self,*fixture_labels,**options)
django.core.management.commands.loaddata.Command.load_label(self,fixture_label)
django.core.management.commands.loaddata.Command.loaddata(self,fixture_labels)
django.core.management.commands.loaddata.Command.parse_name(self,fixture_name)
django.core.management.commands.loaddata.SingleZipReader(self,*args,**kwargs)
django.core.management.commands.loaddata.SingleZipReader.__init__(self,*args,**kwargs)
django.core.management.commands.loaddata.SingleZipReader.read(self)
django.core.management.commands.loaddata.humanize(dirname)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/utils.py----------------------------------------
A:django.core.cache.utils.hasher->hashlib.md5()
django.core.cache.utils.make_template_fragment_key(fragment_name,vary_on=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/__init__.py----------------------------------------
A:django.core.cache.__init__.params->self.settings[alias].copy()
A:django.core.cache.__init__.backend->self.settings[alias].copy().pop('BACKEND')
A:django.core.cache.__init__.location->self.settings[alias].copy().pop('LOCATION', '')
A:django.core.cache.__init__.backend_cls->import_string(backend)
A:django.core.cache.__init__.caches->CacheHandler()
A:django.core.cache.__init__.cache->ConnectionProxy(caches, DEFAULT_CACHE_ALIAS)
django.core.cache.__init__.CacheHandler(BaseConnectionHandler)
django.core.cache.__init__.CacheHandler.create_connection(self,alias)
django.core.cache.__init__.close_caches(**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/filebased.py----------------------------------------
A:django.core.cache.backends.filebased.self._dir->os.path.abspath(dir)
A:django.core.cache.backends.filebased.fname->self._key_to_file(key, version)
A:django.core.cache.backends.filebased.expiry->self.get_backend_timeout(timeout)
A:django.core.cache.backends.filebased.(fd, tmp_path)->tempfile.mkstemp(dir=self._dir)
A:django.core.cache.backends.filebased.previous_value->pickle.loads(zlib.decompress(f.read()))
A:django.core.cache.backends.filebased.filelist->random.sample(filelist, int(num_entries / self._cull_frequency))
A:django.core.cache.backends.filebased.num_entries->len(filelist)
A:django.core.cache.backends.filebased.old_umask->os.umask(63)
A:django.core.cache.backends.filebased.key->self.make_key(key, version=version)
A:django.core.cache.backends.filebased.exp->pickle.load(f)
django.core.cache.backends.filebased.FileBasedCache(self,dir,params)
django.core.cache.backends.filebased.FileBasedCache.__init__(self,dir,params)
django.core.cache.backends.filebased.FileBasedCache._createdir(self)
django.core.cache.backends.filebased.FileBasedCache._cull(self)
django.core.cache.backends.filebased.FileBasedCache._delete(self,fname)
django.core.cache.backends.filebased.FileBasedCache._is_expired(self,f)
django.core.cache.backends.filebased.FileBasedCache._key_to_file(self,key,version=None)
django.core.cache.backends.filebased.FileBasedCache._list_cache_files(self)
django.core.cache.backends.filebased.FileBasedCache._write_content(self,file,timeout,value)
django.core.cache.backends.filebased.FileBasedCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.filebased.FileBasedCache.clear(self)
django.core.cache.backends.filebased.FileBasedCache.delete(self,key,version=None)
django.core.cache.backends.filebased.FileBasedCache.get(self,key,default=None,version=None)
django.core.cache.backends.filebased.FileBasedCache.has_key(self,key,version=None)
django.core.cache.backends.filebased.FileBasedCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.filebased.FileBasedCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/locmem.py----------------------------------------
A:django.core.cache.backends.locmem.self._cache->_caches.setdefault(name, OrderedDict())
A:django.core.cache.backends.locmem.self._expire_info->_expire_info.setdefault(name, {})
A:django.core.cache.backends.locmem.self._lock->_locks.setdefault(name, Lock())
A:django.core.cache.backends.locmem.key->self.make_key(key, version=version)
A:django.core.cache.backends.locmem.pickled->pickle.dumps(new_value, self.pickle_protocol)
A:django.core.cache.backends.locmem.self._expire_info[key]->self.get_backend_timeout(timeout)
A:django.core.cache.backends.locmem.value->pickle.loads(pickled)
A:django.core.cache.backends.locmem.exp->self._expire_info.get(key, -1)
A:django.core.cache.backends.locmem.(key, _)->self._cache.popitem()
django.core.cache.backends.locmem.LocMemCache(self,name,params)
django.core.cache.backends.locmem.LocMemCache.__init__(self,name,params)
django.core.cache.backends.locmem.LocMemCache._cull(self)
django.core.cache.backends.locmem.LocMemCache._delete(self,key)
django.core.cache.backends.locmem.LocMemCache._has_expired(self,key)
django.core.cache.backends.locmem.LocMemCache._set(self,key,value,timeout=DEFAULT_TIMEOUT)
django.core.cache.backends.locmem.LocMemCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.locmem.LocMemCache.clear(self)
django.core.cache.backends.locmem.LocMemCache.delete(self,key,version=None)
django.core.cache.backends.locmem.LocMemCache.get(self,key,default=None,version=None)
django.core.cache.backends.locmem.LocMemCache.has_key(self,key,version=None)
django.core.cache.backends.locmem.LocMemCache.incr(self,key,delta=1,version=None)
django.core.cache.backends.locmem.LocMemCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.locmem.LocMemCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/dummy.py----------------------------------------
A:django.core.cache.backends.dummy.key->self.make_key(key, version=version)
django.core.cache.backends.dummy.DummyCache(self,host,*args,**kwargs)
django.core.cache.backends.dummy.DummyCache.__init__(self,host,*args,**kwargs)
django.core.cache.backends.dummy.DummyCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.dummy.DummyCache.clear(self)
django.core.cache.backends.dummy.DummyCache.delete(self,key,version=None)
django.core.cache.backends.dummy.DummyCache.get(self,key,default=None,version=None)
django.core.cache.backends.dummy.DummyCache.has_key(self,key,version=None)
django.core.cache.backends.dummy.DummyCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.dummy.DummyCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/base.py----------------------------------------
A:django.core.cache.backends.base.DEFAULT_TIMEOUT->object()
A:django.core.cache.backends.base._missing_key->object()
A:django.core.cache.backends.base.timeout->int(timeout)
A:django.core.cache.backends.base.options->params.get('OPTIONS', {})
A:django.core.cache.backends.base.max_entries->params.get('max_entries', options.get('MAX_ENTRIES', 300))
A:django.core.cache.backends.base.self._max_entries->int(max_entries)
A:django.core.cache.backends.base.cull_frequency->params.get('cull_frequency', options.get('CULL_FREQUENCY', 3))
A:django.core.cache.backends.base.self._cull_frequency->int(cull_frequency)
A:django.core.cache.backends.base.self.key_prefix->params.get('KEY_PREFIX', '')
A:django.core.cache.backends.base.self.version->params.get('VERSION', 1)
A:django.core.cache.backends.base.self.key_func->get_key_func(params.get('KEY_FUNCTION'))
A:django.core.cache.backends.base.val->self.get(key, self._missing_key, version=version)
A:django.core.cache.backends.base.default->default()
A:django.core.cache.backends.base.value->self.get(key, self._missing_key, version=version)
django.core.cache.BaseCache(self,params)
django.core.cache.BaseCache.__contains__(self,key)
django.core.cache.BaseCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.BaseCache.clear(self)
django.core.cache.BaseCache.close(self,**kwargs)
django.core.cache.BaseCache.decr(self,key,delta=1,version=None)
django.core.cache.BaseCache.decr_version(self,key,delta=1,version=None)
django.core.cache.BaseCache.delete(self,key,version=None)
django.core.cache.BaseCache.delete_many(self,keys,version=None)
django.core.cache.BaseCache.get(self,key,default=None,version=None)
django.core.cache.BaseCache.get_backend_timeout(self,timeout=DEFAULT_TIMEOUT)
django.core.cache.BaseCache.get_many(self,keys,version=None)
django.core.cache.BaseCache.get_or_set(self,key,default,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.BaseCache.has_key(self,key,version=None)
django.core.cache.BaseCache.incr(self,key,delta=1,version=None)
django.core.cache.BaseCache.incr_version(self,key,delta=1,version=None)
django.core.cache.BaseCache.make_key(self,key,version=None)
django.core.cache.BaseCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.BaseCache.set_many(self,data,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.BaseCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.BaseCache.validate_key(self,key)
django.core.cache.CacheKeyWarning(RuntimeWarning)
django.core.cache.InvalidCacheBackendError(ImproperlyConfigured)
django.core.cache.InvalidCacheKey(ValueError)
django.core.cache.backends.base.BaseCache(self,params)
django.core.cache.backends.base.BaseCache.__contains__(self,key)
django.core.cache.backends.base.BaseCache.__init__(self,params)
django.core.cache.backends.base.BaseCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.base.BaseCache.clear(self)
django.core.cache.backends.base.BaseCache.close(self,**kwargs)
django.core.cache.backends.base.BaseCache.decr(self,key,delta=1,version=None)
django.core.cache.backends.base.BaseCache.decr_version(self,key,delta=1,version=None)
django.core.cache.backends.base.BaseCache.delete(self,key,version=None)
django.core.cache.backends.base.BaseCache.delete_many(self,keys,version=None)
django.core.cache.backends.base.BaseCache.get(self,key,default=None,version=None)
django.core.cache.backends.base.BaseCache.get_backend_timeout(self,timeout=DEFAULT_TIMEOUT)
django.core.cache.backends.base.BaseCache.get_many(self,keys,version=None)
django.core.cache.backends.base.BaseCache.get_or_set(self,key,default,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.base.BaseCache.has_key(self,key,version=None)
django.core.cache.backends.base.BaseCache.incr(self,key,delta=1,version=None)
django.core.cache.backends.base.BaseCache.incr_version(self,key,delta=1,version=None)
django.core.cache.backends.base.BaseCache.make_key(self,key,version=None)
django.core.cache.backends.base.BaseCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.base.BaseCache.set_many(self,data,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.base.BaseCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.base.BaseCache.validate_key(self,key)
django.core.cache.backends.base.CacheKeyWarning(RuntimeWarning)
django.core.cache.backends.base.InvalidCacheBackendError(ImproperlyConfigured)
django.core.cache.backends.base.InvalidCacheKey(ValueError)
django.core.cache.backends.base.default_key_func(key,key_prefix,version)
django.core.cache.backends.base.get_key_func(key_func)
django.core.cache.backends.base.memcache_key_warnings(key)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/db.py----------------------------------------
A:django.core.cache.backends.db._meta->Options(table)
A:django.core.cache.backends.db.db->django.db.router.db_for_write(self.cache_model_class)
A:django.core.cache.backends.db.table->connection.ops.quote_name(self._table)
A:django.core.cache.backends.db.rows->cursor.fetchall()
A:django.core.cache.backends.db.expression->django.db.models.Expression(output_field=models.DateTimeField())
A:django.core.cache.backends.db.expires->converter(expires, expression, connection)
A:django.core.cache.backends.db.value->pickle.loads(base64.b64decode(value.encode()))
A:django.core.cache.backends.db.key->self.make_key(key, version=version)
A:django.core.cache.backends.db.timeout->self.get_backend_timeout(timeout)
A:django.core.cache.backends.db.now->now.replace(microsecond=0).replace(microsecond=0)
A:django.core.cache.backends.db.exp->connection.ops.adapt_datetimefield_value(exp)
A:django.core.cache.backends.db.pickled->pickle.dumps(value, self.pickle_protocol)
A:django.core.cache.backends.db.b64encoded->base64.b64encode(pickled).decode('latin1')
A:django.core.cache.backends.db.result->cursor.fetchone()
A:django.core.cache.backends.db.current_expires->converter(current_expires, expression, connection)
A:django.core.cache.backends.db.last_cache_key->cursor.fetchone()
django.core.cache.backends.db.BaseDatabaseCache(self,table,params)
django.core.cache.backends.db.BaseDatabaseCache.__init__(self,table,params)
django.core.cache.backends.db.DatabaseCache(BaseDatabaseCache)
django.core.cache.backends.db.DatabaseCache._base_delete_many(self,keys)
django.core.cache.backends.db.DatabaseCache._base_set(self,mode,key,value,timeout=DEFAULT_TIMEOUT)
django.core.cache.backends.db.DatabaseCache._cull(self,db,cursor,now)
django.core.cache.backends.db.DatabaseCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.db.DatabaseCache.clear(self)
django.core.cache.backends.db.DatabaseCache.delete(self,key,version=None)
django.core.cache.backends.db.DatabaseCache.delete_many(self,keys,version=None)
django.core.cache.backends.db.DatabaseCache.get(self,key,default=None,version=None)
django.core.cache.backends.db.DatabaseCache.get_many(self,keys,version=None)
django.core.cache.backends.db.DatabaseCache.has_key(self,key,version=None)
django.core.cache.backends.db.DatabaseCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.db.DatabaseCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.db.Options(self,table)
django.core.cache.backends.db.Options.__init__(self,table)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/cache/backends/memcached.py----------------------------------------
A:django.core.cache.backends.memcached.self._servers->re.split('[;,]', server)
A:django.core.cache.backends.memcached.key->self.make_key(key, version=version)
A:django.core.cache.backends.memcached.ret->self._cache.get_multi(key_map.keys())
A:django.core.cache.backends.memcached.val->self._cache.get(key)
A:django.core.cache.backends.memcached.safe_key->self.make_key(key, version=version)
A:django.core.cache.backends.memcached.failed_keys->self._cache.set_multi(safe_data, self.get_backend_timeout(timeout))
django.core.cache.backends.memcached.BaseMemcachedCache(self,server,params,library,value_not_found_exception)
django.core.cache.backends.memcached.BaseMemcachedCache.__init__(self,server,params,library,value_not_found_exception)
django.core.cache.backends.memcached.BaseMemcachedCache._cache(self)
django.core.cache.backends.memcached.BaseMemcachedCache.add(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.clear(self)
django.core.cache.backends.memcached.BaseMemcachedCache.client_servers(self)
django.core.cache.backends.memcached.BaseMemcachedCache.close(self,**kwargs)
django.core.cache.backends.memcached.BaseMemcachedCache.decr(self,key,delta=1,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.delete(self,key,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.delete_many(self,keys,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.get(self,key,default=None,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.get_backend_timeout(self,timeout=DEFAULT_TIMEOUT)
django.core.cache.backends.memcached.BaseMemcachedCache.get_many(self,keys,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.incr(self,key,delta=1,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.set(self,key,value,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.set_many(self,data,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.memcached.BaseMemcachedCache.validate_key(self,key)
django.core.cache.backends.memcached.MemcachedCache(self,server,params)
django.core.cache.backends.memcached.MemcachedCache.__init__(self,server,params)
django.core.cache.backends.memcached.MemcachedCache.delete(self,key,version=None)
django.core.cache.backends.memcached.MemcachedCache.get(self,key,default=None,version=None)
django.core.cache.backends.memcached.PyLibMCCache(self,server,params)
django.core.cache.backends.memcached.PyLibMCCache.__init__(self,server,params)
django.core.cache.backends.memcached.PyLibMCCache.client_servers(self)
django.core.cache.backends.memcached.PyLibMCCache.close(self,**kwargs)
django.core.cache.backends.memcached.PyLibMCCache.touch(self,key,timeout=DEFAULT_TIMEOUT,version=None)
django.core.cache.backends.memcached.PyMemcacheCache(self,server,params)
django.core.cache.backends.memcached.PyMemcacheCache.__init__(self,server,params)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/messages.py----------------------------------------
A:django.core.checks.messages.obj->str(self.obj)
django.core.checks.CheckMessage(self,level,msg,hint=None,obj=None,id=None)
django.core.checks.CheckMessage.__eq__(self,other)
django.core.checks.CheckMessage.__repr__(self)
django.core.checks.CheckMessage.__str__(self)
django.core.checks.CheckMessage.is_serious(self,level=ERROR)
django.core.checks.CheckMessage.is_silenced(self)
django.core.checks.Critical(self,*args,**kwargs)
django.core.checks.Debug(self,*args,**kwargs)
django.core.checks.Error(self,*args,**kwargs)
django.core.checks.Info(self,*args,**kwargs)
django.core.checks.Warning(self,*args,**kwargs)
django.core.checks.messages.CheckMessage(self,level,msg,hint=None,obj=None,id=None)
django.core.checks.messages.CheckMessage.__eq__(self,other)
django.core.checks.messages.CheckMessage.__init__(self,level,msg,hint=None,obj=None,id=None)
django.core.checks.messages.CheckMessage.__repr__(self)
django.core.checks.messages.CheckMessage.__str__(self)
django.core.checks.messages.CheckMessage.is_serious(self,level=ERROR)
django.core.checks.messages.CheckMessage.is_silenced(self)
django.core.checks.messages.Critical(self,*args,**kwargs)
django.core.checks.messages.Critical.__init__(self,*args,**kwargs)
django.core.checks.messages.Debug(self,*args,**kwargs)
django.core.checks.messages.Debug.__init__(self,*args,**kwargs)
django.core.checks.messages.Error(self,*args,**kwargs)
django.core.checks.messages.Error.__init__(self,*args,**kwargs)
django.core.checks.messages.Info(self,*args,**kwargs)
django.core.checks.messages.Info.__init__(self,*args,**kwargs)
django.core.checks.messages.Warning(self,*args,**kwargs)
django.core.checks.messages.Warning.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/translation.py----------------------------------------
A:django.core.checks.translation.E001->Error('You have provided an invalid value for the LANGUAGE_CODE setting: {!r}.', id='translation.E001')
A:django.core.checks.translation.E002->Error('You have provided an invalid language code in the LANGUAGES setting: {!r}.', id='translation.E002')
A:django.core.checks.translation.E003->Error('You have provided an invalid language code in the LANGUAGES_BIDI setting: {!r}.', id='translation.E003')
A:django.core.checks.translation.E004->Error('You have provided a value for the LANGUAGE_CODE setting that is not in the LANGUAGES setting.', id='translation.E004')
django.core.checks.translation.check_language_settings_consistent(app_configs,**kwargs)
django.core.checks.translation.check_setting_language_code(app_configs,**kwargs)
django.core.checks.translation.check_setting_languages(app_configs,**kwargs)
django.core.checks.translation.check_setting_languages_bidi(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/caches.py----------------------------------------
A:django.core.checks.caches.E001->Error("You must define a '%s' cache in your CACHES setting." % DEFAULT_CACHE_ALIAS, id='caches.E001')
A:django.core.checks.caches.setting->getattr(settings, name, None)
A:django.core.checks.caches.paths->set()
A:django.core.checks.caches.cache_path->pathlib.Path(cache._dir).resolve()
django.core.checks.caches.check_cache_location_not_exposed(app_configs,**kwargs)
django.core.checks.caches.check_default_cache_is_configured(app_configs,**kwargs)
django.core.checks.caches.check_file_based_cache_is_absolute(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/database.py----------------------------------------
django.core.checks.database.check_database_backends(databases=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/registry.py----------------------------------------
A:django.core.checks.registry.self.registered_checks->set()
A:django.core.checks.registry.self.deployment_checks->set()
A:django.core.checks.registry.checks->list(self.registered_checks)
A:django.core.checks.registry.new_errors->check(app_configs=app_configs, databases=databases)
A:django.core.checks.registry.registry->CheckRegistry()
django.core.checks.Tags
django.core.checks.registry.CheckRegistry(self)
django.core.checks.registry.CheckRegistry.__init__(self)
django.core.checks.registry.CheckRegistry.get_checks(self,include_deployment_checks=False)
django.core.checks.registry.CheckRegistry.register(self,check=None,*tags,**kwargs)
django.core.checks.registry.CheckRegistry.run_checks(self,app_configs=None,tags=None,include_deployment_checks=False,databases=None)
django.core.checks.registry.CheckRegistry.tag_exists(self,tag,include_deployment_checks=False)
django.core.checks.registry.CheckRegistry.tags_available(self,deployment_checks=False)
django.core.checks.registry.Tags


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/async_checks.py----------------------------------------
A:django.core.checks.async_checks.E001->Error('You should not set the DJANGO_ALLOW_ASYNC_UNSAFE environment variable in deployment. This disables async safety protection.', id='async.E001')
django.core.checks.async_checks.check_async_unsafe(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/templates.py----------------------------------------
A:django.core.checks.templates.E001->Error("You have 'APP_DIRS': True in your TEMPLATES but also specify 'loaders' in OPTIONS. Either remove APP_DIRS or remove the 'loaders' option.", id='templates.E001')
A:django.core.checks.templates.E002->Error("'string_if_invalid' in TEMPLATES OPTIONS must be a string but got: {} ({}).", id='templates.E002')
A:django.core.checks.templates.string_if_invalid->conf.get('OPTIONS', {}).get('string_if_invalid', '')
A:django.core.checks.templates.error->copy.copy(E002)
A:django.core.checks.templates.error.msg->copy.copy(E002).msg.format(string_if_invalid, type(string_if_invalid).__name__)
django.core.checks.templates.check_setting_app_dirs_loaders(app_configs,**kwargs)
django.core.checks.templates.check_string_if_invalid_is_string(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/model_checks.py----------------------------------------
A:django.core.checks.model_checks.db_table_models->defaultdict(list)
A:django.core.checks.model_checks.indexes->defaultdict(list)
A:django.core.checks.model_checks.constraints->defaultdict(list)
A:django.core.checks.model_checks.models->itertools.chain.from_iterable((app_config.get_models() for app_config in app_configs))
A:django.core.checks.model_checks.model_labels_str->', '.join(model_labels)
A:django.core.checks.model_checks.model_labels->set(model_labels)
A:django.core.checks.model_checks.signal_name->model_signals.get(func.__self__, 'unknown')
A:django.core.checks.model_checks.error_fn->known_lazy.get(key, default_error)
django.core.checks.model_checks._check_lazy_references(apps,ignore=None)
django.core.checks.model_checks.check_all_models(app_configs=None,**kwargs)
django.core.checks.model_checks.check_lazy_references(app_configs=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/urls.py----------------------------------------
A:django.core.checks.urls.resolver->get_resolver()
A:django.core.checks.urls.check_method->getattr(resolver, 'check', None)
A:django.core.checks.urls.all_namespaces->_load_all_namespaces(resolver)
A:django.core.checks.urls.counter->Counter(all_namespaces)
A:django.core.checks.urls.url_patterns->getattr(resolver, 'url_patterns', [])
A:django.core.checks.urls.namespace->getattr(pattern, 'namespace', None)
A:django.core.checks.urls.hint->"Try removing the string '{}'. The list of urlpatterns should not have a prefix string as the first element.".format(pattern)
A:django.core.checks.urls.value->getattr(settings, name)
django.core.checks.urls.E006(name)
django.core.checks.urls._load_all_namespaces(resolver,parents=())
django.core.checks.urls.check_resolver(resolver)
django.core.checks.urls.check_url_config(app_configs,**kwargs)
django.core.checks.urls.check_url_namespaces_unique(app_configs,**kwargs)
django.core.checks.urls.check_url_settings(app_configs,**kwargs)
django.core.checks.urls.get_warning_for_invalid_pattern(pattern)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/security/sessions.py----------------------------------------
A:django.core.checks.security.sessions.W010->Warning(add_session_cookie_message("You have 'django.contrib.sessions' in your INSTALLED_APPS, but you have not set SESSION_COOKIE_SECURE to True."), id='security.W010')
A:django.core.checks.security.sessions.W011->Warning(add_session_cookie_message("You have 'django.contrib.sessions.middleware.SessionMiddleware' in your MIDDLEWARE, but you have not set SESSION_COOKIE_SECURE to True."), id='security.W011')
A:django.core.checks.security.sessions.W012->Warning(add_session_cookie_message('SESSION_COOKIE_SECURE is not set to True.'), id='security.W012')
A:django.core.checks.security.sessions.W013->Warning(add_httponly_message("You have 'django.contrib.sessions' in your INSTALLED_APPS, but you have not set SESSION_COOKIE_HTTPONLY to True."), id='security.W013')
A:django.core.checks.security.sessions.W014->Warning(add_httponly_message("You have 'django.contrib.sessions.middleware.SessionMiddleware' in your MIDDLEWARE, but you have not set SESSION_COOKIE_HTTPONLY to True."), id='security.W014')
A:django.core.checks.security.sessions.W015->Warning(add_httponly_message('SESSION_COOKIE_HTTPONLY is not set to True.'), id='security.W015')
django.core.checks.security.sessions._session_app()
django.core.checks.security.sessions._session_middleware()
django.core.checks.security.sessions.add_httponly_message(message)
django.core.checks.security.sessions.add_session_cookie_message(message)
django.core.checks.security.sessions.check_session_cookie_httponly(app_configs,**kwargs)
django.core.checks.security.sessions.check_session_cookie_secure(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/security/csrf.py----------------------------------------
A:django.core.checks.security.csrf.W003->Warning("You don't appear to be using Django's built-in cross-site request forgery protection via the middleware ('django.middleware.csrf.CsrfViewMiddleware' is not in your MIDDLEWARE). Enabling the middleware is the safest approach to ensure you don't leave any holes.", id='security.W003')
A:django.core.checks.security.csrf.W016->Warning("You have 'django.middleware.csrf.CsrfViewMiddleware' in your MIDDLEWARE, but you have not set CSRF_COOKIE_SECURE to True. Using a secure-only CSRF cookie makes it more difficult for network traffic sniffers to steal the CSRF token.", id='security.W016')
A:django.core.checks.security.csrf.passed_check->_csrf_middleware()
A:django.core.checks.security.csrf.view->_get_failure_view()
django.core.checks.security.csrf._csrf_middleware()
django.core.checks.security.csrf.check_csrf_cookie_secure(app_configs,**kwargs)
django.core.checks.security.csrf.check_csrf_failure_view(app_configs,**kwargs)
django.core.checks.security.csrf.check_csrf_middleware(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/security/base.py----------------------------------------
A:django.core.checks.security.base.W001->Warning("You do not have 'django.middleware.security.SecurityMiddleware' in your MIDDLEWARE so the SECURE_HSTS_SECONDS, SECURE_CONTENT_TYPE_NOSNIFF, SECURE_BROWSER_XSS_FILTER, SECURE_REFERRER_POLICY, and SECURE_SSL_REDIRECT settings will have no effect.", id='security.W001')
A:django.core.checks.security.base.W002->Warning("You do not have 'django.middleware.clickjacking.XFrameOptionsMiddleware' in your MIDDLEWARE, so your pages will not be served with an 'x-frame-options' header. Unless there is a good reason for your site to be served in a frame, you should consider enabling this header to help prevent clickjacking attacks.", id='security.W002')
A:django.core.checks.security.base.W004->Warning('You have not set a value for the SECURE_HSTS_SECONDS setting. If your entire site is served only over SSL, you may want to consider setting a value and enabling HTTP Strict Transport Security. Be sure to read the documentation first; enabling HSTS carelessly can cause serious, irreversible problems.', id='security.W004')
A:django.core.checks.security.base.W005->Warning('You have not set the SECURE_HSTS_INCLUDE_SUBDOMAINS setting to True. Without this, your site is potentially vulnerable to attack via an insecure connection to a subdomain. Only set this to True if you are certain that all subdomains of your domain should be served exclusively via SSL.', id='security.W005')
A:django.core.checks.security.base.W006->Warning("Your SECURE_CONTENT_TYPE_NOSNIFF setting is not set to True, so your pages will not be served with an 'X-Content-Type-Options: nosniff' header. You should consider enabling this header to prevent the browser from identifying content types incorrectly.", id='security.W006')
A:django.core.checks.security.base.W008->Warning('Your SECURE_SSL_REDIRECT setting is not set to True. Unless your site should be available over both SSL and non-SSL connections, you may want to either set this setting True or configure a load balancer or reverse-proxy server to redirect all connections to HTTPS.', id='security.W008')
A:django.core.checks.security.base.W009->Warning("Your SECRET_KEY has less than %(min_length)s characters, less than %(min_unique_chars)s unique characters, or it's prefixed with '%(insecure_prefix)s' indicating that it was generated automatically by Django. Please generate a long and random SECRET_KEY, otherwise many of Django's security-critical features will be vulnerable to attack." % {'min_length': SECRET_KEY_MIN_LENGTH, 'min_unique_chars': SECRET_KEY_MIN_UNIQUE_CHARACTERS, 'insecure_prefix': SECRET_KEY_INSECURE_PREFIX}, id='security.W009')
A:django.core.checks.security.base.W018->Warning('You should not have DEBUG set to True in deployment.', id='security.W018')
A:django.core.checks.security.base.W019->Warning("You have 'django.middleware.clickjacking.XFrameOptionsMiddleware' in your MIDDLEWARE, but X_FRAME_OPTIONS is not set to 'DENY'. Unless there is a good reason for your site to serve other parts of itself in a frame, you should change it to 'DENY'.", id='security.W019')
A:django.core.checks.security.base.W020->Warning('ALLOWED_HOSTS must not be empty in deployment.', id='security.W020')
A:django.core.checks.security.base.W021->Warning('You have not set the SECURE_HSTS_PRELOAD setting to True. Without this, your site cannot be submitted to the browser preload list.', id='security.W021')
A:django.core.checks.security.base.W022->Warning('You have not set the SECURE_REFERRER_POLICY setting. Without this, your site will not send a Referrer-Policy header. You should consider enabling this header to protect user privacy.', id='security.W022')
A:django.core.checks.security.base.E023->Error('You have set the SECURE_REFERRER_POLICY setting to an invalid value.', hint='Valid values are: {}.'.format(', '.join(sorted(REFERRER_POLICY_VALUES))), id='security.E023')
A:django.core.checks.security.base.E100->Error("DEFAULT_HASHING_ALGORITHM must be 'sha1' or 'sha256'.", id='security.E100')
A:django.core.checks.security.base.passed_check->_xframe_middleware()
A:django.core.checks.security.base.values->set(settings.SECURE_REFERRER_POLICY)
django.core.checks.security.base._security_middleware()
django.core.checks.security.base._xframe_middleware()
django.core.checks.security.base.check_allowed_hosts(app_configs,**kwargs)
django.core.checks.security.base.check_content_type_nosniff(app_configs,**kwargs)
django.core.checks.security.base.check_debug(app_configs,**kwargs)
django.core.checks.security.base.check_default_hashing_algorithm(app_configs,**kwargs)
django.core.checks.security.base.check_referrer_policy(app_configs,**kwargs)
django.core.checks.security.base.check_secret_key(app_configs,**kwargs)
django.core.checks.security.base.check_security_middleware(app_configs,**kwargs)
django.core.checks.security.base.check_ssl_redirect(app_configs,**kwargs)
django.core.checks.security.base.check_sts(app_configs,**kwargs)
django.core.checks.security.base.check_sts_include_subdomains(app_configs,**kwargs)
django.core.checks.security.base.check_sts_preload(app_configs,**kwargs)
django.core.checks.security.base.check_xframe_deny(app_configs,**kwargs)
django.core.checks.security.base.check_xframe_options_middleware(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/security/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/checks/compatibility/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/message.py----------------------------------------
A:django.core.mail.message.utf8_charset->email.charset.Charset('utf-8')
A:django.core.mail.message.utf8_charset_qp->email.charset.Charset('utf-8')
A:django.core.mail.message.val->Header(val).encode()
A:django.core.mail.message.addr->force_str(addr)
A:django.core.mail.message.(token, rest)->email.headerregistry.parser.get_mailbox(addr)
A:django.core.mail.message.(localpart, domain)->address.rsplit('@', 1)
A:django.core.mail.message.nm->Header(nm, encoding).encode()
A:django.core.mail.message.localpart->Header(localpart, encoding).encode()
A:django.core.mail.message.domain->punycode(domain)
A:django.core.mail.message.parsed_address->Address(username=localpart, domain=domain)
A:django.core.mail.message.fp->BytesIO()
A:django.core.mail.message.g->email.generator.BytesGenerator(fp, mangle_from_=False)
A:django.core.mail.message.(name, val)->forbid_multi_line_headers(name, val, self.encoding)
A:django.core.mail.message.has_long_lines->any((len(line.encode()) > RFC5322_EMAIL_LINE_LENGTH_LIMIT for line in payload.splitlines()))
A:django.core.mail.message.self.to->list(to)
A:django.core.mail.message.self.cc->list(cc)
A:django.core.mail.message.self.bcc->list(bcc)
A:django.core.mail.message.self.reply_to->list(reply_to)
A:django.core.mail.message.self.connection->get_connection(fail_silently=fail_silently)
A:django.core.mail.message.msg->SafeMIMEMultipart(_subtype=self.alternative_subtype, encoding=encoding)
A:django.core.mail.message.msg['From']->self.extra_headers.get('From', self.from_email)
A:django.core.mail.message.msg['Date']->formatdate(localtime=settings.EMAIL_USE_LOCALTIME)
A:django.core.mail.message.msg['Message-ID']->make_msgid(domain=DNS_NAME)
A:django.core.mail.message.(basetype, subtype)->mimetype.split('/', 1)
A:django.core.mail.message.content->message_from_string(force_str(content))
A:django.core.mail.message.path->Path(path)
A:django.core.mail.message.attachment->self._create_mime_attachment(content, mimetype)
A:django.core.mail.message.value->', '.join((str(v) for v in values))
django.core.mail.BadHeaderError(ValueError)
django.core.mail.EmailMessage(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,cc=None,reply_to=None)
django.core.mail.EmailMessage._create_attachment(self,filename,content,mimetype=None)
django.core.mail.EmailMessage._create_attachments(self,msg)
django.core.mail.EmailMessage._create_message(self,msg)
django.core.mail.EmailMessage._create_mime_attachment(self,content,mimetype)
django.core.mail.EmailMessage._set_list_header_if_not_empty(self,msg,header,values)
django.core.mail.EmailMessage.attach(self,filename=None,content=None,mimetype=None)
django.core.mail.EmailMessage.attach_file(self,path,mimetype=None)
django.core.mail.EmailMessage.get_connection(self,fail_silently=False)
django.core.mail.EmailMessage.message(self)
django.core.mail.EmailMessage.recipients(self)
django.core.mail.EmailMessage.send(self,fail_silently=False)
django.core.mail.EmailMultiAlternatives(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,alternatives=None,cc=None,reply_to=None)
django.core.mail.EmailMultiAlternatives._create_alternatives(self,msg)
django.core.mail.EmailMultiAlternatives._create_message(self,msg)
django.core.mail.EmailMultiAlternatives.attach_alternative(self,content,mimetype)
django.core.mail.SafeMIMEMultipart(self,_subtype='mixed',boundary=None,_subparts=None,encoding=None,**_params)
django.core.mail.SafeMIMEMultipart.__setitem__(self,name,val)
django.core.mail.SafeMIMEText(self,_text,_subtype='plain',_charset=None)
django.core.mail.SafeMIMEText.__setitem__(self,name,val)
django.core.mail.SafeMIMEText.set_payload(self,payload,charset=None)
django.core.mail.forbid_multi_line_headers(name,val,encoding)
django.core.mail.message.BadHeaderError(ValueError)
django.core.mail.message.EmailMessage(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,cc=None,reply_to=None)
django.core.mail.message.EmailMessage.__init__(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,cc=None,reply_to=None)
django.core.mail.message.EmailMessage._create_attachment(self,filename,content,mimetype=None)
django.core.mail.message.EmailMessage._create_attachments(self,msg)
django.core.mail.message.EmailMessage._create_message(self,msg)
django.core.mail.message.EmailMessage._create_mime_attachment(self,content,mimetype)
django.core.mail.message.EmailMessage._set_list_header_if_not_empty(self,msg,header,values)
django.core.mail.message.EmailMessage.attach(self,filename=None,content=None,mimetype=None)
django.core.mail.message.EmailMessage.attach_file(self,path,mimetype=None)
django.core.mail.message.EmailMessage.get_connection(self,fail_silently=False)
django.core.mail.message.EmailMessage.message(self)
django.core.mail.message.EmailMessage.recipients(self)
django.core.mail.message.EmailMessage.send(self,fail_silently=False)
django.core.mail.message.EmailMultiAlternatives(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,alternatives=None,cc=None,reply_to=None)
django.core.mail.message.EmailMultiAlternatives.__init__(self,subject='',body='',from_email=None,to=None,bcc=None,connection=None,attachments=None,headers=None,alternatives=None,cc=None,reply_to=None)
django.core.mail.message.EmailMultiAlternatives._create_alternatives(self,msg)
django.core.mail.message.EmailMultiAlternatives._create_message(self,msg)
django.core.mail.message.EmailMultiAlternatives.attach_alternative(self,content,mimetype)
django.core.mail.message.MIMEMixin
django.core.mail.message.MIMEMixin.as_bytes(self,unixfrom=False,linesep='\n')
django.core.mail.message.MIMEMixin.as_string(self,unixfrom=False,linesep='\n')
django.core.mail.message.SafeMIMEMessage(MIMEMixin,MIMEMessage)
django.core.mail.message.SafeMIMEMessage.__setitem__(self,name,val)
django.core.mail.message.SafeMIMEMultipart(self,_subtype='mixed',boundary=None,_subparts=None,encoding=None,**_params)
django.core.mail.message.SafeMIMEMultipart.__init__(self,_subtype='mixed',boundary=None,_subparts=None,encoding=None,**_params)
django.core.mail.message.SafeMIMEMultipart.__setitem__(self,name,val)
django.core.mail.message.SafeMIMEText(self,_text,_subtype='plain',_charset=None)
django.core.mail.message.SafeMIMEText.__init__(self,_text,_subtype='plain',_charset=None)
django.core.mail.message.SafeMIMEText.__setitem__(self,name,val)
django.core.mail.message.SafeMIMEText.set_payload(self,payload,charset=None)
django.core.mail.message.forbid_multi_line_headers(name,val,encoding)
django.core.mail.message.sanitize_address(addr,encoding)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/utils.py----------------------------------------
A:django.core.mail.utils.self._fqdn->punycode(socket.getfqdn())
A:django.core.mail.utils.DNS_NAME->CachedDnsName()
django.core.mail.CachedDnsName
django.core.mail.CachedDnsName.__str__(self)
django.core.mail.CachedDnsName.get_fqdn(self)
django.core.mail.utils.CachedDnsName
django.core.mail.utils.CachedDnsName.__str__(self)
django.core.mail.utils.CachedDnsName.get_fqdn(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/__init__.py----------------------------------------
A:django.core.mail.__init__.klass->import_string(backend or settings.EMAIL_BACKEND)
A:django.core.mail.__init__.mail->EmailMultiAlternatives('%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message, settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS], connection=connection)
django.core.mail.__init__.get_connection(backend=None,fail_silently=False,**kwds)
django.core.mail.__init__.mail_admins(subject,message,fail_silently=False,connection=None,html_message=None)
django.core.mail.__init__.mail_managers(subject,message,fail_silently=False,connection=None,html_message=None)
django.core.mail.__init__.send_mail(subject,message,from_email,recipient_list,fail_silently=False,auth_user=None,auth_password=None,connection=None,html_message=None)
django.core.mail.__init__.send_mass_mail(datatuple,fail_silently=False,auth_user=None,auth_password=None,connection=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/filebased.py----------------------------------------
A:django.core.mail.backends.filebased.self.file_path->os.path.abspath(self.file_path)
A:django.core.mail.backends.filebased.timestamp->datetime.datetime.now().strftime('%Y%m%d-%H%M%S')
A:django.core.mail.backends.filebased.self._fname->os.path.join(self.file_path, fname)
A:django.core.mail.backends.filebased.self.stream->open(self._get_filename(), 'ab')
django.core.mail.backends.filebased.EmailBackend(self,*args,file_path=None,**kwargs)
django.core.mail.backends.filebased.EmailBackend.__init__(self,*args,file_path=None,**kwargs)
django.core.mail.backends.filebased.EmailBackend._get_filename(self)
django.core.mail.backends.filebased.EmailBackend.close(self)
django.core.mail.backends.filebased.EmailBackend.open(self)
django.core.mail.backends.filebased.EmailBackend.write_message(self,message)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/locmem.py----------------------------------------
django.core.mail.backends.locmem.EmailBackend(self,*args,**kwargs)
django.core.mail.backends.locmem.EmailBackend.__init__(self,*args,**kwargs)
django.core.mail.backends.locmem.EmailBackend.send_messages(self,messages)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/console.py----------------------------------------
A:django.core.mail.backends.console.self.stream->kwargs.pop('stream', sys.stdout)
A:django.core.mail.backends.console.self._lock->threading.RLock()
A:django.core.mail.backends.console.msg->message.message()
A:django.core.mail.backends.console.msg_data->msg_data.decode(charset).decode(charset)
A:django.core.mail.backends.console.stream_created->self.open()
django.core.mail.backends.console.EmailBackend(self,*args,**kwargs)
django.core.mail.backends.console.EmailBackend.__init__(self,*args,**kwargs)
django.core.mail.backends.console.EmailBackend.send_messages(self,email_messages)
django.core.mail.backends.console.EmailBackend.write_message(self,message)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/dummy.py----------------------------------------
django.core.mail.backends.dummy.EmailBackend(BaseEmailBackend)
django.core.mail.backends.dummy.EmailBackend.send_messages(self,email_messages)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/base.py----------------------------------------
django.core.mail.backends.base.BaseEmailBackend(self,fail_silently=False,**kwargs)
django.core.mail.backends.base.BaseEmailBackend.__enter__(self)
django.core.mail.backends.base.BaseEmailBackend.__exit__(self,exc_type,exc_value,traceback)
django.core.mail.backends.base.BaseEmailBackend.__init__(self,fail_silently=False,**kwargs)
django.core.mail.backends.base.BaseEmailBackend.close(self)
django.core.mail.backends.base.BaseEmailBackend.open(self)
django.core.mail.backends.base.BaseEmailBackend.send_messages(self,email_messages)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/smtp.py----------------------------------------
A:django.core.mail.backends.smtp.self._lock->threading.RLock()
A:django.core.mail.backends.smtp.self.connection->self.connection_class(self.host, self.port, **connection_params)
A:django.core.mail.backends.smtp.new_conn_created->self.open()
A:django.core.mail.backends.smtp.sent->self._send(message)
A:django.core.mail.backends.smtp.from_email->sanitize_address(email_message.from_email, encoding)
A:django.core.mail.backends.smtp.message->email_message.message()
django.core.mail.backends.smtp.EmailBackend(self,host=None,port=None,username=None,password=None,use_tls=None,fail_silently=False,use_ssl=None,timeout=None,ssl_keyfile=None,ssl_certfile=None,**kwargs)
django.core.mail.backends.smtp.EmailBackend.__init__(self,host=None,port=None,username=None,password=None,use_tls=None,fail_silently=False,use_ssl=None,timeout=None,ssl_keyfile=None,ssl_certfile=None,**kwargs)
django.core.mail.backends.smtp.EmailBackend._send(self,email_message)
django.core.mail.backends.smtp.EmailBackend.close(self)
django.core.mail.backends.smtp.EmailBackend.connection_class(self)
django.core.mail.backends.smtp.EmailBackend.open(self)
django.core.mail.backends.smtp.EmailBackend.send_messages(self,email_messages)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/mail/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/servers/basehttp.py----------------------------------------
A:django.core.servers.basehttp.logger->logging.getLogger('django.server')
A:django.core.servers.basehttp.app_path->getattr(settings, 'WSGI_APPLICATION')
A:django.core.servers.basehttp.(exc_type, _, _)->sys.exc_info()
A:django.core.servers.basehttp.content_length->int(environ.get('CONTENT_LENGTH'))
A:django.core.servers.basehttp.status_code->int(args[1])
A:django.core.servers.basehttp.self.raw_requestline->self.rfile.readline(65537)
A:django.core.servers.basehttp.handler->ServerHandler(self.rfile, self.wfile, self.get_stderr(), self.get_environ())
A:django.core.servers.basehttp.httpd_cls->type('WSGIServer', (socketserver.ThreadingMixIn, server_cls), {})
A:django.core.servers.basehttp.httpd->httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)
django.core.servers.basehttp.ServerHandler(self,stdin,stdout,stderr,environ,**kwargs)
django.core.servers.basehttp.ServerHandler.__init__(self,stdin,stdout,stderr,environ,**kwargs)
django.core.servers.basehttp.ServerHandler.cleanup_headers(self)
django.core.servers.basehttp.ServerHandler.close(self)
django.core.servers.basehttp.ServerHandler.handle_error(self)
django.core.servers.basehttp.ThreadedWSGIServer(socketserver.ThreadingMixIn,WSGIServer)
django.core.servers.basehttp.WSGIRequestHandler(simple_server.WSGIRequestHandler)
django.core.servers.basehttp.WSGIRequestHandler.address_string(self)
django.core.servers.basehttp.WSGIRequestHandler.get_environ(self)
django.core.servers.basehttp.WSGIRequestHandler.handle(self)
django.core.servers.basehttp.WSGIRequestHandler.handle_one_request(self)
django.core.servers.basehttp.WSGIRequestHandler.log_message(self,format,*args)
django.core.servers.basehttp.WSGIServer(self,*args,ipv6=False,allow_reuse_address=True,**kwargs)
django.core.servers.basehttp.WSGIServer.__init__(self,*args,ipv6=False,allow_reuse_address=True,**kwargs)
django.core.servers.basehttp.WSGIServer.handle_error(self,request,client_address)
django.core.servers.basehttp.get_internal_wsgi_application()
django.core.servers.basehttp.is_broken_pipe_error()
django.core.servers.basehttp.run(addr,port,wsgi_handler,ipv6=False,threading=False,server_cls=WSGIServer)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/servers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/handlers/exception.py----------------------------------------
A:django.core.handlers.exception.response->handle_uncaught_exception(request, resolver, sys.exc_info())
A:django.core.handlers.exception.security_logger->logging.getLogger('django.security.%s' % exc.__class__.__name__)
A:django.core.handlers.exception.callback->resolver.resolve_error_handler(500)
django.core.handlers.exception.convert_exception_to_response(get_response)
django.core.handlers.exception.get_exception_response(request,resolver,status_code,exception)
django.core.handlers.exception.handle_uncaught_exception(request,resolver,exc_info)
django.core.handlers.exception.response_for_exception(request,exc)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/handlers/wsgi.py----------------------------------------
A:django.core.handlers.wsgi._slashes_re->_lazy_re_compile(b'/+')
A:django.core.handlers.wsgi.result->self.stream.read(size)
A:django.core.handlers.wsgi.chunk->self._read_limited()
A:django.core.handlers.wsgi.sio->BytesIO(self.buffer)
A:django.core.handlers.wsgi.line->BytesIO(self.buffer).readline()
A:django.core.handlers.wsgi.self.buffer->BytesIO(self.buffer).read()
A:django.core.handlers.wsgi.script_name->get_bytes_from_wsgi(environ, 'SCRIPT_NAME', '')
A:django.core.handlers.wsgi.self.method->environ['REQUEST_METHOD'].upper()
A:django.core.handlers.wsgi.content_length->int(environ.get('CONTENT_LENGTH'))
A:django.core.handlers.wsgi.self._stream->LimitedStream(self.environ['wsgi.input'], content_length)
A:django.core.handlers.wsgi.raw_query_string->get_bytes_from_wsgi(self.environ, 'QUERY_STRING', '')
A:django.core.handlers.wsgi.raw_cookie->get_str_from_wsgi(self.environ, 'HTTP_COOKIE', '')
A:django.core.handlers.wsgi.POST->property(_get_post, _set_post)
A:django.core.handlers.wsgi.request->self.request_class(environ)
A:django.core.handlers.wsgi.response->environ['wsgi.file_wrapper'](response.file_to_stream, response.block_size)
A:django.core.handlers.wsgi.path_info->get_bytes_from_wsgi(environ, 'PATH_INFO', '')
A:django.core.handlers.wsgi.script_url->_lazy_re_compile(b'/+').sub(b'/', script_url)
A:django.core.handlers.wsgi.value->get_bytes_from_wsgi(environ, key, default)
django.core.handlers.wsgi.LimitedStream(self,stream,limit,buf_size=64*1024*1024)
django.core.handlers.wsgi.LimitedStream.__init__(self,stream,limit,buf_size=64*1024*1024)
django.core.handlers.wsgi.LimitedStream._read_limited(self,size=None)
django.core.handlers.wsgi.LimitedStream.read(self,size=None)
django.core.handlers.wsgi.LimitedStream.readline(self,size=None)
django.core.handlers.wsgi.WSGIHandler(self,*args,**kwargs)
django.core.handlers.wsgi.WSGIHandler.__init__(self,*args,**kwargs)
django.core.handlers.wsgi.WSGIRequest(self,environ)
django.core.handlers.wsgi.WSGIRequest.COOKIES(self)
django.core.handlers.wsgi.WSGIRequest.FILES(self)
django.core.handlers.wsgi.WSGIRequest.GET(self)
django.core.handlers.wsgi.WSGIRequest.__init__(self,environ)
django.core.handlers.wsgi.WSGIRequest._get_post(self)
django.core.handlers.wsgi.WSGIRequest._get_scheme(self)
django.core.handlers.wsgi.WSGIRequest._set_post(self,post)
django.core.handlers.wsgi.get_bytes_from_wsgi(environ,key,default)
django.core.handlers.wsgi.get_path_info(environ)
django.core.handlers.wsgi.get_script_name(environ)
django.core.handlers.wsgi.get_str_from_wsgi(environ,key,default)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/handlers/base.py----------------------------------------
A:django.core.handlers.base.logger->logging.getLogger('django.request')
A:django.core.handlers.base.handler->self.adapt_method_mode(is_async, handler, handler_is_async)
A:django.core.handlers.base.middleware->import_string(middleware_path)
A:django.core.handlers.base.middleware_can_sync->getattr(middleware, 'sync_capable', True)
A:django.core.handlers.base.middleware_can_async->getattr(middleware, 'async_capable', False)
A:django.core.handlers.base.adapted_handler->self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)
A:django.core.handlers.base.mw_instance->middleware(adapted_handler)
A:django.core.handlers.base.method_is_async->asyncio.iscoroutinefunction(method)
A:django.core.handlers.base.response->middleware_method(request, exception)
A:django.core.handlers.base.(callback, callback_args, callback_kwargs)->self.resolve_request(request)
A:django.core.handlers.base.wrapped_callback->sync_to_async(wrapped_callback, thread_sensitive=True)
A:django.core.handlers.base.resolver->get_resolver()
A:django.core.handlers.base.resolver_match->get_resolver().resolve(request.path_info)
A:django.core.handlers.base.non_atomic_requests->getattr(view, '_non_atomic_requests', set())
A:django.core.handlers.base.view->django.db.transaction.atomic(using=db.alias)(view)
django.core.handlers.base.BaseHandler
django.core.handlers.base.BaseHandler._get_response(self,request)
django.core.handlers.base.BaseHandler.adapt_method_mode(self,is_async,method,method_is_async=None,debug=False,name=None)
django.core.handlers.base.BaseHandler.check_response(self,response,callback,name=None)
django.core.handlers.base.BaseHandler.get_response(self,request)
django.core.handlers.base.BaseHandler.load_middleware(self,is_async=False)
django.core.handlers.base.BaseHandler.make_view_atomic(self,view)
django.core.handlers.base.BaseHandler.process_exception_by_middleware(self,exception,request)
django.core.handlers.base.BaseHandler.resolve_request(self,request)
django.core.handlers.base.reset_urlconf(sender,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/handlers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/handlers/asgi.py----------------------------------------
A:django.core.handlers.asgi.logger->logging.getLogger('django.request')
A:django.core.handlers.asgi.self.script_name->self.scope.get('root_path', '')
A:django.core.handlers.asgi.self.method->self.scope['method'].upper()
A:django.core.handlers.asgi.query_string->query_string.decode().decode()
A:django.core.handlers.asgi.self.META['SERVER_PORT']->str(self.scope['server'][1])
A:django.core.handlers.asgi.name->name.decode('latin1').decode('latin1')
A:django.core.handlers.asgi.value->value.encode('latin1').encode('latin1')
A:django.core.handlers.asgi.POST->property(_get_post, _set_post)
A:django.core.handlers.asgi.FILES->property(_get_files)
A:django.core.handlers.asgi.(request, error_response)->self.create_request(scope, body_file)
A:django.core.handlers.asgi.body_file->tempfile.SpooledTemporaryFile(max_size=settings.FILE_UPLOAD_MAX_MEMORY_SIZE, mode='w+b')
A:django.core.handlers.asgi.header->header.encode('ascii').encode('ascii')
django.core.handlers.asgi.ASGIHandler(self)
django.core.handlers.asgi.ASGIHandler.__init__(self)
django.core.handlers.asgi.ASGIHandler.chunk_bytes(cls,data)
django.core.handlers.asgi.ASGIHandler.create_request(self,scope,body_file)
django.core.handlers.asgi.ASGIHandler.get_script_prefix(self,scope)
django.core.handlers.asgi.ASGIHandler.handle_uncaught_exception(self,request,resolver,exc_info)
django.core.handlers.asgi.ASGIRequest(self,scope,body_file)
django.core.handlers.asgi.ASGIRequest.COOKIES(self)
django.core.handlers.asgi.ASGIRequest.GET(self)
django.core.handlers.asgi.ASGIRequest.__init__(self,scope,body_file)
django.core.handlers.asgi.ASGIRequest._get_files(self)
django.core.handlers.asgi.ASGIRequest._get_post(self)
django.core.handlers.asgi.ASGIRequest._get_scheme(self)
django.core.handlers.asgi.ASGIRequest._set_post(self,post)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/storage.py----------------------------------------
A:django.core.files.storage.content->File(content, name)
A:django.core.files.storage.name->self.path(name)
A:django.core.files.storage.(dir_name, file_name)->os.path.split(name)
A:django.core.files.storage.(file_root, file_ext)->os.path.splitext(file_name)
A:django.core.files.storage.(dirname, filename)->os.path.split(filename)
A:django.core.files.storage.full_path->self.path(name)
A:django.core.files.storage.directory->os.path.dirname(full_path)
A:django.core.files.storage.old_umask->os.umask(511 & ~self.directory_permissions_mode)
A:django.core.files.storage.fd->os.open(full_path, self.OS_OPEN_FLAGS, 438)
A:django.core.files.storage._file->os.fdopen(fd, mode)
A:django.core.files.storage.path->self.path(path)
A:django.core.files.storage.url->url.lstrip('/').lstrip('/')
A:django.core.files.storage.self._wrapped->get_storage_class()()
A:django.core.files.storage.default_storage->DefaultStorage()
django.core.files.storage.DefaultStorage(LazyObject)
django.core.files.storage.DefaultStorage._setup(self)
django.core.files.storage.FileSystemStorage(self,location=None,base_url=None,file_permissions_mode=None,directory_permissions_mode=None)
django.core.files.storage.FileSystemStorage.__init__(self,location=None,base_url=None,file_permissions_mode=None,directory_permissions_mode=None)
django.core.files.storage.FileSystemStorage._clear_cached_properties(self,setting,**kwargs)
django.core.files.storage.FileSystemStorage._datetime_from_timestamp(self,ts)
django.core.files.storage.FileSystemStorage._open(self,name,mode='rb')
django.core.files.storage.FileSystemStorage._save(self,name,content)
django.core.files.storage.FileSystemStorage._value_or_setting(self,value,setting)
django.core.files.storage.FileSystemStorage.base_location(self)
django.core.files.storage.FileSystemStorage.base_url(self)
django.core.files.storage.FileSystemStorage.delete(self,name)
django.core.files.storage.FileSystemStorage.directory_permissions_mode(self)
django.core.files.storage.FileSystemStorage.exists(self,name)
django.core.files.storage.FileSystemStorage.file_permissions_mode(self)
django.core.files.storage.FileSystemStorage.get_accessed_time(self,name)
django.core.files.storage.FileSystemStorage.get_created_time(self,name)
django.core.files.storage.FileSystemStorage.get_modified_time(self,name)
django.core.files.storage.FileSystemStorage.listdir(self,path)
django.core.files.storage.FileSystemStorage.location(self)
django.core.files.storage.FileSystemStorage.path(self,name)
django.core.files.storage.FileSystemStorage.size(self,name)
django.core.files.storage.FileSystemStorage.url(self,name)
django.core.files.storage.Storage
django.core.files.storage.Storage.delete(self,name)
django.core.files.storage.Storage.exists(self,name)
django.core.files.storage.Storage.generate_filename(self,filename)
django.core.files.storage.Storage.get_accessed_time(self,name)
django.core.files.storage.Storage.get_alternative_name(self,file_root,file_ext)
django.core.files.storage.Storage.get_available_name(self,name,max_length=None)
django.core.files.storage.Storage.get_created_time(self,name)
django.core.files.storage.Storage.get_modified_time(self,name)
django.core.files.storage.Storage.get_valid_name(self,name)
django.core.files.storage.Storage.listdir(self,path)
django.core.files.storage.Storage.open(self,name,mode='rb')
django.core.files.storage.Storage.path(self,name)
django.core.files.storage.Storage.save(self,name,content,max_length=None)
django.core.files.storage.Storage.size(self,name)
django.core.files.storage.Storage.url(self,name)
django.core.files.storage.get_storage_class(import_path=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/images.py----------------------------------------
A:django.core.files.images.self._dimensions_cache->get_image_dimensions(self, close=close)
A:django.core.files.images.p->PIL.ImageFile.Parser()
A:django.core.files.images.file_pos->open(file_or_path, 'rb').tell()
A:django.core.files.images.file->open(file_or_path, 'rb')
A:django.core.files.images.data->open(file_or_path, 'rb').read(chunk_size)
django.core.files.images.ImageFile(File)
django.core.files.images.ImageFile._get_image_dimensions(self)
django.core.files.images.ImageFile.height(self)
django.core.files.images.ImageFile.width(self)
django.core.files.images.get_image_dimensions(file_or_path,close=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/uploadhandler.py----------------------------------------
A:django.core.files.uploadhandler.self.file->BytesIO()
A:django.core.files.uploadhandler.temp_location->self.file.temporary_file_path()
django.core.files.uploadhandler.FileUploadHandler(self,request=None)
django.core.files.uploadhandler.FileUploadHandler.__init__(self,request=None)
django.core.files.uploadhandler.FileUploadHandler.file_complete(self,file_size)
django.core.files.uploadhandler.FileUploadHandler.handle_raw_input(self,input_data,META,content_length,boundary,encoding=None)
django.core.files.uploadhandler.FileUploadHandler.new_file(self,field_name,file_name,content_type,content_length,charset=None,content_type_extra=None)
django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk(self,raw_data,start)
django.core.files.uploadhandler.FileUploadHandler.upload_complete(self)
django.core.files.uploadhandler.FileUploadHandler.upload_interrupted(self)
django.core.files.uploadhandler.MemoryFileUploadHandler(FileUploadHandler)
django.core.files.uploadhandler.MemoryFileUploadHandler.file_complete(self,file_size)
django.core.files.uploadhandler.MemoryFileUploadHandler.handle_raw_input(self,input_data,META,content_length,boundary,encoding=None)
django.core.files.uploadhandler.MemoryFileUploadHandler.new_file(self,*args,**kwargs)
django.core.files.uploadhandler.MemoryFileUploadHandler.receive_data_chunk(self,raw_data,start)
django.core.files.uploadhandler.SkipFile(UploadFileException)
django.core.files.uploadhandler.StopFutureHandlers(UploadFileException)
django.core.files.uploadhandler.StopUpload(self,connection_reset=False)
django.core.files.uploadhandler.StopUpload.__init__(self,connection_reset=False)
django.core.files.uploadhandler.StopUpload.__str__(self)
django.core.files.uploadhandler.TemporaryFileUploadHandler(FileUploadHandler)
django.core.files.uploadhandler.TemporaryFileUploadHandler.file_complete(self,file_size)
django.core.files.uploadhandler.TemporaryFileUploadHandler.new_file(self,*args,**kwargs)
django.core.files.uploadhandler.TemporaryFileUploadHandler.receive_data_chunk(self,raw_data,start)
django.core.files.uploadhandler.TemporaryFileUploadHandler.upload_interrupted(self)
django.core.files.uploadhandler.UploadFileException(Exception)
django.core.files.uploadhandler.load_handler(path,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/utils.py----------------------------------------
A:django.core.files.utils.encoding->property(lambda self: self.file.encoding)
A:django.core.files.utils.fileno->property(lambda self: self.file.fileno)
A:django.core.files.utils.flush->property(lambda self: self.file.flush)
A:django.core.files.utils.isatty->property(lambda self: self.file.isatty)
A:django.core.files.utils.newlines->property(lambda self: self.file.newlines)
A:django.core.files.utils.read->property(lambda self: self.file.read)
A:django.core.files.utils.readinto->property(lambda self: self.file.readinto)
A:django.core.files.utils.readline->property(lambda self: self.file.readline)
A:django.core.files.utils.readlines->property(lambda self: self.file.readlines)
A:django.core.files.utils.seek->property(lambda self: self.file.seek)
A:django.core.files.utils.tell->property(lambda self: self.file.tell)
A:django.core.files.utils.truncate->property(lambda self: self.file.truncate)
A:django.core.files.utils.write->property(lambda self: self.file.write)
A:django.core.files.utils.writelines->property(lambda self: self.file.writelines)
django.core.files.utils.FileProxyMixin
django.core.files.utils.FileProxyMixin.__iter__(self)
django.core.files.utils.FileProxyMixin.closed(self)
django.core.files.utils.FileProxyMixin.readable(self)
django.core.files.utils.FileProxyMixin.seekable(self)
django.core.files.utils.FileProxyMixin.writable(self)
django.core.files.utils.validate_file_name(name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/uploadedfile.py----------------------------------------
A:django.core.files.uploadedfile.name->property(_get_name, _set_name)
A:django.core.files.uploadedfile.(name, ext)->os.path.splitext(name)
A:django.core.files.uploadedfile.(_, ext)->os.path.splitext(name)
A:django.core.files.uploadedfile.file->django.core.files.temp.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)
django.core.files.uploadedfile.InMemoryUploadedFile(self,file,field_name,name,content_type,size,charset,content_type_extra=None)
django.core.files.uploadedfile.InMemoryUploadedFile.__init__(self,file,field_name,name,content_type,size,charset,content_type_extra=None)
django.core.files.uploadedfile.InMemoryUploadedFile.chunks(self,chunk_size=None)
django.core.files.uploadedfile.InMemoryUploadedFile.multiple_chunks(self,chunk_size=None)
django.core.files.uploadedfile.InMemoryUploadedFile.open(self,mode=None)
django.core.files.uploadedfile.SimpleUploadedFile(self,name,content,content_type='text/plain')
django.core.files.uploadedfile.SimpleUploadedFile.__init__(self,name,content,content_type='text/plain')
django.core.files.uploadedfile.SimpleUploadedFile.from_dict(cls,file_dict)
django.core.files.uploadedfile.TemporaryUploadedFile(self,name,content_type,size,charset,content_type_extra=None)
django.core.files.uploadedfile.TemporaryUploadedFile.__init__(self,name,content_type,size,charset,content_type_extra=None)
django.core.files.uploadedfile.TemporaryUploadedFile.close(self)
django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path(self)
django.core.files.uploadedfile.UploadedFile(self,file=None,name=None,content_type=None,size=None,charset=None,content_type_extra=None)
django.core.files.uploadedfile.UploadedFile.__init__(self,file=None,name=None,content_type=None,size=None,charset=None,content_type_extra=None)
django.core.files.uploadedfile.UploadedFile.__repr__(self)
django.core.files.uploadedfile.UploadedFile._get_name(self)
django.core.files.uploadedfile.UploadedFile._set_name(self,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/move.py----------------------------------------
A:django.core.files.move.fd->os.open(new_file_name, os.O_WRONLY | os.O_CREAT | getattr(os, 'O_BINARY', 0) | (os.O_EXCL if not allow_overwrite else 0))
A:django.core.files.move.current_chunk->old_file.read(chunk_size)
django.core.files.move._samefile(src,dst)
django.core.files.move.file_move_safe(old_file_name,new_file_name,chunk_size=1024*64,allow_overwrite=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/temp.py----------------------------------------
A:django.core.files.temp.(fd, name)->tempfile.mkstemp(suffix=suffix, prefix=prefix, dir=dir)
A:django.core.files.temp.self.file->os.fdopen(fd, mode, bufsize)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/base.py----------------------------------------
A:django.core.files.base.name->getattr(file, 'name', None)
A:django.core.files.base.pos->self.file.tell()
A:django.core.files.base.size->self.file.tell()
A:django.core.files.base.data->self.read(chunk_size)
A:django.core.files.base.self.file->open(self.name, mode or self.mode)
A:django.core.files.base.self.size->len(content)
django.core.files.File(self,file,name=None)
django.core.files.File.__bool__(self)
django.core.files.File.__enter__(self)
django.core.files.File.__exit__(self,exc_type,exc_value,tb)
django.core.files.File.__iter__(self)
django.core.files.File.__len__(self)
django.core.files.File.__repr__(self)
django.core.files.File.__str__(self)
django.core.files.File.chunks(self,chunk_size=None)
django.core.files.File.close(self)
django.core.files.File.multiple_chunks(self,chunk_size=None)
django.core.files.File.open(self,mode=None)
django.core.files.File.size(self)
django.core.files.base.ContentFile(self,content,name=None)
django.core.files.base.ContentFile.__bool__(self)
django.core.files.base.ContentFile.__init__(self,content,name=None)
django.core.files.base.ContentFile.__str__(self)
django.core.files.base.ContentFile.close(self)
django.core.files.base.ContentFile.open(self,mode=None)
django.core.files.base.ContentFile.write(self,data)
django.core.files.base.File(self,file,name=None)
django.core.files.base.File.__bool__(self)
django.core.files.base.File.__enter__(self)
django.core.files.base.File.__exit__(self,exc_type,exc_value,tb)
django.core.files.base.File.__init__(self,file,name=None)
django.core.files.base.File.__iter__(self)
django.core.files.base.File.__len__(self)
django.core.files.base.File.__repr__(self)
django.core.files.base.File.__str__(self)
django.core.files.base.File.chunks(self,chunk_size=None)
django.core.files.base.File.close(self)
django.core.files.base.File.multiple_chunks(self,chunk_size=None)
django.core.files.base.File.open(self,mode=None)
django.core.files.base.File.size(self)
django.core.files.base.endswith_cr(line)
django.core.files.base.endswith_lf(line)
django.core.files.base.equals_lf(line)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/locks.py----------------------------------------
A:django.core.files.locks.LPOVERLAPPED->POINTER(OVERLAPPED)
A:django.core.files.locks.hfile->msvcrt.get_osfhandle(_fd(f))
A:django.core.files.locks.overlapped->OVERLAPPED()
A:django.core.files.locks.ret->UnlockFileEx(hfile, 0, 0, 4294901760, byref(overlapped))
django.core.files.locks._fd(f)


----------------------------------------/home/zhang/Packages/django/django3.2.1/core/files/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/conf.py----------------------------------------
A:django.urls.conf.urlconf_module->import_module(urlconf_module)
A:django.urls.conf.patterns->getattr(urlconf_module, 'urlpatterns', urlconf_module)
A:django.urls.conf.app_name->getattr(urlconf_module, 'app_name', app_name)
A:django.urls.conf.pattern->Pattern(route, name=name, is_endpoint=True)
A:django.urls.conf.path->partial(_path, Pattern=RoutePattern)
A:django.urls.conf.re_path->partial(_path, Pattern=RegexPattern)
django.urls.conf._path(route,view,kwargs=None,name=None,Pattern=None)
django.urls.conf.include(arg,namespace=None)
django.urls.include(arg,namespace=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/utils.py----------------------------------------
A:django.urls.utils.(mod_name, func_name)->get_mod_func(lookup_view)
A:django.urls.utils.mod->import_module(mod_name)
A:django.urls.utils.(parentmod, submod)->get_mod_func(mod_name)
A:django.urls.utils.view_func->getattr(mod, func_name)
A:django.urls.utils.dot->callback.rindex('.')
django.urls.get_callable(lookup_view)
django.urls.get_mod_func(callback)
django.urls.utils.get_callable(lookup_view)
django.urls.utils.get_mod_func(callback)


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/converters.py----------------------------------------
A:django.urls.converters.REGISTERED_CONVERTERS[type_name]->converter()
django.urls.converters.IntConverter
django.urls.converters.IntConverter.to_python(self,value)
django.urls.converters.IntConverter.to_url(self,value)
django.urls.converters.PathConverter(StringConverter)
django.urls.converters.SlugConverter(StringConverter)
django.urls.converters.StringConverter
django.urls.converters.StringConverter.to_python(self,value)
django.urls.converters.StringConverter.to_url(self,value)
django.urls.converters.UUIDConverter
django.urls.converters.UUIDConverter.to_python(self,value)
django.urls.converters.UUIDConverter.to_url(self,value)
django.urls.converters.get_converter(raw_converter)
django.urls.converters.get_converters()
django.urls.converters.register_converter(converter,type_name)
django.urls.register_converter(converter,type_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/base.py----------------------------------------
A:django.urls.base._prefixes->Local()
A:django.urls.base._urlconfs->Local()
A:django.urls.base.urlconf->get_urlconf()
A:django.urls.base.resolver->get_ns_resolver(ns_pattern, resolver, tuple(ns_converters.items()))
A:django.urls.base.prefix->get_script_prefix()
A:django.urls.base.(*path, view)->viewname.split(':')
A:django.urls.base.current_path->current_app.split(':')
A:django.urls.base.reverse_lazy->lazy(reverse, str)
A:django.urls.base.parsed->urlsplit(url)
A:django.urls.base.match->resolve(unquote(parsed.path))
A:django.urls.base.url->urlunsplit((parsed.scheme, parsed.netloc, url, parsed.query, parsed.fragment))
django.set_script_prefix(prefix)
django.urls.base.clear_script_prefix()
django.urls.base.clear_url_caches()
django.urls.base.get_script_prefix()
django.urls.base.get_urlconf(default=None)
django.urls.base.is_valid_path(path,urlconf=None)
django.urls.base.resolve(path,urlconf=None)
django.urls.base.reverse(viewname,urlconf=None,args=None,kwargs=None,current_app=None)
django.urls.base.set_script_prefix(prefix)
django.urls.base.set_urlconf(urlconf_name)
django.urls.base.translate_url(url,lang_code)
django.urls.clear_script_prefix()
django.urls.clear_url_caches()
django.urls.get_script_prefix()
django.urls.get_urlconf(default=None)
django.urls.is_valid_path(path,urlconf=None)
django.urls.resolve(path,urlconf=None)
django.urls.reverse(viewname,urlconf=None,args=None,kwargs=None,current_app=None)
django.urls.set_urlconf(urlconf_name)
django.urls.translate_url(url,lang_code)


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/exceptions.py----------------------------------------
django.urls.NoReverseMatch(Exception)
django.urls.Resolver404(Http404)
django.urls.exceptions.NoReverseMatch(Exception)
django.urls.exceptions.Resolver404(Http404)


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/urls/resolvers.py----------------------------------------
A:django.urls.resolvers.self.app_name->':'.join(self.app_names)
A:django.urls.resolvers.self.namespace->':'.join(self.namespaces)
A:django.urls.resolvers.self.view_name->':'.join(self.namespaces + [view_path])
A:django.urls.resolvers.pattern->getattr(instance, self.attr)
A:django.urls.resolvers.pattern.converters->dict(converters)
A:django.urls.resolvers.ns_resolver->URLResolver(pattern, resolver.url_patterns)
A:django.urls.resolvers.instance.__dict__['regex']->instance._compile(pattern)
A:django.urls.resolvers.language_code->get_language()
A:django.urls.resolvers.instance._regex_dict[language_code]->instance._compile(str(pattern))
A:django.urls.resolvers.description->"'{}'".format(self)
A:django.urls.resolvers.warning->Warning("Your URL pattern {} has a name including a ':'. Remove the colon, to avoid ambiguous namespace references.".format(self.pattern.describe()), id='urls.W003')
A:django.urls.resolvers.regex->LocaleRegexDescriptor('_route')
A:django.urls.resolvers.match->self.pattern.match(path)
A:django.urls.resolvers.kwargs->self.pattern.match(path).groupdict()
A:django.urls.resolvers._PATH_PARAMETER_COMPONENT_RE->_lazy_re_compile('<(?:(?P<converter>[^>:]+):)?(?P<parameter>[^>]+)>')
A:django.urls.resolvers.converter->get_converter(raw_converter)
A:django.urls.resolvers.kwargs[key]->get_converter(raw_converter).to_python(value)
A:django.urls.resolvers.warnings->self._check_pattern_name()
A:django.urls.resolvers.self._callback_strs->set()
A:django.urls.resolvers.self._local->Local()
A:django.urls.resolvers.urlconf_repr->repr(self.urlconf_name)
A:django.urls.resolvers.handler->self.resolve_error_handler(status_code)
A:django.urls.resolvers.path->str(path)
A:django.urls.resolvers.msg->"The custom handler{status_code} view '{path}' does not take the correct number of arguments ({args}).".format(status_code=status_code, path=handler.__module__ + '.' + handler.__qualname__, args='request, exception' if num_parameters == 2 else 'request')
A:django.urls.resolvers.signature->inspect.signature(handler)
A:django.urls.resolvers.lookups->MultiValueDict()
A:django.urls.resolvers.bits->normalize(url_pattern.pattern.regex.pattern)
A:django.urls.resolvers.new_matches->normalize(p_pattern + pat)
A:django.urls.resolvers.sub_match->getattr(instance, self.attr).resolve(new_path)
A:django.urls.resolvers.patterns->getattr(self.urlconf_module, 'urlpatterns', self.urlconf_module)
A:django.urls.resolvers.callback->getattr(urls, 'handler%s' % view_type)
A:django.urls.resolvers.possibilities->self.reverse_dict.getlist(lookup_view)
A:django.urls.resolvers.candidate_subs->dict(zip(params, args))
A:django.urls.resolvers.text_candidate_subs[k]->str(v)
A:django.urls.resolvers.url->quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')
A:django.urls.resolvers.m->getattr(lookup_view, '__module__', None)
A:django.urls.resolvers.n->getattr(lookup_view, '__name__', None)
django.urls.LocalePrefixPattern(self,prefix_default_language=True)
django.urls.LocalePrefixPattern.__str__(self)
django.urls.LocalePrefixPattern.check(self)
django.urls.LocalePrefixPattern.describe(self)
django.urls.LocalePrefixPattern.language_prefix(self)
django.urls.LocalePrefixPattern.match(self,path)
django.urls.LocalePrefixPattern.regex(self)
django.urls.ResolverMatch(self,func,args,kwargs,url_name=None,app_names=None,namespaces=None,route=None,tried=None)
django.urls.ResolverMatch.__getitem__(self,index)
django.urls.ResolverMatch.__repr__(self)
django.urls.URLPattern(self,pattern,callback,default_args=None,name=None)
django.urls.URLPattern.__repr__(self)
django.urls.URLPattern._check_pattern_name(self)
django.urls.URLPattern.check(self)
django.urls.URLPattern.lookup_str(self)
django.urls.URLPattern.resolve(self,path)
django.urls.URLResolver(self,pattern,urlconf_name,default_kwargs=None,app_name=None,namespace=None)
django.urls.URLResolver.__repr__(self)
django.urls.URLResolver._check_custom_error_handlers(self)
django.urls.URLResolver._extend_tried(tried,pattern,sub_tried=None)
django.urls.URLResolver._is_callback(self,name)
django.urls.URLResolver._join_route(route1,route2)
django.urls.URLResolver._populate(self)
django.urls.URLResolver._reverse_with_prefix(self,lookup_view,_prefix,*args,**kwargs)
django.urls.URLResolver.app_dict(self)
django.urls.URLResolver.check(self)
django.urls.URLResolver.namespace_dict(self)
django.urls.URLResolver.resolve(self,path)
django.urls.URLResolver.resolve_error_handler(self,view_type)
django.urls.URLResolver.reverse(self,lookup_view,*args,**kwargs)
django.urls.URLResolver.reverse_dict(self)
django.urls.URLResolver.url_patterns(self)
django.urls.URLResolver.urlconf_module(self)
django.urls.get_ns_resolver(ns_pattern,resolver,converters)
django.urls.get_resolver(urlconf=None)
django.urls.resolvers.CheckURLMixin
django.urls.resolvers.CheckURLMixin._check_pattern_startswith_slash(self)
django.urls.resolvers.CheckURLMixin.describe(self)
django.urls.resolvers.LocalePrefixPattern(self,prefix_default_language=True)
django.urls.resolvers.LocalePrefixPattern.__init__(self,prefix_default_language=True)
django.urls.resolvers.LocalePrefixPattern.__str__(self)
django.urls.resolvers.LocalePrefixPattern.check(self)
django.urls.resolvers.LocalePrefixPattern.describe(self)
django.urls.resolvers.LocalePrefixPattern.language_prefix(self)
django.urls.resolvers.LocalePrefixPattern.match(self,path)
django.urls.resolvers.LocalePrefixPattern.regex(self)
django.urls.resolvers.LocaleRegexDescriptor(self,attr)
django.urls.resolvers.LocaleRegexDescriptor.__get__(self,instance,cls=None)
django.urls.resolvers.LocaleRegexDescriptor.__init__(self,attr)
django.urls.resolvers.RegexPattern(self,regex,name=None,is_endpoint=False)
django.urls.resolvers.RegexPattern.__init__(self,regex,name=None,is_endpoint=False)
django.urls.resolvers.RegexPattern.__str__(self)
django.urls.resolvers.RegexPattern._check_include_trailing_dollar(self)
django.urls.resolvers.RegexPattern._compile(self,regex)
django.urls.resolvers.RegexPattern.check(self)
django.urls.resolvers.RegexPattern.match(self,path)
django.urls.resolvers.ResolverMatch(self,func,args,kwargs,url_name=None,app_names=None,namespaces=None,route=None,tried=None)
django.urls.resolvers.ResolverMatch.__getitem__(self,index)
django.urls.resolvers.ResolverMatch.__init__(self,func,args,kwargs,url_name=None,app_names=None,namespaces=None,route=None,tried=None)
django.urls.resolvers.ResolverMatch.__repr__(self)
django.urls.resolvers.RoutePattern(self,route,name=None,is_endpoint=False)
django.urls.resolvers.RoutePattern.__init__(self,route,name=None,is_endpoint=False)
django.urls.resolvers.RoutePattern.__str__(self)
django.urls.resolvers.RoutePattern._compile(self,route)
django.urls.resolvers.RoutePattern.check(self)
django.urls.resolvers.RoutePattern.match(self,path)
django.urls.resolvers.URLPattern(self,pattern,callback,default_args=None,name=None)
django.urls.resolvers.URLPattern.__init__(self,pattern,callback,default_args=None,name=None)
django.urls.resolvers.URLPattern.__repr__(self)
django.urls.resolvers.URLPattern._check_pattern_name(self)
django.urls.resolvers.URLPattern.check(self)
django.urls.resolvers.URLPattern.lookup_str(self)
django.urls.resolvers.URLPattern.resolve(self,path)
django.urls.resolvers.URLResolver(self,pattern,urlconf_name,default_kwargs=None,app_name=None,namespace=None)
django.urls.resolvers.URLResolver.__init__(self,pattern,urlconf_name,default_kwargs=None,app_name=None,namespace=None)
django.urls.resolvers.URLResolver.__repr__(self)
django.urls.resolvers.URLResolver._check_custom_error_handlers(self)
django.urls.resolvers.URLResolver._extend_tried(tried,pattern,sub_tried=None)
django.urls.resolvers.URLResolver._is_callback(self,name)
django.urls.resolvers.URLResolver._join_route(route1,route2)
django.urls.resolvers.URLResolver._populate(self)
django.urls.resolvers.URLResolver._reverse_with_prefix(self,lookup_view,_prefix,*args,**kwargs)
django.urls.resolvers.URLResolver.app_dict(self)
django.urls.resolvers.URLResolver.check(self)
django.urls.resolvers.URLResolver.namespace_dict(self)
django.urls.resolvers.URLResolver.resolve(self,path)
django.urls.resolvers.URLResolver.resolve_error_handler(self,view_type)
django.urls.resolvers.URLResolver.reverse(self,lookup_view,*args,**kwargs)
django.urls.resolvers.URLResolver.reverse_dict(self)
django.urls.resolvers.URLResolver.url_patterns(self)
django.urls.resolvers.URLResolver.urlconf_module(self)
django.urls.resolvers._get_cached_resolver(urlconf=None)
django.urls.resolvers._route_to_regex(route,is_endpoint=False)
django.urls.resolvers.get_ns_resolver(ns_pattern,resolver,converters)
django.urls.resolvers.get_resolver(urlconf=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/apps/config.py----------------------------------------
A:django.apps.config.self.verbose_name->self.label.title()
A:django.apps.config.self.path->self._path_from_module(app_module)
A:django.apps.config.paths->list(set(paths))
A:django.apps.config.filename->getattr(module, '__file__', None)
A:django.apps.config.app_module->import_module(app_name)
A:django.apps.config.mod->import_module(mod_path)
A:django.apps.config.app_config_class->import_string(entry)
A:django.apps.config.(mod_path, _, cls_name)->entry.rpartition('.')
A:django.apps.config.self.models_module->import_module(models_module_name)
django.apps.AppConfig(self,app_name,app_module)
django.apps.AppConfig.__repr__(self)
django.apps.AppConfig._is_default_auto_field_overridden(self)
django.apps.AppConfig._path_from_module(self,module)
django.apps.AppConfig.create(cls,entry)
django.apps.AppConfig.default_auto_field(self)
django.apps.AppConfig.get_model(self,model_name,require_ready=True)
django.apps.AppConfig.get_models(self,include_auto_created=False,include_swapped=False)
django.apps.AppConfig.import_models(self)
django.apps.AppConfig.ready(self)
django.apps.config.AppConfig(self,app_name,app_module)
django.apps.config.AppConfig.__init__(self,app_name,app_module)
django.apps.config.AppConfig.__repr__(self)
django.apps.config.AppConfig._is_default_auto_field_overridden(self)
django.apps.config.AppConfig._path_from_module(self,module)
django.apps.config.AppConfig.create(cls,entry)
django.apps.config.AppConfig.default_auto_field(self)
django.apps.config.AppConfig.get_model(self,model_name,require_ready=True)
django.apps.config.AppConfig.get_models(self,include_auto_created=False,include_swapped=False)
django.apps.config.AppConfig.import_models(self)
django.apps.config.AppConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/apps/registry.py----------------------------------------
A:django.apps.registry.self.all_models->defaultdict(dict)
A:django.apps.registry.self.ready_event->threading.Event()
A:django.apps.registry.self._lock->threading.RLock()
A:django.apps.registry.self._pending_operations->defaultdict(list)
A:django.apps.registry.app_config->self.get_app_config(app_label)
A:django.apps.registry.counts->Counter((app_config.name for app_config in self.app_configs.values()))
A:django.apps.registry.(app_label, model_name)->app_label.split('.')
A:django.apps.registry.model->self.all_models[app_label].get(model_name.lower())
A:django.apps.registry.available->set(available)
A:django.apps.registry.self.app_configs->self.stored_app_configs.pop()
A:django.apps.registry.next_function->partial(apply_next_model.func, model)
A:django.apps.registry.model_class->self.get_registered_model(*next_model)
A:django.apps.registry.apps->Apps(installed_apps=None)
django.apps.registry.Apps(self,installed_apps=())
django.apps.registry.Apps.__init__(self,installed_apps=())
django.apps.registry.Apps.check_apps_ready(self)
django.apps.registry.Apps.check_models_ready(self)
django.apps.registry.Apps.clear_cache(self)
django.apps.registry.Apps.do_pending_operations(self,model)
django.apps.registry.Apps.get_app_config(self,app_label)
django.apps.registry.Apps.get_app_configs(self)
django.apps.registry.Apps.get_containing_app_config(self,object_name)
django.apps.registry.Apps.get_model(self,app_label,model_name=None,require_ready=True)
django.apps.registry.Apps.get_models(self,include_auto_created=False,include_swapped=False)
django.apps.registry.Apps.get_registered_model(self,app_label,model_name)
django.apps.registry.Apps.get_swappable_settings_name(self,to_string)
django.apps.registry.Apps.is_installed(self,app_name)
django.apps.registry.Apps.lazy_model_operation(self,function,*model_keys)
django.apps.registry.Apps.populate(self,installed_apps=None)
django.apps.registry.Apps.register_model(self,app_label,model)
django.apps.registry.Apps.set_available_apps(self,available)
django.apps.registry.Apps.set_installed_apps(self,installed)
django.apps.registry.Apps.unset_available_apps(self)
django.apps.registry.Apps.unset_installed_apps(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/apps/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/bin/django-admin.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/ptr.py----------------------------------------
django.contrib.gis.ptr.CPointerBase
django.contrib.gis.ptr.CPointerBase.__del__(self)
django.contrib.gis.ptr.CPointerBase.ptr(self)
django.contrib.gis.ptr.CPointerBase.ptr(self,ptr)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/feeds.py----------------------------------------
A:django.contrib.gis.feeds.geom->item.get('geometry')
A:django.contrib.gis.feeds.gtype->str(geom.geom_type).lower()
A:django.contrib.gis.feeds.attrs->super().rss_attributes()
django.contrib.gis.feeds.Feed(BaseFeed)
django.contrib.gis.feeds.Feed.feed_extra_kwargs(self,obj)
django.contrib.gis.feeds.Feed.item_extra_kwargs(self,item)
django.contrib.gis.feeds.GeoAtom1Feed(Atom1Feed,GeoFeedMixin)
django.contrib.gis.feeds.GeoAtom1Feed.add_item_elements(self,handler,item)
django.contrib.gis.feeds.GeoAtom1Feed.add_root_elements(self,handler)
django.contrib.gis.feeds.GeoAtom1Feed.root_attributes(self)
django.contrib.gis.feeds.GeoFeedMixin
django.contrib.gis.feeds.GeoFeedMixin.add_georss_element(self,handler,item,w3c_geo=False)
django.contrib.gis.feeds.GeoFeedMixin.add_georss_point(self,handler,coords,w3c_geo=False)
django.contrib.gis.feeds.GeoFeedMixin.georss_coords(self,coords)
django.contrib.gis.feeds.GeoRSSFeed(Rss201rev2Feed,GeoFeedMixin)
django.contrib.gis.feeds.GeoRSSFeed.add_item_elements(self,handler,item)
django.contrib.gis.feeds.GeoRSSFeed.add_root_elements(self,handler)
django.contrib.gis.feeds.GeoRSSFeed.rss_attributes(self)
django.contrib.gis.feeds.W3CGeoFeed(Rss201rev2Feed,GeoFeedMixin)
django.contrib.gis.feeds.W3CGeoFeed.add_item_elements(self,handler,item)
django.contrib.gis.feeds.W3CGeoFeed.add_root_elements(self,handler)
django.contrib.gis.feeds.W3CGeoFeed.rss_attributes(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/measure.py----------------------------------------
A:django.contrib.gis.measure.(value, self._default_unit)->self.default_units(kwargs)
A:django.contrib.gis.measure.standard->property(_get_standard, _set_standard)
A:django.contrib.gis.measure.value->float(value)
A:django.contrib.gis.measure.lower->unit_str.lower()
django.contrib.gis.measure.Area(MeasureBase)
django.contrib.gis.measure.Area.__truediv__(self,other)
django.contrib.gis.measure.Distance(MeasureBase)
django.contrib.gis.measure.Distance.__mul__(self,other)
django.contrib.gis.measure.MeasureBase(self,default_unit=None,**kwargs)
django.contrib.gis.measure.MeasureBase.__add__(self,other)
django.contrib.gis.measure.MeasureBase.__bool__(self)
django.contrib.gis.measure.MeasureBase.__eq__(self,other)
django.contrib.gis.measure.MeasureBase.__getattr__(self,name)
django.contrib.gis.measure.MeasureBase.__hash__(self)
django.contrib.gis.measure.MeasureBase.__iadd__(self,other)
django.contrib.gis.measure.MeasureBase.__imul__(self,other)
django.contrib.gis.measure.MeasureBase.__init__(self,default_unit=None,**kwargs)
django.contrib.gis.measure.MeasureBase.__isub__(self,other)
django.contrib.gis.measure.MeasureBase.__itruediv__(self,other)
django.contrib.gis.measure.MeasureBase.__lt__(self,other)
django.contrib.gis.measure.MeasureBase.__mul__(self,other)
django.contrib.gis.measure.MeasureBase.__repr__(self)
django.contrib.gis.measure.MeasureBase.__rmul__(self,other)
django.contrib.gis.measure.MeasureBase.__str__(self)
django.contrib.gis.measure.MeasureBase.__sub__(self,other)
django.contrib.gis.measure.MeasureBase.__truediv__(self,other)
django.contrib.gis.measure.MeasureBase._get_standard(self)
django.contrib.gis.measure.MeasureBase._set_standard(self,value)
django.contrib.gis.measure.MeasureBase.default_units(self,kwargs)
django.contrib.gis.measure.MeasureBase.unit_attname(cls,unit_str)
django.contrib.gis.measure.pretty_name(obj)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/shortcuts.py----------------------------------------
A:django.contrib.gis.shortcuts.kmz->BytesIO()
django.contrib.gis.shortcuts.compress_kml(kml)
django.contrib.gis.shortcuts.render_to_kml(*args,**kwargs)
django.contrib.gis.shortcuts.render_to_kmz(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/apps.py----------------------------------------
A:django.contrib.gis.apps.verbose_name->_('GIS')
django.contrib.gis.apps.GISConfig(AppConfig)
django.contrib.gis.apps.GISConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/views.py----------------------------------------
A:django.contrib.gis.views.instance->f()
django.contrib.gis.views.feed(request,url,feed_dict=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geometry.py----------------------------------------
A:django.contrib.gis.geometry.hex_regex->_lazy_re_compile('^[0-9A-F]+$', re.I)
A:django.contrib.gis.geometry.wkt_regex->_lazy_re_compile('^(SRID=(?P<srid>\\-?\\d+);)?(?P<wkt>(?P<type>POINT|LINESTRING|LINEARRING|POLYGON|MULTIPOINT|MULTILINESTRING|MULTIPOLYGON|GEOMETRYCOLLECTION)[ACEGIMLONPSRUTYZ\\d,\\.\\-\\+\\(\\) ]+)$', re.I)
A:django.contrib.gis.geometry.json_regex->_lazy_re_compile('^(\\s+)?\\{.*}(\\s+)?$', re.DOTALL)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/utils.py----------------------------------------
django.contrib.gis.db.backends.utils.SpatialOperator(self,op=None,func=None)
django.contrib.gis.db.backends.utils.SpatialOperator.__init__(self,op=None,func=None)
django.contrib.gis.db.backends.utils.SpatialOperator.as_sql(self,connection,lookup,template_params,sql_params)
django.contrib.gis.db.backends.utils.SpatialOperator.default_template(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/features.py----------------------------------------
django.contrib.gis.db.backends.postgis.features.DatabaseFeatures(BaseSpatialFeatures,Psycopg2DatabaseFeatures)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/adapter.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.adapter.self.is_geometry->isinstance(obj, (GEOSGeometry, PostGISAdapter))
A:django.contrib.gis.db.backends.postgis.adapter.self.ewkb->to_pgraster(obj)
A:django.contrib.gis.db.backends.postgis.adapter.self._adapter->Binary(self.ewkb)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter(self,obj,geography=False)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.__conform__(self,proto)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.__eq__(self,other)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.__hash__(self)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.__init__(self,obj,geography=False)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.__str__(self)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter._fix_polygon(cls,poly)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.getquoted(self)
django.contrib.gis.db.backends.postgis.adapter.PostGISAdapter.prepare(self,conn)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/base.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.base.self.features->DatabaseFeatures(self)
A:django.contrib.gis.db.backends.postgis.base.self.ops->PostGISOperations(self)
A:django.contrib.gis.db.backends.postgis.base.self.introspection->PostGISIntrospection(self)
django.contrib.gis.db.backends.postgis.base.DatabaseWrapper(self,*args,**kwargs)
django.contrib.gis.db.backends.postgis.base.DatabaseWrapper.__init__(self,*args,**kwargs)
django.contrib.gis.db.backends.postgis.base.DatabaseWrapper.prepare_database(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/const.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/schema.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.schema.field_column->self.quote_name(field.column)
django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor(DatabaseSchemaEditor)
django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor._alter_column_type_sql(self,table,old_field,new_field,new_type)
django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor._create_index_sql(self,model,*,fields=None,**kwargs)
django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor._field_should_be_indexed(self,model,field)
django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor.geo_quote_name(self,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/pgraster.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.pgraster.(header, data)->chunk(data, 122)
A:django.contrib.gis.db.backends.postgis.pgraster.header->unpack(POSTGIS_HEADER_STRUCTURE, header)
A:django.contrib.gis.db.backends.postgis.pgraster.(pixeltype_with_flags, data)->chunk(data, 2)
A:django.contrib.gis.db.backends.postgis.pgraster.(nodata, data)->chunk(data, pack_size)
A:django.contrib.gis.db.backends.postgis.pgraster.(band, data)->chunk(data, pack_size * header[10] * header[11])
A:django.contrib.gis.db.backends.postgis.pgraster.result->pack(POSTGIS_HEADER_STRUCTURE, rasterheader)
A:django.contrib.gis.db.backends.postgis.pgraster.bandheader->pack(structure, (pixeltype, band.nodata_value or 0))
django.contrib.gis.db.backends.postgis.pgraster.chunk(data,index)
django.contrib.gis.db.backends.postgis.pgraster.from_pgraster(data)
django.contrib.gis.db.backends.postgis.pgraster.pack(structure,data)
django.contrib.gis.db.backends.postgis.pgraster.to_pgraster(rast)
django.contrib.gis.db.backends.postgis.pgraster.unpack(structure,data)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/operations.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.operations.template_params->self.check_raster(lookup, template_params)
A:django.contrib.gis.db.backends.postgis.operations.rhs_is_raster->isinstance(lookup.rhs, GDALRaster)
A:django.contrib.gis.db.backends.postgis.operations.self.source_expressions[0]->Value(expr.value, output_field=RasterField(srid=expr.value.srid))
A:django.contrib.gis.db.backends.postgis.operations.unsupported_functions->set()
A:django.contrib.gis.db.backends.postgis.operations.vtup->self.postgis_version_tuple()
A:django.contrib.gis.db.backends.postgis.operations.(ll, ur)->box3d[6:-1].split(',')
A:django.contrib.gis.db.backends.postgis.operations.(xmin, ymin)->map(float, ll.split())
A:django.contrib.gis.db.backends.postgis.operations.(xmax, ymax)->map(float, ur.split())
A:django.contrib.gis.db.backends.postgis.operations.(xmin, ymin, zmin)->map(float, ll.split())
A:django.contrib.gis.db.backends.postgis.operations.(xmax, ymax, zmax)->map(float, ur.split())
A:django.contrib.gis.db.backends.postgis.operations.geodetic->f.geodetic(self.connection)
A:django.contrib.gis.db.backends.postgis.operations.dist_param->getattr(value, Distance.unit_attname(f.units_name(self.connection)))
A:django.contrib.gis.db.backends.postgis.operations.transform_func->self.spatial_function_name('Transform')
A:django.contrib.gis.db.backends.postgis.operations.version->self.postgis_lib_version()
A:django.contrib.gis.db.backends.postgis.operations.proj_regex->re.compile('(\\d+)\\.(\\d+)\\.(\\d+)')
A:django.contrib.gis.db.backends.postgis.operations.proj_ver_str->self.postgis_proj_version()
A:django.contrib.gis.db.backends.postgis.operations.m->re.compile('(\\d+)\\.(\\d+)\\.(\\d+)').search(proj_ver_str)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations(BaseSpatialOperations,DatabaseOperations)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations._get_postgis_func(self,func)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations._normalize_distance_lookup_arg(arg)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.convert_extent(self,box)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.convert_extent3d(self,box3d)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.distance_expr_for_lookup(self,lhs,rhs,**kwargs)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.function_names(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.geo_db_type(self,f)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.geometry_columns(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.get_area_att_for_field(self,field)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.get_distance(self,f,dist_val,lookup_type)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.get_geom_placeholder(self,f,value,compiler)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.get_geometry_converter(self,expression)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.parse_raster(self,value)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_full_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_geos_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_lib_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_proj_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.postgis_version_tuple(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.proj_version_tuple(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.spatial_aggregate_name(self,agg_name)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.spatial_ref_sys(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperations.spatial_version(self)
django.contrib.gis.db.backends.postgis.operations.PostGISOperator(self,geography=False,raster=False,**kwargs)
django.contrib.gis.db.backends.postgis.operations.PostGISOperator.__init__(self,geography=False,raster=False,**kwargs)
django.contrib.gis.db.backends.postgis.operations.PostGISOperator.as_sql(self,connection,lookup,template_params,*args)
django.contrib.gis.db.backends.postgis.operations.PostGISOperator.check_raster(self,lookup,template_params)
django.contrib.gis.db.backends.postgis.operations.ST_Polygon(self,expr)
django.contrib.gis.db.backends.postgis.operations.ST_Polygon.__init__(self,expr)
django.contrib.gis.db.backends.postgis.operations.ST_Polygon.output_field(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/models.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.models.f_table_catalog->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.postgis.models.f_table_schema->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.postgis.models.f_table_name->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.postgis.models.f_geometry_column->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.postgis.models.coord_dimension->django.db.models.IntegerField()
A:django.contrib.gis.db.backends.postgis.models.srid->django.db.models.IntegerField(primary_key=True)
A:django.contrib.gis.db.backends.postgis.models.type->django.db.models.CharField(max_length=30)
A:django.contrib.gis.db.backends.postgis.models.auth_name->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.postgis.models.auth_srid->django.db.models.IntegerField()
A:django.contrib.gis.db.backends.postgis.models.srtext->django.db.models.CharField(max_length=2048)
A:django.contrib.gis.db.backends.postgis.models.proj4text->django.db.models.CharField(max_length=2048)
django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns(models.Model)
django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns.Meta
django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns.__str__(self)
django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns.geom_col_name(cls)
django.contrib.gis.db.backends.postgis.models.PostGISGeometryColumns.table_name_col(cls)
django.contrib.gis.db.backends.postgis.models.PostGISSpatialRefSys(models.Model,SpatialRefSysMixin)
django.contrib.gis.db.backends.postgis.models.PostGISSpatialRefSys.Meta
django.contrib.gis.db.backends.postgis.models.PostGISSpatialRefSys.wkt(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/postgis/introspection.py----------------------------------------
A:django.contrib.gis.db.backends.postgis.introspection.self.postgis_oid_lookup->dict(cursor.fetchall())
A:django.contrib.gis.db.backends.postgis.introspection.row->cursor.fetchone()
django.contrib.gis.db.backends.postgis.introspection.PostGISIntrospection(DatabaseIntrospection)
django.contrib.gis.db.backends.postgis.introspection.PostGISIntrospection.get_field_type(self,data_type,description)
django.contrib.gis.db.backends.postgis.introspection.PostGISIntrospection.get_geometry_type(self,table_name,description)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/features.py----------------------------------------
django.contrib.gis.db.backends.oracle.features.DatabaseFeatures(BaseSpatialFeatures,OracleDatabaseFeatures)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/adapter.py----------------------------------------
A:django.contrib.gis.db.backends.oracle.adapter.geom->self._fix_geometry_collection(geom)
A:django.contrib.gis.db.backends.oracle.adapter.poly->poly.clone().clone()
A:django.contrib.gis.db.backends.oracle.adapter.poly.exterior_ring->list(reversed(poly.exterior_ring))
A:django.contrib.gis.db.backends.oracle.adapter.poly[i]->list(reversed(poly[i]))
A:django.contrib.gis.db.backends.oracle.adapter.coll->coll.clone().clone()
A:django.contrib.gis.db.backends.oracle.adapter.coll[i]->cls._fix_polygon(geom, clone=False)
django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter(self,geom)
django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter.__init__(self,geom)
django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter._fix_geometry_collection(cls,coll)
django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter._fix_polygon(cls,poly,clone=True)
django.contrib.gis.db.backends.oracle.adapter.OracleSpatialAdapter._polygon_must_be_fixed(poly)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/base.py----------------------------------------
django.contrib.gis.db.backends.oracle.base.DatabaseWrapper(OracleDatabaseWrapper)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/schema.py----------------------------------------
A:django.contrib.gis.db.backends.oracle.schema.column_sql->super().column_sql(model, field, include_default)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor(self,*args,**kwargs)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.__init__(self,*args,**kwargs)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor._create_spatial_index_name(self,model,field)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.add_field(self,model,field)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.column_sql(self,model,field,include_default=False)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.create_model(self,model)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.delete_model(self,model)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.geo_quote_name(self,name)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.remove_field(self,model,field)
django.contrib.gis.db.backends.oracle.schema.OracleGISSchemaEditor.run_geometry_sql(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/operations.py----------------------------------------
A:django.contrib.gis.db.backends.oracle.operations.mask_regex->re.compile('^(%s)(\\+(%s))*$' % (masks, masks), re.I)
A:django.contrib.gis.db.backends.oracle.operations.ext_geom->GEOSGeometry(memoryview(clob.read()))
A:django.contrib.gis.db.backends.oracle.operations.gtype->str(ext_geom.geom_type)
A:django.contrib.gis.db.backends.oracle.operations.dist_param->getattr(value, Distance.unit_attname(f.units_name(self.connection)))
A:django.contrib.gis.db.backends.oracle.operations.geom->GEOSGeometryBase(read(memoryview(value.read())), geom_class)
django.contrib.gis.db.backends.oracle.operations.OracleOperations(BaseSpatialOperations,DatabaseOperations)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.convert_extent(self,clob)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.geo_db_type(self,f)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.geo_quote_name(self,name)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.geometry_columns(self)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.get_area_att_for_field(self,field)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.get_distance(self,f,value,lookup_type)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.get_geom_placeholder(self,f,value,compiler)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.get_geometry_converter(self,expression)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.modify_insert_params(self,placeholder,params)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.spatial_aggregate_name(self,agg_name)
django.contrib.gis.db.backends.oracle.operations.OracleOperations.spatial_ref_sys(self)
django.contrib.gis.db.backends.oracle.operations.SDODWithin(SpatialOperator)
django.contrib.gis.db.backends.oracle.operations.SDODisjoint(SpatialOperator)
django.contrib.gis.db.backends.oracle.operations.SDOOperator(SpatialOperator)
django.contrib.gis.db.backends.oracle.operations.SDORelate(SpatialOperator)
django.contrib.gis.db.backends.oracle.operations.SDORelate.as_sql(self,connection,lookup,template_params,sql_params)
django.contrib.gis.db.backends.oracle.operations.SDORelate.check_relate_argument(self,arg)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/models.py----------------------------------------
A:django.contrib.gis.db.backends.oracle.models.table_name->django.contrib.gis.db.models.CharField(max_length=32)
A:django.contrib.gis.db.backends.oracle.models.column_name->django.contrib.gis.db.models.CharField(max_length=1024)
A:django.contrib.gis.db.backends.oracle.models.srid->django.contrib.gis.db.models.IntegerField(primary_key=True)
A:django.contrib.gis.db.backends.oracle.models.cs_name->django.contrib.gis.db.models.CharField(max_length=68)
A:django.contrib.gis.db.backends.oracle.models.auth_srid->django.contrib.gis.db.models.IntegerField()
A:django.contrib.gis.db.backends.oracle.models.auth_name->django.contrib.gis.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.oracle.models.wktext->django.contrib.gis.db.models.CharField(max_length=2046)
A:django.contrib.gis.db.backends.oracle.models.cs_bounds->django.contrib.gis.db.models.PolygonField(null=True)
django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns(models.Model)
django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns.Meta
django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns.__str__(self)
django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns.geom_col_name(cls)
django.contrib.gis.db.backends.oracle.models.OracleGeometryColumns.table_name_col(cls)
django.contrib.gis.db.backends.oracle.models.OracleSpatialRefSys(models.Model,SpatialRefSysMixin)
django.contrib.gis.db.backends.oracle.models.OracleSpatialRefSys.Meta
django.contrib.gis.db.backends.oracle.models.OracleSpatialRefSys.wkt(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/oracle/introspection.py----------------------------------------
A:django.contrib.gis.db.backends.oracle.introspection.row->cursor.fetchone()
A:django.contrib.gis.db.backends.oracle.introspection.dim->dim.size().size()
django.contrib.gis.db.backends.oracle.introspection.OracleIntrospection(DatabaseIntrospection)
django.contrib.gis.db.backends.oracle.introspection.OracleIntrospection.data_types_reverse(self)
django.contrib.gis.db.backends.oracle.introspection.OracleIntrospection.get_geometry_type(self,table_name,description)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/features.py----------------------------------------
django.contrib.gis.db.backends.mysql.features.DatabaseFeatures(BaseSpatialFeatures,MySQLDatabaseFeatures)
django.contrib.gis.db.backends.mysql.features.DatabaseFeatures.django_test_skips(self)
django.contrib.gis.db.backends.mysql.features.DatabaseFeatures.empty_intersection_returns_none(self)
django.contrib.gis.db.backends.mysql.features.DatabaseFeatures.supports_geometry_field_unique_index(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/base.py----------------------------------------
django.contrib.gis.db.backends.mysql.base.DatabaseWrapper(MySQLDatabaseWrapper)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/schema.py----------------------------------------
A:django.contrib.gis.db.backends.mysql.schema.logger->logging.getLogger('django.contrib.gis')
A:django.contrib.gis.db.backends.mysql.schema.column_sql->super().column_sql(model, field, include_default)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor(self,*args,**kwargs)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.__init__(self,*args,**kwargs)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor._create_spatial_index_name(self,model,field)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.add_field(self,model,field)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.column_sql(self,model,field,include_default=False)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.create_model(self,model)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.create_spatial_indexes(self)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.remove_field(self,model,field)
django.contrib.gis.db.backends.mysql.schema.MySQLGISSchemaEditor.skip_default(self,field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/operations.py----------------------------------------
A:django.contrib.gis.db.backends.mysql.operations.operators['relate']->SpatialOperator(func='ST_Relate')
A:django.contrib.gis.db.backends.mysql.operations.dist_param->getattr(value, Distance.unit_attname(f.units_name(self.connection)))
A:django.contrib.gis.db.backends.mysql.operations.geom->GEOSGeometryBase(read(memoryview(value)), geom_class)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations(BaseSpatialOperations,DatabaseOperations)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.from_text(self)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.geo_db_type(self,f)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.get_distance(self,f,value,lookup_type)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.get_geometry_converter(self,expression)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.gis_operators(self)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.mariadb(self)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.mysql(self)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.select(self)
django.contrib.gis.db.backends.mysql.operations.MySQLOperations.unsupported_functions(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/mysql/introspection.py----------------------------------------
A:django.contrib.gis.db.backends.mysql.introspection.data_types_reverse->django.db.backends.mysql.introspection.DatabaseIntrospection.data_types_reverse.copy()
A:django.contrib.gis.db.backends.mysql.introspection.storage_engine->self.get_storage_engine(cursor, table_name)
django.contrib.gis.db.backends.mysql.introspection.MySQLIntrospection(DatabaseIntrospection)
django.contrib.gis.db.backends.mysql.introspection.MySQLIntrospection.get_geometry_type(self,table_name,description)
django.contrib.gis.db.backends.mysql.introspection.MySQLIntrospection.supports_spatial_index(self,cursor,table_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/base/features.py----------------------------------------
A:django.contrib.gis.db.backends.base.features.m->re.match('has_(\\w*)_function$', name)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.__getattr__(self,name)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_bbcontains_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_collect_aggr(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_contained_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_crosses_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_distances_lookups(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_dwithin_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_extent_aggr(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_isvalid_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_make_line_aggr(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_relate_lookup(self)
django.contrib.gis.db.backends.base.features.BaseSpatialFeatures.supports_union_aggr(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/base/adapter.py----------------------------------------
django.contrib.gis.db.backends.base.adapter.WKTAdapter(self,geom)
django.contrib.gis.db.backends.base.adapter.WKTAdapter.__eq__(self,other)
django.contrib.gis.db.backends.base.adapter.WKTAdapter.__hash__(self)
django.contrib.gis.db.backends.base.adapter.WKTAdapter.__init__(self,geom)
django.contrib.gis.db.backends.base.adapter.WKTAdapter.__str__(self)
django.contrib.gis.db.backends.base.adapter.WKTAdapter._fix_polygon(cls,poly)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/base/operations.py----------------------------------------
A:django.contrib.gis.db.backends.base.operations.distance_expr_for_lookup->staticmethod(Distance)
A:django.contrib.gis.db.backends.base.operations.converters->super().get_db_converters(expression)
A:django.contrib.gis.db.backends.base.operations.units_name->field.units_name(self.connection)
A:django.contrib.gis.db.backends.base.operations.units->field.units_name(self.connection)
A:django.contrib.gis.db.backends.base.operations.dist_att->django.contrib.gis.measure.Distance.unit_attname(units)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.check_expression_support(self,expression)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.convert_extent(self,box,srid)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.convert_extent3d(self,box,srid)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.geo_db_type(self,f)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.geo_quote_name(self,name)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.geometry_columns(self)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_area_att_for_field(self,field)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_db_converters(self,expression)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_distance(self,f,value,lookup_type)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_distance_att_for_field(self,field)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_geom_placeholder(self,f,value,compiler)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.get_geometry_converter(self,expression)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.select_extent(self)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.spatial_aggregate_name(self,agg_name)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.spatial_function_name(self,func_name)
django.contrib.gis.db.backends.base.operations.BaseSpatialOperations.spatial_ref_sys(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/base/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/base/models.py----------------------------------------
A:django.contrib.gis.db.backends.base.models.self._srs->django.contrib.gis.gdal.SpatialReference(self.proj4text)
A:django.contrib.gis.db.backends.base.models.srs->django.contrib.gis.gdal.SpatialReference(wkt)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.__str__(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.angular_name(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.angular_units(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.datum(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.ellipsoid(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.geographic(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.get_spheroid(cls,wkt,string=True)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.get_units(cls,wkt)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.linear_name(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.linear_units(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.local(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.name(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.projected(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.spheroid(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.srs(self)
django.contrib.gis.db.backends.base.models.SpatialRefSysMixin.units(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/features.py----------------------------------------
django.contrib.gis.db.backends.spatialite.features.DatabaseFeatures(BaseSpatialFeatures,SQLiteDatabaseFeatures)
django.contrib.gis.db.backends.spatialite.features.DatabaseFeatures.django_test_skips(self)
django.contrib.gis.db.backends.spatialite.features.DatabaseFeatures.supports_area_geodetic(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/adapter.py----------------------------------------
django.contrib.gis.db.backends.spatialite.adapter.SpatiaLiteAdapter(WKTAdapter)
django.contrib.gis.db.backends.spatialite.adapter.SpatiaLiteAdapter.__conform__(self,protocol)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/base.py----------------------------------------
A:django.contrib.gis.db.backends.spatialite.base.conn->super().get_new_connection(conn_params)
django.contrib.gis.db.backends.spatialite.base.DatabaseWrapper(self,*args,**kwargs)
django.contrib.gis.db.backends.spatialite.base.DatabaseWrapper.__init__(self,*args,**kwargs)
django.contrib.gis.db.backends.spatialite.base.DatabaseWrapper.get_new_connection(self,conn_params)
django.contrib.gis.db.backends.spatialite.base.DatabaseWrapper.prepare_database(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/schema.py----------------------------------------
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor(self,*args,**kwargs)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.__init__(self,*args,**kwargs)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.add_field(self,model,field)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.alter_db_table(self,model,old_db_table,new_db_table,disable_constraints=True)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.column_sql(self,model,field,include_default=False)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.create_model(self,model)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.delete_model(self,model,**kwargs)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.geo_quote_name(self,name)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.remove_field(self,model,field)
django.contrib.gis.db.backends.spatialite.schema.SpatialiteSchemaEditor.remove_geometry_metadata(self,model,field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/operations.py----------------------------------------
A:django.contrib.gis.db.backends.spatialite.operations.(sql, params)->super().as_sql(connection, lookup, template_params, sql_params)
A:django.contrib.gis.db.backends.spatialite.operations.dist_param->getattr(value, Distance.unit_attname(f.units_name(self.connection)))
A:django.contrib.gis.db.backends.spatialite.operations.cursor->self.connection._cursor()
A:django.contrib.gis.db.backends.spatialite.operations.row->self.connection._cursor().fetchone()
A:django.contrib.gis.db.backends.spatialite.operations.version->self.spatialite_version()
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations(BaseSpatialOperations,DatabaseOperations)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations._get_spatialite_func(self,func)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.convert_extent(self,box)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.geo_db_type(self,f)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.geometry_columns(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.geos_version(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.get_distance(self,f,value,lookup_type)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.get_geometry_converter(self,expression)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.lwgeom_version(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.proj_version(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.spatial_aggregate_name(self,agg_name)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.spatial_ref_sys(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.spatial_version(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.spatialite_version(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.spatialite_version_tuple(self)
django.contrib.gis.db.backends.spatialite.operations.SpatiaLiteOperations.unsupported_functions(self)
django.contrib.gis.db.backends.spatialite.operations.SpatialiteNullCheckOperator(SpatialOperator)
django.contrib.gis.db.backends.spatialite.operations.SpatialiteNullCheckOperator.as_sql(self,connection,lookup,template_params,sql_params)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/models.py----------------------------------------
A:django.contrib.gis.db.backends.spatialite.models.f_table_name->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.spatialite.models.f_geometry_column->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.spatialite.models.coord_dimension->django.db.models.IntegerField()
A:django.contrib.gis.db.backends.spatialite.models.srid->django.db.models.IntegerField(primary_key=True)
A:django.contrib.gis.db.backends.spatialite.models.spatial_index_enabled->django.db.models.IntegerField()
A:django.contrib.gis.db.backends.spatialite.models.type->django.db.models.IntegerField(db_column='geometry_type')
A:django.contrib.gis.db.backends.spatialite.models.auth_name->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.spatialite.models.auth_srid->django.db.models.IntegerField()
A:django.contrib.gis.db.backends.spatialite.models.ref_sys_name->django.db.models.CharField(max_length=256)
A:django.contrib.gis.db.backends.spatialite.models.proj4text->django.db.models.CharField(max_length=2048)
A:django.contrib.gis.db.backends.spatialite.models.srtext->django.db.models.CharField(max_length=2048)
django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns(models.Model)
django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns.Meta
django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns.__str__(self)
django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns.geom_col_name(cls)
django.contrib.gis.db.backends.spatialite.models.SpatialiteGeometryColumns.table_name_col(cls)
django.contrib.gis.db.backends.spatialite.models.SpatialiteSpatialRefSys(models.Model,SpatialRefSysMixin)
django.contrib.gis.db.backends.spatialite.models.SpatialiteSpatialRefSys.Meta
django.contrib.gis.db.backends.spatialite.models.SpatialiteSpatialRefSys.wkt(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/client.py----------------------------------------
django.contrib.gis.db.backends.spatialite.client.SpatiaLiteClient(DatabaseClient)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/backends/spatialite/introspection.py----------------------------------------
A:django.contrib.gis.db.backends.spatialite.introspection.data_types_reverse->GeoFlexibleFieldLookupDict()
A:django.contrib.gis.db.backends.spatialite.introspection.row->cursor.fetchone()
A:django.contrib.gis.db.backends.spatialite.introspection.constraints->super().get_constraints(cursor, table_name)
django.contrib.gis.db.backends.spatialite.introspection.GeoFlexibleFieldLookupDict(FlexibleFieldLookupDict)
django.contrib.gis.db.backends.spatialite.introspection.SpatiaLiteIntrospection(DatabaseIntrospection)
django.contrib.gis.db.backends.spatialite.introspection.SpatiaLiteIntrospection.get_constraints(self,cursor,table_name)
django.contrib.gis.db.backends.spatialite.introspection.SpatiaLiteIntrospection.get_geometry_type(self,table_name,description)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/functions.py----------------------------------------
A:django.contrib.gis.db.models.functions.self.source_expressions[pos]->Value(geom, output_field=GeometryField(srid=geom.srid))
A:django.contrib.gis.db.models.functions.function->connection.ops.spatial_function_name('LengthSpheroid')
A:django.contrib.gis.db.models.functions.res->super().resolve_expression(*args, **kwargs)
A:django.contrib.gis.db.models.functions.source_fields->super().resolve_expression(*args, **kwargs).get_source_fields()
A:django.contrib.gis.db.models.functions.res.source_expressions[pos]->Transform(expr, base_srid).resolve_expression(*args, **kwargs)
A:django.contrib.gis.db.models.functions.copy->self.copy()
A:django.contrib.gis.db.models.functions.tolerance->Value(self._handle_param(self.extra.get('tolerance', self.tolerance), 'tolerance', NUMERIC_TYPES))
A:django.contrib.gis.db.models.functions.clone->self.copy()
A:django.contrib.gis.db.models.functions.output_field->IntegerField()
A:django.contrib.gis.db.models.functions.source_expressions->self.get_source_expressions()
A:django.contrib.gis.db.models.functions.self.spheroid->self._handle_param(spheroid, 'spheroid', bool)
A:django.contrib.gis.db.models.functions.geography->self.source_is_geography()
A:django.contrib.gis.db.models.functions.clone.source_expressions[1]->Cast(expr2, GeometryField(srid=expr2.output_field.srid, geography=geography))
A:django.contrib.gis.db.models.functions.extra_context['spheroid']->int(bool(self.spheroid))
A:django.contrib.gis.db.models.functions.(sql, params)->super().as_oracle(compiler, connection, **extra_context)
A:django.contrib.gis.db.models.functions.dim->min((f.dim for f in self.get_source_fields()))
A:django.contrib.gis.db.models.functions.nargs->len(args)
A:django.contrib.gis.db.models.functions.extra['output_field']->GeometryField(srid=srid)
django.contrib.gis.db.models.functions.Area(OracleToleranceMixin,GeoFunc)
django.contrib.gis.db.models.functions.Area.as_sql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Area.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Area.output_field(self)
django.contrib.gis.db.models.functions.AsGML(self,expression,version=2,precision=8,**extra)
django.contrib.gis.db.models.functions.AsGML.__init__(self,expression,version=2,precision=8,**extra)
django.contrib.gis.db.models.functions.AsGML.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.AsGeoJSON(self,expression,bbox=False,crs=False,precision=8,**extra)
django.contrib.gis.db.models.functions.AsGeoJSON.__init__(self,expression,bbox=False,crs=False,precision=8,**extra)
django.contrib.gis.db.models.functions.AsGeoJSON.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.AsKML(self,expression,precision=8,**extra)
django.contrib.gis.db.models.functions.AsKML.__init__(self,expression,precision=8,**extra)
django.contrib.gis.db.models.functions.AsSVG(self,expression,relative=False,precision=8,**extra)
django.contrib.gis.db.models.functions.AsSVG.__init__(self,expression,relative=False,precision=8,**extra)
django.contrib.gis.db.models.functions.AsWKB(GeoFunc)
django.contrib.gis.db.models.functions.AsWKT(GeoFunc)
django.contrib.gis.db.models.functions.Azimuth(GeoFunc)
django.contrib.gis.db.models.functions.BoundingCircle(self,expression,num_seg=48,**extra)
django.contrib.gis.db.models.functions.BoundingCircle.__init__(self,expression,num_seg=48,**extra)
django.contrib.gis.db.models.functions.BoundingCircle.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Centroid(OracleToleranceMixin,GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.Difference(OracleToleranceMixin,GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.Distance(self,expr1,expr2,spheroid=None,**extra)
django.contrib.gis.db.models.functions.Distance.__init__(self,expr1,expr2,spheroid=None,**extra)
django.contrib.gis.db.models.functions.Distance.as_postgresql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Distance.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.DistanceResultMixin
django.contrib.gis.db.models.functions.DistanceResultMixin.output_field(self)
django.contrib.gis.db.models.functions.DistanceResultMixin.source_is_geography(self)
django.contrib.gis.db.models.functions.Envelope(GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.ForcePolygonCW(GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.GeoFunc(GeoFuncMixin,Func)
django.contrib.gis.db.models.functions.GeoFuncMixin(self,*expressions,**extra)
django.contrib.gis.db.models.functions.GeoFuncMixin.__init__(self,*expressions,**extra)
django.contrib.gis.db.models.functions.GeoFuncMixin._handle_param(self,value,param_name='',check_types=None)
django.contrib.gis.db.models.functions.GeoFuncMixin.as_sql(self,compiler,connection,function=None,**extra_context)
django.contrib.gis.db.models.functions.GeoFuncMixin.geo_field(self)
django.contrib.gis.db.models.functions.GeoFuncMixin.name(self)
django.contrib.gis.db.models.functions.GeoFuncMixin.resolve_expression(self,*args,**kwargs)
django.contrib.gis.db.models.functions.GeoHash(self,expression,precision=None,**extra)
django.contrib.gis.db.models.functions.GeoHash.__init__(self,expression,precision=None,**extra)
django.contrib.gis.db.models.functions.GeoHash.as_mysql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.GeomOutputGeoFunc(GeoFunc)
django.contrib.gis.db.models.functions.GeomOutputGeoFunc.output_field(self)
django.contrib.gis.db.models.functions.GeometryDistance(GeoFunc)
django.contrib.gis.db.models.functions.Intersection(OracleToleranceMixin,GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.IsValid(OracleToleranceMixin,GeoFuncMixin,Transform)
django.contrib.gis.db.models.functions.IsValid.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Length(self,expr1,spheroid=True,**extra)
django.contrib.gis.db.models.functions.Length.__init__(self,expr1,spheroid=True,**extra)
django.contrib.gis.db.models.functions.Length.as_postgresql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Length.as_sql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Length.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.LineLocatePoint(GeoFunc)
django.contrib.gis.db.models.functions.MakeValid(GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.MemSize(GeoFunc)
django.contrib.gis.db.models.functions.NumGeometries(GeoFunc)
django.contrib.gis.db.models.functions.NumPoints(GeoFunc)
django.contrib.gis.db.models.functions.OracleToleranceMixin
django.contrib.gis.db.models.functions.OracleToleranceMixin.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Perimeter(DistanceResultMixin,OracleToleranceMixin,GeoFunc)
django.contrib.gis.db.models.functions.Perimeter.as_postgresql(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Perimeter.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.PointOnSurface(OracleToleranceMixin,GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.Reverse(GeoFunc)
django.contrib.gis.db.models.functions.SQLiteDecimalToFloatMixin
django.contrib.gis.db.models.functions.SQLiteDecimalToFloatMixin.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Scale(self,expression,x,y,z=0.0,**extra)
django.contrib.gis.db.models.functions.Scale.__init__(self,expression,x,y,z=0.0,**extra)
django.contrib.gis.db.models.functions.SnapToGrid(self,expression,*args,**extra)
django.contrib.gis.db.models.functions.SnapToGrid.__init__(self,expression,*args,**extra)
django.contrib.gis.db.models.functions.SymDifference(OracleToleranceMixin,GeomOutputGeoFunc)
django.contrib.gis.db.models.functions.Transform(self,expression,srid,**extra)
django.contrib.gis.db.models.functions.Transform.__init__(self,expression,srid,**extra)
django.contrib.gis.db.models.functions.Translate(Scale)
django.contrib.gis.db.models.functions.Translate.as_sqlite(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.functions.Union(OracleToleranceMixin,GeomOutputGeoFunc)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/lookups.py----------------------------------------
A:django.contrib.gis.db.models.lookups.self.rhs->self.rhs.resolve_expression(compiler.query)
A:django.contrib.gis.db.models.lookups.(rhs, rhs_params)->super().process_rhs(compiler, connection)
A:django.contrib.gis.db.models.lookups.placeholder->connection.ops.get_geom_placeholder(self.lhs.output_field, self.rhs, compiler)
A:django.contrib.gis.db.models.lookups.(lhs_sql, lhs_params)->self.process_lhs(compiler, connection)
A:django.contrib.gis.db.models.lookups.(rhs_sql, rhs_params)->self.process_rhs(compiler, connection)
A:django.contrib.gis.db.models.lookups.rhs_op->self.get_rhs_op(connection, rhs_sql)
A:django.contrib.gis.db.models.lookups.pattern_regex->_lazy_re_compile('^[012TF\\*]{9}$')
A:django.contrib.gis.db.models.lookups.(sql, params)->compiler.compile(distance_expr.resolve_expression(compiler.query))
A:django.contrib.gis.db.models.lookups.(dist_sql, dist_params)->self.process_distance(compiler, connection)
A:django.contrib.gis.db.models.lookups.(rhs_sql, params)->super().process_rhs(compiler, connection)
A:django.contrib.gis.db.models.lookups.distance_expr->connection.ops.distance_expr_for_lookup(self.lhs, self.rhs, spheroid=spheroid)
django.contrib.gis.db.models.lookups.BBContainsLookup(GISLookup)
django.contrib.gis.db.models.lookups.BBOverlapsLookup(GISLookup)
django.contrib.gis.db.models.lookups.ContainedLookup(GISLookup)
django.contrib.gis.db.models.lookups.ContainsLookup(GISLookup)
django.contrib.gis.db.models.lookups.ContainsProperlyLookup(GISLookup)
django.contrib.gis.db.models.lookups.CoveredByLookup(GISLookup)
django.contrib.gis.db.models.lookups.CoversLookup(GISLookup)
django.contrib.gis.db.models.lookups.CrossesLookup(GISLookup)
django.contrib.gis.db.models.lookups.DWithinLookup(DistanceLookupBase)
django.contrib.gis.db.models.lookups.DWithinLookup.process_distance(self,compiler,connection)
django.contrib.gis.db.models.lookups.DWithinLookup.process_rhs(self,compiler,connection)
django.contrib.gis.db.models.lookups.DisjointLookup(GISLookup)
django.contrib.gis.db.models.lookups.DistanceGTELookup(DistanceLookupFromFunction)
django.contrib.gis.db.models.lookups.DistanceGTLookup(DistanceLookupFromFunction)
django.contrib.gis.db.models.lookups.DistanceLTELookup(DistanceLookupFromFunction)
django.contrib.gis.db.models.lookups.DistanceLTLookup(DistanceLookupFromFunction)
django.contrib.gis.db.models.lookups.DistanceLookupBase(GISLookup)
django.contrib.gis.db.models.lookups.DistanceLookupBase.process_distance(self,compiler,connection)
django.contrib.gis.db.models.lookups.DistanceLookupBase.process_rhs_params(self)
django.contrib.gis.db.models.lookups.DistanceLookupFromFunction(DistanceLookupBase)
django.contrib.gis.db.models.lookups.DistanceLookupFromFunction.as_sql(self,compiler,connection)
django.contrib.gis.db.models.lookups.EqualsLookup(GISLookup)
django.contrib.gis.db.models.lookups.GISLookup(self,lhs,rhs)
django.contrib.gis.db.models.lookups.GISLookup.__init__(self,lhs,rhs)
django.contrib.gis.db.models.lookups.GISLookup.as_sql(self,compiler,connection)
django.contrib.gis.db.models.lookups.GISLookup.get_db_prep_lookup(self,value,connection)
django.contrib.gis.db.models.lookups.GISLookup.get_rhs_op(self,connection,rhs)
django.contrib.gis.db.models.lookups.GISLookup.process_band_indices(self,only_lhs=False)
django.contrib.gis.db.models.lookups.GISLookup.process_rhs(self,compiler,connection)
django.contrib.gis.db.models.lookups.GISLookup.process_rhs_params(self)
django.contrib.gis.db.models.lookups.IntersectsLookup(GISLookup)
django.contrib.gis.db.models.lookups.LeftLookup(GISLookup)
django.contrib.gis.db.models.lookups.OverlapsAboveLookup(GISLookup)
django.contrib.gis.db.models.lookups.OverlapsBelowLookup(GISLookup)
django.contrib.gis.db.models.lookups.OverlapsLeftLookup(GISLookup)
django.contrib.gis.db.models.lookups.OverlapsLookup(GISLookup)
django.contrib.gis.db.models.lookups.OverlapsRightLookup(GISLookup)
django.contrib.gis.db.models.lookups.RasterBandTransform(Transform)
django.contrib.gis.db.models.lookups.RasterBandTransform.as_sql(self,compiler,connection)
django.contrib.gis.db.models.lookups.RelateLookup(GISLookup)
django.contrib.gis.db.models.lookups.RelateLookup.process_rhs(self,compiler,connection)
django.contrib.gis.db.models.lookups.RightLookup(GISLookup)
django.contrib.gis.db.models.lookups.SameAsLookup(GISLookup)
django.contrib.gis.db.models.lookups.StrictlyAboveLookup(GISLookup)
django.contrib.gis.db.models.lookups.StrictlyBelowLookup(GISLookup)
django.contrib.gis.db.models.lookups.TouchesLookup(GISLookup)
django.contrib.gis.db.models.lookups.WithinLookup(GISLookup)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/aggregates.py----------------------------------------
A:django.contrib.gis.db.models.aggregates.clone->self.copy()
A:django.contrib.gis.db.models.aggregates.c->super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
django.contrib.gis.db.models.Collect(GeoAggregate)
django.contrib.gis.db.models.Extent(self,expression,**extra)
django.contrib.gis.db.models.Extent.convert_value(self,value,expression,connection)
django.contrib.gis.db.models.Extent3D(self,expression,**extra)
django.contrib.gis.db.models.Extent3D.convert_value(self,value,expression,connection)
django.contrib.gis.db.models.GeoAggregate(Aggregate)
django.contrib.gis.db.models.GeoAggregate.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.GeoAggregate.as_sql(self,compiler,connection,function=None,**extra_context)
django.contrib.gis.db.models.GeoAggregate.output_field(self)
django.contrib.gis.db.models.GeoAggregate.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.contrib.gis.db.models.MakeLine(GeoAggregate)
django.contrib.gis.db.models.Union(GeoAggregate)
django.contrib.gis.db.models.aggregates.Collect(GeoAggregate)
django.contrib.gis.db.models.aggregates.Extent(self,expression,**extra)
django.contrib.gis.db.models.aggregates.Extent.__init__(self,expression,**extra)
django.contrib.gis.db.models.aggregates.Extent.convert_value(self,value,expression,connection)
django.contrib.gis.db.models.aggregates.Extent3D(self,expression,**extra)
django.contrib.gis.db.models.aggregates.Extent3D.__init__(self,expression,**extra)
django.contrib.gis.db.models.aggregates.Extent3D.convert_value(self,value,expression,connection)
django.contrib.gis.db.models.aggregates.GeoAggregate(Aggregate)
django.contrib.gis.db.models.aggregates.GeoAggregate.as_oracle(self,compiler,connection,**extra_context)
django.contrib.gis.db.models.aggregates.GeoAggregate.as_sql(self,compiler,connection,function=None,**extra_context)
django.contrib.gis.db.models.aggregates.GeoAggregate.output_field(self)
django.contrib.gis.db.models.aggregates.GeoAggregate.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.contrib.gis.db.models.aggregates.MakeLine(GeoAggregate)
django.contrib.gis.db.models.aggregates.Union(GeoAggregate)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/proxy.py----------------------------------------
A:django.contrib.gis.db.models.proxy.geo_value->super().__get__(instance, cls)
A:django.contrib.gis.db.models.proxy.geo_obj->self._load_func(geo_value)
django.contrib.gis.db.models.proxy.SpatialProxy(self,klass,field,load_func=None)
django.contrib.gis.db.models.proxy.SpatialProxy.__get__(self,instance,cls=None)
django.contrib.gis.db.models.proxy.SpatialProxy.__init__(self,klass,field,load_func=None)
django.contrib.gis.db.models.proxy.SpatialProxy.__set__(self,instance,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/fields.py----------------------------------------
A:django.contrib.gis.db.models.fields._srid_cache->defaultdict(dict)
A:django.contrib.gis.db.models.fields.SRIDCacheEntry->namedtuple('SRIDCacheEntry', ['units', 'units_name', 'spheroid', 'geodetic'])
A:django.contrib.gis.db.models.fields.SpatialRefSys->connection.ops.spatial_ref_sys()
A:django.contrib.gis.db.models.fields.srs->get_srs(srid)
A:django.contrib.gis.db.models.fields._srid_cache[alias][srid]->SRIDCacheEntry(units=units, units_name=units_name, spheroid='SPHEROID["%s",%s,%s]' % (srs['spheroid'], srs.semi_major, srs.inverse_flattening), geodetic=srs.geographic)
A:django.contrib.gis.db.models.fields.description->_('Raster Field')
A:django.contrib.gis.db.models.fields.(name, path, args, kwargs)->super().deconstruct()
A:django.contrib.gis.db.models.fields.obj->GEOSGeometry(obj)
A:django.contrib.gis.db.models.fields.raster->self.get_raster_prep_value(obj, is_candidate)
A:django.contrib.gis.db.models.fields.obj.srid->self.get_srid(obj)
A:django.contrib.gis.db.models.fields.band_index->int(name)
django.contrib.gis.db.models.GeometryCollectionField(GeometryField)
django.contrib.gis.db.models.GeometryField(self,verbose_name=None,dim=2,geography=False,*,extent=(-180.0,-90.0,180.0,90.0),tolerance=0.05,**kwargs)
django.contrib.gis.db.models.GeometryField.contribute_to_class(self,cls,name,**kwargs)
django.contrib.gis.db.models.GeometryField.deconstruct(self)
django.contrib.gis.db.models.GeometryField.formfield(self,**kwargs)
django.contrib.gis.db.models.GeometryField.select_format(self,compiler,sql,params)
django.contrib.gis.db.models.LineStringField(GeometryField)
django.contrib.gis.db.models.MultiLineStringField(GeometryField)
django.contrib.gis.db.models.MultiPointField(GeometryField)
django.contrib.gis.db.models.MultiPolygonField(GeometryField)
django.contrib.gis.db.models.PointField(GeometryField)
django.contrib.gis.db.models.PolygonField(GeometryField)
django.contrib.gis.db.models.RasterField(BaseSpatialField)
django.contrib.gis.db.models.RasterField._check_connection(self,connection)
django.contrib.gis.db.models.RasterField.contribute_to_class(self,cls,name,**kwargs)
django.contrib.gis.db.models.RasterField.db_type(self,connection)
django.contrib.gis.db.models.RasterField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.RasterField.get_transform(self,name)
django.contrib.gis.db.models.fields.BaseSpatialField(self,verbose_name=None,srid=4326,spatial_index=True,**kwargs)
django.contrib.gis.db.models.fields.BaseSpatialField.__init__(self,verbose_name=None,srid=4326,spatial_index=True,**kwargs)
django.contrib.gis.db.models.fields.BaseSpatialField.db_type(self,connection)
django.contrib.gis.db.models.fields.BaseSpatialField.deconstruct(self)
django.contrib.gis.db.models.fields.BaseSpatialField.geodetic(self,connection)
django.contrib.gis.db.models.fields.BaseSpatialField.get_db_prep_value(self,value,connection,*args,**kwargs)
django.contrib.gis.db.models.fields.BaseSpatialField.get_placeholder(self,value,compiler,connection)
django.contrib.gis.db.models.fields.BaseSpatialField.get_prep_value(self,value)
django.contrib.gis.db.models.fields.BaseSpatialField.get_raster_prep_value(self,value,is_candidate)
django.contrib.gis.db.models.fields.BaseSpatialField.get_srid(self,obj)
django.contrib.gis.db.models.fields.BaseSpatialField.spheroid(self,connection)
django.contrib.gis.db.models.fields.BaseSpatialField.units(self,connection)
django.contrib.gis.db.models.fields.BaseSpatialField.units_name(self,connection)
django.contrib.gis.db.models.fields.ExtentField(Field)
django.contrib.gis.db.models.fields.ExtentField.get_internal_type(self)
django.contrib.gis.db.models.fields.ExtentField.select_format(self,compiler,sql,params)
django.contrib.gis.db.models.fields.GeometryCollectionField(GeometryField)
django.contrib.gis.db.models.fields.GeometryField(self,verbose_name=None,dim=2,geography=False,*,extent=(-180.0,-90.0,180.0,90.0),tolerance=0.05,**kwargs)
django.contrib.gis.db.models.fields.GeometryField.__init__(self,verbose_name=None,dim=2,geography=False,*,extent=(-180.0,-90.0,180.0,90.0),tolerance=0.05,**kwargs)
django.contrib.gis.db.models.fields.GeometryField.contribute_to_class(self,cls,name,**kwargs)
django.contrib.gis.db.models.fields.GeometryField.deconstruct(self)
django.contrib.gis.db.models.fields.GeometryField.formfield(self,**kwargs)
django.contrib.gis.db.models.fields.GeometryField.select_format(self,compiler,sql,params)
django.contrib.gis.db.models.fields.LineStringField(GeometryField)
django.contrib.gis.db.models.fields.MultiLineStringField(GeometryField)
django.contrib.gis.db.models.fields.MultiPointField(GeometryField)
django.contrib.gis.db.models.fields.MultiPolygonField(GeometryField)
django.contrib.gis.db.models.fields.PointField(GeometryField)
django.contrib.gis.db.models.fields.PolygonField(GeometryField)
django.contrib.gis.db.models.fields.RasterField(BaseSpatialField)
django.contrib.gis.db.models.fields.RasterField._check_connection(self,connection)
django.contrib.gis.db.models.fields.RasterField.contribute_to_class(self,cls,name,**kwargs)
django.contrib.gis.db.models.fields.RasterField.db_type(self,connection)
django.contrib.gis.db.models.fields.RasterField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.fields.RasterField.get_transform(self,name)
django.contrib.gis.db.models.fields.get_srid_info(srid,connection)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/sql/conversion.py----------------------------------------
A:django.contrib.gis.db.models.sql.conversion.area_att->connection.ops.get_area_att_for_field(self.geo_field)
A:django.contrib.gis.db.models.sql.conversion.value->float(value)
A:django.contrib.gis.db.models.sql.conversion.distance_att->connection.ops.get_distance_att_for_field(self.geo_field)
django.contrib.gis.db.models.sql.AreaField(self,geo_field)
django.contrib.gis.db.models.sql.AreaField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.sql.AreaField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.gis.db.models.sql.AreaField.get_internal_type(self)
django.contrib.gis.db.models.sql.AreaField.get_prep_value(self,value)
django.contrib.gis.db.models.sql.DistanceField(self,geo_field)
django.contrib.gis.db.models.sql.DistanceField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.sql.DistanceField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.gis.db.models.sql.DistanceField.get_internal_type(self)
django.contrib.gis.db.models.sql.DistanceField.get_prep_value(self,value)
django.contrib.gis.db.models.sql.conversion.AreaField(self,geo_field)
django.contrib.gis.db.models.sql.conversion.AreaField.__init__(self,geo_field)
django.contrib.gis.db.models.sql.conversion.AreaField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.sql.conversion.AreaField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.gis.db.models.sql.conversion.AreaField.get_internal_type(self)
django.contrib.gis.db.models.sql.conversion.AreaField.get_prep_value(self,value)
django.contrib.gis.db.models.sql.conversion.DistanceField(self,geo_field)
django.contrib.gis.db.models.sql.conversion.DistanceField.__init__(self,geo_field)
django.contrib.gis.db.models.sql.conversion.DistanceField.from_db_value(self,value,expression,connection)
django.contrib.gis.db.models.sql.conversion.DistanceField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.gis.db.models.sql.conversion.DistanceField.get_internal_type(self)
django.contrib.gis.db.models.sql.conversion.DistanceField.get_prep_value(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/db/models/sql/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/utils/srs.py----------------------------------------
A:django.contrib.gis.utils.srs.SpatialRefSys->connection.ops.spatial_ref_sys()
A:django.contrib.gis.utils.srs.srs->SpatialReference(srs)
django.contrib.gis.utils.add_srs_entry(srs,auth_name='EPSG',auth_srid=None,ref_sys_name=None,database=None)
django.contrib.gis.utils.srs.add_srs_entry(srs,auth_name='EPSG',auth_srid=None,ref_sys_name=None,database=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/utils/ogrinspect.py----------------------------------------
A:django.contrib.gis.utils.ogrinspect.data_source->DataSource(data_source)
A:django.contrib.gis.utils.ogrinspect.mfield->field_name.lower()
A:django.contrib.gis.utils.ogrinspect._mapping[geom_name]->str(gtype).upper()
A:django.contrib.gis.utils.ogrinspect.null_fields->process_kwarg(null)
A:django.contrib.gis.utils.ogrinspect.blank_fields->process_kwarg(blank)
A:django.contrib.gis.utils.ogrinspect.decimal_fields->process_kwarg(decimal)
A:django.contrib.gis.utils.ogrinspect.kwargs_str->get_kwargs_str(field_name)
django.contrib.gis.utils.mapping(data_source,geom_name='geom',layer_key=0,multi_geom=False)
django.contrib.gis.utils.ogrinspect(*args,**kwargs)
django.contrib.gis.utils.ogrinspect._ogrinspect(data_source,model_name,geom_name='geom',layer_key=0,srid=None,multi_geom=False,name_field=None,imports=True,decimal=False,blank=False,null=False)
django.contrib.gis.utils.ogrinspect.mapping(data_source,geom_name='geom',layer_key=0,multi_geom=False)
django.contrib.gis.utils.ogrinspect.ogrinspect(*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/utils/layermapping.py----------------------------------------
A:django.contrib.gis.utils.layermapping.self.ds->DataSource(data, encoding=encoding)
A:django.contrib.gis.utils.layermapping.self.geo_field->self.geometry_field()
A:django.contrib.gis.utils.layermapping.self.source_srs->self.check_srs(source_srs)
A:django.contrib.gis.utils.layermapping.self.transform->self.coord_transform()
A:django.contrib.gis.utils.layermapping.idx->check_ogr_fld(ogr_name)
A:django.contrib.gis.utils.layermapping.model_field->self.model._meta.get_field(field_name)
A:django.contrib.gis.utils.layermapping.gtype->OGRGeomType(ogr_name)
A:django.contrib.gis.utils.layermapping.sr->SpatialReference(source_srs)
A:django.contrib.gis.utils.layermapping.val->int(ogr_field.value)
A:django.contrib.gis.utils.layermapping.d->Decimal(str(ogr_field.value))
A:django.contrib.gis.utils.layermapping.dtup->Decimal(str(ogr_field.value)).as_tuple()
A:django.contrib.gis.utils.layermapping.n_prec->len(digits[:d_idx])
A:django.contrib.gis.utils.layermapping.fk_kwargs[field_name]->self.verify_ogr_field(feat[ogr_name], rel_model._meta.get_field(field_name))
A:django.contrib.gis.utils.layermapping.g->OGRGeometry(multi_type)
A:django.contrib.gis.utils.layermapping.SpatialRefSys->self.spatial_backend.spatial_ref_sys()
A:django.contrib.gis.utils.layermapping.default_range->self.check_fid_range(fid_range)
A:django.contrib.gis.utils.layermapping.kwargs->self.feature_kwargs(feat)
A:django.contrib.gis.utils.layermapping.u_kwargs->self.unique_kwargs(kwargs)
A:django.contrib.gis.utils.layermapping.m->self.model(**kwargs)
A:django.contrib.gis.utils.layermapping.geom_value->getattr(m, self.geom_field)
A:django.contrib.gis.utils.layermapping.geom->OGRGeometry(kwargs[self.geom_field])
A:django.contrib.gis.utils.layermapping.new->OGRGeometry(kwargs[self.geom_field])
A:django.contrib.gis.utils.layermapping._save->self.transaction_decorator(_save)
A:django.contrib.gis.utils.layermapping.indices->range(step, nfeat, step)
A:django.contrib.gis.utils.layermapping.n_i->len(indices)
A:django.contrib.gis.utils.layermapping.step_slice->slice(beg, end)
A:django.contrib.gis.utils.layermapping.(num_feat, num_saved)->_save(step_slice, num_feat, num_saved)
django.contrib.gis.utils.LayerMapError(Exception)
django.contrib.gis.utils.LayerMapping(self,model,data,mapping,layer=0,source_srs=None,encoding='utf-8',transaction_mode='commit_on_success',transform=True,unique=None,using=None)
django.contrib.gis.utils.LayerMapping.check_fid_range(self,fid_range)
django.contrib.gis.utils.LayerMapping.check_layer(self)
django.contrib.gis.utils.LayerMapping.check_srs(self,source_srs)
django.contrib.gis.utils.LayerMapping.check_unique(self,unique)
django.contrib.gis.utils.LayerMapping.coord_transform(self)
django.contrib.gis.utils.LayerMapping.feature_kwargs(self,feat)
django.contrib.gis.utils.LayerMapping.geometry_field(self)
django.contrib.gis.utils.LayerMapping.make_multi(self,geom_type,model_field)
django.contrib.gis.utils.LayerMapping.save(self,verbose=False,fid_range=False,step=False,progress=False,silent=False,stream=sys.stdout,strict=False)
django.contrib.gis.utils.LayerMapping.unique_kwargs(self,kwargs)
django.contrib.gis.utils.LayerMapping.verify_fk(self,feat,rel_model,rel_mapping)
django.contrib.gis.utils.LayerMapping.verify_geom(self,geom,model_field)
django.contrib.gis.utils.LayerMapping.verify_ogr_field(self,ogr_field,model_field)
django.contrib.gis.utils.layermapping.InvalidDecimal(LayerMapError)
django.contrib.gis.utils.layermapping.InvalidInteger(LayerMapError)
django.contrib.gis.utils.layermapping.InvalidString(LayerMapError)
django.contrib.gis.utils.layermapping.LayerMapError(Exception)
django.contrib.gis.utils.layermapping.LayerMapping(self,model,data,mapping,layer=0,source_srs=None,encoding='utf-8',transaction_mode='commit_on_success',transform=True,unique=None,using=None)
django.contrib.gis.utils.layermapping.LayerMapping.__init__(self,model,data,mapping,layer=0,source_srs=None,encoding='utf-8',transaction_mode='commit_on_success',transform=True,unique=None,using=None)
django.contrib.gis.utils.layermapping.LayerMapping.check_fid_range(self,fid_range)
django.contrib.gis.utils.layermapping.LayerMapping.check_layer(self)
django.contrib.gis.utils.layermapping.LayerMapping.check_srs(self,source_srs)
django.contrib.gis.utils.layermapping.LayerMapping.check_unique(self,unique)
django.contrib.gis.utils.layermapping.LayerMapping.coord_transform(self)
django.contrib.gis.utils.layermapping.LayerMapping.feature_kwargs(self,feat)
django.contrib.gis.utils.layermapping.LayerMapping.geometry_field(self)
django.contrib.gis.utils.layermapping.LayerMapping.make_multi(self,geom_type,model_field)
django.contrib.gis.utils.layermapping.LayerMapping.save(self,verbose=False,fid_range=False,step=False,progress=False,silent=False,stream=sys.stdout,strict=False)
django.contrib.gis.utils.layermapping.LayerMapping.unique_kwargs(self,kwargs)
django.contrib.gis.utils.layermapping.LayerMapping.verify_fk(self,feat,rel_model,rel_mapping)
django.contrib.gis.utils.layermapping.LayerMapping.verify_geom(self,geom,model_field)
django.contrib.gis.utils.layermapping.LayerMapping.verify_ogr_field(self,ogr_field,model_field)
django.contrib.gis.utils.layermapping.MissingForeignKey(LayerMapError)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/utils/ogrinfo.py----------------------------------------
A:django.contrib.gis.utils.ogrinfo.data_source->DataSource(data_source)
A:django.contrib.gis.utils.ogrinfo.width->max(*map(len, layer.fields))
A:django.contrib.gis.utils.ogrinfo.val->feature.get(fld_name)
django.contrib.gis.utils.ogrinfo(data_source,num_features=10)
django.contrib.gis.utils.ogrinfo.ogrinfo(data_source,num_features=10)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/serializers/geojson.py----------------------------------------
A:django.contrib.gis.serializers.geojson.self.geometry_field->self.json_kwargs.pop('geometry_field', None)
A:django.contrib.gis.serializers.geojson.self.srid->self.json_kwargs.pop('srid', 4326)
A:django.contrib.gis.serializers.geojson.data['properties']['pk']->obj._meta.pk.value_to_string(obj)
A:django.contrib.gis.serializers.geojson.srs->SpatialReference(self.srid)
A:django.contrib.gis.serializers.geojson.self._cts[self._geometry.srid]->CoordTransform(self._geometry.srs, srs)
A:django.contrib.gis.serializers.geojson.data['geometry']->eval(self._geometry.geojson)
A:django.contrib.gis.serializers.geojson.self._geometry->field.value_from_object(obj)
django.contrib.gis.serializers.geojson.Deserializer(self,*args,**kwargs)
django.contrib.gis.serializers.geojson.Deserializer.__init__(self,*args,**kwargs)
django.contrib.gis.serializers.geojson.Serializer(JSONSerializer)
django.contrib.gis.serializers.geojson.Serializer._init_options(self)
django.contrib.gis.serializers.geojson.Serializer.end_serialization(self)
django.contrib.gis.serializers.geojson.Serializer.get_dump_object(self,obj)
django.contrib.gis.serializers.geojson.Serializer.handle_field(self,obj,field)
django.contrib.gis.serializers.geojson.Serializer.start_object(self,obj)
django.contrib.gis.serializers.geojson.Serializer.start_serialization(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/serializers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/collections.py----------------------------------------
A:django.contrib.gis.geos.collections.collection->self._create_collection(len(init_geoms), init_geoms)
A:django.contrib.gis.geos.collections.geoms->(GEOM_PTR * length)(*[capi.geom_clone(getattr(g, 'ptr', g)) for g in items])
A:django.contrib.gis.geos.collections.self.ptr->self._create_collection(length, items)
django.contrib.gis.geos.GeometryCollection(self,*args,**kwargs)
django.contrib.gis.geos.GeometryCollection.__iter__(self)
django.contrib.gis.geos.GeometryCollection.__len__(self)
django.contrib.gis.geos.GeometryCollection._create_collection(self,length,items)
django.contrib.gis.geos.GeometryCollection._get_single_external(self,index)
django.contrib.gis.geos.GeometryCollection._get_single_internal(self,index)
django.contrib.gis.geos.GeometryCollection._set_list(self,length,items)
django.contrib.gis.geos.GeometryCollection.kml(self)
django.contrib.gis.geos.GeometryCollection.tuple(self)
django.contrib.gis.geos.MultiLineString(LinearGeometryMixin,GeometryCollection)
django.contrib.gis.geos.MultiPoint(GeometryCollection)
django.contrib.gis.geos.MultiPolygon(GeometryCollection)
django.contrib.gis.geos.collections.GeometryCollection(self,*args,**kwargs)
django.contrib.gis.geos.collections.GeometryCollection.__init__(self,*args,**kwargs)
django.contrib.gis.geos.collections.GeometryCollection.__iter__(self)
django.contrib.gis.geos.collections.GeometryCollection.__len__(self)
django.contrib.gis.geos.collections.GeometryCollection._create_collection(self,length,items)
django.contrib.gis.geos.collections.GeometryCollection._get_single_external(self,index)
django.contrib.gis.geos.collections.GeometryCollection._get_single_internal(self,index)
django.contrib.gis.geos.collections.GeometryCollection._set_list(self,length,items)
django.contrib.gis.geos.collections.GeometryCollection.kml(self)
django.contrib.gis.geos.collections.GeometryCollection.tuple(self)
django.contrib.gis.geos.collections.MultiLineString(LinearGeometryMixin,GeometryCollection)
django.contrib.gis.geos.collections.MultiPoint(GeometryCollection)
django.contrib.gis.geos.collections.MultiPolygon(GeometryCollection)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/coordseq.py----------------------------------------
A:django.contrib.gis.geos.coordseq.n->len(self)
A:django.contrib.gis.geos.coordseq.ret->c_byte()
django.contrib.gis.geos.coordseq.GEOSCoordSeq(self,ptr,z=False)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__getitem__(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__init__(self,ptr,z=False)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__iter__(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__len__(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__setitem__(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.__str__(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._checkdim(self,dim)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._checkindex(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._get_point_2d(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._get_point_3d(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._get_x(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._get_y(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._get_z(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._point_getter(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._set_point_2d(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._set_point_3d(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._set_x(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._set_y(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq._set_z(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.clone(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.dims(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.getOrdinate(self,dimension,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.getX(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.getY(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.getZ(self,index)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.hasz(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.is_counterclockwise(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.kml(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.setOrdinate(self,dimension,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.setX(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.setY(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.setZ(self,index,value)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.size(self)
django.contrib.gis.geos.coordseq.GEOSCoordSeq.tuple(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/factory.py----------------------------------------
A:django.contrib.gis.geos.factory.buf->file_h.read()
A:django.contrib.gis.geos.factory.decoded->file_h.read().decode()
django.contrib.gis.geos.factory.fromfile(file_h)
django.contrib.gis.geos.factory.fromstr(string,**kwargs)
django.contrib.gis.geos.fromfile(file_h)
django.contrib.gis.geos.fromstr(string,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/point.py----------------------------------------
A:django.contrib.gis.geos.point.point->self._create_point(len(coords), coords)
A:django.contrib.gis.geos.point.cs->django.contrib.gis.geos.prototypes.create_cs(c_uint(1), c_uint(ndim))
A:django.contrib.gis.geos.point.i->iter(coords)
A:django.contrib.gis.geos.point.ptr->self._create_point(length, items)
django.contrib.gis.geos.Point(self,x=None,y=None,z=None,srid=None)
django.contrib.gis.geos.Point.__iter__(self)
django.contrib.gis.geos.Point.__len__(self)
django.contrib.gis.geos.Point._create_empty(cls)
django.contrib.gis.geos.Point._create_point(cls,ndim,coords)
django.contrib.gis.geos.Point._from_pickle_wkb(self,wkb)
django.contrib.gis.geos.Point._get_single_external(self,index)
django.contrib.gis.geos.Point._ogr_ptr(self)
django.contrib.gis.geos.Point._set_list(self,length,items)
django.contrib.gis.geos.Point._set_single(self,index,value)
django.contrib.gis.geos.Point._to_pickle_wkb(self)
django.contrib.gis.geos.Point.tuple(self)
django.contrib.gis.geos.Point.tuple(self,tup)
django.contrib.gis.geos.Point.x(self)
django.contrib.gis.geos.Point.x(self,value)
django.contrib.gis.geos.Point.y(self)
django.contrib.gis.geos.Point.y(self,value)
django.contrib.gis.geos.Point.z(self)
django.contrib.gis.geos.Point.z(self,value)
django.contrib.gis.geos.point.Point(self,x=None,y=None,z=None,srid=None)
django.contrib.gis.geos.point.Point.__init__(self,x=None,y=None,z=None,srid=None)
django.contrib.gis.geos.point.Point.__iter__(self)
django.contrib.gis.geos.point.Point.__len__(self)
django.contrib.gis.geos.point.Point._create_empty(cls)
django.contrib.gis.geos.point.Point._create_point(cls,ndim,coords)
django.contrib.gis.geos.point.Point._from_pickle_wkb(self,wkb)
django.contrib.gis.geos.point.Point._get_single_external(self,index)
django.contrib.gis.geos.point.Point._ogr_ptr(self)
django.contrib.gis.geos.point.Point._set_list(self,length,items)
django.contrib.gis.geos.point.Point._set_single(self,index,value)
django.contrib.gis.geos.point.Point._to_pickle_wkb(self)
django.contrib.gis.geos.point.Point.tuple(self)
django.contrib.gis.geos.point.Point.tuple(self,tup)
django.contrib.gis.geos.point.Point.x(self)
django.contrib.gis.geos.point.Point.x(self,value)
django.contrib.gis.geos.point.Point.y(self)
django.contrib.gis.geos.point.Point.y(self,value)
django.contrib.gis.geos.point.Point.z(self)
django.contrib.gis.geos.point.Point.z(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/linestring.py----------------------------------------
A:django.contrib.gis.geos.linestring.srid->kwargs.get('srid')
A:django.contrib.gis.geos.linestring.ncoords->len(coords)
A:django.contrib.gis.geos.linestring.ndim->len(coord)
A:django.contrib.gis.geos.linestring.cs->GEOSCoordSeq(capi.create_cs(length, ndim), z=hasz)
A:django.contrib.gis.geos.linestring.ptr->self._init_func(cs.ptr)
django.contrib.gis.geos.LineString(self,*args,**kwargs)
django.contrib.gis.geos.LineString.__iter__(self)
django.contrib.gis.geos.LineString.__len__(self)
django.contrib.gis.geos.LineString._checkdim(self,dim)
django.contrib.gis.geos.LineString._get_single_external(self,index)
django.contrib.gis.geos.LineString._listarr(self,func)
django.contrib.gis.geos.LineString._set_list(self,length,items)
django.contrib.gis.geos.LineString._set_single(self,index,value)
django.contrib.gis.geos.LineString.array(self)
django.contrib.gis.geos.LineString.tuple(self)
django.contrib.gis.geos.LineString.x(self)
django.contrib.gis.geos.LineString.y(self)
django.contrib.gis.geos.LineString.z(self)
django.contrib.gis.geos.LinearRing(LineString)
django.contrib.gis.geos.LinearRing.is_counterclockwise(self)
django.contrib.gis.geos.linestring.LineString(self,*args,**kwargs)
django.contrib.gis.geos.linestring.LineString.__init__(self,*args,**kwargs)
django.contrib.gis.geos.linestring.LineString.__iter__(self)
django.contrib.gis.geos.linestring.LineString.__len__(self)
django.contrib.gis.geos.linestring.LineString._checkdim(self,dim)
django.contrib.gis.geos.linestring.LineString._get_single_external(self,index)
django.contrib.gis.geos.linestring.LineString._listarr(self,func)
django.contrib.gis.geos.linestring.LineString._set_list(self,length,items)
django.contrib.gis.geos.linestring.LineString._set_single(self,index,value)
django.contrib.gis.geos.linestring.LineString.array(self)
django.contrib.gis.geos.linestring.LineString.tuple(self)
django.contrib.gis.geos.linestring.LineString.x(self)
django.contrib.gis.geos.linestring.LineString.y(self)
django.contrib.gis.geos.linestring.LineString.z(self)
django.contrib.gis.geos.linestring.LinearRing(LineString)
django.contrib.gis.geos.linestring.LinearRing.is_counterclockwise(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/base.py----------------------------------------
django.contrib.gis.geos.base.GEOSBase(CPointerBase)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/libgeos.py----------------------------------------
A:django.contrib.gis.geos.libgeos.logger->logging.getLogger('django.contrib.gis')
A:django.contrib.gis.geos.libgeos.lib_path->find_library(lib_name)
A:django.contrib.gis.geos.libgeos._lgeos->CDLL(lib_path)
A:django.contrib.gis.geos.libgeos.NOTICEFUNC->CFUNCTYPE(None, c_char_p, c_char_p)
A:django.contrib.gis.geos.libgeos.notice_h->NOTICEFUNC(notice_h)
A:django.contrib.gis.geos.libgeos.ERRORFUNC->CFUNCTYPE(None, c_char_p, c_char_p)
A:django.contrib.gis.geos.libgeos.error_h->ERRORFUNC(error_h)
A:django.contrib.gis.geos.libgeos.GEOM_PTR->POINTER(GEOSGeom_t)
A:django.contrib.gis.geos.libgeos.PREPGEOM_PTR->POINTER(GEOSPrepGeom_t)
A:django.contrib.gis.geos.libgeos.CS_PTR->POINTER(GEOSCoordSeq_t)
A:django.contrib.gis.geos.libgeos.CONTEXT_PTR->POINTER(GEOSContextHandle_t)
A:django.contrib.gis.geos.libgeos.lgeos->SimpleLazyObject(load_geos)
A:django.contrib.gis.geos.libgeos.func->GEOSFunc(self.func_name)
django.contrib.gis.geos.geos_version()
django.contrib.gis.geos.geos_version_tuple()
django.contrib.gis.geos.libgeos.GEOSContextHandle_t(Structure)
django.contrib.gis.geos.libgeos.GEOSCoordSeq_t(Structure)
django.contrib.gis.geos.libgeos.GEOSFuncFactory(self,func_name,*,restype=None,errcheck=None,argtypes=None)
django.contrib.gis.geos.libgeos.GEOSFuncFactory.__init__(self,func_name,*,restype=None,errcheck=None,argtypes=None)
django.contrib.gis.geos.libgeos.GEOSFuncFactory.func(self)
django.contrib.gis.geos.libgeos.GEOSGeom_t(Structure)
django.contrib.gis.geos.libgeos.GEOSPrepGeom_t(Structure)
django.contrib.gis.geos.libgeos.error_h(fmt,lst)
django.contrib.gis.geos.libgeos.geos_version()
django.contrib.gis.geos.libgeos.geos_version_tuple()
django.contrib.gis.geos.libgeos.load_geos()
django.contrib.gis.geos.libgeos.notice_h(fmt,lst)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/mutable_list.py----------------------------------------
A:django.contrib.gis.geos.mutable_list.index->self._checkindex(index)
A:django.contrib.gis.geos.mutable_list.origLen->len(self)
A:django.contrib.gis.geos.mutable_list.indexRange->range(*index.indices(origLen))
A:django.contrib.gis.geos.mutable_list.cache->list(self)
A:django.contrib.gis.geos.mutable_list.olen->len(other)
A:django.contrib.gis.geos.mutable_list.self[:]->sorted(self, key=key, reverse=reverse)
A:django.contrib.gis.geos.mutable_list.length->len(self)
A:django.contrib.gis.geos.mutable_list.valueList->list(values)
A:django.contrib.gis.geos.mutable_list.(start, stop, step)->self._checkindex(index).indices(origLen)
A:django.contrib.gis.geos.mutable_list.indexList->range(start, stop, step)
A:django.contrib.gis.geos.mutable_list.newLen->len(self)
A:django.contrib.gis.geos.mutable_list.newVals->dict(zip(indexList, valueList))
A:django.contrib.gis.geos.mutable_list.stop->max(start, stop)
django.contrib.gis.geos.mutable_list.ListMixin(self,*args,**kwargs)
django.contrib.gis.geos.mutable_list.ListMixin.__add__(self,other)
django.contrib.gis.geos.mutable_list.ListMixin.__delitem__(self,index)
django.contrib.gis.geos.mutable_list.ListMixin.__eq__(self,other)
django.contrib.gis.geos.mutable_list.ListMixin.__getitem__(self,index)
django.contrib.gis.geos.mutable_list.ListMixin.__iadd__(self,other)
django.contrib.gis.geos.mutable_list.ListMixin.__imul__(self,n)
django.contrib.gis.geos.mutable_list.ListMixin.__init__(self,*args,**kwargs)
django.contrib.gis.geos.mutable_list.ListMixin.__lt__(self,other)
django.contrib.gis.geos.mutable_list.ListMixin.__mul__(self,n)
django.contrib.gis.geos.mutable_list.ListMixin.__radd__(self,other)
django.contrib.gis.geos.mutable_list.ListMixin.__rmul__(self,n)
django.contrib.gis.geos.mutable_list.ListMixin.__setitem__(self,index,val)
django.contrib.gis.geos.mutable_list.ListMixin._assign_extended_slice(self,start,stop,step,valueList)
django.contrib.gis.geos.mutable_list.ListMixin._assign_extended_slice_rebuild(self,start,stop,step,valueList)
django.contrib.gis.geos.mutable_list.ListMixin._assign_simple_slice(self,start,stop,valueList)
django.contrib.gis.geos.mutable_list.ListMixin._check_allowed(self,items)
django.contrib.gis.geos.mutable_list.ListMixin._checkindex(self,index)
django.contrib.gis.geos.mutable_list.ListMixin._rebuild(self,newLen,newItems)
django.contrib.gis.geos.mutable_list.ListMixin._set_single_rebuild(self,index,value)
django.contrib.gis.geos.mutable_list.ListMixin._set_slice(self,index,values)
django.contrib.gis.geos.mutable_list.ListMixin.append(self,val)
django.contrib.gis.geos.mutable_list.ListMixin.count(self,val)
django.contrib.gis.geos.mutable_list.ListMixin.extend(self,vals)
django.contrib.gis.geos.mutable_list.ListMixin.index(self,val)
django.contrib.gis.geos.mutable_list.ListMixin.insert(self,index,val)
django.contrib.gis.geos.mutable_list.ListMixin.pop(self,index=-1)
django.contrib.gis.geos.mutable_list.ListMixin.remove(self,val)
django.contrib.gis.geos.mutable_list.ListMixin.reverse(self)
django.contrib.gis.geos.mutable_list.ListMixin.sort(self,key=None,reverse=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/polygon.py----------------------------------------
A:django.contrib.gis.geos.polygon.n_holes->len(init_holes)
A:django.contrib.gis.geos.polygon.polygon->self._create_polygon(n_holes + 1, [ext_ring, *init_holes])
A:django.contrib.gis.geos.polygon.shell->self._clone(rings.pop(0))
A:django.contrib.gis.geos.polygon.holes->(GEOM_PTR * n_holes)(*[self._clone(r) for r in rings])
A:django.contrib.gis.geos.polygon.holes_param->byref(holes)
A:django.contrib.gis.geos.polygon.ring->LinearRing(param)
A:django.contrib.gis.geos.polygon.self.ptr->self._create_polygon(length, items)
A:django.contrib.gis.geos.polygon.exterior_ring->property(_get_ext_ring, _set_ext_ring)
A:django.contrib.gis.geos.polygon.inner_kml->''.join(('<innerBoundaryIs>%s</innerBoundaryIs>' % self[i + 1].kml for i in range(self.num_interior_rings)))
django.contrib.gis.geos.Polygon(self,*args,**kwargs)
django.contrib.gis.geos.Polygon.__iter__(self)
django.contrib.gis.geos.Polygon.__len__(self)
django.contrib.gis.geos.Polygon._clone(self,g)
django.contrib.gis.geos.Polygon._construct_ring(self,param,msg='ParametermustbeasequenceofLinearRingsorobjectsthatcaninitializetoLinearRings')
django.contrib.gis.geos.Polygon._create_polygon(self,length,items)
django.contrib.gis.geos.Polygon._get_ext_ring(self)
django.contrib.gis.geos.Polygon._get_single_external(self,index)
django.contrib.gis.geos.Polygon._get_single_internal(self,index)
django.contrib.gis.geos.Polygon._set_ext_ring(self,ring)
django.contrib.gis.geos.Polygon._set_list(self,length,items)
django.contrib.gis.geos.Polygon.from_bbox(cls,bbox)
django.contrib.gis.geos.Polygon.kml(self)
django.contrib.gis.geos.Polygon.num_interior_rings(self)
django.contrib.gis.geos.Polygon.tuple(self)
django.contrib.gis.geos.polygon.Polygon(self,*args,**kwargs)
django.contrib.gis.geos.polygon.Polygon.__init__(self,*args,**kwargs)
django.contrib.gis.geos.polygon.Polygon.__iter__(self)
django.contrib.gis.geos.polygon.Polygon.__len__(self)
django.contrib.gis.geos.polygon.Polygon._clone(self,g)
django.contrib.gis.geos.polygon.Polygon._construct_ring(self,param,msg='ParametermustbeasequenceofLinearRingsorobjectsthatcaninitializetoLinearRings')
django.contrib.gis.geos.polygon.Polygon._create_polygon(self,length,items)
django.contrib.gis.geos.polygon.Polygon._get_ext_ring(self)
django.contrib.gis.geos.polygon.Polygon._get_single_external(self,index)
django.contrib.gis.geos.polygon.Polygon._get_single_internal(self,index)
django.contrib.gis.geos.polygon.Polygon._set_ext_ring(self,ring)
django.contrib.gis.geos.polygon.Polygon._set_list(self,length,items)
django.contrib.gis.geos.polygon.Polygon.from_bbox(cls,bbox)
django.contrib.gis.geos.polygon.Polygon.kml(self)
django.contrib.gis.geos.polygon.Polygon.num_interior_rings(self)
django.contrib.gis.geos.polygon.Polygon.tuple(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prepared.py----------------------------------------
A:django.contrib.gis.geos.prepared.self.ptr->prototypes.prepared.geos_prepare(geom.ptr)
django.contrib.gis.geos.prepared.PreparedGeometry(self,geom)
django.contrib.gis.geos.prepared.PreparedGeometry.__init__(self,geom)
django.contrib.gis.geos.prepared.PreparedGeometry.contains(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.contains_properly(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.covers(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.crosses(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.disjoint(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.intersects(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.overlaps(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.touches(self,other)
django.contrib.gis.geos.prepared.PreparedGeometry.within(self,other)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/error.py----------------------------------------
django.contrib.gis.geos.GEOSException(Exception)
django.contrib.gis.geos.error.GEOSException(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/geometry.py----------------------------------------
A:django.contrib.gis.geos.geometry.ptr->django.contrib.gis.geos.prototypes.geom_clone(geo_input.ptr)._geos_ptr()
A:django.contrib.gis.geos.geometry.ewkt->force_bytes(ewkt)
A:django.contrib.gis.geos.geometry.parts->force_bytes(ewkt).split(b';', 1)
A:django.contrib.gis.geos.geometry.match->re.match(b'SRID=(?P<srid>\\-?\\d+)', srid_part)
A:django.contrib.gis.geos.geometry.srid->int(match['srid'])
A:django.contrib.gis.geos.geometry.other->GEOSGeometry.from_ewkt(other)
A:django.contrib.gis.geos.geometry.s->django.contrib.gis.geos.prototypes.geos_get_srid(self.ptr)
A:django.contrib.gis.geos.geometry.g->django.contrib.gis.geos.prototypes.geom_clone(geo_input.ptr)
A:django.contrib.gis.geos.geometry.geo_input->force_str(geo_input)
A:django.contrib.gis.geos.geometry.wkt_m->django.contrib.gis.geometry.wkt_regex.match(geo_input)
A:django.contrib.gis.geos.geometry.input_srid->int(wkt_m['srid'])
A:django.contrib.gis.geos.geometry.ogr->django.contrib.gis.gdal.OGRGeometry.from_json(geo_input)
django.contrib.gis.geos.GEOSGeometry(self,geo_input,srid=None)
django.contrib.gis.geos.GEOSGeometryBase(self,ptr,cls)
django.contrib.gis.geos.GEOSGeometryBase.__and__(self,other)
django.contrib.gis.geos.GEOSGeometryBase.__copy__(self)
django.contrib.gis.geos.GEOSGeometryBase.__deepcopy__(self,memodict)
django.contrib.gis.geos.GEOSGeometryBase.__eq__(self,other)
django.contrib.gis.geos.GEOSGeometryBase.__getstate__(self)
django.contrib.gis.geos.GEOSGeometryBase.__hash__(self)
django.contrib.gis.geos.GEOSGeometryBase.__or__(self,other)
django.contrib.gis.geos.GEOSGeometryBase.__repr__(self)
django.contrib.gis.geos.GEOSGeometryBase.__setstate__(self,state)
django.contrib.gis.geos.GEOSGeometryBase.__str__(self)
django.contrib.gis.geos.GEOSGeometryBase.__sub__(self,other)
django.contrib.gis.geos.GEOSGeometryBase.__xor__(self,other)
django.contrib.gis.geos.GEOSGeometryBase._from_pickle_wkb(self,wkb)
django.contrib.gis.geos.GEOSGeometryBase._from_wkb(cls,wkb)
django.contrib.gis.geos.GEOSGeometryBase._from_wkt(wkt)
django.contrib.gis.geos.GEOSGeometryBase._ogr_ptr(self)
django.contrib.gis.geos.GEOSGeometryBase._post_init(self)
django.contrib.gis.geos.GEOSGeometryBase._to_pickle_wkb(self)
django.contrib.gis.geos.GEOSGeometryBase._topology(self,gptr)
django.contrib.gis.geos.GEOSGeometryBase.area(self)
django.contrib.gis.geos.GEOSGeometryBase.boundary(self)
django.contrib.gis.geos.GEOSGeometryBase.buffer(self,width,quadsegs=8)
django.contrib.gis.geos.GEOSGeometryBase.buffer_with_style(self,width,quadsegs=8,end_cap_style=1,join_style=1,mitre_limit=5.0)
django.contrib.gis.geos.GEOSGeometryBase.centroid(self)
django.contrib.gis.geos.GEOSGeometryBase.clone(self)
django.contrib.gis.geos.GEOSGeometryBase.contains(self,other)
django.contrib.gis.geos.GEOSGeometryBase.convex_hull(self)
django.contrib.gis.geos.GEOSGeometryBase.coord_seq(self)
django.contrib.gis.geos.GEOSGeometryBase.covers(self,other)
django.contrib.gis.geos.GEOSGeometryBase.crosses(self,other)
django.contrib.gis.geos.GEOSGeometryBase.crs(self)
django.contrib.gis.geos.GEOSGeometryBase.difference(self,other)
django.contrib.gis.geos.GEOSGeometryBase.dims(self)
django.contrib.gis.geos.GEOSGeometryBase.disjoint(self,other)
django.contrib.gis.geos.GEOSGeometryBase.distance(self,other)
django.contrib.gis.geos.GEOSGeometryBase.empty(self)
django.contrib.gis.geos.GEOSGeometryBase.envelope(self)
django.contrib.gis.geos.GEOSGeometryBase.equals(self,other)
django.contrib.gis.geos.GEOSGeometryBase.equals_exact(self,other,tolerance=0)
django.contrib.gis.geos.GEOSGeometryBase.ewkb(self)
django.contrib.gis.geos.GEOSGeometryBase.ewkt(self)
django.contrib.gis.geos.GEOSGeometryBase.extent(self)
django.contrib.gis.geos.GEOSGeometryBase.from_ewkt(ewkt)
django.contrib.gis.geos.GEOSGeometryBase.from_gml(cls,gml_string)
django.contrib.gis.geos.GEOSGeometryBase.geom_type(self)
django.contrib.gis.geos.GEOSGeometryBase.geom_typeid(self)
django.contrib.gis.geos.GEOSGeometryBase.hasz(self)
django.contrib.gis.geos.GEOSGeometryBase.hex(self)
django.contrib.gis.geos.GEOSGeometryBase.hexewkb(self)
django.contrib.gis.geos.GEOSGeometryBase.intersection(self,other)
django.contrib.gis.geos.GEOSGeometryBase.intersects(self,other)
django.contrib.gis.geos.GEOSGeometryBase.json(self)
django.contrib.gis.geos.GEOSGeometryBase.kml(self)
django.contrib.gis.geos.GEOSGeometryBase.length(self)
django.contrib.gis.geos.GEOSGeometryBase.normalize(self)
django.contrib.gis.geos.GEOSGeometryBase.num_coords(self)
django.contrib.gis.geos.GEOSGeometryBase.num_geom(self)
django.contrib.gis.geos.GEOSGeometryBase.num_points(self)
django.contrib.gis.geos.GEOSGeometryBase.ogr(self)
django.contrib.gis.geos.GEOSGeometryBase.overlaps(self,other)
django.contrib.gis.geos.GEOSGeometryBase.point_on_surface(self)
django.contrib.gis.geos.GEOSGeometryBase.prepared(self)
django.contrib.gis.geos.GEOSGeometryBase.relate(self,other)
django.contrib.gis.geos.GEOSGeometryBase.relate_pattern(self,other,pattern)
django.contrib.gis.geos.GEOSGeometryBase.ring(self)
django.contrib.gis.geos.GEOSGeometryBase.simple(self)
django.contrib.gis.geos.GEOSGeometryBase.simplify(self,tolerance=0.0,preserve_topology=False)
django.contrib.gis.geos.GEOSGeometryBase.srid(self)
django.contrib.gis.geos.GEOSGeometryBase.srid(self,srid)
django.contrib.gis.geos.GEOSGeometryBase.srs(self)
django.contrib.gis.geos.GEOSGeometryBase.sym_difference(self,other)
django.contrib.gis.geos.GEOSGeometryBase.touches(self,other)
django.contrib.gis.geos.GEOSGeometryBase.transform(self,ct,clone=False)
django.contrib.gis.geos.GEOSGeometryBase.unary_union(self)
django.contrib.gis.geos.GEOSGeometryBase.union(self,other)
django.contrib.gis.geos.GEOSGeometryBase.valid(self)
django.contrib.gis.geos.GEOSGeometryBase.valid_reason(self)
django.contrib.gis.geos.GEOSGeometryBase.within(self,other)
django.contrib.gis.geos.GEOSGeometryBase.wkb(self)
django.contrib.gis.geos.GEOSGeometryBase.wkt(self)
django.contrib.gis.geos.geometry.GEOSGeometry(self,geo_input,srid=None)
django.contrib.gis.geos.geometry.GEOSGeometry.__init__(self,geo_input,srid=None)
django.contrib.gis.geos.geometry.GEOSGeometryBase(self,ptr,cls)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__and__(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__copy__(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__deepcopy__(self,memodict)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__eq__(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__getstate__(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__hash__(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__init__(self,ptr,cls)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__or__(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__repr__(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__setstate__(self,state)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__str__(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__sub__(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.__xor__(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase._from_pickle_wkb(self,wkb)
django.contrib.gis.geos.geometry.GEOSGeometryBase._from_wkb(cls,wkb)
django.contrib.gis.geos.geometry.GEOSGeometryBase._from_wkt(wkt)
django.contrib.gis.geos.geometry.GEOSGeometryBase._ogr_ptr(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase._post_init(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase._to_pickle_wkb(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase._topology(self,gptr)
django.contrib.gis.geos.geometry.GEOSGeometryBase.area(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.boundary(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.buffer(self,width,quadsegs=8)
django.contrib.gis.geos.geometry.GEOSGeometryBase.buffer_with_style(self,width,quadsegs=8,end_cap_style=1,join_style=1,mitre_limit=5.0)
django.contrib.gis.geos.geometry.GEOSGeometryBase.centroid(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.clone(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.contains(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.convex_hull(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.coord_seq(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.covers(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.crosses(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.crs(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.difference(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.dims(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.disjoint(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.distance(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.empty(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.envelope(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.equals(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.equals_exact(self,other,tolerance=0)
django.contrib.gis.geos.geometry.GEOSGeometryBase.ewkb(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.ewkt(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.extent(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.from_ewkt(ewkt)
django.contrib.gis.geos.geometry.GEOSGeometryBase.from_gml(cls,gml_string)
django.contrib.gis.geos.geometry.GEOSGeometryBase.geom_type(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.geom_typeid(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.hasz(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.hex(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.hexewkb(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.intersection(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.intersects(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.json(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.kml(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.length(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.normalize(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.num_coords(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.num_geom(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.num_points(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.ogr(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.overlaps(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.point_on_surface(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.prepared(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.relate(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.relate_pattern(self,other,pattern)
django.contrib.gis.geos.geometry.GEOSGeometryBase.ring(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.simple(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.simplify(self,tolerance=0.0,preserve_topology=False)
django.contrib.gis.geos.geometry.GEOSGeometryBase.srid(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.srid(self,srid)
django.contrib.gis.geos.geometry.GEOSGeometryBase.srs(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.sym_difference(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.touches(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.transform(self,ct,clone=False)
django.contrib.gis.geos.geometry.GEOSGeometryBase.unary_union(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.union(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.valid(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.valid_reason(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.within(self,other)
django.contrib.gis.geos.geometry.GEOSGeometryBase.wkb(self)
django.contrib.gis.geos.geometry.GEOSGeometryBase.wkt(self)
django.contrib.gis.geos.geometry.LinearGeometryMixin
django.contrib.gis.geos.geometry.LinearGeometryMixin.closed(self)
django.contrib.gis.geos.geometry.LinearGeometryMixin.interpolate(self,distance)
django.contrib.gis.geos.geometry.LinearGeometryMixin.interpolate_normalized(self,distance)
django.contrib.gis.geos.geometry.LinearGeometryMixin.merged(self)
django.contrib.gis.geos.geometry.LinearGeometryMixin.project(self,point)
django.contrib.gis.geos.geometry.LinearGeometryMixin.project_normalized(self,point)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/io.py----------------------------------------
django.contrib.gis.geos.WKBReader(_WKBReader)
django.contrib.gis.geos.WKBReader.read(self,wkb)
django.contrib.gis.geos.WKTReader(_WKTReader)
django.contrib.gis.geos.WKTReader.read(self,wkt)
django.contrib.gis.geos.io.WKBReader(_WKBReader)
django.contrib.gis.geos.io.WKBReader.read(self,wkb)
django.contrib.gis.geos.io.WKTReader(_WKTReader)
django.contrib.gis.geos.io.WKTReader.read(self,wkt)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/threadsafe.py----------------------------------------
A:django.contrib.gis.geos.prototypes.threadsafe.self.ptr->django.contrib.gis.geos.libgeos.lgeos.initGEOS_r(notice_h, error_h)
A:django.contrib.gis.geos.prototypes.threadsafe.thread_context->GEOSContext()
A:django.contrib.gis.geos.prototypes.threadsafe.self.cfunc->getattr(lgeos, func_name + '_r')
A:django.contrib.gis.geos.prototypes.threadsafe.argtypes->property(_get_argtypes, _set_argtypes)
A:django.contrib.gis.geos.prototypes.threadsafe.restype->property(_get_restype, _set_restype)
A:django.contrib.gis.geos.prototypes.threadsafe.errcheck->property(_get_errcheck, _set_errcheck)
django.contrib.gis.geos.prototypes.threadsafe.GEOSContext(threading.local)
django.contrib.gis.geos.prototypes.threadsafe.GEOSContextHandle(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSContextHandle.__init__(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc(self,func_name)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc.__init__(self,func_name)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc.__str__(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._get_argtypes(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._get_errcheck(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._get_restype(self)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._set_argtypes(self,argtypes)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._set_errcheck(self,errcheck)
django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc._set_restype(self,restype)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/errcheck.py----------------------------------------
A:django.contrib.gis.geos.prototypes.errcheck.free->GEOSFuncFactory('GEOSFree')
A:django.contrib.gis.geos.prototypes.errcheck.s->string_at(result)
django.contrib.gis.geos.prototypes.errcheck.check_dbl(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.check_geom(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.check_minus_one(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.check_predicate(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.check_sized_string(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.check_string(result,func,cargs)
django.contrib.gis.geos.prototypes.errcheck.last_arg_byref(args)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/coordseq.py----------------------------------------
A:django.contrib.gis.geos.prototypes.coordseq.errcheck->staticmethod(check_cs_get)
A:django.contrib.gis.geos.prototypes.coordseq.dbl_param->POINTER(c_double)
A:django.contrib.gis.geos.prototypes.coordseq.cs_clone->CsOutput('GEOSCoordSeq_clone', argtypes=[CS_PTR])
A:django.contrib.gis.geos.prototypes.coordseq.create_cs->CsOutput('GEOSCoordSeq_create', argtypes=[c_uint, c_uint])
A:django.contrib.gis.geos.prototypes.coordseq.get_cs->CsOutput('GEOSGeom_getCoordSeq', argtypes=[GEOM_PTR])
A:django.contrib.gis.geos.prototypes.coordseq.cs_getordinate->CsOperation('GEOSCoordSeq_getOrdinate', ordinate=True, get=True)
A:django.contrib.gis.geos.prototypes.coordseq.cs_setordinate->CsOperation('GEOSCoordSeq_setOrdinate', ordinate=True)
A:django.contrib.gis.geos.prototypes.coordseq.cs_getx->CsOperation('GEOSCoordSeq_getX', get=True)
A:django.contrib.gis.geos.prototypes.coordseq.cs_gety->CsOperation('GEOSCoordSeq_getY', get=True)
A:django.contrib.gis.geos.prototypes.coordseq.cs_getz->CsOperation('GEOSCoordSeq_getZ', get=True)
A:django.contrib.gis.geos.prototypes.coordseq.cs_setx->CsOperation('GEOSCoordSeq_setX')
A:django.contrib.gis.geos.prototypes.coordseq.cs_sety->CsOperation('GEOSCoordSeq_setY')
A:django.contrib.gis.geos.prototypes.coordseq.cs_setz->CsOperation('GEOSCoordSeq_setZ')
A:django.contrib.gis.geos.prototypes.coordseq.cs_getsize->CsInt('GEOSCoordSeq_getSize')
A:django.contrib.gis.geos.prototypes.coordseq.cs_getdims->CsInt('GEOSCoordSeq_getDimensions')
A:django.contrib.gis.geos.prototypes.coordseq.cs_is_ccw->GEOSFuncFactory('GEOSCoordSeq_isCCW', restype=c_int, argtypes=[CS_PTR, POINTER(c_byte)])
django.contrib.gis.geos.prototypes.coordseq.CsInt(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.coordseq.CsOperation(self,*args,ordinate=False,get=False,**kwargs)
django.contrib.gis.geos.prototypes.coordseq.CsOperation.__init__(self,*args,ordinate=False,get=False,**kwargs)
django.contrib.gis.geos.prototypes.coordseq.CsOutput(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.coordseq.CsOutput.errcheck(result,func,cargs)
django.contrib.gis.geos.prototypes.coordseq.check_cs_get(result,func,cargs)
django.contrib.gis.geos.prototypes.coordseq.check_cs_op(result,func,cargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/misc.py----------------------------------------
A:django.contrib.gis.geos.prototypes.misc.errcheck->staticmethod(check_dbl)
A:django.contrib.gis.geos.prototypes.misc.geos_area->DblFromGeom('GEOSArea', argtypes=[GEOM_PTR, POINTER(c_double)])
A:django.contrib.gis.geos.prototypes.misc.geos_distance->DblFromGeom('GEOSDistance', argtypes=[GEOM_PTR, GEOM_PTR, POINTER(c_double)])
A:django.contrib.gis.geos.prototypes.misc.geos_length->DblFromGeom('GEOSLength', argtypes=[GEOM_PTR, POINTER(c_double)])
A:django.contrib.gis.geos.prototypes.misc.geos_isvalidreason->GEOSFuncFactory('GEOSisValidReason', restype=geos_char_p, errcheck=check_string, argtypes=[GEOM_PTR])
django.contrib.gis.geos.prototypes.DblFromGeom(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.misc.DblFromGeom(GEOSFuncFactory)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/prepared.py----------------------------------------
A:django.contrib.gis.geos.prototypes.prepared.geos_prepare->GEOSFuncFactory('GEOSPrepare', argtypes=[GEOM_PTR], restype=PREPGEOM_PTR)
A:django.contrib.gis.geos.prototypes.prepared.prepared_destroy->GEOSFuncFactory('GEOSPreparedGeom_destroy', argtypes=[PREPGEOM_PTR])
A:django.contrib.gis.geos.prototypes.prepared.errcheck->staticmethod(check_predicate)
A:django.contrib.gis.geos.prototypes.prepared.prepared_contains->PreparedPredicate('GEOSPreparedContains')
A:django.contrib.gis.geos.prototypes.prepared.prepared_contains_properly->PreparedPredicate('GEOSPreparedContainsProperly')
A:django.contrib.gis.geos.prototypes.prepared.prepared_covers->PreparedPredicate('GEOSPreparedCovers')
A:django.contrib.gis.geos.prototypes.prepared.prepared_crosses->PreparedPredicate('GEOSPreparedCrosses')
A:django.contrib.gis.geos.prototypes.prepared.prepared_disjoint->PreparedPredicate('GEOSPreparedDisjoint')
A:django.contrib.gis.geos.prototypes.prepared.prepared_intersects->PreparedPredicate('GEOSPreparedIntersects')
A:django.contrib.gis.geos.prototypes.prepared.prepared_overlaps->PreparedPredicate('GEOSPreparedOverlaps')
A:django.contrib.gis.geos.prototypes.prepared.prepared_touches->PreparedPredicate('GEOSPreparedTouches')
A:django.contrib.gis.geos.prototypes.prepared.prepared_within->PreparedPredicate('GEOSPreparedWithin')
django.contrib.gis.geos.prototypes.prepared.PreparedPredicate(GEOSFuncFactory)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/geom.py----------------------------------------
A:django.contrib.gis.geos.prototypes.geom.c_uchar_p->POINTER(c_ubyte)
A:django.contrib.gis.geos.prototypes.geom.errcheck->staticmethod(check_string)
A:django.contrib.gis.geos.prototypes.geom.geos_normalize->IntFromGeom('GEOSNormalize')
A:django.contrib.gis.geos.prototypes.geom.geos_type->StringFromGeom('GEOSGeomType')
A:django.contrib.gis.geos.prototypes.geom.geos_typeid->IntFromGeom('GEOSGeomTypeId')
A:django.contrib.gis.geos.prototypes.geom.get_dims->GEOSFuncFactory('GEOSGeom_getDimensions', argtypes=[GEOM_PTR], restype=c_int)
A:django.contrib.gis.geos.prototypes.geom.get_num_coords->IntFromGeom('GEOSGetNumCoordinates')
A:django.contrib.gis.geos.prototypes.geom.get_num_geoms->IntFromGeom('GEOSGetNumGeometries')
A:django.contrib.gis.geos.prototypes.geom.create_point->GeomOutput('GEOSGeom_createPoint', argtypes=[CS_PTR])
A:django.contrib.gis.geos.prototypes.geom.create_linestring->GeomOutput('GEOSGeom_createLineString', argtypes=[CS_PTR])
A:django.contrib.gis.geos.prototypes.geom.create_linearring->GeomOutput('GEOSGeom_createLinearRing', argtypes=[CS_PTR])
A:django.contrib.gis.geos.prototypes.geom.create_polygon->GeomOutput('GEOSGeom_createPolygon')
A:django.contrib.gis.geos.prototypes.geom.create_empty_polygon->GeomOutput('GEOSGeom_createEmptyPolygon')
A:django.contrib.gis.geos.prototypes.geom.create_collection->GeomOutput('GEOSGeom_createCollection')
A:django.contrib.gis.geos.prototypes.geom.get_extring->GeomOutput('GEOSGetExteriorRing', argtypes=[GEOM_PTR])
A:django.contrib.gis.geos.prototypes.geom.get_intring->GeomOutput('GEOSGetInteriorRingN', argtypes=[GEOM_PTR, c_int])
A:django.contrib.gis.geos.prototypes.geom.get_nrings->IntFromGeom('GEOSGetNumInteriorRings')
A:django.contrib.gis.geos.prototypes.geom.get_geomn->GeomOutput('GEOSGetGeometryN', argtypes=[GEOM_PTR, c_int])
A:django.contrib.gis.geos.prototypes.geom.geom_clone->GEOSFuncFactory('GEOSGeom_clone', argtypes=[GEOM_PTR], restype=GEOM_PTR)
A:django.contrib.gis.geos.prototypes.geom.destroy_geom->GEOSFuncFactory('GEOSGeom_destroy', argtypes=[GEOM_PTR])
A:django.contrib.gis.geos.prototypes.geom.geos_get_srid->GEOSFuncFactory('GEOSGetSRID', argtypes=[GEOM_PTR], restype=c_int)
A:django.contrib.gis.geos.prototypes.geom.geos_set_srid->GEOSFuncFactory('GEOSSetSRID', argtypes=[GEOM_PTR, c_int])
django.contrib.gis.geos.prototypes.geom.GeomOutput(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.geom.IntFromGeom(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.geom.StringFromGeom(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.geom.geos_char_p(c_char_p)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/topology.py----------------------------------------
A:django.contrib.gis.geos.prototypes.topology.errcheck->staticmethod(check_geom)
A:django.contrib.gis.geos.prototypes.topology.geos_boundary->Topology('GEOSBoundary')
A:django.contrib.gis.geos.prototypes.topology.geos_buffer->Topology('GEOSBuffer', argtypes=[GEOM_PTR, c_double, c_int])
A:django.contrib.gis.geos.prototypes.topology.geos_bufferwithstyle->Topology('GEOSBufferWithStyle', argtypes=[GEOM_PTR, c_double, c_int, c_int, c_int, c_double])
A:django.contrib.gis.geos.prototypes.topology.geos_centroid->Topology('GEOSGetCentroid')
A:django.contrib.gis.geos.prototypes.topology.geos_convexhull->Topology('GEOSConvexHull')
A:django.contrib.gis.geos.prototypes.topology.geos_difference->Topology('GEOSDifference', argtypes=[GEOM_PTR, GEOM_PTR])
A:django.contrib.gis.geos.prototypes.topology.geos_envelope->Topology('GEOSEnvelope')
A:django.contrib.gis.geos.prototypes.topology.geos_intersection->Topology('GEOSIntersection', argtypes=[GEOM_PTR, GEOM_PTR])
A:django.contrib.gis.geos.prototypes.topology.geos_linemerge->Topology('GEOSLineMerge')
A:django.contrib.gis.geos.prototypes.topology.geos_pointonsurface->Topology('GEOSPointOnSurface')
A:django.contrib.gis.geos.prototypes.topology.geos_preservesimplify->Topology('GEOSTopologyPreserveSimplify', argtypes=[GEOM_PTR, c_double])
A:django.contrib.gis.geos.prototypes.topology.geos_simplify->Topology('GEOSSimplify', argtypes=[GEOM_PTR, c_double])
A:django.contrib.gis.geos.prototypes.topology.geos_symdifference->Topology('GEOSSymDifference', argtypes=[GEOM_PTR, GEOM_PTR])
A:django.contrib.gis.geos.prototypes.topology.geos_union->Topology('GEOSUnion', argtypes=[GEOM_PTR, GEOM_PTR])
A:django.contrib.gis.geos.prototypes.topology.geos_unary_union->GEOSFuncFactory('GEOSUnaryUnion', argtypes=[GEOM_PTR], restype=GEOM_PTR)
A:django.contrib.gis.geos.prototypes.topology.geos_relate->GEOSFuncFactory('GEOSRelate', argtypes=[GEOM_PTR, GEOM_PTR], restype=geos_char_p, errcheck=check_string)
A:django.contrib.gis.geos.prototypes.topology.geos_project->GEOSFuncFactory('GEOSProject', argtypes=[GEOM_PTR, GEOM_PTR], restype=c_double, errcheck=check_minus_one)
A:django.contrib.gis.geos.prototypes.topology.geos_interpolate->Topology('GEOSInterpolate', argtypes=[GEOM_PTR, c_double])
A:django.contrib.gis.geos.prototypes.topology.geos_project_normalized->GEOSFuncFactory('GEOSProjectNormalized', argtypes=[GEOM_PTR, GEOM_PTR], restype=c_double, errcheck=check_minus_one)
A:django.contrib.gis.geos.prototypes.topology.geos_interpolate_normalized->Topology('GEOSInterpolateNormalized', argtypes=[GEOM_PTR, c_double])
django.contrib.gis.geos.prototypes.Topology(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.topology.Topology(GEOSFuncFactory)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/predicates.py----------------------------------------
A:django.contrib.gis.geos.prototypes.predicates.errcheck->staticmethod(check_predicate)
A:django.contrib.gis.geos.prototypes.predicates.geos_hasz->UnaryPredicate('GEOSHasZ')
A:django.contrib.gis.geos.prototypes.predicates.geos_isclosed->UnaryPredicate('GEOSisClosed')
A:django.contrib.gis.geos.prototypes.predicates.geos_isempty->UnaryPredicate('GEOSisEmpty')
A:django.contrib.gis.geos.prototypes.predicates.geos_isring->UnaryPredicate('GEOSisRing')
A:django.contrib.gis.geos.prototypes.predicates.geos_issimple->UnaryPredicate('GEOSisSimple')
A:django.contrib.gis.geos.prototypes.predicates.geos_isvalid->UnaryPredicate('GEOSisValid')
A:django.contrib.gis.geos.prototypes.predicates.geos_contains->BinaryPredicate('GEOSContains')
A:django.contrib.gis.geos.prototypes.predicates.geos_covers->BinaryPredicate('GEOSCovers')
A:django.contrib.gis.geos.prototypes.predicates.geos_crosses->BinaryPredicate('GEOSCrosses')
A:django.contrib.gis.geos.prototypes.predicates.geos_disjoint->BinaryPredicate('GEOSDisjoint')
A:django.contrib.gis.geos.prototypes.predicates.geos_equals->BinaryPredicate('GEOSEquals')
A:django.contrib.gis.geos.prototypes.predicates.geos_equalsexact->BinaryPredicate('GEOSEqualsExact', argtypes=[GEOM_PTR, GEOM_PTR, c_double])
A:django.contrib.gis.geos.prototypes.predicates.geos_intersects->BinaryPredicate('GEOSIntersects')
A:django.contrib.gis.geos.prototypes.predicates.geos_overlaps->BinaryPredicate('GEOSOverlaps')
A:django.contrib.gis.geos.prototypes.predicates.geos_relatepattern->BinaryPredicate('GEOSRelatePattern', argtypes=[GEOM_PTR, GEOM_PTR, c_char_p])
A:django.contrib.gis.geos.prototypes.predicates.geos_touches->BinaryPredicate('GEOSTouches')
A:django.contrib.gis.geos.prototypes.predicates.geos_within->BinaryPredicate('GEOSWithin')
django.contrib.gis.geos.prototypes.predicates.BinaryPredicate(UnaryPredicate)
django.contrib.gis.geos.prototypes.predicates.UnaryPredicate(GEOSFuncFactory)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geos/prototypes/io.py----------------------------------------
A:django.contrib.gis.geos.prototypes.io.WKT_READ_PTR->POINTER(WKTReader_st)
A:django.contrib.gis.geos.prototypes.io.WKT_WRITE_PTR->POINTER(WKTWriter_st)
A:django.contrib.gis.geos.prototypes.io.WKB_READ_PTR->POINTER(WKBReader_st)
A:django.contrib.gis.geos.prototypes.io.WKB_WRITE_PTR->POINTER(WKBReader_st)
A:django.contrib.gis.geos.prototypes.io.wkt_reader_create->GEOSFuncFactory('GEOSWKTReader_create', restype=WKT_READ_PTR)
A:django.contrib.gis.geos.prototypes.io.wkt_reader_destroy->GEOSFuncFactory('GEOSWKTReader_destroy', argtypes=[WKT_READ_PTR])
A:django.contrib.gis.geos.prototypes.io.wkt_reader_read->GEOSFuncFactory('GEOSWKTReader_read', argtypes=[WKT_READ_PTR, c_char_p], restype=GEOM_PTR, errcheck=check_geom)
A:django.contrib.gis.geos.prototypes.io.wkt_writer_create->GEOSFuncFactory('GEOSWKTWriter_create', restype=WKT_WRITE_PTR)
A:django.contrib.gis.geos.prototypes.io.wkt_writer_destroy->GEOSFuncFactory('GEOSWKTWriter_destroy', argtypes=[WKT_WRITE_PTR])
A:django.contrib.gis.geos.prototypes.io.wkt_writer_write->GEOSFuncFactory('GEOSWKTWriter_write', argtypes=[WKT_WRITE_PTR, GEOM_PTR], restype=geos_char_p, errcheck=check_string)
A:django.contrib.gis.geos.prototypes.io.wkt_writer_get_outdim->GEOSFuncFactory('GEOSWKTWriter_getOutputDimension', argtypes=[WKT_WRITE_PTR], restype=c_int)
A:django.contrib.gis.geos.prototypes.io.wkt_writer_set_outdim->GEOSFuncFactory('GEOSWKTWriter_setOutputDimension', argtypes=[WKT_WRITE_PTR, c_int])
A:django.contrib.gis.geos.prototypes.io.wkt_writer_set_trim->GEOSFuncFactory('GEOSWKTWriter_setTrim', argtypes=[WKT_WRITE_PTR, c_byte])
A:django.contrib.gis.geos.prototypes.io.wkt_writer_set_precision->GEOSFuncFactory('GEOSWKTWriter_setRoundingPrecision', argtypes=[WKT_WRITE_PTR, c_int])
A:django.contrib.gis.geos.prototypes.io.wkb_reader_create->GEOSFuncFactory('GEOSWKBReader_create', restype=WKB_READ_PTR)
A:django.contrib.gis.geos.prototypes.io.wkb_reader_destroy->GEOSFuncFactory('GEOSWKBReader_destroy', argtypes=[WKB_READ_PTR])
A:django.contrib.gis.geos.prototypes.io.errcheck->staticmethod(check_sized_string)
A:django.contrib.gis.geos.prototypes.io.wkb_reader_read->WKBReadFunc('GEOSWKBReader_read')
A:django.contrib.gis.geos.prototypes.io.wkb_reader_read_hex->WKBReadFunc('GEOSWKBReader_readHEX')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_create->GEOSFuncFactory('GEOSWKBWriter_create', restype=WKB_WRITE_PTR)
A:django.contrib.gis.geos.prototypes.io.wkb_writer_destroy->GEOSFuncFactory('GEOSWKBWriter_destroy', argtypes=[WKB_WRITE_PTR])
A:django.contrib.gis.geos.prototypes.io.wkb_writer_write->WKBWriteFunc('GEOSWKBWriter_write')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_write_hex->WKBWriteFunc('GEOSWKBWriter_writeHEX')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_get_byteorder->WKBWriterGet('GEOSWKBWriter_getByteOrder')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_set_byteorder->WKBWriterSet('GEOSWKBWriter_setByteOrder')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_get_outdim->WKBWriterGet('GEOSWKBWriter_getOutputDimension')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_set_outdim->WKBWriterSet('GEOSWKBWriter_setOutputDimension')
A:django.contrib.gis.geos.prototypes.io.wkb_writer_get_include_srid->WKBWriterGet('GEOSWKBWriter_getIncludeSRID', restype=c_byte)
A:django.contrib.gis.geos.prototypes.io.wkb_writer_set_include_srid->WKBWriterSet('GEOSWKBWriter_setIncludeSRID', argtypes=[WKB_WRITE_PTR, c_byte])
A:django.contrib.gis.geos.prototypes.io.self.ptr->self._constructor()
A:django.contrib.gis.geos.prototypes.io.wkb_s->bytes(wkb)
A:django.contrib.gis.geos.prototypes.io.self._trim->bool(flag)
A:django.contrib.gis.geos.prototypes.io.geos_version->geos_version_tuple()
A:django.contrib.gis.geos.prototypes.io.geom->self._handle_empty_point(geom)
A:django.contrib.gis.geos.prototypes.io.wkb->wkb_writer_write_hex(self.ptr, geom.ptr, byref(c_size_t()))
A:django.contrib.gis.geos.prototypes.io.byteorder->property(_get_byteorder, _set_byteorder)
A:django.contrib.gis.geos.prototypes.io.thread_context->ThreadLocalIO()
A:django.contrib.gis.geos.prototypes.io.thread_context.wkt_w->WKTWriter(dim=dim, trim=trim, precision=precision)
A:django.contrib.gis.geos.prototypes.io.thread_context.wkb_w->WKBWriter(dim=dim)
A:django.contrib.gis.geos.prototypes.io.thread_context.ewkb_w->WKBWriter(dim=dim)
django.contrib.gis.geos.prototypes.WKBReader_st(Structure)
django.contrib.gis.geos.prototypes.WKBWriter(self,dim=2)
django.contrib.gis.geos.prototypes.WKBWriter._get_byteorder(self)
django.contrib.gis.geos.prototypes.WKBWriter._handle_empty_point(self,geom)
django.contrib.gis.geos.prototypes.WKBWriter._set_byteorder(self,order)
django.contrib.gis.geos.prototypes.WKBWriter.outdim(self)
django.contrib.gis.geos.prototypes.WKBWriter.outdim(self,new_dim)
django.contrib.gis.geos.prototypes.WKBWriter.srid(self)
django.contrib.gis.geos.prototypes.WKBWriter.srid(self,include)
django.contrib.gis.geos.prototypes.WKBWriter.write(self,geom)
django.contrib.gis.geos.prototypes.WKBWriter.write_hex(self,geom)
django.contrib.gis.geos.prototypes.WKBWriterGet(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.WKBWriterSet(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.WKBWriter_st(Structure)
django.contrib.gis.geos.prototypes.WKTReader_st(Structure)
django.contrib.gis.geos.prototypes.WKTWriter(self,dim=2,trim=False,precision=None)
django.contrib.gis.geos.prototypes.WKTWriter.outdim(self)
django.contrib.gis.geos.prototypes.WKTWriter.outdim(self,new_dim)
django.contrib.gis.geos.prototypes.WKTWriter.precision(self)
django.contrib.gis.geos.prototypes.WKTWriter.precision(self,precision)
django.contrib.gis.geos.prototypes.WKTWriter.trim(self)
django.contrib.gis.geos.prototypes.WKTWriter.trim(self,flag)
django.contrib.gis.geos.prototypes.WKTWriter.write(self,geom)
django.contrib.gis.geos.prototypes.WKTWriter_st(Structure)
django.contrib.gis.geos.prototypes.io.IOBase(self)
django.contrib.gis.geos.prototypes.io.IOBase.__init__(self)
django.contrib.gis.geos.prototypes.io.ThreadLocalIO(threading.local)
django.contrib.gis.geos.prototypes.io.WKBReadFunc(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.io.WKBReader_st(Structure)
django.contrib.gis.geos.prototypes.io.WKBWriteFunc(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.io.WKBWriter(self,dim=2)
django.contrib.gis.geos.prototypes.io.WKBWriter.__init__(self,dim=2)
django.contrib.gis.geos.prototypes.io.WKBWriter._get_byteorder(self)
django.contrib.gis.geos.prototypes.io.WKBWriter._handle_empty_point(self,geom)
django.contrib.gis.geos.prototypes.io.WKBWriter._set_byteorder(self,order)
django.contrib.gis.geos.prototypes.io.WKBWriter.outdim(self)
django.contrib.gis.geos.prototypes.io.WKBWriter.outdim(self,new_dim)
django.contrib.gis.geos.prototypes.io.WKBWriter.srid(self)
django.contrib.gis.geos.prototypes.io.WKBWriter.srid(self,include)
django.contrib.gis.geos.prototypes.io.WKBWriter.write(self,geom)
django.contrib.gis.geos.prototypes.io.WKBWriter.write_hex(self,geom)
django.contrib.gis.geos.prototypes.io.WKBWriterGet(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.io.WKBWriterSet(GEOSFuncFactory)
django.contrib.gis.geos.prototypes.io.WKBWriter_st(Structure)
django.contrib.gis.geos.prototypes.io.WKTReader_st(Structure)
django.contrib.gis.geos.prototypes.io.WKTWriter(self,dim=2,trim=False,precision=None)
django.contrib.gis.geos.prototypes.io.WKTWriter.__init__(self,dim=2,trim=False,precision=None)
django.contrib.gis.geos.prototypes.io.WKTWriter.outdim(self)
django.contrib.gis.geos.prototypes.io.WKTWriter.outdim(self,new_dim)
django.contrib.gis.geos.prototypes.io.WKTWriter.precision(self)
django.contrib.gis.geos.prototypes.io.WKTWriter.precision(self,precision)
django.contrib.gis.geos.prototypes.io.WKTWriter.trim(self)
django.contrib.gis.geos.prototypes.io.WKTWriter.trim(self,flag)
django.contrib.gis.geos.prototypes.io.WKTWriter.write(self,geom)
django.contrib.gis.geos.prototypes.io.WKTWriter_st(Structure)
django.contrib.gis.geos.prototypes.io._WKBReader(IOBase)
django.contrib.gis.geos.prototypes.io._WKBReader.read(self,wkb)
django.contrib.gis.geos.prototypes.io._WKTReader(IOBase)
django.contrib.gis.geos.prototypes.io._WKTReader.read(self,wkt)
django.contrib.gis.geos.prototypes.io.ewkb_w(dim=2)
django.contrib.gis.geos.prototypes.io.wkb_r()
django.contrib.gis.geos.prototypes.io.wkb_w(dim=2)
django.contrib.gis.geos.prototypes.io.wkt_r()
django.contrib.gis.geos.prototypes.io.wkt_w(dim=2,trim=False,precision=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/sitemaps/views.py----------------------------------------
A:django.contrib.gis.sitemaps.views.klass->django.apps.apps.get_model(label, model)
A:django.contrib.gis.sitemaps.views.field->django.apps.apps.get_model(label, model)._meta.get_field(field_name)
A:django.contrib.gis.sitemaps.views.placemarks->django.apps.apps.get_model(label, model)._default_manager.using(using).annotate(kml=AsKML(field_name))
A:django.contrib.gis.sitemaps.views.qs->django.apps.apps.get_model(label, model)._default_manager.using(using).all()
django.contrib.gis.sitemaps.views.kml(request,label,model,field_name=None,compress=False,using=DEFAULT_DB_ALIAS)
django.contrib.gis.sitemaps.views.kmz(request,label,model,field_name=None,using=DEFAULT_DB_ALIAS)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/sitemaps/kml.py----------------------------------------
A:django.contrib.gis.sitemaps.kml.self.locations->self._build_kml_sources(locations)
A:django.contrib.gis.sitemaps.kml.sources->django.apps.apps.get_models()
A:django.contrib.gis.sitemaps.kml.urls->django.contrib.sitemaps.Sitemap.get_urls(self, page=page, site=site, protocol=protocol)
django.contrib.gis.sitemaps.KMLSitemap(self,locations=None)
django.contrib.gis.sitemaps.KMLSitemap._build_kml_sources(self,sources)
django.contrib.gis.sitemaps.KMLSitemap.get_urls(self,page=1,site=None,protocol=None)
django.contrib.gis.sitemaps.KMLSitemap.items(self)
django.contrib.gis.sitemaps.KMLSitemap.location(self,obj)
django.contrib.gis.sitemaps.KMZSitemap(KMLSitemap)
django.contrib.gis.sitemaps.kml.KMLSitemap(self,locations=None)
django.contrib.gis.sitemaps.kml.KMLSitemap.__init__(self,locations=None)
django.contrib.gis.sitemaps.kml.KMLSitemap._build_kml_sources(self,sources)
django.contrib.gis.sitemaps.kml.KMLSitemap.get_urls(self,page=1,site=None,protocol=None)
django.contrib.gis.sitemaps.kml.KMLSitemap.items(self)
django.contrib.gis.sitemaps.kml.KMLSitemap.location(self,obj)
django.contrib.gis.sitemaps.kml.KMZSitemap(KMLSitemap)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/sitemaps/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/datasource.py----------------------------------------
A:django.contrib.gis.gdal.datasource.ds_driver->django.contrib.gis.gdal.driver.Driver.ptr_type()
A:django.contrib.gis.gdal.datasource.ds->django.contrib.gis.gdal.prototypes.ds.open_ds(force_bytes(ds_input), self._write, byref(ds_driver))
A:django.contrib.gis.gdal.datasource.self.driver->Driver(ds_driver)
A:django.contrib.gis.gdal.datasource.layer->django.contrib.gis.gdal.prototypes.ds.get_layer(self._ptr, index)
A:django.contrib.gis.gdal.datasource.name->django.contrib.gis.gdal.prototypes.ds.get_ds_name(self._ptr)
django.contrib.gis.gdal.DataSource(self,ds_input,ds_driver=False,write=False,encoding='utf-8')
django.contrib.gis.gdal.DataSource.__getitem__(self,index)
django.contrib.gis.gdal.DataSource.__len__(self)
django.contrib.gis.gdal.DataSource.__str__(self)
django.contrib.gis.gdal.DataSource.layer_count(self)
django.contrib.gis.gdal.DataSource.name(self)
django.contrib.gis.gdal.datasource.DataSource(self,ds_input,ds_driver=False,write=False,encoding='utf-8')
django.contrib.gis.gdal.datasource.DataSource.__getitem__(self,index)
django.contrib.gis.gdal.datasource.DataSource.__init__(self,ds_input,ds_driver=False,write=False,encoding='utf-8')
django.contrib.gis.gdal.datasource.DataSource.__len__(self)
django.contrib.gis.gdal.datasource.DataSource.__str__(self)
django.contrib.gis.gdal.datasource.DataSource.layer_count(self)
django.contrib.gis.gdal.datasource.DataSource.name(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/driver.py----------------------------------------
A:django.contrib.gis.gdal.driver.driver->iface.get_driver(dr_input)
django.contrib.gis.gdal.Driver(self,dr_input)
django.contrib.gis.gdal.Driver.__str__(self)
django.contrib.gis.gdal.Driver.driver_count(cls)
django.contrib.gis.gdal.Driver.ensure_registered(cls)
django.contrib.gis.gdal.Driver.name(self)
django.contrib.gis.gdal.driver.Driver(self,dr_input)
django.contrib.gis.gdal.driver.Driver.__init__(self,dr_input)
django.contrib.gis.gdal.driver.Driver.__str__(self)
django.contrib.gis.gdal.driver.Driver.driver_count(cls)
django.contrib.gis.gdal.driver.Driver.ensure_registered(cls)
django.contrib.gis.gdal.driver.Driver.name(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/envelope.py----------------------------------------
A:django.contrib.gis.gdal.envelope.self._envelope->OGREnvelope()
django.contrib.gis.gdal.Envelope(self,*args)
django.contrib.gis.gdal.Envelope.__eq__(self,other)
django.contrib.gis.gdal.Envelope.__str__(self)
django.contrib.gis.gdal.Envelope._from_sequence(self,seq)
django.contrib.gis.gdal.Envelope.expand_to_include(self,*args)
django.contrib.gis.gdal.Envelope.ll(self)
django.contrib.gis.gdal.Envelope.max_x(self)
django.contrib.gis.gdal.Envelope.max_y(self)
django.contrib.gis.gdal.Envelope.min_x(self)
django.contrib.gis.gdal.Envelope.min_y(self)
django.contrib.gis.gdal.Envelope.tuple(self)
django.contrib.gis.gdal.Envelope.ur(self)
django.contrib.gis.gdal.Envelope.wkt(self)
django.contrib.gis.gdal.envelope.Envelope(self,*args)
django.contrib.gis.gdal.envelope.Envelope.__eq__(self,other)
django.contrib.gis.gdal.envelope.Envelope.__init__(self,*args)
django.contrib.gis.gdal.envelope.Envelope.__str__(self)
django.contrib.gis.gdal.envelope.Envelope._from_sequence(self,seq)
django.contrib.gis.gdal.envelope.Envelope.expand_to_include(self,*args)
django.contrib.gis.gdal.envelope.Envelope.ll(self)
django.contrib.gis.gdal.envelope.Envelope.max_x(self)
django.contrib.gis.gdal.envelope.Envelope.max_y(self)
django.contrib.gis.gdal.envelope.Envelope.min_x(self)
django.contrib.gis.gdal.envelope.Envelope.min_y(self)
django.contrib.gis.gdal.envelope.Envelope.tuple(self)
django.contrib.gis.gdal.envelope.Envelope.ur(self)
django.contrib.gis.gdal.envelope.Envelope.wkt(self)
django.contrib.gis.gdal.envelope.OGREnvelope(Structure)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/libgdal.py----------------------------------------
A:django.contrib.gis.gdal.libgdal.logger->logging.getLogger('django.contrib.gis')
A:django.contrib.gis.gdal.libgdal.lib_path->find_library(lib_name)
A:django.contrib.gis.gdal.libgdal.lgdal->CDLL(lib_path)
A:django.contrib.gis.gdal.libgdal.lwingdal->WinDLL(lib_path)
A:django.contrib.gis.gdal.libgdal._version_info->std_call('GDALVersionInfo')
A:django.contrib.gis.gdal.libgdal.ver->gdal_version()
A:django.contrib.gis.gdal.libgdal.m->re.match(b'^(?P<major>\\d+)\\.(?P<minor>\\d+)(?:\\.(?P<subminor>\\d+))?', ver)
A:django.contrib.gis.gdal.libgdal.(major, minor, subminor)->re.match(b'^(?P<major>\\d+)\\.(?P<minor>\\d+)(?:\\.(?P<subminor>\\d+))?', ver).groups()
A:django.contrib.gis.gdal.libgdal.GDAL_VERSION->gdal_version_info()
A:django.contrib.gis.gdal.libgdal.CPLErrorHandler->CFUNCTYPE(None, c_int, c_int, c_char_p)
A:django.contrib.gis.gdal.libgdal.err_handler->CPLErrorHandler(err_handler)
A:django.contrib.gis.gdal.libgdal.func->std_call(name)
A:django.contrib.gis.gdal.libgdal.set_error_handler->function('CPLSetErrorHandler', [CPLErrorHandler], CPLErrorHandler)
django.contrib.gis.gdal.gdal_full_version()
django.contrib.gis.gdal.gdal_version()
django.contrib.gis.gdal.gdal_version_info()
django.contrib.gis.gdal.libgdal.err_handler(error_class,error_number,message)
django.contrib.gis.gdal.libgdal.function(name,args,restype)
django.contrib.gis.gdal.libgdal.gdal_full_version()
django.contrib.gis.gdal.libgdal.gdal_version()
django.contrib.gis.gdal.libgdal.gdal_version_info()
django.contrib.gis.gdal.libgdal.std_call(func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/srs.py----------------------------------------
A:django.contrib.gis.gdal.srs.self.ptr->django.contrib.gis.gdal.prototypes.srs.new_ct(source._ptr, target._ptr)
A:django.contrib.gis.gdal.srs.srid->int(srs_input)
A:django.contrib.gis.gdal.srs.buf->c_char_p(b'')
A:django.contrib.gis.gdal.srs.srs->django.contrib.gis.gdal.prototypes.srs.new_srs(buf)
A:django.contrib.gis.gdal.srs.(units, name)->django.contrib.gis.gdal.prototypes.srs.angular_units(self.ptr, byref(c_char_p()))
A:django.contrib.gis.gdal.srs.name->force_str(name)
django.contrib.gis.gdal.AxisOrder(IntEnum)
django.contrib.gis.gdal.CoordTransform(self,source,target)
django.contrib.gis.gdal.CoordTransform.__str__(self)
django.contrib.gis.gdal.SpatialReference(self,srs_input='',srs_type='user',axis_order=None)
django.contrib.gis.gdal.SpatialReference.__getitem__(self,target)
django.contrib.gis.gdal.SpatialReference.__str__(self)
django.contrib.gis.gdal.SpatialReference.angular_name(self)
django.contrib.gis.gdal.SpatialReference.angular_units(self)
django.contrib.gis.gdal.SpatialReference.attr_value(self,target,index=0)
django.contrib.gis.gdal.SpatialReference.auth_code(self,target)
django.contrib.gis.gdal.SpatialReference.auth_name(self,target)
django.contrib.gis.gdal.SpatialReference.clone(self)
django.contrib.gis.gdal.SpatialReference.ellipsoid(self)
django.contrib.gis.gdal.SpatialReference.from_esri(self)
django.contrib.gis.gdal.SpatialReference.geographic(self)
django.contrib.gis.gdal.SpatialReference.identify_epsg(self)
django.contrib.gis.gdal.SpatialReference.import_epsg(self,epsg)
django.contrib.gis.gdal.SpatialReference.import_proj(self,proj)
django.contrib.gis.gdal.SpatialReference.import_user_input(self,user_input)
django.contrib.gis.gdal.SpatialReference.import_wkt(self,wkt)
django.contrib.gis.gdal.SpatialReference.import_xml(self,xml)
django.contrib.gis.gdal.SpatialReference.inverse_flattening(self)
django.contrib.gis.gdal.SpatialReference.linear_name(self)
django.contrib.gis.gdal.SpatialReference.linear_units(self)
django.contrib.gis.gdal.SpatialReference.local(self)
django.contrib.gis.gdal.SpatialReference.name(self)
django.contrib.gis.gdal.SpatialReference.pretty_wkt(self,simplify=0)
django.contrib.gis.gdal.SpatialReference.proj(self)
django.contrib.gis.gdal.SpatialReference.proj4(self)
django.contrib.gis.gdal.SpatialReference.projected(self)
django.contrib.gis.gdal.SpatialReference.semi_major(self)
django.contrib.gis.gdal.SpatialReference.semi_minor(self)
django.contrib.gis.gdal.SpatialReference.srid(self)
django.contrib.gis.gdal.SpatialReference.to_esri(self)
django.contrib.gis.gdal.SpatialReference.units(self)
django.contrib.gis.gdal.SpatialReference.validate(self)
django.contrib.gis.gdal.SpatialReference.wkt(self)
django.contrib.gis.gdal.SpatialReference.xml(self,dialect='')
django.contrib.gis.gdal.srs.AxisOrder(IntEnum)
django.contrib.gis.gdal.srs.CoordTransform(self,source,target)
django.contrib.gis.gdal.srs.CoordTransform.__init__(self,source,target)
django.contrib.gis.gdal.srs.CoordTransform.__str__(self)
django.contrib.gis.gdal.srs.SpatialReference(self,srs_input='',srs_type='user',axis_order=None)
django.contrib.gis.gdal.srs.SpatialReference.__getitem__(self,target)
django.contrib.gis.gdal.srs.SpatialReference.__init__(self,srs_input='',srs_type='user',axis_order=None)
django.contrib.gis.gdal.srs.SpatialReference.__str__(self)
django.contrib.gis.gdal.srs.SpatialReference.angular_name(self)
django.contrib.gis.gdal.srs.SpatialReference.angular_units(self)
django.contrib.gis.gdal.srs.SpatialReference.attr_value(self,target,index=0)
django.contrib.gis.gdal.srs.SpatialReference.auth_code(self,target)
django.contrib.gis.gdal.srs.SpatialReference.auth_name(self,target)
django.contrib.gis.gdal.srs.SpatialReference.clone(self)
django.contrib.gis.gdal.srs.SpatialReference.ellipsoid(self)
django.contrib.gis.gdal.srs.SpatialReference.from_esri(self)
django.contrib.gis.gdal.srs.SpatialReference.geographic(self)
django.contrib.gis.gdal.srs.SpatialReference.identify_epsg(self)
django.contrib.gis.gdal.srs.SpatialReference.import_epsg(self,epsg)
django.contrib.gis.gdal.srs.SpatialReference.import_proj(self,proj)
django.contrib.gis.gdal.srs.SpatialReference.import_user_input(self,user_input)
django.contrib.gis.gdal.srs.SpatialReference.import_wkt(self,wkt)
django.contrib.gis.gdal.srs.SpatialReference.import_xml(self,xml)
django.contrib.gis.gdal.srs.SpatialReference.inverse_flattening(self)
django.contrib.gis.gdal.srs.SpatialReference.linear_name(self)
django.contrib.gis.gdal.srs.SpatialReference.linear_units(self)
django.contrib.gis.gdal.srs.SpatialReference.local(self)
django.contrib.gis.gdal.srs.SpatialReference.name(self)
django.contrib.gis.gdal.srs.SpatialReference.pretty_wkt(self,simplify=0)
django.contrib.gis.gdal.srs.SpatialReference.proj(self)
django.contrib.gis.gdal.srs.SpatialReference.proj4(self)
django.contrib.gis.gdal.srs.SpatialReference.projected(self)
django.contrib.gis.gdal.srs.SpatialReference.semi_major(self)
django.contrib.gis.gdal.srs.SpatialReference.semi_minor(self)
django.contrib.gis.gdal.srs.SpatialReference.srid(self)
django.contrib.gis.gdal.srs.SpatialReference.to_esri(self)
django.contrib.gis.gdal.srs.SpatialReference.units(self)
django.contrib.gis.gdal.srs.SpatialReference.validate(self)
django.contrib.gis.gdal.srs.SpatialReference.wkt(self)
django.contrib.gis.gdal.srs.SpatialReference.xml(self,dialect='')


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/layer.py----------------------------------------
A:django.contrib.gis.gdal.layer.self._ldefn->django.contrib.gis.gdal.prototypes.ds.get_layer_defn(self._ptr)
A:django.contrib.gis.gdal.layer.self._random_read->self.test_capability(b'RandomRead')
A:django.contrib.gis.gdal.layer.(start, stop, stride)->index.indices(self.num_feat)
A:django.contrib.gis.gdal.layer.env->OGREnvelope()
A:django.contrib.gis.gdal.layer.name->django.contrib.gis.gdal.prototypes.ds.get_fd_name(self._ldefn)
A:django.contrib.gis.gdal.layer.ptr->django.contrib.gis.gdal.prototypes.ds.get_layer_srs(self.ptr)
A:django.contrib.gis.gdal.layer.(xmin, ymin, xmax, ymax)->map(c_double, filter)
A:django.contrib.gis.gdal.layer.spatial_filter->property(_get_spatial_filter, _set_spatial_filter)
django.contrib.gis.gdal.layer.Layer(self,layer_ptr,ds)
django.contrib.gis.gdal.layer.Layer.__getitem__(self,index)
django.contrib.gis.gdal.layer.Layer.__init__(self,layer_ptr,ds)
django.contrib.gis.gdal.layer.Layer.__iter__(self)
django.contrib.gis.gdal.layer.Layer.__len__(self)
django.contrib.gis.gdal.layer.Layer.__str__(self)
django.contrib.gis.gdal.layer.Layer._get_spatial_filter(self)
django.contrib.gis.gdal.layer.Layer._make_feature(self,feat_id)
django.contrib.gis.gdal.layer.Layer._set_spatial_filter(self,filter)
django.contrib.gis.gdal.layer.Layer.extent(self)
django.contrib.gis.gdal.layer.Layer.field_precisions(self)
django.contrib.gis.gdal.layer.Layer.field_types(self)
django.contrib.gis.gdal.layer.Layer.field_widths(self)
django.contrib.gis.gdal.layer.Layer.fields(self)
django.contrib.gis.gdal.layer.Layer.geom_type(self)
django.contrib.gis.gdal.layer.Layer.get_fields(self,field_name)
django.contrib.gis.gdal.layer.Layer.get_geoms(self,geos=False)
django.contrib.gis.gdal.layer.Layer.name(self)
django.contrib.gis.gdal.layer.Layer.num_feat(self,force=1)
django.contrib.gis.gdal.layer.Layer.num_fields(self)
django.contrib.gis.gdal.layer.Layer.srs(self)
django.contrib.gis.gdal.layer.Layer.test_capability(self,capability)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/field.py----------------------------------------
A:django.contrib.gis.gdal.field.fld_ptr->django.contrib.gis.gdal.prototypes.ds.get_feat_field_defn(feat.ptr, index)
A:django.contrib.gis.gdal.field.string->django.contrib.gis.gdal.prototypes.ds.get_field_as_string(self._feat.ptr, self._index)
A:django.contrib.gis.gdal.field.status->django.contrib.gis.gdal.prototypes.ds.get_field_as_datetime(self._feat.ptr, self._index, byref(yy), byref(mm), byref(dd), byref(hh), byref(mn), byref(ss), byref(tz))
A:django.contrib.gis.gdal.field.name->django.contrib.gis.gdal.prototypes.ds.get_field_name(self.ptr)
A:django.contrib.gis.gdal.field.(yy, mm, dd, hh, mn, ss, tz)->self.as_datetime()
django.contrib.gis.gdal.field.Field(self,feat,index)
django.contrib.gis.gdal.field.Field.__init__(self,feat,index)
django.contrib.gis.gdal.field.Field.__str__(self)
django.contrib.gis.gdal.field.Field.as_datetime(self)
django.contrib.gis.gdal.field.Field.as_double(self)
django.contrib.gis.gdal.field.Field.as_int(self,is_64=False)
django.contrib.gis.gdal.field.Field.as_string(self)
django.contrib.gis.gdal.field.Field.is_set(self)
django.contrib.gis.gdal.field.Field.name(self)
django.contrib.gis.gdal.field.Field.precision(self)
django.contrib.gis.gdal.field.Field.type(self)
django.contrib.gis.gdal.field.Field.type_name(self)
django.contrib.gis.gdal.field.Field.value(self)
django.contrib.gis.gdal.field.Field.width(self)
django.contrib.gis.gdal.field.OFTBinary(Field)
django.contrib.gis.gdal.field.OFTDate(Field)
django.contrib.gis.gdal.field.OFTDate.value(self)
django.contrib.gis.gdal.field.OFTDateTime(Field)
django.contrib.gis.gdal.field.OFTDateTime.value(self)
django.contrib.gis.gdal.field.OFTInteger(Field)
django.contrib.gis.gdal.field.OFTInteger.type(self)
django.contrib.gis.gdal.field.OFTInteger.value(self)
django.contrib.gis.gdal.field.OFTInteger64(OFTInteger)
django.contrib.gis.gdal.field.OFTInteger64List(Field)
django.contrib.gis.gdal.field.OFTIntegerList(Field)
django.contrib.gis.gdal.field.OFTReal(Field)
django.contrib.gis.gdal.field.OFTReal.value(self)
django.contrib.gis.gdal.field.OFTRealList(Field)
django.contrib.gis.gdal.field.OFTString(Field)
django.contrib.gis.gdal.field.OFTStringList(Field)
django.contrib.gis.gdal.field.OFTTime(Field)
django.contrib.gis.gdal.field.OFTTime.value(self)
django.contrib.gis.gdal.field.OFTWideString(Field)
django.contrib.gis.gdal.field.OFTWideStringList(Field)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/feature.py----------------------------------------
A:django.contrib.gis.gdal.feature.i->django.contrib.gis.gdal.prototypes.ds.get_field_index(self.ptr, force_bytes(field_name))
A:django.contrib.gis.gdal.feature.name->django.contrib.gis.gdal.prototypes.ds.get_feat_name(self._layer._ldefn)
A:django.contrib.gis.gdal.feature.geom_ptr->django.contrib.gis.gdal.prototypes.ds.get_feat_geom_ref(self.ptr)
A:django.contrib.gis.gdal.feature.field_name->getattr(field, 'name', field)
django.contrib.gis.gdal.feature.Feature(self,feat,layer)
django.contrib.gis.gdal.feature.Feature.__eq__(self,other)
django.contrib.gis.gdal.feature.Feature.__getitem__(self,index)
django.contrib.gis.gdal.feature.Feature.__init__(self,feat,layer)
django.contrib.gis.gdal.feature.Feature.__len__(self)
django.contrib.gis.gdal.feature.Feature.__str__(self)
django.contrib.gis.gdal.feature.Feature.encoding(self)
django.contrib.gis.gdal.feature.Feature.fid(self)
django.contrib.gis.gdal.feature.Feature.fields(self)
django.contrib.gis.gdal.feature.Feature.geom(self)
django.contrib.gis.gdal.feature.Feature.geom_type(self)
django.contrib.gis.gdal.feature.Feature.get(self,field)
django.contrib.gis.gdal.feature.Feature.index(self,field_name)
django.contrib.gis.gdal.feature.Feature.layer_name(self)
django.contrib.gis.gdal.feature.Feature.num_fields(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/base.py----------------------------------------
django.contrib.gis.gdal.base.GDALBase(CPointerBase)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/geomtype.py----------------------------------------
A:django.contrib.gis.gdal.geomtype.type_input->type_input.lower().lower()
A:django.contrib.gis.gdal.geomtype.num->self._str_types.get(type_input)
A:django.contrib.gis.gdal.geomtype.s->self.name.replace('25D', '')
django.contrib.gis.gdal.OGRGeomType(self,type_input)
django.contrib.gis.gdal.OGRGeomType.__eq__(self,other)
django.contrib.gis.gdal.OGRGeomType.__str__(self)
django.contrib.gis.gdal.OGRGeomType.django(self)
django.contrib.gis.gdal.OGRGeomType.name(self)
django.contrib.gis.gdal.OGRGeomType.to_multi(self)
django.contrib.gis.gdal.geomtype.OGRGeomType(self,type_input)
django.contrib.gis.gdal.geomtype.OGRGeomType.__eq__(self,other)
django.contrib.gis.gdal.geomtype.OGRGeomType.__init__(self,type_input)
django.contrib.gis.gdal.geomtype.OGRGeomType.__str__(self)
django.contrib.gis.gdal.geomtype.OGRGeomType.django(self)
django.contrib.gis.gdal.geomtype.OGRGeomType.name(self)
django.contrib.gis.gdal.geomtype.OGRGeomType.to_multi(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/error.py----------------------------------------
django.contrib.gis.gdal.GDALException(Exception)
django.contrib.gis.gdal.SRSException(Exception)
django.contrib.gis.gdal.check_err(code,cpl=False)
django.contrib.gis.gdal.error.GDALException(Exception)
django.contrib.gis.gdal.error.SRSException(Exception)
django.contrib.gis.gdal.error.check_err(code,cpl=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/geometries.py----------------------------------------
A:django.contrib.gis.gdal.geometries.str_instance->isinstance(geom_input, str)
A:django.contrib.gis.gdal.geometries.geom_input->memoryview(bytes.fromhex(geom_input))
A:django.contrib.gis.gdal.geometries.wkt_m->django.contrib.gis.geometry.wkt_regex.match(geom_input)
A:django.contrib.gis.gdal.geometries.json_m->django.contrib.gis.geometry.json_regex.match(geom_input)
A:django.contrib.gis.gdal.geometries.srs->property(_get_srs, _set_srs)
A:django.contrib.gis.gdal.geometries.g->django.contrib.gis.gdal.prototypes.geom.create_geom(geom_input.num)
A:django.contrib.gis.gdal.geometries.ptr->django.contrib.gis.gdal.prototypes.geom.from_wkb(wkb, None, byref(c_void_p()), len(wkb))
A:django.contrib.gis.gdal.geometries.coord_dim->property(_get_coord_dim, _set_coord_dim)
A:django.contrib.gis.gdal.geometries.srs_ptr->django.contrib.gis.gdal.prototypes.geom.get_geom_srs(self.ptr)
A:django.contrib.gis.gdal.geometries.sr->SpatialReference(coord_trans)
A:django.contrib.gis.gdal.geometries.srid->property(_get_srid, _set_srid)
A:django.contrib.gis.gdal.geometries.buf->(c_ubyte * sz)()
A:django.contrib.gis.gdal.geometries.klone->self.clone()
A:django.contrib.gis.gdal.geometries.p->OGRGeometry(OGRGeomType('Point'))
A:django.contrib.gis.gdal.geometries.tmp->OGRGeometry(geom)
django.contrib.gis.gdal.OGRGeometry(self,geom_input,srs=None)
django.contrib.gis.gdal.OGRGeometry.__and__(self,other)
django.contrib.gis.gdal.OGRGeometry.__eq__(self,other)
django.contrib.gis.gdal.OGRGeometry.__getstate__(self)
django.contrib.gis.gdal.OGRGeometry.__or__(self,other)
django.contrib.gis.gdal.OGRGeometry.__setstate__(self,state)
django.contrib.gis.gdal.OGRGeometry.__str__(self)
django.contrib.gis.gdal.OGRGeometry.__sub__(self,other)
django.contrib.gis.gdal.OGRGeometry.__xor__(self,other)
django.contrib.gis.gdal.OGRGeometry._from_json(geom_input)
django.contrib.gis.gdal.OGRGeometry._from_wkb(cls,geom_input)
django.contrib.gis.gdal.OGRGeometry._geomgen(self,gen_func,other=None)
django.contrib.gis.gdal.OGRGeometry._geos_ptr(self)
django.contrib.gis.gdal.OGRGeometry._get_coord_dim(self)
django.contrib.gis.gdal.OGRGeometry._get_srid(self)
django.contrib.gis.gdal.OGRGeometry._get_srs(self)
django.contrib.gis.gdal.OGRGeometry._set_coord_dim(self,dim)
django.contrib.gis.gdal.OGRGeometry._set_srid(self,srid)
django.contrib.gis.gdal.OGRGeometry._set_srs(self,srs)
django.contrib.gis.gdal.OGRGeometry._topology(self,func,other)
django.contrib.gis.gdal.OGRGeometry.area(self)
django.contrib.gis.gdal.OGRGeometry.boundary(self)
django.contrib.gis.gdal.OGRGeometry.clone(self)
django.contrib.gis.gdal.OGRGeometry.close_rings(self)
django.contrib.gis.gdal.OGRGeometry.contains(self,other)
django.contrib.gis.gdal.OGRGeometry.convex_hull(self)
django.contrib.gis.gdal.OGRGeometry.crosses(self,other)
django.contrib.gis.gdal.OGRGeometry.difference(self,other)
django.contrib.gis.gdal.OGRGeometry.dimension(self)
django.contrib.gis.gdal.OGRGeometry.disjoint(self,other)
django.contrib.gis.gdal.OGRGeometry.empty(self)
django.contrib.gis.gdal.OGRGeometry.envelope(self)
django.contrib.gis.gdal.OGRGeometry.equals(self,other)
django.contrib.gis.gdal.OGRGeometry.ewkt(self)
django.contrib.gis.gdal.OGRGeometry.extent(self)
django.contrib.gis.gdal.OGRGeometry.from_bbox(cls,bbox)
django.contrib.gis.gdal.OGRGeometry.from_gml(cls,gml_string)
django.contrib.gis.gdal.OGRGeometry.from_json(geom_input)
django.contrib.gis.gdal.OGRGeometry.geom_count(self)
django.contrib.gis.gdal.OGRGeometry.geom_name(self)
django.contrib.gis.gdal.OGRGeometry.geom_type(self)
django.contrib.gis.gdal.OGRGeometry.geos(self)
django.contrib.gis.gdal.OGRGeometry.gml(self)
django.contrib.gis.gdal.OGRGeometry.hex(self)
django.contrib.gis.gdal.OGRGeometry.intersection(self,other)
django.contrib.gis.gdal.OGRGeometry.intersects(self,other)
django.contrib.gis.gdal.OGRGeometry.json(self)
django.contrib.gis.gdal.OGRGeometry.kml(self)
django.contrib.gis.gdal.OGRGeometry.num_coords(self)
django.contrib.gis.gdal.OGRGeometry.num_points(self)
django.contrib.gis.gdal.OGRGeometry.overlaps(self,other)
django.contrib.gis.gdal.OGRGeometry.point_count(self)
django.contrib.gis.gdal.OGRGeometry.sym_difference(self,other)
django.contrib.gis.gdal.OGRGeometry.touches(self,other)
django.contrib.gis.gdal.OGRGeometry.transform(self,coord_trans,clone=False)
django.contrib.gis.gdal.OGRGeometry.union(self,other)
django.contrib.gis.gdal.OGRGeometry.within(self,other)
django.contrib.gis.gdal.OGRGeometry.wkb(self)
django.contrib.gis.gdal.OGRGeometry.wkb_size(self)
django.contrib.gis.gdal.OGRGeometry.wkt(self)
django.contrib.gis.gdal.geometries.GeometryCollection(OGRGeometry)
django.contrib.gis.gdal.geometries.GeometryCollection.__getitem__(self,index)
django.contrib.gis.gdal.geometries.GeometryCollection.__len__(self)
django.contrib.gis.gdal.geometries.GeometryCollection.add(self,geom)
django.contrib.gis.gdal.geometries.GeometryCollection.point_count(self)
django.contrib.gis.gdal.geometries.GeometryCollection.tuple(self)
django.contrib.gis.gdal.geometries.LineString(OGRGeometry)
django.contrib.gis.gdal.geometries.LineString.__getitem__(self,index)
django.contrib.gis.gdal.geometries.LineString.__len__(self)
django.contrib.gis.gdal.geometries.LineString._listarr(self,func)
django.contrib.gis.gdal.geometries.LineString.tuple(self)
django.contrib.gis.gdal.geometries.LineString.x(self)
django.contrib.gis.gdal.geometries.LineString.y(self)
django.contrib.gis.gdal.geometries.LineString.z(self)
django.contrib.gis.gdal.geometries.LinearRing(LineString)
django.contrib.gis.gdal.geometries.MultiLineString(GeometryCollection)
django.contrib.gis.gdal.geometries.MultiPoint(GeometryCollection)
django.contrib.gis.gdal.geometries.MultiPolygon(GeometryCollection)
django.contrib.gis.gdal.geometries.OGRGeometry(self,geom_input,srs=None)
django.contrib.gis.gdal.geometries.OGRGeometry.__and__(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.__eq__(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.__getstate__(self)
django.contrib.gis.gdal.geometries.OGRGeometry.__init__(self,geom_input,srs=None)
django.contrib.gis.gdal.geometries.OGRGeometry.__or__(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.__setstate__(self,state)
django.contrib.gis.gdal.geometries.OGRGeometry.__str__(self)
django.contrib.gis.gdal.geometries.OGRGeometry.__sub__(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.__xor__(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry._from_json(geom_input)
django.contrib.gis.gdal.geometries.OGRGeometry._from_wkb(cls,geom_input)
django.contrib.gis.gdal.geometries.OGRGeometry._geomgen(self,gen_func,other=None)
django.contrib.gis.gdal.geometries.OGRGeometry._geos_ptr(self)
django.contrib.gis.gdal.geometries.OGRGeometry._get_coord_dim(self)
django.contrib.gis.gdal.geometries.OGRGeometry._get_srid(self)
django.contrib.gis.gdal.geometries.OGRGeometry._get_srs(self)
django.contrib.gis.gdal.geometries.OGRGeometry._set_coord_dim(self,dim)
django.contrib.gis.gdal.geometries.OGRGeometry._set_srid(self,srid)
django.contrib.gis.gdal.geometries.OGRGeometry._set_srs(self,srs)
django.contrib.gis.gdal.geometries.OGRGeometry._topology(self,func,other)
django.contrib.gis.gdal.geometries.OGRGeometry.area(self)
django.contrib.gis.gdal.geometries.OGRGeometry.boundary(self)
django.contrib.gis.gdal.geometries.OGRGeometry.clone(self)
django.contrib.gis.gdal.geometries.OGRGeometry.close_rings(self)
django.contrib.gis.gdal.geometries.OGRGeometry.contains(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.convex_hull(self)
django.contrib.gis.gdal.geometries.OGRGeometry.crosses(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.difference(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.dimension(self)
django.contrib.gis.gdal.geometries.OGRGeometry.disjoint(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.empty(self)
django.contrib.gis.gdal.geometries.OGRGeometry.envelope(self)
django.contrib.gis.gdal.geometries.OGRGeometry.equals(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.ewkt(self)
django.contrib.gis.gdal.geometries.OGRGeometry.extent(self)
django.contrib.gis.gdal.geometries.OGRGeometry.from_bbox(cls,bbox)
django.contrib.gis.gdal.geometries.OGRGeometry.from_gml(cls,gml_string)
django.contrib.gis.gdal.geometries.OGRGeometry.from_json(geom_input)
django.contrib.gis.gdal.geometries.OGRGeometry.geom_count(self)
django.contrib.gis.gdal.geometries.OGRGeometry.geom_name(self)
django.contrib.gis.gdal.geometries.OGRGeometry.geom_type(self)
django.contrib.gis.gdal.geometries.OGRGeometry.geos(self)
django.contrib.gis.gdal.geometries.OGRGeometry.gml(self)
django.contrib.gis.gdal.geometries.OGRGeometry.hex(self)
django.contrib.gis.gdal.geometries.OGRGeometry.intersection(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.intersects(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.json(self)
django.contrib.gis.gdal.geometries.OGRGeometry.kml(self)
django.contrib.gis.gdal.geometries.OGRGeometry.num_coords(self)
django.contrib.gis.gdal.geometries.OGRGeometry.num_points(self)
django.contrib.gis.gdal.geometries.OGRGeometry.overlaps(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.point_count(self)
django.contrib.gis.gdal.geometries.OGRGeometry.sym_difference(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.touches(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.transform(self,coord_trans,clone=False)
django.contrib.gis.gdal.geometries.OGRGeometry.union(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.within(self,other)
django.contrib.gis.gdal.geometries.OGRGeometry.wkb(self)
django.contrib.gis.gdal.geometries.OGRGeometry.wkb_size(self)
django.contrib.gis.gdal.geometries.OGRGeometry.wkt(self)
django.contrib.gis.gdal.geometries.Point(OGRGeometry)
django.contrib.gis.gdal.geometries.Point._create_empty(cls)
django.contrib.gis.gdal.geometries.Point._geos_ptr(self)
django.contrib.gis.gdal.geometries.Point.tuple(self)
django.contrib.gis.gdal.geometries.Point.x(self)
django.contrib.gis.gdal.geometries.Point.y(self)
django.contrib.gis.gdal.geometries.Point.z(self)
django.contrib.gis.gdal.geometries.Polygon(OGRGeometry)
django.contrib.gis.gdal.geometries.Polygon.__getitem__(self,index)
django.contrib.gis.gdal.geometries.Polygon.__len__(self)
django.contrib.gis.gdal.geometries.Polygon.centroid(self)
django.contrib.gis.gdal.geometries.Polygon.point_count(self)
django.contrib.gis.gdal.geometries.Polygon.shell(self)
django.contrib.gis.gdal.geometries.Polygon.tuple(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/errcheck.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.errcheck.ptr->ptr_byref(cargs, offset)
A:django.contrib.gis.gdal.prototypes.errcheck.s->string_at(result)
A:django.contrib.gis.gdal.prototypes.errcheck.result->c_void_p(result)
A:django.contrib.gis.gdal.prototypes.errcheck.geom->ptr_byref(cargs, offset=offset)
django.contrib.gis.gdal.prototypes.errcheck.arg_byref(args,offset=-1)
django.contrib.gis.gdal.prototypes.errcheck.check_arg_errcode(result,func,cargs,cpl=False)
django.contrib.gis.gdal.prototypes.errcheck.check_const_string(result,func,cargs,offset=None,cpl=False)
django.contrib.gis.gdal.prototypes.errcheck.check_envelope(result,func,cargs,offset=-1)
django.contrib.gis.gdal.prototypes.errcheck.check_errcode(result,func,cargs,cpl=False)
django.contrib.gis.gdal.prototypes.errcheck.check_geom(result,func,cargs)
django.contrib.gis.gdal.prototypes.errcheck.check_geom_offset(result,func,cargs,offset=-1)
django.contrib.gis.gdal.prototypes.errcheck.check_pointer(result,func,cargs)
django.contrib.gis.gdal.prototypes.errcheck.check_srs(result,func,cargs)
django.contrib.gis.gdal.prototypes.errcheck.check_str_arg(result,func,cargs)
django.contrib.gis.gdal.prototypes.errcheck.check_string(result,func,cargs,offset=-1,str_result=False)
django.contrib.gis.gdal.prototypes.errcheck.ptr_byref(args,offset=-1)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/srs.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.srs.clone_srs->srs_output(std_call('OSRClone'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.new_srs->srs_output(std_call('OSRNewSpatialReference'), [c_char_p])
A:django.contrib.gis.gdal.prototypes.srs.release_srs->void_output(lgdal.OSRRelease, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.srs.destroy_srs->void_output(std_call('OSRDestroySpatialReference'), [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.srs.srs_validate->void_output(lgdal.OSRValidate, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.set_axis_strategy->void_output(lgdal.OSRSetAxisMappingStrategy, [c_void_p, c_int], errcheck=False)
A:django.contrib.gis.gdal.prototypes.srs.semi_major->srs_double(lgdal.OSRGetSemiMajor)
A:django.contrib.gis.gdal.prototypes.srs.semi_minor->srs_double(lgdal.OSRGetSemiMinor)
A:django.contrib.gis.gdal.prototypes.srs.invflattening->srs_double(lgdal.OSRGetInvFlattening)
A:django.contrib.gis.gdal.prototypes.srs.from_wkt->void_output(lgdal.OSRImportFromWkt, [c_void_p, POINTER(c_char_p)])
A:django.contrib.gis.gdal.prototypes.srs.from_proj->void_output(lgdal.OSRImportFromProj4, [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.srs.from_epsg->void_output(std_call('OSRImportFromEPSG'), [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.srs.from_xml->void_output(lgdal.OSRImportFromXML, [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.srs.from_user_input->void_output(std_call('OSRSetFromUserInput'), [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.srs.morph_to_esri->void_output(lgdal.OSRMorphToESRI, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.morph_from_esri->void_output(lgdal.OSRMorphFromESRI, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.identify_epsg->void_output(lgdal.OSRAutoIdentifyEPSG, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.linear_units->units_func(lgdal.OSRGetLinearUnits)
A:django.contrib.gis.gdal.prototypes.srs.angular_units->units_func(lgdal.OSRGetAngularUnits)
A:django.contrib.gis.gdal.prototypes.srs.to_wkt->string_output(std_call('OSRExportToWkt'), [c_void_p, POINTER(c_char_p)], decoding='utf-8')
A:django.contrib.gis.gdal.prototypes.srs.to_proj->string_output(std_call('OSRExportToProj4'), [c_void_p, POINTER(c_char_p)], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.srs.to_pretty_wkt->string_output(std_call('OSRExportToPrettyWkt'), [c_void_p, POINTER(c_char_p), c_int], offset=-2, decoding='utf-8')
A:django.contrib.gis.gdal.prototypes.srs.to_xml->string_output(lgdal.OSRExportToXML, [c_void_p, POINTER(c_char_p), c_char_p], offset=-2, decoding='utf-8')
A:django.contrib.gis.gdal.prototypes.srs.get_attr_value->const_string_output(std_call('OSRGetAttrValue'), [c_void_p, c_char_p, c_int], decoding='utf-8')
A:django.contrib.gis.gdal.prototypes.srs.get_auth_name->const_string_output(lgdal.OSRGetAuthorityName, [c_void_p, c_char_p], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.srs.get_auth_code->const_string_output(lgdal.OSRGetAuthorityCode, [c_void_p, c_char_p], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.srs.isgeographic->int_output(lgdal.OSRIsGeographic, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.islocal->int_output(lgdal.OSRIsLocal, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.isprojected->int_output(lgdal.OSRIsProjected, [c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.new_ct->srs_output(std_call('OCTNewCoordinateTransformation'), [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.srs.destroy_ct->void_output(std_call('OCTDestroyCoordinateTransformation'), [c_void_p], errcheck=False)
django.contrib.gis.gdal.prototypes.srs.srs_double(f)
django.contrib.gis.gdal.prototypes.srs.units_func(f)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/generation.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.generation.func.errcheck->partial(check_errcode, cpl=cpl)
A:django.contrib.gis.gdal.prototypes.generation.res->res.decode(decoding).decode(decoding)
A:django.contrib.gis.gdal.prototypes.generation.func.restype->POINTER(c_char_p)
django.contrib.gis.gdal.prototypes.generation.bool_output(func,argtypes,errcheck=None)
django.contrib.gis.gdal.prototypes.generation.chararray_output(func,argtypes,errcheck=True)
django.contrib.gis.gdal.prototypes.generation.const_string_output(func,argtypes,offset=None,decoding=None,cpl=False)
django.contrib.gis.gdal.prototypes.generation.double_output(func,argtypes,errcheck=False,strarg=False,cpl=False)
django.contrib.gis.gdal.prototypes.generation.gdal_char_p(c_char_p)
django.contrib.gis.gdal.prototypes.generation.geom_output(func,argtypes,offset=None)
django.contrib.gis.gdal.prototypes.generation.int64_output(func,argtypes)
django.contrib.gis.gdal.prototypes.generation.int_output(func,argtypes,errcheck=None)
django.contrib.gis.gdal.prototypes.generation.srs_output(func,argtypes)
django.contrib.gis.gdal.prototypes.generation.string_output(func,argtypes,offset=-1,str_result=False,decoding=None)
django.contrib.gis.gdal.prototypes.generation.void_output(func,argtypes,errcheck=True,cpl=False)
django.contrib.gis.gdal.prototypes.generation.voidptr_output(func,argtypes,errcheck=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/ds.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.ds.c_int_p->POINTER(c_int)
A:django.contrib.gis.gdal.prototypes.ds.register_all->void_output(lgdal.OGRRegisterAll, [], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.cleanup_all->void_output(lgdal.OGRCleanupAll, [], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.get_driver->voidptr_output(lgdal.OGRGetDriver, [c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_driver_by_name->voidptr_output(lgdal.OGRGetDriverByName, [c_char_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.get_driver_count->int_output(lgdal.OGRGetDriverCount, [])
A:django.contrib.gis.gdal.prototypes.ds.get_driver_name->const_string_output(lgdal.OGR_Dr_GetName, [c_void_p], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.ds.open_ds->voidptr_output(lgdal.OGROpen, [c_char_p, c_int, POINTER(c_void_p)])
A:django.contrib.gis.gdal.prototypes.ds.destroy_ds->void_output(lgdal.OGR_DS_Destroy, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.release_ds->void_output(lgdal.OGRReleaseDataSource, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_ds_name->const_string_output(lgdal.OGR_DS_GetName, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_layer->voidptr_output(lgdal.OGR_DS_GetLayer, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_layer_by_name->voidptr_output(lgdal.OGR_DS_GetLayerByName, [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.ds.get_layer_count->int_output(lgdal.OGR_DS_GetLayerCount, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_extent->void_output(lgdal.OGR_L_GetExtent, [c_void_p, POINTER(OGREnvelope), c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_feature->voidptr_output(lgdal.OGR_L_GetFeature, [c_void_p, c_long])
A:django.contrib.gis.gdal.prototypes.ds.get_feature_count->int_output(lgdal.OGR_L_GetFeatureCount, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_layer_defn->voidptr_output(lgdal.OGR_L_GetLayerDefn, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_layer_srs->srs_output(lgdal.OGR_L_GetSpatialRef, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_next_feature->voidptr_output(lgdal.OGR_L_GetNextFeature, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.reset_reading->void_output(lgdal.OGR_L_ResetReading, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.test_capability->int_output(lgdal.OGR_L_TestCapability, [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.ds.get_spatial_filter->geom_output(lgdal.OGR_L_GetSpatialFilter, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.set_spatial_filter->void_output(lgdal.OGR_L_SetSpatialFilter, [c_void_p, c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.set_spatial_filter_rect->void_output(lgdal.OGR_L_SetSpatialFilterRect, [c_void_p, c_double, c_double, c_double, c_double], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.get_fd_geom_type->int_output(lgdal.OGR_FD_GetGeomType, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_fd_name->const_string_output(lgdal.OGR_FD_GetName, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_feat_name->const_string_output(lgdal.OGR_FD_GetName, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_count->int_output(lgdal.OGR_FD_GetFieldCount, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_defn->voidptr_output(lgdal.OGR_FD_GetFieldDefn, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.clone_feature->voidptr_output(lgdal.OGR_F_Clone, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.destroy_feature->void_output(lgdal.OGR_F_Destroy, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.ds.feature_equal->int_output(lgdal.OGR_F_Equal, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_feat_geom_ref->geom_output(lgdal.OGR_F_GetGeometryRef, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_feat_field_count->int_output(lgdal.OGR_F_GetFieldCount, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_feat_field_defn->voidptr_output(lgdal.OGR_F_GetFieldDefnRef, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_fid->int_output(lgdal.OGR_F_GetFID, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_as_datetime->int_output(lgdal.OGR_F_GetFieldAsDateTime, [c_void_p, c_int, c_int_p, c_int_p, c_int_p, c_int_p, c_int_p, c_int_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_as_double->double_output(lgdal.OGR_F_GetFieldAsDouble, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_field_as_integer->int_output(lgdal.OGR_F_GetFieldAsInteger, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_field_as_integer64->int64_output(lgdal.OGR_F_GetFieldAsInteger64, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.is_field_set->bool_output(lgdal.OGR_F_IsFieldSet, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_field_as_string->const_string_output(lgdal.OGR_F_GetFieldAsString, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_field_index->int_output(lgdal.OGR_F_GetFieldIndex, [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_name->const_string_output(lgdal.OGR_Fld_GetNameRef, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_precision->int_output(lgdal.OGR_Fld_GetPrecision, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_type->int_output(lgdal.OGR_Fld_GetType, [c_void_p])
A:django.contrib.gis.gdal.prototypes.ds.get_field_type_name->const_string_output(lgdal.OGR_GetFieldTypeName, [c_int])
A:django.contrib.gis.gdal.prototypes.ds.get_field_width->int_output(lgdal.OGR_Fld_GetWidth, [c_void_p])


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/geom.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.geom.from_json->geom_output(lgdal.OGR_G_CreateGeometryFromJson, [c_char_p])
A:django.contrib.gis.gdal.prototypes.geom.to_json->string_output(lgdal.OGR_G_ExportToJson, [c_void_p], str_result=True, decoding='ascii')
A:django.contrib.gis.gdal.prototypes.geom.to_kml->string_output(lgdal.OGR_G_ExportToKML, [c_void_p, c_char_p], str_result=True, decoding='ascii')
A:django.contrib.gis.gdal.prototypes.geom.getx->pnt_func(lgdal.OGR_G_GetX)
A:django.contrib.gis.gdal.prototypes.geom.gety->pnt_func(lgdal.OGR_G_GetY)
A:django.contrib.gis.gdal.prototypes.geom.getz->pnt_func(lgdal.OGR_G_GetZ)
A:django.contrib.gis.gdal.prototypes.geom.from_wkb->geom_output(lgdal.OGR_G_CreateFromWkb, [c_char_p, c_void_p, POINTER(c_void_p), c_int], offset=-2)
A:django.contrib.gis.gdal.prototypes.geom.from_wkt->geom_output(lgdal.OGR_G_CreateFromWkt, [POINTER(c_char_p), c_void_p, POINTER(c_void_p)], offset=-1)
A:django.contrib.gis.gdal.prototypes.geom.from_gml->geom_output(lgdal.OGR_G_CreateFromGML, [c_char_p])
A:django.contrib.gis.gdal.prototypes.geom.create_geom->geom_output(lgdal.OGR_G_CreateGeometry, [c_int])
A:django.contrib.gis.gdal.prototypes.geom.clone_geom->geom_output(lgdal.OGR_G_Clone, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_geom_ref->geom_output(lgdal.OGR_G_GetGeometryRef, [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.geom.get_boundary->geom_output(lgdal.OGR_G_GetBoundary, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_convex_hull->geom_output(lgdal.OGR_G_ConvexHull, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_diff->geom_output(lgdal.OGR_G_Difference, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_intersection->geom_output(lgdal.OGR_G_Intersection, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_sym_diff->geom_output(lgdal.OGR_G_SymmetricDifference, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_union->geom_output(lgdal.OGR_G_Union, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.add_geom->void_output(lgdal.OGR_G_AddGeometry, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.import_wkt->void_output(lgdal.OGR_G_ImportFromWkt, [c_void_p, POINTER(c_char_p)])
A:django.contrib.gis.gdal.prototypes.geom.destroy_geom->void_output(lgdal.OGR_G_DestroyGeometry, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.geom.to_wkb->void_output(lgdal.OGR_G_ExportToWkb, None, errcheck=True)
A:django.contrib.gis.gdal.prototypes.geom.to_wkt->string_output(lgdal.OGR_G_ExportToWkt, [c_void_p, POINTER(c_char_p)], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.geom.to_gml->string_output(lgdal.OGR_G_ExportToGML, [c_void_p], str_result=True, decoding='ascii')
A:django.contrib.gis.gdal.prototypes.geom.get_wkbsize->int_output(lgdal.OGR_G_WkbSize, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.assign_srs->void_output(lgdal.OGR_G_AssignSpatialReference, [c_void_p, c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.geom.get_geom_srs->srs_output(lgdal.OGR_G_GetSpatialReference, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_area->double_output(lgdal.OGR_G_GetArea, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_centroid->void_output(lgdal.OGR_G_Centroid, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_dims->int_output(lgdal.OGR_G_GetDimension, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_coord_dim->int_output(lgdal.OGR_G_GetCoordinateDimension, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.set_coord_dim->void_output(lgdal.OGR_G_SetCoordinateDimension, [c_void_p, c_int], errcheck=False)
A:django.contrib.gis.gdal.prototypes.geom.is_empty->int_output(lgdal.OGR_G_IsEmpty, [c_void_p], errcheck=lambda result, func, cargs: bool(result))
A:django.contrib.gis.gdal.prototypes.geom.get_geom_count->int_output(lgdal.OGR_G_GetGeometryCount, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_geom_name->const_string_output(lgdal.OGR_G_GetGeometryName, [c_void_p], decoding='ascii')
A:django.contrib.gis.gdal.prototypes.geom.get_geom_type->int_output(lgdal.OGR_G_GetGeometryType, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_point_count->int_output(lgdal.OGR_G_GetPointCount, [c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_point->void_output(lgdal.OGR_G_GetPoint, [c_void_p, c_int, POINTER(c_double), POINTER(c_double), POINTER(c_double)], errcheck=False)
A:django.contrib.gis.gdal.prototypes.geom.geom_close_rings->void_output(lgdal.OGR_G_CloseRings, [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.geom.ogr_contains->topology_func(lgdal.OGR_G_Contains)
A:django.contrib.gis.gdal.prototypes.geom.ogr_crosses->topology_func(lgdal.OGR_G_Crosses)
A:django.contrib.gis.gdal.prototypes.geom.ogr_disjoint->topology_func(lgdal.OGR_G_Disjoint)
A:django.contrib.gis.gdal.prototypes.geom.ogr_equals->topology_func(lgdal.OGR_G_Equals)
A:django.contrib.gis.gdal.prototypes.geom.ogr_intersects->topology_func(lgdal.OGR_G_Intersects)
A:django.contrib.gis.gdal.prototypes.geom.ogr_overlaps->topology_func(lgdal.OGR_G_Overlaps)
A:django.contrib.gis.gdal.prototypes.geom.ogr_touches->topology_func(lgdal.OGR_G_Touches)
A:django.contrib.gis.gdal.prototypes.geom.ogr_within->topology_func(lgdal.OGR_G_Within)
A:django.contrib.gis.gdal.prototypes.geom.geom_transform->void_output(lgdal.OGR_G_Transform, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.geom_transform_to->void_output(lgdal.OGR_G_TransformTo, [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.geom.get_envelope->env_func(lgdal.OGR_G_GetEnvelope, [c_void_p, POINTER(OGREnvelope)])
django.contrib.gis.gdal.prototypes.geom.env_func(f,argtypes)
django.contrib.gis.gdal.prototypes.geom.pnt_func(f)
django.contrib.gis.gdal.prototypes.geom.topology_func(f)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/prototypes/raster.py----------------------------------------
A:django.contrib.gis.gdal.prototypes.raster.void_output->partial(void_output, cpl=True)
A:django.contrib.gis.gdal.prototypes.raster.const_string_output->partial(const_string_output, cpl=True)
A:django.contrib.gis.gdal.prototypes.raster.double_output->partial(double_output, cpl=True)
A:django.contrib.gis.gdal.prototypes.raster.register_all->void_output(std_call('GDALAllRegister'), [], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.get_driver->voidptr_output(std_call('GDALGetDriver'), [c_int])
A:django.contrib.gis.gdal.prototypes.raster.get_driver_by_name->voidptr_output(std_call('GDALGetDriverByName'), [c_char_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.get_driver_count->int_output(std_call('GDALGetDriverCount'), [])
A:django.contrib.gis.gdal.prototypes.raster.get_driver_description->const_string_output(std_call('GDALGetDescription'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.create_ds->voidptr_output(std_call('GDALCreate'), [c_void_p, c_char_p, c_int, c_int, c_int, c_int, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.open_ds->voidptr_output(std_call('GDALOpen'), [c_char_p, c_int])
A:django.contrib.gis.gdal.prototypes.raster.close_ds->void_output(std_call('GDALClose'), [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.flush_ds->int_output(std_call('GDALFlushCache'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.copy_ds->voidptr_output(std_call('GDALCreateCopy'), [c_void_p, c_char_p, c_void_p, c_int, POINTER(c_char_p), c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.add_band_ds->void_output(std_call('GDALAddBand'), [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_description->const_string_output(std_call('GDALGetDescription'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_driver->voidptr_output(std_call('GDALGetDatasetDriver'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_xsize->int_output(std_call('GDALGetRasterXSize'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_ysize->int_output(std_call('GDALGetRasterYSize'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_raster_count->int_output(std_call('GDALGetRasterCount'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_raster_band->voidptr_output(std_call('GDALGetRasterBand'), [c_void_p, c_int])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_projection_ref->const_string_output(std_call('GDALGetProjectionRef'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.set_ds_projection_ref->void_output(std_call('GDALSetProjection'), [c_void_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_geotransform->void_output(std_call('GDALGetGeoTransform'), [c_void_p, POINTER(c_double * 6)], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.set_ds_geotransform->void_output(std_call('GDALSetGeoTransform'), [c_void_p, POINTER(c_double * 6)])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_metadata->chararray_output(std_call('GDALGetMetadata'), [c_void_p, c_char_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.set_ds_metadata->void_output(std_call('GDALSetMetadata'), [c_void_p, POINTER(c_char_p), c_char_p])
A:django.contrib.gis.gdal.prototypes.raster.get_ds_metadata_domain_list->chararray_output(std_call('GDALGetMetadataDomainList'), [c_void_p], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.get_ds_metadata_item->const_string_output(std_call('GDALGetMetadataItem'), [c_void_p, c_char_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.raster.set_ds_metadata_item->const_string_output(std_call('GDALSetMetadataItem'), [c_void_p, c_char_p, c_char_p, c_char_p])
A:django.contrib.gis.gdal.prototypes.raster.free_dsl->void_output(std_call('CSLDestroy'), [POINTER(c_char_p)], errcheck=False)
A:django.contrib.gis.gdal.prototypes.raster.get_ds_info->const_string_output(std_call('GDALInfo'), [c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.band_io->void_output(std_call('GDALRasterIO'), [c_void_p, c_int, c_int, c_int, c_int, c_int, c_void_p, c_int, c_int, c_int, c_int, c_int])
A:django.contrib.gis.gdal.prototypes.raster.get_band_xsize->int_output(std_call('GDALGetRasterBandXSize'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_ysize->int_output(std_call('GDALGetRasterBandYSize'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_index->int_output(std_call('GDALGetBandNumber'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_description->const_string_output(std_call('GDALGetDescription'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_ds->voidptr_output(std_call('GDALGetBandDataset'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_datatype->int_output(std_call('GDALGetRasterDataType'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_color_interp->int_output(std_call('GDALGetRasterColorInterpretation'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_nodata_value->double_output(std_call('GDALGetRasterNoDataValue'), [c_void_p, POINTER(c_int)])
A:django.contrib.gis.gdal.prototypes.raster.set_band_nodata_value->void_output(std_call('GDALSetRasterNoDataValue'), [c_void_p, c_double])
A:django.contrib.gis.gdal.prototypes.raster.delete_band_nodata_value->void_output(std_call('GDALDeleteRasterNoDataValue'), [c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.get_band_statistics->void_output(std_call('GDALGetRasterStatistics'), [c_void_p, c_int, c_int, POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.compute_band_statistics->void_output(std_call('GDALComputeRasterStatistics'), [c_void_p, c_int, POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double), c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.reproject_image->void_output(std_call('GDALReprojectImage'), [c_void_p, c_char_p, c_void_p, c_char_p, c_int, c_double, c_double, c_void_p, c_void_p, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.auto_create_warped_vrt->voidptr_output(std_call('GDALAutoCreateWarpedVRT'), [c_void_p, c_char_p, c_char_p, c_int, c_double, c_void_p])
A:django.contrib.gis.gdal.prototypes.raster.create_vsi_file_from_mem_buffer->voidptr_output(std_call('VSIFileFromMemBuffer'), [c_char_p, c_void_p, c_int, c_int])
A:django.contrib.gis.gdal.prototypes.raster.get_mem_buffer_from_vsi_file->voidptr_output(std_call('VSIGetMemFileBuffer'), [c_char_p, POINTER(c_int), c_bool])
A:django.contrib.gis.gdal.prototypes.raster.unlink_vsi_file->int_output(std_call('VSIUnlink'), [c_char_p])


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/raster/band.py----------------------------------------
A:django.contrib.gis.gdal.raster.band.self._ptr->django.contrib.gis.gdal.prototypes.raster.get_ds_raster_band(source._ptr, index)
A:django.contrib.gis.gdal.raster.band.nodata_exists->c_int()
A:django.contrib.gis.gdal.raster.band.value->int(value)
A:django.contrib.gis.gdal.raster.band.dtype->django.contrib.gis.gdal.prototypes.raster.get_band_datatype(self._ptr)
A:django.contrib.gis.gdal.raster.band.color->django.contrib.gis.gdal.prototypes.raster.get_band_color_interp(self._ptr)
A:django.contrib.gis.gdal.raster.band.data_array->ctypes_array(*data)
django.contrib.gis.gdal.raster.band.BandList(self,source)
django.contrib.gis.gdal.raster.band.BandList.__getitem__(self,index)
django.contrib.gis.gdal.raster.band.BandList.__init__(self,source)
django.contrib.gis.gdal.raster.band.BandList.__iter__(self)
django.contrib.gis.gdal.raster.band.BandList.__len__(self)
django.contrib.gis.gdal.raster.band.GDALBand(self,source,index)
django.contrib.gis.gdal.raster.band.GDALBand.__init__(self,source,index)
django.contrib.gis.gdal.raster.band.GDALBand._flush(self)
django.contrib.gis.gdal.raster.band.GDALBand.color_interp(self,as_string=False)
django.contrib.gis.gdal.raster.band.GDALBand.data(self,data=None,offset=None,size=None,shape=None,as_memoryview=False)
django.contrib.gis.gdal.raster.band.GDALBand.datatype(self,as_string=False)
django.contrib.gis.gdal.raster.band.GDALBand.description(self)
django.contrib.gis.gdal.raster.band.GDALBand.height(self)
django.contrib.gis.gdal.raster.band.GDALBand.max(self)
django.contrib.gis.gdal.raster.band.GDALBand.mean(self)
django.contrib.gis.gdal.raster.band.GDALBand.min(self)
django.contrib.gis.gdal.raster.band.GDALBand.nodata_value(self)
django.contrib.gis.gdal.raster.band.GDALBand.nodata_value(self,value)
django.contrib.gis.gdal.raster.band.GDALBand.pixel_count(self)
django.contrib.gis.gdal.raster.band.GDALBand.statistics(self,refresh=False,approximate=False)
django.contrib.gis.gdal.raster.band.GDALBand.std(self)
django.contrib.gis.gdal.raster.band.GDALBand.width(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/raster/base.py----------------------------------------
A:django.contrib.gis.gdal.raster.base.meta_list->django.contrib.gis.gdal.prototypes.raster.get_ds_metadata_domain_list(self._ptr)
A:django.contrib.gis.gdal.raster.base.data->django.contrib.gis.gdal.prototypes.raster.get_ds_metadata(self._ptr, None if domain == 'DEFAULT' else domain.encode())
A:django.contrib.gis.gdal.raster.base.(key, val)->item.decode().split('=')
django.contrib.gis.gdal.raster.base.GDALRasterBase(GDALBase)
django.contrib.gis.gdal.raster.base.GDALRasterBase.metadata(self)
django.contrib.gis.gdal.raster.base.GDALRasterBase.metadata(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/raster/const.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/raster/source.py----------------------------------------
A:django.contrib.gis.gdal.raster.source.ds_input->json.loads(ds_input)
A:django.contrib.gis.gdal.raster.source.self._ptr->django.contrib.gis.gdal.prototypes.raster.create_ds(driver._ptr, force_bytes(ds_input.get('name', '')), ds_input['width'], ds_input['height'], ds_input.get('nr_of_bands', len(ds_input.get('bands', []))), ds_input.get('datatype', 6), byref(papsz_options))
A:django.contrib.gis.gdal.raster.source.size->sys.getsizeof(ds_input)
A:django.contrib.gis.gdal.raster.source.self._ds_input->c_buffer(ds_input)
A:django.contrib.gis.gdal.raster.source.vsi_path->os.path.join(VSI_FILESYSTEM_BASE_PATH, str(uuid.uuid4()))
A:django.contrib.gis.gdal.raster.source.driver->Driver(ds_input.get('driver', 'MEM'))
A:django.contrib.gis.gdal.raster.source.option->'{}={}'.format(key, val)
A:django.contrib.gis.gdal.raster.source.papsz_options->(c_char_p * len(papsz_options))(*papsz_options)
A:django.contrib.gis.gdal.raster.source.self.srs->json.loads(ds_input).get('srid')
A:django.contrib.gis.gdal.raster.source.out_length->c_int()
A:django.contrib.gis.gdal.raster.source.dat->django.contrib.gis.gdal.prototypes.raster.get_mem_buffer_from_vsi_file(force_bytes(self.name), byref(out_length), VSI_DELETE_BUFFER_ON_READ)
A:django.contrib.gis.gdal.raster.source.ds_driver->django.contrib.gis.gdal.prototypes.raster.get_ds_driver(self._ptr)
A:django.contrib.gis.gdal.raster.source.wkt->django.contrib.gis.gdal.prototypes.raster.get_ds_projection_ref(self._ptr)
A:django.contrib.gis.gdal.raster.source.srs->SpatialReference(value)
A:django.contrib.gis.gdal.raster.source.gtf->(c_double * 6)()
A:django.contrib.gis.gdal.raster.source.values->(c_double * 6)(*values)
A:django.contrib.gis.gdal.raster.source.xmin->min(xval, self.origin.x)
A:django.contrib.gis.gdal.raster.source.xmax->max(xval, self.origin.x)
A:django.contrib.gis.gdal.raster.source.ymin->min(yval, self.origin.y)
A:django.contrib.gis.gdal.raster.source.ymax->max(yval, self.origin.y)
A:django.contrib.gis.gdal.raster.source.ds_input['datatype']->self.bands[0].datatype()
A:django.contrib.gis.gdal.raster.source.target->GDALRaster(target)
A:django.contrib.gis.gdal.raster.source.clone_name->os.path.join(VSI_FILESYSTEM_BASE_PATH, str(uuid.uuid4()))
A:django.contrib.gis.gdal.raster.source.target_srs->SpatialReference(srs)
django.contrib.gis.gdal.GDALRaster(self,ds_input,write=False)
django.contrib.gis.gdal.GDALRaster.__del__(self)
django.contrib.gis.gdal.GDALRaster.__repr__(self)
django.contrib.gis.gdal.GDALRaster.__str__(self)
django.contrib.gis.gdal.GDALRaster._flush(self)
django.contrib.gis.gdal.GDALRaster.bands(self)
django.contrib.gis.gdal.GDALRaster.clone(self,name=None)
django.contrib.gis.gdal.GDALRaster.driver(self)
django.contrib.gis.gdal.GDALRaster.extent(self)
django.contrib.gis.gdal.GDALRaster.geotransform(self)
django.contrib.gis.gdal.GDALRaster.geotransform(self,values)
django.contrib.gis.gdal.GDALRaster.height(self)
django.contrib.gis.gdal.GDALRaster.info(self)
django.contrib.gis.gdal.GDALRaster.is_vsi_based(self)
django.contrib.gis.gdal.GDALRaster.name(self)
django.contrib.gis.gdal.GDALRaster.origin(self)
django.contrib.gis.gdal.GDALRaster.scale(self)
django.contrib.gis.gdal.GDALRaster.skew(self)
django.contrib.gis.gdal.GDALRaster.srid(self)
django.contrib.gis.gdal.GDALRaster.srid(self,value)
django.contrib.gis.gdal.GDALRaster.srs(self)
django.contrib.gis.gdal.GDALRaster.srs(self,value)
django.contrib.gis.gdal.GDALRaster.transform(self,srs,driver=None,name=None,resampling='NearestNeighbour',max_error=0.0)
django.contrib.gis.gdal.GDALRaster.vsi_buffer(self)
django.contrib.gis.gdal.GDALRaster.warp(self,ds_input,resampling='NearestNeighbour',max_error=0.0)
django.contrib.gis.gdal.GDALRaster.width(self)
django.contrib.gis.gdal.raster.source.GDALRaster(self,ds_input,write=False)
django.contrib.gis.gdal.raster.source.GDALRaster.__del__(self)
django.contrib.gis.gdal.raster.source.GDALRaster.__init__(self,ds_input,write=False)
django.contrib.gis.gdal.raster.source.GDALRaster.__repr__(self)
django.contrib.gis.gdal.raster.source.GDALRaster.__str__(self)
django.contrib.gis.gdal.raster.source.GDALRaster._flush(self)
django.contrib.gis.gdal.raster.source.GDALRaster.bands(self)
django.contrib.gis.gdal.raster.source.GDALRaster.clone(self,name=None)
django.contrib.gis.gdal.raster.source.GDALRaster.driver(self)
django.contrib.gis.gdal.raster.source.GDALRaster.extent(self)
django.contrib.gis.gdal.raster.source.GDALRaster.geotransform(self)
django.contrib.gis.gdal.raster.source.GDALRaster.geotransform(self,values)
django.contrib.gis.gdal.raster.source.GDALRaster.height(self)
django.contrib.gis.gdal.raster.source.GDALRaster.info(self)
django.contrib.gis.gdal.raster.source.GDALRaster.is_vsi_based(self)
django.contrib.gis.gdal.raster.source.GDALRaster.name(self)
django.contrib.gis.gdal.raster.source.GDALRaster.origin(self)
django.contrib.gis.gdal.raster.source.GDALRaster.scale(self)
django.contrib.gis.gdal.raster.source.GDALRaster.skew(self)
django.contrib.gis.gdal.raster.source.GDALRaster.srid(self)
django.contrib.gis.gdal.raster.source.GDALRaster.srid(self,value)
django.contrib.gis.gdal.raster.source.GDALRaster.srs(self)
django.contrib.gis.gdal.raster.source.GDALRaster.srs(self,value)
django.contrib.gis.gdal.raster.source.GDALRaster.transform(self,srs,driver=None,name=None,resampling='NearestNeighbour',max_error=0.0)
django.contrib.gis.gdal.raster.source.GDALRaster.vsi_buffer(self)
django.contrib.gis.gdal.raster.source.GDALRaster.warp(self,ds_input,resampling='NearestNeighbour',max_error=0.0)
django.contrib.gis.gdal.raster.source.GDALRaster.width(self)
django.contrib.gis.gdal.raster.source.TransformPoint(self,raster,prop)
django.contrib.gis.gdal.raster.source.TransformPoint.__init__(self,raster,prop)
django.contrib.gis.gdal.raster.source.TransformPoint.x(self)
django.contrib.gis.gdal.raster.source.TransformPoint.x(self,value)
django.contrib.gis.gdal.raster.source.TransformPoint.y(self)
django.contrib.gis.gdal.raster.source.TransformPoint.y(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/gdal/raster/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geoip2/resources.py----------------------------------------
django.contrib.gis.geoip2.resources.City(response)
django.contrib.gis.geoip2.resources.Country(response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geoip2/base.py----------------------------------------
A:django.contrib.gis.geoip2.base.cache_options->frozenset((MODE_AUTO, MODE_MMAP_EXT, MODE_MMAP, MODE_FILE, MODE_MEMORY))
A:django.contrib.gis.geoip2.base.path->to_path(path)
A:django.contrib.gis.geoip2.base.self._country->geoip2.database.Reader(str(country_db), mode=cache)
A:django.contrib.gis.geoip2.base.self._city->geoip2.database.Reader(str(city_db), mode=cache)
A:django.contrib.gis.geoip2.base.reader->geoip2.database.Reader(str(path), mode=cache)
A:django.contrib.gis.geoip2.base.meta->self._reader.metadata()
A:django.contrib.gis.geoip2.base.query->socket.gethostbyname(query)
A:django.contrib.gis.geoip2.base.enc_query->self._check_query(query, city_or_country=True)
A:django.contrib.gis.geoip2.base.cdict->self.city(query)
A:django.contrib.gis.geoip2.base.ll->self.lon_lat(query)
django.contrib.gis.geoip2.GeoIP2(self,path=None,cache=0,country=None,city=None)
django.contrib.gis.geoip2.GeoIP2.__del__(self)
django.contrib.gis.geoip2.GeoIP2.__repr__(self)
django.contrib.gis.geoip2.GeoIP2._check_query(self,query,country=False,city=False,city_or_country=False)
django.contrib.gis.geoip2.GeoIP2._country_or_city(self)
django.contrib.gis.geoip2.GeoIP2._reader(self)
django.contrib.gis.geoip2.GeoIP2.city(self,query)
django.contrib.gis.geoip2.GeoIP2.coords(self,query,ordering=('longitude','latitude'))
django.contrib.gis.geoip2.GeoIP2.country(self,query)
django.contrib.gis.geoip2.GeoIP2.country_code(self,query)
django.contrib.gis.geoip2.GeoIP2.country_name(self,query)
django.contrib.gis.geoip2.GeoIP2.geos(self,query)
django.contrib.gis.geoip2.GeoIP2.info(self)
django.contrib.gis.geoip2.GeoIP2.lat_lon(self,query)
django.contrib.gis.geoip2.GeoIP2.lon_lat(self,query)
django.contrib.gis.geoip2.GeoIP2.open(cls,full_path,cache)
django.contrib.gis.geoip2.GeoIP2Exception(Exception)
django.contrib.gis.geoip2.base.GeoIP2(self,path=None,cache=0,country=None,city=None)
django.contrib.gis.geoip2.base.GeoIP2.__del__(self)
django.contrib.gis.geoip2.base.GeoIP2.__init__(self,path=None,cache=0,country=None,city=None)
django.contrib.gis.geoip2.base.GeoIP2.__repr__(self)
django.contrib.gis.geoip2.base.GeoIP2._check_query(self,query,country=False,city=False,city_or_country=False)
django.contrib.gis.geoip2.base.GeoIP2._country_or_city(self)
django.contrib.gis.geoip2.base.GeoIP2._reader(self)
django.contrib.gis.geoip2.base.GeoIP2.city(self,query)
django.contrib.gis.geoip2.base.GeoIP2.coords(self,query,ordering=('longitude','latitude'))
django.contrib.gis.geoip2.base.GeoIP2.country(self,query)
django.contrib.gis.geoip2.base.GeoIP2.country_code(self,query)
django.contrib.gis.geoip2.base.GeoIP2.country_name(self,query)
django.contrib.gis.geoip2.base.GeoIP2.geos(self,query)
django.contrib.gis.geoip2.base.GeoIP2.info(self)
django.contrib.gis.geoip2.base.GeoIP2.lat_lon(self,query)
django.contrib.gis.geoip2.base.GeoIP2.lon_lat(self,query)
django.contrib.gis.geoip2.base.GeoIP2.open(cls,full_path,cache)
django.contrib.gis.geoip2.base.GeoIP2Exception(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/geoip2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/management/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/management/commands/inspectdb.py----------------------------------------
A:django.contrib.gis.management.commands.inspectdb.(field_type, field_params, field_notes)->super().get_field_type(connection, table_name, row)
A:django.contrib.gis.management.commands.inspectdb.(field_type, geo_params)->connection.introspection.get_geometry_type(table_name, row)
django.contrib.gis.management.commands.inspectdb.Command(InspectDBCommand)
django.contrib.gis.management.commands.inspectdb.Command.get_field_type(self,connection,table_name,row)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/management/commands/ogrinspect.py----------------------------------------
A:django.contrib.gis.management.commands.ogrinspect.ds->django.contrib.gis.gdal.DataSource(data_source)
A:django.contrib.gis.management.commands.ogrinspect.mapping_dict->mapping(ds, **kwargs)
django.contrib.gis.management.commands.ogrinspect.Command(BaseCommand)
django.contrib.gis.management.commands.ogrinspect.Command.add_arguments(self,parser)
django.contrib.gis.management.commands.ogrinspect.Command.handle(self,*args,**options)
django.contrib.gis.management.commands.ogrinspect.LayerOptionAction(self,parser,namespace,value,option_string=None)
django.contrib.gis.management.commands.ogrinspect.LayerOptionAction.__call__(self,parser,namespace,value,option_string=None)
django.contrib.gis.management.commands.ogrinspect.ListOptionAction(self,parser,namespace,value,option_string=None)
django.contrib.gis.management.commands.ogrinspect.ListOptionAction.__call__(self,parser,namespace,value,option_string=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/admin/options.py----------------------------------------
A:django.contrib.gis.admin.options.kwargs['widget']->self.get_map_widget(db_field)
A:django.contrib.gis.admin.options.collection_type->OGRGeomType(db_field.geom_type.replace('MULTI', ''))
django.contrib.gis.admin.GeoModelAdmin(ModelAdmin)
django.contrib.gis.admin.GeoModelAdmin.formfield_for_dbfield(self,db_field,request,**kwargs)
django.contrib.gis.admin.GeoModelAdmin.get_map_widget(self,db_field)
django.contrib.gis.admin.GeoModelAdmin.media(self)
django.contrib.gis.admin.OSMGeoAdmin(GeoModelAdmin)
django.contrib.gis.admin.options.GeoModelAdmin(ModelAdmin)
django.contrib.gis.admin.options.GeoModelAdmin.formfield_for_dbfield(self,db_field,request,**kwargs)
django.contrib.gis.admin.options.GeoModelAdmin.get_map_widget(self,db_field)
django.contrib.gis.admin.options.GeoModelAdmin.media(self)
django.contrib.gis.admin.options.OSMGeoAdmin(GeoModelAdmin)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/admin/widgets.py----------------------------------------
A:django.contrib.gis.admin.widgets.logger->logging.getLogger('django.contrib.gis')
A:django.contrib.gis.admin.widgets.value->ol_bounds(self.params[param_name])
A:django.contrib.gis.admin.widgets.self.params['map_options']->self.map_options()
A:django.contrib.gis.admin.widgets.js_safe_name->self.params['name'].replace('-', '_')
django.contrib.gis.admin.OpenLayersWidget(Textarea)
django.contrib.gis.admin.OpenLayersWidget.get_context(self,name,value,attrs)
django.contrib.gis.admin.OpenLayersWidget.map_options(self)
django.contrib.gis.admin.widgets.OpenLayersWidget(Textarea)
django.contrib.gis.admin.widgets.OpenLayersWidget.get_context(self,name,value,attrs)
django.contrib.gis.admin.widgets.OpenLayersWidget.map_options(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/admin/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/forms/widgets.py----------------------------------------
A:django.contrib.gis.forms.widgets.logger->logging.getLogger('django.contrib.gis')
A:django.contrib.gis.forms.widgets.self.attrs[key]->getattr(self, key)
A:django.contrib.gis.forms.widgets.context->super().get_context(name, value, attrs)
A:django.contrib.gis.forms.widgets.value->self.deserialize(value)
A:django.contrib.gis.forms.widgets.geom->super().deserialize(value)
django.contrib.gis.forms.BaseGeometryWidget(self,attrs=None)
django.contrib.gis.forms.BaseGeometryWidget.deserialize(self,value)
django.contrib.gis.forms.BaseGeometryWidget.get_context(self,name,value,attrs)
django.contrib.gis.forms.BaseGeometryWidget.serialize(self,value)
django.contrib.gis.forms.OSMWidget(self,attrs=None)
django.contrib.gis.forms.OpenLayersWidget(BaseGeometryWidget)
django.contrib.gis.forms.OpenLayersWidget.Media
django.contrib.gis.forms.OpenLayersWidget.deserialize(self,value)
django.contrib.gis.forms.OpenLayersWidget.serialize(self,value)
django.contrib.gis.forms.widgets.BaseGeometryWidget(self,attrs=None)
django.contrib.gis.forms.widgets.BaseGeometryWidget.__init__(self,attrs=None)
django.contrib.gis.forms.widgets.BaseGeometryWidget.deserialize(self,value)
django.contrib.gis.forms.widgets.BaseGeometryWidget.get_context(self,name,value,attrs)
django.contrib.gis.forms.widgets.BaseGeometryWidget.serialize(self,value)
django.contrib.gis.forms.widgets.OSMWidget(self,attrs=None)
django.contrib.gis.forms.widgets.OSMWidget.__init__(self,attrs=None)
django.contrib.gis.forms.widgets.OpenLayersWidget(BaseGeometryWidget)
django.contrib.gis.forms.widgets.OpenLayersWidget.Media
django.contrib.gis.forms.widgets.OpenLayersWidget.deserialize(self,value)
django.contrib.gis.forms.widgets.OpenLayersWidget.serialize(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/forms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/gis/forms/fields.py----------------------------------------
A:django.contrib.gis.forms.fields.value->GEOSGeometry(value)
A:django.contrib.gis.forms.fields.geom->super().clean(value)
A:django.contrib.gis.forms.fields.data->self.to_python(data)
A:django.contrib.gis.forms.fields.initial->self.to_python(initial)
django.contrib.gis.forms.GeometryCollectionField(GeometryField)
django.contrib.gis.forms.GeometryField(self,*,srid=None,geom_type=None,**kwargs)
django.contrib.gis.forms.GeometryField.clean(self,value)
django.contrib.gis.forms.GeometryField.has_changed(self,initial,data)
django.contrib.gis.forms.GeometryField.to_python(self,value)
django.contrib.gis.forms.LineStringField(GeometryField)
django.contrib.gis.forms.MultiLineStringField(GeometryField)
django.contrib.gis.forms.MultiPointField(GeometryField)
django.contrib.gis.forms.MultiPolygonField(GeometryField)
django.contrib.gis.forms.PointField(GeometryField)
django.contrib.gis.forms.PolygonField(GeometryField)
django.contrib.gis.forms.fields.GeometryCollectionField(GeometryField)
django.contrib.gis.forms.fields.GeometryField(self,*,srid=None,geom_type=None,**kwargs)
django.contrib.gis.forms.fields.GeometryField.__init__(self,*,srid=None,geom_type=None,**kwargs)
django.contrib.gis.forms.fields.GeometryField.clean(self,value)
django.contrib.gis.forms.fields.GeometryField.has_changed(self,initial,data)
django.contrib.gis.forms.fields.GeometryField.to_python(self,value)
django.contrib.gis.forms.fields.LineStringField(GeometryField)
django.contrib.gis.forms.fields.MultiLineStringField(GeometryField)
django.contrib.gis.forms.fields.MultiPointField(GeometryField)
django.contrib.gis.forms.fields.MultiPolygonField(GeometryField)
django.contrib.gis.forms.fields.PointField(GeometryField)
django.contrib.gis.forms.fields.PolygonField(GeometryField)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/apps.py----------------------------------------
A:django.contrib.sitemaps.apps.verbose_name->_('Site Maps')
django.contrib.sitemaps.apps.SiteMapsConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/views.py----------------------------------------
A:django.contrib.sitemaps.views.response->TemplateResponse(request, template_name, {'urlset': urls}, content_type=content_type)
A:django.contrib.sitemaps.views.req_site->get_current_site(request)
A:django.contrib.sitemaps.views.site->site()
A:django.contrib.sitemaps.views.sitemap_url->reverse(sitemap_url_name, kwargs={'section': section})
A:django.contrib.sitemaps.views.maps->sitemaps.values()
A:django.contrib.sitemaps.views.page->request.GET.get('p', 1)
A:django.contrib.sitemaps.views.site_lastmod->getattr(site, 'latest_lastmod', None)
A:django.contrib.sitemaps.views.response.headers['Last-Modified']->http_date(timegm(lastmod))
django.contrib.sitemaps.views.index(request,sitemaps,template_name='sitemap_index.xml',content_type='application/xml',sitemap_url_name='django.contrib.sitemaps.views.sitemap')
django.contrib.sitemaps.views.sitemap(request,sitemaps,section=None,template_name='sitemap.xml',content_type='application/xml')
django.contrib.sitemaps.views.x_robots_tag(func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/__init__.py----------------------------------------
A:django.contrib.sitemaps.__init__.sitemap_full_url->_get_sitemap_full_url(sitemap_url, sitemap_uses_https)
A:django.contrib.sitemaps.__init__.params->urlencode({'sitemap': sitemap_full_url})
A:django.contrib.sitemaps.__init__.sitemap_url->reverse('django.contrib.sitemaps.views.sitemap')
A:django.contrib.sitemaps.__init__.Site->django.apps.apps.get_model('sites.Site')
A:django.contrib.sitemaps.__init__.current_site->django.apps.apps.get_model('sites.Site').objects.get_current()
A:django.contrib.sitemaps.__init__.attr->getattr(self, name)
A:django.contrib.sitemaps.__init__.site->django.apps.apps.get_model('sites.Site').objects.get_current()
A:django.contrib.sitemaps.__init__.protocol->self.get_protocol(protocol)
A:django.contrib.sitemaps.__init__.domain->self.get_domain(site)
A:django.contrib.sitemaps.__init__.paginator_page->self.paginator.page(page)
A:django.contrib.sitemaps.__init__.priority->self._get('priority', item)
A:django.contrib.sitemaps.__init__.lastmod->self._get('lastmod', item)
A:django.contrib.sitemaps.__init__.loc->loc.replace(f'/{lang_code}/', '/', 1).replace(f'/{lang_code}/', '/', 1)
A:django.contrib.sitemaps.__init__.self.date_field->info_dict.get('date_field')
django.contrib.sitemaps.__init__.GenericSitemap(self,info_dict,priority=None,changefreq=None,protocol=None)
django.contrib.sitemaps.__init__.GenericSitemap.__init__(self,info_dict,priority=None,changefreq=None,protocol=None)
django.contrib.sitemaps.__init__.GenericSitemap.items(self)
django.contrib.sitemaps.__init__.GenericSitemap.lastmod(self,item)
django.contrib.sitemaps.__init__.Sitemap
django.contrib.sitemaps.__init__.Sitemap._get(self,name,item,default=None)
django.contrib.sitemaps.__init__.Sitemap._items(self)
django.contrib.sitemaps.__init__.Sitemap._languages(self)
django.contrib.sitemaps.__init__.Sitemap._location(self,item,force_lang_code=None)
django.contrib.sitemaps.__init__.Sitemap._urls(self,page,protocol,domain)
django.contrib.sitemaps.__init__.Sitemap.get_domain(self,site=None)
django.contrib.sitemaps.__init__.Sitemap.get_protocol(self,protocol=None)
django.contrib.sitemaps.__init__.Sitemap.get_urls(self,page=1,site=None,protocol=None)
django.contrib.sitemaps.__init__.Sitemap.items(self)
django.contrib.sitemaps.__init__.Sitemap.location(self,item)
django.contrib.sitemaps.__init__.Sitemap.paginator(self)
django.contrib.sitemaps.__init__.SitemapNotFound(Exception)
django.contrib.sitemaps.__init__._get_sitemap_full_url(sitemap_url,sitemap_uses_https=True)
django.contrib.sitemaps.__init__.ping_google(sitemap_url=None,ping_url=PING_URL,sitemap_uses_https=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/management/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sitemaps/management/commands/ping_google.py----------------------------------------
django.contrib.sitemaps.management.commands.ping_google.Command(BaseCommand)
django.contrib.sitemaps.management.commands.ping_google.Command.add_arguments(self,parser)
django.contrib.sitemaps.management.commands.ping_google.Command.handle(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/syndication/apps.py----------------------------------------
A:django.contrib.syndication.apps.verbose_name->_('Syndication')
django.contrib.syndication.apps.SyndicationConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/syndication/views.py----------------------------------------
A:django.contrib.syndication.views.url->iri_to_uri('%s://%s%s' % (protocol, domain, url))
A:django.contrib.syndication.views.obj->self.get_object(request, *args, **kwargs)
A:django.contrib.syndication.views.feedgen->self.get_feed(obj, request)
A:django.contrib.syndication.views.response->HttpResponse(content_type=feedgen.content_type)
A:django.contrib.syndication.views.response.headers['Last-Modified']->http_date(timegm(feedgen.latest_post_date().utctimetuple()))
A:django.contrib.syndication.views.enc_url->self._get_dynamic_attr('item_enclosure_url', item)
A:django.contrib.syndication.views.enc->django.utils.feedgenerator.Enclosure(url=str(enc_url), length=str(self._get_dynamic_attr('item_enclosure_length', item)), mime_type=str(self._get_dynamic_attr('item_enclosure_mime_type', item)))
A:django.contrib.syndication.views.attr->getattr(self, attname)
A:django.contrib.syndication.views.current_site->get_current_site(request)
A:django.contrib.syndication.views.link->add_domain(current_site.domain, self._get_dynamic_attr('item_link', item), request.is_secure())
A:django.contrib.syndication.views.feed->self.feed_type(title=self._get_dynamic_attr('title', obj), subtitle=self._get_dynamic_attr('subtitle', obj), link=link, description=self._get_dynamic_attr('description', obj), language=self.language or get_language(), feed_url=add_domain(current_site.domain, self._get_dynamic_attr('feed_url', obj) or request.path, request.is_secure()), author_name=self._get_dynamic_attr('author_name', obj), author_link=self._get_dynamic_attr('author_link', obj), author_email=self._get_dynamic_attr('author_email', obj), categories=self._get_dynamic_attr('categories', obj), feed_copyright=self._get_dynamic_attr('feed_copyright', obj), feed_guid=self._get_dynamic_attr('feed_guid', obj), ttl=self._get_dynamic_attr('ttl', obj), **self.feed_extra_kwargs(obj))
A:django.contrib.syndication.views.title_tmp->django.template.loader.get_template(self.title_template)
A:django.contrib.syndication.views.description_tmp->django.template.loader.get_template(self.description_template)
A:django.contrib.syndication.views.context->self.get_context_data(item=item, site=current_site, obj=obj, request=request)
A:django.contrib.syndication.views.title->self._get_dynamic_attr('item_title', item)
A:django.contrib.syndication.views.description->self._get_dynamic_attr('item_description', item)
A:django.contrib.syndication.views.enclosures->self._get_dynamic_attr('item_enclosures', item)
A:django.contrib.syndication.views.author_name->self._get_dynamic_attr('item_author_name', item)
A:django.contrib.syndication.views.author_email->self._get_dynamic_attr('item_author_email', item)
A:django.contrib.syndication.views.author_link->self._get_dynamic_attr('item_author_link', item)
A:django.contrib.syndication.views.tz->get_default_timezone()
A:django.contrib.syndication.views.pubdate->make_aware(pubdate, tz)
A:django.contrib.syndication.views.updateddate->make_aware(updateddate, tz)
django.contrib.syndication.views.Feed(self,request,*args,**kwargs)
django.contrib.syndication.views.Feed.__call__(self,request,*args,**kwargs)
django.contrib.syndication.views.Feed._get_dynamic_attr(self,attname,obj,default=None)
django.contrib.syndication.views.Feed.feed_extra_kwargs(self,obj)
django.contrib.syndication.views.Feed.get_context_data(self,**kwargs)
django.contrib.syndication.views.Feed.get_feed(self,obj,request)
django.contrib.syndication.views.Feed.get_object(self,request,*args,**kwargs)
django.contrib.syndication.views.Feed.item_description(self,item)
django.contrib.syndication.views.Feed.item_enclosures(self,item)
django.contrib.syndication.views.Feed.item_extra_kwargs(self,item)
django.contrib.syndication.views.Feed.item_link(self,item)
django.contrib.syndication.views.Feed.item_title(self,item)
django.contrib.syndication.views.FeedDoesNotExist(ObjectDoesNotExist)
django.contrib.syndication.views.add_domain(domain,url,secure=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/syndication/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/checks.py----------------------------------------
A:django.contrib.contenttypes.checks.models->itertools.chain.from_iterable((app_config.get_models() for app_config in app_configs))
django.contrib.contenttypes.checks.check_generic_foreign_keys(app_configs=None,**kwargs)
django.contrib.contenttypes.checks.check_model_name_lengths(app_configs=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/admin.py----------------------------------------
A:django.contrib.contenttypes.admin.fields->flatten_fieldsets(self.get_fieldsets(request, obj))
django.contrib.contenttypes.admin.GenericInlineModelAdmin(InlineModelAdmin)
django.contrib.contenttypes.admin.GenericInlineModelAdmin.get_formset(self,request,obj=None,**kwargs)
django.contrib.contenttypes.admin.GenericInlineModelAdminChecks(InlineModelAdminChecks)
django.contrib.contenttypes.admin.GenericInlineModelAdminChecks._check_exclude_of_parent_model(self,obj,parent_model)
django.contrib.contenttypes.admin.GenericInlineModelAdminChecks._check_relation(self,obj,parent_model)
django.contrib.contenttypes.admin.GenericStackedInline(GenericInlineModelAdmin)
django.contrib.contenttypes.admin.GenericTabularInline(GenericInlineModelAdmin)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/apps.py----------------------------------------
A:django.contrib.contenttypes.apps.verbose_name->_('Content Types')
django.contrib.contenttypes.apps.ContentTypesConfig(AppConfig)
django.contrib.contenttypes.apps.ContentTypesConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/views.py----------------------------------------
A:django.contrib.contenttypes.views.content_type->django.contrib.contenttypes.models.ContentType.objects.get(pk=content_type_id)
A:django.contrib.contenttypes.views.obj->django.contrib.contenttypes.models.ContentType.objects.get(pk=content_type_id).get_object_for_this_type(pk=object_id)
A:django.contrib.contenttypes.views.absurl->get_absolute_url()
A:django.contrib.contenttypes.views.Site->django.apps.apps.get_model('sites.Site')
A:django.contrib.contenttypes.views.site_qs->getattr(obj, field.name).all()
A:django.contrib.contenttypes.views.site->getattr(obj, field.name)
django.contrib.contenttypes.views.shortcut(request,content_type_id,object_id)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/models.py----------------------------------------
A:django.contrib.contenttypes.models.ct->self.get(pk=id)
A:django.contrib.contenttypes.models.opts->self._get_opts(model, for_concrete_models)
A:django.contrib.contenttypes.models.(ct, created)->self.get_or_create(app_label=opts.app_label, model=opts.model_name)
A:django.contrib.contenttypes.models.needed_app_labels->set()
A:django.contrib.contenttypes.models.needed_models->set()
A:django.contrib.contenttypes.models.needed_opts->defaultdict(list)
A:django.contrib.contenttypes.models.cts->self.filter(app_label__in=needed_app_labels, model__in=needed_models)
A:django.contrib.contenttypes.models.opts_models->defaultdict(list).pop(ct.model_class()._meta, [])
A:django.contrib.contenttypes.models.app_label->django.db.models.CharField(max_length=100)
A:django.contrib.contenttypes.models.model->self.model_class()
A:django.contrib.contenttypes.models.objects->ContentTypeManager()
A:django.contrib.contenttypes.models.verbose_name->_('content type')
A:django.contrib.contenttypes.models.verbose_name_plural->_('content types')
django.contrib.contenttypes.models.ContentType(models.Model)
django.contrib.contenttypes.models.ContentType.Meta
django.contrib.contenttypes.models.ContentType.__str__(self)
django.contrib.contenttypes.models.ContentType.app_labeled_name(self)
django.contrib.contenttypes.models.ContentType.get_all_objects_for_this_type(self,**kwargs)
django.contrib.contenttypes.models.ContentType.get_object_for_this_type(self,**kwargs)
django.contrib.contenttypes.models.ContentType.model_class(self)
django.contrib.contenttypes.models.ContentType.name(self)
django.contrib.contenttypes.models.ContentType.natural_key(self)
django.contrib.contenttypes.models.ContentTypeManager(self,*args,**kwargs)
django.contrib.contenttypes.models.ContentTypeManager.__init__(self,*args,**kwargs)
django.contrib.contenttypes.models.ContentTypeManager._add_to_cache(self,using,ct)
django.contrib.contenttypes.models.ContentTypeManager._get_from_cache(self,opts)
django.contrib.contenttypes.models.ContentTypeManager._get_opts(self,model,for_concrete_model)
django.contrib.contenttypes.models.ContentTypeManager.clear_cache(self)
django.contrib.contenttypes.models.ContentTypeManager.get_by_natural_key(self,app_label,model)
django.contrib.contenttypes.models.ContentTypeManager.get_for_id(self,id)
django.contrib.contenttypes.models.ContentTypeManager.get_for_model(self,model,for_concrete_model=True)
django.contrib.contenttypes.models.ContentTypeManager.get_for_models(self,*models,for_concrete_models=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/fields.py----------------------------------------
A:django.contrib.contenttypes.fields.field->self.remote_field.model._meta.get_field(self.content_type_field_name)
A:django.contrib.contenttypes.fields.fk_dict->defaultdict(set)
A:django.contrib.contenttypes.fields.ct_attname->self.model._meta.get_field(self.ct_field).get_attname()
A:django.contrib.contenttypes.fields.ct_id->getattr(instance, f.get_attname(), None)
A:django.contrib.contenttypes.fields.fk_val->getattr(instance, self.fk_field)
A:django.contrib.contenttypes.fields.ct->self.get_content_type(obj=value)
A:django.contrib.contenttypes.fields.model->self.get_content_type(id=ct_id, using=obj._state.db).model_class()
A:django.contrib.contenttypes.fields.f->self.model._meta.get_field(self.ct_field)
A:django.contrib.contenttypes.fields.pk_val->getattr(instance, self.fk_field)
A:django.contrib.contenttypes.fields.rel_obj->self.get_content_type(obj=value).get_object_for_this_type(pk=pk_val)
A:django.contrib.contenttypes.fields.kwargs['rel']->self.rel_class(self, to, related_query_name=related_query_name, limit_choices_to=limit_choices_to)
A:django.contrib.contenttypes.fields.object_id_field->opts.get_field(self.object_id_field_name)
A:django.contrib.contenttypes.fields.qs->getattr(obj, self.name).all()
A:django.contrib.contenttypes.fields.cond->where_class()
A:django.contrib.contenttypes.fields.lookup->self.remote_field.model._meta.get_field(self.content_type_field_name).get_lookup('exact')(field.get_col(remote_alias), contenttype_pk)
A:django.contrib.contenttypes.fields.self.get_content_type->functools.partial(ContentType.objects.db_manager(instance._state.db).get_for_model, for_concrete_model=rel.field.for_concrete_model)
A:django.contrib.contenttypes.fields.self.content_type->self.get_content_type(instance)
A:django.contrib.contenttypes.fields.manager->getattr(self.model, manager)
A:django.contrib.contenttypes.fields.manager_class->create_generic_related_manager(manager.__class__, rel)
A:django.contrib.contenttypes.fields.queryset->queryset.using(db).using(db)
A:django.contrib.contenttypes.fields.query->functools.reduce(operator.or_, content_type_queries)
A:django.contrib.contenttypes.fields.db->django.db.router.db_for_write(self.model, instance=self.instance)
A:django.contrib.contenttypes.fields.objs->tuple(objs)
A:django.contrib.contenttypes.fields.old_objs->set(self.using(db).all())
django.contrib.contenttypes.fields.GenericForeignKey(self,ct_field='content_type',fk_field='object_id',for_concrete_model=True)
django.contrib.contenttypes.fields.GenericForeignKey.__get__(self,instance,cls=None)
django.contrib.contenttypes.fields.GenericForeignKey.__init__(self,ct_field='content_type',fk_field='object_id',for_concrete_model=True)
django.contrib.contenttypes.fields.GenericForeignKey.__set__(self,instance,value)
django.contrib.contenttypes.fields.GenericForeignKey.__str__(self)
django.contrib.contenttypes.fields.GenericForeignKey._check_content_type_field(self)
django.contrib.contenttypes.fields.GenericForeignKey._check_field_name(self)
django.contrib.contenttypes.fields.GenericForeignKey._check_object_id_field(self)
django.contrib.contenttypes.fields.GenericForeignKey.check(self,**kwargs)
django.contrib.contenttypes.fields.GenericForeignKey.contribute_to_class(self,cls,name,**kwargs)
django.contrib.contenttypes.fields.GenericForeignKey.get_cache_name(self)
django.contrib.contenttypes.fields.GenericForeignKey.get_content_type(self,obj=None,id=None,using=None)
django.contrib.contenttypes.fields.GenericForeignKey.get_filter_kwargs_for_object(self,obj)
django.contrib.contenttypes.fields.GenericForeignKey.get_forward_related_filter(self,obj)
django.contrib.contenttypes.fields.GenericForeignKey.get_prefetch_queryset(self,instances,queryset=None)
django.contrib.contenttypes.fields.GenericRel(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None)
django.contrib.contenttypes.fields.GenericRel.__init__(self,field,to,related_name=None,related_query_name=None,limit_choices_to=None)
django.contrib.contenttypes.fields.GenericRelation(self,to,object_id_field='object_id',content_type_field='content_type',for_concrete_model=True,related_query_name=None,limit_choices_to=None,**kwargs)
django.contrib.contenttypes.fields.GenericRelation.__init__(self,to,object_id_field='object_id',content_type_field='content_type',for_concrete_model=True,related_query_name=None,limit_choices_to=None,**kwargs)
django.contrib.contenttypes.fields.GenericRelation._check_generic_foreign_key_existence(self)
django.contrib.contenttypes.fields.GenericRelation._get_path_info_with_parent(self,filtered_relation)
django.contrib.contenttypes.fields.GenericRelation._is_matching_generic_foreign_key(self,field)
django.contrib.contenttypes.fields.GenericRelation.bulk_related_objects(self,objs,using=DEFAULT_DB_ALIAS)
django.contrib.contenttypes.fields.GenericRelation.check(self,**kwargs)
django.contrib.contenttypes.fields.GenericRelation.contribute_to_class(self,cls,name,**kwargs)
django.contrib.contenttypes.fields.GenericRelation.get_content_type(self)
django.contrib.contenttypes.fields.GenericRelation.get_extra_restriction(self,where_class,alias,remote_alias)
django.contrib.contenttypes.fields.GenericRelation.get_internal_type(self)
django.contrib.contenttypes.fields.GenericRelation.get_path_info(self,filtered_relation=None)
django.contrib.contenttypes.fields.GenericRelation.get_reverse_path_info(self,filtered_relation=None)
django.contrib.contenttypes.fields.GenericRelation.resolve_related_fields(self)
django.contrib.contenttypes.fields.GenericRelation.set_attributes_from_rel(self)
django.contrib.contenttypes.fields.GenericRelation.value_to_string(self,obj)
django.contrib.contenttypes.fields.ReverseGenericManyToOneDescriptor(ReverseManyToOneDescriptor)
django.contrib.contenttypes.fields.ReverseGenericManyToOneDescriptor.related_manager_cls(self)
django.contrib.contenttypes.fields.create_generic_related_manager(superclass,rel)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/forms.py----------------------------------------
A:django.contrib.contenttypes.forms.qs->queryset.filter(**{self.ct_field.name: ContentType.objects.get_for_model(self.instance, for_concrete_model=self.for_concrete_model), self.ct_fk_field.name: self.instance.pk})
A:django.contrib.contenttypes.forms.ct_field->opts.get_field(ct_field)
A:django.contrib.contenttypes.forms.fk_field->opts.get_field(fk_field)
A:django.contrib.contenttypes.forms.FormSet->modelformset_factory(model, form=form, formfield_callback=formfield_callback, formset=formset, extra=extra, can_delete=can_delete, can_order=can_order, fields=fields, exclude=exclude, max_num=max_num, validate_max=validate_max, min_num=min_num, validate_min=validate_min, absolute_max=absolute_max, can_delete_extra=can_delete_extra)
django.contrib.contenttypes.forms.BaseGenericInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.contrib.contenttypes.forms.BaseGenericInlineFormSet.__init__(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.contrib.contenttypes.forms.BaseGenericInlineFormSet.get_default_prefix(cls)
django.contrib.contenttypes.forms.BaseGenericInlineFormSet.initial_form_count(self)
django.contrib.contenttypes.forms.BaseGenericInlineFormSet.save_new(self,form,commit=True)
django.contrib.contenttypes.forms.generic_inlineformset_factory(model,form=ModelForm,formset=BaseGenericInlineFormSet,ct_field='content_type',fk_field='object_id',fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,validate_max=False,for_concrete_model=True,min_num=None,validate_min=False,absolute_max=None,can_delete_extra=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/migrations/0001_initial.py----------------------------------------
django.contrib.contenttypes.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/migrations/0002_remove_content_type_name.py----------------------------------------
A:django.contrib.contenttypes.migrations.0002_remove_content_type_name.ContentType->apps.get_model('contenttypes', 'ContentType')
django.contrib.contenttypes.migrations.0002_remove_content_type_name.Migration(migrations.Migration)
django.contrib.contenttypes.migrations.0002_remove_content_type_name.add_legacy_name(apps,schema_editor)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/management/__init__.py----------------------------------------
A:django.contrib.contenttypes.management.__init__.ContentType->apps.get_model('contenttypes', 'ContentType')
A:django.contrib.contenttypes.management.__init__.content_type->apps.get_model('contenttypes', 'ContentType').objects.db_manager(db).get_by_natural_key(self.app_label, old_model)
A:django.contrib.contenttypes.management.__init__.operation->RenameContentType(migration.app_label, operation.old_name_lower, operation.new_name_lower)
A:django.contrib.contenttypes.management.__init__.app_config->apps.get_app_config(app_label)
A:django.contrib.contenttypes.management.__init__.(content_types, app_models)->get_contenttypes_and_models(app_config, using, ContentType)
django.contrib.contenttypes.management.__init__.RenameContentType(self,app_label,old_model,new_model)
django.contrib.contenttypes.management.__init__.RenameContentType.__init__(self,app_label,old_model,new_model)
django.contrib.contenttypes.management.__init__.RenameContentType._rename(self,apps,schema_editor,old_model,new_model)
django.contrib.contenttypes.management.__init__.RenameContentType.rename_backward(self,apps,schema_editor)
django.contrib.contenttypes.management.__init__.RenameContentType.rename_forward(self,apps,schema_editor)
django.contrib.contenttypes.management.__init__.create_contenttypes(app_config,verbosity=2,interactive=True,using=DEFAULT_DB_ALIAS,apps=global_apps,**kwargs)
django.contrib.contenttypes.management.__init__.get_contenttypes_and_models(app_config,using,ContentType)
django.contrib.contenttypes.management.__init__.inject_rename_contenttypes_operations(plan=None,apps=global_apps,using=DEFAULT_DB_ALIAS,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/management/commands/remove_stale_contenttypes.py----------------------------------------
A:django.contrib.contenttypes.management.commands.remove_stale_contenttypes.apps_content_types->itertools.groupby(ContentType.objects.using(db).order_by('app_label', 'model'), lambda obj: obj.app_label)
A:django.contrib.contenttypes.management.commands.remove_stale_contenttypes.using->django.db.router.db_for_write(ContentType)
A:django.contrib.contenttypes.management.commands.remove_stale_contenttypes.collector->NoFastDeleteCollector(using=using)
A:django.contrib.contenttypes.management.commands.remove_stale_contenttypes.content_type_display->'\n'.join(ct_info)
A:django.contrib.contenttypes.management.commands.remove_stale_contenttypes.ok_to_delete->input("Type 'yes' to continue, or 'no' to cancel: ")
django.contrib.contenttypes.management.commands.remove_stale_contenttypes.Command(BaseCommand)
django.contrib.contenttypes.management.commands.remove_stale_contenttypes.Command.add_arguments(self,parser)
django.contrib.contenttypes.management.commands.remove_stale_contenttypes.Command.handle(self,**options)
django.contrib.contenttypes.management.commands.remove_stale_contenttypes.NoFastDeleteCollector(Collector)
django.contrib.contenttypes.management.commands.remove_stale_contenttypes.NoFastDeleteCollector.can_fast_delete(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/contenttypes/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/functions.py----------------------------------------
A:django.contrib.postgres.functions.output_field->DateTimeField()
django.contrib.postgres.functions.RandomUUID(Func)
django.contrib.postgres.functions.TransactionNow(Func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/serializers.py----------------------------------------
django.contrib.postgres.serializers.RangeSerializer(BaseSerializer)
django.contrib.postgres.serializers.RangeSerializer.serialize(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/lookups.py----------------------------------------
A:django.contrib.postgres.lookups.config->getattr(self.rhs, 'config', None)
A:django.contrib.postgres.lookups.self.lhs->SearchVector(self.lhs, config=config)
A:django.contrib.postgres.lookups.(lhs, lhs_params)->super().process_lhs(qn, connection)
django.contrib.postgres.lookups.ContainedBy(PostgresOperatorLookup)
django.contrib.postgres.lookups.DataContains(PostgresOperatorLookup)
django.contrib.postgres.lookups.HasAnyKeys(HasKeys)
django.contrib.postgres.lookups.HasKey(PostgresOperatorLookup)
django.contrib.postgres.lookups.HasKeys(PostgresOperatorLookup)
django.contrib.postgres.lookups.HasKeys.get_prep_lookup(self)
django.contrib.postgres.lookups.Overlap(PostgresOperatorLookup)
django.contrib.postgres.lookups.SearchLookup(SearchVectorExact)
django.contrib.postgres.lookups.SearchLookup.process_lhs(self,qn,connection)
django.contrib.postgres.lookups.TrigramSimilar(PostgresOperatorLookup)
django.contrib.postgres.lookups.Unaccent(Transform)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/validators.py----------------------------------------
A:django.contrib.postgres.validators.message->_('Ensure that this range is completely greater than or equal to %(limit_value)s.')
A:django.contrib.postgres.validators.self.keys->set(keys)
A:django.contrib.postgres.validators.keys->set(value)
django.contrib.postgres.validators.ArrayMaxLengthValidator(MaxLengthValidator)
django.contrib.postgres.validators.ArrayMinLengthValidator(MinLengthValidator)
django.contrib.postgres.validators.KeysValidator(self,keys,strict=False,messages=None)
django.contrib.postgres.validators.KeysValidator.__eq__(self,other)
django.contrib.postgres.validators.KeysValidator.__init__(self,keys,strict=False,messages=None)
django.contrib.postgres.validators.RangeMaxValueValidator(MaxValueValidator)
django.contrib.postgres.validators.RangeMaxValueValidator.compare(self,a,b)
django.contrib.postgres.validators.RangeMinValueValidator(MinValueValidator)
django.contrib.postgres.validators.RangeMinValueValidator.compare(self,a,b)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/indexes.py----------------------------------------
A:django.contrib.postgres.indexes.statement->super().create_sql(model, schema_editor, using=' USING %s' % self.suffix, **kwargs)
A:django.contrib.postgres.indexes.with_params->self.get_with_params()
A:django.contrib.postgres.indexes.(path, args, kwargs)->super().deconstruct()
django.contrib.postgres.indexes.BTreeIndex(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.BTreeIndex.__init__(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.BTreeIndex.deconstruct(self)
django.contrib.postgres.indexes.BTreeIndex.get_with_params(self)
django.contrib.postgres.indexes.BloomIndex(self,*expressions,length=None,columns=(),**kwargs)
django.contrib.postgres.indexes.BloomIndex.__init__(self,*expressions,length=None,columns=(),**kwargs)
django.contrib.postgres.indexes.BloomIndex.deconstruct(self)
django.contrib.postgres.indexes.BloomIndex.get_with_params(self)
django.contrib.postgres.indexes.BrinIndex(self,*expressions,autosummarize=None,pages_per_range=None,**kwargs)
django.contrib.postgres.indexes.BrinIndex.__init__(self,*expressions,autosummarize=None,pages_per_range=None,**kwargs)
django.contrib.postgres.indexes.BrinIndex.check_supported(self,schema_editor)
django.contrib.postgres.indexes.BrinIndex.deconstruct(self)
django.contrib.postgres.indexes.BrinIndex.get_with_params(self)
django.contrib.postgres.indexes.GinIndex(self,*expressions,fastupdate=None,gin_pending_list_limit=None,**kwargs)
django.contrib.postgres.indexes.GinIndex.__init__(self,*expressions,fastupdate=None,gin_pending_list_limit=None,**kwargs)
django.contrib.postgres.indexes.GinIndex.deconstruct(self)
django.contrib.postgres.indexes.GinIndex.get_with_params(self)
django.contrib.postgres.indexes.GistIndex(self,*expressions,buffering=None,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.GistIndex.__init__(self,*expressions,buffering=None,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.GistIndex.check_supported(self,schema_editor)
django.contrib.postgres.indexes.GistIndex.deconstruct(self)
django.contrib.postgres.indexes.GistIndex.get_with_params(self)
django.contrib.postgres.indexes.HashIndex(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.HashIndex.__init__(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.HashIndex.deconstruct(self)
django.contrib.postgres.indexes.HashIndex.get_with_params(self)
django.contrib.postgres.indexes.OpClass(self,expression,name)
django.contrib.postgres.indexes.OpClass.__init__(self,expression,name)
django.contrib.postgres.indexes.PostgresIndex(Index)
django.contrib.postgres.indexes.PostgresIndex.check_supported(self,schema_editor)
django.contrib.postgres.indexes.PostgresIndex.create_sql(self,model,schema_editor,using='',**kwargs)
django.contrib.postgres.indexes.PostgresIndex.get_with_params(self)
django.contrib.postgres.indexes.PostgresIndex.max_name_length(self)
django.contrib.postgres.indexes.SpGistIndex(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.SpGistIndex.__init__(self,*expressions,fillfactor=None,**kwargs)
django.contrib.postgres.indexes.SpGistIndex.deconstruct(self)
django.contrib.postgres.indexes.SpGistIndex.get_with_params(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/utils.py----------------------------------------
django.contrib.postgres.utils.prefix_validation_error(error,prefix,code,params)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/search.py----------------------------------------
A:django.contrib.postgres.search.config->SearchConfig.from_parameter(config)
A:django.contrib.postgres.search.self.rhs->SearchQuery(self.rhs, config=config)
A:django.contrib.postgres.search.(rhs, rhs_params)->self.process_rhs(qn, connection)
A:django.contrib.postgres.search.(lhs, lhs_params)->self.process_lhs(qn, connection)
A:django.contrib.postgres.search.(sql, params)->super().as_sql(compiler, connection, function=function, template=template, options=options_sql)
A:django.contrib.postgres.search.output_field->FloatField()
A:django.contrib.postgres.search.self.config->SearchConfig.from_parameter(config)
A:django.contrib.postgres.search.weight->Value(weight)
A:django.contrib.postgres.search.resolved->super().resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.contrib.postgres.search.resolved.config->self.config.resolve_expression(query, allow_joins, reuse, summarize, for_save)
A:django.contrib.postgres.search.clone->self.copy()
A:django.contrib.postgres.search.(config_sql, config_params)->compiler.compile(clone.config)
A:django.contrib.postgres.search.(weight_sql, extra_params)->compiler.compile(clone.weight)
A:django.contrib.postgres.search.sql->'setweight({}, {})'.format(sql, weight_sql)
A:django.contrib.postgres.search.self.function->self.SEARCH_TYPES.get(search_type)
A:django.contrib.postgres.search.value->Value(value)
A:django.contrib.postgres.search.result->super().__str__()
A:django.contrib.postgres.search.vector->SearchVector(vector)
A:django.contrib.postgres.search.query->SearchQuery(query)
A:django.contrib.postgres.search.weights->Value(weights)
A:django.contrib.postgres.search.normalization->Value(normalization)
A:django.contrib.postgres.search.string->Value(string)
django.contrib.postgres.search.CombinedSearchQuery(self,lhs,connector,rhs,config,output_field=None)
django.contrib.postgres.search.CombinedSearchQuery.__init__(self,lhs,connector,rhs,config,output_field=None)
django.contrib.postgres.search.CombinedSearchQuery.__str__(self)
django.contrib.postgres.search.CombinedSearchVector(self,lhs,connector,rhs,config,output_field=None)
django.contrib.postgres.search.CombinedSearchVector.__init__(self,lhs,connector,rhs,config,output_field=None)
django.contrib.postgres.search.SearchConfig(self,config)
django.contrib.postgres.search.SearchConfig.__init__(self,config)
django.contrib.postgres.search.SearchConfig.as_sql(self,compiler,connection)
django.contrib.postgres.search.SearchConfig.from_parameter(cls,config)
django.contrib.postgres.search.SearchConfig.get_source_expressions(self)
django.contrib.postgres.search.SearchConfig.set_source_expressions(self,exprs)
django.contrib.postgres.search.SearchHeadline(self,expression,query,*,config=None,start_sel=None,stop_sel=None,max_words=None,min_words=None,short_word=None,highlight_all=None,max_fragments=None,fragment_delimiter=None)
django.contrib.postgres.search.SearchHeadline.__init__(self,expression,query,*,config=None,start_sel=None,stop_sel=None,max_words=None,min_words=None,short_word=None,highlight_all=None,max_fragments=None,fragment_delimiter=None)
django.contrib.postgres.search.SearchHeadline.as_sql(self,compiler,connection,function=None,template=None)
django.contrib.postgres.search.SearchQuery(self,value,output_field=None,*,config=None,invert=False,search_type='plain')
django.contrib.postgres.search.SearchQuery.__init__(self,value,output_field=None,*,config=None,invert=False,search_type='plain')
django.contrib.postgres.search.SearchQuery.__invert__(self)
django.contrib.postgres.search.SearchQuery.__str__(self)
django.contrib.postgres.search.SearchQuery.as_sql(self,compiler,connection,function=None,template=None)
django.contrib.postgres.search.SearchQueryCombinable
django.contrib.postgres.search.SearchQueryCombinable.__and__(self,other)
django.contrib.postgres.search.SearchQueryCombinable.__or__(self,other)
django.contrib.postgres.search.SearchQueryCombinable.__rand__(self,other)
django.contrib.postgres.search.SearchQueryCombinable.__ror__(self,other)
django.contrib.postgres.search.SearchQueryCombinable._combine(self,other,connector,reversed)
django.contrib.postgres.search.SearchQueryField(Field)
django.contrib.postgres.search.SearchQueryField.db_type(self,connection)
django.contrib.postgres.search.SearchRank(self,vector,query,weights=None,normalization=None,cover_density=False)
django.contrib.postgres.search.SearchRank.__init__(self,vector,query,weights=None,normalization=None,cover_density=False)
django.contrib.postgres.search.SearchVector(self,*expressions,config=None,weight=None)
django.contrib.postgres.search.SearchVector.__init__(self,*expressions,config=None,weight=None)
django.contrib.postgres.search.SearchVector.as_sql(self,compiler,connection,function=None,template=None)
django.contrib.postgres.search.SearchVector.resolve_expression(self,query=None,allow_joins=True,reuse=None,summarize=False,for_save=False)
django.contrib.postgres.search.SearchVectorCombinable
django.contrib.postgres.search.SearchVectorCombinable._combine(self,other,connector,reversed)
django.contrib.postgres.search.SearchVectorExact(Lookup)
django.contrib.postgres.search.SearchVectorExact.as_sql(self,qn,connection)
django.contrib.postgres.search.SearchVectorExact.process_rhs(self,qn,connection)
django.contrib.postgres.search.SearchVectorField(Field)
django.contrib.postgres.search.SearchVectorField.db_type(self,connection)
django.contrib.postgres.search.TrigramBase(self,expression,string,**extra)
django.contrib.postgres.search.TrigramBase.__init__(self,expression,string,**extra)
django.contrib.postgres.search.TrigramDistance(TrigramBase)
django.contrib.postgres.search.TrigramSimilarity(TrigramBase)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/signals.py----------------------------------------
A:django.contrib.postgres.signals.(oids, array_oids)->get_hstore_oids(connection.alias)
A:django.contrib.postgres.signals.citext_oids->get_citext_oids(connection.alias)
A:django.contrib.postgres.signals.array_type->psycopg2.extensions.new_array_type(citext_oids, 'citext[]', psycopg2.STRING)
django.contrib.postgres.signals.get_citext_oids(connection_alias)
django.contrib.postgres.signals.get_hstore_oids(connection_alias)
django.contrib.postgres.signals.register_type_handlers(connection,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/apps.py----------------------------------------
A:django.contrib.postgres.apps.verbose_name->_('PostgreSQL extensions')
django.contrib.postgres.apps.PostgresConfig(AppConfig)
django.contrib.postgres.apps.PostgresConfig.ready(self)
django.contrib.postgres.apps.uninstall_if_needed(setting,value,enter,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/operations.py----------------------------------------
A:django.contrib.postgres.operations.model->to_state.apps.get_model(app_label, self.model_name)
A:django.contrib.postgres.operations.index->to_model_state.get_index_by_name(self.name)
A:django.contrib.postgres.operations.args['provider']->schema_editor.quote_name(self.provider)
django.contrib.postgres.operations.AddIndexConcurrently(NotInTransactionMixin,AddIndex)
django.contrib.postgres.operations.AddIndexConcurrently.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.AddIndexConcurrently.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.AddIndexConcurrently.describe(self)
django.contrib.postgres.operations.BloomExtension(self)
django.contrib.postgres.operations.BloomExtension.__init__(self)
django.contrib.postgres.operations.BtreeGinExtension(self)
django.contrib.postgres.operations.BtreeGinExtension.__init__(self)
django.contrib.postgres.operations.BtreeGistExtension(self)
django.contrib.postgres.operations.BtreeGistExtension.__init__(self)
django.contrib.postgres.operations.CITextExtension(self)
django.contrib.postgres.operations.CITextExtension.__init__(self)
django.contrib.postgres.operations.CollationOperation(self,name,locale,*,provider='libc',deterministic=True)
django.contrib.postgres.operations.CollationOperation.__init__(self,name,locale,*,provider='libc',deterministic=True)
django.contrib.postgres.operations.CollationOperation.create_collation(self,schema_editor)
django.contrib.postgres.operations.CollationOperation.deconstruct(self)
django.contrib.postgres.operations.CollationOperation.remove_collation(self,schema_editor)
django.contrib.postgres.operations.CollationOperation.state_forwards(self,app_label,state)
django.contrib.postgres.operations.CreateCollation(CollationOperation)
django.contrib.postgres.operations.CreateCollation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.CreateCollation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.CreateCollation.describe(self)
django.contrib.postgres.operations.CreateCollation.migration_name_fragment(self)
django.contrib.postgres.operations.CreateExtension(self,name)
django.contrib.postgres.operations.CreateExtension.__init__(self,name)
django.contrib.postgres.operations.CreateExtension.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.CreateExtension.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.CreateExtension.describe(self)
django.contrib.postgres.operations.CreateExtension.extension_exists(self,schema_editor,extension)
django.contrib.postgres.operations.CreateExtension.migration_name_fragment(self)
django.contrib.postgres.operations.CreateExtension.state_forwards(self,app_label,state)
django.contrib.postgres.operations.CryptoExtension(self)
django.contrib.postgres.operations.CryptoExtension.__init__(self)
django.contrib.postgres.operations.HStoreExtension(self)
django.contrib.postgres.operations.HStoreExtension.__init__(self)
django.contrib.postgres.operations.NotInTransactionMixin
django.contrib.postgres.operations.NotInTransactionMixin._ensure_not_in_transaction(self,schema_editor)
django.contrib.postgres.operations.RemoveCollation(CollationOperation)
django.contrib.postgres.operations.RemoveCollation.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.RemoveCollation.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.RemoveCollation.describe(self)
django.contrib.postgres.operations.RemoveCollation.migration_name_fragment(self)
django.contrib.postgres.operations.RemoveIndexConcurrently(NotInTransactionMixin,RemoveIndex)
django.contrib.postgres.operations.RemoveIndexConcurrently.database_backwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.RemoveIndexConcurrently.database_forwards(self,app_label,schema_editor,from_state,to_state)
django.contrib.postgres.operations.RemoveIndexConcurrently.describe(self)
django.contrib.postgres.operations.TrigramExtension(self)
django.contrib.postgres.operations.TrigramExtension.__init__(self)
django.contrib.postgres.operations.UnaccentExtension(self)
django.contrib.postgres.operations.UnaccentExtension.__init__(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/constraints.py----------------------------------------
A:django.contrib.postgres.constraints.expression->expression.resolve_expression(query=query).resolve_expression(query=query)
A:django.contrib.postgres.constraints.(sql, params)->query.build_where(self.condition).as_sql(compiler, schema_editor.connection)
A:django.contrib.postgres.constraints.where->Query(model, alias_cols=False).build_where(self.condition)
A:django.contrib.postgres.constraints.query->Query(model, alias_cols=False)
A:django.contrib.postgres.constraints.compiler->Query(model, alias_cols=False).get_compiler(connection=schema_editor.connection)
A:django.contrib.postgres.constraints.expressions->self._get_expression_sql(compiler, schema_editor, query)
A:django.contrib.postgres.constraints.condition->self._get_condition_sql(compiler, schema_editor, query)
A:django.contrib.postgres.constraints.(path, args, kwargs)->super().deconstruct()
django.contrib.postgres.constraints.ExclusionConstraint(self,*,name,expressions,index_type=None,condition=None,deferrable=None,include=None,opclasses=())
django.contrib.postgres.constraints.ExclusionConstraint.__eq__(self,other)
django.contrib.postgres.constraints.ExclusionConstraint.__init__(self,*,name,expressions,index_type=None,condition=None,deferrable=None,include=None,opclasses=())
django.contrib.postgres.constraints.ExclusionConstraint.__repr__(self)
django.contrib.postgres.constraints.ExclusionConstraint._get_condition_sql(self,compiler,schema_editor,query)
django.contrib.postgres.constraints.ExclusionConstraint._get_expression_sql(self,compiler,schema_editor,query)
django.contrib.postgres.constraints.ExclusionConstraint.check_supported(self,schema_editor)
django.contrib.postgres.constraints.ExclusionConstraint.constraint_sql(self,model,schema_editor)
django.contrib.postgres.constraints.ExclusionConstraint.create_sql(self,model,schema_editor)
django.contrib.postgres.constraints.ExclusionConstraint.deconstruct(self)
django.contrib.postgres.constraints.ExclusionConstraint.remove_sql(self,model,schema_editor)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/citext.py----------------------------------------
django.contrib.postgres.fields.CICharField(CIText,CharField)
django.contrib.postgres.fields.CIEmailField(CIText,EmailField)
django.contrib.postgres.fields.CIText
django.contrib.postgres.fields.CIText.db_type(self,connection)
django.contrib.postgres.fields.CIText.get_internal_type(self)
django.contrib.postgres.fields.CITextField(CIText,TextField)
django.contrib.postgres.fields.citext.CICharField(CIText,CharField)
django.contrib.postgres.fields.citext.CIEmailField(CIText,EmailField)
django.contrib.postgres.fields.citext.CIText
django.contrib.postgres.fields.citext.CIText.db_type(self,connection)
django.contrib.postgres.fields.citext.CIText.get_internal_type(self)
django.contrib.postgres.fields.citext.CITextField(CIText,TextField)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/utils.py----------------------------------------
django.contrib.postgres.fields.utils.AttributeSetter(self,name,value)
django.contrib.postgres.fields.utils.AttributeSetter.__init__(self,name,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/array.py----------------------------------------
A:django.contrib.postgres.fields.array.errors->super().check(**kwargs)
A:django.contrib.postgres.fields.array.base_errors->self.base_field.check()
A:django.contrib.postgres.fields.array.messages->'\n    '.join(('%s (%s)' % (error.msg, error.id) for error in base_errors))
A:django.contrib.postgres.fields.array.(name, path, args, kwargs)->super().deconstruct()
A:django.contrib.postgres.fields.array.vals->self.value_from_object(obj)
A:django.contrib.postgres.fields.array.obj->AttributeSetter(base_field.attname, val)
A:django.contrib.postgres.fields.array.transform->super().get_transform(name)
A:django.contrib.postgres.fields.array.index->int(name)
A:django.contrib.postgres.fields.array.(start, end)->name.split('_')
A:django.contrib.postgres.fields.array.end->int(end)
A:django.contrib.postgres.fields.array.value->Value(field.base_field.get_prep_value(value))
A:django.contrib.postgres.fields.array.rhs->Func(*expressions, function='ARRAY', template='%(function)s[%(expressions)s]')
A:django.contrib.postgres.fields.array.(rhs, rhs_params)->super().process_rhs(compiler, connection)
A:django.contrib.postgres.fields.array.cast_type->self.lhs.output_field.cast_db_type(connection)
A:django.contrib.postgres.fields.array.output_field->IntegerField()
A:django.contrib.postgres.fields.array.(lhs, params)->compiler.compile(self.lhs)
A:django.contrib.postgres.fields.array.values->super().get_prep_lookup()
django.contrib.postgres.fields.ArrayContainedBy(ArrayRHSMixin,lookups.ContainedBy)
django.contrib.postgres.fields.ArrayContains(ArrayRHSMixin,lookups.DataContains)
django.contrib.postgres.fields.ArrayExact(ArrayRHSMixin,Exact)
django.contrib.postgres.fields.ArrayField(self,base_field,size=None,**kwargs)
django.contrib.postgres.fields.ArrayField._choices_is_value(cls,value)
django.contrib.postgres.fields.ArrayField._from_db_value(self,value,expression,connection)
django.contrib.postgres.fields.ArrayField.cast_db_type(self,connection)
django.contrib.postgres.fields.ArrayField.check(self,**kwargs)
django.contrib.postgres.fields.ArrayField.db_type(self,connection)
django.contrib.postgres.fields.ArrayField.deconstruct(self)
django.contrib.postgres.fields.ArrayField.description(self)
django.contrib.postgres.fields.ArrayField.formfield(self,**kwargs)
django.contrib.postgres.fields.ArrayField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.postgres.fields.ArrayField.get_placeholder(self,value,compiler,connection)
django.contrib.postgres.fields.ArrayField.get_transform(self,name)
django.contrib.postgres.fields.ArrayField.model(self)
django.contrib.postgres.fields.ArrayField.model(self,model)
django.contrib.postgres.fields.ArrayField.run_validators(self,value)
django.contrib.postgres.fields.ArrayField.set_attributes_from_name(self,name)
django.contrib.postgres.fields.ArrayField.to_python(self,value)
django.contrib.postgres.fields.ArrayField.validate(self,value,model_instance)
django.contrib.postgres.fields.ArrayField.value_to_string(self,obj)
django.contrib.postgres.fields.ArrayInLookup(In)
django.contrib.postgres.fields.ArrayInLookup.get_prep_lookup(self)
django.contrib.postgres.fields.ArrayLenTransform(Transform)
django.contrib.postgres.fields.ArrayLenTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.ArrayOverlap(ArrayRHSMixin,lookups.Overlap)
django.contrib.postgres.fields.ArrayRHSMixin(self,lhs,rhs)
django.contrib.postgres.fields.ArrayRHSMixin.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.IndexTransform(self,index,base_field,*args,**kwargs)
django.contrib.postgres.fields.IndexTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.IndexTransform.output_field(self)
django.contrib.postgres.fields.IndexTransformFactory(self,index,base_field)
django.contrib.postgres.fields.SliceTransform(self,start,end,*args,**kwargs)
django.contrib.postgres.fields.SliceTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.SliceTransformFactory(self,start,end)
django.contrib.postgres.fields.array.ArrayContainedBy(ArrayRHSMixin,lookups.ContainedBy)
django.contrib.postgres.fields.array.ArrayContains(ArrayRHSMixin,lookups.DataContains)
django.contrib.postgres.fields.array.ArrayExact(ArrayRHSMixin,Exact)
django.contrib.postgres.fields.array.ArrayField(self,base_field,size=None,**kwargs)
django.contrib.postgres.fields.array.ArrayField.__init__(self,base_field,size=None,**kwargs)
django.contrib.postgres.fields.array.ArrayField._choices_is_value(cls,value)
django.contrib.postgres.fields.array.ArrayField._from_db_value(self,value,expression,connection)
django.contrib.postgres.fields.array.ArrayField.cast_db_type(self,connection)
django.contrib.postgres.fields.array.ArrayField.check(self,**kwargs)
django.contrib.postgres.fields.array.ArrayField.db_type(self,connection)
django.contrib.postgres.fields.array.ArrayField.deconstruct(self)
django.contrib.postgres.fields.array.ArrayField.description(self)
django.contrib.postgres.fields.array.ArrayField.formfield(self,**kwargs)
django.contrib.postgres.fields.array.ArrayField.get_db_prep_value(self,value,connection,prepared=False)
django.contrib.postgres.fields.array.ArrayField.get_placeholder(self,value,compiler,connection)
django.contrib.postgres.fields.array.ArrayField.get_transform(self,name)
django.contrib.postgres.fields.array.ArrayField.model(self)
django.contrib.postgres.fields.array.ArrayField.model(self,model)
django.contrib.postgres.fields.array.ArrayField.run_validators(self,value)
django.contrib.postgres.fields.array.ArrayField.set_attributes_from_name(self,name)
django.contrib.postgres.fields.array.ArrayField.to_python(self,value)
django.contrib.postgres.fields.array.ArrayField.validate(self,value,model_instance)
django.contrib.postgres.fields.array.ArrayField.value_to_string(self,obj)
django.contrib.postgres.fields.array.ArrayInLookup(In)
django.contrib.postgres.fields.array.ArrayInLookup.get_prep_lookup(self)
django.contrib.postgres.fields.array.ArrayLenTransform(Transform)
django.contrib.postgres.fields.array.ArrayLenTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.array.ArrayOverlap(ArrayRHSMixin,lookups.Overlap)
django.contrib.postgres.fields.array.ArrayRHSMixin(self,lhs,rhs)
django.contrib.postgres.fields.array.ArrayRHSMixin.__init__(self,lhs,rhs)
django.contrib.postgres.fields.array.ArrayRHSMixin.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.array.IndexTransform(self,index,base_field,*args,**kwargs)
django.contrib.postgres.fields.array.IndexTransform.__init__(self,index,base_field,*args,**kwargs)
django.contrib.postgres.fields.array.IndexTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.array.IndexTransform.output_field(self)
django.contrib.postgres.fields.array.IndexTransformFactory(self,index,base_field)
django.contrib.postgres.fields.array.IndexTransformFactory.__init__(self,index,base_field)
django.contrib.postgres.fields.array.SliceTransform(self,start,end,*args,**kwargs)
django.contrib.postgres.fields.array.SliceTransform.__init__(self,start,end,*args,**kwargs)
django.contrib.postgres.fields.array.SliceTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.array.SliceTransformFactory(self,start,end)
django.contrib.postgres.fields.array.SliceTransformFactory.__init__(self,start,end)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/hstore.py----------------------------------------
A:django.contrib.postgres.fields.hstore.description->_('Map of strings to strings/nulls')
A:django.contrib.postgres.fields.hstore.transform->super().get_transform(name)
A:django.contrib.postgres.fields.hstore.value->super().get_prep_value(value)
A:django.contrib.postgres.fields.hstore.key->str(key)
A:django.contrib.postgres.fields.hstore.val->str(val)
A:django.contrib.postgres.fields.hstore.output_field->ArrayField(TextField())
A:django.contrib.postgres.fields.hstore.(lhs, params)->compiler.compile(self.lhs)
django.contrib.postgres.fields.HStoreField(CheckFieldDefaultMixin,Field)
django.contrib.postgres.fields.HStoreField.db_type(self,connection)
django.contrib.postgres.fields.HStoreField.formfield(self,**kwargs)
django.contrib.postgres.fields.HStoreField.get_prep_value(self,value)
django.contrib.postgres.fields.HStoreField.get_transform(self,name)
django.contrib.postgres.fields.HStoreField.to_python(self,value)
django.contrib.postgres.fields.HStoreField.validate(self,value,model_instance)
django.contrib.postgres.fields.HStoreField.value_to_string(self,obj)
django.contrib.postgres.fields.KeyTransform(self,key_name,*args,**kwargs)
django.contrib.postgres.fields.KeyTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.KeyTransformFactory(self,key_name)
django.contrib.postgres.fields.KeysTransform(Transform)
django.contrib.postgres.fields.ValuesTransform(Transform)
django.contrib.postgres.fields.hstore.HStoreField(CheckFieldDefaultMixin,Field)
django.contrib.postgres.fields.hstore.HStoreField.db_type(self,connection)
django.contrib.postgres.fields.hstore.HStoreField.formfield(self,**kwargs)
django.contrib.postgres.fields.hstore.HStoreField.get_prep_value(self,value)
django.contrib.postgres.fields.hstore.HStoreField.get_transform(self,name)
django.contrib.postgres.fields.hstore.HStoreField.to_python(self,value)
django.contrib.postgres.fields.hstore.HStoreField.validate(self,value,model_instance)
django.contrib.postgres.fields.hstore.HStoreField.value_to_string(self,obj)
django.contrib.postgres.fields.hstore.KeyTransform(self,key_name,*args,**kwargs)
django.contrib.postgres.fields.hstore.KeyTransform.__init__(self,key_name,*args,**kwargs)
django.contrib.postgres.fields.hstore.KeyTransform.as_sql(self,compiler,connection)
django.contrib.postgres.fields.hstore.KeyTransformFactory(self,key_name)
django.contrib.postgres.fields.hstore.KeyTransformFactory.__init__(self,key_name)
django.contrib.postgres.fields.hstore.KeysTransform(Transform)
django.contrib.postgres.fields.hstore.ValuesTransform(Transform)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/ranges.py----------------------------------------
A:django.contrib.postgres.fields.ranges.self.base_field->self.base_field()
A:django.contrib.postgres.fields.ranges.vals->json.loads(value)
A:django.contrib.postgres.fields.ranges.vals[end]->self.base_field.to_python(vals[end])
A:django.contrib.postgres.fields.ranges.value->django.db.models.Value(self.rhs)
A:django.contrib.postgres.fields.ranges.val->getattr(value, end)
A:django.contrib.postgres.fields.ranges.obj->AttributeSetter(base_field.attname, val)
A:django.contrib.postgres.fields.ranges.result[end]->base_field.value_to_string(obj)
A:django.contrib.postgres.fields.ranges.self.rhs->django.db.models.Value(self.rhs).resolve_expression(compiler.query)
A:django.contrib.postgres.fields.ranges.(sql, params)->super().as_postgresql(compiler, connection)
A:django.contrib.postgres.fields.ranges.cast_internal_type->self.lhs.output_field.base_field.get_internal_type()
A:django.contrib.postgres.fields.ranges.cast_sql->'::{}'.format(connection.data_types.get(cast_internal_type))
A:django.contrib.postgres.fields.ranges.(rhs, rhs_params)->super().process_rhs(compiler, connection)
A:django.contrib.postgres.fields.ranges.(lhs, lhs_params)->super().process_lhs(compiler, connection)
A:django.contrib.postgres.fields.ranges.output_field->django.db.models.BooleanField()
django.contrib.postgres.fields.AdjacentToLookup(PostgresOperatorLookup)
django.contrib.postgres.fields.BigIntegerRangeField(RangeField)
django.contrib.postgres.fields.BigIntegerRangeField.db_type(self,connection)
django.contrib.postgres.fields.DateRangeField(RangeField)
django.contrib.postgres.fields.DateRangeField.db_type(self,connection)
django.contrib.postgres.fields.DateTimeRangeContains(PostgresOperatorLookup)
django.contrib.postgres.fields.DateTimeRangeContains.as_postgresql(self,compiler,connection)
django.contrib.postgres.fields.DateTimeRangeContains.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.DateTimeRangeField(RangeField)
django.contrib.postgres.fields.DateTimeRangeField.db_type(self,connection)
django.contrib.postgres.fields.DecimalRangeField(RangeField)
django.contrib.postgres.fields.DecimalRangeField.db_type(self,connection)
django.contrib.postgres.fields.FullGreaterThan(PostgresOperatorLookup)
django.contrib.postgres.fields.FullyLessThan(PostgresOperatorLookup)
django.contrib.postgres.fields.IntegerRangeField(RangeField)
django.contrib.postgres.fields.IntegerRangeField.db_type(self,connection)
django.contrib.postgres.fields.IsEmpty(models.Transform)
django.contrib.postgres.fields.LowerInclusive(models.Transform)
django.contrib.postgres.fields.LowerInfinite(models.Transform)
django.contrib.postgres.fields.NotGreaterThan(PostgresOperatorLookup)
django.contrib.postgres.fields.NotLessThan(PostgresOperatorLookup)
django.contrib.postgres.fields.RangeBoundary(self,inclusive_lower=True,inclusive_upper=False)
django.contrib.postgres.fields.RangeBoundary.as_sql(self,compiler,connection)
django.contrib.postgres.fields.RangeContainedBy(PostgresOperatorLookup)
django.contrib.postgres.fields.RangeContainedBy.get_prep_lookup(self)
django.contrib.postgres.fields.RangeContainedBy.process_lhs(self,compiler,connection)
django.contrib.postgres.fields.RangeContainedBy.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.RangeEndsWith(models.Transform)
django.contrib.postgres.fields.RangeEndsWith.output_field(self)
django.contrib.postgres.fields.RangeField(self,*args,**kwargs)
django.contrib.postgres.fields.RangeField._choices_is_value(cls,value)
django.contrib.postgres.fields.RangeField.formfield(self,**kwargs)
django.contrib.postgres.fields.RangeField.get_prep_value(self,value)
django.contrib.postgres.fields.RangeField.model(self)
django.contrib.postgres.fields.RangeField.model(self,model)
django.contrib.postgres.fields.RangeField.set_attributes_from_name(self,name)
django.contrib.postgres.fields.RangeField.to_python(self,value)
django.contrib.postgres.fields.RangeField.value_to_string(self,obj)
django.contrib.postgres.fields.RangeOperators
django.contrib.postgres.fields.RangeStartsWith(models.Transform)
django.contrib.postgres.fields.RangeStartsWith.output_field(self)
django.contrib.postgres.fields.UpperInclusive(models.Transform)
django.contrib.postgres.fields.UpperInfinite(models.Transform)
django.contrib.postgres.fields.ranges.AdjacentToLookup(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.BigIntegerRangeField(RangeField)
django.contrib.postgres.fields.ranges.BigIntegerRangeField.db_type(self,connection)
django.contrib.postgres.fields.ranges.DateRangeField(RangeField)
django.contrib.postgres.fields.ranges.DateRangeField.db_type(self,connection)
django.contrib.postgres.fields.ranges.DateTimeRangeContains(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.DateTimeRangeContains.as_postgresql(self,compiler,connection)
django.contrib.postgres.fields.ranges.DateTimeRangeContains.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.ranges.DateTimeRangeField(RangeField)
django.contrib.postgres.fields.ranges.DateTimeRangeField.db_type(self,connection)
django.contrib.postgres.fields.ranges.DecimalRangeField(RangeField)
django.contrib.postgres.fields.ranges.DecimalRangeField.db_type(self,connection)
django.contrib.postgres.fields.ranges.FullGreaterThan(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.FullyLessThan(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.IntegerRangeField(RangeField)
django.contrib.postgres.fields.ranges.IntegerRangeField.db_type(self,connection)
django.contrib.postgres.fields.ranges.IsEmpty(models.Transform)
django.contrib.postgres.fields.ranges.LowerInclusive(models.Transform)
django.contrib.postgres.fields.ranges.LowerInfinite(models.Transform)
django.contrib.postgres.fields.ranges.NotGreaterThan(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.NotLessThan(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.RangeBoundary(self,inclusive_lower=True,inclusive_upper=False)
django.contrib.postgres.fields.ranges.RangeBoundary.__init__(self,inclusive_lower=True,inclusive_upper=False)
django.contrib.postgres.fields.ranges.RangeBoundary.as_sql(self,compiler,connection)
django.contrib.postgres.fields.ranges.RangeContainedBy(PostgresOperatorLookup)
django.contrib.postgres.fields.ranges.RangeContainedBy.get_prep_lookup(self)
django.contrib.postgres.fields.ranges.RangeContainedBy.process_lhs(self,compiler,connection)
django.contrib.postgres.fields.ranges.RangeContainedBy.process_rhs(self,compiler,connection)
django.contrib.postgres.fields.ranges.RangeEndsWith(models.Transform)
django.contrib.postgres.fields.ranges.RangeEndsWith.output_field(self)
django.contrib.postgres.fields.ranges.RangeField(self,*args,**kwargs)
django.contrib.postgres.fields.ranges.RangeField.__init__(self,*args,**kwargs)
django.contrib.postgres.fields.ranges.RangeField._choices_is_value(cls,value)
django.contrib.postgres.fields.ranges.RangeField.formfield(self,**kwargs)
django.contrib.postgres.fields.ranges.RangeField.get_prep_value(self,value)
django.contrib.postgres.fields.ranges.RangeField.model(self)
django.contrib.postgres.fields.ranges.RangeField.model(self,model)
django.contrib.postgres.fields.ranges.RangeField.set_attributes_from_name(self,name)
django.contrib.postgres.fields.ranges.RangeField.to_python(self,value)
django.contrib.postgres.fields.ranges.RangeField.value_to_string(self,obj)
django.contrib.postgres.fields.ranges.RangeOperators
django.contrib.postgres.fields.ranges.RangeStartsWith(models.Transform)
django.contrib.postgres.fields.ranges.RangeStartsWith.output_field(self)
django.contrib.postgres.fields.ranges.UpperInclusive(models.Transform)
django.contrib.postgres.fields.ranges.UpperInfinite(models.Transform)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/jsonb.py----------------------------------------
django.contrib.postgres.fields.JSONField(BuiltinJSONField)
django.contrib.postgres.fields.KeyTextTransform(self,*args,**kwargs)
django.contrib.postgres.fields.KeyTransform(self,*args,**kwargs)
django.contrib.postgres.fields.jsonb.JSONField(BuiltinJSONField)
django.contrib.postgres.fields.jsonb.KeyTextTransform(self,*args,**kwargs)
django.contrib.postgres.fields.jsonb.KeyTextTransform.__init__(self,*args,**kwargs)
django.contrib.postgres.fields.jsonb.KeyTransform(self,*args,**kwargs)
django.contrib.postgres.fields.jsonb.KeyTransform.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/fields/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/aggregates/mixins.py----------------------------------------
A:django.contrib.postgres.aggregates.mixins.self.ordering->self._parse_expressions(*ordering)
A:django.contrib.postgres.aggregates.mixins.(expr_sql, expr_params)->compiler.compile(expr)
A:django.contrib.postgres.aggregates.mixins.(sql, sql_params)->super().as_sql(compiler, connection, ordering='ORDER BY ' + ', '.join(ordering_expr_sql))
A:django.contrib.postgres.aggregates.mixins.source_expressions->self.get_source_expressions()
django.contrib.postgres.aggregates.mixins.OrderableAggMixin(self,*expressions,ordering=(),**extra)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin.__init__(self,*expressions,ordering=(),**extra)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin._get_ordering_expressions_index(self)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin.as_sql(self,compiler,connection)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin.get_source_expressions(self)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin.resolve_expression(self,*args,**kwargs)
django.contrib.postgres.aggregates.mixins.OrderableAggMixin.set_source_expressions(self,exprs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/aggregates/statistics.py----------------------------------------
A:django.contrib.postgres.aggregates.statistics.output_field->IntegerField()
django.contrib.postgres.aggregates.Corr(StatAggregate)
django.contrib.postgres.aggregates.CovarPop(self,y,x,sample=False,filter=None)
django.contrib.postgres.aggregates.RegrAvgX(StatAggregate)
django.contrib.postgres.aggregates.RegrAvgY(StatAggregate)
django.contrib.postgres.aggregates.RegrCount(StatAggregate)
django.contrib.postgres.aggregates.RegrCount.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.RegrIntercept(StatAggregate)
django.contrib.postgres.aggregates.RegrR2(StatAggregate)
django.contrib.postgres.aggregates.RegrSXX(StatAggregate)
django.contrib.postgres.aggregates.RegrSXY(StatAggregate)
django.contrib.postgres.aggregates.RegrSYY(StatAggregate)
django.contrib.postgres.aggregates.RegrSlope(StatAggregate)
django.contrib.postgres.aggregates.StatAggregate(self,y,x,output_field=None,filter=None)
django.contrib.postgres.aggregates.statistics.Corr(StatAggregate)
django.contrib.postgres.aggregates.statistics.CovarPop(self,y,x,sample=False,filter=None)
django.contrib.postgres.aggregates.statistics.CovarPop.__init__(self,y,x,sample=False,filter=None)
django.contrib.postgres.aggregates.statistics.RegrAvgX(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrAvgY(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrCount(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrCount.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.statistics.RegrIntercept(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrR2(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrSXX(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrSXY(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrSYY(StatAggregate)
django.contrib.postgres.aggregates.statistics.RegrSlope(StatAggregate)
django.contrib.postgres.aggregates.statistics.StatAggregate(self,y,x,output_field=None,filter=None)
django.contrib.postgres.aggregates.statistics.StatAggregate.__init__(self,y,x,output_field=None,filter=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/aggregates/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/aggregates/general.py----------------------------------------
A:django.contrib.postgres.aggregates.general.output_field->JSONField()
A:django.contrib.postgres.aggregates.general.delimiter_expr->Value(str(delimiter))
django.contrib.postgres.aggregates.ArrayAgg(OrderableAggMixin,Aggregate)
django.contrib.postgres.aggregates.ArrayAgg.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.ArrayAgg.output_field(self)
django.contrib.postgres.aggregates.BitAnd(Aggregate)
django.contrib.postgres.aggregates.BitOr(Aggregate)
django.contrib.postgres.aggregates.BoolAnd(Aggregate)
django.contrib.postgres.aggregates.BoolOr(Aggregate)
django.contrib.postgres.aggregates.JSONBAgg(OrderableAggMixin,Aggregate)
django.contrib.postgres.aggregates.JSONBAgg.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.StringAgg(self,expression,delimiter,**extra)
django.contrib.postgres.aggregates.StringAgg.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.general.ArrayAgg(OrderableAggMixin,Aggregate)
django.contrib.postgres.aggregates.general.ArrayAgg.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.general.ArrayAgg.output_field(self)
django.contrib.postgres.aggregates.general.BitAnd(Aggregate)
django.contrib.postgres.aggregates.general.BitOr(Aggregate)
django.contrib.postgres.aggregates.general.BoolAnd(Aggregate)
django.contrib.postgres.aggregates.general.BoolOr(Aggregate)
django.contrib.postgres.aggregates.general.JSONBAgg(OrderableAggMixin,Aggregate)
django.contrib.postgres.aggregates.general.JSONBAgg.convert_value(self,value,expression,connection)
django.contrib.postgres.aggregates.general.StringAgg(self,expression,delimiter,**extra)
django.contrib.postgres.aggregates.general.StringAgg.__init__(self,expression,delimiter,**extra)
django.contrib.postgres.aggregates.general.StringAgg.convert_value(self,value,expression,connection)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/forms/array.py----------------------------------------
A:django.contrib.postgres.forms.array.value->super().to_python(value)
A:django.contrib.postgres.forms.array.items->super().to_python(value).split(self.delimiter)
A:django.contrib.postgres.forms.array.context->super().get_context(name, value, attrs)
A:django.contrib.postgres.forms.array.final_attrs->self.build_attrs(attrs)
A:django.contrib.postgres.forms.array.id_->self.build_attrs(attrs).get('id')
A:django.contrib.postgres.forms.array.obj->super().__deepcopy__(memo)
A:django.contrib.postgres.forms.array.obj.widget->copy.deepcopy(self.widget)
A:django.contrib.postgres.forms.array.widget->SplitArrayWidget(widget=base_field.widget, size=size)
A:django.contrib.postgres.forms.array.max_size->max(self.size, len(value))
A:django.contrib.postgres.forms.array.(cleaned_data, null_index)->self._remove_trailing_nulls(cleaned_data)
A:django.contrib.postgres.forms.array.errors->list(filter(None, errors))
A:django.contrib.postgres.forms.array.data->self.to_python(data)
A:django.contrib.postgres.forms.array.(data, _)->self._remove_trailing_nulls(data)
django.contrib.postgres.forms.SimpleArrayField(self,base_field,*,delimiter=',',max_length=None,min_length=None,**kwargs)
django.contrib.postgres.forms.SimpleArrayField.clean(self,value)
django.contrib.postgres.forms.SimpleArrayField.has_changed(self,initial,data)
django.contrib.postgres.forms.SimpleArrayField.prepare_value(self,value)
django.contrib.postgres.forms.SimpleArrayField.run_validators(self,value)
django.contrib.postgres.forms.SimpleArrayField.to_python(self,value)
django.contrib.postgres.forms.SimpleArrayField.validate(self,value)
django.contrib.postgres.forms.SplitArrayField(self,base_field,size,*,remove_trailing_nulls=False,**kwargs)
django.contrib.postgres.forms.SplitArrayField._remove_trailing_nulls(self,values)
django.contrib.postgres.forms.SplitArrayField.clean(self,value)
django.contrib.postgres.forms.SplitArrayField.has_changed(self,initial,data)
django.contrib.postgres.forms.SplitArrayField.to_python(self,value)
django.contrib.postgres.forms.SplitArrayWidget(self,widget,size,**kwargs)
django.contrib.postgres.forms.SplitArrayWidget.__deepcopy__(self,memo)
django.contrib.postgres.forms.SplitArrayWidget.get_context(self,name,value,attrs=None)
django.contrib.postgres.forms.SplitArrayWidget.id_for_label(self,id_)
django.contrib.postgres.forms.SplitArrayWidget.is_hidden(self)
django.contrib.postgres.forms.SplitArrayWidget.media(self)
django.contrib.postgres.forms.SplitArrayWidget.needs_multipart_form(self)
django.contrib.postgres.forms.SplitArrayWidget.value_from_datadict(self,data,files,name)
django.contrib.postgres.forms.SplitArrayWidget.value_omitted_from_data(self,data,files,name)
django.contrib.postgres.forms.array.SimpleArrayField(self,base_field,*,delimiter=',',max_length=None,min_length=None,**kwargs)
django.contrib.postgres.forms.array.SimpleArrayField.__init__(self,base_field,*,delimiter=',',max_length=None,min_length=None,**kwargs)
django.contrib.postgres.forms.array.SimpleArrayField.clean(self,value)
django.contrib.postgres.forms.array.SimpleArrayField.has_changed(self,initial,data)
django.contrib.postgres.forms.array.SimpleArrayField.prepare_value(self,value)
django.contrib.postgres.forms.array.SimpleArrayField.run_validators(self,value)
django.contrib.postgres.forms.array.SimpleArrayField.to_python(self,value)
django.contrib.postgres.forms.array.SimpleArrayField.validate(self,value)
django.contrib.postgres.forms.array.SplitArrayField(self,base_field,size,*,remove_trailing_nulls=False,**kwargs)
django.contrib.postgres.forms.array.SplitArrayField.__init__(self,base_field,size,*,remove_trailing_nulls=False,**kwargs)
django.contrib.postgres.forms.array.SplitArrayField._remove_trailing_nulls(self,values)
django.contrib.postgres.forms.array.SplitArrayField.clean(self,value)
django.contrib.postgres.forms.array.SplitArrayField.has_changed(self,initial,data)
django.contrib.postgres.forms.array.SplitArrayField.to_python(self,value)
django.contrib.postgres.forms.array.SplitArrayWidget(self,widget,size,**kwargs)
django.contrib.postgres.forms.array.SplitArrayWidget.__deepcopy__(self,memo)
django.contrib.postgres.forms.array.SplitArrayWidget.__init__(self,widget,size,**kwargs)
django.contrib.postgres.forms.array.SplitArrayWidget.get_context(self,name,value,attrs=None)
django.contrib.postgres.forms.array.SplitArrayWidget.id_for_label(self,id_)
django.contrib.postgres.forms.array.SplitArrayWidget.is_hidden(self)
django.contrib.postgres.forms.array.SplitArrayWidget.media(self)
django.contrib.postgres.forms.array.SplitArrayWidget.needs_multipart_form(self)
django.contrib.postgres.forms.array.SplitArrayWidget.value_from_datadict(self,data,files,name)
django.contrib.postgres.forms.array.SplitArrayWidget.value_omitted_from_data(self,data,files,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/forms/hstore.py----------------------------------------
A:django.contrib.postgres.forms.hstore.value->json.loads(value)
A:django.contrib.postgres.forms.hstore.val->str(val)
A:django.contrib.postgres.forms.hstore.initial_value->self.to_python(initial)
django.contrib.postgres.forms.HStoreField(forms.CharField)
django.contrib.postgres.forms.HStoreField.has_changed(self,initial,data)
django.contrib.postgres.forms.HStoreField.prepare_value(self,value)
django.contrib.postgres.forms.HStoreField.to_python(self,value)
django.contrib.postgres.forms.hstore.HStoreField(forms.CharField)
django.contrib.postgres.forms.hstore.HStoreField.has_changed(self,initial,data)
django.contrib.postgres.forms.hstore.HStoreField.prepare_value(self,value)
django.contrib.postgres.forms.hstore.HStoreField.to_python(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/forms/ranges.py----------------------------------------
A:django.contrib.postgres.forms.ranges.kwargs['widget']->RangeWidget(self.base_field.widget)
A:django.contrib.postgres.forms.ranges.range_value->self.range_type(lower, upper)
django.contrib.postgres.forms.BaseRangeField(self,**kwargs)
django.contrib.postgres.forms.BaseRangeField.compress(self,values)
django.contrib.postgres.forms.BaseRangeField.prepare_value(self,value)
django.contrib.postgres.forms.DateRangeField(BaseRangeField)
django.contrib.postgres.forms.DateTimeRangeField(BaseRangeField)
django.contrib.postgres.forms.DecimalRangeField(BaseRangeField)
django.contrib.postgres.forms.HiddenRangeWidget(self,attrs=None)
django.contrib.postgres.forms.IntegerRangeField(BaseRangeField)
django.contrib.postgres.forms.RangeWidget(self,base_widget,attrs=None)
django.contrib.postgres.forms.RangeWidget.decompress(self,value)
django.contrib.postgres.forms.ranges.BaseRangeField(self,**kwargs)
django.contrib.postgres.forms.ranges.BaseRangeField.__init__(self,**kwargs)
django.contrib.postgres.forms.ranges.BaseRangeField.compress(self,values)
django.contrib.postgres.forms.ranges.BaseRangeField.prepare_value(self,value)
django.contrib.postgres.forms.ranges.DateRangeField(BaseRangeField)
django.contrib.postgres.forms.ranges.DateTimeRangeField(BaseRangeField)
django.contrib.postgres.forms.ranges.DecimalRangeField(BaseRangeField)
django.contrib.postgres.forms.ranges.HiddenRangeWidget(self,attrs=None)
django.contrib.postgres.forms.ranges.HiddenRangeWidget.__init__(self,attrs=None)
django.contrib.postgres.forms.ranges.IntegerRangeField(BaseRangeField)
django.contrib.postgres.forms.ranges.RangeWidget(self,base_widget,attrs=None)
django.contrib.postgres.forms.ranges.RangeWidget.__init__(self,base_widget,attrs=None)
django.contrib.postgres.forms.ranges.RangeWidget.decompress(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/forms/jsonb.py----------------------------------------
django.contrib.postgres.forms.JSONField(self,*args,**kwargs)
django.contrib.postgres.forms.jsonb.JSONField(self,*args,**kwargs)
django.contrib.postgres.forms.jsonb.JSONField.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/postgres/forms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/utils.py----------------------------------------
A:django.contrib.admindocs.utils.view_name->getattr(view_func, '__qualname__', view_func.__class__.__name__)
A:django.contrib.admindocs.utils.docstring->cleandoc(docstring)
A:django.contrib.admindocs.utils.parts->docutils.core.publish_parts(source % text, source_path=thing_being_parsed, destination_path=None, writer_name='html', settings_overrides=overrides)
A:django.contrib.admindocs.utils.parser->HeaderParser()
A:django.contrib.admindocs.utils.metadata->dict(metadata.items())
A:django.contrib.admindocs.utils.body->'\n\n'.join(parts[1:])
A:django.contrib.admindocs.utils.node->docutils.nodes.reference(rawtext, text, refuri=ROLES[context] % (inliner.document.settings.link_base, text.lower()), **options)
A:django.contrib.admindocs.utils.named_group_matcher->_lazy_re_compile('\\(\\?P(<\\w+>)')
A:django.contrib.admindocs.utils.unnamed_group_matcher->_lazy_re_compile('\\(')
A:django.contrib.admindocs.utils.pattern->pattern.replace(group_pattern, group_name).replace(group_pattern, group_name)
django.contrib.admindocs.utils.create_reference_role(rolename,urlbase)
django.contrib.admindocs.utils.default_reference_role(name,rawtext,text,lineno,inliner,options=None,content=None)
django.contrib.admindocs.utils.get_view_name(view_func)
django.contrib.admindocs.utils.parse_docstring(docstring)
django.contrib.admindocs.utils.parse_rst(text,default_reference_context,thing_being_parsed=None)
django.contrib.admindocs.utils.replace_named_groups(pattern)
django.contrib.admindocs.utils.replace_unnamed_groups(pattern)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/middleware.py----------------------------------------
A:django.contrib.admindocs.middleware.response->HttpResponse()
A:django.contrib.admindocs.middleware.response.headers['X-View']->get_view_name(view_func)
django.contrib.admindocs.middleware.XViewMiddleware(MiddlewareMixin)
django.contrib.admindocs.middleware.XViewMiddleware.process_view(self,request,view_func,view_args,view_kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/apps.py----------------------------------------
A:django.contrib.admindocs.apps.verbose_name->_('Administrative Documentation')
django.contrib.admindocs.apps.AdminDocsConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/views.py----------------------------------------
A:django.contrib.admindocs.views.engine->django.template.engine.Engine.get_default()
A:django.contrib.admindocs.views.app_libs->sorted(engine.template_libraries.items())
A:django.contrib.admindocs.views.(title, body, metadata)->django.contrib.admindocs.utils.parse_docstring(model.__doc__)
A:django.contrib.admindocs.views.metadata[key]->django.contrib.admindocs.utils.parse_rst(metadata[key], 'model', _('view:') + view)
A:django.contrib.admindocs.views.urlconf->get_urlconf()
A:django.contrib.admindocs.views.view_functions->extract_views_from_urlpatterns(urlconf.urlpatterns)
A:django.contrib.admindocs.views.(mod, func)->get_mod_func(view)
A:django.contrib.admindocs.views.(mod, klass)->get_mod_func(mod)
A:django.contrib.admindocs.views.view_func->self._get_view_func(view)
A:django.contrib.admindocs.views.app_config->django.apps.apps.get_app_config(self.kwargs['app_label'])
A:django.contrib.admindocs.views.model->django.apps.apps.get_app_config(self.kwargs['app_label']).get_model(model_name)
A:django.contrib.admindocs.views.verbose->django.contrib.admindocs.utils.parse_rst(_('the related `%(app_label)s.%(data_type)s` object') % {'app_label': app_label, 'data_type': data_type}, 'model', _('model:') + data_type)
A:django.contrib.admindocs.views.data_type->get_readable_field_data_type(field)
A:django.contrib.admindocs.views.arguments->get_func_full_args(func)
A:django.contrib.admindocs.views.print_arguments->', '.join(['='.join([arg_el[0], *map(repr, arg_el[1:])]) for arg_el in arguments])
A:django.contrib.admindocs.views.accessor->rel.get_accessor_name()
A:django.contrib.admindocs.views.default_engine->django.template.engine.Engine.get_default()
A:django.contrib.admindocs.views.template_contents->template_file.read_text()
A:django.contrib.admindocs.views.pattern->pattern.replace('^', '').replace('$', '').replace('?', '').replace('^', '').replace('$', '').replace('?', '')
django.contrib.admindocs.views.BaseAdminDocsView(TemplateView)
django.contrib.admindocs.views.BaseAdminDocsView.dispatch(self,request,*args,**kwargs)
django.contrib.admindocs.views.BaseAdminDocsView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.BookmarkletsView(BaseAdminDocsView)
django.contrib.admindocs.views.ModelDetailView(BaseAdminDocsView)
django.contrib.admindocs.views.ModelDetailView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.ModelIndexView(BaseAdminDocsView)
django.contrib.admindocs.views.ModelIndexView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.TemplateDetailView(BaseAdminDocsView)
django.contrib.admindocs.views.TemplateDetailView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.TemplateFilterIndexView(BaseAdminDocsView)
django.contrib.admindocs.views.TemplateFilterIndexView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.TemplateTagIndexView(BaseAdminDocsView)
django.contrib.admindocs.views.TemplateTagIndexView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.ViewDetailView(BaseAdminDocsView)
django.contrib.admindocs.views.ViewDetailView._get_view_func(view)
django.contrib.admindocs.views.ViewDetailView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.ViewIndexView(BaseAdminDocsView)
django.contrib.admindocs.views.ViewIndexView.get_context_data(self,**kwargs)
django.contrib.admindocs.views.extract_views_from_urlpatterns(urlpatterns,base='',namespace=None)
django.contrib.admindocs.views.get_readable_field_data_type(field)
django.contrib.admindocs.views.get_return_data_type(func_name)
django.contrib.admindocs.views.simplify_regex(pattern)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admindocs/urls.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/serializers.py----------------------------------------
django.contrib.sessions.serializers.PickleSerializer
django.contrib.sessions.serializers.PickleSerializer.dumps(self,obj)
django.contrib.sessions.serializers.PickleSerializer.loads(self,data)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/base_session.py----------------------------------------
A:django.contrib.sessions.base_session.session_store_class->self.get_session_store_class()
A:django.contrib.sessions.base_session.s->self.model(session_key, self.encode(session_dict), expire_date)
A:django.contrib.sessions.base_session.session_key->django.db.models.CharField(_('session key'), max_length=40, primary_key=True)
A:django.contrib.sessions.base_session.session_data->django.db.models.TextField(_('session data'))
A:django.contrib.sessions.base_session.expire_date->django.db.models.DateTimeField(_('expire date'), db_index=True)
A:django.contrib.sessions.base_session.objects->BaseSessionManager()
A:django.contrib.sessions.base_session.verbose_name->_('session')
A:django.contrib.sessions.base_session.verbose_name_plural->_('sessions')
django.contrib.sessions.base_session.AbstractBaseSession(models.Model)
django.contrib.sessions.base_session.AbstractBaseSession.Meta
django.contrib.sessions.base_session.AbstractBaseSession.__str__(self)
django.contrib.sessions.base_session.AbstractBaseSession.get_decoded(self)
django.contrib.sessions.base_session.AbstractBaseSession.get_session_store_class(cls)
django.contrib.sessions.base_session.BaseSessionManager(models.Manager)
django.contrib.sessions.base_session.BaseSessionManager.encode(self,session_dict)
django.contrib.sessions.base_session.BaseSessionManager.save(self,session_key,session_dict,expire_date)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/middleware.py----------------------------------------
A:django.contrib.sessions.middleware.engine->import_module(settings.SESSION_ENGINE)
A:django.contrib.sessions.middleware.session_key->request.COOKIES.get(settings.SESSION_COOKIE_NAME)
A:django.contrib.sessions.middleware.request.session->self.SessionStore(session_key)
A:django.contrib.sessions.middleware.empty->request.session.is_empty()
A:django.contrib.sessions.middleware.max_age->request.session.get_expiry_age()
A:django.contrib.sessions.middleware.expires->http_date(expires_time)
django.contrib.sessions.middleware.SessionMiddleware(self,get_response=None)
django.contrib.sessions.middleware.SessionMiddleware.__init__(self,get_response=None)
django.contrib.sessions.middleware.SessionMiddleware.process_request(self,request)
django.contrib.sessions.middleware.SessionMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/apps.py----------------------------------------
A:django.contrib.sessions.apps.verbose_name->_('Sessions')
django.contrib.sessions.apps.SessionsConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/exceptions.py----------------------------------------
django.contrib.sessions.exceptions.InvalidSessionKey(SuspiciousOperation)
django.contrib.sessions.exceptions.SessionInterrupted(BadRequest)
django.contrib.sessions.exceptions.SuspiciousSession(SuspiciousOperation)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/models.py----------------------------------------
A:django.contrib.sessions.models.objects->SessionManager()
django.contrib.sessions.models.Session(AbstractBaseSession)
django.contrib.sessions.models.Session.Meta(AbstractBaseSession.Meta)
django.contrib.sessions.models.Session.get_session_store_class(cls)
django.contrib.sessions.models.SessionManager(BaseSessionManager)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/cache.py----------------------------------------
A:django.contrib.sessions.backends.cache.session_data->self._cache.get(self.cache_key)
A:django.contrib.sessions.backends.cache.self._session_key->self._get_new_session_key()
A:django.contrib.sessions.backends.cache.result->func(self.cache_key, self._get_session(no_load=must_create), self.get_expiry_age())
django.contrib.sessions.backends.cache.SessionStore(self,session_key=None)
django.contrib.sessions.backends.cache.SessionStore.__init__(self,session_key=None)
django.contrib.sessions.backends.cache.SessionStore.cache_key(self)
django.contrib.sessions.backends.cache.SessionStore.clear_expired(cls)
django.contrib.sessions.backends.cache.SessionStore.create(self)
django.contrib.sessions.backends.cache.SessionStore.delete(self,session_key=None)
django.contrib.sessions.backends.cache.SessionStore.exists(self,session_key)
django.contrib.sessions.backends.cache.SessionStore.load(self)
django.contrib.sessions.backends.cache.SessionStore.save(self,must_create=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/signed_cookies.py----------------------------------------
A:django.contrib.sessions.backends.signed_cookies.self._session_key->self._get_session_key()
django.contrib.sessions.backends.signed_cookies.SessionStore(SessionBase)
django.contrib.sessions.backends.signed_cookies.SessionStore._get_session_key(self)
django.contrib.sessions.backends.signed_cookies.SessionStore.clear_expired(cls)
django.contrib.sessions.backends.signed_cookies.SessionStore.create(self)
django.contrib.sessions.backends.signed_cookies.SessionStore.cycle_key(self)
django.contrib.sessions.backends.signed_cookies.SessionStore.delete(self,session_key=None)
django.contrib.sessions.backends.signed_cookies.SessionStore.exists(self,session_key=None)
django.contrib.sessions.backends.signed_cookies.SessionStore.load(self)
django.contrib.sessions.backends.signed_cookies.SessionStore.save(self,must_create=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/base.py----------------------------------------
A:django.contrib.sessions.backends.base.__not_given->object()
A:django.contrib.sessions.backends.base.self.serializer->import_string(settings.SESSION_SERIALIZER)
A:django.contrib.sessions.backends.base.logger->logging.getLogger('django.security.%s' % e.__class__.__name__)
A:django.contrib.sessions.backends.base.serialized->self.serializer().dumps(session_dict)
A:django.contrib.sessions.backends.base.hash->self._hash(serialized)
A:django.contrib.sessions.backends.base.encoded_data->base64.b64decode(session_data.encode('ascii'))
A:django.contrib.sessions.backends.base.(hash, serialized)->base64.b64decode(session_data.encode('ascii')).split(b':', 1)
A:django.contrib.sessions.backends.base.expected_hash->self._hash(serialized)
A:django.contrib.sessions.backends.base.session_key->property(_get_session_key)
A:django.contrib.sessions.backends.base.self._session_key->self._get_new_session_key()
A:django.contrib.sessions.backends.base._session_key->property(_get_session_key, _set_session_key)
A:django.contrib.sessions.backends.base.self._session_cache->self.load()
A:django.contrib.sessions.backends.base._session->property(_get_session)
A:django.contrib.sessions.backends.base.modification->django.utils.timezone.now()
A:django.contrib.sessions.backends.base.expiry->self.get('_session_expiry')
django.contrib.sessions.backends.base.CreateError(Exception)
django.contrib.sessions.backends.base.SessionBase(self,session_key=None)
django.contrib.sessions.backends.base.SessionBase.__contains__(self,key)
django.contrib.sessions.backends.base.SessionBase.__delitem__(self,key)
django.contrib.sessions.backends.base.SessionBase.__getitem__(self,key)
django.contrib.sessions.backends.base.SessionBase.__init__(self,session_key=None)
django.contrib.sessions.backends.base.SessionBase.__setitem__(self,key,value)
django.contrib.sessions.backends.base.SessionBase._get_new_session_key(self)
django.contrib.sessions.backends.base.SessionBase._get_or_create_session_key(self)
django.contrib.sessions.backends.base.SessionBase._get_session(self,no_load=False)
django.contrib.sessions.backends.base.SessionBase._get_session_key(self)
django.contrib.sessions.backends.base.SessionBase._hash(self,value)
django.contrib.sessions.backends.base.SessionBase._legacy_decode(self,session_data)
django.contrib.sessions.backends.base.SessionBase._legacy_encode(self,session_dict)
django.contrib.sessions.backends.base.SessionBase._set_session_key(self,value)
django.contrib.sessions.backends.base.SessionBase._validate_session_key(self,key)
django.contrib.sessions.backends.base.SessionBase.clear(self)
django.contrib.sessions.backends.base.SessionBase.clear_expired(cls)
django.contrib.sessions.backends.base.SessionBase.create(self)
django.contrib.sessions.backends.base.SessionBase.cycle_key(self)
django.contrib.sessions.backends.base.SessionBase.decode(self,session_data)
django.contrib.sessions.backends.base.SessionBase.delete(self,session_key=None)
django.contrib.sessions.backends.base.SessionBase.delete_test_cookie(self)
django.contrib.sessions.backends.base.SessionBase.encode(self,session_dict)
django.contrib.sessions.backends.base.SessionBase.exists(self,session_key)
django.contrib.sessions.backends.base.SessionBase.flush(self)
django.contrib.sessions.backends.base.SessionBase.get(self,key,default=None)
django.contrib.sessions.backends.base.SessionBase.get_expire_at_browser_close(self)
django.contrib.sessions.backends.base.SessionBase.get_expiry_age(self,**kwargs)
django.contrib.sessions.backends.base.SessionBase.get_expiry_date(self,**kwargs)
django.contrib.sessions.backends.base.SessionBase.get_session_cookie_age(self)
django.contrib.sessions.backends.base.SessionBase.has_key(self,key)
django.contrib.sessions.backends.base.SessionBase.is_empty(self)
django.contrib.sessions.backends.base.SessionBase.items(self)
django.contrib.sessions.backends.base.SessionBase.key_salt(self)
django.contrib.sessions.backends.base.SessionBase.keys(self)
django.contrib.sessions.backends.base.SessionBase.load(self)
django.contrib.sessions.backends.base.SessionBase.pop(self,key,default=__not_given)
django.contrib.sessions.backends.base.SessionBase.save(self,must_create=False)
django.contrib.sessions.backends.base.SessionBase.set_expiry(self,value)
django.contrib.sessions.backends.base.SessionBase.set_test_cookie(self)
django.contrib.sessions.backends.base.SessionBase.setdefault(self,key,value)
django.contrib.sessions.backends.base.SessionBase.test_cookie_worked(self)
django.contrib.sessions.backends.base.SessionBase.update(self,dict_)
django.contrib.sessions.backends.base.SessionBase.values(self)
django.contrib.sessions.backends.base.UpdateError(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/db.py----------------------------------------
A:django.contrib.sessions.backends.db.logger->logging.getLogger('django.security.%s' % e.__class__.__name__)
A:django.contrib.sessions.backends.db.s->self._get_session_from_db()
A:django.contrib.sessions.backends.db.self._session_key->self._get_new_session_key()
A:django.contrib.sessions.backends.db.data->self._get_session(no_load=must_create)
A:django.contrib.sessions.backends.db.obj->self.create_model_instance(data)
A:django.contrib.sessions.backends.db.using->django.db.router.db_for_write(self.model, instance=obj)
django.contrib.sessions.backends.db.SessionStore(self,session_key=None)
django.contrib.sessions.backends.db.SessionStore.__init__(self,session_key=None)
django.contrib.sessions.backends.db.SessionStore._get_session_from_db(self)
django.contrib.sessions.backends.db.SessionStore.clear_expired(cls)
django.contrib.sessions.backends.db.SessionStore.create(self)
django.contrib.sessions.backends.db.SessionStore.create_model_instance(self,data)
django.contrib.sessions.backends.db.SessionStore.delete(self,session_key=None)
django.contrib.sessions.backends.db.SessionStore.exists(self,session_key)
django.contrib.sessions.backends.db.SessionStore.get_model_class(cls)
django.contrib.sessions.backends.db.SessionStore.load(self)
django.contrib.sessions.backends.db.SessionStore.model(self)
django.contrib.sessions.backends.db.SessionStore.save(self,must_create=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/cached_db.py----------------------------------------
A:django.contrib.sessions.backends.cached_db.data->self.decode(s.session_data)
A:django.contrib.sessions.backends.cached_db.s->self._get_session_from_db()
django.contrib.sessions.backends.cached_db.SessionStore(self,session_key=None)
django.contrib.sessions.backends.cached_db.SessionStore.__init__(self,session_key=None)
django.contrib.sessions.backends.cached_db.SessionStore.cache_key(self)
django.contrib.sessions.backends.cached_db.SessionStore.delete(self,session_key=None)
django.contrib.sessions.backends.cached_db.SessionStore.exists(self,session_key)
django.contrib.sessions.backends.cached_db.SessionStore.flush(self)
django.contrib.sessions.backends.cached_db.SessionStore.load(self)
django.contrib.sessions.backends.cached_db.SessionStore.save(self,must_create=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/file.py----------------------------------------
A:django.contrib.sessions.backends.file.self.storage_path->self._get_storage_path()
A:django.contrib.sessions.backends.file.session_key->self._get_or_create_session_key()
A:django.contrib.sessions.backends.file.modification->datetime.datetime.utcfromtimestamp(modification)
A:django.contrib.sessions.backends.file.file_data->session_file.read()
A:django.contrib.sessions.backends.file.session_data->self._get_session(no_load=must_create)
A:django.contrib.sessions.backends.file.logger->logging.getLogger('django.security.%s' % e.__class__.__name__)
A:django.contrib.sessions.backends.file.expiry_age->self.get_expiry_age(expiry=self._expiry_date(session_data))
A:django.contrib.sessions.backends.file.self._session_key->self._get_new_session_key()
A:django.contrib.sessions.backends.file.session_file_name->self._key_to_file()
A:django.contrib.sessions.backends.file.fd->os.open(session_file_name, flags)
A:django.contrib.sessions.backends.file.(dir, prefix)->os.path.split(session_file_name)
A:django.contrib.sessions.backends.file.(output_file_fd, output_file_name)->tempfile.mkstemp(dir=dir, prefix=prefix + '_out_')
A:django.contrib.sessions.backends.file.storage_path->cls._get_storage_path()
A:django.contrib.sessions.backends.file.session->cls(session_key)
django.contrib.sessions.backends.file.SessionStore(self,session_key=None)
django.contrib.sessions.backends.file.SessionStore.__init__(self,session_key=None)
django.contrib.sessions.backends.file.SessionStore._expiry_date(self,session_data)
django.contrib.sessions.backends.file.SessionStore._get_storage_path(cls)
django.contrib.sessions.backends.file.SessionStore._key_to_file(self,session_key=None)
django.contrib.sessions.backends.file.SessionStore._last_modification(self)
django.contrib.sessions.backends.file.SessionStore.clean(self)
django.contrib.sessions.backends.file.SessionStore.clear_expired(cls)
django.contrib.sessions.backends.file.SessionStore.create(self)
django.contrib.sessions.backends.file.SessionStore.delete(self,session_key=None)
django.contrib.sessions.backends.file.SessionStore.exists(self,session_key)
django.contrib.sessions.backends.file.SessionStore.load(self)
django.contrib.sessions.backends.file.SessionStore.save(self,must_create=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/migrations/0001_initial.py----------------------------------------
django.contrib.sessions.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/management/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/management/commands/clearsessions.py----------------------------------------
A:django.contrib.sessions.management.commands.clearsessions.engine->import_module(settings.SESSION_ENGINE)
django.contrib.sessions.management.commands.clearsessions.Command(BaseCommand)
django.contrib.sessions.management.commands.clearsessions.Command.handle(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sessions/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/checks.py----------------------------------------
django.contrib.sites.checks.check_site_id(app_configs,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/admin.py----------------------------------------
django.contrib.sites.admin.SiteAdmin(admin.ModelAdmin)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/shortcuts.py----------------------------------------
django.contrib.sites.shortcuts.get_current_site(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/managers.py----------------------------------------
A:django.contrib.sites.managers.errors->super().check(**kwargs)
A:django.contrib.sites.managers.field_name->self._get_field_name()
A:django.contrib.sites.managers.field->self.model._meta.get_field(field_name)
django.contrib.sites.managers.CurrentSiteManager(self,field_name=None)
django.contrib.sites.managers.CurrentSiteManager.__init__(self,field_name=None)
django.contrib.sites.managers.CurrentSiteManager._check_field_name(self)
django.contrib.sites.managers.CurrentSiteManager._get_field_name(self)
django.contrib.sites.managers.CurrentSiteManager.check(self,**kwargs)
django.contrib.sites.managers.CurrentSiteManager.get_queryset(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/middleware.py----------------------------------------
A:django.contrib.sites.middleware.request.site->get_current_site(request)
django.contrib.sites.middleware.CurrentSiteMiddleware(MiddlewareMixin)
django.contrib.sites.middleware.CurrentSiteMiddleware.process_request(self,request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/apps.py----------------------------------------
A:django.contrib.sites.apps.verbose_name->_('Sites')
django.contrib.sites.apps.SitesConfig(AppConfig)
django.contrib.sites.apps.SitesConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/requests.py----------------------------------------
A:django.contrib.sites.requests.self.domainself.name->request.get_host()
django.contrib.sites.requests.RequestSite(self,request)
django.contrib.sites.requests.RequestSite.__init__(self,request)
django.contrib.sites.requests.RequestSite.__str__(self)
django.contrib.sites.requests.RequestSite.delete(self)
django.contrib.sites.requests.RequestSite.save(self,force_insert=False,force_update=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/management.py----------------------------------------
A:django.contrib.sites.management.Site->apps.get_model('sites', 'Site')
A:django.contrib.sites.management.sequence_sql->connections[using].ops.sequence_reset_sql(no_style(), [Site])
django.contrib.sites.management.create_default_site(app_config,verbosity=2,interactive=True,using=DEFAULT_DB_ALIAS,apps=global_apps,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/models.py----------------------------------------
A:django.contrib.sites.models.site->self.get(pk=site_id)
A:django.contrib.sites.models.host->request.get_host()
A:django.contrib.sites.models.SITE_CACHE[host]->self.get(domain__iexact=host)
A:django.contrib.sites.models.(domain, port)->split_domain_port(host)
A:django.contrib.sites.models.SITE_CACHE[domain]->self.get(domain__iexact=domain)
A:django.contrib.sites.models.domain->django.db.models.CharField(_('domain name'), max_length=100, validators=[_simple_domain_name_validator], unique=True)
A:django.contrib.sites.models.name->django.db.models.CharField(_('display name'), max_length=50)
A:django.contrib.sites.models.objects->SiteManager()
A:django.contrib.sites.models.verbose_name->_('site')
A:django.contrib.sites.models.verbose_name_plural->_('sites')
django.contrib.sites.models.Site(models.Model)
django.contrib.sites.models.Site.Meta
django.contrib.sites.models.Site.__str__(self)
django.contrib.sites.models.Site.natural_key(self)
django.contrib.sites.models.SiteManager(models.Manager)
django.contrib.sites.models.SiteManager._get_site_by_id(self,site_id)
django.contrib.sites.models.SiteManager._get_site_by_request(self,request)
django.contrib.sites.models.SiteManager.clear_cache(self)
django.contrib.sites.models.SiteManager.get_by_natural_key(self,domain)
django.contrib.sites.models.SiteManager.get_current(self,request=None)
django.contrib.sites.models._simple_domain_name_validator(value)
django.contrib.sites.models.clear_site_cache(sender,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/migrations/0001_initial.py----------------------------------------
django.contrib.sites.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/migrations/0002_alter_domain_unique.py----------------------------------------
django.contrib.sites.migrations.0002_alter_domain_unique.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/sites/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/admin.py----------------------------------------
django.contrib.redirects.admin.RedirectAdmin(admin.ModelAdmin)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/middleware.py----------------------------------------
A:django.contrib.redirects.middleware.full_path->request.get_full_path()
A:django.contrib.redirects.middleware.current_site->get_current_site(request)
A:django.contrib.redirects.middleware.r->django.contrib.redirects.models.Redirect.objects.get(site=current_site, old_path=request.get_full_path(force_append_slash=True))
django.contrib.redirects.middleware.RedirectFallbackMiddleware(self,get_response=None)
django.contrib.redirects.middleware.RedirectFallbackMiddleware.__init__(self,get_response=None)
django.contrib.redirects.middleware.RedirectFallbackMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/apps.py----------------------------------------
A:django.contrib.redirects.apps.verbose_name->_('Redirects')
django.contrib.redirects.apps.RedirectsConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/models.py----------------------------------------
A:django.contrib.redirects.models.site->django.db.models.ForeignKey(Site, models.CASCADE, verbose_name=_('site'))
A:django.contrib.redirects.models.old_path->django.db.models.CharField(_('redirect from'), max_length=200, db_index=True, help_text=_('This should be an absolute path, excluding the domain name. Example: “/events/search/”.'))
A:django.contrib.redirects.models.new_path->django.db.models.CharField(_('redirect to'), max_length=200, blank=True, help_text=_('This can be either an absolute path (as above) or a full URL starting with a scheme such as “https://”.'))
A:django.contrib.redirects.models.verbose_name->_('redirect')
A:django.contrib.redirects.models.verbose_name_plural->_('redirects')
django.contrib.redirects.models.Redirect(models.Model)
django.contrib.redirects.models.Redirect.Meta
django.contrib.redirects.models.Redirect.__str__(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/migrations/0002_alter_redirect_new_path_help_text.py----------------------------------------
django.contrib.redirects.migrations.0002_alter_redirect_new_path_help_text.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/migrations/0001_initial.py----------------------------------------
django.contrib.redirects.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/redirects/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/checks.py----------------------------------------
A:django.contrib.auth.checks.cls->app_config.get_model(model_name)
A:django.contrib.auth.checks.(app_label, model_name)->django.conf.settings.AUTH_USER_MODEL.split('.')
A:django.contrib.auth.checks.models->itertools.chain.from_iterable((app_config.get_models() for app_config in app_configs))
A:django.contrib.auth.checks.Permission->django.apps.apps.get_model('auth', 'Permission')
A:django.contrib.auth.checks.builtin_permissions->dict(_get_builtin_permissions(opts))
A:django.contrib.auth.checks.codenames->set()
django.contrib.auth.checks.check_models_permissions(app_configs=None,**kwargs)
django.contrib.auth.checks.check_user_model(app_configs=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/admin.py----------------------------------------
A:django.contrib.auth.admin.csrf_protect_m->method_decorator(csrf_protect)
A:django.contrib.auth.admin.sensitive_post_parameters_m->method_decorator(sensitive_post_parameters())
A:django.contrib.auth.admin.qs->kwargs.get('queryset', db_field.remote_field.model.objects)
A:django.contrib.auth.admin.kwargs['queryset']->kwargs.get('queryset', db_field.remote_field.model.objects).select_related('content_type')
A:django.contrib.auth.admin.username_field->self.model._meta.get_field(self.model.USERNAME_FIELD)
A:django.contrib.auth.admin.user->self.get_object(request, unquote(id))
A:django.contrib.auth.admin.form->self.change_password_form(user)
A:django.contrib.auth.admin.change_message->self.construct_change_message(request, form, None)
A:django.contrib.auth.admin.msg->gettext('Password changed successfully.')
A:django.contrib.auth.admin.adminForm->django.contrib.admin.helpers.AdminForm(form, fieldsets, {})
A:django.contrib.auth.admin.request.POST->request.POST.copy()
django.contrib.auth.admin.GroupAdmin(admin.ModelAdmin)
django.contrib.auth.admin.GroupAdmin.formfield_for_manytomany(self,db_field,request=None,**kwargs)
django.contrib.auth.admin.UserAdmin(admin.ModelAdmin)
django.contrib.auth.admin.UserAdmin._add_view(self,request,form_url='',extra_context=None)
django.contrib.auth.admin.UserAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.auth.admin.UserAdmin.get_fieldsets(self,request,obj=None)
django.contrib.auth.admin.UserAdmin.get_form(self,request,obj=None,**kwargs)
django.contrib.auth.admin.UserAdmin.get_urls(self)
django.contrib.auth.admin.UserAdmin.lookup_allowed(self,lookup,value)
django.contrib.auth.admin.UserAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.auth.admin.UserAdmin.user_change_password(self,request,id,form_url='')


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/validators.py----------------------------------------
A:django.contrib.auth.validators.message->_('Enter a valid username. This value may contain only letters, numbers, and @/./+/-/_ characters.')
django.contrib.auth.validators.ASCIIUsernameValidator(validators.RegexValidator)
django.contrib.auth.validators.UnicodeUsernameValidator(validators.RegexValidator)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/hashers.py----------------------------------------
A:django.contrib.auth.hashers.preferred->get_hasher(preferred)
A:django.contrib.auth.hashers.hasher->hasher_cls()
A:django.contrib.auth.hashers.is_correct->hasher_cls().verify(password, encoded)
A:django.contrib.auth.hashers.hasher_cls->import_string(hasher_path)
A:django.contrib.auth.hashers.hashers->get_hashers_by_algorithm()
A:django.contrib.auth.hashers.module->importlib.import_module(mod_path)
A:django.contrib.auth.hashers.char_count->math.ceil(self.salt_entropy / math.log2(len(RANDOM_STRING_CHARS)))
A:django.contrib.auth.hashers.hash->self._load_library().crypt(password, salt)
A:django.contrib.auth.hashers.(algorithm, iterations, salt, hash)->encoded.split('$', 3)
A:django.contrib.auth.hashers.decoded->self.decode(encoded)
A:django.contrib.auth.hashers.encoded_2->self.encode(password, '')
A:django.contrib.auth.hashers.update_salt->must_update_salt(decoded['salt'], self.salt_entropy)
A:django.contrib.auth.hashers.argon2->self._load_library()
A:django.contrib.auth.hashers.params->self._load_library().extract_parameters('$' + rest)
A:django.contrib.auth.hashers.data->self._load_library().crypt(password, decoded['hash'])
A:django.contrib.auth.hashers.(algorithm, rest)->encoded.split('$', 1)
A:django.contrib.auth.hashers.(variety, *_, b64salt, hash)->rest.split('$')
A:django.contrib.auth.hashers.salt->base64.b64decode(b64salt).decode('latin1')
A:django.contrib.auth.hashers.new_params->self.params()
A:django.contrib.auth.hashers.bcrypt->self._load_library()
A:django.contrib.auth.hashers.password->binascii.hexlify(self.digest(password).digest())
A:django.contrib.auth.hashers.(algorithm, empty, algostr, work_factor, data)->encoded.split('$', 4)
A:django.contrib.auth.hashers.(algorithm, data)->encoded.split('$', 1)
A:django.contrib.auth.hashers.(_, data)->encoded.split('$', 1)
A:django.contrib.auth.hashers.(algorithm, salt, hash)->encoded.split('$', 2)
A:django.contrib.auth.hashers.crypt->self._load_library()
django.contrib.auth.hashers.Argon2PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.Argon2PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.Argon2PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.Argon2PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.Argon2PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.Argon2PasswordHasher.params(self)
django.contrib.auth.hashers.Argon2PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.Argon2PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.BCryptPasswordHasher(BCryptSHA256PasswordHasher)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.salt(self)
django.contrib.auth.hashers.BCryptSHA256PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.BasePasswordHasher
django.contrib.auth.hashers.BasePasswordHasher._load_library(self)
django.contrib.auth.hashers.BasePasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.BasePasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.BasePasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.BasePasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.BasePasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.BasePasswordHasher.salt(self)
django.contrib.auth.hashers.BasePasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.CryptPasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.CryptPasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.CryptPasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.CryptPasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.CryptPasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.CryptPasswordHasher.salt(self)
django.contrib.auth.hashers.CryptPasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.MD5PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.MD5PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.MD5PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.MD5PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.MD5PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.MD5PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.MD5PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.PBKDF2PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.encode(self,password,salt,iterations=None)
django.contrib.auth.hashers.PBKDF2PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.PBKDF2PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher)
django.contrib.auth.hashers.SHA1PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.SHA1PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.SHA1PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.SHA1PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.SHA1PasswordHasher.must_update(self,encoded)
django.contrib.auth.hashers.SHA1PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.SHA1PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.salt(self)
django.contrib.auth.hashers.UnsaltedMD5PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher(BasePasswordHasher)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.decode(self,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.encode(self,password,salt)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.harden_runtime(self,password,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.safe_summary(self,encoded)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.salt(self)
django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher.verify(self,password,encoded)
django.contrib.auth.hashers.check_password(password,encoded,setter=None,preferred='default')
django.contrib.auth.hashers.get_hasher(algorithm='default')
django.contrib.auth.hashers.get_hashers()
django.contrib.auth.hashers.get_hashers_by_algorithm()
django.contrib.auth.hashers.identify_hasher(encoded)
django.contrib.auth.hashers.is_password_usable(encoded)
django.contrib.auth.hashers.make_password(password,salt=None,hasher='default')
django.contrib.auth.hashers.mask_hash(hash,show=6,char='*')
django.contrib.auth.hashers.must_update_salt(salt,expected_entropy)
django.contrib.auth.hashers.reset_hashers(**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/signals.py----------------------------------------
A:django.contrib.auth.signals.user_logged_in->Signal()
A:django.contrib.auth.signals.user_login_failed->Signal()
A:django.contrib.auth.signals.user_logged_out->Signal()


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/mixins.py----------------------------------------
A:django.contrib.auth.mixins.path->self.request.get_full_path()
A:django.contrib.auth.mixins.resolved_login_url->resolve_url(self.get_login_url())
A:django.contrib.auth.mixins.perms->self.get_permission_required()
A:django.contrib.auth.mixins.user_test_result->self.get_test_func()()
django.contrib.auth.mixins.AccessMixin
django.contrib.auth.mixins.AccessMixin.get_login_url(self)
django.contrib.auth.mixins.AccessMixin.get_permission_denied_message(self)
django.contrib.auth.mixins.AccessMixin.get_redirect_field_name(self)
django.contrib.auth.mixins.AccessMixin.handle_no_permission(self)
django.contrib.auth.mixins.LoginRequiredMixin(AccessMixin)
django.contrib.auth.mixins.LoginRequiredMixin.dispatch(self,request,*args,**kwargs)
django.contrib.auth.mixins.PermissionRequiredMixin(AccessMixin)
django.contrib.auth.mixins.PermissionRequiredMixin.dispatch(self,request,*args,**kwargs)
django.contrib.auth.mixins.PermissionRequiredMixin.get_permission_required(self)
django.contrib.auth.mixins.PermissionRequiredMixin.has_permission(self)
django.contrib.auth.mixins.UserPassesTestMixin(AccessMixin)
django.contrib.auth.mixins.UserPassesTestMixin.dispatch(self,request,*args,**kwargs)
django.contrib.auth.mixins.UserPassesTestMixin.get_test_func(self)
django.contrib.auth.mixins.UserPassesTestMixin.test_func(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/middleware.py----------------------------------------
A:django.contrib.auth.middleware.request._cached_user->django.contrib.auth.get_user(request)
A:django.contrib.auth.middleware.request.user->SimpleLazyObject(lambda : get_user(request))
A:django.contrib.auth.middleware.user->django.contrib.auth.authenticate(request, remote_user=username)
A:django.contrib.auth.middleware.backend->django.contrib.auth.load_backend(backend_str)
A:django.contrib.auth.middleware.username->django.contrib.auth.load_backend(backend_str).clean_username(username)
A:django.contrib.auth.middleware.stored_backend->load_backend(request.session.get(auth.BACKEND_SESSION_KEY, ''))
django.contrib.auth.middleware.AuthenticationMiddleware(MiddlewareMixin)
django.contrib.auth.middleware.AuthenticationMiddleware.process_request(self,request)
django.contrib.auth.middleware.PersistentRemoteUserMiddleware(RemoteUserMiddleware)
django.contrib.auth.middleware.RemoteUserMiddleware(MiddlewareMixin)
django.contrib.auth.middleware.RemoteUserMiddleware._remove_invalid_user(self,request)
django.contrib.auth.middleware.RemoteUserMiddleware.clean_username(self,username,request)
django.contrib.auth.middleware.RemoteUserMiddleware.process_request(self,request)
django.contrib.auth.middleware.get_user(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/apps.py----------------------------------------
A:django.contrib.auth.apps.verbose_name->_('Authentication and Authorization')
A:django.contrib.auth.apps.last_login_field->getattr(get_user_model(), 'last_login', None)
django.contrib.auth.apps.AuthConfig(AppConfig)
django.contrib.auth.apps.AuthConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/views.py----------------------------------------
A:django.contrib.auth.views.UserModel->get_user_model()
A:django.contrib.auth.views.success_url_allowed_hosts->set()
A:django.contrib.auth.views.redirect_to->self.request.POST.get(self.redirect_field_name, self.request.GET.get(self.redirect_field_name, ''))
A:django.contrib.auth.views.url->self.get_redirect_url()
A:django.contrib.auth.views.url_is_safe->url_has_allowed_host_and_scheme(url=next_page, allowed_hosts=self.get_success_url_allowed_hosts(), require_https=self.request.is_secure())
A:django.contrib.auth.views.kwargs->super().get_form_kwargs()
A:django.contrib.auth.views.context->super().get_context_data(**kwargs)
A:django.contrib.auth.views.current_site->get_current_site(self.request)
A:django.contrib.auth.views.next_page->self.request.POST.get(self.redirect_field_name, self.request.GET.get(self.redirect_field_name))
A:django.contrib.auth.views.login_url->resolve_url(login_url or settings.LOGIN_URL)
A:django.contrib.auth.views.resolved_url->resolve_url(login_url or settings.LOGIN_URL)
A:django.contrib.auth.views.login_url_parts->list(urlparse(resolved_url))
A:django.contrib.auth.views.querystring->QueryDict(login_url_parts[4], mutable=True)
A:django.contrib.auth.views.login_url_parts[4]->QueryDict(login_url_parts[4], mutable=True).urlencode(safe='/')
A:django.contrib.auth.views.success_url->reverse_lazy('password_change_done')
A:django.contrib.auth.views.title->_('Password change successful')
A:django.contrib.auth.views.self.user->self.get_user(kwargs['uidb64'])
A:django.contrib.auth.views.session_token->self.request.session.get(INTERNAL_RESET_SESSION_TOKEN)
A:django.contrib.auth.views.redirect_url->self.request.path.replace(token, self.reset_url_token)
A:django.contrib.auth.views.uid->urlsafe_base64_decode(uidb64).decode()
A:django.contrib.auth.views.user->form.save()
A:django.contrib.auth.views.context['login_url']->resolve_url(settings.LOGIN_URL)
django.contrib.auth.views.LoginView(SuccessURLAllowedHostsMixin,FormView)
django.contrib.auth.views.LoginView.dispatch(self,request,*args,**kwargs)
django.contrib.auth.views.LoginView.form_valid(self,form)
django.contrib.auth.views.LoginView.get_context_data(self,**kwargs)
django.contrib.auth.views.LoginView.get_form_class(self)
django.contrib.auth.views.LoginView.get_form_kwargs(self)
django.contrib.auth.views.LoginView.get_redirect_url(self)
django.contrib.auth.views.LoginView.get_success_url(self)
django.contrib.auth.views.LogoutView(SuccessURLAllowedHostsMixin,TemplateView)
django.contrib.auth.views.LogoutView.dispatch(self,request,*args,**kwargs)
django.contrib.auth.views.LogoutView.get_context_data(self,**kwargs)
django.contrib.auth.views.LogoutView.get_next_page(self)
django.contrib.auth.views.LogoutView.post(self,request,*args,**kwargs)
django.contrib.auth.views.PasswordChangeDoneView(PasswordContextMixin,TemplateView)
django.contrib.auth.views.PasswordChangeDoneView.dispatch(self,*args,**kwargs)
django.contrib.auth.views.PasswordChangeView(PasswordContextMixin,FormView)
django.contrib.auth.views.PasswordChangeView.dispatch(self,*args,**kwargs)
django.contrib.auth.views.PasswordChangeView.form_valid(self,form)
django.contrib.auth.views.PasswordChangeView.get_form_kwargs(self)
django.contrib.auth.views.PasswordContextMixin
django.contrib.auth.views.PasswordContextMixin.get_context_data(self,**kwargs)
django.contrib.auth.views.PasswordResetCompleteView(PasswordContextMixin,TemplateView)
django.contrib.auth.views.PasswordResetCompleteView.get_context_data(self,**kwargs)
django.contrib.auth.views.PasswordResetConfirmView(PasswordContextMixin,FormView)
django.contrib.auth.views.PasswordResetConfirmView.dispatch(self,*args,**kwargs)
django.contrib.auth.views.PasswordResetConfirmView.form_valid(self,form)
django.contrib.auth.views.PasswordResetConfirmView.get_context_data(self,**kwargs)
django.contrib.auth.views.PasswordResetConfirmView.get_form_kwargs(self)
django.contrib.auth.views.PasswordResetConfirmView.get_user(self,uidb64)
django.contrib.auth.views.PasswordResetDoneView(PasswordContextMixin,TemplateView)
django.contrib.auth.views.PasswordResetView(PasswordContextMixin,FormView)
django.contrib.auth.views.PasswordResetView.dispatch(self,*args,**kwargs)
django.contrib.auth.views.PasswordResetView.form_valid(self,form)
django.contrib.auth.views.SuccessURLAllowedHostsMixin
django.contrib.auth.views.SuccessURLAllowedHostsMixin.get_success_url_allowed_hosts(self)
django.contrib.auth.views.logout_then_login(request,login_url=None)
django.contrib.auth.views.redirect_to_login(next,login_url=None,redirect_field_name=REDIRECT_FIELD_NAME)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/tokens.py----------------------------------------
A:django.contrib.auth.tokens.(ts_b36, _)->token.split('-')
A:django.contrib.auth.tokens.ts->base36_to_int(ts_b36)
A:django.contrib.auth.tokens.now->self._now()
A:django.contrib.auth.tokens.ts_b36->int_to_base36(timestamp)
A:django.contrib.auth.tokens.email_field->user.get_email_field_name()
A:django.contrib.auth.tokens.default_token_generator->PasswordResetTokenGenerator()
django.contrib.auth.tokens.PasswordResetTokenGenerator(self)
django.contrib.auth.tokens.PasswordResetTokenGenerator.__init__(self)
django.contrib.auth.tokens.PasswordResetTokenGenerator._make_hash_value(self,user,timestamp)
django.contrib.auth.tokens.PasswordResetTokenGenerator._make_token_with_timestamp(self,user,timestamp,legacy=False)
django.contrib.auth.tokens.PasswordResetTokenGenerator._now(self)
django.contrib.auth.tokens.PasswordResetTokenGenerator._num_seconds(self,dt)
django.contrib.auth.tokens.PasswordResetTokenGenerator.check_token(self,user,token)
django.contrib.auth.tokens.PasswordResetTokenGenerator.make_token(self,user)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/backends.py----------------------------------------
A:django.contrib.auth.backends.UserModel->get_user_model()
A:django.contrib.auth.backends.username->self.clean_username(remote_user)
A:django.contrib.auth.backends.user->get_user_model()._default_manager.get_by_natural_key(username)
A:django.contrib.auth.backends.is_active->getattr(user, 'is_active', None)
A:django.contrib.auth.backends.user_groups_field->get_user_model()._meta.get_field('groups')
A:django.contrib.auth.backends.perms->perms.values_list('content_type__app_label', 'codename').order_by().values_list('content_type__app_label', 'codename').order_by()
A:django.contrib.auth.backends.user_obj._perm_cache->super().get_all_permissions(user_obj)
A:django.contrib.auth.backends.(app_label, codename)->perm.split('.')
A:django.contrib.auth.backends.user_q->Exists(Permission.objects.filter(permission_q))
A:django.contrib.auth.backends.(user, created)->get_user_model()._default_manager.get_or_create(**{UserModel.USERNAME_FIELD: username})
django.contrib.auth.backends.AllowAllUsersModelBackend(ModelBackend)
django.contrib.auth.backends.AllowAllUsersModelBackend.user_can_authenticate(self,user)
django.contrib.auth.backends.AllowAllUsersRemoteUserBackend(RemoteUserBackend)
django.contrib.auth.backends.AllowAllUsersRemoteUserBackend.user_can_authenticate(self,user)
django.contrib.auth.backends.BaseBackend
django.contrib.auth.backends.BaseBackend.authenticate(self,request,**kwargs)
django.contrib.auth.backends.BaseBackend.get_all_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.BaseBackend.get_group_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.BaseBackend.get_user(self,user_id)
django.contrib.auth.backends.BaseBackend.get_user_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.BaseBackend.has_perm(self,user_obj,perm,obj=None)
django.contrib.auth.backends.ModelBackend(BaseBackend)
django.contrib.auth.backends.ModelBackend._get_group_permissions(self,user_obj)
django.contrib.auth.backends.ModelBackend._get_permissions(self,user_obj,obj,from_name)
django.contrib.auth.backends.ModelBackend._get_user_permissions(self,user_obj)
django.contrib.auth.backends.ModelBackend.authenticate(self,request,username=None,password=None,**kwargs)
django.contrib.auth.backends.ModelBackend.get_all_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.ModelBackend.get_group_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.ModelBackend.get_user(self,user_id)
django.contrib.auth.backends.ModelBackend.get_user_permissions(self,user_obj,obj=None)
django.contrib.auth.backends.ModelBackend.has_module_perms(self,user_obj,app_label)
django.contrib.auth.backends.ModelBackend.has_perm(self,user_obj,perm,obj=None)
django.contrib.auth.backends.ModelBackend.user_can_authenticate(self,user)
django.contrib.auth.backends.ModelBackend.with_perm(self,perm,is_active=True,include_superusers=True,obj=None)
django.contrib.auth.backends.RemoteUserBackend(ModelBackend)
django.contrib.auth.backends.RemoteUserBackend.authenticate(self,request,remote_user)
django.contrib.auth.backends.RemoteUserBackend.clean_username(self,username)
django.contrib.auth.backends.RemoteUserBackend.configure_user(self,request,user)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/password_validation.py----------------------------------------
A:django.contrib.auth.password_validation.klass->import_string(validator['NAME'])
A:django.contrib.auth.password_validation.password_validators->get_default_password_validators()
A:django.contrib.auth.password_validation.password_changed->getattr(validator, 'password_changed', lambda *a: None)
A:django.contrib.auth.password_validation.help_texts->password_validators_help_texts(password_validators)
A:django.contrib.auth.password_validation.help_items->format_html_join('', '<li>{}</li>', ((help_text,) for help_text in help_texts))
A:django.contrib.auth.password_validation.password_validators_help_text_html->lazy(_password_validators_help_text_html, str)
A:django.contrib.auth.password_validation.value->getattr(user, attribute_name, None)
A:django.contrib.auth.password_validation.verbose_name->str(user._meta.get_field(attribute_name).verbose_name)
django.contrib.auth.password_validation.CommonPasswordValidator(self,password_list_path=DEFAULT_PASSWORD_LIST_PATH)
django.contrib.auth.password_validation.CommonPasswordValidator.__init__(self,password_list_path=DEFAULT_PASSWORD_LIST_PATH)
django.contrib.auth.password_validation.CommonPasswordValidator.get_help_text(self)
django.contrib.auth.password_validation.CommonPasswordValidator.validate(self,password,user=None)
django.contrib.auth.password_validation.MinimumLengthValidator(self,min_length=8)
django.contrib.auth.password_validation.MinimumLengthValidator.__init__(self,min_length=8)
django.contrib.auth.password_validation.MinimumLengthValidator.get_help_text(self)
django.contrib.auth.password_validation.MinimumLengthValidator.validate(self,password,user=None)
django.contrib.auth.password_validation.NumericPasswordValidator
django.contrib.auth.password_validation.NumericPasswordValidator.get_help_text(self)
django.contrib.auth.password_validation.NumericPasswordValidator.validate(self,password,user=None)
django.contrib.auth.password_validation.UserAttributeSimilarityValidator(self,user_attributes=DEFAULT_USER_ATTRIBUTES,max_similarity=0.7)
django.contrib.auth.password_validation.UserAttributeSimilarityValidator.__init__(self,user_attributes=DEFAULT_USER_ATTRIBUTES,max_similarity=0.7)
django.contrib.auth.password_validation.UserAttributeSimilarityValidator.get_help_text(self)
django.contrib.auth.password_validation.UserAttributeSimilarityValidator.validate(self,password,user=None)
django.contrib.auth.password_validation._password_validators_help_text_html(password_validators=None)
django.contrib.auth.password_validation.get_default_password_validators()
django.contrib.auth.password_validation.get_password_validators(validator_config)
django.contrib.auth.password_validation.password_changed(password,user=None,password_validators=None)
django.contrib.auth.password_validation.password_validators_help_texts(password_validators=None)
django.contrib.auth.password_validation.validate_password(password,user=None,password_validators=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/context_processors.py----------------------------------------
A:django.contrib.auth.context_processors.(app_label, perm_name)->perm_name.split('.', 1)
A:django.contrib.auth.context_processors.user->AnonymousUser()
django.contrib.auth.context_processors.PermLookupDict(self,user,app_label)
django.contrib.auth.context_processors.PermLookupDict.__bool__(self)
django.contrib.auth.context_processors.PermLookupDict.__getitem__(self,perm_name)
django.contrib.auth.context_processors.PermLookupDict.__init__(self,user,app_label)
django.contrib.auth.context_processors.PermLookupDict.__iter__(self)
django.contrib.auth.context_processors.PermLookupDict.__repr__(self)
django.contrib.auth.context_processors.PermWrapper(self,user)
django.contrib.auth.context_processors.PermWrapper.__contains__(self,perm_name)
django.contrib.auth.context_processors.PermWrapper.__getitem__(self,app_label)
django.contrib.auth.context_processors.PermWrapper.__init__(self,user)
django.contrib.auth.context_processors.PermWrapper.__iter__(self)
django.contrib.auth.context_processors.auth(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/__init__.py----------------------------------------
A:django.contrib.auth.__init__.backend->load_backend(backend_path)
A:django.contrib.auth.__init__.SENSITIVE_CREDENTIALS->re.compile('api|token|key|secret|password|signature', re.I)
A:django.contrib.auth.__init__.backend_signature->inspect.signature(backend.authenticate)
A:django.contrib.auth.__init__.user->load_backend(backend_path).get_user(user_id)
A:django.contrib.auth.__init__.session_auth_hash->load_backend(backend_path).get_user(user_id).get_session_auth_hash()
A:django.contrib.auth.__init__.backends->_get_backends(return_tuples=True)
A:django.contrib.auth.__init__.request.session[SESSION_KEY]->load_backend(backend_path).get_user(user_id)._meta.pk.value_to_string(user)
A:django.contrib.auth.__init__.request.user->AnonymousUser()
A:django.contrib.auth.__init__.user_id->_get_user_session_key(request)
A:django.contrib.auth.__init__.session_hash->request.session.get(HASH_SESSION_KEY)
A:django.contrib.auth.__init__.request.session[HASH_SESSION_KEY]->load_backend(backend_path).get_user(user_id).get_session_auth_hash()
django.contrib.auth.__init__._clean_credentials(credentials)
django.contrib.auth.__init__._get_backends(return_tuples=False)
django.contrib.auth.__init__._get_user_session_key(request)
django.contrib.auth.__init__.authenticate(request=None,**credentials)
django.contrib.auth.__init__.get_backends()
django.contrib.auth.__init__.get_permission_codename(action,opts)
django.contrib.auth.__init__.get_user(request)
django.contrib.auth.__init__.get_user_model()
django.contrib.auth.__init__.load_backend(path)
django.contrib.auth.__init__.login(request,user,backend=None)
django.contrib.auth.__init__.logout(request)
django.contrib.auth.__init__.update_session_auth_hash(request,user)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/base_user.py----------------------------------------
A:django.contrib.auth.base_user.(email_name, domain_part)->email.strip().rsplit('@', 1)
A:django.contrib.auth.base_user.password->django.db.models.CharField(_('password'), max_length=128)
A:django.contrib.auth.base_user.last_login->django.db.models.DateTimeField(_('last login'), blank=True, null=True)
A:django.contrib.auth.base_user.self.password->make_password(None)
django.contrib.auth.base_user.AbstractBaseUser(models.Model)
django.contrib.auth.base_user.AbstractBaseUser.Meta
django.contrib.auth.base_user.AbstractBaseUser.__str__(self)
django.contrib.auth.base_user.AbstractBaseUser._legacy_get_session_auth_hash(self)
django.contrib.auth.base_user.AbstractBaseUser.check_password(self,raw_password)
django.contrib.auth.base_user.AbstractBaseUser.clean(self)
django.contrib.auth.base_user.AbstractBaseUser.get_email_field_name(cls)
django.contrib.auth.base_user.AbstractBaseUser.get_session_auth_hash(self)
django.contrib.auth.base_user.AbstractBaseUser.get_username(self)
django.contrib.auth.base_user.AbstractBaseUser.has_usable_password(self)
django.contrib.auth.base_user.AbstractBaseUser.is_anonymous(self)
django.contrib.auth.base_user.AbstractBaseUser.is_authenticated(self)
django.contrib.auth.base_user.AbstractBaseUser.natural_key(self)
django.contrib.auth.base_user.AbstractBaseUser.normalize_username(cls,username)
django.contrib.auth.base_user.AbstractBaseUser.save(self,*args,**kwargs)
django.contrib.auth.base_user.AbstractBaseUser.set_password(self,raw_password)
django.contrib.auth.base_user.AbstractBaseUser.set_unusable_password(self)
django.contrib.auth.base_user.BaseUserManager(models.Manager)
django.contrib.auth.base_user.BaseUserManager.get_by_natural_key(self,username)
django.contrib.auth.base_user.BaseUserManager.make_random_password(self,length=10,allowed_chars='abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789')
django.contrib.auth.base_user.BaseUserManager.normalize_email(cls,email)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/models.py----------------------------------------
A:django.contrib.auth.models.user.last_login->django.utils.timezone.now()
A:django.contrib.auth.models.name->django.db.models.CharField(_('name'), max_length=150, unique=True)
A:django.contrib.auth.models.content_type->django.db.models.ForeignKey(ContentType, models.CASCADE, verbose_name=_('content type'))
A:django.contrib.auth.models.codename->django.db.models.CharField(_('codename'), max_length=100)
A:django.contrib.auth.models.objects->UserManager()
A:django.contrib.auth.models.verbose_name->_('user')
A:django.contrib.auth.models.verbose_name_plural->_('users')
A:django.contrib.auth.models.permissions->set()
A:django.contrib.auth.models.email->django.db.models.EmailField(_('email address'), blank=True)
A:django.contrib.auth.models.GlobalUserModel->django.apps.apps.get_model(self.model._meta.app_label, self.model._meta.object_name)
A:django.contrib.auth.models.username->django.db.models.CharField(_('username'), max_length=150, unique=True, help_text=_('Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'), validators=[username_validator], error_messages={'unique': _('A user with that username already exists.')})
A:django.contrib.auth.models.user->self.model(username=username, email=email, **extra_fields)
A:django.contrib.auth.models.user.password->make_password(password)
A:django.contrib.auth.models.backends->django.contrib.auth._get_backends(return_tuples=True)
A:django.contrib.auth.models.backend->django.contrib.auth.load_backend(backend)
A:django.contrib.auth.models.is_superuser->django.db.models.BooleanField(_('superuser status'), default=False, help_text=_('Designates that this user has all permissions without explicitly assigning them.'))
A:django.contrib.auth.models.groups->django.db.models.ManyToManyField(Group, verbose_name=_('groups'), blank=True, help_text=_('The groups this user belongs to. A user will get all permissions granted to each of their groups.'), related_name='user_set', related_query_name='user')
A:django.contrib.auth.models.user_permissions->django.db.models.ManyToManyField(Permission, verbose_name=_('user permissions'), blank=True, help_text=_('Specific permissions for this user.'), related_name='user_set', related_query_name='user')
A:django.contrib.auth.models.username_validator->UnicodeUsernameValidator()
A:django.contrib.auth.models.first_name->django.db.models.CharField(_('first name'), max_length=150, blank=True)
A:django.contrib.auth.models.last_name->django.db.models.CharField(_('last name'), max_length=150, blank=True)
A:django.contrib.auth.models.is_staff->django.db.models.BooleanField(_('staff status'), default=False, help_text=_('Designates whether the user can log into this admin site.'))
A:django.contrib.auth.models.is_active->django.db.models.BooleanField(_('active'), default=True, help_text=_('Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'))
A:django.contrib.auth.models.date_joined->django.db.models.DateTimeField(_('date joined'), default=timezone.now)
A:django.contrib.auth.models.self.email->self.__class__.objects.normalize_email(self.email)
A:django.contrib.auth.models._groups->EmptyManager(Group)
A:django.contrib.auth.models._user_permissions->EmptyManager(Permission)
django.contrib.auth.AnonymousUser
django.contrib.auth.AnonymousUser.__eq__(self,other)
django.contrib.auth.AnonymousUser.__hash__(self)
django.contrib.auth.AnonymousUser.__int__(self)
django.contrib.auth.AnonymousUser.__str__(self)
django.contrib.auth.AnonymousUser.check_password(self,raw_password)
django.contrib.auth.AnonymousUser.delete(self)
django.contrib.auth.AnonymousUser.get_all_permissions(self,obj=None)
django.contrib.auth.AnonymousUser.get_group_permissions(self,obj=None)
django.contrib.auth.AnonymousUser.get_user_permissions(self,obj=None)
django.contrib.auth.AnonymousUser.get_username(self)
django.contrib.auth.AnonymousUser.groups(self)
django.contrib.auth.AnonymousUser.has_module_perms(self,module)
django.contrib.auth.AnonymousUser.has_perm(self,perm,obj=None)
django.contrib.auth.AnonymousUser.has_perms(self,perm_list,obj=None)
django.contrib.auth.AnonymousUser.is_anonymous(self)
django.contrib.auth.AnonymousUser.is_authenticated(self)
django.contrib.auth.AnonymousUser.save(self)
django.contrib.auth.AnonymousUser.set_password(self,raw_password)
django.contrib.auth.AnonymousUser.user_permissions(self)
django.contrib.auth.models.AbstractUser(AbstractBaseUser,PermissionsMixin)
django.contrib.auth.models.AbstractUser.Meta
django.contrib.auth.models.AbstractUser.clean(self)
django.contrib.auth.models.AbstractUser.email_user(self,subject,message,from_email=None,**kwargs)
django.contrib.auth.models.AbstractUser.get_full_name(self)
django.contrib.auth.models.AbstractUser.get_short_name(self)
django.contrib.auth.models.AnonymousUser
django.contrib.auth.models.AnonymousUser.__eq__(self,other)
django.contrib.auth.models.AnonymousUser.__hash__(self)
django.contrib.auth.models.AnonymousUser.__int__(self)
django.contrib.auth.models.AnonymousUser.__str__(self)
django.contrib.auth.models.AnonymousUser.check_password(self,raw_password)
django.contrib.auth.models.AnonymousUser.delete(self)
django.contrib.auth.models.AnonymousUser.get_all_permissions(self,obj=None)
django.contrib.auth.models.AnonymousUser.get_group_permissions(self,obj=None)
django.contrib.auth.models.AnonymousUser.get_user_permissions(self,obj=None)
django.contrib.auth.models.AnonymousUser.get_username(self)
django.contrib.auth.models.AnonymousUser.groups(self)
django.contrib.auth.models.AnonymousUser.has_module_perms(self,module)
django.contrib.auth.models.AnonymousUser.has_perm(self,perm,obj=None)
django.contrib.auth.models.AnonymousUser.has_perms(self,perm_list,obj=None)
django.contrib.auth.models.AnonymousUser.is_anonymous(self)
django.contrib.auth.models.AnonymousUser.is_authenticated(self)
django.contrib.auth.models.AnonymousUser.save(self)
django.contrib.auth.models.AnonymousUser.set_password(self,raw_password)
django.contrib.auth.models.AnonymousUser.user_permissions(self)
django.contrib.auth.models.Group(models.Model)
django.contrib.auth.models.Group.Meta
django.contrib.auth.models.Group.__str__(self)
django.contrib.auth.models.Group.natural_key(self)
django.contrib.auth.models.GroupManager(models.Manager)
django.contrib.auth.models.GroupManager.get_by_natural_key(self,name)
django.contrib.auth.models.Permission(models.Model)
django.contrib.auth.models.Permission.Meta
django.contrib.auth.models.Permission.__str__(self)
django.contrib.auth.models.Permission.natural_key(self)
django.contrib.auth.models.PermissionManager(models.Manager)
django.contrib.auth.models.PermissionManager.get_by_natural_key(self,codename,app_label,model)
django.contrib.auth.models.PermissionsMixin(models.Model)
django.contrib.auth.models.PermissionsMixin.Meta
django.contrib.auth.models.PermissionsMixin.get_all_permissions(self,obj=None)
django.contrib.auth.models.PermissionsMixin.get_group_permissions(self,obj=None)
django.contrib.auth.models.PermissionsMixin.get_user_permissions(self,obj=None)
django.contrib.auth.models.PermissionsMixin.has_module_perms(self,app_label)
django.contrib.auth.models.PermissionsMixin.has_perm(self,perm,obj=None)
django.contrib.auth.models.PermissionsMixin.has_perms(self,perm_list,obj=None)
django.contrib.auth.models.User(AbstractUser)
django.contrib.auth.models.User.Meta(AbstractUser.Meta)
django.contrib.auth.models.UserManager(BaseUserManager)
django.contrib.auth.models.UserManager._create_user(self,username,email,password,**extra_fields)
django.contrib.auth.models.UserManager.create_superuser(self,username,email=None,password=None,**extra_fields)
django.contrib.auth.models.UserManager.create_user(self,username,email=None,password=None,**extra_fields)
django.contrib.auth.models.UserManager.with_perm(self,perm,is_active=True,include_superusers=True,backend=None,obj=None)
django.contrib.auth.models._user_get_permissions(user,obj,from_name)
django.contrib.auth.models._user_has_module_perms(user,app_label)
django.contrib.auth.models._user_has_perm(user,perm,obj)
django.contrib.auth.models.update_last_login(sender,user,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/decorators.py----------------------------------------
A:django.contrib.auth.decorators.path->request.get_full_path()
A:django.contrib.auth.decorators.resolved_login_url->resolve_url(login_url or settings.LOGIN_URL)
A:django.contrib.auth.decorators.actual_decorator->user_passes_test(lambda u: u.is_authenticated, login_url=login_url, redirect_field_name=redirect_field_name)
django.contrib.auth.decorators.login_required(function=None,redirect_field_name=REDIRECT_FIELD_NAME,login_url=None)
django.contrib.auth.decorators.permission_required(perm,login_url=None,raise_exception=False)
django.contrib.auth.decorators.user_passes_test(test_func,login_url=None,redirect_field_name=REDIRECT_FIELD_NAME)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/urls.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/forms.py----------------------------------------
A:django.contrib.auth.forms.UserModel->get_user_model()
A:django.contrib.auth.forms.context->super().get_context(name, value, attrs)
A:django.contrib.auth.forms.hasher->identify_hasher(value)
A:django.contrib.auth.forms.password1->self.cleaned_data.get('password1')
A:django.contrib.auth.forms.password2->self.cleaned_data.get('password2')
A:django.contrib.auth.forms.password->self.cleaned_data.get('password')
A:django.contrib.auth.forms.user->super().save(commit=False)
A:django.contrib.auth.forms.password.help_text->self.cleaned_data.get('password').help_text.format('../password/')
A:django.contrib.auth.forms.user_permissions->self.fields.get('user_permissions')
A:django.contrib.auth.forms.user_permissions.queryset->self.fields.get('user_permissions').queryset.select_related('content_type')
A:django.contrib.auth.forms.username->self.cleaned_data.get('username')
A:django.contrib.auth.forms.self.username_field->get_user_model()._meta.get_field(UserModel.USERNAME_FIELD)
A:django.contrib.auth.forms.self.fields['username'].label->capfirst(self.username_field.verbose_name)
A:django.contrib.auth.forms.self.user_cache->authenticate(self.request, username=username, password=password)
A:django.contrib.auth.forms.email->django.forms.EmailField(label=_('Email'), max_length=254, widget=forms.EmailInput(attrs={'autocomplete': 'email'}))
A:django.contrib.auth.forms.subject->''.join(subject.splitlines())
A:django.contrib.auth.forms.body->django.template.loader.render_to_string(email_template_name, context)
A:django.contrib.auth.forms.email_message->EmailMultiAlternatives(subject, body, from_email, [to_email])
A:django.contrib.auth.forms.html_email->django.template.loader.render_to_string(html_email_template_name, context)
A:django.contrib.auth.forms.email_field_name->get_user_model().get_email_field_name()
A:django.contrib.auth.forms.active_users->get_user_model()._default_manager.filter(**{'%s__iexact' % email_field_name: email, 'is_active': True})
A:django.contrib.auth.forms.current_site->get_current_site(request)
A:django.contrib.auth.forms.user_email->getattr(user, email_field_name)
A:django.contrib.auth.forms.new_password1->django.forms.CharField(label=_('New password'), widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}), strip=False, help_text=password_validation.password_validators_help_text_html())
A:django.contrib.auth.forms.new_password2->django.forms.CharField(label=_('New password confirmation'), strip=False, widget=forms.PasswordInput(attrs={'autocomplete': 'new-password'}))
A:django.contrib.auth.forms.old_password->django.forms.CharField(label=_('Old password'), strip=False, widget=forms.PasswordInput(attrs={'autocomplete': 'current-password', 'autofocus': True}))
django.contrib.auth.forms.AdminPasswordChangeForm(self,user,*args,**kwargs)
django.contrib.auth.forms.AdminPasswordChangeForm.__init__(self,user,*args,**kwargs)
django.contrib.auth.forms.AdminPasswordChangeForm.changed_data(self)
django.contrib.auth.forms.AdminPasswordChangeForm.clean_password2(self)
django.contrib.auth.forms.AdminPasswordChangeForm.save(self,commit=True)
django.contrib.auth.forms.AuthenticationForm(self,request=None,*args,**kwargs)
django.contrib.auth.forms.AuthenticationForm.__init__(self,request=None,*args,**kwargs)
django.contrib.auth.forms.AuthenticationForm.clean(self)
django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed(self,user)
django.contrib.auth.forms.AuthenticationForm.get_invalid_login_error(self)
django.contrib.auth.forms.AuthenticationForm.get_user(self)
django.contrib.auth.forms.PasswordChangeForm(SetPasswordForm)
django.contrib.auth.forms.PasswordChangeForm.clean_old_password(self)
django.contrib.auth.forms.PasswordResetForm(forms.Form)
django.contrib.auth.forms.PasswordResetForm.get_users(self,email)
django.contrib.auth.forms.PasswordResetForm.save(self,domain_override=None,subject_template_name='registration/password_reset_subject.txt',email_template_name='registration/password_reset_email.html',use_https=False,token_generator=default_token_generator,from_email=None,request=None,html_email_template_name=None,extra_email_context=None)
django.contrib.auth.forms.PasswordResetForm.send_mail(self,subject_template_name,email_template_name,context,from_email,to_email,html_email_template_name=None)
django.contrib.auth.forms.ReadOnlyPasswordHashField(self,*args,**kwargs)
django.contrib.auth.forms.ReadOnlyPasswordHashField.__init__(self,*args,**kwargs)
django.contrib.auth.forms.ReadOnlyPasswordHashWidget(forms.Widget)
django.contrib.auth.forms.ReadOnlyPasswordHashWidget.get_context(self,name,value,attrs)
django.contrib.auth.forms.SetPasswordForm(self,user,*args,**kwargs)
django.contrib.auth.forms.SetPasswordForm.__init__(self,user,*args,**kwargs)
django.contrib.auth.forms.SetPasswordForm.clean_new_password2(self)
django.contrib.auth.forms.SetPasswordForm.save(self,commit=True)
django.contrib.auth.forms.UserChangeForm(self,*args,**kwargs)
django.contrib.auth.forms.UserChangeForm.Meta
django.contrib.auth.forms.UserChangeForm.__init__(self,*args,**kwargs)
django.contrib.auth.forms.UserCreationForm(self,*args,**kwargs)
django.contrib.auth.forms.UserCreationForm.Meta
django.contrib.auth.forms.UserCreationForm.__init__(self,*args,**kwargs)
django.contrib.auth.forms.UserCreationForm._post_clean(self)
django.contrib.auth.forms.UserCreationForm.clean_password2(self)
django.contrib.auth.forms.UserCreationForm.save(self,commit=True)
django.contrib.auth.forms.UsernameField(forms.CharField)
django.contrib.auth.forms.UsernameField.to_python(self,value)
django.contrib.auth.forms.UsernameField.widget_attrs(self,widget)
django.contrib.auth.forms._unicode_ci_compare(s1,s2)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0002_alter_permission_name_max_length.py----------------------------------------
django.contrib.auth.migrations.0002_alter_permission_name_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0008_alter_user_username_max_length.py----------------------------------------
django.contrib.auth.migrations.0008_alter_user_username_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0001_initial.py----------------------------------------
django.contrib.auth.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0012_alter_user_first_name_max_length.py----------------------------------------
django.contrib.auth.migrations.0012_alter_user_first_name_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0006_require_contenttypes_0002.py----------------------------------------
django.contrib.auth.migrations.0006_require_contenttypes_0002.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0003_alter_user_email_max_length.py----------------------------------------
django.contrib.auth.migrations.0003_alter_user_email_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0009_alter_user_last_name_max_length.py----------------------------------------
django.contrib.auth.migrations.0009_alter_user_last_name_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0005_alter_user_last_login_null.py----------------------------------------
django.contrib.auth.migrations.0005_alter_user_last_login_null.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0004_alter_user_username_opts.py----------------------------------------
django.contrib.auth.migrations.0004_alter_user_username_opts.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0007_alter_validators_add_error_messages.py----------------------------------------
django.contrib.auth.migrations.0007_alter_validators_add_error_messages.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0011_update_proxy_permissions.py----------------------------------------
A:django.contrib.auth.migrations.0011_update_proxy_permissions.style->color_style()
A:django.contrib.auth.migrations.0011_update_proxy_permissions.Permission->apps.get_model('auth', 'Permission')
A:django.contrib.auth.migrations.0011_update_proxy_permissions.ContentType->apps.get_model('contenttypes', 'ContentType')
A:django.contrib.auth.migrations.0011_update_proxy_permissions.permissions_query->Q(codename__in=proxy_default_permissions_codenames)
A:django.contrib.auth.migrations.0011_update_proxy_permissions.content_type_manager->apps.get_model('contenttypes', 'ContentType').objects.db_manager(alias)
A:django.contrib.auth.migrations.0011_update_proxy_permissions.concrete_content_type->apps.get_model('contenttypes', 'ContentType').objects.db_manager(alias).get_for_model(Model, for_concrete_model=True)
A:django.contrib.auth.migrations.0011_update_proxy_permissions.proxy_content_type->apps.get_model('contenttypes', 'ContentType').objects.db_manager(alias).get_for_model(Model, for_concrete_model=False)
A:django.contrib.auth.migrations.0011_update_proxy_permissions.old->'{}_{}'.format(old_content_type.app_label, old_content_type.model)
A:django.contrib.auth.migrations.0011_update_proxy_permissions.new->'{}_{}'.format(new_content_type.app_label, new_content_type.model)
django.contrib.auth.migrations.0011_update_proxy_permissions.Migration(migrations.Migration)
django.contrib.auth.migrations.0011_update_proxy_permissions.revert_proxy_model_permissions(apps,schema_editor)
django.contrib.auth.migrations.0011_update_proxy_permissions.update_proxy_model_permissions(apps,schema_editor,reverse=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/0010_alter_group_name_max_length.py----------------------------------------
django.contrib.auth.migrations.0010_alter_group_name_max_length.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/management/__init__.py----------------------------------------
A:django.contrib.auth.management.__init__.app_config->apps.get_app_config(app_label)
A:django.contrib.auth.management.__init__.ContentType->apps.get_model('contenttypes', 'ContentType')
A:django.contrib.auth.management.__init__.Permission->apps.get_model('auth', 'Permission')
A:django.contrib.auth.management.__init__.ctypes->set()
A:django.contrib.auth.management.__init__.ctype->apps.get_model('contenttypes', 'ContentType').objects.db_manager(using).get_for_model(klass, for_concrete_model=False)
A:django.contrib.auth.management.__init__.all_perms->set(Permission.objects.using(using).filter(content_type__in=ctypes).values_list('content_type', 'codename'))
A:django.contrib.auth.management.__init__.result->getpass.getuser()
A:django.contrib.auth.management.__init__.default_username->unicodedata.normalize('NFKD', default_username).encode('ascii', 'ignore').decode('ascii').replace(' ', '').lower()
django.contrib.auth.management.__init__._get_all_permissions(opts)
django.contrib.auth.management.__init__._get_builtin_permissions(opts)
django.contrib.auth.management.__init__.create_permissions(app_config,verbosity=2,interactive=True,using=DEFAULT_DB_ALIAS,apps=global_apps,**kwargs)
django.contrib.auth.management.__init__.get_default_username(check_db=True,database=DEFAULT_DB_ALIAS)
django.contrib.auth.management.__init__.get_system_username()


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/management/commands/changepassword.py----------------------------------------
A:django.contrib.auth.management.commands.changepassword.UserModel->get_user_model()
A:django.contrib.auth.management.commands.changepassword.p->getpass.getpass(prompt=prompt)
A:django.contrib.auth.management.commands.changepassword.username->getpass.getuser()
A:django.contrib.auth.management.commands.changepassword.u->get_user_model()._default_manager.using(options['database']).get(**{UserModel.USERNAME_FIELD: username})
A:django.contrib.auth.management.commands.changepassword.p1->self._get_pass()
A:django.contrib.auth.management.commands.changepassword.p2->self._get_pass('Password (again): ')
django.contrib.auth.management.commands.changepassword.Command(BaseCommand)
django.contrib.auth.management.commands.changepassword.Command._get_pass(self,prompt='Password:')
django.contrib.auth.management.commands.changepassword.Command.add_arguments(self,parser)
django.contrib.auth.management.commands.changepassword.Command.handle(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/management/commands/createsuperuser.py----------------------------------------
A:django.contrib.auth.management.commands.createsuperuser.self.UserModel->get_user_model()
A:django.contrib.auth.management.commands.createsuperuser.self.username_field->self.UserModel._meta.get_field(self.UserModel.USERNAME_FIELD)
A:django.contrib.auth.management.commands.createsuperuser.field->self.UserModel._meta.get_field(field_name)
A:django.contrib.auth.management.commands.createsuperuser.self.stdin->options.get('stdin', sys.stdin)
A:django.contrib.auth.management.commands.createsuperuser.default_username->get_default_username(database=database)
A:django.contrib.auth.management.commands.createsuperuser.error_msg->self._validate_username(username, verbose_field_name, database)
A:django.contrib.auth.management.commands.createsuperuser.message->self._get_input_message(field)
A:django.contrib.auth.management.commands.createsuperuser.username->os.environ.get('DJANGO_SUPERUSER_' + self.UserModel.USERNAME_FIELD.upper())
A:django.contrib.auth.management.commands.createsuperuser.input_value->self.get_input_data(field, message)
A:django.contrib.auth.management.commands.createsuperuser.fake_user_data[field_name]->self.UserModel._meta.get_field(field_name).remote_field.model(input_value)
A:django.contrib.auth.management.commands.createsuperuser.password->getpass.getpass()
A:django.contrib.auth.management.commands.createsuperuser.password2->getpass.getpass('Password (again): ')
A:django.contrib.auth.management.commands.createsuperuser.response->input('Bypass password validation and create user anyway? [y/N]: ')
A:django.contrib.auth.management.commands.createsuperuser.user_data[field_name]->self.UserModel._meta.get_field(field_name).clean(value, None)
A:django.contrib.auth.management.commands.createsuperuser.raw_value->input(message)
A:django.contrib.auth.management.commands.createsuperuser.val->self.UserModel._meta.get_field(field_name).clean(raw_value, None)
django.contrib.auth.management.commands.createsuperuser.Command(self,*args,**kwargs)
django.contrib.auth.management.commands.createsuperuser.Command.__init__(self,*args,**kwargs)
django.contrib.auth.management.commands.createsuperuser.Command._get_input_message(self,field,default=None)
django.contrib.auth.management.commands.createsuperuser.Command._validate_username(self,username,verbose_field_name,database)
django.contrib.auth.management.commands.createsuperuser.Command.add_arguments(self,parser)
django.contrib.auth.management.commands.createsuperuser.Command.execute(self,*args,**options)
django.contrib.auth.management.commands.createsuperuser.Command.get_input_data(self,field,message,default=None)
django.contrib.auth.management.commands.createsuperuser.Command.handle(self,*args,**options)
django.contrib.auth.management.commands.createsuperuser.NotRunningInTTYException(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/handlers/modwsgi.py----------------------------------------
A:django.contrib.auth.handlers.modwsgi.UserModel->django.contrib.auth.get_user_model()
A:django.contrib.auth.handlers.modwsgi.user->django.contrib.auth.get_user_model()._default_manager.get_by_natural_key(username)
django.contrib.auth.handlers.modwsgi.check_password(environ,username,password)
django.contrib.auth.handlers.modwsgi.groups_for_user(environ,username)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/auth/handlers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/storage.py----------------------------------------
A:django.contrib.staticfiles.storage.compiled->re.compile(pattern, re.IGNORECASE)
A:django.contrib.staticfiles.storage.md5->hashlib.md5()
A:django.contrib.staticfiles.storage.parsed_name->urlsplit(unquote(name))
A:django.contrib.staticfiles.storage.clean_name->urlsplit(unquote(name)).path.strip()
A:django.contrib.staticfiles.storage.content->self.read_manifest()
A:django.contrib.staticfiles.storage.file_hash->self.file_hash(clean_name, content)
A:django.contrib.staticfiles.storage.(path, filename)->os.path.split(clean_name)
A:django.contrib.staticfiles.storage.(root, ext)->os.path.splitext(filename)
A:django.contrib.staticfiles.storage.hashed_name->self.clean_name(saved_name)
A:django.contrib.staticfiles.storage.unparsed_name->list(parsed_name)
A:django.contrib.staticfiles.storage.(clean_name, fragment)->urldefrag(name)
A:django.contrib.staticfiles.storage.final_url->urlunsplit(urlparts)
A:django.contrib.staticfiles.storage.urlparts->list(urlsplit(final_url))
A:django.contrib.staticfiles.storage.(matched, url)->matchobj.groups()
A:django.contrib.staticfiles.storage.(url_path, fragment)->urldefrag(url)
A:django.contrib.staticfiles.storage.target_name->posixpath.join(posixpath.dirname(source_name), url_path)
A:django.contrib.staticfiles.storage.hashed_url->self._url(self._stored_name, unquote(target_name), force=True, hashed_files=hashed_files)
A:django.contrib.staticfiles.storage.transformed_url->'/'.join(url_path.split('/')[:-1] + hashed_url.split('/')[-1:])
A:django.contrib.staticfiles.storage.cleaned_name->self.clean_name(name)
A:django.contrib.staticfiles.storage.hash_key->self.hash_key(clean_name)
A:django.contrib.staticfiles.storage.hashed_file_exists->self.exists(hashed_name)
A:django.contrib.staticfiles.storage.converter->self.url_converter(name, hashed_files, template)
A:django.contrib.staticfiles.storage.content_file->ContentFile(content.encode())
A:django.contrib.staticfiles.storage.saved_name->self._save(hashed_name, original_file)
A:django.contrib.staticfiles.storage.name->posixpath.normpath(name)
A:django.contrib.staticfiles.storage.cache_name->self.clean_name(self.hashed_name(name))
A:django.contrib.staticfiles.storage.self.hashed_files->self.load_manifest()
A:django.contrib.staticfiles.storage.stored->json.loads(content)
A:django.contrib.staticfiles.storage.version->json.loads(content).get('version')
A:django.contrib.staticfiles.storage.contents->json.dumps(payload).encode()
A:django.contrib.staticfiles.storage.self._wrapped->get_storage_class(settings.STATICFILES_STORAGE)()
A:django.contrib.staticfiles.storage.staticfiles_storage->ConfiguredStorage()
django.contrib.staticfiles.storage.ConfiguredStorage(LazyObject)
django.contrib.staticfiles.storage.ConfiguredStorage._setup(self)
django.contrib.staticfiles.storage.HashedFilesMixin(self,*args,**kwargs)
django.contrib.staticfiles.storage.HashedFilesMixin.__init__(self,*args,**kwargs)
django.contrib.staticfiles.storage.HashedFilesMixin._post_process(self,paths,adjustable_paths,hashed_files)
django.contrib.staticfiles.storage.HashedFilesMixin._stored_name(self,name,hashed_files)
django.contrib.staticfiles.storage.HashedFilesMixin._url(self,hashed_name_func,name,force=False,hashed_files=None)
django.contrib.staticfiles.storage.HashedFilesMixin.clean_name(self,name)
django.contrib.staticfiles.storage.HashedFilesMixin.file_hash(self,name,content=None)
django.contrib.staticfiles.storage.HashedFilesMixin.hash_key(self,name)
django.contrib.staticfiles.storage.HashedFilesMixin.hashed_name(self,name,content=None,filename=None)
django.contrib.staticfiles.storage.HashedFilesMixin.post_process(self,paths,dry_run=False,**options)
django.contrib.staticfiles.storage.HashedFilesMixin.stored_name(self,name)
django.contrib.staticfiles.storage.HashedFilesMixin.url(self,name,force=False)
django.contrib.staticfiles.storage.HashedFilesMixin.url_converter(self,name,hashed_files,template=None)
django.contrib.staticfiles.storage.ManifestFilesMixin(self,*args,**kwargs)
django.contrib.staticfiles.storage.ManifestFilesMixin.__init__(self,*args,**kwargs)
django.contrib.staticfiles.storage.ManifestFilesMixin.load_manifest(self)
django.contrib.staticfiles.storage.ManifestFilesMixin.post_process(self,*args,**kwargs)
django.contrib.staticfiles.storage.ManifestFilesMixin.read_manifest(self)
django.contrib.staticfiles.storage.ManifestFilesMixin.save_manifest(self)
django.contrib.staticfiles.storage.ManifestFilesMixin.stored_name(self,name)
django.contrib.staticfiles.storage.ManifestStaticFilesStorage(ManifestFilesMixin,StaticFilesStorage)
django.contrib.staticfiles.storage.StaticFilesStorage(self,location=None,base_url=None,*args,**kwargs)
django.contrib.staticfiles.storage.StaticFilesStorage.__init__(self,location=None,base_url=None,*args,**kwargs)
django.contrib.staticfiles.storage.StaticFilesStorage.path(self,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/checks.py----------------------------------------
A:django.contrib.staticfiles.checks.finder_errors->finder.check()
django.contrib.staticfiles.checks.check_finders(app_configs=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/finders.py----------------------------------------
A:django.contrib.staticfiles.finders.filesystem_storage->FileSystemStorage(location=root)
A:django.contrib.staticfiles.finders.matched_path->self.storages.get(app).path(path)
A:django.contrib.staticfiles.finders.path->safe_join(root, path)
A:django.contrib.staticfiles.finders.app_configs->django.apps.apps.get_app_configs()
A:django.contrib.staticfiles.finders.app_names->set(app_names)
A:django.contrib.staticfiles.finders.app_storage->self.storage_class(os.path.join(app_config.path, self.source_dir))
A:django.contrib.staticfiles.finders.match->self.storage.path(path)
A:django.contrib.staticfiles.finders.storage->self.storages.get(app)
A:django.contrib.staticfiles.finders.self.storage->self.storage()
A:django.contrib.staticfiles.finders.base_location->getattr(self.storage, 'base_location', empty)
A:django.contrib.staticfiles.finders.result->finder.find(path, all=all)
A:django.contrib.staticfiles.finders.Finder->import_string(import_path)
django.contrib.staticfiles.finders.AppDirectoriesFinder(self,app_names=None,*args,**kwargs)
django.contrib.staticfiles.finders.AppDirectoriesFinder.__init__(self,app_names=None,*args,**kwargs)
django.contrib.staticfiles.finders.AppDirectoriesFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.AppDirectoriesFinder.find_in_app(self,app,path)
django.contrib.staticfiles.finders.AppDirectoriesFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.BaseFinder
django.contrib.staticfiles.finders.BaseFinder.check(self,**kwargs)
django.contrib.staticfiles.finders.BaseFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.BaseFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.BaseStorageFinder(self,storage=None,*args,**kwargs)
django.contrib.staticfiles.finders.BaseStorageFinder.__init__(self,storage=None,*args,**kwargs)
django.contrib.staticfiles.finders.BaseStorageFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.BaseStorageFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.DefaultStorageFinder(self,*args,**kwargs)
django.contrib.staticfiles.finders.DefaultStorageFinder.__init__(self,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder(self,app_names=None,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder.__init__(self,app_names=None,*args,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder.check(self,**kwargs)
django.contrib.staticfiles.finders.FileSystemFinder.find(self,path,all=False)
django.contrib.staticfiles.finders.FileSystemFinder.find_location(self,root,path,prefix=None)
django.contrib.staticfiles.finders.FileSystemFinder.list(self,ignore_patterns)
django.contrib.staticfiles.finders.find(path,all=False)
django.contrib.staticfiles.finders.get_finder(import_path)
django.contrib.staticfiles.finders.get_finders()


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/testing.py----------------------------------------
django.contrib.staticfiles.testing.StaticLiveServerTestCase(LiveServerTestCase)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/utils.py----------------------------------------
A:django.contrib.staticfiles.utils.(directories, files)->storage.listdir(location)
A:django.contrib.staticfiles.utils.fn->os.path.join(location, fn)
A:django.contrib.staticfiles.utils.dir->os.path.join(location, dir)
django.contrib.staticfiles.utils.check_settings(base_url=None)
django.contrib.staticfiles.utils.get_files(storage,ignore_patterns=None,location='')
django.contrib.staticfiles.utils.matches_patterns(path,patterns)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/apps.py----------------------------------------
A:django.contrib.staticfiles.apps.verbose_name->_('Static Files')
django.contrib.staticfiles.apps.StaticFilesConfig(AppConfig)
django.contrib.staticfiles.apps.StaticFilesConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/views.py----------------------------------------
A:django.contrib.staticfiles.views.normalized_path->posixpath.normpath(path).lstrip('/')
A:django.contrib.staticfiles.views.absolute_path->django.contrib.staticfiles.finders.find(normalized_path)
A:django.contrib.staticfiles.views.(document_root, path)->os.path.split(absolute_path)
django.contrib.staticfiles.views.serve(request,path,insecure=False,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/handlers.py----------------------------------------
A:django.contrib.staticfiles.handlers.self.base_url->urlparse(self.get_base_url())
django.contrib.staticfiles.handlers.ASGIStaticFilesHandler(self,application)
django.contrib.staticfiles.handlers.ASGIStaticFilesHandler.__init__(self,application)
django.contrib.staticfiles.handlers.StaticFilesHandler(self,application)
django.contrib.staticfiles.handlers.StaticFilesHandler.__init__(self,application)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin._should_handle(self,path)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin.file_path(self,url)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin.get_base_url(self)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin.get_response(self,request)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin.load_middleware(self)
django.contrib.staticfiles.handlers.StaticFilesHandlerMixin.serve(self,request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/urls.py----------------------------------------
django.contrib.staticfiles.urls.staticfiles_urlpatterns(prefix=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/management/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/management/commands/runserver.py----------------------------------------
A:django.contrib.staticfiles.management.commands.runserver.handler->super().get_handler(*args, **options)
django.contrib.staticfiles.management.commands.runserver.Command(RunserverCommand)
django.contrib.staticfiles.management.commands.runserver.Command.add_arguments(self,parser)
django.contrib.staticfiles.management.commands.runserver.Command.get_handler(self,*args,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/management/commands/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/management/commands/findstatic.py----------------------------------------
A:django.contrib.staticfiles.management.commands.findstatic.result->django.contrib.staticfiles.finders.find(path, all=options['all'])
A:django.contrib.staticfiles.management.commands.findstatic.file_list->'\n  '.join(result)
django.contrib.staticfiles.management.commands.findstatic.Command(LabelCommand)
django.contrib.staticfiles.management.commands.findstatic.Command.add_arguments(self,parser)
django.contrib.staticfiles.management.commands.findstatic.Command.handle_label(self,path,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/staticfiles/management/commands/collectstatic.py----------------------------------------
A:django.contrib.staticfiles.management.commands.collectstatic.self.style->no_style()
A:django.contrib.staticfiles.management.commands.collectstatic.self.ignore_patterns->list({os.path.normpath(p) for p in ignore_patterns})
A:django.contrib.staticfiles.management.commands.collectstatic.prefixed_path->os.path.join(storage.prefix, path)
A:django.contrib.staticfiles.management.commands.collectstatic.processor->self.storage.post_process(found_files, dry_run=self.dry_run)
A:django.contrib.staticfiles.management.commands.collectstatic.collected->self.collect()
A:django.contrib.staticfiles.management.commands.collectstatic.modified_count->len(collected['modified'])
A:django.contrib.staticfiles.management.commands.collectstatic.unmodified_count->len(collected['unmodified'])
A:django.contrib.staticfiles.management.commands.collectstatic.post_processed_count->len(collected['post_processed'])
A:django.contrib.staticfiles.management.commands.collectstatic.(dirs, files)->self.storage.listdir(path)
A:django.contrib.staticfiles.management.commands.collectstatic.fpath->os.path.join(path, f)
A:django.contrib.staticfiles.management.commands.collectstatic.full_path->self.storage.path(prefixed_path)
A:django.contrib.staticfiles.management.commands.collectstatic.target_last_modified->self.storage.get_modified_time(prefixed_path)
A:django.contrib.staticfiles.management.commands.collectstatic.source_last_modified->source_storage.get_modified_time(path)
A:django.contrib.staticfiles.management.commands.collectstatic.source_path->source_storage.path(path)
django.contrib.staticfiles.management.commands.collectstatic.Command(self,*args,**kwargs)
django.contrib.staticfiles.management.commands.collectstatic.Command.__init__(self,*args,**kwargs)
django.contrib.staticfiles.management.commands.collectstatic.Command.add_arguments(self,parser)
django.contrib.staticfiles.management.commands.collectstatic.Command.clear_dir(self,path)
django.contrib.staticfiles.management.commands.collectstatic.Command.collect(self)
django.contrib.staticfiles.management.commands.collectstatic.Command.copy_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.delete_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.handle(self,**options)
django.contrib.staticfiles.management.commands.collectstatic.Command.is_local_storage(self)
django.contrib.staticfiles.management.commands.collectstatic.Command.link_file(self,path,prefixed_path,source_storage)
django.contrib.staticfiles.management.commands.collectstatic.Command.local(self)
django.contrib.staticfiles.management.commands.collectstatic.Command.log(self,msg,level=2)
django.contrib.staticfiles.management.commands.collectstatic.Command.set_options(self,**options)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/admin.py----------------------------------------
django.contrib.flatpages.admin.FlatPageAdmin(admin.ModelAdmin)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/middleware.py----------------------------------------
django.contrib.flatpages.middleware.FlatpageFallbackMiddleware(MiddlewareMixin)
django.contrib.flatpages.middleware.FlatpageFallbackMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/apps.py----------------------------------------
A:django.contrib.flatpages.apps.verbose_name->_('Flat Pages')
django.contrib.flatpages.apps.FlatPagesConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/views.py----------------------------------------
A:django.contrib.flatpages.views.f->get_object_or_404(FlatPage, url=url, sites=site_id)
A:django.contrib.flatpages.views.template->django.template.loader.get_template(DEFAULT_TEMPLATE)
A:django.contrib.flatpages.views.f.title->mark_safe(f.title)
A:django.contrib.flatpages.views.f.content->mark_safe(f.content)
django.contrib.flatpages.views.flatpage(request,url)
django.contrib.flatpages.views.render_flatpage(request,f)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/sitemaps.py----------------------------------------
A:django.contrib.flatpages.sitemaps.Site->django.apps.apps.get_model('sites.Site')
A:django.contrib.flatpages.sitemaps.current_site->django.apps.apps.get_model('sites.Site').objects.get_current()
django.contrib.flatpages.sitemaps.FlatPageSitemap(Sitemap)
django.contrib.flatpages.sitemaps.FlatPageSitemap.items(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/models.py----------------------------------------
A:django.contrib.flatpages.models.url->django.db.models.CharField(_('URL'), max_length=100, db_index=True)
A:django.contrib.flatpages.models.title->django.db.models.CharField(_('title'), max_length=200)
A:django.contrib.flatpages.models.content->django.db.models.TextField(_('content'), blank=True)
A:django.contrib.flatpages.models.enable_comments->django.db.models.BooleanField(_('enable comments'), default=False)
A:django.contrib.flatpages.models.template_name->django.db.models.CharField(_('template name'), max_length=70, blank=True, help_text=_('Example: “flatpages/contact_page.html”. If this isn’t provided, the system will use “flatpages/default.html”.'))
A:django.contrib.flatpages.models.registration_required->django.db.models.BooleanField(_('registration required'), help_text=_('If this is checked, only logged-in users will be able to view the page.'), default=False)
A:django.contrib.flatpages.models.sites->django.db.models.ManyToManyField(Site, verbose_name=_('sites'))
A:django.contrib.flatpages.models.verbose_name->_('flat page')
A:django.contrib.flatpages.models.verbose_name_plural->_('flat pages')
django.contrib.flatpages.models.FlatPage(models.Model)
django.contrib.flatpages.models.FlatPage.Meta
django.contrib.flatpages.models.FlatPage.__str__(self)
django.contrib.flatpages.models.FlatPage.get_absolute_url(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/urls.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/forms.py----------------------------------------
A:django.contrib.flatpages.forms.url->self.cleaned_data.get('url')
A:django.contrib.flatpages.forms.self.fields['url'].help_text->_('Example: “/about/contact”. Make sure to have a leading slash.')
A:django.contrib.flatpages.forms.sites->self.cleaned_data.get('sites')
A:django.contrib.flatpages.forms.same_url->same_url.exclude(pk=self.instance.pk).exclude(pk=self.instance.pk)
django.contrib.flatpages.forms.FlatpageForm(self,*args,**kwargs)
django.contrib.flatpages.forms.FlatpageForm.Meta
django.contrib.flatpages.forms.FlatpageForm.__init__(self,*args,**kwargs)
django.contrib.flatpages.forms.FlatpageForm._trailing_slash_required(self)
django.contrib.flatpages.forms.FlatpageForm.clean(self)
django.contrib.flatpages.forms.FlatpageForm.clean_url(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/migrations/0001_initial.py----------------------------------------
django.contrib.flatpages.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/flatpages/templatetags/flatpages.py----------------------------------------
A:django.contrib.flatpages.templatetags.flatpages.register->django.template.Library()
A:django.contrib.flatpages.templatetags.flatpages.self.starts_with->django.template.Variable(starts_with)
A:django.contrib.flatpages.templatetags.flatpages.self.user->django.template.Variable(user)
A:django.contrib.flatpages.templatetags.flatpages.flatpages->flatpages.filter(registration_required=False).filter(registration_required=False)
A:django.contrib.flatpages.templatetags.flatpages.user->self.user.resolve(context)
A:django.contrib.flatpages.templatetags.flatpages.bits->token.split_contents()
django.contrib.flatpages.templatetags.flatpages.FlatpageNode(self,context_name,starts_with=None,user=None)
django.contrib.flatpages.templatetags.flatpages.FlatpageNode.__init__(self,context_name,starts_with=None,user=None)
django.contrib.flatpages.templatetags.flatpages.FlatpageNode.render(self,context)
django.contrib.flatpages.templatetags.flatpages.get_flatpages(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/sites.py----------------------------------------
A:django.contrib.admin.sites.all_sites->WeakSet()
A:django.contrib.admin.sites.site_title->gettext_lazy('Django site admin')
A:django.contrib.admin.sites.site_header->gettext_lazy('Django administration')
A:django.contrib.admin.sites.index_title->gettext_lazy('Site administration')
A:django.contrib.admin.sites.self._global_actions->self._actions.copy()
A:django.contrib.admin.sites.app_configs->set(app_configs)
A:django.contrib.admin.sites.registered_admin->str(self._registry[model])
A:django.contrib.admin.sites.admin_class->type('%sAdmin' % model.__name__, (admin_class,), options)
A:django.contrib.admin.sites.self._registry[model]->admin_class(model, self)
A:django.contrib.admin.sites.index_path->reverse('admin:index', current_app=self.name)
A:django.contrib.admin.sites.inner->csrf_protect(inner)
A:django.contrib.admin.sites.url->reverse('admin:password_change_done', current_app=self.name)
A:django.contrib.admin.sites.context[REDIRECT_FIELD_NAME]->reverse('admin:index', current_app=self.name)
A:django.contrib.admin.sites.urlconf->getattr(request, 'urlconf', None)
A:django.contrib.admin.sites.match->resolve(path, urlconf)
A:django.contrib.admin.sites.has_module_perms->model_admin.has_module_permission(request)
A:django.contrib.admin.sites.perms->model_admin.get_model_perms(request)
A:django.contrib.admin.sites.model_dict['admin_url']->reverse('admin:%s_%s_changelist' % info, current_app=self.name)
A:django.contrib.admin.sites.model_dict['add_url']->reverse('admin:%s_%s_add' % info, current_app=self.name)
A:django.contrib.admin.sites.app_dict->self._build_app_dict(request, app_label)
A:django.contrib.admin.sites.app_list->self.get_app_list(request)
A:django.contrib.admin.sites.AdminSiteClass->import_string(apps.get_app_config('admin').default_site)
A:django.contrib.admin.sites.self._wrapped->AdminSiteClass()
A:django.contrib.admin.sites.site->DefaultAdminSite()
django.contrib.admin.AdminSite(self,name='admin')
django.contrib.admin.AdminSite._build_app_dict(self,request,label=None)
django.contrib.admin.AdminSite.actions(self)
django.contrib.admin.AdminSite.add_action(self,action,name=None)
django.contrib.admin.AdminSite.admin_view(self,view,cacheable=False)
django.contrib.admin.AdminSite.app_index(self,request,app_label,extra_context=None)
django.contrib.admin.AdminSite.autocomplete_view(self,request)
django.contrib.admin.AdminSite.catch_all_view(self,request,url)
django.contrib.admin.AdminSite.check(self,app_configs)
django.contrib.admin.AdminSite.disable_action(self,name)
django.contrib.admin.AdminSite.each_context(self,request)
django.contrib.admin.AdminSite.get_action(self,name)
django.contrib.admin.AdminSite.get_app_list(self,request)
django.contrib.admin.AdminSite.get_urls(self)
django.contrib.admin.AdminSite.has_permission(self,request)
django.contrib.admin.AdminSite.i18n_javascript(self,request,extra_context=None)
django.contrib.admin.AdminSite.index(self,request,extra_context=None)
django.contrib.admin.AdminSite.is_registered(self,model)
django.contrib.admin.AdminSite.login(self,request,extra_context=None)
django.contrib.admin.AdminSite.logout(self,request,extra_context=None)
django.contrib.admin.AdminSite.password_change(self,request,extra_context=None)
django.contrib.admin.AdminSite.password_change_done(self,request,extra_context=None)
django.contrib.admin.AdminSite.register(self,model_or_iterable,admin_class=None,**options)
django.contrib.admin.AdminSite.unregister(self,model_or_iterable)
django.contrib.admin.AdminSite.urls(self)
django.contrib.admin.sites.AdminSite(self,name='admin')
django.contrib.admin.sites.AdminSite.__init__(self,name='admin')
django.contrib.admin.sites.AdminSite._build_app_dict(self,request,label=None)
django.contrib.admin.sites.AdminSite.actions(self)
django.contrib.admin.sites.AdminSite.add_action(self,action,name=None)
django.contrib.admin.sites.AdminSite.admin_view(self,view,cacheable=False)
django.contrib.admin.sites.AdminSite.app_index(self,request,app_label,extra_context=None)
django.contrib.admin.sites.AdminSite.autocomplete_view(self,request)
django.contrib.admin.sites.AdminSite.catch_all_view(self,request,url)
django.contrib.admin.sites.AdminSite.check(self,app_configs)
django.contrib.admin.sites.AdminSite.disable_action(self,name)
django.contrib.admin.sites.AdminSite.each_context(self,request)
django.contrib.admin.sites.AdminSite.get_action(self,name)
django.contrib.admin.sites.AdminSite.get_app_list(self,request)
django.contrib.admin.sites.AdminSite.get_urls(self)
django.contrib.admin.sites.AdminSite.has_permission(self,request)
django.contrib.admin.sites.AdminSite.i18n_javascript(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.index(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.is_registered(self,model)
django.contrib.admin.sites.AdminSite.login(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.logout(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.password_change(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.password_change_done(self,request,extra_context=None)
django.contrib.admin.sites.AdminSite.register(self,model_or_iterable,admin_class=None,**options)
django.contrib.admin.sites.AdminSite.unregister(self,model_or_iterable)
django.contrib.admin.sites.AdminSite.urls(self)
django.contrib.admin.sites.AlreadyRegistered(Exception)
django.contrib.admin.sites.DefaultAdminSite(LazyObject)
django.contrib.admin.sites.DefaultAdminSite._setup(self)
django.contrib.admin.sites.NotRegistered(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/tests.py----------------------------------------
A:django.contrib.admin.tests.old_page->self.selenium.find_element_by_tag_name('html')
A:django.contrib.admin.tests.username_input->self.selenium.find_element_by_name('username')
A:django.contrib.admin.tests.password_input->self.selenium.find_element_by_name('password')
A:django.contrib.admin.tests.login_text->_('Log in')
A:django.contrib.admin.tests.select->Select(self.selenium.find_element_by_css_selector(selector))
A:django.contrib.admin.tests.options->self.selenium.find_elements_by_css_selector(options_selector)
django.contrib.admin.tests.AdminSeleniumTestCase(SeleniumTestCase,StaticLiveServerTestCase)
django.contrib.admin.tests.AdminSeleniumTestCase._assertOptionsValues(self,options_selector,values)
django.contrib.admin.tests.AdminSeleniumTestCase.admin_login(self,username,password,login_url='/admin/')
django.contrib.admin.tests.AdminSeleniumTestCase.assertSelectOptions(self,selector,values)
django.contrib.admin.tests.AdminSeleniumTestCase.assertSelectedOptions(self,selector,values)
django.contrib.admin.tests.AdminSeleniumTestCase.deselect_option(self,selector,value)
django.contrib.admin.tests.AdminSeleniumTestCase.has_css_class(self,selector,klass)
django.contrib.admin.tests.AdminSeleniumTestCase.select_option(self,selector,value)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_for(self,css_selector,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_for_and_switch_to_popup(self,num_windows=2,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_for_text(self,css_selector,text,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_for_value(self,css_selector,text,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_page_loaded(self,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_page_ready(self,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_until(self,callback,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_until_invisible(self,css_selector,timeout=10)
django.contrib.admin.tests.AdminSeleniumTestCase.wait_until_visible(self,css_selector,timeout=10)
django.contrib.admin.tests.CSPMiddleware(MiddlewareMixin)
django.contrib.admin.tests.CSPMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/checks.py----------------------------------------
A:django.contrib.admin.checks.cls->import_string(class_path)
A:django.contrib.admin.checks.candidate_cls->import_string(path)
A:django.contrib.admin.checks.sidebar_enabled->any((site.enable_nav_sidebar for site in all_sites))
A:django.contrib.admin.checks.field->obj.model._meta.get_field(field_name)
A:django.contrib.admin.checks.related_admin->obj.admin_site._registry.get(field.remote_field.model)
A:django.contrib.admin.checks.fields->flatten(obj.fields)
A:django.contrib.admin.checks.field_name->field_name.asc().asc()
A:django.contrib.admin.checks.actions->obj._get_base_actions()
A:django.contrib.admin.checks.names->collections.Counter((name for (_, name, _) in obj._get_base_actions()))
A:django.contrib.admin.checks.errors->super()._check_exclude(obj)
A:django.contrib.admin.checks.fk->_get_foreign_key(parent_model, obj.model, fk_name=obj.fk_name)
django.contrib.admin.checks.BaseModelAdminChecks
django.contrib.admin.checks.BaseModelAdminChecks._check_autocomplete_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_autocomplete_fields_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_exclude(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_field_spec(self,obj,fields,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_field_spec_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_fieldsets(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_fieldsets_item(self,obj,fieldset,label,seen_fields)
django.contrib.admin.checks.BaseModelAdminChecks._check_filter_horizontal(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_filter_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_filter_vertical(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_form(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_ordering(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_ordering_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_prepopulated_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_prepopulated_fields_key(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_prepopulated_fields_value(self,obj,val,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_prepopulated_fields_value_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_radio_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_radio_fields_key(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_radio_fields_value(self,obj,val,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_raw_id_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_raw_id_fields_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_readonly_fields(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks._check_readonly_fields_item(self,obj,field_name,label)
django.contrib.admin.checks.BaseModelAdminChecks._check_view_on_site_url(self,obj)
django.contrib.admin.checks.BaseModelAdminChecks.check(self,admin_obj,**kwargs)
django.contrib.admin.checks.InlineModelAdminChecks(BaseModelAdminChecks)
django.contrib.admin.checks.InlineModelAdminChecks._check_exclude_of_parent_model(self,obj,parent_model)
django.contrib.admin.checks.InlineModelAdminChecks._check_extra(self,obj)
django.contrib.admin.checks.InlineModelAdminChecks._check_formset(self,obj)
django.contrib.admin.checks.InlineModelAdminChecks._check_max_num(self,obj)
django.contrib.admin.checks.InlineModelAdminChecks._check_min_num(self,obj)
django.contrib.admin.checks.InlineModelAdminChecks._check_relation(self,obj,parent_model)
django.contrib.admin.checks.InlineModelAdminChecks.check(self,inline_obj,**kwargs)
django.contrib.admin.checks.ModelAdminChecks(BaseModelAdminChecks)
django.contrib.admin.checks.ModelAdminChecks._check_action_permission_methods(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_actions_uniqueness(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_date_hierarchy(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_inlines(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_inlines_item(self,obj,inline,label)
django.contrib.admin.checks.ModelAdminChecks._check_list_display(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_display_item(self,obj,item,label)
django.contrib.admin.checks.ModelAdminChecks._check_list_display_links(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_display_links_item(self,obj,field_name,label)
django.contrib.admin.checks.ModelAdminChecks._check_list_editable(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_editable_item(self,obj,field_name,label)
django.contrib.admin.checks.ModelAdminChecks._check_list_filter(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_filter_item(self,obj,item,label)
django.contrib.admin.checks.ModelAdminChecks._check_list_max_show_all(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_per_page(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_list_select_related(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_save_as(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_save_on_top(self,obj)
django.contrib.admin.checks.ModelAdminChecks._check_search_fields(self,obj)
django.contrib.admin.checks.ModelAdminChecks.check(self,admin_obj,**kwargs)
django.contrib.admin.checks._contains_subclass(class_path,candidate_paths)
django.contrib.admin.checks._issubclass(cls,classinfo)
django.contrib.admin.checks.check_admin_app(app_configs,**kwargs)
django.contrib.admin.checks.check_dependencies(**kwargs)
django.contrib.admin.checks.must_be(type,option,obj,id)
django.contrib.admin.checks.must_inherit_from(parent,option,obj,id)
django.contrib.admin.checks.refer_to_missing_field(field,option,obj,id)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/utils.py----------------------------------------
A:django.contrib.admin.utils.UNQUOTE_RE->_lazy_re_compile('_(?:%s)' % '|'.join([x[1:] for x in UNQUOTE_MAP]))
A:django.contrib.admin.utils.lookup_fields->lookup_path.split(LOOKUP_SEP)
A:django.contrib.admin.utils.field->get_model_from_relation(fields[-1])._meta.get_field(piece)
A:django.contrib.admin.utils.path_info->get_model_from_relation(fields[-1])._meta.get_field(piece).get_path_info()
A:django.contrib.admin.utils.value->getattr(obj, name)
A:django.contrib.admin.utils.using->django.db.router.db_for_write(obj._meta.model)
A:django.contrib.admin.utils.collector->NestedObjects(using=using)
A:django.contrib.admin.utils.perms_needed->set()
A:django.contrib.admin.utils.admin_url->reverse('%s:%s_%s_change' % (admin_site.name, opts.app_label, opts.model_name), None, (quote(obj.pk),))
A:django.contrib.admin.utils.to_delete->NestedObjects(using=using).nested(format_callback)
A:django.contrib.admin.utils.self.protected->set()
A:django.contrib.admin.utils.self.model_objs->defaultdict(set)
A:django.contrib.admin.utils.qs->super().related_objects(related_model, related_fields, objs)
A:django.contrib.admin.utils.seen->set()
A:django.contrib.admin.utils.n->obj.count()
A:django.contrib.admin.utils.d->model_format_dict(obj)
A:django.contrib.admin.utils.f->_get_non_gfk_field(opts, name)
A:django.contrib.admin.utils.attr->getattr(model, name)
A:django.contrib.admin.utils.label->pretty_name(name)
A:django.contrib.admin.utils.pieces->path.split(LOOKUP_SEP)
A:django.contrib.admin.utils.related_name->get_model_from_relation(fields[-1])._meta.get_field(piece).related_query_name()
A:django.contrib.admin.utils.parent->get_model_from_relation(fields[-1])
A:django.contrib.admin.utils.changed_field_labels->_get_changed_field_labels_from_form(form, changed_data)
django.contrib.admin.utils.FieldIsAForeignKeyColumnName(Exception)
django.contrib.admin.utils.NestedObjects(self,*args,**kwargs)
django.contrib.admin.utils.NestedObjects.__init__(self,*args,**kwargs)
django.contrib.admin.utils.NestedObjects._nested(self,obj,seen,format_callback)
django.contrib.admin.utils.NestedObjects.add_edge(self,source,target)
django.contrib.admin.utils.NestedObjects.can_fast_delete(self,*args,**kwargs)
django.contrib.admin.utils.NestedObjects.collect(self,objs,source=None,source_attr=None,**kwargs)
django.contrib.admin.utils.NestedObjects.nested(self,format_callback=None)
django.contrib.admin.utils.NestedObjects.related_objects(self,related_model,related_fields,objs)
django.contrib.admin.utils.NotRelationField(Exception)
django.contrib.admin.utils._get_changed_field_labels_from_form(form,changed_data)
django.contrib.admin.utils._get_non_gfk_field(opts,name)
django.contrib.admin.utils.construct_change_message(form,formsets,add)
django.contrib.admin.utils.display_for_field(value,field,empty_value_display)
django.contrib.admin.utils.display_for_value(value,empty_value_display,boolean=False)
django.contrib.admin.utils.flatten(fields)
django.contrib.admin.utils.flatten_fieldsets(fieldsets)
django.contrib.admin.utils.get_deleted_objects(objs,request,admin_site)
django.contrib.admin.utils.get_fields_from_path(model,path)
django.contrib.admin.utils.get_model_from_relation(field)
django.contrib.admin.utils.help_text_for_field(name,model)
django.contrib.admin.utils.label_for_field(name,model,model_admin=None,return_attr=False,form=None)
django.contrib.admin.utils.lookup_field(name,obj,model_admin=None)
django.contrib.admin.utils.lookup_needs_distinct(opts,lookup_path)
django.contrib.admin.utils.model_format_dict(obj)
django.contrib.admin.utils.model_ngettext(obj,n=None)
django.contrib.admin.utils.prepare_lookup_value(key,value)
django.contrib.admin.utils.quote(s)
django.contrib.admin.utils.reverse_field_path(model,path)
django.contrib.admin.utils.unquote(s)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/options.py----------------------------------------
A:django.contrib.admin.options.csrf_protect_m->method_decorator(csrf_protect)
A:django.contrib.admin.options.overrides->copy.deepcopy(FORMFIELD_FOR_DBFIELD_DEFAULTS)
A:django.contrib.admin.options.formfield->self.formfield_for_manytomany(db_field, request, **kwargs)
A:django.contrib.admin.options.related_modeladmin->self.admin_site._registry.get(db_field.remote_field.model)
A:django.contrib.admin.options.formfield.widget->django.contrib.admin.widgets.RelatedFieldWidgetWrapper(formfield.widget, db_field.remote_field, self.admin_site, **wrapper_kwargs)
A:django.contrib.admin.options.kwargs['widget']->django.contrib.admin.widgets.FilteredSelectMultiple(db_field.verbose_name, db_field.name in self.filter_vertical)
A:django.contrib.admin.options.kwargs['choices']->db_field.get_choices(include_blank=db_field.blank, blank_choice=[('', _('None'))])
A:django.contrib.admin.options.related_admin->self.admin_site._registry.get(db_field.remote_field.model)
A:django.contrib.admin.options.ordering->self.get_ordering(request)
A:django.contrib.admin.options.db->kwargs.get('using')
A:django.contrib.admin.options.queryset->queryset.none().none()
A:django.contrib.admin.options.autocomplete_fields->self.get_autocomplete_fields(request)
A:django.contrib.admin.options.form_field->db_field.formfield(**kwargs)
A:django.contrib.admin.options.msg->_('Deleting %(class_name)s %(instance)s would require deleting the following protected related objects: %(related_objects)s')
A:django.contrib.admin.options.form->ModelForm(instance=obj)
A:django.contrib.admin.options.qs->qs.order_by(*ordering).order_by(*ordering)
A:django.contrib.admin.options.fk_lookup->fk_lookup()
A:django.contrib.admin.options.field->opts.get_field(path_part)
A:django.contrib.admin.options.registered_models->set()
A:django.contrib.admin.options.codename->get_permission_codename('delete', opts)
A:django.contrib.admin.options.codename_view->get_permission_codename('view', opts)
A:django.contrib.admin.options.codename_change->get_permission_codename('change', opts)
A:django.contrib.admin.options.inline->inline_class(self.model, self.admin_site)
A:django.contrib.admin.options.fields->flatten_fieldsets(self.get_fieldsets(request, obj))
A:django.contrib.admin.options.excluded->self.get_exclude(request, obj)
A:django.contrib.admin.options.readonly_fields->self.get_readonly_fields(request, obj)
A:django.contrib.admin.options.new_attrs->dict.fromkeys((f for f in readonly_fields if f in self.form.declared_fields))
A:django.contrib.admin.options.list_display->self.get_list_display(request)
A:django.contrib.admin.options.list_display_links->self.get_list_display_links(request, list_display)
A:django.contrib.admin.options.sortable_by->self.get_sortable_by(request)
A:django.contrib.admin.options.ChangeList->self.get_changelist(request)
A:django.contrib.admin.options.object_id->opts.get_field(path_part).to_python(object_id)
A:django.contrib.admin.options.description->self._get_action_description(func, action)
A:django.contrib.admin.options.actions->self.get_actions(request)
A:django.contrib.admin.options.func->self.admin_site.get_action(action)
A:django.contrib.admin.options.lookup_fields->field_name.split(LOOKUP_SEP)
A:django.contrib.admin.options.search_fields->self.get_search_fields(request)
A:django.contrib.admin.options.bit->unescape_string_literal(bit)
A:django.contrib.admin.options.preserved_filters->self.get_preserved_filters(request)
A:django.contrib.admin.options.level->getattr(messages.constants, level.upper())
A:django.contrib.admin.options.levels->django.contrib.messages.constants.DEFAULT_TAGS.values()
A:django.contrib.admin.options.levels_repr->', '.join(('`%s`' % level for level in levels))
A:django.contrib.admin.options.form_url->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, form_url)
A:django.contrib.admin.options.view_on_site_url->self.get_view_on_site_url(obj)
A:django.contrib.admin.options.obj_url->reverse('admin:%s_%s_change' % (opts.app_label, opts.model_name), args=(quote(obj.pk),), current_app=self.admin_site.name)
A:django.contrib.admin.options.obj_repr->str(obj)
A:django.contrib.admin.options.to_field->request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))
A:django.contrib.admin.options.attr->str(to_field)
A:django.contrib.admin.options.value->self.get_object(request, unquote(object_id)).serializable_value(attr)
A:django.contrib.admin.options.popup_response_data->json.dumps({'action': 'delete', 'value': str(obj_id)})
A:django.contrib.admin.options.post_url_continue->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url_continue)
A:django.contrib.admin.options.redirect_url->add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)
A:django.contrib.admin.options.new_value->self.get_object(request, unquote(object_id)).serializable_value(attr)
A:django.contrib.admin.options.post_url->reverse('admin:index', current_app=self.admin_site.name)
A:django.contrib.admin.options.action_index->int(request.POST.get('index', 0))
A:django.contrib.admin.options.data->request.POST.copy()
A:django.contrib.admin.options.action_form->self.action_form(auto_id=None)
A:django.contrib.admin.options.action_form.fields['action'].choices->self.get_action_choices(request)
A:django.contrib.admin.options.selected->request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)
A:django.contrib.admin.options.response->self.response_action(request, queryset=cl.get_queryset(request))
A:django.contrib.admin.options.fieldsets->self.get_fieldsets(request, obj)
A:django.contrib.admin.options.readonly->list(inline.get_readonly_fields(request, obj))
A:django.contrib.admin.options.has_add_permission->inline_class(self.model, self.admin_site).has_add_permission(request, obj)
A:django.contrib.admin.options.has_change_permission->inline_class(self.model, self.admin_site).has_change_permission(request, obj)
A:django.contrib.admin.options.has_delete_permission->inline_class(self.model, self.admin_site).has_delete_permission(request, obj)
A:django.contrib.admin.options.has_view_permission->inline_class(self.model, self.admin_site).has_view_permission(request, obj)
A:django.contrib.admin.options.prepopulated->dict(inline.get_prepopulated_fields(request, obj))
A:django.contrib.admin.options.inline_admin_formset->django.contrib.admin.helpers.InlineAdminFormSet(inline, formset, fieldsets, prepopulated, readonly, model_admin=self, has_add_permission=has_add_permission, has_change_permission=has_change_permission, has_delete_permission=has_delete_permission, has_view_permission=has_view_permission)
A:django.contrib.admin.options.initial->self.get_changeform_initial_data(request)
A:django.contrib.admin.options.f->self.model._meta.get_field(k)
A:django.contrib.admin.options.initial[k]->initial[k].split(',').split(',')
A:django.contrib.admin.options.url->reverse('admin:index', current_app=self.admin_site.name)
A:django.contrib.admin.options.obj->self.get_object(request, unquote(object_id))
A:django.contrib.admin.options.ModelForm->self.get_form(request, obj, change=not add, fields=flatten_fieldsets(fieldsets))
A:django.contrib.admin.options.form_validated->ModelForm(instance=obj).is_valid()
A:django.contrib.admin.options.new_object->self.save_form(request, form, change=not add)
A:django.contrib.admin.options.(formsets, inline_instances)->self._create_formsets(request, obj, change=True)
A:django.contrib.admin.options.change_message->self.construct_change_message(request, form, formsets, add)
A:django.contrib.admin.options.adminForm->django.contrib.admin.helpers.AdminForm(form, list(fieldsets), self.get_prepopulated_fields(request, obj) if add or self.has_change_permission(request, obj) else {}, readonly_fields, model_admin=self)
A:django.contrib.admin.options.inline_formsets->self.get_inline_formsets(request, formsets, inline_instances, obj)
A:django.contrib.admin.options.title->_('Are you sure?')
A:django.contrib.admin.options.pk_pattern->re.compile('{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))
A:django.contrib.admin.options.object_pks->self._get_edited_object_pks(request, prefix)
A:django.contrib.admin.options.cl->self.get_changelist_instance(request)
A:django.contrib.admin.options.FormSet->self.get_changelist_formset(request)
A:django.contrib.admin.options.modified_objects->self._get_list_editable_queryset(request, FormSet.get_default_prefix())
A:django.contrib.admin.options.formsetcl.formset->FormSet(queryset=cl.result_list)
A:django.contrib.admin.options.change_msg->self.construct_change_message(request, form, None)
A:django.contrib.admin.options.selection_note_all->ngettext('%(total_count)s selected', 'All %(total_count)s selected', cl.result_count)
A:django.contrib.admin.options.(deleted_objects, model_count, perms_needed, protected)->self.get_deleted_objects([obj], request)
A:django.contrib.admin.options.obj_display->str(obj)
A:django.contrib.admin.options.obj_id->self.get_object(request, unquote(object_id)).serializable_value(attr)
A:django.contrib.admin.options.object_name->str(opts.verbose_name)
A:django.contrib.admin.options.action_list->django.contrib.admin.models.LogEntry.objects.filter(object_id=unquote(object_id), content_type=get_content_type_for_model(model)).select_related().order_by('action_time')
A:django.contrib.admin.options.prefix->self.get_changelist_formset(request).get_default_prefix()
A:django.contrib.admin.options.formset->FormSet(**formset_params)
A:django.contrib.admin.options.self.has_registered_model->admin_site.is_registered(self.model)
A:django.contrib.admin.options.using->django.db.router.db_for_write(self._meta.model)
A:django.contrib.admin.options.collector->NestedObjects(using=using)
A:django.contrib.admin.options.result->super().is_valid()
django.contrib.admin.ModelAdmin(self,model,admin_site)
django.contrib.admin.ModelAdmin.__str__(self)
django.contrib.admin.ModelAdmin._changeform_view(self,request,object_id,form_url,extra_context)
django.contrib.admin.ModelAdmin._create_formsets(self,request,obj,change)
django.contrib.admin.ModelAdmin._delete_view(self,request,object_id,extra_context)
django.contrib.admin.ModelAdmin._filter_actions_by_permissions(self,request,actions)
django.contrib.admin.ModelAdmin._get_action_description(func,name)
django.contrib.admin.ModelAdmin._get_base_actions(self)
django.contrib.admin.ModelAdmin._get_edited_object_pks(self,request,prefix)
django.contrib.admin.ModelAdmin._get_form_for_get_fields(self,request,obj)
django.contrib.admin.ModelAdmin._get_list_editable_queryset(self,request,prefix)
django.contrib.admin.ModelAdmin._get_obj_does_not_exist_redirect(self,request,opts,object_id)
django.contrib.admin.ModelAdmin._response_post_save(self,request,obj)
django.contrib.admin.ModelAdmin.action_checkbox(self,obj)
django.contrib.admin.ModelAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.admin.ModelAdmin.change_view(self,request,object_id,form_url='',extra_context=None)
django.contrib.admin.ModelAdmin.changeform_view(self,request,object_id=None,form_url='',extra_context=None)
django.contrib.admin.ModelAdmin.changelist_view(self,request,extra_context=None)
django.contrib.admin.ModelAdmin.construct_change_message(self,request,form,formsets,add=False)
django.contrib.admin.ModelAdmin.delete_model(self,request,obj)
django.contrib.admin.ModelAdmin.delete_queryset(self,request,queryset)
django.contrib.admin.ModelAdmin.delete_view(self,request,object_id,extra_context=None)
django.contrib.admin.ModelAdmin.get_action(self,action)
django.contrib.admin.ModelAdmin.get_action_choices(self,request,default_choices=models.BLANK_CHOICE_DASH)
django.contrib.admin.ModelAdmin.get_actions(self,request)
django.contrib.admin.ModelAdmin.get_changeform_initial_data(self,request)
django.contrib.admin.ModelAdmin.get_changelist(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_changelist_form(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_changelist_formset(self,request,**kwargs)
django.contrib.admin.ModelAdmin.get_changelist_instance(self,request)
django.contrib.admin.ModelAdmin.get_deleted_objects(self,objs,request)
django.contrib.admin.ModelAdmin.get_form(self,request,obj=None,change=False,**kwargs)
django.contrib.admin.ModelAdmin.get_formsets_with_inlines(self,request,obj=None)
django.contrib.admin.ModelAdmin.get_inline_formsets(self,request,formsets,inline_instances,obj=None)
django.contrib.admin.ModelAdmin.get_inline_instances(self,request,obj=None)
django.contrib.admin.ModelAdmin.get_list_display(self,request)
django.contrib.admin.ModelAdmin.get_list_display_links(self,request,list_display)
django.contrib.admin.ModelAdmin.get_list_filter(self,request)
django.contrib.admin.ModelAdmin.get_list_select_related(self,request)
django.contrib.admin.ModelAdmin.get_model_perms(self,request)
django.contrib.admin.ModelAdmin.get_object(self,request,object_id,from_field=None)
django.contrib.admin.ModelAdmin.get_paginator(self,request,queryset,per_page,orphans=0,allow_empty_first_page=True)
django.contrib.admin.ModelAdmin.get_preserved_filters(self,request)
django.contrib.admin.ModelAdmin.get_search_fields(self,request)
django.contrib.admin.ModelAdmin.get_search_results(self,request,queryset,search_term)
django.contrib.admin.ModelAdmin.get_urls(self)
django.contrib.admin.ModelAdmin.history_view(self,request,object_id,extra_context=None)
django.contrib.admin.ModelAdmin.log_addition(self,request,object,message)
django.contrib.admin.ModelAdmin.log_change(self,request,object,message)
django.contrib.admin.ModelAdmin.log_deletion(self,request,object,object_repr)
django.contrib.admin.ModelAdmin.media(self)
django.contrib.admin.ModelAdmin.message_user(self,request,message,level=messages.INFO,extra_tags='',fail_silently=False)
django.contrib.admin.ModelAdmin.render_change_form(self,request,context,add=False,change=False,form_url='',obj=None)
django.contrib.admin.ModelAdmin.render_delete_form(self,request,context)
django.contrib.admin.ModelAdmin.response_action(self,request,queryset)
django.contrib.admin.ModelAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.admin.ModelAdmin.response_change(self,request,obj)
django.contrib.admin.ModelAdmin.response_delete(self,request,obj_display,obj_id)
django.contrib.admin.ModelAdmin.response_post_save_add(self,request,obj)
django.contrib.admin.ModelAdmin.response_post_save_change(self,request,obj)
django.contrib.admin.ModelAdmin.save_form(self,request,form,change)
django.contrib.admin.ModelAdmin.save_formset(self,request,form,formset,change)
django.contrib.admin.ModelAdmin.save_model(self,request,obj,form,change)
django.contrib.admin.ModelAdmin.save_related(self,request,form,formsets,change)
django.contrib.admin.ModelAdmin.urls(self)
django.contrib.admin.StackedInline(InlineModelAdmin)
django.contrib.admin.TabularInline(InlineModelAdmin)
django.contrib.admin.options.BaseModelAdmin(self)
django.contrib.admin.options.BaseModelAdmin.__init__(self)
django.contrib.admin.options.BaseModelAdmin.check(self,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_choice_field(self,db_field,request,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_dbfield(self,db_field,request,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_foreignkey(self,db_field,request,**kwargs)
django.contrib.admin.options.BaseModelAdmin.formfield_for_manytomany(self,db_field,request,**kwargs)
django.contrib.admin.options.BaseModelAdmin.get_autocomplete_fields(self,request)
django.contrib.admin.options.BaseModelAdmin.get_empty_value_display(self)
django.contrib.admin.options.BaseModelAdmin.get_exclude(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_field_queryset(self,db,db_field,request)
django.contrib.admin.options.BaseModelAdmin.get_fields(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_fieldsets(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_inlines(self,request,obj)
django.contrib.admin.options.BaseModelAdmin.get_ordering(self,request)
django.contrib.admin.options.BaseModelAdmin.get_prepopulated_fields(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_queryset(self,request)
django.contrib.admin.options.BaseModelAdmin.get_readonly_fields(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.get_sortable_by(self,request)
django.contrib.admin.options.BaseModelAdmin.get_view_on_site_url(self,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_add_permission(self,request)
django.contrib.admin.options.BaseModelAdmin.has_change_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_delete_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_module_permission(self,request)
django.contrib.admin.options.BaseModelAdmin.has_view_or_change_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.has_view_permission(self,request,obj=None)
django.contrib.admin.options.BaseModelAdmin.lookup_allowed(self,lookup,value)
django.contrib.admin.options.BaseModelAdmin.to_field_allowed(self,request,to_field)
django.contrib.admin.options.IncorrectLookupParameters(Exception)
django.contrib.admin.options.InlineModelAdmin(self,parent_model,admin_site)
django.contrib.admin.options.InlineModelAdmin.__init__(self,parent_model,admin_site)
django.contrib.admin.options.InlineModelAdmin._get_form_for_get_fields(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin._has_any_perms_for_target_model(self,request,perms)
django.contrib.admin.options.InlineModelAdmin.get_extra(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_formset(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_max_num(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_min_num(self,request,obj=None,**kwargs)
django.contrib.admin.options.InlineModelAdmin.get_queryset(self,request)
django.contrib.admin.options.InlineModelAdmin.has_add_permission(self,request,obj)
django.contrib.admin.options.InlineModelAdmin.has_change_permission(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.has_delete_permission(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.has_view_permission(self,request,obj=None)
django.contrib.admin.options.InlineModelAdmin.media(self)
django.contrib.admin.options.ModelAdmin(self,model,admin_site)
django.contrib.admin.options.ModelAdmin.__init__(self,model,admin_site)
django.contrib.admin.options.ModelAdmin.__str__(self)
django.contrib.admin.options.ModelAdmin._changeform_view(self,request,object_id,form_url,extra_context)
django.contrib.admin.options.ModelAdmin._create_formsets(self,request,obj,change)
django.contrib.admin.options.ModelAdmin._delete_view(self,request,object_id,extra_context)
django.contrib.admin.options.ModelAdmin._filter_actions_by_permissions(self,request,actions)
django.contrib.admin.options.ModelAdmin._get_action_description(func,name)
django.contrib.admin.options.ModelAdmin._get_base_actions(self)
django.contrib.admin.options.ModelAdmin._get_edited_object_pks(self,request,prefix)
django.contrib.admin.options.ModelAdmin._get_form_for_get_fields(self,request,obj)
django.contrib.admin.options.ModelAdmin._get_list_editable_queryset(self,request,prefix)
django.contrib.admin.options.ModelAdmin._get_obj_does_not_exist_redirect(self,request,opts,object_id)
django.contrib.admin.options.ModelAdmin._response_post_save(self,request,obj)
django.contrib.admin.options.ModelAdmin.action_checkbox(self,obj)
django.contrib.admin.options.ModelAdmin.add_view(self,request,form_url='',extra_context=None)
django.contrib.admin.options.ModelAdmin.change_view(self,request,object_id,form_url='',extra_context=None)
django.contrib.admin.options.ModelAdmin.changeform_view(self,request,object_id=None,form_url='',extra_context=None)
django.contrib.admin.options.ModelAdmin.changelist_view(self,request,extra_context=None)
django.contrib.admin.options.ModelAdmin.construct_change_message(self,request,form,formsets,add=False)
django.contrib.admin.options.ModelAdmin.delete_model(self,request,obj)
django.contrib.admin.options.ModelAdmin.delete_queryset(self,request,queryset)
django.contrib.admin.options.ModelAdmin.delete_view(self,request,object_id,extra_context=None)
django.contrib.admin.options.ModelAdmin.get_action(self,action)
django.contrib.admin.options.ModelAdmin.get_action_choices(self,request,default_choices=models.BLANK_CHOICE_DASH)
django.contrib.admin.options.ModelAdmin.get_actions(self,request)
django.contrib.admin.options.ModelAdmin.get_changeform_initial_data(self,request)
django.contrib.admin.options.ModelAdmin.get_changelist(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_changelist_form(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_changelist_formset(self,request,**kwargs)
django.contrib.admin.options.ModelAdmin.get_changelist_instance(self,request)
django.contrib.admin.options.ModelAdmin.get_deleted_objects(self,objs,request)
django.contrib.admin.options.ModelAdmin.get_form(self,request,obj=None,change=False,**kwargs)
django.contrib.admin.options.ModelAdmin.get_formsets_with_inlines(self,request,obj=None)
django.contrib.admin.options.ModelAdmin.get_inline_formsets(self,request,formsets,inline_instances,obj=None)
django.contrib.admin.options.ModelAdmin.get_inline_instances(self,request,obj=None)
django.contrib.admin.options.ModelAdmin.get_list_display(self,request)
django.contrib.admin.options.ModelAdmin.get_list_display_links(self,request,list_display)
django.contrib.admin.options.ModelAdmin.get_list_filter(self,request)
django.contrib.admin.options.ModelAdmin.get_list_select_related(self,request)
django.contrib.admin.options.ModelAdmin.get_model_perms(self,request)
django.contrib.admin.options.ModelAdmin.get_object(self,request,object_id,from_field=None)
django.contrib.admin.options.ModelAdmin.get_paginator(self,request,queryset,per_page,orphans=0,allow_empty_first_page=True)
django.contrib.admin.options.ModelAdmin.get_preserved_filters(self,request)
django.contrib.admin.options.ModelAdmin.get_search_fields(self,request)
django.contrib.admin.options.ModelAdmin.get_search_results(self,request,queryset,search_term)
django.contrib.admin.options.ModelAdmin.get_urls(self)
django.contrib.admin.options.ModelAdmin.history_view(self,request,object_id,extra_context=None)
django.contrib.admin.options.ModelAdmin.log_addition(self,request,object,message)
django.contrib.admin.options.ModelAdmin.log_change(self,request,object,message)
django.contrib.admin.options.ModelAdmin.log_deletion(self,request,object,object_repr)
django.contrib.admin.options.ModelAdmin.media(self)
django.contrib.admin.options.ModelAdmin.message_user(self,request,message,level=messages.INFO,extra_tags='',fail_silently=False)
django.contrib.admin.options.ModelAdmin.render_change_form(self,request,context,add=False,change=False,form_url='',obj=None)
django.contrib.admin.options.ModelAdmin.render_delete_form(self,request,context)
django.contrib.admin.options.ModelAdmin.response_action(self,request,queryset)
django.contrib.admin.options.ModelAdmin.response_add(self,request,obj,post_url_continue=None)
django.contrib.admin.options.ModelAdmin.response_change(self,request,obj)
django.contrib.admin.options.ModelAdmin.response_delete(self,request,obj_display,obj_id)
django.contrib.admin.options.ModelAdmin.response_post_save_add(self,request,obj)
django.contrib.admin.options.ModelAdmin.response_post_save_change(self,request,obj)
django.contrib.admin.options.ModelAdmin.save_form(self,request,form,change)
django.contrib.admin.options.ModelAdmin.save_formset(self,request,form,formset,change)
django.contrib.admin.options.ModelAdmin.save_model(self,request,obj,form,change)
django.contrib.admin.options.ModelAdmin.save_related(self,request,form,formsets,change)
django.contrib.admin.options.ModelAdmin.urls(self)
django.contrib.admin.options.StackedInline(InlineModelAdmin)
django.contrib.admin.options.TabularInline(InlineModelAdmin)
django.contrib.admin.options.get_content_type_for_model(obj)
django.contrib.admin.options.get_ul_class(radio_style)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/apps.py----------------------------------------
A:django.contrib.admin.apps.verbose_name->_('Administration')
django.contrib.admin.apps.AdminConfig(SimpleAdminConfig)
django.contrib.admin.apps.AdminConfig.ready(self)
django.contrib.admin.apps.SimpleAdminConfig(AppConfig)
django.contrib.admin.apps.SimpleAdminConfig.ready(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/widgets.py----------------------------------------
A:django.contrib.admin.widgets.context->super().get_context(name, value, attrs)
A:django.contrib.admin.widgets.context['widget']['attrs']['data-is-stacked']->int(self.is_stacked)
A:django.contrib.admin.widgets.context['date_label']->_('Date:')
A:django.contrib.admin.widgets.context['time_label']->_('Time:')
A:django.contrib.admin.widgets.v->str(v)
A:django.contrib.admin.widgets.related_url->reverse('admin:%s_%s_changelist' % (rel_to._meta.app_label, rel_to._meta.model_name), current_app=self.admin_site.name)
A:django.contrib.admin.widgets.params->self.base_url_parameters()
A:django.contrib.admin.widgets.context['link_title']->_('Lookup')
A:django.contrib.admin.widgets.(context['link_label'], context['link_url'])->self.label_and_url_for_value(value)
A:django.contrib.admin.widgets.limit_choices_to->limit_choices_to()
A:django.contrib.admin.widgets.obj->copy.copy(self)
A:django.contrib.admin.widgets.url->reverse('%s:%s_%s_change' % (self.admin_site.name, obj._meta.app_label, obj._meta.object_name.lower()), args=(obj.pk,))
A:django.contrib.admin.widgets.value->data.get(name)
A:django.contrib.admin.widgets.multiple->getattr(widget, 'allow_multiple_selected', False)
A:django.contrib.admin.widgets.obj.widget->copy.deepcopy(self.widget, memo)
A:django.contrib.admin.widgets.url_params->'&'.join(('%s=%s' % param for param in [(TO_FIELD_VAR, self.rel.get_related_field().name), (IS_POPUP_VAR, 1)]))
A:django.contrib.admin.widgets.context['add_related_url']->self.get_related_url(info, 'add')
A:django.contrib.admin.widgets.context['delete_related_template_url']->self.get_related_url(info, 'delete', '__fk__')
A:django.contrib.admin.widgets.context['change_related_template_url']->self.get_related_url(info, 'change', '__fk__')
A:django.contrib.admin.widgets.self.validator->validator_class()
A:django.contrib.admin.widgets.context['current_label']->_('Currently:')
A:django.contrib.admin.widgets.context['change_label']->_('Change:')
A:django.contrib.admin.widgets.attrs->super().build_attrs(base_attrs, extra_attrs=extra_attrs)
A:django.contrib.admin.widgets.to_field_name->getattr(self.field.remote_field, 'field_name', remote_model_opts.pk.attname)
A:django.contrib.admin.widgets.index->len(default[1])
A:django.contrib.admin.widgets.i18n_name->SELECT2_TRANSLATIONS.get(get_language())
django.contrib.admin.widgets.AdminBigIntegerFieldWidget(AdminIntegerFieldWidget)
django.contrib.admin.widgets.AdminDateWidget(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminDateWidget.Media
django.contrib.admin.widgets.AdminDateWidget.__init__(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminEmailInputWidget(self,attrs=None)
django.contrib.admin.widgets.AdminEmailInputWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminFileWidget(forms.ClearableFileInput)
django.contrib.admin.widgets.AdminIntegerFieldWidget(self,attrs=None)
django.contrib.admin.widgets.AdminIntegerFieldWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminRadioSelect(forms.RadioSelect)
django.contrib.admin.widgets.AdminSplitDateTime(self,attrs=None)
django.contrib.admin.widgets.AdminSplitDateTime.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminSplitDateTime.get_context(self,name,value,attrs)
django.contrib.admin.widgets.AdminTextInputWidget(self,attrs=None)
django.contrib.admin.widgets.AdminTextInputWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminTextareaWidget(self,attrs=None)
django.contrib.admin.widgets.AdminTextareaWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AdminTimeWidget(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminTimeWidget.Media
django.contrib.admin.widgets.AdminTimeWidget.__init__(self,attrs=None,format=None)
django.contrib.admin.widgets.AdminURLFieldWidget(self,attrs=None,validator_class=URLValidator)
django.contrib.admin.widgets.AdminURLFieldWidget.__init__(self,attrs=None,validator_class=URLValidator)
django.contrib.admin.widgets.AdminURLFieldWidget.get_context(self,name,value,attrs)
django.contrib.admin.widgets.AdminUUIDInputWidget(self,attrs=None)
django.contrib.admin.widgets.AdminUUIDInputWidget.__init__(self,attrs=None)
django.contrib.admin.widgets.AutocompleteMixin(self,field,admin_site,attrs=None,choices=(),using=None)
django.contrib.admin.widgets.AutocompleteMixin.__init__(self,field,admin_site,attrs=None,choices=(),using=None)
django.contrib.admin.widgets.AutocompleteMixin.build_attrs(self,base_attrs,extra_attrs=None)
django.contrib.admin.widgets.AutocompleteMixin.get_url(self)
django.contrib.admin.widgets.AutocompleteMixin.media(self)
django.contrib.admin.widgets.AutocompleteMixin.optgroups(self,name,value,attr=None)
django.contrib.admin.widgets.AutocompleteSelect(AutocompleteMixin,forms.Select)
django.contrib.admin.widgets.AutocompleteSelectMultiple(AutocompleteMixin,forms.SelectMultiple)
django.contrib.admin.widgets.FilteredSelectMultiple(self,verbose_name,is_stacked,attrs=None,choices=())
django.contrib.admin.widgets.FilteredSelectMultiple.Media
django.contrib.admin.widgets.FilteredSelectMultiple.__init__(self,verbose_name,is_stacked,attrs=None,choices=())
django.contrib.admin.widgets.FilteredSelectMultiple.get_context(self,name,value,attrs)
django.contrib.admin.widgets.ForeignKeyRawIdWidget(self,rel,admin_site,attrs=None,using=None)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.__init__(self,rel,admin_site,attrs=None,using=None)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.base_url_parameters(self)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.get_context(self,name,value,attrs)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.label_and_url_for_value(self,value)
django.contrib.admin.widgets.ForeignKeyRawIdWidget.url_parameters(self)
django.contrib.admin.widgets.ManyToManyRawIdWidget(ForeignKeyRawIdWidget)
django.contrib.admin.widgets.ManyToManyRawIdWidget.format_value(self,value)
django.contrib.admin.widgets.ManyToManyRawIdWidget.get_context(self,name,value,attrs)
django.contrib.admin.widgets.ManyToManyRawIdWidget.label_and_url_for_value(self,value)
django.contrib.admin.widgets.ManyToManyRawIdWidget.url_parameters(self)
django.contrib.admin.widgets.ManyToManyRawIdWidget.value_from_datadict(self,data,files,name)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper(self,widget,rel,admin_site,can_add_related=None,can_change_related=False,can_delete_related=False,can_view_related=False)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.__deepcopy__(self,memo)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.__init__(self,widget,rel,admin_site,can_add_related=None,can_change_related=False,can_delete_related=False,can_view_related=False)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.get_context(self,name,value,attrs)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.get_related_url(self,info,action,*args)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.id_for_label(self,id_)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.is_hidden(self)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.media(self)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.value_from_datadict(self,data,files,name)
django.contrib.admin.widgets.RelatedFieldWidgetWrapper.value_omitted_from_data(self,data,files,name)
django.contrib.admin.widgets.url_params_from_lookup_dict(lookups)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/exceptions.py----------------------------------------
django.contrib.admin.exceptions.DisallowedModelAdminLookup(SuspiciousOperation)
django.contrib.admin.exceptions.DisallowedModelAdminToField(SuspiciousOperation)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/helpers.py----------------------------------------
A:django.contrib.admin.helpers.action->django.forms.ChoiceField(label=_('Action:'))
A:django.contrib.admin.helpers.select_across->django.forms.BooleanField(label='', required=False, initial=0, widget=forms.HiddenInput({'class': 'select-across'}))
A:django.contrib.admin.helpers.checkbox->django.forms.CheckboxInput({'class': 'action-select'}, lambda value: False)
A:django.contrib.admin.helpers.self.classes->' '.join(classes)
A:django.contrib.admin.helpers.self.is_checkbox->isinstance(self.field.field.widget, forms.CheckboxInput)
A:django.contrib.admin.helpers.contents->conditional_escape(self.field.label)
A:django.contrib.admin.helpers.label->label_for_field(field_name, self.opts.model, self.opts, form=empty_form)
A:django.contrib.admin.helpers.help_text->help_text_for_field(class_name, form._meta.model)
A:django.contrib.admin.helpers.self.empty_value_display->model_admin.get_empty_value_display()
A:django.contrib.admin.helpers.url->reverse(url_name, args=[quote(remote_obj.pk)])
A:django.contrib.admin.helpers.(f, attr, value)->lookup_field(field, obj, model_admin)
A:django.contrib.admin.helpers.result_repr->linebreaksbr(result_repr)
A:django.contrib.admin.helpers.view_on_site_url->self.opts.get_view_on_site_url(original)
A:django.contrib.admin.helpers.fk->getattr(self.formset, 'fk', None)
django.contrib.admin.helpers.ActionForm(forms.Form)
django.contrib.admin.helpers.AdminErrorList(self,form,inline_formsets)
django.contrib.admin.helpers.AdminErrorList.__init__(self,form,inline_formsets)
django.contrib.admin.helpers.AdminField(self,form,field,is_first)
django.contrib.admin.helpers.AdminField.__init__(self,form,field,is_first)
django.contrib.admin.helpers.AdminField.errors(self)
django.contrib.admin.helpers.AdminField.label_tag(self)
django.contrib.admin.helpers.AdminForm(self,form,fieldsets,prepopulated_fields,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.AdminForm.__init__(self,form,fieldsets,prepopulated_fields,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.AdminForm.__iter__(self)
django.contrib.admin.helpers.AdminForm.errors(self)
django.contrib.admin.helpers.AdminForm.media(self)
django.contrib.admin.helpers.AdminForm.non_field_errors(self)
django.contrib.admin.helpers.AdminReadonlyField(self,form,field,is_first,model_admin=None)
django.contrib.admin.helpers.AdminReadonlyField.__init__(self,form,field,is_first,model_admin=None)
django.contrib.admin.helpers.AdminReadonlyField.contents(self)
django.contrib.admin.helpers.AdminReadonlyField.get_admin_url(self,remote_field,remote_obj)
django.contrib.admin.helpers.AdminReadonlyField.label_tag(self)
django.contrib.admin.helpers.Fieldline(self,form,field,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.Fieldline.__init__(self,form,field,readonly_fields=None,model_admin=None)
django.contrib.admin.helpers.Fieldline.__iter__(self)
django.contrib.admin.helpers.Fieldline.errors(self)
django.contrib.admin.helpers.Fieldset(self,form,name=None,readonly_fields=(),fields=(),classes=(),description=None,model_admin=None)
django.contrib.admin.helpers.Fieldset.__init__(self,form,name=None,readonly_fields=(),fields=(),classes=(),description=None,model_admin=None)
django.contrib.admin.helpers.Fieldset.__iter__(self)
django.contrib.admin.helpers.Fieldset.media(self)
django.contrib.admin.helpers.InlineAdminForm(self,formset,form,fieldsets,prepopulated_fields,original,readonly_fields=None,model_admin=None,view_on_site_url=None)
django.contrib.admin.helpers.InlineAdminForm.__init__(self,formset,form,fieldsets,prepopulated_fields,original,readonly_fields=None,model_admin=None,view_on_site_url=None)
django.contrib.admin.helpers.InlineAdminForm.__iter__(self)
django.contrib.admin.helpers.InlineAdminForm.deletion_field(self)
django.contrib.admin.helpers.InlineAdminForm.fk_field(self)
django.contrib.admin.helpers.InlineAdminForm.needs_explicit_pk_field(self)
django.contrib.admin.helpers.InlineAdminForm.ordering_field(self)
django.contrib.admin.helpers.InlineAdminForm.pk_field(self)
django.contrib.admin.helpers.InlineAdminFormSet(self,inline,formset,fieldsets,prepopulated_fields=None,readonly_fields=None,model_admin=None,has_add_permission=True,has_change_permission=True,has_delete_permission=True,has_view_permission=True)
django.contrib.admin.helpers.InlineAdminFormSet.__init__(self,inline,formset,fieldsets,prepopulated_fields=None,readonly_fields=None,model_admin=None,has_add_permission=True,has_change_permission=True,has_delete_permission=True,has_view_permission=True)
django.contrib.admin.helpers.InlineAdminFormSet.__iter__(self)
django.contrib.admin.helpers.InlineAdminFormSet.fields(self)
django.contrib.admin.helpers.InlineAdminFormSet.forms(self)
django.contrib.admin.helpers.InlineAdminFormSet.inline_formset_data(self)
django.contrib.admin.helpers.InlineAdminFormSet.media(self)
django.contrib.admin.helpers.InlineAdminFormSet.non_form_errors(self)
django.contrib.admin.helpers.InlineFieldset(self,formset,*args,**kwargs)
django.contrib.admin.helpers.InlineFieldset.__init__(self,formset,*args,**kwargs)
django.contrib.admin.helpers.InlineFieldset.__iter__(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/__init__.py----------------------------------------
django.contrib.admin.__init__.autodiscover()


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/filters.py----------------------------------------
A:django.contrib.admin.filters.value->params.pop(p)
A:django.contrib.admin.filters.lookup_choices->self.lookups(request, model_admin)
A:django.contrib.admin.filters.self.lookup_choices->parent_model._default_manager.all().distinct().order_by(field.name).values_list(field.name, flat=True)
A:django.contrib.admin.filters.self.title->getattr(field, 'verbose_name', field_path)
A:django.contrib.admin.filters.self.used_parameters[p]->prepare_lookup_value(p, value)
A:django.contrib.admin.filters.other_model->get_model_from_relation(field)
A:django.contrib.admin.filters.self.lookup_val->params.get(self.lookup_kwarg)
A:django.contrib.admin.filters.self.lookup_val_isnull->params.get(self.lookup_kwarg_isnull)
A:django.contrib.admin.filters.self.empty_value_display->model_admin.get_empty_value_display()
A:django.contrib.admin.filters.related_admin->model_admin.admin_site._registry.get(field.remote_field.model)
A:django.contrib.admin.filters.ordering->self.field_admin_ordering(field, request, model_admin)
A:django.contrib.admin.filters.self.lookup_val2->params.get(self.lookup_kwarg2)
A:django.contrib.admin.filters.self.used_parameters[self.lookup_kwarg]->bool(int(self.used_parameters[self.lookup_kwarg]))
A:django.contrib.admin.filters.field_choices->dict(self.field.flatchoices)
A:django.contrib.admin.filters.now->django.utils.timezone.localtime(now)
A:django.contrib.admin.filters.today->django.utils.timezone.localtime(now).date()
A:django.contrib.admin.filters.next_month->django.utils.timezone.localtime(now).date().replace(month=today.month + 1, day=1)
A:django.contrib.admin.filters.next_year->django.utils.timezone.localtime(now).date().replace(year=today.year + 1, month=1, day=1)
A:django.contrib.admin.filters.(parent_model, reverse_path)->reverse_field_path(model, field_path)
A:django.contrib.admin.filters.queryset->parent_model._default_manager.all()
A:django.contrib.admin.filters.val->str(val)
A:django.contrib.admin.filters.pk_qs->model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)
A:django.contrib.admin.filters.lookup_condition->django.db.models.Q()
django.contrib.admin.AllValuesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.AllValuesFieldListFilter.choices(self,changelist)
django.contrib.admin.AllValuesFieldListFilter.expected_parameters(self)
django.contrib.admin.BooleanFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.BooleanFieldListFilter.choices(self,changelist)
django.contrib.admin.BooleanFieldListFilter.expected_parameters(self)
django.contrib.admin.ChoicesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.ChoicesFieldListFilter.choices(self,changelist)
django.contrib.admin.ChoicesFieldListFilter.expected_parameters(self)
django.contrib.admin.DateFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.DateFieldListFilter.choices(self,changelist)
django.contrib.admin.DateFieldListFilter.expected_parameters(self)
django.contrib.admin.EmptyFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.EmptyFieldListFilter.choices(self,changelist)
django.contrib.admin.EmptyFieldListFilter.expected_parameters(self)
django.contrib.admin.EmptyFieldListFilter.queryset(self,request,queryset)
django.contrib.admin.FieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.FieldListFilter.create(cls,field,request,params,model,model_admin,field_path)
django.contrib.admin.FieldListFilter.has_output(self)
django.contrib.admin.FieldListFilter.queryset(self,request,queryset)
django.contrib.admin.FieldListFilter.register(cls,test,list_filter_class,take_priority=False)
django.contrib.admin.ListFilter(self,request,params,model,model_admin)
django.contrib.admin.ListFilter.choices(self,changelist)
django.contrib.admin.ListFilter.expected_parameters(self)
django.contrib.admin.ListFilter.has_output(self)
django.contrib.admin.ListFilter.queryset(self,request,queryset)
django.contrib.admin.RelatedFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.RelatedFieldListFilter.choices(self,changelist)
django.contrib.admin.RelatedFieldListFilter.expected_parameters(self)
django.contrib.admin.RelatedFieldListFilter.field_admin_ordering(self,field,request,model_admin)
django.contrib.admin.RelatedFieldListFilter.field_choices(self,field,request,model_admin)
django.contrib.admin.RelatedFieldListFilter.has_output(self)
django.contrib.admin.RelatedFieldListFilter.include_empty_choice(self)
django.contrib.admin.RelatedOnlyFieldListFilter(RelatedFieldListFilter)
django.contrib.admin.RelatedOnlyFieldListFilter.field_choices(self,field,request,model_admin)
django.contrib.admin.SimpleListFilter(self,request,params,model,model_admin)
django.contrib.admin.SimpleListFilter.choices(self,changelist)
django.contrib.admin.SimpleListFilter.expected_parameters(self)
django.contrib.admin.SimpleListFilter.has_output(self)
django.contrib.admin.SimpleListFilter.lookups(self,request,model_admin)
django.contrib.admin.SimpleListFilter.value(self)
django.contrib.admin.filters.AllValuesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.AllValuesFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.AllValuesFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.AllValuesFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.BooleanFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.BooleanFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.BooleanFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.BooleanFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.ChoicesFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.ChoicesFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.ChoicesFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.ChoicesFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.DateFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.DateFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.DateFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.DateFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.EmptyFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.EmptyFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.EmptyFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.EmptyFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.EmptyFieldListFilter.queryset(self,request,queryset)
django.contrib.admin.filters.FieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.create(cls,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.FieldListFilter.has_output(self)
django.contrib.admin.filters.FieldListFilter.queryset(self,request,queryset)
django.contrib.admin.filters.FieldListFilter.register(cls,test,list_filter_class,take_priority=False)
django.contrib.admin.filters.ListFilter(self,request,params,model,model_admin)
django.contrib.admin.filters.ListFilter.__init__(self,request,params,model,model_admin)
django.contrib.admin.filters.ListFilter.choices(self,changelist)
django.contrib.admin.filters.ListFilter.expected_parameters(self)
django.contrib.admin.filters.ListFilter.has_output(self)
django.contrib.admin.filters.ListFilter.queryset(self,request,queryset)
django.contrib.admin.filters.RelatedFieldListFilter(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.RelatedFieldListFilter.__init__(self,field,request,params,model,model_admin,field_path)
django.contrib.admin.filters.RelatedFieldListFilter.choices(self,changelist)
django.contrib.admin.filters.RelatedFieldListFilter.expected_parameters(self)
django.contrib.admin.filters.RelatedFieldListFilter.field_admin_ordering(self,field,request,model_admin)
django.contrib.admin.filters.RelatedFieldListFilter.field_choices(self,field,request,model_admin)
django.contrib.admin.filters.RelatedFieldListFilter.has_output(self)
django.contrib.admin.filters.RelatedFieldListFilter.include_empty_choice(self)
django.contrib.admin.filters.RelatedOnlyFieldListFilter(RelatedFieldListFilter)
django.contrib.admin.filters.RelatedOnlyFieldListFilter.field_choices(self,field,request,model_admin)
django.contrib.admin.filters.SimpleListFilter(self,request,params,model,model_admin)
django.contrib.admin.filters.SimpleListFilter.__init__(self,request,params,model,model_admin)
django.contrib.admin.filters.SimpleListFilter.choices(self,changelist)
django.contrib.admin.filters.SimpleListFilter.expected_parameters(self)
django.contrib.admin.filters.SimpleListFilter.has_output(self)
django.contrib.admin.filters.SimpleListFilter.lookups(self,request,model_admin)
django.contrib.admin.filters.SimpleListFilter.value(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/models.py----------------------------------------
A:django.contrib.admin.models.change_message->' '.join((msg[0].upper() + msg[1:] for msg in messages))
A:django.contrib.admin.models.action_time->django.db.models.DateTimeField(_('action time'), default=timezone.now, editable=False)
A:django.contrib.admin.models.user->django.db.models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, verbose_name=_('user'))
A:django.contrib.admin.models.content_type->django.db.models.ForeignKey(ContentType, models.SET_NULL, verbose_name=_('content type'), blank=True, null=True)
A:django.contrib.admin.models.object_id->django.db.models.TextField(_('object id'), blank=True, null=True)
A:django.contrib.admin.models.object_repr->django.db.models.CharField(_('object repr'), max_length=200)
A:django.contrib.admin.models.action_flag->django.db.models.PositiveSmallIntegerField(_('action flag'), choices=ACTION_FLAG_CHOICES)
A:django.contrib.admin.models.objects->LogEntryManager()
A:django.contrib.admin.models.verbose_name->_('log entry')
A:django.contrib.admin.models.verbose_name_plural->_('log entries')
A:django.contrib.admin.models.sub_message['added']['name']->gettext(sub_message['added']['name'])
A:django.contrib.admin.models.sub_message['changed']['fields']->get_text_list([gettext(field_name) for field_name in sub_message['changed']['fields']], gettext('and'))
A:django.contrib.admin.models.sub_message['changed']['name']->gettext(sub_message['changed']['name'])
A:django.contrib.admin.models.sub_message['deleted']['name']->gettext(sub_message['deleted']['name'])
django.contrib.admin.models.LogEntry(models.Model)
django.contrib.admin.models.LogEntry.Meta
django.contrib.admin.models.LogEntry.__repr__(self)
django.contrib.admin.models.LogEntry.__str__(self)
django.contrib.admin.models.LogEntry.get_admin_url(self)
django.contrib.admin.models.LogEntry.get_change_message(self)
django.contrib.admin.models.LogEntry.get_edited_object(self)
django.contrib.admin.models.LogEntry.is_addition(self)
django.contrib.admin.models.LogEntry.is_change(self)
django.contrib.admin.models.LogEntry.is_deletion(self)
django.contrib.admin.models.LogEntryManager(models.Manager)
django.contrib.admin.models.LogEntryManager.log_action(self,user_id,content_type_id,object_id,object_repr,action_flag,change_message='')


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/decorators.py----------------------------------------
django.contrib.admin.action(function=None,*,permissions=None,description=None)
django.contrib.admin.decorators.action(function=None,*,permissions=None,description=None)
django.contrib.admin.decorators.display(function=None,*,boolean=None,ordering=None,description=None,empty_value=None)
django.contrib.admin.decorators.register(*models,site=None)
django.contrib.admin.display(function=None,*,boolean=None,ordering=None,description=None,empty_value=None)
django.contrib.admin.register(*models,site=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/actions.py----------------------------------------
A:django.contrib.admin.actions.(deletable_objects, model_count, perms_needed, protected)->modeladmin.get_deleted_objects(queryset, request)
A:django.contrib.admin.actions.n->queryset.count()
A:django.contrib.admin.actions.obj_display->str(obj)
A:django.contrib.admin.actions.objects_name->model_ngettext(queryset)
A:django.contrib.admin.actions.title->_('Are you sure?')
django.contrib.admin.actions.delete_selected(modeladmin,request,queryset)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/forms.py----------------------------------------
django.contrib.admin.forms.AdminAuthenticationForm(AuthenticationForm)
django.contrib.admin.forms.AdminAuthenticationForm.confirm_login_allowed(self,user)
django.contrib.admin.forms.AdminPasswordChangeForm(PasswordChangeForm)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/views/autocomplete.py----------------------------------------
A:django.contrib.admin.views.autocomplete.(self.term, self.model_admin, self.source_field, to_field_name)->self.process_request(request)
A:django.contrib.admin.views.autocomplete.self.object_list->self.get_queryset()
A:django.contrib.admin.views.autocomplete.context->self.get_context_data()
A:django.contrib.admin.views.autocomplete.qs->qs.distinct().distinct()
A:django.contrib.admin.views.autocomplete.(qs, search_use_distinct)->self.model_admin.get_search_results(self.request, qs, self.term)
A:django.contrib.admin.views.autocomplete.term->request.GET.get('term', '')
A:django.contrib.admin.views.autocomplete.source_model->django.apps.apps.get_model(app_label, model_name)
A:django.contrib.admin.views.autocomplete.source_field->django.apps.apps.get_model(app_label, model_name)._meta.get_field(field_name)
A:django.contrib.admin.views.autocomplete.to_field_name->getattr(source_field.remote_field, 'field_name', remote_model._meta.pk.attname)
django.contrib.admin.views.autocomplete.AutocompleteJsonView(BaseListView)
django.contrib.admin.views.autocomplete.AutocompleteJsonView.get(self,request,*args,**kwargs)
django.contrib.admin.views.autocomplete.AutocompleteJsonView.get_paginator(self,*args,**kwargs)
django.contrib.admin.views.autocomplete.AutocompleteJsonView.get_queryset(self)
django.contrib.admin.views.autocomplete.AutocompleteJsonView.has_perm(self,request,obj=None)
django.contrib.admin.views.autocomplete.AutocompleteJsonView.process_request(self,request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/views/main.py----------------------------------------
A:django.contrib.admin.views.main.self.root_queryset->model_admin.get_queryset(request)
A:django.contrib.admin.views.main.self.preserved_filters->model_admin.get_preserved_filters(request)
A:django.contrib.admin.views.main._search_form->self.search_form_class(request.GET)
A:django.contrib.admin.views.main.self.page_num->int(request.GET.get(PAGE_VAR, 1))
A:django.contrib.admin.views.main.to_field->request.GET.get(TO_FIELD_VAR)
A:django.contrib.admin.views.main.self.params->dict(request.GET.items())
A:django.contrib.admin.views.main.self.queryset->self.get_queryset(request)
A:django.contrib.admin.views.main.title->gettext('Select %s to view')
A:django.contrib.admin.views.main.lookup_params->self.get_filters_params()
A:django.contrib.admin.views.main.lookup_params_count->len(lookup_params)
A:django.contrib.admin.views.main.spec->field_list_filter_class(field, request, lookup_params, self.model, self.model_admin, field_path=field_path)
A:django.contrib.admin.views.main.year->self.get_filters_params().pop('%s__year' % self.date_hierarchy, None)
A:django.contrib.admin.views.main.month->self.get_filters_params().pop('%s__month' % self.date_hierarchy, None)
A:django.contrib.admin.views.main.day->self.get_filters_params().pop('%s__day' % self.date_hierarchy, None)
A:django.contrib.admin.views.main.from_date->make_aware(from_date)
A:django.contrib.admin.views.main.to_date->make_aware(to_date)
A:django.contrib.admin.views.main.lookup_params[key]->prepare_lookup_value(key, value)
A:django.contrib.admin.views.main.p->self.params.copy()
A:django.contrib.admin.views.main.paginator->self.model_admin.get_paginator(request, self.queryset, self.list_per_page)
A:django.contrib.admin.views.main.full_result_count->self.root_queryset.count()
A:django.contrib.admin.views.main.result_list->self.queryset._clone()
A:django.contrib.admin.views.main.field->self.lookup_opts.get_field(field_name)
A:django.contrib.admin.views.main.attr->getattr(self.model, field_name)
A:django.contrib.admin.views.main.ordering->self.get_ordering(request, qs)
A:django.contrib.admin.views.main.order_params->params[ORDER_VAR].split('.')
A:django.contrib.admin.views.main.(none, pfx, idx)->self.params.copy().rpartition('-')
A:django.contrib.admin.views.main.order_field->order_field.copy().copy()
A:django.contrib.admin.views.main.ordering_fields->set()
A:django.contrib.admin.views.main.field_name->part.lstrip('-')
A:django.contrib.admin.views.main.idx->int(idx)
A:django.contrib.admin.views.main.(self.filter_specs, self.has_filters, remaining_lookup_params, filters_may_have_duplicates, self.has_active_filters)->self.get_filters(request)
A:django.contrib.admin.views.main.new_qs->filter_spec.queryset(request, qs)
A:django.contrib.admin.views.main.qs->self.apply_select_related(qs)
A:django.contrib.admin.views.main.(qs, search_may_have_duplicates)->self.model_admin.get_search_results(request, qs, self.query)
A:django.contrib.admin.views.main.self.clear_all_filters_qs->self.get_query_string(new_params=remaining_lookup_params, remove=self.get_filters_params())
A:django.contrib.admin.views.main.pk->getattr(result, self.pk_attname)
django.contrib.admin.views.main.ChangeList(self,request,model,list_display,list_display_links,list_filter,date_hierarchy,search_fields,list_select_related,list_per_page,list_max_show_all,list_editable,model_admin,sortable_by)
django.contrib.admin.views.main.ChangeList.__init__(self,request,model,list_display,list_display_links,list_filter,date_hierarchy,search_fields,list_select_related,list_per_page,list_max_show_all,list_editable,model_admin,sortable_by)
django.contrib.admin.views.main.ChangeList._get_default_ordering(self)
django.contrib.admin.views.main.ChangeList._get_deterministic_ordering(self,ordering)
django.contrib.admin.views.main.ChangeList.apply_select_related(self,qs)
django.contrib.admin.views.main.ChangeList.get_filters(self,request)
django.contrib.admin.views.main.ChangeList.get_filters_params(self,params=None)
django.contrib.admin.views.main.ChangeList.get_ordering(self,request,queryset)
django.contrib.admin.views.main.ChangeList.get_ordering_field(self,field_name)
django.contrib.admin.views.main.ChangeList.get_ordering_field_columns(self)
django.contrib.admin.views.main.ChangeList.get_query_string(self,new_params=None,remove=None)
django.contrib.admin.views.main.ChangeList.get_queryset(self,request)
django.contrib.admin.views.main.ChangeList.get_results(self,request)
django.contrib.admin.views.main.ChangeList.has_related_field_in_list_display(self)
django.contrib.admin.views.main.ChangeList.url_for_result(self,result)
django.contrib.admin.views.main.ChangeListSearchForm(self,*args,**kwargs)
django.contrib.admin.views.main.ChangeListSearchForm.__init__(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/views/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/views/decorators.py----------------------------------------
A:django.contrib.admin.views.decorators.actual_decorator->user_passes_test(lambda u: u.is_active and u.is_staff, login_url=login_url, redirect_field_name=redirect_field_name)
django.contrib.admin.views.decorators.staff_member_required(view_func=None,redirect_field_name=REDIRECT_FIELD_NAME,login_url='admin:login')


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/migrations/0002_logentry_remove_auto_add.py----------------------------------------
django.contrib.admin.migrations.0002_logentry_remove_auto_add.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/migrations/0001_initial.py----------------------------------------
django.contrib.admin.migrations.0001_initial.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/migrations/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/migrations/0003_logentry_add_action_flag_choices.py----------------------------------------
django.contrib.admin.migrations.0003_logentry_add_action_flag_choices.Migration(migrations.Migration)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/admin_modify.py----------------------------------------
A:django.contrib.admin.templatetags.admin_modify.register->django.template.Library()
A:django.contrib.admin.templatetags.admin_modify.show_save->context.get('show_save', True)
A:django.contrib.admin.templatetags.admin_modify.show_save_and_add_another->context.get('show_save_and_add_another', True)
A:django.contrib.admin.templatetags.admin_modify.show_save_and_continue->context.get('show_save_and_continue', True)
A:django.contrib.admin.templatetags.admin_modify.ctx->Context(context)
django.contrib.admin.templatetags.admin_modify.cell_count(inline_admin_form)
django.contrib.admin.templatetags.admin_modify.change_form_object_tools_tag(parser,token)
django.contrib.admin.templatetags.admin_modify.prepopulated_fields_js(context)
django.contrib.admin.templatetags.admin_modify.prepopulated_fields_js_tag(parser,token)
django.contrib.admin.templatetags.admin_modify.submit_row(context)
django.contrib.admin.templatetags.admin_modify.submit_row_tag(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/admin_list.py----------------------------------------
A:django.contrib.admin.templatetags.admin_list.register->Library()
A:django.contrib.admin.templatetags.admin_list.ordering_field_columns->cl.get_ordering_field_columns()
A:django.contrib.admin.templatetags.admin_list.(text, attr)->label_for_field(field_name, cl.model, model_admin=cl.model_admin, return_attr=True)
A:django.contrib.admin.templatetags.admin_list.field_name->_coerce_field_name(field_name, i)
A:django.contrib.admin.templatetags.admin_list.admin_order_field->getattr(attr.fget, 'admin_order_field', None)
A:django.contrib.admin.templatetags.admin_list.order_type->cl.get_ordering_field_columns().get(i).lower()
A:django.contrib.admin.templatetags.admin_list.param->make_qs_param(ot, j)
A:django.contrib.admin.templatetags.admin_list.icon_url->static('admin/img/icon-%s.svg' % {True: 'yes', False: 'no', None: 'unknown'}[field_val])
A:django.contrib.admin.templatetags.admin_list.empty_value_display->getattr(attr, 'empty_value_display', empty_value_display)
A:django.contrib.admin.templatetags.admin_list.(f, attr, value)->lookup_field(field_name, result, cl.model_admin)
A:django.contrib.admin.templatetags.admin_list.boolean->getattr(attr, 'boolean', False)
A:django.contrib.admin.templatetags.admin_list.result_repr->mark_safe(str(bf.errors) + str(bf))
A:django.contrib.admin.templatetags.admin_list.field_val->getattr(result, f.name)
A:django.contrib.admin.templatetags.admin_list.row_class->mark_safe(' class="%s"' % ' '.join(row_classes))
A:django.contrib.admin.templatetags.admin_list.url->add_preserved_filters({'preserved_filters': cl.preserved_filters, 'opts': cl.opts}, url)
A:django.contrib.admin.templatetags.admin_list.attr->str(cl.to_field)
A:django.contrib.admin.templatetags.admin_list.value->result.serializable_value(attr)
A:django.contrib.admin.templatetags.admin_list.link_or_text->format_html('<a href="{}"{}>{}</a>', url, format_html(' data-popup-opener="{}"', value) if cl.is_popup else '', result_repr)
A:django.contrib.admin.templatetags.admin_list.headers->list(result_headers(cl))
A:django.contrib.admin.templatetags.admin_list.year_lookup->cl.params.get(year_field)
A:django.contrib.admin.templatetags.admin_list.month_lookup->cl.params.get(month_field)
A:django.contrib.admin.templatetags.admin_list.day_lookup->cl.params.get(day_field)
A:django.contrib.admin.templatetags.admin_list.date_range->cl.queryset.aggregate(first=models.Min(field_name), last=models.Max(field_name))
A:django.contrib.admin.templatetags.admin_list.day->datetime.date(int(year_lookup), int(month_lookup), int(day_lookup))
A:django.contrib.admin.templatetags.admin_list.days->getattr(cl.queryset, dates_or_datetimes)(field_name, 'day', **qs_kwargs)
A:django.contrib.admin.templatetags.admin_list.months->getattr(cl.queryset, dates_or_datetimes)(field_name, 'month', **qs_kwargs)
A:django.contrib.admin.templatetags.admin_list.years->getattr(cl.queryset, dates_or_datetimes)(field_name, 'year', **qs_kwargs)
A:django.contrib.admin.templatetags.admin_list.tpl->get_template(spec.template)
django.contrib.admin.templatetags.admin_list.ResultList(self,form,*items)
django.contrib.admin.templatetags.admin_list.ResultList.__init__(self,form,*items)
django.contrib.admin.templatetags.admin_list._boolean_icon(field_val)
django.contrib.admin.templatetags.admin_list._coerce_field_name(field_name,field_index)
django.contrib.admin.templatetags.admin_list.admin_actions(context)
django.contrib.admin.templatetags.admin_list.admin_actions_tag(parser,token)
django.contrib.admin.templatetags.admin_list.admin_list_filter(cl,spec)
django.contrib.admin.templatetags.admin_list.change_list_object_tools_tag(parser,token)
django.contrib.admin.templatetags.admin_list.date_hierarchy(cl)
django.contrib.admin.templatetags.admin_list.date_hierarchy_tag(parser,token)
django.contrib.admin.templatetags.admin_list.items_for_result(cl,result,form)
django.contrib.admin.templatetags.admin_list.pagination(cl)
django.contrib.admin.templatetags.admin_list.pagination_tag(parser,token)
django.contrib.admin.templatetags.admin_list.paginator_number(cl,i)
django.contrib.admin.templatetags.admin_list.result_headers(cl)
django.contrib.admin.templatetags.admin_list.result_hidden_fields(cl)
django.contrib.admin.templatetags.admin_list.result_list(cl)
django.contrib.admin.templatetags.admin_list.result_list_tag(parser,token)
django.contrib.admin.templatetags.admin_list.results(cl)
django.contrib.admin.templatetags.admin_list.search_form(cl)
django.contrib.admin.templatetags.admin_list.search_form_tag(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/admin_urls.py----------------------------------------
A:django.contrib.admin.templatetags.admin_urls.register->django.template.Library()
A:django.contrib.admin.templatetags.admin_urls.opts->context.get('opts')
A:django.contrib.admin.templatetags.admin_urls.preserved_filters->dict(parse_qsl(preserved_filters['_changelist_filters']))
A:django.contrib.admin.templatetags.admin_urls.parsed_url->list(urlparse(url))
A:django.contrib.admin.templatetags.admin_urls.parsed_qs->dict(parse_qsl(parsed_url[4]))
A:django.contrib.admin.templatetags.admin_urls.match->resolve(match_url)
A:django.contrib.admin.templatetags.admin_urls.parsed_url[4]->urlencode(merged_qs)
django.contrib.admin.templatetags.admin_urls.add_preserved_filters(context,url,popup=False,to_field=None)
django.contrib.admin.templatetags.admin_urls.admin_urlname(value,arg)
django.contrib.admin.templatetags.admin_urls.admin_urlquote(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/log.py----------------------------------------
A:django.contrib.admin.templatetags.log.register->django.template.Library()
A:django.contrib.admin.templatetags.log.entries->django.contrib.admin.models.LogEntry.objects.filter(user__pk=user_id)
A:django.contrib.admin.templatetags.log.tokens->token.contents.split()
django.contrib.admin.templatetags.log.AdminLogNode(self,limit,varname,user)
django.contrib.admin.templatetags.log.AdminLogNode.__init__(self,limit,varname,user)
django.contrib.admin.templatetags.log.AdminLogNode.__repr__(self)
django.contrib.admin.templatetags.log.AdminLogNode.render(self,context)
django.contrib.admin.templatetags.log.get_admin_log(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/base.py----------------------------------------
A:django.contrib.admin.templatetags.base.(params, varargs, varkw, defaults, kwonly, kwonly_defaults, _)->getfullargspec(func)
A:django.contrib.admin.templatetags.base.bits->token.split_contents()
A:django.contrib.admin.templatetags.base.(args, kwargs)->parse_bits(parser, bits[1:], params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, bits[0])
A:django.contrib.admin.templatetags.base.app_label->opts.app_label.lower()
A:django.contrib.admin.templatetags.base.object_name->opts.object_name.lower()
A:django.contrib.admin.templatetags.base.context.render_context[self]->context.template.engine.select_template(['admin/%s/%s/%s' % (app_label, object_name, self.template_name), 'admin/%s/%s' % (app_label, self.template_name), 'admin/%s' % self.template_name])
django.contrib.admin.templatetags.base.InclusionAdminNode(self,parser,token,func,template_name,takes_context=True)
django.contrib.admin.templatetags.base.InclusionAdminNode.__init__(self,parser,token,func,template_name,takes_context=True)
django.contrib.admin.templatetags.base.InclusionAdminNode.render(self,context)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/admin/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/utils.py----------------------------------------
django.contrib.messages.utils.get_level_tags()


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/middleware.py----------------------------------------
A:django.contrib.messages.middleware.request._messages->default_storage(request)
A:django.contrib.messages.middleware.unstored_messages->request._messages.update(response)
django.contrib.messages.middleware.MessageMiddleware(MiddlewareMixin)
django.contrib.messages.middleware.MessageMiddleware.process_request(self,request)
django.contrib.messages.middleware.MessageMiddleware.process_response(self,request,response)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/apps.py----------------------------------------
A:django.contrib.messages.apps.verbose_name->_('Messages')
django.contrib.messages.apps.MessagesConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/views.py----------------------------------------
A:django.contrib.messages.views.response->super().form_valid(form)
A:django.contrib.messages.views.success_message->self.get_success_message(form.cleaned_data)
django.contrib.messages.views.SuccessMessageMixin
django.contrib.messages.views.SuccessMessageMixin.form_valid(self,form)
django.contrib.messages.views.SuccessMessageMixin.get_success_message(self,cleaned_data)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/api.py----------------------------------------
A:django.contrib.messages.api.storage->getattr(request, '_messages', default_storage(request))
django.contrib.messages.MessageFailure(Exception)
django.contrib.messages.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.MessageFailure(Exception)
django.contrib.messages.api.add_message(request,level,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.get_level(request)
django.contrib.messages.api.get_messages(request)
django.contrib.messages.api.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.set_level(request,level)
django.contrib.messages.api.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.api.warning(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.debug(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.error(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.get_level(request)
django.contrib.messages.get_messages(request)
django.contrib.messages.info(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.set_level(request,level)
django.contrib.messages.success(request,message,extra_tags='',fail_silently=False)
django.contrib.messages.warning(request,message,extra_tags='',fail_silently=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/context_processors.py----------------------------------------
django.contrib.messages.context_processors.messages(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/storage/session.py----------------------------------------
A:django.contrib.messages.storage.session.self.request.session[self.session_key]->self.serialize_messages(messages)
A:django.contrib.messages.storage.session.encoder->MessageEncoder()
django.contrib.messages.storage.session.SessionStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.session.SessionStorage.deserialize_messages(self,data)
django.contrib.messages.storage.session.SessionStorage.serialize_messages(self,messages)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/storage/base.py----------------------------------------
A:django.contrib.messages.storage.base.LEVEL_TAGS->django.contrib.messages.utils.get_level_tags()
A:django.contrib.messages.storage.base.self.level->int(level)
A:django.contrib.messages.storage.base.self.message->str(self.message)
A:django.contrib.messages.storage.base.(messages, all_retrieved)->self._get()
A:django.contrib.messages.storage.base.level->property(_get_level, _set_level, _set_level)
A:django.contrib.messages.storage.base.message->Message(level, message, extra_tags=extra_tags)
A:django.contrib.messages.storage.base.self._level->int(value)
django.contrib.messages.storage.base.BaseStorage(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__contains__(self,item)
django.contrib.messages.storage.base.BaseStorage.__init__(self,request,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.__iter__(self)
django.contrib.messages.storage.base.BaseStorage.__len__(self)
django.contrib.messages.storage.base.BaseStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage._get_level(self)
django.contrib.messages.storage.base.BaseStorage._loaded_messages(self)
django.contrib.messages.storage.base.BaseStorage._prepare_messages(self,messages)
django.contrib.messages.storage.base.BaseStorage._set_level(self,value=None)
django.contrib.messages.storage.base.BaseStorage._store(self,messages,response,*args,**kwargs)
django.contrib.messages.storage.base.BaseStorage.add(self,level,message,extra_tags='')
django.contrib.messages.storage.base.BaseStorage.update(self,response)
django.contrib.messages.storage.base.Message(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__eq__(self,other)
django.contrib.messages.storage.base.Message.__init__(self,level,message,extra_tags=None)
django.contrib.messages.storage.base.Message.__str__(self)
django.contrib.messages.storage.base.Message._prepare(self)
django.contrib.messages.storage.base.Message.level_tag(self)
django.contrib.messages.storage.base.Message.tags(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/storage/cookie.py----------------------------------------
A:django.contrib.messages.storage.cookie.obj[3]->mark_safe(obj[3])
A:django.contrib.messages.storage.cookie.decoded->self.signer.unsign(data)
A:django.contrib.messages.storage.cookie.self.signer->django.core.signing.get_cookie_signer(salt=self.key_salt)
A:django.contrib.messages.storage.cookie.data->self.request.COOKIES.get(self.cookie_name)
A:django.contrib.messages.storage.cookie.messages->self._decode(data)
A:django.contrib.messages.storage.cookie.encoded_data->self._encode(messages + [self.not_finished], encode_empty=unstored_messages)
A:django.contrib.messages.storage.cookie.cookie->SimpleCookie()
A:django.contrib.messages.storage.cookie.bits->self.request.COOKIES.get(self.cookie_name).split('$', 1)
django.contrib.messages.storage.cookie.CookieStorage(self,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage.__init__(self,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._decode(self,data)
django.contrib.messages.storage.cookie.CookieStorage._encode(self,messages,encode_empty=False)
django.contrib.messages.storage.cookie.CookieStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._legacy_decode(self,data)
django.contrib.messages.storage.cookie.CookieStorage._legacy_hash(self,value)
django.contrib.messages.storage.cookie.CookieStorage._store(self,messages,response,remove_oldest=True,*args,**kwargs)
django.contrib.messages.storage.cookie.CookieStorage._update_cookie(self,encoded_data,response)
django.contrib.messages.storage.cookie.MessageDecoder(json.JSONDecoder)
django.contrib.messages.storage.cookie.MessageDecoder.decode(self,s,**kwargs)
django.contrib.messages.storage.cookie.MessageDecoder.process_messages(self,obj)
django.contrib.messages.storage.cookie.MessageEncoder(json.JSONEncoder)
django.contrib.messages.storage.cookie.MessageEncoder.default(self,obj)
django.contrib.messages.storage.cookie.MessageSerializer
django.contrib.messages.storage.cookie.MessageSerializer.dumps(self,obj)
django.contrib.messages.storage.cookie.MessageSerializer.loads(self,data)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/storage/fallback.py----------------------------------------
A:django.contrib.messages.storage.fallback.self._used_storages->set()
A:django.contrib.messages.storage.fallback.(messages, all_retrieved)->storage._get()
A:django.contrib.messages.storage.fallback.messages->storage._store(messages, response, remove_oldest=False)
django.contrib.messages.storage.fallback.FallbackStorage(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage.__init__(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._get(self,*args,**kwargs)
django.contrib.messages.storage.fallback.FallbackStorage._store(self,messages,response,*args,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/messages/storage/__init__.py----------------------------------------
django.contrib.messages.storage.__init__.default_storage(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/humanize/apps.py----------------------------------------
A:django.contrib.humanize.apps.verbose_name->_('Humanize')
django.contrib.humanize.apps.HumanizeConfig(AppConfig)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/humanize/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/humanize/templatetags/humanize.py----------------------------------------
A:django.contrib.humanize.templatetags.humanize.register->django.template.Library()
A:django.contrib.humanize.templatetags.humanize.value->date(value.year, value.month, value.day)
A:django.contrib.humanize.templatetags.humanize.orig->str(value)
A:django.contrib.humanize.templatetags.humanize.new->re.sub('^(-?\\d+)(\\d{3})', '\\g<1>,\\g<2>', orig)
A:django.contrib.humanize.templatetags.humanize.abs_value->abs(value)
A:django.contrib.humanize.templatetags.humanize.rounded_value->round_away_from_one(new_value)
A:django.contrib.humanize.templatetags.humanize.tzinfo->getattr(value, 'tzinfo', None)
A:django.contrib.humanize.templatetags.humanize.today->datetime.datetime.now(tzinfo).date()
A:django.contrib.humanize.templatetags.humanize.now->datetime.datetime.now(utc if is_aware(value) else None)
django.contrib.humanize.templatetags.humanize.NaturalTimeFormatter
django.contrib.humanize.templatetags.humanize.NaturalTimeFormatter.string_for(cls,value)
django.contrib.humanize.templatetags.humanize.apnumber(value)
django.contrib.humanize.templatetags.humanize.intcomma(value,use_l10n=True)
django.contrib.humanize.templatetags.humanize.intword(value)
django.contrib.humanize.templatetags.humanize.naturalday(value,arg=None)
django.contrib.humanize.templatetags.humanize.naturaltime(value)
django.contrib.humanize.templatetags.humanize.ordinal(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/contrib/humanize/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/cache.py----------------------------------------
A:django.templatetags.cache.register->Library()
A:django.templatetags.cache.expire_time->int(expire_time)
A:django.templatetags.cache.cache_name->parser.compile_filter(tokens[-1][len('using='):])
A:django.templatetags.cache.cache_key->make_template_fragment_key(self.fragment_name, vary_on)
A:django.templatetags.cache.value->self.nodelist.render(context)
A:django.templatetags.cache.nodelist->parser.parse(('endcache',))
A:django.templatetags.cache.tokens->token.split_contents()
django.templatetags.cache.CacheNode(self,nodelist,expire_time_var,fragment_name,vary_on,cache_name)
django.templatetags.cache.CacheNode.__init__(self,nodelist,expire_time_var,fragment_name,vary_on,cache_name)
django.templatetags.cache.CacheNode.render(self,context)
django.templatetags.cache.do_cache(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/l10n.py----------------------------------------
A:django.templatetags.l10n.register->Library()
A:django.templatetags.l10n.output->self.nodelist.render(context)
A:django.templatetags.l10n.bits->list(token.split_contents())
A:django.templatetags.l10n.nodelist->parser.parse(('endlocalize',))
django.templatetags.l10n.LocalizeNode(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__init__(self,nodelist,use_l10n)
django.templatetags.l10n.LocalizeNode.__repr__(self)
django.templatetags.l10n.LocalizeNode.render(self,context)
django.templatetags.l10n.localize(value)
django.templatetags.l10n.localize_tag(parser,token)
django.templatetags.l10n.unlocalize(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/i18n.py----------------------------------------
A:django.templatetags.i18n.register->Library()
A:django.templatetags.i18n.lang_code->self.lang_code.resolve(context)
A:django.templatetags.i18n.context[self.variable]->django.utils.translation.get_language_bidi()
A:django.templatetags.i18n.langs->self.languages.resolve(context)
A:django.templatetags.i18n.self.filter_expression.var->Variable("'%s'" % self.filter_expression.var)
A:django.templatetags.i18n.self.filter_expression.var.message_context->self.message_context.resolve(context)
A:django.templatetags.i18n.output->self.nodelist.render(context)
A:django.templatetags.i18n.value->remaining_bits.pop(0)
A:django.templatetags.i18n.is_safe->isinstance(value, SafeData)
A:django.templatetags.i18n.msg->django.utils.translation.trim_whitespace(msg)
A:django.templatetags.i18n.message_context->parser.compile_filter(value)
A:django.templatetags.i18n.(singular, vars)->self.render_token_list(self.singular)
A:django.templatetags.i18n.count->self.counter.resolve(context)
A:django.templatetags.i18n.(plural, plural_vars)->self.render_token_list(self.plural)
A:django.templatetags.i18n.result->self.render(context, nested=True)
A:django.templatetags.i18n.args->parser.next_token().contents.split()
A:django.templatetags.i18n.bits->parser.next_token().split_contents()
A:django.templatetags.i18n.message_string->parser.compile_filter(bits[1])
A:django.templatetags.i18n.seen->set()
A:django.templatetags.i18n.option->remaining_bits.pop(0)
A:django.templatetags.i18n.(countervar, counter)->next(iter(options['count'].items()))
A:django.templatetags.i18n.extra_context->options.get('with', {})
A:django.templatetags.i18n.trimmed->options.get('trimmed', False)
A:django.templatetags.i18n.token->parser.next_token()
A:django.templatetags.i18n.language->parser.compile_filter(bits[1])
A:django.templatetags.i18n.nodelist->parser.parse(('endlanguage',))
django.templatetags.i18n.BlockTranslateNode(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None,trimmed=False,asvar=None,tag_name='blocktranslate')
django.templatetags.i18n.BlockTranslateNode.__init__(self,extra_context,singular,plural=None,countervar=None,counter=None,message_context=None,trimmed=False,asvar=None,tag_name='blocktranslate')
django.templatetags.i18n.BlockTranslateNode.render(self,context,nested=False)
django.templatetags.i18n.BlockTranslateNode.render_token_list(self,tokens)
django.templatetags.i18n.GetAvailableLanguagesNode(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.__init__(self,variable)
django.templatetags.i18n.GetAvailableLanguagesNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageBidiNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageBidiNode.render(self,context)
django.templatetags.i18n.GetCurrentLanguageNode(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.__init__(self,variable)
django.templatetags.i18n.GetCurrentLanguageNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoListNode(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.__init__(self,languages,variable)
django.templatetags.i18n.GetLanguageInfoListNode.get_language_info(self,language)
django.templatetags.i18n.GetLanguageInfoListNode.render(self,context)
django.templatetags.i18n.GetLanguageInfoNode(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.__init__(self,lang_code,variable)
django.templatetags.i18n.GetLanguageInfoNode.render(self,context)
django.templatetags.i18n.LanguageNode(self,nodelist,language)
django.templatetags.i18n.LanguageNode.__init__(self,nodelist,language)
django.templatetags.i18n.LanguageNode.render(self,context)
django.templatetags.i18n.TranslateNode(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.__init__(self,filter_expression,noop,asvar=None,message_context=None)
django.templatetags.i18n.TranslateNode.render(self,context)
django.templatetags.i18n.do_block_translate(parser,token)
django.templatetags.i18n.do_get_available_languages(parser,token)
django.templatetags.i18n.do_get_current_language(parser,token)
django.templatetags.i18n.do_get_current_language_bidi(parser,token)
django.templatetags.i18n.do_get_language_info(parser,token)
django.templatetags.i18n.do_get_language_info_list(parser,token)
django.templatetags.i18n.do_translate(parser,token)
django.templatetags.i18n.language(parser,token)
django.templatetags.i18n.language_bidi(lang_code)
django.templatetags.i18n.language_name(lang_code)
django.templatetags.i18n.language_name_local(lang_code)
django.templatetags.i18n.language_name_translated(lang_code)


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/static.py----------------------------------------
A:django.templatetags.static.register->django.template.Library()
A:django.templatetags.static.tokens->token.contents.split()
A:django.templatetags.static.prefix->self.handle_simple(self.name)
A:django.templatetags.static.path->parser.compile_filter(bits[1])
A:django.templatetags.static.url->conditional_escape(url)
A:django.templatetags.static.bits->token.split_contents()
django.templatetags.static.PrefixNode(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__init__(self,varname=None,name=None)
django.templatetags.static.PrefixNode.__repr__(self)
django.templatetags.static.PrefixNode.handle_simple(cls,name)
django.templatetags.static.PrefixNode.handle_token(cls,parser,token,name)
django.templatetags.static.PrefixNode.render(self,context)
django.templatetags.static.StaticNode(self,varname=None,path=None)
django.templatetags.static.StaticNode.__init__(self,varname=None,path=None)
django.templatetags.static.StaticNode.handle_simple(cls,path)
django.templatetags.static.StaticNode.handle_token(cls,parser,token)
django.templatetags.static.StaticNode.render(self,context)
django.templatetags.static.StaticNode.url(self,context)
django.templatetags.static.do_static(parser,token)
django.templatetags.static.get_media_prefix(parser,token)
django.templatetags.static.get_static_prefix(parser,token)
django.templatetags.static.static(path)


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/tz.py----------------------------------------
A:django.templatetags.tz.register->Library()
A:django.templatetags.tz.default_timezone->django.utils.timezone.get_default_timezone()
A:django.templatetags.tz.value->django.utils.timezone.make_aware(value, default_timezone)
A:django.templatetags.tz.tz->parser.compile_filter(bits[1])
A:django.templatetags.tz.result->datetimeobject(result.year, result.month, result.day, result.hour, result.minute, result.second, result.microsecond, result.tzinfo)
A:django.templatetags.tz.output->self.nodelist.render(context)
A:django.templatetags.tz.context[self.variable]->django.utils.timezone.get_current_timezone_name()
A:django.templatetags.tz.bits->token.split_contents()
A:django.templatetags.tz.nodelist->parser.parse(('endtimezone',))
A:django.templatetags.tz.args->token.contents.split()
django.templatetags.tz.GetCurrentTimezoneNode(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.__init__(self,variable)
django.templatetags.tz.GetCurrentTimezoneNode.render(self,context)
django.templatetags.tz.LocalTimeNode(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.__init__(self,nodelist,use_tz)
django.templatetags.tz.LocalTimeNode.render(self,context)
django.templatetags.tz.TimezoneNode(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.__init__(self,nodelist,tz)
django.templatetags.tz.TimezoneNode.render(self,context)
django.templatetags.tz.datetimeobject(datetime)
django.templatetags.tz.do_timezone(value,arg)
django.templatetags.tz.get_current_timezone_tag(parser,token)
django.templatetags.tz.localtime(value)
django.templatetags.tz.localtime_tag(parser,token)
django.templatetags.tz.timezone_tag(parser,token)
django.templatetags.tz.utc(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/templatetags/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/__init__.py----------------------------------------
A:django.conf.__init__.settings_module->os.environ.get(ENVIRONMENT_VARIABLE)
A:django.conf.__init__.self._wrapped->Settings(settings_module)
A:django.conf.__init__.val->self._add_script_prefix(val)
A:django.conf.__init__.holder->UserSettingsHolder(default_settings)
A:django.conf.__init__.stack->traceback.extract_stack()
A:django.conf.__init__.mod->importlib.import_module(self.SETTINGS_MODULE)
A:django.conf.__init__.self._explicit_settings->set()
A:django.conf.__init__.setting_value->getattr(mod, setting)
A:django.conf.__init__.zoneinfo_root->Path('/usr/share/zoneinfo')
A:django.conf.__init__.zone_info_file->Path('/usr/share/zoneinfo').joinpath(*self.TIME_ZONE.split('/'))
A:django.conf.__init__.self.__dict__['_deleted']->set()
A:django.conf.__init__.set_on_default->getattr(self.default_settings, 'is_overridden', lambda s: False)(setting)
A:django.conf.__init__.settings->LazySettings()
django.conf.__init__.LazySettings(LazyObject)
django.conf.__init__.LazySettings.PASSWORD_RESET_TIMEOUT_DAYS(self)
django.conf.__init__.LazySettings.__delattr__(self,name)
django.conf.__init__.LazySettings.__getattr__(self,name)
django.conf.__init__.LazySettings.__repr__(self)
django.conf.__init__.LazySettings.__setattr__(self,name,value)
django.conf.__init__.LazySettings._add_script_prefix(value)
django.conf.__init__.LazySettings._setup(self,name=None)
django.conf.__init__.LazySettings.configure(self,default_settings=global_settings,**options)
django.conf.__init__.LazySettings.configured(self)
django.conf.__init__.Settings(self,settings_module)
django.conf.__init__.Settings.__init__(self,settings_module)
django.conf.__init__.Settings.__repr__(self)
django.conf.__init__.Settings.is_overridden(self,setting)
django.conf.__init__.SettingsReference(self,value,setting_name)
django.conf.__init__.SettingsReference.__init__(self,value,setting_name)
django.conf.__init__.UserSettingsHolder(self,default_settings)
django.conf.__init__.UserSettingsHolder.__delattr__(self,name)
django.conf.__init__.UserSettingsHolder.__dir__(self)
django.conf.__init__.UserSettingsHolder.__getattr__(self,name)
django.conf.__init__.UserSettingsHolder.__init__(self,default_settings)
django.conf.__init__.UserSettingsHolder.__repr__(self)
django.conf.__init__.UserSettingsHolder.__setattr__(self,name,value)
django.conf.__init__.UserSettingsHolder.is_overridden(self,setting)


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/global_settings.py----------------------------------------
django.conf.global_settings.gettext_noop(s)


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/urls/i18n.py----------------------------------------
django.conf.urls.i18n.i18n_patterns(*urls,prefix_default_language=True)
django.conf.urls.i18n.is_language_prefix_patterns_used(urlconf)


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/urls/static.py----------------------------------------
django.conf.urls.static.static(prefix,view=serve,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/urls/__init__.py----------------------------------------
django.conf.urls.__init__.url(regex,view,kwargs=None,name=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/is/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/is/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/uz/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/uz/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/th/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/th/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en_GB/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en_GB/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/mk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/mk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/eu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/eu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/zh_Hans/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/zh_Hans/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sr_Latn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sr_Latn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/de/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/de/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ja/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ja/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/da/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/da/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/it/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/it/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/te/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/te/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fy/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bg/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ky/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ky/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/id/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/id/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ar/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ar/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/gl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/gl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_MX/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_MX/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ro/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ro/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ig/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ig/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_NI/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_NI/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/mn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/mn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ru/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ru/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/cs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/cs/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/lv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/lv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ta/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ta/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tg/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ml/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ml/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/cy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/cy/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ar_DZ/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ar_DZ/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/he/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/he/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ko/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ko/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/zh_Hant/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/zh_Hant/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nb/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nb/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/bn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hu/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hu/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_CO/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_CO/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/gd/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/gd/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/el/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/el/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/eo/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/eo/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ca/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ca/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ka/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ka/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fa/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/fa/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_AR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_AR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/uk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/uk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/de_CH/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/de_CH/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hr/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/nn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/et/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/et/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en_AU/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/en_AU/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pt_BR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pt_BR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/km/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/km/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pl/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/pl/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_PR/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/es_PR/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tk/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/tk/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/az/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/az/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/hi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sv/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sv/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ga/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/ga/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/kn/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/kn/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/lt/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/lt/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sq/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/sq/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/vi/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/conf/locale/vi/formats.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/library.py----------------------------------------
A:django.template.library.(params, varargs, varkw, defaults, kwonly, kwonly_defaults, _)->getfullargspec(unwrap(func))
A:django.template.library.(args, kwargs)->parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, function_name)
A:django.template.library.(resolved_args, resolved_kwargs)->self.get_resolved_arguments(context)
A:django.template.library.output->conditional_escape(output)
A:django.template.library._dict->self.func(*resolved_args, **resolved_kwargs)
A:django.template.library.t->context.template.engine.get_template(self.filename)
A:django.template.library.new_context->context.new(_dict)
A:django.template.library.csrf_token->context.get('csrf_token')
A:django.template.library.unhandled_params->list(params)
A:django.template.library.kwarg->token_kwargs([bit], parser)
A:django.template.library.(param, value)->token_kwargs([bit], parser).popitem()
A:django.template.library.module->import_module(name)
django.template.Library(self)
django.template.Library.filter(self,name=None,filter_func=None,**flags)
django.template.Library.filter_function(self,func,**flags)
django.template.Library.inclusion_tag(self,filename,func=None,takes_context=None,name=None)
django.template.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.Library.tag(self,name=None,compile_function=None)
django.template.Library.tag_function(self,func)
django.template.library.InclusionNode(self,func,takes_context,args,kwargs,filename)
django.template.library.InclusionNode.__init__(self,func,takes_context,args,kwargs,filename)
django.template.library.InclusionNode.render(self,context)
django.template.library.InvalidTemplateLibrary(Exception)
django.template.library.Library(self)
django.template.library.Library.__init__(self)
django.template.library.Library.filter(self,name=None,filter_func=None,**flags)
django.template.library.Library.filter_function(self,func,**flags)
django.template.library.Library.inclusion_tag(self,filename,func=None,takes_context=None,name=None)
django.template.library.Library.simple_tag(self,func=None,takes_context=None,name=None)
django.template.library.Library.tag(self,name=None,compile_function=None)
django.template.library.Library.tag_function(self,func)
django.template.library.SimpleNode(self,func,takes_context,args,kwargs,target_var)
django.template.library.SimpleNode.__init__(self,func,takes_context,args,kwargs,target_var)
django.template.library.SimpleNode.render(self,context)
django.template.library.TagHelperNode(self,func,takes_context,args,kwargs)
django.template.library.TagHelperNode.__init__(self,func,takes_context,args,kwargs)
django.template.library.TagHelperNode.get_resolved_arguments(self,context)
django.template.library.import_library(name)
django.template.library.parse_bits(parser,bits,params,varargs,varkw,defaults,kwonly,kwonly_defaults,takes_context,name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/defaultfilters.py----------------------------------------
A:django.template.defaultfilters.register->Library()
A:django.template.defaultfilters.args->list(args)
A:django.template.defaultfilters.args[0]->str(args[0])
A:django.template.defaultfilters._dec._decorated_function->getattr(func, '_decorated_function', func)
A:django.template.defaultfilters.input_val->repr(text)
A:django.template.defaultfilters.d->Decimal(str(float(text)))
A:django.template.defaultfilters.p->int(arg)
A:django.template.defaultfilters.exp->Decimal(1).scaleb(-abs(p))
A:django.template.defaultfilters.tupl->Decimal(str(float(text))).as_tuple()
A:django.template.defaultfilters.units->len(tupl[1])
A:django.template.defaultfilters.rounded_d->Decimal(str(float(text))).quantize(exp, ROUND_HALF_UP, Context(prec=prec))
A:django.template.defaultfilters.(sign, digits, exponent)->Decimal(str(float(text))).quantize(exp, ROUND_HALF_UP, Context(prec=prec)).as_tuple()
A:django.template.defaultfilters.number->''.join(reversed(digits))
A:django.template.defaultfilters.lines->int(value).split('\n')
A:django.template.defaultfilters.width->str(len(str(len(lines))))
A:django.template.defaultfilters.value->int(value)
A:django.template.defaultfilters.t->re.sub("([a-z])'([A-Z])", lambda m: m[0].lower(), value.title())
A:django.template.defaultfilters.length->int(arg)
A:django.template.defaultfilters.safe->isinstance(value, SafeData)
A:django.template.defaultfilters.data->conditional_escape(arg).join(value)
A:django.template.defaultfilters.item_iterator->iter(item_list)
A:django.template.defaultfilters.item->next(item_iterator)
A:django.template.defaultfilters.next_item->next(item_iterator)
A:django.template.defaultfilters.arg->gettext('yes,no,maybe')
A:django.template.defaultfilters.bits->gettext('yes,no,maybe').split(',')
A:django.template.defaultfilters.bytes_->int(bytes_)
django.template.defaultfilters._property_resolver(arg)
django.template.defaultfilters.add(value,arg)
django.template.defaultfilters.addslashes(value)
django.template.defaultfilters.capfirst(value)
django.template.defaultfilters.center(value,arg)
django.template.defaultfilters.cut(value,arg)
django.template.defaultfilters.date(value,arg=None)
django.template.defaultfilters.default(value,arg)
django.template.defaultfilters.default_if_none(value,arg)
django.template.defaultfilters.dictsort(value,arg)
django.template.defaultfilters.dictsortreversed(value,arg)
django.template.defaultfilters.divisibleby(value,arg)
django.template.defaultfilters.escape_filter(value)
django.template.defaultfilters.escapejs_filter(value)
django.template.defaultfilters.filesizeformat(bytes_)
django.template.defaultfilters.first(value)
django.template.defaultfilters.floatformat(text,arg=-1)
django.template.defaultfilters.force_escape(value)
django.template.defaultfilters.get_digit(value,arg)
django.template.defaultfilters.iriencode(value)
django.template.defaultfilters.join(value,arg,autoescape=True)
django.template.defaultfilters.json_script(value,element_id)
django.template.defaultfilters.last(value)
django.template.defaultfilters.length(value)
django.template.defaultfilters.length_is(value,arg)
django.template.defaultfilters.linebreaks_filter(value,autoescape=True)
django.template.defaultfilters.linebreaksbr(value,autoescape=True)
django.template.defaultfilters.linenumbers(value,autoescape=True)
django.template.defaultfilters.ljust(value,arg)
django.template.defaultfilters.lower(value)
django.template.defaultfilters.make_list(value)
django.template.defaultfilters.phone2numeric_filter(value)
django.template.defaultfilters.pluralize(value,arg='s')
django.template.defaultfilters.pprint(value)
django.template.defaultfilters.random(value)
django.template.defaultfilters.rjust(value,arg)
django.template.defaultfilters.safe(value)
django.template.defaultfilters.safeseq(value)
django.template.defaultfilters.slice_filter(value,arg)
django.template.defaultfilters.slugify(value)
django.template.defaultfilters.stringfilter(func)
django.template.defaultfilters.stringformat(value,arg)
django.template.defaultfilters.striptags(value)
django.template.defaultfilters.time(value,arg=None)
django.template.defaultfilters.timesince_filter(value,arg=None)
django.template.defaultfilters.timeuntil_filter(value,arg=None)
django.template.defaultfilters.title(value)
django.template.defaultfilters.truncatechars(value,arg)
django.template.defaultfilters.truncatechars_html(value,arg)
django.template.defaultfilters.truncatewords(value,arg)
django.template.defaultfilters.truncatewords_html(value,arg)
django.template.defaultfilters.unordered_list(value,autoescape=True)
django.template.defaultfilters.upper(value)
django.template.defaultfilters.urlencode(value,safe=None)
django.template.defaultfilters.urlize(value,autoescape=True)
django.template.defaultfilters.urlizetrunc(value,limit,autoescape=True)
django.template.defaultfilters.wordcount(value)
django.template.defaultfilters.wordwrap(value,arg)
django.template.defaultfilters.yesno(value,arg=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/defaulttags.py----------------------------------------
A:django.template.defaulttags.register->Library()
A:django.template.defaulttags.output->self.nodelist.render(context)
A:django.template.defaulttags.csrf_token->context.get('csrf_token')
A:django.template.defaulttags.context.render_context[self]->itertools_cycle(self.cyclevars)
A:django.template.defaulttags.value->float(value)
A:django.template.defaulttags.first->render_value_in_context(value, context)
A:django.template.defaulttags.self.nodelist_empty->NodeList()
A:django.template.defaulttags.values->reversed(values)
A:django.template.defaulttags.len_values->len(values)
A:django.template.defaulttags.num_loopvars->len(self.loopvars)
A:django.template.defaulttags.len_item->len(item)
A:django.template.defaulttags.unpacked_vars->dict(zip(self.loopvars, item))
A:django.template.defaulttags.state_frame->self._get_context_stack_frame(context)
A:django.template.defaulttags.compare_tonodelist_true_output->self.nodelist_true.render(context)
A:django.template.defaulttags.val1->parser.compile_filter(bits[1])
A:django.template.defaulttags.val2->parser.compile_filter(bits[2])
A:django.template.defaulttags.match->base.kwarg_re.match(bit)
A:django.template.defaulttags.count->parser.compile_filter(count)
A:django.template.defaulttags.paras->paragraphs(count, common=self.common)
A:django.template.defaulttags.GroupedResult->namedtuple('GroupedResult', ['grouper', 'list'])
A:django.template.defaulttags.obj_list->self.target.resolve(context, ignore_failures=True)
A:django.template.defaulttags.formatted->date(datetime.now(tz=tzinfo), self.format_string)
A:django.template.defaulttags.view_name->self.view_name.resolve(context)
A:django.template.defaulttags.url->conditional_escape(url)
A:django.template.defaulttags.max_value->float(max_value)
A:django.template.defaulttags.max_width->int(self.max_width.resolve(context))
A:django.template.defaulttags.result->str(round(ratio))
A:django.template.defaulttags.args->parser.next_token().split_contents()
A:django.template.defaulttags.nodelist->parser.parse(('endwith',))
A:django.template.defaulttags.node->CycleNode(values)
A:django.template.defaulttags.(_, rest)->parser.next_token().contents.split(None, 1)
A:django.template.defaulttags.filter_expr->parser.compile_filter('var|%s' % rest)
A:django.template.defaulttags.filter_name->getattr(func, '_filter_name', None)
A:django.template.defaulttags.bits->parser.next_token().split_contents()
A:django.template.defaulttags.invalid_chars->frozenset((' ', '"', "'", FILTER_SEPARATOR))
A:django.template.defaulttags.loopvars->re.split(' *, *', ' '.join(bits[1:in_index]))
A:django.template.defaulttags.sequence->parser.compile_filter(bits[in_index + 1])
A:django.template.defaulttags.nodelist_loop->parser.parse(('empty', 'endfor'))
A:django.template.defaulttags.token->parser.next_token()
A:django.template.defaulttags.nodelist_empty->parser.parse(('endfor',))
A:django.template.defaulttags.nodelist_true->parser.parse(('else', 'endifchanged'))
A:django.template.defaulttags.nodelist_false->NodeList()
A:django.template.defaulttags.condition->TemplateIfParser(parser, bits).parse()
A:django.template.defaulttags.subset->load_from_library(lib, name, bits[1:-2])
A:django.template.defaulttags.lib->find_library(parser, name)
A:django.template.defaulttags.method->parser.next_token().split_contents().pop()
A:django.template.defaulttags.target->parser.compile_filter(bits[1])
A:django.template.defaulttags.expression->parser.compile_filter(var_name + VARIABLE_ATTRIBUTE_SEPARATOR + bits[3])
A:django.template.defaulttags.viewname->parser.compile_filter(bits[1])
A:django.template.defaulttags.(name, value)->base.kwarg_re.match(bit).groups()
A:django.template.defaulttags.kwargs[name]->parser.compile_filter(value)
A:django.template.defaulttags.extra_context->token_kwargs(remaining_bits, parser, support_legacy=True)
django.template.defaulttags.AutoEscapeControlNode(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.__init__(self,setting,nodelist)
django.template.defaulttags.AutoEscapeControlNode.render(self,context)
django.template.defaulttags.CommentNode(Node)
django.template.defaulttags.CommentNode.render(self,context)
django.template.defaulttags.CsrfTokenNode(Node)
django.template.defaulttags.CsrfTokenNode.render(self,context)
django.template.defaulttags.CycleNode(self,cyclevars,variable_name=None,silent=False)
django.template.defaulttags.CycleNode.__init__(self,cyclevars,variable_name=None,silent=False)
django.template.defaulttags.CycleNode.render(self,context)
django.template.defaulttags.CycleNode.reset(self,context)
django.template.defaulttags.DebugNode(Node)
django.template.defaulttags.DebugNode.render(self,context)
django.template.defaulttags.FilterNode(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.__init__(self,filter_expr,nodelist)
django.template.defaulttags.FilterNode.render(self,context)
django.template.defaulttags.FirstOfNode(self,variables,asvar=None)
django.template.defaulttags.FirstOfNode.__init__(self,variables,asvar=None)
django.template.defaulttags.FirstOfNode.render(self,context)
django.template.defaulttags.ForNode(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__init__(self,loopvars,sequence,is_reversed,nodelist_loop,nodelist_empty=None)
django.template.defaulttags.ForNode.__repr__(self)
django.template.defaulttags.ForNode.render(self,context)
django.template.defaulttags.IfChangedNode(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode.__init__(self,nodelist_true,nodelist_false,*varlist)
django.template.defaulttags.IfChangedNode._get_context_stack_frame(self,context)
django.template.defaulttags.IfChangedNode.render(self,context)
django.template.defaulttags.IfEqualNode(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__init__(self,var1,var2,nodelist_true,nodelist_false,negate)
django.template.defaulttags.IfEqualNode.__repr__(self)
django.template.defaulttags.IfEqualNode.render(self,context)
django.template.defaulttags.IfNode(self,conditions_nodelists)
django.template.defaulttags.IfNode.__init__(self,conditions_nodelists)
django.template.defaulttags.IfNode.__iter__(self)
django.template.defaulttags.IfNode.__repr__(self)
django.template.defaulttags.IfNode.nodelist(self)
django.template.defaulttags.IfNode.render(self,context)
django.template.defaulttags.LoadNode(Node)
django.template.defaulttags.LoadNode.render(self,context)
django.template.defaulttags.LoremNode(self,count,method,common)
django.template.defaulttags.LoremNode.__init__(self,count,method,common)
django.template.defaulttags.LoremNode.render(self,context)
django.template.defaulttags.NowNode(self,format_string,asvar=None)
django.template.defaulttags.NowNode.__init__(self,format_string,asvar=None)
django.template.defaulttags.NowNode.render(self,context)
django.template.defaulttags.RegroupNode(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.__init__(self,target,expression,var_name)
django.template.defaulttags.RegroupNode.render(self,context)
django.template.defaulttags.RegroupNode.resolve_expression(self,obj,context)
django.template.defaulttags.ResetCycleNode(self,node)
django.template.defaulttags.ResetCycleNode.__init__(self,node)
django.template.defaulttags.ResetCycleNode.render(self,context)
django.template.defaulttags.SpacelessNode(self,nodelist)
django.template.defaulttags.SpacelessNode.__init__(self,nodelist)
django.template.defaulttags.SpacelessNode.render(self,context)
django.template.defaulttags.TemplateIfParser(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.__init__(self,parser,*args,**kwargs)
django.template.defaulttags.TemplateIfParser.create_var(self,value)
django.template.defaulttags.TemplateLiteral(self,value,text)
django.template.defaulttags.TemplateLiteral.__init__(self,value,text)
django.template.defaulttags.TemplateLiteral.display(self)
django.template.defaulttags.TemplateLiteral.eval(self,context)
django.template.defaulttags.TemplateTagNode(self,tagtype)
django.template.defaulttags.TemplateTagNode.__init__(self,tagtype)
django.template.defaulttags.TemplateTagNode.render(self,context)
django.template.defaulttags.URLNode(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.__init__(self,view_name,args,kwargs,asvar)
django.template.defaulttags.URLNode.render(self,context)
django.template.defaulttags.VerbatimNode(self,content)
django.template.defaulttags.VerbatimNode.__init__(self,content)
django.template.defaulttags.VerbatimNode.render(self,context)
django.template.defaulttags.WidthRatioNode(self,val_expr,max_expr,max_width,asvar=None)
django.template.defaulttags.WidthRatioNode.__init__(self,val_expr,max_expr,max_width,asvar=None)
django.template.defaulttags.WidthRatioNode.render(self,context)
django.template.defaulttags.WithNode(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__init__(self,var,name,nodelist,extra_context=None)
django.template.defaulttags.WithNode.__repr__(self)
django.template.defaulttags.WithNode.render(self,context)
django.template.defaulttags.autoescape(parser,token)
django.template.defaulttags.comment(parser,token)
django.template.defaulttags.csrf_token(parser,token)
django.template.defaulttags.cycle(parser,token)
django.template.defaulttags.debug(parser,token)
django.template.defaulttags.do_filter(parser,token)
django.template.defaulttags.do_for(parser,token)
django.template.defaulttags.do_if(parser,token)
django.template.defaulttags.do_ifequal(parser,token,negate)
django.template.defaulttags.do_with(parser,token)
django.template.defaulttags.find_library(parser,name)
django.template.defaulttags.firstof(parser,token)
django.template.defaulttags.ifchanged(parser,token)
django.template.defaulttags.ifequal(parser,token)
django.template.defaulttags.ifnotequal(parser,token)
django.template.defaulttags.load(parser,token)
django.template.defaulttags.load_from_library(library,label,names)
django.template.defaulttags.lorem(parser,token)
django.template.defaulttags.now(parser,token)
django.template.defaulttags.regroup(parser,token)
django.template.defaulttags.resetcycle(parser,token)
django.template.defaulttags.spaceless(parser,token)
django.template.defaulttags.templatetag(parser,token)
django.template.defaulttags.url(parser,token)
django.template.defaulttags.verbatim(parser,token)
django.template.defaulttags.widthratio(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/utils.py----------------------------------------
A:django.template.utils.invalid_backend->tpl.get('BACKEND', '<not defined>')
A:django.template.utils.counts->Counter(backend_names)
A:django.template.utils.params->params.copy().copy()
A:django.template.utils.backend->params.copy().copy().pop('BACKEND')
A:django.template.utils.engine_cls->import_string(backend)
A:django.template.utils.engine->engine_cls(params)
django.template.EngineHandler(self,templates=None)
django.template.EngineHandler.__getitem__(self,alias)
django.template.EngineHandler.__iter__(self)
django.template.EngineHandler.all(self)
django.template.EngineHandler.templates(self)
django.template.utils.EngineHandler(self,templates=None)
django.template.utils.EngineHandler.__getitem__(self,alias)
django.template.utils.EngineHandler.__init__(self,templates=None)
django.template.utils.EngineHandler.__iter__(self)
django.template.utils.EngineHandler.all(self)
django.template.utils.EngineHandler.templates(self)
django.template.utils.InvalidTemplateEngineError(ImproperlyConfigured)
django.template.utils.get_app_template_dirs(dirname)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/smartif.py----------------------------------------
A:django.template.smartif.self.second->parser.expression(bp)
A:django.template.smartif.self.first->parser.expression(bp)
A:django.template.smartif.EndToken->EndToken()
A:django.template.smartif.num_tokens->len(tokens)
A:django.template.smartif.self.current_token->self.next_token()
A:django.template.smartif.retval->self.expression()
A:django.template.smartif.left->t.led(left, self)
django.template.smartif.EndToken(TokenBase)
django.template.smartif.EndToken.nud(self,parser)
django.template.smartif.IfParser(self,tokens)
django.template.smartif.IfParser.__init__(self,tokens)
django.template.smartif.IfParser.create_var(self,value)
django.template.smartif.IfParser.expression(self,rbp=0)
django.template.smartif.IfParser.next_token(self)
django.template.smartif.IfParser.parse(self)
django.template.smartif.IfParser.translate_token(self,token)
django.template.smartif.Literal(self,value)
django.template.smartif.Literal.__init__(self,value)
django.template.smartif.Literal.__repr__(self)
django.template.smartif.Literal.display(self)
django.template.smartif.Literal.eval(self,context)
django.template.smartif.Literal.nud(self,parser)
django.template.smartif.TokenBase
django.template.smartif.TokenBase.__repr__(self)
django.template.smartif.TokenBase.display(self)
django.template.smartif.TokenBase.led(self,left,parser)
django.template.smartif.TokenBase.nud(self,parser)
django.template.smartif.infix(bp,func)
django.template.smartif.prefix(bp,func)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/engine.py----------------------------------------
A:django.template.engine.self.template_libraries->self.get_template_libraries(libraries)
A:django.template.engine.self.template_builtins->self.get_template_builtins(self.builtins)
A:django.template.engine.loaded[name]->import_library(path)
A:django.template.engine.loader->self.find_template_loader(template_loader)
A:django.template.engine.loader_class->import_string(loader)
A:django.template.engine.template->Template(template, origin, template_name, engine=self)
A:django.template.engine.(template, origin)->self.find_template(template_name)
A:django.template.engine.t->self.get_template(template_name)
django.template.Engine(self,dirs=None,app_dirs=False,context_processors=None,debug=False,loaders=None,string_if_invalid='',file_charset='utf-8',libraries=None,builtins=None,autoescape=True)
django.template.Engine.find_template(self,name,dirs=None,skip=None)
django.template.Engine.find_template_loader(self,loader)
django.template.Engine.from_string(self,template_code)
django.template.Engine.get_default()
django.template.Engine.get_template(self,template_name)
django.template.Engine.get_template_builtins(self,builtins)
django.template.Engine.get_template_libraries(self,libraries)
django.template.Engine.get_template_loaders(self,template_loaders)
django.template.Engine.render_to_string(self,template_name,context=None)
django.template.Engine.select_template(self,template_name_list)
django.template.Engine.template_context_processors(self)
django.template.Engine.template_loaders(self)
django.template.engine.Engine(self,dirs=None,app_dirs=False,context_processors=None,debug=False,loaders=None,string_if_invalid='',file_charset='utf-8',libraries=None,builtins=None,autoescape=True)
django.template.engine.Engine.__init__(self,dirs=None,app_dirs=False,context_processors=None,debug=False,loaders=None,string_if_invalid='',file_charset='utf-8',libraries=None,builtins=None,autoescape=True)
django.template.engine.Engine.find_template(self,name,dirs=None,skip=None)
django.template.engine.Engine.find_template_loader(self,loader)
django.template.engine.Engine.from_string(self,template_code)
django.template.engine.Engine.get_default()
django.template.engine.Engine.get_template(self,template_name)
django.template.engine.Engine.get_template_builtins(self,builtins)
django.template.engine.Engine.get_template_libraries(self,libraries)
django.template.engine.Engine.get_template_loaders(self,template_loaders)
django.template.engine.Engine.render_to_string(self,template_name,context=None)
django.template.engine.Engine.select_template(self,template_name_list)
django.template.engine.Engine.template_context_processors(self)
django.template.engine.Engine.template_loaders(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/base.py----------------------------------------
A:django.template.base.tag_re->_lazy_re_compile('(%s.*?%s|%s.*?%s|%s.*?%s)' % (re.escape(BLOCK_TAG_START), re.escape(BLOCK_TAG_END), re.escape(VARIABLE_TAG_START), re.escape(VARIABLE_TAG_END), re.escape(COMMENT_TAG_START), re.escape(COMMENT_TAG_END)))
A:django.template.base.logger->logging.getLogger('django.template')
A:django.template.base.engine->engine.Engine.get_default()
A:django.template.base.origin->Origin(UNKNOWN_SOURCE)
A:django.template.base.self.source->str(template_string)
A:django.template.base.self.nodelist->self.compile_nodelist()
A:django.template.base.lexer->Lexer(self.source)
A:django.template.base.tokens->Lexer(self.source).tokenize()
A:django.template.base.parser->Parser(tokens, self.engine.template_libraries, self.engine.template_builtins, self.origin)
A:django.template.base.e.template_debug->context.render_context.template.get_exception_info(e, self.token)
A:django.template.base.before->escape(self.source[upto:start])
A:django.template.base.during->escape(self.source[start:end])
A:django.template.base.after->escape(self.source[end:next])
A:django.template.base.total->len(source_lines)
A:django.template.base.top->max(1, line - context_lines)
A:django.template.base.bottom->min(total, line + 1 + context_lines)
A:django.template.base.message->str(exception.args[0])
A:django.template.base.p->template_source.find('\n', p + 1)
A:django.template.base.token_name->self.token_type.name.capitalize()
A:django.template.base.bits->smart_split(self.contents)
A:django.template.base.bit->node.render_annotated(context)
A:django.template.base.block_content->token_string[2:-2].strip()
A:django.template.base.content->token_string[2:-2].strip()
A:django.template.base.(start, end)->kwarg_re.match(bits[0]).span()
A:django.template.base.self.tokens->list(reversed(tokens))
A:django.template.base.nodelist->getattr(self, attr, None)
A:django.template.base.token->self.next_token()
A:django.template.base.filter_expression->self.compile_filter(token.contents)
A:django.template.base.var_node->VariableNode(filter_expression)
A:django.template.base.compiled_result->compile_func(self, token)
A:django.template.base.e->TemplateSyntaxError(e)
A:django.template.base.(command, token)->self.command_stack.pop()
A:django.template.base.constant_string->constant_string.replace('\n', '').replace('\n', '')
A:django.template.base.filter_re->_lazy_re_compile(filter_raw_string, re.VERBOSE)
A:django.template.base.matches->_lazy_re_compile(filter_raw_string, re.VERBOSE).finditer(token)
A:django.template.base.start->kwarg_re.match(bits[0]).start()
A:django.template.base.var_obj->Variable(var)
A:django.template.base.filter_func->Parser(tokens, self.engine.template_libraries, self.engine.template_builtins, self.origin).find_filter(filter_name)
A:django.template.base.upto->kwarg_re.match(bits[0]).end()
A:django.template.base.obj->mark_safe(new_obj)
A:django.template.base.new_obj->func(obj, *arg_vals)
A:django.template.base.provided->list(provided)
A:django.template.base.func->inspect.unwrap(func)
A:django.template.base.(args, _, _, defaults, _, _, _)->inspect.getfullargspec(func)
A:django.template.base.alen->len(args)
A:django.template.base.dlen->len(defaults or [])
A:django.template.base.args_check->staticmethod(args_check)
A:django.template.base.self.literal->mark_safe(unescape_string_literal(var))
A:django.template.base.self.lookups->tuple(var.split(VARIABLE_ATTRIBUTE_SEPARATOR))
A:django.template.base.value->str(value)
A:django.template.base.is_safe->isinstance(value, SafeData)
A:django.template.base.msgid->str(value).replace('%', '%%')
A:django.template.base.current->current()
A:django.template.base.signature->inspect.signature(current)
A:django.template.base.output->self.filter_expression.resolve(context)
A:django.template.base.kwarg_re->_lazy_re_compile('(?:(\\w+)=)?(.+)')
A:django.template.base.match->_lazy_re_compile('(?:(\\w+)=)?(.+)').match(bits[0])
A:django.template.base.(key, value)->_lazy_re_compile('(?:(\\w+)=)?(.+)').match(bits[0]).groups()
A:django.template.base.kwargs[key]->Parser(tokens, self.engine.template_libraries, self.engine.template_builtins, self.origin).compile_filter(value)
django.template.Node
django.template.Node.__iter__(self)
django.template.Node.get_nodes_by_type(self,nodetype)
django.template.Node.render(self,context)
django.template.Node.render_annotated(self,context)
django.template.NodeList(list)
django.template.NodeList.get_nodes_by_type(self,nodetype)
django.template.NodeList.render(self,context)
django.template.Origin(self,name,template_name=None,loader=None)
django.template.Origin.__eq__(self,other)
django.template.Origin.__str__(self)
django.template.Origin.loader_name(self)
django.template.Template(self,template_string,origin=None,name=None,engine=None)
django.template.Template.__iter__(self)
django.template.Template._render(self,context)
django.template.Template.compile_nodelist(self)
django.template.Template.get_exception_info(self,exception,token)
django.template.Template.render(self,context)
django.template.Variable(self,var)
django.template.Variable.__repr__(self)
django.template.Variable.__str__(self)
django.template.Variable._resolve_lookup(self,context)
django.template.Variable.resolve(self,context)
django.template.VariableDoesNotExist(self,msg,params=())
django.template.VariableDoesNotExist.__str__(self)
django.template.VariableNode(self,filter_expression)
django.template.VariableNode.__repr__(self)
django.template.VariableNode.render(self,context)
django.template.base.DebugLexer(Lexer)
django.template.base.DebugLexer.tokenize(self)
django.template.base.FilterExpression(self,token,parser)
django.template.base.FilterExpression.__init__(self,token,parser)
django.template.base.FilterExpression.__str__(self)
django.template.base.FilterExpression.args_check(name,func,provided)
django.template.base.FilterExpression.resolve(self,context,ignore_failures=False)
django.template.base.Lexer(self,template_string)
django.template.base.Lexer.__init__(self,template_string)
django.template.base.Lexer.create_token(self,token_string,position,lineno,in_tag)
django.template.base.Lexer.tokenize(self)
django.template.base.Node
django.template.base.Node.__iter__(self)
django.template.base.Node.get_nodes_by_type(self,nodetype)
django.template.base.Node.render(self,context)
django.template.base.Node.render_annotated(self,context)
django.template.base.NodeList(list)
django.template.base.NodeList.get_nodes_by_type(self,nodetype)
django.template.base.NodeList.render(self,context)
django.template.base.Origin(self,name,template_name=None,loader=None)
django.template.base.Origin.__eq__(self,other)
django.template.base.Origin.__init__(self,name,template_name=None,loader=None)
django.template.base.Origin.__str__(self)
django.template.base.Origin.loader_name(self)
django.template.base.Parser(self,tokens,libraries=None,builtins=None,origin=None)
django.template.base.Parser.__init__(self,tokens,libraries=None,builtins=None,origin=None)
django.template.base.Parser.add_library(self,lib)
django.template.base.Parser.compile_filter(self,token)
django.template.base.Parser.delete_first_token(self)
django.template.base.Parser.error(self,token,e)
django.template.base.Parser.extend_nodelist(self,nodelist,node,token)
django.template.base.Parser.find_filter(self,filter_name)
django.template.base.Parser.invalid_block_tag(self,token,command,parse_until=None)
django.template.base.Parser.next_token(self)
django.template.base.Parser.parse(self,parse_until=None)
django.template.base.Parser.prepend_token(self,token)
django.template.base.Parser.skip_past(self,endtag)
django.template.base.Parser.unclosed_block_tag(self,parse_until)
django.template.base.Template(self,template_string,origin=None,name=None,engine=None)
django.template.base.Template.__init__(self,template_string,origin=None,name=None,engine=None)
django.template.base.Template.__iter__(self)
django.template.base.Template._render(self,context)
django.template.base.Template.compile_nodelist(self)
django.template.base.Template.get_exception_info(self,exception,token)
django.template.base.Template.render(self,context)
django.template.base.TextNode(self,s)
django.template.base.TextNode.__init__(self,s)
django.template.base.TextNode.__repr__(self)
django.template.base.TextNode.render(self,context)
django.template.base.Token(self,token_type,contents,position=None,lineno=None)
django.template.base.Token.__init__(self,token_type,contents,position=None,lineno=None)
django.template.base.Token.__str__(self)
django.template.base.Token.split_contents(self)
django.template.base.TokenType(Enum)
django.template.base.Variable(self,var)
django.template.base.Variable.__init__(self,var)
django.template.base.Variable.__repr__(self)
django.template.base.Variable.__str__(self)
django.template.base.Variable._resolve_lookup(self,context)
django.template.base.Variable.resolve(self,context)
django.template.base.VariableDoesNotExist(self,msg,params=())
django.template.base.VariableDoesNotExist.__init__(self,msg,params=())
django.template.base.VariableDoesNotExist.__str__(self)
django.template.base.VariableNode(self,filter_expression)
django.template.base.VariableNode.__init__(self,filter_expression)
django.template.base.VariableNode.__repr__(self)
django.template.base.VariableNode.render(self,context)
django.template.base.linebreak_iter(template_source)
django.template.base.render_value_in_context(value,context)
django.template.base.token_kwargs(bits,parser,support_legacy=False)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loader_tags.py----------------------------------------
A:django.template.loader_tags.register->Library()
A:django.template.loader_tags.self.blocks->defaultdict(list)
A:django.template.loader_tags.block_context->context.render_context.get(BLOCK_CONTEXT_KEY)
A:django.template.loader_tags.result->type(self)(block.name, block.nodelist).nodelist.render(context)
A:django.template.loader_tags.pushblock->context.render_context.get(BLOCK_CONTEXT_KEY).pop(self.name)
A:django.template.loader_tags.block->type(self)(block.name, block.nodelist)
A:django.template.loader_tags.history->context.render_context.setdefault(self.context_key, [self.origin])
A:django.template.loader_tags.(template, origin)->context.template.engine.find_template(template_name, skip=history)
A:django.template.loader_tags.parent->self.parent_name.resolve(context)
A:django.template.loader_tags.compiled_parent->self.get_parent(context)
A:django.template.loader_tags.context.render_context[BLOCK_CONTEXT_KEY]->BlockContext()
A:django.template.loader_tags.template->context.template.engine.select_template(template_name)
A:django.template.loader_tags.template_name->tuple(template_name)
A:django.template.loader_tags.cache->context.render_context.dicts[0].setdefault(self, {})
A:django.template.loader_tags.bits->token.split_contents()
A:django.template.loader_tags.nodelist->parser.parse()
A:django.template.loader_tags.endblock->parser.next_token()
A:django.template.loader_tags.new_name->posixpath.normpath(posixpath.join(posixpath.dirname(current_template_name.lstrip('/')), new_name))
A:django.template.loader_tags.bits[1]->construct_relative_path(parser.origin.template_name, bits[1])
A:django.template.loader_tags.parent_name->parser.compile_filter(bits[1])
A:django.template.loader_tags.option->remaining_bits.pop(0)
A:django.template.loader_tags.value->token_kwargs(remaining_bits, parser, support_legacy=False)
A:django.template.loader_tags.isolated_context->options.get('only', False)
A:django.template.loader_tags.namemap->options.get('with', {})
django.template.loader_tags.BlockContext(self)
django.template.loader_tags.BlockContext.__init__(self)
django.template.loader_tags.BlockContext.add_blocks(self,blocks)
django.template.loader_tags.BlockContext.get_block(self,name)
django.template.loader_tags.BlockContext.pop(self,name)
django.template.loader_tags.BlockContext.push(self,name,block)
django.template.loader_tags.BlockNode(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__init__(self,name,nodelist,parent=None)
django.template.loader_tags.BlockNode.__repr__(self)
django.template.loader_tags.BlockNode.render(self,context)
django.template.loader_tags.BlockNode.super(self)
django.template.loader_tags.ExtendsNode(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__init__(self,nodelist,parent_name,template_dirs=None)
django.template.loader_tags.ExtendsNode.__repr__(self)
django.template.loader_tags.ExtendsNode.find_template(self,template_name,context)
django.template.loader_tags.ExtendsNode.get_parent(self,context)
django.template.loader_tags.ExtendsNode.render(self,context)
django.template.loader_tags.IncludeNode(self,template,*args,extra_context=None,isolated_context=False,**kwargs)
django.template.loader_tags.IncludeNode.__init__(self,template,*args,extra_context=None,isolated_context=False,**kwargs)
django.template.loader_tags.IncludeNode.render(self,context)
django.template.loader_tags.construct_relative_path(current_template_name,relative_name)
django.template.loader_tags.do_block(parser,token)
django.template.loader_tags.do_extends(parser,token)
django.template.loader_tags.do_include(parser,token)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/autoreload.py----------------------------------------
A:django.template.autoreload.items->set()
django.template.autoreload.get_template_directories()
django.template.autoreload.reset_loaders()
django.template.autoreload.template_changed(sender,file_path,**kwargs)
django.template.autoreload.watch_for_template_changes(sender,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/exceptions.py----------------------------------------
django.template.TemplateDoesNotExist(self,msg,tried=None,backend=None,chain=None)
django.template.TemplateSyntaxError(Exception)
django.template.exceptions.TemplateDoesNotExist(self,msg,tried=None,backend=None,chain=None)
django.template.exceptions.TemplateDoesNotExist.__init__(self,msg,tried=None,backend=None,chain=None)
django.template.exceptions.TemplateSyntaxError(Exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/context_processors.py----------------------------------------
A:django.template.context_processors.token->get_token(request)
A:django.template.context_processors.context_extras['sql_queries']->lazy(lambda : list(itertools.chain.from_iterable((connections[x].queries for x in connections))), list)
django.template.context_processors.csrf(request)
django.template.context_processors.debug(request)
django.template.context_processors.i18n(request)
django.template.context_processors.media(request)
django.template.context_processors.request(request)
django.template.context_processors.static(request)
django.template.context_processors.tz(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/__init__.py----------------------------------------
A:django.template.__init__.engines->EngineHandler()


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/context.py----------------------------------------
A:django.template.context.duplicate->super().__copy__()
A:django.template.context.new_context->super().new(values)
A:django.template.context.self.render_context->RenderContext()
A:django.template.context.duplicate.render_context->copy(self.render_context)
A:django.template.context.other_dict->other_dict.dicts[1:].pop().dicts[1:].pop()
A:django.template.context.self._processors_index->len(self.dicts)
A:django.template.context.context->RequestContext(request, **kwargs)
django.template.Context(self,dict_=None,autoescape=True,use_l10n=None,use_tz=None)
django.template.Context.__copy__(self)
django.template.Context.bind_template(self,template)
django.template.Context.update(self,other_dict)
django.template.ContextDict(self,context,*args,**kwargs)
django.template.ContextDict.__enter__(self)
django.template.ContextDict.__exit__(self,*args,**kwargs)
django.template.ContextPopException(Exception)
django.template.RequestContext(self,request,dict_=None,processors=None,use_l10n=None,use_tz=None,autoescape=True)
django.template.RequestContext.bind_template(self,template)
django.template.RequestContext.new(self,values=None)
django.template.context.BaseContext(self,dict_=None)
django.template.context.BaseContext.__contains__(self,key)
django.template.context.BaseContext.__copy__(self)
django.template.context.BaseContext.__delitem__(self,key)
django.template.context.BaseContext.__eq__(self,other)
django.template.context.BaseContext.__getitem__(self,key)
django.template.context.BaseContext.__init__(self,dict_=None)
django.template.context.BaseContext.__iter__(self)
django.template.context.BaseContext.__repr__(self)
django.template.context.BaseContext.__setitem__(self,key,value)
django.template.context.BaseContext._reset_dicts(self,value=None)
django.template.context.BaseContext.flatten(self)
django.template.context.BaseContext.get(self,key,otherwise=None)
django.template.context.BaseContext.new(self,values=None)
django.template.context.BaseContext.pop(self)
django.template.context.BaseContext.push(self,*args,**kwargs)
django.template.context.BaseContext.set_upward(self,key,value)
django.template.context.BaseContext.setdefault(self,key,default=None)
django.template.context.Context(self,dict_=None,autoescape=True,use_l10n=None,use_tz=None)
django.template.context.Context.__copy__(self)
django.template.context.Context.__init__(self,dict_=None,autoescape=True,use_l10n=None,use_tz=None)
django.template.context.Context.bind_template(self,template)
django.template.context.Context.update(self,other_dict)
django.template.context.ContextDict(self,context,*args,**kwargs)
django.template.context.ContextDict.__enter__(self)
django.template.context.ContextDict.__exit__(self,*args,**kwargs)
django.template.context.ContextDict.__init__(self,context,*args,**kwargs)
django.template.context.ContextPopException(Exception)
django.template.context.RenderContext(BaseContext)
django.template.context.RenderContext.__contains__(self,key)
django.template.context.RenderContext.__getitem__(self,key)
django.template.context.RenderContext.__iter__(self)
django.template.context.RenderContext.get(self,key,otherwise=None)
django.template.context.RenderContext.push_state(self,template,isolated_context=True)
django.template.context.RequestContext(self,request,dict_=None,processors=None,use_l10n=None,use_tz=None,autoescape=True)
django.template.context.RequestContext.__init__(self,request,dict_=None,processors=None,use_l10n=None,use_tz=None,autoescape=True)
django.template.context.RequestContext.bind_template(self,template)
django.template.context.RequestContext.new(self,values=None)
django.template.context.make_context(context,request=None,**kwargs)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loader.py----------------------------------------
A:django.template.loader.engines->_engine_list(using)
A:django.template.loader.template->get_template(template_name, using=using)
django.template.loader._engine_list(using=None)
django.template.loader.get_template(template_name,using=None)
django.template.loader.render_to_string(template_name,context=None,request=None,using=None)
django.template.loader.select_template(template_name_list,using=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/response.py----------------------------------------
A:django.template.response.obj_dict->self.__dict__.copy()
A:django.template.response.template->self.resolve_template(self.template_name)
A:django.template.response.context->self.resolve_context(self.context_data)
A:django.template.response.newretval->post_callback(retval)
django.template.response.ContentNotRenderedError(Exception)
django.template.response.SimpleTemplateResponse(self,template,context=None,content_type=None,status=None,charset=None,using=None,headers=None)
django.template.response.SimpleTemplateResponse.__getstate__(self)
django.template.response.SimpleTemplateResponse.__init__(self,template,context=None,content_type=None,status=None,charset=None,using=None,headers=None)
django.template.response.SimpleTemplateResponse.__iter__(self)
django.template.response.SimpleTemplateResponse.add_post_render_callback(self,callback)
django.template.response.SimpleTemplateResponse.content(self)
django.template.response.SimpleTemplateResponse.content(self,value)
django.template.response.SimpleTemplateResponse.is_rendered(self)
django.template.response.SimpleTemplateResponse.render(self)
django.template.response.SimpleTemplateResponse.rendered_content(self)
django.template.response.SimpleTemplateResponse.resolve_context(self,context)
django.template.response.SimpleTemplateResponse.resolve_template(self,template)
django.template.response.TemplateResponse(self,request,template,context=None,content_type=None,status=None,charset=None,using=None,headers=None)
django.template.response.TemplateResponse.__init__(self,request,template,context=None,content_type=None,status=None,charset=None,using=None,headers=None)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/utils.py----------------------------------------
A:django.template.backends.utils.csrf_input_lazy->lazy(csrf_input, SafeString, str)
A:django.template.backends.utils.csrf_token_lazy->lazy(get_token, str)
django.template.backends.utils.csrf_input(request)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/dummy.py----------------------------------------
A:django.template.backends.dummy.params->params.copy().copy()
A:django.template.backends.dummy.options->params.copy().copy().pop('OPTIONS').copy()
A:django.template.backends.dummy.template_code->fp.read()
A:django.template.backends.dummy.context['csrf_input']->csrf_input_lazy(request)
A:django.template.backends.dummy.context['csrf_token']->csrf_token_lazy(request)
django.template.backends.dummy.Template(string.Template)
django.template.backends.dummy.Template.render(self,context=None,request=None)
django.template.backends.dummy.TemplateStrings(self,params)
django.template.backends.dummy.TemplateStrings.__init__(self,params)
django.template.backends.dummy.TemplateStrings.from_string(self,template_code)
django.template.backends.dummy.TemplateStrings.get_template(self,template_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/base.py----------------------------------------
A:django.template.backends.base.params->params.copy().copy()
A:django.template.backends.base.self.name->params.copy().copy().pop('NAME')
A:django.template.backends.base.self.dirs->list(params.pop('DIRS'))
A:django.template.backends.base.self.app_dirs->params.copy().copy().pop('APP_DIRS')
A:django.template.backends.base.template_dirs->tuple(self.dirs)
django.template.backends.base.BaseEngine(self,params)
django.template.backends.base.BaseEngine.__init__(self,params)
django.template.backends.base.BaseEngine.app_dirname(self)
django.template.backends.base.BaseEngine.from_string(self,template_code)
django.template.backends.base.BaseEngine.get_template(self,template_name)
django.template.backends.base.BaseEngine.iter_template_filenames(self,template_name)
django.template.backends.base.BaseEngine.template_dirs(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/django.py----------------------------------------
A:django.template.backends.django.params->params.copy().copy()
A:django.template.backends.django.options->params.copy().copy().pop('OPTIONS').copy()
A:django.template.backends.django.libraries->get_installed_libraries()
A:django.template.backends.django.options['libraries']->self.get_templatetag_libraries(libraries)
A:django.template.backends.django.self.engine->Engine(self.dirs, self.app_dirs, **options)
A:django.template.backends.django.context->make_context(context, request, autoescape=self.backend.engine.autoescape)
A:django.template.backends.django.new->copy_exception(exc, backend)
A:django.template.backends.django.pkg->import_module(candidate)
A:django.template.backends.django.module->import_module(entry[1])
django.template.backends.django.DjangoTemplates(self,params)
django.template.backends.django.DjangoTemplates.__init__(self,params)
django.template.backends.django.DjangoTemplates.from_string(self,template_code)
django.template.backends.django.DjangoTemplates.get_template(self,template_name)
django.template.backends.django.DjangoTemplates.get_templatetag_libraries(self,custom_libraries)
django.template.backends.django.Template(self,template,backend)
django.template.backends.django.Template.__init__(self,template,backend)
django.template.backends.django.Template.origin(self)
django.template.backends.django.Template.render(self,context=None,request=None)
django.template.backends.django.copy_exception(exc,backend=None)
django.template.backends.django.get_installed_libraries()
django.template.backends.django.get_package_libraries(pkg)
django.template.backends.django.reraise(exc,backend)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/backends/jinja2.py----------------------------------------
A:django.template.backends.jinja2.params->params.copy().copy()
A:django.template.backends.jinja2.options->params.copy().copy().pop('OPTIONS').copy()
A:django.template.backends.jinja2.self.context_processors->params.copy().copy().pop('OPTIONS').copy().pop('context_processors', [])
A:django.template.backends.jinja2.environment->params.copy().copy().pop('OPTIONS').copy().pop('environment', 'jinja2.Environment')
A:django.template.backends.jinja2.environment_cls->import_string(environment)
A:django.template.backends.jinja2.options['loader']->jinja2.FileSystemLoader(self.template_dirs)
A:django.template.backends.jinja2.self.env->environment_cls(**options)
A:django.template.backends.jinja2.new->TemplateSyntaxError(exc.args)
A:django.template.backends.jinja2.new.template_debug->get_exception_info(exc)
A:django.template.backends.jinja2.self.origin->Origin(name=template.filename, template_name=template.name)
A:django.template.backends.jinja2.context['csrf_input']->csrf_input_lazy(request)
A:django.template.backends.jinja2.context['csrf_token']->csrf_token_lazy(request)
A:django.template.backends.jinja2.exception_file->Path(exception.filename)
A:django.template.backends.jinja2.source->fp.read()
A:django.template.backends.jinja2.lines->list(enumerate(source.strip().split('\n'), start=1))
A:django.template.backends.jinja2.total->len(lines)
A:django.template.backends.jinja2.top->max(0, lineno - context_lines - 1)
A:django.template.backends.jinja2.bottom->min(total, lineno + context_lines)
django.template.backends.jinja2.Jinja2(self,params)
django.template.backends.jinja2.Jinja2.__init__(self,params)
django.template.backends.jinja2.Jinja2.from_string(self,template_code)
django.template.backends.jinja2.Jinja2.get_template(self,template_name)
django.template.backends.jinja2.Jinja2.template_context_processors(self)
django.template.backends.jinja2.Origin(self,name,template_name)
django.template.backends.jinja2.Origin.__init__(self,name,template_name)
django.template.backends.jinja2.Template(self,template,backend)
django.template.backends.jinja2.Template.__init__(self,template,backend)
django.template.backends.jinja2.Template.render(self,context=None,request=None)
django.template.backends.jinja2.get_exception_info(exception)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/locmem.py----------------------------------------
django.template.loaders.locmem.Loader(self,engine,templates_dict)
django.template.loaders.locmem.Loader.__init__(self,engine,templates_dict)
django.template.loaders.locmem.Loader.get_contents(self,origin)
django.template.loaders.locmem.Loader.get_template_sources(self,template_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/filesystem.py----------------------------------------
A:django.template.loaders.filesystem.name->safe_join(template_dir, template_name)
django.template.loaders.filesystem.Loader(self,engine,dirs=None)
django.template.loaders.filesystem.Loader.__init__(self,engine,dirs=None)
django.template.loaders.filesystem.Loader.get_contents(self,origin)
django.template.loaders.filesystem.Loader.get_dirs(self)
django.template.loaders.filesystem.Loader.get_template_sources(self,template_name)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/app_directories.py----------------------------------------
django.template.loaders.app_directories.Loader(FilesystemLoader)
django.template.loaders.app_directories.Loader.get_dirs(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/cached.py----------------------------------------
A:django.template.loaders.cached.self.loaders->engine.get_template_loaders(loaders)
A:django.template.loaders.cached.key->self.cache_key(template_name, skip)
A:django.template.loaders.cached.cached->self.get_template_cache.get(key)
A:django.template.loaders.cached.template->super().get_template(template_name, skip)
A:django.template.loaders.cached.skip_prefix->self.generate_hash(matching)
django.template.loaders.cached.Loader(self,engine,loaders)
django.template.loaders.cached.Loader.__init__(self,engine,loaders)
django.template.loaders.cached.Loader.cache_key(self,template_name,skip=None)
django.template.loaders.cached.Loader.generate_hash(self,values)
django.template.loaders.cached.Loader.get_contents(self,origin)
django.template.loaders.cached.Loader.get_dirs(self)
django.template.loaders.cached.Loader.get_template(self,template_name,skip=None)
django.template.loaders.cached.Loader.get_template_sources(self,template_name)
django.template.loaders.cached.Loader.reset(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/base.py----------------------------------------
A:django.template.loaders.base.contents->self.get_contents(origin)
django.template.loaders.base.Loader(self,engine)
django.template.loaders.base.Loader.__init__(self,engine)
django.template.loaders.base.Loader.get_template(self,template_name,skip=None)
django.template.loaders.base.Loader.get_template_sources(self,template_name)
django.template.loaders.base.Loader.reset(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/template/loaders/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/utils.py----------------------------------------
A:django.forms.utils.self.error_class->'errorlist {}'.format(error_class)
A:django.forms.utils.copy->super().copy()
A:django.forms.utils.message->next(iter(error))
A:django.forms.utils.info->super(UserList, self).__reduce_ex__(*args, **kwargs)
A:django.forms.utils.current_timezone->django.utils.timezone.get_current_timezone()
django.forms.utils.ErrorDict(dict)
django.forms.utils.ErrorDict.__str__(self)
django.forms.utils.ErrorDict.as_data(self)
django.forms.utils.ErrorDict.as_json(self,escape_html=False)
django.forms.utils.ErrorDict.as_text(self)
django.forms.utils.ErrorDict.as_ul(self)
django.forms.utils.ErrorDict.get_json_data(self,escape_html=False)
django.forms.utils.ErrorList(self,initlist=None,error_class=None)
django.forms.utils.ErrorList.__contains__(self,item)
django.forms.utils.ErrorList.__eq__(self,other)
django.forms.utils.ErrorList.__getitem__(self,i)
django.forms.utils.ErrorList.__init__(self,initlist=None,error_class=None)
django.forms.utils.ErrorList.__reduce_ex__(self,*args,**kwargs)
django.forms.utils.ErrorList.__repr__(self)
django.forms.utils.ErrorList.__str__(self)
django.forms.utils.ErrorList.as_data(self)
django.forms.utils.ErrorList.as_json(self,escape_html=False)
django.forms.utils.ErrorList.as_text(self)
django.forms.utils.ErrorList.as_ul(self)
django.forms.utils.ErrorList.copy(self)
django.forms.utils.ErrorList.get_json_data(self,escape_html=False)
django.forms.utils.flatatt(attrs)
django.forms.utils.from_current_timezone(value)
django.forms.utils.pretty_name(name)
django.forms.utils.to_current_timezone(value)
django.utils.ErrorDict(dict)
django.utils.ErrorDict.__str__(self)
django.utils.ErrorDict.as_data(self)
django.utils.ErrorDict.as_json(self,escape_html=False)
django.utils.ErrorDict.as_text(self)
django.utils.ErrorDict.as_ul(self)
django.utils.ErrorDict.get_json_data(self,escape_html=False)
django.utils.ErrorList(self,initlist=None,error_class=None)
django.utils.ErrorList.__contains__(self,item)
django.utils.ErrorList.__eq__(self,other)
django.utils.ErrorList.__getitem__(self,i)
django.utils.ErrorList.__reduce_ex__(self,*args,**kwargs)
django.utils.ErrorList.__repr__(self)
django.utils.ErrorList.__str__(self)
django.utils.ErrorList.as_data(self)
django.utils.ErrorList.as_json(self,escape_html=False)
django.utils.ErrorList.as_text(self)
django.utils.ErrorList.as_ul(self)
django.utils.ErrorList.copy(self)
django.utils.ErrorList.get_json_data(self,escape_html=False)
django.utils.flatatt(attrs)
django.utils.from_current_timezone(value)
django.utils.pretty_name(name)
django.utils.to_current_timezone(value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/widgets.py----------------------------------------
A:django.forms.widgets.css->defaultdict(list)
A:django.forms.widgets.js->getattr(media, 'js', [])
A:django.forms.widgets.media->property(_get_media)
A:django.forms.widgets.dependency_graph->defaultdict(set)
A:django.forms.widgets.all_items->OrderedSet()
A:django.forms.widgets.combined->Media()
A:django.forms.widgets.sup_cls->super(cls, self)
A:django.forms.widgets.base->Media()
A:django.forms.widgets.definition->getattr(cls, 'Media', None)
A:django.forms.widgets.extend->getattr(definition, 'extend', True)
A:django.forms.widgets.m->data.get(self.month_field % name)
A:django.forms.widgets.new_class->super().__new__(mcs, name, bases, attrs)
A:django.forms.widgets.new_class.media->media_property(new_class)
A:django.forms.widgets.obj->super().__deepcopy__(memo)
A:django.forms.widgets.obj.attrs->self.attrs.copy()
A:django.forms.widgets.context->super().get_context(name, value, attrs)
A:django.forms.widgets.renderer->get_default_renderer()
A:django.forms.widgets.attrs->attrs.copy().copy()
A:django.forms.widgets.self.input_type->attrs.copy().copy().pop('type', self.input_type)
A:django.forms.widgets.id_->final_attrs.get('id')
A:django.forms.widgets.widget_attrs->final_attrs.copy()
A:django.forms.widgets.widget->HiddenInput()
A:django.forms.widgets.FILE_INPUT_CONTRADICTION->object()
A:django.forms.widgets.clear_checkbox_label->_('Clear')
A:django.forms.widgets.initial_text->_('Currently')
A:django.forms.widgets.input_text->_('Change')
A:django.forms.widgets.checkbox_name->self.clear_checkbox_name(name)
A:django.forms.widgets.checkbox_id->self.clear_checkbox_id(checkbox_name)
A:django.forms.widgets.upload->super().value_from_datadict(data, files, name)
A:django.forms.widgets.value->to_current_timezone(value)
A:django.forms.widgets.self.choices->list(choices)
A:django.forms.widgets.obj.choices->copy.copy(self.choices)
A:django.forms.widgets.option_attrs['id']->self.id_for_label(option_attrs['id'], index)
A:django.forms.widgets.context['widget']['optgroups']->self.optgroups(name, context['widget']['value'], attrs)
A:django.forms.widgets.use_required_attribute->super().use_required_attribute(initial)
A:django.forms.widgets.first_choice->next(iter(self.choices), None)
A:django.forms.widgets.widgets->widgets.values().values()
A:django.forms.widgets.input_type->final_attrs.pop('type', None)
A:django.forms.widgets.obj.widgets->copy.deepcopy(self.widgets)
A:django.forms.widgets.date_re->_lazy_re_compile('(\\d{4}|0)-(\\d\\d?)-(\\d\\d?)$')
A:django.forms.widgets.self.years->range(this_year, this_year + 10)
A:django.forms.widgets.date_context['year']->self.select_widget(attrs, choices=year_choices).get_context(name=year_name, value=context['widget']['value']['year'], attrs={**context['widget']['attrs'], 'id': 'id_%s' % year_name})
A:django.forms.widgets.month_choices->list(self.months.items())
A:django.forms.widgets.date_context['month']->self.select_widget(attrs, choices=month_choices).get_context(name=month_name, value=context['widget']['value']['month'], attrs={**context['widget']['attrs'], 'id': 'id_%s' % month_name})
A:django.forms.widgets.date_context['day']->self.select_widget(attrs, choices=day_choices).get_context(name=day_name, value=context['widget']['value']['day'], attrs={**context['widget']['attrs'], 'id': 'id_%s' % day_name})
A:django.forms.widgets.match->self.date_re.match(value)
A:django.forms.widgets.d->data.get(self.day_field % name)
A:django.forms.widgets.fmt->get_format('DATE_FORMAT')
A:django.forms.widgets.y->data.get(self.year_field % name)
A:django.forms.widgets.date_value->django.utils.datetime_safe.new_date(date_value)
django.forms.CheckboxInput(self,attrs=None,check_test=None)
django.forms.CheckboxInput.format_value(self,value)
django.forms.CheckboxInput.get_context(self,name,value,attrs)
django.forms.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.CheckboxInput.value_omitted_from_data(self,data,files,name)
django.forms.CheckboxSelectMultiple(ChoiceWidget)
django.forms.CheckboxSelectMultiple.id_for_label(self,id_,index=None)
django.forms.CheckboxSelectMultiple.use_required_attribute(self,initial)
django.forms.CheckboxSelectMultiple.value_omitted_from_data(self,data,files,name)
django.forms.ChoiceWidget(self,attrs=None,choices=())
django.forms.ChoiceWidget.__deepcopy__(self,memo)
django.forms.ChoiceWidget.create_option(self,name,value,label,selected,index,subindex=None,attrs=None)
django.forms.ChoiceWidget.format_value(self,value)
django.forms.ChoiceWidget.get_context(self,name,value,attrs)
django.forms.ChoiceWidget.id_for_label(self,id_,index='0')
django.forms.ChoiceWidget.optgroups(self,name,value,attrs=None)
django.forms.ChoiceWidget.options(self,name,value,attrs=None)
django.forms.ChoiceWidget.subwidgets(self,name,value,attrs=None)
django.forms.ChoiceWidget.value_from_datadict(self,data,files,name)
django.forms.ClearableFileInput(FileInput)
django.forms.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.ClearableFileInput.format_value(self,value)
django.forms.ClearableFileInput.get_context(self,name,value,attrs)
django.forms.ClearableFileInput.is_initial(self,value)
django.forms.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.ClearableFileInput.value_omitted_from_data(self,data,files,name)
django.forms.DateInput(DateTimeBaseInput)
django.forms.DateTimeBaseInput(self,attrs=None,format=None)
django.forms.DateTimeBaseInput.format_value(self,value)
django.forms.DateTimeInput(DateTimeBaseInput)
django.forms.EmailInput(Input)
django.forms.FileInput(Input)
django.forms.FileInput.format_value(self,value)
django.forms.FileInput.use_required_attribute(self,initial)
django.forms.FileInput.value_from_datadict(self,data,files,name)
django.forms.FileInput.value_omitted_from_data(self,data,files,name)
django.forms.HiddenInput(Input)
django.forms.Input(self,attrs=None)
django.forms.Input.get_context(self,name,value,attrs)
django.forms.Media(self,media=None,css=None,js=None)
django.forms.Media.__add__(self,other)
django.forms.Media.__getitem__(self,name)
django.forms.Media.__repr__(self)
django.forms.Media.__str__(self)
django.forms.Media._css(self)
django.forms.Media._js(self)
django.forms.Media.absolute_path(self,path)
django.forms.Media.merge(*lists)
django.forms.Media.render(self)
django.forms.Media.render_css(self)
django.forms.Media.render_js(self)
django.forms.MediaDefiningClass(mcs,name,bases,attrs)
django.forms.MediaOrderConflictWarning(RuntimeWarning)
django.forms.MultiWidget(self,widgets,attrs=None)
django.forms.MultiWidget.__deepcopy__(self,memo)
django.forms.MultiWidget._get_media(self)
django.forms.MultiWidget.decompress(self,value)
django.forms.MultiWidget.get_context(self,name,value,attrs)
django.forms.MultiWidget.id_for_label(self,id_)
django.forms.MultiWidget.is_hidden(self)
django.forms.MultiWidget.needs_multipart_form(self)
django.forms.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.MultiWidget.value_omitted_from_data(self,data,files,name)
django.forms.MultipleHiddenInput(HiddenInput)
django.forms.MultipleHiddenInput.format_value(self,value)
django.forms.MultipleHiddenInput.get_context(self,name,value,attrs)
django.forms.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.NullBooleanSelect(self,attrs=None)
django.forms.NullBooleanSelect.format_value(self,value)
django.forms.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.NumberInput(Input)
django.forms.PasswordInput(self,attrs=None,render_value=False)
django.forms.PasswordInput.get_context(self,name,value,attrs)
django.forms.RadioSelect(ChoiceWidget)
django.forms.Select(ChoiceWidget)
django.forms.Select._choice_has_empty_value(choice)
django.forms.Select.get_context(self,name,value,attrs)
django.forms.Select.use_required_attribute(self,initial)
django.forms.SelectDateWidget(self,attrs=None,years=None,months=None,empty_label=None)
django.forms.SelectDateWidget._parse_date_fmt()
django.forms.SelectDateWidget.format_value(self,value)
django.forms.SelectDateWidget.get_context(self,name,value,attrs)
django.forms.SelectDateWidget.id_for_label(self,id_)
django.forms.SelectDateWidget.value_from_datadict(self,data,files,name)
django.forms.SelectDateWidget.value_omitted_from_data(self,data,files,name)
django.forms.SelectMultiple(Select)
django.forms.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.SelectMultiple.value_omitted_from_data(self,data,files,name)
django.forms.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.SplitDateTimeWidget.decompress(self,value)
django.forms.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.TextInput(Input)
django.forms.Textarea(self,attrs=None)
django.forms.TimeInput(DateTimeBaseInput)
django.forms.URLInput(Input)
django.forms.Widget(self,attrs=None)
django.forms.Widget.__deepcopy__(self,memo)
django.forms.Widget._render(self,template_name,context,renderer=None)
django.forms.Widget.build_attrs(self,base_attrs,extra_attrs=None)
django.forms.Widget.format_value(self,value)
django.forms.Widget.get_context(self,name,value,attrs)
django.forms.Widget.id_for_label(self,id_)
django.forms.Widget.is_hidden(self)
django.forms.Widget.render(self,name,value,attrs=None,renderer=None)
django.forms.Widget.subwidgets(self,name,value,attrs=None)
django.forms.Widget.use_required_attribute(self,initial)
django.forms.Widget.value_from_datadict(self,data,files,name)
django.forms.Widget.value_omitted_from_data(self,data,files,name)
django.forms.boolean_check(v)
django.forms.media_property(cls)
django.forms.widgets.CheckboxInput(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.__init__(self,attrs=None,check_test=None)
django.forms.widgets.CheckboxInput.format_value(self,value)
django.forms.widgets.CheckboxInput.get_context(self,name,value,attrs)
django.forms.widgets.CheckboxInput.value_from_datadict(self,data,files,name)
django.forms.widgets.CheckboxInput.value_omitted_from_data(self,data,files,name)
django.forms.widgets.CheckboxSelectMultiple(ChoiceWidget)
django.forms.widgets.CheckboxSelectMultiple.id_for_label(self,id_,index=None)
django.forms.widgets.CheckboxSelectMultiple.use_required_attribute(self,initial)
django.forms.widgets.CheckboxSelectMultiple.value_omitted_from_data(self,data,files,name)
django.forms.widgets.ChoiceWidget(self,attrs=None,choices=())
django.forms.widgets.ChoiceWidget.__deepcopy__(self,memo)
django.forms.widgets.ChoiceWidget.__init__(self,attrs=None,choices=())
django.forms.widgets.ChoiceWidget.create_option(self,name,value,label,selected,index,subindex=None,attrs=None)
django.forms.widgets.ChoiceWidget.format_value(self,value)
django.forms.widgets.ChoiceWidget.get_context(self,name,value,attrs)
django.forms.widgets.ChoiceWidget.id_for_label(self,id_,index='0')
django.forms.widgets.ChoiceWidget.optgroups(self,name,value,attrs=None)
django.forms.widgets.ChoiceWidget.options(self,name,value,attrs=None)
django.forms.widgets.ChoiceWidget.subwidgets(self,name,value,attrs=None)
django.forms.widgets.ChoiceWidget.value_from_datadict(self,data,files,name)
django.forms.widgets.ClearableFileInput(FileInput)
django.forms.widgets.ClearableFileInput.clear_checkbox_id(self,name)
django.forms.widgets.ClearableFileInput.clear_checkbox_name(self,name)
django.forms.widgets.ClearableFileInput.format_value(self,value)
django.forms.widgets.ClearableFileInput.get_context(self,name,value,attrs)
django.forms.widgets.ClearableFileInput.is_initial(self,value)
django.forms.widgets.ClearableFileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.ClearableFileInput.value_omitted_from_data(self,data,files,name)
django.forms.widgets.DateInput(DateTimeBaseInput)
django.forms.widgets.DateTimeBaseInput(self,attrs=None,format=None)
django.forms.widgets.DateTimeBaseInput.__init__(self,attrs=None,format=None)
django.forms.widgets.DateTimeBaseInput.format_value(self,value)
django.forms.widgets.DateTimeInput(DateTimeBaseInput)
django.forms.widgets.EmailInput(Input)
django.forms.widgets.FileInput(Input)
django.forms.widgets.FileInput.format_value(self,value)
django.forms.widgets.FileInput.use_required_attribute(self,initial)
django.forms.widgets.FileInput.value_from_datadict(self,data,files,name)
django.forms.widgets.FileInput.value_omitted_from_data(self,data,files,name)
django.forms.widgets.HiddenInput(Input)
django.forms.widgets.Input(self,attrs=None)
django.forms.widgets.Input.__init__(self,attrs=None)
django.forms.widgets.Input.get_context(self,name,value,attrs)
django.forms.widgets.Media(self,media=None,css=None,js=None)
django.forms.widgets.Media.__add__(self,other)
django.forms.widgets.Media.__getitem__(self,name)
django.forms.widgets.Media.__init__(self,media=None,css=None,js=None)
django.forms.widgets.Media.__repr__(self)
django.forms.widgets.Media.__str__(self)
django.forms.widgets.Media._css(self)
django.forms.widgets.Media._js(self)
django.forms.widgets.Media.absolute_path(self,path)
django.forms.widgets.Media.merge(*lists)
django.forms.widgets.Media.render(self)
django.forms.widgets.Media.render_css(self)
django.forms.widgets.Media.render_js(self)
django.forms.widgets.MediaDefiningClass(mcs,name,bases,attrs)
django.forms.widgets.MediaDefiningClass.__new__(mcs,name,bases,attrs)
django.forms.widgets.MediaOrderConflictWarning(RuntimeWarning)
django.forms.widgets.MultiWidget(self,widgets,attrs=None)
django.forms.widgets.MultiWidget.__deepcopy__(self,memo)
django.forms.widgets.MultiWidget.__init__(self,widgets,attrs=None)
django.forms.widgets.MultiWidget._get_media(self)
django.forms.widgets.MultiWidget.decompress(self,value)
django.forms.widgets.MultiWidget.get_context(self,name,value,attrs)
django.forms.widgets.MultiWidget.id_for_label(self,id_)
django.forms.widgets.MultiWidget.is_hidden(self)
django.forms.widgets.MultiWidget.needs_multipart_form(self)
django.forms.widgets.MultiWidget.value_from_datadict(self,data,files,name)
django.forms.widgets.MultiWidget.value_omitted_from_data(self,data,files,name)
django.forms.widgets.MultipleHiddenInput(HiddenInput)
django.forms.widgets.MultipleHiddenInput.format_value(self,value)
django.forms.widgets.MultipleHiddenInput.get_context(self,name,value,attrs)
django.forms.widgets.MultipleHiddenInput.value_from_datadict(self,data,files,name)
django.forms.widgets.NullBooleanSelect(self,attrs=None)
django.forms.widgets.NullBooleanSelect.__init__(self,attrs=None)
django.forms.widgets.NullBooleanSelect.format_value(self,value)
django.forms.widgets.NullBooleanSelect.value_from_datadict(self,data,files,name)
django.forms.widgets.NumberInput(Input)
django.forms.widgets.PasswordInput(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.__init__(self,attrs=None,render_value=False)
django.forms.widgets.PasswordInput.get_context(self,name,value,attrs)
django.forms.widgets.RadioSelect(ChoiceWidget)
django.forms.widgets.Select(ChoiceWidget)
django.forms.widgets.Select._choice_has_empty_value(choice)
django.forms.widgets.Select.get_context(self,name,value,attrs)
django.forms.widgets.Select.use_required_attribute(self,initial)
django.forms.widgets.SelectDateWidget(self,attrs=None,years=None,months=None,empty_label=None)
django.forms.widgets.SelectDateWidget.__init__(self,attrs=None,years=None,months=None,empty_label=None)
django.forms.widgets.SelectDateWidget._parse_date_fmt()
django.forms.widgets.SelectDateWidget.format_value(self,value)
django.forms.widgets.SelectDateWidget.get_context(self,name,value,attrs)
django.forms.widgets.SelectDateWidget.id_for_label(self,id_)
django.forms.widgets.SelectDateWidget.value_from_datadict(self,data,files,name)
django.forms.widgets.SelectDateWidget.value_omitted_from_data(self,data,files,name)
django.forms.widgets.SelectMultiple(Select)
django.forms.widgets.SelectMultiple.value_from_datadict(self,data,files,name)
django.forms.widgets.SelectMultiple.value_omitted_from_data(self,data,files,name)
django.forms.widgets.SplitDateTimeWidget(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.widgets.SplitDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.widgets.SplitDateTimeWidget.decompress(self,value)
django.forms.widgets.SplitHiddenDateTimeWidget(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.widgets.SplitHiddenDateTimeWidget.__init__(self,attrs=None,date_format=None,time_format=None,date_attrs=None,time_attrs=None)
django.forms.widgets.TextInput(Input)
django.forms.widgets.Textarea(self,attrs=None)
django.forms.widgets.Textarea.__init__(self,attrs=None)
django.forms.widgets.TimeInput(DateTimeBaseInput)
django.forms.widgets.URLInput(Input)
django.forms.widgets.Widget(self,attrs=None)
django.forms.widgets.Widget.__deepcopy__(self,memo)
django.forms.widgets.Widget.__init__(self,attrs=None)
django.forms.widgets.Widget._render(self,template_name,context,renderer=None)
django.forms.widgets.Widget.build_attrs(self,base_attrs,extra_attrs=None)
django.forms.widgets.Widget.format_value(self,value)
django.forms.widgets.Widget.get_context(self,name,value,attrs)
django.forms.widgets.Widget.id_for_label(self,id_)
django.forms.widgets.Widget.is_hidden(self)
django.forms.widgets.Widget.render(self,name,value,attrs=None,renderer=None)
django.forms.widgets.Widget.subwidgets(self,name,value,attrs=None)
django.forms.widgets.Widget.use_required_attribute(self,initial)
django.forms.widgets.Widget.value_from_datadict(self,data,files,name)
django.forms.widgets.Widget.value_omitted_from_data(self,data,files,name)
django.forms.widgets.boolean_check(v)
django.forms.widgets.media_property(cls)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/boundfield.py----------------------------------------
A:django.forms.boundfield.self.html_name->form.add_prefix(name)
A:django.forms.boundfield.self.html_initial_name->form.add_initial_prefix(name)
A:django.forms.boundfield.self.html_initial_id->form.add_initial_prefix(self.auto_id)
A:django.forms.boundfield.self.label->pretty_name(name)
A:django.forms.boundfield.attrs->dict(attrs)
A:django.forms.boundfield.data->data.replace(microsecond=0).replace(microsecond=0)
A:django.forms.boundfield.contents->conditional_escape(contents)
A:django.forms.boundfield.id_for_label->widget.id_for_label(id_)
A:django.forms.boundfield.extra_classes->set(extra_classes or [])
django.boundfield.BoundField(self,form,field,name)
django.boundfield.BoundField.__bool__(self)
django.boundfield.BoundField.__getitem__(self,idx)
django.boundfield.BoundField.__iter__(self)
django.boundfield.BoundField.__len__(self)
django.boundfield.BoundField.__str__(self)
django.boundfield.BoundField.as_hidden(self,attrs=None,**kwargs)
django.boundfield.BoundField.as_text(self,attrs=None,**kwargs)
django.boundfield.BoundField.as_textarea(self,attrs=None,**kwargs)
django.boundfield.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.boundfield.BoundField.auto_id(self)
django.boundfield.BoundField.build_widget_attrs(self,attrs,widget=None)
django.boundfield.BoundField.css_classes(self,extra_classes=None)
django.boundfield.BoundField.data(self)
django.boundfield.BoundField.errors(self)
django.boundfield.BoundField.id_for_label(self)
django.boundfield.BoundField.initial(self)
django.boundfield.BoundField.is_hidden(self)
django.boundfield.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.boundfield.BoundField.subwidgets(self)
django.boundfield.BoundField.value(self)
django.boundfield.BoundField.widget_type(self)
django.boundfield.BoundWidget(self,parent_widget,data,renderer)
django.boundfield.BoundWidget.__str__(self)
django.boundfield.BoundWidget.choice_label(self)
django.boundfield.BoundWidget.id_for_label(self)
django.boundfield.BoundWidget.tag(self,wrap_label=False)
django.boundfield.BoundWidget.template_name(self)
django.forms.boundfield.BoundField(self,form,field,name)
django.forms.boundfield.BoundField.__bool__(self)
django.forms.boundfield.BoundField.__getitem__(self,idx)
django.forms.boundfield.BoundField.__init__(self,form,field,name)
django.forms.boundfield.BoundField.__iter__(self)
django.forms.boundfield.BoundField.__len__(self)
django.forms.boundfield.BoundField.__str__(self)
django.forms.boundfield.BoundField.as_hidden(self,attrs=None,**kwargs)
django.forms.boundfield.BoundField.as_text(self,attrs=None,**kwargs)
django.forms.boundfield.BoundField.as_textarea(self,attrs=None,**kwargs)
django.forms.boundfield.BoundField.as_widget(self,widget=None,attrs=None,only_initial=False)
django.forms.boundfield.BoundField.auto_id(self)
django.forms.boundfield.BoundField.build_widget_attrs(self,attrs,widget=None)
django.forms.boundfield.BoundField.css_classes(self,extra_classes=None)
django.forms.boundfield.BoundField.data(self)
django.forms.boundfield.BoundField.errors(self)
django.forms.boundfield.BoundField.id_for_label(self)
django.forms.boundfield.BoundField.initial(self)
django.forms.boundfield.BoundField.is_hidden(self)
django.forms.boundfield.BoundField.label_tag(self,contents=None,attrs=None,label_suffix=None)
django.forms.boundfield.BoundField.subwidgets(self)
django.forms.boundfield.BoundField.value(self)
django.forms.boundfield.BoundField.widget_type(self)
django.forms.boundfield.BoundWidget(self,parent_widget,data,renderer)
django.forms.boundfield.BoundWidget.__init__(self,parent_widget,data,renderer)
django.forms.boundfield.BoundWidget.__str__(self)
django.forms.boundfield.BoundWidget.choice_label(self)
django.forms.boundfield.BoundWidget.id_for_label(self)
django.forms.boundfield.BoundWidget.tag(self,wrap_label=False)
django.forms.boundfield.BoundWidget.template_name(self)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/formsets.py----------------------------------------
A:django.forms.formsets.self.base_fields[TOTAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[INITIAL_FORM_COUNT]->IntegerField(widget=HiddenInput)
A:django.forms.formsets.self.base_fields[MIN_NUM_FORM_COUNT]->IntegerField(required=False, widget=HiddenInput)
A:django.forms.formsets.self.base_fields[MAX_NUM_FORM_COUNT]->IntegerField(required=False, widget=HiddenInput)
A:django.forms.formsets.cleaned_data->super().clean()
A:django.forms.formsets.form->self.form(auto_id=self.auto_id, prefix=self.add_prefix('__prefix__'), empty_permitted=True, use_required_attribute=False, **self.get_form_kwargs(None))
A:django.forms.formsets.initial_forms->self.initial_form_count()
A:django.forms.formsets.forms_valid->all([form.is_valid() for form in self.forms if not (self.can_delete and self._should_delete_form(form))])
A:django.forms.formsets.self._non_form_errors->self.error_class(e.error_list)
A:django.forms.formsets.error->ValidationError(self.error_messages['missing_management_form'], params={'field_names': ', '.join((self.management_form.add_prefix(field_name) for field_name in self.management_form.errors))}, code='missing_management_form')
A:django.forms.formsets.initial_form_count->self.initial_form_count()
A:django.forms.formsets.form.fields[ORDERING_FIELD_NAME]->IntegerField(label=_('Order'), required=False, widget=self.get_ordering_widget())
A:django.forms.formsets.form.fields[DELETION_FIELD_NAME]->BooleanField(label=_('Delete'), required=False)
A:django.forms.formsets.forms->' '.join((form.as_ul() for form in self))
django.forms.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,form_kwargs=None,error_messages=None)
django.forms.BaseFormSet.__bool__(self)
django.forms.BaseFormSet.__getitem__(self,index)
django.forms.BaseFormSet.__iter__(self)
django.forms.BaseFormSet.__len__(self)
django.forms.BaseFormSet.__str__(self)
django.forms.BaseFormSet._construct_form(self,i,**kwargs)
django.forms.BaseFormSet._should_delete_form(self,form)
django.forms.BaseFormSet.add_fields(self,form,index)
django.forms.BaseFormSet.add_prefix(self,index)
django.forms.BaseFormSet.as_p(self)
django.forms.BaseFormSet.as_table(self)
django.forms.BaseFormSet.as_ul(self)
django.forms.BaseFormSet.clean(self)
django.forms.BaseFormSet.cleaned_data(self)
django.forms.BaseFormSet.deleted_forms(self)
django.forms.BaseFormSet.empty_form(self)
django.forms.BaseFormSet.errors(self)
django.forms.BaseFormSet.extra_forms(self)
django.forms.BaseFormSet.forms(self)
django.forms.BaseFormSet.full_clean(self)
django.forms.BaseFormSet.get_default_prefix(cls)
django.forms.BaseFormSet.get_form_kwargs(self,index)
django.forms.BaseFormSet.get_ordering_widget(cls)
django.forms.BaseFormSet.has_changed(self)
django.forms.BaseFormSet.initial_form_count(self)
django.forms.BaseFormSet.initial_forms(self)
django.forms.BaseFormSet.is_multipart(self)
django.forms.BaseFormSet.is_valid(self)
django.forms.BaseFormSet.management_form(self)
django.forms.BaseFormSet.media(self)
django.forms.BaseFormSet.non_form_errors(self)
django.forms.BaseFormSet.ordered_forms(self)
django.forms.BaseFormSet.total_error_count(self)
django.forms.BaseFormSet.total_form_count(self)
django.forms.ManagementForm(self,*args,**kwargs)
django.forms.ManagementForm.clean(self)
django.forms.all_valid(formsets)
django.forms.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False,min_num=None,validate_min=False,absolute_max=None,can_delete_extra=True)
django.forms.formsets.BaseFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,form_kwargs=None,error_messages=None)
django.forms.formsets.BaseFormSet.__bool__(self)
django.forms.formsets.BaseFormSet.__getitem__(self,index)
django.forms.formsets.BaseFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,form_kwargs=None,error_messages=None)
django.forms.formsets.BaseFormSet.__iter__(self)
django.forms.formsets.BaseFormSet.__len__(self)
django.forms.formsets.BaseFormSet.__str__(self)
django.forms.formsets.BaseFormSet._construct_form(self,i,**kwargs)
django.forms.formsets.BaseFormSet._should_delete_form(self,form)
django.forms.formsets.BaseFormSet.add_fields(self,form,index)
django.forms.formsets.BaseFormSet.add_prefix(self,index)
django.forms.formsets.BaseFormSet.as_p(self)
django.forms.formsets.BaseFormSet.as_table(self)
django.forms.formsets.BaseFormSet.as_ul(self)
django.forms.formsets.BaseFormSet.clean(self)
django.forms.formsets.BaseFormSet.cleaned_data(self)
django.forms.formsets.BaseFormSet.deleted_forms(self)
django.forms.formsets.BaseFormSet.empty_form(self)
django.forms.formsets.BaseFormSet.errors(self)
django.forms.formsets.BaseFormSet.extra_forms(self)
django.forms.formsets.BaseFormSet.forms(self)
django.forms.formsets.BaseFormSet.full_clean(self)
django.forms.formsets.BaseFormSet.get_default_prefix(cls)
django.forms.formsets.BaseFormSet.get_form_kwargs(self,index)
django.forms.formsets.BaseFormSet.get_ordering_widget(cls)
django.forms.formsets.BaseFormSet.has_changed(self)
django.forms.formsets.BaseFormSet.initial_form_count(self)
django.forms.formsets.BaseFormSet.initial_forms(self)
django.forms.formsets.BaseFormSet.is_multipart(self)
django.forms.formsets.BaseFormSet.is_valid(self)
django.forms.formsets.BaseFormSet.management_form(self)
django.forms.formsets.BaseFormSet.media(self)
django.forms.formsets.BaseFormSet.non_form_errors(self)
django.forms.formsets.BaseFormSet.ordered_forms(self)
django.forms.formsets.BaseFormSet.total_error_count(self)
django.forms.formsets.BaseFormSet.total_form_count(self)
django.forms.formsets.ManagementForm(self,*args,**kwargs)
django.forms.formsets.ManagementForm.__init__(self,*args,**kwargs)
django.forms.formsets.ManagementForm.clean(self)
django.forms.formsets.all_valid(formsets)
django.forms.formsets.formset_factory(form,formset=BaseFormSet,extra=1,can_order=False,can_delete=False,max_num=None,validate_max=False,min_num=None,validate_min=False,absolute_max=None,can_delete_extra=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/models.py----------------------------------------
A:django.forms.models.data[f.name]->f.value_from_object(instance)
A:django.forms.models.limit_choices_to->formfield_callback(f, **kwargs).get_limit_choices_to()
A:django.forms.models.complex_filter->Q(**limit_choices_to)
A:django.forms.models.formfield.queryset->formfield_callback(f, **kwargs).queryset.filter(Exists(formfield.queryset.model._base_manager.filter(complex_filter)))
A:django.forms.models.formfield->formfield_callback(f, **kwargs)
A:django.forms.models.self.model->getattr(options, 'model', None)
A:django.forms.models.self.fields->getattr(options, 'fields', None)
A:django.forms.models.self.exclude->getattr(options, 'exclude', None)
A:django.forms.models.self.widgets->getattr(options, 'widgets', None)
A:django.forms.models.self.localized_fields->getattr(options, 'localized_fields', None)
A:django.forms.models.self.labels->getattr(options, 'labels', None)
A:django.forms.models.self.help_texts->getattr(options, 'help_texts', None)
A:django.forms.models.self.error_messages->getattr(options, 'error_messages', None)
A:django.forms.models.self.field_classes->getattr(options, 'field_classes', None)
A:django.forms.models.formfield_callback->attrs.pop('formfield_callback', base_formfield_callback)
A:django.forms.models.new_class->super().__new__(mcs, name, bases, attrs)
A:django.forms.models.optsnew_class._meta->ModelFormOptions(getattr(new_class, 'Meta', None))
A:django.forms.models.value->frozenset(value)
A:django.forms.models.fields->fields_for_model(opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts, opts.error_messages, opts.field_classes, apply_limit_choices_to=False)
A:django.forms.models.missing_fields->none_model_fields.difference(new_class.declared_fields)
A:django.forms.models.self.instance->self.fk.remote_field.model()
A:django.forms.models.object_data->model_to_dict(instance, opts.fields, opts.exclude)
A:django.forms.models.field_value->self.cleaned_data.get(field)
A:django.forms.models.exclude->super()._construct_form(i, **kwargs)._get_validation_exclusions()
A:django.forms.models.Meta->type('Meta', bases, attrs)
A:django.forms.models.Meta.formfield_callback->staticmethod(formfield_callback)
A:django.forms.models.unique_fields->set()
A:django.forms.models.field->field.remote_field.get_related_field().remote_field.get_related_field()
A:django.forms.models.to_python->self._get_to_python(self.model._meta.pk)
A:django.forms.models.pk->to_python(pk)
A:django.forms.models.kwargs['instance']->self._existing_object(pk)
A:django.forms.models.form->super()._construct_form(i, **kwargs)
A:django.forms.models.qs->self.queryset.filter(**{'%s__in' % key: value})
A:django.forms.models.all_unique_checks->set()
A:django.forms.models.all_date_checks->set()
A:django.forms.models.(unique_checks, date_checks)->super()._construct_form(i, **kwargs).instance._get_unique_checks(exclude=exclude)
A:django.forms.models.seen_data->set()
A:django.forms.models.row_data->tuple((d._get_pk_val() if hasattr(d, '_get_pk_val') else tuple(d) if isinstance(d, list) else d for d in row_data))
A:django.forms.models.form._errors[NON_FIELD_ERRORS]->self.error_class([self.get_form_error()])
A:django.forms.models.widget->super()._construct_form(i, **kwargs)._meta.widgets.get(self._pk_field.name, HiddenInput)
A:django.forms.models.form.fields[self._pk_field.name]->ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)
A:django.forms.models.meta->getattr(form, 'Meta', None)
A:django.forms.models.FormSet->modelformset_factory(model, **kwargs)
A:django.forms.models.self.form._meta.fields->list(self.form._meta.fields)
A:django.forms.models.mutable->getattr(form.data, '_mutable', None)
A:django.forms.models.fk_value->getattr(fk_value, 'pk', fk_value)
A:django.forms.models.to_field->self.instance._meta.get_field(kwargs['to_field'])
A:django.forms.models.form.fields[name]->InlineForeignKeyField(self.instance, **kwargs)
A:django.forms.models.fk->_get_foreign_key(parent_model, model, fk_name=fk_name)
A:django.forms.models.kwargs['initial']->getattr(self.parent_instance, self.to_field)
A:django.forms.models.orig->getattr(self.parent_instance, self.to_field)
A:django.forms.models.queryset->property(_get_queryset, _set_queryset)
A:django.forms.models.result->super(ChoiceField, self).__deepcopy__(memo)
A:django.forms.models.result.queryset->self.queryset.all()
A:django.forms.models.choices->property(_get_choices, ChoiceField._set_choices)
django.forms.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.BaseInlineFormSet.add_fields(self,form,index)
django.forms.BaseInlineFormSet.get_default_prefix(cls)
django.forms.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseInlineFormSet.initial_form_count(self)
django.forms.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None,use_required_attribute=None,renderer=None)
django.forms.BaseModelForm._get_validation_exclusions(self)
django.forms.BaseModelForm._post_clean(self)
django.forms.BaseModelForm._save_m2m(self)
django.forms.BaseModelForm._update_errors(self,errors)
django.forms.BaseModelForm.clean(self)
django.forms.BaseModelForm.save(self,commit=True)
django.forms.BaseModelForm.validate_unique(self)
django.forms.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,*,initial=None,**kwargs)
django.forms.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.BaseModelFormSet._existing_object(self,pk)
django.forms.BaseModelFormSet._get_to_python(self,field)
django.forms.BaseModelFormSet.add_fields(self,form,index)
django.forms.BaseModelFormSet.clean(self)
django.forms.BaseModelFormSet.delete_existing(self,obj,commit=True)
django.forms.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.BaseModelFormSet.get_form_error(self)
django.forms.BaseModelFormSet.get_queryset(self)
django.forms.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.BaseModelFormSet.initial_form_count(self)
django.forms.BaseModelFormSet.save(self,commit=True)
django.forms.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.BaseModelFormSet.validate_unique(self)
django.forms.InlineForeignKeyField(self,parent_instance,*args,pk_field=False,to_field=None,**kwargs)
django.forms.InlineForeignKeyField.clean(self,value)
django.forms.InlineForeignKeyField.has_changed(self,initial,data)
django.forms.ModelChoiceField(self,queryset,*,empty_label='---------',required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,limit_choices_to=None,blank=False,**kwargs)
django.forms.ModelChoiceField.__deepcopy__(self,memo)
django.forms.ModelChoiceField._get_choices(self)
django.forms.ModelChoiceField._get_queryset(self)
django.forms.ModelChoiceField._set_queryset(self,queryset)
django.forms.ModelChoiceField.get_limit_choices_to(self)
django.forms.ModelChoiceField.has_changed(self,initial,data)
django.forms.ModelChoiceField.label_from_instance(self,obj)
django.forms.ModelChoiceField.prepare_value(self,value)
django.forms.ModelChoiceField.to_python(self,value)
django.forms.ModelChoiceField.validate(self,value)
django.forms.ModelChoiceIterator(self,field)
django.forms.ModelChoiceIterator.__bool__(self)
django.forms.ModelChoiceIterator.__iter__(self)
django.forms.ModelChoiceIterator.__len__(self)
django.forms.ModelChoiceIterator.choice(self,obj)
django.forms.ModelChoiceIteratorValue(self,value,instance)
django.forms.ModelChoiceIteratorValue.__eq__(self,other)
django.forms.ModelChoiceIteratorValue.__str__(self)
django.forms.ModelForm(BaseModelForm,metaclass=ModelFormMetaclass)
django.forms.ModelFormMetaclass(mcs,name,bases,attrs)
django.forms.ModelFormOptions(self,options=None)
django.forms.ModelMultipleChoiceField(self,queryset,**kwargs)
django.forms.ModelMultipleChoiceField._check_values(self,value)
django.forms.ModelMultipleChoiceField.clean(self,value)
django.forms.ModelMultipleChoiceField.has_changed(self,initial,data)
django.forms.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.ModelMultipleChoiceField.to_python(self,value)
django.forms._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.apply_limit_choices_to_to_formfield(formfield)
django.forms.construct_instance(form,instance,fields=None,exclude=None)
django.forms.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None,field_classes=None,*,apply_limit_choices_to=True)
django.forms.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None,min_num=None,validate_min=False,field_classes=None,absolute_max=None,can_delete_extra=True)
django.forms.model_to_dict(instance,fields=None,exclude=None)
django.forms.modelform_defines_fields(form_class)
django.forms.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None,field_classes=None)
django.forms.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None,min_num=None,validate_min=False,field_classes=None,absolute_max=None,can_delete_extra=True)
django.forms.models.BaseInlineFormSet(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet.__init__(self,data=None,files=None,instance=None,save_as_new=False,prefix=None,queryset=None,**kwargs)
django.forms.models.BaseInlineFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseInlineFormSet.add_fields(self,form,index)
django.forms.models.BaseInlineFormSet.get_default_prefix(cls)
django.forms.models.BaseInlineFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseInlineFormSet.initial_form_count(self)
django.forms.models.BaseInlineFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None,use_required_attribute=None,renderer=None)
django.forms.models.BaseModelForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,instance=None,use_required_attribute=None,renderer=None)
django.forms.models.BaseModelForm._get_validation_exclusions(self)
django.forms.models.BaseModelForm._post_clean(self)
django.forms.models.BaseModelForm._save_m2m(self)
django.forms.models.BaseModelForm._update_errors(self,errors)
django.forms.models.BaseModelForm.clean(self)
django.forms.models.BaseModelForm.save(self,commit=True)
django.forms.models.BaseModelForm.validate_unique(self)
django.forms.models.BaseModelFormSet(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,*,initial=None,**kwargs)
django.forms.models.BaseModelFormSet.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,queryset=None,*,initial=None,**kwargs)
django.forms.models.BaseModelFormSet._construct_form(self,i,**kwargs)
django.forms.models.BaseModelFormSet._existing_object(self,pk)
django.forms.models.BaseModelFormSet._get_to_python(self,field)
django.forms.models.BaseModelFormSet.add_fields(self,form,index)
django.forms.models.BaseModelFormSet.clean(self)
django.forms.models.BaseModelFormSet.delete_existing(self,obj,commit=True)
django.forms.models.BaseModelFormSet.get_date_error_message(self,date_check)
django.forms.models.BaseModelFormSet.get_form_error(self)
django.forms.models.BaseModelFormSet.get_queryset(self)
django.forms.models.BaseModelFormSet.get_unique_error_message(self,unique_check)
django.forms.models.BaseModelFormSet.initial_form_count(self)
django.forms.models.BaseModelFormSet.save(self,commit=True)
django.forms.models.BaseModelFormSet.save_existing(self,form,instance,commit=True)
django.forms.models.BaseModelFormSet.save_existing_objects(self,commit=True)
django.forms.models.BaseModelFormSet.save_new(self,form,commit=True)
django.forms.models.BaseModelFormSet.save_new_objects(self,commit=True)
django.forms.models.BaseModelFormSet.validate_unique(self)
django.forms.models.InlineForeignKeyField(self,parent_instance,*args,pk_field=False,to_field=None,**kwargs)
django.forms.models.InlineForeignKeyField.__init__(self,parent_instance,*args,pk_field=False,to_field=None,**kwargs)
django.forms.models.InlineForeignKeyField.clean(self,value)
django.forms.models.InlineForeignKeyField.has_changed(self,initial,data)
django.forms.models.ModelChoiceField(self,queryset,*,empty_label='---------',required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,limit_choices_to=None,blank=False,**kwargs)
django.forms.models.ModelChoiceField.__deepcopy__(self,memo)
django.forms.models.ModelChoiceField.__init__(self,queryset,*,empty_label='---------',required=True,widget=None,label=None,initial=None,help_text='',to_field_name=None,limit_choices_to=None,blank=False,**kwargs)
django.forms.models.ModelChoiceField._get_choices(self)
django.forms.models.ModelChoiceField._get_queryset(self)
django.forms.models.ModelChoiceField._set_queryset(self,queryset)
django.forms.models.ModelChoiceField.get_limit_choices_to(self)
django.forms.models.ModelChoiceField.has_changed(self,initial,data)
django.forms.models.ModelChoiceField.label_from_instance(self,obj)
django.forms.models.ModelChoiceField.prepare_value(self,value)
django.forms.models.ModelChoiceField.to_python(self,value)
django.forms.models.ModelChoiceField.validate(self,value)
django.forms.models.ModelChoiceIterator(self,field)
django.forms.models.ModelChoiceIterator.__bool__(self)
django.forms.models.ModelChoiceIterator.__init__(self,field)
django.forms.models.ModelChoiceIterator.__iter__(self)
django.forms.models.ModelChoiceIterator.__len__(self)
django.forms.models.ModelChoiceIterator.choice(self,obj)
django.forms.models.ModelChoiceIteratorValue(self,value,instance)
django.forms.models.ModelChoiceIteratorValue.__eq__(self,other)
django.forms.models.ModelChoiceIteratorValue.__init__(self,value,instance)
django.forms.models.ModelChoiceIteratorValue.__str__(self)
django.forms.models.ModelForm(BaseModelForm,metaclass=ModelFormMetaclass)
django.forms.models.ModelFormMetaclass(mcs,name,bases,attrs)
django.forms.models.ModelFormMetaclass.__new__(mcs,name,bases,attrs)
django.forms.models.ModelFormOptions(self,options=None)
django.forms.models.ModelFormOptions.__init__(self,options=None)
django.forms.models.ModelMultipleChoiceField(self,queryset,**kwargs)
django.forms.models.ModelMultipleChoiceField.__init__(self,queryset,**kwargs)
django.forms.models.ModelMultipleChoiceField._check_values(self,value)
django.forms.models.ModelMultipleChoiceField.clean(self,value)
django.forms.models.ModelMultipleChoiceField.has_changed(self,initial,data)
django.forms.models.ModelMultipleChoiceField.prepare_value(self,value)
django.forms.models.ModelMultipleChoiceField.to_python(self,value)
django.forms.models._get_foreign_key(parent_model,model,fk_name=None,can_fail=False)
django.forms.models.apply_limit_choices_to_to_formfield(formfield)
django.forms.models.construct_instance(form,instance,fields=None,exclude=None)
django.forms.models.fields_for_model(model,fields=None,exclude=None,widgets=None,formfield_callback=None,localized_fields=None,labels=None,help_texts=None,error_messages=None,field_classes=None,*,apply_limit_choices_to=True)
django.forms.models.inlineformset_factory(parent_model,model,form=ModelForm,formset=BaseInlineFormSet,fk_name=None,fields=None,exclude=None,extra=3,can_order=False,can_delete=True,max_num=None,formfield_callback=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None,min_num=None,validate_min=False,field_classes=None,absolute_max=None,can_delete_extra=True)
django.forms.models.model_to_dict(instance,fields=None,exclude=None)
django.forms.models.modelform_defines_fields(form_class)
django.forms.models.modelform_factory(model,form=ModelForm,fields=None,exclude=None,formfield_callback=None,widgets=None,localized_fields=None,labels=None,help_texts=None,error_messages=None,field_classes=None)
django.forms.models.modelformset_factory(model,form=ModelForm,formfield_callback=None,formset=BaseModelFormSet,extra=1,can_delete=False,can_order=False,max_num=None,fields=None,exclude=None,widgets=None,validate_max=False,localized_fields=None,labels=None,help_texts=None,error_messages=None,min_num=None,validate_min=False,field_classes=None,absolute_max=None,can_delete_extra=True)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/fields.py----------------------------------------
A:django.forms.fields.empty_values->list(validators.EMPTY_VALUES)
A:django.forms.fields.widget->copy.deepcopy(widget)
A:django.forms.fields.extra_attrs->self.widget_attrs(widget)
A:django.forms.fields.value->uuid.UUID(value)
A:django.forms.fields.data->self.to_python(data)
A:django.forms.fields.result->datetime.datetime.combine(*data_list)
A:django.forms.fields.result.widget->copy.deepcopy(self.widget, memo)
A:django.forms.fields.result.error_messages->self.error_messages.copy()
A:django.forms.fields.attrs->super().widget_attrs(widget)
A:django.forms.fields.attrs['maxlength']->str(self.max_length)
A:django.forms.fields.attrs['minlength']->str(self.min_length)
A:django.forms.fields.re_decimal->_lazy_re_compile('\\.0*\\s*$')
A:django.forms.fields.step->str(Decimal(1).scaleb(-self.decimal_places)).lower()
A:django.forms.fields.input_formats->DateTimeFormatsIterator()
A:django.forms.fields.regex->property(_get_regex, _set_regex)
A:django.forms.fields.self._regex_validator->django.core.validators.RegexValidator(regex=regex)
A:django.forms.fields.f->os.path.join(root, f)
A:django.forms.fields.file->BytesIO(data['content'])
A:django.forms.fields.image->PIL.Image.open(file)
A:django.forms.fields.f.content_type->PIL.Image.MIME.get(image.format)
A:django.forms.fields.url_fields->split_url(urlunsplit(url_fields))
A:django.forms.fields.result._choices->copy.deepcopy(self._choices, memo)
A:django.forms.fields.choices->property(_get_choices, _set_choices)
A:django.forms.fields.text_value->str(value)
A:django.forms.fields.self.empty_value->kwargs.pop('empty_value', [])
A:django.forms.fields.result.fields->tuple((x.__deepcopy__(memo) for x in self.fields))
A:django.forms.fields.out->self.compress(clean_data)
A:django.forms.fields.initial->field.to_python(initial)
A:django.forms.fields.self.match_re->re.compile(self.match)
A:django.forms.fields.errors->self.default_error_messages.copy()
A:django.forms.fields.localize->kwargs.get('localize', False)
A:django.forms.fields.converted->json.loads(value, cls=self.decoder)
django.fields.BaseTemporalField(self,*,input_formats=None,**kwargs)
django.fields.BaseTemporalField.strptime(self,value,format)
django.fields.BaseTemporalField.to_python(self,value)
django.fields.BooleanField(Field)
django.fields.BooleanField.has_changed(self,initial,data)
django.fields.BooleanField.to_python(self,value)
django.fields.BooleanField.validate(self,value)
django.fields.CallableChoiceIterator(self,choices_func)
django.fields.CallableChoiceIterator.__iter__(self)
django.fields.CharField(self,*,max_length=None,min_length=None,strip=True,empty_value='',**kwargs)
django.fields.CharField.to_python(self,value)
django.fields.CharField.widget_attrs(self,widget)
django.fields.ChoiceField(self,*,choices=(),**kwargs)
django.fields.ChoiceField.__deepcopy__(self,memo)
django.fields.ChoiceField._get_choices(self)
django.fields.ChoiceField._set_choices(self,value)
django.fields.ChoiceField.to_python(self,value)
django.fields.ChoiceField.valid_value(self,value)
django.fields.ChoiceField.validate(self,value)
django.fields.ComboField(self,fields,**kwargs)
django.fields.ComboField.clean(self,value)
django.fields.DateField(BaseTemporalField)
django.fields.DateField.strptime(self,value,format)
django.fields.DateField.to_python(self,value)
django.fields.DateTimeField(BaseTemporalField)
django.fields.DateTimeField.prepare_value(self,value)
django.fields.DateTimeField.strptime(self,value,format)
django.fields.DateTimeField.to_python(self,value)
django.fields.DateTimeFormatsIterator
django.fields.DateTimeFormatsIterator.__iter__(self)
django.fields.DecimalField(self,*,max_value=None,min_value=None,max_digits=None,decimal_places=None,**kwargs)
django.fields.DecimalField.to_python(self,value)
django.fields.DecimalField.widget_attrs(self,widget)
django.fields.DurationField(Field)
django.fields.DurationField.prepare_value(self,value)
django.fields.DurationField.to_python(self,value)
django.fields.EmailField(self,**kwargs)
django.fields.Field(self,*,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=(),localize=False,disabled=False,label_suffix=None)
django.fields.Field.__deepcopy__(self,memo)
django.fields.Field.bound_data(self,data,initial)
django.fields.Field.clean(self,value)
django.fields.Field.get_bound_field(self,form,field_name)
django.fields.Field.has_changed(self,initial,data)
django.fields.Field.prepare_value(self,value)
django.fields.Field.run_validators(self,value)
django.fields.Field.to_python(self,value)
django.fields.Field.validate(self,value)
django.fields.Field.widget_attrs(self,widget)
django.fields.FileField(self,*,max_length=None,allow_empty_file=False,**kwargs)
django.fields.FileField.bound_data(self,data,initial)
django.fields.FileField.clean(self,data,initial=None)
django.fields.FileField.has_changed(self,initial,data)
django.fields.FileField.to_python(self,data)
django.fields.FilePathField(self,path,*,match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.fields.FloatField(IntegerField)
django.fields.FloatField.to_python(self,value)
django.fields.FloatField.validate(self,value)
django.fields.FloatField.widget_attrs(self,widget)
django.fields.GenericIPAddressField(self,*,protocol='both',unpack_ipv4=False,**kwargs)
django.fields.GenericIPAddressField.to_python(self,value)
django.fields.ImageField(FileField)
django.fields.ImageField.to_python(self,data)
django.fields.ImageField.widget_attrs(self,widget)
django.fields.IntegerField(self,*,max_value=None,min_value=None,**kwargs)
django.fields.IntegerField.to_python(self,value)
django.fields.IntegerField.widget_attrs(self,widget)
django.fields.InvalidJSONInput(str)
django.fields.JSONField(self,encoder=None,decoder=None,**kwargs)
django.fields.JSONField.bound_data(self,data,initial)
django.fields.JSONField.has_changed(self,initial,data)
django.fields.JSONField.prepare_value(self,value)
django.fields.JSONField.to_python(self,value)
django.fields.JSONString(str)
django.fields.MultiValueField(self,fields,*,require_all_fields=True,**kwargs)
django.fields.MultiValueField.__deepcopy__(self,memo)
django.fields.MultiValueField.clean(self,value)
django.fields.MultiValueField.compress(self,data_list)
django.fields.MultiValueField.has_changed(self,initial,data)
django.fields.MultiValueField.validate(self,value)
django.fields.MultipleChoiceField(ChoiceField)
django.fields.MultipleChoiceField.has_changed(self,initial,data)
django.fields.MultipleChoiceField.to_python(self,value)
django.fields.MultipleChoiceField.validate(self,value)
django.fields.NullBooleanField(BooleanField)
django.fields.NullBooleanField.to_python(self,value)
django.fields.NullBooleanField.validate(self,value)
django.fields.RegexField(self,regex,**kwargs)
django.fields.RegexField._get_regex(self)
django.fields.RegexField._set_regex(self,regex)
django.fields.SlugField(self,*,allow_unicode=False,**kwargs)
django.fields.SplitDateTimeField(self,*,input_date_formats=None,input_time_formats=None,**kwargs)
django.fields.SplitDateTimeField.compress(self,data_list)
django.fields.TimeField(BaseTemporalField)
django.fields.TimeField.strptime(self,value,format)
django.fields.TimeField.to_python(self,value)
django.fields.TypedChoiceField(self,*,coerce=lambdaval:val,empty_value='',**kwargs)
django.fields.TypedChoiceField._coerce(self,value)
django.fields.TypedChoiceField.clean(self,value)
django.fields.TypedMultipleChoiceField(self,*,coerce=lambdaval:val,**kwargs)
django.fields.TypedMultipleChoiceField._coerce(self,value)
django.fields.TypedMultipleChoiceField.clean(self,value)
django.fields.TypedMultipleChoiceField.validate(self,value)
django.fields.URLField(self,**kwargs)
django.fields.URLField.to_python(self,value)
django.fields.UUIDField(CharField)
django.fields.UUIDField.prepare_value(self,value)
django.fields.UUIDField.to_python(self,value)
django.forms.fields.BaseTemporalField(self,*,input_formats=None,**kwargs)
django.forms.fields.BaseTemporalField.__init__(self,*,input_formats=None,**kwargs)
django.forms.fields.BaseTemporalField.strptime(self,value,format)
django.forms.fields.BaseTemporalField.to_python(self,value)
django.forms.fields.BooleanField(Field)
django.forms.fields.BooleanField.has_changed(self,initial,data)
django.forms.fields.BooleanField.to_python(self,value)
django.forms.fields.BooleanField.validate(self,value)
django.forms.fields.CallableChoiceIterator(self,choices_func)
django.forms.fields.CallableChoiceIterator.__init__(self,choices_func)
django.forms.fields.CallableChoiceIterator.__iter__(self)
django.forms.fields.CharField(self,*,max_length=None,min_length=None,strip=True,empty_value='',**kwargs)
django.forms.fields.CharField.__init__(self,*,max_length=None,min_length=None,strip=True,empty_value='',**kwargs)
django.forms.fields.CharField.to_python(self,value)
django.forms.fields.CharField.widget_attrs(self,widget)
django.forms.fields.ChoiceField(self,*,choices=(),**kwargs)
django.forms.fields.ChoiceField.__deepcopy__(self,memo)
django.forms.fields.ChoiceField.__init__(self,*,choices=(),**kwargs)
django.forms.fields.ChoiceField._get_choices(self)
django.forms.fields.ChoiceField._set_choices(self,value)
django.forms.fields.ChoiceField.to_python(self,value)
django.forms.fields.ChoiceField.valid_value(self,value)
django.forms.fields.ChoiceField.validate(self,value)
django.forms.fields.ComboField(self,fields,**kwargs)
django.forms.fields.ComboField.__init__(self,fields,**kwargs)
django.forms.fields.ComboField.clean(self,value)
django.forms.fields.DateField(BaseTemporalField)
django.forms.fields.DateField.strptime(self,value,format)
django.forms.fields.DateField.to_python(self,value)
django.forms.fields.DateTimeField(BaseTemporalField)
django.forms.fields.DateTimeField.prepare_value(self,value)
django.forms.fields.DateTimeField.strptime(self,value,format)
django.forms.fields.DateTimeField.to_python(self,value)
django.forms.fields.DateTimeFormatsIterator
django.forms.fields.DateTimeFormatsIterator.__iter__(self)
django.forms.fields.DecimalField(self,*,max_value=None,min_value=None,max_digits=None,decimal_places=None,**kwargs)
django.forms.fields.DecimalField.__init__(self,*,max_value=None,min_value=None,max_digits=None,decimal_places=None,**kwargs)
django.forms.fields.DecimalField.to_python(self,value)
django.forms.fields.DecimalField.widget_attrs(self,widget)
django.forms.fields.DurationField(Field)
django.forms.fields.DurationField.prepare_value(self,value)
django.forms.fields.DurationField.to_python(self,value)
django.forms.fields.EmailField(self,**kwargs)
django.forms.fields.EmailField.__init__(self,**kwargs)
django.forms.fields.Field(self,*,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=(),localize=False,disabled=False,label_suffix=None)
django.forms.fields.Field.__deepcopy__(self,memo)
django.forms.fields.Field.__init__(self,*,required=True,widget=None,label=None,initial=None,help_text='',error_messages=None,show_hidden_initial=False,validators=(),localize=False,disabled=False,label_suffix=None)
django.forms.fields.Field.bound_data(self,data,initial)
django.forms.fields.Field.clean(self,value)
django.forms.fields.Field.get_bound_field(self,form,field_name)
django.forms.fields.Field.has_changed(self,initial,data)
django.forms.fields.Field.prepare_value(self,value)
django.forms.fields.Field.run_validators(self,value)
django.forms.fields.Field.to_python(self,value)
django.forms.fields.Field.validate(self,value)
django.forms.fields.Field.widget_attrs(self,widget)
django.forms.fields.FileField(self,*,max_length=None,allow_empty_file=False,**kwargs)
django.forms.fields.FileField.__init__(self,*,max_length=None,allow_empty_file=False,**kwargs)
django.forms.fields.FileField.bound_data(self,data,initial)
django.forms.fields.FileField.clean(self,data,initial=None)
django.forms.fields.FileField.has_changed(self,initial,data)
django.forms.fields.FileField.to_python(self,data)
django.forms.fields.FilePathField(self,path,*,match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.forms.fields.FilePathField.__init__(self,path,*,match=None,recursive=False,allow_files=True,allow_folders=False,**kwargs)
django.forms.fields.FloatField(IntegerField)
django.forms.fields.FloatField.to_python(self,value)
django.forms.fields.FloatField.validate(self,value)
django.forms.fields.FloatField.widget_attrs(self,widget)
django.forms.fields.GenericIPAddressField(self,*,protocol='both',unpack_ipv4=False,**kwargs)
django.forms.fields.GenericIPAddressField.__init__(self,*,protocol='both',unpack_ipv4=False,**kwargs)
django.forms.fields.GenericIPAddressField.to_python(self,value)
django.forms.fields.ImageField(FileField)
django.forms.fields.ImageField.to_python(self,data)
django.forms.fields.ImageField.widget_attrs(self,widget)
django.forms.fields.IntegerField(self,*,max_value=None,min_value=None,**kwargs)
django.forms.fields.IntegerField.__init__(self,*,max_value=None,min_value=None,**kwargs)
django.forms.fields.IntegerField.to_python(self,value)
django.forms.fields.IntegerField.widget_attrs(self,widget)
django.forms.fields.InvalidJSONInput(str)
django.forms.fields.JSONField(self,encoder=None,decoder=None,**kwargs)
django.forms.fields.JSONField.__init__(self,encoder=None,decoder=None,**kwargs)
django.forms.fields.JSONField.bound_data(self,data,initial)
django.forms.fields.JSONField.has_changed(self,initial,data)
django.forms.fields.JSONField.prepare_value(self,value)
django.forms.fields.JSONField.to_python(self,value)
django.forms.fields.JSONString(str)
django.forms.fields.MultiValueField(self,fields,*,require_all_fields=True,**kwargs)
django.forms.fields.MultiValueField.__deepcopy__(self,memo)
django.forms.fields.MultiValueField.__init__(self,fields,*,require_all_fields=True,**kwargs)
django.forms.fields.MultiValueField.clean(self,value)
django.forms.fields.MultiValueField.compress(self,data_list)
django.forms.fields.MultiValueField.has_changed(self,initial,data)
django.forms.fields.MultiValueField.validate(self,value)
django.forms.fields.MultipleChoiceField(ChoiceField)
django.forms.fields.MultipleChoiceField.has_changed(self,initial,data)
django.forms.fields.MultipleChoiceField.to_python(self,value)
django.forms.fields.MultipleChoiceField.validate(self,value)
django.forms.fields.NullBooleanField(BooleanField)
django.forms.fields.NullBooleanField.to_python(self,value)
django.forms.fields.NullBooleanField.validate(self,value)
django.forms.fields.RegexField(self,regex,**kwargs)
django.forms.fields.RegexField.__init__(self,regex,**kwargs)
django.forms.fields.RegexField._get_regex(self)
django.forms.fields.RegexField._set_regex(self,regex)
django.forms.fields.SlugField(self,*,allow_unicode=False,**kwargs)
django.forms.fields.SlugField.__init__(self,*,allow_unicode=False,**kwargs)
django.forms.fields.SplitDateTimeField(self,*,input_date_formats=None,input_time_formats=None,**kwargs)
django.forms.fields.SplitDateTimeField.__init__(self,*,input_date_formats=None,input_time_formats=None,**kwargs)
django.forms.fields.SplitDateTimeField.compress(self,data_list)
django.forms.fields.TimeField(BaseTemporalField)
django.forms.fields.TimeField.strptime(self,value,format)
django.forms.fields.TimeField.to_python(self,value)
django.forms.fields.TypedChoiceField(self,*,coerce=lambdaval:val,empty_value='',**kwargs)
django.forms.fields.TypedChoiceField.__init__(self,*,coerce=lambdaval:val,empty_value='',**kwargs)
django.forms.fields.TypedChoiceField._coerce(self,value)
django.forms.fields.TypedChoiceField.clean(self,value)
django.forms.fields.TypedMultipleChoiceField(self,*,coerce=lambdaval:val,**kwargs)
django.forms.fields.TypedMultipleChoiceField.__init__(self,*,coerce=lambdaval:val,**kwargs)
django.forms.fields.TypedMultipleChoiceField._coerce(self,value)
django.forms.fields.TypedMultipleChoiceField.clean(self,value)
django.forms.fields.TypedMultipleChoiceField.validate(self,value)
django.forms.fields.URLField(self,**kwargs)
django.forms.fields.URLField.__init__(self,**kwargs)
django.forms.fields.URLField.to_python(self,value)
django.forms.fields.UUIDField(CharField)
django.forms.fields.UUIDField.prepare_value(self,value)
django.forms.fields.UUIDField.to_python(self,value)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/forms.py----------------------------------------
A:django.forms.forms.new_class->super().__new__(mcs, name, bases, attrs)
A:django.forms.forms.self.fields->copy.deepcopy(self.base_fields)
A:django.forms.forms.renderer->renderer()
A:django.forms.forms.fields[key]->self.fields.pop(key)
A:django.forms.forms.self._bound_fields_cache[name]->field.get_bound_field(self, name)
A:django.forms.forms.top_errors->self.non_field_errors().copy()
A:django.forms.forms.bf_errors->self.error_class(bf.errors)
A:django.forms.forms.css_classes->bf.css_classes()
A:django.forms.forms.label->conditional_escape(bf.label)
A:django.forms.forms.str_hidden->''.join(hidden_fields)
A:django.forms.forms.error->ValidationError(error)
A:django.forms.forms.self._errors[field]->self.error_class()
A:django.forms.forms.self._errors->ErrorDict()
A:django.forms.forms.value->value()
A:django.forms.forms.initial->self.get_initial_for_field(field, name)
A:django.forms.forms.cleaned_data->self.clean()
A:django.forms.forms.prefixed_name->self.add_prefix(name)
A:django.forms.forms.data_value->field.widget.value_from_datadict(self.data, self.files, prefixed_name)
A:django.forms.forms.initial_prefixed_name->self.add_initial_prefix(name)
A:django.forms.forms.hidden_widget->field.hidden_widget()
A:django.forms.forms.initial_value->field.to_python(hidden_widget.value_from_datadict(self.data, self.files, initial_prefixed_name))
A:django.forms.forms.media->Media()
django.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,field_order=None,use_required_attribute=None,renderer=None)
django.BaseForm.__getitem__(self,name)
django.BaseForm.__iter__(self)
django.BaseForm.__repr__(self)
django.BaseForm.__str__(self)
django.BaseForm._clean_fields(self)
django.BaseForm._clean_form(self)
django.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.BaseForm._post_clean(self)
django.BaseForm.add_error(self,field,error)
django.BaseForm.add_initial_prefix(self,field_name)
django.BaseForm.add_prefix(self,field_name)
django.BaseForm.as_p(self)
django.BaseForm.as_table(self)
django.BaseForm.as_ul(self)
django.BaseForm.changed_data(self)
django.BaseForm.clean(self)
django.BaseForm.errors(self)
django.BaseForm.full_clean(self)
django.BaseForm.get_initial_for_field(self,field,field_name)
django.BaseForm.has_changed(self)
django.BaseForm.has_error(self,field,code=None)
django.BaseForm.hidden_fields(self)
django.BaseForm.is_multipart(self)
django.BaseForm.is_valid(self)
django.BaseForm.media(self)
django.BaseForm.non_field_errors(self)
django.BaseForm.order_fields(self,field_order)
django.BaseForm.visible_fields(self)
django.DeclarativeFieldsMetaclass(mcs,name,bases,attrs)
django.Form(BaseForm,metaclass=DeclarativeFieldsMetaclass)
django.forms.forms.BaseForm(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,field_order=None,use_required_attribute=None,renderer=None)
django.forms.forms.BaseForm.__getitem__(self,name)
django.forms.forms.BaseForm.__init__(self,data=None,files=None,auto_id='id_%s',prefix=None,initial=None,error_class=ErrorList,label_suffix=None,empty_permitted=False,field_order=None,use_required_attribute=None,renderer=None)
django.forms.forms.BaseForm.__iter__(self)
django.forms.forms.BaseForm.__repr__(self)
django.forms.forms.BaseForm.__str__(self)
django.forms.forms.BaseForm._clean_fields(self)
django.forms.forms.BaseForm._clean_form(self)
django.forms.forms.BaseForm._html_output(self,normal_row,error_row,row_ender,help_text_html,errors_on_separate_row)
django.forms.forms.BaseForm._post_clean(self)
django.forms.forms.BaseForm.add_error(self,field,error)
django.forms.forms.BaseForm.add_initial_prefix(self,field_name)
django.forms.forms.BaseForm.add_prefix(self,field_name)
django.forms.forms.BaseForm.as_p(self)
django.forms.forms.BaseForm.as_table(self)
django.forms.forms.BaseForm.as_ul(self)
django.forms.forms.BaseForm.changed_data(self)
django.forms.forms.BaseForm.clean(self)
django.forms.forms.BaseForm.errors(self)
django.forms.forms.BaseForm.full_clean(self)
django.forms.forms.BaseForm.get_initial_for_field(self,field,field_name)
django.forms.forms.BaseForm.has_changed(self)
django.forms.forms.BaseForm.has_error(self,field,code=None)
django.forms.forms.BaseForm.hidden_fields(self)
django.forms.forms.BaseForm.is_multipart(self)
django.forms.forms.BaseForm.is_valid(self)
django.forms.forms.BaseForm.media(self)
django.forms.forms.BaseForm.non_field_errors(self)
django.forms.forms.BaseForm.order_fields(self,field_order)
django.forms.forms.BaseForm.visible_fields(self)
django.forms.forms.DeclarativeFieldsMetaclass(mcs,name,bases,attrs)
django.forms.forms.DeclarativeFieldsMetaclass.__new__(mcs,name,bases,attrs)
django.forms.forms.Form(BaseForm,metaclass=DeclarativeFieldsMetaclass)


----------------------------------------/home/zhang/Packages/django/django3.2.1/forms/renderers.py----------------------------------------
A:django.forms.renderers.renderer_class->import_string(settings.FORM_RENDERER)
A:django.forms.renderers.template->self.get_template(template_name)
django.forms.renderers.BaseRenderer
django.forms.renderers.BaseRenderer.get_template(self,template_name)
django.forms.renderers.BaseRenderer.render(self,template_name,context,request=None)
django.forms.renderers.DjangoTemplates(EngineMixin,BaseRenderer)
django.forms.renderers.EngineMixin
django.forms.renderers.EngineMixin.engine(self)
django.forms.renderers.EngineMixin.get_template(self,template_name)
django.forms.renderers.Jinja2(EngineMixin,BaseRenderer)
django.forms.renderers.Jinja2.backend(self)
django.forms.renderers.TemplatesSetting(BaseRenderer)
django.forms.renderers.TemplatesSetting.get_template(self,template_name)
django.forms.renderers.get_default_renderer()
django.renderers.BaseRenderer
django.renderers.BaseRenderer.get_template(self,template_name)
django.renderers.BaseRenderer.render(self,template_name,context,request=None)
django.renderers.DjangoTemplates(EngineMixin,BaseRenderer)
django.renderers.EngineMixin
django.renderers.EngineMixin.engine(self)
django.renderers.EngineMixin.get_template(self,template_name)
django.renderers.Jinja2(EngineMixin,BaseRenderer)
django.renderers.Jinja2.backend(self)
django.renderers.TemplatesSetting(BaseRenderer)
django.renderers.TemplatesSetting.get_template(self,template_name)
django.renderers.get_default_renderer()

