
----------------------------------------/home/zhang/Packages/jax/jax0.1.1/util.py----------------------------------------
A:jax.util.n->len(args[0])
A:jax.util.args->list(map(list, args))
A:jax.util.wrapped->functools.partial(fun, *args, **kwargs)
A:jax.util.node->childless_nodes.pop()
A:jax.util.sides->list(map(predicate, xs))
A:jax.util.anscache[key]->fun(*args, **kwargs)
jax.util.WrapHashably(self,val)
jax.util.WrapHashably.__eq__(self,other)
jax.util.WrapHashably.__hash__(self)
jax.util.WrapHashably.__init__(self,val)
jax.util.concatenate(xs)
jax.util.curry(f)
jax.util.memoize(fun)
jax.util.partial(fun,*args,**kwargs)
jax.util.partialmethod(functools.partial)
jax.util.partialmethod.__get__(self,instance,owner)
jax.util.prod(xs)
jax.util.safe_map(f,*args)
jax.util.safe_zip(*args)
jax.util.split_merge(predicate,xs)
jax.util.toposort(end_node)
jax.util.unzip2(xys)
jax.util.unzip3(xyzs)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/abstract_arrays.py----------------------------------------
A:jax.abstract_arrays.fname->getattr(fun, '__name__', fun)
A:jax.abstract_arrays._bool_nonzero->concretization_function_error(bool)
A:jax.abstract_arrays._float->concretization_function_error(float)
A:jax.abstract_arrays._int->concretization_function_error(int)
A:jax.abstract_arrays._long->concretization_function_error(long)
A:jax.abstract_arrays._complex->concretization_function_error(complex)
A:jax.abstract_arrays._hex->concretization_function_error(hex)
A:jax.abstract_arrays._oct->concretization_function_error(oct)
A:jax.abstract_arrays.self.dtype->numpy.dtype(xla_bridge.canonicalize_dtype(onp.result_type(val)))
A:jax.abstract_arrays.ndim->property(lambda self: len(self.shape))
A:jax.abstract_arrays.size->property(lambda self: prod(self.shape))
A:jax.abstract_arrays.shapestr->','.join(map(str, self.shape))
A:jax.abstract_arrays.self.shape->numpy.shape(val)
A:jax.abstract_arrays.dtype->lib.xla_bridge.canonicalize_dtype(onp.result_type(x))
jax.abstract_arrays.ConcreteArray(self,val)
jax.abstract_arrays.ConcreteArray.__eq__(self,other)
jax.abstract_arrays.ConcreteArray.__hash__(self)
jax.abstract_arrays.ConcreteArray.__init__(self,val)
jax.abstract_arrays.ConcreteArray.at_least_vspace(self)
jax.abstract_arrays.ConcreteArray.join(self,other)
jax.abstract_arrays.ConcreteArray.str_short(self)
jax.abstract_arrays.ShapedArray(self,shape,dtype)
jax.abstract_arrays.ShapedArray.__eq__(self,other)
jax.abstract_arrays.ShapedArray.__hash__(self)
jax.abstract_arrays.ShapedArray.__init__(self,shape,dtype)
jax.abstract_arrays.ShapedArray.__len__(self)
jax.abstract_arrays.ShapedArray.at_least_vspace(self)
jax.abstract_arrays.ShapedArray.join(self,other)
jax.abstract_arrays.ShapedArray.str_short(self)
jax.abstract_arrays.UnshapedArray(self,dtype)
jax.abstract_arrays.UnshapedArray.__eq__(self,other)
jax.abstract_arrays.UnshapedArray.__hash__(self)
jax.abstract_arrays.UnshapedArray.__init__(self,dtype)
jax.abstract_arrays.UnshapedArray.__repr__(self)
jax.abstract_arrays.UnshapedArray.at_least_vspace(self)
jax.abstract_arrays.UnshapedArray.join(self,other)
jax.abstract_arrays.UnshapedArray.str_short(self)
jax.abstract_arrays.concretization_err_msg(fun)
jax.abstract_arrays.concretization_function_error(fun)
jax.abstract_arrays.make_shaped_array(x)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lax_reference.py----------------------------------------
A:jax.lax_reference.quotient->numpy.floor_divide(lhs, rhs)
A:jax.lax_reference.select->numpy.logical_and(onp.sign(lhs) != onp.sign(rhs), onp.remainder(lhs, rhs) != 0)
A:jax.lax_reference.pads->padtype_to_pads(op.shape, dims, strides, padding)
A:jax.lax_reference.(lhs_perm, rhs_perm, out_perm)->_conv_general_permutations(dimension_numbers)
A:jax.lax_reference.padding->padtype_to_pads(onp.take(lhs.shape, lhs_perm)[2:], onp.take(rhs.shape, rhs_perm)[2:], window_strides, padding)
A:jax.lax_reference.trans_lhs->transpose(lhs, lhs_perm)
A:jax.lax_reference.trans_rhs->transpose(rhs, rhs_perm)
A:jax.lax_reference.out->numpy.zeros(operand.shape[:2] + tuple(outspace), operand.dtype)
A:jax.lax_reference.new_id->itertools.count()
A:jax.lax_reference.shared_id->next(new_id)
A:jax.lax_reference.out_axis_ids->filter(not_none, batch_ids + lhs_out_axis_ids + rhs_out_axis_ids)
A:jax.lax_reference.inshape->tuple((1 if i not in broadcast_dimensions else d for (i, d) in enumerate(shape)))
A:jax.lax_reference.dimensions->frozenset(dimensions)
A:jax.lax_reference.(lo, hi, interior)->zip(*padding_config)
A:jax.lax_reference.outshape->numpy.add(onp.add(onp.add(lo, hi), operand.shape), onp.multiply(interior, onp.subtract(operand.shape, 1)))
A:jax.lax_reference.lhs_slices->tuple((_slice(None, None, step) for step in factors))
A:jax.lax_reference.rhs_slices->tuple((_slice(l if l < 0 else 0, -h if h < 0 else None) for (l, h) in zip(lo, hi)))
A:jax.lax_reference.strides->numpy.ones(len(start_indices)).astype(int)
A:jax.lax_reference.slices->tuple((_slice(abs(lo) if lo < 0 else 0, hi % dim if hi < 0 else None) for ((lo, hi), dim) in zip(pads, onp.shape(arr))))
A:jax.lax_reference.idx->tuple((_slice(start, start + size) for (start, size) in zip(start_indices, slice_sizes)))
A:jax.lax_reference.updated_operand->numpy.copy(operand)
A:jax.lax_reference.reducer->_make_reducer(computation, init_value)
A:jax.lax_reference.view->numpy.lib.stride_tricks.as_strided(lhs, view_shape, view_strides)
A:jax.lax_reference.idxs->list(onp.ix_(*[onp.arange(d) for d in keys.shape]))
A:jax.lax_reference.idxs[dimension]->numpy.argsort(keys, axis=dimension)
A:jax.lax_reference.(view, view_axes, rhs_axes, out_axes)->_conv_view(lhs, rhs.shape, window_strides, pads, 0.0)
A:jax.lax_reference.out_shape->numpy.ceil(onp.true_divide(in_shape, window_strides)).astype(int)
A:jax.lax_reference.lhs->_pad(lhs, [(0, 0)] * 2 + list(pads), pad_value)
A:jax.lax_reference.dim->len(filter_shape)
A:jax.lax_reference.out_strides->numpy.multiply(window_strides, lhs.strides[2:])
A:jax.lax_reference.view_axes->list(range(view.ndim))
A:jax.lax_reference.outspace->numpy.add(operand.shape[2:], onp.multiply(onp.subtract(factors, 1), onp.subtract(operand.shape[2:], 1)))
A:jax.lax_reference.monoid_record->_monoids.get(getattr(py_binop, '__name__'))
A:jax.lax_reference.MonoidRecord->collections.namedtuple('MonoidRecord', ['reducer', 'identity'])
A:jax.lax_reference.result->numpy.full(onp.delete(onp.shape(operand), axis), init_val, dtype=onp.asarray(operand).dtype)
A:jax.lax_reference.out_idx->tuple(onp.delete(idx, axis))
A:jax.lax_reference.result[out_idx]->py_binop(result[out_idx], operand[idx])
jax.lax_reference._conv(lhs,rhs,window_strides,pads)
jax.lax_reference._conv_general_permutations(dimension_numbers)
jax.lax_reference._conv_view(lhs,rhs_shape,window_strides,pads,pad_value)
jax.lax_reference._dilate(operand,factors)
jax.lax_reference._get_max_identity(dt)
jax.lax_reference._get_min_identity(dt)
jax.lax_reference._identity_getter(op)
jax.lax_reference._make_reducer(py_binop,init_val)
jax.lax_reference._pad(arr,pads,pad_value)
jax.lax_reference._reducer_from_pyfunc(py_binop,init_val)
jax.lax_reference.bitcast_convert_type(operand,dtype)
jax.lax_reference.broadcast(operand,sizes)
jax.lax_reference.broadcast_in_dim(operand,shape,broadcast_dimensions)
jax.lax_reference.clamp(min,operand,max)
jax.lax_reference.complex(x,y)
jax.lax_reference.concatenate(operands,dimension)
jax.lax_reference.conj(x)
jax.lax_reference.conv(lhs,rhs,window_strides,padding)
jax.lax_reference.conv_general_dilated(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers)
jax.lax_reference.conv_with_general_padding(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation)
jax.lax_reference.convert_element_type(operand,dtype)
jax.lax_reference.div(lhs,rhs)
jax.lax_reference.dot_general(lhs,rhs,dimension_numbers)
jax.lax_reference.dynamic_slice(operand,start_indices,slice_sizes)
jax.lax_reference.dynamic_update_slice(operand,update,start_indices)
jax.lax_reference.pad(operand,padding_value,padding_config)
jax.lax_reference.padtype_to_pads(in_shape,filter_shape,window_strides,padding)
jax.lax_reference.reduce(operand,init_value,computation,dimensions)
jax.lax_reference.reduce_window(operand,init_value,computation,window_dimensions,window_strides,padding)
jax.lax_reference.rem(lhs,rhs)
jax.lax_reference.reshape(operand,new_sizes,dimensions=None)
jax.lax_reference.rev(operand,dimensions)
jax.lax_reference.slice(operand,start_indices,limit_indices,strides=None)
jax.lax_reference.sort_key_val(keys,values,dimension=-1)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lax.py----------------------------------------
A:jax.lax.new_dtype->lib.xla_bridge.canonicalize_dtype(new_dtype)
A:jax.lax.old_dtype->_dtype(operand)
A:jax.lax.pads->padtype_to_pads(lhs_shape[2:], rhs_shape[2:], strides, pads)
A:jax.lax.perms->conv_general_permutations(dimension_numbers)
A:jax.lax.padding->_conv_general_vjp_rhs_padding(onp.take(lhs_shape, lhs_sdims), onp.take(rhs_shape, rhs_sdims), window_strides, onp.take(g.shape, out_sdims), padding, lhs_dilation, rhs_dilation)
A:jax.lax.start_indices->concatenate([reshape(i, [1]) for i in start_indices], 0)
A:jax.lax.(jaxpr, _, consts)->interpreters.partial_eval.trace_unwrapped_to_jaxpr(computation, (pval, pval))
A:jax.lax.slice_sizes->list(operand.shape)
A:jax.lax.update->reshape(update, operand.shape[:ax] + (1,) + operand.shape[ax:])
A:jax.lax.out->interpreters.xla.apply_primitive(sort_key_val_p, keys, values, dimension=dimension)
A:jax.lax.(_, _, out)->fori_loop(0, n, body_fun, init_val)
A:jax.lax.vals->reshape(vals, subvals(dst.shape, zip(axes, [1] * len(axes))))
A:jax.lax.dst->dynamic_update_slice(dst, update, start_indices)
A:jax.lax.(_, dst, _)->fori_loop(0, n, body_fun, init_val)
A:jax.lax.monoid_reducer->_get_monoid_window_reducer(computation, init_value)
A:jax.lax.(jaxpr, consts)->_reduction_jaxpr(computation, init_value)
A:jax.lax.pval->_abstractify(init_value)
A:jax.lax.aval->core.get_aval(x)
A:jax.lax.(select_jaxpr, select_consts)->_reduction_jaxpr(select)
A:jax.lax.(scatter_jaxpr, scatter_consts)->_reduction_jaxpr(scatter)
A:jax.lax.result->_select_and_scatter_add(t, operand, select_prim, window_dimensions, window_strides, padding)
A:jax.lax.(init_val_flat, in_tree)->tree_to_jaxtuples(init_val)
A:jax.lax.(flat_body_fun, out_tree)->flatten_fun(lu.wrap_init(body_fun), (in_tree,))
A:jax.lax.(flat_cond_fun, _)->flatten_fun(lu.wrap_init(cond_fun), (in_tree,))
A:jax.lax.pval_flat->_abstractify(init_val_flat)
A:jax.lax.(cond_jaxpr, _, cond_consts)->interpreters.partial_eval.trace_to_jaxpr(flat_cond_fun, (pval_flat,))
A:jax.lax.(body_jaxpr, pvout, body_consts)->interpreters.partial_eval.trace_to_jaxpr(flat_body_fun, (pval_flat,))
A:jax.lax.params->OpaqueParam((abs_out, cond_jaxpr, cond_consts, body_jaxpr, body_consts))
A:jax.lax.out_flat->Primitive('while').bind(init_val_flat, opaque_params=params)
A:jax.lax.self.id->next(opaque_param_ids)
A:jax.lax.opaque_param_ids->itertools.count()
A:jax.lax.size->prod(operand.shape[lo:hi])
A:jax.lax.limit_indices->list(operand.shape)
A:jax.lax.start_indices[axis]->reshape(rem(start_index, operand.shape[axis]), [1])
A:jax.lax.(_, _, result)->_while_loop(lambda upper_i_x: lt(upper_i_x[1], upper_i_x[0]), lambda upper_i_x: (upper_i_x[0], add(upper_i_x[1], 1), body_fun(upper_i_x[1], upper_i_x[2])), (upper, lower, init_val))
A:jax.lax.(_, result)->fori_loop(0, len(sequence), lambda i, seq_val: body_fun(seq_val[0][i], seq_val[1]), (sequence, init_val))
A:jax.lax.batch->tuple(range(lhs.ndim - 2))
A:jax.lax.ShapedArray.broadcast->core.aval_method(broadcast)
A:jax.lax.ShapedArray.transpose->core.aval_method(transpose)
A:jax.lax.ShapedArray.reshape->core.aval_method(reshape)
A:jax.lax.ShapedArray._iter->staticmethod(_iter)
A:jax.lax.dtype->c.GetShape(operand).numpy_dtype()
A:jax.lax.prim->standard_primitive(shape_rule, dtype_rule, name)
A:jax.lax.least_specialized->_max(map(type, args), key=operator.attrgetter('array_abstraction_level'))
A:jax.lax.xla_opname->''.join((term.capitalize() for term in name.split('_')))
A:jax.lax.typename->str(onp.dtype(aval_dtype).name)
A:jax.lax.dtype_rule->partial(binop_dtype_rule, result_dtype, accepted_dtypes, name)
A:jax.lax.standard_unop->partial(unop, identity)
A:jax.lax.typenames->', '.join((str(onp.dtype(t).name) for t in types))
A:jax.lax.shapes->map(c.GetShape, (src, dst) + idxs)
A:jax.lax.result_shape->numpy.floor_divide(onp.add(onp.subtract(limit_indices, start_indices), strides) - 1, strides)
A:jax.lax.shape_rule->partial(broadcasting_shape_rule, name)
A:jax.lax.standard_binop->partial(binop, _input_dtype)
A:jax.lax.shape->c.GetShape(init_val)
A:jax.lax.x_shape->numpy.shape(x)
A:jax.lax.(broadcast_dimensions,)->numpy.where(onp.equal(x_shape, shape))
A:jax.lax.(squeezed_dimensions,)->numpy.where(onp.not_equal(x_shape, shape))
A:jax.lax.inshape->numpy.delete(x_shape, squeezed_dimensions)
A:jax.lax.neg_p->standard_unop(_num, 'neg')
A:jax.lax.sign_p->standard_unop(_num, 'sign')
A:jax.lax.floor_p->standard_unop(_float, 'floor')
A:jax.lax.ceil_p->standard_unop(_float, 'ceil')
A:jax.lax.round_p->standard_unop(_float, 'round')
A:jax.lax.is_finite_p->unop(_fixed_dtype(onp.bool_), _float, 'is_finite')
A:jax.lax.exp_p->standard_unop(_float | _complex, 'exp')
A:jax.lax.log_p->standard_unop(_float | _complex, 'log')
A:jax.lax.expm1_p->standard_unop(_float | _complex, 'expm1')
A:jax.lax.log1p_p->standard_unop(_float | _complex, 'log1p')
A:jax.lax.tanh_p->standard_unop(_float | _complex, 'tanh')
A:jax.lax.sin_p->standard_unop(_float | _complex, 'sin')
A:jax.lax.cos_p->standard_unop(_float | _complex, 'cos')
A:jax.lax.atan2_p->standard_binop([_float, _float], 'atan2')
A:jax.lax.lgamma_p->standard_unop(_float, 'lgamma')
A:jax.lax.digamma_p->standard_unop(_float, 'digamma')
A:jax.lax.erf_p->standard_unop(_float, 'erf')
A:jax.lax.erfc_p->standard_unop(_float, 'erfc')
A:jax.lax.erf_inv_p->standard_unop(_float, 'erf_inv')
A:jax.lax.real_p->unop(_fixed_dtype(onp.float32), _complex, 'real')
A:jax.lax.imag_p->unop(_fixed_dtype(onp.float32), _complex, 'imag')
A:jax.lax.complex_p->standard_binop([_f32, _f32], 'complex')
A:jax.lax.conj_p->unop(_fixed_dtype(onp.complex64), _float | _complex, 'conj')
A:jax.lax.abs_p->unop(_complex_basetype, _num, 'abs')
A:jax.lax.pow_p->standard_binop([_float | _complex, _float | _complex], 'pow')
A:jax.lax.not_p->standard_unop(_int | _bool, 'not')
A:jax.lax.and_p->standard_binop([_any, _any], 'and')
A:jax.lax.or_p->standard_binop([_any, _any], 'or')
A:jax.lax.xor_p->standard_binop([_any, _any], 'xor')
A:jax.lax.add_p->standard_binop([_num, _num], 'add')
A:jax.lax.sub_p->standard_binop([_num, _num], 'sub')
A:jax.lax.mul_p->standard_binop([_num, _num], 'mul')
A:jax.lax.div_p->standard_binop([_num, _num], 'div')
A:jax.lax.rem_p->standard_binop([_num, _num], 'rem')
A:jax.lax.max_p->standard_binop([_any, _any], 'max')
A:jax.lax.min_p->standard_binop([_any, _any], 'min')
A:jax.lax.shift_left_p->standard_binop([_int, _int], 'shift_left')
A:jax.lax.shift_right_arithmetic_p->standard_binop([_int, _int], 'shift_right_arithmetic')
A:jax.lax.shift_right_logical_p->standard_binop([_int, _int], 'shift_right_logical')
A:jax.lax.eq_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'eq')
A:jax.lax.ne_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'ne')
A:jax.lax.ge_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'ge')
A:jax.lax.gt_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'gt')
A:jax.lax.le_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'le')
A:jax.lax.lt_p->binop(_fixed_dtype(onp.bool_), [_any, _any], 'lt')
A:jax.lax.new_etype->lib.xla_bridge.dtype_to_etype(new_dtype)
A:jax.lax.convert_element_type_p->standard_primitive(convert_element_type_shape_rule, convert_element_type_dtype_rule, 'convert_element_type', convert_element_type_translation_rule)
A:jax.lax.bitcast_convert_type_p->standard_primitive(bitcast_convert_type_shape_rule, bitcast_convert_type_dtype_rule, 'bitcast_convert_type', bitcast_convert_type_translation_rule)
A:jax.lax.lhs_dilated->_dilate_shape(lhs.shape, lhs_dilation)
A:jax.lax.rhs_dilated->_dilate_shape(rhs.shape, rhs_dilation)
A:jax.lax.(lhs_perm, rhs_perm, out_perm)->map(getperm, dimension_numbers, charpairs)
A:jax.lax.lhs_trans->numpy.take(lhs_shape, lhs_perm)
A:jax.lax.rhs_trans->numpy.take(rhs_shape, rhs_perm)
A:jax.lax.out_trans->conv_shape_tuple(lhs_trans, rhs_trans, window_strides, padding)
A:jax.lax.nd->len(lhs_shape)
A:jax.lax.lhs_sdimsrhs_sdimsout_sdims->list(range(2, nd))
A:jax.lax.trans_dimension_numbers->ConvolutionDimensionNumbers((1, 0) + tuple(range(2, nd)), (1, 0) + tuple(range(2, nd)), (1, 0) + tuple(range(2, nd)))
A:jax.lax.(lhs_sdims, rhs_sdims, out_sdims)->_get_sdims(dimension_numbers)
A:jax.lax.revd_weights->rev(rhs, rhs_sdims)
A:jax.lax.dimension_numbers->_conv_general_proto(dimension_numbers)
A:jax.lax.conv_general_dilated_p->standard_primitive(conv_general_dilated_shape_rule, conv_general_dilated_dtype_rule, 'conv_general_dilated', conv_general_dilated_translation_rule)
A:jax.lax.lhs->interpreters.batching.move_dim_to_front(lhs, lbd)
A:jax.lax.rhs->interpreters.batching.move_dim_to_front(rhs, rbd)
A:jax.lax.dot_dtype_rule->partial(binop_dtype_rule, _input_dtype, [_num, _num], 'dot')
A:jax.lax.dot_p->standard_primitive(dot_shape_rule, dot_dtype_rule, 'dot')
A:jax.lax.lhs_batch_shape->numpy.take(lhs.shape, lhs_batch)
A:jax.lax.rhs_batch_shape->numpy.take(rhs.shape, rhs_batch)
A:jax.lax.lhs_contracting_shape->numpy.take(lhs.shape, lhs_contracting)
A:jax.lax.rhs_contracting_shape->numpy.take(rhs.shape, rhs_contracting)
A:jax.lax.batch_shape->tuple(onp.take(lhs.shape, lhs_batch))
A:jax.lax.lhs_tensored_shape->tuple(onp.delete(lhs.shape, lhs_contract_or_batch))
A:jax.lax.rhs_tensored_shape->tuple(onp.delete(rhs.shape, rhs_contract_or_batch))
A:jax.lax.x_kept->remaining(range(x_ndim), x_contract, x_batch)
A:jax.lax.y_kept->remaining(range(y.ndim), y_contract, y_batch)
A:jax.lax.(ans_batch, ans_y, _)->ranges_like(x_batch, y_kept, x_kept)
A:jax.lax.(ans_batch, _, ans_y)->ranges_like(x_batch, x_kept, y_kept)
A:jax.lax.x_contract_sorted_by_y->list(onp.take(x_contract, onp.argsort(y_contract)))
A:jax.lax.out_axes->numpy.argsort(list(x_batch) + x_kept + x_contract_sorted_by_y)
A:jax.lax.dot_general_p->standard_primitive(dot_general_shape_rule, dot_general_dtype_rule, 'dot_general')
A:jax.lax.broadcast_p->standard_primitive(broadcast_shape_rule, _input_dtype, 'broadcast')
A:jax.lax.axes->tuple(onp.delete(range(len(shape)), broadcast_dimensions))
A:jax.lax.new_shape->list(shape)
A:jax.lax.broadcast_in_dim_p->standard_primitive(broadcast_in_dim_shape_rule, _input_dtype, 'broadcast_in_dim')
A:jax.lax.clamp_dtype_rule->partial(binop_dtype_rule, _input_dtype, [_any, _any, _any], 'clamp')
A:jax.lax.clamp_p->standard_primitive(clamp_shape_rule, clamp_dtype_rule, 'clamp')
A:jax.lax.dimension->kwargs.pop('dimension')
A:jax.lax.op->next((op for op in operands if not isinstance(op, UnshapedArray)))
A:jax.lax.concat_size->sum((o.shape[dimension] for o in operands))
A:jax.lax.operand_shapes->kwargs.pop('operand_shapes')
A:jax.lax.limit_points->numpy.cumsum([shape[dimension] for shape in operand_shapes])
A:jax.lax.starts->numpy.zeros((len(operands), t.ndim), dtype=int)
A:jax.lax.limits->numpy.tile(t.shape, (len(operands), 1))
A:jax.lax.concatenate_p->standard_primitive(concatenate_shape_rule, concatenate_dtype_rule, 'concatenate', concatenate_translation_rule)
A:jax.lax.(lo, hi, interior)->zip(*padding_config)
A:jax.lax.out_shape->numpy.ceil(onp.true_divide(in_shape, window_strides)).astype(int)
A:jax.lax.t_padv->sub(total(t), total(t_operand))
A:jax.lax.pad_p->standard_primitive(pad_shape_rule, _input_dtype, 'pad')
A:jax.lax.operand->interpreters.batching.move_dim_to_front(operand, bdim)
A:jax.lax.reshape_p->standard_primitive(reshape_shape_rule, reshape_dtype_rule, 'reshape', reshape_translation_rule)
A:jax.lax.rev_p->standard_primitive(rev_shape_rule, _input_dtype, 'rev')
A:jax.lax.perm->tuple(onp.insert(onp.add(permutation, 1), bdim, 0))
A:jax.lax.transpose_p->standard_primitive(transpose_shape_rule, _input_dtype, 'transpose')
A:jax.lax.select_p->standard_primitive(select_shape_rule, select_dtype_rule, 'select')
A:jax.lax.strides->numpy.ones(operand.ndim, onp.int32)
A:jax.lax.real_limits->numpy.add(onp.add(start_indices, 1), onp.multiply(onp.subtract(t.shape, 1), strides))
A:jax.lax.new_start_indices->list(start_indices)
A:jax.lax.new_limit_indices->list(limit_indices)
A:jax.lax.new_strides->list(strides)
A:jax.lax.slice_p->standard_primitive(slice_shape_rule, _input_dtype, 'slice', slice_translation_rule)
A:jax.lax.zeros->_zeros(t, shape=update_shape)
A:jax.lax.dynamic_slice_p->standard_primitive(dynamic_slice_shape_rule, _input_dtype, 'dynamic_slice', dynamic_slice_translation_rule)
A:jax.lax.val_out->sort_key_val(keys, values, dimension)
A:jax.lax.g_operand->interpreters.ad.instantiate_zeros(operand, g_operand)
A:jax.lax.g_update->interpreters.ad.instantiate_zeros(update, g_update)
A:jax.lax.tangent_out->index_untake(g_src, g_dst, idxs, axes)
A:jax.lax.dynamic_update_slice_p->standard_primitive(dynamic_update_slice_shape_rule, dynamic_update_slice_dtype_rule, 'dynamic_update_slice', dynamic_update_slice_translation_rule)
A:jax.lax.xla_computation->_reduction_computation(c, jaxpr, consts, init_value)
A:jax.lax.idxs->tuple(primals[2:])
A:jax.lax.g->interpreters.ad.instantiate_zeros(src, tangents[0])
A:jax.lax.t_src->index_take(t, idxs, axes)
A:jax.lax.index_take_p->standard_primitive(index_take_shape_rule, _input_dtype, 'index_take', index_take_translation_rule)
A:jax.lax.g_src->interpreters.ad.instantiate_zeros(src, g_src)
A:jax.lax.g_dst->interpreters.ad.instantiate_zeros(dst, g_dst)
A:jax.lax.index_untake_p->standard_primitive(index_untake_shape_rule, _input_dtype, 'index_untake', index_untake_translation_rule)
A:jax.lax.reduce_p->standard_primitive(reduce_shape_rule, _input_dtype, 'reduce', reduce_translation_rule)
A:jax.lax.scalar->lib.xla_bridge.Shape.array_shape(dtype, ())
A:jax.lax.broadcast_dimensions->tuple(onp.delete(onp.arange(len(input_shape)), axes))
A:jax.lax.reduce_sum_p->standard_primitive(reduce_sum_shape_rule, _input_dtype, 'reduce_sum', reduce_sum_translation_rule)
A:jax.lax.location_indicators->convert_element_type(_eq_meet(operand, reshape(ans, shape)), g.dtype)
A:jax.lax.counts->_reduce_sum(location_indicators, axes)
A:jax.lax.reduce_max_translation_rule->partial(reduce_chooser_translation_rule, max_p, _get_max_identity)
A:jax.lax.reduce_max_p->standard_primitive(reduce_chooser_shape_rule, _input_dtype, 'reduce_max', reduce_max_translation_rule)
A:jax.lax.reduce_min_translation_rule->partial(reduce_chooser_translation_rule, min_p, _get_min_identity)
A:jax.lax.reduce_min_p->standard_primitive(reduce_chooser_shape_rule, _input_dtype, 'reduce_min', reduce_min_translation_rule)
A:jax.lax.reduce_window_p->standard_primitive(reduce_window_shape_rule, _input_dtype, 'reduce_window', reduce_window_translation_rule)
A:jax.lax.in_pads->padtype_to_pads(input_shape, window_dimensions, window_strides, padding)
A:jax.lax.pad_cotangent->pad(cotangent, _zero(cotangent), padding_config)
A:jax.lax.reduce_window_sum_p->standard_primitive(reduce_window_sum_shape_rule, _input_dtype, 'reduce_window_sum', reduce_window_sum_translation_rule)
A:jax.lax.operand_padded->numpy.add(operand_shape, onp.add(*zip(*pads)))
A:jax.lax.reduce_window_max_translation_rule->partial(reduce_window_chooser_translation_rule, max_p, _get_max_identity)
A:jax.lax.reduce_window_max_p->standard_primitive(common_reduce_window_shape_rule, _input_dtype, 'reduce_window_max', reduce_window_max_translation_rule)
A:jax.lax.reduce_window_min_translation_rule->partial(reduce_window_chooser_translation_rule, min_p, _get_min_identity)
A:jax.lax.reduce_window_min_p->standard_primitive(common_reduce_window_shape_rule, _input_dtype, 'reduce_window_min', reduce_window_min_translation_rule)
A:jax.lax.select->interpreters.xla.primitive_computation(select_prim, scalar, scalar)
A:jax.lax.scatter->interpreters.xla.primitive_computation(add_p, scalar, scalar)
A:jax.lax.select_and_scatter_p->standard_primitive(select_and_scatter_shape_rule, _input_dtype, 'select_and_scatter', select_and_scatter_translation)
A:jax.lax.zero->c.Constant(onp.array(0, dtype))
A:jax.lax.select_and_scatter_add_p->standard_primitive(select_and_scatter_add_shape_rule, _input_dtype, 'select_and_scatter_add', select_and_scatter_add_translation)
A:jax.lax.select_and_gather_add_p->standard_primitive(select_and_gather_add_shape_rule, _input_dtype, 'select_and_gather_add', select_and_gather_add_translation)
A:jax.lax.(_, g_out)->sort_key_val(operand, g, dimension)
A:jax.lax.sort_p->standard_primitive(sort_shape, _input_dtype, 'sort')
A:jax.lax.keys_tangents_out->sort_jvp_rule(keys_tangents, keys, dimension)
A:jax.lax.values_tangents_out->sort_jvp_rule(values_tangents, keys, dimension)
A:jax.lax.broadcasted_iota->broadcast_in_dim(onp.arange(keys.shape[dimension]), keys.shape, [dimension % keys.ndim])
A:jax.lax.(_, perm)->sort_key_val(keys, broadcasted_iota)
A:jax.lax.sort_key_val_p->Primitive('sort_key_val')
A:jax.lax.xla.translations[sort_key_val_p]->partial(standard_translate, 'sort_key_val')
A:jax.lax.cond_computation->interpreters.xla.jaxpr_computation(cond_jaxpr, cond_consts, (), shape)
A:jax.lax.body_computation->interpreters.xla.jaxpr_computation(body_jaxpr, body_consts, (), shape)
A:jax.lax.while_p->Primitive('while')
A:jax.lax.dtypes->list(map(onp.dtype, dtypes))
A:jax.lax.lhs_padded->numpy.add(lhs_shape[2:], onp.add(*zip(*pads)))
A:jax.lax.out_space->numpy.maximum(0, out_space)
A:jax.lax.obj_arr->numpy.array(obj)
A:jax.lax.spatial->sorted(spatial, key=lambda i: rhs_spec.index(spec[i]))
A:jax.lax._zeros->partial(full_like, fill_value=0)
A:jax.lax._zero->partial(full_like, shape=(), fill_value=0)
A:jax.lax._ones->partial(full_like, fill_value=1)
A:jax.lax._one->partial(full_like, shape=(), fill_value=1)
A:jax.lax._twos->partial(full_like, fill_value=2)
A:jax.lax._two->partial(full_like, shape=(), fill_value=2)
A:jax.lax.x_len->len(x)
A:jax.lax.blacklist->set(itertools.chain(*removed_lists))
A:jax.lax.lhs_sdims->sorted((i for (i, c) in enumerate(lhs_spec) if c not in {'N', 'C'}), key=lambda i: rhs_spec.index(lhs_spec[i]))
A:jax.lax.out_sdims->sorted((i for (i, c) in enumerate(out_spec) if c not in {'N', 'C'}), key=lambda i: rhs_spec.index(out_spec[i]))
A:jax.lax.ConvolutionDimensionNumbers->collections.namedtuple('ConvolutionDimensionNumbers', ['lhs_spec', 'rhs_spec', 'out_spec'])
A:jax.lax.proto->lib.xla_bridge.xla_data_pb2.ConvolutionDimensionNumbers()
A:jax.lax.lhs_dilated_shape->_dilate_shape(in_shape, lhs_dilation)
A:jax.lax.out_dilated_shape->_dilate_shape(out_shape, window_strides)
A:jax.lax.rhs_dilated_shape->_dilate_shape(window_dimensions, rhs_dilation)
A:jax.lax.higher_dtype->numpy.promote_types(a_dtype, b_dtype)
A:jax.lax.a->convert_element_type(a, b_dtype)
A:jax.lax.b->convert_element_type(b, a_dtype)
A:jax.lax.lst->list(lst)
jax.lax.OpaqueParam(self,val)
jax.lax.OpaqueParam.__hash__(self)
jax.lax.OpaqueParam.__init__(self,val)
jax.lax._abstractify(x)
jax.lax._balanced_eq(x,z,y)
jax.lax._brcast(x,*others)
jax.lax._brcast_to(x,shape)
jax.lax._charswap(a,b,s)
jax.lax._check_conv_shapes(name,lhs_shape,rhs_shape,window_strides)
jax.lax._check_same_dtypes(name,ignore_fp_precision,*dtypes)
jax.lax._check_shapelike(fun_name,arg_name,obj)
jax.lax._conv_general_proto(dimension_numbers)
jax.lax._conv_general_vjp_lhs_padding(in_shape,window_dimensions,window_strides,out_shape,padding,lhs_dilation,rhs_dilation)
jax.lax._conv_general_vjp_rhs_padding(in_shape,window_dimensions,window_strides,out_shape,padding,lhs_dilation,rhs_dilation)
jax.lax._dilate_shape(shape,dilation)
jax.lax._dynamic_slice_indices(operand,start_indices)
jax.lax._eq_meet(a,b)
jax.lax._get_max_identity(dtype)
jax.lax._get_min_identity(dtype)
jax.lax._get_monoid_reducer(monoid_op,x)
jax.lax._get_monoid_window_reducer(monoid_op,x)
jax.lax._get_sdims(dimension_numbers)
jax.lax._index_take(axes,src,*idxs)
jax.lax._index_untake(axes,src,dst,*idxs)
jax.lax._iter(tracer)
jax.lax._outer(x,y)
jax.lax._reduce_max(operand,axes)
jax.lax._reduce_min(operand,axes)
jax.lax._reduce_sum(operand,axes)
jax.lax._reduce_window_max(operand,window_dimensions,window_strides,padding)
jax.lax._reduce_window_min(operand,window_dimensions,window_strides,padding)
jax.lax._reduce_window_sum(operand,window_dimensions,window_strides,padding)
jax.lax._reduction_computation(c,jaxpr,consts,init_value)
jax.lax._reduction_jaxpr(computation,init_value)
jax.lax._select_and_gather_add(tangents,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax._select_and_scatter(operand,select,window_dimensions,window_strides,padding,source,init_value,scatter)
jax.lax._select_and_scatter_add(source,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax._while_loop(cond_fun,body_fun,init_val)
jax.lax.abs(x)
jax.lax.acos(x)
jax.lax.acosh(x)
jax.lax.add(x,y)
jax.lax.asin(x)
jax.lax.asinh(x)
jax.lax.atan(x)
jax.lax.atan2(x,y)
jax.lax.batch_matmul(lhs,rhs)
jax.lax.binop(result_dtype,accepted_dtypes,name)
jax.lax.binop_dtype_rule(result_dtype,accepted_dtypes,name,*avals)
jax.lax.bitcast_convert_type(operand,new_dtype)
jax.lax.bitcast_convert_type_dtype_rule(operand,new_dtype)
jax.lax.bitcast_convert_type_shape_rule(operand,new_dtype)
jax.lax.bitcast_convert_type_translation_rule(c,operand,new_dtype)
jax.lax.bitwise_and(x,y)
jax.lax.bitwise_not(x)
jax.lax.bitwise_or(x,y)
jax.lax.bitwise_xor(x,y)
jax.lax.broadcast(operand,sizes)
jax.lax.broadcast_batch_rule(batched_args,batch_dims,sizes)
jax.lax.broadcast_in_dim(operand,shape,broadcast_dimensions)
jax.lax.broadcast_in_dim_batch_rule(batched_args,batch_dims,shape,broadcast_dimensions)
jax.lax.broadcast_in_dim_shape_rule(operand,shape,broadcast_dimensions)
jax.lax.broadcast_in_dim_transpose_rule(t,shape,broadcast_dimensions)
jax.lax.broadcast_shape_rule(operand,sizes)
jax.lax.broadcasting_shape_rule(name,*avals)
jax.lax.ceil(x)
jax.lax.clamp(min,operand,max)
jax.lax.clamp_shape_rule(min,operand,max)
jax.lax.collapse(operand,start_dimension,stop_dimension)
jax.lax.common_reduce_window_shape_rule(operand,window_dimensions,window_strides,padding)
jax.lax.complex(x,y)
jax.lax.concatenate(operands,dimension)
jax.lax.concatenate_dtype_rule(*operands,**kwargs)
jax.lax.concatenate_shape_rule(*operands,**kwargs)
jax.lax.concatenate_translation_rule(c,*operands,**kwargs)
jax.lax.concatenate_transpose_rule(t,*operands,**kwargs)
jax.lax.conj(x)
jax.lax.conv(lhs,rhs,window_strides,padding)
jax.lax.conv_general_dilated(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers)
jax.lax.conv_general_dilated_dtype_rule(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers,**unused_kwargs)
jax.lax.conv_general_dilated_shape_rule(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers=None,**unused_kwargs)
jax.lax.conv_general_dilated_translation_rule(c,lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers,**unused_kwargs)
jax.lax.conv_general_dilated_transpose_lhs(g,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers,lhs_shape,rhs_shape)
jax.lax.conv_general_dilated_transpose_rhs(g,lhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers,lhs_shape,rhs_shape)
jax.lax.conv_general_permutations(dimension_numbers)
jax.lax.conv_general_shape_tuple(lhs_shape,rhs_shape,window_strides,padding,dimension_numbers)
jax.lax.conv_shape_tuple(lhs_shape,rhs_shape,strides,pads)
jax.lax.conv_with_general_padding(lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation)
jax.lax.convert_element_type(operand,new_dtype)
jax.lax.convert_element_type_dtype_rule(operand,new_dtype,old_dtype)
jax.lax.convert_element_type_shape_rule(operand,new_dtype,old_dtype)
jax.lax.convert_element_type_translation_rule(c,operand,new_dtype,old_dtype)
jax.lax.cos(x)
jax.lax.cosh(x)
jax.lax.digamma(x)
jax.lax.div(x,y)
jax.lax.div_transpose_rule(cotangent,x,y)
jax.lax.dot(lhs,rhs)
jax.lax.dot_batch_rule(batched_args,batch_dims)
jax.lax.dot_general(lhs,rhs,dimension_numbers)
jax.lax.dot_general_dtype_rule(lhs,rhs,dimension_numbers)
jax.lax.dot_general_shape_rule(lhs,rhs,dimension_numbers)
jax.lax.dot_general_transpose_lhs(g,y,dimension_numbers,swap_ans=False)
jax.lax.dot_general_transpose_rhs(g,x,dimension_numbers)
jax.lax.dot_shape_rule(lhs,rhs)
jax.lax.dot_transpose_lhs(t,rhs)
jax.lax.dot_transpose_rhs(t,lhs)
jax.lax.dynamic_index_in_dim(operand,index,axis=0,keepdims=True)
jax.lax.dynamic_slice(operand,start_indices,slice_sizes)
jax.lax.dynamic_slice_in_dim(operand,start_index,slice_size,axis=0)
jax.lax.dynamic_slice_jvp_rule(g,operand,start_indices,slice_sizes,operand_shape)
jax.lax.dynamic_slice_shape_rule(operand,start_indices,slice_sizes,operand_shape)
jax.lax.dynamic_slice_translation_rule(c,operand,start_indices,slice_sizes,operand_shape)
jax.lax.dynamic_slice_transpose_rule(t,operand,start_indices,slice_sizes,operand_shape)
jax.lax.dynamic_update_index_in_dim(operand,update,index,axis)
jax.lax.dynamic_update_slice(operand,update,start_indices)
jax.lax.dynamic_update_slice_dtype_rule(operand,update,start_indices,update_shape)
jax.lax.dynamic_update_slice_in_dim(operand,update,start_index,axis)
jax.lax.dynamic_update_slice_jvp(primals,tangents,update_shape)
jax.lax.dynamic_update_slice_shape_rule(operand,update,start_indices,update_shape)
jax.lax.dynamic_update_slice_translation_rule(c,operand,update,start_indices,update_shape)
jax.lax.dynamic_update_slice_transpose_rule(t,operand,update,start_indices,update_shape)
jax.lax.eq(x,y)
jax.lax.erf(x)
jax.lax.erf_inv(x)
jax.lax.erfc(x)
jax.lax.exp(x)
jax.lax.expm1(x)
jax.lax.floor(x)
jax.lax.foreach_loop(sequence,body_fun,init_val)
jax.lax.fori_loop(lower,upper,body_fun,init_val)
jax.lax.full_like(x,fill_value,dtype=None,shape=None)
jax.lax.ge(x,y)
jax.lax.gt(x,y)
jax.lax.identity(x)
jax.lax.imag(x)
jax.lax.index_in_dim(operand,index,axis=0,keepdims=True)
jax.lax.index_take(src,idxs,axes)
jax.lax.index_take_jvp(primals,tangents,axes,input_shape,jaxpr,consts)
jax.lax.index_take_shape_rule(src,*idxs,**kwargs)
jax.lax.index_take_translation_rule(c,src,*idxs,**kwargs)
jax.lax.index_take_transpose_rule(t,src,*idxs,**kwargs)
jax.lax.index_untake(src,dst,idxs,axes)
jax.lax.index_untake_jvp(primals,tangents,axes,jaxpr,consts)
jax.lax.index_untake_shape_rule(src,dst,*idxs,**kwargs)
jax.lax.index_untake_translation_rule(c,src,dst,*idxs,**kwargs)
jax.lax.index_untake_transpose_rule(t,src,dst,*idxs,**kwargs)
jax.lax.is_finite(x)
jax.lax.le(x,y)
jax.lax.lgamma(x)
jax.lax.log(x)
jax.lax.log1p(x)
jax.lax.lt(x,y)
jax.lax.max(x,y)
jax.lax.maybe_tracer_tuple_to_abstract_tuple(tup)
jax.lax.min(x,y)
jax.lax.mul(x,y)
jax.lax.ne(x,y)
jax.lax.neg(x)
jax.lax.pad(operand,padding_value,padding_config)
jax.lax.pad_shape_rule(operand,padding_value,padding_config)
jax.lax.pad_transpose(t,operand,padding_value,padding_config)
jax.lax.padtype_to_pads(in_shape,window_shape,window_strides,padding)
jax.lax.pow(x,y)
jax.lax.ranges_like(*xs)
jax.lax.real(x)
jax.lax.reciprocal(x)
jax.lax.reduce(operand,init_value,computation,dimensions)
jax.lax.reduce_chooser_jvp_rule(g,ans,operand,axes)
jax.lax.reduce_chooser_shape_rule(operand,axes)
jax.lax.reduce_chooser_translation_rule(prim,identity,c,operand,axes)
jax.lax.reduce_shape_rule(operand,init_value,jaxpr,consts,dimensions)
jax.lax.reduce_sum_shape_rule(operand,axes,input_shape)
jax.lax.reduce_sum_translation_rule(c,operand,axes,input_shape)
jax.lax.reduce_sum_transpose_rule(cotangent,input_shape,axes)
jax.lax.reduce_translation_rule(c,operand,init_value,jaxpr,consts,dimensions)
jax.lax.reduce_window(operand,init_value,computation,window_dimensions,window_strides,padding)
jax.lax.reduce_window_chooser_jvp_rule(prim,g,operand,window_dimensions,window_strides,padding)
jax.lax.reduce_window_chooser_translation_rule(prim,identity,c,operand,window_dimensions,window_strides,padding)
jax.lax.reduce_window_shape_rule(operand,init_value,jaxpr,consts,window_dimensions,window_strides,padding)
jax.lax.reduce_window_shape_tuple(operand_shape,window_dimensions,window_strides,padding)
jax.lax.reduce_window_sum_shape_rule(operand,window_dimensions,window_strides,padding,input_shape)
jax.lax.reduce_window_sum_translation_rule(c,operand,window_dimensions,window_strides,padding,input_shape)
jax.lax.reduce_window_sum_transpose_rule(cotangent,window_dimensions,window_strides,padding,input_shape)
jax.lax.reduce_window_translation_rule(c,operand,init_value,jaxpr,consts,window_dimensions,window_strides,padding)
jax.lax.rem(x,y)
jax.lax.remaining(original,*removed_lists)
jax.lax.reshape(operand,new_sizes,dimensions=None)
jax.lax.reshape_batch_rule(batched_args,batch_dims,new_sizes,dimensions,**unused)
jax.lax.reshape_dtype_rule(operand,new_sizes,dimensions,**unused_kwargs)
jax.lax.reshape_shape_rule(operand,new_sizes,dimensions,**unused_kwargs)
jax.lax.reshape_translation_rule(c,operand,new_sizes,dimensions,old_sizes)
jax.lax.reshape_transpose_rule(t,new_sizes,dimensions,old_sizes)
jax.lax.rev(operand,dimensions)
jax.lax.rev_shape_rule(operand,dimensions)
jax.lax.round(x)
jax.lax.rsqrt(x)
jax.lax.select(pred,on_true,on_false)
jax.lax.select_and_gather_add_shape_rule(tangents,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_gather_add_translation(c,tangents,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_gather_add_transpose(t,tangents,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_scatter_add_shape_rule(source,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_scatter_add_translation(c,source,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_scatter_add_transpose(t,source,operand,select_prim,window_dimensions,window_strides,padding)
jax.lax.select_and_scatter_shape_rule(operand,source,init_value,select_jaxpr,select_consts,scatter_jaxpr,scatter_consts,window_dimensions,window_strides,padding)
jax.lax.select_and_scatter_translation(operand,source,init_value,select_jaxpr,select_consts,scatter_jaxpr,scatter_consts,window_dimensions,window_strides,padding)
jax.lax.select_batch_rule(batched_args,batch_dims,**unused_kwargs)
jax.lax.select_dtype_rule(pred,on_true,on_false)
jax.lax.select_shape_rule(pred,on_true,on_false)
jax.lax.select_transpose_rule(t,pred,on_true,on_false)
jax.lax.shift_left(x,y)
jax.lax.shift_right_arithmetic(x,y)
jax.lax.shift_right_logical(x,y)
jax.lax.sign(x)
jax.lax.sin(x)
jax.lax.sinh(x)
jax.lax.slice(operand,start_indices,limit_indices,strides=None)
jax.lax.slice_batching_rule(batched_args,batch_dims,start_indices,limit_indices,strides,**unused_kwargs)
jax.lax.slice_in_dim(operand,start_index,limit_index,stride=1,axis=0)
jax.lax.slice_shape_rule(operand,start_indices,limit_indices,strides,operand_shape)
jax.lax.slice_translation_rule(c,operand,start_indices,limit_indices,strides,operand_shape)
jax.lax.slice_transpose_rule(t,start_indices,limit_indices,strides,operand_shape)
jax.lax.sort(operand,dimension=-1)
jax.lax.sort_jvp_rule(g,operand,dimension)
jax.lax.sort_key_val(keys,values,dimension=-1)
jax.lax.sort_key_val_abstract_eval(keys,values,dimension)
jax.lax.sort_key_val_impl(keys,values,dimension)
jax.lax.sort_key_val_jvp(primals,tangents,dimension)
jax.lax.sort_key_val_transpose_rule(t,keys,values,dimension)
jax.lax.sqrt(x)
jax.lax.square(x)
jax.lax.standard_abstract_eval(shape_rule,dtype_rule,*args,**kwargs)
jax.lax.standard_primitive(shape_rule,dtype_rule,name,translation_rule=None)
jax.lax.standard_translate(name,c,*args,**kwargs)
jax.lax.sub(x,y)
jax.lax.subvals(lst,replace)
jax.lax.tan(x)
jax.lax.tanh(x)
jax.lax.transpose(operand,permutation)
jax.lax.transpose_batch_rule(batched_args,batch_dims,permutation)
jax.lax.transpose_shape_rule(operand,permutation)
jax.lax.unop(result_dtype,accepted_dtypes,name)
jax.lax.unop_dtype_rule(result_dtype,accepted_dtypes,name,aval)
jax.lax.while_loop_abstract_eval(init_val,opaque_params)
jax.lax.while_loop_translation_rule(c,init_val,opaque_params)
jax.lax.zeros_like_array(x)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/test_util.py----------------------------------------
A:jax.test_util.atol->max(atol, 0.5)
A:jax.test_util.rtol->max(rtol, 0.1)
A:jax.test_util.close->partial(numpy_close, atol=atol, rtol=rtol)
A:jax.test_util.add->partial(tree_multimap, onp.add)
A:jax.test_util.sub->partial(tree_multimap, onp.subtract)
A:jax.test_util.conj->partial(tree_map, onp.conj)
A:jax.test_util.shape->numpy.shape(x)
A:jax.test_util.dtype->_dtype(x)
A:jax.test_util.delta->scalar_mul(tangents, EPS)
A:jax.test_util.f_pos->f(*add(primals, delta))
A:jax.test_util.f_neg->f(*sub(primals, delta))
A:jax.test_util.rng->numpy.random.RandomState(0)
A:jax.test_util.tangent->tree_map(_rand_like, args)
A:jax.test_util.(v_out, t_out)->f_jvp(args, tangent)
A:jax.test_util.v_out_expected->f(*args)
A:jax.test_util.t_out_expected->numerical_jvp(f, args, tangent, eps=eps)
A:jax.test_util._rand_like->partial(rand_like, onp.random.RandomState(0))
A:jax.test_util.(v_out, vjpfun)->f_vjp(*args)
A:jax.test_util.tangent_out->numerical_jvp(f, args, tangent, eps=EPS)
A:jax.test_util.cotangent->tree_map(_rand_like, v_out)
A:jax.test_util.cotangent_out->conj(vjpfun(conj(cotangent)))
A:jax.test_util.ip->inner_prod(tangent, cotangent_out)
A:jax.test_util.ip_expected->inner_prod(tangent_out, cotangent)
A:jax.test_util.test_name->getattr(test_method, '__name__', '[unknown test]')
A:jax.test_util.flag_value->getattr(FLAGS, flag_name)
A:jax.test_util.NUMPY_SCALAR_SHAPE->_NumpyScalar()
A:jax.test_util.shapestr->','.join((str(dim) for dim in shape))
A:jax.test_util.vals->numpy.where(zeros, 0, vals)
A:jax.test_util.base_rand->rand_default()
A:jax.test_util.dims->_dims_of_shape(shape)
A:jax.test_util.xs->list(xs)
A:jax.test_util.k->min(len(xs), FLAGS.num_generated_cases)
A:jax.test_util.msg->'Arguments x and y not equal to tolerance atol={}, rtol={}:\nx:\n{}\ny:\n{}\n'.format(atol, rtol, x, y)
A:jax.test_util.x->numpy.asarray(x)
A:jax.test_util.y->numpy.asarray(y)
A:jax.test_util.args->args_maker()
A:jax.test_util.python_ans->fun(*args)
A:jax.test_util.cfun->api.jit(wrapped_fun)
A:jax.test_util.monitored_ans->cfun(*args)
A:jax.test_util.compiled_ans->cfun(*args)
A:jax.test_util.lax_ans->lax_op(*args)
A:jax.test_util.numpy_ans->numpy_reference_op(*args)
jax.test_util.JaxTestCase(parameterized.TestCase)
jax.test_util.JaxTestCase._CheckAgainstNumpy(self,lax_op,numpy_reference_op,args_maker,check_dtypes=False,tol=1e-05)
jax.test_util.JaxTestCase._CompileAndCheck(self,fun,args_maker,check_dtypes,rtol=None,atol=None)
jax.test_util.JaxTestCase.assertAllClose(self,x,y,check_dtypes,atol=None,rtol=None)
jax.test_util.JaxTestCase.assertArraysAllClose(self,x,y,check_dtypes,atol=None,rtol=None)
jax.test_util.JaxTestCase.assertDtypesMatch(self,x,y)
jax.test_util._NumpyScalar(object)
jax.test_util._NumpyScalar.__len__(self)
jax.test_util._cast_to_shape(value,shape,dtype)
jax.test_util._dims_of_shape(shape)
jax.test_util._rand_dtype(rand,shape,dtype,scale=1.0,post=lambdax:x)
jax.test_util.cases_from_gens(*gens)
jax.test_util.cases_from_list(xs)
jax.test_util.check_close(xs,ys,atol=ATOL,rtol=RTOL)
jax.test_util.check_eq(xs,ys)
jax.test_util.check_jvp(f,f_jvp,args,atol=ATOL,rtol=RTOL,eps=EPS)
jax.test_util.check_raises(thunk,err_type,msg)
jax.test_util.check_raises_regexp(thunk,err_type,pattern)
jax.test_util.check_vjp(f,f_vjp,args,atol=ATOL,rtol=RTOL,eps=EPS)
jax.test_util.format_shape_dtype_string(shape,dtype)
jax.test_util.format_test_name_suffix(opname,shapes,dtypes)
jax.test_util.inner_prod(xs,ys)
jax.test_util.numerical_jvp(f,primals,tangents,eps=EPS)
jax.test_util.numpy_close(a,b,atol=ATOL,rtol=RTOL,equal_nan=False)
jax.test_util.numpy_eq(x,y)
jax.test_util.rand_bool()
jax.test_util.rand_default()
jax.test_util.rand_like(rng,x)
jax.test_util.rand_nonzero()
jax.test_util.rand_not_small()
jax.test_util.rand_positive()
jax.test_util.rand_small()
jax.test_util.rand_small_positive()
jax.test_util.rand_some_equal()
jax.test_util.rand_some_inf()
jax.test_util.rand_some_zero()
jax.test_util.scalar_mul(xs,a)
jax.test_util.skip_on_devices(*disabled_devices)
jax.test_util.skip_on_flag(flag_name,skip_value)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/core.py----------------------------------------
A:jax.core.JaxprEqn->namedtuple('JaxprEqn', ['invars', 'outvars', 'primitive', 'bound_subjaxprs', 'destructure', 'params'])
A:jax.core.top_trace->find_top_trace(args)
A:jax.core.tracers->map(top_trace.full_raise, args)
A:jax.core.out_tracer->find_top_trace(args).process_primitive(self, tracers, kwargs)
A:jax.core.in_vals->map(read, eqn.invars)
A:jax.core.subfuns->map(lu.wrap_init, subfuns)
A:jax.core.ans->full_lower(top_trace.process_call(primitive, f, tracers, kwargs))
A:jax.core.attr->getattr(self.aval, name)
A:jax.core.t->ref(sublevel)
A:jax.core.aval_property->namedtuple('aval_property', ['fget'])
A:jax.core.aval_method->namedtuple('aval_method', ['fun'])
A:jax.core.trace_stack->TraceStack()
A:jax.core.level->TraceStack().next_level(bottom)
A:jax.core.master->MasterTrace(level, trace_type)
A:jax.core.sublevel->cur_sublevel()
A:jax.core.bot->Bot()
A:jax.core.unit->JaxTuple(())
A:jax.core.identity_p->Primitive('id')
A:jax.core.pack_p->Primitive('pack')
A:jax.core.x->full_lower(todos.pop()(x))
A:jax.core.trace->type(t)(t.master, sublevel)
A:jax.core.(ans, cur_todo)->full_lower(top_trace.process_call(primitive, f, tracers, kwargs)).trace.post_process_call(primitive, ans)
A:jax.core.(f, env_trace_todo)->process_env_traces(f, primitive, level)
A:jax.core.call_p->Primitive('call')
A:jax.core.call->partial(call_bind, call_p)
A:jax.core.env->set()
A:jax.core.read->partial(read_env, env)
A:jax.core.write->partial(write_env, env)
A:jax.core.const_env->set()
A:jax.core.read_const->partial(read_env, const_env)
A:jax.core.write_const->partial(write_env, const_env)
A:jax.core.pp_subexpr->pp('')
jax.core.AbstractTuple(AbstractValue,tuple)
jax.core.AbstractTuple.__repr__(self)
jax.core.AbstractTuple._iter(tracer)
jax.core.AbstractTuple.at_least_vspace(self)
jax.core.AbstractTuple.join(self,other)
jax.core.AbstractValue(object)
jax.core.AbstractValue.__repr__(self)
jax.core.AbstractValue.at_least_vspace(self)
jax.core.Bot(AbstractValue)
jax.core.JaxTuple(cls,xs)
jax.core.JaxTuple.__new__(cls,xs)
jax.core.JaxTuple.__repr__(self)
jax.core.Jaxpr(self,constvars,freevars,invars,outvar,eqns)
jax.core.Jaxpr.__init__(self,constvars,freevars,invars,outvar,eqns)
jax.core.Jaxpr.__repr__(self)
jax.core.Jaxpr.__str__(self)
jax.core.MasterTrace(self,level,trace_type)
jax.core.MasterTrace.__eq__(self,other)
jax.core.MasterTrace.__hash__(self)
jax.core.MasterTrace.__init__(self,level,trace_type)
jax.core.MasterTrace.__repr__(self)
jax.core.Primitive(self,name)
jax.core.Primitive.__init__(self,name)
jax.core.Primitive.__repr__(self)
jax.core.Primitive.bind(self,*args,**kwargs)
jax.core.Primitive.def_custom_bind(self,bind)
jax.core.Primitive.def_impl(self,impl)
jax.core.Primitive.impl(self,*args,**kwargs)
jax.core.Sublevel(int)
jax.core.Trace(self,master,sublevel)
jax.core.Trace.__init__(self,master,sublevel)
jax.core.Trace.__repr__(self)
jax.core.Trace.full_raise(self,val)
jax.core.Trace.lift(self,tracer)
jax.core.Trace.pure(self,val)
jax.core.Trace.sublift(self,tracer)
jax.core.TraceStack(self)
jax.core.TraceStack.__init__(self)
jax.core.TraceStack.__repr__(self)
jax.core.TraceStack.next_level(self,bottom)
jax.core.TraceStack.pop(self,bottom)
jax.core.TraceStack.push(self,val,bottom)
jax.core.Tracer(self,trace)
jax.core.Tracer.__abs__(self)
jax.core.Tracer.__add__(self,other)
jax.core.Tracer.__and__(self,other)
jax.core.Tracer.__array__(self)
jax.core.Tracer.__bool__(self)
jax.core.Tracer.__complex__(self)
jax.core.Tracer.__div__(self,other)
jax.core.Tracer.__divmod__(self,other)
jax.core.Tracer.__eq__(self,other)
jax.core.Tracer.__float__(self)
jax.core.Tracer.__floordiv__(self,other)
jax.core.Tracer.__ge__(self,other)
jax.core.Tracer.__getattr__(self,name)
jax.core.Tracer.__getitem__(self,idx)
jax.core.Tracer.__gt__(self,other)
jax.core.Tracer.__hex__(self)
jax.core.Tracer.__init__(self,trace)
jax.core.Tracer.__int__(self)
jax.core.Tracer.__invert__(self,other)
jax.core.Tracer.__iter__(self)
jax.core.Tracer.__le__(self,other)
jax.core.Tracer.__len__(self)
jax.core.Tracer.__long__(self)
jax.core.Tracer.__lshift__(self,other)
jax.core.Tracer.__lt__(self,other)
jax.core.Tracer.__matmul__(self,other)
jax.core.Tracer.__mod__(self,other)
jax.core.Tracer.__mul__(self,other)
jax.core.Tracer.__ne__(self,other)
jax.core.Tracer.__neg__(self)
jax.core.Tracer.__nonzero__(self)
jax.core.Tracer.__oct__(self)
jax.core.Tracer.__or__(self,other)
jax.core.Tracer.__pow__(self,other)
jax.core.Tracer.__radd__(self,other)
jax.core.Tracer.__rand__(self,other)
jax.core.Tracer.__rdiv__(self,other)
jax.core.Tracer.__rdivmod__(self,other)
jax.core.Tracer.__repr__(self)
jax.core.Tracer.__rfloordiv__(self,other)
jax.core.Tracer.__rmatmul__(self,other)
jax.core.Tracer.__rmod__(self,other)
jax.core.Tracer.__rmul__(self,other)
jax.core.Tracer.__ror__(self,other)
jax.core.Tracer.__rpow__(self,other)
jax.core.Tracer.__rshift__(self,other)
jax.core.Tracer.__rsub__(self,other)
jax.core.Tracer.__rtruediv__(self,other)
jax.core.Tracer.__rxor__(self,other)
jax.core.Tracer.__sub__(self,other)
jax.core.Tracer.__truediv__(self,other)
jax.core.Tracer.__xor__(self,other)
jax.core.Tracer.aval(self)
jax.core.apply_todos(todos,x)
jax.core.call_bind(primitive,f,*args,**kwargs)
jax.core.call_impl(f,*args,**kwargs)
jax.core.check_jaxpr(jaxpr)
jax.core.concrete_aval(x)
jax.core.concrete_jaxtuple(xs)
jax.core.cur_sublevel()
jax.core.eval_jaxpr(jaxpr,consts,freevar_vals,*args)
jax.core.find_top_trace(xs)
jax.core.full_lower(val)
jax.core.get_aval(x)
jax.core.lattice_join(x,y)
jax.core.new_master(trace_type,bottom=False)
jax.core.new_sublevel()
jax.core.pack(args)
jax.core.pack_p_bind(*args)
jax.core.pp_jaxpr(jaxpr)
jax.core.process_env_traces(primitive,level,*args)
jax.core.tuple_to_jaxtuple(x)
jax.core.valid_jaxtype(x)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/ad_util.py----------------------------------------
A:jax.ad_util.add_jaxvals_p->Primitive('add_any')
A:jax.ad_util.zeros_like_p->Primitive('zeros_like')
A:jax.ad_util.zero->Zero()
jax.ad_util.Zero(object)
jax.ad_util.Zero.__repr__(self)
jax.ad_util.add_abstract(xs,ys)
jax.ad_util.add_impl(xs,ys)
jax.ad_util.add_jaxtuples(xs,ys)
jax.ad_util.add_jaxvals(x,y)
jax.ad_util.zeros_like_impl(example)
jax.ad_util.zeros_like_impl_jaxtuple(xs)
jax.ad_util.zeros_like_jaxval(val)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/config.py----------------------------------------
A:jax.config.self.FLAGS->NameSpace(self.read)
A:jax.config.config->Config()
jax.config.Config(self)
jax.config.Config.DEFINE_bool(self,name,default,*args,**kwargs)
jax.config.Config.DEFINE_enum(self,name,default,*args,**kwargs)
jax.config.Config.DEFINE_integer(self,name,default,*args,**kwargs)
jax.config.Config.DEFINE_string(self,name,default,*args,**kwargs)
jax.config.Config.__init__(self)
jax.config.Config.add_option(self,name,default,opt_type,meta_args,meta_kwargs)
jax.config.Config.check_exists(self,name)
jax.config.Config.complete_absl_config(self,absl_flags)
jax.config.Config.config_with_absl(self)
jax.config.Config.parse_flags_with_absl(self)
jax.config.Config.read(self,name)
jax.config.Config.update(self,name,val)
jax.config.NameSpace(self,getter)
jax.config.NameSpace.__getattr__(self,name)
jax.config.NameSpace.__init__(self,getter)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/api.py----------------------------------------
A:jax.api.f->lu.wrap_init(fun, kwargs)
A:jax.api.(f, dyn_args)->argnums_partial(f, dyn_argnums, args)
A:jax.api.(args_flat, in_trees)->unzip2(map(tree_to_jaxtuples, dyn_args))
A:jax.api.(flat_fun, out_tree)->flatten_fun(fun, in_trees)
A:jax.api.out_flat->interpreters.batching.batch(flat_fun, in_flat, in_axes, out_axes)
A:jax.api.(f_partial, dyn_args)->argnums_partial(f, argnums, args)
A:jax.api.(ans, vjp_py)->vjp(f_partial, *dyn_args)
A:jax.api.g->vjp_py(onp.ones((), onp.result_type(ans)))
A:jax.api.fun->lu.wrap_init(traceable)
A:jax.api.pushfwd->partial(jvp, fun, (x,))
A:jax.api.(y, jac_flat)->vmap(pushfwd, std_basis, out_axes=(None, 0))
A:jax.api.(y, pullback)->vjp(fun, x)
A:jax.api.std_basis->numpy.eye(onp.size(y)).reshape((-1,) + onp.shape(y))
A:jax.api.(jac_flat,)->vmap(pullback, std_basis, out_axes=onp.ndim(y))
A:jax.api.in_axes->kwargs.pop('in_axes', 0)
A:jax.api.out_axes->kwargs.pop('out_axes', 0)
A:jax.api.(in_flat, in_trees)->unzip2(map(tree_to_jaxtuples, args))
A:jax.api.(primal_jtuple, tree_def)->tree_to_jaxtuples(primal)
A:jax.api.(tangent_jtuple, tree_def_2)->tree_to_jaxtuples(tangent)
A:jax.api.(ps_flat, ts_flat, in_trees)->unzip3(map(flatten_arg, primals, tangents))
A:jax.api.(out_primal, out_tangent)->interpreters.ad.jvp(flat_fun).call_wrapped(ps_flat, ts_flat)
A:jax.api.(primals_flat, in_trees)->unzip2(map(tree_to_jaxtuples, primals))
A:jax.api.(out_primal, out_pval, jaxpr, consts)->interpreters.ad.linearize(flat_fun, *primals_flat)
A:jax.api.out_tree->out_tree()
A:jax.api.out_primal_py->build_tree(out_tree, out_primal)
A:jax.api.lifted_jvp->partial(lift_linearized, jaxpr, consts, (in_trees, out_tree), out_pval)
A:jax.api.primals->pack(args)
A:jax.api.tangents->pack(args)
A:jax.api.(_, ans)->eval_jaxpr(jaxpr, consts, (), primals, tangents)
A:jax.api.(out_primal, out_vjp)->interpreters.ad.vjp(flat_fun, primals_flat)
A:jax.api.ct_out_tree->PyTreeDef(node_types[tuple], None, in_trees)
A:jax.api.vjp_py->partial(unflatten_fun, out_vjp_packed, (ct_in_trees, ct_out_tree))
A:jax.api.(pvals, in_trees)->unzip2(map(tree_to_pval_tuples, py_pvals))
A:jax.api.(jaxpr, out_pval, consts)->interpreters.partial_eval.trace_to_jaxpr(flat_fun, pvals, **kwargs)
A:jax.api.ans->fun(*args)
A:jax.api.device_put->jit(lambda x: x)
A:jax.api.device_get->partial(tree_map, device_get_array)
A:jax.api.py_args->map(build_tree, in_trees, args)
A:jax.api.(args, in_trees)->unzip2(map(tree_to_jaxtuples, py_args))
A:jax.api.tree_to_pval_tuples->partial(process_pytree, pe.pack_pvals)
A:jax.api.tree_to_jaxtuples->partial(process_pytree, pack)
A:jax.api.dyn_argnums->tuple(dyn_argnums)
A:jax.api.fixed_args->tuple([None if i in dyn_argnums else WrapHashably(arg) for (i, arg) in enumerate(args)])
A:jax.api.aval->core.get_aval(x)
jax.api.argnums_partial(f,dyn_argnums,args)
jax.api.argnums_partial_(dyn_argnums,fixed_args,*dyn_args)
jax.api.check_args(args)
jax.api.check_scalar(x)
jax.api.flatten_fun(in_trees,*args,**kwargs)
jax.api.grad(fun,argnums=0)
jax.api.hessian(fun)
jax.api.jacfwd(fun,x)
jax.api.jacrev(fun,x)
jax.api.jit(fun,static_argnums=())
jax.api.jvp(fun,primals,tangents)
jax.api.lift_jaxpr(jaxpr,consts,io_tree,pvals,py_args)
jax.api.lift_linearized(jaxpr,consts,io_tree,out_pval,py_args)
jax.api.linearize(traceable,*primals)
jax.api.trace_to_jaxpr(traceable,py_pvals,**kwargs)
jax.api.unflatten_fun(fun,io_tree,*py_args)
jax.api.vjp(fun,*primals)
jax.api.vmap(fun,*args,**kwargs)
jax.argnums_partial(f,dyn_argnums,args)
jax.argnums_partial_(dyn_argnums,fixed_args,*dyn_args)
jax.check_args(args)
jax.check_scalar(x)
jax.flatten_fun(in_trees,*args,**kwargs)
jax.grad(fun,argnums=0)
jax.hessian(fun)
jax.jacfwd(fun,x)
jax.jacrev(fun,x)
jax.jit(fun,static_argnums=())
jax.jvp(fun,primals,tangents)
jax.lift_jaxpr(jaxpr,consts,io_tree,pvals,py_args)
jax.lift_linearized(jaxpr,consts,io_tree,out_pval,py_args)
jax.linearize(traceable,*primals)
jax.trace_to_jaxpr(traceable,py_pvals,**kwargs)
jax.unflatten_fun(fun,io_tree,*py_args)
jax.vjp(fun,*primals)
jax.vmap(fun,*args,**kwargs)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/linear_util.py----------------------------------------
A:jax.linear_util.store->Store()
A:jax.linear_util.(ans, aux)->f(*init_args + rest)
A:jax.linear_util.gen->gen(*gen_args + tuple(args))
A:jax.linear_util.args->next(gen)
A:jax.linear_util.ans->call(f, *args)
A:jax.linear_util.(gen, out_store)->stack.pop()
A:jax.linear_util.transformation_stack->map(transform_to_str, enumerate(self.transforms))
A:jax.linear_util.out_store->Store()
jax.linear_util.Store(object)
jax.linear_util.Store.__nonzero__(self)
jax.linear_util.Store.store(self,val)
jax.linear_util.Store.val(self)
jax.linear_util.StoreException(Exception)
jax.linear_util.WrappedFun(self,f,transforms,kwargs)
jax.linear_util.WrappedFun.__eq__(self,other)
jax.linear_util.WrappedFun.__hash__(self)
jax.linear_util.WrappedFun.__init__(self,f,transforms,kwargs)
jax.linear_util.WrappedFun.__repr__(self)
jax.linear_util.WrappedFun.call_wrapped(self,*args)
jax.linear_util.WrappedFun.hashable_payload(self)
jax.linear_util.WrappedFun.populate_stores(self,other)
jax.linear_util.WrappedFun.wrap(self,*transformation)
jax.linear_util.fun_name(f)
jax.linear_util.memoize(call)
jax.linear_util.staged(f,*init_args)
jax.linear_util.thunk(f)
jax.linear_util.transformation(gen,fun,*transformation_args)
jax.linear_util.transformation_with_aux(gen,fun,*transformation_args)
jax.linear_util.wrap_init(f,kwargs={})


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/random.py----------------------------------------
A:jax.random.k1->convert(lax.shift_right_logical(seed, 32))
A:jax.random.k2->convert(lax.bitwise_and(seed, 4294967295))
A:jax.random.new->cls.__new__(cls)
A:jax.random.new.keypair->tuple(keypair)
A:jax.random.nbits->numpy.array(onp.iinfo(dtype).bits, dtype)
A:jax.random.d->lax.convert_element_type(d, x.dtype)
A:jax.random.rotate_left->_make_rotate_left(lax._dtype(count))
A:jax.random.v[1]->rotate_left(v[1], rot)
A:jax.random.x->apply_round(x, r)
A:jax.random.out->np.concatenate(x)
A:jax.random.counts->numpy.arange(num * 2, dtype=onp.uint32)
A:jax.random.bits->_random_bits(key, nbits, shape)
A:jax.random.dtype->jax.lib.xla_bridge.canonicalize_dtype(dtype)
A:jax.random.minval->lax.convert_element_type(minval, dtype)
A:jax.random.maxval->lax.convert_element_type(maxval, dtype)
A:jax.random.finfo->numpy.finfo(dtype)
A:jax.random.float_bits->lax.bitwise_or(lax.shift_right_logical(bits, onp.array(nbits - nmant, lax._dtype(bits))), onp.array(1.0, dtype).view(onp.uint32 if nbits == 32 else onp.uint64))
A:jax.random.(k1, k2)->split(key)
A:jax.random.span->lax.convert_element_type(maxval - minval, unsigned_dtype)
A:jax.random.multiplier->lax.rem(lax.mul(multiplier, multiplier), span)
A:jax.random.random_offset->lax.rem(random_offset, span)
A:jax.random.num_rounds->int(onp.ceil(exponent * onp.log(len(x)) / 32))
A:jax.random.(key, subkey)->split(key)
A:jax.random.sort_keys->_random_bits(subkey, 32, x.shape)
A:jax.random.(_, x)->lax.sort_key_val(sort_keys, x, axis)
A:jax.random.lo->numpy.nextafter(onp.array(-1.0, dtype), 0.0, dtype=dtype)
A:jax.random.hi->numpy.array(1.0, dtype)
A:jax.random.u->uniform(key, shape, dtype, lo, hi)
A:jax.random.mean->lax.broadcast(mean, shape)
jax.random.PRNGKey(self,seed)
jax.random.PRNGKey.__init__(self,seed)
jax.random.PRNGKey.from_keypair(cls,keypair)
jax.random._bit_stats(bits)
jax.random._make_rotate_left(dtype)
jax.random._random_bits(key,bit_width,shape)
jax.random.bernoulli(key,mean=onp.float32(0.5),shape=())
jax.random.normal(key,shape,dtype=onp.float32)
jax.random.randint(key,shape,minval,maxval,dtype=onp.int32)
jax.random.shuffle(key,x,axis=0)
jax.random.split(key,num=2)
jax.random.threefry_2x32(keypair,count)
jax.random.uniform(key,shape,dtype=onp.float32,minval=0.0,maxval=1.0)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/tree_util.py----------------------------------------
A:jax.tree_util.node_type->node_types.get(type(tree))
A:jax.tree_util.(children, node_spec)->node_types.get(type(tree)).to_iterable(tree)
A:jax.tree_util.tree_type->type(tree)
A:jax.tree_util.(other_children, other_node_spec)->node_types.get(type(tree)).to_iterable(other_tree)
A:jax.tree_util.(flat, _)->tree_flatten(tree)
A:jax.tree_util.(proc_children, child_specs)->unzip2([walk_pytree(f_node, f_leaf, child) for child in children])
A:jax.tree_util.tree_def->PyTreeDef(node_type, node_spec, child_specs)
A:jax.tree_util.children->map(partial(tree_unflatten, xs), treedef.children)
A:jax.tree_util.tree_flatten->partial(walk_pytree, concatenate, lambda x: [x])
A:jax.tree_util.xs->iter(xs)
A:jax.tree_util.(spec, _)->process_pytree(tree, lambda _: None)
A:jax.tree_util.data_repr->'[{}]'.format(self.node_data)
A:jax.tree_util.leaf->PyLeaf()
A:jax.tree_util.keys->tuple(sorted(xs.keys()))
A:jax.tree_util.node_types[py_type]->NodeType(str(py_type), to_iterable, from_iterable)
jax.tree_util.NodeType(self,name,to_iterable,from_iterable)
jax.tree_util.NodeType.__init__(self,name,to_iterable,from_iterable)
jax.tree_util.PyLeaf(object)
jax.tree_util.PyLeaf.__repr__(self)
jax.tree_util.PyTreeDef(self,node_type,node_data,children)
jax.tree_util.PyTreeDef.__eq__(self,other)
jax.tree_util.PyTreeDef.__hash__(self)
jax.tree_util.PyTreeDef.__init__(self,node_type,node_data,children)
jax.tree_util.PyTreeDef.__ne__(self,other)
jax.tree_util.PyTreeDef.__repr__(self)
jax.tree_util.build_tree(treedef,xs)
jax.tree_util.dict_to_iterable(xs)
jax.tree_util.process_pytree(process_node,tree)
jax.tree_util.register_pytree_node(py_type,to_iterable,from_iterable)
jax.tree_util.tree_all(tree)
jax.tree_util.tree_map(f,tree)
jax.tree_util.tree_multimap(f,tree,*rest)
jax.tree_util.tree_reduce(f,tree)
jax.tree_util.tree_structure(tree)
jax.tree_util.tree_unflatten(xs,treedef)
jax.tree_util.walk_pytree(f_node,f_leaf,tree)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/api_util.py----------------------------------------
A:jax.api_util.py_args->map(build_tree, in_trees, args)
A:jax.api_util.(args, in_trees)->unzip2(map(tree_to_jaxtuples, py_args))
A:jax.api_util.ans->fun(*args)
A:jax.api_util.tree_to_jaxtuples->partial(process_pytree, pack)
jax.api_util.flatten_fun(in_trees,*args,**kwargs)
jax.api_util.unflatten_fun(fun,io_tree,*py_args)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/pprint_util.py----------------------------------------
A:jax.pprint_util.indented_block->rhs.indent(indent + len(s))
A:jax.pprint_util.kv_pairs->vcat([pp('{}='.format(k)) >> pp(v) for (k, v) in kv_pairs])
jax.pprint_util.PrettyPrint(self,lines)
jax.pprint_util.PrettyPrint.__add__(self,rhs)
jax.pprint_util.PrettyPrint.__init__(self,lines)
jax.pprint_util.PrettyPrint.__rshift__(self,rhs)
jax.pprint_util.PrettyPrint.__str__(self)
jax.pprint_util.PrettyPrint.indent(self,indent)
jax.pprint_util.hcat(ps)
jax.pprint_util.pp(s)
jax.pprint_util.pp_kv_pairs(kv_pairs)
jax.pprint_util.print_list(xs)
jax.pprint_util.vcat(ps)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/scipy/special.py----------------------------------------
A:jax.scipy.special.gammaln->_wraps(osp_special.gammaln)(lax.lgamma)
A:jax.scipy.special.digamma->_wraps(osp_special.digamma)(lax.digamma)
A:jax.scipy.special.erf->_wraps(osp_special.erf)(lax.erf)
A:jax.scipy.special.erfc->_wraps(osp_special.erfc)(lax.erfc)
A:jax.scipy.special.erfinv->_wraps(osp_special.erfinv)(lax.erf_inv)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/scipy/misc.py----------------------------------------
A:jax.scipy.misc.dims->_reduction_dims(a, axis)
A:jax.scipy.misc.shape->lax.subvals(onp.shape(a), zip(dims, (1,) * len(dims)))
A:jax.scipy.misc.amax->lax.reduce(a, _constant_like(a, -onp.inf), lax.max, dims)
A:jax.scipy.misc.amax_singletons->dimadd(amax)
A:jax.scipy.misc.out->lax.add(lax.log(lax.reduce(lax.exp(lax.sub(a, amax_singletons)), _constant_like(a, 0), lax.add, dims)), amax)
jax.scipy.misc.logsumexp(a,axis=None,b=None,keepdims=False,return_sign=False)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/scipy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lib/xla_client.py----------------------------------------
A:jax.lib.xla_client.OpMetadata->collections.namedtuple('OpMetadata', _OP_METADATA_FIELDS)
A:jax.lib.xla_client.BackendSpec->collections.namedtuple('Backend', ('backend_type', 'target'))
A:jax.lib.xla_client.XLA_LOCAL_BACKEND->BackendSpec(BackendType.XLA_LOCAL, 'local')
A:jax.lib.xla_client.proto->hlo_pb2.HloModuleProto.FromString(serialized)
A:jax.lib.xla_client.attr->getattr(pyobj, field)
A:jax.lib.xla_client.filename->os.path.basename(full_filename)
A:jax.lib.xla_client.out_shape->numpy.ceil(np.true_divide(lhs_dims, window_strides)).astype(int)
A:jax.lib.xla_client.pyval->require_numpy_array_layout(pyval)
A:jax.lib.xla_client.cbuf->c_api.LocalShapedBuffer.FromLiteral(pyval, None)
A:jax.lib.xla_client.result->c_api.DestructureLocalShapedBufferTuple(self.c_buffer)
A:jax.lib.xla_client.size->c_api.DestructureLocalShapedBufferTuple(self.c_buffer).size()
A:jax.lib.xla_client.destructured->tuple((LocalBuffer(result.Release(i), backend=self._backend) for i in xrange(size)))
A:jax.lib.xla_client.dimensions->tuple(range(ndim))
A:jax.lib.xla_client.children->tuple((child.map_leaves(f) for child in self.tuple_shapes()))
A:jax.lib.xla_client.mapped->f(self)
A:jax.lib.xla_client.updated->Shape.array_shape(self.element_type(), self.dimensions(), minor_to_major)
A:jax.lib.xla_client.shapes->tuple((_wrap_shape(subshape_info) for subshape_info in dims))
A:jax.lib.xla_client.serialized->self.computation.GetSerializedProto()
A:jax.lib.xla_client.result_shape->result_shape.map_leaves(layout_fn).map_leaves(layout_fn)
A:jax.lib.xla_client.argument_shapes->list(argument_shapes)
A:jax.lib.xla_client.c->self.computation.Compile(argument_shapes, compile_options)
A:jax.lib.xla_client.arguments->tuple((LocalBuffer.from_pyval(arg, backend=self._backend) for arg in arguments))
A:jax.lib.xla_client.self._client->c_api.LocalComputationBuilder(name.encode('utf8'))
A:jax.lib.xla_client.self._parameter_numbering->itertools.count()
A:jax.lib.xla_client.value->require_numpy_array_layout(value)
A:jax.lib.xla_client.parameter_num->next(self._parameter_numbering)
A:jax.lib.xla_client.xla_shape->Shape.array_shape(self.GetShape(operand).element_type(), shape)
A:jax.lib.xla_client.padding_config->xla_data_pb2.PaddingConfig()
A:jax.lib.xla_client.ndim->len(self.GetShape(operand).dimensions())
A:jax.lib.xla_client.pads->_convert_padding_type_to_pad_values(padding, self.GetShape(lhs).dimensions()[2:], self.GetShape(rhs).dimensions()[2:], window_strides)
A:jax.lib.xla_client.start_indices->list(start_indices)
A:jax.lib.xla_client.shape->Shape.array_shape(self.GetShape(a).element_type(), dims)
A:jax.lib.xla_client.dimension_numbers->xla_data_pb2.ConvolutionDimensionNumbers()
A:jax.lib.xla_client.dimension_numbers.input_batch_dimension->lhs_spec.index('N')
A:jax.lib.xla_client.dimension_numbers.input_feature_dimension->lhs_spec.index('C')
A:jax.lib.xla_client.dimension_numbers.output_batch_dimension->out_spec.index('N')
A:jax.lib.xla_client.dimension_numbers.output_feature_dimension->out_spec.index('C')
A:jax.lib.xla_client.dimension_numbers.kernel_output_feature_dimension->rhs_spec.index('O')
A:jax.lib.xla_client.dimension_numbers.kernel_input_feature_dimension->rhs_spec.index('I')
A:jax.lib.xla_client.arg_list->list(args)
A:jax.lib.xla_client.forward->forward_to_local_builder_with_handles(getattr(c_api.LocalComputationBuilder, method_name), is_binop=True)
A:jax.lib.xla_client.platform_name->_maybe_encode_string(platform_name)
A:jax.lib.xla_client.dimension->xla_data_pb2.PaddingConfig().dimensions.add()
A:jax.lib.xla_client.dot_dims_proto->xla_data_pb2.DotDimensionNumbers()
jax.lib.xla_client.BackendType(enum.Enum)
jax.lib.xla_client.CompileOptions(self)
jax.lib.xla_client.CompileOptions.__init__(self)
jax.lib.xla_client.ComputationBuilder(self,name)
jax.lib.xla_client.ComputationBuilder.BitcastConvertType(self,operand,new_element_type)
jax.lib.xla_client.ComputationBuilder.Broadcast(self,operand,sizes)
jax.lib.xla_client.ComputationBuilder.BroadcastInDim(self,operand,shape,broadcast_dimensions)
jax.lib.xla_client.ComputationBuilder.Build(self,root=None,backend=XLA_LOCAL_BACKEND)
jax.lib.xla_client.ComputationBuilder.BuildConstantSubGraph(self,operand)
jax.lib.xla_client.ComputationBuilder.Call(self,computation_to_apply,operands)
jax.lib.xla_client.ComputationBuilder.Clamp(self,min,operand,max)
jax.lib.xla_client.ComputationBuilder.ClearOpMetadata(self)
jax.lib.xla_client.ComputationBuilder.Collapse(self,operand,dimensions)
jax.lib.xla_client.ComputationBuilder.Concatenate(self,operands,dimension)
jax.lib.xla_client.ComputationBuilder.Conditional(self,pred,true_operand,true_computation,false_operand,false_computation)
jax.lib.xla_client.ComputationBuilder.Constant(self,value)
jax.lib.xla_client.ComputationBuilder.ConstantF32Scalar(self,value)
jax.lib.xla_client.ComputationBuilder.ConstantF64Scalar(self,value)
jax.lib.xla_client.ComputationBuilder.ConstantPredScalar(self,value)
jax.lib.xla_client.ComputationBuilder.ConstantS32Scalar(self,value)
jax.lib.xla_client.ComputationBuilder.ConstantS64Scalar(self,value)
jax.lib.xla_client.ComputationBuilder.Conv(self,lhs,rhs,window_strides,padding,feature_group_count=1)
jax.lib.xla_client.ComputationBuilder.ConvGeneralDilated(self,lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers=None,feature_group_count=1)
jax.lib.xla_client.ComputationBuilder.ConvWithGeneralPadding(self,lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,feature_group_count=1)
jax.lib.xla_client.ComputationBuilder.ConvertElementType(self,operand,new_element_type)
jax.lib.xla_client.ComputationBuilder.CrossReplicaSum(self,operand)
jax.lib.xla_client.ComputationBuilder.Dot(self,lhs,rhs)
jax.lib.xla_client.ComputationBuilder.DotGeneral(self,lhs,rhs,dimension_numbers)
jax.lib.xla_client.ComputationBuilder.DynamicSlice(self,operand,start_indices,slice_sizes)
jax.lib.xla_client.ComputationBuilder.DynamicUpdateSlice(self,operand,update,start_indices)
jax.lib.xla_client.ComputationBuilder.GetComputationStats(self)
jax.lib.xla_client.ComputationBuilder.GetReturnValueShape(self)
jax.lib.xla_client.ComputationBuilder.GetShape(self,operand)
jax.lib.xla_client.ComputationBuilder.GetTupleElement(self,tup,index)
jax.lib.xla_client.ComputationBuilder.Infeed(self,shape)
jax.lib.xla_client.ComputationBuilder.IsConstant(self,operand)
jax.lib.xla_client.ComputationBuilder.Map(self,operands,computation_to_apply,dimensions)
jax.lib.xla_client.ComputationBuilder.Outfeed(self,operand)
jax.lib.xla_client.ComputationBuilder.Pad(self,operand,padding_value,padding_config)
jax.lib.xla_client.ComputationBuilder.ParameterFromNumpy(self,value,name=None,parameter_num=None)
jax.lib.xla_client.ComputationBuilder.ParameterWithShape(self,shape,name=None,parameter_num=None)
jax.lib.xla_client.ComputationBuilder.Reduce(self,operand,init_value,computation_to_apply,dimensions)
jax.lib.xla_client.ComputationBuilder.ReduceWindow(self,operand,init_value,computation_to_apply,window_dimensions,window_strides,padding)
jax.lib.xla_client.ComputationBuilder.ReduceWindowWithGeneralPadding(self,operand,init_value,computation_to_apply,window_dimensions,window_strides,base_dilations,window_dilations,padding)
jax.lib.xla_client.ComputationBuilder.Reshape(self,operand,dimensions,new_sizes)
jax.lib.xla_client.ComputationBuilder.Rev(self,operand,dimensions)
jax.lib.xla_client.ComputationBuilder.RngNormal(self,mu,sigma,dims)
jax.lib.xla_client.ComputationBuilder.RngUniform(self,a,b,dims)
jax.lib.xla_client.ComputationBuilder.Select(self,pred,on_true,on_false)
jax.lib.xla_client.ComputationBuilder.SelectAndScatter(self,operand,select,window_dimensions,window_strides,padding,source,init_value,scatter)
jax.lib.xla_client.ComputationBuilder.SetOpMetadata(self,op_metadata)
jax.lib.xla_client.ComputationBuilder.Slice(self,operand,start_indices,limit_indices,strides=None)
jax.lib.xla_client.ComputationBuilder.SliceInDim(self,operand,start_index,limit_index,stride,dimno)
jax.lib.xla_client.ComputationBuilder.Sort(self,operand,dimension=-1)
jax.lib.xla_client.ComputationBuilder.SortKeyVal(self,keys,values,dimension=-1)
jax.lib.xla_client.ComputationBuilder.Trans(self,operand)
jax.lib.xla_client.ComputationBuilder.Transpose(self,operand,permutation)
jax.lib.xla_client.ComputationBuilder.Tuple(self,*ops)
jax.lib.xla_client.ComputationBuilder.While(self,cond,body,init)
jax.lib.xla_client.ComputationBuilder._GetConvDimensionNumbers(self,num_spatial_dims)
jax.lib.xla_client.ComputationBuilder.__init__(self,name)
jax.lib.xla_client.CurrentSourceInfoMetadata(op_type=None,op_name=None,skip_frames=1)
jax.lib.xla_client.GetDotDimensionsFromLists(dimension_numbers)
jax.lib.xla_client.GetPaddingConfigFromTriples(triples)
jax.lib.xla_client.LocalBuffer(self,c_buffer,backend)
jax.lib.xla_client.LocalBuffer.__del__(self)
jax.lib.xla_client.LocalBuffer.__init__(self,c_buffer,backend)
jax.lib.xla_client.LocalBuffer.delete(self)
jax.lib.xla_client.LocalBuffer.destructure(self)
jax.lib.xla_client.LocalBuffer.from_pyval(pyval,backend=XLA_LOCAL_BACKEND)
jax.lib.xla_client.LocalBuffer.is_deleted(self)
jax.lib.xla_client.LocalBuffer.shape(self)
jax.lib.xla_client.LocalBuffer.to_py(self)
jax.lib.xla_client.LocalComputation(self,c_computation,is_compiled,backend=XLA_LOCAL_BACKEND)
jax.lib.xla_client.LocalComputation.Compile(self,argument_shapes=(),compile_options=None,layout_fn=None)
jax.lib.xla_client.LocalComputation.CompileWithExampleArguments(self,arguments=(),compile_options=None,layout_fn=None)
jax.lib.xla_client.LocalComputation.Execute(self,arguments=())
jax.lib.xla_client.LocalComputation.ExecuteWithPythonValues(self,arguments=())
jax.lib.xla_client.LocalComputation.GetProto(self)
jax.lib.xla_client.LocalComputation.__del__(self)
jax.lib.xla_client.LocalComputation.__init__(self,c_computation,is_compiled,backend=XLA_LOCAL_BACKEND)
jax.lib.xla_client.LocalComputation.computation(self)
jax.lib.xla_client.OpMetadataToProto(pyobj)
jax.lib.xla_client.PaddingType(enum.Enum)
jax.lib.xla_client.Shape(self,dimensions,dtype,minor_to_major=None)
jax.lib.xla_client.Shape.__eq__(self,other)
jax.lib.xla_client.Shape.__hash__(self)
jax.lib.xla_client.Shape.__init__(self,dimensions,dtype,minor_to_major=None)
jax.lib.xla_client.Shape.__ne__(self,other)
jax.lib.xla_client.Shape.__repr__(self)
jax.lib.xla_client.Shape._check_minor_to_major(self)
jax.lib.xla_client.Shape.array_shape(element_type,dimensions,minor_to_major=None)
jax.lib.xla_client.Shape.dimensions(self)
jax.lib.xla_client.Shape.element_type(self)
jax.lib.xla_client.Shape.from_pyval(pyval)
jax.lib.xla_client.Shape.is_array(self)
jax.lib.xla_client.Shape.is_tuple(self)
jax.lib.xla_client.Shape.map_leaves(self,f)
jax.lib.xla_client.Shape.minor_to_major(self)
jax.lib.xla_client.Shape.numpy_dtype(self)
jax.lib.xla_client.Shape.rank(self)
jax.lib.xla_client.Shape.tuple_shape(tuple_shapes)
jax.lib.xla_client.Shape.tuple_shapes(self)
jax.lib.xla_client.Shape.update_minor_to_major(self,minor_to_major)
jax.lib.xla_client.Shape.xla_element_type(self)
jax.lib.xla_client._convert_padding_type_to_pad_values(padding_type,lhs_dims,rhs_dims,window_strides)
jax.lib.xla_client._forward_methods_to_local_builder()
jax.lib.xla_client._maybe_encode_string(s)
jax.lib.xla_client._wrap_shape(shape_info)
jax.lib.xla_client.dtype_to_etype(dtype)
jax.lib.xla_client.get_replica_count()
jax.lib.xla_client.initialize_platform_name(platform_name)
jax.lib.xla_client.initialize_replica_count(replica_count)
jax.lib.xla_client.require_numpy_array_layout(value)
jax.lib.xla_client.transfer_from_outfeed(shape,replica_number=None)
jax.lib.xla_client.transfer_to_infeed(value,replica_number=None)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lib/pywrap_xla.py----------------------------------------
A:jax.lib.pywrap_xla.(fp, pathname, description)->imp.find_module('_pywrap_xla', [dirname(__file__)])
A:jax.lib.pywrap_xla._mod->imp.load_module('_pywrap_xla', fp, pathname, description)
A:jax.lib.pywrap_xla._pywrap_xla->swig_import_helper()
A:jax.lib.pywrap_xla.method->class_type.__swig_getmethods__.get(name, None)
A:jax.lib.pywrap_xla.FromLiteral->staticmethod(_pywrap_xla.XrtAllocation_FromLiteral)
A:jax.lib.pywrap_xla.this->swig_import_helper().new_LocalComputationBuilder(computation_name)
jax.lib.pywrap_xla.CompiledLocalComputation(self,*args,**kwargs)
jax.lib.pywrap_xla.CompiledLocalComputation.Execute(self,argument_handles)
jax.lib.pywrap_xla.CompiledLocalComputation.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.CompiledXrtComputation(self,*args,**kwargs)
jax.lib.pywrap_xla.CompiledXrtComputation.Execute(self,argument_handles)
jax.lib.pywrap_xla.CompiledXrtComputation.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.DeleteCompiledLocalComputation(computation)
jax.lib.pywrap_xla.DeleteCompiledXrtComputation(computation)
jax.lib.pywrap_xla.DeleteLocalComputation(computation)
jax.lib.pywrap_xla.DeleteLocalShapedBuffer(local_shaped_buffer)
jax.lib.pywrap_xla.DeleteXrtAllocation(allocation)
jax.lib.pywrap_xla.DestructureLocalShapedBufferTuple(local_shaped_buffer)
jax.lib.pywrap_xla.DestructureXrtAllocationTuple(allocation,session_target)
jax.lib.pywrap_xla.GetReplicaCount()
jax.lib.pywrap_xla.InitializePlatformName(platform_name)
jax.lib.pywrap_xla.InitializeReplicaCount(replica_count)
jax.lib.pywrap_xla.LocalComputation(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalComputation.Compile(self,argument_shapes,build_options)
jax.lib.pywrap_xla.LocalComputation.CompileForXrt(self,argument_shapes,session_target)
jax.lib.pywrap_xla.LocalComputation.GetReturnValueShape(self)
jax.lib.pywrap_xla.LocalComputation.GetSerializedProto(self)
jax.lib.pywrap_xla.LocalComputation.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalComputationBuilder(self,computation_name)
jax.lib.pywrap_xla.LocalComputationBuilder.Abs(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Acos(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Acosh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Add(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.And(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Asin(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Asinh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Atan(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Atan2(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Atanh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.BitcastConvertType(self,operand,new_element_type)
jax.lib.pywrap_xla.LocalComputationBuilder.Broadcast(self,operand,broadcast_sizes)
jax.lib.pywrap_xla.LocalComputationBuilder.BroadcastInDim(self,operand,shape,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Build(self)
jax.lib.pywrap_xla.LocalComputationBuilder.BuildWithRoot(self,root)
jax.lib.pywrap_xla.LocalComputationBuilder.Call(self,local_computation,operands)
jax.lib.pywrap_xla.LocalComputationBuilder.Ceil(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Clamp(self,lhs,rhs,ehs)
jax.lib.pywrap_xla.LocalComputationBuilder.ClearOpMetadata(self)
jax.lib.pywrap_xla.LocalComputationBuilder.Collapse(self,operand,dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Complex(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.ConcatInDim(self,operands,dimension)
jax.lib.pywrap_xla.LocalComputationBuilder.Conditional(self,predicate,true_operand,true_computation,false_operand,false_computation)
jax.lib.pywrap_xla.LocalComputationBuilder.Conj(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.ConstantLiteral(self,literal)
jax.lib.pywrap_xla.LocalComputationBuilder.ConvGeneralDilated(self,lhs,rhs,window_strides,padding,lhs_dilation,rhs_dilation,dimension_numbers,feature_group_count)
jax.lib.pywrap_xla.LocalComputationBuilder.ConvertElementType(self,operand,new_element_type)
jax.lib.pywrap_xla.LocalComputationBuilder.Cos(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Cosh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.CrossReplicaSum(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Digamma(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Div(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Dot(self,lhs,rhs)
jax.lib.pywrap_xla.LocalComputationBuilder.DotGeneral(self,lhs,rhs,dimension_numbers)
jax.lib.pywrap_xla.LocalComputationBuilder.DynamicSlice(self,operand,start_indices,slice_sizes)
jax.lib.pywrap_xla.LocalComputationBuilder.DynamicUpdateSlice(self,operand,update,start_indices)
jax.lib.pywrap_xla.LocalComputationBuilder.Eq(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Erf(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.ErfInv(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Erfc(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Exp(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Expm1(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Floor(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Ge(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.GetReturnValueShape(self)
jax.lib.pywrap_xla.LocalComputationBuilder.GetShape(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.GetTupleElement(self,tuple_data,index)
jax.lib.pywrap_xla.LocalComputationBuilder.Gt(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Imag(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Infeed(self,shape)
jax.lib.pywrap_xla.LocalComputationBuilder.IsConstant(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.IsFinite(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Le(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Lgamma(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Log(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Log1p(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Lt(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Map(self,operands,local_computation,dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Max(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Min(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Mul(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Ne(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Neg(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Not(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Or(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Outfeed(self,operand,shape,outfeed_config)
jax.lib.pywrap_xla.LocalComputationBuilder.Pad(self,operand,padding_value,padding_config)
jax.lib.pywrap_xla.LocalComputationBuilder.Parameter(self,parameter_number,shape,name)
jax.lib.pywrap_xla.LocalComputationBuilder.Pow(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Real(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Reciprocal(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Reduce(self,operand,init_value,local_computation,dimensions_to_reduce)
jax.lib.pywrap_xla.LocalComputationBuilder.ReduceWindowWithGeneralPadding(self,operand,init_value,local_computation,window_dimensions,window_strides,base_dilations,window_dilations,padding)
jax.lib.pywrap_xla.LocalComputationBuilder.Rem(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Reshape(self,operand,dimensions,new_sizes)
jax.lib.pywrap_xla.LocalComputationBuilder.Rev(self,operand,dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.RngNormal(self,mu,sigma,shape)
jax.lib.pywrap_xla.LocalComputationBuilder.RngUniform(self,a,b,shape)
jax.lib.pywrap_xla.LocalComputationBuilder.Round(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Rsqrt(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Select(self,lhs,rhs,ehs)
jax.lib.pywrap_xla.LocalComputationBuilder.SelectAndScatterWithGeneralPadding(self,operand,select,window_dimensions,window_strides,padding,source,init_value,scatter)
jax.lib.pywrap_xla.LocalComputationBuilder.SetOpMetadata(self,metadata)
jax.lib.pywrap_xla.LocalComputationBuilder.ShiftLeft(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.ShiftRightArithmetic(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.ShiftRightLogical(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Sign(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Sin(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Sinh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Slice(self,operand,start_indices,limit_indices,strides)
jax.lib.pywrap_xla.LocalComputationBuilder.SliceInDim(self,operand,start_index,limit_index,stride,dimno)
jax.lib.pywrap_xla.LocalComputationBuilder.Sort(self,operand,dimension)
jax.lib.pywrap_xla.LocalComputationBuilder.SortKeyVal(self,keys,values,dimension)
jax.lib.pywrap_xla.LocalComputationBuilder.Sqrt(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Square(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Sub(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.Tan(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Tanh(self,operand)
jax.lib.pywrap_xla.LocalComputationBuilder.Transpose(self,operand,permutation)
jax.lib.pywrap_xla.LocalComputationBuilder.Tuple(self,elements)
jax.lib.pywrap_xla.LocalComputationBuilder.While(self,condition,body,init)
jax.lib.pywrap_xla.LocalComputationBuilder.Xor(self,lhs,rhs,broadcast_dimensions)
jax.lib.pywrap_xla.LocalComputationBuilder.__init__(self,computation_name)
jax.lib.pywrap_xla.LocalOp(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalOp.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalShapedBuffer(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalShapedBuffer.ToLiteral(self)
jax.lib.pywrap_xla.LocalShapedBuffer.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalShapedBuffer.shape(self)
jax.lib.pywrap_xla.LocalShapedBufferTuple(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalShapedBufferTuple.Release(self,i)
jax.lib.pywrap_xla.LocalShapedBufferTuple.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.LocalShapedBufferTuple.size(self)
jax.lib.pywrap_xla.LocalShapedBuffer_FromLiteral(argument,shape_with_layout)
jax.lib.pywrap_xla.TransferFromOutfeedLocalReplica(shape,replica_number)
jax.lib.pywrap_xla.TransferToInfeedLocal(literal)
jax.lib.pywrap_xla.TransferToInfeedLocalReplica(literal,replica_number)
jax.lib.pywrap_xla.XrtAllocation(self,*args,**kwargs)
jax.lib.pywrap_xla.XrtAllocation.ToLiteral(self)
jax.lib.pywrap_xla.XrtAllocation.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.XrtAllocation.shape(self)
jax.lib.pywrap_xla.XrtAllocationTuple(self,*args,**kwargs)
jax.lib.pywrap_xla.XrtAllocationTuple.Release(self,i)
jax.lib.pywrap_xla.XrtAllocationTuple.__init__(self,*args,**kwargs)
jax.lib.pywrap_xla.XrtAllocationTuple.size(self)
jax.lib.pywrap_xla.XrtAllocation_FromLiteral(argument,session_target)
jax.lib.pywrap_xla._swig_getattr(self,class_type,name)
jax.lib.pywrap_xla._swig_getattr_nondynamic(self,class_type,name,static=1)
jax.lib.pywrap_xla._swig_repr(self)
jax.lib.pywrap_xla._swig_setattr(self,class_type,name,value)
jax.lib.pywrap_xla._swig_setattr_nondynamic(self,class_type,name,value,static=1)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lib/xla_bridge.py----------------------------------------
A:jax.lib.xla_bridge.path->_hlo_path(FLAGS.jax_dump_hlo_per_pass, 'hlo_per_pass')
A:jax.lib.xla_bridge.compile_options->get_xla_client().CompileOptions()
A:jax.lib.xla_bridge.valself[key]->func(key)
A:jax.lib.xla_bridge.dtype->numpy.dtype(dtype)
A:jax.lib.xla_bridge.pyval->normalize_to_xla_dtypes(pyval)
A:jax.lib.xla_bridge.normalized_value->normalize_to_xla_dtypes(value)
A:jax.lib.xla_bridge.example_value->numpy.asarray(example_value)
A:jax.lib.xla_bridge.py_type->type(py_val)
A:jax.lib.xla_bridge.(zero_stride_axes,)->numpy.where(onp.equal(0, val.strides))
A:jax.lib.xla_bridge.(other_axes,)->numpy.where(onp.not_equal(0, val.strides))
A:jax.lib.xla_bridge.xla_val->c.Broadcast(c.NumpyArrayConstant(collapsed_val), onp.take(val.shape, zero_stride_axes))
A:jax.lib.xla_bridge.permutation->numpy.argsort(tuple(zero_stride_axes) + tuple(other_axes))
jax.lib.xla_bridge._JaxComputationBuilderBase(object)
jax.lib.xla_bridge._JaxComputationBuilderBase.Build(self,*args,**kwargs)
jax.lib.xla_bridge._JaxComputationBuilderBase.Constant(self,py_val)
jax.lib.xla_bridge._JaxComputationBuilderBase.ConstantLike(self,example_value,value)
jax.lib.xla_bridge._JaxComputationBuilderBase.NumpyArrayConstant(self,value)
jax.lib.xla_bridge._JaxComputationBuilderBase.Parameter(self,value,name=None,parameter_num=None)
jax.lib.xla_bridge._get_backend()
jax.lib.xla_bridge._get_xla_client(backend_name,platform_name,replica_count)
jax.lib.xla_bridge._hlo_path(path,name)
jax.lib.xla_bridge._ndarray_constant_handler(c,val)
jax.lib.xla_bridge.canonicalize_dtype(dtype)
jax.lib.xla_bridge.canonicalize_shape(shape)
jax.lib.xla_bridge.device_put(pyval)
jax.lib.xla_bridge.dtype_to_etype(dtype)
jax.lib.xla_bridge.get_compile_options()
jax.lib.xla_bridge.get_jax_computation_builder_class()
jax.lib.xla_bridge.get_replica_count()
jax.lib.xla_bridge.get_xla_client()
jax.lib.xla_bridge.infeed_put(replica_id,pyval)
jax.lib.xla_bridge.make_computation_builder(name)
jax.lib.xla_bridge.memoize(func)
jax.lib.xla_bridge.memoize_thunk(func)
jax.lib.xla_bridge.normalize_to_xla_dtypes(val)
jax.lib.xla_bridge.register_constant_handler(type_,handler_fun)
jax.lib.xla_bridge.shape_of(value)
jax.lib.xla_bridge.supported_numpy_dtypes()


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lib/xla_data_pb2.py----------------------------------------
A:jax.lib.xla_data_pb2._sym_db->google.protobuf.symbol_database.Default()
A:jax.lib.xla_data_pb2.DESCRIPTOR->google.protobuf.descriptor.FileDescriptor(name='tensorflow/compiler/xla/xla_data.proto', package='xla', syntax='proto3', serialized_options=_b('ø\x01\x01'), serialized_pb=_b('\n&tensorflow/compiler/xla/xla_data.proto\x12\x03xla"·\x01\n\rPaddingConfig\x12=\n\ndimensions\x18\x01 \x03(\x0b2).xla.PaddingConfig.PaddingConfigDimension\x1ag\n\x16PaddingConfigDimension\x12\x18\n\x10edge_padding_low\x18\x01 \x01(\x03\x12\x19\n\x11edge_padding_high\x18\x02 \x01(\x03\x12\x18\n\x10interior_padding\x18\x03 \x01(\x03"\x88\x01\n\x06Layout\x12\x1b\n\x06format\x18\x04 \x01(\x0e2\x0b.xla.Format\x12\x16\n\x0eminor_to_major\x18\x01 \x03(\x03\x12\x1b\n\x13max_sparse_elements\x18\x05 \x01(\x03J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04R\x11padded_dimensionsR\rpadding_value"\x90\x01\n\x05Shape\x12(\n\x0celement_type\x18\x02 \x01(\x0e2\x12.xla.PrimitiveType\x12\x12\n\ndimensions\x18\x03 \x03(\x03\x12 \n\x0ctuple_shapes\x18\x04 \x03(\x0b2\n.xla.Shape\x12\x1b\n\x06layout\x18\x05 \x01(\x0b2\x0b.xla.LayoutJ\x04\x08\x01\x10\x02R\x04rank"h\n\x11ProgramShapeProto\x12\x1e\n\nparameters\x18\x01 \x03(\x0b2\n.xla.Shape\x12\x1a\n\x06result\x18\x02 \x01(\x0b2\n.xla.Shape\x12\x17\n\x0fparameter_names\x18\x03 \x03(\t"D\n\x10ComputationStats\x12\x12\n\nflop_count\x18\x01 \x01(\x01\x12\x1c\n\x14transcendental_count\x18\x02 \x01(\x01"X\n\nOpMetadata\x12\x0f\n\x07op_type\x18\x01 \x01(\t\x12\x0f\n\x07op_name\x18\x02 \x01(\t\x12\x13\n\x0bsource_file\x18\x03 \x01(\t\x12\x13\n\x0bsource_line\x18\x04 \x01(\x05"È\x01\n\x10ExecutionProfile\x12\x1d\n\x15compilation_cache_hit\x18\x01 \x01(\x08\x12\x17\n\x0fcompile_time_ms\x18\x02 \x01(\x03\x12\x1b\n\x13compute_cycle_count\x18\x03 \x01(\x03\x12\x17\n\x0fcompute_time_ns\x18\x04 \x01(\x03\x12$\n\x1ccompute_and_transfer_time_ns\x18\x05 \x01(\x03\x12 \n\x18executable_size_in_bytes\x18\x06 \x01(\x03"!\n\x0fExecutionHandle\x12\x0e\n\x06handle\x18\x01 \x01(\x03""\n\x10GlobalDataHandle\x12\x0e\n\x06handle\x18\x01 \x01(\x03"4\n\x0cDeviceHandle\x12\x0e\n\x06handle\x18\x01 \x01(\x03\x12\x14\n\x0cdevice_count\x18\x02 \x01(\x03"´\x01\n\rChannelHandle\x12\x0e\n\x06handle\x18\x01 \x01(\x03\x12,\n\x04type\x18\x02 \x01(\x0e2\x1e.xla.ChannelHandle.ChannelType"e\n\x0bChannelType\x12\x18\n\x14CHANNEL_TYPE_INVALID\x10\x00\x12\x14\n\x10DEVICE_TO_DEVICE\x10\x01\x12\x12\n\x0eDEVICE_TO_HOST\x10\x02\x12\x12\n\x0eHOST_TO_DEVICE\x10\x03"Å\x01\n\x15DeviceAssignmentProto\x12\x15\n\rreplica_count\x18\x01 \x01(\x05\x12\x19\n\x11computation_count\x18\x02 \x01(\x05\x12I\n\x13computation_devices\x18\x03 \x03(\x0b2,.xla.DeviceAssignmentProto.ComputationDevice\x1a/\n\x11ComputationDevice\x12\x1a\n\x12replica_device_ids\x18\x01 \x03(\x05"°\x02\n\x0cLiteralProto\x12\x19\n\x05shape\x18\x01 \x01(\x0b2\n.xla.Shape\x12\r\n\x05preds\x18\x02 \x03(\x08\x12\x0b\n\x03s8s\x18\x0f \x01(\x0c\x12\x0b\n\x03u8s\x18\x03 \x01(\x0c\x12\x0c\n\x04s32s\x18\x04 \x03(\x05\x12\x0c\n\x04s64s\x18\x05 \x03(\x03\x12\x0c\n\x04u32s\x18\x06 \x03(\r\x12\x0c\n\x04u64s\x18\x07 \x03(\x04\x12\x0c\n\x04f32s\x18\x08 \x03(\x02\x12\x0c\n\x04f64s\x18\t \x03(\x01\x12\x0c\n\x04c64s\x18\x0c \x03(\x02\x12)\n\x0etuple_literals\x18\n \x03(\x0b2\x11.xla.LiteralProto\x12\x0c\n\x04f16s\x18\x0b \x01(\x0c\x12\r\n\x05bf16s\x18\r \x01(\x0c\x12\x0c\n\x04u16s\x18\x10 \x01(\x0c\x12\x0c\n\x04s16s\x18\x11 \x01(\x0c\x12\x16\n\x0esparse_indices\x18\x0e \x03(\x03"£\x01\n\x0fWindowDimension\x12\x0c\n\x04size\x18\x01 \x01(\x03\x12\x0e\n\x06stride\x18\x02 \x01(\x03\x12\x13\n\x0bpadding_low\x18\x03 \x01(\x03\x12\x14\n\x0cpadding_high\x18\x04 \x01(\x03\x12\x17\n\x0fwindow_dilation\x18\x05 \x01(\x03\x12\x15\n\rbase_dilation\x18\x06 \x01(\x03\x12\x17\n\x0fwindow_reversal\x18\x07 \x01(\x08"2\n\x06Window\x12(\n\ndimensions\x18\x01 \x03(\x0b2\x14.xla.WindowDimension"~\n\x16GatherDimensionNumbers\x12\x13\n\x0boffset_dims\x18\x01 \x03(\x03\x12\x1c\n\x14collapsed_slice_dims\x18\x02 \x03(\x03\x12\x17\n\x0fstart_index_map\x18\x03 \x03(\x03\x12\x18\n\x10index_vector_dim\x18\x04 \x01(\x03"\x93\x01\n\x17ScatterDimensionNumbers\x12\x1a\n\x12update_window_dims\x18\x01 \x03(\x03\x12\x1c\n\x14inserted_window_dims\x18\x02 \x03(\x03\x12$\n\x1cscatter_dims_to_operand_dims\x18\x03 \x03(\x03\x12\x18\n\x10index_vector_dim\x18\x04 \x01(\x03"Ø\x02\n\x1bConvolutionDimensionNumbers\x12\x1d\n\x15input_batch_dimension\x18\x07 \x01(\x03\x12\x1f\n\x17input_feature_dimension\x18\x08 \x01(\x03\x12 \n\x18input_spatial_dimensions\x18\x0b \x03(\x03\x12&\n\x1ekernel_input_feature_dimension\x18\x03 \x01(\x03\x12\'\n\x1fkernel_output_feature_dimension\x18\x04 \x01(\x03\x12!\n\x19kernel_spatial_dimensions\x18\x06 \x03(\x03\x12\x1e\n\x16output_batch_dimension\x18\t \x01(\x03\x12 \n\x18output_feature_dimension\x18\n \x01(\x03\x12!\n\x19output_spatial_dimensions\x18\x0c \x03(\x03"\x99\x01\n\x13DotDimensionNumbers\x12"\n\x1alhs_contracting_dimensions\x18\x01 \x03(\x03\x12"\n\x1arhs_contracting_dimensions\x18\x02 \x03(\x03\x12\x1c\n\x14lhs_batch_dimensions\x18\x03 \x03(\x03\x12\x1c\n\x14rhs_batch_dimensions\x18\x04 \x03(\x03"ú\x01\n\nOpSharding\x12"\n\x04type\x18\x01 \x01(\x0e2\x14.xla.OpSharding.Type\x12\x1e\n\ntile_shape\x18\x02 \x01(\x0b2\n.xla.Shape\x12"\n\x1atile_assignment_dimensions\x18\x03 \x03(\x03\x12\x1f\n\x17tile_assignment_devices\x18\x04 \x03(\x03\x12(\n\x0ftuple_shardings\x18\x05 \x03(\x0b2\x0f.xla.OpSharding"9\n\x04Type\x12\x0e\n\nREPLICATED\x10\x00\x12\x0b\n\x07MAXIMAL\x10\x01\x12\t\n\x05TUPLE\x10\x02\x12\t\n\x05OTHER\x10\x03"#\n\x0cReplicaGroup\x12\x13\n\x0breplica_ids\x18\x01 \x03(\x03".\n\x0cSourceTarget\x12\x0e\n\x06source\x18\x01 \x01(\x03\x12\x0e\n\x06target\x18\x02 \x01(\x03"}\n\x0fPrecisionConfig\x129\n\x11operand_precision\x18\x01 \x03(\x0e2\x1e.xla.PrecisionConfig.Precision"/\n\tPrecision\x12\x0b\n\x07DEFAULT\x10\x00\x12\x08\n\x04HIGH\x10\x01\x12\x0b\n\x07HIGHEST\x10\x02*Ë\x01\n\rPrimitiveType\x12\x1a\n\x16PRIMITIVE_TYPE_INVALID\x10\x00\x12\x08\n\x04PRED\x10\x01\x12\x06\n\x02S8\x10\x02\x12\x07\n\x03S16\x10\x03\x12\x07\n\x03S32\x10\x04\x12\x07\n\x03S64\x10\x05\x12\x06\n\x02U8\x10\x06\x12\x07\n\x03U16\x10\x07\x12\x07\n\x03U32\x10\x08\x12\x07\n\x03U64\x10\t\x12\x07\n\x03F16\x10\n\x12\x07\n\x03F32\x10\x0b\x12\x08\n\x04BF16\x10\x10\x12\x07\n\x03F64\x10\x0c\x12\x07\n\x03C64\x10\x0f\x12\t\n\x05TUPLE\x10\r\x12\n\n\x06OPAQUE\x10\x0e\x12\t\n\x05TOKEN\x10\x11*3\n\x06Format\x12\x12\n\x0eINVALID_FORMAT\x10\x00\x12\t\n\x05DENSE\x10\x01\x12\n\n\x06SPARSE\x10\x02*1\n\x07FftType\x12\x07\n\x03FFT\x10\x00\x12\x08\n\x04IFFT\x10\x01\x12\x08\n\x04RFFT\x10\x02\x12\t\n\x05IRFFT\x10\x03*F\n\x12RandomDistribution\x12\x0f\n\x0bRNG_INVALID\x10\x00\x12\x0f\n\x0bRNG_UNIFORM\x10\x01\x12\x0e\n\nRNG_NORMAL\x10\x02B\x03ø\x01\x01b\x06proto3'))
A:jax.lib.xla_data_pb2._PRIMITIVETYPE->google.protobuf.descriptor.EnumDescriptor(name='PrimitiveType', full_name='xla.PrimitiveType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='PRIMITIVE_TYPE_INVALID', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='PRED', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='S8', index=2, number=2, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='S16', index=3, number=3, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='S32', index=4, number=4, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='S64', index=5, number=5, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='U8', index=6, number=6, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='U16', index=7, number=7, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='U32', index=8, number=8, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='U64', index=9, number=9, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='F16', index=10, number=10, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='F32', index=11, number=11, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='BF16', index=12, number=16, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='F64', index=13, number=12, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='C64', index=14, number=15, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='TUPLE', index=15, number=13, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='OPAQUE', index=16, number=14, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='TOKEN', index=17, number=17, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=3268, serialized_end=3471)
A:jax.lib.xla_data_pb2.PrimitiveType->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_PRIMITIVETYPE)
A:jax.lib.xla_data_pb2._FORMAT->google.protobuf.descriptor.EnumDescriptor(name='Format', full_name='xla.Format', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='INVALID_FORMAT', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='DENSE', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='SPARSE', index=2, number=2, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=3473, serialized_end=3524)
A:jax.lib.xla_data_pb2.Format->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_FORMAT)
A:jax.lib.xla_data_pb2._FFTTYPE->google.protobuf.descriptor.EnumDescriptor(name='FftType', full_name='xla.FftType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='FFT', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='IFFT', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='RFFT', index=2, number=2, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='IRFFT', index=3, number=3, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=3526, serialized_end=3575)
A:jax.lib.xla_data_pb2.FftType->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_FFTTYPE)
A:jax.lib.xla_data_pb2._RANDOMDISTRIBUTION->google.protobuf.descriptor.EnumDescriptor(name='RandomDistribution', full_name='xla.RandomDistribution', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='RNG_INVALID', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='RNG_UNIFORM', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='RNG_NORMAL', index=2, number=2, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=3577, serialized_end=3647)
A:jax.lib.xla_data_pb2.RandomDistribution->google.protobuf.internal.enum_type_wrapper.EnumTypeWrapper(_RANDOMDISTRIBUTION)
A:jax.lib.xla_data_pb2._CHANNELHANDLE_CHANNELTYPE->google.protobuf.descriptor.EnumDescriptor(name='ChannelType', full_name='xla.ChannelHandle.ChannelType', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='CHANNEL_TYPE_INVALID', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='DEVICE_TO_DEVICE', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='DEVICE_TO_HOST', index=2, number=2, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='HOST_TO_DEVICE', index=3, number=3, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=1193, serialized_end=1294)
A:jax.lib.xla_data_pb2._OPSHARDING_TYPE->google.protobuf.descriptor.EnumDescriptor(name='Type', full_name='xla.OpSharding.Type', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='REPLICATED', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='MAXIMAL', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='TUPLE', index=2, number=2, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='OTHER', index=3, number=3, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=2996, serialized_end=3053)
A:jax.lib.xla_data_pb2._PRECISIONCONFIG_PRECISION->google.protobuf.descriptor.EnumDescriptor(name='Precision', full_name='xla.PrecisionConfig.Precision', filename=None, file=DESCRIPTOR, values=[_descriptor.EnumValueDescriptor(name='DEFAULT', index=0, number=0, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='HIGH', index=1, number=1, serialized_options=None, type=None), _descriptor.EnumValueDescriptor(name='HIGHEST', index=2, number=2, serialized_options=None, type=None)], containing_type=None, serialized_options=None, serialized_start=3218, serialized_end=3265)
A:jax.lib.xla_data_pb2._PADDINGCONFIG_PADDINGCONFIGDIMENSION->google.protobuf.descriptor.Descriptor(name='PaddingConfigDimension', full_name='xla.PaddingConfig.PaddingConfigDimension', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='edge_padding_low', full_name='xla.PaddingConfig.PaddingConfigDimension.edge_padding_low', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='edge_padding_high', full_name='xla.PaddingConfig.PaddingConfigDimension.edge_padding_high', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='interior_padding', full_name='xla.PaddingConfig.PaddingConfigDimension.interior_padding', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=128, serialized_end=231)
A:jax.lib.xla_data_pb2._PADDINGCONFIG->google.protobuf.descriptor.Descriptor(name='PaddingConfig', full_name='xla.PaddingConfig', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dimensions', full_name='xla.PaddingConfig.dimensions', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[_PADDINGCONFIG_PADDINGCONFIGDIMENSION], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=48, serialized_end=231)
A:jax.lib.xla_data_pb2._LAYOUT->google.protobuf.descriptor.Descriptor(name='Layout', full_name='xla.Layout', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='format', full_name='xla.Layout.format', index=0, number=4, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='minor_to_major', full_name='xla.Layout.minor_to_major', index=1, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='max_sparse_elements', full_name='xla.Layout.max_sparse_elements', index=2, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=234, serialized_end=370)
A:jax.lib.xla_data_pb2._SHAPE->google.protobuf.descriptor.Descriptor(name='Shape', full_name='xla.Shape', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='element_type', full_name='xla.Shape.element_type', index=0, number=2, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='dimensions', full_name='xla.Shape.dimensions', index=1, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tuple_shapes', full_name='xla.Shape.tuple_shapes', index=2, number=4, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='layout', full_name='xla.Shape.layout', index=3, number=5, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=373, serialized_end=517)
A:jax.lib.xla_data_pb2._PROGRAMSHAPEPROTO->google.protobuf.descriptor.Descriptor(name='ProgramShapeProto', full_name='xla.ProgramShapeProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='parameters', full_name='xla.ProgramShapeProto.parameters', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='result', full_name='xla.ProgramShapeProto.result', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='parameter_names', full_name='xla.ProgramShapeProto.parameter_names', index=2, number=3, type=9, cpp_type=9, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=519, serialized_end=623)
A:jax.lib.xla_data_pb2._COMPUTATIONSTATS->google.protobuf.descriptor.Descriptor(name='ComputationStats', full_name='xla.ComputationStats', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='flop_count', full_name='xla.ComputationStats.flop_count', index=0, number=1, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='transcendental_count', full_name='xla.ComputationStats.transcendental_count', index=1, number=2, type=1, cpp_type=5, label=1, has_default_value=False, default_value=float(0), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=625, serialized_end=693)
A:jax.lib.xla_data_pb2._OPMETADATA->google.protobuf.descriptor.Descriptor(name='OpMetadata', full_name='xla.OpMetadata', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='op_type', full_name='xla.OpMetadata.op_type', index=0, number=1, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='op_name', full_name='xla.OpMetadata.op_name', index=1, number=2, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='source_file', full_name='xla.OpMetadata.source_file', index=2, number=3, type=9, cpp_type=9, label=1, has_default_value=False, default_value=_b('').decode('utf-8'), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='source_line', full_name='xla.OpMetadata.source_line', index=3, number=4, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=695, serialized_end=783)
A:jax.lib.xla_data_pb2._EXECUTIONPROFILE->google.protobuf.descriptor.Descriptor(name='ExecutionProfile', full_name='xla.ExecutionProfile', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='compilation_cache_hit', full_name='xla.ExecutionProfile.compilation_cache_hit', index=0, number=1, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='compile_time_ms', full_name='xla.ExecutionProfile.compile_time_ms', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='compute_cycle_count', full_name='xla.ExecutionProfile.compute_cycle_count', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='compute_time_ns', full_name='xla.ExecutionProfile.compute_time_ns', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='compute_and_transfer_time_ns', full_name='xla.ExecutionProfile.compute_and_transfer_time_ns', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='executable_size_in_bytes', full_name='xla.ExecutionProfile.executable_size_in_bytes', index=5, number=6, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=786, serialized_end=986)
A:jax.lib.xla_data_pb2._EXECUTIONHANDLE->google.protobuf.descriptor.Descriptor(name='ExecutionHandle', full_name='xla.ExecutionHandle', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='handle', full_name='xla.ExecutionHandle.handle', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=988, serialized_end=1021)
A:jax.lib.xla_data_pb2._GLOBALDATAHANDLE->google.protobuf.descriptor.Descriptor(name='GlobalDataHandle', full_name='xla.GlobalDataHandle', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='handle', full_name='xla.GlobalDataHandle.handle', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1023, serialized_end=1057)
A:jax.lib.xla_data_pb2._DEVICEHANDLE->google.protobuf.descriptor.Descriptor(name='DeviceHandle', full_name='xla.DeviceHandle', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='handle', full_name='xla.DeviceHandle.handle', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='device_count', full_name='xla.DeviceHandle.device_count', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1059, serialized_end=1111)
A:jax.lib.xla_data_pb2._CHANNELHANDLE->google.protobuf.descriptor.Descriptor(name='ChannelHandle', full_name='xla.ChannelHandle', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='handle', full_name='xla.ChannelHandle.handle', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='type', full_name='xla.ChannelHandle.type', index=1, number=2, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[_CHANNELHANDLE_CHANNELTYPE], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1114, serialized_end=1294)
A:jax.lib.xla_data_pb2._DEVICEASSIGNMENTPROTO_COMPUTATIONDEVICE->google.protobuf.descriptor.Descriptor(name='ComputationDevice', full_name='xla.DeviceAssignmentProto.ComputationDevice', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='replica_device_ids', full_name='xla.DeviceAssignmentProto.ComputationDevice.replica_device_ids', index=0, number=1, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1447, serialized_end=1494)
A:jax.lib.xla_data_pb2._DEVICEASSIGNMENTPROTO->google.protobuf.descriptor.Descriptor(name='DeviceAssignmentProto', full_name='xla.DeviceAssignmentProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='replica_count', full_name='xla.DeviceAssignmentProto.replica_count', index=0, number=1, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='computation_count', full_name='xla.DeviceAssignmentProto.computation_count', index=1, number=2, type=5, cpp_type=1, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='computation_devices', full_name='xla.DeviceAssignmentProto.computation_devices', index=2, number=3, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[_DEVICEASSIGNMENTPROTO_COMPUTATIONDEVICE], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1297, serialized_end=1494)
A:jax.lib.xla_data_pb2._LITERALPROTO->google.protobuf.descriptor.Descriptor(name='LiteralProto', full_name='xla.LiteralProto', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='shape', full_name='xla.LiteralProto.shape', index=0, number=1, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='preds', full_name='xla.LiteralProto.preds', index=1, number=2, type=8, cpp_type=7, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='s8s', full_name='xla.LiteralProto.s8s', index=2, number=15, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='u8s', full_name='xla.LiteralProto.u8s', index=3, number=3, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='s32s', full_name='xla.LiteralProto.s32s', index=4, number=4, type=5, cpp_type=1, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='s64s', full_name='xla.LiteralProto.s64s', index=5, number=5, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='u32s', full_name='xla.LiteralProto.u32s', index=6, number=6, type=13, cpp_type=3, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='u64s', full_name='xla.LiteralProto.u64s', index=7, number=7, type=4, cpp_type=4, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='f32s', full_name='xla.LiteralProto.f32s', index=8, number=8, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='f64s', full_name='xla.LiteralProto.f64s', index=9, number=9, type=1, cpp_type=5, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='c64s', full_name='xla.LiteralProto.c64s', index=10, number=12, type=2, cpp_type=6, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tuple_literals', full_name='xla.LiteralProto.tuple_literals', index=11, number=10, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='f16s', full_name='xla.LiteralProto.f16s', index=12, number=11, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='bf16s', full_name='xla.LiteralProto.bf16s', index=13, number=13, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='u16s', full_name='xla.LiteralProto.u16s', index=14, number=16, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='s16s', full_name='xla.LiteralProto.s16s', index=15, number=17, type=12, cpp_type=9, label=1, has_default_value=False, default_value=_b(''), message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='sparse_indices', full_name='xla.LiteralProto.sparse_indices', index=16, number=14, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1497, serialized_end=1801)
A:jax.lib.xla_data_pb2._WINDOWDIMENSION->google.protobuf.descriptor.Descriptor(name='WindowDimension', full_name='xla.WindowDimension', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='size', full_name='xla.WindowDimension.size', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='stride', full_name='xla.WindowDimension.stride', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='padding_low', full_name='xla.WindowDimension.padding_low', index=2, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='padding_high', full_name='xla.WindowDimension.padding_high', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='window_dilation', full_name='xla.WindowDimension.window_dilation', index=4, number=5, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='base_dilation', full_name='xla.WindowDimension.base_dilation', index=5, number=6, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='window_reversal', full_name='xla.WindowDimension.window_reversal', index=6, number=7, type=8, cpp_type=7, label=1, has_default_value=False, default_value=False, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1804, serialized_end=1967)
A:jax.lib.xla_data_pb2._WINDOW->google.protobuf.descriptor.Descriptor(name='Window', full_name='xla.Window', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='dimensions', full_name='xla.Window.dimensions', index=0, number=1, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=1969, serialized_end=2019)
A:jax.lib.xla_data_pb2._GATHERDIMENSIONNUMBERS->google.protobuf.descriptor.Descriptor(name='GatherDimensionNumbers', full_name='xla.GatherDimensionNumbers', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='offset_dims', full_name='xla.GatherDimensionNumbers.offset_dims', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='collapsed_slice_dims', full_name='xla.GatherDimensionNumbers.collapsed_slice_dims', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='start_index_map', full_name='xla.GatherDimensionNumbers.start_index_map', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='index_vector_dim', full_name='xla.GatherDimensionNumbers.index_vector_dim', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2021, serialized_end=2147)
A:jax.lib.xla_data_pb2._SCATTERDIMENSIONNUMBERS->google.protobuf.descriptor.Descriptor(name='ScatterDimensionNumbers', full_name='xla.ScatterDimensionNumbers', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='update_window_dims', full_name='xla.ScatterDimensionNumbers.update_window_dims', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='inserted_window_dims', full_name='xla.ScatterDimensionNumbers.inserted_window_dims', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='scatter_dims_to_operand_dims', full_name='xla.ScatterDimensionNumbers.scatter_dims_to_operand_dims', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='index_vector_dim', full_name='xla.ScatterDimensionNumbers.index_vector_dim', index=3, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2150, serialized_end=2297)
A:jax.lib.xla_data_pb2._CONVOLUTIONDIMENSIONNUMBERS->google.protobuf.descriptor.Descriptor(name='ConvolutionDimensionNumbers', full_name='xla.ConvolutionDimensionNumbers', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='input_batch_dimension', full_name='xla.ConvolutionDimensionNumbers.input_batch_dimension', index=0, number=7, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='input_feature_dimension', full_name='xla.ConvolutionDimensionNumbers.input_feature_dimension', index=1, number=8, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='input_spatial_dimensions', full_name='xla.ConvolutionDimensionNumbers.input_spatial_dimensions', index=2, number=11, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='kernel_input_feature_dimension', full_name='xla.ConvolutionDimensionNumbers.kernel_input_feature_dimension', index=3, number=3, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='kernel_output_feature_dimension', full_name='xla.ConvolutionDimensionNumbers.kernel_output_feature_dimension', index=4, number=4, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='kernel_spatial_dimensions', full_name='xla.ConvolutionDimensionNumbers.kernel_spatial_dimensions', index=5, number=6, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='output_batch_dimension', full_name='xla.ConvolutionDimensionNumbers.output_batch_dimension', index=6, number=9, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='output_feature_dimension', full_name='xla.ConvolutionDimensionNumbers.output_feature_dimension', index=7, number=10, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='output_spatial_dimensions', full_name='xla.ConvolutionDimensionNumbers.output_spatial_dimensions', index=8, number=12, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2300, serialized_end=2644)
A:jax.lib.xla_data_pb2._DOTDIMENSIONNUMBERS->google.protobuf.descriptor.Descriptor(name='DotDimensionNumbers', full_name='xla.DotDimensionNumbers', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='lhs_contracting_dimensions', full_name='xla.DotDimensionNumbers.lhs_contracting_dimensions', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='rhs_contracting_dimensions', full_name='xla.DotDimensionNumbers.rhs_contracting_dimensions', index=1, number=2, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='lhs_batch_dimensions', full_name='xla.DotDimensionNumbers.lhs_batch_dimensions', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='rhs_batch_dimensions', full_name='xla.DotDimensionNumbers.rhs_batch_dimensions', index=3, number=4, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2647, serialized_end=2800)
A:jax.lib.xla_data_pb2._OPSHARDING->google.protobuf.descriptor.Descriptor(name='OpSharding', full_name='xla.OpSharding', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='type', full_name='xla.OpSharding.type', index=0, number=1, type=14, cpp_type=8, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tile_shape', full_name='xla.OpSharding.tile_shape', index=1, number=2, type=11, cpp_type=10, label=1, has_default_value=False, default_value=None, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tile_assignment_dimensions', full_name='xla.OpSharding.tile_assignment_dimensions', index=2, number=3, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tile_assignment_devices', full_name='xla.OpSharding.tile_assignment_devices', index=3, number=4, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='tuple_shardings', full_name='xla.OpSharding.tuple_shardings', index=4, number=5, type=11, cpp_type=10, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[_OPSHARDING_TYPE], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=2803, serialized_end=3053)
A:jax.lib.xla_data_pb2._REPLICAGROUP->google.protobuf.descriptor.Descriptor(name='ReplicaGroup', full_name='xla.ReplicaGroup', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='replica_ids', full_name='xla.ReplicaGroup.replica_ids', index=0, number=1, type=3, cpp_type=2, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=3055, serialized_end=3090)
A:jax.lib.xla_data_pb2._SOURCETARGET->google.protobuf.descriptor.Descriptor(name='SourceTarget', full_name='xla.SourceTarget', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='source', full_name='xla.SourceTarget.source', index=0, number=1, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR), _descriptor.FieldDescriptor(name='target', full_name='xla.SourceTarget.target', index=1, number=2, type=3, cpp_type=2, label=1, has_default_value=False, default_value=0, message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=3092, serialized_end=3138)
A:jax.lib.xla_data_pb2._PRECISIONCONFIG->google.protobuf.descriptor.Descriptor(name='PrecisionConfig', full_name='xla.PrecisionConfig', filename=None, file=DESCRIPTOR, containing_type=None, fields=[_descriptor.FieldDescriptor(name='operand_precision', full_name='xla.PrecisionConfig.operand_precision', index=0, number=1, type=14, cpp_type=8, label=3, has_default_value=False, default_value=[], message_type=None, enum_type=None, containing_type=None, is_extension=False, extension_scope=None, serialized_options=None, file=DESCRIPTOR)], extensions=[], nested_types=[], enum_types=[_PRECISIONCONFIG_PRECISION], serialized_options=None, is_extendable=False, syntax='proto3', extension_ranges=[], oneofs=[], serialized_start=3140, serialized_end=3265)
A:jax.lib.xla_data_pb2.PaddingConfig->google.protobuf.reflection.GeneratedProtocolMessageType('PaddingConfig', (_message.Message,), dict(PaddingConfigDimension=_reflection.GeneratedProtocolMessageType('PaddingConfigDimension', (_message.Message,), dict(DESCRIPTOR=_PADDINGCONFIG_PADDINGCONFIGDIMENSION, __module__='tensorflow.compiler.xla.xla_data_pb2')), DESCRIPTOR=_PADDINGCONFIG, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.Layout->google.protobuf.reflection.GeneratedProtocolMessageType('Layout', (_message.Message,), dict(DESCRIPTOR=_LAYOUT, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.Shape->google.protobuf.reflection.GeneratedProtocolMessageType('Shape', (_message.Message,), dict(DESCRIPTOR=_SHAPE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ProgramShapeProto->google.protobuf.reflection.GeneratedProtocolMessageType('ProgramShapeProto', (_message.Message,), dict(DESCRIPTOR=_PROGRAMSHAPEPROTO, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ComputationStats->google.protobuf.reflection.GeneratedProtocolMessageType('ComputationStats', (_message.Message,), dict(DESCRIPTOR=_COMPUTATIONSTATS, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.OpMetadata->google.protobuf.reflection.GeneratedProtocolMessageType('OpMetadata', (_message.Message,), dict(DESCRIPTOR=_OPMETADATA, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ExecutionProfile->google.protobuf.reflection.GeneratedProtocolMessageType('ExecutionProfile', (_message.Message,), dict(DESCRIPTOR=_EXECUTIONPROFILE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ExecutionHandle->google.protobuf.reflection.GeneratedProtocolMessageType('ExecutionHandle', (_message.Message,), dict(DESCRIPTOR=_EXECUTIONHANDLE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.GlobalDataHandle->google.protobuf.reflection.GeneratedProtocolMessageType('GlobalDataHandle', (_message.Message,), dict(DESCRIPTOR=_GLOBALDATAHANDLE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.DeviceHandle->google.protobuf.reflection.GeneratedProtocolMessageType('DeviceHandle', (_message.Message,), dict(DESCRIPTOR=_DEVICEHANDLE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ChannelHandle->google.protobuf.reflection.GeneratedProtocolMessageType('ChannelHandle', (_message.Message,), dict(DESCRIPTOR=_CHANNELHANDLE, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.DeviceAssignmentProto->google.protobuf.reflection.GeneratedProtocolMessageType('DeviceAssignmentProto', (_message.Message,), dict(ComputationDevice=_reflection.GeneratedProtocolMessageType('ComputationDevice', (_message.Message,), dict(DESCRIPTOR=_DEVICEASSIGNMENTPROTO_COMPUTATIONDEVICE, __module__='tensorflow.compiler.xla.xla_data_pb2')), DESCRIPTOR=_DEVICEASSIGNMENTPROTO, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.LiteralProto->google.protobuf.reflection.GeneratedProtocolMessageType('LiteralProto', (_message.Message,), dict(DESCRIPTOR=_LITERALPROTO, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.WindowDimension->google.protobuf.reflection.GeneratedProtocolMessageType('WindowDimension', (_message.Message,), dict(DESCRIPTOR=_WINDOWDIMENSION, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.Window->google.protobuf.reflection.GeneratedProtocolMessageType('Window', (_message.Message,), dict(DESCRIPTOR=_WINDOW, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.GatherDimensionNumbers->google.protobuf.reflection.GeneratedProtocolMessageType('GatherDimensionNumbers', (_message.Message,), dict(DESCRIPTOR=_GATHERDIMENSIONNUMBERS, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ScatterDimensionNumbers->google.protobuf.reflection.GeneratedProtocolMessageType('ScatterDimensionNumbers', (_message.Message,), dict(DESCRIPTOR=_SCATTERDIMENSIONNUMBERS, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ConvolutionDimensionNumbers->google.protobuf.reflection.GeneratedProtocolMessageType('ConvolutionDimensionNumbers', (_message.Message,), dict(DESCRIPTOR=_CONVOLUTIONDIMENSIONNUMBERS, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.DotDimensionNumbers->google.protobuf.reflection.GeneratedProtocolMessageType('DotDimensionNumbers', (_message.Message,), dict(DESCRIPTOR=_DOTDIMENSIONNUMBERS, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.OpSharding->google.protobuf.reflection.GeneratedProtocolMessageType('OpSharding', (_message.Message,), dict(DESCRIPTOR=_OPSHARDING, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.ReplicaGroup->google.protobuf.reflection.GeneratedProtocolMessageType('ReplicaGroup', (_message.Message,), dict(DESCRIPTOR=_REPLICAGROUP, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.SourceTarget->google.protobuf.reflection.GeneratedProtocolMessageType('SourceTarget', (_message.Message,), dict(DESCRIPTOR=_SOURCETARGET, __module__='tensorflow.compiler.xla.xla_data_pb2'))
A:jax.lib.xla_data_pb2.PrecisionConfig->google.protobuf.reflection.GeneratedProtocolMessageType('PrecisionConfig', (_message.Message,), dict(DESCRIPTOR=_PRECISIONCONFIG, __module__='tensorflow.compiler.xla.xla_data_pb2'))


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/lib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/experimental/lapax.py----------------------------------------
A:jax.experimental.lapax.out->jax.lax.rev(out, *onp.where([row_rev, col_rev]))
A:jax.experimental.lapax.out[i, i]->_cholesky(a[i, i])
A:jax.experimental.lapax.out[i:, i]->solve(out[i, i], a[i:, i])
A:jax.experimental.lapax.out[i, :]->solve(a[i, i], b[i, :])
A:jax.experimental.lapax.out[:, i]->solve(a[i, i], b[:, i])
A:jax.experimental.lapax.out[:, i:]->solve(a[i, i], b[:, i])
A:jax.experimental.lapax.dims->tuple(range(ndarray.ndim))
A:jax.experimental.lapax.self.shape->tuple(onp.floor_divide(ndarray.shape, block_size) + (onp.mod(ndarray.shape, block_size) > 0))
A:jax.experimental.lapax.self.ndarray->_matrix_put(self.ndarray, idx, val.ndarray, self.bs)
A:jax.experimental.lapax.__add__->_make_infix_op(lax.add)
A:jax.experimental.lapax.__sub__->_make_infix_op(lax.sub)
A:jax.experimental.lapax.__mul__->_make_infix_op(lax.batch_matmul)
A:jax.experimental.lapax.__div__->_make_infix_op(lax.div)
A:jax.experimental.lapax.__truediv__->_make_infix_op(lax.div)
A:jax.experimental.lapax.T->property(_make_infix_op(_matrix_transpose))
A:jax.experimental.lapax.idx_elt->slice(idx_elt, idx_elt + 1, 1)
A:jax.experimental.lapax.indices->tuple(onp.arange(block_dim)[idx_elt])
A:jax.experimental.lapax.end->min(k * (start - step), shape[axis])
A:jax.experimental.lapax.(sli, row_rev)->_canonical_idx(ndarray.shape, idx_i, -2, block_size)
A:jax.experimental.lapax.(slj, col_rev)->_canonical_idx(ndarray.shape, idx_j, -1, block_size)
A:jax.experimental.lapax.val->jax.lax.rev(val, *onp.where([row_rev, col_rev]))
jax.experimental.lapax.LapaxMatrix(self,ndarray,block_size=1)
jax.experimental.lapax.LapaxMatrix.__getitem__(self,idx)
jax.experimental.lapax.LapaxMatrix.__init__(self,ndarray,block_size=1)
jax.experimental.lapax.LapaxMatrix.__setitem__(self,idx,val)
jax.experimental.lapax.LapaxMatrix.bview(self,block_size)
jax.experimental.lapax._canonical_idx(shape,idx_elt,axis,block_size=1)
jax.experimental.lapax._cholesky(a)
jax.experimental.lapax._make_infix_op(fun)
jax.experimental.lapax._matrix_put(ndarray,idx,val,block_size=1)
jax.experimental.lapax._matrix_take(ndarray,idx,block_size=1)
jax.experimental.lapax._matrix_transpose(ndarray)
jax.experimental.lapax._solve_triangular_left(a,b,left_side,lower,trans_a)
jax.experimental.lapax._solve_triangular_right(a,b,left_side,lower,trans_a)
jax.experimental.lapax.cholesky(a,block_size=1)
jax.experimental.lapax.full_like(x,val)
jax.experimental.lapax.solve_triangular(a,b,left_side,lower,trans_a,block_size=1)
jax.experimental.lapax.sqrt(x)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/experimental/minmax.py----------------------------------------
A:jax.experimental.minmax.(init_fun, update_fun)->opt_maker(*args, **kwargs)
A:jax.experimental.minmax.step_size->make_schedule(step_size)
A:jax.experimental.minmax.v0->jax.numpy.zeros_like(x0)
A:jax.experimental.minmax.avg_sq_grad->jax.numpy.ones_like(x0)
A:jax.experimental.minmax.m0->jax.numpy.zeros_like(x0)
A:jax.experimental.minmax.boundaries->jax.numpy.array(boundaries)
A:jax.experimental.minmax.values->jax.numpy.array(values)
jax.experimental.minmax.adam(step_size,b1=0.9,b2=0.999,eps=1e-08)
jax.experimental.minmax.constant(step_size)
jax.experimental.minmax.exponential_decay(step_size,decay_steps,decay_rate)
jax.experimental.minmax.inverse_time_decay(step_size,decay_steps,decay_rate,staircase=False)
jax.experimental.minmax.iterate(state_tree)
jax.experimental.minmax.make_schedule(scalar_or_schedule_fun)
jax.experimental.minmax.momentum(step_size,mass)
jax.experimental.minmax.optimizer(opt_maker)
jax.experimental.minmax.piecewise_constant(boundaries,values)
jax.experimental.minmax.rmsprop(step_size,gamma=0.9,eps=1e-08)
jax.experimental.minmax.sgd(step_size)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/experimental/stax.py----------------------------------------
A:jax.experimental.stax.size->numpy.prod(onp.delete(shape, [in_dim, out_dim]))
A:jax.experimental.stax.zeros->functools.partial(np.zeros, dtype='float32')
A:jax.experimental.stax.ones->functools.partial(np.ones, dtype='float32')
A:jax.experimental.stax.filter_shape_iter->iter(filter_shape)
A:jax.experimental.stax.output_shape->jax.lax.conv_general_shape_tuple(input_shape, kernel_shape, strides, padding, dimension_numbers)
A:jax.experimental.stax.bias_shape->tuple(itertools.dropwhile(lambda x: x == 1, bias_shape))
A:jax.experimental.stax.Conv->functools.partial(GeneralConv, ('NHWC', 'HWIO', 'NHWC'))
A:jax.experimental.stax.shape->tuple(itertools.dropwhile(lambda x: x == 1, shape))
A:jax.experimental.stax.Tanh->_elemwise_no_params(np.tanh)
A:jax.experimental.stax.Relu->_elemwise_no_params(relu)
A:jax.experimental.stax.LogSoftmax->_elemwise_no_params(logsoftmax, axis=-1)
A:jax.experimental.stax.Softplus->_elemwise_no_params(softplus)
A:jax.experimental.stax.out_shape->jax.lax.reduce_window_shape_tuple(input_shape, dims, strides, padding)
A:jax.experimental.stax.out->jax.lax.reduce_window(inputs, init_val, reducer, dims, strides, padding)
A:jax.experimental.stax.MaxPool->_pooling_layer(lax.max, -np.inf)
A:jax.experimental.stax.SumPool->_pooling_layer(lax.add, 0.0)
A:jax.experimental.stax.one->jax.numpy.ones(inputs.shape[1:3], dtype=inputs.dtype)
A:jax.experimental.stax.window_sizes->jax.lax.reduce_window(one, 0.0, lax.add, dims, strides, padding)
A:jax.experimental.stax.AvgPool->_pooling_layer(lax.add, 0.0, _normalize_by_window_size)
A:jax.experimental.stax.Flatten->Flatten()
A:jax.experimental.stax.Identity->Identity()
A:jax.experimental.stax.FanInSum->FanInSum()
A:jax.experimental.stax.keep->jax.random.bernoulli(rng, rate, inputs.shape)
A:jax.experimental.stax.nlayers->len(layers)
A:jax.experimental.stax.(init_funs, apply_funs)->zip(*layers)
A:jax.experimental.stax.(input_shape, param)->init_fun(input_shape)
A:jax.experimental.stax.inputs->fun(param, inputs, rng)
jax.experimental.stax.BatchNorm(axis=(0,1,2),epsilon=1e-05,center=True,scale=True,beta_init=zeros,gamma_init=ones)
jax.experimental.stax.Dense(out_dim,W_init=glorot(),b_init=randn())
jax.experimental.stax.Dropout(rate,mode='train')
jax.experimental.stax.FanInSum()
jax.experimental.stax.FanOut(num)
jax.experimental.stax.Flatten()
jax.experimental.stax.GeneralConv(dimension_numbers,out_chan,filter_shape,strides=None,padding='VALID',W_init=None,b_init=randn(1e-06))
jax.experimental.stax.Identity()
jax.experimental.stax._elemwise_no_params(fun,**kwargs)
jax.experimental.stax._normalize_by_window_size(dims,strides,padding)
jax.experimental.stax._pooling_layer(reducer,init_val,rescaler=None)
jax.experimental.stax.fastvar(x,axis,keepdims)
jax.experimental.stax.glorot(out_dim=0,in_dim=1,scale=onp.sqrt(2),rng=npr)
jax.experimental.stax.logsoftmax(x,axis=-1)
jax.experimental.stax.parallel(*layers)
jax.experimental.stax.randn(stddev=0.01,rng=npr)
jax.experimental.stax.relu(x)
jax.experimental.stax.serial(*layers)
jax.experimental.stax.shape_dependent(make_layer)
jax.experimental.stax.softplus(x)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/experimental/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/numpy/lax_numpy.py----------------------------------------
A:jax.numpy.lax_numpy.nd->len(_broadcast_shapes(*shapes))
A:jax.numpy.lax_numpy.ndim->_max((len(shape) for shape in shapes))
A:jax.numpy.lax_numpy.shapes->numpy.array([(1,) * (ndim - len(shape)) + shape for shape in shapes])
A:jax.numpy.lax_numpy.result_shape->tuple((1 if elt is None else next(unexpanded_shape_itr) for elt in canonical_idx if not isinstance(elt, int)))
A:jax.numpy.lax_numpy.to_dtype->_result_dtype(op, *args)
A:jax.numpy.lax_numpy.(pos, arg)->next(((i, arg) for (i, arg) in enumerate(args) if not_array(arg)))
A:jax.numpy.lax_numpy.docstr->'\n  LAX-backed implementation of {fun}. Original docstring below.\n\n  {np_doc}\n  '.format(fun=fun.__name__, np_doc=fun.__doc__)
A:jax.numpy.lax_numpy.absoluteabs->_one_to_one_op(onp.absolute, lax.abs)
A:jax.numpy.lax_numpy.add->_one_to_one_op(onp.add, lax.add)
A:jax.numpy.lax_numpy.bitwise_and->_one_to_one_op(onp.bitwise_and, lax.bitwise_and)
A:jax.numpy.lax_numpy.bitwise_not->_one_to_one_op(onp.bitwise_not, lax.bitwise_not)
A:jax.numpy.lax_numpy.bitwise_or->_one_to_one_op(onp.bitwise_or, lax.bitwise_or)
A:jax.numpy.lax_numpy.bitwise_xor->_one_to_one_op(onp.bitwise_xor, lax.bitwise_xor)
A:jax.numpy.lax_numpy.right_shift->_one_to_one_op(onp.right_shift, lax.shift_right_arithmetic)
A:jax.numpy.lax_numpy.left_shift->_one_to_one_op(onp.left_shift, lax.shift_left)
A:jax.numpy.lax_numpy.ceil->_one_to_one_op(onp.ceil, lax.ceil)
A:jax.numpy.lax_numpy.equal->_one_to_one_op(onp.equal, lax.eq)
A:jax.numpy.lax_numpy.expm1->_one_to_one_op(onp.expm1, lax.expm1, True)
A:jax.numpy.lax_numpy.exp->_one_to_one_op(onp.exp, lax.exp, True)
A:jax.numpy.lax_numpy.floor->_one_to_one_op(onp.floor, lax.floor)
A:jax.numpy.lax_numpy.greater_equal->_one_to_one_op(onp.greater_equal, lax.ge)
A:jax.numpy.lax_numpy.greater->_one_to_one_op(onp.greater, lax.gt)
A:jax.numpy.lax_numpy.isfinite->_one_to_one_op(onp.isfinite, lax.is_finite)
A:jax.numpy.lax_numpy.less_equal->_one_to_one_op(onp.less_equal, lax.le)
A:jax.numpy.lax_numpy.less->_one_to_one_op(onp.less, lax.lt)
A:jax.numpy.lax_numpy.log1p->_one_to_one_op(onp.log1p, lax.log1p, True)
A:jax.numpy.lax_numpy.log->_one_to_one_op(onp.log, lax.log, True)
A:jax.numpy.lax_numpy.maximum->_one_to_one_op(onp.maximum, lax.max)
A:jax.numpy.lax_numpy.minimum->_one_to_one_op(onp.minimum, lax.min)
A:jax.numpy.lax_numpy.multiply->_one_to_one_op(onp.multiply, lax.mul)
A:jax.numpy.lax_numpy.negative->_one_to_one_op(onp.negative, lax.neg)
A:jax.numpy.lax_numpy.not_equal->_one_to_one_op(onp.not_equal, lax.ne)
A:jax.numpy.lax_numpy.power->_one_to_one_op(onp.power, lax.pow, True)
A:jax.numpy.lax_numpy.sign->_one_to_one_op(onp.sign, lax.sign)
A:jax.numpy.lax_numpy.subtract->_one_to_one_op(onp.subtract, lax.sub)
A:jax.numpy.lax_numpy.tanh->_one_to_one_op(onp.tanh, lax.tanh, True)
A:jax.numpy.lax_numpy.sort->_one_to_one_op(onp.sort, lax.sort)
A:jax.numpy.lax_numpy.logical_and->_logical_op(onp.logical_and, lax.bitwise_and)
A:jax.numpy.lax_numpy.logical_not->_logical_op(onp.logical_not, lax.bitwise_not)
A:jax.numpy.lax_numpy.logical_or->_logical_op(onp.logical_or, lax.bitwise_or)
A:jax.numpy.lax_numpy.logical_xor->_logical_op(onp.logical_xor, lax.bitwise_xor)
A:jax.numpy.lax_numpy.(x1, x2)->_promote_args('remainder', x1, x2)
A:jax.numpy.lax_numpy.result_dtype->_dtype(np_fun(onp.ones((), dtype=_dtype(a))))
A:jax.numpy.lax_numpy.quotient->jax.lax.div(x1, x2)
A:jax.numpy.lax_numpy.select->logical_and(lax.sign(x1) != lax.sign(x2), lax.rem(x1, x2) != 0)
A:jax.numpy.lax_numpy.mod->jax.lax.select(ind, mod + x1, mod)
A:jax.numpy.lax_numpy.div->jax.lax.select(ind, div - _constant_like(div, 1), div)
A:jax.numpy.lax_numpy.ind->jax.lax.bitwise_and(mod != 0, lax.sign(x2) != lax.sign(mod))
A:jax.numpy.lax_numpy.amax->jax.lax.max(x1, x2)
A:jax.numpy.lax_numpy.(x,)->_promote_to_result_dtype(onp.sin, x)
A:jax.numpy.lax_numpy.dummy_val->numpy.broadcast_to(0, ary.shape)
A:jax.numpy.lax_numpy.axis->frozenset(onp.mod(axis, ndim(a)).reshape(-1))
A:jax.numpy.lax_numpy.shape->_shape(a)
A:jax.numpy.lax_numpy.perm->numpy.argsort(new_dims + kept_dims)
A:jax.numpy.lax_numpy.source->numpy.mod(source, ndim(a)).reshape(-1)
A:jax.numpy.lax_numpy.destination->numpy.mod(destination, ndim(a)).reshape(-1)
A:jax.numpy.lax_numpy.(a, b)->_promote_dtypes(a, b)
A:jax.numpy.lax_numpy.rtol->jax.lax.convert_element_type(rtol, _dtype(a))
A:jax.numpy.lax_numpy.atol->jax.lax.convert_element_type(atol, _dtype(a))
A:jax.numpy.lax_numpy.condition->jax.lax.ne(condition, zeros_like(condition))
A:jax.numpy.lax_numpy.(condition, x, y)->broadcast_arrays(condition, x, y)
A:jax.numpy.lax_numpy.(diff,)->numpy.where(onp.not_equal(shape[nlead:], _shape(arr)))
A:jax.numpy.lax_numpy.kept_dims->tuple(onp.delete(onp.arange(len(shape)), new_dims))
A:jax.numpy.lax_numpy.broadcast_dims->numpy.concatenate((onp.arange(0, axis + 1), onp.arange(axis + 2, num_dims + 1)))
A:jax.numpy.lax_numpy.squeezed_array->squeeze(arr, diff)
A:jax.numpy.lax_numpy.subarrays->numpy.split(dummy_val, indices_or_sections, axis)
A:jax.numpy.lax_numpy.split_indices->numpy.cumsum([0] + [onp.shape(sub)[axis] for sub in subarrays])
A:jax.numpy.lax_numpy.a_min->jax.lax.convert_element_type(a_min, _dtype(a))
A:jax.numpy.lax_numpy.a_max->jax.lax.convert_element_type(a_max, _dtype(a))
A:jax.numpy.lax_numpy.factor->_constant_like(a, 10 ** decimals)
A:jax.numpy.lax_numpy.dims->_reduction_dims(a, axis)
A:jax.numpy.lax_numpy.a->ravel(a)
A:jax.numpy.lax_numpy.result->_rewriting_take(result, elt, axis=axis)
A:jax.numpy.lax_numpy.shape_with_singletons->jax.lax.subvals(shape(a), zip(dims, (1,) * len(dims)))
A:jax.numpy.lax_numpy.a_dtype->lib.xla_bridge.canonicalize_dtype(_dtype(a))
A:jax.numpy.lax_numpy.sum->_make_reduction(onp.sum, lax.add, 0)
A:jax.numpy.lax_numpy.prod->_make_reduction(onp.prod, lax.mul, 1)
A:jax.numpy.lax_numpy.max->_make_reduction(onp.max, lax.max, -onp.inf)
A:jax.numpy.lax_numpy.min->_make_reduction(onp.min, lax.min, onp.inf)
A:jax.numpy.lax_numpy.all->_make_reduction(onp.all, logical_and, True)
A:jax.numpy.lax_numpy.any->_make_reduction(onp.any, logical_or, False)
A:jax.numpy.lax_numpy.normalizer->numpy.prod(onp.take(shape(a), axis))
A:jax.numpy.lax_numpy.centered->jax.lax.abs(centered)
A:jax.numpy.lax_numpy.arr->array(arys[0])
A:jax.numpy.lax_numpy.out->moveaxis(out, list(range(naxes)), list(range(start, start + naxes)))
A:jax.numpy.lax_numpy.fill_value->jax.lax.convert_element_type(fill_value, dtype)
A:jax.numpy.lax_numpy.dtype->lib.xla_bridge.canonicalize_dtype(dtype)
A:jax.numpy.lax_numpy.a_shape->list(shape(a))
A:jax.numpy.lax_numpy.num_dims->len(a_shape)
A:jax.numpy.lax_numpy.broadcast_shape->list(a_shape)
A:jax.numpy.lax_numpy.a_reshaped->reshape(a, (-1, shape(a)[-1]))
A:jax.numpy.lax_numpy.b_reshaped->reshape(moveaxis(b, -2, 0), (shape(b)[-2], -1))
A:jax.numpy.lax_numpy.batch_shape->_broadcast_shapes(shape(a)[:-2], shape(b)[:-2])
A:jax.numpy.lax_numpy.b->broadcast_to(b, batch_shape + shape(b)[-2:])
A:jax.numpy.lax_numpy.batch_dims->tuple(range(len(batch_shape)))
A:jax.numpy.lax_numpy.idxs->numpy.arange(a.shape[axis]).reshape(shape)
A:jax.numpy.lax_numpy.mask_idxs->where(lax._eq_meet(a, op(a, axis, keepdims=True)), idxs, maxval)
A:jax.numpy.lax_numpy.argpartition->_not_implemented(onp.argpartition)
A:jax.numpy.lax_numpy.argsort->_not_implemented(onp.argsort)
A:jax.numpy.lax_numpy.compress->_not_implemented(onp.compress)
A:jax.numpy.lax_numpy.cumprod->_not_implemented(onp.cumprod)
A:jax.numpy.lax_numpy.cumsum->_not_implemented(onp.cumsum)
A:jax.numpy.lax_numpy.delete->_not_implemented(onp.delete)
A:jax.numpy.lax_numpy.diagonal->_not_implemented(onp.diagonal)
A:jax.numpy.lax_numpy.insert->_not_implemented(onp.insert)
A:jax.numpy.lax_numpy.linspace->_not_implemented(onp.linspace)
A:jax.numpy.lax_numpy.nonzero->_not_implemented(onp.nonzero)
A:jax.numpy.lax_numpy.ptp->_not_implemented(onp.ptp)
A:jax.numpy.lax_numpy.searchsorted->_not_implemented(onp.searchsorted)
A:jax.numpy.lax_numpy.take->_not_implemented(onp.take)
A:jax.numpy.lax_numpy.trace->_not_implemented(onp.trace)
A:jax.numpy.lax_numpy.abstract_idx->core.get_aval(idx)
A:jax.numpy.lax_numpy.idx->broadcast_arrays(*idx)
A:jax.numpy.lax_numpy.(start, limit, stride, needs_rev)->_static_idx(idx, arr.shape[axis])
A:jax.numpy.lax_numpy.canonical_idx->_canonicalize_tuple_index(arr, tuple(idx))
A:jax.numpy.lax_numpy.unexpanded_shape_itr->iter(result.shape)
A:jax.numpy.lax_numpy.flat_idx->tuple((mod(ravel(x), arr_sliced.shape[i]) for (i, x) in zip(axes, idx_advanced)))
A:jax.numpy.lax_numpy.arr_sliced->_rewriting_take(arr, tuple(idx_noadvanced))
A:jax.numpy.lax_numpy.(idx_advanced, axes)->zip(*advanced_pairs)
A:jax.numpy.lax_numpy.idx_advanced->broadcast_arrays(*idx_advanced)
A:jax.numpy.lax_numpy.shape_suffix->tuple(onp.delete(_shape(arr_sliced), axes))
A:jax.numpy.lax_numpy.axes_are_contiguous->numpy.all(onp.diff(axes) == 1)
A:jax.numpy.lax_numpy.len_without_none->_sum((1 for e in idx if e is not None and e is not Ellipsis))
A:jax.numpy.lax_numpy.ellipsis_index->next(ellipses, None)
A:jax.numpy.lax_numpy.end->_min(start - step, size)
jax.numpy._ArrayMeta(type(onp.ndarray))
jax.numpy._ArrayMeta.__instancecheck__(self,instance)
jax.numpy._argminmax(op,a,axis)
jax.numpy._broadcast_shapes(*shapes)
jax.numpy._canonicalize_tuple_index(arr,idx)
jax.numpy._check_arraylike(fun_name,*args)
jax.numpy._constant_like(x,const)
jax.numpy._dtype_info(dtype)
jax.numpy._float_divmod(x1,x2)
jax.numpy._is_advanced_int_indexer(idx)
jax.numpy._is_advanced_int_indexer_without_slices(idx)
jax.numpy._is_int(x)
jax.numpy._is_slice_none(idx)
jax.numpy._logical_op(np_op,bitwise_op)
jax.numpy._make_reduction(np_fun,op,init_val)
jax.numpy._not_implemented(fun)
jax.numpy._one_to_one_op(numpy_fn,lax_fn,promote_to_result_dtype=False)
jax.numpy._promote_args(fun_name,*args)
jax.numpy._promote_args_like(op,*args)
jax.numpy._promote_dtypes(*args)
jax.numpy._promote_shapes(*args)
jax.numpy._promote_to_result_dtype(op,*args)
jax.numpy._reduction_dims(a,axis)
jax.numpy._reduction_init_val(a,init_val)
jax.numpy._result_dtype(op,*args)
jax.numpy._rewriting_take(arr,idx,axis=0)
jax.numpy._static_idx(idx,size)
jax.numpy._swap_args(f)
jax.numpy._wraps(fun)
jax.numpy.allclose(a,b,rtol=1e-05,atol=1e-08)
jax.numpy.angle(x)
jax.numpy.argmax(a,axis=None)
jax.numpy.argmin(a,axis=None)
jax.numpy.array(object,dtype=None,copy=True,order='K',ndmin=0)
jax.numpy.atleast_1d(*arys)
jax.numpy.atleast_2d(*arys)
jax.numpy.broadcast_arrays(*args)
jax.numpy.broadcast_to(arr,shape)
jax.numpy.clip(a,a_min=None,a_max=None)
jax.numpy.column_stack(tup)
jax.numpy.concatenate(arrays,axis=0)
jax.numpy.conjugate(x)
jax.numpy.cos(x)
jax.numpy.cosh(x)
jax.numpy.divide(x1,x2)
jax.numpy.divmod(x1,x2)
jax.numpy.dot(a,b)
jax.numpy.expand_dims(a,axis)
jax.numpy.floor_divide(x1,x2)
jax.numpy.full(shape,fill_value,dtype=None)
jax.numpy.hstack(tup)
jax.numpy.imag(x)
jax.numpy.isclose(a,b,rtol=1e-05,atol=1e-08)
jax.numpy.lax_numpy._ArrayMeta(type(onp.ndarray))
jax.numpy.lax_numpy._ArrayMeta.__instancecheck__(self,instance)
jax.numpy.lax_numpy._argminmax(op,a,axis)
jax.numpy.lax_numpy._broadcast_shapes(*shapes)
jax.numpy.lax_numpy._canonicalize_tuple_index(arr,idx)
jax.numpy.lax_numpy._check_arraylike(fun_name,*args)
jax.numpy.lax_numpy._constant_like(x,const)
jax.numpy.lax_numpy._dtype_info(dtype)
jax.numpy.lax_numpy._float_divmod(x1,x2)
jax.numpy.lax_numpy._is_advanced_int_indexer(idx)
jax.numpy.lax_numpy._is_advanced_int_indexer_without_slices(idx)
jax.numpy.lax_numpy._is_int(x)
jax.numpy.lax_numpy._is_slice_none(idx)
jax.numpy.lax_numpy._logical_op(np_op,bitwise_op)
jax.numpy.lax_numpy._make_reduction(np_fun,op,init_val)
jax.numpy.lax_numpy._not_implemented(fun)
jax.numpy.lax_numpy._one_to_one_op(numpy_fn,lax_fn,promote_to_result_dtype=False)
jax.numpy.lax_numpy._promote_args(fun_name,*args)
jax.numpy.lax_numpy._promote_args_like(op,*args)
jax.numpy.lax_numpy._promote_dtypes(*args)
jax.numpy.lax_numpy._promote_shapes(*args)
jax.numpy.lax_numpy._promote_to_result_dtype(op,*args)
jax.numpy.lax_numpy._reduction_dims(a,axis)
jax.numpy.lax_numpy._reduction_init_val(a,init_val)
jax.numpy.lax_numpy._result_dtype(op,*args)
jax.numpy.lax_numpy._rewriting_take(arr,idx,axis=0)
jax.numpy.lax_numpy._static_idx(idx,size)
jax.numpy.lax_numpy._swap_args(f)
jax.numpy.lax_numpy._wraps(fun)
jax.numpy.lax_numpy.allclose(a,b,rtol=1e-05,atol=1e-08)
jax.numpy.lax_numpy.angle(x)
jax.numpy.lax_numpy.argmax(a,axis=None)
jax.numpy.lax_numpy.argmin(a,axis=None)
jax.numpy.lax_numpy.array(object,dtype=None,copy=True,order='K',ndmin=0)
jax.numpy.lax_numpy.atleast_1d(*arys)
jax.numpy.lax_numpy.atleast_2d(*arys)
jax.numpy.lax_numpy.broadcast_arrays(*args)
jax.numpy.lax_numpy.broadcast_to(arr,shape)
jax.numpy.lax_numpy.clip(a,a_min=None,a_max=None)
jax.numpy.lax_numpy.column_stack(tup)
jax.numpy.lax_numpy.concatenate(arrays,axis=0)
jax.numpy.lax_numpy.conjugate(x)
jax.numpy.lax_numpy.cos(x)
jax.numpy.lax_numpy.cosh(x)
jax.numpy.lax_numpy.divide(x1,x2)
jax.numpy.lax_numpy.divmod(x1,x2)
jax.numpy.lax_numpy.dot(a,b)
jax.numpy.lax_numpy.expand_dims(a,axis)
jax.numpy.lax_numpy.floor_divide(x1,x2)
jax.numpy.lax_numpy.full(shape,fill_value,dtype=None)
jax.numpy.lax_numpy.hstack(tup)
jax.numpy.lax_numpy.imag(x)
jax.numpy.lax_numpy.isclose(a,b,rtol=1e-05,atol=1e-08)
jax.numpy.lax_numpy.logaddexp(x1,x2)
jax.numpy.lax_numpy.matmul(a,b)
jax.numpy.lax_numpy.mean(a,axis=None,keepdims=False)
jax.numpy.lax_numpy.moveaxis(a,source,destination)
jax.numpy.lax_numpy.ndarray(six.with_metaclass(_ArrayMeta,onp.ndarray))
jax.numpy.lax_numpy.ones(shape,dtype=onp.dtype('float64'))
jax.numpy.lax_numpy.ones_like(x,dtype=None)
jax.numpy.lax_numpy.ravel(a,order='C')
jax.numpy.lax_numpy.real(x)
jax.numpy.lax_numpy.remainder(x1,x2)
jax.numpy.lax_numpy.repeat(a,repeats,axis=None)
jax.numpy.lax_numpy.reshape(a,newshape,order='C')
jax.numpy.lax_numpy.round(a,decimals=0)
jax.numpy.lax_numpy.sin(x)
jax.numpy.lax_numpy.sinh(x)
jax.numpy.lax_numpy.split(ary,indices_or_sections,axis=0)
jax.numpy.lax_numpy.sqrt(x)
jax.numpy.lax_numpy.squeeze(a,axis=None)
jax.numpy.lax_numpy.stack(arrays)
jax.numpy.lax_numpy.std(a,axis=None,keepdims=False,ddof=0)
jax.numpy.lax_numpy.swapaxes(a,axis1,axis2)
jax.numpy.lax_numpy.transpose(x,axis=None)
jax.numpy.lax_numpy.true_divide(x1,x2)
jax.numpy.lax_numpy.var(a,axis=None,keepdims=False,ddof=0)
jax.numpy.lax_numpy.vdot(a,b)
jax.numpy.lax_numpy.vstack(tup)
jax.numpy.lax_numpy.where(condition,x=None,y=None)
jax.numpy.lax_numpy.zeros(shape,dtype=onp.dtype('float64'))
jax.numpy.lax_numpy.zeros_like(x,dtype=None)
jax.numpy.logaddexp(x1,x2)
jax.numpy.matmul(a,b)
jax.numpy.mean(a,axis=None,keepdims=False)
jax.numpy.moveaxis(a,source,destination)
jax.numpy.ndarray(six.with_metaclass(_ArrayMeta,onp.ndarray))
jax.numpy.ones(shape,dtype=onp.dtype('float64'))
jax.numpy.ones_like(x,dtype=None)
jax.numpy.ravel(a,order='C')
jax.numpy.real(x)
jax.numpy.remainder(x1,x2)
jax.numpy.repeat(a,repeats,axis=None)
jax.numpy.reshape(a,newshape,order='C')
jax.numpy.round(a,decimals=0)
jax.numpy.sin(x)
jax.numpy.sinh(x)
jax.numpy.split(ary,indices_or_sections,axis=0)
jax.numpy.sqrt(x)
jax.numpy.squeeze(a,axis=None)
jax.numpy.stack(arrays)
jax.numpy.std(a,axis=None,keepdims=False,ddof=0)
jax.numpy.swapaxes(a,axis1,axis2)
jax.numpy.transpose(x,axis=None)
jax.numpy.true_divide(x1,x2)
jax.numpy.var(a,axis=None,keepdims=False,ddof=0)
jax.numpy.vdot(a,b)
jax.numpy.vstack(tup)
jax.numpy.where(condition,x=None,y=None)
jax.numpy.zeros(shape,dtype=onp.dtype('float64'))
jax.numpy.zeros_like(x,dtype=None)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/numpy/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/interpreters/batching.py----------------------------------------
A:jax.interpreters.batching.sizes->reduce(set.union, map(dimsize, in_dims, in_vals))
A:jax.interpreters.batching.(out_val, out_dim)->batch_transform(fun).call_wrapped(in_vals, in_dims)
A:jax.interpreters.batching.trace->BatchTrace(master, core.cur_sublevel())
A:jax.interpreters.batching.in_tracers->map(partial(BatchTracer, trace), vals, dims)
A:jax.interpreters.batching.out_tracer->BatchTrace(master, core.cur_sublevel()).full_raise(ans)
A:jax.interpreters.batching.batched_aval->get_aval(self.val)
A:jax.interpreters.batching.t->type(aval)
A:jax.interpreters.batching.(vals_in, dims_in)->unzip2(((t.val, t.batch_dim) for t in tracers))
A:jax.interpreters.batching.batched_primitive->get_primitive_batcher(primitive)
A:jax.interpreters.batching.(val_out, dim_out)->batched_primitive(vals_in, dims_in, **params)
A:jax.interpreters.batching.(vals, dims)->unzip2(((t.val, t.batch_dim) for t in tracers))
A:jax.interpreters.batching.(f, dim_out)->batch_subtrace(f, self.master, dims)
A:jax.interpreters.batching.val_out->call_primitive.bind(f, *vals, **params)
A:jax.interpreters.batching.vals->pack([t.val for t in tracers])
A:jax.interpreters.batching.batch_dim->tuple((t.batch_dim for t in tracers))
A:jax.interpreters.batching.unbatched_shape->tuple(onp.delete(aval.shape, bdim))
A:jax.interpreters.batching.primitive_batchers[prim]->partial(reducer_batcher, prim)
A:jax.interpreters.batching.args->map(partial(handle_scalar_broadcasting, ndim), args, batch_dims)
A:jax.interpreters.batching.ndim->max(map(onp.ndim, args))
A:jax.interpreters.batching.axes->tuple(onp.where(onp.less(axes, bdim), axes, onp.add(axes, 1)))
A:jax.interpreters.batching.bdim_out->list(onp.delete(onp.arange(operand.ndim), axes)).index(bdim)
A:jax.interpreters.batching.aval->get_aval(x)
A:jax.interpreters.batching.x->broadcast(x, sz)
jax.interpreters.batching.BatchTrace(Trace)
jax.interpreters.batching.BatchTrace.lift(self,val)
jax.interpreters.batching.BatchTrace.pack(self,tracers)
jax.interpreters.batching.BatchTrace.post_process_call(self,_,out_tracer)
jax.interpreters.batching.BatchTrace.process_call(self,call_primitive,f,tracers,params)
jax.interpreters.batching.BatchTrace.process_primitive(self,primitive,tracers,params)
jax.interpreters.batching.BatchTrace.pure(self,val)
jax.interpreters.batching.BatchTrace.sublift(self,val)
jax.interpreters.batching.BatchTracer(self,trace,val,batch_dim)
jax.interpreters.batching.BatchTracer.__init__(self,trace,val,batch_dim)
jax.interpreters.batching.BatchTracer.aval(self)
jax.interpreters.batching.BatchTracer.full_lower(self)
jax.interpreters.batching.BatchTracer.unpack(self)
jax.interpreters.batching.add_batched(batched_args,batch_dims)
jax.interpreters.batching.batch(fun,in_vals,in_dims,out_dim_target)
jax.interpreters.batching.batch_subtrace(master,dims,*vals)
jax.interpreters.batching.batch_transform(vals,dims)
jax.interpreters.batching.bdim_at_front(x,bdim,broadcast_size=1)
jax.interpreters.batching.broadcast(x,sz)
jax.interpreters.batching.broadcast_batcher(prim,batched_args,batch_dims,**params)
jax.interpreters.batching.defbroadcasting(prim)
jax.interpreters.batching.defreducer(prim)
jax.interpreters.batching.defvectorized(prim)
jax.interpreters.batching.dimsize(dim,x)
jax.interpreters.batching.get_aval(x)
jax.interpreters.batching.get_primitive_batcher(p)
jax.interpreters.batching.handle_scalar_broadcasting(nd,x,bdim)
jax.interpreters.batching.move_dim_to_front(x,dim)
jax.interpreters.batching.moveaxis(sz,dst,src,x)
jax.interpreters.batching.raise_to_shaped(aval)
jax.interpreters.batching.reducer_batcher(prim,batched_args,batch_dims,axes,**kwargs)
jax.interpreters.batching.remove_batch_dim_from_aval(bdim,aval)
jax.interpreters.batching.shaped_aval(x)
jax.interpreters.batching.shaped_jaxtuple(xs)
jax.interpreters.batching.vectorized_batcher(prim,batched_args,batch_dims,**params)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/interpreters/partial_eval.py----------------------------------------
A:jax.interpreters.partial_eval.tracers->map(self.instantiate_const, tracers)
A:jax.interpreters.partial_eval.out_aval->primitive.abstract_eval(*avals, **params)
A:jax.interpreters.partial_eval.eqn->JaxprEqn([self], [None] * n, core.identity_p, (), True, {})
A:jax.interpreters.partial_eval.pval->pack_pvals([t.pval for t in tracers])
A:jax.interpreters.partial_eval.(in_pvs, in_consts)->unzip2([t.pval for t in tracers])
A:jax.interpreters.partial_eval.(fun, aux)->partial_eval(f, self, in_pvs)
A:jax.interpreters.partial_eval.(out_pv_const, consts)->call_primitive.bind(fun, *in_consts, **params)
A:jax.interpreters.partial_eval.(out_pv, jaxpr, env)->aux()
A:jax.interpreters.partial_eval.const_tracers->map(trace.new_instantiated_const, consts)
A:jax.interpreters.partial_eval.env_tracers->map(trace.full_raise, env)
A:jax.interpreters.partial_eval.(jaxpr, consts, env)->tracers_to_jaxpr(in_tracers, out_tracer)
A:jax.interpreters.partial_eval.out->pack((out_pv_const, pack(consts)))
A:jax.interpreters.partial_eval.trace->JaxprTrace(master, core.cur_sublevel())
A:jax.interpreters.partial_eval.f->trace_to_subjaxpr(f, trace.master)
A:jax.interpreters.partial_eval.n->len(pv)
A:jax.interpreters.partial_eval.key->object()
A:jax.interpreters.partial_eval.d->Destructuring(i, eqn, key)
A:jax.interpreters.partial_eval.Destructuring->namedtuple('Destructuring', ['i', 'eqn', 'key'])
A:jax.interpreters.partial_eval.abstract_unit->core.AbstractTuple()
A:jax.interpreters.partial_eval.(pvs, consts)->unzip2(pvals)
A:jax.interpreters.partial_eval.pv_out->JaxprTracerTuple(pvs)
A:jax.interpreters.partial_eval.fun->trace_to_subjaxpr(fun, master)
A:jax.interpreters.partial_eval.(jaxpr, (out_pval, consts, env))->trace_to_subjaxpr(fun, master).call_wrapped(pvals, **kwargs)
A:jax.interpreters.partial_eval.in_tracers->map(trace.new_arg, pvals)
A:jax.interpreters.partial_eval.out_tracer->JaxprTrace(master, core.cur_sublevel()).full_raise(out_tracer)
A:jax.interpreters.partial_eval.FreeVar->namedtuple('FreeVar', ['val'])
A:jax.interpreters.partial_eval.ConstVar->namedtuple('ConstVar', ['val'])
A:jax.interpreters.partial_eval.LambdaBinding->namedtuple('LambdaBinding', [])
A:jax.interpreters.partial_eval.invars->map(var, in_tracers)
A:jax.interpreters.partial_eval.newvar->gensym('')
A:jax.interpreters.partial_eval.t_to_var->defaultdict(newvar)
A:jax.interpreters.partial_eval.sorted_tracers->toposort(out_tracer)
A:jax.interpreters.partial_eval.(env_vars, env_vals)->unzip2(env.items())
A:jax.interpreters.partial_eval.(const_vars, const_vals)->unzip2(consts.items())
A:jax.interpreters.partial_eval.jaxpr->Jaxpr(const_vars, env_vars, invars, var(out_tracer), eqns)
A:jax.interpreters.partial_eval.counter->itertools.count()
A:jax.interpreters.partial_eval.in_vals->map(read, eqn.invars)
A:jax.interpreters.partial_eval.ans->merge_pvals(jaxpr_ans, pval)
A:jax.interpreters.partial_eval.pvals->map(abstractify, args)
A:jax.interpreters.partial_eval.(jaxpr, (pval, consts, env))->trace_to_subjaxpr(fun, master).call_wrapped(pvals)
A:jax.interpreters.partial_eval.jaxpr_ans->eval_jaxpr_raw(jaxpr, consts, env, *args)
A:jax.interpreters.partial_eval.compiled_call_p->Primitive('compiled_call')
A:jax.interpreters.partial_eval.compiled_call->partial(core.call_bind, compiled_call_p)
jax.interpreters.partial_eval.JaxprTrace(Trace)
jax.interpreters.partial_eval.JaxprTrace.instantiate_const(self,tracer)
jax.interpreters.partial_eval.JaxprTrace.lift(self,val)
jax.interpreters.partial_eval.JaxprTrace.new_arg(self,pval)
jax.interpreters.partial_eval.JaxprTrace.new_const(self,val)
jax.interpreters.partial_eval.JaxprTrace.new_instantiated_const(self,val)
jax.interpreters.partial_eval.JaxprTrace.pack(self,tracers)
jax.interpreters.partial_eval.JaxprTrace.post_process_call(self,call_primitive,out_tracer)
jax.interpreters.partial_eval.JaxprTrace.process_call(self,call_primitive,f,tracers,params)
jax.interpreters.partial_eval.JaxprTrace.process_primitive(self,primitive,tracers,params)
jax.interpreters.partial_eval.JaxprTrace.pure(self,val)
jax.interpreters.partial_eval.JaxprTrace.sublift(self,val)
jax.interpreters.partial_eval.JaxprTracer(self,trace,pval,recipe)
jax.interpreters.partial_eval.JaxprTracer.__init__(self,trace,pval,recipe)
jax.interpreters.partial_eval.JaxprTracer.__repr__(self)
jax.interpreters.partial_eval.JaxprTracer.aval(self)
jax.interpreters.partial_eval.JaxprTracer.full_lower(self)
jax.interpreters.partial_eval.JaxprTracer.ispure(self)
jax.interpreters.partial_eval.JaxprTracer.parents(self)
jax.interpreters.partial_eval.JaxprTracer.unpack(self)
jax.interpreters.partial_eval.JaxprTracerTuple(tuple)
jax.interpreters.partial_eval.PartialVal(cls,xs)
jax.interpreters.partial_eval.PartialVal.__new__(cls,xs)
jax.interpreters.partial_eval.Var(self,count,suffix)
jax.interpreters.partial_eval.Var.__init__(self,count,suffix)
jax.interpreters.partial_eval.Var.__repr__(self)
jax.interpreters.partial_eval.abstract_eval_unimplemented(primitive,*args,**kwargs)
jax.interpreters.partial_eval.abstractify(x)
jax.interpreters.partial_eval.as_abstract_val(pv)
jax.interpreters.partial_eval.compiled_call_impl(fun,*args,**kwargs)
jax.interpreters.partial_eval.def_abstract_eval(primitive,abstract_eval)
jax.interpreters.partial_eval.eqn_parents(eqn)
jax.interpreters.partial_eval.eqn_tracer_to_var(var,outvars,eqn)
jax.interpreters.partial_eval.eval_jaxpr_raw(jaxpr,consts,freevar_vals,*args)
jax.interpreters.partial_eval.gensym(suffix)
jax.interpreters.partial_eval.merge_pvals(val,pval)
jax.interpreters.partial_eval.pack_pvals(pvals)
jax.interpreters.partial_eval.partial_eval(f,trace,pvs)
jax.interpreters.partial_eval.partial_eval_wrapper(avals,*consts,**kwargs)
jax.interpreters.partial_eval.partial_val_aval(pv,const)
jax.interpreters.partial_eval.trace_to_jaxpr(fun,pvals,**kwargs)
jax.interpreters.partial_eval.trace_to_subjaxpr(master,pvals,**kwargs)
jax.interpreters.partial_eval.trace_unwrapped_to_jaxpr(fun,pvals,**kwargs)
jax.interpreters.partial_eval.tracers_to_jaxpr(in_tracers,out_tracer)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/interpreters/ad.py----------------------------------------
A:jax.interpreters.ad.out_tangent->instantiate_zeros(out_primal, out_tangent)
A:jax.interpreters.ad.trace->JVPTrace(master, core.cur_sublevel())
A:jax.interpreters.ad.out_tracer->JVPTrace(master, core.cur_sublevel()).full_raise(ans)
A:jax.interpreters.ad.jvpfun->pack_output(jvp(traceable))
A:jax.interpreters.ad.(jaxpr, out_pval, consts)->pe.trace_to_jaxpr(jvpfun, in_pvals)
A:jax.interpreters.ad.(pval_primal, pval_tangent)->unpair_pval(out_pval)
A:jax.interpreters.ad.(out_primal, pval, jaxpr, consts)->linearize(traceable, *primals)
A:jax.interpreters.ad.ct->ignore_consts(ct, pval)
A:jax.interpreters.ad.dummy_primal_and_ct->pack((core.unit, ct))
A:jax.interpreters.ad.(_, arg_cts)->backward_pass(jaxpr, consts, (), dummy_primal_and_ct)
A:jax.interpreters.ad.cts_in->map(read_cotangent, eqn.outvars)
A:jax.interpreters.ad.invals->map(primal_env.get, eqn.invars)
A:jax.interpreters.ad.(subjaxprs, sub_consts, sub_freevar_vals)->unzip3([(subjaxpr, map(primal_env.get, const_vars), map(primal_env.get, bound_vars)) for (subjaxpr, const_vars, bound_vars) in eqn.bound_subjaxprs])
A:jax.interpreters.ad.(cts_out, ct_free_vars_out)->get_primitive_transpose(eqn.primitive)(eqn.params, subjaxprs, sub_consts, sub_freevar_vals, invals, ct_in)
A:jax.interpreters.ad.cts_out->get_primitive_transpose(eqn.primitive)(ct_in, *invals, **eqn.params)
A:jax.interpreters.ad.cotangents_out->map(read_cotangent, jaxpr.invars)
A:jax.interpreters.ad.freevar_cts->map(read_cotangent, jaxpr.freevars)
A:jax.interpreters.ad.(primal_out, tangent_out)->build_tree(out_tree_def(), result)
A:jax.interpreters.ad.(nonzero_tangents, in_tree_def)->tree_to_jaxtuples(tangents)
A:jax.interpreters.ad.(f, out_tree_def)->traceable(jvp_subtrace(f, self.master), in_tree_def)
A:jax.interpreters.ad.result->call_primitive.bind(f, pack(primals), nonzero_tangents)
A:jax.interpreters.ad.(out_jtuple, tree_def)->tree_to_jaxtuples((cotangents_out, freevar_cts))
A:jax.interpreters.ad.xt->TangentTuple((zero,) * len(yt))
A:jax.interpreters.ad.yt->TangentTuple((zero,) * len(xt))
A:jax.interpreters.ad.primals->pack((t.primal for t in tracers))
A:jax.interpreters.ad.tangents->map(instantiate_zeros, primals, tangents)
A:jax.interpreters.ad.primitive_jvps[primitive]->partial(zero_jvp, primitive)
A:jax.interpreters.ad.primitive_transposes[primitive]->partial(linear_transpose, transpose_rule)
A:jax.interpreters.ad.val_out->primitive.bind(*primals, **params)
A:jax.interpreters.ad.primitive_transposes[prim]->partial(bilinear_transpose, lhs_rule, rhs_rule)
A:jax.interpreters.ad.defbilinear->partial(defbilinear_broadcasting, lambda g, x: g)
A:jax.interpreters.ad.new_tangents->build_tree(in_tree_def, new_tangents)
A:jax.interpreters.ad.(ct, freevar_vals)->build_tree(in_tree_def, (ct, freevar_vals))
A:jax.interpreters.ad.((ct, freevar_vals), in_tree_def)->tree_to_jaxtuples((ct, freevar_vals))
A:jax.interpreters.ad.fun->wrap_init(backward_pass)
A:jax.interpreters.ad.(fun, out_tree_def)->transposed_fun(fun, jaxpr, in_tree_def)
A:jax.interpreters.ad.all_args->pack((pack(consts), pack(freevar_vals), ct))
A:jax.interpreters.ad.ans->primitive.bind(fun, all_args, **params)
A:jax.interpreters.ad.primitive_transposes[core.call_p]->partial(call_transpose, call_p)
A:jax.interpreters.ad.primitive_transposes[pe.compiled_call_p]->partial(call_transpose, pe.compiled_call_p)
A:jax.interpreters.ad.primitive_transposes[xla.xla_call_p]->partial(call_transpose, xla.xla_call_p)
A:jax.interpreters.ad.tree_to_jaxtuples->partial(process_pytree, pack)
jax.interpreters.ad.JVPTrace(Trace)
jax.interpreters.ad.JVPTrace.join(self,xt,yt)
jax.interpreters.ad.JVPTrace.lift(self,val)
jax.interpreters.ad.JVPTrace.pack(self,tracers)
jax.interpreters.ad.JVPTrace.post_process_call(self,_,out_tracer)
jax.interpreters.ad.JVPTrace.process_call(self,call_primitive,f,tracers,params)
jax.interpreters.ad.JVPTrace.process_primitive(self,primitive,tracers,params)
jax.interpreters.ad.JVPTrace.pure(self,val)
jax.interpreters.ad.JVPTrace.sublift(self,val)
jax.interpreters.ad.JVPTracer(self,trace,primal,tangent)
jax.interpreters.ad.JVPTracer.__init__(self,trace,primal,tangent)
jax.interpreters.ad.JVPTracer.aval(self)
jax.interpreters.ad.JVPTracer.full_lower(self)
jax.interpreters.ad.JVPTracer.unpack(self)
jax.interpreters.ad.TangentTuple(tuple)
jax.interpreters.ad.add_tangents(x,y)
jax.interpreters.ad.backward_pass(jaxpr,consts,freevar_vals,cotangent_in)
jax.interpreters.ad.bilinear_transpose(lhs_rule,rhs_rule,cotangent,x,y,**kwargs)
jax.interpreters.ad.call_transpose(primitive,params,jaxpr,consts,freevar_vals,args,ct)
jax.interpreters.ad.defbilinear_broadcasting(bcast,prim,lhs_rule,rhs_rule)
jax.interpreters.ad.defjvp(primitive,*jvprules)
jax.interpreters.ad.defjvp2(primitive,*jvprules)
jax.interpreters.ad.defjvp_zero(primitive)
jax.interpreters.ad.deflinear(primitive,transpose_rule)
jax.interpreters.ad.get_primitive_transpose(p)
jax.interpreters.ad.ignore_consts(ct,pval)
jax.interpreters.ad.instantiate_zeros(example,tangent)
jax.interpreters.ad.jvp(fun)
jax.interpreters.ad.jvp_subtrace(master,primals,tangents)
jax.interpreters.ad.jvpfun(primals,tangents)
jax.interpreters.ad.linear_jvp(primitive,primals,tangents,**params)
jax.interpreters.ad.linear_transpose(transpose_rule,cotangent,*args,**kwargs)
jax.interpreters.ad.linearize(traceable,*primals)
jax.interpreters.ad.pack_output(*args)
jax.interpreters.ad.standard_jvp(jvprules,primitive,primals,tangents,**params)
jax.interpreters.ad.standard_jvp2(jvprules,primitive,primals,tangents,**params)
jax.interpreters.ad.traceable(in_tree_def,new_primals,new_tangents)
jax.interpreters.ad.transposed_fun(jaxpr,in_tree_def,args)
jax.interpreters.ad.unpair_pval(pval)
jax.interpreters.ad.vjp(traceable,primals)
jax.interpreters.ad.zero_jvp(primitive,primals,tangents,**params)


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/interpreters/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/jax/jax0.1.1/interpreters/xla.py----------------------------------------
A:jax.interpreters.xla.abstract_args->map(abstractify, args)
A:jax.interpreters.xla.compiled_fun->xla_callable(fun, *map(abstractify, flat_args))
A:jax.interpreters.xla.shapes->map(xla_shape, abstract_args)
A:jax.interpreters.xla.built_c->jaxpr_computation(jaxpr, const_vals, (), *arg_shapes)
A:jax.interpreters.xla.result_shape->xla_shape_to_result_shape(built_c.GetReturnValueShape())
A:jax.interpreters.xla.handle_result->result_handler(result_shape)
A:jax.interpreters.xla.compiled->jaxpr_computation(jaxpr, const_vals, (), *arg_shapes).Compile(shapes, xb.get_compile_options())
A:jax.interpreters.xla.c->lib.xla_bridge.make_computation_builder('jaxpr_computation')
A:jax.interpreters.xla.xla_args->map(c.ParameterWithShape, shapes)
A:jax.interpreters.xla.xla_result->translation_rule(prim)(c, *xla_args, **kwargs)
A:jax.interpreters.xla.handlers->list(map(result_handler, result_shape))
A:jax.interpreters.xla.bufs->device_buffer.destructure()
A:jax.interpreters.xla.arg_shapes->list(map(xla_shape, abstract_args))
A:jax.interpreters.xla.consts_env->dict(zip(jaxpr.constvars, const_vals))
A:jax.interpreters.xla.in_nodes->map(read, eqn.invars)
A:jax.interpreters.xla.in_shapes->map(c.GetShape, in_nodes)
A:jax.interpreters.xla.ans->translation_rule(eqn.primitive)(c, *subfuns + in_nodes, **eqn.params)
A:jax.interpreters.xla.num_elements->len(c.GetShape(ans).tuple_shapes())
A:jax.interpreters.xla.forward_to_value->partial(forward_method, '_value')
A:jax.interpreters.xla.self._npy_value->self.device_buffer.to_py()
A:jax.interpreters.xla.npy_value->numpy.stack([a, b], -1).view(self.dtype).reshape(self.shape)
A:jax.interpreters.xla.shape_str->','.join(map(str, self.shape))
A:jax.interpreters.xla.__array__->partialmethod(forward_to_value, onp.asarray)
A:jax.interpreters.xla.__str__->partialmethod(forward_to_value, str)
A:jax.interpreters.xla.__bool____nonzero__->partialmethod(forward_to_value, bool)
A:jax.interpreters.xla.__float__->partialmethod(forward_to_value, float)
A:jax.interpreters.xla.__int__->partialmethod(forward_to_value, int)
A:jax.interpreters.xla.__long__->partialmethod(forward_to_value, long)
A:jax.interpreters.xla.__complex__->partialmethod(forward_to_value, complex)
A:jax.interpreters.xla.__hex__->partialmethod(forward_to_value, hex)
A:jax.interpreters.xla.__oct__->partialmethod(forward_to_value, oct)
A:jax.interpreters.xla.__reduce__->partialmethod(forward_to_value, op.methodcaller('__reduce__'))
A:jax.interpreters.xla.jtuple_trees->tuple(map(partial(build_tree, iter(flat_args)), in_trees))
A:jax.interpreters.xla.(ans_flat, out_tree)->tree_flatten(ans)
A:jax.interpreters.xla.(flat_children, child_specs)->unzip2(map(tree_flatten, maybe_tree))
A:jax.interpreters.xla.JTupleTreeDef->namedtuple('JTupleTreeDef', ['child_specs'])
A:jax.interpreters.xla.leaf->Leaf()
A:jax.interpreters.xla.(flat_args, in_trees)->unzip2(map(tree_flatten, args))
A:jax.interpreters.xla.flat_args->concatenate(flat_args)
A:jax.interpreters.xla.(fun, out_tree)->flatten_fun(fun, in_trees)
A:jax.interpreters.xla.flat_ans->compiled_fun(*flat_args)
A:jax.interpreters.xla.(jaxpr, (pval, consts, env))->trace_to_subjaxpr(fun, master).call_wrapped(pvals)
A:jax.interpreters.xla.(compiled, result_shape)->compile_jaxpr(jaxpr, consts, *abstract_args)
A:jax.interpreters.xla.out_buf->jaxpr_computation(jaxpr, const_vals, (), *arg_shapes).Compile(shapes, xb.get_compile_options()).Execute(input_bufs, not core.skip_checks)
A:jax.interpreters.xla.xla_call_p->core.Primitive('xla_call')
A:jax.interpreters.xla.xla_call->partial(core.call_bind, xla_call_p)
jax.interpreters.xla.DeviceArray(self,device_buffer,shape,dtype,ndim,size)
jax.interpreters.xla.DeviceArray.__eq__(self,other)
jax.interpreters.xla.DeviceArray.__format__(self,format_spec)
jax.interpreters.xla.DeviceArray.__hash__(self)
jax.interpreters.xla.DeviceArray.__init__(self,device_buffer,shape,dtype,ndim,size)
jax.interpreters.xla.DeviceArray.__iter__(self)
jax.interpreters.xla.DeviceArray.__len__(self)
jax.interpreters.xla.DeviceArray.__repr__(self)
jax.interpreters.xla.DeviceArray.__reversed__(self)
jax.interpreters.xla.DeviceArray._value(self)
jax.interpreters.xla.DeviceArray.copy(self)
jax.interpreters.xla.DeviceValue(self,device_buffer)
jax.interpreters.xla.DeviceValue.__init__(self,device_buffer)
jax.interpreters.xla.Leaf(object)
jax.interpreters.xla.Leaf.__repr__(self)
jax.interpreters.xla.ResultArray(tuple)
jax.interpreters.xla.ResultTuple(tuple)
jax.interpreters.xla.abstractify(x)
jax.interpreters.xla.abstractify_tuple(tup)
jax.interpreters.xla.apply_primitive(prim,*args,**kwargs)
jax.interpreters.xla.aval_from_xla_shape(shape)
jax.interpreters.xla.build_tree(xs,tree_spec)
jax.interpreters.xla.canonicalize_ndarray_dtype(x)
jax.interpreters.xla.canonicalize_pyval_dtype(x)
jax.interpreters.xla.canonicalize_tuple_dtype(tup)
jax.interpreters.xla.compile_jaxpr(jaxpr,const_vals,*abstract_args)
jax.interpreters.xla.device_put(x)
jax.interpreters.xla.execute_compiled(compiled,pval,handle_result,*args)
jax.interpreters.xla.execute_compiled_primitive(compiled,result_handler,*args)
jax.interpreters.xla.flatten_fun(in_trees,*flat_args)
jax.interpreters.xla.forward_method(attrname,self,fun,*args)
jax.interpreters.xla.identity(x)
jax.interpreters.xla.jaxpr_computation(jaxpr,const_vals,freevar_shapes,*arg_shapes)
jax.interpreters.xla.primitive_computation(prim,*shapes,**kwargs)
jax.interpreters.xla.result_handler(result_shape)
jax.interpreters.xla.translation_rule(p)
jax.interpreters.xla.tree_flatten(maybe_tree)
jax.interpreters.xla.unit_constant(c,val)
jax.interpreters.xla.xla_call_impl(fun,*args)
jax.interpreters.xla.xla_callable(fun,*abstract_args)
jax.interpreters.xla.xla_destructure(c,ans)
jax.interpreters.xla.xla_primitive_callable(prim,*abstract_args,**kwargs)
jax.interpreters.xla.xla_shape(x)
jax.interpreters.xla.xla_shape_to_result_shape(xla_shape)

