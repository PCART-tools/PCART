
----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_content.py----------------------------------------
A:httpx._content.self._is_generator->inspect.isasyncgen(stream)
A:httpx._content.chunk->self._stream.read(self.CHUNK_SIZE)
A:httpx._content.content_length->str(len(body))
A:httpx._content.content_length_or_none->peek_filelike_length(content)
A:httpx._content.body->json_dumps(json).encode('utf-8')
A:httpx._content.multipart->MultipartStream(data=data, files=files, boundary=boundary)
A:httpx._content.headers->MultipartStream(data=data, files=files, boundary=boundary).get_headers()
httpx.AsyncIteratorByteStream(self,stream:AsyncIterable[bytes])
httpx.AsyncIteratorByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx.ByteStream(self,stream:bytes)
httpx.ByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx.ByteStream.__iter__(self)->Iterator[bytes]
httpx.IteratorByteStream(self,stream:Iterable[bytes])
httpx.IteratorByteStream.__iter__(self)->Iterator[bytes]
httpx.UnattachedStream(AsyncByteStream,SyncByteStream)
httpx.UnattachedStream.__aiter__(self)->AsyncIterator[bytes]
httpx.UnattachedStream.__iter__(self)->Iterator[bytes]
httpx._content.AsyncIteratorByteStream(self,stream:AsyncIterable[bytes])
httpx._content.AsyncIteratorByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx._content.AsyncIteratorByteStream.__init__(self,stream:AsyncIterable[bytes])
httpx._content.ByteStream(self,stream:bytes)
httpx._content.ByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx._content.ByteStream.__init__(self,stream:bytes)
httpx._content.ByteStream.__iter__(self)->Iterator[bytes]
httpx._content.IteratorByteStream(self,stream:Iterable[bytes])
httpx._content.IteratorByteStream.__init__(self,stream:Iterable[bytes])
httpx._content.IteratorByteStream.__iter__(self)->Iterator[bytes]
httpx._content.UnattachedStream(AsyncByteStream,SyncByteStream)
httpx._content.UnattachedStream.__aiter__(self)->AsyncIterator[bytes]
httpx._content.UnattachedStream.__iter__(self)->Iterator[bytes]
httpx._content.encode_content(content:str|bytes|Iterable[bytes]|AsyncIterable[bytes])->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx._content.encode_html(html:str)->tuple[dict[str, str], ByteStream]
httpx._content.encode_json(json:Any)->tuple[dict[str, str], ByteStream]
httpx._content.encode_multipart_data(data:RequestData,files:RequestFiles,boundary:bytes|None)->tuple[dict[str, str], MultipartStream]
httpx._content.encode_request(content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:Any|None=None,boundary:bytes|None=None)->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx._content.encode_response(content:ResponseContent|None=None,text:str|None=None,html:str|None=None,json:Any|None=None)->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx._content.encode_text(text:str)->tuple[dict[str, str], ByteStream]
httpx._content.encode_urlencoded_data(data:RequestData)->tuple[dict[str, str], ByteStream]
httpx.encode_content(content:str|bytes|Iterable[bytes]|AsyncIterable[bytes])->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx.encode_html(html:str)->tuple[dict[str, str], ByteStream]
httpx.encode_json(json:Any)->tuple[dict[str, str], ByteStream]
httpx.encode_multipart_data(data:RequestData,files:RequestFiles,boundary:bytes|None)->tuple[dict[str, str], MultipartStream]
httpx.encode_request(content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:Any|None=None,boundary:bytes|None=None)->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx.encode_response(content:ResponseContent|None=None,text:str|None=None,html:str|None=None,json:Any|None=None)->tuple[dict[str, str], SyncByteStream | AsyncByteStream]
httpx.encode_text(text:str)->tuple[dict[str, str], ByteStream]
httpx.encode_urlencoded_data(data:RequestData)->tuple[dict[str, str], ByteStream]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_status_codes.py----------------------------------------
A:httpx._status_codes.obj->int.__new__(cls, value)
httpx._status_codes.codes(cls,value:int,phrase:str='')
httpx._status_codes.codes.__new__(cls,value:int,phrase:str='')
httpx._status_codes.codes.__str__(self)->str
httpx._status_codes.codes.get_reason_phrase(cls,value:int)->str
httpx._status_codes.codes.is_client_error(cls,value:int)->bool
httpx._status_codes.codes.is_error(cls,value:int)->bool
httpx._status_codes.codes.is_informational(cls,value:int)->bool
httpx._status_codes.codes.is_redirect(cls,value:int)->bool
httpx._status_codes.codes.is_server_error(cls,value:int)->bool
httpx._status_codes.codes.is_success(cls,value:int)->bool
httpx.codes(cls,value:int,phrase:str='')
httpx.codes.__str__(self)->str
httpx.codes.get_reason_phrase(cls,value:int)->str
httpx.codes.is_client_error(cls,value:int)->bool
httpx.codes.is_error(cls,value:int)->bool
httpx.codes.is_informational(cls,value:int)->bool
httpx.codes.is_redirect(cls,value:int)->bool
httpx.codes.is_server_error(cls,value:int)->bool
httpx.codes.is_success(cls,value:int)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/__init__.py----------------------------------------
A:httpx.__init__.__locals->locals()


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_exceptions.py----------------------------------------
httpx.CloseError(NetworkError)
httpx.ConnectError(NetworkError)
httpx.ConnectTimeout(TimeoutException)
httpx.CookieConflict(self,message:str)
httpx.DecodingError(RequestError)
httpx.HTTPError(self,message:str)
httpx.HTTPError.request(self)->Request
httpx.HTTPError.request(self,request:Request)->None
httpx.HTTPStatusError(self,message:str,*,request:Request,response:Response)
httpx.InvalidURL(self,message:str)
httpx.LocalProtocolError(ProtocolError)
httpx.NetworkError(TransportError)
httpx.PoolTimeout(TimeoutException)
httpx.ProtocolError(TransportError)
httpx.ProxyError(TransportError)
httpx.ReadError(NetworkError)
httpx.ReadTimeout(TimeoutException)
httpx.RemoteProtocolError(ProtocolError)
httpx.RequestError(self,message:str,*,request:Request|None=None)
httpx.RequestNotRead(self)
httpx.ResponseNotRead(self)
httpx.StreamClosed(self)
httpx.StreamConsumed(self)
httpx.StreamError(self,message:str)
httpx.TimeoutException(TransportError)
httpx.TooManyRedirects(RequestError)
httpx.TransportError(RequestError)
httpx.UnsupportedProtocol(TransportError)
httpx.WriteError(NetworkError)
httpx.WriteTimeout(TimeoutException)
httpx._exceptions.CloseError(NetworkError)
httpx._exceptions.ConnectError(NetworkError)
httpx._exceptions.ConnectTimeout(TimeoutException)
httpx._exceptions.CookieConflict(self,message:str)
httpx._exceptions.CookieConflict.__init__(self,message:str)
httpx._exceptions.DecodingError(RequestError)
httpx._exceptions.HTTPError(self,message:str)
httpx._exceptions.HTTPError.__init__(self,message:str)
httpx._exceptions.HTTPError.request(self)->Request
httpx._exceptions.HTTPError.request(self,request:Request)->None
httpx._exceptions.HTTPStatusError(self,message:str,*,request:Request,response:Response)
httpx._exceptions.HTTPStatusError.__init__(self,message:str,*,request:Request,response:Response)
httpx._exceptions.InvalidURL(self,message:str)
httpx._exceptions.InvalidURL.__init__(self,message:str)
httpx._exceptions.LocalProtocolError(ProtocolError)
httpx._exceptions.NetworkError(TransportError)
httpx._exceptions.PoolTimeout(TimeoutException)
httpx._exceptions.ProtocolError(TransportError)
httpx._exceptions.ProxyError(TransportError)
httpx._exceptions.ReadError(NetworkError)
httpx._exceptions.ReadTimeout(TimeoutException)
httpx._exceptions.RemoteProtocolError(ProtocolError)
httpx._exceptions.RequestError(self,message:str,*,request:Request|None=None)
httpx._exceptions.RequestError.__init__(self,message:str,*,request:Request|None=None)
httpx._exceptions.RequestNotRead(self)
httpx._exceptions.RequestNotRead.__init__(self)
httpx._exceptions.ResponseNotRead(self)
httpx._exceptions.ResponseNotRead.__init__(self)
httpx._exceptions.StreamClosed(self)
httpx._exceptions.StreamClosed.__init__(self)
httpx._exceptions.StreamConsumed(self)
httpx._exceptions.StreamConsumed.__init__(self)
httpx._exceptions.StreamError(self,message:str)
httpx._exceptions.StreamError.__init__(self,message:str)
httpx._exceptions.TimeoutException(TransportError)
httpx._exceptions.TooManyRedirects(RequestError)
httpx._exceptions.TransportError(RequestError)
httpx._exceptions.UnsupportedProtocol(TransportError)
httpx._exceptions.WriteError(NetworkError)
httpx._exceptions.WriteTimeout(TimeoutException)
httpx._exceptions.request_context(request:Request|None=None)->typing.Iterator[None]
httpx.request_context(request:Request|None=None)->typing.Iterator[None]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_utils.py----------------------------------------
A:httpx._utils._HTML5_FORM_ENCODING_RE->re.compile('|'.join([re.escape(c) for c in _HTML5_FORM_ENCODING_REPLACEMENTS.keys()]))
A:httpx._utils.bytes_value->value.strip(replace_chars).encode(encoding or 'ascii')
A:httpx._utils.value->value.strip(replace_chars).strip(replace_chars)
A:httpx._utils.ssl_file->Path(os.environ['SSL_CERT_FILE'])
A:httpx._utils.ssl_path->Path(os.environ['SSL_CERT_DIR'])
A:httpx._utils.(url, params)->val.split(';', 1)
A:httpx._utils.(key, value)->param.split('=')
A:httpx._utils.link[key.strip(replace_chars)]->value.strip(replace_chars).strip(replace_chars).strip(replace_chars)
A:httpx._utils.msg->email.message.Message()
A:httpx._utils.v->to_bytes_or_str('[secure]', match_type_of=v)
A:httpx._utils.proxy_info->getproxies()
A:httpx._utils.fd->stream.fileno()
A:httpx._utils.offset->stream.tell()
A:httpx._utils.length->stream.seek(0, os.SEEK_END)
A:httpx._utils.library->sniffio.current_async_library()
A:httpx._utils.self.started->time.perf_counter()
A:httpx._utils.now->time.perf_counter()
A:httpx._utils.url->URL(pattern)
A:httpx._utils.domain->re.escape(url.host)
A:httpx._utils.self.host_regex->re.compile(f'^{domain}$')
httpx._utils.Timer
httpx._utils.Timer._get_time(self)->float
httpx._utils.Timer.async_elapsed(self)->float
httpx._utils.Timer.async_start(self)->None
httpx._utils.Timer.sync_elapsed(self)->float
httpx._utils.Timer.sync_start(self)->None
httpx._utils.URLPattern(self,pattern:str)
httpx._utils.URLPattern.__eq__(self,other:typing.Any)->bool
httpx._utils.URLPattern.__hash__(self)->int
httpx._utils.URLPattern.__init__(self,pattern:str)
httpx._utils.URLPattern.__lt__(self,other:URLPattern)->bool
httpx._utils.URLPattern.matches(self,other:URL)->bool
httpx._utils.URLPattern.priority(self)->tuple[int, int, int]
httpx._utils.format_form_param(name:str,value:str)->bytes
httpx._utils.get_ca_bundle_from_env()->str | None
httpx._utils.get_environment_proxies()->dict[str, str | None]
httpx._utils.guess_content_type(filename:str|None)->str | None
httpx._utils.is_https_redirect(url:URL,location:URL)->bool
httpx._utils.is_ipv4_hostname(hostname:str)->bool
httpx._utils.is_ipv6_hostname(hostname:str)->bool
httpx._utils.is_known_encoding(encoding:str)->bool
httpx._utils.normalize_header_key(value:str|bytes,lower:bool,encoding:str|None=None)->bytes
httpx._utils.normalize_header_value(value:str|bytes,encoding:str|None=None)->bytes
httpx._utils.obfuscate_sensitive_headers(items:typing.Iterable[tuple[typing.AnyStr,typing.AnyStr]])->typing.Iterator[tuple[typing.AnyStr, typing.AnyStr]]
httpx._utils.parse_content_type_charset(content_type:str)->str | None
httpx._utils.parse_header_links(value:str)->list[dict[str, str]]
httpx._utils.peek_filelike_length(stream:typing.Any)->int | None
httpx._utils.port_or_default(url:URL)->int | None
httpx._utils.primitive_value_to_str(value:PrimitiveData)->str
httpx._utils.same_origin(url:URL,other:URL)->bool
httpx._utils.to_bytes(value:str|bytes,encoding:str='utf-8')->bytes
httpx._utils.to_bytes_or_str(value:str,match_type_of:typing.AnyStr)->typing.AnyStr
httpx._utils.to_str(value:str|bytes,encoding:str='utf-8')->str
httpx._utils.unquote(value:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_multipart.py----------------------------------------
A:httpx._multipart.name->format_form_param('name', self.name)
A:httpx._multipart.self._headers->b''.join(parts)
A:httpx._multipart.self._data->to_bytes(self.value)
A:httpx._multipart.headers->self.render_headers()
A:httpx._multipart.data->self.render_data()
A:httpx._multipart.content_type->guess_content_type(filename)
A:httpx._multipart.has_content_type_header->any(('content-type' in key.lower() for key in headers))
A:httpx._multipart.file_length->peek_filelike_length(self.file)
A:httpx._multipart.filename->format_form_param('filename', self.filename)
A:httpx._multipart.chunk->self.file.read(self.CHUNK_SIZE)
A:httpx._multipart.boundary->os.urandom(16).hex().encode('ascii')
A:httpx._multipart.self.fields->list(self._iter_fields(data, files))
A:httpx._multipart.boundary_length->len(self.boundary)
A:httpx._multipart.field_length->field.get_length()
A:httpx._multipart.content_length->self.get_content_length()
httpx._multipart.DataField(self,name:str,value:str|bytes|int|float|None)
httpx._multipart.DataField.__init__(self,name:str,value:str|bytes|int|float|None)
httpx._multipart.DataField.get_length(self)->int
httpx._multipart.DataField.render(self)->typing.Iterator[bytes]
httpx._multipart.DataField.render_data(self)->bytes
httpx._multipart.DataField.render_headers(self)->bytes
httpx._multipart.FileField(self,name:str,value:FileTypes)
httpx._multipart.FileField.__init__(self,name:str,value:FileTypes)
httpx._multipart.FileField.get_length(self)->int | None
httpx._multipart.FileField.render(self)->typing.Iterator[bytes]
httpx._multipart.FileField.render_data(self)->typing.Iterator[bytes]
httpx._multipart.FileField.render_headers(self)->bytes
httpx._multipart.MultipartStream(self,data:RequestData,files:RequestFiles,boundary:bytes|None=None)
httpx._multipart.MultipartStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx._multipart.MultipartStream.__init__(self,data:RequestData,files:RequestFiles,boundary:bytes|None=None)
httpx._multipart.MultipartStream.__iter__(self)->typing.Iterator[bytes]
httpx._multipart.MultipartStream._iter_fields(self,data:RequestData,files:RequestFiles)->typing.Iterator[FileField | DataField]
httpx._multipart.MultipartStream.get_content_length(self)->int | None
httpx._multipart.MultipartStream.get_headers(self)->dict[str, str]
httpx._multipart.MultipartStream.iter_chunks(self)->typing.Iterator[bytes]
httpx._multipart.get_multipart_boundary_from_content_type(content_type:bytes|None)->bytes | None


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_config.py----------------------------------------
A:httpx._config.DEFAULT_CIPHERS->':'.join(['ECDHE+AESGCM', 'ECDHE+CHACHA20', 'DHE+AESGCM', 'DHE+CHACHA20', 'ECDH+AESGCM', 'DH+AESGCM', 'ECDH+AES', 'DH+AES', 'RSA+AESGCM', 'RSA+AES', '!aNULL', '!eNULL', '!MD5', '!DSS'])
A:httpx._config.logger->logging.getLogger('httpx')
A:httpx._config.UNSET->UnsetType()
A:httpx._config.DEFAULT_CA_BUNDLE_PATH->Path(certifi.where())
A:httpx._config.self.ssl_context->self.load_ssl_context()
A:httpx._config.context->ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
A:httpx._config.ca_bundle->get_ca_bundle_from_env()
A:httpx._config.ca_bundle_path->Path(self.verify)
A:httpx._config.cafile->str(ca_bundle_path)
A:httpx._config.capath->str(ca_bundle_path)
A:httpx._config.keylogfile->os.environ.get('SSLKEYLOGFILE')
A:httpx._config.url->url.copy_with(username=None, password=None).copy_with(username=None, password=None)
A:httpx._config.headers->Headers(headers)
A:httpx._config.DEFAULT_TIMEOUT_CONFIG->Timeout(timeout=5.0)
A:httpx._config.DEFAULT_LIMITS->Limits(max_connections=100, max_keepalive_connections=20)
httpx.Limits(self,*,max_connections:int|None=None,max_keepalive_connections:int|None=None,keepalive_expiry:float|None=5.0)
httpx.Limits.__eq__(self,other:typing.Any)->bool
httpx.Limits.__repr__(self)->str
httpx.Proxy(self,url:URL|str,*,ssl_context:ssl.SSLContext|None=None,auth:tuple[str,str]|None=None,headers:HeaderTypes|None=None)
httpx.Proxy.__repr__(self)->str
httpx.Proxy.raw_auth(self)->tuple[bytes, bytes] | None
httpx.SSLConfig(self,*,cert:CertTypes|None=None,verify:VerifyTypes=True,trust_env:bool=True,http2:bool=False)
httpx.SSLConfig._create_default_ssl_context(self)->ssl.SSLContext
httpx.SSLConfig._load_client_certs(self,ssl_context:ssl.SSLContext)->None
httpx.SSLConfig.load_ssl_context(self)->ssl.SSLContext
httpx.SSLConfig.load_ssl_context_no_verify(self)->ssl.SSLContext
httpx.SSLConfig.load_ssl_context_verify(self)->ssl.SSLContext
httpx.Timeout(self,timeout:TimeoutTypes|UnsetType=UNSET,*,connect:None|float|UnsetType=UNSET,read:None|float|UnsetType=UNSET,write:None|float|UnsetType=UNSET,pool:None|float|UnsetType=UNSET)
httpx.Timeout.__eq__(self,other:typing.Any)->bool
httpx.Timeout.__repr__(self)->str
httpx.Timeout.as_dict(self)->dict[str, float | None]
httpx.UnsetType
httpx._config.Limits(self,*,max_connections:int|None=None,max_keepalive_connections:int|None=None,keepalive_expiry:float|None=5.0)
httpx._config.Limits.__eq__(self,other:typing.Any)->bool
httpx._config.Limits.__init__(self,*,max_connections:int|None=None,max_keepalive_connections:int|None=None,keepalive_expiry:float|None=5.0)
httpx._config.Limits.__repr__(self)->str
httpx._config.Proxy(self,url:URL|str,*,ssl_context:ssl.SSLContext|None=None,auth:tuple[str,str]|None=None,headers:HeaderTypes|None=None)
httpx._config.Proxy.__init__(self,url:URL|str,*,ssl_context:ssl.SSLContext|None=None,auth:tuple[str,str]|None=None,headers:HeaderTypes|None=None)
httpx._config.Proxy.__repr__(self)->str
httpx._config.Proxy.raw_auth(self)->tuple[bytes, bytes] | None
httpx._config.SSLConfig(self,*,cert:CertTypes|None=None,verify:VerifyTypes=True,trust_env:bool=True,http2:bool=False)
httpx._config.SSLConfig.__init__(self,*,cert:CertTypes|None=None,verify:VerifyTypes=True,trust_env:bool=True,http2:bool=False)
httpx._config.SSLConfig._create_default_ssl_context(self)->ssl.SSLContext
httpx._config.SSLConfig._load_client_certs(self,ssl_context:ssl.SSLContext)->None
httpx._config.SSLConfig.load_ssl_context(self)->ssl.SSLContext
httpx._config.SSLConfig.load_ssl_context_no_verify(self)->ssl.SSLContext
httpx._config.SSLConfig.load_ssl_context_verify(self)->ssl.SSLContext
httpx._config.Timeout(self,timeout:TimeoutTypes|UnsetType=UNSET,*,connect:None|float|UnsetType=UNSET,read:None|float|UnsetType=UNSET,write:None|float|UnsetType=UNSET,pool:None|float|UnsetType=UNSET)
httpx._config.Timeout.__eq__(self,other:typing.Any)->bool
httpx._config.Timeout.__init__(self,timeout:TimeoutTypes|UnsetType=UNSET,*,connect:None|float|UnsetType=UNSET,read:None|float|UnsetType=UNSET,write:None|float|UnsetType=UNSET,pool:None|float|UnsetType=UNSET)
httpx._config.Timeout.__repr__(self)->str
httpx._config.Timeout.as_dict(self)->dict[str, float | None]
httpx._config.UnsetType
httpx._config.create_ssl_context(cert:CertTypes|None=None,verify:VerifyTypes=True,trust_env:bool=True,http2:bool=False)->ssl.SSLContext
httpx.create_ssl_context(cert:CertTypes|None=None,verify:VerifyTypes=True,trust_env:bool=True,http2:bool=False)->ssl.SSLContext


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_compat.py----------------------------------------
A:httpx._compat._zstd_version->tuple(map(int, re.search('^([0-9]+)\\.([0-9]+)', zstd.__version__).groups()))


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_decoders.py----------------------------------------
A:httpx._decoders.self.decompressor->_compat.zstd.ZstdDecompressor().decompressobj()
A:httpx._decoders.output->io.BytesIO()
A:httpx._decoders.ret->self.decompressor.flush()
A:httpx._decoders.self.children->list(reversed(children))
A:httpx._decoders.data->child.decode(data)
A:httpx._decoders.self._buffer->io.StringIO()
A:httpx._decoders.value->self._buffer.getvalue()
A:httpx._decoders.self.decoder->codecs.getincrementaldecoder(encoding)(errors='replace')
A:httpx._decoders.lines->text.splitlines()
httpx._decoders.BrotliDecoder(self)
httpx._decoders.BrotliDecoder.__init__(self)
httpx._decoders.BrotliDecoder.decode(self,data:bytes)->bytes
httpx._decoders.BrotliDecoder.flush(self)->bytes
httpx._decoders.ByteChunker(self,chunk_size:int|None=None)
httpx._decoders.ByteChunker.__init__(self,chunk_size:int|None=None)
httpx._decoders.ByteChunker.decode(self,content:bytes)->list[bytes]
httpx._decoders.ByteChunker.flush(self)->list[bytes]
httpx._decoders.ContentDecoder
httpx._decoders.ContentDecoder.decode(self,data:bytes)->bytes
httpx._decoders.ContentDecoder.flush(self)->bytes
httpx._decoders.DeflateDecoder(self)
httpx._decoders.DeflateDecoder.__init__(self)
httpx._decoders.DeflateDecoder.decode(self,data:bytes)->bytes
httpx._decoders.DeflateDecoder.flush(self)->bytes
httpx._decoders.GZipDecoder(self)
httpx._decoders.GZipDecoder.__init__(self)
httpx._decoders.GZipDecoder.decode(self,data:bytes)->bytes
httpx._decoders.GZipDecoder.flush(self)->bytes
httpx._decoders.IdentityDecoder(ContentDecoder)
httpx._decoders.IdentityDecoder.decode(self,data:bytes)->bytes
httpx._decoders.IdentityDecoder.flush(self)->bytes
httpx._decoders.LineDecoder(self)
httpx._decoders.LineDecoder.__init__(self)
httpx._decoders.LineDecoder.decode(self,text:str)->list[str]
httpx._decoders.LineDecoder.flush(self)->list[str]
httpx._decoders.MultiDecoder(self,children:typing.Sequence[ContentDecoder])
httpx._decoders.MultiDecoder.__init__(self,children:typing.Sequence[ContentDecoder])
httpx._decoders.MultiDecoder.decode(self,data:bytes)->bytes
httpx._decoders.MultiDecoder.flush(self)->bytes
httpx._decoders.TextChunker(self,chunk_size:int|None=None)
httpx._decoders.TextChunker.__init__(self,chunk_size:int|None=None)
httpx._decoders.TextChunker.decode(self,content:str)->list[str]
httpx._decoders.TextChunker.flush(self)->list[str]
httpx._decoders.TextDecoder(self,encoding:str='utf-8')
httpx._decoders.TextDecoder.__init__(self,encoding:str='utf-8')
httpx._decoders.TextDecoder.decode(self,data:bytes)->str
httpx._decoders.TextDecoder.flush(self)->str
httpx._decoders.ZStandardDecoder(self)
httpx._decoders.ZStandardDecoder.__init__(self)
httpx._decoders.ZStandardDecoder.decode(self,data:bytes)->bytes
httpx._decoders.ZStandardDecoder.flush(self)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_client.py----------------------------------------
A:httpx._client.T->typing.TypeVar('T', bound='Client')
A:httpx._client.U->typing.TypeVar('U', bound='AsyncClient')
A:httpx._client.USE_CLIENT_DEFAULT->UseClientDefault()
A:httpx._client.logger->logging.getLogger('httpx')
A:httpx._client.ACCEPT_ENCODING->', '.join([key for key in SUPPORTED_DECODERS.keys() if key != 'identity'])
A:httpx._client.seconds->self._timer.sync_elapsed()
A:httpx._client.self._response.elapsed->datetime.timedelta(seconds=seconds)
A:httpx._client.self._base_url->self._enforce_trailing_slash(URL(url))
A:httpx._client.self._auth->self._build_auth(auth)
A:httpx._client.self._params->QueryParams(params)
A:httpx._client.self.headers->Headers(headers)
A:httpx._client.self._cookies->Cookies(cookies)
A:httpx._client.self._timeout->Timeout(timeout)
A:httpx._client.client_headers->Headers({b'Accept': b'*/*', b'Accept-Encoding': ACCEPT_ENCODING.encode('ascii'), b'Connection': b'keep-alive', b'User-Agent': USER_AGENT.encode('ascii')})
A:httpx._client.url->url.copy_with(fragment=request.url.fragment).copy_with(fragment=request.url.fragment)
A:httpx._client.headers->Headers(request.headers)
A:httpx._client.cookies->Cookies(self.cookies)
A:httpx._client.params->self._merge_queryparams(params)
A:httpx._client.extensions->dict(**extensions, timeout=timeout.as_dict())
A:httpx._client.merge_url->URL(url)
A:httpx._client.merged_cookies->Cookies(self.cookies)
A:httpx._client.merged_headers->Headers(self.headers)
A:httpx._client.merged_queryparams->QueryParams(self.params)
A:httpx._client.method->self._redirect_method(request, response)
A:httpx._client.stream->self._redirect_stream(request, method)
A:httpx._client.headers['Host']->url.copy_with(fragment=request.url.fragment).copy_with(fragment=request.url.fragment).netloc.decode('ascii')
A:httpx._client.request.extensions->dict(**request.extensions, timeout=timeout.as_dict())
A:httpx._client.proxy_map->self._get_proxy_map(proxies or proxy, allow_env_proxies)
A:httpx._client.self._transport->self._init_transport(verify=verify, cert=cert, http1=http1, http2=http2, limits=limits, transport=transport, app=app, trust_env=trust_env)
A:httpx._client.self._mounts->dict(sorted(self._mounts.items()))
A:httpx._client.request->self._build_redirect_request(request, response)
A:httpx._client.response->self._transport_for_url(request.url).handle_request(request)
A:httpx._client.auth->self._build_request_auth(request, auth)
A:httpx._client.auth_flow->self._build_request_auth(request, auth).async_auth_flow(request)
A:httpx._client.next_request->self._build_request_auth(request, auth).async_auth_flow(request).send(response)
A:httpx._client.response.history->list(history)
A:httpx._client.transport->self._transport_for_url(request.url)
A:httpx._client.timer->Timer()
A:httpx._client.response.stream->BoundAsyncStream(response.stream, response=response, timer=timer)
httpx.AsyncClient(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,AsyncBaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:AsyncBaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx.AsyncClient.__aenter__(self:U)->U
httpx.AsyncClient.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.AsyncClient._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->AsyncBaseTransport
httpx.AsyncClient._init_transport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:AsyncBaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True)->AsyncBaseTransport
httpx.AsyncClient._send_handling_auth(self,request:Request,auth:Auth,follow_redirects:bool,history:list[Response])->Response
httpx.AsyncClient._send_handling_redirects(self,request:Request,follow_redirects:bool,history:list[Response])->Response
httpx.AsyncClient._send_single_request(self,request:Request)->Response
httpx.AsyncClient._transport_for_url(self,url:URL)->AsyncBaseTransport
httpx.AsyncClient.aclose(self)->None
httpx.AsyncClient.delete(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.get(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.head(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.options(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.patch(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.post(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.put(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.AsyncClient.send(self,request:Request,*,stream:bool=False,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT)->Response
httpx.AsyncClient.stream(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->typing.AsyncIterator[Response]
httpx.BaseClient(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx.BaseClient._build_auth(self,auth:AuthTypes|None)->Auth | None
httpx.BaseClient._build_redirect_request(self,request:Request,response:Response)->Request
httpx.BaseClient._build_request_auth(self,request:Request,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT)->Auth
httpx.BaseClient._enforce_trailing_slash(self,url:URL)->URL
httpx.BaseClient._get_proxy_map(self,proxies:ProxiesTypes|None,allow_env_proxies:bool)->dict[str, Proxy | None]
httpx.BaseClient._merge_cookies(self,cookies:CookieTypes|None=None)->CookieTypes | None
httpx.BaseClient._merge_headers(self,headers:HeaderTypes|None=None)->HeaderTypes | None
httpx.BaseClient._merge_queryparams(self,params:QueryParamTypes|None=None)->QueryParamTypes | None
httpx.BaseClient._merge_url(self,url:URL|str)->URL
httpx.BaseClient._redirect_headers(self,request:Request,url:URL,method:str)->Headers
httpx.BaseClient._redirect_method(self,request:Request,response:Response)->str
httpx.BaseClient._redirect_stream(self,request:Request,method:str)->SyncByteStream | AsyncByteStream | None
httpx.BaseClient._redirect_url(self,request:Request,response:Response)->URL
httpx.BaseClient._set_timeout(self,request:Request)->None
httpx.BaseClient.auth(self)->Auth | None
httpx.BaseClient.auth(self,auth:AuthTypes)->None
httpx.BaseClient.base_url(self)->URL
httpx.BaseClient.base_url(self,url:URL|str)->None
httpx.BaseClient.build_request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Request
httpx.BaseClient.cookies(self)->Cookies
httpx.BaseClient.cookies(self,cookies:CookieTypes)->None
httpx.BaseClient.event_hooks(self)->dict[str, list[EventHook]]
httpx.BaseClient.event_hooks(self,event_hooks:dict[str,list[EventHook]])->None
httpx.BaseClient.headers(self)->Headers
httpx.BaseClient.headers(self,headers:HeaderTypes)->None
httpx.BaseClient.is_closed(self)->bool
httpx.BaseClient.params(self)->QueryParams
httpx.BaseClient.params(self,params:QueryParamTypes)->None
httpx.BaseClient.timeout(self)->Timeout
httpx.BaseClient.timeout(self,timeout:TimeoutTypes)->None
httpx.BaseClient.trust_env(self)->bool
httpx.BoundAsyncStream(self,stream:AsyncByteStream,response:Response,timer:Timer)
httpx.BoundAsyncStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx.BoundAsyncStream.aclose(self)->None
httpx.BoundSyncStream(self,stream:SyncByteStream,response:Response,timer:Timer)
httpx.BoundSyncStream.__iter__(self)->typing.Iterator[bytes]
httpx.BoundSyncStream.close(self)->None
httpx.Client(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,BaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:BaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx.Client.__enter__(self:T)->T
httpx.Client.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.Client._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->BaseTransport
httpx.Client._init_transport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:BaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True)->BaseTransport
httpx.Client._send_handling_auth(self,request:Request,auth:Auth,follow_redirects:bool,history:list[Response])->Response
httpx.Client._send_handling_redirects(self,request:Request,follow_redirects:bool,history:list[Response])->Response
httpx.Client._send_single_request(self,request:Request)->Response
httpx.Client._transport_for_url(self,url:URL)->BaseTransport
httpx.Client.close(self)->None
httpx.Client.delete(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.get(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.head(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.options(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.patch(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.post(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.put(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx.Client.send(self,request:Request,*,stream:bool=False,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT)->Response
httpx.Client.stream(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->typing.Iterator[Response]
httpx.ClientState(enum.Enum)
httpx.UseClientDefault
httpx._client.AsyncClient(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,AsyncBaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:AsyncBaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.AsyncClient.__aenter__(self:U)->U
httpx._client.AsyncClient.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._client.AsyncClient.__init__(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,AsyncBaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:AsyncBaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.AsyncClient._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->AsyncBaseTransport
httpx._client.AsyncClient._init_transport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:AsyncBaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True)->AsyncBaseTransport
httpx._client.AsyncClient._send_handling_auth(self,request:Request,auth:Auth,follow_redirects:bool,history:list[Response])->Response
httpx._client.AsyncClient._send_handling_redirects(self,request:Request,follow_redirects:bool,history:list[Response])->Response
httpx._client.AsyncClient._send_single_request(self,request:Request)->Response
httpx._client.AsyncClient._transport_for_url(self,url:URL)->AsyncBaseTransport
httpx._client.AsyncClient.aclose(self)->None
httpx._client.AsyncClient.delete(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.get(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.head(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.options(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.patch(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.post(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.put(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.AsyncClient.send(self,request:Request,*,stream:bool=False,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT)->Response
httpx._client.AsyncClient.stream(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->typing.AsyncIterator[Response]
httpx._client.BaseClient(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.BaseClient.__init__(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.BaseClient._build_auth(self,auth:AuthTypes|None)->Auth | None
httpx._client.BaseClient._build_redirect_request(self,request:Request,response:Response)->Request
httpx._client.BaseClient._build_request_auth(self,request:Request,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT)->Auth
httpx._client.BaseClient._enforce_trailing_slash(self,url:URL)->URL
httpx._client.BaseClient._get_proxy_map(self,proxies:ProxiesTypes|None,allow_env_proxies:bool)->dict[str, Proxy | None]
httpx._client.BaseClient._merge_cookies(self,cookies:CookieTypes|None=None)->CookieTypes | None
httpx._client.BaseClient._merge_headers(self,headers:HeaderTypes|None=None)->HeaderTypes | None
httpx._client.BaseClient._merge_queryparams(self,params:QueryParamTypes|None=None)->QueryParamTypes | None
httpx._client.BaseClient._merge_url(self,url:URL|str)->URL
httpx._client.BaseClient._redirect_headers(self,request:Request,url:URL,method:str)->Headers
httpx._client.BaseClient._redirect_method(self,request:Request,response:Response)->str
httpx._client.BaseClient._redirect_stream(self,request:Request,method:str)->SyncByteStream | AsyncByteStream | None
httpx._client.BaseClient._redirect_url(self,request:Request,response:Response)->URL
httpx._client.BaseClient._set_timeout(self,request:Request)->None
httpx._client.BaseClient.auth(self)->Auth | None
httpx._client.BaseClient.auth(self,auth:AuthTypes)->None
httpx._client.BaseClient.base_url(self)->URL
httpx._client.BaseClient.base_url(self,url:URL|str)->None
httpx._client.BaseClient.build_request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Request
httpx._client.BaseClient.cookies(self)->Cookies
httpx._client.BaseClient.cookies(self,cookies:CookieTypes)->None
httpx._client.BaseClient.event_hooks(self)->dict[str, list[EventHook]]
httpx._client.BaseClient.event_hooks(self,event_hooks:dict[str,list[EventHook]])->None
httpx._client.BaseClient.headers(self)->Headers
httpx._client.BaseClient.headers(self,headers:HeaderTypes)->None
httpx._client.BaseClient.is_closed(self)->bool
httpx._client.BaseClient.params(self)->QueryParams
httpx._client.BaseClient.params(self,params:QueryParamTypes)->None
httpx._client.BaseClient.timeout(self)->Timeout
httpx._client.BaseClient.timeout(self,timeout:TimeoutTypes)->None
httpx._client.BaseClient.trust_env(self)->bool
httpx._client.BoundAsyncStream(self,stream:AsyncByteStream,response:Response,timer:Timer)
httpx._client.BoundAsyncStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx._client.BoundAsyncStream.__init__(self,stream:AsyncByteStream,response:Response,timer:Timer)
httpx._client.BoundAsyncStream.aclose(self)->None
httpx._client.BoundSyncStream(self,stream:SyncByteStream,response:Response,timer:Timer)
httpx._client.BoundSyncStream.__init__(self,stream:SyncByteStream,response:Response,timer:Timer)
httpx._client.BoundSyncStream.__iter__(self)->typing.Iterator[bytes]
httpx._client.BoundSyncStream.close(self)->None
httpx._client.Client(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,BaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:BaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.Client.__enter__(self:T)->T
httpx._client.Client.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._client.Client.__init__(self,*,auth:AuthTypes|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,mounts:None|typing.Mapping[str,BaseTransport|None]=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,limits:Limits=DEFAULT_LIMITS,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:None|typing.Mapping[str,list[EventHook]]=None,base_url:URL|str='',transport:BaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._client.Client._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->BaseTransport
httpx._client.Client._init_transport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:BaseTransport|None=None,app:typing.Callable[...,typing.Any]|None=None,trust_env:bool=True)->BaseTransport
httpx._client.Client._send_handling_auth(self,request:Request,auth:Auth,follow_redirects:bool,history:list[Response])->Response
httpx._client.Client._send_handling_redirects(self,request:Request,follow_redirects:bool,history:list[Response])->Response
httpx._client.Client._send_single_request(self,request:Request)->Response
httpx._client.Client._transport_for_url(self,url:URL)->BaseTransport
httpx._client.Client.close(self)->None
httpx._client.Client.delete(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.get(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.head(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.options(self,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.patch(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.post(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.put(self,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.request(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->Response
httpx._client.Client.send(self,request:Request,*,stream:bool=False,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT)->Response
httpx._client.Client.stream(self,method:str,url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|UseClientDefault|None=USE_CLIENT_DEFAULT,follow_redirects:bool|UseClientDefault=USE_CLIENT_DEFAULT,timeout:TimeoutTypes|UseClientDefault=USE_CLIENT_DEFAULT,extensions:RequestExtensions|None=None)->typing.Iterator[Response]
httpx._client.ClientState(enum.Enum)
httpx._client.UseClientDefault


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_main.py----------------------------------------
A:httpx._main.console->rich.console.Console()
A:httpx._main.table->rich.table.Table.grid(padding=1, pad_edge=True)
A:httpx._main.content_type->response.headers.get('Content-Type')
A:httpx._main.(mime_type, _, _)->response.headers.get('Content-Type').partition(';')
A:httpx._main.method->request.method.decode('ascii')
A:httpx._main.target->request.url.target.decode('ascii')
A:httpx._main.version->stream.get_extra_info('ssl_object').version()
A:httpx._main.http_text->format_response_headers(http_version, status, reason_phrase, headers)
A:httpx._main.syntax->rich.syntax.Syntax(text, lexer_name, theme='ansi_dark', word_wrap=True)
A:httpx._main.lexer_name->get_lexer_for_response(response)
A:httpx._main.data->response.json()
A:httpx._main.text->json.dumps(data, indent=4)
A:httpx._main.server_addr->stream.get_extra_info('server_addr')
A:httpx._main.ssl_object->stream.get_extra_info('ssl_object')
A:httpx._main.cipher->stream.get_extra_info('ssl_object').cipher()
A:httpx._main.server_cert->stream.get_extra_info('ssl_object').getpeercert()
A:httpx._main.alpn->stream.get_extra_info('ssl_object').selected_alpn_protocol()
A:httpx._main.content_length->response.headers.get('Content-Length')
A:httpx._main.download_task->progress.add_task(description, total=int(content_length or 0), start=content_length is not None)
A:httpx._main.password->click.prompt('Password', hide_input=True)
httpx._main.download_response(response:Response,download:typing.BinaryIO)->None
httpx._main.format_certificate(cert:_PeerCertRetDictType)->str
httpx._main.format_request_headers(request:httpcore.Request,http2:bool=False)->str
httpx._main.format_response_headers(http_version:bytes,status:int,reason_phrase:bytes|None,headers:list[tuple[bytes,bytes]])->str
httpx._main.get_lexer_for_response(response:Response)->str
httpx._main.handle_help(ctx:click.Context,param:click.Option|click.Parameter,value:typing.Any)->None
httpx._main.main(url:str,method:str,params:list[tuple[str,str]],content:str,data:list[tuple[str,str]],files:list[tuple[str,click.File]],json:str,headers:list[tuple[str,str]],cookies:list[tuple[str,str]],auth:tuple[str,str]|None,proxy:str,timeout:float,follow_redirects:bool,verify:bool,http2:bool,download:typing.BinaryIO|None,verbose:bool)->None
httpx._main.print_help()->None
httpx._main.print_request_headers(request:httpcore.Request,http2:bool=False)->None
httpx._main.print_response(response:Response)->None
httpx._main.print_response_headers(http_version:bytes,status:int,reason_phrase:bytes|None,headers:list[tuple[bytes,bytes]])->None
httpx._main.trace(name:str,info:typing.Mapping[str,typing.Any],verbose:bool=False)->None
httpx._main.validate_auth(ctx:click.Context,param:click.Option|click.Parameter,value:typing.Any)->typing.Any
httpx._main.validate_json(ctx:click.Context,param:click.Option|click.Parameter,value:typing.Any)->typing.Any
httpx.main(url:str,method:str,params:list[tuple[str,str]],content:str,data:list[tuple[str,str]],files:list[tuple[str,click.File]],json:str,headers:list[tuple[str,str]],cookies:list[tuple[str,str]],auth:tuple[str,str]|None,proxy:str,timeout:float,follow_redirects:bool,verify:bool,http2:bool,download:typing.BinaryIO|None,verbose:bool)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_api.py----------------------------------------
httpx._api.delete(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.get(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.head(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.options(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.patch(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.post(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.put(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.request(method:str,url:URL|str,*,params:QueryParamTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,verify:VerifyTypes=True,cert:CertTypes|None=None,trust_env:bool=True)->Response
httpx._api.stream(method:str,url:URL|str,*,params:QueryParamTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,verify:VerifyTypes=True,cert:CertTypes|None=None,trust_env:bool=True)->typing.Iterator[Response]
httpx.delete(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.get(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.head(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.options(url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.patch(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.post(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.put(url:URL|str,*,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,follow_redirects:bool=False,cert:CertTypes|None=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.request(method:str,url:URL|str,*,params:QueryParamTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,verify:VerifyTypes=True,cert:CertTypes|None=None,trust_env:bool=True)->Response
httpx.stream(method:str,url:URL|str,*,params:QueryParamTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,auth:AuthTypes|None=None,proxy:ProxyTypes|None=None,proxies:ProxiesTypes|None=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,follow_redirects:bool=False,verify:VerifyTypes=True,cert:CertTypes|None=None,trust_env:bool=True)->typing.Iterator[Response]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_types.py----------------------------------------
A:httpx._types.RawURL->NamedTuple('RawURL', [('raw_scheme', bytes), ('raw_host', bytes), ('port', Optional[int]), ('raw_path', bytes)])
httpx.AsyncByteStream
httpx.AsyncByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx.AsyncByteStream.aclose(self)->None
httpx.SyncByteStream
httpx.SyncByteStream.__iter__(self)->Iterator[bytes]
httpx.SyncByteStream.close(self)->None
httpx._types.AsyncByteStream
httpx._types.AsyncByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx._types.AsyncByteStream.aclose(self)->None
httpx._types.SyncByteStream
httpx._types.SyncByteStream.__iter__(self)->Iterator[bytes]
httpx._types.SyncByteStream.close(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_urls.py----------------------------------------
A:httpx._urls.kwargs[key]->value.decode('ascii')
A:httpx._urls.params->kwargs.pop('params')
A:httpx._urls.self._uri_reference->''.join([f'{self.scheme}:' if scheme else '', f'//{authority}' if authority else '', path, f'?{query}' if query is not None else '', f'#{fragment}' if fragment is not None else ''])._uri_reference.copy_with(**kwargs)
A:httpx._urls.host->idna.decode(host)
A:httpx._urls.authority->''.join([f'{userinfo}@' if userinfo else '', f'[{host}]' if ':' in host else host, f':{port}' if port is not None else ''])
A:httpx._urls.url->''.join([f'{self.scheme}:' if scheme else '', f'//{authority}' if authority else '', path, f'?{query}' if query is not None else '', f'#{fragment}' if fragment is not None else ''])
A:httpx._urls.self._dict->parse_qs(value, keep_blank_values=True)
A:httpx._urls.q->QueryParams(params)
A:httpx._urls.q._dict->dict(self._dict)
A:httpx._urls.query_string->str(self)
httpx.QueryParams(self,*args:QueryParamTypes|None,**kwargs:typing.Any)
httpx.QueryParams.__bool__(self)->bool
httpx.QueryParams.__contains__(self,key:typing.Any)->bool
httpx.QueryParams.__eq__(self,other:typing.Any)->bool
httpx.QueryParams.__getitem__(self,key:typing.Any)->str
httpx.QueryParams.__hash__(self)->int
httpx.QueryParams.__iter__(self)->typing.Iterator[typing.Any]
httpx.QueryParams.__len__(self)->int
httpx.QueryParams.__repr__(self)->str
httpx.QueryParams.__setitem__(self,key:str,value:str)->None
httpx.QueryParams.__str__(self)->str
httpx.QueryParams.add(self,key:str,value:typing.Any=None)->QueryParams
httpx.QueryParams.get(self,key:typing.Any,default:typing.Any=None)->typing.Any
httpx.QueryParams.get_list(self,key:str)->list[str]
httpx.QueryParams.items(self)->typing.ItemsView[str, str]
httpx.QueryParams.keys(self)->typing.KeysView[str]
httpx.QueryParams.merge(self,params:QueryParamTypes|None=None)->QueryParams
httpx.QueryParams.multi_items(self)->list[tuple[str, str]]
httpx.QueryParams.remove(self,key:str)->QueryParams
httpx.QueryParams.set(self,key:str,value:typing.Any=None)->QueryParams
httpx.QueryParams.update(self,params:QueryParamTypes|None=None)->None
httpx.QueryParams.values(self)->typing.ValuesView[str]
httpx.URL(self,url:URL|str='',**kwargs:typing.Any)
httpx.URL.__eq__(self,other:typing.Any)->bool
httpx.URL.__hash__(self)->int
httpx.URL.__repr__(self)->str
httpx.URL.__str__(self)->str
httpx.URL.copy_add_param(self,key:str,value:typing.Any=None)->URL
httpx.URL.copy_merge_params(self,params:QueryParamTypes)->URL
httpx.URL.copy_remove_param(self,key:str)->URL
httpx.URL.copy_set_param(self,key:str,value:typing.Any=None)->URL
httpx.URL.copy_with(self,**kwargs:typing.Any)->URL
httpx.URL.fragment(self)->str
httpx.URL.host(self)->str
httpx.URL.is_absolute_url(self)->bool
httpx.URL.is_relative_url(self)->bool
httpx.URL.join(self,url:URL|str)->URL
httpx.URL.netloc(self)->bytes
httpx.URL.params(self)->QueryParams
httpx.URL.password(self)->str
httpx.URL.path(self)->str
httpx.URL.port(self)->int | None
httpx.URL.query(self)->bytes
httpx.URL.raw(self)->RawURL
httpx.URL.raw_host(self)->bytes
httpx.URL.raw_path(self)->bytes
httpx.URL.raw_scheme(self)->bytes
httpx.URL.scheme(self)->str
httpx.URL.userinfo(self)->bytes
httpx.URL.username(self)->str
httpx._urls.QueryParams(self,*args:QueryParamTypes|None,**kwargs:typing.Any)
httpx._urls.QueryParams.__bool__(self)->bool
httpx._urls.QueryParams.__contains__(self,key:typing.Any)->bool
httpx._urls.QueryParams.__eq__(self,other:typing.Any)->bool
httpx._urls.QueryParams.__getitem__(self,key:typing.Any)->str
httpx._urls.QueryParams.__hash__(self)->int
httpx._urls.QueryParams.__init__(self,*args:QueryParamTypes|None,**kwargs:typing.Any)
httpx._urls.QueryParams.__iter__(self)->typing.Iterator[typing.Any]
httpx._urls.QueryParams.__len__(self)->int
httpx._urls.QueryParams.__repr__(self)->str
httpx._urls.QueryParams.__setitem__(self,key:str,value:str)->None
httpx._urls.QueryParams.__str__(self)->str
httpx._urls.QueryParams.add(self,key:str,value:typing.Any=None)->QueryParams
httpx._urls.QueryParams.get(self,key:typing.Any,default:typing.Any=None)->typing.Any
httpx._urls.QueryParams.get_list(self,key:str)->list[str]
httpx._urls.QueryParams.items(self)->typing.ItemsView[str, str]
httpx._urls.QueryParams.keys(self)->typing.KeysView[str]
httpx._urls.QueryParams.merge(self,params:QueryParamTypes|None=None)->QueryParams
httpx._urls.QueryParams.multi_items(self)->list[tuple[str, str]]
httpx._urls.QueryParams.remove(self,key:str)->QueryParams
httpx._urls.QueryParams.set(self,key:str,value:typing.Any=None)->QueryParams
httpx._urls.QueryParams.update(self,params:QueryParamTypes|None=None)->None
httpx._urls.QueryParams.values(self)->typing.ValuesView[str]
httpx._urls.URL(self,url:URL|str='',**kwargs:typing.Any)
httpx._urls.URL.__eq__(self,other:typing.Any)->bool
httpx._urls.URL.__hash__(self)->int
httpx._urls.URL.__init__(self,url:URL|str='',**kwargs:typing.Any)
httpx._urls.URL.__repr__(self)->str
httpx._urls.URL.__str__(self)->str
httpx._urls.URL.copy_add_param(self,key:str,value:typing.Any=None)->URL
httpx._urls.URL.copy_merge_params(self,params:QueryParamTypes)->URL
httpx._urls.URL.copy_remove_param(self,key:str)->URL
httpx._urls.URL.copy_set_param(self,key:str,value:typing.Any=None)->URL
httpx._urls.URL.copy_with(self,**kwargs:typing.Any)->URL
httpx._urls.URL.fragment(self)->str
httpx._urls.URL.host(self)->str
httpx._urls.URL.is_absolute_url(self)->bool
httpx._urls.URL.is_relative_url(self)->bool
httpx._urls.URL.join(self,url:URL|str)->URL
httpx._urls.URL.netloc(self)->bytes
httpx._urls.URL.params(self)->QueryParams
httpx._urls.URL.password(self)->str
httpx._urls.URL.path(self)->str
httpx._urls.URL.port(self)->int | None
httpx._urls.URL.query(self)->bytes
httpx._urls.URL.raw(self)->RawURL
httpx._urls.URL.raw_host(self)->bytes
httpx._urls.URL.raw_path(self)->bytes
httpx._urls.URL.raw_scheme(self)->bytes
httpx._urls.URL.scheme(self)->str
httpx._urls.URL.userinfo(self)->bytes
httpx._urls.URL.username(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_models.py----------------------------------------
A:httpx._models.self._list->list(headers._list)
A:httpx._models.str_key->key.decode(self.encoding)
A:httpx._models.str_value->self.get(name).decode(self.encoding)
A:httpx._models.get_header_key->key.lower().encode(self.encoding)
A:httpx._models.headers->Headers(headers)
A:httpx._models.normalized_key->key.lower().encode(self.encoding)
A:httpx._models.set_key->key.encode(self._encoding or 'utf-8')
A:httpx._models.set_value->self.get(name).encode(self._encoding or 'utf-8')
A:httpx._models.lookup_key->key.encode(self._encoding or 'utf-8').lower()
A:httpx._models.del_key->key.lower().encode(self.encoding)
A:httpx._models.header_key->key.lower().encode(self.encoding)
A:httpx._models.other_headers->Headers(other)
A:httpx._models.as_list->list(obfuscate_sensitive_headers(self.multi_items()))
A:httpx._models.as_dict->dict(as_list)
A:httpx._models.self.url->self.url.copy_merge_params(params=params)
A:httpx._models.self.headers->Headers(headers)
A:httpx._models.(headers, stream)->encode_response(content, text, html, json)
A:httpx._models.self._content->b''.join([part async for part in self.aiter_bytes()])
A:httpx._models.self.stream->UnattachedStream()
A:httpx._models.url->str(self.url)
A:httpx._models.decoder->LineDecoder()
A:httpx._models.self._text->''.join([decoder.decode(self.content), decoder.flush()])
A:httpx._models.encoding->self.default_encoding(self._content)
A:httpx._models.content_type->self.headers.get('Content-Type')
A:httpx._models.values->self.headers.get_list('content-encoding', split_commas=True)
A:httpx._models.value->self.get(name)
A:httpx._models.self._decoder->IdentityDecoder()
A:httpx._models.error_type->error_types.get(status_class, 'Invalid status code')
A:httpx._models.message->message.format(self, error_type=error_type).format(self, error_type=error_type)
A:httpx._models.self._cookies->Cookies()
A:httpx._models.header->self.headers.get('link')
A:httpx._models.chunker->ByteChunker(chunk_size=chunk_size)
A:httpx._models.decoded->LineDecoder().flush()
A:httpx._models.text_content->LineDecoder().flush()
A:httpx._models.self.jar->CookieJar()
A:httpx._models.urllib_response->self._CookieCompatResponse(response)
A:httpx._models.urllib_request->self._CookieCompatRequest(request)
A:httpx._models.cookie->Cookie(**kwargs)
A:httpx._models.cookies->Cookies(cookies)
A:httpx._models.cookies_repr->', '.join([f'<Cookie {cookie.name}={cookie.value} for {cookie.domain} />' for cookie in self.jar])
A:httpx._models.info->email.message.Message()
httpx.Cookies(self,cookies:CookieTypes|None=None)
httpx.Cookies._CookieCompatRequest(self,request:Request)
httpx.Cookies._CookieCompatRequest.add_unredirected_header(self,key:str,value:str)->None
httpx.Cookies._CookieCompatResponse(self,response:Response)
httpx.Cookies._CookieCompatResponse.info(self)->email.message.Message
httpx.Cookies.__bool__(self)->bool
httpx.Cookies.__delitem__(self,name:str)->None
httpx.Cookies.__getitem__(self,name:str)->str
httpx.Cookies.__iter__(self)->typing.Iterator[str]
httpx.Cookies.__len__(self)->int
httpx.Cookies.__repr__(self)->str
httpx.Cookies.__setitem__(self,name:str,value:str)->None
httpx.Cookies.clear(self,domain:str|None=None,path:str|None=None)->None
httpx.Cookies.delete(self,name:str,domain:str|None=None,path:str|None=None)->None
httpx.Cookies.extract_cookies(self,response:Response)->None
httpx.Cookies.get(self,name:str,default:str|None=None,domain:str|None=None,path:str|None=None)->str | None
httpx.Cookies.set(self,name:str,value:str,domain:str='',path:str='/')->None
httpx.Cookies.set_cookie_header(self,request:Request)->None
httpx.Cookies.update(self,cookies:CookieTypes|None=None)->None
httpx.Headers(self,headers:HeaderTypes|None=None,encoding:str|None=None)
httpx.Headers.__contains__(self,key:typing.Any)->bool
httpx.Headers.__delitem__(self,key:str)->None
httpx.Headers.__eq__(self,other:typing.Any)->bool
httpx.Headers.__getitem__(self,key:str)->str
httpx.Headers.__iter__(self)->typing.Iterator[typing.Any]
httpx.Headers.__len__(self)->int
httpx.Headers.__repr__(self)->str
httpx.Headers.__setitem__(self,key:str,value:str)->None
httpx.Headers.copy(self)->Headers
httpx.Headers.encoding(self)->str
httpx.Headers.encoding(self,value:str)->None
httpx.Headers.get(self,key:str,default:typing.Any=None)->typing.Any
httpx.Headers.get_list(self,key:str,split_commas:bool=False)->list[str]
httpx.Headers.items(self)->typing.ItemsView[str, str]
httpx.Headers.keys(self)->typing.KeysView[str]
httpx.Headers.multi_items(self)->list[tuple[str, str]]
httpx.Headers.raw(self)->list[tuple[bytes, bytes]]
httpx.Headers.update(self,headers:HeaderTypes|None=None)->None
httpx.Headers.values(self)->typing.ValuesView[str]
httpx.Request(self,method:str|bytes,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,stream:SyncByteStream|AsyncByteStream|None=None,extensions:RequestExtensions|None=None)
httpx.Request.__getstate__(self)->dict[str, typing.Any]
httpx.Request.__repr__(self)->str
httpx.Request.__setstate__(self,state:dict[str,typing.Any])->None
httpx.Request._prepare(self,default_headers:dict[str,str])->None
httpx.Request.aread(self)->bytes
httpx.Request.content(self)->bytes
httpx.Request.read(self)->bytes
httpx.Response(self,status_code:int,*,headers:HeaderTypes|None=None,content:ResponseContent|None=None,text:str|None=None,html:str|None=None,json:typing.Any=None,stream:SyncByteStream|AsyncByteStream|None=None,request:Request|None=None,extensions:ResponseExtensions|None=None,history:list[Response]|None=None,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx.Response.__getstate__(self)->dict[str, typing.Any]
httpx.Response.__repr__(self)->str
httpx.Response.__setstate__(self,state:dict[str,typing.Any])->None
httpx.Response._get_content_decoder(self)->ContentDecoder
httpx.Response._prepare(self,default_headers:dict[str,str])->None
httpx.Response.aclose(self)->None
httpx.Response.aiter_bytes(self,chunk_size:int|None=None)->typing.AsyncIterator[bytes]
httpx.Response.aiter_lines(self)->typing.AsyncIterator[str]
httpx.Response.aiter_raw(self,chunk_size:int|None=None)->typing.AsyncIterator[bytes]
httpx.Response.aiter_text(self,chunk_size:int|None=None)->typing.AsyncIterator[str]
httpx.Response.aread(self)->bytes
httpx.Response.charset_encoding(self)->str | None
httpx.Response.close(self)->None
httpx.Response.content(self)->bytes
httpx.Response.cookies(self)->Cookies
httpx.Response.elapsed(self)->datetime.timedelta
httpx.Response.elapsed(self,elapsed:datetime.timedelta)->None
httpx.Response.encoding(self)->str | None
httpx.Response.encoding(self,value:str)->None
httpx.Response.has_redirect_location(self)->bool
httpx.Response.http_version(self)->str
httpx.Response.is_client_error(self)->bool
httpx.Response.is_error(self)->bool
httpx.Response.is_informational(self)->bool
httpx.Response.is_redirect(self)->bool
httpx.Response.is_server_error(self)->bool
httpx.Response.is_success(self)->bool
httpx.Response.iter_bytes(self,chunk_size:int|None=None)->typing.Iterator[bytes]
httpx.Response.iter_lines(self)->typing.Iterator[str]
httpx.Response.iter_raw(self,chunk_size:int|None=None)->typing.Iterator[bytes]
httpx.Response.iter_text(self,chunk_size:int|None=None)->typing.Iterator[str]
httpx.Response.json(self,**kwargs:typing.Any)->typing.Any
httpx.Response.links(self)->dict[str | None, dict[str, str]]
httpx.Response.num_bytes_downloaded(self)->int
httpx.Response.raise_for_status(self)->Response
httpx.Response.read(self)->bytes
httpx.Response.reason_phrase(self)->str
httpx.Response.request(self)->Request
httpx.Response.request(self,value:Request)->None
httpx.Response.text(self)->str
httpx.Response.url(self)->URL
httpx._models.Cookies(self,cookies:CookieTypes|None=None)
httpx._models.Cookies._CookieCompatRequest(self,request:Request)
httpx._models.Cookies._CookieCompatRequest.__init__(self,request:Request)
httpx._models.Cookies._CookieCompatRequest.add_unredirected_header(self,key:str,value:str)->None
httpx._models.Cookies._CookieCompatResponse(self,response:Response)
httpx._models.Cookies._CookieCompatResponse.__init__(self,response:Response)
httpx._models.Cookies._CookieCompatResponse.info(self)->email.message.Message
httpx._models.Cookies.__bool__(self)->bool
httpx._models.Cookies.__delitem__(self,name:str)->None
httpx._models.Cookies.__getitem__(self,name:str)->str
httpx._models.Cookies.__init__(self,cookies:CookieTypes|None=None)
httpx._models.Cookies.__iter__(self)->typing.Iterator[str]
httpx._models.Cookies.__len__(self)->int
httpx._models.Cookies.__repr__(self)->str
httpx._models.Cookies.__setitem__(self,name:str,value:str)->None
httpx._models.Cookies.clear(self,domain:str|None=None,path:str|None=None)->None
httpx._models.Cookies.delete(self,name:str,domain:str|None=None,path:str|None=None)->None
httpx._models.Cookies.extract_cookies(self,response:Response)->None
httpx._models.Cookies.get(self,name:str,default:str|None=None,domain:str|None=None,path:str|None=None)->str | None
httpx._models.Cookies.set(self,name:str,value:str,domain:str='',path:str='/')->None
httpx._models.Cookies.set_cookie_header(self,request:Request)->None
httpx._models.Cookies.update(self,cookies:CookieTypes|None=None)->None
httpx._models.Headers(self,headers:HeaderTypes|None=None,encoding:str|None=None)
httpx._models.Headers.__contains__(self,key:typing.Any)->bool
httpx._models.Headers.__delitem__(self,key:str)->None
httpx._models.Headers.__eq__(self,other:typing.Any)->bool
httpx._models.Headers.__getitem__(self,key:str)->str
httpx._models.Headers.__init__(self,headers:HeaderTypes|None=None,encoding:str|None=None)
httpx._models.Headers.__iter__(self)->typing.Iterator[typing.Any]
httpx._models.Headers.__len__(self)->int
httpx._models.Headers.__repr__(self)->str
httpx._models.Headers.__setitem__(self,key:str,value:str)->None
httpx._models.Headers.copy(self)->Headers
httpx._models.Headers.encoding(self)->str
httpx._models.Headers.encoding(self,value:str)->None
httpx._models.Headers.get(self,key:str,default:typing.Any=None)->typing.Any
httpx._models.Headers.get_list(self,key:str,split_commas:bool=False)->list[str]
httpx._models.Headers.items(self)->typing.ItemsView[str, str]
httpx._models.Headers.keys(self)->typing.KeysView[str]
httpx._models.Headers.multi_items(self)->list[tuple[str, str]]
httpx._models.Headers.raw(self)->list[tuple[bytes, bytes]]
httpx._models.Headers.update(self,headers:HeaderTypes|None=None)->None
httpx._models.Headers.values(self)->typing.ValuesView[str]
httpx._models.Request(self,method:str|bytes,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,stream:SyncByteStream|AsyncByteStream|None=None,extensions:RequestExtensions|None=None)
httpx._models.Request.__getstate__(self)->dict[str, typing.Any]
httpx._models.Request.__init__(self,method:str|bytes,url:URL|str,*,params:QueryParamTypes|None=None,headers:HeaderTypes|None=None,cookies:CookieTypes|None=None,content:RequestContent|None=None,data:RequestData|None=None,files:RequestFiles|None=None,json:typing.Any|None=None,stream:SyncByteStream|AsyncByteStream|None=None,extensions:RequestExtensions|None=None)
httpx._models.Request.__repr__(self)->str
httpx._models.Request.__setstate__(self,state:dict[str,typing.Any])->None
httpx._models.Request._prepare(self,default_headers:dict[str,str])->None
httpx._models.Request.aread(self)->bytes
httpx._models.Request.content(self)->bytes
httpx._models.Request.read(self)->bytes
httpx._models.Response(self,status_code:int,*,headers:HeaderTypes|None=None,content:ResponseContent|None=None,text:str|None=None,html:str|None=None,json:typing.Any=None,stream:SyncByteStream|AsyncByteStream|None=None,request:Request|None=None,extensions:ResponseExtensions|None=None,history:list[Response]|None=None,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._models.Response.__getstate__(self)->dict[str, typing.Any]
httpx._models.Response.__init__(self,status_code:int,*,headers:HeaderTypes|None=None,content:ResponseContent|None=None,text:str|None=None,html:str|None=None,json:typing.Any=None,stream:SyncByteStream|AsyncByteStream|None=None,request:Request|None=None,extensions:ResponseExtensions|None=None,history:list[Response]|None=None,default_encoding:str|typing.Callable[[bytes],str]='utf-8')
httpx._models.Response.__repr__(self)->str
httpx._models.Response.__setstate__(self,state:dict[str,typing.Any])->None
httpx._models.Response._get_content_decoder(self)->ContentDecoder
httpx._models.Response._prepare(self,default_headers:dict[str,str])->None
httpx._models.Response.aclose(self)->None
httpx._models.Response.aiter_bytes(self,chunk_size:int|None=None)->typing.AsyncIterator[bytes]
httpx._models.Response.aiter_lines(self)->typing.AsyncIterator[str]
httpx._models.Response.aiter_raw(self,chunk_size:int|None=None)->typing.AsyncIterator[bytes]
httpx._models.Response.aiter_text(self,chunk_size:int|None=None)->typing.AsyncIterator[str]
httpx._models.Response.aread(self)->bytes
httpx._models.Response.charset_encoding(self)->str | None
httpx._models.Response.close(self)->None
httpx._models.Response.content(self)->bytes
httpx._models.Response.cookies(self)->Cookies
httpx._models.Response.elapsed(self)->datetime.timedelta
httpx._models.Response.elapsed(self,elapsed:datetime.timedelta)->None
httpx._models.Response.encoding(self)->str | None
httpx._models.Response.encoding(self,value:str)->None
httpx._models.Response.has_redirect_location(self)->bool
httpx._models.Response.http_version(self)->str
httpx._models.Response.is_client_error(self)->bool
httpx._models.Response.is_error(self)->bool
httpx._models.Response.is_informational(self)->bool
httpx._models.Response.is_redirect(self)->bool
httpx._models.Response.is_server_error(self)->bool
httpx._models.Response.is_success(self)->bool
httpx._models.Response.iter_bytes(self,chunk_size:int|None=None)->typing.Iterator[bytes]
httpx._models.Response.iter_lines(self)->typing.Iterator[str]
httpx._models.Response.iter_raw(self,chunk_size:int|None=None)->typing.Iterator[bytes]
httpx._models.Response.iter_text(self,chunk_size:int|None=None)->typing.Iterator[str]
httpx._models.Response.json(self,**kwargs:typing.Any)->typing.Any
httpx._models.Response.links(self)->dict[str | None, dict[str, str]]
httpx._models.Response.num_bytes_downloaded(self)->int
httpx._models.Response.raise_for_status(self)->Response
httpx._models.Response.read(self)->bytes
httpx._models.Response.reason_phrase(self)->str
httpx._models.Response.request(self)->Request
httpx._models.Response.request(self,value:Request)->None
httpx._models.Response.text(self)->str
httpx._models.Response.url(self)->URL


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_urlparse.py----------------------------------------
A:httpx._urlparse.PERCENT_ENCODED_REGEX->re.compile('%[A-Fa-f0-9]{2}')
A:httpx._urlparse.URL_REGEX->re.compile('(?:(?P<scheme>{scheme}):)?(?://(?P<authority>{authority}))?(?P<path>{path})(?:\\?(?P<query>{query}))?(?:#(?P<fragment>{fragment}))?'.format(scheme='([a-zA-Z][a-zA-Z0-9+.-]*)?', authority='[^/?#]*', path='[^?#]*', query='[^#]*', fragment='.*'))
A:httpx._urlparse.AUTHORITY_REGEX->re.compile('(?:(?P<userinfo>{userinfo})@)?(?P<host>{host}):?(?P<port>{port})?'.format(userinfo='.*', host='(\\[.*\\]|[^:@]*)', port='.*'))
A:httpx._urlparse.IPv4_STYLE_HOSTNAME->re.compile('^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$')
A:httpx._urlparse.IPv6_STYLE_HOSTNAME->re.compile('^\\[.*\\]$')
A:httpx._urlparse.char->next((char for char in value if char.isascii() and (not char.isprintable())))
A:httpx._urlparse.idx->value.find(char)
A:httpx._urlparse.(kwargs['host'], _, kwargs['port'])->netloc.partition(':')
A:httpx._urlparse.username->quote(kwargs.pop('username', '') or '')
A:httpx._urlparse.password->quote(kwargs.pop('password', '') or '')
A:httpx._urlparse.(kwargs['path'], seperator, kwargs['query'])->raw_path.partition('?')
A:httpx._urlparse.url_match->re.compile('(?:(?P<scheme>{scheme}):)?(?://(?P<authority>{authority}))?(?P<path>{path})(?:\\?(?P<query>{query}))?(?:#(?P<fragment>{fragment}))?'.format(scheme='([a-zA-Z][a-zA-Z0-9+.-]*)?', authority='[^/?#]*', path='[^?#]*', query='[^#]*', fragment='.*')).match(url)
A:httpx._urlparse.url_dict->re.compile('(?:(?P<scheme>{scheme}):)?(?://(?P<authority>{authority}))?(?P<path>{path})(?:\\?(?P<query>{query}))?(?:#(?P<fragment>{fragment}))?'.format(scheme='([a-zA-Z][a-zA-Z0-9+.-]*)?', authority='[^/?#]*', path='[^?#]*', query='[^#]*', fragment='.*')).match(url).groupdict()
A:httpx._urlparse.query->kwargs.get('query', url_dict['query'])
A:httpx._urlparse.fragment->kwargs.get('fragment', url_dict['fragment'])
A:httpx._urlparse.authority_match->re.compile('(?:(?P<userinfo>{userinfo})@)?(?P<host>{host}):?(?P<port>{port})?'.format(userinfo='.*', host='(\\[.*\\]|[^:@]*)', port='.*')).match(authority)
A:httpx._urlparse.authority_dict->re.compile('(?:(?P<userinfo>{userinfo})@)?(?P<host>{host}):?(?P<port>{port})?'.format(userinfo='.*', host='(\\[.*\\]|[^:@]*)', port='.*')).match(authority).groupdict()
A:httpx._urlparse.port->kwargs.get('port', authority_dict['port'])
A:httpx._urlparse.path->normalize_path(path)
A:httpx._urlparse.port_as_int->int(port)
A:httpx._urlparse.default_port->{'ftp': 21, 'http': 80, 'https': 443, 'ws': 80, 'wss': 443}.get(scheme)
A:httpx._urlparse.components->normalize_path(path).split('/')
A:httpx._urlparse.matched_text->match.group(0)
httpx._urlparse.PERCENT(string:str)->str
httpx._urlparse.ParseResult(typing.NamedTuple)
httpx._urlparse.ParseResult.__str__(self)->str
httpx._urlparse.ParseResult.authority(self)->str
httpx._urlparse.ParseResult.copy_with(self,**kwargs:str|None)->ParseResult
httpx._urlparse.ParseResult.netloc(self)->str
httpx._urlparse.encode_host(host:str)->str
httpx._urlparse.normalize_path(path:str)->str
httpx._urlparse.normalize_port(port:str|int|None,scheme:str)->int | None
httpx._urlparse.percent_encoded(string:str,safe:str='/')->str
httpx._urlparse.quote(string:str,safe:str='/')->str
httpx._urlparse.urlencode(items:list[tuple[str,str]])->str
httpx._urlparse.urlparse(url:str='',**kwargs:str|None)->ParseResult
httpx._urlparse.validate_path(path:str,has_scheme:bool,has_authority:bool)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/__version__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_auth.py----------------------------------------
A:httpx._auth.flow->self.auth_flow(request)
A:httpx._auth.request->self.auth_flow(request).send(response)
A:httpx._auth.self._auth_header->self._build_auth_header(username, password)
A:httpx._auth.userpass->b':'.join((to_bytes(username), to_bytes(password)))
A:httpx._auth.token->b64encode(userpass).decode()
A:httpx._auth.self._netrc_info->netrc.netrc(file)
A:httpx._auth.auth_info->self._netrc_info.authenticators(request.url.host)
A:httpx._auth.request.headers['Authorization']->self._build_auth_header(request, self._last_challenge)
A:httpx._auth.self._username->to_bytes(username)
A:httpx._auth.self._password->to_bytes(password)
A:httpx._auth.self._last_challenge->self._parse_challenge(request, response, auth_header)
A:httpx._auth.(scheme, _, fields)->auth_header.partition(' ')
A:httpx._auth.(key, value)->field.strip().split('=', 1)
A:httpx._auth.header_dict[key]->unquote(value)
A:httpx._auth.realm->header_dict['realm'].encode()
A:httpx._auth.nonce->header_dict['nonce'].encode()
A:httpx._auth.algorithm->header_dict.get('algorithm', 'MD5')
A:httpx._auth.A1->b':'.join((self._username, challenge.realm, self._password))
A:httpx._auth.A2->b':'.join((request.method.encode(), path))
A:httpx._auth.HA2->digest(A2)
A:httpx._auth.cnonce->self._get_client_nonce(self._nonce_count, challenge.nonce)
A:httpx._auth.HA1->digest(b':'.join((HA1, challenge.nonce, cnonce)))
A:httpx._auth.qop->self._resolve_qop(challenge.qop, request=request)
A:httpx._auth.s->str(nonce_count).encode()
A:httpx._auth.qops->re.split(b', ?', qop)
httpx.Auth
httpx.Auth.async_auth_flow(self,request:Request)->typing.AsyncGenerator[Request, Response]
httpx.Auth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.Auth.sync_auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.BasicAuth(self,username:str|bytes,password:str|bytes)
httpx.BasicAuth._build_auth_header(self,username:str|bytes,password:str|bytes)->str
httpx.BasicAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.DigestAuth(self,username:str|bytes,password:str|bytes)
httpx.DigestAuth._build_auth_header(self,request:Request,challenge:_DigestAuthChallenge)->str
httpx.DigestAuth._get_client_nonce(self,nonce_count:int,nonce:bytes)->bytes
httpx.DigestAuth._get_header_value(self,header_fields:dict[str,bytes])->str
httpx.DigestAuth._parse_challenge(self,request:Request,response:Response,auth_header:str)->_DigestAuthChallenge
httpx.DigestAuth._resolve_qop(self,qop:bytes|None,request:Request)->bytes | None
httpx.DigestAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.FunctionAuth(self,func:typing.Callable[[Request],Request])
httpx.FunctionAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.NetRCAuth(self,file:str|None=None)
httpx.NetRCAuth._build_auth_header(self,username:str|bytes,password:str|bytes)->str
httpx.NetRCAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._DigestAuthChallenge(typing.NamedTuple)
httpx._auth.Auth
httpx._auth.Auth.async_auth_flow(self,request:Request)->typing.AsyncGenerator[Request, Response]
httpx._auth.Auth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.Auth.sync_auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.BasicAuth(self,username:str|bytes,password:str|bytes)
httpx._auth.BasicAuth.__init__(self,username:str|bytes,password:str|bytes)
httpx._auth.BasicAuth._build_auth_header(self,username:str|bytes,password:str|bytes)->str
httpx._auth.BasicAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.DigestAuth(self,username:str|bytes,password:str|bytes)
httpx._auth.DigestAuth.__init__(self,username:str|bytes,password:str|bytes)
httpx._auth.DigestAuth._build_auth_header(self,request:Request,challenge:_DigestAuthChallenge)->str
httpx._auth.DigestAuth._get_client_nonce(self,nonce_count:int,nonce:bytes)->bytes
httpx._auth.DigestAuth._get_header_value(self,header_fields:dict[str,bytes])->str
httpx._auth.DigestAuth._parse_challenge(self,request:Request,response:Response,auth_header:str)->_DigestAuthChallenge
httpx._auth.DigestAuth._resolve_qop(self,qop:bytes|None,request:Request)->bytes | None
httpx._auth.DigestAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.FunctionAuth(self,func:typing.Callable[[Request],Request])
httpx._auth.FunctionAuth.__init__(self,func:typing.Callable[[Request],Request])
httpx._auth.FunctionAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.NetRCAuth(self,file:str|None=None)
httpx._auth.NetRCAuth.__init__(self,file:str|None=None)
httpx._auth.NetRCAuth._build_auth_header(self,username:str|bytes,password:str|bytes)->str
httpx._auth.NetRCAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth._DigestAuthChallenge(typing.NamedTuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/asgi.py----------------------------------------
A:httpx._transports.asgi.request_body_chunks->request.stream.__aiter__()
A:httpx._transports.asgi.response_complete->create_event()
A:httpx._transports.asgi.response_headers->message.get('headers', [])
A:httpx._transports.asgi.body->message.get('body', b'')
A:httpx._transports.asgi.more_body->message.get('more_body', False)
A:httpx._transports.asgi.stream->ASGIResponseStream(body_parts)
httpx.ASGIResponseStream(self,body:list[bytes])
httpx.ASGIResponseStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx.ASGITransport(self,app:_ASGIApp,raise_app_exceptions:bool=True,root_path:str='',client:tuple[str,int]=('127.0.0.1',123))
httpx.ASGITransport.handle_async_request(self,request:Request)->Response
httpx._transports.asgi.ASGIResponseStream(self,body:list[bytes])
httpx._transports.asgi.ASGIResponseStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx._transports.asgi.ASGIResponseStream.__init__(self,body:list[bytes])
httpx._transports.asgi.ASGITransport(self,app:_ASGIApp,raise_app_exceptions:bool=True,root_path:str='',client:tuple[str,int]=('127.0.0.1',123))
httpx._transports.asgi.ASGITransport.__init__(self,app:_ASGIApp,raise_app_exceptions:bool=True,root_path:str='',client:tuple[str,int]=('127.0.0.1',123))
httpx._transports.asgi.ASGITransport.handle_async_request(self,request:Request)->Response
httpx._transports.asgi.create_event()->Event
httpx.create_event()->Event


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/mock.py----------------------------------------
A:httpx._transports.mock.response->self.handler(request)
httpx.MockTransport(self,handler:SyncHandler|AsyncHandler)
httpx.MockTransport.handle_async_request(self,request:Request)->Response
httpx.MockTransport.handle_request(self,request:Request)->Response
httpx._transports.mock.MockTransport(self,handler:SyncHandler|AsyncHandler)
httpx._transports.mock.MockTransport.__init__(self,handler:SyncHandler|AsyncHandler)
httpx._transports.mock.MockTransport.handle_async_request(self,request:Request)->Response
httpx._transports.mock.MockTransport.handle_request(self,request:Request)->Response


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/wsgi.py----------------------------------------
A:httpx._transports.wsgi._T->typing.TypeVar('_T')
A:httpx._transports.wsgi.body->iter(body)
A:httpx._transports.wsgi.self._close->getattr(result, 'close', None)
A:httpx._transports.wsgi.self._result->_skip_leading_empty_chunks(result)
A:httpx._transports.wsgi.wsgi_input->io.BytesIO(request.content)
A:httpx._transports.wsgi.key->header_key.decode('ascii').upper().replace('-', '_')
A:httpx._transports.wsgi.environ[key]->header_value.decode('ascii')
A:httpx._transports.wsgi.result->self.app(environ, start_response)
A:httpx._transports.wsgi.stream->WSGIByteStream(result)
A:httpx._transports.wsgi.status_code->int(seen_status.split()[0])
httpx.WSGIByteStream(self,result:typing.Iterable[bytes])
httpx.WSGIByteStream.__iter__(self)->typing.Iterator[bytes]
httpx.WSGIByteStream.close(self)->None
httpx.WSGITransport(self,app:WSGIApplication,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1',wsgi_errors:typing.TextIO|None=None)
httpx.WSGITransport.handle_request(self,request:Request)->Response
httpx._skip_leading_empty_chunks(body:typing.Iterable[_T])->typing.Iterable[_T]
httpx._transports.wsgi.WSGIByteStream(self,result:typing.Iterable[bytes])
httpx._transports.wsgi.WSGIByteStream.__init__(self,result:typing.Iterable[bytes])
httpx._transports.wsgi.WSGIByteStream.__iter__(self)->typing.Iterator[bytes]
httpx._transports.wsgi.WSGIByteStream.close(self)->None
httpx._transports.wsgi.WSGITransport(self,app:WSGIApplication,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1',wsgi_errors:typing.TextIO|None=None)
httpx._transports.wsgi.WSGITransport.__init__(self,app:WSGIApplication,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1',wsgi_errors:typing.TextIO|None=None)
httpx._transports.wsgi.WSGITransport.handle_request(self,request:Request)->Response
httpx._transports.wsgi._skip_leading_empty_chunks(body:typing.Iterable[_T])->typing.Iterable[_T]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/default.py----------------------------------------
A:httpx._transports.default.T->typing.TypeVar('T', bound='HTTPTransport')
A:httpx._transports.default.A->typing.TypeVar('A', bound='AsyncHTTPTransport')
A:httpx._transports.default.message->str(exc)
A:httpx._transports.default.ssl_context->create_ssl_context(verify=verify, cert=cert, trust_env=trust_env)
A:httpx._transports.default.self._pool->httpcore.AsyncSOCKSProxy(proxy_url=httpcore.URL(scheme=proxy.url.raw_scheme, host=proxy.url.raw_host, port=proxy.url.port, target=proxy.url.raw_path), proxy_auth=proxy.raw_auth, ssl_context=ssl_context, max_connections=limits.max_connections, max_keepalive_connections=limits.max_keepalive_connections, keepalive_expiry=limits.keepalive_expiry, http1=http1, http2=http2)
A:httpx._transports.default.req->httpcore.Request(method=request.method, url=httpcore.URL(scheme=request.url.raw_scheme, host=request.url.raw_host, port=request.url.port, target=request.url.raw_path), headers=request.headers.raw, content=request.stream, extensions=request.extensions)
A:httpx._transports.default.resp->self._pool.handle_request(req)
httpx.AsyncHTTPTransport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx.AsyncHTTPTransport.__aenter__(self:A)->A
httpx.AsyncHTTPTransport.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.AsyncHTTPTransport.aclose(self)->None
httpx.AsyncHTTPTransport.handle_async_request(self,request:Request)->Response
httpx.AsyncResponseStream(self,httpcore_stream:typing.AsyncIterable[bytes])
httpx.AsyncResponseStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx.AsyncResponseStream.aclose(self)->None
httpx.HTTPTransport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx.HTTPTransport.__enter__(self:T)->T
httpx.HTTPTransport.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.HTTPTransport.close(self)->None
httpx.HTTPTransport.handle_request(self,request:Request)->Response
httpx.ResponseStream(self,httpcore_stream:typing.Iterable[bytes])
httpx.ResponseStream.__iter__(self)->typing.Iterator[bytes]
httpx.ResponseStream.close(self)->None
httpx._transports.default.AsyncHTTPTransport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx._transports.default.AsyncHTTPTransport.__aenter__(self:A)->A
httpx._transports.default.AsyncHTTPTransport.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._transports.default.AsyncHTTPTransport.__init__(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx._transports.default.AsyncHTTPTransport.aclose(self)->None
httpx._transports.default.AsyncHTTPTransport.handle_async_request(self,request:Request)->Response
httpx._transports.default.AsyncResponseStream(self,httpcore_stream:typing.AsyncIterable[bytes])
httpx._transports.default.AsyncResponseStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx._transports.default.AsyncResponseStream.__init__(self,httpcore_stream:typing.AsyncIterable[bytes])
httpx._transports.default.AsyncResponseStream.aclose(self)->None
httpx._transports.default.HTTPTransport(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx._transports.default.HTTPTransport.__enter__(self:T)->T
httpx._transports.default.HTTPTransport.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._transports.default.HTTPTransport.__init__(self,verify:VerifyTypes=True,cert:CertTypes|None=None,http1:bool=True,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True,proxy:ProxyTypes|None=None,uds:str|None=None,local_address:str|None=None,retries:int=0,socket_options:typing.Iterable[SOCKET_OPTION]|None=None)
httpx._transports.default.HTTPTransport.close(self)->None
httpx._transports.default.HTTPTransport.handle_request(self,request:Request)->Response
httpx._transports.default.ResponseStream(self,httpcore_stream:typing.Iterable[bytes])
httpx._transports.default.ResponseStream.__init__(self,httpcore_stream:typing.Iterable[bytes])
httpx._transports.default.ResponseStream.__iter__(self)->typing.Iterator[bytes]
httpx._transports.default.ResponseStream.close(self)->None
httpx._transports.default.map_httpcore_exceptions()->typing.Iterator[None]
httpx.map_httpcore_exceptions()->typing.Iterator[None]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.27.1/lib/python3.9/site-packages/httpx/_transports/base.py----------------------------------------
A:httpx._transports.base.T->typing.TypeVar('T', bound='BaseTransport')
A:httpx._transports.base.A->typing.TypeVar('A', bound='AsyncBaseTransport')
httpx.AsyncBaseTransport
httpx.AsyncBaseTransport.__aenter__(self:A)->A
httpx.AsyncBaseTransport.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.AsyncBaseTransport.aclose(self)->None
httpx.AsyncBaseTransport.handle_async_request(self,request:Request)->Response
httpx.BaseTransport
httpx.BaseTransport.__enter__(self:T)->T
httpx.BaseTransport.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx.BaseTransport.close(self)->None
httpx.BaseTransport.handle_request(self,request:Request)->Response
httpx._transports.base.AsyncBaseTransport
httpx._transports.base.AsyncBaseTransport.__aenter__(self:A)->A
httpx._transports.base.AsyncBaseTransport.__aexit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._transports.base.AsyncBaseTransport.aclose(self)->None
httpx._transports.base.AsyncBaseTransport.handle_async_request(self,request:Request)->Response
httpx._transports.base.BaseTransport
httpx._transports.base.BaseTransport.__enter__(self:T)->T
httpx._transports.base.BaseTransport.__exit__(self,exc_type:type[BaseException]|None=None,exc_value:BaseException|None=None,traceback:TracebackType|None=None)->None
httpx._transports.base.BaseTransport.close(self)->None
httpx._transports.base.BaseTransport.handle_request(self,request:Request)->Response

