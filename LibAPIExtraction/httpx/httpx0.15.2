
----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_content.py----------------------------------------
A:httpx._content.content_length->str(len(body))
A:httpx._content.stream->MultipartStream(data=data, files=files, boundary=boundary)
A:httpx._content.generator_stream->GeneratorStream(content)
A:httpx._content.agenerator_stream->AsyncGeneratorStream(content)
A:httpx._content.body->json_dumps(json).encode('utf-8')
A:httpx._content.headers->MultipartStream(data=data, files=files, boundary=boundary).get_headers()
httpx._content.AsyncGeneratorStream(self,agenerator:AsyncIterable[bytes])
httpx._content.AsyncGeneratorStream.__aiter__(self)->AsyncIterator[bytes]
httpx._content.AsyncGeneratorStream.__init__(self,agenerator:AsyncIterable[bytes])
httpx._content.GeneratorStream(self,generator:Iterable[bytes])
httpx._content.GeneratorStream.__init__(self,generator:Iterable[bytes])
httpx._content.GeneratorStream.__iter__(self)->Iterator[bytes]
httpx._content.PlainByteStream(self,body:bytes)
httpx._content.PlainByteStream.__aiter__(self)->AsyncIterator[bytes]
httpx._content.PlainByteStream.__init__(self,body:bytes)
httpx._content.PlainByteStream.__iter__(self)->Iterator[bytes]
httpx._content.encode_content(content:Union[str,bytes,ByteStream])->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_html(html:str)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_json(json:Any)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_multipart_data(data:dict,files:RequestFiles,boundary:bytes=None)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_request(content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:Any=None,boundary:bytes=None)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_response(content:ResponseContent=None,text:str=None,html:str=None,json:Any=None)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_text(text:str)->Tuple[Dict[str, str], ByteStream]
httpx._content.encode_urlencoded_data(data:dict)->Tuple[Dict[str, str], ByteStream]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_status_codes.py----------------------------------------
A:httpx._status_codes.obj->int.__new__(cls, value)
A:httpx._status_codes.StatusCode->StatusCodeCompat()
httpx.StatusCodeCompat(self,*args,**kwargs)
httpx.StatusCodeCompat.__getattr__(self,attr)
httpx.StatusCodeCompat.__getitem__(self,item)
httpx._status_codes.StatusCodeCompat(self,*args,**kwargs)
httpx._status_codes.StatusCodeCompat.__call__(self,*args,**kwargs)
httpx._status_codes.StatusCodeCompat.__getattr__(self,attr)
httpx._status_codes.StatusCodeCompat.__getitem__(self,item)
httpx._status_codes.codes(cls,value:int,phrase:str='')
httpx._status_codes.codes.__new__(cls,value:int,phrase:str='')
httpx._status_codes.codes.__str__(self)->str
httpx._status_codes.codes.get_reason_phrase(cls,value:int)->str
httpx._status_codes.codes.is_client_error(cls,value:int)->bool
httpx._status_codes.codes.is_error(cls,value:int)->bool
httpx._status_codes.codes.is_redirect(cls,value:int)->bool
httpx._status_codes.codes.is_server_error(cls,value:int)->bool
httpx.codes(cls,value:int,phrase:str='')
httpx.codes.__str__(self)->str
httpx.codes.get_reason_phrase(cls,value:int)->str
httpx.codes.is_client_error(cls,value:int)->bool
httpx.codes.is_error(cls,value:int)->bool
httpx.codes.is_redirect(cls,value:int)->bool
httpx.codes.is_server_error(cls,value:int)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/__init__.py----------------------------------------
A:httpx.__init__.__locals->locals()


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_exceptions.py----------------------------------------
A:httpx._exceptions.message->str(exc)
httpx.CloseError(NetworkError)
httpx.ConnectError(NetworkError)
httpx.ConnectTimeout(TimeoutException)
httpx.CookieConflict(self,message:str)
httpx.DecodingError(RequestError)
httpx.HTTPError(self,message:str,*,request:'Request')
httpx.HTTPStatusError(self,message:str,*,request:'Request',response:'Response')
httpx.InvalidURL(self,message:str)
httpx.LocalProtocolError(ProtocolError)
httpx.NetworkError(TransportError)
httpx.NotRedirectResponse(self,message:str)
httpx.PoolTimeout(TimeoutException)
httpx.ProtocolError(TransportError)
httpx.ProxyError(TransportError)
httpx.ReadError(NetworkError)
httpx.ReadTimeout(TimeoutException)
httpx.RemoteProtocolError(ProtocolError)
httpx.RequestError(self,message:str,*,request:'Request')
httpx.RequestNotRead(self)
httpx.ResponseClosed(self)
httpx.ResponseNotRead(self)
httpx.StreamConsumed(self)
httpx.StreamError(self,message:str)
httpx.TimeoutException(TransportError)
httpx.TooManyRedirects(RequestError)
httpx.TransportError(RequestError)
httpx.UnsupportedProtocol(TransportError)
httpx.WriteError(NetworkError)
httpx.WriteTimeout(TimeoutException)
httpx._exceptions.CloseError(NetworkError)
httpx._exceptions.ConnectError(NetworkError)
httpx._exceptions.ConnectTimeout(TimeoutException)
httpx._exceptions.CookieConflict(self,message:str)
httpx._exceptions.CookieConflict.__init__(self,message:str)
httpx._exceptions.DecodingError(RequestError)
httpx._exceptions.HTTPError(self,message:str,*,request:'Request')
httpx._exceptions.HTTPError.__init__(self,message:str,*,request:'Request')
httpx._exceptions.HTTPStatusError(self,message:str,*,request:'Request',response:'Response')
httpx._exceptions.HTTPStatusError.__init__(self,message:str,*,request:'Request',response:'Response')
httpx._exceptions.InvalidURL(self,message:str)
httpx._exceptions.InvalidURL.__init__(self,message:str)
httpx._exceptions.LocalProtocolError(ProtocolError)
httpx._exceptions.NetworkError(TransportError)
httpx._exceptions.NotRedirectResponse(self,message:str)
httpx._exceptions.NotRedirectResponse.__init__(self,message:str)
httpx._exceptions.PoolTimeout(TimeoutException)
httpx._exceptions.ProtocolError(TransportError)
httpx._exceptions.ProxyError(TransportError)
httpx._exceptions.ReadError(NetworkError)
httpx._exceptions.ReadTimeout(TimeoutException)
httpx._exceptions.RemoteProtocolError(ProtocolError)
httpx._exceptions.RequestError(self,message:str,*,request:'Request')
httpx._exceptions.RequestError.__init__(self,message:str,*,request:'Request')
httpx._exceptions.RequestNotRead(self)
httpx._exceptions.RequestNotRead.__init__(self)
httpx._exceptions.ResponseClosed(self)
httpx._exceptions.ResponseClosed.__init__(self)
httpx._exceptions.ResponseNotRead(self)
httpx._exceptions.ResponseNotRead.__init__(self)
httpx._exceptions.StreamConsumed(self)
httpx._exceptions.StreamConsumed.__init__(self)
httpx._exceptions.StreamError(self,message:str)
httpx._exceptions.StreamError.__init__(self,message:str)
httpx._exceptions.TimeoutException(TransportError)
httpx._exceptions.TooManyRedirects(RequestError)
httpx._exceptions.TransportError(RequestError)
httpx._exceptions.UnsupportedProtocol(TransportError)
httpx._exceptions.WriteError(NetworkError)
httpx._exceptions.WriteTimeout(TimeoutException)
httpx._exceptions.map_exceptions(mapping:typing.Mapping[typing.Type[Exception],typing.Type[Exception]],**kwargs:typing.Any)->typing.Iterator[None]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_utils.py----------------------------------------
A:httpx._utils._HTML5_FORM_ENCODING_RE->re.compile('|'.join([re.escape(c) for c in _HTML5_FORM_ENCODING_REPLACEMENTS.keys()]))
A:httpx._utils.value->value.strip(replace_chars).strip(replace_chars)
A:httpx._utils.nullcount->sample.count(_null)
A:httpx._utils.expanded_path->Path(file_path).expanduser()
A:httpx._utils.self._netrc_info->netrc.netrc(str(expanded_path))
A:httpx._utils.auth_info->self.netrc_info.authenticators(host)
A:httpx._utils.ssl_file->Path(os.environ['SSL_CERT_FILE'])
A:httpx._utils.ssl_path->Path(os.environ['SSL_CERT_DIR'])
A:httpx._utils.(url, params)->val.split(';', 1)
A:httpx._utils.(key, value)->param.split('=')
A:httpx._utils.link[key.strip(replace_chars)]->value.strip(replace_chars).strip(replace_chars).strip(replace_chars)
A:httpx._utils.v->to_bytes_or_str('[secure]', match_type_of=v)
A:httpx._utils.log_level->os.environ.get('HTTPX_LOG_LEVEL', '').upper()
A:httpx._utils.logger->logging.getLogger(name)
A:httpx._utils.handler->logging.StreamHandler(sys.stderr)
A:httpx._utils.proxy_info->getproxies()
A:httpx._utils.fd->stream.fileno()
A:httpx._utils.offset->stream.tell()
A:httpx._utils.length->stream.seek(0, os.SEEK_END)
A:httpx._utils.library->sniffio.current_async_library()
A:httpx._utils.self.started->time.perf_counter()
A:httpx._utils.now->time.perf_counter()
A:httpx._utils.url->URL(pattern)
A:httpx._utils.domain->re.escape(url.host)
A:httpx._utils.self.host_regex->re.compile(f'^{domain}$')
httpx._utils.Logger(logging.Logger)
httpx._utils.Logger.trace(self,message:str,*args:typing.Any,**kwargs:typing.Any)->None
httpx._utils.NetRCInfo(self,files:typing.Optional[typing.List[str]]=None)
httpx._utils.NetRCInfo.__init__(self,files:typing.Optional[typing.List[str]]=None)
httpx._utils.NetRCInfo.get_credentials(self,host:str)->typing.Optional[typing.Tuple[str, str]]
httpx._utils.NetRCInfo.netrc_info(self)->typing.Optional[netrc.netrc]
httpx._utils.Timer
httpx._utils.Timer._get_time(self)->float
httpx._utils.Timer.async_elapsed(self)->float
httpx._utils.Timer.async_start(self)->None
httpx._utils.Timer.sync_elapsed(self)->float
httpx._utils.Timer.sync_start(self)->None
httpx._utils.URLPattern(self,pattern:str)
httpx._utils.URLPattern.__eq__(self,other:typing.Any)->bool
httpx._utils.URLPattern.__hash__(self)->int
httpx._utils.URLPattern.__init__(self,pattern:str)
httpx._utils.URLPattern.__lt__(self,other:'URLPattern')->bool
httpx._utils.URLPattern.matches(self,other:'URL')->bool
httpx._utils.URLPattern.priority(self)->tuple
httpx._utils.flatten_queryparams(queryparams:typing.Mapping[str,typing.Union['PrimitiveData',typing.Sequence['PrimitiveData']]])->typing.List[typing.Tuple[str, 'PrimitiveData']]
httpx._utils.format_form_param(name:str,value:typing.Union[str,bytes])->bytes
httpx._utils.get_ca_bundle_from_env()->typing.Optional[str]
httpx._utils.get_environment_proxies()->typing.Dict[str, typing.Optional[str]]
httpx._utils.get_logger(name:str)->Logger
httpx._utils.guess_content_type(filename:typing.Optional[str])->typing.Optional[str]
httpx._utils.guess_json_utf(data:bytes)->typing.Optional[str]
httpx._utils.is_known_encoding(encoding:str)->bool
httpx._utils.normalize_header_key(value:typing.Union[str,bytes],encoding:str=None)->bytes
httpx._utils.normalize_header_value(value:typing.Union[str,bytes],encoding:str=None)->bytes
httpx._utils.obfuscate_sensitive_headers(items:typing.Iterable[typing.Tuple[typing.AnyStr,typing.AnyStr]])->typing.Iterator[typing.Tuple[typing.AnyStr, typing.AnyStr]]
httpx._utils.parse_header_links(value:str)->typing.List[typing.Dict[str, str]]
httpx._utils.peek_filelike_length(stream:typing.IO)->int
httpx._utils.port_or_default(url:'URL')->typing.Optional[int]
httpx._utils.same_origin(url:'URL',other:'URL')->bool
httpx._utils.str_query_param(value:'PrimitiveData')->str
httpx._utils.to_bytes(value:typing.Union[str,bytes],encoding:str='utf-8')->bytes
httpx._utils.to_bytes_or_str(value:str,match_type_of:typing.AnyStr)->typing.AnyStr
httpx._utils.to_str(value:typing.Union[str,bytes],encoding:str='utf-8')->str
httpx._utils.unquote(value:str)->str
httpx._utils.warn_deprecated(message:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_multipart.py----------------------------------------
A:httpx._multipart.name->format_form_param('name', self.name)
A:httpx._multipart.self._headers->b''.join(parts)
A:httpx._multipart.headers->self.render_headers()
A:httpx._multipart.data->self.render_data()
A:httpx._multipart.content_type->self.content_type.encode()
A:httpx._multipart.file_length->len(self._data)
A:httpx._multipart.self._data->to_bytes(self.file.read())
A:httpx._multipart.filename->format_form_param('filename', self.filename)
A:httpx._multipart.boundary->binascii.hexlify(os.urandom(16))
A:httpx._multipart.self.fields->list(self._iter_fields(data, files))
A:httpx._multipart.boundary_length->len(self.boundary)
A:httpx._multipart.content_length->str(self.get_content_length())
httpx._multipart.DataField(self,name:str,value:typing.Union[str,bytes])
httpx._multipart.DataField.__init__(self,name:str,value:typing.Union[str,bytes])
httpx._multipart.DataField.get_length(self)->int
httpx._multipart.DataField.render(self)->typing.Iterator[bytes]
httpx._multipart.DataField.render_data(self)->bytes
httpx._multipart.DataField.render_headers(self)->bytes
httpx._multipart.FileField(self,name:str,value:FileTypes)
httpx._multipart.FileField.__init__(self,name:str,value:FileTypes)
httpx._multipart.FileField.get_length(self)->int
httpx._multipart.FileField.render(self)->typing.Iterator[bytes]
httpx._multipart.FileField.render_data(self)->typing.Iterator[bytes]
httpx._multipart.FileField.render_headers(self)->bytes
httpx._multipart.MultipartStream(self,data:dict,files:RequestFiles,boundary:bytes=None)
httpx._multipart.MultipartStream.__aiter__(self)->typing.AsyncIterator[bytes]
httpx._multipart.MultipartStream.__init__(self,data:dict,files:RequestFiles,boundary:bytes=None)
httpx._multipart.MultipartStream.__iter__(self)->typing.Iterator[bytes]
httpx._multipart.MultipartStream._iter_fields(self,data:dict,files:RequestFiles)->typing.Iterator[typing.Union[FileField, DataField]]
httpx._multipart.MultipartStream.get_content_length(self)->int
httpx._multipart.MultipartStream.get_headers(self)->typing.Dict[str, str]
httpx._multipart.MultipartStream.iter_chunks(self)->typing.Iterator[bytes]
httpx._multipart.MultipartStream.iter_chunks_lengths(self)->typing.Iterator[int]


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_config.py----------------------------------------
A:httpx._config.DEFAULT_CIPHERS->':'.join(['ECDHE+AESGCM', 'ECDHE+CHACHA20', 'DHE+AESGCM', 'DHE+CHACHA20', 'ECDH+AESGCM', 'DH+AESGCM', 'ECDH+AES', 'DH+AES', 'RSA+AESGCM', 'RSA+AES', '!aNULL', '!eNULL', '!MD5', '!DSS'])
A:httpx._config.logger->get_logger(__name__)
A:httpx._config.UNSET->UnsetType()
A:httpx._config.DEFAULT_CA_BUNDLE_PATH->Path(certifi.where())
A:httpx._config.self.ssl_context->self.load_ssl_context()
A:httpx._config.context->ssl.SSLContext(ssl.PROTOCOL_TLS)
A:httpx._config.ca_bundle->get_ca_bundle_from_env()
A:httpx._config.ca_bundle_path->Path(self.verify)
A:httpx._config.keylogfile->os.environ.get('SSLKEYLOGFILE')
A:httpx._config.url->url.copy_with(username=None, password=None).copy_with(username=None, password=None)
A:httpx._config.headers->Headers(headers)
A:httpx._config.token->b64encode(b':'.join(userpass)).decode()
A:httpx._config.DEFAULT_TIMEOUT_CONFIG->Timeout(timeout=5.0)
A:httpx._config.DEFAULT_LIMITS->Limits(max_connections=100, max_keepalive_connections=20)
httpx.Limits(self,*,max_connections:int=None,max_keepalive_connections:int=None)
httpx.Limits.__eq__(self,other:typing.Any)->bool
httpx.Limits.__repr__(self)->str
httpx.Proxy(self,url:URLTypes,*,headers:HeaderTypes=None,mode:str='DEFAULT')
httpx.Proxy.__repr__(self)->str
httpx.Proxy._build_auth_header(self,username:str,password:str)->str
httpx.Timeout(self,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET,*,connect:typing.Union[None,float,UnsetType]=UNSET,read:typing.Union[None,float,UnsetType]=UNSET,write:typing.Union[None,float,UnsetType]=UNSET,pool:typing.Union[None,float,UnsetType]=UNSET)
httpx.Timeout.__eq__(self,other:typing.Any)->bool
httpx.Timeout.__repr__(self)->str
httpx.Timeout.as_dict(self)->typing.Dict[str, typing.Optional[float]]
httpx._config.Limits(self,*,max_connections:int=None,max_keepalive_connections:int=None)
httpx._config.Limits.__eq__(self,other:typing.Any)->bool
httpx._config.Limits.__init__(self,*,max_connections:int=None,max_keepalive_connections:int=None)
httpx._config.Limits.__repr__(self)->str
httpx._config.Proxy(self,url:URLTypes,*,headers:HeaderTypes=None,mode:str='DEFAULT')
httpx._config.Proxy.__init__(self,url:URLTypes,*,headers:HeaderTypes=None,mode:str='DEFAULT')
httpx._config.Proxy.__repr__(self)->str
httpx._config.Proxy._build_auth_header(self,username:str,password:str)->str
httpx._config.SSLConfig(self,*,cert:CertTypes=None,verify:VerifyTypes=True,trust_env:bool=None,http2:bool=False)
httpx._config.SSLConfig.__init__(self,*,cert:CertTypes=None,verify:VerifyTypes=True,trust_env:bool=None,http2:bool=False)
httpx._config.SSLConfig._create_default_ssl_context(self)->ssl.SSLContext
httpx._config.SSLConfig._load_client_certs(self,ssl_context:ssl.SSLContext)->None
httpx._config.SSLConfig.load_ssl_context(self)->ssl.SSLContext
httpx._config.SSLConfig.load_ssl_context_no_verify(self)->ssl.SSLContext
httpx._config.SSLConfig.load_ssl_context_verify(self)->ssl.SSLContext
httpx._config.Timeout(self,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET,*,connect:typing.Union[None,float,UnsetType]=UNSET,read:typing.Union[None,float,UnsetType]=UNSET,write:typing.Union[None,float,UnsetType]=UNSET,pool:typing.Union[None,float,UnsetType]=UNSET)
httpx._config.Timeout.__eq__(self,other:typing.Any)->bool
httpx._config.Timeout.__init__(self,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET,*,connect:typing.Union[None,float,UnsetType]=UNSET,read:typing.Union[None,float,UnsetType]=UNSET,write:typing.Union[None,float,UnsetType]=UNSET,pool:typing.Union[None,float,UnsetType]=UNSET)
httpx._config.Timeout.__repr__(self)->str
httpx._config.Timeout.as_dict(self)->typing.Dict[str, typing.Optional[float]]
httpx._config.UnsetType
httpx._config.create_ssl_context(cert:CertTypes=None,verify:VerifyTypes=True,trust_env:bool=None,http2:bool=False)->ssl.SSLContext
httpx.create_ssl_context(cert:CertTypes=None,verify:VerifyTypes=True,trust_env:bool=None,http2:bool=False)->ssl.SSLContext


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_decoders.py----------------------------------------
A:httpx._decoders.self.decompressor->brotli.Decompressor()
A:httpx._decoders.self.children->list(reversed(children))
A:httpx._decoders.data->child.decode(data)
A:httpx._decoders.self.decoder->codecs.getincrementaldecoder('utf-8')(errors='replace')
A:httpx._decoders.attempt_utf_8->codecs.getincrementaldecoder('utf-8')(errors='strict')
A:httpx._decoders.num_chars->len(text)
httpx._decoders.BrotliDecoder(self)
httpx._decoders.BrotliDecoder.__init__(self)
httpx._decoders.BrotliDecoder.decode(self,data:bytes)->bytes
httpx._decoders.BrotliDecoder.flush(self)->bytes
httpx._decoders.ContentDecoder
httpx._decoders.ContentDecoder.decode(self,data:bytes)->bytes
httpx._decoders.ContentDecoder.flush(self)->bytes
httpx._decoders.DeflateDecoder(self)
httpx._decoders.DeflateDecoder.__init__(self)
httpx._decoders.DeflateDecoder.decode(self,data:bytes)->bytes
httpx._decoders.DeflateDecoder.flush(self)->bytes
httpx._decoders.GZipDecoder(self)
httpx._decoders.GZipDecoder.__init__(self)
httpx._decoders.GZipDecoder.decode(self,data:bytes)->bytes
httpx._decoders.GZipDecoder.flush(self)->bytes
httpx._decoders.IdentityDecoder(ContentDecoder)
httpx._decoders.IdentityDecoder.decode(self,data:bytes)->bytes
httpx._decoders.IdentityDecoder.flush(self)->bytes
httpx._decoders.LineDecoder(self)
httpx._decoders.LineDecoder.__init__(self)
httpx._decoders.LineDecoder.decode(self,text:str)->typing.List[str]
httpx._decoders.LineDecoder.flush(self)->typing.List[str]
httpx._decoders.MultiDecoder(self,children:typing.Sequence[ContentDecoder])
httpx._decoders.MultiDecoder.__init__(self,children:typing.Sequence[ContentDecoder])
httpx._decoders.MultiDecoder.decode(self,data:bytes)->bytes
httpx._decoders.MultiDecoder.flush(self)->bytes
httpx._decoders.TextDecoder(self,encoding:typing.Optional[str]=None)
httpx._decoders.TextDecoder.__init__(self,encoding:typing.Optional[str]=None)
httpx._decoders.TextDecoder.decode(self,data:bytes)->str
httpx._decoders.TextDecoder.flush(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_client.py----------------------------------------
A:httpx._client.logger->get_logger(__name__)
A:httpx._client.ACCEPT_ENCODING->', '.join([key for key in SUPPORTED_DECODERS.keys() if key != 'identity'])
A:httpx._client.self._base_url->self._enforce_trailing_slash(URL(url))
A:httpx._client.self._auth->self._build_auth(auth)
A:httpx._client.self._params->QueryParams(params)
A:httpx._client.self.headers->Headers(headers)
A:httpx._client.self._cookies->Cookies(cookies)
A:httpx._client.self._timeout->Timeout(timeout)
A:httpx._client.self._netrc->NetRCInfo()
A:httpx._client.client_headers->Headers({b'Accept': b'*/*', b'Accept-Encoding': ACCEPT_ENCODING.encode('ascii'), b'Connection': b'keep-alive', b'User-Agent': USER_AGENT.encode('ascii')})
A:httpx._client.request->self._build_redirect_request(request, response)
A:httpx._client.url->url.copy_with(fragment=request.url.fragment).copy_with(fragment=request.url.fragment)
A:httpx._client.headers->Headers(request.headers)
A:httpx._client.cookies->Cookies(self.cookies)
A:httpx._client.params->self._merge_queryparams(params)
A:httpx._client.merge_url->merge_url.copy_with(path=merge_url.path.lstrip('/')).copy_with(path=merge_url.path.lstrip('/'))
A:httpx._client.merged_cookies->Cookies(self.cookies)
A:httpx._client.merged_headers->Headers(self.headers)
A:httpx._client.merged_queryparams->QueryParams(self.params)
A:httpx._client.credentials->self._netrc.get_credentials(request.url.host)
A:httpx._client.method->self._redirect_method(request, response)
A:httpx._client.stream->self._redirect_stream(request, method)
A:httpx._client.proxy_map->self._get_proxy_map(proxies, allow_env_proxies)
A:httpx._client.self._transport->self._init_transport(verify=verify, cert=cert, http2=http2, limits=limits, transport=transport, app=app, trust_env=trust_env)
A:httpx._client.self._proxies->dict(sorted(self._proxies.items()))
A:httpx._client.ssl_context->create_ssl_context(verify=verify, cert=cert, trust_env=trust_env)
A:httpx._client.auth->self._build_request_auth(request, auth)
A:httpx._client.response->Response(status_code, headers=headers, stream=stream, ext=ext, request=request, on_close=on_close)
A:httpx._client.auth_flow->self._build_request_auth(request, auth).async_auth_flow(request)
A:httpx._client.next_request->self._build_request_auth(request, auth).async_auth_flow(request).send(response)
A:httpx._client.response.history->list(history)
A:httpx._client.response.call_next->functools.partial(self._send_handling_redirects, request=request, timeout=timeout, allow_redirects=False, history=history)
A:httpx._client.transport->self._transport_for_url(request.url)
A:httpx._client.timer->Timer()
A:httpx._client.(status_code, headers, stream, ext)->self._transport_for_url(request.url).request(request.method.encode(), request.url.raw, headers=request.headers.raw, stream=request.stream, ext={'timeout': timeout.as_dict()})
A:httpx._client.response.elapsed->datetime.timedelta(seconds=await timer.async_elapsed())
A:httpx._client.self.response->self.client.send(request=self.request, auth=self.auth, allow_redirects=self.allow_redirects, timeout=self.timeout, stream=True)
httpx.AsyncClient(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.AsyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx.AsyncClient.__aenter__(self)->'AsyncClient'
httpx.AsyncClient.__aexit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx.AsyncClient.__del__(self)->None
httpx.AsyncClient._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->httpcore.AsyncHTTPTransport
httpx.AsyncClient._init_transport(self,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:httpcore.AsyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)->httpcore.AsyncHTTPTransport
httpx.AsyncClient._send_handling_auth(self,request:Request,auth:Auth,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx.AsyncClient._send_handling_redirects(self,request:Request,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx.AsyncClient._send_single_request(self,request:Request,timeout:Timeout)->Response
httpx.AsyncClient._transport_for_url(self,url:URL)->httpcore.AsyncHTTPTransport
httpx.AsyncClient.aclose(self)->None
httpx.AsyncClient.delete(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.get(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.head(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.options(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.patch(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.post(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.put(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.request(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.AsyncClient.send(self,request:Request,*,stream:bool=False,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.SyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx.Client.__del__(self)->None
httpx.Client.__enter__(self)->'Client'
httpx.Client.__exit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx.Client._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->httpcore.SyncHTTPTransport
httpx.Client._init_transport(self,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:httpcore.SyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)->httpcore.SyncHTTPTransport
httpx.Client._send_handling_auth(self,request:Request,auth:Auth,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx.Client._send_handling_redirects(self,request:Request,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx.Client._send_single_request(self,request:Request,timeout:Timeout)->Response
httpx.Client._transport_for_url(self,url:URL)->httpcore.SyncHTTPTransport
httpx.Client.close(self)->None
httpx.Client.delete(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.get(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.head(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.options(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.patch(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.post(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.put(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.request(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx.Client.send(self,request:Request,*,stream:bool=False,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.AsyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx._client.AsyncClient.__aenter__(self)->'AsyncClient'
httpx._client.AsyncClient.__aexit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx._client.AsyncClient.__del__(self)->None
httpx._client.AsyncClient.__init__(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.AsyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx._client.AsyncClient._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->httpcore.AsyncHTTPTransport
httpx._client.AsyncClient._init_transport(self,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:httpcore.AsyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)->httpcore.AsyncHTTPTransport
httpx._client.AsyncClient._send_handling_auth(self,request:Request,auth:Auth,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx._client.AsyncClient._send_handling_redirects(self,request:Request,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx._client.AsyncClient._send_single_request(self,request:Request,timeout:Timeout)->Response
httpx._client.AsyncClient._transport_for_url(self,url:URL)->httpcore.AsyncHTTPTransport
httpx._client.AsyncClient.aclose(self)->None
httpx._client.AsyncClient.delete(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.get(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.head(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.options(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.patch(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.post(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.put(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.request(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.AsyncClient.send(self,request:Request,*,stream:bool=False,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.BaseClient(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',trust_env:bool=True)
httpx._client.BaseClient.__init__(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',trust_env:bool=True)
httpx._client.BaseClient._build_auth(self,auth:AuthTypes)->typing.Optional[Auth]
httpx._client.BaseClient._build_redirect_request(self,request:Request,response:Response)->Request
httpx._client.BaseClient._build_request_auth(self,request:Request,auth:typing.Union[AuthTypes,UnsetType]=UNSET)->Auth
httpx._client.BaseClient._enforce_trailing_slash(self,url:URL)->URL
httpx._client.BaseClient._get_proxy_map(self,proxies:typing.Optional[ProxiesTypes],allow_env_proxies:bool)->typing.Dict[str, typing.Optional[Proxy]]
httpx._client.BaseClient._merge_cookies(self,cookies:CookieTypes=None)->typing.Optional[CookieTypes]
httpx._client.BaseClient._merge_headers(self,headers:HeaderTypes=None)->typing.Optional[HeaderTypes]
httpx._client.BaseClient._merge_queryparams(self,params:QueryParamTypes=None)->typing.Optional[QueryParamTypes]
httpx._client.BaseClient._merge_url(self,url:URLTypes)->URL
httpx._client.BaseClient._redirect_headers(self,request:Request,url:URL,method:str)->Headers
httpx._client.BaseClient._redirect_method(self,request:Request,response:Response)->str
httpx._client.BaseClient._redirect_stream(self,request:Request,method:str)->typing.Optional[ByteStream]
httpx._client.BaseClient._redirect_url(self,request:Request,response:Response)->URL
httpx._client.BaseClient.auth(self)->typing.Optional[Auth]
httpx._client.BaseClient.auth(self,auth:AuthTypes)->None
httpx._client.BaseClient.base_url(self)->URL
httpx._client.BaseClient.base_url(self,url:URLTypes)->None
httpx._client.BaseClient.build_request(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None)->Request
httpx._client.BaseClient.cookies(self)->Cookies
httpx._client.BaseClient.cookies(self,cookies:CookieTypes)->None
httpx._client.BaseClient.event_hooks(self)->typing.Dict[str, typing.List[typing.Callable]]
httpx._client.BaseClient.event_hooks(self,event_hooks:typing.Dict[str,typing.List[typing.Callable]])->None
httpx._client.BaseClient.headers(self)->Headers
httpx._client.BaseClient.headers(self,headers:HeaderTypes)->None
httpx._client.BaseClient.is_closed(self)->bool
httpx._client.BaseClient.params(self)->QueryParams
httpx._client.BaseClient.params(self,params:QueryParamTypes)->None
httpx._client.BaseClient.stream(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->'StreamContextManager'
httpx._client.BaseClient.timeout(self)->Timeout
httpx._client.BaseClient.timeout(self,timeout:TimeoutTypes)->None
httpx._client.BaseClient.trust_env(self)->bool
httpx._client.Client(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.SyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx._client.Client.__del__(self)->None
httpx._client.Client.__enter__(self)->'Client'
httpx._client.Client.__exit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx._client.Client.__init__(self,*,auth:AuthTypes=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,limits:Limits=DEFAULT_LIMITS,pool_limits:Limits=None,max_redirects:int=DEFAULT_MAX_REDIRECTS,event_hooks:typing.Dict[str,typing.List[typing.Callable]]=None,base_url:URLTypes='',transport:httpcore.SyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)
httpx._client.Client._init_proxy_transport(self,proxy:Proxy,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,trust_env:bool=True)->httpcore.SyncHTTPTransport
httpx._client.Client._init_transport(self,verify:VerifyTypes=True,cert:CertTypes=None,http2:bool=False,limits:Limits=DEFAULT_LIMITS,transport:httpcore.SyncHTTPTransport=None,app:typing.Callable=None,trust_env:bool=True)->httpcore.SyncHTTPTransport
httpx._client.Client._send_handling_auth(self,request:Request,auth:Auth,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx._client.Client._send_handling_redirects(self,request:Request,timeout:Timeout,allow_redirects:bool,history:typing.List[Response])->Response
httpx._client.Client._send_single_request(self,request:Request,timeout:Timeout)->Response
httpx._client.Client._transport_for_url(self,url:URL)->httpcore.SyncHTTPTransport
httpx._client.Client.close(self)->None
httpx._client.Client.delete(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.get(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.head(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.options(self,url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.patch(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.post(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.put(self,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.request(self,method:str,url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.Client.send(self,request:Request,*,stream:bool=False,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET)->Response
httpx._client.StreamContextManager(self,client:BaseClient,request:Request,*,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET,close_client:bool=False)
httpx._client.StreamContextManager.__aenter__(self)->'Response'
httpx._client.StreamContextManager.__aexit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx._client.StreamContextManager.__enter__(self)->'Response'
httpx._client.StreamContextManager.__exit__(self,exc_type:typing.Type[BaseException]=None,exc_value:BaseException=None,traceback:TracebackType=None)->None
httpx._client.StreamContextManager.__init__(self,client:BaseClient,request:Request,*,auth:typing.Union[AuthTypes,UnsetType]=UNSET,allow_redirects:bool=True,timeout:typing.Union[TimeoutTypes,UnsetType]=UNSET,close_client:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_api.py----------------------------------------
A:httpx._api.client->Client(proxies=proxies, cert=cert, verify=verify, trust_env=trust_env)
A:httpx._api.request->Request(method=method, url=url, params=params, content=content, data=data, files=files, json=json, headers=headers, cookies=cookies)
httpx._api.delete(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.get(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.head(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.options(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.patch(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.post(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.put(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx._api.request(method:str,url:URLTypes,*,params:QueryParamTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,allow_redirects:bool=True,verify:VerifyTypes=True,cert:CertTypes=None,trust_env:bool=True)->Response
httpx._api.stream(method:str,url:URLTypes,*,params:QueryParamTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,allow_redirects:bool=True,verify:VerifyTypes=True,cert:CertTypes=None,trust_env:bool=True)->StreamContextManager
httpx.delete(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.get(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.head(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.options(url:URLTypes,*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.patch(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.post(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.put(url:URLTypes,*,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,allow_redirects:bool=True,cert:CertTypes=None,verify:VerifyTypes=True,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,trust_env:bool=True)->Response
httpx.request(method:str,url:URLTypes,*,params:QueryParamTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,allow_redirects:bool=True,verify:VerifyTypes=True,cert:CertTypes=None,trust_env:bool=True)->Response
httpx.stream(method:str,url:URLTypes,*,params:QueryParamTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,headers:HeaderTypes=None,cookies:CookieTypes=None,auth:AuthTypes=None,proxies:ProxiesTypes=None,timeout:TimeoutTypes=DEFAULT_TIMEOUT_CONFIG,allow_redirects:bool=True,verify:VerifyTypes=True,cert:CertTypes=None,trust_env:bool=True)->StreamContextManager


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_types.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_models.py----------------------------------------
A:httpx._models.scheme->raw_scheme.decode('ascii')
A:httpx._models.host->raw_host.decode('ascii')
A:httpx._models.path->raw_path.decode('ascii')
A:httpx._models.self._uri_reference->self._uri_reference.copy_with(query=query_string)
A:httpx._models.url_params->QueryParams(self._uri_reference.query)
A:httpx._models.query_string->str(self)
A:httpx._models.username->quote(self.username)
A:httpx._models.password->quote(kwargs.pop('password', self.password) or '')
A:httpx._models.kwargs['userinfo']->(kwargs.pop('userinfo', self.userinfo) or b'').decode('ascii').encode('ascii')
A:httpx._models.port->kwargs.pop('port', self.port)
A:httpx._models.userinfo->(kwargs.pop('userinfo', self.userinfo) or b'').decode('ascii')
A:httpx._models.(path, has_query, query)->raw_path.decode('ascii').partition('?')
A:httpx._models.kwargs['path']->quote(kwargs['path'])
A:httpx._models.kwargs['query']->kwargs['query'].decode('ascii').decode('ascii')
A:httpx._models.base_uri->self._uri_reference.copy_with(fragment=None)
A:httpx._models.relative_url->URL(url)
A:httpx._models.url_str->rfc3986.urlparse(url_str).copy_with(userinfo=f'{username}:[secure]').unsplit()
A:httpx._models.items->flatten_queryparams(value)
A:httpx._models.params->QueryParams(params)
A:httpx._models.(item, *extras)->QueryParams(params).get_list(param)
A:httpx._models.self._list->list(headers.raw)
A:httpx._models.get_header_key->key.lower().encode(self.encoding)
A:httpx._models.headers->Headers(headers)
A:httpx._models.normalized_key->key.lower().encode(self.encoding)
A:httpx._models.set_key->key.lower().encode(self._encoding or 'utf-8')
A:httpx._models.set_value->self.get(name).encode(self._encoding or 'utf-8')
A:httpx._models.del_key->key.lower().encode(self.encoding)
A:httpx._models.header_key->key.lower().encode(self.encoding)
A:httpx._models.as_list->list(obfuscate_sensitive_headers(self.multi_items()))
A:httpx._models.as_dict->dict(as_list)
A:httpx._models.self.method->method.upper()
A:httpx._models.self.url->URL(url, params=params)
A:httpx._models.self.headers->Headers(headers)
A:httpx._models.(headers, stream)->encode_response(content, text, html, json)
A:httpx._models.default_port->{'http': 80, 'https': 443}.get(self.url.scheme)
A:httpx._models.host_header->self.url.netloc.encode('ascii')
A:httpx._models.self._content->b''.join([part async for part in self.aiter_bytes()])
A:httpx._models.self.stream->PlainByteStream(self._content)
A:httpx._models.url->str(self.url)
A:httpx._models.decoder->LineDecoder()
A:httpx._models.self._text->''.join([decoder.decode(self.content), decoder.flush()])
A:httpx._models.content_type->self.headers.get('Content-Type')
A:httpx._models.(_, params)->cgi.parse_header(content_type)
A:httpx._models.values->self.headers.get_list('content-encoding', split_commas=True)
A:httpx._models.value->self.get(name)
A:httpx._models.self._decoder->IdentityDecoder()
A:httpx._models.message->message.format(self, error_type='Server Error').format(self, error_type='Server Error')
A:httpx._models.encoding->guess_json_utf(self.content)
A:httpx._models.self._cookies->Cookies()
A:httpx._models.header->self.headers.get('link')
A:httpx._models.links->parse_header_links(header)
A:httpx._models.self.jar->CookieJar()
A:httpx._models.urlib_response->self._CookieCompatResponse(response)
A:httpx._models.urllib_request->self._CookieCompatRequest(request)
A:httpx._models.cookie->Cookie(**kwargs)
A:httpx._models.cookies->Cookies(cookies)
A:httpx._models.info->email.message.Message()
httpx.Cookies(self,cookies:CookieTypes=None)
httpx.Cookies._CookieCompatRequest(self,request:Request)
httpx.Cookies._CookieCompatRequest.add_unredirected_header(self,key:str,value:str)->None
httpx.Cookies._CookieCompatResponse(self,response:Response)
httpx.Cookies._CookieCompatResponse.info(self)->email.message.Message
httpx.Cookies.__bool__(self)->bool
httpx.Cookies.__delitem__(self,name:str)->None
httpx.Cookies.__getitem__(self,name:str)->str
httpx.Cookies.__iter__(self)->typing.Iterator[str]
httpx.Cookies.__len__(self)->int
httpx.Cookies.__setitem__(self,name:str,value:str)->None
httpx.Cookies.clear(self,domain:str=None,path:str=None)->None
httpx.Cookies.delete(self,name:str,domain:str=None,path:str=None)->None
httpx.Cookies.extract_cookies(self,response:Response)->None
httpx.Cookies.get(self,name:str,default:str=None,domain:str=None,path:str=None)->typing.Optional[str]
httpx.Cookies.set(self,name:str,value:str,domain:str='',path:str='/')->None
httpx.Cookies.set_cookie_header(self,request:Request)->None
httpx.Cookies.update(self,cookies:CookieTypes=None)->None
httpx.Headers(self,headers:HeaderTypes=None,encoding:str=None)
httpx.Headers.__contains__(self,key:typing.Any)->bool
httpx.Headers.__delitem__(self,key:str)->None
httpx.Headers.__eq__(self,other:typing.Any)->bool
httpx.Headers.__getitem__(self,key:str)->str
httpx.Headers.__iter__(self)->typing.Iterator[typing.Any]
httpx.Headers.__len__(self)->int
httpx.Headers.__repr__(self)->str
httpx.Headers.__setitem__(self,key:str,value:str)->None
httpx.Headers.copy(self)->'Headers'
httpx.Headers.encoding(self)->str
httpx.Headers.encoding(self,value:str)->None
httpx.Headers.get(self,key:str,default:typing.Any=None)->typing.Any
httpx.Headers.get_list(self,key:str,split_commas:bool=False)->typing.List[str]
httpx.Headers.items(self)->typing.ItemsView[str, str]
httpx.Headers.keys(self)->typing.KeysView[str]
httpx.Headers.multi_items(self)->typing.List[typing.Tuple[str, str]]
httpx.Headers.raw(self)->typing.List[typing.Tuple[bytes, bytes]]
httpx.Headers.update(self,headers:HeaderTypes=None)->None
httpx.Headers.values(self)->typing.ValuesView[str]
httpx.QueryParams(self,*args:QueryParamTypes,**kwargs:typing.Any)
httpx.QueryParams.__contains__(self,key:typing.Any)->bool
httpx.QueryParams.__eq__(self,other:typing.Any)->bool
httpx.QueryParams.__getitem__(self,key:typing.Any)->str
httpx.QueryParams.__iter__(self)->typing.Iterator[typing.Any]
httpx.QueryParams.__len__(self)->int
httpx.QueryParams.__repr__(self)->str
httpx.QueryParams.__setitem__(self,key:str,value:str)->None
httpx.QueryParams.__str__(self)->str
httpx.QueryParams.get(self,key:typing.Any,default:typing.Any=None)->typing.Any
httpx.QueryParams.get_list(self,key:typing.Any)->typing.List[str]
httpx.QueryParams.items(self)->typing.ItemsView
httpx.QueryParams.keys(self)->typing.KeysView
httpx.QueryParams.multi_items(self)->typing.List[typing.Tuple[str, str]]
httpx.QueryParams.update(self,params:QueryParamTypes=None)->None
httpx.QueryParams.values(self)->typing.ValuesView
httpx.Request(self,method:typing.Union[str,bytes],url:typing.Union['URL',str,RawURL],*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,stream:ByteStream=None)
httpx.Request.__repr__(self)->str
httpx.Request._prepare(self,default_headers:typing.Dict[str,str])->None
httpx.Request.aread(self)->bytes
httpx.Request.content(self)->bytes
httpx.Request.read(self)->bytes
httpx.Response(self,status_code:int,*,headers:HeaderTypes=None,content:ResponseContent=None,text:str=None,html:str=None,json:typing.Any=None,stream:ByteStream=None,request:Request=None,ext:dict=None,history:typing.List['Response']=None,on_close:typing.Callable=None)
httpx.Response.__repr__(self)->str
httpx.Response._get_content_decoder(self)->ContentDecoder
httpx.Response._prepare(self,default_headers:typing.Dict[str,str])->None
httpx.Response._wrap_decoder_errors(self)->typing.Iterator[None]
httpx.Response.aclose(self)->None
httpx.Response.aiter_bytes(self)->typing.AsyncIterator[bytes]
httpx.Response.aiter_lines(self)->typing.AsyncIterator[str]
httpx.Response.aiter_raw(self)->typing.AsyncIterator[bytes]
httpx.Response.aiter_text(self)->typing.AsyncIterator[str]
httpx.Response.anext(self)->'Response'
httpx.Response.aread(self)->bytes
httpx.Response.charset_encoding(self)->typing.Optional[str]
httpx.Response.close(self)->None
httpx.Response.content(self)->bytes
httpx.Response.cookies(self)->'Cookies'
httpx.Response.elapsed(self)->datetime.timedelta
httpx.Response.elapsed(self,elapsed:datetime.timedelta)->None
httpx.Response.encoding(self)->typing.Optional[str]
httpx.Response.encoding(self,value:str)->None
httpx.Response.http_version(self)->str
httpx.Response.is_error(self)->bool
httpx.Response.is_redirect(self)->bool
httpx.Response.iter_bytes(self)->typing.Iterator[bytes]
httpx.Response.iter_lines(self)->typing.Iterator[str]
httpx.Response.iter_raw(self)->typing.Iterator[bytes]
httpx.Response.iter_text(self)->typing.Iterator[str]
httpx.Response.json(self,**kwargs:typing.Any)->typing.Any
httpx.Response.links(self)->typing.Dict[typing.Optional[str], typing.Dict[str, str]]
httpx.Response.next(self)->'Response'
httpx.Response.num_bytes_downloaded(self)->int
httpx.Response.raise_for_status(self)->None
httpx.Response.read(self)->bytes
httpx.Response.reason_phrase(self)->str
httpx.Response.request(self)->Request
httpx.Response.request(self,value:Request)->None
httpx.Response.text(self)->str
httpx.Response.url(self)->typing.Optional[URL]
httpx.URL(self,url:typing.Union['URL',str,RawURL]='',params:QueryParamTypes=None)
httpx.URL.__eq__(self,other:typing.Any)->bool
httpx.URL.__hash__(self)->int
httpx.URL.__repr__(self)->str
httpx.URL.__str__(self)->str
httpx.URL.copy_with(self,**kwargs:typing.Any)->'URL'
httpx.URL.fragment(self)->str
httpx.URL.host(self)->str
httpx.URL.is_absolute_url(self)->bool
httpx.URL.is_relative_url(self)->bool
httpx.URL.join(self,url:URLTypes)->'URL'
httpx.URL.netloc(self)->str
httpx.URL.password(self)->str
httpx.URL.path(self)->str
httpx.URL.port(self)->typing.Optional[int]
httpx.URL.query(self)->bytes
httpx.URL.raw(self)->RawURL
httpx.URL.raw_path(self)->bytes
httpx.URL.scheme(self)->str
httpx.URL.userinfo(self)->bytes
httpx.URL.username(self)->str
httpx._models.Cookies(self,cookies:CookieTypes=None)
httpx._models.Cookies._CookieCompatRequest(self,request:Request)
httpx._models.Cookies._CookieCompatRequest.__init__(self,request:Request)
httpx._models.Cookies._CookieCompatRequest.add_unredirected_header(self,key:str,value:str)->None
httpx._models.Cookies._CookieCompatResponse(self,response:Response)
httpx._models.Cookies._CookieCompatResponse.__init__(self,response:Response)
httpx._models.Cookies._CookieCompatResponse.info(self)->email.message.Message
httpx._models.Cookies.__bool__(self)->bool
httpx._models.Cookies.__delitem__(self,name:str)->None
httpx._models.Cookies.__getitem__(self,name:str)->str
httpx._models.Cookies.__init__(self,cookies:CookieTypes=None)
httpx._models.Cookies.__iter__(self)->typing.Iterator[str]
httpx._models.Cookies.__len__(self)->int
httpx._models.Cookies.__setitem__(self,name:str,value:str)->None
httpx._models.Cookies.clear(self,domain:str=None,path:str=None)->None
httpx._models.Cookies.delete(self,name:str,domain:str=None,path:str=None)->None
httpx._models.Cookies.extract_cookies(self,response:Response)->None
httpx._models.Cookies.get(self,name:str,default:str=None,domain:str=None,path:str=None)->typing.Optional[str]
httpx._models.Cookies.set(self,name:str,value:str,domain:str='',path:str='/')->None
httpx._models.Cookies.set_cookie_header(self,request:Request)->None
httpx._models.Cookies.update(self,cookies:CookieTypes=None)->None
httpx._models.Headers(self,headers:HeaderTypes=None,encoding:str=None)
httpx._models.Headers.__contains__(self,key:typing.Any)->bool
httpx._models.Headers.__delitem__(self,key:str)->None
httpx._models.Headers.__eq__(self,other:typing.Any)->bool
httpx._models.Headers.__getitem__(self,key:str)->str
httpx._models.Headers.__init__(self,headers:HeaderTypes=None,encoding:str=None)
httpx._models.Headers.__iter__(self)->typing.Iterator[typing.Any]
httpx._models.Headers.__len__(self)->int
httpx._models.Headers.__repr__(self)->str
httpx._models.Headers.__setitem__(self,key:str,value:str)->None
httpx._models.Headers.copy(self)->'Headers'
httpx._models.Headers.encoding(self)->str
httpx._models.Headers.encoding(self,value:str)->None
httpx._models.Headers.get(self,key:str,default:typing.Any=None)->typing.Any
httpx._models.Headers.get_list(self,key:str,split_commas:bool=False)->typing.List[str]
httpx._models.Headers.items(self)->typing.ItemsView[str, str]
httpx._models.Headers.keys(self)->typing.KeysView[str]
httpx._models.Headers.multi_items(self)->typing.List[typing.Tuple[str, str]]
httpx._models.Headers.raw(self)->typing.List[typing.Tuple[bytes, bytes]]
httpx._models.Headers.update(self,headers:HeaderTypes=None)->None
httpx._models.Headers.values(self)->typing.ValuesView[str]
httpx._models.QueryParams(self,*args:QueryParamTypes,**kwargs:typing.Any)
httpx._models.QueryParams.__contains__(self,key:typing.Any)->bool
httpx._models.QueryParams.__eq__(self,other:typing.Any)->bool
httpx._models.QueryParams.__getitem__(self,key:typing.Any)->str
httpx._models.QueryParams.__init__(self,*args:QueryParamTypes,**kwargs:typing.Any)
httpx._models.QueryParams.__iter__(self)->typing.Iterator[typing.Any]
httpx._models.QueryParams.__len__(self)->int
httpx._models.QueryParams.__repr__(self)->str
httpx._models.QueryParams.__setitem__(self,key:str,value:str)->None
httpx._models.QueryParams.__str__(self)->str
httpx._models.QueryParams.get(self,key:typing.Any,default:typing.Any=None)->typing.Any
httpx._models.QueryParams.get_list(self,key:typing.Any)->typing.List[str]
httpx._models.QueryParams.items(self)->typing.ItemsView
httpx._models.QueryParams.keys(self)->typing.KeysView
httpx._models.QueryParams.multi_items(self)->typing.List[typing.Tuple[str, str]]
httpx._models.QueryParams.update(self,params:QueryParamTypes=None)->None
httpx._models.QueryParams.values(self)->typing.ValuesView
httpx._models.Request(self,method:typing.Union[str,bytes],url:typing.Union['URL',str,RawURL],*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,stream:ByteStream=None)
httpx._models.Request.__init__(self,method:typing.Union[str,bytes],url:typing.Union['URL',str,RawURL],*,params:QueryParamTypes=None,headers:HeaderTypes=None,cookies:CookieTypes=None,content:RequestContent=None,data:RequestData=None,files:RequestFiles=None,json:typing.Any=None,stream:ByteStream=None)
httpx._models.Request.__repr__(self)->str
httpx._models.Request._prepare(self,default_headers:typing.Dict[str,str])->None
httpx._models.Request.aread(self)->bytes
httpx._models.Request.content(self)->bytes
httpx._models.Request.read(self)->bytes
httpx._models.Response(self,status_code:int,*,headers:HeaderTypes=None,content:ResponseContent=None,text:str=None,html:str=None,json:typing.Any=None,stream:ByteStream=None,request:Request=None,ext:dict=None,history:typing.List['Response']=None,on_close:typing.Callable=None)
httpx._models.Response.__init__(self,status_code:int,*,headers:HeaderTypes=None,content:ResponseContent=None,text:str=None,html:str=None,json:typing.Any=None,stream:ByteStream=None,request:Request=None,ext:dict=None,history:typing.List['Response']=None,on_close:typing.Callable=None)
httpx._models.Response.__repr__(self)->str
httpx._models.Response._get_content_decoder(self)->ContentDecoder
httpx._models.Response._prepare(self,default_headers:typing.Dict[str,str])->None
httpx._models.Response._wrap_decoder_errors(self)->typing.Iterator[None]
httpx._models.Response.aclose(self)->None
httpx._models.Response.aiter_bytes(self)->typing.AsyncIterator[bytes]
httpx._models.Response.aiter_lines(self)->typing.AsyncIterator[str]
httpx._models.Response.aiter_raw(self)->typing.AsyncIterator[bytes]
httpx._models.Response.aiter_text(self)->typing.AsyncIterator[str]
httpx._models.Response.anext(self)->'Response'
httpx._models.Response.aread(self)->bytes
httpx._models.Response.charset_encoding(self)->typing.Optional[str]
httpx._models.Response.close(self)->None
httpx._models.Response.content(self)->bytes
httpx._models.Response.cookies(self)->'Cookies'
httpx._models.Response.elapsed(self)->datetime.timedelta
httpx._models.Response.elapsed(self,elapsed:datetime.timedelta)->None
httpx._models.Response.encoding(self)->typing.Optional[str]
httpx._models.Response.encoding(self,value:str)->None
httpx._models.Response.http_version(self)->str
httpx._models.Response.is_error(self)->bool
httpx._models.Response.is_redirect(self)->bool
httpx._models.Response.iter_bytes(self)->typing.Iterator[bytes]
httpx._models.Response.iter_lines(self)->typing.Iterator[str]
httpx._models.Response.iter_raw(self)->typing.Iterator[bytes]
httpx._models.Response.iter_text(self)->typing.Iterator[str]
httpx._models.Response.json(self,**kwargs:typing.Any)->typing.Any
httpx._models.Response.links(self)->typing.Dict[typing.Optional[str], typing.Dict[str, str]]
httpx._models.Response.next(self)->'Response'
httpx._models.Response.num_bytes_downloaded(self)->int
httpx._models.Response.raise_for_status(self)->None
httpx._models.Response.read(self)->bytes
httpx._models.Response.reason_phrase(self)->str
httpx._models.Response.request(self)->Request
httpx._models.Response.request(self,value:Request)->None
httpx._models.Response.text(self)->str
httpx._models.Response.url(self)->typing.Optional[URL]
httpx._models.URL(self,url:typing.Union['URL',str,RawURL]='',params:QueryParamTypes=None)
httpx._models.URL.__eq__(self,other:typing.Any)->bool
httpx._models.URL.__hash__(self)->int
httpx._models.URL.__init__(self,url:typing.Union['URL',str,RawURL]='',params:QueryParamTypes=None)
httpx._models.URL.__repr__(self)->str
httpx._models.URL.__str__(self)->str
httpx._models.URL.copy_with(self,**kwargs:typing.Any)->'URL'
httpx._models.URL.fragment(self)->str
httpx._models.URL.host(self)->str
httpx._models.URL.is_absolute_url(self)->bool
httpx._models.URL.is_relative_url(self)->bool
httpx._models.URL.join(self,url:URLTypes)->'URL'
httpx._models.URL.netloc(self)->str
httpx._models.URL.password(self)->str
httpx._models.URL.path(self)->str
httpx._models.URL.port(self)->typing.Optional[int]
httpx._models.URL.query(self)->bytes
httpx._models.URL.raw(self)->RawURL
httpx._models.URL.raw_path(self)->bytes
httpx._models.URL.scheme(self)->str
httpx._models.URL.userinfo(self)->bytes
httpx._models.URL.username(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/__version__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_auth.py----------------------------------------
A:httpx._auth.flow->self.auth_flow(request)
A:httpx._auth.request->self.auth_flow(request).send(response)
A:httpx._auth.self._auth_header->self._build_auth_header(username, password)
A:httpx._auth.userpass->b':'.join((to_bytes(username), to_bytes(password)))
A:httpx._auth.token->b64encode(userpass).decode()
A:httpx._auth.self._username->to_bytes(username)
A:httpx._auth.self._password->to_bytes(password)
A:httpx._auth.challenge->self._parse_challenge(request, response, auth_header)
A:httpx._auth.request.headers['Authorization']->self._build_auth_header(request, challenge)
A:httpx._auth.(scheme, _, fields)->auth_header.partition(' ')
A:httpx._auth.(key, value)->field.strip().split('=', 1)
A:httpx._auth.header_dict[key]->unquote(value)
A:httpx._auth.realm->header_dict['realm'].encode()
A:httpx._auth.nonce->header_dict['nonce'].encode()
A:httpx._auth.algorithm->header_dict.get('algorithm', 'MD5')
A:httpx._auth.A1->b':'.join((self._username, challenge.realm, self._password))
A:httpx._auth.A2->b':'.join((request.method.encode(), path))
A:httpx._auth.HA2->digest(A2)
A:httpx._auth.cnonce->self._get_client_nonce(nonce_count, challenge.nonce)
A:httpx._auth.HA1->digest(b':'.join((HA1, challenge.nonce, cnonce)))
A:httpx._auth.qop->self._resolve_qop(challenge.qop, request=request)
A:httpx._auth.key_digest->b':'.join(digest_data)
A:httpx._auth.s->str(nonce_count).encode()
A:httpx._auth.qops->re.split(b', ?', qop)
httpx.Auth
httpx.Auth.async_auth_flow(self,request:Request)->typing.AsyncGenerator[Request, Response]
httpx.Auth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.Auth.sync_auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.BasicAuth(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx.BasicAuth._build_auth_header(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])->str
httpx.BasicAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx.DigestAuth(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx.DigestAuth._build_auth_header(self,request:Request,challenge:'_DigestAuthChallenge')->str
httpx.DigestAuth._get_client_nonce(self,nonce_count:int,nonce:bytes)->bytes
httpx.DigestAuth._get_header_value(self,header_fields:typing.Dict[str,bytes])->str
httpx.DigestAuth._parse_challenge(self,request:Request,response:Response,auth_header:str)->'_DigestAuthChallenge'
httpx.DigestAuth._resolve_qop(self,qop:typing.Optional[bytes],request:Request)->typing.Optional[bytes]
httpx.DigestAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.Auth
httpx._auth.Auth.async_auth_flow(self,request:Request)->typing.AsyncGenerator[Request, Response]
httpx._auth.Auth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.Auth.sync_auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.BasicAuth(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx._auth.BasicAuth.__init__(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx._auth.BasicAuth._build_auth_header(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])->str
httpx._auth.BasicAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.DigestAuth(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx._auth.DigestAuth.__init__(self,username:typing.Union[str,bytes],password:typing.Union[str,bytes])
httpx._auth.DigestAuth._build_auth_header(self,request:Request,challenge:'_DigestAuthChallenge')->str
httpx._auth.DigestAuth._get_client_nonce(self,nonce_count:int,nonce:bytes)->bytes
httpx._auth.DigestAuth._get_header_value(self,header_fields:typing.Dict[str,bytes])->str
httpx._auth.DigestAuth._parse_challenge(self,request:Request,response:Response,auth_header:str)->'_DigestAuthChallenge'
httpx._auth.DigestAuth._resolve_qop(self,qop:typing.Optional[bytes],request:Request)->typing.Optional[bytes]
httpx._auth.DigestAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth.FunctionAuth(self,func:typing.Callable[[Request],Request])
httpx._auth.FunctionAuth.__init__(self,func:typing.Callable[[Request],Request])
httpx._auth.FunctionAuth.auth_flow(self,request:Request)->typing.Generator[Request, Response, None]
httpx._auth._DigestAuthChallenge(self,realm:bytes,nonce:bytes,algorithm:str,opaque:typing.Optional[bytes]=None,qop:typing.Optional[bytes]=None)
httpx._auth._DigestAuthChallenge.__init__(self,realm:bytes,nonce:bytes,algorithm:str,opaque:typing.Optional[bytes]=None,qop:typing.Optional[bytes]=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_transports/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_transports/asgi.py----------------------------------------
A:httpx._transports.asgi.(path, _, query)->full_path.partition(b'?')
A:httpx._transports.asgi.request_body_chunks->httpcore.PlainByteStream(content=b''.join(body_parts)).__aiter__()
A:httpx._transports.asgi.response_complete->create_event()
A:httpx._transports.asgi.response_headers->message.get('headers', [])
A:httpx._transports.asgi.body->message.get('body', b'')
A:httpx._transports.asgi.more_body->message.get('more_body', False)
A:httpx._transports.asgi.stream->httpcore.PlainByteStream(content=b''.join(body_parts))
httpx.ASGITransport(self,app:Callable,raise_app_exceptions:bool=True,root_path:str='',client:Tuple[str,int]=('127.0.0.1',123))
httpx.ASGITransport.arequest(self,method:bytes,url:Tuple[bytes,bytes,Optional[int],bytes],headers:List[Tuple[bytes,bytes]]=None,stream:httpcore.AsyncByteStream=None,ext:dict=None)->Tuple[int, List[Tuple[bytes, bytes]], httpcore.AsyncByteStream, dict]
httpx._transports.asgi.ASGITransport(self,app:Callable,raise_app_exceptions:bool=True,root_path:str='',client:Tuple[str,int]=('127.0.0.1',123))
httpx._transports.asgi.ASGITransport.__init__(self,app:Callable,raise_app_exceptions:bool=True,root_path:str='',client:Tuple[str,int]=('127.0.0.1',123))
httpx._transports.asgi.ASGITransport.arequest(self,method:bytes,url:Tuple[bytes,bytes,Optional[int],bytes],headers:List[Tuple[bytes,bytes]]=None,stream:httpcore.AsyncByteStream=None,ext:dict=None)->Tuple[int, List[Tuple[bytes, bytes]], httpcore.AsyncByteStream, dict]
httpx._transports.asgi.create_event()->'Event'


----------------------------------------/dataset/nuaa/anaconda3/envs/httpx0.15.2/lib/python3.9/site-packages/httpx/_transports/wsgi.py----------------------------------------
A:httpx._transports.wsgi.body->iter(body)
A:httpx._transports.wsgi.(path, _, query)->full_path.partition(b'?')
A:httpx._transports.wsgi.key->header_key.decode('ascii').upper().replace('-', '_')
A:httpx._transports.wsgi.environ[key]->header_value.decode('ascii')
A:httpx._transports.wsgi.result->_skip_leading_empty_chunks(result)
A:httpx._transports.wsgi.status_code->int(seen_status.split()[0])
A:httpx._transports.wsgi.stream->httpcore.IteratorByteStream(iterator=result)
httpx.WSGITransport(self,app:typing.Callable,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1')
httpx.WSGITransport.request(self,method:bytes,url:typing.Tuple[bytes,bytes,typing.Optional[int],bytes],headers:typing.List[typing.Tuple[bytes,bytes]]=None,stream:httpcore.SyncByteStream=None,ext:dict=None)->typing.Tuple[int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict]
httpx._transports.wsgi.WSGITransport(self,app:typing.Callable,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1')
httpx._transports.wsgi.WSGITransport.__init__(self,app:typing.Callable,raise_app_exceptions:bool=True,script_name:str='',remote_addr:str='127.0.0.1')
httpx._transports.wsgi.WSGITransport.request(self,method:bytes,url:typing.Tuple[bytes,bytes,typing.Optional[int],bytes],headers:typing.List[typing.Tuple[bytes,bytes]]=None,stream:httpcore.SyncByteStream=None,ext:dict=None)->typing.Tuple[int, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream, dict]
httpx._transports.wsgi._skip_leading_empty_chunks(body:typing.Iterable)->typing.Iterable

