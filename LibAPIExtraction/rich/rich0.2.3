
----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/__init__.py----------------------------------------
A:rich.__init__._console->Console()
rich.__init__.print(*objects:Any,sep='',end='\n',file:IO[str]=None,flush:bool=False,log_locals:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/text.py----------------------------------------
A:rich.text.span1->Span(start, min(end, offset), style)
A:rich.text.span2->Span(span1.end, end, style)
A:rich.text.result->self.copy()
A:rich.text.text->Text('[12:42:33] ')
A:rich.text.self._length->len(new_text)
A:rich.text.copy_self->Text(self.text, style=self.style, justify=self.justify, end=self.end)
A:rich.text.length->len(self)
A:rich.text.self.text->self.text.rstrip()
A:rich.text.lines->Text('[12:42:33] ').wrap(10)
A:rich.text.all_lines->Text('\n').join(lines)
A:rich.text.max_text_width->max((len(line) for line in text.splitlines()))
A:rich.text.min_text_width->max((len(word) for word in text.split()))
A:rich.text.null_style->Style()
A:rich.text.enumerated_spans->list(enumerate(line._spans, 1))
A:rich.text.style_map[0]->get_style(self.style)
A:rich.text.style_ids->tuple(sorted(stack))
A:rich.text.cached_style->style_cache.get(style_ids)
A:rich.text.current_style->combine((style_map[_style_id] for _style_id in style_ids))
A:rich.text.new_text->Text()
A:rich.text.offset->len(self)
A:rich.text.text_length->len(text)
A:rich.text.separator_length->len(separator)
A:rich.text.line->self.copy()
A:rich.text.line_ranges->list(zip(divide_offsets, divide_offsets[1:]))
A:rich.text.new_lines->self.copy().divide(offsets)
A:rich.text.(span, new_span)->span.split(line_end)
A:rich.text.offsets->divide_line(str(line), width)
A:rich.text.console->Console()
rich.text.Span(NamedTuple)
rich.text.Span.__bool__(self)->bool
rich.text.Span.__repr__(self)->str
rich.text.Span.move(self,offset:int)->'Span'
rich.text.Span.right_crop(self,offset:int)->'Span'
rich.text.Span.split(self,offset:int)->Tuple['Span', Optional['Span']]
rich.text.Text(self,text:str='',style:Union[str,Style]='',justify:'JustifyValues'=None,end:str='\n')
rich.text.Text.__add__(self,other:Any)->'Text'
rich.text.Text.__bool__(self)->bool
rich.text.Text.__console__(self,console:'Console',options:'ConsoleOptions')->Iterable[Segment]
rich.text.Text.__console_width__(self,max_width:int)->RenderWidth
rich.text.Text.__eq__(self,other:object)->bool
rich.text.Text.__init__(self,text:str='',style:Union[str,Style]='',justify:'JustifyValues'=None,end:str='\n')
rich.text.Text.__len__(self)->int
rich.text.Text.__repr__(self)->str
rich.text.Text.__str__(self)->str
rich.text.Text._render_line(self,line:'Text',console:'Console',options:'ConsoleOptions')->Iterable['Segment']
rich.text.Text._trim_spans(self)->None
rich.text.Text.append(self,text:Union['Text',str],style:Union[str,'Style']=None)->None
rich.text.Text.copy(self)->'Text'
rich.text.Text.divide(self,offsets:Iterable[int])->Lines
rich.text.Text.fit(self,width:int)->Lines
rich.text.Text.from_markup(cls,text:str,style:Union[str,Style]='')->'Text'
rich.text.Text.join(self,lines:Iterable['Text'])->'Text'
rich.text.Text.pad_left(self,count:int,character:str='')->None
rich.text.Text.pad_right(self,count:int,character:str='')->None
rich.text.Text.right_crop(self,amount:int=1)->None
rich.text.Text.rstrip(self)->None
rich.text.Text.set_length(self,new_length:int)->None
rich.text.Text.split(self,separator='\n',include_separator:bool=False)->Lines
rich.text.Text.stylize(self,start:int,end:int,style:Union[str,Style])->None
rich.text.Text.text(self)->str
rich.text.Text.text(self,new_text:str)->'Text'
rich.text.Text.wrap(self,width:int,justify:'JustifyValues'='left')->Lines


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_stack.py----------------------------------------
A:rich._stack.T->TypeVar('T')
rich._stack.Stack(List[T])
rich._stack.Stack.push(self,item:T)->None
rich._stack.Stack.top(self)->T


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/syntax.py----------------------------------------
A:rich.syntax.code->textwrap.dedent(code)
A:rich.syntax.self._pygments_style_class->get_style_by_name('default')
A:rich.syntax.lexer->get_lexer_by_name(lexer_name)
A:rich.syntax.pygments_style->self._pygments_style_class.style_for_token(token_type)
A:rich.syntax.style->self._get_theme_style(Token.Text)
A:rich.syntax.default_style->self._get_default_style()
A:rich.syntax.text->self._highlight(self.lexer_name)
A:rich.syntax.background_color->parse_rgb_hex(self._pygments_style_class.background_color[1:])
A:rich.syntax.new_color->blend_rgb(background_color, foreground_color.triplet)
A:rich.syntax.lines->self._highlight(self.lexer_name).split('\n')
A:rich.syntax.render_options->options.update(width=options.max_width - numbers_column_width)
A:rich.syntax.background_style->Console(record=True).get_style(self.style)
A:rich.syntax.number_style._color->self._get_line_numbers_color()
A:rich.syntax.padding->Segment(' ' * numbers_column_width, background_style)
A:rich.syntax.new_line->Segment('\n')
A:rich.syntax.wrapped_lines->Console(record=True).render_lines(line, render_options, style=background_style)
A:rich.syntax.syntax->Syntax.from_path('./rich/syntax.py', theme='monokai', line_numbers=True)
A:rich.syntax.console->Console(record=True)
A:rich.syntax.start->time()
A:rich.syntax.elapsed->int((time() - start) * 1000)
rich.syntax.Syntax(self,code:str,lexer_name:str,*,style:Union[str,Style]=None,theme:str='emacs',dedent:bool=True,line_numbers:bool=False,start_line:int=1)
rich.syntax.Syntax.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.syntax.Syntax.__init__(self,code:str,lexer_name:str,*,style:Union[str,Style]=None,theme:str='emacs',dedent:bool=True,line_numbers:bool=False,start_line:int=1)
rich.syntax.Syntax._get_default_style(self)->Style
rich.syntax.Syntax._get_line_numbers_color(self)->Color
rich.syntax.Syntax._get_theme_style(self,token_type)->Style
rich.syntax.Syntax._highlight(self,lexer_name:str)->Text
rich.syntax.Syntax.from_path(cls,path:str,style:Union[str,Style]=None,theme:str='emacs',dedent:bool=True,line_numbers:bool=False,start_line:int=1)->'Syntax'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_palettes.py----------------------------------------
A:rich._palettes.STANDARD_PALETTE->Palette([(0, 0, 0), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255)])
A:rich._palettes.EIGHT_BIT_PALETTE->Palette([(0, 0, 0), (128, 0, 0), (0, 128, 0), (128, 128, 0), (0, 0, 128), (128, 0, 128), (0, 128, 128), (192, 192, 192), (128, 128, 128), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 95), (0, 0, 135), (0, 0, 175), (0, 0, 215), (0, 0, 255), (0, 95, 0), (0, 95, 95), (0, 95, 135), (0, 95, 175), (0, 95, 215), (0, 95, 255), (0, 135, 0), (0, 135, 95), (0, 135, 135), (0, 135, 175), (0, 135, 215), (0, 135, 255), (0, 175, 0), (0, 175, 95), (0, 175, 135), (0, 175, 175), (0, 175, 215), (0, 175, 255), (0, 215, 0), (0, 215, 95), (0, 215, 135), (0, 215, 175), (0, 215, 215), (0, 215, 255), (0, 255, 0), (0, 255, 95), (0, 255, 135), (0, 255, 175), (0, 255, 215), (0, 255, 255), (95, 0, 0), (95, 0, 95), (95, 0, 135), (95, 0, 175), (95, 0, 215), (95, 0, 255), (95, 95, 0), (95, 95, 95), (95, 95, 135), (95, 95, 175), (95, 95, 215), (95, 95, 255), (95, 135, 0), (95, 135, 95), (95, 135, 135), (95, 135, 175), (95, 135, 215), (95, 135, 255), (95, 175, 0), (95, 175, 95), (95, 175, 135), (95, 175, 175), (95, 175, 215), (95, 175, 255), (95, 215, 0), (95, 215, 95), (95, 215, 135), (95, 215, 175), (95, 215, 215), (95, 215, 255), (95, 255, 0), (95, 255, 95), (95, 255, 135), (95, 255, 175), (95, 255, 215), (95, 255, 255), (135, 0, 0), (135, 0, 95), (135, 0, 135), (135, 0, 175), (135, 0, 215), (135, 0, 255), (135, 95, 0), (135, 95, 95), (135, 95, 135), (135, 95, 175), (135, 95, 215), (135, 95, 255), (135, 135, 0), (135, 135, 95), (135, 135, 135), (135, 135, 175), (135, 135, 215), (135, 135, 255), (135, 175, 0), (135, 175, 95), (135, 175, 135), (135, 175, 175), (135, 175, 215), (135, 175, 255), (135, 215, 0), (135, 215, 95), (135, 215, 135), (135, 215, 175), (135, 215, 215), (135, 215, 255), (135, 255, 0), (135, 255, 95), (135, 255, 135), (135, 255, 175), (135, 255, 215), (135, 255, 255), (175, 0, 0), (175, 0, 95), (175, 0, 135), (175, 0, 175), (175, 0, 215), (175, 0, 255), (175, 95, 0), (175, 95, 95), (175, 95, 135), (175, 95, 175), (175, 95, 215), (175, 95, 255), (175, 135, 0), (175, 135, 95), (175, 135, 135), (175, 135, 175), (175, 135, 215), (175, 135, 255), (175, 175, 0), (175, 175, 95), (175, 175, 135), (175, 175, 175), (175, 175, 215), (175, 175, 255), (175, 215, 0), (175, 215, 95), (175, 215, 135), (175, 215, 175), (175, 215, 215), (175, 215, 255), (175, 255, 0), (175, 255, 95), (175, 255, 135), (175, 255, 175), (175, 255, 215), (175, 255, 255), (215, 0, 0), (215, 0, 95), (215, 0, 135), (215, 0, 175), (215, 0, 215), (215, 0, 255), (215, 95, 0), (215, 95, 95), (215, 95, 135), (215, 95, 175), (215, 95, 215), (215, 95, 255), (215, 135, 0), (215, 135, 95), (215, 135, 135), (215, 135, 175), (215, 135, 215), (215, 135, 255), (215, 175, 0), (215, 175, 95), (215, 175, 135), (215, 175, 175), (215, 175, 215), (215, 175, 255), (215, 215, 0), (215, 215, 95), (215, 215, 135), (215, 215, 175), (215, 215, 215), (215, 215, 255), (215, 255, 0), (215, 255, 95), (215, 255, 135), (215, 255, 175), (215, 255, 215), (215, 255, 255), (255, 0, 0), (255, 0, 95), (255, 0, 135), (255, 0, 175), (255, 0, 215), (255, 0, 255), (255, 95, 0), (255, 95, 95), (255, 95, 135), (255, 95, 175), (255, 95, 215), (255, 95, 255), (255, 135, 0), (255, 135, 95), (255, 135, 135), (255, 135, 175), (255, 135, 215), (255, 135, 255), (255, 175, 0), (255, 175, 95), (255, 175, 135), (255, 175, 175), (255, 175, 215), (255, 175, 255), (255, 215, 0), (255, 215, 95), (255, 215, 135), (255, 215, 175), (255, 215, 215), (255, 215, 255), (255, 255, 0), (255, 255, 95), (255, 255, 135), (255, 255, 175), (255, 255, 215), (255, 255, 255), (8, 8, 8), (18, 18, 18), (28, 28, 28), (38, 38, 38), (48, 48, 48), (58, 58, 58), (68, 68, 68), (78, 78, 78), (88, 88, 88), (98, 98, 98), (108, 108, 108), (118, 118, 118), (128, 128, 128), (138, 138, 138), (148, 148, 148), (158, 158, 158), (168, 168, 168), (178, 178, 178), (188, 188, 188), (198, 198, 198), (208, 208, 208), (218, 218, 218), (228, 228, 228), (238, 238, 238)])


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/highlighter.py----------------------------------------
A:rich.highlighter.highlight_text->text.copy()
A:rich.highlighter.str_text->str(text)
A:rich.highlighter.(start, end)->_span(name)
A:rich.highlighter.console->Console()
A:rich.highlighter.highlighter->ReprHighlighter()
A:rich.highlighter.pp->PrettyPrinter(indent=4, compact=False)
A:rich.highlighter.t->Text('"""hello True""" <div class=foo>')
rich.highlighter.Highlighter(self,text:Union[str,Text])
rich.highlighter.Highlighter.__call__(self,text:Union[str,Text])
rich.highlighter.Highlighter.highlight(self,text:Text)->None
rich.highlighter.RegexHighlighter(Highlighter)
rich.highlighter.RegexHighlighter.highlight(self,text:Text)->None
rich.highlighter.ReprHighlighter(RegexHighlighter)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/style.py----------------------------------------
A:rich.style.bold->_Bit(0)
A:rich.style.dim->_Bit(1)
A:rich.style.italic->_Bit(2)
A:rich.style.underline->_Bit(3)
A:rich.style.blink->_Bit(4)
A:rich.style.blink2->_Bit(5)
A:rich.style.reverse->_Bit(6)
A:rich.style.conceal->_Bit(7)
A:rich.style.strike->_Bit(8)
A:rich.style.words->iter(style_definition.split())
A:rich.style.word->next(words, '')
A:rich.style.style->Style.parse('bold not italic  #6ab825')
A:rich.style.color->color.Color.from_triplet(blend_rgb(foreground_color, theme.background_color, 0.5))
A:rich.style.theme_color->bgcolor.get_truecolor(theme, foreground=False)
A:rich.style.style.__dict__->self.__dict__.copy()
A:rich.style.new_style->self.__new__(Style)
A:rich.style.c->Console()
rich.style.Style(self,*,color:str=None,bgcolor:str=None,bold:bool=None,dim:bool=None,italic:bool=None,underline:bool=None,blink:bool=None,blink2:bool=None,reverse:bool=None,conceal:bool=None,strike:bool=None)
rich.style.Style.__add__(self,style:Optional['Style'])->'Style'
rich.style.Style.__eq__(self,other:Any)->bool
rich.style.Style.__hash__(self)->int
rich.style.Style.__iadd__(self,style:Optional['Style'])->'Style'
rich.style.Style.__init__(self,*,color:str=None,bgcolor:str=None,bold:bool=None,dim:bool=None,italic:bool=None,underline:bool=None,blink:bool=None,blink2:bool=None,reverse:bool=None,conceal:bool=None,strike:bool=None)
rich.style.Style.__repr__(self)->str
rich.style.Style.__str__(self)->str
rich.style.Style._apply(self,style:'Style')->'Style'
rich.style.Style._update(self,style:'Style')->None
rich.style.Style.bgcolor(self)->Optional[Color]
rich.style.Style.color(self)->Optional[Color]
rich.style.Style.combine(self,styles:Iterable['Style'])->'Style'
rich.style.Style.copy(self)->'Style'
rich.style.Style.get_html_style(self,theme:Theme=None)->str
rich.style.Style.normalize(cls,style:str)->str
rich.style.Style.parse(cls,style_definition:str)->'Style'
rich.style.Style.render(self,text:str='',*,color_system:Optional[ColorSystem]=ColorSystem.TRUECOLOR,reset=False)->str
rich.style.Style.test(self,text:Optional[str]=None)->None
rich.style.StyleStack(self,default_style:'Style')
rich.style.StyleStack.__init__(self,default_style:'Style')
rich.style.StyleStack.__repr__(self)->str
rich.style.StyleStack.pop(self)->Style
rich.style.StyleStack.push(self,style:Style)->None
rich.style._Bit(self,bit_no:int)
rich.style._Bit.__get__(self,obj:'Style',objtype:Type['Style'])->Optional[bool]
rich.style._Bit.__init__(self,bit_no:int)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/console.py----------------------------------------
A:rich.console.options->replace(self)
A:rich.console.self._styles->ChainMap(DEFAULT_STYLES if styles is None else styles)
A:rich.console.self._color_system->self._detect_color_system()
A:rich.console.default_style->Style()
A:rich.console.self._log_render->LogRender(show_time=log_time, show_path=log_path, time_format=log_time_format)
A:rich.console.isatty->getattr(self.file, 'isatty', None)
A:rich.console.(width, height)->shutil.get_terminal_size()
A:rich.console.render_iterable->renderable.__console__(self, render_options)
A:rich.console._rendered->self.render(renderable, render_options)
A:rich.console.lines->list(Segment.split_and_crop_lines(_rendered, render_options.max_width, style=style))
A:rich.console.style->self.style_stack.pop()
A:rich.console._style->self.get_style(style)
A:rich.console.sep_text->Text(sep)
A:rich.console.end_text->Text(end)
A:rich.console.console_str_callable->getattr(renderable, '__console_str__', None)
A:rich.console.render_str->_emoji_replace(render_str)
A:rich.console.render_text->self.render_str(render_str)
A:rich.console.renderables->self._collect_renderables(objects, sep=sep, end=end, highlight=highlighter)
A:rich.console.text->self.export_text(clear=clear, styles=styles)
A:rich.console.rendered->''.join(output)
A:rich.console.rule->self.style_stack.pop().get_html_style(_theme)
A:rich.console.style_number->styles.setdefault(rule, len(styles) + 1)
A:rich.console.stylesheet->'\n'.join(stylesheet_rules)
A:rich.console.rendered_code->render_code_format.format(code=''.join(fragments), stylesheet=stylesheet, foreground=_theme.foreground_color.hex, background=_theme.background_color.hex)
A:rich.console.html->self.export_html(theme=theme, clear=clear, code_format=code_format, inline_styles=inline_styles)
A:rich.console.console->Console()
rich.Console(self,color_system:Optional[Literal['auto','standard','256','truecolor']]='auto',styles:Dict[str,Style]=None,file:IO=None,width:int=None,height:int=None,record:bool=False,markup:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]')
rich.Console.__enter__(self)->'Console'
rich.Console.__exit__(self,exc_type,exc_value,traceback)->None
rich.Console.__repr__(self)->str
rich.Console._check_buffer(self)->None
rich.Console._collect_renderables(self,objects:Iterable[Any],sep:str,end:str,emoji=True,highlight:'HighlighterType'=None)->List[ConsoleRenderable]
rich.Console._detect_color_system(self)->Optional[ColorSystem]
rich.Console._enter_buffer(self)->None
rich.Console._exit_buffer(self)->None
rich.Console._get_style(self,name:str)->Optional[Style]
rich.Console._render(self,renderable:RenderableType,options:Optional[ConsoleOptions])->Iterable[Segment]
rich.Console._render_buffer(self)->str
rich.Console.encoding(self)->str
rich.Console.export_html(self,theme:Theme=None,clear:bool=True,code_format:str=None,inline_styles:bool=False)->str
rich.Console.export_text(self,clear:bool=True,styles:bool=False)->str
rich.Console.get_style(self,name:Union[str,Style],*,default:Union[Style,str]=None)->Style
rich.Console.is_terminal(self)->bool
rich.Console.line(self,count:int=1)->None
rich.Console.log(self,*objects:Any,sep='',end='\n',debug=Ellipsis,highlight:'HighlighterType'=None,log_locals:bool=False,_stack_offset=1)->None
rich.Console.options(self)->ConsoleOptions
rich.Console.pop_style(self)->Style
rich.Console.print(self,*objects:Any,sep='',end='\n',style:Union[str,Style]=None,emoji=True,highlight:'HighlighterType'=None)->None
rich.Console.push_style(self,style:Union[str,Style])->None
rich.Console.push_styles(self,styles:Dict[str,Style])->None
rich.Console.render(self,renderable:RenderableType,options:Optional[ConsoleOptions])->Iterable[Segment]
rich.Console.render_all(self,renderables:Iterable[RenderableType],options:Optional[ConsoleOptions])->Iterable[Segment]
rich.Console.render_lines(self,renderable:RenderableType,options:Optional[ConsoleOptions],style:Optional[Style]=None)->List[List[Segment]]
rich.Console.render_str(self,text:str)->'Text'
rich.Console.save_html(self,path:str,theme:Theme=None,clear:bool=True,code_format=CONSOLE_HTML_FORMAT,inline_styles:bool=False)->None
rich.Console.save_text(self,path:str,clear:bool=True,styles:bool=False)->None
rich.Console.size(self)->ConsoleDimensions
rich.Console.style(self,style:Optional[Union[str,Style]])->StyleContext
rich.Console.width(self)->int
rich.ConsoleDimensions(NamedTuple)
rich.ConsoleOptions
rich.ConsoleOptions.update(self,width:int=None,min_width:int=None,max_width:int=None,justify:JustifyValues=None)
rich.ConsoleRenderable(Protocol)
rich.ConsoleRenderable.__console__(self,console:'Console',options:'ConsoleOptions')->Iterable[Union['ConsoleRenderable', Segment]]
rich.console.Console(self,color_system:Optional[Literal['auto','standard','256','truecolor']]='auto',styles:Dict[str,Style]=None,file:IO=None,width:int=None,height:int=None,record:bool=False,markup:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]')
rich.console.Console.__enter__(self)->'Console'
rich.console.Console.__exit__(self,exc_type,exc_value,traceback)->None
rich.console.Console.__init__(self,color_system:Optional[Literal['auto','standard','256','truecolor']]='auto',styles:Dict[str,Style]=None,file:IO=None,width:int=None,height:int=None,record:bool=False,markup:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]')
rich.console.Console.__repr__(self)->str
rich.console.Console._check_buffer(self)->None
rich.console.Console._collect_renderables(self,objects:Iterable[Any],sep:str,end:str,emoji=True,highlight:'HighlighterType'=None)->List[ConsoleRenderable]
rich.console.Console._detect_color_system(self)->Optional[ColorSystem]
rich.console.Console._enter_buffer(self)->None
rich.console.Console._exit_buffer(self)->None
rich.console.Console._get_style(self,name:str)->Optional[Style]
rich.console.Console._render(self,renderable:RenderableType,options:Optional[ConsoleOptions])->Iterable[Segment]
rich.console.Console._render_buffer(self)->str
rich.console.Console.encoding(self)->str
rich.console.Console.export_html(self,theme:Theme=None,clear:bool=True,code_format:str=None,inline_styles:bool=False)->str
rich.console.Console.export_text(self,clear:bool=True,styles:bool=False)->str
rich.console.Console.get_style(self,name:Union[str,Style],*,default:Union[Style,str]=None)->Style
rich.console.Console.is_terminal(self)->bool
rich.console.Console.line(self,count:int=1)->None
rich.console.Console.log(self,*objects:Any,sep='',end='\n',debug=Ellipsis,highlight:'HighlighterType'=None,log_locals:bool=False,_stack_offset=1)->None
rich.console.Console.options(self)->ConsoleOptions
rich.console.Console.pop_style(self)->Style
rich.console.Console.print(self,*objects:Any,sep='',end='\n',style:Union[str,Style]=None,emoji=True,highlight:'HighlighterType'=None)->None
rich.console.Console.push_style(self,style:Union[str,Style])->None
rich.console.Console.push_styles(self,styles:Dict[str,Style])->None
rich.console.Console.render(self,renderable:RenderableType,options:Optional[ConsoleOptions])->Iterable[Segment]
rich.console.Console.render_all(self,renderables:Iterable[RenderableType],options:Optional[ConsoleOptions])->Iterable[Segment]
rich.console.Console.render_lines(self,renderable:RenderableType,options:Optional[ConsoleOptions],style:Optional[Style]=None)->List[List[Segment]]
rich.console.Console.render_str(self,text:str)->'Text'
rich.console.Console.save_html(self,path:str,theme:Theme=None,clear:bool=True,code_format=CONSOLE_HTML_FORMAT,inline_styles:bool=False)->None
rich.console.Console.save_text(self,path:str,clear:bool=True,styles:bool=False)->None
rich.console.Console.size(self)->ConsoleDimensions
rich.console.Console.style(self,style:Optional[Union[str,Style]])->StyleContext
rich.console.Console.width(self)->int
rich.console.ConsoleDimensions(NamedTuple)
rich.console.ConsoleOptions
rich.console.ConsoleOptions.update(self,width:int=None,min_width:int=None,max_width:int=None,justify:JustifyValues=None)
rich.console.ConsoleRenderable(Protocol)
rich.console.ConsoleRenderable.__console__(self,console:'Console',options:'ConsoleOptions')->Iterable[Union['ConsoleRenderable', Segment]]
rich.console.StyleContext(self,console:'Console',style:Optional[Style])
rich.console.StyleContext.__enter__(self)->'Console'
rich.console.StyleContext.__exit__(self,exc_type,exc_value,traceback)->None
rich.console.StyleContext.__init__(self,console:'Console',style:Optional[Style])


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/color.py----------------------------------------
A:rich.color.RE_COLOR->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE)
A:rich.color.attrs->self.get_ansi_codes(foreground=True)
A:rich.color.color->ColorTriplet(int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16))
A:rich.color.named_color_number->ANSI_COLOR_NAMES.get(color)
A:rich.color.color_match->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE).match(color)
A:rich.color.(color_24, color_8, color_rgb)->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE).match(color).groups()
A:rich.color.number->int(color_8)
A:rich.color.triplet->ColorTriplet(*EIGHT_BIT_PALETTE[self.number])
A:rich.color.components->color_rgb.split(',')
A:rich.color.(_h, l, s)->rgb_to_hls(red, green, blue)
A:rich.color.gray->round(l * 25.0)
A:rich.color.color_number->_palettes.STANDARD_PALETTE.match(triplet)
A:rich.color.new_color->ColorTriplet(int(r1 + (r2 - r1) * cross_fade), int(g1 + (g2 - g1) * cross_fade), int(b1 + (b2 - b1) * cross_fade))
A:rich.color.console->Console()
A:rich.color.table->Table(show_footer=False, show_edge=True)
A:rich.color.colors->sorted(((v, k) for (k, v) in ANSI_COLOR_NAMES.items()))
A:rich.color.color_cell->Text(' ' * 10, style=f'on {name}')
rich.color.Color(NamedTuple)
rich.color.Color.__repr__(self)->str
rich.color.Color.__str__(self)->str
rich.color.Color.default(cls)->'Color'
rich.color.Color.downgrade(self,system:ColorSystem)->'Color'
rich.color.Color.from_triplet(cls,triplet:'ColorTriplet')->'Color'
rich.color.Color.get_ansi_codes(self,foreground:bool=True)->List[str]
rich.color.Color.get_truecolor(self,theme:'Theme',foreground=True)->ColorTriplet
rich.color.Color.parse(cls,color:str)->'Color'
rich.color.Color.system(self)->ColorSystem
rich.color.ColorParseError(Exception)
rich.color.ColorSystem(IntEnum)
rich.color.ColorType(IntEnum)
rich.color.blend_rgb(color1:ColorTriplet,color2:ColorTriplet,cross_fade:float=0.5)->ColorTriplet
rich.color.parse_rgb_hex(hex_color:str)->ColorTriplet


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/pretty.py----------------------------------------
A:rich.pretty.highlighter->ReprHighlighter()
A:rich.pretty.pretty_str->pformat(self._object, width=options.max_width)
A:rich.pretty.pretty_text->highlighter(pretty_str)
A:rich.pretty.text->Text(pformat(self._object, width=max_width))
rich.pretty.Pretty(self,_object:Any)
rich.pretty.Pretty.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.pretty.Pretty.__console_width__(self,max_width:int)->'RenderWidth'
rich.pretty.Pretty.__init__(self,_object:Any)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_log_render.py----------------------------------------
A:rich._log_render.output->Table(show_header=False, expand=True, box=None, padding=0)
A:rich._log_render.log_time->datetime.datetime.now()
A:rich._log_render.log_time_display->datetime.datetime.now().strftime(self.time_format)
rich._log_render.LogRender(self,show_time:bool=True,show_path:bool=True,time_format:str='[%x%X]')
rich._log_render.LogRender.__init__(self,show_time:bool=True,show_path:bool=True,time_format:str='[%x%X]')


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/panel.py----------------------------------------
A:rich.panel.style->console.get_style(self.style)
A:rich.panel.child_options->options.update(width=child_width)
A:rich.panel.lines->console.render_lines(self.renderable, child_options)
A:rich.panel.line_start->Segment(box.mid_left, style)
A:rich.panel.line_end->Segment(f'{box.mid_right}\n', style)
A:rich.panel.c->Console(width=22)
A:rich.panel.p->Panel(Panel(Padding(Text.from_markup('[bold magenta]Hello World!'), (1, 8)), box=ROUNDED, expand=False))
rich.panel.Panel(self,renderable:Union[str,ConsoleRenderable],box:Box=SQUARE,expand:bool=True,style:Union[str,Style]='none')
rich.panel.Panel.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.panel.Panel.__console_width__(self,max_width:int)->RenderWidth
rich.panel.Panel.__init__(self,renderable:Union[str,ConsoleRenderable],box:Box=SQUARE,expand:bool=True,style:Union[str,Style]='none')


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/table.py----------------------------------------
A:rich.table.self._padding->padding.Padding.unpack(padding)
A:rich.table.column->Column()
A:rich.table.max_width->min(self.width, max_width)
A:rich.table.widths->self._calculate_column_widths(max_width)
A:rich.table.title_text->text.Text.from_markup(self.title, style=self.title_style if self.title_style is not None else 'table.title')
A:rich.table.wrapped_title->text.Text.from_markup(self.title, style=self.title_style if self.title_style is not None else 'table.title').wrap(table_width, 'center')
A:rich.table.flex_widths->ratio_divide(flexible_width, ratios, flex_minimum)
A:rich.table.iter_flex_widths->iter(flex_widths)
A:rich.table.table_width->sum(widths)
A:rich.table.pad_widths->ratio_divide(max_width - table_width, widths)
A:rich.table.any_padding->any(padding)
A:rich.table.(_min, _max)->get_render_width(cell.renderable, max_width)
A:rich.table.table_style->console.get_style(self.style or '')
A:rich.table.new_line->segment.Segment.line()
A:rich.table.render_options->options.update(width=width, justify=column.justify)
A:rich.table.lines->console.render_lines(cell.renderable, render_options, style=cell_style)
A:rich.table.max_height->max(max_height, len(lines))
A:rich.table.left->Segment(box.mid_left, border_style)
A:rich.table.right->Segment(box.mid_right, border_style)
A:rich.table.divider->Segment(box.mid_vertical, border_style)
A:rich.table.c->Console()
A:rich.table.table->Table(Column('Foo', footer=Text('Total', justify='right'), footer_style='bold', ratio=1), Column('Bar', style='red', footer='123', ratio=1), box=box.SIMPLE, expand=True, show_footer=True, show_edge=True)
rich.table.Column
rich.table.Column.cells(self)->Iterable['ConsoleRenderable']
rich.table.Column.flexible(self)->bool
rich.table.Column.footer_renderable(self)->'ConsoleRenderable'
rich.table.Column.header_renderable(self)->'ConsoleRenderable'
rich.table.Table(self,*headers:Union[Column,str],title:str=None,footer:str=None,width:int=None,box:Optional[box.Box]=box.DOUBLE_EDGE,padding:PaddingDimensions=(0,1),pad_edge:bool=True,expand:bool=False,show_header:bool=True,show_footer:bool=False,show_edge:bool=True,style:Union[str,Style]='none',header_style:Union[str,Style]=None,footer_style:Union[str,Style]=None,border_style:Union[str,Style]=None,title_style:Union[str,Style]=None)
rich.table.Table.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.table.Table.__init__(self,*headers:Union[Column,str],title:str=None,footer:str=None,width:int=None,box:Optional[box.Box]=box.DOUBLE_EDGE,padding:PaddingDimensions=(0,1),pad_edge:bool=True,expand:bool=False,show_header:bool=True,show_footer:bool=False,show_edge:bool=True,style:Union[str,Style]='none',header_style:Union[str,Style]=None,footer_style:Union[str,Style]=None,border_style:Union[str,Style]=None,title_style:Union[str,Style]=None)
rich.table.Table._calculate_column_widths(self,max_width:int)->List[int]
rich.table.Table._get_cells(self,column_index:int,column:Column)->Iterable[_Cell]
rich.table.Table._measure_column(self,column_index:int,column:Column,max_width:int)->RenderWidth
rich.table.Table._render(self,console:'Console',options:'ConsoleOptions',widths:List[int])->'RenderResult'
rich.table.Table.add_column(self,header:Union[str,'ConsoleRenderable']='',footer:Union[str,'ConsoleRenderable']='',header_style:Union[str,Style]=None,footer_style:Union[str,Style]=None,style:Union[str,Style]=None,justify:'JustifyValues'='left',width:int=None,ratio:int=None)
rich.table.Table.add_row(self,*renderables:Optional[Union[str,'ConsoleRenderable']])->None
rich.table.Table.padding(self)->Tuple[int, int, int, int]
rich.table.Table.padding(self,padding:PaddingDimensions)->'Table'
rich.table._Cell(NamedTuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_wrap.py----------------------------------------
A:rich._wrap.re_word->re.compile('\\s*\\S+\\s*')
A:rich._wrap.word_match->re.compile('\\s*\\S+\\s*').match(text, position)
A:rich._wrap.(start, position)->re.compile('\\s*\\S+\\s*').match(text, position).span()
A:rich._wrap.word->re.compile('\\s*\\S+\\s*').match(text, position).group(0)
rich._wrap.divide_line(text:str,width:int)->List[int]
rich._wrap.words(text:str)->Iterable[Tuple[int, str]]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/box.py----------------------------------------
A:rich.box.(line1, line2, line3, line4, line5, line6, line7, line8)->box.splitlines()
A:rich.box.border_str->str(self).replace('\n', '\\n')
A:rich.box.ASCII->Box('+--+\n| ||\n|-+|\n| ||\n|-+|\n|-+|\n| ||\n+--+\n')
A:rich.box.SQUARE->Box('┌─┬┐\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n')
A:rich.box.MINIMAL->Box('    \n  │ \n ─┼ \n  │ \n ─┼ \n ─┼ \n  │ \n    \n')
A:rich.box.MINIMAL_HEAVY_HEAD->Box('    \n  │ \n ━┿ \n  │ \n ─┼ \n ─┼ \n  │ \n    \n')
A:rich.box.MINIMAL_DOUBLE_HEAD->Box('    \n  │ \n ═╪ \n  │ \n ─┼ \n ─┼ \n  │ \n    \n')
A:rich.box.SIMPLE->Box('    \n    \n────\n    \n    \n────\n    \n    \n')
A:rich.box.SIMPLE_HEAVY->Box('    \n    \n╺━━╸\n    \n    \n╺━━╸\n    \n    \n')
A:rich.box.HORIZONTALS->Box('────\n    \n────\n    \n────\n────\n    \n────\n')
A:rich.box.ROUNDED->Box('╭─┬╮\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n╰─┴╯\n')
A:rich.box.HEAVY->Box('┏━┳┓\n┃ ┃┃\n┣━╋┫\n┃ ┃┃\n┣━╋┫\n┣━╋┫\n┃ ┃┃\n┗━┻┛\n')
A:rich.box.HEAVY_EDGE->Box('┏━┯┓\n┃ │┃\n┠─┼┨\n┃ │┃\n┠─┼┨\n┠─┼┨\n┃ │┃\n┗━┷┛\n')
A:rich.box.HEAVY_HEAD->Box('┏━┳┓\n┃ ┃┃\n┡━╇┩\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n')
A:rich.box.DOUBLE->Box('╔═╦╗\n║ ║║\n╠═╬╣\n║ ║║\n╠═╬╣\n╠═╬╣\n║ ║║\n╚═╩╝\n')
A:rich.box.DOUBLE_EDGE->Box('╔═╤╗\n║ │║\n╟─┼╢\n║ │║\n╟─┼╢\n╟─┼╢\n║ │║\n╚═╧╝\n')
rich.box.Box(self,box:str)
rich.box.Box.__init__(self,box:str)
rich.box.Box.__repr__(self)->str
rich.box.Box.__str__(self)->str
rich.box.Box.get_bottom(self,widths:Iterable[int])->str
rich.box.Box.get_row(self,widths:Iterable[int],level:Literal['head','row','foot']='row',edge:bool=True)->str
rich.box.Box.get_top(self,widths:Iterable[int])->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/color_triplet.py----------------------------------------
rich.color_triplet.ColorTriplet(NamedTuple)
rich.color_triplet.ColorTriplet.hex(self)->str
rich.color_triplet.ColorTriplet.normalized(self)->Tuple[float, float, float]
rich.color_triplet.ColorTriplet.rgb(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/themes.py----------------------------------------
A:rich.themes.DEFAULT->Theme((255, 255, 255), (0, 0, 0), [(0, 0, 0), (128, 0, 0), (0, 128, 0), (128, 128, 0), (0, 0, 128), (128, 0, 128), (0, 128, 128), (192, 192, 192), (128, 128, 128), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255)])


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/markdown.py----------------------------------------
A:rich.markdown.self.style->MarkdownContext(console, options, style).enter_style(self.style_name)
A:rich.markdown.self.text->Text()
A:rich.markdown.heading->Heading(node.level)
A:rich.markdown.(lexer_name, _, _)->node.info.partition(' ')
A:rich.markdown.code->str(self.text).rstrip()
A:rich.markdown.syntax->Syntax(code, self.lexer_name, theme=self.theme)
A:rich.markdown.render_options->options.update(width=options.max_width - number_width)
A:rich.markdown.lines->Console(record=True, width=90).render_lines(self.elements, render_options, style=self.style)
A:rich.markdown.new_line->Segment('\n')
A:rich.markdown.left_quote->Segment('“ ', style)
A:rich.markdown.right_quote->Segment(' ”', style)
A:rich.markdown.padding->Segment(' ' * number_width, number_style)
A:rich.markdown.style->Console(record=True, width=90).get_style(self.style)
A:rich.markdown.bullet_style->Console(record=True, width=90).get_style('markdown.item.bullet')
A:rich.markdown.bullet->Segment(' • ', bullet_style)
A:rich.markdown.number_style->Console(record=True, width=90).get_style('markdown.item.number')
A:rich.markdown.numeral->Segment(f'{number}'.rjust(number_width - 1) + ' ', number_style)
A:rich.markdown.parser->Parser()
A:rich.markdown.self.parsed->Parser().parse(markup)
A:rich.markdown.context->MarkdownContext(console, options, style)
A:rich.markdown.nodes->self.parsed.walker()
A:rich.markdown.element->element_class.create(self, current)
A:rich.markdown.console->Console(record=True, width=90)
A:rich.markdown.md->Markdown(markup)
rich.markdown.BlockQuote(self)
rich.markdown.BlockQuote.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.BlockQuote.__init__(self)
rich.markdown.BlockQuote.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.CodeBlock(self,lexer_name:str,theme:str)
rich.markdown.CodeBlock.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.CodeBlock.__init__(self,lexer_name:str,theme:str)
rich.markdown.CodeBlock.create(cls,markdown:'Markdown',node:Any)->'CodeBlock'
rich.markdown.Heading(self,level:int)
rich.markdown.Heading.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.Heading.__init__(self,level:int)
rich.markdown.Heading.create(cls,markdown:'Markdown',node:Any)->'Heading'
rich.markdown.Heading.on_enter(self,context:'MarkdownContext')->None
rich.markdown.HorizontalRule(MarkdownElement)
rich.markdown.HorizontalRule.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ListElement(self,list_type:str,list_start:Optional[int])
rich.markdown.ListElement.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ListElement.__init__(self,list_type:str,list_start:Optional[int])
rich.markdown.ListElement.create(cls,markdown:'Markdown',node:Any)->'ListElement'
rich.markdown.ListElement.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.ListItem(self)
rich.markdown.ListItem.__init__(self)
rich.markdown.ListItem.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.ListItem.render_bullet(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ListItem.render_number(self,console:Console,options:ConsoleOptions,number:int,last_number:int)->RenderResult
rich.markdown.Markdown(self,markup:str,code_theme:str='monokai',justify:JustifyValues=None,style:Union[str,Style]='none')
rich.markdown.Markdown.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.Markdown.__init__(self,markup:str,code_theme:str='monokai',justify:JustifyValues=None,style:Union[str,Style]='none')
rich.markdown.MarkdownContext(self,console:Console,options:ConsoleOptions,style:Style)
rich.markdown.MarkdownContext.__init__(self,console:Console,options:ConsoleOptions,style:Style)
rich.markdown.MarkdownContext.current_style(self)->Style
rich.markdown.MarkdownContext.enter_style(self,style_name:Union[str,Style])->Style
rich.markdown.MarkdownContext.leave_style(self)->Style
rich.markdown.MarkdownContext.on_text(self,text:str)->None
rich.markdown.MarkdownContext.width(self)->int
rich.markdown.MarkdownElement
rich.markdown.MarkdownElement.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.markdown.MarkdownElement.create(cls,markdown:'Markdown',node:Any)->'MarkdownElement'
rich.markdown.MarkdownElement.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.MarkdownElement.on_enter(self,context:'MarkdownContext')
rich.markdown.MarkdownElement.on_leave(self,context:'MarkdownContext')->None
rich.markdown.MarkdownElement.on_text(self,context:'MarkdownContext',text:str)->None
rich.markdown.Paragraph(self,justify:JustifyValues)
rich.markdown.Paragraph.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.Paragraph.__init__(self,justify:JustifyValues)
rich.markdown.Paragraph.create(cls,markdown:'Markdown',node)->'Paragraph'
rich.markdown.TextElement(MarkdownElement)
rich.markdown.TextElement.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.TextElement.on_enter(self,context:'MarkdownContext')->None
rich.markdown.TextElement.on_leave(self,context:'MarkdownContext')->None
rich.markdown.TextElement.on_text(self,context:'MarkdownContext',text:str)->None
rich.markdown.UnknownElement(MarkdownElement)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/containers.py----------------------------------------
A:rich.containers.T->TypeVar('T')
A:rich.containers._min->max((dimension.minimum for dimension in dimensions))
A:rich.containers._max->max((dimension.maximum for dimension in dimensions))
A:rich.containers.words->line.split(' ')
A:rich.containers.words_size->sum((len(word) for word in words))
A:rich.containers.self[line_index]->Text('').join(tokens)
rich.containers.Lines(self,lines:Iterable['Text']=())
rich.containers.Lines.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.containers.Lines.__getitem__(self,index:int)->'Text'
rich.containers.Lines.__init__(self,lines:Iterable['Text']=())
rich.containers.Lines.__iter__(self)->Iterator['Text']
rich.containers.Lines.__len__(self)->int
rich.containers.Lines.__setitem__(self,index:int,value:'Text')->'Lines'
rich.containers.Lines.append(self,line:'Text')->None
rich.containers.Lines.extend(self,lines:Iterable['Text'])->None
rich.containers.Lines.justify(self,width:int,align:Literal['none','left','center','right','full']='left')->None
rich.containers.Renderables(self,renderables:Iterable['ConsoleRenderable']=None)
rich.containers.Renderables.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.containers.Renderables.__console_width__(self,max_width:int)->'RenderWidth'
rich.containers.Renderables.__init__(self,renderables:Iterable['ConsoleRenderable']=None)
rich.containers.Renderables.__iter__(self)->Iterable['ConsoleRenderable']
rich.containers.Renderables.append(self,renderable:'ConsoleRenderable')->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/segment.py----------------------------------------
A:rich.segment.(_text, new_line, text)->text.partition('\n')
A:rich.segment.line_length->sum((len(text) for (text, _style) in line))
A:rich.segment.segment_length->len(segment.text)
A:rich.segment.max_width->max((get_line_length(line) for line in lines))
A:rich.segment.height->len(lines)
A:rich.segment.iter_segments->iter(segments)
A:rich.segment.last_segment->_Segment(last_segment.text + segment.text, last_segment.style)
A:rich.segment.lines->Segment.set_shape(lines, 50, 4, style=Style.parse('on blue'))
rich.segment.Segment(NamedTuple)
rich.segment.Segment.__repr__(self)->str
rich.segment.Segment.adjust_line_length(cls,line:List['Segment'],length:int,style:Style=None)->List['Segment']
rich.segment.Segment.apply_style(cls,segments:Iterable['Segment'],style:Style=None)->Iterable['Segment']
rich.segment.Segment.get_line_length(cls,line:List['Segment'])->int
rich.segment.Segment.get_shape(cls,lines:List[List['Segment']])->Tuple[int, int]
rich.segment.Segment.line(self)->'Segment'
rich.segment.Segment.set_shape(cls,lines:List[List['Segment']],width:int,height:int=None,style:Style=None)->List[List['Segment']]
rich.segment.Segment.simplify(cls,segments:Iterable['Segment'])->Iterable['Segment']
rich.segment.Segment.split_and_crop_lines(cls,segments:Iterable['Segment'],length:int,style:Style=None)->Iterable[List['Segment']]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_tools.py----------------------------------------
A:rich._tools.T->TypeVar('T')
A:rich._tools.iter_values->iter(values)
A:rich._tools.value->next(iter_values)
A:rich._tools.previous_value->next(iter_values)
A:rich._tools.total_ratio->sum(ratios)
A:rich._tools.distributed->max(minimum, round(ratio * total_remaining / total_ratio))
rich._tools.iter_first(values:Iterable[T])->Iterable[Tuple[bool, T]]
rich._tools.iter_first_last(values:Iterable[T])->Iterable[Tuple[bool, bool, T]]
rich._tools.iter_last(values:Iterable[T])->Iterable[Tuple[bool, T]]
rich._tools.ratio_divide(total:int,ratios:List[int],minimums:List[int]=None)->List[int]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/padding.py----------------------------------------
A:rich.padding.(self.top, self.right, self.bottom, self.left)->self.unpack(pad)
A:rich.padding.(pad_top, pad_right)->cast(Tuple[int, int], pad)
A:rich.padding.(top, right, bottom, left)->cast(Tuple[int, int, int, int], pad)
A:rich.padding.style->console.get_style(self.style)
A:rich.padding.child_options->options.update(width=width - self.left - self.right)
A:rich.padding.lines->segment.Segment.set_shape(lines, child_options.max_width, style=style)
A:rich.padding.blank_line->Segment(' ' * width + '\n', style)
A:rich.padding.new_line->segment.Segment.line()
A:rich.padding.(min_width, max_width)->_render_width.RenderWidth.get(self.renderable, max(1, max_width - extra_width))
A:rich.padding.render_width->RenderWidth(min_width + extra_width, max_width + extra_width)
rich.padding.Padding(self,renderable:'RenderableType',pad:'PaddingDimensions',*,style:Union[str,Style]='none')
rich.padding.Padding.__console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.padding.Padding.__console_width__(self,max_width:int)->'RenderWidth'
rich.padding.Padding.__init__(self,renderable:'RenderableType',pad:'PaddingDimensions',*,style:Union[str,Style]='none')
rich.padding.Padding.__repr__(self)->str
rich.padding.Padding.unpack(pad:'PaddingDimensions')->Tuple[int, int, int, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_emoji_codes.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/errors.py----------------------------------------
rich.errors.ConsoleError(Exception)
rich.errors.MarkupError(ConsoleError)
rich.errors.MissingStyle(StyleError)
rich.errors.NotRenderableError(ConsoleError)
rich.errors.StyleError(Exception)
rich.errors.StyleStackError(ConsoleError)
rich.errors.StyleSyntaxError(ConsoleError)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/tabulate.py----------------------------------------
A:rich.tabulate.table->Table(show_header=False, title=title, box=box.ROUNDED, border_style='blue', padding=0)
rich.tabulate.tabulate_mapping(mapping:Mapping,title:str=None)->Table


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/theme.py----------------------------------------
A:rich.theme.self.background_color->ColorTriplet(*background)
A:rich.theme.self.foreground_color->ColorTriplet(*foreground)
A:rich.theme.self.ansi_colors->Palette(ansi)
rich.theme.Theme(self,background:_ColorTuple,foreground:_ColorTuple,ansi:List[_ColorTuple])
rich.theme.Theme.__init__(self,background:_ColorTuple,foreground:_ColorTuple,ansi:List[_ColorTuple])


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/markup.py----------------------------------------
A:rich.markup.re_tags->re.compile('(\\[\\".*?\\"\\])|(\\[.*?\\])')
A:rich.markup.markup->re_code_sub(repl_code, markup)
A:rich.markup.(escaped_text, tag_text)->match.groups()
A:rich.markup.(start, end)->match.span()
A:rich.markup.text->Text(style=style)
A:rich.markup.style_name->style_stack.pop()
A:rich.markup.style_position->styles[style_name].pop()
A:rich.markup.text_length->len(text)
A:rich.markup.console->Console()
rich.markup._parse(markup:str)->Iterable[Tuple[Optional[str], Optional[str]]]
rich.markup.render(markup:str,style:Union[str,Style]='')->Text


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/default_styles.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_emoji_replace.py----------------------------------------
A:rich._emoji_replace.(emoji_code, emoji_name)->match.groups()
rich._emoji_replace._emoji_replace(text:str,_emoji_sub=re.compile('(:(.*?):)').sub)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/_render_width.py----------------------------------------
A:rich._render_width.minimum->max(0, minimum)
A:rich._render_width.get_console_width->getattr(renderable, '__console_width__', None)
A:rich._render_width.render_width->get_console_width(max_width).with_maximum(max_width)
A:rich._render_width.width->min(max_width, len(text))
A:rich._render_width.text->renderable.rstrip()
rich._render_width.RenderWidth(NamedTuple)
rich._render_width.RenderWidth.get(cls,renderable:'RenderableType',max_width:int)->'RenderWidth'
rich._render_width.RenderWidth.normalize(self)->'RenderWidth'
rich._render_width.RenderWidth.span(self)->int
rich._render_width.RenderWidth.with_maximum(self,width:int)->'RenderWidth'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/emoji.py----------------------------------------
A:rich.emoji.c->Console(markup=False)
A:rich.emoji.e->Emoji('thumbs_up')
rich.emoji.Emoji(self,name:str,style:Union[str,Style]='none')
rich.emoji.Emoji.__console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.emoji.Emoji.__init__(self,name:str,style:Union[str,Style]='none')
rich.emoji.Emoji.__repr__(self)->str
rich.emoji.Emoji.__str__(self)->str
rich.emoji.Emoji.replace(cls,text:str)->str
rich.emoji.NoEmoji(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich0.2.3/lib/python3.9/site-packages/rich/palette.py----------------------------------------
A:rich.palette.red_mean->int((red1 + red2) / 2)
A:rich.palette.(min_index, _min_color)->min(enumerate(self._colors), key=lambda _color: get_color_distance(_color[1]))
rich.palette.Palette(self,colors:Sequence[Tuple[int,int,int]])
rich.palette.Palette.__getitem__(self,number:int)->ColorTriplet
rich.palette.Palette.__init__(self,colors:Sequence[Tuple[int,int,int]])
rich.palette.Palette.hex(self)->List[str]
rich.palette.Palette.match(self,color:Tuple[int,int,int])->int

