
----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/rule.py----------------------------------------
A:rich.rule.title_text->title_text.tabs_to_spaces().tabs_to_spaces()
A:rich.rule.title_text.plain->title_text.tabs_to_spaces().tabs_to_spaces().plain.replace('\n', ' ')
A:rich.rule.rule_text->Text(end=self.end)
A:rich.rule.console->Console()
rich.rule.Rule(self,title:Union[str,Text]='',*,character:str=None,style:Union[str,Style]='rule.line',end:str='\n')
rich.rule.Rule.__init__(self,title:Union[str,Text]='',*,character:str=None,style:Union[str,Style]='rule.line',end:str='\n')
rich.rule.Rule.__repr__(self)->str
rich.rule.Rule.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/__main__.py----------------------------------------
A:rich.__main__.text->Text()
A:rich.__main__.table->Table(show_header=False, pad_edge=False, box=None, expand=True)
A:rich.__main__.color_table->Table(box=None, expand=False, show_header=False, show_edge=False, pad_edge=False, padding=0)
A:rich.__main__.lorem_table->rich.table.Table.grid(padding=1, collapse_padding=True)
A:rich.__main__.example_table->Table(title='Star Wars box office', show_header=True, header_style='bold magenta')
A:rich.__main__.console->Console(file=io.StringIO(), force_terminal=True)
A:rich.__main__.test_card->make_test_card()
A:rich.__main__.console.file->io.StringIO()
A:rich.__main__.start->process_time()
A:rich.__main__.taken->round((process_time() - start) * 1000.0, 1)
rich.__main__.ColorBox(self,start:int=16)
rich.__main__.ColorBox.__init__(self,start:int=16)
rich.__main__.ColorBox.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.__main__.ColorBox.__rich_measure__(self,console:'Console',max_width:int)->Measurement
rich.__main__.make_test_card()->Table


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/jupyter.py----------------------------------------
A:rich.jupyter.console->get_console()
A:rich.jupyter.segments->list(console.render(self, console.options))
A:rich.jupyter.html->_render_segments(segments)
A:rich.jupyter.text->escape(text)
A:rich.jupyter.rule->style.get_html_style(theme)
A:rich.jupyter.code->''.join(fragments)
A:rich.jupyter.jupyter_renderable->JupyterRenderable(html)
rich.jupyter.JupyterMixin
rich.jupyter.JupyterMixin._repr_html_(self)->str
rich.jupyter.JupyterRenderable(self,html:str)
rich.jupyter.JupyterRenderable.__init__(self,html:str)
rich.jupyter.JupyterRenderable._repr_html_(self)->str
rich.jupyter.JupyterRenderable.render(self,rich_renderable:'RenderableType')->str
rich.jupyter._render_segments(segments:Iterable[Segment])->str
rich.jupyter.display(segments:Iterable[Segment])->None
rich.jupyter.print(*args,**kwargs)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_loop.py----------------------------------------
A:rich._loop.T->TypeVar('T')
A:rich._loop.iter_values->iter(values)
A:rich._loop.value->next(iter_values)
A:rich._loop.previous_value->next(iter_values)
rich._loop.loop_first(values:Iterable[T])->Iterable[Tuple[bool, T]]
rich._loop.loop_first_last(values:Iterable[T])->Iterable[Tuple[bool, bool, T]]
rich._loop.loop_last(values:Iterable[T])->Iterable[Tuple[bool, T]]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/__init__.py----------------------------------------
A:rich.__init__._console->Console()
rich.__init__.get_console()->'Console'
rich.__init__.print(*objects:Any,sep='',end='\n',file:IO[str]=None,flush:bool=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/protocol.py----------------------------------------
rich.protocol.is_renderable(test_renderable:Any)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/text.py----------------------------------------
A:rich.text._re_whitespace->re.compile('\\s+$')
A:rich.text.span1->Span(start, min(end, offset), style)
A:rich.text.span2->Span(span1.end, end, style)
A:rich.text.result->self.blank_copy()
A:rich.text.rendered_text->render(text, style, emoji=emoji)
A:rich.text.styled_text->cls(text, justify=justify, overflow=overflow)
A:rich.text.text->strip_control_codes(text)
A:rich.text.self._length->len(new_text)
A:rich.text.copy_self->Text(self.plain, style=self.style, justify=self.justify, overflow=self.overflow, no_wrap=self.no_wrap, end=self.end, tab_size=self.tab_size)
A:rich.text.length->cell_len(self.plain)
A:rich.text.style->Console().get_style(self.style).copy()
A:rich.text.(start, end)->match.span(0)
A:rich.text.re_words->'|'.join((re.escape(word) for word in words))
A:rich.text.self.plain->set_cell_size(self.plain, max_width)
A:rich.text.text_length->len(text)
A:rich.text.whitespace_match->re.compile('\\s+$').search(self.plain)
A:rich.text.whitespace_count->len(whitespace_match.group(0))
A:rich.text.justify->cast('JustifyMethod', self.justify or options.justify or DEFAULT_OVERFLOW)
A:rich.text.overflow->cast('OverflowMethod', self.overflow or options.overflow or DEFAULT_OVERFLOW)
A:rich.text.lines->self.divide(offsets)
A:rich.text.all_lines->Text('\n').join(lines)
A:rich.text.max_text_width->max((cell_len(line) for line in text.splitlines()))
A:rich.text.min_text_width->max((cell_len(word) for word in text.split()))
A:rich.text.null_style->Style()
A:rich.text.enumerated_spans->list(enumerate(self._spans, 1))
A:rich.text.style_map[0]->get_style(self.style)
A:rich.text.style_ids->tuple(sorted(stack))
A:rich.text.cached_style->style_cache.get(style_ids)
A:rich.text.current_style->combine((style_map[_style_id] for _style_id in style_ids))
A:rich.text.new_text->self.blank_copy()
A:rich.text.parts->self.split('\t', include_separator=True)
A:rich.text.offset->len(self)
A:rich.text.separator_length->len(separator)
A:rich.text.line->line.tabs_to_spaces(tab_size).tabs_to_spaces(tab_size)
A:rich.text.line_ranges->list(zip(divide_offsets, divide_offsets[1:]))
A:rich.text.new_lines->line.tabs_to_spaces(tab_size).tabs_to_spaces(tab_size).divide(offsets)
A:rich.text.(span, new_span)->span.split(line_end)
A:rich.text.wrap_justify->cast('JustifyMethod', justify or self.justify or DEFAULT_JUSTIFY)
A:rich.text.wrap_overflow->cast('OverflowMethod', overflow or self.overflow or DEFAULT_OVERFLOW)
A:rich.text.no_wrap->pick_bool(no_wrap, self.no_wrap, False)
A:rich.text.offsets->divide_line(str(line), width, fold=wrap_overflow == 'fold')
A:rich.text.console->Console()
A:rich.text.t->Text('foo bar', justify='left')
A:rich.text.test->Text('Vulnerability CVE-2018-6543 detected')
rich.text.Span(NamedTuple)
rich.text.Span.__bool__(self)->bool
rich.text.Span.__repr__(self)->str
rich.text.Span.move(self,offset:int)->'Span'
rich.text.Span.right_crop(self,offset:int)->'Span'
rich.text.Span.split(self,offset:int)->Tuple['Span', Optional['Span']]
rich.text.Text(self,text:str='',style:Union[str,Style]='',*,justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None,no_wrap:bool=None,end:str='\n',tab_size:Optional[int]=8,spans:List[Span]=None)
rich.text.Text.__add__(self,other:Any)->'Text'
rich.text.Text.__bool__(self)->bool
rich.text.Text.__contains__(self,other:object)->bool
rich.text.Text.__eq__(self,other:object)->bool
rich.text.Text.__init__(self,text:str='',style:Union[str,Style]='',*,justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None,no_wrap:bool=None,end:str='\n',tab_size:Optional[int]=8,spans:List[Span]=None)
rich.text.Text.__len__(self)->int
rich.text.Text.__repr__(self)->str
rich.text.Text.__rich_console__(self,console:'Console',options:'ConsoleOptions')->Iterable[Segment]
rich.text.Text.__rich_measure__(self,console:'Console',max_width:int)->Measurement
rich.text.Text.__str__(self)->str
rich.text.Text._trim_spans(self)->None
rich.text.Text.align(self,align:AlignValues,width:int,character:str='')->None
rich.text.Text.append(self,text:Union['Text',str],style:Union[str,'Style']=None)->'Text'
rich.text.Text.assemble(cls,*parts:Union[str,'Text',Tuple[str,StyleType]],style:Union[str,Style]='',justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None,end:str='\n',tab_size:int=8)->'Text'
rich.text.Text.blank_copy(self)->'Text'
rich.text.Text.copy(self)->'Text'
rich.text.Text.copy_styles(self,text:'Text')->None
rich.text.Text.divide(self,offsets:Iterable[int])->Lines
rich.text.Text.fit(self,width:int)->Lines
rich.text.Text.from_markup(cls,text:str,*,style:Union[str,Style]='',emoji:bool=True,justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None)->'Text'
rich.text.Text.get_style_at_offset(self,console:'Console',offset:int)->Style
rich.text.Text.highlight_regex(self,re_highlight:str,style:Union[GetStyleCallable,StyleType]=None,*,style_prefix:str='')->int
rich.text.Text.highlight_words(self,words:Iterable[str],style:Union[str,Style],*,case_sensitive:bool=True)->int
rich.text.Text.join(self,lines:Iterable['Text'])->'Text'
rich.text.Text.pad(self,count:int,character:str='')->None
rich.text.Text.pad_left(self,count:int,character:str='')->None
rich.text.Text.pad_right(self,count:int,character:str='')->None
rich.text.Text.plain(self)->str
rich.text.Text.plain(self,new_text:str)->None
rich.text.Text.render(self,console:'Console',end:str='')->Iterable['Segment']
rich.text.Text.right_crop(self,amount:int=1)->None
rich.text.Text.rstrip(self)->None
rich.text.Text.rstrip_end(self,size:int)->None
rich.text.Text.set_length(self,new_length:int)->None
rich.text.Text.spans(self)->List[Span]
rich.text.Text.spans(self,spans:List[Span])->None
rich.text.Text.split(self,separator='\n',*,include_separator:bool=False)->Lines
rich.text.Text.styled(cls,text:str,style:StyleType='',*,justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None)->'Text'
rich.text.Text.stylize(self,style:Union[str,Style],start:int=0,end:Optional[int]=None)->None
rich.text.Text.tabs_to_spaces(self,tab_size:int=None)->'Text'
rich.text.Text.truncate(self,max_width:int,*,overflow:Optional['OverflowMethod']=None,pad:bool=False)->None
rich.text.Text.wrap(self,console:'Console',width:int,*,justify:'JustifyMethod'=None,overflow:'OverflowMethod'=None,tab_size:int=8,no_wrap:bool=None)->Lines


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_stack.py----------------------------------------
A:rich._stack.T->TypeVar('T')
rich._stack.Stack(List[T])
rich._stack.Stack.push(self,item:T)->None
rich._stack.Stack.top(self)->T


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/syntax.py----------------------------------------
A:rich.syntax.self._pygments_style_class->get_style_by_name('default')
A:rich.syntax.code->textwrap.dedent(code)
A:rich.syntax.lexer->get_lexer_by_name(lexer_name)
A:rich.syntax.pygments_style->self._pygments_style_class.style_for_token(token_type)
A:rich.syntax.style->self._get_theme_style(Token.Text)
A:rich.syntax.default_style->self._get_default_style()
A:rich.syntax.text->self._highlight(self.lexer_name)
A:rich.syntax.background_color->parse_rgb_hex(self._pygments_style_class.background_color[1:])
A:rich.syntax.new_color->blend_rgb(background_color, foreground_color.triplet, cross_fade=blend)
A:rich.syntax.background_style->Style(bgcolor=self._pygments_style_class.background_color)
A:rich.syntax.number_style->style.Style.chain(background_style, self._get_theme_style(Token.Text), Style(color=self._get_line_numbers_color()))
A:rich.syntax.highlight_number_style->style.Style.chain(background_style, self._get_theme_style(Token.Text), Style(bold=True, color=self._get_line_numbers_color(0.9)))
A:rich.syntax.number_stylehighlight_number_style->Style()
A:rich.syntax.lines->self._highlight(self.lexer_name).split('\n')
A:rich.syntax.line_offset->max(0, start_line - 1)
A:rich.syntax.render_options->options.update(width=code_width)
A:rich.syntax.(background_style, number_style, highlight_number_style)->self._get_number_styles(console)
A:rich.syntax.padding->_Segment(' ' * numbers_column_width + ' ', background_style)
A:rich.syntax.new_line->_Segment('\n')
A:rich.syntax.wrapped_lines->Console(force_terminal=args.force_color, width=args.width).render_lines(line, render_options, style=background_style)
A:rich.syntax.segments->list(line.render(console, end=''))
A:rich.syntax.parser->argparse.ArgumentParser(description='Render syntax to the console with Rich')
A:rich.syntax.args->argparse.ArgumentParser(description='Render syntax to the console with Rich').parse_args()
A:rich.syntax.console->Console(force_terminal=args.force_color, width=args.width)
A:rich.syntax.syntax->Syntax.from_path(args.path, line_numbers=args.line_numbers, word_wrap=args.word_wrap, theme=args.theme)
rich.syntax.Syntax(self,code:str,lexer_name:str,*,theme:Union[str,Type[PygmentsStyle]]=DEFAULT_THEME,dedent:bool=False,line_numbers:bool=False,start_line:int=1,line_range:Tuple[int,int]=None,highlight_lines:Set[int]=None,code_width:Optional[int]=None,tab_size:int=4,word_wrap:bool=False)
rich.syntax.Syntax.__init__(self,code:str,lexer_name:str,*,theme:Union[str,Type[PygmentsStyle]]=DEFAULT_THEME,dedent:bool=False,line_numbers:bool=False,start_line:int=1,line_range:Tuple[int,int]=None,highlight_lines:Set[int]=None,code_width:Optional[int]=None,tab_size:int=4,word_wrap:bool=False)
rich.syntax.Syntax.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.syntax.Syntax.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'
rich.syntax.Syntax._get_default_style(self)->Style
rich.syntax.Syntax._get_line_numbers_color(self,blend:float=0.3)->Color
rich.syntax.Syntax._get_number_styles(self,console:Console)->Tuple[Style, Style, Style]
rich.syntax.Syntax._get_theme_style(self,token_type)->Style
rich.syntax.Syntax._highlight(self,lexer_name:str)->Text
rich.syntax.Syntax._numbers_column_width(self)->int
rich.syntax.Syntax.from_path(cls,path:str,encoding:str='utf-8',theme:Union[str,Type[PygmentsStyle]]=DEFAULT_THEME,dedent:bool=True,line_numbers:bool=False,line_range:Tuple[int,int]=None,start_line:int=1,highlight_lines:Set[int]=None,code_width:Optional[int]=None,tab_size:int=4,word_wrap:bool=False)->'Syntax'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_palettes.py----------------------------------------
A:rich._palettes.STANDARD_PALETTE->Palette([(0, 0, 0), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255)])
A:rich._palettes.EIGHT_BIT_PALETTE->Palette([(0, 0, 0), (128, 0, 0), (0, 128, 0), (128, 128, 0), (0, 0, 128), (128, 0, 128), (0, 128, 128), (192, 192, 192), (128, 128, 128), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255), (0, 0, 0), (0, 0, 95), (0, 0, 135), (0, 0, 175), (0, 0, 215), (0, 0, 255), (0, 95, 0), (0, 95, 95), (0, 95, 135), (0, 95, 175), (0, 95, 215), (0, 95, 255), (0, 135, 0), (0, 135, 95), (0, 135, 135), (0, 135, 175), (0, 135, 215), (0, 135, 255), (0, 175, 0), (0, 175, 95), (0, 175, 135), (0, 175, 175), (0, 175, 215), (0, 175, 255), (0, 215, 0), (0, 215, 95), (0, 215, 135), (0, 215, 175), (0, 215, 215), (0, 215, 255), (0, 255, 0), (0, 255, 95), (0, 255, 135), (0, 255, 175), (0, 255, 215), (0, 255, 255), (95, 0, 0), (95, 0, 95), (95, 0, 135), (95, 0, 175), (95, 0, 215), (95, 0, 255), (95, 95, 0), (95, 95, 95), (95, 95, 135), (95, 95, 175), (95, 95, 215), (95, 95, 255), (95, 135, 0), (95, 135, 95), (95, 135, 135), (95, 135, 175), (95, 135, 215), (95, 135, 255), (95, 175, 0), (95, 175, 95), (95, 175, 135), (95, 175, 175), (95, 175, 215), (95, 175, 255), (95, 215, 0), (95, 215, 95), (95, 215, 135), (95, 215, 175), (95, 215, 215), (95, 215, 255), (95, 255, 0), (95, 255, 95), (95, 255, 135), (95, 255, 175), (95, 255, 215), (95, 255, 255), (135, 0, 0), (135, 0, 95), (135, 0, 135), (135, 0, 175), (135, 0, 215), (135, 0, 255), (135, 95, 0), (135, 95, 95), (135, 95, 135), (135, 95, 175), (135, 95, 215), (135, 95, 255), (135, 135, 0), (135, 135, 95), (135, 135, 135), (135, 135, 175), (135, 135, 215), (135, 135, 255), (135, 175, 0), (135, 175, 95), (135, 175, 135), (135, 175, 175), (135, 175, 215), (135, 175, 255), (135, 215, 0), (135, 215, 95), (135, 215, 135), (135, 215, 175), (135, 215, 215), (135, 215, 255), (135, 255, 0), (135, 255, 95), (135, 255, 135), (135, 255, 175), (135, 255, 215), (135, 255, 255), (175, 0, 0), (175, 0, 95), (175, 0, 135), (175, 0, 175), (175, 0, 215), (175, 0, 255), (175, 95, 0), (175, 95, 95), (175, 95, 135), (175, 95, 175), (175, 95, 215), (175, 95, 255), (175, 135, 0), (175, 135, 95), (175, 135, 135), (175, 135, 175), (175, 135, 215), (175, 135, 255), (175, 175, 0), (175, 175, 95), (175, 175, 135), (175, 175, 175), (175, 175, 215), (175, 175, 255), (175, 215, 0), (175, 215, 95), (175, 215, 135), (175, 215, 175), (175, 215, 215), (175, 215, 255), (175, 255, 0), (175, 255, 95), (175, 255, 135), (175, 255, 175), (175, 255, 215), (175, 255, 255), (215, 0, 0), (215, 0, 95), (215, 0, 135), (215, 0, 175), (215, 0, 215), (215, 0, 255), (215, 95, 0), (215, 95, 95), (215, 95, 135), (215, 95, 175), (215, 95, 215), (215, 95, 255), (215, 135, 0), (215, 135, 95), (215, 135, 135), (215, 135, 175), (215, 135, 215), (215, 135, 255), (215, 175, 0), (215, 175, 95), (215, 175, 135), (215, 175, 175), (215, 175, 215), (215, 175, 255), (215, 215, 0), (215, 215, 95), (215, 215, 135), (215, 215, 175), (215, 215, 215), (215, 215, 255), (215, 255, 0), (215, 255, 95), (215, 255, 135), (215, 255, 175), (215, 255, 215), (215, 255, 255), (255, 0, 0), (255, 0, 95), (255, 0, 135), (255, 0, 175), (255, 0, 215), (255, 0, 255), (255, 95, 0), (255, 95, 95), (255, 95, 135), (255, 95, 175), (255, 95, 215), (255, 95, 255), (255, 135, 0), (255, 135, 95), (255, 135, 135), (255, 135, 175), (255, 135, 215), (255, 135, 255), (255, 175, 0), (255, 175, 95), (255, 175, 135), (255, 175, 175), (255, 175, 215), (255, 175, 255), (255, 215, 0), (255, 215, 95), (255, 215, 135), (255, 215, 175), (255, 215, 215), (255, 215, 255), (255, 255, 0), (255, 255, 95), (255, 255, 135), (255, 255, 175), (255, 255, 215), (255, 255, 255), (8, 8, 8), (18, 18, 18), (28, 28, 28), (38, 38, 38), (48, 48, 48), (58, 58, 58), (68, 68, 68), (78, 78, 78), (88, 88, 88), (98, 98, 98), (108, 108, 108), (118, 118, 118), (128, 128, 128), (138, 138, 138), (148, 148, 148), (158, 158, 158), (168, 168, 168), (178, 178, 178), (188, 188, 188), (198, 198, 198), (208, 208, 208), (218, 218, 218), (228, 228, 228), (238, 238, 238)])


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/columns.py----------------------------------------
A:rich.columns.self.renderables->list(renderables or [])
A:rich.columns.(_top, right, _bottom, left)->padding.Padding.unpack(self.padding)
A:rich.columns.width_padding->max(left, right)
A:rich.columns.column_count->len(renderables)
A:rich.columns.item_count->len(renderables)
A:rich.columns.width_renderables->list(zip(renderable_widths, renderables))
A:rich.columns.table->table.Table.grid(padding=self.padding, collapse_padding=True, pad_edge=False)
A:rich.columns.widths[column_no]->max(widths[column_no], renderable_width)
A:rich.columns.get_renderable->itemgetter(1)
A:rich.columns.console->Console()
A:rich.columns.columns->Columns(files, padding=(0, 1), expand=False, equal=False)
rich.columns.Columns(self,renderables:Iterable[RenderableType]=None,padding:PaddingDimensions=(0,1),*,width:int=None,expand:bool=False,equal:bool=False,column_first:bool=False,right_to_left:bool=False,align:AlignValues=None,title:TextType=None)
rich.columns.Columns.__init__(self,renderables:Iterable[RenderableType]=None,padding:PaddingDimensions=(0,1),*,width:int=None,expand:bool=False,equal:bool=False,column_first:bool=False,right_to_left:bool=False,align:AlignValues=None,title:TextType=None)
rich.columns.Columns.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.columns.Columns.add_renderable(self,renderable:RenderableType)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_ratio.py----------------------------------------
A:rich._ratio.total_ratio->sum(ratios)
A:rich._ratio.distributed->max(minimum, ceil(ratio * total_remaining / total_ratio))
rich._ratio.ratio_distribute(total:int,ratios:List[int],minimums:List[int]=None)->List[int]
rich._ratio.ratio_reduce(total:int,ratios:List[int],maximums:List[int],values:List[int])->List[int]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/terminal_theme.py----------------------------------------
A:rich.terminal_theme.self.background_color->ColorTriplet(*background)
A:rich.terminal_theme.self.foreground_color->ColorTriplet(*foreground)
A:rich.terminal_theme.self.ansi_colors->Palette(normal + (bright or normal))
A:rich.terminal_theme.DEFAULT_TERMINAL_THEME->TerminalTheme((255, 255, 255), (0, 0, 0), [(0, 0, 0), (128, 0, 0), (0, 128, 0), (128, 128, 0), (0, 0, 128), (128, 0, 128), (0, 128, 128), (192, 192, 192)], [(128, 128, 128), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 0, 255), (255, 0, 255), (0, 255, 255), (255, 255, 255)])
rich.terminal_theme.TerminalTheme(self,background:_ColorTuple,foreground:_ColorTuple,normal:List[_ColorTuple],bright:List[_ColorTuple]=None)
rich.terminal_theme.TerminalTheme.__init__(self,background:_ColorTuple,foreground:_ColorTuple,normal:List[_ColorTuple],bright:List[_ColorTuple]=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/highlighter.py----------------------------------------
A:rich.highlighter.highlight_text->text.copy()
A:rich.highlighter.console->Console()
rich.highlighter.Highlighter(self,text:Union[str,Text])
rich.highlighter.Highlighter.__call__(self,text:Union[str,Text])
rich.highlighter.Highlighter.highlight(self,text:Text)->None
rich.highlighter.NullHighlighter(Highlighter)
rich.highlighter.NullHighlighter.highlight(self,text:Text)->None
rich.highlighter.RegexHighlighter(Highlighter)
rich.highlighter.RegexHighlighter.highlight(self,text:Text)->None
rich.highlighter.ReprHighlighter(RegexHighlighter)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/styled.py----------------------------------------
A:rich.styled.style->console.get_style(self.style)
A:rich.styled.rendered_segments->console.render(self.renderable, options)
A:rich.styled.segments->segment.Segment.apply_style(rendered_segments, style)
A:rich.styled.panel->Styled(Panel('hello'), 'on blue')
rich.styled.Styled(self,renderable:'RenderableType',style:'StyleType')
rich.styled.Styled.__init__(self,renderable:'RenderableType',style:'StyleType')
rich.styled.Styled.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.styled.Styled.__rich_measure__(self,console:'Console',max_width:int)->Measurement


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/style.py----------------------------------------
A:rich.style.self._attributes->sum((bold and 1 or 0, dim and 2 or 0, italic and 4 or 0, underline and 8 or 0, blink and 16 or 0, blink2 and 32 or 0, reverse and 64 or 0, conceal and 128 or 0, strike and 256 or 0, underline2 and 512 or 0, frame and 1024 or 0, encircle and 2048 or 0, overline and 4096 or 0))
A:rich.style.self._set_attributes->sum((bold is not None, dim is not None and 2, italic is not None and 4, underline is not None and 8, blink is not None and 16, blink2 is not None and 32, reverse is not None and 64, conceal is not None and 128, strike is not None and 256, underline2 is not None and 512, frame is not None and 1024, encircle is not None and 2048, overline is not None and 4096))
A:rich.style.bold->_Bit(0)
A:rich.style.dim->_Bit(1)
A:rich.style.italic->_Bit(2)
A:rich.style.underline->_Bit(3)
A:rich.style.blink->_Bit(4)
A:rich.style.blink2->_Bit(5)
A:rich.style.reverse->_Bit(6)
A:rich.style.conceal->_Bit(7)
A:rich.style.strike->_Bit(8)
A:rich.style.underline2->_Bit(9)
A:rich.style.frame->_Bit(10)
A:rich.style.encircle->_Bit(11)
A:rich.style.overline->_Bit(12)
A:rich.style.self._ansi->';'.join(sgr)
A:rich.style.words->iter(style_definition.split())
A:rich.style.word->next(words, '')
A:rich.style.attribute->style_attributes.get(word)
A:rich.style.style->self.__new__(Style)
A:rich.style.color->color.Color.from_triplet(blend_rgb(foreground_color, theme.background_color, 0.5))
A:rich.style.theme_color->bgcolor.get_truecolor(theme, foreground=False)
A:rich.style.attrs->self._make_ansi_codes(color_system)
A:rich.style.new_style->self.__new__(Style)
rich.style.Style(self,*,color:Union[Color,str]=None,bgcolor:Union[Color,str]=None,bold:bool=None,dim:bool=None,italic:bool=None,underline:bool=None,blink:bool=None,blink2:bool=None,reverse:bool=None,conceal:bool=None,strike:bool=None,underline2:bool=None,frame:bool=None,encircle:bool=None,overline:bool=None,link:str=None)
rich.style.Style.__add__(self,style:Optional['Style'])->'Style'
rich.style.Style.__bool__(self)->bool
rich.style.Style.__eq__(self,other:Any)->bool
rich.style.Style.__hash__(self)->int
rich.style.Style.__init__(self,*,color:Union[Color,str]=None,bgcolor:Union[Color,str]=None,bold:bool=None,dim:bool=None,italic:bool=None,underline:bool=None,blink:bool=None,blink2:bool=None,reverse:bool=None,conceal:bool=None,strike:bool=None,underline2:bool=None,frame:bool=None,encircle:bool=None,overline:bool=None,link:str=None)
rich.style.Style.__repr__(self)->str
rich.style.Style.__str__(self)->str
rich.style.Style._make_ansi_codes(self,color_system:ColorSystem)->str
rich.style.Style.bgcolor(self)->Optional[Color]
rich.style.Style.chain(self,*styles:'Style')->'Style'
rich.style.Style.color(self)->Optional[Color]
rich.style.Style.combine(self,styles:Iterable['Style'])->'Style'
rich.style.Style.copy(self)->'Style'
rich.style.Style.get_html_style(self,theme:TerminalTheme=None)->str
rich.style.Style.link(self)->Optional[str]
rich.style.Style.link_id(self)->str
rich.style.Style.normalize(cls,style:str)->str
rich.style.Style.parse(cls,style_definition:str)->'Style'
rich.style.Style.pick_first(cls,*values:Optional[StyleType])->StyleType
rich.style.Style.render(self,text:str='',*,color_system:Optional[ColorSystem]=ColorSystem.TRUECOLOR,legacy_windows:bool=False)->str
rich.style.Style.test(self,text:Optional[str]=None)->None
rich.style.StyleStack(self,default_style:'Style')
rich.style.StyleStack.__init__(self,default_style:'Style')
rich.style.StyleStack.__repr__(self)->str
rich.style.StyleStack.current(self)->Style
rich.style.StyleStack.pop(self)->Style
rich.style.StyleStack.push(self,style:Style)->None
rich.style._Bit(self,bit_no:int)
rich.style._Bit.__get__(self,obj:'Style',objtype:Type['Style'])->Optional[bool]
rich.style._Bit.__init__(self,bit_no:int)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/console.py----------------------------------------
A:rich.console.options->replace(self)
A:rich.console._null_highlighter->NullHighlighter()
A:rich.console.self._render->list(self._renderables)
A:rich.console.renderables->hook.process_renderables(renderables)
A:rich.console._windows_console_features->get_windows_console_features()
A:rich.console.self._color_system->self._detect_color_system()
A:rich.console.self._lock->threading.RLock()
A:rich.console.self._log_render->LogRender(show_time=log_time, show_path=log_path, time_format=log_time_format)
A:rich.console.self._record_buffer_lock->threading.RLock()
A:rich.console.self._thread_locals->ConsoleThreadLocals()
A:rich.console.windows_console_features->get_windows_console_features()
A:rich.console.color_term->self._environ.get('COLORTERM', '').strip().lower()
A:rich.console.isatty->getattr(self.file, 'isatty', None)
A:rich.console.(width, height)->shutil.get_terminal_size()
A:rich.console.render_iterable->rich_cast().__rich_console__(self, _options)
A:rich.console.iter_render->iter(render_iterable)
A:rich.console._rendered->segment.Segment.apply_style(_rendered, style)
A:rich.console.lines->list(Segment.split_and_crop_lines(_rendered, render_options.max_width, include_new_lines=False, pad=pad))
A:rich.console.rich_text->Text(_emoji_replace(text) if emoji_enabled else text, justify=justify, overflow=overflow, style=style)
A:rich.console.highlight_text->highlighter(str(rich_text))
A:rich.console.style->self._styles.get(name)
A:rich.console.sep_text->Text(sep, end=end)
A:rich.console.rich_cast->getattr(renderable, '__rich__', None)
A:rich.console.renderable->rich_cast()
A:rich.console.rule->self._styles.get(name).get_html_style(_theme)
A:rich.console.render_options->self.options.update(justify=justify, overflow=overflow, width=width, no_wrap=no_wrap)
A:rich.console.traceback->Traceback(width=width, extra_lines=extra_lines, theme=theme, word_wrap=word_wrap)
A:rich.console.text->escape(text)
A:rich.console.rendered->''.join(output)
A:rich.console.style_number->styles.setdefault(rule, len(styles) + 1)
A:rich.console.stylesheet->'\n'.join(stylesheet_rules)
A:rich.console.rendered_code->render_code_format.format(code=''.join(fragments), stylesheet=stylesheet, foreground=_theme.foreground_color.hex, background=_theme.background_color.hex)
A:rich.console.html->self.export_html(theme=theme, clear=clear, code_format=code_format, inline_styles=inline_styles)
A:rich.console.console->Console()
rich.Console(self,*,color_system:Optional[Literal['auto','standard','256','truecolor','windows']]='auto',force_terminal:bool=False,force_jupyter:bool=False,theme:Theme=None,file:IO[str]=None,width:int=None,height:int=None,tab_size:int=8,record:bool=False,markup:bool=True,emoji:bool=True,highlight:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]',highlighter:Optional['HighlighterType']=ReprHighlighter(),legacy_windows:bool=None,safe_box:bool=True,_environ:Dict[str,str]=None)
rich.Console.__enter__(self)->'Console'
rich.Console.__exit__(self,exc_type,exc_value,traceback)->None
rich.Console.__repr__(self)->str
rich.Console._buffer(self)->List[Segment]
rich.Console._buffer_index(self)->int
rich.Console._buffer_index(self,value:int)->None
rich.Console._check_buffer(self)->None
rich.Console._collect_renderables(self,objects:Iterable[Any],sep:str,end:str,*,justify:JustifyMethod=None,emoji:bool=None,markup:bool=None,highlight:bool=None)->List[ConsoleRenderable]
rich.Console._detect_color_system(self)->Optional[ColorSystem]
rich.Console._enter_buffer(self)->None
rich.Console._exit_buffer(self)->None
rich.Console._render_buffer(self)->str
rich.Console.clear(self,home:bool=True)->None
rich.Console.color_system(self)->Optional[str]
rich.Console.control(self,control_codes:Union['Control',str])->None
rich.Console.encoding(self)->str
rich.Console.export_html(self,*,theme:TerminalTheme=None,clear:bool=True,code_format:str=None,inline_styles:bool=False)->str
rich.Console.export_text(self,*,clear:bool=True,styles:bool=False)->str
rich.Console.get_style(self,name:Union[str,Style],*,default:Union[Style,str]=None)->Style
rich.Console.input(self,prompt:TextType='',*,markup:bool=True,emoji:bool=True,password:bool=False,stream:TextIO=None)->str
rich.Console.is_dumb_terminal(self)->bool
rich.Console.is_terminal(self)->bool
rich.Console.line(self,count:int=1)->None
rich.Console.log(self,*objects:Any,sep='',end='\n',justify:JustifyMethod=None,emoji:bool=None,markup:bool=None,highlight:bool=None,log_locals:bool=False,_stack_offset=1)->None
rich.Console.options(self)->ConsoleOptions
rich.Console.pop_render_hook(self)->None
rich.Console.print(self,*objects:Any,sep='',end='\n',style:Union[str,Style]=None,justify:JustifyMethod=None,overflow:OverflowMethod=None,no_wrap:bool=None,emoji:bool=None,markup:bool=None,highlight:bool=None,width:int=None)->None
rich.Console.print_exception(self,*,width:Optional[int]=88,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)->None
rich.Console.push_render_hook(self,hook:RenderHook)->None
rich.Console.render(self,renderable:RenderableType,options:ConsoleOptions=None)->Iterable[Segment]
rich.Console.render_lines(self,renderable:RenderableType,options:Optional[ConsoleOptions]=None,*,style:Optional[Style]=None,pad:bool=True)->List[List[Segment]]
rich.Console.render_str(self,text:str,*,style:Union[str,Style]='',justify:JustifyMethod=None,overflow:OverflowMethod=None,emoji:bool=None,markup:bool=None,highlighter:HighlighterType=None)->'Text'
rich.Console.rule(self,title:str='',*,character:str='─',style:Union[str,Style]='rule.line')->None
rich.Console.save_html(self,path:str,*,theme:TerminalTheme=None,clear:bool=True,code_format=CONSOLE_HTML_FORMAT,inline_styles:bool=False)->None
rich.Console.save_text(self,path:str,*,clear:bool=True,styles:bool=False)->None
rich.Console.show_cursor(self,show:bool=True)->None
rich.Console.size(self)->ConsoleDimensions
rich.Console.width(self)->int
rich.ConsoleDimensions(NamedTuple)
rich.ConsoleOptions
rich.ConsoleOptions.update(self,width:int=None,min_width:int=None,max_width:int=None,justify:JustifyMethod=None,overflow:OverflowMethod=None,no_wrap:bool=None)->'ConsoleOptions'
rich.ConsoleRenderable(Protocol)
rich.ConsoleRenderable.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.ConsoleThreadLocals(threading.local)
rich.console.Console(self,*,color_system:Optional[Literal['auto','standard','256','truecolor','windows']]='auto',force_terminal:bool=False,force_jupyter:bool=False,theme:Theme=None,file:IO[str]=None,width:int=None,height:int=None,tab_size:int=8,record:bool=False,markup:bool=True,emoji:bool=True,highlight:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]',highlighter:Optional['HighlighterType']=ReprHighlighter(),legacy_windows:bool=None,safe_box:bool=True,_environ:Dict[str,str]=None)
rich.console.Console.__enter__(self)->'Console'
rich.console.Console.__exit__(self,exc_type,exc_value,traceback)->None
rich.console.Console.__init__(self,*,color_system:Optional[Literal['auto','standard','256','truecolor','windows']]='auto',force_terminal:bool=False,force_jupyter:bool=False,theme:Theme=None,file:IO[str]=None,width:int=None,height:int=None,tab_size:int=8,record:bool=False,markup:bool=True,emoji:bool=True,highlight:bool=True,log_time:bool=True,log_path:bool=True,log_time_format:str='[%X]',highlighter:Optional['HighlighterType']=ReprHighlighter(),legacy_windows:bool=None,safe_box:bool=True,_environ:Dict[str,str]=None)
rich.console.Console.__repr__(self)->str
rich.console.Console._buffer(self)->List[Segment]
rich.console.Console._buffer_index(self)->int
rich.console.Console._buffer_index(self,value:int)->None
rich.console.Console._check_buffer(self)->None
rich.console.Console._collect_renderables(self,objects:Iterable[Any],sep:str,end:str,*,justify:JustifyMethod=None,emoji:bool=None,markup:bool=None,highlight:bool=None)->List[ConsoleRenderable]
rich.console.Console._detect_color_system(self)->Optional[ColorSystem]
rich.console.Console._enter_buffer(self)->None
rich.console.Console._exit_buffer(self)->None
rich.console.Console._render_buffer(self)->str
rich.console.Console.clear(self,home:bool=True)->None
rich.console.Console.color_system(self)->Optional[str]
rich.console.Console.control(self,control_codes:Union['Control',str])->None
rich.console.Console.encoding(self)->str
rich.console.Console.export_html(self,*,theme:TerminalTheme=None,clear:bool=True,code_format:str=None,inline_styles:bool=False)->str
rich.console.Console.export_text(self,*,clear:bool=True,styles:bool=False)->str
rich.console.Console.get_style(self,name:Union[str,Style],*,default:Union[Style,str]=None)->Style
rich.console.Console.input(self,prompt:TextType='',*,markup:bool=True,emoji:bool=True,password:bool=False,stream:TextIO=None)->str
rich.console.Console.is_dumb_terminal(self)->bool
rich.console.Console.is_terminal(self)->bool
rich.console.Console.line(self,count:int=1)->None
rich.console.Console.log(self,*objects:Any,sep='',end='\n',justify:JustifyMethod=None,emoji:bool=None,markup:bool=None,highlight:bool=None,log_locals:bool=False,_stack_offset=1)->None
rich.console.Console.options(self)->ConsoleOptions
rich.console.Console.pop_render_hook(self)->None
rich.console.Console.print(self,*objects:Any,sep='',end='\n',style:Union[str,Style]=None,justify:JustifyMethod=None,overflow:OverflowMethod=None,no_wrap:bool=None,emoji:bool=None,markup:bool=None,highlight:bool=None,width:int=None)->None
rich.console.Console.print_exception(self,*,width:Optional[int]=88,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)->None
rich.console.Console.push_render_hook(self,hook:RenderHook)->None
rich.console.Console.render(self,renderable:RenderableType,options:ConsoleOptions=None)->Iterable[Segment]
rich.console.Console.render_lines(self,renderable:RenderableType,options:Optional[ConsoleOptions]=None,*,style:Optional[Style]=None,pad:bool=True)->List[List[Segment]]
rich.console.Console.render_str(self,text:str,*,style:Union[str,Style]='',justify:JustifyMethod=None,overflow:OverflowMethod=None,emoji:bool=None,markup:bool=None,highlighter:HighlighterType=None)->'Text'
rich.console.Console.rule(self,title:str='',*,character:str='─',style:Union[str,Style]='rule.line')->None
rich.console.Console.save_html(self,path:str,*,theme:TerminalTheme=None,clear:bool=True,code_format=CONSOLE_HTML_FORMAT,inline_styles:bool=False)->None
rich.console.Console.save_text(self,path:str,*,clear:bool=True,styles:bool=False)->None
rich.console.Console.show_cursor(self,show:bool=True)->None
rich.console.Console.size(self)->ConsoleDimensions
rich.console.Console.width(self)->int
rich.console.ConsoleDimensions(NamedTuple)
rich.console.ConsoleOptions
rich.console.ConsoleOptions.update(self,width:int=None,min_width:int=None,max_width:int=None,justify:JustifyMethod=None,overflow:OverflowMethod=None,no_wrap:bool=None)->'ConsoleOptions'
rich.console.ConsoleRenderable(Protocol)
rich.console.ConsoleRenderable.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.console.ConsoleThreadLocals(threading.local)
rich.console.RenderGroup(self,*renderables:RenderableType,fit:bool=True)
rich.console.RenderGroup.__init__(self,*renderables:RenderableType,fit:bool=True)
rich.console.RenderGroup.__rich_console__(self,console:'Console',options:'ConsoleOptions')->RenderResult
rich.console.RenderGroup.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'
rich.console.RenderGroup.renderables(self)->List['RenderableType']
rich.console.RenderHook(ABC)
rich.console.RenderHook.process_renderables(self,renderables:List[ConsoleRenderable])->List[ConsoleRenderable]
rich.console.RichCast(Protocol)
rich.console.RichCast.__rich__(self)->Union['ConsoleRenderable', str]
rich.console._is_jupyter()->bool
rich.console.detect_legacy_windows()->bool
rich.console.get_windows_console_features()->'WindowsConsoleFeatures'
rich.console.render_group(fit:bool=False)->Callable


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/color.py----------------------------------------
A:rich.color.RE_COLOR->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE)
A:rich.color.attrs->self.get_ansi_codes(foreground=True)
A:rich.color.color->ColorTriplet(int(hex_color[0:2], 16), int(hex_color[2:4], 16), int(hex_color[4:6], 16))
A:rich.color.named_color_number->ANSI_COLOR_NAMES.get(color)
A:rich.color.color_match->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE).match(color)
A:rich.color.(color_24, color_8, color_rgb)->re.compile('^\n\\#([0-9a-f]{6})$|\n([0-9]{1,3})$|\nrgb\\(([\\d\\s,]+)\\)$\n', re.VERBOSE).match(color).groups()
A:rich.color.number->int(color_8)
A:rich.color.triplet->ColorTriplet(*EIGHT_BIT_PALETTE[self.number])
A:rich.color.components->color_rgb.split(',')
A:rich.color.(_h, l, s)->rgb_to_hls(red, green, blue)
A:rich.color.gray->round(l * 25.0)
A:rich.color.color_number->_palettes.STANDARD_PALETTE.match(triplet)
A:rich.color.new_color->ColorTriplet(int(r1 + (r2 - r1) * cross_fade), int(g1 + (g2 - g1) * cross_fade), int(b1 + (b2 - b1) * cross_fade))
A:rich.color.console->Console()
A:rich.color.table->Table(show_footer=False, show_edge=True)
A:rich.color.colors->sorted(((v, k) for (k, v) in ANSI_COLOR_NAMES.items()))
A:rich.color.color_cell->Text(' ' * 10, style=f'on {name}')
rich.color.Color(NamedTuple)
rich.color.Color.__repr__(self)->str
rich.color.Color.__str__(self)->str
rich.color.Color.default(cls)->'Color'
rich.color.Color.downgrade(self,system:ColorSystem)->'Color'
rich.color.Color.from_triplet(cls,triplet:'ColorTriplet')->'Color'
rich.color.Color.get_ansi_codes(self,foreground:bool=True)->Tuple[str, ...]
rich.color.Color.get_truecolor(self,theme:'TerminalTheme'=None,foreground=True)->ColorTriplet
rich.color.Color.parse(cls,color:str)->'Color'
rich.color.Color.system(self)->ColorSystem
rich.color.ColorParseError(Exception)
rich.color.ColorSystem(IntEnum)
rich.color.ColorType(IntEnum)
rich.color.blend_rgb(color1:ColorTriplet,color2:ColorTriplet,cross_fade:float=0.5)->ColorTriplet
rich.color.parse_rgb_hex(hex_color:str)->ColorTriplet


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/scope.py----------------------------------------
A:rich.scope.highlighter->ReprHighlighter()
A:rich.scope.items_table->table.Table.grid(padding=(0, 1))
A:rich.scope.key_text->text.Text.assemble((key, 'scope.key.special' if key.startswith('__') else 'scope.key'), (' =', 'scope.equals'))
rich.scope.render_scope(scope:Mapping,*,title:str=None,sort_keys:bool=True)->'ConsoleRenderable'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/pretty.py----------------------------------------
A:rich.pretty.pretty_str->pretty_str.replace('\r', '').replace('\r', '')
A:rich.pretty.pretty_text->self.highlighter(pretty_str)
A:rich.pretty.text->Text(pretty_str)
A:rich.pretty.measurement->measure.Measurement.get(console, text, max_width)
rich.pretty.Pretty(self,_object:Any,highlighter:'HighlighterType'=None)
rich.pretty.Pretty.__init__(self,_object:Any,highlighter:'HighlighterType'=None)
rich.pretty.Pretty.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.pretty.Pretty.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_log_render.py----------------------------------------
A:rich._log_render.output->table.Table.grid(padding=(0, 1))
A:rich._log_render.log_time->datetime.datetime.now()
A:rich._log_render.log_time_display->datetime.datetime.now().strftime(time_format or self.time_format)
A:rich._log_render.path_text->Text()
rich._log_render.LogRender(self,show_time:bool=True,show_level:bool=False,show_path:bool=True,time_format:str='[%x%X]')
rich._log_render.LogRender.__init__(self,show_time:bool=True,show_level:bool=False,show_path:bool=True,time_format:str='[%x%X]')


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/panel.py----------------------------------------
A:rich.panel._padding->padding.Padding.unpack(self.padding)
A:rich.panel.style->console.get_style(self.style)
A:rich.panel.child_options->options.update(width=child_width)
A:rich.panel.lines->console.render_lines(renderable, child_options, style=style)
A:rich.panel.line_start->Segment(box.mid_left, border_style)
A:rich.panel.line_end->Segment(f'{box.mid_right}', border_style)
A:rich.panel.new_line->segment.Segment.line()
A:rich.panel.title_text.plain->title_text.tabs_to_spaces().plain.replace('\n', ' ')
A:rich.panel.title_text->title_text.tabs_to_spaces().tabs_to_spaces()
A:rich.panel.c->Console()
A:rich.panel.p->Panel(Panel.fit(Text.from_markup('[bold magenta]Hello World!'), box=ROUNDED, safe_box=True, style='on red'), title='[b]Hello, World', box=DOUBLE)
rich.panel.Panel(self,renderable:'RenderableType',box:Box=ROUNDED,*,title:TextType=None,title_align:AlignValues='center',safe_box:Optional[bool]=None,expand:bool=True,style:StyleType='none',border_style:StyleType='none',width:Optional[int]=None,padding:PaddingDimensions=0)
rich.panel.Panel.__init__(self,renderable:'RenderableType',box:Box=ROUNDED,*,title:TextType=None,title_align:AlignValues='center',safe_box:Optional[bool]=None,expand:bool=True,style:StyleType='none',border_style:StyleType='none',width:Optional[int]=None,padding:PaddingDimensions=0)
rich.panel.Panel.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.panel.Panel.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'
rich.panel.Panel.fit(cls,renderable:'RenderableType',box:Box=ROUNDED,*,title:TextType=None,title_align:AlignValues='center',safe_box:Optional[bool]=None,style:StyleType='none',border_style:StyleType='none',width:Optional[int]=None,padding:PaddingDimensions=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/measure.py----------------------------------------
A:rich.measure.minimum->min(max(0, minimum), maximum)
A:rich.measure.renderable->getattr(renderable, '__rich__', renderable)
A:rich.measure.get_console_width->getattr(renderable, '__rich_measure__', None)
A:rich.measure.render_width->get_console_width(console, _max_width).normalize().with_maximum(_max_width)
A:rich.measure.measured_width->Measurement(max(measurements, key=itemgetter(0)).minimum, max(measurements, key=itemgetter(1)).maximum)
rich.measure.Measurement(NamedTuple)
rich.measure.Measurement.get(cls,console:'Console',renderable:'RenderableType',max_width:int=None)->'Measurement'
rich.measure.Measurement.normalize(self)->'Measurement'
rich.measure.Measurement.span(self)->int
rich.measure.Measurement.with_maximum(self,width:int)->'Measurement'
rich.measure.measure_renderables(console:'Console',renderables:Iterable['RenderableType'],max_width:int)->'Measurement'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/table.py----------------------------------------
A:rich.table.self._padding->padding.Padding.unpack(padding)
A:rich.table.self.row_styles->list(row_styles or [])
A:rich.table.max_width->min(self.width, max_width)
A:rich.table.column->Column(index)
A:rich.table.widths->ratio_reduce(excess_width, ratios, max_reduce, widths)
A:rich.table.render_options->options.update(width=width, justify=column.justify, no_wrap=column.no_wrap, overflow=column.overflow)
A:rich.table.flex_widths->ratio_distribute(flexible_width, ratios, flex_minimum)
A:rich.table.iter_flex_widths->iter(flex_widths)
A:rich.table.table_width->sum(widths)
A:rich.table.pad_widths->ratio_distribute(max_width - table_width, widths)
A:rich.table.total_width->sum(widths)
A:rich.table.max_column->max((width for (width, allow_wrap) in zip(widths, wrapable) if allow_wrap))
A:rich.table.second_max_column->max((width if allow_wrap and width != max_column else 0 for (width, allow_wrap) in zip(widths, wrapable)))
A:rich.table.any_padding->any(padding)
A:rich.table.left->max(0, left - right)
A:rich.table.bottom->max(0, top - bottom)
A:rich.table._padding->Padding(renderable, (top, right, bottom, left))
A:rich.table.pad_left->max(0, pad_left - pad_right)
A:rich.table.padding_width->self._get_padding_width(column.index)
A:rich.table.(_min, _max)->get_render_width(console, cell.renderable, max_width)
A:rich.table.table_style->console.get_style(self.style or '')
A:rich.table.new_line->segment.Segment.line()
A:rich.table.row_style->get_style(get_row_style(index - 1 if show_header else index))
A:rich.table.lines->console.render_lines(cell.renderable, render_options, style=cell_style)
A:rich.table.max_height->max(max_height, len(lines))
A:rich.table.c->Console(width=width)
A:rich.table.table->Table(show_lines=False, row_styles=['red', 'green'], expand=False, show_header=True, show_footer=False, show_edge=True)
rich.table.Column
rich.table.Column.cells(self)->Iterable['RenderableType']
rich.table.Column.flexible(self)->bool
rich.table.Table(self,*headers:Union[Column,str],title:TextType=None,caption:TextType=None,width:int=None,box:Optional[box.Box]=box.HEAVY_HEAD,safe_box:Optional[bool]=None,padding:PaddingDimensions=(0,1),collapse_padding:bool=False,pad_edge:bool=True,expand:bool=False,show_header:bool=True,show_footer:bool=False,show_edge:bool=True,show_lines:bool=False,leading:int=0,style:StyleType='none',row_styles:Iterable[StyleType]=None,header_style:StyleType=None,footer_style:StyleType=None,border_style:StyleType=None,title_style:StyleType=None,caption_style:StyleType=None)
rich.table.Table.__init__(self,*headers:Union[Column,str],title:TextType=None,caption:TextType=None,width:int=None,box:Optional[box.Box]=box.HEAVY_HEAD,safe_box:Optional[bool]=None,padding:PaddingDimensions=(0,1),collapse_padding:bool=False,pad_edge:bool=True,expand:bool=False,show_header:bool=True,show_footer:bool=False,show_edge:bool=True,show_lines:bool=False,leading:int=0,style:StyleType='none',row_styles:Iterable[StyleType]=None,header_style:StyleType=None,footer_style:StyleType=None,border_style:StyleType=None,title_style:StyleType=None,caption_style:StyleType=None)
rich.table.Table.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.table.Table.__rich_measure__(self,console:'Console',max_width:int)->Measurement
rich.table.Table._calculate_column_widths(self,console:'Console',max_width:int)->List[int]
rich.table.Table._collapse_widths(cls,widths:List[int],wrapable:List[bool],max_width:int)->List[int]
rich.table.Table._extra_width(self)->int
rich.table.Table._get_cells(self,column_index:int,column:Column)->Iterable[_Cell]
rich.table.Table._get_padding_width(self,column_index:int)->int
rich.table.Table._measure_column(self,console:'Console',column:Column,max_width:int)->Measurement
rich.table.Table._render(self,console:'Console',options:'ConsoleOptions',widths:List[int])->'RenderResult'
rich.table.Table.add_column(self,header:'RenderableType'='',footer:'RenderableType'='',*,header_style:StyleType=None,footer_style:StyleType=None,style:StyleType=None,justify:'JustifyMethod'='left',overflow:'OverflowMethod'='ellipsis',width:int=None,ratio:int=None,no_wrap:bool=False)->None
rich.table.Table.add_row(self,*renderables:Optional['RenderableType'],style:StyleType=None)->None
rich.table.Table.expand(self)->int
rich.table.Table.expand(self,expand:bool)->None
rich.table.Table.get_row_style(self,index:int)->StyleType
rich.table.Table.grid(cls,padding:PaddingDimensions=0,collapse_padding:bool=True,pad_edge:bool=False,expand:bool=False)->'Table'
rich.table.Table.padding(self)->Tuple[int, int, int, int]
rich.table.Table.padding(self,padding:PaddingDimensions)->'Table'
rich.table.Table.row_count(self)->int
rich.table._Cell(NamedTuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_wrap.py----------------------------------------
A:rich._wrap.re_word->re.compile('\\s*\\S+\\s*')
A:rich._wrap.word_match->re.compile('\\s*\\S+\\s*').match(text, end)
A:rich._wrap.(start, end)->re.compile('\\s*\\S+\\s*').match(text, end).span()
A:rich._wrap.word->re.compile('\\s*\\S+\\s*').match(text, end).group(0)
A:rich._wrap.word_length->_cell_len(word.rstrip())
A:rich._wrap.line_position->_cell_len(word)
A:rich._wrap.console->Console(width=10)
rich._wrap.divide_line(text:str,width:int,fold:bool=True)->List[int]
rich._wrap.words(text:str)->Iterable[Tuple[int, int, str]]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/align.py----------------------------------------
A:rich.align.rendered->Console().render(Constrain(self.renderable, width=self.width), options)
A:rich.align.lines->segment.Segment.set_shape(lines, width, height)
A:rich.align.(width, height)->segment.Segment.get_shape(lines)
A:rich.align.new_line->segment.Segment.line()
A:rich.align.pad->Segment(' ' * excess_space)
A:rich.align.iter_segments->segment.Segment.apply_style(iter_segments, style)
A:rich.align.style->Console().get_style(self.style)
A:rich.align.measurement->measure.Measurement.get(console, self.renderable, max_width)
A:rich.align.console->Console()
rich.align.Align(self,renderable:'RenderableType',align:AlignValues,style:StyleType=None,*,pad:bool=True,width:int=None)
rich.align.Align.__init__(self,renderable:'RenderableType',align:AlignValues,style:StyleType=None,*,pad:bool=True,width:int=None)
rich.align.Align.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.align.Align.__rich_measure__(self,console:'Console',max_width:int)->Measurement
rich.align.Align.center(cls,renderable:'RenderableType',style:StyleType=None,*,pad:bool=True,width:int=None)->'Align'
rich.align.Align.left(cls,renderable:'RenderableType',style:StyleType=None,*,pad:bool=True,width:int=None)->'Align'
rich.align.Align.right(cls,renderable:'RenderableType',style:StyleType=None,*,pad:bool=True,width:int=None)->'Align'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/logging.py----------------------------------------
A:rich.logging.self._log_render->LogRender(show_level=True, show_path=show_path)
A:rich.logging.message->self.format(record)
A:rich.logging.log_time->datetime.datetime.fromtimestamp(record.created)
A:rich.logging.level->Text()
A:rich.logging.message_text->self.highlighter(message_text)
A:rich.logging.log->logging.getLogger('rich')
rich.logging.RichHandler(self,level:int=logging.NOTSET,console:Console=None,*,show_path:bool=True,enable_link_path:bool=True,highlighter:Highlighter=None,markup:bool=False)
rich.logging.RichHandler.__init__(self,level:int=logging.NOTSET,console:Console=None,*,show_path:bool=True,enable_link_path:bool=True,highlighter:Highlighter=None,markup:bool=False)
rich.logging.RichHandler.emit(self,record:LogRecord)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_pick.py----------------------------------------
rich._pick.pick_bool(*values:Optional[bool])->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/box.py----------------------------------------
A:rich.box.(line1, line2, line3, line4, line5, line6, line7, line8)->box.splitlines()
A:rich.box.(self.top_left, self.top, self.top_divider, self.top_right)->iter(line1)
A:rich.box.(self.head_left, _, self.head_vertical, self.head_right)->iter(line2)
A:rich.box.(self.head_row_left, self.head_row_horizontal, self.head_row_cross, self.head_row_right)->iter(line3)
A:rich.box.(self.mid_left, _, self.mid_vertical, self.mid_right)->iter(line4)
A:rich.box.(self.row_left, self.row_horizontal, self.row_cross, self.row_right)->iter(line5)
A:rich.box.(self.foot_row_left, self.foot_row_horizontal, self.foot_row_cross, self.foot_row_right)->iter(line6)
A:rich.box.(self.foot_left, _, self.foot_vertical, self.foot_right)->iter(line7)
A:rich.box.(self.bottom_left, self.bottom, self.bottom_divider, self.bottom_right)->iter(line8)
A:rich.box.console->Console(record=True)
A:rich.box.columns->Columns(expand=True, padding=2)
A:rich.box.table->Table(show_footer=True, style='dim', border_style='not dim', expand=True)
A:rich.box.table.box->getattr(box, box_name)
A:rich.box.table.title->Text(f'box.{box_name}', style='magenta')
rich.box.Box(self,box:str)
rich.box.Box.__init__(self,box:str)
rich.box.Box.__repr__(self)->str
rich.box.Box.__str__(self)->str
rich.box.Box.get_bottom(self,widths:Iterable[int])->str
rich.box.Box.get_row(self,widths:Iterable[int],level:Literal['head','row','foot','mid']='row',edge:bool=True)->str
rich.box.Box.get_top(self,widths:Iterable[int])->str
rich.box.get_safe_box(box:Optional[Box],legacy_windows:bool)->Optional[Box]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_lru_cache.py----------------------------------------
A:rich._lru_cache.CacheKey->TypeVar('CacheKey')
A:rich._lru_cache.CacheValue->TypeVar('CacheValue')
rich._lru_cache.LRUCache(self,cache_size:int)
rich._lru_cache.LRUCache.__getitem__(self:Dict[CacheKey,CacheValue],key:CacheKey)->CacheValue
rich._lru_cache.LRUCache.__init__(self,cache_size:int)
rich._lru_cache.LRUCache.__setitem__(self,key:CacheKey,value:CacheValue)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/color_triplet.py----------------------------------------
rich.color_triplet.ColorTriplet(NamedTuple)
rich.color_triplet.ColorTriplet.hex(self)->str
rich.color_triplet.ColorTriplet.normalized(self)->Tuple[float, float, float]
rich.color_triplet.ColorTriplet.rgb(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/themes.py----------------------------------------
A:rich.themes.DEFAULT->Theme(DEFAULT_STYLES)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/constrain.py----------------------------------------
A:rich.constrain.child_options->options.update(width=min(self.width, options.max_width))
A:rich.constrain.width->min(self.width, max_width)
rich.constrain.Constrain(self,renderable:'RenderableType',width:Optional[int]=80)
rich.constrain.Constrain.__init__(self,renderable:'RenderableType',width:Optional[int]=80)
rich.constrain.Constrain.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.constrain.Constrain.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/markdown.py----------------------------------------
A:rich.markdown.self.style->MarkdownContext(console, options, style).enter_style(self.style_name)
A:rich.markdown.self.text->Text(justify='left')
A:rich.markdown.heading->cls(node.level)
A:rich.markdown.code->str(self.text).rstrip()
A:rich.markdown.syntax->Panel(Syntax(code, self.lexer_name, theme=self.theme), style='dim', box=box.SQUARE)
A:rich.markdown.render_options->options.update(width=options.max_width - number_width)
A:rich.markdown.lines->Console(force_terminal=args.force_color, width=args.width).render_lines(self.elements, render_options, style=self.style)
A:rich.markdown.new_line->Segment('\n')
A:rich.markdown.padding->Segment(' ' * number_width, number_style)
A:rich.markdown.style->Console(force_terminal=args.force_color, width=args.width).get_style(self.style, default='none')
A:rich.markdown.bullet_style->Console(force_terminal=args.force_color, width=args.width).get_style('markdown.item.bullet', default='none')
A:rich.markdown.bullet->Segment(' • ', bullet_style)
A:rich.markdown.number_style->Console(force_terminal=args.force_color, width=args.width).get_style('markdown.item.number', default='none')
A:rich.markdown.numeral->Segment(f'{number}'.rjust(number_width - 1) + ' ', number_style)
A:rich.markdown.link_style->Console(force_terminal=args.force_color, width=args.width).get_style('markdown.link', default='none')
A:rich.markdown.parser->argparse.ArgumentParser(description='Render Markdown to the console with Rich')
A:rich.markdown.self.parsed->argparse.ArgumentParser(description='Render Markdown to the console with Rich').parse(markup)
A:rich.markdown.context->MarkdownContext(console, options, style)
A:rich.markdown.nodes->self.parsed.walker()
A:rich.markdown.element->element_class.create(self, current)
A:rich.markdown.args->argparse.ArgumentParser(description='Render Markdown to the console with Rich').parse_args()
A:rich.markdown.markdown->Markdown(markdown_file.read(), justify='full' if args.justify else 'left', code_theme=args.code_theme, hyperlinks=args.hyperlinks)
A:rich.markdown.console->Console(force_terminal=args.force_color, width=args.width)
rich.markdown.BlockQuote(self)
rich.markdown.BlockQuote.__init__(self)
rich.markdown.BlockQuote.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.BlockQuote.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.CodeBlock(self,lexer_name:str,theme:str)
rich.markdown.CodeBlock.__init__(self,lexer_name:str,theme:str)
rich.markdown.CodeBlock.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.CodeBlock.create(cls,markdown:'Markdown',node:Any)->'CodeBlock'
rich.markdown.Heading(self,level:int)
rich.markdown.Heading.__init__(self,level:int)
rich.markdown.Heading.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.Heading.create(cls,markdown:'Markdown',node:Any)->'Heading'
rich.markdown.Heading.on_enter(self,context:'MarkdownContext')->None
rich.markdown.HorizontalRule(MarkdownElement)
rich.markdown.HorizontalRule.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ImageItem(self,destination:str,hyperlinks:bool)
rich.markdown.ImageItem.__init__(self,destination:str,hyperlinks:bool)
rich.markdown.ImageItem.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ImageItem.create(cls,markdown:'Markdown',node:Any)->'MarkdownElement'
rich.markdown.ImageItem.on_enter(self,context:'MarkdownContext')->None
rich.markdown.ListElement(self,list_type:str,list_start:Optional[int])
rich.markdown.ListElement.__init__(self,list_type:str,list_start:Optional[int])
rich.markdown.ListElement.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ListElement.create(cls,markdown:'Markdown',node:Any)->'ListElement'
rich.markdown.ListElement.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.ListItem(self)
rich.markdown.ListItem.__init__(self)
rich.markdown.ListItem.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.ListItem.render_bullet(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.ListItem.render_number(self,console:Console,options:ConsoleOptions,number:int,last_number:int)->RenderResult
rich.markdown.Markdown(self,markup:str,code_theme:str='monokai',justify:JustifyMethod=None,style:Union[str,Style]='none',hyperlinks:bool=True)
rich.markdown.Markdown.__init__(self,markup:str,code_theme:str='monokai',justify:JustifyMethod=None,style:Union[str,Style]='none',hyperlinks:bool=True)
rich.markdown.Markdown.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.MarkdownContext(self,console:Console,options:ConsoleOptions,style:Style)
rich.markdown.MarkdownContext.__init__(self,console:Console,options:ConsoleOptions,style:Style)
rich.markdown.MarkdownContext.current_style(self)->Style
rich.markdown.MarkdownContext.enter_style(self,style_name:Union[str,Style])->Style
rich.markdown.MarkdownContext.leave_style(self)->Style
rich.markdown.MarkdownContext.on_text(self,text:str)->None
rich.markdown.MarkdownElement
rich.markdown.MarkdownElement.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.markdown.MarkdownElement.create(cls,markdown:'Markdown',node:Any)->'MarkdownElement'
rich.markdown.MarkdownElement.on_child_close(self,context:'MarkdownContext',child:'MarkdownElement')->bool
rich.markdown.MarkdownElement.on_enter(self,context:'MarkdownContext')
rich.markdown.MarkdownElement.on_leave(self,context:'MarkdownContext')->None
rich.markdown.MarkdownElement.on_text(self,context:'MarkdownContext',text:str)->None
rich.markdown.Paragraph(self,justify:JustifyMethod)
rich.markdown.Paragraph.__init__(self,justify:JustifyMethod)
rich.markdown.Paragraph.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.markdown.Paragraph.create(cls,markdown:'Markdown',node)->'Paragraph'
rich.markdown.TextElement(MarkdownElement)
rich.markdown.TextElement.on_enter(self,context:'MarkdownContext')->None
rich.markdown.TextElement.on_leave(self,context:'MarkdownContext')->None
rich.markdown.TextElement.on_text(self,context:'MarkdownContext',text:str)->None
rich.markdown.UnknownElement(MarkdownElement)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/containers.py----------------------------------------
A:rich.containers.T->TypeVar('T')
A:rich.containers._min->max((dimension.minimum for dimension in dimensions))
A:rich.containers._max->max((dimension.maximum for dimension in dimensions))
A:rich.containers.words->line.split(' ')
A:rich.containers.words_size->sum((cell_len(word.plain) for word in words))
A:rich.containers.space_style->Style()
A:rich.containers.style->word.get_style_at_offset(console, -1)
A:rich.containers.next_style->next_word.get_style_at_offset(console, 0)
A:rich.containers.self[line_index]->Text('').join(tokens)
rich.containers.Lines(self,lines:Iterable['Text']=())
rich.containers.Lines.__getitem__(self,index)
rich.containers.Lines.__init__(self,lines:Iterable['Text']=())
rich.containers.Lines.__iter__(self)->Iterator['Text']
rich.containers.Lines.__len__(self)->int
rich.containers.Lines.__repr__(self)->str
rich.containers.Lines.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.containers.Lines.__setitem__(self,index:int,value:'Text')->'Lines'
rich.containers.Lines.append(self,line:'Text')->None
rich.containers.Lines.extend(self,lines:Iterable['Text'])->None
rich.containers.Lines.justify(self,console:'Console',width:int,justify:'JustifyMethod'='left',overflow:'OverflowMethod'='fold')->None
rich.containers.Renderables(self,renderables:Iterable['RenderableType']=None)
rich.containers.Renderables.__init__(self,renderables:Iterable['RenderableType']=None)
rich.containers.Renderables.__iter__(self)->Iterable['RenderableType']
rich.containers.Renderables.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.containers.Renderables.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'
rich.containers.Renderables.append(self,renderable:'RenderableType')->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/segment.py----------------------------------------
A:rich.segment.(_text, new_line, text)->set_cell_size(text, length - line_length).partition('\n')
A:rich.segment.new_line_segment->cls('\n')
A:rich.segment.cropped_line->adjust_line_length(line, length, style=style, pad=pad)
A:rich.segment.line_length->sum((segment.cell_length for segment in line))
A:rich.segment.text->set_cell_size(text, length - line_length)
A:rich.segment.height->len(lines)
A:rich.segment.iter_segments->iter(segments)
A:rich.segment.last_segment->_Segment(last_segment.text + segment.text, last_segment.style)
A:rich.segment.lines->Segment.set_shape(lines, 50, 4, style=Style.parse('on blue'))
rich.segment.Segment(NamedTuple)
rich.segment.Segment.__bool__(self)->bool
rich.segment.Segment.__repr__(self)->str
rich.segment.Segment.adjust_line_length(cls,line:List['Segment'],length:int,style:Style=None,pad:bool=True)->List['Segment']
rich.segment.Segment.apply_style(cls,segments:Iterable['Segment'],style:Style=None)->Iterable['Segment']
rich.segment.Segment.cell_length(self)->int
rich.segment.Segment.control(cls,text:str)->'Segment'
rich.segment.Segment.filter_control(cls,segments:Iterable['Segment'],is_control=False)->Iterable['Segment']
rich.segment.Segment.get_line_length(cls,line:List['Segment'])->int
rich.segment.Segment.get_shape(cls,lines:List[List['Segment']])->Tuple[int, int]
rich.segment.Segment.line(cls)->'Segment'
rich.segment.Segment.set_shape(cls,lines:List[List['Segment']],width:int,height:int=None,style:Style=None)->List[List['Segment']]
rich.segment.Segment.simplify(cls,segments:Iterable['Segment'])->Iterable['Segment']
rich.segment.Segment.split_and_crop_lines(cls,segments:Iterable['Segment'],length:int,style:Style=None,pad:bool=True,include_new_lines:bool=True)->Iterable[List['Segment']]
rich.segment.Segment.split_lines(cls,segments:Iterable['Segment'])->Iterable[List['Segment']]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/bar.py----------------------------------------
A:rich.bar.completed->min(self.total, max(0, self.completed))
A:rich.bar.color->blend_rgb(fore_color, back_color, cross_fade=fade)
A:rich.bar.fore_style->Console().get_style(self.pulse_style, default='white')
A:rich.bar.back_style->Console().get_style(self.style, default='black')
A:rich.bar.pulse_segments->self._get_pulse_segments(fore_style, back_style, console.color_system, console.legacy_windows)
A:rich.bar.segment_count->len(pulse_segments)
A:rich.bar.width->min(self.width or options.max_width, options.max_width)
A:rich.bar.style->Console().get_style(self.style)
A:rich.bar.complete_style->Console().get_style(self.complete_style if self.completed < self.total else self.finished_style)
A:rich.bar.console->Console()
A:rich.bar.bar->Bar(width=50, total=100)
rich.bar.Bar(self,total:float=100,completed:float=0,width:int=None,pulse:bool=False,style:StyleType='bar.back',complete_style:StyleType='bar.complete',finished_style:StyleType='bar.finished',pulse_style:StyleType='bar.pulse',animation_time:float=None)
rich.bar.Bar.__init__(self,total:float=100,completed:float=0,width:int=None,pulse:bool=False,style:StyleType='bar.back',complete_style:StyleType='bar.complete',finished_style:StyleType='bar.finished',pulse_style:StyleType='bar.pulse',animation_time:float=None)
rich.bar.Bar.__repr__(self)->str
rich.bar.Bar.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.bar.Bar.__rich_measure__(self,console:Console,max_width:int)->Measurement
rich.bar.Bar._get_pulse_segments(self,fore_style:Style,back_style:Style,color_system:str,legacy_windows:bool)->List[Segment]
rich.bar.Bar._render_pulse(self,console:Console,width:int)->Iterable[Segment]
rich.bar.Bar.percentage_completed(self)->float
rich.bar.Bar.update(self,completed:float,total:float=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/padding.py----------------------------------------
A:rich.padding.(self.top, self.right, self.bottom, self.left)->self.unpack(pad)
A:rich.padding.(pad_top, pad_right)->cast(Tuple[int, int], pad)
A:rich.padding.(top, right, bottom, left)->cast(Tuple[int, int, int, int], pad)
A:rich.padding.style->console.get_style(self.style)
A:rich.padding.width->min(Measurement.get(console, self.renderable, options.max_width).maximum + self.left + self.right, options.max_width)
A:rich.padding.child_options->options.update(width=width - self.left - self.right)
A:rich.padding.lines->segment.Segment.set_shape(lines, child_options.max_width, style=style)
A:rich.padding.blank_line->Segment(' ' * width + '\n', style)
A:rich.padding.new_line->segment.Segment.line()
A:rich.padding.(min_width, max_width)->measure.Measurement.get(console, self.renderable, max(1, max_width - extra_width))
A:rich.padding.render_width->Measurement(min_width + extra_width, max_width + extra_width)
rich.padding.Padding(self,renderable:'RenderableType',pad:'PaddingDimensions'=(0,0,0,0),*,style:Union[str,Style]='none',expand:bool=True)
rich.padding.Padding.__init__(self,renderable:'RenderableType',pad:'PaddingDimensions'=(0,0,0,0),*,style:Union[str,Style]='none',expand:bool=True)
rich.padding.Padding.__repr__(self)->str
rich.padding.Padding.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.padding.Padding.__rich_measure__(self,console:'Console',max_width:int)->'Measurement'
rich.padding.Padding.indent(cls,renderable:'RenderableType',level:int)->'Padding'
rich.padding.Padding.unpack(pad:'PaddingDimensions')->Tuple[int, int, int, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_emoji_codes.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/errors.py----------------------------------------
rich.errors.ConsoleError(Exception)
rich.errors.MarkupError(ConsoleError)
rich.errors.MissingStyle(StyleError)
rich.errors.NotRenderableError(ConsoleError)
rich.errors.StyleError(Exception)
rich.errors.StyleStackError(ConsoleError)
rich.errors.StyleSyntaxError(ConsoleError)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/live_render.py----------------------------------------
A:rich.live_render.style->console.get_style(self.style)
A:rich.live_render.lines->segment.Segment.set_shape(lines, width, height)
A:rich.live_render.shape->segment.Segment.get_shape(lines)
rich.live_render.LiveRender(self,renderable:RenderableType,style:StyleType='')
rich.live_render.LiveRender.__init__(self,renderable:RenderableType,style:StyleType='')
rich.live_render.LiveRender.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.live_render.LiveRender.position_cursor(self)->Control
rich.live_render.LiveRender.restore_cursor(self)->Control
rich.live_render.LiveRender.set_renderable(self,renderable:RenderableType)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/tabulate.py----------------------------------------
A:rich.tabulate.table->Table(show_header=False, title=title, box=box.ROUNDED, border_style='blue')
A:rich.tabulate.highlighter->ReprHighlighter()
rich.tabulate.tabulate_mapping(mapping:Mapping,title:str=None)->Table


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/theme.py----------------------------------------
A:rich.theme.config->configparser.ConfigParser()
A:rich.theme.theme->Theme()
rich.theme.Theme(self,styles:Mapping[str,StyleType]=None,inherit:bool=True)
rich.theme.Theme.__init__(self,styles:Mapping[str,StyleType]=None,inherit:bool=True)
rich.theme.Theme.config(self)->str
rich.theme.Theme.from_file(cls,config_file:IO[str],source:str=None,inherit:bool=True)->'Theme'
rich.theme.Theme.read(cls,path:str,inherit:bool=True)->'Theme'


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/markup.py----------------------------------------
A:rich.markup.re_tags->re.compile('(\\[\\[)|(\\]\\])|\\[(.*?)\\]')
A:rich.markup.(escape_open, escape_close, tag_text)->match.groups()
A:rich.markup.(start, end)->match.span()
A:rich.markup.(text, equals, parameters)->tag_text.partition('=')
A:rich.markup.text->Text(style=style)
A:rich.markup.style_name->normalize(style_name)
A:rich.markup.(start, open_tag)->pop()
A:rich.markup.normalized_tag->Tag(normalize(tag.name), tag.parameters)
A:rich.markup.text_length->len(text)
A:rich.markup.(start, tag)->style_stack.pop()
A:rich.markup.text.spans->sorted(spans)
A:rich.markup.console->Console(highlight=False)
rich.markup.Tag(NamedTuple)
rich.markup.Tag.__str__(self)->str
rich.markup.Tag.markup(self)->str
rich.markup._parse(markup:str)->Iterable[Tuple[int, Optional[str], Optional[Tag]]]
rich.markup.escape(markup:str)->str
rich.markup.render(markup:str,style:Union[str,Style]='',emoji:bool=True)->Text


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/default_styles.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_windows.py----------------------------------------
A:rich._windows.windll->LibraryLoader(ctypes.WinDLL)
A:rich._windows.features->get_windows_console_features()
A:rich._windows.handle->_GetStdHandle(STDOUT)
A:rich._windows.console_mode->ctypes.wintypes.DWORD()
A:rich._windows.result->_GetConsoleMode(handle, console_mode)
A:rich._windows.vt->bool(result and console_mode.value & ENABLE_VIRTUAL_TERMINAL_PROCESSING)
A:rich._windows.win_version->sys.getwindowsversion()
rich._windows.WindowsConsoleFeatures


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_emoji_replace.py----------------------------------------
A:rich._emoji_replace.(emoji_code, emoji_name)->match.groups()
rich._emoji_replace._emoji_replace(text:str,_emoji_sub=re.compile('(:(\\S*?):)').sub)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/traceback.py----------------------------------------
A:rich.traceback.(exc_type, exc_value, traceback)->sys.exc_info()
A:rich.traceback.trace->Trace(stacks=stacks)
A:rich.traceback.rich_traceback->cls.extract(exc_type, exc_value, traceback)
A:rich.traceback.stack->Stack(exc_type=str(exc_type.__name__), exc_value=str(exc_value))
A:rich.traceback.stack.syntax_error->_SyntaxError(offset=exc_value.offset or 0, filename=exc_value.filename or '?', lineno=exc_value.lineno or 0, line=exc_value.text or '', msg=exc_value.msg)
A:rich.traceback.frame->Frame(filename=frame_summary.filename, lineno=frame_summary.lineno, name=frame_summary.name)
A:rich.traceback.highlighter->ReprHighlighter()
A:rich.traceback.stack_renderable->Constrain(stack_renderable, self.width)
A:rich.traceback.path_highlighter->PathHighlighter()
A:rich.traceback.text->text.Text.assemble((' File ', 'traceback.text'), (f'"{frame.filename}"', 'traceback.filename'), (', line ', 'traceback.text'), (str(frame.lineno), 'traceback.lineno'), (', in ', 'traceback.text'), (frame.name, 'traceback.name'))
A:rich.traceback.syntax->syntax.Syntax.from_path(frame.filename, theme=theme, line_numbers=True, line_range=(frame.lineno - self.extra_lines, frame.lineno + self.extra_lines), highlight_lines={frame.lineno}, word_wrap=self.word_wrap)
A:rich.traceback.console->Console()
A:rich.traceback.tb->Traceback()
rich.traceback.Frame
rich.traceback.PathHighlighter(RegexHighlighter)
rich.traceback.Stack
rich.traceback.Trace
rich.traceback.Traceback(self,trace:Trace=None,width:Optional[int]=88,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)
rich.traceback.Traceback.__init__(self,trace:Trace=None,width:Optional[int]=88,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)
rich.traceback.Traceback.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.traceback.Traceback._render_stack(self,stack:Stack)->RenderResult
rich.traceback.Traceback._render_syntax_error(self,syntax_error:_SyntaxError)->RenderResult
rich.traceback.Traceback.extract(cls,exc_type:Type[BaseException],exc_value:BaseException,traceback:TracebackType)->Trace
rich.traceback.Traceback.from_exception(cls,exc_type:Type[BaseException],exc_value:BaseException,traceback:TracebackType,width:Optional[int]=100,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)->'Traceback'
rich.traceback._SyntaxError
rich.traceback.install(*,console:Console=None,width:Optional[int]=100,line_numbers:bool=True,extra_lines:int=3,theme:Optional[str]=None,word_wrap:bool=False)->Callable


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/control.py----------------------------------------
A:rich.control.self._control_codes->segment.Segment.control(control_codes)
rich.control.Control(self,control_codes:str)
rich.control.Control.__init__(self,control_codes:str)
rich.control.Control.__rich_console__(self,console:'Console',options:'ConsoleOptions')->'RenderResult'
rich.control.Control.__str__(self)->str
rich.control.strip_control_codes(text:str,_translate_table=_CONTROL_TRANSLATE)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/filesize.py----------------------------------------
rich.filesize._to_str(size:int,suffixes:Iterable[str],base:int)->str
rich.filesize.decimal(size:int)->str
rich.filesize.pick_unit_and_suffix(size:int,suffixes:List[str],base:int)->Tuple[int, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/emoji.py----------------------------------------
A:rich.emoji.console->Console(record=True)
A:rich.emoji.columns->Columns((f':{name}: {name}' for name in sorted(EMOJI.keys()) if '\u200d' not in name), column_first=True)
rich.emoji.Emoji(self,name:str,style:Union[str,Style]='none')
rich.emoji.Emoji.__init__(self,name:str,style:Union[str,Style]='none')
rich.emoji.Emoji.__repr__(self)->str
rich.emoji.Emoji.__rich_console__(self,console:Console,options:ConsoleOptions)->RenderResult
rich.emoji.Emoji.__str__(self)->str
rich.emoji.Emoji.replace(cls,text:str)->str
rich.emoji.NoEmoji(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/prompt.py----------------------------------------
A:rich.prompt.PromptType->TypeVar('PromptType')
A:rich.prompt.DefaultType->TypeVar('DefaultType')
A:rich.prompt._prompt->cls(prompt, console=console, password=password, choices=choices, show_default=show_default, show_choices=show_choices)
A:rich.prompt.prompt->self.make_prompt(default)
A:rich.prompt._choices->'/'.join(self.choices)
A:rich.prompt._default->self.render_default(default)
A:rich.prompt.value->value.strip().lower().strip().lower()
A:rich.prompt.return_value->self.process_response(value)
A:rich.prompt.result->IntPrompt.ask(':rocket: Enter a number betwen [b]1[/b] and [b]10[/b]', default=5)
A:rich.prompt.password->Prompt.ask('Please enter a password [cyan](must be at least 5 characters)', password=True)
A:rich.prompt.fruit->Prompt.ask('Enter a fruit', choices=['apple', 'orange', 'pear'])
rich.prompt.Confirm(PromptBase[bool])
rich.prompt.Confirm.process_response(self,value:str)->bool
rich.prompt.Confirm.render_default(self,default:DefaultType)->Text
rich.prompt.FloatPrompt(PromptBase[int])
rich.prompt.IntPrompt(PromptBase[int])
rich.prompt.InvalidResponse(self,message:TextType)
rich.prompt.InvalidResponse.__init__(self,message:TextType)
rich.prompt.InvalidResponse.__rich__(self)->TextType
rich.prompt.Prompt(PromptBase[str])
rich.prompt.PromptBase(self,prompt:TextType='',*,console:Console=None,password:bool=False,choices:List[str]=None,show_default:bool=True,show_choices:bool=True)
rich.prompt.PromptBase.__init__(self,prompt:TextType='',*,console:Console=None,password:bool=False,choices:List[str]=None,show_default:bool=True,show_choices:bool=True)
rich.prompt.PromptBase.ask(cls,prompt:TextType='',*,console:Console=None,password:bool=False,choices:List[str]=None,show_default:bool=True,show_choices:bool=True,default:Any=...,stream:TextIO=None)->Any
rich.prompt.PromptBase.check_choice(self,value:str)->bool
rich.prompt.PromptBase.get_input(cls,console:Console,prompt:TextType,password:bool,stream:TextIO=None)->str
rich.prompt.PromptBase.make_prompt(self,default:DefaultType)->Text
rich.prompt.PromptBase.on_validate_error(self,value:str,error:InvalidResponse)->None
rich.prompt.PromptBase.pre_prompt(self)->None
rich.prompt.PromptBase.process_response(self,value:str)->PromptType
rich.prompt.PromptBase.render_default(self,default:DefaultType)->Text
rich.prompt.PromptError(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/progress.py----------------------------------------
A:rich.progress.TaskID->NewType('TaskID', int)
A:rich.progress.ProgressType->TypeVar('ProgressType')
A:rich.progress.iter_values->iter(values)
A:rich.progress._count->int(period_size)
A:rich.progress.start_time->get_time()
A:rich.progress.progress->Progress(*columns, auto_refresh=auto_refresh, console=console, transient=transient, get_time=get_time, refresh_per_second=refresh_per_second)
A:rich.progress.task_total->len(sequence)
A:rich.progress.task_id->self.add_task(description, total=task_total)
A:rich.progress.current_time->self.get_time()
A:rich.progress.renderable->RenderGroup(*self.get_renderables())
A:rich.progress._text->self.text_format.format(task=task)
A:rich.progress.text->Text(_text, style=self.style, justify=self.justify)
A:rich.progress.remaining_delta->timedelta(seconds=int(remaining))
A:rich.progress.data_size->filesize.decimal(int(task.total))
A:rich.progress.completed->min(100.0, max(0.0, completed))
A:rich.progress.total->int(task.total)
A:rich.progress.(unit, suffix)->filesize.pick_unit_and_suffix(total, ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'], 1024)
A:rich.progress.download_text->Text(download_status, style='progress.download')
A:rich.progress.data_speed->filesize.decimal(int(speed))
A:rich.progress.iter_progress->iter(progress)
A:rich.progress.total_completed->sum((sample.completed for sample in iter_progress))
A:rich.progress.estimate->ceil(self.remaining / speed)
A:rich.progress.self.done->Event()
A:rich.progress.(line, new_line, text)->Text(_text, style=self.style, justify=self.justify).partition('\n')
A:rich.progress.output->'\n'.join(lines)
A:rich.progress.self._lock->RLock()
A:rich.progress.self._live_render->LiveRender(self.get_renderable())
A:rich.progress.sys.stdout->_FileProxy(self.console, sys.stdout)
A:rich.progress.self._refresh_thread->_RefreshThread(self, self.refresh_per_second)
A:rich.progress.task.start_time->self.get_time()
A:rich.progress.self.ipy_widget->Output()
A:rich.progress.table->Table('foo', 'bar', 'baz')
A:rich.progress.widget->column(task)
A:rich.progress.task->Task(self._task_index, description, total, completed, visible=visible, fields=fields, _get_time=self.get_time)
A:rich.progress.self._task_index->TaskID(int(self._task_index) + 1)
A:rich.progress.syntax->Syntax('def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    """Iterate and generate a tup`le with a flag for last value."""\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value', 'python', line_numbers=True)
A:rich.progress.examples->cycle(progress_renderables)
A:rich.progress.console->Console()
A:rich.progress.task1->Progress(*columns, auto_refresh=auto_refresh, console=console, transient=transient, get_time=get_time, refresh_per_second=refresh_per_second).add_task(' [red]Downloading', total=1000)
A:rich.progress.task2->Progress(*columns, auto_refresh=auto_refresh, console=console, transient=transient, get_time=get_time, refresh_per_second=refresh_per_second).add_task(' [green]Processing', total=1000)
A:rich.progress.task3->Progress(*columns, auto_refresh=auto_refresh, console=console, transient=transient, get_time=get_time, refresh_per_second=refresh_per_second).add_task(' [yellow]Thinking', total=1000, start=False)
rich.progress.BarColumn(self,bar_width:Optional[int]=40,style:StyleType='bar.back',complete_style:StyleType='bar.complete',finished_style:StyleType='bar.finished',pulse_style:StyleType='bar.pulse')
rich.progress.BarColumn.__init__(self,bar_width:Optional[int]=40,style:StyleType='bar.back',complete_style:StyleType='bar.complete',finished_style:StyleType='bar.finished',pulse_style:StyleType='bar.pulse')
rich.progress.BarColumn.render(self,task:'Task')->Bar
rich.progress.DownloadColumn(ProgressColumn)
rich.progress.DownloadColumn.render(self,task:'Task')->Text
rich.progress.FileSizeColumn(ProgressColumn)
rich.progress.FileSizeColumn.render(self,task:'Task')->Text
rich.progress.Progress(self,*columns:Union[str,ProgressColumn],console:Console=None,auto_refresh:bool=True,refresh_per_second:int=None,speed_estimate_period:float=30.0,transient:bool=False,redirect_stdout:bool=True,redirect_stderr:bool=True,get_time:GetTimeCallable=None)
rich.progress.Progress.__enter__(self)->'Progress'
rich.progress.Progress.__exit__(self,exc_type,exc_val,exc_tb)->None
rich.progress.Progress.__init__(self,*columns:Union[str,ProgressColumn],console:Console=None,auto_refresh:bool=True,refresh_per_second:int=None,speed_estimate_period:float=30.0,transient:bool=False,redirect_stdout:bool=True,redirect_stderr:bool=True,get_time:GetTimeCallable=None)
rich.progress.Progress._disable_redirect_io(self)
rich.progress.Progress._enable_redirect_io(self)
rich.progress.Progress.add_task(self,description:str,start:bool=True,total:int=100,completed:int=0,visible:bool=True,**fields:Any)->TaskID
rich.progress.Progress.advance(self,task_id:TaskID,advance:float=1)->None
rich.progress.Progress.finished(self)->bool
rich.progress.Progress.get_renderable(self)->RenderableType
rich.progress.Progress.get_renderables(self)->Iterable[RenderableType]
rich.progress.Progress.make_tasks_table(self,tasks:Iterable[Task])->Table
rich.progress.Progress.process_renderables(self,renderables:List[ConsoleRenderable])->List[ConsoleRenderable]
rich.progress.Progress.refresh(self)->None
rich.progress.Progress.remove_task(self,task_id:TaskID)->None
rich.progress.Progress.start(self)->None
rich.progress.Progress.start_task(self,task_id:TaskID)->None
rich.progress.Progress.stop(self)->None
rich.progress.Progress.stop_task(self,task_id:TaskID)->None
rich.progress.Progress.task_ids(self)->List[TaskID]
rich.progress.Progress.tasks(self)->List[Task]
rich.progress.Progress.track(self,sequence:Union[Iterable[ProgressType],Sequence[ProgressType]],total:int=None,task_id:Optional[TaskID]=None,description='Working...',update_period:float=0.025)->Iterable[ProgressType]
rich.progress.Progress.update(self,task_id:TaskID,*,total:float=None,completed:float=None,advance:float=None,description:str=None,visible:bool=None,refresh:bool=False,**fields:Any)->None
rich.progress.ProgressColumn(self)
rich.progress.ProgressColumn.__init__(self)
rich.progress.ProgressColumn.render(self,task:'Task')->RenderableType
rich.progress.ProgressSample(NamedTuple)
rich.progress.Task
rich.progress.Task.elapsed(self)->Optional[float]
rich.progress.Task.finished(self)->bool
rich.progress.Task.get_time(self)->float
rich.progress.Task.percentage(self)->float
rich.progress.Task.remaining(self)->float
rich.progress.Task.speed(self)->Optional[float]
rich.progress.Task.started(self)->bool
rich.progress.Task.time_remaining(self)->Optional[float]
rich.progress.TextColumn(self,text_format:str,style:StyleType='none',justify:JustifyMethod='left',markup:bool=True,highlighter:Highlighter=None)
rich.progress.TextColumn.__init__(self,text_format:str,style:StyleType='none',justify:JustifyMethod='left',markup:bool=True,highlighter:Highlighter=None)
rich.progress.TextColumn.render(self,task:'Task')
rich.progress.TimeRemainingColumn(ProgressColumn)
rich.progress.TimeRemainingColumn.render(self,task:'Task')->Text
rich.progress.TotalFileSizeColumn(ProgressColumn)
rich.progress.TotalFileSizeColumn.render(self,task:'Task')->Text
rich.progress.TransferSpeedColumn(ProgressColumn)
rich.progress.TransferSpeedColumn.render(self,task:'Task')->Text
rich.progress._FileProxy(self,console:Console,file:IO[str])
rich.progress._FileProxy.__getattr__(self,name:str)->Any
rich.progress._FileProxy.__init__(self,console:Console,file:IO[str])
rich.progress._FileProxy.flush(self)->None
rich.progress._FileProxy.write(self,text:str)->int
rich.progress._RefreshThread(self,progress:'Progress',refresh_per_second:int=10)
rich.progress._RefreshThread.__init__(self,progress:'Progress',refresh_per_second:int=10)
rich.progress._RefreshThread.run(self)->None
rich.progress._RefreshThread.stop(self)->None
rich.progress.iter_track(values:Iterable[ProgressType],total:int,update_period:float=0.05)->Iterable[Iterable[ProgressType]]
rich.progress.track(sequence:Union[Sequence[ProgressType],Iterable[ProgressType]],description='Working...',total:int=None,auto_refresh=True,console:Optional[Console]=None,transient:bool=False,get_time:Callable[[],float]=None,refresh_per_second:int=None,style:StyleType='bar.back',complete_style:StyleType='bar.complete',finished_style:StyleType='bar.finished',pulse_style:StyleType='bar.pulse',update_period:float=0.025)->Iterable[ProgressType]


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/_cell_widths.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/cells.py----------------------------------------
A:rich.cells.cached_result->_cache.get(text, None)
A:rich.cells.total_size->sum((_get_size(character) for character in text))
A:rich.cells.codepoint->ord(character)
A:rich.cells.cell_size->cell_len(text)
A:rich.cells.(character, size)->pop()
rich.cells._get_codepoint_cell_size(codepoint:int)->int
rich.cells.cell_len(text:str,_cache:Dict[str,int]=LRUCache(1024*4))->int
rich.cells.chop_cells(text:str,max_size:int,position:int=0)->List[str]
rich.cells.get_character_cell_size(character:str)->int
rich.cells.set_cell_size(text:str,total:int)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/rich4.1.0/lib/python3.9/site-packages/rich/palette.py----------------------------------------
A:rich.palette.red_mean->int((red1 + red2) / 2)
A:rich.palette.(min_index, _min_color)->min(enumerate(self._colors), key=lambda _color: get_color_distance(_color[1]))
rich.palette.Palette(self,colors:Sequence[Tuple[int,int,int]])
rich.palette.Palette.__getitem__(self,number:int)->ColorTriplet
rich.palette.Palette.__init__(self,colors:Sequence[Tuple[int,int,int]])
rich.palette.Palette.match(self,color:Tuple[int,int,int])->int

