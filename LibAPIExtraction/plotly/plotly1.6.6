
----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/utils.py----------------------------------------
A:plotly.utils.lock->threading.Lock()
A:plotly.utils.data->json.load(f)
A:plotly.utils.d->dict()
A:plotly.utils.json_string->json.dumps(json_dict, indent=4)
A:plotly.utils.(head, tail)->os.path.split(filename)
A:plotly.utils.iso_string->iso_string.replace('-00:00', '').replace('+00:00', '').replace('-00:00', '').replace('+00:00', '')
A:plotly.utils.obj->obj.astimezone(pytz.utc).astimezone(pytz.utc)
A:plotly.utils.time_string->obj.astimezone(pytz.utc).astimezone(pytz.utc).isoformat()
A:plotly.utils.coll[no]->str(entry)
A:plotly.utils.coll[key]->str(val)
A:plotly.utils.coll[str(key)]->coll.pop(key)
A:plotly.utils.func.__doc__->func.__doc__.format(**names)
A:plotly.utils.seen->set()
A:plotly.utils.src_regex->re.compile('.+src$')
plotly.utils.NotEncodable(Exception)
plotly.utils.PlotlyJSONEncoder(json.JSONEncoder)
plotly.utils.PlotlyJSONEncoder.default(self,obj)
plotly.utils.PlotlyJSONEncoder.encode_as_date(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_datetime(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_list(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_numpy(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_pandas(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_plotly(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_sage(obj)
plotly.utils.decode_unicode(coll)
plotly.utils.ensure_dir_exists(directory)
plotly.utils.ensure_file_exists(filename)
plotly.utils.get_first_duplicate(items)
plotly.utils.is_source_key(key)
plotly.utils.iso_to_plotly_time_string(iso_string)
plotly.utils.load_json_dict(filename,*args)
plotly.utils.save_json_dict(filename,json_dict)
plotly.utils.template_doc(**names)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/exceptions.py----------------------------------------
A:plotly.exceptions.res_payload->json.loads(requests_exception.response.content.decode('utf8'))
A:plotly.exceptions.message->"The entry at index, '{0}', is invalid because it does not contain a valid 'type' key-value. This is required for valid '{1}' lists.".format(index, obj.__class__.__name__)
A:plotly.exceptions.plain_message->"Invalid entry found in 'data' object at index, '{0}'. It does not contain a valid 'type' key, required for 'data' lists.".format(index)
plotly.exceptions.InputError(PlotlyError)
plotly.exceptions.PlotlyAccountError(PlotlyServerError)
plotly.exceptions.PlotlyConnectionError(PlotlyServerError)
plotly.exceptions.PlotlyCredentialError(PlotlyServerError)
plotly.exceptions.PlotlyDataTypeError(self,obj='',index='',**kwargs)
plotly.exceptions.PlotlyDataTypeError.__init__(self,obj='',index='',**kwargs)
plotly.exceptions.PlotlyDictKeyError(self,obj='',key='',**kwargs)
plotly.exceptions.PlotlyDictKeyError.__init__(self,obj='',key='',**kwargs)
plotly.exceptions.PlotlyDictValueError(self,obj='',key='',value='',val_types='',**kwargs)
plotly.exceptions.PlotlyDictValueError.__init__(self,obj='',key='',value='',val_types='',**kwargs)
plotly.exceptions.PlotlyEmptyDataError(PlotlyError)
plotly.exceptions.PlotlyError(Exception)
plotly.exceptions.PlotlyGraphObjectError(self,message='',path=None,notes=None,plain_message='')
plotly.exceptions.PlotlyGraphObjectError.__init__(self,message='',path=None,notes=None,plain_message='')
plotly.exceptions.PlotlyGraphObjectError.add_note(self,note)
plotly.exceptions.PlotlyGraphObjectError.add_to_error_path(self,path)
plotly.exceptions.PlotlyGraphObjectError.prepare(self)
plotly.exceptions.PlotlyListEntryError(self,obj='',index='',entry='',**kwargs)
plotly.exceptions.PlotlyListEntryError.__init__(self,obj='',index='',entry='',**kwargs)
plotly.exceptions.PlotlyLocalCredentialsError(self)
plotly.exceptions.PlotlyLocalCredentialsError.__init__(self)
plotly.exceptions.PlotlyLocalError(PlotlyError)
plotly.exceptions.PlotlyRateLimitError(PlotlyServerError)
plotly.exceptions.PlotlyRequestError(self,requests_exception)
plotly.exceptions.PlotlyRequestError.__init__(self,requests_exception)
plotly.exceptions.PlotlyRequestError.__str__(self)
plotly.exceptions.PlotlyServerError(PlotlyError)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/tools.py----------------------------------------
A:plotly.tools.PLOTLY_DIR->os.path.join(os.path.expanduser('~'), '.plotly')
A:plotly.tools.CREDENTIALS_FILE->os.path.join(PLOTLY_DIR, '.credentials')
A:plotly.tools.CONFIG_FILE->os.path.join(PLOTLY_DIR, '.config')
A:plotly.tools.TEST_DIR->os.path.join(os.path.expanduser('~'), '.test')
A:plotly.tools.TEST_FILE->os.path.join(PLOTLY_DIR, '.permission_test')
A:plotly.tools.f->open(CONFIG_FILE, 'w')
A:plotly.tools.contents->plotly.utils.load_json_dict(fn)
A:plotly.tools.contents_keys->list(contents.keys())
A:plotly.tools.credentials->get_credentials_file()
A:plotly.tools.settings->get_config_file()
A:plotly.tools.resource->'/apigetfile/{file_owner}/{file_id}'.format(file_owner=file_owner, file_id=file_id)
A:plotly.tools.test_if_int->int(file_id)
A:plotly.tools.s->obj.replace('\n', '<br>')
A:plotly.tools.url->'{plotly_domain}/~{un}/{fid}'.format(plotly_domain=get_config_file()['plotly_domain'], un=file_owner_or_url, fid=file_id)
A:plotly.tools.renderer->matplotlylib.PlotlyRenderer()
A:plotly.tools.horizontal_spacing->float(kwargs['horizontal_spacing'])
A:plotly.tools.vertical_spacing->float(kwargs['vertical_spacing'])
A:plotly.tools.fig->plotly.graph_objs.graph_objs.Figure(layout=layout)
A:plotly.tools.xaxis_name->'xaxis{0}'.format(plot_num + 1)
A:plotly.tools.x_anchor->'y{y_cnt}'.format(y_cnt=y_cnt)
A:plotly.tools.yaxis_name->'yaxis{0}'.format(plot_num + 1)
A:plotly.tools.y_anchor->'x{x_cnt}'.format(x_cnt=x_cnt)
A:plotly.tools.xaxis->plotly.graph_objs.graph_objs.XAxis(domain=[x_start, x_end], anchor=x_anchor)
A:plotly.tools.yaxis->plotly.graph_objs.graph_objs.YAxis(domain=[y_start, y_end], anchor=y_anchor)
A:plotly.tools.SPEC_defaults->dict(is_3d=False, colspan=1, rowspan=1, l=0.0, r=0.0, b=0.0, t=0.0)
A:plotly.tools.INSET_defaults->dict(cell=(1, 1), is_3d=False, l=0.0, w='to_end', b=0.0, h='to_end')
A:plotly.tools.layout->plotly.graph_objs.graph_objs.Layout()
A:plotly.tools.label->'{x_or_y}{r}'.format(x_or_y=x_or_y, r=r + 1)
A:plotly.tools.graph_obj->'{X_or_Y}Axis'.format(X_or_Y=x_or_y.upper())
A:plotly.tools.axis->getattr(graph_objs, graph_obj)(domain=domain)
A:plotly.tools.scene->plotly.graph_objs.graph_objs.Scene(domain={'x': x_domain, 'y': y_domain})
A:plotly.tools.s_label->'scene{0}'.format(s_cnt)
A:plotly.tools.x_label->_get_label('x', False, False, x_cnt, False)
A:plotly.tools.y_label->_get_label('y', False, False, y_cnt, False)
A:plotly.tools.(x_anchor, y_anchor)->_get_anchors(r, c, x_cnt, y_cnt, False, False)
A:plotly.tools.new_obj->plotly.graph_objs.graph_objs.get_class_instance_by_name(obj_type)
A:plotly.tools.test_obj->plotly.graph_objs.graph_objs.get_class_instance_by_name(obj_type, obj)
A:plotly.tools.d->dict()
A:plotly.tools.d[key]->_replace_newline(val)
A:plotly.tools.l->list()
A:plotly.tools.self.embed_code->get_embed(url, width=width, height=height)
plotly.tools._replace_newline(obj)
plotly.tools.check_file_permissions()
plotly.tools.embed(file_owner_or_url,file_id=None,width='100%',height=525)
plotly.tools.ensure_local_plotly_files()
plotly.tools.get_config_file(*args)
plotly.tools.get_credentials_file(*args)
plotly.tools.get_embed(file_owner_or_url,file_id=None,width='100%',height=525)
plotly.tools.get_subplots(rows=1,columns=1,print_grid=False,**kwargs)
plotly.tools.get_valid_graph_obj(obj,obj_type=None)
plotly.tools.make_subplots(rows=1,cols=1,shared_xaxes=False,shared_yaxes=False,start_cell='top-left',print_grid=True,**kwargs)
plotly.tools.mpl_to_plotly(fig,resize=False,strip_style=False,verbose=False)
plotly.tools.reset_config_file()
plotly.tools.reset_credentials_file()
plotly.tools.set_config_file(plotly_domain=None,plotly_streaming_domain=None,plotly_api_domain=None,plotly_ssl_verification=None)
plotly.tools.set_credentials_file(username=None,api_key=None,stream_ids=None)
plotly.tools.validate(obj,obj_type)
plotly.tools.validate_stream(obj,obj_type)
plotly.tools.warning_on_one_line(message,category,filename,lineno,file=None,line=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/widgets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/widgets/graph_widget.py----------------------------------------
A:plotly.widgets.graph_widget.js_widget_code->resource_string('plotly', 'widgets/graphWidget.js').decode('utf-8')
A:plotly.widgets.graph_widget._view_name->Unicode('GraphView', sync=True)
A:plotly.widgets.graph_widget._message->json.dumps(_message)
A:plotly.widgets.graph_widget._graph_url->Unicode(sync=True)
A:plotly.widgets.graph_widget.self._listener_set->set()
A:plotly.widgets.graph_widget.self._clientMessages->deque()
A:plotly.widgets.graph_widget.message['uid']->str(uuid.uuid4())
A:plotly.widgets.graph_widget.self._message->json.dumps(message, cls=utils.PlotlyJSONEncoder)
plotly.widgets.GraphWidget(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.GraphWidget._handle_msg(self,message)
plotly.widgets.GraphWidget._handle_outgoing_message(self,message)
plotly.widgets.GraphWidget._handle_registration(self,event_type,callback,remove)
plotly.widgets.GraphWidget.add_traces(self,traces,new_indices=None)
plotly.widgets.GraphWidget.delete_traces(self,indices)
plotly.widgets.GraphWidget.hover(self,*hover_objs)
plotly.widgets.GraphWidget.on_click(self,callback,remove=False)
plotly.widgets.GraphWidget.on_hover(self,callback,remove=False)
plotly.widgets.GraphWidget.on_zoom(self,callback,remove=False)
plotly.widgets.GraphWidget.relayout(self,layout)
plotly.widgets.GraphWidget.reorder_traces(self,current_indices,new_indices=None)
plotly.widgets.GraphWidget.restyle(self,data,indices=None)
plotly.widgets.graph_widget.GraphWidget(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.graph_widget.GraphWidget.__init__(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.graph_widget.GraphWidget._handle_msg(self,message)
plotly.widgets.graph_widget.GraphWidget._handle_outgoing_message(self,message)
plotly.widgets.graph_widget.GraphWidget._handle_registration(self,event_type,callback,remove)
plotly.widgets.graph_widget.GraphWidget.add_traces(self,traces,new_indices=None)
plotly.widgets.graph_widget.GraphWidget.delete_traces(self,indices)
plotly.widgets.graph_widget.GraphWidget.hover(self,*hover_objs)
plotly.widgets.graph_widget.GraphWidget.on_click(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.on_hover(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.on_zoom(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.relayout(self,layout)
plotly.widgets.graph_widget.GraphWidget.reorder_traces(self,current_indices,new_indices=None)
plotly.widgets.graph_widget.GraphWidget.restyle(self,data,indices=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/graph_objs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/graph_objs/graph_objs_tools.py----------------------------------------
A:plotly.graph_objs.graph_objs_tools.relative_path->os.path.join(graph_reference_dir, json_file)
A:plotly.graph_objs.graph_objs_tools.s->resource_string('plotly', relative_path).decode('utf-8')
A:plotly.graph_objs.graph_objs_tools.tmp->plotly.utils.decode_unicode(tmp)
A:plotly.graph_objs.graph_objs_tools.(INFO, OBJ_MAP, NAME_TO_KEY, KEY_TO_NAME)->_load_graph_ref()
A:plotly.graph_objs.graph_objs_tools.INFO['plotlylist']->dict(keymeta=dict())
A:plotly.graph_objs.graph_objs_tools.INFO['plotlydict']->dict(keymeta=dict())
A:plotly.graph_objs.graph_objs_tools.INFO['plotlytrace']->dict(keymeta=dict())
A:plotly.graph_objs.graph_objs_tools.INFO['trace']->dict(keymeta=dict())
A:plotly.graph_objs.graph_objs_tools.required->str(keymeta[key]['required'])
A:plotly.graph_objs.graph_objs_tools.typ->str(keymeta[key]['key_type'])
A:plotly.graph_objs.graph_objs_tools.val_types->str(keymeta[key]['val_types'])
A:plotly.graph_objs.graph_objs_tools.descr->str(keymeta[key]['description'])
A:plotly.graph_objs.graph_objs_tools.str_1->'{0} [required={1}] (value={2})'.format(key, required, val_types)
A:plotly.graph_objs.graph_objs_tools.updated_keys->list()
A:plotly.graph_objs.graph_objs_tools.translations->dict(scl='colorscale', reversescl='reversescale')
A:plotly.graph_objs.graph_objs_tools.r->repr(val)
plotly.graph_objs.graph_objs_tools._load_graph_ref()
plotly.graph_objs.graph_objs_tools.curtail_val_repr(val,max_chars,add_delim=False)
plotly.graph_objs.graph_objs_tools.make_dict_doc(name)
plotly.graph_objs.graph_objs_tools.make_list_doc(name)
plotly.graph_objs.graph_objs_tools.update_keys(keys)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/graph_objs/graph_objs.py----------------------------------------
A:plotly.graph_objs.graph_objs.l->list()
A:plotly.graph_objs.graph_objs.string->'{name}('.format(name=self.__class__.__name__)
A:plotly.graph_objs.graph_objs.kwargs[key]->self._assign_id_to_src(key, kwargs[key])
A:plotly.graph_objs.graph_objs.value->self._assign_id_to_src(key, value)
A:plotly.graph_objs.graph_objs.src_value_str->str(src_value)
A:plotly.graph_objs.graph_objs.err->err.format(src_name, src_value_str).format(src_name, src_value_str)
A:plotly.graph_objs.graph_objs.keys->list(self.keys())
A:plotly.graph_objs.graph_objs.d->dict()
A:plotly.graph_objs.graph_objs.d[key]->val.get_data()
A:plotly.graph_objs.graph_objs.updated_keys->plotly.graph_objs.graph_objs_tools.update_keys(keys)
A:plotly.graph_objs.graph_objs.self[k_new]->self.pop(k_old)
A:plotly.graph_objs.graph_objs.obj->get_class_instance_by_name('YAxis')
A:plotly.graph_objs.graph_objs.s_sub->plotly.graph_objs.graph_objs_tools.curtail_val_repr(entry, max_chars=max_len - len(s), add_delim=False)
A:plotly.graph_objs.graph_objs.ordered_dict->OrderedDict()
A:plotly.graph_objs.graph_objs.ordered_dict[key]->self[key].get_ordered(caller=False)
A:plotly.graph_objs.graph_objs.trace_type->self.pop('type')
A:plotly.graph_objs.graph_objs.doc->plotly.graph_objs.graph_objs_tools.make_dict_doc(obj)
A:plotly.graph_objs.graph_objs.globals()[obj]->type(obj, (base,), {'__doc__': doc, '__name__': obj})
A:plotly.graph_objs.graph_objs.self[index]->get_class_instance_by_name(entry.__class__.__name__, entry)
A:plotly.graph_objs.graph_objs.Data->get_patched_data_class(Data)
A:plotly.graph_objs.graph_objs.Annotations->get_patched_annotations_class(Annotations)
A:plotly.graph_objs.graph_objs.kwargs['data']->Data()
A:plotly.graph_objs.graph_objs.kwargs['layout']->Layout()
A:plotly.graph_objs.graph_objs.xaxis_key->'xaxis{ref}'.format(ref=ref[0][1:])
A:plotly.graph_objs.graph_objs.yaxis_key->'yaxis{ref}'.format(ref=ref[1][1:])
A:plotly.graph_objs.graph_objs.Figure->get_patched_figure_class(Figure)
A:plotly.graph_objs.graph_objs.axis_int->int(key[5:])
A:plotly.graph_objs.graph_objs.test_if_int->int(key[5:])
A:plotly.graph_objs.graph_objs.Layout->get_patched_layout_class(Layout)
A:plotly.graph_objs.graph_objs.NAME_TO_CLASS[name]->getattr(sys.modules[__name__], name)
plotly.graph_objs.Trace(PlotlyTrace)
plotly.graph_objs.graph_objs.PlotlyDict(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.__setitem__(self,key,value)
plotly.graph_objs.graph_objs.PlotlyDict._assign_id_to_src(self,src_name,src_value)
plotly.graph_objs.graph_objs.PlotlyDict.force_clean(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.get_data(self)
plotly.graph_objs.graph_objs.PlotlyDict.get_ordered(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyDict.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyDict.update(self,dict1=None,**dict2)
plotly.graph_objs.graph_objs.PlotlyDict.validate(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList(self,*args)
plotly.graph_objs.graph_objs.PlotlyList.__init__(self,*args)
plotly.graph_objs.graph_objs.PlotlyList.force_clean(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.get_data(self)
plotly.graph_objs.graph_objs.PlotlyList.get_ordered(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyList.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyList.update(self,changes,make_copies=False)
plotly.graph_objs.graph_objs.PlotlyList.validate(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyTrace(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyTrace.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyTrace.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.Trace(PlotlyTrace)
plotly.graph_objs.graph_objs.get_class_instance_by_name(name,*args,**kwargs)
plotly.graph_objs.graph_objs.get_patched_annotations_class(Annotations)
plotly.graph_objs.graph_objs.get_patched_data_class(Data)
plotly.graph_objs.graph_objs.get_patched_figure_class(Figure)
plotly.graph_objs.graph_objs.get_patched_layout_class(Layout)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/plotly/plotly.py----------------------------------------
A:plotly.plotly.plotly._DEFAULT_PLOT_OPTIONS->dict(filename='plot from API', fileopt='new', world_readable=True, auto_open=True, validate=True)
A:plotly.plotly.plotly._credentials->dict()
A:plotly.plotly.plotly._plot_options->dict()
A:plotly.plotly.plotly._config->dict()
A:plotly.plotly.plotly._config['plotly_domain']->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder).get('plotly_domain')
A:plotly.plotly.plotly._config['plotly_streaming_domain']->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder).get('plotly_streaming_domain')
A:plotly.plotly.plotly._config['plotly_api_domain']->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder).get('plotly_api_domain')
A:plotly.plotly.plotly._config['plotly_ssl_verification']->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder).get('plotly_ssl_verification')
A:plotly.plotly.plotly.credentials->plotly.tools.get_credentials_file()
A:plotly.plotly.plotly.res->requests.patch(api_url, data=payload, headers=_api_v2.headers(), verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.urlsplit->requests.patch(api_url, data=payload, headers=_api_v2.headers(), verify=get_config()['plotly_ssl_verification']).split('/')
A:plotly.plotly.plotly.embed_options->dict()
A:plotly.plotly.plotly.options->dict()
A:plotly.plotly.plotly.config->plotly.tools.get_config_file()
A:plotly.plotly.plotly.plot_options->_plot_option_logic(plot_options)
A:plotly.plotly.plotly.fig->plotly.tools._replace_newline(figure)
A:plotly.plotly.plotly.resource->'/apigetfile/{username}/{file_id}'.format(username=file_owner, file_id=file_id)
A:plotly.plotly.plotly.(username, api_key)->_get_session_username_and_key()
A:plotly.plotly.plotly.test_if_int->int(file_id)
A:plotly.plotly.plotly.response->requests.get(plotly_rest_url + resource, headers=headers, verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.content->json.loads(response.content)
A:plotly.plotly.plotly.self._stream->plotly.plotly.chunked_requests.Stream(streaming_url, 80, {'Host': streaming_url, 'plotly-streamtoken': self.stream_id})
A:plotly.plotly.plotly.stream_object->dict()
A:plotly.plotly.plotly.jdata->json.dumps(stream_object, cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.return_data->json.loads(res.content)
A:plotly.plotly.plotly.img->cls.get(figure_or_data, format, width, height)
A:plotly.plotly.plotly.(base, ext)->os.path.splitext(filename)
A:plotly.plotly.plotly.f->open(filename, 'wb')
A:plotly.plotly.plotly.url->_api_v2.api_url('folders')
A:plotly.plotly.plotly.req_col.id->'{0}/{1}'.format(grid_id, resp_col['uid'])
A:plotly.plotly.plotly.paths->filename.split('/')
A:plotly.plotly.plotly.parent_path->'/'.join(paths[0:-1])
A:plotly.plotly.plotly.grid_json->grid._to_plotly_grid_json()
A:plotly.plotly.plotly.upload_url->_api_v2.api_url('grids')
A:plotly.plotly.plotly.req->requests.post(upload_url, data=payload, headers=_api_v2.headers(), verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.grid_id->_api_v2.parse_grid_id_args(grid, grid_url)
A:plotly.plotly.plotly.duplicate_name->plotly.utils.get_first_duplicate(column_names)
A:plotly.plotly.plotly.err->plotly.exceptions.NON_UNIQUE_COLUMN_MESSAGE.format(duplicate_name)
A:plotly.plotly.plotly.n_columns->len([column for column in grid])
A:plotly.plotly.plotly.longest_column_length->max([len(col.data) for col in grid])
A:plotly.plotly.plotly.column_extensions->zip(*rows)
A:plotly.plotly.plotly.supplied_arg_name->supplied_arg_names.pop()
A:plotly.plotly.plotly.plotly_exception->plotly.exceptions.PlotlyRequestError(requests_exception)
A:plotly.plotly.plotly.response_dict->json.loads(response.content.decode('utf8'))
A:plotly.plotly.plotly.(un, api_key)->_get_session_username_and_key()
A:plotly.plotly.plotly.encoded_un_key_pair->base64.b64encode(six.b('{0}:{1}'.format(un, api_key))).decode('utf8')
A:plotly.plotly.plotly.file_credentials->plotly.tools.get_credentials_file()
A:plotly.plotly.plotly.data->json.dumps(fig['data'] if 'data' in fig else [], cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.kwargs->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.payload->dict(platform='python', version=version.__version__, args=data, un=username, key=api_key, origin='plot', kwargs=kwargs)
A:plotly.plotly.plotly.r->json.loads(r.text)
A:plotly.plotly.plotly.creds_on_file->plotly.tools.get_credentials_file()
plotly.plot(figure_or_data,validate=True,**plot_options)
plotly.plotly.Stream(self,stream_id)
plotly.plotly.Stream.close(self)
plotly.plotly.Stream.heartbeat(self,reconnect_on=(200,'',408))
plotly.plotly.Stream.open(self)
plotly.plotly.Stream.write(self,trace,layout=None,validate=True,reconnect_on=(200,'',408))
plotly.plotly._api_v2
plotly.plotly._api_v2.api_url(cls,resource)
plotly.plotly._api_v2.headers(cls)
plotly.plotly._api_v2.parse_grid_id_args(cls,grid,grid_url)
plotly.plotly._api_v2.response_handler(cls,response)
plotly.plotly._get_session_username_and_key()
plotly.plotly._open_url(url)
plotly.plotly._plot_option_logic(plot_options)
plotly.plotly._send_to_plotly(figure,**plot_options)
plotly.plotly._validation_key_logic()
plotly.plotly.file_ops
plotly.plotly.file_ops.mkdirs(cls,folder_path)
plotly.plotly.get_config()
plotly.plotly.get_credentials()
plotly.plotly.get_figure(file_owner_or_url,file_id=None,raw=False)
plotly.plotly.get_plot_options()
plotly.plotly.grid_ops
plotly.plotly.grid_ops._fill_in_response_column_ids(cls,request_columns,response_columns,grid_id)
plotly.plotly.grid_ops.append_columns(cls,columns,grid=None,grid_url=None)
plotly.plotly.grid_ops.append_rows(cls,rows,grid=None,grid_url=None)
plotly.plotly.grid_ops.delete(cls,grid=None,grid_url=None)
plotly.plotly.grid_ops.upload(cls,grid,filename,world_readable=True,auto_open=True,meta=None)
plotly.plotly.image
plotly.plotly.image.get(figure_or_data,format='png',width=None,height=None)
plotly.plotly.image.ishow(cls,figure_or_data,format='png',width=None,height=None)
plotly.plotly.image.save_as(cls,figure_or_data,filename,format=None,width=None,height=None)
plotly.plotly.iplot(figure_or_data,**plot_options)
plotly.plotly.iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.meta_ops
plotly.plotly.meta_ops.upload(cls,meta,grid=None,grid_url=None)
plotly.plotly.plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.Stream(self,stream_id)
plotly.plotly.plotly.Stream.__init__(self,stream_id)
plotly.plotly.plotly.Stream.close(self)
plotly.plotly.plotly.Stream.heartbeat(self,reconnect_on=(200,'',408))
plotly.plotly.plotly.Stream.open(self)
plotly.plotly.plotly.Stream.write(self,trace,layout=None,validate=True,reconnect_on=(200,'',408))
plotly.plotly.plotly._api_v2
plotly.plotly.plotly._api_v2.api_url(cls,resource)
plotly.plotly.plotly._api_v2.headers(cls)
plotly.plotly.plotly._api_v2.parse_grid_id_args(cls,grid,grid_url)
plotly.plotly.plotly._api_v2.response_handler(cls,response)
plotly.plotly.plotly._get_session_username_and_key()
plotly.plotly.plotly._open_url(url)
plotly.plotly.plotly._plot_option_logic(plot_options)
plotly.plotly.plotly._send_to_plotly(figure,**plot_options)
plotly.plotly.plotly._validation_key_logic()
plotly.plotly.plotly.file_ops
plotly.plotly.plotly.file_ops.mkdirs(cls,folder_path)
plotly.plotly.plotly.get_config()
plotly.plotly.plotly.get_credentials()
plotly.plotly.plotly.get_figure(file_owner_or_url,file_id=None,raw=False)
plotly.plotly.plotly.get_plot_options()
plotly.plotly.plotly.grid_ops
plotly.plotly.plotly.grid_ops._fill_in_response_column_ids(cls,request_columns,response_columns,grid_id)
plotly.plotly.plotly.grid_ops.append_columns(cls,columns,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.append_rows(cls,rows,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.delete(cls,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.upload(cls,grid,filename,world_readable=True,auto_open=True,meta=None)
plotly.plotly.plotly.image
plotly.plotly.plotly.image.get(figure_or_data,format='png',width=None,height=None)
plotly.plotly.plotly.image.ishow(cls,figure_or_data,format='png',width=None,height=None)
plotly.plotly.plotly.image.save_as(cls,figure_or_data,filename,format=None,width=None,height=None)
plotly.plotly.plotly.iplot(figure_or_data,**plot_options)
plotly.plotly.plotly.iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.meta_ops
plotly.plotly.plotly.meta_ops.upload(cls,meta,grid=None,grid_url=None)
plotly.plotly.plotly.plot(figure_or_data,validate=True,**plot_options)
plotly.plotly.plotly.plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.sign_in(username,api_key,**kwargs)
plotly.plotly.plotly.update_plot_options(**kwargs)
plotly.plotly.sign_in(username,api_key,**kwargs)
plotly.plotly.update_plot_options(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/plotly/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/plotly/chunked_requests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/plotly/chunked_requests/chunked_request.py----------------------------------------
A:plotly.plotly.chunked_requests.chunked_request.response->six.b('')
A:plotly.plotly.chunked_requests.chunked_request.msglen->format(len(msg), 'x')
A:plotly.plotly.chunked_requests.chunked_request.self._conn->six.moves.http_client.HTTPConnection(server, port)
A:plotly.plotly.chunked_requests.chunked_request.self._bytes->self._conn.sock.recv(1)
A:plotly.plotly.chunked_requests.chunked_request._bytes->self._conn.sock.recv(1)
plotly.chunked_requests.Stream(self,server,port=80,headers={},url='/')
plotly.chunked_requests.Stream._connect(self)
plotly.chunked_requests.Stream._getresponse(self)
plotly.chunked_requests.Stream._isconnected(self)
plotly.chunked_requests.Stream._reconnect(self)
plotly.chunked_requests.Stream._reset_retries(self)
plotly.chunked_requests.Stream.close(self)
plotly.chunked_requests.Stream.write(self,data,reconnect_on=('',200))
plotly.chunked_requests.chunked_request._FakeSocket(six.StringIO)
plotly.chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)
plotly.plotly.chunked_requests.chunked_request.Stream(self,server,port=80,headers={},url='/')
plotly.plotly.chunked_requests.chunked_request.Stream.__init__(self,server,port=80,headers={},url='/')
plotly.plotly.chunked_requests.chunked_request.Stream._connect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._getresponse(self)
plotly.plotly.chunked_requests.chunked_request.Stream._isconnected(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reconnect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reset_retries(self)
plotly.plotly.chunked_requests.chunked_request.Stream.close(self)
plotly.plotly.chunked_requests.chunked_request.Stream.write(self,data,reconnect_on=('',200))
plotly.plotly.chunked_requests.chunked_request._FakeSocket(six.StringIO)
plotly.plotly.chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/renderer.py----------------------------------------
A:plotly.matplotlylib.renderer.self.plotly_fig->plotly.graph_objs.Figure()
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']->plotly.graph_objs.Layout(width=int(props['figwidth'] * props['dpi']), height=int(props['figheight'] * props['dpi']), autosize=False, hovermode='closest')
A:plotly.matplotlylib.renderer.(self.mpl_x_bounds, self.mpl_y_bounds)->mpltools.get_axes_bounds(fig)
A:plotly.matplotlylib.renderer.margin->plotly.graph_objs.Margin(l=int(self.mpl_x_bounds[0] * self.plotly_fig['layout']['width']), r=int((1 - self.mpl_x_bounds[1]) * self.plotly_fig['layout']['width']), t=int((1 - self.mpl_y_bounds[1]) * self.plotly_fig['layout']['height']), b=int(self.mpl_y_bounds[0] * self.plotly_fig['layout']['height']), pad=0)
A:plotly.matplotlylib.renderer.xaxis->plotly.graph_objs.XAxis(anchor='y{0}'.format(self.axis_ct), zeroline=False, ticks='inside')
A:plotly.matplotlylib.renderer.yaxis->plotly.graph_objs.YAxis(anchor='x{0}'.format(self.axis_ct), zeroline=False, ticks='inside')
A:plotly.matplotlylib.renderer.(mpl_xaxis, mpl_yaxis)->mpltools.prep_xy_axis(ax=ax, props=props, x_bounds=self.mpl_x_bounds, y_bounds=self.mpl_y_bounds)
A:plotly.matplotlylib.renderer.bottom_spine->mpltools.get_spine_visible(ax, 'bottom')
A:plotly.matplotlylib.renderer.top_spine->mpltools.get_spine_visible(ax, 'top')
A:plotly.matplotlylib.renderer.left_spine->mpltools.get_spine_visible(ax, 'left')
A:plotly.matplotlylib.renderer.right_spine->mpltools.get_spine_visible(ax, 'right')
A:plotly.matplotlylib.renderer.xaxis['mirror']->mpltools.get_axis_mirror(bottom_spine, top_spine)
A:plotly.matplotlylib.renderer.yaxis['mirror']->mpltools.get_axis_mirror(left_spine, right_spine)
A:plotly.matplotlylib.renderer.bar_gap->mpltools.get_bar_gap([bar['y0'] for bar in trace], [bar['y1'] for bar in trace])
A:plotly.matplotlylib.renderer.x->mpltools.mpl_dates_to_datestrings(x, formatter)
A:plotly.matplotlylib.renderer.bar->plotly.graph_objs.Bar(orientation=orientation, x=x, y=y, xaxis='x{0}'.format(self.axis_ct), yaxis='y{0}'.format(self.axis_ct), opacity=trace[0]['alpha'], marker=go.Marker(color=trace[0]['facecolor'], line=go.Line(width=trace[0]['edgewidth'])))
A:plotly.matplotlylib.renderer.line->plotly.graph_objs.Line(opacity=props['linestyle']['alpha'], color=props['linestyle']['color'], width=props['linestyle']['linewidth'], dash=mpltools.convert_dash(props['linestyle']['dasharray']))
A:plotly.matplotlylib.renderer.marker->plotly.graph_objs.Marker(opacity=props['markerstyle']['alpha'], color=props['markerstyle']['facecolor'], symbol=mpltools.convert_symbol(props['markerstyle']['marker']), size=props['markerstyle']['markersize'], line=go.Line(color=props['markerstyle']['edgecolor'], width=props['markerstyle']['edgewidth']))
A:plotly.matplotlylib.renderer.marked_line->plotly.graph_objs.Scatter(mode=mode, name=props['label'], x=[xy_pair[0] for xy_pair in props['data']], y=[xy_pair[1] for xy_pair in props['data']], xaxis='x{0}'.format(self.axis_ct), yaxis='y{0}'.format(self.axis_ct), line=line, marker=marker)
A:plotly.matplotlylib.renderer.marked_line['x']->mpltools.mpl_dates_to_datestrings(marked_line['x'], formatter)
A:plotly.matplotlylib.renderer.markerstyle->mpltools.get_markerstyle_from_collection(props)
A:plotly.matplotlylib.renderer.is_bar->mpltools.is_bar(self.current_mpl_ax.containers, **props)
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']['annotations']->plotly.graph_objs.Annotations()
A:plotly.matplotlylib.renderer.(x_px, y_px)->props['mplobj'].get_transform().transform(props['position'])
A:plotly.matplotlylib.renderer.(x, y)->mpltools.display_to_paper(x_px, y_px, self.plotly_fig['layout'])
A:plotly.matplotlylib.renderer.yanchor->mpltools.convert_va(props['style']['valign'])
A:plotly.matplotlylib.renderer.xref->'x{0}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.yref->'y{0}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.annotation->plotly.graph_objs.Annotation(text=props['text'], font=go.Font(color=props['style']['color'], size=props['style']['fontsize']), xref='paper', yref='paper', x=x, y=y, xanchor='center', yanchor='bottom', showarrow=False)
A:plotly.matplotlylib.renderer.titlefont->plotly.graph_objs.Font(size=props['style']['fontsize'], color=props['style']['color'])
A:plotly.matplotlylib.renderer.axis_key->'yaxis{0}'.format(self.axis_ct)
plotly.matplotlylib.PlotlyRenderer(self)
plotly.matplotlylib.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.PlotlyRenderer.draw_bar(self,coll)
plotly.matplotlylib.PlotlyRenderer.draw_bars(self,bars)
plotly.matplotlylib.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.PlotlyRenderer.resize(self)
plotly.matplotlylib.PlotlyRenderer.strip_style(self)
plotly.matplotlylib.renderer.PlotlyRenderer(self)
plotly.matplotlylib.renderer.PlotlyRenderer.__init__(self)
plotly.matplotlylib.renderer.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.renderer.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_bar(self,coll)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_bars(self,bars)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.renderer.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.renderer.PlotlyRenderer.resize(self)
plotly.matplotlylib.renderer.PlotlyRenderer.strip_style(self)
plotly.matplotlylib.renderer.warning_on_one_line(msg,category,filename,lineno,file=None,line=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mpltools.py----------------------------------------
A:plotly.matplotlylib.mpltools.inner_corners->inner_obj.get_window_extent().corners()
A:plotly.matplotlylib.mpltools.outer_corners->outer_obj.get_window_extent().corners()
A:plotly.matplotlylib.mpltools.code->tuple(path[1])
A:plotly.matplotlylib.mpltools.symbol->list()
A:plotly.matplotlylib.mpltools.uniform->all([abs(gap0 - gap) < tol for gap in gaps])
A:plotly.matplotlylib.mpltools.clean_color_list->list()
A:plotly.matplotlylib.mpltools.plotly_colors->list()
A:plotly.matplotlylib.mpltools.symbols->list()
A:plotly.matplotlylib.mpltools.markerstyle->dict(alpha=None, facecolor=convert_rgba_array(props['styles']['facecolor']), marker=convert_path_array(props['paths']), edgewidth=convert_linewidth_array(props['styles']['linewidth']), markersize=convert_size_array(props['mplobj'].get_sizes()), edgecolor=convert_rgba_array(props['styles']['edgecolor']))
A:plotly.matplotlylib.mpltools.ax_frame_on->ax.get_frame_on()
A:plotly.matplotlylib.mpltools.spine_frame_like->spine.is_frame_like()
A:plotly.matplotlylib.mpltools.axis_dict->dict(range=None, type='linear')
A:plotly.matplotlylib.mpltools.axis->ax.get_yaxis()
A:plotly.matplotlylib.mpltools.axis_dict['tick0']->mpl_dates_to_datestrings(axis_dict['tick0'], formatter)
A:plotly.matplotlylib.mpltools.axis_dict['range']->mpl_dates_to_datestrings(props['xlim'], formatter)
A:plotly.matplotlylib.mpltools.xaxis->dict(type=props['axes'][0]['scale'], range=list(props['xlim']), showgrid=props['axes'][0]['grid']['gridOn'], domain=convert_x_domain(props['bounds'], x_bounds), side=props['axes'][0]['position'], tickfont=dict(size=props['axes'][0]['fontsize']))
A:plotly.matplotlylib.mpltools.yaxis->dict(type=props['axes'][1]['scale'], range=list(props['ylim']), showgrid=props['axes'][1]['grid']['gridOn'], domain=convert_y_domain(props['bounds'], y_bounds), side=props['axes'][1]['position'], tickfont=dict(size=props['axes'][1]['fontsize']))
A:plotly.matplotlylib.mpltools.dates->matplotlib.dates.num2date(dates, tz=pytz.utc)
plotly.matplotlylib.mpltools.check_bar_match(old_bar,new_bar)
plotly.matplotlylib.mpltools.check_corners(inner_obj,outer_obj)
plotly.matplotlylib.mpltools.convert_dash(mpl_dash)
plotly.matplotlylib.mpltools.convert_linewidth_array(width_array)
plotly.matplotlylib.mpltools.convert_path(path)
plotly.matplotlylib.mpltools.convert_path_array(path_array)
plotly.matplotlylib.mpltools.convert_rgba_array(color_list)
plotly.matplotlylib.mpltools.convert_size_array(size_array)
plotly.matplotlylib.mpltools.convert_symbol(mpl_symbol)
plotly.matplotlylib.mpltools.convert_va(mpl_va)
plotly.matplotlylib.mpltools.convert_x_domain(mpl_plot_bounds,mpl_max_x_bounds)
plotly.matplotlylib.mpltools.convert_y_domain(mpl_plot_bounds,mpl_max_y_bounds)
plotly.matplotlylib.mpltools.display_to_paper(x,y,layout)
plotly.matplotlylib.mpltools.get_axes_bounds(fig)
plotly.matplotlylib.mpltools.get_axis_mirror(main_spine,mirror_spine)
plotly.matplotlylib.mpltools.get_bar_gap(bar_starts,bar_ends,tol=1e-10)
plotly.matplotlylib.mpltools.get_markerstyle_from_collection(props)
plotly.matplotlylib.mpltools.get_rect_xmax(data)
plotly.matplotlylib.mpltools.get_rect_xmin(data)
plotly.matplotlylib.mpltools.get_rect_ymax(data)
plotly.matplotlylib.mpltools.get_rect_ymin(data)
plotly.matplotlylib.mpltools.get_spine_visible(ax,spine_key)
plotly.matplotlylib.mpltools.is_bar(bar_containers,**props)
plotly.matplotlylib.mpltools.make_bar(**props)
plotly.matplotlylib.mpltools.mpl_dates_to_datestrings(dates,mpl_formatter)
plotly.matplotlylib.mpltools.prep_ticks(ax,index,ax_type,props)
plotly.matplotlylib.mpltools.prep_xy_axis(ax,props,x_bounds,y_bounds)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/exporter.py----------------------------------------
A:plotly.matplotlylib.mplexporter.exporter.data->(transform - force_trans).transform(data)
A:plotly.matplotlylib.mplexporter.exporter.legend->ax.get_legend()
A:plotly.matplotlylib.mplexporter.exporter.props->utils.get_legend_properties(ax, legend)
A:plotly.matplotlylib.mplexporter.exporter.legendElements->list(utils.iter_all_children(legend._legend_box, skipContainers=True))
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, data)->self.process_transform(line.get_transform(), ax, line.get_xydata(), force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.linestyle->utils.get_path_style(patch, fill=patch.get_fill())
A:plotly.matplotlylib.mplexporter.exporter.markerstyle->utils.get_marker_style(line)
A:plotly.matplotlylib.mplexporter.exporter.label->line.get_label()
A:plotly.matplotlylib.mplexporter.exporter.content->text.get_text()
A:plotly.matplotlylib.mplexporter.exporter.transform->patch.get_transform()
A:plotly.matplotlylib.mplexporter.exporter.position->text.get_position()
A:plotly.matplotlylib.mplexporter.exporter.(coords, position)->self.process_transform(transform, ax, position, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.style->utils.get_text_style(text)
A:plotly.matplotlylib.mplexporter.exporter.(vertices, pathcodes)->utils.SVG_path(patch.get_path())
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, vertices)->self.process_transform(transform, ax, vertices, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.(transform, transOffset, offsets, paths)->collection._prepare_points()
A:plotly.matplotlylib.mplexporter.exporter.(offset_coords, offsets)->self.process_transform(transOffset, ax, offsets, force_trans=force_offsettrans)
A:plotly.matplotlylib.mplexporter.exporter.path_coords->self.process_transform(transform, ax, force_trans=force_pathtrans)
A:plotly.matplotlylib.mplexporter.exporter.path_transforms->collection.get_transforms()
plotly.matplotlylib.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.Exporter.run(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.__init__(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.run(self,fig)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/utils.py----------------------------------------
A:plotly.matplotlylib.mplexporter.utils.rgb->matplotlib.colors.colorConverter.to_rgb(color)
A:plotly.matplotlylib.mplexporter.utils.LINESTYLES->many_to_one({('solid', '-', (None, None)): '10,0', ('dashed', '--'): '6,6', ('dotted', ':'): '2,2', ('dashdot', '-.'): '4,4,2,4', ('', ' ', 'None', 'none'): 'none'})
A:plotly.matplotlylib.mplexporter.utils.ls->obj.get_linestyle()
A:plotly.matplotlylib.mplexporter.utils.dasharray->get_dasharray(gridlines[0])
A:plotly.matplotlylib.mplexporter.utils.path->path.transformed(transform).transformed(transform)
A:plotly.matplotlylib.mplexporter.utils.(vertices, codes)->zip(*vc_tuples)
A:plotly.matplotlylib.mplexporter.utils.vertices->numpy.array(list(itertools.chain(*vertices))).reshape(-1, 2)
A:plotly.matplotlylib.mplexporter.utils.style['alpha']->text.get_alpha()
A:plotly.matplotlylib.mplexporter.utils.style['edgecolor']->color_to_hex(line.get_markeredgecolor())
A:plotly.matplotlylib.mplexporter.utils.style['facecolor']->color_to_hex(line.get_markerfacecolor())
A:plotly.matplotlylib.mplexporter.utils.style['edgewidth']->line.get_markeredgewidth()
A:plotly.matplotlylib.mplexporter.utils.style['dasharray']->get_dasharray(line)
A:plotly.matplotlylib.mplexporter.utils.style['zorder']->text.get_zorder()
A:plotly.matplotlylib.mplexporter.utils.style['color']->color_to_hex(text.get_color())
A:plotly.matplotlylib.mplexporter.utils.style['linewidth']->line.get_linewidth()
A:plotly.matplotlylib.mplexporter.utils.style['marker']->line.get_marker()
A:plotly.matplotlylib.mplexporter.utils.markerstyle->MarkerStyle(line.get_marker())
A:plotly.matplotlylib.mplexporter.utils.markersize->line.get_markersize()
A:plotly.matplotlylib.mplexporter.utils.style['markerpath']->SVG_path(markerstyle.get_path(), markertransform)
A:plotly.matplotlylib.mplexporter.utils.style['fontsize']->text.get_size()
A:plotly.matplotlylib.mplexporter.utils.style['halign']->text.get_horizontalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['valign']->text.get_verticalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['rotation']->text.get_rotation()
A:plotly.matplotlylib.mplexporter.utils.label1On->getattr(ax, axname + 'axis')._major_tick_kw.get('label1On', True)
A:plotly.matplotlylib.mplexporter.utils.locator->getattr(ax, axname + 'axis').get_major_locator()
A:plotly.matplotlylib.mplexporter.utils.props['nticks']->len(locator())
A:plotly.matplotlylib.mplexporter.utils.props['tickvalues']->list(locator())
A:plotly.matplotlylib.mplexporter.utils.formatter->getattr(ax, axname + 'axis').get_major_formatter()
A:plotly.matplotlylib.mplexporter.utils.props['scale']->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.labels->getattr(ax, axname + 'axis').get_ticklabels()
A:plotly.matplotlylib.mplexporter.utils.props['fontsize']->labels[0].get_fontsize()
A:plotly.matplotlylib.mplexporter.utils.props['grid']->get_grid_style(axis)
A:plotly.matplotlylib.mplexporter.utils.gridlines->getattr(ax, axname + 'axis').get_gridlines()
A:plotly.matplotlylib.mplexporter.utils.color->color_to_hex(gridlines[0].get_color())
A:plotly.matplotlylib.mplexporter.utils.alpha->gridlines[0].get_alpha()
A:plotly.matplotlylib.mplexporter.utils.axis->getattr(ax, axname + 'axis')
A:plotly.matplotlylib.mplexporter.utils.domain->getattr(ax, 'get_{0}lim'.format(axname))()
A:plotly.matplotlylib.mplexporter.utils.scale->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.(handles, labels)->ax.get_legend_handles_labels()
A:plotly.matplotlylib.mplexporter.utils.visible->legend.get_visible()
A:plotly.matplotlylib.mplexporter.utils.binary_buffer->io.BytesIO()
A:plotly.matplotlylib.mplexporter.utils.lim->ax.axis()
plotly.matplotlylib.mplexporter.utils.SVG_path(path,transform=None,simplify=False)
plotly.matplotlylib.mplexporter.utils.color_to_hex(color)
plotly.matplotlylib.mplexporter.utils.get_axes_properties(ax)
plotly.matplotlylib.mplexporter.utils.get_axis_properties(axis)
plotly.matplotlylib.mplexporter.utils.get_dasharray(obj,i=None)
plotly.matplotlylib.mplexporter.utils.get_figure_properties(fig)
plotly.matplotlylib.mplexporter.utils.get_grid_style(axis)
plotly.matplotlylib.mplexporter.utils.get_legend_properties(ax,legend)
plotly.matplotlylib.mplexporter.utils.get_line_style(line)
plotly.matplotlylib.mplexporter.utils.get_marker_style(line)
plotly.matplotlylib.mplexporter.utils.get_path_style(path,fill=True)
plotly.matplotlylib.mplexporter.utils.get_text_style(text)
plotly.matplotlylib.mplexporter.utils.image_to_base64(image)
plotly.matplotlylib.mplexporter.utils.iter_all_children(obj,skipContainers=False)
plotly.matplotlylib.mplexporter.utils.many_to_one(input_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/tools.py----------------------------------------
A:plotly.matplotlylib.mplexporter.tools.load_js->require_js.format(dep_libs)
plotly.matplotlylib.mplexporter.tools.ipynb_vega_init()


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/_py3k_compat.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/fake_renderer.py----------------------------------------
plotly.matplotlylib.mplexporter.renderers.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.__init__(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/vega_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.dataname->'table{0:03d}'.format(len(self.data) + 1)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.specification->dict(width=renderer.figwidth, height=renderer.figheight, data=renderer.data, scales=renderer.scales, axes=renderer.axes, marks=renderer.marks)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.id->random.randint(0, 2 ** 16)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.renderer->VegaRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.vega_html->VegaHTML(renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vega(fig,notebook=False)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.__init__(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML._repr_html_(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.html(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.fig_to_vega(fig,notebook=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/vincent_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.line->vincent.Line(linedata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.markers->vincent.Scatter(markerdata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.renderer->VincentRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.exporter->Exporter(renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vincent(fig)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.fig_to_vincent(fig)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/base.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth']))
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgecolor']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('color')
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgewidth']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('linewidth')
A:plotly.matplotlylib.mplexporter.renderers.base.N->max(len(paths), len(offsets))
A:plotly.matplotlylib.mplexporter.renderers.base.path_transform->matplotlib.transforms.Affine2D(path_transform)
A:plotly.matplotlylib.mplexporter.renderers.base.vertices->matplotlib.transforms.Affine2D(path_transform).transform(vertices)
plotly.matplotlylib.mplexporter.Renderer(object)
plotly.matplotlylib.mplexporter.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer(object)
plotly.matplotlylib.mplexporter.renderers.base.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_legend(self,legend,props)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/grid_objs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.6.6/lib/python3.6/site-packages/plotly/grid_objs/grid_objs.py----------------------------------------
A:plotly.grid_objs.grid_objs.jdata->json.dumps(self.data, cls=utils.PlotlyJSONEncoder)
A:plotly.grid_objs.grid_objs.duplicate_name->plotly.utils.get_first_duplicate(column_names)
A:plotly.grid_objs.grid_objs.err->plotly.exceptions.NON_UNIQUE_COLUMN_MESSAGE.format(column.name)
A:plotly.grid_objs.grid_objs.self._columns->list(iterable_of_columns)
plotly.grid_objs.Column(self,data,name)
plotly.grid_objs.Column.__repr__(self)
plotly.grid_objs.Column.__str__(self)
plotly.grid_objs.Column.to_plotly_json(self)
plotly.grid_objs.Grid(self,iterable_of_columns)
plotly.grid_objs.Grid.__delitem__(self,index)
plotly.grid_objs.Grid.__getitem__(self,index)
plotly.grid_objs.Grid.__len__(self)
plotly.grid_objs.Grid.__repr__(self)
plotly.grid_objs.Grid.__setitem__(self,index,column)
plotly.grid_objs.Grid._to_plotly_grid_json(self)
plotly.grid_objs.Grid._validate_insertion(self,column)
plotly.grid_objs.Grid.get_column(self,column_name)
plotly.grid_objs.Grid.insert(self,index,column)
plotly.grid_objs.grid_objs.Column(self,data,name)
plotly.grid_objs.grid_objs.Column.__init__(self,data,name)
plotly.grid_objs.grid_objs.Column.__repr__(self)
plotly.grid_objs.grid_objs.Column.__str__(self)
plotly.grid_objs.grid_objs.Column.to_plotly_json(self)
plotly.grid_objs.grid_objs.Grid(self,iterable_of_columns)
plotly.grid_objs.grid_objs.Grid.__delitem__(self,index)
plotly.grid_objs.grid_objs.Grid.__getitem__(self,index)
plotly.grid_objs.grid_objs.Grid.__init__(self,iterable_of_columns)
plotly.grid_objs.grid_objs.Grid.__len__(self)
plotly.grid_objs.grid_objs.Grid.__repr__(self)
plotly.grid_objs.grid_objs.Grid.__setitem__(self,index,column)
plotly.grid_objs.grid_objs.Grid._to_plotly_grid_json(self)
plotly.grid_objs.grid_objs.Grid._validate_insertion(self,column)
plotly.grid_objs.grid_objs.Grid.get_column(self,column_name)
plotly.grid_objs.grid_objs.Grid.insert(self,index,column)

