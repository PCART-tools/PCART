
----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/utils.py----------------------------------------
A:plotly.utils.data->json.load(f)
A:plotly.utils.l->obj.tolist()
A:plotly.utils.d->self.datetimeJSONEncoder(l)
A:plotly.utils.s->encoder(obj)
A:plotly.utils.coll[no]->str(entry)
A:plotly.utils.coll[key]->str(val)
A:plotly.utils.coll[str(key)]->coll.pop(key)
A:plotly.utils.func.__doc__->func.__doc__.format(**names)
plotly.utils._plotlyJSONEncoder(json.JSONEncoder)
plotly.utils._plotlyJSONEncoder.datetimeJSONEncoder(self,obj)
plotly.utils._plotlyJSONEncoder.default(self,obj)
plotly.utils._plotlyJSONEncoder.numpyJSONEncoder(self,obj)
plotly.utils._plotlyJSONEncoder.pandasJSONEncoder(self,obj)
plotly.utils._plotlyJSONEncoder.sageJSONEncoder(self,obj)
plotly.utils.decode_unicode(coll)
plotly.utils.load_json_dict(filename,*args)
plotly.utils.save_json_dict(filename,json_dict)
plotly.utils.template_doc(**names)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/exceptions.py----------------------------------------
A:plotly.exceptions.message->"The entry at index, '{}', is invalid because it does not contain a valid 'type' key-value. This is required for valid '{}' lists.".format(index, obj.__class__.__name__)
A:plotly.exceptions.plain_message->"The entry at index, '{}', is invalid because it does not contain a valid 'type' key-value. This is required for valid data lists.".format(index)
plotly.exceptions.PlotlyAccountError(PlotlyServerError)
plotly.exceptions.PlotlyConnectionError(PlotlyServerError)
plotly.exceptions.PlotlyCredentialError(PlotlyServerError)
plotly.exceptions.PlotlyDataTypeError(self,obj='',index='',**kwargs)
plotly.exceptions.PlotlyDataTypeError.__init__(self,obj='',index='',**kwargs)
plotly.exceptions.PlotlyDictKeyError(self,obj='',key='',**kwargs)
plotly.exceptions.PlotlyDictKeyError.__init__(self,obj='',key='',**kwargs)
plotly.exceptions.PlotlyDictValueError(self,obj='',key='',value='',val_types='',**kwargs)
plotly.exceptions.PlotlyDictValueError.__init__(self,obj='',key='',value='',val_types='',**kwargs)
plotly.exceptions.PlotlyError(Exception)
plotly.exceptions.PlotlyGraphObjectError(self,message='',path=None,notes=None,plain_message='')
plotly.exceptions.PlotlyGraphObjectError.__init__(self,message='',path=None,notes=None,plain_message='')
plotly.exceptions.PlotlyGraphObjectError.add_note(self,note)
plotly.exceptions.PlotlyGraphObjectError.add_to_error_path(self,path)
plotly.exceptions.PlotlyGraphObjectError.prepare(self)
plotly.exceptions.PlotlyListEntryError(self,obj='',index='',entry='',**kwargs)
plotly.exceptions.PlotlyListEntryError.__init__(self,obj='',index='',entry='',**kwargs)
plotly.exceptions.PlotlyLocalCredentialsError(self)
plotly.exceptions.PlotlyLocalCredentialsError.__init__(self)
plotly.exceptions.PlotlyLocalError(PlotlyError)
plotly.exceptions.PlotlyRateLimitError(PlotlyServerError)
plotly.exceptions.PlotlyServerError(PlotlyError)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/tools.py----------------------------------------
A:plotly.tools.PLOTLY_DIR->os.path.join(os.path.expanduser('~'), '.plotly')
A:plotly.tools.CREDENTIALS_FILE->os.path.join(PLOTLY_DIR, '.credentials')
A:plotly.tools.CONFIG_FILE->os.path.join(PLOTLY_DIR, '.config')
A:plotly.tools.TEST_DIR->os.path.join(os.path.expanduser('~'), '.test')
A:plotly.tools.TEST_FILE->os.path.join(PLOTLY_DIR, '.permission_test')
A:plotly.tools.f->open(CONFIG_FILE, 'w')
A:plotly.tools.contents->utils.load_json_dict(fn)
A:plotly.tools.contents_keys->list(contents.keys())
A:plotly.tools.credentials->get_credentials_file()
A:plotly.tools.settings->get_config_file()
A:plotly.tools.s->get_embed(username, plot_id, width, height)
A:plotly.tools.renderer->matplotlylib.PlotlyRenderer()
A:plotly.tools.fig->dict(layout=graph_objs.Layout())
A:plotly.tools.xaxis_name->'xaxis{}'.format(plot_num + 1)
A:plotly.tools.x_anchor->'y{}'.format(plot_num + 1)
A:plotly.tools.yaxis_name->'yaxis{}'.format(plot_num + 1)
A:plotly.tools.y_anchor->'x{}'.format(plot_num + 1)
A:plotly.tools.xaxis->graph_objs.graph_objs.XAxis(domain=[x_start, x_end], anchor=x_anchor)
A:plotly.tools.yaxis->graph_objs.graph_objs.YAxis(domain=[y_start, y_end], anchor=y_anchor)
A:plotly.tools.new_obj->graph_objs.graph_objs.NAME_TO_CLASS[obj_type]()
A:plotly.tools.test_obj->graph_objs.graph_objs.NAME_TO_CLASS[obj_type](obj)
plotly.tools.check_file_permissions()
plotly.tools.embed(username,plot_id,width='100%',height=525)
plotly.tools.ensure_local_plotly_files()
plotly.tools.get_config_file(*args)
plotly.tools.get_credentials_file(*args)
plotly.tools.get_embed(username,plot_id,width='100%',height=525)
plotly.tools.get_subplots(rows=1,columns=1,horizontal_spacing=0.1,vertical_spacing=0.15,print_grid=False)
plotly.tools.get_valid_graph_obj(obj,obj_type=None)
plotly.tools.mpl_to_plotly(fig,resize=False,strip_style=False,verbose=False)
plotly.tools.reset_config_file()
plotly.tools.reset_credentials_file()
plotly.tools.set_config_file(plotly_domain=None,plotly_streaming_domain=None)
plotly.tools.set_credentials_file(username=None,api_key=None,stream_ids=None)
plotly.tools.validate(obj,obj_type)
plotly.tools.validate_stream(obj,obj_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/graph_objs/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/graph_objs/graph_objs.py----------------------------------------
A:plotly.graph_objs.graph_objs.s->resource_string('plotly', 'graph_reference/graph_objs_meta.json').decode('utf-8')
A:plotly.graph_objs.graph_objs.INFO->utils.decode_unicode(INFO)
A:plotly.graph_objs.graph_objs.KEY_TO_NAME->dict(plotlylist='PlotlyList', data='Data', angularaxis='AngularAxis', annotations='Annotations', area='Area', plotlydict='PlotlyDict', plotlytrace='PlotlyTrace', bar='Bar', box='Box', contour='Contour', heatmap='Heatmap', histogram='Histogram', histogram2d='Histogram2d', histogram2dcontour='Histogram2dContour', scatter='Scatter', annotation='Annotation', colorbar='ColorBar', contours='Contours', error_x='ErrorX', error_y='ErrorY', figure='Figure', font='Font', layout='Layout', legend='Legend', line='Line', margin='Margin', marker='Marker', radialaxis='RadialAxis', stream='Stream', trace='Trace', textfont='Font', tickfont='Font', titlefont='Font', xaxis='XAxis', xbins='XBins', yaxis='YAxis', ybins='YBins')
A:plotly.graph_objs.graph_objs.NAME_TO_KEY->dict(PlotlyList='plotlylist', Data='data', AngularAxis='angularaxis', Annotations='annotations', PlotlyDict='plotlydict', PlotlyTrace='plotlytrace', Area='area', Bar='bar', Box='box', Contour='contour', Heatmap='heatmap', Histogram='histogram', Histogram2d='histogram2d', Histogram2dContour='histogram2dcontour', Scatter='scatter', Annotation='annotation', ColorBar='colorbar', Contours='contours', ErrorX='error_x', ErrorY='error_y', Figure='figure', Font='font', Layout='layout', Legend='legend', Line='line', Margin='margin', Marker='marker', RadialAxis='radialaxis', Stream='stream', Trace='trace', XAxis='xaxis', XBins='xbins', YAxis='yaxis', YBins='ybins')
A:plotly.graph_objs.graph_objs.min_indent->min([len(a) - len(b) for (a, b) in zip(doc.splitlines(), [l.lstrip() for l in doc.splitlines()])])
A:plotly.graph_objs.graph_objs.doc->''.join([line[min_indent:] + '\n' for line in doc.splitlines()])
A:plotly.graph_objs.graph_objs.attrs['__doc__']->''.join([line[min_indent:] + '\n' for line in doc.splitlines()]).expandtabs(tab_size)
A:plotly.graph_objs.graph_objs.required->str(obj_info[key]['required'])
A:plotly.graph_objs.graph_objs.typ->str(obj_info[key]['type'])
A:plotly.graph_objs.graph_objs.val_types->str(obj_info[key]['val_types'])
A:plotly.graph_objs.graph_objs.descr->str(obj_info[key]['description'])
A:plotly.graph_objs.graph_objs.str_1->'{} [required={}] (value={}):\n'.format(key, required, val_types)
A:plotly.graph_objs.graph_objs.l->list()
A:plotly.graph_objs.graph_objs.string->'{name}('.format(name=self.__class__.__name__)
A:plotly.graph_objs.graph_objs.keys->list(self.keys())
A:plotly.graph_objs.graph_objs.d->dict()
A:plotly.graph_objs.graph_objs.d[key]->repr(self[key]).get_data()
A:plotly.graph_objs.graph_objs.obj->YAxis()
A:plotly.graph_objs.graph_objs.val->repr(self[key])
A:plotly.graph_objs.graph_objs.ordered_dict->collections.OrderedDict()
A:plotly.graph_objs.graph_objs.ordered_dict[key]->self[key].get_ordered(caller=False)
A:plotly.graph_objs.graph_objs.self[index]->NAME_TO_CLASS[entry.__class__.__name__](entry)
A:plotly.graph_objs.graph_objs.trace_type->self.pop('type')
A:plotly.graph_objs.graph_objs.kwargs['data']->Data()
A:plotly.graph_objs.graph_objs.kwargs['layout']->Layout()
A:plotly.graph_objs.graph_objs.axis_int->int(key[5:])
A:plotly.graph_objs.graph_objs.test_if_int->int(key[5:])
A:plotly.graph_objs.graph_objs.NAME_TO_CLASS->dict(PlotlyList=PlotlyList, Data=Data, Annotations=Annotations, PlotlyDict=PlotlyDict, PlotlyTrace=PlotlyTrace, Area=Area, Bar=Bar, Box=Box, Contour=Contour, Heatmap=Heatmap, Histogram=Histogram, Histogram2d=Histogram2d, Histogram2dContour=Histogram2dContour, Scatter=Scatter, AngularAxis=AngularAxis, Annotation=Annotation, ColorBar=ColorBar, Contours=Contours, ErrorX=ErrorX, ErrorY=ErrorY, Figure=Figure, Font=Font, Layout=Layout, Legend=Legend, Line=Line, Margin=Margin, Marker=Marker, RadialAxis=RadialAxis, Stream=Stream, Trace=Trace, XAxis=XAxis, XBins=XBins, YAxis=YAxis, YBins=YBins)
plotly.AngularAxis(PlotlyDict)
plotly.Annotation(PlotlyDict)
plotly.Annotations(PlotlyList)
plotly.Annotations.to_graph_objs(self,caller=True)
plotly.Area(PlotlyTrace)
plotly.Bar(PlotlyTrace)
plotly.Box(PlotlyTrace)
plotly.ColorBar(PlotlyDict)
plotly.Contour(PlotlyTrace)
plotly.Contours(PlotlyDict)
plotly.Data(PlotlyList)
plotly.Data.to_graph_objs(self,caller=True)
plotly.DictMeta(mcs,name,bases,attrs)
plotly.ErrorX(PlotlyDict)
plotly.ErrorY(PlotlyDict)
plotly.Figure(self,*args,**kwargs)
plotly.Font(PlotlyDict)
plotly.Heatmap(PlotlyTrace)
plotly.Histogram(PlotlyTrace)
plotly.Histogram2d(PlotlyTrace)
plotly.Histogram2dContour(PlotlyTrace)
plotly.Layout(self,*args,**kwargs)
plotly.Layout.force_clean(self,caller=True)
plotly.Layout.to_graph_objs(self,caller=True)
plotly.Layout.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.Legend(PlotlyDict)
plotly.Line(PlotlyDict)
plotly.ListMeta(mcs,name,bases,attrs)
plotly.Margin(PlotlyDict)
plotly.Marker(PlotlyDict)
plotly.PlotlyDict(self,*args,**kwargs)
plotly.PlotlyDict.force_clean(self,caller=True)
plotly.PlotlyDict.get_data(self)
plotly.PlotlyDict.get_ordered(self,caller=True)
plotly.PlotlyDict.strip_style(self)
plotly.PlotlyDict.to_graph_objs(self,caller=True)
plotly.PlotlyDict.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.PlotlyDict.update(self,dict1=None,**dict2)
plotly.PlotlyDict.validate(self,caller=True)
plotly.PlotlyList(self,*args)
plotly.PlotlyList.force_clean(self,caller=True)
plotly.PlotlyList.get_data(self)
plotly.PlotlyList.get_ordered(self,caller=True)
plotly.PlotlyList.strip_style(self)
plotly.PlotlyList.to_graph_objs(self,caller=True)
plotly.PlotlyList.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.PlotlyList.update(self,changes)
plotly.PlotlyList.validate(self,caller=True)
plotly.PlotlyTrace(self,*args,**kwargs)
plotly.PlotlyTrace.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.RadialAxis(PlotlyDict)
plotly.Scatter(PlotlyTrace)
plotly.Stream(PlotlyDict)
plotly.Trace(PlotlyTrace)
plotly.XAxis(PlotlyDict)
plotly.XBins(PlotlyDict)
plotly.YAxis(PlotlyDict)
plotly.YBins(PlotlyDict)
plotly.graph_objs.graph_objs.AngularAxis(PlotlyDict)
plotly.graph_objs.graph_objs.Annotation(PlotlyDict)
plotly.graph_objs.graph_objs.Annotations(PlotlyList)
plotly.graph_objs.graph_objs.Annotations.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.Area(PlotlyTrace)
plotly.graph_objs.graph_objs.Bar(PlotlyTrace)
plotly.graph_objs.graph_objs.Box(PlotlyTrace)
plotly.graph_objs.graph_objs.ColorBar(PlotlyDict)
plotly.graph_objs.graph_objs.Contour(PlotlyTrace)
plotly.graph_objs.graph_objs.Contours(PlotlyDict)
plotly.graph_objs.graph_objs.Data(PlotlyList)
plotly.graph_objs.graph_objs.Data.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.DictMeta(mcs,name,bases,attrs)
plotly.graph_objs.graph_objs.DictMeta.__new__(mcs,name,bases,attrs)
plotly.graph_objs.graph_objs.ErrorX(PlotlyDict)
plotly.graph_objs.graph_objs.ErrorY(PlotlyDict)
plotly.graph_objs.graph_objs.Figure(self,*args,**kwargs)
plotly.graph_objs.graph_objs.Figure.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.Font(PlotlyDict)
plotly.graph_objs.graph_objs.Heatmap(PlotlyTrace)
plotly.graph_objs.graph_objs.Histogram(PlotlyTrace)
plotly.graph_objs.graph_objs.Histogram2d(PlotlyTrace)
plotly.graph_objs.graph_objs.Histogram2dContour(PlotlyTrace)
plotly.graph_objs.graph_objs.Layout(self,*args,**kwargs)
plotly.graph_objs.graph_objs.Layout.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.Layout.force_clean(self,caller=True)
plotly.graph_objs.graph_objs.Layout.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.Layout.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.Legend(PlotlyDict)
plotly.graph_objs.graph_objs.Line(PlotlyDict)
plotly.graph_objs.graph_objs.ListMeta(mcs,name,bases,attrs)
plotly.graph_objs.graph_objs.ListMeta.__new__(mcs,name,bases,attrs)
plotly.graph_objs.graph_objs.Margin(PlotlyDict)
plotly.graph_objs.graph_objs.Marker(PlotlyDict)
plotly.graph_objs.graph_objs.PlotlyDict(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.force_clean(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.get_data(self)
plotly.graph_objs.graph_objs.PlotlyDict.get_ordered(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyDict.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyDict.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyDict.update(self,dict1=None,**dict2)
plotly.graph_objs.graph_objs.PlotlyDict.validate(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList(self,*args)
plotly.graph_objs.graph_objs.PlotlyList.__init__(self,*args)
plotly.graph_objs.graph_objs.PlotlyList.force_clean(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.get_data(self)
plotly.graph_objs.graph_objs.PlotlyList.get_ordered(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyList.to_graph_objs(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyList.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyList.update(self,changes)
plotly.graph_objs.graph_objs.PlotlyList.validate(self,caller=True)
plotly.graph_objs.graph_objs.PlotlyTrace(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyTrace.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyTrace.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.RadialAxis(PlotlyDict)
plotly.graph_objs.graph_objs.Scatter(PlotlyTrace)
plotly.graph_objs.graph_objs.Stream(PlotlyDict)
plotly.graph_objs.graph_objs.Trace(PlotlyTrace)
plotly.graph_objs.graph_objs.XAxis(PlotlyDict)
plotly.graph_objs.graph_objs.XBins(PlotlyDict)
plotly.graph_objs.graph_objs.YAxis(PlotlyDict)
plotly.graph_objs.graph_objs.YBins(PlotlyDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/plotly/plotly.py----------------------------------------
A:plotly.plotly.plotly._DEFAULT_PLOT_OPTIONS->dict(filename='plot from API', fileopt='new', world_readable=True, auto_open=True, validate=True)
A:plotly.plotly.plotly._credentials->dict()
A:plotly.plotly.plotly._plot_options->dict()
A:plotly.plotly.plotly.res->requests.post(url, data=json.dumps(figure, cls=utils._plotlyJSONEncoder), headers=headers)
A:plotly.plotly.plotly.urlsplit->requests.post(url, data=json.dumps(figure, cls=utils._plotlyJSONEncoder), headers=headers).split('/')
A:plotly.plotly.plotly.embed_options->dict()
A:plotly.plotly.plotly.options->dict()
A:plotly.plotly.plotly.plot_options->_plot_option_logic(plot_options)
A:plotly.plotly.plotly.fig->tools.mpl_to_plotly(fig, resize=resize, strip_style=strip_style)
A:plotly.plotly.plotly.resource->'/apigetfile/{username}/{file_id}'.format(username=file_owner, file_id=file_id)
A:plotly.plotly.plotly.(username, api_key)->_validation_key_logic()
A:plotly.plotly.plotly.test_if_int->int(file_id)
A:plotly.plotly.plotly.response->requests.get(plotly_rest_url + resource, headers=headers)
A:plotly.plotly.plotly.content->json.loads(response.content)
A:plotly.plotly.plotly.self._stream->chunked_requests.Stream(streaming_url, 80, {'Host': streaming_url, 'plotly-streamtoken': self.stream_id})
A:plotly.plotly.plotly.stream_object->dict()
A:plotly.plotly.plotly.jdata->json.dumps(stream_object, cls=utils._plotlyJSONEncoder)
A:plotly.plotly.plotly.return_data->json.loads(res.content)
A:plotly.plotly.plotly.img->base64.b64decode(img)
A:plotly.plotly.plotly.(base, ext)->os.path.splitext(filename)
A:plotly.plotly.plotly.f->open(filename, 'w')
A:plotly.plotly.plotly.data->json.dumps(figure['data'] if 'data' in figure else [], cls=utils._plotlyJSONEncoder)
A:plotly.plotly.plotly.file_credentials->tools.get_credentials_file()
A:plotly.plotly.plotly.kwargs->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], layout=figure['layout'] if 'layout' in figure else {}), cls=utils._plotlyJSONEncoder)
A:plotly.plotly.plotly.payload->dict(platform='python', version=version.__version__, args=data, un=username, key=api_key, origin='plot', kwargs=kwargs)
A:plotly.plotly.plotly.r->json.loads(r.text)
A:plotly.plotly.plotly.creds_on_file->tools.get_credentials_file()
Stream(self,stream_id)
Stream.close(self)
Stream.open(self)
Stream.write(self,data,layout=None,validate=True,reconnect_on=(200,'',408))
_plot_option_logic(plot_options)
_send_to_plotly(figure,**plot_options)
_validation_key_logic()
get_credentials()
get_figure(file_owner_or_url,file_id=None,raw=False)
get_plot_options()
image
image.get(figure)
image.ishow(cls,figure)
image.save_as(cls,figure,filename)
iplot(figure_or_data,**plot_options)
iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plot(figure_or_data,validate=True,**plot_options)
plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.Stream(self,stream_id)
plotly.plotly.plotly.Stream.__init__(self,stream_id)
plotly.plotly.plotly.Stream.close(self)
plotly.plotly.plotly.Stream.open(self)
plotly.plotly.plotly.Stream.write(self,data,layout=None,validate=True,reconnect_on=(200,'',408))
plotly.plotly.plotly._plot_option_logic(plot_options)
plotly.plotly.plotly._send_to_plotly(figure,**plot_options)
plotly.plotly.plotly._validation_key_logic()
plotly.plotly.plotly.get_credentials()
plotly.plotly.plotly.get_figure(file_owner_or_url,file_id=None,raw=False)
plotly.plotly.plotly.get_plot_options()
plotly.plotly.plotly.image
plotly.plotly.plotly.image.get(figure)
plotly.plotly.plotly.image.ishow(cls,figure)
plotly.plotly.plotly.image.save_as(cls,figure,filename)
plotly.plotly.plotly.iplot(figure_or_data,**plot_options)
plotly.plotly.plotly.iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.plot(figure_or_data,validate=True,**plot_options)
plotly.plotly.plotly.plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.sign_in(username,api_key)
plotly.plotly.plotly.update_plot_options(**kwargs)
sign_in(username,api_key)
update_plot_options(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/plotly/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/plotly/chunked_requests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/plotly/chunked_requests/chunked_request.py----------------------------------------
A:plotly.plotly.chunked_requests.chunked_request.response->http.client.HTTPResponse(_FakeSocket(response))
A:plotly.plotly.chunked_requests.chunked_request.msglen->format(len(msg), 'x')
A:plotly.plotly.chunked_requests.chunked_request.self._conn->http.client.HTTPConnection(server, port)
A:plotly.plotly.chunked_requests.chunked_request.bytes->self._conn.sock.recv(1)
A:plotly.plotly.chunked_requests.chunked_request.self._bytes->self._conn.sock.recv(1)
chunked_requests.Stream(self,server,port=80,headers={})
chunked_requests.Stream._connect(self)
chunked_requests.Stream._getresponse(self)
chunked_requests.Stream._isconnected(self)
chunked_requests.Stream._reconnect(self)
chunked_requests.Stream._reset_retries(self)
chunked_requests.Stream.close(self)
chunked_requests.Stream.write(self,data,reconnect_on=('',200))
chunked_requests.chunked_request._FakeSocket(io.StringIO)
chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)
plotly.plotly.chunked_requests.chunked_request.Stream(self,server,port=80,headers={})
plotly.plotly.chunked_requests.chunked_request.Stream.__init__(self,server,port=80,headers={})
plotly.plotly.chunked_requests.chunked_request.Stream._connect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._getresponse(self)
plotly.plotly.chunked_requests.chunked_request.Stream._isconnected(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reconnect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reset_retries(self)
plotly.plotly.chunked_requests.chunked_request.Stream.close(self)
plotly.plotly.chunked_requests.chunked_request.Stream.write(self,data,reconnect_on=('',200))
plotly.plotly.chunked_requests.chunked_request._FakeSocket(io.StringIO)
plotly.plotly.chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/renderer.py----------------------------------------
A:plotly.matplotlylib.renderer.self.plotly_fig->Figure(data=Data(), layout=Layout())
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']->Layout(width=int(props['figwidth'] * props['dpi']), height=int(props['figheight'] * props['dpi']), autosize=False, hovermode='closest')
A:plotly.matplotlylib.renderer.(self.mpl_x_bounds, self.mpl_y_bounds)->mpltools.get_axes_bounds(fig)
A:plotly.matplotlylib.renderer.margin->Margin(l=int(self.mpl_x_bounds[0] * self.plotly_fig['layout']['width']), r=int((1 - self.mpl_x_bounds[1]) * self.plotly_fig['layout']['width']), t=int((1 - self.mpl_y_bounds[1]) * self.plotly_fig['layout']['height']), b=int(self.mpl_y_bounds[0] * self.plotly_fig['layout']['height']), pad=0)
A:plotly.matplotlylib.renderer.xaxis->XAxis(anchor='y{}'.format(self.axis_ct), zeroline=False, showline=True, mirror='ticks', ticks='inside')
A:plotly.matplotlylib.renderer.yaxis->YAxis(anchor='x{}'.format(self.axis_ct), zeroline=False, showline=True, mirror='ticks', ticks='inside')
A:plotly.matplotlylib.renderer.(mpl_xaxis, mpl_yaxis)->mpltools.prep_xy_axis(ax=ax, props=props, x_bounds=self.mpl_x_bounds, y_bounds=self.mpl_y_bounds)
A:plotly.matplotlylib.renderer.bar_gap->mpltools.get_bar_gap([bar['y0'] for bar in patch_coll], [bar['y1'] for bar in patch_coll])
A:plotly.matplotlylib.renderer.bar->mpltools.make_bar(orientation='h', **props)
A:plotly.matplotlylib.renderer.line->Line(opacity=props['linestyle']['alpha'], color=props['linestyle']['color'], width=props['linestyle']['linewidth'], dash=mpltools.convert_dash(props['linestyle']['dasharray']))
A:plotly.matplotlylib.renderer.marker->mpltools.convert_path(props['paths'][0])
A:plotly.matplotlylib.renderer.marked_line->Scatter(mode=mode, name=props['label'], x=[xy_pair[0] for xy_pair in props['data']], y=[xy_pair[1] for xy_pair in props['data']], xaxis='x{}'.format(self.axis_ct), yaxis='y{}'.format(self.axis_ct), line=line, marker=marker)
A:plotly.matplotlylib.renderer.is_bar->mpltools.is_bar(**props)
A:plotly.matplotlylib.renderer.is_barh->mpltools.is_barh(**props)
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']['annotations']->Annotations()
A:plotly.matplotlylib.renderer.(x_px, y_px)->props['mplobj'].get_transform().transform(props['position'])
A:plotly.matplotlylib.renderer.(x, y)->mpltools.display_to_paper(x_px, y_px, self.plotly_fig['layout'])
A:plotly.matplotlylib.renderer.yanchor->mpltools.convert_va(props['style']['valign'])
A:plotly.matplotlylib.renderer.xref->'x{}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.yref->'y{}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.annotation->Annotation(text=props['text'], font=Font(color=props['style']['color'], size=props['style']['fontsize']), xref='paper', yref='paper', x=x, y=y, xanchor='center', yanchor='bottom', showarrow=False)
A:plotly.matplotlylib.renderer.titlefont->Font(size=props['style']['fontsize'], color=props['style']['color'])
A:plotly.matplotlylib.renderer.axis_key->'yaxis{}'.format(self.axis_ct)
plotly.matplotlylib.PlotlyRenderer(self)
plotly.matplotlylib.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.PlotlyRenderer.draw_bar(self,patch_coll)
plotly.matplotlylib.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.file_bar(self,bar)
plotly.matplotlylib.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.PlotlyRenderer.resize(self)
plotly.matplotlylib.PlotlyRenderer.strip_style(self)
plotly.matplotlylib.renderer.PlotlyRenderer(self)
plotly.matplotlylib.renderer.PlotlyRenderer.__init__(self)
plotly.matplotlylib.renderer.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.renderer.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_bar(self,patch_coll)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.file_bar(self,bar)
plotly.matplotlylib.renderer.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.renderer.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.renderer.PlotlyRenderer.resize(self)
plotly.matplotlylib.renderer.PlotlyRenderer.strip_style(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mpltools.py----------------------------------------
A:plotly.matplotlylib.mpltools.code->tuple(path[1])
A:plotly.matplotlylib.mpltools.uniform->all([abs(gap0 - gap) < tol for gap in gaps])
A:plotly.matplotlylib.mpltools.axis->dict(range=None, type='linear')
A:plotly.matplotlylib.mpltools.xaxis->dict(type=props['axes'][0]['scale'], range=list(props['xlim']), showgrid=props['axes'][0]['grid']['gridOn'], domain=convert_x_domain(props['bounds'], x_bounds), side=props['axes'][0]['position'], tickfont=dict(size=props['axes'][0]['fontsize']))
A:plotly.matplotlylib.mpltools.yaxis->dict(type=props['axes'][1]['scale'], range=list(props['ylim']), showgrid=props['axes'][1]['grid']['gridOn'], domain=convert_y_domain(props['bounds'], y_bounds), side=props['axes'][1]['position'], tickfont=dict(size=props['axes'][1]['fontsize']))
plotly.matplotlylib.mpltools.check_bar_match(old_bar,new_bar)
plotly.matplotlylib.mpltools.convert_affine_trans(dpi=None,aff=None)
plotly.matplotlylib.mpltools.convert_dash(mpl_dash)
plotly.matplotlylib.mpltools.convert_path(path)
plotly.matplotlylib.mpltools.convert_symbol(mpl_symbol)
plotly.matplotlylib.mpltools.convert_va(mpl_va)
plotly.matplotlylib.mpltools.convert_x_domain(mpl_plot_bounds,mpl_max_x_bounds)
plotly.matplotlylib.mpltools.convert_y_domain(mpl_plot_bounds,mpl_max_y_bounds)
plotly.matplotlylib.mpltools.display_to_paper(x,y,layout)
plotly.matplotlylib.mpltools.get_axes_bounds(fig)
plotly.matplotlylib.mpltools.get_bar_gap(bar_starts,bar_ends,tol=1e-10)
plotly.matplotlylib.mpltools.get_rect_xmax(data)
plotly.matplotlylib.mpltools.get_rect_xmin(data)
plotly.matplotlylib.mpltools.get_rect_ymax(data)
plotly.matplotlylib.mpltools.get_rect_ymin(data)
plotly.matplotlylib.mpltools.is_bar(**props)
plotly.matplotlylib.mpltools.is_barh(**props)
plotly.matplotlylib.mpltools.make_bar(**props)
plotly.matplotlylib.mpltools.prep_x_ticks(ax,props)
plotly.matplotlylib.mpltools.prep_xy_axis(ax,props,x_bounds,y_bounds)
plotly.matplotlylib.mpltools.prep_y_ticks(ax,props)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/exporter.py----------------------------------------
A:plotly.matplotlylib.mplexporter.exporter.data->(transform - force_trans).transform(data)
A:plotly.matplotlylib.mplexporter.exporter.legend->ax.get_legend()
A:plotly.matplotlylib.mplexporter.exporter.props->utils.get_legend_properties(ax, legend)
A:plotly.matplotlylib.mplexporter.exporter.legendElements->list(utils.iter_all_children(legend._legend_box, skipContainers=True))
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, data)->self.process_transform(line.get_transform(), ax, line.get_xydata(), force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.linestyle->utils.get_path_style(patch, fill=patch.get_fill())
A:plotly.matplotlylib.mplexporter.exporter.markerstyle->utils.get_marker_style(line)
A:plotly.matplotlylib.mplexporter.exporter.label->line.get_label()
A:plotly.matplotlylib.mplexporter.exporter.content->text.get_text()
A:plotly.matplotlylib.mplexporter.exporter.transform->patch.get_transform()
A:plotly.matplotlylib.mplexporter.exporter.position->text.get_position()
A:plotly.matplotlylib.mplexporter.exporter.(coords, position)->self.process_transform(transform, ax, position, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.style->utils.get_text_style(text)
A:plotly.matplotlylib.mplexporter.exporter.(vertices, pathcodes)->utils.SVG_path(patch.get_path())
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, vertices)->self.process_transform(transform, ax, vertices, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.(transform, transOffset, offsets, paths)->collection._prepare_points()
A:plotly.matplotlylib.mplexporter.exporter.(offset_coords, offsets)->self.process_transform(transOffset, ax, offsets, force_trans=force_offsettrans)
A:plotly.matplotlylib.mplexporter.exporter.path_coords->self.process_transform(transform, ax, force_trans=force_pathtrans)
A:plotly.matplotlylib.mplexporter.exporter.path_transforms->collection.get_transforms()
plotly.matplotlylib.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.Exporter.run(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.__init__(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.run(self,fig)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/utils.py----------------------------------------
A:plotly.matplotlylib.mplexporter.utils.rgb->matplotlib.colors.colorConverter.to_rgb(color)
A:plotly.matplotlylib.mplexporter.utils.LINESTYLES->many_to_one({('solid', '-', (None, None)): '10,0', ('dashed', '--'): '6,6', ('dotted', ':'): '2,2', ('dashdot', '-.'): '4,4,2,4', ('', ' ', 'None', 'none'): 'none'})
A:plotly.matplotlylib.mplexporter.utils.ls->obj.get_linestyle()
A:plotly.matplotlylib.mplexporter.utils.dasharray->get_dasharray(gridlines[0])
A:plotly.matplotlylib.mplexporter.utils.path->path.transformed(transform).transformed(transform)
A:plotly.matplotlylib.mplexporter.utils.(vertices, codes)->list(zip(*vc_tuples))
A:plotly.matplotlylib.mplexporter.utils.vertices->numpy.array(list(itertools.chain(*vertices))).reshape(-1, 2)
A:plotly.matplotlylib.mplexporter.utils.style['alpha']->text.get_alpha()
A:plotly.matplotlylib.mplexporter.utils.style['edgecolor']->color_to_hex(line.get_markeredgecolor())
A:plotly.matplotlylib.mplexporter.utils.style['facecolor']->color_to_hex(line.get_markerfacecolor())
A:plotly.matplotlylib.mplexporter.utils.style['edgewidth']->line.get_markeredgewidth()
A:plotly.matplotlylib.mplexporter.utils.style['dasharray']->get_dasharray(line)
A:plotly.matplotlylib.mplexporter.utils.style['zorder']->text.get_zorder()
A:plotly.matplotlylib.mplexporter.utils.style['color']->color_to_hex(text.get_color())
A:plotly.matplotlylib.mplexporter.utils.style['linewidth']->line.get_linewidth()
A:plotly.matplotlylib.mplexporter.utils.style['marker']->line.get_marker()
A:plotly.matplotlylib.mplexporter.utils.markerstyle->MarkerStyle(line.get_marker())
A:plotly.matplotlylib.mplexporter.utils.markersize->line.get_markersize()
A:plotly.matplotlylib.mplexporter.utils.style['markerpath']->SVG_path(markerstyle.get_path(), markertransform)
A:plotly.matplotlylib.mplexporter.utils.style['fontsize']->text.get_size()
A:plotly.matplotlylib.mplexporter.utils.style['halign']->text.get_horizontalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['valign']->text.get_verticalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['rotation']->text.get_rotation()
A:plotly.matplotlylib.mplexporter.utils.label1On->getattr(ax, axname + 'axis')._major_tick_kw.get('label1On', True)
A:plotly.matplotlylib.mplexporter.utils.locator->getattr(ax, axname + 'axis').get_major_locator()
A:plotly.matplotlylib.mplexporter.utils.props['nticks']->len(locator())
A:plotly.matplotlylib.mplexporter.utils.props['tickvalues']->list(locator())
A:plotly.matplotlylib.mplexporter.utils.formatter->getattr(ax, axname + 'axis').get_major_formatter()
A:plotly.matplotlylib.mplexporter.utils.props['scale']->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.labels->getattr(ax, axname + 'axis').get_ticklabels()
A:plotly.matplotlylib.mplexporter.utils.props['fontsize']->labels[0].get_fontsize()
A:plotly.matplotlylib.mplexporter.utils.props['grid']->get_grid_style(axis)
A:plotly.matplotlylib.mplexporter.utils.gridlines->getattr(ax, axname + 'axis').get_gridlines()
A:plotly.matplotlylib.mplexporter.utils.color->color_to_hex(gridlines[0].get_color())
A:plotly.matplotlylib.mplexporter.utils.alpha->gridlines[0].get_alpha()
A:plotly.matplotlylib.mplexporter.utils.axis->getattr(ax, axname + 'axis')
A:plotly.matplotlylib.mplexporter.utils.domain->getattr(ax, 'get_{0}lim'.format(axname))()
A:plotly.matplotlylib.mplexporter.utils.scale->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.(handles, labels)->ax.get_legend_handles_labels()
A:plotly.matplotlylib.mplexporter.utils.visible->legend.get_visible()
A:plotly.matplotlylib.mplexporter.utils.binary_buffer->io.BytesIO()
A:plotly.matplotlylib.mplexporter.utils.lim->ax.axis()
plotly.matplotlylib.mplexporter.utils.SVG_path(path,transform=None,simplify=False)
plotly.matplotlylib.mplexporter.utils.color_to_hex(color)
plotly.matplotlylib.mplexporter.utils.get_axes_properties(ax)
plotly.matplotlylib.mplexporter.utils.get_axis_properties(axis)
plotly.matplotlylib.mplexporter.utils.get_dasharray(obj,i=None)
plotly.matplotlylib.mplexporter.utils.get_figure_properties(fig)
plotly.matplotlylib.mplexporter.utils.get_grid_style(axis)
plotly.matplotlylib.mplexporter.utils.get_legend_properties(ax,legend)
plotly.matplotlylib.mplexporter.utils.get_line_style(line)
plotly.matplotlylib.mplexporter.utils.get_marker_style(line)
plotly.matplotlylib.mplexporter.utils.get_path_style(path,fill=True)
plotly.matplotlylib.mplexporter.utils.get_text_style(text)
plotly.matplotlylib.mplexporter.utils.image_to_base64(image)
plotly.matplotlylib.mplexporter.utils.iter_all_children(obj,skipContainers=False)
plotly.matplotlylib.mplexporter.utils.many_to_one(input_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/tools.py----------------------------------------
A:plotly.matplotlylib.mplexporter.tools.load_js->require_js.format(dep_libs)
plotly.matplotlylib.mplexporter.tools.ipynb_vega_init()


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/_py3k_compat.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/fake_renderer.py----------------------------------------
plotly.matplotlylib.mplexporter.renderers.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.__init__(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/vega_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.dataname->'table{0:03d}'.format(len(self.data) + 1)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.specification->dict(width=renderer.figwidth, height=renderer.figheight, data=renderer.data, scales=renderer.scales, axes=renderer.axes, marks=renderer.marks)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.id->random.randint(0, 2 ** 16)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.renderer->VegaRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.vega_html->VegaHTML(renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vega(fig,notebook=False)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.__init__(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML._repr_html_(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.html(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.fig_to_vega(fig,notebook=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/vincent_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.line->vincent.Line(linedata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.markers->vincent.Scatter(markerdata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.renderer->VincentRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.exporter->Exporter(renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vincent(fig)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.fig_to_vincent(fig)


----------------------------------------/dataset/nuaa/anaconda3/envs/plotly1.0.30/lib/python3.6/site-packages/plotly/matplotlylib/mplexporter/renderers/base.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth']))
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgecolor']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('color')
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgewidth']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('linewidth')
A:plotly.matplotlylib.mplexporter.renderers.base.N->max(len(paths), len(offsets))
A:plotly.matplotlylib.mplexporter.renderers.base.path_transform->matplotlib.transforms.Affine2D(path_transform)
A:plotly.matplotlylib.mplexporter.renderers.base.vertices->matplotlib.transforms.Affine2D(path_transform).transform(vertices)
plotly.matplotlylib.mplexporter.Renderer(object)
plotly.matplotlylib.mplexporter.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer(object)
plotly.matplotlylib.mplexporter.renderers.base.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_legend(self,legend,props)

