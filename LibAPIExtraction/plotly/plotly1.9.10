
----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/session.py----------------------------------------
A:plotly.session._session['config'][key]->kwargs.get(key)
A:plotly.session._session['plot_options'][key]->kwargs.get(key)
plotly.session.get_session_config()
plotly.session.get_session_credentials()
plotly.session.get_session_plot_options()
plotly.session.sign_in(username,api_key,**kwargs)
plotly.session.update_session_plot_options(**kwargs)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/utils.py----------------------------------------
A:plotly.utils.lock->threading.Lock()
A:plotly.utils.data->json.load(f)
A:plotly.utils.json_string->json.dumps(json_dict, indent=4)
A:plotly.utils.(head, tail)->os.path.split(filename)
A:plotly.utils.iso_string->iso_string.replace('-00:00', '').replace('+00:00', '').replace('-00:00', '').replace('+00:00', '')
A:plotly.utils.encoded_o->super(PlotlyJSONEncoder, self).encode(o)
A:plotly.utils.new_o->json.loads(encoded_o, parse_constant=self.coerce_to_strict)
A:plotly.utils.obj->obj.astimezone(pytz.utc).astimezone(pytz.utc)
A:plotly.utils.time_string->obj.astimezone(pytz.utc).astimezone(pytz.utc).isoformat()
A:plotly.utils.coll[no]->str(entry)
A:plotly.utils.coll[key]->str(val)
A:plotly.utils.coll[str(key)]->coll.pop(key)
A:plotly.utils.func.__doc__->func.__doc__.format(**names)
A:plotly.utils.seen->set()
A:plotly.utils.src_regex->re.compile('.+src$')
plotly.utils.NotEncodable(Exception)
plotly.utils.PlotlyJSONEncoder(json.JSONEncoder)
plotly.utils.PlotlyJSONEncoder.coerce_to_strict(self,const)
plotly.utils.PlotlyJSONEncoder.default(self,obj)
plotly.utils.PlotlyJSONEncoder.encode(self,o)
plotly.utils.PlotlyJSONEncoder.encode_as_date(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_datetime(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_list(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_numpy(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_pandas(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_plotly(obj)
plotly.utils.PlotlyJSONEncoder.encode_as_sage(obj)
plotly.utils.decode_unicode(coll)
plotly.utils.ensure_dir_exists(directory)
plotly.utils.ensure_file_exists(filename)
plotly.utils.get_by_path(obj,path)
plotly.utils.get_first_duplicate(items)
plotly.utils.is_source_key(key)
plotly.utils.iso_to_plotly_time_string(iso_string)
plotly.utils.load_json_dict(filename,*args)
plotly.utils.node_generator(node,path=())
plotly.utils.save_json_dict(filename,json_dict)
plotly.utils.set_sharing_and_world_readable(option_set)
plotly.utils.template_doc(**names)
plotly.utils.validate_world_readable_and_sharing_settings(option_set)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/graph_reference.py----------------------------------------
A:plotly.graph_reference.graph_reference->json.loads(s)
A:plotly.graph_reference.config->plotly.utils.load_json_dict(files.CONFIG_FILE)
A:plotly.graph_reference.plotly_api_domain->plotly.utils.load_json_dict(files.CONFIG_FILE).get('plotly_api_domain', default_config['plotly_api_domain'])
A:plotly.graph_reference.sha1->hashlib.sha1(six.b(str(graph_reference))).hexdigest()
A:plotly.graph_reference.graph_reference_url->'{}{}?sha1={}'.format(plotly_api_domain, GRAPH_REFERENCE_PATH, sha1)
A:plotly.graph_reference.response->requests.get(graph_reference_url, timeout=GRAPH_REFERENCE_DOWNLOAD_TIMEOUT)
A:plotly.graph_reference.path->os.path.join('graph_reference', 'default-schema.json')
A:plotly.graph_reference.s->resource_string('plotly', path).decode('utf-8')
A:plotly.graph_reference.content->str(response.content, encoding='utf-8')
A:plotly.graph_reference.data->json.loads(content)
A:plotly.graph_reference.string->re.sub('_[A-Za-z0-9]+', lambda m: m.group()[1:].title(), string)
A:plotly.graph_reference.attribute_paths->list(object_dict['attribute_paths'])
A:plotly.graph_reference.attributes->get_attributes_dicts(object_name, parent_object_names)
A:plotly.graph_reference.valid_attributes->set()
A:plotly.graph_reference.deprecated_attributes->attributes_dict.get('_deprecated', {})
A:plotly.graph_reference.deprecated_attributes_dict->attributes_dict.get('_deprecated', {})
A:plotly.graph_reference.subplot_attributes->set()
A:plotly.graph_reference.start_index->attribute_container_path.index('layoutAttributes')
A:plotly.graph_reference.attributes_dicts->get_attributes_dicts(object_name, parent_object_names)
A:plotly.graph_reference.array_ok->match.get('arrayOk')
A:plotly.graph_reference.iterable->hasattr(value, '__iter__')
A:plotly.graph_reference.stringy->isinstance(value, six.string_types)
A:plotly.graph_reference.dicty->isinstance(value, dict)
A:plotly.graph_reference.item_names->list(items.keys())
A:plotly.graph_reference.class_name->string_to_class_name(object_name)
A:plotly.graph_reference.GRAPH_REFERENCE->get_graph_reference()
A:plotly.graph_reference.TRACE_NAMES->list(GRAPH_REFERENCE['traces'].keys())
A:plotly.graph_reference.OBJECTS->_get_objects()
A:plotly.graph_reference.ARRAYS->_get_arrays()
A:plotly.graph_reference.CLASSES->_get_classes()
plotly.graph_reference._get_arrays()
plotly.graph_reference._get_classes()
plotly.graph_reference._get_objects()
plotly.graph_reference._is_valid_sub_path(path,parent_paths)
plotly.graph_reference._patch_arrays()
plotly.graph_reference._patch_objects()
plotly.graph_reference.attribute_path_to_object_names(attribute_container_path)
plotly.graph_reference.get_attributes_dicts(object_name,parent_object_names=())
plotly.graph_reference.get_deprecated_attributes(object_name,parent_object_names=())
plotly.graph_reference.get_graph_reference()
plotly.graph_reference.get_role(object_name,attribute,value=None,parent_object_names=())
plotly.graph_reference.get_subplot_attributes(object_name,parent_object_names=())
plotly.graph_reference.get_valid_attributes(object_name,parent_object_names=())
plotly.graph_reference.object_name_to_class_name(object_name)
plotly.graph_reference.string_to_class_name(string)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/tools.py----------------------------------------
A:plotly.tools.contents->plotly.utils.load_json_dict(fn)
A:plotly.tools.contents_keys->list(contents.keys())
A:plotly.tools.credentials->get_credentials_file()
A:plotly.tools.settings->get_config_file()
A:plotly.tools.f->open(CONFIG_FILE, 'w')
A:plotly.tools.urlsplit->six.moves.urllib.parse.urlparse(url)
A:plotly.tools.query_dict->six.moves.urllib.parse.parse_qs(urlsplit.query)
A:plotly.tools.test_if_int->int(file_id)
A:plotly.tools.s->obj.replace('\n', '<br>')
A:plotly.tools.url->'{plotly_domain}/~{un}/{fid}'.format(plotly_domain=plotly_domain, un=file_owner_or_url, fid=file_id)
A:plotly.tools.renderer->matplotlylib.PlotlyRenderer()
A:plotly.tools.horizontal_spacing->float(kwargs['horizontal_spacing'])
A:plotly.tools.vertical_spacing->float(kwargs['vertical_spacing'])
A:plotly.tools.fig->plotly.graph_objs.graph_objs.Figure(layout=layout)
A:plotly.tools.xaxis_name->'xaxis{0}'.format(plot_num + 1)
A:plotly.tools.x_anchor->'y{y_cnt}'.format(y_cnt=y_cnt)
A:plotly.tools.yaxis_name->'yaxis{0}'.format(plot_num + 1)
A:plotly.tools.y_anchor->'x{x_cnt}'.format(x_cnt=x_cnt)
A:plotly.tools.xaxis->plotly.graph_objs.graph_objs.XAxis(domain=[x_start, x_end], anchor=x_anchor)
A:plotly.tools.yaxis->plotly.graph_objs.graph_objs.YAxis(domain=[y_start, y_end], anchor=y_anchor)
A:plotly.tools.subplot_titles->kwargs.get('subplot_titles', [''] * rows * cols)
A:plotly.tools.SPEC_defaults->dict(is_3d=False, colspan=1, rowspan=1, l=0.0, r=0.0, b=0.0, t=0.0)
A:plotly.tools.INSET_defaults->dict(cell=(1, 1), is_3d=False, l=0.0, w='to_end', b=0.0, h='to_end')
A:plotly.tools.layout->dict(annotations=annotations, height=len(table_matrix) * height_constant + 50, margin=dict(t=0, b=0, r=0, l=0), yaxis=dict(autorange='reversed', zeroline=False, gridwidth=2, ticks='', dtick=1, tick0=0.5, showticklabels=False), xaxis=dict(zeroline=False, gridwidth=2, ticks='', dtick=1, tick0=-0.5, showticklabels=False))
A:plotly.tools.label->'{x_or_y}{r}'.format(x_or_y=x_or_y, r=r + 1)
A:plotly.tools.graph_obj->'{X_or_Y}Axis'.format(X_or_Y=x_or_y.upper())
A:plotly.tools.axis->getattr(graph_objs, graph_obj)(domain=domain)
A:plotly.tools.scene->plotly.graph_objs.graph_objs.Scene(domain={'x': x_domain, 'y': y_domain})
A:plotly.tools.s_label->'scene{0}'.format(s_cnt)
A:plotly.tools.x_label->_get_label('x', False, False, x_cnt, False)
A:plotly.tools.y_label->_get_label('y', False, False, y_cnt, False)
A:plotly.tools.(x_anchor, y_anchor)->_get_anchors(r, c, x_cnt, y_cnt, False, False)
A:plotly.tools.subtitle_pos_y->sorted(subtitle_pos_y, reverse=True)
A:plotly.tools.cls->getattr(graph_objs, obj_type)
A:plotly.tools.obj_type->plotly.graph_reference.string_to_class_name(obj_type)
A:plotly.tools.d->scipy.spatial.distance.pdist(X)
A:plotly.tools.d[key]->_replace_newline(val)
A:plotly.tools.l->list()
A:plotly.tools.self.embed_code->get_embed(url, width=width, height=height)
A:plotly.tools.length->len(args[0])
A:plotly.tools.value->value.lstrip('#').lstrip('#')
A:plotly.tools.hex_total_length->len(value)
A:plotly.tools.(barb_x, barb_y)->self.get_barbs()
A:plotly.tools.(arrow_x, arrow_y)->self.get_quiver_arrows()
A:plotly.tools.quiver->plotly.graph_objs.graph_objs.Scatter(x=barb_x + arrow_x, y=barb_y + arrow_y, mode='lines', **kwargs)
A:plotly.tools.(streamline_x, streamline_y)->self.sum_streamlines()
A:plotly.tools.streamline->plotly.graph_objs.graph_objs.Scatter(x=streamline_x + arrow_x, y=streamline_y + arrow_y, mode='lines', **kwargs)
A:plotly.tools.(flat_increase_x, flat_increase_y, text_increase)->_OHLC(open, high, low, close, dates).get_increase()
A:plotly.tools.ohlc_incr->FigureFactory._make_increasing_ohlc(open, high, low, close, dates, **kwargs)
A:plotly.tools.(flat_decrease_x, flat_decrease_y, text_decrease)->_OHLC(open, high, low, close, dates).get_decrease()
A:plotly.tools.ohlc_decr->FigureFactory._make_decreasing_ohlc(open, high, low, close, dates, **kwargs)
A:plotly.tools.(increase_x, increase_y)->_Candlestick(open, high, low, close, dates, **kwargs).get_candle_increase()
A:plotly.tools.candle_incr_data->FigureFactory._make_increasing_candle(open, high, low, close, dates, **kwargs)
A:plotly.tools.(decrease_x, decrease_y)->_Candlestick(open, high, low, close, dates, **kwargs).get_candle_decrease()
A:plotly.tools.candle_decr_data->FigureFactory._make_decreasing_candle(open, high, low, close, dates, **kwargs)
A:plotly.tools.hist->_Distplot(hist_data, group_labels, bin_size, curve_type, colors, rug_text, show_hist, show_curve).make_hist()
A:plotly.tools.curve->_Distplot(hist_data, group_labels, bin_size, curve_type, colors, rug_text, show_hist, show_curve).make_kde()
A:plotly.tools.rug->_Distplot(hist_data, group_labels, bin_size, curve_type, colors, rug_text, show_hist, show_curve).make_rug()
A:plotly.tools.data->sum(data, [])
A:plotly.tools.dendrogram->_Dendrogram(X, orientation, labels, colorscale)
A:plotly.tools.annotations->_Table(table_text, colorscale, font_colors, index, index_title, annotation_offset, **kwargs).make_table_annotations()
A:plotly.tools.trace->plotly.graph_objs.graph_objs.Scatter(x=np.multiply(self.sign[self.xaxis], xs), y=np.multiply(self.sign[self.yaxis], ys), mode='lines', marker=graph_objs.Marker(color=colors[color_key]))
A:plotly.tools.table_matrix->_Table.get_table_matrix(self)
A:plotly.tools.x->FigureFactory._flatten(x)
A:plotly.tools.y->FigureFactory._flatten(y)
A:plotly.tools.u->FigureFactory._flatten(u)
A:plotly.tools.v->FigureFactory._flatten(v)
A:plotly.tools.barb_x->FigureFactory._flatten(zip(self.x, self.end_x, empty))
A:plotly.tools.barb_y->FigureFactory._flatten(zip(self.y, self.end_y, empty))
A:plotly.tools.barb_len[index]->math.hypot(dif_x[index], dif_y[index])
A:plotly.tools.barb_ang[index]->math.atan2(dif_y[index], dif_x[index])
A:plotly.tools.cos_ang1[index]->math.cos(ang1[index])
A:plotly.tools.sin_ang1[index]->math.sin(ang1[index])
A:plotly.tools.cos_ang2[index]->math.cos(ang2[index])
A:plotly.tools.sin_ang2[index]->math.sin(ang2[index])
A:plotly.tools.arrow_x->FigureFactory._flatten(zip(point1_x, self.end_x, point2_x, empty))
A:plotly.tools.arrow_y->FigureFactory._flatten(zip(point1_y, self.end_y, point2_y, empty))
A:plotly.tools.self.x->range(len(table_text[0]))
A:plotly.tools.self.y->range(len(table_text))
A:plotly.tools.self.u->numpy.array(u)
A:plotly.tools.self.v->numpy.array(v)
A:plotly.tools.self.density->int(30 * density)
A:plotly.tools.self.blank->numpy.zeros((self.density, self.density))
A:plotly.tools.self.speed->numpy.sqrt(self.u ** 2 + self.v ** 2)
A:plotly.tools.(arrows_x, arrows_y)->self.get_streamline_arrows()
A:plotly.tools.self.val_x->numpy.int(xi)
A:plotly.tools.self.val_y->numpy.int(yi)
A:plotly.tools.ui->self.value_at(self.u, xi, yi)
A:plotly.tools.vi->self.value_at(self.v, xi, yi)
A:plotly.tools.(xb, yb)->self.blank_pos(xi, yi)
A:plotly.tools.(k1x, k1y)->f(xi, yi)
A:plotly.tools.(k2x, k2y)->f(xi + 0.5 * ds * k1x, yi + 0.5 * ds * k1y)
A:plotly.tools.(k3x, k3y)->f(xi + 0.5 * ds * k2x, yi + 0.5 * ds * k2y)
A:plotly.tools.(k4x, k4y)->f(xi + ds * k3x, yi + ds * k3y)
A:plotly.tools.(new_xb, new_yb)->self.blank_pos(xi, yi)
A:plotly.tools.(sf, xf_traj, yf_traj)->rk4(x0, y0, f)
A:plotly.tools.(sb, xb_traj, yb_traj)->rk4(x0, y0, g)
A:plotly.tools.(initxb, inityb)->self.blank_pos(x0, y0)
A:plotly.tools.t->self.rk4_integrate(xb * self.spacing_x, yb * self.spacing_y)
A:plotly.tools.self.st_x[index]->self.st_x[index].tolist()
A:plotly.tools.self.st_y[index]->self.st_y[index].tolist()
A:plotly.tools.arrow_end_x->numpy.empty(len(self.st_x))
A:plotly.tools.arrow_end_y->numpy.empty(len(self.st_y))
A:plotly.tools.arrow_start_x->numpy.empty(len(self.st_x))
A:plotly.tools.arrow_start_y->numpy.empty(len(self.st_y))
A:plotly.tools.streamline_ang->numpy.arctan(dif_y / dif_x)
A:plotly.tools.point1_x->numpy.empty(len(dif_x))
A:plotly.tools.point1_y->numpy.empty(len(dif_y))
A:plotly.tools.point2_x->numpy.empty(len(dif_x))
A:plotly.tools.point2_y->numpy.empty(len(dif_y))
A:plotly.tools.space->numpy.empty(len(point1_x))
A:plotly.tools.arrows_x->arrows_x.tolist().tolist()
A:plotly.tools.arrows_y->arrows_y.tolist().tolist()
A:plotly.tools.streamline_x->sum(self.st_x, [])
A:plotly.tools.streamline_y->sum(self.st_y, [])
A:plotly.tools.self.all_y->list(zip(self.open, self.open, self.high, self.low, self.close, self.close, self.empty))
A:plotly.tools.flat_increase_x->FigureFactory._flatten(self.increase_x)
A:plotly.tools.flat_increase_y->FigureFactory._flatten(self.increase_y)
A:plotly.tools.flat_decrease_x->FigureFactory._flatten(self.decrease_x)
A:plotly.tools.flat_decrease_y->FigureFactory._flatten(self.decrease_y)
A:plotly.tools.increase_x->FigureFactory._flatten(increase_x)
A:plotly.tools.decrease_x->FigureFactory._flatten(decrease_x)
A:plotly.tools.self.trace_number->len(hist_data)
A:plotly.tools.hist[index]->dict(type='histogram', x=self.hist_data[index], xaxis='x1', yaxis='y1', histnorm='probability', name=self.group_labels[index], legendgroup=self.group_labels[index], marker=dict(color=self.colors[index]), autobinx=False, xbins=dict(start=self.start[index], end=self.end[index], size=self.bin_size), opacity=0.7)
A:plotly.tools.self.curve_y[index]->scipy.stats.norm.pdf(self.curve_x[index], loc=mean[index], scale=sd[index])
A:plotly.tools.curve[index]->dict(type='scatter', x=self.curve_x[index], y=self.curve_y[index], xaxis='x1', yaxis='y1', mode='lines', name=self.group_labels[index], legendgroup=self.group_labels[index], showlegend=False if self.show_hist else True, marker=dict(color=self.colors[index]))
A:plotly.tools.(mean[index], sd[index])->scipy.stats.norm.fit(self.hist_data[index])
A:plotly.tools.rug[index]->dict(type='scatter', x=self.hist_data[index], y=[self.group_labels[index]] * len(self.hist_data[index]), xaxis='x1', yaxis='y2', mode='markers', name=self.group_labels[index], legendgroup=self.group_labels[index], showlegend=False if self.show_hist or self.show_curve else True, text=self.rug_text[index], marker=dict(color=self.colors[index], symbol='line-ns-open'))
A:plotly.tools.(dd_traces, xvals, yvals, ordered_labels, leaves)->self.get_dendrogram_traces(X, colorscale)
A:plotly.tools.yvals_flat->yvals.flatten()
A:plotly.tools.xvals_flat->xvals.flatten()
A:plotly.tools.self.layout->self.set_figure_layout(width, height)
A:plotly.tools.self.data->plotly.graph_objs.graph_objs.Data(dd_traces)
A:plotly.tools.default_colors->OrderedDict(sorted(d.items(), key=lambda t: t[0]))
A:plotly.tools.Z->scipy.cluster.hierarchy.linkage(d, method='complete')
A:plotly.tools.P->scipy.cluster.hierarchy.dendrogram(Z, orientation=self.orientation, labels=self.labels, no_plot=True)
A:plotly.tools.icoord->scipy.array(P['icoord'])
A:plotly.tools.dcoord->scipy.array(P['dcoord'])
A:plotly.tools.ordered_labels->scipy.array(P['ivl'])
A:plotly.tools.color_list->scipy.array(P['color_list'])
A:plotly.tools.colors->self.get_color_dict(colorscale)
A:plotly.tools.x_index->int(self.xaxis[-1])
A:plotly.tools.y_index->int(self.yaxis[-1])
A:plotly.tools.min_col->FigureFactory._hex_to_rgb(self.colorscale[0][1])
A:plotly.tools.max_col->FigureFactory._hex_to_rgb(self.colorscale[-1][1])
A:plotly.tools.z_min->min(min(self.z))
A:plotly.tools.z_max->max(max(self.z))
A:plotly.tools.(min_text_color, max_text_color)->_AnnotatedHeatmap.get_text_color(self)
A:plotly.tools.z_mid->_AnnotatedHeatmap.get_z_mid(self)
A:plotly.tools.headers->table_text.values.tolist().columns.tolist()
A:plotly.tools.table_text_index->table_text.values.tolist().index.tolist()
A:plotly.tools.table_text->table_text.values.tolist().values.tolist()
A:plotly.tools.all_font_colors->_Table.get_table_font_color(self)
plotly.tools.FigureFactory(object)
plotly.tools.FigureFactory._flatten(array)
plotly.tools.FigureFactory._hex_to_rgb(value)
plotly.tools.FigureFactory._make_decreasing_candle(open,high,low,close,dates,**kwargs)
plotly.tools.FigureFactory._make_decreasing_ohlc(open,high,low,close,dates,**kwargs)
plotly.tools.FigureFactory._make_increasing_candle(open,high,low,close,dates,**kwargs)
plotly.tools.FigureFactory._make_increasing_ohlc(open,high,low,close,dates,**kwargs)
plotly.tools.FigureFactory._validate_annotated_heatmap(z,x,y,annotation_text)
plotly.tools.FigureFactory._validate_distplot(hist_data,curve_type)
plotly.tools.FigureFactory._validate_equal_length(*args)
plotly.tools.FigureFactory._validate_ohlc(open,high,low,close,direction,**kwargs)
plotly.tools.FigureFactory._validate_positive_scalars(**kwargs)
plotly.tools.FigureFactory._validate_streamline(x,y)
plotly.tools.FigureFactory._validate_table(table_text,font_colors)
plotly.tools.FigureFactory.create_annotated_heatmap(z,x=None,y=None,annotation_text=None,colorscale='RdBu',font_colors=None,showscale=False,reversescale=False,**kwargs)
plotly.tools.FigureFactory.create_candlestick(open,high,low,close,dates=None,direction='both',**kwargs)
plotly.tools.FigureFactory.create_dendrogram(X,orientation='bottom',labels=None,colorscale=None)
plotly.tools.FigureFactory.create_distplot(hist_data,group_labels,bin_size=1.0,curve_type='kde',colors=[],rug_text=[],show_hist=True,show_curve=True,show_rug=True)
plotly.tools.FigureFactory.create_ohlc(open,high,low,close,dates=None,direction='both',**kwargs)
plotly.tools.FigureFactory.create_quiver(x,y,u,v,scale=0.1,arrow_scale=0.3,angle=math.pi/9,**kwargs)
plotly.tools.FigureFactory.create_streamline(x,y,u,v,density=1,angle=math.pi/9,arrow_scale=0.09,**kwargs)
plotly.tools.FigureFactory.create_table(table_text,colorscale=None,font_colors=None,index=False,index_title='',annotation_offset=0.45,height_constant=30,hoverinfo='none',**kwargs)
plotly.tools._AnnotatedHeatmap(self,z,x,y,annotation_text,colorscale,font_colors,reversescale,**kwargs)
plotly.tools._AnnotatedHeatmap.__init__(self,z,x,y,annotation_text,colorscale,font_colors,reversescale,**kwargs)
plotly.tools._AnnotatedHeatmap.get_text_color(self)
plotly.tools._AnnotatedHeatmap.get_z_mid(self)
plotly.tools._AnnotatedHeatmap.make_annotations(self)
plotly.tools._Candlestick(self,open,high,low,close,dates,**kwargs)
plotly.tools._Candlestick.__init__(self,open,high,low,close,dates,**kwargs)
plotly.tools._Candlestick.get_candle_decrease(self)
plotly.tools._Candlestick.get_candle_increase(self)
plotly.tools._Dendrogram(self,X,orientation='bottom',labels=None,colorscale=None,width='100%',height='100%',xaxis='xaxis',yaxis='yaxis')
plotly.tools._Dendrogram.__init__(self,X,orientation='bottom',labels=None,colorscale=None,width='100%',height='100%',xaxis='xaxis',yaxis='yaxis')
plotly.tools._Dendrogram.get_color_dict(self,colorscale)
plotly.tools._Dendrogram.get_dendrogram_traces(self,X,colorscale)
plotly.tools._Dendrogram.set_axis_layout(self,axis_key)
plotly.tools._Dendrogram.set_figure_layout(self,width,height)
plotly.tools._Distplot(self,hist_data,group_labels,bin_size,curve_type,colors,rug_text,show_hist,show_curve)
plotly.tools._Distplot.__init__(self,hist_data,group_labels,bin_size,curve_type,colors,rug_text,show_hist,show_curve)
plotly.tools._Distplot.make_hist(self)
plotly.tools._Distplot.make_kde(self)
plotly.tools._Distplot.make_normal(self)
plotly.tools._Distplot.make_rug(self)
plotly.tools._OHLC(self,open,high,low,close,dates,**kwargs)
plotly.tools._OHLC.__init__(self,open,high,low,close,dates,**kwargs)
plotly.tools._OHLC.get_all_xy(self)
plotly.tools._OHLC.get_decrease(self)
plotly.tools._OHLC.get_increase(self)
plotly.tools._OHLC.separate_increase_decrease(self)
plotly.tools._Quiver(self,x,y,u,v,scale,arrow_scale,angle,**kwargs)
plotly.tools._Quiver.__init__(self,x,y,u,v,scale,arrow_scale,angle,**kwargs)
plotly.tools._Quiver.get_barbs(self)
plotly.tools._Quiver.get_quiver_arrows(self)
plotly.tools._Quiver.scale_uv(self)
plotly.tools._Streamline(self,x,y,u,v,density,angle,arrow_scale,**kwargs)
plotly.tools._Streamline.__init__(self,x,y,u,v,density,angle,arrow_scale,**kwargs)
plotly.tools._Streamline.blank_pos(self,xi,yi)
plotly.tools._Streamline.get_streamline_arrows(self)
plotly.tools._Streamline.get_streamlines(self)
plotly.tools._Streamline.rk4_integrate(self,x0,y0)
plotly.tools._Streamline.sum_streamlines(self)
plotly.tools._Streamline.traj(self,xb,yb)
plotly.tools._Streamline.value_at(self,a,xi,yi)
plotly.tools._Table(self,table_text,colorscale,font_colors,index,index_title,annotation_offset,**kwargs)
plotly.tools._Table.__init__(self,table_text,colorscale,font_colors,index,index_title,annotation_offset,**kwargs)
plotly.tools._Table.get_table_font_color(self)
plotly.tools._Table.get_table_matrix(self)
plotly.tools._Table.make_table_annotations(self)
plotly.tools._replace_newline(obj)
plotly.tools.embed(file_owner_or_url,file_id=None,width='100%',height=525)
plotly.tools.ensure_local_plotly_files()
plotly.tools.get_config_defaults()
plotly.tools.get_config_file(*args)
plotly.tools.get_credentials_file(*args)
plotly.tools.get_embed(file_owner_or_url,file_id=None,width='100%',height=525)
plotly.tools.get_subplots(rows=1,columns=1,print_grid=False,**kwargs)
plotly.tools.get_valid_graph_obj(obj,obj_type=None)
plotly.tools.make_subplots(rows=1,cols=1,shared_xaxes=False,shared_yaxes=False,start_cell='top-left',print_grid=True,**kwargs)
plotly.tools.mpl_to_plotly(fig,resize=False,strip_style=False,verbose=False)
plotly.tools.reset_config_file()
plotly.tools.reset_credentials_file()
plotly.tools.return_figure_from_figure_or_data(figure_or_data,validate_figure)
plotly.tools.set_config_file(plotly_domain=None,plotly_streaming_domain=None,plotly_api_domain=None,plotly_ssl_verification=None,plotly_proxy_authorization=None,world_readable=None,sharing=None,auto_open=None)
plotly.tools.set_credentials_file(username=None,api_key=None,stream_ids=None,proxy_username=None,proxy_password=None)
plotly.tools.validate(obj,obj_type)
plotly.tools.warning_on_one_line(message,category,filename,lineno,file=None,line=None)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/files.py----------------------------------------
A:plotly.files.PLOTLY_DIR->os.path.join(os.path.expanduser('~'), '.plotly')
A:plotly.files.CREDENTIALS_FILE->os.path.join(PLOTLY_DIR, '.credentials')
A:plotly.files.CONFIG_FILE->os.path.join(PLOTLY_DIR, '.config')
A:plotly.files.GRAPH_REFERENCE_FILE->os.path.join(PLOTLY_DIR, '.graph_reference')
A:plotly.files.TEST_DIR->os.path.join(os.path.expanduser('~'), '.test')
A:plotly.files.TEST_FILE->os.path.join(PLOTLY_DIR, '.permission_test')
A:plotly.files.f->open(TEST_FILE, 'w')
plotly.files.check_file_permissions()


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/version.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/exceptions.py----------------------------------------
A:plotly.exceptions.res_payload->json.loads(requests_exception.response.content.decode('utf8'))
A:plotly.exceptions.self.path->list(path)
A:plotly.exceptions.message->"Invalid entry found in '{object_name}' at index, '{index}'".format(**format_dict)
plotly.exceptions.InputError(PlotlyError)
plotly.exceptions.PlotlyAccountError(PlotlyServerError)
plotly.exceptions.PlotlyConnectionError(PlotlyServerError)
plotly.exceptions.PlotlyCredentialError(PlotlyServerError)
plotly.exceptions.PlotlyDataTypeError(self,obj,path,notes=())
plotly.exceptions.PlotlyDataTypeError.__init__(self,obj,path,notes=())
plotly.exceptions.PlotlyDictKeyError(self,obj,path,notes=())
plotly.exceptions.PlotlyDictKeyError.__init__(self,obj,path,notes=())
plotly.exceptions.PlotlyDictValueError(self,obj,path,notes=())
plotly.exceptions.PlotlyDictValueError.__init__(self,obj,path,notes=())
plotly.exceptions.PlotlyEmptyDataError(PlotlyError)
plotly.exceptions.PlotlyError(Exception)
plotly.exceptions.PlotlyGraphObjectError(self,message='',path=(),notes=())
plotly.exceptions.PlotlyGraphObjectError.__init__(self,message='',path=(),notes=())
plotly.exceptions.PlotlyGraphObjectError.__str__(self)
plotly.exceptions.PlotlyListEntryError(self,obj,path,notes=())
plotly.exceptions.PlotlyListEntryError.__init__(self,obj,path,notes=())
plotly.exceptions.PlotlyLocalCredentialsError(self)
plotly.exceptions.PlotlyLocalCredentialsError.__init__(self)
plotly.exceptions.PlotlyLocalError(PlotlyError)
plotly.exceptions.PlotlyRateLimitError(PlotlyServerError)
plotly.exceptions.PlotlyRequestError(self,requests_exception)
plotly.exceptions.PlotlyRequestError.__init__(self,requests_exception)
plotly.exceptions.PlotlyRequestError.__str__(self)
plotly.exceptions.PlotlyServerError(PlotlyError)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/offline/offline.py----------------------------------------
A:plotly.offline.offline.path->os.path.join('offline', 'plotly.min.js')
A:plotly.offline.offline.plotlyjs->resource_string('plotly', path).decode('utf-8')
A:plotly.offline.offline.figure->plotly.tools.return_figure_from_figure_or_data(figure_or_data, validate)
A:plotly.offline.offline.width->plotly.tools.return_figure_from_figure_or_data(figure_or_data, validate).get('layout', {}).get('width', default_width)
A:plotly.offline.offline.height->plotly.tools.return_figure_from_figure_or_data(figure_or_data, validate).get('layout', {}).get('height', default_height)
A:plotly.offline.offline.plotdivid->uuid.uuid4()
A:plotly.offline.offline.jdata->json.dumps(figure.get('data', []), cls=utils.PlotlyJSONEncoder)
A:plotly.offline.offline.jlayout->json.dumps(figure.get('layout', {}), cls=utils.PlotlyJSONEncoder)
A:plotly.offline.offline.jconfig->json.dumps(config)
A:plotly.offline.offline.plotly_platform_url->plotly.plotly.get_config().get('plotly_domain', 'https://plot.ly')
A:plotly.offline.offline.link_domain->plotly.plotly.get_config().get('plotly_domain', 'https://plot.ly').replace('https://', '').replace('http://', '')
A:plotly.offline.offline.link_text->link_text.replace('plot.ly', link_domain).replace('plot.ly', link_domain)
A:plotly.offline.offline.script->'Plotly.newPlot("{id}", {data}, {layout}, {config})'.format(id=plotdivid, data=jdata, layout=jlayout, config=jconfig)
A:plotly.offline.offline.plotly_html_div->('<div id="{id}" style="height: {height}; width: {width};" class="plotly-graph-div"></div><script type="text/javascript">' + optional_line1 + 'window.PLOTLYENV=window.PLOTLYENV || {{}};window.PLOTLYENV.BASE_URL="' + plotly_platform_url + '";{script}' + optional_line2 + '</script>').format(id=plotdivid, script=script, height=height, width=width)
A:plotly.offline.offline.(plot_html, plotdivid, width, height)->_plot_html(figure_or_data, show_link, link_text, validate, '100%', '100%', global_requirejs=False)
A:plotly.offline.offline.resize_script->'<script type="text/javascript">window.removeEventListener("resize");window.addEventListener("resize", function(){{Plotly.Plots.resize(document.getElementById("{id}"));}});</script>'.format(id=plotdivid)
A:plotly.offline.offline.plotly_js_script->''.join(['<script type="text/javascript">', get_plotlyjs(), '</script>'])
A:plotly.offline.offline.plotly_plot->plotly.tools.mpl_to_plotly(mpl_fig, resize, strip_style, verbose)
A:plotly.offline.offline.ip->IPython.core.getipython.get_ipython()
plotly.offline.download_plotlyjs(download_url)
plotly.offline.enable_mpl_offline(resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.init_notebook_mode()
plotly.offline.iplot(figure_or_data,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.iplot_mpl(mpl_fig,resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.offline._plot_html(figure_or_data,show_link,link_text,validate,default_width,default_height,global_requirejs)
plotly.offline.offline.download_plotlyjs(download_url)
plotly.offline.offline.enable_mpl_offline(resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.offline.get_plotlyjs()
plotly.offline.offline.init_notebook_mode()
plotly.offline.offline.iplot(figure_or_data,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.offline.iplot_mpl(mpl_fig,resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True)
plotly.offline.offline.plot(figure_or_data,show_link=True,link_text='Exporttoplot.ly',validate=True,output_type='file',include_plotlyjs=True,filename='temp-plot.html',auto_open=True)
plotly.offline.offline.plot_mpl(mpl_fig,resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True,output_type='file',include_plotlyjs=True,filename='temp-plot.html',auto_open=True)
plotly.offline.plot(figure_or_data,show_link=True,link_text='Exporttoplot.ly',validate=True,output_type='file',include_plotlyjs=True,filename='temp-plot.html',auto_open=True)
plotly.offline.plot_mpl(mpl_fig,resize=False,strip_style=False,verbose=False,show_link=True,link_text='Exporttoplot.ly',validate=True,output_type='file',include_plotlyjs=True,filename='temp-plot.html',auto_open=True)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/offline/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/renderer.py----------------------------------------
A:plotly.matplotlylib.renderer.self.plotly_fig->plotly.graph_objs.Figure()
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']->plotly.graph_objs.Layout(width=int(props['figwidth'] * props['dpi']), height=int(props['figheight'] * props['dpi']), autosize=False, hovermode='closest')
A:plotly.matplotlylib.renderer.(self.mpl_x_bounds, self.mpl_y_bounds)->plotly.matplotlylib.mpltools.get_axes_bounds(fig)
A:plotly.matplotlylib.renderer.margin->plotly.graph_objs.Margin(l=int(self.mpl_x_bounds[0] * self.plotly_fig['layout']['width']), r=int((1 - self.mpl_x_bounds[1]) * self.plotly_fig['layout']['width']), t=int((1 - self.mpl_y_bounds[1]) * self.plotly_fig['layout']['height']), b=int(self.mpl_y_bounds[0] * self.plotly_fig['layout']['height']), pad=0)
A:plotly.matplotlylib.renderer.xaxis->plotly.graph_objs.XAxis(anchor='y{0}'.format(self.axis_ct), zeroline=False, ticks='inside')
A:plotly.matplotlylib.renderer.yaxis->plotly.graph_objs.YAxis(anchor='x{0}'.format(self.axis_ct), zeroline=False, ticks='inside')
A:plotly.matplotlylib.renderer.(mpl_xaxis, mpl_yaxis)->plotly.matplotlylib.mpltools.prep_xy_axis(ax=ax, props=props, x_bounds=self.mpl_x_bounds, y_bounds=self.mpl_y_bounds)
A:plotly.matplotlylib.renderer.bottom_spine->plotly.matplotlylib.mpltools.get_spine_visible(ax, 'bottom')
A:plotly.matplotlylib.renderer.top_spine->plotly.matplotlylib.mpltools.get_spine_visible(ax, 'top')
A:plotly.matplotlylib.renderer.left_spine->plotly.matplotlylib.mpltools.get_spine_visible(ax, 'left')
A:plotly.matplotlylib.renderer.right_spine->plotly.matplotlylib.mpltools.get_spine_visible(ax, 'right')
A:plotly.matplotlylib.renderer.xaxis['mirror']->plotly.matplotlylib.mpltools.get_axis_mirror(bottom_spine, top_spine)
A:plotly.matplotlylib.renderer.yaxis['mirror']->plotly.matplotlylib.mpltools.get_axis_mirror(left_spine, right_spine)
A:plotly.matplotlylib.renderer.bar_gap->plotly.matplotlylib.mpltools.get_bar_gap([bar['y0'] for bar in trace], [bar['y1'] for bar in trace])
A:plotly.matplotlylib.renderer.x->plotly.matplotlylib.mpltools.mpl_dates_to_datestrings(x, formatter)
A:plotly.matplotlylib.renderer.bar->plotly.graph_objs.Bar(orientation=orientation, x=x, y=y, xaxis='x{0}'.format(self.axis_ct), yaxis='y{0}'.format(self.axis_ct), opacity=trace[0]['alpha'], marker=go.Marker(color=trace[0]['facecolor'], line=go.Line(width=trace[0]['edgewidth'])))
A:plotly.matplotlylib.renderer.color->plotly.matplotlylib.mpltools.merge_color_and_opacity(props['linestyle']['color'], props['linestyle']['alpha'])
A:plotly.matplotlylib.renderer.line->plotly.graph_objs.Line(color=color, width=props['linestyle']['linewidth'], dash=mpltools.convert_dash(props['linestyle']['dasharray']))
A:plotly.matplotlylib.renderer.marker->plotly.graph_objs.Marker(opacity=props['markerstyle']['alpha'], color=props['markerstyle']['facecolor'], symbol=mpltools.convert_symbol(props['markerstyle']['marker']), size=props['markerstyle']['markersize'], line=go.Line(color=props['markerstyle']['edgecolor'], width=props['markerstyle']['edgewidth']))
A:plotly.matplotlylib.renderer.marked_line->plotly.graph_objs.Scatter(mode=mode, name=props['label'], x=[xy_pair[0] for xy_pair in props['data']], y=[xy_pair[1] for xy_pair in props['data']], xaxis='x{0}'.format(self.axis_ct), yaxis='y{0}'.format(self.axis_ct), line=line, marker=marker)
A:plotly.matplotlylib.renderer.marked_line['x']->plotly.matplotlylib.mpltools.mpl_dates_to_datestrings(marked_line['x'], formatter)
A:plotly.matplotlylib.renderer.markerstyle->plotly.matplotlylib.mpltools.get_markerstyle_from_collection(props)
A:plotly.matplotlylib.renderer.is_bar->plotly.matplotlylib.mpltools.is_bar(self.current_mpl_ax.containers, **props)
A:plotly.matplotlylib.renderer.self.plotly_fig['layout']['annotations']->plotly.graph_objs.Annotations()
A:plotly.matplotlylib.renderer.(x_px, y_px)->props['mplobj'].get_transform().transform(props['position'])
A:plotly.matplotlylib.renderer.(x, y)->plotly.matplotlylib.mpltools.display_to_paper(x_px, y_px, self.plotly_fig['layout'])
A:plotly.matplotlylib.renderer.yanchor->plotly.matplotlylib.mpltools.convert_va(props['style']['valign'])
A:plotly.matplotlylib.renderer.xref->'x{0}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.yref->'y{0}'.format(self.axis_ct)
A:plotly.matplotlylib.renderer.annotation->plotly.graph_objs.Annotation(text=props['text'], font=go.Font(color=props['style']['color'], size=props['style']['fontsize']), xref='paper', yref='paper', x=x, y=y, xanchor='center', yanchor='bottom', showarrow=False)
A:plotly.matplotlylib.renderer.titlefont->plotly.graph_objs.Font(size=props['style']['fontsize'], color=props['style']['color'])
A:plotly.matplotlylib.renderer.axis_key->'yaxis{0}'.format(self.axis_ct)
plotly.matplotlylib.PlotlyRenderer(self)
plotly.matplotlylib.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.PlotlyRenderer.draw_bar(self,coll)
plotly.matplotlylib.PlotlyRenderer.draw_bars(self,bars)
plotly.matplotlylib.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.PlotlyRenderer.resize(self)
plotly.matplotlylib.PlotlyRenderer.strip_style(self)
plotly.matplotlylib.renderer.PlotlyRenderer(self)
plotly.matplotlylib.renderer.PlotlyRenderer.__init__(self)
plotly.matplotlylib.renderer.PlotlyRenderer.close_axes(self,ax)
plotly.matplotlylib.renderer.PlotlyRenderer.close_figure(self,fig)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_bar(self,coll)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_bars(self,bars)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_image(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_marked_line(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_path_collection(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_text(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_title(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_xlabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.draw_ylabel(self,**props)
plotly.matplotlylib.renderer.PlotlyRenderer.open_axes(self,ax,props)
plotly.matplotlylib.renderer.PlotlyRenderer.open_figure(self,fig,props)
plotly.matplotlylib.renderer.PlotlyRenderer.resize(self)
plotly.matplotlylib.renderer.PlotlyRenderer.strip_style(self)
plotly.matplotlylib.renderer.warning_on_one_line(msg,category,filename,lineno,file=None,line=None)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mpltools.py----------------------------------------
A:plotly.matplotlylib.mpltools.inner_corners->inner_obj.get_window_extent().corners()
A:plotly.matplotlylib.mpltools.outer_corners->outer_obj.get_window_extent().corners()
A:plotly.matplotlylib.mpltools.code->tuple(path[1])
A:plotly.matplotlylib.mpltools.symbol->list()
A:plotly.matplotlylib.mpltools.value->value.lstrip('#').lstrip('#')
A:plotly.matplotlylib.mpltools.lv->len(value)
A:plotly.matplotlylib.mpltools.rgb_tup->hex_to_rgb(color)
A:plotly.matplotlylib.mpltools.uniform->all([abs(gap0 - gap) < tol for gap in gaps])
A:plotly.matplotlylib.mpltools.clean_color_list->list()
A:plotly.matplotlylib.mpltools.plotly_colors->list()
A:plotly.matplotlylib.mpltools.symbols->list()
A:plotly.matplotlylib.mpltools.markerstyle->dict(alpha=None, facecolor=convert_rgba_array(props['styles']['facecolor']), marker=convert_path_array(props['paths']), edgewidth=convert_linewidth_array(props['styles']['linewidth']), markersize=convert_size_array(props['mplobj'].get_sizes()), edgecolor=convert_rgba_array(props['styles']['edgecolor']))
A:plotly.matplotlylib.mpltools.ax_frame_on->ax.get_frame_on()
A:plotly.matplotlylib.mpltools.spine_frame_like->spine.is_frame_like()
A:plotly.matplotlylib.mpltools.axis_dict->dict(range=None, type='linear')
A:plotly.matplotlylib.mpltools.axis->ax.get_yaxis()
A:plotly.matplotlylib.mpltools.axis_dict['tick0']->mpl_dates_to_datestrings(axis_dict['tick0'], formatter)
A:plotly.matplotlylib.mpltools.axis_dict['range']->mpl_dates_to_datestrings(props['xlim'], formatter)
A:plotly.matplotlylib.mpltools.xaxis->dict(type=props['axes'][0]['scale'], range=list(props['xlim']), showgrid=props['axes'][0]['grid']['gridOn'], domain=convert_x_domain(props['bounds'], x_bounds), side=props['axes'][0]['position'], tickfont=dict(size=props['axes'][0]['fontsize']))
A:plotly.matplotlylib.mpltools.yaxis->dict(type=props['axes'][1]['scale'], range=list(props['ylim']), showgrid=props['axes'][1]['grid']['gridOn'], domain=convert_y_domain(props['bounds'], y_bounds), side=props['axes'][1]['position'], tickfont=dict(size=props['axes'][1]['fontsize']))
A:plotly.matplotlylib.mpltools.dates->matplotlib.dates.num2date(dates, tz=pytz.utc)
plotly.matplotlylib.mpltools.check_bar_match(old_bar,new_bar)
plotly.matplotlylib.mpltools.check_corners(inner_obj,outer_obj)
plotly.matplotlylib.mpltools.convert_dash(mpl_dash)
plotly.matplotlylib.mpltools.convert_linewidth_array(width_array)
plotly.matplotlylib.mpltools.convert_path(path)
plotly.matplotlylib.mpltools.convert_path_array(path_array)
plotly.matplotlylib.mpltools.convert_rgba_array(color_list)
plotly.matplotlylib.mpltools.convert_size_array(size_array)
plotly.matplotlylib.mpltools.convert_symbol(mpl_symbol)
plotly.matplotlylib.mpltools.convert_va(mpl_va)
plotly.matplotlylib.mpltools.convert_x_domain(mpl_plot_bounds,mpl_max_x_bounds)
plotly.matplotlylib.mpltools.convert_y_domain(mpl_plot_bounds,mpl_max_y_bounds)
plotly.matplotlylib.mpltools.display_to_paper(x,y,layout)
plotly.matplotlylib.mpltools.get_axes_bounds(fig)
plotly.matplotlylib.mpltools.get_axis_mirror(main_spine,mirror_spine)
plotly.matplotlylib.mpltools.get_bar_gap(bar_starts,bar_ends,tol=1e-10)
plotly.matplotlylib.mpltools.get_markerstyle_from_collection(props)
plotly.matplotlylib.mpltools.get_rect_xmax(data)
plotly.matplotlylib.mpltools.get_rect_xmin(data)
plotly.matplotlylib.mpltools.get_rect_ymax(data)
plotly.matplotlylib.mpltools.get_rect_ymin(data)
plotly.matplotlylib.mpltools.get_spine_visible(ax,spine_key)
plotly.matplotlylib.mpltools.hex_to_rgb(value)
plotly.matplotlylib.mpltools.is_bar(bar_containers,**props)
plotly.matplotlylib.mpltools.make_bar(**props)
plotly.matplotlylib.mpltools.merge_color_and_opacity(color,opacity)
plotly.matplotlylib.mpltools.mpl_dates_to_datestrings(dates,mpl_formatter)
plotly.matplotlylib.mpltools.prep_ticks(ax,index,ax_type,props)
plotly.matplotlylib.mpltools.prep_xy_axis(ax,props,x_bounds,y_bounds)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/utils.py----------------------------------------
A:plotly.matplotlylib.mplexporter.utils.rgb->matplotlib.colors.colorConverter.to_rgb(color)
A:plotly.matplotlylib.mplexporter.utils.LINESTYLES->many_to_one({('solid', '-', (None, None)): '10,0', ('dashed', '--'): '6,6', ('dotted', ':'): '2,2', ('dashdot', '-.'): '4,4,2,4', ('', ' ', 'None', 'none'): 'none'})
A:plotly.matplotlylib.mplexporter.utils.ls->obj.get_linestyle()
A:plotly.matplotlylib.mplexporter.utils.dasharray->get_dasharray(gridlines[0])
A:plotly.matplotlylib.mplexporter.utils.path->path.transformed(transform).transformed(transform)
A:plotly.matplotlylib.mplexporter.utils.(vertices, codes)->zip(*vc_tuples)
A:plotly.matplotlylib.mplexporter.utils.vertices->numpy.array(list(itertools.chain(*vertices))).reshape(-1, 2)
A:plotly.matplotlylib.mplexporter.utils.style['alpha']->text.get_alpha()
A:plotly.matplotlylib.mplexporter.utils.style['edgecolor']->color_to_hex(line.get_markeredgecolor())
A:plotly.matplotlylib.mplexporter.utils.style['facecolor']->color_to_hex(line.get_markerfacecolor())
A:plotly.matplotlylib.mplexporter.utils.style['edgewidth']->line.get_markeredgewidth()
A:plotly.matplotlylib.mplexporter.utils.style['dasharray']->get_dasharray(line)
A:plotly.matplotlylib.mplexporter.utils.style['zorder']->text.get_zorder()
A:plotly.matplotlylib.mplexporter.utils.style['color']->color_to_hex(text.get_color())
A:plotly.matplotlylib.mplexporter.utils.style['linewidth']->line.get_linewidth()
A:plotly.matplotlylib.mplexporter.utils.style['marker']->line.get_marker()
A:plotly.matplotlylib.mplexporter.utils.markerstyle->MarkerStyle(line.get_marker())
A:plotly.matplotlylib.mplexporter.utils.markersize->line.get_markersize()
A:plotly.matplotlylib.mplexporter.utils.style['markerpath']->SVG_path(markerstyle.get_path(), markertransform)
A:plotly.matplotlylib.mplexporter.utils.style['fontsize']->text.get_size()
A:plotly.matplotlylib.mplexporter.utils.style['halign']->text.get_horizontalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['valign']->text.get_verticalalignment()
A:plotly.matplotlylib.mplexporter.utils.style['rotation']->text.get_rotation()
A:plotly.matplotlylib.mplexporter.utils.label1On->getattr(ax, axname + 'axis')._major_tick_kw.get('label1On', True)
A:plotly.matplotlylib.mplexporter.utils.locator->getattr(ax, axname + 'axis').get_major_locator()
A:plotly.matplotlylib.mplexporter.utils.props['nticks']->len(locator())
A:plotly.matplotlylib.mplexporter.utils.props['tickvalues']->list(locator())
A:plotly.matplotlylib.mplexporter.utils.formatter->getattr(ax, axname + 'axis').get_major_formatter()
A:plotly.matplotlylib.mplexporter.utils.props['scale']->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.labels->getattr(ax, axname + 'axis').get_ticklabels()
A:plotly.matplotlylib.mplexporter.utils.props['fontsize']->labels[0].get_fontsize()
A:plotly.matplotlylib.mplexporter.utils.props['grid']->get_grid_style(axis)
A:plotly.matplotlylib.mplexporter.utils.gridlines->getattr(ax, axname + 'axis').get_gridlines()
A:plotly.matplotlylib.mplexporter.utils.color->color_to_hex(gridlines[0].get_color())
A:plotly.matplotlylib.mplexporter.utils.alpha->gridlines[0].get_alpha()
A:plotly.matplotlylib.mplexporter.utils.axis->getattr(ax, axname + 'axis')
A:plotly.matplotlylib.mplexporter.utils.domain->getattr(ax, 'get_{0}lim'.format(axname))()
A:plotly.matplotlylib.mplexporter.utils.scale->getattr(ax, axname + 'axis').get_scale()
A:plotly.matplotlylib.mplexporter.utils.(handles, labels)->ax.get_legend_handles_labels()
A:plotly.matplotlylib.mplexporter.utils.visible->legend.get_visible()
A:plotly.matplotlylib.mplexporter.utils.binary_buffer->io.BytesIO()
A:plotly.matplotlylib.mplexporter.utils.lim->ax.axis()
plotly.matplotlylib.mplexporter.utils.SVG_path(path,transform=None,simplify=False)
plotly.matplotlylib.mplexporter.utils.color_to_hex(color)
plotly.matplotlylib.mplexporter.utils.get_axes_properties(ax)
plotly.matplotlylib.mplexporter.utils.get_axis_properties(axis)
plotly.matplotlylib.mplexporter.utils.get_dasharray(obj,i=None)
plotly.matplotlylib.mplexporter.utils.get_figure_properties(fig)
plotly.matplotlylib.mplexporter.utils.get_grid_style(axis)
plotly.matplotlylib.mplexporter.utils.get_legend_properties(ax,legend)
plotly.matplotlylib.mplexporter.utils.get_line_style(line)
plotly.matplotlylib.mplexporter.utils.get_marker_style(line)
plotly.matplotlylib.mplexporter.utils.get_path_style(path,fill=True)
plotly.matplotlylib.mplexporter.utils.get_text_style(text)
plotly.matplotlylib.mplexporter.utils.image_to_base64(image)
plotly.matplotlylib.mplexporter.utils.iter_all_children(obj,skipContainers=False)
plotly.matplotlylib.mplexporter.utils.many_to_one(input_dict)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/exporter.py----------------------------------------
A:plotly.matplotlylib.mplexporter.exporter.data->(transform - force_trans).transform(data)
A:plotly.matplotlylib.mplexporter.exporter.legend->ax.get_legend()
A:plotly.matplotlylib.mplexporter.exporter.props->utils.get_legend_properties(ax, legend)
A:plotly.matplotlylib.mplexporter.exporter.legendElements->list(utils.iter_all_children(legend._legend_box, skipContainers=True))
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, data)->self.process_transform(line.get_transform(), ax, line.get_xydata(), force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.linestyle->utils.get_path_style(patch, fill=patch.get_fill())
A:plotly.matplotlylib.mplexporter.exporter.markerstyle->utils.get_marker_style(line)
A:plotly.matplotlylib.mplexporter.exporter.label->line.get_label()
A:plotly.matplotlylib.mplexporter.exporter.content->text.get_text()
A:plotly.matplotlylib.mplexporter.exporter.transform->patch.get_transform()
A:plotly.matplotlylib.mplexporter.exporter.position->text.get_position()
A:plotly.matplotlylib.mplexporter.exporter.(coords, position)->self.process_transform(transform, ax, position, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.style->utils.get_text_style(text)
A:plotly.matplotlylib.mplexporter.exporter.(vertices, pathcodes)->utils.SVG_path(patch.get_path())
A:plotly.matplotlylib.mplexporter.exporter.(coordinates, vertices)->self.process_transform(transform, ax, vertices, force_trans=force_trans)
A:plotly.matplotlylib.mplexporter.exporter.(transform, transOffset, offsets, paths)->collection._prepare_points()
A:plotly.matplotlylib.mplexporter.exporter.(offset_coords, offsets)->self.process_transform(transOffset, ax, offsets, force_trans=force_offsettrans)
A:plotly.matplotlylib.mplexporter.exporter.path_coords->self.process_transform(transform, ax, force_trans=force_pathtrans)
A:plotly.matplotlylib.mplexporter.exporter.path_transforms->collection.get_transforms()
plotly.matplotlylib.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.Exporter.run(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.__init__(self,renderer,close_mpl=True)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_ax(self,ax)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_fig(self,fig)
plotly.matplotlylib.mplexporter.exporter.Exporter.crawl_legend(self,ax,legend)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_collection(self,ax,collection,force_pathtrans=None,force_offsettrans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_image(self,ax,image)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_line(self,ax,line,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_patch(self,ax,patch,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.draw_text(self,ax,text,force_trans=None,text_type=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.process_transform(transform,ax=None,data=None,return_trans=False,force_trans=None)
plotly.matplotlylib.mplexporter.exporter.Exporter.run(self,fig)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/tools.py----------------------------------------
A:plotly.matplotlylib.mplexporter.tools.load_js->require_js.format(dep_libs)
plotly.matplotlylib.mplexporter.tools.ipynb_vega_init()


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/_py3k_compat.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/renderers/vega_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.dataname->'table{0:03d}'.format(len(self.data) + 1)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.self.specification->dict(width=renderer.figwidth, height=renderer.figheight, data=renderer.data, scales=renderer.scales, axes=renderer.axes, marks=renderer.marks)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.id->random.randint(0, 2 ** 16)
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.renderer->VegaRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vega_renderer.vega_html->VegaHTML(renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vega(fig,notebook=False)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.__init__(self,renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML._repr_html_(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaHTML.html(self)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.VegaRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vega_renderer.fig_to_vega(fig,notebook=False)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/renderers/base.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth']))
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgecolor']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('color')
A:plotly.matplotlylib.mplexporter.renderers.base.pathstyle['edgewidth']->dict(((key, style[key]) for key in ['alpha', 'edgecolor', 'facecolor', 'zorder', 'edgewidth'])).pop('linewidth')
A:plotly.matplotlylib.mplexporter.renderers.base.N->max(len(paths), len(offsets))
A:plotly.matplotlylib.mplexporter.renderers.base.path_transform->matplotlib.transforms.Affine2D(path_transform)
A:plotly.matplotlylib.mplexporter.renderers.base.vertices->matplotlib.transforms.Affine2D(path_transform).transform(vertices)
plotly.matplotlylib.mplexporter.Renderer(object)
plotly.matplotlylib.mplexporter.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.Renderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer(object)
plotly.matplotlylib.mplexporter.renderers.base.Renderer._iter_path_collection(paths,path_transforms,offsets,styles)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_xgrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_has_ygrid(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.ax_zoomable(ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_xgrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_has_ygrid(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.current_ax_zoomable(self)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_marked_line(self,data,coordinates,linestyle,markerstyle,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.base.Renderer.open_legend(self,legend,props)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/renderers/fake_renderer.py----------------------------------------
plotly.matplotlylib.mplexporter.renderers.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.__init__(self)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_axes(self,ax)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_figure(self,fig)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.close_legend(self,legend)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_image(self,imdata,extent,coordinates,style,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_path(self,data,coordinates,pathcodes,style,offset=None,offset_coordinates='data',mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.draw_text(self,text,position,coordinates,style,text_type=None,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_axes(self,ax,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FakeRenderer.open_legend(self,legend,props)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer(FakeRenderer)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.fake_renderer.FullFakeRenderer.draw_path_collection(self,paths,path_coordinates,path_transforms,offsets,offset_coordinates,offset_order,styles,mplobj=None)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/renderers/vincent_renderer.py----------------------------------------
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figwidth->int(props['figwidth'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.self.figheight->int(props['figheight'] * props['dpi'])
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.line->vincent.Line(linedata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.markers->vincent.Scatter(markerdata, iter_idx='x', width=self.figwidth, height=self.figheight)
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.renderer->VincentRenderer()
A:plotly.matplotlylib.mplexporter.renderers.vincent_renderer.exporter->Exporter(renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.fig_to_vincent(fig)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer(Renderer)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_line(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.draw_markers(self,data,coordinates,style,label,mplobj=None)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.VincentRenderer.open_figure(self,fig,props)
plotly.matplotlylib.mplexporter.renderers.vincent_renderer.fig_to_vincent(fig)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/matplotlylib/mplexporter/renderers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/widgets/graph_widget.py----------------------------------------
A:plotly.widgets.graph_widget.js_widget_code->resource_string('plotly', 'widgets/graphWidget.js').decode('utf-8')
A:plotly.widgets.graph_widget._view_name->Unicode('GraphView', sync=True)
A:plotly.widgets.graph_widget._message->json.dumps(_message)
A:plotly.widgets.graph_widget._graph_url->Unicode(sync=True)
A:plotly.widgets.graph_widget._new_url->Unicode(sync=True)
A:plotly.widgets.graph_widget.self._listener_set->set()
A:plotly.widgets.graph_widget.self._clientMessages->deque()
A:plotly.widgets.graph_widget.self._attributes->content.get('response', {})
A:plotly.widgets.graph_widget.url->plotly.plotly.plotly.plot(self._attributes, auto_open=False, filename=self._filename, validate=False)
A:plotly.widgets.graph_widget.message['uid']->str(uuid.uuid4())
A:plotly.widgets.graph_widget.self._message->json.dumps(message, cls=utils.PlotlyJSONEncoder)
A:plotly.widgets.graph_widget.figure->plotly.tools.return_figure_from_figure_or_data(figure_or_data, validate)
plotly.widgets.GraphWidget(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.GraphWidget._fade_to(self,duration,opacity)
plotly.widgets.GraphWidget._handle_msg(self,message)
plotly.widgets.GraphWidget._handle_outgoing_message(self,message)
plotly.widgets.GraphWidget._handle_registration(self,event_type,callback,remove)
plotly.widgets.GraphWidget.add_traces(self,traces,new_indices=None)
plotly.widgets.GraphWidget.delete_traces(self,indices)
plotly.widgets.GraphWidget.extend_traces(self,update,indices=(0,),max_points=None)
plotly.widgets.GraphWidget.hover(self,*hover_objs)
plotly.widgets.GraphWidget.on_click(self,callback,remove=False)
plotly.widgets.GraphWidget.on_hover(self,callback,remove=False)
plotly.widgets.GraphWidget.on_zoom(self,callback,remove=False)
plotly.widgets.GraphWidget.plot(self,figure_or_data,validate=True)
plotly.widgets.GraphWidget.relayout(self,layout)
plotly.widgets.GraphWidget.reorder_traces(self,current_indices,new_indices=None)
plotly.widgets.GraphWidget.restyle(self,update,indices=None)
plotly.widgets.GraphWidget.save(self,ignore_defaults=False,filename='')
plotly.widgets.GraphWidget.url(self)
plotly.widgets.graph_widget.GraphWidget(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.graph_widget.GraphWidget.__init__(self,graph_url='https://plot.ly/~playground/7',**kwargs)
plotly.widgets.graph_widget.GraphWidget._fade_to(self,duration,opacity)
plotly.widgets.graph_widget.GraphWidget._handle_msg(self,message)
plotly.widgets.graph_widget.GraphWidget._handle_outgoing_message(self,message)
plotly.widgets.graph_widget.GraphWidget._handle_registration(self,event_type,callback,remove)
plotly.widgets.graph_widget.GraphWidget.add_traces(self,traces,new_indices=None)
plotly.widgets.graph_widget.GraphWidget.delete_traces(self,indices)
plotly.widgets.graph_widget.GraphWidget.extend_traces(self,update,indices=(0,),max_points=None)
plotly.widgets.graph_widget.GraphWidget.hover(self,*hover_objs)
plotly.widgets.graph_widget.GraphWidget.on_click(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.on_hover(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.on_zoom(self,callback,remove=False)
plotly.widgets.graph_widget.GraphWidget.plot(self,figure_or_data,validate=True)
plotly.widgets.graph_widget.GraphWidget.relayout(self,layout)
plotly.widgets.graph_widget.GraphWidget.reorder_traces(self,current_indices,new_indices=None)
plotly.widgets.graph_widget.GraphWidget.restyle(self,update,indices=None)
plotly.widgets.graph_widget.GraphWidget.save(self,ignore_defaults=False,filename='')
plotly.widgets.graph_widget.GraphWidget.url(self)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/widgets/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/graph_objs/graph_objs_tools.py----------------------------------------
A:plotly.graph_objs.graph_objs_tools.help_string->help_string.format(**help_dict).format(**help_dict)
A:plotly.graph_objs.graph_objs_tools.lines->textwrap.wrap(val, width=LINE_SIZE)
A:plotly.graph_objs.graph_objs_tools.attributes->plotly.graph_reference.get_valid_attributes(object_name, parent_object_names)
A:plotly.graph_objs.graph_objs_tools.valid_attributes->plotly.graph_reference.get_valid_attributes(object_name, parent_object_names)
A:plotly.graph_objs.graph_objs_tools.attributes_dicts->plotly.graph_reference.get_attributes_dicts(object_name, parent_object_names)
A:plotly.graph_objs.graph_objs_tools.r->repr(val)
A:plotly.graph_objs.graph_objs_tools.src_value_str->str(src_value)
A:plotly.graph_objs.graph_objs_tools.err->err.format(src_name, src_value_str).format(src_name, src_value_str)
plotly.graph_objs.graph_objs_tools._dict_attribute_help(object_name,path,parent_object_names,attribute)
plotly.graph_objs.graph_objs_tools._dict_object_help(object_name,path,parent_object_names)
plotly.graph_objs.graph_objs_tools._list_help(object_name,path=(),parent_object_names=())
plotly.graph_objs.graph_objs_tools.assign_id_to_src(src_name,src_value)
plotly.graph_objs.graph_objs_tools.curtail_val_repr(val,max_chars,add_delim=False)
plotly.graph_objs.graph_objs_tools.get_help(object_name,path=(),parent_object_names=(),attribute=None)
plotly.graph_objs.graph_objs_tools.sort_keys(key)
plotly.graph_objs_tools._dict_attribute_help(object_name,path,parent_object_names,attribute)
plotly.graph_objs_tools._dict_object_help(object_name,path,parent_object_names)
plotly.graph_objs_tools._list_help(object_name,path=(),parent_object_names=())
plotly.graph_objs_tools.assign_id_to_src(src_name,src_value)
plotly.graph_objs_tools.curtail_val_repr(val,max_chars,add_delim=False)
plotly.graph_objs_tools.get_help(object_name,path=(),parent_object_names=(),attribute=None)
plotly.graph_objs_tools.sort_keys(key)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/graph_objs/graph_objs.py----------------------------------------
A:plotly.graph_objs.graph_objs.parents->self._get_parents()
A:plotly.graph_objs.graph_objs.path->self._get_path()
A:plotly.graph_objs.graph_objs.parent_object_names->self._get_parent_object_names()
A:plotly.graph_objs.graph_objs.help_string->plotly.graph_objs.graph_objs_tools.get_help(object_name, path, parent_object_names, attribute)
A:plotly.graph_objs.graph_objs._raise->kwargs.pop('_raise', True)
A:plotly.graph_objs.graph_objs.self.__dict__['_name']->kwargs.pop('_name', None)
A:plotly.graph_objs.graph_objs.self.__dict__['_parent']->kwargs.pop('_parent', None)
A:plotly.graph_objs.graph_objs.self.__dict__['_parent_key']->kwargs.pop('_parent_key', None)
A:plotly.graph_objs.graph_objs.note->"Just like a `list`, `{name}` must be instantiated with a *single* collection.\nIn other words these are OK:\n>>> {name}()\n>>> {name}([])\n>>> {name}([dict()])\n>>> {name}([dict(), dict()])\nHowever, these don't make sense:\n>>> {name}(dict())\n>>> {name}(dict(), dict())".format(name=self._get_class_name())
A:plotly.graph_objs.graph_objs.value->GraphObjectFactory.create(subplot_key, _parent=self, _parent_key=key)
A:plotly.graph_objs.graph_objs.index_type->type(index)
A:plotly.graph_objs.graph_objs.index->len(self)
A:plotly.graph_objs.graph_objs.l->list()
A:plotly.graph_objs.graph_objs.key->'{0}.{1}'.format(trace_name, k)
A:plotly.graph_objs.graph_objs.string->'{name}('.format(name=self._get_class_name())
A:plotly.graph_objs.graph_objs.subplot_key->self._get_subplot_key(key)
A:plotly.graph_objs.graph_objs.valid_attributes->plotly.graph_reference.get_valid_attributes(self._name, parent_object_names)
A:plotly.graph_objs.graph_objs.deprecated_attributes->plotly.graph_reference.get_deprecated_attributes(self._name, parent_object_names)
A:plotly.graph_objs.graph_objs.subplot_attributes->plotly.graph_reference.get_subplot_attributes(self._name, parent_object_names)
A:plotly.graph_objs.graph_objs.match->re.search('(?P<digits>\\d+$)', key)
A:plotly.graph_objs.graph_objs.keys->list(self.keys())
A:plotly.graph_objs.graph_objs.d->dict()
A:plotly.graph_objs.graph_objs.sub_data->val.get_data(flatten=flatten)
A:plotly.graph_objs.graph_objs.key_string->'{0}.{1}'.format(key, sub_key)
A:plotly.graph_objs.graph_objs.ordered->OrderedDict()
A:plotly.graph_objs.graph_objs.ordered[key]->self[key].get_ordered()
A:plotly.graph_objs.graph_objs.num_keys->len(keys)
A:plotly.graph_objs.graph_objs.s_sub->plotly.graph_objs.graph_objs_tools.curtail_val_repr(entry, max_chars=max_len - len(s), add_delim=False)
A:plotly.graph_objs.graph_objs.class_name->plotly.graph_reference.OBJECT_NAME_TO_CLASS_NAME.get(object_name)
A:plotly.graph_objs.graph_objs.doc->plotly.graph_objs.graph_objs_tools.get_help(object_name)
A:plotly.graph_objs.graph_objs.cls->type(str(class_name), class_bases, class_dict)
A:plotly.graph_objs.graph_objs.self.data->GraphObjectFactory.create('data', _parent=self, _parent_key='data')
A:plotly.graph_objs.graph_objs.data->self.get_data(flatten=True)
A:plotly.graph_objs.graph_objs.xaxis_key->'xaxis{ref}'.format(ref=ref[0][1:])
A:plotly.graph_objs.graph_objs.yaxis_key->'yaxis{ref}'.format(ref=ref[1][1:])
A:plotly.graph_objs.graph_objs.item->GraphObjectFactory.create(subplot_key, _parent=self, _parent_key=key).get('type', 'scatter')
A:plotly.graph_objs.graph_objs.trace_name->trace.pop('name', 'trace_{0}'.format(i))
A:plotly.graph_objs.graph_objs.new_trace_name->'{0}_{1}'.format(trace_name, j)
A:plotly.graph_objs.graph_objs.__all__->list(graph_reference.CLASSES.keys())
plotly.GraphObjectFactory(object)
plotly.GraphObjectFactory.create(object_name,*args,**kwargs)
plotly.PlotlyBase(object)
plotly.PlotlyBase._get_class_name(self)
plotly.PlotlyBase._get_parent_object_names(self)
plotly.PlotlyBase._get_parents(self)
plotly.PlotlyBase._get_path(self)
plotly.PlotlyBase.help(self,return_help=False)
plotly.PlotlyBase.to_graph_objs(self,**kwargs)
plotly.PlotlyBase.validate(self)
plotly.PlotlyDict(self,*args,**kwargs)
plotly.PlotlyDict.__copy__(self)
plotly.PlotlyDict.__deepcopy__(self,memodict={})
plotly.PlotlyDict.__dir__(self)
plotly.PlotlyDict.__getattr__(self,key)
plotly.PlotlyDict.__getitem__(self,key)
plotly.PlotlyDict.__missing__(self,key)
plotly.PlotlyDict.__setattr__(self,key,value)
plotly.PlotlyDict.__setitem__(self,key,value,_raise=True)
plotly.PlotlyDict._get_attribute_role(self,key,value=None)
plotly.PlotlyDict._get_deprecated_attributes(self)
plotly.PlotlyDict._get_subplot_attributes(self)
plotly.PlotlyDict._get_subplot_key(self,key)
plotly.PlotlyDict._get_valid_attributes(self)
plotly.PlotlyDict._value_to_graph_object(self,key,value,_raise=True)
plotly.PlotlyDict.force_clean(self,**kwargs)
plotly.PlotlyDict.get_data(self,flatten=False)
plotly.PlotlyDict.get_ordered(self,**kwargs)
plotly.PlotlyDict.help(self,attribute=None,return_help=False)
plotly.PlotlyDict.strip_style(self)
plotly.PlotlyDict.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.PlotlyDict.update(self,dict1=None,**dict2)
plotly.PlotlyList(self,*args,**kwargs)
plotly.PlotlyList.__copy__(self)
plotly.PlotlyList.__deepcopy__(self,memodict={})
plotly.PlotlyList.__iadd__(self,other)
plotly.PlotlyList.__setattr__(self,key,value)
plotly.PlotlyList.__setitem__(self,index,value,_raise=True)
plotly.PlotlyList._value_to_graph_object(self,index,value,_raise=True)
plotly.PlotlyList.append(self,value)
plotly.PlotlyList.extend(self,iterable)
plotly.PlotlyList.force_clean(self,**kwargs)
plotly.PlotlyList.get_data(self,flatten=False)
plotly.PlotlyList.get_ordered(self,**kwargs)
plotly.PlotlyList.insert(self,index,value)
plotly.PlotlyList.strip_style(self)
plotly.PlotlyList.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.PlotlyList.update(self,changes,make_copies=False)
plotly._add_classes_to_globals(globals)
plotly._patch_data_class(data_class)
plotly._patch_figure_class(figure_class)
plotly.graph_objs.graph_objs.GraphObjectFactory(object)
plotly.graph_objs.graph_objs.GraphObjectFactory.create(object_name,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyBase(object)
plotly.graph_objs.graph_objs.PlotlyBase._get_class_name(self)
plotly.graph_objs.graph_objs.PlotlyBase._get_parent_object_names(self)
plotly.graph_objs.graph_objs.PlotlyBase._get_parents(self)
plotly.graph_objs.graph_objs.PlotlyBase._get_path(self)
plotly.graph_objs.graph_objs.PlotlyBase.help(self,return_help=False)
plotly.graph_objs.graph_objs.PlotlyBase.to_graph_objs(self,**kwargs)
plotly.graph_objs.graph_objs.PlotlyBase.validate(self)
plotly.graph_objs.graph_objs.PlotlyDict(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.__copy__(self)
plotly.graph_objs.graph_objs.PlotlyDict.__deepcopy__(self,memodict={})
plotly.graph_objs.graph_objs.PlotlyDict.__dir__(self)
plotly.graph_objs.graph_objs.PlotlyDict.__getattr__(self,key)
plotly.graph_objs.graph_objs.PlotlyDict.__getitem__(self,key)
plotly.graph_objs.graph_objs.PlotlyDict.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.__missing__(self,key)
plotly.graph_objs.graph_objs.PlotlyDict.__setattr__(self,key,value)
plotly.graph_objs.graph_objs.PlotlyDict.__setitem__(self,key,value,_raise=True)
plotly.graph_objs.graph_objs.PlotlyDict._get_attribute_role(self,key,value=None)
plotly.graph_objs.graph_objs.PlotlyDict._get_deprecated_attributes(self)
plotly.graph_objs.graph_objs.PlotlyDict._get_subplot_attributes(self)
plotly.graph_objs.graph_objs.PlotlyDict._get_subplot_key(self,key)
plotly.graph_objs.graph_objs.PlotlyDict._get_valid_attributes(self)
plotly.graph_objs.graph_objs.PlotlyDict._value_to_graph_object(self,key,value,_raise=True)
plotly.graph_objs.graph_objs.PlotlyDict.force_clean(self,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.get_data(self,flatten=False)
plotly.graph_objs.graph_objs.PlotlyDict.get_ordered(self,**kwargs)
plotly.graph_objs.graph_objs.PlotlyDict.help(self,attribute=None,return_help=False)
plotly.graph_objs.graph_objs.PlotlyDict.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyDict.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyDict.update(self,dict1=None,**dict2)
plotly.graph_objs.graph_objs.PlotlyList(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyList.__copy__(self)
plotly.graph_objs.graph_objs.PlotlyList.__deepcopy__(self,memodict={})
plotly.graph_objs.graph_objs.PlotlyList.__iadd__(self,other)
plotly.graph_objs.graph_objs.PlotlyList.__init__(self,*args,**kwargs)
plotly.graph_objs.graph_objs.PlotlyList.__setattr__(self,key,value)
plotly.graph_objs.graph_objs.PlotlyList.__setitem__(self,index,value,_raise=True)
plotly.graph_objs.graph_objs.PlotlyList._value_to_graph_object(self,index,value,_raise=True)
plotly.graph_objs.graph_objs.PlotlyList.append(self,value)
plotly.graph_objs.graph_objs.PlotlyList.extend(self,iterable)
plotly.graph_objs.graph_objs.PlotlyList.force_clean(self,**kwargs)
plotly.graph_objs.graph_objs.PlotlyList.get_data(self,flatten=False)
plotly.graph_objs.graph_objs.PlotlyList.get_ordered(self,**kwargs)
plotly.graph_objs.graph_objs.PlotlyList.insert(self,index,value)
plotly.graph_objs.graph_objs.PlotlyList.strip_style(self)
plotly.graph_objs.graph_objs.PlotlyList.to_string(self,level=0,indent=4,eol='\n',pretty=True,max_chars=80)
plotly.graph_objs.graph_objs.PlotlyList.update(self,changes,make_copies=False)
plotly.graph_objs.graph_objs._add_classes_to_globals(globals)
plotly.graph_objs.graph_objs._patch_data_class(data_class)
plotly.graph_objs.graph_objs._patch_figure_class(figure_class)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/graph_objs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/plotly/plotly.py----------------------------------------
A:plotly.plotly.plotly.credentials->get_credentials()
A:plotly.plotly.plotly.session_credentials->get_session_credentials()
A:plotly.plotly.plotly.session_value->get_session_config().get(config_key)
A:plotly.plotly.plotly.config->plotly.tools.get_config_file()
A:plotly.plotly.plotly.session_config->get_session_config()
A:plotly.plotly.plotly.default_plot_options->copy.deepcopy(DEFAULT_PLOT_OPTIONS)
A:plotly.plotly.plotly.file_options->plotly.tools.get_config_file()
A:plotly.plotly.plotly.session_options->get_session_plot_options()
A:plotly.plotly.plotly.plot_options_from_call_signature->copy.deepcopy(plot_options_from_call_signature)
A:plotly.plotly.plotly.url->_api_v2.api_url('folders')
A:plotly.plotly.plotly.layout->figure_or_data.get('layout', {})
A:plotly.plotly.plotly.embed_options->dict()
A:plotly.plotly.plotly.embed_options['width']->figure_or_data.get('layout', {}).get('width', '100%')
A:plotly.plotly.plotly.embed_options['height']->figure_or_data.get('layout', {}).get('height', 525)
A:plotly.plotly.plotly.figure->plotly.tools.return_figure_from_figure_or_data(figure_or_data, validate)
A:plotly.plotly.plotly.plot_options->_plot_option_logic(plot_options)
A:plotly.plotly.plotly.res->requests.patch(api_url, data=payload, headers=_api_v2.headers(), verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.fig->plotly.tools._replace_newline(figure)
A:plotly.plotly.plotly.resource->'/apigetfile/{username}/{file_id}'.format(username=file_owner, file_id=file_id)
A:plotly.plotly.plotly.response->requests.get(plotly_rest_url + resource, headers=headers, verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.content->json.loads(response.content)
A:plotly.plotly.plotly.self._stream->plotly.plotly.chunked_requests.Stream(streaming_url, 80, {'Host': streaming_url, 'plotly-streamtoken': self.stream_id})
A:plotly.plotly.plotly.stream_object->dict()
A:plotly.plotly.plotly.jdata->json.dumps(stream_object, cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.scale->float(scale)
A:plotly.plotly.plotly.headers->_api_v2.headers()
A:plotly.plotly.plotly.return_data->json.loads(res.content)
A:plotly.plotly.plotly.img->cls.get(figure_or_data, format, width, height, scale)
A:plotly.plotly.plotly.(base, ext)->os.path.splitext(filename)
A:plotly.plotly.plotly.f->open(filename, 'wb')
A:plotly.plotly.plotly.req_col.id->'{0}/{1}'.format(grid_id, resp_col['uid'])
A:plotly.plotly.plotly.paths->filename.split('/')
A:plotly.plotly.plotly.parent_path->'/'.join(paths[0:-1])
A:plotly.plotly.plotly.grid_json->grid._to_plotly_grid_json()
A:plotly.plotly.plotly.upload_url->_api_v2.api_url('grids')
A:plotly.plotly.plotly.req->requests.post(upload_url, data=payload, headers=_api_v2.headers(), verify=get_config()['plotly_ssl_verification'])
A:plotly.plotly.plotly.grid_id->_api_v2.parse_grid_id_args(grid, grid_url)
A:plotly.plotly.plotly.duplicate_name->plotly.utils.get_first_duplicate(column_names)
A:plotly.plotly.plotly.err->plotly.exceptions.NON_UNIQUE_COLUMN_MESSAGE.format(duplicate_name)
A:plotly.plotly.plotly.n_columns->len([column for column in grid])
A:plotly.plotly.plotly.longest_column_length->max([len(col.data) for col in grid])
A:plotly.plotly.plotly.column_extensions->zip(*rows)
A:plotly.plotly.plotly.supplied_arg_name->supplied_arg_names.pop()
A:plotly.plotly.plotly.response_dict->json.loads(response.content.decode('utf8'))
A:plotly.plotly.plotly.encoded_api_auth->base64.b64encode(six.b('{0}:{1}'.format(username, api_key))).decode('utf8')
A:plotly.plotly.plotly.encoded_proxy_auth->base64.b64encode(six.b('{0}:{1}'.format(proxy_username, proxy_password))).decode('utf8')
A:plotly.plotly.plotly.username->get_credentials().get('username')
A:plotly.plotly.plotly.api_key->get_credentials().get('api_key')
A:plotly.plotly.plotly.urlsplit->six.moves.urllib.parse.urlparse(plot_url)
A:plotly.plotly.plotly.new_response->requests.patch(url, headers=_api_v2.headers(), data={'share_key_enabled': 'True', 'world_readable': 'False'})
A:plotly.plotly.plotly.str_content->requests.patch(url, headers=_api_v2.headers(), data={'share_key_enabled': 'True', 'world_readable': 'False'}).content.decode('utf-8')
A:plotly.plotly.plotly.new_response_data->json.loads(str_content)
A:plotly.plotly.plotly.access_res->requests.get(embed_url)
A:plotly.plotly.plotly.plot_url->add_share_key_to_url(plot_url.split('?')[0], attempt)
A:plotly.plotly.plotly.data->json.dumps(fig['data'] if 'data' in fig else [], cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.kwargs->json.dumps(dict(filename=plot_options['filename'], fileopt=plot_options['fileopt'], world_readable=plot_options['world_readable'], sharing=plot_options['sharing'], layout=fig['layout'] if 'layout' in fig else {}), cls=utils.PlotlyJSONEncoder)
A:plotly.plotly.plotly.payload->dict(platform='python', version=version.__version__, args=data, un=username, key=api_key, origin='plot', kwargs=kwargs)
A:plotly.plotly.plotly.r->json.loads(r.text)
A:plotly.plotly.plotly.r['url']->add_share_key_to_url(r['url'])
plotly.plot(figure_or_data,validate=True,**plot_options)
plotly.plotly.Stream(self,stream_id)
plotly.plotly.Stream.close(self)
plotly.plotly.Stream.heartbeat(self,reconnect_on=(200,'',408))
plotly.plotly.Stream.open(self)
plotly.plotly.Stream.write(self,trace,layout=None,validate=True,reconnect_on=(200,'',408))
plotly.plotly._api_v2
plotly.plotly._api_v2.api_url(cls,resource)
plotly.plotly._api_v2.headers(cls)
plotly.plotly._api_v2.parse_grid_id_args(cls,grid,grid_url)
plotly.plotly._api_v2.response_handler(cls,response)
plotly.plotly._open_url(url)
plotly.plotly._plot_option_logic(plot_options_from_call_signature)
plotly.plotly._send_to_plotly(figure,**plot_options)
plotly.plotly.add_share_key_to_url(plot_url,attempt=0)
plotly.plotly.file_ops
plotly.plotly.file_ops.mkdirs(cls,folder_path)
plotly.plotly.get_config()
plotly.plotly.get_credentials()
plotly.plotly.get_figure(file_owner_or_url,file_id=None,raw=False)
plotly.plotly.grid_ops
plotly.plotly.grid_ops._fill_in_response_column_ids(cls,request_columns,response_columns,grid_id)
plotly.plotly.grid_ops.append_columns(cls,columns,grid=None,grid_url=None)
plotly.plotly.grid_ops.append_rows(cls,rows,grid=None,grid_url=None)
plotly.plotly.grid_ops.delete(cls,grid=None,grid_url=None)
plotly.plotly.grid_ops.upload(cls,grid,filename,world_readable=True,auto_open=True,meta=None)
plotly.plotly.image
plotly.plotly.image.get(figure_or_data,format='png',width=None,height=None,scale=None)
plotly.plotly.image.ishow(cls,figure_or_data,format='png',width=None,height=None,scale=None)
plotly.plotly.image.save_as(cls,figure_or_data,filename,format=None,width=None,height=None,scale=None)
plotly.plotly.iplot(figure_or_data,**plot_options)
plotly.plotly.iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.meta_ops
plotly.plotly.meta_ops.upload(cls,meta,grid=None,grid_url=None)
plotly.plotly.plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.Stream(self,stream_id)
plotly.plotly.plotly.Stream.__init__(self,stream_id)
plotly.plotly.plotly.Stream.close(self)
plotly.plotly.plotly.Stream.heartbeat(self,reconnect_on=(200,'',408))
plotly.plotly.plotly.Stream.open(self)
plotly.plotly.plotly.Stream.write(self,trace,layout=None,validate=True,reconnect_on=(200,'',408))
plotly.plotly.plotly._api_v2
plotly.plotly.plotly._api_v2.api_url(cls,resource)
plotly.plotly.plotly._api_v2.headers(cls)
plotly.plotly.plotly._api_v2.parse_grid_id_args(cls,grid,grid_url)
plotly.plotly.plotly._api_v2.response_handler(cls,response)
plotly.plotly.plotly._open_url(url)
plotly.plotly.plotly._plot_option_logic(plot_options_from_call_signature)
plotly.plotly.plotly._send_to_plotly(figure,**plot_options)
plotly.plotly.plotly.add_share_key_to_url(plot_url,attempt=0)
plotly.plotly.plotly.file_ops
plotly.plotly.plotly.file_ops.mkdirs(cls,folder_path)
plotly.plotly.plotly.get_config()
plotly.plotly.plotly.get_credentials()
plotly.plotly.plotly.get_figure(file_owner_or_url,file_id=None,raw=False)
plotly.plotly.plotly.grid_ops
plotly.plotly.plotly.grid_ops._fill_in_response_column_ids(cls,request_columns,response_columns,grid_id)
plotly.plotly.plotly.grid_ops.append_columns(cls,columns,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.append_rows(cls,rows,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.delete(cls,grid=None,grid_url=None)
plotly.plotly.plotly.grid_ops.upload(cls,grid,filename,world_readable=True,auto_open=True,meta=None)
plotly.plotly.plotly.image
plotly.plotly.plotly.image.get(figure_or_data,format='png',width=None,height=None,scale=None)
plotly.plotly.plotly.image.ishow(cls,figure_or_data,format='png',width=None,height=None,scale=None)
plotly.plotly.plotly.image.save_as(cls,figure_or_data,filename,format=None,width=None,height=None,scale=None)
plotly.plotly.plotly.iplot(figure_or_data,**plot_options)
plotly.plotly.plotly.iplot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.meta_ops
plotly.plotly.plotly.meta_ops.upload(cls,meta,grid=None,grid_url=None)
plotly.plotly.plotly.plot(figure_or_data,validate=True,**plot_options)
plotly.plotly.plotly.plot_mpl(fig,resize=True,strip_style=False,update=None,**plot_options)
plotly.plotly.plotly.validate_credentials(credentials)
plotly.plotly.validate_credentials(credentials)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/plotly/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/plotly/chunked_requests/chunked_request.py----------------------------------------
A:plotly.plotly.chunked_requests.chunked_request.response->six.b('')
A:plotly.plotly.chunked_requests.chunked_request.msglen->format(len(msg), 'x')
A:plotly.plotly.chunked_requests.chunked_request.proxy->os.environ.get('http_proxy')
A:plotly.plotly.chunked_requests.chunked_request.no_proxy->os.environ.get('no_proxy')
A:plotly.plotly.chunked_requests.chunked_request.p->urlparse(proxy)
A:plotly.plotly.chunked_requests.chunked_request.(proxy_server, proxy_port)->self._get_proxy_config()
A:plotly.plotly.chunked_requests.chunked_request.self._conn->six.moves.http_client.HTTPConnection(server, port)
A:plotly.plotly.chunked_requests.chunked_request.self._bytes->self._conn.sock.recv(1)
A:plotly.plotly.chunked_requests.chunked_request._bytes->self._conn.sock.recv(1)
plotly.chunked_requests.Stream(self,server,port=80,headers={},url='/')
plotly.chunked_requests.Stream._connect(self)
plotly.chunked_requests.Stream._get_proxy_config(self)
plotly.chunked_requests.Stream._getresponse(self)
plotly.chunked_requests.Stream._isconnected(self)
plotly.chunked_requests.Stream._reconnect(self)
plotly.chunked_requests.Stream._reset_retries(self)
plotly.chunked_requests.Stream.close(self)
plotly.chunked_requests.Stream.write(self,data,reconnect_on=('',200))
plotly.chunked_requests.chunked_request._FakeSocket(six.StringIO)
plotly.chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)
plotly.plotly.chunked_requests.chunked_request.Stream(self,server,port=80,headers={},url='/')
plotly.plotly.chunked_requests.chunked_request.Stream.__init__(self,server,port=80,headers={},url='/')
plotly.plotly.chunked_requests.chunked_request.Stream._connect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._get_proxy_config(self)
plotly.plotly.chunked_requests.chunked_request.Stream._getresponse(self)
plotly.plotly.chunked_requests.chunked_request.Stream._isconnected(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reconnect(self)
plotly.plotly.chunked_requests.chunked_request.Stream._reset_retries(self)
plotly.plotly.chunked_requests.chunked_request.Stream.close(self)
plotly.plotly.chunked_requests.chunked_request.Stream.write(self,data,reconnect_on=('',200))
plotly.plotly.chunked_requests.chunked_request._FakeSocket(six.StringIO)
plotly.plotly.chunked_requests.chunked_request._FakeSocket.makefile(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/plotly/chunked_requests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/grid_objs/grid_objs.py----------------------------------------
A:plotly.grid_objs.grid_objs.jdata->json.dumps(self.data, cls=utils.PlotlyJSONEncoder)
A:plotly.grid_objs.grid_objs.duplicate_name->plotly.utils.get_first_duplicate(column_names)
A:plotly.grid_objs.grid_objs.err->plotly.exceptions.NON_UNIQUE_COLUMN_MESSAGE.format(column.name)
A:plotly.grid_objs.grid_objs.self._columns->list(iterable_of_columns)
plotly.grid_objs.Column(self,data,name)
plotly.grid_objs.Column.__repr__(self)
plotly.grid_objs.Column.__str__(self)
plotly.grid_objs.Column.to_plotly_json(self)
plotly.grid_objs.Grid(self,iterable_of_columns)
plotly.grid_objs.Grid.__delitem__(self,index)
plotly.grid_objs.Grid.__getitem__(self,index)
plotly.grid_objs.Grid.__len__(self)
plotly.grid_objs.Grid.__repr__(self)
plotly.grid_objs.Grid.__setitem__(self,index,column)
plotly.grid_objs.Grid._to_plotly_grid_json(self)
plotly.grid_objs.Grid._validate_insertion(self,column)
plotly.grid_objs.Grid.get_column(self,column_name)
plotly.grid_objs.Grid.insert(self,index,column)
plotly.grid_objs.grid_objs.Column(self,data,name)
plotly.grid_objs.grid_objs.Column.__init__(self,data,name)
plotly.grid_objs.grid_objs.Column.__repr__(self)
plotly.grid_objs.grid_objs.Column.__str__(self)
plotly.grid_objs.grid_objs.Column.to_plotly_json(self)
plotly.grid_objs.grid_objs.Grid(self,iterable_of_columns)
plotly.grid_objs.grid_objs.Grid.__delitem__(self,index)
plotly.grid_objs.grid_objs.Grid.__getitem__(self,index)
plotly.grid_objs.grid_objs.Grid.__init__(self,iterable_of_columns)
plotly.grid_objs.grid_objs.Grid.__len__(self)
plotly.grid_objs.grid_objs.Grid.__repr__(self)
plotly.grid_objs.grid_objs.Grid.__setitem__(self,index,column)
plotly.grid_objs.grid_objs.Grid._to_plotly_grid_json(self)
plotly.grid_objs.grid_objs.Grid._validate_insertion(self,column)
plotly.grid_objs.grid_objs.Grid.get_column(self,column_name)
plotly.grid_objs.grid_objs.Grid.insert(self,index,column)


----------------------------------------/home/zhang/Packages/plotly/plotly1.9.10/grid_objs/__init__.py----------------------------------------

