
----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/exception.py----------------------------------------
networkx.AmbiguousSolution(NetworkXException)
networkx.ExceededMaxIterations(NetworkXException)
networkx.HasACycle(NetworkXException)
networkx.NetworkXAlgorithmError(NetworkXException)
networkx.NetworkXError(NetworkXException)
networkx.NetworkXException(Exception)
networkx.NetworkXNoCycle(NetworkXUnfeasible)
networkx.NetworkXNoPath(NetworkXUnfeasible)
networkx.NetworkXNotImplemented(NetworkXException)
networkx.NetworkXPointlessConcept(NetworkXException)
networkx.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.NetworkXUnfeasible(NetworkXAlgorithmError)
networkx.NodeNotFound(NetworkXException)
networkx.PowerIterationFailedConvergence(self,num_iterations,*args,**kw)
networkx.exception.AmbiguousSolution(NetworkXException)
networkx.exception.ExceededMaxIterations(NetworkXException)
networkx.exception.HasACycle(NetworkXException)
networkx.exception.NetworkXAlgorithmError(NetworkXException)
networkx.exception.NetworkXError(NetworkXException)
networkx.exception.NetworkXException(Exception)
networkx.exception.NetworkXNoCycle(NetworkXUnfeasible)
networkx.exception.NetworkXNoPath(NetworkXUnfeasible)
networkx.exception.NetworkXNotImplemented(NetworkXException)
networkx.exception.NetworkXPointlessConcept(NetworkXException)
networkx.exception.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.exception.NetworkXUnfeasible(NetworkXAlgorithmError)
networkx.exception.NodeNotFound(NetworkXException)
networkx.exception.PowerIterationFailedConvergence(self,num_iterations,*args,**kw)
networkx.exception.PowerIterationFailedConvergence.__init__(self,num_iterations,*args,**kw)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/convert_matrix.py----------------------------------------
A:networkx.convert_matrix.M->to_numpy_array(G, nodelist=nodelist, dtype=dtype, order=order, multigraph_weight=multigraph_weight, weight=weight, nonedge=nonedge)
A:networkx.convert_matrix.nodelist->list(G)
A:networkx.convert_matrix.missing->list(set(df.index).difference(set(df.columns)))
A:networkx.convert_matrix.G->networkx.empty_graph(0, create_using)
A:networkx.convert_matrix.edgelist->networkx.empty_graph(0, create_using).edges(nodelist, data=True)
A:networkx.convert_matrix.all_attrs->set().union(*(d.keys() for (_, _, d) in edgelist))
A:networkx.convert_matrix.nan->float('nan')
A:networkx.convert_matrix.g->networkx.empty_graph(0, create_using)
A:networkx.convert_matrix.attribute_data->zip(attribute_data, multigraph_edge_keys)
A:networkx.convert_matrix.key->networkx.empty_graph(0, create_using).add_edge(s, t)
A:networkx.convert_matrix.nlen->len(nodelist)
A:networkx.convert_matrix.nodeset->set(nodelist)
A:networkx.convert_matrix.index->dict(zip(nodelist, range(nlen)))
A:networkx.convert_matrix.coefficients->zip(*((index[u], index[v], wt) for (u, v, wt) in G.edges(data=weight, default=1)))
A:networkx.convert_matrix.A->numpy.full((nlen, nlen), fill_value=nonedge, dtype=dtype, order=order)
A:networkx.convert_matrix.selfloops->list(nx.selfloop_edges(G, data=weight, default=1))
A:networkx.convert_matrix.(diag_index, diag_data)->zip(*((index[u], -wt) for (u, v, wt) in selfloops))
A:networkx.convert_matrix.triples->chain((((u, v, {'weight': 1}) for d in range(A[u, v])) for (u, v) in edges))
A:networkx.convert_matrix.idx->dict(zip(nodelist, range(nlen)))
A:networkx.convert_matrix.d->defaultdict(list)
A:networkx.convert_matrix.fields->sorted(((offset, dtype, name) for (name, (dtype, offset)) in A.dtype.fields.items()))
networkx.convert_matrix._coo_gen_triples(A)
networkx.convert_matrix._csc_gen_triples(A)
networkx.convert_matrix._csr_gen_triples(A)
networkx.convert_matrix._dok_gen_triples(A)
networkx.convert_matrix._generate_weighted_edges(A)
networkx.convert_matrix.from_numpy_array(A,parallel_edges=False,create_using=None)
networkx.convert_matrix.from_pandas_adjacency(df,create_using=None)
networkx.convert_matrix.from_pandas_edgelist(df,source='source',target='target',edge_attr=None,create_using=None,edge_key=None)
networkx.convert_matrix.from_scipy_sparse_array(A,parallel_edges=False,create_using=None,edge_attribute='weight')
networkx.convert_matrix.to_numpy_array(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.convert_matrix.to_pandas_adjacency(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.convert_matrix.to_pandas_edgelist(G,source='source',target='target',nodelist=None,dtype=None,edge_key=None)
networkx.convert_matrix.to_scipy_sparse_array(G,nodelist=None,dtype=None,weight='weight',format='csr')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/lazy_imports.py----------------------------------------
A:networkx.lazy_imports.submodules->set(submodules)
A:networkx.lazy_imports.__all__->list(submodules | attr_to_modules.keys())
A:networkx.lazy_imports.submod->importlib.import_module(f'{module_name}.{attr_to_modules[name]}')
A:networkx.lazy_imports.spec->importlib.util.find_spec(fullname)
A:networkx.lazy_imports.module->importlib.util.module_from_spec(spec)
A:networkx.lazy_imports.loader->importlib.util.LazyLoader(spec.loader)
networkx._lazy_import(fullname)
networkx.lazy_imports.DelayedImportErrorModule(self,frame_data,*args,**kwargs)
networkx.lazy_imports.DelayedImportErrorModule.__getattr__(self,x)
networkx.lazy_imports.DelayedImportErrorModule.__init__(self,frame_data,*args,**kwargs)
networkx.lazy_imports._lazy_import(fullname)
networkx.lazy_imports.attach(module_name,submodules=None,submod_attrs=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/relabel.py----------------------------------------
A:networkx.relabel.D->networkx.DiGraph(list(mapping.items()))
A:networkx.relabel.nodes->reversed(list(nx.topological_sort(D)))
A:networkx.relabel.multigraph->G.is_multigraph()
A:networkx.relabel.directed->G.is_directed()
A:networkx.relabel.seen->set()
A:networkx.relabel.H->relabel_nodes(G, mapping)
A:networkx.relabel.seen_edges->set()
A:networkx.relabel.mapping->dict(zip([n for (d, n) in dv_pairs], range(first_label, N)))
A:networkx.relabel.nlist->sorted(G.nodes())
networkx.relabel._relabel_copy(G,mapping)
networkx.relabel._relabel_inplace(G,mapping)
networkx.relabel.convert_node_labels_to_integers(G,first_label=0,ordering='default',label_attribute=None)
networkx.relabel.relabel_nodes(G,mapping,copy=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/conftest.py----------------------------------------
A:networkx.conftest.skip_slow->pytest.mark.skip(reason='need --runslow option to run')
networkx.conftest.add_nx(doctest_namespace)
networkx.conftest.pytest_addoption(parser)
networkx.conftest.pytest_collection_modifyitems(config,items)
networkx.conftest.pytest_configure(config)
networkx.conftest.set_warnings()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/convert.py----------------------------------------
A:networkx.convert.result->from_dict_of_dicts(data.adj, create_using=create_using, multigraph_input=data.is_multigraph())
A:networkx.convert.G->networkx.empty_graph(0, create_using)
A:networkx.convert.dod[u]->dod.fromkeys(nbrdict, edge_data)
A:networkx.convert.seen->set()
networkx.convert.from_dict_of_dicts(d,create_using=None,multigraph_input=False)
networkx.convert.from_dict_of_lists(d,create_using=None)
networkx.convert.from_edgelist(edgelist,create_using=None)
networkx.convert.to_dict_of_dicts(G,nodelist=None,edge_data=None)
networkx.convert.to_dict_of_lists(G,nodelist=None)
networkx.convert.to_edgelist(G,nodelist=None)
networkx.convert.to_networkx_graph(data,create_using=None,multigraph_input=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/triads.py----------------------------------------
A:networkx.generators.triads.G->DiGraph()
networkx.generators.triad_graph(triad_name)
networkx.generators.triads.triad_graph(triad_name)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/nonisomorphic_trees.py----------------------------------------
A:networkx.generators.nonisomorphic_trees.layout->_next_rooted_tree(layout)
A:networkx.generators.nonisomorphic_trees.result->list(predecessor)
A:networkx.generators.nonisomorphic_trees.(left, rest)->_split_tree(candidate)
A:networkx.generators.nonisomorphic_trees.left_height->max(left)
A:networkx.generators.nonisomorphic_trees.rest_height->max(rest)
A:networkx.generators.nonisomorphic_trees.p->len(left)
A:networkx.generators.nonisomorphic_trees.new_candidate->_next_rooted_tree(candidate, p)
A:networkx.generators.nonisomorphic_trees.(new_left, new_rest)->_split_tree(new_candidate)
A:networkx.generators.nonisomorphic_trees.new_left_height->max(new_left)
A:networkx.generators.nonisomorphic_trees.suffix->range(1, new_left_height + 2)
A:networkx.generators.nonisomorphic_trees.m->len(layout)
A:networkx.generators.nonisomorphic_trees.G->networkx.Graph()
networkx.generators.nonisomorphic__layout_to_graph(layout)
networkx.generators.nonisomorphic__layout_to_matrix(layout)
networkx.generators.nonisomorphic__next_rooted_tree(predecessor,p=None)
networkx.generators.nonisomorphic__next_tree(candidate)
networkx.generators.nonisomorphic__split_tree(layout)
networkx.generators.nonisomorphic_nonisomorphic_trees(order,create='graph')
networkx.generators.nonisomorphic_number_of_nonisomorphic_trees(order)
networkx.generators.nonisomorphic_trees._layout_to_graph(layout)
networkx.generators.nonisomorphic_trees._layout_to_matrix(layout)
networkx.generators.nonisomorphic_trees._next_rooted_tree(predecessor,p=None)
networkx.generators.nonisomorphic_trees._next_tree(candidate)
networkx.generators.nonisomorphic_trees._split_tree(layout)
networkx.generators.nonisomorphic_trees.nonisomorphic_trees(order,create='graph')
networkx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees(order)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/lattice.py----------------------------------------
A:networkx.generators.lattice.G->contracted_nodes(G, (0, j), (n, j))
A:networkx.generators.lattice.func->repeat(cycle_graph if periodic else path_graph)
A:networkx.generators.lattice.Gnew->next(func)(current_dim)
A:networkx.generators.lattice.H->contracted_nodes(H, (0, j), (N, j))
A:networkx.generators.lattice.rows->range(M + 2)
A:networkx.generators.lattice.cols->range(n + 1)
networkx.generators.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.generators.grid_graph(dim,periodic=False)
networkx.generators.hexagonal_lattice_graph(m,n,periodic=False,with_positions=True,create_using=None)
networkx.generators.hypercube_graph(n)
networkx.generators.lattice.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.generators.lattice.grid_graph(dim,periodic=False)
networkx.generators.lattice.hexagonal_lattice_graph(m,n,periodic=False,with_positions=True,create_using=None)
networkx.generators.lattice.hypercube_graph(n)
networkx.generators.lattice.triangular_lattice_graph(m,n,periodic=False,with_positions=True,create_using=None)
networkx.generators.triangular_lattice_graph(m,n,periodic=False,with_positions=True,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/random_clustered.py----------------------------------------
A:networkx.generators.random_clustered.joint_degree_sequence->list(joint_degree_sequence)
A:networkx.generators.random_clustered.N->len(joint_degree_sequence)
A:networkx.generators.random_clustered.G->networkx.empty_graph(N, create_using, default=nx.MultiGraph)
A:networkx.generators.random_clustered.n1->tlist.pop()
A:networkx.generators.random_clustered.n2->tlist.pop()
A:networkx.generators.random_clustered.n3->tlist.pop()
networkx.generators.random_clustered.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)
networkx.generators.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/geometric.py----------------------------------------
A:networkx.generators.geometric.nodes_pos->networkx.empty_graph(n).nodes(data='pos')
A:networkx.generators.geometric.(nodes, coords)->list(zip(*nodes_pos))
A:networkx.generators.geometric.kdtree->scipy.spatial.cKDTree(coords)
A:networkx.generators.geometric.edge_indexes->scipy.spatial.cKDTree(coords).query_pairs(radius, p)
A:networkx.generators.geometric.G->networkx.empty_graph(n)
A:networkx.generators.geometric.L->max((metric(x, y) for (x, y) in combinations(pos.values(), 2)))
A:networkx.generators.geometric.nodes->list(product(range(n), repeat=dim))
A:networkx.generators.geometric.d->sum((abs(b - a) for (a, b) in zip(p1, p2)))
A:networkx.generators.geometric.cdf->list(accumulate(probs))
networkx.generators._geometric_edges(G,radius,p=2)
networkx.generators.geographical_threshold_graph(n,theta,dim=2,pos=None,weight=None,metric=None,p_dist=None,seed=None)
networkx.generators.geometric._geometric_edges(G,radius,p=2)
networkx.generators.geometric.geographical_threshold_graph(n,theta,dim=2,pos=None,weight=None,metric=None,p_dist=None,seed=None)
networkx.generators.geometric.geometric_edges(G,radius,p=2)
networkx.generators.geometric.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.generators.geometric.random_geometric_graph(n,radius,dim=2,pos=None,p=2,seed=None)
networkx.generators.geometric.soft_random_geometric_graph(n,radius,dim=2,pos=None,p=2,p_dist=None,seed=None)
networkx.generators.geometric.thresholded_random_geometric_graph(n,radius,theta,dim=2,pos=None,weight=None,p=2,seed=None)
networkx.generators.geometric.waxman_graph(n,beta=0.4,alpha=0.1,L=None,domain=(0,0,1,1),metric=None,seed=None)
networkx.generators.geometric_edges(G,radius,p=2)
networkx.generators.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.generators.random_geometric_graph(n,radius,dim=2,pos=None,p=2,seed=None)
networkx.generators.soft_random_geometric_graph(n,radius,dim=2,pos=None,p=2,p_dist=None,seed=None)
networkx.generators.thresholded_random_geometric_graph(n,radius,theta,dim=2,pos=None,weight=None,p=2,seed=None)
networkx.generators.waxman_graph(n,beta=0.4,alpha=0.1,L=None,domain=(0,0,1,1),metric=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/sudoku.py----------------------------------------
A:networkx.generators.sudoku.G->networkx.empty_graph(n4)
networkx.generators.sudoku.sudoku_graph(n=3)
networkx.generators.sudoku_graph(n=3)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/small.py----------------------------------------
A:networkx.generators.small.G->networkx.from_dict_of_lists({0: [1, 2, 3], 1: [4, 26], 2: [10, 11], 3: [18, 19], 4: [5, 33], 5: [6, 29], 6: [7, 27], 7: [8, 14], 8: [9, 38], 9: [10, 37], 10: [39], 11: [12, 39], 12: [13, 35], 13: [14, 15], 14: [34], 15: [16, 22], 16: [17, 44], 17: [18, 43], 18: [45], 19: [20, 45], 20: [21, 41], 21: [22, 23], 22: [40], 23: [24, 27], 24: [25, 32], 25: [26, 31], 26: [33], 27: [28], 28: [29, 32], 29: [30], 30: [31, 33], 31: [32], 34: [35, 38], 35: [36], 36: [37, 39], 37: [38], 40: [41, 44], 41: [42], 42: [43, 45], 43: [44]}, create_using=create_using)
A:networkx.generators.small.nodes->sorted(list(G))
networkx.generators.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.generators._raise_on_directed(func)
networkx.generators.bull_graph(create_using=None)
networkx.generators.chvatal_graph(create_using=None)
networkx.generators.cubical_graph(create_using=None)
networkx.generators.desargues_graph(create_using=None)
networkx.generators.diamond_graph(create_using=None)
networkx.generators.dodecahedral_graph(create_using=None)
networkx.generators.frucht_graph(create_using=None)
networkx.generators.heawood_graph(create_using=None)
networkx.generators.hoffman_singleton_graph()
networkx.generators.house_graph(create_using=None)
networkx.generators.house_x_graph(create_using=None)
networkx.generators.icosahedral_graph(create_using=None)
networkx.generators.krackhardt_kite_graph(create_using=None)
networkx.generators.moebius_kantor_graph(create_using=None)
networkx.generators.octahedral_graph(create_using=None)
networkx.generators.pappus_graph()
networkx.generators.petersen_graph(create_using=None)
networkx.generators.sedgewick_maze_graph(create_using=None)
networkx.generators.small.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.generators.small._raise_on_directed(func)
networkx.generators.small.bull_graph(create_using=None)
networkx.generators.small.chvatal_graph(create_using=None)
networkx.generators.small.cubical_graph(create_using=None)
networkx.generators.small.desargues_graph(create_using=None)
networkx.generators.small.diamond_graph(create_using=None)
networkx.generators.small.dodecahedral_graph(create_using=None)
networkx.generators.small.frucht_graph(create_using=None)
networkx.generators.small.heawood_graph(create_using=None)
networkx.generators.small.hoffman_singleton_graph()
networkx.generators.small.house_graph(create_using=None)
networkx.generators.small.house_x_graph(create_using=None)
networkx.generators.small.icosahedral_graph(create_using=None)
networkx.generators.small.krackhardt_kite_graph(create_using=None)
networkx.generators.small.moebius_kantor_graph(create_using=None)
networkx.generators.small.octahedral_graph(create_using=None)
networkx.generators.small.pappus_graph()
networkx.generators.small.petersen_graph(create_using=None)
networkx.generators.small.sedgewick_maze_graph(create_using=None)
networkx.generators.small.tetrahedral_graph(create_using=None)
networkx.generators.small.truncated_cube_graph(create_using=None)
networkx.generators.small.truncated_tetrahedron_graph(create_using=None)
networkx.generators.small.tutte_graph(create_using=None)
networkx.generators.tetrahedral_graph(create_using=None)
networkx.generators.truncated_cube_graph(create_using=None)
networkx.generators.truncated_tetrahedron_graph(create_using=None)
networkx.generators.tutte_graph(create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/degree_seq.py----------------------------------------
A:networkx.generators.degree_seq.n->len(w)
A:networkx.generators.degree_seq.G->networkx.empty_graph(0, create_using)
A:networkx.generators.degree_seq.pairs->zip_longest(deg_sequence, in_deg_sequence, fillvalue=0)
A:networkx.generators.degree_seq.(out_deg, in_deg)->zip(*pairs)
A:networkx.generators.degree_seq.out_stublist->_to_stublist(out_deg)
A:networkx.generators.degree_seq.in_stublist->_to_stublist(in_deg)
A:networkx.generators.degree_seq.stublist->_to_stublist(deg_sequence)
A:networkx.generators.degree_seq.order->sorted(enumerate(w), key=itemgetter(1), reverse=True)
A:networkx.generators.degree_seq.p->len(deg_sequence)
A:networkx.generators.degree_seq.r->seed.random()
A:networkx.generators.degree_seq.q->min(seq[v] * factor, 1)
A:networkx.generators.degree_seq.source->num_degs[dmax].pop()
A:networkx.generators.degree_seq.target->num_degs[k].pop()
A:networkx.generators.degree_seq.in_deg_sequence->networkx.utils.make_list_of_ints(in_deg_sequence)
A:networkx.generators.degree_seq.out_deg_sequence->networkx.utils.make_list_of_ints(out_deg_sequence)
A:networkx.generators.degree_seq.maxn->max(nin, nout)
A:networkx.generators.degree_seq.(freeout, freein, target)->heapq.heappop(stubheap)
A:networkx.generators.degree_seq.(stubout, stubsource)->heapq.heappop(zeroheap)
A:networkx.generators.degree_seq.(stubout, stubin, stubsource)->heapq.heappop(stubheap)
A:networkx.generators.degree_seq.degree_sum->sum(deg_sequence)
A:networkx.generators.degree_seq.deg->sorted((s for s in deg_sequence if s > 1), reverse=True)
A:networkx.generators.degree_seq.DSRG->DegreeSequenceRandomGraph(sequence, seed)
A:networkx.generators.degree_seq.self.degree->list(degree)
A:networkx.generators.degree_seq.self.dmax->max(self.degree)
A:networkx.generators.degree_seq.self.remaining_degree->dict(enumerate(self.degree))
A:networkx.generators.degree_seq.self.graph->networkx.Graph()
A:networkx.generators.degree_seq.nodes->iter(self.remaining_degree)
A:networkx.generators.degree_seq.u->next(nodes)
A:networkx.generators.degree_seq.(u, v)->sorted(rng.choice(list(H.edges())))
A:networkx.generators.degree_seq.potential_edges->combinations(self.remaining_degree, 2)
A:networkx.generators.degree_seq.H->networkx.Graph([(u, v) for (u, v) in potential_edges if not self.graph.has_edge(u, v)])
networkx.generators.DegreeSequenceRandomGraph(self,degree,rng)
networkx.generators.DegreeSequenceRandomGraph.generate(self)
networkx.generators.DegreeSequenceRandomGraph.p(self,u,v)
networkx.generators.DegreeSequenceRandomGraph.phase1(self)
networkx.generators.DegreeSequenceRandomGraph.phase2(self)
networkx.generators.DegreeSequenceRandomGraph.phase3(self)
networkx.generators.DegreeSequenceRandomGraph.q(self,u,v)
networkx.generators.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.generators.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.generators._configuration_model(deg_sequence,create_using,directed=False,in_deg_sequence=None,seed=None)
networkx.generators._to_stublist(degree_sequence)
networkx.generators.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.DegreeSequenceRandomGraph(self,degree,rng)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__(self,degree,rng)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.p(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.q(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.generators.degree_seq._configuration_model(deg_sequence,create_using,directed=False,in_deg_sequence=None,seed=None)
networkx.generators.degree_seq._to_stublist(degree_sequence)
networkx.generators.degree_seq.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.degree_sequence_tree(deg_sequence,create_using=None)
networkx.generators.degree_seq.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.directed_havel_hakimi_graph(in_deg_sequence,out_deg_sequence,create_using=None)
networkx.generators.degree_seq.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.degree_seq.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.generators.degree_seq.random_degree_sequence_graph(sequence,seed=None,tries=10)
networkx.generators.degree_sequence_tree(deg_sequence,create_using=None)
networkx.generators.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.generators.directed_havel_hakimi_graph(in_deg_sequence,out_deg_sequence,create_using=None)
networkx.generators.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.generators.random_degree_sequence_graph(sequence,seed=None,tries=10)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/line.py----------------------------------------
A:networkx.generators.line.L->networkx.empty_graph(0, create_using, default=G.__class__)
A:networkx.generators.line.edges->set()
A:networkx.generators.line.v->arbitrary_element(G)
A:networkx.generators.line.H->networkx.Graph()
A:networkx.generators.line.starting_cell->tuple(triangle_nodes)
A:networkx.generators.line.P->_find_partition(G, starting_cell)
A:networkx.generators.line.W->tuple(((u,) for u in P_count if P_count[u] == 1))
A:networkx.generators.line.T_neighbors->defaultdict(int)
A:networkx.generators.line.G_partition->G.copy()
A:networkx.generators.line.partitioned_vertices->list(starting_cell)
A:networkx.generators.line.deg_u->len(G_partition[u])
A:networkx.generators.line.e->arbitrary_element(G.edges())
A:networkx.generators.line.e_triangles->_triangles(G, e)
A:networkx.generators.line.r->len(e_triangles)
A:networkx.generators.line.triangle_nodes->set()
networkx.generators._find_partition(G,starting_cell)
networkx.generators._lg_directed(G,create_using=None)
networkx.generators._lg_undirected(G,selfloops=False,create_using=None)
networkx.generators._odd_triangle(G,T)
networkx.generators._select_starting_cell(G,starting_edge=None)
networkx.generators._triangles(G,e)
networkx.generators.inverse_line_graph(G)
networkx.generators.line._find_partition(G,starting_cell)
networkx.generators.line._lg_directed(G,create_using=None)
networkx.generators.line._lg_undirected(G,selfloops=False,create_using=None)
networkx.generators.line._odd_triangle(G,T)
networkx.generators.line._select_starting_cell(G,starting_edge=None)
networkx.generators.line._triangles(G,e)
networkx.generators.line.inverse_line_graph(G)
networkx.generators.line.line_graph(G,create_using=None)
networkx.generators.line_graph(G,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/duplication.py----------------------------------------
A:networkx.generators.duplication.G->networkx.Graph()
A:networkx.generators.duplication.src_node->seed.randint(0, new_node - 1)
A:networkx.generators.duplication.random_node->seed.choice(list(G))
networkx.generators.duplication.duplication_divergence_graph(n,p,seed=None)
networkx.generators.duplication.partial_duplication_graph(N,n,p,q,seed=None)
networkx.generators.duplication_divergence_graph(n,p,seed=None)
networkx.generators.partial_duplication_graph(N,n,p,q,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/random_graphs.py----------------------------------------
A:networkx.generators.random_graphs.G->degree_sequence_tree(seq)
A:networkx.generators.random_graphs.lp->math.log(1.0 - p)
A:networkx.generators.random_graphs.lr->math.log(1.0 - seed.random())
A:networkx.generators.random_graphs.edges->_try_creation()
A:networkx.generators.random_graphs.nlist->list(G.nodes())
A:networkx.generators.random_graphs.u->seed.choice(nlist1)
A:networkx.generators.random_graphs.v->seed.choice(nlist2)
A:networkx.generators.random_graphs.e->list(G.edges())
A:networkx.generators.random_graphs.w->seed.choice(nodes)
A:networkx.generators.random_graphs.nodes->list(range(n))
A:networkx.generators.random_graphs.potential_edges->defaultdict(lambda : 0)
A:networkx.generators.random_graphs.stubiter->iter(stubs)
A:networkx.generators.random_graphs.targets->_random_subset(attachment_preference, m, seed)
A:networkx.generators.random_graphs.x->rng.choice(seq)
A:networkx.generators.random_graphs.source->len(G)
A:networkx.generators.random_graphs.a_probability->seed.random()
A:networkx.generators.random_graphs.src_node->seed.choice(neighbor_nodes)
A:networkx.generators.random_graphs.prohibited_nodes->list(G[src_node])
A:networkx.generators.random_graphs.dest_node->seed.choice([nd for nd in attachment_preference if nd not in neighbor_nodes])
A:networkx.generators.random_graphs.node->seed.choice(elligible_nodes)
A:networkx.generators.random_graphs.neighbor_nodes->list(G[node])
A:networkx.generators.random_graphs.repeated_nodes->list(G.nodes())
A:networkx.generators.random_graphs.possible_targets->_random_subset(repeated_nodes, m, seed)
A:networkx.generators.random_graphs.target->_random_subset(repeated_nodes, m, seed).pop()
A:networkx.generators.random_graphs.nbr->seed.choice(neighborhood)
A:networkx.generators.random_graphs.llen->int(2 * seed.random() * n + 0.5)
A:networkx.generators.random_graphs.L->path_graph(llen)
A:networkx.generators.random_graphs.inter_edges->int(m * d)
A:networkx.generators.random_graphs.g->networkx.convert_node_labels_to_integers(gnm_random_graph(n, inter_edges, seed=seed), first_label=nnodes)
A:networkx.generators.random_graphs.nlist1->list(glist[gi])
A:networkx.generators.random_graphs.nlist2->list(glist[gi + 1])
A:networkx.generators.random_graphs.seq->random_powerlaw_tree_sequence(n, gamma=gamma, seed=seed, tries=tries)
A:networkx.generators.random_graphs.z->networkx.utils.powerlaw_sequence(tries, exponent=gamma, seed=seed)
A:networkx.generators.random_graphs.index->seed.randint(0, n - 1)
A:networkx.generators.random_graphs.zseq[index]->swap.pop()
A:networkx.generators.random_graphs.graph->networkx.Graph()
A:networkx.generators.random_graphs.j->math.ceil(n * kernel_root(i / n, j / n, r))
networkx.generators._random_subset(seq,m,rng)
networkx.generators.barabasi_albert_graph(n,m,seed=None,initial_graph=None)
networkx.generators.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.generators.dense_gnm_random_graph(n,m,seed=None)
networkx.generators.dual_barabasi_albert_graph(n,m1,m2,p,seed=None,initial_graph=None)
networkx.generators.extended_barabasi_albert_graph(n,m,p,q,seed=None)
networkx.generators.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.gnm_random_graph(n,m,seed=None,directed=False)
networkx.generators.gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.generators.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.generators.random_graphs._random_subset(seq,m,rng)
networkx.generators.random_graphs.barabasi_albert_graph(n,m,seed=None,initial_graph=None)
networkx.generators.random_graphs.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.generators.random_graphs.dense_gnm_random_graph(n,m,seed=None)
networkx.generators.random_graphs.dual_barabasi_albert_graph(n,m1,m2,p,seed=None,initial_graph=None)
networkx.generators.random_graphs.extended_barabasi_albert_graph(n,m,p,q,seed=None)
networkx.generators.random_graphs.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.gnm_random_graph(n,m,seed=None,directed=False)
networkx.generators.random_graphs.gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.generators.random_graphs.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.generators.random_graphs.random_kernel_graph(n,kernel_integral,kernel_root=None,seed=None)
networkx.generators.random_graphs.random_lobster(n,p1,p2,seed=None)
networkx.generators.random_graphs.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_regular_graph(d,n,seed=None)
networkx.generators.random_graphs.random_shell_graph(constructor,seed=None)
networkx.generators.random_graphs.watts_strogatz_graph(n,k,p,seed=None)
networkx.generators.random_kernel_graph(n,kernel_integral,kernel_root=None,seed=None)
networkx.generators.random_lobster(n,p1,p2,seed=None)
networkx.generators.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.generators.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.generators.random_regular_graph(d,n,seed=None)
networkx.generators.random_shell_graph(constructor,seed=None)
networkx.generators.watts_strogatz_graph(n,k,p,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/stochastic.py----------------------------------------
A:networkx.generators.stochastic.degree->dict(G.out_degree(weight=weight))
networkx.generators.stochastic.stochastic_graph(G,copy=True,weight='weight')
networkx.generators.stochastic_graph(G,copy=True,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/classic.py----------------------------------------
A:networkx.generators.classic.nodes->iter(range(n))
A:networkx.generators.classic.source->parents.pop(0)
A:networkx.generators.classic.target->next(nodes)
A:networkx.generators.classic.G->Graph()
A:networkx.generators.classic.edges->itertools.combinations(nodes, 2)
A:networkx.generators.classic.last_generation_edges->list(G.edges())
A:networkx.generators.classic.number_of_edges_in_last_generation->len(last_generation_edges)
A:networkx.generators.classic.M->len(m_nodes)
A:networkx.generators.classic.n_nodes->list(range(M, M + n))
A:networkx.generators.classic.N->len(n_nodes)
A:networkx.generators.classic.extents->pairwise(itertools.accumulate((0,) + subset_sizes))
networkx.generators._tree_edges(n,r)
networkx.generators.balanced_tree(r,h,create_using=None)
networkx.generators.barbell_graph(m1,m2,create_using=None)
networkx.generators.binomial_tree(n,create_using=None)
networkx.generators.circulant_graph(n,offsets,create_using=None)
networkx.generators.circular_ladder_graph(n,create_using=None)
networkx.generators.classic._tree_edges(n,r)
networkx.generators.classic.balanced_tree(r,h,create_using=None)
networkx.generators.classic.barbell_graph(m1,m2,create_using=None)
networkx.generators.classic.binomial_tree(n,create_using=None)
networkx.generators.classic.circulant_graph(n,offsets,create_using=None)
networkx.generators.classic.circular_ladder_graph(n,create_using=None)
networkx.generators.classic.complete_graph(n,create_using=None)
networkx.generators.classic.complete_multipartite_graph(*subset_sizes)
networkx.generators.classic.cycle_graph(n,create_using=None)
networkx.generators.classic.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.generators.classic.empty_graph(n=0,create_using=None,default=Graph)
networkx.generators.classic.full_rary_tree(r,n,create_using=None)
networkx.generators.classic.ladder_graph(n,create_using=None)
networkx.generators.classic.lollipop_graph(m,n,create_using=None)
networkx.generators.classic.null_graph(create_using=None)
networkx.generators.classic.path_graph(n,create_using=None)
networkx.generators.classic.star_graph(n,create_using=None)
networkx.generators.classic.trivial_graph(create_using=None)
networkx.generators.classic.turan_graph(n,r)
networkx.generators.classic.wheel_graph(n,create_using=None)
networkx.generators.complete_graph(n,create_using=None)
networkx.generators.complete_multipartite_graph(*subset_sizes)
networkx.generators.cycle_graph(n,create_using=None)
networkx.generators.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.generators.empty_graph(n=0,create_using=None,default=Graph)
networkx.generators.full_rary_tree(r,n,create_using=None)
networkx.generators.ladder_graph(n,create_using=None)
networkx.generators.lollipop_graph(m,n,create_using=None)
networkx.generators.null_graph(create_using=None)
networkx.generators.path_graph(n,create_using=None)
networkx.generators.star_graph(n,create_using=None)
networkx.generators.trivial_graph(create_using=None)
networkx.generators.turan_graph(n,r)
networkx.generators.wheel_graph(n,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/harary_graph.py----------------------------------------
A:networkx.generators.harary_graph.H->networkx.empty_graph(n, create_using)
networkx.generators.harary_graph.hkn_harary_graph(k,n,create_using=None)
networkx.generators.harary_graph.hnm_harary_graph(n,m,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/interval_graph.py----------------------------------------
A:networkx.generators.interval_graph.intervals->list(intervals)
A:networkx.generators.interval_graph.graph->networkx.Graph()
A:networkx.generators.interval_graph.(min1, max1)interval1->tupled_intervals.pop()
networkx.generators.interval_graph(intervals)
networkx.generators.interval_graph.interval_graph(intervals)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/internet_as_graphs.py----------------------------------------
A:networkx.generators.internet_as_graphs.X1->round(seed.random() * (floor(b) - a) + a)
A:networkx.generators.internet_as_graphs.s->sum(degs.values())
A:networkx.generators.internet_as_graphs.nodes->list(degs.keys())
A:networkx.generators.internet_as_graphs.self.n_t->min(n, round(self.seed.random() * 2 + 4))
A:networkx.generators.internet_as_graphs.self.n_m->round(0.15 * n)
A:networkx.generators.internet_as_graphs.self.n_cp->round(0.05 * n)
A:networkx.generators.internet_as_graphs.self.n_c->max(0, n - self.n_t - self.n_m - self.n_cp)
A:networkx.generators.internet_as_graphs.self.G->networkx.Graph()
A:networkx.generators.internet_as_graphs.self.customers[i]->set()
A:networkx.generators.internet_as_graphs.self.providers[i]->set()
A:networkx.generators.internet_as_graphs.customer->str(i)
A:networkx.generators.internet_as_graphs.degs->dict(self.G.degree(node_list))
A:networkx.generators.internet_as_graphs.node_options->node_options.difference(self.providers[cp]).difference(self.providers[cp])
A:networkx.generators.internet_as_graphs.edge_num->uniform_int_from_avg(1, avg_deg, self.seed)
A:networkx.generators.internet_as_graphs.t_options->node_options.difference(self.providers[cp]).difference(self.providers[cp]).intersection(self.nodes['T'])
A:networkx.generators.internet_as_graphs.m_options->node_options.difference(self.providers[cp]).difference(self.providers[cp]).intersection(self.nodes['M'])
A:networkx.generators.internet_as_graphs.j->self.choose_peer_pref_attach(node_options)
A:networkx.generators.internet_as_graphs.self.regions['REG' + str(i)]->set()
A:networkx.generators.internet_as_graphs.num->uniform_int_from_avg(0, m, self.seed)
A:networkx.generators.internet_as_graphs.self.nodes['T']->set(list(self.G.nodes()))
A:networkx.generators.internet_as_graphs.i->len(self.nodes['T'])
A:networkx.generators.internet_as_graphs.GG->AS_graph_generator(n, seed)
A:networkx.generators.internet_as_graphs.G->AS_graph_generator(n, seed).generate()
networkx.generators.AS_graph_generator(self,n,seed)
networkx.generators.AS_graph_generator.add_cp_peering_link(self,cp,to_kind)
networkx.generators.AS_graph_generator.add_customer(self,i,j)
networkx.generators.AS_graph_generator.add_edge(self,i,j,kind)
networkx.generators.AS_graph_generator.add_m_peering_link(self,m,to_kind)
networkx.generators.AS_graph_generator.add_node(self,i,kind,reg2prob,avg_deg,t_edge_prob)
networkx.generators.AS_graph_generator.add_peering_links(self,from_kind,to_kind)
networkx.generators.AS_graph_generator.choose_node_pref_attach(self,node_list)
networkx.generators.AS_graph_generator.choose_peer_pref_attach(self,node_list)
networkx.generators.AS_graph_generator.generate(self)
networkx.generators.AS_graph_generator.graph_regions(self,rn)
networkx.generators.AS_graph_generator.t_graph(self)
networkx.generators.choose_pref_attach(degs,seed)
networkx.generators.internet_as_graphs.AS_graph_generator(self,n,seed)
networkx.generators.internet_as_graphs.AS_graph_generator.__init__(self,n,seed)
networkx.generators.internet_as_graphs.AS_graph_generator.add_cp_peering_link(self,cp,to_kind)
networkx.generators.internet_as_graphs.AS_graph_generator.add_customer(self,i,j)
networkx.generators.internet_as_graphs.AS_graph_generator.add_edge(self,i,j,kind)
networkx.generators.internet_as_graphs.AS_graph_generator.add_m_peering_link(self,m,to_kind)
networkx.generators.internet_as_graphs.AS_graph_generator.add_node(self,i,kind,reg2prob,avg_deg,t_edge_prob)
networkx.generators.internet_as_graphs.AS_graph_generator.add_peering_links(self,from_kind,to_kind)
networkx.generators.internet_as_graphs.AS_graph_generator.choose_node_pref_attach(self,node_list)
networkx.generators.internet_as_graphs.AS_graph_generator.choose_peer_pref_attach(self,node_list)
networkx.generators.internet_as_graphs.AS_graph_generator.generate(self)
networkx.generators.internet_as_graphs.AS_graph_generator.graph_regions(self,rn)
networkx.generators.internet_as_graphs.AS_graph_generator.t_graph(self)
networkx.generators.internet_as_graphs.choose_pref_attach(degs,seed)
networkx.generators.internet_as_graphs.random_internet_as_graph(n,seed=None)
networkx.generators.internet_as_graphs.uniform_int_from_avg(a,m,seed)
networkx.generators.random_internet_as_graph(n,seed=None)
networkx.generators.uniform_int_from_avg(a,m,seed)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/cographs.py----------------------------------------
A:networkx.generators.cographs.R->networkx.disjoint_union(R, RR)
A:networkx.generators.cographs.RR->networkx.relabel_nodes(R.copy(), lambda x: x + len(R))
networkx.generators.cographs.random_cograph(n,seed=None)
networkx.generators.random_cograph(n,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/atlas.py----------------------------------------
A:networkx.generators.atlas.THIS_DIR->os.path.dirname(os.path.abspath(__file__))
A:networkx.generators.atlas.ATLAS_FILE->os.path.join(THIS_DIR, 'atlas.dat.gz')
A:networkx.generators.atlas.line->f.readline()
A:networkx.generators.atlas.graph_index->int(line[6:].rstrip())
A:networkx.generators.atlas.num_nodes->int(line[6:].rstrip())
A:networkx.generators.atlas.G->networkx.Graph()
networkx.generators._generate_graphs()
networkx.generators.atlas._generate_graphs()
networkx.generators.atlas.graph_atlas(i)
networkx.generators.atlas.graph_atlas_g()
networkx.generators.graph_atlas(i)
networkx.generators.graph_atlas_g()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/expanders.py----------------------------------------
A:networkx.generators.expanders.G->networkx.empty_graph(0, create_using, default=nx.DiGraph)
networkx.generators.chordal_cycle_graph(p,create_using=None)
networkx.generators.expanders.chordal_cycle_graph(p,create_using=None)
networkx.generators.expanders.margulis_gabber_galil_graph(n,create_using=None)
networkx.generators.expanders.paley_graph(p,create_using=None)
networkx.generators.margulis_gabber_galil_graph(n,create_using=None)
networkx.generators.paley_graph(p,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/social.py----------------------------------------
A:networkx.generators.social.all_members->set(range(34))
A:networkx.generators.social.G->networkx.Graph()
networkx.generators.davis_southern_women_graph()
networkx.generators.florentine_families_graph()
networkx.generators.karate_club_graph()
networkx.generators.les_miserables_graph()
networkx.generators.social.davis_southern_women_graph()
networkx.generators.social.florentine_families_graph()
networkx.generators.social.karate_club_graph()
networkx.generators.social.les_miserables_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/directed.py----------------------------------------
A:networkx.generators.directed.G->networkx.empty_graph(n, create_using=nx.MultiDiGraph)
A:networkx.generators.directed.target->seed.randrange(0, source)
A:networkx.generators.directed.vs->sum((count * [idx] for (idx, count) in G.out_degree()), [])
A:networkx.generators.directed.ws->sum((count * [idx] for (idx, count) in G.in_degree()), [])
A:networkx.generators.directed.node_list->list(G.nodes())
A:networkx.generators.directed.r->seed.random()
A:networkx.generators.directed.w->_choose_node(ws, node_list, delta_in)
A:networkx.generators.directed.v->weighted_choice(weights - adjustment, seed=seed)
A:networkx.generators.directed.create_using->networkx.DiGraph()
A:networkx.generators.directed.nodes->set(G)
A:networkx.generators.directed.weights->Counter({v: alpha for v in G})
A:networkx.generators.directed.u->seed.choice([v for (v, d) in G.out_degree() if d < k])
A:networkx.generators.directed.adjustment->Counter()
networkx.generators.directed.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.generators.directed.gnc_graph(n,create_using=None,seed=None)
networkx.generators.directed.gnr_graph(n,p,create_using=None,seed=None)
networkx.generators.directed.random_k_out_graph(n,k,alpha,self_loops=True,seed=None)
networkx.generators.directed.random_uniform_k_out_graph(n,k,self_loops=True,with_replacement=True,seed=None)
networkx.generators.directed.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None,initial_graph=None)
networkx.generators.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.generators.gnc_graph(n,create_using=None,seed=None)
networkx.generators.gnr_graph(n,p,create_using=None,seed=None)
networkx.generators.random_k_out_graph(n,k,alpha,self_loops=True,seed=None)
networkx.generators.random_uniform_k_out_graph(n,k,self_loops=True,with_replacement=True,seed=None)
networkx.generators.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None,initial_graph=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/spectral_graph_forge.py----------------------------------------
A:networkx.generators.spectral_graph_forge.alpha->numpy.clip(alpha, 0, 1)
A:networkx.generators.spectral_graph_forge.A->networkx.to_numpy_array(G)
A:networkx.generators.spectral_graph_forge.level->round(n * alpha)
A:networkx.generators.spectral_graph_forge.(evals, evecs)->numpy.linalg.eigh(B)
A:networkx.generators.spectral_graph_forge.B->numpy.clip(B, 0, 1)
A:networkx.generators.spectral_graph_forge.B[i, i + 1:]->scipy.stats.bernoulli.rvs(B[i, i + 1:], random_state=seed)
A:networkx.generators.spectral_graph_forge.B[i + 1:, i]->numpy.transpose(B[i, i + 1:])
A:networkx.generators.spectral_graph_forge.H->networkx.from_numpy_array(B)
networkx.generators.spectral_graph_forge(G,alpha,transformation='identity',seed=None)
networkx.generators.spectral_graph_forge.spectral_graph_forge(G,alpha,transformation='identity',seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/ego.py----------------------------------------
A:networkx.generators.ego.(sp, _)->networkx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)
A:networkx.generators.ego.sp->dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))
A:networkx.generators.ego.H->G.subgraph(sp).copy()
networkx.generators.ego.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)
networkx.generators.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/joint_degree_seq.py----------------------------------------
A:networkx.generators.joint_degree_seq.w_prime->unsat.pop()
A:networkx.generators.joint_degree_seq.iter_var->iter(unsat)
A:networkx.generators.joint_degree_seq.N->sum(degree_count.values())
A:networkx.generators.joint_degree_seq.G->networkx.DiGraph()
A:networkx.generators.joint_degree_seq.h_degree_nodelist[degree]->range(nodeid, nodeid + num_nodes)
A:networkx.generators.joint_degree_seq.w_neighbs->list(G.predecessors(w))
A:networkx.generators.joint_degree_seq.w_prime_neighbs->list(G.predecessors(w_prime))
A:networkx.generators.joint_degree_seq.idx->int(idx)
A:networkx.generators.joint_degree_seq.nk_in[p]->len(h_degree_nodelist_in[p])
A:networkx.generators.joint_degree_seq.nk_out[p]->len(h_degree_nodelist_out[p])
A:networkx.generators.joint_degree_seq.chords->set()
A:networkx.generators.joint_degree_seq.chords_sample->seed.sample(range(k_len * l_len), n_edges_add + non_chords.get((k, l), 0))
A:networkx.generators.joint_degree_seq.(v, w)->set().pop()
A:networkx.generators.joint_degree_seq._v->_directed_neighbor_switch(G, v, k_unsat, h_node_residual_out, chords, h_partition_in, l)
A:networkx.generators.joint_degree_seq._w->_directed_neighbor_switch_rev(G, w, l_unsat, h_node_residual_in, chords, h_partition_out, k)
networkx.generators._directed_neighbor_switch(G,w,unsat,h_node_residual_out,chords,h_partition_in,partition)
networkx.generators._directed_neighbor_switch_rev(G,w,unsat,h_node_residual_in,chords,h_partition_out,partition)
networkx.generators._neighbor_switch(G,w,unsat,h_node_residual,avoid_node_id=None)
networkx.generators.directed_joint_degree_graph(in_degrees,out_degrees,nkk,seed=None)
networkx.generators.is_valid_directed_joint_degree(in_degrees,out_degrees,nkk)
networkx.generators.is_valid_joint_degree(joint_degrees)
networkx.generators.joint_degree_graph(joint_degrees,seed=None)
networkx.generators.joint_degree_seq._directed_neighbor_switch(G,w,unsat,h_node_residual_out,chords,h_partition_in,partition)
networkx.generators.joint_degree_seq._directed_neighbor_switch_rev(G,w,unsat,h_node_residual_in,chords,h_partition_out,partition)
networkx.generators.joint_degree_seq._neighbor_switch(G,w,unsat,h_node_residual,avoid_node_id=None)
networkx.generators.joint_degree_seq.directed_joint_degree_graph(in_degrees,out_degrees,nkk,seed=None)
networkx.generators.joint_degree_seq.is_valid_directed_joint_degree(in_degrees,out_degrees,nkk)
networkx.generators.joint_degree_seq.is_valid_joint_degree(joint_degrees)
networkx.generators.joint_degree_seq.joint_degree_graph(joint_degrees,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/mycielski.py----------------------------------------
A:networkx.generators.mycielski.M->networkx.convert_node_labels_to_integers(G)
A:networkx.generators.mycielski.n->networkx.convert_node_labels_to_integers(G).number_of_nodes()
A:networkx.generators.mycielski.old_edges->list(M.edges())
networkx.generators.mycielski.mycielski_graph(n)
networkx.generators.mycielski.mycielskian(G,iterations=1)
networkx.generators.mycielski_graph(n)
networkx.generators.mycielskian(G,iterations=1)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/trees.py----------------------------------------
A:networkx.generators.trees.children->defaultdict(list)
A:networkx.generators.trees.tree->networkx.empty_graph(0, create_using)
A:networkx.generators.trees.(child, remaining_paths)->next(remaining_children)
A:networkx.generators.trees.utree->networkx.from_prufer_sequence(sequence)
A:networkx.generators.trees.edges->networkx.dfs_edges(utree, source=0)
networkx.generators.prefix_tree(paths)
networkx.generators.prefix_tree_recursive(paths)
networkx.generators.random_tree(n,seed=None,create_using=None)
networkx.generators.trees.prefix_tree(paths)
networkx.generators.trees.prefix_tree_recursive(paths)
networkx.generators.trees.random_tree(n,seed=None,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/community.py----------------------------------------
A:networkx.generators.community.G->networkx.Graph()
A:networkx.generators.community.edges->itertools.product(parts[i], parts[j])
A:networkx.generators.community.nodes->list(G)
A:networkx.generators.community.x->seed.choice(nodes)
A:networkx.generators.community.num_blocks->len(sizes)
A:networkx.generators.community.size->int(seed.gauss(s, s / v + 0.5))
A:networkx.generators.community.nodelist->range(0, sum(sizes))
A:networkx.generators.community.block_range->range(len(sizes))
A:networkx.generators.community.g->networkx.Graph()
A:networkx.generators.community.block_iter->itertools.combinations_with_replacement(block_range, 2)
A:networkx.generators.community.logrand->math.log(seed.random())
A:networkx.generators.community.skip->math.floor(logrand / math.log(1 - p[i][j]))
A:networkx.generators.community.e->next(edges)
A:networkx.generators.community.result->networkx.utils.zipf_rv(gamma, xmin, seed)
A:networkx.generators.community.n->len(degree_seq)
A:networkx.generators.community.free->list(range(n))
A:networkx.generators.community.v->seed.choice(range(n))
A:networkx.generators.community.c->seed.choice(range(len(community_sizes)))
A:networkx.generators.community.s->round(degree_seq[v] * (1 - mu))
A:networkx.generators.community.min_degree->_generate_min_degree(tau1, average_degree, max_degree, tol, max_iters)
A:networkx.generators.community.deg_seq->_powerlaw_sequence(tau1, low, high, condition, length, max_iters, seed)
A:networkx.generators.community.min_community->min(deg_seq)
A:networkx.generators.community.max_community->max(deg_seq)
A:networkx.generators.community.comms->_powerlaw_sequence(tau2, low, high, condition, length, max_iters, seed)
A:networkx.generators.community.communities->_generate_communities(deg_seq, comms, mu, max_iters, seed)
networkx.generators.LFR_benchmark_graph(n,tau1,tau2,mu,average_degree=None,min_degree=None,max_degree=None,min_community=None,max_community=None,tol=1e-07,max_iters=500,seed=None)
networkx.generators._generate_communities(degree_seq,community_sizes,mu,max_iters,seed)
networkx.generators._generate_min_degree(gamma,average_degree,max_degree,tolerance,max_iters)
networkx.generators._hurwitz_zeta(x,q,tolerance)
networkx.generators._powerlaw_sequence(gamma,low,high,condition,length,max_iters,seed)
networkx.generators._zipf_rv_below(gamma,xmin,threshold,seed)
networkx.generators.caveman_graph(l,k)
networkx.generators.community.LFR_benchmark_graph(n,tau1,tau2,mu,average_degree=None,min_degree=None,max_degree=None,min_community=None,max_community=None,tol=1e-07,max_iters=500,seed=None)
networkx.generators.community._generate_communities(degree_seq,community_sizes,mu,max_iters,seed)
networkx.generators.community._generate_min_degree(gamma,average_degree,max_degree,tolerance,max_iters)
networkx.generators.community._hurwitz_zeta(x,q,tolerance)
networkx.generators.community._powerlaw_sequence(gamma,low,high,condition,length,max_iters,seed)
networkx.generators.community._zipf_rv_below(gamma,xmin,threshold,seed)
networkx.generators.community.caveman_graph(l,k)
networkx.generators.community.connected_caveman_graph(l,k)
networkx.generators.community.gaussian_random_partition_graph(n,s,v,p_in,p_out,directed=False,seed=None)
networkx.generators.community.planted_partition_graph(l,k,p_in,p_out,seed=None,directed=False)
networkx.generators.community.random_partition_graph(sizes,p_in,p_out,seed=None,directed=False)
networkx.generators.community.relaxed_caveman_graph(l,k,p,seed=None)
networkx.generators.community.ring_of_cliques(num_cliques,clique_size)
networkx.generators.community.stochastic_block_model(sizes,p,nodelist=None,seed=None,directed=False,selfloops=False,sparse=True)
networkx.generators.community.windmill_graph(n,k)
networkx.generators.connected_caveman_graph(l,k)
networkx.generators.gaussian_random_partition_graph(n,s,v,p_in,p_out,directed=False,seed=None)
networkx.generators.planted_partition_graph(l,k,p_in,p_out,seed=None,directed=False)
networkx.generators.random_partition_graph(sizes,p_in,p_out,seed=None,directed=False)
networkx.generators.relaxed_caveman_graph(l,k,p,seed=None)
networkx.generators.ring_of_cliques(num_cliques,clique_size)
networkx.generators.stochastic_block_model(sizes,p,nodelist=None,seed=None,directed=False,selfloops=False,sparse=True)
networkx.generators.windmill_graph(n,k)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/intersection.py----------------------------------------
A:networkx.generators.intersection.G->networkx.empty_graph(n + m)
A:networkx.generators.intersection.mset->range(n, n + m)
A:networkx.generators.intersection.targets->seed.sample(mset, k)
networkx.generators.general_random_intersection_graph(n,m,p,seed=None)
networkx.generators.intersection.general_random_intersection_graph(n,m,p,seed=None)
networkx.generators.intersection.k_random_intersection_graph(n,m,k,seed=None)
networkx.generators.intersection.uniform_random_intersection_graph(n,m,p,seed=None)
networkx.generators.k_random_intersection_graph(n,m,k,seed=None)
networkx.generators.uniform_random_intersection_graph(n,m,p,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_random_clustered.py----------------------------------------
A:networkx.generators.tests.test_random_clustered.joint_degree_sequence->zip(node, tri)
A:networkx.generators.tests.test_random_clustered.G->networkx.random_clustered_graph([(1, 2), (2, 1), (1, 1), (1, 1), (1, 1), (2, 0)])
networkx.generators.tests.test_TestRandomClusteredGraph
networkx.generators.tests.test_TestRandomClusteredGraph.test_invalid1(self)
networkx.generators.tests.test_TestRandomClusteredGraph.test_invalid2(self)
networkx.generators.tests.test_TestRandomClusteredGraph.test_valid(self)
networkx.generators.tests.test_TestRandomClusteredGraph.test_valid2(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_stochastic.py----------------------------------------
A:networkx.generators.tests.test_stochastic.G->networkx.DiGraph()
A:networkx.generators.tests.test_stochastic.S->networkx.stochastic_graph(G)
A:networkx.generators.tests.test_stochastic.d->dict(weight=0.25)
networkx.generators.tests.test_TestStochasticGraph
networkx.generators.tests.test_TestStochasticGraph.test_arbitrary_weights(self)
networkx.generators.tests.test_TestStochasticGraph.test_default_weights(self)
networkx.generators.tests.test_TestStochasticGraph.test_graph_disallowed(self)
networkx.generators.tests.test_TestStochasticGraph.test_in_place(self)
networkx.generators.tests.test_TestStochasticGraph.test_multidigraph(self)
networkx.generators.tests.test_TestStochasticGraph.test_multigraph_disallowed(self)
networkx.generators.tests.test_TestStochasticGraph.test_zero_weights(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_arbitrary_weights(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_default_weights(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_graph_disallowed(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_in_place(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multidigraph(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_multigraph_disallowed(self)
networkx.generators.tests.test_stochastic.TestStochasticGraph.test_zero_weights(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_classic.py----------------------------------------
A:networkx.generators.tests.test_classic.t->networkx.full_rary_tree(3, 20)
A:networkx.generators.tests.test_classic.order->networkx.full_rary_tree(3, 20).order()
A:networkx.generators.tests.test_classic.dh->networkx.degree_histogram(t)
A:networkx.generators.tests.test_classic.T->networkx.balanced_tree(1, 4)
A:networkx.generators.tests.test_classic.P->networkx.path_graph(5)
A:networkx.generators.tests.test_classic.th->networkx.balanced_tree(2, 3)
A:networkx.generators.tests.test_classic.b->networkx.binomial_tree(n, create_using)
A:networkx.generators.tests.test_classic.mb->networkx.barbell_graph(m1, m2, create_using=nx.MultiGraph())
A:networkx.generators.tests.test_classic.g->networkx.wheel_graph(10)
A:networkx.generators.tests.test_classic.mg->networkx.wheel_graph(10, create_using=nx.MultiGraph())
A:networkx.generators.tests.test_classic.G->networkx.complete_multipartite_graph(2, 3, 4)
A:networkx.generators.tests.test_classic.mG->networkx.cycle_graph(4, create_using=nx.MultiGraph)
A:networkx.generators.tests.test_classic.Ci6_1->networkx.circulant_graph(6, [1])
A:networkx.generators.tests.test_classic.C6->networkx.cycle_graph(6)
A:networkx.generators.tests.test_classic.Ci7->networkx.circulant_graph(7, [1, 2, 3])
A:networkx.generators.tests.test_classic.K7->networkx.complete_graph(7)
A:networkx.generators.tests.test_classic.Ci6_1_3->networkx.circulant_graph(6, [1, 3])
A:networkx.generators.tests.test_classic.K3_3->networkx.complete_bipartite_graph(3, 3)
A:networkx.generators.tests.test_classic.H->networkx.complete_bipartite_graph(2, 3)
A:networkx.generators.tests.test_classic.pete->networkx.petersen_graph()
A:networkx.generators.tests.test_classic.MG->networkx.lollipop_graph(5, 20, create_using=nx.MultiGraph)
A:networkx.generators.tests.test_classic.np->pytest.importorskip('numpy')
A:networkx.generators.tests.test_classic.p->networkx.path_graph(10)
A:networkx.generators.tests.test_classic.dp->networkx.path_graph(3, create_using=nx.DiGraph)
A:networkx.generators.tests.test_classic.mp->networkx.path_graph(10, create_using=nx.MultiGraph)
A:networkx.generators.tests.test_classic.s->networkx.star_graph(10)
A:networkx.generators.tests.test_classic.ms->networkx.star_graph(10, create_using=nx.MultiGraph)
networkx.generators.tests.test_TestGeneratorClassic
networkx.generators.tests.test_TestGeneratorClassic.test_balanced_tree(self)
networkx.generators.tests.test_TestGeneratorClassic.test_balanced_tree_path(self)
networkx.generators.tests.test_TestGeneratorClassic.test_balanced_tree_star(self)
networkx.generators.tests.test_TestGeneratorClassic.test_barbell_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_binomial_tree(self)
networkx.generators.tests.test_TestGeneratorClassic.test_circulant_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_0_partite_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_1_partite_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_2_partite_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_digraph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_complete_multipartite_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_create_using(self)
networkx.generators.tests.test_TestGeneratorClassic.test_cycle_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_empty_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_full_rary_tree(self)
networkx.generators.tests.test_TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.generators.tests.test_TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.generators.tests.test_TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.generators.tests.test_TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.generators.tests.test_TestGeneratorClassic.test_ladder_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_exceptions(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_for_multigraph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_mixing_input_types(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_not_int_integer_inputs(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_right_sizes(self)
networkx.generators.tests.test_TestGeneratorClassic.test_lollipop_graph_same_as_path_when_m1_is_2(self)
networkx.generators.tests.test_TestGeneratorClassic.test_non_int_integers_for_star_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_non_int_integers_for_wheel_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_null_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_path_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_star_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_trivial_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_turan_graph(self)
networkx.generators.tests.test_TestGeneratorClassic.test_wheel_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_path(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_binomial_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_circulant_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_0_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_1_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_2_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_multipartite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_create_using(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_exceptions(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_for_multigraph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_mixing_input_types(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_not_int_integer_inputs(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_right_sizes(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph_same_as_path_when_m1_is_2(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_non_int_integers_for_star_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_non_int_integers_for_wheel_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_turan_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_ego.py----------------------------------------
A:networkx.generators.tests.test_ego.G->networkx.Graph()
A:networkx.generators.tests.test_ego.H->networkx.ego_graph(G, 0, center=False)
A:networkx.generators.tests.test_ego.eg->networkx.ego_graph(G, 0, radius=3, distance='distance')
networkx.generators.tests.test_TestGeneratorEgo
networkx.generators.tests.test_TestGeneratorEgo.test_ego(self)
networkx.generators.tests.test_TestGeneratorEgo.test_ego_distance(self)
networkx.generators.tests.test_ego.TestGeneratorEgo
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego(self)
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_spectral_graph_forge.py----------------------------------------
A:networkx.generators.tests.test_spectral_graph_forge.G->karate_club_graph()
A:networkx.generators.tests.test_spectral_graph_forge.H->spectral_graph_forge(G, 10, transformation='identity', seed=seed)
A:networkx.generators.tests.test_spectral_graph_forge.I->spectral_graph_forge(G, 0.1, transformation='modularity', seed=seed)
networkx.generators.tests.test_spectral_graph_forge.test_spectral_graph_forge()
networkx.generators.tests.test_test_spectral_graph_forge()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_geometric.py----------------------------------------
A:networkx.generators.tests.test_geometric.G->networkx.path_graph(3)
A:networkx.generators.tests.test_geometric.nodes->list(string.ascii_lowercase)
A:networkx.generators.tests.test_geometric.RGG->networkx.random_geometric_graph(50, 0.25, pos=pos)
A:networkx.generators.tests.test_geometric.SRGG->networkx.soft_random_geometric_graph(50, 0.25, pos=pos)
A:networkx.generators.tests.test_geometric.gg->networkx.grid_graph([5]).to_directed()
networkx.generators.tests.test_TestGeographicalThresholdGraph
networkx.generators.tests.test_TestGeographicalThresholdGraph.test_distances(self)
networkx.generators.tests.test_TestGeographicalThresholdGraph.test_metric(self)
networkx.generators.tests.test_TestGeographicalThresholdGraph.test_number_of_nodes(self)
networkx.generators.tests.test_TestGeographicalThresholdGraph.test_p_dist_zero(self)
networkx.generators.tests.test_TestNavigableSmallWorldGraph
networkx.generators.tests.test_TestNavigableSmallWorldGraph.test_navigable_small_world(self)
networkx.generators.tests.test_TestRandomGeometricGraph
networkx.generators.tests.test_TestRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_TestRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_TestRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_TestRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_p_dist_default(self)
networkx.generators.tests.test_TestSoftRandomGeometricGraph.test_p_dist_zero(self)
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_TestThresholdedRandomGeometricGraph.test_theta(self)
networkx.generators.tests.test_TestWaxmanGraph
networkx.generators.tests.test_TestWaxmanGraph.test_metric(self)
networkx.generators.tests.test_TestWaxmanGraph.test_number_of_nodes_1(self)
networkx.generators.tests.test_TestWaxmanGraph.test_number_of_nodes_2(self)
networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph
networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_distances(self)
networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_metric(self)
networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_number_of_nodes(self)
networkx.generators.tests.test_geometric.TestGeographicalThresholdGraph.test_p_dist_zero(self)
networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph
networkx.generators.tests.test_geometric.TestNavigableSmallWorldGraph.test_navigable_small_world(self)
networkx.generators.tests.test_geometric.TestRandomGeometricGraph
networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_geometric.TestRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_default(self)
networkx.generators.tests.test_geometric.TestSoftRandomGeometricGraph.test_p_dist_zero(self)
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_distances(self)
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_node_names(self)
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_number_of_nodes(self)
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_p(self)
networkx.generators.tests.test_geometric.TestThresholdedRandomGeometricGraph.test_theta(self)
networkx.generators.tests.test_geometric.TestWaxmanGraph
networkx.generators.tests.test_geometric.TestWaxmanGraph.test_metric(self)
networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_1(self)
networkx.generators.tests.test_geometric.TestWaxmanGraph.test_number_of_nodes_2(self)
networkx.generators.tests.test_geometric.join(G,u,v,theta,alpha,metric)
networkx.generators.tests.test_geometric.l1dist(x,y)
networkx.generators.tests.test_geometric.test_geometric_edges_raises_no_pos()
networkx.generators.tests.test_join(G,u,v,theta,alpha,metric)
networkx.generators.tests.test_l1dist(x,y)
networkx.generators.tests.test_test_geometric_edges_raises_no_pos()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_harary_graph.py----------------------------------------
A:networkx.generators.tests.test_harary_graph.G1->hkn_harary_graph(k, n)
A:networkx.generators.tests.test_harary_graph.G2->networkx.circulant_graph(n, list(range(1, (k + 1) // 2)))
A:networkx.generators.tests.test_harary_graph.L->list(range(1, (k + 1) // 2))
A:networkx.generators.tests.test_harary_graph.eSet1->set(G1.edges)
A:networkx.generators.tests.test_harary_graph.eSet2->set(G2.edges)
A:networkx.generators.tests.test_harary_graph.eSet3->set()
networkx.generators.tests.test_harary_graph.TestHararyGraph
networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hkn_harary_graph(self)
networkx.generators.tests.test_harary_graph.TestHararyGraph.test_hnm_harary_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_line.py----------------------------------------
A:networkx.generators.tests.test_line.G->networkx.path_graph([1, 2, 3, 'a', 'b', 'c'])
A:networkx.generators.tests.test_line.L->networkx.line_graph(G, create_using=nx.DiGraph())
A:networkx.generators.tests.test_line.H->networkx.line_graph(G)
A:networkx.generators.tests.test_line.solution->networkx.path_graph(2)
A:networkx.generators.tests.test_line.alternative_solution->networkx.Graph()
A:networkx.generators.tests.test_line.K5me->networkx.complete_graph(5)
A:networkx.generators.tests.test_line.J->networkx.inverse_line_graph(H)
networkx.generators.tests.test_TestGeneratorInverseLine
networkx.generators.tests.test_TestGeneratorInverseLine.test_K1(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_claw(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_cycle(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_empty(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_example(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_example_2(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_different_node_types(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_complete(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_cycle(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_dgm(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_hypercube(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_multipartite(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_path(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_line_inverse_line_star(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_non_line_graph(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_pair(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_triangle_graph(self)
networkx.generators.tests.test_TestGeneratorInverseLine.test_wrong_graph_type(self)
networkx.generators.tests.test_TestGeneratorLine
networkx.generators.tests.test_TestGeneratorLine.test_create1(self)
networkx.generators.tests.test_TestGeneratorLine.test_create2(self)
networkx.generators.tests.test_TestGeneratorLine.test_cycle(self)
networkx.generators.tests.test_TestGeneratorLine.test_digraph1(self)
networkx.generators.tests.test_TestGeneratorLine.test_digraph2(self)
networkx.generators.tests.test_TestGeneratorLine.test_multidigraph1(self)
networkx.generators.tests.test_TestGeneratorLine.test_multidigraph2(self)
networkx.generators.tests.test_TestGeneratorLine.test_multigraph1(self)
networkx.generators.tests.test_TestGeneratorLine.test_multigraph2(self)
networkx.generators.tests.test_TestGeneratorLine.test_path(self)
networkx.generators.tests.test_TestGeneratorLine.test_star(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_K1(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_claw(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_cycle(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_empty(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_example_2(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_different_node_types(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_complete(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_cycle(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_dgm(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_hypercube(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_multipartite(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_path(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_line_inverse_line_star(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_non_line_graph(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_pair(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_triangle_graph(self)
networkx.generators.tests.test_line.TestGeneratorInverseLine.test_wrong_graph_type(self)
networkx.generators.tests.test_line.TestGeneratorLine
networkx.generators.tests.test_line.TestGeneratorLine.test_create1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_create2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_cycle(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_digraph1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_digraph2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_multidigraph1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_multidigraph2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_multigraph1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_multigraph2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_path(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_star(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_sudoku.py----------------------------------------
A:networkx.generators.tests.test_sudoku.G->networkx.sudoku_graph(n)
networkx.generators.tests.test_sudoku.test_sudoku_generator(n)
networkx.generators.tests.test_sudoku.test_sudoku_negative()
networkx.generators.tests.test_test_sudoku_generator(n)
networkx.generators.tests.test_test_sudoku_negative()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_internet_as_graphs.py----------------------------------------
A:networkx.generators.tests.test_internet_as_graphs.cls.G->random_internet_as_graph(cls.n, cls.seed)
A:networkx.generators.tests.test_internet_as_graphs.cls.customers[i]->cls.customers[i].union(cls.customers[j])
A:networkx.generators.tests.test_internet_as_graphs.customer->int(e['customer'])
A:networkx.generators.tests.test_internet_as_graphs.cls.providers[i]->cls.providers[i].union(cls.providers[j])
A:networkx.generators.tests.test_internet_as_graphs.G->random_internet_as_graph(1)
A:networkx.generators.tests.test_internet_as_graphs.cust->int(e['customer'])
networkx.generators.tests.test_TestInternetASTopology
networkx.generators.tests.test_TestInternetASTopology.set_customers(cls,i)
networkx.generators.tests.test_TestInternetASTopology.set_providers(cls,i)
networkx.generators.tests.test_TestInternetASTopology.setup_class(cls)
networkx.generators.tests.test_TestInternetASTopology.test_connectivity(self)
networkx.generators.tests.test_TestInternetASTopology.test_degree_values(self)
networkx.generators.tests.test_TestInternetASTopology.test_node_numbers(self)
networkx.generators.tests.test_TestInternetASTopology.test_relationships(self)
networkx.generators.tests.test_TestInternetASTopology.test_wrong_input(self)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_customers(cls,i)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.set_providers(cls,i)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.setup_class(cls)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_connectivity(self)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_degree_values(self)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_node_numbers(self)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_relationships(self)
networkx.generators.tests.test_internet_as_graphs.TestInternetASTopology.test_wrong_input(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_trees.py----------------------------------------
A:networkx.generators.tests.test_trees.T->networkx.random_tree(10, seed=1234, create_using=G)
A:networkx.generators.tests.test_trees.(a, i, t)->sorted(T[root], key=source_label)
A:networkx.generators.tests.test_trees.nil->arbitrary_element(T[ten])
A:networkx.generators.tests.test_trees.(nil, in_)->sorted(T[i], key=source_label)
A:networkx.generators.tests.test_trees.(nil, inn)->sorted(T[in_], key=source_label)
A:networkx.generators.tests.test_trees.(te, to)->sorted(T[t], key=source_label)
A:networkx.generators.tests.test_trees.(tea, ted, ten)->sorted(T[te], key=source_label)
A:networkx.generators.tests.test_trees.G->networkx.Graph()
networkx.generators.tests.test_test_basic_prefix_tree(prefix_tree_fn)
networkx.generators.tests.test_test_implementations_consistent(strings)
networkx.generators.tests.test_test_random_tree()
networkx.generators.tests.test_test_random_tree_n_zero()
networkx.generators.tests.test_test_random_tree_using_generator()
networkx.generators.tests.test_trees.test_basic_prefix_tree(prefix_tree_fn)
networkx.generators.tests.test_trees.test_implementations_consistent(strings)
networkx.generators.tests.test_trees.test_random_tree()
networkx.generators.tests.test_trees.test_random_tree_n_zero()
networkx.generators.tests.test_trees.test_random_tree_using_generator()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_nonisomorphic_trees.py----------------------------------------
A:networkx.generators.tests.test_nonisomorphic_trees.trees->f(8)
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees_matrix(self)
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees.test_nonisomorphism(self)
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_TestGeneratorNonIsomorphicTrees.test_tree_structure(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees_matrix(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_duplication.py----------------------------------------
A:networkx.generators.tests.test_duplication.G->partial_duplication_graph(N, n, p, q)
networkx.generators.tests.test_TestDuplicationDivergenceGraph
networkx.generators.tests.test_TestDuplicationDivergenceGraph.test_final_size(self)
networkx.generators.tests.test_TestDuplicationDivergenceGraph.test_probability_too_large(self)
networkx.generators.tests.test_TestDuplicationDivergenceGraph.test_probability_too_small(self)
networkx.generators.tests.test_TestPartialDuplicationGraph
networkx.generators.tests.test_TestPartialDuplicationGraph.test_final_size(self)
networkx.generators.tests.test_TestPartialDuplicationGraph.test_initial_clique_size(self)
networkx.generators.tests.test_TestPartialDuplicationGraph.test_invalid_initial_size(self)
networkx.generators.tests.test_TestPartialDuplicationGraph.test_invalid_probabilities(self)
networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph
networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_final_size(self)
networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_large(self)
networkx.generators.tests.test_duplication.TestDuplicationDivergenceGraph.test_probability_too_small(self)
networkx.generators.tests.test_duplication.TestPartialDuplicationGraph
networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_final_size(self)
networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_initial_clique_size(self)
networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_initial_size(self)
networkx.generators.tests.test_duplication.TestPartialDuplicationGraph.test_invalid_probabilities(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_random_graphs.py----------------------------------------
A:networkx.generators.tests.test_random_graphs.G->networkx.gnm_random_graph(10, -1.1)
A:networkx.generators.tests.test_random_graphs.edges->sum((generator(10, 0.99999, directed=True).number_of_edges() for _ in range(runs)))
A:networkx.generators.tests.test_random_graphs.seq->networkx.random_powerlaw_tree_sequence(10, 3, seed=14, tries=1)
A:networkx.generators.tests.test_random_graphs.initial_graph->networkx.complete_graph(10)
A:networkx.generators.tests.test_random_graphs.BA1->networkx.barabasi_albert_graph(100, m1, seed, initial_graph)
A:networkx.generators.tests.test_random_graphs.DBA1->networkx.dual_barabasi_albert_graph(100, m1, m2, 1, seed)
A:networkx.generators.tests.test_random_graphs.BA2->networkx.barabasi_albert_graph(100, m2, seed, initial_graph)
A:networkx.generators.tests.test_random_graphs.DBA2->networkx.dual_barabasi_albert_graph(100, m1, m2, 0, seed)
A:networkx.generators.tests.test_random_graphs.BA3->networkx.barabasi_albert_graph(100, m1, seed)
A:networkx.generators.tests.test_random_graphs.DBA3->networkx.dual_barabasi_albert_graph(100, m1, m1, p, seed)
A:networkx.generators.tests.test_random_graphs.DBA->networkx.dual_barabasi_albert_graph(100, m1, m2, p, seed, initial_graph)
A:networkx.generators.tests.test_random_graphs.initial->networkx.complete_graph(max(m1, m2) - 1)
A:networkx.generators.tests.test_random_graphs.BA_model->networkx.barabasi_albert_graph(100, m, seed)
A:networkx.generators.tests.test_random_graphs.BA_model_edges->networkx.barabasi_albert_graph(100, m, seed).number_of_edges()
A:networkx.generators.tests.test_random_graphs.G1->networkx.extended_barabasi_albert_graph(100, m, 0.8, 0, seed)
A:networkx.generators.tests.test_random_graphs.G2->networkx.extended_barabasi_albert_graph(100, m, 0, 0.8, seed)
A:networkx.generators.tests.test_random_graphs.G3->networkx.extended_barabasi_albert_graph(100, m, 0.3, 0.3, seed)
A:networkx.generators.tests.test_random_graphs.graph->networkx.random_kernel_graph(1000, integral, root, seed=42)
networkx.generators.tests.test_TestGeneratorsRandom
networkx.generators.tests.test_TestGeneratorsRandom.test_dual_barabasi_albert(self,m1=1,m2=4,p=0.5)
networkx.generators.tests.test_TestGeneratorsRandom.test_extended_barabasi_albert(self,m=2)
networkx.generators.tests.test_TestGeneratorsRandom.test_gnm(self)
networkx.generators.tests.test_TestGeneratorsRandom.test_random_graph(self)
networkx.generators.tests.test_TestGeneratorsRandom.test_random_kernel_graph(self)
networkx.generators.tests.test_TestGeneratorsRandom.test_random_zero_regular_graph(self)
networkx.generators.tests.test_TestGeneratorsRandom.test_watts_strogatz_big_k(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_dual_barabasi_albert(self,m1=1,m2=4,p=0.5)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_extended_barabasi_albert(self,m=2)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_kernel_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_zero_regular_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_watts_strogatz_big_k(self)
networkx.generators.tests.test_random_graphs.test_gnp_generators_basic(generator,directed)
networkx.generators.tests.test_random_graphs.test_gnp_generators_edge_probability(generator,p,directed)
networkx.generators.tests.test_random_graphs.test_gnp_generators_for_p_close_to_1(generator)
networkx.generators.tests.test_random_graphs.test_gnp_generators_greater_than_1_edge_probability(generator,directed,expected_num_edges)
networkx.generators.tests.test_random_graphs.test_gnp_generators_negative_edge_probability(generator,directed)
networkx.generators.tests.test_random_graphs.test_gnp_random_graph_aliases(generator,seed,directed,expected_num_edges)
networkx.generators.tests.test_test_gnp_generators_basic(generator,directed)
networkx.generators.tests.test_test_gnp_generators_edge_probability(generator,p,directed)
networkx.generators.tests.test_test_gnp_generators_for_p_close_to_1(generator)
networkx.generators.tests.test_test_gnp_generators_greater_than_1_edge_probability(generator,directed,expected_num_edges)
networkx.generators.tests.test_test_gnp_generators_negative_edge_probability(generator,directed)
networkx.generators.tests.test_test_gnp_random_graph_aliases(generator,seed,directed,expected_num_edges)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_interval_graph.py----------------------------------------
A:networkx.generators.tests.test_interval_graph.expected_graph->networkx.Graph()
A:networkx.generators.tests.test_interval_graph.actual_g->interval_graph(intervals)
A:networkx.generators.tests.test_interval_graph.actual_nbrs->networkx.neighbors(actual_g, (0, 2))
networkx.generators.tests.test_TestIntervalGraph
networkx.generators.tests.test_TestIntervalGraph.test_empty(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_0(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_1(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_2(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_3(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_4(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_5(self)
networkx.generators.tests.test_TestIntervalGraph.test_interval_graph_check_invalid(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_empty(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_0(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_1(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_2(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_3(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_4(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_5(self)
networkx.generators.tests.test_interval_graph.TestIntervalGraph.test_interval_graph_check_invalid(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_cographs.py----------------------------------------
A:networkx.generators.tests.test_cographs.G->networkx.random_cograph(n)
A:networkx.generators.tests.test_cographs.components->networkx.connected_components(G)
networkx.generators.tests.test_cographs.test_random_cograph()
networkx.generators.tests.test_test_random_cograph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_expanders.py----------------------------------------
A:networkx.generators.tests.test_expanders.g->networkx.margulis_gabber_galil_graph(n)
A:networkx.generators.tests.test_expanders.np->pytest.importorskip('numpy')
A:networkx.generators.tests.test_expanders.sp->pytest.importorskip('scipy')
A:networkx.generators.tests.test_expanders.w->sorted(sp.linalg.eigvalsh(nx.adjacency_matrix(g).toarray()))
A:networkx.generators.tests.test_expanders.G->networkx.paley_graph(p)
networkx.generators.tests.test_expanders.test_chordal_cycle_graph(p)
networkx.generators.tests.test_expanders.test_chordal_cycle_graph_badinput(graph_type)
networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_badinput(graph_type)
networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_eigvals(n)
networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_properties(n)
networkx.generators.tests.test_expanders.test_paley_graph(p)
networkx.generators.tests.test_expanders.test_paley_graph_badinput()
networkx.generators.tests.test_test_chordal_cycle_graph(p)
networkx.generators.tests.test_test_chordal_cycle_graph_badinput(graph_type)
networkx.generators.tests.test_test_margulis_gabber_galil_graph_badinput(graph_type)
networkx.generators.tests.test_test_margulis_gabber_galil_graph_eigvals(n)
networkx.generators.tests.test_test_margulis_gabber_galil_graph_properties(n)
networkx.generators.tests.test_test_paley_graph(p)
networkx.generators.tests.test_test_paley_graph_badinput()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_small.py----------------------------------------
A:networkx.generators.tests.test_small.null->networkx.null_graph()
A:networkx.generators.tests.test_small.G->networkx.tutte_graph()
A:networkx.generators.tests.test_small.utility_graph->networkx.complete_bipartite_graph(3, 3)
A:networkx.generators.tests.test_small.MG->networkx.tutte_graph(create_using=nx.MultiGraph)
networkx.generators.tests.test_TestGeneratorsSmall
networkx.generators.tests.test_TestGeneratorsSmall.test__LCF_graph(self)
networkx.generators.tests.test_TestGeneratorsSmall.test_properties_named_small_graphs(self)
networkx.generators.tests.test_small.TestGeneratorsSmall
networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph(self)
networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs(self)
networkx.generators.tests.test_small.tests_raises_with_directed_create_using(fn,create_using)
networkx.generators.tests.test_tests_raises_with_directed_create_using(fn,create_using)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_degree_seq.py----------------------------------------
A:networkx.generators.tests.test_degree_seq.G->networkx.random_degree_sequence_graph(d, seed=42)
A:networkx.generators.tests.test_degree_seq.G1->networkx.fast_gnp_random_graph(100, 0.1, seed=42)
A:networkx.generators.tests.test_degree_seq.G2->networkx.random_degree_sequence_graph(d1, seed=42)
A:networkx.generators.tests.test_degree_seq.din1->list((d for (n, d) in G1.in_degree()))
A:networkx.generators.tests.test_degree_seq.dout1->list((d for (n, d) in G1.out_degree()))
A:networkx.generators.tests.test_degree_seq.din2->list((d for (n, d) in G2.in_degree()))
A:networkx.generators.tests.test_degree_seq.dout2->list((d for (n, d) in G2.out_degree()))
networkx.generators.tests.test_TestConfigurationModel
networkx.generators.tests.test_TestConfigurationModel.test_degree_sequence(self)
networkx.generators.tests.test_TestConfigurationModel.test_degree_zero(self)
networkx.generators.tests.test_TestConfigurationModel.test_directed_disallowed(self)
networkx.generators.tests.test_TestConfigurationModel.test_empty_degree_sequence(self)
networkx.generators.tests.test_TestConfigurationModel.test_odd_degree_sum(self)
networkx.generators.tests.test_TestConfigurationModel.test_random_seed(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_sequence(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_degree_zero(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_directed_disallowed(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_empty_degree_sequence(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_odd_degree_sum(self)
networkx.generators.tests.test_degree_seq.TestConfigurationModel.test_random_seed(self)
networkx.generators.tests.test_degree_seq.test_degree_sequence_tree()
networkx.generators.tests.test_degree_seq.test_directed_configuation_model()
networkx.generators.tests.test_degree_seq.test_directed_configuation_raise_unequal()
networkx.generators.tests.test_degree_seq.test_directed_havel_hakimi()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_empty()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_selfloops()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_skew()
networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_large()
networkx.generators.tests.test_degree_seq.test_simple_directed_configuation_model()
networkx.generators.tests.test_test_degree_sequence_tree()
networkx.generators.tests.test_test_directed_configuation_model()
networkx.generators.tests.test_test_directed_configuation_raise_unequal()
networkx.generators.tests.test_test_directed_havel_hakimi()
networkx.generators.tests.test_test_expected_degree_graph()
networkx.generators.tests.test_test_expected_degree_graph_empty()
networkx.generators.tests.test_test_expected_degree_graph_selfloops()
networkx.generators.tests.test_test_expected_degree_graph_skew()
networkx.generators.tests.test_test_havel_hakimi_construction()
networkx.generators.tests.test_test_random_degree_sequence_graph()
networkx.generators.tests.test_test_random_degree_sequence_graph_raise()
networkx.generators.tests.test_test_random_degree_sequence_large()
networkx.generators.tests.test_test_simple_directed_configuation_model()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_triads.py----------------------------------------
A:networkx.generators.tests.test_triads.G->triad_graph('030T')
networkx.generators.tests.test_test_invalid_name()
networkx.generators.tests.test_test_triad_graph()
networkx.generators.tests.test_triads.test_invalid_name()
networkx.generators.tests.test_triads.test_triad_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_joint_degree_seq.py----------------------------------------
A:networkx.generators.tests.test_joint_degree_seq.seed->int(time.time())
A:networkx.generators.tests.test_joint_degree_seq.g->gnm_random_graph(n, m, None, directed=True)
A:networkx.generators.tests.test_joint_degree_seq.joint_degrees_g->degree_mixing_dict(g, normalized=False)
A:networkx.generators.tests.test_joint_degree_seq.G->directed_joint_degree_graph(in_degrees, out_degrees, nkk)
A:networkx.generators.tests.test_joint_degree_seq.joint_degrees_G->degree_mixing_dict(G, normalized=False)
A:networkx.generators.tests.test_joint_degree_seq.in_degrees->list(dict(g.in_degree()).values())
A:networkx.generators.tests.test_joint_degree_seq.out_degrees->list(dict(g.out_degree()).values())
A:networkx.generators.tests.test_joint_degree_seq.nkk->degree_mixing_dict(g)
networkx.generators.tests.test_joint_degree_seq.test_directed_joint_degree_graph(n=15,m=100,ntimes=1000)
networkx.generators.tests.test_joint_degree_seq.test_is_valid_directed_joint_degree()
networkx.generators.tests.test_joint_degree_seq.test_is_valid_joint_degree()
networkx.generators.tests.test_joint_degree_seq.test_joint_degree_graph(ntimes=10)
networkx.generators.tests.test_test_directed_joint_degree_graph(n=15,m=100,ntimes=1000)
networkx.generators.tests.test_test_is_valid_directed_joint_degree()
networkx.generators.tests.test_test_is_valid_joint_degree()
networkx.generators.tests.test_test_joint_degree_graph(ntimes=10)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_lattice.py----------------------------------------
A:networkx.generators.tests.test_lattice.G->networkx.hexagonal_lattice_graph(5, 8, periodic=True)
A:networkx.generators.tests.test_lattice.H->networkx.hexagonal_lattice_graph(3, 5, create_using=nx.MultiGraph())
A:networkx.generators.tests.test_lattice.g->networkx.grid_graph(dim)
A:networkx.generators.tests.test_lattice.C_6->networkx.cycle_graph(6)
A:networkx.generators.tests.test_lattice.pos->networkx.get_node_attributes(H, 'pos')
networkx.generators.tests.test_TestGrid2DGraph
networkx.generators.tests.test_TestGrid2DGraph.test_degree_distribution(self)
networkx.generators.tests.test_TestGrid2DGraph.test_directed(self)
networkx.generators.tests.test_TestGrid2DGraph.test_exceptions(self)
networkx.generators.tests.test_TestGrid2DGraph.test_multigraph(self)
networkx.generators.tests.test_TestGrid2DGraph.test_node_input(self)
networkx.generators.tests.test_TestGrid2DGraph.test_number_of_vertices(self)
networkx.generators.tests.test_TestGrid2DGraph.test_periodic(self)
networkx.generators.tests.test_TestGrid2DGraph.test_periodic_directed(self)
networkx.generators.tests.test_TestGrid2DGraph.test_periodic_iterable(self)
networkx.generators.tests.test_TestGrid2DGraph.test_periodic_multigraph(self)
networkx.generators.tests.test_TestGridGraph
networkx.generators.tests.test_TestGridGraph.test_grid_graph(self)
networkx.generators.tests.test_TestGridGraph.test_node_input(self)
networkx.generators.tests.test_TestGridGraph.test_periodic_iterable(self)
networkx.generators.tests.test_TestHexagonalLatticeGraph
networkx.generators.tests.test_TestHexagonalLatticeGraph.test_directed(self)
networkx.generators.tests.test_TestHexagonalLatticeGraph.test_lattice_points(self)
networkx.generators.tests.test_TestHexagonalLatticeGraph.test_multigraph(self)
networkx.generators.tests.test_TestHexagonalLatticeGraph.test_periodic(self)
networkx.generators.tests.test_TestHypercubeGraph
networkx.generators.tests.test_TestHypercubeGraph.test_degree_distribution(self)
networkx.generators.tests.test_TestHypercubeGraph.test_special_cases(self)
networkx.generators.tests.test_TestTriangularLatticeGraph
networkx.generators.tests.test_TestTriangularLatticeGraph.test_directed(self)
networkx.generators.tests.test_TestTriangularLatticeGraph.test_lattice_points(self)
networkx.generators.tests.test_TestTriangularLatticeGraph.test_multigraph(self)
networkx.generators.tests.test_TestTriangularLatticeGraph.test_periodic(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_degree_distribution(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_directed(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_exceptions(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_multigraph(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_node_input(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_number_of_vertices(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_directed(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_iterable(self)
networkx.generators.tests.test_lattice.TestGrid2DGraph.test_periodic_multigraph(self)
networkx.generators.tests.test_lattice.TestGridGraph
networkx.generators.tests.test_lattice.TestGridGraph.test_grid_graph(self)
networkx.generators.tests.test_lattice.TestGridGraph.test_node_input(self)
networkx.generators.tests.test_lattice.TestGridGraph.test_periodic_iterable(self)
networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph
networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_directed(self)
networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_lattice_points(self)
networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_multigraph(self)
networkx.generators.tests.test_lattice.TestHexagonalLatticeGraph.test_periodic(self)
networkx.generators.tests.test_lattice.TestHypercubeGraph
networkx.generators.tests.test_lattice.TestHypercubeGraph.test_degree_distribution(self)
networkx.generators.tests.test_lattice.TestHypercubeGraph.test_special_cases(self)
networkx.generators.tests.test_lattice.TestTriangularLatticeGraph
networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_directed(self)
networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_lattice_points(self)
networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_multigraph(self)
networkx.generators.tests.test_lattice.TestTriangularLatticeGraph.test_periodic(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_atlas.py----------------------------------------
A:networkx.generators.tests.test_atlas.G->graph_atlas(6)
A:networkx.generators.tests.test_atlas.cls.GAG->graph_atlas_g()
A:networkx.generators.tests.test_atlas.d1->sorted((d for (v, d) in G1.degree()))
A:networkx.generators.tests.test_atlas.d2->sorted((d for (v, d) in G2.degree()))
networkx.generators.tests.test_TestAtlasGraph
networkx.generators.tests.test_TestAtlasGraph.test_graph(self)
networkx.generators.tests.test_TestAtlasGraph.test_index_too_large(self)
networkx.generators.tests.test_TestAtlasGraph.test_index_too_small(self)
networkx.generators.tests.test_TestAtlasGraphG
networkx.generators.tests.test_TestAtlasGraphG.setup_class(cls)
networkx.generators.tests.test_TestAtlasGraphG.test_names(self)
networkx.generators.tests.test_TestAtlasGraphG.test_nondecreasing_degree_sequence(self)
networkx.generators.tests.test_TestAtlasGraphG.test_nondecreasing_edges(self)
networkx.generators.tests.test_TestAtlasGraphG.test_nondecreasing_nodes(self)
networkx.generators.tests.test_TestAtlasGraphG.test_sizes(self)
networkx.generators.tests.test_atlas.TestAtlasGraph
networkx.generators.tests.test_atlas.TestAtlasGraph.test_graph(self)
networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_large(self)
networkx.generators.tests.test_atlas.TestAtlasGraph.test_index_too_small(self)
networkx.generators.tests.test_atlas.TestAtlasGraphG
networkx.generators.tests.test_atlas.TestAtlasGraphG.setup_class(cls)
networkx.generators.tests.test_atlas.TestAtlasGraphG.test_names(self)
networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_degree_sequence(self)
networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_edges(self)
networkx.generators.tests.test_atlas.TestAtlasGraphG.test_nondecreasing_nodes(self)
networkx.generators.tests.test_atlas.TestAtlasGraphG.test_sizes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_directed.py----------------------------------------
A:networkx.generators.tests.test_directed.G->random_uniform_k_out_graph(n, k, with_replacement=False)
A:networkx.generators.tests.test_directed.MG->gnc_graph(100, create_using=MultiDiGraph(), seed=1)
networkx.generators.tests.test_TestGeneratorsDirected
networkx.generators.tests.test_TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.generators.tests.test_TestGeneratorsDirected.test_smoke_test_random_graphs(self)
networkx.generators.tests.test_TestRandomKOutGraph
networkx.generators.tests.test_TestRandomKOutGraph.test_no_self_loops(self)
networkx.generators.tests.test_TestRandomKOutGraph.test_regularity(self)
networkx.generators.tests.test_TestUniformRandomKOutGraph
networkx.generators.tests.test_TestUniformRandomKOutGraph.test_no_self_loops(self)
networkx.generators.tests.test_TestUniformRandomKOutGraph.test_regularity(self)
networkx.generators.tests.test_TestUniformRandomKOutGraph.test_with_replacement(self)
networkx.generators.tests.test_TestUniformRandomKOutGraph.test_without_replacement(self)
networkx.generators.tests.test_directed.TestGeneratorsDirected
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs(self)
networkx.generators.tests.test_directed.TestRandomKOutGraph
networkx.generators.tests.test_directed.TestRandomKOutGraph.test_no_self_loops(self)
networkx.generators.tests.test_directed.TestRandomKOutGraph.test_regularity(self)
networkx.generators.tests.test_directed.TestUniformRandomKOutGraph
networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_no_self_loops(self)
networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_regularity(self)
networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_with_replacement(self)
networkx.generators.tests.test_directed.TestUniformRandomKOutGraph.test_without_replacement(self)
networkx.generators.tests.test_directed.test_scale_free_graph_initial_graph_kwarg(ig)
networkx.generators.tests.test_test_scale_free_graph_initial_graph_kwarg(ig)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_intersection.py----------------------------------------
A:networkx.generators.tests.test_intersection.G->networkx.general_random_intersection_graph(10, 5, [0.1, 0.2, 0.2, 0.1, 0.1])
networkx.generators.tests.test_TestIntersectionGraph
networkx.generators.tests.test_TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.generators.tests.test_TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.generators.tests.test_TestIntersectionGraph.test_k_random_intersection_graph_seeded(self)
networkx.generators.tests.test_TestIntersectionGraph.test_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph_seeded(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_community.py----------------------------------------
A:networkx.generators.tests.test_community.G->networkx.LFR_benchmark_graph(n, tau1, tau2, mu, average_degree=5, max_degree=100, min_community=50, max_community=200, seed=10)
A:networkx.generators.tests.test_community.K5->networkx.complete_graph(5)
A:networkx.generators.tests.test_community.E5->networkx.empty_graph(5)
A:networkx.generators.tests.test_community.GG->networkx.stochastic_block_model(sizes, probs, seed=0, sparse=False)
A:networkx.generators.tests.test_community.badnodelist->list(range(400))
networkx.generators.tests.test_community.test_both_degrees_none()
networkx.generators.tests.test_community.test_caveman_graph()
networkx.generators.tests.test_community.test_connected_caveman_graph()
networkx.generators.tests.test_community.test_gaussian_random_partition_graph()
networkx.generators.tests.test_community.test_generate_min_degree_itr()
networkx.generators.tests.test_community.test_generator()
networkx.generators.tests.test_community.test_invalid_tau1()
networkx.generators.tests.test_community.test_invalid_tau2()
networkx.generators.tests.test_community.test_max_community()
networkx.generators.tests.test_community.test_max_deg_out_of_range()
networkx.generators.tests.test_community.test_max_iters_exeded()
networkx.generators.tests.test_community.test_mu_too_large()
networkx.generators.tests.test_community.test_mu_too_small()
networkx.generators.tests.test_community.test_neither_degrees_none()
networkx.generators.tests.test_community.test_no_scipy_zeta()
networkx.generators.tests.test_community.test_planted_partition_graph()
networkx.generators.tests.test_community.test_powerlaw_iterations_exceeded()
networkx.generators.tests.test_community.test_random_partition_graph()
networkx.generators.tests.test_community.test_relaxed_caveman_graph()
networkx.generators.tests.test_community.test_ring_of_cliques()
networkx.generators.tests.test_community.test_stochastic_block_model()
networkx.generators.tests.test_community.test_windmill_graph()
networkx.generators.tests.test_test_both_degrees_none()
networkx.generators.tests.test_test_caveman_graph()
networkx.generators.tests.test_test_connected_caveman_graph()
networkx.generators.tests.test_test_gaussian_random_partition_graph()
networkx.generators.tests.test_test_generate_min_degree_itr()
networkx.generators.tests.test_test_generator()
networkx.generators.tests.test_test_invalid_tau1()
networkx.generators.tests.test_test_invalid_tau2()
networkx.generators.tests.test_test_max_community()
networkx.generators.tests.test_test_max_deg_out_of_range()
networkx.generators.tests.test_test_max_iters_exeded()
networkx.generators.tests.test_test_mu_too_large()
networkx.generators.tests.test_test_mu_too_small()
networkx.generators.tests.test_test_neither_degrees_none()
networkx.generators.tests.test_test_no_scipy_zeta()
networkx.generators.tests.test_test_planted_partition_graph()
networkx.generators.tests.test_test_powerlaw_iterations_exceeded()
networkx.generators.tests.test_test_random_partition_graph()
networkx.generators.tests.test_test_relaxed_caveman_graph()
networkx.generators.tests.test_test_ring_of_cliques()
networkx.generators.tests.test_test_stochastic_block_model()
networkx.generators.tests.test_test_windmill_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/generators/tests/test_mycielski.py----------------------------------------
A:networkx.generators.tests.test_mycielski.G->networkx.mycielski_graph(4)
A:networkx.generators.tests.test_mycielski.M->networkx.mycielskian(G, 2)
networkx.generators.tests.test_TestMycielski
networkx.generators.tests.test_TestMycielski.test_construction(self)
networkx.generators.tests.test_TestMycielski.test_mycielski_graph_generator(self)
networkx.generators.tests.test_TestMycielski.test_size(self)
networkx.generators.tests.test_mycielski.TestMycielski
networkx.generators.tests.test_mycielski.TestMycielski.test_construction(self)
networkx.generators.tests.test_mycielski.TestMycielski.test_mycielski_graph_generator(self)
networkx.generators.tests.test_mycielski.TestMycielski.test_size(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/union_find.py----------------------------------------
A:networkx.utils.union_find.roots->iter(sorted({self[x] for x in objects}, key=lambda r: self.weights[r], reverse=True))
A:networkx.utils.union_find.root->next(roots)
networkx.utils.UnionFind(self,elements=None)
networkx.utils.UnionFind.__getitem__(self,object)
networkx.utils.UnionFind.__iter__(self)
networkx.utils.UnionFind.to_sets(self)
networkx.utils.UnionFind.union(self,*objects)
networkx.utils.union_find.UnionFind(self,elements=None)
networkx.utils.union_find.UnionFind.__getitem__(self,object)
networkx.utils.union_find.UnionFind.__init__(self,elements=None)
networkx.utils.union_find.UnionFind.__iter__(self)
networkx.utils.union_find.UnionFind.to_sets(self)
networkx.utils.union_find.UnionFind.union(self,*objects)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/random_sequence.py----------------------------------------
A:networkx.utils.random_sequence.v->seed.random()
A:networkx.utils.random_sequence.x->int(xmin * u ** (-(1.0 / a1)))
A:networkx.utils.random_sequence.psum->sum(distribution)
A:networkx.utils.random_sequence.cdf->cumulative_distribution(distribution)
A:networkx.utils.random_sequence.sample->set()
networkx.utils.cumulative_distribution(distribution)
networkx.utils.discrete_sequence(n,distribution=None,cdistribution=None,seed=None)
networkx.utils.powerlaw_sequence(n,exponent=2.0,seed=None)
networkx.utils.random_sequence.cumulative_distribution(distribution)
networkx.utils.random_sequence.discrete_sequence(n,distribution=None,cdistribution=None,seed=None)
networkx.utils.random_sequence.powerlaw_sequence(n,exponent=2.0,seed=None)
networkx.utils.random_sequence.random_weighted_sample(mapping,k,seed=None)
networkx.utils.random_sequence.weighted_choice(mapping,seed=None)
networkx.utils.random_sequence.zipf_rv(alpha,xmin=1,seed=None)
networkx.utils.random_weighted_sample(mapping,k,seed=None)
networkx.utils.weighted_choice(mapping,seed=None)
networkx.utils.zipf_rv(alpha,xmin=1,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/misc.py----------------------------------------
A:networkx.utils.misc.ii->int(i)
A:networkx.utils.misc.s->set(d.keys())
A:networkx.utils.misc.mapping->dict(zip(s, range(len(s))))
A:networkx.utils.misc.n->len(mapping)
A:networkx.utils.misc.a->numpy.zeros(n)
A:networkx.utils.misc.(a, b)->tee(iterable)
A:networkx.utils.misc.first->next(b, None)
A:networkx.utils.misc.one_to_many->defaultdict(set)
A:networkx.utils.misc.idx->self._rng.randint(0, len(seq))
A:networkx.utils.misc.nlist1->list(nodes1)
A:networkx.utils.misc.nlist2->list(nodes2)
A:networkx.utils.misc.d1->defaultdict(dict)
A:networkx.utils.misc.d2->defaultdict(dict)
networkx.utils.PythonRandomInterface(self,rng=None)
networkx.utils.PythonRandomInterface.choice(self,seq)
networkx.utils.PythonRandomInterface.expovariate(self,scale)
networkx.utils.PythonRandomInterface.gauss(self,mu,sigma)
networkx.utils.PythonRandomInterface.paretovariate(self,shape)
networkx.utils.PythonRandomInterface.randint(self,a,b)
networkx.utils.PythonRandomInterface.random(self)
networkx.utils.PythonRandomInterface.randrange(self,a,b=None)
networkx.utils.PythonRandomInterface.sample(self,seq,k)
networkx.utils.PythonRandomInterface.shuffle(self,seq)
networkx.utils.PythonRandomInterface.uniform(self,a,b)
networkx.utils._dict_to_numpy_array1(d,mapping=None)
networkx.utils._dict_to_numpy_array2(d,mapping=None)
networkx.utils.arbitrary_element(iterable)
networkx.utils.create_py_random_state(random_state=None)
networkx.utils.create_random_state(random_state=None)
networkx.utils.dict_to_numpy_array(d,mapping=None)
networkx.utils.edges_equal(edges1,edges2)
networkx.utils.flatten(obj,result=None)
networkx.utils.graphs_equal(graph1,graph2)
networkx.utils.groups(many_to_one)
networkx.utils.make_list_of_ints(sequence)
networkx.utils.misc.PythonRandomInterface(self,rng=None)
networkx.utils.misc.PythonRandomInterface.__init__(self,rng=None)
networkx.utils.misc.PythonRandomInterface.choice(self,seq)
networkx.utils.misc.PythonRandomInterface.expovariate(self,scale)
networkx.utils.misc.PythonRandomInterface.gauss(self,mu,sigma)
networkx.utils.misc.PythonRandomInterface.paretovariate(self,shape)
networkx.utils.misc.PythonRandomInterface.randint(self,a,b)
networkx.utils.misc.PythonRandomInterface.random(self)
networkx.utils.misc.PythonRandomInterface.randrange(self,a,b=None)
networkx.utils.misc.PythonRandomInterface.sample(self,seq,k)
networkx.utils.misc.PythonRandomInterface.shuffle(self,seq)
networkx.utils.misc.PythonRandomInterface.uniform(self,a,b)
networkx.utils.misc._dict_to_numpy_array1(d,mapping=None)
networkx.utils.misc._dict_to_numpy_array2(d,mapping=None)
networkx.utils.misc.arbitrary_element(iterable)
networkx.utils.misc.create_py_random_state(random_state=None)
networkx.utils.misc.create_random_state(random_state=None)
networkx.utils.misc.dict_to_numpy_array(d,mapping=None)
networkx.utils.misc.edges_equal(edges1,edges2)
networkx.utils.misc.flatten(obj,result=None)
networkx.utils.misc.graphs_equal(graph1,graph2)
networkx.utils.misc.groups(many_to_one)
networkx.utils.misc.make_list_of_ints(sequence)
networkx.utils.misc.nodes_equal(nodes1,nodes2)
networkx.utils.misc.pairwise(iterable,cyclic=False)
networkx.utils.nodes_equal(nodes1,nodes2)
networkx.utils.pairwise(iterable,cyclic=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/mapped_queue.py----------------------------------------
A:networkx.utils.mapped_queue.self._hash->hash(element)
A:networkx.utils.mapped_queue.self.heap->list(data)
A:networkx.utils.mapped_queue.self.position->dict()
A:networkx.utils.mapped_queue.elt->_HeapElement(priority, elt)
A:networkx.utils.mapped_queue.pos->len(self.heap)
A:networkx.utils.mapped_queue.last->self.heap.pop()
A:networkx.utils.mapped_queue.new->_HeapElement(priority, new)
A:networkx.utils.mapped_queue.end_pos->len(heap)
networkx.utils.mapped_queue.MappedQueue(self,data=None)
networkx.utils.mapped_queue.MappedQueue.__init__(self,data=None)
networkx.utils.mapped_queue.MappedQueue.__len__(self)
networkx.utils.mapped_queue.MappedQueue._heapify(self)
networkx.utils.mapped_queue.MappedQueue._siftdown(self,start_pos,pos)
networkx.utils.mapped_queue.MappedQueue._siftup(self,pos)
networkx.utils.mapped_queue.MappedQueue.pop(self)
networkx.utils.mapped_queue.MappedQueue.push(self,elt,priority=None)
networkx.utils.mapped_queue.MappedQueue.remove(self,elt)
networkx.utils.mapped_queue.MappedQueue.update(self,elt,new,priority=None)
networkx.utils.mapped_queue._HeapElement(self,priority,element)
networkx.utils.mapped_queue._HeapElement.__eq__(self,other)
networkx.utils.mapped_queue._HeapElement.__getitem__(self,indx)
networkx.utils.mapped_queue._HeapElement.__gt__(self,other)
networkx.utils.mapped_queue._HeapElement.__hash__(self)
networkx.utils.mapped_queue._HeapElement.__init__(self,priority,element)
networkx.utils.mapped_queue._HeapElement.__iter__(self)
networkx.utils.mapped_queue._HeapElement.__lt__(self,other)
networkx.utils.mapped_queue._HeapElement.__repr__(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/rcm.py----------------------------------------
A:networkx.utils.rcm.start->heuristic(G)
A:networkx.utils.rcm.queue->deque([start])
A:networkx.utils.rcm.parent->deque([start]).popleft()
A:networkx.utils.rcm.nd->sorted(list(G.degree(set(G[parent]) - visited)), key=itemgetter(1))
A:networkx.utils.rcm.u->arbitrary_element(G)
A:networkx.utils.rcm.spl->dict(nx.shortest_path_length(G, v))
A:networkx.utils.rcm.l->max(spl.values())
A:networkx.utils.rcm.(v, deg)->min(G.degree(farthest), key=itemgetter(1))
networkx.utils.connected_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.pseudo_peripheral_node(G)
networkx.utils.rcm.connected_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.rcm.cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.rcm.pseudo_peripheral_node(G)
networkx.utils.rcm.reverse_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.reverse_cuthill_mckee_ordering(G,heuristic=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/decorators.py----------------------------------------
A:networkx.utils.decorators._dispatch_dict->defaultdict(lambda : open, **fopeners)
A:networkx.utils.decorators.path->str(path)
A:networkx.utils.decorators.fobj->_dispatch_dict[ext](path, mode=mode)
A:networkx.utils.decorators.nodes->tuple(n)
A:networkx.utils.decorators.iter_wa->iter(which_args)
A:networkx.utils.decorators.real_func->func.__argmap__.compile(func.__wrapped__)
A:networkx.utils.decorators.func.__is_generator->inspect.isgeneratorfunction(f)
A:networkx.utils.decorators._bad_chars->re.compile('[^a-zA-Z0-9_]')
A:networkx.utils.decorators.fname->cls._name(f)
A:networkx.utils.decorators.(sig, wrapped_name, functions, mapblock, finallys, mutable_args)->f.__argmap__.assemble(f.__wrapped__)
A:networkx.utils.decorators.body->argmap._indent(sig.def_sig, mut_args, mapblock, call, finallys)
A:networkx.utils.decorators.code->'\n'.join(body)
A:networkx.utils.decorators.globl->dict(functions.values())
A:networkx.utils.decorators.compiled->compile(code, filename, 'exec')
A:networkx.utils.decorators.functions->dict(functions)
A:networkx.utils.decorators.sig->inspect.signature(f, follow_wrapped=False)
A:networkx.utils.decorators.wrapped_name->self._name(f)
A:networkx.utils.decorators.applied->set()
A:networkx.utils.decorators.name->get_name(a)
A:networkx.utils.decorators.final->self._name(name)
A:networkx.utils.decorators.Signature->collections.namedtuple('Signature', ['name', 'signature', 'def_sig', 'call_sig', 'names', 'n_positional', 'args', 'kwargs'])
networkx.utils.argmap(self,func,*args,try_finally=False)
networkx.utils.argmap._count(cls)
networkx.utils.argmap._flatten(nestlist,visited)
networkx.utils.argmap._indent(*lines)
networkx.utils.argmap._lazy_compile(func)
networkx.utils.argmap._name(cls,f)
networkx.utils.argmap.assemble(self,f)
networkx.utils.argmap.compile(self,f)
networkx.utils.argmap.signature(cls,f)
networkx.utils.decorators.argmap(self,func,*args,try_finally=False)
networkx.utils.decorators.argmap.__init__(self,func,*args,try_finally=False)
networkx.utils.decorators.argmap._count(cls)
networkx.utils.decorators.argmap._flatten(nestlist,visited)
networkx.utils.decorators.argmap._indent(*lines)
networkx.utils.decorators.argmap._lazy_compile(func)
networkx.utils.decorators.argmap._name(cls,f)
networkx.utils.decorators.argmap.assemble(self,f)
networkx.utils.decorators.argmap.compile(self,f)
networkx.utils.decorators.argmap.signature(cls,f)
networkx.utils.decorators.nodes_or_number(which_args)
networkx.utils.decorators.not_implemented_for(*graph_types)
networkx.utils.decorators.np_random_state(random_state_argument)
networkx.utils.decorators.open_file(path_arg,mode='r')
networkx.utils.decorators.py_random_state(random_state_argument)
networkx.utils.nodes_or_number(which_args)
networkx.utils.not_implemented_for(*graph_types)
networkx.utils.np_random_state(random_state_argument)
networkx.utils.open_file(path_arg,mode='r')
networkx.utils.py_random_state(random_state_argument)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/heaps.py----------------------------------------
A:networkx.utils.heaps.self._root->self._link(self._root, child)
A:networkx.utils.heaps.node->link(prev, node)
A:networkx.utils.heaps.child->self._merge_children(node)
A:networkx.utils.heaps.self._count->count()
networkx.utils.BinaryHeap(self)
networkx.utils.BinaryHeap.get(self,key,default=None)
networkx.utils.BinaryHeap.insert(self,key,value,allow_increase=False)
networkx.utils.BinaryHeap.min(self)
networkx.utils.BinaryHeap.pop(self)
networkx.utils.MinHeap(self)
networkx.utils.MinHeap._Item(self,key,value)
networkx.utils.MinHeap._Item.__repr__(self)
networkx.utils.MinHeap.__bool__(self)
networkx.utils.MinHeap.__contains__(self,key)
networkx.utils.MinHeap.__len__(self)
networkx.utils.MinHeap.__nonzero__(self)
networkx.utils.MinHeap.get(self,key,default=None)
networkx.utils.MinHeap.insert(self,key,value,allow_increase=False)
networkx.utils.MinHeap.min(self)
networkx.utils.MinHeap.pop(self)
networkx.utils.PairingHeap(self)
networkx.utils.PairingHeap._Node(self,key,value)
networkx.utils.PairingHeap._cut(self,node)
networkx.utils.PairingHeap._link(self,root,other)
networkx.utils.PairingHeap._merge_children(self,root)
networkx.utils.PairingHeap.get(self,key,default=None)
networkx.utils.PairingHeap.insert(self,key,value,allow_increase=False)
networkx.utils.PairingHeap.min(self)
networkx.utils.PairingHeap.pop(self)
networkx.utils.heaps.BinaryHeap(self)
networkx.utils.heaps.BinaryHeap.__init__(self)
networkx.utils.heaps.BinaryHeap.get(self,key,default=None)
networkx.utils.heaps.BinaryHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.BinaryHeap.min(self)
networkx.utils.heaps.BinaryHeap.pop(self)
networkx.utils.heaps.MinHeap(self)
networkx.utils.heaps.MinHeap._Item(self,key,value)
networkx.utils.heaps.MinHeap._Item.__init__(self,key,value)
networkx.utils.heaps.MinHeap._Item.__repr__(self)
networkx.utils.heaps.MinHeap.__bool__(self)
networkx.utils.heaps.MinHeap.__contains__(self,key)
networkx.utils.heaps.MinHeap.__init__(self)
networkx.utils.heaps.MinHeap.__len__(self)
networkx.utils.heaps.MinHeap.__nonzero__(self)
networkx.utils.heaps.MinHeap.get(self,key,default=None)
networkx.utils.heaps.MinHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.MinHeap.min(self)
networkx.utils.heaps.MinHeap.pop(self)
networkx.utils.heaps.PairingHeap(self)
networkx.utils.heaps.PairingHeap._Node(self,key,value)
networkx.utils.heaps.PairingHeap._Node.__init__(self,key,value)
networkx.utils.heaps.PairingHeap.__init__(self)
networkx.utils.heaps.PairingHeap._cut(self,node)
networkx.utils.heaps.PairingHeap._link(self,root,other)
networkx.utils.heaps.PairingHeap._merge_children(self,root)
networkx.utils.heaps.PairingHeap.get(self,key,default=None)
networkx.utils.heaps.PairingHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.PairingHeap.min(self)
networkx.utils.heaps.PairingHeap.pop(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_rcm.py----------------------------------------
A:networkx.utils.tests.test_rcm.G->networkx.Graph([(0, 0), (0, 4), (1, 1), (1, 2), (1, 5), (1, 7), (2, 2), (2, 4), (3, 3), (3, 6), (4, 4), (5, 5), (5, 7), (6, 6), (7, 7)])
A:networkx.utils.tests.test_rcm.rcm->list(reverse_cuthill_mckee_ordering(G, heuristic=smallest_degree))
A:networkx.utils.tests.test_rcm.(deg, node)->min(((d, n) for (n, d) in G.degree()))
networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic()
networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee()
networkx.utils.tests.test_test_rcm_alternate_heuristic()
networkx.utils.tests.test_test_reverse_cuthill_mckee()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_decorators.py----------------------------------------
A:networkx.utils.tests.test_decorators.self.fobj->tempfile.NamedTemporaryFile('wb+', delete=False)
A:networkx.utils.tests.test_decorators.path->kwargs.get('path', None)
A:networkx.utils.tests.test_decorators.np->pytest.importorskip('numpy')
A:networkx.utils.tests.test_decorators.rv->self.instantiate_py_random_state(rng)
A:networkx.utils.tests.test_decorators.np_rv->pytest.importorskip('numpy').random.random_sample()
A:networkx.utils.tests.test_decorators.py_rv->random.random()
A:networkx.utils.tests.test_decorators.rval->self.instantiate_py_random_state(seed)
A:networkx.utils.tests.test_decorators.rval_expected->pytest.importorskip('numpy').random.RandomState(seed).rand()
A:networkx.utils.tests.test_decorators.rng->random.Random(seed)
A:networkx.utils.tests.test_decorators.rstate->make_random_state(1)
A:networkx.utils.tests.test_decorators.(x, y, z)->foo('a', 'b', 'c')
A:networkx.utils.tests.test_decorators.q->foo('a', 'b', 'c')
A:networkx.utils.tests.test_decorators.add_two_to_second->argmap(lambda b: b + 2, 1)
A:networkx.utils.tests.test_decorators.(a, args, kwargs)->foo(1, 2, 3, t=4)
A:networkx.utils.tests.test_decorators.code->'\n'.join(argmap._indent(*['try:', 'try:', 'pass#', 'finally:', 'pass#', '#', 'finally:', 'pass#']))
A:networkx.utils.tests.test_decorators.G->networkx.Graph([(1, 2)])
A:networkx.utils.tests.test_decorators.D->networkx.DiGraph()
A:networkx.utils.tests.test_decorators.node_iter->yield_nodes(G)
networkx.utils.tests.test_TestArgmap
networkx.utils.tests.test_TestArgmap.ArgmapError(RuntimeError)
networkx.utils.tests.test_TestArgmap.test_actual_kwarg(self)
networkx.utils.tests.test_TestArgmap.test_actual_vararg(self)
networkx.utils.tests.test_TestArgmap.test_contextmanager(self)
networkx.utils.tests.test_TestArgmap.test_flatten(self)
networkx.utils.tests.test_TestArgmap.test_immediate_raise(self)
networkx.utils.tests.test_TestArgmap.test_indent(self)
networkx.utils.tests.test_TestArgmap.test_nested_tuple(self)
networkx.utils.tests.test_TestArgmap.test_signature_destroying_intermediate_decorator(self)
networkx.utils.tests.test_TestArgmap.test_trivial_function(self)
networkx.utils.tests.test_TestArgmap.test_trivial_iterator(self)
networkx.utils.tests.test_TestArgmap.test_tryfinally_generator(self)
networkx.utils.tests.test_TestOpenFileDecorator
networkx.utils.tests.test_TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.setup_method(self)
networkx.utils.tests.test_TestOpenFileDecorator.teardown_method(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_pathlib(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj_path_none(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_path_none(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_TestRandomState
networkx.utils.tests.test_TestRandomState.instantiate_np_random_state(self,random_state)
networkx.utils.tests.test_TestRandomState.instantiate_py_random_state(self,random_state)
networkx.utils.tests.test_TestRandomState.setup_class(cls)
networkx.utils.tests.test_TestRandomState.test_random_state_None(self)
networkx.utils.tests.test_TestRandomState.test_random_state_int(self)
networkx.utils.tests.test_TestRandomState.test_random_state_np_random(self)
networkx.utils.tests.test_TestRandomState.test_random_state_np_random_RandomState(self)
networkx.utils.tests.test_TestRandomState.test_random_state_py_random(self)
networkx.utils.tests.test_decorators.TestArgmap
networkx.utils.tests.test_decorators.TestArgmap.ArgmapError(RuntimeError)
networkx.utils.tests.test_decorators.TestArgmap.test_actual_kwarg(self)
networkx.utils.tests.test_decorators.TestArgmap.test_actual_vararg(self)
networkx.utils.tests.test_decorators.TestArgmap.test_contextmanager(self)
networkx.utils.tests.test_decorators.TestArgmap.test_flatten(self)
networkx.utils.tests.test_decorators.TestArgmap.test_immediate_raise(self)
networkx.utils.tests.test_decorators.TestArgmap.test_indent(self)
networkx.utils.tests.test_decorators.TestArgmap.test_nested_tuple(self)
networkx.utils.tests.test_decorators.TestArgmap.test_signature_destroying_intermediate_decorator(self)
networkx.utils.tests.test_decorators.TestArgmap.test_trivial_function(self)
networkx.utils.tests.test_decorators.TestArgmap.test_trivial_iterator(self)
networkx.utils.tests.test_decorators.TestArgmap.test_tryfinally_generator(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator
networkx.utils.tests.test_decorators.TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.setup_method(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.teardown_method(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_pathlib(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj_path_none(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_path_none(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_decorators.TestRandomState
networkx.utils.tests.test_decorators.TestRandomState.instantiate_np_random_state(self,random_state)
networkx.utils.tests.test_decorators.TestRandomState.instantiate_py_random_state(self,random_state)
networkx.utils.tests.test_decorators.TestRandomState.setup_class(cls)
networkx.utils.tests.test_decorators.TestRandomState.test_random_state_None(self)
networkx.utils.tests.test_decorators.TestRandomState.test_random_state_int(self)
networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random(self)
networkx.utils.tests.test_decorators.TestRandomState.test_random_state_np_random_RandomState(self)
networkx.utils.tests.test_decorators.TestRandomState.test_random_state_py_random(self)
networkx.utils.tests.test_decorators.test_not_implemented_decorator()
networkx.utils.tests.test_decorators.test_not_implemented_decorator_key()
networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise()
networkx.utils.tests.test_decorators.test_py_random_state_invalid_arg_index()
networkx.utils.tests.test_decorators.test_py_random_state_string_arg_index()
networkx.utils.tests.test_decorators.test_random_state_invalid_arg_index()
networkx.utils.tests.test_decorators.test_random_state_string_arg_index()
networkx.utils.tests.test_test_not_implemented_decorator()
networkx.utils.tests.test_test_not_implemented_decorator_key()
networkx.utils.tests.test_test_not_implemented_decorator_raise()
networkx.utils.tests.test_test_py_random_state_invalid_arg_index()
networkx.utils.tests.test_test_py_random_state_string_arg_index()
networkx.utils.tests.test_test_random_state_invalid_arg_index()
networkx.utils.tests.test_test_random_state_string_arg_index()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_random_sequence.py----------------------------------------
A:networkx.utils.tests.test_random_sequence.seq->powerlaw_sequence(10)
A:networkx.utils.tests.test_random_sequence.r->zipf_rv(2.3)
A:networkx.utils.tests.test_random_sequence.s->random_weighted_sample(mapping, 2)
A:networkx.utils.tests.test_random_sequence.c->weighted_choice(mapping)
networkx.utils.tests.test_random_sequence.test_degree_sequences()
networkx.utils.tests.test_random_sequence.test_random_weighted_choice()
networkx.utils.tests.test_random_sequence.test_random_weighted_sample()
networkx.utils.tests.test_random_sequence.test_zipf_rv()
networkx.utils.tests.test_test_degree_sequences()
networkx.utils.tests.test_test_random_weighted_choice()
networkx.utils.tests.test_test_random_weighted_sample()
networkx.utils.tests.test_test_zipf_rv()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_misc.py----------------------------------------
A:networkx.utils.tests.test_misc.val->flatten(nested, _result)
A:networkx.utils.tests.test_misc._result->copy(result)
A:networkx.utils.tests.test_misc.nexisting->len(_result)
A:networkx.utils.tests.test_misc.z->discrete_sequence(20, distribution=[0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3])
A:networkx.utils.tests.test_misc.np->pytest.importorskip('numpy')
A:networkx.utils.tests.test_misc.a->_dict_to_numpy_array1(d)
A:networkx.utils.tests.test_misc.b->pytest.importorskip('numpy').array([1.0, 2, 3])
A:networkx.utils.tests.test_misc.c->pytest.importorskip('numpy').array([1.1, 2, 3])
A:networkx.utils.tests.test_misc.B->make_list_of_ints(b)
A:networkx.utils.tests.test_misc.nodes->range(4)
A:networkx.utils.tests.test_misc.empty_iter->iter(())
A:networkx.utils.tests.test_misc.many_to_one->dict(zip('abcde', [0, 0, 1, 1, 2]))
A:networkx.utils.tests.test_misc.actual->groups(many_to_one)
A:networkx.utils.tests.test_misc.rng->pytest.importorskip('numpy').random.default_rng(42)
A:networkx.utils.tests.test_misc.rng_explicit->pytest.importorskip('numpy').random.Generator(np.random.SFC64())
A:networkx.utils.tests.test_misc.rs42->rs(42)
A:networkx.utils.tests.test_misc.pri->PythonRandomInterface(np.random.default_rng(42))
A:networkx.utils.tests.test_misc.iterable->iterable_type([1, 2, 3])
networkx.utils.tests.test_TestNumpyArray
networkx.utils.tests.test_TestNumpyArray.setup_class(cls)
networkx.utils.tests.test_TestNumpyArray.test__dict_to_numpy_array1(self)
networkx.utils.tests.test_TestNumpyArray.test__dict_to_numpy_array2(self)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array_a(self)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array_b(self)
networkx.utils.tests.test_TestNumpyArray.test_numpy_to_list_of_ints(self)
networkx.utils.tests.test_misc.TestNumpyArray
networkx.utils.tests.test_misc.TestNumpyArray.setup_class(cls)
networkx.utils.tests.test_misc.TestNumpyArray.test__dict_to_numpy_array1(self)
networkx.utils.tests.test_misc.TestNumpyArray.test__dict_to_numpy_array2(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_a(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_b(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_numpy_to_list_of_ints(self)
networkx.utils.tests.test_misc.test_PythonRandomInterface_Generator()
networkx.utils.tests.test_misc.test_PythonRandomInterface_RandomState()
networkx.utils.tests.test_misc.test_arbitrary_element(iterable_type,expected)
networkx.utils.tests.test_misc.test_arbitrary_element_raises(iterator)
networkx.utils.tests.test_misc.test_create_py_random_state()
networkx.utils.tests.test_misc.test_create_random_state()
networkx.utils.tests.test_misc.test_flatten(nested,result)
networkx.utils.tests.test_misc.test_groups()
networkx.utils.tests.test_misc.test_make_list_of_ints()
networkx.utils.tests.test_misc.test_pairwise()
networkx.utils.tests.test_misc.test_random_number_distribution()
networkx.utils.tests.test_test_PythonRandomInterface_Generator()
networkx.utils.tests.test_test_PythonRandomInterface_RandomState()
networkx.utils.tests.test_test_arbitrary_element(iterable_type,expected)
networkx.utils.tests.test_test_arbitrary_element_raises(iterator)
networkx.utils.tests.test_test_create_py_random_state()
networkx.utils.tests.test_test_create_random_state()
networkx.utils.tests.test_test_flatten(nested,result)
networkx.utils.tests.test_test_groups()
networkx.utils.tests.test_test_make_list_of_ints()
networkx.utils.tests.test_test_pairwise()
networkx.utils.tests.test_test_random_number_distribution()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_unionfind.py----------------------------------------
A:networkx.utils.tests.test_unionfind.x->networkx.utils.UnionFind()
A:networkx.utils.tests.test_unionfind.uf->networkx.utils.UnionFind((0, 1))
networkx.utils.tests.test_unionfind.test_empty_union()
networkx.utils.tests.test_unionfind.test_subtree_union()
networkx.utils.tests.test_unionfind.test_unbalanced_merge_weights()
networkx.utils.tests.test_unionfind.test_unionfind()
networkx.utils.tests.test_unionfind.test_unionfind_weights()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_heaps.py----------------------------------------
A:networkx.utils.tests.test_heaps.x->X()
A:networkx.utils.tests.test_heaps.heap->cls(*args, **kwargs)
networkx.utils.tests.test_X
networkx.utils.tests.test_X.__eq__(self,other)
networkx.utils.tests.test_X.__ge__(self,other)
networkx.utils.tests.test_X.__gt__(self,other)
networkx.utils.tests.test_X.__hash__(self)
networkx.utils.tests.test_X.__le__(self,other)
networkx.utils.tests.test_X.__lt__(self,other)
networkx.utils.tests.test_X.__ne__(self,other)
networkx.utils.tests.test__test_heap_class(cls,*args,**kwargs)
networkx.utils.tests.test_heaps.X
networkx.utils.tests.test_heaps.X.__eq__(self,other)
networkx.utils.tests.test_heaps.X.__ge__(self,other)
networkx.utils.tests.test_heaps.X.__gt__(self,other)
networkx.utils.tests.test_heaps.X.__hash__(self)
networkx.utils.tests.test_heaps.X.__le__(self,other)
networkx.utils.tests.test_heaps.X.__lt__(self,other)
networkx.utils.tests.test_heaps.X.__ne__(self,other)
networkx.utils.tests.test_heaps._test_heap_class(cls,*args,**kwargs)
networkx.utils.tests.test_heaps.test_BinaryHeap()
networkx.utils.tests.test_heaps.test_PairingHeap()
networkx.utils.tests.test_test_BinaryHeap()
networkx.utils.tests.test_test_PairingHeap()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test__init.py----------------------------------------
networkx.utils.tests.test__init.test_utils_namespace()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/utils/tests/test_mapped_queue.py----------------------------------------
A:networkx.utils.tests.test_mapped_queue.bar->_HeapElement(1.1, (3, 2, 1))
A:networkx.utils.tests.test_mapped_queue.foo->_HeapElement(1, 'a')
A:networkx.utils.tests.test_mapped_queue.q->self._make_mapped_queue(h)
A:networkx.utils.tests.test_mapped_queue.inserted->self._make_mapped_queue(h).push(1, priority=1)
A:networkx.utils.tests.test_mapped_queue.h_sorted->sorted(h)
A:networkx.utils.tests.test_mapped_queue.removed->self._make_mapped_queue(h).update(0, 35, priority=35)
networkx.utils.tests.test_mapped_queue.TestMappedDict(TestMappedQueue)
networkx.utils.tests.test_mapped_queue.TestMappedDict._make_mapped_queue(self,h)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_empty_pop(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_incomparable_ties(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_init(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_pop(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_push(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_push_duplicate(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_ties(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_update_leaf(self)
networkx.utils.tests.test_mapped_queue.TestMappedDict.test_update_root(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue
networkx.utils.tests.test_mapped_queue.TestMappedQueue._check_map(self,q)
networkx.utils.tests.test_mapped_queue.TestMappedQueue._make_mapped_queue(self,h)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.setup_method(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_heapify(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_incomparable(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_init(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_len(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_pop(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_push_duplicate(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_leaf(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_remove_root(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_leaf(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_multiple(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftdown_single(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_leaf(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_left_child(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_multiple(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_one_child(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_siftup_right_child(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_leaf(self)
networkx.utils.tests.test_mapped_queue.TestMappedQueue.test_update_root(self)
networkx.utils.tests.test_mapped_queue.test_HeapElement_eq()
networkx.utils.tests.test_mapped_queue.test_HeapElement_getitem()
networkx.utils.tests.test_mapped_queue.test_HeapElement_gtlt()
networkx.utils.tests.test_mapped_queue.test_HeapElement_gtlt_tied_priority()
networkx.utils.tests.test_mapped_queue.test_HeapElement_iter()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_convert_pandas.py----------------------------------------
A:networkx.tests.test_convert_pandas.np->pytest.importorskip('numpy')
A:networkx.tests.test_convert_pandas.pd->pytest.importorskip('pandas')
A:networkx.tests.test_convert_pandas.self.rng->pytest.importorskip('numpy').random.RandomState(seed=5)
A:networkx.tests.test_convert_pandas.ints->self.rng.randint(1, 11, size=(3, 2))
A:networkx.tests.test_convert_pandas.df->networkx.to_pandas_edgelist(G, nodelist=[1, 2])
A:networkx.tests.test_convert_pandas.mdf->pytest.importorskip('pandas').DataFrame([[4, 16, 'A', 'D']], columns=['weight', 'cost', 0, 'b'])
A:networkx.tests.test_convert_pandas.self.mdf->pytest.importorskip('pandas').concat([df, mdf])
A:networkx.tests.test_convert_pandas.G->networkx.Graph()
A:networkx.tests.test_convert_pandas.Gtrue->networkx.Graph([('E', 'C', {'cost': 9, 'weight': 10}), ('B', 'A', {'cost': 1, 'weight': 7}), ('A', 'D', {'cost': 7, 'weight': 4})])
A:networkx.tests.test_convert_pandas.MGtrue->networkx.MultiGraph(Gtrue)
A:networkx.tests.test_convert_pandas.MG->networkx.from_pandas_edgelist(self.mdf, 0, 'b', True, nx.MultiGraph())
A:networkx.tests.test_convert_pandas.G1->networkx.from_pandas_edgelist(df, source='O', target='D', edge_attr=True, create_using=nx.MultiDiGraph)
A:networkx.tests.test_convert_pandas.G2->networkx.from_pandas_edgelist(df, source='O', target='D', edge_attr=['St', 'Co', 'Mi'], create_using=nx.MultiDiGraph)
A:networkx.tests.test_convert_pandas.edgeframe->pytest.importorskip('pandas').DataFrame([[0, 1], [1, 2], [2, 0]], columns=['s', 't'])
A:networkx.tests.test_convert_pandas.edgelist->networkx.to_edgelist(G)
A:networkx.tests.test_convert_pandas.edges->pytest.importorskip('pandas').DataFrame({'source': source, 'target': target, 'weight': weight})
A:networkx.tests.test_convert_pandas.GG->networkx.from_pandas_edgelist(edges, edge_attr='weight')
A:networkx.tests.test_convert_pandas.GW->networkx.to_networkx_graph(edges, create_using=nx.Graph)
A:networkx.tests.test_convert_pandas.dftrue->pytest.importorskip('pandas').DataFrame(data, dtype=np.intp)
A:networkx.tests.test_convert_pandas.df_roundtrip->df_roundtrip.sort_values('attr1').sort_values('attr1')
A:networkx.tests.test_convert_pandas.expected->pytest.importorskip('pandas').DataFrame([[0, 1], [1, 0]], dtype=int, index=nodelist, columns=nodelist)
networkx.tests.test_convert_pandas.TestConvertPandas
networkx.tests.test_convert_pandas.TestConvertPandas.setup_method(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_multigraph(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_edgekey_with_normal_graph_no_action(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_exceptions(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_adjacency_named(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_all_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_int_attr_name(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_invalid_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multi_attr_incl_target(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_multidigraph_and_edge_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_no_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_edgelist_one_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_nonexisting_edgekey_raises(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_roundtrip(self,graph)
networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_custom_source_or_target_col_exists(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_default_source_or_target_col_exists(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_to_edgelist_edge_key_col_exists(self)
networkx.tests.test_convert_pandas.test_to_pandas_adjacency_with_nodelist()
networkx.tests.test_convert_pandas.test_to_pandas_edgelist_with_nodelist()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_relabel.py----------------------------------------
A:networkx.tests.test_relabel.G->networkx.path_graph(3)
A:networkx.tests.test_relabel.H->networkx.relabel_nodes(G, mapping, copy=False)
A:networkx.tests.test_relabel.GG->networkx.path_graph(3).copy()
A:networkx.tests.test_relabel.K5->networkx.complete_graph(4)
A:networkx.tests.test_relabel.original_order->list(G)
A:networkx.tests.test_relabel.new_order->list(H)
networkx.tests.test_relabel.TestRelabel
networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers(self)
networkx.tests.test_relabel.TestRelabel.test_convert_to_integers2(self)
networkx.tests.test_relabel.TestRelabel.test_convert_to_integers_raise(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_circular(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_copy_name(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_isolated_nodes_to_same(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_inout_merge_nodes(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multidigraph_merge_inplace(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_merge_inplace(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_multigraph_nonnumeric_key(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_callable_type(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_non_mapping_or_callable(self,non_mc)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_orderedgraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_preserve_node_order_full_mapping_with_copy_false(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_preserve_node_order_full_mapping_with_copy_true(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_preserve_node_order_partial_mapping_with_copy_false(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_preserve_node_order_partial_mapping_with_copy_true(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_selfloop(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_toposort(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_all_random_functions.py----------------------------------------
A:networkx.tests.test_all_random_functions.np->pytest.importorskip('numpy')
A:networkx.tests.test_all_random_functions.np_rv->pytest.importorskip('numpy').random.rand()
A:networkx.tests.test_all_random_functions.py_rv->random.random()
A:networkx.tests.test_all_random_functions.after_np_rv->pytest.importorskip('numpy').random.rand()
A:networkx.tests.test_all_random_functions.after_py_rv->random.random()
A:networkx.tests.test_all_random_functions.G->networkx.barbell_graph(12, 20)
A:networkx.tests.test_all_random_functions.H->networkx.cycle_graph(3)
networkx.tests.test_all_random_functions.run_all_random_functions(seed)
networkx.tests.test_all_random_functions.t(f,*args,**kwds)
networkx.tests.test_all_random_functions.test_rng_interface()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_convert_numpy.py----------------------------------------
A:networkx.tests.test_convert_numpy.np->pytest.importorskip('numpy')
A:networkx.tests.test_convert_numpy.npt->pytest.importorskip('numpy.testing')
A:networkx.tests.test_convert_numpy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_numpy.self.G2->cycle_graph(10, create_using=nx.DiGraph)
A:networkx.tests.test_convert_numpy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_numpy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_numpy.g->cycle_graph(4)
A:networkx.tests.test_convert_numpy.GG->networkx.from_numpy_array(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GI->networkx.empty_graph(0, create_using).__class__(A)
A:networkx.tests.test_convert_numpy.A->networkx.to_numpy_array(G, dtype=dtype, weight=None, nonedge=nonedges)
A:networkx.tests.test_convert_numpy.P4->path_graph(4)
A:networkx.tests.test_convert_numpy.P3->path_graph(3)
A:networkx.tests.test_convert_numpy.nodelist->list(P3)
A:networkx.tests.test_convert_numpy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_numpy.WP4->networkx.Graph()
A:networkx.tests.test_convert_numpy.G->networkx.path_graph(3, create_using=graph_type)
A:networkx.tests.test_convert_numpy.expected->networkx.to_numpy_array(G, dtype=float, weight=attr, nonedge=nonedge)
A:networkx.tests.test_convert_numpy.actual->networkx.from_numpy_array(A, parallel_edges=False, create_using=nx.MultiDiGraph)
A:networkx.tests.test_convert_numpy.dtype->pytest.importorskip('numpy').dtype([('weight', int), ('cost', int)])
A:networkx.tests.test_convert_numpy.nonedges->pytest.importorskip('numpy').array([(0, np.inf)], dtype=dtype)
networkx.tests.test_convert_numpy.TestConvertNumpyArray
networkx.tests.test_convert_numpy.TestConvertNumpyArray.assert_equal(self,G1,G2)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.create_weighted(self,G)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.setup_method(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_graph(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_dtype_int_multigraph(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_dtype(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_parallel_edges(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_from_numpy_array_type(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_identity_weighted_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_nodelist(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_shape(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_symmetric(self)
networkx.tests.test_convert_numpy.TestConvertNumpyArray.test_weight_keyword(self)
networkx.tests.test_convert_numpy.multigraph_test_graph()
networkx.tests.test_convert_numpy.test_numpy_multigraph(multigraph_test_graph,operator,expected)
networkx.tests.test_convert_numpy.test_to_numpy_array_arbitrary_weights()
networkx.tests.test_convert_numpy.test_to_numpy_array_complex_weights(G,expected)
networkx.tests.test_convert_numpy.test_to_numpy_array_multigraph_nodelist(multigraph_test_graph)
networkx.tests.test_convert_numpy.test_to_numpy_array_multiweight_reduction(func,expected)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_attrs_from_fields(G,expected)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_multiple_fields(graph_type,edge)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_nonedge_ary(G)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_scalar_nonedge(G)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_single_attr(field_name,expected_attr_val)
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_single_attr_default()
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_dtype_with_weight_raises()
networkx.tests.test_convert_numpy.test_to_numpy_array_structured_multigraph_raises(graph_type)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_convert_scipy.py----------------------------------------
A:networkx.tests.test_convert_scipy.np->pytest.importorskip('numpy')
A:networkx.tests.test_convert_scipy.sp->pytest.importorskip('scipy')
A:networkx.tests.test_convert_scipy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_scipy.self.G2->cycle_graph(10, create_using=nx.DiGraph)
A:networkx.tests.test_convert_scipy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_scipy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_scipy.g->cycle_graph(4)
A:networkx.tests.test_convert_scipy.e->list(g.edges())
A:networkx.tests.test_convert_scipy.ex->zip(source, dest, weight)
A:networkx.tests.test_convert_scipy.GG->networkx.from_scipy_sparse_array(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GI->networkx.empty_graph(0, create_using).__class__(AA)
A:networkx.tests.test_convert_scipy.ACSR->sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format).tocsr()
A:networkx.tests.test_convert_scipy.ACOO->sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format).tocoo()
A:networkx.tests.test_convert_scipy.ACSC->sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format).tocsc()
A:networkx.tests.test_convert_scipy.AD->sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format).todense()
A:networkx.tests.test_convert_scipy.AA->sp.sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format).toarray()
A:networkx.tests.test_convert_scipy.A->pytest.importorskip('scipy').sparse.coo_array([[0, 3, 2], [3, 0, 1], [2, 1, 0]]).asformat(sparse_format)
A:networkx.tests.test_convert_scipy.P4->path_graph(4)
A:networkx.tests.test_convert_scipy.P3->path_graph(3)
A:networkx.tests.test_convert_scipy.nodelist->list(P3.nodes())
A:networkx.tests.test_convert_scipy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_scipy.WP4->networkx.Graph()
A:networkx.tests.test_convert_scipy.G->networkx.from_scipy_sparse_array(A, create_using=nx.MultiGraph)
A:networkx.tests.test_convert_scipy.M->networkx.to_scipy_sparse_array(G, nodelist=[2, 3, 4])
A:networkx.tests.test_convert_scipy.expected->networkx.Graph()
A:networkx.tests.test_convert_scipy.actual->networkx.from_scipy_sparse_array(A, parallel_edges=False, create_using=nx.MultiDiGraph)
networkx.tests.test_convert_scipy.TestConvertScipy
networkx.tests.test_convert_scipy.TestConvertScipy.create_weighted(self,G)
networkx.tests.test_convert_scipy.TestConvertScipy.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_scipy.TestConvertScipy.setup_method(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_empty(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_exceptions(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_format_keyword(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_format_keyword_raise(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_from_scipy_sparse_array_parallel_edges(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_identity_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_identity_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_identity_weighted_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_identity_weighted_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_nodelist(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_null_raise(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_ordering(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_selfloop_digraph(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_selfloop_graph(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_shape(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_symmetric(self)
networkx.tests.test_convert_scipy.TestConvertScipy.test_weight_keyword(self)
networkx.tests.test_convert_scipy.test_from_scipy_sparse_array_formats(sparse_format)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_import.py----------------------------------------
networkx.tests.test_import.test_namespace_alias()
networkx.tests.test_import.test_namespace_nesting()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_convert.py----------------------------------------
A:networkx.tests.test_convert.G->networkx.MultiGraph()
A:networkx.tests.test_convert.dod->to_dict_of_dicts(XGM)
A:networkx.tests.test_convert.GG->from_dict_of_lists(dol, create_using=nx.MultiGraph)
A:networkx.tests.test_convert.GW->to_networkx_graph(dol, create_using=nx.MultiGraph)
A:networkx.tests.test_convert.GI->networkx.MultiGraph(dol)
A:networkx.tests.test_convert.P4->networkx.path_graph(4)
A:networkx.tests.test_convert.P3->networkx.path_graph(3)
A:networkx.tests.test_convert.Gdod->networkx.Graph(dod)
A:networkx.tests.test_convert.g->networkx.Graph()
A:networkx.tests.test_convert.dol->to_dict_of_lists(G)
A:networkx.tests.test_convert.XG->networkx.Graph()
A:networkx.tests.test_convert.XGM->networkx.MultiGraph()
A:networkx.tests.test_convert.XGS->networkx.Graph()
A:networkx.tests.test_convert.GE->from_dict_of_dicts(dod, create_using=nx.MultiGraph, multigraph_input=False)
A:networkx.tests.test_convert.GM->networkx.MultiGraph(G)
A:networkx.tests.test_convert.P->networkx.path_graph(4)
A:networkx.tests.test_convert.H->networkx.DiGraph(G)
A:networkx.tests.test_convert.elist->networkx.to_edgelist(G, nodelist=list(G))
A:networkx.tests.test_convert.h->Custom(g)
networkx.tests.test_convert.TestConvert
networkx.tests.test_convert.TestConvert.edgelists_equal(self,e1,e2)
networkx.tests.test_convert.TestConvert.test_attribute_dict_integrity(self)
networkx.tests.test_convert.TestConvert.test_custom_node_attr_dict_safekeeping(self)
networkx.tests.test_convert.TestConvert.test_digraphs(self)
networkx.tests.test_convert.TestConvert.test_directed_to_undirected(self)
networkx.tests.test_convert.TestConvert.test_edgelists(self)
networkx.tests.test_convert.TestConvert.test_exceptions(self)
networkx.tests.test_convert.TestConvert.test_graph(self)
networkx.tests.test_convert.TestConvert.test_simple_graphs(self)
networkx.tests.test_convert.TestConvert.test_to_edgelist(self)
networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops(self)
networkx.tests.test_convert.test_to_dict_of_dicts_with_edgedata_and_nodelist()
networkx.tests.test_convert.test_to_dict_of_dicts_with_edgedata_multigraph()
networkx.tests.test_convert.test_to_dict_of_dicts_with_edgedata_param(edgelist)
networkx.tests.test_convert.test_to_networkx_graph_non_edgelist()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_lazy_imports.py----------------------------------------
A:networkx.tests.test_lazy_imports.math->networkx.lazy_imports._lazy_import('math')
A:networkx.tests.test_lazy_imports.anything_not_real->networkx.lazy_imports._lazy_import('anything_not_real')
A:networkx.tests.test_lazy_imports.np_test->pytest.importorskip('numpy')
A:networkx.tests.test_lazy_imports.np->networkx.lazy_imports._lazy_import('numpy')
A:networkx.tests.test_lazy_imports.sp->networkx.lazy_imports._lazy_import('scipy')
networkx.tests.test_lazy_imports.test_lazy_attach()
networkx.tests.test_lazy_imports.test_lazy_import_basics()
networkx.tests.test_lazy_imports.test_lazy_import_impact_on_sys_modules()
networkx.tests.test_lazy_imports.test_lazy_import_nonbuiltins()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/tests/test_exceptions.py----------------------------------------
networkx.tests.test_exceptions.test_raises_networkx_no_path()
networkx.tests.test_exceptions.test_raises_networkx_pointless_concept()
networkx.tests.test_exceptions.test_raises_networkx_unbounded()
networkx.tests.test_exceptions.test_raises_networkx_unfeasible()
networkx.tests.test_exceptions.test_raises_networkxalgorithmerr()
networkx.tests.test_exceptions.test_raises_networkxerr()
networkx.tests.test_exceptions.test_raises_networkxexception()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/layout.py----------------------------------------
A:networkx.drawing.layout.empty_graph->networkx.Graph()
A:networkx.drawing.layout.center->numpy.asarray(center)
A:networkx.drawing.layout.(G, center)->_process_params(G, center=center, dim=2)
A:networkx.drawing.layout.pos->dict(zip(nodes, pos))
A:networkx.drawing.layout.paddims->max(0, dim - 2)
A:networkx.drawing.layout.theta->theta.astype(np.float32).astype(np.float32)
A:networkx.drawing.layout.top->set(nodes)
A:networkx.drawing.layout.left_xs->numpy.repeat(0, len(top))
A:networkx.drawing.layout.right_xs->numpy.repeat(width, len(bottom))
A:networkx.drawing.layout.left_ys->numpy.linspace(0, height, len(top))
A:networkx.drawing.layout.right_ys->numpy.linspace(0, height, len(bottom))
A:networkx.drawing.layout.fixed->numpy.asarray([nfixed[node] for node in fixed if node in nfixed])
A:networkx.drawing.layout.dom_size->max((coord for pos_tup in pos.values() for coord in pos_tup))
A:networkx.drawing.layout.pos_arr[i]->numpy.asarray(pos[n])
A:networkx.drawing.layout.A->networkx.to_numpy_array(G, weight=weight)
A:networkx.drawing.layout.k->numpy.sqrt(1.0 / nnodes)
A:networkx.drawing.layout.delta->numpy.zeros((pos.shape[0], pos.shape[0], pos.shape[1]), dtype=A.dtype)
A:networkx.drawing.layout.distance->numpy.where(distance < 0.01, 0.01, distance)
A:networkx.drawing.layout.displacement->numpy.zeros((dim, nnodes))
A:networkx.drawing.layout.length->numpy.where(length < 0.01, 0.1, length)
A:networkx.drawing.layout.delta_pos->numpy.einsum('ij,i->ij', displacement, t / length)
A:networkx.drawing.layout.Ai->networkx.to_numpy_array(G, weight=weight).getrowview(i).toarray()
A:networkx.drawing.layout.nNodes->len(G)
A:networkx.drawing.layout.dist->numpy.arange(len(G), dtype=float)
A:networkx.drawing.layout.pos_arr->pos_vec.reshape((nNodes, dim))
A:networkx.drawing.layout.optresult->scipy.optimize.minimize(_kamada_kawai_costfn, pos_arr.ravel(), method='L-BFGS-B', args=costargs, jac=True)
A:networkx.drawing.layout.nodesep->numpy.linalg.norm(delta, axis=-1)
A:networkx.drawing.layout.direction->numpy.einsum('ijk,ij->ijk', delta, 1 / (nodesep + np.eye(nNodes) * 0.001))
A:networkx.drawing.layout.sumpos->numpy.sum(pos_arr, axis=0)
A:networkx.drawing.layout.(eigenvalues, eigenvectors)->scipy.sparse.linalg.eigsh(L, k, which='SM', ncv=ncv)
A:networkx.drawing.layout.D->scipy.sparse.csr_array(sp.sparse.spdiags(A.sum(axis=1), 0, nnodes, nnodes))
A:networkx.drawing.layout.ncv->max(2 * k + 1, int(np.sqrt(nnodes)))
A:networkx.drawing.layout.(is_planar, embedding)->networkx.check_planarity(G)
A:networkx.drawing.layout.node_list->list(embedding)
A:networkx.drawing.layout.layers->list(layers.items())
A:networkx.drawing.layout.width->len(layers)
A:networkx.drawing.layout.height->len(layer)
A:networkx.drawing.layout.xs->numpy.repeat(i, height)
A:networkx.drawing.layout.ys->numpy.arange(0, height, dtype=float)
A:networkx.drawing.layout.pos_tmp->networkx.random_layout(G)
A:networkx.drawing.layout.pos[node]->pos_tmp[node].copy()
A:networkx.drawing.layout.N->len(G)
A:networkx.drawing.layout.p->numpy.asarray(list(pos.values()))
A:networkx.drawing.layout.change->numpy.nansum(change, axis=0)
A:networkx.drawing.layout.error->numpy.linalg.norm(change, axis=-1).sum()
A:networkx.drawing.layout.lim->max(abs(pos[:, i]).max(), lim)
A:networkx.drawing.layout.pos_v->rescale_layout(pos_v, scale=scale)
networkx.drawing._fruchterman_reingold(A,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,dim=2,seed=None)
networkx.drawing._kamada_kawai_costfn(pos_vec,np,invdist,meanweight,dim)
networkx.drawing._kamada_kawai_solve(dist_mtx,pos_arr,dim)
networkx.drawing._process_params(G,center,dim)
networkx.drawing._sparse_fruchterman_reingold(A,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,dim=2,seed=None)
networkx.drawing._sparse_spectral(A,dim=2)
networkx.drawing._spectral(A,dim=2)
networkx.drawing.arf_layout(G,pos=None,scaling=1,a=1.1,etol=1e-06,dt=0.001,max_iter=1000)
networkx.drawing.bipartite_layout(G,nodes,align='vertical',scale=1,center=None,aspect_ratio=4/3)
networkx.drawing.circular_layout(G,scale=1,center=None,dim=2)
networkx.drawing.kamada_kawai_layout(G,dist=None,pos=None,weight='weight',scale=1,center=None,dim=2)
networkx.drawing.layout._fruchterman_reingold(A,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,dim=2,seed=None)
networkx.drawing.layout._kamada_kawai_costfn(pos_vec,np,invdist,meanweight,dim)
networkx.drawing.layout._kamada_kawai_solve(dist_mtx,pos_arr,dim)
networkx.drawing.layout._process_params(G,center,dim)
networkx.drawing.layout._sparse_fruchterman_reingold(A,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,dim=2,seed=None)
networkx.drawing.layout._sparse_spectral(A,dim=2)
networkx.drawing.layout._spectral(A,dim=2)
networkx.drawing.layout.arf_layout(G,pos=None,scaling=1,a=1.1,etol=1e-06,dt=0.001,max_iter=1000)
networkx.drawing.layout.bipartite_layout(G,nodes,align='vertical',scale=1,center=None,aspect_ratio=4/3)
networkx.drawing.layout.circular_layout(G,scale=1,center=None,dim=2)
networkx.drawing.layout.kamada_kawai_layout(G,dist=None,pos=None,weight='weight',scale=1,center=None,dim=2)
networkx.drawing.layout.multipartite_layout(G,subset_key='subset',align='vertical',scale=1,center=None)
networkx.drawing.layout.planar_layout(G,scale=1,center=None,dim=2)
networkx.drawing.layout.random_layout(G,center=None,dim=2,seed=None)
networkx.drawing.layout.rescale_layout(pos,scale=1)
networkx.drawing.layout.rescale_layout_dict(pos,scale=1)
networkx.drawing.layout.shell_layout(G,nlist=None,rotate=None,scale=1,center=None,dim=2)
networkx.drawing.layout.spectral_layout(G,weight='weight',scale=1,center=None,dim=2)
networkx.drawing.layout.spiral_layout(G,scale=1,center=None,dim=2,resolution=0.35,equidistant=False)
networkx.drawing.layout.spring_layout(G,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,weight='weight',scale=1,center=None,dim=2,seed=None)
networkx.drawing.multipartite_layout(G,subset_key='subset',align='vertical',scale=1,center=None)
networkx.drawing.planar_layout(G,scale=1,center=None,dim=2)
networkx.drawing.random_layout(G,center=None,dim=2,seed=None)
networkx.drawing.rescale_layout(pos,scale=1)
networkx.drawing.rescale_layout_dict(pos,scale=1)
networkx.drawing.shell_layout(G,nlist=None,rotate=None,scale=1,center=None,dim=2)
networkx.drawing.spectral_layout(G,weight='weight',scale=1,center=None,dim=2)
networkx.drawing.spiral_layout(G,scale=1,center=None,dim=2,resolution=0.35,equidistant=False)
networkx.drawing.spring_layout(G,k=None,pos=None,fixed=None,iterations=50,threshold=0.0001,weight='weight',scale=1,center=None,dim=2,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/nx_pydot.py----------------------------------------
A:networkx.drawing.nx_pydot.P->to_pydot(G)
A:networkx.drawing.nx_pydot.data->path.read()
A:networkx.drawing.nx_pydot.P_list->pydot.graph_from_dot_data(data)
A:networkx.drawing.nx_pydot.N->networkx.DiGraph()
A:networkx.drawing.nx_pydot.name->to_pydot(G).get_name().strip('"')
A:networkx.drawing.nx_pydot.n->str(n)
A:networkx.drawing.nx_pydot.u->e.get_source()
A:networkx.drawing.nx_pydot.v->e.get_destination()
A:networkx.drawing.nx_pydot.attr->e.get_attributes()
A:networkx.drawing.nx_pydot.pattr->to_pydot(G).get_attributes()
A:networkx.drawing.nx_pydot.graph_defaults->networkx.DiGraph().graph.get('graph', {})
A:networkx.drawing.nx_pydot.p->pydot.Node(n, **str_nodedata)
A:networkx.drawing.nx_pydot.edge->pydot.Edge(u, v, **str_edgedata)
A:networkx.drawing.nx_pydot.D_bytes->to_pydot(G).create_dot(prog=prog)
A:networkx.drawing.nx_pydot.D->str(D_bytes, encoding=getpreferredencoding())
A:networkx.drawing.nx_pydot.Q_list->pydot.graph_from_dot_data(D)
A:networkx.drawing.nx_pydot.str_n->str(n)
A:networkx.drawing.nx_pydot.pydot_node->pydot.Node(str_n).get_name()
A:networkx.drawing.nx_pydot.node->Q.get_node(pydot_node)
A:networkx.drawing.nx_pydot.(xx, yy)->pos.split(',')
networkx.drawing.nx_pydot._check_colon_quotes(s)
networkx.drawing.nx_pydot.from_pydot(P)
networkx.drawing.nx_pydot.graphviz_layout(G,prog='neato',root=None)
networkx.drawing.nx_pydot.pydot_layout(G,prog='neato',root=None)
networkx.drawing.nx_pydot.read_dot(path)
networkx.drawing.nx_pydot.to_pydot(N)
networkx.drawing.nx_pydot.write_dot(G,path)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/nx_agraph.py----------------------------------------
A:networkx.drawing.nx_agraph.N->networkx.empty_graph(0, create_using)
A:networkx.drawing.nx_agraph.attr->dict(e.attr)
A:networkx.drawing.nx_agraph.N.graph['graph']->dict(A.graph_attr)
A:networkx.drawing.nx_agraph.N.graph['node']->dict(A.node_attr)
A:networkx.drawing.nx_agraph.N.graph['edge']->dict(A.edge_attr)
A:networkx.drawing.nx_agraph.directed->networkx.empty_graph(0, create_using).is_directed()
A:networkx.drawing.nx_agraph.A->to_agraph(G)
A:networkx.drawing.nx_agraph.a->to_agraph(G).get_edge(u, v)
A:networkx.drawing.nx_agraph.gr->from_agraph(A)
A:networkx.drawing.nx_agraph.node->pygraphviz.Node(A, n)
A:networkx.drawing.nx_agraph.xs->pygraphviz.Node(A, n).attr['pos'].split(',')
A:networkx.drawing.nx_agraph.node_pos[n]->tuple((float(x) for x in xs))
A:networkx.drawing.nx_agraph.edge->to_agraph(G).get_edge(u, v)
A:networkx.drawing.nx_agraph.edge.attr['label']->str(func(data))
A:networkx.drawing.nx_agraph.path->tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
networkx.drawing.nx_agraph.from_agraph(A,create_using=None)
networkx.drawing.nx_agraph.graphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.pygraphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.read_dot(path)
networkx.drawing.nx_agraph.to_agraph(N)
networkx.drawing.nx_agraph.view_pygraphviz(G,edgelabel=None,prog='dot',args='',suffix='',path=None,show=True)
networkx.drawing.nx_agraph.write_dot(G,path)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/nx_pylab.py----------------------------------------
A:networkx.drawing.nx_pylab.cf->matplotlib.pyplot.gca().get_figure()
A:networkx.drawing.nx_pylab.ax->matplotlib.pyplot.gca()
A:networkx.drawing.nx_pylab.valid_node_kwds->signature(draw_networkx_nodes).parameters.keys()
A:networkx.drawing.nx_pylab.valid_edge_kwds->signature(draw_networkx_edges).parameters.keys()
A:networkx.drawing.nx_pylab.valid_label_kwds->signature(draw_networkx_labels).parameters.keys()
A:networkx.drawing.nx_pylab.invalid_args->', '.join([k for k in kwds if k not in valid_kwds])
A:networkx.drawing.nx_pylab.pos->networkx.drawing.spring_layout(G)
A:networkx.drawing.nx_pylab.nodelist->list(G.nodes())
A:networkx.drawing.nx_pylab.xy->numpy.array((x, y))
A:networkx.drawing.nx_pylab.node_color->apply_alpha(node_color, alpha, nodelist, cmap, vmin, vmax)
A:networkx.drawing.nx_pylab.node_collection->matplotlib.pyplot.gca().scatter(xy[:, 0], xy[:, 1], s=node_size, c=node_color, marker=node_shape, cmap=cmap, vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths, edgecolors=edgecolors, label=label)
A:networkx.drawing.nx_pylab.msg->msg.format('min_target_margin').format('min_target_margin')
A:networkx.drawing.nx_pylab.edgelist->list(G.edges())
A:networkx.drawing.nx_pylab.edgelist_tuple->list(map(tuple, edgelist))
A:networkx.drawing.nx_pylab.edge_pos->numpy.asarray([(pos[e[0]], pos[e[1]]) for e in selfloops_to_draw])
A:networkx.drawing.nx_pylab.edge_cmap->matplotlib.pyplot.get_cmap()
A:networkx.drawing.nx_pylab.edge_vmin->min(edge_color)
A:networkx.drawing.nx_pylab.edge_vmax->max(edge_color)
A:networkx.drawing.nx_pylab.color_normal->matplotlib.colors.Normalize(vmin=edge_vmin, vmax=edge_vmax)
A:networkx.drawing.nx_pylab.edge_collection->matplotlib.collections.LineCollection(edge_pos, colors=edge_color, linewidths=width, antialiaseds=(1,), linestyle=style, alpha=alpha)
A:networkx.drawing.nx_pylab.base_connection_style->matplotlib.patches.ConnectionStyle(connectionstyle)
A:networkx.drawing.nx_pylab.max_nodesize->numpy.array(node_size).max()
A:networkx.drawing.nx_pylab.data_loc->matplotlib.pyplot.gca().transData.inverted().transform(posA)
A:networkx.drawing.nx_pylab.ret->base_connection_style(posA, posB, *args, **kwargs)
A:networkx.drawing.nx_pylab.arrow_colors->matplotlib.colors.colorConverter.to_rgba_array(edge_color, alpha)
A:networkx.drawing.nx_pylab.shrink_source->to_marker_edge(source_node_size, node_shape)
A:networkx.drawing.nx_pylab.shrink_target->to_marker_edge(target_node_size, node_shape)
A:networkx.drawing.nx_pylab.shrink_sourceshrink_target->to_marker_edge(node_size, node_shape)
A:networkx.drawing.nx_pylab.arrow->matplotlib.patches.FancyArrowPatch((x1, y1), (x2, y2), arrowstyle=arrowstyle, shrinkA=shrink_source, shrinkB=shrink_target, mutation_scale=mutation_scale, color=arrow_color, linewidth=line_width, connectionstyle=_connectionstyle, linestyle=linestyle, zorder=1)
A:networkx.drawing.nx_pylab.minx->numpy.amin(np.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.maxx->numpy.amax(np.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.miny->numpy.amin(np.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.maxy->numpy.amax(np.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.edge_viz_obj->_draw_networkx_edges_fancy_arrow_patch()
A:networkx.drawing.nx_pylab.fancy_edges_indices->range(len(edgelist))
A:networkx.drawing.nx_pylab.label->str(label)
A:networkx.drawing.nx_pylab.t->matplotlib.pyplot.gca().text(x, y, label, size=font_size, color=font_color, family=font_family, weight=font_weight, alpha=alpha, horizontalalignment=horizontalalignment, verticalalignment=verticalalignment, rotation=trans_angle, transform=ax.transData, bbox=bbox, zorder=1, clip_on=clip_on)
A:networkx.drawing.nx_pylab.(u, v)->next(iter(labels))
A:networkx.drawing.nx_pylab.bbox->dict(boxstyle='round', ec=(1.0, 1.0, 1.0), fc=(1.0, 1.0, 1.0))
A:networkx.drawing.nx_pylab.mapper->matplotlib.cm.ScalarMappable(cmap=cmap)
A:networkx.drawing.nx_pylab.rgba_colors->numpy.resize(rgba_colors, (len(elem_list), 4))
A:networkx.drawing.nx_pylab.rgba_colors[:, 3]->list(islice(cycle(alpha), len(rgba_colors)))
networkx.drawing.apply_alpha(colors,alpha,elem_list,cmap=None,vmin=None,vmax=None)
networkx.drawing.draw(G,pos=None,ax=None,**kwds)
networkx.drawing.draw_circular(G,**kwargs)
networkx.drawing.draw_kamada_kawai(G,**kwargs)
networkx.drawing.draw_networkx(G,pos=None,arrows=None,with_labels=True,**kwds)
networkx.drawing.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=None,bbox=None,horizontalalignment='center',verticalalignment='center',ax=None,rotate=True,clip_on=True)
networkx.drawing.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=None,arrowstyle=None,arrowsize=10,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=None,label=None,node_size=300,nodelist=None,node_shape='o',connectionstyle='arc3',min_source_margin=0,min_target_margin=0)
networkx.drawing.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=None,bbox=None,horizontalalignment='center',verticalalignment='center',ax=None,clip_on=True)
networkx.drawing.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='#1f78b4',node_shape='o',alpha=None,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,edgecolors=None,label=None,margins=None)
networkx.drawing.draw_planar(G,**kwargs)
networkx.drawing.draw_random(G,**kwargs)
networkx.drawing.draw_shell(G,nlist=None,**kwargs)
networkx.drawing.draw_spectral(G,**kwargs)
networkx.drawing.draw_spring(G,**kwargs)
networkx.drawing.nx_pylab.apply_alpha(colors,alpha,elem_list,cmap=None,vmin=None,vmax=None)
networkx.drawing.nx_pylab.draw(G,pos=None,ax=None,**kwds)
networkx.drawing.nx_pylab.draw_circular(G,**kwargs)
networkx.drawing.nx_pylab.draw_kamada_kawai(G,**kwargs)
networkx.drawing.nx_pylab.draw_networkx(G,pos=None,arrows=None,with_labels=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=None,bbox=None,horizontalalignment='center',verticalalignment='center',ax=None,rotate=True,clip_on=True)
networkx.drawing.nx_pylab.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=None,arrowstyle=None,arrowsize=10,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=None,label=None,node_size=300,nodelist=None,node_shape='o',connectionstyle='arc3',min_source_margin=0,min_target_margin=0)
networkx.drawing.nx_pylab.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=None,bbox=None,horizontalalignment='center',verticalalignment='center',ax=None,clip_on=True)
networkx.drawing.nx_pylab.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='#1f78b4',node_shape='o',alpha=None,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,edgecolors=None,label=None,margins=None)
networkx.drawing.nx_pylab.draw_planar(G,**kwargs)
networkx.drawing.nx_pylab.draw_random(G,**kwargs)
networkx.drawing.nx_pylab.draw_shell(G,nlist=None,**kwargs)
networkx.drawing.nx_pylab.draw_spectral(G,**kwargs)
networkx.drawing.nx_pylab.draw_spring(G,**kwargs)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/tests/test_agraph.py----------------------------------------
A:networkx.drawing.tests.test_agraph.pygraphviz->pytest.importorskip('pygraphviz')
A:networkx.drawing.tests.test_agraph.G->self.build_graph(G)
A:networkx.drawing.tests.test_agraph.A->networkx.nx_agraph.to_agraph(G)
A:networkx.drawing.tests.test_agraph.H->networkx.nx_agraph.from_agraph(A)
A:networkx.drawing.tests.test_agraph.(fd, fname)->tempfile.mkstemp()
A:networkx.drawing.tests.test_agraph.Hin->networkx.nx_agraph.read_dot(fh)
A:networkx.drawing.tests.test_agraph.input_path->str(tmp_path / 'graph.png')
A:networkx.drawing.tests.test_agraph.(out_path, A)->networkx.nx_agraph.view_pygraphviz(G, path=input_path, show=False)
A:networkx.drawing.tests.test_agraph.data->fh.read()
A:networkx.drawing.tests.test_agraph.(path, A)->networkx.nx_agraph.view_pygraphviz(G, show=False)
A:networkx.drawing.tests.test_agraph.edges->networkx.nx_agraph.to_agraph(G).edges()
A:networkx.drawing.tests.test_agraph.AA->networkx.nx_agraph.to_agraph(H)
A:networkx.drawing.tests.test_agraph.HH->networkx.nx_agraph.from_agraph(AA)
A:networkx.drawing.tests.test_agraph.pos_graphviz->networkx.nx_agraph.graphviz_layout(G)
A:networkx.drawing.tests.test_agraph.pos_pygraphviz->networkx.nx_agraph.pygraphviz_layout(G)
A:networkx.drawing.tests.test_agraph.pygv_layout->networkx.nx_agraph.pygraphviz_layout(G, prog='circo', root=root)
A:networkx.drawing.tests.test_agraph.a1_pos->tuple((float(v) for v in dict(A.get_node('1').attr)['pos'].split(',')))
A:networkx.drawing.tests.test_agraph.pos->list(pos.values())
networkx.drawing.tests.test_agraph.TestAGraph
networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.assert_equal(self,G1,G2)
networkx.drawing.tests.test_agraph.TestAGraph.build_graph(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.test_2d_layout(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_3d_layout(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_directed(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_create_using(self,graph_class)
networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_name(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_named_edges(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_AGraph_attrs(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_graph_with_reserved_keywords(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_graphviz_alias(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_multi_directed(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_multi_undirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_pygraphviz_layout_root(self,root)
networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_empty_graph(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_round_trip_integer_nodes(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_edgedata(self,graph_class)
networkx.drawing.tests.test_agraph.TestAGraph.test_to_agraph_with_nodedata(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_undirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_callable_edgelabel(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_edgelabel(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_file_suffix(self,tmp_path)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_leaves_input_graph_unmodified(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_multigraph_edgelabels(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_no_added_attrs_to_input(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_view_pygraphviz_path(self,tmp_path)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/tests/test_layout.py----------------------------------------
A:networkx.drawing.tests.test_layout.np->pytest.importorskip('numpy')
A:networkx.drawing.tests.test_layout.cls.Gi->networkx.grid_2d_graph(5, 5)
A:networkx.drawing.tests.test_layout.cls.Gs->networkx.Graph()
A:networkx.drawing.tests.test_layout.cls.bigG->networkx.grid_2d_graph(25, 25)
A:networkx.drawing.tests.test_layout.G->networkx.Graph()
A:networkx.drawing.tests.test_layout.pos->networkx.multipartite_layout(G, align='horizontal')
A:networkx.drawing.tests.test_layout.has_nan->any((math.isnan(c) for coords in pos.values() for c in coords))
A:networkx.drawing.tests.test_layout.center->pytest.importorskip('numpy').array(center)
A:networkx.drawing.tests.test_layout.vpos->networkx.random_layout(G, center=(1, 1))
A:networkx.drawing.tests.test_layout.embedding->networkx.PlanarEmbedding()
A:networkx.drawing.tests.test_layout.A->networkx.to_scipy_sparse_array(self.Gs, dtype='d')
A:networkx.drawing.tests.test_layout.npos->networkx.spring_layout(self.bigG, pos=pos, fixed=[(0, 0)])
A:networkx.drawing.tests.test_layout.(top, bottom)->networkx.bipartite.sets(G)
A:networkx.drawing.tests.test_layout.(cost, grad)->costfn(pos.ravel(), np, invdist, meanweight=meanwt, dim=dim)
A:networkx.drawing.tests.test_layout.diff->pytest.importorskip('numpy').linalg.norm(pos[i] - pos[j])
A:networkx.drawing.tests.test_layout.ps->networkx.multipartite_layout(G, align='horizontal').flatten()
A:networkx.drawing.tests.test_layout.pos_standard->pytest.importorskip('numpy').array(list(nx.spiral_layout(G, resolution=0.35).values()))
A:networkx.drawing.tests.test_layout.pos_tighter->pytest.importorskip('numpy').array(list(nx.spiral_layout(G, resolution=0.34).values()))
A:networkx.drawing.tests.test_layout.distances->pytest.importorskip('numpy').linalg.norm(pos_standard[:-1] - pos_standard[1:], axis=1)
A:networkx.drawing.tests.test_layout.distances_tighter->pytest.importorskip('numpy').linalg.norm(pos_tighter[:-1] - pos_tighter[1:], axis=1)
A:networkx.drawing.tests.test_layout.pos_equidistant->pytest.importorskip('numpy').array(list(nx.spiral_layout(G, equidistant=True).values()))
A:networkx.drawing.tests.test_layout.distances_equidistant->pytest.importorskip('numpy').linalg.norm(pos_equidistant[:-1] - pos_equidistant[1:], axis=1)
A:networkx.drawing.tests.test_layout.p->pytest.importorskip('numpy').array(list(pos.values()))
A:networkx.drawing.tests.test_layout.dist->pytest.importorskip('numpy').linalg.norm(p[1:] - p[:-1], axis=1)
A:networkx.drawing.tests.test_layout.s_vpos->networkx.rescale_layout_dict(vpos, scale=2)
A:networkx.drawing.tests.test_layout.node->networkx.utils.arbitrary_element(G)
A:networkx.drawing.tests.test_layout.pos_nosort->networkx.multipartite_layout(G)
networkx.drawing.tests.test_TestLayout
networkx.drawing.tests.test_TestLayout.check_kamada_kawai_costfn(self,pos,invdist,meanwt,dim)
networkx.drawing.tests.test_TestLayout.check_scale_and_center(self,pos,scale,center)
networkx.drawing.tests.test_TestLayout.setup_class(cls)
networkx.drawing.tests.test_TestLayout.test_adjacency_interface_numpy(self)
networkx.drawing.tests.test_TestLayout.test_adjacency_interface_scipy(self)
networkx.drawing.tests.test_TestLayout.test_arf_layout_negative_a_check(self)
networkx.drawing.tests.test_TestLayout.test_arf_layout_partial_input_test(self)
networkx.drawing.tests.test_TestLayout.test_bipartite_layout(self)
networkx.drawing.tests.test_TestLayout.test_center_parameter(self)
networkx.drawing.tests.test_TestLayout.test_center_wrong_dimensions(self)
networkx.drawing.tests.test_TestLayout.test_circular_planar_and_shell_dim_error(self)
networkx.drawing.tests.test_TestLayout.test_default_scale_and_center(self)
networkx.drawing.tests.test_TestLayout.test_empty_graph(self)
networkx.drawing.tests.test_TestLayout.test_fixed_node_fruchterman_reingold(self)
networkx.drawing.tests.test_TestLayout.test_kamada_kawai_costfn(self)
networkx.drawing.tests.test_TestLayout.test_kamada_kawai_costfn_1d(self)
networkx.drawing.tests.test_TestLayout.test_multipartite_layout(self)
networkx.drawing.tests.test_TestLayout.test_planar_layout_non_planar_input(self)
networkx.drawing.tests.test_TestLayout.test_rescale_layout_dict(self)
networkx.drawing.tests.test_TestLayout.test_scale_and_center_arg(self)
networkx.drawing.tests.test_TestLayout.test_single_nodes(self)
networkx.drawing.tests.test_TestLayout.test_smoke_empty_graph(self)
networkx.drawing.tests.test_TestLayout.test_smoke_initial_pos_arf(self)
networkx.drawing.tests.test_TestLayout.test_smoke_initial_pos_fruchterman_reingold(self)
networkx.drawing.tests.test_TestLayout.test_smoke_int(self)
networkx.drawing.tests.test_TestLayout.test_smoke_planar_layout_embedding_input(self)
networkx.drawing.tests.test_TestLayout.test_smoke_string(self)
networkx.drawing.tests.test_TestLayout.test_spiral_layout(self)
networkx.drawing.tests.test_TestLayout.test_spiral_layout_equidistant(self)
networkx.drawing.tests.test_TestLayout.test_spring_fixed_without_pos(self)
networkx.drawing.tests.test_TestLayout.test_spring_init_pos(self)
networkx.drawing.tests.test_layout.TestLayout
networkx.drawing.tests.test_layout.TestLayout.check_kamada_kawai_costfn(self,pos,invdist,meanwt,dim)
networkx.drawing.tests.test_layout.TestLayout.check_scale_and_center(self,pos,scale,center)
networkx.drawing.tests.test_layout.TestLayout.setup_class(cls)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy(self)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy(self)
networkx.drawing.tests.test_layout.TestLayout.test_arf_layout_negative_a_check(self)
networkx.drawing.tests.test_layout.TestLayout.test_arf_layout_partial_input_test(self)
networkx.drawing.tests.test_layout.TestLayout.test_bipartite_layout(self)
networkx.drawing.tests.test_layout.TestLayout.test_center_parameter(self)
networkx.drawing.tests.test_layout.TestLayout.test_center_wrong_dimensions(self)
networkx.drawing.tests.test_layout.TestLayout.test_circular_planar_and_shell_dim_error(self)
networkx.drawing.tests.test_layout.TestLayout.test_default_scale_and_center(self)
networkx.drawing.tests.test_layout.TestLayout.test_empty_graph(self)
networkx.drawing.tests.test_layout.TestLayout.test_fixed_node_fruchterman_reingold(self)
networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn(self)
networkx.drawing.tests.test_layout.TestLayout.test_kamada_kawai_costfn_1d(self)
networkx.drawing.tests.test_layout.TestLayout.test_multipartite_layout(self)
networkx.drawing.tests.test_layout.TestLayout.test_planar_layout_non_planar_input(self)
networkx.drawing.tests.test_layout.TestLayout.test_rescale_layout_dict(self)
networkx.drawing.tests.test_layout.TestLayout.test_scale_and_center_arg(self)
networkx.drawing.tests.test_layout.TestLayout.test_single_nodes(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_empty_graph(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_initial_pos_arf(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_initial_pos_fruchterman_reingold(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_int(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_planar_layout_embedding_input(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_string(self)
networkx.drawing.tests.test_layout.TestLayout.test_spiral_layout(self)
networkx.drawing.tests.test_layout.TestLayout.test_spiral_layout_equidistant(self)
networkx.drawing.tests.test_layout.TestLayout.test_spring_fixed_without_pos(self)
networkx.drawing.tests.test_layout.TestLayout.test_spring_init_pos(self)
networkx.drawing.tests.test_layout.test_multipartite_layout_layer_order()
networkx.drawing.tests.test_layout.test_multipartite_layout_nonnumeric_partition_labels()
networkx.drawing.tests.test_test_multipartite_layout_layer_order()
networkx.drawing.tests.test_test_multipartite_layout_nonnumeric_partition_labels()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/tests/test_pylab.py----------------------------------------
A:networkx.drawing.tests.test_pylab.mpl->pytest.importorskip('matplotlib')
A:networkx.drawing.tests.test_pylab.np->pytest.importorskip('numpy')
A:networkx.drawing.tests.test_pylab.plt->pytest.importorskip('matplotlib.pyplot')
A:networkx.drawing.tests.test_pylab.barbell->networkx.barbell_graph(4, 6)
A:networkx.drawing.tests.test_pylab.colors->range(num_nodes)
A:networkx.drawing.tests.test_pylab.G->networkx.path_graph(3)
A:networkx.drawing.tests.test_pylab.drawn_edges->networkx.draw_networkx_edges(G, pos, style=style_seq)
A:networkx.drawing.tests.test_pylab.pos->networkx.random_layout(barbell)
A:networkx.drawing.tests.test_pylab.edge_collection->networkx.draw_networkx_edges(barbell, pos=nx.random_layout(barbell), edgelist=[(0, 1), (1, 2)], edge_color='purple', alpha=0.2)
A:networkx.drawing.tests.test_pylab.ec->fap.get_edgecolor()
A:networkx.drawing.tests.test_pylab.(fig, ax)->pytest.importorskip('matplotlib.pyplot').subplots()
A:networkx.drawing.tests.test_pylab.DG->networkx.path_graph(3, create_using=nx.DiGraph)
A:networkx.drawing.tests.test_pylab.fig->pytest.importorskip('matplotlib.pyplot').figure()
A:networkx.drawing.tests.test_pylab.num_nodes->len(barbell.nodes)
A:networkx.drawing.tests.test_pylab.edges->networkx.draw_networkx_edges(DG, pos)
A:networkx.drawing.tests.test_pylab.bbox->patch.get_extents()
A:networkx.drawing.tests.test_pylab.rgba_colors->networkx.drawing.nx_pylab.apply_alpha(colorlist, alpha, nodelist)
A:networkx.drawing.tests.test_pylab.UG->networkx.path_graph(3)
A:networkx.drawing.tests.test_pylab.edge_labels->networkx.get_edge_attributes(G, 'weight')
networkx.drawing.tests.test_pylab.test_alpha_iter()
networkx.drawing.tests.test_pylab.test_apply_alpha()
networkx.drawing.tests.test_pylab.test_arrows()
networkx.drawing.tests.test_pylab.test_axes()
networkx.drawing.tests.test_pylab.test_directed_edges_linestyle_default()
networkx.drawing.tests.test_pylab.test_directed_edges_linestyle_sequence(style_seq)
networkx.drawing.tests.test_pylab.test_directed_edges_linestyle_single_value(style)
networkx.drawing.tests.test_pylab.test_draw()
networkx.drawing.tests.test_pylab.test_draw_edges_arrowsize(arrowsize)
networkx.drawing.tests.test_pylab.test_draw_edges_min_source_target_margins(node_shape)
networkx.drawing.tests.test_pylab.test_draw_edges_toggling_with_arrows_kwarg()
networkx.drawing.tests.test_pylab.test_draw_empty_nodes_return_values()
networkx.drawing.tests.test_pylab.test_draw_networkx_arrows_default_directed(drawing_func)
networkx.drawing.tests.test_pylab.test_draw_networkx_arrows_default_undirected(drawing_func)
networkx.drawing.tests.test_pylab.test_draw_networkx_arrowsize_incorrect_size()
networkx.drawing.tests.test_pylab.test_draw_networkx_edge_label_empty_dict()
networkx.drawing.tests.test_pylab.test_draw_networkx_edge_label_multiedge_exception()
networkx.drawing.tests.test_pylab.test_draw_networkx_edges_undirected_selfloop_colors()
networkx.drawing.tests.test_pylab.test_draw_nodes_missing_node_from_position()
networkx.drawing.tests.test_pylab.test_draw_shell_nlist()
networkx.drawing.tests.test_pylab.test_edge_color_string_with_gloabl_alpha_undirected()
networkx.drawing.tests.test_pylab.test_edge_color_string_with_global_alpha_directed()
networkx.drawing.tests.test_pylab.test_edge_color_tuple_interpretation()
networkx.drawing.tests.test_pylab.test_edge_color_with_edge_vmin_vmax()
networkx.drawing.tests.test_pylab.test_edge_colormap()
networkx.drawing.tests.test_pylab.test_edge_width_default_value(graph_type)
networkx.drawing.tests.test_pylab.test_edge_width_sequence(edgelist)
networkx.drawing.tests.test_pylab.test_edge_width_single_value_directed(edgewidth,expected)
networkx.drawing.tests.test_pylab.test_edge_width_single_value_undirected(edgewidth,expected)
networkx.drawing.tests.test_pylab.test_edgelist_kwarg_not_ignored()
networkx.drawing.tests.test_pylab.test_empty_graph()
networkx.drawing.tests.test_pylab.test_error_invalid_kwds()
networkx.drawing.tests.test_pylab.test_fewer_edge_colors_than_num_edges_directed()
networkx.drawing.tests.test_pylab.test_house_with_colors()
networkx.drawing.tests.test_pylab.test_labels_and_colors()
networkx.drawing.tests.test_pylab.test_more_edge_colors_than_num_edges_directed()
networkx.drawing.tests.test_pylab.test_multigraph_edgelist_tuples()
networkx.drawing.tests.test_pylab.test_nonzero_selfloop_with_single_edge_in_edgelist()
networkx.drawing.tests.test_pylab.test_nonzero_selfloop_with_single_node()
networkx.drawing.tests.test_pylab.test_np_edgelist()
networkx.drawing.tests.test_pylab.test_single_edge_color_directed(edge_color,expected,edgelist)
networkx.drawing.tests.test_pylab.test_single_edge_color_undirected(edge_color,expected,edgelist)
networkx.drawing.tests.test_pylab.test_user_warnings_for_unused_edge_drawing_kwargs(fap_only_kwarg)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/drawing/tests/test_pydot.py----------------------------------------
A:networkx.drawing.tests.test_pydot.pydot->pytest.importorskip('pydot')
A:networkx.drawing.tests.test_pydot.graph_layout->networkx.nx_pydot.pydot_layout(G, prog='dot')
A:networkx.drawing.tests.test_pydot.P->networkx.nx_pydot.to_pydot(G)
A:networkx.drawing.tests.test_pydot.G2->networkx.Graph().__class__(nx.nx_pydot.from_pydot(P))
A:networkx.drawing.tests.test_pydot.(fd, fname)->tempfile.mkstemp()
A:networkx.drawing.tests.test_pydot.Pin_list->pytest.importorskip('pydot').graph_from_dot_file(path=fname, encoding='utf-8')
A:networkx.drawing.tests.test_pydot.n1->sorted((p.get_name() for p in P.get_node_list()))
A:networkx.drawing.tests.test_pydot.n2->sorted((p.get_name() for p in Pin.get_node_list()))
A:networkx.drawing.tests.test_pydot.e1->sorted(((e.get_source(), e.get_destination()) for e in P.get_edge_list()))
A:networkx.drawing.tests.test_pydot.e2->sorted(((e.get_source(), e.get_destination()) for e in Pin.get_edge_list()))
A:networkx.drawing.tests.test_pydot.Hin->networkx.Graph().__class__(Hin)
A:networkx.drawing.tests.test_pydot.G->networkx.Graph()
A:networkx.drawing.tests.test_pydot.fh->StringIO()
A:networkx.drawing.tests.test_pydot.H->networkx.nx_pydot.read_dot(fh)
A:networkx.drawing.tests.test_pydot.layout->networkx.nx_pydot.pydot_layout(G)
networkx.drawing.tests.test_pydot.TestPydot
networkx.drawing.tests.test_pydot.TestPydot.pydot_checks(self,G,prog)
networkx.drawing.tests.test_pydot.TestPydot.test_directed(self)
networkx.drawing.tests.test_pydot.TestPydot.test_read_write(self)
networkx.drawing.tests.test_pydot.TestPydot.test_undirected(self)
networkx.drawing.tests.test_pydot.test_hashable_pydot(graph_type)
networkx.drawing.tests.test_pydot.test_pydot_issue_258()
networkx.drawing.tests.test_pydot.test_pydot_numrical_name()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/multidigraph.py----------------------------------------
A:networkx.classes.multidigraph.self._succ[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.multidigraph.self._pred[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.multidigraph.self._node[u]->self.node_attr_dict_factory()
A:networkx.classes.multidigraph.self._succ[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.multidigraph.self._pred[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.multidigraph.self._node[v]->self.node_attr_dict_factory()
A:networkx.classes.multidigraph.key->self.new_edge_key(u, v)
A:networkx.classes.multidigraph.datadict->self.edge_attr_dict_factory()
A:networkx.classes.multidigraph.keydict->self.edge_key_dict_factory()
A:networkx.classes.multidigraph.graph_class->self.to_undirected_class()
A:networkx.classes.multidigraph.G->graph_class()
A:networkx.classes.multidigraph.H->self.__class__()
networkx.classes.MultiDiGraph(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.MultiDiGraph.add_edge(self,u_for_edge,v_for_edge,key=None,**attr)
networkx.classes.MultiDiGraph.adj(self)
networkx.classes.MultiDiGraph.degree(self)
networkx.classes.MultiDiGraph.edges(self)
networkx.classes.MultiDiGraph.in_degree(self)
networkx.classes.MultiDiGraph.in_edges(self)
networkx.classes.MultiDiGraph.is_directed(self)
networkx.classes.MultiDiGraph.is_multigraph(self)
networkx.classes.MultiDiGraph.out_degree(self)
networkx.classes.MultiDiGraph.out_edges(self)
networkx.classes.MultiDiGraph.pred(self)
networkx.classes.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.classes.MultiDiGraph.reverse(self,copy=True)
networkx.classes.MultiDiGraph.succ(self)
networkx.classes.MultiDiGraph.to_undirected(self,reciprocal=False,as_view=False)
networkx.classes.multidigraph.MultiDiGraph(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.__init__(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.add_edge(self,u_for_edge,v_for_edge,key=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.adj(self)
networkx.classes.multidigraph.MultiDiGraph.degree(self)
networkx.classes.multidigraph.MultiDiGraph.edges(self)
networkx.classes.multidigraph.MultiDiGraph.in_degree(self)
networkx.classes.multidigraph.MultiDiGraph.in_edges(self)
networkx.classes.multidigraph.MultiDiGraph.is_directed(self)
networkx.classes.multidigraph.MultiDiGraph.is_multigraph(self)
networkx.classes.multidigraph.MultiDiGraph.out_degree(self)
networkx.classes.multidigraph.MultiDiGraph.out_edges(self)
networkx.classes.multidigraph.MultiDiGraph.pred(self)
networkx.classes.multidigraph.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multidigraph.MultiDiGraph.reverse(self,copy=True)
networkx.classes.multidigraph.MultiDiGraph.succ(self)
networkx.classes.multidigraph.MultiDiGraph.to_undirected(self,reciprocal=False,as_view=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/reportviews.py----------------------------------------
A:networkx.classes.reportviews.deg->sum((d.get(weight, 1) for key_dict in nbrs.values() for d in key_dict.values()))
A:networkx.classes.reportviews.nbunch->dict.fromkeys(viewer._graph.nbunch_iter(nbunch))
A:networkx.classes.reportviews.N->len(e)
networkx.classes.reportviews.DegreeView(DiDegreeView)
networkx.classes.reportviews.DegreeView.__getitem__(self,n)
networkx.classes.reportviews.DegreeView.__iter__(self)
networkx.classes.reportviews.DiDegreeView(self,G,nbunch=None,weight=None)
networkx.classes.reportviews.DiDegreeView.__getitem__(self,n)
networkx.classes.reportviews.DiDegreeView.__init__(self,G,nbunch=None,weight=None)
networkx.classes.reportviews.DiDegreeView.__iter__(self)
networkx.classes.reportviews.DiDegreeView.__len__(self)
networkx.classes.reportviews.DiDegreeView.__repr__(self)
networkx.classes.reportviews.DiDegreeView.__str__(self)
networkx.classes.reportviews.DiMultiDegreeView(DiDegreeView)
networkx.classes.reportviews.DiMultiDegreeView.__getitem__(self,n)
networkx.classes.reportviews.DiMultiDegreeView.__iter__(self)
networkx.classes.reportviews.EdgeDataView(OutEdgeDataView)
networkx.classes.reportviews.EdgeDataView.__contains__(self,e)
networkx.classes.reportviews.EdgeDataView.__iter__(self)
networkx.classes.reportviews.EdgeDataView.__len__(self)
networkx.classes.reportviews.EdgeView(OutEdgeView)
networkx.classes.reportviews.EdgeView.__contains__(self,e)
networkx.classes.reportviews.EdgeView.__iter__(self)
networkx.classes.reportviews.EdgeView.__len__(self)
networkx.classes.reportviews.InDegreeView(DiDegreeView)
networkx.classes.reportviews.InDegreeView.__getitem__(self,n)
networkx.classes.reportviews.InDegreeView.__iter__(self)
networkx.classes.reportviews.InEdgeDataView(OutEdgeDataView)
networkx.classes.reportviews.InEdgeDataView.__contains__(self,e)
networkx.classes.reportviews.InEdgeDataView.__iter__(self)
networkx.classes.reportviews.InEdgeView(self,G)
networkx.classes.reportviews.InEdgeView.__contains__(self,e)
networkx.classes.reportviews.InEdgeView.__getitem__(self,e)
networkx.classes.reportviews.InEdgeView.__init__(self,G)
networkx.classes.reportviews.InEdgeView.__iter__(self)
networkx.classes.reportviews.InEdgeView.__setstate__(self,state)
networkx.classes.reportviews.InMultiDegreeView(DiDegreeView)
networkx.classes.reportviews.InMultiDegreeView.__getitem__(self,n)
networkx.classes.reportviews.InMultiDegreeView.__iter__(self)
networkx.classes.reportviews.InMultiEdgeDataView(OutMultiEdgeDataView)
networkx.classes.reportviews.InMultiEdgeDataView.__contains__(self,e)
networkx.classes.reportviews.InMultiEdgeDataView.__iter__(self)
networkx.classes.reportviews.InMultiEdgeView(self,G)
networkx.classes.reportviews.InMultiEdgeView.__contains__(self,e)
networkx.classes.reportviews.InMultiEdgeView.__getitem__(self,e)
networkx.classes.reportviews.InMultiEdgeView.__init__(self,G)
networkx.classes.reportviews.InMultiEdgeView.__iter__(self)
networkx.classes.reportviews.InMultiEdgeView.__setstate__(self,state)
networkx.classes.reportviews.MultiDegreeView(DiDegreeView)
networkx.classes.reportviews.MultiDegreeView.__getitem__(self,n)
networkx.classes.reportviews.MultiDegreeView.__iter__(self)
networkx.classes.reportviews.MultiEdgeDataView(OutMultiEdgeDataView)
networkx.classes.reportviews.MultiEdgeDataView.__contains__(self,e)
networkx.classes.reportviews.MultiEdgeDataView.__iter__(self)
networkx.classes.reportviews.MultiEdgeView(OutMultiEdgeView)
networkx.classes.reportviews.MultiEdgeView.__iter__(self)
networkx.classes.reportviews.MultiEdgeView.__len__(self)
networkx.classes.reportviews.NodeDataView(self,nodedict,data=False,default=None)
networkx.classes.reportviews.NodeDataView.__contains__(self,n)
networkx.classes.reportviews.NodeDataView.__getitem__(self,n)
networkx.classes.reportviews.NodeDataView.__getstate__(self)
networkx.classes.reportviews.NodeDataView.__init__(self,nodedict,data=False,default=None)
networkx.classes.reportviews.NodeDataView.__iter__(self)
networkx.classes.reportviews.NodeDataView.__len__(self)
networkx.classes.reportviews.NodeDataView.__repr__(self)
networkx.classes.reportviews.NodeDataView.__setstate__(self,state)
networkx.classes.reportviews.NodeDataView.__str__(self)
networkx.classes.reportviews.NodeDataView._from_iterable(cls,it)
networkx.classes.reportviews.NodeView(self,graph)
networkx.classes.reportviews.NodeView.__contains__(self,n)
networkx.classes.reportviews.NodeView.__getitem__(self,n)
networkx.classes.reportviews.NodeView.__getstate__(self)
networkx.classes.reportviews.NodeView.__init__(self,graph)
networkx.classes.reportviews.NodeView.__iter__(self)
networkx.classes.reportviews.NodeView.__len__(self)
networkx.classes.reportviews.NodeView.__repr__(self)
networkx.classes.reportviews.NodeView.__setstate__(self,state)
networkx.classes.reportviews.NodeView.__str__(self)
networkx.classes.reportviews.NodeView._from_iterable(cls,it)
networkx.classes.reportviews.NodeView.data(self,data=True,default=None)
networkx.classes.reportviews.OutDegreeView(DiDegreeView)
networkx.classes.reportviews.OutDegreeView.__getitem__(self,n)
networkx.classes.reportviews.OutDegreeView.__iter__(self)
networkx.classes.reportviews.OutEdgeDataView(self,viewer,nbunch=None,data=False,default=None)
networkx.classes.reportviews.OutEdgeDataView.__contains__(self,e)
networkx.classes.reportviews.OutEdgeDataView.__getstate__(self)
networkx.classes.reportviews.OutEdgeDataView.__init__(self,viewer,nbunch=None,data=False,default=None)
networkx.classes.reportviews.OutEdgeDataView.__iter__(self)
networkx.classes.reportviews.OutEdgeDataView.__len__(self)
networkx.classes.reportviews.OutEdgeDataView.__repr__(self)
networkx.classes.reportviews.OutEdgeDataView.__setstate__(self,state)
networkx.classes.reportviews.OutEdgeDataView.__str__(self)
networkx.classes.reportviews.OutEdgeView(self,G)
networkx.classes.reportviews.OutEdgeView.__contains__(self,e)
networkx.classes.reportviews.OutEdgeView.__getitem__(self,e)
networkx.classes.reportviews.OutEdgeView.__getstate__(self)
networkx.classes.reportviews.OutEdgeView.__init__(self,G)
networkx.classes.reportviews.OutEdgeView.__iter__(self)
networkx.classes.reportviews.OutEdgeView.__len__(self)
networkx.classes.reportviews.OutEdgeView.__repr__(self)
networkx.classes.reportviews.OutEdgeView.__setstate__(self,state)
networkx.classes.reportviews.OutEdgeView.__str__(self)
networkx.classes.reportviews.OutEdgeView._from_iterable(cls,it)
networkx.classes.reportviews.OutEdgeView.data(self,data=True,default=None,nbunch=None)
networkx.classes.reportviews.OutMultiDegreeView(DiDegreeView)
networkx.classes.reportviews.OutMultiDegreeView.__getitem__(self,n)
networkx.classes.reportviews.OutMultiDegreeView.__iter__(self)
networkx.classes.reportviews.OutMultiEdgeDataView(self,viewer,nbunch=None,data=False,keys=False,default=None)
networkx.classes.reportviews.OutMultiEdgeDataView.__contains__(self,e)
networkx.classes.reportviews.OutMultiEdgeDataView.__getstate__(self)
networkx.classes.reportviews.OutMultiEdgeDataView.__init__(self,viewer,nbunch=None,data=False,keys=False,default=None)
networkx.classes.reportviews.OutMultiEdgeDataView.__iter__(self)
networkx.classes.reportviews.OutMultiEdgeDataView.__len__(self)
networkx.classes.reportviews.OutMultiEdgeDataView.__setstate__(self,state)
networkx.classes.reportviews.OutMultiEdgeView(self,nbunch=None,data=False,keys=False,default=None)
networkx.classes.reportviews.OutMultiEdgeView.__call__(self,nbunch=None,data=False,keys=False,default=None)
networkx.classes.reportviews.OutMultiEdgeView.__contains__(self,e)
networkx.classes.reportviews.OutMultiEdgeView.__getitem__(self,e)
networkx.classes.reportviews.OutMultiEdgeView.__iter__(self)
networkx.classes.reportviews.OutMultiEdgeView.__len__(self)
networkx.classes.reportviews.OutMultiEdgeView.data(self,data=True,keys=False,default=None,nbunch=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/coreviews.py----------------------------------------
A:networkx.classes.coreviews.result[nbr]->dd.copy()
networkx.classes.coreviews.AdjacencyView(AtlasView)
networkx.classes.coreviews.AdjacencyView.__getitem__(self,name)
networkx.classes.coreviews.AdjacencyView.copy(self)
networkx.classes.coreviews.AtlasView(self,d)
networkx.classes.coreviews.AtlasView.__getitem__(self,key)
networkx.classes.coreviews.AtlasView.__getstate__(self)
networkx.classes.coreviews.AtlasView.__init__(self,d)
networkx.classes.coreviews.AtlasView.__iter__(self)
networkx.classes.coreviews.AtlasView.__len__(self)
networkx.classes.coreviews.AtlasView.__repr__(self)
networkx.classes.coreviews.AtlasView.__setstate__(self,state)
networkx.classes.coreviews.AtlasView.__str__(self)
networkx.classes.coreviews.AtlasView.copy(self)
networkx.classes.coreviews.FilterAdjacency(self,d,NODE_OK,EDGE_OK)
networkx.classes.coreviews.FilterAdjacency.__getitem__(self,node)
networkx.classes.coreviews.FilterAdjacency.__init__(self,d,NODE_OK,EDGE_OK)
networkx.classes.coreviews.FilterAdjacency.__iter__(self)
networkx.classes.coreviews.FilterAdjacency.__len__(self)
networkx.classes.coreviews.FilterAdjacency.__repr__(self)
networkx.classes.coreviews.FilterAdjacency.__str__(self)
networkx.classes.coreviews.FilterAtlas(self,d,NODE_OK)
networkx.classes.coreviews.FilterAtlas.__getitem__(self,key)
networkx.classes.coreviews.FilterAtlas.__init__(self,d,NODE_OK)
networkx.classes.coreviews.FilterAtlas.__iter__(self)
networkx.classes.coreviews.FilterAtlas.__len__(self)
networkx.classes.coreviews.FilterAtlas.__repr__(self)
networkx.classes.coreviews.FilterAtlas.__str__(self)
networkx.classes.coreviews.FilterMultiAdjacency(FilterAdjacency)
networkx.classes.coreviews.FilterMultiAdjacency.__getitem__(self,node)
networkx.classes.coreviews.FilterMultiInner(FilterAdjacency)
networkx.classes.coreviews.FilterMultiInner.__getitem__(self,nbr)
networkx.classes.coreviews.FilterMultiInner.__iter__(self)
networkx.classes.coreviews.MultiAdjacencyView(AdjacencyView)
networkx.classes.coreviews.MultiAdjacencyView.__getitem__(self,name)
networkx.classes.coreviews.MultiAdjacencyView.copy(self)
networkx.classes.coreviews.UnionAdjacency(self,succ,pred)
networkx.classes.coreviews.UnionAdjacency.__getitem__(self,nbr)
networkx.classes.coreviews.UnionAdjacency.__getstate__(self)
networkx.classes.coreviews.UnionAdjacency.__init__(self,succ,pred)
networkx.classes.coreviews.UnionAdjacency.__iter__(self)
networkx.classes.coreviews.UnionAdjacency.__len__(self)
networkx.classes.coreviews.UnionAdjacency.__repr__(self)
networkx.classes.coreviews.UnionAdjacency.__setstate__(self,state)
networkx.classes.coreviews.UnionAdjacency.__str__(self)
networkx.classes.coreviews.UnionAdjacency.copy(self)
networkx.classes.coreviews.UnionAtlas(self,succ,pred)
networkx.classes.coreviews.UnionAtlas.__getitem__(self,key)
networkx.classes.coreviews.UnionAtlas.__getstate__(self)
networkx.classes.coreviews.UnionAtlas.__init__(self,succ,pred)
networkx.classes.coreviews.UnionAtlas.__iter__(self)
networkx.classes.coreviews.UnionAtlas.__len__(self)
networkx.classes.coreviews.UnionAtlas.__repr__(self)
networkx.classes.coreviews.UnionAtlas.__setstate__(self,state)
networkx.classes.coreviews.UnionAtlas.__str__(self)
networkx.classes.coreviews.UnionAtlas.copy(self)
networkx.classes.coreviews.UnionMultiAdjacency(UnionAdjacency)
networkx.classes.coreviews.UnionMultiAdjacency.__getitem__(self,node)
networkx.classes.coreviews.UnionMultiInner(UnionAtlas)
networkx.classes.coreviews.UnionMultiInner.__getitem__(self,node)
networkx.classes.coreviews.UnionMultiInner.copy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/multigraph.py----------------------------------------
A:networkx.classes.multigraph.key->self.add_edge(u, v, key)
A:networkx.classes.multigraph.self._adj[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.multigraph.self._node[u]->self.node_attr_dict_factory()
A:networkx.classes.multigraph.self._adj[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.multigraph.self._node[v]->self.node_attr_dict_factory()
A:networkx.classes.multigraph.datadict->self.edge_attr_dict_factory()
A:networkx.classes.multigraph.keydict->self.edge_key_dict_factory()
A:networkx.classes.multigraph.ne->len(e)
A:networkx.classes.multigraph.G->graph_class()
A:networkx.classes.multigraph.graph_class->self.to_undirected_class()
networkx.classes.MultiGraph(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.MultiGraph.add_edge(self,u_for_edge,v_for_edge,key=None,**attr)
networkx.classes.MultiGraph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.MultiGraph.adj(self)
networkx.classes.MultiGraph.copy(self,as_view=False)
networkx.classes.MultiGraph.degree(self)
networkx.classes.MultiGraph.edges(self)
networkx.classes.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.classes.MultiGraph.has_edge(self,u,v,key=None)
networkx.classes.MultiGraph.is_directed(self)
networkx.classes.MultiGraph.is_multigraph(self)
networkx.classes.MultiGraph.new_edge_key(self,u,v)
networkx.classes.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.classes.MultiGraph.remove_edge(self,u,v,key=None)
networkx.classes.MultiGraph.remove_edges_from(self,ebunch)
networkx.classes.MultiGraph.to_directed(self,as_view=False)
networkx.classes.MultiGraph.to_directed_class(self)
networkx.classes.MultiGraph.to_undirected(self,as_view=False)
networkx.classes.MultiGraph.to_undirected_class(self)
networkx.classes.multigraph.MultiGraph(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.multigraph.MultiGraph.__init__(self,incoming_graph_data=None,multigraph_input=None,**attr)
networkx.classes.multigraph.MultiGraph.add_edge(self,u_for_edge,v_for_edge,key=None,**attr)
networkx.classes.multigraph.MultiGraph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.multigraph.MultiGraph.adj(self)
networkx.classes.multigraph.MultiGraph.copy(self,as_view=False)
networkx.classes.multigraph.MultiGraph.degree(self)
networkx.classes.multigraph.MultiGraph.edges(self)
networkx.classes.multigraph.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.classes.multigraph.MultiGraph.has_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.is_directed(self)
networkx.classes.multigraph.MultiGraph.is_multigraph(self)
networkx.classes.multigraph.MultiGraph.new_edge_key(self,u,v)
networkx.classes.multigraph.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.classes.multigraph.MultiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.remove_edges_from(self,ebunch)
networkx.classes.multigraph.MultiGraph.to_directed(self,as_view=False)
networkx.classes.multigraph.MultiGraph.to_directed_class(self)
networkx.classes.multigraph.MultiGraph.to_undirected(self,as_view=False)
networkx.classes.multigraph.MultiGraph.to_undirected_class(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/digraph.py----------------------------------------
A:networkx.classes.digraph._adj->_CachedPropertyResetterAdjAndSucc()
A:networkx.classes.digraph._pred->_CachedPropertyResetterPred()
A:networkx.classes.digraph.self.graph->self.graph_attr_dict_factory()
A:networkx.classes.digraph.self._node->self.node_dict_factory()
A:networkx.classes.digraph.self._adj->self.adjlist_outer_dict_factory()
A:networkx.classes.digraph.self._pred->self.adjlist_outer_dict_factory()
A:networkx.classes.digraph.self._succ[node_for_adding]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._pred[node_for_adding]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.attr_dictself._node[node_for_adding]->self.node_attr_dict_factory()
A:networkx.classes.digraph.newdict->attr.copy()
A:networkx.classes.digraph.self._succ[n]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._pred[n]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._node[n]->self.node_attr_dict_factory()
A:networkx.classes.digraph.self._succ[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._pred[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._node[u]->self.node_attr_dict_factory()
A:networkx.classes.digraph.self._succ[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._pred[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.digraph.self._node[v]->self.node_attr_dict_factory()
A:networkx.classes.digraph.datadict->self._adj[u].get(v, self.edge_attr_dict_factory())
A:networkx.classes.digraph.ne->len(e)
A:networkx.classes.digraph.graph_class->self.to_undirected_class()
A:networkx.classes.digraph.G->graph_class()
A:networkx.classes.digraph.H->self.__class__()
networkx.classes.DiGraph(self,incoming_graph_data=None,**attr)
networkx.classes.DiGraph.add_edge(self,u_of_edge,v_of_edge,**attr)
networkx.classes.DiGraph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.DiGraph.add_node(self,node_for_adding,**attr)
networkx.classes.DiGraph.add_nodes_from(self,nodes_for_adding,**attr)
networkx.classes.DiGraph.adj(self)
networkx.classes.DiGraph.clear(self)
networkx.classes.DiGraph.clear_edges(self)
networkx.classes.DiGraph.degree(self)
networkx.classes.DiGraph.edges(self)
networkx.classes.DiGraph.has_predecessor(self,u,v)
networkx.classes.DiGraph.has_successor(self,u,v)
networkx.classes.DiGraph.in_degree(self)
networkx.classes.DiGraph.in_edges(self)
networkx.classes.DiGraph.is_directed(self)
networkx.classes.DiGraph.is_multigraph(self)
networkx.classes.DiGraph.out_degree(self)
networkx.classes.DiGraph.out_edges(self)
networkx.classes.DiGraph.pred(self)
networkx.classes.DiGraph.predecessors(self,n)
networkx.classes.DiGraph.remove_edge(self,u,v)
networkx.classes.DiGraph.remove_edges_from(self,ebunch)
networkx.classes.DiGraph.remove_node(self,n)
networkx.classes.DiGraph.remove_nodes_from(self,nodes)
networkx.classes.DiGraph.reverse(self,copy=True)
networkx.classes.DiGraph.succ(self)
networkx.classes.DiGraph.successors(self,n)
networkx.classes.DiGraph.to_undirected(self,reciprocal=False,as_view=False)
networkx.classes.digraph.DiGraph(self,incoming_graph_data=None,**attr)
networkx.classes.digraph.DiGraph.__init__(self,incoming_graph_data=None,**attr)
networkx.classes.digraph.DiGraph.add_edge(self,u_of_edge,v_of_edge,**attr)
networkx.classes.digraph.DiGraph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.digraph.DiGraph.add_node(self,node_for_adding,**attr)
networkx.classes.digraph.DiGraph.add_nodes_from(self,nodes_for_adding,**attr)
networkx.classes.digraph.DiGraph.adj(self)
networkx.classes.digraph.DiGraph.clear(self)
networkx.classes.digraph.DiGraph.clear_edges(self)
networkx.classes.digraph.DiGraph.degree(self)
networkx.classes.digraph.DiGraph.edges(self)
networkx.classes.digraph.DiGraph.has_predecessor(self,u,v)
networkx.classes.digraph.DiGraph.has_successor(self,u,v)
networkx.classes.digraph.DiGraph.in_degree(self)
networkx.classes.digraph.DiGraph.in_edges(self)
networkx.classes.digraph.DiGraph.is_directed(self)
networkx.classes.digraph.DiGraph.is_multigraph(self)
networkx.classes.digraph.DiGraph.out_degree(self)
networkx.classes.digraph.DiGraph.out_edges(self)
networkx.classes.digraph.DiGraph.pred(self)
networkx.classes.digraph.DiGraph.predecessors(self,n)
networkx.classes.digraph.DiGraph.remove_edge(self,u,v)
networkx.classes.digraph.DiGraph.remove_edges_from(self,ebunch)
networkx.classes.digraph.DiGraph.remove_node(self,n)
networkx.classes.digraph.DiGraph.remove_nodes_from(self,nodes)
networkx.classes.digraph.DiGraph.reverse(self,copy=True)
networkx.classes.digraph.DiGraph.succ(self)
networkx.classes.digraph.DiGraph.successors(self,n)
networkx.classes.digraph.DiGraph.to_undirected(self,reciprocal=False,as_view=False)
networkx.classes.digraph._CachedPropertyResetterAdjAndSucc
networkx.classes.digraph._CachedPropertyResetterAdjAndSucc.__set__(self,obj,value)
networkx.classes.digraph._CachedPropertyResetterPred
networkx.classes.digraph._CachedPropertyResetterPred.__set__(self,obj,value)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/backends.py----------------------------------------
A:networkx.classes.backends.self._items->entry_points(group='networkx.plugins')
A:networkx.classes.backends.plugins->PluginInfo()
A:networkx.classes.backends.backend->plugins[plugin_name].load()
A:networkx.classes.backends.sig->inspect.signature(func)
A:networkx.classes.backends.bound->inspect.signature(func).bind(*args, **kwds)
A:networkx.classes.backends.graph->plugins[plugin_name].load().convert_from_nx(graph, weight=weight, name=name)
A:networkx.classes.backends.result->getattr(backend, name).__call__(graph, *args, **kwds)
networkx.classes.backends.PluginInfo(self)
networkx.classes.backends.PluginInfo.__bool__(self)
networkx.classes.backends.PluginInfo.__contains__(self,name)
networkx.classes.backends.PluginInfo.__getitem__(self,name)
networkx.classes.backends.PluginInfo.__init__(self)
networkx.classes.backends.PluginInfo.items(self)
networkx.classes.backends._dispatch(func=None,*,name=None)
networkx.classes.backends._mark_tests(items)
networkx.classes.backends._register_algo(name,wrapped_func)
networkx.classes.backends.test_override_dispatch(func=None,*,name=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/function.py----------------------------------------
A:networkx.classes.function.n->number_of_nodes(G)
A:networkx.classes.function.m->number_of_edges(G)
A:networkx.classes.function.counts->Counter((d for (n, d) in G.degree()))
A:networkx.classes.function.nlist->iter(nodes_for_cycle)
A:networkx.classes.function.v->next(nlist)
A:networkx.classes.function.first_node->next(nlist)
A:networkx.classes.function.induced_nodes->nxf.show_nodes(nodes)
A:networkx.classes.function.edges->G.edges(data=True)
A:networkx.classes.function.nodes->set(graph)
A:networkx.classes.function.induced_edges->nxf.show_edges(edges)
A:networkx.classes.function.hide_nodes->nxf.hide_nodes(nodes)
A:networkx.classes.function.hide_edges->nxf.hide_edges(edges)
A:networkx.classes.function.H->G.__class__()
A:networkx.classes.function.values->graph.neighbors(node)
A:networkx.classes.function.u->set(graph).pop()
A:networkx.classes.function.data->G.get_edge_data(*edge)
A:networkx.classes.function.multigraph->G.is_multigraph()
networkx.classes.add_cycle(G_to_add_to,nodes_for_cycle,**attr)
networkx.classes.add_path(G_to_add_to,nodes_for_path,**attr)
networkx.classes.add_star(G_to_add_to,nodes_for_star,**attr)
networkx.classes.all_neighbors(graph,node)
networkx.classes.common_neighbors(G,u,v)
networkx.classes.create_empty_copy(G,with_data=True)
networkx.classes.degree(G,nbunch=None,weight=None)
networkx.classes.degree_histogram(G)
networkx.classes.density(G)
networkx.classes.edge_subgraph(G,edges)
networkx.classes.edges(G,nbunch=None)
networkx.classes.freeze(G)
networkx.classes.frozen(*args,**kwargs)
networkx.classes.function.add_cycle(G_to_add_to,nodes_for_cycle,**attr)
networkx.classes.function.add_path(G_to_add_to,nodes_for_path,**attr)
networkx.classes.function.add_star(G_to_add_to,nodes_for_star,**attr)
networkx.classes.function.all_neighbors(graph,node)
networkx.classes.function.common_neighbors(G,u,v)
networkx.classes.function.create_empty_copy(G,with_data=True)
networkx.classes.function.degree(G,nbunch=None,weight=None)
networkx.classes.function.degree_histogram(G)
networkx.classes.function.density(G)
networkx.classes.function.edge_subgraph(G,edges)
networkx.classes.function.edges(G,nbunch=None)
networkx.classes.function.freeze(G)
networkx.classes.function.frozen(*args,**kwargs)
networkx.classes.function.get_edge_attributes(G,name)
networkx.classes.function.get_node_attributes(G,name)
networkx.classes.function.induced_subgraph(G,nbunch)
networkx.classes.function.is_directed(G)
networkx.classes.function.is_empty(G)
networkx.classes.function.is_frozen(G)
networkx.classes.function.is_negatively_weighted(G,edge=None,weight='weight')
networkx.classes.function.is_path(G,path)
networkx.classes.function.is_weighted(G,edge=None,weight='weight')
networkx.classes.function.neighbors(G,n)
networkx.classes.function.nodes(G)
networkx.classes.function.nodes_with_selfloops(G)
networkx.classes.function.non_edges(graph)
networkx.classes.function.non_neighbors(graph,node)
networkx.classes.function.number_of_edges(G)
networkx.classes.function.number_of_nodes(G)
networkx.classes.function.number_of_selfloops(G)
networkx.classes.function.path_weight(G,path,weight)
networkx.classes.function.restricted_view(G,nodes,edges)
networkx.classes.function.selfloop_edges(G,data=False,keys=False,default=None)
networkx.classes.function.set_edge_attributes(G,values,name=None)
networkx.classes.function.set_node_attributes(G,values,name=None)
networkx.classes.function.subgraph(G,nbunch)
networkx.classes.function.to_directed(graph)
networkx.classes.function.to_undirected(graph)
networkx.classes.get_edge_attributes(G,name)
networkx.classes.get_node_attributes(G,name)
networkx.classes.induced_subgraph(G,nbunch)
networkx.classes.is_directed(G)
networkx.classes.is_empty(G)
networkx.classes.is_frozen(G)
networkx.classes.is_negatively_weighted(G,edge=None,weight='weight')
networkx.classes.is_path(G,path)
networkx.classes.is_weighted(G,edge=None,weight='weight')
networkx.classes.neighbors(G,n)
networkx.classes.nodes(G)
networkx.classes.nodes_with_selfloops(G)
networkx.classes.non_edges(graph)
networkx.classes.non_neighbors(graph,node)
networkx.classes.number_of_edges(G)
networkx.classes.number_of_nodes(G)
networkx.classes.number_of_selfloops(G)
networkx.classes.path_weight(G,path,weight)
networkx.classes.restricted_view(G,nodes,edges)
networkx.classes.selfloop_edges(G,data=False,keys=False,default=None)
networkx.classes.set_edge_attributes(G,values,name=None)
networkx.classes.set_node_attributes(G,values,name=None)
networkx.classes.subgraph(G,nbunch)
networkx.classes.to_directed(graph)
networkx.classes.to_undirected(graph)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/graphviews.py----------------------------------------
A:networkx.classes.graphviews.newG->generic_graph_view(G)
A:networkx.classes.graphviews.newG._adj->Adj(G._adj, filter_node, filter_edge)
A:networkx.classes.graphviews.newG._node->FilterAtlas(G._node, filter_node)
A:networkx.classes.graphviews.newG._succ->Adj(G._succ, filter_node, filter_edge)
A:networkx.classes.graphviews.newG._pred->Adj(G._pred, filter_node, reverse_edge)
networkx.classes.graphviews.generic_graph_view(G,create_using=None)
networkx.classes.graphviews.reverse_view(G)
networkx.classes.graphviews.subgraph_view(G,filter_node=no_filter,filter_edge=no_filter)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/graph.py----------------------------------------
A:networkx.classes.graph._adj->_CachedPropertyResetterAdj()
A:networkx.classes.graph._node->_CachedPropertyResetterNode()
A:networkx.classes.graph.self.graph->self.graph_attr_dict_factory()
A:networkx.classes.graph.self._node->self.node_dict_factory()
A:networkx.classes.graph.self._adj->self.adjlist_outer_dict_factory()
A:networkx.classes.graph.self._adj[node_for_adding]->self.adjlist_inner_dict_factory()
A:networkx.classes.graph.attr_dictself._node[node_for_adding]->self.node_attr_dict_factory()
A:networkx.classes.graph.newdict->attr.copy()
A:networkx.classes.graph.self._adj[n]->self.adjlist_inner_dict_factory()
A:networkx.classes.graph.self._node[n]->self.node_attr_dict_factory()
A:networkx.classes.graph.nbrs->list(adj[n])
A:networkx.classes.graph.self._adj[u]->self.adjlist_inner_dict_factory()
A:networkx.classes.graph.self._node[u]->self.node_attr_dict_factory()
A:networkx.classes.graph.self._adj[v]->self.adjlist_inner_dict_factory()
A:networkx.classes.graph.self._node[v]->self.node_attr_dict_factory()
A:networkx.classes.graph.datadict->self._adj[u].get(v, self.edge_attr_dict_factory())
A:networkx.classes.graph.ne->len(e)
A:networkx.classes.graph.G->graph_class()
A:networkx.classes.graph.graph_class->self.to_undirected_class()
A:networkx.classes.graph.induced_nodes->networkx.filters.show_nodes(self.nbunch_iter(nodes))
A:networkx.classes.graph.s->sum((d for (v, d) in self.degree(weight=weight)))
A:networkx.classes.graph.bunch->bunch_iter(nbunch, self._adj)
A:networkx.classes.graph.exc->NetworkXError(f'Node {n} in sequence nbunch is not a valid node.')
networkx.classes.Graph(self,incoming_graph_data=None,**attr)
networkx.classes.Graph.__contains__(self,n)
networkx.classes.Graph.__getitem__(self,n)
networkx.classes.Graph.__iter__(self)
networkx.classes.Graph.__len__(self)
networkx.classes.Graph.__str__(self)
networkx.classes.Graph.add_edge(self,u_of_edge,v_of_edge,**attr)
networkx.classes.Graph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.Graph.add_node(self,node_for_adding,**attr)
networkx.classes.Graph.add_nodes_from(self,nodes_for_adding,**attr)
networkx.classes.Graph.add_weighted_edges_from(self,ebunch_to_add,weight='weight',**attr)
networkx.classes.Graph.adj(self)
networkx.classes.Graph.adjacency(self)
networkx.classes.Graph.clear(self)
networkx.classes.Graph.clear_edges(self)
networkx.classes.Graph.copy(self,as_view=False)
networkx.classes.Graph.degree(self)
networkx.classes.Graph.edge_subgraph(self,edges)
networkx.classes.Graph.edges(self)
networkx.classes.Graph.get_edge_data(self,u,v,default=None)
networkx.classes.Graph.has_edge(self,u,v)
networkx.classes.Graph.has_node(self,n)
networkx.classes.Graph.is_directed(self)
networkx.classes.Graph.is_multigraph(self)
networkx.classes.Graph.name(self)
networkx.classes.Graph.name(self,s)
networkx.classes.Graph.nbunch_iter(self,nbunch=None)
networkx.classes.Graph.neighbors(self,n)
networkx.classes.Graph.nodes(self)
networkx.classes.Graph.number_of_edges(self,u=None,v=None)
networkx.classes.Graph.number_of_nodes(self)
networkx.classes.Graph.order(self)
networkx.classes.Graph.remove_edge(self,u,v)
networkx.classes.Graph.remove_edges_from(self,ebunch)
networkx.classes.Graph.remove_node(self,n)
networkx.classes.Graph.remove_nodes_from(self,nodes)
networkx.classes.Graph.size(self,weight=None)
networkx.classes.Graph.subgraph(self,nodes)
networkx.classes.Graph.to_directed(self,as_view=False)
networkx.classes.Graph.to_directed_class(self)
networkx.classes.Graph.to_undirected(self,as_view=False)
networkx.classes.Graph.to_undirected_class(self)
networkx.classes.Graph.update(self,edges=None,nodes=None)
networkx.classes.graph.Graph(self,incoming_graph_data=None,**attr)
networkx.classes.graph.Graph.__contains__(self,n)
networkx.classes.graph.Graph.__getitem__(self,n)
networkx.classes.graph.Graph.__init__(self,incoming_graph_data=None,**attr)
networkx.classes.graph.Graph.__iter__(self)
networkx.classes.graph.Graph.__len__(self)
networkx.classes.graph.Graph.__str__(self)
networkx.classes.graph.Graph.add_edge(self,u_of_edge,v_of_edge,**attr)
networkx.classes.graph.Graph.add_edges_from(self,ebunch_to_add,**attr)
networkx.classes.graph.Graph.add_node(self,node_for_adding,**attr)
networkx.classes.graph.Graph.add_nodes_from(self,nodes_for_adding,**attr)
networkx.classes.graph.Graph.add_weighted_edges_from(self,ebunch_to_add,weight='weight',**attr)
networkx.classes.graph.Graph.adj(self)
networkx.classes.graph.Graph.adjacency(self)
networkx.classes.graph.Graph.clear(self)
networkx.classes.graph.Graph.clear_edges(self)
networkx.classes.graph.Graph.copy(self,as_view=False)
networkx.classes.graph.Graph.degree(self)
networkx.classes.graph.Graph.edge_subgraph(self,edges)
networkx.classes.graph.Graph.edges(self)
networkx.classes.graph.Graph.get_edge_data(self,u,v,default=None)
networkx.classes.graph.Graph.has_edge(self,u,v)
networkx.classes.graph.Graph.has_node(self,n)
networkx.classes.graph.Graph.is_directed(self)
networkx.classes.graph.Graph.is_multigraph(self)
networkx.classes.graph.Graph.name(self)
networkx.classes.graph.Graph.name(self,s)
networkx.classes.graph.Graph.nbunch_iter(self,nbunch=None)
networkx.classes.graph.Graph.neighbors(self,n)
networkx.classes.graph.Graph.nodes(self)
networkx.classes.graph.Graph.number_of_edges(self,u=None,v=None)
networkx.classes.graph.Graph.number_of_nodes(self)
networkx.classes.graph.Graph.order(self)
networkx.classes.graph.Graph.remove_edge(self,u,v)
networkx.classes.graph.Graph.remove_edges_from(self,ebunch)
networkx.classes.graph.Graph.remove_node(self,n)
networkx.classes.graph.Graph.remove_nodes_from(self,nodes)
networkx.classes.graph.Graph.size(self,weight=None)
networkx.classes.graph.Graph.subgraph(self,nodes)
networkx.classes.graph.Graph.to_directed(self,as_view=False)
networkx.classes.graph.Graph.to_directed_class(self)
networkx.classes.graph.Graph.to_undirected(self,as_view=False)
networkx.classes.graph.Graph.to_undirected_class(self)
networkx.classes.graph.Graph.update(self,edges=None,nodes=None)
networkx.classes.graph._CachedPropertyResetterAdj
networkx.classes.graph._CachedPropertyResetterAdj.__set__(self,obj,value)
networkx.classes.graph._CachedPropertyResetterNode
networkx.classes.graph._CachedPropertyResetterNode.__set__(self,obj,value)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/filters.py----------------------------------------
A:networkx.classes.filters.nodes->set(nodes)
A:networkx.classes.filters.self.nodes->set(nodes)
networkx.classes.filters.hide_diedges(edges)
networkx.classes.filters.hide_edges(edges)
networkx.classes.filters.hide_multidiedges(edges)
networkx.classes.filters.hide_multiedges(edges)
networkx.classes.filters.hide_nodes(nodes)
networkx.classes.filters.no_filter(*items)
networkx.classes.filters.show_diedges(edges)
networkx.classes.filters.show_edges(edges)
networkx.classes.filters.show_multidiedges(edges)
networkx.classes.filters.show_multiedges(edges)
networkx.classes.filters.show_nodes(self,nodes)
networkx.classes.filters.show_nodes.__init__(self,nodes)
networkx.filters.hide_diedges(edges)
networkx.filters.hide_edges(edges)
networkx.filters.hide_multidiedges(edges)
networkx.filters.hide_multiedges(edges)
networkx.filters.hide_nodes(nodes)
networkx.filters.no_filter(*items)
networkx.filters.show_diedges(edges)
networkx.filters.show_edges(edges)
networkx.filters.show_multidiedges(edges)
networkx.filters.show_multiedges(edges)
networkx.filters.show_nodes(self,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_filters.py----------------------------------------
A:networkx.classes.tests.test_filters.f->factory([(1, 2, 0), (3, 4, 1), (1, 2, 1)])
networkx.classes.tests.test_filters.TestFilterFactory
networkx.classes.tests.test_filters.TestFilterFactory.test_hide_diedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_hide_edges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multidiedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_hide_multiedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_hide_nodes(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_no_filter(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_show_diedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_show_edges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_show_multidiedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_show_multiedges(self)
networkx.classes.tests.test_filters.TestFilterFactory.test_show_nodes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_digraph_historical.py----------------------------------------
A:networkx.classes.tests.test_digraph_historical.G->networkx.complete_graph(10)
A:networkx.classes.tests.test_digraph_historical.H->networkx.DiGraph()
A:networkx.classes.tests.test_digraph_historical.HR->networkx.DiGraph().reverse()
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical(HistoricalTests)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setup_class(cls)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_function.py----------------------------------------
A:networkx.classes.tests.test_function.self.G->networkx.Graph({0: [1, 2, 3], 1: [1, 2, 0], 4: []}, name='Test')
A:networkx.classes.tests.test_function.self.Gnodes->list(range(5))
A:networkx.classes.tests.test_function.self.DG->networkx.DiGraph({0: [1, 2, 3], 1: [1, 2, 0], 4: []})
A:networkx.classes.tests.test_function.self.DGnodes->list(range(5))
A:networkx.classes.tests.test_function.G->networkx.complete_graph(3, create_using=graph_type)
A:networkx.classes.tests.test_function.nlist->iter([])
A:networkx.classes.tests.test_function.H->networkx.restricted_view(G, [0, 2, 5], [(1, 2, 0), (3, 4, 0)])
A:networkx.classes.tests.test_function.graph->networkx.DiGraph()
A:networkx.classes.tests.test_function.pop->random.sample(list(graph), 1)
A:networkx.classes.tests.test_function.nbors->list(nx.non_neighbors(graph, 0))
A:networkx.classes.tests.test_function.nedges->list(nx.non_edges(graph))
A:networkx.classes.tests.test_function.cls.func->staticmethod(nx.common_neighbors)
A:networkx.classes.tests.test_function.result->sorted(cls.func(G, u, v))
A:networkx.classes.tests.test_function.cls.test->staticmethod(test_func)
A:networkx.classes.tests.test_function.vals->dict.fromkeys(edges, d)
A:networkx.classes.tests.test_function.attrs->networkx.get_edge_attributes(G, attr)
networkx.classes.tests.test_TestCommonNeighbors
networkx.classes.tests.test_TestCommonNeighbors.setup_class(cls)
networkx.classes.tests.test_TestCommonNeighbors.test_K5(self)
networkx.classes.tests.test_TestCommonNeighbors.test_P3(self)
networkx.classes.tests.test_TestCommonNeighbors.test_S4(self)
networkx.classes.tests.test_TestCommonNeighbors.test_custom1(self)
networkx.classes.tests.test_TestCommonNeighbors.test_custom2(self)
networkx.classes.tests.test_TestCommonNeighbors.test_digraph(self)
networkx.classes.tests.test_TestCommonNeighbors.test_nonexistent_nodes(self)
networkx.classes.tests.test_TestFunction
networkx.classes.tests.test_TestFunction.setup_method(self)
networkx.classes.tests.test_TestFunction.test_add_cycle(self)
networkx.classes.tests.test_TestFunction.test_add_path(self)
networkx.classes.tests.test_TestFunction.test_add_star(self)
networkx.classes.tests.test_TestFunction.test_create_empty_copy(self)
networkx.classes.tests.test_TestFunction.test_degree(self)
networkx.classes.tests.test_TestFunction.test_degree_histogram(self)
networkx.classes.tests.test_TestFunction.test_density(self)
networkx.classes.tests.test_TestFunction.test_density_selfloop(self)
networkx.classes.tests.test_TestFunction.test_edge_subgraph(self)
networkx.classes.tests.test_TestFunction.test_edges(self)
networkx.classes.tests.test_TestFunction.test_freeze(self)
networkx.classes.tests.test_TestFunction.test_is_directed(self)
networkx.classes.tests.test_TestFunction.test_is_frozen(self)
networkx.classes.tests.test_TestFunction.test_is_negatively_weighted(self)
networkx.classes.tests.test_TestFunction.test_is_weighted(self)
networkx.classes.tests.test_TestFunction.test_neighbors(self)
networkx.classes.tests.test_TestFunction.test_neighbors_complete_graph(self)
networkx.classes.tests.test_TestFunction.test_nodes(self)
networkx.classes.tests.test_TestFunction.test_non_edges(self)
networkx.classes.tests.test_TestFunction.test_non_neighbors(self)
networkx.classes.tests.test_TestFunction.test_number_of_edges(self)
networkx.classes.tests.test_TestFunction.test_number_of_nodes(self)
networkx.classes.tests.test_TestFunction.test_subgraph(self)
networkx.classes.tests.test_function.TestCommonNeighbors
networkx.classes.tests.test_function.TestCommonNeighbors.setup_class(cls)
networkx.classes.tests.test_function.TestCommonNeighbors.test_K5(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_P3(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_S4(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_custom1(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_custom2(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_digraph(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_nonexistent_nodes(self)
networkx.classes.tests.test_function.TestFunction
networkx.classes.tests.test_function.TestFunction.setup_method(self)
networkx.classes.tests.test_function.TestFunction.test_add_cycle(self)
networkx.classes.tests.test_function.TestFunction.test_add_path(self)
networkx.classes.tests.test_function.TestFunction.test_add_star(self)
networkx.classes.tests.test_function.TestFunction.test_create_empty_copy(self)
networkx.classes.tests.test_function.TestFunction.test_degree(self)
networkx.classes.tests.test_function.TestFunction.test_degree_histogram(self)
networkx.classes.tests.test_function.TestFunction.test_density(self)
networkx.classes.tests.test_function.TestFunction.test_density_selfloop(self)
networkx.classes.tests.test_function.TestFunction.test_edge_subgraph(self)
networkx.classes.tests.test_function.TestFunction.test_edges(self)
networkx.classes.tests.test_function.TestFunction.test_freeze(self)
networkx.classes.tests.test_function.TestFunction.test_is_directed(self)
networkx.classes.tests.test_function.TestFunction.test_is_frozen(self)
networkx.classes.tests.test_function.TestFunction.test_is_negatively_weighted(self)
networkx.classes.tests.test_function.TestFunction.test_is_weighted(self)
networkx.classes.tests.test_function.TestFunction.test_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_neighbors_complete_graph(self)
networkx.classes.tests.test_function.TestFunction.test_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_non_edges(self)
networkx.classes.tests.test_function.TestFunction.test_non_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_edges(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_subgraph(self)
networkx.classes.tests.test_function.test_get_edge_attributes()
networkx.classes.tests.test_function.test_get_node_attributes()
networkx.classes.tests.test_function.test_is_empty()
networkx.classes.tests.test_function.test_ispath(G)
networkx.classes.tests.test_function.test_pathweight()
networkx.classes.tests.test_function.test_restricted_view(G)
networkx.classes.tests.test_function.test_restricted_view_multi(G)
networkx.classes.tests.test_function.test_selfloop_edges_attr(graph_type)
networkx.classes.tests.test_function.test_selfloop_edges_multi_with_data_and_keys()
networkx.classes.tests.test_function.test_selfloops(graph_type)
networkx.classes.tests.test_function.test_selfloops_removal(graph_type)
networkx.classes.tests.test_function.test_selfloops_removal_multi(graph_type)
networkx.classes.tests.test_function.test_set_edge_attributes(graph_type)
networkx.classes.tests.test_function.test_set_edge_attributes_ignores_extra_edges(values,name)
networkx.classes.tests.test_function.test_set_edge_attributes_multi(graph_type)
networkx.classes.tests.test_function.test_set_edge_attributes_multi_ignores_extra_edges(values,name)
networkx.classes.tests.test_function.test_set_node_attributes(graph_type)
networkx.classes.tests.test_function.test_set_node_attributes_ignores_extra_nodes(values,name)
networkx.classes.tests.test_test_get_edge_attributes()
networkx.classes.tests.test_test_get_node_attributes()
networkx.classes.tests.test_test_is_empty()
networkx.classes.tests.test_test_ispath(G)
networkx.classes.tests.test_test_pathweight()
networkx.classes.tests.test_test_restricted_view(G)
networkx.classes.tests.test_test_restricted_view_multi(G)
networkx.classes.tests.test_test_selfloop_edges_attr(graph_type)
networkx.classes.tests.test_test_selfloop_edges_multi_with_data_and_keys()
networkx.classes.tests.test_test_selfloops(graph_type)
networkx.classes.tests.test_test_selfloops_removal(graph_type)
networkx.classes.tests.test_test_selfloops_removal_multi(graph_type)
networkx.classes.tests.test_test_set_edge_attributes(graph_type)
networkx.classes.tests.test_test_set_edge_attributes_ignores_extra_edges(values,name)
networkx.classes.tests.test_test_set_edge_attributes_multi(graph_type)
networkx.classes.tests.test_test_set_edge_attributes_multi_ignores_extra_edges(values,name)
networkx.classes.tests.test_test_set_node_attributes(graph_type)
networkx.classes.tests.test_test_set_node_attributes_ignores_extra_nodes(values,name)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/historical_tests.py----------------------------------------
A:networkx.classes.tests.historical_tests.cls.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.cls.P1->cnlti(nx.path_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.cls.P3->cnlti(nx.path_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.cls.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.cls.K1->cnlti(nx.complete_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.cls.K3->cnlti(nx.complete_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.cls.K4->cnlti(nx.complete_graph(4), first_label=1)
A:networkx.classes.tests.historical_tests.cls.K5->cnlti(nx.complete_graph(5), first_label=1)
A:networkx.classes.tests.historical_tests.cls.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.G->networkx.null_graph()
A:networkx.classes.tests.historical_tests.H->self.G()
A:networkx.classes.tests.historical_tests.nbunch->set('ABCDEFGHIJKL')
A:networkx.classes.tests.historical_tests.n_iter->self.P3.nodes()
A:networkx.classes.tests.historical_tests.G1->self.G()
A:networkx.classes.tests.historical_tests.P3->networkx.path_graph(3)
A:networkx.classes.tests.historical_tests.P5->networkx.path_graph(5)
A:networkx.classes.tests.historical_tests.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.SG->networkx.null_graph().subgraph(['A', 'B', 'D'])
A:networkx.classes.tests.historical_tests.DG->networkx.null_graph().to_directed()
A:networkx.classes.tests.historical_tests.UG->networkx.null_graph().to_undirected()
A:networkx.classes.tests.historical_tests.nullgraph->networkx.null_graph()
A:networkx.classes.tests.historical_tests.E5->networkx.empty_graph(5)
A:networkx.classes.tests.historical_tests.E10->networkx.empty_graph(10)
A:networkx.classes.tests.historical_tests.K1->networkx.complete_graph(1)
A:networkx.classes.tests.historical_tests.K3->networkx.complete_graph(3)
A:networkx.classes.tests.historical_tests.K5->networkx.complete_graph(5)
networkx.classes.tests.historical_tests.HistoricalTests
networkx.classes.tests.historical_tests.HistoricalTests.setup_class(cls)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_contains(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_copy(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_iterators(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_name(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_issue(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_order_size(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_digraph.py----------------------------------------
A:networkx.classes.tests.test_digraph.G->networkx.DiGraph()
A:networkx.classes.tests.test_digraph.R->networkx.DiGraph().reverse(copy=False)
A:networkx.classes.tests.test_digraph.x->Foo()
A:networkx.classes.tests.test_digraph.y->Foo()
A:networkx.classes.tests.test_digraph.self.K3->self.Graph()
A:networkx.classes.tests.test_digraph.self.P3->self.Graph()
A:networkx.classes.tests.test_digraph.nodes->list(G.nodes)
A:networkx.classes.tests.test_digraph.self.H->networkx.DiGraph().edge_subgraph([(0, 1), (3, 4)])
A:networkx.classes.tests.test_digraph.H->networkx.DiGraph().edge_subgraph([(0, 1)])
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester(BaseDiGraphTester,BaseAttrGraphTester)
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_in_degree_weighted(self)
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester.test_out_degree_weighted(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester(BaseGraphTester)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_di_attributes_cached(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_di_cache_reset(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_data(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_data(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_hashable(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_digraph.TestDiGraph(BaseAttrDiGraphTester,_TestGraph)
networkx.classes.tests.test_digraph.TestDiGraph.setup_method(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_clear(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_clear_edges(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_data_input(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_digraph.TestEdgeSubgraph(_TestGraphEdgeSubgraph)
networkx.classes.tests.test_digraph.TestEdgeSubgraph.setup_method(self)
networkx.classes.tests.test_digraph.TestEdgeSubgraph.test_pred_succ(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_graph.py----------------------------------------
A:networkx.classes.tests.test_graph.G->networkx.path_graph(5)
A:networkx.classes.tests.test_graph.before->count_objects_of_type(MyGraph)
A:networkx.classes.tests.test_graph.after->count_objects_of_type(MyGraph)
A:networkx.classes.tests.test_graph.bunch->networkx.path_graph(5).nbunch_iter([0, 1, 2, {}])
A:networkx.classes.tests.test_graph.DG->networkx.path_graph(5).to_directed(as_view=True)
A:networkx.classes.tests.test_graph.SDG->networkx.path_graph(5).to_directed(as_view=True).subgraph([0, 1])
A:networkx.classes.tests.test_graph.RSDG->networkx.path_graph(5).to_directed(as_view=True).subgraph([0, 1]).reverse(copy=False)
A:networkx.classes.tests.test_graph.H->self.Graph()
A:networkx.classes.tests.test_graph.H2->self.Graph().to_undirected(as_view=True)
A:networkx.classes.tests.test_graph.self.K3->self.Graph()
A:networkx.classes.tests.test_graph.pg->pickle.loads(pickle.dumps(G))
A:networkx.classes.tests.test_graph.nodes->list(G.nodes)
A:networkx.classes.tests.test_graph.GG->networkx.path_graph(5).copy()
A:networkx.classes.tests.test_graph.self.H->networkx.path_graph(5).edge_subgraph([(0, 1), (3, 4)])
networkx.classes.tests.test_graph.BaseAttrGraphTester(BaseGraphTester)
networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes(self,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_class_copy(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_directed_class(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_lookup(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_fresh_copy(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_chain(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_str_named(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_str_unnamed(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed_as_view(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected_as_view(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester
networkx.classes.tests.test_graph.BaseGraphTester.test_attributes_cached(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_cache_reset(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_contains(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_edges(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_node(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_memory_leak(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter_node_format_raise(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nodes(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_none_node(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_order(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_size(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph
networkx.classes.tests.test_graph.TestEdgeSubgraph.setup_method(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_add_node(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_edges(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_correct_nodes(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_edge_attr_dict(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_graph_attr_dict(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_node_attr_dict(self)
networkx.classes.tests.test_graph.TestEdgeSubgraph.test_remove_node(self)
networkx.classes.tests.test_graph.TestGraph(BaseAttrGraphTester)
networkx.classes.tests.test_graph.TestGraph.setup_method(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_add_node(self)
networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from(self)
networkx.classes.tests.test_graph.TestGraph.test_adjacency(self)
networkx.classes.tests.test_graph.TestGraph.test_clear(self)
networkx.classes.tests.test_graph.TestGraph.test_clear_edges(self)
networkx.classes.tests.test_graph.TestGraph.test_data_input(self)
networkx.classes.tests.test_graph.TestGraph.test_edges_data(self)
networkx.classes.tests.test_graph.TestGraph.test_get_edge_data(self)
networkx.classes.tests.test_graph.TestGraph.test_getitem(self)
networkx.classes.tests.test_graph.TestGraph.test_pickle(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_node(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from(self)
networkx.classes.tests.test_graph.TestGraph.test_update(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_graphviews.py----------------------------------------
A:networkx.classes.tests.test_graphviews.self.G->networkx.path_graph(9)
A:networkx.classes.tests.test_graphviews.self.rv->networkx.reverse_view(self.G)
A:networkx.classes.tests.test_graphviews.prv->pickle.loads(pickle.dumps(rv, -1))
A:networkx.classes.tests.test_graphviews.expected->sorted(self.DG.edges)
A:networkx.classes.tests.test_graphviews.G->MyGraph(origG)
A:networkx.classes.tests.test_graphviews.M->MyGraph()
A:networkx.classes.tests.test_graphviews.RM->networkx.reverse_view(M)
A:networkx.classes.tests.test_graphviews.RMC->networkx.reverse_view(M).copy()
A:networkx.classes.tests.test_graphviews.MG->networkx.MultiGraph(self.G)
A:networkx.classes.tests.test_graphviews.self.dv->networkx.to_directed(self.G)
A:networkx.classes.tests.test_graphviews.self.MG->networkx.path_graph(9, create_using=nx.MultiGraph())
A:networkx.classes.tests.test_graphviews.self.Mdv->networkx.to_directed(self.MG)
A:networkx.classes.tests.test_graphviews.dd->networkx.to_directed(self.dv)
A:networkx.classes.tests.test_graphviews.Mdd->networkx.to_directed(self.Mdv)
A:networkx.classes.tests.test_graphviews.pdv->pickle.loads(pickle.dumps(dv, -1))
A:networkx.classes.tests.test_graphviews.self.DG->networkx.path_graph(9, create_using=nx.DiGraph())
A:networkx.classes.tests.test_graphviews.self.uv->networkx.to_undirected(self.DG)
A:networkx.classes.tests.test_graphviews.self.MDG->networkx.path_graph(9, create_using=nx.MultiDiGraph())
A:networkx.classes.tests.test_graphviews.self.Muv->networkx.to_undirected(self.MDG)
A:networkx.classes.tests.test_graphviews.uu->networkx.to_undirected(self.uv)
A:networkx.classes.tests.test_graphviews.Muu->networkx.to_undirected(self.Muv)
A:networkx.classes.tests.test_graphviews.puv->pickle.loads(pickle.dumps(uv, -1))
A:networkx.classes.tests.test_graphviews.cls.G->networkx.path_graph(9)
A:networkx.classes.tests.test_graphviews.cls.DG->networkx.path_graph(9, create_using=nx.DiGraph())
A:networkx.classes.tests.test_graphviews.cls.MG->networkx.path_graph(9, create_using=nx.MultiGraph())
A:networkx.classes.tests.test_graphviews.cls.MDG->networkx.path_graph(9, create_using=nx.MultiDiGraph())
A:networkx.classes.tests.test_graphviews.cls.Gv->networkx.to_undirected(cls.DG)
A:networkx.classes.tests.test_graphviews.cls.DGv->networkx.to_directed(cls.G)
A:networkx.classes.tests.test_graphviews.cls.MGv->networkx.to_undirected(cls.MDG)
A:networkx.classes.tests.test_graphviews.cls.MDGv->networkx.to_directed(cls.MG)
A:networkx.classes.tests.test_graphviews.cls.Rv->cls.DG.reverse()
A:networkx.classes.tests.test_graphviews.cls.MRv->cls.MDG.reverse()
A:networkx.classes.tests.test_graphviews.H->G.subgraph([4, 5, 6]).copy()
A:networkx.classes.tests.test_graphviews.SGv->networkx.subgraph(self.G, range(3, 7))
A:networkx.classes.tests.test_graphviews.SDGv->networkx.subgraph(self.DG, range(3, 7))
A:networkx.classes.tests.test_graphviews.SMGv->networkx.subgraph(self.MG, range(3, 7))
A:networkx.classes.tests.test_graphviews.SMDGv->networkx.subgraph(self.MDG, range(3, 7))
A:networkx.classes.tests.test_graphviews.SG->MyGraph(origG).subgraph([4, 5, 6])
A:networkx.classes.tests.test_graphviews.SSG->MyGraph(origG).subgraph([4, 5, 6]).edge_subgraph([(4, 5), (5, 4)])
A:networkx.classes.tests.test_graphviews.RG->networkx.restricted_view(self.G, hide_nodes, hide_edges)
A:networkx.classes.tests.test_graphviews.CG->self.G.copy()
A:networkx.classes.tests.test_graphviews.SSSG->self.G.subgraph(nodes)
A:networkx.classes.tests.test_graphviews.RSG->networkx.restricted_view(SSSG, hide_nodes, hide_edges)
A:networkx.classes.tests.test_graphviews.USSG->MyGraph(origG).subgraph([4, 5, 6]).edge_subgraph([(4, 5), (5, 4)]).to_undirected()
A:networkx.classes.tests.test_graphviews.CSG->MyGraph(origG).subgraph([4, 5, 6]).copy(as_view=True)
A:networkx.classes.tests.test_graphviews.DCSG->MyGraph(origG).subgraph([4, 5, 6]).copy(as_view=False)
networkx.classes.tests.test_graphviews.TestChainsOfViews
networkx.classes.tests.test_graphviews.TestChainsOfViews.setup_class(cls)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_disubgraph(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multidisubgraph(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_multisubgraph(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_of_view(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_copy_subgraph(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_pickle(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_restricted_induced_subgraph_chains(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_reverse_copy(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_reverse_subgraph_toundirected(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subclass(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_copy(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_edgesubgraph_toundirected(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_of_subgraph(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_todirected(self)
networkx.classes.tests.test_graphviews.TestChainsOfViews.test_subgraph_toundirected(self)
networkx.classes.tests.test_graphviews.TestMultiReverseView
networkx.classes.tests.test_graphviews.TestMultiReverseView.setup_method(self)
networkx.classes.tests.test_graphviews.TestMultiReverseView.test_contains(self)
networkx.classes.tests.test_graphviews.TestMultiReverseView.test_exceptions(self)
networkx.classes.tests.test_graphviews.TestMultiReverseView.test_iter(self)
networkx.classes.tests.test_graphviews.TestMultiReverseView.test_pickle(self)
networkx.classes.tests.test_graphviews.TestReverseView
networkx.classes.tests.test_graphviews.TestReverseView.setup_method(self)
networkx.classes.tests.test_graphviews.TestReverseView.test_contains(self)
networkx.classes.tests.test_graphviews.TestReverseView.test_exceptions(self)
networkx.classes.tests.test_graphviews.TestReverseView.test_iter(self)
networkx.classes.tests.test_graphviews.TestReverseView.test_pickle(self)
networkx.classes.tests.test_graphviews.TestReverseView.test_subclass(self)
networkx.classes.tests.test_graphviews.TestToDirected
networkx.classes.tests.test_graphviews.TestToDirected.setup_method(self)
networkx.classes.tests.test_graphviews.TestToDirected.test_already_directed(self)
networkx.classes.tests.test_graphviews.TestToDirected.test_contains(self)
networkx.classes.tests.test_graphviews.TestToDirected.test_directed(self)
networkx.classes.tests.test_graphviews.TestToDirected.test_iter(self)
networkx.classes.tests.test_graphviews.TestToDirected.test_pickle(self)
networkx.classes.tests.test_graphviews.TestToUndirected
networkx.classes.tests.test_graphviews.TestToUndirected.setup_method(self)
networkx.classes.tests.test_graphviews.TestToUndirected.test_already_directed(self)
networkx.classes.tests.test_graphviews.TestToUndirected.test_contains(self)
networkx.classes.tests.test_graphviews.TestToUndirected.test_directed(self)
networkx.classes.tests.test_graphviews.TestToUndirected.test_iter(self)
networkx.classes.tests.test_graphviews.TestToUndirected.test_pickle(self)
networkx.classes.tests.test_graphviews.test_generic_multitype()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_multigraph.py----------------------------------------
A:networkx.classes.tests.test_multigraph.H->self.Graph(nx.to_dict_of_dicts(G), multigraph_input=mgi)
A:networkx.classes.tests.test_multigraph.G->networkx.MultiGraph()
A:networkx.classes.tests.test_multigraph.self.K3->self.Graph()
A:networkx.classes.tests.test_multigraph.edata0->dict(w=200, s='foo')
A:networkx.classes.tests.test_multigraph.edata1->dict(w=201, s='bar')
A:networkx.classes.tests.test_multigraph.self.H->networkx.MultiGraph().edge_subgraph([(0, 1, 0), (3, 4, 1)])
A:networkx.classes.tests.test_multigraph.self.K3._adj->self.K3.adjlist_outer_dict_factory({0: self.K3.adjlist_inner_dict_factory(), 1: self.K3.adjlist_inner_dict_factory(), 2: self.K3.adjlist_inner_dict_factory()})
A:networkx.classes.tests.test_multigraph.self.K3._node->self.K3.node_dict_factory()
A:networkx.classes.tests.test_multigraph.self.K3._node[0]->self.K3.node_attr_dict_factory()
A:networkx.classes.tests.test_multigraph.self.K3._node[1]->self.K3.node_attr_dict_factory()
A:networkx.classes.tests.test_multigraph.self.K3._node[2]->self.K3.node_attr_dict_factory()
networkx.classes.tests.test_MultiGraphSubClass(nx.MultiGraph)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester(BaseAttrGraphTester)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.graphs_equal(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_lookup(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_number_of_edges_selfloops(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multigraph.CustomDictClass(UserDict)
networkx.classes.tests.test_multigraph.MultiGraphSubClass(nx.MultiGraph)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.setup_method(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_add_node(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_edges(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_correct_nodes(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_edge_attr_dict(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_graph_attr_dict(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_node_attr_dict(self)
networkx.classes.tests.test_multigraph.TestEdgeSubgraph.test_remove_node(self)
networkx.classes.tests.test_multigraph.TestMultiGraph(BaseMultiGraphTester,_TestGraph)
networkx.classes.tests.test_multigraph.TestMultiGraph.setup_method(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_multigraph_input(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_multigraph_add_edges_from_four_tuple_misordered(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_non_multigraph_input(self,dod,mgi,edges)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_non_multigraph_input_mgi_none(self,dod,edges)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_non_multigraph_input_raise(self,dod)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node(self)
networkx.classes.tests.test_multigraph.TestMultiGraphSubclass(TestMultiGraph)
networkx.classes.tests.test_multigraph.TestMultiGraphSubclass.setup_method(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_subgraphviews.py----------------------------------------
A:networkx.classes.tests.test_subgraphviews.gview->staticmethod(nx.graphviews.subgraph_view)
A:networkx.classes.tests.test_subgraphviews.hide_edges_filter->staticmethod(nx.filters.hide_multidiedges)
A:networkx.classes.tests.test_subgraphviews.show_edges_filter->staticmethod(nx.filters.show_multidiedges)
A:networkx.classes.tests.test_subgraphviews.cls.G->networkx.path_graph(9, create_using=cls.graph())
A:networkx.classes.tests.test_subgraphviews.nodes_gone->networkx.filters.hide_nodes(hide_nodes)
A:networkx.classes.tests.test_subgraphviews.G->self.gview(self.G, nodes_gone, edges_gone)
A:networkx.classes.tests.test_subgraphviews.edges_gone->self.hide_edges_filter(self.hide_edges)
A:networkx.classes.tests.test_subgraphviews.induced_subgraph->networkx.filters.show_nodes([2, 3, 111])
A:networkx.classes.tests.test_subgraphviews.edge_subgraph->self.show_edges_filter(show_edges)
A:networkx.classes.tests.test_subgraphviews.cls.K3G->networkx.complete_graph(3)
A:networkx.classes.tests.test_subgraphviews.H->networkx.induced_subgraph(G, [0, 1])
A:networkx.classes.tests.test_subgraphviews.cls.GG->networkx.path_graph(5)
A:networkx.classes.tests.test_subgraphviews.cls.H->networkx.edge_subgraph(G, [(0, 1), (3, 4)])
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.setup_class(cls)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_add_node(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_edges(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_correct_nodes(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_edge_attr_dict(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_graph_attr_dict(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_node_attr_dict(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_readonly(self)
networkx.classes.tests.test_subgraphviews.TestEdgeSubGraph.test_remove_node(self)
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.graphs_equal(self,H,G)
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.same_attrdict(self,H,G)
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.setup_class(cls)
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_full_graph(self)
networkx.classes.tests.test_subgraphviews.TestInducedSubGraph.test_partial_subgraph(self)
networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView(TestMultiGraphView,TestSubDiGraphView)
networkx.classes.tests.test_subgraphviews.TestMultiDiGraphView.test_inout_degree(self)
networkx.classes.tests.test_subgraphviews.TestMultiGraphView(TestSubGraphView)
networkx.classes.tests.test_subgraphviews.TestMultiGraphView.setup_class(cls)
networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_hidden_edges(self)
networkx.classes.tests.test_subgraphviews.TestMultiGraphView.test_shown_edges(self)
networkx.classes.tests.test_subgraphviews.TestSubDiGraphView(TestSubGraphView)
networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inout_degree(self)
networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_inoutedges(self)
networkx.classes.tests.test_subgraphviews.TestSubDiGraphView.test_pred(self)
networkx.classes.tests.test_subgraphviews.TestSubGraphView
networkx.classes.tests.test_subgraphviews.TestSubGraphView.setup_class(cls)
networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_edges(self)
networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_hidden_nodes(self)
networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_edges(self)
networkx.classes.tests.test_subgraphviews.TestSubGraphView.test_shown_node(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_special.py----------------------------------------
A:networkx.classes.tests.test_special.G->MyGraph()
A:networkx.classes.tests.test_special.self.K3->self.Graph()
A:networkx.classes.tests.test_special.self.P3->self.Graph()
networkx.classes.tests.test_special.TestSpecialDiGraph(_TestDiGraph)
networkx.classes.tests.test_special.TestSpecialDiGraph.setup_method(self)
networkx.classes.tests.test_special.TestSpecialGraph(_TestGraph)
networkx.classes.tests.test_special.TestSpecialGraph.setup_method(self)
networkx.classes.tests.test_special.TestSpecialMultiDiGraph(_TestMultiDiGraph)
networkx.classes.tests.test_special.TestSpecialMultiDiGraph.setup_method(self)
networkx.classes.tests.test_special.TestSpecialMultiGraph(_TestMultiGraph)
networkx.classes.tests.test_special.TestSpecialMultiGraph.setup_method(self)
networkx.classes.tests.test_special.TestThinDiGraph(BaseDiGraphTester)
networkx.classes.tests.test_special.TestThinDiGraph.setup_method(self)
networkx.classes.tests.test_special.TestThinGraph(BaseGraphTester)
networkx.classes.tests.test_special.TestThinGraph.setup_method(self)
networkx.classes.tests.test_special.test_factories()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_coreviews.py----------------------------------------
A:networkx.classes.tests.test_coreviews.self.av->networkx.classes.coreviews.UnionAtlas(self.s, self.p)
A:networkx.classes.tests.test_coreviews.pview->pickle.loads(pickle.dumps(view, -1))
A:networkx.classes.tests.test_coreviews.avcopy->self.adjview.copy()
A:networkx.classes.tests.test_coreviews.out->str(dict(self.adjview))
A:networkx.classes.tests.test_coreviews.self.adjview->networkx.classes.coreviews.UnionMultiAdjacency(self.s, self.p)
A:networkx.classes.tests.test_coreviews.view_items->sorted(((n, dict(d)) for (n, d) in self.adjview.items()))
A:networkx.classes.tests.test_coreviews.expected->dict(self.p.items())
A:networkx.classes.tests.test_coreviews.G->networkx.path_graph(4, Graph)
A:networkx.classes.tests.test_coreviews.SG->networkx.path_graph(4, Graph).subgraph([2, 3])
A:networkx.classes.tests.test_coreviews.RG->SubGraph(G, nx.filters.hide_nodes([0, 1]))
A:networkx.classes.tests.test_coreviews.SGC->networkx.path_graph(4, Graph).subgraph([2, 3]).copy()
A:networkx.classes.tests.test_coreviews.RGC->SubGraph(G, nx.filters.hide_nodes([0, 1])).copy()
A:networkx.classes.tests.test_coreviews.RsG->SubGraph(G, nx.filters.show_nodes([2, 3]))
networkx.classes.tests.test_coreviews.TestAdjacencyView
networkx.classes.tests.test_coreviews.TestAdjacencyView.setup_method(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_copy(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_getitem(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_items(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_iter(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_len(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_pickle(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_repr(self)
networkx.classes.tests.test_coreviews.TestAdjacencyView.test_str(self)
networkx.classes.tests.test_coreviews.TestAtlasView
networkx.classes.tests.test_coreviews.TestAtlasView.setup_method(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_copy(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_getitem(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_items(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_iter(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_len(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_pickle(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_repr(self)
networkx.classes.tests.test_coreviews.TestAtlasView.test_str(self)
networkx.classes.tests.test_coreviews.TestFilteredGraphs
networkx.classes.tests.test_coreviews.TestFilteredGraphs.setup_method(self)
networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_copy(self)
networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_hide_show_nodes(self)
networkx.classes.tests.test_coreviews.TestFilteredGraphs.test_str_repr(self)
networkx.classes.tests.test_coreviews.TestMultiAdjacencyView(TestAdjacencyView)
networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.setup_method(self)
networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_copy(self)
networkx.classes.tests.test_coreviews.TestMultiAdjacencyView.test_getitem(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency
networkx.classes.tests.test_coreviews.TestUnionAdjacency.setup_method(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_copy(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_getitem(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_iter(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_len(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_pickle(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_repr(self)
networkx.classes.tests.test_coreviews.TestUnionAdjacency.test_str(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas
networkx.classes.tests.test_coreviews.TestUnionAtlas.setup_method(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_copy(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_getitem(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_items(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_iter(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_len(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_pickle(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_repr(self)
networkx.classes.tests.test_coreviews.TestUnionAtlas.test_str(self)
networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency(TestUnionAdjacency)
networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.setup_method(self)
networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_copy(self)
networkx.classes.tests.test_coreviews.TestUnionMultiAdjacency.test_getitem(self)
networkx.classes.tests.test_coreviews.TestUnionMultiInner(TestUnionAdjacency)
networkx.classes.tests.test_coreviews.TestUnionMultiInner.setup_method(self)
networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_copy(self)
networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_getitem(self)
networkx.classes.tests.test_coreviews.TestUnionMultiInner.test_len(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_graph_historical.py----------------------------------------
networkx.classes.tests.test_graph_historical.TestGraphHistorical(HistoricalTests)
networkx.classes.tests.test_graph_historical.TestGraphHistorical.setup_class(cls)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_multidigraph.py----------------------------------------
A:networkx.classes.tests.test_multidigraph.H->networkx.MultiDiGraph().to_undirected()
A:networkx.classes.tests.test_multidigraph.G->networkx.MultiDiGraph()
A:networkx.classes.tests.test_multidigraph.R->networkx.MultiDiGraph().reverse(copy=False)
A:networkx.classes.tests.test_multidigraph.self.K3->self.Graph()
A:networkx.classes.tests.test_multidigraph.self.H->networkx.MultiDiGraph().edge_subgraph([(0, 1, 0), (3, 4, 1)])
A:networkx.classes.tests.test_multidigraph.self.K3._succ->self.K3.adjlist_outer_dict_factory({0: self.K3.adjlist_inner_dict_factory(), 1: self.K3.adjlist_inner_dict_factory(), 2: self.K3.adjlist_inner_dict_factory()})
A:networkx.classes.tests.test_multidigraph.self.K3._node->self.K3.node_dict_factory()
A:networkx.classes.tests.test_multidigraph.self.K3._node[0]->self.K3.node_attr_dict_factory()
A:networkx.classes.tests.test_multidigraph.self.K3._node[1]->self.K3.node_attr_dict_factory()
A:networkx.classes.tests.test_multidigraph.self.K3._node[2]->self.K3.node_attr_dict_factory()
networkx.classes.tests.test_MultiDiGraphSubClass(nx.MultiDiGraph)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester(BaseMultiGraphTester)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_di_attributes_cached(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_multi(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_data(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_no_keys(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_data(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_multi(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_multidigraph.CustomDictClass(UserDict)
networkx.classes.tests.test_multidigraph.MultiDiGraphSubClass(nx.MultiDiGraph)
networkx.classes.tests.test_multidigraph.TestEdgeSubgraph(_TestMultiGraphEdgeSubgraph)
networkx.classes.tests.test_multidigraph.TestEdgeSubgraph.setup_method(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph(BaseMultiDiGraphTester,_TestMultiGraph)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setup_method(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraphSubclass(TestMultiDiGraph)
networkx.classes.tests.test_multidigraph.TestMultiDiGraphSubclass.setup_method(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/classes/tests/test_reportviews.py----------------------------------------
A:networkx.classes.tests.test_reportviews.cls.G->networkx.path_graph(6, cls.GRAPH())
A:networkx.classes.tests.test_reportviews.pnv->pickle.loads(pickle.dumps(nv, -1))
A:networkx.classes.tests.test_reportviews.G->networkx.path_graph(5, graph())
A:networkx.classes.tests.test_reportviews.inv->iter(nv)
A:networkx.classes.tests.test_reportviews.inv2->iter(nv)
A:networkx.classes.tests.test_reportviews.nnv->nv(data=False)
A:networkx.classes.tests.test_reportviews.cls.nv->cls.G.nodes.data('foo', default=1)
A:networkx.classes.tests.test_reportviews.cls.ndv->cls.G.nodes.data(True)
A:networkx.classes.tests.test_reportviews.cls.nwv->cls.G.nodes.data('foo')
A:networkx.classes.tests.test_reportviews.ndvfalse->G.nodes.data().data(False)
A:networkx.classes.tests.test_reportviews.msg->str([(n, {}) for n in range(9)])
A:networkx.classes.tests.test_reportviews.nv->networkx.path_graph(5, graph()).nodes.data()
A:networkx.classes.tests.test_reportviews.nwv->networkx.path_graph(5, graph()).nodes.data('foo')
A:networkx.classes.tests.test_reportviews.nwv_def->networkx.path_graph(5, graph()).nodes(data='foo', default='biz')
A:networkx.classes.tests.test_reportviews.ndv->networkx.path_graph(5, graph()).nodes.data(True)
A:networkx.classes.tests.test_reportviews.H->self.G.copy()
A:networkx.classes.tests.test_reportviews.Gn->networkx.path_graph(5, graph()).nodes.data('foo')
A:networkx.classes.tests.test_reportviews.some_nodes->self.n_its(range(5, 12))
A:networkx.classes.tests.test_reportviews.ev->self.eview(self.G)
A:networkx.classes.tests.test_reportviews.pev->pickle.loads(pickle.dumps(ev, -1))
A:networkx.classes.tests.test_reportviews.rep->str([(0, 0), (1, 1), (2, 1), (3, 3), (4, 1), (5, 1)])
A:networkx.classes.tests.test_reportviews.evr->self.eview(G)
A:networkx.classes.tests.test_reportviews.ev_def->evr(data='foo', default=1)
A:networkx.classes.tests.test_reportviews.iev->iter(ev)
A:networkx.classes.tests.test_reportviews.edv->ev()
A:networkx.classes.tests.test_reportviews.evn->ev(nbunch=[0, 2])
A:networkx.classes.tests.test_reportviews.elist->sorted([(i, i + 1, 0) for i in range(8)] + [(1, 2, 3)])
A:networkx.classes.tests.test_reportviews.pdeg->pickle.loads(pickle.dumps(deg, -1))
A:networkx.classes.tests.test_reportviews.dv->self.dview(self.G)
A:networkx.classes.tests.test_reportviews.idv->iter(dv)
A:networkx.classes.tests.test_reportviews.dvn->dv([2, 3])
A:networkx.classes.tests.test_reportviews.dvw->dv([2, 3], weight='foo')
A:networkx.classes.tests.test_reportviews.dvd->dict(dv(weight='foo'))
A:networkx.classes.tests.test_reportviews.view->reportview(G)
A:networkx.classes.tests.test_reportviews.errmsg->str(exc.value)
networkx.classes.tests.test_reportviews.TestDegreeView
networkx.classes.tests.test_reportviews.TestDegreeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_iter(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_len(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_pickle(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestDiDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestDiDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestDiMultiDegreeView(TestMultiDegreeView)
networkx.classes.tests.test_reportviews.TestDiMultiDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView
networkx.classes.tests.test_reportviews.TestEdgeDataView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iter(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_iterdata(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_len(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_pickle(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestEdgeDataView.test_str(self)
networkx.classes.tests.test_reportviews.TestEdgeView
networkx.classes.tests.test_reportviews.TestEdgeView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestEdgeView.test_and(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_call(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_contains(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_data(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_iter(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_len(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_or(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_pickle(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_str(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_sub(self)
networkx.classes.tests.test_reportviews.TestEdgeView.test_xor(self)
networkx.classes.tests.test_reportviews.TestInDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestInDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestInDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestInDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestInDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestInDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestInEdgeDataView(TestOutEdgeDataView)
networkx.classes.tests.test_reportviews.TestInEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestInEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestInEdgeView(TestEdgeView)
networkx.classes.tests.test_reportviews.TestInEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestInEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestInEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestInMultiDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView(TestOutMultiEdgeDataView)
networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestInMultiEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestInMultiEdgeView(TestMultiEdgeView)
networkx.classes.tests.test_reportviews.TestInMultiEdgeView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestInMultiEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestInMultiEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestMultiDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestMultiDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeDataView(TestEdgeDataView)
networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView(TestEdgeView)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_and(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_call(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_data(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iter(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_iterkeys(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_or(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_str(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_sub(self)
networkx.classes.tests.test_reportviews.TestMultiEdgeView.test_xor(self)
networkx.classes.tests.test_reportviews.TestNodeDataView
networkx.classes.tests.test_reportviews.TestNodeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_contains(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_iter(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_pickle(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_str(self)
networkx.classes.tests.test_reportviews.TestNodeDataView.test_viewtype(self)
networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps(TestNodeDataViewSetOps)
networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.n_its(self,nodes)
networkx.classes.tests.test_reportviews.TestNodeDataViewDefaultSetOps.setup_class(cls)
networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps(TestNodeViewSetOps)
networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.n_its(self,nodes)
networkx.classes.tests.test_reportviews.TestNodeDataViewSetOps.setup_class(cls)
networkx.classes.tests.test_reportviews.TestNodeView
networkx.classes.tests.test_reportviews.TestNodeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestNodeView.test_call(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_contains(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_iter(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_pickle(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestNodeView.test_str(self)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.n_its(self,nodes)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.setup_class(cls)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_and(self)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_len(self)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_or(self)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_sub(self)
networkx.classes.tests.test_reportviews.TestNodeViewSetOps.test_xor(self)
networkx.classes.tests.test_reportviews.TestOutDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestOutDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestOutDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestOutDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestOutDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestOutEdgeDataView(TestEdgeDataView)
networkx.classes.tests.test_reportviews.TestOutEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_len(self)
networkx.classes.tests.test_reportviews.TestOutEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestOutEdgeView(TestEdgeView)
networkx.classes.tests.test_reportviews.TestOutEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestOutEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView(TestDegreeView)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_getitem(self)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_repr(self)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_str(self)
networkx.classes.tests.test_reportviews.TestOutMultiDegreeView.test_weight(self)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView(TestOutEdgeDataView)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeDataView.test_repr(self)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeView(TestMultiEdgeView)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.modify_edge(self,G,e,**kwds)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.setup_class(cls)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_contains_with_nbunch(self)
networkx.classes.tests.test_reportviews.TestOutMultiEdgeView.test_repr(self)
networkx.classes.tests.test_reportviews.test_cache_dict_get_set_state(graph)
networkx.classes.tests.test_reportviews.test_nodedataview_unhashable()
networkx.classes.tests.test_reportviews.test_slicing_reportviews(reportview,err_msg_terms)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/laplacianmatrix.py----------------------------------------
A:networkx.linalg.laplacianmatrix.nodelist->list(G)
A:networkx.linalg.laplacianmatrix.A->A.toarray().toarray()
A:networkx.linalg.laplacianmatrix.D->scipy.sparse.csr_array(sp.sparse.spdiags(diags, 0, m, n, format='csr'))
A:networkx.linalg.laplacianmatrix.diags->A.toarray().toarray().sum(axis=1)
A:networkx.linalg.laplacianmatrix.DH->scipy.sparse.csr_array(sp.sparse.spdiags(diags_sqrt, 0, m, n, format='csr'))
A:networkx.linalg.laplacianmatrix.G_laplacian->networkx.laplacian_matrix(G, weight=weight).toarray()
A:networkx.linalg.laplacianmatrix.P->_transition_matrix(G, nodelist=nodelist, weight=weight, walk_type=walk_type, alpha=alpha)
A:networkx.linalg.laplacianmatrix.(evals, evecs)->scipy.sparse.linalg.eigs(P.T, k=1)
A:networkx.linalg.laplacianmatrix.sqrtp->numpy.sqrt(p)
A:networkx.linalg.laplacianmatrix.I->scipy.sparse.csr_array(sp.sparse.identity(n))
A:networkx.linalg.laplacianmatrix.Phi->scipy.sparse.csr_array(sp.sparse.spdiags(p, 0, n, n)).toarray()
A:networkx.linalg.laplacianmatrix.DI->scipy.sparse.csr_array(sp.sparse.spdiags(1.0 / A.sum(axis=1), 0, n, n))
networkx.linalg.laplacianmatrix._transition_matrix(G,nodelist=None,weight='weight',walk_type=None,alpha=0.95)
networkx.linalg.laplacianmatrix.directed_combinatorial_laplacian_matrix(G,nodelist=None,weight='weight',walk_type=None,alpha=0.95)
networkx.linalg.laplacianmatrix.directed_laplacian_matrix(G,nodelist=None,weight='weight',walk_type=None,alpha=0.95)
networkx.linalg.laplacianmatrix.laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.normalized_laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.total_spanning_tree_weight(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/attrmatrix.py----------------------------------------
A:networkx.linalg.attrmatrix.edge_value->_edge_value(G, edge_attr)
A:networkx.linalg.attrmatrix.node_value->_node_value(G, node_attr)
A:networkx.linalg.attrmatrix.ordering->list({node_value(n) for n in G})
A:networkx.linalg.attrmatrix.N->len(ordering)
A:networkx.linalg.attrmatrix.index->dict(zip(ordering, range(N)))
A:networkx.linalg.attrmatrix.M->scipy.sparse.lil_array((N, N), dtype=dtype)
A:networkx.linalg.attrmatrix.seen->set()
networkx.linalg.attrmatrix._edge_value(G,edge_attr)
networkx.linalg.attrmatrix._node_value(G,node_attr)
networkx.linalg.attrmatrix.attr_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None,order=None)
networkx.linalg.attrmatrix.attr_sparse_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/algebraicconnectivity.py----------------------------------------
A:networkx.linalg.algebraicconnectivity.B->numpy.asarray(B)
A:networkx.linalg.algebraicconnectivity.X->numpy.asarray(np.atleast_2d(x).T)
A:networkx.linalg.algebraicconnectivity.X[:, j]->self._LU.solve(B[:, j])
A:networkx.linalg.algebraicconnectivity.x->numpy.ndarray(n, dtype=float)
A:networkx.linalg.algebraicconnectivity.r->scipy.linalg.blas.daxpy(Ap, r, a=-alpha)
A:networkx.linalg.algebraicconnectivity.z->M(r)
A:networkx.linalg.algebraicconnectivity.rz->scipy.linalg.blas.ddot(r, z)
A:networkx.linalg.algebraicconnectivity.p->scipy.linalg.blas.daxpy(p, z, a=beta)
A:networkx.linalg.algebraicconnectivity.Ap->A(p)
A:networkx.linalg.algebraicconnectivity.beta->scipy.linalg.blas.ddot(r, z)
A:networkx.linalg.algebraicconnectivity.self._LU->scipy.sparse.linalg.splu(A, permc_spec='MMD_AT_PLUS_A', diag_pivot_thresh=0.0, options={'Equil': True, 'SymmetricMode': True})
A:networkx.linalg.algebraicconnectivity.H->networkx.Graph()
A:networkx.linalg.algebraicconnectivity.G->_preprocess_graph(G, weight)
A:networkx.linalg.algebraicconnectivity.order->reverse_cuthill_mckee_ordering(G)
A:networkx.linalg.algebraicconnectivity.n->len(nodelist)
A:networkx.linalg.algebraicconnectivity.index->dict(zip(nodelist, range(n)))
A:networkx.linalg.algebraicconnectivity.e->numpy.sqrt(L.diagonal())
A:networkx.linalg.algebraicconnectivity.D->scipy.sparse.csc_array(sp.sparse.spdiags(1.0 / np.sqrt(L.diagonal()), [0], n, n, format='csc'))
A:networkx.linalg.algebraicconnectivity.solver->_LUSolver(A)
A:networkx.linalg.algebraicconnectivity.A->scipy.sparse.csc_array(L, dtype=float, copy=True)
A:networkx.linalg.algebraicconnectivity.i->(A.indptr[1:] - A.indptr[:-1]).argmax()
A:networkx.linalg.algebraicconnectivity.A[i, i]->float('inf')
A:networkx.linalg.algebraicconnectivity.Lnorm->abs(L).sum(axis=1).flatten().max()
A:networkx.linalg.algebraicconnectivity.W->numpy.ndarray(X.shape, order='F')
A:networkx.linalg.algebraicconnectivity.(sigma, Y)->scipy.linalg.eigh(H, overwrite_a=True)
A:networkx.linalg.algebraicconnectivity.W[:, :]->_LUSolver(A).solve(X, tol)
A:networkx.linalg.algebraicconnectivity.(sigma, X)->scipy.sparse.linalg.lobpcg(L, X, M=M, Y=np.atleast_2d(Y).T, tol=tol, maxiter=n, largest=False)
A:networkx.linalg.algebraicconnectivity.L->networkx.laplacian_matrix(G, component)
A:networkx.linalg.algebraicconnectivity.M->scipy.sparse.csr_array(sp.sparse.spdiags(1.0 / L.diagonal(), 0, n, n))
A:networkx.linalg.algebraicconnectivity.Y->numpy.ones(n)
A:networkx.linalg.algebraicconnectivity.find_fiedler->_get_fiedler_func(method)
A:networkx.linalg.algebraicconnectivity.(sigma, fiedler)->find_fiedler(L, x, normalized, tol, seed)
A:networkx.linalg.algebraicconnectivity.size->len(component)
A:networkx.linalg.algebraicconnectivity.sort_info->zip(fiedler, range(size), component)
networkx.linalg._LUSolver(self,A)
networkx.linalg._LUSolver.solve(self,B,tol=None)
networkx.linalg._PCGSolver(self,A,M)
networkx.linalg._PCGSolver._solve(self,b,tol)
networkx.linalg._PCGSolver.solve(self,B,tol)
networkx.linalg._get_fiedler_func(method)
networkx.linalg._preprocess_graph(G,weight)
networkx.linalg._rcm_estimate(G,nodelist)
networkx.linalg._tracemin_fiedler(L,X,normalized,tol,method)
networkx.linalg.algebraic_connectivity(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)
networkx.linalg.algebraicconnectivity._LUSolver(self,A)
networkx.linalg.algebraicconnectivity._LUSolver.__init__(self,A)
networkx.linalg.algebraicconnectivity._LUSolver.solve(self,B,tol=None)
networkx.linalg.algebraicconnectivity._PCGSolver(self,A,M)
networkx.linalg.algebraicconnectivity._PCGSolver.__init__(self,A,M)
networkx.linalg.algebraicconnectivity._PCGSolver._solve(self,b,tol)
networkx.linalg.algebraicconnectivity._PCGSolver.solve(self,B,tol)
networkx.linalg.algebraicconnectivity._get_fiedler_func(method)
networkx.linalg.algebraicconnectivity._preprocess_graph(G,weight)
networkx.linalg.algebraicconnectivity._rcm_estimate(G,nodelist)
networkx.linalg.algebraicconnectivity._tracemin_fiedler(L,X,normalized,tol,method)
networkx.linalg.algebraicconnectivity.algebraic_connectivity(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)
networkx.linalg.algebraicconnectivity.fiedler_vector(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)
networkx.linalg.algebraicconnectivity.spectral_ordering(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)
networkx.linalg.fiedler_vector(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)
networkx.linalg.spectral_ordering(G,weight='weight',normalized=False,tol=1e-08,method='tracemin_pcg',seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/modularitymatrix.py----------------------------------------
A:networkx.linalg.modularitymatrix.nodelist->list(G)
A:networkx.linalg.modularitymatrix.A->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, format='csr')
A:networkx.linalg.modularitymatrix.k->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, format='csr').sum(axis=1)
A:networkx.linalg.modularitymatrix.k_in->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, format='csr').sum(axis=0)
A:networkx.linalg.modularitymatrix.k_out->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, format='csr').sum(axis=1)
A:networkx.linalg.modularitymatrix.m->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, format='csr').sum(axis=0).sum()
networkx.linalg.modularitymatrix.directed_modularity_matrix(G,nodelist=None,weight=None)
networkx.linalg.modularitymatrix.modularity_matrix(G,nodelist=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/graphmatrix.py----------------------------------------
A:networkx.linalg.graphmatrix.nodelist->list(G)
A:networkx.linalg.graphmatrix.edgelist->list(G.edges())
A:networkx.linalg.graphmatrix.A->scipy.sparse.lil_array((len(nodelist), len(edgelist)))
A:networkx.linalg.graphmatrix.wt->G[u][v].get(weight, 1)
networkx.linalg.graphmatrix.adjacency_matrix(G,nodelist=None,dtype=None,weight='weight')
networkx.linalg.graphmatrix.incidence_matrix(G,nodelist=None,edgelist=None,oriented=False,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/spectrum.py----------------------------------------
networkx.linalg.spectrum.adjacency_spectrum(G,weight='weight')
networkx.linalg.spectrum.bethe_hessian_spectrum(G,r=None)
networkx.linalg.spectrum.laplacian_spectrum(G,weight='weight')
networkx.linalg.spectrum.modularity_spectrum(G)
networkx.linalg.spectrum.normalized_laplacian_spectrum(G,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/bethehessianmatrix.py----------------------------------------
A:networkx.linalg.bethehessianmatrix.nodelist->list(G)
A:networkx.linalg.bethehessianmatrix.A->networkx.to_scipy_sparse_array(G, nodelist=nodelist, format='csr')
A:networkx.linalg.bethehessianmatrix.D->scipy.sparse.csr_array(sp.sparse.spdiags(A.sum(axis=1), 0, m, n, format='csr'))
A:networkx.linalg.bethehessianmatrix.I->scipy.sparse.csr_array(sp.sparse.eye(m, n, format='csr'))
networkx.linalg.bethehessianmatrix.bethe_hessian_matrix(G,r=None,nodelist=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_bethehessian.py----------------------------------------
A:networkx.linalg.tests.test_bethehessian.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_bethehessian.cls.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_bethehessian.cls.P->networkx.path_graph(3)
A:networkx.linalg.tests.test_bethehessian.H->pytest.importorskip('numpy').array([[4, -2, 0], [-2, 5, -2], [0, -2, 4]])
networkx.linalg.tests.test_bethehessian.TestBetheHessian
networkx.linalg.tests.test_bethehessian.TestBetheHessian.setup_class(cls)
networkx.linalg.tests.test_bethehessian.TestBetheHessian.test_bethe_hessian(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_spectrum.py----------------------------------------
A:networkx.linalg.tests.test_spectrum.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_spectrum.cls.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_spectrum.cls.P->networkx.path_graph(3)
A:networkx.linalg.tests.test_spectrum.cls.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in cls.G.edges()))
A:networkx.linalg.tests.test_spectrum.cls.DG->networkx.DiGraph()
A:networkx.linalg.tests.test_spectrum.evals->pytest.importorskip('numpy').array([0.5 * (9 - np.sqrt(33)), 4, 0.5 * (9 + np.sqrt(33))])
A:networkx.linalg.tests.test_spectrum.e->sorted(nx.bethe_hessian_spectrum(self.P, r=2))
A:networkx.linalg.tests.test_spectrum.e1->sorted(nx.bethe_hessian_spectrum(self.P, r=1))
A:networkx.linalg.tests.test_spectrum.e2->sorted(nx.laplacian_spectrum(self.P))
networkx.linalg.tests.test_spectrum.TestSpectrum
networkx.linalg.tests.test_spectrum.TestSpectrum.setup_class(cls)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_bethe_hessian_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_modularity_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_normalized_laplacian_spectrum(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_modularity.py----------------------------------------
A:networkx.linalg.tests.test_modularity.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_modularity.cls.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_modularity.cls.DG->networkx.DiGraph()
A:networkx.linalg.tests.test_modularity.B->pytest.importorskip('numpy').array([[-0.2, 0.6, 0.8, -0.4, -0.4, -0.4], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.7, 0.4, -0.3, -0.6, 0.4, -0.6], [-0.2, -0.4, -0.2, -0.4, 0.6, 0.6], [-0.2, -0.4, -0.2, 0.6, -0.4, 0.6], [-0.1, -0.2, -0.1, 0.8, -0.2, -0.2]])
A:networkx.linalg.tests.test_modularity.G_weighted->self.G.copy()
A:networkx.linalg.tests.test_modularity.mm->networkx.directed_modularity_matrix(self.DG, nodelist=sorted(self.DG))
networkx.linalg.tests.test_modularity.TestModularity
networkx.linalg.tests.test_modularity.TestModularity.setup_class(cls)
networkx.linalg.tests.test_modularity.TestModularity.test_directed_modularity(self)
networkx.linalg.tests.test_modularity.TestModularity.test_modularity(self)
networkx.linalg.tests.test_modularity.TestModularity.test_modularity_weight(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_algebraic_connectivity.py----------------------------------------
A:networkx.linalg.tests.test_algebraic_connectivity.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_algebraic_connectivity.G->np.linalg.norm(x).Graph()
A:networkx.linalg.tests.test_algebraic_connectivity.L->np.linalg.norm(x).laplacian_matrix(G)
A:networkx.linalg.tests.test_algebraic_connectivity.nx->pytest.importorskip('numpy').linalg.norm(x)
A:networkx.linalg.tests.test_algebraic_connectivity.ny->pytest.importorskip('numpy').linalg.norm(y)
A:networkx.linalg.tests.test_algebraic_connectivity.A->pytest.importorskip('numpy').linalg.norm(x).laplacian_matrix(G).todense()
A:networkx.linalg.tests.test_algebraic_connectivity.x->pytest.importorskip('numpy').linalg.norm(x).fiedler_vector(G, normalized=normalized, tol=1e-12, method=method)
A:networkx.linalg.tests.test_algebraic_connectivity.ac->pytest.importorskip('numpy').linalg.norm(x).algebraic_connectivity(G, tol=1e-12, method=method, seed=1)
A:networkx.linalg.tests.test_algebraic_connectivity.order->pytest.importorskip('numpy').linalg.norm(x).spectral_ordering(G, normalized=normalized, method=method)
A:networkx.linalg.tests.test_algebraic_connectivity.path->list(range(10))
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_abbreviation_of_method(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene(self,normalized,sigma,laplacian_fn,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_problematic_graph_issue_2381(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_seed_argument(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes_multigraph(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle(self,normalized,expected_order,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph(self,graph)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_seed_argument(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton(self,graph)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes_multigraph(self,method)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method(self)
networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector(A,l,x)
networkx.linalg.tests.test_algebraic_connectivity.test_algebraic_connectivity_tracemin_chol()
networkx.linalg.tests.test_algebraic_connectivity.test_fiedler_vector_tracemin_chol()
networkx.linalg.tests.test_algebraic_connectivity.test_fiedler_vector_tracemin_unknown()
networkx.linalg.tests.test_algebraic_connectivity.test_spectral_ordering_tracemin_chol()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_graphmatrix.py----------------------------------------
A:networkx.linalg.tests.test_graphmatrix.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_graphmatrix.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_graphmatrix.MG->networkx.random_clustered_graph(deg, seed=42)
A:networkx.linalg.tests.test_graphmatrix.I->networkx.incidence_matrix(WMG, nodelist=sorted(WMG), edgelist=sorted(WMG.edges(keys=True)), oriented=True, weight='other').todense()
A:networkx.linalg.tests.test_graphmatrix.expected->pytest.importorskip('numpy').array([[1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1]])
A:networkx.linalg.tests.test_graphmatrix.cls.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_graphmatrix.cls.OI->pytest.importorskip('numpy').array([[-1, -1, -1, 0], [1, 0, 0, -1], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.cls.A->pytest.importorskip('numpy').array([[0, 1, 1, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.cls.WG->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_graphmatrix.cls.WA->pytest.importorskip('numpy').array([[0, 0.5, 0.5, 0.5, 0], [0.5, 0, 0.5, 0, 0], [0.5, 0.5, 0, 0, 0], [0.5, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.cls.MG->networkx.MultiGraph(cls.G)
A:networkx.linalg.tests.test_graphmatrix.cls.MG2->cls.MG.copy()
A:networkx.linalg.tests.test_graphmatrix.cls.MG2A->pytest.importorskip('numpy').array([[0, 2, 1, 1, 0], [2, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.cls.MGOI->pytest.importorskip('numpy').array([[-1, -1, -1, -1, 0], [1, 1, 0, 0, -1], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.cls.no_edges_G->networkx.Graph([(1, 2), (3, 2, {'weight': 8})])
A:networkx.linalg.tests.test_graphmatrix.cls.no_edges_A->pytest.importorskip('numpy').array([[0, 0], [0, 0]])
A:networkx.linalg.tests.test_graphmatrix.WMG->networkx.MultiGraph(self.WG)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setup_class(cls)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_weighted_incidence_matrix(self)
networkx.linalg.tests.test_graphmatrix.test_incidence_matrix_simple()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_laplacian.py----------------------------------------
A:networkx.linalg.tests.test_laplacian.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_laplacian.cls.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_laplacian.cls.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in cls.G.edges()))
A:networkx.linalg.tests.test_laplacian.cls.MG->networkx.MultiGraph(cls.G)
A:networkx.linalg.tests.test_laplacian.cls.Gsl->cls.G.copy()
A:networkx.linalg.tests.test_laplacian.NL->pytest.importorskip('numpy').array([[3, -1, -1, -1, 0], [-1, 2, -1, 0, 0], [-1, -1, 2, 0, 0], [-1, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_laplacian.G->networkx.DiGraph()
A:networkx.linalg.tests.test_laplacian.GL->pytest.importorskip('numpy').array([[0.0698, -0.0174, -0.0233, 0.0, 0.0, -0.0291], [-0.0174, 0.0465, -0.0058, 0.0, -0.0233, 0.0], [-0.0233, -0.0058, 0.0349, 0.0, -0.0058, 0.0], [0.0, 0.0, 0.0, 0.1163, -0.0581, -0.0581], [0.0, -0.0233, -0.0058, -0.0581, 0.1163, -0.0291], [-0.0291, 0.0, 0.0, -0.0581, -0.0291, 0.1163]])
A:networkx.linalg.tests.test_laplacian.Lsl->pytest.importorskip('numpy').array([[0.75, -0.2887, -0.2887, -0.3536, 0.0], [-0.2887, 0.6667, -0.3333, 0.0, 0.0], [-0.2887, -0.3333, 0.6667, 0.0, 0.0], [-0.3536, 0.0, 0.0, 0.5, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]])
A:networkx.linalg.tests.test_laplacian.L->networkx.directed_combinatorial_laplacian_matrix(E)
A:networkx.linalg.tests.test_laplacian.E->networkx.DiGraph(margulis_gabber_galil_graph(2))
A:networkx.linalg.tests.test_laplacian.expected->pytest.importorskip('numpy').array([[0.16666667, -0.08333333, -0.08333333, 0.0], [-0.08333333, 0.16666667, 0.0, -0.08333333], [-0.08333333, 0.0, 0.16666667, -0.08333333], [0.0, -0.08333333, -0.08333333, 0.16666667]])
networkx.linalg.tests.test_laplacian.TestLaplacian
networkx.linalg.tests.test_laplacian.TestLaplacian.setup_class(cls)
networkx.linalg.tests.test_laplacian.TestLaplacian.test_laplacian(self)
networkx.linalg.tests.test_laplacian.TestLaplacian.test_normalized_laplacian(self)
networkx.linalg.tests.test_laplacian.test_directed_combinatorial_laplacian()
networkx.linalg.tests.test_laplacian.test_directed_laplacian()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/linalg/tests/test_attrmatrix.py----------------------------------------
A:networkx.linalg.tests.test_attrmatrix.np->pytest.importorskip('numpy')
A:networkx.linalg.tests.test_attrmatrix.G->networkx.DiGraph()
A:networkx.linalg.tests.test_attrmatrix.M->networkx.attr_sparse_matrix(G, rc_order=[0, 1, 2])
A:networkx.linalg.tests.test_attrmatrix.data->pytest.importorskip('numpy').array([[0.0, 1.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0]])
networkx.linalg.tests.test_attrmatrix.test_attr_matrix()
networkx.linalg.tests.test_attrmatrix.test_attr_matrix_directed()
networkx.linalg.tests.test_attrmatrix.test_attr_matrix_multigraph()
networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix()
networkx.linalg.tests.test_attrmatrix.test_attr_sparse_matrix_directed()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/triads.py----------------------------------------
A:networkx.algorithms.triads.nodeset->set(G.nbunch_iter(nodelist))
A:networkx.algorithms.triads.N->len(G)
A:networkx.algorithms.triads.sgl->sum((1 for n in not_nodeset for nbr in sgl_nbrs[n] if nbr not in nodeset))
A:networkx.algorithms.triads.dbl->sum((1 for n in not_nodeset for nbr in dbl_nbrs[n] if nbr not in nodeset))
A:networkx.algorithms.triads.code->_tricode(G, v, u, w)
A:networkx.algorithms.triads.triplets->combinations(G.nodes(), 3)
A:networkx.algorithms.triads.all_tri->all_triads(G)
A:networkx.algorithms.triads.tri_by_type->defaultdict(list)
A:networkx.algorithms.triads.name->triad_type(triad)
A:networkx.algorithms.triads.num_edges->len(G.edges())
A:networkx.algorithms.triads.(e1, e2)->G.edges()
A:networkx.algorithms.triads.nodes->seed.sample(list(G.nodes()), 3)
A:networkx.algorithms.triads.G2->G.subgraph(nodes)
networkx.algorithms._tricode(G,v,u,w)
networkx.algorithms.all_triads(G)
networkx.algorithms.all_triplets(G)
networkx.algorithms.is_triad(G)
networkx.algorithms.random_triad(G,seed=None)
networkx.algorithms.triad_type(G)
networkx.algorithms.triadic_census(G,nodelist=None)
networkx.algorithms.triads._tricode(G,v,u,w)
networkx.algorithms.triads.all_triads(G)
networkx.algorithms.triads.all_triplets(G)
networkx.algorithms.triads.is_triad(G)
networkx.algorithms.triads.random_triad(G,seed=None)
networkx.algorithms.triads.triad_type(G)
networkx.algorithms.triads.triadic_census(G,nodelist=None)
networkx.algorithms.triads.triads_by_type(G)
networkx.algorithms.triads_by_type(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/polynomials.py----------------------------------------
A:networkx.algorithms.polynomials.x->sympy.Symbol('x')
A:networkx.algorithms.polynomials.y->sympy.Symbol('y')
A:networkx.algorithms.polynomials.stack->deque()
A:networkx.algorithms.polynomials.G->deque().pop()
A:networkx.algorithms.polynomials.bridges->set(nx.bridges(G))
A:networkx.algorithms.polynomials.loops->list(nx.selfloop_edges(G, keys=True))
A:networkx.algorithms.polynomials.C->networkx.contracted_edge(G, e, self_loops=True)
A:networkx.algorithms.polynomials.edges->list(G.edges)
networkx.algorithms.chromatic_polynomial(G)
networkx.algorithms.polynomials.chromatic_polynomial(G)
networkx.algorithms.polynomials.tutte_polynomial(G)
networkx.algorithms.tutte_polynomial(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bridges.py----------------------------------------
A:networkx.algorithms.bridges.multigraph->G.is_multigraph()
A:networkx.algorithms.bridges.chains->networkx.chain_decomposition(H, root=root)
A:networkx.algorithms.bridges.chain_edges->set(chain.from_iterable(chains))
A:networkx.algorithms.bridges.H_copy->H.subgraph(nx.node_connected_component(H, root)).copy().copy()
A:networkx.algorithms.bridges.H->H.subgraph(nx.node_connected_component(H, root)).copy().subgraph(nx.node_connected_component(H, root)).copy()
A:networkx.algorithms.bridges.wt->networkx.weighted._weight_function(G, weight)
A:networkx.algorithms.bridges.span->networkx.shortest_path_length(G, u, v, weight=hide_edge)
networkx.algorithms.bridges(G,root=None)
networkx.algorithms.bridges.bridges(G,root=None)
networkx.algorithms.bridges.has_bridges(G,root=None)
networkx.algorithms.bridges.local_bridges(G,with_span=True,weight=None)
networkx.algorithms.has_bridges(G,root=None)
networkx.algorithms.local_bridges(G,with_span=True,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/regular.py----------------------------------------
A:networkx.algorithms.regular.n1->networkx.utils.arbitrary_element(G)
A:networkx.algorithms.regular.d1->G.degree(n1)
A:networkx.algorithms.regular.d_in->G.in_degree(n1)
A:networkx.algorithms.regular.in_regular->all((d_in == d for (_, d) in G.in_degree))
A:networkx.algorithms.regular.d_out->G.out_degree(n1)
A:networkx.algorithms.regular.out_regular->all((d_out == d for (_, d) in G.out_degree))
A:networkx.algorithms.regular.neighbors->list(adj_view.keys())
A:networkx.algorithms.regular.edge_attrs->list(adj_view.values())
A:networkx.algorithms.regular.g->G.copy()
A:networkx.algorithms.regular.gadget->LargeKGadget(k, degree, node, g)
A:networkx.algorithms.regular.matching->max_weight_matching(g, maxcardinality=True, weight=matching_weight)
networkx.algorithms.is_k_regular(G,k)
networkx.algorithms.is_regular(G)
networkx.algorithms.k_factor(G,k,matching_weight='weight')
networkx.algorithms.regular.is_k_regular(G,k)
networkx.algorithms.regular.is_regular(G)
networkx.algorithms.regular.k_factor(G,k,matching_weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/summarization.py----------------------------------------
A:networkx.algorithms.summarization.high_degree_neighbors->frozenset(high_degree_nodes & set(G[node]))
A:networkx.algorithms.summarization.G->G.copy().copy()
A:networkx.algorithms.summarization.compressor_nodes->set()
A:networkx.algorithms.summarization.low_degree_node_count->len(low_degree_nodes)
A:networkx.algorithms.summarization.high_degree_node_count->len(high_degree_nodes)
A:networkx.algorithms.summarization.compression_node->''.join((str(node) for node in high_degree_nodes))
A:networkx.algorithms.summarization.output->G.copy().copy().__class__()
A:networkx.algorithms.summarization.node_label_lookup->dict()
A:networkx.algorithms.summarization.has_edge->G.copy().copy().__class__().has_edge(*summary_graph_edge)
A:networkx.algorithms.summarization.existing_edge_data->G.copy().copy().__class__().get_edge_data(*summary_graph_edge)
A:networkx.algorithms.summarization.group_size->len(current_group)
A:networkx.algorithms.summarization.edge_counts->Counter()
A:networkx.algorithms.summarization.new_group_mappings->defaultdict(set)
A:networkx.algorithms.summarization.signature->tuple((frozenset(edge_types) for edge_types in neighbor_info[node].values()))
A:networkx.algorithms.summarization.new_groups->sorted(new_group_mappings.values(), key=len)
A:networkx.algorithms.summarization.new_group_id->len(groups)
A:networkx.algorithms.summarization.groups->_snap_split(groups, neighbor_info, group_lookup, eligible_group_id)
A:networkx.algorithms.summarization.(eligible_group_id, neighbor_info)->_snap_eligible_group(G, groups, group_lookup, edge_types)
networkx.algorithms._snap_build_graph(G,groups,node_attributes,edge_attributes,neighbor_info,edge_types,prefix,supernode_attribute,superedge_attribute)
networkx.algorithms._snap_eligible_group(G,groups,group_lookup,edge_types)
networkx.algorithms._snap_split(groups,neighbor_info,group_lookup,group_id)
networkx.algorithms.dedensify(G,threshold,prefix=None,copy=True)
networkx.algorithms.snap_aggregation(G,node_attributes,edge_attributes=(),prefix='Supernode-',supernode_attribute='group',superedge_attribute='types')
networkx.algorithms.summarization._snap_build_graph(G,groups,node_attributes,edge_attributes,neighbor_info,edge_types,prefix,supernode_attribute,superedge_attribute)
networkx.algorithms.summarization._snap_eligible_group(G,groups,group_lookup,edge_types)
networkx.algorithms.summarization._snap_split(groups,neighbor_info,group_lookup,group_id)
networkx.algorithms.summarization.dedensify(G,threshold,prefix=None,copy=True)
networkx.algorithms.summarization.snap_aggregation(G,node_attributes,edge_attributes=(),prefix='Supernode-',supernode_attribute='group',superedge_attribute='types')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/graph_hashing.py----------------------------------------
A:networkx.algorithms.graph_hashing.label->_neighborhood_aggregate(G, node, labels, edge_attr=edge_attr)
A:networkx.algorithms.graph_hashing.new_labels[node]->_hash_label(label, digest_size)
A:networkx.algorithms.graph_hashing.node_labels->weisfeiler_lehman_step(G, node_labels, node_subgraph_hashes, edge_attr)
A:networkx.algorithms.graph_hashing.counter->Counter(node_labels.values())
A:networkx.algorithms.graph_hashing.hashed_label->_hash_label(label, digest_size)
A:networkx.algorithms.graph_hashing.node_subgraph_hashes->defaultdict(list)
networkx.algorithms._hash_label(label,digest_size)
networkx.algorithms._init_node_labels(G,edge_attr,node_attr)
networkx.algorithms._neighborhood_aggregate(G,node,node_labels,edge_attr=None)
networkx.algorithms.graph_hashing._hash_label(label,digest_size)
networkx.algorithms.graph_hashing._init_node_labels(G,edge_attr,node_attr)
networkx.algorithms.graph_hashing._neighborhood_aggregate(G,node,node_labels,edge_attr=None)
networkx.algorithms.graph_hashing.weisfeiler_lehman_graph_hash(G,edge_attr=None,node_attr=None,iterations=3,digest_size=16)
networkx.algorithms.graph_hashing.weisfeiler_lehman_subgraph_hashes(G,edge_attr=None,node_attr=None,iterations=3,digest_size=16)
networkx.algorithms.weisfeiler_lehman_graph_hash(G,edge_attr=None,node_attr=None,iterations=3,digest_size=16)
networkx.algorithms.weisfeiler_lehman_subgraph_hashes(G,edge_attr=None,node_attr=None,iterations=3,digest_size=16)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/threshold.py----------------------------------------
A:networkx.algorithms.threshold.(d, v)->degree_sequence(cs).pop()
A:networkx.algorithms.threshold.wseq->uncompact(creation_sequence)
A:networkx.algorithms.threshold.(w, label)->uncompact(creation_sequence).pop()
A:networkx.algorithms.threshold.ci->uncompact(creation_sequence)
A:networkx.algorithms.threshold.cs->uncompact(creation_sequence)
A:networkx.algorithms.threshold.G->networkx.empty_graph(0, create_using)
A:networkx.algorithms.threshold.(v, node_type)->uncompact(creation_sequence).pop(0)
A:networkx.algorithms.threshold.dsdict->dict(H.degree())
A:networkx.algorithms.threshold.(d, iso)->degree_sequence(cs).pop(0)
A:networkx.algorithms.threshold.(d, bigv)->degree_sequence(cs).pop()
A:networkx.algorithms.threshold.H->H.subgraph(H.neighbors(bigv)).subgraph(H.neighbors(bigv))
A:networkx.algorithms.threshold.dr->sum(ccs[::2])
A:networkx.algorithms.threshold.triseq->triangle_sequence(creation_sequence)
A:networkx.algorithms.threshold.degseq->degree_sequence(creation_sequence)
A:networkx.algorithms.threshold.rd->uncompact(creation_sequence).count('d')
A:networkx.algorithms.threshold.N->sum(ccs)
A:networkx.algorithms.threshold.two_size->sum(degree_sequence(creation_sequence))
A:networkx.algorithms.threshold.ds->degree_sequence(cs)
A:networkx.algorithms.threshold.uindex->verts.index(u)
A:networkx.algorithms.threshold.vindex->verts.index(v)
A:networkx.algorithms.threshold.bigind->max(uindex, vindex)
A:networkx.algorithms.threshold.vert->uncompact(creation_sequence).pop()
A:networkx.algorithms.threshold.i->[v[0] for v in creation_sequence].index(i)
A:networkx.algorithms.threshold.order->len(cs)
A:networkx.algorithms.threshold.ccs->make_compact(creation_sequence)
A:networkx.algorithms.threshold.c->sum((evv * uv for (evv, uv) in zip(ev, u)))
A:networkx.algorithms.threshold.row->len(degseq)
A:networkx.algorithms.threshold.bigdeg->degree_sequence(creation_sequence).pop()
A:networkx.algorithms.threshold.choice->seed.choice(dlist)
A:networkx.algorithms.threshold.split_to->seed.choice(range(choice))
A:networkx.algorithms.threshold.first_choice->seed.choice(dlist)
A:networkx.algorithms.threshold.second_choice->seed.choice(dlist)
networkx.algorithms.threshold.betweenness_sequence(creation_sequence,normalized=True)
networkx.algorithms.threshold.cluster_sequence(creation_sequence)
networkx.algorithms.threshold.creation_sequence(degree_sequence,with_labels=False,compact=False)
networkx.algorithms.threshold.creation_sequence_to_weights(creation_sequence)
networkx.algorithms.threshold.degree_correlation(creation_sequence)
networkx.algorithms.threshold.degree_sequence(creation_sequence)
networkx.algorithms.threshold.density(creation_sequence)
networkx.algorithms.threshold.eigenvalues(creation_sequence)
networkx.algorithms.threshold.eigenvectors(creation_sequence)
networkx.algorithms.threshold.find_alternating_4_cycle(G)
networkx.algorithms.threshold.find_creation_sequence(G)
networkx.algorithms.threshold.find_threshold_graph(G,create_using=None)
networkx.algorithms.threshold.is_threshold_graph(G)
networkx.algorithms.threshold.is_threshold_sequence(degree_sequence)
networkx.algorithms.threshold.left_d_threshold_sequence(n,m)
networkx.algorithms.threshold.make_compact(creation_sequence)
networkx.algorithms.threshold.random_threshold_sequence(n,p,seed=None)
networkx.algorithms.threshold.right_d_threshold_sequence(n,m)
networkx.algorithms.threshold.shortest_path(creation_sequence,u,v)
networkx.algorithms.threshold.shortest_path_length(creation_sequence,i)
networkx.algorithms.threshold.spectral_projection(u,eigenpairs)
networkx.algorithms.threshold.swap_d(cs,p_split=1.0,p_combine=1.0,seed=None)
networkx.algorithms.threshold.threshold_graph(creation_sequence,create_using=None)
networkx.algorithms.threshold.triangle_sequence(creation_sequence)
networkx.algorithms.threshold.triangles(creation_sequence)
networkx.algorithms.threshold.uncompact(creation_sequence)
networkx.algorithms.threshold.weights_to_creation_sequence(weights,threshold=1,with_labels=False,compact=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/chordal.py----------------------------------------
A:networkx.algorithms.chordal.H->G.copy()
A:networkx.algorithms.chordal.induced_nodes->set()
A:networkx.algorithms.chordal.triplet->_find_chordality_breaker(H, s, treewidth_bound)
A:networkx.algorithms.chordal.unnumbered->set(G)
A:networkx.algorithms.chordal.v->_max_cardinality_node(G, unnumbered, numbered)
A:networkx.algorithms.chordal.sg->G.subgraph(clique_wanna_be)
A:networkx.algorithms.chordal.max_clique->max(max_clique, len(clique))
A:networkx.algorithms.chordal.n->G.number_of_nodes()
A:networkx.algorithms.chordal.e->G.number_of_edges()
A:networkx.algorithms.chordal.nodes->set(G)
A:networkx.algorithms.chordal.number->len([y for y in G[x] if y in wanna_connect])
A:networkx.algorithms.chordal.s->arbitrary_element(G)
A:networkx.algorithms.chordal.current_treewidth->max(current_treewidth, len(clique_wanna_be))
A:networkx.algorithms.chordal.(u, w)->_find_missing_edge(sg)
A:networkx.algorithms.chordal.chords->set()
A:networkx.algorithms.chordal.unnumbered_nodes->list(H.nodes())
A:networkx.algorithms.chordal.z->max(unnumbered_nodes, key=lambda node: weight[node])
networkx.algorithms.chordal.NetworkXTreewidthBoundExceeded(nx.NetworkXException)
networkx.algorithms.chordal._find_chordality_breaker(G,s=None,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal._find_missing_edge(G)
networkx.algorithms.chordal._is_complete_graph(G)
networkx.algorithms.chordal._max_cardinality_node(G,choices,wanna_connect)
networkx.algorithms.chordal.chordal_graph_cliques(G)
networkx.algorithms.chordal.chordal_graph_treewidth(G)
networkx.algorithms.chordal.complete_to_chordal_graph(G)
networkx.algorithms.chordal.find_induced_nodes(G,s,t,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal.is_chordal(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/swap.py----------------------------------------
A:networkx.algorithms.swap.(keys, degrees)->zip(*G.degree())
A:networkx.algorithms.swap.cdf->networkx.utils.cumulative_distribution(list((d for (n, d) in G.degree())))
A:networkx.algorithms.swap.second->seed.choice(list(G.succ[start]))
A:networkx.algorithms.swap.third->seed.choice(list(G.succ[second]))
A:networkx.algorithms.swap.fourth->seed.choice(list(G.succ[third]))
A:networkx.algorithms.swap.(ui, xi)->networkx.utils.discrete_sequence(2, cdistribution=cdf)
A:networkx.algorithms.swap.v->seed.choice(list(G.neighbors(u)))
A:networkx.algorithms.swap.y->seed.choice(list(G.neighbors(x)))
A:networkx.algorithms.swap.deg->G.degree()
A:networkx.algorithms.swap.dk->list((n for (n, d) in G.degree()))
A:networkx.algorithms.swap.window->math.ceil(window / 2)
A:networkx.algorithms.swap.(u, v, x, y)->swapped.pop()
networkx.algorithms.connected_double_edge_swap(G,nswap=1,_window_threshold=3,seed=None)
networkx.algorithms.directed_edge_swap(G,*,nswap=1,max_tries=100,seed=None)
networkx.algorithms.double_edge_swap(G,nswap=1,max_tries=100,seed=None)
networkx.algorithms.swap.connected_double_edge_swap(G,nswap=1,_window_threshold=3,seed=None)
networkx.algorithms.swap.directed_edge_swap(G,*,nswap=1,max_tries=100,seed=None)
networkx.algorithms.swap.double_edge_swap(G,nswap=1,max_tries=100,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/richclub.py----------------------------------------
A:networkx.algorithms.richclub.rc->_compute_rc(G)
A:networkx.algorithms.richclub.R->G.copy()
A:networkx.algorithms.richclub.E->G.copy().number_of_edges()
A:networkx.algorithms.richclub.rcran->_compute_rc(R)
A:networkx.algorithms.richclub.deghist->networkx.degree_histogram(G)
A:networkx.algorithms.richclub.total->sum(deghist)
A:networkx.algorithms.richclub.edge_degrees->sorted((sorted(map(G.degree, e)) for e in G.edges()), reverse=True)
A:networkx.algorithms.richclub.ek->G.number_of_edges()
A:networkx.algorithms.richclub.(k1, k2)->sorted((sorted(map(G.degree, e)) for e in G.edges()), reverse=True).pop()
networkx.algorithms._compute_rc(G)
networkx.algorithms.rich_club_coefficient(G,normalized=True,Q=100,seed=None)
networkx.algorithms.richclub._compute_rc(G)
networkx.algorithms.richclub.rich_club_coefficient(G,normalized=True,Q=100,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/covering.py----------------------------------------
A:networkx.algorithms.covering.matching_algorithm->partial(nx.max_weight_matching, maxcardinality=True)
A:networkx.algorithms.covering.maximum_matching->matching_algorithm(G)
A:networkx.algorithms.covering.min_cover->set(maximum_matching.items())
A:networkx.algorithms.covering.u->arbitrary_element(G[v])
networkx.algorithms.covering.is_edge_cover(G,cover)
networkx.algorithms.covering.min_edge_cover(G,matching_algorithm=None)
networkx.algorithms.is_edge_cover(G,cover)
networkx.algorithms.min_edge_cover(G,matching_algorithm=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/smallworld.py----------------------------------------
A:networkx.algorithms.smallworld.G->G.copy().copy()
A:networkx.algorithms.smallworld.(keys, degrees)->zip(*G.degree())
A:networkx.algorithms.smallworld.cdf->cumulative_distribution(degrees)
A:networkx.algorithms.smallworld.nnodes->len(G)
A:networkx.algorithms.smallworld.nedges->networkx.number_of_edges(G)
A:networkx.algorithms.smallworld.ntries->int(nnodes * nedges / (nnodes * (nnodes - 1) / 2))
A:networkx.algorithms.smallworld.(ai, ci)->discrete_sequence(2, cdistribution=cdf, seed=seed)
A:networkx.algorithms.smallworld.b->seed.choice(list(G.neighbors(a)))
A:networkx.algorithms.smallworld.d->seed.choice(list(G.neighbors(c)))
A:networkx.algorithms.smallworld.D->numpy.zeros((nnodes, nnodes))
A:networkx.algorithms.smallworld.un->numpy.arange(1, nnodes)
A:networkx.algorithms.smallworld.um->numpy.arange(nnodes - 1, 0, -1)
A:networkx.algorithms.smallworld.u->numpy.append((0,), np.where(un < um, un, um))
A:networkx.algorithms.smallworld.D[nnodes - v - 1, :]->numpy.append(u[v + 1:], u[:v + 1])
A:networkx.algorithms.smallworld.max_attempts->int(nnodes * nedges / (nnodes * (nnodes - 1) / 2))
A:networkx.algorithms.smallworld.bi->keys.index(b)
A:networkx.algorithms.smallworld.di->keys.index(d)
A:networkx.algorithms.smallworld.Gr->random_reference(G, niter=niter_random_reference, seed=seed)
A:networkx.algorithms.smallworld.C->networkx.average_clustering(G)
A:networkx.algorithms.smallworld.L->networkx.average_shortest_path_length(G)
A:networkx.algorithms.smallworld.Cr->numpy.mean(randMetrics['C'])
A:networkx.algorithms.smallworld.Lr->numpy.mean(randMetrics['L'])
A:networkx.algorithms.smallworld.Cl->networkx.average_clustering(G)
A:networkx.algorithms.smallworld.Gl->lattice_reference(G, niter=niter_lattice_reference, seed=seed)
A:networkx.algorithms.smallworld.Cl_temp->networkx.average_clustering(Gl)
networkx.algorithms.lattice_reference(G,niter=5,D=None,connectivity=True,seed=None)
networkx.algorithms.omega(G,niter=5,nrand=10,seed=None)
networkx.algorithms.random_reference(G,niter=1,connectivity=True,seed=None)
networkx.algorithms.sigma(G,niter=100,nrand=10,seed=None)
networkx.algorithms.smallworld.lattice_reference(G,niter=5,D=None,connectivity=True,seed=None)
networkx.algorithms.smallworld.omega(G,niter=5,nrand=10,seed=None)
networkx.algorithms.smallworld.random_reference(G,niter=1,connectivity=True,seed=None)
networkx.algorithms.smallworld.sigma(G,niter=100,nrand=10,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tournament.py----------------------------------------
A:networkx.algorithms.tournament.v->arbitrary_element(G)
A:networkx.algorithms.tournament.hampath->hamiltonian_path(G.subgraph(set(G) - {v}))
A:networkx.algorithms.tournament.index->index_satisfying(hampath, lambda u: v not in G[u])
A:networkx.algorithms.tournament.pairs->combinations(range(n), 2)
A:networkx.algorithms.tournament.A->networkx.adjacency_matrix(G)
networkx.algorithms.tournament.hamiltonian_path(G)
networkx.algorithms.tournament.index_satisfying(iterable,condition)
networkx.algorithms.tournament.is_reachable(G,s,t)
networkx.algorithms.tournament.is_strongly_connected(G)
networkx.algorithms.tournament.is_tournament(G)
networkx.algorithms.tournament.random_tournament(n,seed=None)
networkx.algorithms.tournament.score_sequence(G)
networkx.algorithms.tournament.tournament_matrix(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/core.py----------------------------------------
A:networkx.algorithms.core.degrees->dict(G.degree())
A:networkx.algorithms.core.nodes->sorted(degrees, key=degrees.get)
A:networkx.algorithms.core.core->core_number(G)
A:networkx.algorithms.core.k->max(core.values())
A:networkx.algorithms.core.core_number->networkx.core_number(G)
A:networkx.algorithms.core.H->G.copy()
A:networkx.algorithms.core.seen->set()
A:networkx.algorithms.core.nbrs_u->set(H[u])
A:networkx.algorithms.core.n_dropped->len(to_drop)
networkx.algorithms._core_subgraph(G,k_filter,k=None,core=None)
networkx.algorithms.core._core_subgraph(G,k_filter,k=None,core=None)
networkx.algorithms.core.core_number(G)
networkx.algorithms.core.k_core(G,k=None,core_number=None)
networkx.algorithms.core.k_corona(G,k,core_number=None)
networkx.algorithms.core.k_crust(G,k=None,core_number=None)
networkx.algorithms.core.k_shell(G,k=None,core_number=None)
networkx.algorithms.core.k_truss(G,k)
networkx.algorithms.core.onion_layers(G)
networkx.algorithms.core_number(G)
networkx.algorithms.k_core(G,k=None,core_number=None)
networkx.algorithms.k_corona(G,k,core_number=None)
networkx.algorithms.k_crust(G,k=None,core_number=None)
networkx.algorithms.k_shell(G,k=None,core_number=None)
networkx.algorithms.k_truss(G,k)
networkx.algorithms.onion_layers(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/lowest_common_ancestors.py----------------------------------------
A:networkx.algorithms.lowest_common_ancestors.pairs->set(pairs)
A:networkx.algorithms.lowest_common_ancestors.nodeset->set(G)
A:networkx.algorithms.lowest_common_ancestors.ancestor_cache[v]->networkx.ancestors(G, v)
A:networkx.algorithms.lowest_common_ancestors.ancestor_cache[w]->networkx.ancestors(G, w)
A:networkx.algorithms.lowest_common_ancestors.common_ancestor->next(iter(common_ancestors))
A:networkx.algorithms.lowest_common_ancestors.ans->list(all_pairs_lowest_common_ancestor(G, pairs=[(node1, node2)]))
A:networkx.algorithms.lowest_common_ancestors.pair_dict->defaultdict(set)
A:networkx.algorithms.lowest_common_ancestors.uf->UnionFind()
A:networkx.algorithms.lowest_common_ancestors.colors->defaultdict(bool)
A:networkx.algorithms.lowest_common_ancestors.parent->arbitrary_element(G.pred[node])
networkx.algorithms.lowest_common_ancestors.all_pairs_lowest_common_ancestor(G,pairs=None)
networkx.algorithms.lowest_common_ancestors.lowest_common_ancestor(G,node1,node2,default=None)
networkx.algorithms.lowest_common_ancestors.tree_all_pairs_lowest_common_ancestor(G,root=None,pairs=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/dominance.py----------------------------------------
A:networkx.algorithms.dominance.order->list(nx.dfs_postorder_nodes(G, start))
A:networkx.algorithms.dominance.new_idom->reduce(intersect, (v for v in G.pred[u] if v in idom))
A:networkx.algorithms.dominance.idom->networkx.immediate_dominators(G, start)
networkx.algorithms.dominance.dominance_frontiers(G,start)
networkx.algorithms.dominance.immediate_dominators(G,start)
networkx.algorithms.dominance_frontiers(G,start)
networkx.algorithms.immediate_dominators(G,start)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/cluster.py----------------------------------------
A:networkx.algorithms.cluster.nodes_nbrs->G.adj.items()
A:networkx.algorithms.cluster.gen_degree->Counter((len(vs & set(G[w]) - {w}) for w in vs))
A:networkx.algorithms.cluster.ntriangles->sum((k * val for (k, val) in gen_degree.items()))
A:networkx.algorithms.cluster.max_weight->max((d.get(weight, 1) for (u, v, d) in G.edges(data=True)))
A:networkx.algorithms.cluster.seen->set()
A:networkx.algorithms.cluster.wij->wt(i, j)
A:networkx.algorithms.cluster.dbidirectional->len(ipreds & isuccs)
A:networkx.algorithms.cluster.c->clustering(G, nodes, weight=weight).values()
A:networkx.algorithms.cluster.td_iter->_triangles_and_degree_iter(G, nodes)
A:networkx.algorithms.cluster.(triangles, contri)->map(sum, zip(*triangles_contri))
A:networkx.algorithms.cluster.node_iter->G.nbunch_iter(nodes)
A:networkx.algorithms.cluster.squares->len((set(G[u]) & set(G[w])) - {v})
networkx.algorithms.cluster._directed_triangles_and_degree_iter(G,nodes=None)
networkx.algorithms.cluster._directed_weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster._triangles_and_degree_iter(G,nodes=None)
networkx.algorithms.cluster._weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster.average_clustering(G,nodes=None,weight=None,count_zeros=True)
networkx.algorithms.cluster.clustering(G,nodes=None,weight=None)
networkx.algorithms.cluster.generalized_degree(G,nodes=None)
networkx.algorithms.cluster.square_clustering(G,nodes=None)
networkx.algorithms.cluster.transitivity(G)
networkx.algorithms.cluster.triangles(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_prediction.py----------------------------------------
A:networkx.algorithms.link_prediction.ebunch->networkx.non_edges(G)
A:networkx.algorithms.link_prediction.union_size->len(set(G[u]) | set(G[v]))
A:networkx.algorithms.link_prediction.spl->dict(nx.shortest_path_length(G))
A:networkx.algorithms.link_prediction.inf->float('inf')
A:networkx.algorithms.link_prediction.path_len->spl[u].get(v, inf)
A:networkx.algorithms.link_prediction.Cu->_community(G, u, community)
A:networkx.algorithms.link_prediction.Cv->_community(G, v, community)
A:networkx.algorithms.link_prediction.cnbors->set(nx.common_neighbors(G, u, v))
networkx.algorithms._apply_prediction(G,func,ebunch=None)
networkx.algorithms.adamic_adar_index(G,ebunch=None)
networkx.algorithms.cn_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.jaccard_coefficient(G,ebunch=None)
networkx.algorithms.link_prediction._apply_prediction(G,func,ebunch=None)
networkx.algorithms.link_prediction._community(G,u,community)
networkx.algorithms.link_prediction.adamic_adar_index(G,ebunch=None)
networkx.algorithms.link_prediction.cn_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.link_prediction.common_neighbor_centrality(G,ebunch=None,alpha=0.8)
networkx.algorithms.link_prediction.jaccard_coefficient(G,ebunch=None)
networkx.algorithms.link_prediction.preferential_attachment(G,ebunch=None)
networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.link_prediction.resource_allocation_index(G,ebunch=None)
networkx.algorithms.link_prediction.within_inter_cluster(G,ebunch=None,delta=0.001,community='community')
networkx.algorithms.preferential_attachment(G,ebunch=None)
networkx.algorithms.ra_index_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.resource_allocation_index(G,ebunch=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/dag.py----------------------------------------
A:networkx.algorithms.dag.multigraph->G.is_multigraph()
A:networkx.algorithms.dag.(_, _, node)->heapq.heappop(zero_indegree)
A:networkx.algorithms.dag.count->dict(G.in_degree())
A:networkx.algorithms.dag.D->deque([v for (v, d) in G.in_degree() if d == 0])
A:networkx.algorithms.dag.q->deque([v for (v, d) in G.in_degree() if d == 0]).pop()
A:networkx.algorithms.dag.s->arbitrary_element(G)
A:networkx.algorithms.dag.g->gcd(g, levels[u] - levels[v] + 1)
A:networkx.algorithms.dag.TC->networkx.transitive_closure_dag(G, topo_order)
A:networkx.algorithms.dag.topo_order->networkx.topological_sort(G)
A:networkx.algorithms.dag.TR->networkx.DiGraph()
A:networkx.algorithms.dag.check_count->dict(G.in_degree)
A:networkx.algorithms.dag.u_nbrs->set(G[u])
A:networkx.algorithms.dag.(antichain, stack)->antichains_stacks.pop()
A:networkx.algorithms.dag.x->stack.pop()
A:networkx.algorithms.dag.v->max(dist, key=lambda x: dist[x][0])
A:networkx.algorithms.dag.path->networkx.dag_longest_path(G, weight, default_weight)
A:networkx.algorithms.dag.i->max(G[u][v], key=lambda x: G[u][v][x].get(weight, default_weight))
A:networkx.algorithms.dag.all_paths->partial(nx.all_simple_paths, G)
A:networkx.algorithms.dag.paths->root_to_leaf_paths(G)
A:networkx.algorithms.dag.B->networkx.prefix_tree(paths)
A:networkx.algorithms.dag.common_parents->sorted(common_parents)
networkx.algorithms.all_topological_sorts(G)
networkx.algorithms.ancestors(G,source)
networkx.algorithms.antichains(G,topo_order=None)
networkx.algorithms.compute_v_structures(G)
networkx.algorithms.dag.all_topological_sorts(G)
networkx.algorithms.dag.ancestors(G,source)
networkx.algorithms.dag.antichains(G,topo_order=None)
networkx.algorithms.dag.compute_v_structures(G)
networkx.algorithms.dag.dag_longest_path(G,weight='weight',default_weight=1,topo_order=None)
networkx.algorithms.dag.dag_longest_path_length(G,weight='weight',default_weight=1)
networkx.algorithms.dag.dag_to_branching(G)
networkx.algorithms.dag.descendants(G,source)
networkx.algorithms.dag.has_cycle(G)
networkx.algorithms.dag.is_aperiodic(G)
networkx.algorithms.dag.is_directed_acyclic_graph(G)
networkx.algorithms.dag.lexicographical_topological_sort(G,key=None)
networkx.algorithms.dag.root_to_leaf_paths(G)
networkx.algorithms.dag.topological_generations(G)
networkx.algorithms.dag.topological_sort(G)
networkx.algorithms.dag.transitive_closure(G,reflexive=False)
networkx.algorithms.dag.transitive_closure_dag(G,topo_order=None)
networkx.algorithms.dag.transitive_reduction(G)
networkx.algorithms.dag_longest_path(G,weight='weight',default_weight=1,topo_order=None)
networkx.algorithms.dag_longest_path_length(G,weight='weight',default_weight=1)
networkx.algorithms.dag_to_branching(G)
networkx.algorithms.descendants(G,source)
networkx.algorithms.has_cycle(G)
networkx.algorithms.is_aperiodic(G)
networkx.algorithms.is_directed_acyclic_graph(G)
networkx.algorithms.lexicographical_topological_sort(G,key=None)
networkx.algorithms.root_to_leaf_paths(G)
networkx.algorithms.topological_generations(G)
networkx.algorithms.topological_sort(G)
networkx.algorithms.transitive_closure(G,reflexive=False)
networkx.algorithms.transitive_closure_dag(G,topo_order=None)
networkx.algorithms.transitive_reduction(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/dominating.py----------------------------------------
A:networkx.algorithms.dominating.all_nodes->set(G)
A:networkx.algorithms.dominating.start_with->arbitrary_element(all_nodes)
A:networkx.algorithms.dominating.dominated_nodes->set(G[start_with])
A:networkx.algorithms.dominating.v->remaining_nodes.pop()
A:networkx.algorithms.dominating.nbrs->set(chain.from_iterable((G[n] for n in testset)))
networkx.algorithms.dominating.dominating_set(G,start_with=None)
networkx.algorithms.dominating.is_dominating_set(G,nbunch)
networkx.algorithms.dominating_set(G,start_with=None)
networkx.algorithms.is_dominating_set(G,nbunch)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/wiener.py----------------------------------------
A:networkx.algorithms.wiener.is_directed->G.is_directed()
A:networkx.algorithms.wiener.total->sum(chaini((p.values() for (v, p) in spl(G, weight=weight))))
networkx.algorithms.wiener.wiener_index(G,weight=None)
networkx.algorithms.wiener_index(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isolate.py----------------------------------------
networkx.algorithms.is_isolate(G,n)
networkx.algorithms.isolate.is_isolate(G,n)
networkx.algorithms.isolate.isolates(G)
networkx.algorithms.isolate.number_of_isolates(G)
networkx.algorithms.isolates(G)
networkx.algorithms.number_of_isolates(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/smetric.py----------------------------------------
networkx.algorithms.s_metric(G,normalized=True)
networkx.algorithms.smetric.s_metric(G,normalized=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/hybrid.py----------------------------------------
A:networkx.algorithms.hybrid.H->copy.deepcopy(G)
A:networkx.algorithms.hybrid.G2->copy.deepcopy(G)
A:networkx.algorithms.hybrid.path->networkx.shortest_path(G2, u, v)
networkx.algorithms.hybrid.is_kl_connected(G,k,l,low_memory=False)
networkx.algorithms.hybrid.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)
networkx.algorithms.is_kl_connected(G,k,l,low_memory=False)
networkx.algorithms.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/moral.py----------------------------------------
A:networkx.algorithms.moral.H->G.to_undirected()
A:networkx.algorithms.moral.predecessors_combinations->itertools.combinations(preds, r=2)
networkx.algorithms.moral.moral_graph(G)
networkx.algorithms.moral_graph(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/planar_drawing.py----------------------------------------
A:networkx.algorithms.planar_drawing.(embedding, outer_face)->triangulate_embedding(embedding, fully_triangulate)
A:networkx.algorithms.planar_drawing.node_list->get_canonical_ordering(embedding, outer_face)
A:networkx.algorithms.planar_drawing.delta_x_wp_wq->sum((delta_x[x] for x in contour_neighbors[1:]))
A:networkx.algorithms.planar_drawing.pos->dict()
A:networkx.algorithms.planar_drawing.parent_node->remaining_nodes.pop()
A:networkx.algorithms.planar_drawing.chords->defaultdict(int)
A:networkx.algorithms.planar_drawing.marked_nodes->set()
A:networkx.algorithms.planar_drawing.ready_to_pick->set(outer_face)
A:networkx.algorithms.planar_drawing.v->set(outer_face).pop()
A:networkx.algorithms.planar_drawing.nbr_iterator->iter(embedding.neighbors_cw_order(v))
A:networkx.algorithms.planar_drawing.nbr->next(nbr_iterator)
A:networkx.algorithms.planar_drawing.new_face_nodes->set(wp_wq[1:-1])
A:networkx.algorithms.planar_drawing.(_, v3)->networkx.PlanarEmbedding(embedding).next_face_half_edge(v1, v2)
A:networkx.algorithms.planar_drawing.(_, v4)->networkx.PlanarEmbedding(embedding).next_face_half_edge(v2, v3)
A:networkx.algorithms.planar_drawing.embedding->networkx.PlanarEmbedding(embedding)
A:networkx.algorithms.planar_drawing.edges_visited->set()
A:networkx.algorithms.planar_drawing.new_face->make_bi_connected(embedding, v, w, edges_visited)
A:networkx.algorithms.planar_drawing.face_set->set(face_list)
A:networkx.algorithms.planar_drawing.(v2, v3)->networkx.PlanarEmbedding(embedding).next_face_half_edge(v2, v3)
networkx.algorithms.combinatorial_embedding_to_pos(embedding,fully_triangulate=False)
networkx.algorithms.get_canonical_ordering(embedding,outer_face)
networkx.algorithms.make_bi_connected(embedding,starting_node,outgoing_node,edges_counted)
networkx.algorithms.planar_drawing.combinatorial_embedding_to_pos(embedding,fully_triangulate=False)
networkx.algorithms.planar_drawing.get_canonical_ordering(embedding,outer_face)
networkx.algorithms.planar_drawing.make_bi_connected(embedding,starting_node,outgoing_node,edges_counted)
networkx.algorithms.planar_drawing.set_position(parent,tree,remaining_nodes,delta_x,y_coordinate,pos)
networkx.algorithms.planar_drawing.triangulate_embedding(embedding,fully_triangulate=True)
networkx.algorithms.planar_drawing.triangulate_face(embedding,v1,v2)
networkx.algorithms.set_position(parent,tree,remaining_nodes,delta_x,y_coordinate,pos)
networkx.algorithms.triangulate_embedding(embedding,fully_triangulate=True)
networkx.algorithms.triangulate_face(embedding,v1,v2)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/distance_regular.py----------------------------------------
A:networkx.algorithms.distance_regular.degree->iter(G.degree())
A:networkx.algorithms.distance_regular.(_, k)->next(degree)
A:networkx.algorithms.distance_regular.path_length->dict(nx.all_pairs_shortest_path_length(G))
A:networkx.algorithms.distance_regular.diameter->max((max(path_length[n].values()) for n in path_length))
A:networkx.algorithms.distance_regular.c->len([n for n in G[v] if path_length[n][u] == i - 1])
A:networkx.algorithms.distance_regular.b->len([n for n in G[v] if path_length[n][u] == i + 1])
networkx.algorithms.distance_global_parameters(b,c)
networkx.algorithms.distance_intersection_array(G)
networkx.algorithms.distance_is_distance_regular(G)
networkx.algorithms.distance_is_strongly_regular(G)
networkx.algorithms.distance_regular.global_parameters(b,c)
networkx.algorithms.distance_regular.intersection_array(G)
networkx.algorithms.distance_regular.is_distance_regular(G)
networkx.algorithms.distance_regular.is_strongly_regular(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/graphical.py----------------------------------------
A:networkx.algorithms.graphical.valid->is_valid_degree_sequence_havel_hakimi(list(sequence))
A:networkx.algorithms.graphical.deg_sequence->networkx.utils.make_list_of_ints(sequence)
A:networkx.algorithms.graphical.p->len(deg_sequence)
A:networkx.algorithms.graphical.(dmax, dmin, dsum, n, num_degs)->_basic_graphical_tests(deg_sequence)
A:networkx.algorithms.graphical.in_deg_sequence->networkx.utils.make_list_of_ints(in_sequence)
A:networkx.algorithms.graphical.out_deg_sequence->networkx.utils.make_list_of_ints(out_sequence)
A:networkx.algorithms.graphical.maxn->max(nin, nout)
A:networkx.algorithms.graphical.(freeout, freein)->heapq.heappop(stubheap)
A:networkx.algorithms.graphical.stubout->heapq.heappop(zeroheap)
A:networkx.algorithms.graphical.(stubout, stubin)->heapq.heappop(stubheap)
networkx.algorithms._basic_graphical_tests(deg_sequence)
networkx.algorithms.graphical._basic_graphical_tests(deg_sequence)
networkx.algorithms.graphical.is_digraphical(in_sequence,out_sequence)
networkx.algorithms.graphical.is_graphical(sequence,method='eg')
networkx.algorithms.graphical.is_multigraphical(sequence)
networkx.algorithms.graphical.is_pseudographical(sequence)
networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi(deg_sequence)
networkx.algorithms.is_digraphical(in_sequence,out_sequence)
networkx.algorithms.is_graphical(sequence,method='eg')
networkx.algorithms.is_multigraphical(sequence)
networkx.algorithms.is_pseudographical(sequence)
networkx.algorithms.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.algorithms.is_valid_degree_sequence_havel_hakimi(deg_sequence)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/structuralholes.py----------------------------------------
A:networkx.algorithms.structuralholes.a_uv->G[u][v].get(weight, 1)
A:networkx.algorithms.structuralholes.a_vu->G[v][u].get(weight, 1)
A:networkx.algorithms.structuralholes.scale->norm((mutual_weight(G, u, w, weight) for w in set(nx.all_neighbors(G, u))))
A:networkx.algorithms.structuralholes.r->sum((nmw(G, u, w, weight=weight) * nmw(G, v, w, norm=max, weight=weight) for w in set(nx.all_neighbors(G, u))))
A:networkx.algorithms.structuralholes.effective_size[v]->sum((redundancy(G, v, u, weight) for u in set(nx.all_neighbors(G, v))))
A:networkx.algorithms.structuralholes.E->networkx.ego_graph(G, v, center=False, undirected=True)
A:networkx.algorithms.structuralholes.constraint[v]->sum((local_constraint(G, v, n, weight) for n in set(nx.all_neighbors(G, v))))
A:networkx.algorithms.structuralholes.direct->nmw(G, u, v, weight=weight)
A:networkx.algorithms.structuralholes.indirect->sum((nmw(G, u, w, weight=weight) * nmw(G, w, v, weight=weight) for w in set(nx.all_neighbors(G, u))))
networkx.algorithms.constraint(G,nodes=None,weight=None)
networkx.algorithms.effective_size(G,nodes=None,weight=None)
networkx.algorithms.local_constraint(G,u,v,weight=None)
networkx.algorithms.mutual_weight(G,u,v,weight=None)
networkx.algorithms.normalized_mutual_weight(G,u,v,norm=sum,weight=None)
networkx.algorithms.structuralholes.constraint(G,nodes=None,weight=None)
networkx.algorithms.structuralholes.effective_size(G,nodes=None,weight=None)
networkx.algorithms.structuralholes.local_constraint(G,u,v,weight=None)
networkx.algorithms.structuralholes.mutual_weight(G,u,v,weight=None)
networkx.algorithms.structuralholes.normalized_mutual_weight(G,u,v,norm=sum,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/cycles.py----------------------------------------
A:networkx.algorithms.cycles.gnodes->set(G.nodes())
A:networkx.algorithms.cycles.root->set(G.nodes()).pop()
A:networkx.algorithms.cycles.z->stack.pop()
A:networkx.algorithms.cycles.node->stack.pop()
A:networkx.algorithms.cycles.subG->type(G)(G.edges())
A:networkx.algorithms.cycles.scc->sccs.pop()
A:networkx.algorithms.cycles.sccG->type(G)(G.edges()).subgraph(scc)
A:networkx.algorithms.cycles.startnode->min(component, key=ordering.__getitem__)
A:networkx.algorithms.cycles.blocked->defaultdict(bool)
A:networkx.algorithms.cycles.closed->set()
A:networkx.algorithms.cycles.B->defaultdict(list)
A:networkx.algorithms.cycles.nextnode->nbrs.pop()
A:networkx.algorithms.cycles.H->type(G)(G.edges()).subgraph(scc)
A:networkx.algorithms.cycles.ordering->dict(zip(G, range(len(G))))
A:networkx.algorithms.cycles.subgraph->G.subgraph((node for node in G if ordering[node] >= ordering[s]))
A:networkx.algorithms.cycles.strongcomp->networkx.strongly_connected_components(subgraph)
A:networkx.algorithms.cycles.mincomp->min(strongcomp, key=lambda ns: min((ordering[n] for n in ns)))
A:networkx.algorithms.cycles.component->G.subgraph(mincomp)
A:networkx.algorithms.cycles.dummy->circuit(startnode, startnode, component)
A:networkx.algorithms.cycles.explored->set()
A:networkx.algorithms.cycles.(tail, head)->tailhead(edge)
A:networkx.algorithms.cycles.popped_edge->set().pop()
A:networkx.algorithms.cycles.spanning_tree_edges->list(nx.minimum_spanning_edges(comp, weight=None, data=False))
A:networkx.algorithms.cycles.N->len(edges_excl)
A:networkx.algorithms.cycles.new_cycle->_min_cycle(comp, set_orth[k], weight=weight)
A:networkx.algorithms.cycles.T->networkx.Graph()
A:networkx.algorithms.cycles.nnodes->len(nodes_idx)
A:networkx.algorithms.cycles.edge_w->data.get(weight, 1)
A:networkx.algorithms.cycles.all_shortest_pathlens->dict(nx.shortest_path_length(T, weight=weight))
A:networkx.algorithms.cycles.start->min(cross_paths_w_lens, key=cross_paths_w_lens.get)
A:networkx.algorithms.cycles.min_path->networkx.shortest_path(T, source=start, target=end, weight='weight')
A:networkx.algorithms.cycles.mcycle_pruned->_path_to_cycle(min_path_nodes)
A:networkx.algorithms.cycles.edges->set()
networkx.algorithms._min_cycle(G,orth,weight=None)
networkx.algorithms._min_cycle_basis(comp,weight)
networkx.algorithms._path_to_cycle(path)
networkx.algorithms.cycle_basis(G,root=None)
networkx.algorithms.cycles._min_cycle(G,orth,weight=None)
networkx.algorithms.cycles._min_cycle_basis(comp,weight)
networkx.algorithms.cycles._path_to_cycle(path)
networkx.algorithms.cycles.cycle_basis(G,root=None)
networkx.algorithms.cycles.find_cycle(G,source=None,orientation=None)
networkx.algorithms.cycles.minimum_cycle_basis(G,weight=None)
networkx.algorithms.cycles.recursive_simple_cycles(G)
networkx.algorithms.cycles.simple_cycles(G)
networkx.algorithms.find_cycle(G,source=None,orientation=None)
networkx.algorithms.minimum_cycle_basis(G,weight=None)
networkx.algorithms.recursive_simple_cycles(G)
networkx.algorithms.simple_cycles(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/node_classification.py----------------------------------------
A:networkx.algorithms.node_classification.X->networkx.to_scipy_sparse_array(G)
A:networkx.algorithms.node_classification.(labels, label_dict)->_get_label_info(G, label_name)
A:networkx.algorithms.node_classification.F->numpy.zeros((n_samples, n_classes))
A:networkx.algorithms.node_classification.degrees->networkx.to_scipy_sparse_array(G).sum(axis=0)
A:networkx.algorithms.node_classification.D->scipy.sparse.csr_array(sp.sparse.diags(1.0 / degrees, offsets=0))
A:networkx.algorithms.node_classification.P->(D @ X).tolil()
A:networkx.algorithms.node_classification.B->numpy.zeros((n_samples, n_classes))
A:networkx.algorithms.node_classification.D2->numpy.sqrt(sp.sparse.csr_array(sp.sparse.diags(1.0 / degrees, offsets=0)))
A:networkx.algorithms.node_classification.labels->numpy.array(labels)
A:networkx.algorithms.node_classification.label_dict->numpy.array([label for (label, _) in sorted(label_to_id.items(), key=lambda x: x[1])])
networkx.algorithms.node_classification._get_label_info(G,label_name)
networkx.algorithms.node_classification.harmonic_function(G,max_iter=30,label_name='label')
networkx.algorithms.node_classification.local_and_global_consistency(G,alpha=0.99,max_iter=30,label_name='label')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/chains.py----------------------------------------
A:networkx.algorithms.chains.H->networkx.DiGraph()
A:networkx.algorithms.chains.(H, nodes)->_dfs_cycle_forest(G, root)
A:networkx.algorithms.chains.visited->set()
A:networkx.algorithms.chains.chain->list(_build_chain(H, u, v, visited))
networkx.algorithms.chain_decomposition(G,root=None)
networkx.algorithms.chains.chain_decomposition(G,root=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/clique.py----------------------------------------
A:networkx.algorithms.clique.index[u]->len(index)
A:networkx.algorithms.clique.queue->deque((([u], sorted(nbrs[u], key=index.__getitem__)) for u in G))
A:networkx.algorithms.clique.(base, cnbrs)->map(list, queue.popleft())
A:networkx.algorithms.clique.cand->set(G)
A:networkx.algorithms.clique.subg->set(G).copy()
A:networkx.algorithms.clique.u->max(subg, key=lambda u: len(cand & adj[u]))
A:networkx.algorithms.clique.q->ext_u.pop()
A:networkx.algorithms.clique.(subg, cand, ext_u)->stack.pop()
A:networkx.algorithms.clique.cand_init->set(G)
A:networkx.algorithms.clique.subg_init->set(G).copy()
A:networkx.algorithms.clique.B->networkx.empty_graph(0, create_using)
A:networkx.algorithms.clique.cliques->list(find_cliques(G))
A:networkx.algorithms.clique.clique_pairs->combinations(cliques, 2)
A:networkx.algorithms.clique.size_for_n->defaultdict(int)
A:networkx.algorithms.clique.size_of_c->len(c)
A:networkx.algorithms.clique.nodes->sorted(self.G.nodes(), key=lambda v: self.G.degree(v), reverse=True)
A:networkx.algorithms.clique.numcliq->len([1 for c in cliques if v in c])
A:networkx.algorithms.clique.numcliq[v]->len([1 for c in cliques if v in c])
A:networkx.algorithms.clique.independent_set->self.greedily_find_independent_set(P)
A:networkx.algorithms.clique.min_wt_in_class->min((residual_wt[v] for v in independent_set))
A:networkx.algorithms.clique.branching_nodes->self.find_branching_nodes(P, self.incumbent_weight - C_weight)
A:networkx.algorithms.clique.v->self.find_branching_nodes(P, self.incumbent_weight - C_weight).pop()
A:networkx.algorithms.clique.mwc->MaxWeightClique(G, weight)
networkx.algorithms.clique.MaxWeightClique(self,G,weight)
networkx.algorithms.clique.MaxWeightClique.__init__(self,G,weight)
networkx.algorithms.clique.MaxWeightClique.expand(self,C,C_weight,P)
networkx.algorithms.clique.MaxWeightClique.find_branching_nodes(self,P,target)
networkx.algorithms.clique.MaxWeightClique.find_max_weight_clique(self)
networkx.algorithms.clique.MaxWeightClique.greedily_find_independent_set(self,P)
networkx.algorithms.clique.MaxWeightClique.update_incumbent_if_improved(self,C,C_weight)
networkx.algorithms.clique.cliques_containing_node(G,nodes=None,cliques=None)
networkx.algorithms.clique.enumerate_all_cliques(G)
networkx.algorithms.clique.find_cliques(G,nodes=None)
networkx.algorithms.clique.find_cliques_recursive(G,nodes=None)
networkx.algorithms.clique.graph_clique_number(G,cliques=None)
networkx.algorithms.clique.graph_number_of_cliques(G,cliques=None)
networkx.algorithms.clique.make_clique_bipartite(G,fpos=None,create_using=None,name=None)
networkx.algorithms.clique.make_max_clique_graph(G,create_using=None)
networkx.algorithms.clique.max_weight_clique(G,weight='weight')
networkx.algorithms.clique.node_clique_number(G,nodes=None,cliques=None,separate_nodes=False)
networkx.algorithms.clique.number_of_cliques(G,nodes=None,cliques=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/voronoi.py----------------------------------------
A:networkx.algorithms.voronoi.paths->networkx.multi_source_dijkstra_path(G, center_nodes, weight=weight)
A:networkx.algorithms.voronoi.cells->groups(nearest)
networkx.algorithms.voronoi.voronoi_cells(G,center_nodes,weight='weight')
networkx.algorithms.voronoi_cells(G,center_nodes,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/distance_measures.py----------------------------------------
A:networkx.algorithms.distance_measures.degrees->dict(G.degree())
A:networkx.algorithms.distance_measures.minlowernode->max(degrees, key=degrees.get)
A:networkx.algorithms.distance_measures.N->len(degrees)
A:networkx.algorithms.distance_measures.ecc_lower->dict.fromkeys(G, 0)
A:networkx.algorithms.distance_measures.ecc_upper->dict.fromkeys(G, N)
A:networkx.algorithms.distance_measures.candidates->set(G)
A:networkx.algorithms.distance_measures.dist->networkx.shortest_path_length(G, source=current, weight=weight)
A:networkx.algorithms.distance_measures.current_ecc->max(dist.values())
A:networkx.algorithms.distance_measures.ecc_lower[i]low->max(ecc_lower[i], max(d, current_ecc - d))
A:networkx.algorithms.distance_measures.ecc_upper[i]upp->min(ecc_upper[i], current_ecc + d)
A:networkx.algorithms.distance_measures.minlower->min(ecc_lower[i], minlower)
A:networkx.algorithms.distance_measures.maxlower->max(ecc_lower[i], maxlower)
A:networkx.algorithms.distance_measures.minupper->min(ecc_upper[i], minupper)
A:networkx.algorithms.distance_measures.maxupper->max(ecc_upper[i], maxupper)
A:networkx.algorithms.distance_measures.ruled_out->set()
A:networkx.algorithms.distance_measures.order->G.copy().order()
A:networkx.algorithms.distance_measures.length->networkx.shortest_path_length(G, source=n, weight=weight)
A:networkx.algorithms.distance_measures.L->networkx.laplacian_matrix(G, node_list, weight=weight).asformat('csc')
A:networkx.algorithms.distance_measures.e[n]->max(length.values())
A:networkx.algorithms.distance_measures.e->eccentricity(G, weight=weight)
A:networkx.algorithms.distance_measures.diameter->max(e.values())
A:networkx.algorithms.distance_measures.radius->min(e.values())
A:networkx.algorithms.distance_measures.sp->scipy.items().items()
A:networkx.algorithms.distance_measures.barycentricity->sum(dists.values())
A:networkx.algorithms.distance_measures.arr->perm_array.tolist()
A:networkx.algorithms.distance_measures.n->perm_array.tolist().index(i)
A:networkx.algorithms.distance_measures.G->G.copy().copy()
A:networkx.algorithms.distance_measures.node_list->list(G)
A:networkx.algorithms.distance_measures.indices->list(range(L.shape[0]))
A:networkx.algorithms.distance_measures.lu_a->scipy.items().items().sparse.linalg.splu(L_a, options=dict(SymmetricMode=True))
A:networkx.algorithms.distance_measures.LdiagA->numpy.sort(LdiagA)
A:networkx.algorithms.distance_measures.lu_ab->scipy.items().items().sparse.linalg.splu(L_ab, options=dict(SymmetricMode=True))
A:networkx.algorithms.distance_measures.LdiagAB->numpy.sort(LdiagAB)
A:networkx.algorithms.distance_measures.Ldet->numpy.product(np.divide(np.append(LdiagAB, [1]), LdiagA))
networkx.algorithms._count_lu_permutations(perm_array)
networkx.algorithms._extrema_bounding(G,compute='diameter',weight=None)
networkx.algorithms.barycenter(G,weight=None,attr=None,sp=None)
networkx.algorithms.center(G,e=None,usebounds=False,weight=None)
networkx.algorithms.diameter(G,e=None,usebounds=False,weight=None)
networkx.algorithms.distance_measures._count_lu_permutations(perm_array)
networkx.algorithms.distance_measures._extrema_bounding(G,compute='diameter',weight=None)
networkx.algorithms.distance_measures.barycenter(G,weight=None,attr=None,sp=None)
networkx.algorithms.distance_measures.center(G,e=None,usebounds=False,weight=None)
networkx.algorithms.distance_measures.diameter(G,e=None,usebounds=False,weight=None)
networkx.algorithms.distance_measures.eccentricity(G,v=None,sp=None,weight=None)
networkx.algorithms.distance_measures.periphery(G,e=None,usebounds=False,weight=None)
networkx.algorithms.distance_measures.radius(G,e=None,usebounds=False,weight=None)
networkx.algorithms.distance_measures.resistance_distance(G,nodeA,nodeB,weight=None,invert_weight=True)
networkx.algorithms.eccentricity(G,v=None,sp=None,weight=None)
networkx.algorithms.periphery(G,e=None,usebounds=False,weight=None)
networkx.algorithms.radius(G,e=None,usebounds=False,weight=None)
networkx.algorithms.resistance_distance(G,nodeA,nodeB,weight=None,invert_weight=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/non_randomness.py----------------------------------------
A:networkx.algorithms.non_randomness.k->len(tuple(nx.community.label_propagation_communities(G)))
A:networkx.algorithms.non_randomness.eigenvalues->numpy.linalg.eigvals(nx.to_numpy_array(G, weight=weight))
A:networkx.algorithms.non_randomness.nr->numpy.real(np.sum(eigenvalues[:k]))
A:networkx.algorithms.non_randomness.n->G.number_of_nodes()
A:networkx.algorithms.non_randomness.m->G.number_of_edges()
networkx.algorithms.non_randomness(G,k=None,weight='weight')
networkx.algorithms.non_randomness.non_randomness(G,k=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/vitality.py----------------------------------------
A:networkx.algorithms.vitality.wiener_index->networkx.wiener_index(G, weight=weight)
A:networkx.algorithms.vitality.after->networkx.wiener_index(G.subgraph(set(G) - {node}), weight=weight)
A:networkx.algorithms.vitality.vitality->partial(closeness_vitality, G, weight=weight, wiener_index=wiener_index)
networkx.algorithms.closeness_vitality(G,node=None,weight=None,wiener_index=None)
networkx.algorithms.vitality.closeness_vitality(G,node=None,weight=None,wiener_index=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/boundary.py----------------------------------------
A:networkx.algorithms.boundary.edges->G.edges(nset1, data=data, default=default)
A:networkx.algorithms.boundary.nset2->set(nbunch2)
networkx.algorithms.boundary.edge_boundary(G,nbunch1,nbunch2=None,data=False,keys=False,default=None)
networkx.algorithms.boundary.node_boundary(G,nbunch1,nbunch2=None)
networkx.algorithms.edge_boundary(G,nbunch1,nbunch2=None,data=False,keys=False,default=None)
networkx.algorithms.node_boundary(G,nbunch1,nbunch2=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/hierarchy.py----------------------------------------
A:networkx.algorithms.hierarchy.scc->networkx.strongly_connected_components(G)
networkx.algorithms.hierarchy.flow_hierarchy(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/asteroidal.py----------------------------------------
A:networkx.algorithms.asteroidal.V->set(G.nodes)
A:networkx.algorithms.asteroidal.component_structure->create_component_structure(G)
A:networkx.algorithms.asteroidal.E_complement->set(nx.complement(G).edges)
A:networkx.algorithms.asteroidal.u_neighborhood->set(G[u]).union([u])
A:networkx.algorithms.asteroidal.v_neighborhood->set(G[v]).union([v])
A:networkx.algorithms.asteroidal.union_of_neighborhoods->set(G[u]).union([u]).union(v_neighborhood)
A:networkx.algorithms.asteroidal.closed_neighborhood->set(G[v]).union({v})
A:networkx.algorithms.asteroidal.G_reduced->G.subgraph(set(G.nodes) - closed_neighborhood)
networkx.algorithms.asteroidal.create_component_structure(G)
networkx.algorithms.asteroidal.find_asteroidal_triple(G)
networkx.algorithms.asteroidal.is_at_free(G)
networkx.algorithms.create_component_structure(G)
networkx.algorithms.find_asteroidal_triple(G)
networkx.algorithms.is_at_free(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/efficiency_measures.py----------------------------------------
A:networkx.algorithms.efficiency_measures.n->len(G)
A:networkx.algorithms.efficiency_measures.lengths->networkx.all_pairs_shortest_path_length(G)
networkx.algorithms.efficiency(G,u,v)
networkx.algorithms.efficiency_measures.efficiency(G,u,v)
networkx.algorithms.efficiency_measures.global_efficiency(G)
networkx.algorithms.efficiency_measures.local_efficiency(G)
networkx.algorithms.global_efficiency(G)
networkx.algorithms.local_efficiency(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/planarity.py----------------------------------------
A:networkx.algorithms.planarity.planarity_state->LRPlanarity(G)
A:networkx.algorithms.planarity.embedding->dict()
A:networkx.algorithms.planarity.G->networkx.Graph(G)
A:networkx.algorithms.planarity.subgraph->networkx.Graph()
A:networkx.algorithms.planarity.nbrs->list(G[u])
A:networkx.algorithms.planarity.self.G->networkx.Graph()
A:networkx.algorithms.planarity.self.height->defaultdict(lambda : None)
A:networkx.algorithms.planarity.self.parent_edge->defaultdict(lambda : None)
A:networkx.algorithms.planarity.self.DG->networkx.DiGraph()
A:networkx.algorithms.planarity.self.ref->defaultdict(lambda : None)
A:networkx.algorithms.planarity.self.side->defaultdict(lambda : 1)
A:networkx.algorithms.planarity.self.embedding->PlanarEmbedding()
A:networkx.algorithms.planarity.self.adjs[v]->list(self.G[v])
A:networkx.algorithms.planarity.self.ordered_adjs[v]->sorted(self.DG[v], key=lambda x: self.nesting_depth[v, x])
A:networkx.algorithms.planarity.ind->defaultdict(lambda : 0)
A:networkx.algorithms.planarity.skip_init->defaultdict(lambda : False)
A:networkx.algorithms.planarity.v->dfs_stack.pop()
A:networkx.algorithms.planarity.self.lowpt2[e]->min(self.lowpt2[e], self.lowpt2[vw])
A:networkx.algorithms.planarity.self.stack_bottom[ei]->top_of_stack(self.S)
A:networkx.algorithms.planarity.P->self.S.pop()
A:networkx.algorithms.planarity.Q->self.S.pop()
A:networkx.algorithms.planarity.P.right->self.S.pop().right.copy()
A:networkx.algorithms.planarity.P.left->self.S.pop().left.copy()
A:networkx.algorithms.planarity.old_ref->defaultdict(lambda : None)
A:networkx.algorithms.planarity.e->dfs_stack.pop()
A:networkx.algorithms.planarity.embedding[v]->list(self.neighbors_cw_order(v))
A:networkx.algorithms.planarity.sorted_nbrs->set(self.neighbors_cw_order(v))
A:networkx.algorithms.planarity.unsorted_nbrs->set(self[v])
A:networkx.algorithms.planarity.counted_half_edges->set()
A:networkx.algorithms.planarity.num_nodes->len(component)
A:networkx.algorithms.planarity.mark_half_edges->set()
A:networkx.algorithms.planarity.(prev_node, cur_node)->self.next_face_half_edge(prev_node, cur_node)
networkx.algorithms.ConflictPair(self,left=Interval(),right=Interval())
networkx.algorithms.ConflictPair.lowest(self,planarity_state)
networkx.algorithms.ConflictPair.swap(self)
networkx.algorithms.Interval(self,low=None,high=None)
networkx.algorithms.Interval.conflicting(self,b,planarity_state)
networkx.algorithms.Interval.copy(self)
networkx.algorithms.Interval.empty(self)
networkx.algorithms.LRPlanarity(self,G)
networkx.algorithms.LRPlanarity.add_constraints(self,ei,e)
networkx.algorithms.LRPlanarity.dfs_embedding(self,v)
networkx.algorithms.LRPlanarity.dfs_embedding_recursive(self,v)
networkx.algorithms.LRPlanarity.dfs_orientation(self,v)
networkx.algorithms.LRPlanarity.dfs_orientation_recursive(self,v)
networkx.algorithms.LRPlanarity.dfs_testing(self,v)
networkx.algorithms.LRPlanarity.dfs_testing_recursive(self,v)
networkx.algorithms.LRPlanarity.lr_planarity(self)
networkx.algorithms.LRPlanarity.lr_planarity_recursive(self)
networkx.algorithms.LRPlanarity.remove_back_edges(self,e)
networkx.algorithms.LRPlanarity.sign(self,e)
networkx.algorithms.LRPlanarity.sign_recursive(self,e)
networkx.algorithms.PlanarEmbedding(nx.DiGraph)
networkx.algorithms.PlanarEmbedding.add_half_edge_ccw(self,start_node,end_node,reference_neighbor)
networkx.algorithms.PlanarEmbedding.add_half_edge_cw(self,start_node,end_node,reference_neighbor)
networkx.algorithms.PlanarEmbedding.add_half_edge_first(self,start_node,end_node)
networkx.algorithms.PlanarEmbedding.check_structure(self)
networkx.algorithms.PlanarEmbedding.get_data(self)
networkx.algorithms.PlanarEmbedding.is_directed(self)
networkx.algorithms.PlanarEmbedding.neighbors_cw_order(self,v)
networkx.algorithms.PlanarEmbedding.next_face_half_edge(self,v,w)
networkx.algorithms.PlanarEmbedding.set_data(self,data)
networkx.algorithms.PlanarEmbedding.traverse_face(self,v,w,mark_half_edges=None)
networkx.algorithms.check_planarity(G,counterexample=False)
networkx.algorithms.check_planarity_recursive(G,counterexample=False)
networkx.algorithms.get_counterexample(G)
networkx.algorithms.get_counterexample_recursive(G)
networkx.algorithms.is_planar(G)
networkx.algorithms.planarity.ConflictPair(self,left=Interval(),right=Interval())
networkx.algorithms.planarity.ConflictPair.__init__(self,left=Interval(),right=Interval())
networkx.algorithms.planarity.ConflictPair.lowest(self,planarity_state)
networkx.algorithms.planarity.ConflictPair.swap(self)
networkx.algorithms.planarity.Interval(self,low=None,high=None)
networkx.algorithms.planarity.Interval.__init__(self,low=None,high=None)
networkx.algorithms.planarity.Interval.conflicting(self,b,planarity_state)
networkx.algorithms.planarity.Interval.copy(self)
networkx.algorithms.planarity.Interval.empty(self)
networkx.algorithms.planarity.LRPlanarity(self,G)
networkx.algorithms.planarity.LRPlanarity.__init__(self,G)
networkx.algorithms.planarity.LRPlanarity.add_constraints(self,ei,e)
networkx.algorithms.planarity.LRPlanarity.dfs_embedding(self,v)
networkx.algorithms.planarity.LRPlanarity.dfs_embedding_recursive(self,v)
networkx.algorithms.planarity.LRPlanarity.dfs_orientation(self,v)
networkx.algorithms.planarity.LRPlanarity.dfs_orientation_recursive(self,v)
networkx.algorithms.planarity.LRPlanarity.dfs_testing(self,v)
networkx.algorithms.planarity.LRPlanarity.dfs_testing_recursive(self,v)
networkx.algorithms.planarity.LRPlanarity.lr_planarity(self)
networkx.algorithms.planarity.LRPlanarity.lr_planarity_recursive(self)
networkx.algorithms.planarity.LRPlanarity.remove_back_edges(self,e)
networkx.algorithms.planarity.LRPlanarity.sign(self,e)
networkx.algorithms.planarity.LRPlanarity.sign_recursive(self,e)
networkx.algorithms.planarity.PlanarEmbedding(nx.DiGraph)
networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_ccw(self,start_node,end_node,reference_neighbor)
networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_cw(self,start_node,end_node,reference_neighbor)
networkx.algorithms.planarity.PlanarEmbedding.add_half_edge_first(self,start_node,end_node)
networkx.algorithms.planarity.PlanarEmbedding.check_structure(self)
networkx.algorithms.planarity.PlanarEmbedding.connect_components(self,v,w)
networkx.algorithms.planarity.PlanarEmbedding.get_data(self)
networkx.algorithms.planarity.PlanarEmbedding.is_directed(self)
networkx.algorithms.planarity.PlanarEmbedding.neighbors_cw_order(self,v)
networkx.algorithms.planarity.PlanarEmbedding.next_face_half_edge(self,v,w)
networkx.algorithms.planarity.PlanarEmbedding.set_data(self,data)
networkx.algorithms.planarity.PlanarEmbedding.traverse_face(self,v,w,mark_half_edges=None)
networkx.algorithms.planarity.check_planarity(G,counterexample=False)
networkx.algorithms.planarity.check_planarity_recursive(G,counterexample=False)
networkx.algorithms.planarity.get_counterexample(G)
networkx.algorithms.planarity.get_counterexample_recursive(G)
networkx.algorithms.planarity.is_planar(G)
networkx.algorithms.planarity.top_of_stack(l)
networkx.algorithms.top_of_stack(l)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/matching.py----------------------------------------
A:networkx.algorithms.matching.matching->matching_dict_to_set(matching)
A:networkx.algorithms.matching.nodes->set()
A:networkx.algorithms.matching.edges->set()
A:networkx.algorithms.matching.G_edges->G.edges(data=weight, default=1)
A:networkx.algorithms.matching.InvG->networkx.Graph()
A:networkx.algorithms.matching.gnodes->list(G)
A:networkx.algorithms.matching.wt->slack(*bestedge[v]).get(weight, 1)
A:networkx.algorithms.matching.inblossom->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.blossomparent->dict(zip(gnodes, repeat(None)))
A:networkx.algorithms.matching.blossombase->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.dualvar->dict(zip(gnodes, repeat(maxweight)))
A:networkx.algorithms.matching.b->Blossom()
A:networkx.algorithms.matching.b.mybestedges->list(bestedgeto.values())
A:networkx.algorithms.matching.kslack->slack(*bestedge[b])
A:networkx.algorithms.matching.j->Blossom().childs.index(entrychild)
A:networkx.algorithms.matching.ij->Blossom().childs.index(t)
A:networkx.algorithms.matching.vdualoffset->max(0, -min(dualvar.values()))
A:networkx.algorithms.matching.v->queue.pop()
A:networkx.algorithms.matching.base->scanBlossom(v, w)
A:networkx.algorithms.matching.delta->max(0, min(dualvar.values()))
A:networkx.algorithms.matching.d->slack(*bestedge[v])
networkx.algorithms.is_matching(G,matching)
networkx.algorithms.is_maximal_matching(G,matching)
networkx.algorithms.is_perfect_matching(G,matching)
networkx.algorithms.matching.is_matching(G,matching)
networkx.algorithms.matching.is_maximal_matching(G,matching)
networkx.algorithms.matching.is_perfect_matching(G,matching)
networkx.algorithms.matching.matching_dict_to_set(matching)
networkx.algorithms.matching.max_weight_matching(G,maxcardinality=False,weight='weight')
networkx.algorithms.matching.maximal_matching(G)
networkx.algorithms.matching.min_weight_matching(G,weight='weight')
networkx.algorithms.matching_dict_to_set(matching)
networkx.algorithms.max_weight_matching(G,maxcardinality=False,weight='weight')
networkx.algorithms.maximal_matching(G)
networkx.algorithms.min_weight_matching(G,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/mis.py----------------------------------------
A:networkx.algorithms.mis.nodes->set(nodes)
A:networkx.algorithms.mis.neighbors->set.union(*[set(G.adj[v]) for v in nodes])
A:networkx.algorithms.mis.indep_nodes->list(nodes)
A:networkx.algorithms.mis.available_nodes->set(G.nodes()).difference(neighbors.union(nodes))
A:networkx.algorithms.mis.node->seed.choice(list(available_nodes))
networkx.algorithms.maximal_independent_set(G,nodes=None,seed=None)
networkx.algorithms.mis.maximal_independent_set(G,nodes=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/sparsifiers.py----------------------------------------
A:networkx.algorithms.sparsifiers.H->networkx.empty_graph()
A:networkx.algorithms.sparsifiers.residual_graph->G.copy()
A:networkx.algorithms.sparsifiers.sample_prob->math.pow(G.number_of_nodes(), -1 / k)
A:networkx.algorithms.sparsifiers.sampled_centers->set()
A:networkx.algorithms.sparsifiers.edges_to_add->set()
A:networkx.algorithms.sparsifiers.edges_to_remove->set()
A:networkx.algorithms.sparsifiers.(lightest_edge_neighbor, lightest_edge_weight)->_lightest_edge_dicts(residual_graph, clustering, v)
A:networkx.algorithms.sparsifiers.closest_center->min(neighboring_sampled_centers, key=lightest_edge_weight.get)
A:networkx.algorithms.sparsifiers.(lightest_edge_neighbor, _)->_lightest_edge_dicts(residual_graph, clustering, v)
networkx.algorithms._add_edge_to_spanner(H,residual_graph,u,v,weight)
networkx.algorithms._lightest_edge_dicts(residual_graph,clustering,node)
networkx.algorithms._setup_residual_graph(G,weight)
networkx.algorithms.spanner(G,stretch,weight=None,seed=None)
networkx.algorithms.sparsifiers._add_edge_to_spanner(H,residual_graph,u,v,weight)
networkx.algorithms.sparsifiers._lightest_edge_dicts(residual_graph,clustering,node)
networkx.algorithms.sparsifiers._setup_residual_graph(G,weight)
networkx.algorithms.sparsifiers.spanner(G,stretch,weight=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/simple_paths.py----------------------------------------
A:networkx.algorithms.simple_paths.targets->set(target)
A:networkx.algorithms.simple_paths.visited->dict.fromkeys([source])
A:networkx.algorithms.simple_paths.child->next(children, None)
A:networkx.algorithms.simple_paths.count->([child] + list(children)).count(target)
A:networkx.algorithms.simple_paths.wt->_weight_function(G, weight)
A:networkx.algorithms.simple_paths.listA->list()
A:networkx.algorithms.simple_paths.listB->PathBuffer()
A:networkx.algorithms.simple_paths.(length, path)->shortest_path_func(G, source, target, weight=weight)
A:networkx.algorithms.simple_paths.ignore_nodes->set()
A:networkx.algorithms.simple_paths.ignore_edges->set()
A:networkx.algorithms.simple_paths.root_length->length_func(root)
A:networkx.algorithms.simple_paths.(length, spur)->shortest_path_func(G, root[-1], target, ignore_nodes=ignore_nodes, ignore_edges=ignore_edges, weight=weight)
A:networkx.algorithms.simple_paths.path->PathBuffer().pop()
A:networkx.algorithms.simple_paths.self.paths->set()
A:networkx.algorithms.simple_paths.self.sortedpaths->list()
A:networkx.algorithms.simple_paths.self.counter->count()
A:networkx.algorithms.simple_paths.hashable_path->tuple(path)
A:networkx.algorithms.simple_paths.(cost, num, path)->heappop(self.sortedpaths)
A:networkx.algorithms.simple_paths.results->_bidirectional_pred_succ(G, source, target, ignore_nodes, ignore_edges)
A:networkx.algorithms.simple_paths.Gpred->filter_iter(Gpred)
A:networkx.algorithms.simple_paths.Gsucc->filter_iter(Gsucc)
A:networkx.algorithms.simple_paths.c->count()
A:networkx.algorithms.simple_paths.(dist, _, v)->pop(fringe[dir])
A:networkx.algorithms.simple_paths.minweight->wt(w, v, G.get_edge_data(w, v))
networkx.algorithms.PathBuffer(self)
networkx.algorithms.PathBuffer.__len__(self)
networkx.algorithms.PathBuffer.pop(self)
networkx.algorithms.PathBuffer.push(self,cost,path)
networkx.algorithms._all_simple_edge_paths_multigraph(G,source,targets,cutoff)
networkx.algorithms._all_simple_paths_graph(G,source,targets,cutoff)
networkx.algorithms._all_simple_paths_multigraph(G,source,targets,cutoff)
networkx.algorithms._bidirectional_dijkstra(G,source,target,weight='weight',ignore_nodes=None,ignore_edges=None)
networkx.algorithms._bidirectional_pred_succ(G,source,target,ignore_nodes=None,ignore_edges=None)
networkx.algorithms._bidirectional_shortest_path(G,source,target,ignore_nodes=None,ignore_edges=None,weight=None)
networkx.algorithms._empty_generator()
networkx.algorithms.all_simple_edge_paths(G,source,target,cutoff=None)
networkx.algorithms.all_simple_paths(G,source,target,cutoff=None)
networkx.algorithms.is_simple_path(G,nodes)
networkx.algorithms.shortest_simple_paths(G,source,target,weight=None)
networkx.algorithms.simple_paths.PathBuffer(self)
networkx.algorithms.simple_paths.PathBuffer.__init__(self)
networkx.algorithms.simple_paths.PathBuffer.__len__(self)
networkx.algorithms.simple_paths.PathBuffer.pop(self)
networkx.algorithms.simple_paths.PathBuffer.push(self,cost,path)
networkx.algorithms.simple_paths._all_simple_edge_paths_multigraph(G,source,targets,cutoff)
networkx.algorithms.simple_paths._all_simple_paths_graph(G,source,targets,cutoff)
networkx.algorithms.simple_paths._all_simple_paths_multigraph(G,source,targets,cutoff)
networkx.algorithms.simple_paths._bidirectional_dijkstra(G,source,target,weight='weight',ignore_nodes=None,ignore_edges=None)
networkx.algorithms.simple_paths._bidirectional_pred_succ(G,source,target,ignore_nodes=None,ignore_edges=None)
networkx.algorithms.simple_paths._bidirectional_shortest_path(G,source,target,ignore_nodes=None,ignore_edges=None,weight=None)
networkx.algorithms.simple_paths._empty_generator()
networkx.algorithms.simple_paths.all_simple_edge_paths(G,source,target,cutoff=None)
networkx.algorithms.simple_paths.all_simple_paths(G,source,target,cutoff=None)
networkx.algorithms.simple_paths.is_simple_path(G,nodes)
networkx.algorithms.simple_paths.shortest_simple_paths(G,source,target,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/reciprocity.py----------------------------------------
A:networkx.algorithms.reciprocity.n->G.nbunch_iter(nodes)
A:networkx.algorithms.reciprocity.pred->set(G.predecessors(node))
A:networkx.algorithms.reciprocity.succ->set(G.successors(node))
A:networkx.algorithms.reciprocity.n_all_edge->G.number_of_edges()
networkx.algorithms._reciprocity_iter(G,nodes)
networkx.algorithms.overall_reciprocity(G)
networkx.algorithms.reciprocity(G,nodes=None)
networkx.algorithms.reciprocity._reciprocity_iter(G,nodes)
networkx.algorithms.reciprocity.overall_reciprocity(G)
networkx.algorithms.reciprocity.reciprocity(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/communicability_alg.py----------------------------------------
A:networkx.algorithms.communicability_alg.nodelist->list(G)
A:networkx.algorithms.communicability_alg.A->networkx.to_numpy_array(G, nodelist)
A:networkx.algorithms.communicability_alg.(w, vec)->numpy.linalg.eigh(A)
A:networkx.algorithms.communicability_alg.expw->numpy.exp(w)
A:networkx.algorithms.communicability_alg.mapping->dict(zip(nodelist, range(len(nodelist))))
A:networkx.algorithms.communicability_alg.c[u][v]->float(expA[mapping[u], mapping[v]])
A:networkx.algorithms.communicability_alg.expA->scipy.linalg.expm(A)
networkx.algorithms.communicability(G)
networkx.algorithms.communicability_alg.communicability(G)
networkx.algorithms.communicability_alg.communicability_exp(G)
networkx.algorithms.communicability_exp(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/euler.py----------------------------------------
A:networkx.algorithms.euler.(_, next_vertex)->arbitrary_element(edges(current_vertex))
A:networkx.algorithms.euler.triple->arbitrary_element(edges(current_vertex, keys=True))
A:networkx.algorithms.euler.G->networkx.MultiGraph(G)
A:networkx.algorithms.euler.source->_find_path_start(G)
A:networkx.algorithms.euler.Gp->networkx.Graph()
A:networkx.algorithms.euler.best_matching->networkx.Graph(list(nx.max_weight_matching(Gp)))
networkx.algorithms._find_path_start(G)
networkx.algorithms._multigraph_eulerian_circuit(G,source)
networkx.algorithms._simplegraph_eulerian_circuit(G,source)
networkx.algorithms.euler._find_path_start(G)
networkx.algorithms.euler._multigraph_eulerian_circuit(G,source)
networkx.algorithms.euler._simplegraph_eulerian_circuit(G,source)
networkx.algorithms.euler.eulerian_circuit(G,source=None,keys=False)
networkx.algorithms.euler.eulerian_path(G,source=None,keys=False)
networkx.algorithms.euler.eulerize(G)
networkx.algorithms.euler.has_eulerian_path(G,source=None)
networkx.algorithms.euler.is_eulerian(G)
networkx.algorithms.euler.is_semieulerian(G)
networkx.algorithms.eulerian_circuit(G,source=None,keys=False)
networkx.algorithms.eulerian_path(G,source=None,keys=False)
networkx.algorithms.eulerize(G)
networkx.algorithms.has_eulerian_path(G,source=None)
networkx.algorithms.is_eulerian(G)
networkx.algorithms.is_semieulerian(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/d_separation.py----------------------------------------
A:networkx.algorithms.d_separation.union_xyz->x.union(y).union(z)
A:networkx.algorithms.d_separation.G_copy->G.copy()
A:networkx.algorithms.d_separation.leaves->deque([n for n in G_copy.nodes if G_copy.out_degree[n] == 0])
A:networkx.algorithms.d_separation.leaf->deque([n for n in G_copy.nodes if G_copy.out_degree[n] == 0]).popleft()
A:networkx.algorithms.d_separation.edges_to_remove->list(G_copy.out_edges(z))
A:networkx.algorithms.d_separation.disjoint_set->UnionFind(G_copy.nodes())
A:networkx.algorithms.d_separation.x_anc->networkx.ancestors(G, u)
A:networkx.algorithms.d_separation.y_anc->networkx.ancestors(G, v)
A:networkx.algorithms.d_separation.D_anc_xy->networkx.ancestors(G, u).union(y_anc)
A:networkx.algorithms.d_separation.moral_G->networkx.moral_graph(G.subgraph(D_anc_xy))
A:networkx.algorithms.d_separation.Z_prime->set(G.predecessors(u)).union(set(G.predecessors(v)))
A:networkx.algorithms.d_separation.Z_dprime->_bfs_with_marks(moral_G, u, Z_prime)
A:networkx.algorithms.d_separation.Z->_bfs_with_marks(moral_G, v, Z_dprime)
A:networkx.algorithms.d_separation.xy_anc->networkx.ancestors(G, u).union(y_anc)
A:networkx.algorithms.d_separation.marks->_bfs_with_marks(moral_G, v, z)
A:networkx.algorithms.d_separation.visited->dict()
A:networkx.algorithms.d_separation.marked->set()
A:networkx.algorithms.d_separation.m->queue.pop(0)
networkx.algorithms._bfs_with_marks(G,start_node,check_set)
networkx.algorithms.d_separated(G,x,y,z)
networkx.algorithms.d_separation._bfs_with_marks(G,start_node,check_set)
networkx.algorithms.d_separation.d_separated(G,x,y,z)
networkx.algorithms.d_separation.is_minimal_d_separator(G,u,v,z)
networkx.algorithms.d_separation.minimal_d_separator(G,u,v)
networkx.algorithms.is_minimal_d_separator(G,u,v,z)
networkx.algorithms.minimal_d_separator(G,u,v)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/similarity.py----------------------------------------
A:networkx.algorithms.similarity.paths->list()
A:networkx.algorithms.similarity.(lsa_row_ind, lsa_col_ind)->scipy.optimize.linear_sum_assignment(C)
A:networkx.algorithms.similarity.indexes->zip(range(len(lsa_row_ind)), lsa_row_ind, lsa_col_ind)
A:networkx.algorithms.similarity.subst_ind->list((k for (k, i, j) in indexes if i < m and j < n))
A:networkx.algorithms.similarity.dummy_ind->list((k for (k, i, j) in indexes if i >= m and j >= n))
A:networkx.algorithms.similarity.M->len(pending_g)
A:networkx.algorithms.similarity.N->len(pending_h)
A:networkx.algorithms.similarity.m->len(pending_g)
A:networkx.algorithms.similarity.n->len(pending_h)
A:networkx.algorithms.similarity.C->numpy.zeros((m + n, m + n))
A:networkx.algorithms.similarity.localCe->CostMatrix(np.empty((0, 0)), [], [], 0)
A:networkx.algorithms.similarity.ij->list(((g_ind[k] if k < m else M + h_ind[l], h_ind[l] if l < n else N + g_ind[k]) for (k, l) in zip(localCe.lsa_row_ind, localCe.lsa_col_ind) if k < m or l < n))
A:networkx.algorithms.similarity.(i, j)->min(((k, l) for (k, l) in zip(Cv.lsa_row_ind, Cv.lsa_col_ind) if k < m or l < n))
A:networkx.algorithms.similarity.(xy, localCe)->match_edges(pending_u[i] if i < m else None, pending_v[j] if j < n else None, pending_g, pending_h, Ce, matched_uv)
A:networkx.algorithms.similarity.Ce_xy->reduce_Ce(Ce, xy, len(pending_g), len(pending_h))
A:networkx.algorithms.similarity.Cv_ij->make_CostMatrix(reduce_C(Cv.C, (i,), (j,), m, n), m - 1 if i < m else m, n - 1 if j < n else n)
A:networkx.algorithms.similarity.other->list()
A:networkx.algorithms.similarity.maxcost.value->min(maxcost.value, matched_cost)
A:networkx.algorithms.similarity.edit_ops->get_edit_ops(matched_uv, pending_u, pending_v, Cv, pending_g, pending_h, Ce, matched_cost)
A:networkx.algorithms.similarity.len_g->len(pending_g)
A:networkx.algorithms.similarity.len_h->len(pending_h)
A:networkx.algorithms.similarity.sortedx->list(sorted((x for (x, y) in xy)))
A:networkx.algorithms.similarity.sortedy->list(sorted((y for (x, y) in xy)))
A:networkx.algorithms.similarity.G->list((pending_g.pop(x) if x < len(pending_g) else None for x in reversed(sortedx)))
A:networkx.algorithms.similarity.H->list((pending_h.pop(y) if y < len(pending_h) else None for y in reversed(sortedy)))
A:networkx.algorithms.similarity.pending_u->list(G1.nodes)
A:networkx.algorithms.similarity.pending_v->list(G2.nodes)
A:networkx.algorithms.similarity.C[0:m, 0:n]->numpy.array([1 - int(edge_match(G1.edges[g], G2.edges[h])) for g in pending_g for h in pending_h]).reshape(m, n)
A:networkx.algorithms.similarity.initial_cost->node_subst_cost(G1.nodes[root_u], G2.nodes[root_v])
A:networkx.algorithms.similarity.C[0:m, n:n + m]->numpy.array([del_costs[i] if i == j else inf for i in range(m) for j in range(m)]).reshape(m, m)
A:networkx.algorithms.similarity.C[m:m + n, 0:n]->numpy.array([ins_costs[i] if i == j else inf for i in range(n) for j in range(n)]).reshape(n, n)
A:networkx.algorithms.similarity.Cv->make_CostMatrix(C, m, n)
A:networkx.algorithms.similarity.pending_g->list(G1.edges)
A:networkx.algorithms.similarity.pending_h->list(G2.edges)
A:networkx.algorithms.similarity.Ce->make_CostMatrix(C, m, n)
A:networkx.algorithms.similarity.maxcost->MaxCost()
A:networkx.algorithms.similarity.start->time.perf_counter()
A:networkx.algorithms.similarity.nodelist->list(G)
A:networkx.algorithms.similarity.x->_simrank_similarity_numpy(G, s_indx, t_indx, importance_factor, max_iterations, tolerance)
A:networkx.algorithms.similarity.is_close->all((all((abs(newsim[u][v] - old) <= tolerance * (1 + abs(old)) for (v, old) in nbrs.items())) for (u, nbrs) in oldsim.items()))
A:networkx.algorithms.similarity.adjacency_matrix->networkx.to_numpy_array(G)
A:networkx.algorithms.similarity.s->numpy.array(adjacency_matrix.sum(axis=0))
A:networkx.algorithms.similarity.newsim->numpy.eye(len(G), dtype=np.float64)
A:networkx.algorithms.similarity.prevsim->numpy.eye(len(G), dtype=np.float64).copy()
A:networkx.algorithms.similarity.num_nodes->list((pending_g.pop(x) if x < len(pending_g) else None for x in reversed(sortedx))).number_of_nodes()
A:networkx.algorithms.similarity.eps->numpy.sqrt(1.0 / G.number_of_edges())
A:networkx.algorithms.similarity.node_map->numpy.array(G)
A:networkx.algorithms.similarity.t_choose_2->math.comb(path_length, 2)
A:networkx.algorithms.similarity.sample_size->int(c / eps ** 2 * (np.log2(t_choose_2) + 1 + np.log(1 / delta)))
A:networkx.algorithms.similarity._->list(generate_random_paths(G, sample_size, path_length=path_length, index_map=index_map))
A:networkx.algorithms.similarity.S->numpy.zeros(num_nodes)
A:networkx.algorithms.similarity.source_paths->set(index_map[source])
A:networkx.algorithms.similarity.common_paths->set(index_map[source]).intersection(paths)
A:networkx.algorithms.similarity.top_k_sorted_names->map(lambda n: node_map[n], top_k_sorted)
A:networkx.algorithms.similarity.top_k_with_val->dict(zip(top_k_sorted_names, S[top_k_sorted]))
A:networkx.algorithms.similarity.adj_mat->networkx.to_numpy_array(G)
A:networkx.algorithms.similarity.inv_row_sums->numpy.reciprocal(adj_mat.sum(axis=1)).reshape(-1, 1)
A:networkx.algorithms.similarity.node_index->numpy.random.randint(0, high=num_nodes)
A:networkx.algorithms.similarity.neighbor_index->numpy.random.choice(num_nodes, p=transition_probabilities[starting_index])
networkx.algorithms._simrank_similarity_numpy(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)
networkx.algorithms._simrank_similarity_python(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)
networkx.algorithms.debug_print(*args,**kwargs)
networkx.algorithms.generate_random_paths(G,sample_size,path_length=5,index_map=None)
networkx.algorithms.graph_edit_distance(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,roots=None,upper_bound=None,timeout=None)
networkx.algorithms.optimal_edit_paths(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None)
networkx.algorithms.optimize_edit_paths(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None,strictly_decreasing=True,roots=None,timeout=None)
networkx.algorithms.optimize_graph_edit_distance(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None)
networkx.algorithms.panther_similarity(G,source,k=5,path_length=5,c=0.5,delta=0.1,eps=None)
networkx.algorithms.similarity._simrank_similarity_numpy(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)
networkx.algorithms.similarity._simrank_similarity_python(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)
networkx.algorithms.similarity.debug_print(*args,**kwargs)
networkx.algorithms.similarity.generate_random_paths(G,sample_size,path_length=5,index_map=None)
networkx.algorithms.similarity.graph_edit_distance(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,roots=None,upper_bound=None,timeout=None)
networkx.algorithms.similarity.optimal_edit_paths(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None)
networkx.algorithms.similarity.optimize_edit_paths(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None,strictly_decreasing=True,roots=None,timeout=None)
networkx.algorithms.similarity.optimize_graph_edit_distance(G1,G2,node_match=None,edge_match=None,node_subst_cost=None,node_del_cost=None,node_ins_cost=None,edge_subst_cost=None,edge_del_cost=None,edge_ins_cost=None,upper_bound=None)
networkx.algorithms.similarity.panther_similarity(G,source,k=5,path_length=5,c=0.5,delta=0.1,eps=None)
networkx.algorithms.similarity.simrank_similarity(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)
networkx.algorithms.simrank_similarity(G,source=None,target=None,importance_factor=0.9,max_iterations=1000,tolerance=0.0001)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/cuts.py----------------------------------------
A:networkx.algorithms.cuts.edges->chain(edges, nx.edge_boundary(G, T, S, data=weight, default=1))
A:networkx.algorithms.cuts.num_cut_edges->cut_size(G, S, T=T, weight=weight)
A:networkx.algorithms.cuts.volume_S->volume(G, S, weight=weight)
A:networkx.algorithms.cuts.volume_T->volume(G, T, weight=weight)
A:networkx.algorithms.cuts.num_total_edges->G.number_of_edges()
A:networkx.algorithms.cuts.neighborhood->set(chain.from_iterable((G.neighbors(v) for v in S)))
networkx.algorithms.boundary_expansion(G,S)
networkx.algorithms.conductance(G,S,T=None,weight=None)
networkx.algorithms.cut_size(G,S,T=None,weight=None)
networkx.algorithms.cuts.boundary_expansion(G,S)
networkx.algorithms.cuts.conductance(G,S,T=None,weight=None)
networkx.algorithms.cuts.cut_size(G,S,T=None,weight=None)
networkx.algorithms.cuts.edge_expansion(G,S,T=None,weight=None)
networkx.algorithms.cuts.mixing_expansion(G,S,T=None,weight=None)
networkx.algorithms.cuts.node_expansion(G,S)
networkx.algorithms.cuts.normalized_cut_size(G,S,T=None,weight=None)
networkx.algorithms.cuts.volume(G,S,weight=None)
networkx.algorithms.edge_expansion(G,S,T=None,weight=None)
networkx.algorithms.mixing_expansion(G,S,T=None,weight=None)
networkx.algorithms.node_expansion(G,S)
networkx.algorithms.normalized_cut_size(G,S,T=None,weight=None)
networkx.algorithms.volume(G,S,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/correlation.py----------------------------------------
A:networkx.algorithms.assortativity.correlation.degrees->set.union(indeg, outdeg)
A:networkx.algorithms.assortativity.correlation.M->attribute_mixing_matrix(G, attribute, nodes, mapping)
A:networkx.algorithms.assortativity.correlation.xy->numpy.outer(x, y)
A:networkx.algorithms.assortativity.correlation.(x, y)->zip(*xy)
A:networkx.algorithms.assortativity.correlation.s->(M @ M).sum()
A:networkx.algorithms.assortativity.correlation.t->attribute_mixing_matrix(G, attribute, nodes, mapping).trace()
A:networkx.algorithms.assortativity.correlation.x->numpy.array(list(mapping.keys()))
A:networkx.algorithms.assortativity.correlation.idx->list(mapping.values())
A:networkx.algorithms.assortativity.correlation.a->attribute_mixing_matrix(G, attribute, nodes, mapping).sum(axis=0)
A:networkx.algorithms.assortativity.correlation.b->attribute_mixing_matrix(G, attribute, nodes, mapping).sum(axis=1)
A:networkx.algorithms.assortativity.correlation.ab->numpy.outer(a[idx], b[idx])
networkx.algorithms.assortativity._numeric_ac(M,mapping)
networkx.algorithms.assortativity.attribute_ac(M)
networkx.algorithms.assortativity.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation._numeric_ac(M,mapping)
networkx.algorithms.assortativity.correlation.attribute_ac(M)
networkx.algorithms.assortativity.correlation.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.numeric_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.numeric_assortativity_coefficient(G,attribute,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/mixing.py----------------------------------------
A:networkx.algorithms.assortativity.mixing.xy_iter->node_degree_xy(G, x=x, y=y, nodes=nodes, weight=weight)
A:networkx.algorithms.assortativity.mixing.d->degree_mixing_dict(G, x=x, y=y, nodes=nodes, weight=weight)
A:networkx.algorithms.assortativity.mixing.a->dict_to_numpy_array(d, mapping=mapping)
A:networkx.algorithms.assortativity.mixing.v->d[x].get(y, 0)
networkx.algorithms.assortativity.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.algorithms.assortativity.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.algorithms.assortativity.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.algorithms.assortativity.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True,mapping=None)
networkx.algorithms.assortativity.mixing.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.algorithms.assortativity.mixing.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True,mapping=None)
networkx.algorithms.assortativity.mixing.mixing_dict(xy,normalized=False)
networkx.algorithms.assortativity.mixing_dict(xy,normalized=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.neighbor_degree.t_deg->dict(target_degree())
networkx.algorithms.assortativity.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)
networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/pairs.py----------------------------------------
A:networkx.algorithms.assortativity.pairs.nodes->set(nodes)
A:networkx.algorithms.assortativity.pairs.uattr->Gnodes[u].get(attribute, None)
A:networkx.algorithms.assortativity.pairs.vattr->Gnodes[v].get(attribute, None)
networkx.algorithms.assortativity.node_attribute_xy(G,attribute,nodes=None)
networkx.algorithms.assortativity.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.pairs.node_attribute_xy(G,attribute,nodes=None)
networkx.algorithms.assortativity.pairs.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.connectivity.dsum->defaultdict(int)
A:networkx.algorithms.assortativity.connectivity.dnorm->defaultdict(int)
A:networkx.algorithms.assortativity.connectivity.source_nodes->source_degree(nodes)
A:networkx.algorithms.assortativity.connectivity.nbrdeg->target_degree(neighbors(n))
A:networkx.algorithms.assortativity.connectivity.s->sum((G[n][nbr].get(weight, 1) * d for (nbr, d) in nbrdeg))
networkx.algorithms.assortativity.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)
networkx.algorithms.assortativity.connectivity.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/base_test.py----------------------------------------
A:networkx.algorithms.assortativity.tests.base_test.G->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.S->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.N->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.F->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.K->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.cls.P4->networkx.path_graph(4)
A:networkx.algorithms.assortativity.tests.base_test.cls.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.cls.D2->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.cls.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.cls.S->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.cls.W->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.S1->networkx.star_graph(4)
A:networkx.algorithms.assortativity.tests.base_test.S2->networkx.star_graph(4)
A:networkx.algorithms.assortativity.tests.base_test.cls.DS->networkx.disjoint_union(S1, S2)
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setup_class(cls)
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setup_class(cls)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/test_neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.G->G.to_directed().to_directed()
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.nd->networkx.average_neighbor_degree(G, nodes=[1, 2])
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.D->G.to_directed().to_directed().to_directed()
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_degree_k4(self)
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_TestAverageNeighbor.test_error_invalid_source_target(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_error_invalid_source_target(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/test_correlation.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_correlation.np->pytest.importorskip('numpy')
A:networkx.algorithms.assortativity.tests.test_correlation.r->networkx.numeric_assortativity_coefficient(self.K, 'margin')
A:networkx.algorithms.assortativity.tests.test_correlation.a->pytest.importorskip('numpy').array([[50, 50, 0], [50, 50, 0], [0, 0, 2]])
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_float(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_mixed(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_negative(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed2(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_double_star(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_weighted(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed2(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_pearson_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingCorrelation.test_degree_pearson_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_float(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_mixed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_negative(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed2(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_double_star(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_weighted(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_directed2(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_pearson_assortativity_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/test_mixing.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_mixing.np->pytest.importorskip('numpy')
A:networkx.algorithms.assortativity.tests.test_mixing.d->networkx.attribute_mixing_dict(self.M, 'fish')
A:networkx.algorithms.assortativity.tests.test_mixing.a_result->pytest.importorskip('numpy').array([[6.0, 1.0], [1.0, 0.0]])
A:networkx.algorithms.assortativity.tests.test_mixing.a->networkx.attribute_mixing_matrix(self.F, 'margin', mapping=mapping)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_float(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_negative(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_weighted(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_mapping(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_weighted(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_float(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_negative(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_weighted(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_mapping(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_weighted(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/test_pairs.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy->sorted(nx.node_attribute_xy(self.S, 'fish'))
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy_result->sorted([('one', 'one'), ('two', 'two'), ('one', 'red'), ('two', 'blue')])
A:networkx.algorithms.assortativity.tests.test_pairs.xy->sorted(nx.node_degree_xy(G, weight='weight'))
A:networkx.algorithms.assortativity.tests.test_pairs.xy_result->sorted([(7, 17), (17, 10), (17, 7), (10, 17)])
A:networkx.algorithms.assortativity.tests.test_pairs.G->networkx.Graph()
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_TestDegreeMixingXY.test_node_degree_xy_weighted(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_connectivity.G->networkx.trivial_graph()
A:networkx.algorithms.assortativity.tests.test_connectivity.nd->networkx.average_degree_connectivity(D, weight='other', source='in', target='in')
A:networkx.algorithms.assortativity.tests.test_connectivity.D->networkx.trivial_graph().to_directed()
A:networkx.algorithms.assortativity.tests.test_connectivity.c->networkx.average_degree_connectivity(G, source=s, target=t)
A:networkx.algorithms.assortativity.tests.test_connectivity.cw->networkx.average_degree_connectivity(G, source=s, target=t, weight='weight')
A:networkx.algorithms.assortativity.tests.test_connectivity.conn->networkx.average_degree_connectivity(G, nodes=0)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_in_out_weight(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_invalid_source(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_invalid_target(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_invalid_undirected_graph(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_single_node(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_weight_keyword(self)
networkx.algorithms.assortativity.tests.test_TestNeighborConnectivity.test_zero_deg(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_in_out_weight(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_source(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_target(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_invalid_undirected_graph(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_single_node(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/assortativity/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_simple_paths.py----------------------------------------
A:networkx.algorithms.tests.test_simple_paths.G->networkx.Graph()
A:networkx.algorithms.tests.test_simple_paths.paths->list(nx.shortest_simple_paths(G, 0, 3, weight='foo'))
A:networkx.algorithms.tests.test_simple_paths.source->arbitrary_element(G)
A:networkx.algorithms.tests.test_simple_paths.n->len(G)
A:networkx.algorithms.tests.test_simple_paths.g1->networkx.Graph()
A:networkx.algorithms.tests.test_simple_paths.result->list(nx.shortest_simple_paths(g1, 'N1', 'N3', weight='weight'))
A:networkx.algorithms.tests.test_simple_paths.this_cost->cost_func(path)
A:networkx.algorithms.tests.test_simple_paths.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.tests.test_simple_paths.(length, path)->_bidirectional_shortest_path(directed_cycle, 0, 3, ignore_edges=[(2, 1)])
A:networkx.algorithms.tests.test_simple_paths.wheel->networkx.wheel_graph(6)
A:networkx.algorithms.tests.test_simple_paths.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.tests.test_simple_paths.XG->networkx.DiGraph()
A:networkx.algorithms.tests.test_simple_paths.XG3->networkx.Graph()
networkx.algorithms.tests.test_TestIsSimplePath
networkx.algorithms.tests.test_TestIsSimplePath.test_cycle(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_directed_cycle(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_directed_non_path(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_directed_path(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_empty_list(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_missing_node(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_multidigraph(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_multigraph(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_non_simple_path(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_simple_path(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_trivial_nonpath(self)
networkx.algorithms.tests.test_TestIsSimplePath.test_trivial_path(self)
networkx.algorithms.tests.test_hamiltonian_edge_path(G,source)
networkx.algorithms.tests.test_hamiltonian_path(G,source)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_cycle(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_cycle(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_non_path(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_directed_path(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_empty_list(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_missing_node(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multidigraph(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_multigraph(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_non_simple_path(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_simple_path(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_nonpath(self)
networkx.algorithms.tests.test_simple_paths.TestIsSimplePath.test_trivial_path(self)
networkx.algorithms.tests.test_simple_paths.hamiltonian_edge_path(G,source)
networkx.algorithms.tests.test_simple_paths.hamiltonian_path(G,source)
networkx.algorithms.tests.test_simple_paths.test_Greg_Bernstein()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_corner_cases()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_directed()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_empty()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_ignores_cycle()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_multigraph_with_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_on_non_trivial_graph()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_source_target()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_corner_cases()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_directed()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_empty()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_ignores_cycle()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph_with_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_on_non_trivial_graph()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_source_target()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_in_line_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijksta_restricted()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_ignore()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_no_path()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_ignore()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_cycle()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_directed_cycle()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted_wheel()
networkx.algorithms.tests.test_simple_paths.test_cutoff_zero()
networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_simple_paths.test_digraph_all_simple_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path()
networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path_issue2427()
networkx.algorithms.tests.test_simple_paths.test_edge_cutoff_zero()
networkx.algorithms.tests.test_simple_paths.test_edge_source_missing()
networkx.algorithms.tests.test_simple_paths.test_edge_target_missing()
networkx.algorithms.tests.test_simple_paths.test_hamiltonian__edge_path()
networkx.algorithms.tests.test_simple_paths.test_hamiltonian_path()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed_with_weight_fucntion()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_with_weight_fucntion()
networkx.algorithms.tests.test_simple_paths.test_source_missing()
networkx.algorithms.tests.test_simple_paths.test_ssp_multigraph()
networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing()
networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing2()
networkx.algorithms.tests.test_simple_paths.test_ssp_target_missing()
networkx.algorithms.tests.test_simple_paths.test_target_missing()
networkx.algorithms.tests.test_simple_paths.test_weight_name()
networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path()
networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path_issue2427()
networkx.algorithms.tests.test_simple_paths.validate_length_path(G,s,t,soln_len,length,path)
networkx.algorithms.tests.test_simple_paths.validate_path(G,s,t,soln_len,path)
networkx.algorithms.tests.test_test_Greg_Bernstein()
networkx.algorithms.tests.test_test_all_simple_edge_paths()
networkx.algorithms.tests.test_test_all_simple_edge_paths_corner_cases()
networkx.algorithms.tests.test_test_all_simple_edge_paths_cutoff()
networkx.algorithms.tests.test_test_all_simple_edge_paths_directed()
networkx.algorithms.tests.test_test_all_simple_edge_paths_empty()
networkx.algorithms.tests.test_test_all_simple_edge_paths_ignores_cycle()
networkx.algorithms.tests.test_test_all_simple_edge_paths_multigraph()
networkx.algorithms.tests.test_test_all_simple_edge_paths_multigraph_with_cutoff()
networkx.algorithms.tests.test_test_all_simple_edge_paths_on_non_trivial_graph()
networkx.algorithms.tests.test_test_all_simple_edge_paths_source_target()
networkx.algorithms.tests.test_test_all_simple_edge_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_test_all_simple_edge_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths()
networkx.algorithms.tests.test_test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths()
networkx.algorithms.tests.test_test_all_simple_paths()
networkx.algorithms.tests.test_test_all_simple_paths_corner_cases()
networkx.algorithms.tests.test_test_all_simple_paths_cutoff()
networkx.algorithms.tests.test_test_all_simple_paths_directed()
networkx.algorithms.tests.test_test_all_simple_paths_empty()
networkx.algorithms.tests.test_test_all_simple_paths_ignores_cycle()
networkx.algorithms.tests.test_test_all_simple_paths_multigraph()
networkx.algorithms.tests.test_test_all_simple_paths_multigraph_with_cutoff()
networkx.algorithms.tests.test_test_all_simple_paths_on_non_trivial_graph()
networkx.algorithms.tests.test_test_all_simple_paths_source_target()
networkx.algorithms.tests.test_test_all_simple_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_test_all_simple_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_test_all_simple_paths_with_two_targets_in_line_emits_two_paths()
networkx.algorithms.tests.test_test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths()
networkx.algorithms.tests.test_test_bidirectional_dijksta_restricted()
networkx.algorithms.tests.test_test_bidirectional_dijkstra_ignore()
networkx.algorithms.tests.test_test_bidirectional_dijkstra_no_path()
networkx.algorithms.tests.test_test_bidirectional_shortest_path_ignore()
networkx.algorithms.tests.test_test_bidirectional_shortest_path_restricted_cycle()
networkx.algorithms.tests.test_test_bidirectional_shortest_path_restricted_directed_cycle()
networkx.algorithms.tests.test_test_bidirectional_shortest_path_restricted_wheel()
networkx.algorithms.tests.test_test_cutoff_zero()
networkx.algorithms.tests.test_test_digraph_all_simple_edge_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_test_digraph_all_simple_paths_with_two_targets_cutoff()
networkx.algorithms.tests.test_test_digraph_all_simple_paths_with_two_targets_emits_two_paths()
networkx.algorithms.tests.test_test_directed_weighted_shortest_simple_path()
networkx.algorithms.tests.test_test_directed_weighted_shortest_simple_path_issue2427()
networkx.algorithms.tests.test_test_edge_cutoff_zero()
networkx.algorithms.tests.test_test_edge_source_missing()
networkx.algorithms.tests.test_test_edge_target_missing()
networkx.algorithms.tests.test_test_hamiltonian__edge_path()
networkx.algorithms.tests.test_test_hamiltonian_path()
networkx.algorithms.tests.test_test_shortest_simple_paths()
networkx.algorithms.tests.test_test_shortest_simple_paths_directed()
networkx.algorithms.tests.test_test_shortest_simple_paths_directed_with_weight_fucntion()
networkx.algorithms.tests.test_test_shortest_simple_paths_with_weight_fucntion()
networkx.algorithms.tests.test_test_source_missing()
networkx.algorithms.tests.test_test_ssp_multigraph()
networkx.algorithms.tests.test_test_ssp_source_missing()
networkx.algorithms.tests.test_test_ssp_source_missing2()
networkx.algorithms.tests.test_test_ssp_target_missing()
networkx.algorithms.tests.test_test_target_missing()
networkx.algorithms.tests.test_test_weight_name()
networkx.algorithms.tests.test_test_weighted_shortest_simple_path()
networkx.algorithms.tests.test_test_weighted_shortest_simple_path_issue2427()
networkx.algorithms.tests.test_validate_length_path(G,s,t,soln_len,length,path)
networkx.algorithms.tests.test_validate_path(G,s,t,soln_len,path)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_boundary.py----------------------------------------
A:networkx.algorithms.tests.test_boundary.null->networkx.null_graph()
A:networkx.algorithms.tests.test_boundary.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.P->networkx.petersen_graph()
A:networkx.algorithms.tests.test_boundary.G->networkx.MultiDiGraph(edges * 2)
A:networkx.algorithms.tests.test_boundary.boundary->list(nx.edge_boundary(G, S))
networkx.algorithms.tests.test_TestEdgeBoundary
networkx.algorithms.tests.test_TestEdgeBoundary.test_complete_graph(self)
networkx.algorithms.tests.test_TestEdgeBoundary.test_directed(self)
networkx.algorithms.tests.test_TestEdgeBoundary.test_multidigraph(self)
networkx.algorithms.tests.test_TestEdgeBoundary.test_multigraph(self)
networkx.algorithms.tests.test_TestEdgeBoundary.test_null_graph(self)
networkx.algorithms.tests.test_TestEdgeBoundary.test_path_graph(self)
networkx.algorithms.tests.test_TestNodeBoundary
networkx.algorithms.tests.test_TestNodeBoundary.test_complete_graph(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_directed(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_multidigraph(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_multigraph(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_null_graph(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_path_graph(self)
networkx.algorithms.tests.test_TestNodeBoundary.test_petersen(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_complete_graph(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_directed(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multidigraph(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_multigraph(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_null_graph(self)
networkx.algorithms.tests.test_boundary.TestEdgeBoundary.test_path_graph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_complete_graph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_directed(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multidigraph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_multigraph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_null_graph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_path_graph(self)
networkx.algorithms.tests.test_boundary.TestNodeBoundary.test_petersen(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_euler.py----------------------------------------
A:networkx.algorithms.tests.test_euler.G->networkx.eulerize(G)
A:networkx.algorithms.tests.test_euler.edges->list(nx.eulerian_circuit(G, source=0, keys=True))
A:networkx.algorithms.tests.test_euler.f->list(nx.eulerian_circuit(nx.complete_graph(4)))
A:networkx.algorithms.tests.test_euler.H->networkx.eulerize(G)
networkx.algorithms.tests.test_TestEulerianCircuit
networkx.algorithms.tests.test_TestEulerianCircuit.test_eulerian_circuit_cycle(self)
networkx.algorithms.tests.test_TestEulerianCircuit.test_eulerian_circuit_digraph(self)
networkx.algorithms.tests.test_TestEulerianCircuit.test_multigraph(self)
networkx.algorithms.tests.test_TestEulerianCircuit.test_multigraph_with_keys(self)
networkx.algorithms.tests.test_TestEulerianCircuit.test_not_eulerian(self)
networkx.algorithms.tests.test_TestEulerianPath
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path(self)
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path_eulerian_circuit(self)
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path_multigraph(self)
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path_multigraph_undirected(self)
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path_straight_link(self)
networkx.algorithms.tests.test_TestEulerianPath.test_eulerian_path_undirected(self)
networkx.algorithms.tests.test_TestEulerize
networkx.algorithms.tests.test_TestEulerize.test_disconnected(self)
networkx.algorithms.tests.test_TestEulerize.test_null_graph(self)
networkx.algorithms.tests.test_TestEulerize.test_null_multigraph(self)
networkx.algorithms.tests.test_TestEulerize.test_on_complete_graph(self)
networkx.algorithms.tests.test_TestEulerize.test_on_empty_graph(self)
networkx.algorithms.tests.test_TestEulerize.test_on_eulerian(self)
networkx.algorithms.tests.test_TestEulerize.test_on_eulerian_multigraph(self)
networkx.algorithms.tests.test_TestEulerize.test_on_non_eulerian_graph(self)
networkx.algorithms.tests.test_TestFindPathStart
networkx.algorithms.tests.test_TestFindPathStart.testfind_path_start(self)
networkx.algorithms.tests.test_TestHasEulerianPath
networkx.algorithms.tests.test_TestHasEulerianPath.test_has_eulerian_path_cyclic(self)
networkx.algorithms.tests.test_TestHasEulerianPath.test_has_eulerian_path_directed_graph(self)
networkx.algorithms.tests.test_TestHasEulerianPath.test_has_eulerian_path_non_cyclic(self)
networkx.algorithms.tests.test_TestHasEulerianPath.test_has_eulerian_path_not_weakly_connected(self,G)
networkx.algorithms.tests.test_TestHasEulerianPath.test_has_eulerian_path_unbalancedins_more_than_one(self,G)
networkx.algorithms.tests.test_TestIsEulerian
networkx.algorithms.tests.test_TestIsEulerian.test_is_eulerian(self)
networkx.algorithms.tests.test_TestIsEulerian.test_is_eulerian2(self)
networkx.algorithms.tests.test_TestIsSemiEulerian
networkx.algorithms.tests.test_TestIsSemiEulerian.test_is_semieulerian(self)
networkx.algorithms.tests.test_euler.TestEulerianCircuit
networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_cycle(self)
networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_eulerian_circuit_digraph(self)
networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph(self)
networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_multigraph_with_keys(self)
networkx.algorithms.tests.test_euler.TestEulerianCircuit.test_not_eulerian(self)
networkx.algorithms.tests.test_euler.TestEulerianPath
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path(self)
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path_eulerian_circuit(self)
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path_multigraph(self)
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path_multigraph_undirected(self)
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path_straight_link(self)
networkx.algorithms.tests.test_euler.TestEulerianPath.test_eulerian_path_undirected(self)
networkx.algorithms.tests.test_euler.TestEulerize
networkx.algorithms.tests.test_euler.TestEulerize.test_disconnected(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_null_graph(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_null_multigraph(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_on_complete_graph(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_on_empty_graph(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_on_eulerian_multigraph(self)
networkx.algorithms.tests.test_euler.TestEulerize.test_on_non_eulerian_graph(self)
networkx.algorithms.tests.test_euler.TestFindPathStart
networkx.algorithms.tests.test_euler.TestFindPathStart.testfind_path_start(self)
networkx.algorithms.tests.test_euler.TestHasEulerianPath
networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_cyclic(self)
networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_directed_graph(self)
networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_non_cyclic(self)
networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_not_weakly_connected(self,G)
networkx.algorithms.tests.test_euler.TestHasEulerianPath.test_has_eulerian_path_unbalancedins_more_than_one(self,G)
networkx.algorithms.tests.test_euler.TestIsEulerian
networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian(self)
networkx.algorithms.tests.test_euler.TestIsEulerian.test_is_eulerian2(self)
networkx.algorithms.tests.test_euler.TestIsSemiEulerian
networkx.algorithms.tests.test_euler.TestIsSemiEulerian.test_is_semieulerian(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_graphical.py----------------------------------------
A:networkx.algorithms.tests.test_graphical.G->networkx.erdos_renyi_graph(n, p * (i + 1), None, True)
A:networkx.algorithms.tests.test_graphical.cls.GAG->networkx.generators.atlas.graph_atlas_g()
A:networkx.algorithms.tests.test_graphical.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_graphical.ds->pytest.importorskip('numpy').array([1.1, 2, 2, 2, 1], dtype=np.float64)
networkx.algorithms.tests.test_TestAtlas
networkx.algorithms.tests.test_TestAtlas.setup_class(cls)
networkx.algorithms.tests.test_TestAtlas.test_atlas(self)
networkx.algorithms.tests.test_graphical.TestAtlas
networkx.algorithms.tests.test_graphical.TestAtlas.setup_class(cls)
networkx.algorithms.tests.test_graphical.TestAtlas.test_atlas(self)
networkx.algorithms.tests.test_graphical.test_directed_degree_sequence()
networkx.algorithms.tests.test_graphical.test_multi_sequence()
networkx.algorithms.tests.test_graphical.test_negative_input()
networkx.algorithms.tests.test_graphical.test_non_integer_input()
networkx.algorithms.tests.test_graphical.test_numpy_degree_sequence()
networkx.algorithms.tests.test_graphical.test_pseudo_sequence()
networkx.algorithms.tests.test_graphical.test_small_directed_sequences()
networkx.algorithms.tests.test_graphical.test_small_graph_false()
networkx.algorithms.tests.test_graphical.test_small_graph_true()
networkx.algorithms.tests.test_graphical.test_string_input()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2()
networkx.algorithms.tests.test_test_directed_degree_sequence()
networkx.algorithms.tests.test_test_multi_sequence()
networkx.algorithms.tests.test_test_negative_input()
networkx.algorithms.tests.test_test_non_integer_input()
networkx.algorithms.tests.test_test_numpy_degree_sequence()
networkx.algorithms.tests.test_test_pseudo_sequence()
networkx.algorithms.tests.test_test_small_directed_sequences()
networkx.algorithms.tests.test_test_small_graph_false()
networkx.algorithms.tests.test_test_small_graph_true()
networkx.algorithms.tests.test_test_string_input()
networkx.algorithms.tests.test_test_valid_degree_sequence1()
networkx.algorithms.tests.test_test_valid_degree_sequence2()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_dominating.py----------------------------------------
A:networkx.algorithms.tests.test_dominating.G->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_dominating.D->networkx.dominating_set(G, start_with=10)
A:networkx.algorithms.tests.test_dominating.K4->networkx.complete_graph(4)
A:networkx.algorithms.tests.test_dominating.K5->networkx.complete_graph(5)
networkx.algorithms.tests.test_dominating.test_complete()
networkx.algorithms.tests.test_dominating.test_dominating_set()
networkx.algorithms.tests.test_dominating.test_is_dominating_set()
networkx.algorithms.tests.test_dominating.test_raise_dominating_set()
networkx.algorithms.tests.test_dominating.test_wikipedia_is_dominating_set()
networkx.algorithms.tests.test_test_complete()
networkx.algorithms.tests.test_test_dominating_set()
networkx.algorithms.tests.test_test_is_dominating_set()
networkx.algorithms.tests.test_test_raise_dominating_set()
networkx.algorithms.tests.test_test_wikipedia_is_dominating_set()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_chains.py----------------------------------------
A:networkx.algorithms.tests.test_chains.n->len(seq)
A:networkx.algorithms.tests.test_chains.cycled_seq->cycle(seq)
A:networkx.algorithms.tests.test_chains.seq2->tuple(seq2)
A:networkx.algorithms.tests.test_chains.reversed_chain->list(reversed([tuple(reversed(e)) for e in chain]))
A:networkx.algorithms.tests.test_chains.G->networkx.Graph()
A:networkx.algorithms.tests.test_chains.chains->list(nx.chain_decomposition(G, root='a'))
A:networkx.algorithms.tests.test_chains.H->networkx.barbell_graph(3, 0)
A:networkx.algorithms.tests.test_chains.mapping->dict(zip(range(6), 'abcdef'))
networkx.algorithms.tests.test_TestChainDecomposition
networkx.algorithms.tests.test_TestChainDecomposition.assertContainsChain(self,chain,expected)
networkx.algorithms.tests.test_TestChainDecomposition.test_barbell_graph(self)
networkx.algorithms.tests.test_TestChainDecomposition.test_chain_decomposition_root_not_in_G(self)
networkx.algorithms.tests.test_TestChainDecomposition.test_decomposition(self)
networkx.algorithms.tests.test_TestChainDecomposition.test_disconnected_graph(self)
networkx.algorithms.tests.test_TestChainDecomposition.test_disconnected_graph_root_node(self)
networkx.algorithms.tests.test_chains.TestChainDecomposition
networkx.algorithms.tests.test_chains.TestChainDecomposition.assertContainsChain(self,chain,expected)
networkx.algorithms.tests.test_chains.TestChainDecomposition.test_barbell_graph(self)
networkx.algorithms.tests.test_chains.TestChainDecomposition.test_chain_decomposition_root_not_in_G(self)
networkx.algorithms.tests.test_chains.TestChainDecomposition.test_decomposition(self)
networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph(self)
networkx.algorithms.tests.test_chains.TestChainDecomposition.test_disconnected_graph_root_node(self)
networkx.algorithms.tests.test_chains.cycles(seq)
networkx.algorithms.tests.test_chains.cyclic_equals(seq1,seq2)
networkx.algorithms.tests.test_cycles(seq)
networkx.algorithms.tests.test_cyclic_equals(seq1,seq2)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_wiener.py----------------------------------------
A:networkx.algorithms.tests.test_wiener.G->path_graph(n)
A:networkx.algorithms.tests.test_wiener.H->DiGraph(G)
A:networkx.algorithms.tests.test_wiener.actual->wiener_index(G)
networkx.algorithms.tests.test_TestWienerIndex
networkx.algorithms.tests.test_TestWienerIndex.test_complete_graph(self)
networkx.algorithms.tests.test_TestWienerIndex.test_directed(self)
networkx.algorithms.tests.test_TestWienerIndex.test_disconnected_graph(self)
networkx.algorithms.tests.test_TestWienerIndex.test_path_graph(self)
networkx.algorithms.tests.test_wiener.TestWienerIndex
networkx.algorithms.tests.test_wiener.TestWienerIndex.test_complete_graph(self)
networkx.algorithms.tests.test_wiener.TestWienerIndex.test_directed(self)
networkx.algorithms.tests.test_wiener.TestWienerIndex.test_disconnected_graph(self)
networkx.algorithms.tests.test_wiener.TestWienerIndex.test_path_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_communicability.py----------------------------------------
A:networkx.algorithms.tests.test_communicability.result->communicability_exp(G1)
A:networkx.algorithms.tests.test_communicability.answer->defaultdict(dict)
A:networkx.algorithms.tests.test_communicability.G1->networkx.Graph([('Franck', 'Aric'), ('Aric', 'Dan'), ('Dan', 'Albert'), ('Albert', 'Franck'), ('Dan', '1'), ('Franck', 'Albert')])
networkx.algorithms.tests.test_communicability.TestCommunicability
networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability(self)
networkx.algorithms.tests.test_communicability.TestCommunicability.test_communicability2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_planar_drawing.py----------------------------------------
A:networkx.algorithms.tests.test_planar_drawing.embedding->networkx.PlanarEmbedding()
A:networkx.algorithms.tests.test_planar_drawing.(res_embedding, _)->triangulate_embedding(embedding, False)
A:networkx.algorithms.tests.test_planar_drawing.pos_fully->networkx.combinatorial_embedding_to_pos(embedding, False)
A:networkx.algorithms.tests.test_planar_drawing.pos_internally->networkx.combinatorial_embedding_to_pos(embedding, True)
A:networkx.algorithms.tests.test_planar_drawing.dist_1_2->math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
A:networkx.algorithms.tests.test_planar_drawing.dist_1_p->math.sqrt((x1 - px) ** 2 + (y1 - py) ** 2)
A:networkx.algorithms.tests.test_planar_drawing.dist_2_p->math.sqrt((x2 - px) ** 2 + (y2 - py) ** 2)
A:networkx.algorithms.tests.test_planar_drawing.new_vector->Vector(pos[nbr][0] - v_pos[0], pos[nbr][1] - v_pos[1], nbr)
networkx.algorithms.tests.test_Vector(self,x,y,node)
networkx.algorithms.tests.test_Vector.__eq__(self,other)
networkx.algorithms.tests.test_Vector.__ge__(self,other)
networkx.algorithms.tests.test_Vector.__gt__(self,other)
networkx.algorithms.tests.test_Vector.__le__(self,other)
networkx.algorithms.tests.test_Vector.__lt__(self,other)
networkx.algorithms.tests.test_Vector.__ne__(self,other)
networkx.algorithms.tests.test_check_edge_intersections(G,pos)
networkx.algorithms.tests.test_check_embedding_data(embedding_data)
networkx.algorithms.tests.test_check_triangulation(embedding,expected_embedding)
networkx.algorithms.tests.test_is_close(a,b,rel_tol=1e-09,abs_tol=0.0)
networkx.algorithms.tests.test_planar_drawing.Vector(self,x,y,node)
networkx.algorithms.tests.test_planar_drawing.Vector.__eq__(self,other)
networkx.algorithms.tests.test_planar_drawing.Vector.__ge__(self,other)
networkx.algorithms.tests.test_planar_drawing.Vector.__gt__(self,other)
networkx.algorithms.tests.test_planar_drawing.Vector.__init__(self,x,y,node)
networkx.algorithms.tests.test_planar_drawing.Vector.__le__(self,other)
networkx.algorithms.tests.test_planar_drawing.Vector.__lt__(self,other)
networkx.algorithms.tests.test_planar_drawing.Vector.__ne__(self,other)
networkx.algorithms.tests.test_planar_drawing.check_edge_intersections(G,pos)
networkx.algorithms.tests.test_planar_drawing.check_embedding_data(embedding_data)
networkx.algorithms.tests.test_planar_drawing.check_triangulation(embedding,expected_embedding)
networkx.algorithms.tests.test_planar_drawing.is_close(a,b,rel_tol=1e-09,abs_tol=0.0)
networkx.algorithms.tests.test_planar_drawing.planar_drawing_conforms_to_embedding(embedding,pos)
networkx.algorithms.tests.test_planar_drawing.point_in_between(a,b,p)
networkx.algorithms.tests.test_planar_drawing.test_circle_graph()
networkx.algorithms.tests.test_planar_drawing.test_graph1()
networkx.algorithms.tests.test_planar_drawing.test_graph2()
networkx.algorithms.tests.test_planar_drawing.test_grid_graph()
networkx.algorithms.tests.test_planar_drawing.test_invalid_half_edge()
networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph1()
networkx.algorithms.tests.test_planar_drawing.test_multiple_component_graph2()
networkx.algorithms.tests.test_planar_drawing.test_one_node_graph()
networkx.algorithms.tests.test_planar_drawing.test_three_node_graph()
networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding1()
networkx.algorithms.tests.test_planar_drawing.test_triangulate_embedding2()
networkx.algorithms.tests.test_planar_drawing.test_two_node_graph()
networkx.algorithms.tests.test_planar_drawing_conforms_to_embedding(embedding,pos)
networkx.algorithms.tests.test_point_in_between(a,b,p)
networkx.algorithms.tests.test_test_circle_graph()
networkx.algorithms.tests.test_test_graph1()
networkx.algorithms.tests.test_test_graph2()
networkx.algorithms.tests.test_test_grid_graph()
networkx.algorithms.tests.test_test_invalid_half_edge()
networkx.algorithms.tests.test_test_multiple_component_graph1()
networkx.algorithms.tests.test_test_multiple_component_graph2()
networkx.algorithms.tests.test_test_one_node_graph()
networkx.algorithms.tests.test_test_three_node_graph()
networkx.algorithms.tests.test_test_triangulate_embedding1()
networkx.algorithms.tests.test_test_triangulate_embedding2()
networkx.algorithms.tests.test_test_two_node_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_distance_regular.py----------------------------------------
A:networkx.algorithms.tests.test_distance_regular.G->networkx.path_graph(4)
A:networkx.algorithms.tests.test_distance_regular.(b, c)->networkx.intersection_array(nx.icosahedral_graph())
A:networkx.algorithms.tests.test_distance_regular.g->networkx.global_parameters(b, c)
networkx.algorithms.tests.test_distance_TestDistanceRegular
networkx.algorithms.tests.test_distance_TestDistanceRegular.test_global_parameters(self)
networkx.algorithms.tests.test_distance_TestDistanceRegular.test_intersection_array(self)
networkx.algorithms.tests.test_distance_TestDistanceRegular.test_is_distance_regular(self)
networkx.algorithms.tests.test_distance_TestDistanceRegular.test_not_connected(self)
networkx.algorithms.tests.test_distance_TestStronglyRegular
networkx.algorithms.tests.test_distance_TestStronglyRegular.test_cycle_graph(self)
networkx.algorithms.tests.test_distance_TestStronglyRegular.test_path_graph(self)
networkx.algorithms.tests.test_distance_TestStronglyRegular.test_petersen_graph(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected(self)
networkx.algorithms.tests.test_distance_regular.TestStronglyRegular
networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_cycle_graph(self)
networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_path_graph(self)
networkx.algorithms.tests.test_distance_regular.TestStronglyRegular.test_petersen_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_hybrid.py----------------------------------------
A:networkx.algorithms.tests.test_hybrid.G->networkx.Graph()
A:networkx.algorithms.tests.test_hybrid.(H, graphOK)->networkx.kl_connected_subgraph(G, 2, 2, low_memory=True, same_as_graph=True)
A:networkx.algorithms.tests.test_hybrid.H->networkx.kl_connected_subgraph(G, 2, 2)
networkx.algorithms.tests.test_hybrid.test_2d_grid_graph()
networkx.algorithms.tests.test_hybrid.test_small_graph()
networkx.algorithms.tests.test_test_2d_grid_graph()
networkx.algorithms.tests.test_test_small_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_smetric.py----------------------------------------
A:networkx.algorithms.tests.test_smetric.g->networkx.Graph()
A:networkx.algorithms.tests.test_smetric.sm->networkx.s_metric(nx.Graph(), normalized=True)
networkx.algorithms.tests.test_smetric.test_normalized()
networkx.algorithms.tests.test_smetric.test_smetric()
networkx.algorithms.tests.test_test_normalized()
networkx.algorithms.tests.test_test_smetric()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_threshold.py----------------------------------------
A:networkx.algorithms.tests.test_threshold.G->networkx.algorithms.threshold.threshold_graph(cs)
A:networkx.algorithms.tests.test_threshold.cs0->networkx.algorithms.threshold.creation_sequence(deg)
A:networkx.algorithms.tests.test_threshold.H0->networkx.algorithms.threshold.threshold_graph(cs0)
A:networkx.algorithms.tests.test_threshold.cs1->networkx.algorithms.threshold.creation_sequence(deg, with_labels=True)
A:networkx.algorithms.tests.test_threshold.H1->networkx.algorithms.threshold.threshold_graph(cs1)
A:networkx.algorithms.tests.test_threshold.cs2->networkx.algorithms.threshold.weights_to_creation_sequence(wseq)
A:networkx.algorithms.tests.test_threshold.H2->networkx.algorithms.threshold.threshold_graph(cs2)
A:networkx.algorithms.tests.test_threshold.spl->networkx.algorithms.threshold.shortest_path_length(cs1, 3)
A:networkx.algorithms.tests.test_threshold.spl2->networkx.algorithms.threshold.shortest_path_length([t for (v, t) in cs1], 2)
A:networkx.algorithms.tests.test_threshold.cs->networkx.algorithms.threshold.creation_sequence(dict(TG.degree()), with_labels=True)
A:networkx.algorithms.tests.test_threshold.wseq->networkx.algorithms.threshold.creation_sequence_to_weights('ddidiiidididid')
A:networkx.algorithms.tests.test_threshold.TG->networkx.algorithms.threshold.find_threshold_graph(G)
A:networkx.algorithms.tests.test_threshold.ts->networkx.algorithms.threshold.triangle_sequence(cs)
A:networkx.algorithms.tests.test_threshold.c1->networkx.algorithms.threshold.cluster_sequence(cs)
A:networkx.algorithms.tests.test_threshold.c2->list(nx.clustering(G).values())
A:networkx.algorithms.tests.test_threshold.b1->networkx.betweenness_centrality(G).values()
A:networkx.algorithms.tests.test_threshold.b2->networkx.algorithms.threshold.betweenness_sequence(cs)
A:networkx.algorithms.tests.test_threshold.s->networkx.algorithms.threshold.right_d_threshold_sequence(5, 7)
A:networkx.algorithms.tests.test_threshold.s1->networkx.algorithms.threshold.swap_d(s, 1.0, 1.0, seed=1)
A:networkx.algorithms.tests.test_threshold.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_threshold.(tgeval, tgevec)->networkx.algorithms.threshold.eigenvectors(cs)
A:networkx.algorithms.tests.test_threshold.lapl->networkx.laplacian_matrix(G)
A:networkx.algorithms.tests.test_threshold.MG->networkx.algorithms.threshold.threshold_graph(cs, create_using=nx.MultiGraph())
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_create_using(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequence_to_weights(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_find_alternating_4_cycle(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_finding_routines(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_left_d_threshold_sequence(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_make_compact(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_random_threshold_sequence(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_right_d_threshold_sequence(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_shortest_path_length(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_uncompact(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds(self)
networkx.algorithms.tests.test_threshold.TestGeneratorThreshold.test_weights_to_creation_sequence(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.tests.test_cluster.G->networkx.complete_graph(5)
A:networkx.algorithms.tests.test_cluster.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_cluster.G1->networkx.complete_graph(5).subgraph([1, 2, 3, 4, 5, 13, 14, 15, 16])
A:networkx.algorithms.tests.test_cluster.G2->networkx.complete_graph(5).subgraph([1, 6, 7, 8, 9, 10, 11, 12])
networkx.algorithms.tests.test_cluster.TestAverageClustering
networkx.algorithms.tests.test_cluster.TestAverageClustering.setup_class(cls)
networkx.algorithms.tests.test_cluster.TestAverageClustering.test_average_clustering(self)
networkx.algorithms.tests.test_cluster.TestAverageClustering.test_average_clustering_signed(self)
networkx.algorithms.tests.test_cluster.TestAverageClustering.test_empty(self)
networkx.algorithms.tests.test_cluster.TestClustering
networkx.algorithms.tests.test_cluster.TestClustering.setup_class(cls)
networkx.algorithms.tests.test_cluster.TestClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_k5_signed(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestDirectedAverageClustering
networkx.algorithms.tests.test_cluster.TestDirectedAverageClustering.setup_class(cls)
networkx.algorithms.tests.test_cluster.TestDirectedAverageClustering.test_average_clustering(self)
networkx.algorithms.tests.test_cluster.TestDirectedAverageClustering.test_empty(self)
networkx.algorithms.tests.test_cluster.TestDirectedClustering
networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestDirectedClustering.test_triangle_and_edge(self)
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.setup_class(cls)
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestDirectedWeightedClustering.test_triangle_and_edge(self)
networkx.algorithms.tests.test_cluster.TestGeneralizedDegree
networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_generalized_degree(self)
networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_k5(self)
networkx.algorithms.tests.test_cluster.TestGeneralizedDegree.test_path(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_peng_square_clustering(self)
networkx.algorithms.tests.test_cluster.TestTransitivity
networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_path(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity(self)
networkx.algorithms.tests.test_cluster.TestTriangles
networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_empty(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering
networkx.algorithms.tests.test_cluster.TestWeightedClustering.setup_class(cls)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_signed_edge(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_sparsifiers.py----------------------------------------
A:networkx.algorithms.tests.test_sparsifiers.original_length->dict(nx.shortest_path_length(G, weight=weight))
A:networkx.algorithms.tests.test_sparsifiers.spanner_length->dict(nx.shortest_path_length(spanner, weight=weight))
A:networkx.algorithms.tests.test_sparsifiers.G[u][v]['weight']->seed.random()
A:networkx.algorithms.tests.test_sparsifiers.G->networkx.empty_graph()
A:networkx.algorithms.tests.test_sparsifiers.spanner->networkx.spanner(G, 10, seed=_seed)
networkx.algorithms.tests.test__assign_random_weights(G,seed=None)
networkx.algorithms.tests.test__test_spanner(G,spanner,stretch,weight=None)
networkx.algorithms.tests.test_sparsifiers._assign_random_weights(G,seed=None)
networkx.algorithms.tests.test_sparsifiers._test_spanner(G,spanner,stretch,weight=None)
networkx.algorithms.tests.test_sparsifiers.test_spanner_invalid_stretch()
networkx.algorithms.tests.test_sparsifiers.test_spanner_trivial()
networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_complete_graph()
networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_disconnected_graph()
networkx.algorithms.tests.test_sparsifiers.test_spanner_unweighted_gnp_graph()
networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_complete_graph()
networkx.algorithms.tests.test_sparsifiers.test_spanner_weighted_gnp_graph()
networkx.algorithms.tests.test_test_spanner_invalid_stretch()
networkx.algorithms.tests.test_test_spanner_trivial()
networkx.algorithms.tests.test_test_spanner_unweighted_complete_graph()
networkx.algorithms.tests.test_test_spanner_unweighted_disconnected_graph()
networkx.algorithms.tests.test_test_spanner_unweighted_gnp_graph()
networkx.algorithms.tests.test_test_spanner_weighted_complete_graph()
networkx.algorithms.tests.test_test_spanner_weighted_gnp_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_vitality.py----------------------------------------
A:networkx.algorithms.tests.test_vitality.G->networkx.path_graph(3)
A:networkx.algorithms.tests.test_vitality.vitality->networkx.closeness_vitality(G, weight='weight')
networkx.algorithms.tests.test_TestClosenessVitality
networkx.algorithms.tests.test_TestClosenessVitality.test_disconnecting_graph(self)
networkx.algorithms.tests.test_TestClosenessVitality.test_unweighted(self)
networkx.algorithms.tests.test_TestClosenessVitality.test_unweighted_digraph(self)
networkx.algorithms.tests.test_TestClosenessVitality.test_weighted(self)
networkx.algorithms.tests.test_TestClosenessVitality.test_weighted_digraph(self)
networkx.algorithms.tests.test_TestClosenessVitality.test_weighted_multidigraph(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_disconnecting_graph(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_unweighted_digraph(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_digraph(self)
networkx.algorithms.tests.test_vitality.TestClosenessVitality.test_weighted_multidigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_regular.py----------------------------------------
A:networkx.algorithms.tests.test_regular.g->networkx.generators.lollipop_graph(5, 5)
A:networkx.algorithms.tests.test_regular.f->networkx.algorithms.regular.k_factor(g, 2)
A:networkx.algorithms.tests.test_regular.g_kf->networkx.algorithms.regular.k_factor(g, 2)
networkx.algorithms.tests.test_TestIsKRegular
networkx.algorithms.tests.test_TestIsKRegular.test_is_k_regular1(self)
networkx.algorithms.tests.test_TestIsKRegular.test_is_k_regular2(self)
networkx.algorithms.tests.test_TestIsKRegular.test_is_k_regular3(self)
networkx.algorithms.tests.test_TestIsRegular
networkx.algorithms.tests.test_TestIsRegular.test_is_regular1(self)
networkx.algorithms.tests.test_TestIsRegular.test_is_regular2(self)
networkx.algorithms.tests.test_TestIsRegular.test_is_regular3(self)
networkx.algorithms.tests.test_TestIsRegular.test_is_regular4(self)
networkx.algorithms.tests.test_TestKFactor
networkx.algorithms.tests.test_TestKFactor.test_k_factor1(self)
networkx.algorithms.tests.test_TestKFactor.test_k_factor2(self)
networkx.algorithms.tests.test_TestKFactor.test_k_factor3(self)
networkx.algorithms.tests.test_TestKFactor.test_k_factor4(self)
networkx.algorithms.tests.test_TestKFactor.test_k_factor5(self)
networkx.algorithms.tests.test_TestKFactor.test_k_factor_trivial(self)
networkx.algorithms.tests.test_regular.TestIsKRegular
networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular1(self)
networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular2(self)
networkx.algorithms.tests.test_regular.TestIsKRegular.test_is_k_regular3(self)
networkx.algorithms.tests.test_regular.TestIsRegular
networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular1(self)
networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular2(self)
networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular3(self)
networkx.algorithms.tests.test_regular.TestIsRegular.test_is_regular4(self)
networkx.algorithms.tests.test_regular.TestKFactor
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor1(self)
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor2(self)
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor3(self)
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor4(self)
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor5(self)
networkx.algorithms.tests.test_regular.TestKFactor.test_k_factor_trivial(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_structuralholes.py----------------------------------------
A:networkx.algorithms.tests.test_structuralholes.self.D->networkx.DiGraph()
A:networkx.algorithms.tests.test_structuralholes.self.G->networkx.Graph()
A:networkx.algorithms.tests.test_structuralholes.constraint->networkx.constraint(G)
A:networkx.algorithms.tests.test_structuralholes.effective_size->networkx.effective_size(G)
A:networkx.algorithms.tests.test_structuralholes.D->self.D.copy()
A:networkx.algorithms.tests.test_structuralholes.G->self.G.copy()
networkx.algorithms.tests.test_TestStructuralHoles
networkx.algorithms.tests.test_TestStructuralHoles.setup_method(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_constraint_directed(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_constraint_isolated(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_constraint_undirected(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_constraint_weighted_directed(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_constraint_weighted_undirected(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_borgatti_isolated(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_directed(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_isolated(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_undirected(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_undirected_borgatti(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_weighted_directed(self)
networkx.algorithms.tests.test_TestStructuralHoles.test_effective_size_weighted_undirected(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.setup_method(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_directed(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_isolated(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_undirected(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_directed(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_constraint_weighted_undirected(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_borgatti_isolated(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_directed(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_isolated(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_undirected_borgatti(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_directed(self)
networkx.algorithms.tests.test_structuralholes.TestStructuralHoles.test_effective_size_weighted_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_isolate.py----------------------------------------
A:networkx.algorithms.tests.test_isolate.G->networkx.Graph()
networkx.algorithms.tests.test_isolate.test_is_isolate()
networkx.algorithms.tests.test_isolate.test_isolates()
networkx.algorithms.tests.test_isolate.test_number_of_isolates()
networkx.algorithms.tests.test_test_is_isolate()
networkx.algorithms.tests.test_test_isolates()
networkx.algorithms.tests.test_test_number_of_isolates()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_clique.py----------------------------------------
A:networkx.algorithms.tests.test_clique.self.G->cnlti(nx.generators.havel_hakimi_graph(z), first_label=1)
A:networkx.algorithms.tests.test_clique.self.cl->list(nx.find_cliques(self.G))
A:networkx.algorithms.tests.test_clique.H->networkx.projected_graph(B, range(1, 12))
A:networkx.algorithms.tests.test_clique.cl->list(nx.find_cliques(self.G, [2, 6, 4]))
A:networkx.algorithms.tests.test_clique.rcl->networkx.find_cliques_recursive(self.G, [2, 6, 4])
A:networkx.algorithms.tests.test_clique.hcl->list(nx.find_cliques(self.H))
A:networkx.algorithms.tests.test_clique.G->networkx.Graph()
A:networkx.algorithms.tests.test_clique.result->networkx.cliques_containing_node(G, [1, 2])
A:networkx.algorithms.tests.test_clique.result[k]->sorted(v)
A:networkx.algorithms.tests.test_clique.B->networkx.make_clique_bipartite(G)
A:networkx.algorithms.tests.test_clique.H1->networkx.relabel_nodes(H1, {-v: v - 1 for v in range(1, 6)})
A:networkx.algorithms.tests.test_clique.H2->networkx.make_max_clique_graph(G)
A:networkx.algorithms.tests.test_clique.cliques->list(nx.enumerate_all_cliques(G))
A:networkx.algorithms.tests.test_clique.clique_sizes->list(map(len, cliques))
networkx.algorithms.tests.test_clique.TestCliques
networkx.algorithms.tests.test_clique.TestCliques.setup_method(self)
networkx.algorithms.tests.test_clique.TestCliques.test_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_clique_number2(self)
networkx.algorithms.tests.test_clique.TestCliques.test_clique_number3(self)
networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node(self)
networkx.algorithms.tests.test_clique.TestCliques.test_directed(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques3(self)
networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite(self)
networkx.algorithms.tests.test_clique.TestCliques.test_make_max_clique_graph(self)
networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques(self)
networkx.algorithms.tests.test_clique.TestCliques.test_selfloops(self)
networkx.algorithms.tests.test_clique.TestEnumerateAllCliques
networkx.algorithms.tests.test_clique.TestEnumerateAllCliques.test_paper_figure_4(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_dag.py----------------------------------------
A:networkx.algorithms.tests.test_dag.G->networkx.DiGraph(edges)
A:networkx.algorithms.tests.test_dag.DG->networkx.MultiDiGraph(edges)
A:networkx.algorithms.tests.test_dag.soln->sorted(solution + [(n, n) for n in G])
A:networkx.algorithms.tests.test_dag.H->transitive_closure(G)
A:networkx.algorithms.tests.test_dag.solution->sorted([(1, 2), (2, 1), (2, 3), (3, 2), (1, 3), (3, 1)])
A:networkx.algorithms.tests.test_dag.sorting->list(nx.lexicographical_topological_sort(G, key=sorting_key))
A:networkx.algorithms.tests.test_dag.MG->networkx.MultiDiGraph(G.edges)
A:networkx.algorithms.tests.test_dag.B->networkx.dag_to_branching(G)
A:networkx.algorithms.tests.test_dag.expected->networkx.DiGraph([(0, 1), (1, 3), (0, 2), (2, 4), (5, 6), (6, 7)])
A:networkx.algorithms.tests.test_dag.A->networkx.balanced_tree(2, 2, create_using=nx.DiGraph())
A:networkx.algorithms.tests.test_dag.T1->networkx.balanced_tree(2, 2, create_using=nx.DiGraph())
A:networkx.algorithms.tests.test_dag.T2->networkx.balanced_tree(2, 2, create_using=nx.DiGraph())
A:networkx.algorithms.tests.test_dag.v_structs->set(nx.compute_v_structures(G))
networkx.algorithms.tests.test_TestDAG
networkx.algorithms.tests.test_TestDAG._check_antichains(self,solution,result)
networkx.algorithms.tests.test_TestDAG.setup_class(cls)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_1(self)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_2(self)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_3(self)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_4(self)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_multigraph_1(self)
networkx.algorithms.tests.test_TestDAG.test_all_topological_sorts_multigraph_2(self)
networkx.algorithms.tests.test_TestDAG.test_ancestors(self)
networkx.algorithms.tests.test_TestDAG.test_antichains(self)
networkx.algorithms.tests.test_TestDAG.test_descendants(self)
networkx.algorithms.tests.test_TestDAG.test_is_directed_acyclic_graph(self)
networkx.algorithms.tests.test_TestDAG.test_lexicographical_topological_sort(self)
networkx.algorithms.tests.test_TestDAG.test_lexicographical_topological_sort2(self)
networkx.algorithms.tests.test_TestDAG.test_reflexive_transitive_closure(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort1(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort2(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort3(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort4(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort5(self)
networkx.algorithms.tests.test_TestDAG.test_topological_sort6(self)
networkx.algorithms.tests.test_TestDAG.test_transitive_closure(self)
networkx.algorithms.tests.test_TestDAG.test_transitive_closure_dag(self)
networkx.algorithms.tests.test_TestDAG.test_transitive_reduction(self)
networkx.algorithms.tests.test_TestDagLongestPath
networkx.algorithms.tests.test_TestDagLongestPath.test_empty(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_multigraph_weighted(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_multigraph_weighted_default_weight(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_undirected_not_implemented(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_unorderable_nodes(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_unweighted1(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_unweighted2(self)
networkx.algorithms.tests.test_TestDagLongestPath.test_weighted(self)
networkx.algorithms.tests.test_TestDagLongestPathLength
networkx.algorithms.tests.test_TestDagLongestPathLength.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_TestDagLongestPathLength.test_multigraph_weighted(self)
networkx.algorithms.tests.test_TestDagLongestPathLength.test_undirected_not_implemented(self)
networkx.algorithms.tests.test_TestDagLongestPathLength.test_unweighted(self)
networkx.algorithms.tests.test_TestDagLongestPathLength.test_weighted(self)
networkx.algorithms.tests.test_TestDagToBranching
networkx.algorithms.tests.test_TestDagToBranching.test_already_arborescence(self)
networkx.algorithms.tests.test_TestDagToBranching.test_already_branching(self)
networkx.algorithms.tests.test_TestDagToBranching.test_multidigraph(self)
networkx.algorithms.tests.test_TestDagToBranching.test_multigraph(self)
networkx.algorithms.tests.test_TestDagToBranching.test_multiple_roots(self)
networkx.algorithms.tests.test_TestDagToBranching.test_not_acyclic(self)
networkx.algorithms.tests.test_TestDagToBranching.test_single_root(self)
networkx.algorithms.tests.test_TestDagToBranching.test_undirected(self)
networkx.algorithms.tests.test__consume(iterator)
networkx.algorithms.tests.test_dag.TestDAG
networkx.algorithms.tests.test_dag.TestDAG._check_antichains(self,solution,result)
networkx.algorithms.tests.test_dag.TestDAG.setup_class(cls)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_3(self)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_4(self)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_all_topological_sorts_multigraph_2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_ancestors(self)
networkx.algorithms.tests.test_dag.TestDAG.test_antichains(self)
networkx.algorithms.tests.test_dag.TestDAG.test_descendants(self)
networkx.algorithms.tests.test_dag.TestDAG.test_is_directed_acyclic_graph(self)
networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort(self)
networkx.algorithms.tests.test_dag.TestDAG.test_lexicographical_topological_sort2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_reflexive_transitive_closure(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort6(self)
networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure(self)
networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure_dag(self)
networkx.algorithms.tests.test_dag.TestDAG.test_transitive_reduction(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_empty(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_multigraph_weighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_multigraph_weighted_default_weight(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_undirected_not_implemented(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unorderable_nodes(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted1(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_unweighted2(self)
networkx.algorithms.tests.test_dag.TestDagLongestPath.test_weighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPathLength
networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_multigraph_weighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_undirected_not_implemented(self)
networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_unweighted(self)
networkx.algorithms.tests.test_dag.TestDagLongestPathLength.test_weighted(self)
networkx.algorithms.tests.test_dag.TestDagToBranching
networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_arborescence(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_already_branching(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_multidigraph(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_multigraph(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_multiple_roots(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_not_acyclic(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_single_root(self)
networkx.algorithms.tests.test_dag.TestDagToBranching.test_undirected(self)
networkx.algorithms.tests.test_dag._consume(iterator)
networkx.algorithms.tests.test_dag.test_ancestors_descendants_undirected()
networkx.algorithms.tests.test_dag.test_compute_v_structures()
networkx.algorithms.tests.test_dag.test_compute_v_structures_raise()
networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_raise()
networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree()
networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop()
networkx.algorithms.tests.test_dag.test_topological_generations()
networkx.algorithms.tests.test_dag.test_topological_generations_cycle()
networkx.algorithms.tests.test_dag.test_topological_generations_empty()
networkx.algorithms.tests.test_test_ancestors_descendants_undirected()
networkx.algorithms.tests.test_test_compute_v_structures()
networkx.algorithms.tests.test_test_compute_v_structures_raise()
networkx.algorithms.tests.test_test_is_aperiodic_cycle()
networkx.algorithms.tests.test_test_is_aperiodic_cycle2()
networkx.algorithms.tests.test_test_is_aperiodic_cycle3()
networkx.algorithms.tests.test_test_is_aperiodic_cycle4()
networkx.algorithms.tests.test_test_is_aperiodic_disconnected()
networkx.algorithms.tests.test_test_is_aperiodic_disconnected2()
networkx.algorithms.tests.test_test_is_aperiodic_raise()
networkx.algorithms.tests.test_test_is_aperiodic_selfloop()
networkx.algorithms.tests.test_test_topological_generations()
networkx.algorithms.tests.test_test_topological_generations_cycle()
networkx.algorithms.tests.test_test_topological_generations_empty()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_richclub.py----------------------------------------
A:networkx.algorithms.tests.test_richclub.G->networkx.Graph()
A:networkx.algorithms.tests.test_richclub.rc->networkx.rich_club_coefficient(G, normalized=False)
A:networkx.algorithms.tests.test_richclub.rcNorm->networkx.richclub.rich_club_coefficient(G, Q=2)
A:networkx.algorithms.tests.test_richclub.T->networkx.balanced_tree(2, 10)
networkx.algorithms.tests.test_richclub.test_rich_club_exception2()
networkx.algorithms.tests.test_richclub.test_rich_club_selfloop()
networkx.algorithms.tests.test_richclub.test_richclub()
networkx.algorithms.tests.test_richclub.test_richclub2()
networkx.algorithms.tests.test_richclub.test_richclub3()
networkx.algorithms.tests.test_richclub.test_richclub4()
networkx.algorithms.tests.test_richclub.test_richclub_exception()
networkx.algorithms.tests.test_richclub.test_richclub_normalized()
networkx.algorithms.tests.test_richclub.test_richclub_seed()
networkx.algorithms.tests.test_test_rich_club_exception2()
networkx.algorithms.tests.test_test_rich_club_selfloop()
networkx.algorithms.tests.test_test_richclub()
networkx.algorithms.tests.test_test_richclub2()
networkx.algorithms.tests.test_test_richclub3()
networkx.algorithms.tests.test_test_richclub4()
networkx.algorithms.tests.test_test_richclub_exception()
networkx.algorithms.tests.test_test_richclub_normalized()
networkx.algorithms.tests.test_test_richclub_seed()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_summarization.py----------------------------------------
A:networkx.algorithms.tests.test_summarization.graph->networkx.Graph()
A:networkx.algorithms.tests.test_summarization.compressed_graph->networkx.Graph()
A:networkx.algorithms.tests.test_summarization.G->networkx.MultiDiGraph()
A:networkx.algorithms.tests.test_summarization.(compressed_graph, c_nodes)->networkx.dedensify(G, threshold=2)
A:networkx.algorithms.tests.test_summarization.all_neighbors->set(nx.all_neighbors(G, compressor_node))
A:networkx.algorithms.tests.test_summarization.out_neighbors->set(G.neighbors(compressor_node))
A:networkx.algorithms.tests.test_summarization.compressed_G->self.build_compressed_graph()
A:networkx.algorithms.tests.test_summarization.o_s->''.join(sorted(s))
A:networkx.algorithms.tests.test_summarization.o_t->''.join(sorted(t))
A:networkx.algorithms.tests.test_summarization.compressed_graph_exists->networkx.Graph().has_edge(s, t)
A:networkx.algorithms.tests.test_summarization.verified_compressed_exists->self.build_compressed_graph().has_edge(o_s, o_t)
A:networkx.algorithms.tests.test_summarization.original_edge_count->len(original_graph.edges())
A:networkx.algorithms.tests.test_summarization.(c_G, c_nodes)->networkx.dedensify(G, threshold=2, copy=True)
A:networkx.algorithms.tests.test_summarization.compressed_edge_count->len(c_G.edges())
A:networkx.algorithms.tests.test_summarization.original_graph->self.build_original_graph()
A:networkx.algorithms.tests.test_summarization.(compressed_G, c_nodes)->networkx.dedensify(G, threshold=2)
A:networkx.algorithms.tests.test_summarization.v_compressed_G->self.build_compressed_graph()
A:networkx.algorithms.tests.test_summarization.has_compressed_edge->c_G.has_edge(s, t)
A:networkx.algorithms.tests.test_summarization.verified_has_compressed_edge->self.build_compressed_graph().has_edge(o_s, o_t)
A:networkx.algorithms.tests.test_summarization.verified_original_edge_count->len(G.edges())
A:networkx.algorithms.tests.test_summarization.verified_compressed_G->self.build_compressed_graph()
A:networkx.algorithms.tests.test_summarization.verified_compressed_edge_count->len(verified_compressed_G.edges())
A:networkx.algorithms.tests.test_summarization.summary_graph->self.build_summary_graph()
A:networkx.algorithms.tests.test_summarization.generated_summary_graph->networkx.snap_aggregation(original_graph, self.node_attributes)
A:networkx.algorithms.tests.test_summarization.relabeled_summary_graph->self.deterministic_labels(generated_summary_graph)
A:networkx.algorithms.tests.test_summarization.node_labels->sorted(node_labels, key=lambda n: sorted(G.nodes[n]['group'])[0])
A:networkx.algorithms.tests.test_summarization.label_mapping->dict()
networkx.algorithms.tests.test_AbstractSNAP
networkx.algorithms.tests.test_AbstractSNAP.build_original_graph(self)
networkx.algorithms.tests.test_AbstractSNAP.build_summary_graph(self)
networkx.algorithms.tests.test_AbstractSNAP.deterministic_labels(self,G)
networkx.algorithms.tests.test_AbstractSNAP.test_summary_graph(self)
networkx.algorithms.tests.test_TestDirectedDedensification
networkx.algorithms.tests.test_TestDirectedDedensification.build_compressed_graph(self)
networkx.algorithms.tests.test_TestDirectedDedensification.build_original_graph(self)
networkx.algorithms.tests.test_TestDirectedDedensification.densify(G,compressor_nodes,copy=True)
networkx.algorithms.tests.test_TestDirectedDedensification.setup_method(self)
networkx.algorithms.tests.test_TestDirectedDedensification.test_dedensify_edge_count(self)
networkx.algorithms.tests.test_TestDirectedDedensification.test_dedensify_edges(self)
networkx.algorithms.tests.test_TestDirectedDedensification.test_densify_edge_count(self)
networkx.algorithms.tests.test_TestDirectedDedensification.test_densify_edges(self)
networkx.algorithms.tests.test_TestDirectedDedensification.test_empty(self)
networkx.algorithms.tests.test_TestSNAPDirected(AbstractSNAP)
networkx.algorithms.tests.test_TestSNAPDirected.build_original_graph(self)
networkx.algorithms.tests.test_TestSNAPDirected.build_summary_graph(self)
networkx.algorithms.tests.test_TestSNAPDirectedMulti(AbstractSNAP)
networkx.algorithms.tests.test_TestSNAPDirectedMulti.build_original_graph(self)
networkx.algorithms.tests.test_TestSNAPDirectedMulti.build_summary_graph(self)
networkx.algorithms.tests.test_TestSNAPNoEdgeTypes(AbstractSNAP)
networkx.algorithms.tests.test_TestSNAPNoEdgeTypes.build_original_graph(self)
networkx.algorithms.tests.test_TestSNAPNoEdgeTypes.build_summary_graph(self)
networkx.algorithms.tests.test_TestSNAPNoEdgeTypes.test_summary_graph(self)
networkx.algorithms.tests.test_TestSNAPUndirected(AbstractSNAP)
networkx.algorithms.tests.test_TestSNAPUndirected.build_original_graph(self)
networkx.algorithms.tests.test_TestSNAPUndirected.build_summary_graph(self)
networkx.algorithms.tests.test_TestSNAPUndirectedMulti(AbstractSNAP)
networkx.algorithms.tests.test_TestSNAPUndirectedMulti.build_original_graph(self)
networkx.algorithms.tests.test_TestSNAPUndirectedMulti.build_summary_graph(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification
networkx.algorithms.tests.test_TestUnDirectedDedensification.build_compressed_graph(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification.build_original_graph(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification.setup_method(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification.test_dedensify_edge_count(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification.test_dedensify_edges(self)
networkx.algorithms.tests.test_TestUnDirectedDedensification.test_empty(self)
networkx.algorithms.tests.test_summarization.AbstractSNAP
networkx.algorithms.tests.test_summarization.AbstractSNAP.build_original_graph(self)
networkx.algorithms.tests.test_summarization.AbstractSNAP.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.AbstractSNAP.deterministic_labels(self,G)
networkx.algorithms.tests.test_summarization.AbstractSNAP.test_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.build_compressed_graph(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.densify(G,compressor_nodes,copy=True)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.setup_method(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.test_dedensify_edge_count(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.test_dedensify_edges(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.test_densify_edge_count(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.test_densify_edges(self)
networkx.algorithms.tests.test_summarization.TestDirectedDedensification.test_empty(self)
networkx.algorithms.tests.test_summarization.TestSNAPDirected(AbstractSNAP)
networkx.algorithms.tests.test_summarization.TestSNAPDirected.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPDirected.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPDirectedMulti(AbstractSNAP)
networkx.algorithms.tests.test_summarization.TestSNAPDirectedMulti.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPDirectedMulti.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPNoEdgeTypes(AbstractSNAP)
networkx.algorithms.tests.test_summarization.TestSNAPNoEdgeTypes.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPNoEdgeTypes.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPNoEdgeTypes.test_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPUndirected(AbstractSNAP)
networkx.algorithms.tests.test_summarization.TestSNAPUndirected.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPUndirected.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPUndirectedMulti(AbstractSNAP)
networkx.algorithms.tests.test_summarization.TestSNAPUndirectedMulti.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestSNAPUndirectedMulti.build_summary_graph(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.build_compressed_graph(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.build_original_graph(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.setup_method(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.test_dedensify_edge_count(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.test_dedensify_edges(self)
networkx.algorithms.tests.test_summarization.TestUnDirectedDedensification.test_empty(self)
networkx.algorithms.tests.test_summarization.test_summarization_empty(graph_type)
networkx.algorithms.tests.test_test_summarization_empty(graph_type)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_graph_hashing.py----------------------------------------
A:networkx.algorithms.tests.test_graph_hashing.G1->networkx.erdos_renyi_graph(n, p * i, seed=500 + i)
A:networkx.algorithms.tests.test_graph_hashing.G2->networkx.relabel_nodes(G1, {u: -1 * u for u in G1.nodes()})
A:networkx.algorithms.tests.test_graph_hashing.h1->networkx.weisfeiler_lehman_graph_hash(G1)
A:networkx.algorithms.tests.test_graph_hashing.h2->networkx.weisfeiler_lehman_graph_hash(G2)
A:networkx.algorithms.tests.test_graph_hashing.h3->networkx.weisfeiler_lehman_graph_hash(G2, edge_attr='edge_attr1')
A:networkx.algorithms.tests.test_graph_hashing.h4->networkx.weisfeiler_lehman_graph_hash(G2, node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.h5->networkx.weisfeiler_lehman_graph_hash(G2, edge_attr='edge_attr1', node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.h6->networkx.weisfeiler_lehman_graph_hash(G2, iterations=10)
A:networkx.algorithms.tests.test_graph_hashing.G_directed->networkx.gn_graph(10 + r, seed=100 + i)
A:networkx.algorithms.tests.test_graph_hashing.G_undirected->networkx.to_undirected(G_directed)
A:networkx.algorithms.tests.test_graph_hashing.h_directed->networkx.weisfeiler_lehman_graph_hash(G_directed)
A:networkx.algorithms.tests.test_graph_hashing.h_undirected->networkx.weisfeiler_lehman_graph_hash(G_undirected)
A:networkx.algorithms.tests.test_graph_hashing.G->networkx.erdos_renyi_graph(n, p * i, seed=1000 + i)
A:networkx.algorithms.tests.test_graph_hashing.G_reversed->networkx.erdos_renyi_graph(n, p * i, seed=1000 + i).reverse()
A:networkx.algorithms.tests.test_graph_hashing.h->networkx.weisfeiler_lehman_subgraph_hashes(G, node_attr='label')
A:networkx.algorithms.tests.test_graph_hashing.h_reversed->networkx.weisfeiler_lehman_subgraph_hashes(G_reversed, node_attr='label')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash->networkx.weisfeiler_lehman_graph_hash(G1)
A:networkx.algorithms.tests.test_graph_hashing.g2_hash->networkx.weisfeiler_lehman_graph_hash(G2)
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_with_edge_attr1->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr='edge_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_with_edge_attr2->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr='edge_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_no_edge_attr->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr=None)
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_with_edge_attr1->networkx.weisfeiler_lehman_subgraph_hashes(G2, edge_attr='edge_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_with_edge_attr2->networkx.weisfeiler_lehman_subgraph_hashes(G2, edge_attr='edge_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_with_node_attr1->networkx.weisfeiler_lehman_subgraph_hashes(G1, node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_with_node_attr2->networkx.weisfeiler_lehman_subgraph_hashes(G1, node_attr='node_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_no_node_attr->networkx.weisfeiler_lehman_subgraph_hashes(G1, node_attr=None)
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_with_node_attr1->networkx.weisfeiler_lehman_subgraph_hashes(G2, node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_with_node_attr2->networkx.weisfeiler_lehman_subgraph_hashes(G2, node_attr='node_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_edge1_node1->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr='edge_attr1', node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_edge2_node2->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr='edge_attr2', node_attr='node_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_edge1_node2->networkx.weisfeiler_lehman_subgraph_hashes(G1, edge_attr='edge_attr1', node_attr='node_attr2')
A:networkx.algorithms.tests.test_graph_hashing.g1_hash_no_attr->networkx.weisfeiler_lehman_subgraph_hashes(G1)
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_edge1_node1->networkx.weisfeiler_lehman_subgraph_hashes(G2, edge_attr='edge_attr1', node_attr='node_attr1')
A:networkx.algorithms.tests.test_graph_hashing.g2_hash_edge2_node2->networkx.weisfeiler_lehman_subgraph_hashes(G2, edge_attr='edge_attr2', node_attr='node_attr2')
A:networkx.algorithms.tests.test_graph_hashing.h16->networkx.weisfeiler_lehman_graph_hash(G)
A:networkx.algorithms.tests.test_graph_hashing.h32->networkx.weisfeiler_lehman_graph_hash(G, digest_size=32)
A:networkx.algorithms.tests.test_graph_hashing.subgraph_hashes1->networkx.weisfeiler_lehman_subgraph_hashes(G)
A:networkx.algorithms.tests.test_graph_hashing.subgraph_hashes2->networkx.weisfeiler_lehman_subgraph_hashes(G, edge_attr='edge_attr')
A:networkx.algorithms.tests.test_graph_hashing.subgraph_hashes3->networkx.weisfeiler_lehman_subgraph_hashes(G, node_attr='edge_attr')
A:networkx.algorithms.tests.test_graph_hashing.subgraph_hashes4->networkx.weisfeiler_lehman_subgraph_hashes(G, iterations=2)
A:networkx.algorithms.tests.test_graph_hashing.subgraph_hashes5->networkx.weisfeiler_lehman_subgraph_hashes(G, digest_size=64)
A:networkx.algorithms.tests.test_graph_hashing.directed_subgraph_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G_directed)
A:networkx.algorithms.tests.test_graph_hashing.undirected_subgraph_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G_undirected)
A:networkx.algorithms.tests.test_graph_hashing.g1_subgraph_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G1)
A:networkx.algorithms.tests.test_graph_hashing.g2_subgraph_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G2)
A:networkx.algorithms.tests.test_graph_hashing.depth3->networkx.weisfeiler_lehman_subgraph_hashes(G, edge_attr='edge_attr1', node_attr='node_attr1', iterations=3)
A:networkx.algorithms.tests.test_graph_hashing.depth4->networkx.weisfeiler_lehman_subgraph_hashes(G, edge_attr='edge_attr1', node_attr='node_attr1', iterations=4)
A:networkx.algorithms.tests.test_graph_hashing.depth5->networkx.weisfeiler_lehman_subgraph_hashes(G, edge_attr='edge_attr1', node_attr='node_attr1', iterations=5)
A:networkx.algorithms.tests.test_graph_hashing.digest_size16_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G)
A:networkx.algorithms.tests.test_graph_hashing.digest_size32_hashes->networkx.weisfeiler_lehman_subgraph_hashes(G, digest_size=32)
networkx.algorithms.tests.test_graph_hashing.hexdigest_sizes_correct(a,digest_size)
networkx.algorithms.tests.test_graph_hashing.is_subiteration(a,b)
networkx.algorithms.tests.test_graph_hashing.test_digest_size()
networkx.algorithms.tests.test_graph_hashing.test_digest_size_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_directed()
networkx.algorithms.tests.test_graph_hashing.test_directed_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_empty_graph_hash()
networkx.algorithms.tests.test_graph_hashing.test_empty_graph_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_edge_attr()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_edge_attr_and_node_attr()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_edge_attr_and_node_attr_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_edge_attr_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_node_attr()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_node_attr_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_isomorphic_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_iteration_depth()
networkx.algorithms.tests.test_graph_hashing.test_iteration_depth_edge_attr()
networkx.algorithms.tests.test_graph_hashing.test_iteration_depth_node_attr()
networkx.algorithms.tests.test_graph_hashing.test_iteration_depth_node_edge_attr()
networkx.algorithms.tests.test_graph_hashing.test_missing_edge_attr()
networkx.algorithms.tests.test_graph_hashing.test_missing_edge_attr_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_missing_node_attr()
networkx.algorithms.tests.test_graph_hashing.test_missing_node_attr_subgraph_hash()
networkx.algorithms.tests.test_graph_hashing.test_reversed()
networkx.algorithms.tests.test_graph_hashing.test_reversed_subgraph_hash()
networkx.algorithms.tests.test_hexdigest_sizes_correct(a,digest_size)
networkx.algorithms.tests.test_is_subiteration(a,b)
networkx.algorithms.tests.test_test_digest_size()
networkx.algorithms.tests.test_test_digest_size_subgraph_hash()
networkx.algorithms.tests.test_test_directed()
networkx.algorithms.tests.test_test_directed_subgraph_hash()
networkx.algorithms.tests.test_test_empty_graph_hash()
networkx.algorithms.tests.test_test_empty_graph_subgraph_hash()
networkx.algorithms.tests.test_test_isomorphic()
networkx.algorithms.tests.test_test_isomorphic_edge_attr()
networkx.algorithms.tests.test_test_isomorphic_edge_attr_and_node_attr()
networkx.algorithms.tests.test_test_isomorphic_edge_attr_and_node_attr_subgraph_hash()
networkx.algorithms.tests.test_test_isomorphic_edge_attr_subgraph_hash()
networkx.algorithms.tests.test_test_isomorphic_node_attr()
networkx.algorithms.tests.test_test_isomorphic_node_attr_subgraph_hash()
networkx.algorithms.tests.test_test_isomorphic_subgraph_hash()
networkx.algorithms.tests.test_test_iteration_depth()
networkx.algorithms.tests.test_test_iteration_depth_edge_attr()
networkx.algorithms.tests.test_test_iteration_depth_node_attr()
networkx.algorithms.tests.test_test_iteration_depth_node_edge_attr()
networkx.algorithms.tests.test_test_missing_edge_attr()
networkx.algorithms.tests.test_test_missing_edge_attr_subgraph_hash()
networkx.algorithms.tests.test_test_missing_node_attr()
networkx.algorithms.tests.test_test_missing_node_attr_subgraph_hash()
networkx.algorithms.tests.test_test_reversed()
networkx.algorithms.tests.test_test_reversed_subgraph_hash()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_node_classification.py----------------------------------------
A:networkx.algorithms.tests.test_node_classification.G->networkx.karate_club_graph()
A:networkx.algorithms.tests.test_node_classification.predicted->networkx.algorithms.node_classification.local_and_global_consistency(G, alpha=0, label_name=label_name)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_digraph(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_labeled_nodes_are_not_changed(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_no_edges(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_no_labels(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_no_nodes(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_nodes_all_labeled(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_one_labeled_node(self)
networkx.algorithms.tests.test_node_classification.TestHarmonicFunction.test_path_graph(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_digraph(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_no_edges(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_no_labels(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_no_nodes(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_nodes_all_labeled(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_one_labeled_node(self)
networkx.algorithms.tests.test_node_classification.TestLocalAndGlobalConsistency.test_path_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_voronoi.py----------------------------------------
A:networkx.algorithms.tests.test_voronoi.G->networkx.MultiDiGraph()
A:networkx.algorithms.tests.test_voronoi.cells->networkx.voronoi_cells(G, {0, 3})
A:networkx.algorithms.tests.test_voronoi.H->networkx.DiGraph(G)
A:networkx.algorithms.tests.test_voronoi.G_cells->networkx.voronoi_cells(G, {0, 3})
A:networkx.algorithms.tests.test_voronoi.H_cells->networkx.voronoi_cells(H, {0, 3})
A:networkx.algorithms.tests.test_voronoi.edges->list(pairwise(range(6), cyclic=True))
networkx.algorithms.tests.test_TestVoronoiCells
networkx.algorithms.tests.test_TestVoronoiCells.test_directed_inward(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_directed_unweighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_directed_weighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_isolates(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_multidigraph_unweighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_multidigraph_weighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_multigraph_weighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_undirected_unweighted(self)
networkx.algorithms.tests.test_TestVoronoiCells.test_undirected_weighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_inward(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_unweighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_directed_weighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_isolates(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_unweighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multidigraph_weighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_unweighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_multigraph_weighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_unweighted(self)
networkx.algorithms.tests.test_voronoi.TestVoronoiCells.test_undirected_weighted(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_link_prediction.py----------------------------------------
A:networkx.algorithms.tests.test_link_prediction.result->predict_func(G, ebunch, **kwargs)
A:networkx.algorithms.tests.test_link_prediction.cls.func->staticmethod(nx.within_inter_cluster)
A:networkx.algorithms.tests.test_link_prediction.cls.test->partial(_test_func, predict_func=cls.func, delta=cls.delta, community='community')
A:networkx.algorithms.tests.test_link_prediction.G->networkx.Graph()
networkx.algorithms.tests.test_TestAdamicAdarIndex
networkx.algorithms.tests.test_TestAdamicAdarIndex.setup_class(cls)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_K5(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_P3(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_S4(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestAdamicAdarIndex.test_notimplemented(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.setup_class(cls)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestCNSoundarajanHopcroft.test_notimplemented(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality
networkx.algorithms.tests.test_TestCommonNeighborCentrality.setup_class(cls)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_K5(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_P3(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_S4(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_equal_nodes(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestCommonNeighborCentrality.test_notimplemented(self,graph_type)
networkx.algorithms.tests.test_TestJaccardCoefficient
networkx.algorithms.tests.test_TestJaccardCoefficient.setup_class(cls)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_K5(self)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_P4(self)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_isolated_nodes(self)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestJaccardCoefficient.test_notimplemented(self)
networkx.algorithms.tests.test_TestPreferentialAttachment
networkx.algorithms.tests.test_TestPreferentialAttachment.setup_class(cls)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_K5(self)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_P3(self)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_S4(self)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_notimplemented(self)
networkx.algorithms.tests.test_TestPreferentialAttachment.test_zero_degrees(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.setup_class(cls)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestRAIndexSoundarajanHopcroft.test_notimplemented(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex
networkx.algorithms.tests.test_TestResourceAllocationIndex.setup_class(cls)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_K5(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_P3(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_S4(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestResourceAllocationIndex.test_notimplemented(self)
networkx.algorithms.tests.test_TestWithinInterCluster
networkx.algorithms.tests.test_TestWithinInterCluster.setup_class(cls)
networkx.algorithms.tests.test_TestWithinInterCluster.test_K5(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_P3(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_S4(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_equal_nodes(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_invalid_delta(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_no_common_neighbor(self)
networkx.algorithms.tests.test_TestWithinInterCluster.test_notimplemented(self)
networkx.algorithms.tests.test__test_func(G,ebunch,expected,predict_func,**kwargs)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestCommonNeighborCentrality.test_notimplemented(self,graph_type)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_P4(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_isolated_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_zero_degrees(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.setup_class(cls)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_invalid_delta(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_inter_cluster_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_notimplemented(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction._test_func(G,ebunch,expected,predict_func,**kwargs)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_reciprocity.py----------------------------------------
A:networkx.algorithms.tests.test_reciprocity.DG->networkx.DiGraph([(1, 2)])
A:networkx.algorithms.tests.test_reciprocity.reciprocity->networkx.reciprocity(DG, 2)
networkx.algorithms.tests.test_TestReciprocity
networkx.algorithms.tests.test_TestReciprocity.test_overall_reciprocity_empty_graph(self)
networkx.algorithms.tests.test_TestReciprocity.test_reciprocity_digraph(self)
networkx.algorithms.tests.test_TestReciprocity.test_reciprocity_graph_isolated_nodes(self)
networkx.algorithms.tests.test_TestReciprocity.test_reciprocity_graph_node(self)
networkx.algorithms.tests.test_TestReciprocity.test_reciprocity_graph_nodes(self)
networkx.algorithms.tests.test_reciprocity.TestReciprocity
networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_overall_reciprocity_empty_graph(self)
networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_digraph(self)
networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_isolated_nodes(self)
networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_node(self)
networkx.algorithms.tests.test_reciprocity.TestReciprocity.test_reciprocity_graph_nodes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_lowest_common_ancestors.py----------------------------------------
A:networkx.algorithms.tests.test_lowest_common_ancestors.cls.DG->networkx.DiGraph()
A:networkx.algorithms.tests.test_lowest_common_ancestors.cls.ans->dict(tree_all_pairs_lca(cls.DG, 0))
A:networkx.algorithms.tests.test_lowest_common_ancestors.ans->list(all_pairs_lca(G))
A:networkx.algorithms.tests.test_lowest_common_ancestors.all_pairs->product(self.DG.nodes(), self.DG.nodes())
A:networkx.algorithms.tests.test_lowest_common_ancestors.empty_digraph->tree_all_pairs_lca(nx.DiGraph())
A:networkx.algorithms.tests.test_lowest_common_ancestors.bad_pairs_digraph->tree_all_pairs_lca(self.DG, pairs=[(-1, -2)])
A:networkx.algorithms.tests.test_lowest_common_ancestors.G->networkx.DiGraph()
A:networkx.algorithms.tests.test_lowest_common_ancestors.pairs->iter([(0, 1), (0, 1), (1, 0)])
A:networkx.algorithms.tests.test_lowest_common_ancestors.some_pairs->dict(tree_all_pairs_lca(self.DG, 0, pairs))
A:networkx.algorithms.tests.test_lowest_common_ancestors.lca->tree_all_pairs_lca(self.DG, None, [(-1, -1)])
A:networkx.algorithms.tests.test_lowest_common_ancestors.cls.root_distance->networkx.shortest_path_length(cls.DG, source=0)
A:networkx.algorithms.tests.test_lowest_common_ancestors.root_distance->networkx.shortest_path_length(G, source=roots[0])
A:networkx.algorithms.tests.test_lowest_common_ancestors.gold->self.gold.copy()
A:networkx.algorithms.tests.test_lowest_common_ancestors.testing->dict(all_pairs_lca(G))
A:networkx.algorithms.tests.test_lowest_common_ancestors.gen->all_pairs_lca(G, [(-1, -1), (-1, 0)])
A:networkx.algorithms.tests.test_lowest_common_ancestors.sentinel->object()
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.assert_lca_dicts_same(self,d1,d2,G=None)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.setup_class(cls)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_all_pairs_given(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_bug_gh4942(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_default_kwarg(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_generator(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_gold_example(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_identity(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_input_graph_with_two_roots(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_issue_4574(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_non_dags(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_nonempty_graph_without_lca(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_nonexisting_pairs_exception(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_null_graph(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_one_pair_gh4942(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestDAGLCA.test_all_pairs_lca_pairs_without_lca(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.assert_has_same_pairs(d1,d2)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.setup_class(cls)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_gold_example(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_default_root(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_disconnected_nodes(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_error_if_input_not_tree(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_generator(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_invalid_input(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_nonexisting_pairs_exception(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_not_implemented(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_return_subset(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_routine_bails_on_DAGs(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_subtrees(self)
networkx.algorithms.tests.test_lowest_common_ancestors.TestTreeLCA.test_tree_all_pairs_lca_trees_without_LCAs(self)
networkx.algorithms.tests.test_lowest_common_ancestors.get_pair(dictionary,n1,n2)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_mis.py----------------------------------------
A:networkx.algorithms.tests.test_mis.G->networkx.erdos_renyi_graph(i * 10 + 1, random.random())
A:networkx.algorithms.tests.test_mis.indep->networkx.maximal_independent_set(G, [4, 5, 9, 10])
A:networkx.algorithms.tests.test_mis.IS->networkx.maximal_independent_set(G)
A:networkx.algorithms.tests.test_mis.neighbors_of_MIS->set.union(*(set(G.neighbors(v)) for v in IS))
networkx.algorithms.tests.test_mis.test_K5(graph)
networkx.algorithms.tests.test_mis.test_bipartite()
networkx.algorithms.tests.test_mis.test_exceptions()
networkx.algorithms.tests.test_mis.test_florentine_family()
networkx.algorithms.tests.test_mis.test_random_graphs()
networkx.algorithms.tests.test_mis.test_random_seed()
networkx.algorithms.tests.test_test_K5(graph)
networkx.algorithms.tests.test_test_exceptions()
networkx.algorithms.tests.test_test_florentine_family()
networkx.algorithms.tests.test_test_random_graphs()
networkx.algorithms.tests.test_test_random_seed()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_non_randomness.py----------------------------------------
A:networkx.algorithms.tests.test_non_randomness.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_non_randomness.G->networkx.Graph()
networkx.algorithms.tests.test_non_randomness.test_non_connected()
networkx.algorithms.tests.test_non_randomness.test_non_randomness(k,weight,expected)
networkx.algorithms.tests.test_non_randomness.test_self_loops()
networkx.algorithms.tests.test_test_non_connected()
networkx.algorithms.tests.test_test_non_randomness(k,weight,expected)
networkx.algorithms.tests.test_test_self_loops()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_moral.py----------------------------------------
A:networkx.algorithms.tests.test_moral.graph->networkx.DiGraph()
A:networkx.algorithms.tests.test_moral.H->moral_graph(graph)
networkx.algorithms.tests.test_moral.test_get_moral_graph()
networkx.algorithms.tests.test_test_get_moral_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_distance_measures.py----------------------------------------
A:networkx.algorithms.tests.test_distance_measures.G->networkx.MultiGraph()
A:networkx.algorithms.tests.test_distance_measures.e->networkx.eccentricity(self.G, v=[1, 2], weight=self.weight_fn)
A:networkx.algorithms.tests.test_distance_measures.sp->dict(nx.shortest_path_length(K_5))
A:networkx.algorithms.tests.test_distance_measures.DG->networkx.DiGraph([(1, 2), (1, 3)])
A:networkx.algorithms.tests.test_distance_measures.periphery->set(nx.periphery(self.G, weight='weight'))
A:networkx.algorithms.tests.test_distance_measures.center->set(nx.center(self.G, weight='weight'))
A:networkx.algorithms.tests.test_distance_measures.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_distance_measures.rd->networkx.resistance_distance(G, 1, 3, 'weight', True)
A:networkx.algorithms.tests.test_distance_measures.b->self.barycenter_as_subgraph(g, weight='weight', attr='barycentricity2')
A:networkx.algorithms.tests.test_distance_measures.K_5->networkx.complete_graph(5)
A:networkx.algorithms.tests.test_distance_measures.prng->Random(3735928559)
A:networkx.algorithms.tests.test_distance_measures.RT->networkx.random_tree(prng.randint(1, 75), prng)
A:networkx.algorithms.tests.test_distance_measures.g->networkx.Graph({'a': ['b'], 'b': ['a', 'x'], 'x': ['b', 'y'], 'y': ['x', 'z'], 'z': ['y', 0, 1, 2, 3, 4], 0: ['z'], 1: ['z'], 2: ['z'], 3: ['z'], 4: ['z']})
networkx.algorithms.tests.test_TestBarycenter
networkx.algorithms.tests.test_TestBarycenter.barycenter_as_subgraph(self,g,**kwargs)
networkx.algorithms.tests.test_TestBarycenter.test_must_be_connected(self)
networkx.algorithms.tests.test_TestBarycenter.test_sp_kwarg(self)
networkx.algorithms.tests.test_TestDistance
networkx.algorithms.tests.test_TestDistance.setup_method(self)
networkx.algorithms.tests.test_TestDistance.test_bound_center(self)
networkx.algorithms.tests.test_TestDistance.test_bound_diameter(self)
networkx.algorithms.tests.test_TestDistance.test_bound_periphery(self)
networkx.algorithms.tests.test_TestDistance.test_bound_radius(self)
networkx.algorithms.tests.test_TestDistance.test_center(self)
networkx.algorithms.tests.test_TestDistance.test_diameter(self)
networkx.algorithms.tests.test_TestDistance.test_eccentricity(self)
networkx.algorithms.tests.test_TestDistance.test_eccentricity_directed_weakly_connected(self)
networkx.algorithms.tests.test_TestDistance.test_eccentricity_infinite(self)
networkx.algorithms.tests.test_TestDistance.test_eccentricity_undirected_not_connected(self)
networkx.algorithms.tests.test_TestDistance.test_periphery(self)
networkx.algorithms.tests.test_TestDistance.test_radius(self)
networkx.algorithms.tests.test_TestDistance.test_radius_exception(self)
networkx.algorithms.tests.test_TestResistanceDistance
networkx.algorithms.tests.test_TestResistanceDistance.setup_class(cls)
networkx.algorithms.tests.test_TestResistanceDistance.setup_method(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_multigraph(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_div0(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_neg_weight(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_no_weight(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_nodeA_not_in_graph(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_nodeB_not_in_graph(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_noinv(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_not_connected(self)
networkx.algorithms.tests.test_TestResistanceDistance.test_resistance_distance_same_node(self)
networkx.algorithms.tests.test_TestWeightedDistance
networkx.algorithms.tests.test_TestWeightedDistance.setup_method(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_center_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_center_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_center_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_diameter_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_diameter_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_diameter_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_periphery_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_periphery_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_periphery_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_radius_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_radius_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_bound_radius_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_center_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_center_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_center_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_diameter_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_diameter_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_diameter_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_eccentricity_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_eccentricity_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_eccentricity_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_periphery_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_periphery_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_periphery_weight_fn(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_radius_weight_None(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_radius_weight_attr(self)
networkx.algorithms.tests.test_TestWeightedDistance.test_radius_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestBarycenter
networkx.algorithms.tests.test_distance_measures.TestBarycenter.barycenter_as_subgraph(self,g,**kwargs)
networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_must_be_connected(self)
networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_sp_kwarg(self)
networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_this_one_specific_tree(self)
networkx.algorithms.tests.test_distance_measures.TestBarycenter.test_trees(self)
networkx.algorithms.tests.test_distance_measures.TestDistance
networkx.algorithms.tests.test_distance_measures.TestDistance.setup_method(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_center(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_diameter(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_periphery(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_bound_radius(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_center(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_directed_weakly_connected(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_infinite(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_undirected_not_connected(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_class(cls)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.setup_method(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_multigraph(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_div0(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_neg_weight(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_no_weight(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeA_not_in_graph(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_nodeB_not_in_graph(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_noinv(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_not_connected(self)
networkx.algorithms.tests.test_distance_measures.TestResistanceDistance.test_resistance_distance_same_node(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.setup_method(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_center_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_center_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_center_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_diameter_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_diameter_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_diameter_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_periphery_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_periphery_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_periphery_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_radius_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_radius_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_bound_radius_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_center_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_center_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_center_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_diameter_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_diameter_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_diameter_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_eccentricity_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_eccentricity_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_eccentricity_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_periphery_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_periphery_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_periphery_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_radius_weight_None(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_radius_weight_attr(self)
networkx.algorithms.tests.test_distance_measures.TestWeightedDistance.test_radius_weight_fn(self)
networkx.algorithms.tests.test_distance_measures.test__extrema_bounding_invalid_compute_kwarg()
networkx.algorithms.tests.test_test__extrema_bounding_invalid_compute_kwarg()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_triads.py----------------------------------------
A:networkx.algorithms.tests.test_triads.G->networkx.binomial_graph(N, 0.3, directed=True, seed=42)
A:networkx.algorithms.tests.test_triads.actual->networkx.triads_by_type(G)
A:networkx.algorithms.tests.test_triads.nodes->sample(sorted(G.nodes()), 3)
A:networkx.algorithms.tests.test_triads.G2->networkx.binomial_graph(N, 0.3, directed=True, seed=42).subgraph(nodes)
A:networkx.algorithms.tests.test_triads.all_triads->networkx.all_triads(G)
A:networkx.algorithms.tests.test_triads.expected->defaultdict(list)
A:networkx.algorithms.tests.test_triads.name->networkx.triad_type(triad)
A:networkx.algorithms.tests.test_triads.triad_census->networkx.triadic_census(G)
A:networkx.algorithms.tests.test_triads.tc->networkx.triadic_census(GG)
A:networkx.algorithms.tests.test_triads.GG->networkx.path_graph('abcde', create_using=nx.DiGraph)
A:networkx.algorithms.tests.test_triads.tbt->networkx.triads_by_type(G)
A:networkx.algorithms.tests.test_triads.a_triad_census->networkx.triadic_census(G, nodelist=['a'])
A:networkx.algorithms.tests.test_triads.b_triad_census->networkx.triadic_census(G, nodelist=['b'])
A:networkx.algorithms.tests.test_triads.c_triad_census->networkx.triadic_census(G, nodelist=['c'])
A:networkx.algorithms.tests.test_triads.d_triad_census->networkx.triadic_census(G, nodelist=['d'])
A:networkx.algorithms.tests.test_triads.node_triad_census->networkx.triadic_census(G, nodelist=[node])
A:networkx.algorithms.tests.test_triads.tc1->networkx.triadic_census(G, nodelist=ns)
A:networkx.algorithms.tests.test_triads.ns->set(ns)
networkx.algorithms.tests.test_test_all_triads()
networkx.algorithms.tests.test_test_all_triplets()
networkx.algorithms.tests.test_test_is_triad()
networkx.algorithms.tests.test_test_random_triad()
networkx.algorithms.tests.test_test_triad_type()
networkx.algorithms.tests.test_test_triadic_census()
networkx.algorithms.tests.test_test_triadic_census_correct_nodelist_values()
networkx.algorithms.tests.test_test_triadic_census_four_path()
networkx.algorithms.tests.test_test_triadic_census_four_path_nodelist()
networkx.algorithms.tests.test_test_triadic_census_nodelist()
networkx.algorithms.tests.test_test_triadic_census_selfloops()
networkx.algorithms.tests.test_test_triadic_census_short_path_nodelist()
networkx.algorithms.tests.test_test_triadic_census_tiny_graphs()
networkx.algorithms.tests.test_test_triads_by_type()
networkx.algorithms.tests.test_test_triandic_census_on_random_graph(N)
networkx.algorithms.tests.test_triads.test_all_triads()
networkx.algorithms.tests.test_triads.test_all_triplets()
networkx.algorithms.tests.test_triads.test_is_triad()
networkx.algorithms.tests.test_triads.test_random_triad()
networkx.algorithms.tests.test_triads.test_triad_type()
networkx.algorithms.tests.test_triads.test_triadic_census()
networkx.algorithms.tests.test_triads.test_triadic_census_correct_nodelist_values()
networkx.algorithms.tests.test_triads.test_triadic_census_four_path()
networkx.algorithms.tests.test_triads.test_triadic_census_four_path_nodelist()
networkx.algorithms.tests.test_triads.test_triadic_census_nodelist()
networkx.algorithms.tests.test_triads.test_triadic_census_selfloops()
networkx.algorithms.tests.test_triads.test_triadic_census_short_path_nodelist()
networkx.algorithms.tests.test_triads.test_triadic_census_tiny_graphs()
networkx.algorithms.tests.test_triads.test_triads_by_type()
networkx.algorithms.tests.test_triads.test_triandic_census_on_random_graph(N)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_dominance.py----------------------------------------
A:networkx.algorithms.tests.test_dominance.G->networkx.DiGraph(edges)
A:networkx.algorithms.tests.test_dominance.result->networkx.dominance_frontiers(G.reverse(copy=False), 7)
A:networkx.algorithms.tests.test_dominance.g->networkx.DiGraph()
A:networkx.algorithms.tests.test_dominance.df->networkx.dominance_frontiers(g, 'entry')
networkx.algorithms.tests.test_TestDominanceFrontiers
networkx.algorithms.tests.test_TestDominanceFrontiers.test_boost_example(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_cycle(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_discard_issue(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_domrel_png(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_exceptions(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_irreducible1(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_irreducible2(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_loop(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_loops_larger(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_missing_immediate_doms(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_path(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_singleton(self)
networkx.algorithms.tests.test_TestDominanceFrontiers.test_unreachable(self)
networkx.algorithms.tests.test_TestImmediateDominators
networkx.algorithms.tests.test_TestImmediateDominators.test_boost_example(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_cycle(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_domrel_png(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_exceptions(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_irreducible1(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_irreducible2(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_path(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_singleton(self)
networkx.algorithms.tests.test_TestImmediateDominators.test_unreachable(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_boost_example(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_cycle(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_discard_issue(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_domrel_png(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_exceptions(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible1(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible2(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loop(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_loops_larger(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_missing_immediate_doms(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_path(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_singleton(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_unreachable(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_boost_example(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_cycle(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_domrel_png(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_exceptions(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible1(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible2(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_path(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_singleton(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_unreachable(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_core.py----------------------------------------
A:networkx.algorithms.tests.test_core.t1->networkx.convert_node_labels_to_integers(nx.tetrahedral_graph(), 1)
A:networkx.algorithms.tests.test_core.t2->networkx.convert_node_labels_to_integers(t1, 5)
A:networkx.algorithms.tests.test_core.G->networkx.DiGraph()
A:networkx.algorithms.tests.test_core.H->networkx.havel_hakimi_graph(degseq)
A:networkx.algorithms.tests.test_core.cls.H->networkx.relabel_nodes(H, mapping)
A:networkx.algorithms.tests.test_core.core->networkx.core_number(self.H)
A:networkx.algorithms.tests.test_core.main_core_subgraph->networkx.k_core(self.H)
A:networkx.algorithms.tests.test_core.k_core_subgraph->networkx.k_core(self.H, k=2)
A:networkx.algorithms.tests.test_core.main_crust_subgraph->networkx.k_crust(self.H)
A:networkx.algorithms.tests.test_core.k_crust_subgraph->networkx.k_crust(self.H, k=0)
A:networkx.algorithms.tests.test_core.main_shell_subgraph->networkx.k_shell(self.H)
A:networkx.algorithms.tests.test_core.k_shell_subgraph->networkx.k_shell(self.H, k=0)
A:networkx.algorithms.tests.test_core.k_corona_subgraph->networkx.k_corona(self.H, k=0)
A:networkx.algorithms.tests.test_core.k_truss_subgraph->networkx.k_truss(self.G, 5)
A:networkx.algorithms.tests.test_core.layers->networkx.onion_layers(self.G)
networkx.algorithms.tests.test_TestCore
networkx.algorithms.tests.test_TestCore.setup_class(cls)
networkx.algorithms.tests.test_TestCore.test_core_number(self)
networkx.algorithms.tests.test_TestCore.test_core_number2(self)
networkx.algorithms.tests.test_TestCore.test_directed_core_number(self)
networkx.algorithms.tests.test_TestCore.test_k_core(self)
networkx.algorithms.tests.test_TestCore.test_k_corona(self)
networkx.algorithms.tests.test_TestCore.test_k_crust(self)
networkx.algorithms.tests.test_TestCore.test_k_shell(self)
networkx.algorithms.tests.test_TestCore.test_k_truss(self)
networkx.algorithms.tests.test_TestCore.test_main_core(self)
networkx.algorithms.tests.test_TestCore.test_main_crust(self)
networkx.algorithms.tests.test_TestCore.test_main_shell(self)
networkx.algorithms.tests.test_TestCore.test_onion_layers(self)
networkx.algorithms.tests.test_TestCore.test_trivial(self)
networkx.algorithms.tests.test_core.TestCore
networkx.algorithms.tests.test_core.TestCore.setup_class(cls)
networkx.algorithms.tests.test_core.TestCore.test_core_number(self)
networkx.algorithms.tests.test_core.TestCore.test_core_number2(self)
networkx.algorithms.tests.test_core.TestCore.test_directed_core_number(self)
networkx.algorithms.tests.test_core.TestCore.test_k_core(self)
networkx.algorithms.tests.test_core.TestCore.test_k_corona(self)
networkx.algorithms.tests.test_core.TestCore.test_k_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_k_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_k_truss(self)
networkx.algorithms.tests.test_core.TestCore.test_main_core(self)
networkx.algorithms.tests.test_core.TestCore.test_main_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_main_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_onion_layers(self)
networkx.algorithms.tests.test_core.TestCore.test_trivial(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_planarity.py----------------------------------------
A:networkx.algorithms.tests.test_planarity.(is_planar_lr, result)->networkx.check_planarity(G, True)
A:networkx.algorithms.tests.test_planarity.(is_planar_lr_rec, result_rec)->check_planarity_recursive(G, True)
A:networkx.algorithms.tests.test_planarity.G->networkx.Graph()
A:networkx.algorithms.tests.test_planarity.g_edges->set()
A:networkx.algorithms.tests.test_planarity.sub_graph->networkx.Graph(sub_graph)
A:networkx.algorithms.tests.test_planarity.contract->list(sub_graph)
A:networkx.algorithms.tests.test_planarity.contract_node->list(sub_graph).pop()
A:networkx.algorithms.tests.test_planarity.neighbors->iter(sub_graph[contract_node])
A:networkx.algorithms.tests.test_planarity.u->next(neighbors)
A:networkx.algorithms.tests.test_planarity.v->next(neighbors)
A:networkx.algorithms.tests.test_planarity.embedding->networkx.PlanarEmbedding()
A:networkx.algorithms.tests.test_planarity.data->networkx.PlanarEmbedding().get_data()
A:networkx.algorithms.tests.test_planarity.face->networkx.PlanarEmbedding().traverse_face(1, 2)
networkx.algorithms.tests.test_TestLRPlanarity
networkx.algorithms.tests.test_TestLRPlanarity.check_graph(G,is_planar=None)
networkx.algorithms.tests.test_TestLRPlanarity.test_comp(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_counterexample_planar(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_counterexample_planar_recursive(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_goldner_harary(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_graph1(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_graph2(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_graph3(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_k3_3(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_k5(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_loop(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_non_planar1(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_non_planar_digraph(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_non_planar_multigraph(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_non_planar_with_selfloop(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_planar_digraph(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_planar_multigraph(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_planar_with_selfloop(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_simple_planar_graph(self)
networkx.algorithms.tests.test_TestLRPlanarity.test_single_component(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.get_star_embedding(n)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_get_data(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_invalid_edge_orientation(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_missing_edge_orientation(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_missing_half_edge(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_missing_reference(self)
networkx.algorithms.tests.test_TestPlanarEmbeddingClass.test_not_fulfilling_euler_formula(self)
networkx.algorithms.tests.test_check_counterexample(G,sub_graph)
networkx.algorithms.tests.test_check_embedding(G,embedding)
networkx.algorithms.tests.test_planarity.TestLRPlanarity
networkx.algorithms.tests.test_planarity.TestLRPlanarity.check_graph(G,is_planar=None)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_comp(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_counterexample_planar_recursive(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_goldner_harary(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph1(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph2(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_graph3(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k3_3(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_k5(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_loop(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_non_planar(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_multiple_components_planar(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar1(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_digraph(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_multigraph(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_non_planar_with_selfloop(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_digraph(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_multigraph(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_planar_with_selfloop(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_simple_planar_graph(self)
networkx.algorithms.tests.test_planarity.TestLRPlanarity.test_single_component(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.get_star_embedding(n)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_connect_components(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_get_data(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_invalid_edge_orientation(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_edge_orientation(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_half_edge(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_missing_reference(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_not_fulfilling_euler_formula(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_successful_face_traversal(self)
networkx.algorithms.tests.test_planarity.TestPlanarEmbeddingClass.test_unsuccessful_face_traversal(self)
networkx.algorithms.tests.test_planarity.check_counterexample(G,sub_graph)
networkx.algorithms.tests.test_planarity.check_embedding(G,embedding)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_swap.py----------------------------------------
A:networkx.algorithms.tests.test_swap.graph->networkx.DiGraph([(0, 1), (2, 3)])
A:networkx.algorithms.tests.test_swap.in_degrees->sorted(((n, d) for (n, d) in graph.in_degree()))
A:networkx.algorithms.tests.test_swap.out_degrees->sorted(((n, d) for (n, d) in graph.out_degree()))
A:networkx.algorithms.tests.test_swap.G->networkx.double_edge_swap(G, 1, 100)
A:networkx.algorithms.tests.test_swap.degrees->sorted((d for (n, d) in G.degree()))
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_low_window_threshold()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_not_connected()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_small()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_star()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_star_low_window_threshold()
networkx.algorithms.tests.test_swap.test_degree_seq_c4()
networkx.algorithms.tests.test_swap.test_directed_edge_max_tries()
networkx.algorithms.tests.test_swap.test_directed_edge_swap()
networkx.algorithms.tests.test_swap.test_directed_edge_swap_small()
networkx.algorithms.tests.test_swap.test_directed_edge_swap_tries()
networkx.algorithms.tests.test_swap.test_directed_exception_undirected()
networkx.algorithms.tests.test_swap.test_double_edge_directed()
networkx.algorithms.tests.test_swap.test_double_edge_max_tries()
networkx.algorithms.tests.test_swap.test_double_edge_swap()
networkx.algorithms.tests.test_swap.test_double_edge_swap_seed()
networkx.algorithms.tests.test_swap.test_double_edge_swap_small()
networkx.algorithms.tests.test_swap.test_double_edge_swap_tries()
networkx.algorithms.tests.test_swap.test_edge_cases_con_double_edge_swap()
networkx.algorithms.tests.test_swap.test_edge_cases_directed_edge_swap()
networkx.algorithms.tests.test_test_connected_double_edge_swap()
networkx.algorithms.tests.test_test_connected_double_edge_swap_low_window_threshold()
networkx.algorithms.tests.test_test_connected_double_edge_swap_not_connected()
networkx.algorithms.tests.test_test_connected_double_edge_swap_small()
networkx.algorithms.tests.test_test_connected_double_edge_swap_star()
networkx.algorithms.tests.test_test_connected_double_edge_swap_star_low_window_threshold()
networkx.algorithms.tests.test_test_degree_seq_c4()
networkx.algorithms.tests.test_test_directed_edge_max_tries()
networkx.algorithms.tests.test_test_directed_edge_swap()
networkx.algorithms.tests.test_test_directed_edge_swap_small()
networkx.algorithms.tests.test_test_directed_edge_swap_tries()
networkx.algorithms.tests.test_test_directed_exception_undirected()
networkx.algorithms.tests.test_test_double_edge_directed()
networkx.algorithms.tests.test_test_double_edge_max_tries()
networkx.algorithms.tests.test_test_double_edge_swap()
networkx.algorithms.tests.test_test_double_edge_swap_seed()
networkx.algorithms.tests.test_test_double_edge_swap_small()
networkx.algorithms.tests.test_test_double_edge_swap_tries()
networkx.algorithms.tests.test_test_edge_cases_con_double_edge_swap()
networkx.algorithms.tests.test_test_edge_cases_directed_edge_swap()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_matching.py----------------------------------------
A:networkx.algorithms.tests.test_matching.G->networkx.Graph()
A:networkx.algorithms.tests.test_matching.answer->matching_dict_to_set(ans)
A:networkx.algorithms.tests.test_matching.matching->networkx.maximal_matching(G)
networkx.algorithms.tests.test_TestIsMatching
networkx.algorithms.tests.test_TestIsMatching.test_dict(self)
networkx.algorithms.tests.test_TestIsMatching.test_edge_order(self)
networkx.algorithms.tests.test_TestIsMatching.test_empty_matching(self)
networkx.algorithms.tests.test_TestIsMatching.test_invalid_edge(self)
networkx.algorithms.tests.test_TestIsMatching.test_invalid_input(self)
networkx.algorithms.tests.test_TestIsMatching.test_invalid_matching(self)
networkx.algorithms.tests.test_TestIsMatching.test_selfloops(self)
networkx.algorithms.tests.test_TestIsMatching.test_single_edge(self)
networkx.algorithms.tests.test_TestIsMatching.test_valid_matching(self)
networkx.algorithms.tests.test_TestIsMaximalMatching
networkx.algorithms.tests.test_TestIsMaximalMatching.test_dict(self)
networkx.algorithms.tests.test_TestIsMaximalMatching.test_invalid_input(self)
networkx.algorithms.tests.test_TestIsMaximalMatching.test_not_matching(self)
networkx.algorithms.tests.test_TestIsMaximalMatching.test_not_maximal(self)
networkx.algorithms.tests.test_TestIsMaximalMatching.test_valid(self)
networkx.algorithms.tests.test_TestIsPerfectMatching
networkx.algorithms.tests.test_TestIsPerfectMatching.test_dict(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_invalid_input(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_maximal_but_not_perfect(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_not_matching(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_selfloops(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_valid(self)
networkx.algorithms.tests.test_TestIsPerfectMatching.test_valid_not_path(self)
networkx.algorithms.tests.test_TestMaxWeightMatching
networkx.algorithms.tests.test_TestMaxWeightMatching.test_edge_attribute_name(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_floating_point_weights(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nasty_blossom1(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nasty_blossom2(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nasty_blossom_augmenting(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nasty_blossom_expand_recursively(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nasty_blossom_least_slack(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_negative_weights(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nested_s_blossom(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nested_s_blossom_expand(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nested_s_blossom_relabel(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_nested_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_path(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_s_blossom(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_s_t_blossom(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_selfloop(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_single_edge(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_square(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_trivial1(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_two_path(self)
networkx.algorithms.tests.test_TestMaxWeightMatching.test_wrong_graph_type(self)
networkx.algorithms.tests.test_TestMaximalMatching
networkx.algorithms.tests.test_TestMaximalMatching.test_ordering(self)
networkx.algorithms.tests.test_TestMaximalMatching.test_self_loops(self)
networkx.algorithms.tests.test_TestMaximalMatching.test_single_edge_matching(self)
networkx.algorithms.tests.test_TestMaximalMatching.test_valid_matching(self)
networkx.algorithms.tests.test_TestMaximalMatching.test_wrong_graph_type(self)
networkx.algorithms.tests.test_matching.TestIsMatching
networkx.algorithms.tests.test_matching.TestIsMatching.test_dict(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_edge_order(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_empty_matching(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_invalid_edge(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_invalid_input(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_invalid_matching(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_selfloops(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_single_edge(self)
networkx.algorithms.tests.test_matching.TestIsMatching.test_valid_matching(self)
networkx.algorithms.tests.test_matching.TestIsMaximalMatching
networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_dict(self)
networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_invalid_input(self)
networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_matching(self)
networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_not_maximal(self)
networkx.algorithms.tests.test_matching.TestIsMaximalMatching.test_valid(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_dict(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_invalid_input(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_maximal_but_not_perfect(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_not_matching(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_selfloops(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid(self)
networkx.algorithms.tests.test_matching.TestIsPerfectMatching.test_valid_not_path(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_edge_attribute_name(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_floating_point_weights(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom1(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom2(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_augmenting(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_expand_recursively(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nasty_blossom_least_slack(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_negative_weights(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_expand(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_nested_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_path(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_s_t_blossom(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_selfloop(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_single_edge(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_square(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_trivial1(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_two_path(self)
networkx.algorithms.tests.test_matching.TestMaxWeightMatching.test_wrong_graph_type(self)
networkx.algorithms.tests.test_matching.TestMaximalMatching
networkx.algorithms.tests.test_matching.TestMaximalMatching.test_ordering(self)
networkx.algorithms.tests.test_matching.TestMaximalMatching.test_self_loops(self)
networkx.algorithms.tests.test_matching.TestMaximalMatching.test_single_edge_matching(self)
networkx.algorithms.tests.test_matching.TestMaximalMatching.test_valid_matching(self)
networkx.algorithms.tests.test_matching.TestMaximalMatching.test_wrong_graph_type(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_similarity.py----------------------------------------
A:networkx.algorithms.tests.test_similarity.G->networkx.Graph()
A:networkx.algorithms.tests.test_similarity.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_similarity.G0->networkx.MultiGraph()
A:networkx.algorithms.tests.test_similarity.G1->getCanonical()
A:networkx.algorithms.tests.test_similarity.G2->networkx.Graph()
A:networkx.algorithms.tests.test_similarity.G3->networkx.Graph()
A:networkx.algorithms.tests.test_similarity.(paths, cost)->optimal_edit_paths(G1, G2)
A:networkx.algorithms.tests.test_similarity.actual->networkx.similarity._simrank_similarity_numpy(G, source=0, target=0)
A:networkx.algorithms.tests.test_similarity.node_labels->dict(enumerate(nx.get_node_attributes(G, 'label').values()))
A:networkx.algorithms.tests.test_similarity.expected->pytest.importorskip('numpy').array([1.0, 0.3947180735764555, 0.570482097206368, 0.570482097206368, 0.3947180735764555])
A:networkx.algorithms.tests.test_similarity.sim->networkx.panther_similarity(G, 'v1', path_length=2)
A:networkx.algorithms.tests.test_similarity.paths->networkx.generate_random_paths(G, num_paths, path_length=path_length, index_map=index_map)
networkx.algorithms.tests.test_TestSimilarity
networkx.algorithms.tests.test_TestSimilarity.setup_class(cls)
networkx.algorithms.tests.test_TestSimilarity.testCopy(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph1(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph2(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph3(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph4(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph4_a(self)
networkx.algorithms.tests.test_TestSimilarity.testGraph4_b(self)
networkx.algorithms.tests.test_TestSimilarity.testOneEdgeLabelDiff(self)
networkx.algorithms.tests.test_TestSimilarity.testOneExtraEdge(self)
networkx.algorithms.tests.test_TestSimilarity.testOneExtraNode(self)
networkx.algorithms.tests.test_TestSimilarity.testOneExtraNodeAndEdge(self)
networkx.algorithms.tests.test_TestSimilarity.testOneNodeLabelDiff(self)
networkx.algorithms.tests.test_TestSimilarity.testSame(self)
networkx.algorithms.tests.test_TestSimilarity.test_digraph(self)
networkx.algorithms.tests.test_TestSimilarity.test_generate_random_paths_unweighted(self)
networkx.algorithms.tests.test_TestSimilarity.test_generate_random_paths_weighted(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_edge_cost(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_edge_match(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_node_cost(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_node_match(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_roots_and_timeout(self)
networkx.algorithms.tests.test_TestSimilarity.test_graph_edit_distance_upper_bound(self)
networkx.algorithms.tests.test_TestSimilarity.test_multidigraph(self)
networkx.algorithms.tests.test_TestSimilarity.test_multigraph(self)
networkx.algorithms.tests.test_TestSimilarity.test_optimal_edit_paths(self)
networkx.algorithms.tests.test_TestSimilarity.test_optimize_graph_edit_distance(self)
networkx.algorithms.tests.test_TestSimilarity.test_panther_similarity_unweighted(self)
networkx.algorithms.tests.test_TestSimilarity.test_panther_similarity_weighted(self)
networkx.algorithms.tests.test_TestSimilarity.test_selfloops(self)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_between_versions(self)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_max_iterations(self,alg)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_no_source_no_target(self,simrank_similarity)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_noninteger_nodes(self,simrank_similarity)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_numpy_no_source_no_target(self)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_numpy_source_and_target(self)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_numpy_source_no_target(self)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_source_and_target(self,simrank_similarity)
networkx.algorithms.tests.test_TestSimilarity.test_simrank_source_no_target(self,simrank_similarity)
networkx.algorithms.tests.test_TestSimilarity.test_symmetry_with_custom_matching(self)
networkx.algorithms.tests.test_ematch(e1,e2)
networkx.algorithms.tests.test_getCanonical()
networkx.algorithms.tests.test_nmatch(n1,n2)
networkx.algorithms.tests.test_similarity.TestSimilarity
networkx.algorithms.tests.test_similarity.TestSimilarity.setup_class(cls)
networkx.algorithms.tests.test_similarity.TestSimilarity.testCopy(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph1(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph2(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph3(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_a(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testGraph4_b(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testOneEdgeLabelDiff(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraEdge(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNode(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testOneExtraNodeAndEdge(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testOneNodeLabelDiff(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.testSame(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_digraph(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_generate_random_paths_unweighted(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_generate_random_paths_weighted(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_cost(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_edge_match(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_cost(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_node_match(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_roots_and_timeout(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_graph_edit_distance_upper_bound(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_multidigraph(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_multigraph(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimal_edit_paths(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_optimize_graph_edit_distance(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_panther_similarity_unweighted(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_panther_similarity_weighted(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_selfloops(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_between_versions(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_max_iterations(self,alg)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_no_source_no_target(self,simrank_similarity)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_noninteger_nodes(self,simrank_similarity)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_no_source_no_target(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_and_target(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_numpy_source_no_target(self)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_and_target(self,simrank_similarity)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_simrank_source_no_target(self,simrank_similarity)
networkx.algorithms.tests.test_similarity.TestSimilarity.test_symmetry_with_custom_matching(self)
networkx.algorithms.tests.test_similarity.ematch(e1,e2)
networkx.algorithms.tests.test_similarity.getCanonical()
networkx.algorithms.tests.test_similarity.nmatch(n1,n2)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_smallworld.py----------------------------------------
A:networkx.algorithms.tests.test_smallworld.G->networkx.connected_watts_strogatz_graph(50, 6, 1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.Gr->networkx.connected_watts_strogatz_graph(50, 6, 1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.C->networkx.average_clustering(G)
A:networkx.algorithms.tests.test_smallworld.Cr->networkx.average_clustering(Gr)
A:networkx.algorithms.tests.test_smallworld.H->networkx.Graph(((0, 1), (2, 3)))
A:networkx.algorithms.tests.test_smallworld.Hl->lattice_reference(H, niter=1)
A:networkx.algorithms.tests.test_smallworld.Gl->networkx.connected_watts_strogatz_graph(50, 6, 0, seed=rng)
A:networkx.algorithms.tests.test_smallworld.L->networkx.average_shortest_path_length(G)
A:networkx.algorithms.tests.test_smallworld.Ll->networkx.average_shortest_path_length(Gl)
A:networkx.algorithms.tests.test_smallworld.Gs->networkx.connected_watts_strogatz_graph(50, 6, 0.1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.sigmas->sigma(Gs, niter=1, nrand=2, seed=rng)
A:networkx.algorithms.tests.test_smallworld.sigmar->sigma(Gr, niter=1, nrand=2, seed=rng)
A:networkx.algorithms.tests.test_smallworld.omegal->omega(Gl, niter=1, nrand=1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.omegar->omega(Gr, niter=1, nrand=1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.omegas->omega(Gs, niter=1, nrand=1, seed=rng)
A:networkx.algorithms.tests.test_smallworld.G_barbell->networkx.barbell_graph(5, 1)
A:networkx.algorithms.tests.test_smallworld.G_karate->networkx.karate_club_graph()
A:networkx.algorithms.tests.test_smallworld.omega_barbell->networkx.omega(G_barbell)
A:networkx.algorithms.tests.test_smallworld.omega_karate->networkx.omega(G_karate, nrand=2)
networkx.algorithms.tests.test_smallworld.test_lattice_reference()
networkx.algorithms.tests.test_smallworld.test_omega()
networkx.algorithms.tests.test_smallworld.test_random_reference()
networkx.algorithms.tests.test_smallworld.test_sigma()
networkx.algorithms.tests.test_test_lattice_reference()
networkx.algorithms.tests.test_test_omega()
networkx.algorithms.tests.test_test_random_reference()
networkx.algorithms.tests.test_test_sigma()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_d_separation.py----------------------------------------
A:networkx.algorithms.tests.test_d_separation.G->networkx.DiGraph(edge_list)
A:networkx.algorithms.tests.test_d_separation.parents->set(graph.predecessors(node))
A:networkx.algorithms.tests.test_d_separation.g->networkx.cycle_graph(3, nx.DiGraph)
A:networkx.algorithms.tests.test_d_separation.Zmin->networkx.minimal_d_separator(G, 'A', 'C')
networkx.algorithms.tests.test_asia_graph()
networkx.algorithms.tests.test_asia_graph_fixture()
networkx.algorithms.tests.test_collider_graph()
networkx.algorithms.tests.test_collider_graph_fixture()
networkx.algorithms.tests.test_d_separation.asia_graph()
networkx.algorithms.tests.test_d_separation.asia_graph_fixture()
networkx.algorithms.tests.test_d_separation.collider_graph()
networkx.algorithms.tests.test_d_separation.collider_graph_fixture()
networkx.algorithms.tests.test_d_separation.fork_graph()
networkx.algorithms.tests.test_d_separation.fork_graph_fixture()
networkx.algorithms.tests.test_d_separation.naive_bayes_graph()
networkx.algorithms.tests.test_d_separation.naive_bayes_graph_fixture()
networkx.algorithms.tests.test_d_separation.path_graph()
networkx.algorithms.tests.test_d_separation.path_graph_fixture()
networkx.algorithms.tests.test_d_separation.test_asia_graph_dsep(asia_graph)
networkx.algorithms.tests.test_d_separation.test_collider_graph_dsep(collider_graph)
networkx.algorithms.tests.test_d_separation.test_cyclic_graphs_raise_error()
networkx.algorithms.tests.test_d_separation.test_fork_graph_dsep(fork_graph)
networkx.algorithms.tests.test_d_separation.test_invalid_nodes_raise_error(asia_graph)
networkx.algorithms.tests.test_d_separation.test_markov_condition(graph)
networkx.algorithms.tests.test_d_separation.test_minimal_d_separator()
networkx.algorithms.tests.test_d_separation.test_naive_bayes_dsep(naive_bayes_graph)
networkx.algorithms.tests.test_d_separation.test_path_graph_dsep(path_graph)
networkx.algorithms.tests.test_d_separation.test_undirected_graphs_are_not_supported()
networkx.algorithms.tests.test_fork_graph()
networkx.algorithms.tests.test_fork_graph_fixture()
networkx.algorithms.tests.test_naive_bayes_graph()
networkx.algorithms.tests.test_naive_bayes_graph_fixture()
networkx.algorithms.tests.test_path_graph()
networkx.algorithms.tests.test_path_graph_fixture()
networkx.algorithms.tests.test_test_asia_graph_dsep(asia_graph)
networkx.algorithms.tests.test_test_collider_graph_dsep(collider_graph)
networkx.algorithms.tests.test_test_cyclic_graphs_raise_error()
networkx.algorithms.tests.test_test_fork_graph_dsep(fork_graph)
networkx.algorithms.tests.test_test_invalid_nodes_raise_error(asia_graph)
networkx.algorithms.tests.test_test_markov_condition(graph)
networkx.algorithms.tests.test_test_minimal_d_separator()
networkx.algorithms.tests.test_test_naive_bayes_dsep(naive_bayes_graph)
networkx.algorithms.tests.test_test_path_graph_dsep(path_graph)
networkx.algorithms.tests.test_test_undirected_graphs_are_not_supported()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_chordal.py----------------------------------------
A:networkx.algorithms.tests.test_chordal.connected_chordal_G->networkx.Graph()
A:networkx.algorithms.tests.test_chordal.chordal_G->networkx.Graph()
A:networkx.algorithms.tests.test_chordal.non_chordal_G->networkx.Graph()
A:networkx.algorithms.tests.test_chordal.self_loop_G->networkx.Graph()
A:networkx.algorithms.tests.test_chordal.G->networkx.path_graph(10)
A:networkx.algorithms.tests.test_chordal.Induced_nodes->networkx.find_induced_nodes(self.chordal_G, 1, 6)
A:networkx.algorithms.tests.test_chordal.cliqueset->networkx.chordal_graph_cliques(G)
A:networkx.algorithms.tests.test_chordal.(H, a)->networkx.complete_to_chordal_graph(G)
networkx.algorithms.tests.test_chordal.TestMCS
networkx.algorithms.tests.test_chordal.TestMCS.setup_class(cls)
networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_chordal_find_cliques_path(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_complete_to_chordal_graph(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_graph_treewidth(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_induced_nodes(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_is_chordal(self)
networkx.algorithms.tests.test_chordal.TestMCS.test_is_chordal_not_implemented(self,G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_bridges.py----------------------------------------
A:networkx.algorithms.tests.test_bridges.G->self.square.copy()
A:networkx.algorithms.tests.test_bridges.bridges->list(nx.bridges(G, source))
A:networkx.algorithms.tests.test_bridges.cls.BB->networkx.barbell_graph(4, 0)
A:networkx.algorithms.tests.test_bridges.cls.square->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_bridges.cls.tri->networkx.cycle_graph(3)
A:networkx.algorithms.tests.test_bridges.inf->float('inf')
A:networkx.algorithms.tests.test_bridges.lb->networkx.local_bridges(G, weight=lambda u, v, d: 2)
networkx.algorithms.tests.test_TestBridges
networkx.algorithms.tests.test_TestBridges.test_barbell_graph(self)
networkx.algorithms.tests.test_TestBridges.test_multiedge_bridge(self)
networkx.algorithms.tests.test_TestBridges.test_single_bridge(self)
networkx.algorithms.tests.test_TestHasBridges
networkx.algorithms.tests.test_TestHasBridges.test_has_bridges_raises_root_not_in_G(self)
networkx.algorithms.tests.test_TestHasBridges.test_multiedge_bridge(self)
networkx.algorithms.tests.test_TestHasBridges.test_single_bridge(self)
networkx.algorithms.tests.test_TestLocalBridges
networkx.algorithms.tests.test_TestLocalBridges.setup_class(cls)
networkx.algorithms.tests.test_TestLocalBridges.test_no_weight(self)
networkx.algorithms.tests.test_TestLocalBridges.test_nospan(self)
networkx.algorithms.tests.test_TestLocalBridges.test_weight(self)
networkx.algorithms.tests.test_bridges.TestBridges
networkx.algorithms.tests.test_bridges.TestBridges.test_barbell_graph(self)
networkx.algorithms.tests.test_bridges.TestBridges.test_multiedge_bridge(self)
networkx.algorithms.tests.test_bridges.TestBridges.test_single_bridge(self)
networkx.algorithms.tests.test_bridges.TestHasBridges
networkx.algorithms.tests.test_bridges.TestHasBridges.test_bridges_multiple_components(self)
networkx.algorithms.tests.test_bridges.TestHasBridges.test_has_bridges_raises_root_not_in_G(self)
networkx.algorithms.tests.test_bridges.TestHasBridges.test_multiedge_bridge(self)
networkx.algorithms.tests.test_bridges.TestHasBridges.test_single_bridge(self)
networkx.algorithms.tests.test_bridges.TestLocalBridges
networkx.algorithms.tests.test_bridges.TestLocalBridges.setup_class(cls)
networkx.algorithms.tests.test_bridges.TestLocalBridges.test_no_weight(self)
networkx.algorithms.tests.test_bridges.TestLocalBridges.test_nospan(self)
networkx.algorithms.tests.test_bridges.TestLocalBridges.test_weight(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_polynomials.py----------------------------------------
A:networkx.algorithms.tests.test_polynomials.sympy->pytest.importorskip('sympy')
A:networkx.algorithms.tests.test_polynomials.t_g->networkx.tutte_polynomial(G)
A:networkx.algorithms.tests.test_polynomials.H->networkx.disjoint_union(G, G)
A:networkx.algorithms.tests.test_polynomials.t_h->networkx.tutte_polynomial(H)
A:networkx.algorithms.tests.test_polynomials.x_g->networkx.chromatic_polynomial(G)
A:networkx.algorithms.tests.test_polynomials.x_h->networkx.chromatic_polynomial(H)
networkx.algorithms.tests.test_polynomials.test_chromatic_polynomial(G,expected)
networkx.algorithms.tests.test_polynomials.test_chromatic_polynomial_disjoint(G)
networkx.algorithms.tests.test_polynomials.test_tutte_polynomial(G,expected)
networkx.algorithms.tests.test_polynomials.test_tutte_polynomial_disjoint(G)
networkx.algorithms.tests.test_test_chromatic_polynomial(G,expected)
networkx.algorithms.tests.test_test_chromatic_polynomial_disjoint(G)
networkx.algorithms.tests.test_test_tutte_polynomial(G,expected)
networkx.algorithms.tests.test_test_tutte_polynomial_disjoint(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_asteroidal.py----------------------------------------
A:networkx.algorithms.tests.test_asteroidal.cycle->networkx.cycle_graph(6)
A:networkx.algorithms.tests.test_asteroidal.path->networkx.path_graph(6)
A:networkx.algorithms.tests.test_asteroidal.small_graph->networkx.complete_graph(2)
A:networkx.algorithms.tests.test_asteroidal.petersen->networkx.petersen_graph()
A:networkx.algorithms.tests.test_asteroidal.clique->networkx.complete_graph(6)
A:networkx.algorithms.tests.test_asteroidal.line_clique->networkx.line_graph(clique)
networkx.algorithms.tests.test_asteroidal.test_is_at_free()
networkx.algorithms.tests.test_test_is_at_free()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_covering.py----------------------------------------
A:networkx.algorithms.tests.test_covering.G->networkx.Graph()
A:networkx.algorithms.tests.test_covering.min_cover->networkx.min_edge_cover(G)
A:networkx.algorithms.tests.test_covering.min_cover2->networkx.min_edge_cover(G)
networkx.algorithms.tests.test_TestIsEdgeCover
networkx.algorithms.tests.test_TestIsEdgeCover.test_empty_graph(self)
networkx.algorithms.tests.test_TestIsEdgeCover.test_graph_single_edge(self)
networkx.algorithms.tests.test_TestIsEdgeCover.test_graph_with_loop(self)
networkx.algorithms.tests.test_TestMinEdgeCover
networkx.algorithms.tests.test_TestMinEdgeCover.test_complete_graph_even(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_complete_graph_odd(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_empty_graph(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_graph_single_edge(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_graph_two_edge_path(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_graph_with_isolated_v(self)
networkx.algorithms.tests.test_TestMinEdgeCover.test_graph_with_loop(self)
networkx.algorithms.tests.test_covering.TestIsEdgeCover
networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_empty_graph(self)
networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_single_edge(self)
networkx.algorithms.tests.test_covering.TestIsEdgeCover.test_graph_with_loop(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_complete_graph_even(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_complete_graph_odd(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_empty_graph(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_single_edge(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_two_edge_path(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_with_isolated_v(self)
networkx.algorithms.tests.test_covering.TestMinEdgeCover.test_graph_with_loop(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_tournament.py----------------------------------------
A:networkx.algorithms.tests.test_tournament.G->DiGraph([(0, 1), (0, 2), (1, 2)])
A:networkx.algorithms.tests.test_tournament.path->hamiltonian_path(G)
A:networkx.algorithms.tests.test_tournament.np->pytest.importorskip('numpy')
A:networkx.algorithms.tests.test_tournament.m->tournament_matrix(G)
networkx.algorithms.tests.test_tournament.test_bidirectional_edges()
networkx.algorithms.tests.test_tournament.test_condition_not_satisfied()
networkx.algorithms.tests.test_tournament.test_empty_iterable()
networkx.algorithms.tests.test_tournament.test_graph_is_tournament()
networkx.algorithms.tests.test_tournament.test_graph_is_tournament_one_node()
networkx.algorithms.tests.test_tournament.test_graph_is_tournament_seed()
networkx.algorithms.tests.test_tournament.test_graph_is_tournament_zero_node()
networkx.algorithms.tests.test_tournament.test_hamiltonian_cycle()
networkx.algorithms.tests.test_tournament.test_hamiltonian_empty_graph()
networkx.algorithms.tests.test_tournament.test_is_strongly_connected()
networkx.algorithms.tests.test_tournament.test_is_tournament()
networkx.algorithms.tests.test_tournament.test_missing_edges()
networkx.algorithms.tests.test_tournament.test_not_strongly_connected()
networkx.algorithms.tests.test_tournament.test_path_is_hamiltonian()
networkx.algorithms.tests.test_tournament.test_reachable_pair()
networkx.algorithms.tests.test_tournament.test_same_node_is_reachable()
networkx.algorithms.tests.test_tournament.test_score_sequence_edge()
networkx.algorithms.tests.test_tournament.test_score_sequence_triangle()
networkx.algorithms.tests.test_tournament.test_self_loops()
networkx.algorithms.tests.test_tournament.test_tournament_matrix()
networkx.algorithms.tests.test_tournament.test_unreachable_pair()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_efficiency.py----------------------------------------
A:networkx.algorithms.tests.test_efficiency.self.G1->networkx.Graph()
A:networkx.algorithms.tests.test_efficiency.self.G2->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_efficiency.self.G3->networkx.lollipop_graph(3, 1)
A:networkx.algorithms.tests.test_efficiency.G->networkx.complete_graph(n)
networkx.algorithms.tests.test_efficiency.TestEfficiency
networkx.algorithms.tests.test_efficiency.TestEfficiency.setup_method(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_efficiency_disconnected_nodes(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_global_efficiency_complete_graph(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_complete_graph(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_local_efficiency_disconnected_graph(self)
networkx.algorithms.tests.test_efficiency.TestEfficiency.test_using_ego_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_max_weight_clique.py----------------------------------------
A:networkx.algorithms.tests.test_max_weight_clique.graph->networkx.Graph()
A:networkx.algorithms.tests.test_max_weight_clique.(clique, weight)->networkx.algorithms.max_weight_clique(G)
A:networkx.algorithms.tests.test_max_weight_clique.G->networkx.Graph()
A:networkx.algorithms.tests.test_max_weight_clique.clique_weight->sum((graph.nodes[v]['weight'] for v in clique))
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_30_node_prob(self)
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_basic_cases(self)
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_error_on_non_integer_weight(self)
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_key_error(self)
networkx.algorithms.tests.test_max_weight_clique.TestMaximumWeightClique.test_unaffected_by_self_loops(self)
networkx.algorithms.tests.test_max_weight_clique.disconnected()
networkx.algorithms.tests.test_max_weight_clique.empty_graph()
networkx.algorithms.tests.test_max_weight_clique.one_node_graph()
networkx.algorithms.tests.test_max_weight_clique.three_node_clique()
networkx.algorithms.tests.test_max_weight_clique.three_node_independent_set()
networkx.algorithms.tests.test_max_weight_clique.two_node_graph()
networkx.algorithms.tests.test_max_weight_clique.verify_clique(graph,clique,reported_clique_weight,expected_clique_weight,weight_accessor)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_hierarchy.py----------------------------------------
A:networkx.algorithms.tests.test_hierarchy.G->networkx.DiGraph()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_1()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_cycle()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_exception()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_tree()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_weight()
networkx.algorithms.tests.test_test_hierarchy_1()
networkx.algorithms.tests.test_test_hierarchy_cycle()
networkx.algorithms.tests.test_test_hierarchy_exception()
networkx.algorithms.tests.test_test_hierarchy_weight()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_cuts.py----------------------------------------
A:networkx.algorithms.tests.test_cuts.G->networkx.barbell_graph(5, 0)
A:networkx.algorithms.tests.test_cuts.edges->list(nx.cycle_graph(4).edges())
A:networkx.algorithms.tests.test_cuts.size->networkx.normalized_cut_size(G, S, T)
A:networkx.algorithms.tests.test_cuts.conductance->networkx.conductance(G, S, T)
A:networkx.algorithms.tests.test_cuts.G2->networkx.barbell_graph(3, 0)
A:networkx.algorithms.tests.test_cuts.S->set(range(5))
A:networkx.algorithms.tests.test_cuts.expansion->networkx.mixing_expansion(G, S, T)
networkx.algorithms.tests.test_TestBoundaryExpansion
networkx.algorithms.tests.test_TestBoundaryExpansion.test_graph(self)
networkx.algorithms.tests.test_TestConductance
networkx.algorithms.tests.test_TestConductance.test_graph(self)
networkx.algorithms.tests.test_TestCutSize
networkx.algorithms.tests.test_TestCutSize.test_directed(self)
networkx.algorithms.tests.test_TestCutSize.test_directed_symmetric(self)
networkx.algorithms.tests.test_TestCutSize.test_multigraph(self)
networkx.algorithms.tests.test_TestCutSize.test_single_edge(self)
networkx.algorithms.tests.test_TestCutSize.test_symmetric(self)
networkx.algorithms.tests.test_TestEdgeExpansion
networkx.algorithms.tests.test_TestEdgeExpansion.test_graph(self)
networkx.algorithms.tests.test_TestMixingExpansion
networkx.algorithms.tests.test_TestMixingExpansion.test_graph(self)
networkx.algorithms.tests.test_TestNodeExpansion
networkx.algorithms.tests.test_TestNodeExpansion.test_graph(self)
networkx.algorithms.tests.test_TestNormalizedCutSize
networkx.algorithms.tests.test_TestNormalizedCutSize.test_directed(self)
networkx.algorithms.tests.test_TestNormalizedCutSize.test_graph(self)
networkx.algorithms.tests.test_TestVolume
networkx.algorithms.tests.test_TestVolume.test_barbell(self)
networkx.algorithms.tests.test_TestVolume.test_digraph(self)
networkx.algorithms.tests.test_TestVolume.test_graph(self)
networkx.algorithms.tests.test_TestVolume.test_multidigraph(self)
networkx.algorithms.tests.test_TestVolume.test_multigraph(self)
networkx.algorithms.tests.test_cuts.TestBoundaryExpansion
networkx.algorithms.tests.test_cuts.TestBoundaryExpansion.test_graph(self)
networkx.algorithms.tests.test_cuts.TestConductance
networkx.algorithms.tests.test_cuts.TestConductance.test_graph(self)
networkx.algorithms.tests.test_cuts.TestCutSize
networkx.algorithms.tests.test_cuts.TestCutSize.test_directed(self)
networkx.algorithms.tests.test_cuts.TestCutSize.test_directed_symmetric(self)
networkx.algorithms.tests.test_cuts.TestCutSize.test_multigraph(self)
networkx.algorithms.tests.test_cuts.TestCutSize.test_single_edge(self)
networkx.algorithms.tests.test_cuts.TestCutSize.test_symmetric(self)
networkx.algorithms.tests.test_cuts.TestEdgeExpansion
networkx.algorithms.tests.test_cuts.TestEdgeExpansion.test_graph(self)
networkx.algorithms.tests.test_cuts.TestMixingExpansion
networkx.algorithms.tests.test_cuts.TestMixingExpansion.test_graph(self)
networkx.algorithms.tests.test_cuts.TestNodeExpansion
networkx.algorithms.tests.test_cuts.TestNodeExpansion.test_graph(self)
networkx.algorithms.tests.test_cuts.TestNormalizedCutSize
networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_directed(self)
networkx.algorithms.tests.test_cuts.TestNormalizedCutSize.test_graph(self)
networkx.algorithms.tests.test_cuts.TestVolume
networkx.algorithms.tests.test_cuts.TestVolume.test_barbell(self)
networkx.algorithms.tests.test_cuts.TestVolume.test_digraph(self)
networkx.algorithms.tests.test_cuts.TestVolume.test_graph(self)
networkx.algorithms.tests.test_cuts.TestVolume.test_multidigraph(self)
networkx.algorithms.tests.test_cuts.TestVolume.test_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tests/test_cycles.py----------------------------------------
A:networkx.algorithms.tests.test_cycles.G->networkx.DiGraph()
A:networkx.algorithms.tests.test_cycles.n->len(a)
A:networkx.algorithms.tests.test_cycles.cy->networkx.cycle_basis(G)
A:networkx.algorithms.tests.test_cycles.sort_cy->sorted((sorted(c) for c in cy))
A:networkx.algorithms.tests.test_cycles.cc->sorted(nx.simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.c->sorted(nx.simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.l->len(list(nx.simple_cycles(G)))
A:networkx.algorithms.tests.test_cycles.rcc->sorted(nx.recursive_simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.x->list(nx.find_cycle(G))
A:networkx.algorithms.tests.test_cycles.T->networkx.Graph()
A:networkx.algorithms.tests.test_cycles.mcb->minimum_cycle_basis(cg)
A:networkx.algorithms.tests.test_cycles.rg->networkx.erdos_renyi_graph(10, 0.3)
A:networkx.algorithms.tests.test_cycles.nnodes->networkx.erdos_renyi_graph(10, 0.3).number_of_nodes()
A:networkx.algorithms.tests.test_cycles.nedges->networkx.erdos_renyi_graph(10, 0.3).number_of_edges()
A:networkx.algorithms.tests.test_cycles.ncomp->networkx.number_connected_components(rg)
A:networkx.algorithms.tests.test_cycles.dim_mcb->len(minimum_cycle_basis(rg))
A:networkx.algorithms.tests.test_cycles.cg->networkx.complete_graph(5)
A:networkx.algorithms.tests.test_cycles.tg->networkx.balanced_tree(3, 3)
networkx.algorithms.tests.test_TestCycles
networkx.algorithms.tests.test_TestCycles.is_cyclic_permutation(self,a,b)
networkx.algorithms.tests.test_TestCycles.setup_class(cls)
networkx.algorithms.tests.test_TestCycles.test_complete_directed_graph(self)
networkx.algorithms.tests.test_TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_TestCycles.test_cycle_basis2(self)
networkx.algorithms.tests.test_TestCycles.test_cycle_basis3(self)
networkx.algorithms.tests.test_TestCycles.test_cycle_basis_self_loop(self)
networkx.algorithms.tests.test_TestCycles.test_recursive_simple_and_not(self)
networkx.algorithms.tests.test_TestCycles.test_simple_cycles(self)
networkx.algorithms.tests.test_TestCycles.test_simple_cycles_empty(self)
networkx.algorithms.tests.test_TestCycles.test_simple_cycles_graph(self)
networkx.algorithms.tests.test_TestCycles.test_simple_cycles_small(self)
networkx.algorithms.tests.test_TestCycles.test_simple_graph_with_reported_bug(self)
networkx.algorithms.tests.test_TestCycles.test_unsortable(self)
networkx.algorithms.tests.test_TestCycles.test_worst_case_graph(self)
networkx.algorithms.tests.test_TestCycles.worst_case_graph(self,k)
networkx.algorithms.tests.test_TestFindCycle
networkx.algorithms.tests.test_TestFindCycle.setup_class(cls)
networkx.algorithms.tests.test_TestFindCycle.test_dag(self)
networkx.algorithms.tests.test_TestFindCycle.test_digraph(self)
networkx.algorithms.tests.test_TestFindCycle.test_digraph_ignore(self)
networkx.algorithms.tests.test_TestFindCycle.test_digraph_orientation_none(self)
networkx.algorithms.tests.test_TestFindCycle.test_digraph_orientation_original(self)
networkx.algorithms.tests.test_TestFindCycle.test_digraph_reverse(self)
networkx.algorithms.tests.test_TestFindCycle.test_graph_cycle(self)
networkx.algorithms.tests.test_TestFindCycle.test_graph_nocycle(self)
networkx.algorithms.tests.test_TestFindCycle.test_graph_orientation_none(self)
networkx.algorithms.tests.test_TestFindCycle.test_graph_orientation_original(self)
networkx.algorithms.tests.test_TestFindCycle.test_multidigraph(self)
networkx.algorithms.tests.test_TestFindCycle.test_multidigraph_ignore(self)
networkx.algorithms.tests.test_TestFindCycle.test_multidigraph_ignore2(self)
networkx.algorithms.tests.test_TestFindCycle.test_multidigraph_original(self)
networkx.algorithms.tests.test_TestFindCycle.test_multigraph(self)
networkx.algorithms.tests.test_TestFindCycle.test_no_cycle(self)
networkx.algorithms.tests.test_TestFindCycle.test_prev_explored(self)
networkx.algorithms.tests.test_TestMinimumCycles
networkx.algorithms.tests.test_TestMinimumCycles.setup_class(cls)
networkx.algorithms.tests.test_TestMinimumCycles.test_complete_graph(self)
networkx.algorithms.tests.test_TestMinimumCycles.test_dimensionality(self)
networkx.algorithms.tests.test_TestMinimumCycles.test_unweighted_diamond(self)
networkx.algorithms.tests.test_TestMinimumCycles.test_weighted_diamond(self)
networkx.algorithms.tests.test_assert_basis_equal(a,b)
networkx.algorithms.tests.test_cycles.TestCycles
networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permutation(self,a,b)
networkx.algorithms.tests.test_cycles.TestCycles.setup_class(cls)
networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis2(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis3(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis_self_loop(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_recursive_simple_and_not(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_graph_with_reported_bug(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph(self,k)
networkx.algorithms.tests.test_cycles.TestFindCycle
networkx.algorithms.tests.test_cycles.TestFindCycle.setup_class(cls)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_dag(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_ignore(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_none(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_orientation_original(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_reverse(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_cycle(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_nocycle(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_none(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph_orientation_original(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_original(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multigraph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_no_cycle(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_prev_explored(self)
networkx.algorithms.tests.test_cycles.TestMinimumCycles
networkx.algorithms.tests.test_cycles.TestMinimumCycles.setup_class(cls)
networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_complete_graph(self)
networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_dimensionality(self)
networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_tree_graph(self)
networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_unweighted_diamond(self)
networkx.algorithms.tests.test_cycles.TestMinimumCycles.test_weighted_diamond(self)
networkx.algorithms.tests.test_cycles.assert_basis_equal(a,b)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/semiconnected.py----------------------------------------
A:networkx.algorithms.components.semiconnected.G->networkx.condensation(G)
A:networkx.algorithms.components.semiconnected.topo_order->networkx.topological_sort(G)
networkx.algorithms.components.is_semiconnected(G,topo_order=None)
networkx.algorithms.components.semiconnected.is_semiconnected(G,topo_order=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/attracting.py----------------------------------------
A:networkx.algorithms.components.attracting.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.components.attracting.cG->networkx.condensation(G, scc)
A:networkx.algorithms.components.attracting.ac->list(attracting_components(G))
networkx.algorithms.components.attracting.attracting_components(G)
networkx.algorithms.components.attracting.is_attracting_component(G)
networkx.algorithms.components.attracting.number_attracting_components(G)
networkx.algorithms.components.attracting_components(G)
networkx.algorithms.components.is_attracting_component(G)
networkx.algorithms.components.number_attracting_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/connected.py----------------------------------------
A:networkx.algorithms.components.connected.seen->set()
A:networkx.algorithms.components.connected.c->_plain_bfs(G, v)
A:networkx.algorithms.components.connected.nextlevel->set()
networkx.algorithms.components._plain_bfs(G,source)
networkx.algorithms.components.connected._plain_bfs(G,source)
networkx.algorithms.components.connected.connected_components(G)
networkx.algorithms.components.connected.is_connected(G)
networkx.algorithms.components.connected.node_connected_component(G,n)
networkx.algorithms.components.connected.number_connected_components(G)
networkx.algorithms.components.connected_components(G)
networkx.algorithms.components.is_connected(G)
networkx.algorithms.components.node_connected_component(G,n)
networkx.algorithms.components.number_connected_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/weakly_connected.py----------------------------------------
A:networkx.algorithms.components.weakly_connected.seen->set()
A:networkx.algorithms.components.weakly_connected.c->set(_plain_bfs(G, v))
A:networkx.algorithms.components.weakly_connected.nextlevel->set()
networkx.algorithms.components._plain_bfs(G,source)
networkx.algorithms.components.is_weakly_connected(G)
networkx.algorithms.components.number_weakly_connected_components(G)
networkx.algorithms.components.weakly_connected._plain_bfs(G,source)
networkx.algorithms.components.weakly_connected.is_weakly_connected(G)
networkx.algorithms.components.weakly_connected.number_weakly_connected_components(G)
networkx.algorithms.components.weakly_connected.weakly_connected_components(G)
networkx.algorithms.components.weakly_connected_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/biconnected.py----------------------------------------
A:networkx.algorithms.components.biconnected.bccs->biconnected_components(G)
A:networkx.algorithms.components.biconnected.bcc->next(bccs)
A:networkx.algorithms.components.biconnected.seen->set()
A:networkx.algorithms.components.biconnected.visited->set()
A:networkx.algorithms.components.biconnected.child->next(children)
A:networkx.algorithms.components.biconnected.low[parent]->min(low[parent], discovery[child])
A:networkx.algorithms.components.biconnected.edge_index[parent, child]->len(edge_stack)
A:networkx.algorithms.components.biconnected.low[child]discovery[child]->len(discovery)
A:networkx.algorithms.components.biconnected.low[grandparent]->min(low[parent], low[grandparent])
networkx.algorithms.components._biconnected_dfs(G,components=True)
networkx.algorithms.components.articulation_points(G)
networkx.algorithms.components.biconnected._biconnected_dfs(G,components=True)
networkx.algorithms.components.biconnected.articulation_points(G)
networkx.algorithms.components.biconnected.biconnected_component_edges(G)
networkx.algorithms.components.biconnected.biconnected_components(G)
networkx.algorithms.components.biconnected.is_biconnected(G)
networkx.algorithms.components.biconnected_component_edges(G)
networkx.algorithms.components.biconnected_components(G)
networkx.algorithms.components.is_biconnected(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/strongly_connected.py----------------------------------------
A:networkx.algorithms.components.strongly_connected.scc_found->set()
A:networkx.algorithms.components.strongly_connected.lowlink[v]->min([lowlink[v], preorder[w]])
A:networkx.algorithms.components.strongly_connected.k->scc_queue.pop()
A:networkx.algorithms.components.strongly_connected.post->list(nx.dfs_postorder_nodes(G.reverse(copy=False), source=source))
A:networkx.algorithms.components.strongly_connected.seen->set()
A:networkx.algorithms.components.strongly_connected.r->list(nx.dfs_postorder_nodes(G.reverse(copy=False), source=source)).pop()
A:networkx.algorithms.components.strongly_connected.c->networkx.dfs_preorder_nodes(G, r)
A:networkx.algorithms.components.strongly_connected.root[v]->min(root[v], root[w])
A:networkx.algorithms.components.strongly_connected.w->stack.pop()
A:networkx.algorithms.components.strongly_connected.scc->networkx.strongly_connected_components(G)
A:networkx.algorithms.components.strongly_connected.C->networkx.DiGraph()
networkx.algorithms.components.condensation(G,scc=None)
networkx.algorithms.components.is_strongly_connected(G)
networkx.algorithms.components.kosaraju_strongly_connected_components(G,source=None)
networkx.algorithms.components.number_strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.condensation(G,scc=None)
networkx.algorithms.components.strongly_connected.is_strongly_connected(G)
networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components(G,source=None)
networkx.algorithms.components.strongly_connected.number_strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive(G)
networkx.algorithms.components.strongly_connected_components(G)
networkx.algorithms.components.strongly_connected_components_recursive(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_connected.G1->cnlti(nx.grid_2d_graph(2, 2), first_label=0, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G2->cnlti(nx.lollipop_graph(3, 3), first_label=4, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G3->cnlti(nx.house_graph(), first_label=10, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.cls.G->networkx.union(cls.G, G3)
A:networkx.algorithms.components.tests.test_connected.cls.DG->networkx.DiGraph([(1, 2), (1, 3), (2, 3)])
A:networkx.algorithms.components.tests.test_connected.cls.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1)
A:networkx.algorithms.components.tests.test_connected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_connected.seen->set()
networkx.algorithms.components.tests.test_TestConnected
networkx.algorithms.components.tests.test_TestConnected.setup_class(cls)
networkx.algorithms.components.tests.test_TestConnected.test_connected_components(self)
networkx.algorithms.components.tests.test_TestConnected.test_connected_components2(self)
networkx.algorithms.components.tests.test_TestConnected.test_connected_mutability(self)
networkx.algorithms.components.tests.test_TestConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_TestConnected.test_is_connected(self)
networkx.algorithms.components.tests.test_TestConnected.test_node_connected_components(self)
networkx.algorithms.components.tests.test_TestConnected.test_number_connected_components(self)
networkx.algorithms.components.tests.test_TestConnected.test_number_connected_components2(self)
networkx.algorithms.components.tests.test_connected.TestConnected
networkx.algorithms.components.tests.test_connected.TestConnected.setup_class(cls)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_mutability(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_semiconnected.py----------------------------------------
A:networkx.algorithms.components.tests.test_semiconnected.G->networkx.DiGraph(chain.from_iterable(([(i, i - 1), (i, i + 1)] for i in range(0, 100, 2))))
networkx.algorithms.components.tests.test_TestIsSemiconnected
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_alternating_path(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_cycle(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_dumbbell(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_empty(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_path(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_single_node_graph(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_tree(self)
networkx.algorithms.components.tests.test_TestIsSemiconnected.test_undirected(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_alternating_path(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_cycle(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_dumbbell(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_empty(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_path(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_single_node_graph(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_tree(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_attracting.py----------------------------------------
A:networkx.algorithms.components.tests.test_attracting.cls.G1->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.cls.G2->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.cls.G3->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.cls.G4->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.ac->list(nx.attracting_components(self.G4))
A:networkx.algorithms.components.tests.test_attracting.g2->self.G3.subgraph([1, 2])
A:networkx.algorithms.components.tests.test_attracting.G->networkx.Graph()
networkx.algorithms.components.tests.test_TestAttractingComponents
networkx.algorithms.components.tests.test_TestAttractingComponents.setup_class(cls)
networkx.algorithms.components.tests.test_TestAttractingComponents.test_attracting_components(self)
networkx.algorithms.components.tests.test_TestAttractingComponents.test_connected_raise(self)
networkx.algorithms.components.tests.test_TestAttractingComponents.test_is_attracting_component(self)
networkx.algorithms.components.tests.test_TestAttractingComponents.test_number_attacting_components(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setup_class(cls)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_connected_raise(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_biconnected.py----------------------------------------
A:networkx.algorithms.components.tests.test_biconnected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_biconnected.pts->set(nx.articulation_points(G))
A:networkx.algorithms.components.tests.test_biconnected.comps->list(nx.biconnected_component_edges(G))
A:networkx.algorithms.components.tests.test_biconnected.D->networkx.davis_southern_women_graph()
A:networkx.algorithms.components.tests.test_biconnected.K->networkx.karate_club_graph()
A:networkx.algorithms.components.tests.test_biconnected.bcc->list(nx.biconnected_components(G2))
A:networkx.algorithms.components.tests.test_biconnected.G1->networkx.Graph({0: [1, 2, 5], 1: [0, 5], 2: [0, 3, 4], 3: [2, 4, 5, 6], 4: [2, 3, 5, 6], 5: [0, 1, 3, 4], 6: [3, 4]})
A:networkx.algorithms.components.tests.test_biconnected.G2->networkx.Graph({0: [2, 5], 1: [3, 8], 2: [0, 3, 5], 3: [1, 2, 6, 8], 4: [7], 5: [0, 2], 6: [3, 8], 7: [4], 8: [1, 3, 6]})
A:networkx.algorithms.components.tests.test_biconnected.DG->networkx.DiGraph()
networkx.algorithms.components.tests.test_assert_components_edges_equal(x,y)
networkx.algorithms.components.tests.test_assert_components_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.assert_components_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle()
networkx.algorithms.components.tests.test_biconnected.test_articulation_points_repetitions()
networkx.algorithms.components.tests.test_biconnected.test_barbell()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate()
networkx.algorithms.components.tests.test_biconnected.test_connected_raise()
networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected()
networkx.algorithms.components.tests.test_biconnected.test_is_biconnected()
networkx.algorithms.components.tests.test_biconnected.test_null_graph()
networkx.algorithms.components.tests.test_test_articulation_points_cycle()
networkx.algorithms.components.tests.test_test_articulation_points_repetitions()
networkx.algorithms.components.tests.test_test_barbell()
networkx.algorithms.components.tests.test_test_biconnected_components1()
networkx.algorithms.components.tests.test_test_biconnected_components2()
networkx.algorithms.components.tests.test_test_biconnected_components_cycle()
networkx.algorithms.components.tests.test_test_biconnected_davis()
networkx.algorithms.components.tests.test_test_biconnected_eppstein()
networkx.algorithms.components.tests.test_test_biconnected_karate()
networkx.algorithms.components.tests.test_test_connected_raise()
networkx.algorithms.components.tests.test_test_empty_is_biconnected()
networkx.algorithms.components.tests.test_test_is_biconnected()
networkx.algorithms.components.tests.test_test_null_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_weakly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_weakly_connected.G->networkx.disjoint_union(DG, DG)
A:networkx.algorithms.components.tests.test_weakly_connected.U->networkx.disjoint_union(DG, DG).to_undirected()
A:networkx.algorithms.components.tests.test_weakly_connected.w->networkx.number_weakly_connected_components(G)
A:networkx.algorithms.components.tests.test_weakly_connected.c->networkx.number_connected_components(U)
A:networkx.algorithms.components.tests.test_weakly_connected.DG->networkx.path_graph(5, create_using=nx.DiGraph)
A:networkx.algorithms.components.tests.test_weakly_connected.seen->set()
networkx.algorithms.components.tests.test_TestWeaklyConnected
networkx.algorithms.components.tests.test_TestWeaklyConnected.setup_class(cls)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_connected_mutability(self)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_is_weakly_connected(self)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_null_graph(self)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.algorithms.components.tests.test_TestWeaklyConnected.test_weakly_connected_components(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setup_class(cls)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_mutability(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_null_graph(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/components/tests/test_strongly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_strongly_connected.G->networkx.disjoint_union(DG, DG)
A:networkx.algorithms.components.tests.test_strongly_connected.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.components.tests.test_strongly_connected.cG->networkx.condensation(G)
A:networkx.algorithms.components.tests.test_strongly_connected.C->sorted(C, key=len, reverse=True)
A:networkx.algorithms.components.tests.test_strongly_connected.DG->networkx.path_graph(5, create_using=nx.DiGraph)
A:networkx.algorithms.components.tests.test_strongly_connected.seen->set()
networkx.algorithms.components.tests.test_TestStronglyConnected
networkx.algorithms.components.tests.test_TestStronglyConnected.setup_class(cls)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_condensation_mapping_and_members(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_connected_mutability(self,get_components)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_contract_scc1(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_contract_scc_edge(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_contract_scc_isolate(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_is_strongly_connected(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_kosaraju(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_null_graph(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_tarjan(self)
networkx.algorithms.components.tests.test_TestStronglyConnected.test_tarjan_recursive(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setup_class(cls)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_condensation_mapping_and_members(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_mutability(self,get_components)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_null_graph(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.kcomponents.k_components->defaultdict(list)
A:networkx.algorithms.connectivity.kcomponents.comp->set(component)
A:networkx.algorithms.connectivity.kcomponents.bicomp->set(bicomponent)
A:networkx.algorithms.connectivity.kcomponents.k->networkx.node_connectivity(B, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcomponents.cuts->list(nx.all_node_cuts(C, k=this_k, flow_func=flow_func))
A:networkx.algorithms.connectivity.kcomponents.nodes->next(partition)
A:networkx.algorithms.connectivity.kcomponents.C->B.subgraph(nodes)
A:networkx.algorithms.connectivity.kcomponents.this_k->networkx.node_connectivity(C, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcomponents.G->networkx.Graph()
A:networkx.algorithms.connectivity.kcomponents.H->networkx.Graph().subgraph(nodes)
A:networkx.algorithms.connectivity.kcomponents.component->set(cc)
A:networkx.algorithms.connectivity.kcomponents.result->dict()
A:networkx.algorithms.connectivity.kcomponents.max_k->max(k_comps)
A:networkx.algorithms.connectivity.kcomponents.result[k]->list(_consolidate(k_comps[k], k))
A:networkx.algorithms.connectivity.kcomponents.nodes_at_k->set.union(*k_comps[k])
networkx.algorithms.connectivity._consolidate(sets,k)
networkx.algorithms.connectivity._generate_partition(G,cuts,k)
networkx.algorithms.connectivity._reconstruct_k_components(k_comps)
networkx.algorithms.connectivity.build_k_number_dict(kcomps)
networkx.algorithms.connectivity.kcomponents._consolidate(sets,k)
networkx.algorithms.connectivity.kcomponents._generate_partition(G,cuts,k)
networkx.algorithms.connectivity.kcomponents._reconstruct_k_components(k_comps)
networkx.algorithms.connectivity.kcomponents.build_k_number_dict(kcomps)
networkx.algorithms.connectivity.kcomponents.k_components(G,flow_func=None)
networkx.algorithms.k_components(G,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/edge_augmentation.py----------------------------------------
A:networkx.algorithms.connectivity.edge_augmentation.localk->networkx.connectivity.local_edge_connectivity(G, s, t, cutoff=k)
A:networkx.algorithms.connectivity.edge_augmentation.aug_edges->partial_k_edge_augmentation(G, k=k, avail=avail, weight=weight)
A:networkx.algorithms.connectivity.edge_augmentation.neighbs12->neighbs.intersection(only2)
A:networkx.algorithms.connectivity.edge_augmentation.(avail_uv, avail_w)->_unpack_available_edges(avail, weight=weight, G=G)
A:networkx.algorithms.connectivity.edge_augmentation.H->G.copy()
A:networkx.algorithms.connectivity.edge_augmentation.k_edge_subgraphs->list(nx.k_edge_subgraphs(H, k=k))
A:networkx.algorithms.connectivity.edge_augmentation.C->G.__class__()
A:networkx.algorithms.connectivity.edge_augmentation.d->G.copy().get_edge_data(u, v)
A:networkx.algorithms.connectivity.edge_augmentation.edge->G.copy().get_edge_data(u, v).get('generator', None)
A:networkx.algorithms.connectivity.edge_augmentation.avail_uv->list(complement_edges(G))
A:networkx.algorithms.connectivity.edge_augmentation.avail_w->list(it.compress(avail_w, flags))
A:networkx.algorithms.connectivity.edge_augmentation.MetaEdge->namedtuple('MetaEdge', ('meta_uv', 'uv', 'w'))
A:networkx.algorithms.connectivity.edge_augmentation.grouped_wuv->defaultdict(list)
A:networkx.algorithms.connectivity.edge_augmentation.meta_uv->_ordered(mapping[u], mapping[v])
A:networkx.algorithms.connectivity.edge_augmentation.(w, u, v)->min(choices_wuv)
A:networkx.algorithms.connectivity.edge_augmentation.ccs1->list(nx.connected_components(G))
A:networkx.algorithms.connectivity.edge_augmentation.meta_nodes->list(C.nodes())
A:networkx.algorithms.connectivity.edge_augmentation.meta_aug->list(zip(meta_nodes, meta_nodes[1:]))
A:networkx.algorithms.connectivity.edge_augmentation.inverse->defaultdict(list)
A:networkx.algorithms.connectivity.edge_augmentation.candidate_mapping->_lightest_meta_edges(mapping, avail_uv, avail_w)
A:networkx.algorithms.connectivity.edge_augmentation.meta_mst->networkx.minimum_spanning_tree(C)
A:networkx.algorithms.connectivity.edge_augmentation.bridge_ccs->networkx.connectivity.bridge_components(H)
A:networkx.algorithms.connectivity.edge_augmentation.A1->list(zip(nodes1[1:], nodes2))
A:networkx.algorithms.connectivity.edge_augmentation.T->G.__class__().copy()
A:networkx.algorithms.connectivity.edge_augmentation.root->next((n for (n, d) in C.degree() if d == 1))
A:networkx.algorithms.connectivity.edge_augmentation.half->math.ceil(len(v2) / 2)
A:networkx.algorithms.connectivity.edge_augmentation.A2->list(zip(v2[:half], v2[-half:]))
A:networkx.algorithms.connectivity.edge_augmentation.G2->G.copy()
A:networkx.algorithms.connectivity.edge_augmentation.connectors->list(one_edge_augmentation(H, avail=avail, weight=weight))
A:networkx.algorithms.connectivity.edge_augmentation.TR->networkx.dfs_tree(C, root)
A:networkx.algorithms.connectivity.edge_augmentation.D->networkx.reverse(TR).copy()
A:networkx.algorithms.connectivity.edge_augmentation.lca_gen->networkx.tree_all_pairs_lowest_common_ancestor(TR, root=root, pairs=meta_to_wuv.keys())
A:networkx.algorithms.connectivity.edge_augmentation.A->networkx.minimum_spanning_arborescence(rooted)
A:networkx.algorithms.connectivity.edge_augmentation.bridge_connectors->set()
A:networkx.algorithms.connectivity.edge_augmentation.data->networkx.reverse(TR).copy().get_edge_data(mu, mv)
A:networkx.algorithms.connectivity.edge_augmentation.rooted->networkx.reverse(TR).copy().copy()
A:networkx.algorithms.connectivity.edge_augmentation.remaining->set(G.nodes())
A:networkx.algorithms.connectivity.edge_augmentation.group->set(group)
A:networkx.algorithms.connectivity.edge_augmentation.done->is_k_edge_connected(H, k)
A:networkx.algorithms.connectivity.edge_augmentation.avail_wduv->sorted(zip(avail_w, tiebreaker, avail_uv))
networkx.algorithms.connectivity._compat_shuffle(rng,input)
networkx.algorithms.connectivity._lightest_meta_edges(mapping,avail_uv,avail_w)
networkx.algorithms.connectivity._minimum_rooted_branching(D,root)
networkx.algorithms.connectivity._ordered(u,v)
networkx.algorithms.connectivity._unpack_available_edges(avail,weight=None,G=None)
networkx.algorithms.connectivity.bridge_augmentation(G,avail=None,weight=None)
networkx.algorithms.connectivity.collapse(G,grouped_nodes)
networkx.algorithms.connectivity.complement_edges(G)
networkx.algorithms.connectivity.edge_augmentation._compat_shuffle(rng,input)
networkx.algorithms.connectivity.edge_augmentation._lightest_meta_edges(mapping,avail_uv,avail_w)
networkx.algorithms.connectivity.edge_augmentation._minimum_rooted_branching(D,root)
networkx.algorithms.connectivity.edge_augmentation._ordered(u,v)
networkx.algorithms.connectivity.edge_augmentation._unpack_available_edges(avail,weight=None,G=None)
networkx.algorithms.connectivity.edge_augmentation.bridge_augmentation(G,avail=None,weight=None)
networkx.algorithms.connectivity.edge_augmentation.collapse(G,grouped_nodes)
networkx.algorithms.connectivity.edge_augmentation.complement_edges(G)
networkx.algorithms.connectivity.edge_augmentation.greedy_k_edge_augmentation(G,k,avail=None,weight=None,seed=None)
networkx.algorithms.connectivity.edge_augmentation.is_k_edge_connected(G,k)
networkx.algorithms.connectivity.edge_augmentation.is_locally_k_edge_connected(G,s,t,k)
networkx.algorithms.connectivity.edge_augmentation.k_edge_augmentation(G,k,avail=None,weight=None,partial=False)
networkx.algorithms.connectivity.edge_augmentation.one_edge_augmentation(G,avail=None,weight=None,partial=False)
networkx.algorithms.connectivity.edge_augmentation.partial_k_edge_augmentation(G,k,avail,weight=None)
networkx.algorithms.connectivity.edge_augmentation.unconstrained_bridge_augmentation(G)
networkx.algorithms.connectivity.edge_augmentation.unconstrained_one_edge_augmentation(G)
networkx.algorithms.connectivity.edge_augmentation.weighted_bridge_augmentation(G,avail,weight=None)
networkx.algorithms.connectivity.edge_augmentation.weighted_one_edge_augmentation(G,avail,weight=None,partial=False)
networkx.algorithms.connectivity.greedy_k_edge_augmentation(G,k,avail=None,weight=None,seed=None)
networkx.algorithms.connectivity.is_locally_k_edge_connected(G,s,t,k)
networkx.algorithms.connectivity.one_edge_augmentation(G,avail=None,weight=None,partial=False)
networkx.algorithms.connectivity.partial_k_edge_augmentation(G,k,avail,weight=None)
networkx.algorithms.connectivity.unconstrained_bridge_augmentation(G)
networkx.algorithms.connectivity.unconstrained_one_edge_augmentation(G)
networkx.algorithms.connectivity.weighted_bridge_augmentation(G,avail,weight=None)
networkx.algorithms.connectivity.weighted_one_edge_augmentation(G,avail,weight=None,partial=False)
networkx.algorithms.is_k_edge_connected(G,k)
networkx.algorithms.k_edge_augmentation(G,k,avail=None,weight=None,partial=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/utils.py----------------------------------------
A:networkx.algorithms.connectivity.utils.directed->G.is_directed()
A:networkx.algorithms.connectivity.utils.H->networkx.DiGraph()
networkx.algorithms.connectivity.build_auxiliary_edge_connectivity(G)
networkx.algorithms.connectivity.build_auxiliary_node_connectivity(G)
networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity(G)
networkx.algorithms.connectivity.utils.build_auxiliary_node_connectivity(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/stoerwagner.py----------------------------------------
A:networkx.algorithms.connectivity.stoerwagner.n->len(G)
A:networkx.algorithms.connectivity.stoerwagner.G->networkx.Graph(islice(contractions, best_phase))
A:networkx.algorithms.connectivity.stoerwagner.cut_value->float('inf')
A:networkx.algorithms.connectivity.stoerwagner.nodes->set(G)
A:networkx.algorithms.connectivity.stoerwagner.u->arbitrary_element(G)
A:networkx.algorithms.connectivity.stoerwagner.h->heap()
A:networkx.algorithms.connectivity.stoerwagner.(v, w)->heap().min()
A:networkx.algorithms.connectivity.stoerwagner.reachable->set(nx.single_source_shortest_path_length(G, v))
networkx.algorithms.connectivity.stoerwagner.stoer_wagner(G,weight='weight',heap=BinaryHeap)
networkx.algorithms.stoer_wagner(G,weight='weight',heap=BinaryHeap)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/disjoint_paths.py----------------------------------------
A:networkx.algorithms.connectivity.disjoint_paths.H->build_auxiliary_node_connectivity(G)
A:networkx.algorithms.connectivity.disjoint_paths.possible->min(H.out_degree(f'{mapping[s]}B'), H.in_degree(f'{mapping[t]}A'))
A:networkx.algorithms.connectivity.disjoint_paths.cutoff->min(cutoff, possible)
A:networkx.algorithms.connectivity.disjoint_paths.kwargs->dict(flow_func=flow_func, residual=residual, auxiliary=H, cutoff=cutoff)
A:networkx.algorithms.connectivity.disjoint_paths.R->flow_func(H, s, t, **kwargs)
A:networkx.algorithms.connectivity.disjoint_paths.(u, _)->flow_dict[u].popitem()
A:networkx.algorithms.connectivity.disjoint_paths.mapping->build_auxiliary_node_connectivity(G).graph.get('mapping', None)
A:networkx.algorithms.connectivity.disjoint_paths.paths_edges->edge_disjoint_paths(H, f'{mapping[s]}B', f'{mapping[t]}A', **kwargs)
A:networkx.algorithms.connectivity.disjoint_paths.seen->set()
networkx.algorithms.connectivity._unique_everseen(iterable)
networkx.algorithms.connectivity.disjoint_paths._unique_everseen(iterable)
networkx.algorithms.connectivity.disjoint_paths.edge_disjoint_paths(G,s,t,flow_func=None,cutoff=None,auxiliary=None,residual=None)
networkx.algorithms.connectivity.disjoint_paths.node_disjoint_paths(G,s,t,flow_func=None,cutoff=None,auxiliary=None,residual=None)
networkx.algorithms.edge_disjoint_paths(G,s,t,flow_func=None,cutoff=None,auxiliary=None,residual=None)
networkx.algorithms.node_disjoint_paths(G,s,t,flow_func=None,cutoff=None,auxiliary=None,residual=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/edge_kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.edge_kcomponents.aux_graph->EdgeComponentAuxGraph.construct(G)
A:networkx.algorithms.connectivity.edge_kcomponents.H->G.copy()
A:networkx.algorithms.connectivity.edge_kcomponents.sink->arbitrary_element(avail - {source})
A:networkx.algorithms.connectivity.edge_kcomponents.(value, (S, T))->networkx.minimum_cut(H, source, sink)
A:networkx.algorithms.connectivity.edge_kcomponents.(value_, (T_, S_))->networkx.minimum_cut(H, sink, source)
A:networkx.algorithms.connectivity.edge_kcomponents.A->networkx.Graph()
A:networkx.algorithms.connectivity.edge_kcomponents.source->arbitrary_element(H.nodes())
A:networkx.algorithms.connectivity.edge_kcomponents.avail->set(H.nodes())
A:networkx.algorithms.connectivity.edge_kcomponents.self->EdgeComponentAuxGraph()
A:networkx.algorithms.connectivity.edge_kcomponents.aux_weights->networkx.get_edge_attributes(A, 'weight')
A:networkx.algorithms.connectivity.edge_kcomponents.R->networkx.Graph()
A:networkx.algorithms.connectivity.edge_kcomponents.C->G.copy().subgraph(cc)
A:networkx.algorithms.connectivity.edge_kcomponents.seen->set()
A:networkx.algorithms.connectivity.edge_kcomponents.singletons->set(_low_degree_nodes(H, k, nbunch))
A:networkx.algorithms.connectivity.edge_kcomponents.nbunch->set(it.chain.from_iterable(map(H.neighbors, singletons)))
A:networkx.algorithms.connectivity.edge_kcomponents.find_ccs->partial(_high_degree_components, k=k)
A:networkx.algorithms.connectivity.edge_kcomponents.G1->R0.pop()
A:networkx.algorithms.connectivity.edge_kcomponents.cut_edges->networkx.minimum_edge_cut(G1)
A:networkx.algorithms.connectivity.edge_kcomponents.cut_value->len(cut_edges)
networkx.algorithms.connectivity.edge_EdgeComponentAuxGraph
networkx.algorithms.connectivity.edge_EdgeComponentAuxGraph.construct(EdgeComponentAuxGraph,G)
networkx.algorithms.connectivity.edge_EdgeComponentAuxGraph.k_edge_components(self,k)
networkx.algorithms.connectivity.edge_EdgeComponentAuxGraph.k_edge_subgraphs(self,k)
networkx.algorithms.connectivity.edge__high_degree_components(G,k)
networkx.algorithms.connectivity.edge__k_edge_subgraphs_nodes(G,k)
networkx.algorithms.connectivity.edge__low_degree_nodes(G,k,nbunch=None)
networkx.algorithms.connectivity.edge_bridge_components(G)
networkx.algorithms.connectivity.edge_general_k_edge_subgraphs(G,k)
networkx.algorithms.connectivity.edge_k_edge_components(G,k)
networkx.algorithms.connectivity.edge_k_edge_subgraphs(G,k)
networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph
networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.construct(EdgeComponentAuxGraph,G)
networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_components(self,k)
networkx.algorithms.connectivity.edge_kcomponents.EdgeComponentAuxGraph.k_edge_subgraphs(self,k)
networkx.algorithms.connectivity.edge_kcomponents._high_degree_components(G,k)
networkx.algorithms.connectivity.edge_kcomponents._k_edge_subgraphs_nodes(G,k)
networkx.algorithms.connectivity.edge_kcomponents._low_degree_nodes(G,k,nbunch=None)
networkx.algorithms.connectivity.edge_kcomponents.bridge_components(G)
networkx.algorithms.connectivity.edge_kcomponents.general_k_edge_subgraphs(G,k)
networkx.algorithms.connectivity.edge_kcomponents.k_edge_components(G,k)
networkx.algorithms.connectivity.edge_kcomponents.k_edge_subgraphs(G,k)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/kcutsets.py----------------------------------------
A:networkx.algorithms.connectivity.kcutsets.H->networkx.restricted_view(G, cut, [])
A:networkx.algorithms.connectivity.kcutsets.original_H_pred->copy.copy(H._pred)
A:networkx.algorithms.connectivity.kcutsets.R->flow_func(H, f'{mapping[x]}B', f'{mapping[v]}A', **kwargs)
A:networkx.algorithms.connectivity.kcutsets.kwargs->dict(capacity='capacity', residual=R)
A:networkx.algorithms.connectivity.kcutsets.k->networkx.node_connectivity(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcutsets.R_closure->networkx.transitive_closure(R)
A:networkx.algorithms.connectivity.kcutsets.L->networkx.condensation(R)
A:networkx.algorithms.connectivity.kcutsets.inv_cmap->defaultdict(list)
A:networkx.algorithms.connectivity.kcutsets.S->set()
A:networkx.algorithms.connectivity.kcutsets.S_ancestors->set()
A:networkx.algorithms.connectivity.kcutsets.cutset->set()
networkx.algorithms.all_node_cuts(G,k=None,flow_func=None)
networkx.algorithms.connectivity._is_separating_set(G,cut)
networkx.algorithms.connectivity.kcutsets._is_separating_set(G,cut)
networkx.algorithms.connectivity.kcutsets.all_node_cuts(G,k=None,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/connectivity.py----------------------------------------
A:networkx.algorithms.connectivity.connectivity.H->build_auxiliary_edge_connectivity(G)
A:networkx.algorithms.connectivity.connectivity.mapping->build_auxiliary_edge_connectivity(G).graph.get('mapping', None)
A:networkx.algorithms.connectivity.connectivity.kwargs->dict(flow_func=flow_func, auxiliary=H, residual=R)
A:networkx.algorithms.connectivity.connectivity.R->build_residual_network(H, 'capacity')
A:networkx.algorithms.connectivity.connectivity.(v, K)->min(G.degree(), key=itemgetter(1))
A:networkx.algorithms.connectivity.connectivity.K->local_node_connectivity(G, u, v, **kwargs)
A:networkx.algorithms.connectivity.connectivity.nbunch->set(nbunch)
A:networkx.algorithms.connectivity.connectivity.directed->G.is_directed()
A:networkx.algorithms.connectivity.connectivity.L->min(L, local_edge_connectivity(G, v, w, **kwargs))
A:networkx.algorithms.connectivity.connectivity.nodes->list(G)
A:networkx.algorithms.connectivity.connectivity.n->len(nodes)
A:networkx.algorithms.connectivity.connectivity.D->networkx.dominating_set(G, start_with=node)
A:networkx.algorithms.connectivity.connectivity.v->networkx.dominating_set(G, start_with=node).pop()
networkx.algorithms.all_pairs_node_connectivity(G,nbunch=None,flow_func=None)
networkx.algorithms.average_node_connectivity(G,flow_func=None)
networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity(G,nbunch=None,flow_func=None)
networkx.algorithms.connectivity.connectivity.average_node_connectivity(G,flow_func=None)
networkx.algorithms.connectivity.connectivity.edge_connectivity(G,s=None,t=None,flow_func=None,cutoff=None)
networkx.algorithms.connectivity.connectivity.local_edge_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.connectivity.connectivity.local_node_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.connectivity.connectivity.node_connectivity(G,s=None,t=None,flow_func=None)
networkx.algorithms.edge_connectivity(G,s=None,t=None,flow_func=None,cutoff=None)
networkx.algorithms.local_edge_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.local_node_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.node_connectivity(G,s=None,t=None,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/cuts.py----------------------------------------
A:networkx.algorithms.connectivity.cuts.H->build_auxiliary_edge_connectivity(G)
A:networkx.algorithms.connectivity.cuts.kwargs->dict(flow_func=flow_func, residual=R, auxiliary=H)
A:networkx.algorithms.connectivity.cuts.(cut_value, partition)->networkx.minimum_cut(H, s, t, **kwargs)
A:networkx.algorithms.connectivity.cuts.cutset->set()
A:networkx.algorithms.connectivity.cuts.mapping->build_auxiliary_edge_connectivity(G).graph.get('mapping', None)
A:networkx.algorithms.connectivity.cuts.edge_cut->minimum_st_edge_cut(H, f'{mapping[s]}B', f'{mapping[t]}A', **kwargs)
A:networkx.algorithms.connectivity.cuts.R->build_residual_network(H, 'capacity')
A:networkx.algorithms.connectivity.cuts.v->networkx.dominating_set(G, start_with=node).pop()
A:networkx.algorithms.connectivity.cuts.min_cut->set(G.edges(node))
A:networkx.algorithms.connectivity.cuts.this_cut->minimum_st_edge_cut(H, v, w, **kwargs)
A:networkx.algorithms.connectivity.cuts.node->min(G, key=G.degree)
A:networkx.algorithms.connectivity.cuts.nodes->list(G)
A:networkx.algorithms.connectivity.cuts.n->len(nodes)
A:networkx.algorithms.connectivity.cuts.D->networkx.dominating_set(G, start_with=node)
networkx.algorithms.connectivity.cuts.minimum_edge_cut(G,s=None,t=None,flow_func=None)
networkx.algorithms.connectivity.cuts.minimum_node_cut(G,s=None,t=None,flow_func=None)
networkx.algorithms.connectivity.cuts.minimum_st_edge_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.algorithms.connectivity.cuts.minimum_st_node_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.algorithms.connectivity.minimum_st_edge_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.algorithms.connectivity.minimum_st_node_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.algorithms.minimum_edge_cut(G,s=None,t=None,flow_func=None)
networkx.algorithms.minimum_node_cut(G,s=None,t=None,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_disjoint_paths.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.num_of_edges->sum((len(e) for e in paths_edges))
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.num_unique_edges->len(set.union(*[set(es) for es in paths_edges]))
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.num_of_nodes->len([n for path in paths for n in path if n not in st])
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.num_unique_nodes->len({n for path in paths for n in path if n not in st})
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.kwargs->dict(flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.edge_paths->list(nx.edge_disjoint_paths(G, 'A', 'Z', **kwargs))
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.node_paths->list(nx.node_disjoint_paths(G, 'A', 'Z', **kwargs))
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.edge_dpaths->list(nx.edge_disjoint_paths(G, 0, 6, **kwargs))
A:networkx.algorithms.connectivity.tests.test_disjoint_paths.node_dpaths->list(nx.node_disjoint_paths(G, 0, 6, **kwargs))
networkx.algorithms.connectivity.tests.test_are_edge_disjoint_paths(G,paths)
networkx.algorithms.connectivity.tests.test_are_node_disjoint_paths(G,paths)
networkx.algorithms.connectivity.tests.test_disjoint_paths.are_edge_disjoint_paths(G,paths)
networkx.algorithms.connectivity.tests.test_disjoint_paths.are_node_disjoint_paths(G,paths)
networkx.algorithms.connectivity.tests.test_disjoint_paths.is_path(G,path)
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_cutoff_disjoint_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_florentine_families()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_graph_from_pr_2053()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_icosahedral_disjoint_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_edges()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_isolated_nodes()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_karate()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_edge_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_source_node_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_edge_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_missing_target_node_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_edges()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_connected_nodes()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_edges()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_not_weakly_connected_nodes()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_octahedral_disjoint_paths()
networkx.algorithms.connectivity.tests.test_disjoint_paths.test_petersen_disjoint_paths()
networkx.algorithms.connectivity.tests.test_is_path(G,path)
networkx.algorithms.connectivity.tests.test_test_cutoff_disjoint_paths()
networkx.algorithms.connectivity.tests.test_test_florentine_families()
networkx.algorithms.connectivity.tests.test_test_graph_from_pr_2053()
networkx.algorithms.connectivity.tests.test_test_icosahedral_disjoint_paths()
networkx.algorithms.connectivity.tests.test_test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_test_isolated_edges()
networkx.algorithms.connectivity.tests.test_test_isolated_nodes()
networkx.algorithms.connectivity.tests.test_test_karate()
networkx.algorithms.connectivity.tests.test_test_missing_source_edge_paths()
networkx.algorithms.connectivity.tests.test_test_missing_source_node_paths()
networkx.algorithms.connectivity.tests.test_test_missing_target_edge_paths()
networkx.algorithms.connectivity.tests.test_test_missing_target_node_paths()
networkx.algorithms.connectivity.tests.test_test_not_connected_edges()
networkx.algorithms.connectivity.tests.test_test_not_connected_nodes()
networkx.algorithms.connectivity.tests.test_test_not_weakly_connected_edges()
networkx.algorithms.connectivity.tests.test_test_not_weakly_connected_nodes()
networkx.algorithms.connectivity.tests.test_test_octahedral_disjoint_paths()
networkx.algorithms.connectivity.tests.test_test_petersen_disjoint_paths()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_kcomponents.G->networkx.davis_southern_women_graph()
A:networkx.algorithms.connectivity.tests.test_kcomponents.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.connectivity.tests.test_kcomponents.P->networkx.petersen_graph()
A:networkx.algorithms.connectivity.tests.test_kcomponents.K->networkx.node_connectivity(C)
A:networkx.algorithms.connectivity.tests.test_kcomponents.C->networkx.davis_southern_women_graph().subgraph(component)
A:networkx.algorithms.connectivity.tests.test_kcomponents.result->networkx.k_components(G)
A:networkx.algorithms.connectivity.tests.test_kcomponents.deg_seq->networkx.random_powerlaw_tree_sequence(100, tries=5, seed=72)
A:networkx.algorithms.connectivity.tests.test_kcomponents.k_components->networkx.k_components(G)
A:networkx.algorithms.connectivity.tests.test_kcomponents.k_num->build_k_number_dict(k_components)
networkx.algorithms.connectivity.tests.test__check_connectivity(G,k_components)
networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity(G,k_components)
networkx.algorithms.connectivity.tests.test_kcomponents.test_configuration()
networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women()
networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women_detail_3_and_4()
networkx.algorithms.connectivity.tests.test_kcomponents.test_directed()
networkx.algorithms.connectivity.tests.test_kcomponents.test_karate()
networkx.algorithms.connectivity.tests.test_kcomponents.test_karate_component_number()
networkx.algorithms.connectivity.tests.test_kcomponents.test_random_gnp()
networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode()
networkx.algorithms.connectivity.tests.test_kcomponents.test_shell()
networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_test_configuration()
networkx.algorithms.connectivity.tests.test_test_davis_southern_women()
networkx.algorithms.connectivity.tests.test_test_davis_southern_women_detail_3_and_4()
networkx.algorithms.connectivity.tests.test_test_directed()
networkx.algorithms.connectivity.tests.test_test_karate()
networkx.algorithms.connectivity.tests.test_test_karate_component_number()
networkx.algorithms.connectivity.tests.test_test_random_gnp()
networkx.algorithms.connectivity.tests.test_test_set_consolidation_rosettacode()
networkx.algorithms.connectivity.tests.test_test_shell()
networkx.algorithms.connectivity.tests.test_test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_kcutsets.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_kcutsets.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_kcutsets.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.connectivity.tests.test_kcutsets.P->networkx.petersen_graph()
A:networkx.algorithms.connectivity.tests.test_kcutsets.K->networkx.karate_club_graph()
A:networkx.algorithms.connectivity.tests.test_kcutsets.Gc->networkx.complete_graph(5).subgraph(cc)
A:networkx.algorithms.connectivity.tests.test_kcutsets.node_conn->networkx.node_connectivity(G)
A:networkx.algorithms.connectivity.tests.test_kcutsets.all_cuts->networkx.all_node_cuts(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_kcutsets.deg_seq->networkx.random_powerlaw_tree_sequence(100, tries=5, seed=72)
A:networkx.algorithms.connectivity.tests.test_kcutsets.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_kcutsets.articulation_points->list(({a} for a in nx.articulation_points(G)))
A:networkx.algorithms.connectivity.tests.test_kcutsets.cuts->list(nx.all_node_cuts(G))
A:networkx.algorithms.connectivity.tests.test_kcutsets.max_degree_node->max(G, key=G.degree)
A:networkx.algorithms.connectivity.tests.test_kcutsets.bcc->max(list(nx.biconnected_components(K)), key=len)
networkx.algorithms.connectivity.tests.test__check_separating_sets(G)
networkx.algorithms.connectivity.tests.test__generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_graph_example_1()
networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets(G)
networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1()
networkx.algorithms.connectivity.tests.test_kcutsets.test_alternative_flow_functions()
networkx.algorithms.connectivity.tests.test_kcutsets.test_articulation_points()
networkx.algorithms.connectivity.tests.test_kcutsets.test_complete_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_configuration()
networkx.algorithms.connectivity.tests.test_kcutsets.test_cycle_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_disconnected_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_example_1()
networkx.algorithms.connectivity.tests.test_kcutsets.test_grid_2d_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set()
networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set_complete_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_karate()
networkx.algorithms.connectivity.tests.test_kcutsets.test_non_repeated_cuts()
networkx.algorithms.connectivity.tests.test_kcutsets.test_random_gnp()
networkx.algorithms.connectivity.tests.test_kcutsets.test_shell()
networkx.algorithms.connectivity.tests.test_kcutsets.test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_test_alternative_flow_functions()
networkx.algorithms.connectivity.tests.test_test_articulation_points()
networkx.algorithms.connectivity.tests.test_test_complete_graph()
networkx.algorithms.connectivity.tests.test_test_configuration()
networkx.algorithms.connectivity.tests.test_test_cycle_graph()
networkx.algorithms.connectivity.tests.test_test_disconnected_graph()
networkx.algorithms.connectivity.tests.test_test_example_1()
networkx.algorithms.connectivity.tests.test_test_grid_2d_graph()
networkx.algorithms.connectivity.tests.test_test_is_separating_set()
networkx.algorithms.connectivity.tests.test_test_is_separating_set_complete_graph()
networkx.algorithms.connectivity.tests.test_test_karate()
networkx.algorithms.connectivity.tests.test_test_non_repeated_cuts()
networkx.algorithms.connectivity.tests.test_test_random_gnp()
networkx.algorithms.connectivity.tests.test_test_shell()
networkx.algorithms.connectivity.tests.test_test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_stoer_wagner.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.partition->tuple(map(set, partition))
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.(cut_value, partition)->networkx.stoer_wagner(G, weight, heap=nx.utils.BinaryHeap)
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.G->networkx.MultiDiGraph()
networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition(G,cut_value,partition,weight)
networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner(G,answer,weight='weight')
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_exceptions()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph1()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph2()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph3()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_weight_name()
networkx.algorithms.tests.test_stoer_wagner._check_partition(G,cut_value,partition,weight)
networkx.algorithms.tests.test_stoer_wagner._test_stoer_wagner(G,answer,weight='weight')
networkx.algorithms.tests.test_stoer_wagner.test_exceptions()
networkx.algorithms.tests.test_stoer_wagner.test_graph1()
networkx.algorithms.tests.test_stoer_wagner.test_graph2()
networkx.algorithms.tests.test_stoer_wagner.test_graph3()
networkx.algorithms.tests.test_stoer_wagner.test_weight_name()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_edge_augmentation.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.G->networkx.gnp_random_graph(30, 0.005, seed=0)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.rng->random.Random(0)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.avail_uv->list(set(complement_edges(G)) - impossible)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.aug_edges->set(_augment_and_check(G, avail=avail, k=2)[0])
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.deg_seq->networkx.random_powerlaw_tree_sequence(20, seed=seed, tries=5000)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.unique_aug->list(map(tuple, map(sorted, aug_edges)))
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.orig_k->networkx.edge_connectivity(G)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.avail_dict->dict(zip(*_unpack_available_edges(avail, weight=weight)))
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.generator->networkx.k_edge_augmentation(G, k=k, weight=weight, avail=avail)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.n_nodes->networkx.gnp_random_graph(30, 0.005, seed=0).number_of_nodes()
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.G_aug_all->networkx.gnp_random_graph(30, 0.005, seed=0).copy()
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.max_aug_k->networkx.edge_connectivity(G_aug_all)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.partial_edges->list(nx.k_edge_augmentation(G, k=k, weight=weight, partial=True, avail=avail))
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.info['n_partial_edges']->len(partial_edges)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.H->networkx.gnp_random_graph(30, 0.005, seed=0).copy()
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.partial_conn->networkx.edge_connectivity(H)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.full_conn->networkx.edge_connectivity(H)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.num_edges->len(aug_edges)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.total_weight->sum((avail_dict[e] for e in aug_edges))
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.G_aug->networkx.gnp_random_graph(30, 0.005, seed=0).copy()
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.aug_k->networkx.edge_connectivity(G_aug)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.max_k->min(4, max_aug_k)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.(aug_edges1, info1)->_augment_and_check(G, k=k, verbose=verbose, orig_k=orig_k)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.(aug_edges2, info2)->_augment_and_check(G, k=k, avail=avail_uniform, verbose=verbose, orig_k=orig_k, max_aug_k=G.number_of_nodes() - 1)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.(aug_edges3, info3)->_augment_and_check(G, k=k, avail=avail, weight=weight, verbose=verbose, max_aug_k=max_aug_k, orig_k=orig_k)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.bridge_ccs->list(nx.connectivity.bridge_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.C->collapse(G, bridge_ccs)
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.p->len([n for (n, d) in C.degree() if d == 1])
A:networkx.algorithms.connectivity.tests.test_edge_augmentation.q->len([n for (n, d) in C.degree() if d == 0])
networkx.algorithms.connectivity.tests.test__assert_solution_properties(G,aug_edges,avail_dict=None)
networkx.algorithms.connectivity.tests.test__augment_and_check(G,k,avail=None,weight=None,verbose=False,orig_k=None,max_aug_k=None)
networkx.algorithms.connectivity.tests.test__check_augmentations(G,avail=None,max_k=None,weight=None,verbose=False)
networkx.algorithms.connectivity.tests.test__check_unconstrained_bridge_property(G,info1)
networkx.algorithms.connectivity.tests.test_edge_augmentation._assert_solution_properties(G,aug_edges,avail_dict=None)
networkx.algorithms.connectivity.tests.test_edge_augmentation._augment_and_check(G,k,avail=None,weight=None,verbose=False,orig_k=None,max_aug_k=None)
networkx.algorithms.connectivity.tests.test_edge_augmentation._check_augmentations(G,avail=None,max_k=None,weight=None,verbose=False)
networkx.algorithms.connectivity.tests.test_edge_augmentation._check_unconstrained_bridge_property(G,info1)
networkx.algorithms.connectivity.tests.test_edge_augmentation.tarjan_bridge_graph()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_barbell()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_bridge()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_clique_and_node()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_cliques()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_configuration()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_edgeless_graph()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_gnp_augmentation()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_invalid_k()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_k_edge_connected_exceptions()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_is_locally_k_edge_connected_exceptions()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_karate()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_null_graph()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_point_graph()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_shell()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_star()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_tarjan()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_unfeasible()
networkx.algorithms.connectivity.tests.test_edge_augmentation.test_weight_key()
networkx.algorithms.connectivity.tests.test_tarjan_bridge_graph()
networkx.algorithms.connectivity.tests.test_test_barbell()
networkx.algorithms.connectivity.tests.test_test_bridge()
networkx.algorithms.connectivity.tests.test_test_clique_and_node()
networkx.algorithms.connectivity.tests.test_test_cliques()
networkx.algorithms.connectivity.tests.test_test_configuration()
networkx.algorithms.connectivity.tests.test_test_edgeless_graph()
networkx.algorithms.connectivity.tests.test_test_gnp_augmentation()
networkx.algorithms.connectivity.tests.test_test_invalid_k()
networkx.algorithms.connectivity.tests.test_test_is_k_edge_connected()
networkx.algorithms.connectivity.tests.test_test_is_k_edge_connected_exceptions()
networkx.algorithms.connectivity.tests.test_test_is_locally_k_edge_connected()
networkx.algorithms.connectivity.tests.test_test_is_locally_k_edge_connected_exceptions()
networkx.algorithms.connectivity.tests.test_test_karate()
networkx.algorithms.connectivity.tests.test_test_null_graph()
networkx.algorithms.connectivity.tests.test_test_point_graph()
networkx.algorithms.connectivity.tests.test_test_shell()
networkx.algorithms.connectivity.tests.test_test_star()
networkx.algorithms.connectivity.tests.test_test_tarjan()
networkx.algorithms.connectivity.tests.test_test_unfeasible()
networkx.algorithms.connectivity.tests.test_test_weight_key()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_connectivity.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_connectivity.G1->networkx.path_graph(3)
A:networkx.algorithms.connectivity.tests.test_connectivity.G2->networkx.path_graph(3)
A:networkx.algorithms.connectivity.tests.test_connectivity.G3->networkx.Graph()
A:networkx.algorithms.connectivity.tests.test_connectivity.kwargs->dict(flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_connectivity.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_connectivity.D->networkx.cycle_graph(10).to_directed()
A:networkx.algorithms.connectivity.tests.test_connectivity.result->local_func(G, 0, 4, flow_func=flow_func, cutoff=cutoff)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.path->networkx.path_graph(7)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.directed_path->networkx.path_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.gnp->networkx.gnp_random_graph(30, 0.1, seed=42)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.directed_gnp->networkx.gnp_random_graph(30, 0.1, directed=True, seed=42)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.K20->networkx.complete_graph(20)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.K10->networkx.complete_graph(10)
A:networkx.algorithms.connectivity.tests.test_connectivity.cls.K5->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_connectivity.K_undir->networkx.all_pairs_node_connectivity(self.path)
A:networkx.algorithms.connectivity.tests.test_connectivity.K_dir->networkx.all_pairs_node_connectivity(self.directed_path)
A:networkx.algorithms.connectivity.tests.test_connectivity.K->networkx.all_pairs_node_connectivity(G)
A:networkx.algorithms.connectivity.tests.test_connectivity.C->networkx.all_pairs_node_connectivity(G, nbunch=iter(nbunch))
A:networkx.algorithms.connectivity.tests.test_connectivity.A[u][v]A[v][u]->networkx.node_connectivity(G, u, v)
A:networkx.algorithms.connectivity.tests.test_connectivity.A[u][v]->networkx.node_connectivity(G, u, v)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.setup_class(cls)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_combinations(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_complete(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_cycles(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_paths(self)
networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_connectivity.test_articulation_points()
networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity()
networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity_directed()
networkx.algorithms.connectivity.tests.test_connectivity.test_brandes_erlebach()
networkx.algorithms.connectivity.tests.test_connectivity.test_complete_graphs()
networkx.algorithms.connectivity.tests.test_connectivity.test_cutoff()
networkx.algorithms.connectivity.tests.test_connectivity.test_directed_edge_connectivity()
networkx.algorithms.connectivity.tests.test_connectivity.test_dodecahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_connectivity_flow_vs_stoer_wagner()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_empty_graphs()
networkx.algorithms.connectivity.tests.test_connectivity.test_icosahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_connectivity.test_missing_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_missing_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_not_connected()
networkx.algorithms.connectivity.tests.test_connectivity.test_not_weakly_connected()
networkx.algorithms.connectivity.tests.test_connectivity.test_octahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_petersen()
networkx.algorithms.connectivity.tests.test_connectivity.test_tutte()
networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_1()
networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_2()
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.setup_class(cls)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_combinations(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_complete(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_cycles(self)
networkx.algorithms.tests.test_TestAllPairsNodeConnectivity.test_paths(self)
networkx.algorithms.tests.test__generate_no_biconnected(max_attempts=50)
networkx.algorithms.tests.test_test_articulation_points()
networkx.algorithms.tests.test_test_average_connectivity()
networkx.algorithms.tests.test_test_average_connectivity_directed()
networkx.algorithms.tests.test_test_brandes_erlebach()
networkx.algorithms.tests.test_test_complete_graphs()
networkx.algorithms.tests.test_test_cutoff()
networkx.algorithms.tests.test_test_directed_edge_connectivity()
networkx.algorithms.tests.test_test_dodecahedral()
networkx.algorithms.tests.test_test_edge_connectivity_flow_vs_stoer_wagner()
networkx.algorithms.tests.test_test_edge_missing_source()
networkx.algorithms.tests.test_test_edge_missing_target()
networkx.algorithms.tests.test_test_empty_graphs()
networkx.algorithms.tests.test_test_icosahedral()
networkx.algorithms.tests.test_test_interface_only_source()
networkx.algorithms.tests.test_test_interface_only_target()
networkx.algorithms.tests.test_test_invalid_auxiliary()
networkx.algorithms.tests.test_test_missing_source()
networkx.algorithms.tests.test_test_missing_target()
networkx.algorithms.tests.test_test_not_connected()
networkx.algorithms.tests.test_test_not_weakly_connected()
networkx.algorithms.tests.test_test_octahedral()
networkx.algorithms.tests.test_test_petersen()
networkx.algorithms.tests.test_test_tutte()
networkx.algorithms.tests.test_test_white_harary_1()
networkx.algorithms.tests.test_test_white_harary_2()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_cuts.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_cuts.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_cuts.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_cuts.cut->networkx.minimum_node_cut(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.kwargs->dict(flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.edge_cut->networkx.minimum_edge_cut(G, **kwargs)
A:networkx.algorithms.connectivity.tests.test_cuts.H->networkx.complete_graph(5).copy()
A:networkx.algorithms.connectivity.tests.test_cuts.node_cut->networkx.minimum_node_cut(G, **kwargs)
A:networkx.algorithms.connectivity.tests.test_cuts.ccs->iter(nx.connected_components(G))
A:networkx.algorithms.connectivity.tests.test_cuts.start->arbitrary_element(next(ccs))
A:networkx.algorithms.connectivity.tests.test_cuts.cutset->networkx.minimum_edge_cut(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.D->networkx.DiGraph()
A:networkx.algorithms.connectivity.tests.test_cuts.nodelist->minimum_st_node_cut(G, 7, 11)
networkx.algorithms.connectivity.tests.test__generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_cuts.test_articulation_points()
networkx.algorithms.connectivity.tests.test_cuts.test_brandes_erlebach_book()
networkx.algorithms.connectivity.tests.test_cuts.test_edge_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_empty_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_icosahedral_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_source()
networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_target()
networkx.algorithms.connectivity.tests.test_cuts.test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_cuts.test_missing_source()
networkx.algorithms.connectivity.tests.test_cuts.test_missing_target()
networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_exception()
networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_not_connected()
networkx.algorithms.connectivity.tests.test_cuts.test_not_weakly_connected()
networkx.algorithms.connectivity.tests.test_cuts.test_octahedral_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_petersen_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_unbounded()
networkx.algorithms.connectivity.tests.test_cuts.test_white_harary_paper()
networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete()
networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete_directed()
networkx.algorithms.connectivity.tests.test_cuts.tests_minimum_st_node_cut()
networkx.algorithms.connectivity.tests.test_test_articulation_points()
networkx.algorithms.connectivity.tests.test_test_brandes_erlebach_book()
networkx.algorithms.connectivity.tests.test_test_edge_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_test_empty_graphs()
networkx.algorithms.connectivity.tests.test_test_icosahedral_cutset()
networkx.algorithms.connectivity.tests.test_test_interface_only_source()
networkx.algorithms.connectivity.tests.test_test_interface_only_target()
networkx.algorithms.connectivity.tests.test_test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_test_missing_source()
networkx.algorithms.connectivity.tests.test_test_missing_target()
networkx.algorithms.connectivity.tests.test_test_node_cutset_exception()
networkx.algorithms.connectivity.tests.test_test_node_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_test_not_connected()
networkx.algorithms.connectivity.tests.test_test_not_weakly_connected()
networkx.algorithms.connectivity.tests.test_test_octahedral_cutset()
networkx.algorithms.connectivity.tests.test_test_petersen_cutset()
networkx.algorithms.connectivity.tests.test_test_unbounded()
networkx.algorithms.connectivity.tests.test_test_white_harary_paper()
networkx.algorithms.connectivity.tests.test_tests_min_cut_complete()
networkx.algorithms.connectivity.tests.test_tests_min_cut_complete_directed()
networkx.algorithms.connectivity.tests.test_tests_minimum_st_node_cut()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/connectivity/tests/test_edge_kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.C->networkx.karate_club_graph().to_directed().subgraph(cc)
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.connectivity->networkx.edge_connectivity(C)
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.memo[edge]->networkx.edge_connectivity(G, *edge)
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.aux_graph->networkx.algorithms.connectivity.EdgeComponentAuxGraph.construct(G)
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.ccs_local->fset(aux_graph.k_edge_components(k))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.ccs_subgraph->fset(aux_graph.k_edge_subgraphs(k))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_sccs->fset(nx.strongly_connected_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_ccs->fset(nx.connected_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_bridge_ccs->fset(bridge_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_subgraph_ccs->fset([set(C.nodes()) for C in general_k_edge_subgraphs(G, k=k)])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.G->networkx.karate_club_graph().to_directed()
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.subgraphs->fset(nx.k_edge_subgraphs(G, k=3))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.deg_seq->networkx.random_powerlaw_tree_sequence(20, seed=seed, tries=5000)
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.bridge_ccs->fset(bridge_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.target_ccs->fset([{1, 2, 3, 4}, {5}, {8, 9, 10}, {11, 12, 13}, {20}, {21}, {22}, {23}, {24}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.components_1->fset(aux_graph.k_edge_subgraphs(k=1))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.target_1->fset([{a, b, c, d, e, f, g}, {h}, {i}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_1->fset(nx.strongly_connected_components(G))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.components_2->fset(aux_graph.k_edge_subgraphs(k=2))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.target_2->fset([{i}, {e}, {d}, {b, c, f, g}, {h}, {a}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.alt_2->fset(nx.k_edge_subgraphs(G, k=2))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.components_3->fset(aux_graph.k_edge_subgraphs(k=3))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.target_3->fset([{a}, {b}, {c}, {d}, {e}, {f}, {g}, {h}, {i}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.components_4->fset(aux_graph.k_edge_subgraphs(k=4))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.target_4->fset([{a}, {b}, {c}, {d}, {e}, {f}, {g}, {h}, {i}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.subgraph_ccs->fset(aux_graph.k_edge_subgraphs(3))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.subgraph_target->fset([{101}, {102}, {103}, {104}, {21, 22, 23, 24}, {11, 12, 13, 14}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.local_ccs->fset(nx.k_edge_components(G, k=3))
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.local_target->fset([{101}, {102}, {103}, {104}, {11, 12, 13, 14, 21, 22, 23, 24}])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.clique1->frozenset(paths[0])
A:networkx.algorithms.connectivity.tests.test_edge_kcomponents.clique2->frozenset(paths[1])
networkx.algorithms.connectivity.tests.test_edge__all_pairs_connectivity(G,cc,k,memo)
networkx.algorithms.connectivity.tests.test_edge__assert_local_cc_edge_connectivity(G,ccs_local,k,memo)
networkx.algorithms.connectivity.tests.test_edge__assert_subgraph_edge_connectivity(G,ccs_subgraph,k)
networkx.algorithms.connectivity.tests.test_edge__check_edge_connectivity(G)
networkx.algorithms.connectivity.tests.test_edge__memo_connectivity(G,u,v,memo)
networkx.algorithms.connectivity.tests.test_edge_fset(list_of_sets)
networkx.algorithms.connectivity.tests.test_edge_kcomponents._all_pairs_connectivity(G,cc,k,memo)
networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_local_cc_edge_connectivity(G,ccs_local,k,memo)
networkx.algorithms.connectivity.tests.test_edge_kcomponents._assert_subgraph_edge_connectivity(G,ccs_subgraph,k)
networkx.algorithms.connectivity.tests.test_edge_kcomponents._check_edge_connectivity(G)
networkx.algorithms.connectivity.tests.test_edge_kcomponents._memo_connectivity(G,u,v,memo)
networkx.algorithms.connectivity.tests.test_edge_kcomponents.fset(list_of_sets)
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_bridge_cc()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_configuration_directed()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_directed_aux_graph()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_empty_input()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_five_clique()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_four_clique()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_general_k_edge_subgraph_quick_return()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_karate_directed()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_local_subgraph_difference_directed()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_not_implemented()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_random_gnp_directed()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_shell_directed()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_tarjan_bridge()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_triangles()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_undirected_aux_graph()
networkx.algorithms.connectivity.tests.test_edge_kcomponents.test_zero_k_exception()
networkx.algorithms.connectivity.tests.test_edge_test_bridge_cc()
networkx.algorithms.connectivity.tests.test_edge_test_configuration()
networkx.algorithms.connectivity.tests.test_edge_test_configuration_directed()
networkx.algorithms.connectivity.tests.test_edge_test_directed_aux_graph()
networkx.algorithms.connectivity.tests.test_edge_test_empty_input()
networkx.algorithms.connectivity.tests.test_edge_test_five_clique()
networkx.algorithms.connectivity.tests.test_edge_test_four_clique()
networkx.algorithms.connectivity.tests.test_edge_test_general_k_edge_subgraph_quick_return()
networkx.algorithms.connectivity.tests.test_edge_test_karate()
networkx.algorithms.connectivity.tests.test_edge_test_karate_directed()
networkx.algorithms.connectivity.tests.test_edge_test_local_subgraph_difference()
networkx.algorithms.connectivity.tests.test_edge_test_local_subgraph_difference_directed()
networkx.algorithms.connectivity.tests.test_edge_test_not_implemented()
networkx.algorithms.connectivity.tests.test_edge_test_random_gnp()
networkx.algorithms.connectivity.tests.test_edge_test_random_gnp_directed()
networkx.algorithms.connectivity.tests.test_edge_test_shell()
networkx.algorithms.connectivity.tests.test_edge_test_shell_directed()
networkx.algorithms.connectivity.tests.test_edge_test_tarjan_bridge()
networkx.algorithms.connectivity.tests.test_edge_test_triangles()
networkx.algorithms.connectivity.tests.test_edge_test_undirected_aux_graph()
networkx.algorithms.connectivity.tests.test_edge_test_zero_k_exception()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/quality.py----------------------------------------
A:networkx.algorithms.community.quality.require_partition->argmap(_require_partition, (0, 1))
A:networkx.algorithms.community.quality.communities->list(communities)
A:networkx.algorithms.community.quality.directed->G.is_directed()
A:networkx.algorithms.community.quality.out_degree->dict(G.out_degree(weight=weight))
A:networkx.algorithms.community.quality.in_degree->dict(G.in_degree(weight=weight))
A:networkx.algorithms.community.quality.m->sum(out_degree.values())
A:networkx.algorithms.community.quality.out_degreein_degree->dict(G.degree(weight=weight))
A:networkx.algorithms.community.quality.deg_sum->sum(out_degree.values())
A:networkx.algorithms.community.quality.comm->set(community)
A:networkx.algorithms.community.quality.L_c->sum((wt for (u, v, wt) in G.edges(comm, data=weight, default=1) if v in comm))
A:networkx.algorithms.community.quality.out_degree_sum->sum((out_degree[u] for u in comm))
A:networkx.algorithms.community.quality.possible_inter_community_edges->sum((len(p1) * len(p2) for (p1, p2) in combinations(partition, 2)))
A:networkx.algorithms.community.quality.n->len(G)
networkx.algorithms.community.NotAPartition(self,G,collection)
networkx.algorithms.community._require_partition(G,partition)
networkx.algorithms.community.inter_community_edges(G,partition)
networkx.algorithms.community.inter_community_non_edges(G,partition)
networkx.algorithms.community.intra_community_edges(G,partition)
networkx.algorithms.community.modularity(G,communities,weight='weight',resolution=1)
networkx.algorithms.community.partition_quality(G,partition)
networkx.algorithms.community.quality.NotAPartition(self,G,collection)
networkx.algorithms.community.quality.NotAPartition.__init__(self,G,collection)
networkx.algorithms.community.quality._require_partition(G,partition)
networkx.algorithms.community.quality.inter_community_edges(G,partition)
networkx.algorithms.community.quality.inter_community_non_edges(G,partition)
networkx.algorithms.community.quality.intra_community_edges(G,partition)
networkx.algorithms.community.quality.modularity(G,communities,weight='weight',resolution=1)
networkx.algorithms.community.quality.partition_quality(G,partition)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/label_propagation.py----------------------------------------
A:networkx.algorithms.community.label_propagation.nodes->list(G)
A:networkx.algorithms.community.label_propagation.label_freq->defaultdict(float)
A:networkx.algorithms.community.label_propagation.max_freq->max(freqs.values())
A:networkx.algorithms.community.label_propagation.labels[node]->seed.choice(best_labels)
A:networkx.algorithms.community.label_propagation.coloring->dict()
A:networkx.algorithms.community.label_propagation.clusters->defaultdict(set)
A:networkx.algorithms.community.label_propagation.colors->networkx.coloring.greedy_color(G)
A:networkx.algorithms.community.label_propagation.freqs->Counter((labeling[q] for q in G[node]))
A:networkx.algorithms.community.label_propagation.high_labels->_most_frequent_labels(node, labeling, G)
A:networkx.algorithms.community.label_propagation.labeling[node]->max(high_labels)
networkx.algorithms.community._color_network(G)
networkx.algorithms.community._labeling_complete(labeling,G)
networkx.algorithms.community._most_frequent_labels(node,labeling,G)
networkx.algorithms.community._update_label(node,labeling,G)
networkx.algorithms.community.asyn_lpa_communities(G,weight=None,seed=None)
networkx.algorithms.community.label_propagation._color_network(G)
networkx.algorithms.community.label_propagation._labeling_complete(labeling,G)
networkx.algorithms.community.label_propagation._most_frequent_labels(node,labeling,G)
networkx.algorithms.community.label_propagation._update_label(node,labeling,G)
networkx.algorithms.community.label_propagation.asyn_lpa_communities(G,weight=None,seed=None)
networkx.algorithms.community.label_propagation.label_propagation_communities(G)
networkx.algorithms.community.label_propagation_communities(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/centrality.py----------------------------------------
A:networkx.algorithms.community.centrality.betweenness->networkx.edge_betweenness_centrality(G)
A:networkx.algorithms.community.centrality.g->G.copy().to_undirected()
A:networkx.algorithms.community.centrality.original_num_components->networkx.number_connected_components(G)
A:networkx.algorithms.community.centrality.edge->most_valuable_edge(G)
A:networkx.algorithms.community.centrality.new_components->tuple(nx.connected_components(G))
A:networkx.algorithms.community.centrality.num_new_components->len(new_components)
networkx.algorithms.community._without_most_central_edges(G,most_valuable_edge)
networkx.algorithms.community.centrality._without_most_central_edges(G,most_valuable_edge)
networkx.algorithms.community.centrality.girvan_newman(G,most_valuable_edge=None)
networkx.algorithms.community.girvan_newman(G,most_valuable_edge=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/kclique.py----------------------------------------
A:networkx.algorithms.community.kclique.cliques->networkx.find_cliques(G)
A:networkx.algorithms.community.kclique.membership_dict->defaultdict(list)
A:networkx.algorithms.community.kclique.perc_graph->networkx.Graph()
A:networkx.algorithms.community.kclique.adjacent_cliques->set()
networkx.algorithms.community._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.k_clique_communities(G,k,cliques=None)
networkx.algorithms.community.kclique._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.kclique.k_clique_communities(G,k,cliques=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/lukes.py----------------------------------------
A:networkx.algorithms.community.lukes.t_G->networkx.dfs_tree(G, root)
A:networkx.algorithms.community.lukes.root->choice(list(G.nodes))
A:networkx.algorithms.community.lukes.safe_G->deepcopy(G)
A:networkx.algorithms.community.lukes.all_n_attr->networkx.get_node_attributes(safe_G, node_weight).values()
A:networkx.algorithms.community.lukes.tleaves->set(_leaves(gr))
A:networkx.algorithms.community.lukes.ccx->_pivot(partition_1, x)
A:networkx.algorithms.community.lukes.cci->_pivot(partition_2, i)
A:networkx.algorithms.community.lukes.merged_xi->_pivot(partition_1, x).union(cci)
A:networkx.algorithms.community.lukes.cp1->list(filter(lambda x: x != ccx, partition_1))
A:networkx.algorithms.community.lukes.cp2->list(filter(lambda x: x != cci, partition_2))
A:networkx.algorithms.community.lukes.leaves->set(_leaves(t_G))
A:networkx.algorithms.community.lukes.t_G.nodes[lv][PKEY]->dict()
A:networkx.algorithms.community.lukes.t_G.nodes[inner][PKEY]->dict()
A:networkx.algorithms.community.lukes.x_node->_a_parent_of_leaves_only(t_G)
A:networkx.algorithms.community.lukes.bp_buffer->dict()
A:networkx.algorithms.community.lukes.x_descendants->networkx.descendants(t_G, x_node)
A:networkx.algorithms.community.lukes.(part, value)->_concatenate_or_merge(part1, part2, x_node, i_node, j)
networkx.algorithms.community._split_n_from(n,min_size_of_first_part)
networkx.algorithms.community.lukes._split_n_from(n,min_size_of_first_part)
networkx.algorithms.community.lukes.lukes_partitioning(G,max_size,node_weight=None,edge_weight=None)
networkx.algorithms.community.lukes_partitioning(G,max_size,node_weight=None,edge_weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/community_utils.py----------------------------------------
A:networkx.algorithms.community.community_utils.communities->list(communities)
networkx.algorithms.community.community_utils.is_partition(G,communities)
networkx.algorithms.community.is_partition(G,communities)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/modularity_max.py----------------------------------------
A:networkx.algorithms.community.modularity_max.directed->G.is_directed()
A:networkx.algorithms.community.modularity_max.N->G.number_of_nodes()
A:networkx.algorithms.community.modularity_max.m->G.size(weight)
A:networkx.algorithms.community.modularity_max.dq_dict->defaultdict(lambda : defaultdict(float))
A:networkx.algorithms.community.modularity_max.H->MappedQueue([dq_heap[n].heap[0] for n in G if len(dq_heap[n]) > 0])
A:networkx.algorithms.community.modularity_max.(negdq, u, v)->MappedQueue([dq_heap[n].heap[0] for n in G if len(dq_heap[n]) > 0]).pop()
A:networkx.algorithms.community.modularity_max.communities[v]->frozenset(communities[u] | communities[v])
A:networkx.algorithms.community.modularity_max.u_nbrs->set(dq_dict[u])
A:networkx.algorithms.community.modularity_max.v_nbrs->set(dq_dict[v])
A:networkx.algorithms.community.modularity_max.dq_heap[u]->MappedQueue()
A:networkx.algorithms.community.modularity_max.best_n->G.number_of_nodes()
A:networkx.algorithms.community.modularity_max.community_gen->_greedy_modularity_communities_generator(G, weight=weight, resolution=resolution)
A:networkx.algorithms.community.modularity_max.communities->list((frozenset([u]) for u in G.nodes()))
A:networkx.algorithms.community.modularity_max.dq->next(community_gen)
A:networkx.algorithms.community.modularity_max.new_modularity->modularity(G, communities, resolution=resolution, weight=weight)
A:networkx.algorithms.community.modularity_max.trial_communities->list(communities)
A:networkx.algorithms.community.modularity_max.trial_communities[i]->frozenset([])
A:networkx.algorithms.community.modularity_max.trial_modularity->modularity(G, trial_communities, resolution=resolution, weight=weight)
A:networkx.algorithms.community.modularity_max.communities[i]->frozenset([])
networkx.algorithms.community._greedy_modularity_communities_generator(G,weight=None,resolution=1)
networkx.algorithms.community.greedy_modularity_communities(G,weight=None,resolution=1,cutoff=1,best_n=None)
networkx.algorithms.community.modularity_max._greedy_modularity_communities_generator(G,weight=None,resolution=1)
networkx.algorithms.community.modularity_max.greedy_modularity_communities(G,weight=None,resolution=1,cutoff=1,best_n=None)
networkx.algorithms.community.modularity_max.naive_greedy_modularity_communities(G,resolution=1,weight=None)
networkx.algorithms.community.naive_greedy_modularity_communities(G,resolution=1,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/louvain.py----------------------------------------
A:networkx.algorithms.community.louvain.d->louvain_partitions(G, weight, resolution, threshold, seed)
A:networkx.algorithms.community.louvain.q->deque(d, maxlen=1)
A:networkx.algorithms.community.louvain.mod->modularity(G, partition, resolution=resolution, weight=weight)
A:networkx.algorithms.community.louvain.is_directed->G.is_directed()
A:networkx.algorithms.community.louvain.graph->_gen_graph(graph, inner_partition)
A:networkx.algorithms.community.louvain.m->_gen_graph(graph, inner_partition).size(weight='weight')
A:networkx.algorithms.community.louvain.(partition, inner_partition, improvement)->_one_level(graph, m, partition, resolution, is_directed, seed)
A:networkx.algorithms.community.louvain.new_mod->modularity(graph, inner_partition, resolution=resolution, weight='weight')
A:networkx.algorithms.community.louvain.in_degrees->dict(G.in_degree(weight='weight'))
A:networkx.algorithms.community.louvain.out_degrees->dict(G.out_degree(weight='weight'))
A:networkx.algorithms.community.louvain.nbrs[u]->defaultdict(float)
A:networkx.algorithms.community.louvain.degrees->dict(G.degree(weight='weight'))
A:networkx.algorithms.community.louvain.rand_nodes->list(G.nodes)
A:networkx.algorithms.community.louvain.weights2com->_neighbor_weights(nbrs[u], node2com)
A:networkx.algorithms.community.louvain.com->G.nodes[u].get('nodes', {u})
A:networkx.algorithms.community.louvain.partition->list(filter(len, partition))
A:networkx.algorithms.community.louvain.inner_partition->list(filter(len, inner_partition))
A:networkx.algorithms.community.louvain.weights->defaultdict(float)
A:networkx.algorithms.community.louvain.H->networkx.Graph()
A:networkx.algorithms.community.louvain.nodes->set()
networkx.algorithms.community._convert_multigraph(G,weight,is_directed)
networkx.algorithms.community._gen_graph(G,partition)
networkx.algorithms.community._neighbor_weights(nbrs,node2com)
networkx.algorithms.community._one_level(G,m,partition,resolution=1,is_directed=False,seed=None)
networkx.algorithms.community.louvain._convert_multigraph(G,weight,is_directed)
networkx.algorithms.community.louvain._gen_graph(G,partition)
networkx.algorithms.community.louvain._neighbor_weights(nbrs,node2com)
networkx.algorithms.community.louvain._one_level(G,m,partition,resolution=1,is_directed=False,seed=None)
networkx.algorithms.community.louvain.louvain_communities(G,weight='weight',resolution=1,threshold=1e-07,seed=None)
networkx.algorithms.community.louvain.louvain_partitions(G,weight='weight',resolution=1,threshold=1e-07,seed=None)
networkx.algorithms.community.louvain_communities(G,weight='weight',resolution=1,threshold=1e-07,seed=None)
networkx.algorithms.community.louvain_partitions(G,weight='weight',resolution=1,threshold=1e-07,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/kernighan_lin.py----------------------------------------
A:networkx.algorithms.community.kernighan_lin.cost_u->sum((w if side[v] else -w for (v, w) in edges_u))
A:networkx.algorithms.community.kernighan_lin.cost_y->costs_y.get(y)
A:networkx.algorithms.community.kernighan_lin.(u, cost_u)->costs0.pop()
A:networkx.algorithms.community.kernighan_lin.(v, cost_v)->costs1.pop()
A:networkx.algorithms.community.kernighan_lin.n->len(G)
A:networkx.algorithms.community.kernighan_lin.labels->list(G)
A:networkx.algorithms.community.kernighan_lin.costs->list(_kernighan_lin_sweep(edges, side))
A:networkx.algorithms.community.kernighan_lin.(min_cost, min_i, _)->min(costs)
networkx.algorithms.community._kernighan_lin_sweep(edges,side)
networkx.algorithms.community.kernighan_lin._kernighan_lin_sweep(edges,side)
networkx.algorithms.community.kernighan_lin.kernighan_lin_bisection(G,partition=None,max_iter=10,weight='weight',seed=None)
networkx.algorithms.community.kernighan_lin_bisection(G,partition=None,max_iter=10,weight='weight',seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/asyn_fluid.py----------------------------------------
A:networkx.algorithms.community.asyn_fluid.vertices->list(G)
A:networkx.algorithms.community.asyn_fluid.com_counter->Counter()
A:networkx.algorithms.community.asyn_fluid.max_freq->max(com_counter.values())
A:networkx.algorithms.community.asyn_fluid.new_com->seed.choice(best_communities)
networkx.algorithms.community.asyn_fluid.asyn_fluidc(G,k,max_iter=100,seed=None)
networkx.algorithms.community.asyn_fluidc(G,k,max_iter=100,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_asyn_fluid.py----------------------------------------
A:networkx.algorithms.community.tests.test_asyn_fluid.test->Graph()
A:networkx.algorithms.community.tests.test_asyn_fluid.communities->asyn_fluidc(test, 5, seed=9)
networkx.algorithms.community.tests.test_asyn_fluid.test_exceptions()
networkx.algorithms.community.tests.test_asyn_fluid.test_five_clique_ring()
networkx.algorithms.community.tests.test_asyn_fluid.test_single_node()
networkx.algorithms.community.tests.test_asyn_fluid.test_two_clique_communities()
networkx.algorithms.community.tests.test_asyn_fluid.test_two_nodes()
networkx.algorithms.community.tests.test_test_exceptions()
networkx.algorithms.community.tests.test_test_five_clique_ring()
networkx.algorithms.community.tests.test_test_single_node()
networkx.algorithms.community.tests.test_test_two_clique_communities()
networkx.algorithms.community.tests.test_test_two_nodes()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_centrality.py----------------------------------------
A:networkx.algorithms.community.tests.test_centrality.G->networkx.Graph()
A:networkx.algorithms.community.tests.test_centrality.communities->list(girvan_newman(G, heaviest))
networkx.algorithms.community.tests.test_TestGirvanNewman
networkx.algorithms.community.tests.test_TestGirvanNewman.test_directed(self)
networkx.algorithms.community.tests.test_TestGirvanNewman.test_most_valuable_edge(self)
networkx.algorithms.community.tests.test_TestGirvanNewman.test_no_edges(self)
networkx.algorithms.community.tests.test_TestGirvanNewman.test_selfloops(self)
networkx.algorithms.community.tests.test_TestGirvanNewman.test_undirected(self)
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_directed(self)
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_most_valuable_edge(self)
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_no_edges(self)
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_selfloops(self)
networkx.algorithms.community.tests.test_centrality.TestGirvanNewman.test_undirected(self)
networkx.algorithms.community.tests.test_centrality.set_of_sets(iterable)
networkx.algorithms.community.tests.test_centrality.validate_communities(result,expected)
networkx.algorithms.community.tests.test_centrality.validate_possible_communities(result,*expected)
networkx.algorithms.community.tests.test_set_of_sets(iterable)
networkx.algorithms.community.tests.test_validate_communities(result,expected)
networkx.algorithms.community.tests.test_validate_possible_communities(result,*expected)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_modularity_max.py----------------------------------------
A:networkx.algorithms.community.tests.test_modularity_max.G->networkx.barbell_graph(5, 3)
A:networkx.algorithms.community.tests.test_modularity_max.john_a->frozenset([8, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])
A:networkx.algorithms.community.tests.test_modularity_max.mr_hi->frozenset([0, 4, 5, 6, 10, 11, 16, 19])
A:networkx.algorithms.community.tests.test_modularity_max.overlap->frozenset([1, 2, 3, 7, 9, 12, 13, 17, 21])
networkx.algorithms.community.tests.test_modularity_max.test_best_n()
networkx.algorithms.community.tests.test_modularity_max.test_cutoff_parameter()
networkx.algorithms.community.tests.test_modularity_max.test_greed_modularity_communities_multidigraph()
networkx.algorithms.community.tests.test_modularity_max.test_greed_modularity_communities_multidigraph_weighted()
networkx.algorithms.community.tests.test_modularity_max.test_greedy_modularity_communities_components()
networkx.algorithms.community.tests.test_modularity_max.test_greedy_modularity_communities_directed()
networkx.algorithms.community.tests.test_modularity_max.test_greedy_modularity_communities_multigraph()
networkx.algorithms.community.tests.test_modularity_max.test_greedy_modularity_communities_multigraph_weighted()
networkx.algorithms.community.tests.test_modularity_max.test_greedy_modularity_communities_relabeled()
networkx.algorithms.community.tests.test_modularity_max.test_modularity_communities(func)
networkx.algorithms.community.tests.test_modularity_max.test_modularity_communities_categorical_labels(func)
networkx.algorithms.community.tests.test_modularity_max.test_modularity_communities_directed_weighted()
networkx.algorithms.community.tests.test_modularity_max.test_modularity_communities_floating_point()
networkx.algorithms.community.tests.test_modularity_max.test_modularity_communities_weighted(func)
networkx.algorithms.community.tests.test_modularity_max.test_resolution_parameter_impact()
networkx.algorithms.community.tests.test_test_best_n()
networkx.algorithms.community.tests.test_test_cutoff_parameter()
networkx.algorithms.community.tests.test_test_greed_modularity_communities_multidigraph()
networkx.algorithms.community.tests.test_test_greed_modularity_communities_multidigraph_weighted()
networkx.algorithms.community.tests.test_test_greedy_modularity_communities_components()
networkx.algorithms.community.tests.test_test_greedy_modularity_communities_directed()
networkx.algorithms.community.tests.test_test_greedy_modularity_communities_multigraph()
networkx.algorithms.community.tests.test_test_greedy_modularity_communities_multigraph_weighted()
networkx.algorithms.community.tests.test_test_greedy_modularity_communities_relabeled()
networkx.algorithms.community.tests.test_test_modularity_communities(func)
networkx.algorithms.community.tests.test_test_modularity_communities_categorical_labels(func)
networkx.algorithms.community.tests.test_test_modularity_communities_directed_weighted()
networkx.algorithms.community.tests.test_test_modularity_communities_floating_point()
networkx.algorithms.community.tests.test_test_modularity_communities_weighted(func)
networkx.algorithms.community.tests.test_test_resolution_parameter_impact()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_utils.py----------------------------------------
A:networkx.algorithms.community.tests.test_utils.G->networkx.empty_graph(3)
networkx.algorithms.community.tests.test_utils.test_is_partition()
networkx.algorithms.community.tests.test_utils.test_not_covering()
networkx.algorithms.community.tests.test_utils.test_not_disjoint()
networkx.algorithms.community.tests.test_utils.test_not_node()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_kclique.py----------------------------------------
A:networkx.algorithms.community.tests.test_kclique.G->networkx.Graph()
A:networkx.algorithms.community.tests.test_kclique.c->set(k_clique_communities(G, 5))
A:networkx.algorithms.community.tests.test_kclique.self.G->networkx.karate_club_graph()
A:networkx.algorithms.community.tests.test_kclique.communities->set(k_clique_communities(self.G, k))
A:networkx.algorithms.community.tests.test_kclique.expected->set()
networkx.algorithms.community.tests.test_TestZacharyKarateClub
networkx.algorithms.community.tests.test_TestZacharyKarateClub._check_communities(self,k,expected)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.setup_method(self)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.test_k2(self)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.test_k3(self)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.test_k4(self)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.test_k5(self)
networkx.algorithms.community.tests.test_TestZacharyKarateClub.test_k6(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub._check_communities(self,k,expected)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.setup_method(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k2(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k3(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k4(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k5(self)
networkx.algorithms.community.tests.test_kclique.TestZacharyKarateClub.test_k6(self)
networkx.algorithms.community.tests.test_kclique.test_bad_k()
networkx.algorithms.community.tests.test_kclique.test_isolated_K5()
networkx.algorithms.community.tests.test_kclique.test_overlapping_K5()
networkx.algorithms.community.tests.test_test_bad_k()
networkx.algorithms.community.tests.test_test_isolated_K5()
networkx.algorithms.community.tests.test_test_overlapping_K5()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_label_propagation.py----------------------------------------
A:networkx.algorithms.community.tests.test_label_propagation.test->networkx.Graph()
A:networkx.algorithms.community.tests.test_label_propagation.result->label_propagation_communities(test)
A:networkx.algorithms.community.tests.test_label_propagation.G->networkx.Graph(edges)
A:networkx.algorithms.community.tests.test_label_propagation.communities->asyn_lpa_communities(G, seed=1)
A:networkx.algorithms.community.tests.test_label_propagation.test1->networkx.karate_club_graph()
A:networkx.algorithms.community.tests.test_label_propagation.test2->networkx.caveman_graph(2, 10)
A:networkx.algorithms.community.tests.test_label_propagation.ground_truth->set()
A:networkx.algorithms.community.tests.test_label_propagation.edges->itertools.chain.from_iterable((combinations(c, 2) for c in ground_truth))
networkx.algorithms.community.tests.test_TestAsynLpaCommunities
networkx.algorithms.community.tests.test_TestAsynLpaCommunities._check_communities(self,G,expected)
networkx.algorithms.community.tests.test_TestAsynLpaCommunities.test_null_graph(self)
networkx.algorithms.community.tests.test_TestAsynLpaCommunities.test_seed_argument(self)
networkx.algorithms.community.tests.test_TestAsynLpaCommunities.test_several_communities(self)
networkx.algorithms.community.tests.test_TestAsynLpaCommunities.test_simple_communities(self)
networkx.algorithms.community.tests.test_TestAsynLpaCommunities.test_single_node(self)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities._check_communities(self,G,expected)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_null_graph(self)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_seed_argument(self)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_several_communities(self)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_simple_communities(self)
networkx.algorithms.community.tests.test_label_propagation.TestAsynLpaCommunities.test_single_node(self)
networkx.algorithms.community.tests.test_label_propagation.test_connected_communities()
networkx.algorithms.community.tests.test_label_propagation.test_directed_not_supported()
networkx.algorithms.community.tests.test_label_propagation.test_iterator_vs_iterable()
networkx.algorithms.community.tests.test_label_propagation.test_one_node()
networkx.algorithms.community.tests.test_label_propagation.test_termination()
networkx.algorithms.community.tests.test_label_propagation.test_unconnected_communities()
networkx.algorithms.community.tests.test_test_connected_communities()
networkx.algorithms.community.tests.test_test_directed_not_supported()
networkx.algorithms.community.tests.test_test_iterator_vs_iterable()
networkx.algorithms.community.tests.test_test_one_node()
networkx.algorithms.community.tests.test_test_termination()
networkx.algorithms.community.tests.test_test_unconnected_communities()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_lukes.py----------------------------------------
A:networkx.algorithms.community.tests.test_lukes.example_1->networkx.Graph()
A:networkx.algorithms.community.tests.test_lukes.example_2->networkx.Graph()
A:networkx.algorithms.community.tests.test_lukes.part->paper_2_case(ewt, drc)
A:networkx.algorithms.community.tests.test_lukes.not_a_tree->networkx.complete_graph(4)
A:networkx.algorithms.community.tests.test_lukes.ex_1_broken->networkx.DiGraph()
networkx.algorithms.community.tests.test_lukes.paper_1_case(float_edge_wt=False,explicit_node_wt=True,directed=False)
networkx.algorithms.community.tests.test_lukes.paper_2_case(explicit_edge_wt=True,directed=False)
networkx.algorithms.community.tests.test_lukes.test_mandatory_integrality()
networkx.algorithms.community.tests.test_lukes.test_mandatory_tree()
networkx.algorithms.community.tests.test_lukes.test_paper_1_case()
networkx.algorithms.community.tests.test_lukes.test_paper_2_case()
networkx.algorithms.community.tests.test_paper_1_case(float_edge_wt=False,explicit_node_wt=True,directed=False)
networkx.algorithms.community.tests.test_paper_2_case(explicit_edge_wt=True,directed=False)
networkx.algorithms.community.tests.test_test_mandatory_integrality()
networkx.algorithms.community.tests.test_test_mandatory_tree()
networkx.algorithms.community.tests.test_test_paper_1_case()
networkx.algorithms.community.tests.test_test_paper_2_case()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_quality.py----------------------------------------
A:networkx.algorithms.community.tests.test_quality.G->networkx.cycle_graph(4, create_using=nx.DiGraph())
A:networkx.algorithms.community.tests.test_quality.nodes->list(G.nodes)
A:networkx.algorithms.community.tests.test_quality.result->modularity(G, C, resolution=gamma)
networkx.algorithms.community.tests.test_TestCoverage
networkx.algorithms.community.tests.test_TestCoverage.test_bad_partition(self)
networkx.algorithms.community.tests.test_TestCoverage.test_good_partition(self)
networkx.algorithms.community.tests.test_TestPerformance
networkx.algorithms.community.tests.test_TestPerformance.test_bad_partition(self)
networkx.algorithms.community.tests.test_TestPerformance.test_good_partition(self)
networkx.algorithms.community.tests.test_quality.TestCoverage
networkx.algorithms.community.tests.test_quality.TestCoverage.test_bad_partition(self)
networkx.algorithms.community.tests.test_quality.TestCoverage.test_good_partition(self)
networkx.algorithms.community.tests.test_quality.TestPerformance
networkx.algorithms.community.tests.test_quality.TestPerformance.test_bad_partition(self)
networkx.algorithms.community.tests.test_quality.TestPerformance.test_good_partition(self)
networkx.algorithms.community.tests.test_quality.test_inter_community_edges_with_digraphs()
networkx.algorithms.community.tests.test_quality.test_modularity()
networkx.algorithms.community.tests.test_quality.test_modularity_resolution()
networkx.algorithms.community.tests.test_test_inter_community_edges_with_digraphs()
networkx.algorithms.community.tests.test_test_modularity()
networkx.algorithms.community.tests.test_test_modularity_resolution()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_kernighan_lin.py----------------------------------------
A:networkx.algorithms.community.tests.test_kernighan_lin.G->networkx.Graph([('A', 'B', {'weight': 1}), ('A', 'C', {'weight': 2}), ('A', 'D', {'weight': 3}), ('A', 'E', {'weight': 2}), ('A', 'F', {'weight': 4}), ('B', 'C', {'weight': 1}), ('B', 'D', {'weight': 4}), ('B', 'E', {'weight': 2}), ('B', 'F', {'weight': 1}), ('C', 'D', {'weight': 3}), ('C', 'E', {'weight': 2}), ('C', 'F', {'weight': 1}), ('D', 'E', {'weight': 4}), ('D', 'F', {'weight': 3}), ('E', 'F', {'weight': 2})])
A:networkx.algorithms.community.tests.test_kernighan_lin.C->kernighan_lin_bisection(G, partition, max_iter=1)
A:networkx.algorithms.community.tests.test_kernighan_lin.M->networkx.MultiGraph(G.edges())
A:networkx.algorithms.community.tests.test_kernighan_lin.mapping->dict(zip(M, labels))
A:networkx.algorithms.community.tests.test_kernighan_lin.(A, B)->kernighan_lin_bisection(nx.relabel_nodes(M, mapping), seed=0)
networkx.algorithms.community.tests.test_assert_partition_equal(x,y)
networkx.algorithms.community.tests.test_kernighan_lin.assert_partition_equal(x,y)
networkx.algorithms.community.tests.test_kernighan_lin.test_max_iter_argument()
networkx.algorithms.community.tests.test_kernighan_lin.test_multigraph()
networkx.algorithms.community.tests.test_kernighan_lin.test_non_disjoint_partition()
networkx.algorithms.community.tests.test_kernighan_lin.test_partition()
networkx.algorithms.community.tests.test_kernighan_lin.test_partition_argument()
networkx.algorithms.community.tests.test_kernighan_lin.test_partition_argument_non_integer_nodes()
networkx.algorithms.community.tests.test_kernighan_lin.test_seed_argument()
networkx.algorithms.community.tests.test_kernighan_lin.test_too_many_blocks()
networkx.algorithms.community.tests.test_test_max_iter_argument()
networkx.algorithms.community.tests.test_test_multigraph()
networkx.algorithms.community.tests.test_test_non_disjoint_partition()
networkx.algorithms.community.tests.test_test_partition()
networkx.algorithms.community.tests.test_test_partition_argument()
networkx.algorithms.community.tests.test_test_partition_argument_non_integer_nodes()
networkx.algorithms.community.tests.test_test_seed_argument()
networkx.algorithms.community.tests.test_test_too_many_blocks()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/community/tests/test_louvain.py----------------------------------------
A:networkx.algorithms.community.tests.test_louvain.G->networkx.LFR_benchmark_graph(250, 3, 1.5, 0.009, average_degree=5, min_community=20, seed=10)
A:networkx.algorithms.community.tests.test_louvain.mod->modularity(G, partition)
A:networkx.algorithms.community.tests.test_louvain.partition->louvain_communities(G)
A:networkx.algorithms.community.tests.test_louvain.H->networkx.MultiGraph(G)
A:networkx.algorithms.community.tests.test_louvain.partition2->louvain_communities(G, seed=2)
A:networkx.algorithms.community.tests.test_louvain.parts_iter->louvain_partitions(G, seed=42)
A:networkx.algorithms.community.tests.test_louvain.first_part->next(parts_iter)
A:networkx.algorithms.community.tests.test_louvain.second_part->next(parts_iter)
A:networkx.algorithms.community.tests.test_louvain.G_partition->louvain_communities(G, seed=123, weight=None)
A:networkx.algorithms.community.tests.test_louvain.H_partition->louvain_communities(H, seed=123, weight=None)
A:networkx.algorithms.community.tests.test_louvain.partition1->louvain_communities(G, threshold=0.3, seed=2)
A:networkx.algorithms.community.tests.test_louvain.partition3->louvain_communities(G, resolution=2, seed=12)
A:networkx.algorithms.community.tests.test_louvain.I->networkx.MultiGraph(G)
A:networkx.algorithms.community.tests.test_louvain.J->networkx.MultiDiGraph(H)
A:networkx.algorithms.community.tests.test_louvain.partition4->louvain_communities(J)
A:networkx.algorithms.community.tests.test_louvain.mod1->modularity(G, partition1)
A:networkx.algorithms.community.tests.test_louvain.mod2->modularity(G, partition2)
networkx.algorithms.community.tests.test_louvain.test_directed_partition()
networkx.algorithms.community.tests.test_louvain.test_karate_club_partition()
networkx.algorithms.community.tests.test_louvain.test_modularity_increase()
networkx.algorithms.community.tests.test_louvain.test_multigraph()
networkx.algorithms.community.tests.test_louvain.test_none_weight_param()
networkx.algorithms.community.tests.test_louvain.test_partition_iterator()
networkx.algorithms.community.tests.test_louvain.test_quality()
networkx.algorithms.community.tests.test_louvain.test_resolution()
networkx.algorithms.community.tests.test_louvain.test_threshold()
networkx.algorithms.community.tests.test_louvain.test_valid_partition()
networkx.algorithms.community.tests.test_test_directed_partition()
networkx.algorithms.community.tests.test_test_karate_club_partition()
networkx.algorithms.community.tests.test_test_modularity_increase()
networkx.algorithms.community.tests.test_test_multigraph()
networkx.algorithms.community.tests.test_test_none_weight_param()
networkx.algorithms.community.tests.test_test_partition_iterator()
networkx.algorithms.community.tests.test_test_quality()
networkx.algorithms.community.tests.test_test_resolution()
networkx.algorithms.community.tests.test_test_threshold()
networkx.algorithms.community.tests.test_test_valid_partition()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/minors/contraction.py----------------------------------------
A:networkx.algorithms.minors.contraction.x->arbitrary_element(block)
A:networkx.algorithms.minors.contraction.partition->equivalence_classes(G, partition)
A:networkx.algorithms.minors.contraction.partition_nodes->set().union(*partition)
A:networkx.algorithms.minors.contraction.G->G.subgraph(partition_nodes).subgraph(partition_nodes)
A:networkx.algorithms.minors.contraction.H->G.subgraph(partition_nodes).subgraph(partition_nodes).copy()
A:networkx.algorithms.minors.contraction.S->G.subgraph(partition_nodes).subgraph(partition_nodes).subgraph(b)
A:networkx.algorithms.minors.contraction.edges->chaini((((b, c, G.get_edge_data(u, v, default={})) for (u, v) in product(b, c) if v in G[u]) for (b, c) in block_pairs if edge_relation(b, c)))
A:networkx.algorithms.minors.contraction.edges_to_remap->list(edges_to_remap)
networkx.algorithms.contracted_edge(G,edge,self_loops=True,copy=True)
networkx.algorithms.contracted_nodes(G,u,v,self_loops=True,copy=True)
networkx.algorithms.contraction._quotient_graph(G,partition,edge_relation=None,node_data=None,edge_data=None,relabel=False,create_using=None)
networkx.algorithms.equivalence_classes(iterable,relation)
networkx.algorithms.minors.contraction._quotient_graph(G,partition,edge_relation=None,node_data=None,edge_data=None,relabel=False,create_using=None)
networkx.algorithms.minors.contraction.contracted_edge(G,edge,self_loops=True,copy=True)
networkx.algorithms.minors.contraction.contracted_nodes(G,u,v,self_loops=True,copy=True)
networkx.algorithms.minors.contraction.equivalence_classes(iterable,relation)
networkx.algorithms.minors.contraction.quotient_graph(G,partition,edge_relation=None,node_data=None,edge_data=None,relabel=False,create_using=None)
networkx.algorithms.quotient_graph(G,partition,edge_relation=None,node_data=None,edge_data=None,relabel=False,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/minors/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/minors/tests/test_contraction.py----------------------------------------
A:networkx.algorithms.minors.tests.test_contraction.G->networkx.cycle_graph(4)
A:networkx.algorithms.minors.tests.test_contraction.expected->networkx.complete_graph(3)
A:networkx.algorithms.minors.tests.test_contraction.actual->networkx.contracted_edge(G, (0, 1, 0))
A:networkx.algorithms.minors.tests.test_contraction.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.minors.tests.test_contraction.C->networkx.condensation(G, scc)
A:networkx.algorithms.minors.tests.test_contraction.Q->networkx.quotient_graph(G, same_component)
A:networkx.algorithms.minors.tests.test_contraction.M->networkx.quotient_graph(G, partition, create_using=nx.MultiGraph(), relabel=True)
A:networkx.algorithms.minors.tests.test_contraction.H->networkx.contracted_nodes(H, 'src1', 'src2')
networkx.algorithms.minors.tests.test_contraction.TestContraction
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_contract_selfloop_graph(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_create_multigraph(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_directed_node_contraction(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_directed_node_contraction_no_copy(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_edge_attributes(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_multigraph_edge_contraction(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_multigraph_keys(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_node_attributes(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_nonexistent_edge(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_undirected_edge_contraction(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_undirected_node_contraction(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_undirected_node_contraction_no_copy(self)
networkx.algorithms.minors.tests.test_contraction.TestContraction.test_without_self_loops(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_barbell(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_barbell_plus(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_blockmodel(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_condensation_as_quotient(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_directed_multigraph_path(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_directed_path(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_multigraph_blockmodel(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_multigraph_path(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_overlapping_blocks(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_path(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_lists(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_sets(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_tuples(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_quotient_graph_complete_bipartite(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_quotient_graph_complete_multipartite(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_quotient_graph_edge_relation(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_quotient_graph_incomplete_partition(self)
networkx.algorithms.minors.tests.test_contraction.TestQuotient.test_weighted_path(self)
networkx.algorithms.tests.test_contraction.TestContraction
networkx.algorithms.tests.test_contraction.TestContraction.test_contract_selfloop_graph(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_create_multigraph(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_directed_node_contraction(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_directed_node_contraction_no_copy(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_edge_attributes(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_multigraph_edge_contraction(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_multigraph_keys(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_node_attributes(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_nonexistent_edge(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_undirected_edge_contraction(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_undirected_node_contraction(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_undirected_node_contraction_no_copy(self)
networkx.algorithms.tests.test_contraction.TestContraction.test_without_self_loops(self)
networkx.algorithms.tests.test_contraction.TestQuotient
networkx.algorithms.tests.test_contraction.TestQuotient.test_barbell(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_barbell_plus(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_blockmodel(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_condensation_as_quotient(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_directed_multigraph_path(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_directed_path(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_multigraph_blockmodel(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_multigraph_path(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_overlapping_blocks(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_path(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_lists(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_sets(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_path__partition_provided_as_dict_of_tuples(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_quotient_graph_complete_multipartite(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_quotient_graph_edge_relation(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_quotient_graph_incomplete_partition(self)
networkx.algorithms.tests.test_contraction.TestQuotient.test_weighted_path(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/edgedfs.py----------------------------------------
A:networkx.algorithms.traversal.edgedfs.nodes->list(G.nbunch_iter(source))
A:networkx.algorithms.traversal.edgedfs.directed->G.is_directed()
A:networkx.algorithms.traversal.edgedfs.visited_edges->set()
A:networkx.algorithms.traversal.edgedfs.visited_nodes->set()
A:networkx.algorithms.traversal.edgedfs.edges[current_node]->edges_from(current_node)
A:networkx.algorithms.traversal.edgedfs.edge->next(edges[current_node])
A:networkx.algorithms.traversal.edgedfs.edgeid->edge_id(edge)
networkx.algorithms.traversal.edge_dfs(G,source=None,orientation=None)
networkx.algorithms.traversal.edgedfs.edge_dfs(G,source=None,orientation=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/edgebfs.py----------------------------------------
A:networkx.algorithms.traversal.edgebfs.nodes->list(G.nbunch_iter(source))
A:networkx.algorithms.traversal.edgebfs.directed->G.is_directed()
A:networkx.algorithms.traversal.edgebfs.visited_edges->set()
A:networkx.algorithms.traversal.edgebfs.queue->deque([(n, edges_from(n)) for n in nodes])
A:networkx.algorithms.traversal.edgebfs.(parent, children_edges)->deque([(n, edges_from(n)) for n in nodes]).popleft()
A:networkx.algorithms.traversal.edgebfs.edgeid->edge_id(edge)
networkx.algorithms.traversal.edge_bfs(G,source=None,orientation=None)
networkx.algorithms.traversal.edgebfs.edge_bfs(G,source=None,orientation=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/beamsearch.py----------------------------------------
A:networkx.algorithms.traversal.beamsearch.width->len(G)
networkx.algorithms.traversal.beamsearch.bfs_beam_edges(G,source,value,width=None)
networkx.algorithms.traversal.bfs_beam_edges(G,source,value,width=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/depth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.depth_first_search.visited->set()
A:networkx.algorithms.traversal.depth_first_search.depth_limit->len(G)
A:networkx.algorithms.traversal.depth_first_search.child->next(children)
A:networkx.algorithms.traversal.depth_first_search.T->networkx.DiGraph()
A:networkx.algorithms.traversal.depth_first_search.d->defaultdict(list)
A:networkx.algorithms.traversal.depth_first_search.edges->networkx.dfs_labeled_edges(G, source=source, depth_limit=depth_limit)
networkx.algorithms.traversal.depth_first_search.dfs_edges(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_predecessors(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_successors(G,source=None,depth_limit=None)
networkx.algorithms.traversal.depth_first_search.dfs_tree(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_edges(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_labeled_edges(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_postorder_nodes(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_predecessors(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_preorder_nodes(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_successors(G,source=None,depth_limit=None)
networkx.algorithms.traversal.dfs_tree(G,source=None,depth_limit=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/breadth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.breadth_first_search.depth_limit->len(G)
A:networkx.algorithms.traversal.breadth_first_search.queue->deque([(source, depth_limit, neighbors(source))])
A:networkx.algorithms.traversal.breadth_first_search.child->next(children)
A:networkx.algorithms.traversal.breadth_first_search.T->networkx.DiGraph()
A:networkx.algorithms.traversal.breadth_first_search.edges_gen->bfs_edges(G, source, reverse=reverse, depth_limit=depth_limit, sort_neighbors=sort_neighbors)
A:networkx.algorithms.traversal.breadth_first_search.current_layer->list(sources)
A:networkx.algorithms.traversal.breadth_first_search.visited->set(sources)
A:networkx.algorithms.traversal.breadth_first_search.next_layer->list()
A:networkx.algorithms.traversal.breadth_first_search.bfs_generator->networkx.bfs_layers(G, source)
networkx.algorithms.traversal.bfs_edges(G,source,reverse=False,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.bfs_layers(G,sources)
networkx.algorithms.traversal.bfs_predecessors(G,source,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.bfs_successors(G,source,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.bfs_tree(G,source,reverse=False,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.breadth_first_search.bfs_edges(G,source,reverse=False,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.breadth_first_search.bfs_layers(G,sources)
networkx.algorithms.traversal.breadth_first_search.bfs_predecessors(G,source,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.breadth_first_search.bfs_successors(G,source,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.breadth_first_search.bfs_tree(G,source,reverse=False,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.breadth_first_search.descendants_at_distance(G,source,distance)
networkx.algorithms.traversal.breadth_first_search.generic_bfs_edges(G,source,neighbors=None,depth_limit=None,sort_neighbors=None)
networkx.algorithms.traversal.descendants_at_distance(G,source,distance)
networkx.algorithms.traversal.generic_bfs_edges(G,source,neighbors=None,depth_limit=None,sort_neighbors=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/test_beamsearch.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_beamsearch.G->networkx.cycle_graph(4)
A:networkx.algorithms.traversal.tests.test_beamsearch.edges->networkx.bfs_beam_edges(G, 0, identity, width=None)
networkx.algorithms.traversal.tests.test_TestBeamSearch
networkx.algorithms.traversal.tests.test_TestBeamSearch.test_narrow(self)
networkx.algorithms.traversal.tests.test_TestBeamSearch.test_wide(self)
networkx.algorithms.traversal.tests.test_TestBeamSearch.test_width_none(self)
networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch
networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_narrow(self)
networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_wide(self)
networkx.algorithms.traversal.tests.test_beamsearch.TestBeamSearch.test_width_none(self)
networkx.algorithms.traversal.tests.test_beamsearch.identity(x)
networkx.algorithms.traversal.tests.test_identity(x)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/test_bfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_bfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_bfs.T->networkx.bfs_tree(self.G, source=3, depth_limit=1)
A:networkx.algorithms.traversal.tests.test_bfs.edges->networkx.bfs_edges(self.G, source=9, depth_limit=4)
A:networkx.algorithms.traversal.tests.test_bfs.D->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_bfs.sort_desc->partial(sorted, reverse=True)
A:networkx.algorithms.traversal.tests.test_bfs.edges_asc->networkx.bfs_edges(D, source=0, sort_neighbors=sorted)
A:networkx.algorithms.traversal.tests.test_bfs.edges_desc->networkx.bfs_edges(D, source=0, sort_neighbors=sort_desc)
networkx.algorithms.traversal.tests.test_bfs.TestBFS
networkx.algorithms.traversal.tests.test_bfs.TestBFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_reverse(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_sorting(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_layers(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_layers_missing_source(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree_isolates(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_descendants_at_distance(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_descendants_at_distance_missing_source(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.setup_class(cls)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_edges(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_layers(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_predecessor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_successor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_bfs_tree(self)
networkx.algorithms.traversal.tests.test_bfs.TestBreadthLimitedSearch.test_limited_descendants_at_distance(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/test_dfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_dfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.D->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.exp_nodes->sorted(self.G.nodes())
A:networkx.algorithms.traversal.tests.test_dfs.T->networkx.dfs_tree(self.G, source=3, depth_limit=1)
A:networkx.algorithms.traversal.tests.test_dfs.edges->list(nx.dfs_labeled_edges(self.G, source=6, depth_limit=2))
A:networkx.algorithms.traversal.tests.test_dfs.result->networkx.dfs_successors(self.D, source=7, depth_limit=2)
networkx.algorithms.traversal.tests.test_dfs.TestDFS
networkx.algorithms.traversal.tests.test_dfs.TestDFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree_isolates(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.setup_class(cls)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_disconnected_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_labeled_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_postorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_predecessor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_preorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_successor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDepthLimitedSearch.test_dls_tree(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/test_edgebfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_edgebfs.G->networkx.MultiDiGraph(self.edges)
A:networkx.algorithms.traversal.tests.test_edgebfs.edges->list(nx.edge_bfs(G))
A:networkx.algorithms.traversal.tests.test_edgebfs.x->list(nx.edge_bfs(G, self.nodes, orientation='ignore'))
A:networkx.algorithms.traversal.tests.test_edgebfs.edge_iterator->networkx.edge_bfs(G, self.nodes, orientation='hello')
networkx.algorithms.traversal.tests.test_TestEdgeBFS
networkx.algorithms.traversal.tests.test_TestEdgeBFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph2(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_ignore(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_ignore2(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_orientation_invalid(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_orientation_none(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_orientation_original(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_rev(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_digraph_rev2(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_empty(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_graph(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_graph_single_source(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_multidigraph(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_multidigraph_ignore(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_multidigraph_rev(self)
networkx.algorithms.traversal.tests.test_TestEdgeBFS.test_multigraph(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph2(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_ignore2(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_invalid(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_none(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_orientation_original(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_digraph_rev2(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_empty(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_graph_single_source(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multidigraph_rev(self)
networkx.algorithms.traversal.tests.test_edgebfs.TestEdgeBFS.test_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/traversal/tests/test_edgedfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_edgedfs.G->networkx.MultiDiGraph(self.edges)
A:networkx.algorithms.traversal.tests.test_edgedfs.edges->list(edge_dfs(G))
A:networkx.algorithms.traversal.tests.test_edgedfs.x->list(edge_dfs(G, self.nodes, orientation='ignore'))
A:networkx.algorithms.traversal.tests.test_edgedfs.edge_iterator->edge_dfs(G, self.nodes, orientation='hello')
networkx.algorithms.traversal.tests.test_TestEdgeDFS
networkx.algorithms.traversal.tests.test_TestEdgeDFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph2(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_ignore(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_ignore2(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_orientation_invalid(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_orientation_none(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_orientation_original(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_rev(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_digraph_rev2(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_empty(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_graph(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_multidigraph(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_multidigraph_ignore(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_multidigraph_rev(self)
networkx.algorithms.traversal.tests.test_TestEdgeDFS.test_multigraph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.setup_class(cls)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_invalid(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_none(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_orientation_original(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_empty(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_graph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_rev(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/isomorph.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorph.d1->sorted((d for (n, d) in G1.degree()))
A:networkx.algorithms.isomorphism.isomorph.t1->networkx.triangles(G1)
A:networkx.algorithms.isomorphism.isomorph.c1->networkx.number_of_cliques(G1)
A:networkx.algorithms.isomorphism.isomorph.d2->sorted((d for (n, d) in G2.degree()))
A:networkx.algorithms.isomorphism.isomorph.t2->networkx.triangles(G2)
A:networkx.algorithms.isomorphism.isomorph.c2->networkx.number_of_cliques(G2)
A:networkx.algorithms.isomorphism.isomorph.gm->GM(G1, G2, node_match=node_match, edge_match=edge_match)
networkx.algorithms.could_be_isomorphic(G1,G2)
networkx.algorithms.fast_could_be_isomorphic(G1,G2)
networkx.algorithms.faster_could_be_isomorphic(G1,G2)
networkx.algorithms.is_isomorphic(G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.isomorph.could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.is_isomorphic(G1,G2,node_match=None,edge_match=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorphvf2.self.G1_nodes->set(G1.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.G2_nodes->set(G2.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.old_recursion_limit->sys.getrecursionlimit()
A:networkx.algorithms.isomorphism.isomorphvf2.expected_max_recursion_level->len(self.G2)
A:networkx.algorithms.isomorphism.isomorphvf2.node_2->min(G2_nodes - set(self.core_2), key=min_key)
A:networkx.algorithms.isomorphism.isomorphvf2.other_node->min(G2_nodes - set(self.core_2), key=min_key)
A:networkx.algorithms.isomorphism.isomorphvf2.self.state->DiGMState(self)
A:networkx.algorithms.isomorphism.isomorphvf2.self.mapping->self.core_1.copy()
A:networkx.algorithms.isomorphism.isomorphvf2.d1->sorted((d for (n, d) in self.G1.degree()))
A:networkx.algorithms.isomorphism.isomorphvf2.d2->sorted((d for (n, d) in self.G2.degree()))
A:networkx.algorithms.isomorphism.isomorphvf2.x->next(self.subgraph_monomorphisms_iter())
A:networkx.algorithms.isomorphism.isomorphvf2.newstate->self.state.__class__(self, G1_node, G2_node)
A:networkx.algorithms.isomorphism.isomorphvf2.self.depth->len(GM.core_1)
A:networkx.algorithms.isomorphism.isomorphvf2.new_nodes->set()
networkx.algorithms.isomorphism.isomorphvf2.DiGMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_monomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_monomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility(self,G1_node,G2_node)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tree_isomorphism.py----------------------------------------
A:networkx.algorithms.isomorphism.tree_isomorphism.dT->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tree_isomorphism.(dT, namemap, newroot1, newroot2)->root_trees(t1, root1, t2, root2)
A:networkx.algorithms.isomorphism.tree_isomorphism.levels->assign_levels(dT, 0)
A:networkx.algorithms.isomorphism.tree_isomorphism.h->max(levels.values())
A:networkx.algorithms.isomorphism.tree_isomorphism.L->group_by_levels(levels)
A:networkx.algorithms.isomorphism.tree_isomorphism.s->sorted(((label[u], u) for u in dT.successors(v)))
A:networkx.algorithms.isomorphism.tree_isomorphism.(ordered_labels[v], ordered_children[v])->list(zip(*s))
A:networkx.algorithms.isomorphism.tree_isomorphism.forlabel->sorted(((ordered_labels[v], v) for v in L[i]))
A:networkx.algorithms.isomorphism.tree_isomorphism.degree_sequence1->sorted((d for (n, d) in t1.degree()))
A:networkx.algorithms.isomorphism.tree_isomorphism.degree_sequence2->sorted((d for (n, d) in t2.degree()))
A:networkx.algorithms.isomorphism.tree_isomorphism.center1->networkx.center(t1)
A:networkx.algorithms.isomorphism.tree_isomorphism.center2->networkx.center(t2)
A:networkx.algorithms.isomorphism.tree_isomorphism.attemps->rooted_tree_isomorphism(t1, center1[0], t2, center2[0])
networkx.algorithms.isomorphism.assign_levels(G,root)
networkx.algorithms.isomorphism.generate_isomorphism(v,w,M,ordered_children)
networkx.algorithms.isomorphism.group_by_levels(levels)
networkx.algorithms.isomorphism.root_trees(t1,root1,t2,root2)
networkx.algorithms.isomorphism.rooted_tree_isomorphism(t1,root1,t2,root2)
networkx.algorithms.isomorphism.tree_isomorphism(t1,t2)
networkx.algorithms.isomorphism.tree_isomorphism.assign_levels(G,root)
networkx.algorithms.isomorphism.tree_isomorphism.generate_isomorphism(v,w,M,ordered_children)
networkx.algorithms.isomorphism.tree_isomorphism.group_by_levels(levels)
networkx.algorithms.isomorphism.tree_isomorphism.root_trees(t1,root1,t2,root2)
networkx.algorithms.isomorphism.tree_isomorphism.rooted_tree_isomorphism(t1,root1,t2,root2)
networkx.algorithms.isomorphism.tree_isomorphism.tree_isomorphism(t1,t2)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/matchhelpers.py----------------------------------------
A:networkx.algorithms.isomorphism.matchhelpers.attrs->list(zip(attr, default))
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match->copyfunc(categorical_node_match, 'categorical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.values1->sorted((data.get(attr, default) for data in datasets1.values()))
A:networkx.algorithms.isomorphism.matchhelpers.x->tuple((data2.get(attr, d) for (attr, d) in attrs))
A:networkx.algorithms.isomorphism.matchhelpers.values2->sorted((data.get(attr, default) for data in datasets2.values()))
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match.__doc__->categorical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.tmpdoc->tmpdoc.replace('numerical_edge_match', 'numerical_multiedge_match').replace('numerical_edge_match', 'numerical_multiedge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match->copyfunc(numerical_node_match, 'numerical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match.__doc__->numerical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match->copyfunc(generic_node_match, 'generic_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match.__doc__->generic_doc.replace('node', 'edge')
networkx.algorithms.isomorphism.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.categorical_multiedge_match(attr,default)
networkx.algorithms.isomorphism.categorical_node_match(attr,default)
networkx.algorithms.isomorphism.copyfunc(f,name=None)
networkx.algorithms.isomorphism.generic_multiedge_match(attr,default,op)
networkx.algorithms.isomorphism.generic_node_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.categorical_node_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.copyfunc(f,name=None)
networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.generic_node_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2pp._GraphParameters->collections.namedtuple('_GraphParameters', ['G1', 'G2', 'G1_labels', 'G2_labels', 'nodes_of_G1Labels', 'nodes_of_G2Labels', 'G2_nodes_of_degree'])
A:networkx.algorithms.isomorphism.vf2pp._StateParameters->collections.namedtuple('_StateParameters', ['mapping', 'reverse_mapping', 'T1', 'T1_in', 'T1_tilde', 'T1_tilde_in', 'T2', 'T2_in', 'T2_tilde', 'T2_tilde_in'])
A:networkx.algorithms.isomorphism.vf2pp.mapping->next(vf2pp_all_isomorphisms(G1, G2, node_label, default_label))
A:networkx.algorithms.isomorphism.vf2pp.G1_degree->dict(G1.degree)
A:networkx.algorithms.isomorphism.vf2pp.G2_degree->dict(G2.degree)
A:networkx.algorithms.isomorphism.vf2pp.(graph_params, state_params)->_initialize_parameters(G1, G2, G2_degree, node_label, default_label)
A:networkx.algorithms.isomorphism.vf2pp.node_order->_matching_order(graph_params)
A:networkx.algorithms.isomorphism.vf2pp.candidates->iter(find_candidates(node_order[matching_node], graph_params, state_params, G1_degree))
A:networkx.algorithms.isomorphism.vf2pp.candidate->next(candidate_nodes)
A:networkx.algorithms.isomorphism.vf2pp.cp_mapping->next(vf2pp_all_isomorphisms(G1, G2, node_label, default_label)).copy()
A:networkx.algorithms.isomorphism.vf2pp.G1_labels->dict(G1.nodes(data=node_label, default=default_label))
A:networkx.algorithms.isomorphism.vf2pp.G2_labels->dict(G2.nodes(data=node_label, default=default_label))
A:networkx.algorithms.isomorphism.vf2pp.graph_params->_GraphParameters(G1, G2, G1_labels, G2_labels, nx.utils.groups(G1_labels), nx.utils.groups(G2_labels), nx.utils.groups(G2_degree))
A:networkx.algorithms.isomorphism.vf2pp.state_params->_StateParameters(dict(), dict(), T1, T1_in, T1_tilde, T1_tilde_in, T2, T2_in, T2_tilde, T2_tilde_in)
networkx.algorithms.isomorphism._initialize_parameters(G1,G2,G2_degree,node_label=None,default_label=-1)
networkx.algorithms.isomorphism._precheck_label_properties(graph_params)
networkx.algorithms.isomorphism.vf2pp._initialize_parameters(G1,G2,G2_degree,node_label=None,default_label=-1)
networkx.algorithms.isomorphism.vf2pp._precheck_label_properties(graph_params)
networkx.algorithms.isomorphism.vf2pp.vf2pp_all_isomorphisms(G1,G2,node_label=None,default_label=None)
networkx.algorithms.isomorphism.vf2pp.vf2pp_is_isomorphic(G1,G2,node_label=None,default_label=None)
networkx.algorithms.isomorphism.vf2pp.vf2pp_isomorphism(G1,G2,node_label=None,default_label=None)
networkx.algorithms.isomorphism.vf2pp_all_isomorphisms(G1,G2,node_label=None,default_label=None)
networkx.algorithms.isomorphism.vf2pp_is_isomorphic(G1,G2,node_label=None,default_label=None)
networkx.algorithms.isomorphism.vf2pp_isomorphism(G1,G2,node_label=None,default_label=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/temporalisomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.temporalisomorphvf2.pred_dates->self.get_pred_dates(Gx, Gx_node, core_x, pred)
A:networkx.algorithms.isomorphism.temporalisomorphvf2.succ_dates->self.get_succ_dates(Gx, Gx_node, core_x, succ)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.get_pred_dates(self,Gx,Gx_node,core_x,pred)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.get_succ_dates(self,Gx,Gx_node,core_x,succ)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.one_hop(self,Gx,Gx_node,core_x,pred,succ)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.preds(self,Gx,core_x,v,Gx_node=None)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.succs(self,Gx,core_x,v,Gx_node=None)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.test_one(self,pred_dates,succ_dates)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.test_two(self,pred_dates,succ_dates)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.two_hop_pred(self,Gx,Gx_node,core_x,pred)
networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher.two_hop_succ(self,Gx,Gx_node,core_x,succ)
networkx.algorithms.isomorphism.TimeRespectingGraphMatcher(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.TimeRespectingGraphMatcher.one_hop(self,Gx,Gx_node,neighbors)
networkx.algorithms.isomorphism.TimeRespectingGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.TimeRespectingGraphMatcher.two_hop(self,Gx,core_x,Gx_node,neighbors)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.__init__(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_pred_dates(self,Gx,Gx_node,core_x,pred)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.get_succ_dates(self,Gx,Gx_node,core_x,succ)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.one_hop(self,Gx,Gx_node,core_x,pred,succ)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.preds(self,Gx,core_x,v,Gx_node=None)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.succs(self,Gx,core_x,v,Gx_node=None)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_one(self,pred_dates,succ_dates)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.test_two(self,pred_dates,succ_dates)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_pred(self,Gx,Gx_node,core_x,pred)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingDiGraphMatcher.two_hop_succ(self,Gx,Gx_node,core_x,succ)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.__init__(self,G1,G2,temporal_attribute_name,delta)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.one_hop(self,Gx,Gx_node,neighbors)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.temporalisomorphvf2.TimeRespectingGraphMatcher.two_hop(self,Gx,core_x,Gx_node,neighbors)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/ismags.py----------------------------------------
A:networkx.algorithms.isomorphism.ismags.iterator->iter(iterable)
A:networkx.algorithms.isomorphism.ismags.first->list(collection_of_sets).pop()
A:networkx.algorithms.isomorphism.ismags.p_item->next(iter(partition))
A:networkx.algorithms.isomorphism.ismags.colors->dict()
A:networkx.algorithms.isomorphism.ismags.collection_of_sets->list(collection_of_sets)
A:networkx.algorithms.isomorphism.ismags.out->reduce(set.intersection, collection_of_sets, set(first))
A:networkx.algorithms.isomorphism.ismags.self.node_equality->self._node_match_maker(node_match)
A:networkx.algorithms.isomorphism.ismags.self.edge_equality->self._edge_match_maker(edge_match)
A:networkx.algorithms.isomorphism.ismags.self._sgn_partitions_->make_partitions(self.subgraph.nodes, nodematch)
A:networkx.algorithms.isomorphism.ismags.self._sge_partitions_->make_partitions(self.subgraph.edges, edgematch)
A:networkx.algorithms.isomorphism.ismags.self._gn_partitions_->make_partitions(self.graph.nodes, nodematch)
A:networkx.algorithms.isomorphism.ismags.self._ge_partitions_->make_partitions(self.graph.edges, edgematch)
A:networkx.algorithms.isomorphism.ismags.self._sgn_colors_->partition_to_color(self._sgn_partitions)
A:networkx.algorithms.isomorphism.ismags.self._sge_colors_->partition_to_color(self._sge_partitions)
A:networkx.algorithms.isomorphism.ismags.self._gn_colors_->partition_to_color(self._gn_partitions)
A:networkx.algorithms.isomorphism.ismags.self._ge_colors_->partition_to_color(self._ge_partitions)
A:networkx.algorithms.isomorphism.ismags.sgn->next(iter(self._sgn_partitions[sgn_part_color]))
A:networkx.algorithms.isomorphism.ismags.gn->next(iter(self._gn_partitions[gn_part_color]))
A:networkx.algorithms.isomorphism.ismags.sge->next(iter(self._sge_partitions[sge_part_color]))
A:networkx.algorithms.isomorphism.ismags.ge->next(iter(self._ge_partitions[ge_part_color]))
A:networkx.algorithms.isomorphism.ismags.(_, cosets)->self.analyze_symmetry(self.subgraph, self._sgn_partitions, self._sge_colors)
A:networkx.algorithms.isomorphism.ismags.constraints->self._make_constraints(cosets)
A:networkx.algorithms.isomorphism.ismags.candidates->dict(candidates)
A:networkx.algorithms.isomorphism.ismags.la_candidates->self._get_lookahead_candidates()
A:networkx.algorithms.isomorphism.ismags.start_sgn->min(candidates, key=lambda n: min(candidates[n], key=len))
A:networkx.algorithms.isomorphism.ismags.counts->defaultdict(lambda : defaultdict(int))
A:networkx.algorithms.isomorphism.ismags.g_counts[gn]->self._find_neighbor_color_count(self.graph, gn, self._gn_colors, self._ge_colors)
A:networkx.algorithms.isomorphism.ismags.sg_count->self._find_neighbor_color_count(self.subgraph, sgn, self._sgn_colors, self._sge_colors)
A:networkx.algorithms.isomorphism.ismags.new_sg_count->Counter()
A:networkx.algorithms.isomorphism.ismags.key->hash((tuple(graph.nodes), tuple(graph.edges), tuple(map(tuple, node_partitions)), tuple(edge_colors.items())))
A:networkx.algorithms.isomorphism.ismags.node_partitions->list(node_partitions)
A:networkx.algorithms.isomorphism.ismags.(permutations, cosets)->self._process_ordered_pair_partitions(graph, node_partitions, node_partitions, edge_colors)
A:networkx.algorithms.isomorphism.ismags.isom->next(self.subgraph_isomorphisms_iter(symmetry=symmetry), None)
A:networkx.algorithms.isomorphism.ismags.candidates[sgn]->frozenset([sgn_candidates])
A:networkx.algorithms.isomorphism.ismags.node_edge_colors->cls._find_node_edge_color(graph, node_colors, edge_colors)
A:networkx.algorithms.isomorphism.ismags.by_len->defaultdict(list)
A:networkx.algorithms.isomorphism.ismags.node_colors->partition_to_color(node_partitions)
A:networkx.algorithms.isomorphism.ismags.refined->make_partitions(partition, equal_color)
A:networkx.algorithms.isomorphism.ismags.permutations->self._find_permutations(top_partitions, bottom_partitions)
A:networkx.algorithms.isomorphism.ismags.mapping->mapping.copy().copy()
A:networkx.algorithms.isomorphism.ismags.to_be_mapped->set(self.subgraph.nodes)
A:networkx.algorithms.isomorphism.ismags.sgn_candidates->intersect(candidates[sgn])
A:networkx.algorithms.isomorphism.ismags.new_candidates->dict(candidates).copy()
A:networkx.algorithms.isomorphism.ismags.sgn_neighbours->set(self.subgraph[sgn])
A:networkx.algorithms.isomorphism.ismags.g_edges->self._edges_of_same_color(sgn, sgn2)
A:networkx.algorithms.isomorphism.ismags.new_candidates[sgn2]->new_candidates[sgn2].union([frozenset(gn2_options)]).union([frozenset(gn2_options)])
A:networkx.algorithms.isomorphism.ismags.next_sgn->min(nodes, key=lambda n: min(candidates[n], key=len))
A:networkx.algorithms.isomorphism.ismags.current_size->len(next(iter(to_be_mapped), []))
A:networkx.algorithms.isomorphism.ismags.isomorphs->self._map_nodes(next_sgn, candidates, constraints, to_be_mapped=nodes)
A:networkx.algorithms.isomorphism.ismags.item->next(isomorphs)
A:networkx.algorithms.isomorphism.ismags.left_to_be_mapped->set()
A:networkx.algorithms.isomorphism.ismags.new_nodes->self._remove_node(sgn, nodes, constraints)
A:networkx.algorithms.isomorphism.ismags.new_top_partitions->list(new_top_partitions)
A:networkx.algorithms.isomorphism.ismags.new_bottom_partitions->self._refine_node_partitions(graph, new_bottom_partitions, edge_colors, branch=True)
A:networkx.algorithms.isomorphism.ismags.cosets->cosets.copy().copy()
A:networkx.algorithms.isomorphism.ismags.(node, pair_idx)->min(unmapped_nodes)
A:networkx.algorithms.isomorphism.ismags.partitions->self._couple_nodes(top_partitions, bottom_partitions, pair_idx, node, node2, graph, edge_colors)
A:networkx.algorithms.isomorphism.ismags.(new_perms, new_cosets)->self._process_ordered_pair_partitions(graph, new_top_partitions, new_bottom_partitions, edge_colors, orbits, cosets)
A:networkx.algorithms.isomorphism.ismags.cosets[node]->orbit.copy()
networkx.algorithms.isomorphism.ISMAGS(self,graph,subgraph,node_match=None,edge_match=None,cache=None)
networkx.algorithms.isomorphism.ISMAGS._couple_nodes(self,top_partitions,bottom_partitions,pair_idx,t_node,b_node,graph,edge_colors)
networkx.algorithms.isomorphism.ISMAGS._edge_compatibility(self)
networkx.algorithms.isomorphism.ISMAGS._edge_match_maker(cmp)
networkx.algorithms.isomorphism.ISMAGS._edges_of_same_color(self,sgn1,sgn2)
networkx.algorithms.isomorphism.ISMAGS._find_neighbor_color_count(graph,node,node_color,edge_color)
networkx.algorithms.isomorphism.ISMAGS._find_node_edge_color(graph,node_colors,edge_colors)
networkx.algorithms.isomorphism.ISMAGS._find_nodecolor_candidates(self)
networkx.algorithms.isomorphism.ISMAGS._find_permutations(top_partitions,bottom_partitions)
networkx.algorithms.isomorphism.ISMAGS._ge_colors(self)
networkx.algorithms.isomorphism.ISMAGS._ge_partitions(self)
networkx.algorithms.isomorphism.ISMAGS._get_lookahead_candidates(self)
networkx.algorithms.isomorphism.ISMAGS._get_permutations_by_length(items)
networkx.algorithms.isomorphism.ISMAGS._gn_colors(self)
networkx.algorithms.isomorphism.ISMAGS._gn_partitions(self)
networkx.algorithms.isomorphism.ISMAGS._largest_common_subgraph(self,candidates,constraints,to_be_mapped=None)
networkx.algorithms.isomorphism.ISMAGS._make_constraints(cosets)
networkx.algorithms.isomorphism.ISMAGS._map_nodes(self,sgn,candidates,constraints,mapping=None,to_be_mapped=None)
networkx.algorithms.isomorphism.ISMAGS._node_compatibility(self)
networkx.algorithms.isomorphism.ISMAGS._node_match_maker(cmp)
networkx.algorithms.isomorphism.ISMAGS._process_ordered_pair_partitions(self,graph,top_partitions,bottom_partitions,edge_colors,orbits=None,cosets=None)
networkx.algorithms.isomorphism.ISMAGS._refine_node_partitions(cls,graph,node_partitions,edge_colors,branch=False)
networkx.algorithms.isomorphism.ISMAGS._remove_node(node,nodes,constraints)
networkx.algorithms.isomorphism.ISMAGS._sge_colors(self)
networkx.algorithms.isomorphism.ISMAGS._sge_partitions(self)
networkx.algorithms.isomorphism.ISMAGS._sgn_colors(self)
networkx.algorithms.isomorphism.ISMAGS._sgn_partitions(self)
networkx.algorithms.isomorphism.ISMAGS._update_orbits(orbits,permutations)
networkx.algorithms.isomorphism.ISMAGS.analyze_symmetry(self,graph,node_partitions,edge_colors)
networkx.algorithms.isomorphism.ISMAGS.find_isomorphisms(self,symmetry=True)
networkx.algorithms.isomorphism.ISMAGS.is_isomorphic(self,symmetry=False)
networkx.algorithms.isomorphism.ISMAGS.isomorphisms_iter(self,symmetry=True)
networkx.algorithms.isomorphism.ISMAGS.largest_common_subgraph(self,symmetry=True)
networkx.algorithms.isomorphism.ISMAGS.subgraph_is_isomorphic(self,symmetry=False)
networkx.algorithms.isomorphism.ISMAGS.subgraph_isomorphisms_iter(self,symmetry=True)
networkx.algorithms.isomorphism.are_all_equal(iterable)
networkx.algorithms.isomorphism.intersect(collection_of_sets)
networkx.algorithms.isomorphism.ismags.ISMAGS(self,graph,subgraph,node_match=None,edge_match=None,cache=None)
networkx.algorithms.isomorphism.ismags.ISMAGS.__init__(self,graph,subgraph,node_match=None,edge_match=None,cache=None)
networkx.algorithms.isomorphism.ismags.ISMAGS._couple_nodes(self,top_partitions,bottom_partitions,pair_idx,t_node,b_node,graph,edge_colors)
networkx.algorithms.isomorphism.ismags.ISMAGS._edge_compatibility(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._edge_match_maker(cmp)
networkx.algorithms.isomorphism.ismags.ISMAGS._edges_of_same_color(self,sgn1,sgn2)
networkx.algorithms.isomorphism.ismags.ISMAGS._find_neighbor_color_count(graph,node,node_color,edge_color)
networkx.algorithms.isomorphism.ismags.ISMAGS._find_node_edge_color(graph,node_colors,edge_colors)
networkx.algorithms.isomorphism.ismags.ISMAGS._find_nodecolor_candidates(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._find_permutations(top_partitions,bottom_partitions)
networkx.algorithms.isomorphism.ismags.ISMAGS._ge_colors(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._ge_partitions(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._get_lookahead_candidates(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._get_permutations_by_length(items)
networkx.algorithms.isomorphism.ismags.ISMAGS._gn_colors(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._gn_partitions(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._largest_common_subgraph(self,candidates,constraints,to_be_mapped=None)
networkx.algorithms.isomorphism.ismags.ISMAGS._make_constraints(cosets)
networkx.algorithms.isomorphism.ismags.ISMAGS._map_nodes(self,sgn,candidates,constraints,mapping=None,to_be_mapped=None)
networkx.algorithms.isomorphism.ismags.ISMAGS._node_compatibility(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._node_match_maker(cmp)
networkx.algorithms.isomorphism.ismags.ISMAGS._process_ordered_pair_partitions(self,graph,top_partitions,bottom_partitions,edge_colors,orbits=None,cosets=None)
networkx.algorithms.isomorphism.ismags.ISMAGS._refine_node_partitions(cls,graph,node_partitions,edge_colors,branch=False)
networkx.algorithms.isomorphism.ismags.ISMAGS._remove_node(node,nodes,constraints)
networkx.algorithms.isomorphism.ismags.ISMAGS._sge_colors(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._sge_partitions(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_colors(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._sgn_partitions(self)
networkx.algorithms.isomorphism.ismags.ISMAGS._update_orbits(orbits,permutations)
networkx.algorithms.isomorphism.ismags.ISMAGS.analyze_symmetry(self,graph,node_partitions,edge_colors)
networkx.algorithms.isomorphism.ismags.ISMAGS.find_isomorphisms(self,symmetry=True)
networkx.algorithms.isomorphism.ismags.ISMAGS.is_isomorphic(self,symmetry=False)
networkx.algorithms.isomorphism.ismags.ISMAGS.isomorphisms_iter(self,symmetry=True)
networkx.algorithms.isomorphism.ismags.ISMAGS.largest_common_subgraph(self,symmetry=True)
networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_is_isomorphic(self,symmetry=False)
networkx.algorithms.isomorphism.ismags.ISMAGS.subgraph_isomorphisms_iter(self,symmetry=True)
networkx.algorithms.isomorphism.ismags.are_all_equal(iterable)
networkx.algorithms.isomorphism.ismags.intersect(collection_of_sets)
networkx.algorithms.isomorphism.ismags.make_partitions(items,test)
networkx.algorithms.isomorphism.ismags.partition_to_color(partitions)
networkx.algorithms.isomorphism.make_partitions(items,test)
networkx.algorithms.isomorphism.partition_to_color(partitions)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2userfunc.nm->self.node_match(self.G1.nodes[G1_node], self.G2.nodes[G2_node])
A:networkx.algorithms.isomorphism.vf2userfunc.feasible->_semantic_feasibility(self, G1_node, G2_node)
networkx.algorithms.isomorphism.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.MultiDiGraphMatcher(DiGraphMatcher)
networkx.algorithms.isomorphism.MultiGraphMatcher(GraphMatcher)
networkx.algorithms.isomorphism._semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher(DiGraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher(GraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility(self,G1_node,G2_node)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g1->networkx.cycle_graph(L)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm->networkx.algorithms.isomorphism.DiGraphMatcher(G, SG, edge_match=iso.categorical_edge_match('label', None))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.mapping->sorted(gm.mapping.items())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g3->networkx.subgraph(g2, ['A', 'B'])
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.fh->open(filename, mode='rb')
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.graph->self.create_graph(os.path.join(head, 'si2_b06_m200.B99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.(head, tail)->os.path.split(__file__)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.subgraph->self.create_graph(os.path.join(head, 'si2_b06_m200.A99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.cls.GAG->networkx.generators.atlas.graph_atlas_g()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.alphabet->list(range(26))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nlist->list(graph)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.d->dict(zip(nodes, new_nodes))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.relabel->networkx.relabel_nodes(graph, d)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nodes->list(range(6))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.new_nodes->list(nodes)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm12->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm13->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.x->list(gm12.subgraph_monomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.y->list(gm13.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm21->networkx.algorithms.isomorphism.DiGraphMatcher(g2, g1)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.s->len(list(gm.isomorphisms_iter()))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmA->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmB->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.node1->object()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.node2->object()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.node3->object()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.G->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.H->networkx.path_graph([node3, node2, node1], create_using=nx.DiGraph)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.dgm->networkx.algorithms.isomorphism.DiGraphMatcher(G, H)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.SG->networkx.DiGraph()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setup_class(cls)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph(filename)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph_mono(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_edge_match()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_monomorphism_iter1()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_noncomparable_nodes()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop_mono()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_ismags.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_ismags.graph->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_ismags.ismags->networkx.algorithms.isomorphism.ISMAGS(graph2, graph1, node_match=iso.categorical_node_match('color', None))
A:networkx.algorithms.isomorphism.tests.test_ismags.ismags_answer->list(ismags.find_isomorphisms(True))
A:networkx.algorithms.isomorphism.tests.test_ismags.g1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_ismags.g2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_ismags.matches->networkx.algorithms.isomorphism.ISMAGS(graph2, graph1, node_match=iso.categorical_node_match('color', None)).subgraph_isomorphisms_iter(symmetry=False)
A:networkx.algorithms.isomorphism.tests.test_ismags.gm->networkx.algorithms.isomorphism.ISMAGS(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_ismags.graph1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_ismags.graph2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_ismags.found_mcis->_matches_to_sets(ismags2.largest_common_subgraph())
A:networkx.algorithms.isomorphism.tests.test_ismags.expected->_matches_to_sets([{3: 2, 1: 3, 2: 1}, {2: 0, 0: 2, 1: 1}, {1: 2, 3: 3, 2: 1}, {3: 0, 1: 3, 2: 1}, {0: 2, 2: 3, 1: 1}, {3: 0, 1: 2, 2: 1}, {2: 0, 0: 3, 1: 1}, {0: 0, 2: 3, 1: 1}, {1: 0, 3: 3, 2: 1}, {1: 0, 3: 2, 2: 1}, {0: 3, 1: 1, 2: 2}, {0: 0, 1: 1, 2: 2}])
A:networkx.algorithms.isomorphism.tests.test_ismags.ismags1->networkx.algorithms.isomorphism.ISMAGS(graph1, graph2, node_match=iso.categorical_node_match('color', None))
A:networkx.algorithms.isomorphism.tests.test_ismags.ismags2->networkx.algorithms.isomorphism.ISMAGS(graph2, graph1, node_match=iso.categorical_node_match('color', None))
A:networkx.algorithms.isomorphism.tests.test_ismags.found_mcis1->_matches_to_sets(ismags1.largest_common_subgraph(False))
A:networkx.algorithms.isomorphism.tests.test_ismags.found_mcis2->_matches_to_sets(found_mcis2)
networkx.algorithms.isomorphism.tests.test_TestLargestCommonSubgraph
networkx.algorithms.isomorphism.tests.test_TestLargestCommonSubgraph.test_mcis(self)
networkx.algorithms.isomorphism.tests.test_TestLargestCommonSubgraph.test_symmetry_mcis(self)
networkx.algorithms.isomorphism.tests.test_TestSelfIsomorphism
networkx.algorithms.isomorphism.tests.test_TestSelfIsomorphism.test_directed_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_TestSelfIsomorphism.test_edgecase_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_TestSelfIsomorphism.test_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_TestSubgraphIsomorphism
networkx.algorithms.isomorphism.tests.test_TestSubgraphIsomorphism.test_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_TestSubgraphIsomorphism.test_isomorphism2(self)
networkx.algorithms.isomorphism.tests.test_TestSubgraphIsomorphism.test_labeled_edges(self)
networkx.algorithms.isomorphism.tests.test_TestSubgraphIsomorphism.test_labeled_nodes(self)
networkx.algorithms.isomorphism.tests.test_TestWikipediaExample
networkx.algorithms.isomorphism.tests.test_TestWikipediaExample.test_graph(self)
networkx.algorithms.isomorphism.tests.test__matches_to_sets(matches)
networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph
networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_mcis(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestLargestCommonSubgraph.test_symmetry_mcis(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism
networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_directed_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_edgecase_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSelfIsomorphism.test_self_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism
networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_isomorphism2(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_edges(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestSubgraphIsomorphism.test_labeled_nodes(self)
networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample
networkx.algorithms.isomorphism.tests.test_ismags.TestWikipediaExample.test_graph(self)
networkx.algorithms.isomorphism.tests.test_ismags._matches_to_sets(matches)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_temporalisomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.e[2][att_name]->datetime(2015, 1, 1)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.current_date->date(2015, 1, 1)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[0][1][att_name]->date(2015, 1, 1)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[0][2][att_name]->date(2015, 1, 1)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[1][2][att_name]->date(2015, 1, 3)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[1][3][att_name]->date(2015, 1, 2)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[2][4][att_name]->date(2015, 1, 2)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[3][4][att_name]->date(2015, 1, 3)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G[4][5][att_name]->date(2015, 1, 2)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G1->put_time_config_2(G1, temporal_name)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.G2->self.provide_g2_path_3edges()
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.d->timedelta(days=1)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.gm->networkx.algorithms.isomorphism.TimeRespectingDiGraphMatcher(G1, G2, temporal_name, d)
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.count_match->len(list(gm.subgraph_isomorphisms_iter()))
A:networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.L->list(gm.subgraph_isomorphisms_iter())
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.provide_g1_topology(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.provide_g2_path_3edges(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_same_dates_returns_true(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_one_embedding(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_two_embeddings(self)
networkx.algorithms.isomorphism.tests.test_TestDiTimeRespectingGraphMatcher.test_timdelta_zero_same_dates_returns_true(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.provide_g1_topology(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.provide_g2_path_3edges(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_notTimeRespecting_returnsFalse(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_four_embedding(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_ten_embeddings(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_timdelta_zero_datetime_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_TestTimeRespectingGraphMatcher.test_timdelta_zero_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_provide_g1_edgelist()
networkx.algorithms.isomorphism.tests.test_put_same_datetime(G,att_name)
networkx.algorithms.isomorphism.tests.test_put_same_time(G,att_name)
networkx.algorithms.isomorphism.tests.test_put_sequence_time(G,att_name)
networkx.algorithms.isomorphism.tests.test_put_time_config_0(G,att_name)
networkx.algorithms.isomorphism.tests.test_put_time_config_1(G,att_name)
networkx.algorithms.isomorphism.tests.test_put_time_config_2(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g1_topology(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.provide_g2_path_3edges(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_same_dates_returns_true(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_one_embedding(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_two_embeddings(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestDiTimeRespectingGraphMatcher.test_timdelta_zero_same_dates_returns_true(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g1_topology(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.provide_g2_path_3edges(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_attNameStrange_timdelta_zero_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_notTimeRespecting_returnsFalse(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config0_returns_no_embeddings(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config1_returns_four_embedding(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_one_config2_returns_ten_embeddings(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_datetime_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.TestTimeRespectingGraphMatcher.test_timdelta_zero_timeRespecting_returnsTrue(self)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.provide_g1_edgelist()
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_datetime(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_same_time(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_sequence_time(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_0(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_1(G,att_name)
networkx.algorithms.isomorphism.tests.test_temporalisomorphvf2.put_time_config_2(G,att_name)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_match_helpers.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_match_helpers.nm->networkx.algorithms.isomorphism.categorical_node_match(['x', 'y', 'z'], [None] * 3)
A:networkx.algorithms.isomorphism.tests.test_match_helpers.self.G1->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_match_helpers.self.G2->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_match_helpers.self.G3->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_match_helpers.self.G4->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_match_helpers.full_match->networkx.algorithms.isomorphism.generic_multiedge_match(['id', 'flowMin', 'flowMax'], [None] * 3, [eq] * 3)
A:networkx.algorithms.isomorphism.tests.test_match_helpers.flow_match->networkx.algorithms.isomorphism.generic_multiedge_match(['flowMin', 'flowMax'], [None] * 2, [eq] * 2)
A:networkx.algorithms.isomorphism.tests.test_match_helpers.min_flow_match->networkx.algorithms.isomorphism.generic_multiedge_match('flowMin', None, eq)
A:networkx.algorithms.isomorphism.tests.test_match_helpers.id_match->networkx.algorithms.isomorphism.generic_multiedge_match('id', None, eq)
networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch
networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.setup_method(self)
networkx.algorithms.isomorphism.tests.test_match_helpers.TestGenericMultiEdgeMatch.test_generic_multiedge_match(self)
networkx.algorithms.isomorphism.tests.test_match_helpers.test_categorical_node_match()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_isomorphism.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G3->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G4->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G5->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.cls.G6->networkx.Graph()
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setup_class(cls)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g1->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g1->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g2->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.nm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_node_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.iso->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emc->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emcm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match(['color', 'weight'], ['', 1])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg1->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_multiedge_match('color', 'red', eq)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg2->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_edge_match(['color', 'weight', 'size'], ['red', 1, 0.5], [eq, eq, math.isclose])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.gm->self.GM(self.g1, self.g2, edge_match=self.emg2)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_DiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.build(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.algorithms.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.build(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_color1(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_color2(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_weight1(self)
networkx.algorithms.isomorphism.tests.test_TestNodeMatch_Graph.test_weight2(self)
networkx.algorithms.isomorphism.tests.test_test_simple()
networkx.algorithms.isomorphism.tests.test_test_weightkey()
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setup_method(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple()
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/tests/test_tree_isomorphism.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.d1->is_directed(t1)
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.d2->is_directed(t2)
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.t1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.t2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.isomorphism->tree_isomorphism(t1, t2)
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.nodes2->nodes1.copy()
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.start_time->time.time()
A:networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trees->list(nx.nonisomorphic_trees(k))
networkx.algorithms.isomorphism.tests.test_check_isomorphism(t1,t2,isomorphism)
networkx.algorithms.isomorphism.tests.test_positive_single_tree(t1)
networkx.algorithms.isomorphism.tests.test_random_swap(t)
networkx.algorithms.isomorphism.tests.test_test_hardcoded()
networkx.algorithms.isomorphism.tests.test_test_negative(maxk=11)
networkx.algorithms.isomorphism.tests.test_test_positive(maxk=14)
networkx.algorithms.isomorphism.tests.test_test_trivial()
networkx.algorithms.isomorphism.tests.test_test_trivial_2()
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.check_isomorphism(t1,t2,isomorphism)
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.positive_single_tree(t1)
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.random_swap(t)
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_hardcoded()
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_negative(maxk=11)
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_positive(maxk=14)
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial()
networkx.algorithms.isomorphism.tests.test_tree_isomorphism.test_trivial_2()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp_helpers/feasibility.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.u_labels_predecessors->networkx.utils.groups({n1: G1_labels[n1] for n1 in G1.pred[u]})
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.v_labels_predecessors->networkx.utils.groups({n2: G2_labels[n2] for n2 in G2.pred[v]})
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.u_labels_successors->networkx.utils.groups({n1: G1_labels[n1] for n1 in G1[u]})
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.v_labels_successors->networkx.utils.groups({n2: G2_labels[n2] for n2 in G2[v]})
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.u_nbrs_edges->sorted((G1.number_of_edges(u, x) for x in G1_nbh))
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.v_nbrs_edges->sorted((G2.number_of_edges(v, x) for x in G2_nbh))
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.u_pred_edges->sorted((G1.number_of_edges(u, x) for x in G1_pred))
A:networkx.algorithms.isomorphism.vf2pp_helpers.feasibility.v_pred_edges->sorted((G2.number_of_edges(v, x) for x in G2_pred))
networkx.algorithms.isomorphism.vf2pp_helpers.feasibility._consistent_PT(u,v,graph_params,state_params)
networkx.algorithms.isomorphism.vf2pp_helpers.feasibility._cut_PT(u,v,graph_params,state_params)
networkx.algorithms.isomorphism.vf2pp_helpers.feasibility._feasibility(node1,node2,graph_params,state_params)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp_helpers/node_ordering.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.G1->G1.to_undirected(as_view=True).to_undirected(as_view=True)
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.V1_unordered->set(G1.nodes())
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.max_rarity->min((label_rarity[G1_labels[x]] for x in V1_unordered))
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.max_node->max(rarest_nodes, key=G1.degree)
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.nodes_to_add->dlevel_nodes.copy()
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.max_used_degree->max((used_degrees[n] for n in nodes_to_add))
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.max_degree->max((G1.degree[n] for n in max_used_degree_nodes))
A:networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering.next_node->min(max_degree_nodes, key=lambda x: label_rarity[G1_labels[x]])
networkx.algorithms.isomorphism.vf2pp_helpers.node_ordering._matching_order(graph_params)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp_helpers/candidates.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2pp_helpers.candidates.candidates->set(nodes_of_G2Labels[G1_labels[u]])
A:networkx.algorithms.isomorphism.vf2pp_helpers.candidates.common_nodes->set(G2[mapping[pred1]])
A:networkx.algorithms.isomorphism.vf2pp_helpers.candidates.pred1->covered_predecessors.pop()
networkx.algorithms.isomorphism.vf2pp_helpers.candidates._find_candidates(u,graph_params,state_params,G1_degree)
networkx.algorithms.isomorphism.vf2pp_helpers.candidates._find_candidates_Di(u,graph_params,state_params,G1_degree)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp_helpers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/isomorphism/vf2pp_helpers/state.py----------------------------------------
networkx.algorithms.isomorphism.vf2pp_helpers.state._restore_Tinout(popped_node1,popped_node2,graph_params,state_params)
networkx.algorithms.isomorphism.vf2pp_helpers.state._restore_Tinout_Di(popped_node1,popped_node2,graph_params,state_params)
networkx.algorithms.isomorphism.vf2pp_helpers.state._update_Tinout(new_node1,new_node2,graph_params,state_params)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/hits_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.hits_alg.A->networkx.to_scipy_sparse_array(G, nodelist=list(G))
A:networkx.algorithms.link_analysis.hits_alg.(_, _, vt)->scipy.sparse.linalg.svds(A, k=1, v0=nstart, maxiter=max_iter, tol=tol)
A:networkx.algorithms.link_analysis.hits_alg.nstart->numpy.array(list(nstart.values()))
A:networkx.algorithms.link_analysis.hits_alg.hubs->dict(zip(G, map(float, h)))
A:networkx.algorithms.link_analysis.hits_alg.authorities->dict(zip(G, map(float, a)))
A:networkx.algorithms.link_analysis.hits_alg.h->dict.fromkeys(hlast.keys(), 0)
A:networkx.algorithms.link_analysis.hits_alg.a->numpy.array([nstart.get(n, 0) for n in list(G)], dtype=float).flatten()
A:networkx.algorithms.link_analysis.hits_alg.err->numpy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.hits_alg.adj_ary->networkx.to_numpy_array(G)
A:networkx.algorithms.link_analysis.hits_alg.(e, ev)->numpy.linalg.eig(A)
A:networkx.algorithms.link_analysis.hits_alg.x->numpy.array([nstart.get(n, 0) for n in list(G)], dtype=float)
networkx.algorithms.link_analysis._hits_numpy(G,normalized=True)
networkx.algorithms.link_analysis._hits_python(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)
networkx.algorithms.link_analysis._hits_scipy(G,max_iter=100,tol=1e-06,nstart=None,normalized=True)
networkx.algorithms.link_analysis.hits(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)
networkx.algorithms.link_analysis.hits_alg._hits_numpy(G,normalized=True)
networkx.algorithms.link_analysis.hits_alg._hits_python(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)
networkx.algorithms.link_analysis.hits_alg._hits_scipy(G,max_iter=100,tol=1e-06,nstart=None,normalized=True)
networkx.algorithms.link_analysis.hits_alg.hits(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/pagerank_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.pagerank_alg.D->G.to_directed()
A:networkx.algorithms.link_analysis.pagerank_alg.W->networkx.stochastic_graph(D, weight=weight)
A:networkx.algorithms.link_analysis.pagerank_alg.N->len(G)
A:networkx.algorithms.link_analysis.pagerank_alg.x->numpy.array([nstart.get(n, 0) for n in nodelist], dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.s->sum(dangling.values())
A:networkx.algorithms.link_analysis.pagerank_alg.p->numpy.array([personalization.get(n, 0) for n in nodelist], dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.err->numpy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.pagerank_alg.nodelist->list(G)
A:networkx.algorithms.link_analysis.pagerank_alg.A->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.dangling_weights->numpy.array([dangling.get(n, 0) for n in nodelist], dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.M->google_matrix(G, alpha, personalization=personalization, weight=weight, dangling=dangling)
A:networkx.algorithms.link_analysis.pagerank_alg.(eigenvalues, eigenvectors)->numpy.linalg.eig(M.T)
A:networkx.algorithms.link_analysis.pagerank_alg.ind->numpy.argmax(eigenvalues)
A:networkx.algorithms.link_analysis.pagerank_alg.norm->largest.sum()
A:networkx.algorithms.link_analysis.pagerank_alg.S->networkx.to_scipy_sparse_array(G, nodelist=nodelist, weight=weight, dtype=float).sum(axis=1)
A:networkx.algorithms.link_analysis.pagerank_alg.Q->scipy.sparse.csr_array(sp.sparse.spdiags(S.T, 0, *A.shape))
networkx.algorithms.link_analysis._pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis._pagerank_python(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis._pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg._pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg._pagerank_python(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg._pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/tests/test_hits.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_hits.np->pytest.importorskip('numpy')
A:networkx.algorithms.link_analysis.tests.test_hits.sp->pytest.importorskip('scipy')
A:networkx.algorithms.link_analysis.tests.test_hits.G->networkx.path_graph(50)
A:networkx.algorithms.link_analysis.tests.test_hits.cls.G.a->dict(zip(sorted(G), [0.0, 0.0, 0.366025, 0.133975, 0.5, 0.0]))
A:networkx.algorithms.link_analysis.tests.test_hits.cls.G.h->dict(zip(sorted(G), [0.366025, 0.0, 0.211325, 0.0, 0.211325, 0.211325]))
A:networkx.algorithms.link_analysis.tests.test_hits.(h, a)->hits_alg(G, nstart=nstart)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setup_class(cls)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits(self,hits_alg)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_not_convergent(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/tests/test_pagerank.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_pagerank.np->pytest.importorskip('numpy')
A:networkx.algorithms.link_analysis.tests.test_pagerank.G->networkx.Graph()
A:networkx.algorithms.link_analysis.tests.test_pagerank.cls.G.pagerank->dict(zip(sorted(G), [0.03721197, 0.05395735, 0.04150565, 0.37508082, 0.20599833, 0.28624589]))
A:networkx.algorithms.link_analysis.tests.test_pagerank.cls.G.dangling_pagerank->dict(zip(sorted(G), [0.10844518, 0.18618601, 0.0710892, 0.2683668, 0.15919783, 0.20671497]))
A:networkx.algorithms.link_analysis.tests.test_pagerank.p->_pagerank_scipy(G, alpha=0.9, tol=1e-08, nstart=nstart)
A:networkx.algorithms.link_analysis.tests.test_pagerank.M->networkx.google_matrix(G, alpha=0.9, nodelist=sorted(G))
A:networkx.algorithms.link_analysis.tests.test_pagerank.(_, ev)->pytest.importorskip('numpy').linalg.eig(M.T)
A:networkx.algorithms.link_analysis.tests.test_pagerank.dangling_sum->sum(dangling.values())
A:networkx.algorithms.link_analysis.tests.test_pagerank.M1->networkx.google_matrix(G, personalization=dangling)
A:networkx.algorithms.link_analysis.tests.test_pagerank.M2->networkx.google_matrix(G, personalization=dangling, dangling=dangling)
A:networkx.algorithms.link_analysis.tests.test_pagerank.pr->_pagerank_scipy(self.G, dangling=self.dangling_edges)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setup_class(cls)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_matrix(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_pagerank(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_empty(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_incomplete_personalization(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_multigraph(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_one_nonzero_personalization_value(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank_max_iter(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_zero_personalization_vector(self,alg)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy(TestPageRank)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_empty_scipy(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank_max_iter(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/link_analysis/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/redundancy.py----------------------------------------
A:networkx.algorithms.bipartite.redundancy.n->len(G[v])
A:networkx.algorithms.bipartite.redundancy.overlap->sum((1 for (u, w) in combinations(G[v], 2) if (set(G[u]) & set(G[w])) - {v}))
networkx.algorithms.bipartite._node_redundancy(G,v)
networkx.algorithms.bipartite.node_redundancy(G,nodes=None)
networkx.algorithms.bipartite.redundancy._node_redundancy(G,v)
networkx.algorithms.bipartite.redundancy.node_redundancy(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/covering.py----------------------------------------
networkx.algorithms.bipartite.covering.min_edge_cover(G,matching_algorithm=None)
networkx.algorithms.bipartite.min_edge_cover(G,matching_algorithm=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/basic.py----------------------------------------
A:networkx.algorithms.bipartite.basic.v->queue.pop()
A:networkx.algorithms.bipartite.basic.S->set(nodes)
A:networkx.algorithms.bipartite.basic.(X, Y)->sets(CC)
A:networkx.algorithms.bipartite.basic.X->set(top_nodes)
A:networkx.algorithms.bipartite.basic.c->color(G)
A:networkx.algorithms.bipartite.basic.n->len(B)
A:networkx.algorithms.bipartite.basic.m->networkx.number_of_edges(B)
A:networkx.algorithms.bipartite.basic.nb->len(nodes)
A:networkx.algorithms.bipartite.basic.bottom->set(nodes)
networkx.algorithms.bipartite.basic.color(G)
networkx.algorithms.bipartite.basic.degrees(B,nodes,weight=None)
networkx.algorithms.bipartite.basic.density(B,nodes)
networkx.algorithms.bipartite.basic.is_bipartite(G)
networkx.algorithms.bipartite.basic.is_bipartite_node_set(G,nodes)
networkx.algorithms.bipartite.basic.sets(G,top_nodes=None)
networkx.algorithms.bipartite.color(G)
networkx.algorithms.bipartite.degrees(B,nodes,weight=None)
networkx.algorithms.bipartite.density(B,nodes)
networkx.algorithms.bipartite.sets(G,top_nodes=None)
networkx.algorithms.is_bipartite(G)
networkx.algorithms.is_bipartite_node_set(G,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/generators.py----------------------------------------
A:networkx.algorithms.bipartite.generators.G->networkx.DiGraph(G)
A:networkx.algorithms.bipartite.generators.lena->len(aseq)
A:networkx.algorithms.bipartite.generators.lenb->len(bseq)
A:networkx.algorithms.bipartite.generators.suma->sum(aseq)
A:networkx.algorithms.bipartite.generators.sumb->sum(bseq)
A:networkx.algorithms.bipartite.generators.naseq->len(aseq)
A:networkx.algorithms.bipartite.generators.nbseq->len(bseq)
A:networkx.algorithms.bipartite.generators.(degree, u)->astubs.pop()
A:networkx.algorithms.bipartite.generators.target->seed.choice(bbstubs)
A:networkx.algorithms.bipartite.generators.bbstubs->reduce(lambda x, y: x + y, bb)
A:networkx.algorithms.bipartite.generators.lp->math.log(1.0 - p)
A:networkx.algorithms.bipartite.generators.lr->math.log(1.0 - seed.random())
A:networkx.algorithms.bipartite.generators.bottom->list(set(G) - set(top))
A:networkx.algorithms.bipartite.generators.u->seed.choice(top)
A:networkx.algorithms.bipartite.generators.v->seed.choice(bottom)
A:networkx.algorithms.bipartite.generators.b->dict(zip(range(0, lena), [0] * lena))
networkx.algorithms.bipartite._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.algorithms.bipartite.alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.algorithms.bipartite.generators._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.algorithms.bipartite.generators.alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.generators.complete_bipartite_graph(n1,n2,create_using=None)
networkx.algorithms.bipartite.generators.configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.algorithms.bipartite.generators.gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.algorithms.bipartite.generators.havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.generators.preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.algorithms.bipartite.generators.random_graph(n,m,p,seed=None,directed=False)
networkx.algorithms.bipartite.generators.reverse_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.algorithms.bipartite.havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.algorithms.bipartite.random_graph(n,m,p,seed=None,directed=False)
networkx.algorithms.bipartite.reverse_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.complete_bipartite_graph(n1,n2,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/spectral.py----------------------------------------
A:networkx.algorithms.bipartite.spectral.nodelist->list(G)
A:networkx.algorithms.bipartite.spectral.A->networkx.to_numpy_array(G, nodelist, weight=weight)
A:networkx.algorithms.bipartite.spectral.expA->scipy.linalg.expm(A)
A:networkx.algorithms.bipartite.spectral.expmA->scipy.linalg.expm(-A)
A:networkx.algorithms.bipartite.spectral.index->dict(zip(nodelist, range(len(nodelist))))
networkx.algorithms.bipartite.spectral.spectral_bipartivity(G,nodes=None,weight='weight')
networkx.algorithms.bipartite.spectral_bipartivity(G,nodes=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/projection.py----------------------------------------
A:networkx.algorithms.bipartite.projection.G->networkx.Graph()
A:networkx.algorithms.bipartite.projection.unbrs->set(B[u])
A:networkx.algorithms.bipartite.projection.vnbrs->set(pred[v])
A:networkx.algorithms.bipartite.projection.weight->weight_function(B, u, v)
networkx.algorithms.bipartite.collaboration_weighted_projected_graph(B,nodes)
networkx.algorithms.bipartite.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.algorithms.bipartite.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph(B,nodes)
networkx.algorithms.bipartite.projection.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.algorithms.bipartite.projection.projected_graph(B,nodes,multigraph=False)
networkx.algorithms.bipartite.projection.weighted_projected_graph(B,nodes,ratio=False)
networkx.algorithms.bipartite.weighted_projected_graph(B,nodes,ratio=False)
networkx.algorithms.projected_graph(B,nodes,multigraph=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/cluster.py----------------------------------------
A:networkx.algorithms.bipartite.cluster.ccs->latapy_clustering(G, nodes=nodes, mode=mode)
A:networkx.algorithms.bipartite.cluster.L_3->_threepaths(G)
A:networkx.algorithms.bipartite.cluster.C_4->_four_cycles(G)
networkx.algorithms.bipartite._four_cycles(G)
networkx.algorithms.bipartite._threepaths(G)
networkx.algorithms.bipartite.average_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cc_dot(nu,nv)
networkx.algorithms.bipartite.cc_max(nu,nv)
networkx.algorithms.bipartite.cc_min(nu,nv)
networkx.algorithms.bipartite.cluster._four_cycles(G)
networkx.algorithms.bipartite.cluster._threepaths(G)
networkx.algorithms.bipartite.cluster.average_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cluster.cc_dot(nu,nv)
networkx.algorithms.bipartite.cluster.cc_max(nu,nv)
networkx.algorithms.bipartite.cluster.cc_min(nu,nv)
networkx.algorithms.bipartite.cluster.latapy_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cluster.robins_alexander_clustering(G)
networkx.algorithms.bipartite.latapy_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.robins_alexander_clustering(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/centrality.py----------------------------------------
A:networkx.algorithms.bipartite.centrality.top->set(nodes)
A:networkx.algorithms.bipartite.centrality.n->len(top)
A:networkx.algorithms.bipartite.centrality.m->len(bottom)
A:networkx.algorithms.bipartite.centrality.(s, t)->divmod(n - 1, m)
A:networkx.algorithms.bipartite.centrality.(p, r)->divmod(m - 1, n)
A:networkx.algorithms.bipartite.centrality.betweenness->networkx.betweenness_centrality(G, normalized=False, weight=None)
A:networkx.algorithms.bipartite.centrality.sp->dict(path_length(G, node))
A:networkx.algorithms.bipartite.centrality.totsp->sum(sp.values())
networkx.algorithms.bipartite.betweenness_centrality(G,nodes)
networkx.algorithms.bipartite.centrality.betweenness_centrality(G,nodes)
networkx.algorithms.bipartite.centrality.closeness_centrality(G,nodes,normalized=True)
networkx.algorithms.bipartite.centrality.degree_centrality(G,nodes)
networkx.algorithms.bipartite.closeness_centrality(G,nodes,normalized=True)
networkx.algorithms.bipartite.degree_centrality(G,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/matrix.py----------------------------------------
A:networkx.algorithms.bipartite.matrix.nlen->len(row_order)
A:networkx.algorithms.bipartite.matrix.column_order->list(set(G) - set(row_order))
A:networkx.algorithms.bipartite.matrix.mlen->len(column_order)
A:networkx.algorithms.bipartite.matrix.row_index->dict(zip(row_order, itertools.count()))
A:networkx.algorithms.bipartite.matrix.col_index->dict(zip(column_order, itertools.count()))
A:networkx.algorithms.bipartite.matrix.(row, col, data)->zip(*((row_index[u], col_index[v], d.get(weight, 1)) for (u, v, d) in G.edges(row_order, data=True) if u in row_index and v in col_index))
A:networkx.algorithms.bipartite.matrix.A->scipy.sparse.coo_array((data, (row, col)), shape=(nlen, mlen), dtype=dtype)
A:networkx.algorithms.bipartite.matrix.G->networkx.empty_graph(0, create_using)
A:networkx.algorithms.bipartite.matrix.triples->chain((((u, v, 1) for d in range(w)) for (u, v, w) in triples))
networkx.algorithms.bipartite.biadjacency_matrix(G,row_order,column_order=None,dtype=None,weight='weight',format='csr')
networkx.algorithms.bipartite.from_biadjacency_matrix(A,create_using=None,edge_attribute='weight')
networkx.algorithms.bipartite.matrix.biadjacency_matrix(G,row_order,column_order=None,dtype=None,weight='weight',format='csr')
networkx.algorithms.bipartite.matrix.from_biadjacency_matrix(A,create_using=None,edge_attribute='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/edgelist.py----------------------------------------
A:networkx.algorithms.bipartite.edgelist.G->networkx.empty_graph(0, create_using)
A:networkx.algorithms.bipartite.edgelist.p->line.find(comments)
A:networkx.algorithms.bipartite.edgelist.s->line.strip().split(delimiter)
A:networkx.algorithms.bipartite.edgelist.u->nodetype(u)
A:networkx.algorithms.bipartite.edgelist.v->nodetype(v)
A:networkx.algorithms.bipartite.edgelist.edgedata->dict(literal_eval(' '.join(d)))
A:networkx.algorithms.bipartite.edgelist.edge_value->edge_type(edge_value)
networkx.algorithms.bipartite.edgelist.generate_edgelist(G,delimiter='',data=True)
networkx.algorithms.bipartite.edgelist.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.algorithms.bipartite.edgelist.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.algorithms.bipartite.edgelist.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.algorithms.bipartite.generate_edgelist(G,delimiter='',data=True)
networkx.algorithms.bipartite.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.algorithms.bipartite.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.algorithms.bipartite.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/matching.py----------------------------------------
A:networkx.algorithms.bipartite.matching.INFINITY->float('inf')
A:networkx.algorithms.bipartite.matching.v->collections.deque().popleft()
A:networkx.algorithms.bipartite.matching.(left, right)->networkx.bipartite.sets(G, top_nodes)
A:networkx.algorithms.bipartite.matching.queue->collections.deque()
A:networkx.algorithms.bipartite.matching.G->networkx.DiGraph(G.edges(left))
A:networkx.algorithms.bipartite.matching.layer->list(pred)
A:networkx.algorithms.bipartite.matching.L->preds.pop(v)
A:networkx.algorithms.bipartite.matching.pu->pred.pop(u)
A:networkx.algorithms.bipartite.matching.visited->set()
A:networkx.algorithms.bipartite.matching.child->next(children)
A:networkx.algorithms.bipartite.matching.(L, R)->bipartite_sets(G, top_nodes)
A:networkx.algorithms.bipartite.matching.Z->_connected_by_alternating_paths(G, matching, U)
A:networkx.algorithms.bipartite.matching.U->list(left)
A:networkx.algorithms.bipartite.matching.V->list(right)
A:networkx.algorithms.bipartite.matching.weights_sparse->biadjacency_matrix(G, row_order=U, column_order=V, weight=weight, format='coo')
A:networkx.algorithms.bipartite.matching.weights->numpy.full(weights_sparse.shape, np.inf)
A:networkx.algorithms.bipartite.matching.left_matches->scipy.optimize.linear_sum_assignment(weights)
networkx.algorithms.bipartite._connected_by_alternating_paths(G,matching,targets)
networkx.algorithms.bipartite._is_connected_by_alternating_path(G,v,matched_edges,unmatched_edges,targets)
networkx.algorithms.bipartite.eppstein_matching(G,top_nodes=None)
networkx.algorithms.bipartite.hopcroft_karp_matching(G,top_nodes=None)
networkx.algorithms.bipartite.matching._connected_by_alternating_paths(G,matching,targets)
networkx.algorithms.bipartite.matching._is_connected_by_alternating_path(G,v,matched_edges,unmatched_edges,targets)
networkx.algorithms.bipartite.matching.eppstein_matching(G,top_nodes=None)
networkx.algorithms.bipartite.matching.hopcroft_karp_matching(G,top_nodes=None)
networkx.algorithms.bipartite.matching.minimum_weight_full_matching(G,top_nodes=None,weight='weight')
networkx.algorithms.bipartite.matching.to_vertex_cover(G,matching,top_nodes=None)
networkx.algorithms.bipartite.minimum_weight_full_matching(G,top_nodes=None,weight='weight')
networkx.algorithms.bipartite.to_vertex_cover(G,matching,top_nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_matrix.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_matrix.np->pytest.importorskip('numpy')
A:networkx.algorithms.bipartite.tests.test_matrix.sp->pytest.importorskip('scipy')
A:networkx.algorithms.bipartite.tests.test_matrix.sparse->pytest.importorskip('scipy.sparse')
A:networkx.algorithms.bipartite.tests.test_matrix.G->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_matrix.M->pytest.importorskip('scipy.sparse').csc_matrix([[1, 2], [0, 3]])
A:networkx.algorithms.bipartite.tests.test_matrix.B1->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_matrix.B2->networkx.algorithms.bipartite.from_biadjacency_matrix(M)
A:networkx.algorithms.bipartite.tests.test_matrix.B->networkx.algorithms.bipartite.from_biadjacency_matrix(M, create_using=nx.MultiGraph())
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_duplicate_col(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_duplicate_row(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_empty_graph(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_format_keyword(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_multigraph(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_roundtrip(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_weight(self)
networkx.algorithms.bipartite.tests.test_TestBiadjacencyMatrix.test_null_graph(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_row(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_empty_graph(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_format_keyword(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_multigraph(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_roundtrip(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_weight(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_null_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_centrality.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_centrality.cls.P4->networkx.path_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.cls.K3->networkx.complete_bipartite_graph(3, 3)
A:networkx.algorithms.bipartite.tests.test_centrality.cls.C4->networkx.cycle_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.cls.davis->networkx.davis_southern_women_graph()
A:networkx.algorithms.bipartite.tests.test_centrality.d->networkx.algorithms.bipartite.degree_centrality(self.C4, [0, 2])
A:networkx.algorithms.bipartite.tests.test_centrality.c->networkx.algorithms.bipartite.closeness_centrality(G, [1])
A:networkx.algorithms.bipartite.tests.test_centrality.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_centrality.deg->networkx.algorithms.bipartite.degree_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.bet->networkx.algorithms.bipartite.betweenness_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.clos->networkx.algorithms.bipartite.closeness_centrality(G, self.top_nodes)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.setup_class(cls)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteCentrality.test_degree_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setup_class(cls)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_cluster.G1->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7)])
A:networkx.algorithms.bipartite.tests.test_cluster.G2->networkx.Graph([(0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (1, 5)])
A:networkx.algorithms.bipartite.tests.test_cluster.G3->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)])
A:networkx.algorithms.bipartite.tests.test_cluster.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_cluster.cc4->round(bipartite.robins_alexander_clustering(G), 3)
networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_bad_mode()
networkx.algorithms.bipartite.tests.test_cluster.test_not_bipartite()
networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions()
networkx.algorithms.bipartite.tests.test_cluster.test_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_davis()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_square()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_zero()
networkx.algorithms.bipartite.tests.test_cluster.test_star_graph()
networkx.algorithms.bipartite.tests.test_test_average_path_graph()
networkx.algorithms.bipartite.tests.test_test_bad_mode()
networkx.algorithms.bipartite.tests.test_test_not_bipartite()
networkx.algorithms.bipartite.tests.test_test_pairwise_bipartite_cc_functions()
networkx.algorithms.bipartite.tests.test_test_path_graph()
networkx.algorithms.bipartite.tests.test_test_ra_clustering_davis()
networkx.algorithms.bipartite.tests.test_test_ra_clustering_square()
networkx.algorithms.bipartite.tests.test_test_ra_clustering_zero()
networkx.algorithms.bipartite.tests.test_test_star_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_spectral_bipartivity.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.G->networkx.complete_bipartite_graph(2, 3)
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.sbn->sb(G, nodes=[1, 2])
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_k23_like(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_project.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_project.G->networkx.algorithms.bipartite.generic_weighted_projected_graph(B, [0, 1])
A:networkx.algorithms.bipartite.tests.test_project.P->networkx.algorithms.bipartite.overlap_weighted_projected_graph(self.N, 'ABCDE')
A:networkx.algorithms.bipartite.tests.test_project.cls.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.cls.N->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.Panswer->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.B->networkx.bipartite.complete_bipartite_graph(2, 2)
A:networkx.algorithms.bipartite.tests.test_project.unbrs->set(G[u])
A:networkx.algorithms.bipartite.tests.test_project.vnbrs->set(G[v])
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setup_class(cls)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_generators.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_generators.G->gnmk_random_graph(n, m, edges)
A:networkx.algorithms.bipartite.tests.test_generators.mG->complete_bipartite_graph(7, 3)
A:networkx.algorithms.bipartite.tests.test_generators.n2->range(n2)
A:networkx.algorithms.bipartite.tests.test_generators.n1->range(n1)
A:networkx.algorithms.bipartite.tests.test_generators.GU->networkx.projected_graph(nx.Graph(G), range(len(aseq)))
A:networkx.algorithms.bipartite.tests.test_generators.GD->networkx.projected_graph(nx.Graph(G), range(len(aseq), len(aseq) + len(bseq)))
A:networkx.algorithms.bipartite.tests.test_generators.(X, Y)->networkx.algorithms.bipartite.sets(G)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_complete_bipartite_graph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_configuration_model(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_gnmk_random_graph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_gnmk_random_graph_complete(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_random_digraph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_random_graph(self)
networkx.algorithms.bipartite.tests.test_TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_complete_bipartite_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_configuration_model(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph_complete(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_digraph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_basic.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_basic.G->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_basic.c->networkx.algorithms.bipartite.color(nx.complete_graph(4))
A:networkx.algorithms.bipartite.tests.test_basic.(X, Y)->networkx.algorithms.bipartite.sets(G)
A:networkx.algorithms.bipartite.tests.test_basic.D->networkx.DiGraph(G.edges())
A:networkx.algorithms.bipartite.tests.test_basic.(u, d)->networkx.algorithms.bipartite.degrees(G, Y, weight='other')
A:networkx.algorithms.bipartite.tests.test_basic.M->networkx.algorithms.bipartite.biadjacency_matrix(G, X, Y, weight='weight')
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_color(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_degrees(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_density(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_directed(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets_directed(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets_disconnected(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets_given_top_nodes(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite_node_set(self)
networkx.algorithms.bipartite.tests.test_TestBipartiteBasic.test_not_bipartite_color(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_directed(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_disconnected(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets_given_top_nodes(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_not_bipartite_color(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_edgelist.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_edgelist.cls.G->networkx.Graph(name='test')
A:networkx.algorithms.bipartite.tests.test_edgelist.cls.DG->networkx.DiGraph(cls.G)
A:networkx.algorithms.bipartite.tests.test_edgelist.cls.MG->networkx.MultiGraph()
A:networkx.algorithms.bipartite.tests.test_edgelist.bytesIO->io.BytesIO()
A:networkx.algorithms.bipartite.tests.test_edgelist.G->networkx.path_graph(4)
A:networkx.algorithms.bipartite.tests.test_edgelist.fh->io.BytesIO()
A:networkx.algorithms.bipartite.tests.test_edgelist.(fd, fname)->tempfile.mkstemp()
A:networkx.algorithms.bipartite.tests.test_edgelist.H->networkx.algorithms.bipartite.read_edgelist(fname, nodetype=int, create_using=nx.MultiGraph())
A:networkx.algorithms.bipartite.tests.test_edgelist.H2->networkx.algorithms.bipartite.read_edgelist(fname, nodetype=int, create_using=nx.MultiGraph())
networkx.algorithms.bipartite.tests.test_TestEdgelist
networkx.algorithms.bipartite.tests.test_TestEdgelist.setup_class(cls)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_edgelist_graph(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_edgelist_integers(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_edgelist_multigraph(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_empty_digraph(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_latin1(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_latin1_issue(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_raise_attribute(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_read_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_read_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_unicode(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_write_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_write_edgelist_2(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_write_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_TestEdgelist.test_write_edgelist_4(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.setup_class(cls)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_graph(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_integers(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_empty_digraph(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1_issue(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_raise_attribute(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_unicode(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_matching.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_matching.self.simple_graph->networkx.complete_bipartite_graph(2, 3)
A:networkx.algorithms.bipartite.tests.test_matching.self.top_nodes->set(range(6))
A:networkx.algorithms.bipartite.tests.test_matching.self.graph->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_matching.G->networkx.complete_bipartite_graph(2, 2)
A:networkx.algorithms.bipartite.tests.test_matching.matched_vertices->frozenset(itertools.chain(*M.items()))
A:networkx.algorithms.bipartite.tests.test_matching.matching->minimum_weight_full_matching(G, weight='mass')
A:networkx.algorithms.bipartite.tests.test_matching.vertex_cover->to_vertex_cover(G, matching)
A:networkx.algorithms.bipartite.tests.test_matching.match->hopcroft_karp_matching(self.disconnected_graph)
A:networkx.algorithms.bipartite.tests.test_matching.tc->networkx.transitive_closure(G)
A:networkx.algorithms.bipartite.tests.test_matching.btc->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_matching.a->object()
A:networkx.algorithms.bipartite.tests.test_matching.b->object()
A:networkx.algorithms.bipartite.tests.test_matching.c->object()
A:networkx.algorithms.bipartite.tests.test_matching.d->object()
A:networkx.algorithms.bipartite.tests.test_matching.e->object()
A:networkx.algorithms.bipartite.tests.test_matching.B->networkx.Graph()
networkx.algorithms.bipartite.tests.test_TestMatching
networkx.algorithms.bipartite.tests.test_TestMatching.check_match(self,matching)
networkx.algorithms.bipartite.tests.test_TestMatching.check_vertex_cover(self,vertices)
networkx.algorithms.bipartite.tests.test_TestMatching.setup_method(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_eppstein_matching(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_eppstein_matching_disconnected(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_eppstein_matching_simple(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_hopcroft_karp_matching(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_hopcroft_karp_matching_disconnected(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_hopcroft_karp_matching_simple(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_issue_2127(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_to_vertex_cover(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_unorderable_nodes(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_vertex_cover_issue_2384(self)
networkx.algorithms.bipartite.tests.test_TestMatching.test_vertex_cover_issue_3306(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.setup_class(cls)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_different_weight_key(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_incomplete_graph(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_negative_weights(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_left(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_right(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_top_nodes_right(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_square(self)
networkx.algorithms.bipartite.tests.test_TestMinimumWeightFullMatching.test_minimum_weight_full_matching_with_no_full_matching(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching
networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_match(self,matching)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_vertex_cover(self,vertices)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.setup_method(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_disconnected(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching_simple(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_disconnected(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching_simple(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_issue_2127(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_to_vertex_cover(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_unorderable_nodes(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_vertex_cover_issue_2384(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_vertex_cover_issue_3306(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.setup_class(cls)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_different_weight_key(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_incomplete_graph(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_negative_weights(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_left(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_right(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_smaller_top_nodes_right(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_square(self)
networkx.algorithms.bipartite.tests.test_matching.TestMinimumWeightFullMatching.test_minimum_weight_full_matching_with_no_full_matching(self)
networkx.algorithms.bipartite.tests.test_matching.test_eppstein_matching()
networkx.algorithms.bipartite.tests.test_test_eppstein_matching()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_redundancy.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_redundancy.G->complete_bipartite_graph(1, 2)
A:networkx.algorithms.bipartite.tests.test_redundancy.rc->node_redundancy(G)
A:networkx.algorithms.bipartite.tests.test_redundancy.redundancy->node_redundancy(G)
networkx.algorithms.bipartite.tests.test_redundancy.test_no_redundant_nodes()
networkx.algorithms.bipartite.tests.test_redundancy.test_not_enough_neighbors()
networkx.algorithms.bipartite.tests.test_redundancy.test_redundant_nodes()
networkx.algorithms.bipartite.tests.test_test_no_redundant_nodes()
networkx.algorithms.bipartite.tests.test_test_not_enough_neighbors()
networkx.algorithms.bipartite.tests.test_test_redundant_nodes()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/bipartite/tests/test_covering.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_covering.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_covering.min_cover->networkx.algorithms.bipartite.min_edge_cover(G, bipartite.eppstein_matching)
networkx.algorithms.bipartite.tests.test_TestMinEdgeCover
networkx.algorithms.bipartite.tests.test_TestMinEdgeCover.test_bipartite_default(self)
networkx.algorithms.bipartite.tests.test_TestMinEdgeCover.test_bipartite_explicit(self)
networkx.algorithms.bipartite.tests.test_TestMinEdgeCover.test_empty_graph(self)
networkx.algorithms.bipartite.tests.test_TestMinEdgeCover.test_graph_single_edge(self)
networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover
networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_default(self)
networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_bipartite_explicit(self)
networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_empty_graph(self)
networkx.algorithms.bipartite.tests.test_covering.TestMinEdgeCover.test_graph_single_edge(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/decomposition.py----------------------------------------
A:networkx.algorithms.tree.decomposition.clique_graph->networkx.Graph()
A:networkx.algorithms.tree.decomposition.G->networkx.algorithms.moral.moral_graph(G)
A:networkx.algorithms.tree.decomposition.(chordal_graph, _)->complete_to_chordal_graph(G)
A:networkx.algorithms.tree.decomposition.set_edge_0->set(edge[0])
A:networkx.algorithms.tree.decomposition.set_edge_1->set(edge[1])
A:networkx.algorithms.tree.decomposition.sepset->tuple(sorted(set_edge_0.intersection(set_edge_1)))
A:networkx.algorithms.tree.decomposition.junction_tree->networkx.maximum_spanning_tree(clique_graph)
networkx.algorithms.tree.decomposition.junction_tree(G)
networkx.algorithms.tree.junction_tree(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/mst.py----------------------------------------
A:networkx.algorithms.tree.mst.forest->UnionFind(G)
A:networkx.algorithms.tree.mst.minwt->float('inf')
A:networkx.algorithms.tree.mst.subtrees->UnionFind()
A:networkx.algorithms.tree.mst.edges->list(edges)
A:networkx.algorithms.tree.mst.wt->d.get(weight, 1)
A:networkx.algorithms.tree.mst.sorted_open_edges->sorted(open_edges, key=itemgetter(0), reverse=True)
A:networkx.algorithms.tree.mst.is_multigraph->G.is_multigraph()
A:networkx.algorithms.tree.mst.nodes->set(G)
A:networkx.algorithms.tree.mst.c->count()
A:networkx.algorithms.tree.mst.u->set(G).pop()
A:networkx.algorithms.tree.mst.(W, _, u, v, k, d)->pop(frontier)
A:networkx.algorithms.tree.mst.(W, _, u, v, d)->pop(frontier)
A:networkx.algorithms.tree.mst.T->G.__class__()
A:networkx.algorithms.tree.mst.rep->find_node(merged_nodes, merged_nodes[node])
A:networkx.algorithms.tree.mst.result->networkx.MultiGraph(incoming_graph_data=G)
A:networkx.algorithms.tree.mst.edges_to_remove->set(result.edges()).difference(V)
A:networkx.algorithms.tree.mst.u_rep->find_node(merged_nodes, u)
A:networkx.algorithms.tree.mst.v_rep->find_node(merged_nodes, v)
A:networkx.algorithms.tree.mst.U->set()
A:networkx.algorithms.tree.mst.V->set(G.edges())
A:networkx.algorithms.tree.mst.shuffled_edges->list(G.edges())
A:networkx.algorithms.tree.mst.(node_map, prepared_G)->prepare_graph()
A:networkx.algorithms.tree.mst.G_total_tree_weight->spanning_tree_total_weight(prepared_G, weight)
A:networkx.algorithms.tree.mst.prepared_G_e->networkx.contracted_edge(prepared_G, edge=rep_edge, self_loops=False)
A:networkx.algorithms.tree.mst.G_e_total_tree_weight->spanning_tree_total_weight(prepared_G_e, weight)
A:networkx.algorithms.tree.mst.z->seed.uniform(0.0, 1.0)
A:networkx.algorithms.tree.mst.spanning_tree->networkx.Graph()
A:networkx.algorithms.tree.mst.self.G->G.copy()
A:networkx.algorithms.tree.mst.self.partition_queue->PriorityQueue()
A:networkx.algorithms.tree.mst.mst_weight->partition_spanning_tree(self.G, self.minimum, self.weight, self.partition_key, self.ignore_nan).size(weight=self.weight)
A:networkx.algorithms.tree.mst.partition->self.partition_queue.get()
A:networkx.algorithms.tree.mst.next_tree->partition_spanning_tree(self.G, self.minimum, self.weight, self.partition_key, self.ignore_nan)
A:networkx.algorithms.tree.mst.p1->self.Partition(0, partition.partition_dict.copy())
A:networkx.algorithms.tree.mst.p2->self.Partition(0, partition.partition_dict.copy())
A:networkx.algorithms.tree.mst.p1_mst->partition_spanning_tree(self.G, self.minimum, self.weight, self.partition_key, self.ignore_nan)
A:networkx.algorithms.tree.mst.p1_mst_weight->partition_spanning_tree(self.G, self.minimum, self.weight, self.partition_key, self.ignore_nan).size(weight=self.weight)
A:networkx.algorithms.tree.mst.p1.partition_dict->self.Partition(0, partition.partition_dict.copy()).partition_dict.copy()
networkx.algorithms.tree.EdgePartition(Enum)
networkx.algorithms.tree.SpanningTreeIterator(self,G,weight='weight',minimum=True,ignore_nan=False)
networkx.algorithms.tree.SpanningTreeIterator.Partition
networkx.algorithms.tree.SpanningTreeIterator.Partition.__copy__(self)
networkx.algorithms.tree.SpanningTreeIterator.__iter__(self)
networkx.algorithms.tree.SpanningTreeIterator.__next__(self)
networkx.algorithms.tree.SpanningTreeIterator._clear_partition(self,G)
networkx.algorithms.tree.SpanningTreeIterator._partition(self,partition,partition_tree)
networkx.algorithms.tree.SpanningTreeIterator._write_partition(self,partition)
networkx.algorithms.tree.boruvka_mst_edges(G,minimum=True,weight='weight',keys=False,data=True,ignore_nan=False)
networkx.algorithms.tree.kruskal_mst_edges(G,minimum,weight='weight',keys=True,data=True,ignore_nan=False,partition=None)
networkx.algorithms.tree.maximum_spanning_edges(G,algorithm='kruskal',weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.maximum_spanning_tree(G,weight='weight',algorithm='kruskal',ignore_nan=False)
networkx.algorithms.tree.minimum_spanning_edges(G,algorithm='kruskal',weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.minimum_spanning_tree(G,weight='weight',algorithm='kruskal',ignore_nan=False)
networkx.algorithms.tree.mst.EdgePartition(Enum)
networkx.algorithms.tree.mst.SpanningTreeIterator(self,G,weight='weight',minimum=True,ignore_nan=False)
networkx.algorithms.tree.mst.SpanningTreeIterator.Partition
networkx.algorithms.tree.mst.SpanningTreeIterator.Partition.__copy__(self)
networkx.algorithms.tree.mst.SpanningTreeIterator.__init__(self,G,weight='weight',minimum=True,ignore_nan=False)
networkx.algorithms.tree.mst.SpanningTreeIterator.__iter__(self)
networkx.algorithms.tree.mst.SpanningTreeIterator.__next__(self)
networkx.algorithms.tree.mst.SpanningTreeIterator._clear_partition(self,G)
networkx.algorithms.tree.mst.SpanningTreeIterator._partition(self,partition,partition_tree)
networkx.algorithms.tree.mst.SpanningTreeIterator._write_partition(self,partition)
networkx.algorithms.tree.mst.boruvka_mst_edges(G,minimum=True,weight='weight',keys=False,data=True,ignore_nan=False)
networkx.algorithms.tree.mst.kruskal_mst_edges(G,minimum,weight='weight',keys=True,data=True,ignore_nan=False,partition=None)
networkx.algorithms.tree.mst.maximum_spanning_edges(G,algorithm='kruskal',weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.mst.maximum_spanning_tree(G,weight='weight',algorithm='kruskal',ignore_nan=False)
networkx.algorithms.tree.mst.minimum_spanning_edges(G,algorithm='kruskal',weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.mst.minimum_spanning_tree(G,weight='weight',algorithm='kruskal',ignore_nan=False)
networkx.algorithms.tree.mst.partition_spanning_tree(G,minimum=True,weight='weight',partition='partition',ignore_nan=False)
networkx.algorithms.tree.mst.prim_mst_edges(G,minimum,weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.mst.random_spanning_tree(G,weight=None,*,multiplicative=True,seed=None)
networkx.algorithms.tree.partition_spanning_tree(G,minimum=True,weight='weight',partition='partition',ignore_nan=False)
networkx.algorithms.tree.prim_mst_edges(G,minimum,weight='weight',keys=True,data=True,ignore_nan=False)
networkx.algorithms.tree.random_spanning_tree(G,weight=None,*,multiplicative=True,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/recognition.py----------------------------------------
networkx.algorithms.tree.is_arborescence(G)
networkx.algorithms.tree.is_branching(G)
networkx.algorithms.tree.is_forest(G)
networkx.algorithms.tree.is_tree(G)
networkx.algorithms.tree.recognition.is_arborescence(G)
networkx.algorithms.tree.recognition.is_branching(G)
networkx.algorithms.tree.recognition.is_forest(G)
networkx.algorithms.tree.recognition.is_tree(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/branchings.py----------------------------------------
A:networkx.algorithms.tree.branchings.INF->float('inf')
A:networkx.algorithms.tree.branchings.attr->random_string(seed=seed)
A:networkx.algorithms.tree.branchings.B->Edmonds(G).find_optimum(attr, default, kind='min', style='arborescence', preserve_attrs=preserve_attrs, partition=partition)
A:networkx.algorithms.tree.branchings.uf->networkx.utils.UnionFind()
A:networkx.algorithms.tree.branchings.cls->super()
A:networkx.algorithms.tree.branchings.keys->list(keys)
A:networkx.algorithms.tree.branchings.nodes->iter(list(G.nodes()))
A:networkx.algorithms.tree.branchings.self.GG->MultiDiGraph_EdgeKey()
A:networkx.algorithms.tree.branchings.d[partition]->data.get(partition)
A:networkx.algorithms.tree.branchings.self.B->MultiDiGraph_EdgeKey()
A:networkx.algorithms.tree.branchings.self.uf->networkx.utils.UnionFind()
A:networkx.algorithms.tree.branchings.D->set()
A:networkx.algorithms.tree.branchings.v->next(nodes)
A:networkx.algorithms.tree.branchings.(edge, weight)->desired_edge(v)
A:networkx.algorithms.tree.branchings.(Q_nodes, Q_edges)->get_path(B, v, u)
A:networkx.algorithms.tree.branchings.dd[partition]->edge[4].get(partition)
A:networkx.algorithms.tree.branchings.new_node->self.template.format(self.level)
A:networkx.algorithms.tree.branchings.dd->data.copy()
A:networkx.algorithms.tree.branchings.H->self.G_original.__class__()
A:networkx.algorithms.tree.branchings.edges->set(self.branchings[self.level].edge_index)
A:networkx.algorithms.tree.branchings.merged_node->self.template.format(self.level)
A:networkx.algorithms.tree.branchings.(isroot, edgekey)->is_root(self.graphs[self.level + 1], merged_node, edges)
A:networkx.algorithms.tree.branchings.ed->Edmonds(G)
A:networkx.algorithms.tree.branchings.maximum_branching.__doc__->docstring_branching.format(kind='maximum', style='branching')
A:networkx.algorithms.tree.branchings.minimum_branching.__doc__->docstring_branching.format(kind='minimum', style='branching')
A:networkx.algorithms.tree.branchings.maximum_spanning_arborescence.__doc__->docstring_arborescence.format(kind='maximum', style='spanning arborescence')
A:networkx.algorithms.tree.branchings.minimum_spanning_arborescence.__doc__->docstring_arborescence.format(kind='minimum', style='spanning arborescence')
A:networkx.algorithms.tree.branchings.self.G->G.copy()
A:networkx.algorithms.tree.branchings.self.init_partition->ArborescenceIterator.Partition(0, partition_dict)
A:networkx.algorithms.tree.branchings.self.partition_queue->PriorityQueue()
A:networkx.algorithms.tree.branchings.mst_weight->self.method(self.G, self.weight, partition=self.partition_key, preserve_attrs=True).size(weight=self.weight)
A:networkx.algorithms.tree.branchings.partition->self.partition_queue.get()
A:networkx.algorithms.tree.branchings.next_arborescence->self.method(self.G, self.weight, partition=self.partition_key, preserve_attrs=True)
A:networkx.algorithms.tree.branchings.p1->self.Partition(0, partition.partition_dict.copy())
A:networkx.algorithms.tree.branchings.p2->self.Partition(0, partition.partition_dict.copy())
A:networkx.algorithms.tree.branchings.p1_mst->self.method(self.G, self.weight, partition=self.partition_key, preserve_attrs=True)
A:networkx.algorithms.tree.branchings.p1_mst_weight->self.method(self.G, self.weight, partition=self.partition_key, preserve_attrs=True).size(weight=self.weight)
A:networkx.algorithms.tree.branchings.p1.partition_dict->self.Partition(0, partition.partition_dict.copy()).partition_dict.copy()
networkx.algorithms.tree.ArborescenceIterator(self,G,weight='weight',minimum=True,init_partition=None)
networkx.algorithms.tree.ArborescenceIterator.Partition
networkx.algorithms.tree.ArborescenceIterator.Partition.__copy__(self)
networkx.algorithms.tree.ArborescenceIterator.__iter__(self)
networkx.algorithms.tree.ArborescenceIterator.__next__(self)
networkx.algorithms.tree.ArborescenceIterator._clear_partition(self,G)
networkx.algorithms.tree.ArborescenceIterator._partition(self,partition,partition_arborescence)
networkx.algorithms.tree.ArborescenceIterator._write_partition(self,partition)
networkx.algorithms.tree.Edmonds(self,G,seed=None)
networkx.algorithms.tree.Edmonds._init(self,attr,default,kind,style,preserve_attrs,seed,partition)
networkx.algorithms.tree.Edmonds.find_optimum(self,attr='weight',default=1,kind='max',style='branching',preserve_attrs=False,partition=None,seed=None)
networkx.algorithms.tree.MultiDiGraph_EdgeKey(self,incoming_graph_data=None,**attr)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.add_edge(self,u_for_edge,v_for_edge,key_for_edge,**attr)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.add_edges_from(self,ebunch_to_add,**attr)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.remove_edge_with_key(self,key)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.remove_edges_from(self,ebunch)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.remove_node(self,n)
networkx.algorithms.tree.MultiDiGraph_EdgeKey.remove_nodes_from(self,nbunch)
networkx.algorithms.tree._max_weight(weight)
networkx.algorithms.tree._min_weight(weight)
networkx.algorithms.tree.branching_weight(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.ArborescenceIterator(self,G,weight='weight',minimum=True,init_partition=None)
networkx.algorithms.tree.branchings.ArborescenceIterator.Partition
networkx.algorithms.tree.branchings.ArborescenceIterator.Partition.__copy__(self)
networkx.algorithms.tree.branchings.ArborescenceIterator.__init__(self,G,weight='weight',minimum=True,init_partition=None)
networkx.algorithms.tree.branchings.ArborescenceIterator.__iter__(self)
networkx.algorithms.tree.branchings.ArborescenceIterator.__next__(self)
networkx.algorithms.tree.branchings.ArborescenceIterator._clear_partition(self,G)
networkx.algorithms.tree.branchings.ArborescenceIterator._partition(self,partition,partition_arborescence)
networkx.algorithms.tree.branchings.ArborescenceIterator._write_partition(self,partition)
networkx.algorithms.tree.branchings.Edmonds(self,G,seed=None)
networkx.algorithms.tree.branchings.Edmonds.__init__(self,G,seed=None)
networkx.algorithms.tree.branchings.Edmonds._init(self,attr,default,kind,style,preserve_attrs,seed,partition)
networkx.algorithms.tree.branchings.Edmonds.find_optimum(self,attr='weight',default=1,kind='max',style='branching',preserve_attrs=False,partition=None,seed=None)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey(self,incoming_graph_data=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.__init__(self,incoming_graph_data=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edge(self,u_for_edge,v_for_edge,key_for_edge,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edges_from(self,ebunch_to_add,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edge_with_key(self,key)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edges_from(self,ebunch)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_node(self,n)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_nodes_from(self,nbunch)
networkx.algorithms.tree.branchings._max_weight(weight)
networkx.algorithms.tree.branchings._min_weight(weight)
networkx.algorithms.tree.branchings.branching_weight(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.get_path(G,u,v)
networkx.algorithms.tree.branchings.greedy_branching(G,attr='weight',default=1,kind='max',seed=None)
networkx.algorithms.tree.branchings.maximum_branching(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.branchings.maximum_spanning_arborescence(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.branchings.minimum_branching(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.branchings.minimum_spanning_arborescence(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.branchings.random_string(L=15,seed=None)
networkx.algorithms.tree.get_path(G,u,v)
networkx.algorithms.tree.greedy_branching(G,attr='weight',default=1,kind='max',seed=None)
networkx.algorithms.tree.maximum_branching(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.maximum_spanning_arborescence(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.minimum_branching(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.minimum_spanning_arborescence(G,attr='weight',default=1,preserve_attrs=False,partition=None)
networkx.algorithms.tree.random_string(L=15,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/operations.py----------------------------------------
A:networkx.algorithms.tree.operations.(trees, roots)->zip(*rooted_trees)
A:networkx.algorithms.tree.operations.R->type(trees[0])()
A:networkx.algorithms.tree.operations.relabel->partial(nx.convert_node_labels_to_integers, label_attribute=label_attribute)
A:networkx.algorithms.tree.operations.first_labels->chain([0], accumulate(lengths))
networkx.algorithms.tree.join(rooted_trees,label_attribute=None)
networkx.algorithms.tree.operations.join(rooted_trees,label_attribute=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/coding.py----------------------------------------
A:networkx.algorithms.tree.coding.nested->sorted(nested)
A:networkx.algorithms.tree.coding.T->networkx.empty_graph(n)
A:networkx.algorithms.tree.coding.bfs_nodes->chain([0], (v for (u, v) in nx.bfs_edges(T, 0)))
A:networkx.algorithms.tree.coding.n->len(T)
A:networkx.algorithms.tree.coding.degree->Counter(chain(sequence, range(n)))
A:networkx.algorithms.tree.coding.indexu->next((k for k in range(index + 1, n) if degree[k] == 1))
A:networkx.algorithms.tree.coding.v->parents(u)
A:networkx.algorithms.tree.coding.not_orphaned->set()
networkx.algorithms.tree.NotATree(nx.NetworkXException)
networkx.algorithms.tree.coding.NotATree(nx.NetworkXException)
networkx.algorithms.tree.coding.from_nested_tuple(sequence,sensible_relabeling=False)
networkx.algorithms.tree.coding.from_prufer_sequence(sequence)
networkx.algorithms.tree.coding.to_nested_tuple(T,root,canonical_form=False)
networkx.algorithms.tree.coding.to_prufer_sequence(T)
networkx.algorithms.tree.from_nested_tuple(sequence,sensible_relabeling=False)
networkx.algorithms.tree.from_prufer_sequence(sequence)
networkx.algorithms.tree.to_nested_tuple(T,root,canonical_form=False)
networkx.algorithms.tree.to_prufer_sequence(T)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_operations.py----------------------------------------
A:networkx.algorithms.tree.tests.test_operations.T->networkx.empty_graph(1)
A:networkx.algorithms.tree.tests.test_operations.actual->networkx.join(trees)
A:networkx.algorithms.tree.tests.test_operations.expected->networkx.full_rary_tree(2, 2 ** 3 - 1)
networkx.algorithms.tree.tests.test_TestJoin
networkx.algorithms.tree.tests.test_TestJoin.test_basic(self)
networkx.algorithms.tree.tests.test_TestJoin.test_empty_sequence(self)
networkx.algorithms.tree.tests.test_TestJoin.test_single(self)
networkx.algorithms.tree.tests.test_operations.TestJoin
networkx.algorithms.tree.tests.test_operations.TestJoin.test_basic(self)
networkx.algorithms.tree.tests.test_operations.TestJoin.test_empty_sequence(self)
networkx.algorithms.tree.tests.test_operations.TestJoin.test_single(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_decomposition.py----------------------------------------
A:networkx.algorithms.tree.tests.test_decomposition.B->networkx.Graph()
A:networkx.algorithms.tree.tests.test_decomposition.G->junction_tree(B)
A:networkx.algorithms.tree.tests.test_decomposition.J->networkx.Graph()
networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_cascade()
networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_confounders()
networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_edges()
networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_directed_unconnected_nodes()
networkx.algorithms.tree.tests.test_decomposition.test_junction_tree_undirected()
networkx.algorithms.tree.tests.test_test_junction_tree_directed_cascade()
networkx.algorithms.tree.tests.test_test_junction_tree_directed_confounders()
networkx.algorithms.tree.tests.test_test_junction_tree_directed_unconnected_edges()
networkx.algorithms.tree.tests.test_test_junction_tree_directed_unconnected_nodes()
networkx.algorithms.tree.tests.test_test_junction_tree_undirected()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_recognition.py----------------------------------------
A:networkx.algorithms.tree.tests.test_recognition.cls.T1->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.T2->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.T3->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.T5->cls.multigraph()
A:networkx.algorithms.tree.tests.test_recognition.cls.T6->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.F1->networkx.compose(cls.T6, cls.T3)
A:networkx.algorithms.tree.tests.test_recognition.cls.N4->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.N5->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.N6->cls.graph()
A:networkx.algorithms.tree.tests.test_recognition.cls.NF1->networkx.compose(cls.T6, cls.N6)
A:networkx.algorithms.tree.tests.test_recognition.G->networkx.MultiDiGraph()
networkx.algorithms.tree.tests.test_TestDirectedTreeRecognition(TestTreeRecognition)
networkx.algorithms.tree.tests.test_TestTreeRecognition
networkx.algorithms.tree.tests.test_TestTreeRecognition.setup_class(cls)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_is_forest(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_is_not_forest(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_is_not_tree(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_is_tree(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_null_forest(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_null_forest2(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_null_tree(self)
networkx.algorithms.tree.tests.test_TestTreeRecognition.test_null_tree2(self)
networkx.algorithms.tree.tests.test_recognition.TestDirectedTreeRecognition(TestTreeRecognition)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.setup_class(cls)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_tree(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_tree(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest2(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree2(self)
networkx.algorithms.tree.tests.test_recognition.test_dag_nontree()
networkx.algorithms.tree.tests.test_recognition.test_disconnected_graph()
networkx.algorithms.tree.tests.test_recognition.test_emptybranch()
networkx.algorithms.tree.tests.test_recognition.test_multicycle()
networkx.algorithms.tree.tests.test_recognition.test_notarborescence1()
networkx.algorithms.tree.tests.test_recognition.test_notarborescence2()
networkx.algorithms.tree.tests.test_recognition.test_notbranching1()
networkx.algorithms.tree.tests.test_recognition.test_notbranching2()
networkx.algorithms.tree.tests.test_recognition.test_path()
networkx.algorithms.tree.tests.test_test_dag_nontree()
networkx.algorithms.tree.tests.test_test_disconnected_graph()
networkx.algorithms.tree.tests.test_test_emptybranch()
networkx.algorithms.tree.tests.test_test_multicycle()
networkx.algorithms.tree.tests.test_test_notarborescence1()
networkx.algorithms.tree.tests.test_test_notarborescence2()
networkx.algorithms.tree.tests.test_test_notbranching1()
networkx.algorithms.tree.tests.test_test_notbranching2()
networkx.algorithms.tree.tests.test_test_path()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_coding.py----------------------------------------
A:networkx.algorithms.tree.tests.test_coding.G->networkx.path_graph(2)
A:networkx.algorithms.tree.tests.test_coding.T->networkx.from_nested_tuple(balanced, sensible_relabeling=True)
A:networkx.algorithms.tree.tests.test_coding.tree->networkx.from_prufer_sequence(sequence)
A:networkx.algorithms.tree.tests.test_coding.sequence->networkx.to_prufer_sequence(tree)
A:networkx.algorithms.tree.tests.test_coding.T2->networkx.from_prufer_sequence(nx.to_prufer_sequence(T))
A:networkx.algorithms.tree.tests.test_coding.seq2->networkx.to_prufer_sequence(nx.from_prufer_sequence(seq))
A:networkx.algorithms.tree.tests.test_coding.actual->networkx.from_nested_tuple(balanced)
A:networkx.algorithms.tree.tests.test_coding.expected->networkx.full_rary_tree(2, 2 ** 3 - 1)
networkx.algorithms.tree.tests.test_TestNestedTuple
networkx.algorithms.tree.tests.test_TestNestedTuple.test_canonical_form(self)
networkx.algorithms.tree.tests.test_TestNestedTuple.test_decoding(self)
networkx.algorithms.tree.tests.test_TestNestedTuple.test_encoding(self)
networkx.algorithms.tree.tests.test_TestNestedTuple.test_nontree(self)
networkx.algorithms.tree.tests.test_TestNestedTuple.test_sensible_relabeling(self)
networkx.algorithms.tree.tests.test_TestNestedTuple.test_unknown_root(self)
networkx.algorithms.tree.tests.test_TestPruferSequence
networkx.algorithms.tree.tests.test_TestPruferSequence.test_bad_integer_labels(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_decoding(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_decoding2(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_encoding(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_inverse(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_nontree(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_null_graph(self)
networkx.algorithms.tree.tests.test_TestPruferSequence.test_trivial_graph(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_canonical_form(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_decoding(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_encoding(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_nontree(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_sensible_relabeling(self)
networkx.algorithms.tree.tests.test_coding.TestNestedTuple.test_unknown_root(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_bad_integer_labels(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_decoding2(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_encoding(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_inverse(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_nontree(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_null_graph(self)
networkx.algorithms.tree.tests.test_coding.TestPruferSequence.test_trivial_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_mst.py----------------------------------------
A:networkx.algorithms.tree.tests.test_mst.self.G->networkx.Graph()
A:networkx.algorithms.tree.tests.test_mst.edges->networkx.minimum_spanning_edges(self.G, algorithm='borůvka')
A:networkx.algorithms.tree.tests.test_mst.actual->sorted(tree.edges(data=True))
A:networkx.algorithms.tree.tests.test_mst.G->networkx.Graph()
A:networkx.algorithms.tree.tests.test_mst.T->networkx.maximum_spanning_tree(G, algorithm=self.algo)
A:networkx.algorithms.tree.tests.test_mst.mst_edges->max_edges(G, algorithm=self.algo, data=False)
A:networkx.algorithms.tree.tests.test_mst.solution->networkx.Graph()
A:networkx.algorithms.tree.tests.test_mst.sampled_tree->networkx.random_spanning_tree(G, 'weight', multiplicative=False, seed=rng)
A:networkx.algorithms.tree.tests.test_mst.stats->pytest.importorskip('scipy.stats')
A:networkx.algorithms.tree.tests.test_mst.rng->Random(37)
A:networkx.algorithms.tree.tests.test_mst.(_, p)->pytest.importorskip('scipy.stats').chisquare(list(tree_actual.values()), list(tree_expected.values()))
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.setup_method(self,method)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_attributes(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_disconnected(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_empty_graph(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_isolated_node(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_maximum_edges(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_maximum_tree(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_minimum_edges(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_minimum_tree(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_nan_weights(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_nan_weights_order(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_weight_attribute(self)
networkx.algorithms.tree.tests.test_MinimumSpanningTreeTestBase.test_without_data(self)
networkx.algorithms.tree.tests.test_MultigraphMSTTestBase(MinimumSpanningTreeTestBase)
networkx.algorithms.tree.tests.test_MultigraphMSTTestBase.test_multigraph_keys_max(self)
networkx.algorithms.tree.tests.test_MultigraphMSTTestBase.test_multigraph_keys_min(self)
networkx.algorithms.tree.tests.test_TestBoruvka(MinimumSpanningTreeTestBase)
networkx.algorithms.tree.tests.test_TestBoruvka.test_unicode_name(self)
networkx.algorithms.tree.tests.test_TestKruskal(MultigraphMSTTestBase)
networkx.algorithms.tree.tests.test_TestPrim(MultigraphMSTTestBase)
networkx.algorithms.tree.tests.test_TestPrim.test_multigraph_keys_tree(self)
networkx.algorithms.tree.tests.test_TestPrim.test_multigraph_keys_tree_max(self)
networkx.algorithms.tree.tests.test_TestSpanningTreeIterator
networkx.algorithms.tree.tests.test_TestSpanningTreeIterator.setup_method(self)
networkx.algorithms.tree.tests.test_TestSpanningTreeIterator.test_maximum_spanning_tree_iterator(self)
networkx.algorithms.tree.tests.test_TestSpanningTreeIterator.test_minimum_spanning_tree_iterator(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.setup_method(self,method)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_attributes(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_disconnected(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_empty_graph(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_isolated_node(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_edges(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_maximum_tree(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_edges(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_minimum_tree(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_nan_weights_order(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_weight_attribute(self)
networkx.algorithms.tree.tests.test_mst.MinimumSpanningTreeTestBase.test_without_data(self)
networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase(MinimumSpanningTreeTestBase)
networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_max(self)
networkx.algorithms.tree.tests.test_mst.MultigraphMSTTestBase.test_multigraph_keys_min(self)
networkx.algorithms.tree.tests.test_mst.TestBoruvka(MinimumSpanningTreeTestBase)
networkx.algorithms.tree.tests.test_mst.TestBoruvka.test_unicode_name(self)
networkx.algorithms.tree.tests.test_mst.TestKruskal(MultigraphMSTTestBase)
networkx.algorithms.tree.tests.test_mst.TestPrim(MultigraphMSTTestBase)
networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree(self)
networkx.algorithms.tree.tests.test_mst.TestPrim.test_multigraph_keys_tree_max(self)
networkx.algorithms.tree.tests.test_mst.TestSpanningTreeIterator
networkx.algorithms.tree.tests.test_mst.TestSpanningTreeIterator.setup_method(self)
networkx.algorithms.tree.tests.test_mst.TestSpanningTreeIterator.test_maximum_spanning_tree_iterator(self)
networkx.algorithms.tree.tests.test_mst.TestSpanningTreeIterator.test_minimum_spanning_tree_iterator(self)
networkx.algorithms.tree.tests.test_mst.test_random_spanning_tree_additive_large()
networkx.algorithms.tree.tests.test_mst.test_random_spanning_tree_additive_small()
networkx.algorithms.tree.tests.test_mst.test_random_spanning_tree_multiplicative_large()
networkx.algorithms.tree.tests.test_mst.test_random_spanning_tree_multiplicative_small()
networkx.algorithms.tree.tests.test_mst.test_unknown_algorithm()
networkx.algorithms.tree.tests.test_test_random_spanning_tree_additive_large()
networkx.algorithms.tree.tests.test_test_random_spanning_tree_additive_small()
networkx.algorithms.tree.tests.test_test_random_spanning_tree_multiplicative_large()
networkx.algorithms.tree.tests.test_test_random_spanning_tree_multiplicative_small()
networkx.algorithms.tree.tests.test_test_unknown_algorithm()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/tree/tests/test_branchings.py----------------------------------------
A:networkx.algorithms.tree.tests.test_branchings.np->pytest.importorskip('numpy')
A:networkx.algorithms.tree.tests.test_branchings.G_array->pytest.importorskip('numpy').array([[0, 0, 12, 0, 12, 0, 0, 0, 0], [4, 0, 0, 0, 0, 13, 0, 0, 0], [0, 17, 0, 21, 0, 12, 0, 0, 0], [5, 0, 0, 0, 17, 0, 18, 0, 0], [0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 14, 0, 12], [0, 0, 21, 0, 0, 0, 0, 0, 15], [0, 0, 0, 19, 0, 0, 15, 0, 0], [0, 0, 0, 0, 0, 0, 0, 18, 0]], dtype=int)
A:networkx.algorithms.tree.tests.test_branchings.G->networkx.from_numpy_array(G_array, create_using=nx.DiGraph)
A:networkx.algorithms.tree.tests.test_branchings.Garr->pytest.importorskip('numpy').array([[0, 0, 12, 0, 12, 0, 0, 0, 0], [4, 0, 0, 0, 0, 13, 0, 0, 0], [0, 17, 0, 21, 0, 12, 0, 0, 0], [5, 0, 0, 0, 17, 0, 18, 0, 0], [0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 14, 0, 12], [0, 0, 21, 0, 0, 0, 0, 0, 15], [0, 0, 0, 19, 0, 0, 15, 0, 0], [0, 0, 0, 0, 0, 0, 0, 18, 0]], dtype=int).copy()
A:networkx.algorithms.tree.tests.test_branchings.edges->sorted(edges, key=lambda x: (x[2], x[1], x[0]))
A:networkx.algorithms.tree.tests.test_branchings.edges1->list(G1.edges(data=True))
A:networkx.algorithms.tree.tests.test_branchings.edges2->list(G2.edges(data=True))
A:networkx.algorithms.tree.tests.test_branchings.e1->sorted_edges(G1, attr, default)
A:networkx.algorithms.tree.tests.test_branchings.e2->sorted_edges(G2, attr, default)
A:networkx.algorithms.tree.tests.test_branchings.B->networkx.algorithms.tree.branchings.minimum_spanning_arborescence(G, partition='partition')
A:networkx.algorithms.tree.tests.test_branchings.B_->build_branching(edges)
A:networkx.algorithms.tree.tests.test_branchings.x->networkx.algorithms.tree.branchings.minimum_branching(G)
A:networkx.algorithms.tree.tests.test_branchings.x_->build_branching(edges)
A:networkx.algorithms.tree.tests.test_branchings.ed->networkx.algorithms.tree.branchings.Edmonds(G)
A:networkx.algorithms.tree.tests.test_branchings.new_arborescence_weight->networkx.algorithms.tree.branchings.minimum_spanning_arborescence(G, partition='partition').size(weight='weight')
networkx.algorithms.tree.tests.test_G1()
networkx.algorithms.tree.tests.test_G2()
networkx.algorithms.tree.tests.test_assert_equal_branchings(G1,G2,attr='weight',default=1)
networkx.algorithms.tree.tests.test_branchings.G1()
networkx.algorithms.tree.tests.test_branchings.G2()
networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings(G1,G2,attr='weight',default=1)
networkx.algorithms.tree.tests.test_branchings.build_branching(edges)
networkx.algorithms.tree.tests.test_branchings.sorted_edges(G,attr='weight',default=1)
networkx.algorithms.tree.tests.test_branchings.test_arborescence_iterator_initial_partition()
networkx.algorithms.tree.tests.test_branchings.test_arborescence_iterator_max()
networkx.algorithms.tree.tests.test_branchings.test_arborescence_iterator_min()
networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_discard()
networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_multigraph()
networkx.algorithms.tree.tests.test_branchings.test_edge_attribute_preservation_normal_graph()
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_minbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_minarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch1()
networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch2()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max1()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max2()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max3()
networkx.algorithms.tree.tests.test_branchings.test_greedy_min()
networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1a()
networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1b()
networkx.algorithms.tree.tests.test_branchings.test_mixed_nodetypes()
networkx.algorithms.tree.tests.test_branchings.test_mst()
networkx.algorithms.tree.tests.test_branchings.test_optimal_arborescence2()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching1()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2a()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2b()
networkx.algorithms.tree.tests.test_branchings.test_partition_spanning_arborescence()
networkx.algorithms.tree.tests.test_build_branching(edges)
networkx.algorithms.tree.tests.test_sorted_edges(G,attr='weight',default=1)
networkx.algorithms.tree.tests.test_test_arborescence_iterator_initial_partition()
networkx.algorithms.tree.tests.test_test_arborescence_iterator_max()
networkx.algorithms.tree.tests.test_test_arborescence_iterator_min()
networkx.algorithms.tree.tests.test_test_edge_attribute_discard()
networkx.algorithms.tree.tests.test_test_edge_attribute_preservation_multigraph()
networkx.algorithms.tree.tests.test_test_edge_attribute_preservation_normal_graph()
networkx.algorithms.tree.tests.test_test_edmonds1_maxarbor()
networkx.algorithms.tree.tests.test_test_edmonds1_maxbranch()
networkx.algorithms.tree.tests.test_test_edmonds1_minbranch()
networkx.algorithms.tree.tests.test_test_edmonds2_maxarbor()
networkx.algorithms.tree.tests.test_test_edmonds2_maxbranch()
networkx.algorithms.tree.tests.test_test_edmonds2_minarbor()
networkx.algorithms.tree.tests.test_test_edmonds3_minbranch1()
networkx.algorithms.tree.tests.test_test_edmonds3_minbranch2()
networkx.algorithms.tree.tests.test_test_greedy_max1()
networkx.algorithms.tree.tests.test_test_greedy_max2()
networkx.algorithms.tree.tests.test_test_greedy_max3()
networkx.algorithms.tree.tests.test_test_greedy_min()
networkx.algorithms.tree.tests.test_test_greedy_suboptimal_branching1a()
networkx.algorithms.tree.tests.test_test_greedy_suboptimal_branching1b()
networkx.algorithms.tree.tests.test_test_mixed_nodetypes()
networkx.algorithms.tree.tests.test_test_mst()
networkx.algorithms.tree.tests.test_test_optimal_arborescence2()
networkx.algorithms.tree.tests.test_test_optimal_branching1()
networkx.algorithms.tree.tests.test_test_optimal_branching2a()
networkx.algorithms.tree.tests.test_test_optimal_branching2b()
networkx.algorithms.tree.tests.test_test_partition_spanning_arborescence()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/kcomponents.py----------------------------------------
A:networkx.algorithms.approximation.kcomponents.k_components->defaultdict(list)
A:networkx.algorithms.approximation.kcomponents.comp->set(component)
A:networkx.algorithms.approximation.kcomponents.bicomp->set(bicomponent)
A:networkx.algorithms.approximation.kcomponents.g_cnumber->core_number(G)
A:networkx.algorithms.approximation.kcomponents.max_core->max(g_cnumber.values())
A:networkx.algorithms.approximation.kcomponents.C->k_core(G, k, core_number=g_cnumber)
A:networkx.algorithms.approximation.kcomponents.SG->networkx.k_core(G.subgraph(SH), k)
A:networkx.algorithms.approximation.kcomponents.H->_AntiGraph()
A:networkx.algorithms.approximation.kcomponents.K->node_connectivity(SG, u, v, cutoff=k)
A:networkx.algorithms.approximation.kcomponents.SH->_AntiGraph().subgraph(SG).copy()
A:networkx.algorithms.approximation.kcomponents.Gk->networkx.k_core(SG.subgraph(k_nodes), k)
A:networkx.algorithms.approximation.kcomponents.h_cnumber->networkx.core_number(H)
A:networkx.algorithms.approximation.kcomponents.overlap->set.intersection(*[{x for x in H[n] if x not in cands} for n in cands])
A:networkx.algorithms.approximation.kcomponents.sh_cnumber->networkx.core_number(SH)
A:networkx.algorithms.approximation.kcomponents.sh_deg->dict(SH.degree())
A:networkx.algorithms.approximation.kcomponents.min_deg->min(sh_deg.values())
A:networkx.algorithms.approximation.kcomponents.vals->set(measure.values())
A:networkx.algorithms.approximation.kcomponents.nodes->set(nodes)
A:networkx.algorithms.approximation.kcomponents.G->_AntiGraph()
A:networkx.algorithms.approximation.kcomponents.Gnbrs->_AntiGraph().adjlist_inner_dict_factory()
A:networkx.algorithms.approximation.kcomponents.all_nodes->set(self._succ)
networkx.algorithms.approximation._AntiGraph(nx.Graph)
networkx.algorithms.approximation._AntiGraph.AntiAdjacencyView(self,graph)
networkx.algorithms.approximation._AntiGraph.AntiAdjacencyView.__getitem__(self,node)
networkx.algorithms.approximation._AntiGraph.AntiAdjacencyView.__iter__(self)
networkx.algorithms.approximation._AntiGraph.AntiAdjacencyView.__len__(self)
networkx.algorithms.approximation._AntiGraph.AntiAtlasView(self,graph,node)
networkx.algorithms.approximation._AntiGraph.AntiAtlasView.__getitem__(self,nbr)
networkx.algorithms.approximation._AntiGraph.AntiAtlasView.__iter__(self)
networkx.algorithms.approximation._AntiGraph.AntiAtlasView.__len__(self)
networkx.algorithms.approximation._AntiGraph.AntiDegreeView(nx.reportviews.DegreeView)
networkx.algorithms.approximation._AntiGraph.AntiDegreeView.__getitem__(self,n)
networkx.algorithms.approximation._AntiGraph.AntiDegreeView.__iter__(self)
networkx.algorithms.approximation._AntiGraph.__getitem__(self,n)
networkx.algorithms.approximation._AntiGraph.adj(self)
networkx.algorithms.approximation._AntiGraph.adjacency(self)
networkx.algorithms.approximation._AntiGraph.degree(self)
networkx.algorithms.approximation._AntiGraph.neighbors(self,n)
networkx.algorithms.approximation._AntiGraph.single_edge_dict(self)
networkx.algorithms.approximation._AntiGraph.subgraph(self,nodes)
networkx.algorithms.approximation._cliques_heuristic(G,H,k,min_density)
networkx.algorithms.approximation._same(measure,tol=0)
networkx.algorithms.approximation.k_components(G,min_density=0.95)
networkx.algorithms.approximation.kcomponents._AntiGraph(nx.Graph)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView(self,graph)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__getitem__(self,node)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__init__(self,graph)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__iter__(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAdjacencyView.__len__(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView(self,graph,node)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__getitem__(self,nbr)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__init__(self,graph,node)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__iter__(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiAtlasView.__len__(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView(nx.reportviews.DegreeView)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__getitem__(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.AntiDegreeView.__iter__(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.__getitem__(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.adj(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.adjacency(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.degree(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.single_edge_dict(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.subgraph(self,nodes)
networkx.algorithms.approximation.kcomponents._cliques_heuristic(G,H,k,min_density)
networkx.algorithms.approximation.kcomponents._same(measure,tol=0)
networkx.algorithms.approximation.kcomponents.k_components(G,min_density=0.95)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/traveling_salesman.py----------------------------------------
A:networkx.algorithms.approximation.traveling_salesman.(a, b)->seed.sample(range(1, len(soln) - 1), k=2)
A:networkx.algorithms.approximation.traveling_salesman.loop_nodes->networkx.nodes_with_selfloops(G)
A:networkx.algorithms.approximation.traveling_salesman.node->next(loop_nodes)
A:networkx.algorithms.approximation.traveling_salesman.G->G.copy().copy()
A:networkx.algorithms.approximation.traveling_salesman.tree->networkx.minimum_spanning_tree(G, weight=weight)
A:networkx.algorithms.approximation.traveling_salesman.L->G.copy().copy().copy()
A:networkx.algorithms.approximation.traveling_salesman.MG->networkx.MultiGraph()
A:networkx.algorithms.approximation.traveling_salesman.edges->networkx.min_weight_matching(L, weight=weight)
A:networkx.algorithms.approximation.traveling_salesman.nodes->list(G.nodes)
A:networkx.algorithms.approximation.traveling_salesman.GG->networkx.Graph()
A:networkx.algorithms.approximation.traveling_salesman.best_GG->method(GG, weight)
A:networkx.algorithms.approximation.traveling_salesman.(u, v)->max(pairwise(best_GG), key=lambda x: dist[x[0]][x[1]])
A:networkx.algorithms.approximation.traveling_salesman.(opt_hk, z_star)->held_karp_ascent(G, weight)
A:networkx.algorithms.approximation.traveling_salesman.z_support->networkx.Graph(z_support)
A:networkx.algorithms.approximation.traveling_salesman.edge_weight->min(G[u][v][weight], G[v][u][weight])
A:networkx.algorithms.approximation.traveling_salesman.gamma->spanning_tree_distribution(z_support, z_star)
A:networkx.algorithms.approximation.traveling_salesman.sampled_tree->random_spanning_tree(z_support, 'weight', seed=seed)
A:networkx.algorithms.approximation.traveling_salesman.sampled_tree_weight->random_spanning_tree(z_support, 'weight', seed=seed).size(weight)
A:networkx.algorithms.approximation.traveling_salesman.minimum_sampled_tree->random_spanning_tree(z_support, 'weight', seed=seed).copy()
A:networkx.algorithms.approximation.traveling_salesman.t_star->networkx.MultiDiGraph()
A:networkx.algorithms.approximation.traveling_salesman.flow_dict->networkx.min_cost_flow(G, 'demand')
A:networkx.algorithms.approximation.traveling_salesman.circuit->networkx.eulerian_circuit(t_star, source=source)
A:networkx.algorithms.approximation.traveling_salesman.G_1->G.copy().copy().copy()
A:networkx.algorithms.approximation.traveling_salesman.minimum_1_arborescences->k_pi()
A:networkx.algorithms.approximation.traveling_salesman.n->next(G.__iter__())
A:networkx.algorithms.approximation.traveling_salesman.min_in_edge->min(G.in_edges(n, data=True), key=lambda x: x[2][weight])
A:networkx.algorithms.approximation.traveling_salesman.arb_weight->arb.size(weight)
A:networkx.algorithms.approximation.traveling_salesman.new_arb->arb.copy()
A:networkx.algorithms.approximation.traveling_salesman.c->numpy.full(len(minimum_1_arborescences), -1, dtype=int)
A:networkx.algorithms.approximation.traveling_salesman.a_eq->numpy.empty((len(G) + 1, len(minimum_1_arborescences)), dtype=int)
A:networkx.algorithms.approximation.traveling_salesman.b_eq->numpy.zeros(len(G) + 1, dtype=int)
A:networkx.algorithms.approximation.traveling_salesman.program_result->scipy.optimize.linprog(c, A_eq=a_eq, b_eq=b_eq)
A:networkx.algorithms.approximation.traveling_salesman.(sub_u, sub_v, sub_w)->next(k.in_edges(e_v, data=weight).__iter__())
A:networkx.algorithms.approximation.traveling_salesman.(dir_ascent, k_d)->direction_of_ascent()
A:networkx.algorithms.approximation.traveling_salesman.max_distance->find_epsilon(k_d, dir_ascent)
A:networkx.algorithms.approximation.traveling_salesman.size_k_max->len(k_max)
A:networkx.algorithms.approximation.traveling_salesman.d[lambda_key]->exp(gamma[u, v])
A:networkx.algorithms.approximation.traveling_salesman.G_Kirchhoff->networkx.total_spanning_tree_weight(G, lambda_key)
A:networkx.algorithms.approximation.traveling_salesman.G_e->networkx.contracted_edge(G, e, self_loops=False)
A:networkx.algorithms.approximation.traveling_salesman.G_e_Kirchhoff->networkx.total_spanning_tree_weight(G_e, lambda_key)
A:networkx.algorithms.approximation.traveling_salesman.q_e->q(e)
A:networkx.algorithms.approximation.traveling_salesman.delta->ln(q_e * (1 - (1 + EPSILON / 2) * z_e) / ((1 - q_e) * (1 + EPSILON / 2) * z_e))
A:networkx.algorithms.approximation.traveling_salesman.new_q_e->q(e)
A:networkx.algorithms.approximation.traveling_salesman.source->networkx.utils.arbitrary_element(G)
A:networkx.algorithms.approximation.traveling_salesman.neighbor->next(G.neighbors(source))
A:networkx.algorithms.approximation.traveling_salesman.nodeset->set(G)
A:networkx.algorithms.approximation.traveling_salesman.next_node->min(nodeset, key=lambda n: nbrdict[n].get(weight, 1))
A:networkx.algorithms.approximation.traveling_salesman.cycle->list(init_cycle)
A:networkx.algorithms.approximation.traveling_salesman.cost->sum((G[u][v].get(weight, 1) for (u, v) in pairwise(cycle)))
A:networkx.algorithms.approximation.traveling_salesman.best_cycle->list(init_cycle).copy()
A:networkx.algorithms.approximation.traveling_salesman.adj_sol->move(cycle, seed)
A:networkx.algorithms.approximation.traveling_salesman.adj_cost->sum((G[u][v].get(weight, 1) for (u, v) in pairwise(adj_sol)))
A:networkx.algorithms.approximation.traveling_salesman.p->math.exp(-delta / temp)
networkx.algorithms.approximation._shortcutting(circuit)
networkx.algorithms.approximation.asadpour_atsp(G,weight='weight',seed=None,source=None)
networkx.algorithms.approximation.christofides(G,weight='weight',tree=None)
networkx.algorithms.approximation.greedy_tsp(G,weight='weight',source=None)
networkx.algorithms.approximation.held_karp_ascent(G,weight='weight')
networkx.algorithms.approximation.move_one_node(soln,seed)
networkx.algorithms.approximation.simulated_annealing_tsp(G,init_cycle,weight='weight',source=None,temp=100,move='1-1',max_iterations=10,N_inner=100,alpha=0.01,seed=None)
networkx.algorithms.approximation.spanning_tree_distribution(G,z)
networkx.algorithms.approximation.swap_two_nodes(soln,seed)
networkx.algorithms.approximation.threshold_accepting_tsp(G,init_cycle,weight='weight',source=None,threshold=1,move='1-1',max_iterations=10,N_inner=100,alpha=0.1,seed=None)
networkx.algorithms.approximation.traveling_salesman._shortcutting(circuit)
networkx.algorithms.approximation.traveling_salesman.asadpour_atsp(G,weight='weight',seed=None,source=None)
networkx.algorithms.approximation.traveling_salesman.christofides(G,weight='weight',tree=None)
networkx.algorithms.approximation.traveling_salesman.greedy_tsp(G,weight='weight',source=None)
networkx.algorithms.approximation.traveling_salesman.held_karp_ascent(G,weight='weight')
networkx.algorithms.approximation.traveling_salesman.move_one_node(soln,seed)
networkx.algorithms.approximation.traveling_salesman.simulated_annealing_tsp(G,init_cycle,weight='weight',source=None,temp=100,move='1-1',max_iterations=10,N_inner=100,alpha=0.01,seed=None)
networkx.algorithms.approximation.traveling_salesman.spanning_tree_distribution(G,z)
networkx.algorithms.approximation.traveling_salesman.swap_two_nodes(soln,seed)
networkx.algorithms.approximation.traveling_salesman.threshold_accepting_tsp(G,init_cycle,weight='weight',source=None,threshold=1,move='1-1',max_iterations=10,N_inner=100,alpha=0.1,seed=None)
networkx.algorithms.approximation.traveling_salesman.traveling_salesman_problem(G,weight='weight',nodes=None,cycle=True,method=None)
networkx.algorithms.approximation.traveling_salesman_problem(G,weight='weight',nodes=None,cycle=True,method=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/treewidth.py----------------------------------------
A:networkx.algorithms.approximation.treewidth.deg_heuristic->MinDegreeHeuristic(G)
A:networkx.algorithms.approximation.treewidth.self.count->itertools.count()
A:networkx.algorithms.approximation.treewidth.(min_degree, _, elim_node)->heappop(self._degreeq)
A:networkx.algorithms.approximation.treewidth.nodes_by_degree->sorted(graph, key=lambda x: len(graph[x]))
A:networkx.algorithms.approximation.treewidth.min_degree->len(graph[nodes_by_degree[0]])
A:networkx.algorithms.approximation.treewidth.elim_node->heuristic(graph)
A:networkx.algorithms.approximation.treewidth.decomp->networkx.Graph()
A:networkx.algorithms.approximation.treewidth.first_bag->frozenset(graph.keys())
A:networkx.algorithms.approximation.treewidth.(curr_node, nbrs)->node_stack.pop()
A:networkx.algorithms.approximation.treewidth.new_bag->frozenset(nbrs)
A:networkx.algorithms.approximation.treewidth.treewidth->max(treewidth, len(new_bag) - 1)
networkx.algorithms.approximation.MinDegreeHeuristic(self,graph)
networkx.algorithms.approximation.MinDegreeHeuristic.best_node(self,graph)
networkx.algorithms.approximation.min_fill_in_heuristic(graph)
networkx.algorithms.approximation.treewidth.MinDegreeHeuristic(self,graph)
networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.__init__(self,graph)
networkx.algorithms.approximation.treewidth.MinDegreeHeuristic.best_node(self,graph)
networkx.algorithms.approximation.treewidth.min_fill_in_heuristic(graph)
networkx.algorithms.approximation.treewidth.treewidth_decomp(G,heuristic=min_fill_in_heuristic)
networkx.algorithms.approximation.treewidth.treewidth_min_degree(G)
networkx.algorithms.approximation.treewidth.treewidth_min_fill_in(G)
networkx.algorithms.approximation.treewidth_decomp(G,heuristic=min_fill_in_heuristic)
networkx.algorithms.approximation.treewidth_min_degree(G)
networkx.algorithms.approximation.treewidth_min_fill_in(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/vertex_cover.py----------------------------------------
A:networkx.algorithms.approximation.vertex_cover.cost->dict(G.nodes(data=weight, default=1))
A:networkx.algorithms.approximation.vertex_cover.cover->set()
networkx.algorithms.approximation.min_weighted_vertex_cover(G,weight=None)
networkx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/clustering_coefficient.py----------------------------------------
A:networkx.algorithms.approximation.clustering_coefficient.n->len(G)
A:networkx.algorithms.approximation.clustering_coefficient.nodes->list(G)
A:networkx.algorithms.approximation.clustering_coefficient.nbrs->list(G[nodes[i]])
A:networkx.algorithms.approximation.clustering_coefficient.(u, v)->seed.sample(nbrs, 2)
networkx.algorithms.approximation.average_clustering(G,trials=1000,seed=None)
networkx.algorithms.approximation.clustering_coefficient.average_clustering(G,trials=1000,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/ramsey.py----------------------------------------
A:networkx.algorithms.approximation.ramsey.node->arbitrary_element(G)
A:networkx.algorithms.approximation.ramsey.nnbrs->networkx.non_neighbors(G, node)
A:networkx.algorithms.approximation.ramsey.(c_1, i_1)->ramsey_R2(G.subgraph(nbrs).copy())
A:networkx.algorithms.approximation.ramsey.(c_2, i_2)->ramsey_R2(G.subgraph(nnbrs).copy())
networkx.algorithms.approximation.ramsey.ramsey_R2(G)
networkx.algorithms.approximation.ramsey_R2(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/dominating_set.py----------------------------------------
A:networkx.algorithms.approximation.dominating_set.dom_set->set()
A:networkx.algorithms.approximation.dominating_set.vertices->set(G)
A:networkx.algorithms.approximation.dominating_set.(dom_node, min_set)->min(neighborhoods.items(), key=_cost)
networkx.algorithms.approximation.dominating_set.min_edge_dominating_set(G)
networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set(G,weight=None)
networkx.algorithms.approximation.min_edge_dominating_set(G)
networkx.algorithms.approximation.min_weighted_dominating_set(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/clique.py----------------------------------------
A:networkx.algorithms.approximation.clique.(iset, _)->clique_removal(cgraph)
A:networkx.algorithms.approximation.clique.cgraph->networkx.complement(G)
A:networkx.algorithms.approximation.clique.graph->G.copy()
A:networkx.algorithms.approximation.clique.(c_i, i_i)->networkx.algorithms.approximation.ramsey.ramsey_R2(graph)
A:networkx.algorithms.approximation.clique.maxiset->max(isets, key=len)
A:networkx.algorithms.approximation.clique.u->max(U, key=degrees)
A:networkx.algorithms.approximation.clique.best_size->_clique_heuristic(G, neighbors, 1, best_size)
networkx.algorithms.approximation.clique.clique_removal(G)
networkx.algorithms.approximation.clique.large_clique_size(G)
networkx.algorithms.approximation.clique.max_clique(G)
networkx.algorithms.approximation.clique.maximum_independent_set(G)
networkx.algorithms.approximation.clique_removal(G)
networkx.algorithms.approximation.large_clique_size(G)
networkx.algorithms.approximation.max_clique(G)
networkx.algorithms.approximation.maximum_independent_set(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/distance_measures.py----------------------------------------
A:networkx.algorithms.approximation.distance_measures.source->seed.choice(list(G))
A:networkx.algorithms.approximation.distance_measures.distances->networkx.shortest_path_length(G, source)
A:networkx.algorithms.approximation.distance_measures.G_reversed->G.reverse()
A:networkx.algorithms.approximation.distance_measures.forward_distances->networkx.shortest_path_length(G, source)
A:networkx.algorithms.approximation.distance_measures.backward_distances->networkx.shortest_path_length(G_reversed, source)
A:networkx.algorithms.approximation.distance_measures.n->len(G)
networkx.algorithms.approximation._two_sweep_directed(G,seed)
networkx.algorithms.approximation._two_sweep_undirected(G,seed)
networkx.algorithms.approximation.diameter(G,seed=None)
networkx.algorithms.approximation.distance_measures._two_sweep_directed(G,seed)
networkx.algorithms.approximation.distance_measures._two_sweep_undirected(G,seed)
networkx.algorithms.approximation.distance_measures.diameter(G,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/maxcut.py----------------------------------------
A:networkx.algorithms.approximation.maxcut.cut_size->networkx.algorithms.cut_size(G, cut, weight=weight)
A:networkx.algorithms.approximation.maxcut.initial_cut->set()
A:networkx.algorithms.approximation.maxcut.cut->set(initial_cut)
A:networkx.algorithms.approximation.maxcut.current_cut_size->networkx.algorithms.cut_size(G, cut, weight=weight)
A:networkx.algorithms.approximation.maxcut.nodes->list(G.nodes())
A:networkx.algorithms.approximation.maxcut.best_node_to_swap->max(nodes, key=lambda v: nx.algorithms.cut_size(G, _swap_node_partition(cut, v), weight=weight), default=None)
A:networkx.algorithms.approximation.maxcut.potential_cut->_swap_node_partition(cut, best_node_to_swap)
A:networkx.algorithms.approximation.maxcut.potential_cut_size->networkx.algorithms.cut_size(G, potential_cut, weight=weight)
networkx.algorithms.approximation._swap_node_partition(cut,node)
networkx.algorithms.approximation.maxcut._swap_node_partition(cut,node)
networkx.algorithms.approximation.maxcut.one_exchange(G,initial_cut=None,seed=None,weight=None)
networkx.algorithms.approximation.maxcut.randomized_partitioning(G,seed=None,p=0.5,weight=None)
networkx.algorithms.approximation.one_exchange(G,initial_cut=None,seed=None,weight=None)
networkx.algorithms.approximation.randomized_partitioning(G,seed=None,p=0.5,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/matching.py----------------------------------------
networkx.algorithms.approximation.matching.min_maximal_matching(G)
networkx.algorithms.approximation.min_maximal_matching(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/steinertree.py----------------------------------------
A:networkx.algorithms.approximation.steinertree.M->metric_closure(G, weight=weight)
A:networkx.algorithms.approximation.steinertree.Gnodes->set(G)
A:networkx.algorithms.approximation.steinertree.all_paths_iter->networkx.all_pairs_dijkstra(G, weight=weight)
A:networkx.algorithms.approximation.steinertree.(u, (distance, path))->next(all_paths_iter)
A:networkx.algorithms.approximation.steinertree.paths->networkx.multi_source_dijkstra_path(G, terminal_nodes)
A:networkx.algorithms.approximation.steinertree.G_1_prime->networkx.Graph()
A:networkx.algorithms.approximation.steinertree.new_weight->min(weight_here, G_1_prime[su][sv][weight])
A:networkx.algorithms.approximation.steinertree.G_2->networkx.minimum_spanning_edges(G_1_prime, data=True)
A:networkx.algorithms.approximation.steinertree.G_3->networkx.Graph()
A:networkx.algorithms.approximation.steinertree.path->networkx.shortest_path(G, u, v, weight)
A:networkx.algorithms.approximation.steinertree.G_3_mst->list(nx.minimum_spanning_edges(G_3, data=False))
A:networkx.algorithms.approximation.steinertree.G_4->G.edge_subgraph(G_3_mst).copy()
A:networkx.algorithms.approximation.steinertree.H->metric_closure(G, weight=weight).subgraph(terminal_nodes)
A:networkx.algorithms.approximation.steinertree.mst_edges->networkx.minimum_spanning_edges(H, weight='distance', data=True)
A:networkx.algorithms.approximation.steinertree.mst_all_edges->itertools.chain.from_iterable((pairwise(d['path']) for (u, v, d) in mst_edges))
A:networkx.algorithms.approximation.steinertree.G_S->G.edge_subgraph(mst_all_edges)
A:networkx.algorithms.approximation.steinertree.T_S->networkx.minimum_spanning_edges(G_S, weight='weight', data=False)
A:networkx.algorithms.approximation.steinertree.T_H->G.edge_subgraph(T_S).copy()
A:networkx.algorithms.approximation.steinertree.terminals_set->set(terminals)
A:networkx.algorithms.approximation.steinertree.edges->algo(G, terminal_nodes, weight)
A:networkx.algorithms.approximation.steinertree.T->G.edge_subgraph(edges)
networkx.algorithms.approximation._kou_steiner_tree(G,terminal_nodes,weight)
networkx.algorithms.approximation._mehlhorn_steiner_tree(G,terminal_nodes,weight)
networkx.algorithms.approximation._remove_nonterminal_leaves(G,terminals)
networkx.algorithms.approximation.metric_closure(G,weight='weight')
networkx.algorithms.approximation.steiner_tree(G,terminal_nodes,weight='weight',method=None)
networkx.algorithms.approximation.steinertree._kou_steiner_tree(G,terminal_nodes,weight)
networkx.algorithms.approximation.steinertree._mehlhorn_steiner_tree(G,terminal_nodes,weight)
networkx.algorithms.approximation.steinertree._remove_nonterminal_leaves(G,terminals)
networkx.algorithms.approximation.steinertree.metric_closure(G,weight='weight')
networkx.algorithms.approximation.steinertree.steiner_tree(G,terminal_nodes,weight='weight',method=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/connectivity.py----------------------------------------
A:networkx.algorithms.approximation.connectivity.possible->min(G.degree(source), G.degree(target))
A:networkx.algorithms.approximation.connectivity.cutoff->float('inf')
A:networkx.algorithms.approximation.connectivity.exclude->set()
A:networkx.algorithms.approximation.connectivity.path->_bidirectional_shortest_path(G, source, target, exclude)
A:networkx.algorithms.approximation.connectivity.(v, minimum_degree)->min(G.degree(), key=itemgetter(1))
A:networkx.algorithms.approximation.connectivity.K->min(K, local_node_connectivity(G, x, y, cutoff=K))
A:networkx.algorithms.approximation.connectivity.nbunch->set(nbunch)
A:networkx.algorithms.approximation.connectivity.directed->G.is_directed()
A:networkx.algorithms.approximation.connectivity.k->local_node_connectivity(G, u, v, cutoff=cutoff)
A:networkx.algorithms.approximation.connectivity.results->_bidirectional_pred_succ(G, source, target, exclude)
networkx.algorithms.approximation._bidirectional_pred_succ(G,source,target,exclude)
networkx.algorithms.approximation._bidirectional_shortest_path(G,source,target,exclude)
networkx.algorithms.approximation.all_pairs_node_connectivity(G,nbunch=None,cutoff=None)
networkx.algorithms.approximation.connectivity._bidirectional_pred_succ(G,source,target,exclude)
networkx.algorithms.approximation.connectivity._bidirectional_shortest_path(G,source,target,exclude)
networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity(G,nbunch=None,cutoff=None)
networkx.algorithms.approximation.connectivity.local_node_connectivity(G,source,target,cutoff=None)
networkx.algorithms.approximation.connectivity.node_connectivity(G,s=None,t=None)
networkx.algorithms.approximation.local_node_connectivity(G,source,target,cutoff=None)
networkx.algorithms.approximation.node_connectivity(G,s=None,t=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_kcomponents.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_kcomponents.G->networkx.gnp_random_graph(10, 0.4, directed=True)
A:networkx.algorithms.approximation.tests.test_kcomponents.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.approximation.tests.test_kcomponents.P->networkx.petersen_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.K->networkx.node_connectivity(G.subgraph(component))
A:networkx.algorithms.approximation.tests.test_kcomponents.result->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.C->networkx.gnp_random_graph(10, 0.4, directed=True).subgraph(component)
A:networkx.algorithms.approximation.tests.test_kcomponents.approx_karate_k_num->karate_k_num.copy()
A:networkx.algorithms.approximation.tests.test_kcomponents.k_comps->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.k_num->build_k_number_dict(k_comps)
A:networkx.algorithms.approximation.tests.test_kcomponents.kc->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Gnp->networkx.gnp_random_graph(20, 0.8)
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Anp->_AntiGraph(nx.complement(cls.Gnp))
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Gd->networkx.davis_southern_women_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Ad->_AntiGraph(nx.complement(cls.Gd))
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Gk->networkx.karate_club_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.cls.Ak->_AntiGraph(nx.complement(cls.Gk))
A:networkx.algorithms.approximation.tests.test_kcomponents.n->networkx.gnp_random_graph(10, 0.4, directed=True).order()
A:networkx.algorithms.approximation.tests.test_kcomponents.a_adj->list(A.adjacency())
A:networkx.algorithms.approximation.tests.test_kcomponents.g_adj->sorted(((n, sorted(ad)) for (n, ad) in G.adj.items()))
networkx.algorithms.approximation.tests.test_TestAntiGraph
networkx.algorithms.approximation.tests.test_TestAntiGraph.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_adj(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_adjacency(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_connected_components(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_core_number(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_degree(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_degree_thingraph(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_neighbors(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_node_not_in_graph(self)
networkx.algorithms.approximation.tests.test_TestAntiGraph.test_size(self)
networkx.algorithms.approximation.tests.test__check_connectivity(G)
networkx.algorithms.approximation.tests.test_build_k_number_dict(k_components)
networkx.algorithms.approximation.tests.test_graph_example_1()
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.setup_class(cls)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adj(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adjacency(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_connected_components(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_core_number(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree_thingraph(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_neighbors(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_node_not_in_graph(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_size(self)
networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity(G)
networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict(k_components)
networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_directed()
networkx.algorithms.approximation.tests.test_kcomponents.test_example_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_example_1_detail_3_and_4()
networkx.algorithms.approximation.tests.test_kcomponents.test_karate_0()
networkx.algorithms.approximation.tests.test_kcomponents.test_karate_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_same()
networkx.algorithms.approximation.tests.test_kcomponents.test_torrents_and_ferraro_graph()
networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph()
networkx.algorithms.approximation.tests.test_test_directed()
networkx.algorithms.approximation.tests.test_test_example_1()
networkx.algorithms.approximation.tests.test_test_example_1_detail_3_and_4()
networkx.algorithms.approximation.tests.test_test_karate_0()
networkx.algorithms.approximation.tests.test_test_karate_1()
networkx.algorithms.approximation.tests.test_test_same()
networkx.algorithms.approximation.tests.test_test_torrents_and_ferraro_graph()
networkx.algorithms.approximation.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_clique.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_clique.H->networkx.Graph().subgraph(nodes)
A:networkx.algorithms.approximation.tests.test_clique.n->len(H)
A:networkx.algorithms.approximation.tests.test_clique.G->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_clique.(independent_set, cliques)->clique_removal(G)
A:networkx.algorithms.approximation.tests.test_clique.graph->networkx.complete_graph(30)
A:networkx.algorithms.approximation.tests.test_clique.mc->max_clique(graph)
A:networkx.algorithms.approximation.tests.test_clique.clique->max_clique(G)
networkx.algorithms.approximation.tests.test_TestCliqueRemoval
networkx.algorithms.approximation.tests.test_TestCliqueRemoval.test_barbell_graph(self)
networkx.algorithms.approximation.tests.test_TestCliqueRemoval.test_complete_graph(self)
networkx.algorithms.approximation.tests.test_TestCliqueRemoval.test_trivial_graph(self)
networkx.algorithms.approximation.tests.test_TestMaxClique
networkx.algorithms.approximation.tests.test_TestMaxClique.test_complete_graph(self)
networkx.algorithms.approximation.tests.test_TestMaxClique.test_maximal_by_cardinality(self)
networkx.algorithms.approximation.tests.test_TestMaxClique.test_null_graph(self)
networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval
networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_barbell_graph(self)
networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_complete_graph(self)
networkx.algorithms.approximation.tests.test_clique.TestCliqueRemoval.test_trivial_graph(self)
networkx.algorithms.approximation.tests.test_clique.TestMaxClique
networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_complete_graph(self)
networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_maximal_by_cardinality(self)
networkx.algorithms.approximation.tests.test_clique.TestMaxClique.test_null_graph(self)
networkx.algorithms.approximation.tests.test_clique.is_clique(G,nodes)
networkx.algorithms.approximation.tests.test_clique.is_independent_set(G,nodes)
networkx.algorithms.approximation.tests.test_clique.test_independent_set()
networkx.algorithms.approximation.tests.test_clique.test_large_clique_size()
networkx.algorithms.approximation.tests.test_is_clique(G,nodes)
networkx.algorithms.approximation.tests.test_is_independent_set(G,nodes)
networkx.algorithms.approximation.tests.test_test_independent_set()
networkx.algorithms.approximation.tests.test_test_large_clique_size()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_treewidth.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_treewidth.sub_graph->decomp.subgraph(subset)
A:networkx.algorithms.approximation.tests.test_treewidth.cls.complete->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_treewidth.cls.small_tree->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_treewidth.cls.deterministic_graph->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_treewidth.G->networkx.Graph([(0, 'a')])
A:networkx.algorithms.approximation.tests.test_treewidth.(_, decomp)->treewidth_min_fill_in(G)
A:networkx.algorithms.approximation.tests.test_treewidth.(treewidth, _)->treewidth_min_fill_in(G)
A:networkx.algorithms.approximation.tests.test_treewidth.graph[u]->set()
A:networkx.algorithms.approximation.tests.test_treewidth.deg_heuristic->MinDegreeHeuristic(graph)
A:networkx.algorithms.approximation.tests.test_treewidth.node->MinDegreeHeuristic(graph).best_node(graph)
A:networkx.algorithms.approximation.tests.test_treewidth.(_, _)->treewidth_min_fill_in(G)
A:networkx.algorithms.approximation.tests.test_treewidth.elim_node->min_fill_in_heuristic(graph)
A:networkx.algorithms.approximation.tests.test_treewidth.next_node->min_fill_in_heuristic(graph)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_empty_graph(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_heuristic_abort(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_heuristic_first_steps(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_not_sortable_nodes(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_petersen_graph(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_small_tree_treewidth(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinDegree.test_two_component_graph(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_empty_graph(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_heuristic_abort(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_heuristic_first_steps(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_not_sortable_nodes(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_petersen_graph(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_small_tree_treewidth(self)
networkx.algorithms.approximation.tests.test_TestTreewidthMinFillIn.test_two_component_graph(self)
networkx.algorithms.approximation.tests.test_is_tree_decomp(graph,decomp)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.setup_class(cls)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_empty_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_abort(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_heuristic_first_steps(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_not_sortable_nodes(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_petersen_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_small_tree_treewidth(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinDegree.test_two_component_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.setup_class(cls)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_empty_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_abort(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_heuristic_first_steps(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_not_sortable_nodes(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_petersen_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_small_tree_treewidth(self)
networkx.algorithms.approximation.tests.test_treewidth.TestTreewidthMinFillIn.test_two_component_graph(self)
networkx.algorithms.approximation.tests.test_treewidth.is_tree_decomp(graph,decomp)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_maxcut.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_maxcut.union->set1.union(set2)
A:networkx.algorithms.approximation.tests.test_maxcut.cut_size_without_node->networkx.algorithms.cut_size(G, set1 - {node}, weight='weight')
A:networkx.algorithms.approximation.tests.test_maxcut.G->networkx.complete_graph(5)
A:networkx.algorithms.approximation.tests.test_maxcut.(_, (set1, set2))->networkx.algorithms.approximation.maxcut.randomized_partitioning(G, p=1)
A:networkx.algorithms.approximation.tests.test_maxcut.initial_cut->set(random.sample(sorted(G.nodes()), k=5))
A:networkx.algorithms.approximation.tests.test_maxcut.(cut_size, (set1, set2))->networkx.algorithms.approximation.maxcut.one_exchange(G, initial_cut, weight='weight')
networkx.algorithms.approximation.tests.test__cut_is_locally_optimal(G,cut_size,set1)
networkx.algorithms.approximation.tests.test__is_valid_cut(G,set1,set2)
networkx.algorithms.approximation.tests.test_maxcut._cut_is_locally_optimal(G,cut_size,set1)
networkx.algorithms.approximation.tests.test_maxcut._is_valid_cut(G,set1,set2)
networkx.algorithms.approximation.tests.test_maxcut.test_negative_weights()
networkx.algorithms.approximation.tests.test_maxcut.test_one_exchange_basic()
networkx.algorithms.approximation.tests.test_maxcut.test_one_exchange_optimal()
networkx.algorithms.approximation.tests.test_maxcut.test_random_partitioning()
networkx.algorithms.approximation.tests.test_maxcut.test_random_partitioning_all_to_one()
networkx.algorithms.approximation.tests.test_test_negative_weights()
networkx.algorithms.approximation.tests.test_test_one_exchange_basic()
networkx.algorithms.approximation.tests.test_test_one_exchange_optimal()
networkx.algorithms.approximation.tests.test_test_random_partitioning()
networkx.algorithms.approximation.tests.test_test_random_partitioning_all_to_one()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_distance_measures.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_distance_measures.G->networkx.null_graph()
A:networkx.algorithms.approximation.tests.test_distance_measures.graph->networkx.Graph()
networkx.algorithms.approximation.tests.test_TestDiameter
networkx.algorithms.approximation.tests.test_TestDiameter.test_complete_directed_graph(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_complete_undirected_graph(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_directed_non_strongly_connected(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_directed_path_graph(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_null_graph(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_single_node(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_undirected_non_connected(self)
networkx.algorithms.approximation.tests.test_TestDiameter.test_undirected_path_graph(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_complete_directed_graph(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_complete_undirected_graph(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_directed_non_strongly_connected(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_directed_path_graph(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_null_graph(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_single_node(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_undirected_non_connected(self)
networkx.algorithms.approximation.tests.test_distance_measures.TestDiameter.test_undirected_path_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_vertex_cover.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_vertex_cover.G->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_vertex_cover.cover->min_weighted_vertex_cover(slg)
A:networkx.algorithms.approximation.tests.test_vertex_cover.sg->networkx.star_graph(size)
A:networkx.algorithms.approximation.tests.test_vertex_cover.wg->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_vertex_cover.csum->sum((wg.nodes[node]['weight'] for node in cover))
A:networkx.algorithms.approximation.tests.test_vertex_cover.slg->networkx.Graph()
networkx.algorithms.approximation.tests.test_TestMWVC
networkx.algorithms.approximation.tests.test_TestMWVC.test_unweighted_directed(self)
networkx.algorithms.approximation.tests.test_TestMWVC.test_unweighted_self_loop(self)
networkx.algorithms.approximation.tests.test_TestMWVC.test_unweighted_undirected(self)
networkx.algorithms.approximation.tests.test_TestMWVC.test_weighted(self)
networkx.algorithms.approximation.tests.test_is_cover(G,node_cover)
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_directed(self)
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_self_loop(self)
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_unweighted_undirected(self)
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_weighted(self)
networkx.algorithms.approximation.tests.test_vertex_cover.is_cover(G,node_cover)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_dominating_set.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_dominating_set.graph->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_dominating_set.dom_set->min_edge_dominating_set(graph)
A:networkx.algorithms.approximation.tests.test_dominating_set.neighbors->set(graph.neighbors(vertex))
A:networkx.algorithms.approximation.tests.test_dominating_set.G->networkx.Graph()
networkx.algorithms.approximation.tests.test_TestMinWeightDominatingSet
networkx.algorithms.approximation.tests.test_TestMinWeightDominatingSet.test_min_edge_dominating_set(self)
networkx.algorithms.approximation.tests.test_TestMinWeightDominatingSet.test_min_weighted_dominating_set(self)
networkx.algorithms.approximation.tests.test_TestMinWeightDominatingSet.test_null_graph(self)
networkx.algorithms.approximation.tests.test_TestMinWeightDominatingSet.test_star_graph(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_edge_dominating_set(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_weighted_dominating_set(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_null_graph(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_star_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_matching.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_matching.G->networkx.Graph()
networkx.algorithms.approximation.tests.test_matching.test_min_maximal_matching()
networkx.algorithms.approximation.tests.test_test_min_maximal_matching()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_ramsey.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_ramsey.graph->networkx.barbell_graph(10, 5, nx.Graph())
A:networkx.algorithms.approximation.tests.test_ramsey.(c, i)->networkx.algorithms.approximation.ramsey_R2(graph)
A:networkx.algorithms.approximation.tests.test_ramsey.cdens->networkx.density(graph.subgraph(c))
A:networkx.algorithms.approximation.tests.test_ramsey.idens->networkx.density(graph.subgraph(i))
A:networkx.algorithms.approximation.tests.test_ramsey.(cc, ii)->networkx.algorithms.approximation.ramsey_R2(graph)
networkx.algorithms.approximation.tests.test_ramsey.test_ramsey()
networkx.algorithms.approximation.tests.test_test_ramsey()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_connectivity.G->networkx.complete_graph(5)
A:networkx.algorithms.approximation.tests.test_connectivity.D->networkx.cycle_graph(10).to_directed()
A:networkx.algorithms.approximation.tests.test_connectivity.cls.path->networkx.path_graph(7)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.directed_path->networkx.path_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.approximation.tests.test_connectivity.cls.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.approximation.tests.test_connectivity.cls.gnp->networkx.gnp_random_graph(30, 0.1)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.directed_gnp->networkx.gnp_random_graph(30, 0.1, directed=True)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.K20->networkx.complete_graph(20)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.K10->networkx.complete_graph(10)
A:networkx.algorithms.approximation.tests.test_connectivity.cls.K5->networkx.complete_graph(5)
A:networkx.algorithms.approximation.tests.test_connectivity.K_undir->networkx.algorithms.approximation.all_pairs_node_connectivity(self.path)
A:networkx.algorithms.approximation.tests.test_connectivity.K_dir->networkx.algorithms.approximation.all_pairs_node_connectivity(self.directed_path)
A:networkx.algorithms.approximation.tests.test_connectivity.K->networkx.algorithms.approximation.all_pairs_node_connectivity(G)
A:networkx.algorithms.approximation.tests.test_connectivity.paths->networkx.algorithms.approximation.all_pairs_node_connectivity(G, cutoff=mp)
A:networkx.algorithms.approximation.tests.test_connectivity.C->networkx.algorithms.approximation.all_pairs_node_connectivity(G, nbunch=nbunch)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_complete(self)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_cutoff(self)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_cycles(self)
networkx.algorithms.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_paths(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.setup_class(cls)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_complete(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cutoff(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cycles(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_paths(self)
networkx.algorithms.approximation.tests.test_connectivity.test_complete_graphs()
networkx.algorithms.approximation.tests.test_connectivity.test_directed_node_connectivity()
networkx.algorithms.approximation.tests.test_connectivity.test_dodecahedral()
networkx.algorithms.approximation.tests.test_connectivity.test_empty_graphs()
networkx.algorithms.approximation.tests.test_connectivity.test_global_node_connectivity()
networkx.algorithms.approximation.tests.test_connectivity.test_missing_source()
networkx.algorithms.approximation.tests.test_connectivity.test_missing_target()
networkx.algorithms.approximation.tests.test_connectivity.test_octahedral()
networkx.algorithms.approximation.tests.test_connectivity.test_only_source()
networkx.algorithms.approximation.tests.test_connectivity.test_only_target()
networkx.algorithms.approximation.tests.test_connectivity.test_petersen()
networkx.algorithms.approximation.tests.test_connectivity.test_source_equals_target()
networkx.algorithms.approximation.tests.test_connectivity.test_white_harary1()
networkx.algorithms.approximation.tests.test_test_complete_graphs()
networkx.algorithms.approximation.tests.test_test_directed_node_connectivity()
networkx.algorithms.approximation.tests.test_test_dodecahedral()
networkx.algorithms.approximation.tests.test_test_empty_graphs()
networkx.algorithms.approximation.tests.test_test_global_node_connectivity()
networkx.algorithms.approximation.tests.test_test_missing_source()
networkx.algorithms.approximation.tests.test_test_missing_target()
networkx.algorithms.approximation.tests.test_test_octahedral()
networkx.algorithms.approximation.tests.test_test_only_source()
networkx.algorithms.approximation.tests.test_test_only_target()
networkx.algorithms.approximation.tests.test_test_petersen()
networkx.algorithms.approximation.tests.test_test_source_equals_target()
networkx.algorithms.approximation.tests.test_test_white_harary1()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_approx_clust_coeff.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_approx_clust_coeff.G->networkx.complete_graph(7)
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_complete()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_dodecahedral()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_empty()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen_seed()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_tetrahedral()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_steinertree.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_steinertree.G1->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_steinertree.G2->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_steinertree.G3->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_steinertree.G->networkx.MultiGraph()
A:networkx.algorithms.approximation.tests.test_steinertree.M->metric_closure(self.G1)
A:networkx.algorithms.approximation.tests.test_steinertree.S->steiner_tree(G, terminal_nodes, method=method)
networkx.algorithms.approximation.tests.test_TestSteinerTree
networkx.algorithms.approximation.tests.test_TestSteinerTree.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestSteinerTree.test_connected_metric_closure(self)
networkx.algorithms.approximation.tests.test_TestSteinerTree.test_metric_closure(self)
networkx.algorithms.approximation.tests.test_TestSteinerTree.test_multigraph_steiner_tree(self)
networkx.algorithms.approximation.tests.test_TestSteinerTree.test_steiner_tree(self)
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.setup_class(cls)
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_connected_metric_closure(self)
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_metric_closure(self)
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_multigraph_steiner_tree(self)
networkx.algorithms.approximation.tests.test_steinertree.TestSteinerTree.test_steiner_tree(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/approximation/tests/test_traveling_salesman.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_traveling_salesman.G->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.G[u][v]['weight']->random.randint(0, 10)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.H->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.tree->networkx.minimum_spanning_tree(G, weight='weight')
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cycle->networkx.algorithms.approximation.traveling_salesman_problem(G)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.DG->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.DG2->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.unweightedUG->networkx.complete_graph(5, nx.Graph())
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.unweightedDG->networkx.complete_graph(5, nx.DiGraph())
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.incompleteUG->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.incompleteDG->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.UG->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cls.UG2->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.cost->sum((self.DG[n][nbr]['weight'] for (n, nbr) in pairwise(cycle)))
A:networkx.algorithms.approximation.tests.test_traveling_salesman.tsp->staticmethod(nx_app.threshold_accepting_tsp)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.path->networkx.algorithms.approximation.traveling_salesman_problem(G, weight='weight', cycle=False, method=fixed_asadpour)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.tourpath->tsp(G, weight='weight', method=method, cycle=False)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.np->pytest.importorskip('numpy')
A:networkx.algorithms.approximation.tests.test_traveling_salesman.G_array->pytest.importorskip('numpy').array([[0, 26, 63, 59, 69, 31, 41], [62, 0, 91, 53, 75, 87, 47], [47, 82, 0, 90, 15, 9, 18], [68, 19, 5, 0, 58, 34, 93], [11, 58, 53, 55, 0, 61, 79], [88, 75, 13, 76, 98, 0, 40], [41, 61, 55, 88, 46, 45, 0]])
A:networkx.algorithms.approximation.tests.test_traveling_salesman.(opt_hk, z_star)->staticmethod(nx_app.threshold_accepting_tsp).held_karp_ascent(G)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.solution->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.solution1->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.solution2->networkx.DiGraph()
A:networkx.algorithms.approximation.tests.test_traveling_salesman.gamma->staticmethod(nx_app.threshold_accepting_tsp).spanning_tree_distribution(G, z_star)
A:networkx.algorithms.approximation.tests.test_traveling_salesman.tour->networkx.algorithms.approximation.traveling_salesman_problem(G, method=nx_app.asadpour_atsp)
networkx.algorithms.approximation.tests.test_TestBase
networkx.algorithms.approximation.tests.test_TestBase.setup_class(cls)
networkx.algorithms.approximation.tests.test_TestGreedyTSP(TestBase)
networkx.algorithms.approximation.tests.test_TestGreedyTSP.test_greedy(self)
networkx.algorithms.approximation.tests.test_TestGreedyTSP.test_ignore_selfloops(self)
networkx.algorithms.approximation.tests.test_TestGreedyTSP.test_not_complete_graph(self)
networkx.algorithms.approximation.tests.test_TestGreedyTSP.test_not_weighted_graph(self)
networkx.algorithms.approximation.tests.test_TestGreedyTSP.test_two_nodes(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP(TestBase)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_error_on_input_order_mistake(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_failure_of_costs_too_high_when_iterations_low(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_ignore_selfloops(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_not_complete_graph(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_not_weighted_graph(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_simulated_annealing_directed(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_simulated_annealing_undirected(self)
networkx.algorithms.approximation.tests.test_TestSimulatedAnnealingTSP.test_two_nodes(self)
networkx.algorithms.approximation.tests.test_TestThresholdAcceptingTSP(TestSimulatedAnnealingTSP)
networkx.algorithms.approximation.tests.test_TestThresholdAcceptingTSP.test_failure_of_costs_too_high_when_iterations_low(self)
networkx.algorithms.approximation.tests.test_test_TSP_incomplete_graph_short_path()
networkx.algorithms.approximation.tests.test_test_TSP_method()
networkx.algorithms.approximation.tests.test_test_TSP_unweighted()
networkx.algorithms.approximation.tests.test_test_TSP_weighted()
networkx.algorithms.approximation.tests.test_test_asadpour_disconnected_graph()
networkx.algorithms.approximation.tests.test_test_asadpour_empty_graph()
networkx.algorithms.approximation.tests.test_test_asadpour_incomplete_graph()
networkx.algorithms.approximation.tests.test_test_asadpour_integral_held_karp()
networkx.algorithms.approximation.tests.test_test_asadpour_real_world()
networkx.algorithms.approximation.tests.test_test_asadpour_real_world_path()
networkx.algorithms.approximation.tests.test_test_asadpour_tsp()
networkx.algorithms.approximation.tests.test_test_ascent_fractional_solution()
networkx.algorithms.approximation.tests.test_test_ascent_method_asymmetric()
networkx.algorithms.approximation.tests.test_test_ascent_method_asymmetric_2()
networkx.algorithms.approximation.tests.test_test_christofides_hamiltonian()
networkx.algorithms.approximation.tests.test_test_christofides_ignore_selfloops()
networkx.algorithms.approximation.tests.test_test_christofides_incomplete_graph()
networkx.algorithms.approximation.tests.test_test_directed_tsp_impossible()
networkx.algorithms.approximation.tests.test_test_held_karp_ascent()
networkx.algorithms.approximation.tests.test_test_held_karp_ascent_asymmetric_3()
networkx.algorithms.approximation.tests.test_test_held_karp_ascent_fractional_asymmetric()
networkx.algorithms.approximation.tests.test_test_spanning_tree_distribution()
networkx.algorithms.approximation.tests.test_traveling_salesman.TestBase
networkx.algorithms.approximation.tests.test_traveling_salesman.TestBase.setup_class(cls)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP(TestBase)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP.test_greedy(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP.test_ignore_selfloops(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP.test_not_complete_graph(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP.test_not_weighted_graph(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestGreedyTSP.test_two_nodes(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP(TestBase)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_error_on_input_order_mistake(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_failure_of_costs_too_high_when_iterations_low(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_ignore_selfloops(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_not_complete_graph(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_not_weighted_graph(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_simulated_annealing_directed(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_simulated_annealing_undirected(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestSimulatedAnnealingTSP.test_two_nodes(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestThresholdAcceptingTSP(TestSimulatedAnnealingTSP)
networkx.algorithms.approximation.tests.test_traveling_salesman.TestThresholdAcceptingTSP.test_failure_of_costs_too_high_when_iterations_low(self)
networkx.algorithms.approximation.tests.test_traveling_salesman.test_TSP_incomplete_graph_short_path()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_TSP_method()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_TSP_unweighted()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_TSP_weighted()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_disconnected_graph()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_empty_graph()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_incomplete_graph()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_integral_held_karp()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_real_world()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_real_world_path()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_asadpour_tsp()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_ascent_fractional_solution()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_ascent_method_asymmetric()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_ascent_method_asymmetric_2()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_christofides_hamiltonian()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_christofides_ignore_selfloops()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_christofides_incomplete_graph()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_directed_tsp_impossible()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_held_karp_ascent()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_held_karp_ascent_asymmetric_3()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_held_karp_ascent_fractional_asymmetric()
networkx.algorithms.approximation.tests.test_traveling_salesman.test_spanning_tree_distribution()
networkx.algorithms.approximation.tests.test_traveling_salesman.validate_solution(soln,cost,exp_soln,exp_cost)
networkx.algorithms.approximation.tests.test_traveling_salesman.validate_symmetric_solution(soln,cost,exp_soln,exp_cost)
networkx.algorithms.approximation.tests.test_validate_solution(soln,cost,exp_soln,exp_cost)
networkx.algorithms.approximation.tests.test_validate_symmetric_solution(soln,cost,exp_soln,exp_cost)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/coloring/equitable_coloring.py----------------------------------------
A:networkx.algorithms.coloring.equitable_coloring.color_set_size->defaultdict(int)
A:networkx.algorithms.coloring.equitable_coloring.all_set_sizes->set(color_set_size.values())
A:networkx.algorithms.coloring.equitable_coloring.(a, b)->list(all_set_sizes)
A:networkx.algorithms.coloring.equitable_coloring.C->make_C_from_F(F)
A:networkx.algorithms.coloring.equitable_coloring.nodes->L.keys()
A:networkx.algorithms.coloring.equitable_coloring.colors->make_C_from_F(F).keys()
A:networkx.algorithms.coloring.equitable_coloring.w->next((x for x in C[X] if N[x, Y] == 0))
A:networkx.algorithms.coloring.equitable_coloring.n_->len(G)
A:networkx.algorithms.coloring.equitable_coloring.K->networkx.relabel_nodes(nx.complete_graph(p), {idx: idx + n_ for idx in range(p)})
A:networkx.algorithms.coloring.equitable_coloring.excluded_colors->set()
A:networkx.algorithms.coloring.equitable_coloring.A_cal->set()
A:networkx.algorithms.coloring.equitable_coloring.marked->set(reachable)
A:networkx.algorithms.coloring.equitable_coloring.A_0->set()
A:networkx.algorithms.coloring.equitable_coloring.A_cal_0->set()
A:networkx.algorithms.coloring.equitable_coloring.y->next((node for node in L[w] if F[node] == X_prime and N[node, W_1] == 1))
A:networkx.algorithms.coloring.equitable_coloring.B_cal_prime->set()
A:networkx.algorithms.coloring.equitable_coloring.I_set->set()
A:networkx.algorithms.coloring.equitable_coloring.I_covered->set()
A:networkx.algorithms.coloring.equitable_coloring.W_plus->next((k for k in C.keys() if N[w, k] == 0 and k not in A_cal))
A:networkx.algorithms.coloring.equitable_coloring.G->networkx.relabel_nodes(G, nodes_to_int, copy=True)
A:networkx.algorithms.coloring.equitable_coloring.r_->max((G.degree(node) for node in G.nodes))
A:networkx.algorithms.coloring.equitable_coloring.N->make_N_from_L_C(L_, C)
A:networkx.algorithms.coloring.equitable_coloring.H->make_H_from_C_N(C, N)
A:networkx.algorithms.coloring.equitable_coloring.edges_seen->set()
A:networkx.algorithms.coloring.equitable_coloring.Y->next((k for k in C.keys() if N[u, k] == 0))
networkx.algorithms.coloring.equitable_color(G,num_colors)
networkx.algorithms.coloring.equitable_coloring.change_color(u,X,Y,N,H,F,C,L)
networkx.algorithms.coloring.equitable_coloring.equitable_color(G,num_colors)
networkx.algorithms.coloring.equitable_coloring.is_coloring(G,coloring)
networkx.algorithms.coloring.equitable_coloring.is_equitable(G,coloring,num_colors=None)
networkx.algorithms.coloring.equitable_coloring.make_C_from_F(F)
networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N(C,N)
networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C(L,C)
networkx.algorithms.coloring.equitable_coloring.move_witnesses(src_color,dst_color,N,H,F,C,T_cal,L)
networkx.algorithms.coloring.equitable_coloring.pad_graph(G,num_colors)
networkx.algorithms.coloring.equitable_coloring.procedure_P(V_minus,V_plus,N,H,F,C,L,excluded_colors=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/coloring/greedy_coloring.py----------------------------------------
A:networkx.algorithms.coloring.greedy_coloring.nodes->strategy(G, colors)
A:networkx.algorithms.coloring.greedy_coloring.H->G.subgraph(remaining).copy()
A:networkx.algorithms.coloring.greedy_coloring.result->set()
A:networkx.algorithms.coloring.greedy_coloring.degrees->defaultdict(set)
A:networkx.algorithms.coloring.greedy_coloring.lbound->min(lbound, d)
A:networkx.algorithms.coloring.greedy_coloring.min_degree->find_min_degree()
A:networkx.algorithms.coloring.greedy_coloring.u->degrees[min_degree].pop()
A:networkx.algorithms.coloring.greedy_coloring.degree->G.subgraph(remaining).copy().degree(v)
A:networkx.algorithms.coloring.greedy_coloring.remaining->set(G)
A:networkx.algorithms.coloring.greedy_coloring.G->G.subgraph(remaining).subgraph(remaining)
A:networkx.algorithms.coloring.greedy_coloring.v->min(remaining, key=G.degree)
A:networkx.algorithms.coloring.greedy_coloring.remaining_nodes->set(G)
A:networkx.algorithms.coloring.greedy_coloring.source->arbitrary_element(component)
A:networkx.algorithms.coloring.greedy_coloring.node->max(saturation, key=lambda v: (saturation[v], G.degree(v)))
A:networkx.algorithms.coloring.greedy_coloring.strategy->STRATEGIES.get(strategy, strategy)
A:networkx.algorithms.coloring.greedy_coloring.n->len(G)
A:networkx.algorithms.coloring.greedy_coloring.adj_entry1->_AdjEntry(node2)
A:networkx.algorithms.coloring.greedy_coloring.adj_entry2->_AdjEntry(node1)
A:networkx.algorithms.coloring.greedy_coloring.neighbors->graph[node].iter_neighbors()
A:networkx.algorithms.coloring.greedy_coloring.k1->next(itertools.dropwhile(lambda x: x in col_used, itertools.count()))
A:networkx.algorithms.coloring.greedy_coloring.visited->set(col1_adj)
A:networkx.algorithms.coloring.greedy_coloring.neighbor_cols->graph[search_node].iter_neighbors_color(col_opp)
A:networkx.algorithms.coloring.greedy_coloring.frontier->list(col1_adj)
A:networkx.algorithms.coloring.greedy_coloring.k->max(k1, k)
networkx.algorithms.coloring._AdjEntry(self,node_id)
networkx.algorithms.coloring._AdjEntry.__repr__(self)
networkx.algorithms.coloring._Node(self,node_id,n)
networkx.algorithms.coloring._Node.__repr__(self)
networkx.algorithms.coloring._Node.assign_color(self,adj_entry,color)
networkx.algorithms.coloring._Node.clear_color(self,adj_entry,color)
networkx.algorithms.coloring._Node.iter_neighbors(self)
networkx.algorithms.coloring._Node.iter_neighbors_color(self,color)
networkx.algorithms.coloring._greedy_coloring_with_interchange(G,nodes)
networkx.algorithms.coloring._maximal_independent_set(G)
networkx.algorithms.coloring.greedy_color(G,strategy='largest_first',interchange=False)
networkx.algorithms.coloring.greedy_coloring._AdjEntry(self,node_id)
networkx.algorithms.coloring.greedy_coloring._AdjEntry.__init__(self,node_id)
networkx.algorithms.coloring.greedy_coloring._AdjEntry.__repr__(self)
networkx.algorithms.coloring.greedy_coloring._Node(self,node_id,n)
networkx.algorithms.coloring.greedy_coloring._Node.__init__(self,node_id,n)
networkx.algorithms.coloring.greedy_coloring._Node.__repr__(self)
networkx.algorithms.coloring.greedy_coloring._Node.assign_color(self,adj_entry,color)
networkx.algorithms.coloring.greedy_coloring._Node.clear_color(self,adj_entry,color)
networkx.algorithms.coloring.greedy_coloring._Node.iter_neighbors(self)
networkx.algorithms.coloring.greedy_coloring._Node.iter_neighbors_color(self,color)
networkx.algorithms.coloring.greedy_coloring._greedy_coloring_with_interchange(G,nodes)
networkx.algorithms.coloring.greedy_coloring._maximal_independent_set(G)
networkx.algorithms.coloring.greedy_coloring.greedy_color(G,strategy='largest_first',interchange=False)
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential(G,colors,traversal='bfs')
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_bfs(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_dfs(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_independent_set(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_largest_first(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_random_sequential(G,colors,seed=None)
networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last(G,colors)
networkx.algorithms.coloring.strategy_connected_sequential(G,colors,traversal='bfs')
networkx.algorithms.coloring.strategy_connected_sequential_bfs(G,colors)
networkx.algorithms.coloring.strategy_connected_sequential_dfs(G,colors)
networkx.algorithms.coloring.strategy_independent_set(G,colors)
networkx.algorithms.coloring.strategy_largest_first(G,colors)
networkx.algorithms.coloring.strategy_random_sequential(G,colors,seed=None)
networkx.algorithms.coloring.strategy_saturation_largest_first(G,colors)
networkx.algorithms.coloring.strategy_smallest_last(G,colors)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/coloring/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/coloring/tests/test_coloring.py----------------------------------------
A:networkx.algorithms.coloring.tests.test_coloring.graph->networkx.Graph()
A:networkx.algorithms.coloring.tests.test_coloring.coloring->dict_to_sets(coloring)
A:networkx.algorithms.coloring.tests.test_coloring.colors_1->networkx.coloring.greedy_color(graph, 'largest_first')
A:networkx.algorithms.coloring.tests.test_coloring.colors_2->networkx.coloring.greedy_color(graph, nx.coloring.strategy_largest_first)
A:networkx.algorithms.coloring.tests.test_coloring.c1->networkx.coloring.greedy_color(graph, lambda g, c: rs(g, c, seed=1))
A:networkx.algorithms.coloring.tests.test_coloring.G->G()
A:networkx.algorithms.coloring.tests.test_coloring.C->networkx.algorithms.coloring.equitable_coloring.make_C_from_F(F)
A:networkx.algorithms.coloring.tests.test_coloring.N->networkx.algorithms.coloring.equitable_coloring.make_N_from_L_C(L, C)
A:networkx.algorithms.coloring.tests.test_coloring.H->networkx.algorithms.coloring.equitable_coloring.make_H_from_C_N(C, N)
A:networkx.algorithms.coloring.tests.test_coloring.params->make_params_from_graph(G=G, F=F)
A:networkx.algorithms.coloring.tests.test_coloring.aux_colored_nodes->colored_nodes.copy()
A:networkx.algorithms.coloring.tests.test_coloring.node_iterator->networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first(G, aux_colored_nodes)
A:networkx.algorithms.coloring.tests.test_coloring.(full_color_assignment, full_colored_nodes)->color_remaining_nodes(G, colored_nodes)
A:networkx.algorithms.coloring.tests.test_coloring.(partial_color_assignment, partial_colored_nodes)->color_remaining_nodes(G, colored_nodes, full_color_assignment=full_color_assignment, nodes_to_add_between_calls=nodes_to_add_between_calls)
A:networkx.algorithms.coloring.tests.test_coloring.s->len(C[0])
A:networkx.algorithms.coloring.tests.test_coloring.num_colors->len(C.keys())
A:networkx.algorithms.coloring.tests.test_coloring.num_nodes->len(G)
networkx.algorithms.coloring.tests.test_coloring.TestColoring
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_bad_inputs(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_basic_cases(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_case_V_plus_not_in_A_cal(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cast_no_solo(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_equitable_color_large(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hard_prob(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_hardest_prob(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_interchange_invalid(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_coloring(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_is_equitable(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_num_colors(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_seed_argument(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_special_cases(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_strategy_as_function(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_strategy_saturation_largest_first(self)
networkx.algorithms.coloring.tests.test_coloring.check_state(L,N,H,F,C)
networkx.algorithms.coloring.tests.test_coloring.cs_shc()
networkx.algorithms.coloring.tests.test_coloring.dict_to_sets(colors)
networkx.algorithms.coloring.tests.test_coloring.disconnected()
networkx.algorithms.coloring.tests.test_coloring.empty_graph()
networkx.algorithms.coloring.tests.test_coloring.gis_hc()
networkx.algorithms.coloring.tests.test_coloring.gis_shc()
networkx.algorithms.coloring.tests.test_coloring.lf_hc()
networkx.algorithms.coloring.tests.test_coloring.lf_shc()
networkx.algorithms.coloring.tests.test_coloring.lfi_hc()
networkx.algorithms.coloring.tests.test_coloring.lfi_shc()
networkx.algorithms.coloring.tests.test_coloring.make_params_from_graph(G,F)
networkx.algorithms.coloring.tests.test_coloring.max_degree(G)
networkx.algorithms.coloring.tests.test_coloring.one_node_graph()
networkx.algorithms.coloring.tests.test_coloring.rs_shc()
networkx.algorithms.coloring.tests.test_coloring.rsi_shc()
networkx.algorithms.coloring.tests.test_coloring.sl_hc()
networkx.algorithms.coloring.tests.test_coloring.sl_shc()
networkx.algorithms.coloring.tests.test_coloring.slf_hc()
networkx.algorithms.coloring.tests.test_coloring.slf_shc()
networkx.algorithms.coloring.tests.test_coloring.sli_hc()
networkx.algorithms.coloring.tests.test_coloring.sli_shc()
networkx.algorithms.coloring.tests.test_coloring.three_node_clique()
networkx.algorithms.coloring.tests.test_coloring.two_node_graph()
networkx.algorithms.coloring.tests.test_coloring.verify_coloring(graph,coloring)
networkx.algorithms.coloring.tests.test_coloring.verify_length(coloring,expected)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/coloring/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/product.py----------------------------------------
A:networkx.algorithms.operators.product.GH->_init_product_graph(G, H)
A:networkx.algorithms.operators.product.H->networkx.Graph()
A:networkx.algorithms.operators.product.R->networkx.Graph()
networkx.algorithms.operators._dict_product(d1,d2)
networkx.algorithms.operators._directed_edges_cross_edges(G,H)
networkx.algorithms.operators._edges_cross_nodes(G,H)
networkx.algorithms.operators._edges_cross_nodes_and_nodes(G,H)
networkx.algorithms.operators._init_product_graph(G,H)
networkx.algorithms.operators._node_product(G,H)
networkx.algorithms.operators._nodes_cross_edges(G,H)
networkx.algorithms.operators._undirected_edges_cross_edges(G,H)
networkx.algorithms.operators.cartesian_product(G,H)
networkx.algorithms.operators.corona_product(G,H)
networkx.algorithms.operators.lexicographic_product(G,H)
networkx.algorithms.operators.power(G,k)
networkx.algorithms.operators.product._dict_product(d1,d2)
networkx.algorithms.operators.product._directed_edges_cross_edges(G,H)
networkx.algorithms.operators.product._edges_cross_nodes(G,H)
networkx.algorithms.operators.product._edges_cross_nodes_and_nodes(G,H)
networkx.algorithms.operators.product._init_product_graph(G,H)
networkx.algorithms.operators.product._node_product(G,H)
networkx.algorithms.operators.product._nodes_cross_edges(G,H)
networkx.algorithms.operators.product._undirected_edges_cross_edges(G,H)
networkx.algorithms.operators.product.cartesian_product(G,H)
networkx.algorithms.operators.product.corona_product(G,H)
networkx.algorithms.operators.product.lexicographic_product(G,H)
networkx.algorithms.operators.product.power(G,k)
networkx.algorithms.operators.product.rooted_product(G,H,root)
networkx.algorithms.operators.product.strong_product(G,H)
networkx.algorithms.operators.product.tensor_product(G,H)
networkx.algorithms.operators.rooted_product(G,H,root)
networkx.algorithms.operators.strong_product(G,H)
networkx.algorithms.operators.tensor_product(G,H)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/all.py----------------------------------------
A:networkx.algorithms.operators.all.seen_nodes->set()
A:networkx.algorithms.operators.all.rename->chain(rename, repeat(None))
A:networkx.algorithms.operators.all.G_nodes_set->set(G.nodes)
A:networkx.algorithms.operators.all.R->G.__class__()
A:networkx.algorithms.operators.all.G_edges_set->set(G.edges(keys=True) if G.is_multigraph() else G.edges())
networkx.algorithms.operators.all.compose_all(graphs)
networkx.algorithms.operators.all.disjoint_union_all(graphs)
networkx.algorithms.operators.all.intersection_all(graphs)
networkx.algorithms.operators.all.union_all(graphs,rename=())
networkx.algorithms.operators.compose_all(graphs)
networkx.algorithms.operators.disjoint_union_all(graphs)
networkx.algorithms.operators.intersection_all(graphs)
networkx.algorithms.operators.union_all(graphs,rename=())


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/unary.py----------------------------------------
A:networkx.algorithms.operators.unary.R->G.__class__()
networkx.algorithms.operators.complement(G)
networkx.algorithms.operators.reverse(G,copy=True)
networkx.algorithms.operators.unary.complement(G)
networkx.algorithms.operators.unary.reverse(G,copy=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/binary.py----------------------------------------
A:networkx.algorithms.operators.binary.R->union(G, H, rename)
A:networkx.algorithms.operators.binary.edges->add_prefix(H, rename[1]).edges()
A:networkx.algorithms.operators.binary.gnodes->set(G)
A:networkx.algorithms.operators.binary.hnodes->set(H)
A:networkx.algorithms.operators.binary.nodes->set(G).symmetric_difference(hnodes)
A:networkx.algorithms.operators.binary.G->add_prefix(G, rename[0])
A:networkx.algorithms.operators.binary.H->add_prefix(H, rename[1])
networkx.algorithms.operators.binary.compose(G,H)
networkx.algorithms.operators.binary.difference(G,H)
networkx.algorithms.operators.binary.disjoint_union(G,H)
networkx.algorithms.operators.binary.full_join(G,H,rename=(None,None))
networkx.algorithms.operators.binary.intersection(G,H)
networkx.algorithms.operators.binary.symmetric_difference(G,H)
networkx.algorithms.operators.binary.union(G,H,rename=())
networkx.algorithms.operators.compose(G,H)
networkx.algorithms.operators.difference(G,H)
networkx.algorithms.operators.disjoint_union(G,H)
networkx.algorithms.operators.full_join(G,H,rename=(None,None))
networkx.algorithms.operators.intersection(G,H)
networkx.algorithms.operators.symmetric_difference(G,H)
networkx.algorithms.operators.union(G,H,rename=())


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/tests/test_binary.py----------------------------------------
A:networkx.algorithms.operators.tests.test_binary.g->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.h->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.gh->networkx.symmetric_difference(g, h)
A:networkx.algorithms.operators.tests.test_binary.G->networkx.Graph()
A:networkx.algorithms.operators.tests.test_binary.H->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.I->networkx.intersection(G, H)
A:networkx.algorithms.operators.tests.test_binary.D->networkx.difference(H, G)
A:networkx.algorithms.operators.tests.test_binary.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_binary.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_binary.G1->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_binary.G2->networkx.union(G2, G2, rename=('', 'copy'))
A:networkx.algorithms.operators.tests.test_binary.H1->networkx.union(H, G1, rename=('H', 'G1'))
A:networkx.algorithms.operators.tests.test_binary.H2->networkx.union(H, G2, rename=('H', ''))
A:networkx.algorithms.operators.tests.test_binary.E->networkx.disjoint_union(G1, G2)
A:networkx.algorithms.operators.tests.test_binary.R->networkx.compose(G, H)
A:networkx.algorithms.operators.tests.test_binary.GH->networkx.compose(G, H)
A:networkx.algorithms.operators.tests.test_binary.U->networkx.full_join(G, H, rename=('g', 'h'))
networkx.algorithms.operators.tests.test_binary.test_compose_multigraph()
networkx.algorithms.operators.tests.test_binary.test_difference()
networkx.algorithms.operators.tests.test_binary.test_difference2()
networkx.algorithms.operators.tests.test_binary.test_difference_attributes()
networkx.algorithms.operators.tests.test_binary.test_difference_multigraph_attributes()
networkx.algorithms.operators.tests.test_binary.test_difference_raise()
networkx.algorithms.operators.tests.test_binary.test_disjoint_union_multigraph()
networkx.algorithms.operators.tests.test_binary.test_full_join_graph()
networkx.algorithms.operators.tests.test_binary.test_full_join_multigraph()
networkx.algorithms.operators.tests.test_binary.test_intersection()
networkx.algorithms.operators.tests.test_binary.test_intersection_attributes()
networkx.algorithms.operators.tests.test_binary.test_intersection_attributes_node_sets_different()
networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes()
networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes_node_set_different()
networkx.algorithms.operators.tests.test_binary.test_intersection_node_sets_different()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_union()
networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_multigraph()
networkx.algorithms.operators.tests.test_binary.test_union_and_compose()
networkx.algorithms.operators.tests.test_binary.test_union_attributes()
networkx.algorithms.operators.tests.test_binary.test_union_multigraph()
networkx.algorithms.operators.tests.test_test_compose_multigraph()
networkx.algorithms.operators.tests.test_test_difference()
networkx.algorithms.operators.tests.test_test_difference2()
networkx.algorithms.operators.tests.test_test_difference_attributes()
networkx.algorithms.operators.tests.test_test_difference_multigraph_attributes()
networkx.algorithms.operators.tests.test_test_difference_raise()
networkx.algorithms.operators.tests.test_test_disjoint_union_multigraph()
networkx.algorithms.operators.tests.test_test_full_join_graph()
networkx.algorithms.operators.tests.test_test_full_join_multigraph()
networkx.algorithms.operators.tests.test_test_intersection()
networkx.algorithms.operators.tests.test_test_intersection_attributes()
networkx.algorithms.operators.tests.test_test_intersection_attributes_node_sets_different()
networkx.algorithms.operators.tests.test_test_intersection_multigraph_attributes()
networkx.algorithms.operators.tests.test_test_intersection_multigraph_attributes_node_set_different()
networkx.algorithms.operators.tests.test_test_intersection_node_sets_different()
networkx.algorithms.operators.tests.test_test_mixed_type_union()
networkx.algorithms.operators.tests.test_test_symmetric_difference_multigraph()
networkx.algorithms.operators.tests.test_test_union_and_compose()
networkx.algorithms.operators.tests.test_test_union_attributes()
networkx.algorithms.operators.tests.test_test_union_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/tests/test_product.py----------------------------------------
A:networkx.algorithms.operators.tests.test_product.P->networkx.strong_product(nx.DiGraph(), nx.Graph())
A:networkx.algorithms.operators.tests.test_product.null->networkx.null_graph()
A:networkx.algorithms.operators.tests.test_product.empty10->networkx.empty_graph(10)
A:networkx.algorithms.operators.tests.test_product.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_product.K10->networkx.complete_graph(10)
A:networkx.algorithms.operators.tests.test_product.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_product.P10->networkx.path_graph(10)
A:networkx.algorithms.operators.tests.test_product.G->networkx.cycle_graph(3)
A:networkx.algorithms.operators.tests.test_product.P5->networkx.path_graph(5)
A:networkx.algorithms.operators.tests.test_product.K5->networkx.complete_graph(5)
A:networkx.algorithms.operators.tests.test_product.K2->networkx.complete_graph(2)
A:networkx.algorithms.operators.tests.test_product.H->networkx.path_graph(2)
A:networkx.algorithms.operators.tests.test_product.GH->networkx.strong_product(G, H)
A:networkx.algorithms.operators.tests.test_product.P2->networkx.path_graph(2)
A:networkx.algorithms.operators.tests.test_product.R->networkx.rooted_product(G, H, 'a')
A:networkx.algorithms.operators.tests.test_product.C->networkx.corona_product(G, H)
networkx.algorithms.operators.tests.test_product.test_cartesian_product_classic()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_multigraph()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_null()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_raises()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_random()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_size()
networkx.algorithms.operators.tests.test_product.test_corona_product()
networkx.algorithms.operators.tests.test_product.test_graph_power()
networkx.algorithms.operators.tests.test_product.test_graph_power_negative()
networkx.algorithms.operators.tests.test_product.test_graph_power_raises()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_combinations()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_null()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_raises()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_random()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_size()
networkx.algorithms.operators.tests.test_product.test_rooted_product()
networkx.algorithms.operators.tests.test_product.test_rooted_product_raises()
networkx.algorithms.operators.tests.test_product.test_strong_product_combinations()
networkx.algorithms.operators.tests.test_product.test_strong_product_null()
networkx.algorithms.operators.tests.test_product.test_strong_product_raises()
networkx.algorithms.operators.tests.test_product.test_strong_product_random()
networkx.algorithms.operators.tests.test_product.test_strong_product_size()
networkx.algorithms.operators.tests.test_product.test_tensor_product_classic_result()
networkx.algorithms.operators.tests.test_product.test_tensor_product_combinations()
networkx.algorithms.operators.tests.test_product.test_tensor_product_null()
networkx.algorithms.operators.tests.test_product.test_tensor_product_raises()
networkx.algorithms.operators.tests.test_product.test_tensor_product_random()
networkx.algorithms.operators.tests.test_product.test_tensor_product_size()
networkx.algorithms.operators.tests.test_test_cartesian_product_classic()
networkx.algorithms.operators.tests.test_test_cartesian_product_multigraph()
networkx.algorithms.operators.tests.test_test_cartesian_product_null()
networkx.algorithms.operators.tests.test_test_cartesian_product_raises()
networkx.algorithms.operators.tests.test_test_cartesian_product_random()
networkx.algorithms.operators.tests.test_test_cartesian_product_size()
networkx.algorithms.operators.tests.test_test_corona_product()
networkx.algorithms.operators.tests.test_test_graph_power()
networkx.algorithms.operators.tests.test_test_graph_power_negative()
networkx.algorithms.operators.tests.test_test_graph_power_raises()
networkx.algorithms.operators.tests.test_test_lexicographic_product_combinations()
networkx.algorithms.operators.tests.test_test_lexicographic_product_null()
networkx.algorithms.operators.tests.test_test_lexicographic_product_raises()
networkx.algorithms.operators.tests.test_test_lexicographic_product_random()
networkx.algorithms.operators.tests.test_test_lexicographic_product_size()
networkx.algorithms.operators.tests.test_test_rooted_product()
networkx.algorithms.operators.tests.test_test_rooted_product_raises()
networkx.algorithms.operators.tests.test_test_strong_product_combinations()
networkx.algorithms.operators.tests.test_test_strong_product_null()
networkx.algorithms.operators.tests.test_test_strong_product_raises()
networkx.algorithms.operators.tests.test_test_strong_product_random()
networkx.algorithms.operators.tests.test_test_strong_product_size()
networkx.algorithms.operators.tests.test_test_tensor_product_classic_result()
networkx.algorithms.operators.tests.test_test_tensor_product_combinations()
networkx.algorithms.operators.tests.test_test_tensor_product_null()
networkx.algorithms.operators.tests.test_test_tensor_product_raises()
networkx.algorithms.operators.tests.test_test_tensor_product_random()
networkx.algorithms.operators.tests.test_test_tensor_product_size()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/tests/test_unary.py----------------------------------------
A:networkx.algorithms.operators.tests.test_unary.null->networkx.null_graph()
A:networkx.algorithms.operators.tests.test_unary.empty1->networkx.empty_graph(1)
A:networkx.algorithms.operators.tests.test_unary.empty10->networkx.empty_graph(10)
A:networkx.algorithms.operators.tests.test_unary.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_unary.K5->networkx.complete_graph(5)
A:networkx.algorithms.operators.tests.test_unary.K10->networkx.complete_graph(10)
A:networkx.algorithms.operators.tests.test_unary.P2->networkx.path_graph(2)
A:networkx.algorithms.operators.tests.test_unary.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_unary.P5->networkx.path_graph(5)
A:networkx.algorithms.operators.tests.test_unary.P10->networkx.path_graph(10)
A:networkx.algorithms.operators.tests.test_unary.G->networkx.complement(K5)
A:networkx.algorithms.operators.tests.test_unary.P3cc->networkx.complement(nx.complement(P3))
A:networkx.algorithms.operators.tests.test_unary.nullcc->networkx.complement(nx.complement(null))
A:networkx.algorithms.operators.tests.test_unary.b->networkx.bull_graph()
A:networkx.algorithms.operators.tests.test_unary.bcc->networkx.complement(nx.complement(b))
A:networkx.algorithms.operators.tests.test_unary.G1->networkx.Graph()
A:networkx.algorithms.operators.tests.test_unary.G1C->networkx.complement(G1)
networkx.algorithms.operators.tests.test_test_complement()
networkx.algorithms.operators.tests.test_test_complement_2()
networkx.algorithms.operators.tests.test_test_reverse1()
networkx.algorithms.operators.tests.test_unary.test_complement()
networkx.algorithms.operators.tests.test_unary.test_complement_2()
networkx.algorithms.operators.tests.test_unary.test_reverse1()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/operators/tests/test_all.py----------------------------------------
A:networkx.algorithms.operators.tests.test_all.g->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.h->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.j->networkx.MultiGraph().copy()
A:networkx.algorithms.operators.tests.test_all.ghj->networkx.union_all([g, h, j], rename=('g', 'h', 'j'))
A:networkx.algorithms.operators.tests.test_all.G->networkx.Graph()
A:networkx.algorithms.operators.tests.test_all.H->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.R->networkx.intersection_all(l)
A:networkx.algorithms.operators.tests.test_all.I->networkx.Graph()
A:networkx.algorithms.operators.tests.test_all.gh->networkx.intersection_all([g, h])
A:networkx.algorithms.operators.tests.test_all.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_all.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_all.G1->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.G2->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.H1->networkx.union_all([H, G1], rename=('H', 'G1'))
A:networkx.algorithms.operators.tests.test_all.H2->networkx.union_all([H, G2], rename=('H', ''))
A:networkx.algorithms.operators.tests.test_all.E->networkx.disjoint_union_all([G1, G2])
A:networkx.algorithms.operators.tests.test_all.G3->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.G4->networkx.union_all([G1, G2, G3], rename=('G1', 'G2', 'G3'))
A:networkx.algorithms.operators.tests.test_all.GH->networkx.union_all([G, H])
A:networkx.algorithms.operators.tests.test_all.U->networkx.compose_all([G, H, I])
A:networkx.algorithms.operators.tests.test_all.C->networkx.compose_all(l)
networkx.algorithms.operators.tests.test_all.test_empty_compose_all()
networkx.algorithms.operators.tests.test_all.test_empty_disjoint_union()
networkx.algorithms.operators.tests.test_all.test_empty_intersection_all()
networkx.algorithms.operators.tests.test_all.test_empty_union()
networkx.algorithms.operators.tests.test_all.test_input_output()
networkx.algorithms.operators.tests.test_all.test_intersection_all()
networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes()
networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes_different_node_sets()
networkx.algorithms.operators.tests.test_all.test_intersection_all_different_node_sets()
networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes()
networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes_different_node_sets()
networkx.algorithms.operators.tests.test_all.test_mixed_type_compose()
networkx.algorithms.operators.tests.test_all.test_mixed_type_disjoint_union()
networkx.algorithms.operators.tests.test_all.test_mixed_type_intersection()
networkx.algorithms.operators.tests.test_all.test_mixed_type_union()
networkx.algorithms.operators.tests.test_all.test_union_all_and_compose_all()
networkx.algorithms.operators.tests.test_all.test_union_all_attributes()
networkx.algorithms.operators.tests.test_all.test_union_all_multigraph()
networkx.algorithms.operators.tests.test_test_empty_compose_all()
networkx.algorithms.operators.tests.test_test_empty_disjoint_union()
networkx.algorithms.operators.tests.test_test_empty_intersection_all()
networkx.algorithms.operators.tests.test_test_empty_union()
networkx.algorithms.operators.tests.test_test_input_output()
networkx.algorithms.operators.tests.test_test_intersection_all()
networkx.algorithms.operators.tests.test_test_intersection_all_attributes()
networkx.algorithms.operators.tests.test_test_intersection_all_attributes_different_node_sets()
networkx.algorithms.operators.tests.test_test_intersection_all_different_node_sets()
networkx.algorithms.operators.tests.test_test_intersection_all_multigraph_attributes()
networkx.algorithms.operators.tests.test_test_intersection_all_multigraph_attributes_different_node_sets()
networkx.algorithms.operators.tests.test_test_mixed_type_compose()
networkx.algorithms.operators.tests.test_test_mixed_type_disjoint_union()
networkx.algorithms.operators.tests.test_test_mixed_type_intersection()
networkx.algorithms.operators.tests.test_test_mixed_type_union()
networkx.algorithms.operators.tests.test_test_union_all_and_compose_all()
networkx.algorithms.operators.tests.test_test_union_all_attributes()
networkx.algorithms.operators.tests.test_test_union_all_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/preflowpush.py----------------------------------------
A:networkx.algorithms.flow.preflowpush.R->preflow_push_impl(G, s, t, capacity, residual, global_relabel_freq, value_only)
A:networkx.algorithms.flow.preflowpush.q->deque([(src, 0)])
A:networkx.algorithms.flow.preflowpush.(u, height)->deque([(src, 0)]).popleft()
A:networkx.algorithms.flow.preflowpush.heights->reverse_bfs(src)
A:networkx.algorithms.flow.preflowpush.n->len(R)
A:networkx.algorithms.flow.preflowpush.max_height->max(max_height, height)
A:networkx.algorithms.flow.preflowpush.grt->GlobalRelabelThreshold(n, R.size(), global_relabel_freq)
A:networkx.algorithms.flow.preflowpush.R_nodes[u]['curr_edge']->CurrentEdge(R_succ[u])
A:networkx.algorithms.flow.preflowpush.(v, attr)->curr_edge.get()
A:networkx.algorithms.flow.preflowpush.flow->min(R_nodes[u]['excess'], attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.preflowpush.height->global_relabel(False)
A:networkx.algorithms.flow.preflowpush.u->arbitrary_element(level.active)
networkx.algorithms.flow.preflow_push(G,s,t,capacity='capacity',residual=None,global_relabel_freq=1,value_only=False)
networkx.algorithms.flow.preflow_push_impl(G,s,t,capacity,residual,global_relabel_freq,value_only)
networkx.algorithms.flow.preflowpush.preflow_push(G,s,t,capacity='capacity',residual=None,global_relabel_freq=1,value_only=False)
networkx.algorithms.flow.preflowpush.preflow_push_impl(G,s,t,capacity,residual,global_relabel_freq,value_only)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/mincost.py----------------------------------------
A:networkx.algorithms.flow.mincost.maxFlow->networkx.maximum_flow_value(G, s, t, capacity=capacity)
A:networkx.algorithms.flow.mincost.H->networkx.DiGraph(G)
networkx.algorithms.cost_of_flow(G,flowDict,weight='weight')
networkx.algorithms.flow.mincost.cost_of_flow(G,flowDict,weight='weight')
networkx.algorithms.flow.mincost.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.algorithms.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/capacityscaling.py----------------------------------------
A:networkx.algorithms.flow.capacityscaling.G->networkx.DiGraph()
A:networkx.algorithms.flow.capacityscaling.f_inf->float('inf')
A:networkx.algorithms.flow.capacityscaling.w->e.get(weight, 0)
A:networkx.algorithms.flow.capacityscaling.R->_build_residual_network(G, demand, capacity, weight)
A:networkx.algorithms.flow.capacityscaling.inf->float('inf')
A:networkx.algorithms.flow.capacityscaling.r->min(e.get(capacity, inf), inf)
A:networkx.algorithms.flow.capacityscaling.flow_cost->sum((0 if e.get(capacity, inf) <= 0 or e.get(weight, 0) >= 0 else e[capacity] * e[weight] for (u, v, e) in nx.selfloop_edges(G, data=True)))
A:networkx.algorithms.flow.capacityscaling.wmax->max(chain([-inf], (e['capacity'] for (u, v, e) in R.edges(data=True))))
A:networkx.algorithms.flow.capacityscaling.S->set()
A:networkx.algorithms.flow.capacityscaling.T->set()
A:networkx.algorithms.flow.capacityscaling.s->arbitrary_element(S)
A:networkx.algorithms.flow.capacityscaling.h->heap()
A:networkx.algorithms.flow.capacityscaling.(u, d_u)->heap().pop()
networkx.algorithms.capacity_scaling(G,demand='demand',capacity='capacity',weight='weight',heap=BinaryHeap)
networkx.algorithms.flow._build_flow_dict(G,R,capacity,weight)
networkx.algorithms.flow._build_residual_network(G,demand,capacity,weight)
networkx.algorithms.flow._detect_unboundedness(R)
networkx.algorithms.flow.capacityscaling._build_flow_dict(G,R,capacity,weight)
networkx.algorithms.flow.capacityscaling._build_residual_network(G,demand,capacity,weight)
networkx.algorithms.flow.capacityscaling._detect_unboundedness(R)
networkx.algorithms.flow.capacityscaling.capacity_scaling(G,demand='demand',capacity='capacity',weight='weight',heap=BinaryHeap)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/utils.py----------------------------------------
A:networkx.algorithms.flow.utils.self._curr->next(self._it)
A:networkx.algorithms.flow.utils.self._it->iter(self._edges.items())
A:networkx.algorithms.flow.utils.self.active->set()
A:networkx.algorithms.flow.utils.self.inactive->set()
A:networkx.algorithms.flow.utils.R->networkx.DiGraph()
A:networkx.algorithms.flow.utils.inf->float('inf')
A:networkx.algorithms.flow.utils.r->min(attr.get(capacity, inf), inf)
A:networkx.algorithms.flow.utils.q->deque([s])
A:networkx.algorithms.flow.utils.u->deque([s]).popleft()
networkx.algorithms.flow.build_flow_dict(G,R)
networkx.algorithms.flow.build_residual_network(G,capacity)
networkx.algorithms.flow.utils.CurrentEdge(self,edges)
networkx.algorithms.flow.utils.CurrentEdge.__init__(self,edges)
networkx.algorithms.flow.utils.CurrentEdge._rewind(self)
networkx.algorithms.flow.utils.CurrentEdge.get(self)
networkx.algorithms.flow.utils.CurrentEdge.move_to_next(self)
networkx.algorithms.flow.utils.GlobalRelabelThreshold(self,n,m,freq)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.__init__(self,n,m,freq)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.add_work(self,work)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.clear_work(self)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.is_reached(self)
networkx.algorithms.flow.utils.Level(self)
networkx.algorithms.flow.utils.Level.__init__(self)
networkx.algorithms.flow.utils.build_flow_dict(G,R)
networkx.algorithms.flow.utils.build_residual_network(G,capacity)
networkx.algorithms.flow.utils.detect_unboundedness(R,s,t)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/shortestaugmentingpath.py----------------------------------------
A:networkx.algorithms.flow.shortestaugmentingpath.R->shortest_augmenting_path_impl(G, s, t, capacity, residual, two_phase, cutoff)
A:networkx.algorithms.flow.shortestaugmentingpath.q->deque([(t, 0)])
A:networkx.algorithms.flow.shortestaugmentingpath.(u, height)->deque([(t, 0)]).popleft()
A:networkx.algorithms.flow.shortestaugmentingpath.n->len(G)
A:networkx.algorithms.flow.shortestaugmentingpath.R_nodes[u]['curr_edge']->CurrentEdge(R_succ[u])
A:networkx.algorithms.flow.shortestaugmentingpath.it->iter(path)
A:networkx.algorithms.flow.shortestaugmentingpath.u->next(it)
A:networkx.algorithms.flow.shortestaugmentingpath.flow->min(flow, attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.shortestaugmentingpath.height->relabel(u)
A:networkx.algorithms.flow.shortestaugmentingpath.cutoff->float('inf')
A:networkx.algorithms.flow.shortestaugmentingpath.(v, attr)->curr_edge.get()
networkx.algorithms.flow.shortest_augmenting_path(G,s,t,capacity='capacity',residual=None,value_only=False,two_phase=False,cutoff=None)
networkx.algorithms.flow.shortest_augmenting_path_impl(G,s,t,capacity,residual,two_phase,cutoff)
networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path(G,s,t,capacity='capacity',residual=None,value_only=False,two_phase=False,cutoff=None)
networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl(G,s,t,capacity,residual,two_phase,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/networksimplex.py----------------------------------------
A:networkx.algorithms.flow.networksimplex.self.node_list->list(G)
A:networkx.algorithms.flow.networksimplex.edges->G.edges(data=True, keys=True)
A:networkx.algorithms.flow.networksimplex.inf->float('inf')
A:networkx.algorithms.flow.networksimplex.self.edge_count->len(self.edge_indices)
A:networkx.algorithms.flow.networksimplex.self.edge_flow->list(chain(repeat(0, self.edge_count), (abs(d) for d in self.node_demands)))
A:networkx.algorithms.flow.networksimplex.self.parent->list(chain(repeat(-1, n), [None]))
A:networkx.algorithms.flow.networksimplex.self.parent_edge->list(range(self.edge_count, self.edge_count + n))
A:networkx.algorithms.flow.networksimplex.self.subtree_size->list(chain(repeat(1, n), [n + 1]))
A:networkx.algorithms.flow.networksimplex.self.next_node_dft->list(chain(range(1, n), [-1, 0]))
A:networkx.algorithms.flow.networksimplex.self.prev_node_dft->list(range(-1, n))
A:networkx.algorithms.flow.networksimplex.self.last_descendent_dft->list(chain(range(n), [n - 1]))
A:networkx.algorithms.flow.networksimplex.w->e[-1].get(weight, 0)
A:networkx.algorithms.flow.networksimplex.(Wn, We)->_DataEssentialsAndFunctions(G, multigraph, demand=demand, capacity=capacity, weight=weight).find_cycle(i, p, q)
A:networkx.algorithms.flow.networksimplex.(WnR, WeR)->self.trace_path(q, w)
A:networkx.algorithms.flow.networksimplex.B->int(ceil(sqrt(self.edge_count)))
A:networkx.algorithms.flow.networksimplex.i->min(edges, key=self.reduced_cost)
A:networkx.algorithms.flow.networksimplex.c->self.reduced_cost(i)
A:networkx.algorithms.flow.networksimplex.(j, s)->min(zip(reversed(We), reversed(Wn)), key=lambda i_p: self.residual_capacity(*i_p))
A:networkx.algorithms.flow.networksimplex.multigraph->G.is_multigraph()
A:networkx.algorithms.flow.networksimplex.DEAF->_DataEssentialsAndFunctions(G, multigraph, demand=demand, capacity=capacity, weight=weight)
A:networkx.algorithms.flow.networksimplex.n->len(DEAF.node_list)
A:networkx.algorithms.flow.networksimplex.(j, s, t)->_DataEssentialsAndFunctions(G, multigraph, demand=demand, capacity=capacity, weight=weight).find_leaving_edge(Wn, We)
A:networkx.algorithms.flow.networksimplex.flow_cost->sum((w * x for (w, x) in zip(DEAF.edge_weights, DEAF.edge_flow)))
networkx.algorithms.flow._DataEssentialsAndFunctions(self,G,multigraph,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow._DataEssentialsAndFunctions.add_edge(self,i,p,q)
networkx.algorithms.flow._DataEssentialsAndFunctions.augment_flow(self,Wn,We,f)
networkx.algorithms.flow._DataEssentialsAndFunctions.find_apex(self,p,q)
networkx.algorithms.flow._DataEssentialsAndFunctions.find_cycle(self,i,p,q)
networkx.algorithms.flow._DataEssentialsAndFunctions.find_entering_edges(self)
networkx.algorithms.flow._DataEssentialsAndFunctions.find_leaving_edge(self,Wn,We)
networkx.algorithms.flow._DataEssentialsAndFunctions.initialize_spanning_tree(self,n,faux_inf)
networkx.algorithms.flow._DataEssentialsAndFunctions.make_root(self,q)
networkx.algorithms.flow._DataEssentialsAndFunctions.reduced_cost(self,i)
networkx.algorithms.flow._DataEssentialsAndFunctions.remove_edge(self,s,t)
networkx.algorithms.flow._DataEssentialsAndFunctions.residual_capacity(self,i,p)
networkx.algorithms.flow._DataEssentialsAndFunctions.trace_path(self,p,w)
networkx.algorithms.flow._DataEssentialsAndFunctions.trace_subtree(self,p)
networkx.algorithms.flow._DataEssentialsAndFunctions.update_potentials(self,i,p,q)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions(self,G,multigraph,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.__init__(self,G,multigraph,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.add_edge(self,i,p,q)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.augment_flow(self,Wn,We,f)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.find_apex(self,p,q)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.find_cycle(self,i,p,q)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.find_entering_edges(self)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.find_leaving_edge(self,Wn,We)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.initialize_spanning_tree(self,n,faux_inf)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.make_root(self,q)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.reduced_cost(self,i)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.remove_edge(self,s,t)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.residual_capacity(self,i,p)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.trace_path(self,p,w)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.trace_subtree(self,p)
networkx.algorithms.flow.networksimplex._DataEssentialsAndFunctions.update_potentials(self,i,p,q)
networkx.algorithms.flow.networksimplex.network_simplex(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.network_simplex(G,demand='demand',capacity='capacity',weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/boykovkolmogorov.py----------------------------------------
A:networkx.algorithms.flow.boykovkolmogorov.R->build_residual_network(G, capacity)
A:networkx.algorithms.flow.boykovkolmogorov._->deque([s, t]).popleft()
A:networkx.algorithms.flow.boykovkolmogorov.flow->min(flow, attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.boykovkolmogorov.it->iter(path)
A:networkx.algorithms.flow.boykovkolmogorov.u->deque().popleft()
A:networkx.algorithms.flow.boykovkolmogorov.length->len(path)
A:networkx.algorithms.flow.boykovkolmogorov.active->deque([s, t])
A:networkx.algorithms.flow.boykovkolmogorov.orphans->deque()
A:networkx.algorithms.flow.boykovkolmogorov.(u, v)->grow()
networkx.algorithms.flow.boykov_kolmogorov(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.boykov_kolmogorov_impl(G,s,t,capacity,residual,cutoff)
networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.boykovkolmogorov.boykov_kolmogorov_impl(G,s,t,capacity,residual,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/gomory_hu.py----------------------------------------
A:networkx.algorithms.flow.gomory_hu.iter_nodes->iter(G)
A:networkx.algorithms.flow.gomory_hu.root->next(iter_nodes)
A:networkx.algorithms.flow.gomory_hu.R->build_residual_network(G, capacity)
A:networkx.algorithms.flow.gomory_hu.(cut_value, partition)->networkx.minimum_cut(G, source, target, capacity=capacity, flow_func=flow_func, residual=R)
A:networkx.algorithms.flow.gomory_hu.labels[node, source]->labels.get((node, target), cut_value)
A:networkx.algorithms.flow.gomory_hu.T->networkx.Graph()
networkx.algorithms.flow.gomory_hu.gomory_hu_tree(G,capacity='capacity',flow_func=None)
networkx.algorithms.gomory_hu_tree(G,capacity='capacity',flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/edmondskarp.py----------------------------------------
A:networkx.algorithms.flow.edmondskarp.it->iter(path)
A:networkx.algorithms.flow.edmondskarp.u->next(it)
A:networkx.algorithms.flow.edmondskarp.flow->min(flow, attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.edmondskarp.(v, pred, succ)->bidirectional_bfs()
A:networkx.algorithms.flow.edmondskarp.R->edmonds_karp_impl(G, s, t, capacity, residual, cutoff)
A:networkx.algorithms.flow.edmondskarp.cutoff->float('inf')
A:networkx.algorithms.flow.edmondskarp.R.graph['flow_value']->edmonds_karp_core(R, s, t, cutoff)
networkx.algorithms.flow.edmonds_karp(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.edmonds_karp_core(R,s,t,cutoff)
networkx.algorithms.flow.edmonds_karp_impl(G,s,t,capacity,residual,cutoff)
networkx.algorithms.flow.edmondskarp.edmonds_karp(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.edmondskarp.edmonds_karp_core(R,s,t,cutoff)
networkx.algorithms.flow.edmondskarp.edmonds_karp_impl(G,s,t,capacity,residual,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/maxflow.py----------------------------------------
A:networkx.algorithms.flow.maxflow.R->flow_func(flowG, _s, _t, capacity=capacity, value_only=True, **kwargs)
A:networkx.algorithms.flow.maxflow.flow_dict->build_flow_dict(flowG, R)
A:networkx.algorithms.flow.maxflow.non_reachable->set(dict(nx.shortest_path_length(R, target=_t)))
networkx.algorithms.flow.maxflow.maximum_flow(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.maximum_flow_value(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.minimum_cut(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.minimum_cut_value(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.maximum_flow(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.maximum_flow_value(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.minimum_cut(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.minimum_cut_value(flowG,_s,_t,capacity='capacity',flow_func=None,**kwargs)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/dinitz_alg.py----------------------------------------
A:networkx.algorithms.flow.dinitz_alg.R->build_residual_network(G, capacity)
A:networkx.algorithms.flow.dinitz_alg.queue->deque([s])
A:networkx.algorithms.flow.dinitz_alg.u->deque([s]).popleft()
A:networkx.algorithms.flow.dinitz_alg.flow->min(flow, R_pred[u][v]['capacity'] - R_pred[u][v]['flow'])
A:networkx.algorithms.flow.dinitz_alg.parents->breath_first_search()
A:networkx.algorithms.flow.dinitz_alg.this_flow->depth_first_search(parents)
networkx.algorithms.flow.dinitz(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.dinitz_alg.dinitz(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.dinitz_alg.dinitz_impl(G,s,t,capacity,residual,cutoff)
networkx.algorithms.flow.dinitz_impl(G,s,t,capacity,residual,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/test_maxflow.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow.cutset->compute_cutset(G, partition)
A:networkx.algorithms.flow.tests.test_maxflow.H->networkx.DiGraph()
A:networkx.algorithms.flow.tests.test_maxflow.R->boykov_kolmogorov(G, 's', 't', cutoff=k)
A:networkx.algorithms.flow.tests.test_maxflow.flow_dict->build_flow_dict(G, R)
A:networkx.algorithms.flow.tests.test_maxflow.(cut_value, partition)->networkx.minimum_cut(G, s, t, capacity=capacity, flow_func=flow_func)
A:networkx.algorithms.flow.tests.test_maxflow.G->networkx.complete_graph(5)
A:networkx.algorithms.flow.tests.test_maxflow.M->networkx.MultiDiGraph()
A:networkx.algorithms.flow.tests.test_maxflow.result->networkx.maximum_flow_value(G, 0, 4, flow_func=flow_func, cutoff=cutoff)
networkx.algorithms.flow.tests.test_TestCutoff
networkx.algorithms.flow.tests.test_TestCutoff.test_complete_graph_cutoff(self)
networkx.algorithms.flow.tests.test_TestCutoff.test_cutoff(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.setup_method(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_flow_func_not_callable(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_flow_func_parameters(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_kwargs(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_kwargs_default_flow_func(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff(self)
networkx.algorithms.flow.tests.test_TestMaxFlowMinCutInterface.test_reusing_residual(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph1(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph2(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph3(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph4(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph5(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph_infcap_edges(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_digraph_infcap_path(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_disconnected(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_graph1(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_graph2(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_graph_infcap_edges(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_multigraphs_raise(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_optional_capacity(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_source_target_coincide(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_source_target_not_in_graph(self)
networkx.algorithms.flow.tests.test_TestMaxflowMinCutCommon.test_wikipedia_dinitz_example(self)
networkx.algorithms.flow.tests.test_compare_flows_and_cuts(G,s,t,solnFlows,solnValue,capacity='capacity')
networkx.algorithms.flow.tests.test_compute_cutset(G,partition)
networkx.algorithms.flow.tests.test_maxflow.TestCutoff
networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_complete_graph_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.setup_method(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_not_callable(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_parameters(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs_default_flow_func(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_reusing_residual(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph3(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph5(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_path(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_disconnected(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_multigraphs_raise(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_optional_capacity(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_coincide(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_not_in_graph(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_wikipedia_dinitz_example(self)
networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts(G,s,t,solnFlows,solnValue,capacity='capacity')
networkx.algorithms.flow.tests.test_maxflow.compute_cutset(G,partition)
networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_global_relabel_freq()
networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_makes_enough_space()
networkx.algorithms.flow.tests.test_maxflow.test_shortest_augmenting_path_two_phase()
networkx.algorithms.flow.tests.test_maxflow.validate_cuts(G,s,t,solnValue,partition,capacity,flow_func)
networkx.algorithms.flow.tests.test_maxflow.validate_flows(G,s,t,flowDict,solnValue,capacity,flow_func)
networkx.algorithms.flow.tests.test_test_preflow_push_global_relabel_freq()
networkx.algorithms.flow.tests.test_test_preflow_push_makes_enough_space()
networkx.algorithms.flow.tests.test_test_shortest_augmenting_path_two_phase()
networkx.algorithms.flow.tests.test_validate_cuts(G,s,t,solnValue,partition,capacity,flow_func)
networkx.algorithms.flow.tests.test_validate_flows(G,s,t,flowDict,solnValue,capacity,flow_func)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/test_networksimplex.py----------------------------------------
A:networkx.algorithms.flow.tests.test_networksimplex.G->networkx.DiGraph()
A:networkx.algorithms.flow.tests.test_networksimplex.inf->float('inf')
A:networkx.algorithms.flow.tests.test_networksimplex.(flowCost, flowDict)->networkx.network_simplex(G)
A:networkx.algorithms.flow.tests.test_networksimplex.fname->os.path.join(os.path.dirname(__file__), 'netgen-2.gpickle.bz2')
A:networkx.algorithms.flow.tests.test_networksimplex.(flowCost, H)->networkx.network_simplex(G)
networkx.algorithms.flow.tests.test_get_flowcost_from_flowdict(G,flowDict)
networkx.algorithms.flow.tests.test_networksimplex.get_flowcost_from_flowdict(G,flowDict)
networkx.algorithms.flow.tests.test_networksimplex.simple_flow_graph()
networkx.algorithms.flow.tests.test_networksimplex.simple_no_flow_graph()
networkx.algorithms.flow.tests.test_networksimplex.test_bone_shaped()
networkx.algorithms.flow.tests.test_networksimplex.test_deadend()
networkx.algorithms.flow.tests.test_networksimplex.test_digon()
networkx.algorithms.flow.tests.test_networksimplex.test_digraph1()
networkx.algorithms.flow.tests.test_networksimplex.test_google_or_tools_example()
networkx.algorithms.flow.tests.test_networksimplex.test_google_or_tools_example2()
networkx.algorithms.flow.tests.test_networksimplex.test_graphs_type_exceptions()
networkx.algorithms.flow.tests.test_networksimplex.test_infinite_capacity_neg_digon()
networkx.algorithms.flow.tests.test_networksimplex.test_infinite_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_infinite_weight_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_large()
networkx.algorithms.flow.tests.test_networksimplex.test_multidigraph()
networkx.algorithms.flow.tests.test_networksimplex.test_neg_infinite_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_negative_capacity_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_negative_selfloops()
networkx.algorithms.flow.tests.test_networksimplex.test_negcycle_infcap()
networkx.algorithms.flow.tests.test_networksimplex.test_no_flow_satisfying_demands(simple_no_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_nonzero_net_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_simple_digraph()
networkx.algorithms.flow.tests.test_networksimplex.test_sum_demands_not_zero(simple_no_flow_graph)
networkx.algorithms.flow.tests.test_networksimplex.test_transshipment()
networkx.algorithms.flow.tests.test_networksimplex.test_zero_capacity_edges()
networkx.algorithms.flow.tests.test_simple_flow_graph()
networkx.algorithms.flow.tests.test_simple_no_flow_graph()
networkx.algorithms.flow.tests.test_test_bone_shaped()
networkx.algorithms.flow.tests.test_test_deadend()
networkx.algorithms.flow.tests.test_test_digon()
networkx.algorithms.flow.tests.test_test_digraph1()
networkx.algorithms.flow.tests.test_test_google_or_tools_example()
networkx.algorithms.flow.tests.test_test_google_or_tools_example2()
networkx.algorithms.flow.tests.test_test_graphs_type_exceptions()
networkx.algorithms.flow.tests.test_test_infinite_capacity_neg_digon()
networkx.algorithms.flow.tests.test_test_infinite_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_test_infinite_weight_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_test_large()
networkx.algorithms.flow.tests.test_test_multidigraph()
networkx.algorithms.flow.tests.test_test_neg_infinite_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_test_negative_capacity_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_test_negative_selfloops()
networkx.algorithms.flow.tests.test_test_negcycle_infcap()
networkx.algorithms.flow.tests.test_test_no_flow_satisfying_demands(simple_no_flow_graph)
networkx.algorithms.flow.tests.test_test_nonzero_net_demand_raise(simple_flow_graph)
networkx.algorithms.flow.tests.test_test_simple_digraph()
networkx.algorithms.flow.tests.test_test_sum_demands_not_zero(simple_no_flow_graph)
networkx.algorithms.flow.tests.test_test_transshipment()
networkx.algorithms.flow.tests.test_test_zero_capacity_edges()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/test_mincost.py----------------------------------------
A:networkx.algorithms.flow.tests.test_mincost.G->pickle.load(f)
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, H)->networkx.capacity_scaling(G)
A:networkx.algorithms.flow.tests.test_mincost.flow->sum((v for v in sol['s'].values()))
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, flow)->networkx.capacity_scaling(G)
A:networkx.algorithms.flow.tests.test_mincost.sol->networkx.max_flow_min_cost(G, 's', 't', capacity=0, weight=1)
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, sol)->networkx.capacity_scaling(G, capacity=0, weight=1)
A:networkx.algorithms.flow.tests.test_mincost.fname->os.path.join(os.path.dirname(__file__), 'netgen-2.gpickle.bz2')
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, flowDict)->networkx.capacity_scaling(G)
networkx.algorithms.flow.tests.test_TestMinCostFlow
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_bone_shaped(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_deadend(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_digon(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_digraph1(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_digraph2(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_digraph3(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_exceptions(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_finite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_infinite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_large(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_max_flow_min_cost(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_multidigraph(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_negative_selfloops(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_negcycle_infcap(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_no_flow_satisfying_demands(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_simple_digraph(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_sum_demands_not_zero(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_transshipment(self)
networkx.algorithms.flow.tests.test_TestMinCostFlow.test_zero_capacity_edges(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_bone_shaped(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_deadend(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph1(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph2(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph3(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_exceptions(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_finite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_infinite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_large(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_max_flow_min_cost(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_multidigraph(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negative_selfloops(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negcycle_infcap(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_no_flow_satisfying_demands(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_simple_digraph(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_sum_demands_not_zero(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_transshipment(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_zero_capacity_edges(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/test_gomory_hu.py----------------------------------------
A:networkx.algorithms.flow.tests.test_gomory_hu.path->networkx.shortest_path(T, u, v, weight='weight')
A:networkx.algorithms.flow.tests.test_gomory_hu.T->networkx.gomory_hu_tree(G)
A:networkx.algorithms.flow.tests.test_gomory_hu.(U, V)->list(nx.connected_components(T))
A:networkx.algorithms.flow.tests.test_gomory_hu.cutset->self.compute_cutset(G, T, edge)
A:networkx.algorithms.flow.tests.test_gomory_hu.G->networkx.empty_graph()
A:networkx.algorithms.flow.tests.test_gomory_hu.(cut_value, edge)->self.minimum_edge_weight(T, u, v)
networkx.algorithms.flow.tests.test_TestGomoryHuTree
networkx.algorithms.flow.tests.test_TestGomoryHuTree.compute_cutset(self,G,T_orig,edge)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.minimum_edge_weight(self,T,u,v)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_davis_southern_women_graph(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_default_flow_function_karate_club_graph(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_directed_raises(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_empty_raises(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_florentine_families_graph(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_karate_club_graph(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_karate_club_graph_cutset(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_les_miserables_graph_cutset(self)
networkx.algorithms.flow.tests.test_TestGomoryHuTree.test_wikipedia_example(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.compute_cutset(self,G,T_orig,edge)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.minimum_edge_weight(self,T,u,v)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_davis_southern_women_graph(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_default_flow_function_karate_club_graph(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_directed_raises(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_empty_raises(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_florentine_families_graph(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_karate_club_graph_cutset(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_les_miserables_graph_cutset(self)
networkx.algorithms.flow.tests.test_gomory_hu.TestGomoryHuTree.test_wikipedia_example(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/flow/tests/test_maxflow_large_graph.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.G->read_graph('gw1')
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.dirname->os.path.dirname(__file__)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.fname->os.path.join(dirname, name + '.gpickle.bz2')
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_dict->build_flow_dict(G, R)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.R->preflow_push(G, 1, len(G), global_relabel_freq=50)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.kwargs->dict(residual=R)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_value->networkx.maximum_flow_value(G, (0, 0), 't', **kwargs)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.t->len(G)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid(N)
networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph(name)
networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows(G,s,t,soln_value,R,flow_func)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/load.py----------------------------------------
A:networkx.algorithms.centrality.load.ubetween->_edge_betweenness(G, source, cutoff=cutoff)
A:networkx.algorithms.centrality.load.order->G.order()
A:networkx.algorithms.centrality.load.betweenness->{}.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.load.(pred, length)->networkx.predecessor(G, source, cutoff=cutoff, return_seen=True)
A:networkx.algorithms.centrality.load.between->{}.fromkeys(length, 1.0)
A:networkx.algorithms.centrality.load.v->onodes.pop()
A:networkx.algorithms.centrality.load.num_paths->len(pred[w])
A:networkx.algorithms.centrality.load.l->len(between)
networkx.algorithms.centrality._edge_betweenness(G,source,nodes=None,cutoff=False)
networkx.algorithms.centrality._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.edge_load_centrality(G,cutoff=False)
networkx.algorithms.centrality.load._edge_betweenness(G,source,nodes=None,cutoff=False)
networkx.algorithms.centrality.load._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.load.edge_load_centrality(G,cutoff=False)
networkx.algorithms.centrality.load.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)
networkx.algorithms.centrality.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.betweenness_subset.b->_add_edge_keys(G, b, weight=weight)
A:networkx.algorithms.centrality.betweenness_subset.(S, P, sigma, _)->dijkstra(G, s, weight)
A:networkx.algorithms.centrality.betweenness_subset.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness_subset.w->S.pop()
A:networkx.algorithms.centrality.betweenness_subset.target_set->set(targets)
networkx.algorithms.centrality._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality._rescale(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._rescale(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.algorithms.centrality.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/voterank_alg.py----------------------------------------
A:networkx.algorithms.centrality.voterank_alg.number_of_nodes->len(G)
A:networkx.algorithms.centrality.voterank_alg.n->max(G.nodes, key=lambda x: vote_rank[x][0])
A:networkx.algorithms.centrality.voterank_alg.vote_rank[nbr][1]->max(vote_rank[nbr][1], 0)
networkx.algorithms.centrality.voterank(G,number_of_nodes=None)
networkx.algorithms.centrality.voterank_alg.voterank(G,number_of_nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/harmonic.py----------------------------------------
A:networkx.algorithms.centrality.harmonic.spl->partial(nx.shortest_path_length, G, weight=distance)
A:networkx.algorithms.centrality.harmonic.dist->spl(v)
networkx.algorithms.centrality.harmonic.harmonic_centrality(G,nbunch=None,distance=None,sources=None)
networkx.algorithms.centrality.harmonic_centrality(G,nbunch=None,distance=None,sources=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/second_order.py----------------------------------------
A:networkx.algorithms.centrality.second_order.n->len(G)
A:networkx.algorithms.centrality.second_order.G->networkx.DiGraph(G)
A:networkx.algorithms.centrality.second_order.in_deg->dict(G.in_degree(weight='weight'))
A:networkx.algorithms.centrality.second_order.d_max->max(in_deg.values())
A:networkx.algorithms.centrality.second_order.P->P.copy().copy()
A:networkx.algorithms.centrality.second_order.M->numpy.empty([n, n])
A:networkx.algorithms.centrality.second_order.M[:, i]->numpy.linalg.solve(np.identity(n) - _Qj(P, i), np.ones([n, 1])[:, 0])
networkx.algorithms.centrality.second_order.second_order_centrality(G)
networkx.algorithms.centrality.second_order_centrality(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_closeness.n->networkx.relabel_nodes(G, dict(zip(ordering, range(n)))).number_of_nodes()
A:networkx.algorithms.centrality.current_flow_closeness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_closeness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_closeness.betweenness->dict.fromkeys(H, 0.0)
A:networkx.algorithms.centrality.current_flow_closeness.L->L.astype(dtype).astype(dtype)
A:networkx.algorithms.centrality.current_flow_closeness.C2->solvername[solver](L, width=1, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_closeness.col->solvername[solver](L, width=1, dtype=dtype).get_row(v)
networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality(G,weight=None,dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_closeness_centrality(G,weight=None,dtype=float,solver='lu')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/reaching.py----------------------------------------
A:networkx.algorithms.centrality.reaching.total_weight->G.size(weight=weight)
A:networkx.algorithms.centrality.reaching.shortest_paths->networkx.shortest_path(G)
A:networkx.algorithms.centrality.reaching.max_lrc->max(lrc)
A:networkx.algorithms.centrality.reaching.paths->networkx.shortest_path(G, source=v)
networkx.algorithms.centrality._average_weight(G,path,weight=None)
networkx.algorithms.centrality.global_reaching_centrality(G,weight=None,normalized=True)
networkx.algorithms.centrality.local_reaching_centrality(G,v,paths=None,weight=None,normalized=True)
networkx.algorithms.centrality.reaching._average_weight(G,path,weight=None)
networkx.algorithms.centrality.reaching.global_reaching_centrality(G,weight=None,normalized=True)
networkx.algorithms.centrality.reaching.local_reaching_centrality(G,v,paths=None,weight=None,normalized=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/percolation.py----------------------------------------
A:networkx.algorithms.centrality.percolation.percolation->_accumulate_percolation(percolation, S, P, sigma, s, states, p_sigma_x_t)
A:networkx.algorithms.centrality.percolation.states->networkx.get_node_attributes(nodes, attribute)
A:networkx.algorithms.centrality.percolation.(S, P, sigma, _)->dijkstra(G, s, weight)
A:networkx.algorithms.centrality.percolation.n->len(G)
A:networkx.algorithms.centrality.percolation.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.percolation.w->S.pop()
networkx.algorithms.centrality._accumulate_percolation(percolation,S,P,sigma,s,states,p_sigma_x_t)
networkx.algorithms.centrality.percolation._accumulate_percolation(percolation,S,P,sigma,s,states,p_sigma_x_t)
networkx.algorithms.centrality.percolation.percolation_centrality(G,attribute='percolation',states=None,weight=None)
networkx.algorithms.centrality.percolation_centrality(G,attribute='percolation',states=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/betweenness.py----------------------------------------
A:networkx.algorithms.centrality.betweenness.betweenness->_add_edge_keys(G, betweenness, weight=weight)
A:networkx.algorithms.centrality.betweenness.nodes->seed.sample(G.nodes(), k)
A:networkx.algorithms.centrality.betweenness.(S, P, sigma, _)->_single_source_dijkstra_path_basic(G, s, weight)
A:networkx.algorithms.centrality.betweenness.(betweenness, _)->_accumulate_basic(betweenness, S, P, sigma, s)
A:networkx.algorithms.centrality.betweenness.sigma->dict.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.betweenness.Q->deque([s])
A:networkx.algorithms.centrality.betweenness.v->deque([s]).popleft()
A:networkx.algorithms.centrality.betweenness.weight->_weight_function(G, weight)
A:networkx.algorithms.centrality.betweenness.c->count()
A:networkx.algorithms.centrality.betweenness.(dist, _, pred, v)->pop(Q)
A:networkx.algorithms.centrality.betweenness.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness.w->S.pop()
A:networkx.algorithms.centrality.betweenness._weight->_weight_function(G, weight)
A:networkx.algorithms.centrality.betweenness.edge_bc->dict.fromkeys(G.edges, 0.0)
A:networkx.algorithms.centrality.betweenness.wt->_weight(u, v, d)
networkx.algorithms.centrality._accumulate_basic(betweenness,S,P,sigma,s)
networkx.algorithms.centrality._accumulate_edges(betweenness,S,P,sigma,s)
networkx.algorithms.centrality._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx.algorithms.centrality._add_edge_keys(G,betweenness,weight=None)
networkx.algorithms.centrality._rescale(betweenness,n,normalized,directed=False,k=None,endpoints=False)
networkx.algorithms.centrality._rescale_e(betweenness,n,normalized,directed=False,k=None)
networkx.algorithms.centrality._single_source_dijkstra_path_basic(G,s,weight)
networkx.algorithms.centrality._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness._accumulate_basic(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_edges(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._add_edge_keys(G,betweenness,weight=None)
networkx.algorithms.centrality.betweenness._rescale(betweenness,n,normalized,directed=False,k=None,endpoints=False)
networkx.algorithms.centrality.betweenness._rescale_e(betweenness,n,normalized,directed=False,k=None)
networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic(G,s,weight)
networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.algorithms.centrality.betweenness.edge_betweenness_centrality(G,k=None,normalized=True,weight=None,seed=None)
networkx.algorithms.centrality.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.algorithms.centrality.edge_betweenness_centrality(G,k=None,normalized=True,weight=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/dispersion.py----------------------------------------
A:networkx.algorithms.centrality.dispersion.u_nbrs->set(G_u[u])
A:networkx.algorithms.centrality.dispersion.possib->combinations(ST, 2)
A:networkx.algorithms.centrality.dispersion.embededness->len(ST)
A:networkx.algorithms.centrality.dispersion.results[u][v]->_dispersion(G, u, v)
A:networkx.algorithms.centrality.dispersion.results->_dispersion(G, u, v)
A:networkx.algorithms.centrality.dispersion.results[u]->_dispersion(G, v, u)
A:networkx.algorithms.centrality.dispersion.results[v]->_dispersion(G, u, v)
networkx.algorithms.centrality.dispersion(G,u=None,v=None,normalized=True,alpha=1.0,b=0.0,c=0.0)
networkx.algorithms.centrality.dispersion.dispersion(G,u=None,v=None,normalized=True,alpha=1.0,b=0.0,c=0.0)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/flow_matrix.py----------------------------------------
A:networkx.algorithms.centrality.flow_matrix.n->G.number_of_nodes()
A:networkx.algorithms.centrality.flow_matrix.L->L.astype(dtype).astype(dtype)
A:networkx.algorithms.centrality.flow_matrix.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.B->numpy.zeros(w, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.c->G[u][v].get(weight, 1.0)
A:networkx.algorithms.centrality.flow_matrix.self.w->self.width(L)
A:networkx.algorithms.centrality.flow_matrix.self.C->numpy.zeros((self.w, n), dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.self.C[r % self.w, 1:]->self.solve_inverse(r)
A:networkx.algorithms.centrality.flow_matrix.(x, y)->numpy.nonzero(row)
A:networkx.algorithms.centrality.flow_matrix.m->max(w, m)
A:networkx.algorithms.centrality.flow_matrix.self.IL->numpy.zeros(L.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.IL[1:, 1:]->numpy.linalg.inv(self.L1.todense())
A:networkx.algorithms.centrality.flow_matrix.s->numpy.zeros(rhs.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.lusolve->scipy.sparse.linalg.factorized(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.rhs->numpy.zeros(self.n, self.dtype)
A:networkx.algorithms.centrality.flow_matrix.s[1:]->self.lusolve(rhs[1:])
A:networkx.algorithms.centrality.flow_matrix.ilu->scipy.sparse.linalg.spilu(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.self.M->scipy.sparse.linalg.LinearOperator(shape=(n, n), matvec=ilu.solve)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows(self,r1,r2)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.flow_matrix_row(G,weight=None,dtype=float,solver='lu')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/trophic.py----------------------------------------
A:networkx.algorithms.centrality.trophic.a->networkx.adjacency_matrix(G, weight=weight).T.toarray()
A:networkx.algorithms.centrality.trophic.rowsum->numpy.sum(a, axis=1)
A:networkx.algorithms.centrality.trophic.i->numpy.eye(nn)
A:networkx.algorithms.centrality.trophic.n->numpy.linalg.inv(i - p)
A:networkx.algorithms.centrality.trophic.levels->trophic_levels(G, weight=weight)
A:networkx.algorithms.centrality.trophic.diffs->trophic_differences(G_2, weight=weight)
A:networkx.algorithms.centrality.trophic.self_loops->list(nx.selfloop_edges(G))
A:networkx.algorithms.centrality.trophic.G_2->G.copy()
networkx.algorithms.centrality.trophic.trophic_differences(G,weight='weight')
networkx.algorithms.centrality.trophic.trophic_incoherence_parameter(G,weight='weight',cannibalism=False)
networkx.algorithms.centrality.trophic.trophic_levels(G,weight='weight')
networkx.algorithms.centrality.trophic_differences(G,weight='weight')
networkx.algorithms.centrality.trophic_incoherence_parameter(G,weight='weight',cannibalism=False)
networkx.algorithms.centrality.trophic_levels(G,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/current_flow_betweenness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_betweenness.L->L.astype(dtype).astype(dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.betweenness->dict.fromkeys(edges, 0.0)
A:networkx.algorithms.centrality.current_flow_betweenness.(s, t)pair->seed.sample(range(n), 2)
A:networkx.algorithms.centrality.current_flow_betweenness.b->numpy.zeros(n, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.p->solvername[solver](L, dtype=dtype).solve(b)
A:networkx.algorithms.centrality.current_flow_betweenness.w->H[v][nbr].get(weight, 1.0)
A:networkx.algorithms.centrality.current_flow_betweenness.pos->dict(zip(row.argsort()[::-1], range(1, n + 1)))
A:networkx.algorithms.centrality.current_flow_betweenness.betweenness[v]->float((betweenness[v] - v) * 2.0 / nb)
networkx.algorithms.centrality.approximate_current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full',epsilon=0.5,kmax=10000,seed=None)
networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full',epsilon=0.5,kmax=10000,seed=None)
networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full')
networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full')
networkx.algorithms.centrality.current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full')
networkx.algorithms.centrality.edge_current_flow_betweenness_centrality(G,normalized=True,weight=None,dtype=float,solver='full')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/eigenvector.py----------------------------------------
A:networkx.algorithms.centrality.eigenvector.nstart_sum->sum(nstart.values())
A:networkx.algorithms.centrality.eigenvector.nnodes->G.number_of_nodes()
A:networkx.algorithms.centrality.eigenvector.x->xlast.copy()
A:networkx.algorithms.centrality.eigenvector.M->networkx.to_scipy_sparse_array(G, nodelist=list(G), weight=weight, dtype=float)
A:networkx.algorithms.centrality.eigenvector.(_, eigenvector)->scipy.sparse.linalg.eigs(M.T, k=1, which='LR', maxiter=max_iter, tol=tol)
networkx.algorithms.centrality.eigenvector.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None,weight=None)
networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy(G,weight=None,max_iter=50,tol=0)
networkx.algorithms.centrality.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None,weight=None)
networkx.algorithms.centrality.eigenvector_centrality_numpy(G,weight=None,max_iter=50,tol=0)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/group.py----------------------------------------
A:networkx.algorithms.centrality.group.(PB, sigma, D)->_group_preprocessing(G, nodes, weight)
A:networkx.algorithms.centrality.group.group->set(group)
A:networkx.algorithms.centrality.group.sigma_m->deepcopy(sigma)
A:networkx.algorithms.centrality.group.PB_m->deepcopy(PB)
A:networkx.algorithms.centrality.group.sigma_m_v->deepcopy(sigma_m)
A:networkx.algorithms.centrality.group.PB_m_v->deepcopy(PB_m)
A:networkx.algorithms.centrality.group.betweenness->pandas.DataFrame.from_dict(PB)
A:networkx.algorithms.centrality.group.(S, P, sigma[s], D[s])->_single_source_dijkstra_path_basic(G, s, weight)
A:networkx.algorithms.centrality.group.(betweenness, delta[s])->_accumulate_endpoints(betweenness, S, P, sigma[s], s)
A:networkx.algorithms.centrality.group.PB->dict.fromkeys(G)
A:networkx.algorithms.centrality.group.PB[group_node1]->dict.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.group.C->set(C)
A:networkx.algorithms.centrality.group.nodes->list(G.nodes)
A:networkx.algorithms.centrality.group.DF_tree->networkx.Graph()
A:networkx.algorithms.centrality.group.(max_GBC, DF_tree, max_group)->_dfbnb(G, k, DF_tree, max_GBC, node_p, D, max_group, nodes, greedy)
A:networkx.algorithms.centrality.group.v->len(G)
A:networkx.algorithms.centrality.group.max_GBC->float('%.2f' % max_GBC)
A:networkx.algorithms.centrality.group.(node_p, node_m, DF_tree)->_heuristic(k, root, DF_tree, D, nodes, greedy)
A:networkx.algorithms.centrality.group.DF_tree.nodes[node_p]['cont']->dict(zip(nodes, np.diag(DF_tree.nodes[node_p]['betweenness'])))
A:networkx.algorithms.centrality.group.G->G.reverse().reverse()
A:networkx.algorithms.centrality.group.V->set(G)
A:networkx.algorithms.centrality.group.S->set(S)
A:networkx.algorithms.centrality.group.shortest_path_lengths->networkx.multi_source_dijkstra_path_length(G, S, weight=weight)
A:networkx.algorithms.centrality.group.centrality->len(set().union(*list((set(G.neighbors(i)) for i in S))) - set(S))
networkx.algorithms.centrality._dfbnb(G,k,DF_tree,max_GBC,root,D,max_group,nodes,greedy)
networkx.algorithms.centrality._group_preprocessing(G,set_v,weight)
networkx.algorithms.centrality._heuristic(k,root,DF_tree,D,nodes,greedy)
networkx.algorithms.centrality.group._dfbnb(G,k,DF_tree,max_GBC,root,D,max_group,nodes,greedy)
networkx.algorithms.centrality.group._group_preprocessing(G,set_v,weight)
networkx.algorithms.centrality.group._heuristic(k,root,DF_tree,D,nodes,greedy)
networkx.algorithms.centrality.group.group_betweenness_centrality(G,C,normalized=True,weight=None,endpoints=False)
networkx.algorithms.centrality.group.group_closeness_centrality(G,S,weight=None)
networkx.algorithms.centrality.group.group_degree_centrality(G,S)
networkx.algorithms.centrality.group.group_in_degree_centrality(G,S)
networkx.algorithms.centrality.group.group_out_degree_centrality(G,S)
networkx.algorithms.centrality.group.prominent_group(G,k,weight=None,C=None,endpoints=False,normalized=True,greedy=False)
networkx.algorithms.centrality.group_betweenness_centrality(G,C,normalized=True,weight=None,endpoints=False)
networkx.algorithms.centrality.group_closeness_centrality(G,S,weight=None)
networkx.algorithms.centrality.group_degree_centrality(G,S)
networkx.algorithms.centrality.group_in_degree_centrality(G,S)
networkx.algorithms.centrality.group_out_degree_centrality(G,S)
networkx.algorithms.centrality.prominent_group(G,k,weight=None,C=None,endpoints=False,normalized=True,greedy=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/katz.py----------------------------------------
A:networkx.algorithms.centrality.katz.nnodes->G.number_of_nodes()
A:networkx.algorithms.centrality.katz.b->numpy.array(list(beta.values()), dtype=float)
A:networkx.algorithms.centrality.katz.x->dict.fromkeys(xlast, 0)
A:networkx.algorithms.centrality.katz.error->sum((abs(x[n] - xlast[n]) for n in x))
A:networkx.algorithms.centrality.katz.nodelist->list(G)
A:networkx.algorithms.centrality.katz.centrality->dict(zip(nodelist, map(float, centrality / norm)))
networkx.algorithms.centrality.katz.katz_centrality(G,alpha=0.1,beta=1.0,max_iter=1000,tol=1e-06,nstart=None,normalized=True,weight=None)
networkx.algorithms.centrality.katz.katz_centrality_numpy(G,alpha=0.1,beta=1.0,normalized=True,weight=None)
networkx.algorithms.centrality.katz_centrality(G,alpha=0.1,beta=1.0,max_iter=1000,tol=1e-06,nstart=None,normalized=True,weight=None)
networkx.algorithms.centrality.katz_centrality_numpy(G,alpha=0.1,beta=1.0,normalized=True,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/current_flow_betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness_subset.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness_subset.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.mapping->dict(zip(ordering, range(n)))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.H->networkx.relabel_nodes(G, mapping)
A:networkx.algorithms.centrality.current_flow_betweenness_subset.betweenness->dict.fromkeys(edges, 0.0)
networkx.algorithms.centrality.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight=None,dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight=None,dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight=None,dtype=float,solver='lu')
networkx.algorithms.centrality.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight=None,dtype=float,solver='lu')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/degree_alg.py----------------------------------------
networkx.algorithms.centrality.degree_alg.degree_centrality(G)
networkx.algorithms.centrality.degree_alg.in_degree_centrality(G)
networkx.algorithms.centrality.degree_alg.out_degree_centrality(G)
networkx.algorithms.centrality.degree_centrality(G)
networkx.algorithms.centrality.in_degree_centrality(G)
networkx.algorithms.centrality.out_degree_centrality(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/closeness.py----------------------------------------
A:networkx.algorithms.centrality.closeness.G->G.reverse().reverse()
A:networkx.algorithms.centrality.closeness.path_length->functools.partial(nx.single_source_dijkstra_path_length, weight=distance)
A:networkx.algorithms.centrality.closeness.sp->path_length(G, n)
A:networkx.algorithms.centrality.closeness.totsp->sum(sp.values())
A:networkx.algorithms.centrality.closeness.len_G->len(G)
A:networkx.algorithms.centrality.closeness.du->path_length(G, u)
A:networkx.algorithms.centrality.closeness.dv->path_length(G, v)
A:networkx.algorithms.centrality.closeness.nodes->G.reverse().reverse().nodes()
networkx.algorithms.centrality.closeness.closeness_centrality(G,u=None,distance=None,wf_improved=True)
networkx.algorithms.centrality.closeness.incremental_closeness_centrality(G,edge,prev_cc=None,insertion=True,wf_improved=True)
networkx.algorithms.centrality.closeness_centrality(G,u=None,distance=None,wf_improved=True)
networkx.algorithms.centrality.incremental_closeness_centrality(G,edge,prev_cc=None,insertion=True,wf_improved=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/subgraph_alg.py----------------------------------------
A:networkx.algorithms.centrality.subgraph_alg.nodelist->list(G)
A:networkx.algorithms.centrality.subgraph_alg.A->networkx.to_numpy_array(G, nodelist)
A:networkx.algorithms.centrality.subgraph_alg.expA->scipy.linalg.expm(A)
A:networkx.algorithms.centrality.subgraph_alg.sc->dict(zip(nodelist, map(float, xg)))
A:networkx.algorithms.centrality.subgraph_alg.(w, v)->numpy.linalg.eigh(A)
A:networkx.algorithms.centrality.subgraph_alg.expw->numpy.exp(w)
A:networkx.algorithms.centrality.subgraph_alg.n->len(nodelist)
A:networkx.algorithms.centrality.subgraph_alg.mapping->dict(zip(nodelist, range(n)))
A:networkx.algorithms.centrality.subgraph_alg.row->A[i, :].copy()
A:networkx.algorithms.centrality.subgraph_alg.col->A[:, i].copy()
A:networkx.algorithms.centrality.subgraph_alg.cbc[v]->B.sum()
A:networkx.algorithms.centrality.subgraph_alg.order->len(cbc)
networkx.algorithms.centrality.communicability_betweenness_centrality(G)
networkx.algorithms.centrality.estrada_index(G)
networkx.algorithms.centrality.subgraph_alg.communicability_betweenness_centrality(G)
networkx.algorithms.centrality.subgraph_alg.estrada_index(G)
networkx.algorithms.centrality.subgraph_alg.subgraph_centrality(G)
networkx.algorithms.centrality.subgraph_alg.subgraph_centrality_exp(G)
networkx.algorithms.centrality.subgraph_centrality(G)
networkx.algorithms.centrality.subgraph_centrality_exp(G)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.G->networkx.MultiGraph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b->networkx.edge_betweenness_centrality(G, weight='weight', normalized=True)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 1)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_les_miserables_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_sample_from_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_les_miserables_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_multigraph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_multigraph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_load_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_load_centrality.G->networkx.path_graph(2)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.P2->networkx.path_graph(2)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.LM->networkx.les_miserables_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.cls.D->networkx.cycle_graph(3, create_using=nx.DiGraph())
A:networkx.algorithms.centrality.tests.test_load_centrality.b->networkx.load_centrality(self.G, weight='weight', normalized=False)
A:networkx.algorithms.centrality.tests.test_load_centrality.c->networkx.edge_load_centrality(G)
A:networkx.algorithms.centrality.tests.test_load_centrality.B->networkx.Graph()
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setup_class(cls)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_P2_normalized_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_les_miserables_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_not_strongly_connected(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p2_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_percolation_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_percolation_centrality.G->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_percolation_centrality.p->networkx.percolation_centrality(G)
A:networkx.algorithms.centrality.tests.test_percolation_centrality.p_answer->networkx.percolation_centrality(G, states=p_states)
networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality
networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_converge_to_betweenness(self)
networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1a(self)
networkx.algorithms.centrality.tests.test_percolation_centrality.TestPercolationCentrality.test_percolation_example1b(self)
networkx.algorithms.centrality.tests.test_percolation_centrality.example1a_G()
networkx.algorithms.centrality.tests.test_percolation_centrality.example1b_G()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b->networkx.edge_betweenness_centrality_subset(G, sources=[0], targets=[3, 4], weight=None)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b_answer->dict.fromkeys(G.edges(), 0)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_diamond_multi_path(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_subgraph.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_subgraph.result->estrada_index(nx.karate_club_graph())
A:networkx.algorithms.centrality.tests.test_subgraph.G1->networkx.Graph([('Franck', 'Aric'), ('Aric', 'Dan'), ('Dan', 'Albert'), ('Albert', 'Franck'), ('Dan', '1'), ('Franck', 'Albert')])
A:networkx.algorithms.centrality.tests.test_subgraph.result1->communicability_betweenness_centrality(G1)
A:networkx.algorithms.centrality.tests.test_subgraph.g199->networkx.complete_graph(199)
A:networkx.algorithms.centrality.tests.test_subgraph.g200->networkx.complete_graph(200)
A:networkx.algorithms.centrality.tests.test_subgraph.comm199->networkx.subgraph_centrality(g199)
A:networkx.algorithms.centrality.tests.test_subgraph.comm199_exp->networkx.subgraph_centrality_exp(g199)
A:networkx.algorithms.centrality.tests.test_subgraph.comm200->networkx.subgraph_centrality(g200)
A:networkx.algorithms.centrality.tests.test_subgraph.comm200_exp->networkx.subgraph_centrality_exp(g200)
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_communicability_betweenness_centrality(self)
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_communicability_betweenness_centrality_small(self)
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_estrada_index(self)
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality(self)
networkx.algorithms.centrality.tests.test_subgraph.TestSubgraph.test_subgraph_centrality_big_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.b->networkx.current_flow_closeness_centrality(G)
networkx.algorithms.centrality.tests.test_TestFlowClosenessCentrality
networkx.algorithms.centrality.tests.test_TestFlowClosenessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_TestFlowClosenessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_TestFlowClosenessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_TestWeightedFlowClosenessCentrality
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_current_flow_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.G->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b->edge_current_flow_subset(G, list(G), list(G), normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b_answer->edge_current_flow(G, normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.v2->edge_current_flow_subset(G, list(G), list(G), normalized=True).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_closeness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.LM->networkx.les_miserables_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.undirected_G->networkx.fast_gnp_random_graph(n=100, p=0.6, seed=123)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cls.undirected_G_cc->networkx.closeness_centrality(cls.undirected_G)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.G->self.undirected_G.copy()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.c->networkx.closeness_centrality(XG, distance='weight')
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cwf->networkx.closeness_centrality(G, wf_improved=False)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.cr->networkx.closeness_centrality(G.reverse())
A:networkx.algorithms.centrality.tests.test_closeness_centrality.XG->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.u->networkx.utils.arbitrary_element(g)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.possible_nodes->list(g.neighbors(u))
A:networkx.algorithms.centrality.tests.test_closeness_centrality.v->networkx.utils.arbitrary_element(possible_nodes)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.dir_G->networkx.gn_graph(n=5)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.edge->self.pick_add_edge(G)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.prev_cc->networkx.closeness_centrality(G)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.num_nodes->len(prev_cc)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.test_cc->networkx.incremental_closeness_centrality(G, edge, prev_cc, insert)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.real_cc->networkx.closeness_centrality(G)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_add_edge(g)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.pick_remove_edge(g)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setup_class(cls)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_digraph(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_directed_raises(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_incremental(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_les_miserables_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wf_improved(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_nodes_prev_cc_raises(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_wrong_size_prev_cc_raises(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_zero_centrality(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_trophic.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_trophic.np->pytest.importorskip('numpy')
A:networkx.algorithms.centrality.tests.test_trophic.G->networkx.from_numpy_array(matrix_c, create_using=nx.DiGraph)
A:networkx.algorithms.centrality.tests.test_trophic.d->networkx.trophic_levels(G)
A:networkx.algorithms.centrality.tests.test_trophic.S->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_trophic.S2->networkx.DiGraph().copy()
A:networkx.algorithms.centrality.tests.test_trophic.expected_q->pytest.importorskip('numpy').array([[0, 0, 0.0, 0], [0.2, 0, 0.6, 0], [0, 0, 0, 0.2], [0.3, 0, 0.7, 0]])
A:networkx.algorithms.centrality.tests.test_trophic.i->pytest.importorskip('numpy').eye(nn)
A:networkx.algorithms.centrality.tests.test_trophic.n->pytest.importorskip('numpy').linalg.inv(i - q)
A:networkx.algorithms.centrality.tests.test_trophic.expected_y->pytest.importorskip('numpy').array([1, 2.07906977, 1.46511628, 2.3255814])
A:networkx.algorithms.centrality.tests.test_trophic.matrix_a->pytest.importorskip('numpy').array([[0, 1], [0, 0]])
A:networkx.algorithms.centrality.tests.test_trophic.matrix->pytest.importorskip('numpy').identity(4)
A:networkx.algorithms.centrality.tests.test_trophic.K->pytest.importorskip('numpy').array([[1, 0, -1, 0, 0], [0, 0.5, 0, -0.5, 0], [0, 0, 1, 0, 0], [0, -0.5, 0, 1, -0.5], [0, 0, 0, 0, 1]])
A:networkx.algorithms.centrality.tests.test_trophic.result_1->pytest.importorskip('numpy').ravel(np.linalg.inv(K) @ np.ones(5))
A:networkx.algorithms.centrality.tests.test_trophic.result_2->networkx.trophic_levels(G)
A:networkx.algorithms.centrality.tests.test_trophic.diffs->networkx.trophic_differences(G)
A:networkx.algorithms.centrality.tests.test_trophic.matrix_b->pytest.importorskip('numpy').array([[0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0]])
A:networkx.algorithms.centrality.tests.test_trophic.q->networkx.trophic_incoherence_parameter(G, cannibalism=True)
A:networkx.algorithms.centrality.tests.test_trophic.matrix_c->pytest.importorskip('numpy').array([[0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]])
A:networkx.algorithms.centrality.tests.test_trophic.matrix_d->pytest.importorskip('numpy').array([[0, 1, 1, 0], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]])
networkx.algorithms.centrality.tests.test_test_trophic_differences()
networkx.algorithms.centrality.tests.test_test_trophic_incoherence_parameter_cannibalism()
networkx.algorithms.centrality.tests.test_test_trophic_incoherence_parameter_no_cannibalism()
networkx.algorithms.centrality.tests.test_test_trophic_levels()
networkx.algorithms.centrality.tests.test_test_trophic_levels_even_more_complex()
networkx.algorithms.centrality.tests.test_test_trophic_levels_levine()
networkx.algorithms.centrality.tests.test_test_trophic_levels_more_complex()
networkx.algorithms.centrality.tests.test_test_trophic_levels_simple()
networkx.algorithms.centrality.tests.test_test_trophic_levels_singular_matrix()
networkx.algorithms.centrality.tests.test_test_trophic_levels_singular_with_basal()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_differences()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_cannibalism()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_incoherence_parameter_no_cannibalism()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_even_more_complex()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_levine()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_more_complex()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_simple()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_matrix()
networkx.algorithms.centrality.tests.test_trophic.test_trophic_levels_singular_with_basal()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_voterank.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_voterank.G->networkx.MultiDiGraph()
A:networkx.algorithms.centrality.tests.test_voterank.d->networkx.voterank(G, 4)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_1(self)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_2(self)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_3(self)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_4(self)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_centrality_5(self)
networkx.algorithms.centrality.tests.test_voterank.TestVoteRankCentrality.test_voterank_emptygraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_group.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_group.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_group.b->networkx.group_betweenness_centrality(G, C, weight='weight', normalized=False)
A:networkx.algorithms.centrality.tests.test_group.np->pytest.importorskip('numpy')
A:networkx.algorithms.centrality.tests.test_group.pd->pytest.importorskip('pandas')
A:networkx.algorithms.centrality.tests.test_group.(b, g)->networkx.prominent_group(G, k, normalized=True, endpoints=True, greedy=True)
A:networkx.algorithms.centrality.tests.test_group.c->networkx.group_closeness_centrality(G, [1, 2])
A:networkx.algorithms.centrality.tests.test_group.c_answer->networkx.closeness_centrality(G, 1)
A:networkx.algorithms.centrality.tests.test_group.d->networkx.group_out_degree_centrality(G, [1, 2])
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_directed_weighted(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_disconnected_graph(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_normalized(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_single_node(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_value_zero(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_group_betweenness_with_endpoints(self)
networkx.algorithms.centrality.tests.test_TestGroupBetweennessCentrality.test_two_group_betweenness_value_zero(self)
networkx.algorithms.centrality.tests.test_TestGroupClosenessCentrality
networkx.algorithms.centrality.tests.test_TestGroupClosenessCentrality.test_group_closeness_disconnected(self)
networkx.algorithms.centrality.tests.test_TestGroupClosenessCentrality.test_group_closeness_multiple_node(self)
networkx.algorithms.centrality.tests.test_TestGroupClosenessCentrality.test_group_closeness_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_TestGroupClosenessCentrality.test_group_closeness_single_node(self)
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality.test_group_degree_centrality_multiple_node(self)
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality.test_group_degree_centrality_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality.test_group_degree_centrality_single_node(self)
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality.test_group_in_degree_centrality(self)
networkx.algorithms.centrality.tests.test_TestGroupDegreeCentrality.test_group_out_degree_centrality(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_group_betweenness_directed_weighted(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_disconnected_graph(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_greedy_algorithm(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_normalized_endpoints(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_single_node(self)
networkx.algorithms.centrality.tests.test_TestProminentGroup.test_prominent_group_with_c(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_directed_weighted(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_disconnected_graph(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_normalized(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_single_node(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_value_zero(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_group_betweenness_with_endpoints(self)
networkx.algorithms.centrality.tests.test_group.TestGroupBetweennessCentrality.test_two_group_betweenness_value_zero(self)
networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality
networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_disconnected(self)
networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_multiple_node(self)
networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_group.TestGroupClosenessCentrality.test_group_closeness_single_node(self)
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_multiple_node(self)
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_degree_centrality_single_node(self)
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_in_degree_centrality(self)
networkx.algorithms.centrality.tests.test_group.TestGroupDegreeCentrality.test_group_out_degree_centrality(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_group_betweenness_directed_weighted(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_disconnected_graph(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_greedy_algorithm(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_node_not_in_graph(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_normalized_endpoints(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_single_node(self)
networkx.algorithms.centrality.tests.test_group.TestProminentGroup.test_prominent_group_with_c(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_katz_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_katz_centrality.G->networkx.gnp_random_graph(10, 0.5, seed=1234)
A:networkx.algorithms.centrality.tests.test_katz_centrality.b->networkx.katz_centrality_numpy(G, alpha, weight=None)
A:networkx.algorithms.centrality.tests.test_katz_centrality.v->math.sqrt(1 / 5.0)
A:networkx.algorithms.centrality.tests.test_katz_centrality.b_answer->dict.fromkeys(G, v)
A:networkx.algorithms.centrality.tests.test_katz_centrality.e->networkx.eigenvector_centrality_numpy(G)
A:networkx.algorithms.centrality.tests.test_katz_centrality.np->pytest.importorskip('numpy')
A:networkx.algorithms.centrality.tests.test_katz_centrality.cls.G->networkx.gnp_random_graph(10, 0.5, seed=1234).reverse()
A:networkx.algorithms.centrality.tests.test_katz_centrality.H->networkx.DiGraph(edges)
A:networkx.algorithms.centrality.tests.test_katz_centrality.cls.H->networkx.gnp_random_graph(10, 0.5, seed=1234).reverse()
A:networkx.algorithms.centrality.tests.test_katz_centrality.p->networkx.katz_centrality_numpy(H, alpha, weight='weight')
A:networkx.algorithms.centrality.tests.test_katz_centrality.l->max(np.linalg.eigvals(nx.adjacency_matrix(G).todense()))
A:networkx.algorithms.centrality.tests.test_katz_centrality.k->networkx.katz_centrality_numpy(G, 1.0 / l)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta_numbe(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_dict(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_scalar(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_empty(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_maxiter(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multigraph(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multiple_alpha(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.setup_class(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy(TestKatzCentralityDirected)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.setup_class(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.setup_class(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta_numbe(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_dict(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_scalar(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_empty(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multigraph(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multiple_alpha(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.setup_class(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_reaching.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_reaching.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_reaching.max_local->max(local_reach_ctrs)
A:networkx.algorithms.centrality.tests.test_reaching.actual->grc(G, normalized=False, weight='weight')
A:networkx.algorithms.centrality.tests.test_reaching.centrality->networkx.local_reaching_centrality(G, 1, normalized=False, weight='weight')
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_cycle_directed_unweighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_cycle_directed_weighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_cycle_undirected_unweighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_cycle_undirected_weighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_directed_star(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_directed_weighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_negatively_weighted(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_non_positive_weights(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_undirected_unweighted_star(self)
networkx.algorithms.centrality.tests.test_TestGlobalReachingCentrality.test_undirected_weighted_star(self)
networkx.algorithms.centrality.tests.test_TestLocalReachingCentrality
networkx.algorithms.centrality.tests.test_TestLocalReachingCentrality.test_negatively_weighted(self)
networkx.algorithms.centrality.tests.test_TestLocalReachingCentrality.test_non_positive_weights(self)
networkx.algorithms.centrality.tests.test_TestLocalReachingCentrality.test_undirected_unweighted_star(self)
networkx.algorithms.centrality.tests.test_TestLocalReachingCentrality.test_undirected_weighted_star(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_unweighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_directed_weighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_unweighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_cycle_undirected_weighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_star(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_directed_weighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_negatively_weighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_non_positive_weights(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_unweighted_star(self)
networkx.algorithms.centrality.tests.test_reaching.TestGlobalReachingCentrality.test_undirected_weighted_star(self)
networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality
networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_negatively_weighted(self)
networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_non_positive_weights(self)
networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_unweighted_star(self)
networkx.algorithms.centrality.tests.test_reaching.TestLocalReachingCentrality.test_undirected_weighted_star(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_second_order_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_second_order_centrality.G->networkx.cycle_graph(5)
A:networkx.algorithms.centrality.tests.test_second_order_centrality.b->networkx.second_order_centrality(G)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_K3(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_empty(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_connected(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_non_negative_edge_weights(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_one_node_graph(self)
networkx.algorithms.centrality.tests.test_second_order_centrality.TestSecondOrderCentrality.test_ring_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_degree_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_degree_centrality.F->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.G->networkx.empty_graph(1, create_using=nx.DiGraph)
A:networkx.algorithms.centrality.tests.test_degree_centrality.d->networkx.out_degree_centrality(self.G)
A:networkx.algorithms.centrality.tests.test_degree_centrality.exact->dict(zip(names, dcs))
A:networkx.algorithms.centrality.tests.test_degree_centrality.names->sorted(self.F.nodes())
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.setup_method(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_small_graph_centrality(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_current_flow_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.np->pytest.importorskip('numpy')
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.G->networkx.Graph([(1, 2), (3, 4)])
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b->edge_current_flow(G, normalized=False)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.ba->approximate_cfbc(G, normalized=True, epsilon=0.5 * epsilon)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 0.75)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.v2->edge_current_flow(G, normalized=False).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_lower_kmax(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_seed(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solvers2(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.test_unconnected_graphs_betweenness_centrality(centrality_func)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_dispersion.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_dispersion.G->networkx.karate_club_graph()
A:networkx.algorithms.centrality.tests.test_dispersion.disp_uh->networkx.dispersion(G, 'u', 'h', normalized=False)
A:networkx.algorithms.centrality.tests.test_dispersion.disp_ub->networkx.dispersion(G, 'u', 'b', normalized=False)
A:networkx.algorithms.centrality.tests.test_dispersion.disp->networkx.dispersion(G)
A:networkx.algorithms.centrality.tests.test_dispersion.disp_Gu->networkx.dispersion(G, 'u')
A:networkx.algorithms.centrality.tests.test_dispersion.disp_uv->networkx.dispersion(G, 'u', 'h')
A:networkx.algorithms.centrality.tests.test_dispersion.disp_G_h->networkx.dispersion(G, v='h', normalized=False)
A:networkx.algorithms.centrality.tests.test_dispersion.disp_G_h_normalized->networkx.dispersion(G, v='h', normalized=True)
networkx.algorithms.centrality.tests.test_TestDispersion
networkx.algorithms.centrality.tests.test_TestDispersion.test_article(self)
networkx.algorithms.centrality.tests.test_TestDispersion.test_dispersion_v_only(self)
networkx.algorithms.centrality.tests.test_TestDispersion.test_impossible_things(self)
networkx.algorithms.centrality.tests.test_TestDispersion.test_results_length(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_article(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_dispersion_v_only(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_impossible_things(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_results_length(self)
networkx.algorithms.centrality.tests.test_dispersion.small_ego_G()
networkx.algorithms.centrality.tests.test_small_ego_G()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_eigenvector_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.np->pytest.importorskip('numpy')
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b->networkx.eigenvector_centrality_numpy(G, weight=None)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.v->math.sqrt(1 / 5.0)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b_answer->dict.fromkeys(G, v)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.cls.G->networkx.DiGraph().reverse()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.H->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.cls.H->networkx.DiGraph().reverse()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.p->networkx.eigenvector_centrality_numpy(G)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3_unweighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_maxiter(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setup_class(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph_numpy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/centrality/tests/test_harmonic_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.C4_directed->networkx.cycle_graph(4, create_using=nx.DiGraph)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.C5->networkx.cycle_graph(5)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.cls.Gb->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.c->harmonic_centrality(self.P4, nbunch=[2, 3], sources=[0, 1])
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.XG->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.G->networkx.DiGraph()
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.setup_class(cls)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_bal_tree(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_clique_complete(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C4(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C5(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_c4_directed(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_empty(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_exampleGraph(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic_subset(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic_subset(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_singleton(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_weighted_harmonic(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.weighted.(length, path)->single_source_bellman_ford(G, source, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.weight->_weight_function(G, weight)
A:networkx.algorithms.shortest_paths.weighted.length->_bellman_ford(G, [source], weight, target=target)
A:networkx.algorithms.shortest_paths.weighted.dist->_bellman_ford(G, [source], weight, paths=paths, target=target)
A:networkx.algorithms.shortest_paths.weighted.c->count()
A:networkx.algorithms.shortest_paths.weighted.(d, _, v)->pop(fringe)
A:networkx.algorithms.shortest_paths.weighted.cost->weight(v, u, e)
A:networkx.algorithms.shortest_paths.weighted.(dist, path)->single_source_dijkstra(G, n, cutoff=cutoff, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.negative_cycle_found->_inner_bellman_ford(G, source, weight, pred, dist, heuristic)
A:networkx.algorithms.shortest_paths.weighted.sources->set(source)
A:networkx.algorithms.shortest_paths.weighted.gen->_build_paths_from_predecessors(sources, dst, pred)
A:networkx.algorithms.shortest_paths.weighted.paths[dst]->next(gen)
A:networkx.algorithms.shortest_paths.weighted.inf->float('inf')
A:networkx.algorithms.shortest_paths.weighted.n->len(G)
A:networkx.algorithms.shortest_paths.weighted.q->deque(sources)
A:networkx.algorithms.shortest_paths.weighted.in_q->set(sources)
A:networkx.algorithms.shortest_paths.weighted.u->deque(sources).popleft()
A:networkx.algorithms.shortest_paths.weighted.(v, e)->next(it)
A:networkx.algorithms.shortest_paths.weighted.relabeled->relax(to_scan)
A:networkx.algorithms.shortest_paths.weighted.w_e->weight(u, v, e)
A:networkx.algorithms.shortest_paths.weighted.to_scan->topo_sort(relabeled)
A:networkx.algorithms.shortest_paths.weighted.v->_inner_bellman_ford(G, [source], weight, pred=pred)
A:networkx.algorithms.shortest_paths.weighted.neg_cycle->list(reversed(neg_cycle))
A:networkx.algorithms.shortest_paths.weighted.nbr->preds.pop()
A:networkx.algorithms.shortest_paths.weighted.(dist, _, v)->pop(fringe[dir])
A:networkx.algorithms.shortest_paths.weighted.dist_bellman->_bellman_ford(G, list(G), weight, pred=pred, dist=dist)
networkx.algorithms.shortest_paths._bellman_ford(G,source,weight,pred=None,paths=None,dist=None,target=None,heuristic=True)
networkx.algorithms.shortest_paths._dijkstra(G,source,weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths._dijkstra_multisource(G,sources,weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths._inner_bellman_ford(G,sources,weight,pred,dist=None,heuristic=True)
networkx.algorithms.shortest_paths._weight_function(G,weight)
networkx.algorithms.shortest_paths.all_pairs_bellman_ford_path(G,weight='weight')
networkx.algorithms.shortest_paths.all_pairs_bellman_ford_path_length(G,weight='weight')
networkx.algorithms.shortest_paths.all_pairs_dijkstra(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.bellman_ford_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.bellman_ford_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.bellman_ford_predecessor_and_distance(G,source,target=None,weight='weight',heuristic=False)
networkx.algorithms.shortest_paths.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.dijkstra_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.dijkstra_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.find_negative_cycle(G,source,weight='weight')
networkx.algorithms.shortest_paths.goldberg_radzik(G,source,weight='weight')
networkx.algorithms.shortest_paths.johnson(G,weight='weight')
networkx.algorithms.shortest_paths.multi_source_dijkstra(G,sources,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.multi_source_dijkstra_path(G,sources,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.multi_source_dijkstra_path_length(G,sources,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.negative_edge_cycle(G,weight='weight',heuristic=True)
networkx.algorithms.shortest_paths.single_source_bellman_ford(G,source,target=None,weight='weight')
networkx.algorithms.shortest_paths.single_source_bellman_ford_path(G,source,weight='weight')
networkx.algorithms.shortest_paths.single_source_bellman_ford_path_length(G,source,weight='weight')
networkx.algorithms.shortest_paths.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted._bellman_ford(G,source,weight,pred=None,paths=None,dist=None,target=None,heuristic=True)
networkx.algorithms.shortest_paths.weighted._dijkstra(G,source,weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths.weighted._dijkstra_multisource(G,sources,weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths.weighted._inner_bellman_ford(G,sources,weight,pred,dist=None,heuristic=True)
networkx.algorithms.shortest_paths.weighted._weight_function(G,weight)
networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_bellman_ford_path_length(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.bellman_ford_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.bellman_ford_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.bellman_ford_predecessor_and_distance(G,source,target=None,weight='weight',heuristic=False)
networkx.algorithms.shortest_paths.weighted.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.find_negative_cycle(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.goldberg_radzik(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.johnson(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra(G,sources,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path(G,sources,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.multi_source_dijkstra_path_length(G,sources,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.negative_edge_cycle(G,weight='weight',heuristic=True)
networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford(G,source,target=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_bellman_ford_path_length(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.dense.A->numpy.minimum(A, A[i, :][np.newaxis, :] + A[:, i][:, np.newaxis])
A:networkx.algorithms.shortest_paths.dense.dist->defaultdict(lambda : defaultdict(lambda : float('inf')))
A:networkx.algorithms.shortest_paths.dense.pred->defaultdict(dict)
A:networkx.algorithms.shortest_paths.dense.e_weight->d.get(weight, 1.0)
A:networkx.algorithms.shortest_paths.dense.dist[u][v]->min(e_weight, dist[u][v])
A:networkx.algorithms.shortest_paths.dense.dist[v][u]->min(e_weight, dist[v][u])
networkx.algorithms.shortest_paths.dense.floyd_warshall(G,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.algorithms.shortest_paths.dense.reconstruct_path(source,target,predecessors)
networkx.algorithms.shortest_paths.floyd_warshall(G,weight='weight')
networkx.algorithms.shortest_paths.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.algorithms.shortest_paths.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.algorithms.shortest_paths.reconstruct_path(source,target,predecessors)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.generic.paths->networkx.bellman_ford_path_length(G, source, target, weight)
A:networkx.algorithms.shortest_paths.generic.G->G.reverse(copy=False).reverse(copy=False)
A:networkx.algorithms.shortest_paths.generic.paths[target]->list(reversed(paths[target]))
A:networkx.algorithms.shortest_paths.generic.(_, paths)->networkx.bidirectional_dijkstra(G, source, target, weight)
A:networkx.algorithms.shortest_paths.generic.p->networkx.bidirectional_shortest_path(G, source, target)
A:networkx.algorithms.shortest_paths.generic.n->len(G)
A:networkx.algorithms.shortest_paths.generic.s->networkx.floyd_warshall_numpy(G, weight=weight).sum()
A:networkx.algorithms.shortest_paths.generic.all_pairs->networkx.floyd_warshall(G, weight=weight)
A:networkx.algorithms.shortest_paths.generic.pred->networkx.predecessor(G, source)
A:networkx.algorithms.shortest_paths.generic.(pred, dist)->networkx.bellman_ford_predecessor_and_distance(G, source, weight=weight)
networkx.algorithms.shortest_paths._build_paths_from_predecessors(sources,target,pred)
networkx.algorithms.shortest_paths.all_shortest_paths(G,source,target,weight=None,method='dijkstra')
networkx.algorithms.shortest_paths.average_shortest_path_length(G,weight=None,method=None)
networkx.algorithms.shortest_paths.generic._build_paths_from_predecessors(sources,target,pred)
networkx.algorithms.shortest_paths.generic.all_shortest_paths(G,source,target,weight=None,method='dijkstra')
networkx.algorithms.shortest_paths.generic.average_shortest_path_length(G,weight=None,method=None)
networkx.algorithms.shortest_paths.generic.has_path(G,source,target)
networkx.algorithms.shortest_paths.generic.shortest_path(G,source=None,target=None,weight=None,method='dijkstra')
networkx.algorithms.shortest_paths.generic.shortest_path_length(G,source=None,target=None,weight=None,method='dijkstra')
networkx.algorithms.shortest_paths.has_path(G,source,target)
networkx.algorithms.shortest_paths.shortest_path(G,source=None,target=None,weight=None,method='dijkstra')
networkx.algorithms.shortest_paths.shortest_path_length(G,source=None,target=None,weight=None,method='dijkstra')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.astar.weight->_weight_function(G, weight)
A:networkx.algorithms.shortest_paths.astar.c->count()
A:networkx.algorithms.shortest_paths.astar.(_, __, curnode, dist, parent)->pop(queue)
A:networkx.algorithms.shortest_paths.astar.h->heuristic(neighbor, target)
A:networkx.algorithms.shortest_paths.astar.path->astar_path(G, source, target, heuristic, weight)
networkx.algorithms.shortest_paths.astar.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.algorithms.shortest_paths.astar.astar_path_length(G,source,target,heuristic=None,weight='weight')
networkx.algorithms.shortest_paths.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.algorithms.shortest_paths.astar_path_length(G,source,target,heuristic=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.unweighted.cutoff->float('inf')
A:networkx.algorithms.shortest_paths.unweighted.nextlevel->set()
A:networkx.algorithms.shortest_paths.unweighted.n->len(adj)
A:networkx.algorithms.shortest_paths.unweighted.results->_bidirectional_pred_succ(G, source, target)
A:networkx.algorithms.shortest_paths.unweighted.paths[w]->join(paths[v], [w])
networkx.algorithms.shortest_paths.un_bidirectional_pred_succ(G,source,target)
networkx.algorithms.shortest_paths.un_single_shortest_path(adj,firstlevel,paths,cutoff,join)
networkx.algorithms.shortest_paths.un_single_shortest_path_length(adj,firstlevel,cutoff)
networkx.algorithms.shortest_paths.unall_pairs_shortest_path(G,cutoff=None)
networkx.algorithms.shortest_paths.unall_pairs_shortest_path_length(G,cutoff=None)
networkx.algorithms.shortest_paths.unbidirectional_shortest_path(G,source,target)
networkx.algorithms.shortest_paths.unpredecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.algorithms.shortest_paths.unsingle_source_shortest_path(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unsingle_source_shortest_path_length(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unsingle_target_shortest_path(G,target,cutoff=None)
networkx.algorithms.shortest_paths.unsingle_target_shortest_path_length(G,target,cutoff=None)
networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ(G,source,target)
networkx.algorithms.shortest_paths.unweighted._single_shortest_path(adj,firstlevel,paths,cutoff,join)
networkx.algorithms.shortest_paths.unweighted._single_shortest_path_length(adj,firstlevel,cutoff)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path(G,source,target)
networkx.algorithms.shortest_paths.unweighted.predecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path(G,target,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.single_target_shortest_path_length(G,target,cutoff=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_astar.cls.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.graph->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.C->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_astar.path->networkx.astar_path(G, nodes[0], nodes[2])
networkx.algorithms.shortest_paths.tests.test_TestAStar
networkx.algorithms.shortest_paths.tests.test_TestAStar.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_directed(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_directed2(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_directed3(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_directed4(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_nopath(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_undirected(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_undirected2(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_undirected3(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_astar_w1(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_multiple_optimal_paths(self)
networkx.algorithms.shortest_paths.tests.test_TestAStar.test_unorderable_nodes(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed3(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed4(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_multiple_optimal_paths(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_unorderable_nodes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_unweighted.cls.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_unweighted.cls.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.cls.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_unweighted.p->networkx.predecessor(G, 0, 3, cutoff=2)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.l->dict(nx.all_pairs_shortest_path_length(self.grid))
A:networkx.algorithms.shortest_paths.tests.test_unweighted.G->networkx.path_graph(4)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.pred->networkx.predecessor(G, 0)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.(p, s)->networkx.predecessor(G, 0, 3, cutoff=2, return_seen=True)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_bidirectional_shortest_path_src_tgt_not_in_graph(self,src,tgt)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_predecessor_cutoff(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_predecessor_cycle(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_predecessor_missing_source(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_predecessor_path(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_predecessor_target(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_single_target_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unTestUnweightedPath.test_single_target_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unvalidate_grid_path(r,c,s,t,p)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path_src_tgt_not_in_graph(self,src,tgt)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cutoff(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cycle(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_missing_source(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_target(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_target_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path(r,c,s,t,p)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_dense_numpy.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.np->pytest.importorskip('numpy')
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.dist->networkx.floyd_warshall_numpy(G, nodelist=[3, 5, 4, 6, 2, 1, 0])
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.G->networkx.path_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.(pred, dist)->networkx.floyd_warshall_predecessor_and_distance(G)
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.D->networkx.utils.dict_to_numpy_array(dist)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_cycle_numpy()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_directed_cycle_numpy()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_nodelist()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_weight_parameter_numpy()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_weighted_numpy_three_edges()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_weighted_numpy_two_edges()
networkx.algorithms.shortest_paths.tests.test_dense_numpy.test_zero_weight()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_generic.cls.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_generic.cls.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_generic.cls.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_generic.cls.neg_weights->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_generic.sp->networkx.shortest_path_length(nx.path_graph(3), target=1, weight='weight', method='bellman-ford')
A:networkx.algorithms.shortest_paths.tests.test_generic.p->networkx.shortest_path(self.cycle, weight='weight', method='bellman-ford')
A:networkx.algorithms.shortest_paths.tests.test_generic.ans->networkx.average_shortest_path_length(G, weight='weight', method='floyd-warshall-numpy')
A:networkx.algorithms.shortest_paths.tests.test_generic.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_generic.g->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_generic.paths30d->list(nx.all_shortest_paths(g, 3, 0, weight='weight', method='dijkstra'))
A:networkx.algorithms.shortest_paths.tests.test_generic.paths03d->list(nx.all_shortest_paths(g, 0, 3, weight='weight', method='dijkstra'))
A:networkx.algorithms.shortest_paths.tests.test_generic.paths30b->list(nx.all_shortest_paths(g, 3, 0, weight='weight', method='bellman-ford'))
A:networkx.algorithms.shortest_paths.tests.test_generic.paths03b->list(nx.all_shortest_paths(g, 0, 3, weight='weight', method='bellman-ford'))
A:networkx.algorithms.shortest_paths.tests.test_generic.np->pytest.importorskip('numpy')
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_bad_method(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_cycle_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_directed_not_strongly_connected(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_null_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_path_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_specified_methods(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_trivial_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_undirected_not_connected(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLength.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLengthNumpy
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLengthNumpy.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_TestAverageShortestPathLengthNumpy.test_specified_methods_numpy(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_all_shortest_paths(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_all_shortest_paths_raise(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_all_shortest_paths_zero_weight_edge(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_bad_method(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_has_path(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_shortest_path_length_target(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_shortest_path_target(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_TestGenericPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_bad_method(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_cycle_graph(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_directed_not_strongly_connected(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_null_graph(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_path_graph(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_specified_methods(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_trivial_graph(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_undirected_not_connected(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLength.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_generic.TestAverageShortestPathLengthNumpy.test_specified_methods_numpy(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_raise(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_zero_weight_edge(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_bad_method(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length_target(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_target(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path(r,c,s,t,p)
networkx.algorithms.shortest_paths.tests.test_validate_grid_path(r,c,s,t,p)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_dense.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.(path, dist)->networkx.floyd_warshall_predecessor_and_distance(GG)
A:networkx.algorithms.shortest_paths.tests.test_dense.GG->networkx.DiGraph().to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_dense.G->networkx.MultiDiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.dist->networkx.floyd_warshall(G)
A:networkx.algorithms.shortest_paths.tests.test_dense.inf->float('inf')
A:networkx.algorithms.shortest_paths.tests.test_dense.(predecessors, _)->networkx.floyd_warshall_predecessor_and_distance(XG)
A:networkx.algorithms.shortest_paths.tests.test_dense.path->networkx.reconstruct_path('s', 's', predecessors)
A:networkx.algorithms.shortest_paths.tests.test_dense.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense.XG4->networkx.Graph()
networkx.algorithms.shortest_paths.tests.test_TestFloyd
networkx.algorithms.shortest_paths.tests.test_TestFloyd.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_reconstruct_path(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_weight_parameter(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_weighted2(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_zero_distance(self)
networkx.algorithms.shortest_paths.tests.test_TestFloyd.test_zero_weight(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setup_class(cls)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_reconstruct_path(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_distance(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_weight(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/algorithms/shortest_paths/tests/test_weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_weighted.computed->sum((weight_f(u, v, G[u][v]) for (u, v) in pairwise(path)))
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG->networkx.MultiDiGraph(self.XG)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG4->networkx.MultiGraph(self.XG4)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.G->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(D, P)->networkx.single_source_bellman_ford(self.XG, 's', target='v')
A:networkx.algorithms.shortest_paths.tests.test_weighted.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_weighted.G->networkx.path_graph(5)
A:networkx.algorithms.shortest_paths.tests.test_weighted.(pred, dist)->networkx.goldberg_radzik(G, 0)
A:networkx.algorithms.shortest_paths.tests.test_weighted.path->networkx.bidirectional_dijkstra(G, 1, 6)
A:networkx.algorithms.shortest_paths.tests.test_weighted.dist->networkx.astar_path_length(g, s, t, heuristic, weight=weight)
A:networkx.algorithms.shortest_paths.tests.test_weighted.res->F(G, s, t, weight=w)
A:networkx.algorithms.shortest_paths.tests.test_weighted.length->networkx.dijkstra_path_length(G, 0, 2, weight=weight)
A:networkx.algorithms.shortest_paths.tests.test_weighted.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(P, D)->networkx.goldberg_radzik(self.XG, 's')
A:networkx.algorithms.shortest_paths.tests.test_weighted.spl->pl(self.MXG4, 0, cutoff=2)
A:networkx.algorithms.shortest_paths.tests.test_weighted.dp->networkx.bidirectional_dijkstra(G, 'a', 'b')
A:networkx.algorithms.shortest_paths.tests.test_weighted.(p, d)->networkx.dijkstra_predecessor_and_distance(G, 'a')
A:networkx.algorithms.shortest_paths.tests.test_weighted.graph_size->len(G)
A:networkx.algorithms.shortest_paths.tests.test_weighted.d->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(distance, path)->networkx.single_source_dijkstra(G, 0, 2, weight=weight)
A:networkx.algorithms.shortest_paths.tests.test_weighted.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_weighted.p->dict(nx.all_pairs_dijkstra_path(cycle))
A:networkx.algorithms.shortest_paths.tests.test_weighted.pl->dict(nx.all_pairs_dijkstra_path_length(cycle))
A:networkx.algorithms.shortest_paths.tests.test_weighted.out->dict(nx.all_pairs_dijkstra(cycle))
A:networkx.algorithms.shortest_paths.tests.test_weighted.(distances, paths)->networkx.multi_source_dijkstra(G, sources)
A:networkx.algorithms.shortest_paths.tests.test_weighted.lengths->networkx.multi_source_dijkstra_path_length(G, [0])
A:networkx.algorithms.shortest_paths.tests.test_weighted.paths->networkx.johnson(G)
A:networkx.algorithms.shortest_paths.tests.test_weighted.no_heuristic->networkx.negative_edge_cycle(G, heuristic=False)
A:networkx.algorithms.shortest_paths.tests.test_weighted.with_heuristic->networkx.negative_edge_cycle(G, heuristic=True)
A:networkx.algorithms.shortest_paths.tests.test_weighted.(dist, path)->networkx.single_source_bellman_ford(G, 0)
A:networkx.algorithms.shortest_paths.tests.test_weighted.D->networkx.DiGraph()
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_4_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_absent_source_bellman_ford(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_absent_source_goldberg_radzik(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_longer_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_no_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_single_edge(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_negative_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_negative_cycle_consistency(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_negative_cycle_heuristic(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_negative_weight(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_negative_weight_bf_path(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_not_connected(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_others(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_path_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestBellmanFordAndGoldbergRadzik.test_zero_cycle_smoke(self)
networkx.algorithms.shortest_paths.tests.test_TestDijkstraPathLength
networkx.algorithms.shortest_paths.tests.test_TestDijkstraPathLength.test_weight_function(self)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm.test_graphs(self)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm.test_negative_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm.test_negative_weights(self)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestJohnsonAlgorithm.test_unweighted_graph(self)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_absent_source(self,fn)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_path_length_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_path_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_simple_paths(self)
networkx.algorithms.shortest_paths.tests.test_TestMultiSourceDijkstra.test_two_sources(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_absent_source(self,fn)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_all_pairs_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_all_pairs_dijkstra_path(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_all_pairs_dijkstra_path_length(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_bidirectional_dijkstra_no_path(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_dijkstra_predecessor1(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_dijkstra_predecessor2(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_dijkstra_predecessor3(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_negative_edge_cycle(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_negative_edge_cycle_custom_weight_key(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_single_source_dijkstra_path_length(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_weight_function(self)
networkx.algorithms.shortest_paths.tests.test_TestWeightedPath.test_weight_functions(self)
networkx.algorithms.shortest_paths.tests.test_WeightedTestBase
networkx.algorithms.shortest_paths.tests.test_WeightedTestBase.setup_method(self)
networkx.algorithms.shortest_paths.tests.test_validate_length_path(G,s,t,soln_len,length,path,weight='weight')
networkx.algorithms.shortest_paths.tests.test_validate_path(G,s,t,soln_len,path,weight='weight')
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_4_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_bellman_ford(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_absent_source_goldberg_radzik(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_longer_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_no_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_find_negative_cycle_single_edge(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_cycle_consistency(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_cycle_heuristic(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_negative_weight_bf_path(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_not_connected(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_others(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_path_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadzik.test_zero_cycle_smoke(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength
networkx.algorithms.shortest_paths.tests.test_weighted.TestDijkstraPathLength.test_weight_function(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_graphs(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_weights(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_unweighted_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_absent_source(self,fn)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_length_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_path_no_sources(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_simple_paths(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestMultiSourceDijkstra.test_two_sources(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath(WeightedTestBase)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_absent_source(self,fn)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_all_pairs_dijkstra_path_length(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_no_path(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor1(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor2(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor3(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle_custom_weight_key(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_single_source_dijkstra_path_length(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_function(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_weight_functions(self)
networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase
networkx.algorithms.shortest_paths.tests.test_weighted.WeightedTestBase.setup_method(self)
networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path(G,s,t,soln_len,length,path,weight='weight')
networkx.algorithms.shortest_paths.tests.test_weighted.validate_path(G,s,t,soln_len,path,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/pajek.py----------------------------------------
A:networkx.readwrite.pajek.nodes->list(G)
A:networkx.readwrite.pajek.nodenumber->dict(zip(nodes, range(1, len(nodes) + 1)))
A:networkx.readwrite.pajek.na->networkx.DiGraph(G).nodes.get(n, {}).copy()
A:networkx.readwrite.pajek.x->networkx.DiGraph(G).nodes.get(n, {}).copy().pop('x', 0.0)
A:networkx.readwrite.pajek.y->networkx.DiGraph(G).nodes.get(n, {}).copy().pop('y', 0.0)
A:networkx.readwrite.pajek.id->int(na.pop('id', nodenumber[n]))
A:networkx.readwrite.pajek.shape->networkx.DiGraph(G).nodes.get(n, {}).copy().pop('shape', 'ellipse')
A:networkx.readwrite.pajek.s->' '.join(map(make_qstr, (nodenumber[u], nodenumber[v], value)))
A:networkx.readwrite.pajek.d->edgedata.copy()
A:networkx.readwrite.pajek.value->edgedata.copy().pop('weight', 1.0)
A:networkx.readwrite.pajek.lines->iter([line.rstrip('\n') for line in lines])
A:networkx.readwrite.pajek.G->networkx.DiGraph(G)
A:networkx.readwrite.pajek.l->next(lines)
A:networkx.readwrite.pajek.(label, name)->next(lines).split(None, 1)
A:networkx.readwrite.pajek.(l, nnodes)->next(lines).split()
A:networkx.readwrite.pajek.splitline->shlex.split(str(l))
A:networkx.readwrite.pajek.extra_attr->zip(splitline[3::2], splitline[4::2])
A:networkx.readwrite.pajek.u->nodelabels.get(ui, ui)
A:networkx.readwrite.pajek.v->nodelabels.get(vi, vi)
A:networkx.readwrite.pajek.t->str(t)
networkx.readwrite.generate_pajek(G)
networkx.readwrite.make_qstr(t)
networkx.readwrite.pajek.generate_pajek(G)
networkx.readwrite.pajek.make_qstr(t)
networkx.readwrite.pajek.parse_pajek(lines)
networkx.readwrite.pajek.read_pajek(path,encoding='UTF-8')
networkx.readwrite.pajek.write_pajek(G,path,encoding='UTF-8')
networkx.readwrite.parse_pajek(lines)
networkx.readwrite.read_pajek(path,encoding='UTF-8')
networkx.readwrite.write_pajek(G,path,encoding='UTF-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/graph6.py----------------------------------------
A:networkx.readwrite.graph6.n->len(G)
A:networkx.readwrite.graph6.chunk->list(islice(bits, 6))
A:networkx.readwrite.graph6.d->sum((b << 5 - i for (i, b) in enumerate(chunk)))
A:networkx.readwrite.graph6.(n, data)->data_to_n(data)
A:networkx.readwrite.graph6.G->G.subgraph(nodes).subgraph(nodes)
A:networkx.readwrite.graph6.H->networkx.convert_node_labels_to_integers(G)
A:networkx.readwrite.graph6.nodes->sorted(H.nodes())
A:networkx.readwrite.graph6.line->line.strip().strip()
networkx.readwrite._generate_graph6_bytes(G,nodes,header)
networkx.readwrite.data_to_n(data)
networkx.readwrite.from_graph6_bytes(bytes_in)
networkx.readwrite.graph6._generate_graph6_bytes(G,nodes,header)
networkx.readwrite.graph6.data_to_n(data)
networkx.readwrite.graph6.from_graph6_bytes(bytes_in)
networkx.readwrite.graph6.n_to_data(n)
networkx.readwrite.graph6.read_graph6(path)
networkx.readwrite.graph6.to_graph6_bytes(G,nodes=None,header=True)
networkx.readwrite.graph6.write_graph6(G,path,nodes=None,header=True)
networkx.readwrite.graph6.write_graph6_file(G,f,nodes=None,header=True)
networkx.readwrite.n_to_data(n)
networkx.readwrite.read_graph6(path)
networkx.readwrite.to_graph6_bytes(G,nodes=None,header=True)
networkx.readwrite.write_graph6(G,path,nodes=None,header=True)
networkx.readwrite.write_graph6_file(G,f,nodes=None,header=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/text.py----------------------------------------
A:networkx.readwrite.text.is_directed->graph.is_directed()
A:networkx.readwrite.text.seen->set()
A:networkx.readwrite.text.(node, indent, islast)->stack.pop()
A:networkx.readwrite.text.label->graph.nodes[node].get('label', node)
networkx.readwrite.forest_str(graph,with_labels=True,sources=None,write=None,ascii_only=False)
networkx.readwrite.text.forest_str(graph,with_labels=True,sources=None,write=None,ascii_only=False)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/gml.py----------------------------------------
A:networkx.readwrite.gml.ch->m.group(0)
A:networkx.readwrite.gml.text->repr(value).upper()
A:networkx.readwrite.gml.code->int(text[2:-1])
A:networkx.readwrite.gml.line->decode_line(line)
A:networkx.readwrite.gml.lines->lines.splitlines().splitlines()
A:networkx.readwrite.gml.G->networkx.relabel_nodes(G, mapping)
A:networkx.readwrite.gml.tokens->tokenize()
A:networkx.readwrite.gml.length->len(line)
A:networkx.readwrite.gml.match->tokenize().match(line, pos)
A:networkx.readwrite.gml.group->tokenize().match(line, pos).group(i + 1)
A:networkx.readwrite.gml.value->stringizer(value)
A:networkx.readwrite.gml.dct->defaultdict(list)
A:networkx.readwrite.gml.curr_token->consume(curr_token, Pattern.DICT_END, "']'")
A:networkx.readwrite.gml.(curr_token, value)->parse_dict(curr_token)
A:networkx.readwrite.gml.(curr_token, dct)->parse_kv(next(tokens))
A:networkx.readwrite.gml.graph->parse_graph()
A:networkx.readwrite.gml.directed->parse_graph().pop('directed', False)
A:networkx.readwrite.gml.multigraph->networkx.relabel_nodes(G, mapping).is_multigraph()
A:networkx.readwrite.gml.nodes->parse_graph().get('node', [])
A:networkx.readwrite.gml.node_labels->set()
A:networkx.readwrite.gml.id->pop_attr(node, 'node', 'id', i)
A:networkx.readwrite.gml.node_label->pop_attr(node, 'node', label, i)
A:networkx.readwrite.gml.edges->parse_graph().get('edge', [])
A:networkx.readwrite.gml.source->pop_attr(edge, 'edge', 'source', i)
A:networkx.readwrite.gml.target->pop_attr(edge, 'edge', 'target', i)
A:networkx.readwrite.gml.key->str(key)
A:networkx.readwrite.gml.buf->StringIO()
A:networkx.readwrite.gml.valid_keys->re.compile('^[A-Za-z][0-9A-Za-z_]*$')
A:networkx.readwrite.gml.epos->repr(value).upper().rfind('E')
A:networkx.readwrite.gml.node_id->dict(zip(G, range(len(G))))
networkx.readwrite.Pattern(Enum)
networkx.readwrite.Token(NamedTuple)
networkx.readwrite.escape(text)
networkx.readwrite.generate_gml(G,stringizer=None)
networkx.readwrite.gml.Pattern(Enum)
networkx.readwrite.gml.Token(NamedTuple)
networkx.readwrite.gml.escape(text)
networkx.readwrite.gml.generate_gml(G,stringizer=None)
networkx.readwrite.gml.literal_destringizer(rep)
networkx.readwrite.gml.literal_stringizer(value)
networkx.readwrite.gml.parse_gml(lines,label='label',destringizer=None)
networkx.readwrite.gml.parse_gml_lines(lines,label,destringizer)
networkx.readwrite.gml.read_gml(path,label='label',destringizer=None)
networkx.readwrite.gml.unescape(text)
networkx.readwrite.gml.write_gml(G,path,stringizer=None)
networkx.readwrite.literal_destringizer(rep)
networkx.readwrite.literal_stringizer(value)
networkx.readwrite.parse_gml(lines,label='label',destringizer=None)
networkx.readwrite.parse_gml_lines(lines,label,destringizer)
networkx.readwrite.read_gml(path,label='label',destringizer=None)
networkx.readwrite.unescape(text)
networkx.readwrite.write_gml(G,path,stringizer=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/p2g.py----------------------------------------
A:networkx.readwrite.p2g.nodes->list(G)
A:networkx.readwrite.p2g.nodenumber->dict(zip(nodes, range(len(nodes))))
A:networkx.readwrite.p2g.G->networkx.MultiDiGraph(name=description, selfloops=True)
A:networkx.readwrite.p2g.description->next(lines).strip()
A:networkx.readwrite.p2g.(nnodes, nedges)->map(int, next(lines).split())
A:networkx.readwrite.p2g.n->next(lines).strip()
A:networkx.readwrite.p2g.nbrs[n]->map(int, next(lines).split())
networkx.readwrite.p2g.parse_p2g(lines)
networkx.readwrite.p2g.read_p2g(path,encoding='utf-8')
networkx.readwrite.p2g.write_p2g(G,path,encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/graphml.py----------------------------------------
A:networkx.readwrite.graphml.writer->GraphMLWriter(encoding=encoding, prettyprint=prettyprint, named_key_ids=named_key_ids, edge_id_from_attribute=edge_id_from_attribute)
A:networkx.readwrite.graphml.reader->GraphMLReader(node_type, edge_key_type, force_multigraph)
A:networkx.readwrite.graphml.glist->list(reader(string=new_string))
A:networkx.readwrite.graphml.old_bytes->path.read()
A:networkx.readwrite.graphml.new_bytes->path.read().replace(b'<graphml>', header)
A:networkx.readwrite.graphml.new_string->graphml_string.replace('<graphml>', header)
A:networkx.readwrite.graphml.SCHEMALOCATION->' '.join(['http://graphml.graphdrawing.org/xmlns', 'http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'])
A:networkx.readwrite.graphml.self.xml_type->dict(types)
A:networkx.readwrite.graphml.self.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.graphml.self.xml->fromstring(string)
A:networkx.readwrite.graphml.self.attributes->defaultdict(list)
A:networkx.readwrite.graphml.self.attribute_types->defaultdict(set)
A:networkx.readwrite.graphml.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.graphml.key_element->self.myElement('key', **key_kwargs)
A:networkx.readwrite.graphml.default_element->self.myElement('default')
A:networkx.readwrite.graphml.default_element.text->str(default)
A:networkx.readwrite.graphml.keyid->self.get_key(name, self.get_xml_type(element_type), scope, default)
A:networkx.readwrite.graphml.data_element->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k))
A:networkx.readwrite.graphml.data_element.text->str(value)
A:networkx.readwrite.graphml.default->k.find(f'{{{self.NS_GRAPHML}}}default')
A:networkx.readwrite.graphml.node_element->self.myElement('node', id=str(node))
A:networkx.readwrite.graphml.edge_element->self.myElement('edge', source=str(u), target=str(v))
A:networkx.readwrite.graphml.graphid->networkx.MultiGraph().graph.pop('id', None)
A:networkx.readwrite.graphml.graph_element->self._xml.element('graph', edgedefault=default_edge_type, id=graphid)
A:networkx.readwrite.graphml.document->ElementTree(self.xml)
A:networkx.readwrite.graphml.self._xml_base->lxml.etree.xmlfile(path, encoding=encoding)
A:networkx.readwrite.graphml.self._xml->self._xml_base.__enter__()
A:networkx.readwrite.graphml.self._graphml->self._xml.element('graphml', {'xmlns': self.NS_GRAPHML, 'xmlns:xsi': self.NS_XSI, 'xsi:schemaLocation': self.SCHEMALOCATION})
A:networkx.readwrite.graphml.node_default->networkx.MultiGraph().graph.get('node_default', {})
A:networkx.readwrite.graphml.edge_default->networkx.MultiGraph().graph.get('edge_default', {})
A:networkx.readwrite.graphml.element_type->self.get_xml_type(self.attr_type(k, 'graph', v))
A:networkx.readwrite.graphml.T->self.get_xml_type(self.attr_type(k, 'edge', v))
A:networkx.readwrite.graphml.incremental_writer->IncrementalElement(self._xml, self._prettyprint)
A:networkx.readwrite.graphml.(keys, defaults)->self.find_graphml_keys(self.xml)
A:networkx.readwrite.graphml.edgedefault->node_xml.find(f'{{{self.NS_GRAPHML}}}graph').get('edgedefault', None)
A:networkx.readwrite.graphml.G->networkx.MultiGraph()
A:networkx.readwrite.graphml.hyperedge->node_xml.find(f'{{{self.NS_GRAPHML}}}graph').find(f'{{{self.NS_GRAPHML}}}hyperedge')
A:networkx.readwrite.graphml.data->self.decode_data_elements(graphml_keys, edge_element)
A:networkx.readwrite.graphml.ports->self.myElement('edge', source=str(u), target=str(v)).find(f'{{{self.NS_GRAPHML}}}port')
A:networkx.readwrite.graphml.node_id->self.node_type(node_xml.get('id'))
A:networkx.readwrite.graphml.graph_xml->node_xml.find(f'{{{self.NS_GRAPHML}}}graph')
A:networkx.readwrite.graphml.directed->self.myElement('edge', source=str(u), target=str(v)).get('directed')
A:networkx.readwrite.graphml.source->self.node_type(edge_element.get('source'))
A:networkx.readwrite.graphml.target->self.node_type(edge_element.get('target'))
A:networkx.readwrite.graphml.edge_id->self.decode_data_elements(graphml_keys, edge_element).get('key')
A:networkx.readwrite.graphml.key->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).get('key')
A:networkx.readwrite.graphml.data[data_name]->data_type(text)
A:networkx.readwrite.graphml.gn->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{{{self.NS_Y}}}GenericNode')
A:networkx.readwrite.graphml.data['shape_type']->data_element.find(f'{pref}Shape').get('type')
A:networkx.readwrite.graphml.geometry->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}Geometry')
A:networkx.readwrite.graphml.data['x']->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}Geometry').get('x')
A:networkx.readwrite.graphml.data['y']->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}Geometry').get('y')
A:networkx.readwrite.graphml.node_label->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}NodeLabel')
A:networkx.readwrite.graphml.shape->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}Shape')
A:networkx.readwrite.graphml.edge_label->self.add_data(str(k), self.attr_type(str(k), scope, v), str(v), scope, default.get(k)).find(f'{pref}EdgeLabel')
A:networkx.readwrite.graphml.attr_id->k.get('id')
A:networkx.readwrite.graphml.attr_type->k.get('attr.type')
A:networkx.readwrite.graphml.attr_name->k.get('attr.name')
A:networkx.readwrite.graphml.yfiles_type->k.get('yfiles.type')
A:networkx.readwrite.graphml.graphml_key_defaults[attr_id]->python_type(default.text)
networkx.readwrite.GraphML
networkx.readwrite.GraphML.construct_types(self)
networkx.readwrite.GraphML.get_xml_type(self,key)
networkx.readwrite.GraphMLReader(self,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.readwrite.GraphMLReader.add_node(self,G,node_xml,graphml_keys,defaults)
networkx.readwrite.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.readwrite.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.readwrite.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults,G=None)
networkx.readwrite.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.GraphMLWriter.__str__(self)
networkx.readwrite.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.readwrite.GraphMLWriter.add_edges(self,G,graph_element)
networkx.readwrite.GraphMLWriter.add_graph_element(self,G)
networkx.readwrite.GraphMLWriter.add_graphs(self,graph_list)
networkx.readwrite.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.readwrite.GraphMLWriter.attr_type(self,name,scope,value)
networkx.readwrite.GraphMLWriter.dump(self,stream)
networkx.readwrite.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.readwrite.GraphMLWriter.indent(self,elem,level=0)
networkx.readwrite.GraphMLWriterLxml(self,path,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.GraphMLWriterLxml.__str__(self)
networkx.readwrite.GraphMLWriterLxml.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.GraphMLWriterLxml.add_graph_element(self,G)
networkx.readwrite.GraphMLWriterLxml.dump(self)
networkx.readwrite.IncrementalElement(self,xml,prettyprint)
networkx.readwrite.IncrementalElement.append(self,element)
networkx.readwrite.generate_graphml(G,encoding='utf-8',prettyprint=True,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.GraphML
networkx.readwrite.graphml.GraphML.construct_types(self)
networkx.readwrite.graphml.GraphML.get_xml_type(self,key)
networkx.readwrite.graphml.GraphMLReader(self,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.graphml.GraphMLReader.__init__(self,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.graphml.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.readwrite.graphml.GraphMLReader.add_node(self,G,node_xml,graphml_keys,defaults)
networkx.readwrite.graphml.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.readwrite.graphml.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.readwrite.graphml.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults,G=None)
networkx.readwrite.graphml.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.GraphMLWriter.__init__(self,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.GraphMLWriter.__str__(self)
networkx.readwrite.graphml.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.graphml.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.readwrite.graphml.GraphMLWriter.add_edges(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.add_graph_element(self,G)
networkx.readwrite.graphml.GraphMLWriter.add_graphs(self,graph_list)
networkx.readwrite.graphml.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.attr_type(self,name,scope,value)
networkx.readwrite.graphml.GraphMLWriter.dump(self,stream)
networkx.readwrite.graphml.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.readwrite.graphml.GraphMLWriter.indent(self,elem,level=0)
networkx.readwrite.graphml.GraphMLWriterLxml(self,path,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.GraphMLWriterLxml.__init__(self,path,graph=None,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.GraphMLWriterLxml.__str__(self)
networkx.readwrite.graphml.GraphMLWriterLxml.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.graphml.GraphMLWriterLxml.add_graph_element(self,G)
networkx.readwrite.graphml.GraphMLWriterLxml.dump(self)
networkx.readwrite.graphml.IncrementalElement(self,xml,prettyprint)
networkx.readwrite.graphml.IncrementalElement.__init__(self,xml,prettyprint)
networkx.readwrite.graphml.IncrementalElement.append(self,element)
networkx.readwrite.graphml.generate_graphml(G,encoding='utf-8',prettyprint=True,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.parse_graphml(graphml_string,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.graphml.read_graphml(path,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.graphml.write_graphml_lxml(G,path,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.graphml.write_graphml_xml(G,path,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.parse_graphml(graphml_string,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.read_graphml(path,node_type=str,edge_key_type=int,force_multigraph=False)
networkx.readwrite.write_graphml_lxml(G,path,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)
networkx.readwrite.write_graphml_xml(G,path,encoding='utf-8',prettyprint=True,infer_numeric_types=False,named_key_ids=False,edge_id_from_attribute=None)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/gexf.py----------------------------------------
A:networkx.readwrite.gexf.writer->GEXFWriter(encoding=encoding, prettyprint=prettyprint, version=version)
A:networkx.readwrite.gexf.reader->GEXFReader(node_type=node_type, version=version)
A:networkx.readwrite.gexf.G->networkx.Graph(G)
A:networkx.readwrite.gexf.self.xml_type->dict(types)
A:networkx.readwrite.gexf.self.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.gexf.d->self.versions.get(version)
A:networkx.readwrite.gexf.self.xml->ElementTree(file=stream)
A:networkx.readwrite.gexf.meta_element->Element('meta')
A:networkx.readwrite.gexf.self.edge_id->itertools.count()
A:networkx.readwrite.gexf.self.attr_id->itertools.count()
A:networkx.readwrite.gexf.self.all_edge_ids->set()
A:networkx.readwrite.gexf.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.gexf.eid->dd.get('id')
A:networkx.readwrite.gexf.name->networkx.Graph(G).graph.get('name', '')
A:networkx.readwrite.gexf.graph_element->Element('graph', defaultedgetype=default, mode=mode, name=name)
A:networkx.readwrite.gexf.nodes_element->graph_xml.find(f'{{{self.NS_GEXF}}}nodes')
A:networkx.readwrite.gexf.node_data->self.add_attributes('node', node_element, node_data, default)
A:networkx.readwrite.gexf.node_id->self.node_type(node_id)
A:networkx.readwrite.gexf.label->str(node_data.pop('label', node))
A:networkx.readwrite.gexf.pid->self.add_attributes('node', node_element, node_data, default).pop('pid')
A:networkx.readwrite.gexf.kw['pid']->str(pid)
A:networkx.readwrite.gexf.start->self.python_type[ttype](a.get('start'))
A:networkx.readwrite.gexf.kw['start']->str(start)
A:networkx.readwrite.gexf.end->self.python_type[ttype](a.get('end'))
A:networkx.readwrite.gexf.kw['end']->str(end)
A:networkx.readwrite.gexf.node_element->Element('node', **kw)
A:networkx.readwrite.gexf.default->k.find(f'{{{self.NS_GEXF}}}default')
A:networkx.readwrite.gexf.edge_data->self.add_attributes('edge', edge_element, edge_data, default)
A:networkx.readwrite.gexf.edge_id->Element('edge', source=source_id, target=target_id, **kw).get('id')
A:networkx.readwrite.gexf.edges_element->graph_xml.find(f'{{{self.NS_GEXF}}}edges')
A:networkx.readwrite.gexf.edge_label->Element('edge', source=source_id, target=target_id, **kw).get('label')
A:networkx.readwrite.gexf.kw['label']->str(edge_label)
A:networkx.readwrite.gexf.edge_weight->self.add_attributes('edge', edge_element, edge_data, default).pop('weight')
A:networkx.readwrite.gexf.kw['weight']->str(edge_weight)
A:networkx.readwrite.gexf.edge_type->self.add_attributes('edge', edge_element, edge_data, default).pop('type')
A:networkx.readwrite.gexf.kw['type']->str(edge_type)
A:networkx.readwrite.gexf.source_id->str(G.nodes[u].get('id', u))
A:networkx.readwrite.gexf.target_id->str(G.nodes[v].get('id', v))
A:networkx.readwrite.gexf.edge_element->Element('edge', source=source_id, target=target_id, **kw)
A:networkx.readwrite.gexf.attvalues->Element('attvalues')
A:networkx.readwrite.gexf.val_type->type(val)
A:networkx.readwrite.gexf.attr_id->k.get('id')
A:networkx.readwrite.gexf.e->Element('spell')
A:networkx.readwrite.gexf.e.attrib['value']->str(v)
A:networkx.readwrite.gexf.e.attrib['start']->str(start)
A:networkx.readwrite.gexf.e.attrib['end']->str(end)
A:networkx.readwrite.gexf.new_id->str(next(self.attr_id))
A:networkx.readwrite.gexf.attribute->Element('attribute', **attr_kwargs)
A:networkx.readwrite.gexf.default_title->k.find(f'{{{self.NS_GEXF}}}default').get(title)
A:networkx.readwrite.gexf.default_element->Element('default')
A:networkx.readwrite.gexf.default_element.text->str(default_title)
A:networkx.readwrite.gexf.a_class->a.get('class')
A:networkx.readwrite.gexf.a_mode->a.get('mode', 'static')
A:networkx.readwrite.gexf.attributes_element->Element('attributes', **attr_kwargs)
A:networkx.readwrite.gexf.viz->self.add_attributes('node', node_element, node_data, default).pop('viz', False)
A:networkx.readwrite.gexf.color->node_xml.find(f'{{{self.NS_VIZ}}}color')
A:networkx.readwrite.gexf.size->node_xml.find(f'{{{self.NS_VIZ}}}size')
A:networkx.readwrite.gexf.thickness->node_xml.find(f'{{{self.NS_VIZ}}}thickness')
A:networkx.readwrite.gexf.shape->node_xml.find(f'{{{self.NS_VIZ}}}shape')
A:networkx.readwrite.gexf.position->node_xml.find(f'{{{self.NS_VIZ}}}position')
A:networkx.readwrite.gexf.parents->self.add_attributes('node', node_element, node_data, default).pop('parents', False)
A:networkx.readwrite.gexf.parents_element->node_xml.find(f'{{{self.NS_GEXF}}}parents')
A:networkx.readwrite.gexf.e.attrib['for']->str(p)
A:networkx.readwrite.gexf.slices->node_or_edge_data.pop('slices', False)
A:networkx.readwrite.gexf.slices_element->node_or_edge_xml.find(f'{{{self.NS_GEXF}}}slices')
A:networkx.readwrite.gexf.spells->node_or_edge_data.pop('spells', False)
A:networkx.readwrite.gexf.spells_element->node_or_edge_xml.find(f'{{{self.NS_GEXF}}}spells')
A:networkx.readwrite.gexf.document->ElementTree(self.xml)
A:networkx.readwrite.gexf.g->self.xml.find(f'{{{self.NS_GEXF}}}graph')
A:networkx.readwrite.gexf.edgedefault->graph_xml.get('defaultedgetype', None)
A:networkx.readwrite.gexf.graph_name->graph_xml.get('name', '')
A:networkx.readwrite.gexf.graph_start->graph_xml.get('start')
A:networkx.readwrite.gexf.graph_end->graph_xml.get('end')
A:networkx.readwrite.gexf.graph_mode->graph_xml.get('mode', '')
A:networkx.readwrite.gexf.self.timeformat->graph_xml.get('timeformat')
A:networkx.readwrite.gexf.attributes_elements->graph_xml.findall(f'{{{self.NS_GEXF}}}attributes')
A:networkx.readwrite.gexf.attr_class->a.get('class')
A:networkx.readwrite.gexf.(na, nd)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.(ea, ed)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.data->self.add_spells(data, edge_element)
A:networkx.readwrite.gexf.node_label->node_xml.get('label')
A:networkx.readwrite.gexf.node_pid->node_xml.get('pid', node_pid)
A:networkx.readwrite.gexf.subnodes->node_xml.find(f'{{{self.NS_GEXF}}}nodes')
A:networkx.readwrite.gexf.node_start->xml.get('start')
A:networkx.readwrite.gexf.data['start']->self.python_type[ttype](node_start)
A:networkx.readwrite.gexf.node_end->xml.get('end')
A:networkx.readwrite.gexf.data['end']->self.python_type[ttype](node_end)
A:networkx.readwrite.gexf.viz['size']->float(size.get('value'))
A:networkx.readwrite.gexf.viz['thickness']->float(thickness.get('value'))
A:networkx.readwrite.gexf.viz['shape']->node_xml.find(f'{{{self.NS_VIZ}}}shape').get('uri')
A:networkx.readwrite.gexf.parent->p.get('for')
A:networkx.readwrite.gexf.edge_direction->Element('edge', source=source_id, target=target_id, **kw).get('type')
A:networkx.readwrite.gexf.source->self.node_type(source)
A:networkx.readwrite.gexf.target->self.node_type(target)
A:networkx.readwrite.gexf.multigraph_key->self.add_spells(data, edge_element).pop('networkx_key', None)
A:networkx.readwrite.gexf.weight->Element('edge', source=source_id, target=target_id, **kw).get('weight')
A:networkx.readwrite.gexf.data['weight']->float(weight)
A:networkx.readwrite.gexf.attr_element->obj_xml.find(f'{{{self.NS_GEXF}}}attvalues')
A:networkx.readwrite.gexf.key->a.get('for')
A:networkx.readwrite.gexf.value->self.python_type[atype](default.text)
A:networkx.readwrite.gexf.mode->Element('attributes', **attr_kwargs).get('mode')
A:networkx.readwrite.gexf.title->k.get('title')
A:networkx.readwrite.gexf.atype->k.get('type')
A:networkx.readwrite.gexf.(x, y)->zip(*mapping)
A:networkx.readwrite.gexf.mapping->dict(mapping)
A:networkx.readwrite.gexf.H->networkx.relabel_nodes(G, mapping)
networkx.readwrite.GEXF
networkx.readwrite.GEXF.construct_types(self)
networkx.readwrite.GEXF.set_version(self,version)
networkx.readwrite.GEXFReader(self,node_type=None,version='1.2draft')
networkx.readwrite.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.readwrite.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.readwrite.GEXFReader.add_parents(self,data,node_xml)
networkx.readwrite.GEXFReader.add_slices(self,data,node_or_edge_xml)
networkx.readwrite.GEXFReader.add_spells(self,data,node_or_edge_xml)
networkx.readwrite.GEXFReader.add_start_end(self,data,xml)
networkx.readwrite.GEXFReader.add_viz(self,data,node_xml)
networkx.readwrite.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.readwrite.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.readwrite.GEXFReader.make_graph(self,graph_xml)
networkx.readwrite.GEXFWriter(self,graph=None,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.GEXFWriter.__str__(self)
networkx.readwrite.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.readwrite.GEXFWriter.add_edges(self,G,graph_element)
networkx.readwrite.GEXFWriter.add_graph(self,G)
networkx.readwrite.GEXFWriter.add_nodes(self,G,graph_element)
networkx.readwrite.GEXFWriter.add_parents(self,node_element,node_data)
networkx.readwrite.GEXFWriter.add_slices(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.GEXFWriter.add_spells(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.GEXFWriter.add_viz(self,element,node_data)
networkx.readwrite.GEXFWriter.alter_graph_mode_timeformat(self,start_or_end)
networkx.readwrite.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.readwrite.GEXFWriter.indent(self,elem,level=0)
networkx.readwrite.GEXFWriter.write(self,fh)
networkx.readwrite.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.gexf.GEXF
networkx.readwrite.gexf.GEXF.construct_types(self)
networkx.readwrite.gexf.GEXF.set_version(self,version)
networkx.readwrite.gexf.GEXFReader(self,node_type=None,version='1.2draft')
networkx.readwrite.gexf.GEXFReader.__init__(self,node_type=None,version='1.2draft')
networkx.readwrite.gexf.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.readwrite.gexf.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.readwrite.gexf.GEXFReader.add_parents(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.add_slices(self,data,node_or_edge_xml)
networkx.readwrite.gexf.GEXFReader.add_spells(self,data,node_or_edge_xml)
networkx.readwrite.gexf.GEXFReader.add_start_end(self,data,xml)
networkx.readwrite.gexf.GEXFReader.add_viz(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.readwrite.gexf.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.readwrite.gexf.GEXFReader.make_graph(self,graph_xml)
networkx.readwrite.gexf.GEXFWriter(self,graph=None,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.gexf.GEXFWriter.__init__(self,graph=None,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.gexf.GEXFWriter.__str__(self)
networkx.readwrite.gexf.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.readwrite.gexf.GEXFWriter.add_edges(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_graph(self,G)
networkx.readwrite.gexf.GEXFWriter.add_nodes(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_parents(self,node_element,node_data)
networkx.readwrite.gexf.GEXFWriter.add_slices(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.gexf.GEXFWriter.add_spells(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.gexf.GEXFWriter.add_viz(self,element,node_data)
networkx.readwrite.gexf.GEXFWriter.alter_graph_mode_timeformat(self,start_or_end)
networkx.readwrite.gexf.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.readwrite.gexf.GEXFWriter.indent(self,elem,level=0)
networkx.readwrite.gexf.GEXFWriter.write(self,fh)
networkx.readwrite.gexf.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.gexf.read_gexf(path,node_type=None,relabel=False,version='1.2draft')
networkx.readwrite.gexf.relabel_gexf_graph(G)
networkx.readwrite.gexf.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.2draft')
networkx.readwrite.read_gexf(path,node_type=None,relabel=False,version='1.2draft')
networkx.readwrite.relabel_gexf_graph(G)
networkx.readwrite.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.2draft')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/adjlist.py----------------------------------------
A:networkx.readwrite.adjlist.directed->networkx.empty_graph(0, create_using).is_directed()
A:networkx.readwrite.adjlist.seen->set()
A:networkx.readwrite.adjlist.G->networkx.empty_graph(0, create_using)
A:networkx.readwrite.adjlist.p->line.find(comments)
A:networkx.readwrite.adjlist.vlist->list(map(nodetype, vlist))
A:networkx.readwrite.adjlist.u->nodetype(u)
networkx.readwrite.adjlist.generate_adjlist(G,delimiter='')
networkx.readwrite.adjlist.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.readwrite.adjlist.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.adjlist.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.readwrite.generate_adjlist(G,delimiter='')
networkx.readwrite.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.readwrite.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/sparse6.py----------------------------------------
A:networkx.readwrite.sparse6.n->len(G)
A:networkx.readwrite.sparse6.edges->sorted(((max(u, v), min(u, v)) for (u, v) in G.edges()))
A:networkx.readwrite.sparse6.(n, data)->data_to_n(chars)
A:networkx.readwrite.sparse6.chunks->iter(data)
A:networkx.readwrite.sparse6.d->next(chunks)
A:networkx.readwrite.sparse6.G->networkx.convert_node_labels_to_integers(G, ordering='sorted')
A:networkx.readwrite.sparse6.line->line.strip().strip()
networkx.readwrite._generate_sparse6_bytes(G,nodes,header)
networkx.readwrite.from_sparse6_bytes(string)
networkx.readwrite.read_sparse6(path)
networkx.readwrite.sparse6._generate_sparse6_bytes(G,nodes,header)
networkx.readwrite.sparse6.from_sparse6_bytes(string)
networkx.readwrite.sparse6.read_sparse6(path)
networkx.readwrite.sparse6.to_sparse6_bytes(G,nodes=None,header=True)
networkx.readwrite.sparse6.write_sparse6(G,path,nodes=None,header=True)
networkx.readwrite.to_sparse6_bytes(G,nodes=None,header=True)
networkx.readwrite.write_sparse6(G,path,nodes=None,header=True)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/multiline_adjlist.py----------------------------------------
A:networkx.readwrite.multiline_adjlist.deg->int(deg)
A:networkx.readwrite.multiline_adjlist.seen->set()
A:networkx.readwrite.multiline_adjlist.G->networkx.empty_graph(0, create_using)
A:networkx.readwrite.multiline_adjlist.p->next(lines).find(comments)
A:networkx.readwrite.multiline_adjlist.(u, deg)->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.u->nodetype(u)
A:networkx.readwrite.multiline_adjlist.line->next(lines)
A:networkx.readwrite.multiline_adjlist.vlist->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.numb->len(vlist)
A:networkx.readwrite.multiline_adjlist.v->nodetype(v)
A:networkx.readwrite.multiline_adjlist.data->''.join(vlist)
A:networkx.readwrite.multiline_adjlist.edgedata->literal_eval(data)
networkx.readwrite.generate_multiline_adjlist(G,delimiter='')
networkx.readwrite.multiline_adjlist.generate_multiline_adjlist(G,delimiter='')
networkx.readwrite.multiline_adjlist.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.readwrite.multiline_adjlist.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.multiline_adjlist.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')
networkx.readwrite.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.readwrite.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/leda.py----------------------------------------
A:networkx.readwrite.leda.G->networkx.Graph()
A:networkx.readwrite.leda.lines->iter([line.rstrip('\n') for line in lines if not (line.startswith('#') or line.startswith('\n') or line == '')])
A:networkx.readwrite.leda.du->int(next(lines))
A:networkx.readwrite.leda.n->int(next(lines))
A:networkx.readwrite.leda.symbol->str(i)
A:networkx.readwrite.leda.m->int(next(lines))
A:networkx.readwrite.leda.(s, t, reversal, label)->next(lines).split()
networkx.readwrite.leda.parse_leda(lines)
networkx.readwrite.leda.read_leda(path,encoding='UTF-8')
networkx.readwrite.parse_leda(lines)
networkx.readwrite.read_leda(path,encoding='UTF-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/edgelist.py----------------------------------------
A:networkx.readwrite.edgelist.G->networkx.empty_graph(0, create_using)
A:networkx.readwrite.edgelist.p->line.find(comments)
A:networkx.readwrite.edgelist.s->line.strip().split(delimiter)
A:networkx.readwrite.edgelist.u->nodetype(u)
A:networkx.readwrite.edgelist.v->nodetype(v)
A:networkx.readwrite.edgelist.edgedata_str->' '.join(d)
A:networkx.readwrite.edgelist.edgedata->dict(literal_eval(edgedata_str.strip()))
A:networkx.readwrite.edgelist.edge_value->edge_type(edge_value)
networkx.readwrite.edgelist.generate_edgelist(G,delimiter='',data=True)
networkx.readwrite.edgelist.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.readwrite.edgelist.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.readwrite.edgelist.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.edgelist.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.readwrite.edgelist.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.readwrite.generate_edgelist(G,delimiter='',data=True)
networkx.readwrite.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.readwrite.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.readwrite.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.readwrite.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_adjlist.py----------------------------------------
A:networkx.readwrite.tests.test_adjlist.cls.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_adjlist.cls.DG->networkx.DiGraph(cls.G)
A:networkx.readwrite.tests.test_adjlist.cls.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_adjlist.cls.XDG->networkx.MultiDiGraph(cls.XG)
A:networkx.readwrite.tests.test_adjlist.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_adjlist.G->networkx.path_graph(3)
A:networkx.readwrite.tests.test_adjlist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_adjlist.H->networkx.read_multiline_adjlist(fh, nodetype=int, delimiter=':')
A:networkx.readwrite.tests.test_adjlist.H2->networkx.read_multiline_adjlist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_adjlist.fh->io.BytesIO()
networkx.readwrite.tests.test_TestAdjlist
networkx.readwrite.tests.test_TestAdjlist.setup_class(cls)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_delimiter(self)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_graph(self)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_integers(self)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_multidigraph(self)
networkx.readwrite.tests.test_TestAdjlist.test_adjlist_multigraph(self)
networkx.readwrite.tests.test_TestAdjlist.test_latin1(self)
networkx.readwrite.tests.test_TestAdjlist.test_latin1_err(self)
networkx.readwrite.tests.test_TestAdjlist.test_parse_adjlist(self)
networkx.readwrite.tests.test_TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.readwrite.tests.test_TestAdjlist.test_unicode(self)
networkx.readwrite.tests.test_TestMultilineAdjlist
networkx.readwrite.tests.test_TestMultilineAdjlist.setup_class(cls)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_delimiter(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)
networkx.readwrite.tests.test_TestMultilineAdjlist.test_parse_multiline_adjlist(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist
networkx.readwrite.tests.test_adjlist.TestAdjlist.setup_class(cls)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_delimiter(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_err(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_parse_adjlist(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setup_class(cls)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_delimiter(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_parse_multiline_adjlist(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_p2g.py----------------------------------------
A:networkx.readwrite.tests.test_p2g.cls.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_p2g.cls.DG->networkx.DiGraph(cls.G)
A:networkx.readwrite.tests.test_p2g.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_p2g.G->networkx.DiGraph()
A:networkx.readwrite.tests.test_p2g.fh->io.BytesIO()
A:networkx.readwrite.tests.test_p2g.r->io.BytesIO().read()
A:networkx.readwrite.tests.test_p2g.H->read_p2g(fh)
networkx.readwrite.tests.test_p2g.TestP2G
networkx.readwrite.tests.test_p2g.TestP2G.setup_class(cls)
networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_gml.py----------------------------------------
A:networkx.readwrite.tests.test_gml.G->networkx.path_graph(2)
A:networkx.readwrite.tests.test_gml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_gml.fh->io.BytesIO(data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gml.Gin->networkx.read_gml(fname, label='label')
A:networkx.readwrite.tests.test_gml.data->tempfile.NamedTemporaryFile().read().strip().decode('ascii')
A:networkx.readwrite.tests.test_gml.fobj->tempfile.NamedTemporaryFile()
A:networkx.readwrite.tests.test_gml.attrs->dict(enumerate(special_floats))
A:networkx.readwrite.tests.test_gml.edges->list(G.edges)
A:networkx.readwrite.tests.test_gml.graph->networkx.read_gml(f)
A:networkx.readwrite.tests.test_gml.gml->'\n'.join(nx.generate_gml(G))
A:networkx.readwrite.tests.test_gml.G.graph['data']->frozenset([1, 2, 3])
A:networkx.readwrite.tests.test_gml.G2->networkx.read_gml(fname)
A:networkx.readwrite.tests.test_gml._file_handle->io.BytesIO()
A:networkx.readwrite.tests.test_gml.g->networkx.Graph()
A:networkx.readwrite.tests.test_gml.result->io.BytesIO().read().decode()
A:networkx.readwrite.tests.test_gml.f->io.BytesIO()
A:networkx.readwrite.tests.test_gml.H->networkx.read_gml(f, destringizer=int)
networkx.readwrite.tests.test_TestGraph
networkx.readwrite.tests.test_TestGraph.setup_class(cls)
networkx.readwrite.tests.test_TestGraph.test_data_types(self)
networkx.readwrite.tests.test_TestGraph.test_escape_unescape(self)
networkx.readwrite.tests.test_TestGraph.test_exceptions(self)
networkx.readwrite.tests.test_TestGraph.test_float_label(self)
networkx.readwrite.tests.test_TestGraph.test_graph_types(self)
networkx.readwrite.tests.test_TestGraph.test_label_kwarg(self)
networkx.readwrite.tests.test_TestGraph.test_labels_are_strings(self)
networkx.readwrite.tests.test_TestGraph.test_name(self)
networkx.readwrite.tests.test_TestGraph.test_outofrange_integers(self)
networkx.readwrite.tests.test_TestGraph.test_parse_gml(self)
networkx.readwrite.tests.test_TestGraph.test_parse_gml_cytoscape_bug(self)
networkx.readwrite.tests.test_TestGraph.test_quotes(self)
networkx.readwrite.tests.test_TestGraph.test_read_gml(self)
networkx.readwrite.tests.test_TestGraph.test_relabel_duplicate(self)
networkx.readwrite.tests.test_TestGraph.test_special_float_label(self)
networkx.readwrite.tests.test_TestGraph.test_tuplelabels(self)
networkx.readwrite.tests.test_TestGraph.test_unicode_node(self)
networkx.readwrite.tests.test_TestPropertyLists
networkx.readwrite.tests.test_TestPropertyLists.test_reading_graph_with_list_property(self)
networkx.readwrite.tests.test_TestPropertyLists.test_reading_graph_with_single_element_list_property(self)
networkx.readwrite.tests.test_TestPropertyLists.test_writing_graph_with_multi_element_property_list(self)
networkx.readwrite.tests.test_TestPropertyLists.test_writing_graph_with_one_element_property_list(self)
networkx.readwrite.tests.test_byte_file()
networkx.readwrite.tests.test_gml.TestGraph
networkx.readwrite.tests.test_gml.TestGraph.setup_class(cls)
networkx.readwrite.tests.test_gml.TestGraph.test_data_types(self)
networkx.readwrite.tests.test_gml.TestGraph.test_escape_unescape(self)
networkx.readwrite.tests.test_gml.TestGraph.test_exceptions(self)
networkx.readwrite.tests.test_gml.TestGraph.test_float_label(self)
networkx.readwrite.tests.test_gml.TestGraph.test_graph_types(self)
networkx.readwrite.tests.test_gml.TestGraph.test_label_kwarg(self)
networkx.readwrite.tests.test_gml.TestGraph.test_labels_are_strings(self)
networkx.readwrite.tests.test_gml.TestGraph.test_name(self)
networkx.readwrite.tests.test_gml.TestGraph.test_outofrange_integers(self)
networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml_cytoscape_bug(self)
networkx.readwrite.tests.test_gml.TestGraph.test_quotes(self)
networkx.readwrite.tests.test_gml.TestGraph.test_read_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate(self)
networkx.readwrite.tests.test_gml.TestGraph.test_special_float_label(self)
networkx.readwrite.tests.test_gml.TestGraph.test_tuplelabels(self)
networkx.readwrite.tests.test_gml.TestGraph.test_unicode_node(self)
networkx.readwrite.tests.test_gml.TestPropertyLists
networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_list_property(self)
networkx.readwrite.tests.test_gml.TestPropertyLists.test_reading_graph_with_single_element_list_property(self)
networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_multi_element_property_list(self)
networkx.readwrite.tests.test_gml.TestPropertyLists.test_writing_graph_with_one_element_property_list(self)
networkx.readwrite.tests.test_gml.byte_file()
networkx.readwrite.tests.test_gml.test_stringize_empty_list_tuple(coll)
networkx.readwrite.tests.test_test_stringize_empty_list_tuple(coll)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_sparse6.py----------------------------------------
A:networkx.readwrite.tests.test_sparse6.G->networkx.complete_bipartite_graph(6, 9)
A:networkx.readwrite.tests.test_sparse6.M->networkx.from_sparse6_bytes(multigraph_data)
A:networkx.readwrite.tests.test_sparse6.fh->open(fullfilename, mode='rb')
A:networkx.readwrite.tests.test_sparse6.Gin->networkx.read_sparse6(fh)
A:networkx.readwrite.tests.test_sparse6.glist->networkx.read_sparse6(fh)
A:networkx.readwrite.tests.test_sparse6.result->BytesIO()
A:networkx.readwrite.tests.test_sparse6.m->min(2 * i, i * i // 2)
A:networkx.readwrite.tests.test_sparse6.g->networkx.random_graphs.gnm_random_graph(i, m, seed=i)
A:networkx.readwrite.tests.test_sparse6.gstr->gstr.getvalue().rstrip().getvalue().rstrip()
A:networkx.readwrite.tests.test_sparse6.g2->networkx.from_sparse6_bytes(gstr)
networkx.readwrite.tests.test_TestSparseGraph6
networkx.readwrite.tests.test_TestSparseGraph6.test_from_bytes_multigraph_graph(self)
networkx.readwrite.tests.test_TestSparseGraph6.test_from_sparse6_bytes(self)
networkx.readwrite.tests.test_TestSparseGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_TestSparseGraph6.test_read_sparse6(self)
networkx.readwrite.tests.test_TestWriteSparse6
networkx.readwrite.tests.test_TestWriteSparse6.test_complete_bipartite(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_complete_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_empty_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_large_empty_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_no_directed_graphs(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_no_header(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_null_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_padding(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_read_write_inverse(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_trivial_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_very_large_empty_graph(self)
networkx.readwrite.tests.test_TestWriteSparse6.test_write_path(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_bytes_multigraph_graph(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_from_sparse6_bytes(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_sparse6(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_bipartite(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_complete_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_empty_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_large_empty_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_directed_graphs(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_no_header(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_null_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_padding(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_read_write_inverse(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_trivial_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_very_large_empty_graph(self)
networkx.readwrite.tests.test_sparse6.TestWriteSparse6.test_write_path(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_gexf.py----------------------------------------
A:networkx.readwrite.tests.test_gexf.cls.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.cls.simple_directed_fh->io.BytesIO(cls.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.cls.attribute_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.cls.attribute_fh->io.BytesIO(cls.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.cls.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_gexf.cls.simple_undirected_fh->io.BytesIO(cls.simple_undirected_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.H->networkx.read_gexf(fh, node_type=int)
A:networkx.readwrite.tests.test_gexf.fh->io.BytesIO()
A:networkx.readwrite.tests.test_gexf.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_gexf.he->sorted(H.edges(data=True))
A:networkx.readwrite.tests.test_gexf.G->networkx.Graph()
A:networkx.readwrite.tests.test_gexf.obtained->'\n'.join(nx.generate_gexf(G))
A:networkx.readwrite.tests.test_gexf.np->pytest.importorskip('numpy')
A:networkx.readwrite.tests.test_gexf.G[0][1]['edge-number']->pytest.importorskip('numpy').float64(1.1)
A:networkx.readwrite.tests.test_gexf.filetext->io.BytesIO().read()
networkx.readwrite.tests.test_TestGEXF
networkx.readwrite.tests.test_TestGEXF.setup_class(cls)
networkx.readwrite.tests.test_TestGEXF.test_add_parent(self)
networkx.readwrite.tests.test_TestGEXF.test_bool(self)
networkx.readwrite.tests.test_TestGEXF.test_default_attribute(self)
networkx.readwrite.tests.test_TestGEXF.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_TestGEXF.test_dynamic_mode(self)
networkx.readwrite.tests.test_TestGEXF.test_edge_id_construct(self)
networkx.readwrite.tests.test_TestGEXF.test_key_raises(self)
networkx.readwrite.tests.test_TestGEXF.test_missing_viz_attributes(self)
networkx.readwrite.tests.test_TestGEXF.test_multigraph_with_missing_attributes(self)
networkx.readwrite.tests.test_TestGEXF.test_numpy_type(self)
networkx.readwrite.tests.test_TestGEXF.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_TestGEXF.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_TestGEXF.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_TestGEXF.test_relabel(self)
networkx.readwrite.tests.test_TestGEXF.test_serialize_ints_to_strings(self)
networkx.readwrite.tests.test_TestGEXF.test_simple_list(self)
networkx.readwrite.tests.test_TestGEXF.test_slice_and_spell(self)
networkx.readwrite.tests.test_TestGEXF.test_specials(self)
networkx.readwrite.tests.test_TestGEXF.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_TestGEXF.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_TestGEXF.test_write_with_node_attributes(self)
networkx.readwrite.tests.test_gexf.TestGEXF
networkx.readwrite.tests.test_gexf.TestGEXF.setup_class(cls)
networkx.readwrite.tests.test_gexf.TestGEXF.test_add_parent(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_bool(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_dynamic_mode(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_edge_id_construct(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_key_raises(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_missing_viz_attributes(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_multigraph_with_missing_attributes(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_numpy_type(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_serialize_ints_to_strings(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_simple_list(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_slice_and_spell(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_specials(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_write_with_node_attributes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_edgelist.py----------------------------------------
A:networkx.readwrite.tests.test_edgelist.edges_no_data->textwrap.dedent('\n    # comment line\n    1 2\n    # comment line\n    2 3\n    ')
A:networkx.readwrite.tests.test_edgelist.edges_with_values->textwrap.dedent('\n    # comment line\n    1 2 2.0\n    # comment line\n    2 3 3.0\n    ')
A:networkx.readwrite.tests.test_edgelist.edges_with_weight->textwrap.dedent("\n    # comment line\n    1 2 {'weight':2.0}\n    # comment line\n    2 3 {'weight':3.0}\n    ")
A:networkx.readwrite.tests.test_edgelist.edges_with_multiple_attrs->textwrap.dedent("\n    # comment line\n    1 2 {'weight':2.0, 'color':'green'}\n    # comment line\n    2 3 {'weight':3.0, 'color':'red'}\n    ")
A:networkx.readwrite.tests.test_edgelist.edges_with_multiple_attrs_csv->textwrap.dedent("\n    # comment line\n    1, 2, {'weight':2.0, 'color':'green'}\n    # comment line\n    2, 3, {'weight':3.0, 'color':'red'}\n    ")
A:networkx.readwrite.tests.test_edgelist.bytesIO->io.BytesIO(data.encode('utf-8'))
A:networkx.readwrite.tests.test_edgelist.G->networkx.convert_node_labels_to_integers(self.G)
A:networkx.readwrite.tests.test_edgelist.H->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_edgelist.cls.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_edgelist.cls.DG->networkx.DiGraph(cls.G)
A:networkx.readwrite.tests.test_edgelist.cls.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_edgelist.cls.XDG->networkx.MultiDiGraph(cls.XG)
A:networkx.readwrite.tests.test_edgelist.fh->io.BytesIO()
A:networkx.readwrite.tests.test_edgelist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_edgelist.H2->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
networkx.readwrite.tests.test_TestEdgelist
networkx.readwrite.tests.test_TestEdgelist.setup_class(cls)
networkx.readwrite.tests.test_TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_TestEdgelist.test_edgelist_graph(self)
networkx.readwrite.tests.test_TestEdgelist.test_edgelist_integers(self)
networkx.readwrite.tests.test_TestEdgelist.test_edgelist_multidigraph(self)
networkx.readwrite.tests.test_TestEdgelist.test_edgelist_multigraph(self)
networkx.readwrite.tests.test_TestEdgelist.test_latin1(self)
networkx.readwrite.tests.test_TestEdgelist.test_latin1_issue(self)
networkx.readwrite.tests.test_TestEdgelist.test_unicode(self)
networkx.readwrite.tests.test_TestEdgelist.test_write_edgelist_1(self)
networkx.readwrite.tests.test_TestEdgelist.test_write_edgelist_2(self)
networkx.readwrite.tests.test_TestEdgelist.test_write_edgelist_3(self)
networkx.readwrite.tests.test_TestEdgelist.test_write_edgelist_4(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist
networkx.readwrite.tests.test_edgelist.TestEdgelist.setup_class(cls)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_issue(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4(self)
networkx.readwrite.tests.test_edgelist.example_graph()
networkx.readwrite.tests.test_edgelist.test_comments_None()
networkx.readwrite.tests.test_edgelist.test_parse_edgelist()
networkx.readwrite.tests.test_edgelist.test_parse_edgelist_no_data(example_graph)
networkx.readwrite.tests.test_edgelist.test_parse_edgelist_with_data_dict(example_graph)
networkx.readwrite.tests.test_edgelist.test_parse_edgelist_with_data_list(example_graph)
networkx.readwrite.tests.test_edgelist.test_read_edgelist_no_data(data,extra_kwargs)
networkx.readwrite.tests.test_edgelist.test_read_edgelist_with_data(data,extra_kwargs,expected)
networkx.readwrite.tests.test_edgelist.test_read_weighted_edgelist()
networkx.readwrite.tests.test_example_graph()
networkx.readwrite.tests.test_test_comments_None()
networkx.readwrite.tests.test_test_parse_edgelist()
networkx.readwrite.tests.test_test_parse_edgelist_no_data(example_graph)
networkx.readwrite.tests.test_test_parse_edgelist_with_data_dict(example_graph)
networkx.readwrite.tests.test_test_parse_edgelist_with_data_list(example_graph)
networkx.readwrite.tests.test_test_read_edgelist_no_data(data,extra_kwargs)
networkx.readwrite.tests.test_test_read_edgelist_with_data(data,extra_kwargs,expected)
networkx.readwrite.tests.test_test_read_weighted_edgelist()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_text.py----------------------------------------
A:networkx.readwrite.tests.test_text.graph->networkx.disjoint_union_all([nx.balanced_tree(r=2, h=1, create_using=nx.DiGraph), nx.balanced_tree(r=1, h=2, create_using=nx.DiGraph), nx.balanced_tree(r=2, h=1, create_using=nx.DiGraph)])
A:networkx.readwrite.tests.test_text.node_target->dedent('\n        ╙── 0\n            ├─╼ 1\n            │\xa0\xa0 ├─╼ 3\n            │\xa0\xa0 └─╼ 4\n            └─╼ 2\n                ├─╼ 5\n                └─╼ 6\n        ').strip()
A:networkx.readwrite.tests.test_text.label_target->dedent('\n        ╙── node_a\n            ├─╼ node_b\n            │\xa0\xa0 ├─╼ node_d\n            │\xa0\xa0 └─╼ node_e\n            └─╼ node_c\n                ├─╼ node_f\n                └─╼ node_g\n        ').strip()
A:networkx.readwrite.tests.test_text.ret->networkx.forest_str(graph, sources=[2])
A:networkx.readwrite.tests.test_text.tree1->networkx.balanced_tree(r=2, h=2, create_using=nx.Graph)
A:networkx.readwrite.tests.test_text.tree2->networkx.relabel_nodes(tree2, {n: n + len(tree1) for n in tree2.nodes})
A:networkx.readwrite.tests.test_text.forest->networkx.union(tree1, tree2)
A:networkx.readwrite.tests.test_text.target->dedent('\n        +-- 0\n        :\xa0\xa0 |-- 1\n        :\xa0\xa0 |\xa0\xa0 |-- 3\n        :\xa0\xa0 |\xa0\xa0 L-- 4\n        :\xa0\xa0 L-- 2\n        :\xa0\xa0     |-- 5\n        :\xa0\xa0     L-- 6\n        +-- 7\n            |-- 8\n            |\xa0\xa0 |-- 10\n            |\xa0\xa0 L-- 11\n            L-- 9\n                |-- 12\n                L-- 13\n        ').strip()
A:networkx.readwrite.tests.test_text.tree3->networkx.balanced_tree(r=2, h=2, create_using=nx.DiGraph)
A:networkx.readwrite.tests.test_text.node_target0->dedent('\n        ╙── 0\n            ├── 1\n            │\xa0\xa0 ├── 3\n            │\xa0\xa0 └── 4\n            └── 2\n                ├── 5\n                └── 6\n        ').strip()
A:networkx.readwrite.tests.test_text.node_target2->dedent('\n        ╙── 2\n            ├── 0\n            │\xa0\xa0 └── 1\n            │\xa0\xa0     ├── 3\n            │\xa0\xa0     └── 4\n            ├── 5\n            └── 6\n        ').strip()
A:networkx.readwrite.tests.test_text.ugraph->networkx.complete_graph(3, create_using=nx.Graph)
A:networkx.readwrite.tests.test_text.dgraph->networkx.complete_graph(3, create_using=nx.DiGraph)
A:networkx.readwrite.tests.test_text.target1->dedent('\n        ╟── 0\n        ╎\xa0\xa0 ├─╼ 1\n        ╎\xa0\xa0 └─╼ 2\n        ╟── 3\n        ╎\xa0\xa0 └─╼ 4\n        ╎\xa0\xa0     └─╼ 5\n        ╟── 6\n        ╎\xa0\xa0 ├─╼ 7\n        ╎\xa0\xa0 └─╼ 8\n        ').strip()
A:networkx.readwrite.tests.test_text.target2->dedent('\n        ╟── 0\n        ╎\xa0\xa0 ├─╼ 1\n        ╎\xa0\xa0 └─╼ 2\n        ╟── 3\n        ╎\xa0\xa0 └─╼ 4\n        ╎\xa0\xa0     └─╼ 5\n        ╙── 6\n            ├─╼ 7\n            └─╼ 8\n        ').strip()
A:networkx.readwrite.tests.test_text.got1->chr(10).join(lines)
A:networkx.readwrite.tests.test_text.got2->chr(10).join(lines)
networkx.readwrite.tests.test_test_directed_multi_tree_forest()
networkx.readwrite.tests.test_test_directed_tree_str()
networkx.readwrite.tests.test_test_empty_graph()
networkx.readwrite.tests.test_test_forest_str_errors()
networkx.readwrite.tests.test_test_overspecified_sources()
networkx.readwrite.tests.test_test_undirected_multi_tree_forest()
networkx.readwrite.tests.test_test_undirected_tree_str()
networkx.readwrite.tests.test_text.test_directed_multi_tree_forest()
networkx.readwrite.tests.test_text.test_directed_tree_str()
networkx.readwrite.tests.test_text.test_empty_graph()
networkx.readwrite.tests.test_text.test_forest_str_errors()
networkx.readwrite.tests.test_text.test_overspecified_sources()
networkx.readwrite.tests.test_text.test_undirected_multi_tree_forest()
networkx.readwrite.tests.test_text.test_undirected_tree_str()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_leda.py----------------------------------------
A:networkx.readwrite.tests.test_leda.G->networkx.parse_leda(data)
A:networkx.readwrite.tests.test_leda.fh->io.BytesIO()
A:networkx.readwrite.tests.test_leda.Gin->networkx.read_leda(fh)
networkx.readwrite.tests.test_TestLEDA
networkx.readwrite.tests.test_TestLEDA.test_parse_leda(self)
networkx.readwrite.tests.test_TestLEDA.test_read_LEDA(self)
networkx.readwrite.tests.test_leda.TestLEDA
networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda(self)
networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_graphml.py----------------------------------------
A:networkx.readwrite.tests.test_graphml.cls.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_graphml.cls.simple_directed_fh->io.BytesIO(cls.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.cls.attribute_graph->networkx.DiGraph(id='G')
A:networkx.readwrite.tests.test_graphml.cls.attribute_fh->io.BytesIO(cls.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.cls.node_attribute_default_graph->networkx.DiGraph(id='G')
A:networkx.readwrite.tests.test_graphml.cls.node_attribute_default_fh->io.BytesIO(cls.node_attribute_default_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.cls.attribute_named_key_ids_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_graphml.fh->io.BytesIO()
A:networkx.readwrite.tests.test_graphml.cls.attribute_numeric_type_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_graphml.cls.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_graphml.cls.undirected_multigraph->networkx.MultiGraph()
A:networkx.readwrite.tests.test_graphml.cls.undirected_multigraph_no_multiedge->networkx.MultiGraph()
A:networkx.readwrite.tests.test_graphml.cls.multigraph_only_ids_for_multiedges->networkx.MultiGraph()
A:networkx.readwrite.tests.test_graphml.H->networkx.read_graphml(fh)
A:networkx.readwrite.tests.test_graphml.PG->networkx.parse_graphml(self.attribute_data)
A:networkx.readwrite.tests.test_graphml.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_graphml.he->sorted(PG.edges(data=True))
A:networkx.readwrite.tests.test_graphml.G->networkx.Graph()
A:networkx.readwrite.tests.test_graphml.HH->networkx.parse_graphml(string_fh, node_type=str, edge_key_type=str)
A:networkx.readwrite.tests.test_graphml.string_fh->io.BytesIO().read()
A:networkx.readwrite.tests.test_graphml.writer->staticmethod(nx.write_graphml_xml)
A:networkx.readwrite.tests.test_graphml._->pytest.importorskip('lxml.etree')
A:networkx.readwrite.tests.test_graphml.gmlw->GraphMLWriter()
A:networkx.readwrite.tests.test_graphml.xml->parse(fh)
A:networkx.readwrite.tests.test_graphml.children->list(tree.getroot())
A:networkx.readwrite.tests.test_graphml.default_behavior_fh->io.BytesIO()
A:networkx.readwrite.tests.test_graphml.named_key_ids_behavior_fh->io.BytesIO()
A:networkx.readwrite.tests.test_graphml.J->networkx.parse_graphml(graphml_data)
A:networkx.readwrite.tests.test_graphml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_graphml.np->pytest.importorskip('numpy')
A:networkx.readwrite.tests.test_graphml.wt->pytest.importorskip('numpy').float32(3.4)
A:networkx.readwrite.tests.test_graphml.generator->networkx.generate_graphml(G, edge_id_from_attribute='eid')
A:networkx.readwrite.tests.test_graphml.tree->parse(fname)
A:networkx.readwrite.tests.test_graphml.data->''.join(generator)
A:networkx.readwrite.tests.test_graphml.graphml_data->''.join(generator)
A:networkx.readwrite.tests.test_graphml.G.edges['n1', 'n1']['weight']->pytest.importorskip('numpy').float64(1.1)
A:networkx.readwrite.tests.test_graphml.a->dict(a='{"a": "123"}')
A:networkx.readwrite.tests.test_graphml.sa->json.dumps(a)
networkx.readwrite.tests.test_BaseGraphML
networkx.readwrite.tests.test_BaseGraphML.setup_class(cls)
networkx.readwrite.tests.test_TestReadGraphML(BaseGraphML)
networkx.readwrite.tests.test_TestReadGraphML.test_bool(self)
networkx.readwrite.tests.test_TestReadGraphML.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_TestReadGraphML.test_graphml_header_line(self)
networkx.readwrite.tests.test_TestReadGraphML.test_hyperedge_raise(self)
networkx.readwrite.tests.test_TestReadGraphML.test_key_raise(self)
networkx.readwrite.tests.test_TestReadGraphML.test_long_attribute_type(self)
networkx.readwrite.tests.test_TestReadGraphML.test_multigraph_keys(self)
networkx.readwrite.tests.test_TestReadGraphML.test_node_default_attribute_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_preserve_multi_edge_data(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_attributes_with_groups(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_undirected_multigraph_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_undirected_multigraph_no_multiedge_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_read_undirected_multigraph_only_ids_for_multiedges_graphml(self)
networkx.readwrite.tests.test_TestReadGraphML.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_TestReadGraphML.test_yfiles_extension(self)
networkx.readwrite.tests.test_TestWriteGraphML(BaseGraphML)
networkx.readwrite.tests.test_TestWriteGraphML.setup_class(cls)
networkx.readwrite.tests.test_TestWriteGraphML.test_GraphMLWriter_add_graphs(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_default_attribute(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_mixed_int_type_number_attributes(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_mixed_type_attributes(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_more_multigraph_keys(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_multigraph_to_graph(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_multigraph_write_generate_edge_id_from_attribute(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_numpy_float(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_numpy_float32(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_numpy_float64(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_numpy_float64_inference(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_str_number_mixed_type_attributes(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_unicode_attributes(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_unicode_escape(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_generate_edge_id_from_attribute(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_interface(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_read_attribute_named_key_ids_graphml(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_read_attribute_numeric_type_graphml(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_TestWriteGraphML.test_write_read_simple_no_prettyprint(self)
networkx.readwrite.tests.test_TestXMLGraphML(TestWriteGraphML)
networkx.readwrite.tests.test_TestXMLGraphML.setup_class(cls)
networkx.readwrite.tests.test_graphml.BaseGraphML
networkx.readwrite.tests.test_graphml.BaseGraphML.setup_class(cls)
networkx.readwrite.tests.test_graphml.TestReadGraphML(BaseGraphML)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_bool(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_graphml_header_line(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_hyperedge_raise(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_key_raise(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_long_attribute_type(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_multigraph_keys(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_node_default_attribute_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_preserve_multi_edge_data(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_attributes_with_groups(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_no_multiedge_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_read_undirected_multigraph_only_ids_for_multiedges_graphml(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_graphml.TestReadGraphML.test_yfiles_extension(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML(BaseGraphML)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.setup_class(cls)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_GraphMLWriter_add_graphs(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_default_attribute(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_mixed_int_type_number_attributes(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_mixed_type_attributes(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_more_multigraph_keys(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_multigraph_to_graph(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_multigraph_write_generate_edge_id_from_attribute(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float32(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_numpy_float64_inference(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_str_number_mixed_type_attributes(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_attributes(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_unicode_escape(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_generate_edge_id_from_attribute(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_interface(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_named_key_ids_graphml(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_attribute_numeric_type_graphml(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestWriteGraphML.test_write_read_simple_no_prettyprint(self)
networkx.readwrite.tests.test_graphml.TestXMLGraphML(TestWriteGraphML)
networkx.readwrite.tests.test_graphml.TestXMLGraphML.setup_class(cls)
networkx.readwrite.tests.test_graphml.test_exception_for_unsupported_datatype_edge_attr()
networkx.readwrite.tests.test_graphml.test_exception_for_unsupported_datatype_graph_attr()
networkx.readwrite.tests.test_graphml.test_exception_for_unsupported_datatype_node_attr()
networkx.readwrite.tests.test_test_exception_for_unsupported_datatype_edge_attr()
networkx.readwrite.tests.test_test_exception_for_unsupported_datatype_graph_attr()
networkx.readwrite.tests.test_test_exception_for_unsupported_datatype_node_attr()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_graph6.py----------------------------------------
A:networkx.readwrite.tests.test_graph6.G->networkx.Graph([edge])
A:networkx.readwrite.tests.test_graph6.fh->BytesIO(data)
A:networkx.readwrite.tests.test_graph6.Gin->networkx.read_graph6(fh)
A:networkx.readwrite.tests.test_graph6.glist->networkx.read_graph6(fh)
A:networkx.readwrite.tests.test_graph6.result->BytesIO()
A:networkx.readwrite.tests.test_graph6.g->networkx.random_graphs.gnm_random_graph(i, i * i // 4, seed=i)
A:networkx.readwrite.tests.test_graph6.gstr->networkx.readwrite.graph6.to_graph6_bytes(G, header=False).rstrip()
A:networkx.readwrite.tests.test_graph6.f->BytesIO()
A:networkx.readwrite.tests.test_graph6.H->networkx.from_graph6_bytes(data.rstrip())
A:networkx.readwrite.tests.test_graph6.data->networkx.readwrite.graph6.to_graph6_bytes(G)
networkx.readwrite.tests.test_TestFromGraph6Bytes
networkx.readwrite.tests.test_TestFromGraph6Bytes.test_from_graph6_bytes(self)
networkx.readwrite.tests.test_TestFromGraph6Bytes.test_read_equals_from_bytes(self)
networkx.readwrite.tests.test_TestGraph6Utils
networkx.readwrite.tests.test_TestGraph6Utils.test_n_data_n_conversion(self)
networkx.readwrite.tests.test_TestReadGraph6
networkx.readwrite.tests.test_TestReadGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_TestToGraph6Bytes
networkx.readwrite.tests.test_TestToGraph6Bytes.test_complete_bipartite_graph(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_complete_graph(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_large_complete_graph(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_length(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_no_directed_or_multi_graphs(self,G)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_no_header(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_null_graph(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_relabeling(self,edge)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_roundtrip(self)
networkx.readwrite.tests.test_TestToGraph6Bytes.test_trivial_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6
networkx.readwrite.tests.test_TestWriteGraph6.test_complete_bipartite_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_complete_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_large_complete_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_length(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_no_directed_or_multi_graphs(self,G)
networkx.readwrite.tests.test_TestWriteGraph6.test_no_header(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_null_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_relabeling(self,edge)
networkx.readwrite.tests.test_TestWriteGraph6.test_roundtrip(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_trivial_graph(self)
networkx.readwrite.tests.test_TestWriteGraph6.test_write_path(self)
networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes
networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_from_graph6_bytes(self)
networkx.readwrite.tests.test_graph6.TestFromGraph6Bytes.test_read_equals_from_bytes(self)
networkx.readwrite.tests.test_graph6.TestGraph6Utils
networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_n_data_n_conversion(self)
networkx.readwrite.tests.test_graph6.TestReadGraph6
networkx.readwrite.tests.test_graph6.TestReadGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_complete_bipartite_graph(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_complete_graph(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_large_complete_graph(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_length(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_no_directed_or_multi_graphs(self,G)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_no_header(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_null_graph(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_relabeling(self,edge)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_roundtrip(self)
networkx.readwrite.tests.test_graph6.TestToGraph6Bytes.test_trivial_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_bipartite_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_complete_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_large_complete_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_length(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_directed_or_multi_graphs(self,G)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_no_header(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_null_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_relabeling(self,edge)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_roundtrip(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_trivial_graph(self)
networkx.readwrite.tests.test_graph6.TestWriteGraph6.test_write_path(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/tests/test_pajek.py----------------------------------------
A:networkx.readwrite.tests.test_pajek.cls.G->networkx.MultiDiGraph()
A:networkx.readwrite.tests.test_pajek.(fd, cls.fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_pajek.G->networkx.Graph()
A:networkx.readwrite.tests.test_pajek.Gin->networkx.read_pajek(self.fname)
A:networkx.readwrite.tests.test_pajek.fh->io.BytesIO()
A:networkx.readwrite.tests.test_pajek.H->networkx.read_pajek(fh)
networkx.readwrite.tests.test_TestPajek
networkx.readwrite.tests.test_TestPajek.setup_class(cls)
networkx.readwrite.tests.test_TestPajek.teardown_class(cls)
networkx.readwrite.tests.test_TestPajek.test_ignored_attribute(self)
networkx.readwrite.tests.test_TestPajek.test_noname(self)
networkx.readwrite.tests.test_TestPajek.test_parse_pajek(self)
networkx.readwrite.tests.test_TestPajek.test_parse_pajek_simple(self)
networkx.readwrite.tests.test_TestPajek.test_parse_pajet_mat(self)
networkx.readwrite.tests.test_TestPajek.test_read_pajek(self)
networkx.readwrite.tests.test_TestPajek.test_unicode(self)
networkx.readwrite.tests.test_TestPajek.test_write_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek
networkx.readwrite.tests.test_pajek.TestPajek.setup_class(cls)
networkx.readwrite.tests.test_pajek.TestPajek.teardown_class(cls)
networkx.readwrite.tests.test_pajek.TestPajek.test_ignored_attribute(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_noname(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajet_mat(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_unicode(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_write_pajek(self)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/node_link.py----------------------------------------
A:networkx.readwrite.json_graph.node_link._attrs->dict(source='source', target='target', name='id', key='key', link='links')
A:networkx.readwrite.json_graph.node_link.source->attrs.get('source', 'source')
A:networkx.readwrite.json_graph.node_link.target->attrs.get('target', 'target')
A:networkx.readwrite.json_graph.node_link.name->attrs.get('name', 'name')
A:networkx.readwrite.json_graph.node_link.key->attrs.get('key', 'key')
A:networkx.readwrite.json_graph.node_link.link->attrs.get('link', 'links')
A:networkx.readwrite.json_graph.node_link.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.node_link.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.node_link.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.node_link.graph.graph->data.get('graph', {})
A:networkx.readwrite.json_graph.node_link.c->count()
A:networkx.readwrite.json_graph.node_link.node->_to_tuple(d.get(name, next(c)))
A:networkx.readwrite.json_graph.node_link.ky->d.get(key, None)
networkx.readwrite._to_tuple(x)
networkx.readwrite.json_graph.node_link._to_tuple(x)
networkx.readwrite.json_graph.node_link.node_link_data(G,attrs=None,*,source='source',target='target',name='id',key='key',link='links')
networkx.readwrite.json_graph.node_link.node_link_graph(data,directed=False,multigraph=True,attrs=None,*,source='source',target='target',name='id',key='key',link='links')
networkx.readwrite.node_link_data(G,attrs=None,*,source='source',target='target',name='id',key='key',link='links')
networkx.readwrite.node_link_graph(data,directed=False,multigraph=True,attrs=None,*,source='source',target='target',name='id',key='key',link='links')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/cytoscape.py----------------------------------------
A:networkx.readwrite.json_graph.cytoscape.jsondata['directed']->G.is_directed()
A:networkx.readwrite.json_graph.cytoscape.jsondata['multigraph']->G.is_multigraph()
A:networkx.readwrite.json_graph.cytoscape.multigraph->data.get('multigraph')
A:networkx.readwrite.json_graph.cytoscape.directed->data.get('directed')
A:networkx.readwrite.json_graph.cytoscape.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.cytoscape.graph.graph->dict(data.get('data'))
A:networkx.readwrite.json_graph.cytoscape.node_data->d['data'].copy()
A:networkx.readwrite.json_graph.cytoscape.node_data[name]->d['data'].get(name)
A:networkx.readwrite.json_graph.cytoscape.node_data[ident]->d['data'].get(ident)
A:networkx.readwrite.json_graph.cytoscape.edge_data->d['data'].copy()
A:networkx.readwrite.json_graph.cytoscape.key->d['data'].get('key', 0)
networkx.readwrite.cytoscape_data(G,name='name',ident='id')
networkx.readwrite.cytoscape_graph(data,name='name',ident='id')
networkx.readwrite.json_graph.cytoscape.cytoscape_data(G,name='name',ident='id')
networkx.readwrite.json_graph.cytoscape.cytoscape_graph(data,name='name',ident='id')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.adjacency._attrs->dict(id='id', key='key')
A:networkx.readwrite.json_graph.adjacency.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.adjacency.data['directed']->G.is_directed()
A:networkx.readwrite.json_graph.adjacency.data['graph']->list(G.graph.items())
A:networkx.readwrite.json_graph.adjacency.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.adjacency.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.adjacency.graph.graph->dict(data.get('graph', []))
A:networkx.readwrite.json_graph.adjacency.node_data->d.copy()
A:networkx.readwrite.json_graph.adjacency.node->d.copy().pop(id_)
A:networkx.readwrite.json_graph.adjacency.target_data->tdata.copy()
A:networkx.readwrite.json_graph.adjacency.target->tdata.copy().pop(id_)
A:networkx.readwrite.json_graph.adjacency.ky->tdata.copy().pop(key, None)
networkx.readwrite.adjacency_data(G,attrs=_attrs)
networkx.readwrite.adjacency_graph(data,directed=False,multigraph=True,attrs=_attrs)
networkx.readwrite.json_graph.adjacency.adjacency_data(G,attrs=_attrs)
networkx.readwrite.json_graph.adjacency.adjacency_graph(data,directed=False,multigraph=True,attrs=_attrs)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tree.py----------------------------------------
A:networkx.readwrite.json_graph.tree.d->dict(chain(G.nodes[child].items(), [(ident, child)]))
A:networkx.readwrite.json_graph.tree.c->add_children(child, G)
A:networkx.readwrite.json_graph.tree.data->dict(chain(G.nodes[root].items(), [(ident, root)]))
A:networkx.readwrite.json_graph.tree.data[children]->add_children(root, G)
A:networkx.readwrite.json_graph.tree.graph->networkx.DiGraph()
A:networkx.readwrite.json_graph.tree.grandchildren->dict(chain(G.nodes[root].items(), [(ident, root)])).get(children, [])
A:networkx.readwrite.json_graph.tree.children_->dict(chain(G.nodes[root].items(), [(ident, root)])).get(children, [])
networkx.readwrite.json_graph.tree.tree_data(G,root,ident='id',children='children')
networkx.readwrite.json_graph.tree.tree_graph(data,ident='id',children='children')
networkx.readwrite.tree_data(G,root,ident='id',children='children')
networkx.readwrite.tree_graph(data,ident='id',children='children')


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tests/test_node_link.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_node_link.G->networkx.path_graph(4)
A:networkx.readwrite.json_graph.tests.test_node_link.data->node_link_data(G)
A:networkx.readwrite.json_graph.tests.test_node_link.H->node_link_graph(node_link_data(G, **attrs), multigraph=False, **attrs)
A:networkx.readwrite.json_graph.tests.test_node_link.attrs->dict(source='c_source', target='c_target', name='c_id', key='c_key', link='c_links')
A:networkx.readwrite.json_graph.tests.test_node_link.d->node_link_data(G)
A:networkx.readwrite.json_graph.tests.test_node_link.dumped_d->json.dumps(d)
A:networkx.readwrite.json_graph.tests.test_node_link.dd->json.loads(dumped_d)
A:networkx.readwrite.json_graph.tests.test_node_link.s->node_link_data(G)
A:networkx.readwrite.json_graph.tests.test_node_link.output->json.dumps(s, ensure_ascii=False)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_custom_attrs(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_custom_attrs_dep(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception_dep(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_with_tuple_nodes(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multigraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_string_ids(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_unicode_keys(self)
networkx.readwrite.json_graph.tests.test_node_link.test_attrs_deprecation(recwarn)
networkx.readwrite.tests.test_TestNodeLink
networkx.readwrite.tests.test_TestNodeLink.test_custom_attrs(self)
networkx.readwrite.tests.test_TestNodeLink.test_custom_attrs_dep(self)
networkx.readwrite.tests.test_TestNodeLink.test_digraph(self)
networkx.readwrite.tests.test_TestNodeLink.test_exception(self)
networkx.readwrite.tests.test_TestNodeLink.test_exception_dep(self)
networkx.readwrite.tests.test_TestNodeLink.test_graph(self)
networkx.readwrite.tests.test_TestNodeLink.test_graph_attributes(self)
networkx.readwrite.tests.test_TestNodeLink.test_graph_with_tuple_nodes(self)
networkx.readwrite.tests.test_TestNodeLink.test_multigraph(self)
networkx.readwrite.tests.test_TestNodeLink.test_string_ids(self)
networkx.readwrite.tests.test_TestNodeLink.test_unicode_keys(self)
networkx.readwrite.tests.test_test_attrs_deprecation(recwarn)


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tests/test_tree.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_tree.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_tree.H->tree_graph(json.loads(d))
A:networkx.readwrite.json_graph.tests.test_tree.d->json.dumps(tree_data(G, 1))
networkx.readwrite.json_graph.tests.test_tree.test_exceptions()
networkx.readwrite.json_graph.tests.test_tree.test_graph()
networkx.readwrite.json_graph.tests.test_tree.test_graph_attributes()
networkx.readwrite.tests.test_test_exceptions()
networkx.readwrite.tests.test_test_graph()
networkx.readwrite.tests.test_test_graph_attributes()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tests/test_cytoscape.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_cytoscape.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_cytoscape.H->cytoscape_graph(cytoscape_data(G))
A:networkx.readwrite.json_graph.tests.test_cytoscape.input_data->cytoscape_data(G)
A:networkx.readwrite.json_graph.tests.test_cytoscape.orig_data->copy.deepcopy(input_data)
A:networkx.readwrite.json_graph.tests.test_cytoscape.d->json.dumps(cytoscape_data(G))
networkx.readwrite.json_graph.tests.test_cytoscape.test_digraph()
networkx.readwrite.json_graph.tests.test_cytoscape.test_exception()
networkx.readwrite.json_graph.tests.test_cytoscape.test_graph()
networkx.readwrite.json_graph.tests.test_cytoscape.test_graph_attributes()
networkx.readwrite.json_graph.tests.test_cytoscape.test_input_data_is_not_modified_when_building_graph()
networkx.readwrite.json_graph.tests.test_cytoscape.test_multidigraph()
networkx.readwrite.json_graph.tests.test_cytoscape.test_multigraph()
networkx.readwrite.tests.test_test_digraph()
networkx.readwrite.tests.test_test_exception()
networkx.readwrite.tests.test_test_graph()
networkx.readwrite.tests.test_test_graph_attributes()
networkx.readwrite.tests.test_test_input_data_is_not_modified_when_building_graph()
networkx.readwrite.tests.test_test_multidigraph()
networkx.readwrite.tests.test_test_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx3.0rc1/readwrite/json_graph/tests/test_adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_adjacency.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_adjacency.H->adjacency_graph(adjacency_data(G))
A:networkx.readwrite.json_graph.tests.test_adjacency.d->json.dumps(adjacency_data(G))
A:networkx.readwrite.json_graph.tests.test_adjacency.attrs->dict(id='node', key='node')
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_exception(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multigraph(self)
networkx.readwrite.tests.test_TestAdjacency
networkx.readwrite.tests.test_TestAdjacency.test_digraph(self)
networkx.readwrite.tests.test_TestAdjacency.test_exception(self)
networkx.readwrite.tests.test_TestAdjacency.test_graph(self)
networkx.readwrite.tests.test_TestAdjacency.test_graph_attributes(self)
networkx.readwrite.tests.test_TestAdjacency.test_multidigraph(self)
networkx.readwrite.tests.test_TestAdjacency.test_multigraph(self)

