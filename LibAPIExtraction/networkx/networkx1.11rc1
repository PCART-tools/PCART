
----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/exception.py----------------------------------------
networkx.NetworkXAlgorithmError(NetworkXException)
networkx.NetworkXError(NetworkXException)
networkx.NetworkXException(Exception)
networkx.NetworkXNoCycle(NetworkXUnfeasible)
networkx.NetworkXNoPath(NetworkXUnfeasible)
networkx.NetworkXNotImplemented(NetworkXException)
networkx.NetworkXPointlessConcept(NetworkXException)
networkx.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.NetworkXUnfeasible(NetworkXAlgorithmError)
networkx.exception.NetworkXAlgorithmError(NetworkXException)
networkx.exception.NetworkXError(NetworkXException)
networkx.exception.NetworkXException(Exception)
networkx.exception.NetworkXNoCycle(NetworkXUnfeasible)
networkx.exception.NetworkXNoPath(NetworkXUnfeasible)
networkx.exception.NetworkXNotImplemented(NetworkXException)
networkx.exception.NetworkXPointlessConcept(NetworkXException)
networkx.exception.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.exception.NetworkXUnfeasible(NetworkXAlgorithmError)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/convert_matrix.py----------------------------------------
A:networkx.convert_matrix.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.convert_matrix.M->scipy.sparse.coo_matrix((d, (r, c)), shape=(nlen, nlen), dtype=dtype)
A:networkx.convert_matrix.nodelist->_prep_create_using(create_using).nodes()
A:networkx.convert_matrix.nodeset->set(nodelist)
A:networkx.convert_matrix.df->pandas.DataFrame(data=M, index=nodelist, columns=nodelist)
A:networkx.convert_matrix.g->_prep_create_using(create_using)
A:networkx.convert_matrix.src_i->pandas.DataFrame(data=M, index=nodelist, columns=nodelist).columns.get_loc(source)
A:networkx.convert_matrix.tar_i->pandas.DataFrame(data=M, index=nodelist, columns=nodelist).columns.get_loc(target)
A:networkx.convert_matrix.nlen->len(nodelist)
A:networkx.convert_matrix.index->dict(zip(nodelist, range(nlen)))
A:networkx.convert_matrix.e_weight->attrs.get(weight, 1)
A:networkx.convert_matrix.M[i, j]->op([e_weight, M[i, j]])
A:networkx.convert_matrix.M[index[u], index[v]]->d.get(weight, 1)
A:networkx.convert_matrix.blurb->chr(1245)
A:networkx.convert_matrix.G->_prep_create_using(create_using)
A:networkx.convert_matrix.edges->zip(*np.asarray(A).nonzero())
A:networkx.convert_matrix.fields->sorted(((offset, dtype, name) for (name, (dtype, offset)) in A.dtype.fields.items()))
A:networkx.convert_matrix.triples->chain((((u, v, 1) for d in range(w)) for (u, v, w) in triples))
A:networkx.convert_matrix.values->tuple([attrs[n] for n in names])
A:networkx.convert_matrix.(row, col, data)->zip(*((index[u], index[v], d.get(weight, 1)) for (u, v, d) in G.edges_iter(nodelist, data=True) if u in index and v in index))
A:networkx.convert_matrix.selfloops->_prep_create_using(create_using).selfloop_edges(data=True)
A:networkx.convert_matrix.(diag_index, diag_data)->zip(*((index[u], -d.get(weight, 1)) for (u, v, d) in selfloops if u in index and v in index))
networkx._coo_gen_triples(A)
networkx._csc_gen_triples(A)
networkx._csr_gen_triples(A)
networkx._dok_gen_triples(A)
networkx._generate_weighted_edges(A)
networkx.convert_matrix._coo_gen_triples(A)
networkx.convert_matrix._csc_gen_triples(A)
networkx.convert_matrix._csr_gen_triples(A)
networkx.convert_matrix._dok_gen_triples(A)
networkx.convert_matrix._generate_weighted_edges(A)
networkx.convert_matrix.from_numpy_matrix(A,parallel_edges=False,create_using=None)
networkx.convert_matrix.from_pandas_dataframe(df,source,target,edge_attr=None,create_using=None)
networkx.convert_matrix.from_scipy_sparse_matrix(A,parallel_edges=False,create_using=None,edge_attribute='weight')
networkx.convert_matrix.setup_module(module)
networkx.convert_matrix.to_numpy_matrix(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.convert_matrix.to_numpy_recarray(G,nodelist=None,dtype=[('weight',float)],order=None)
networkx.convert_matrix.to_pandas_dataframe(G,nodelist=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.convert_matrix.to_scipy_sparse_matrix(G,nodelist=None,dtype=None,weight='weight',format='csr')
networkx.from_numpy_matrix(A,parallel_edges=False,create_using=None)
networkx.from_pandas_dataframe(df,source,target,edge_attr=None,create_using=None)
networkx.from_scipy_sparse_matrix(A,parallel_edges=False,create_using=None,edge_attribute='weight')
networkx.setup_module(module)
networkx.to_numpy_matrix(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.to_numpy_recarray(G,nodelist=None,dtype=[('weight',float)],order=None)
networkx.to_pandas_dataframe(G,nodelist=None,multigraph_weight=sum,weight='weight',nonedge=0.0)
networkx.to_scipy_sparse_matrix(G,nodelist=None,dtype=None,weight='weight',format='csr')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/release.py----------------------------------------
A:networkx.release.basedir->os.path.abspath(os.path.split(__file__)[0])
A:networkx.release.versionfile->os.path.join(basedir, 'version.py')
A:networkx.release.(date, date_info, version, version_info, vcs_info)->get_info()
A:networkx.release.fh->open(versionfile, 'w')
A:networkx.release.hgdir->os.path.join(basedir, '..', '.hg')
A:networkx.release.gitdir->os.path.join(basedir, '..', '.git')
A:networkx.release.date_info->datetime.datetime.now()
A:networkx.release.date->time.asctime(date_info.timetuple())
A:networkx.release.(revision, vcs_info)->get_revision()
A:networkx.release.version->''.join([str(major), '.', str(minor)])
networkx.release.get_info(dynamic=True)
networkx.release.get_revision()
networkx.release.write_versionfile()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/relabel.py----------------------------------------
A:networkx.relabel.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)'])
A:networkx.relabel.m->dict(((n, mapping(n)) for n in G))
A:networkx.relabel.old_labels->set(mapping.keys())
A:networkx.relabel.new_labels->set(mapping.values())
A:networkx.relabel.D->networkx.DiGraph(list(mapping.items()))
A:networkx.relabel.nodes->networkx.topological_sort(D, reverse=True)
A:networkx.relabel.multigraph->G.is_multigraph()
A:networkx.relabel.directed->G.is_directed()
A:networkx.relabel.H->relabel_nodes(G, mapping)
A:networkx.relabel.mapping->dict(zip([n for (d, n) in dv_pairs], range(first_label, N)))
A:networkx.relabel.nlist->G.nodes()
networkx._relabel_copy(G,mapping)
networkx._relabel_inplace(G,mapping)
networkx.convert_node_labels_to_integers(G,first_label=0,ordering='default',label_attribute=None)
networkx.relabel._relabel_copy(G,mapping)
networkx.relabel._relabel_inplace(G,mapping)
networkx.relabel.convert_node_labels_to_integers(G,first_label=0,ordering='default',label_attribute=None)
networkx.relabel.relabel_nodes(G,mapping,copy=True)
networkx.relabel_nodes(G,mapping,copy=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/version.py----------------------------------------
A:networkx.version.date_info->datetime.datetime(2015, 12, 26, 10, 10, 5, 798267)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/convert.py----------------------------------------
A:networkx.convert.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.convert.result->from_dict_of_dicts(data.adj, create_using=create_using, multigraph_input=data.is_multigraph())
A:networkx.convert.result.graph->data.graph.copy()
A:networkx.convert.result.node->dict(((n, dd.copy()) for (n, dd) in data.node.items()))
A:networkx.convert.G->_prep_create_using(create_using)
A:networkx.convert.dod[u]->dod.fromkeys(nbrdict, edge_data)
A:networkx.convert.seen->set()
networkx._prep_create_using(create_using)
networkx.convert._prep_create_using(create_using)
networkx.convert.convert_to_directed(G)
networkx.convert.convert_to_undirected(G)
networkx.convert.from_dict_of_dicts(d,create_using=None,multigraph_input=False)
networkx.convert.from_dict_of_lists(d,create_using=None)
networkx.convert.from_edgelist(edgelist,create_using=None)
networkx.convert.to_dict_of_dicts(G,nodelist=None,edge_data=None)
networkx.convert.to_dict_of_lists(G,nodelist=None)
networkx.convert.to_edgelist(G,nodelist=None)
networkx.convert.to_networkx_graph(data,create_using=None,multigraph_input=False)
networkx.convert_to_directed(G)
networkx.convert_to_undirected(G)
networkx.from_dict_of_dicts(d,create_using=None,multigraph_input=False)
networkx.from_dict_of_lists(d,create_using=None)
networkx.from_edgelist(edgelist,create_using=None)
networkx.to_dict_of_dicts(G,nodelist=None,edge_data=None)
networkx.to_dict_of_lists(G,nodelist=None)
networkx.to_edgelist(G,nodelist=None)
networkx.to_networkx_graph(data,create_using=None,multigraph_input=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/nonisomorphic_trees.py----------------------------------------
A:networkx.generators.nonisomorphic_trees.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Mridul Seth (seth.mridul@gmail.com)'])
A:networkx.generators.nonisomorphic_trees.layout->_next_rooted_tree(layout)
A:networkx.generators.nonisomorphic_trees.length->sum((1 for _ in nonisomorphic_trees(order)))
A:networkx.generators.nonisomorphic_trees.result->list(predecessor)
A:networkx.generators.nonisomorphic_trees.(left, rest)->_split_tree(candidate)
A:networkx.generators.nonisomorphic_trees.left_height->max(left)
A:networkx.generators.nonisomorphic_trees.rest_height->max(rest)
A:networkx.generators.nonisomorphic_trees.p->len(left)
A:networkx.generators.nonisomorphic_trees.new_candidate->_next_rooted_tree(candidate, p)
A:networkx.generators.nonisomorphic_trees.(new_left, new_rest)->_split_tree(new_candidate)
A:networkx.generators.nonisomorphic_trees.new_left_height->max(new_left)
A:networkx.generators.nonisomorphic_trees.suffix->range(1, new_left_height + 2)
A:networkx.generators.nonisomorphic_trees.m->len(layout)
A:networkx.generators.nonisomorphic_trees.G->networkx.Graph()
networkx._layout_to_graph(layout)
networkx._layout_to_matrix(layout)
networkx._next_rooted_tree(predecessor,p=None)
networkx._next_tree(candidate)
networkx._split_tree(layout)
networkx.generators.nonisomorphic_trees._layout_to_graph(layout)
networkx.generators.nonisomorphic_trees._layout_to_matrix(layout)
networkx.generators.nonisomorphic_trees._next_rooted_tree(predecessor,p=None)
networkx.generators.nonisomorphic_trees._next_tree(candidate)
networkx.generators.nonisomorphic_trees._split_tree(layout)
networkx.generators.nonisomorphic_trees.nonisomorphic_trees(order,create='graph')
networkx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees(order)
networkx.nonisomorphic_trees(order,create='graph')
networkx.number_of_nonisomorphic_trees(order)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/random_clustered.py----------------------------------------
A:networkx.generators.random_clustered.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Joel Miller (joel.c.miller.research@gmail.com)'])
A:networkx.generators.random_clustered.create_using->networkx.MultiGraph()
A:networkx.generators.random_clustered.joint_degree_sequence->list(joint_degree_sequence)
A:networkx.generators.random_clustered.N->len(joint_degree_sequence)
A:networkx.generators.random_clustered.G->networkx.empty_graph(N, create_using)
A:networkx.generators.random_clustered.n1->tlist.pop()
A:networkx.generators.random_clustered.n2->tlist.pop()
A:networkx.generators.random_clustered.n3->tlist.pop()
networkx.generators.random_clustered.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)
networkx.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/geometric.py----------------------------------------
A:networkx.generators.geometric.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'Ben Edwards (BJEdwards@gmail.com)'])
A:networkx.generators.geometric.G->networkx.DiGraph()
A:networkx.generators.geometric.nodes->list(product(range(n), repeat=dim))
A:networkx.generators.geometric.(u, du)->list(product(range(n), repeat=dim)).pop()
A:networkx.generators.geometric.d->sum((abs(b - a) for (a, b) in zip(p1, p2)))
A:networkx.generators.geometric.G.node[n]['weight']->random.expovariate(1.0)
A:networkx.generators.geometric.r->math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
A:networkx.generators.geometric.pos->list(nx.get_node_attributes(G, 'pos').values())
A:networkx.generators.geometric.(x1, y1)->list(nx.get_node_attributes(G, 'pos').values()).pop()
A:networkx.generators.geometric.l->math.sqrt(l)
A:networkx.generators.geometric.u->list(product(range(n), repeat=dim)).pop()
A:networkx.generators.geometric.cdf->list(nx.utils.accumulate(probs))
networkx.generators.geometric.geographical_threshold_edges(G,theta,alpha=2)
networkx.generators.geometric.geographical_threshold_graph(n,theta,alpha=2,dim=2,pos=None,weight=None)
networkx.generators.geometric.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.generators.geometric.random_geometric_graph(n,radius,dim=2,pos=None)
networkx.generators.geometric.waxman_graph(n,alpha=0.4,beta=0.1,L=None,domain=(0,0,1,1))
networkx.geographical_threshold_edges(G,theta,alpha=2)
networkx.geographical_threshold_graph(n,theta,alpha=2,dim=2,pos=None,weight=None)
networkx.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.random_geometric_graph(n,radius,dim=2,pos=None)
networkx.waxman_graph(n,alpha=0.4,beta=0.1,L=None,domain=(0,0,1,1))


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/small.py----------------------------------------
A:networkx.generators.small.G->make_small_undirected_graph(description, create_using)
A:networkx.generators.small.nodes->make_small_undirected_graph(description, create_using).nodes()
networkx.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.bull_graph(create_using=None)
networkx.chvatal_graph(create_using=None)
networkx.cubical_graph(create_using=None)
networkx.desargues_graph(create_using=None)
networkx.diamond_graph(create_using=None)
networkx.dodecahedral_graph(create_using=None)
networkx.frucht_graph(create_using=None)
networkx.generators.small.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.generators.small.bull_graph(create_using=None)
networkx.generators.small.chvatal_graph(create_using=None)
networkx.generators.small.cubical_graph(create_using=None)
networkx.generators.small.desargues_graph(create_using=None)
networkx.generators.small.diamond_graph(create_using=None)
networkx.generators.small.dodecahedral_graph(create_using=None)
networkx.generators.small.frucht_graph(create_using=None)
networkx.generators.small.heawood_graph(create_using=None)
networkx.generators.small.house_graph(create_using=None)
networkx.generators.small.house_x_graph(create_using=None)
networkx.generators.small.icosahedral_graph(create_using=None)
networkx.generators.small.krackhardt_kite_graph(create_using=None)
networkx.generators.small.make_small_graph(graph_description,create_using=None)
networkx.generators.small.make_small_undirected_graph(graph_description,create_using=None)
networkx.generators.small.moebius_kantor_graph(create_using=None)
networkx.generators.small.octahedral_graph(create_using=None)
networkx.generators.small.pappus_graph()
networkx.generators.small.petersen_graph(create_using=None)
networkx.generators.small.sedgewick_maze_graph(create_using=None)
networkx.generators.small.tetrahedral_graph(create_using=None)
networkx.generators.small.truncated_cube_graph(create_using=None)
networkx.generators.small.truncated_tetrahedron_graph(create_using=None)
networkx.generators.small.tutte_graph(create_using=None)
networkx.heawood_graph(create_using=None)
networkx.house_graph(create_using=None)
networkx.house_x_graph(create_using=None)
networkx.icosahedral_graph(create_using=None)
networkx.krackhardt_kite_graph(create_using=None)
networkx.make_small_graph(graph_description,create_using=None)
networkx.make_small_undirected_graph(graph_description,create_using=None)
networkx.moebius_kantor_graph(create_using=None)
networkx.octahedral_graph(create_using=None)
networkx.pappus_graph()
networkx.petersen_graph(create_using=None)
networkx.sedgewick_maze_graph(create_using=None)
networkx.tetrahedral_graph(create_using=None)
networkx.truncated_cube_graph(create_using=None)
networkx.truncated_tetrahedron_graph(create_using=None)
networkx.tutte_graph(create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/threshold.py----------------------------------------
A:networkx.generators.threshold.(d, v)->degree_sequence(cs).pop()
A:networkx.generators.threshold.wseq->uncompact(creation_sequence)
A:networkx.generators.threshold.(w, label)->uncompact(creation_sequence).pop()
A:networkx.generators.threshold.ci->uncompact(creation_sequence)
A:networkx.generators.threshold.cs->uncompact(creation_sequence)
A:networkx.generators.threshold.G->networkx.Graph()
A:networkx.generators.threshold.(v, node_type)->uncompact(creation_sequence).pop(0)
A:networkx.generators.threshold.dsdict->H.subgraph(H.neighbors(bigv)).degree()
A:networkx.generators.threshold.(d, iso)->degree_sequence(cs).pop(0)
A:networkx.generators.threshold.(d, bigv)->degree_sequence(cs).pop()
A:networkx.generators.threshold.H->H.subgraph(H.neighbors(bigv)).subgraph(H.neighbors(bigv))
A:networkx.generators.threshold.dr->sum(ccs[::2])
A:networkx.generators.threshold.triseq->triangle_sequence(creation_sequence)
A:networkx.generators.threshold.degseq->degree_sequence(creation_sequence)
A:networkx.generators.threshold.rd->uncompact(creation_sequence).count('d')
A:networkx.generators.threshold.N->sum(ccs)
A:networkx.generators.threshold.two_size->sum(degree_sequence(creation_sequence))
A:networkx.generators.threshold.ds->degree_sequence(cs)
A:networkx.generators.threshold.uindex->verts.index(u)
A:networkx.generators.threshold.vindex->verts.index(v)
A:networkx.generators.threshold.bigind->max(uindex, vindex)
A:networkx.generators.threshold.vert->uncompact(creation_sequence).pop()
A:networkx.generators.threshold.i->[v[0] for v in creation_sequence].index(i)
A:networkx.generators.threshold.order->len(cs)
A:networkx.generators.threshold.ccs->make_compact(creation_sequence)
A:networkx.generators.threshold.c->sum([evv * uv for (evv, uv) in zip(ev, u)])
A:networkx.generators.threshold.row->len(degseq)
A:networkx.generators.threshold.bigdeg->degree_sequence(creation_sequence).pop()
A:networkx.generators.threshold.choice->random.choice(dlist)
A:networkx.generators.threshold.split_to->random.choice(range(choice))
A:networkx.generators.threshold.first_choice->random.choice(dlist)
A:networkx.generators.threshold.second_choice->random.choice(dlist)
networkx.betweenness_sequence(creation_sequence,normalized=True)
networkx.cluster_sequence(creation_sequence)
networkx.creation_sequence(degree_sequence,with_labels=False,compact=False)
networkx.creation_sequence_to_weights(creation_sequence)
networkx.degree_correlation(creation_sequence)
networkx.degree_sequence(creation_sequence)
networkx.density(creation_sequence)
networkx.eigenvalues(creation_sequence)
networkx.eigenvectors(creation_sequence)
networkx.find_alternating_4_cycle(G)
networkx.find_creation_sequence(G)
networkx.find_threshold_graph(G,create_using=None)
networkx.generators.threshold.betweenness_sequence(creation_sequence,normalized=True)
networkx.generators.threshold.cluster_sequence(creation_sequence)
networkx.generators.threshold.creation_sequence(degree_sequence,with_labels=False,compact=False)
networkx.generators.threshold.creation_sequence_to_weights(creation_sequence)
networkx.generators.threshold.degree_correlation(creation_sequence)
networkx.generators.threshold.degree_sequence(creation_sequence)
networkx.generators.threshold.density(creation_sequence)
networkx.generators.threshold.eigenvalues(creation_sequence)
networkx.generators.threshold.eigenvectors(creation_sequence)
networkx.generators.threshold.find_alternating_4_cycle(G)
networkx.generators.threshold.find_creation_sequence(G)
networkx.generators.threshold.find_threshold_graph(G,create_using=None)
networkx.generators.threshold.is_threshold_graph(G)
networkx.generators.threshold.is_threshold_sequence(degree_sequence)
networkx.generators.threshold.left_d_threshold_sequence(n,m)
networkx.generators.threshold.make_compact(creation_sequence)
networkx.generators.threshold.random_threshold_sequence(n,p,seed=None)
networkx.generators.threshold.right_d_threshold_sequence(n,m)
networkx.generators.threshold.shortest_path(creation_sequence,u,v)
networkx.generators.threshold.shortest_path_length(creation_sequence,i)
networkx.generators.threshold.spectral_projection(u,eigenpairs)
networkx.generators.threshold.swap_d(cs,p_split=1.0,p_combine=1.0,seed=None)
networkx.generators.threshold.threshold_graph(creation_sequence,create_using=None)
networkx.generators.threshold.triangle_sequence(creation_sequence)
networkx.generators.threshold.triangles(creation_sequence)
networkx.generators.threshold.uncompact(creation_sequence)
networkx.generators.threshold.weights_to_creation_sequence(weights,threshold=1,with_labels=False,compact=False)
networkx.is_threshold_graph(G)
networkx.is_threshold_sequence(degree_sequence)
networkx.left_d_threshold_sequence(n,m)
networkx.make_compact(creation_sequence)
networkx.random_threshold_sequence(n,p,seed=None)
networkx.right_d_threshold_sequence(n,m)
networkx.shortest_path(creation_sequence,u,v)
networkx.shortest_path_length(creation_sequence,i)
networkx.spectral_projection(u,eigenpairs)
networkx.swap_d(cs,p_split=1.0,p_combine=1.0,seed=None)
networkx.threshold_graph(creation_sequence,create_using=None)
networkx.triangle_sequence(creation_sequence)
networkx.triangles(creation_sequence)
networkx.uncompact(creation_sequence)
networkx.weights_to_creation_sequence(weights,threshold=1,with_labels=False,compact=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/degree_seq.py----------------------------------------
A:networkx.generators.degree_seq.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart <swart@lanl.gov>', 'Dan Schult <dschult@colgate.edu>Joel Miller <joel.c.miller.research@gmail.com>', 'Nathan Lemons <nlemons@gmail.com>Brian Cloteaux <brian.cloteaux@nist.gov>'])
A:networkx.generators.degree_seq.create_using->networkx.DiGraph()
A:networkx.generators.degree_seq.N->len(in_degree_sequence)
A:networkx.generators.degree_seq.G->networkx.path_graph(n, create_using)
A:networkx.generators.degree_seq.n1->stublist.pop()
A:networkx.generators.degree_seq.n2->stublist.pop()
A:networkx.generators.degree_seq.nin->len(in_degree_sequence)
A:networkx.generators.degree_seq.nout->len(out_degree_sequence)
A:networkx.generators.degree_seq.source->num_degs[dmax].pop()
A:networkx.generators.degree_seq.target->num_degs[k].pop()
A:networkx.generators.degree_seq.n->len(w)
A:networkx.generators.degree_seq.order->sorted(enumerate(w), key=itemgetter(1), reverse=True)
A:networkx.generators.degree_seq.mapping->dict(((c, uv[0]) for (c, uv) in enumerate(order)))
A:networkx.generators.degree_seq.r->random.random()
A:networkx.generators.degree_seq.p->len(deg_sequence)
A:networkx.generators.degree_seq.maxn->max(nin, nout)
A:networkx.generators.degree_seq.(freeout, freein, target)->heapq.heappop(stubheap)
A:networkx.generators.degree_seq.(stubout, stubsource)->heapq.heappop(zeroheap)
A:networkx.generators.degree_seq.(stubout, stubin, stubsource)->heapq.heappop(stubheap)
A:networkx.generators.degree_seq.DSRG->DegreeSequenceRandomGraph(sequence, seed=seed)
A:networkx.generators.degree_seq.self.degree->list(degree)
A:networkx.generators.degree_seq.self.dmax->max(self.degree)
A:networkx.generators.degree_seq.self.remaining_degree->dict(enumerate(self.degree))
A:networkx.generators.degree_seq.self.graph->networkx.Graph()
A:networkx.generators.degree_seq.nodes->iter(self.remaining_degree)
A:networkx.generators.degree_seq.u->next(nodes)
A:networkx.generators.degree_seq.(u, v)->sorted(random.choice(H.edges()))
A:networkx.generators.degree_seq.potential_edges->combinations(self.remaining_degree, 2)
A:networkx.generators.degree_seq.H->networkx.Graph([(u, v) for (u, v) in potential_edges if not self.graph.has_edge(u, v)])
networkx.DegreeSequenceRandomGraph(self,degree,seed=None)
networkx.DegreeSequenceRandomGraph.generate(self)
networkx.DegreeSequenceRandomGraph.p(self,u,v)
networkx.DegreeSequenceRandomGraph.phase1(self)
networkx.DegreeSequenceRandomGraph.phase2(self)
networkx.DegreeSequenceRandomGraph.phase3(self)
networkx.DegreeSequenceRandomGraph.q(self,u,v)
networkx.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.degree_sequence_tree(deg_sequence,create_using=None)
networkx.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.directed_havel_hakimi_graph(in_deg_sequence,out_deg_sequence,create_using=None)
networkx.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.degree_seq.DegreeSequenceRandomGraph(self,degree,seed=None)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__(self,degree,seed=None)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.p(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.q(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.generators.degree_seq.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.degree_sequence_tree(deg_sequence,create_using=None)
networkx.generators.degree_seq.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.directed_havel_hakimi_graph(in_deg_sequence,out_deg_sequence,create_using=None)
networkx.generators.degree_seq.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.degree_seq.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.generators.degree_seq.random_degree_sequence_graph(sequence,seed=None,tries=10)
networkx.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.random_degree_sequence_graph(sequence,seed=None,tries=10)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/line.py----------------------------------------
A:networkx.generators.line.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'chebee7i (chebee7i@gmail.com)'])
A:networkx.generators.line.L->G.__class__()
A:networkx.generators.line.get_edges->_edge_func(G)
A:networkx.generators.line.sorted_node->_node_func(G)
A:networkx.generators.line.edges->set([])
networkx._edge_func(G)
networkx._lg_directed(G,create_using=None)
networkx._lg_undirected(G,selfloops=False,create_using=None)
networkx._node_func(G)
networkx._sorted_edge(u,v)
networkx.generators.line._edge_func(G)
networkx.generators.line._lg_directed(G,create_using=None)
networkx.generators.line._lg_undirected(G,selfloops=False,create_using=None)
networkx.generators.line._node_func(G)
networkx.generators.line._sorted_edge(u,v)
networkx.generators.line.line_graph(G,create_using=None)
networkx.line_graph(G,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/random_graphs.py----------------------------------------
A:networkx.generators.random_graphs.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)'])
A:networkx.generators.random_graphs.G->degree_sequence_tree(s)
A:networkx.generators.random_graphs.lp->math.log(1.0 - p)
A:networkx.generators.random_graphs.lr->math.log(1.0 - random.random())
A:networkx.generators.random_graphs.edges->_try_creation()
A:networkx.generators.random_graphs.nlist->degree_sequence_tree(s).nodes()
A:networkx.generators.random_graphs.u->random.choice(nlist1)
A:networkx.generators.random_graphs.v->random.choice(nlist2)
A:networkx.generators.random_graphs.e->degree_sequence_tree(s).edges()
A:networkx.generators.random_graphs.w->random.choice(nodes)
A:networkx.generators.random_graphs.nodes->list(range(n))
A:networkx.generators.random_graphs.potential_edges->defaultdict(lambda : 0)
A:networkx.generators.random_graphs.stubiter->iter(stubs)
A:networkx.generators.random_graphs.targets->_random_subset(repeated_nodes, m)
A:networkx.generators.random_graphs.x->random.choice(seq)
A:networkx.generators.random_graphs.repeated_nodes->degree_sequence_tree(s).nodes()
A:networkx.generators.random_graphs.possible_targets->_random_subset(repeated_nodes, m)
A:networkx.generators.random_graphs.target->_random_subset(repeated_nodes, m).pop()
A:networkx.generators.random_graphs.nbr->random.choice(neighborhood)
A:networkx.generators.random_graphs.msg->'NetworkXError p={0} is not in [0,1].'.format(p)
A:networkx.generators.random_graphs.random_node->random.choice(G.nodes())
A:networkx.generators.random_graphs.llen->int(2 * random.random() * n + 0.5)
A:networkx.generators.random_graphs.L->path_graph(llen)
A:networkx.generators.random_graphs.inter_edges->int(m * d)
A:networkx.generators.random_graphs.g->networkx.convert_node_labels_to_integers(gnm_random_graph(n, inter_edges), first_label=nnodes)
A:networkx.generators.random_graphs.nlist1->glist[gi].nodes()
A:networkx.generators.random_graphs.nlist2->glist[gi + 1].nodes()
A:networkx.generators.random_graphs.s->random_powerlaw_tree_sequence(n, gamma=gamma, seed=seed, tries=tries)
A:networkx.generators.random_graphs.z->networkx.utils.powerlaw_sequence(tries, exponent=gamma)
A:networkx.generators.random_graphs.index->random.randint(0, n - 1)
A:networkx.generators.random_graphs.zseq[index]->swap.pop()
networkx._random_subset(seq,m)
networkx.barabasi_albert_graph(n,m,seed=None)
networkx.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.dense_gnm_random_graph(n,m,seed=None)
networkx.duplication_divergence_graph(n,p,seed=None)
networkx.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs._random_subset(seq,m)
networkx.generators.random_graphs.barabasi_albert_graph(n,m,seed=None)
networkx.generators.random_graphs.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.generators.random_graphs.dense_gnm_random_graph(n,m,seed=None)
networkx.generators.random_graphs.duplication_divergence_graph(n,p,seed=None)
networkx.generators.random_graphs.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.gnm_random_graph(n,m,seed=None,directed=False)
networkx.generators.random_graphs.gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.generators.random_graphs.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.generators.random_graphs.random_lobster(n,p1,p2,seed=None)
networkx.generators.random_graphs.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_regular_graph(d,n,seed=None)
networkx.generators.random_graphs.random_shell_graph(constructor,seed=None)
networkx.generators.random_graphs.watts_strogatz_graph(n,k,p,seed=None)
networkx.gnm_random_graph(n,m,seed=None,directed=False)
networkx.gnp_random_graph(n,p,seed=None,directed=False)
networkx.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.random_lobster(n,p1,p2,seed=None)
networkx.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.random_regular_graph(d,n,seed=None)
networkx.random_shell_graph(constructor,seed=None)
networkx.watts_strogatz_graph(n,k,p,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/stochastic.py----------------------------------------
A:networkx.generators.stochastic.W->networkx.DiGraph(G)
A:networkx.generators.stochastic.degree->networkx.DiGraph(G).out_degree(weight=weight)
networkx.generators.stochastic.stochastic_graph(G,copy=True,weight='weight')
networkx.stochastic_graph(G,copy=True,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/classic.py----------------------------------------
A:networkx.generators.classic.nodes->iter(range(n))
A:networkx.generators.classic.source->parents.pop(0)
A:networkx.generators.classic.target->next(nodes)
A:networkx.generators.classic.G->networkx.empty_graph(sum(block_sizes))
A:networkx.generators.classic.n->int((1 - r ** (h + 1)) / (1 - r))
A:networkx.generators.classic.edges->itertools.combinations(range(n), 2)
A:networkx.generators.classic.last_generation_edges->networkx.empty_graph(sum(block_sizes)).edges()
A:networkx.generators.classic.number_of_edges_in_last_generation->len(last_generation_edges)
A:networkx.generators.classic.rows->range(m)
A:networkx.generators.classic.columns->range(n)
A:networkx.generators.classic.dim->list(dim)
A:networkx.generators.classic.current_dim->list(dim).pop()
A:networkx.generators.classic.Gold->networkx.empty_graph(sum(block_sizes)).copy()
A:networkx.generators.classic.Gnew->func(current_dim)
A:networkx.generators.classic.H->networkx.relabel_nodes(G, flatten)
A:networkx.generators.classic.extents->zip([0] + list(accumulate(block_sizes)), accumulate(block_sizes))
A:networkx.generators.classic.G.name->'complete_multiparite_graph{0}'.format(block_sizes)
networkx._tree_edges(n,r)
networkx.balanced_tree(r,h,create_using=None)
networkx.barbell_graph(m1,m2,create_using=None)
networkx.circulant_graph(n,offsets,create_using=None)
networkx.circular_ladder_graph(n,create_using=None)
networkx.complete_graph(n,create_using=None)
networkx.complete_multipartite_graph(*block_sizes)
networkx.cycle_graph(n,create_using=None)
networkx.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.empty_graph(n=0,create_using=None)
networkx.full_rary_tree(r,n,create_using=None)
networkx.generators.classic._tree_edges(n,r)
networkx.generators.classic.balanced_tree(r,h,create_using=None)
networkx.generators.classic.barbell_graph(m1,m2,create_using=None)
networkx.generators.classic.circulant_graph(n,offsets,create_using=None)
networkx.generators.classic.circular_ladder_graph(n,create_using=None)
networkx.generators.classic.complete_graph(n,create_using=None)
networkx.generators.classic.complete_multipartite_graph(*block_sizes)
networkx.generators.classic.cycle_graph(n,create_using=None)
networkx.generators.classic.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.generators.classic.empty_graph(n=0,create_using=None)
networkx.generators.classic.full_rary_tree(r,n,create_using=None)
networkx.generators.classic.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.generators.classic.grid_graph(dim,periodic=False)
networkx.generators.classic.hypercube_graph(n)
networkx.generators.classic.ladder_graph(n,create_using=None)
networkx.generators.classic.lollipop_graph(m,n,create_using=None)
networkx.generators.classic.null_graph(create_using=None)
networkx.generators.classic.path_graph(n,create_using=None)
networkx.generators.classic.star_graph(n,create_using=None)
networkx.generators.classic.trivial_graph(create_using=None)
networkx.generators.classic.wheel_graph(n,create_using=None)
networkx.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.grid_graph(dim,periodic=False)
networkx.hypercube_graph(n)
networkx.ladder_graph(n,create_using=None)
networkx.lollipop_graph(m,n,create_using=None)
networkx.null_graph(create_using=None)
networkx.path_graph(n,create_using=None)
networkx.star_graph(n,create_using=None)
networkx.trivial_graph(create_using=None)
networkx.wheel_graph(n,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/atlas.py----------------------------------------
networkx.atlas.graph_atlas_g()
networkx.generators.atlas.graph_atlas_g()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/expanders.py----------------------------------------
A:networkx.generators.expanders.create_using->networkx.MultiGraph()
A:networkx.generators.expanders.G.graph['name']->'chordal_cycle_graph({0})'.format(p)
networkx.chordal_cycle_graph(p,create_using=None)
networkx.generators.expanders.chordal_cycle_graph(p,create_using=None)
networkx.generators.expanders.margulis_gabber_galil_graph(n,create_using=None)
networkx.margulis_gabber_galil_graph(n,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/social.py----------------------------------------
A:networkx.generators.social.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Katy Bold <kbold@princeton.edu>', 'Aric Hagberg <aric.hagberg@gmail.com)'])
A:networkx.generators.social.all_members->set(range(34))
A:networkx.generators.social.G->networkx.Graph()
networkx.davis_southern_women_graph()
networkx.florentine_families_graph()
networkx.generators.social.davis_southern_women_graph()
networkx.generators.social.florentine_families_graph()
networkx.generators.social.karate_club_graph()
networkx.karate_club_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/directed.py----------------------------------------
A:networkx.generators.directed.create_using->networkx.DiGraph()
A:networkx.generators.directed.G->networkx.MultiDiGraph()
A:networkx.generators.directed.target->random.randrange(0, source)
A:networkx.generators.directed.r->random.random()
A:networkx.generators.directed.v->_choose_node(G, G.out_degree(), delta_out)
A:networkx.generators.directed.w->len(G)
networkx.generators.directed.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.generators.directed.gnc_graph(n,create_using=None,seed=None)
networkx.generators.directed.gnr_graph(n,p,create_using=None,seed=None)
networkx.generators.directed.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None)
networkx.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.gnc_graph(n,create_using=None,seed=None)
networkx.gnr_graph(n,p,create_using=None,seed=None)
networkx.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/ego.py----------------------------------------
A:networkx.generators.ego.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.generators.ego.(sp, _)->networkx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)
A:networkx.generators.ego.sp->networkx.single_source_shortest_path_length(G, n, cutoff=radius)
A:networkx.generators.ego.H->G.subgraph(sp).copy()
networkx.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)
networkx.generators.ego.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/community.py----------------------------------------
A:networkx.generators.community.__author__->'\n'.join(['Ben Edwards (bedwards@cs.unm.edu)', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.generators.community.G->networkx.Graph()
A:networkx.generators.community.edges->itertools.combinations(range(start, start + k), 2)
A:networkx.generators.community.nodes->networkx.Graph().nodes()
A:networkx.generators.community.x->random.choice(nodes)
A:networkx.generators.community.n->len(G)
A:networkx.generators.community.targets->range(next_group[n], len(G))
A:networkx.generators.community.lp->math.log(1.0 - p_out)
A:networkx.generators.community.lr->math.log(1.0 - random.random())
A:networkx.generators.community.size->int(random.normalvariate(s, float(s) / v + 0.5))
networkx.caveman_graph(l,k)
networkx.connected_caveman_graph(l,k)
networkx.gaussian_random_partition_graph(n,s,v,p_in,p_out,directed=False,seed=None)
networkx.generators.community.caveman_graph(l,k)
networkx.generators.community.connected_caveman_graph(l,k)
networkx.generators.community.gaussian_random_partition_graph(n,s,v,p_in,p_out,directed=False,seed=None)
networkx.generators.community.planted_partition_graph(l,k,p_in,p_out,seed=None,directed=False)
networkx.generators.community.random_partition_graph(sizes,p_in,p_out,seed=None,directed=False)
networkx.generators.community.relaxed_caveman_graph(l,k,p,seed=None)
networkx.planted_partition_graph(l,k,p_in,p_out,seed=None,directed=False)
networkx.random_partition_graph(sizes,p_in,p_out,seed=None,directed=False)
networkx.relaxed_caveman_graph(l,k,p,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/intersection.py----------------------------------------
A:networkx.generators.intersection.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.generators.intersection.G->networkx.empty_graph(n + m)
A:networkx.generators.intersection.mset->range(n, n + m)
A:networkx.generators.intersection.targets->random.sample(mset, k)
networkx.general_random_intersection_graph(n,m,p)
networkx.generators.intersection.general_random_intersection_graph(n,m,p)
networkx.generators.intersection.k_random_intersection_graph(n,m,k)
networkx.generators.intersection.uniform_random_intersection_graph(n,m,p,seed=None)
networkx.k_random_intersection_graph(n,m,k)
networkx.uniform_random_intersection_graph(n,m,p,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_random_clustered.py----------------------------------------
A:networkx.generators.tests.test_random_clustered.joint_degree_sequence->zip(node, tri)
A:networkx.generators.tests.test_random_clustered.G->networkx.random_clustered_graph([(1, 2), (2, 1), (1, 1), (1, 1), (1, 1), (2, 0)])
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2(self)
networkx.tests.test_TestRandomClusteredGraph
networkx.tests.test_TestRandomClusteredGraph.test_invalid1(self)
networkx.tests.test_TestRandomClusteredGraph.test_invalid2(self)
networkx.tests.test_TestRandomClusteredGraph.test_valid(self)
networkx.tests.test_TestRandomClusteredGraph.test_valid2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_stochastic.py----------------------------------------
A:networkx.generators.tests.test_stochastic.G->networkx.DiGraph()
A:networkx.generators.tests.test_stochastic.S->networkx.stochastic_graph(nx.MultiGraph())
networkx.generators.tests.test_stochastic.test_stochastic()
networkx.generators.tests.test_stochastic.test_stochastic_graph_input()
networkx.generators.tests.test_stochastic.test_stochastic_ints()
networkx.generators.tests.test_stochastic.test_stochastic_multigraph_input()
networkx.tests.test_test_stochastic()
networkx.tests.test_test_stochastic_graph_input()
networkx.tests.test_test_stochastic_ints()
networkx.tests.test_test_stochastic_multigraph_input()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_classic.py----------------------------------------
A:networkx.generators.tests.test_classic.t->full_rary_tree(3, 20)
A:networkx.generators.tests.test_classic.order->full_rary_tree(3, 20).order()
A:networkx.generators.tests.test_classic.dh->degree_histogram(t)
A:networkx.generators.tests.test_classic.th->balanced_tree(2, 3)
A:networkx.generators.tests.test_classic.b->lollipop_graph(m1, m2)
A:networkx.generators.tests.test_classic.mb->lollipop_graph(m1, m2, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.g->wheel_graph(10)
A:networkx.generators.tests.test_classic.mg->wheel_graph(10, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.G->networkx.complete_multipartite_graph(2, 3, 4)
A:networkx.generators.tests.test_classic.mG->cycle_graph(4, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.Ci6_1->circulant_graph(6, [1])
A:networkx.generators.tests.test_classic.C6->cycle_graph(6)
A:networkx.generators.tests.test_classic.Ci7->circulant_graph(7, [1, 2, 3])
A:networkx.generators.tests.test_classic.K7->complete_graph(7)
A:networkx.generators.tests.test_classic.Ci6_1_3->circulant_graph(6, [1, 3])
A:networkx.generators.tests.test_classic.K3_3->complete_bipartite_graph(3, 3)
A:networkx.generators.tests.test_classic.pete->petersen_graph()
A:networkx.generators.tests.test_classic.DG->grid_2d_graph(4, 2, periodic=True, create_using=DiGraph())
A:networkx.generators.tests.test_classic.MG->grid_2d_graph(4, 2, periodic=True, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.p->path_graph(10)
A:networkx.generators.tests.test_classic.dp->path_graph(3, create_using=DiGraph())
A:networkx.generators.tests.test_classic.mp->path_graph(10, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.s->star_graph(10)
A:networkx.generators.tests.test_classic.ms->star_graph(10, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.H->networkx.complete_bipartite_graph(2, 3)
networkx.generators.tests.test_classic.TestGeneratorClassic
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_circulant_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_0_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_1_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_2_partite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_multipartite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_2d_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_hypercube_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_periodic_grid_2d_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph(self)
networkx.tests.test_TestGeneratorClassic
networkx.tests.test_TestGeneratorClassic.test_balanced_tree(self)
networkx.tests.test_TestGeneratorClassic.test_balanced_tree_star(self)
networkx.tests.test_TestGeneratorClassic.test_barbell_graph(self)
networkx.tests.test_TestGeneratorClassic.test_circulant_graph(self)
networkx.tests.test_TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_0_partite_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_1_partite_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_2_partite_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_digraph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_multipartite_graph(self)
networkx.tests.test_TestGeneratorClassic.test_cycle_graph(self)
networkx.tests.test_TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.tests.test_TestGeneratorClassic.test_empty_graph(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.tests.test_TestGeneratorClassic.test_grid_2d_graph(self)
networkx.tests.test_TestGeneratorClassic.test_grid_graph(self)
networkx.tests.test_TestGeneratorClassic.test_hypercube_graph(self)
networkx.tests.test_TestGeneratorClassic.test_ladder_graph(self)
networkx.tests.test_TestGeneratorClassic.test_lollipop_graph(self)
networkx.tests.test_TestGeneratorClassic.test_null_graph(self)
networkx.tests.test_TestGeneratorClassic.test_path_graph(self)
networkx.tests.test_TestGeneratorClassic.test_periodic_grid_2d_graph(self)
networkx.tests.test_TestGeneratorClassic.test_star_graph(self)
networkx.tests.test_TestGeneratorClassic.test_trivial_graph(self)
networkx.tests.test_TestGeneratorClassic.test_wheel_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_threshold.py----------------------------------------
A:networkx.generators.tests.test_threshold.G->networkx.generators.threshold.threshold_graph(cs)
A:networkx.generators.tests.test_threshold.cs0->networkx.generators.threshold.creation_sequence(deg)
A:networkx.generators.tests.test_threshold.H0->networkx.generators.threshold.threshold_graph(cs0)
A:networkx.generators.tests.test_threshold.cs1->networkx.generators.threshold.creation_sequence(deg, with_labels=True)
A:networkx.generators.tests.test_threshold.H1->networkx.generators.threshold.threshold_graph(cs1)
A:networkx.generators.tests.test_threshold.cs2->networkx.generators.threshold.weights_to_creation_sequence(wseq)
A:networkx.generators.tests.test_threshold.H2->networkx.generators.threshold.threshold_graph(cs2)
A:networkx.generators.tests.test_threshold.spl->networkx.generators.threshold.shortest_path_length(cs1, 3)
A:networkx.generators.tests.test_threshold.spl2->networkx.generators.threshold.shortest_path_length([t for (v, t) in cs1], 2)
A:networkx.generators.tests.test_threshold.cs->networkx.generators.threshold.creation_sequence(TG.degree(), with_labels=True)
A:networkx.generators.tests.test_threshold.wseq->networkx.generators.threshold.creation_sequence_to_weights('ddidiiidididid')
A:networkx.generators.tests.test_threshold.TG->networkx.generators.threshold.find_threshold_graph(G)
A:networkx.generators.tests.test_threshold.ts->networkx.generators.threshold.triangle_sequence(cs)
A:networkx.generators.tests.test_threshold.c1->networkx.generators.threshold.cluster_sequence(cs)
A:networkx.generators.tests.test_threshold.c2->list(nx.clustering(G).values())
A:networkx.generators.tests.test_threshold.b1->networkx.betweenness_centrality(G).values()
A:networkx.generators.tests.test_threshold.b2->networkx.generators.threshold.betweenness_sequence(cs)
A:networkx.generators.tests.test_threshold.s->networkx.generators.threshold.right_d_threshold_sequence(5, 7)
A:networkx.generators.tests.test_threshold.s1->networkx.generators.threshold.swap_d(s, 1.0, 1.0)
A:networkx.generators.tests.test_threshold.(tgeval, tgevec)->networkx.generators.threshold.eigenvectors(cs)
A:networkx.generators.tests.test_threshold.lapl->networkx.laplacian_matrix(G)
A:networkx.generators.tests.test_threshold.MG->networkx.generators.threshold.threshold_graph(cs, create_using=nx.MultiGraph())
networkx.generators.tests.test_threshold.TestGeneratorThreshold
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_create_using(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_finding_routines(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_shortest_path(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds(self)
networkx.tests.test_TestGeneratorThreshold
networkx.tests.test_TestGeneratorThreshold.test_create_using(self)
networkx.tests.test_TestGeneratorThreshold.test_creation_sequences(self)
networkx.tests.test_TestGeneratorThreshold.test_eigenvectors(self)
networkx.tests.test_TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs(self)
networkx.tests.test_TestGeneratorThreshold.test_finding_routines(self)
networkx.tests.test_TestGeneratorThreshold.test_shortest_path(self)
networkx.tests.test_TestGeneratorThreshold.test_tg_creation_routines(self)
networkx.tests.test_TestGeneratorThreshold.test_threshold_sequence_graph_test(self)
networkx.tests.test_TestGeneratorThreshold.test_weights_thresholds(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_ego.py----------------------------------------
A:networkx.generators.tests.test_ego.G->networkx.Graph()
A:networkx.generators.tests.test_ego.H->networkx.ego_graph(G, 0, center=False)
A:networkx.generators.tests.test_ego.eg->networkx.ego_graph(G, 0, radius=3, distance='distance')
networkx.generators.tests.test_ego.TestGeneratorEgo
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego(self)
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance(self)
networkx.tests.test_TestGeneratorEgo
networkx.tests.test_TestGeneratorEgo.test_ego(self)
networkx.tests.test_TestGeneratorEgo.test_ego_distance(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_geometric.py----------------------------------------
A:networkx.generators.tests.test_geometric.G->networkx.navigable_small_world_graph(5, p=1, q=0, dim=1)
A:networkx.generators.tests.test_geometric.gg->networkx.grid_graph([5]).to_directed()
networkx.generators.tests.test_geometric.TestGeneratorsGeometric
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_geographical_threshold_graph(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_naviable_small_world(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_random_geometric_graph(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_waxman_graph(self)
networkx.tests.test_TestGeneratorsGeometric
networkx.tests.test_TestGeneratorsGeometric.test_geographical_threshold_graph(self)
networkx.tests.test_TestGeneratorsGeometric.test_naviable_small_world(self)
networkx.tests.test_TestGeneratorsGeometric.test_random_geometric_graph(self)
networkx.tests.test_TestGeneratorsGeometric.test_waxman_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_line.py----------------------------------------
A:networkx.generators.tests.test_line.G->networkx.Graph()
A:networkx.generators.tests.test_line.nf->networkx.generators.line._node_func(G)
A:networkx.generators.tests.test_line.ef->networkx.generators.line._edge_func(G)
A:networkx.generators.tests.test_line.result->sorted(ef())
A:networkx.generators.tests.test_line.L->networkx.line_graph(G, create_using=nx.DiGraph())
networkx.generators.tests.test_line.TestGeneratorLine
networkx.generators.tests.test_line.TestGeneratorLine.test_create1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_create2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_cycle(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_digraph1(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_digraph2(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_path(self)
networkx.generators.tests.test_line.TestGeneratorLine.test_star(self)
networkx.generators.tests.test_line.test_edge_func()
networkx.generators.tests.test_line.test_node_func()
networkx.generators.tests.test_line.test_sorted_edge()
networkx.tests.test_TestGeneratorLine
networkx.tests.test_TestGeneratorLine.test_create1(self)
networkx.tests.test_TestGeneratorLine.test_create2(self)
networkx.tests.test_TestGeneratorLine.test_cycle(self)
networkx.tests.test_TestGeneratorLine.test_digraph1(self)
networkx.tests.test_TestGeneratorLine.test_digraph2(self)
networkx.tests.test_TestGeneratorLine.test_path(self)
networkx.tests.test_TestGeneratorLine.test_star(self)
networkx.tests.test_test_edge_func()
networkx.tests.test_test_node_func()
networkx.tests.test_test_sorted_edge()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_nonisomorphic_trees.py----------------------------------------
A:networkx.generators.tests.test_nonisomorphic_trees.trees->f(8)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_nonisomorphism(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees(self)
networkx.generators.tests.test_nonisomorphic_trees.TestGeneratorNonIsomorphicTrees.test_tree_structure(self)
networkx.tests.test_TestGeneratorNonIsomorphicTrees
networkx.tests.test_TestGeneratorNonIsomorphicTrees.test_nonisomorphic_trees(self)
networkx.tests.test_TestGeneratorNonIsomorphicTrees.test_nonisomorphism(self)
networkx.tests.test_TestGeneratorNonIsomorphicTrees.test_number_of_nonisomorphic_trees(self)
networkx.tests.test_TestGeneratorNonIsomorphicTrees.test_tree_structure(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_random_graphs.py----------------------------------------
A:networkx.generators.tests.test_random_graphs.G->gnm_random_graph(10, -1.1)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.smoke_test_random_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnp(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_random_zero_regular_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_watts_strogatz_big_k(self)
networkx.tests.test_TestGeneratorsRandom
networkx.tests.test_TestGeneratorsRandom.smoke_test_random_graph(self)
networkx.tests.test_TestGeneratorsRandom.test_gnm(self)
networkx.tests.test_TestGeneratorsRandom.test_gnp(self)
networkx.tests.test_TestGeneratorsRandom.test_random_zero_regular_graph(self)
networkx.tests.test_TestGeneratorsRandom.test_watts_strogatz_big_k(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_expanders.py----------------------------------------
A:networkx.generators.tests.test_expanders.g->margulis_gabber_galil_graph(n)
A:networkx.generators.tests.test_expanders.w->sorted(scipy.linalg.eigvalsh(adjacency_matrix(g).A))
A:networkx.generators.tests.test_expanders.G->chordal_cycle_graph(p)
networkx.generators.tests.test_expanders.test_chordal_cycle_graph()
networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph()
networkx.generators.tests.test_expanders.test_margulis_gabber_galil_graph_badinput()
networkx.tests.test_test_chordal_cycle_graph()
networkx.tests.test_test_margulis_gabber_galil_graph()
networkx.tests.test_test_margulis_gabber_galil_graph_badinput()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_small.py----------------------------------------
A:networkx.generators.tests.test_small.null->null_graph()
A:networkx.generators.tests.test_small.G->tutte_graph()
A:networkx.generators.tests.test_small.utility_graph->complete_bipartite_graph(3, 3)
A:networkx.generators.tests.test_small.MG->tutte_graph(create_using=MultiGraph())
networkx.generators.tests.test_small.TestGeneratorsSmall
networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph(self)
networkx.generators.tests.test_small.TestGeneratorsSmall.test_make_small_graph(self)
networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs(self)
networkx.tests.test_TestGeneratorsSmall
networkx.tests.test_TestGeneratorsSmall.test__LCF_graph(self)
networkx.tests.test_TestGeneratorsSmall.test_make_small_graph(self)
networkx.tests.test_TestGeneratorsSmall.test_properties_named_small_graphs(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_degree_seq.py----------------------------------------
A:networkx.generators.tests.test_degree_seq.G->nx.random_degree_sequence_graph(d, seed=0)
A:networkx.generators.tests.test_degree_seq.G1->nx.erdos_renyi_graph(n, p * (i + 1), None, True)
A:networkx.generators.tests.test_degree_seq.G2->nx.directed_havel_hakimi_graph(din, dout)
A:networkx.generators.tests.test_degree_seq.din->list(G1.in_degree().values())
A:networkx.generators.tests.test_degree_seq.dout->list(G1.out_degree().values())
A:networkx.generators.tests.test_degree_seq.d->nx.random_degree_sequence_graph(d, seed=0).degree().values()
networkx.generators.tests.test_degree_seq.test_configuation_raise()
networkx.generators.tests.test_degree_seq.test_configuation_raise_odd()
networkx.generators.tests.test_degree_seq.test_configuration_model()
networkx.generators.tests.test_degree_seq.test_configuration_model_empty()
networkx.generators.tests.test_degree_seq.test_degree_sequence_tree()
networkx.generators.tests.test_degree_seq.test_directed_configuation_mode()
networkx.generators.tests.test_degree_seq.test_directed_configuation_raise_unequal()
networkx.generators.tests.test_degree_seq.test_directed_havel_hakimi()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_empty()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_selfloops()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph_skew()
networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_large()
networkx.tests.test_test_configuation_raise()
networkx.tests.test_test_configuation_raise_odd()
networkx.tests.test_test_configuration_model()
networkx.tests.test_test_configuration_model_empty()
networkx.tests.test_test_degree_sequence_tree()
networkx.tests.test_test_directed_configuation_mode()
networkx.tests.test_test_directed_configuation_raise_unequal()
networkx.tests.test_test_directed_havel_hakimi()
networkx.tests.test_test_expected_degree_graph()
networkx.tests.test_test_expected_degree_graph_empty()
networkx.tests.test_test_expected_degree_graph_selfloops()
networkx.tests.test_test_expected_degree_graph_skew()
networkx.tests.test_test_havel_hakimi_construction()
networkx.tests.test_test_random_degree_sequence_graph()
networkx.tests.test_test_random_degree_sequence_graph_raise()
networkx.tests.test_test_random_degree_sequence_large()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_atlas.py----------------------------------------
A:networkx.generators.tests.test_atlas.self.GAG->networkx.generators.atlas.graph_atlas_g()
A:networkx.generators.tests.test_atlas.previous->g.copy()
A:networkx.generators.tests.test_atlas.deg_seq->sorted(g.degree().values())
A:networkx.generators.tests.test_atlas.previous_deg_seq->sorted(previous.degree().values())
networkx.generators.tests.test_atlas.TestAtlas(object)
networkx.generators.tests.test_atlas.TestAtlas.setUp(self)
networkx.generators.tests.test_atlas.TestAtlas.setupClass(cls)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_degree_sequence(self)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.generators.tests.test_atlas.TestAtlas.test_names(self)
networkx.generators.tests.test_atlas.TestAtlas.test_sizes(self)
networkx.tests.test_atlas.TestAtlas(object)
networkx.tests.test_atlas.TestAtlas.setUp(self)
networkx.tests.test_atlas.TestAtlas.setupClass(cls)
networkx.tests.test_atlas.TestAtlas.test_monotone_degree_sequence(self)
networkx.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.tests.test_atlas.TestAtlas.test_names(self)
networkx.tests.test_atlas.TestAtlas.test_sizes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_directed.py----------------------------------------
A:networkx.generators.tests.test_directed.G->gnc_graph(100, seed=1)
A:networkx.generators.tests.test_directed.MG->gnc_graph(100, create_using=MultiDiGraph(), seed=1)
networkx.generators.tests.test_directed.TestGeneratorsDirected
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs(self)
networkx.tests.test_TestGeneratorsDirected
networkx.tests.test_TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.tests.test_TestGeneratorsDirected.test_smoke_test_random_graphs(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_intersection.py----------------------------------------
A:networkx.generators.tests.test_intersection.G->networkx.general_random_intersection_graph(10, 5, [0.1, 0.2, 0.2, 0.1, 0.1])
networkx.generators.tests.test_intersection.TestIntersectionGraph
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph
networkx.tests.test_TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph.test_random_intersection_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/generators/tests/test_community.py----------------------------------------
A:networkx.generators.tests.test_community.G->networkx.gaussian_random_partition_graph(100, 10, 10, 0.3, 0.01)
A:networkx.generators.tests.test_community.K5->networkx.complete_graph(5)
networkx.generators.tests.test_community.test_caveman_graph()
networkx.generators.tests.test_community.test_connected_caveman_graph()
networkx.generators.tests.test_community.test_gaussian_random_partition_graph()
networkx.generators.tests.test_community.test_planted_partition_graph()
networkx.generators.tests.test_community.test_random_partition_graph()
networkx.generators.tests.test_community.test_relaxed_caveman_graph()
networkx.tests.test_test_caveman_graph()
networkx.tests.test_test_connected_caveman_graph()
networkx.tests.test_test_gaussian_random_partition_graph()
networkx.tests.test_test_planted_partition_graph()
networkx.tests.test_test_random_partition_graph()
networkx.tests.test_test_relaxed_caveman_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/union_find.py----------------------------------------
A:networkx.utils.union_find.heaviest->max(roots, key=lambda r: self.weights[r])
networkx.utils.UnionFind(self)
networkx.utils.UnionFind.__getitem__(self,object)
networkx.utils.UnionFind.__iter__(self)
networkx.utils.UnionFind.union(self,*objects)
networkx.utils.union_find.UnionFind(self)
networkx.utils.union_find.UnionFind.__getitem__(self,object)
networkx.utils.union_find.UnionFind.__init__(self)
networkx.utils.union_find.UnionFind.__iter__(self)
networkx.utils.union_find.UnionFind.union(self,*objects)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/random_sequence.py----------------------------------------
A:networkx.utils.random_sequence.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)', 'Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.utils.random_sequence.trialseq->sfunction(n, **kwds)
A:networkx.utils.random_sequence.v->random.random()
A:networkx.utils.random_sequence.x->int(xmin * u ** (-(1.0 / a1)))
A:networkx.utils.random_sequence.psum->float(sum(distribution))
A:networkx.utils.random_sequence.cdf->cumulative_distribution(distribution)
A:networkx.utils.random_sequence.sample->set()
networkx.utils.create_degree_sequence(n,sfunction=None,max_tries=50,**kwds)
networkx.utils.cumulative_distribution(distribution)
networkx.utils.discrete_sequence(n,distribution=None,cdistribution=None)
networkx.utils.pareto_sequence(n,exponent=1.0)
networkx.utils.powerlaw_sequence(n,exponent=2.0)
networkx.utils.random_sequence.create_degree_sequence(n,sfunction=None,max_tries=50,**kwds)
networkx.utils.random_sequence.cumulative_distribution(distribution)
networkx.utils.random_sequence.discrete_sequence(n,distribution=None,cdistribution=None)
networkx.utils.random_sequence.pareto_sequence(n,exponent=1.0)
networkx.utils.random_sequence.powerlaw_sequence(n,exponent=2.0)
networkx.utils.random_sequence.random_weighted_sample(mapping,k)
networkx.utils.random_sequence.uniform_sequence(n)
networkx.utils.random_sequence.weighted_choice(mapping)
networkx.utils.random_sequence.zipf_rv(alpha,xmin=1,seed=None)
networkx.utils.random_sequence.zipf_sequence(n,alpha=2.0,xmin=1)
networkx.utils.random_weighted_sample(mapping,k)
networkx.utils.uniform_sequence(n)
networkx.utils.weighted_choice(mapping)
networkx.utils.zipf_rv(alpha,xmin=1,seed=None)
networkx.utils.zipf_sequence(n,alpha=2.0,xmin=1)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/misc.py----------------------------------------
A:networkx.utils.misc.it->iter(iterable)
A:networkx.utils.misc.total->func(total, element)
A:networkx.utils.misc.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)', 'Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.utils.misc.s->set(d.keys())
A:networkx.utils.misc.mapping->dict(zip(s, range(len(s))))
A:networkx.utils.misc.n->len(mapping)
A:networkx.utils.misc.a->numpy.zeros(n)
networkx.utils.default_opener(filename)
networkx.utils.dict_to_numpy_array(d,mapping=None)
networkx.utils.dict_to_numpy_array1(d,mapping=None)
networkx.utils.dict_to_numpy_array2(d,mapping=None)
networkx.utils.flatten(obj,result=None)
networkx.utils.generate_unique_node()
networkx.utils.is_list_of_ints(intlist)
networkx.utils.is_string_like(obj)
networkx.utils.iterable(obj)
networkx.utils.misc.default_opener(filename)
networkx.utils.misc.dict_to_numpy_array(d,mapping=None)
networkx.utils.misc.dict_to_numpy_array1(d,mapping=None)
networkx.utils.misc.dict_to_numpy_array2(d,mapping=None)
networkx.utils.misc.flatten(obj,result=None)
networkx.utils.misc.generate_unique_node()
networkx.utils.misc.is_list_of_ints(intlist)
networkx.utils.misc.is_string_like(obj)
networkx.utils.misc.iterable(obj)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/contextmanagers.py----------------------------------------
A:networkx.utils.contextmanagers.directed->G.is_directed()
networkx.utils.contextmanagers.reversed(G)
networkx.utils.reversed(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/rcm.py----------------------------------------
A:networkx.utils.rcm.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.utils.rcm.start->heuristic(G)
A:networkx.utils.rcm.queue->deque([start])
A:networkx.utils.rcm.parent->deque([start]).popleft()
A:networkx.utils.rcm.nd->sorted(G.degree(set(G[parent]) - visited).items(), key=itemgetter(1))
A:networkx.utils.rcm.u->next(G.nodes_iter())
A:networkx.utils.rcm.spl->networkx.shortest_path_length(G, v)
A:networkx.utils.rcm.l->max(spl.values())
A:networkx.utils.rcm.(v, deg)->min(G.degree(farthest).items(), key=itemgetter(1))
networkx.utils.connected_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.pseudo_peripheral_node(G)
networkx.utils.rcm.connected_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.rcm.cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.rcm.pseudo_peripheral_node(G)
networkx.utils.rcm.reverse_cuthill_mckee_ordering(G,heuristic=None)
networkx.utils.reverse_cuthill_mckee_ordering(G,heuristic=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/decorators.py----------------------------------------
A:networkx.utils.decorators._dispatch_dict->defaultdict(lambda : open)
A:networkx.utils.decorators.fobj->_dispatch_dict[ext](path, mode=mode)
A:networkx.utils.decorators.new_args->list(args)
A:networkx.utils.decorators.result->func(*new_args, **kwargs)
networkx.utils._open_bz2(path,mode)
networkx.utils._open_gz(path,mode)
networkx.utils.decorators._open_bz2(path,mode)
networkx.utils.decorators._open_gz(path,mode)
networkx.utils.decorators.not_implemented_for(*graph_types)
networkx.utils.decorators.open_file(path_arg,mode='r')
networkx.utils.not_implemented_for(*graph_types)
networkx.utils.open_file(path_arg,mode='r')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/heaps.py----------------------------------------
A:networkx.utils.heaps.self._root->self._link(self._root, child)
A:networkx.utils.heaps.node->link(prev, node)
A:networkx.utils.heaps.child->self._merge_children(node)
A:networkx.utils.heaps.self._count->count()
networkx.utils.BinaryHeap(self)
networkx.utils.BinaryHeap.get(self,key,default=None)
networkx.utils.BinaryHeap.insert(self,key,value,allow_increase=False)
networkx.utils.BinaryHeap.min(self)
networkx.utils.BinaryHeap.pop(self)
networkx.utils.MinHeap(self)
networkx.utils.MinHeap._Item(self,key,value)
networkx.utils.MinHeap._Item.__repr__(self)
networkx.utils.MinHeap.__bool__(self)
networkx.utils.MinHeap.__contains__(self,key)
networkx.utils.MinHeap.__len__(self)
networkx.utils.MinHeap.__nonzero__(self)
networkx.utils.MinHeap.get(self,key,default=None)
networkx.utils.MinHeap.insert(self,key,value,allow_increase=False)
networkx.utils.MinHeap.min(self)
networkx.utils.MinHeap.pop(self)
networkx.utils.PairingHeap(self)
networkx.utils.PairingHeap._Node(self,key,value)
networkx.utils.PairingHeap._cut(self,node)
networkx.utils.PairingHeap._link(self,root,other)
networkx.utils.PairingHeap._merge_children(self,root)
networkx.utils.PairingHeap.get(self,key,default=None)
networkx.utils.PairingHeap.insert(self,key,value,allow_increase=False)
networkx.utils.PairingHeap.min(self)
networkx.utils.PairingHeap.pop(self)
networkx.utils._inherit_doc(cls)
networkx.utils.heaps.BinaryHeap(self)
networkx.utils.heaps.BinaryHeap.__init__(self)
networkx.utils.heaps.BinaryHeap.get(self,key,default=None)
networkx.utils.heaps.BinaryHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.BinaryHeap.min(self)
networkx.utils.heaps.BinaryHeap.pop(self)
networkx.utils.heaps.MinHeap(self)
networkx.utils.heaps.MinHeap._Item(self,key,value)
networkx.utils.heaps.MinHeap._Item.__init__(self,key,value)
networkx.utils.heaps.MinHeap._Item.__repr__(self)
networkx.utils.heaps.MinHeap.__bool__(self)
networkx.utils.heaps.MinHeap.__contains__(self,key)
networkx.utils.heaps.MinHeap.__init__(self)
networkx.utils.heaps.MinHeap.__len__(self)
networkx.utils.heaps.MinHeap.__nonzero__(self)
networkx.utils.heaps.MinHeap.get(self,key,default=None)
networkx.utils.heaps.MinHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.MinHeap.min(self)
networkx.utils.heaps.MinHeap.pop(self)
networkx.utils.heaps.PairingHeap(self)
networkx.utils.heaps.PairingHeap._Node(self,key,value)
networkx.utils.heaps.PairingHeap._Node.__init__(self,key,value)
networkx.utils.heaps.PairingHeap.__init__(self)
networkx.utils.heaps.PairingHeap._cut(self,node)
networkx.utils.heaps.PairingHeap._link(self,root,other)
networkx.utils.heaps.PairingHeap._merge_children(self,root)
networkx.utils.heaps.PairingHeap.get(self,key,default=None)
networkx.utils.heaps.PairingHeap.insert(self,key,value,allow_increase=False)
networkx.utils.heaps.PairingHeap.min(self)
networkx.utils.heaps.PairingHeap.pop(self)
networkx.utils.heaps._inherit_doc(cls)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_rcm.py----------------------------------------
A:networkx.utils.tests.test_rcm.G->networkx.Graph([(0, 0), (0, 4), (1, 1), (1, 2), (1, 5), (1, 7), (2, 2), (2, 4), (3, 3), (3, 6), (4, 4), (5, 5), (5, 7), (6, 6), (7, 7)])
A:networkx.utils.tests.test_rcm.rcm->list(reverse_cuthill_mckee_ordering(G, heuristic=smallest_degree))
A:networkx.utils.tests.test_rcm.(node, deg)->min(G.degree().items(), key=lambda x: x[1])
networkx.utils.tests.test_rcm.test_rcm_alternate_heuristic()
networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee()
networkx.utils.tests.test_test_rcm_alternate_heuristic()
networkx.utils.tests.test_test_reverse_cuthill_mckee()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_decorators.py----------------------------------------
A:networkx.utils.tests.test_decorators.self.fobj->tempfile.NamedTemporaryFile('wb+', delete=False)
A:networkx.utils.tests.test_decorators.fh->tempfile.NamedTemporaryFile('wb+', delete=False)
A:networkx.utils.tests.test_decorators.path->kwargs.get('path', None)
networkx.utils.tests.test_TestOpenFileDecorator(object)
networkx.utils.tests.test_TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.setUp(self)
networkx.utils.tests.test_TestOpenFileDecorator.tearDown(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_decorators.TestOpenFileDecorator(object)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.setUp(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.tearDown(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_decorators.test_not_implemented_decorator()
networkx.utils.tests.test_decorators.test_not_implemented_decorator_key()
networkx.utils.tests.test_decorators.test_not_implemented_decorator_raise()
networkx.utils.tests.test_test_not_implemented_decorator()
networkx.utils.tests.test_test_not_implemented_decorator_key()
networkx.utils.tests.test_test_not_implemented_decorator_raise()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_random_sequence.py----------------------------------------
A:networkx.utils.tests.test_random_sequence.seq->create_degree_sequence(10, powerlaw_sequence)
A:networkx.utils.tests.test_random_sequence.r->zipf_rv(2.3)
A:networkx.utils.tests.test_random_sequence.s->random_weighted_sample(mapping, 2)
A:networkx.utils.tests.test_random_sequence.c->weighted_choice(mapping)
networkx.utils.tests.test_random_sequence.test_degree_sequences()
networkx.utils.tests.test_random_sequence.test_random_weighted_choice()
networkx.utils.tests.test_random_sequence.test_random_weighted_sample()
networkx.utils.tests.test_random_sequence.test_zipf_rv()
networkx.utils.tests.test_random_sequence.test_zipf_sequence()
networkx.utils.tests.test_test_degree_sequences()
networkx.utils.tests.test_test_random_weighted_choice()
networkx.utils.tests.test_test_random_weighted_sample()
networkx.utils.tests.test_test_zipf_rv()
networkx.utils.tests.test_test_zipf_sequence()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_misc.py----------------------------------------
A:networkx.utils.tests.test_misc.K->networkx.complete_graph(10)
A:networkx.utils.tests.test_misc.z->discrete_sequence(20, distribution=[0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3])
A:networkx.utils.tests.test_misc.y->make_str(x)
A:networkx.utils.tests.test_misc.x->unicode('qualité', encoding='utf-8')
A:networkx.utils.tests.test_misc.a->dict_to_numpy_array1(d)
networkx.utils.tests.test_TestNumpyArray(object)
networkx.utils.tests.test_TestNumpyArray.setupClass(cls)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array1(self)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array2(self)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array_a(self)
networkx.utils.tests.test_TestNumpyArray.test_dict_to_numpy_array_b(self)
networkx.utils.tests.test_misc.TestNumpyArray(object)
networkx.utils.tests.test_misc.TestNumpyArray.setupClass(cls)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array1(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array2(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_a(self)
networkx.utils.tests.test_misc.TestNumpyArray.test_dict_to_numpy_array_b(self)
networkx.utils.tests.test_misc.test_graph_iterable()
networkx.utils.tests.test_misc.test_is_list_of_ints()
networkx.utils.tests.test_misc.test_is_string_like()
networkx.utils.tests.test_misc.test_iterable()
networkx.utils.tests.test_misc.test_make_str_with_bytes()
networkx.utils.tests.test_misc.test_make_str_with_unicode()
networkx.utils.tests.test_misc.test_random_number_distribution()
networkx.utils.tests.test_test_graph_iterable()
networkx.utils.tests.test_test_is_list_of_ints()
networkx.utils.tests.test_test_is_string_like()
networkx.utils.tests.test_test_iterable()
networkx.utils.tests.test_test_make_str_with_bytes()
networkx.utils.tests.test_test_make_str_with_unicode()
networkx.utils.tests.test_test_random_number_distribution()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_unionfind.py----------------------------------------
A:networkx.utils.tests.test_unionfind.x->networkx.utils.UnionFind()
networkx.utils.tests.test_unionfind.test_unionfind()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_contextmanager.py----------------------------------------
A:networkx.utils.tests.test_contextmanager.G->networkx.DiGraph()
networkx.utils.tests.test_contextmanager.test_reversed()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/utils/tests/test_heaps.py----------------------------------------
A:networkx.utils.tests.test_heaps.x->X()
A:networkx.utils.tests.test_heaps.heap->cls(*args, **kwargs)
networkx.utils.tests.test_X(object)
networkx.utils.tests.test_X.__eq__(self,other)
networkx.utils.tests.test_X.__ge__(self,other)
networkx.utils.tests.test_X.__gt__(self,other)
networkx.utils.tests.test_X.__hash__(self)
networkx.utils.tests.test_X.__le__(self,other)
networkx.utils.tests.test_X.__lt__(self,other)
networkx.utils.tests.test_X.__ne__(self,other)
networkx.utils.tests.test__test_heap_class(cls,*args,**kwargs)
networkx.utils.tests.test_heaps.X(object)
networkx.utils.tests.test_heaps.X.__eq__(self,other)
networkx.utils.tests.test_heaps.X.__ge__(self,other)
networkx.utils.tests.test_heaps.X.__gt__(self,other)
networkx.utils.tests.test_heaps.X.__hash__(self)
networkx.utils.tests.test_heaps.X.__le__(self,other)
networkx.utils.tests.test_heaps.X.__lt__(self,other)
networkx.utils.tests.test_heaps.X.__ne__(self,other)
networkx.utils.tests.test_heaps._test_heap_class(cls,*args,**kwargs)
networkx.utils.tests.test_heaps.test_BinaryHeap()
networkx.utils.tests.test_heaps.test_PairingHeap()
networkx.utils.tests.test_test_BinaryHeap()
networkx.utils.tests.test_test_PairingHeap()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_convert_pandas.py----------------------------------------
A:networkx.tests.test_convert_pandas.self.r->pandas.np.random.RandomState(seed=5)
A:networkx.tests.test_convert_pandas.ints->self.r.random_integers(1, 10, size=(3, 2))
A:networkx.tests.test_convert_pandas.df->pandas.DataFrame(ints, columns=['weight', 'cost'])
A:networkx.tests.test_convert_pandas.Gtrue->networkx.Graph([('E', 'C', {}), ('B', 'A', {}), ('A', 'D', {})])
A:networkx.tests.test_convert_pandas.G->networkx.from_pandas_dataframe(self.df, 0, 'b')
networkx.tests.test_convert_pandas.TestConvertPandas(self)
networkx.tests.test_convert_pandas.TestConvertPandas.__init__(self)
networkx.tests.test_convert_pandas.TestConvertPandas.assert_equal(self,G1,G2)
networkx.tests.test_convert_pandas.TestConvertPandas.setupClass(cls)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_all_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_multi_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_no_attr(self)
networkx.tests.test_convert_pandas.TestConvertPandas.test_from_dataframe_one_attr(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test.py----------------------------------------
A:networkx.tests.test.nx_install_dir->os.path.join(path.dirname(__file__), path.pardir)
networkx.test(verbosity=1,doctest=False,numpy=True)
networkx.tests.test.run(verbosity=1,doctest=False,numpy=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_relabel.py----------------------------------------
A:networkx.tests.test_relabel.G->nx.relabel_nodes(G, {1: 0}, copy=False)
A:networkx.tests.test_relabel.H->relabel_nodes(G, mapping, copy=False)
A:networkx.tests.test_relabel.degH->relabel_nodes(G, mapping, copy=False).degree().values()
A:networkx.tests.test_relabel.degG->nx.relabel_nodes(G, {1: 0}, copy=False).degree().values()
A:networkx.tests.test_relabel.K5->nx.complete_graph(4)
networkx.tests.test_TestRelabel
networkx.tests.test_TestRelabel.test_convert_node_labels_to_integers(self)
networkx.tests.test_TestRelabel.test_convert_to_integers2(self)
networkx.tests.test_TestRelabel.test_convert_to_integers_raise(self)
networkx.tests.test_TestRelabel.test_relabel_isolated_nodes_to_same(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_copy(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_digraph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_function(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_graph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_missing(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_multidigraph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_multigraph(self)
networkx.tests.test_TestRelabel.test_relabel_selfloop(self)
networkx.tests.test_TestRelabel.test_relabel_toposort(self)
networkx.tests.test_relabel.TestRelabel
networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers(self)
networkx.tests.test_relabel.TestRelabel.test_convert_to_integers2(self)
networkx.tests.test_relabel.TestRelabel.test_convert_to_integers_raise(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_isolated_nodes_to_same(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_selfloop(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_toposort(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/benchmark.py----------------------------------------
A:networkx.tests.benchmark.self.class_tests->dict(((gc, '') for gc in graph_classes))
A:networkx.tests.benchmark.graph_class->self.class_tests.keys()
A:networkx.tests.benchmark.self.class_tests[GC]->Timer(test_str, setup_string)
A:networkx.tests.benchmark.column_len->max((len(G) for G in self.class_tests))
A:networkx.tests.benchmark.name->GC.ljust(column_len)
A:networkx.tests.benchmark.t->min(timer.repeat(self.runs, self.reps))
A:networkx.tests.benchmark.b->Benchmark(classes, title, test_string, runs=3, reps=1)
networkx.tests.benchmark.Benchmark(self,graph_classes,title='',test_string=None,runs=3,reps=1000)
networkx.tests.benchmark.Benchmark.__init__(self,graph_classes,title='',test_string=None,runs=3,reps=1000)
networkx.tests.benchmark.Benchmark.__setitem__(self,graph_class,some_strs)
networkx.tests.benchmark.Benchmark.run(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_convert_numpy.py----------------------------------------
A:networkx.tests.test_convert_numpy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_numpy.self.G2->cycle_graph(10, create_using=nx.DiGraph())
A:networkx.tests.test_convert_numpy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_numpy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_numpy.g->cycle_graph(4)
A:networkx.tests.test_convert_numpy.e->cycle_graph(4).edges()
A:networkx.tests.test_convert_numpy.ex->zip(source, dest, weight)
A:networkx.tests.test_convert_numpy.GG->networkx.from_numpy_matrix(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GI->create_using.__class__(A)
A:networkx.tests.test_convert_numpy.A->numpy.matrix([[0, 1], [1, 0]])
A:networkx.tests.test_convert_numpy.P4->path_graph(4)
A:networkx.tests.test_convert_numpy.P3->path_graph(3)
A:networkx.tests.test_convert_numpy.nodelist->path_graph(3).nodes()
A:networkx.tests.test_convert_numpy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_numpy.WP4->networkx.Graph()
A:networkx.tests.test_convert_numpy.G->networkx.from_numpy_matrix(A, create_using=nx.MultiGraph())
A:networkx.tests.test_convert_numpy.expected->networkx.MultiGraph()
A:networkx.tests.test_convert_numpy.actual->networkx.from_numpy_matrix(A, parallel_edges=False, create_using=nx.MultiDiGraph())
networkx.tests.test_convert_numpy.TestConvertNumpy(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.__init__(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.assert_equal(self,G1,G2)
networkx.tests.test_convert_numpy.TestConvertNumpy.create_weighted(self,G)
networkx.tests.test_convert_numpy.TestConvertNumpy.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_numpy.TestConvertNumpy.setupClass(cls)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_dtype(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_parallel_edges(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_type(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_nodelist(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_numpy_multigraph(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_shape(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_symmetric(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_to_numpy_recarray(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_weight_keyword(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_convert_scipy.py----------------------------------------
A:networkx.tests.test_convert_scipy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_scipy.self.G2->cycle_graph(10, create_using=nx.DiGraph())
A:networkx.tests.test_convert_scipy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_scipy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_scipy.g->cycle_graph(4)
A:networkx.tests.test_convert_scipy.e->cycle_graph(4).edges()
A:networkx.tests.test_convert_scipy.ex->zip(source, dest, weight)
A:networkx.tests.test_convert_scipy.GG->networkx.from_scipy_sparse_matrix(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GI->create_using.__class__(AA)
A:networkx.tests.test_convert_scipy.ACSR->scipy.sparse.csr_matrix([[0, 1], [1, 0]]).tocsr()
A:networkx.tests.test_convert_scipy.ACOO->scipy.sparse.csr_matrix([[0, 1], [1, 0]]).tocoo()
A:networkx.tests.test_convert_scipy.ACSC->scipy.sparse.csr_matrix([[0, 1], [1, 0]]).tocsc()
A:networkx.tests.test_convert_scipy.AD->scipy.sparse.csr_matrix([[0, 1], [1, 0]]).todense()
A:networkx.tests.test_convert_scipy.AA->scipy.sparse.csr_matrix([[0, 1], [1, 0]]).toarray()
A:networkx.tests.test_convert_scipy.A->scipy.sparse.csr_matrix([[0, 1], [1, 0]])
A:networkx.tests.test_convert_scipy.P4->path_graph(4)
A:networkx.tests.test_convert_scipy.P3->path_graph(3)
A:networkx.tests.test_convert_scipy.nodelist->path_graph(3).nodes()
A:networkx.tests.test_convert_scipy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_scipy.WP4->networkx.Graph()
A:networkx.tests.test_convert_scipy.G->networkx.from_scipy_sparse_matrix(A, create_using=nx.MultiGraph())
A:networkx.tests.test_convert_scipy.M->networkx.to_scipy_sparse_matrix(G)
A:networkx.tests.test_convert_scipy.expected->networkx.MultiGraph()
A:networkx.tests.test_convert_scipy.actual->networkx.from_scipy_sparse_matrix(A, parallel_edges=False, create_using=nx.MultiDiGraph())
networkx.tests.test_convert_scipy.TestConvertNumpy(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.__init__(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.assert_equal(self,G1,G2)
networkx.tests.test_convert_scipy.TestConvertNumpy.create_weighted(self,G)
networkx.tests.test_convert_scipy.TestConvertNumpy.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_scipy.TestConvertNumpy.setupClass(cls)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_empty(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword_fail(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_from_scipy_sparse_matrix_parallel_edges(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_nodelist(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_null_fail(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_ordering(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_digraph(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_selfloop_graph(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_shape(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_symmetric(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_weight_keyword(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_convert.py----------------------------------------
A:networkx.tests.test_convert.G->Graph(e)
A:networkx.tests.test_convert.dod->to_dict_of_dicts(XGM)
A:networkx.tests.test_convert.GG->from_dict_of_lists(dol, create_using=MultiGraph())
A:networkx.tests.test_convert.GW->to_networkx_graph(dol, create_using=MultiGraph())
A:networkx.tests.test_convert.GI->MultiGraph(dol)
A:networkx.tests.test_convert.P4->path_graph(4)
A:networkx.tests.test_convert.P3->path_graph(3)
A:networkx.tests.test_convert.Gdod->Graph(dod)
A:networkx.tests.test_convert.e->Graph(e).edges()
A:networkx.tests.test_convert.ex->list(zip(source, dest, source))
A:networkx.tests.test_convert.dol->to_dict_of_lists(G)
A:networkx.tests.test_convert.(source, dest)->list(zip(*e))
A:networkx.tests.test_convert.XG->Graph()
A:networkx.tests.test_convert.XGM->MultiGraph()
A:networkx.tests.test_convert.XGS->Graph()
A:networkx.tests.test_convert.GE->from_dict_of_dicts(dod, create_using=MultiGraph(), multigraph_input=False)
A:networkx.tests.test_convert.GM->MultiGraph(G)
A:networkx.tests.test_convert.P->path_graph(4)
networkx.tests.test_TestConvert
networkx.tests.test_TestConvert.edgelists_equal(self,e1,e2)
networkx.tests.test_TestConvert.test_digraphs(self)
networkx.tests.test_TestConvert.test_directed_to_undirected(self)
networkx.tests.test_TestConvert.test_edgelists(self)
networkx.tests.test_TestConvert.test_graph(self)
networkx.tests.test_TestConvert.test_simple_graphs(self)
networkx.tests.test_TestConvert.test_with_multiedges_self_loops(self)
networkx.tests.test_convert.TestConvert
networkx.tests.test_convert.TestConvert.edgelists_equal(self,e1,e2)
networkx.tests.test_convert.TestConvert.test_digraphs(self)
networkx.tests.test_convert.TestConvert.test_directed_to_undirected(self)
networkx.tests.test_convert.TestConvert.test_edgelists(self)
networkx.tests.test_convert.TestConvert.test_graph(self)
networkx.tests.test_convert.TestConvert.test_simple_graphs(self)
networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/tests/test_exceptions.py----------------------------------------
networkx.tests.test_exceptions.test_raises_networkx_algorithm_error()
networkx.tests.test_exceptions.test_raises_networkx_error()
networkx.tests.test_exceptions.test_raises_networkx_exception()
networkx.tests.test_exceptions.test_raises_networkx_no_path()
networkx.tests.test_exceptions.test_raises_networkx_pointless_concept()
networkx.tests.test_exceptions.test_raises_networkx_unbounded()
networkx.tests.test_exceptions.test_raises_networkx_unfeasible()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/layout.py----------------------------------------
A:networkx.drawing.layout.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.drawing.layout.theta->numpy.arange(0, twopi, twopi / len(nodes))
A:networkx.drawing.layout.numb_shells->len(nlist)
A:networkx.drawing.layout.center->numpy.asarray(center)
A:networkx.drawing.layout.nfixed->dict(zip(G, range(len(G))))
A:networkx.drawing.layout.fixed->numpy.asarray([nfixed[v] for v in fixed])
A:networkx.drawing.layout.pos_coords->numpy.array(list(pos.values()))
A:networkx.drawing.layout.min_coords->numpy.array(list(pos.values())).min(0)
A:networkx.drawing.layout.pos_arr[i]->numpy.asarray(pos[n])
A:networkx.drawing.layout.A->numpy.asarray(A)
A:networkx.drawing.layout.pos->_rescale_layout(pos, scale)
A:networkx.drawing.layout.k->numpy.sqrt(1.0 / nnodes)
A:networkx.drawing.layout.delta->numpy.zeros((pos.shape[0], pos.shape[0], pos.shape[1]), dtype=A.dtype)
A:networkx.drawing.layout.distance->numpy.where(distance < 0.01, 0.01, distance)
A:networkx.drawing.layout.displacement->numpy.zeros((dim, nnodes))
A:networkx.drawing.layout.length->numpy.where(length < 0.01, 0.01, length)
A:networkx.drawing.layout.delta_pos->numpy.transpose(np.transpose(displacement) * t / length)
A:networkx.drawing.layout.Ai->numpy.asarray(A.getrowview(i).toarray())
A:networkx.drawing.layout.I->numpy.identity(nnodes, dtype=A.dtype)
A:networkx.drawing.layout.(eigenvalues, eigenvectors)->eigsh(L, k, which='SM', ncv=ncv)
A:networkx.drawing.layout.data->numpy.asarray(A.sum(axis=1).T)
A:networkx.drawing.layout.D->spdiags(data, 0, nnodes, nnodes)
A:networkx.drawing.layout.ncv->max(2 * k + 1, int(np.sqrt(nnodes)))
A:networkx.drawing.layout.maxlim->max(maxlim, pos[:, i].max())
networkx._fruchterman_reingold(A,dim=2,k=None,pos=None,fixed=None,iterations=50)
networkx._rescale_layout(pos,scale=1.0)
networkx._sparse_fruchterman_reingold(A,dim=2,k=None,pos=None,fixed=None,iterations=50)
networkx._sparse_spectral(A,dim=2)
networkx._spectral(A,dim=2)
networkx.circular_layout(G,dim=2,scale=1.0,center=None)
networkx.drawing.layout._fruchterman_reingold(A,dim=2,k=None,pos=None,fixed=None,iterations=50)
networkx.drawing.layout._rescale_layout(pos,scale=1.0)
networkx.drawing.layout._sparse_fruchterman_reingold(A,dim=2,k=None,pos=None,fixed=None,iterations=50)
networkx.drawing.layout._sparse_spectral(A,dim=2)
networkx.drawing.layout._spectral(A,dim=2)
networkx.drawing.layout.circular_layout(G,dim=2,scale=1.0,center=None)
networkx.drawing.layout.fruchterman_reingold_layout(G,dim=2,k=None,pos=None,fixed=None,iterations=50,weight='weight',scale=1.0,center=None)
networkx.drawing.layout.random_layout(G,dim=2,scale=1.0,center=None)
networkx.drawing.layout.setup_module(module)
networkx.drawing.layout.shell_layout(G,nlist=None,dim=2,scale=1.0,center=None)
networkx.drawing.layout.spectral_layout(G,dim=2,weight='weight',scale=1.0,center=None)
networkx.fruchterman_reingold_layout(G,dim=2,k=None,pos=None,fixed=None,iterations=50,weight='weight',scale=1.0,center=None)
networkx.random_layout(G,dim=2,scale=1.0,center=None)
networkx.setup_module(module)
networkx.shell_layout(G,nlist=None,dim=2,scale=1.0,center=None)
networkx.spectral_layout(G,dim=2,weight='weight',scale=1.0,center=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/nx_pydot.py----------------------------------------
A:networkx.drawing.nx_pydot.module->importlib.import_module(library)
A:networkx.drawing.nx_pydot.pydot->load_pydot()
A:networkx.drawing.nx_pydot.P->to_pydot(G)
A:networkx.drawing.nx_pydot.data->path.read()
A:networkx.drawing.nx_pydot.create_using->networkx.DiGraph()
A:networkx.drawing.nx_pydot.N->networkx.empty_graph(0, create_using)
A:networkx.drawing.nx_pydot.N.name->to_pydot(G).get_name()
A:networkx.drawing.nx_pydot.n->pydot.Node(make_str(n), **str_nodedata).get_name().strip('"')
A:networkx.drawing.nx_pydot.u->e.get_source()
A:networkx.drawing.nx_pydot.v->e.get_destination()
A:networkx.drawing.nx_pydot.attr->e.get_attributes()
A:networkx.drawing.nx_pydot.N.graph['graph']->to_pydot(G).get_attributes()
A:networkx.drawing.nx_pydot.name->networkx.empty_graph(0, create_using).graph.get('name')
A:networkx.drawing.nx_pydot.graph_defaults->networkx.empty_graph(0, create_using).graph.get('graph', {})
A:networkx.drawing.nx_pydot.str_nodedata->dict(((k, make_str(v)) for (k, v) in nodedata.items()))
A:networkx.drawing.nx_pydot.p->load_pydot().Node(make_str(n), **str_nodedata)
A:networkx.drawing.nx_pydot.str_edgedata->dict(((k, make_str(v)) for (k, v) in edgedata.items()))
A:networkx.drawing.nx_pydot.edge->load_pydot().Edge(make_str(u), make_str(v), **str_edgedata)
A:networkx.drawing.nx_pydot.D->to_pydot(G).create_dot(prog=prog)
A:networkx.drawing.nx_pydot.Q->load_pydot().graph_from_dot_data(D)
A:networkx.drawing.nx_pydot.pydot_node->load_pydot().Node(make_str(n)).get_name().encode('utf-8')
A:networkx.drawing.nx_pydot.node->load_pydot().graph_from_dot_data(D).get_node(pydot_node)
A:networkx.drawing.nx_pydot.(xx, yy)->pos.split(',')
networkx.drawing.nx_pydot.from_pydot(P)
networkx.drawing.nx_pydot.graphviz_layout(G,prog='neato',root=None,**kwds)
networkx.drawing.nx_pydot.load_pydot()
networkx.drawing.nx_pydot.networkx_from_pydot(D,create_using=None)
networkx.drawing.nx_pydot.pydot_from_networkx(N)
networkx.drawing.nx_pydot.pydot_layout(G,prog='neato',root=None,**kwds)
networkx.drawing.nx_pydot.read_dot(path)
networkx.drawing.nx_pydot.setup_module(module)
networkx.drawing.nx_pydot.to_pydot(N,strict=True)
networkx.drawing.nx_pydot.write_dot(G,path)
networkx.from_pydot(P)
networkx.graphviz_layout(G,prog='neato',root=None,**kwds)
networkx.load_pydot()
networkx.networkx_from_pydot(D,create_using=None)
networkx.pydot_from_networkx(N)
networkx.pydot_layout(G,prog='neato',root=None,**kwds)
networkx.read_dot(path)
networkx.setup_module(module)
networkx.to_pydot(N,strict=True)
networkx.write_dot(G,path)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/nx_agraph.py----------------------------------------
A:networkx.drawing.nx_agraph.create_using->networkx.MultiGraph()
A:networkx.drawing.nx_agraph.N->networkx.empty_graph(0, create_using)
A:networkx.drawing.nx_agraph.str_attr->dict(((str(k), v) for (k, v) in attr.items()))
A:networkx.drawing.nx_agraph.attr->dict(e.attr)
A:networkx.drawing.nx_agraph.N.graph['graph']->dict(A.graph_attr)
A:networkx.drawing.nx_agraph.N.graph['node']->dict(A.node_attr)
A:networkx.drawing.nx_agraph.N.graph['edge']->dict(A.edge_attr)
A:networkx.drawing.nx_agraph.directed->networkx.empty_graph(0, create_using).is_directed()
A:networkx.drawing.nx_agraph.A->to_agraph(G)
A:networkx.drawing.nx_agraph.str_edgedata->dict(((k, str(v)) for (k, v) in edgedata.items()))
A:networkx.drawing.nx_agraph.node->pygraphviz.Node(A, n)
A:networkx.drawing.nx_agraph.(xx, yy)->pygraphviz.Node(A, n).attr['pos'].split(',')
A:networkx.drawing.nx_agraph.edge->to_agraph(G).get_edge(u, v)
A:networkx.drawing.nx_agraph.edge.attr['label']->str(func(data))
A:networkx.drawing.nx_agraph.path->tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
networkx.display_pygraphviz(graph,path,format=None,prog=None,args='')
networkx.drawing.nx_agraph.display_pygraphviz(graph,path,format=None,prog=None,args='')
networkx.drawing.nx_agraph.from_agraph(A,create_using=None)
networkx.drawing.nx_agraph.graphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.pygraphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.read_dot(path)
networkx.drawing.nx_agraph.setup_module(module)
networkx.drawing.nx_agraph.to_agraph(N)
networkx.drawing.nx_agraph.view_pygraphviz(G,edgelabel=None,prog='dot',args='',suffix='',path=None)
networkx.drawing.nx_agraph.write_dot(G,path)
networkx.from_agraph(A,create_using=None)
networkx.graphviz_layout(G,prog='neato',root=None,args='')
networkx.pygraphviz_layout(G,prog='neato',root=None,args='')
networkx.read_dot(path)
networkx.setup_module(module)
networkx.to_agraph(N)
networkx.view_pygraphviz(G,edgelabel=None,prog='dot',args='',suffix='',path=None)
networkx.write_dot(G,path)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/nx_pylab.py----------------------------------------
A:networkx.drawing.nx_pylab.cf->matplotlib.pyplot.gca().get_figure()
A:networkx.drawing.nx_pylab.ax->matplotlib.pyplot.gca()
A:networkx.drawing.nx_pylab.b->matplotlib.pyplot.ishold()
A:networkx.drawing.nx_pylab.h->kwds.pop('hold', None)
A:networkx.drawing.nx_pylab.pos->networkx.drawing.graphviz_layout(G, prog)
A:networkx.drawing.nx_pylab.node_collection->matplotlib.pyplot.gca().scatter(xy[:, 0], xy[:, 1], s=node_size, c=node_color, marker=node_shape, cmap=cmap, vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths, label=label)
A:networkx.drawing.nx_pylab.edge_collection->LineCollection(edge_pos, colors=edge_colors, linewidths=lw, antialiaseds=(1,), linestyle=style, transOffset=ax.transData)
A:networkx.drawing.nx_pylab.nodelist->G.nodes()
A:networkx.drawing.nx_pylab.xy->numpy.array((x, y))
A:networkx.drawing.nx_pylab.edgelist->G.edges()
A:networkx.drawing.nx_pylab.edge_pos->numpy.asarray([(pos[e[0]], pos[e[1]]) for e in edgelist])
A:networkx.drawing.nx_pylab.edge_colors->tuple(edge_color)
A:networkx.drawing.nx_pylab.d->numpy.sqrt(float(dx ** 2 + dy ** 2))
A:networkx.drawing.nx_pylab.theta->numpy.arctan2(dy, dx)
A:networkx.drawing.nx_pylab.arrow_collection->LineCollection(a_pos, colors=arrow_colors, linewidths=[4 * ww for ww in lw], antialiaseds=(1,), transOffset=ax.transData)
A:networkx.drawing.nx_pylab.minx->numpy.amin(numpy.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.maxx->numpy.amax(numpy.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.miny->numpy.amin(numpy.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.maxy->numpy.amax(numpy.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.labels->dict((((u, v), d) for (u, v, d) in G.edges(data=True)))
A:networkx.drawing.nx_pylab.horizontalalignment->kwds.get('horizontalalignment', 'center')
A:networkx.drawing.nx_pylab.verticalalignment->kwds.get('verticalalignment', 'center')
A:networkx.drawing.nx_pylab.label->str(label)
A:networkx.drawing.nx_pylab.t->matplotlib.pyplot.gca().text(x, y, label, size=font_size, color=font_color, family=font_family, weight=font_weight, horizontalalignment=horizontalalignment, verticalalignment=verticalalignment, rotation=trans_angle, transform=ax.transData, bbox=bbox, zorder=1, clip_on=True)
A:networkx.drawing.nx_pylab.bbox->dict(boxstyle='round', ec=(1.0, 1.0, 1.0), fc=(1.0, 1.0, 1.0))
A:networkx.drawing.nx_pylab.nlist->kwargs.get('nlist', None)
networkx.draw(G,pos=None,ax=None,hold=None,**kwds)
networkx.draw_circular(G,**kwargs)
networkx.draw_graphviz(G,prog='neato',**kwargs)
networkx.draw_networkx(G,pos=None,arrows=True,with_labels=True,**kwds)
networkx.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,rotate=True,**kwds)
networkx.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=1.0,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=True,label=None,**kwds)
networkx.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,**kwds)
networkx.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='r',node_shape='o',alpha=1.0,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,label=None,**kwds)
networkx.draw_nx(G,pos,**kwds)
networkx.draw_random(G,**kwargs)
networkx.draw_shell(G,**kwargs)
networkx.draw_spectral(G,**kwargs)
networkx.draw_spring(G,**kwargs)
networkx.drawing.nx_pylab.draw(G,pos=None,ax=None,hold=None,**kwds)
networkx.drawing.nx_pylab.draw_circular(G,**kwargs)
networkx.drawing.nx_pylab.draw_graphviz(G,prog='neato',**kwargs)
networkx.drawing.nx_pylab.draw_networkx(G,pos=None,arrows=True,with_labels=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,rotate=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=1.0,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=True,label=None,**kwds)
networkx.drawing.nx_pylab.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,**kwds)
networkx.drawing.nx_pylab.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='r',node_shape='o',alpha=1.0,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,label=None,**kwds)
networkx.drawing.nx_pylab.draw_nx(G,pos,**kwds)
networkx.drawing.nx_pylab.draw_random(G,**kwargs)
networkx.drawing.nx_pylab.draw_shell(G,**kwargs)
networkx.drawing.nx_pylab.draw_spectral(G,**kwargs)
networkx.drawing.nx_pylab.draw_spring(G,**kwargs)
networkx.drawing.nx_pylab.setup_module(module)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/tests/test_agraph.py----------------------------------------
A:networkx.drawing.tests.test_agraph.G->networkx.Graph(name='test')
A:networkx.drawing.tests.test_agraph.A->networkx.to_agraph(G)
A:networkx.drawing.tests.test_agraph.H->networkx.from_agraph(A)
A:networkx.drawing.tests.test_agraph.fname->tempfile.mktemp()
A:networkx.drawing.tests.test_agraph.Hin->networkx.drawing.nx_agraph.read_dot(fh)
A:networkx.drawing.tests.test_agraph.(fd, fname)->tempfile.mkstemp()
A:networkx.drawing.tests.test_agraph.fh->open(fname, 'r')
networkx.drawing.tests.test_agraph.TestAGraph(object)
networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.assert_equal(self,G1,G2)
networkx.drawing.tests.test_agraph.TestAGraph.build_graph(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.setupClass(cls)
networkx.drawing.tests.test_agraph.TestAGraph.testDirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testMultiDirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testMultiUndirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testUndirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.test_from_agraph_name(self)
networkx.tests.test_agraph.TestAGraph(object)
networkx.tests.test_agraph.TestAGraph.agraph_checks(self,G)
networkx.tests.test_agraph.TestAGraph.assert_equal(self,G1,G2)
networkx.tests.test_agraph.TestAGraph.build_graph(self,G)
networkx.tests.test_agraph.TestAGraph.setupClass(cls)
networkx.tests.test_agraph.TestAGraph.testDirected(self)
networkx.tests.test_agraph.TestAGraph.testMultiDirected(self)
networkx.tests.test_agraph.TestAGraph.testMultiUndirected(self)
networkx.tests.test_agraph.TestAGraph.testUndirected(self)
networkx.tests.test_agraph.TestAGraph.test_from_agraph_name(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/tests/test_layout.py----------------------------------------
A:networkx.drawing.tests.test_layout.self.Gi->networkx.grid_2d_graph(5, 5)
A:networkx.drawing.tests.test_layout.self.Gs->networkx.Graph()
A:networkx.drawing.tests.test_layout.self.bigG->networkx.grid_2d_graph(25, 25)
A:networkx.drawing.tests.test_layout.vpos->networkx.spectral_layout(G, center=(2, 3))
A:networkx.drawing.tests.test_layout.G->networkx.Graph()
A:networkx.drawing.tests.test_layout.center->numpy.array(center)
A:networkx.drawing.tests.test_layout.A->networkx.to_scipy_sparse_matrix(self.Gs, dtype='d')
A:networkx.drawing.tests.test_layout.pos->networkx.drawing.layout._sparse_fruchterman_reingold(A, dim=3)
networkx.drawing.tests.test_layout.TestLayout(object)
networkx.drawing.tests.test_layout.TestLayout.check_scale_and_center(self,pos,scale,center)
networkx.drawing.tests.test_layout.TestLayout.setUp(self)
networkx.drawing.tests.test_layout.TestLayout.setupClass(cls)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy(self)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy(self)
networkx.drawing.tests.test_layout.TestLayout.test_empty_graph(self)
networkx.drawing.tests.test_layout.TestLayout.test_scale_and_center_arg(self)
networkx.drawing.tests.test_layout.TestLayout.test_shell_layout(self)
networkx.drawing.tests.test_layout.TestLayout.test_single_node(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_int(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_string(self)
networkx.drawing.tests.test_layout.TestLayout.test_spectral_for_small_graphs(self)
networkx.drawing.tests.test_layout.TestLayout.test_spring_args(self)
networkx.tests.test_TestLayout(object)
networkx.tests.test_TestLayout.check_scale_and_center(self,pos,scale,center)
networkx.tests.test_TestLayout.setUp(self)
networkx.tests.test_TestLayout.setupClass(cls)
networkx.tests.test_TestLayout.test_adjacency_interface_numpy(self)
networkx.tests.test_TestLayout.test_adjacency_interface_scipy(self)
networkx.tests.test_TestLayout.test_empty_graph(self)
networkx.tests.test_TestLayout.test_scale_and_center_arg(self)
networkx.tests.test_TestLayout.test_shell_layout(self)
networkx.tests.test_TestLayout.test_single_node(self)
networkx.tests.test_TestLayout.test_smoke_int(self)
networkx.tests.test_TestLayout.test_smoke_string(self)
networkx.tests.test_TestLayout.test_spectral_for_small_graphs(self)
networkx.tests.test_TestLayout.test_spring_args(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/tests/test_pylab.py----------------------------------------
A:networkx.drawing.tests.test_pylab.self.G->networkx.barbell_graph(5, 10)
networkx.drawing.tests.test_pylab.TestPylab(object)
networkx.drawing.tests.test_pylab.TestPylab.setUp(self)
networkx.drawing.tests.test_pylab.TestPylab.setupClass(cls)
networkx.drawing.tests.test_pylab.TestPylab.test_draw(self)
networkx.tests.test_pylab.TestPylab(object)
networkx.tests.test_pylab.TestPylab.setUp(self)
networkx.tests.test_pylab.TestPylab.setupClass(cls)
networkx.tests.test_pylab.TestPylab.test_draw(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/drawing/tests/test_pydot.py----------------------------------------
A:networkx.drawing.tests.test_pydot.pydot->networkx.drawing.nx_pydot.load_pydot()
A:networkx.drawing.tests.test_pydot.(H, P)->self.build_graph(G)
A:networkx.drawing.tests.test_pydot.G2->H.__class__(nx.from_pydot(P))
A:networkx.drawing.tests.test_pydot.fname->tempfile.mktemp()
A:networkx.drawing.tests.test_pydot.Pin->networkx.drawing.nx_pydot.load_pydot().graph_from_dot_file(fname)
A:networkx.drawing.tests.test_pydot.n1->sorted([p.get_name() for p in P.get_node_list()])
A:networkx.drawing.tests.test_pydot.n2->sorted([p.get_name() for p in Pin.get_node_list()])
A:networkx.drawing.tests.test_pydot.Hin->H.__class__(Hin)
networkx.drawing.tests.test_pydot.TestPydot(object)
networkx.drawing.tests.test_pydot.TestPydot.assert_equal(self,G1,G2)
networkx.drawing.tests.test_pydot.TestPydot.build_graph(self,G)
networkx.drawing.tests.test_pydot.TestPydot.pydot_checks(self,G)
networkx.drawing.tests.test_pydot.TestPydot.setupClass(cls)
networkx.drawing.tests.test_pydot.TestPydot.testDirected(self)
networkx.drawing.tests.test_pydot.TestPydot.testUndirected(self)
networkx.tests.test_pydot.TestPydot(object)
networkx.tests.test_pydot.TestPydot.assert_equal(self,G1,G2)
networkx.tests.test_pydot.TestPydot.build_graph(self,G)
networkx.tests.test_pydot.TestPydot.pydot_checks(self,G)
networkx.tests.test_pydot.TestPydot.setupClass(cls)
networkx.tests.test_pydot.TestPydot.testDirected(self)
networkx.tests.test_pydot.TestPydot.testUndirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/multidigraph.py----------------------------------------
A:networkx.classes.multidigraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.multidigraph.self.succ[u]->self.adjlist_dict_factory()
A:networkx.classes.multidigraph.self.pred[u]->self.adjlist_dict_factory()
A:networkx.classes.multidigraph.self.succ[v]->self.adjlist_dict_factory()
A:networkx.classes.multidigraph.self.pred[v]->self.adjlist_dict_factory()
A:networkx.classes.multidigraph.key->len(keydict)
A:networkx.classes.multidigraph.datadict->self.edge_attr_dict_factory()
A:networkx.classes.multidigraph.keydict->self.edge_key_dict_factory()
A:networkx.classes.multidigraph.nodes_nbrs->self.succ.items()
A:networkx.classes.multidigraph.indeg->sum([len(data) for data in pred.values()])
A:networkx.classes.multidigraph.outdeg->sum([len(data) for data in succ.values()])
A:networkx.classes.multidigraph.deg->sum([d.get(weight, 1) for data in succ.values() for d in data.values()])
A:networkx.classes.multidigraph.H->self.__class__(name='Reverse of (%s)' % self.name)
A:networkx.classes.multidigraph.H.graph->deepcopy(self.graph)
A:networkx.classes.multidigraph.H.node->deepcopy(self.node)
A:networkx.classes.multidigraph.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.multidigraph.H_succ[n]->self.__class__(name='Reverse of (%s)' % self.name).adjlist_dict_factory()
A:networkx.classes.multidigraph.H_pred[n]->self.__class__(name='Reverse of (%s)' % self.name).adjlist_dict_factory()
A:networkx.classes.multidigraph.ed->edgedict.copy()
networkx.MultiDiGraph(self,data=None,**attr)
networkx.MultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.MultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False,default=None)
networkx.MultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.MultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.MultiDiGraph.is_directed(self)
networkx.MultiDiGraph.is_multigraph(self)
networkx.MultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.MultiDiGraph.reverse(self,copy=True)
networkx.MultiDiGraph.subgraph(self,nbunch)
networkx.MultiDiGraph.to_directed(self)
networkx.MultiDiGraph.to_undirected(self,reciprocal=False)
networkx.classes.multidigraph.MultiDiGraph(self,data=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.__init__(self,data=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False,default=None)
networkx.classes.multidigraph.MultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.multidigraph.MultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.multidigraph.MultiDiGraph.is_directed(self)
networkx.classes.multidigraph.MultiDiGraph.is_multigraph(self)
networkx.classes.multidigraph.MultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.multidigraph.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multidigraph.MultiDiGraph.reverse(self,copy=True)
networkx.classes.multidigraph.MultiDiGraph.subgraph(self,nbunch)
networkx.classes.multidigraph.MultiDiGraph.to_directed(self)
networkx.classes.multidigraph.MultiDiGraph.to_undirected(self,reciprocal=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/ordered.py----------------------------------------
networkx.OrderedDiGraph(DiGraph)
networkx.OrderedGraph(Graph)
networkx.OrderedMultiDiGraph(MultiDiGraph)
networkx.OrderedMultiGraph(MultiGraph)
networkx.classes.ordered.OrderedDiGraph(DiGraph)
networkx.classes.ordered.OrderedGraph(Graph)
networkx.classes.ordered.OrderedMultiDiGraph(MultiDiGraph)
networkx.classes.ordered.OrderedMultiGraph(MultiGraph)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/multigraph.py----------------------------------------
A:networkx.classes.multigraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.multigraph.self.adj[u]->self.adjlist_dict_factory()
A:networkx.classes.multigraph.self.adj[v]->self.adjlist_dict_factory()
A:networkx.classes.multigraph.key->len(keydict)
A:networkx.classes.multigraph.datadict->self.edge_attr_dict_factory()
A:networkx.classes.multigraph.keydict->self.edge_key_dict_factory()
A:networkx.classes.multigraph.ne->len(e)
A:networkx.classes.multigraph.nodes_nbrs->self.adj.items()
A:networkx.classes.multigraph.deg->sum([d.get(weight, 1) for data in nbrs.values() for d in data.values()])
A:networkx.classes.multigraph.G->MultiDiGraph()
A:networkx.classes.multigraph.G.graph->deepcopy(self.graph)
A:networkx.classes.multigraph.G.node->deepcopy(self.node)
A:networkx.classes.multigraph.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.multigraph.H->self.__class__()
A:networkx.classes.multigraph.Hnbrs->self.__class__().adjlist_dict_factory()
A:networkx.classes.multigraph.ed->edgedict.copy()
networkx.MultiGraph(self,data=None,**attr)
networkx.MultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.MultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.MultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.MultiGraph.edges(self,nbunch=None,data=False,keys=False,default=None)
networkx.MultiGraph.edges_iter(self,nbunch=None,data=False,keys=False,default=None)
networkx.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.MultiGraph.has_edge(self,u,v,key=None)
networkx.MultiGraph.is_directed(self)
networkx.MultiGraph.is_multigraph(self)
networkx.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.MultiGraph.remove_edge(self,u,v,key=None)
networkx.MultiGraph.remove_edges_from(self,ebunch)
networkx.MultiGraph.selfloop_edges(self,data=False,keys=False,default=None)
networkx.MultiGraph.subgraph(self,nbunch)
networkx.MultiGraph.to_directed(self)
networkx.classes.multigraph.MultiGraph(self,data=None,**attr)
networkx.classes.multigraph.MultiGraph.__init__(self,data=None,**attr)
networkx.classes.multigraph.MultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.multigraph.MultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.multigraph.MultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.multigraph.MultiGraph.edges(self,nbunch=None,data=False,keys=False,default=None)
networkx.classes.multigraph.MultiGraph.edges_iter(self,nbunch=None,data=False,keys=False,default=None)
networkx.classes.multigraph.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.classes.multigraph.MultiGraph.has_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.is_directed(self)
networkx.classes.multigraph.MultiGraph.is_multigraph(self)
networkx.classes.multigraph.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.classes.multigraph.MultiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.remove_edges_from(self,ebunch)
networkx.classes.multigraph.MultiGraph.selfloop_edges(self,data=False,keys=False,default=None)
networkx.classes.multigraph.MultiGraph.subgraph(self,nbunch)
networkx.classes.multigraph.MultiGraph.to_directed(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/digraph.py----------------------------------------
A:networkx.classes.digraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.digraph.self.node->ndf()
A:networkx.classes.digraph.self.adj->ndf()
A:networkx.classes.digraph.self.pred->ndf()
A:networkx.classes.digraph.self.succ[n]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.pred[n]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.node[n]->attr.copy()
A:networkx.classes.digraph.self.succ[nn]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.pred[nn]->self.adjlist_dict_factory()
A:networkx.classes.digraph.newdict->attr.copy()
A:networkx.classes.digraph.self.succ[u]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.pred[u]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.succ[v]->self.adjlist_dict_factory()
A:networkx.classes.digraph.self.pred[v]->self.adjlist_dict_factory()
A:networkx.classes.digraph.datadict->self.adj[u].get(v, self.edge_attr_dict_factory())
A:networkx.classes.digraph.ne->len(e)
A:networkx.classes.digraph.nodes_nbrs->self.succ.items()
A:networkx.classes.digraph.H->self.__class__()
A:networkx.classes.digraph.H.graph->deepcopy(self.graph)
A:networkx.classes.digraph.H.node->deepcopy(self.node)
A:networkx.classes.digraph.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.digraph.H_succ[n]->self.__class__().adjlist_dict_factory()
A:networkx.classes.digraph.H_pred[n]->self.__class__().adjlist_dict_factory()
networkx.DiGraph(self,data=None,**attr)
networkx.DiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.DiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.DiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.DiGraph.add_nodes_from(self,nodes,**attr)
networkx.DiGraph.clear(self)
networkx.DiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.edges_iter(self,nbunch=None,data=False,default=None)
networkx.DiGraph.has_predecessor(self,u,v)
networkx.DiGraph.has_successor(self,u,v)
networkx.DiGraph.in_degree(self,nbunch=None,weight=None)
networkx.DiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.in_edges(self,nbunch=None,data=False)
networkx.DiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.DiGraph.is_directed(self)
networkx.DiGraph.is_multigraph(self)
networkx.DiGraph.out_degree(self,nbunch=None,weight=None)
networkx.DiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.predecessors(self,n)
networkx.DiGraph.predecessors_iter(self,n)
networkx.DiGraph.remove_edge(self,u,v)
networkx.DiGraph.remove_edges_from(self,ebunch)
networkx.DiGraph.remove_node(self,n)
networkx.DiGraph.remove_nodes_from(self,nbunch)
networkx.DiGraph.reverse(self,copy=True)
networkx.DiGraph.subgraph(self,nbunch)
networkx.DiGraph.successors(self,n)
networkx.DiGraph.successors_iter(self,n)
networkx.DiGraph.to_directed(self)
networkx.DiGraph.to_undirected(self,reciprocal=False)
networkx.classes.digraph.DiGraph(self,data=None,**attr)
networkx.classes.digraph.DiGraph.__init__(self,data=None,**attr)
networkx.classes.digraph.DiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_nodes_from(self,nodes,**attr)
networkx.classes.digraph.DiGraph.clear(self)
networkx.classes.digraph.DiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.edges_iter(self,nbunch=None,data=False,default=None)
networkx.classes.digraph.DiGraph.has_predecessor(self,u,v)
networkx.classes.digraph.DiGraph.has_successor(self,u,v)
networkx.classes.digraph.DiGraph.in_degree(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.in_edges(self,nbunch=None,data=False)
networkx.classes.digraph.DiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.classes.digraph.DiGraph.is_directed(self)
networkx.classes.digraph.DiGraph.is_multigraph(self)
networkx.classes.digraph.DiGraph.out_degree(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.predecessors(self,n)
networkx.classes.digraph.DiGraph.predecessors_iter(self,n)
networkx.classes.digraph.DiGraph.remove_edge(self,u,v)
networkx.classes.digraph.DiGraph.remove_edges_from(self,ebunch)
networkx.classes.digraph.DiGraph.remove_node(self,n)
networkx.classes.digraph.DiGraph.remove_nodes_from(self,nbunch)
networkx.classes.digraph.DiGraph.reverse(self,copy=True)
networkx.classes.digraph.DiGraph.subgraph(self,nbunch)
networkx.classes.digraph.DiGraph.successors(self,n)
networkx.classes.digraph.DiGraph.successors_iter(self,n)
networkx.classes.digraph.DiGraph.to_directed(self)
networkx.classes.digraph.DiGraph.to_undirected(self,reciprocal=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/function.py----------------------------------------
A:networkx.classes.function.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.function.n->number_of_nodes(G)
A:networkx.classes.function.m->number_of_edges(G)
A:networkx.classes.function.degseq->list(G.degree().values())
A:networkx.classes.function.H->G.__class__()
A:networkx.classes.function.nnodes->G.number_of_nodes()
A:networkx.classes.function.s->sum(G.degree().values())
A:networkx.classes.function.values->graph.neighbors_iter(node)
A:networkx.classes.function.edges->G.edges(data=True)
A:networkx.classes.function.nodes->set(graph)
A:networkx.classes.function.u->set(graph).pop()
A:networkx.classes.function.data->G.get_edge_data(*edge)
A:networkx.classes.function.msg->'Edge {!r} does not exist.'.format(edge)
networkx.all_neighbors(graph,node)
networkx.classes.function.all_neighbors(graph,node)
networkx.classes.function.common_neighbors(G,u,v)
networkx.classes.function.create_empty_copy(G,with_nodes=True)
networkx.classes.function.degree(G,nbunch=None,weight=None)
networkx.classes.function.degree_histogram(G)
networkx.classes.function.density(G)
networkx.classes.function.edges(G,nbunch=None)
networkx.classes.function.edges_iter(G,nbunch=None)
networkx.classes.function.freeze(G)
networkx.classes.function.frozen(*args)
networkx.classes.function.get_edge_attributes(G,name)
networkx.classes.function.get_node_attributes(G,name)
networkx.classes.function.info(G,n=None)
networkx.classes.function.is_directed(G)
networkx.classes.function.is_empty(G)
networkx.classes.function.is_frozen(G)
networkx.classes.function.is_negatively_weighted(G,edge=None,weight='weight')
networkx.classes.function.is_weighted(G,edge=None,weight='weight')
networkx.classes.function.neighbors(G,n)
networkx.classes.function.nodes(G)
networkx.classes.function.nodes_iter(G)
networkx.classes.function.non_edges(graph)
networkx.classes.function.non_neighbors(graph,node)
networkx.classes.function.number_of_edges(G)
networkx.classes.function.number_of_nodes(G)
networkx.classes.function.set_edge_attributes(G,name,values)
networkx.classes.function.set_node_attributes(G,name,values)
networkx.classes.function.subgraph(G,nbunch)
networkx.common_neighbors(G,u,v)
networkx.create_empty_copy(G,with_nodes=True)
networkx.degree(G,nbunch=None,weight=None)
networkx.degree_histogram(G)
networkx.density(G)
networkx.edges(G,nbunch=None)
networkx.edges_iter(G,nbunch=None)
networkx.freeze(G)
networkx.frozen(*args)
networkx.get_edge_attributes(G,name)
networkx.get_node_attributes(G,name)
networkx.info(G,n=None)
networkx.is_directed(G)
networkx.is_empty(G)
networkx.is_frozen(G)
networkx.is_negatively_weighted(G,edge=None,weight='weight')
networkx.is_weighted(G,edge=None,weight='weight')
networkx.neighbors(G,n)
networkx.nodes(G)
networkx.nodes_iter(G)
networkx.non_edges(graph)
networkx.non_neighbors(graph,node)
networkx.number_of_edges(G)
networkx.number_of_nodes(G)
networkx.set_edge_attributes(G,name,values)
networkx.set_node_attributes(G,name,values)
networkx.subgraph(G,nbunch)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/graph.py----------------------------------------
A:networkx.classes.graph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.graph.self.node->ndf()
A:networkx.classes.graph.self.adj->ndf()
A:networkx.classes.graph.self.adj[n]->self.adjlist_dict_factory()
A:networkx.classes.graph.self.node[n]->attr.copy()
A:networkx.classes.graph.self.adj[nn]->self.adjlist_dict_factory()
A:networkx.classes.graph.newdict->attr.copy()
A:networkx.classes.graph.nbrs->list(adj[n].keys())
A:networkx.classes.graph.self.adj[u]->self.adjlist_dict_factory()
A:networkx.classes.graph.self.adj[v]->self.adjlist_dict_factory()
A:networkx.classes.graph.datadict->self.adj[u].get(v, self.edge_attr_dict_factory())
A:networkx.classes.graph.ne->len(e)
A:networkx.classes.graph.nodes_nbrs->self.adj.items()
A:networkx.classes.graph.G->DiGraph()
A:networkx.classes.graph.G.graph->deepcopy(self.graph)
A:networkx.classes.graph.G.node->deepcopy(self.node)
A:networkx.classes.graph.bunch->bunch_iter(nbunch, self.adj)
A:networkx.classes.graph.H->self.__class__()
A:networkx.classes.graph.Hnbrs->self.__class__().adjlist_dict_factory()
A:networkx.classes.graph.nlist->list(nodes)
A:networkx.classes.graph.edges->zip(nlist, nlist[1:] + [nlist[0]])
networkx.Graph(self,data=None,**attr)
networkx.Graph.__contains__(self,n)
networkx.Graph.__getitem__(self,n)
networkx.Graph.__iter__(self)
networkx.Graph.__len__(self)
networkx.Graph.__str__(self)
networkx.Graph.add_cycle(self,nodes,**attr)
networkx.Graph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.Graph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.Graph.add_node(self,n,attr_dict=None,**attr)
networkx.Graph.add_nodes_from(self,nodes,**attr)
networkx.Graph.add_path(self,nodes,**attr)
networkx.Graph.add_star(self,nodes,**attr)
networkx.Graph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.Graph.adjacency_iter(self)
networkx.Graph.adjacency_list(self)
networkx.Graph.clear(self)
networkx.Graph.copy(self)
networkx.Graph.degree(self,nbunch=None,weight=None)
networkx.Graph.degree_iter(self,nbunch=None,weight=None)
networkx.Graph.edges(self,nbunch=None,data=False,default=None)
networkx.Graph.edges_iter(self,nbunch=None,data=False,default=None)
networkx.Graph.get_edge_data(self,u,v,default=None)
networkx.Graph.has_edge(self,u,v)
networkx.Graph.has_node(self,n)
networkx.Graph.is_directed(self)
networkx.Graph.is_multigraph(self)
networkx.Graph.name(self)
networkx.Graph.name(self,s)
networkx.Graph.nbunch_iter(self,nbunch=None)
networkx.Graph.neighbors(self,n)
networkx.Graph.neighbors_iter(self,n)
networkx.Graph.nodes(self,data=False)
networkx.Graph.nodes_iter(self,data=False)
networkx.Graph.nodes_with_selfloops(self)
networkx.Graph.number_of_edges(self,u=None,v=None)
networkx.Graph.number_of_nodes(self)
networkx.Graph.number_of_selfloops(self)
networkx.Graph.order(self)
networkx.Graph.remove_edge(self,u,v)
networkx.Graph.remove_edges_from(self,ebunch)
networkx.Graph.remove_node(self,n)
networkx.Graph.remove_nodes_from(self,nodes)
networkx.Graph.selfloop_edges(self,data=False,default=None)
networkx.Graph.size(self,weight=None)
networkx.Graph.subgraph(self,nbunch)
networkx.Graph.to_directed(self)
networkx.Graph.to_undirected(self)
networkx.classes.graph.Graph(self,data=None,**attr)
networkx.classes.graph.Graph.__contains__(self,n)
networkx.classes.graph.Graph.__getitem__(self,n)
networkx.classes.graph.Graph.__init__(self,data=None,**attr)
networkx.classes.graph.Graph.__iter__(self)
networkx.classes.graph.Graph.__len__(self)
networkx.classes.graph.Graph.__str__(self)
networkx.classes.graph.Graph.add_cycle(self,nodes,**attr)
networkx.classes.graph.Graph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_nodes_from(self,nodes,**attr)
networkx.classes.graph.Graph.add_path(self,nodes,**attr)
networkx.classes.graph.Graph.add_star(self,nodes,**attr)
networkx.classes.graph.Graph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.classes.graph.Graph.adjacency_iter(self)
networkx.classes.graph.Graph.adjacency_list(self)
networkx.classes.graph.Graph.clear(self)
networkx.classes.graph.Graph.copy(self)
networkx.classes.graph.Graph.degree(self,nbunch=None,weight=None)
networkx.classes.graph.Graph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.graph.Graph.edges(self,nbunch=None,data=False,default=None)
networkx.classes.graph.Graph.edges_iter(self,nbunch=None,data=False,default=None)
networkx.classes.graph.Graph.get_edge_data(self,u,v,default=None)
networkx.classes.graph.Graph.has_edge(self,u,v)
networkx.classes.graph.Graph.has_node(self,n)
networkx.classes.graph.Graph.is_directed(self)
networkx.classes.graph.Graph.is_multigraph(self)
networkx.classes.graph.Graph.name(self)
networkx.classes.graph.Graph.name(self,s)
networkx.classes.graph.Graph.nbunch_iter(self,nbunch=None)
networkx.classes.graph.Graph.neighbors(self,n)
networkx.classes.graph.Graph.neighbors_iter(self,n)
networkx.classes.graph.Graph.nodes(self,data=False)
networkx.classes.graph.Graph.nodes_iter(self,data=False)
networkx.classes.graph.Graph.nodes_with_selfloops(self)
networkx.classes.graph.Graph.number_of_edges(self,u=None,v=None)
networkx.classes.graph.Graph.number_of_nodes(self)
networkx.classes.graph.Graph.number_of_selfloops(self)
networkx.classes.graph.Graph.order(self)
networkx.classes.graph.Graph.remove_edge(self,u,v)
networkx.classes.graph.Graph.remove_edges_from(self,ebunch)
networkx.classes.graph.Graph.remove_node(self,n)
networkx.classes.graph.Graph.remove_nodes_from(self,nodes)
networkx.classes.graph.Graph.selfloop_edges(self,data=False,default=None)
networkx.classes.graph.Graph.size(self,weight=None)
networkx.classes.graph.Graph.subgraph(self,nbunch)
networkx.classes.graph.Graph.to_directed(self)
networkx.classes.graph.Graph.to_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_timing.py----------------------------------------
A:networkx.classes.tests.test_timing.headers->list(self.gc)
A:networkx.classes.tests.test_timing.raw_times->' '.join((gc.rjust(12) for gc in headers))
A:networkx.classes.tests.test_timing.(t, bt)->self.time_me(gc, tst, params[:4])
A:networkx.classes.tests.test_timing.hdrs->' '.join((gc.rjust(12) for gc in headers))
A:networkx.classes.tests.test_timing.output->' '.join(('{:12.3f}'.format(t[5]) for t in res))
A:networkx.classes.tests.test_timing.G->eval('nx.' + gc + '()')
A:networkx.classes.tests.test_timing.tgc->Timer(stmt, setup)
A:networkx.classes.tests.test_timing.tcc->Timer(stmt, compare_setup)
A:networkx.classes.tests.test_timing.t->Timer(stmt, setup).repeat(repeat=runs, number=reps)
A:networkx.classes.tests.test_timing.bt->Timer(stmt, compare_setup).repeat(repeat=runs, number=reps)
A:networkx.classes.tests.test_timing.b->Benchmark(classes, tests=all_tests)
networkx.classes.tests.test_timing.Benchmark(self,graph_classes,tests=all_tests)
networkx.classes.tests.test_timing.Benchmark.__init__(self,graph_classes,tests=all_tests)
networkx.classes.tests.test_timing.Benchmark.run(self,verbose=False,cutoff_default=3)
networkx.classes.tests.test_timing.Benchmark.time_me(self,gc,tst,params)
networkx.tests.test_timing.Benchmark(self,graph_classes,tests=all_tests)
networkx.tests.test_timing.Benchmark.run(self,verbose=False,cutoff_default=3)
networkx.tests.test_timing.Benchmark.time_me(self,gc,tst,params)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_digraph_historical.py----------------------------------------
A:networkx.classes.tests.test_digraph_historical.G->networkx.complete_graph(10)
A:networkx.classes.tests.test_digraph_historical.H->networkx.DiGraph()
A:networkx.classes.tests.test_digraph_historical.HR->networkx.DiGraph().reverse()
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical(HistoricalTests)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setUp(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical(HistoricalTests)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.setUp(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_successors(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_function.py----------------------------------------
A:networkx.classes.tests.test_function.self.G->networkx.Graph({0: [1, 2, 3], 1: [1, 2, 0], 4: []}, name='Test')
A:networkx.classes.tests.test_function.self.Gnodes->list(range(5))
A:networkx.classes.tests.test_function.self.DG->networkx.DiGraph({0: [1, 2, 3], 1: [1, 2, 0], 4: []})
A:networkx.classes.tests.test_function.self.DGnodes->list(range(5))
A:networkx.classes.tests.test_function.G->networkx.path_graph(3, create_using=G)
A:networkx.classes.tests.test_function.info->networkx.info(G, n=1)
A:networkx.classes.tests.test_function.expected_graph_info->'\n'.join(['Name: path_graph(5)', 'Type: DiGraph', 'Number of nodes: 5', 'Number of edges: 4', 'Average in degree:   0.8000', 'Average out degree:   0.8000'])
A:networkx.classes.tests.test_function.expected_node_info->'\n'.join(['Node 1 has the following properties:', 'Degree: 2', 'Neighbors: 2'])
A:networkx.classes.tests.test_function.graph->networkx.DiGraph()
A:networkx.classes.tests.test_function.pop->random.sample(graph.nodes(), 1)
A:networkx.classes.tests.test_function.nbors->list(nx.non_neighbors(graph, 0))
A:networkx.classes.tests.test_function.nedges->list(nx.non_edges(graph))
A:networkx.classes.tests.test_function.result->sorted(self.func(G, u, v))
A:networkx.classes.tests.test_function.vals->dict(zip(edges, range(len(edges))))
A:networkx.classes.tests.test_function.attrs->networkx.get_edge_attributes(G, attr)
networkx.classes.tests.test_function.TestCommonNeighbors
networkx.classes.tests.test_function.TestCommonNeighbors.setUp(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_K5(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_P3(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_S4(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_custom1(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_custom2(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_digraph(self)
networkx.classes.tests.test_function.TestCommonNeighbors.test_nonexistent_nodes(self)
networkx.classes.tests.test_function.TestFunction(object)
networkx.classes.tests.test_function.TestFunction.setUp(self)
networkx.classes.tests.test_function.TestFunction.test_create_empty_copy(self)
networkx.classes.tests.test_function.TestFunction.test_degree(self)
networkx.classes.tests.test_function.TestFunction.test_degree_histogram(self)
networkx.classes.tests.test_function.TestFunction.test_density(self)
networkx.classes.tests.test_function.TestFunction.test_density_selfloop(self)
networkx.classes.tests.test_function.TestFunction.test_edges(self)
networkx.classes.tests.test_function.TestFunction.test_edges_iter(self)
networkx.classes.tests.test_function.TestFunction.test_freeze(self)
networkx.classes.tests.test_function.TestFunction.test_info(self)
networkx.classes.tests.test_function.TestFunction.test_info_digraph(self)
networkx.classes.tests.test_function.TestFunction.test_is_directed(self)
networkx.classes.tests.test_function.TestFunction.test_is_frozen(self)
networkx.classes.tests.test_function.TestFunction.test_is_negatively_weighted(self)
networkx.classes.tests.test_function.TestFunction.test_is_weighted(self)
networkx.classes.tests.test_function.TestFunction.test_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_nodes_iter(self)
networkx.classes.tests.test_function.TestFunction.test_non_edges(self)
networkx.classes.tests.test_function.TestFunction.test_non_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_edges(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_subgraph(self)
networkx.classes.tests.test_function.test_get_edge_attributes()
networkx.classes.tests.test_function.test_get_node_attributes()
networkx.classes.tests.test_function.test_is_empty()
networkx.classes.tests.test_function.test_set_edge_attributes()
networkx.classes.tests.test_function.test_set_edge_attributes_multi()
networkx.classes.tests.test_function.test_set_node_attributes()
networkx.tests.test_TestCommonNeighbors
networkx.tests.test_TestCommonNeighbors.setUp(self)
networkx.tests.test_TestCommonNeighbors.test_K5(self)
networkx.tests.test_TestCommonNeighbors.test_P3(self)
networkx.tests.test_TestCommonNeighbors.test_S4(self)
networkx.tests.test_TestCommonNeighbors.test_custom1(self)
networkx.tests.test_TestCommonNeighbors.test_custom2(self)
networkx.tests.test_TestCommonNeighbors.test_digraph(self)
networkx.tests.test_TestCommonNeighbors.test_nonexistent_nodes(self)
networkx.tests.test_TestFunction(object)
networkx.tests.test_TestFunction.setUp(self)
networkx.tests.test_TestFunction.test_create_empty_copy(self)
networkx.tests.test_TestFunction.test_degree(self)
networkx.tests.test_TestFunction.test_degree_histogram(self)
networkx.tests.test_TestFunction.test_density(self)
networkx.tests.test_TestFunction.test_density_selfloop(self)
networkx.tests.test_TestFunction.test_edges(self)
networkx.tests.test_TestFunction.test_edges_iter(self)
networkx.tests.test_TestFunction.test_freeze(self)
networkx.tests.test_TestFunction.test_info(self)
networkx.tests.test_TestFunction.test_info_digraph(self)
networkx.tests.test_TestFunction.test_is_directed(self)
networkx.tests.test_TestFunction.test_is_frozen(self)
networkx.tests.test_TestFunction.test_is_negatively_weighted(self)
networkx.tests.test_TestFunction.test_is_weighted(self)
networkx.tests.test_TestFunction.test_neighbors(self)
networkx.tests.test_TestFunction.test_neighbors(self)
networkx.tests.test_TestFunction.test_nodes(self)
networkx.tests.test_TestFunction.test_nodes_iter(self)
networkx.tests.test_TestFunction.test_non_edges(self)
networkx.tests.test_TestFunction.test_non_neighbors(self)
networkx.tests.test_TestFunction.test_number_of_edges(self)
networkx.tests.test_TestFunction.test_number_of_nodes(self)
networkx.tests.test_TestFunction.test_subgraph(self)
networkx.tests.test_test_get_edge_attributes()
networkx.tests.test_test_get_node_attributes()
networkx.tests.test_test_is_empty()
networkx.tests.test_test_set_edge_attributes()
networkx.tests.test_test_set_edge_attributes_multi()
networkx.tests.test_test_set_node_attributes()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/historical_tests.py----------------------------------------
A:networkx.classes.tests.historical_tests.self.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.self.P1->cnlti(nx.path_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.self.P3->cnlti(nx.path_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.self.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.self.K1->cnlti(nx.complete_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.self.K3->cnlti(nx.complete_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.self.K4->cnlti(nx.complete_graph(4), first_label=1)
A:networkx.classes.tests.historical_tests.self.K5->cnlti(nx.complete_graph(5), first_label=1)
A:networkx.classes.tests.historical_tests.self.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.G->networkx.null_graph()
A:networkx.classes.tests.historical_tests.H->self.G()
A:networkx.classes.tests.historical_tests.nbunch->set('ABCDEFGHIJKL')
A:networkx.classes.tests.historical_tests.n_iter->self.P3.nodes_iter()
A:networkx.classes.tests.historical_tests.G1->self.G()
A:networkx.classes.tests.historical_tests.P3->networkx.path_graph(3)
A:networkx.classes.tests.historical_tests.P5->networkx.path_graph(5)
A:networkx.classes.tests.historical_tests.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.SG->networkx.null_graph().subgraph(['A', 'B', 'D'])
A:networkx.classes.tests.historical_tests.DG->networkx.null_graph().to_directed()
A:networkx.classes.tests.historical_tests.UG->networkx.null_graph().to_undirected()
A:networkx.classes.tests.historical_tests.nullgraph->networkx.null_graph()
A:networkx.classes.tests.historical_tests.E5->networkx.empty_graph(5)
A:networkx.classes.tests.historical_tests.E10->networkx.empty_graph(10)
A:networkx.classes.tests.historical_tests.K1->networkx.complete_graph(1)
A:networkx.classes.tests.historical_tests.K3->networkx.complete_graph(3)
A:networkx.classes.tests.historical_tests.K5->networkx.complete_graph(5)
networkx.classes.tests.historical_tests.HistoricalTests(object)
networkx.classes.tests.historical_tests.HistoricalTests.setUp(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_contains(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_copy(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_edges_iter_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_iterators(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_name(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_error(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_order_size(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected(self)
networkx.tests.historical_tests.HistoricalTests(object)
networkx.tests.historical_tests.HistoricalTests.setUp(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edge(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from2(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from3(self)
networkx.tests.historical_tests.HistoricalTests.test_add_nodes_from(self)
networkx.tests.historical_tests.HistoricalTests.test_add_remove(self)
networkx.tests.historical_tests.HistoricalTests.test_add_remove_node(self)
networkx.tests.historical_tests.HistoricalTests.test_complete_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_contains(self)
networkx.tests.historical_tests.HistoricalTests.test_copy(self)
networkx.tests.historical_tests.HistoricalTests.test_degree(self)
networkx.tests.historical_tests.HistoricalTests.test_degree2(self)
networkx.tests.historical_tests.HistoricalTests.test_degree_graph(self)
networkx.tests.historical_tests.HistoricalTests.test_edges_iter_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_edges_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_empty_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_iterators(self)
networkx.tests.historical_tests.HistoricalTests.test_name(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_dict(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_graph(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_is_list(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_is_set(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_iterator(self)
networkx.tests.historical_tests.HistoricalTests.test_neighbors(self)
networkx.tests.historical_tests.HistoricalTests.test_node_tuple_error(self)
networkx.tests.historical_tests.HistoricalTests.test_nonhashable_node(self)
networkx.tests.historical_tests.HistoricalTests.test_null(self)
networkx.tests.historical_tests.HistoricalTests.test_null_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_order_size(self)
networkx.tests.historical_tests.HistoricalTests.test_remove_edge(self)
networkx.tests.historical_tests.HistoricalTests.test_self_loop(self)
networkx.tests.historical_tests.HistoricalTests.test_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_subgraph_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_to_directed(self)
networkx.tests.historical_tests.HistoricalTests.test_to_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_digraph.py----------------------------------------
A:networkx.classes.tests.test_digraph.G->self.Graph()
A:networkx.classes.tests.test_digraph.R->self.Graph().reverse(copy=False)
A:networkx.classes.tests.test_digraph.self.K3->self.Graph()
A:networkx.classes.tests.test_digraph.self.P3->self.Graph()
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester(BaseDiGraphTester,BaseAttrGraphTester)
networkx.classes.tests.test_digraph.BaseDiGraphTester(BaseGraphTester)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter_weighted(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_iter_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter_weighted(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_digraph.TestDiGraph(BaseAttrDiGraphTester,TestGraph)
networkx.classes.tests.test_digraph.TestDiGraph.setUp(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_data_input(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from(self)
networkx.tests.test_digraph.BaseAttrDiGraphTester(BaseDiGraphTester,BaseAttrGraphTester)
networkx.tests.test_digraph.BaseDiGraphTester(BaseGraphTester)
networkx.tests.test_digraph.BaseDiGraphTester.test_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges_data(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_has_predecessor(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_has_successor(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter_weighted(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_edges_iter_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter_weighted(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_predecessors(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_predecessors_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_reverse_copy(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_size(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_successors(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_successors_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal(self)
networkx.tests.test_digraph.TestDiGraph(BaseAttrDiGraphTester,TestGraph)
networkx.tests.test_digraph.TestDiGraph.setUp(self)
networkx.tests.test_digraph.TestDiGraph.test_add_edge(self)
networkx.tests.test_digraph.TestDiGraph.test_add_edges_from(self)
networkx.tests.test_digraph.TestDiGraph.test_data_input(self)
networkx.tests.test_digraph.TestDiGraph.test_remove_edge(self)
networkx.tests.test_digraph.TestDiGraph.test_remove_edges_from(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_graph.py----------------------------------------
A:networkx.classes.tests.test_graph.G->self.Graph()
A:networkx.classes.tests.test_graph.bunch->self.Graph().nbunch_iter([0, 1, 2, {}])
A:networkx.classes.tests.test_graph.H->self.Graph()
A:networkx.classes.tests.test_graph.self.K3->self.Graph()
networkx.classes.tests.test_graph.BaseAttrGraphTester(BaseGraphTester)
networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes(self,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_attr_dict_not_dict(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester(object)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_cycle(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_path(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_star(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_adjacency_list(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_contains(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_degree_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_edges(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_edges_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_node(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nodes(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nodes_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_order(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_size(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_weighted_degree(self)
networkx.classes.tests.test_graph.TestGraph(BaseAttrGraphTester)
networkx.classes.tests.test_graph.TestGraph.setUp(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_add_node(self)
networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from(self)
networkx.classes.tests.test_graph.TestGraph.test_adjacency_iter(self)
networkx.classes.tests.test_graph.TestGraph.test_clear(self)
networkx.classes.tests.test_graph.TestGraph.test_data_input(self)
networkx.classes.tests.test_graph.TestGraph.test_edges_data(self)
networkx.classes.tests.test_graph.TestGraph.test_get_edge_data(self)
networkx.classes.tests.test_graph.TestGraph.test_getitem(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_node(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from(self)
networkx.tests.test_graph.BaseAttrGraphTester(BaseGraphTester)
networkx.tests.test_graph.BaseAttrGraphTester.add_attributes(self,G)
networkx.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.different_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.graphs_equal(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.is_deepcopy(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.is_shallow_copy(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.same_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.test_attr_dict_not_dict(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_copy(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_copy_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr2(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr3(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr4(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_graph_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_name(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_node_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_node_attr2(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_subgraph(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_to_directed(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_to_undirected(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_weighted_degree(self)
networkx.tests.test_graph.BaseGraphTester(object)
networkx.tests.test_graph.BaseGraphTester.test_add_cycle(self)
networkx.tests.test_graph.BaseGraphTester.test_add_path(self)
networkx.tests.test_graph.BaseGraphTester.test_add_star(self)
networkx.tests.test_graph.BaseGraphTester.test_adjacency_list(self)
networkx.tests.test_graph.BaseGraphTester.test_contains(self)
networkx.tests.test_graph.BaseGraphTester.test_degree(self)
networkx.tests.test_graph.BaseGraphTester.test_degree_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_edges(self)
networkx.tests.test_graph.BaseGraphTester.test_edges_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_has_edge(self)
networkx.tests.test_graph.BaseGraphTester.test_has_node(self)
networkx.tests.test_graph.BaseGraphTester.test_nbunch_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_neighbors(self)
networkx.tests.test_graph.BaseGraphTester.test_neighbors_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_nodes(self)
networkx.tests.test_graph.BaseGraphTester.test_nodes_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_order(self)
networkx.tests.test_graph.BaseGraphTester.test_selfloop_degree(self)
networkx.tests.test_graph.BaseGraphTester.test_selfloops(self)
networkx.tests.test_graph.BaseGraphTester.test_size(self)
networkx.tests.test_graph.BaseGraphTester.test_weighted_degree(self)
networkx.tests.test_graph.TestGraph(BaseAttrGraphTester)
networkx.tests.test_graph.TestGraph.setUp(self)
networkx.tests.test_graph.TestGraph.test_add_edge(self)
networkx.tests.test_graph.TestGraph.test_add_edges_from(self)
networkx.tests.test_graph.TestGraph.test_add_node(self)
networkx.tests.test_graph.TestGraph.test_add_nodes_from(self)
networkx.tests.test_graph.TestGraph.test_adjacency_iter(self)
networkx.tests.test_graph.TestGraph.test_clear(self)
networkx.tests.test_graph.TestGraph.test_data_input(self)
networkx.tests.test_graph.TestGraph.test_edges_data(self)
networkx.tests.test_graph.TestGraph.test_get_edge_data(self)
networkx.tests.test_graph.TestGraph.test_getitem(self)
networkx.tests.test_graph.TestGraph.test_remove_edge(self)
networkx.tests.test_graph.TestGraph.test_remove_edges_from(self)
networkx.tests.test_graph.TestGraph.test_remove_node(self)
networkx.tests.test_graph.TestGraph.test_remove_nodes_from(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_multigraph.py----------------------------------------
A:networkx.classes.tests.test_multigraph.HH->G.to_directed().copy()
A:networkx.classes.tests.test_multigraph.H->self.K3.copy().to_directed()
A:networkx.classes.tests.test_multigraph.G->self.K3.copy()
A:networkx.classes.tests.test_multigraph.self.K3->self.Graph()
networkx.classes.tests.test_multigraph.BaseMultiGraphTester(BaseAttrGraphTester)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency_iter(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops2(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multigraph.TestMultiGraph(BaseMultiGraphTester,TestGraph)
networkx.classes.tests.test_multigraph.TestMultiGraph.setUp(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node(self)
networkx.tests.test_multigraph.BaseMultiGraphTester(BaseAttrGraphTester)
networkx.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.different_attrdict(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.same_attrdict(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_adjacency_iter(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_has_edge(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_selfloops(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_selfloops2(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_to_directed(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected(self)
networkx.tests.test_multigraph.TestMultiGraph(BaseMultiGraphTester,TestGraph)
networkx.tests.test_multigraph.TestMultiGraph.setUp(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edges_from(self)
networkx.tests.test_multigraph.TestMultiGraph.test_data_input(self)
networkx.tests.test_multigraph.TestMultiGraph.test_getitem(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_edge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_edges_from(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_multiedge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_node(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_special.py----------------------------------------
A:networkx.classes.tests.test_special.self.K3->self.Graph()
networkx.classes.tests.test_special.OrderedDiGraphTester(TestDiGraph)
networkx.classes.tests.test_special.OrderedDiGraphTester.setUp(self)
networkx.classes.tests.test_special.OrderedGraphTester(TestGraph)
networkx.classes.tests.test_special.OrderedGraphTester.setUp(self)
networkx.classes.tests.test_special.OrderedMultiDiGraphTester(TestMultiDiGraph)
networkx.classes.tests.test_special.OrderedMultiDiGraphTester.setUp(self)
networkx.classes.tests.test_special.OrderedMultiGraphTester(TestMultiGraph)
networkx.classes.tests.test_special.OrderedMultiGraphTester.setUp(self)
networkx.classes.tests.test_special.SpecialDiGraphTester(TestDiGraph)
networkx.classes.tests.test_special.SpecialDiGraphTester.setUp(self)
networkx.classes.tests.test_special.SpecialGraphTester(TestGraph)
networkx.classes.tests.test_special.SpecialGraphTester.setUp(self)
networkx.classes.tests.test_special.SpecialMultiDiGraphTester(TestMultiDiGraph)
networkx.classes.tests.test_special.SpecialMultiDiGraphTester.setUp(self)
networkx.classes.tests.test_special.SpecialMultiGraphTester(TestMultiGraph)
networkx.classes.tests.test_special.SpecialMultiGraphTester.setUp(self)
networkx.classes.tests.test_special.ThinDiGraphTester(TestDiGraph)
networkx.classes.tests.test_special.ThinDiGraphTester.setUp(self)
networkx.classes.tests.test_special.ThinGraphTester(TestGraph)
networkx.classes.tests.test_special.ThinGraphTester.setUp(self)
networkx.tests.test_special.OrderedDiGraphTester(TestDiGraph)
networkx.tests.test_special.OrderedDiGraphTester.setUp(self)
networkx.tests.test_special.OrderedGraphTester(TestGraph)
networkx.tests.test_special.OrderedGraphTester.setUp(self)
networkx.tests.test_special.OrderedMultiDiGraphTester(TestMultiDiGraph)
networkx.tests.test_special.OrderedMultiDiGraphTester.setUp(self)
networkx.tests.test_special.OrderedMultiGraphTester(TestMultiGraph)
networkx.tests.test_special.OrderedMultiGraphTester.setUp(self)
networkx.tests.test_special.SpecialDiGraphTester(TestDiGraph)
networkx.tests.test_special.SpecialDiGraphTester.setUp(self)
networkx.tests.test_special.SpecialGraphTester(TestGraph)
networkx.tests.test_special.SpecialGraphTester.setUp(self)
networkx.tests.test_special.SpecialMultiDiGraphTester(TestMultiDiGraph)
networkx.tests.test_special.SpecialMultiDiGraphTester.setUp(self)
networkx.tests.test_special.SpecialMultiGraphTester(TestMultiGraph)
networkx.tests.test_special.SpecialMultiGraphTester.setUp(self)
networkx.tests.test_special.ThinDiGraphTester(TestDiGraph)
networkx.tests.test_special.ThinDiGraphTester.setUp(self)
networkx.tests.test_special.ThinGraphTester(TestGraph)
networkx.tests.test_special.ThinGraphTester.setUp(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_graph_historical.py----------------------------------------
networkx.classes.tests.test_graph_historical.TestGraphHistorical(HistoricalTests)
networkx.classes.tests.test_graph_historical.TestGraphHistorical.setUp(self)
networkx.tests.test_graph_historical.TestGraphHistorical(HistoricalTests)
networkx.tests.test_graph_historical.TestGraphHistorical.setUp(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/timingclasses.py----------------------------------------
A:networkx.classes.tests.timingclasses.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.tests.timingclasses.self.node[n]->attr.copy()
A:networkx.classes.tests.timingclasses.newdict->attr.copy()
A:networkx.classes.tests.timingclasses.nbrs->list(adj[n].keys())
A:networkx.classes.tests.timingclasses.datadict->self.adj[u].get(v, {}).get(key, {})
A:networkx.classes.tests.timingclasses.ne->len(e)
A:networkx.classes.tests.timingclasses.nodes_nbrs->self.succ.items()
A:networkx.classes.tests.timingclasses.G->MultiDiGraph()
A:networkx.classes.tests.timingclasses.G.graph->deepcopy(self.graph)
A:networkx.classes.tests.timingclasses.G.node->deepcopy(self.node)
A:networkx.classes.tests.timingclasses.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.tests.timingclasses.H->self.__class__(name='Reverse of (%s)' % self.name)
A:networkx.classes.tests.timingclasses.nlist->list(nodes)
A:networkx.classes.tests.timingclasses.edges->zip(nlist, nlist[1:] + [nlist[0]])
A:networkx.classes.tests.timingclasses.H.graph->deepcopy(self.graph)
A:networkx.classes.tests.timingclasses.H.node->deepcopy(self.node)
A:networkx.classes.tests.timingclasses.key->len(keydict)
A:networkx.classes.tests.timingclasses.keydict->self.adj[u].get(v, {})
A:networkx.classes.tests.timingclasses.deg->sum([d.get(weight, 1) for data in succ.values() for d in data.values()])
A:networkx.classes.tests.timingclasses.ed->edgedict.copy()
A:networkx.classes.tests.timingclasses.indeg->sum([len(data) for data in pred.values()])
A:networkx.classes.tests.timingclasses.outdeg->sum([len(data) for data in succ.values()])
networkx.classes.tests.timingclasses.TimingDiGraph(self,data=None,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.__init__(self,data=None,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.add_nodes_from(self,nodes,**attr)
networkx.classes.tests.timingclasses.TimingDiGraph.clear(self)
networkx.classes.tests.timingclasses.TimingDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingDiGraph.edges_iter(self,nbunch=None,data=False)
networkx.classes.tests.timingclasses.TimingDiGraph.has_predecessor(self,u,v)
networkx.classes.tests.timingclasses.TimingDiGraph.has_successor(self,u,v)
networkx.classes.tests.timingclasses.TimingDiGraph.in_degree(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingDiGraph.in_edges(self,nbunch=None,data=False)
networkx.classes.tests.timingclasses.TimingDiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.classes.tests.timingclasses.TimingDiGraph.is_directed(self)
networkx.classes.tests.timingclasses.TimingDiGraph.is_multigraph(self)
networkx.classes.tests.timingclasses.TimingDiGraph.out_degree(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingDiGraph.predecessors(self,n)
networkx.classes.tests.timingclasses.TimingDiGraph.predecessors_iter(self,n)
networkx.classes.tests.timingclasses.TimingDiGraph.remove_edge(self,u,v)
networkx.classes.tests.timingclasses.TimingDiGraph.remove_edges_from(self,ebunch)
networkx.classes.tests.timingclasses.TimingDiGraph.remove_node(self,n)
networkx.classes.tests.timingclasses.TimingDiGraph.remove_nodes_from(self,nbunch)
networkx.classes.tests.timingclasses.TimingDiGraph.reverse(self,copy=True)
networkx.classes.tests.timingclasses.TimingDiGraph.subgraph(self,nbunch)
networkx.classes.tests.timingclasses.TimingDiGraph.successors(self,n)
networkx.classes.tests.timingclasses.TimingDiGraph.successors_iter(self,n)
networkx.classes.tests.timingclasses.TimingDiGraph.to_directed(self)
networkx.classes.tests.timingclasses.TimingDiGraph.to_undirected(self,reciprocal=False)
networkx.classes.tests.timingclasses.TimingGraph(self,data=None,**attr)
networkx.classes.tests.timingclasses.TimingGraph.__contains__(self,n)
networkx.classes.tests.timingclasses.TimingGraph.__getitem__(self,n)
networkx.classes.tests.timingclasses.TimingGraph.__init__(self,data=None,**attr)
networkx.classes.tests.timingclasses.TimingGraph.__iter__(self)
networkx.classes.tests.timingclasses.TimingGraph.__len__(self)
networkx.classes.tests.timingclasses.TimingGraph.__str__(self)
networkx.classes.tests.timingclasses.TimingGraph.add_cycle(self,nodes,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_nodes_from(self,nodes,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_path(self,nodes,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_star(self,nodes,**attr)
networkx.classes.tests.timingclasses.TimingGraph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.classes.tests.timingclasses.TimingGraph.adjacency_iter(self)
networkx.classes.tests.timingclasses.TimingGraph.adjacency_list(self)
networkx.classes.tests.timingclasses.TimingGraph.clear(self)
networkx.classes.tests.timingclasses.TimingGraph.copy(self)
networkx.classes.tests.timingclasses.TimingGraph.degree(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingGraph.edges(self,nbunch=None,data=False)
networkx.classes.tests.timingclasses.TimingGraph.edges_iter(self,nbunch=None,data=False)
networkx.classes.tests.timingclasses.TimingGraph.get_edge_data(self,u,v,default=None)
networkx.classes.tests.timingclasses.TimingGraph.has_edge(self,u,v)
networkx.classes.tests.timingclasses.TimingGraph.has_node(self,n)
networkx.classes.tests.timingclasses.TimingGraph.is_directed(self)
networkx.classes.tests.timingclasses.TimingGraph.is_multigraph(self)
networkx.classes.tests.timingclasses.TimingGraph.name(self)
networkx.classes.tests.timingclasses.TimingGraph.name(self,s)
networkx.classes.tests.timingclasses.TimingGraph.nbunch_iter(self,nbunch=None)
networkx.classes.tests.timingclasses.TimingGraph.neighbors(self,n)
networkx.classes.tests.timingclasses.TimingGraph.neighbors_iter(self,n)
networkx.classes.tests.timingclasses.TimingGraph.nodes(self,data=False)
networkx.classes.tests.timingclasses.TimingGraph.nodes_iter(self,data=False)
networkx.classes.tests.timingclasses.TimingGraph.nodes_with_selfloops(self)
networkx.classes.tests.timingclasses.TimingGraph.number_of_edges(self,u=None,v=None)
networkx.classes.tests.timingclasses.TimingGraph.number_of_nodes(self)
networkx.classes.tests.timingclasses.TimingGraph.number_of_selfloops(self)
networkx.classes.tests.timingclasses.TimingGraph.order(self)
networkx.classes.tests.timingclasses.TimingGraph.remove_edge(self,u,v)
networkx.classes.tests.timingclasses.TimingGraph.remove_edges_from(self,ebunch)
networkx.classes.tests.timingclasses.TimingGraph.remove_node(self,n)
networkx.classes.tests.timingclasses.TimingGraph.remove_nodes_from(self,nodes)
networkx.classes.tests.timingclasses.TimingGraph.selfloop_edges(self,data=False)
networkx.classes.tests.timingclasses.TimingGraph.size(self,weight=None)
networkx.classes.tests.timingclasses.TimingGraph.subgraph(self,nbunch)
networkx.classes.tests.timingclasses.TimingGraph.to_directed(self)
networkx.classes.tests.timingclasses.TimingGraph.to_undirected(self)
networkx.classes.tests.timingclasses.TimingMultiDiGraph(TimingMultiGraph,TimingDiGraph)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.is_directed(self)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.is_multigraph(self)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.remove_edge(self,u,v,key=None)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.reverse(self,copy=True)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.subgraph(self,nbunch)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.to_directed(self)
networkx.classes.tests.timingclasses.TimingMultiDiGraph.to_undirected(self,reciprocal=False)
networkx.classes.tests.timingclasses.TimingMultiGraph(TimingGraph)
networkx.classes.tests.timingclasses.TimingMultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingMultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.tests.timingclasses.TimingMultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.tests.timingclasses.TimingMultiGraph.edges(self,nbunch=None,data=False,keys=False)
networkx.classes.tests.timingclasses.TimingMultiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.tests.timingclasses.TimingMultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.classes.tests.timingclasses.TimingMultiGraph.has_edge(self,u,v,key=None)
networkx.classes.tests.timingclasses.TimingMultiGraph.is_directed(self)
networkx.classes.tests.timingclasses.TimingMultiGraph.is_multigraph(self)
networkx.classes.tests.timingclasses.TimingMultiGraph.number_of_edges(self,u=None,v=None)
networkx.classes.tests.timingclasses.TimingMultiGraph.remove_edge(self,u,v,key=None)
networkx.classes.tests.timingclasses.TimingMultiGraph.remove_edges_from(self,ebunch)
networkx.classes.tests.timingclasses.TimingMultiGraph.selfloop_edges(self,data=False,keys=False)
networkx.classes.tests.timingclasses.TimingMultiGraph.subgraph(self,nbunch)
networkx.classes.tests.timingclasses.TimingMultiGraph.to_directed(self)
networkx.tests.timingTimingDiGraph(self,data=None,**attr)
networkx.tests.timingTimingDiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.tests.timingTimingDiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.tests.timingTimingDiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.tests.timingTimingDiGraph.add_nodes_from(self,nodes,**attr)
networkx.tests.timingTimingDiGraph.clear(self)
networkx.tests.timingTimingDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingDiGraph.edges_iter(self,nbunch=None,data=False)
networkx.tests.timingTimingDiGraph.has_predecessor(self,u,v)
networkx.tests.timingTimingDiGraph.has_successor(self,u,v)
networkx.tests.timingTimingDiGraph.in_degree(self,nbunch=None,weight=None)
networkx.tests.timingTimingDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingDiGraph.in_edges(self,nbunch=None,data=False)
networkx.tests.timingTimingDiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.tests.timingTimingDiGraph.is_directed(self)
networkx.tests.timingTimingDiGraph.is_multigraph(self)
networkx.tests.timingTimingDiGraph.out_degree(self,nbunch=None,weight=None)
networkx.tests.timingTimingDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingDiGraph.predecessors(self,n)
networkx.tests.timingTimingDiGraph.predecessors_iter(self,n)
networkx.tests.timingTimingDiGraph.remove_edge(self,u,v)
networkx.tests.timingTimingDiGraph.remove_edges_from(self,ebunch)
networkx.tests.timingTimingDiGraph.remove_node(self,n)
networkx.tests.timingTimingDiGraph.remove_nodes_from(self,nbunch)
networkx.tests.timingTimingDiGraph.reverse(self,copy=True)
networkx.tests.timingTimingDiGraph.subgraph(self,nbunch)
networkx.tests.timingTimingDiGraph.successors(self,n)
networkx.tests.timingTimingDiGraph.successors_iter(self,n)
networkx.tests.timingTimingDiGraph.to_directed(self)
networkx.tests.timingTimingDiGraph.to_undirected(self,reciprocal=False)
networkx.tests.timingTimingGraph(self,data=None,**attr)
networkx.tests.timingTimingGraph.__contains__(self,n)
networkx.tests.timingTimingGraph.__getitem__(self,n)
networkx.tests.timingTimingGraph.__iter__(self)
networkx.tests.timingTimingGraph.__len__(self)
networkx.tests.timingTimingGraph.__str__(self)
networkx.tests.timingTimingGraph.add_cycle(self,nodes,**attr)
networkx.tests.timingTimingGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.tests.timingTimingGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.tests.timingTimingGraph.add_node(self,n,attr_dict=None,**attr)
networkx.tests.timingTimingGraph.add_nodes_from(self,nodes,**attr)
networkx.tests.timingTimingGraph.add_path(self,nodes,**attr)
networkx.tests.timingTimingGraph.add_star(self,nodes,**attr)
networkx.tests.timingTimingGraph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.tests.timingTimingGraph.adjacency_iter(self)
networkx.tests.timingTimingGraph.adjacency_list(self)
networkx.tests.timingTimingGraph.clear(self)
networkx.tests.timingTimingGraph.copy(self)
networkx.tests.timingTimingGraph.degree(self,nbunch=None,weight=None)
networkx.tests.timingTimingGraph.degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingGraph.edges(self,nbunch=None,data=False)
networkx.tests.timingTimingGraph.edges_iter(self,nbunch=None,data=False)
networkx.tests.timingTimingGraph.get_edge_data(self,u,v,default=None)
networkx.tests.timingTimingGraph.has_edge(self,u,v)
networkx.tests.timingTimingGraph.has_node(self,n)
networkx.tests.timingTimingGraph.is_directed(self)
networkx.tests.timingTimingGraph.is_multigraph(self)
networkx.tests.timingTimingGraph.name(self)
networkx.tests.timingTimingGraph.name(self,s)
networkx.tests.timingTimingGraph.nbunch_iter(self,nbunch=None)
networkx.tests.timingTimingGraph.neighbors(self,n)
networkx.tests.timingTimingGraph.neighbors_iter(self,n)
networkx.tests.timingTimingGraph.nodes(self,data=False)
networkx.tests.timingTimingGraph.nodes_iter(self,data=False)
networkx.tests.timingTimingGraph.nodes_with_selfloops(self)
networkx.tests.timingTimingGraph.number_of_edges(self,u=None,v=None)
networkx.tests.timingTimingGraph.number_of_nodes(self)
networkx.tests.timingTimingGraph.number_of_selfloops(self)
networkx.tests.timingTimingGraph.order(self)
networkx.tests.timingTimingGraph.remove_edge(self,u,v)
networkx.tests.timingTimingGraph.remove_edges_from(self,ebunch)
networkx.tests.timingTimingGraph.remove_node(self,n)
networkx.tests.timingTimingGraph.remove_nodes_from(self,nodes)
networkx.tests.timingTimingGraph.selfloop_edges(self,data=False)
networkx.tests.timingTimingGraph.size(self,weight=None)
networkx.tests.timingTimingGraph.subgraph(self,nbunch)
networkx.tests.timingTimingGraph.to_directed(self)
networkx.tests.timingTimingGraph.to_undirected(self)
networkx.tests.timingTimingMultiDiGraph(TimingMultiGraph,TimingDiGraph)
networkx.tests.timingTimingMultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.tests.timingTimingMultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingMultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.tests.timingTimingMultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingMultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.tests.timingTimingMultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.tests.timingTimingMultiDiGraph.is_directed(self)
networkx.tests.timingTimingMultiDiGraph.is_multigraph(self)
networkx.tests.timingTimingMultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingMultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.tests.timingTimingMultiDiGraph.remove_edge(self,u,v,key=None)
networkx.tests.timingTimingMultiDiGraph.reverse(self,copy=True)
networkx.tests.timingTimingMultiDiGraph.subgraph(self,nbunch)
networkx.tests.timingTimingMultiDiGraph.to_directed(self)
networkx.tests.timingTimingMultiDiGraph.to_undirected(self,reciprocal=False)
networkx.tests.timingTimingMultiGraph(TimingGraph)
networkx.tests.timingTimingMultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.tests.timingTimingMultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.tests.timingTimingMultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.tests.timingTimingMultiGraph.edges(self,nbunch=None,data=False,keys=False)
networkx.tests.timingTimingMultiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.tests.timingTimingMultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.tests.timingTimingMultiGraph.has_edge(self,u,v,key=None)
networkx.tests.timingTimingMultiGraph.is_directed(self)
networkx.tests.timingTimingMultiGraph.is_multigraph(self)
networkx.tests.timingTimingMultiGraph.number_of_edges(self,u=None,v=None)
networkx.tests.timingTimingMultiGraph.remove_edge(self,u,v,key=None)
networkx.tests.timingTimingMultiGraph.remove_edges_from(self,ebunch)
networkx.tests.timingTimingMultiGraph.selfloop_edges(self,data=False,keys=False)
networkx.tests.timingTimingMultiGraph.subgraph(self,nbunch)
networkx.tests.timingTimingMultiGraph.to_directed(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_ordered.py----------------------------------------
A:networkx.classes.tests.test_ordered.G->networkx.OrderedMultiDiGraph()
networkx.classes.tests.test_ordered.SmokeTestOrdered(object)
networkx.classes.tests.test_ordered.SmokeTestOrdered.test_digraph()
networkx.classes.tests.test_ordered.SmokeTestOrdered.test_graph()
networkx.classes.tests.test_ordered.SmokeTestOrdered.test_multidigraph()
networkx.classes.tests.test_ordered.SmokeTestOrdered.test_multigraph()
networkx.tests.test_SmokeTestOrdered(object)
networkx.tests.test_SmokeTestOrdered.test_digraph()
networkx.tests.test_SmokeTestOrdered.test_graph()
networkx.tests.test_SmokeTestOrdered.test_multidigraph()
networkx.tests.test_SmokeTestOrdered.test_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/classes/tests/test_multidigraph.py----------------------------------------
A:networkx.classes.tests.test_multidigraph.H->self.Graph().to_undirected()
A:networkx.classes.tests.test_multidigraph.G->self.Graph()
A:networkx.classes.tests.test_multidigraph.R->self.Graph().reverse(copy=False)
A:networkx.classes.tests.test_multidigraph.self.K3->self.Graph()
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester(BaseMultiGraphTester)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph(BaseMultiDiGraphTester,TestMultiGraph)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setUp(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester(BaseMultiGraphTester)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep(self,H,G)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow(self,H,G)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_size(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal(self)
networkx.tests.test_multidigraph.TestMultiDiGraph(BaseMultiDiGraphTester,TestMultiGraph)
networkx.tests.test_multidigraph.TestMultiDiGraph.setUp(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_add_edge(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/external/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/testing/utils.py----------------------------------------
A:networkx.testing.utils.n1->sorted(nlist1, key=operator.itemgetter(0))
A:networkx.testing.utils.n2->sorted(nlist2, key=operator.itemgetter(0))
A:networkx.testing.utils.e1->sorted(elist1, key=lambda x: sorted(x[0:2]))
A:networkx.testing.utils.e2->sorted(elist2, key=lambda x: sorted(x[0:2]))
A:networkx.testing.utils.edges1->graph1.edges(data=True)
A:networkx.testing.utils.edges2->graph2.edges(data=True)
networkx.testing.assert_edges_equal(elist1,elist2)
networkx.testing.assert_graphs_equal(graph1,graph2)
networkx.testing.assert_nodes_equal(nlist1,nlist2)
networkx.testing.utils.assert_edges_equal(elist1,elist2)
networkx.testing.utils.assert_graphs_equal(graph1,graph2)
networkx.testing.utils.assert_nodes_equal(nlist1,nlist2)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/testing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/testing/tests/test_utils.py----------------------------------------
A:networkx.testing.tests.test_utils.G->networkx.path_graph(4)
A:networkx.testing.tests.test_utils.H->networkx.Graph()
networkx.testing.tests.test_TestEdgesEqual(_GenericTest)
networkx.testing.tests.test_TestEdgesEqual.setUp(self)
networkx.testing.tests.test_TestEdgesEqual.test_edges_equal(self)
networkx.testing.tests.test_TestEdgesEqual.test_edges_not_equal(self)
networkx.testing.tests.test_TestEdgesEqual.test_edges_with_data_equal(self)
networkx.testing.tests.test_TestEdgesEqual.test_edges_with_data_not_equal(self)
networkx.testing.tests.test_TestGraphsEqual(_GenericTest)
networkx.testing.tests.test_TestGraphsEqual.setUp(self)
networkx.testing.tests.test_TestGraphsEqual.test_digraphs_equal(self)
networkx.testing.tests.test_TestGraphsEqual.test_graphs_equal(self)
networkx.testing.tests.test_TestGraphsEqual.test_graphs_not_equal(self)
networkx.testing.tests.test_TestGraphsEqual.test_graphs_not_equal2(self)
networkx.testing.tests.test_TestGraphsEqual.test_graphs_not_equal3(self)
networkx.testing.tests.test_TestGraphsEqual.test_multigraphs_equal(self)
networkx.testing.tests.test_TestGraphsEqual.test_multigraphs_equal(self)
networkx.testing.tests.test_TestNodesEqual(_GenericTest)
networkx.testing.tests.test_TestNodesEqual.setUp(self)
networkx.testing.tests.test_TestNodesEqual.test_edges_with_data_not_equal(self)
networkx.testing.tests.test_TestNodesEqual.test_nodes_equal(self)
networkx.testing.tests.test_TestNodesEqual.test_nodes_not_equal(self)
networkx.testing.tests.test_TestNodesEqual.test_nodes_with_data_equal(self)
networkx.testing.tests.test__GenericTest(object)
networkx.testing.tests.test__GenericTest._test_equal(self,a,b)
networkx.testing.tests.test__GenericTest._test_not_equal(self,a,b)
networkx.testing.tests.test_utils.TestEdgesEqual(_GenericTest)
networkx.testing.tests.test_utils.TestEdgesEqual.setUp(self)
networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_equal(self)
networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_not_equal(self)
networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_equal(self)
networkx.testing.tests.test_utils.TestEdgesEqual.test_edges_with_data_not_equal(self)
networkx.testing.tests.test_utils.TestGraphsEqual(_GenericTest)
networkx.testing.tests.test_utils.TestGraphsEqual.setUp(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_digraphs_equal(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_equal(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal2(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_graphs_not_equal3(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_multigraphs_equal(self)
networkx.testing.tests.test_utils.TestGraphsEqual.test_multigraphs_equal(self)
networkx.testing.tests.test_utils.TestNodesEqual(_GenericTest)
networkx.testing.tests.test_utils.TestNodesEqual.setUp(self)
networkx.testing.tests.test_utils.TestNodesEqual.test_edges_with_data_not_equal(self)
networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_equal(self)
networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_not_equal(self)
networkx.testing.tests.test_utils.TestNodesEqual.test_nodes_with_data_equal(self)
networkx.testing.tests.test_utils._GenericTest(object)
networkx.testing.tests.test_utils._GenericTest._test_equal(self,a,b)
networkx.testing.tests.test_utils._GenericTest._test_not_equal(self,a,b)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/laplacianmatrix.py----------------------------------------
A:networkx.linalg.laplacianmatrix.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'Alejandro Weinstein <alejandro.weinstein@gmail.com>'])
A:networkx.linalg.laplacianmatrix.nodelist->G.nodes()
A:networkx.linalg.laplacianmatrix.A->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight, format='csr')
A:networkx.linalg.laplacianmatrix.diags->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight, format='csr').sum(axis=1).flatten()
A:networkx.linalg.laplacianmatrix.D->scipy.sparse.spdiags(diags, [0], m, n, format='csr')
A:networkx.linalg.laplacianmatrix.DH->scipy.sparse.spdiags(diags_sqrt, [0], m, n, format='csr')
A:networkx.linalg.laplacianmatrix.M->M.todense().todense()
A:networkx.linalg.laplacianmatrix.DI->spdiags(1.0 / sp.array(M.sum(axis=1).flat), [0], n, n)
A:networkx.linalg.laplacianmatrix.I->scipy.identity(len(G))
A:networkx.linalg.laplacianmatrix.dangling->scipy.where(M.sum(axis=1) == 0)
A:networkx.linalg.laplacianmatrix.(evals, evecs)->scipy.sparse.linalg.eigs(P.T, k=1)
A:networkx.linalg.laplacianmatrix.sqrtp->scipy.sqrt(p)
networkx.directed_laplacian_matrix(G,nodelist=None,weight='weight',walk_type=None,alpha=0.95)
networkx.laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.directed_laplacian_matrix(G,nodelist=None,weight='weight',walk_type=None,alpha=0.95)
networkx.linalg.laplacianmatrix.laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.normalized_laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.setup_module(module)
networkx.normalized_laplacian_matrix(G,nodelist=None,weight='weight')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/attrmatrix.py----------------------------------------
A:networkx.linalg.attrmatrix.edge_value->_edge_value(G, edge_attr)
A:networkx.linalg.attrmatrix.node_value->_node_value(G, node_attr)
A:networkx.linalg.attrmatrix.ordering->list(set([node_value(n) for n in G]))
A:networkx.linalg.attrmatrix.N->len(ordering)
A:networkx.linalg.attrmatrix.index->dict(zip(ordering, range(N)))
A:networkx.linalg.attrmatrix.M->scipy.sparse.lil_matrix((N, N), dtype=dtype)
A:networkx.linalg.attrmatrix.seen->set([])
A:networkx.linalg.attrmatrix.norms->numpy.asarray(M.sum(axis=1)).ravel()
networkx._edge_value(G,edge_attr)
networkx._node_value(G,node_attr)
networkx.attr_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None,order=None)
networkx.attr_sparse_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None)
networkx.linalg.attrmatrix._edge_value(G,edge_attr)
networkx.linalg.attrmatrix._node_value(G,node_attr)
networkx.linalg.attrmatrix.attr_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None,order=None)
networkx.linalg.attrmatrix.attr_sparse_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None)
networkx.linalg.attrmatrix.setup_module(module)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/algebraicconnectivity.py----------------------------------------
A:networkx.linalg.algebraicconnectivity.dasum->partial(norm, ord=1)
A:networkx.linalg.algebraicconnectivity._tracemin_method->compile('^tracemin(?:_(.*))?$')
A:networkx.linalg.algebraicconnectivity.B->asarray(B)
A:networkx.linalg.algebraicconnectivity.X->asarray(asmatrix(x).T)
A:networkx.linalg.algebraicconnectivity.X[:, j]->self._LU.solve(B[:, j])
A:networkx.linalg.algebraicconnectivity.x->daxpy(e, x, a=-ddot(x, e))
A:networkx.linalg.algebraicconnectivity.r->daxpy(Ap, r, a=-alpha)
A:networkx.linalg.algebraicconnectivity.z->M(r)
A:networkx.linalg.algebraicconnectivity.rz->ddot(r, z)
A:networkx.linalg.algebraicconnectivity.p->daxpy(p, z, a=beta)
A:networkx.linalg.algebraicconnectivity.Ap->A(p)
A:networkx.linalg.algebraicconnectivity.beta->ddot(r, z)
A:networkx.linalg.algebraicconnectivity.self._chol->self._cholesky(A)
A:networkx.linalg.algebraicconnectivity.self._LU->self._splu(A)
A:networkx.linalg.algebraicconnectivity._splu->partial(splu, permc_spec='MMD_AT_PLUS_A', diag_pivot_thresh=0.0, options={'Equil': True, 'SymmetricMode': True})
A:networkx.linalg.algebraicconnectivity.H->networkx.Graph()
A:networkx.linalg.algebraicconnectivity.G->_preprocess_graph(G, weight)
A:networkx.linalg.algebraicconnectivity.order->reverse_cuthill_mckee_ordering(G)
A:networkx.linalg.algebraicconnectivity.n->len(nodelist)
A:networkx.linalg.algebraicconnectivity.index->dict(zip(nodelist, range(n)))
A:networkx.linalg.algebraicconnectivity.e->sqrt(L.diagonal())
A:networkx.linalg.algebraicconnectivity.D->spdiags(1.0 / sqrt(L.diagonal()), [0], n, n, format='csc')
A:networkx.linalg.algebraicconnectivity.solver->(_CholeskySolver if method == 'chol' else _LUSolver)(A)
A:networkx.linalg.algebraicconnectivity.A->csc_matrix(L, dtype=float, copy=True)
A:networkx.linalg.algebraicconnectivity.i->(A.indptr[1:] - A.indptr[:-1]).argmax()
A:networkx.linalg.algebraicconnectivity.A[i, i]->float('inf')
A:networkx.linalg.algebraicconnectivity.Lnorm->abs(L).sum(axis=1).flatten().max()
A:networkx.linalg.algebraicconnectivity.W->asmatrix(ndarray(X.shape, order='F'))
A:networkx.linalg.algebraicconnectivity.(sigma, Y)->eigh(H, overwrite_a=True)
A:networkx.linalg.algebraicconnectivity.W[:, :]->(_CholeskySolver if method == 'chol' else _LUSolver)(A).solve(X)
A:networkx.linalg.algebraicconnectivity.match->compile('^tracemin(?:_(.*))?$').match(method)
A:networkx.linalg.algebraicconnectivity.method->compile('^tracemin(?:_(.*))?$').match(method).group(1)
A:networkx.linalg.algebraicconnectivity.(sigma, X)->lobpcg(L, X, M=M, Y=asmatrix(Y).T, tol=tol, maxiter=n, largest=False)
A:networkx.linalg.algebraicconnectivity.L->networkx.laplacian_matrix(G, component)
A:networkx.linalg.algebraicconnectivity.M->spdiags(1.0 / L.diagonal(), [0], n, n)
A:networkx.linalg.algebraicconnectivity.Y->ones(n)
A:networkx.linalg.algebraicconnectivity.find_fiedler->_get_fiedler_func(method)
A:networkx.linalg.algebraicconnectivity.size->len(component)
networkx._CholeskySolver(self,A)
networkx._CholeskySolver.solve(self,B)
networkx._LUSolver(self,A)
networkx._LUSolver.solve(self,B)
networkx._PCGSolver(self,A,M)
networkx._PCGSolver._solve(self,b,tol)
networkx._PCGSolver.solve(self,B,tol)
networkx._get_fiedler_func(method)
networkx._preprocess_graph(G,weight)
networkx._rcm_estimate(G,nodelist)
networkx._tracemin_fiedler(L,X,normalized,tol,method)
networkx.algebraic_connectivity(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')
networkx.fiedler_vector(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')
networkx.linalg.algebraicconnectivity._CholeskySolver(self,A)
networkx.linalg.algebraicconnectivity._CholeskySolver.__init__(self,A)
networkx.linalg.algebraicconnectivity._CholeskySolver.solve(self,B)
networkx.linalg.algebraicconnectivity._LUSolver(self,A)
networkx.linalg.algebraicconnectivity._LUSolver.__init__(self,A)
networkx.linalg.algebraicconnectivity._LUSolver.solve(self,B)
networkx.linalg.algebraicconnectivity._PCGSolver(self,A,M)
networkx.linalg.algebraicconnectivity._PCGSolver.__init__(self,A,M)
networkx.linalg.algebraicconnectivity._PCGSolver._solve(self,b,tol)
networkx.linalg.algebraicconnectivity._PCGSolver.solve(self,B,tol)
networkx.linalg.algebraicconnectivity._get_fiedler_func(method)
networkx.linalg.algebraicconnectivity._preprocess_graph(G,weight)
networkx.linalg.algebraicconnectivity._rcm_estimate(G,nodelist)
networkx.linalg.algebraicconnectivity._tracemin_fiedler(L,X,normalized,tol,method)
networkx.linalg.algebraicconnectivity.algebraic_connectivity(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')
networkx.linalg.algebraicconnectivity.fiedler_vector(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')
networkx.linalg.algebraicconnectivity.setup_module(module)
networkx.linalg.algebraicconnectivity.spectral_ordering(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')
networkx.setup_module(module)
networkx.spectral_ordering(G,weight='weight',normalized=False,tol=1e-08,method='tracemin')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/modularitymatrix.py----------------------------------------
A:networkx.linalg.modularitymatrix.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'Jean-Gabriel Young (Jean.gabriel.young@gmail.com)'])
A:networkx.linalg.modularitymatrix.nodelist->G.nodes()
A:networkx.linalg.modularitymatrix.A->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, format='csr')
A:networkx.linalg.modularitymatrix.k->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, format='csr').sum(axis=1)
A:networkx.linalg.modularitymatrix.m->G.number_of_edges()
A:networkx.linalg.modularitymatrix.k_in->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, format='csr').sum(axis=0)
A:networkx.linalg.modularitymatrix.k_out->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, format='csr').sum(axis=1)
networkx.directed_modularity_matrix(G,nodelist=None)
networkx.linalg.modularitymatrix.directed_modularity_matrix(G,nodelist=None)
networkx.linalg.modularitymatrix.modularity_matrix(G,nodelist=None)
networkx.linalg.modularitymatrix.setup_module(module)
networkx.modularity_matrix(G,nodelist=None)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/graphmatrix.py----------------------------------------
A:networkx.linalg.graphmatrix.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.linalg.graphmatrix.nodelist->G.nodes()
A:networkx.linalg.graphmatrix.edgelist->G.edges()
A:networkx.linalg.graphmatrix.A->scipy.sparse.lil_matrix((len(nodelist), len(edgelist)))
A:networkx.linalg.graphmatrix.node_index->dict(((node, i) for (i, node) in enumerate(nodelist)))
A:networkx.linalg.graphmatrix.wt->G[u][v].get(weight, 1)
networkx.adjacency_matrix(G,nodelist=None,weight='weight')
networkx.incidence_matrix(G,nodelist=None,edgelist=None,oriented=False,weight=None)
networkx.linalg.graphmatrix.adjacency_matrix(G,nodelist=None,weight='weight')
networkx.linalg.graphmatrix.incidence_matrix(G,nodelist=None,edgelist=None,oriented=False,weight=None)
networkx.linalg.graphmatrix.setup_module(module)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/spectrum.py----------------------------------------
A:networkx.linalg.spectrum.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)', 'Jean-Gabriel Young (jean.gabriel.young@gmail.com)'])
networkx.adjacency_spectrum(G,weight='weight')
networkx.laplacian_spectrum(G,weight='weight')
networkx.linalg.spectrum.adjacency_spectrum(G,weight='weight')
networkx.linalg.spectrum.laplacian_spectrum(G,weight='weight')
networkx.linalg.spectrum.modularity_spectrum(G)
networkx.linalg.spectrum.setup_module(module)
networkx.modularity_spectrum(G)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/tests/test_spectrum.py----------------------------------------
A:networkx.linalg.tests.test_spectrum.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_spectrum.self.P->networkx.path_graph(3)
A:networkx.linalg.tests.test_spectrum.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_spectrum.self.DG->networkx.DiGraph()
A:networkx.linalg.tests.test_spectrum.evals->numpy.array([-0.5, 0.0, 0.0])
A:networkx.linalg.tests.test_spectrum.e->sorted(nx.modularity_spectrum(self.DG))
networkx.linalg.tests.test_spectrum.TestSpectrum(object)
networkx.linalg.tests.test_spectrum.TestSpectrum.setUp(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.setupClass(cls)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_modularity_spectrum(self)
networkx.tests.test_TestSpectrum(object)
networkx.tests.test_TestSpectrum.setUp(self)
networkx.tests.test_TestSpectrum.setupClass(cls)
networkx.tests.test_TestSpectrum.test_adjacency_spectrum(self)
networkx.tests.test_TestSpectrum.test_laplacian_spectrum(self)
networkx.tests.test_TestSpectrum.test_modularity_spectrum(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/tests/test_modularity.py----------------------------------------
A:networkx.linalg.tests.test_modularity.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_modularity.self.DG->networkx.DiGraph()
A:networkx.linalg.tests.test_modularity.B->numpy.matrix([[-0.2, 0.6, 0.8, -0.4, -0.4, -0.4], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.7, 0.4, -0.3, -0.6, 0.4, -0.6], [-0.2, -0.4, -0.2, -0.4, 0.6, 0.6], [-0.2, -0.4, -0.2, 0.6, -0.4, 0.6], [-0.1, -0.2, -0.1, 0.8, -0.2, -0.2]])
networkx.linalg.tests.test_modularity.TestModularity(object)
networkx.linalg.tests.test_modularity.TestModularity.setUp(self)
networkx.linalg.tests.test_modularity.TestModularity.setupClass(cls)
networkx.linalg.tests.test_modularity.TestModularity.test_directed_modularity(self)
networkx.linalg.tests.test_modularity.TestModularity.test_modularity(self)
networkx.tests.test_modularity.TestModularity(object)
networkx.tests.test_modularity.TestModularity.setUp(self)
networkx.tests.test_modularity.TestModularity.setupClass(cls)
networkx.tests.test_modularity.TestModularity.test_directed_modularity(self)
networkx.tests.test_modularity.TestModularity.test_modularity(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/tests/test_algebraic_connectivity.py----------------------------------------
A:networkx.linalg.tests.test_algebraic_connectivity.state->get_state()
A:networkx.linalg.tests.test_algebraic_connectivity.nx->numpy.linalg.norm(x)
A:networkx.linalg.tests.test_algebraic_connectivity.ny->numpy.linalg.norm(y)
A:networkx.linalg.tests.test_algebraic_connectivity.G->numpy.linalg.norm(x).Graph()
A:networkx.linalg.tests.test_algebraic_connectivity.A->numpy.linalg.norm(x).laplacian_matrix(G).todense()
A:networkx.linalg.tests.test_algebraic_connectivity.x->numpy.linalg.norm(x).fiedler_vector(G, normalized=normalized, tol=1e-12, method=method)
A:networkx.linalg.tests.test_algebraic_connectivity.order->numpy.linalg.norm(x).spectral_ordering(G, normalized=normalized, method=method)
A:networkx.linalg.tests.test_algebraic_connectivity.path->list(range(10))
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity(object)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.setupClass(cls)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes(self)
networkx.linalg.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering(object)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.setupClass(cls)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes(self)
networkx.linalg.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method(self)
networkx.linalg.tests.test_algebraic_connectivity.check_eigenvector(A,l,x)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity(object)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.setupClass(cls)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_buckminsterfullerene(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_cycle(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_directed(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_disconnected(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_null_and_singleton(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_path(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_two_nodes(self)
networkx.tests.test_algebraic_connectivity.TestAlgebraicConnectivity.test_unrecognized_method(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering(object)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.setupClass(cls)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_cycle(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_disconnected(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_nullgraph(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_path(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_singleton(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_three_nodes(self)
networkx.tests.test_algebraic_connectivity.TestSpectralOrdering.test_unrecognized_method(self)
networkx.tests.test_algebraic_connectivity.check_eigenvector(A,l,x)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/tests/test_graphmatrix.py----------------------------------------
A:networkx.linalg.tests.test_graphmatrix.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_graphmatrix.self.OI->numpy.array([[-1, -1, -1, 0], [1, 0, 0, -1], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.A->numpy.array([[0, 1, 1, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_graphmatrix.self.WA->numpy.array([[0, 0.5, 0.5, 0.5, 0], [0.5, 0, 0.5, 0, 0], [0.5, 0.5, 0, 0, 0], [0.5, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.MG->networkx.MultiGraph(self.G)
A:networkx.linalg.tests.test_graphmatrix.self.MG2->self.MG.copy()
A:networkx.linalg.tests.test_graphmatrix.self.MG2A->numpy.array([[0, 2, 1, 1, 0], [2, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.MGOI->numpy.array([[-1, -1, -1, -1, 0], [1, 1, 0, 0, -1], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.WMG->networkx.MultiGraph(self.WG)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix(object)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setUp(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setupClass(cls)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix(self)
networkx.tests.test_TestGraphMatrix(object)
networkx.tests.test_TestGraphMatrix.setUp(self)
networkx.tests.test_TestGraphMatrix.setupClass(cls)
networkx.tests.test_TestGraphMatrix.test_adjacency_matrix(self)
networkx.tests.test_TestGraphMatrix.test_incidence_matrix(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/linalg/tests/test_laplacian.py----------------------------------------
A:networkx.linalg.tests.test_laplacian.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_laplacian.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_laplacian.self.MG->networkx.MultiGraph(self.G)
A:networkx.linalg.tests.test_laplacian.self.Gsl->self.G.copy()
A:networkx.linalg.tests.test_laplacian.NL->numpy.array([[3, -1, -1, -1, 0], [-1, 2, -1, 0, 0], [-1, -1, 2, 0, 0], [-1, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_laplacian.GL->numpy.array([[0.5, -0.1531, -0.2357, 0.0, 0.0, -0.1614], [-0.1531, 0.5, -0.0722, 0.0, -0.1581, 0.0], [-0.2357, -0.0722, 0.5, 0.0, -0.0456, 0.0], [0.0, 0.0, 0.0, 0.5, -0.25, -0.25], [0.0, -0.1581, -0.0456, -0.25, 0.5, -0.125], [-0.1614, 0.0, 0.0, -0.25, -0.125, 0.5]])
A:networkx.linalg.tests.test_laplacian.Lsl->numpy.array([[0.75, -0.2887, -0.2887, -0.3536, 0.0], [-0.2887, 0.6667, -0.3333, 0.0, 0.0], [-0.2887, -0.3333, 0.6667, 0.0, 0.0], [-0.3536, 0.0, 0.0, 0.5, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]])
A:networkx.linalg.tests.test_laplacian.G->networkx.DiGraph()
networkx.linalg.tests.test_laplacian.TestLaplacian(object)
networkx.linalg.tests.test_laplacian.TestLaplacian.setUp(self)
networkx.linalg.tests.test_laplacian.TestLaplacian.setupClass(cls)
networkx.linalg.tests.test_laplacian.TestLaplacian.test_directed_laplacian(self)
networkx.linalg.tests.test_laplacian.TestLaplacian.test_laplacian(self)
networkx.linalg.tests.test_laplacian.TestLaplacian.test_normalized_laplacian(self)
networkx.tests.test_laplacian.TestLaplacian(object)
networkx.tests.test_laplacian.TestLaplacian.setUp(self)
networkx.tests.test_laplacian.TestLaplacian.setupClass(cls)
networkx.tests.test_laplacian.TestLaplacian.test_directed_laplacian(self)
networkx.tests.test_laplacian.TestLaplacian.test_laplacian(self)
networkx.tests.test_laplacian.TestLaplacian.test_normalized_laplacian(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/triads.py----------------------------------------
A:networkx.algorithms.triads.__author__->'\n'.join(['Alex Levenson (alex@isnontinvain.com)', 'Diederik van Liere (diederik.vanliere@rotman.utoronto.ca)'])
A:networkx.algorithms.triads.G->networkx.DiGraph()
A:networkx.algorithms.triads.n->len(G)
A:networkx.algorithms.triads.code->_tricode(G, v, u, w)
networkx._tricode(G,v,u,w)
networkx.algorithms.triads._tricode(G,v,u,w)
networkx.algorithms.triads.triad_graphs()
networkx.algorithms.triads.triadic_census(G)
networkx.triad_graphs()
networkx.triadic_census(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/mst.py----------------------------------------
A:networkx.algorithms.mst.subtrees->UnionFind()
A:networkx.algorithms.mst.edges->sorted(G.edges(data=True), key=lambda t: t[2].get(weight, 1))
A:networkx.algorithms.mst.T->networkx.Graph(nx.prim_mst_edges(G, weight=weight, data=True))
A:networkx.algorithms.mst.T.node[n]->G.node[n].copy()
A:networkx.algorithms.mst.T.graph->G.graph.copy()
A:networkx.algorithms.mst.nodes->G.nodes()
A:networkx.algorithms.mst.c->count()
A:networkx.algorithms.mst.u->G.nodes().pop(0)
A:networkx.algorithms.mst.(W, _, u, v)->pop(frontier)
networkx.algorithms.mst.minimum_spanning_edges(G,weight='weight',data=True)
networkx.algorithms.mst.minimum_spanning_tree(G,weight='weight')
networkx.algorithms.mst.prim_mst(G,weight='weight')
networkx.algorithms.mst.prim_mst_edges(G,weight='weight',data=True)
networkx.minimum_spanning_edges(G,weight='weight',data=True)
networkx.minimum_spanning_tree(G,weight='weight')
networkx.prim_mst(G,weight='weight')
networkx.prim_mst_edges(G,weight='weight',data=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/swap.py----------------------------------------
A:networkx.algorithms.swap.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'Joel Miller (joel.c.miller.research@gmail.com)', 'Ben Edwards'])
A:networkx.algorithms.swap.(keys, degrees)->zip(*G.degree().items())
A:networkx.algorithms.swap.cdf->networkx.utils.cumulative_distribution(list(G.degree().values()))
A:networkx.algorithms.swap.(ui, xi)->networkx.utils.discrete_sequence(2, cdistribution=cdf)
A:networkx.algorithms.swap.v->random.choice(G.neighbors(u))
A:networkx.algorithms.swap.y->random.choice(G.neighbors(x))
A:networkx.algorithms.swap.deg->G.degree()
A:networkx.algorithms.swap.dk->list(deg.keys())
A:networkx.algorithms.swap.window->int(math.ceil(window / 2))
A:networkx.algorithms.swap.(u, v, x, y)->swapped.pop()
networkx.algorithms.swap.connected_double_edge_swap(G,nswap=1,_window_threshold=3)
networkx.algorithms.swap.double_edge_swap(G,nswap=1,max_tries=100)
networkx.connected_double_edge_swap(G,nswap=1,_window_threshold=3)
networkx.double_edge_swap(G,nswap=1,max_tries=100)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/richclub.py----------------------------------------
A:networkx.algorithms.richclub.__author__->'\n'.join(['Ben Edwards', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.richclub.rc->_compute_rc(G)
A:networkx.algorithms.richclub.R->G.copy()
A:networkx.algorithms.richclub.E->G.copy().number_of_edges()
A:networkx.algorithms.richclub.rcran->_compute_rc(R)
A:networkx.algorithms.richclub.deghist->networkx.degree_histogram(G)
A:networkx.algorithms.richclub.total->sum(deghist)
A:networkx.algorithms.richclub.deg->G.degree()
A:networkx.algorithms.richclub.edge_degrees->sorted((sorted((deg[u], deg[v])) for (u, v) in G.edges_iter()))
A:networkx.algorithms.richclub.ek->G.number_of_edges()
A:networkx.algorithms.richclub.(k1, k2)->sorted((sorted((deg[u], deg[v])) for (u, v) in G.edges_iter())).pop(0)
networkx._compute_rc(G)
networkx.algorithms.richclub._compute_rc(G)
networkx.algorithms.richclub.rich_club_coefficient(G,normalized=True,Q=100)
networkx.rich_club_coefficient(G,normalized=True,Q=100)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/core.py----------------------------------------
A:networkx.algorithms.core.__author__->'\n'.join(['Dan Schult (dschult@colgate.edu)', 'Jason Grout (jason-sage@creativetrax.com)', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.core.degrees->G.degree()
A:networkx.algorithms.core.nodes->sorted(degrees, key=degrees.get)
A:networkx.algorithms.core.node_pos->dict(((v, pos) for (pos, v) in enumerate(nodes)))
A:networkx.algorithms.core.nbrs->dict(((v, set(neighbors(v))) for v in G))
A:networkx.algorithms.core.core_number->networkx.core_number(G)
A:networkx.algorithms.core.k->max(core_number.values())
networkx.algorithms.core.core_number(G)
networkx.algorithms.core.k_core(G,k=None,core_number=None)
networkx.algorithms.core.k_corona(G,k,core_number=None)
networkx.algorithms.core.k_crust(G,k=None,core_number=None)
networkx.algorithms.core.k_shell(G,k=None,core_number=None)
networkx.core_number(G)
networkx.k_core(G,k=None,core_number=None)
networkx.k_corona(G,k,core_number=None)
networkx.k_crust(G,k=None,core_number=None)
networkx.k_shell(G,k=None,core_number=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/dominance.py----------------------------------------
A:networkx.algorithms.dominance.order->list(nx.dfs_postorder_nodes(G, start))
A:networkx.algorithms.dominance.new_idom->reduce(intersect, (v for v in G.pred[u] if v in idom))
A:networkx.algorithms.dominance.idom->networkx.immediate_dominators(G, start)
A:networkx.algorithms.dominance.p->set()
networkx.algorithms.dominance.dominance_frontiers(G,start)
networkx.algorithms.dominance.immediate_dominators(G,start)
networkx.dominance_frontiers(G,start)
networkx.immediate_dominators(G,start)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/cluster.py----------------------------------------
A:networkx.algorithms.cluster.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Dan Schult (dschult@colgate.edu)', 'Pieter Swart (swart@lanl.gov)', 'Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.cluster.nodes_nbrs->G.adj.items()
A:networkx.algorithms.cluster.max_weight->float(max((d.get(weight, 1.0) for (u, v, d) in G.edges(data=True))))
A:networkx.algorithms.cluster.seen->set()
A:networkx.algorithms.cluster.c->clustering(G, nodes, weight=weight).values()
A:networkx.algorithms.cluster.td_iter->_triangles_and_degree_iter(G, nodes)
A:networkx.algorithms.cluster.node_iter->G.nbunch_iter(nodes)
A:networkx.algorithms.cluster.squares->len((set(G[u]) & set(G[w])) - set([v]))
networkx._triangles_and_degree_iter(G,nodes=None)
networkx._weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster._triangles_and_degree_iter(G,nodes=None)
networkx.algorithms.cluster._weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster.average_clustering(G,nodes=None,weight=None,count_zeros=True)
networkx.algorithms.cluster.clustering(G,nodes=None,weight=None)
networkx.algorithms.cluster.square_clustering(G,nodes=None)
networkx.algorithms.cluster.transitivity(G)
networkx.algorithms.cluster.triangles(G,nodes=None)
networkx.average_clustering(G,nodes=None,weight=None,count_zeros=True)
networkx.clustering(G,nodes=None,weight=None)
networkx.square_clustering(G,nodes=None)
networkx.transitivity(G)
networkx.triangles(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_prediction.py----------------------------------------
A:networkx.algorithms.link_prediction.ebunch->networkx.non_edges(G)
A:networkx.algorithms.link_prediction.cnbors->set(nx.common_neighbors(G, u, v))
A:networkx.algorithms.link_prediction.union_size->len(set(G[u]) | set(G[v]))
A:networkx.algorithms.link_prediction.Cu->_community(G, u, community)
A:networkx.algorithms.link_prediction.Cv->_community(G, v, community)
A:networkx.algorithms.link_prediction.within->set((w for w in cnbors if _community(G, w, community) == Cu))
networkx._community(G,u,community)
networkx.adamic_adar_index(G,ebunch=None)
networkx.algorithms.link_prediction._community(G,u,community)
networkx.algorithms.link_prediction.adamic_adar_index(G,ebunch=None)
networkx.algorithms.link_prediction.cn_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.link_prediction.jaccard_coefficient(G,ebunch=None)
networkx.algorithms.link_prediction.preferential_attachment(G,ebunch=None)
networkx.algorithms.link_prediction.ra_index_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.algorithms.link_prediction.resource_allocation_index(G,ebunch=None)
networkx.algorithms.link_prediction.within_inter_cluster(G,ebunch=None,delta=0.001,community='community')
networkx.cn_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.jaccard_coefficient(G,ebunch=None)
networkx.preferential_attachment(G,ebunch=None)
networkx.ra_index_soundarajan_hopcroft(G,ebunch=None,community='community')
networkx.resource_allocation_index(G,ebunch=None)
networkx.within_inter_cluster(G,ebunch=None,delta=0.001,community='community')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/dag.py----------------------------------------
A:networkx.algorithms.dag.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Dan Schult (dschult@colgate.edu)', 'Ben Edwards (bedwards@cs.unm.edu)'])
A:networkx.algorithms.dag.seen->set()
A:networkx.algorithms.dag.explored->set()
A:networkx.algorithms.dag.nbunch->G.nodes_iter()
A:networkx.algorithms.dag.ancestors->set()
A:networkx.algorithms.dag.s->next(G.nodes_iter())
A:networkx.algorithms.dag.g->gcd(g, levels[u] - levels[v] + 1)
A:networkx.algorithms.dag.TC->networkx.transitive_closure(G)
A:networkx.algorithms.dag.(antichain, stack)->antichains_stacks.pop()
A:networkx.algorithms.dag.x->stack.pop()
A:networkx.algorithms.dag.dist[node]->max(pairs)
A:networkx.algorithms.dag.(node, (length, _))->max(dist.items(), key=lambda x: x[1])
networkx.algorithms.dag.ancestors(G,source)
networkx.algorithms.dag.antichains(G)
networkx.algorithms.dag.dag_longest_path(G)
networkx.algorithms.dag.dag_longest_path_length(G)
networkx.algorithms.dag.descendants(G,source)
networkx.algorithms.dag.is_aperiodic(G)
networkx.algorithms.dag.is_directed_acyclic_graph(G)
networkx.algorithms.dag.topological_sort(G,nbunch=None,reverse=False)
networkx.algorithms.dag.topological_sort_recursive(G,nbunch=None,reverse=False)
networkx.algorithms.dag.transitive_closure(G)
networkx.ancestors(G,source)
networkx.antichains(G)
networkx.dag_longest_path(G)
networkx.dag_longest_path_length(G)
networkx.descendants(G,source)
networkx.is_aperiodic(G)
networkx.is_directed_acyclic_graph(G)
networkx.topological_sort(G,nbunch=None,reverse=False)
networkx.topological_sort_recursive(G,nbunch=None,reverse=False)
networkx.transitive_closure(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/dominating.py----------------------------------------
A:networkx.algorithms.dominating.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.dominating.all_nodes->set(G)
A:networkx.algorithms.dominating.v->set(G).pop()
A:networkx.algorithms.dominating.D->set([v])
A:networkx.algorithms.dominating.ND->set(G[v])
A:networkx.algorithms.dominating.w->other.pop()
A:networkx.algorithms.dominating.testset->set((n for n in nbunch if n in G))
A:networkx.algorithms.dominating.nbrs->set()
networkx.algorithms.dominating.dominating_set(G,start_with=None)
networkx.algorithms.dominating.is_dominating_set(G,nbunch)
networkx.dominating_set(G,start_with=None)
networkx.is_dominating_set(G,nbunch)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/minors.py----------------------------------------
A:networkx.algorithms.minors.x->peek(block)
A:networkx.algorithms.minors.H->G.copy()
A:networkx.algorithms.minors.new_edges->chain(in_edges, out_edges)
networkx.algorithms.minors.contracted_edge(G,edge,self_loops=True)
networkx.algorithms.minors.contracted_nodes(G,u,v,self_loops=True)
networkx.algorithms.minors.equivalence_classes(iterable,relation)
networkx.algorithms.minors.peek(iterable)
networkx.algorithms.minors.quotient_graph(G,node_relation,edge_relation=None,create_using=None)
networkx.contracted_edge(G,edge,self_loops=True)
networkx.contracted_nodes(G,u,v,self_loops=True)
networkx.equivalence_classes(iterable,relation)
networkx.peek(iterable)
networkx.quotient_graph(G,node_relation,edge_relation=None,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isolate.py----------------------------------------
A:networkx.algorithms.isolate.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
networkx.algorithms.isolate.is_isolate(G,n)
networkx.algorithms.isolate.isolates(G)
networkx.is_isolate(G,n)
networkx.isolates(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/smetric.py----------------------------------------
networkx.algorithms.smetric.s_metric(G,normalized=True)
networkx.s_metric(G,normalized=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/hybrid.py----------------------------------------
A:networkx.algorithms.hybrid.H->copy.deepcopy(G)
A:networkx.algorithms.hybrid.verts->set([u, v])
A:networkx.algorithms.hybrid.G2->copy.deepcopy(G)
A:networkx.algorithms.hybrid.path->networkx.shortest_path(G2, u, v)
networkx.algorithms.hybrid.is_kl_connected(G,k,l,low_memory=False)
networkx.algorithms.hybrid.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)
networkx.is_kl_connected(G,k,l,low_memory=False)
networkx.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/distance_regular.py----------------------------------------
A:networkx.algorithms.distance_regular.__author__->'\n'.join(['Dheeraj M R <dheerajrav@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.distance_regular.a->intersection_array(G)
A:networkx.algorithms.distance_regular.d->len(b)
A:networkx.algorithms.distance_regular.degree->G.degree_iter()
A:networkx.algorithms.distance_regular.(_, k)->next(degree)
A:networkx.algorithms.distance_regular.path_length->networkx.all_pairs_shortest_path_length(G)
A:networkx.algorithms.distance_regular.diameter->max([max(path_length[n].values()) for n in path_length])
A:networkx.algorithms.distance_regular.c->len([n for n in G[v] if path_length[n][u] == i - 1])
A:networkx.algorithms.distance_regular.b->len([n for n in G[v] if path_length[n][u] == i + 1])
networkx.algorithms.distance_regular.global_parameters(b,c)
networkx.algorithms.distance_regular.intersection_array(G)
networkx.algorithms.distance_regular.is_distance_regular(G)
networkx.global_parameters(b,c)
networkx.intersection_array(G)
networkx.is_distance_regular(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/graphical.py----------------------------------------
A:networkx.algorithms.graphical.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)Joel Miller (joel.c.miller.research@gmail.com)Ben EdwardsBrian Cloteaux <brian.cloteaux@nist.gov>'])
A:networkx.algorithms.graphical.valid->is_valid_degree_sequence_havel_hakimi(list(sequence))
A:networkx.algorithms.graphical.p->len(deg_sequence)
A:networkx.algorithms.graphical.(dmax, dmin, dsum, n, num_degs)->_basic_graphical_tests(deg_sequence)
A:networkx.algorithms.graphical.deg_sequence->list(sequence)
A:networkx.algorithms.graphical.s->list(sequence)
A:networkx.algorithms.graphical.in_deg_sequence->list(in_sequence)
A:networkx.algorithms.graphical.out_deg_sequence->list(out_sequence)
A:networkx.algorithms.graphical.maxn->max(nin, nout)
A:networkx.algorithms.graphical.(freeout, freein)->heapq.heappop(stubheap)
A:networkx.algorithms.graphical.stubout->heapq.heappop(zeroheap)
A:networkx.algorithms.graphical.(stubout, stubin)->heapq.heappop(stubheap)
networkx._basic_graphical_tests(deg_sequence)
networkx.algorithms.graphical._basic_graphical_tests(deg_sequence)
networkx.algorithms.graphical.is_digraphical(in_sequence,out_sequence)
networkx.algorithms.graphical.is_graphical(sequence,method='eg')
networkx.algorithms.graphical.is_multigraphical(sequence)
networkx.algorithms.graphical.is_pseudographical(sequence)
networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi(deg_sequence)
networkx.is_digraphical(in_sequence,out_sequence)
networkx.is_graphical(sequence,method='eg')
networkx.is_multigraphical(sequence)
networkx.is_pseudographical(sequence)
networkx.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.is_valid_degree_sequence_havel_hakimi(deg_sequence)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/cycles.py----------------------------------------
A:networkx.algorithms.cycles.__author__->'\n'.join(['Jon Olav Vik <jonovik@gmail.com>', 'Dan Schult <dschult@colgate.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.cycles.gnodes->set(G.nodes())
A:networkx.algorithms.cycles.root->set(G.nodes()).pop()
A:networkx.algorithms.cycles.z->set([thisnode]).pop()
A:networkx.algorithms.cycles.used[nbr]->set([z])
A:networkx.algorithms.cycles.stack->set([thisnode])
A:networkx.algorithms.cycles.node->set([thisnode]).pop()
A:networkx.algorithms.cycles.subG->type(G)(G.edges_iter())
A:networkx.algorithms.cycles.sccs->list(nx.strongly_connected_components(subG))
A:networkx.algorithms.cycles.scc->list(nx.strongly_connected_components(subG)).pop()
A:networkx.algorithms.cycles.startnode->min(component, key=ordering.__getitem__)
A:networkx.algorithms.cycles.blocked->defaultdict(bool)
A:networkx.algorithms.cycles.closed->set()
A:networkx.algorithms.cycles.B->defaultdict(list)
A:networkx.algorithms.cycles.nextnode->nbrs.pop()
A:networkx.algorithms.cycles.H->type(G)(G.edges_iter()).subgraph(scc)
A:networkx.algorithms.cycles.ordering->dict(zip(G, range(len(G))))
A:networkx.algorithms.cycles.subgraph->G.subgraph((node for node in G if ordering[node] >= ordering[s]))
A:networkx.algorithms.cycles.strongcomp->networkx.strongly_connected_components(subgraph)
A:networkx.algorithms.cycles.mincomp->min(strongcomp, key=lambda nodes: min((ordering[n] for n in nodes)))
A:networkx.algorithms.cycles.component->G.subgraph(mincomp)
A:networkx.algorithms.cycles.dummy->circuit(startnode, startnode, component)
A:networkx.algorithms.cycles.(out_edge, key, tailhead)->helper_funcs(G, orientation)
A:networkx.algorithms.cycles.explored->set()
A:networkx.algorithms.cycles.(tail, head)->tailhead(edge)
A:networkx.algorithms.cycles.popped_edge->edges.pop()
networkx.algorithms.cycles.cycle_basis(G,root=None)
networkx.algorithms.cycles.find_cycle(G,source=None,orientation='original')
networkx.algorithms.cycles.recursive_simple_cycles(G)
networkx.algorithms.cycles.simple_cycles(G)
networkx.cycle_basis(G,root=None)
networkx.find_cycle(G,source=None,orientation='original')
networkx.recursive_simple_cycles(G)
networkx.simple_cycles(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/clique.py----------------------------------------
A:networkx.algorithms.clique.index[u]->len(index)
A:networkx.algorithms.clique.queue->deque((([u], sorted(nbrs[u], key=index.__getitem__)) for u in G))
A:networkx.algorithms.clique.(base, cnbrs)->map(list, queue.popleft())
A:networkx.algorithms.clique.subg->set(G)
A:networkx.algorithms.clique.cand->set(G)
A:networkx.algorithms.clique.u->max(subg, key=lambda u: len(cand & adj[u]))
A:networkx.algorithms.clique.q->ext_u.pop()
A:networkx.algorithms.clique.(subg, cand, ext_u)->stack.pop()
A:networkx.algorithms.clique.cliq->list(find_cliques(G))
A:networkx.algorithms.clique.B->networkx.Graph()
A:networkx.algorithms.clique.G->networkx.Graph()
A:networkx.algorithms.clique.cliques->list(find_cliques(G))
A:networkx.algorithms.clique.H->networkx.ego_graph(G, nodes)
A:networkx.algorithms.clique.d[n]->max((len(c) for c in find_cliques(H)))
A:networkx.algorithms.clique.d->max([len(c) for c in cliques if v in c])
A:networkx.algorithms.clique.nodes->networkx.Graph().nodes()
A:networkx.algorithms.clique.d[v]->max([len(c) for c in cliques if v in c])
A:networkx.algorithms.clique.numcliq->len([1 for c in cliques if v in c])
A:networkx.algorithms.clique.numcliq[v]->len([1 for c in cliques if v in c])
networkx.algorithms.clique.cliques_containing_node(G,nodes=None,cliques=None)
networkx.algorithms.clique.enumerate_all_cliques(G)
networkx.algorithms.clique.find_cliques(G)
networkx.algorithms.clique.find_cliques_recursive(G)
networkx.algorithms.clique.graph_clique_number(G,cliques=None)
networkx.algorithms.clique.graph_number_of_cliques(G,cliques=None)
networkx.algorithms.clique.make_clique_bipartite(G,fpos=None,create_using=None,name=None)
networkx.algorithms.clique.make_max_clique_graph(G,create_using=None,name=None)
networkx.algorithms.clique.node_clique_number(G,nodes=None,cliques=None)
networkx.algorithms.clique.number_of_cliques(G,nodes=None,cliques=None)
networkx.algorithms.clique.project_down(B,create_using=None,name=None)
networkx.algorithms.clique.project_up(B,create_using=None,name=None)
networkx.cliques_containing_node(G,nodes=None,cliques=None)
networkx.enumerate_all_cliques(G)
networkx.find_cliques(G)
networkx.find_cliques_recursive(G)
networkx.graph_clique_number(G,cliques=None)
networkx.graph_number_of_cliques(G,cliques=None)
networkx.make_clique_bipartite(G,fpos=None,create_using=None,name=None)
networkx.make_max_clique_graph(G,create_using=None,name=None)
networkx.node_clique_number(G,nodes=None,cliques=None)
networkx.number_of_cliques(G,nodes=None,cliques=None)
networkx.project_down(B,create_using=None,name=None)
networkx.project_up(B,create_using=None,name=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/distance_measures.py----------------------------------------
A:networkx.algorithms.distance_measures.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.distance_measures.order->G.order()
A:networkx.algorithms.distance_measures.length->networkx.single_source_shortest_path_length(G, n)
A:networkx.algorithms.distance_measures.L->len(length)
A:networkx.algorithms.distance_measures.e[n]->max(length.values())
A:networkx.algorithms.distance_measures.e->eccentricity(G)
A:networkx.algorithms.distance_measures.diameter->max(e.values())
A:networkx.algorithms.distance_measures.radius->min(e.values())
networkx.algorithms.distance_measures.center(G,e=None)
networkx.algorithms.distance_measures.diameter(G,e=None)
networkx.algorithms.distance_measures.eccentricity(G,v=None,sp=None)
networkx.algorithms.distance_measures.periphery(G,e=None)
networkx.algorithms.distance_measures.radius(G,e=None)
networkx.center(G,e=None)
networkx.diameter(G,e=None)
networkx.eccentricity(G,v=None,sp=None)
networkx.periphery(G,e=None)
networkx.radius(G,e=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/vitality.py----------------------------------------
A:networkx.algorithms.vitality.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Renato Fabbri'])
A:networkx.algorithms.vitality.path_length->networkx.single_source_dijkstra_path_length(G, n, weight=weight)
A:networkx.algorithms.vitality.multigraph->G.is_multigraph()
A:networkx.algorithms.vitality.wig->weiner_index(G, weight)
A:networkx.algorithms.vitality.edges->G.edges(n, data=True)
networkx.algorithms.vitality.closeness_vitality(G,weight=None)
networkx.algorithms.vitality.weiner_index(G,weight=None)
networkx.closeness_vitality(G,weight=None)
networkx.weiner_index(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/boundary.py----------------------------------------
A:networkx.algorithms.boundary.nset1->set((n for n in nbunch1 if n in G))
A:networkx.algorithms.boundary.nset2->set(nbunch2)
A:networkx.algorithms.boundary.bdy->set()
networkx.algorithms.boundary.edge_boundary(G,nbunch1,nbunch2=None)
networkx.algorithms.boundary.node_boundary(G,nbunch1,nbunch2=None)
networkx.edge_boundary(G,nbunch1,nbunch2=None)
networkx.node_boundary(G,nbunch1,nbunch2=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/hierarchy.py----------------------------------------
A:networkx.algorithms.hierarchy.__authors__->'\n'.join(['Ben Edwards (bedwards@cs.unm.edu)'])
A:networkx.algorithms.hierarchy.scc->networkx.strongly_connected_components(G)
networkx.algorithms.hierarchy.flow_hierarchy(G,weight=None)
networkx.flow_hierarchy(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/matching.py----------------------------------------
A:networkx.algorithms.matching.__author__->'\n'.join(['Joris van Rantwijk', 'Nicholas Mancuso (nick.mancuso@gmail.com)'])
A:networkx.algorithms.matching.matching->set([])
A:networkx.algorithms.matching.edges->set([])
A:networkx.algorithms.matching.gnodes->G.nodes()
A:networkx.algorithms.matching.wt->slack(*bestedge[v]).get('weight', 1)
A:networkx.algorithms.matching.inblossom->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.blossomparent->dict(zip(gnodes, repeat(None)))
A:networkx.algorithms.matching.blossombase->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.dualvar->dict(zip(gnodes, repeat(maxweight)))
A:networkx.algorithms.matching.b->Blossom()
A:networkx.algorithms.matching.b.mybestedges->list(bestedgeto.values())
A:networkx.algorithms.matching.kslack->slack(*bestedge[b])
A:networkx.algorithms.matching.j->Blossom().childs.index(entrychild)
A:networkx.algorithms.matching.ij->Blossom().childs.index(t)
A:networkx.algorithms.matching.vdualoffset->max(0, -min(dualvar.values()))
A:networkx.algorithms.matching.v->queue.pop()
A:networkx.algorithms.matching.base->scanBlossom(v, w)
A:networkx.algorithms.matching.delta->max(0, min(dualvar.values()))
A:networkx.algorithms.matching.d->slack(*bestedge[v])
networkx.algorithms.matching.max_weight_matching(G,maxcardinality=False)
networkx.algorithms.matching.maximal_matching(G)
networkx.max_weight_matching(G,maxcardinality=False)
networkx.maximal_matching(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/mis.py----------------------------------------
A:networkx.algorithms.mis.__author__->'\n'.join(['Leo Lopes <leo.lopes@monash.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.algorithms.mis.nodes->set(nodes)
A:networkx.algorithms.mis.neighbors->set.union(*[set(G.neighbors(v)) for v in nodes])
A:networkx.algorithms.mis.indep_nodes->list(nodes)
A:networkx.algorithms.mis.available_nodes->set(G.nodes()).difference(neighbors.union(nodes))
A:networkx.algorithms.mis.node->random.choice(list(available_nodes))
networkx.algorithms.mis.maximal_independent_set(G,nodes=None)
networkx.maximal_independent_set(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/simple_paths.py----------------------------------------
A:networkx.algorithms.simple_paths.__author__->'\n'.join(['Sérgio Nery Simões <sergionery@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>', 'Andrey Paramonov', 'Jordi Torrents <jordi.t21@gmail.com>'])
A:networkx.algorithms.simple_paths.child->next(children, None)
A:networkx.algorithms.simple_paths.count->([child] + list(children)).count(target)
A:networkx.algorithms.simple_paths.listA->list()
A:networkx.algorithms.simple_paths.listB->PathBuffer()
A:networkx.algorithms.simple_paths.(length, path)->shortest_path_func(G, source, target, weight=weight)
A:networkx.algorithms.simple_paths.ignore_nodes->set()
A:networkx.algorithms.simple_paths.ignore_edges->set()
A:networkx.algorithms.simple_paths.root_length->length_func(root)
A:networkx.algorithms.simple_paths.(length, spur)->shortest_path_func(G, root[-1], target, ignore_nodes=ignore_nodes, ignore_edges=ignore_edges, weight=weight)
A:networkx.algorithms.simple_paths.path->PathBuffer().pop()
A:networkx.algorithms.simple_paths.self.paths->set()
A:networkx.algorithms.simple_paths.self.sortedpaths->list()
A:networkx.algorithms.simple_paths.self.counter->count()
A:networkx.algorithms.simple_paths.hashable_path->tuple(path)
A:networkx.algorithms.simple_paths.(cost, num, path)->heappop(self.sortedpaths)
A:networkx.algorithms.simple_paths.results->_bidirectional_pred_succ(G, source, target, ignore_nodes, ignore_edges)
A:networkx.algorithms.simple_paths.Gpred->filter_iter(Gpred)
A:networkx.algorithms.simple_paths.Gsucc->filter_iter(Gsucc)
A:networkx.algorithms.simple_paths.c->count()
A:networkx.algorithms.simple_paths.(dist, _, v)->pop(fringe[dir])
A:networkx.algorithms.simple_paths.minweight->G[w][v].get(weight, 1)
networkx.PathBuffer(self)
networkx.PathBuffer.__len__(self)
networkx.PathBuffer.pop(self)
networkx.PathBuffer.push(self,cost,path)
networkx._all_simple_paths_graph(G,source,target,cutoff=None)
networkx._all_simple_paths_multigraph(G,source,target,cutoff=None)
networkx._bidirectional_dijkstra(G,source,target,weight='weight',ignore_nodes=None,ignore_edges=None)
networkx._bidirectional_pred_succ(G,source,target,ignore_nodes=None,ignore_edges=None)
networkx._bidirectional_shortest_path(G,source,target,ignore_nodes=None,ignore_edges=None,weight=None)
networkx.algorithms.simple_paths.PathBuffer(self)
networkx.algorithms.simple_paths.PathBuffer.__init__(self)
networkx.algorithms.simple_paths.PathBuffer.__len__(self)
networkx.algorithms.simple_paths.PathBuffer.pop(self)
networkx.algorithms.simple_paths.PathBuffer.push(self,cost,path)
networkx.algorithms.simple_paths._all_simple_paths_graph(G,source,target,cutoff=None)
networkx.algorithms.simple_paths._all_simple_paths_multigraph(G,source,target,cutoff=None)
networkx.algorithms.simple_paths._bidirectional_dijkstra(G,source,target,weight='weight',ignore_nodes=None,ignore_edges=None)
networkx.algorithms.simple_paths._bidirectional_pred_succ(G,source,target,ignore_nodes=None,ignore_edges=None)
networkx.algorithms.simple_paths._bidirectional_shortest_path(G,source,target,ignore_nodes=None,ignore_edges=None,weight=None)
networkx.algorithms.simple_paths.all_simple_paths(G,source,target,cutoff=None)
networkx.algorithms.simple_paths.shortest_simple_paths(G,source,target,weight=None)
networkx.all_simple_paths(G,source,target,cutoff=None)
networkx.shortest_simple_paths(G,source,target,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/euler.py----------------------------------------
A:networkx.algorithms.euler.__author__->'\n'.join(['Nima Mohammadi (nima.irt[AT]gmail.com)', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.euler.g->G.__class__(G)
A:networkx.algorithms.euler.v->next(g.nodes_iter())
A:networkx.algorithms.euler.get_vertex->itemgetter(1)
A:networkx.algorithms.euler.random_edge->next(edges(current_vertex))
networkx.algorithms.euler.eulerian_circuit(G,source=None)
networkx.algorithms.euler.is_eulerian(G)
networkx.eulerian_circuit(G,source=None)
networkx.is_eulerian(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/block.py----------------------------------------
A:networkx.algorithms.block.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.block.part->list(map(set, partitions))
A:networkx.algorithms.block.u->set()
A:networkx.algorithms.block.M->networkx.Graph()
A:networkx.algorithms.block.SG->G.subgraph(p)
A:networkx.algorithms.block.M.node[i]['nnodes']->G.subgraph(p).number_of_nodes()
A:networkx.algorithms.block.M.node[i]['nedges']->G.subgraph(p).number_of_edges()
A:networkx.algorithms.block.M.node[i]['density']->networkx.density(SG)
A:networkx.algorithms.block.nodes_in_block->networkx.Graph().node[n]['graph'].nodes()
A:networkx.algorithms.block.weight->d.get('weight', 1.0)
networkx.algorithms.block.blockmodel(G,partitions,multigraph=False)
networkx.blockmodel(G,partitions,multigraph=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/correlation.py----------------------------------------
A:networkx.algorithms.assortativity.correlation.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Oleguer Sagarra <oleguer.sagarra@gmail.com>'])
A:networkx.algorithms.assortativity.correlation.M->numpy.asmatrix(M)
A:networkx.algorithms.assortativity.correlation.xy->numpy.outer(x, y)
A:networkx.algorithms.assortativity.correlation.(x, y)->zip(*xy)
A:networkx.algorithms.assortativity.correlation.a->numpy.asmatrix(M).sum(axis=0)
A:networkx.algorithms.assortativity.correlation.s->(M * M).sum()
A:networkx.algorithms.assortativity.correlation.t->numpy.asmatrix(M).trace()
A:networkx.algorithms.assortativity.correlation.x->numpy.arange(nx)
A:networkx.algorithms.assortativity.correlation.y->numpy.arange(ny)
A:networkx.algorithms.assortativity.correlation.b->numpy.asmatrix(M).sum(axis=1)
A:networkx.algorithms.assortativity.correlation.ab->numpy.outer(a, b)
networkx.algorithms.assortativity.correlation.attribute_ac(M)
networkx.algorithms.assortativity.correlation.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.numeric_ac(M)
networkx.algorithms.assortativity.correlation.numeric_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation.setup_module(module)
networkx.attribute_ac(M)
networkx.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.numeric_ac(M)
networkx.numeric_assortativity_coefficient(G,attribute,nodes=None)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/mixing.py----------------------------------------
A:networkx.algorithms.assortativity.mixing.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.assortativity.mixing.xy_iter->node_degree_xy(G, x=x, y=y, nodes=nodes, weight=weight)
A:networkx.algorithms.assortativity.mixing.d->attribute_mixing_dict(G, attribute, nodes)
A:networkx.algorithms.assortativity.mixing.a->dict_to_numpy_array(d, mapping=mapping)
A:networkx.algorithms.assortativity.mixing.s->set(d.keys())
A:networkx.algorithms.assortativity.mixing.m->max(s)
A:networkx.algorithms.assortativity.mixing.mapping->dict(zip(range(m + 1), range(m + 1)))
A:networkx.algorithms.assortativity.mixing.v->d[x].get(y, 0)
networkx.algorithms.assortativity.mixing.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.algorithms.assortativity.mixing.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True)
networkx.algorithms.assortativity.mixing.mixing_dict(xy,normalized=False)
networkx.algorithms.assortativity.mixing.numeric_mixing_matrix(G,attribute,nodes=None,normalized=True)
networkx.algorithms.assortativity.mixing.setup_module(module)
networkx.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True)
networkx.mixing_dict(xy,normalized=False)
networkx.numeric_mixing_matrix(G,attribute,nodes=None,normalized=True)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.neighbor_degree.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.assortativity.neighbor_degree.nbrdeg->target_degree(G[n])
networkx._average_nbr_deg(G,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg(G,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)
networkx.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/pairs.py----------------------------------------
A:networkx.algorithms.assortativity.pairs.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.assortativity.pairs.nodes->set(nodes)
A:networkx.algorithms.assortativity.pairs.uattr->node[u].get(attribute, None)
A:networkx.algorithms.assortativity.pairs.vattr->node[v].get(attribute, None)
networkx.algorithms.assortativity.pairs.node_attribute_xy(G,attribute,nodes=None)
networkx.algorithms.assortativity.pairs.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.pairs.setup_module(module)
networkx.node_attribute_xy(G,attribute,nodes=None)
networkx.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.connectivity.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.assortativity.connectivity.dsum->defaultdict(float)
A:networkx.algorithms.assortativity.connectivity.dnorm->defaultdict(float)
A:networkx.algorithms.assortativity.connectivity.nbrdeg->target_degree(neighbors(n))
A:networkx.algorithms.assortativity.connectivity.s->float(sum((G[nbr][n].get(weight, 1) * d for (nbr, d) in nbrdeg.items())))
networkx._avg_deg_conn(G,neighbors,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.connectivity._avg_deg_conn(G,neighbors,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.connectivity.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)
networkx.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/base_test.py----------------------------------------
A:networkx.algorithms.assortativity.tests.base_test.G->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.S->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.self.P4->networkx.path_graph(4)
A:networkx.algorithms.assortativity.tests.base_test.self.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.self.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.self.S->networkx.Graph()
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing(object)
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setUp(self)
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing(object)
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setUp(self)
networkx.tests.base_test.BaseTestAttributeMixing(object)
networkx.tests.base_test.BaseTestAttributeMixing.setUp(self)
networkx.tests.base_test.BaseTestDegreeMixing(object)
networkx.tests.base_test.BaseTestDegreeMixing.setUp(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/test_neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.G->networkx.star_graph(5)
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.nd->networkx.average_neighbor_degree(G, nodes=[1, 2])
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.D->networkx.star_graph(5).to_directed()
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor(object)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted(self)
networkx.tests.test_TestAverageNeighbor(object)
networkx.tests.test_TestAverageNeighbor.test_degree_barrat(self)
networkx.tests.test_TestAverageNeighbor.test_degree_k4(self)
networkx.tests.test_TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.tests.test_TestAverageNeighbor.test_degree_p4(self)
networkx.tests.test_TestAverageNeighbor.test_degree_p4_weighted(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/test_correlation.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_correlation.r->attribute_ac(a)
A:networkx.algorithms.assortativity.tests.test_correlation.a->numpy.array([[50, 50, 0], [50, 50, 0], [0, 0, 2]])
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.setupClass(cls)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.setupClass(cls)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.tests.test_TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingCorrelation.setupClass(cls)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.tests.test_TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingCorrelation.setupClass(cls)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/test_mixing.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_mixing.d->networkx.attribute_mixing_dict(self.M, 'fish')
A:networkx.algorithms.assortativity.tests.test_mixing.a_result->numpy.array([[4, 0, 0, 0], [0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
A:networkx.algorithms.assortativity.tests.test_mixing.a->networkx.attribute_mixing_matrix(self.M, 'fish', mapping=mapping)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.setupClass(cls)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.setupClass(cls)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)
networkx.tests.test_TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.tests.test_TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingMatrix.setupClass(cls)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.tests.test_TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_undirected_normalized(self)
networkx.tests.test_TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingMatrix.setupClass(cls)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/test_pairs.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy->sorted(nx.node_attribute_xy(self.S, 'fish'))
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy_result->sorted([('one', 'one'), ('two', 'two'), ('one', 'red'), ('two', 'blue')])
A:networkx.algorithms.assortativity.tests.test_pairs.xy->sorted(nx.node_degree_xy(G, weight='weight'))
A:networkx.algorithms.assortativity.tests.test_pairs.xy_result->sorted([(7, 17), (17, 10), (17, 7), (10, 17)])
A:networkx.algorithms.assortativity.tests.test_pairs.G->networkx.Graph()
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected_nodes(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted(self)
networkx.tests.test_TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_undirected_nodes(self)
networkx.tests.test_TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_undirected_nodes(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_weighted(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/assortativity/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_connectivity.G->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.test_connectivity.nd->networkx.average_degree_connectivity(D, weight='other', source='in', target='in')
A:networkx.algorithms.assortativity.tests.test_connectivity.D->networkx.DiGraph().to_directed()
A:networkx.algorithms.assortativity.tests.test_connectivity.c->networkx.average_degree_connectivity(G, source=s, target=t)
A:networkx.algorithms.assortativity.tests.test_connectivity.cw->networkx.average_degree_connectivity(G, source=s, target=t, weight='weight')
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity(object)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_in_out_weight(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg(self)
networkx.tests.test_TestNeighborConnectivity(object)
networkx.tests.test_TestNeighborConnectivity.test_degree_barrat(self)
networkx.tests.test_TestNeighborConnectivity.test_degree_p4(self)
networkx.tests.test_TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.tests.test_TestNeighborConnectivity.test_in_out_weight(self)
networkx.tests.test_TestNeighborConnectivity.test_weight_keyword(self)
networkx.tests.test_TestNeighborConnectivity.test_zero_deg(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_simple_paths.py----------------------------------------
A:networkx.algorithms.tests.test_simple_paths.G->networkx.Graph()
A:networkx.algorithms.tests.test_simple_paths.paths->list(nx.shortest_simple_paths(G, 0, 3))
A:networkx.algorithms.tests.test_simple_paths.source->next(G.nodes_iter())
A:networkx.algorithms.tests.test_simple_paths.n->len(G)
A:networkx.algorithms.tests.test_simple_paths.g1->networkx.Graph()
A:networkx.algorithms.tests.test_simple_paths.result->list(nx.shortest_simple_paths(g1, 'N1', 'N3', weight='weight'))
A:networkx.algorithms.tests.test_simple_paths.this_cost->cost_func(path)
A:networkx.algorithms.tests.test_simple_paths.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.tests.test_simple_paths.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.tests.test_simple_paths.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.tests.test_simple_paths.(length, path)->_bidirectional_shortest_path(directed_cycle, 0, 3, ignore_edges=[(2, 1)])
A:networkx.algorithms.tests.test_simple_paths.XG->networkx.DiGraph()
A:networkx.algorithms.tests.test_simple_paths.XG3->networkx.Graph()
A:networkx.algorithms.tests.test_simple_paths.path->_bidirectional_dijkstra(G, 1, 6)
networkx.algorithms.tests.test_simple_paths.hamiltonian_path(G,source)
networkx.algorithms.tests.test_simple_paths.test_Greg_Bernstein()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_cutoff()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_directed()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_empty()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph()
networkx.algorithms.tests.test_simple_paths.test_all_simple_paths_multigraph_with_cutoff()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijksta_restricted()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_dijkstra_no_path()
networkx.algorithms.tests.test_simple_paths.test_bidirectional_shortest_path_restricted()
networkx.algorithms.tests.test_simple_paths.test_cutoff_zero()
networkx.algorithms.tests.test_simple_paths.test_directed_weighted_shortest_simple_path()
networkx.algorithms.tests.test_simple_paths.test_hamiltonian_path()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths()
networkx.algorithms.tests.test_simple_paths.test_shortest_simple_paths_directed()
networkx.algorithms.tests.test_simple_paths.test_source_missing()
networkx.algorithms.tests.test_simple_paths.test_ssp_multigraph()
networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing()
networkx.algorithms.tests.test_simple_paths.test_ssp_source_missing()
networkx.algorithms.tests.test_simple_paths.test_ssp_target_missing()
networkx.algorithms.tests.test_simple_paths.test_target_missing()
networkx.algorithms.tests.test_simple_paths.test_weight_name()
networkx.algorithms.tests.test_simple_paths.test_weighted_shortest_simple_path()
networkx.algorithms.tests.test_simple_paths.validate_length_path(G,s,t,soln_len,length,path)
networkx.algorithms.tests.test_simple_paths.validate_path(G,s,t,soln_len,path)
networkx.tests.test_hamiltonian_path(G,source)
networkx.tests.test_test_Greg_Bernstein()
networkx.tests.test_test_all_simple_paths()
networkx.tests.test_test_all_simple_paths_cutoff()
networkx.tests.test_test_all_simple_paths_directed()
networkx.tests.test_test_all_simple_paths_empty()
networkx.tests.test_test_all_simple_paths_multigraph()
networkx.tests.test_test_all_simple_paths_multigraph_with_cutoff()
networkx.tests.test_test_bidirectional_dijksta_restricted()
networkx.tests.test_test_bidirectional_dijkstra_no_path()
networkx.tests.test_test_bidirectional_shortest_path_restricted()
networkx.tests.test_test_cutoff_zero()
networkx.tests.test_test_directed_weighted_shortest_simple_path()
networkx.tests.test_test_hamiltonian_path()
networkx.tests.test_test_shortest_simple_paths()
networkx.tests.test_test_shortest_simple_paths_directed()
networkx.tests.test_test_source_missing()
networkx.tests.test_test_ssp_multigraph()
networkx.tests.test_test_ssp_source_missing()
networkx.tests.test_test_ssp_source_missing()
networkx.tests.test_test_ssp_target_missing()
networkx.tests.test_test_target_missing()
networkx.tests.test_test_weight_name()
networkx.tests.test_test_weighted_shortest_simple_path()
networkx.tests.test_validate_length_path(G,s,t,soln_len,length,path)
networkx.tests.test_validate_path(G,s,t,soln_len,path)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_boundary.py----------------------------------------
A:networkx.algorithms.tests.test_boundary.self.null->networkx.null_graph()
A:networkx.algorithms.tests.test_boundary.self.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.self.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.P->networkx.petersen_graph()
networkx.algorithms.tests.test_boundary.TestBoundary
networkx.algorithms.tests.test_boundary.TestBoundary.setUp(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_null_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_null_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_path_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_path_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_petersen(self)
networkx.tests.test_TestBoundary
networkx.tests.test_TestBoundary.setUp(self)
networkx.tests.test_TestBoundary.test_k10_edge_boundary(self)
networkx.tests.test_TestBoundary.test_k10_node_boundary(self)
networkx.tests.test_TestBoundary.test_null_edge_boundary(self)
networkx.tests.test_TestBoundary.test_null_node_boundary(self)
networkx.tests.test_TestBoundary.test_path_edge_boundary(self)
networkx.tests.test_TestBoundary.test_path_node_boundary(self)
networkx.tests.test_TestBoundary.test_petersen(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_euler.py----------------------------------------
A:networkx.algorithms.tests.test_euler.G->networkx.MultiGraph()
A:networkx.algorithms.tests.test_euler.edges->list(eulerian_circuit(G, source=0))
A:networkx.algorithms.tests.test_euler.f->list(eulerian_circuit(nx.complete_graph(4)))
networkx.algorithms.tests.test_euler.TestEuler
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_cycle(self)
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_digraph(self)
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_multigraph(self)
networkx.algorithms.tests.test_euler.TestEuler.test_is_eulerian(self)
networkx.algorithms.tests.test_euler.TestEuler.test_is_eulerian2(self)
networkx.algorithms.tests.test_euler.TestEuler.test_not_eulerian(self)
networkx.tests.test_TestEuler
networkx.tests.test_TestEuler.test_eulerian_circuit_cycle(self)
networkx.tests.test_TestEuler.test_eulerian_circuit_digraph(self)
networkx.tests.test_TestEuler.test_eulerian_circuit_multigraph(self)
networkx.tests.test_TestEuler.test_is_eulerian(self)
networkx.tests.test_TestEuler.test_is_eulerian2(self)
networkx.tests.test_TestEuler.test_not_eulerian(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_minors.py----------------------------------------
A:networkx.algorithms.tests.test_minors.G->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_minors.expected->networkx.complete_graph(3)
A:networkx.algorithms.tests.test_minors.actual->networkx.contracted_edge(G, (0, 1))
A:networkx.algorithms.tests.test_minors.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.tests.test_minors.C->networkx.condensation(G, scc)
A:networkx.algorithms.tests.test_minors.Q->networkx.quotient_graph(G, same_component)
A:networkx.algorithms.tests.test_minors.G.node[0]->dict(foo='bar')
A:networkx.algorithms.tests.test_minors.G.node[1]->dict(baz='xyzzy')
A:networkx.algorithms.tests.test_minors.expected.node[0]->dict(foo='bar', contraction={1: dict(baz='xyzzy')})
networkx.algorithms.tests.test_minors.TestContraction(object)
networkx.algorithms.tests.test_minors.TestContraction.test_directed_node_contraction(self)
networkx.algorithms.tests.test_minors.TestContraction.test_node_attributes(self)
networkx.algorithms.tests.test_minors.TestContraction.test_nonexistent_edge(self)
networkx.algorithms.tests.test_minors.TestContraction.test_undirected_edge_contraction(self)
networkx.algorithms.tests.test_minors.TestContraction.test_undirected_node_contraction(self)
networkx.algorithms.tests.test_minors.TestContraction.test_without_self_loops(self)
networkx.algorithms.tests.test_minors.TestQuotient(object)
networkx.algorithms.tests.test_minors.TestQuotient.test_condensation_as_quotient(self)
networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_bipartite(self)
networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_complete_multipartite(self)
networkx.algorithms.tests.test_minors.TestQuotient.test_quotient_graph_edge_relation(self)
networkx.tests.test_TestContraction(object)
networkx.tests.test_TestContraction.test_directed_node_contraction(self)
networkx.tests.test_TestContraction.test_node_attributes(self)
networkx.tests.test_TestContraction.test_nonexistent_edge(self)
networkx.tests.test_TestContraction.test_undirected_edge_contraction(self)
networkx.tests.test_TestContraction.test_undirected_node_contraction(self)
networkx.tests.test_TestContraction.test_without_self_loops(self)
networkx.tests.test_TestQuotient(object)
networkx.tests.test_TestQuotient.test_condensation_as_quotient(self)
networkx.tests.test_TestQuotient.test_quotient_graph_complete_bipartite(self)
networkx.tests.test_TestQuotient.test_quotient_graph_complete_multipartite(self)
networkx.tests.test_TestQuotient.test_quotient_graph_edge_relation(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_graphical.py----------------------------------------
A:networkx.algorithms.tests.test_graphical.G->networkx.erdos_renyi_graph(n, p * (i + 1), None, True)
A:networkx.algorithms.tests.test_graphical.deg->list(graph.degree().values())
A:networkx.algorithms.tests.test_graphical.a->networkx.is_valid_degree_sequence([], 'foo')
A:networkx.algorithms.tests.test_graphical.self.GAG->networkx.generators.atlas.graph_atlas_g()
A:networkx.algorithms.tests.test_graphical.din->list(G.in_degree().values())
A:networkx.algorithms.tests.test_graphical.dout->list(G.out_degree().values())
networkx.algorithms.tests.test_graphical.TestAtlas(object)
networkx.algorithms.tests.test_graphical.TestAtlas.setUp(self)
networkx.algorithms.tests.test_graphical.TestAtlas.setupClass(cls)
networkx.algorithms.tests.test_graphical.TestAtlas.test_atlas(self)
networkx.algorithms.tests.test_graphical.test_directed_degree_sequence()
networkx.algorithms.tests.test_graphical.test_multi_sequence()
networkx.algorithms.tests.test_graphical.test_negative_input()
networkx.algorithms.tests.test_graphical.test_pseudo_sequence()
networkx.algorithms.tests.test_graphical.test_small_directed_sequences()
networkx.algorithms.tests.test_graphical.test_small_graph_false()
networkx.algorithms.tests.test_graphical.test_small_graph_true()
networkx.algorithms.tests.test_graphical.test_string_input()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2()
networkx.tests.test_TestAtlas(object)
networkx.tests.test_TestAtlas.setUp(self)
networkx.tests.test_TestAtlas.setupClass(cls)
networkx.tests.test_TestAtlas.test_atlas(self)
networkx.tests.test_test_directed_degree_sequence()
networkx.tests.test_test_multi_sequence()
networkx.tests.test_test_negative_input()
networkx.tests.test_test_pseudo_sequence()
networkx.tests.test_test_small_directed_sequences()
networkx.tests.test_test_small_graph_false()
networkx.tests.test_test_small_graph_true()
networkx.tests.test_test_string_input()
networkx.tests.test_test_valid_degree_sequence1()
networkx.tests.test_test_valid_degree_sequence2()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_dominating.py----------------------------------------
A:networkx.algorithms.tests.test_dominating.G->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_dominating.D->networkx.dominating_set(G, start_with=10)
A:networkx.algorithms.tests.test_dominating.K4->networkx.complete_graph(4)
A:networkx.algorithms.tests.test_dominating.K5->networkx.complete_graph(5)
A:networkx.algorithms.tests.test_dominating.d->set([1])
networkx.algorithms.tests.test_dominating.test_complete()
networkx.algorithms.tests.test_dominating.test_dominating_set()
networkx.algorithms.tests.test_dominating.test_dominating_set_error()
networkx.algorithms.tests.test_dominating.test_is_dominating_set()
networkx.algorithms.tests.test_dominating.test_wikipedia_is_dominating_set()
networkx.tests.test_test_complete()
networkx.tests.test_test_dominating_set()
networkx.tests.test_test_dominating_set_error()
networkx.tests.test_test_is_dominating_set()
networkx.tests.test_test_wikipedia_is_dominating_set()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_distance_regular.py----------------------------------------
A:networkx.algorithms.tests.test_distance_regular.G->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_distance_regular.(b, c)->networkx.intersection_array(nx.icosahedral_graph())
A:networkx.algorithms.tests.test_distance_regular.g->networkx.global_parameters(b, c)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected(self)
networkx.tests.test_TestDistanceRegular
networkx.tests.test_TestDistanceRegular.test_global_parameters(self)
networkx.tests.test_TestDistanceRegular.test_intersection_array(self)
networkx.tests.test_TestDistanceRegular.test_is_distance_regular(self)
networkx.tests.test_TestDistanceRegular.test_not_connected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_hybrid.py----------------------------------------
A:networkx.algorithms.tests.test_hybrid.G->networkx.Graph()
A:networkx.algorithms.tests.test_hybrid.(H, graphOK)->networkx.kl_connected_subgraph(G, 2, 2, low_memory=True, same_as_graph=True)
A:networkx.algorithms.tests.test_hybrid.H->networkx.kl_connected_subgraph(G, 2, 2)
networkx.algorithms.tests.test_hybrid.test_2d_grid_graph()
networkx.algorithms.tests.test_hybrid.test_small_graph()
networkx.tests.test_test_2d_grid_graph()
networkx.tests.test_test_small_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_smetric.py----------------------------------------
A:networkx.algorithms.tests.test_smetric.g->networkx.Graph()
A:networkx.algorithms.tests.test_smetric.sm->networkx.s_metric(nx.Graph(), normalized=True)
networkx.algorithms.tests.test_smetric.test_normalized()
networkx.algorithms.tests.test_smetric.test_smetric()
networkx.tests.test_test_normalized()
networkx.tests.test_test_smetric()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.tests.test_cluster.G->networkx.cycle_graph(3)
A:networkx.algorithms.tests.test_cluster.G1->networkx.cycle_graph(3).subgraph([1, 2, 3, 4, 5, 13, 14, 15, 16])
A:networkx.algorithms.tests.test_cluster.G2->networkx.cycle_graph(3).subgraph([1, 6, 7, 8, 9, 10, 11, 12])
networkx.algorithms.tests.test_cluster.TestClustering
networkx.algorithms.tests.test_cluster.TestClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestTransitivity
networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_path(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity(self)
networkx.algorithms.tests.test_cluster.TestTriangles
networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_empty(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge(self)
networkx.algorithms.tests.test_cluster.test_average_clustering()
networkx.tests.test_TestClustering
networkx.tests.test_TestClustering.test_clustering(self)
networkx.tests.test_TestClustering.test_cubical(self)
networkx.tests.test_TestClustering.test_k5(self)
networkx.tests.test_TestClustering.test_path(self)
networkx.tests.test_TestSquareClustering
networkx.tests.test_TestSquareClustering.test_bipartite_k5(self)
networkx.tests.test_TestSquareClustering.test_clustering(self)
networkx.tests.test_TestSquareClustering.test_cubical(self)
networkx.tests.test_TestSquareClustering.test_k5(self)
networkx.tests.test_TestSquareClustering.test_lind_square_clustering(self)
networkx.tests.test_TestSquareClustering.test_path(self)
networkx.tests.test_TestTransitivity
networkx.tests.test_TestTransitivity.test_cubical(self)
networkx.tests.test_TestTransitivity.test_k5(self)
networkx.tests.test_TestTransitivity.test_path(self)
networkx.tests.test_TestTransitivity.test_transitivity(self)
networkx.tests.test_TestTriangles
networkx.tests.test_TestTriangles.test_cubical(self)
networkx.tests.test_TestTriangles.test_empty(self)
networkx.tests.test_TestTriangles.test_k5(self)
networkx.tests.test_TestTriangles.test_path(self)
networkx.tests.test_TestWeightedClustering
networkx.tests.test_TestWeightedClustering.test_clustering(self)
networkx.tests.test_TestWeightedClustering.test_cubical(self)
networkx.tests.test_TestWeightedClustering.test_k5(self)
networkx.tests.test_TestWeightedClustering.test_path(self)
networkx.tests.test_TestWeightedClustering.test_triangle_and_edge(self)
networkx.tests.test_test_average_clustering()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_vitality.py----------------------------------------
A:networkx.algorithms.tests.test_vitality.G->networkx.MultiDiGraph()
A:networkx.algorithms.tests.test_vitality.v->networkx.closeness_vitality(G, weight='weight')
networkx.algorithms.tests.test_vitality.TestVitality
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted_digraph(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted_digraph(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted_multidigraph(self)
networkx.tests.test_TestVitality
networkx.tests.test_TestVitality.test_closeness_vitality_unweighted(self)
networkx.tests.test_TestVitality.test_closeness_vitality_unweighted_digraph(self)
networkx.tests.test_TestVitality.test_closeness_vitality_weighted(self)
networkx.tests.test_TestVitality.test_closeness_vitality_weighted_digraph(self)
networkx.tests.test_TestVitality.test_closeness_vitality_weighted_multidigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_clique.py----------------------------------------
A:networkx.algorithms.tests.test_clique.self.G->cnlti(nx.generators.havel_hakimi_graph(z), first_label=1)
A:networkx.algorithms.tests.test_clique.self.cl->list(nx.find_cliques(self.G))
A:networkx.algorithms.tests.test_clique.H->networkx.project_down(B)
A:networkx.algorithms.tests.test_clique.cl->list(nx.find_cliques(self.G))
A:networkx.algorithms.tests.test_clique.rcl->networkx.find_cliques_recursive(self.G)
A:networkx.algorithms.tests.test_clique.hcl->list(nx.find_cliques(self.H))
A:networkx.algorithms.tests.test_clique.B->networkx.make_clique_bipartite(G)
A:networkx.algorithms.tests.test_clique.H1->networkx.project_up(B)
A:networkx.algorithms.tests.test_clique.H2->networkx.make_max_clique_graph(G)
A:networkx.algorithms.tests.test_clique.cliques->list(nx.enumerate_all_cliques(G))
A:networkx.algorithms.tests.test_clique.G->networkx.Graph()
A:networkx.algorithms.tests.test_clique.clique_sizes->list(map(len, cliques))
networkx.algorithms.tests.test_clique.TestCliques
networkx.algorithms.tests.test_clique.TestCliques.setUp(self)
networkx.algorithms.tests.test_clique.TestCliques.test_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node(self)
networkx.algorithms.tests.test_clique.TestCliques.test_directed(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2(self)
networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite(self)
networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques(self)
networkx.algorithms.tests.test_clique.TestCliques.test_selfloops(self)
networkx.algorithms.tests.test_clique.TestEnumerateAllCliques
networkx.algorithms.tests.test_clique.TestEnumerateAllCliques.test_paper_figure_4(self)
networkx.tests.test_TestCliques
networkx.tests.test_TestCliques.setUp(self)
networkx.tests.test_TestCliques.test_clique_number(self)
networkx.tests.test_TestCliques.test_cliques_containing_node(self)
networkx.tests.test_TestCliques.test_directed(self)
networkx.tests.test_TestCliques.test_find_cliques1(self)
networkx.tests.test_TestCliques.test_find_cliques2(self)
networkx.tests.test_TestCliques.test_make_clique_bipartite(self)
networkx.tests.test_TestCliques.test_node_clique_number(self)
networkx.tests.test_TestCliques.test_number_of_cliques(self)
networkx.tests.test_TestCliques.test_selfloops(self)
networkx.tests.test_TestEnumerateAllCliques
networkx.tests.test_TestEnumerateAllCliques.test_paper_figure_4(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_block.py----------------------------------------
A:networkx.algorithms.tests.test_block.G->networkx.barbell_graph(3, 0)
A:networkx.algorithms.tests.test_block.M->networkx.blockmodel(G, partition)
networkx.algorithms.tests.test_block.TestBlock
networkx.algorithms.tests.test_block.TestBlock.test_barbell(self)
networkx.algorithms.tests.test_block.TestBlock.test_barbell_plus(self)
networkx.algorithms.tests.test_block.TestBlock.test_directed_multigraph_path(self)
networkx.algorithms.tests.test_block.TestBlock.test_directed_path(self)
networkx.algorithms.tests.test_block.TestBlock.test_multigraph_path(self)
networkx.algorithms.tests.test_block.TestBlock.test_overlapping(self)
networkx.algorithms.tests.test_block.TestBlock.test_path(self)
networkx.algorithms.tests.test_block.TestBlock.test_weighted_path(self)
networkx.tests.test_TestBlock
networkx.tests.test_TestBlock.test_barbell(self)
networkx.tests.test_TestBlock.test_barbell_plus(self)
networkx.tests.test_TestBlock.test_directed_multigraph_path(self)
networkx.tests.test_TestBlock.test_directed_path(self)
networkx.tests.test_TestBlock.test_multigraph_path(self)
networkx.tests.test_TestBlock.test_overlapping(self)
networkx.tests.test_TestBlock.test_path(self)
networkx.tests.test_TestBlock.test_weighted_path(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_dag.py----------------------------------------
A:networkx.algorithms.tests.test_dag.DG->networkx.DiGraph()
A:networkx.algorithms.tests.test_dag.G->networkx.DiGraph()
networkx.algorithms.tests.test_dag.TestDAG
networkx.algorithms.tests.test_dag.TestDAG._check_antichains(self,solution,result)
networkx.algorithms.tests.test_dag.TestDAG.setUp(self)
networkx.algorithms.tests.test_dag.TestDAG.test_ancestors(self)
networkx.algorithms.tests.test_dag.TestDAG.test_antichains(self)
networkx.algorithms.tests.test_dag.TestDAG.test_dag_longest_path(self)
networkx.algorithms.tests.test_dag.TestDAG.test_dag_longest_path_length(self)
networkx.algorithms.tests.test_dag.TestDAG.test_descendants(self)
networkx.algorithms.tests.test_dag.TestDAG.test_is_directed_acyclic_graph(self)
networkx.algorithms.tests.test_dag.TestDAG.test_nbunch_argument(self)
networkx.algorithms.tests.test_dag.TestDAG.test_reverse_topological_sort1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5(self)
networkx.algorithms.tests.test_dag.TestDAG.test_transitive_closure(self)
networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_raise()
networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree()
networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop()
networkx.tests.test_TestDAG
networkx.tests.test_TestDAG._check_antichains(self,solution,result)
networkx.tests.test_TestDAG.setUp(self)
networkx.tests.test_TestDAG.test_ancestors(self)
networkx.tests.test_TestDAG.test_antichains(self)
networkx.tests.test_TestDAG.test_dag_longest_path(self)
networkx.tests.test_TestDAG.test_dag_longest_path_length(self)
networkx.tests.test_TestDAG.test_descendants(self)
networkx.tests.test_TestDAG.test_is_directed_acyclic_graph(self)
networkx.tests.test_TestDAG.test_nbunch_argument(self)
networkx.tests.test_TestDAG.test_reverse_topological_sort1(self)
networkx.tests.test_TestDAG.test_topological_sort1(self)
networkx.tests.test_TestDAG.test_topological_sort2(self)
networkx.tests.test_TestDAG.test_topological_sort3(self)
networkx.tests.test_TestDAG.test_topological_sort4(self)
networkx.tests.test_TestDAG.test_topological_sort5(self)
networkx.tests.test_TestDAG.test_transitive_closure(self)
networkx.tests.test_test_is_aperiodic_bipartite()
networkx.tests.test_test_is_aperiodic_cycle()
networkx.tests.test_test_is_aperiodic_cycle2()
networkx.tests.test_test_is_aperiodic_cycle3()
networkx.tests.test_test_is_aperiodic_cycle4()
networkx.tests.test_test_is_aperiodic_disconnected()
networkx.tests.test_test_is_aperiodic_disconnected2()
networkx.tests.test_test_is_aperiodic_raise()
networkx.tests.test_test_is_aperiodic_rary_tree()
networkx.tests.test_test_is_aperiodic_selfloop()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_richclub.py----------------------------------------
A:networkx.algorithms.tests.test_richclub.G->networkx.Graph([(0, 1), (0, 2), (1, 2), (1, 3), (1, 4), (4, 5)])
A:networkx.algorithms.tests.test_richclub.rc->networkx.richclub.rich_club_coefficient(T, normalized=False)
A:networkx.algorithms.tests.test_richclub.rcNorm->networkx.richclub.rich_club_coefficient(G, Q=2)
A:networkx.algorithms.tests.test_richclub.T->networkx.balanced_tree(2, 10)
networkx.algorithms.tests.test_richclub.test_richclub()
networkx.algorithms.tests.test_richclub.test_richclub2()
networkx.algorithms.tests.test_richclub.test_richclub_normalized()
networkx.tests.test_test_richclub()
networkx.tests.test_test_richclub2()
networkx.tests.test_test_richclub_normalized()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_link_prediction.py----------------------------------------
A:networkx.algorithms.tests.test_link_prediction.result->predict_func(G, ebunch, **kwargs)
A:networkx.algorithms.tests.test_link_prediction.exp_dict->dict(((tuple(sorted([u, v])), score) for (u, v, score) in expected))
A:networkx.algorithms.tests.test_link_prediction.res_dict->dict(((tuple(sorted([u, v])), score) for (u, v, score) in result))
A:networkx.algorithms.tests.test_link_prediction.self.test->partial(_test_func, predict_func=self.func, delta=self.delta, community='community')
A:networkx.algorithms.tests.test_link_prediction.G->networkx.Graph()
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestAdamicAdarIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestCNSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_P4(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_isolated_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestJaccardCoefficient.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestPreferentialAttachment.test_zero_degrees(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestRAIndexSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestResourceAllocationIndex.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.setUp(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_K5(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_P3(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_S4(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_all_nonexistent_edges(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_custom_community_attribute_name(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_different_community(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_digraph(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_equal_nodes(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_insufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_multidigraph(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_multigraph(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_negative_delta(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_no_inter_cluster_common_neighbor(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_sufficient_community_information(self)
networkx.algorithms.tests.test_link_prediction.TestWithinInterCluster.test_zero_delta(self)
networkx.algorithms.tests.test_link_prediction._test_func(G,ebunch,expected,predict_func,**kwargs)
networkx.tests.test_TestAdamicAdarIndex
networkx.tests.test_TestAdamicAdarIndex.setUp(self)
networkx.tests.test_TestAdamicAdarIndex.test_K5(self)
networkx.tests.test_TestAdamicAdarIndex.test_P3(self)
networkx.tests.test_TestAdamicAdarIndex.test_S4(self)
networkx.tests.test_TestAdamicAdarIndex.test_all_nonexistent_edges(self)
networkx.tests.test_TestAdamicAdarIndex.test_digraph(self)
networkx.tests.test_TestAdamicAdarIndex.test_equal_nodes(self)
networkx.tests.test_TestAdamicAdarIndex.test_multidigraph(self)
networkx.tests.test_TestAdamicAdarIndex.test_multigraph(self)
networkx.tests.test_TestAdamicAdarIndex.test_no_common_neighbor(self)
networkx.tests.test_TestCNSoundarajanHopcroft
networkx.tests.test_TestCNSoundarajanHopcroft.setUp(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_K5(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_P3(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_S4(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_different_community(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_digraph(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_equal_nodes(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_multidigraph(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_multigraph(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_no_community_information(self)
networkx.tests.test_TestCNSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.tests.test_TestJaccardCoefficient
networkx.tests.test_TestJaccardCoefficient.setUp(self)
networkx.tests.test_TestJaccardCoefficient.test_K5(self)
networkx.tests.test_TestJaccardCoefficient.test_P4(self)
networkx.tests.test_TestJaccardCoefficient.test_all_nonexistent_edges(self)
networkx.tests.test_TestJaccardCoefficient.test_digraph(self)
networkx.tests.test_TestJaccardCoefficient.test_isolated_nodes(self)
networkx.tests.test_TestJaccardCoefficient.test_multidigraph(self)
networkx.tests.test_TestJaccardCoefficient.test_multigraph(self)
networkx.tests.test_TestJaccardCoefficient.test_no_common_neighbor(self)
networkx.tests.test_TestPreferentialAttachment
networkx.tests.test_TestPreferentialAttachment.setUp(self)
networkx.tests.test_TestPreferentialAttachment.test_K5(self)
networkx.tests.test_TestPreferentialAttachment.test_P3(self)
networkx.tests.test_TestPreferentialAttachment.test_S4(self)
networkx.tests.test_TestPreferentialAttachment.test_all_nonexistent_edges(self)
networkx.tests.test_TestPreferentialAttachment.test_digraph(self)
networkx.tests.test_TestPreferentialAttachment.test_multidigraph(self)
networkx.tests.test_TestPreferentialAttachment.test_multigraph(self)
networkx.tests.test_TestPreferentialAttachment.test_zero_degrees(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft
networkx.tests.test_TestRAIndexSoundarajanHopcroft.setUp(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_K5(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_P3(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_S4(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_all_nonexistent_edges(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_custom_community_attribute_name(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_different_community(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_digraph(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_equal_nodes(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_insufficient_community_information(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_multidigraph(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_multigraph(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_no_common_neighbor(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_no_community_information(self)
networkx.tests.test_TestRAIndexSoundarajanHopcroft.test_sufficient_community_information(self)
networkx.tests.test_TestResourceAllocationIndex
networkx.tests.test_TestResourceAllocationIndex.setUp(self)
networkx.tests.test_TestResourceAllocationIndex.test_K5(self)
networkx.tests.test_TestResourceAllocationIndex.test_P3(self)
networkx.tests.test_TestResourceAllocationIndex.test_S4(self)
networkx.tests.test_TestResourceAllocationIndex.test_all_nonexistent_edges(self)
networkx.tests.test_TestResourceAllocationIndex.test_digraph(self)
networkx.tests.test_TestResourceAllocationIndex.test_equal_nodes(self)
networkx.tests.test_TestResourceAllocationIndex.test_multidigraph(self)
networkx.tests.test_TestResourceAllocationIndex.test_multigraph(self)
networkx.tests.test_TestResourceAllocationIndex.test_no_common_neighbor(self)
networkx.tests.test_TestWithinInterCluster
networkx.tests.test_TestWithinInterCluster.setUp(self)
networkx.tests.test_TestWithinInterCluster.test_K5(self)
networkx.tests.test_TestWithinInterCluster.test_P3(self)
networkx.tests.test_TestWithinInterCluster.test_S4(self)
networkx.tests.test_TestWithinInterCluster.test_all_nonexistent_edges(self)
networkx.tests.test_TestWithinInterCluster.test_custom_community_attribute_name(self)
networkx.tests.test_TestWithinInterCluster.test_different_community(self)
networkx.tests.test_TestWithinInterCluster.test_digraph(self)
networkx.tests.test_TestWithinInterCluster.test_equal_nodes(self)
networkx.tests.test_TestWithinInterCluster.test_insufficient_community_information(self)
networkx.tests.test_TestWithinInterCluster.test_multidigraph(self)
networkx.tests.test_TestWithinInterCluster.test_multigraph(self)
networkx.tests.test_TestWithinInterCluster.test_negative_delta(self)
networkx.tests.test_TestWithinInterCluster.test_no_common_neighbor(self)
networkx.tests.test_TestWithinInterCluster.test_no_community_information(self)
networkx.tests.test_TestWithinInterCluster.test_no_inter_cluster_common_neighbor(self)
networkx.tests.test_TestWithinInterCluster.test_sufficient_community_information(self)
networkx.tests.test_TestWithinInterCluster.test_zero_delta(self)
networkx.tests.test__test_func(G,ebunch,expected,predict_func,**kwargs)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_mis.py----------------------------------------
A:networkx.algorithms.tests.test_mis.self.florentine->networkx.Graph()
A:networkx.algorithms.tests.test_mis.G->networkx.random_graphs.erdos_renyi_graph(i * 10 + 1, random.random())
A:networkx.algorithms.tests.test_mis.indep->networkx.maximal_independent_set(G, [4, 5, 9, 10])
A:networkx.algorithms.tests.test_mis.IS->networkx.maximal_independent_set(G)
A:networkx.algorithms.tests.test_mis.neighbors_of_MIS->set.union(*(set(G.neighbors(v)) for v in IS))
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet(object)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.setup(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K5(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K55(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_bipartite(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_exception(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_florentine_family(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_graphs(self)
networkx.tests.test_TestMaximalIndependantSet(object)
networkx.tests.test_TestMaximalIndependantSet.setup(self)
networkx.tests.test_TestMaximalIndependantSet.test_K5(self)
networkx.tests.test_TestMaximalIndependantSet.test_K55(self)
networkx.tests.test_TestMaximalIndependantSet.test_bipartite(self)
networkx.tests.test_TestMaximalIndependantSet.test_exception(self)
networkx.tests.test_TestMaximalIndependantSet.test_florentine_family(self)
networkx.tests.test_TestMaximalIndependantSet.test_random_graphs(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_distance_measures.py----------------------------------------
A:networkx.algorithms.tests.test_distance_measures.G->networkx.Graph([(1, 2), (3, 4)])
A:networkx.algorithms.tests.test_distance_measures.e->networkx.eccentricity(G, sp=1)
A:networkx.algorithms.tests.test_distance_measures.sp->networkx.shortest_path_length(self.G)
networkx.algorithms.tests.test_distance_measures.TestDistance
networkx.algorithms.tests.test_distance_measures.TestDistance.setUp(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_center(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_infinite(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_invalid(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception(self)
networkx.tests.test_TestDistance
networkx.tests.test_TestDistance.setUp(self)
networkx.tests.test_TestDistance.test_center(self)
networkx.tests.test_TestDistance.test_diameter(self)
networkx.tests.test_TestDistance.test_eccentricity(self)
networkx.tests.test_TestDistance.test_eccentricity_infinite(self)
networkx.tests.test_TestDistance.test_eccentricity_invalid(self)
networkx.tests.test_TestDistance.test_periphery(self)
networkx.tests.test_TestDistance.test_radius(self)
networkx.tests.test_TestDistance.test_radius_exception(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_triads.py----------------------------------------
A:networkx.algorithms.tests.test_triads.G->networkx.DiGraph()
A:networkx.algorithms.tests.test_triads.actual->networkx.triadic_census(G)
networkx.algorithms.tests.test_triads.test_triadic_census()
networkx.tests.test_test_triadic_census()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_dominance.py----------------------------------------
A:networkx.algorithms.tests.test_dominance.G->networkx.DiGraph(edges)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers(object)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_boost_example(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_cycle(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_domrel_png(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_exceptions(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible1(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_irreducible2(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_path(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_singleton(self)
networkx.algorithms.tests.test_dominance.TestDominanceFrontiers.test_unreachable(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators(object)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_boost_example(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_cycle(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_domrel_png(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_exceptions(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible1(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_irreducible2(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_path(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_singleton(self)
networkx.algorithms.tests.test_dominance.TestImmediateDominators.test_unreachable(self)
networkx.tests.test_TestDominanceFrontiers(object)
networkx.tests.test_TestDominanceFrontiers.test_boost_example(self)
networkx.tests.test_TestDominanceFrontiers.test_cycle(self)
networkx.tests.test_TestDominanceFrontiers.test_domrel_png(self)
networkx.tests.test_TestDominanceFrontiers.test_exceptions(self)
networkx.tests.test_TestDominanceFrontiers.test_irreducible1(self)
networkx.tests.test_TestDominanceFrontiers.test_irreducible2(self)
networkx.tests.test_TestDominanceFrontiers.test_path(self)
networkx.tests.test_TestDominanceFrontiers.test_singleton(self)
networkx.tests.test_TestDominanceFrontiers.test_unreachable(self)
networkx.tests.test_TestImmediateDominators(object)
networkx.tests.test_TestImmediateDominators.test_boost_example(self)
networkx.tests.test_TestImmediateDominators.test_cycle(self)
networkx.tests.test_TestImmediateDominators.test_domrel_png(self)
networkx.tests.test_TestImmediateDominators.test_exceptions(self)
networkx.tests.test_TestImmediateDominators.test_irreducible1(self)
networkx.tests.test_TestImmediateDominators.test_irreducible2(self)
networkx.tests.test_TestImmediateDominators.test_path(self)
networkx.tests.test_TestImmediateDominators.test_singleton(self)
networkx.tests.test_TestImmediateDominators.test_unreachable(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_core.py----------------------------------------
A:networkx.algorithms.tests.test_core.t1->networkx.convert_node_labels_to_integers(nx.tetrahedral_graph(), 1)
A:networkx.algorithms.tests.test_core.t2->networkx.convert_node_labels_to_integers(t1, 5)
A:networkx.algorithms.tests.test_core.G->networkx.Graph()
A:networkx.algorithms.tests.test_core.H->networkx.havel_hakimi_graph(degseq)
A:networkx.algorithms.tests.test_core.self.H->networkx.relabel_nodes(H, mapping)
A:networkx.algorithms.tests.test_core.cores->networkx.find_cores(self.H)
A:networkx.algorithms.tests.test_core.main_core_subgraph->networkx.k_core(self.H)
A:networkx.algorithms.tests.test_core.k_core_subgraph->networkx.k_core(self.H, k=2)
A:networkx.algorithms.tests.test_core.main_crust_subgraph->networkx.k_crust(self.H)
A:networkx.algorithms.tests.test_core.k_crust_subgraph->networkx.k_crust(self.H, k=0)
A:networkx.algorithms.tests.test_core.main_shell_subgraph->networkx.k_shell(self.H)
A:networkx.algorithms.tests.test_core.k_shell_subgraph->networkx.k_shell(self.H, k=0)
A:networkx.algorithms.tests.test_core.k_corona_subgraph->networkx.k_corona(self.H, k=0)
networkx.algorithms.tests.test_core.TestCore
networkx.algorithms.tests.test_core.TestCore.setUp(self)
networkx.algorithms.tests.test_core.TestCore.test_core_number(self)
networkx.algorithms.tests.test_core.TestCore.test_find_cores(self)
networkx.algorithms.tests.test_core.TestCore.test_find_cores2(self)
networkx.algorithms.tests.test_core.TestCore.test_k_core(self)
networkx.algorithms.tests.test_core.TestCore.test_k_corona(self)
networkx.algorithms.tests.test_core.TestCore.test_k_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_k_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_main_core(self)
networkx.algorithms.tests.test_core.TestCore.test_main_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_main_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_trivial(self)
networkx.tests.test_TestCore
networkx.tests.test_TestCore.setUp(self)
networkx.tests.test_TestCore.test_core_number(self)
networkx.tests.test_TestCore.test_find_cores(self)
networkx.tests.test_TestCore.test_find_cores2(self)
networkx.tests.test_TestCore.test_k_core(self)
networkx.tests.test_TestCore.test_k_corona(self)
networkx.tests.test_TestCore.test_k_crust(self)
networkx.tests.test_TestCore.test_k_shell(self)
networkx.tests.test_TestCore.test_main_core(self)
networkx.tests.test_TestCore.test_main_crust(self)
networkx.tests.test_TestCore.test_main_shell(self)
networkx.tests.test_TestCore.test_trivial(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_swap.py----------------------------------------
A:networkx.algorithms.tests.test_swap.graph->barabasi_albert_graph(200, 1)
A:networkx.algorithms.tests.test_swap.degrees->sorted(G.degree().values())
A:networkx.algorithms.tests.test_swap.G->double_edge_swap(G, 1, 100)
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_not_connected()
networkx.algorithms.tests.test_swap.test_connected_double_edge_swap_small()
networkx.algorithms.tests.test_swap.test_degree_seq_c4()
networkx.algorithms.tests.test_swap.test_double_edge_swap()
networkx.algorithms.tests.test_swap.test_double_edge_swap_small()
networkx.algorithms.tests.test_swap.test_double_edge_swap_tries()
networkx.tests.test_test_connected_double_edge_swap()
networkx.tests.test_test_connected_double_edge_swap_not_connected()
networkx.tests.test_test_connected_double_edge_swap_small()
networkx.tests.test_test_degree_seq_c4()
networkx.tests.test_test_double_edge_swap()
networkx.tests.test_test_double_edge_swap_small()
networkx.tests.test_test_double_edge_swap_tries()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_matching.py----------------------------------------
A:networkx.algorithms.tests.test_matching.G->networkx.Graph()
A:networkx.algorithms.tests.test_matching.graph->networkx.Graph()
A:networkx.algorithms.tests.test_matching.matching->networkx.maximal_matching(G)
A:networkx.algorithms.tests.test_matching.vset->set((u for (u, v) in matching))
networkx.algorithms.tests.test_matching.TestMatching
networkx.algorithms.tests.test_matching.TestMatching.setUp(self)
networkx.algorithms.tests.test_matching.TestMatching.test_floating_point_weights(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom1(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom2(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_augmenting(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_expand_recursively(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_least_slack(self)
networkx.algorithms.tests.test_matching.TestMatching.test_negative_weights(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_t_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial1(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial2(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial3(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial4(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial5(self)
networkx.algorithms.tests.test_matching.test_maximal_matching()
networkx.algorithms.tests.test_matching.test_maximal_matching_ordering()
networkx.tests.test_TestMatching
networkx.tests.test_TestMatching.setUp(self)
networkx.tests.test_TestMatching.test_floating_point_weights(self)
networkx.tests.test_TestMatching.test_nasty_blossom1(self)
networkx.tests.test_TestMatching.test_nasty_blossom2(self)
networkx.tests.test_TestMatching.test_nasty_blossom_augmenting(self)
networkx.tests.test_TestMatching.test_nasty_blossom_expand_recursively(self)
networkx.tests.test_TestMatching.test_nasty_blossom_least_slack(self)
networkx.tests.test_TestMatching.test_negative_weights(self)
networkx.tests.test_TestMatching.test_nested_s_blossom(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_expand(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_relabel(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_relabel_expand(self)
networkx.tests.test_TestMatching.test_s_blossom(self)
networkx.tests.test_TestMatching.test_s_blossom_relabel_expand(self)
networkx.tests.test_TestMatching.test_s_t_blossom(self)
networkx.tests.test_TestMatching.test_trivial1(self)
networkx.tests.test_TestMatching.test_trivial2(self)
networkx.tests.test_TestMatching.test_trivial3(self)
networkx.tests.test_TestMatching.test_trivial4(self)
networkx.tests.test_TestMatching.test_trivial5(self)
networkx.tests.test_test_maximal_matching()
networkx.tests.test_test_maximal_matching_ordering()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_mst.py----------------------------------------
A:networkx.algorithms.tests.test_mst.G->networkx.Graph()
A:networkx.algorithms.tests.test_mst.self.tree_edgelist->sorted(((sorted((u, v))[0], sorted((u, v))[1], d) for (u, v, d) in tree_edgelist))
A:networkx.algorithms.tests.test_mst.T->networkx.prim_mst(G, weight='distance')
A:networkx.algorithms.tests.test_mst.edgelist->sorted(((sorted((u, v))[0], sorted((u, v))[1], d) for (u, v, d) in edgelist))
networkx.algorithms.tests.test_mst.TestMST
networkx.algorithms.tests.test_mst.TestMST.setUp(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_attributes(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_disconnected(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_edges(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_edges_specify_weight(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_isolate(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_attributes(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_disconnected(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges_specify_weight(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_isolate(self)
networkx.tests.test_TestMST
networkx.tests.test_TestMST.setUp(self)
networkx.tests.test_TestMST.test_mst(self)
networkx.tests.test_TestMST.test_mst_attributes(self)
networkx.tests.test_TestMST.test_mst_disconnected(self)
networkx.tests.test_TestMST.test_mst_edges(self)
networkx.tests.test_TestMST.test_mst_edges_specify_weight(self)
networkx.tests.test_TestMST.test_mst_isolate(self)
networkx.tests.test_TestMST.test_prim_mst(self)
networkx.tests.test_TestMST.test_prim_mst_attributes(self)
networkx.tests.test_TestMST.test_prim_mst_disconnected(self)
networkx.tests.test_TestMST.test_prim_mst_edges(self)
networkx.tests.test_TestMST.test_prim_mst_edges_specify_weight(self)
networkx.tests.test_TestMST.test_prim_mst_isolate(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_hierarchy.py----------------------------------------
A:networkx.algorithms.tests.test_hierarchy.G->networkx.DiGraph()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_1()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_cycle()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_exception()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_tree()
networkx.algorithms.tests.test_hierarchy.test_hierarchy_weight()
networkx.tests.test_test_hierarchy_1()
networkx.tests.test_test_hierarchy_cycle()
networkx.tests.test_test_hierarchy_exception()
networkx.tests.test_test_hierarchy_tree()
networkx.tests.test_test_hierarchy_weight()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tests/test_cycles.py----------------------------------------
A:networkx.algorithms.tests.test_cycles.G->networkx.DiGraph([(0, 1), (0, 2), (1, 2)])
A:networkx.algorithms.tests.test_cycles.n->len(a)
A:networkx.algorithms.tests.test_cycles.cy->networkx.cycle_basis(G, 0)
A:networkx.algorithms.tests.test_cycles.sort_cy->sorted((sorted(c) for c in cy))
A:networkx.algorithms.tests.test_cycles.cc->sorted(nx.simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.c->sorted(nx.simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.l->len(list(nx.simple_cycles(G)))
A:networkx.algorithms.tests.test_cycles.rcc->sorted(nx.recursive_simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.x->list(find_cycle(G, orientation='ignore'))
networkx.algorithms.tests.test_cycles.TestCycles
networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permutation(self,a,b)
networkx.algorithms.tests.test_cycles.TestCycles.setUp(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_recursive_simple_and_not(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_graph_with_reported_bug(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph(self,k)
networkx.algorithms.tests.test_cycles.TestFindCycle(object)
networkx.algorithms.tests.test_cycles.TestFindCycle.setUp(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_dag(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_digraph_ignore(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_graph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multidigraph_ignore2(self)
networkx.algorithms.tests.test_cycles.TestFindCycle.test_multigraph(self)
networkx.tests.test_TestCycles
networkx.tests.test_TestCycles.is_cyclic_permutation(self,a,b)
networkx.tests.test_TestCycles.setUp(self)
networkx.tests.test_TestCycles.test_complete_directed_graph(self)
networkx.tests.test_TestCycles.test_cycle_basis(self)
networkx.tests.test_TestCycles.test_cycle_basis(self)
networkx.tests.test_TestCycles.test_cycle_basis(self)
networkx.tests.test_TestCycles.test_recursive_simple_and_not(self)
networkx.tests.test_TestCycles.test_simple_cycles(self)
networkx.tests.test_TestCycles.test_simple_cycles_empty(self)
networkx.tests.test_TestCycles.test_simple_cycles_graph(self)
networkx.tests.test_TestCycles.test_simple_cycles_small(self)
networkx.tests.test_TestCycles.test_simple_graph_with_reported_bug(self)
networkx.tests.test_TestCycles.test_unsortable(self)
networkx.tests.test_TestCycles.test_worst_case_graph(self)
networkx.tests.test_TestCycles.worst_case_graph(self,k)
networkx.tests.test_TestFindCycle(object)
networkx.tests.test_TestFindCycle.setUp(self)
networkx.tests.test_TestFindCycle.test_dag(self)
networkx.tests.test_TestFindCycle.test_digraph(self)
networkx.tests.test_TestFindCycle.test_digraph_ignore(self)
networkx.tests.test_TestFindCycle.test_graph(self)
networkx.tests.test_TestFindCycle.test_multidigraph(self)
networkx.tests.test_TestFindCycle.test_multidigraph_ignore(self)
networkx.tests.test_TestFindCycle.test_multidigraph_ignore2(self)
networkx.tests.test_TestFindCycle.test_multidigraph_ignore2(self)
networkx.tests.test_TestFindCycle.test_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/semiconnected.py----------------------------------------
A:networkx.algorithms.components.semiconnected.G->networkx.condensation(G)
A:networkx.algorithms.components.semiconnected.path->networkx.topological_sort(G)
networkx.algorithms.components.semiconnected.is_semiconnected(G)
networkx.is_semiconnected(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/attracting.py----------------------------------------
A:networkx.algorithms.components.attracting.__authors__->'\n'.join(['Christopher Ellison'])
A:networkx.algorithms.components.attracting.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.components.attracting.cG->networkx.condensation(G, scc)
A:networkx.algorithms.components.attracting.n->len(list(attracting_components(G)))
A:networkx.algorithms.components.attracting.ac->list(attracting_components(G))
networkx.algorithms.components.attracting.attracting_component_subgraphs(G,copy=True)
networkx.algorithms.components.attracting.attracting_components(G)
networkx.algorithms.components.attracting.is_attracting_component(G)
networkx.algorithms.components.attracting.number_attracting_components(G)
networkx.attracting_component_subgraphs(G,copy=True)
networkx.attracting_components(G)
networkx.is_attracting_component(G)
networkx.number_attracting_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/connected.py----------------------------------------
A:networkx.algorithms.components.connected.__authors__->'\n'.join(['Eben Kenah', 'Aric Hagberg <aric.hagberg@gmail.com>Christopher Ellison'])
A:networkx.algorithms.components.connected.seen->set()
A:networkx.algorithms.components.connected.c->set(_plain_bfs(G, v))
A:networkx.algorithms.components.connected.nextlevel->set()
networkx._plain_bfs(G,source)
networkx.algorithms.components.connected._plain_bfs(G,source)
networkx.algorithms.components.connected.connected_component_subgraphs(G,copy=True)
networkx.algorithms.components.connected.connected_components(G)
networkx.algorithms.components.connected.is_connected(G)
networkx.algorithms.components.connected.node_connected_component(G,n)
networkx.algorithms.components.connected.number_connected_components(G)
networkx.connected_component_subgraphs(G,copy=True)
networkx.connected_components(G)
networkx.is_connected(G)
networkx.node_connected_component(G,n)
networkx.number_connected_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/weakly_connected.py----------------------------------------
A:networkx.algorithms.components.weakly_connected.__authors__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)Christopher Ellison'])
A:networkx.algorithms.components.weakly_connected.seen->set()
A:networkx.algorithms.components.weakly_connected.c->set(_plain_bfs(G, v))
A:networkx.algorithms.components.weakly_connected.nextlevel->set()
networkx._plain_bfs(G,source)
networkx.algorithms.components.weakly_connected._plain_bfs(G,source)
networkx.algorithms.components.weakly_connected.is_weakly_connected(G)
networkx.algorithms.components.weakly_connected.number_weakly_connected_components(G)
networkx.algorithms.components.weakly_connected.weakly_connected_component_subgraphs(G,copy=True)
networkx.algorithms.components.weakly_connected.weakly_connected_components(G)
networkx.is_weakly_connected(G)
networkx.number_weakly_connected_components(G)
networkx.weakly_connected_component_subgraphs(G,copy=True)
networkx.weakly_connected_components(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/biconnected.py----------------------------------------
A:networkx.algorithms.components.biconnected.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Dan Schult <dschult@colgate.edu>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.components.biconnected.bcc->list(biconnected_components(G))
A:networkx.algorithms.components.biconnected.visited->set()
A:networkx.algorithms.components.biconnected.child->next(children)
A:networkx.algorithms.components.biconnected.low[parent]->min(low[parent], discovery[child])
A:networkx.algorithms.components.biconnected.low[child]discovery[child]->len(discovery)
A:networkx.algorithms.components.biconnected.ind->edge_stack.index((grandparent, parent))
A:networkx.algorithms.components.biconnected.low[grandparent]->min(low[parent], low[grandparent])
networkx._biconnected_dfs(G,components=True)
networkx.algorithms.components.biconnected._biconnected_dfs(G,components=True)
networkx.algorithms.components.biconnected.articulation_points(G)
networkx.algorithms.components.biconnected.biconnected_component_edges(G)
networkx.algorithms.components.biconnected.biconnected_component_subgraphs(G,copy=True)
networkx.algorithms.components.biconnected.biconnected_components(G)
networkx.algorithms.components.biconnected.is_biconnected(G)
networkx.articulation_points(G)
networkx.biconnected_component_edges(G)
networkx.biconnected_component_subgraphs(G,copy=True)
networkx.biconnected_components(G)
networkx.is_biconnected(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/strongly_connected.py----------------------------------------
A:networkx.algorithms.components.strongly_connected.__authors__->'\n'.join(['Eben Kenah', 'Aric Hagberg (hagberg@lanl.gov)Christopher Ellison', 'Ben Edwards (bedwards@cs.unm.edu)'])
A:networkx.algorithms.components.strongly_connected.lowlink[v]->min([lowlink[v], preorder[w]])
A:networkx.algorithms.components.strongly_connected.k->scc_queue.pop()
A:networkx.algorithms.components.strongly_connected.post->list(nx.dfs_postorder_nodes(G, source=source))
A:networkx.algorithms.components.strongly_connected.seen->set()
A:networkx.algorithms.components.strongly_connected.r->list(nx.dfs_postorder_nodes(G, source=source)).pop()
A:networkx.algorithms.components.strongly_connected.c->networkx.dfs_preorder_nodes(G, r)
A:networkx.algorithms.components.strongly_connected.root[v]->min(root[v], root[w])
A:networkx.algorithms.components.strongly_connected.w->stack.pop()
A:networkx.algorithms.components.strongly_connected.scc->networkx.strongly_connected_components(G)
A:networkx.algorithms.components.strongly_connected.C->networkx.DiGraph()
networkx.algorithms.components.strongly_connected.condensation(G,scc=None)
networkx.algorithms.components.strongly_connected.is_strongly_connected(G)
networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components(G,source=None)
networkx.algorithms.components.strongly_connected.number_strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_component_subgraphs(G,copy=True)
networkx.algorithms.components.strongly_connected.strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive(G)
networkx.condensation(G,scc=None)
networkx.is_strongly_connected(G)
networkx.kosaraju_strongly_connected_components(G,source=None)
networkx.number_strongly_connected_components(G)
networkx.strongly_connected_component_subgraphs(G,copy=True)
networkx.strongly_connected_components(G)
networkx.strongly_connected_components_recursive(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_subgraph_copies.py----------------------------------------
A:networkx.algorithms.components.tests.test_subgraph_copies.self.D->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_subgraph_copies.self.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_subgraph_copies.G->deepcopy(self.G if subgraph_func in self.undirected else self.D)
networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts
networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.setUp(self)
networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_copy(self)
networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_default_copy_behavior(self)
networkx.algorithms.components.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_no_copy(self)
networkx.tests.test_subgraph_copies.TestSubgraphAttributesDicts
networkx.tests.test_subgraph_copies.TestSubgraphAttributesDicts.setUp(self)
networkx.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_copy(self)
networkx.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_default_copy_behavior(self)
networkx.tests.test_subgraph_copies.TestSubgraphAttributesDicts.test_subgraphs_no_copy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_connected.G1->cnlti(nx.grid_2d_graph(2, 2), first_label=0, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G2->cnlti(nx.lollipop_graph(3, 3), first_label=4, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G3->cnlti(nx.house_graph(), first_label=10, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.self.G->networkx.union(self.G, G3)
A:networkx.algorithms.components.tests.test_connected.self.DG->networkx.DiGraph([(1, 2), (1, 3), (2, 3)])
A:networkx.algorithms.components.tests.test_connected.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1)
A:networkx.algorithms.components.tests.test_connected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_connected.U->networkx.Graph().to_undirected()
networkx.algorithms.components.tests.test_connected.TestConnected
networkx.algorithms.components.tests.test_connected.TestConnected.setUp(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2(self)
networkx.tests.test_TestConnected
networkx.tests.test_TestConnected.setUp(self)
networkx.tests.test_TestConnected.test_connected_component_subgraphs(self)
networkx.tests.test_TestConnected.test_connected_components(self)
networkx.tests.test_TestConnected.test_connected_components2(self)
networkx.tests.test_TestConnected.test_connected_raise(self)
networkx.tests.test_TestConnected.test_is_connected(self)
networkx.tests.test_TestConnected.test_node_connected_components(self)
networkx.tests.test_TestConnected.test_number_connected_components(self)
networkx.tests.test_TestConnected.test_number_connected_components2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_semiconnected.py----------------------------------------
A:networkx.algorithms.components.tests.test_semiconnected.G->networkx.DiGraph(chain.from_iterable(([(i, i - 1), (i, i + 1)] for i in range(0, 100, 2))))
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected(object)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_alternating_path(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_cycle(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_dumbbell(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_empty(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_path(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_single_node_graph(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_tree(self)
networkx.algorithms.components.tests.test_semiconnected.TestIsSemiconnected.test_undirected(self)
networkx.tests.test_TestIsSemiconnected(object)
networkx.tests.test_TestIsSemiconnected.test_alternating_path(self)
networkx.tests.test_TestIsSemiconnected.test_cycle(self)
networkx.tests.test_TestIsSemiconnected.test_dumbbell(self)
networkx.tests.test_TestIsSemiconnected.test_empty(self)
networkx.tests.test_TestIsSemiconnected.test_path(self)
networkx.tests.test_TestIsSemiconnected.test_single_node_graph(self)
networkx.tests.test_TestIsSemiconnected.test_tree(self)
networkx.tests.test_TestIsSemiconnected.test_undirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_attracting.py----------------------------------------
A:networkx.algorithms.components.tests.test_attracting.self.G1->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.self.G2->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.self.G3->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.ac->list(nx.attracting_components(self.G3))
A:networkx.algorithms.components.tests.test_attracting.g2->self.G3.subgraph([1, 2])
A:networkx.algorithms.components.tests.test_attracting.G->networkx.Graph()
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents(object)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setUp(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_connected_raise(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components(self)
networkx.tests.test_TestAttractingComponents(object)
networkx.tests.test_TestAttractingComponents.setUp(self)
networkx.tests.test_TestAttractingComponents.test_attracting_components(self)
networkx.tests.test_TestAttractingComponents.test_connected_raise(self)
networkx.tests.test_TestAttractingComponents.test_is_attracting_component(self)
networkx.tests.test_TestAttractingComponents.test_number_attacting_components(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_biconnected.py----------------------------------------
A:networkx.algorithms.components.tests.test_biconnected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_biconnected.pts->set(nx.articulation_points(G))
A:networkx.algorithms.components.tests.test_biconnected.Gc->set(nx.biconnected_component_subgraphs(G))
A:networkx.algorithms.components.tests.test_biconnected.comps->list(nx.biconnected_component_edges(G))
A:networkx.algorithms.components.tests.test_biconnected.D->networkx.davis_southern_women_graph()
A:networkx.algorithms.components.tests.test_biconnected.K->networkx.karate_club_graph()
A:networkx.algorithms.components.tests.test_biconnected.bcc->list(nx.biconnected_components(G2))
A:networkx.algorithms.components.tests.test_biconnected.G1->networkx.Graph({0: [1, 2, 5], 1: [0, 5], 2: [0, 3, 4], 3: [2, 4, 5, 6], 4: [2, 3, 5, 6], 5: [0, 1, 3, 4], 6: [3, 4]})
A:networkx.algorithms.components.tests.test_biconnected.G2->networkx.Graph({0: [2, 5], 1: [3, 8], 2: [0, 3, 5], 3: [1, 2, 6, 8], 4: [7], 5: [0, 2], 6: [3, 8], 7: [4], 8: [1, 3, 6]})
A:networkx.algorithms.components.tests.test_biconnected.DG->networkx.DiGraph()
networkx.algorithms.components.tests.test_biconnected.assert_components_edges_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.assert_components_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle()
networkx.algorithms.components.tests.test_biconnected.test_barbell()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_component_subgraphs_cycle()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate()
networkx.algorithms.components.tests.test_biconnected.test_connected_raise()
networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected()
networkx.algorithms.components.tests.test_biconnected.test_is_biconnected()
networkx.tests.test_assert_components_edges_equal(x,y)
networkx.tests.test_assert_components_equal(x,y)
networkx.tests.test_test_articulation_points_cycle()
networkx.tests.test_test_barbell()
networkx.tests.test_test_biconnected_component_subgraphs_cycle()
networkx.tests.test_test_biconnected_components1()
networkx.tests.test_test_biconnected_components2()
networkx.tests.test_test_biconnected_components_cycle()
networkx.tests.test_test_biconnected_davis()
networkx.tests.test_test_biconnected_eppstein()
networkx.tests.test_test_biconnected_karate()
networkx.tests.test_test_connected_raise()
networkx.tests.test_test_empty_is_biconnected()
networkx.tests.test_test_is_biconnected()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_weakly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_weakly_connected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_weakly_connected.U->networkx.Graph().to_undirected()
A:networkx.algorithms.components.tests.test_weakly_connected.w->networkx.number_weakly_connected_components(G)
A:networkx.algorithms.components.tests.test_weakly_connected.c->networkx.number_connected_components(U)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setUp(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components(self)
networkx.tests.test_TestWeaklyConnected
networkx.tests.test_TestWeaklyConnected.setUp(self)
networkx.tests.test_TestWeaklyConnected.test_connected_raise(self)
networkx.tests.test_TestWeaklyConnected.test_is_weakly_connected(self)
networkx.tests.test_TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.tests.test_TestWeaklyConnected.test_weakly_connected_component_subgraphs(self)
networkx.tests.test_TestWeaklyConnected.test_weakly_connected_components(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/components/tests/test_strongly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_strongly_connected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_strongly_connected.scc->list(nx.strongly_connected_components(G))
A:networkx.algorithms.components.tests.test_strongly_connected.cG->networkx.condensation(G)
A:networkx.algorithms.components.tests.test_strongly_connected.C->sorted(C, key=len, reverse=True)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setUp(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_condensation_mapping_and_members(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_strongly_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive(self)
networkx.tests.test_TestStronglyConnected
networkx.tests.test_TestStronglyConnected.setUp(self)
networkx.tests.test_TestStronglyConnected.test_condensation_mapping_and_members(self)
networkx.tests.test_TestStronglyConnected.test_connected_raise(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc1(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc_edge(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc_isolate(self)
networkx.tests.test_TestStronglyConnected.test_is_strongly_connected(self)
networkx.tests.test_TestStronglyConnected.test_kosaraju(self)
networkx.tests.test_TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.tests.test_TestStronglyConnected.test_strongly_connected_component_subgraphs(self)
networkx.tests.test_TestStronglyConnected.test_tarjan(self)
networkx.tests.test_TestStronglyConnected.test_tarjan_recursive(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.kcomponents.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.connectivity.kcomponents.k_components->defaultdict(list)
A:networkx.algorithms.connectivity.kcomponents.comp->set(component)
A:networkx.algorithms.connectivity.kcomponents.bicomponents->list(nx.biconnected_component_subgraphs(G))
A:networkx.algorithms.connectivity.kcomponents.bicomp->set(bicomponent)
A:networkx.algorithms.connectivity.kcomponents.k->networkx.node_connectivity(B, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcomponents.cuts->list(nx.all_node_cuts(C, k=this_k, flow_func=flow_func))
A:networkx.algorithms.connectivity.kcomponents.nodes->next(partition)
A:networkx.algorithms.connectivity.kcomponents.C->B.subgraph(nodes)
A:networkx.algorithms.connectivity.kcomponents.this_k->networkx.node_connectivity(C, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcomponents.G->networkx.Graph()
A:networkx.algorithms.connectivity.kcomponents.H->networkx.Graph().subgraph(nodes)
A:networkx.algorithms.connectivity.kcomponents.component->set(cc)
A:networkx.algorithms.connectivity.kcomponents.result->dict()
A:networkx.algorithms.connectivity.kcomponents.max_k->max(k_comps)
A:networkx.algorithms.connectivity.kcomponents.result[k]->list(_consolidate(k_comps[k], k))
A:networkx.algorithms.connectivity.kcomponents.nodes_at_k->set.union(*k_comps[k])
networkx.algorithms.connectivity.kcomponents._consolidate(sets,k)
networkx.algorithms.connectivity.kcomponents._generate_partition(G,cuts,k)
networkx.algorithms.connectivity.kcomponents._reconstruct_k_components(k_comps)
networkx.algorithms.connectivity.kcomponents.build_k_number_dict(kcomps)
networkx.algorithms.connectivity.kcomponents.k_components(G,flow_func=None)
networkx.connectivity._consolidate(sets,k)
networkx.connectivity._generate_partition(G,cuts,k)
networkx.connectivity._reconstruct_k_components(k_comps)
networkx.connectivity.build_k_number_dict(kcomps)
networkx.k_components(G,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/utils.py----------------------------------------
A:networkx.algorithms.connectivity.utils.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.connectivity.utils.directed->G.is_directed()
A:networkx.algorithms.connectivity.utils.H->networkx.DiGraph()
networkx.algorithms.connectivity.utils.build_auxiliary_edge_connectivity(G)
networkx.algorithms.connectivity.utils.build_auxiliary_node_connectivity(G)
networkx.connectivity.build_auxiliary_edge_connectivity(G)
networkx.connectivity.build_auxiliary_node_connectivity(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/stoerwagner.py----------------------------------------
A:networkx.algorithms.connectivity.stoerwagner.n->len(G)
A:networkx.algorithms.connectivity.stoerwagner.G->networkx.Graph(islice(contractions, best_phase))
A:networkx.algorithms.connectivity.stoerwagner.cut_value->float('inf')
A:networkx.algorithms.connectivity.stoerwagner.nodes->set(G)
A:networkx.algorithms.connectivity.stoerwagner.u->next(iter(G))
A:networkx.algorithms.connectivity.stoerwagner.A->set([u])
A:networkx.algorithms.connectivity.stoerwagner.h->heap()
A:networkx.algorithms.connectivity.stoerwagner.(v, w)->heap().min()
A:networkx.algorithms.connectivity.stoerwagner.reachable->set(nx.single_source_shortest_path_length(G, v))
networkx.algorithms.connectivity.stoerwagner.stoer_wagner(G,weight='weight',heap=BinaryHeap)
networkx.stoer_wagner(G,weight='weight',heap=BinaryHeap)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/kcutsets.py----------------------------------------
A:networkx.algorithms.connectivity.kcutsets.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.connectivity.kcutsets.H->G.copy()
A:networkx.algorithms.connectivity.kcutsets.R->flow_func(H, '%sB' % mapping[x], '%sA' % mapping[v], **kwargs)
A:networkx.algorithms.connectivity.kcutsets.kwargs->dict(capacity='capacity', residual=R)
A:networkx.algorithms.connectivity.kcutsets.k->networkx.node_connectivity(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.kcutsets.degree->G.degree().items()
A:networkx.algorithms.connectivity.kcutsets.L->networkx.condensation(R)
A:networkx.algorithms.connectivity.kcutsets.cutset->set()
networkx.algorithms.connectivity.kcutsets._is_separating_set(G,cut)
networkx.algorithms.connectivity.kcutsets.all_node_cuts(G,k=None,flow_func=None)
networkx.all_node_cuts(G,k=None,flow_func=None)
networkx.connectivity._is_separating_set(G,cut)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/__init__.py----------------------------------------
A:networkx.algorithms.connectivity.__init__.__all__->sum([connectivity.__all__, cuts.__all__, kcomponents.__all__, kcutsets.__all__, stoerwagner.__all__, utils.__all__], [])


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/connectivity.py----------------------------------------
A:networkx.algorithms.connectivity.connectivity.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.connectivity.connectivity.H->build_auxiliary_edge_connectivity(G)
A:networkx.algorithms.connectivity.connectivity.mapping->build_auxiliary_edge_connectivity(G).graph.get('mapping', None)
A:networkx.algorithms.connectivity.connectivity.kwargs->dict(flow_func=flow_func, auxiliary=H, residual=R)
A:networkx.algorithms.connectivity.connectivity.R->build_residual_network(H, 'capacity')
A:networkx.algorithms.connectivity.connectivity.degree->G.degree()
A:networkx.algorithms.connectivity.connectivity.minimum_degree->min(degree.values())
A:networkx.algorithms.connectivity.connectivity.v->networkx.dominating_set(G, start_with=node).pop()
A:networkx.algorithms.connectivity.connectivity.K->local_node_connectivity(G, u, v, **kwargs)
A:networkx.algorithms.connectivity.connectivity.nbunch->set(nbunch)
A:networkx.algorithms.connectivity.connectivity.directed->G.is_directed()
A:networkx.algorithms.connectivity.connectivity.L->min(L, local_edge_connectivity(G, v, w, **kwargs))
A:networkx.algorithms.connectivity.connectivity.nodes->G.nodes()
A:networkx.algorithms.connectivity.connectivity.n->len(nodes)
A:networkx.algorithms.connectivity.connectivity.D->networkx.dominating_set(G, start_with=node)
networkx.algorithms.connectivity.connectivity.all_pairs_node_connectivity(G,nbunch=None,flow_func=None)
networkx.algorithms.connectivity.connectivity.average_node_connectivity(G,flow_func=None)
networkx.algorithms.connectivity.connectivity.edge_connectivity(G,s=None,t=None,flow_func=None)
networkx.algorithms.connectivity.connectivity.local_edge_connectivity(G,u,v,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.connectivity.connectivity.local_node_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.algorithms.connectivity.connectivity.node_connectivity(G,s=None,t=None,flow_func=None)
networkx.all_pairs_node_connectivity(G,nbunch=None,flow_func=None)
networkx.average_node_connectivity(G,flow_func=None)
networkx.edge_connectivity(G,s=None,t=None,flow_func=None)
networkx.local_edge_connectivity(G,u,v,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.local_node_connectivity(G,s,t,flow_func=None,auxiliary=None,residual=None,cutoff=None)
networkx.node_connectivity(G,s=None,t=None,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/cuts.py----------------------------------------
A:networkx.algorithms.connectivity.cuts.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.connectivity.cuts.H->build_auxiliary_edge_connectivity(G)
A:networkx.algorithms.connectivity.cuts.kwargs->dict(flow_func=flow_func, residual=R, auxiliary=H)
A:networkx.algorithms.connectivity.cuts.(cut_value, partition)->networkx.minimum_cut(H, s, t, **kwargs)
A:networkx.algorithms.connectivity.cuts.cutset->set()
A:networkx.algorithms.connectivity.cuts.mapping->build_auxiliary_edge_connectivity(G).graph.get('mapping', None)
A:networkx.algorithms.connectivity.cuts.edge_cut->minimum_st_edge_cut(H, '%sB' % mapping[s], '%sA' % mapping[t], **kwargs)
A:networkx.algorithms.connectivity.cuts.node_cut->set((H.node[node]['id'] for edge in edge_cut for node in edge))
A:networkx.algorithms.connectivity.cuts.R->build_residual_network(H, 'capacity')
A:networkx.algorithms.connectivity.cuts.v->networkx.dominating_set(G, start_with=node).pop()
A:networkx.algorithms.connectivity.cuts.min_cut->G.edges(node)
A:networkx.algorithms.connectivity.cuts.this_cut->minimum_st_edge_cut(H, v, w, **kwargs)
A:networkx.algorithms.connectivity.cuts.node->min(G, key=G.degree)
A:networkx.algorithms.connectivity.cuts.nodes->G.nodes()
A:networkx.algorithms.connectivity.cuts.n->len(nodes)
A:networkx.algorithms.connectivity.cuts.D->networkx.dominating_set(G, start_with=node)
networkx.algorithms.connectivity.cuts.minimum_edge_cut(G,s=None,t=None,flow_func=None)
networkx.algorithms.connectivity.cuts.minimum_node_cut(G,s=None,t=None,flow_func=None)
networkx.algorithms.connectivity.cuts.minimum_st_edge_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.algorithms.connectivity.cuts.minimum_st_node_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.connectivity.minimum_st_edge_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.connectivity.minimum_st_node_cut(G,s,t,flow_func=None,auxiliary=None,residual=None)
networkx.minimum_edge_cut(G,s=None,t=None,flow_func=None)
networkx.minimum_node_cut(G,s=None,t=None,flow_func=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/tests/test_kcomponents.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_kcomponents.G->networkx.davis_southern_women_graph()
A:networkx.algorithms.connectivity.tests.test_kcomponents.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.connectivity.tests.test_kcomponents.P->networkx.petersen_graph()
A:networkx.algorithms.connectivity.tests.test_kcomponents.K->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_kcomponents.result->networkx.k_components(G)
A:networkx.algorithms.connectivity.tests.test_kcomponents.C->networkx.davis_southern_women_graph().subgraph(component)
A:networkx.algorithms.connectivity.tests.test_kcomponents.deg_seq->networkx.utils.create_degree_sequence(100, nx.utils.powerlaw_sequence)
A:networkx.algorithms.connectivity.tests.test_kcomponents.k_components->networkx.k_components(G)
A:networkx.algorithms.connectivity.tests.test_kcomponents.k_num->build_k_number_dict(k_components)
networkx.algorithms.connectivity.tests.test_kcomponents._check_connectivity(G)
networkx.algorithms.connectivity.tests.test_kcomponents.test_configuration()
networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women()
networkx.algorithms.connectivity.tests.test_kcomponents.test_davis_southern_women_detail_3_and_4()
networkx.algorithms.connectivity.tests.test_kcomponents.test_directed()
networkx.algorithms.connectivity.tests.test_kcomponents.test_karate()
networkx.algorithms.connectivity.tests.test_kcomponents.test_karate_component_number()
networkx.algorithms.connectivity.tests.test_kcomponents.test_random_gnp()
networkx.algorithms.connectivity.tests.test_kcomponents.test_set_consolidation_rosettacode()
networkx.algorithms.connectivity.tests.test_kcomponents.test_shell()
networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_detail_3_and_4()
networkx.algorithms.connectivity.tests.test_kcomponents.test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_kcomponents.torrents_and_ferraro_graph()
networkx.connectivity.tests.test__check_connectivity(G)
networkx.connectivity.tests.test_test_configuration()
networkx.connectivity.tests.test_test_davis_southern_women()
networkx.connectivity.tests.test_test_davis_southern_women_detail_3_and_4()
networkx.connectivity.tests.test_test_directed()
networkx.connectivity.tests.test_test_karate()
networkx.connectivity.tests.test_test_karate_component_number()
networkx.connectivity.tests.test_test_random_gnp()
networkx.connectivity.tests.test_test_set_consolidation_rosettacode()
networkx.connectivity.tests.test_test_shell()
networkx.connectivity.tests.test_test_torrents_and_ferraro_detail_3_and_4()
networkx.connectivity.tests.test_test_torrents_and_ferraro_graph()
networkx.connectivity.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/tests/test_kcutsets.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_kcutsets.G->max(list(nx.biconnected_component_subgraphs(K)), key=len)
A:networkx.algorithms.connectivity.tests.test_kcutsets.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.connectivity.tests.test_kcutsets.labels->dict(((v, k) for (k, v) in rlabels.items()))
A:networkx.algorithms.connectivity.tests.test_kcutsets.P->networkx.petersen_graph()
A:networkx.algorithms.connectivity.tests.test_kcutsets.K->networkx.karate_club_graph()
A:networkx.algorithms.connectivity.tests.test_kcutsets.H->max(list(nx.biconnected_component_subgraphs(K)), key=len).copy()
A:networkx.algorithms.connectivity.tests.test_kcutsets.deg_seq->networkx.utils.create_degree_sequence(100, nx.utils.powerlaw_sequence)
A:networkx.algorithms.connectivity.tests.test_kcutsets.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_kcutsets.articulation_points->list(({a} for a in nx.articulation_points(G)))
A:networkx.algorithms.connectivity.tests.test_kcutsets.cuts->list(nx.all_node_cuts(G))
A:networkx.algorithms.connectivity.tests.test_kcutsets.max_degree_node->max(G, key=G.degree)
networkx.algorithms.connectivity.tests.test_kcutsets._check_separating_sets(G)
networkx.algorithms.connectivity.tests.test_kcutsets._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_kcutsets.graph_example_1()
networkx.algorithms.connectivity.tests.test_kcutsets.test_alternative_flow_functions()
networkx.algorithms.connectivity.tests.test_kcutsets.test_articulation_points()
networkx.algorithms.connectivity.tests.test_kcutsets.test_configuration()
networkx.algorithms.connectivity.tests.test_kcutsets.test_disconnected_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_example_1()
networkx.algorithms.connectivity.tests.test_kcutsets.test_grid_2d_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set()
networkx.algorithms.connectivity.tests.test_kcutsets.test_is_separating_set_complete_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.test_karate()
networkx.algorithms.connectivity.tests.test_kcutsets.test_non_repeated_cuts()
networkx.algorithms.connectivity.tests.test_kcutsets.test_random_gnp()
networkx.algorithms.connectivity.tests.test_kcutsets.test_shell()
networkx.algorithms.connectivity.tests.test_kcutsets.test_torrents_and_ferraro_graph()
networkx.algorithms.connectivity.tests.test_kcutsets.torrents_and_ferraro_graph()
networkx.connectivity.tests.test__check_separating_sets(G)
networkx.connectivity.tests.test__generate_no_biconnected(max_attempts=50)
networkx.connectivity.tests.test_graph_example_1()
networkx.connectivity.tests.test_test_alternative_flow_functions()
networkx.connectivity.tests.test_test_articulation_points()
networkx.connectivity.tests.test_test_configuration()
networkx.connectivity.tests.test_test_disconnected_graph()
networkx.connectivity.tests.test_test_example_1()
networkx.connectivity.tests.test_test_grid_2d_graph()
networkx.connectivity.tests.test_test_is_separating_set()
networkx.connectivity.tests.test_test_is_separating_set_complete_graph()
networkx.connectivity.tests.test_test_karate()
networkx.connectivity.tests.test_test_non_repeated_cuts()
networkx.connectivity.tests.test_test_random_gnp()
networkx.connectivity.tests.test_test_shell()
networkx.connectivity.tests.test_test_torrents_and_ferraro_graph()
networkx.connectivity.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/tests/test_stoer_wagner.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.partition->tuple(map(set, partition))
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.(cut_value, partition)->networkx.stoer_wagner(G, weight, heap=nx.utils.BinaryHeap)
A:networkx.algorithms.connectivity.tests.test_stoer_wagner.G->networkx.MultiDiGraph()
networkx.algorithms.connectivity.tests.test_stoer_wagner._check_partition(G,cut_value,partition,weight)
networkx.algorithms.connectivity.tests.test_stoer_wagner._test_stoer_wagner(G,answer,weight='weight')
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_exceptions()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph1()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph2()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_graph3()
networkx.algorithms.connectivity.tests.test_stoer_wagner.test_weight_name()
networkx.tests.test_stoer_wagner._check_partition(G,cut_value,partition,weight)
networkx.tests.test_stoer_wagner._test_stoer_wagner(G,answer,weight='weight')
networkx.tests.test_stoer_wagner.test_exceptions()
networkx.tests.test_stoer_wagner.test_graph1()
networkx.tests.test_stoer_wagner.test_graph2()
networkx.tests.test_stoer_wagner.test_graph3()
networkx.tests.test_stoer_wagner.test_weight_name()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_connectivity.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_connectivity.G1->networkx.path_graph(3)
A:networkx.algorithms.connectivity.tests.test_connectivity.G2->networkx.path_graph(3)
A:networkx.algorithms.connectivity.tests.test_connectivity.G3->networkx.Graph()
A:networkx.algorithms.connectivity.tests.test_connectivity.kwargs->dict(flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_connectivity.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_connectivity.D->networkx.cycle_graph(10).to_directed()
A:networkx.algorithms.connectivity.tests.test_connectivity.result->local_func(G, 0, 4, flow_func=flow_func, cutoff=cutoff)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.path->networkx.path_graph(7)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.directed_path->networkx.path_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.connectivity.tests.test_connectivity.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.connectivity.tests.test_connectivity.self.gnp->networkx.gnp_random_graph(30, 0.1)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.directed_gnp->networkx.gnp_random_graph(30, 0.1, directed=True)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.K20->networkx.complete_graph(20)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.K10->networkx.complete_graph(10)
A:networkx.algorithms.connectivity.tests.test_connectivity.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_connectivity.K_undir->networkx.all_pairs_node_connectivity(self.path)
A:networkx.algorithms.connectivity.tests.test_connectivity.K_dir->networkx.all_pairs_node_connectivity(self.directed_path)
A:networkx.algorithms.connectivity.tests.test_connectivity.K->networkx.all_pairs_node_connectivity(G)
A:networkx.algorithms.connectivity.tests.test_connectivity.C->networkx.all_pairs_node_connectivity(G, nbunch=iter(nbunch))
A:networkx.algorithms.connectivity.tests.test_connectivity.A[u][v]A[v][u]->networkx.node_connectivity(G, u, v)
A:networkx.algorithms.connectivity.tests.test_connectivity.A[u][v]->networkx.node_connectivity(G, u, v)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.setUp(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_complete(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_cycles(self)
networkx.algorithms.connectivity.tests.test_connectivity.TestAllPairsNodeConnectivity.test_paths(self)
networkx.algorithms.connectivity.tests.test_connectivity._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_connectivity.test_articulation_points()
networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity()
networkx.algorithms.connectivity.tests.test_connectivity.test_average_connectivity_directed()
networkx.algorithms.connectivity.tests.test_connectivity.test_brandes_erlebach()
networkx.algorithms.connectivity.tests.test_connectivity.test_complete_graphs()
networkx.algorithms.connectivity.tests.test_connectivity.test_cutoff()
networkx.algorithms.connectivity.tests.test_connectivity.test_directed_edge_connectivity()
networkx.algorithms.connectivity.tests.test_connectivity.test_dodecahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_connectivity_flow_vs_stoer_wagner()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_edge_missing_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_empty_graphs()
networkx.algorithms.connectivity.tests.test_connectivity.test_icosahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_interface_only_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_connectivity.test_missing_source()
networkx.algorithms.connectivity.tests.test_connectivity.test_missing_target()
networkx.algorithms.connectivity.tests.test_connectivity.test_not_connected()
networkx.algorithms.connectivity.tests.test_connectivity.test_not_weakly_connected()
networkx.algorithms.connectivity.tests.test_connectivity.test_octahedral()
networkx.algorithms.connectivity.tests.test_connectivity.test_petersen()
networkx.algorithms.connectivity.tests.test_connectivity.test_tutte()
networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_1()
networkx.algorithms.connectivity.tests.test_connectivity.test_white_harary_2()
networkx.tests.test_TestAllPairsNodeConnectivity
networkx.tests.test_TestAllPairsNodeConnectivity.setUp(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_directed(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_icosahedral(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_all_pairs_connectivity_nbunch_iter(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_complete(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_cycles(self)
networkx.tests.test_TestAllPairsNodeConnectivity.test_paths(self)
networkx.tests.test__generate_no_biconnected(max_attempts=50)
networkx.tests.test_test_articulation_points()
networkx.tests.test_test_average_connectivity()
networkx.tests.test_test_average_connectivity_directed()
networkx.tests.test_test_brandes_erlebach()
networkx.tests.test_test_complete_graphs()
networkx.tests.test_test_cutoff()
networkx.tests.test_test_directed_edge_connectivity()
networkx.tests.test_test_dodecahedral()
networkx.tests.test_test_edge_connectivity_flow_vs_stoer_wagner()
networkx.tests.test_test_edge_missing_source()
networkx.tests.test_test_edge_missing_target()
networkx.tests.test_test_empty_graphs()
networkx.tests.test_test_icosahedral()
networkx.tests.test_test_interface_only_source()
networkx.tests.test_test_interface_only_target()
networkx.tests.test_test_invalid_auxiliary()
networkx.tests.test_test_missing_source()
networkx.tests.test_test_missing_target()
networkx.tests.test_test_not_connected()
networkx.tests.test_test_not_weakly_connected()
networkx.tests.test_test_octahedral()
networkx.tests.test_test_petersen()
networkx.tests.test_test_tutte()
networkx.tests.test_test_white_harary_1()
networkx.tests.test_test_white_harary_2()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/connectivity/tests/test_cuts.py----------------------------------------
A:networkx.algorithms.connectivity.tests.test_cuts.G->networkx.complete_graph(5)
A:networkx.algorithms.connectivity.tests.test_cuts.Ggen->_generate_no_biconnected()
A:networkx.algorithms.connectivity.tests.test_cuts.cut->networkx.minimum_node_cut(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.kwargs->dict(flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.edge_cut->networkx.minimum_edge_cut(G, **kwargs)
A:networkx.algorithms.connectivity.tests.test_cuts.H->networkx.complete_graph(5).copy()
A:networkx.algorithms.connectivity.tests.test_cuts.node_cut->networkx.minimum_node_cut(G, **kwargs)
A:networkx.algorithms.connectivity.tests.test_cuts.ccs->iter(nx.connected_components(G))
A:networkx.algorithms.connectivity.tests.test_cuts.cutset->networkx.minimum_edge_cut(G, flow_func=flow_func)
A:networkx.algorithms.connectivity.tests.test_cuts.D->networkx.DiGraph()
networkx.algorithms.connectivity.tests.test_cuts._generate_no_biconnected(max_attempts=50)
networkx.algorithms.connectivity.tests.test_cuts.test_articulation_points()
networkx.algorithms.connectivity.tests.test_cuts.test_brandes_erlebach_book()
networkx.algorithms.connectivity.tests.test_cuts.test_edge_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_empty_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_icosahedral_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_source()
networkx.algorithms.connectivity.tests.test_cuts.test_interface_only_target()
networkx.algorithms.connectivity.tests.test_cuts.test_invalid_auxiliary()
networkx.algorithms.connectivity.tests.test_cuts.test_missing_source()
networkx.algorithms.connectivity.tests.test_cuts.test_missing_target()
networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_exception()
networkx.algorithms.connectivity.tests.test_cuts.test_node_cutset_random_graphs()
networkx.algorithms.connectivity.tests.test_cuts.test_not_connected()
networkx.algorithms.connectivity.tests.test_cuts.test_not_weakly_connected()
networkx.algorithms.connectivity.tests.test_cuts.test_octahedral_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_petersen_cutset()
networkx.algorithms.connectivity.tests.test_cuts.test_unbounded()
networkx.algorithms.connectivity.tests.test_cuts.test_white_harary_paper()
networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete()
networkx.algorithms.connectivity.tests.test_cuts.tests_min_cut_complete_directed()
networkx.connectivity.tests.test__generate_no_biconnected(max_attempts=50)
networkx.connectivity.tests.test_test_articulation_points()
networkx.connectivity.tests.test_test_brandes_erlebach_book()
networkx.connectivity.tests.test_test_edge_cutset_random_graphs()
networkx.connectivity.tests.test_test_empty_graphs()
networkx.connectivity.tests.test_test_icosahedral_cutset()
networkx.connectivity.tests.test_test_interface_only_source()
networkx.connectivity.tests.test_test_interface_only_target()
networkx.connectivity.tests.test_test_invalid_auxiliary()
networkx.connectivity.tests.test_test_missing_source()
networkx.connectivity.tests.test_test_missing_target()
networkx.connectivity.tests.test_test_node_cutset_exception()
networkx.connectivity.tests.test_test_node_cutset_random_graphs()
networkx.connectivity.tests.test_test_not_connected()
networkx.connectivity.tests.test_test_not_weakly_connected()
networkx.connectivity.tests.test_test_octahedral_cutset()
networkx.connectivity.tests.test_test_petersen_cutset()
networkx.connectivity.tests.test_test_unbounded()
networkx.connectivity.tests.test_test_white_harary_paper()
networkx.connectivity.tests.test_tests_min_cut_complete()
networkx.connectivity.tests.test_tests_min_cut_complete_directed()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/community/kclique.py----------------------------------------
A:networkx.algorithms.community.kclique.__author__->'\n'.join(['Conrad Lee <conradlee@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.community.kclique.cliques->networkx.find_cliques(G)
A:networkx.algorithms.community.kclique.membership_dict->defaultdict(list)
A:networkx.algorithms.community.kclique.perc_graph->networkx.Graph()
A:networkx.algorithms.community.kclique.adjacent_cliques->set()
networkx._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.kclique._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.kclique.k_clique_communities(G,k,cliques=None)
networkx.k_clique_communities(G,k,cliques=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/community/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/community/tests/test_kclique.py----------------------------------------
A:networkx.algorithms.community.tests.test_kclique.G->networkx.Graph()
A:networkx.algorithms.community.tests.test_kclique.c->list(k_clique_communities(nx.Graph(), 1))
A:networkx.algorithms.community.tests.test_kclique.z->networkx.karate_club_graph()
A:networkx.algorithms.community.tests.test_kclique.zachary_k2_ground_truth->set([frozenset(z.nodes())])
A:networkx.algorithms.community.tests.test_kclique.zachary_k3_ground_truth->set([frozenset([0, 1, 2, 3, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33]), frozenset([0, 4, 5, 6, 10, 16]), frozenset([24, 25, 31])])
A:networkx.algorithms.community.tests.test_kclique.zachary_k4_ground_truth->set([frozenset([0, 1, 2, 3, 7, 13]), frozenset([8, 32, 30, 33]), frozenset([32, 33, 29, 23])])
A:networkx.algorithms.community.tests.test_kclique.zachary_k5_ground_truth->set([frozenset([0, 1, 2, 3, 7, 13])])
A:networkx.algorithms.community.tests.test_kclique.zachary_k6_ground_truth->set([])
networkx.algorithms.community.tests.test_kclique.test_bad_k()
networkx.algorithms.community.tests.test_kclique.test_isolated_K5()
networkx.algorithms.community.tests.test_kclique.test_overlaping_K5()
networkx.algorithms.community.tests.test_kclique.test_zachary()
networkx.tests.test_test_bad_k()
networkx.tests.test_test_isolated_K5()
networkx.tests.test_test_overlaping_K5()
networkx.tests.test_test_zachary()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/edgedfs.py----------------------------------------
A:networkx.algorithms.traversal.edgedfs.nodes->list(G.nbunch_iter(source))
A:networkx.algorithms.traversal.edgedfs.(out_edges, key, tailhead)->helper_funcs(G, orientation)
A:networkx.algorithms.traversal.edgedfs.visited_edges->set()
A:networkx.algorithms.traversal.edgedfs.visited_nodes->set()
A:networkx.algorithms.traversal.edgedfs.edges[current_node]->out_edges(current_node, **kwds)
A:networkx.algorithms.traversal.edgedfs.edge->next(edges[current_node])
A:networkx.algorithms.traversal.edgedfs.edge_key->key(edge)
networkx.algorithms.traversal.edgedfs.edge_dfs(G,source=None,orientation='original')
networkx.algorithms.traversal.edgedfs.helper_funcs(G,orientation)
networkx.edge_dfs(G,source=None,orientation='original')
networkx.helper_funcs(G,orientation)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/depth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.depth_first_search.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.traversal.depth_first_search.visited->set()
A:networkx.algorithms.traversal.depth_first_search.child->next(children)
A:networkx.algorithms.traversal.depth_first_search.T->networkx.DiGraph()
A:networkx.algorithms.traversal.depth_first_search.d->defaultdict(list)
networkx.algorithms.traversal.depth_first_search.dfs_edges(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_predecessors(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_successors(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_tree(G,source)
networkx.dfs_edges(G,source=None)
networkx.dfs_labeled_edges(G,source=None)
networkx.dfs_postorder_nodes(G,source=None)
networkx.dfs_predecessors(G,source=None)
networkx.dfs_preorder_nodes(G,source=None)
networkx.dfs_successors(G,source=None)
networkx.dfs_tree(G,source)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/breadth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.breadth_first_search.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.traversal.breadth_first_search.visited->set([source])
A:networkx.algorithms.traversal.breadth_first_search.queue->deque([(source, neighbors(source))])
A:networkx.algorithms.traversal.breadth_first_search.child->next(children)
A:networkx.algorithms.traversal.breadth_first_search.T->networkx.DiGraph()
A:networkx.algorithms.traversal.breadth_first_search.d->defaultdict(list)
networkx.algorithms.traversal.breadth_first_search.bfs_edges(G,source,reverse=False)
networkx.algorithms.traversal.breadth_first_search.bfs_predecessors(G,source)
networkx.algorithms.traversal.breadth_first_search.bfs_successors(G,source)
networkx.algorithms.traversal.breadth_first_search.bfs_tree(G,source,reverse=False)
networkx.bfs_edges(G,source,reverse=False)
networkx.bfs_predecessors(G,source)
networkx.bfs_successors(G,source)
networkx.bfs_tree(G,source,reverse=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/tests/test_bfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_bfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_bfs.T->networkx.bfs_tree(G, source=1)
A:networkx.algorithms.traversal.tests.test_bfs.edges->networkx.bfs_edges(D, source=4, reverse=True)
A:networkx.algorithms.traversal.tests.test_bfs.D->networkx.DiGraph()
networkx.algorithms.traversal.tests.test_bfs.TestBFS
networkx.algorithms.traversal.tests.test_bfs.TestBFS.setUp(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges_reverse(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree_isolates(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor(self)
networkx.tests.test_bfs.TestBFS
networkx.tests.test_bfs.TestBFS.setUp(self)
networkx.tests.test_bfs.TestBFS.test_bfs_edges(self)
networkx.tests.test_bfs.TestBFS.test_bfs_edges_reverse(self)
networkx.tests.test_bfs.TestBFS.test_bfs_tree(self)
networkx.tests.test_bfs.TestBFS.test_bfs_tree_isolates(self)
networkx.tests.test_bfs.TestBFS.test_predecessor(self)
networkx.tests.test_bfs.TestBFS.test_successor(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/tests/test_dfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_dfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.D->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.T->networkx.dfs_tree(G, source=None)
A:networkx.algorithms.traversal.tests.test_dfs.edges->list(nx.dfs_labeled_edges(self.D))
networkx.algorithms.traversal.tests.test_dfs.TestDFS
networkx.algorithms.traversal.tests.test_dfs.TestDFS.setUp(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree_isolates(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor(self)
networkx.tests.test_dfs.TestDFS
networkx.tests.test_dfs.TestDFS.setUp(self)
networkx.tests.test_dfs.TestDFS.test_dfs_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_labeled_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_tree(self)
networkx.tests.test_dfs.TestDFS.test_dfs_tree_isolates(self)
networkx.tests.test_dfs.TestDFS.test_postorder_nodes(self)
networkx.tests.test_dfs.TestDFS.test_predecessor(self)
networkx.tests.test_dfs.TestDFS.test_preorder_nodes(self)
networkx.tests.test_dfs.TestDFS.test_successor(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/traversal/tests/test_edgedfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_edgedfs.G->networkx.MultiDiGraph(self.edges)
A:networkx.algorithms.traversal.tests.test_edgedfs.edges->list(edge_dfs(G))
A:networkx.algorithms.traversal.tests.test_edgedfs.x->list(edge_dfs(G, self.nodes, orientation='ignore'))
A:networkx.algorithms.traversal.tests.test_edgedfs.nodes->range(4)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS(object)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.setUp(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_ignore2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_digraph_rev2(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_empty(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_graph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_ignore(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multidigraph_rev(self)
networkx.algorithms.traversal.tests.test_edgedfs.TestEdgeDFS.test_multigraph(self)
networkx.tests.test_TestEdgeDFS(object)
networkx.tests.test_TestEdgeDFS.setUp(self)
networkx.tests.test_TestEdgeDFS.test_digraph(self)
networkx.tests.test_TestEdgeDFS.test_digraph2(self)
networkx.tests.test_TestEdgeDFS.test_digraph_ignore(self)
networkx.tests.test_TestEdgeDFS.test_digraph_ignore2(self)
networkx.tests.test_TestEdgeDFS.test_digraph_rev(self)
networkx.tests.test_TestEdgeDFS.test_digraph_rev2(self)
networkx.tests.test_TestEdgeDFS.test_empty(self)
networkx.tests.test_TestEdgeDFS.test_graph(self)
networkx.tests.test_TestEdgeDFS.test_multidigraph(self)
networkx.tests.test_TestEdgeDFS.test_multidigraph_ignore(self)
networkx.tests.test_TestEdgeDFS.test_multidigraph_rev(self)
networkx.tests.test_TestEdgeDFS.test_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/isomorph.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Christopher Ellison cellison@cse.ucdavis.edu)'])
A:networkx.algorithms.isomorphism.isomorph.d1->list(G1.degree().values())
A:networkx.algorithms.isomorphism.isomorph.t1->networkx.triangles(G1)
A:networkx.algorithms.isomorphism.isomorph.c1->networkx.number_of_cliques(G1)
A:networkx.algorithms.isomorphism.isomorph.d2->list(G2.degree().values())
A:networkx.algorithms.isomorphism.isomorph.t2->networkx.triangles(G2)
A:networkx.algorithms.isomorphism.isomorph.c2->networkx.number_of_cliques(G2)
A:networkx.algorithms.isomorphism.isomorph.gm->GM(G1, G2, node_match=node_match, edge_match=edge_match)
networkx.algorithms.isomorphism.isomorph.could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.is_isomorphic(G1,G2,node_match=None,edge_match=None)
networkx.could_be_isomorphic(G1,G2)
networkx.fast_could_be_isomorphic(G1,G2)
networkx.faster_could_be_isomorphic(G1,G2)
networkx.is_isomorphic(G1,G2,node_match=None,edge_match=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorphvf2.self.G1_nodes->set(G1.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.G2_nodes->set(G2.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.old_recursion_limit->sys.getrecursionlimit()
A:networkx.algorithms.isomorphism.isomorphvf2.expected_max_recursion_level->len(self.G2)
A:networkx.algorithms.isomorphism.isomorphvf2.other_node->min(G2_nodes - set(self.core_2))
A:networkx.algorithms.isomorphism.isomorphvf2.self.state->DiGMState(self)
A:networkx.algorithms.isomorphism.isomorphvf2.self.mapping->self.core_1.copy()
A:networkx.algorithms.isomorphism.isomorphvf2.d1->sorted(self.G1.degree().values())
A:networkx.algorithms.isomorphism.isomorphvf2.d2->sorted(self.G2.degree().values())
A:networkx.algorithms.isomorphism.isomorphvf2.x->next(self.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.isomorphvf2.newstate->self.state.__class__(self, G1_node, G2_node)
A:networkx.algorithms.isomorphism.isomorphvf2.node_2->min(G2_nodes - set(self.core_2))
A:networkx.algorithms.isomorphism.isomorphvf2.self.depth->len(GM.core_1)
A:networkx.algorithms.isomorphism.isomorphvf2.new_nodes->set([])
networkx.algorithms.isomorphism.isomorphvf2.DiGMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.DiGMState(self,GM,G1_node=None,G2_node=None)
networkx.isomorphism.isomorphvf2.DiGMState.restore(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher(self,G1,G2)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.initialize(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.GMState(self,GM,G1_node=None,G2_node=None)
networkx.isomorphism.isomorphvf2.GMState.restore(self)
networkx.isomorphism.isomorphvf2.GraphMatcher(self,G1,G2)
networkx.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.initialize(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.match(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility(self,G1_node,G2_node)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/matchhelpers.py----------------------------------------
A:networkx.algorithms.isomorphism.matchhelpers.attrs->list(zip(attr, default))
A:networkx.algorithms.isomorphism.matchhelpers.values1->sorted([data.get(attr, default) for data in datasets1.values()])
A:networkx.algorithms.isomorphism.matchhelpers.values2->sorted([data.get(attr, default) for data in datasets2.values()])
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match->copyfunc(categorical_node_match, 'categorical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.x->tuple((data2.get(attr, d) for (attr, d) in attrs))
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match.__doc__->categorical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.tmpdoc->tmpdoc.replace('numerical_edge_match', 'numerical_multiedge_match').replace('numerical_edge_match', 'numerical_multiedge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match->copyfunc(numerical_node_match, 'numerical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match.__doc__->numerical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match->copyfunc(generic_node_match, 'generic_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match.__doc__->generic_doc.replace('node', 'edge')
networkx.algorithms.isomorphism.matchhelpers.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.categorical_node_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.close(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.copyfunc(f,name=None)
networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.generic_node_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.isomorphism.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.isomorphism.categorical_multiedge_match(attr,default)
networkx.isomorphism.categorical_node_match(attr,default)
networkx.isomorphism.close(x,y,rtol=1e-05,atol=1e-08)
networkx.isomorphism.copyfunc(f,name=None)
networkx.isomorphism.generic_multiedge_match(attr,default,op)
networkx.isomorphism.generic_node_match(attr,default,op)
networkx.isomorphism.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.isomorphism.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2userfunc.nm->self.node_match(self.G1.node[G1_node], self.G2.node[G2_node])
A:networkx.algorithms.isomorphism.vf2userfunc.feasible->_semantic_feasibility(self, G1_node, G2_node)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher(DiGraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher(GraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.isomorphism.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.isomorphism.MultiDiGraphMatcher(DiGraphMatcher)
networkx.isomorphism.MultiGraphMatcher(GraphMatcher)
networkx.isomorphism._semantic_feasibility(self,G1_node,G2_node)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/tests/test_isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g1->networkx.cycle_graph(L)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm->networkx.algorithms.isomorphism.GraphMatcher(g1, g1)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.mapping->sorted(gm.mapping.items())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g3->networkx.subgraph(g2, ['A', 'B'])
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.fh->open(filename, mode='rb')
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.graph->self.create_graph(os.path.join(head, 'si2_b06_m200.B99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.(head, tail)->os.path.split(__file__)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.subgraph->self.create_graph(os.path.join(head, 'si2_b06_m200.A99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.self.GAG->networkx.generators.atlas.graph_atlas_g()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.alphabet->list(range(26))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nlist->self.create_graph(os.path.join(head, 'si2_b06_m200.B99')).nodes()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.d->dict(zip(nodes, new_nodes))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.relabel->networkx.relabel_nodes(graph, d)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nodes->list(range(6))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.new_nodes->list(nodes)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm12->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm13->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.x->list(gm12.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.y->list(gm13.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.s->len(list(gm.isomorphisms_iter()))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmA->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmB->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas(object)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setUp(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.setupClass(cls)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB(object)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph(filename)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample(object)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop()
networkx.isomorphism.tests.test_isomorphvf2.TestAtlas(object)
networkx.isomorphism.tests.test_isomorphvf2.TestAtlas.setUp(self)
networkx.isomorphism.tests.test_isomorphvf2.TestAtlas.setupClass(cls)
networkx.isomorphism.tests.test_isomorphvf2.TestAtlas.test_graph_atlas(self)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB(object)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph(filename)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample(object)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph(self)
networkx.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1()
networkx.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2()
networkx.isomorphism.tests.test_isomorphvf2.test_multiedge()
networkx.isomorphism.tests.test_isomorphvf2.test_multiple()
networkx.isomorphism.tests.test_isomorphvf2.test_selfloop()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/tests/test_isomorphism.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G3->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G4->networkx.Graph()
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setUp(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.setUp(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/isomorphism/tests/test_vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g1->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g1->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g2->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.nm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_node_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.iso->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emc->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emcm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match(['color', 'weight'], ['', 1])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg1->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_multiedge_match('color', 'red', eq)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg2->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_edge_match(['color', 'weight', 'size'], ['red', 1, 0.5], [eq, eq, iso.matchhelpers.close])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.gm->self.GM(self.g1, self.g2, edge_match=self.emg2)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph(object)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph(object)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple()
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey()
networkx.isomorphism.tests.test_TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.isomorphism.tests.test_TestEdgeMatch_DiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph(object)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.build(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph(object)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.build(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.setUp(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_color1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_color2(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_weight1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_weight2(self)
networkx.isomorphism.tests.test_test_simple()
networkx.isomorphism.tests.test_test_weightkey()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_analysis/hits_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.hits_alg.h->numpy.asarray(M * a).flatten()
A:networkx.algorithms.link_analysis.hits_alg.a->numpy.asarray(x).flatten()
A:networkx.algorithms.link_analysis.hits_alg.err->scipy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.hits_alg.M->networkx.to_scipy_sparse_matrix(G, nodelist=G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.H->networkx.hub_matrix(G, G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.(e, ev)->numpy.linalg.eig(A)
A:networkx.algorithms.link_analysis.hits_alg.A->networkx.authority_matrix(G, G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.hubs->dict(zip(G.nodes(), map(float, h)))
A:networkx.algorithms.link_analysis.hits_alg.authorities->dict(zip(G.nodes(), map(float, a)))
networkx.algorithms.link_analysis.hits_alg.authority_matrix(G,nodelist=None)
networkx.algorithms.link_analysis.hits_alg.hits(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)
networkx.algorithms.link_analysis.hits_alg.hits_numpy(G,normalized=True)
networkx.algorithms.link_analysis.hits_alg.hits_scipy(G,max_iter=100,tol=1e-06,normalized=True)
networkx.algorithms.link_analysis.hits_alg.hub_matrix(G,nodelist=None)
networkx.algorithms.link_analysis.hits_alg.setup_module(module)
networkx.authority_matrix(G,nodelist=None)
networkx.hits(G,max_iter=100,tol=1e-08,nstart=None,normalized=True)
networkx.hits_numpy(G,normalized=True)
networkx.hits_scipy(G,max_iter=100,tol=1e-06,normalized=True)
networkx.hub_matrix(G,nodelist=None)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_analysis/pagerank_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.pagerank_alg.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Brandon Liu <brandon.k.liu@gmail.com'])
A:networkx.algorithms.link_analysis.pagerank_alg.D->G.to_directed()
A:networkx.algorithms.link_analysis.pagerank_alg.W->networkx.stochastic_graph(D, weight=weight)
A:networkx.algorithms.link_analysis.pagerank_alg.N->len(G)
A:networkx.algorithms.link_analysis.pagerank_alg.x->scipy.repeat(1.0 / N, N)
A:networkx.algorithms.link_analysis.pagerank_alg.s->float(sum(dangling.values()))
A:networkx.algorithms.link_analysis.pagerank_alg.p->scipy.array([personalization[n] for n in nodelist], dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.dangling_weights->scipy.array([dangling[n] for n in nodelist], dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.err->scipy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.pagerank_alg.nodelist->G.nodes()
A:networkx.algorithms.link_analysis.pagerank_alg.M->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight, dtype=float)
A:networkx.algorithms.link_analysis.pagerank_alg.(eigenvalues, eigenvectors)->numpy.linalg.eig(M.T)
A:networkx.algorithms.link_analysis.pagerank_alg.ind->eigenvalues.argsort()
A:networkx.algorithms.link_analysis.pagerank_alg.norm->float(largest.sum())
A:networkx.algorithms.link_analysis.pagerank_alg.S->scipy.array(M.sum(axis=1)).flatten()
A:networkx.algorithms.link_analysis.pagerank_alg.Q->scipy.sparse.spdiags(S.T, 0, *M.shape, format='csr')
networkx.algorithms.link_analysis.pagerank_alg.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,weight='weight',dangling=None)
networkx.algorithms.link_analysis.pagerank_alg.setup_module(module)
networkx.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight',dangling=None)
networkx.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,nstart=None,weight='weight',dangling=None)
networkx.pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight',dangling=None)
networkx.pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,weight='weight',dangling=None)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_analysis/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_analysis/tests/test_hits.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_hits.G->networkx.Graph()
A:networkx.algorithms.link_analysis.tests.test_hits.self.G.a->dict(zip(G, [0.0, 0.0, 0.366025, 0.133975, 0.5, 0.0]))
A:networkx.algorithms.link_analysis.tests.test_hits.self.G.h->dict(zip(G, [0.366025, 0.0, 0.211325, 0.0, 0.211325, 0.211325]))
A:networkx.algorithms.link_analysis.tests.test_hits.(h, a)->networkx.hits_scipy(G, tol=1e-08)
A:networkx.algorithms.link_analysis.tests.test_hits.nstart->dict([(i, 1.0 / 2) for i in G])
networkx.algorithms.link_analysis.tests.test_hits.TestHITS
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setUp(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_empty_scipy(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_nstart(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_scipy(self)
networkx.tests.test_hits.TestHITS
networkx.tests.test_hits.TestHITS.setUp(self)
networkx.tests.test_hits.TestHITS.test_empty(self)
networkx.tests.test_hits.TestHITS.test_empty_scipy(self)
networkx.tests.test_hits.TestHITS.test_hits(self)
networkx.tests.test_hits.TestHITS.test_hits_nstart(self)
networkx.tests.test_hits.TestHITS.test_hits_numpy(self)
networkx.tests.test_hits.TestHITS.test_hits_scipy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/link_analysis/tests/test_pagerank.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_pagerank.G->networkx.Graph()
A:networkx.algorithms.link_analysis.tests.test_pagerank.self.G.pagerank->dict(zip(G, [0.03721197, 0.05395735, 0.04150565, 0.37508082, 0.20599833, 0.28624589]))
A:networkx.algorithms.link_analysis.tests.test_pagerank.self.G.dangling_pagerank->dict(zip(G, [0.10844518, 0.18618601, 0.0710892, 0.2683668, 0.15919783, 0.20671497]))
A:networkx.algorithms.link_analysis.tests.test_pagerank.p->networkx.pagerank_scipy(G, alpha=0.9, tol=1e-08, personalization=personalize)
A:networkx.algorithms.link_analysis.tests.test_pagerank.nstart->dict(((n, random.random()) for n in G))
A:networkx.algorithms.link_analysis.tests.test_pagerank.personalize->dict(((n, random.random()) for n in G))
A:networkx.algorithms.link_analysis.tests.test_pagerank.M->networkx.google_matrix(G, alpha=0.9, personalization=personalize)
A:networkx.algorithms.link_analysis.tests.test_pagerank.(e, ev)->numpy.linalg.eig(M.T)
A:networkx.algorithms.link_analysis.tests.test_pagerank.dangling_sum->float(sum(dangling.values()))
A:networkx.algorithms.link_analysis.tests.test_pagerank.M1->networkx.google_matrix(G, personalization=dangling)
A:networkx.algorithms.link_analysis.tests.test_pagerank.M2->networkx.google_matrix(G, personalization=dangling, dangling=dangling)
A:networkx.algorithms.link_analysis.tests.test_pagerank.pr->networkx.pagerank_scipy(self.G, dangling=self.dangling_edges)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank(object)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setUp(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setupClass(cls)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_matrix(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_numpy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_dangling_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_empty(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy(TestPageRank)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.setupClass(cls)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_empty_scipy(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank(self)
networkx.tests.test_pagerank.TestPageRank(object)
networkx.tests.test_pagerank.TestPageRank.setUp(self)
networkx.tests.test_pagerank.TestPageRank.setupClass(cls)
networkx.tests.test_pagerank.TestPageRank.test_dangling_matrix(self)
networkx.tests.test_pagerank.TestPageRank.test_dangling_numpy_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_dangling_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_empty(self)
networkx.tests.test_pagerank.TestPageRank.test_google_matrix(self)
networkx.tests.test_pagerank.TestPageRank.test_numpy_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_personalization(self)
networkx.tests.test_pagerank.TestPageRankScipy(TestPageRank)
networkx.tests.test_pagerank.TestPageRankScipy.setupClass(cls)
networkx.tests.test_pagerank.TestPageRankScipy.test_dangling_scipy_pagerank(self)
networkx.tests.test_pagerank.TestPageRankScipy.test_empty_scipy(self)
networkx.tests.test_pagerank.TestPageRankScipy.test_scipy_pagerank(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/redundancy.py----------------------------------------
A:networkx.algorithms.bipartite.redundancy.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.redundancy.n->len(G[v])
A:networkx.algorithms.bipartite.redundancy.overlap->sum((1 for (u, w) in combinations(G[v], 2) if (set(G[u]) & set(G[w])) - {v}))
networkx.algorithms.bipartite.redundancy._node_redundancy(G,v)
networkx.algorithms.bipartite.redundancy.node_redundancy(G,nodes=None)
networkx.bipartite._node_redundancy(G,v)
networkx.bipartite.node_redundancy(G,nodes=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/basic.py----------------------------------------
A:networkx.algorithms.bipartite.basic.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.bipartite.basic.v->queue.pop()
A:networkx.algorithms.bipartite.basic.S->set(nodes)
A:networkx.algorithms.bipartite.basic.(X, Y)->sets(CC)
A:networkx.algorithms.bipartite.basic.c->color(G)
A:networkx.algorithms.bipartite.basic.X->set((n for n in c if c[n]))
A:networkx.algorithms.bipartite.basic.Y->set((n for n in c if not c[n]))
A:networkx.algorithms.bipartite.basic.n->len(B)
A:networkx.algorithms.bipartite.basic.m->networkx.number_of_edges(B)
A:networkx.algorithms.bipartite.basic.nb->len(nodes)
A:networkx.algorithms.bipartite.basic.bottom->set(nodes)
networkx.algorithms.bipartite.basic.color(G)
networkx.algorithms.bipartite.basic.degrees(B,nodes,weight=None)
networkx.algorithms.bipartite.basic.density(B,nodes)
networkx.algorithms.bipartite.basic.is_bipartite(G)
networkx.algorithms.bipartite.basic.is_bipartite_node_set(G,nodes)
networkx.algorithms.bipartite.basic.sets(G)
networkx.bipartite.color(G)
networkx.bipartite.degrees(B,nodes,weight=None)
networkx.bipartite.density(B,nodes)
networkx.bipartite.sets(G)
networkx.is_bipartite(G)
networkx.is_bipartite_node_set(G,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/generators.py----------------------------------------
A:networkx.algorithms.bipartite.generators.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.bipartite.generators.G->networkx.DiGraph(G)
A:networkx.algorithms.bipartite.generators.top->set(range(n1))
A:networkx.algorithms.bipartite.generators.bottom->list(set(G) - set(top))
A:networkx.algorithms.bipartite.generators.create_using->networkx.MultiGraph()
A:networkx.algorithms.bipartite.generators.lena->len(aseq)
A:networkx.algorithms.bipartite.generators.lenb->len(bseq)
A:networkx.algorithms.bipartite.generators.suma->sum(aseq)
A:networkx.algorithms.bipartite.generators.sumb->sum(bseq)
A:networkx.algorithms.bipartite.generators.naseq->len(aseq)
A:networkx.algorithms.bipartite.generators.nbseq->len(bseq)
A:networkx.algorithms.bipartite.generators.(degree, u)->astubs.pop()
A:networkx.algorithms.bipartite.generators.target->random.choice(bbstubs)
A:networkx.algorithms.bipartite.generators.bbstubs->reduce(lambda x, y: x + y, bb)
A:networkx.algorithms.bipartite.generators.lp->math.log(1.0 - p)
A:networkx.algorithms.bipartite.generators.lr->math.log(1.0 - random.random())
A:networkx.algorithms.bipartite.generators.u->random.choice(top)
A:networkx.algorithms.bipartite.generators.v->random.choice(bottom)
A:networkx.algorithms.bipartite.generators.b->dict(zip(range(0, lena), [0] * lena))
networkx.algorithms.bipartite.generators._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.algorithms.bipartite.generators.alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.generators.complete_bipartite_graph(n1,n2,create_using=None)
networkx.algorithms.bipartite.generators.configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.algorithms.bipartite.generators.gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.algorithms.bipartite.generators.havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.algorithms.bipartite.generators.preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.algorithms.bipartite.generators.random_graph(n,m,p,seed=None,directed=False)
networkx.algorithms.bipartite.generators.reverse_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.bipartite._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.bipartite.alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.bipartite.configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.bipartite.gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.bipartite.havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.bipartite.preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.bipartite.random_graph(n,m,p,seed=None,directed=False)
networkx.bipartite.reverse_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.complete_bipartite_graph(n1,n2,create_using=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/spectral.py----------------------------------------
A:networkx.algorithms.bipartite.spectral.nodelist->G.nodes()
A:networkx.algorithms.bipartite.spectral.A->networkx.to_numpy_matrix(G, nodelist, weight=weight)
A:networkx.algorithms.bipartite.spectral.expA->scipy.linalg.expm(A)
A:networkx.algorithms.bipartite.spectral.expmA->scipy.linalg.expm(-A)
A:networkx.algorithms.bipartite.spectral.index->dict(zip(nodelist, range(len(nodelist))))
networkx.algorithms.bipartite.spectral.setup_module(module)
networkx.algorithms.bipartite.spectral.spectral_bipartivity(G,nodes=None,weight='weight')
networkx.bipartite.setup_module(module)
networkx.bipartite.spectral_bipartivity(G,nodes=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/projection.py----------------------------------------
A:networkx.algorithms.bipartite.projection.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.bipartite.projection.G->networkx.Graph()
A:networkx.algorithms.bipartite.projection.n_top->float(len(B) - len(nodes))
A:networkx.algorithms.bipartite.projection.unbrs->set(B[u])
A:networkx.algorithms.bipartite.projection.vnbrs->set(pred[v])
A:networkx.algorithms.bipartite.projection.weight->weight_function(B, u, v)
networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph(B,nodes)
networkx.algorithms.bipartite.projection.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.algorithms.bipartite.projection.project(B,nodes,create_using=None)
networkx.algorithms.bipartite.projection.projected_graph(B,nodes,multigraph=False)
networkx.algorithms.bipartite.projection.weighted_projected_graph(B,nodes,ratio=False)
networkx.bipartite.collaboration_weighted_projected_graph(B,nodes)
networkx.bipartite.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.bipartite.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.bipartite.weighted_projected_graph(B,nodes,ratio=False)
networkx.project(B,nodes,create_using=None)
networkx.projected_graph(B,nodes,multigraph=False)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/cluster.py----------------------------------------
A:networkx.algorithms.bipartite.cluster.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.cluster.ccs->latapy_clustering(G, nodes=nodes, mode=mode)
A:networkx.algorithms.bipartite.cluster.L_3->_threepaths(G)
A:networkx.algorithms.bipartite.cluster.C_4->_four_cycles(G)
networkx.algorithms.bipartite.cluster._four_cycles(G)
networkx.algorithms.bipartite.cluster._threepaths(G)
networkx.algorithms.bipartite.cluster.average_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cluster.cc_dot(nu,nv)
networkx.algorithms.bipartite.cluster.cc_max(nu,nv)
networkx.algorithms.bipartite.cluster.cc_min(nu,nv)
networkx.algorithms.bipartite.cluster.latapy_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cluster.robins_alexander_clustering(G)
networkx.bipartite._four_cycles(G)
networkx.bipartite._threepaths(G)
networkx.bipartite.average_clustering(G,nodes=None,mode='dot')
networkx.bipartite.cc_dot(nu,nv)
networkx.bipartite.cc_max(nu,nv)
networkx.bipartite.cc_min(nu,nv)
networkx.bipartite.latapy_clustering(G,nodes=None,mode='dot')
networkx.bipartite.robins_alexander_clustering(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/centrality.py----------------------------------------
A:networkx.algorithms.bipartite.centrality.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.centrality.top->set(nodes)
A:networkx.algorithms.bipartite.centrality.centrality->dict(((n, d * s) for (n, d) in G.degree_iter(top)))
A:networkx.algorithms.bipartite.centrality.n->float(len(top))
A:networkx.algorithms.bipartite.centrality.m->float(len(bottom))
A:networkx.algorithms.bipartite.centrality.betweenness->networkx.betweenness_centrality(G, normalized=False, weight=None)
A:networkx.algorithms.bipartite.centrality.sp->path_length(G, node)
A:networkx.algorithms.bipartite.centrality.totsp->sum(sp.values())
networkx.algorithms.bipartite.centrality.betweenness_centrality(G,nodes)
networkx.algorithms.bipartite.centrality.closeness_centrality(G,nodes,normalized=True)
networkx.algorithms.bipartite.centrality.degree_centrality(G,nodes)
networkx.bipartite.betweenness_centrality(G,nodes)
networkx.bipartite.closeness_centrality(G,nodes,normalized=True)
networkx.bipartite.degree_centrality(G,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/matrix.py----------------------------------------
A:networkx.algorithms.bipartite.matrix.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.bipartite.matrix.nlen->len(row_order)
A:networkx.algorithms.bipartite.matrix.column_order->list(set(G) - set(row_order))
A:networkx.algorithms.bipartite.matrix.mlen->len(column_order)
A:networkx.algorithms.bipartite.matrix.row_index->dict(zip(row_order, itertools.count()))
A:networkx.algorithms.bipartite.matrix.col_index->dict(zip(column_order, itertools.count()))
A:networkx.algorithms.bipartite.matrix.(row, col, data)->zip(*((row_index[u], col_index[v], d.get(weight, 1)) for (u, v, d) in G.edges_iter(row_order, data=True) if u in row_index and v in col_index))
A:networkx.algorithms.bipartite.matrix.M->scipy.sparse.coo_matrix((data, (row, col)), shape=(nlen, mlen), dtype=dtype)
A:networkx.algorithms.bipartite.matrix.G->_prep_create_using(create_using)
A:networkx.algorithms.bipartite.matrix.triples->chain((((u, v, 1) for d in range(w)) for (u, v, w) in triples))
networkx.algorithms.bipartite.matrix.biadjacency_matrix(G,row_order,column_order=None,dtype=None,weight='weight',format='csr')
networkx.algorithms.bipartite.matrix.from_biadjacency_matrix(A,create_using=None,edge_attribute='weight')
networkx.algorithms.bipartite.matrix.setup_module(module)
networkx.bipartite.biadjacency_matrix(G,row_order,column_order=None,dtype=None,weight='weight',format='csr')
networkx.bipartite.from_biadjacency_matrix(A,create_using=None,edge_attribute='weight')
networkx.bipartite.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/edgelist.py----------------------------------------
A:networkx.algorithms.bipartite.edgelist.G->_prep_create_using(create_using)
A:networkx.algorithms.bipartite.edgelist.p->line.find(comments)
A:networkx.algorithms.bipartite.edgelist.s->line.strip().split(delimiter)
A:networkx.algorithms.bipartite.edgelist.u->nodetype(u)
A:networkx.algorithms.bipartite.edgelist.v->nodetype(v)
A:networkx.algorithms.bipartite.edgelist.edgedata->dict(literal_eval(' '.join(d)))
A:networkx.algorithms.bipartite.edgelist.edge_value->edge_type(edge_value)
networkx.algorithms.bipartite.edgelist.generate_edgelist(G,delimiter='',data=True)
networkx.algorithms.bipartite.edgelist.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.algorithms.bipartite.edgelist.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.algorithms.bipartite.edgelist.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.bipartite.generate_edgelist(G,delimiter='',data=True)
networkx.bipartite.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.bipartite.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.bipartite.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/matching.py----------------------------------------
A:networkx.algorithms.bipartite.matching.INFINITY->float('inf')
A:networkx.algorithms.bipartite.matching.v->collections.deque().popleft()
A:networkx.algorithms.bipartite.matching.(left, right)->bipartite_sets(G)
A:networkx.algorithms.bipartite.matching.queue->collections.deque()
A:networkx.algorithms.bipartite.matching.layer->list(pred)
A:networkx.algorithms.bipartite.matching.L->preds.pop(v)
A:networkx.algorithms.bipartite.matching.pu->pred.pop(u)
A:networkx.algorithms.bipartite.matching.(L, R)->bipartite_sets(G)
A:networkx.algorithms.bipartite.matching.Z->_connected_by_alternating_paths(G, matching, U)
networkx.algorithms.bipartite.matching._connected_by_alternating_paths(G,matching,targets)
networkx.algorithms.bipartite.matching._is_connected_by_alternating_path(G,v,matching,targets)
networkx.algorithms.bipartite.matching.eppstein_matching(G)
networkx.algorithms.bipartite.matching.hopcroft_karp_matching(G)
networkx.algorithms.bipartite.matching.to_vertex_cover(G,matching)
networkx.bipartite._connected_by_alternating_paths(G,matching,targets)
networkx.bipartite._is_connected_by_alternating_path(G,v,matching,targets)
networkx.bipartite.eppstein_matching(G)
networkx.bipartite.hopcroft_karp_matching(G)
networkx.bipartite.to_vertex_cover(G,matching)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_matrix.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_matrix.G->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_matrix.M->scipy.sparse.csc_matrix([[1, 2], [0, 3]])
A:networkx.algorithms.bipartite.tests.test_matrix.B1->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_matrix.B2->networkx.algorithms.bipartite.from_biadjacency_matrix(M)
A:networkx.algorithms.bipartite.tests.test_matrix.B->networkx.algorithms.bipartite.from_biadjacency_matrix(M, create_using=nx.MultiGraph())
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.setupClass(cls)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col_fail(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_col_fail(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_duplicate_row_fail(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_empty_fail(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_format_keyword_fail(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_multigraph(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_roundtrip(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_from_biadjacency_weight(self)
networkx.algorithms.bipartite.tests.test_matrix.TestBiadjacencyMatrix.test_null_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix
networkx.bipartite.tests.test_TestBiadjacencyMatrix.setupClass(cls)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix_order(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_biadjacency_matrix_weight(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_duplicate_col_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_duplicate_col_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_duplicate_row_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_empty_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_format_keyword_fail(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_multigraph(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_roundtrip(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_from_biadjacency_weight(self)
networkx.bipartite.tests.test_TestBiadjacencyMatrix.test_null_fail(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_centrality.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.self.K3->networkx.complete_bipartite_graph(3, 3)
A:networkx.algorithms.bipartite.tests.test_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.self.davis->networkx.davis_southern_women_graph()
A:networkx.algorithms.bipartite.tests.test_centrality.d->networkx.algorithms.bipartite.degree_centrality(self.C4, [0, 2])
A:networkx.algorithms.bipartite.tests.test_centrality.c->networkx.algorithms.bipartite.closeness_centrality(G, [1])
A:networkx.algorithms.bipartite.tests.test_centrality.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_centrality.deg->networkx.algorithms.bipartite.degree_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.bet->networkx.algorithms.bipartite.betweenness_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.clos->networkx.algorithms.bipartite.closeness_centrality(G, self.top_nodes)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality(object)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setUp(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality(object)
networkx.bipartite.tests.test_TestBipartiteCentrality.setUp(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_closeness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_degree_centrality(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_cluster.G1->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7)])
A:networkx.algorithms.bipartite.tests.test_cluster.G2->networkx.Graph([(0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (1, 5)])
A:networkx.algorithms.bipartite.tests.test_cluster.G3->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)])
A:networkx.algorithms.bipartite.tests.test_cluster.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_cluster.cc4->round(bipartite.robins_alexander_clustering(G), 3)
networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_bad_mode()
networkx.algorithms.bipartite.tests.test_cluster.test_not_bipartite()
networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions()
networkx.algorithms.bipartite.tests.test_cluster.test_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_davis()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_square()
networkx.algorithms.bipartite.tests.test_cluster.test_ra_clustering_zero()
networkx.algorithms.bipartite.tests.test_cluster.test_star_graph()
networkx.bipartite.tests.test_test_average_path_graph()
networkx.bipartite.tests.test_test_bad_mode()
networkx.bipartite.tests.test_test_not_bipartite()
networkx.bipartite.tests.test_test_pairwise_bipartite_cc_functions()
networkx.bipartite.tests.test_test_path_graph()
networkx.bipartite.tests.test_test_ra_clustering_davis()
networkx.bipartite.tests.test_test_ra_clustering_square()
networkx.bipartite.tests.test_test_ra_clustering_zero()
networkx.bipartite.tests.test_test_star_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_spectral_bipartivity.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.G->networkx.complete_bipartite_graph(2, 3)
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.sbn->sb(G, nodes=[1, 2])
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity(object)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.k23_like(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setupClass(cls)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity(object)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.k23_like(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setupClass(cls)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_project.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_project.G->networkx.algorithms.bipartite.generic_weighted_projected_graph(B, [0, 1])
A:networkx.algorithms.bipartite.tests.test_project.P->networkx.algorithms.bipartite.overlap_weighted_projected_graph(self.N, 'ABCDE')
A:networkx.algorithms.bipartite.tests.test_project.self.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.self.N->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.Panswer->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.B->networkx.bipartite.complete_bipartite_graph(2, 2)
A:networkx.algorithms.bipartite.tests.test_project.unbrs->set(G[u])
A:networkx.algorithms.bipartite.tests.test_project.vnbrs->set(G[v])
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setUp(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared(self)
networkx.bipartite.tests.test_project.TestBipartiteProject
networkx.bipartite.tests.test_project.TestBipartiteProject.test_directed_path_collaboration_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_directed_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.setUp(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_custom(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_generic_weighted_projected_graph_simple(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_generators.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_generators.G->gnmk_random_graph(n, m, edges)
A:networkx.algorithms.bipartite.tests.test_generators.mG->complete_bipartite_graph(7, 3, create_using=MultiGraph())
A:networkx.algorithms.bipartite.tests.test_generators.GU->project(Graph(G), range(len(aseq)))
A:networkx.algorithms.bipartite.tests.test_generators.GD->project(Graph(G), range(len(aseq), len(aseq) + len(bseq)))
A:networkx.algorithms.bipartite.tests.test_generators.(X, Y)->nx.algorithms.bipartite.sets(G)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_complete_bipartite_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_configuration_model(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_gnmk_random_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_random_graph(self)
networkx.algorithms.bipartite.tests.test_generators.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_complete_bipartite_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_configuration_model(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_gnmk_random_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_random_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_random_graph(self)
networkx.bipartite.tests.test_TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_basic.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_basic.G->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_basic.c->networkx.algorithms.bipartite.color(nx.complete_graph(4))
A:networkx.algorithms.bipartite.tests.test_basic.(X, Y)->networkx.algorithms.bipartite.sets(G)
A:networkx.algorithms.bipartite.tests.test_basic.D->networkx.DiGraph(G.edges())
A:networkx.algorithms.bipartite.tests.test_basic.X->set([1, 3])
A:networkx.algorithms.bipartite.tests.test_basic.Y->set([0, 2, 4])
A:networkx.algorithms.bipartite.tests.test_basic.(u, d)->networkx.algorithms.bipartite.degrees(G, Y, weight='other')
A:networkx.algorithms.bipartite.tests.test_basic.M->networkx.algorithms.bipartite.biadjacency_matrix(G, X, Y, weight='weight')
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_order(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_biadjacency_matrix_weight(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_not_bipartite_color(self)
networkx.bipartite.tests.test_TestBipartiteBasic
networkx.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix_order(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_biadjacency_matrix_weight(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_color(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_degrees(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_density(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_directed(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite_node_set(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_not_bipartite_color(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_edgelist.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_edgelist.self.G->networkx.Graph(name='test')
A:networkx.algorithms.bipartite.tests.test_edgelist.self.DG->networkx.DiGraph(self.G)
A:networkx.algorithms.bipartite.tests.test_edgelist.self.MG->networkx.MultiGraph()
A:networkx.algorithms.bipartite.tests.test_edgelist.bytesIO->io.BytesIO()
A:networkx.algorithms.bipartite.tests.test_edgelist.G->networkx.path_graph(4)
A:networkx.algorithms.bipartite.tests.test_edgelist.fh->io.BytesIO()
A:networkx.algorithms.bipartite.tests.test_edgelist.(fd, fname)->tempfile.mkstemp()
A:networkx.algorithms.bipartite.tests.test_edgelist.H->networkx.algorithms.bipartite.read_edgelist(fname, nodetype=int, create_using=nx.MultiGraph())
A:networkx.algorithms.bipartite.tests.test_edgelist.blurb->chr(1245)
A:networkx.algorithms.bipartite.tests.test_edgelist.H2->networkx.algorithms.bipartite.read_edgelist(fname, nodetype=int, create_using=nx.MultiGraph())
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.setUp(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_attribute_fail(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_digraph_fail(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_graph(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_integers(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_latin1_error(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_unicode(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3(self)
networkx.algorithms.bipartite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4(self)
networkx.bipartite.tests.test_TestEdgelist
networkx.bipartite.tests.test_TestEdgelist.setUp(self)
networkx.bipartite.tests.test_TestEdgelist.test_attribute_fail(self)
networkx.bipartite.tests.test_TestEdgelist.test_digraph_fail(self)
networkx.bipartite.tests.test_TestEdgelist.test_edgelist_graph(self)
networkx.bipartite.tests.test_TestEdgelist.test_edgelist_integers(self)
networkx.bipartite.tests.test_TestEdgelist.test_edgelist_multigraph(self)
networkx.bipartite.tests.test_TestEdgelist.test_latin1(self)
networkx.bipartite.tests.test_TestEdgelist.test_latin1_error(self)
networkx.bipartite.tests.test_TestEdgelist.test_read_edgelist_1(self)
networkx.bipartite.tests.test_TestEdgelist.test_read_edgelist_3(self)
networkx.bipartite.tests.test_TestEdgelist.test_unicode(self)
networkx.bipartite.tests.test_TestEdgelist.test_write_edgelist_1(self)
networkx.bipartite.tests.test_TestEdgelist.test_write_edgelist_2(self)
networkx.bipartite.tests.test_TestEdgelist.test_write_edgelist_3(self)
networkx.bipartite.tests.test_TestEdgelist.test_write_edgelist_4(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_matching.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_matching.self.graph->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_matching.matched_vertices->frozenset(itertools.chain(*M.items()))
A:networkx.algorithms.bipartite.tests.test_matching.matching->maximum_matching(self.graph)
A:networkx.algorithms.bipartite.tests.test_matching.vertex_cover->to_vertex_cover(self.graph, matching)
networkx.algorithms.bipartite.tests.test_matching.TestMatching
networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_match(self,matching)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.check_vertex_cover(self,vertices)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.setup(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_eppstein_matching(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_hopcroft_karp_matching(self)
networkx.algorithms.bipartite.tests.test_matching.TestMatching.test_to_vertex_cover(self)
networkx.bipartite.tests.test_TestMatching
networkx.bipartite.tests.test_TestMatching.check_match(self,matching)
networkx.bipartite.tests.test_TestMatching.check_vertex_cover(self,vertices)
networkx.bipartite.tests.test_TestMatching.setup(self)
networkx.bipartite.tests.test_TestMatching.test_eppstein_matching(self)
networkx.bipartite.tests.test_TestMatching.test_hopcroft_karp_matching(self)
networkx.bipartite.tests.test_TestMatching.test_to_vertex_cover(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/bipartite/tests/test_redundancy.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_redundancy.G->complete_bipartite_graph(1, 2)
A:networkx.algorithms.bipartite.tests.test_redundancy.rc->node_redundancy(G)
A:networkx.algorithms.bipartite.tests.test_redundancy.redundancy->node_redundancy(G)
networkx.algorithms.bipartite.tests.test_redundancy.test_no_redundant_nodes()
networkx.algorithms.bipartite.tests.test_redundancy.test_not_enough_neighbors()
networkx.algorithms.bipartite.tests.test_redundancy.test_redundant_nodes()
networkx.bipartite.tests.test_test_no_redundant_nodes()
networkx.bipartite.tests.test_test_not_enough_neighbors()
networkx.bipartite.tests.test_test_redundant_nodes()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tree/recognition.py----------------------------------------
A:networkx.algorithms.tree.recognition.__author__->'\n'.join(['Ferdinando Papale <ferdinando.papale@gmail.com>', 'chebee7i <chebee7i@gmail.com>'])
networkx.algorithms.tree.recognition.is_arborescence(G)
networkx.algorithms.tree.recognition.is_branching(G)
networkx.algorithms.tree.recognition.is_forest(G)
networkx.algorithms.tree.recognition.is_tree(G)
networkx.tree.is_arborescence(G)
networkx.tree.is_branching(G)
networkx.tree.is_forest(G)
networkx.tree.is_tree(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tree/branchings.py----------------------------------------
A:networkx.algorithms.tree.branchings.KINDS->set(['max', 'min'])
A:networkx.algorithms.tree.branchings.INF->float('inf')
A:networkx.algorithms.tree.branchings.H->self.G_original.__class__()
A:networkx.algorithms.tree.branchings.H.node[u]->G.node[u].copy()
A:networkx.algorithms.tree.branchings.H.graph->G.graph.copy()
A:networkx.algorithms.tree.branchings.attr->random_string()
A:networkx.algorithms.tree.branchings.B->Edmonds(G).find_optimum(attr, default, kind='min', style='arborescence')
A:networkx.algorithms.tree.branchings.uf->networkx.utils.UnionFind()
A:networkx.algorithms.tree.branchings.cls->super(MultiDiGraph_EdgeKey, self)
A:networkx.algorithms.tree.branchings.keys->list(keys)
A:networkx.algorithms.tree.branchings.nodes->iter(list(G.nodes()))
A:networkx.algorithms.tree.branchings.self.GG->MultiDiGraph_EdgeKey()
A:networkx.algorithms.tree.branchings.self.B->MultiDiGraph_EdgeKey()
A:networkx.algorithms.tree.branchings.self.uf->networkx.utils.UnionFind()
A:networkx.algorithms.tree.branchings.D->set([])
A:networkx.algorithms.tree.branchings.v->next(nodes)
A:networkx.algorithms.tree.branchings.(edge, weight)->desired_edge(v)
A:networkx.algorithms.tree.branchings.(Q_nodes, Q_edges)->get_path(B, v, u)
A:networkx.algorithms.tree.branchings.new_node->self.template.format(self.level)
A:networkx.algorithms.tree.branchings.dd->data.copy()
A:networkx.algorithms.tree.branchings.edges->set(self.branchings[self.level].edge_index)
A:networkx.algorithms.tree.branchings.merged_node->self.template.format(self.level)
A:networkx.algorithms.tree.branchings.(isroot, edgekey)->is_root(self.graphs[self.level + 1], merged_node, edges)
A:networkx.algorithms.tree.branchings.ed->Edmonds(G)
A:networkx.algorithms.tree.branchings.maximum_branching.__doc__->docstring_branching.format(kind='maximum', style='branching')
A:networkx.algorithms.tree.branchings.minimum_branching.__doc__->docstring_branching.format(kind='minimum', style='branching')
A:networkx.algorithms.tree.branchings.maximum_spanning_arborescence.__doc__->docstring_arborescence.format(kind='maximum', style='spanning arborescence')
A:networkx.algorithms.tree.branchings.minimum_spanning_arborescence.__doc__->docstring_arborescence.format(kind='minimum', style='spanning arborescence')
networkx.algorithms.tree.branchings.Edmonds(self,G,seed=None)
networkx.algorithms.tree.branchings.Edmonds.__init__(self,G,seed=None)
networkx.algorithms.tree.branchings.Edmonds._init(self,attr,default,kind,style)
networkx.algorithms.tree.branchings.Edmonds.find_optimum(self,attr='weight',default=1,kind='max',style='branching')
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey(self,data=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.__init__(self,data=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edge(self,u,v,key,attr_dict=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edge_with_key(self,key)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_edges_from(self,ebunch)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_node(self,n)
networkx.algorithms.tree.branchings.MultiDiGraph_EdgeKey.remove_nodes_from(self,nbunch)
networkx.algorithms.tree.branchings._max_weight(weight)
networkx.algorithms.tree.branchings._min_weight(weight)
networkx.algorithms.tree.branchings.branching_weight(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.edge_subgraph(G,ebunch)
networkx.algorithms.tree.branchings.get_path(G,u,v)
networkx.algorithms.tree.branchings.greedy_branching(G,attr='weight',default=1,kind='max')
networkx.algorithms.tree.branchings.maximum_branching(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.maximum_spanning_arborescence(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.minimum_branching(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.minimum_spanning_arborescence(G,attr='weight',default=1)
networkx.algorithms.tree.branchings.random_string(L=15,seed=None)
networkx.tree.Edmonds(self,G,seed=None)
networkx.tree.Edmonds._init(self,attr,default,kind,style)
networkx.tree.Edmonds.find_optimum(self,attr='weight',default=1,kind='max',style='branching')
networkx.tree.MultiDiGraph_EdgeKey(self,data=None,**attr)
networkx.tree.MultiDiGraph_EdgeKey.add_edge(self,u,v,key,attr_dict=None,**attr)
networkx.tree.MultiDiGraph_EdgeKey.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.tree.MultiDiGraph_EdgeKey.remove_edge_with_key(self,key)
networkx.tree.MultiDiGraph_EdgeKey.remove_edges_from(self,ebunch)
networkx.tree.MultiDiGraph_EdgeKey.remove_node(self,n)
networkx.tree.MultiDiGraph_EdgeKey.remove_nodes_from(self,nbunch)
networkx.tree._max_weight(weight)
networkx.tree._min_weight(weight)
networkx.tree.branching_weight(G,attr='weight',default=1)
networkx.tree.edge_subgraph(G,ebunch)
networkx.tree.get_path(G,u,v)
networkx.tree.greedy_branching(G,attr='weight',default=1,kind='max')
networkx.tree.maximum_branching(G,attr='weight',default=1)
networkx.tree.maximum_spanning_arborescence(G,attr='weight',default=1)
networkx.tree.minimum_branching(G,attr='weight',default=1)
networkx.tree.minimum_spanning_arborescence(G,attr='weight',default=1)
networkx.tree.random_string(L=15,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tree/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tree/tests/test_recognition.py----------------------------------------
A:networkx.algorithms.tree.tests.test_recognition.self.T1->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.T2->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.T3->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.T5->self.multigraph()
A:networkx.algorithms.tree.tests.test_recognition.self.T6->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.F1->networkx.compose(self.T6, self.T3)
A:networkx.algorithms.tree.tests.test_recognition.self.N4->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.N5->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.N6->self.graph()
A:networkx.algorithms.tree.tests.test_recognition.self.NF1->networkx.compose(self.T6, self.N6)
A:networkx.algorithms.tree.tests.test_recognition.G->networkx.MultiDiGraph()
networkx.algorithms.tree.tests.test_recognition.TestDirectedTreeRecognition(TestTreeRecognition)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition(object)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.setUp(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_not_tree(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_is_tree(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_forest(self)
networkx.algorithms.tree.tests.test_recognition.TestTreeRecognition.test_null_tree(self)
networkx.algorithms.tree.tests.test_recognition.test_dag_nontree()
networkx.algorithms.tree.tests.test_recognition.test_disconnected_graph()
networkx.algorithms.tree.tests.test_recognition.test_emptybranch()
networkx.algorithms.tree.tests.test_recognition.test_multicycle()
networkx.algorithms.tree.tests.test_recognition.test_notarborescence1()
networkx.algorithms.tree.tests.test_recognition.test_notarborescence2()
networkx.algorithms.tree.tests.test_recognition.test_notbranching1()
networkx.algorithms.tree.tests.test_recognition.test_notbranching2()
networkx.algorithms.tree.tests.test_recognition.test_path()
networkx.tree.tests.test_TestDirectedTreeRecognition(TestTreeRecognition)
networkx.tree.tests.test_TestTreeRecognition(object)
networkx.tree.tests.test_TestTreeRecognition.setUp(self)
networkx.tree.tests.test_TestTreeRecognition.test_is_forest(self)
networkx.tree.tests.test_TestTreeRecognition.test_is_not_forest(self)
networkx.tree.tests.test_TestTreeRecognition.test_is_not_tree(self)
networkx.tree.tests.test_TestTreeRecognition.test_is_tree(self)
networkx.tree.tests.test_TestTreeRecognition.test_null_forest(self)
networkx.tree.tests.test_TestTreeRecognition.test_null_tree(self)
networkx.tree.tests.test_test_dag_nontree()
networkx.tree.tests.test_test_disconnected_graph()
networkx.tree.tests.test_test_emptybranch()
networkx.tree.tests.test_test_multicycle()
networkx.tree.tests.test_test_notarborescence1()
networkx.tree.tests.test_test_notarborescence2()
networkx.tree.tests.test_test_notbranching1()
networkx.tree.tests.test_test_notbranching2()
networkx.tree.tests.test_test_path()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/tree/tests/test_branchings.py----------------------------------------
A:networkx.algorithms.tree.tests.test_branchings.G_array->numpy.array([[0, 0, 12, 0, 12, 0, 0, 0, 0], [4, 0, 0, 0, 0, 13, 0, 0, 0], [0, 17, 0, 21, 0, 12, 0, 0, 0], [5, 0, 0, 0, 17, 0, 18, 0, 0], [0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 14, 0, 12], [0, 0, 21, 0, 0, 0, 0, 0, 15], [0, 0, 0, 19, 0, 0, 15, 0, 0], [0, 0, 0, 0, 0, 0, 0, 18, 0]], dtype=int)
A:networkx.algorithms.tree.tests.test_branchings.G->networkx.from_numpy_matrix(-G_array, create_using=G)
A:networkx.algorithms.tree.tests.test_branchings.Garr->numpy.array([[0, 0, 12, 0, 12, 0, 0, 0, 0], [4, 0, 0, 0, 0, 13, 0, 0, 0], [0, 17, 0, 21, 0, 12, 0, 0, 0], [5, 0, 0, 0, 17, 0, 18, 0, 0], [0, 0, 0, 0, 0, 0, 0, 12, 0], [0, 0, 0, 0, 0, 0, 14, 0, 12], [0, 0, 21, 0, 0, 0, 0, 0, 15], [0, 0, 0, 19, 0, 0, 15, 0, 0], [0, 0, 0, 0, 0, 0, 0, 18, 0]], dtype=int).copy()
A:networkx.algorithms.tree.tests.test_branchings.edges->sorted(edges, key=lambda x: x[2])
A:networkx.algorithms.tree.tests.test_branchings.edges1->G1.edges(data=True)
A:networkx.algorithms.tree.tests.test_branchings.edges2->G2.edges(data=True)
A:networkx.algorithms.tree.tests.test_branchings.e1->sorted_edges(G1, attr, default)
A:networkx.algorithms.tree.tests.test_branchings.e2->sorted_edges(G2, attr, default)
A:networkx.algorithms.tree.tests.test_branchings.B->networkx.algorithms.tree.branchings.greedy_branching(G, kind='min')
A:networkx.algorithms.tree.tests.test_branchings.B_->build_branching(edges)
A:networkx.algorithms.tree.tests.test_branchings.x->networkx.algorithms.tree.branchings.minimum_branching(G)
A:networkx.algorithms.tree.tests.test_branchings.x_->build_branching(edges)
networkx.algorithms.tree.tests.test_branchings.G1()
networkx.algorithms.tree.tests.test_branchings.G2()
networkx.algorithms.tree.tests.test_branchings.assert_equal_branchings(G1,G2,attr='weight',default=1)
networkx.algorithms.tree.tests.test_branchings.build_branching(edges)
networkx.algorithms.tree.tests.test_branchings.sorted_edges(G,attr='weight',default=1)
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_maxbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds1_minbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_maxbranch()
networkx.algorithms.tree.tests.test_branchings.test_edmonds2_minarbor()
networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch1()
networkx.algorithms.tree.tests.test_branchings.test_edmonds3_minbranch2()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max1()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max2()
networkx.algorithms.tree.tests.test_branchings.test_greedy_max3()
networkx.algorithms.tree.tests.test_branchings.test_greedy_min()
networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1a()
networkx.algorithms.tree.tests.test_branchings.test_greedy_suboptimal_branching1b()
networkx.algorithms.tree.tests.test_branchings.test_mixed_nodetypes()
networkx.algorithms.tree.tests.test_branchings.test_mst()
networkx.algorithms.tree.tests.test_branchings.test_optimal_arborescence2()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching1()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2a()
networkx.algorithms.tree.tests.test_branchings.test_optimal_branching2b()
networkx.tree.tests.test_G1()
networkx.tree.tests.test_G2()
networkx.tree.tests.test_assert_equal_branchings(G1,G2,attr='weight',default=1)
networkx.tree.tests.test_build_branching(edges)
networkx.tree.tests.test_sorted_edges(G,attr='weight',default=1)
networkx.tree.tests.test_test_edmonds1_maxarbor()
networkx.tree.tests.test_test_edmonds1_maxbranch()
networkx.tree.tests.test_test_edmonds1_minbranch()
networkx.tree.tests.test_test_edmonds2_maxarbor()
networkx.tree.tests.test_test_edmonds2_maxbranch()
networkx.tree.tests.test_test_edmonds2_minarbor()
networkx.tree.tests.test_test_edmonds3_minbranch1()
networkx.tree.tests.test_test_edmonds3_minbranch2()
networkx.tree.tests.test_test_greedy_max1()
networkx.tree.tests.test_test_greedy_max2()
networkx.tree.tests.test_test_greedy_max3()
networkx.tree.tests.test_test_greedy_min()
networkx.tree.tests.test_test_greedy_suboptimal_branching1a()
networkx.tree.tests.test_test_greedy_suboptimal_branching1b()
networkx.tree.tests.test_test_mixed_nodetypes()
networkx.tree.tests.test_test_mst()
networkx.tree.tests.test_test_optimal_arborescence2()
networkx.tree.tests.test_test_optimal_branching1()
networkx.tree.tests.test_test_optimal_branching2a()
networkx.tree.tests.test_test_optimal_branching2b()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/kcomponents.py----------------------------------------
A:networkx.algorithms.approximation.kcomponents.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.approximation.kcomponents.k_components->collections.defaultdict(list)
A:networkx.algorithms.approximation.kcomponents.comp->set(component)
A:networkx.algorithms.approximation.kcomponents.bicomp->set(bicomponent)
A:networkx.algorithms.approximation.kcomponents.g_cnumber->core_number(G)
A:networkx.algorithms.approximation.kcomponents.max_core->max(g_cnumber.values())
A:networkx.algorithms.approximation.kcomponents.C->k_core(G, k, core_number=g_cnumber)
A:networkx.algorithms.approximation.kcomponents.SG->networkx.k_core(G.subgraph(SH), k)
A:networkx.algorithms.approximation.kcomponents.H->_AntiGraph()
A:networkx.algorithms.approximation.kcomponents.K->node_connectivity(SG, u, v, cutoff=k)
A:networkx.algorithms.approximation.kcomponents.SH->_AntiGraph().subgraph(SG)
A:networkx.algorithms.approximation.kcomponents.Gk->networkx.k_core(SG.subgraph(k_nodes), k)
A:networkx.algorithms.approximation.kcomponents.h_cnumber->networkx.core_number(H)
A:networkx.algorithms.approximation.kcomponents.cands->set((n for (n, c) in h_cnumber.items() if c == c_value))
A:networkx.algorithms.approximation.kcomponents.overlap->set.intersection(*[set((x for x in H[n] if x not in cands)) for n in cands])
A:networkx.algorithms.approximation.kcomponents.sh_cnumber->networkx.core_number(SH)
A:networkx.algorithms.approximation.kcomponents.sh_deg->_AntiGraph().subgraph(SG).degree()
A:networkx.algorithms.approximation.kcomponents.min_deg->min(sh_deg.values())
A:networkx.algorithms.approximation.kcomponents.vals->set(measure.values())
networkx.algorithms.approximation.kcomponents._AntiGraph(nx.Graph)
networkx.algorithms.approximation.kcomponents._AntiGraph.__getitem__(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.adjacency_iter(self)
networkx.algorithms.approximation.kcomponents._AntiGraph.degree(self,nbunch=None,weight=None)
networkx.algorithms.approximation.kcomponents._AntiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.neighbors_iter(self,n)
networkx.algorithms.approximation.kcomponents._AntiGraph.single_edge_dict(self)
networkx.algorithms.approximation.kcomponents._cliques_heuristic(G,H,k,min_density)
networkx.algorithms.approximation.kcomponents._same(measure,tol=0)
networkx.algorithms.approximation.kcomponents.k_components(G,min_density=0.95)
networkx.approximation._AntiGraph(nx.Graph)
networkx.approximation._AntiGraph.__getitem__(self,n)
networkx.approximation._AntiGraph.adjacency_iter(self)
networkx.approximation._AntiGraph.degree(self,nbunch=None,weight=None)
networkx.approximation._AntiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.approximation._AntiGraph.neighbors(self,n)
networkx.approximation._AntiGraph.neighbors_iter(self,n)
networkx.approximation._AntiGraph.single_edge_dict(self)
networkx.approximation._cliques_heuristic(G,H,k,min_density)
networkx.approximation._same(measure,tol=0)
networkx.approximation.k_components(G,min_density=0.95)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/vertex_cover.py----------------------------------------
A:networkx.algorithms.approximation.vertex_cover.cost->dict(((n, weight_func(nd)) for (n, nd) in G.nodes(data=True)))
A:networkx.algorithms.approximation.vertex_cover.min_cost->min([cost[u], cost[v]])
networkx.algorithms.approximation.vertex_cover.min_weighted_vertex_cover(G,weight=None)
networkx.approximation.min_weighted_vertex_cover(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/clustering_coefficient.py----------------------------------------
A:networkx.algorithms.approximation.clustering_coefficient.__author__->'\n'.join(['Fred Morstatter <fred.morstatter@asu.edu>', 'Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.approximation.clustering_coefficient.n->len(G)
A:networkx.algorithms.approximation.clustering_coefficient.nodes->G.nodes()
A:networkx.algorithms.approximation.clustering_coefficient.nbrs->list(G[nodes[i]])
A:networkx.algorithms.approximation.clustering_coefficient.(u, v)->random.sample(nbrs, 2)
networkx.algorithms.approximation.clustering_coefficient.average_clustering(G,trials=1000)
networkx.approximation.average_clustering(G,trials=1000)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/ramsey.py----------------------------------------
A:networkx.algorithms.approximation.ramsey.node->next(G.nodes_iter())
A:networkx.algorithms.approximation.ramsey.nbrs->networkx.all_neighbors(G, node)
A:networkx.algorithms.approximation.ramsey.nnbrs->networkx.non_neighbors(G, node)
A:networkx.algorithms.approximation.ramsey.(c_1, i_1)->ramsey_R2(G.subgraph(nbrs))
A:networkx.algorithms.approximation.ramsey.(c_2, i_2)->ramsey_R2(G.subgraph(nnbrs))
networkx.algorithms.approximation.ramsey.ramsey_R2(G)
networkx.approximation.ramsey_R2(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/dominating_set.py----------------------------------------
A:networkx.algorithms.approximation.dominating_set.dom_set->set()
A:networkx.algorithms.approximation.dominating_set.vertices->set(G)
A:networkx.algorithms.approximation.dominating_set.(dom_node, min_set)->min(neighborhoods.items(), key=_cost)
networkx.algorithms.approximation.dominating_set.min_edge_dominating_set(G)
networkx.algorithms.approximation.dominating_set.min_weighted_dominating_set(G,weight=None)
networkx.approximation.min_edge_dominating_set(G)
networkx.approximation.min_weighted_dominating_set(G,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/clique.py----------------------------------------
A:networkx.algorithms.approximation.clique.cgraph->networkx.complement(G)
A:networkx.algorithms.approximation.clique.(iset, _)->clique_removal(cgraph)
A:networkx.algorithms.approximation.clique.graph->G.copy()
A:networkx.algorithms.approximation.clique.(c_i, i_i)->networkx.algorithms.approximation.ramsey.ramsey_R2(graph)
A:networkx.algorithms.approximation.clique.maxiset->max(isets)
networkx.algorithms.approximation.clique.clique_removal(G)
networkx.algorithms.approximation.clique.max_clique(G)
networkx.approximation.clique_removal(G)
networkx.approximation.max_clique(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/independent_set.py----------------------------------------
A:networkx.algorithms.approximation.independent_set.(iset, _)->clique_removal(G)
networkx.algorithms.approximation.independent_set.maximum_independent_set(G)
networkx.approximation.maximum_independent_set(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/matching.py----------------------------------------
networkx.algorithms.approximation.matching.min_maximal_matching(G)
networkx.approximation.min_maximal_matching(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/connectivity.py----------------------------------------
A:networkx.algorithms.approximation.connectivity.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.approximation.connectivity.INF->float('inf')
A:networkx.algorithms.approximation.connectivity.possible->min(G.degree(source), G.degree(target))
A:networkx.algorithms.approximation.connectivity.exclude->set()
A:networkx.algorithms.approximation.connectivity.path->_bidirectional_shortest_path(G, source, target, exclude)
A:networkx.algorithms.approximation.connectivity.(v, minimum_degree)->min(G.degree().items(), key=itemgetter(1))
A:networkx.algorithms.approximation.connectivity.K->min(K, local_node_connectivity(G, x, y, cutoff=K))
A:networkx.algorithms.approximation.connectivity.nbunch->set(nbunch)
A:networkx.algorithms.approximation.connectivity.directed->G.is_directed()
A:networkx.algorithms.approximation.connectivity.k->local_node_connectivity(G, u, v, cutoff=cutoff)
A:networkx.algorithms.approximation.connectivity.results->_bidirectional_pred_succ(G, source, target, exclude)
networkx.algorithms.approximation.connectivity._bidirectional_pred_succ(G,source,target,exclude)
networkx.algorithms.approximation.connectivity._bidirectional_shortest_path(G,source,target,exclude)
networkx.algorithms.approximation.connectivity.all_pairs_node_connectivity(G,nbunch=None,cutoff=None)
networkx.algorithms.approximation.connectivity.local_node_connectivity(G,source,target,cutoff=None)
networkx.algorithms.approximation.connectivity.node_connectivity(G,s=None,t=None)
networkx.approximation._bidirectional_pred_succ(G,source,target,exclude)
networkx.approximation._bidirectional_shortest_path(G,source,target,exclude)
networkx.approximation.all_pairs_node_connectivity(G,nbunch=None,cutoff=None)
networkx.approximation.local_node_connectivity(G,source,target,cutoff=None)
networkx.approximation.node_connectivity(G,s=None,t=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_kcomponents.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_kcomponents.G->networkx.gnp_random_graph(10, 0.4, directed=True)
A:networkx.algorithms.approximation.tests.test_kcomponents.rlabels->networkx.get_node_attributes(G, 'labels')
A:networkx.algorithms.approximation.tests.test_kcomponents.labels->dict(((v, k) for (k, v) in rlabels.items()))
A:networkx.algorithms.approximation.tests.test_kcomponents.P->networkx.petersen_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.K->networkx.node_connectivity(C)
A:networkx.algorithms.approximation.tests.test_kcomponents.result->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.C->networkx.gnp_random_graph(10, 0.4, directed=True).subgraph(component)
A:networkx.algorithms.approximation.tests.test_kcomponents.k_comps->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.k_num->build_k_number_dict(k_comps)
A:networkx.algorithms.approximation.tests.test_kcomponents.kc->k_components(G)
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Gnp->networkx.gnp_random_graph(20, 0.8)
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Anp->_AntiGraph(nx.complement(self.Gnp))
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Gd->networkx.davis_southern_women_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Ad->_AntiGraph(nx.complement(self.Gd))
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Gk->networkx.karate_club_graph()
A:networkx.algorithms.approximation.tests.test_kcomponents.self.Ak->_AntiGraph(nx.complement(self.Gk))
A:networkx.algorithms.approximation.tests.test_kcomponents.n->networkx.gnp_random_graph(10, 0.4, directed=True).order()
A:networkx.algorithms.approximation.tests.test_kcomponents.a_adj->list(A.adjacency_iter())
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.setUp(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_adjacency_iter(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_connected_components(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_core_number(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_degree(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_neighbors(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_node_not_in_graph(self)
networkx.algorithms.approximation.tests.test_kcomponents.TestAntiGraph.test_size(self)
networkx.algorithms.approximation.tests.test_kcomponents._check_connectivity(G)
networkx.algorithms.approximation.tests.test_kcomponents.build_k_number_dict(k_components)
networkx.algorithms.approximation.tests.test_kcomponents.graph_example_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_directed()
networkx.algorithms.approximation.tests.test_kcomponents.test_example_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_example_1_detail_3_and_4()
networkx.algorithms.approximation.tests.test_kcomponents.test_karate_0()
networkx.algorithms.approximation.tests.test_kcomponents.test_karate_1()
networkx.algorithms.approximation.tests.test_kcomponents.test_same()
networkx.algorithms.approximation.tests.test_kcomponents.test_torrents_and_ferraro_graph()
networkx.algorithms.approximation.tests.test_kcomponents.torrents_and_ferraro_graph()
networkx.approximation.tests.test_TestAntiGraph
networkx.approximation.tests.test_TestAntiGraph.setUp(self)
networkx.approximation.tests.test_TestAntiGraph.test_adjacency_iter(self)
networkx.approximation.tests.test_TestAntiGraph.test_connected_components(self)
networkx.approximation.tests.test_TestAntiGraph.test_core_number(self)
networkx.approximation.tests.test_TestAntiGraph.test_degree(self)
networkx.approximation.tests.test_TestAntiGraph.test_degree(self)
networkx.approximation.tests.test_TestAntiGraph.test_neighbors(self)
networkx.approximation.tests.test_TestAntiGraph.test_node_not_in_graph(self)
networkx.approximation.tests.test_TestAntiGraph.test_size(self)
networkx.approximation.tests.test__check_connectivity(G)
networkx.approximation.tests.test_build_k_number_dict(k_components)
networkx.approximation.tests.test_graph_example_1()
networkx.approximation.tests.test_test_directed()
networkx.approximation.tests.test_test_example_1()
networkx.approximation.tests.test_test_example_1_detail_3_and_4()
networkx.approximation.tests.test_test_karate_0()
networkx.approximation.tests.test_test_karate_1()
networkx.approximation.tests.test_test_same()
networkx.approximation.tests.test_test_torrents_and_ferraro_graph()
networkx.approximation.tests.test_torrents_and_ferraro_graph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_clique.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_clique.graph->networkx.complete_graph(30)
A:networkx.algorithms.approximation.tests.test_clique.(i, cs)->networkx.algorithms.approximation.clique_removal(graph)
A:networkx.algorithms.approximation.tests.test_clique.idens->networkx.density(graph.subgraph(i))
A:networkx.algorithms.approximation.tests.test_clique.cdens->networkx.density(graph.subgraph(clique))
A:networkx.algorithms.approximation.tests.test_clique.G->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_clique.mc->networkx.algorithms.approximation.max_clique(graph)
networkx.algorithms.approximation.tests.test_clique.test_clique_removal()
networkx.algorithms.approximation.tests.test_clique.test_max_clique()
networkx.algorithms.approximation.tests.test_clique.test_max_clique_smoke()
networkx.approximation.tests.test_test_clique_removal()
networkx.approximation.tests.test_test_max_clique()
networkx.approximation.tests.test_test_max_clique_smoke()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_vertex_cover.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_vertex_cover.sg->networkx.star_graph(size)
A:networkx.algorithms.approximation.tests.test_vertex_cover.cover->networkx.algorithms.approximation.min_weighted_vertex_cover(wg, weight='weight')
A:networkx.algorithms.approximation.tests.test_vertex_cover.wg->networkx.Graph()
A:networkx.algorithms.approximation.tests.test_vertex_cover.csum->sum((wg.node[node]['weight'] for node in cover))
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC
networkx.algorithms.approximation.tests.test_vertex_cover.TestMWVC.test_min_vertex_cover(self)
networkx.approximation.tests.test_TestMWVC
networkx.approximation.tests.test_TestMWVC.test_min_vertex_cover(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_dominating_set.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_dominating_set.graph->networkx.complete_graph(10)
A:networkx.algorithms.approximation.tests.test_dominating_set.vertices->set([1, 2, 3, 4, 5, 6])
A:networkx.algorithms.approximation.tests.test_dominating_set.dom_set->min_edge_dominating_set(graph)
A:networkx.algorithms.approximation.tests.test_dominating_set.neighbors->set(graph.neighbors(vertex))
A:networkx.algorithms.approximation.tests.test_dominating_set.G->networkx.relabel_nodes(G, {0: 9, 9: 0})
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_edge_dominating_set(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_min_weighted_dominating_set(self)
networkx.algorithms.approximation.tests.test_dominating_set.TestMinWeightDominatingSet.test_star_graph(self)
networkx.approximation.tests.test_TestMinWeightDominatingSet
networkx.approximation.tests.test_TestMinWeightDominatingSet.test_min_edge_dominating_set(self)
networkx.approximation.tests.test_TestMinWeightDominatingSet.test_min_weighted_dominating_set(self)
networkx.approximation.tests.test_TestMinWeightDominatingSet.test_star_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_matching.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_matching.G->networkx.Graph()
networkx.algorithms.approximation.tests.test_matching.test_min_maximal_matching()
networkx.approximation.tests.test_test_min_maximal_matching()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_ramsey.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_ramsey.graph->networkx.barbell_graph(10, 5, nx.Graph())
A:networkx.algorithms.approximation.tests.test_ramsey.(c, i)->networkx.algorithms.approximation.ramsey_R2(graph)
A:networkx.algorithms.approximation.tests.test_ramsey.cdens->networkx.density(graph.subgraph(c))
A:networkx.algorithms.approximation.tests.test_ramsey.idens->networkx.density(graph.subgraph(i))
networkx.algorithms.approximation.tests.test_ramsey.test_ramsey()
networkx.approximation.tests.test_test_ramsey()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_connectivity.G->networkx.complete_graph(5)
A:networkx.algorithms.approximation.tests.test_connectivity.D->networkx.cycle_graph(10).to_directed()
A:networkx.algorithms.approximation.tests.test_connectivity.self.path->networkx.path_graph(7)
A:networkx.algorithms.approximation.tests.test_connectivity.self.directed_path->networkx.path_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.approximation.tests.test_connectivity.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.approximation.tests.test_connectivity.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.approximation.tests.test_connectivity.self.gnp->networkx.gnp_random_graph(30, 0.1)
A:networkx.algorithms.approximation.tests.test_connectivity.self.directed_gnp->networkx.gnp_random_graph(30, 0.1, directed=True)
A:networkx.algorithms.approximation.tests.test_connectivity.self.K20->networkx.complete_graph(20)
A:networkx.algorithms.approximation.tests.test_connectivity.self.K10->networkx.complete_graph(10)
A:networkx.algorithms.approximation.tests.test_connectivity.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.approximation.tests.test_connectivity.K_undir->networkx.algorithms.approximation.all_pairs_node_connectivity(self.path)
A:networkx.algorithms.approximation.tests.test_connectivity.K_dir->networkx.algorithms.approximation.all_pairs_node_connectivity(self.directed_path)
A:networkx.algorithms.approximation.tests.test_connectivity.K->networkx.algorithms.approximation.all_pairs_node_connectivity(G)
A:networkx.algorithms.approximation.tests.test_connectivity.paths->networkx.algorithms.approximation.all_pairs_node_connectivity(G, cutoff=mp)
A:networkx.algorithms.approximation.tests.test_connectivity.C->networkx.algorithms.approximation.all_pairs_node_connectivity(G, nbunch=nbunch)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.setUp(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_complete(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cutoff(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_cycles(self)
networkx.algorithms.approximation.tests.test_connectivity.TestAllPairsNodeConnectivityApprox.test_paths(self)
networkx.algorithms.approximation.tests.test_connectivity.test_complete_graphs()
networkx.algorithms.approximation.tests.test_connectivity.test_directed_node_connectivity()
networkx.algorithms.approximation.tests.test_connectivity.test_dodecahedral()
networkx.algorithms.approximation.tests.test_connectivity.test_empty_graphs()
networkx.algorithms.approximation.tests.test_connectivity.test_global_node_connectivity()
networkx.algorithms.approximation.tests.test_connectivity.test_missing_source()
networkx.algorithms.approximation.tests.test_connectivity.test_missing_target()
networkx.algorithms.approximation.tests.test_connectivity.test_octahedral()
networkx.algorithms.approximation.tests.test_connectivity.test_only_source()
networkx.algorithms.approximation.tests.test_connectivity.test_only_target()
networkx.algorithms.approximation.tests.test_connectivity.test_petersen()
networkx.algorithms.approximation.tests.test_connectivity.test_source_equals_target()
networkx.algorithms.approximation.tests.test_connectivity.test_white_harary1()
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.setUp(self)
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_all_pairs_connectivity_nbunch(self)
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_complete(self)
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_cutoff(self)
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_cycles(self)
networkx.approximation.tests.test_TestAllPairsNodeConnectivityApprox.test_paths(self)
networkx.approximation.tests.test_test_complete_graphs()
networkx.approximation.tests.test_test_directed_node_connectivity()
networkx.approximation.tests.test_test_dodecahedral()
networkx.approximation.tests.test_test_empty_graphs()
networkx.approximation.tests.test_test_global_node_connectivity()
networkx.approximation.tests.test_test_missing_source()
networkx.approximation.tests.test_test_missing_target()
networkx.approximation.tests.test_test_octahedral()
networkx.approximation.tests.test_test_only_source()
networkx.approximation.tests.test_test_only_target()
networkx.approximation.tests.test_test_petersen()
networkx.approximation.tests.test_test_source_equals_target()
networkx.approximation.tests.test_test_white_harary1()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_approx_clust_coeff.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_approx_clust_coeff.G->networkx.complete_graph(7)
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_complete()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_dodecahedral()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_empty()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_petersen()
networkx.algorithms.approximation.tests.test_approx_clust_coeff.test_tetrahedral()
networkx.approximation.tests.test_approx_clust_coeff.test_complete()
networkx.approximation.tests.test_approx_clust_coeff.test_dodecahedral()
networkx.approximation.tests.test_approx_clust_coeff.test_empty()
networkx.approximation.tests.test_approx_clust_coeff.test_petersen()
networkx.approximation.tests.test_approx_clust_coeff.test_tetrahedral()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/approximation/tests/test_independent_set.py----------------------------------------
A:networkx.algorithms.approximation.tests.test_independent_set.G->networkx.Graph()
networkx.algorithms.approximation.tests.test_independent_set.test_independent_set()
networkx.approximation.tests.test_test_independent_set()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/chordal/chordal_alg.py----------------------------------------
A:networkx.algorithms.chordal.chordal_alg.__authors__->'\n'.join(['Jesus Cerquides <cerquide@iiia.csic.es>'])
A:networkx.algorithms.chordal.chordal_alg.H->networkx.Graph(G)
A:networkx.algorithms.chordal.chordal_alg.I->set()
A:networkx.algorithms.chordal.chordal_alg.triplet->_find_chordality_breaker(H, s, treewidth_bound)
A:networkx.algorithms.chordal.chordal_alg.cliques->set()
A:networkx.algorithms.chordal.chordal_alg.max_clique->max(max_clique, len(clique))
A:networkx.algorithms.chordal.chordal_alg.n->G.number_of_nodes()
A:networkx.algorithms.chordal.chordal_alg.e->G.number_of_edges()
A:networkx.algorithms.chordal.chordal_alg.nodes->set(G)
A:networkx.algorithms.chordal.chordal_alg.number->len([y for y in G[x] if y in wanna_connect])
A:networkx.algorithms.chordal.chordal_alg.unnumbered->set(G.nodes())
A:networkx.algorithms.chordal.chordal_alg.s->random.choice(list(unnumbered))
A:networkx.algorithms.chordal.chordal_alg.numbered->set([v])
A:networkx.algorithms.chordal.chordal_alg.v->_max_cardinality_node(G, unnumbered, numbered)
A:networkx.algorithms.chordal.chordal_alg.sg->G.subgraph(clique_wanna_be)
A:networkx.algorithms.chordal.chordal_alg.current_treewidth->max(current_treewidth, len(clique_wanna_be))
A:networkx.algorithms.chordal.chordal_alg.(u, w)->_find_missing_edge(sg)
A:networkx.algorithms.chordal.chordal_alg.x->frozenset(G.nodes())
A:networkx.algorithms.chordal.chordal_alg.clique_wanna_be->set([v])
networkx.NetworkXTreewidthBoundExceeded(nx.NetworkXException)
networkx._connected_chordal_graph_cliques(G)
networkx._find_chordality_breaker(G,s=None,treewidth_bound=sys.maxsize)
networkx._find_missing_edge(G)
networkx._is_complete_graph(G)
networkx._max_cardinality_node(G,choices,wanna_connect)
networkx.algorithms.chordal.chordal_alg.NetworkXTreewidthBoundExceeded(nx.NetworkXException)
networkx.algorithms.chordal.chordal_alg._connected_chordal_graph_cliques(G)
networkx.algorithms.chordal.chordal_alg._find_chordality_breaker(G,s=None,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal.chordal_alg._find_missing_edge(G)
networkx.algorithms.chordal.chordal_alg._is_complete_graph(G)
networkx.algorithms.chordal.chordal_alg._max_cardinality_node(G,choices,wanna_connect)
networkx.algorithms.chordal.chordal_alg.chordal_graph_cliques(G)
networkx.algorithms.chordal.chordal_alg.chordal_graph_treewidth(G)
networkx.algorithms.chordal.chordal_alg.find_induced_nodes(G,s,t,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal.chordal_alg.is_chordal(G)
networkx.chordal_graph_cliques(G)
networkx.chordal_graph_treewidth(G)
networkx.find_induced_nodes(G,s,t,treewidth_bound=sys.maxsize)
networkx.is_chordal(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/chordal/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/chordal/tests/test_chordal.py----------------------------------------
A:networkx.algorithms.chordal.tests.test_chordal.connected_chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.non_chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.G->networkx.path_graph(10)
A:networkx.algorithms.chordal.tests.test_chordal.I->networkx.find_induced_nodes(self.chordal_G, 1, 6)
A:networkx.algorithms.chordal.tests.test_chordal.cliques->set([frozenset([1, 2, 3]), frozenset([2, 3, 4]), frozenset([3, 4, 5, 6])])
A:networkx.algorithms.chordal.tests.test_chordal.cliqueset->networkx.chordal_graph_cliques(G)
networkx.algorithms.chordal.tests.test_chordal.TestMCS
networkx.algorithms.chordal.tests.test_chordal.TestMCS.setUp(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques_path(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_induced_nodes(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_is_chordal(self)
networkx.tests.test_TestMCS
networkx.tests.test_TestMCS.setUp(self)
networkx.tests.test_TestMCS.test_chordal_find_cliques(self)
networkx.tests.test_TestMCS.test_chordal_find_cliquesCC(self)
networkx.tests.test_TestMCS.test_chordal_find_cliques_path(self)
networkx.tests.test_TestMCS.test_induced_nodes(self)
networkx.tests.test_TestMCS.test_is_chordal(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/coloring/greedy_coloring.py----------------------------------------
A:networkx.algorithms.coloring.greedy_coloring.__author__->'\n'.join(['Christian Olsson <chro@itu.dk>', 'Jan Aagaard Meier <jmei@itu.dk>', 'Henrik Haugbølle <hhau@itu.dk>'])
A:networkx.algorithms.coloring.greedy_coloring.nodes->strategy(G, colors)
A:networkx.algorithms.coloring.greedy_coloring.len_g->len(G)
A:networkx.algorithms.coloring.greedy_coloring.available_g->G.copy().copy()
A:networkx.algorithms.coloring.greedy_coloring.node->max_degree_node(G)
A:networkx.algorithms.coloring.greedy_coloring.uncolored_g->G.copy()
A:networkx.algorithms.coloring.greedy_coloring.tree->networkx.dfs_edges(component_graph, source)
A:networkx.algorithms.coloring.greedy_coloring.distinct_colors[node]->set()
A:networkx.algorithms.coloring.greedy_coloring.saturation->len(distinct)
A:networkx.algorithms.coloring.greedy_coloring.degree->G.degree(node)
A:networkx.algorithms.coloring.greedy_coloring.neighbour_colors->set()
networkx.algorithms.coloring.greedy_coloring.greedy_color(G,strategy=strategy_largest_first,interchange=False)
networkx.algorithms.coloring.greedy_coloring.max_degree_node(G)
networkx.algorithms.coloring.greedy_coloring.min_degree_node(G)
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential(G,colors,traversal='bfs')
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_bfs(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_connected_sequential_dfs(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_independent_set(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_largest_first(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_random_sequential(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_saturation_largest_first(G,colors)
networkx.algorithms.coloring.greedy_coloring.strategy_smallest_last(G,colors)
networkx.greedy_color(G,strategy=strategy_largest_first,interchange=False)
networkx.max_degree_node(G)
networkx.min_degree_node(G)
networkx.strategy_connected_sequential(G,colors,traversal='bfs')
networkx.strategy_connected_sequential_bfs(G,colors)
networkx.strategy_connected_sequential_dfs(G,colors)
networkx.strategy_independent_set(G,colors)
networkx.strategy_largest_first(G,colors)
networkx.strategy_random_sequential(G,colors)
networkx.strategy_saturation_largest_first(G,colors)
networkx.strategy_smallest_last(G,colors)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/coloring/greedy_coloring_with_interchange.py----------------------------------------
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.n->len(original_graph)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.adj_entry1->AdjEntry(node2)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.adj_entry2->AdjEntry(node1)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.neighbors->graph[node].iter_neighbors()
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.k1->next(itertools.dropwhile(lambda x: x in col_used, itertools.count()))
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.visited->set(col1_adj)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.neighbor_cols->graph[search_node].iter_neighbors_color(col_opp)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.frontier->list(col1_adj)
A:networkx.algorithms.coloring.greedy_coloring_with_interchange.k->max(k1, k)
networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry(self,node_id)
networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__init__(self,node_id)
networkx.algorithms.coloring.greedy_coloring_with_interchange.AdjEntry.__repr__(self)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node(self,node_id,n)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__init__(self,node_id,n)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.__repr__(self)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.assign_color(self,adj_entry,color)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.clear_color(self,adj_entry,color)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors(self)
networkx.algorithms.coloring.greedy_coloring_with_interchange.Node.iter_neighbors_color(self,color)
networkx.algorithms.coloring.greedy_coloring_with_interchange.greedy_coloring_with_interchange(original_graph,nodes)
networkx.greedy_coloring_with_interchange.AdjEntry(self,node_id)
networkx.greedy_coloring_with_interchange.AdjEntry.__repr__(self)
networkx.greedy_coloring_with_interchange.Node(self,node_id,n)
networkx.greedy_coloring_with_interchange.Node.__repr__(self)
networkx.greedy_coloring_with_interchange.Node.assign_color(self,adj_entry,color)
networkx.greedy_coloring_with_interchange.Node.clear_color(self,adj_entry,color)
networkx.greedy_coloring_with_interchange.Node.iter_neighbors(self)
networkx.greedy_coloring_with_interchange.Node.iter_neighbors_color(self,color)
networkx.greedy_coloring_with_interchange.greedy_coloring_with_interchange(original_graph,nodes)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/coloring/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/coloring/tests/test_coloring.py----------------------------------------
A:networkx.algorithms.coloring.tests.test_coloring.__author__->'\n'.join(['Christian Olsson <chro@itu.dk>', 'Jan Aagaard Meier <jmei@itu.dk>', 'Henrik Haugbølle <hhau@itu.dk>'])
A:networkx.algorithms.coloring.tests.test_coloring.graph->networkx.Graph()
A:networkx.algorithms.coloring.tests.test_coloring.coloring->dict_to_sets(coloring)
networkx.algorithms.coloring.tests.test_coloring.TestColoring
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_dfs_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_dfs_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_dfs_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_dfs_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_dfs_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_disconnected(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_cs_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_csi_csshc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gis_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_gisi_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lf_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lfi_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lfi_lfhc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lfi_lfshc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_lfi_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rs_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rs_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rs_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rs_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rs_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_rsshc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_rsi_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sl_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_empty(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_oneNode(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_threeNodeClique(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slf_twoNodes(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_slfi_slfshc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sli_hc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sli_shc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sli_slhc(self)
networkx.algorithms.coloring.tests.test_coloring.TestColoring.test_sli_slshc(self)
networkx.algorithms.coloring.tests.test_coloring.cs_shc()
networkx.algorithms.coloring.tests.test_coloring.dict_to_sets(colors)
networkx.algorithms.coloring.tests.test_coloring.emptyGraph()
networkx.algorithms.coloring.tests.test_coloring.gis_hc()
networkx.algorithms.coloring.tests.test_coloring.gis_shc()
networkx.algorithms.coloring.tests.test_coloring.lf_hc()
networkx.algorithms.coloring.tests.test_coloring.lf_shc()
networkx.algorithms.coloring.tests.test_coloring.lfi_hc()
networkx.algorithms.coloring.tests.test_coloring.lfi_shc()
networkx.algorithms.coloring.tests.test_coloring.oneNodeGraph()
networkx.algorithms.coloring.tests.test_coloring.rs_shc()
networkx.algorithms.coloring.tests.test_coloring.rsi_shc()
networkx.algorithms.coloring.tests.test_coloring.sl_hc()
networkx.algorithms.coloring.tests.test_coloring.sl_shc()
networkx.algorithms.coloring.tests.test_coloring.slf_hc()
networkx.algorithms.coloring.tests.test_coloring.slf_shc()
networkx.algorithms.coloring.tests.test_coloring.sli_hc()
networkx.algorithms.coloring.tests.test_coloring.sli_shc()
networkx.algorithms.coloring.tests.test_coloring.threeNodeClique()
networkx.algorithms.coloring.tests.test_coloring.twoNodesGraph()
networkx.algorithms.coloring.tests.test_coloring.verify_coloring(graph,coloring)
networkx.algorithms.coloring.tests.test_coloring.verify_length(coloring,expected)
networkx.tests.test_TestColoring
networkx.tests.test_TestColoring.test_cs_dfs_empty(self)
networkx.tests.test_TestColoring.test_cs_dfs_oneNode(self)
networkx.tests.test_TestColoring.test_cs_dfs_shc(self)
networkx.tests.test_TestColoring.test_cs_dfs_threeNodeClique(self)
networkx.tests.test_TestColoring.test_cs_dfs_twoNodes(self)
networkx.tests.test_TestColoring.test_cs_disconnected(self)
networkx.tests.test_TestColoring.test_cs_empty(self)
networkx.tests.test_TestColoring.test_cs_oneNode(self)
networkx.tests.test_TestColoring.test_cs_shc(self)
networkx.tests.test_TestColoring.test_cs_threeNodeClique(self)
networkx.tests.test_TestColoring.test_cs_twoNodes(self)
networkx.tests.test_TestColoring.test_csi_csshc(self)
networkx.tests.test_TestColoring.test_gis_empty(self)
networkx.tests.test_TestColoring.test_gis_hc(self)
networkx.tests.test_TestColoring.test_gis_oneNode(self)
networkx.tests.test_TestColoring.test_gis_shc(self)
networkx.tests.test_TestColoring.test_gis_threeNodeClique(self)
networkx.tests.test_TestColoring.test_gis_twoNodes(self)
networkx.tests.test_TestColoring.test_gisi_oneNode(self)
networkx.tests.test_TestColoring.test_lf_empty(self)
networkx.tests.test_TestColoring.test_lf_hc(self)
networkx.tests.test_TestColoring.test_lf_oneNode(self)
networkx.tests.test_TestColoring.test_lf_shc(self)
networkx.tests.test_TestColoring.test_lf_threeNodeClique(self)
networkx.tests.test_TestColoring.test_lf_twoNodes(self)
networkx.tests.test_TestColoring.test_lfi_hc(self)
networkx.tests.test_TestColoring.test_lfi_lfhc(self)
networkx.tests.test_TestColoring.test_lfi_lfshc(self)
networkx.tests.test_TestColoring.test_lfi_shc(self)
networkx.tests.test_TestColoring.test_rs_empty(self)
networkx.tests.test_TestColoring.test_rs_oneNode(self)
networkx.tests.test_TestColoring.test_rs_shc(self)
networkx.tests.test_TestColoring.test_rs_threeNodeClique(self)
networkx.tests.test_TestColoring.test_rs_twoNodes(self)
networkx.tests.test_TestColoring.test_rsi_empty(self)
networkx.tests.test_TestColoring.test_rsi_oneNode(self)
networkx.tests.test_TestColoring.test_rsi_rsshc(self)
networkx.tests.test_TestColoring.test_rsi_shc(self)
networkx.tests.test_TestColoring.test_rsi_threeNodeClique(self)
networkx.tests.test_TestColoring.test_rsi_twoNodes(self)
networkx.tests.test_TestColoring.test_sl_empty(self)
networkx.tests.test_TestColoring.test_sl_hc(self)
networkx.tests.test_TestColoring.test_sl_oneNode(self)
networkx.tests.test_TestColoring.test_sl_shc(self)
networkx.tests.test_TestColoring.test_sl_threeNodeClique(self)
networkx.tests.test_TestColoring.test_sl_twoNodes(self)
networkx.tests.test_TestColoring.test_slf_empty(self)
networkx.tests.test_TestColoring.test_slf_hc(self)
networkx.tests.test_TestColoring.test_slf_oneNode(self)
networkx.tests.test_TestColoring.test_slf_shc(self)
networkx.tests.test_TestColoring.test_slf_threeNodeClique(self)
networkx.tests.test_TestColoring.test_slf_twoNodes(self)
networkx.tests.test_TestColoring.test_slfi_slfshc(self)
networkx.tests.test_TestColoring.test_sli_hc(self)
networkx.tests.test_TestColoring.test_sli_shc(self)
networkx.tests.test_TestColoring.test_sli_slhc(self)
networkx.tests.test_TestColoring.test_sli_slshc(self)
networkx.tests.test_cs_shc()
networkx.tests.test_dict_to_sets(colors)
networkx.tests.test_emptyGraph()
networkx.tests.test_gis_hc()
networkx.tests.test_gis_shc()
networkx.tests.test_lf_hc()
networkx.tests.test_lf_shc()
networkx.tests.test_lfi_hc()
networkx.tests.test_lfi_shc()
networkx.tests.test_oneNodeGraph()
networkx.tests.test_rs_shc()
networkx.tests.test_rsi_shc()
networkx.tests.test_sl_hc()
networkx.tests.test_sl_shc()
networkx.tests.test_slf_hc()
networkx.tests.test_slf_shc()
networkx.tests.test_sli_hc()
networkx.tests.test_sli_shc()
networkx.tests.test_threeNodeClique()
networkx.tests.test_twoNodesGraph()
networkx.tests.test_verify_coloring(graph,coloring)
networkx.tests.test_verify_length(coloring,expected)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/product.py----------------------------------------
A:networkx.algorithms.operators.product.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.algorithms.operators.product.GH->_init_product_graph(G, H)
A:networkx.algorithms.operators.product.H->networkx.Graph()
networkx._dict_product(d1,d2)
networkx._directed_edges_cross_edges(G,H)
networkx._edges_cross_nodes(G,H)
networkx._edges_cross_nodes_and_nodes(G,H)
networkx._init_product_graph(G,H)
networkx._node_product(G,H)
networkx._nodes_cross_edges(G,H)
networkx._undirected_edges_cross_edges(G,H)
networkx.algorithms.operators.product._dict_product(d1,d2)
networkx.algorithms.operators.product._directed_edges_cross_edges(G,H)
networkx.algorithms.operators.product._edges_cross_nodes(G,H)
networkx.algorithms.operators.product._edges_cross_nodes_and_nodes(G,H)
networkx.algorithms.operators.product._init_product_graph(G,H)
networkx.algorithms.operators.product._node_product(G,H)
networkx.algorithms.operators.product._nodes_cross_edges(G,H)
networkx.algorithms.operators.product._undirected_edges_cross_edges(G,H)
networkx.algorithms.operators.product.cartesian_product(G,H)
networkx.algorithms.operators.product.lexicographic_product(G,H)
networkx.algorithms.operators.product.power(G,k)
networkx.algorithms.operators.product.strong_product(G,H)
networkx.algorithms.operators.product.tensor_product(G,H)
networkx.cartesian_product(G,H)
networkx.lexicographic_product(G,H)
networkx.power(G,k)
networkx.strong_product(G,H)
networkx.tensor_product(G,H)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/all.py----------------------------------------
A:networkx.algorithms.operators.all.__author__->'\n'.join(['Robert King <kingrobertking@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.operators.all.graphs_names->zip_longest(graphs, rename)
A:networkx.algorithms.operators.all.(U, gname)->next(graphs_names)
A:networkx.algorithms.operators.all.U->networkx.disjoint_union(U, H)
A:networkx.algorithms.operators.all.graphs->iter(graphs)
A:networkx.algorithms.operators.all.C->networkx.compose(C, H, name=name)
A:networkx.algorithms.operators.all.R->networkx.intersection(R, H)
networkx.algorithms.operators.all.compose_all(graphs,name=None)
networkx.algorithms.operators.all.disjoint_union_all(graphs)
networkx.algorithms.operators.all.intersection_all(graphs)
networkx.algorithms.operators.all.union_all(graphs,rename=(None,),name=None)
networkx.compose_all(graphs,name=None)
networkx.disjoint_union_all(graphs)
networkx.intersection_all(graphs)
networkx.union_all(graphs,rename=(None,),name=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/unary.py----------------------------------------
A:networkx.algorithms.operators.unary.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.operators.unary.R->G.__class__()
networkx.algorithms.operators.unary.complement(G,name=None)
networkx.algorithms.operators.unary.reverse(G,copy=True)
networkx.complement(G,name=None)
networkx.reverse(G,copy=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/binary.py----------------------------------------
A:networkx.algorithms.operators.binary.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.operators.binary.R->add_prefix(G, rename[0]).__class__()
A:networkx.algorithms.operators.binary.G->add_prefix(G, rename[0])
A:networkx.algorithms.operators.binary.H->add_prefix(H, rename[1])
A:networkx.algorithms.operators.binary.G_edges->add_prefix(G, rename[0]).edges_iter(data=True)
A:networkx.algorithms.operators.binary.H_edges->add_prefix(H, rename[1]).edges_iter(data=True)
A:networkx.algorithms.operators.binary.R1->networkx.convert_node_labels_to_integers(G)
A:networkx.algorithms.operators.binary.R2->networkx.convert_node_labels_to_integers(H, first_label=len(R1))
A:networkx.algorithms.operators.binary.edges->add_prefix(H, rename[1]).edges_iter()
A:networkx.algorithms.operators.binary.gnodes->set(G)
A:networkx.algorithms.operators.binary.hnodes->set(H)
A:networkx.algorithms.operators.binary.nodes->set(G).symmetric_difference(hnodes)
networkx.algorithms.operators.binary.compose(G,H,name=None)
networkx.algorithms.operators.binary.difference(G,H)
networkx.algorithms.operators.binary.disjoint_union(G,H)
networkx.algorithms.operators.binary.intersection(G,H)
networkx.algorithms.operators.binary.symmetric_difference(G,H)
networkx.algorithms.operators.binary.union(G,H,rename=(None,None),name=None)
networkx.compose(G,H,name=None)
networkx.difference(G,H)
networkx.disjoint_union(G,H)
networkx.intersection(G,H)
networkx.symmetric_difference(G,H)
networkx.union(G,H,rename=(None,None),name=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/tests/test_binary.py----------------------------------------
A:networkx.algorithms.operators.tests.test_binary.g->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.h->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.gh->networkx.symmetric_difference(g, h)
A:networkx.algorithms.operators.tests.test_binary.G->networkx.Graph()
A:networkx.algorithms.operators.tests.test_binary.H->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_binary.I->networkx.intersection(G, H)
A:networkx.algorithms.operators.tests.test_binary.D->networkx.difference(H, G)
A:networkx.algorithms.operators.tests.test_binary.GH->networkx.compose(G, H)
A:networkx.algorithms.operators.tests.test_binary.K3->complete_graph(3)
A:networkx.algorithms.operators.tests.test_binary.P3->path_graph(3)
A:networkx.algorithms.operators.tests.test_binary.G1->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_binary.G2->union(G2, G2, rename=('', 'copy'))
A:networkx.algorithms.operators.tests.test_binary.H1->union(H, G1, rename=('H', 'G1'))
A:networkx.algorithms.operators.tests.test_binary.H2->union(H, G2, rename=('H', ''))
A:networkx.algorithms.operators.tests.test_binary.E->disjoint_union(G1, G2)
A:networkx.algorithms.operators.tests.test_binary.U->networkx.compose(G, H)
networkx.algorithms.operators.tests.test_binary.test_compose_multigraph()
networkx.algorithms.operators.tests.test_binary.test_difference()
networkx.algorithms.operators.tests.test_binary.test_difference2()
networkx.algorithms.operators.tests.test_binary.test_difference_attributes()
networkx.algorithms.operators.tests.test_binary.test_difference_multigraph_attributes()
networkx.algorithms.operators.tests.test_binary.test_difference_raise()
networkx.algorithms.operators.tests.test_binary.test_disjoint_union_multigraph()
networkx.algorithms.operators.tests.test_binary.test_intersection()
networkx.algorithms.operators.tests.test_binary.test_intersection_attributes()
networkx.algorithms.operators.tests.test_binary.test_intersection_multigraph_attributes()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_compose()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_difference()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_disjoint_union()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_intersection()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_symmetric_difference()
networkx.algorithms.operators.tests.test_binary.test_mixed_type_union()
networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_multigraph()
networkx.algorithms.operators.tests.test_binary.test_symmetric_difference_raise()
networkx.algorithms.operators.tests.test_binary.test_union_and_compose()
networkx.algorithms.operators.tests.test_binary.test_union_attributes()
networkx.algorithms.operators.tests.test_binary.test_union_multigraph()
networkx.tests.test_test_compose_multigraph()
networkx.tests.test_test_difference()
networkx.tests.test_test_difference2()
networkx.tests.test_test_difference_attributes()
networkx.tests.test_test_difference_multigraph_attributes()
networkx.tests.test_test_difference_raise()
networkx.tests.test_test_disjoint_union_multigraph()
networkx.tests.test_test_intersection()
networkx.tests.test_test_intersection_attributes()
networkx.tests.test_test_intersection_multigraph_attributes()
networkx.tests.test_test_mixed_type_compose()
networkx.tests.test_test_mixed_type_difference()
networkx.tests.test_test_mixed_type_disjoint_union()
networkx.tests.test_test_mixed_type_intersection()
networkx.tests.test_test_mixed_type_symmetric_difference()
networkx.tests.test_test_mixed_type_union()
networkx.tests.test_test_symmetric_difference_multigraph()
networkx.tests.test_test_symmetric_difference_raise()
networkx.tests.test_test_union_and_compose()
networkx.tests.test_test_union_attributes()
networkx.tests.test_test_union_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/tests/test_product.py----------------------------------------
A:networkx.algorithms.operators.tests.test_product.P->strong_product(nx.DiGraph(), nx.Graph())
A:networkx.algorithms.operators.tests.test_product.null->networkx.null_graph()
A:networkx.algorithms.operators.tests.test_product.empty10->networkx.empty_graph(10)
A:networkx.algorithms.operators.tests.test_product.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_product.K10->networkx.complete_graph(10)
A:networkx.algorithms.operators.tests.test_product.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_product.P10->networkx.path_graph(10)
A:networkx.algorithms.operators.tests.test_product.G->networkx.cycle_graph(7)
A:networkx.algorithms.operators.tests.test_product.P5->networkx.path_graph(5)
A:networkx.algorithms.operators.tests.test_product.K5->networkx.complete_graph(5)
A:networkx.algorithms.operators.tests.test_product.K2->networkx.complete_graph(2)
A:networkx.algorithms.operators.tests.test_product.H->networkx.power(G, 2)
A:networkx.algorithms.operators.tests.test_product.GH->strong_product(G, H)
A:networkx.algorithms.operators.tests.test_product.P2->networkx.path_graph(2)
networkx.algorithms.operators.tests.test_product.test_cartesian_product_classic()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_multigraph()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_null()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_raises()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_random()
networkx.algorithms.operators.tests.test_product.test_cartesian_product_size()
networkx.algorithms.operators.tests.test_product.test_graph_power()
networkx.algorithms.operators.tests.test_product.test_graph_power_raises()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_combinations()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_null()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_raises()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_random()
networkx.algorithms.operators.tests.test_product.test_lexicographic_product_size()
networkx.algorithms.operators.tests.test_product.test_strong_product_combinations()
networkx.algorithms.operators.tests.test_product.test_strong_product_null()
networkx.algorithms.operators.tests.test_product.test_strong_product_raises()
networkx.algorithms.operators.tests.test_product.test_strong_product_random()
networkx.algorithms.operators.tests.test_product.test_strong_product_size()
networkx.algorithms.operators.tests.test_product.test_tensor_product_classic_result()
networkx.algorithms.operators.tests.test_product.test_tensor_product_combinations()
networkx.algorithms.operators.tests.test_product.test_tensor_product_null()
networkx.algorithms.operators.tests.test_product.test_tensor_product_raises()
networkx.algorithms.operators.tests.test_product.test_tensor_product_random()
networkx.algorithms.operators.tests.test_product.test_tensor_product_size()
networkx.tests.test_test_cartesian_product_classic()
networkx.tests.test_test_cartesian_product_multigraph()
networkx.tests.test_test_cartesian_product_null()
networkx.tests.test_test_cartesian_product_raises()
networkx.tests.test_test_cartesian_product_random()
networkx.tests.test_test_cartesian_product_size()
networkx.tests.test_test_graph_power()
networkx.tests.test_test_graph_power_raises()
networkx.tests.test_test_lexicographic_product_combinations()
networkx.tests.test_test_lexicographic_product_null()
networkx.tests.test_test_lexicographic_product_raises()
networkx.tests.test_test_lexicographic_product_random()
networkx.tests.test_test_lexicographic_product_size()
networkx.tests.test_test_strong_product_combinations()
networkx.tests.test_test_strong_product_null()
networkx.tests.test_test_strong_product_raises()
networkx.tests.test_test_strong_product_random()
networkx.tests.test_test_strong_product_size()
networkx.tests.test_test_tensor_product_classic_result()
networkx.tests.test_test_tensor_product_combinations()
networkx.tests.test_test_tensor_product_null()
networkx.tests.test_test_tensor_product_raises()
networkx.tests.test_test_tensor_product_random()
networkx.tests.test_test_tensor_product_size()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/tests/test_unary.py----------------------------------------
A:networkx.algorithms.operators.tests.test_unary.null->null_graph()
A:networkx.algorithms.operators.tests.test_unary.empty1->empty_graph(1)
A:networkx.algorithms.operators.tests.test_unary.empty10->empty_graph(10)
A:networkx.algorithms.operators.tests.test_unary.K3->complete_graph(3)
A:networkx.algorithms.operators.tests.test_unary.K5->complete_graph(5)
A:networkx.algorithms.operators.tests.test_unary.K10->complete_graph(10)
A:networkx.algorithms.operators.tests.test_unary.P2->path_graph(2)
A:networkx.algorithms.operators.tests.test_unary.P3->path_graph(3)
A:networkx.algorithms.operators.tests.test_unary.P5->path_graph(5)
A:networkx.algorithms.operators.tests.test_unary.P10->path_graph(10)
A:networkx.algorithms.operators.tests.test_unary.G->complement(K5)
A:networkx.algorithms.operators.tests.test_unary.P3cc->complement(complement(P3))
A:networkx.algorithms.operators.tests.test_unary.nullcc->complement(complement(null))
A:networkx.algorithms.operators.tests.test_unary.b->bull_graph()
A:networkx.algorithms.operators.tests.test_unary.bcc->complement(complement(b))
A:networkx.algorithms.operators.tests.test_unary.G1->networkx.Graph()
A:networkx.algorithms.operators.tests.test_unary.G1C->complement(G1)
networkx.algorithms.operators.tests.test_unary.test_complement()
networkx.algorithms.operators.tests.test_unary.test_complement_2()
networkx.algorithms.operators.tests.test_unary.test_reverse1()
networkx.tests.test_test_complement()
networkx.tests.test_test_complement_2()
networkx.tests.test_test_reverse1()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/operators/tests/test_all.py----------------------------------------
A:networkx.algorithms.operators.tests.test_all.g->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.h->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.j->networkx.MultiGraph().copy()
A:networkx.algorithms.operators.tests.test_all.ghj->networkx.union_all([g, h, j], rename=('g', 'h', 'j'))
A:networkx.algorithms.operators.tests.test_all.G->networkx.Graph()
A:networkx.algorithms.operators.tests.test_all.H->networkx.MultiGraph()
A:networkx.algorithms.operators.tests.test_all.R->networkx.intersection_all(l)
A:networkx.algorithms.operators.tests.test_all.I->networkx.Graph()
A:networkx.algorithms.operators.tests.test_all.gh->networkx.intersection_all([g, h])
A:networkx.algorithms.operators.tests.test_all.K3->networkx.complete_graph(3)
A:networkx.algorithms.operators.tests.test_all.P3->networkx.path_graph(3)
A:networkx.algorithms.operators.tests.test_all.G1->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.G2->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.H1->networkx.union_all([H, G1], rename=('H', 'G1'))
A:networkx.algorithms.operators.tests.test_all.H2->networkx.union_all([H, G2], rename=('H', ''))
A:networkx.algorithms.operators.tests.test_all.E->networkx.disjoint_union_all([G1, G2])
A:networkx.algorithms.operators.tests.test_all.G3->networkx.DiGraph()
A:networkx.algorithms.operators.tests.test_all.G4->networkx.union_all([G1, G2, G3], rename=('G1', 'G2', 'G3'))
A:networkx.algorithms.operators.tests.test_all.GH->networkx.union_all([G, H])
A:networkx.algorithms.operators.tests.test_all.U->networkx.compose_all([G, H, I])
A:networkx.algorithms.operators.tests.test_all.C->networkx.compose_all(l)
networkx.algorithms.operators.tests.test_all.test_input_output()
networkx.algorithms.operators.tests.test_all.test_intersection_all()
networkx.algorithms.operators.tests.test_all.test_intersection_all_attributes()
networkx.algorithms.operators.tests.test_all.test_intersection_all_multigraph_attributes()
networkx.algorithms.operators.tests.test_all.test_mixed_type_compose()
networkx.algorithms.operators.tests.test_all.test_mixed_type_disjoint_union()
networkx.algorithms.operators.tests.test_all.test_mixed_type_intersection()
networkx.algorithms.operators.tests.test_all.test_mixed_type_union()
networkx.algorithms.operators.tests.test_all.test_union_all_and_compose_all()
networkx.algorithms.operators.tests.test_all.test_union_all_attributes()
networkx.algorithms.operators.tests.test_all.test_union_all_multigraph()
networkx.tests.test_test_input_output()
networkx.tests.test_test_intersection_all()
networkx.tests.test_test_intersection_all_attributes()
networkx.tests.test_test_intersection_all_multigraph_attributes()
networkx.tests.test_test_mixed_type_compose()
networkx.tests.test_test_mixed_type_disjoint_union()
networkx.tests.test_test_mixed_type_intersection()
networkx.tests.test_test_mixed_type_union()
networkx.tests.test_test_union_all_and_compose_all()
networkx.tests.test_test_union_all_attributes()
networkx.tests.test_test_union_all_multigraph()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/preflowpush.py----------------------------------------
A:networkx.algorithms.flow.preflowpush.R->preflow_push_impl(G, s, t, capacity, residual, global_relabel_freq, value_only)
A:networkx.algorithms.flow.preflowpush.q->deque([(src, 0)])
A:networkx.algorithms.flow.preflowpush.(u, height)->deque([(src, 0)]).popleft()
A:networkx.algorithms.flow.preflowpush.heights->reverse_bfs(src)
A:networkx.algorithms.flow.preflowpush.n->len(R)
A:networkx.algorithms.flow.preflowpush.max_height->max(max_height, height)
A:networkx.algorithms.flow.preflowpush.grt->GlobalRelabelThreshold(n, R.size(), global_relabel_freq)
A:networkx.algorithms.flow.preflowpush.R_node[u]['curr_edge']->CurrentEdge(R_succ[u])
A:networkx.algorithms.flow.preflowpush.(v, attr)->curr_edge.get()
A:networkx.algorithms.flow.preflowpush.flow->min(R_node[u]['excess'], attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.preflowpush.height->global_relabel(False)
A:networkx.algorithms.flow.preflowpush.u->next(iter(level.active))
networkx.algorithms.flow.preflowpush.preflow_push(G,s,t,capacity='capacity',residual=None,global_relabel_freq=1,value_only=False)
networkx.algorithms.flow.preflowpush.preflow_push_impl(G,s,t,capacity,residual,global_relabel_freq,value_only)
networkx.flow.preflow_push(G,s,t,capacity='capacity',residual=None,global_relabel_freq=1,value_only=False)
networkx.flow.preflow_push_impl(G,s,t,capacity,residual,global_relabel_freq,value_only)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/mincost.py----------------------------------------
A:networkx.algorithms.flow.mincost.maxFlow->networkx.maximum_flow_value(G, s, t, capacity=capacity)
A:networkx.algorithms.flow.mincost.H->networkx.DiGraph(G)
networkx.algorithms.flow.mincost.cost_of_flow(G,flowDict,weight='weight')
networkx.algorithms.flow.mincost.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')
networkx.cost_of_flow(G,flowDict,weight='weight')
networkx.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/capacityscaling.py----------------------------------------
A:networkx.algorithms.flow.capacityscaling.s->next(iter(S))
A:networkx.algorithms.flow.capacityscaling.G->networkx.DiGraph()
A:networkx.algorithms.flow.capacityscaling.f_inf->float('inf')
A:networkx.algorithms.flow.capacityscaling.w->e.get(weight, 0)
A:networkx.algorithms.flow.capacityscaling.R->_build_residual_network(G, demand, capacity, weight)
A:networkx.algorithms.flow.capacityscaling.inf->float('inf')
A:networkx.algorithms.flow.capacityscaling.r->min(e.get(capacity, inf), inf)
A:networkx.algorithms.flow.capacityscaling.flow_dict[u][v]->dict(((k, 0 if u != v or e.get(capacity, inf) <= 0 or e.get(weight, 0) >= 0 else e[capacity]) for (k, e) in es.items()))
A:networkx.algorithms.flow.capacityscaling.flow_dict[u]->dict(((v, 0 if u != v or e.get(capacity, inf) <= 0 or e.get(weight, 0) >= 0 else e[capacity]) for (v, e) in G[u].items()))
A:networkx.algorithms.flow.capacityscaling.flow_cost->sum((0 if e.get(capacity, inf) <= 0 or e.get(weight, 0) >= 0 else e[capacity] * e[weight] for (u, v, e) in G.selfloop_edges(data=True)))
A:networkx.algorithms.flow.capacityscaling.wmax->max(chain([-inf], (e['capacity'] for (u, v, e) in R.edges_iter(data=True))))
A:networkx.algorithms.flow.capacityscaling.S->set()
A:networkx.algorithms.flow.capacityscaling.T->set()
A:networkx.algorithms.flow.capacityscaling.h->heap()
A:networkx.algorithms.flow.capacityscaling.(u, d_u)->heap().pop()
networkx.algorithms.flow.capacityscaling._build_flow_dict(G,R,capacity,weight)
networkx.algorithms.flow.capacityscaling._build_residual_network(G,demand,capacity,weight)
networkx.algorithms.flow.capacityscaling._detect_unboundedness(R)
networkx.algorithms.flow.capacityscaling.capacity_scaling(G,demand='demand',capacity='capacity',weight='weight',heap=BinaryHeap)
networkx.capacity_scaling(G,demand='demand',capacity='capacity',weight='weight',heap=BinaryHeap)
networkx.flow._build_flow_dict(G,R,capacity,weight)
networkx.flow._build_residual_network(G,demand,capacity,weight)
networkx.flow._detect_unboundedness(R)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/utils.py----------------------------------------
A:networkx.algorithms.flow.utils.self._curr->next(self._it)
A:networkx.algorithms.flow.utils.self._it->iter(self._edges.items())
A:networkx.algorithms.flow.utils.self.active->set()
A:networkx.algorithms.flow.utils.self.inactive->set()
A:networkx.algorithms.flow.utils.R->networkx.DiGraph()
A:networkx.algorithms.flow.utils.inf->float('inf')
A:networkx.algorithms.flow.utils.r->min(attr.get(capacity, inf), inf)
A:networkx.algorithms.flow.utils.q->deque([s])
A:networkx.algorithms.flow.utils.seen->set([s])
A:networkx.algorithms.flow.utils.u->deque([s]).popleft()
A:networkx.algorithms.flow.utils.flow_dict[u]->dict(((v, 0) for v in G[u]))
networkx.algorithms.flow.utils.CurrentEdge(self,edges)
networkx.algorithms.flow.utils.CurrentEdge.__init__(self,edges)
networkx.algorithms.flow.utils.CurrentEdge._rewind(self)
networkx.algorithms.flow.utils.CurrentEdge.get(self)
networkx.algorithms.flow.utils.CurrentEdge.move_to_next(self)
networkx.algorithms.flow.utils.GlobalRelabelThreshold(self,n,m,freq)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.__init__(self,n,m,freq)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.add_work(self,work)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.clear_work(self)
networkx.algorithms.flow.utils.GlobalRelabelThreshold.is_reached(self)
networkx.algorithms.flow.utils.Level(self)
networkx.algorithms.flow.utils.Level.__init__(self)
networkx.algorithms.flow.utils.build_flow_dict(G,R)
networkx.algorithms.flow.utils.build_residual_network(G,capacity)
networkx.algorithms.flow.utils.detect_unboundedness(R,s,t)
networkx.flow.build_flow_dict(G,R)
networkx.flow.build_residual_network(G,capacity)
networkx.flow.utils.CurrentEdge(self,edges)
networkx.flow.utils.CurrentEdge._rewind(self)
networkx.flow.utils.CurrentEdge.get(self)
networkx.flow.utils.CurrentEdge.move_to_next(self)
networkx.flow.utils.GlobalRelabelThreshold(self,n,m,freq)
networkx.flow.utils.GlobalRelabelThreshold.add_work(self,work)
networkx.flow.utils.GlobalRelabelThreshold.clear_work(self)
networkx.flow.utils.GlobalRelabelThreshold.is_reached(self)
networkx.flow.utils.Level(self)
networkx.flow.utils.detect_unboundedness(R,s,t)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/shortestaugmentingpath.py----------------------------------------
A:networkx.algorithms.flow.shortestaugmentingpath.R->shortest_augmenting_path_impl(G, s, t, capacity, residual, two_phase, cutoff)
A:networkx.algorithms.flow.shortestaugmentingpath.q->deque([(t, 0)])
A:networkx.algorithms.flow.shortestaugmentingpath.(u, height)->deque([(t, 0)]).popleft()
A:networkx.algorithms.flow.shortestaugmentingpath.n->len(G)
A:networkx.algorithms.flow.shortestaugmentingpath.R_node[u]['curr_edge']->CurrentEdge(R_succ[u])
A:networkx.algorithms.flow.shortestaugmentingpath.it->iter(path)
A:networkx.algorithms.flow.shortestaugmentingpath.u->next(it)
A:networkx.algorithms.flow.shortestaugmentingpath.flow->min(flow, attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.shortestaugmentingpath.height->relabel(u)
A:networkx.algorithms.flow.shortestaugmentingpath.cutoff->float('inf')
A:networkx.algorithms.flow.shortestaugmentingpath.(v, attr)->curr_edge.get()
networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path(G,s,t,capacity='capacity',residual=None,value_only=False,two_phase=False,cutoff=None)
networkx.algorithms.flow.shortestaugmentingpath.shortest_augmenting_path_impl(G,s,t,capacity,residual,two_phase,cutoff)
networkx.flow.shortest_augmenting_path(G,s,t,capacity='capacity',residual=None,value_only=False,two_phase=False,cutoff=None)
networkx.flow.shortest_augmenting_path_impl(G,s,t,capacity,residual,two_phase,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/networksimplex.py----------------------------------------
A:networkx.algorithms.flow.networksimplex.N->list(G)
A:networkx.algorithms.flow.networksimplex.inf->float('inf')
A:networkx.algorithms.flow.networksimplex.multigraph->G.is_multigraph()
A:networkx.algorithms.flow.networksimplex.edges->G.edges_iter(data=True, keys=True)
A:networkx.algorithms.flow.networksimplex.n->len(N)
A:networkx.algorithms.flow.networksimplex.e->len(E)
A:networkx.algorithms.flow.networksimplex.x->list(chain(repeat(0, e), (abs(d) for d in D)))
A:networkx.algorithms.flow.networksimplex.parent->list(chain(repeat(-1, n), [None]))
A:networkx.algorithms.flow.networksimplex.edge->list(range(e, e + n))
A:networkx.algorithms.flow.networksimplex.size->list(chain(repeat(1, n), [n + 1]))
A:networkx.algorithms.flow.networksimplex.next->list(chain(range(1, n), [-1, 0]))
A:networkx.algorithms.flow.networksimplex.prev->list(range(-1, n))
A:networkx.algorithms.flow.networksimplex.last->list(chain(range(n), [n - 1]))
A:networkx.algorithms.flow.networksimplex.B->int(ceil(sqrt(e)))
A:networkx.algorithms.flow.networksimplex.i->min(edges, key=reduced_cost)
A:networkx.algorithms.flow.networksimplex.c->e[-1].get(weight, 0)
A:networkx.algorithms.flow.networksimplex.w->find_apex(p, q)
A:networkx.algorithms.flow.networksimplex.(Wn, We)->find_cycle(i, p, q)
A:networkx.algorithms.flow.networksimplex.(WnR, WeR)->trace_path(q, w)
A:networkx.algorithms.flow.networksimplex.(j, s)->min(zip(reversed(We), reversed(Wn)), key=lambda i_p: residual_capacity(*i_p))
A:networkx.algorithms.flow.networksimplex.(j, s, t)->find_leaving_edge(Wn, We)
A:networkx.algorithms.flow.networksimplex.flow_cost->sum((c * x for (c, x) in zip(C, x)))
networkx.algorithms.flow.networksimplex.network_simplex(G,demand='demand',capacity='capacity',weight='weight')
networkx.network_simplex(G,demand='demand',capacity='capacity',weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/edmondskarp.py----------------------------------------
A:networkx.algorithms.flow.edmondskarp.it->iter(path)
A:networkx.algorithms.flow.edmondskarp.u->next(it)
A:networkx.algorithms.flow.edmondskarp.flow->min(flow, attr['capacity'] - attr['flow'])
A:networkx.algorithms.flow.edmondskarp.(v, pred, succ)->bidirectional_bfs()
A:networkx.algorithms.flow.edmondskarp.R->edmonds_karp_impl(G, s, t, capacity, residual, cutoff)
A:networkx.algorithms.flow.edmondskarp.cutoff->float('inf')
A:networkx.algorithms.flow.edmondskarp.R.graph['flow_value']->edmonds_karp_core(R, s, t, cutoff)
networkx.algorithms.flow.edmondskarp.edmonds_karp(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.algorithms.flow.edmondskarp.edmonds_karp_core(R,s,t,cutoff)
networkx.algorithms.flow.edmondskarp.edmonds_karp_impl(G,s,t,capacity,residual,cutoff)
networkx.flow.edmonds_karp(G,s,t,capacity='capacity',residual=None,value_only=False,cutoff=None)
networkx.flow.edmonds_karp_core(R,s,t,cutoff)
networkx.flow.edmonds_karp_impl(G,s,t,capacity,residual,cutoff)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/maxflow.py----------------------------------------
A:networkx.algorithms.flow.maxflow.R->flow_func(G, s, t, capacity=capacity, value_only=True, **kwargs)
A:networkx.algorithms.flow.maxflow.flow_dict->build_flow_dict(G, R)
A:networkx.algorithms.flow.maxflow.non_reachable->set(nx.shortest_path_length(R, target=t))
networkx.algorithms.flow.maxflow.maximum_flow(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.maximum_flow_value(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.minimum_cut(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.algorithms.flow.maxflow.minimum_cut_value(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.maximum_flow(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.maximum_flow_value(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.minimum_cut(G,s,t,capacity='capacity',flow_func=None,**kwargs)
networkx.minimum_cut_value(G,s,t,capacity='capacity',flow_func=None,**kwargs)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/tests/test_maxflow.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow.interface_funcs->sum([max_min_funcs, flow_value_funcs], [])
A:networkx.algorithms.flow.tests.test_maxflow.all_funcs->sum([flow_funcs, interface_funcs], [])
A:networkx.algorithms.flow.tests.test_maxflow.cutset->compute_cutset(G, partition)
A:networkx.algorithms.flow.tests.test_maxflow.excess->dict(((u, 0) for u in flowDict))
A:networkx.algorithms.flow.tests.test_maxflow.H->networkx.DiGraph()
A:networkx.algorithms.flow.tests.test_maxflow.R->edmonds_karp(G, 's', 't', cutoff=k)
A:networkx.algorithms.flow.tests.test_maxflow.flow_dict->build_flow_dict(G, R)
A:networkx.algorithms.flow.tests.test_maxflow.(cut_value, partition)->networkx.minimum_cut(G, s, t, capacity=capacity, flow_func=flow_func)
A:networkx.algorithms.flow.tests.test_maxflow.G->networkx.complete_graph(5)
A:networkx.algorithms.flow.tests.test_maxflow.M->networkx.MultiDiGraph()
A:networkx.algorithms.flow.tests.test_maxflow.result->networkx.maximum_flow_value(G, 0, 4, flow_func=flow_func, cutoff=cutoff)
networkx.algorithms.flow.tests.test_maxflow.TestCutoff
networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_complete_graph_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestCutoff.test_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.setup(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_not_callable(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_flow_func_parameters(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_kwargs_default_flow_func(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxFlowMinCutInterface.test_reusing_residual(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph3(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph4(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_digraph_infcap_path(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_disconnected(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_graph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_multigraphs_raise(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_optional_capacity(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_coincide(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflowMinCutCommon.test_source_target_not_in_graph(self)
networkx.algorithms.flow.tests.test_maxflow.compare_flows_and_cuts(G,s,t,solnFlows,solnValue,capacity='capacity')
networkx.algorithms.flow.tests.test_maxflow.compute_cutset(G,partition)
networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_global_relabel_freq()
networkx.algorithms.flow.tests.test_maxflow.test_preflow_push_makes_enough_space()
networkx.algorithms.flow.tests.test_maxflow.test_shortest_augmenting_path_two_phase()
networkx.algorithms.flow.tests.test_maxflow.validate_cuts(G,s,t,solnValue,partition,capacity,flow_func)
networkx.algorithms.flow.tests.test_maxflow.validate_flows(G,s,t,flowDict,solnValue,capacity,flow_func)
networkx.flow.tests.test_TestCutoff
networkx.flow.tests.test_TestCutoff.test_complete_graph_cutoff(self)
networkx.flow.tests.test_TestCutoff.test_cutoff(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface
networkx.flow.tests.test_TestMaxFlowMinCutInterface.setup(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_flow_func_not_callable(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_flow_func_parameters(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_kwargs(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_kwargs_default_flow_func(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_minimum_cut_no_cutoff(self)
networkx.flow.tests.test_TestMaxFlowMinCutInterface.test_reusing_residual(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph1(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph2(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph3(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph4(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph4(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph_infcap_edges(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_digraph_infcap_path(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_disconnected(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_graph1(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_graph2(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_graph_infcap_edges(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_multigraphs_raise(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_optional_capacity(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_source_target_coincide(self)
networkx.flow.tests.test_TestMaxflowMinCutCommon.test_source_target_not_in_graph(self)
networkx.flow.tests.test_compare_flows_and_cuts(G,s,t,solnFlows,solnValue,capacity='capacity')
networkx.flow.tests.test_compute_cutset(G,partition)
networkx.flow.tests.test_test_preflow_push_global_relabel_freq()
networkx.flow.tests.test_test_preflow_push_makes_enough_space()
networkx.flow.tests.test_test_shortest_augmenting_path_two_phase()
networkx.flow.tests.test_validate_cuts(G,s,t,solnValue,partition,capacity,flow_func)
networkx.flow.tests.test_validate_flows(G,s,t,flowDict,solnValue,capacity,flow_func)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/tests/test_mincost.py----------------------------------------
A:networkx.algorithms.flow.tests.test_mincost.G->networkx.read_gpickle(fname)
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, H)->networkx.capacity_scaling(G)
A:networkx.algorithms.flow.tests.test_mincost.flow->sum((v for v in sol['s'].values()))
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, flow)->networkx.capacity_scaling(G)
A:networkx.algorithms.flow.tests.test_mincost.sol->networkx.max_flow_min_cost(G, 's', 't', capacity=0, weight=1)
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, sol)->networkx.capacity_scaling(G, capacity=0, weight=1)
A:networkx.algorithms.flow.tests.test_mincost.fname->os.path.join(os.path.dirname(__file__), 'netgen-2.gpickle.bz2')
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, flowDict)->networkx.capacity_scaling(G)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_bone_shaped(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph1(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph2(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_digraph3(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_exceptions(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_finite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_infinite_capacity_neg_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_large(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_max_flow_min_cost(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_multidigraph(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negative_selfloops(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_negcycle_infcap(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_no_flow_satisfying_demands(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_simple_digraph(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_sum_demands_not_zero(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_transshipment(self)
networkx.algorithms.flow.tests.test_mincost.TestMinCostFlow.test_zero_capacity_edges(self)
networkx.flow.tests.test_TestMinCostFlow
networkx.flow.tests.test_TestMinCostFlow.test_bone_shaped(self)
networkx.flow.tests.test_TestMinCostFlow.test_digon(self)
networkx.flow.tests.test_TestMinCostFlow.test_digraph1(self)
networkx.flow.tests.test_TestMinCostFlow.test_digraph2(self)
networkx.flow.tests.test_TestMinCostFlow.test_digraph3(self)
networkx.flow.tests.test_TestMinCostFlow.test_exceptions(self)
networkx.flow.tests.test_TestMinCostFlow.test_finite_capacity_neg_digon(self)
networkx.flow.tests.test_TestMinCostFlow.test_infinite_capacity_neg_digon(self)
networkx.flow.tests.test_TestMinCostFlow.test_large(self)
networkx.flow.tests.test_TestMinCostFlow.test_max_flow_min_cost(self)
networkx.flow.tests.test_TestMinCostFlow.test_multidigraph(self)
networkx.flow.tests.test_TestMinCostFlow.test_negative_selfloops(self)
networkx.flow.tests.test_TestMinCostFlow.test_negcycle_infcap(self)
networkx.flow.tests.test_TestMinCostFlow.test_no_flow_satisfying_demands(self)
networkx.flow.tests.test_TestMinCostFlow.test_simple_digraph(self)
networkx.flow.tests.test_TestMinCostFlow.test_sum_demands_not_zero(self)
networkx.flow.tests.test_TestMinCostFlow.test_transshipment(self)
networkx.flow.tests.test_TestMinCostFlow.test_zero_capacity_edges(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/flow/tests/test_maxflow_large_graph.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.G->read_graph('gw1')
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.dirname->os.path.dirname(__file__)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.path->os.path.join(dirname, name + '.gpickle.bz2')
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_dict->build_flow_dict(G, R)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.excess->dict(((u, 0) for u in flow_dict))
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.R->preflow_push(G, 1, len(G), global_relabel_freq=50)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.kwargs->dict(residual=R)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.flow_value->networkx.maximum_flow_value(G, (0, 0), 't', **kwargs)
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.t->len(G)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid(N)
networkx.algorithms.flow.tests.test_maxflow_large_graph.read_graph(name)
networkx.algorithms.flow.tests.test_maxflow_large_graph.validate_flows(G,s,t,soln_value,R,flow_func)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph(self)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gl1(self)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_gw1(self)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_preflow_push_global_relabel(self)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid(self)
networkx.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_wlm3(self)
networkx.flow.tests.test_maxflow_large_graph.gen_pyramid(N)
networkx.flow.tests.test_maxflow_large_graph.read_graph(name)
networkx.flow.tests.test_maxflow_large_graph.validate_flows(G,s,t,soln_value,R,flow_func)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/load.py----------------------------------------
A:networkx.algorithms.centrality.load.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.load.ubetween->_edge_betweenness(G, source, nodes, cutoff=cutoff)
A:networkx.algorithms.centrality.load.order->G.order()
A:networkx.algorithms.centrality.load.betweenness->{}.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.load.(pred, length)->networkx.predecessor(G, source, cutoff=cutoff, return_seen=True)
A:networkx.algorithms.centrality.load.between->{}.fromkeys(length, 1.0)
A:networkx.algorithms.centrality.load.v->onodes.pop()
A:networkx.algorithms.centrality.load.num_paths->len(pred[w])
A:networkx.algorithms.centrality.load.l->len(between)
A:networkx.algorithms.centrality.load.nodes->G.nodes()
A:networkx.algorithms.centrality.load.b->{}.fromkeys(G, 0.0).setdefault(v, 0)
networkx._edge_betweenness(G,source,nodes,cutoff=False)
networkx._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.load._edge_betweenness(G,source,nodes,cutoff=False)
networkx.algorithms.centrality.load._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.load.edge_load(G,nodes=None,cutoff=False)
networkx.algorithms.centrality.load.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)
networkx.edge_load(G,nodes=None,cutoff=False)
networkx.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.betweenness_subset.b->_rescale_e(b, len(G), normalized=normalized, directed=G.is_directed())
A:networkx.algorithms.centrality.betweenness_subset.(S, P, sigma)->dijkstra(G, s, weight)
A:networkx.algorithms.centrality.betweenness_subset.sources->G.nodes()
A:networkx.algorithms.centrality.betweenness_subset.targets->G.nodes()
A:networkx.algorithms.centrality.betweenness_subset.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness_subset.target_set->set(targets)
A:networkx.algorithms.centrality.betweenness_subset.w->S.pop()
networkx._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx._rescale(betweenness,n,normalized,directed=False)
networkx._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._rescale(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_source(G,normalized=True,weight=None,sources=None)
networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.betweenness_centrality_source(G,normalized=True,weight=None,sources=None)
networkx.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/harmonic.py----------------------------------------
A:networkx.algorithms.centrality.harmonic.__author__->'\n'.join(['Alessandro Luongo (alessandro.luongo@studenti.unimi.it'])
A:networkx.algorithms.centrality.harmonic.path_length->functools.partial(nx.all_pairs_dijkstra_path_length, weight=distance)
A:networkx.algorithms.centrality.harmonic.nodes->G.nodes()
A:networkx.algorithms.centrality.harmonic.sp->path_length(G.reverse() if G.is_directed() else G)
A:networkx.algorithms.centrality.harmonic.harmonic_centrality[n]->sum([1 / i if i > 0 else 0 for i in sp[n].values()])
networkx.algorithms.centrality.harmonic.harmonic_centrality(G,distance=None)
networkx.harmonic_centrality(G,distance=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_closeness.n->networkx.relabel_nodes(G, dict(zip(ordering, range(n)))).number_of_nodes()
A:networkx.algorithms.centrality.current_flow_closeness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_closeness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_closeness.betweenness->dict.fromkeys(H, 0.0)
A:networkx.algorithms.centrality.current_flow_closeness.L->laplacian_sparse_matrix(H, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.current_flow_closeness.C2->solvername[solver](L, width=1, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_closeness.col->solvername[solver](L, width=1, dtype=dtype).get_row(v)
networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality(G,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_closeness.setup_module(module)
networkx.current_flow_closeness_centrality(G,weight='weight',dtype=float,solver='lu')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/betweenness.py----------------------------------------
A:networkx.algorithms.centrality.betweenness.betweenness->_rescale_e(betweenness, len(G), normalized=normalized, directed=G.is_directed())
A:networkx.algorithms.centrality.betweenness.nodes->random.sample(G.nodes(), k)
A:networkx.algorithms.centrality.betweenness.(S, P, sigma)->_single_source_dijkstra_path_basic(G, s, weight)
A:networkx.algorithms.centrality.betweenness.sigma->dict.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.betweenness.v->Q.pop(0)
A:networkx.algorithms.centrality.betweenness.c->count()
A:networkx.algorithms.centrality.betweenness.(dist, _, pred, v)->pop(Q)
A:networkx.algorithms.centrality.betweenness.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness.w->S.pop()
networkx._accumulate_basic(betweenness,S,P,sigma,s)
networkx._accumulate_edges(betweenness,S,P,sigma,s)
networkx._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx._rescale(betweenness,n,normalized,directed=False,k=None)
networkx._rescale_e(betweenness,n,normalized,directed=False,k=None)
networkx._single_source_dijkstra_path_basic(G,s,weight='weight')
networkx._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness._accumulate_basic(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_edges(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._rescale(betweenness,n,normalized,directed=False,k=None)
networkx.algorithms.centrality.betweenness._rescale_e(betweenness,n,normalized,directed=False,k=None)
networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic(G,s,weight='weight')
networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.algorithms.centrality.betweenness.edge_betweenness(G,k=None,normalized=True,weight=None,seed=None)
networkx.algorithms.centrality.betweenness.edge_betweenness_centrality(G,k=None,normalized=True,weight=None,seed=None)
networkx.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.edge_betweenness(G,k=None,normalized=True,weight=None,seed=None)
networkx.edge_betweenness_centrality(G,k=None,normalized=True,weight=None,seed=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/dispersion.py----------------------------------------
A:networkx.algorithms.centrality.dispersion.__author__->'\n'.join(['Ben Edwards (bedwards@cs.unm.edu)', 'Huston Hedinger (h@graphalchemist.com)', 'Dan Schult (dschult@colgate.edu)'])
A:networkx.algorithms.centrality.dispersion.u_nbrs->set(G_u[u])
A:networkx.algorithms.centrality.dispersion.ST->set((n for n in G_u[v] if n in u_nbrs))
A:networkx.algorithms.centrality.dispersion.set_uv->set([u, v])
A:networkx.algorithms.centrality.dispersion.possib->combinations(ST, 2)
A:networkx.algorithms.centrality.dispersion.embededness->len(ST)
A:networkx.algorithms.centrality.dispersion.results->_dispersion(G, u, v)
A:networkx.algorithms.centrality.dispersion.results[u][v]->_dispersion(G, u, v)
A:networkx.algorithms.centrality.dispersion.results[u]->_dispersion(G, v, u)
A:networkx.algorithms.centrality.dispersion.results[v]->_dispersion(G, u, v)
networkx.algorithms.centrality.dispersion.dispersion(G,u=None,v=None,normalized=True,alpha=1.0,b=0.0,c=0.0)
networkx.dispersion(G,u=None,v=None,normalized=True,alpha=1.0,b=0.0,c=0.0)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/flow_matrix.py----------------------------------------
A:networkx.algorithms.centrality.flow_matrix.n->G.number_of_nodes()
A:networkx.algorithms.centrality.flow_matrix.L->laplacian_sparse_matrix(G, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.flow_matrix.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.B->numpy.zeros(w, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.c->d.get(weight, 1.0)
A:networkx.algorithms.centrality.flow_matrix.row->numpy.dot(B, C.get_rows(u, v))
A:networkx.algorithms.centrality.flow_matrix.self.w->self.width(L)
A:networkx.algorithms.centrality.flow_matrix.self.C->numpy.zeros((self.w, n), dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.self.C[r % self.w, 1:]->self.solve_inverse(r)
A:networkx.algorithms.centrality.flow_matrix.(x, y)->numpy.nonzero(row)
A:networkx.algorithms.centrality.flow_matrix.m->max(w, m)
A:networkx.algorithms.centrality.flow_matrix.self.IL->numpy.zeros(L.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.IL[1:, 1:]->numpy.linalg.inv(self.L1.todense())
A:networkx.algorithms.centrality.flow_matrix.s->numpy.zeros(rhs.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.lusolve->scipy.sparse.linalg.factorized(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.rhs->numpy.zeros(self.n, self.dtype)
A:networkx.algorithms.centrality.flow_matrix.s[1:]->self.lusolve(rhs[1:])
A:networkx.algorithms.centrality.flow_matrix.ilu->scipy.sparse.linalg.spilu(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.self.M->scipy.sparse.linalg.LinearOperator(shape=(n, n), matvec=ilu.solve)
A:networkx.algorithms.centrality.flow_matrix.A->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight, dtype=dtype, format=format)
A:networkx.algorithms.centrality.flow_matrix.data->numpy.asarray(A.sum(axis=1).T)
A:networkx.algorithms.centrality.flow_matrix.D->scipy.sparse.spdiags(data, 0, n, n, format=format)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows(self,r1,r2)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.flow_matrix_row(G,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix(G,nodelist=None,weight='weight',dtype=None,format='csr')
networkx.flow_matrix.CGInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.CGInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.CGInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.CGInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.FullInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.FullInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.FullInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.FullInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.InverseLaplacian(self,L,width=None,dtype=None)
networkx.flow_matrix.InverseLaplacian.get_row(self,r)
networkx.flow_matrix.InverseLaplacian.get_rows(self,r1,r2)
networkx.flow_matrix.InverseLaplacian.init_solver(self,L)
networkx.flow_matrix.InverseLaplacian.solve(self,r)
networkx.flow_matrix.InverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.InverseLaplacian.width(self,L)
networkx.flow_matrix.SuperLUInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.SuperLUInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.SuperLUInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.SuperLUInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.flow_matrix_row(G,weight='weight',dtype=float,solver='lu')
networkx.flow_matrix.laplacian_sparse_matrix(G,nodelist=None,weight='weight',dtype=None,format='csr')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/current_flow_betweenness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_betweenness.L->laplacian_sparse_matrix(H, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.current_flow_betweenness.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.betweenness->dict.fromkeys(H.edges(), 0.0)
A:networkx.algorithms.centrality.current_flow_betweenness.(s, t)->random.sample(range(n), 2)
A:networkx.algorithms.centrality.current_flow_betweenness.b->numpy.zeros(n, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.p->solvername[solver](L, dtype=dtype).solve(b)
A:networkx.algorithms.centrality.current_flow_betweenness.w->H[v][nbr].get(weight, 1.0)
A:networkx.algorithms.centrality.current_flow_betweenness.pos->dict(zip(row.argsort()[::-1], range(1, n + 1)))
A:networkx.algorithms.centrality.current_flow_betweenness.betweenness[v]->float((betweenness[v] - i) * 2.0 / nb)
networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full',epsilon=0.5,kmax=10000)
networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full')
networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full')
networkx.algorithms.centrality.current_flow_betweenness.setup_module(module)
networkx.approximate_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full',epsilon=0.5,kmax=10000)
networkx.current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full')
networkx.edge_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='full')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/eigenvector.py----------------------------------------
A:networkx.algorithms.centrality.eigenvector.__author__->'\n'.join(['Aric Hagberg (aric.hagberg@gmail.com)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.eigenvector.x->dict.fromkeys(xlast, 0)
A:networkx.algorithms.centrality.eigenvector.nnodes->G.number_of_nodes()
A:networkx.algorithms.centrality.eigenvector.err->sum([abs(x[n] - xlast[n]) for n in x])
A:networkx.algorithms.centrality.eigenvector.M->networkx.to_scipy_sparse_matrix(G, nodelist=G.nodes(), weight=weight, dtype=float)
A:networkx.algorithms.centrality.eigenvector.(eigenvalue, eigenvector)->scipy.sparse.linalg.eigs(M.T, k=1, which='LR')
A:networkx.algorithms.centrality.eigenvector.centrality->dict(zip(G, map(float, largest / norm)))
networkx.algorithms.centrality.eigenvector.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None,weight='weight')
networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy(G,weight='weight')
networkx.algorithms.centrality.eigenvector.setup_module(module)
networkx.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None,weight='weight')
networkx.eigenvector_centrality_numpy(G,weight='weight')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/katz.py----------------------------------------
A:networkx.algorithms.centrality.katz.__author__->'\n'.join(['Aric Hagberg (aric.hagberg@gmail.com)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)', 'Vincent Gauthier (vgauthier@luxbulb.org)'])
A:networkx.algorithms.centrality.katz.nnodes->G.number_of_nodes()
A:networkx.algorithms.centrality.katz.x->dict.fromkeys(xlast, 0)
A:networkx.algorithms.centrality.katz.b->numpy.array(list(beta.values()), dtype=float)
A:networkx.algorithms.centrality.katz.err->sum([abs(x[n] - xlast[n]) for n in x])
A:networkx.algorithms.centrality.katz.nodelist->G.nodes()
A:networkx.algorithms.centrality.katz.centrality->dict(zip(nodelist, map(float, centrality / norm)))
networkx.algorithms.centrality.katz.katz_centrality(G,alpha=0.1,beta=1.0,max_iter=1000,tol=1e-06,nstart=None,normalized=True,weight='weight')
networkx.algorithms.centrality.katz.katz_centrality_numpy(G,alpha=0.1,beta=1.0,normalized=True,weight='weight')
networkx.algorithms.centrality.katz.setup_module(module)
networkx.katz_centrality(G,alpha=0.1,beta=1.0,max_iter=1000,tol=1e-06,nstart=None,normalized=True,weight='weight')
networkx.katz_centrality_numpy(G,alpha=0.1,beta=1.0,normalized=True,weight='weight')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/current_flow_betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness_subset.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness_subset.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.mapping->dict(zip(ordering, range(n)))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.H->networkx.relabel_nodes(G, mapping)
A:networkx.algorithms.centrality.current_flow_betweenness_subset.betweenness->dict.fromkeys(H.edges(), 0.0)
networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.setup_module(module)
networkx.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/degree_alg.py----------------------------------------
A:networkx.algorithms.centrality.degree_alg.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.degree_alg.centrality->dict(((n, d * s) for (n, d) in G.out_degree_iter()))
networkx.algorithms.centrality.degree_alg.degree_centrality(G)
networkx.algorithms.centrality.degree_alg.in_degree_centrality(G)
networkx.algorithms.centrality.degree_alg.out_degree_centrality(G)
networkx.degree_centrality(G)
networkx.in_degree_centrality(G)
networkx.out_degree_centrality(G)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/closeness.py----------------------------------------
A:networkx.algorithms.centrality.closeness.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.closeness.path_length->functools.partial(nx.single_source_dijkstra_path_length, weight=distance)
A:networkx.algorithms.centrality.closeness.nodes->G.nodes()
A:networkx.algorithms.centrality.closeness.sp->path_length(G, n)
A:networkx.algorithms.centrality.closeness.totsp->sum(sp.values())
networkx.algorithms.centrality.closeness.closeness_centrality(G,u=None,distance=None,normalized=True)
networkx.closeness_centrality(G,u=None,distance=None,normalized=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/communicability_alg.py----------------------------------------
A:networkx.algorithms.centrality.communicability_alg.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Franck Kalala (franckkalala@yahoo.fr'])
A:networkx.algorithms.centrality.communicability_alg.nodelist->G.nodes()
A:networkx.algorithms.centrality.communicability_alg.A->networkx.to_numpy_matrix(G, nodelist)
A:networkx.algorithms.centrality.communicability_alg.expA->scipy.linalg.expm(A)
A:networkx.algorithms.centrality.communicability_alg.sc->_rescale(sc, normalized=normalized)
A:networkx.algorithms.centrality.communicability_alg.(w, v)->numpy.linalg.eigh(A)
A:networkx.algorithms.centrality.communicability_alg.expw->numpy.exp(w)
A:networkx.algorithms.centrality.communicability_alg.xg->numpy.dot(vsquare, expw)
A:networkx.algorithms.centrality.communicability_alg.n->len(nodelist)
A:networkx.algorithms.centrality.communicability_alg.mapping->dict(zip(nodelist, range(len(nodelist))))
A:networkx.algorithms.centrality.communicability_alg.row->A[i, :].copy()
A:networkx.algorithms.centrality.communicability_alg.col->A[:, i].copy()
A:networkx.algorithms.centrality.communicability_alg.sc[v]->float(B.sum())
A:networkx.algorithms.centrality.communicability_alg.order->len(sc)
A:networkx.algorithms.centrality.communicability_alg.(w, vec)->numpy.linalg.eigh(A)
A:networkx.algorithms.centrality.communicability_alg.sc[u][v]->float(expA[mapping[u], mapping[v]])
networkx._rescale(sc,normalized)
networkx.algorithms.centrality.communicability_alg._rescale(sc,normalized)
networkx.algorithms.centrality.communicability_alg.communicability(G)
networkx.algorithms.centrality.communicability_alg.communicability_betweenness_centrality(G,normalized=True)
networkx.algorithms.centrality.communicability_alg.communicability_centrality(G)
networkx.algorithms.centrality.communicability_alg.communicability_centrality_exp(G)
networkx.algorithms.centrality.communicability_alg.communicability_exp(G)
networkx.algorithms.centrality.communicability_alg.estrada_index(G)
networkx.algorithms.centrality.communicability_alg.setup_module(module)
networkx.communicability(G)
networkx.communicability_betweenness_centrality(G,normalized=True)
networkx.communicability_centrality(G)
networkx.communicability_centrality_exp(G)
networkx.communicability_exp(G)
networkx.estrada_index(G)
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b->networkx.edge_betweenness_centrality(G, weight='weight', normalized=True)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 1)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G()
networkx.tests.test_betweenness_TestBetweennessCentrality(object)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_K5_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_directed_path(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_directed_path_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_disconnected_path(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_disconnected_path_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_florentine_families_graph(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_ladder_graph(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality(object)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_C4(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_P4(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_normalized_K5(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_normalized_P4(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality(object)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_G(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_G2(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_P3(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_P3_normalized(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_florentine_families_graph(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_ladder_graph(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality(object)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_C4(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_P4(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_weighted_graph(self)
networkx.tests.test_betweenness_weighted_G()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_load_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_load_centrality.G->networkx.path_graph(2)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.self.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.self.D->networkx.cycle_graph(3, create_using=nx.DiGraph())
A:networkx.algorithms.centrality.tests.test_load_centrality.b->networkx.load_centrality(self.G, weight='weight', normalized=False)
A:networkx.algorithms.centrality.tests.test_load_centrality.c->networkx.edge_load(G)
A:networkx.algorithms.centrality.tests.test_load_centrality.B->networkx.Graph()
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setUp(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_not_strongly_connected(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p2_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load(self)
networkx.tests.test_load_TestLoadCentrality
networkx.tests.test_load_TestLoadCentrality.setUp(self)
networkx.tests.test_load_TestLoadCentrality.test_c4_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_florentine_families_load(self)
networkx.tests.test_load_TestLoadCentrality.test_k5_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_k5_load(self)
networkx.tests.test_load_TestLoadCentrality.test_krackhardt_load(self)
networkx.tests.test_load_TestLoadCentrality.test_load_betweenness_difference(self)
networkx.tests.test_load_TestLoadCentrality.test_not_strongly_connected(self)
networkx.tests.test_load_TestLoadCentrality.test_p2_load(self)
networkx.tests.test_load_TestLoadCentrality.test_p3_load(self)
networkx.tests.test_load_TestLoadCentrality.test_p4_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_tree_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_florentine_families_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_k5_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_krackhardt_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_p3_load(self)
networkx.tests.test_load_TestLoadCentrality.test_weighted_load(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_communicability.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_communicability.result->estrada_index(nx.karate_club_graph())
A:networkx.algorithms.centrality.tests.test_communicability.G1->networkx.Graph([('Franck', 'Aric'), ('Aric', 'Dan'), ('Dan', 'Albert'), ('Albert', 'Franck'), ('Dan', '1'), ('Franck', 'Albert')])
A:networkx.algorithms.centrality.tests.test_communicability.result1->communicability_betweenness_centrality(G1)
A:networkx.algorithms.centrality.tests.test_communicability.G->networkx.Graph([(1, 2)])
A:networkx.algorithms.centrality.tests.test_communicability.answer->defaultdict(dict)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.setupClass(cls)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability2(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality_small(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_centrality(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_estrada_index(self)
networkx.tests.test_communicability.TestCommunicability
networkx.tests.test_communicability.TestCommunicability.setupClass(cls)
networkx.tests.test_communicability.TestCommunicability.test_communicability(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability2(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality_small(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability_centrality(self)
networkx.tests.test_communicability.TestCommunicability.test_estrada_index(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b->edge_betweenness_centrality_subset(G, sources=[0], targets=[3, 4], weight=None)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b_answer->dict.fromkeys(G.edges(), 0)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.b->networkx.current_flow_closeness_centrality(G)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality(object)
networkx.tests.test_TestFlowClosenessCentrality(object)
networkx.tests.test_TestFlowClosenessCentrality.setupClass(cls)
networkx.tests.test_TestFlowClosenessCentrality.test_K4(self)
networkx.tests.test_TestFlowClosenessCentrality.test_P4(self)
networkx.tests.test_TestFlowClosenessCentrality.test_star(self)
networkx.tests.test_TestWeightedFlowClosenessCentrality(object)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_current_flow_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.G->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b->edge_current_flow_subset(G, G.nodes(), G.nodes(), normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b_answer->edge_current_flow(G, normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.v2->edge_current_flow_subset(G, G.nodes(), G.nodes(), normalized=True).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_closeness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.c->networkx.closeness_centrality(XG, distance='weight')
A:networkx.algorithms.centrality.tests.test_closeness_centrality.XG->networkx.Graph()
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setUp(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality
networkx.tests.test_closeness_TestClosenessCentrality.setUp(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_florentine_families_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_k5_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_krackhardt_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_p3_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_weighted_closeness(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_katz_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_katz_centrality.G->networkx.gnp_random_graph(10, 0.5, seed=1234)
A:networkx.algorithms.centrality.tests.test_katz_centrality.b->networkx.katz_centrality_numpy(G, alpha, weight=None)
A:networkx.algorithms.centrality.tests.test_katz_centrality.v->math.sqrt(1 / 5.0)
A:networkx.algorithms.centrality.tests.test_katz_centrality.b_answer->dict.fromkeys(G, v)
A:networkx.algorithms.centrality.tests.test_katz_centrality.nstart->dict([(n, 1) for n in G])
A:networkx.algorithms.centrality.tests.test_katz_centrality.e->networkx.eigenvector_centrality_numpy(G)
A:networkx.algorithms.centrality.tests.test_katz_centrality.self.G->networkx.gnp_random_graph(10, 0.5, seed=1234).reverse()
A:networkx.algorithms.centrality.tests.test_katz_centrality.H->networkx.DiGraph(edges)
A:networkx.algorithms.centrality.tests.test_katz_centrality.self.H->networkx.gnp_random_graph(10, 0.5, seed=1234).reverse()
A:networkx.algorithms.centrality.tests.test_katz_centrality.p->networkx.katz_centrality_numpy(G, alpha)
A:networkx.algorithms.centrality.tests.test_katz_centrality.l->float(max(eigvals(networkx.adjacency_matrix(G).todense())))
A:networkx.algorithms.centrality.tests.test_katz_centrality.k->networkx.katz_centrality_numpy(G, 1.0 / l)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality(object)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_bad_beta_numbe(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_dict(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_beta_as_scalar(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_empty(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_maxiter(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multigraph(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentrality.test_multiple_alpha(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected(object)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.setUp(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirected.test_katz_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy(TestKatzCentralityDirected)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.setupClass(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy(object)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.setupClass(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_K5_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_P3_unweighted(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_bad_beta_numbe(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_dict(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_beta_as_scalar(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_empty(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multigraph(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzCentralityNumpy.test_multiple_alpha(self)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz(object)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.setupClass(cls)
networkx.algorithms.centrality.tests.test_katz_centrality.TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random(self)
networkx.tests.test_katz_TestKatzCentrality(object)
networkx.tests.test_katz_TestKatzCentrality.test_K5(self)
networkx.tests.test_katz_TestKatzCentrality.test_P3(self)
networkx.tests.test_katz_TestKatzCentrality.test_bad_beta(self)
networkx.tests.test_katz_TestKatzCentrality.test_bad_beta_numbe(self)
networkx.tests.test_katz_TestKatzCentrality.test_beta_as_dict(self)
networkx.tests.test_katz_TestKatzCentrality.test_beta_as_scalar(self)
networkx.tests.test_katz_TestKatzCentrality.test_empty(self)
networkx.tests.test_katz_TestKatzCentrality.test_maxiter(self)
networkx.tests.test_katz_TestKatzCentrality.test_multigraph(self)
networkx.tests.test_katz_TestKatzCentrality.test_multiple_alpha(self)
networkx.tests.test_katz_TestKatzCentralityDirected(object)
networkx.tests.test_katz_TestKatzCentralityDirected.setUp(self)
networkx.tests.test_katz_TestKatzCentralityDirected.test_katz_centrality_unweighted(self)
networkx.tests.test_katz_TestKatzCentralityDirected.test_katz_centrality_weighted(self)
networkx.tests.test_katz_TestKatzCentralityDirectedNumpy(TestKatzCentralityDirected)
networkx.tests.test_katz_TestKatzCentralityDirectedNumpy.setupClass(cls)
networkx.tests.test_katz_TestKatzCentralityDirectedNumpy.test_katz_centrality_unweighted(self)
networkx.tests.test_katz_TestKatzCentralityDirectedNumpy.test_katz_centrality_weighted(self)
networkx.tests.test_katz_TestKatzCentralityNumpy(object)
networkx.tests.test_katz_TestKatzCentralityNumpy.setupClass(cls)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_K5(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_K5_unweighted(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_P3(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_P3_unweighted(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_bad_beta(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_bad_beta_numbe(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_beta_as_dict(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_beta_as_scalar(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_empty(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_multigraph(self)
networkx.tests.test_katz_TestKatzCentralityNumpy.test_multiple_alpha(self)
networkx.tests.test_katz_TestKatzEigenvectorVKatz(object)
networkx.tests.test_katz_TestKatzEigenvectorVKatz.setupClass(cls)
networkx.tests.test_katz_TestKatzEigenvectorVKatz.test_eigenvector_v_katz_random(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_degree_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_degree_centrality.F->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.d->networkx.out_degree_centrality(self.G)
A:networkx.algorithms.centrality.tests.test_degree_centrality.exact->dict(zip(names, dcs))
A:networkx.algorithms.centrality.tests.test_degree_centrality.names->sorted(self.F.nodes())
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.__init__(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality(self)
networkx.tests.test_degree_TestDegreeCentrality(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_1(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_2(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_3(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_4(self)
networkx.tests.test_degree_TestDegreeCentrality.test_indegree_centrality(self)
networkx.tests.test_degree_TestDegreeCentrality.test_outdegree_centrality(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_current_flow_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.G->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b->edge_current_flow(G, normalized=False)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.ba->approximate_cfbc(G, normalized=True, epsilon=0.5 * epsilon)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 0.75)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.v2->edge_current_flow(G, normalized=False).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solers(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_grid(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_solvers(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_solers(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_TestWeightedFlowBetweennessCentrality(object)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_dispersion.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_dispersion.G->networkx.karate_club_graph()
A:networkx.algorithms.centrality.tests.test_dispersion.disp_uh->networkx.dispersion(G, 'u', 'h', normalized=False)
A:networkx.algorithms.centrality.tests.test_dispersion.disp_ub->networkx.dispersion(G, 'u', 'b', normalized=False)
A:networkx.algorithms.centrality.tests.test_dispersion.disp->networkx.dispersion(G)
A:networkx.algorithms.centrality.tests.test_dispersion.disp_Gu->networkx.dispersion(G, 'u')
A:networkx.algorithms.centrality.tests.test_dispersion.disp_uv->networkx.dispersion(G, 'u', 'h')
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion(object)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_article(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_impossible_things(self)
networkx.algorithms.centrality.tests.test_dispersion.TestDispersion.test_results_length(self)
networkx.algorithms.centrality.tests.test_dispersion.small_ego_G()
networkx.tests.test_TestDispersion(object)
networkx.tests.test_TestDispersion.test_article(self)
networkx.tests.test_TestDispersion.test_impossible_things(self)
networkx.tests.test_TestDispersion.test_results_length(self)
networkx.tests.test_small_ego_G()


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_eigenvector_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b->networkx.eigenvector_centrality(G, max_iter=0)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.v->math.sqrt(1 / 5.0)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b_answer->dict.fromkeys(G, v)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.nstart->dict([(n, 1) for n in G])
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.self.G->networkx.DiGraph().reverse()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.H->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.self.H->networkx.DiGraph().reverse()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.p->networkx.eigenvector_centrality_numpy(G)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.e->networkx.eigenvector_centrality_numpy(networkx.Graph())
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality(object)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3_unweighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_maxiter(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected(object)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setUp(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setupClass(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions(object)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.setupClass(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_empty_numpy(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityExceptions.test_multigraph_numpy(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality(object)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.setupClass(cls)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_K5(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_P3(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_P3_unweighted(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_maxiter(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected(object)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.setUp(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.setupClass(cls)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted_numpy(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted_numpy(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions(object)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions.setupClass(cls)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions.test_empty(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions.test_empty_numpy(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions.test_multigraph(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityExceptions.test_multigraph_numpy(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/centrality/tests/test_harmonic_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.C5->networkx.cycle_graph(5)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.self.Gb->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.c->harmonic_centrality(G, distance='weight')
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.XG->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_harmonic_centrality.G->networkx.DiGraph()
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.setUp(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_bal_tree(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_clique_complete(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C4(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_cycle_C5(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_empty(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_exampleGraph(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p3_harmonic(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_p4_harmonic(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_singleton(self)
networkx.algorithms.centrality.tests.test_harmonic_centrality.TestClosenessCentrality.test_weighted_harmonic(self)
networkx.tests.test_harmonic_TestClosenessCentrality
networkx.tests.test_harmonic_TestClosenessCentrality.setUp(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_bal_tree(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_clique_complete(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_cycle_C4(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_cycle_C5(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_empty(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_exampleGraph(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_p3_harmonic(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_p4_harmonic(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_singleton(self)
networkx.tests.test_harmonic_TestClosenessCentrality.test_weighted_harmonic(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.weighted.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Loïc Séguin-C. <loicseguin@gmail.com>', 'Dan Schult <dschult@colgate.edu>'])
A:networkx.algorithms.shortest_paths.weighted.(length, path)->single_source_dijkstra(G, source, cutoff=cutoff, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.length->single_source_dijkstra_path_length(G, source, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.c->count()
A:networkx.algorithms.shortest_paths.weighted.(d, _, v)->pop(fringe)
A:networkx.algorithms.shortest_paths.weighted.cost->get_weight(v, u, e)
A:networkx.algorithms.shortest_paths.weighted.inf->float('inf')
A:networkx.algorithms.shortest_paths.weighted.n->len(G)
A:networkx.algorithms.shortest_paths.weighted.q->deque(source)
A:networkx.algorithms.shortest_paths.weighted.in_q->set(source)
A:networkx.algorithms.shortest_paths.weighted.u->deque(source).popleft()
A:networkx.algorithms.shortest_paths.weighted.d->dict(((u, d[u]) for u in pred))
A:networkx.algorithms.shortest_paths.weighted.in_stack->set([u])
A:networkx.algorithms.shortest_paths.weighted.(v, e)->next(it)
A:networkx.algorithms.shortest_paths.weighted.relabeled->relax(to_scan)
A:networkx.algorithms.shortest_paths.weighted.w_e->get_weight(e)
A:networkx.algorithms.shortest_paths.weighted.to_scan->topo_sort(relabeled)
A:networkx.algorithms.shortest_paths.weighted.newnode->generate_unique_node()
A:networkx.algorithms.shortest_paths.weighted.(dist, _, v)->pop(fringe[dir])
A:networkx.algorithms.shortest_paths.weighted.minweight->G[w][v].get(weight, 1)
networkx._bellman_ford_relaxation(G,pred,dist,source,weight)
networkx._dijkstra(G,source,get_weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths.weighted._bellman_ford_relaxation(G,pred,dist,source,weight)
networkx.algorithms.shortest_paths.weighted._dijkstra(G,source,get_weight,pred=None,paths=None,cutoff=None,target=None)
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.bellman_ford(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.goldberg_radzik(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.johnson(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.negative_edge_cycle(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')
networkx.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.bellman_ford(G,source,weight='weight')
networkx.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.dijkstra_path(G,source,target,weight='weight')
networkx.dijkstra_path_length(G,source,target,weight='weight')
networkx.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.goldberg_radzik(G,source,weight='weight')
networkx.johnson(G,weight='weight')
networkx.negative_edge_cycle(G,weight='weight')
networkx.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.dense.A->numpy.minimum(A, A[i, :] + A[:, i])
A:networkx.algorithms.shortest_paths.dense.I->numpy.identity(n)
A:networkx.algorithms.shortest_paths.dense.dist->defaultdict(lambda : defaultdict(lambda : float('inf')))
A:networkx.algorithms.shortest_paths.dense.pred->defaultdict(dict)
A:networkx.algorithms.shortest_paths.dense.e_weight->d.get(weight, 1.0)
A:networkx.algorithms.shortest_paths.dense.dist[u][v]->min(e_weight, dist[u][v])
A:networkx.algorithms.shortest_paths.dense.dist[v][u]->min(e_weight, dist[v][u])
networkx.algorithms.shortest_paths.dense.floyd_warshall(G,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.algorithms.shortest_paths.dense.setup_module(module)
networkx.floyd_warshall(G,weight='weight')
networkx.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.setup_module(module)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.generic.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Sérgio Nery Simões <sergionery@gmail.com>'])
A:networkx.algorithms.shortest_paths.generic.sp->networkx.shortest_path(G, source, target)
A:networkx.algorithms.shortest_paths.generic.paths->networkx.dijkstra_path_length(G, source, target, weight)
A:networkx.algorithms.shortest_paths.generic.paths[target]->list(reversed(paths[target]))
A:networkx.algorithms.shortest_paths.generic.p->networkx.bidirectional_shortest_path(G, source, target)
A:networkx.algorithms.shortest_paths.generic.path_length->networkx.single_source_dijkstra_path_length(G, node, weight=weight)
A:networkx.algorithms.shortest_paths.generic.n->len(G)
A:networkx.algorithms.shortest_paths.generic.(pred, dist)->networkx.dijkstra_predecessor_and_distance(G, source, weight=weight)
A:networkx.algorithms.shortest_paths.generic.pred->networkx.predecessor(G, source)
networkx.algorithms.shortest_paths.generic.all_shortest_paths(G,source,target,weight=None)
networkx.algorithms.shortest_paths.generic.average_shortest_path_length(G,weight=None)
networkx.algorithms.shortest_paths.generic.has_path(G,source,target)
networkx.algorithms.shortest_paths.generic.shortest_path(G,source=None,target=None,weight=None)
networkx.algorithms.shortest_paths.generic.shortest_path_length(G,source=None,target=None,weight=None)
networkx.all_shortest_paths(G,source,target,weight=None)
networkx.average_shortest_path_length(G,weight=None)
networkx.has_path(G,source,target)
networkx.shortest_path(G,source=None,target=None,weight=None)
networkx.shortest_path_length(G,source=None,target=None,weight=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.astar.__author__->'\n'.join(['Salim Fadhley <salimfadhley@gmail.com>', "Matteo Dell'Amico <matteodellamico@gmail.com>"])
A:networkx.algorithms.shortest_paths.astar.c->count()
A:networkx.algorithms.shortest_paths.astar.(_, __, curnode, dist, parent)->pop(queue)
A:networkx.algorithms.shortest_paths.astar.h->heuristic(neighbor, target)
A:networkx.algorithms.shortest_paths.astar.path->astar_path(G, source, target, heuristic, weight)
networkx.algorithms.shortest_paths.astar.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.algorithms.shortest_paths.astar.astar_path_length(G,source,target,heuristic=None,weight='weight')
networkx.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.astar_path_length(G,source,target,heuristic=None,weight='weight')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.unweighted.results->_bidirectional_pred_succ(G, source, target)
networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ(G,source,target)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path(G,source,target)
networkx.algorithms.shortest_paths.unweighted.predecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length(G,source,cutoff=None)
networkx.un_bidirectional_pred_succ(G,source,target)
networkx.unall_pairs_shortest_path(G,cutoff=None)
networkx.unall_pairs_shortest_path_length(G,cutoff=None)
networkx.unbidirectional_shortest_path(G,source,target)
networkx.unpredecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.unsingle_source_shortest_path(G,source,cutoff=None)
networkx.unsingle_source_shortest_path_length(G,source,cutoff=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_astar.self.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.path->networkx.algorithms.shortest_paths.astar.astar_path(G, node_1, node_4)
A:networkx.algorithms.shortest_paths.tests.test_astar.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.p->networkx.astar_path(self.XG, 's', 'moon')
A:networkx.algorithms.shortest_paths.tests.test_astar.C->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_astar.node_1->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_2->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_3->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_4->UnorderableClass()
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setUp(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_orderable(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_random_graph(self)
networkx.tests.test_TestAStar
networkx.tests.test_TestAStar.setUp(self)
networkx.tests.test_TestAStar.test_astar_directed(self)
networkx.tests.test_TestAStar.test_astar_directed2(self)
networkx.tests.test_TestAStar.test_astar_multigraph(self)
networkx.tests.test_TestAStar.test_astar_nopath(self)
networkx.tests.test_TestAStar.test_astar_undirected(self)
networkx.tests.test_TestAStar.test_astar_undirected2(self)
networkx.tests.test_TestAStar.test_astar_undirected3(self)
networkx.tests.test_TestAStar.test_astar_w1(self)
networkx.tests.test_TestAStar.test_cycle(self)
networkx.tests.test_TestAStar.test_orderable(self)
networkx.tests.test_TestAStar.test_random_graph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_unweighted.p->networkx.predecessor(G, 0, 3, cutoff=2)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.l->networkx.all_pairs_shortest_path_length(self.grid)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.G->networkx.path_graph(4)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.(p, s)->networkx.predecessor(G, 0, 3, cutoff=2, return_seen=True)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setUp(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_cutoff(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor_target(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.validate_grid_path(r,c,s,t,p)
networkx.tests.test_unTestUnweightedPath
networkx.tests.test_unTestUnweightedPath.setUp(self)
networkx.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.tests.test_unTestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_predecessor(self)
networkx.tests.test_unTestUnweightedPath.test_predecessor_cutoff(self)
networkx.tests.test_unTestUnweightedPath.test_predecessor_target(self)
networkx.tests.test_unTestUnweightedPath.test_shortest_path_length(self)
networkx.tests.test_unTestUnweightedPath.test_single_source_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_single_source_shortest_path_length(self)
networkx.tests.test_unvalidate_grid_path(r,c,s,t,p)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_dense_numpy.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.dist->networkx.floyd_warshall_numpy(G)
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.G->networkx.MultiDiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.(pred, dist)->networkx.floyd_warshall_predecessor_and_distance(G)
A:networkx.algorithms.shortest_paths.tests.test_dense_numpy.D->networkx.utils.dict_to_numpy_array(dist)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy(object)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.setupClass(cls)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_cycle_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_directed_cycle_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weight_parameter_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense_numpy.TestFloydNumpy.test_zero_weight(self)
networkx.tests.test_dense_numpy.TestFloydNumpy(object)
networkx.tests.test_dense_numpy.TestFloydNumpy.setupClass(cls)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_cycle_numpy(self)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_directed_cycle_numpy(self)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_weight_parameter_numpy(self)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy(self)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_weighted_numpy(self)
networkx.tests.test_dense_numpy.TestFloydNumpy.test_zero_weight(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_generic.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_generic.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_generic.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_generic.sp->networkx.shortest_path_length(nx.path_graph(3), target=1)
A:networkx.algorithms.shortest_paths.tests.test_generic.p->networkx.shortest_path(self.grid, weight='weight')
A:networkx.algorithms.shortest_paths.tests.test_generic.l->networkx.average_shortest_path_length(G, weight='weight')
A:networkx.algorithms.shortest_paths.tests.test_generic.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_generic.g->g.to_directed().to_directed()
A:networkx.algorithms.shortest_paths.tests.test_generic.paths->list(nx.all_shortest_paths(G, 0, 4))
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setUp(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_shortest_paths_raise(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_disconnected(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length_target(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_target(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_weighted_average_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.validate_grid_path(r,c,s,t,p)
networkx.tests.test_TestGenericPath
networkx.tests.test_TestGenericPath.setUp(self)
networkx.tests.test_TestGenericPath.test_all_pairs_shortest_path(self)
networkx.tests.test_TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_all_shortest_paths(self)
networkx.tests.test_TestGenericPath.test_all_shortest_paths_raise(self)
networkx.tests.test_TestGenericPath.test_average_shortest_disconnected(self)
networkx.tests.test_TestGenericPath.test_average_shortest_path(self)
networkx.tests.test_TestGenericPath.test_has_path(self)
networkx.tests.test_TestGenericPath.test_shortest_path(self)
networkx.tests.test_TestGenericPath.test_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_shortest_path_length_target(self)
networkx.tests.test_TestGenericPath.test_shortest_path_target(self)
networkx.tests.test_TestGenericPath.test_single_source_shortest_path(self)
networkx.tests.test_TestGenericPath.test_single_source_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_weighted_average_shortest_path(self)
networkx.tests.test_validate_grid_path(r,c,s,t,p)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_dense.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.(path, dist)->networkx.floyd_warshall_predecessor_and_distance(GG)
A:networkx.algorithms.shortest_paths.tests.test_dense.GG->networkx.DiGraph().to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_dense.G->networkx.MultiDiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.dist->networkx.floyd_warshall(G)
A:networkx.algorithms.shortest_paths.tests.test_dense.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense.XG4->networkx.Graph()
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setUp(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_distance(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_zero_weight(self)
networkx.tests.test_TestFloyd
networkx.tests.test_TestFloyd.setUp(self)
networkx.tests.test_TestFloyd.test_cycle(self)
networkx.tests.test_TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.tests.test_TestFloyd.test_weight_parameter(self)
networkx.tests.test_TestFloyd.test_weighted(self)
networkx.tests.test_TestFloyd.test_weighted2(self)
networkx.tests.test_TestFloyd.test_zero_distance(self)
networkx.tests.test_TestFloyd.test_zero_weight(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/algorithms/shortest_paths/tests/test_weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG->networkx.MultiDiGraph(self.XG)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG4->networkx.MultiGraph(self.XG4)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.G->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(D, P)->networkx.single_source_dijkstra(GG, 's')
A:networkx.algorithms.shortest_paths.tests.test_weighted.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_weighted.G->networkx.path_graph(5)
A:networkx.algorithms.shortest_paths.tests.test_weighted.path->networkx.bidirectional_dijkstra(G, 1, 6)
A:networkx.algorithms.shortest_paths.tests.test_weighted.(pred, dist)->networkx.goldberg_radzik(G, (0, 0))
A:networkx.algorithms.shortest_paths.tests.test_weighted.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(P, D)->networkx.goldberg_radzik(self.XG, 's')
A:networkx.algorithms.shortest_paths.tests.test_weighted.spl->pl(self.MXG4, 0, cutoff=2)
A:networkx.algorithms.shortest_paths.tests.test_weighted.dp->networkx.bidirectional_dijkstra(G, 'a', 'b')
A:networkx.algorithms.shortest_paths.tests.test_weighted.(p, d)->networkx.dijkstra_predecessor_and_distance(G, 'a')
A:networkx.algorithms.shortest_paths.tests.test_weighted.graph_size->len(G)
A:networkx.algorithms.shortest_paths.tests.test_weighted.paths->networkx.johnson(G)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_negative_weight_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_not_connected(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_others(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestBellmanFordAndGoldbergRadizk.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_graphs(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_negative_weights(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_single_node_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestJohnsonAlgorithm.test_unweighted_graph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_no_path(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_single_source_dijkstra_path_length(self)
networkx.algorithms.shortest_paths.tests.test_weighted._setUp(self)
networkx.algorithms.shortest_paths.tests.test_weighted.validate_length_path(G,s,t,soln_len,length,path)
networkx.algorithms.shortest_paths.tests.test_weighted.validate_path(G,s,t,soln_len,path)
networkx.tests.test_TestBellmanFordAndGoldbergRadizk
networkx.tests.test_TestBellmanFordAndGoldbergRadizk.test_multigraph(self)
networkx.tests.test_TestBellmanFordAndGoldbergRadizk.test_negative_weight_cycle(self)
networkx.tests.test_TestBellmanFordAndGoldbergRadizk.test_not_connected(self)
networkx.tests.test_TestBellmanFordAndGoldbergRadizk.test_others(self)
networkx.tests.test_TestBellmanFordAndGoldbergRadizk.test_single_node_graph(self)
networkx.tests.test_TestJohnsonAlgorithm
networkx.tests.test_TestJohnsonAlgorithm.test_graphs(self)
networkx.tests.test_TestJohnsonAlgorithm.test_negative_cycle(self)
networkx.tests.test_TestJohnsonAlgorithm.test_negative_weights(self)
networkx.tests.test_TestJohnsonAlgorithm.test_single_node_graph(self)
networkx.tests.test_TestJohnsonAlgorithm.test_unweighted_graph(self)
networkx.tests.test_TestWeightedPath
networkx.tests.test_TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.tests.test_TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.tests.test_TestWeightedPath.test_bidirectional_dijkstra_no_path(self)
networkx.tests.test_TestWeightedPath.test_dijkstra(self)
networkx.tests.test_TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.tests.test_TestWeightedPath.test_dijkstra_predecessor(self)
networkx.tests.test_TestWeightedPath.test_negative_edge_cycle(self)
networkx.tests.test_TestWeightedPath.test_single_source_dijkstra_path_length(self)
networkx.tests.test__setUp(self)
networkx.tests.test_validate_length_path(G,s,t,soln_len,length,path)
networkx.tests.test_validate_path(G,s,t,soln_len,path)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/pajek.py----------------------------------------
A:networkx.readwrite.pajek.nodes->G.to_directed().nodes()
A:networkx.readwrite.pajek.nodenumber->dict(zip(nodes, range(1, len(nodes) + 1)))
A:networkx.readwrite.pajek.na->G.to_directed().node.get(n, {})
A:networkx.readwrite.pajek.x->G.to_directed().node.get(n, {}).get('x', 0.0)
A:networkx.readwrite.pajek.y->G.to_directed().node.get(n, {}).get('y', 0.0)
A:networkx.readwrite.pajek.id->int(na.get('id', nodenumber[n]))
A:networkx.readwrite.pajek.shape->G.to_directed().node.get(n, {}).get('shape', 'ellipse')
A:networkx.readwrite.pajek.s->' '.join(map(make_qstr, (nodenumber[u], nodenumber[v], value)))
A:networkx.readwrite.pajek.d->edgedata.copy()
A:networkx.readwrite.pajek.value->edgedata.copy().pop('weight', 1.0)
A:networkx.readwrite.pajek.lines->iter([line.rstrip('\n') for line in lines])
A:networkx.readwrite.pajek.G->G.to_directed().to_directed()
A:networkx.readwrite.pajek.l->next(lines)
A:networkx.readwrite.pajek.(label, name)->next(lines).split()
A:networkx.readwrite.pajek.(l, nnodes)->next(lines).split()
A:networkx.readwrite.pajek.splitline->shlex.split(str(l))
A:networkx.readwrite.pajek.extra_attr->zip(splitline[3::2], splitline[4::2])
A:networkx.readwrite.pajek.u->nodelabels.get(ui, ui)
A:networkx.readwrite.pajek.v->nodelabels.get(vi, vi)
A:networkx.readwrite.pajek.t->str(t)
networkx.generate_pajek(G)
networkx.make_qstr(t)
networkx.parse_pajek(lines)
networkx.read_pajek(path,encoding='UTF-8')
networkx.readwrite.pajek.generate_pajek(G)
networkx.readwrite.pajek.make_qstr(t)
networkx.readwrite.pajek.parse_pajek(lines)
networkx.readwrite.pajek.read_pajek(path,encoding='UTF-8')
networkx.readwrite.pajek.teardown_module(module)
networkx.readwrite.pajek.write_pajek(G,path,encoding='UTF-8')
networkx.teardown_module(module)
networkx.write_pajek(G,path,encoding='UTF-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/graph6.py----------------------------------------
A:networkx.readwrite.graph6.__author__->'\n'.join(['Tomas Gavenciak <gavento@ucw.cz>', 'Aric Hagberg <aric.hagberg@lanl.gov'])
A:networkx.readwrite.graph6.data->n_to_data(n)
A:networkx.readwrite.graph6.(n, data)->data_to_n(data)
A:networkx.readwrite.graph6.G->networkx.Graph()
A:networkx.readwrite.graph6.line->line.strip().strip()
A:networkx.readwrite.graph6.ns->list(G)
A:networkx.readwrite.graph6.n->networkx.Graph().order()
A:networkx.readwrite.graph6.string_data->data_to_graph6(data)
networkx.data_to_graph6(data)
networkx.data_to_n(data)
networkx.generate_graph6(G,nodes=None,header=True)
networkx.graph6_to_data(string)
networkx.n_to_data(n)
networkx.parse_graph6(string)
networkx.read_graph6(path)
networkx.readwrite.graph6.data_to_graph6(data)
networkx.readwrite.graph6.data_to_n(data)
networkx.readwrite.graph6.generate_graph6(G,nodes=None,header=True)
networkx.readwrite.graph6.graph6_to_data(string)
networkx.readwrite.graph6.n_to_data(n)
networkx.readwrite.graph6.parse_graph6(string)
networkx.readwrite.graph6.read_graph6(path)
networkx.readwrite.graph6.teardown_module(module)
networkx.readwrite.graph6.write_graph6(G,path,nodes=None,header=True)
networkx.teardown_module(module)
networkx.write_graph6(G,path,nodes=None,header=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/gml.py----------------------------------------
A:networkx.readwrite.gml.rtp_fix_unicode->RefactoringTool(['lib2to3.fixes.fix_unicode'], {'print_function': True})
A:networkx.readwrite.gml.ch->m.group(0)
A:networkx.readwrite.gml.text->repr(value).upper()
A:networkx.readwrite.gml.code->int(text[2:-1])
A:networkx.readwrite.gml.line->decode_line(line)
A:networkx.readwrite.gml.lines->lines.splitlines().splitlines()
A:networkx.readwrite.gml.G->networkx.relabel_nodes(G, mapping)
A:networkx.readwrite.gml.tokens->tokenize()
A:networkx.readwrite.gml.length->len(line)
A:networkx.readwrite.gml.match->tokenize().match(line, pos)
A:networkx.readwrite.gml.group->tokenize().match(line, pos).group(i + 1)
A:networkx.readwrite.gml.value->stringizer(value)
A:networkx.readwrite.gml.dct->defaultdict(list)
A:networkx.readwrite.gml.curr_token->consume(curr_token, 5, "']'")
A:networkx.readwrite.gml.(curr_token, value)->parse_dict(curr_token)
A:networkx.readwrite.gml.(curr_token, dct)->parse_kv(next(tokens))
A:networkx.readwrite.gml.graph->parse_graph()
A:networkx.readwrite.gml.directed->parse_graph().pop('directed', False)
A:networkx.readwrite.gml.multigraph->networkx.relabel_nodes(G, mapping).is_multigraph()
A:networkx.readwrite.gml.nodes->parse_graph().get('node', [])
A:networkx.readwrite.gml.labels->set()
A:networkx.readwrite.gml.id->pop_attr(node, 'node', 'id', i)
A:networkx.readwrite.gml.label->pop_attr(node, 'node', 'label', i)
A:networkx.readwrite.gml.edges->parse_graph().get('edge', [])
A:networkx.readwrite.gml.source->pop_attr(edge, 'edge', 'source', i)
A:networkx.readwrite.gml.target->pop_attr(edge, 'edge', 'target', i)
A:networkx.readwrite.gml.key->str(key)
A:networkx.readwrite.gml.buf->StringIO()
A:networkx.readwrite.gml.valid_keys->re.compile('^[A-Za-z][0-9A-Za-z]*$')
A:networkx.readwrite.gml.epos->repr(value).upper().rfind('E')
A:networkx.readwrite.gml.node_id->dict(zip(G, range(len(G))))
networkx.escape(text)
networkx.generate_gml(G,stringizer=None)
networkx.literal_destringizer(rep)
networkx.literal_stringizer(value)
networkx.parse_gml(lines,label='label',destringizer=None)
networkx.parse_gml_lines(lines,label,destringizer)
networkx.read_gml(path,label='label',destringizer=None)
networkx.readwrite.gml.escape(text)
networkx.readwrite.gml.generate_gml(G,stringizer=None)
networkx.readwrite.gml.literal_destringizer(rep)
networkx.readwrite.gml.literal_stringizer(value)
networkx.readwrite.gml.parse_gml(lines,label='label',destringizer=None)
networkx.readwrite.gml.parse_gml_lines(lines,label,destringizer)
networkx.readwrite.gml.read_gml(path,label='label',destringizer=None)
networkx.readwrite.gml.teardown_module(module)
networkx.readwrite.gml.unescape(text)
networkx.readwrite.gml.write_gml(G,path,stringizer=None)
networkx.teardown_module(module)
networkx.unescape(text)
networkx.write_gml(G,path,stringizer=None)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/p2g.py----------------------------------------
A:networkx.readwrite.p2g.__author__->'\n'.join(['Willem Ligtenberg (w.p.a.ligtenberg@tue.nl)', 'Aric Hagberg (aric.hagberg@gmail.com)'])
A:networkx.readwrite.p2g.nodes->networkx.MultiDiGraph(name=description, selfloops=True).nodes()
A:networkx.readwrite.p2g.nodenumber->dict(zip(nodes, range(len(nodes))))
A:networkx.readwrite.p2g.G->networkx.MultiDiGraph(name=description, selfloops=True)
A:networkx.readwrite.p2g.description->next(lines).strip()
A:networkx.readwrite.p2g.(nnodes, nedges)->map(int, next(lines).split())
A:networkx.readwrite.p2g.n->next(lines).strip()
A:networkx.readwrite.p2g.nbrs[n]->map(int, next(lines).split())
networkx.p2g.parse_p2g(lines)
networkx.p2g.read_p2g(path,encoding='utf-8')
networkx.p2g.write_p2g(G,path,encoding='utf-8')
networkx.readwrite.p2g.parse_p2g(lines)
networkx.readwrite.p2g.read_p2g(path,encoding='utf-8')
networkx.readwrite.p2g.write_p2g(G,path,encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/nx_yaml.py----------------------------------------
A:networkx.readwrite.nx_yaml.G->yaml.load(path)
networkx.read_yaml(path)
networkx.readwrite.nx_yaml.read_yaml(path)
networkx.readwrite.nx_yaml.setup_module(module)
networkx.readwrite.nx_yaml.teardown_module(module)
networkx.readwrite.nx_yaml.write_yaml(G,path,encoding='UTF-8',**kwds)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_yaml(G,path,encoding='UTF-8',**kwds)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/graphml.py----------------------------------------
A:networkx.readwrite.graphml.__author__->'\n'.join(['Salim Fadhley', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.readwrite.graphml.writer->GraphMLWriter(encoding=encoding, prettyprint=prettyprint)
A:networkx.readwrite.graphml.reader->GraphMLReader(node_type=node_type)
A:networkx.readwrite.graphml.glist->list(reader(string=graphml_string))
A:networkx.readwrite.graphml.SCHEMALOCATION->' '.join(['http://graphml.graphdrawing.org/xmlns', 'http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'])
A:networkx.readwrite.graphml.xml_type->dict(types)
A:networkx.readwrite.graphml.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.graphml.self.xml->fromstring(string)
A:networkx.readwrite.graphml.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.graphml.key_element->Element('key', **key_kwargs)
A:networkx.readwrite.graphml.default_element->Element('default')
A:networkx.readwrite.graphml.default_element.text->make_str(default)
A:networkx.readwrite.graphml.key_id->self.get_key(name, self.xml_type[element_type], scope, default)
A:networkx.readwrite.graphml.data_element->Element('data', key=key_id)
A:networkx.readwrite.graphml.data_element.text->make_str(value)
A:networkx.readwrite.graphml.default_value->k.find('{%s}default' % self.NS_GRAPHML).get(k)
A:networkx.readwrite.graphml.obj->self.add_data(make_str(k), type(v), make_str(v), scope=scope, default=default_value)
A:networkx.readwrite.graphml.node_element->Element('node', id=make_str(node))
A:networkx.readwrite.graphml.default->k.find('{%s}default' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.edge_element->Element('edge', source=make_str(u), target=make_str(v))
A:networkx.readwrite.graphml.graphid->networkx.MultiGraph().graph.pop('id', None)
A:networkx.readwrite.graphml.graph_element->Element('graph', edgedefault=default_edge_type, id=graphid)
A:networkx.readwrite.graphml.data->self.decode_data_elements(graphml_keys, edge_element)
A:networkx.readwrite.graphml.document->ElementTree(self.xml)
A:networkx.readwrite.graphml.(keys, defaults)->self.find_graphml_keys(self.xml)
A:networkx.readwrite.graphml.edgedefault->graph_xml.get('edgedefault', None)
A:networkx.readwrite.graphml.G->networkx.MultiGraph()
A:networkx.readwrite.graphml.hyperedge->graph_xml.find('{%s}hyperedge' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.ports->Element('edge', source=make_str(u), target=make_str(v)).find('{%s}port' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.node_id->self.node_type(node_xml.get('id'))
A:networkx.readwrite.graphml.directed->Element('edge', source=make_str(u), target=make_str(v)).get('directed')
A:networkx.readwrite.graphml.source->self.node_type(edge_element.get('source'))
A:networkx.readwrite.graphml.target->self.node_type(edge_element.get('target'))
A:networkx.readwrite.graphml.edge_id->self.decode_data_elements(graphml_keys, edge_element).pop('key', None)
A:networkx.readwrite.graphml.key->Element('data', key=key_id).get('key')
A:networkx.readwrite.graphml.data[data_name]->data_type(text)
A:networkx.readwrite.graphml.geometry->Element('data', key=key_id).find('{%s}%s/{%s}Geometry' % (self.NS_Y, node_type, self.NS_Y))
A:networkx.readwrite.graphml.data['x']->Element('data', key=key_id).find('{%s}%s/{%s}Geometry' % (self.NS_Y, node_type, self.NS_Y)).get('x')
A:networkx.readwrite.graphml.data['y']->Element('data', key=key_id).find('{%s}%s/{%s}Geometry' % (self.NS_Y, node_type, self.NS_Y)).get('y')
A:networkx.readwrite.graphml.node_label->Element('data', key=key_id).find('{%s}%s/{%s}NodeLabel' % (self.NS_Y, node_type, self.NS_Y))
A:networkx.readwrite.graphml.edge_label->Element('data', key=key_id).find('{%s}%s/{%s}EdgeLabel' % (self.NS_Y, e, self.NS_Y))
A:networkx.readwrite.graphml.attr_id->k.get('id')
A:networkx.readwrite.graphml.attr_type->k.get('attr.type')
A:networkx.readwrite.graphml.attr_name->k.get('attr.name')
A:networkx.readwrite.graphml.yfiles_type->k.get('yfiles.type')
networkx.GraphML(object)
networkx.GraphMLReader(self,node_type=str)
networkx.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.GraphMLReader.add_node(self,G,node_xml,graphml_keys)
networkx.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults)
networkx.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.GraphMLWriter.__str__(self)
networkx.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.GraphMLWriter.add_edges(self,G,graph_element)
networkx.GraphMLWriter.add_graph_element(self,G)
networkx.GraphMLWriter.add_graphs(self,graph_list)
networkx.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.GraphMLWriter.dump(self,stream)
networkx.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.GraphMLWriter.indent(self,elem,level=0)
networkx.generate_graphml(G,encoding='utf-8',prettyprint=True)
networkx.parse_graphml(graphml_string,node_type=str)
networkx.read_graphml(path,node_type=str)
networkx.readwrite.graphml.GraphML(object)
networkx.readwrite.graphml.GraphMLReader(self,node_type=str)
networkx.readwrite.graphml.GraphMLReader.__init__(self,node_type=str)
networkx.readwrite.graphml.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.readwrite.graphml.GraphMLReader.add_node(self,G,node_xml,graphml_keys)
networkx.readwrite.graphml.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.readwrite.graphml.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.readwrite.graphml.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults)
networkx.readwrite.graphml.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.GraphMLWriter.__init__(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.GraphMLWriter.__str__(self)
networkx.readwrite.graphml.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.graphml.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.readwrite.graphml.GraphMLWriter.add_edges(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.add_graph_element(self,G)
networkx.readwrite.graphml.GraphMLWriter.add_graphs(self,graph_list)
networkx.readwrite.graphml.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.dump(self,stream)
networkx.readwrite.graphml.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.readwrite.graphml.GraphMLWriter.indent(self,elem,level=0)
networkx.readwrite.graphml.generate_graphml(G,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.parse_graphml(graphml_string,node_type=str)
networkx.readwrite.graphml.read_graphml(path,node_type=str)
networkx.readwrite.graphml.setup_module(module)
networkx.readwrite.graphml.teardown_module(module)
networkx.readwrite.graphml.write_graphml(G,path,encoding='utf-8',prettyprint=True)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_graphml(G,path,encoding='utf-8',prettyprint=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/gexf.py----------------------------------------
A:networkx.readwrite.gexf.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.readwrite.gexf.writer->GEXFWriter(encoding=encoding, prettyprint=prettyprint, version=version)
A:networkx.readwrite.gexf.reader->GEXFReader(node_type=node_type, version=version)
A:networkx.readwrite.gexf.G->networkx.Graph(G)
A:networkx.readwrite.gexf.blurb->chr(1245)
A:networkx.readwrite.gexf.xml_type->dict(types)
A:networkx.readwrite.gexf.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.gexf.d->self.versions.get(version)
A:networkx.readwrite.gexf.self.xml->ElementTree(file=stream)
A:networkx.readwrite.gexf.self.edge_id->itertools.count()
A:networkx.readwrite.gexf.self.attr_id->itertools.count()
A:networkx.readwrite.gexf.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.gexf.graph_element->Element('graph', defaultedgetype=default, mode=mode)
A:networkx.readwrite.gexf.nodes_element->graph_xml.find('{%s}nodes' % self.NS_GEXF)
A:networkx.readwrite.gexf.node_data->self.add_attributes('node', node_element, node_data, default)
A:networkx.readwrite.gexf.node_id->self.node_type(node_id)
A:networkx.readwrite.gexf.label->make_str(node_data.pop('label', node))
A:networkx.readwrite.gexf.pid->self.add_attributes('node', node_element, node_data, default).pop('pid')
A:networkx.readwrite.gexf.kw['pid']->make_str(pid)
A:networkx.readwrite.gexf.node_element->Element('node', **kw)
A:networkx.readwrite.gexf.default->k.find('{%s}default' % self.NS_GEXF)
A:networkx.readwrite.gexf.edge_data->self.add_attributes('edge', edge_element, edge_data, default)
A:networkx.readwrite.gexf.edge_id->Element('edge', source=source_id, target=target_id, **kw).get('id')
A:networkx.readwrite.gexf.edges_element->graph_xml.find('{%s}edges' % self.NS_GEXF)
A:networkx.readwrite.gexf.edge_weight->self.add_attributes('edge', edge_element, edge_data, default).pop('weight')
A:networkx.readwrite.gexf.kw['weight']->make_str(edge_weight)
A:networkx.readwrite.gexf.edge_type->self.add_attributes('edge', edge_element, edge_data, default).pop('type')
A:networkx.readwrite.gexf.kw['type']->make_str(edge_type)
A:networkx.readwrite.gexf.start->self.python_type[ttype](a.get('start'))
A:networkx.readwrite.gexf.kw['start']->make_str(start)
A:networkx.readwrite.gexf.end->self.python_type[ttype](a.get('end'))
A:networkx.readwrite.gexf.kw['end']->make_str(end)
A:networkx.readwrite.gexf.source_id->make_str(G.node[u].get('id', u))
A:networkx.readwrite.gexf.target_id->make_str(G.node[v].get('id', v))
A:networkx.readwrite.gexf.edge_element->Element('edge', source=source_id, target=target_id, **kw)
A:networkx.readwrite.gexf.attvalues->Element('attvalues')
A:networkx.readwrite.gexf.val_type->type(val)
A:networkx.readwrite.gexf.attr_id->k.get('id')
A:networkx.readwrite.gexf.e->Element('spell')
A:networkx.readwrite.gexf.e.attrib['value']->make_str(v)
A:networkx.readwrite.gexf.e.attrib['start']->make_str(start)
A:networkx.readwrite.gexf.e.attrib['end']->make_str(end)
A:networkx.readwrite.gexf.new_id->str(next(self.attr_id))
A:networkx.readwrite.gexf.attribute->Element('attribute', **attr_kwargs)
A:networkx.readwrite.gexf.default_title->k.find('{%s}default' % self.NS_GEXF).get(title)
A:networkx.readwrite.gexf.default_element->Element('default')
A:networkx.readwrite.gexf.default_element.text->make_str(default_title)
A:networkx.readwrite.gexf.a_class->a.get('class')
A:networkx.readwrite.gexf.a_mode->a.get('mode', 'static')
A:networkx.readwrite.gexf.attributes_element->Element('attributes', **attr_kwargs)
A:networkx.readwrite.gexf.viz->self.add_attributes('node', node_element, node_data, default).pop('viz', False)
A:networkx.readwrite.gexf.color->node_xml.find('{%s}color' % self.NS_VIZ)
A:networkx.readwrite.gexf.size->node_xml.find('{%s}size' % self.NS_VIZ)
A:networkx.readwrite.gexf.thickness->node_xml.find('{%s}thickness' % self.NS_VIZ)
A:networkx.readwrite.gexf.shape->node_xml.find('{%s}shape' % self.NS_VIZ)
A:networkx.readwrite.gexf.position->node_xml.find('{%s}position' % self.NS_VIZ)
A:networkx.readwrite.gexf.parents->self.add_attributes('node', node_element, node_data, default).pop('parents', False)
A:networkx.readwrite.gexf.parents_element->node_xml.find('{%s}parents' % self.NS_GEXF)
A:networkx.readwrite.gexf.e.attrib['for']->str(p)
A:networkx.readwrite.gexf.slices->node_or_edge_data.pop('slices', False)
A:networkx.readwrite.gexf.slices_element->node_or_edge_xml.find('{%s}slices' % self.NS_GEXF)
A:networkx.readwrite.gexf.spells->node_or_edge_data.pop('spells', False)
A:networkx.readwrite.gexf.spells_element->node_or_edge_xml.find('{%s}spells' % self.NS_GEXF)
A:networkx.readwrite.gexf.document->ElementTree(self.xml)
A:networkx.readwrite.gexf.g->self.xml.find('{%s}graph' % self.NS_GEXF)
A:networkx.readwrite.gexf.edgedefault->graph_xml.get('defaultedgetype', None)
A:networkx.readwrite.gexf.graph_start->graph_xml.get('start')
A:networkx.readwrite.gexf.graph_end->graph_xml.get('end')
A:networkx.readwrite.gexf.graph_mode->graph_xml.get('mode', '')
A:networkx.readwrite.gexf.self.timeformat->graph_xml.get('timeformat')
A:networkx.readwrite.gexf.attributes_elements->graph_xml.findall('{%s}attributes' % self.NS_GEXF)
A:networkx.readwrite.gexf.attr_class->a.get('class')
A:networkx.readwrite.gexf.(na, nd)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.(ea, ed)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.data->self.add_spells(data, edge_element)
A:networkx.readwrite.gexf.node_label->node_xml.get('label')
A:networkx.readwrite.gexf.node_pid->node_xml.get('pid', node_pid)
A:networkx.readwrite.gexf.subnodes->node_xml.find('{%s}nodes' % self.NS_GEXF)
A:networkx.readwrite.gexf.node_start->xml.get('start')
A:networkx.readwrite.gexf.data['start']->self.python_type[ttype](node_start)
A:networkx.readwrite.gexf.node_end->xml.get('end')
A:networkx.readwrite.gexf.data['end']->self.python_type[ttype](node_end)
A:networkx.readwrite.gexf.viz['size']->float(size.get('value'))
A:networkx.readwrite.gexf.viz['thickness']->float(thickness.get('value'))
A:networkx.readwrite.gexf.viz['shape']->node_xml.find('{%s}shape' % self.NS_VIZ).get('uri')
A:networkx.readwrite.gexf.parent->p.get('for')
A:networkx.readwrite.gexf.edge_direction->Element('edge', source=source_id, target=target_id, **kw).get('type')
A:networkx.readwrite.gexf.source->self.node_type(source)
A:networkx.readwrite.gexf.target->self.node_type(target)
A:networkx.readwrite.gexf.multigraph_key->self.add_spells(data, edge_element).pop('networkx_key', None)
A:networkx.readwrite.gexf.weight->Element('edge', source=source_id, target=target_id, **kw).get('weight')
A:networkx.readwrite.gexf.data['weight']->float(weight)
A:networkx.readwrite.gexf.edge_label->Element('edge', source=source_id, target=target_id, **kw).get('label')
A:networkx.readwrite.gexf.attr_element->obj_xml.find('{%s}attvalues' % self.NS_GEXF)
A:networkx.readwrite.gexf.key->a.get('for')
A:networkx.readwrite.gexf.value->self.python_type[atype](default.text)
A:networkx.readwrite.gexf.mode->Element('attributes', **attr_kwargs).get('mode')
A:networkx.readwrite.gexf.title->k.get('title')
A:networkx.readwrite.gexf.atype->k.get('type')
A:networkx.readwrite.gexf.(x, y)->zip(*mapping)
A:networkx.readwrite.gexf.mapping->dict(mapping)
A:networkx.readwrite.gexf.H->networkx.relabel_nodes(G, mapping)
networkx.GEXF(object)
networkx.GEXF.set_version(self,version)
networkx.GEXFReader(self,node_type=None,version='1.1draft')
networkx.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.GEXFReader.add_parents(self,data,node_xml)
networkx.GEXFReader.add_slices(self,data,node_or_edge_xml)
networkx.GEXFReader.add_spells(self,data,node_or_edge_xml)
networkx.GEXFReader.add_start_end(self,data,xml)
networkx.GEXFReader.add_viz(self,data,node_xml)
networkx.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.GEXFReader.make_graph(self,graph_xml)
networkx.GEXFWriter(self,graph=None,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.GEXFWriter.__str__(self)
networkx.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.GEXFWriter.add_edges(self,G,graph_element)
networkx.GEXFWriter.add_graph(self,G)
networkx.GEXFWriter.add_nodes(self,G,graph_element)
networkx.GEXFWriter.add_parents(self,node_element,node_data)
networkx.GEXFWriter.add_slices(self,node_or_edge_element,node_or_edge_data)
networkx.GEXFWriter.add_spells(self,node_or_edge_element,node_or_edge_data)
networkx.GEXFWriter.add_viz(self,element,node_data)
networkx.GEXFWriter.alter_graph_mode_timeformat(self,start_or_end)
networkx.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.GEXFWriter.indent(self,elem,level=0)
networkx.GEXFWriter.write(self,fh)
networkx.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.read_gexf(path,node_type=None,relabel=False,version='1.1draft')
networkx.readwrite.gexf.GEXF(object)
networkx.readwrite.gexf.GEXF.set_version(self,version)
networkx.readwrite.gexf.GEXFReader(self,node_type=None,version='1.1draft')
networkx.readwrite.gexf.GEXFReader.__init__(self,node_type=None,version='1.1draft')
networkx.readwrite.gexf.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.readwrite.gexf.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.readwrite.gexf.GEXFReader.add_parents(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.add_slices(self,data,node_or_edge_xml)
networkx.readwrite.gexf.GEXFReader.add_spells(self,data,node_or_edge_xml)
networkx.readwrite.gexf.GEXFReader.add_start_end(self,data,xml)
networkx.readwrite.gexf.GEXFReader.add_viz(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.readwrite.gexf.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.readwrite.gexf.GEXFReader.make_graph(self,graph_xml)
networkx.readwrite.gexf.GEXFWriter(self,graph=None,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.GEXFWriter.__init__(self,graph=None,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.GEXFWriter.__str__(self)
networkx.readwrite.gexf.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.readwrite.gexf.GEXFWriter.add_edges(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_graph(self,G)
networkx.readwrite.gexf.GEXFWriter.add_nodes(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_parents(self,node_element,node_data)
networkx.readwrite.gexf.GEXFWriter.add_slices(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.gexf.GEXFWriter.add_spells(self,node_or_edge_element,node_or_edge_data)
networkx.readwrite.gexf.GEXFWriter.add_viz(self,element,node_data)
networkx.readwrite.gexf.GEXFWriter.alter_graph_mode_timeformat(self,start_or_end)
networkx.readwrite.gexf.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.readwrite.gexf.GEXFWriter.indent(self,elem,level=0)
networkx.readwrite.gexf.GEXFWriter.write(self,fh)
networkx.readwrite.gexf.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.read_gexf(path,node_type=None,relabel=False,version='1.1draft')
networkx.readwrite.gexf.relabel_gexf_graph(G)
networkx.readwrite.gexf.setup_module(module)
networkx.readwrite.gexf.teardown_module(module)
networkx.readwrite.gexf.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.relabel_gexf_graph(G)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.1draft')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/adjlist.py----------------------------------------
A:networkx.readwrite.adjlist.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Dan Schult <dschult@colgate.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.readwrite.adjlist.directed->networkx.Graph().is_directed()
A:networkx.readwrite.adjlist.seen->set()
A:networkx.readwrite.adjlist.G->networkx.Graph()
A:networkx.readwrite.adjlist.p->line.find(comments)
A:networkx.readwrite.adjlist.vlist->map(nodetype, vlist)
A:networkx.readwrite.adjlist.u->nodetype(u)
networkx.generate_adjlist(G,delimiter='')
networkx.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.adjlist.generate_adjlist(G,delimiter='')
networkx.readwrite.adjlist.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.readwrite.adjlist.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.adjlist.teardown_module(module)
networkx.readwrite.adjlist.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/sparse6.py----------------------------------------
A:networkx.readwrite.sparse6.__author__->'\n'.join(['Tomas Gavenciak <gavento@ucw.cz>', 'Aric Hagberg <aric.hagberg@lanl.gov'])
A:networkx.readwrite.sparse6.(n, data)->data_to_n(graph6_to_data(string[1:]))
A:networkx.readwrite.sparse6.chunks->iter(data)
A:networkx.readwrite.sparse6.d->next(chunks)
A:networkx.readwrite.sparse6.G->networkx.Graph(G)
A:networkx.readwrite.sparse6.line->line.strip().strip()
A:networkx.readwrite.sparse6.n->networkx.Graph(G).order()
A:networkx.readwrite.sparse6.ns->list(nodes)
A:networkx.readwrite.sparse6.ndict->dict(((ns[i], i) for i in range(len(ns))))
networkx.generate_sparse6(G,nodes=None,header=True)
networkx.parse_sparse6(string)
networkx.read_sparse6(path)
networkx.readwrite.sparse6.generate_sparse6(G,nodes=None,header=True)
networkx.readwrite.sparse6.parse_sparse6(string)
networkx.readwrite.sparse6.read_sparse6(path)
networkx.readwrite.sparse6.teardown_module(test)
networkx.readwrite.sparse6.write_sparse6(G,path,nodes=None,header=True)
networkx.teardown_module(test)
networkx.write_sparse6(G,path,nodes=None,header=True)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/nx_shp.py----------------------------------------
A:networkx.readwrite.nx_shp.net->networkx.DiGraph()
A:networkx.readwrite.nx_shp.shp->ogr.Open(path)
A:networkx.readwrite.nx_shp.g->netgeometry(e, data)
A:networkx.readwrite.nx_shp.attributes->dict(zip(fields, flddata))
A:networkx.readwrite.nx_shp.attributes['ShpName']->lyr.GetName()
A:networkx.readwrite.nx_shp.attributes['Wkb']->ogr.Geometry(ogr.wkbLineString).ExportToWkb()
A:networkx.readwrite.nx_shp.attributes['Wkt']->ogr.Geometry(ogr.wkbLineString).ExportToWkt()
A:networkx.readwrite.nx_shp.attributes['Json']->ogr.Geometry(ogr.wkbLineString).ExportToJson()
A:networkx.readwrite.nx_shp.pt1->netgeometry(e, data).GetPoint_2D(i)
A:networkx.readwrite.nx_shp.pt2->netgeometry(e, data).GetPoint_2D(i + 1)
A:networkx.readwrite.nx_shp.segment->ogr.Geometry(ogr.wkbLineString)
A:networkx.readwrite.nx_shp.geom->ogr.Geometry(ogr.wkbPoint)
A:networkx.readwrite.nx_shp.feature->ogr.Feature(lyr.GetLayerDefn())
A:networkx.readwrite.nx_shp.drv->ogr.GetDriverByName('ESRI Shapefile')
A:networkx.readwrite.nx_shp.shpdir->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir)
A:networkx.readwrite.nx_shp.nodes->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir).CreateLayer('nodes', None, ogr.wkbPoint)
A:networkx.readwrite.nx_shp.edges->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir).CreateLayer('edges', None, ogr.wkbLineString)
A:networkx.readwrite.nx_shp.data->G.get_edge_data(*e)
A:networkx.readwrite.nx_shp.newfield->ogr.FieldDefn(key, fields[key])
networkx.read_shp(path,simplify=True)
networkx.readwrite.nx_shp.read_shp(path,simplify=True)
networkx.readwrite.nx_shp.setup_module(module)
networkx.readwrite.nx_shp.write_shp(G,outdir)
networkx.setup_module(module)
networkx.write_shp(G,outdir)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/multiline_adjlist.py----------------------------------------
A:networkx.readwrite.multiline_adjlist.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Dan Schult <dschult@colgate.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.readwrite.multiline_adjlist.deg->int(deg)
A:networkx.readwrite.multiline_adjlist.seen->set()
A:networkx.readwrite.multiline_adjlist.G->networkx.Graph()
A:networkx.readwrite.multiline_adjlist.p->next(lines).find(comments)
A:networkx.readwrite.multiline_adjlist.(u, deg)->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.u->nodetype(u)
A:networkx.readwrite.multiline_adjlist.line->next(lines)
A:networkx.readwrite.multiline_adjlist.vlist->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.numb->len(vlist)
A:networkx.readwrite.multiline_adjlist.v->nodetype(v)
A:networkx.readwrite.multiline_adjlist.data->''.join(vlist)
A:networkx.readwrite.multiline_adjlist.edgedata->literal_eval(data)
networkx.generate_multiline_adjlist(G,delimiter='')
networkx.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.multiline_adjlist.generate_multiline_adjlist(G,delimiter='')
networkx.readwrite.multiline_adjlist.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.readwrite.multiline_adjlist.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.multiline_adjlist.teardown_module(module)
networkx.readwrite.multiline_adjlist.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/leda.py----------------------------------------
A:networkx.readwrite.leda.G->networkx.Graph()
A:networkx.readwrite.leda.lines->iter([line.rstrip('\n') for line in lines if not (line.startswith('#') or line.startswith('\n') or line == '')])
A:networkx.readwrite.leda.du->int(next(lines))
A:networkx.readwrite.leda.n->int(next(lines))
A:networkx.readwrite.leda.symbol->str(i)
A:networkx.readwrite.leda.m->int(next(lines))
A:networkx.readwrite.leda.(s, t, reversal, label)->next(lines).split()
networkx.parse_leda(lines)
networkx.read_leda(path,encoding='UTF-8')
networkx.readwrite.leda.parse_leda(lines)
networkx.readwrite.leda.read_leda(path,encoding='UTF-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/gpickle.py----------------------------------------
networkx.read_gpickle(path)
networkx.readwrite.gpickle.read_gpickle(path)
networkx.readwrite.gpickle.teardown_module(module)
networkx.readwrite.gpickle.write_gpickle(G,path,protocol=pickle.HIGHEST_PROTOCOL)
networkx.teardown_module(module)
networkx.write_gpickle(G,path,protocol=pickle.HIGHEST_PROTOCOL)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/edgelist.py----------------------------------------
A:networkx.readwrite.edgelist.G->networkx.Graph()
A:networkx.readwrite.edgelist.p->line.find(comments)
A:networkx.readwrite.edgelist.s->line.strip().split(delimiter)
A:networkx.readwrite.edgelist.u->nodetype(u)
A:networkx.readwrite.edgelist.v->nodetype(v)
A:networkx.readwrite.edgelist.edgedata->dict(literal_eval(' '.join(d)))
A:networkx.readwrite.edgelist.edge_value->edge_type(edge_value)
networkx.generate_edgelist(G,delimiter='',data=True)
networkx.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.edgelist.generate_edgelist(G,delimiter='',data=True)
networkx.readwrite.edgelist.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.readwrite.edgelist.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.readwrite.edgelist.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.edgelist.teardown_module(module)
networkx.readwrite.edgelist.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.readwrite.edgelist.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_gpickle.py----------------------------------------
A:networkx.readwrite.tests.test_gpickle.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_gpickle.DG->networkx.DiGraph(G)
A:networkx.readwrite.tests.test_gpickle.MG->networkx.MultiGraph(G)
A:networkx.readwrite.tests.test_gpickle.MDG->networkx.MultiDiGraph(G)
A:networkx.readwrite.tests.test_gpickle.fG->networkx.Graph(name='test').copy()
A:networkx.readwrite.tests.test_gpickle.fDG->networkx.DiGraph(G).copy()
A:networkx.readwrite.tests.test_gpickle.fMG->networkx.MultiGraph(G).copy()
A:networkx.readwrite.tests.test_gpickle.fMDG->networkx.MultiDiGraph(G).copy()
A:networkx.readwrite.tests.test_gpickle.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_gpickle.Gin->networkx.read_gpickle(f)
networkx.readwrite.tests.test_gpickle.TestGpickle(object)
networkx.readwrite.tests.test_gpickle.TestGpickle.setUp(self)
networkx.readwrite.tests.test_gpickle.TestGpickle.test_gpickle(self)
networkx.readwrite.tests.test_gpickle.TestGpickle.test_protocol(self)
networkx.tests.test_TestGpickle(object)
networkx.tests.test_TestGpickle.setUp(self)
networkx.tests.test_TestGpickle.test_gpickle(self)
networkx.tests.test_TestGpickle.test_protocol(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_adjlist.py----------------------------------------
A:networkx.readwrite.tests.test_adjlist.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_adjlist.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_adjlist.self.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_adjlist.self.XDG->networkx.MultiDiGraph(self.XG)
A:networkx.readwrite.tests.test_adjlist.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_adjlist.G->networkx.path_graph(3)
A:networkx.readwrite.tests.test_adjlist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_adjlist.H->networkx.read_multiline_adjlist(fh, nodetype=int, delimiter=':')
A:networkx.readwrite.tests.test_adjlist.blurb->chr(1245)
A:networkx.readwrite.tests.test_adjlist.H2->networkx.read_multiline_adjlist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_adjlist.fh->io.BytesIO()
networkx.readwrite.tests.test_adjlist.TestAdjlist
networkx.readwrite.tests.test_adjlist.TestAdjlist.setUp(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_delimiter(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_error(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setUp(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_delimiter(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)
networkx.tests.test_TestAdjlist
networkx.tests.test_TestAdjlist.setUp(self)
networkx.tests.test_TestAdjlist.test_adjlist_delimiter(self)
networkx.tests.test_TestAdjlist.test_adjlist_digraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_digraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_graph(self)
networkx.tests.test_TestAdjlist.test_adjlist_integers(self)
networkx.tests.test_TestAdjlist.test_adjlist_multidigraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_multigraph(self)
networkx.tests.test_TestAdjlist.test_latin1(self)
networkx.tests.test_TestAdjlist.test_latin1_error(self)
networkx.tests.test_TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.tests.test_TestAdjlist.test_unicode(self)
networkx.tests.test_TestMultilineAdjlist
networkx.tests.test_TestMultilineAdjlist.setUp(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_delimiter(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_p2g.py----------------------------------------
A:networkx.readwrite.tests.test_p2g.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_p2g.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_p2g.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_p2g.G->networkx.DiGraph()
A:networkx.readwrite.tests.test_p2g.fh->io.BytesIO()
A:networkx.readwrite.tests.test_p2g.r->io.BytesIO().read()
A:networkx.readwrite.tests.test_p2g.H->read_p2g(fh)
networkx.readwrite.tests.test_p2g.TestP2G
networkx.readwrite.tests.test_p2g.TestP2G.setUp(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g(self)
networkx.tests.test_p2g.TestP2G
networkx.tests.test_p2g.TestP2G.setUp(self)
networkx.tests.test_p2g.TestP2G.test_read_p2g(self)
networkx.tests.test_p2g.TestP2G.test_write_p2g(self)
networkx.tests.test_p2g.TestP2G.test_write_read_p2g(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_gml.py----------------------------------------
A:networkx.readwrite.tests.test_gml.G->networkx.Graph()
A:networkx.readwrite.tests.test_gml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_gml.fh->io.BytesIO(data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gml.Gin->networkx.read_gml(fname, label='label')
A:networkx.readwrite.tests.test_gml.data->tempfile.NamedTemporaryFile().read().strip().decode('ascii')
A:networkx.readwrite.tests.test_gml.fobj->tempfile.NamedTemporaryFile()
A:networkx.readwrite.tests.test_gml.gml->'\n'.join(nx.generate_gml(G))
A:networkx.readwrite.tests.test_gml.G.graph['data']->frozenset([1, 2, 3])
networkx.readwrite.tests.test_gml.TestGraph(object)
networkx.readwrite.tests.test_gml.TestGraph.setUp(self)
networkx.readwrite.tests.test_gml.TestGraph.test_data_types(self)
networkx.readwrite.tests.test_gml.TestGraph.test_escape_unescape(self)
networkx.readwrite.tests.test_gml.TestGraph.test_exceptions(self)
networkx.readwrite.tests.test_gml.TestGraph.test_graph_types(self)
networkx.readwrite.tests.test_gml.TestGraph.test_name(self)
networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_quotes(self)
networkx.readwrite.tests.test_gml.TestGraph.test_read_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate(self)
networkx.readwrite.tests.test_gml.TestGraph.test_tuplelabels(self)
networkx.tests.test_TestGraph(object)
networkx.tests.test_TestGraph.setUp(self)
networkx.tests.test_TestGraph.test_data_types(self)
networkx.tests.test_TestGraph.test_escape_unescape(self)
networkx.tests.test_TestGraph.test_exceptions(self)
networkx.tests.test_TestGraph.test_graph_types(self)
networkx.tests.test_TestGraph.test_name(self)
networkx.tests.test_TestGraph.test_parse_gml(self)
networkx.tests.test_TestGraph.test_quotes(self)
networkx.tests.test_TestGraph.test_read_gml(self)
networkx.tests.test_TestGraph.test_relabel_duplicate(self)
networkx.tests.test_TestGraph.test_tuplelabels(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_shp.py----------------------------------------
A:networkx.readwrite.tests.test_shp.lyr->createlayer(shp)
A:networkx.readwrite.tests.test_shp.namedef->osgeo.ogr.FieldDefn('Name', ogr.OFTString)
A:networkx.readwrite.tests.test_shp.drv->osgeo.ogr.GetDriverByName('ESRI Shapefile')
A:networkx.readwrite.tests.test_shp.testdir->os.path.join(tempfile.gettempdir(), 'shpdir')
A:networkx.readwrite.tests.test_shp.shppath->os.path.join(tempfile.gettempdir(), 'tmpshp.shp')
A:networkx.readwrite.tests.test_shp.shp->osgeo.ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(shppath)
A:networkx.readwrite.tests.test_shp.feat->osgeo.ogr.Feature(lyr.GetLayerDefn())
A:networkx.readwrite.tests.test_shp.g->osgeo.ogr.Geometry(ogr.wkbLineString)
A:networkx.readwrite.tests.test_shp.expected->networkx.DiGraph()
A:networkx.readwrite.tests.test_shp.G->networkx.DiGraph()
A:networkx.readwrite.tests.test_shp.feature->createlayer(shp).GetNextFeature()
A:networkx.readwrite.tests.test_shp.tpath->os.path.join(tempfile.gettempdir(), 'shpdir')
A:networkx.readwrite.tests.test_shp.shpdir->osgeo.ogr.Open(tpath)
A:networkx.readwrite.tests.test_shp.ref->createlayer(shp).GetNextFeature().GetGeometryRef()
A:networkx.readwrite.tests.test_shp.name->createlayer(shp).GetNextFeature().GetFieldAsString('Name')
A:networkx.readwrite.tests.test_shp.edges->osgeo.ogr.Open(tpath).GetLayerByName('edges')
networkx.readwrite.tests.test_shp.TestShp(object)
networkx.readwrite.tests.test_shp.TestShp.checkgeom(self,lyr,expected)
networkx.readwrite.tests.test_shp.TestShp.deletetmp(self,drv,*paths)
networkx.readwrite.tests.test_shp.TestShp.setUp(self)
networkx.readwrite.tests.test_shp.TestShp.setupClass(cls)
networkx.readwrite.tests.test_shp.TestShp.tearDown(self)
networkx.readwrite.tests.test_shp.TestShp.test_attributeexport(self)
networkx.readwrite.tests.test_shp.TestShp.test_geometryexport(self)
networkx.readwrite.tests.test_shp.TestShp.test_wkt_export(self)
networkx.readwrite.tests.test_shp.TestShp.testload(self)
networkx.tests.test_shp.TestShp(object)
networkx.tests.test_shp.TestShp.checkgeom(self,lyr,expected)
networkx.tests.test_shp.TestShp.deletetmp(self,drv,*paths)
networkx.tests.test_shp.TestShp.setUp(self)
networkx.tests.test_shp.TestShp.setupClass(cls)
networkx.tests.test_shp.TestShp.tearDown(self)
networkx.tests.test_shp.TestShp.test_attributeexport(self)
networkx.tests.test_shp.TestShp.test_geometryexport(self)
networkx.tests.test_shp.TestShp.test_wkt_export(self)
networkx.tests.test_shp.TestShp.testload(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_sparse6.py----------------------------------------
A:networkx.readwrite.tests.test_sparse6.G->networkx.parse_sparse6(data)
A:networkx.readwrite.tests.test_sparse6.M->networkx.parse_sparse6(multigraph_data)
A:networkx.readwrite.tests.test_sparse6.fh->StringIO()
A:networkx.readwrite.tests.test_sparse6.Gin->networkx.read_sparse6(fh)
A:networkx.readwrite.tests.test_sparse6.glist->networkx.read_sparse6(fh)
A:networkx.readwrite.tests.test_sparse6.G1->networkx.complete_graph(4)
A:networkx.readwrite.tests.test_sparse6.m->min(2 * i, i * i // 2)
A:networkx.readwrite.tests.test_sparse6.g->networkx.random_graphs.gnm_random_graph(i, m, seed=i)
A:networkx.readwrite.tests.test_sparse6.gstr->networkx.generate_sparse6(g, header=False)
A:networkx.readwrite.tests.test_sparse6.g2->networkx.parse_sparse6(gstr)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6(object)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.directed_error(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_generate_and_parse_sparse6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_generate_sparse6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_parse_multigraph_graph(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_parse_sparse6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_read_sparse6(self)
networkx.readwrite.tests.test_sparse6.TestSparseGraph6.test_write_sparse6(self)
networkx.tests.test_TestSparseGraph6(object)
networkx.tests.test_TestSparseGraph6.directed_error(self)
networkx.tests.test_TestSparseGraph6.test_generate_and_parse_sparse6(self)
networkx.tests.test_TestSparseGraph6.test_generate_sparse6(self)
networkx.tests.test_TestSparseGraph6.test_parse_multigraph_graph(self)
networkx.tests.test_TestSparseGraph6.test_parse_sparse6(self)
networkx.tests.test_TestSparseGraph6.test_read_many_graph6(self)
networkx.tests.test_TestSparseGraph6.test_read_sparse6(self)
networkx.tests.test_TestSparseGraph6.test_write_sparse6(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_gexf.py----------------------------------------
A:networkx.readwrite.tests.test_gexf.self.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.self.simple_directed_fh->io.BytesIO(self.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.self.attribute_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.self.attribute_fh->io.BytesIO(self.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.self.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_gexf.self.simple_undirected_fh->io.BytesIO(self.simple_undirected_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.H->networkx.read_gexf(fh, node_type=int)
A:networkx.readwrite.tests.test_gexf.fh->io.BytesIO()
A:networkx.readwrite.tests.test_gexf.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_gexf.he->sorted(H.edges(data=True))
A:networkx.readwrite.tests.test_gexf.G->networkx.Graph()
A:networkx.readwrite.tests.test_gexf.obtained->'\n'.join(nx.generate_gexf(G))
networkx.readwrite.tests.test_gexf.TestGEXF(object)
networkx.readwrite.tests.test_gexf.TestGEXF.setUp(self)
networkx.readwrite.tests.test_gexf.TestGEXF.setupClass(cls)
networkx.readwrite.tests.test_gexf.TestGEXF.test_bool(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_key_error(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_serialize_ints_to_strings(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_write_with_node_attributes(self)
networkx.tests.test_TestGEXF(object)
networkx.tests.test_TestGEXF.setUp(self)
networkx.tests.test_TestGEXF.setupClass(cls)
networkx.tests.test_TestGEXF.test_bool(self)
networkx.tests.test_TestGEXF.test_default_attribute(self)
networkx.tests.test_TestGEXF.test_directed_edge_in_undirected(self)
networkx.tests.test_TestGEXF.test_key_error(self)
networkx.tests.test_TestGEXF.test_read_attribute_graphml(self)
networkx.tests.test_TestGEXF.test_read_simple_directed_graphml(self)
networkx.tests.test_TestGEXF.test_read_simple_undirected_graphml(self)
networkx.tests.test_TestGEXF.test_relabel(self)
networkx.tests.test_TestGEXF.test_serialize_ints_to_strings(self)
networkx.tests.test_TestGEXF.test_undirected_edge_in_directed(self)
networkx.tests.test_TestGEXF.test_write_read_simple_directed_graphml(self)
networkx.tests.test_TestGEXF.test_write_with_node_attributes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_edgelist.py----------------------------------------
A:networkx.readwrite.tests.test_edgelist.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_edgelist.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_edgelist.self.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_edgelist.self.XDG->networkx.MultiDiGraph(self.XG)
A:networkx.readwrite.tests.test_edgelist.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_edgelist.G->networkx.convert_node_labels_to_integers(self.G)
A:networkx.readwrite.tests.test_edgelist.fh->io.BytesIO()
A:networkx.readwrite.tests.test_edgelist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_edgelist.H->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_edgelist.blurb->chr(1245)
A:networkx.readwrite.tests.test_edgelist.H2->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
networkx.readwrite.tests.test_edgelist.TestEdgelist
networkx.readwrite.tests.test_edgelist.TestEdgelist.setUp(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_error(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_2(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4(self)
networkx.tests.test_TestEdgelist
networkx.tests.test_TestEdgelist.setUp(self)
networkx.tests.test_TestEdgelist.test_edgelist_digraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_digraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_graph(self)
networkx.tests.test_TestEdgelist.test_edgelist_integers(self)
networkx.tests.test_TestEdgelist.test_edgelist_multidigraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_multigraph(self)
networkx.tests.test_TestEdgelist.test_latin1(self)
networkx.tests.test_TestEdgelist.test_latin1_error(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_1(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_2(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_3(self)
networkx.tests.test_TestEdgelist.test_unicode(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_1(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_2(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_3(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_4(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_yaml.py----------------------------------------
A:networkx.readwrite.tests.test_yaml.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_yaml.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_yaml.self.MG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_yaml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_yaml.Gin->networkx.read_yaml(fname)
networkx.readwrite.tests.test_yaml.TestYaml(object)
networkx.readwrite.tests.test_yaml.TestYaml.assert_equal(self,G,data=False)
networkx.readwrite.tests.test_yaml.TestYaml.build_graphs(self)
networkx.readwrite.tests.test_yaml.TestYaml.setUp(self)
networkx.readwrite.tests.test_yaml.TestYaml.setupClass(cls)
networkx.readwrite.tests.test_yaml.TestYaml.testDirected(self)
networkx.readwrite.tests.test_yaml.TestYaml.testMultiGraph(self)
networkx.readwrite.tests.test_yaml.TestYaml.testUndirected(self)
networkx.tests.test_yaml.TestYaml(object)
networkx.tests.test_yaml.TestYaml.assert_equal(self,G,data=False)
networkx.tests.test_yaml.TestYaml.build_graphs(self)
networkx.tests.test_yaml.TestYaml.setUp(self)
networkx.tests.test_yaml.TestYaml.setupClass(cls)
networkx.tests.test_yaml.TestYaml.testDirected(self)
networkx.tests.test_yaml.TestYaml.testMultiGraph(self)
networkx.tests.test_yaml.TestYaml.testUndirected(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_leda.py----------------------------------------
A:networkx.readwrite.tests.test_leda.G->networkx.parse_leda(data)
A:networkx.readwrite.tests.test_leda.fh->io.BytesIO()
A:networkx.readwrite.tests.test_leda.Gin->networkx.read_leda(fh)
networkx.readwrite.tests.test_leda.TestLEDA(object)
networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda(self)
networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA(self)
networkx.tests.test_TestLEDA(object)
networkx.tests.test_TestLEDA.test_parse_leda(self)
networkx.tests.test_TestLEDA.test_read_LEDA(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_graphml.py----------------------------------------
A:networkx.readwrite.tests.test_graphml.self.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_graphml.self.simple_directed_fh->io.BytesIO(self.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.self.attribute_graph->networkx.DiGraph(id='G')
A:networkx.readwrite.tests.test_graphml.self.attribute_fh->io.BytesIO(self.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.self.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_graphml.self.simple_undirected_fh->io.BytesIO(self.simple_undirected_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.H->networkx.parse_graphml(s)
A:networkx.readwrite.tests.test_graphml.I->networkx.parse_graphml(self.attribute_data)
A:networkx.readwrite.tests.test_graphml.fh->io.BytesIO(s.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_graphml.he->sorted(I.edges(data=True))
A:networkx.readwrite.tests.test_graphml.G->networkx.read_graphml(fh)
A:networkx.readwrite.tests.test_graphml.(fd, fname)->tempfile.mkstemp()
networkx.readwrite.tests.test_graphml.TestGraph(object)
networkx.readwrite.tests.test_graphml.TestGraph.setUp(self)
networkx.readwrite.tests.test_graphml.TestGraph.setupClass(cls)
networkx.readwrite.tests.test_graphml.TestGraph.test_bool(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_default_attribute(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_hyperedge_error(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_key_error(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_keys(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_to_graph(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_unicode(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_yfiles_extension(self)
networkx.tests.test_TestGraph(object)
networkx.tests.test_TestGraph.setUp(self)
networkx.tests.test_TestGraph.setupClass(cls)
networkx.tests.test_TestGraph.test_bool(self)
networkx.tests.test_TestGraph.test_default_attribute(self)
networkx.tests.test_TestGraph.test_directed_edge_in_undirected(self)
networkx.tests.test_TestGraph.test_hyperedge_error(self)
networkx.tests.test_TestGraph.test_key_error(self)
networkx.tests.test_TestGraph.test_multigraph_keys(self)
networkx.tests.test_TestGraph.test_multigraph_to_graph(self)
networkx.tests.test_TestGraph.test_read_attribute_graphml(self)
networkx.tests.test_TestGraph.test_read_simple_directed_graphml(self)
networkx.tests.test_TestGraph.test_read_simple_undirected_graphml(self)
networkx.tests.test_TestGraph.test_undirected_edge_in_directed(self)
networkx.tests.test_TestGraph.test_unicode(self)
networkx.tests.test_TestGraph.test_write_read_simple_directed_graphml(self)
networkx.tests.test_TestGraph.test_yfiles_extension(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_graph6.py----------------------------------------
A:networkx.readwrite.tests.test_graph6.G->networkx.parse_graph6(data)
A:networkx.readwrite.tests.test_graph6.fh->StringIO()
A:networkx.readwrite.tests.test_graph6.Gin->networkx.read_graph6(fh)
A:networkx.readwrite.tests.test_graph6.glist->networkx.read_graph6(fh)
A:networkx.readwrite.tests.test_graph6.G1->networkx.complete_graph(4)
A:networkx.readwrite.tests.test_graph6.G2->networkx.complete_bipartite_graph(6, 9)
A:networkx.readwrite.tests.test_graph6.G3->networkx.complete_graph(67)
A:networkx.readwrite.tests.test_graph6.g->networkx.random_graphs.gnm_random_graph(i, i * i // 4, seed=i)
A:networkx.readwrite.tests.test_graph6.gstr->networkx.generate_graph6(g, header=False)
A:networkx.readwrite.tests.test_graph6.g2->networkx.parse_graph6(gstr)
networkx.readwrite.tests.test_graph6.TestGraph6(object)
networkx.readwrite.tests.test_graph6.TestGraph6.directed_error(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_generate_and_parse_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_generate_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_parse_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_read_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6.test_write_graph6(self)
networkx.readwrite.tests.test_graph6.TestGraph6Utils(object)
networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_data_sparse6_data_conversion(self)
networkx.readwrite.tests.test_graph6.TestGraph6Utils.test_n_data_n_conversion(self)
networkx.tests.test_TestGraph6(object)
networkx.tests.test_TestGraph6.directed_error(self)
networkx.tests.test_TestGraph6.test_generate_and_parse_graph6(self)
networkx.tests.test_TestGraph6.test_generate_graph6(self)
networkx.tests.test_TestGraph6.test_parse_graph6(self)
networkx.tests.test_TestGraph6.test_read_graph6(self)
networkx.tests.test_TestGraph6.test_read_many_graph6(self)
networkx.tests.test_TestGraph6.test_write_graph6(self)
networkx.tests.test_TestGraph6Utils(object)
networkx.tests.test_TestGraph6Utils.test_data_sparse6_data_conversion(self)
networkx.tests.test_TestGraph6Utils.test_n_data_n_conversion(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/tests/test_pajek.py----------------------------------------
A:networkx.readwrite.tests.test_pajek.self.G->nx.MultiDiGraph()
A:networkx.readwrite.tests.test_pajek.(fd, self.fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_pajek.G->nx.Graph()
A:networkx.readwrite.tests.test_pajek.Gin->read_pajek(self.fname)
A:networkx.readwrite.tests.test_pajek.fh->io.BytesIO()
A:networkx.readwrite.tests.test_pajek.H->nx.read_pajek(fh)
networkx.readwrite.tests.test_pajek.TestPajek(object)
networkx.readwrite.tests.test_pajek.TestPajek.setUp(self)
networkx.readwrite.tests.test_pajek.TestPajek.tearDown(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_noname(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_unicode(self)
networkx.tests.test_TestPajek(object)
networkx.tests.test_TestPajek.setUp(self)
networkx.tests.test_TestPajek.tearDown(self)
networkx.tests.test_TestPajek.test_noname(self)
networkx.tests.test_TestPajek.test_parse_pajek(self)
networkx.tests.test_TestPajek.test_parse_pajek_simple(self)
networkx.tests.test_TestPajek.test_read_pajek(self)
networkx.tests.test_TestPajek.test_unicode(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/node_link.py----------------------------------------
A:networkx.readwrite.json_graph.node_link._attrs->dict(id='id', source='source', target='target', key='key')
A:networkx.readwrite.json_graph.node_link.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.node_link.mapping->dict(zip(G, count()))
A:networkx.readwrite.json_graph.node_link.data['directed']->G.is_directed()
A:networkx.readwrite.json_graph.node_link.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.node_link.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.node_link.graph.graph->data.get('graph', {})
A:networkx.readwrite.json_graph.node_link.c->count()
A:networkx.readwrite.json_graph.node_link.node->d.get(id_, next(c))
A:networkx.readwrite.json_graph.node_link.nodedata->dict(((make_str(k), v) for (k, v) in d.items() if k != id_))
A:networkx.readwrite.json_graph.node_link.edgedata->dict(((make_str(k), v) for (k, v) in d.items() if k != source and k != target and (k != key)))
A:networkx.readwrite.json_graph.node_link.ky->d.get(key, None)
networkx.json_graph.node_link_data(G,attrs=_attrs)
networkx.json_graph.node_link_graph(data,directed=False,multigraph=True,attrs=_attrs)
networkx.readwrite.json_graph.node_link.node_link_data(G,attrs=_attrs)
networkx.readwrite.json_graph.node_link.node_link_graph(data,directed=False,multigraph=True,attrs=_attrs)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.adjacency._attrs->dict(id='id', key='key')
A:networkx.readwrite.json_graph.adjacency.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.adjacency.data['directed']->G.is_directed()
A:networkx.readwrite.json_graph.adjacency.data['graph']->list(G.graph.items())
A:networkx.readwrite.json_graph.adjacency.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.adjacency.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.adjacency.graph.graph->dict(data.get('graph', []))
A:networkx.readwrite.json_graph.adjacency.node_data->d.copy()
A:networkx.readwrite.json_graph.adjacency.node->d.copy().pop(id_)
A:networkx.readwrite.json_graph.adjacency.target_data->tdata.copy()
A:networkx.readwrite.json_graph.adjacency.target->tdata.copy().pop(id_)
A:networkx.readwrite.json_graph.adjacency.ky->tdata.copy().pop(key, None)
networkx.json_graph.adjacency_data(G,attrs=_attrs)
networkx.json_graph.adjacency_graph(data,directed=False,multigraph=True,attrs=_attrs)
networkx.readwrite.json_graph.adjacency.adjacency_data(G,attrs=_attrs)
networkx.readwrite.json_graph.adjacency.adjacency_graph(data,directed=False,multigraph=True,attrs=_attrs)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/tree.py----------------------------------------
A:networkx.readwrite.json_graph.tree._attrs->dict(id='id', children='children')
A:networkx.readwrite.json_graph.tree.d->dict(chain(G.node[child].items(), [(id_, child)]))
A:networkx.readwrite.json_graph.tree.c->add_children(child, G)
A:networkx.readwrite.json_graph.tree.data->dict(chain(G.node[root].items(), [(id_, root)]))
A:networkx.readwrite.json_graph.tree.data[children]->add_children(root, G)
A:networkx.readwrite.json_graph.tree.graph->networkx.DiGraph()
A:networkx.readwrite.json_graph.tree.grandchildren->dict(chain(G.node[root].items(), [(id_, root)])).get(children, [])
A:networkx.readwrite.json_graph.tree.nodedata->dict(((make_str(k), v) for (k, v) in data.items() if k != id_ and k != children))
A:networkx.readwrite.json_graph.tree.children_->dict(chain(G.node[root].items(), [(id_, root)])).get(children, [])
networkx.json_graph.tree_data(G,root,attrs=_attrs)
networkx.json_graph.tree_graph(data,attrs=_attrs)
networkx.readwrite.json_graph.tree.tree_data(G,root,attrs=_attrs)
networkx.readwrite.json_graph.tree.tree_graph(data,attrs=_attrs)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/tests/test_node_link.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_node_link.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_node_link.H->node_link_graph(data)
A:networkx.readwrite.json_graph.tests.test_node_link.d->json.dumps(node_link_data(G))
A:networkx.readwrite.json_graph.tests.test_node_link.q->unicode('qualité', 'utf-8')
A:networkx.readwrite.json_graph.tests.test_node_link.s->node_link_data(G)
A:networkx.readwrite.json_graph.tests.test_node_link.output->json.dumps(s, ensure_ascii=False)
A:networkx.readwrite.json_graph.tests.test_node_link.data->json.loads(output)
A:networkx.readwrite.json_graph.tests.test_node_link.attrs->dict(id='id', source='node', target='node', key='node')
networkx.json_graph.tests.test_TestNodeLink
networkx.json_graph.tests.test_TestNodeLink.test_digraph(self)
networkx.json_graph.tests.test_TestNodeLink.test_exception(self)
networkx.json_graph.tests.test_TestNodeLink.test_graph(self)
networkx.json_graph.tests.test_TestNodeLink.test_graph_attributes(self)
networkx.json_graph.tests.test_TestNodeLink.test_multigraph(self)
networkx.json_graph.tests.test_TestNodeLink.test_unicode_keys(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_exception(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multigraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_unicode_keys(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/tests/test_tree.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_tree.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_tree.H->tree_graph(json.loads(d))
A:networkx.readwrite.json_graph.tests.test_tree.d->json.dumps(tree_data(G, 1))
A:networkx.readwrite.json_graph.tests.test_tree.attrs->dict(id='node', children='node')
networkx.json_graph.tests.test_TestTree
networkx.json_graph.tests.test_TestTree.test_exception(self)
networkx.json_graph.tests.test_TestTree.test_graph(self)
networkx.json_graph.tests.test_TestTree.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_tree.TestTree
networkx.readwrite.json_graph.tests.test_tree.TestTree.test_exception(self)
networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph(self)
networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph_attributes(self)


----------------------------------------/home/zhang/Packages/networkx/networkx1.11rc1/readwrite/json_graph/tests/test_adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_adjacency.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_adjacency.H->adjacency_graph(adjacency_data(G))
A:networkx.readwrite.json_graph.tests.test_adjacency.d->json.dumps(adjacency_data(G))
A:networkx.readwrite.json_graph.tests.test_adjacency.attrs->dict(id='node', key='node')
networkx.json_graph.tests.test_TestAdjacency
networkx.json_graph.tests.test_TestAdjacency.test_digraph(self)
networkx.json_graph.tests.test_TestAdjacency.test_exception(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph_attributes(self)
networkx.json_graph.tests.test_TestAdjacency.test_multidigraph(self)
networkx.json_graph.tests.test_TestAdjacency.test_multigraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_exception(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multigraph(self)

