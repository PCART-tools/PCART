
----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/exception.py----------------------------------------
networkx.NetworkXAlgorithmError(NetworkXException)
networkx.NetworkXError(NetworkXException)
networkx.NetworkXException(Exception)
networkx.NetworkXNoPath(NetworkXUnfeasible)
networkx.NetworkXPointlessConcept(NetworkXException)
networkx.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.NetworkXUnfeasible(NetworkXAlgorithmError)
networkx.exception.NetworkXAlgorithmError(NetworkXException)
networkx.exception.NetworkXError(NetworkXException)
networkx.exception.NetworkXException(Exception)
networkx.exception.NetworkXNoPath(NetworkXUnfeasible)
networkx.exception.NetworkXPointlessConcept(NetworkXException)
networkx.exception.NetworkXUnbounded(NetworkXAlgorithmError)
networkx.exception.NetworkXUnfeasible(NetworkXAlgorithmError)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/version.py----------------------------------------
A:networkx.version.date_info->datetime.datetime(2011, 11, 22, 7, 15, 35, 408614)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/release.py----------------------------------------
A:networkx.release.basedir->os.path.abspath(os.path.split(__file__)[0])
A:networkx.release.versionfile->os.path.join(basedir, 'version.py')
A:networkx.release.(date, date_info, version, version_info, vcs_info)->get_info()
A:networkx.release.fh->open(versionfile, 'w')
A:networkx.release.hgdir->os.path.join(basedir, '..', '.hg')
A:networkx.release.gitdir->os.path.join(basedir, '..', '.git')
A:networkx.release.p->subprocess.Popen(['hg', 'id'], cwd=basedir, stdout=subprocess.PIPE)
A:networkx.release.x->list(map(str, stdout.decode().strip().split()))
A:networkx.release.revision->str(x[0])
A:networkx.release.tag->str(x[1])
A:networkx.release.date_info->datetime.datetime.now()
A:networkx.release.date->time.asctime(date_info.timetuple())
A:networkx.release.(revision, vcs_info)->get_revision()
A:networkx.release.version->''.join([str(major), '.', str(minor)])
networkx.release.get_info(dynamic=True)
networkx.release.get_revision()
networkx.release.write_versionfile()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/relabel.py----------------------------------------
A:networkx.relabel.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.relabel.m->dict(((n, mapping(n)) for n in G))
A:networkx.relabel.old_labels->set(mapping.keys())
A:networkx.relabel.new_labels->set(mapping.values())
A:networkx.relabel.D->networkx.DiGraph(list(mapping.items()))
A:networkx.relabel.nodes->networkx.topological_sort(D)
A:networkx.relabel.multigraph->G.is_multigraph()
A:networkx.relabel.directed->G.is_directed()
A:networkx.relabel.H->relabel_nodes(G, mapping)
A:networkx.relabel.mapping->dict(zip([n for (d, n) in dv_pairs], range(first_label, N)))
A:networkx.relabel.nlist->G.nodes()
networkx._relabel_copy(G,mapping)
networkx._relabel_inplace(G,mapping)
networkx.convert_node_labels_to_integers(G,first_label=0,ordering='default',discard_old_labels=True)
networkx.relabel._relabel_copy(G,mapping)
networkx.relabel._relabel_inplace(G,mapping)
networkx.relabel.convert_node_labels_to_integers(G,first_label=0,ordering='default',discard_old_labels=True)
networkx.relabel.relabel_nodes(G,mapping,copy=True)
networkx.relabel_nodes(G,mapping,copy=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/convert.py----------------------------------------
A:networkx.convert.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.convert.G->_prep_create_using(create_using)
A:networkx.convert.result->from_dict_of_dicts(data.adj, create_using=create_using, multigraph_input=data.is_multigraph())
A:networkx.convert.result.graph->data.graph.copy()
A:networkx.convert.result.node->dict(((n, dd.copy()) for (n, dd) in data.node.items()))
A:networkx.convert.dod[u]->dod.fromkeys(nbrdict, edge_data)
A:networkx.convert.seen->set()
A:networkx.convert.nodelist->_prep_create_using(create_using).nodes()
A:networkx.convert.nodeset->set(nodelist)
A:networkx.convert.nlen->len(nodelist)
A:networkx.convert.index->dict(zip(nodelist, range(nlen)))
A:networkx.convert.e_weight->attrs.get(weight, 1)
A:networkx.convert.M[i, j]->op([e_weight, M[i, j]])
A:networkx.convert.M->scipy.sparse.lil_matrix((nlen, nlen), dtype=dtype)
A:networkx.convert.M[index[u], index[v]]->d.get(weight, 1)
A:networkx.convert.blurb->chr(1245)
A:networkx.convert.(x, y)->numpy.asarray(A).nonzero()
A:networkx.convert.fields->sorted([(offset, dtype, name) for (name, (dtype, offset)) in A.dtype.fields.items()])
A:networkx.convert.attr[name]->kind_to_python_type[dtype.kind](val)
A:networkx.convert.values->tuple([attrs[n] for n in names])
A:networkx.convert.AA->A.tolil()
networkx._prep_create_using(create_using)
networkx.convert._prep_create_using(create_using)
networkx.convert.convert_to_directed(G)
networkx.convert.convert_to_undirected(G)
networkx.convert.from_dict_of_dicts(d,create_using=None,multigraph_input=False)
networkx.convert.from_dict_of_lists(d,create_using=None)
networkx.convert.from_edgelist(edgelist,create_using=None)
networkx.convert.from_numpy_matrix(A,create_using=None)
networkx.convert.from_scipy_sparse_matrix(A,create_using=None)
networkx.convert.setup_module(module)
networkx.convert.to_dict_of_dicts(G,nodelist=None,edge_data=None)
networkx.convert.to_dict_of_lists(G,nodelist=None)
networkx.convert.to_edgelist(G,nodelist=None)
networkx.convert.to_networkx_graph(data,create_using=None,multigraph_input=False)
networkx.convert.to_numpy_matrix(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight')
networkx.convert.to_numpy_recarray(G,nodelist=None,dtype=[('weight',float)],order=None)
networkx.convert.to_scipy_sparse_matrix(G,nodelist=None,dtype=None,weight='weight',format='csr')
networkx.convert_to_directed(G)
networkx.convert_to_undirected(G)
networkx.from_dict_of_dicts(d,create_using=None,multigraph_input=False)
networkx.from_dict_of_lists(d,create_using=None)
networkx.from_edgelist(edgelist,create_using=None)
networkx.from_numpy_matrix(A,create_using=None)
networkx.from_scipy_sparse_matrix(A,create_using=None)
networkx.setup_module(module)
networkx.to_dict_of_dicts(G,nodelist=None,edge_data=None)
networkx.to_dict_of_lists(G,nodelist=None)
networkx.to_edgelist(G,nodelist=None)
networkx.to_networkx_graph(data,create_using=None,multigraph_input=False)
networkx.to_numpy_matrix(G,nodelist=None,dtype=None,order=None,multigraph_weight=sum,weight='weight')
networkx.to_numpy_recarray(G,nodelist=None,dtype=[('weight',float)],order=None)
networkx.to_scipy_sparse_matrix(G,nodelist=None,dtype=None,weight='weight',format='csr')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/block.py----------------------------------------
A:networkx.algorithms.block.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.block.part->list(map(set, partitions))
A:networkx.algorithms.block.u->set()
A:networkx.algorithms.block.M->networkx.Graph()
A:networkx.algorithms.block.SG->G.subgraph(p)
A:networkx.algorithms.block.M.node[i]['nnodes']->G.subgraph(p).number_of_nodes()
A:networkx.algorithms.block.M.node[i]['nedges']->G.subgraph(p).number_of_edges()
A:networkx.algorithms.block.M.node[i]['density']->networkx.density(SG)
A:networkx.algorithms.block.nodes_in_block->networkx.Graph().node[n]['graph'].nodes()
A:networkx.algorithms.block.weight->d.get('weight', 1.0)
networkx.algorithms.block.blockmodel(G,partitions,multigraph=False)
networkx.blockmodel(G,partitions,multigraph=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/operators.py----------------------------------------
A:networkx.algorithms.operators.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.operators.R->networkx.relabel_nodes(G, add_prefix0).__class__()
A:networkx.algorithms.operators.G->networkx.relabel_nodes(G, add_prefix0)
A:networkx.algorithms.operators.H->networkx.relabel_nodes(H, add_prefix1)
A:networkx.algorithms.operators.R1->networkx.convert_node_labels_to_integers(G)
A:networkx.algorithms.operators.R2->networkx.convert_node_labels_to_integers(H, first_label=len(R1))
A:networkx.algorithms.operators.edges->networkx.relabel_nodes(H, add_prefix1).edges_iter()
A:networkx.algorithms.operators.gnodes->set(G)
A:networkx.algorithms.operators.hnodes->set(H)
A:networkx.algorithms.operators.nodes->set(G).symmetric_difference(hnodes)
networkx.algorithms.operators.complement(G,create_using=None,name=None)
networkx.algorithms.operators.compose(G,H,create_using=None,name=None)
networkx.algorithms.operators.difference(G,H,create_using=None)
networkx.algorithms.operators.disjoint_union(G,H)
networkx.algorithms.operators.intersection(G,H,create_using=None)
networkx.algorithms.operators.symmetric_difference(G,H,create_using=None)
networkx.algorithms.operators.union(G,H,create_using=None,rename=False,name=None)
networkx.complement(G,create_using=None,name=None)
networkx.compose(G,H,create_using=None,name=None)
networkx.difference(G,H,create_using=None)
networkx.disjoint_union(G,H)
networkx.intersection(G,H,create_using=None)
networkx.symmetric_difference(G,H,create_using=None)
networkx.union(G,H,create_using=None,rename=False,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/distance_measures.py----------------------------------------
A:networkx.algorithms.distance_measures.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.algorithms.distance_measures.nodes->G.nodes()
A:networkx.algorithms.distance_measures.order->G.order()
A:networkx.algorithms.distance_measures.length->networkx.single_source_shortest_path_length(G, v)
A:networkx.algorithms.distance_measures.L->len(length)
A:networkx.algorithms.distance_measures.e[v]->max(length.values())
A:networkx.algorithms.distance_measures.e->eccentricity(G)
A:networkx.algorithms.distance_measures.diameter->max(e.values())
A:networkx.algorithms.distance_measures.radius->min(e.values())
networkx.algorithms.distance_measures.center(G,e=None)
networkx.algorithms.distance_measures.diameter(G,e=None)
networkx.algorithms.distance_measures.eccentricity(G,v=None,sp=None)
networkx.algorithms.distance_measures.periphery(G,e=None)
networkx.algorithms.distance_measures.radius(G,e=None)
networkx.center(G,e=None)
networkx.diameter(G,e=None)
networkx.eccentricity(G,v=None,sp=None)
networkx.periphery(G,e=None)
networkx.radius(G,e=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/matching.py----------------------------------------
A:networkx.algorithms.matching.gnodes->G.nodes()
A:networkx.algorithms.matching.wt->slack(*bestedge[v]).get('weight', 1)
A:networkx.algorithms.matching.inblossom->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.blossomparent->dict(zip(gnodes, repeat(None)))
A:networkx.algorithms.matching.blossombase->dict(zip(gnodes, gnodes))
A:networkx.algorithms.matching.dualvar->dict(zip(gnodes, repeat(maxweight)))
A:networkx.algorithms.matching.b->Blossom()
A:networkx.algorithms.matching.b.mybestedges->list(bestedgeto.values())
A:networkx.algorithms.matching.kslack->slack(*bestedge[b])
A:networkx.algorithms.matching.j->Blossom().childs.index(entrychild)
A:networkx.algorithms.matching.ij->Blossom().childs.index(t)
A:networkx.algorithms.matching.vdualoffset->max(0, -min(dualvar.values()))
A:networkx.algorithms.matching.v->queue.pop()
A:networkx.algorithms.matching.base->scanBlossom(v, w)
A:networkx.algorithms.matching.delta->max(0, min(dualvar.values()))
A:networkx.algorithms.matching.d->slack(*bestedge[v])
networkx.algorithms.matching.max_weight_matching(G,maxcardinality=False)
networkx.max_weight_matching(G,maxcardinality=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isolate.py----------------------------------------
A:networkx.algorithms.isolate.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
networkx.algorithms.isolate.is_isolate(G,n)
networkx.algorithms.isolate.isolates(G)
networkx.is_isolate(G,n)
networkx.isolates(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/core.py----------------------------------------
A:networkx.algorithms.core.__author__->'\n'.join(['Dan Schult (dschult@colgate.edu)', 'Jason Grout (jason-sage@creativetrax.com)', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.core.degrees->G.degree()
A:networkx.algorithms.core.nodes->sorted(degrees, key=degrees.get)
A:networkx.algorithms.core.node_pos->dict(((v, pos) for (pos, v) in enumerate(nodes)))
A:networkx.algorithms.core.nbrs->dict(((v, set(neighbors(v))) for v in G))
A:networkx.algorithms.core.core_number->networkx.core_number(G)
A:networkx.algorithms.core.k->max(core_number.values())
networkx.algorithms.core.core_number(G)
networkx.algorithms.core.k_core(G,k=None,core_number=None)
networkx.algorithms.core.k_corona(G,k,core_number=None)
networkx.algorithms.core.k_crust(G,k=None,core_number=None)
networkx.algorithms.core.k_shell(G,k=None,core_number=None)
networkx.core_number(G)
networkx.k_core(G,k=None,core_number=None)
networkx.k_corona(G,k,core_number=None)
networkx.k_crust(G,k=None,core_number=None)
networkx.k_shell(G,k=None,core_number=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/mst.py----------------------------------------
A:networkx.algorithms.mst.subtrees->UnionFind()
A:networkx.algorithms.mst.edges->sorted(G.edges(data=True), key=lambda t: t[2].get(weight, 1))
A:networkx.algorithms.mst.T->networkx.Graph(nx.prim_mst_edges(G, weight=weight, data=True))
A:networkx.algorithms.mst.T.node[n]->G.node[n].copy()
A:networkx.algorithms.mst.T.graph->G.graph.copy()
A:networkx.algorithms.mst.nodes->G.nodes()
A:networkx.algorithms.mst.u->G.nodes().pop(0)
A:networkx.algorithms.mst.(W, u, v)->heappop(frontier)
networkx.algorithms.mst.minimum_spanning_edges(G,weight='weight',data=True)
networkx.algorithms.mst.minimum_spanning_tree(G,weight='weight')
networkx.algorithms.mst.prim_mst(G,weight='weight')
networkx.algorithms.mst.prim_mst_edges(G,weight='weight',data=True)
networkx.minimum_spanning_edges(G,weight='weight',data=True)
networkx.minimum_spanning_tree(G,weight='weight')
networkx.prim_mst(G,weight='weight')
networkx.prim_mst_edges(G,weight='weight',data=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/dag.py----------------------------------------
A:networkx.algorithms.dag.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Dan Schult (dschult@colgate.edu)', 'Ben Edwards (bedwards@cs.unm.edu)'])
A:networkx.algorithms.dag.nbunch->G.nodes_iter()
A:networkx.algorithms.dag.seen->set()
A:networkx.algorithms.dag.s->next(G.nodes_iter())
A:networkx.algorithms.dag.g->gcd(g, levels[u] - levels[v] + 1)
networkx.algorithms.dag.is_aperiodic(G)
networkx.algorithms.dag.is_directed_acyclic_graph(G)
networkx.algorithms.dag.topological_sort(G,nbunch=None)
networkx.algorithms.dag.topological_sort_recursive(G,nbunch=None)
networkx.is_aperiodic(G)
networkx.is_directed_acyclic_graph(G)
networkx.topological_sort(G,nbunch=None)
networkx.topological_sort_recursive(G,nbunch=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/swap.py----------------------------------------
A:networkx.algorithms.swap.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)Joel Miller (joel.c.miller.research@gmail.com)Ben Edwards'])
A:networkx.algorithms.swap.(keys, degrees)->zip(*G.degree().items())
A:networkx.algorithms.swap.cdf->networkx.utils.cumulative_distribution(list(G.degree().values()))
A:networkx.algorithms.swap.(ui, xi)->networkx.utils.discrete_sequence(2, cdistribution=cdf)
A:networkx.algorithms.swap.v->random.choice(G.neighbors(u))
A:networkx.algorithms.swap.y->random.choice(G.neighbors(x))
A:networkx.algorithms.swap.deg->G.degree()
A:networkx.algorithms.swap.dk->list(deg.keys())
A:networkx.algorithms.swap.(u, v, x, y)->swapped.pop()
A:networkx.algorithms.swap.window->int(math.ceil(float(window) / 2))
networkx.algorithms.swap.connected_double_edge_swap(G,nswap=1)
networkx.algorithms.swap.double_edge_swap(G,nswap=1,max_tries=100)
networkx.connected_double_edge_swap(G,nswap=1)
networkx.double_edge_swap(G,nswap=1,max_tries=100)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/distance_regular.py----------------------------------------
A:networkx.algorithms.distance_regular.__author__->'\n'.join(['Dheeraj M R <dheerajrav@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.distance_regular.a->intersection_array(G)
A:networkx.algorithms.distance_regular.d->len(b)
A:networkx.algorithms.distance_regular.degree->G.degree_iter()
A:networkx.algorithms.distance_regular.(_, k)->next(degree)
A:networkx.algorithms.distance_regular.path_length->networkx.all_pairs_shortest_path_length(G)
A:networkx.algorithms.distance_regular.diameter->max([max(path_length[n].values()) for n in path_length])
A:networkx.algorithms.distance_regular.c->len([n for n in G[v] if path_length[n][u] == i - 1])
A:networkx.algorithms.distance_regular.b->len([n for n in G[v] if path_length[n][u] == i + 1])
networkx.algorithms.distance_regular.global_parameters(b,c)
networkx.algorithms.distance_regular.intersection_array(G)
networkx.algorithms.distance_regular.is_distance_regular(G)
networkx.global_parameters(b,c)
networkx.intersection_array(G)
networkx.is_distance_regular(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/cycles.py----------------------------------------
A:networkx.algorithms.cycles.__author__->'\n'.join(['Jon Olav Vik <jonovik@gmail.com>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.cycles.gnodes->set(G.nodes())
A:networkx.algorithms.cycles.root->set(G.nodes()).pop()
A:networkx.algorithms.cycles.z->stack.pop()
A:networkx.algorithms.cycles.used[nbr]->set([z])
A:networkx.algorithms.cycles.blocked->defaultdict(bool)
A:networkx.algorithms.cycles.B->defaultdict(list)
A:networkx.algorithms.cycles.ordering->dict(zip(G, range(len(G))))
A:networkx.algorithms.cycles.subgraph->G.subgraph((node for node in G if ordering[node] >= ordering[s]))
A:networkx.algorithms.cycles.strongcomp->networkx.strongly_connected_components(subgraph)
A:networkx.algorithms.cycles.mincomp->min(strongcomp, key=lambda nodes: min((ordering[n] for n in nodes)))
A:networkx.algorithms.cycles.component->G.subgraph(mincomp)
A:networkx.algorithms.cycles.startnode->min(component, key=ordering.__getitem__)
A:networkx.algorithms.cycles.dummy->circuit(startnode, startnode, component)
networkx.algorithms.cycles.cycle_basis(G,root=None)
networkx.algorithms.cycles.simple_cycles(G)
networkx.cycle_basis(G,root=None)
networkx.simple_cycles(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/cluster.py----------------------------------------
A:networkx.algorithms.cluster.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Dan Schult (dschult@colgate.edu)', 'Pieter Swart (swart@lanl.gov)', 'Jordi Torrents <jtorrents@milnou.net>'])
A:networkx.algorithms.cluster.nodes_nbrs->G.adj.items()
A:networkx.algorithms.cluster.max_weight->float(max((d.get(weight, 1.0) for (u, v, d) in G.edges(data=True))))
A:networkx.algorithms.cluster.seen->set()
A:networkx.algorithms.cluster.c->clustering(G, nodes, weight=weight).values()
A:networkx.algorithms.cluster.td_iter->_triangles_and_degree_iter(G, nodes)
A:networkx.algorithms.cluster.node_iter->G.nbunch_iter(nodes)
A:networkx.algorithms.cluster.squares->len((set(G[u]) & set(G[w])) - set([v]))
networkx._triangles_and_degree_iter(G,nodes=None)
networkx._weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster._triangles_and_degree_iter(G,nodes=None)
networkx.algorithms.cluster._weighted_triangles_and_degree_iter(G,nodes=None,weight='weight')
networkx.algorithms.cluster.average_clustering(G,nodes=None,weight=None,count_zeros=True)
networkx.algorithms.cluster.clustering(G,nodes=None,weight=None)
networkx.algorithms.cluster.square_clustering(G,nodes=None)
networkx.algorithms.cluster.transitivity(G)
networkx.algorithms.cluster.triangles(G,nodes=None)
networkx.average_clustering(G,nodes=None,weight=None,count_zeros=True)
networkx.clustering(G,nodes=None,weight=None)
networkx.square_clustering(G,nodes=None)
networkx.transitivity(G)
networkx.triangles(G,nodes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/boundary.py----------------------------------------
A:networkx.algorithms.boundary.nset1->set((n for n in nbunch1 if n in G))
A:networkx.algorithms.boundary.nset2->set(nbunch2)
A:networkx.algorithms.boundary.bdy->set()
networkx.algorithms.boundary.edge_boundary(G,nbunch1,nbunch2=None)
networkx.algorithms.boundary.node_boundary(G,nbunch1,nbunch2=None)
networkx.edge_boundary(G,nbunch1,nbunch2=None)
networkx.node_boundary(G,nbunch1,nbunch2=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/vitality.py----------------------------------------
A:networkx.algorithms.vitality.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Renato Fabbri'])
A:networkx.algorithms.vitality.path_length->networkx.single_source_dijkstra_path_length(G, n, weight=weight)
A:networkx.algorithms.vitality.wig->weiner_index(G, weight)
A:networkx.algorithms.vitality.edges->G.edges(n, data=True)
networkx.algorithms.vitality.closeness_vitality(G,v=None,weight=None)
networkx.algorithms.vitality.weiner_index(G,weight=None)
networkx.closeness_vitality(G,v=None,weight=None)
networkx.weiner_index(G,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/mis.py----------------------------------------
A:networkx.algorithms.mis.__author__->'\n'.join(['Leo Lopes <leo.lopes@monash.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.algorithms.mis.nodes->set(nodes)
A:networkx.algorithms.mis.neighbors->set.union(*[set(G.neighbors(v)) for v in nodes])
A:networkx.algorithms.mis.indep_nodes->list(nodes)
A:networkx.algorithms.mis.available_nodes->set(G.nodes()).difference(neighbors.union(nodes))
A:networkx.algorithms.mis.node->random.choice(list(available_nodes))
networkx.algorithms.mis.maximal_independent_set(G,nodes=None)
networkx.maximal_independent_set(G,nodes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/smetric.py----------------------------------------
networkx.algorithms.smetric.s_metric(G,normalized=True)
networkx.s_metric(G,normalized=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/clique.py----------------------------------------
A:networkx.algorithms.clique.pivotnbrs->set()
A:networkx.algorithms.clique.nbrs->set(nbrs)
A:networkx.algorithms.clique.conn->len(cn)
A:networkx.algorithms.clique.cand->set(nnbrs)
A:networkx.algorithms.clique.done->set()
A:networkx.algorithms.clique.n->smallcand.pop()
A:networkx.algorithms.clique.(cand, done, smallcand)->stack.pop()
A:networkx.algorithms.clique.numb_cand->len(cand)
A:networkx.algorithms.clique.cliq->list(find_cliques(G))
A:networkx.algorithms.clique.B->networkx.Graph()
A:networkx.algorithms.clique.G->networkx.Graph()
A:networkx.algorithms.clique.cliques->list(find_cliques(G))
A:networkx.algorithms.clique.H->networkx.ego_graph(G, nodes)
A:networkx.algorithms.clique.d[n]->max((len(c) for c in find_cliques(H)))
A:networkx.algorithms.clique.d->max([len(c) for c in cliques if v in c])
A:networkx.algorithms.clique.nodes->networkx.Graph().nodes()
A:networkx.algorithms.clique.d[v]->max([len(c) for c in cliques if v in c])
A:networkx.algorithms.clique.numcliq->len([1 for c in cliques if v in c])
A:networkx.algorithms.clique.numcliq[v]->len([1 for c in cliques if v in c])
networkx._extend(nnbrs,cand,done,so_far,cliques)
networkx.algorithms.clique._extend(nnbrs,cand,done,so_far,cliques)
networkx.algorithms.clique.cliques_containing_node(G,nodes=None,cliques=None)
networkx.algorithms.clique.find_cliques(G)
networkx.algorithms.clique.find_cliques_recursive(G)
networkx.algorithms.clique.graph_clique_number(G,cliques=None)
networkx.algorithms.clique.graph_number_of_cliques(G,cliques=None)
networkx.algorithms.clique.make_clique_bipartite(G,fpos=None,create_using=None,name=None)
networkx.algorithms.clique.make_max_clique_graph(G,create_using=None,name=None)
networkx.algorithms.clique.node_clique_number(G,nodes=None,cliques=None)
networkx.algorithms.clique.number_of_cliques(G,nodes=None,cliques=None)
networkx.algorithms.clique.project_down(B,create_using=None,name=None)
networkx.algorithms.clique.project_up(B,create_using=None,name=None)
networkx.cliques_containing_node(G,nodes=None,cliques=None)
networkx.find_cliques(G)
networkx.find_cliques_recursive(G)
networkx.graph_clique_number(G,cliques=None)
networkx.graph_number_of_cliques(G,cliques=None)
networkx.make_clique_bipartite(G,fpos=None,create_using=None,name=None)
networkx.make_max_clique_graph(G,create_using=None,name=None)
networkx.node_clique_number(G,nodes=None,cliques=None)
networkx.number_of_cliques(G,nodes=None,cliques=None)
networkx.project_down(B,create_using=None,name=None)
networkx.project_up(B,create_using=None,name=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/graphical.py----------------------------------------
A:networkx.algorithms.graphical.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)Joel Miller (joel.c.miller.research@gmail.com)Ben Edwards'])
A:networkx.algorithms.graphical.valid->is_valid_degree_sequence_havel_hakimi(deg_sequence)
A:networkx.algorithms.graphical.d->s.pop()
A:networkx.algorithms.graphical.n->len(deg_sequence)
A:networkx.algorithms.graphical.deg_seq->sorted(deg_sequence, reverse=True)
A:networkx.algorithms.graphical.sum_deg->sum(deg_seq[0:k])
networkx.algorithms.graphical.is_valid_degree_sequence(deg_sequence,method='hh')
networkx.algorithms.graphical.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.algorithms.graphical.is_valid_degree_sequence_havel_hakimi(deg_sequence)
networkx.is_valid_degree_sequence(deg_sequence,method='hh')
networkx.is_valid_degree_sequence_erdos_gallai(deg_sequence)
networkx.is_valid_degree_sequence_havel_hakimi(deg_sequence)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/euler.py----------------------------------------
A:networkx.algorithms.euler.__author__->'\n'.join(['Nima Mohammadi (nima.irt[AT]gmail.com)', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.euler.g->G.__class__(G)
A:networkx.algorithms.euler.v->next(g.nodes_iter())
A:networkx.algorithms.euler.nbrs->sorted([v for (u, v) in g.edges(n)])
networkx.algorithms.euler.eulerian_circuit(G,source=None)
networkx.algorithms.euler.is_eulerian(G)
networkx.eulerian_circuit(G,source=None)
networkx.is_eulerian(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/richclub.py----------------------------------------
A:networkx.algorithms.richclub.__author__->'\n'.join(['Ben Edwards', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.richclub.rc->_compute_rc(G)
A:networkx.algorithms.richclub.R->G.copy()
A:networkx.algorithms.richclub.E->G.copy().number_of_edges()
A:networkx.algorithms.richclub.rcran->_compute_rc(R)
A:networkx.algorithms.richclub.deghist->networkx.degree_histogram(G)
A:networkx.algorithms.richclub.total->sum(deghist)
A:networkx.algorithms.richclub.deg->G.degree()
A:networkx.algorithms.richclub.edge_degrees->sorted((sorted((deg[u], deg[v])) for (u, v) in G.edges_iter()))
A:networkx.algorithms.richclub.ek->G.number_of_edges()
A:networkx.algorithms.richclub.(k1, k2)->sorted((sorted((deg[u], deg[v])) for (u, v) in G.edges_iter())).pop(0)
networkx._compute_rc(G)
networkx.algorithms.richclub._compute_rc(G)
networkx.algorithms.richclub.rich_club_coefficient(G,normalized=True,Q=100)
networkx.rich_club_coefficient(G,normalized=True,Q=100)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/product.py----------------------------------------
A:networkx.algorithms.product.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.algorithms.product.GH->_init_product_graph(G, H)
networkx._dict_product(d1,d2)
networkx._directed_edges_cross_edges(G,H)
networkx._edges_cross_nodes(G,H)
networkx._edges_cross_nodes_and_nodes(G,H)
networkx._init_product_graph(G,H)
networkx._node_product(G,H)
networkx._nodes_cross_edges(G,H)
networkx._undirected_edges_cross_edges(G,H)
networkx.algorithms.product._dict_product(d1,d2)
networkx.algorithms.product._directed_edges_cross_edges(G,H)
networkx.algorithms.product._edges_cross_nodes(G,H)
networkx.algorithms.product._edges_cross_nodes_and_nodes(G,H)
networkx.algorithms.product._init_product_graph(G,H)
networkx.algorithms.product._node_product(G,H)
networkx.algorithms.product._nodes_cross_edges(G,H)
networkx.algorithms.product._undirected_edges_cross_edges(G,H)
networkx.algorithms.product.cartesian_product(G,H)
networkx.algorithms.product.lexicographic_product(G,H)
networkx.algorithms.product.strong_product(G,H)
networkx.algorithms.product.tensor_product(G,H)
networkx.cartesian_product(G,H)
networkx.lexicographic_product(G,H)
networkx.strong_product(G,H)
networkx.tensor_product(G,H)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/mincost.py----------------------------------------
A:networkx.algorithms.flow.mincost.H->networkx.DiGraph(G)
A:networkx.algorithms.flow.mincost.T->networkx.DiGraph()
A:networkx.algorithms.flow.mincost.n->networkx.DiGraph(G).number_of_nodes()
A:networkx.algorithms.flow.mincost.maxWeight->max((abs(d[weight]) for (u, v, d) in H.edges(data=True) if weight in d))
A:networkx.algorithms.flow.mincost.vDemand->d.get(demand, 0)
A:networkx.algorithms.flow.mincost.y[v]->H[r][v].get(weight, 0)
A:networkx.algorithms.flow.mincost.newLabel->generate_unique_node()
A:networkx.algorithms.flow.mincost.edgeCapacity->H[v][u].get('flow', 0)
A:networkx.algorithms.flow.mincost.flowDict->_create_flow_dict(G, H)
A:networkx.algorithms.flow.mincost.flowDict[u][v]->H[u][v].get('flow', 0)
A:networkx.algorithms.flow.mincost.(H, T, y, artificialEdges, flowCost, r)->_initial_tree_solution(G, demand=demand, capacity=capacity, weight=weight)
A:networkx.algorithms.flow.mincost.newEdge->_find_entering_edge(H, c, capacity=capacity)
A:networkx.algorithms.flow.mincost.cycleCost->abs(c[newEdge])
A:networkx.algorithms.flow.mincost.path1->networkx.shortest_path(T.to_undirected(), r, newEdge[0])
A:networkx.algorithms.flow.mincost.path2->networkx.shortest_path(T.to_undirected(), r, newEdge[1])
A:networkx.algorithms.flow.mincost.(leavingEdge, eps)->_find_leaving_edge(H, T, cycle, newEdge, capacity=capacity)
A:networkx.algorithms.flow.mincost.forest->networkx.DiGraph(T)
A:networkx.algorithms.flow.mincost.(R, notR)->networkx.connected_component_subgraphs(forest.to_undirected())
A:networkx.algorithms.flow.mincost.maxFlow->networkx.max_flow(G, s, t, capacity=capacity)
networkx._create_flow_dict(G,H)
networkx._find_entering_edge(H,c,capacity='capacity')
networkx._find_leaving_edge(H,T,cycle,newEdge,capacity='capacity')
networkx._initial_tree_solution(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost._create_flow_dict(G,H)
networkx.algorithms.flow.mincost._find_entering_edge(H,c,capacity='capacity')
networkx.algorithms.flow.mincost._find_leaving_edge(H,T,cycle,newEdge,capacity='capacity')
networkx.algorithms.flow.mincost._initial_tree_solution(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.cost_of_flow(G,flowDict,weight='weight')
networkx.algorithms.flow.mincost.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')
networkx.algorithms.flow.mincost.network_simplex(G,demand='demand',capacity='capacity',weight='weight')
networkx.cost_of_flow(G,flowDict,weight='weight')
networkx.max_flow_min_cost(G,s,t,capacity='capacity',weight='weight')
networkx.min_cost_flow(G,demand='demand',capacity='capacity',weight='weight')
networkx.min_cost_flow_cost(G,demand='demand',capacity='capacity',weight='weight')
networkx.network_simplex(G,demand='demand',capacity='capacity',weight='weight')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/maxflow.py----------------------------------------
A:networkx.algorithms.flow.maxflow.auxiliary->networkx.DiGraph()
A:networkx.algorithms.flow.maxflow.flow->dict([(u, {}) for u in G])
A:networkx.algorithms.flow.maxflow.flow[u][v]->abs(G[u][v][capacity] - H[v][u][capacity])
A:networkx.algorithms.flow.maxflow.(auxiliary, inf_capacity_flows)->_create_auxiliary_digraph(G, capacity=capacity)
A:networkx.algorithms.flow.maxflow.path_nodes->networkx.bidirectional_shortest_path(auxiliary, s, t)
A:networkx.algorithms.flow.maxflow.path_edges->list(zip(path_nodes[:-1], path_nodes[1:]))
A:networkx.algorithms.flow.maxflow.path_capacity->min([auxiliary[u][v][capacity] for (u, v) in path_edges if capacity in auxiliary[u][v]])
A:networkx.algorithms.flow.maxflow.flow_dict->_create_flow_dict(G, auxiliary, inf_capacity_flows, capacity=capacity)
networkx._create_auxiliary_digraph(G,capacity='capacity')
networkx._create_flow_dict(G,H,inf_capacity_flows,capacity='capacity')
networkx.algorithms.flow.maxflow._create_auxiliary_digraph(G,capacity='capacity')
networkx.algorithms.flow.maxflow._create_flow_dict(G,H,inf_capacity_flows,capacity='capacity')
networkx.algorithms.flow.maxflow.ford_fulkerson(G,s,t,capacity='capacity')
networkx.algorithms.flow.maxflow.ford_fulkerson_flow(G,s,t,capacity='capacity')
networkx.algorithms.flow.maxflow.max_flow(G,s,t,capacity='capacity')
networkx.algorithms.flow.maxflow.min_cut(G,s,t,capacity='capacity')
networkx.ford_fulkerson(G,s,t,capacity='capacity')
networkx.ford_fulkerson_flow(G,s,t,capacity='capacity')
networkx.max_flow(G,s,t,capacity='capacity')
networkx.min_cut(G,s,t,capacity='capacity')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/tests/test_maxflow.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow.(flowValue, flowDict)->networkx.ford_fulkerson(G, s, t, capacity='spam')
A:networkx.algorithms.flow.tests.test_maxflow.G->networkx.Graph()
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph3(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph4(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_digraph_infcap_path(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_disconnected(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_graph1(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_graph2(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_graph_infcap_edges(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_optional_capacity(self)
networkx.algorithms.flow.tests.test_maxflow.TestMaxflow.test_source_target_not_in_graph(self)
networkx.algorithms.flow.tests.test_maxflow.compare_flows(G,s,t,solnFlows,solnValue)
networkx.tests.test_TestMaxflow
networkx.tests.test_TestMaxtest_digraph1(self)
networkx.tests.test_TestMaxtest_digraph2(self)
networkx.tests.test_TestMaxtest_digraph3(self)
networkx.tests.test_TestMaxtest_digraph4(self)
networkx.tests.test_TestMaxtest_digraph_infcap_edges(self)
networkx.tests.test_TestMaxtest_digraph_infcap_path(self)
networkx.tests.test_TestMaxtest_disconnected(self)
networkx.tests.test_TestMaxtest_graph1(self)
networkx.tests.test_TestMaxtest_graph2(self)
networkx.tests.test_TestMaxtest_graph_infcap_edges(self)
networkx.tests.test_TestMaxtest_optional_capacity(self)
networkx.tests.test_TestMaxtest_source_target_not_in_graph(self)
networkx.tests.test_compare_flows(G,s,t,solnFlows,solnValue)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/tests/test_mincost.py----------------------------------------
A:networkx.algorithms.flow.tests.test_mincost.G->networkx.MultiDiGraph()
A:networkx.algorithms.flow.tests.test_mincost.(flowCost, H)->networkx.network_simplex(G)
A:networkx.algorithms.flow.tests.test_mincost.flow->sum((v for v in sol['s'].values()))
A:networkx.algorithms.flow.tests.test_mincost.sol->networkx.max_flow_min_cost(G, 's', 't', capacity=0, weight=1)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_digon(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_digraph1(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_digraph2(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_digraph3(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_max_flow_min_cost(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_multidigraph(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_negcycle_infcap(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_no_flow_satisfying_demands(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_simple_digraph(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_sum_demands_not_zero(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_transshipment(self)
networkx.algorithms.flow.tests.test_mincost.TestNetworkSimplex.test_zero_capacity_edges(self)
networkx.tests.test_TestNetworkSimplex
networkx.tests.test_TestNetworkSimplex.test_digon(self)
networkx.tests.test_TestNetworkSimplex.test_digraph1(self)
networkx.tests.test_TestNetworkSimplex.test_digraph2(self)
networkx.tests.test_TestNetworkSimplex.test_digraph3(self)
networkx.tests.test_TestNetworkSimplex.test_max_flow_min_cost(self)
networkx.tests.test_TestNetworkSimplex.test_multidigraph(self)
networkx.tests.test_TestNetworkSimplex.test_negcycle_infcap(self)
networkx.tests.test_TestNetworkSimplex.test_no_flow_satisfying_demands(self)
networkx.tests.test_TestNetworkSimplex.test_simple_digraph(self)
networkx.tests.test_TestNetworkSimplex.test_sum_demands_not_zero(self)
networkx.tests.test_TestNetworkSimplex.test_transshipment(self)
networkx.tests.test_TestNetworkSimplex.test_zero_capacity_edges(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/flow/tests/test_maxflow_large_graph.py----------------------------------------
A:networkx.algorithms.flow.tests.test_maxflow_large_graph.G->gen_pyramid(N)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid(self)
networkx.algorithms.flow.tests.test_maxflow_large_graph.gen_pyramid(N)
networkx.tests.test_maxflow_large_graph.TestMaxflowLargeGraph
networkx.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_complete_graph(self)
networkx.tests.test_maxflow_large_graph.TestMaxflowLargeGraph.test_pyramid(self)
networkx.tests.test_maxflow_large_graph.gen_pyramid(N)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_mst.py----------------------------------------
A:networkx.algorithms.tests.test_mst.G->networkx.Graph()
A:networkx.algorithms.tests.test_mst.self.tree_edgelist->sorted(((sorted((u, v))[0], sorted((u, v))[1], d) for (u, v, d) in tree_edgelist))
A:networkx.algorithms.tests.test_mst.T->networkx.prim_mst(G, weight='distance')
A:networkx.algorithms.tests.test_mst.edgelist->sorted(((sorted((u, v))[0], sorted((u, v))[1], d) for (u, v, d) in edgelist))
networkx.algorithms.tests.test_mst.TestMST
networkx.algorithms.tests.test_mst.TestMST.setUp(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_attributes(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_disconnected(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_edges(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_edges_specify_weight(self)
networkx.algorithms.tests.test_mst.TestMST.test_mst_isolate(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_attributes(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_disconnected(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_edges_specify_weight(self)
networkx.algorithms.tests.test_mst.TestMST.test_prim_mst_isolate(self)
networkx.tests.test_TestMST
networkx.tests.test_TestMST.setUp(self)
networkx.tests.test_TestMST.test_mst(self)
networkx.tests.test_TestMST.test_mst_attributes(self)
networkx.tests.test_TestMST.test_mst_disconnected(self)
networkx.tests.test_TestMST.test_mst_edges(self)
networkx.tests.test_TestMST.test_mst_edges_specify_weight(self)
networkx.tests.test_TestMST.test_mst_isolate(self)
networkx.tests.test_TestMST.test_prim_mst(self)
networkx.tests.test_TestMST.test_prim_mst_attributes(self)
networkx.tests.test_TestMST.test_prim_mst_disconnected(self)
networkx.tests.test_TestMST.test_prim_mst_edges(self)
networkx.tests.test_TestMST.test_prim_mst_edges_specify_weight(self)
networkx.tests.test_TestMST.test_prim_mst_isolate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_cycles.py----------------------------------------
A:networkx.algorithms.tests.test_cycles.G->self.worst_case_graph(k)
A:networkx.algorithms.tests.test_cycles.n->len(a)
A:networkx.algorithms.tests.test_cycles.cy->networkx.cycle_basis(G, 9)
A:networkx.algorithms.tests.test_cycles.sort_cy->sorted((sorted(c) for c in cy))
A:networkx.algorithms.tests.test_cycles.c->sorted(nx.simple_cycles(G))
A:networkx.algorithms.tests.test_cycles.l->len(nx.simple_cycles(G))
networkx.algorithms.tests.test_cycles.TestCycles
networkx.algorithms.tests.test_cycles.TestCycles.is_cyclic_permuatation(self,a,b)
networkx.algorithms.tests.test_cycles.TestCycles.setUp(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_complete_directed_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_cycle_basis(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_empty(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_simple_cycles_small(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_unsortable(self)
networkx.algorithms.tests.test_cycles.TestCycles.test_worst_case_graph(self)
networkx.algorithms.tests.test_cycles.TestCycles.worst_case_graph(self,k)
networkx.tests.test_TestCycles
networkx.tests.test_TestCycles.is_cyclic_permuatation(self,a,b)
networkx.tests.test_TestCycles.setUp(self)
networkx.tests.test_TestCycles.test_complete_directed_graph(self)
networkx.tests.test_TestCycles.test_cycle_basis(self)
networkx.tests.test_TestCycles.test_simple_cycles(self)
networkx.tests.test_TestCycles.test_simple_cycles_empty(self)
networkx.tests.test_TestCycles.test_simple_cycles_graph(self)
networkx.tests.test_TestCycles.test_simple_cycles_small(self)
networkx.tests.test_TestCycles.test_unsortable(self)
networkx.tests.test_TestCycles.test_worst_case_graph(self)
networkx.tests.test_TestCycles.worst_case_graph(self,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_graphical.py----------------------------------------
A:networkx.algorithms.tests.test_graphical.G->networkx.barabasi_albert_graph(n, 1)
A:networkx.algorithms.tests.test_graphical.deg->list(graph.degree().values())
networkx.algorithms.tests.test_graphical.test_atlas()
networkx.algorithms.tests.test_graphical.test_small_graph_false()
networkx.algorithms.tests.test_graphical.test_small_graph_true()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence1()
networkx.algorithms.tests.test_graphical.test_valid_degree_sequence2()
networkx.tests.test_test_atlas()
networkx.tests.test_test_small_graph_false()
networkx.tests.test_test_small_graph_true()
networkx.tests.test_test_valid_degree_sequence1()
networkx.tests.test_test_valid_degree_sequence2()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_operators.py----------------------------------------
A:networkx.algorithms.tests.test_operators.g->networkx.MultiGraph()
A:networkx.algorithms.tests.test_operators.h->networkx.MultiGraph()
A:networkx.algorithms.tests.test_operators.gh->networkx.symmetric_difference(g, h)
A:networkx.algorithms.tests.test_operators.G->networkx.MultiGraph()
A:networkx.algorithms.tests.test_operators.H->networkx.MultiGraph()
A:networkx.algorithms.tests.test_operators.I->networkx.intersection(G, H)
A:networkx.algorithms.tests.test_operators.D->networkx.difference(H, G)
A:networkx.algorithms.tests.test_operators.K3->complete_graph(3)
A:networkx.algorithms.tests.test_operators.P3->path_graph(3)
A:networkx.algorithms.tests.test_operators.R->DiGraph()
A:networkx.algorithms.tests.test_operators.G1->DiGraph()
A:networkx.algorithms.tests.test_operators.G2->union(G2, G2, rename=('', 'copy'))
A:networkx.algorithms.tests.test_operators.H1->union(H, G1, rename=('H', 'G1'))
A:networkx.algorithms.tests.test_operators.H2->union(H, G2, rename=('H', ''))
A:networkx.algorithms.tests.test_operators.E->disjoint_union(G1, G2)
A:networkx.algorithms.tests.test_operators.GH->networkx.compose(G, H)
A:networkx.algorithms.tests.test_operators.null->null_graph()
A:networkx.algorithms.tests.test_operators.empty1->empty_graph(1)
A:networkx.algorithms.tests.test_operators.empty10->empty_graph(10)
A:networkx.algorithms.tests.test_operators.K5->complete_graph(5)
A:networkx.algorithms.tests.test_operators.K10->complete_graph(10)
A:networkx.algorithms.tests.test_operators.P2->path_graph(2)
A:networkx.algorithms.tests.test_operators.P5->path_graph(5)
A:networkx.algorithms.tests.test_operators.P10->path_graph(10)
A:networkx.algorithms.tests.test_operators.P3cc->complement(complement(P3))
A:networkx.algorithms.tests.test_operators.nullcc->complement(complement(null))
A:networkx.algorithms.tests.test_operators.b->bull_graph()
A:networkx.algorithms.tests.test_operators.bcc->complement(complement(b))
A:networkx.algorithms.tests.test_operators.G1C->complement(G1)
networkx.algorithms.tests.test_operators.test_complement()
networkx.algorithms.tests.test_operators.test_complement_2()
networkx.algorithms.tests.test_operators.test_compose_multigraph()
networkx.algorithms.tests.test_operators.test_difference()
networkx.algorithms.tests.test_operators.test_difference2()
networkx.algorithms.tests.test_operators.test_difference_attributes()
networkx.algorithms.tests.test_operators.test_difference_multigraph_attributes()
networkx.algorithms.tests.test_operators.test_disjoint_union_multigraph()
networkx.algorithms.tests.test_operators.test_intersection()
networkx.algorithms.tests.test_operators.test_intersection_attributes()
networkx.algorithms.tests.test_operators.test_intersection_multigraph_attributes()
networkx.algorithms.tests.test_operators.test_symmetric_difference_multigraph()
networkx.algorithms.tests.test_operators.test_union_and_compose()
networkx.algorithms.tests.test_operators.test_union_attributes()
networkx.algorithms.tests.test_operators.test_union_multigraph()
networkx.tests.test_test_complement()
networkx.tests.test_test_complement_2()
networkx.tests.test_test_compose_multigraph()
networkx.tests.test_test_difference()
networkx.tests.test_test_difference2()
networkx.tests.test_test_difference_attributes()
networkx.tests.test_test_difference_multigraph_attributes()
networkx.tests.test_test_disjoint_union_multigraph()
networkx.tests.test_test_intersection()
networkx.tests.test_test_intersection_attributes()
networkx.tests.test_test_intersection_multigraph_attributes()
networkx.tests.test_test_symmetric_difference_multigraph()
networkx.tests.test_test_union_and_compose()
networkx.tests.test_test_union_attributes()
networkx.tests.test_test_union_multigraph()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.tests.test_cluster.G->networkx.cycle_graph(3)
A:networkx.algorithms.tests.test_cluster.G1->networkx.cycle_graph(3).subgraph([1, 2, 3, 4, 5, 13, 14, 15, 16])
A:networkx.algorithms.tests.test_cluster.G2->networkx.cycle_graph(3).subgraph([1, 6, 7, 8, 9, 10, 11, 12])
networkx.algorithms.tests.test_cluster.TestClustering
networkx.algorithms.tests.test_cluster.TestClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_bipartite_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_lind_square_clustering(self)
networkx.algorithms.tests.test_cluster.TestSquareClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestTransitivity
networkx.algorithms.tests.test_cluster.TestTransitivity.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_path(self)
networkx.algorithms.tests.test_cluster.TestTransitivity.test_transitivity(self)
networkx.algorithms.tests.test_cluster.TestTriangles
networkx.algorithms.tests.test_cluster.TestTriangles.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_empty(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_k5(self)
networkx.algorithms.tests.test_cluster.TestTriangles.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_clustering(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_cubical(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_k5(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_path(self)
networkx.algorithms.tests.test_cluster.TestWeightedClustering.test_triangle_and_edge(self)
networkx.algorithms.tests.test_cluster.test_average_clustering()
networkx.tests.test_TestClustering
networkx.tests.test_TestClustering.test_clustering(self)
networkx.tests.test_TestClustering.test_cubical(self)
networkx.tests.test_TestClustering.test_k5(self)
networkx.tests.test_TestClustering.test_path(self)
networkx.tests.test_TestSquareClustering
networkx.tests.test_TestSquareClustering.test_bipartite_k5(self)
networkx.tests.test_TestSquareClustering.test_clustering(self)
networkx.tests.test_TestSquareClustering.test_cubical(self)
networkx.tests.test_TestSquareClustering.test_k5(self)
networkx.tests.test_TestSquareClustering.test_lind_square_clustering(self)
networkx.tests.test_TestSquareClustering.test_path(self)
networkx.tests.test_TestTransitivity
networkx.tests.test_TestTransitivity.test_cubical(self)
networkx.tests.test_TestTransitivity.test_k5(self)
networkx.tests.test_TestTransitivity.test_path(self)
networkx.tests.test_TestTransitivity.test_transitivity(self)
networkx.tests.test_TestTriangles
networkx.tests.test_TestTriangles.test_cubical(self)
networkx.tests.test_TestTriangles.test_empty(self)
networkx.tests.test_TestTriangles.test_k5(self)
networkx.tests.test_TestTriangles.test_path(self)
networkx.tests.test_TestWeightedClustering
networkx.tests.test_TestWeightedClustering.test_clustering(self)
networkx.tests.test_TestWeightedClustering.test_cubical(self)
networkx.tests.test_TestWeightedClustering.test_k5(self)
networkx.tests.test_TestWeightedClustering.test_path(self)
networkx.tests.test_TestWeightedClustering.test_triangle_and_edge(self)
networkx.tests.test_test_average_clustering()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_distance_regular.py----------------------------------------
A:networkx.algorithms.tests.test_distance_regular.G->networkx.cycle_graph(4)
A:networkx.algorithms.tests.test_distance_regular.(b, c)->networkx.intersection_array(nx.icosahedral_graph())
A:networkx.algorithms.tests.test_distance_regular.g->networkx.global_parameters(b, c)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_global_parameters(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_intersection_array(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_is_distance_regular(self)
networkx.algorithms.tests.test_distance_regular.TestDistanceRegular.test_not_connected(self)
networkx.tests.test_TestDistanceRegular
networkx.tests.test_TestDistanceRegular.test_global_parameters(self)
networkx.tests.test_TestDistanceRegular.test_intersection_array(self)
networkx.tests.test_TestDistanceRegular.test_is_distance_regular(self)
networkx.tests.test_TestDistanceRegular.test_not_connected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_matching.py----------------------------------------
A:networkx.algorithms.tests.test_matching.G->networkx.Graph()
networkx.algorithms.tests.test_matching.TestMatching
networkx.algorithms.tests.test_matching.TestMatching.setUp(self)
networkx.algorithms.tests.test_matching.TestMatching.test_floating_point_weights(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom1(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom2(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_augmenting(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_expand_recursively(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nasty_blossom_least_slack(self)
networkx.algorithms.tests.test_matching.TestMatching.test_negative_weights(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel(self)
networkx.algorithms.tests.test_matching.TestMatching.test_nested_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_blossom_relabel_expand(self)
networkx.algorithms.tests.test_matching.TestMatching.test_s_t_blossom(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial1(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial2(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial3(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial4(self)
networkx.algorithms.tests.test_matching.TestMatching.test_trivial5(self)
networkx.tests.test_TestMatching
networkx.tests.test_TestMatching.setUp(self)
networkx.tests.test_TestMatching.test_floating_point_weights(self)
networkx.tests.test_TestMatching.test_nasty_blossom1(self)
networkx.tests.test_TestMatching.test_nasty_blossom2(self)
networkx.tests.test_TestMatching.test_nasty_blossom_augmenting(self)
networkx.tests.test_TestMatching.test_nasty_blossom_expand_recursively(self)
networkx.tests.test_TestMatching.test_nasty_blossom_least_slack(self)
networkx.tests.test_TestMatching.test_negative_weights(self)
networkx.tests.test_TestMatching.test_nested_s_blossom(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_expand(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_relabel(self)
networkx.tests.test_TestMatching.test_nested_s_blossom_relabel_expand(self)
networkx.tests.test_TestMatching.test_s_blossom(self)
networkx.tests.test_TestMatching.test_s_blossom_relabel_expand(self)
networkx.tests.test_TestMatching.test_s_t_blossom(self)
networkx.tests.test_TestMatching.test_trivial1(self)
networkx.tests.test_TestMatching.test_trivial2(self)
networkx.tests.test_TestMatching.test_trivial3(self)
networkx.tests.test_TestMatching.test_trivial4(self)
networkx.tests.test_TestMatching.test_trivial5(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_vitality.py----------------------------------------
A:networkx.algorithms.tests.test_vitality.G->networkx.DiGraph()
A:networkx.algorithms.tests.test_vitality.v->networkx.closeness_vitality(G, weight='weight')
networkx.algorithms.tests.test_vitality.TestVitality
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_unweighted_digraph(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted(self)
networkx.algorithms.tests.test_vitality.TestVitality.test_closeness_vitality_weighted_digraph(self)
networkx.tests.test_TestVitality
networkx.tests.test_TestVitality.test_closeness_vitality_unweighted(self)
networkx.tests.test_TestVitality.test_closeness_vitality_unweighted_digraph(self)
networkx.tests.test_TestVitality.test_closeness_vitality_weighted(self)
networkx.tests.test_TestVitality.test_closeness_vitality_weighted_digraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_clique.py----------------------------------------
A:networkx.algorithms.tests.test_clique.self.G->cnlti(nx.generators.havel_hakimi_graph(z), first_label=1)
A:networkx.algorithms.tests.test_clique.self.cl->list(nx.find_cliques(self.G))
A:networkx.algorithms.tests.test_clique.H->networkx.project_down(B)
A:networkx.algorithms.tests.test_clique.cl->list(nx.find_cliques(self.G))
A:networkx.algorithms.tests.test_clique.rcl->networkx.find_cliques_recursive(self.G)
A:networkx.algorithms.tests.test_clique.hcl->list(nx.find_cliques(self.H))
A:networkx.algorithms.tests.test_clique.B->networkx.make_clique_bipartite(G)
A:networkx.algorithms.tests.test_clique.H1->networkx.project_up(B)
A:networkx.algorithms.tests.test_clique.H2->networkx.make_max_clique_graph(G)
networkx.algorithms.tests.test_clique.TestCliques
networkx.algorithms.tests.test_clique.TestCliques.setUp(self)
networkx.algorithms.tests.test_clique.TestCliques.test_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_cliques_containing_node(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques1(self)
networkx.algorithms.tests.test_clique.TestCliques.test_find_cliques2(self)
networkx.algorithms.tests.test_clique.TestCliques.test_make_clique_bipartite(self)
networkx.algorithms.tests.test_clique.TestCliques.test_node_clique_number(self)
networkx.algorithms.tests.test_clique.TestCliques.test_number_of_cliques(self)
networkx.algorithms.tests.test_clique.TestCliques.test_selfloops(self)
networkx.tests.test_TestCliques
networkx.tests.test_TestCliques.setUp(self)
networkx.tests.test_TestCliques.test_clique_number(self)
networkx.tests.test_TestCliques.test_cliques_containing_node(self)
networkx.tests.test_TestCliques.test_find_cliques1(self)
networkx.tests.test_TestCliques.test_find_cliques2(self)
networkx.tests.test_TestCliques.test_make_clique_bipartite(self)
networkx.tests.test_TestCliques.test_node_clique_number(self)
networkx.tests.test_TestCliques.test_number_of_cliques(self)
networkx.tests.test_TestCliques.test_selfloops(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_core.py----------------------------------------
A:networkx.algorithms.tests.test_core.t1->networkx.convert_node_labels_to_integers(nx.tetrahedral_graph(), 1)
A:networkx.algorithms.tests.test_core.t2->networkx.convert_node_labels_to_integers(t1, 5)
A:networkx.algorithms.tests.test_core.G->networkx.Graph()
A:networkx.algorithms.tests.test_core.self.H->networkx.havel_hakimi_graph(degseq)
A:networkx.algorithms.tests.test_core.cores->networkx.find_cores(self.H)
A:networkx.algorithms.tests.test_core.main_core_subgraph->networkx.k_core(self.H)
A:networkx.algorithms.tests.test_core.k_core_subgraph->networkx.k_core(self.H, k=2)
A:networkx.algorithms.tests.test_core.main_crust_subgraph->networkx.k_crust(self.H)
A:networkx.algorithms.tests.test_core.k_crust_subgraph->networkx.k_crust(self.H, k=0)
A:networkx.algorithms.tests.test_core.main_shell_subgraph->networkx.k_shell(self.H)
A:networkx.algorithms.tests.test_core.k_shell_subgraph->networkx.k_shell(self.H, k=0)
A:networkx.algorithms.tests.test_core.k_corona_subgraph->networkx.k_corona(self.H, k=0)
networkx.algorithms.tests.test_core.TestCore
networkx.algorithms.tests.test_core.TestCore.setUp(self)
networkx.algorithms.tests.test_core.TestCore.test_core_number(self)
networkx.algorithms.tests.test_core.TestCore.test_find_cores(self)
networkx.algorithms.tests.test_core.TestCore.test_find_cores2(self)
networkx.algorithms.tests.test_core.TestCore.test_k_core(self)
networkx.algorithms.tests.test_core.TestCore.test_k_corona(self)
networkx.algorithms.tests.test_core.TestCore.test_k_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_k_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_main_core(self)
networkx.algorithms.tests.test_core.TestCore.test_main_crust(self)
networkx.algorithms.tests.test_core.TestCore.test_main_shell(self)
networkx.algorithms.tests.test_core.TestCore.test_trivial(self)
networkx.tests.test_TestCore
networkx.tests.test_TestCore.setUp(self)
networkx.tests.test_TestCore.test_core_number(self)
networkx.tests.test_TestCore.test_find_cores(self)
networkx.tests.test_TestCore.test_find_cores2(self)
networkx.tests.test_TestCore.test_k_core(self)
networkx.tests.test_TestCore.test_k_corona(self)
networkx.tests.test_TestCore.test_k_crust(self)
networkx.tests.test_TestCore.test_k_shell(self)
networkx.tests.test_TestCore.test_main_core(self)
networkx.tests.test_TestCore.test_main_crust(self)
networkx.tests.test_TestCore.test_main_shell(self)
networkx.tests.test_TestCore.test_trivial(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_product.py----------------------------------------
A:networkx.algorithms.tests.test_product.G->networkx.erdos_renyi_graph(10, 2 / 10.0)
A:networkx.algorithms.tests.test_product.H->networkx.erdos_renyi_graph(10, 2 / 10.0)
A:networkx.algorithms.tests.test_product.null->networkx.null_graph()
A:networkx.algorithms.tests.test_product.empty10->networkx.empty_graph(10)
A:networkx.algorithms.tests.test_product.K3->networkx.complete_graph(3)
A:networkx.algorithms.tests.test_product.K10->networkx.complete_graph(10)
A:networkx.algorithms.tests.test_product.P3->networkx.path_graph(3)
A:networkx.algorithms.tests.test_product.P10->networkx.path_graph(10)
A:networkx.algorithms.tests.test_product.P5->networkx.path_graph(5)
A:networkx.algorithms.tests.test_product.K5->networkx.complete_graph(5)
A:networkx.algorithms.tests.test_product.K2->networkx.complete_graph(2)
A:networkx.algorithms.tests.test_product.GH->strong_product(G, H)
A:networkx.algorithms.tests.test_product.P2->networkx.path_graph(2)
networkx.algorithms.tests.test_product.test_cartesian_product_classic()
networkx.algorithms.tests.test_product.test_cartesian_product_multigraph()
networkx.algorithms.tests.test_product.test_cartesian_product_null()
networkx.algorithms.tests.test_product.test_cartesian_product_raises()
networkx.algorithms.tests.test_product.test_cartesian_product_random()
networkx.algorithms.tests.test_product.test_cartesian_product_size()
networkx.algorithms.tests.test_product.test_lexicographic_product_null()
networkx.algorithms.tests.test_product.test_lexicographic_product_raises()
networkx.algorithms.tests.test_product.test_lexicographic_product_random()
networkx.algorithms.tests.test_product.test_lexicographic_product_size()
networkx.algorithms.tests.test_product.test_strong_product_null()
networkx.algorithms.tests.test_product.test_strong_product_raises()
networkx.algorithms.tests.test_product.test_strong_product_random()
networkx.algorithms.tests.test_product.test_strong_product_size()
networkx.algorithms.tests.test_product.test_tensor_product_classic_result()
networkx.algorithms.tests.test_product.test_tensor_product_null()
networkx.algorithms.tests.test_product.test_tensor_product_raises()
networkx.algorithms.tests.test_product.test_tensor_product_random()
networkx.algorithms.tests.test_product.test_tensor_product_size()
networkx.tests.test_test_cartesian_product_classic()
networkx.tests.test_test_cartesian_product_multigraph()
networkx.tests.test_test_cartesian_product_null()
networkx.tests.test_test_cartesian_product_raises()
networkx.tests.test_test_cartesian_product_random()
networkx.tests.test_test_cartesian_product_size()
networkx.tests.test_test_lexicographic_product_null()
networkx.tests.test_test_lexicographic_product_raises()
networkx.tests.test_test_lexicographic_product_random()
networkx.tests.test_test_lexicographic_product_size()
networkx.tests.test_test_strong_product_null()
networkx.tests.test_test_strong_product_raises()
networkx.tests.test_test_strong_product_random()
networkx.tests.test_test_strong_product_size()
networkx.tests.test_test_tensor_product_classic_result()
networkx.tests.test_test_tensor_product_null()
networkx.tests.test_test_tensor_product_raises()
networkx.tests.test_test_tensor_product_random()
networkx.tests.test_test_tensor_product_size()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_boundary.py----------------------------------------
A:networkx.algorithms.tests.test_boundary.self.null->networkx.null_graph()
A:networkx.algorithms.tests.test_boundary.self.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.self.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.algorithms.tests.test_boundary.P->networkx.petersen_graph()
networkx.algorithms.tests.test_boundary.TestBoundary
networkx.algorithms.tests.test_boundary.TestBoundary.setUp(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_k10_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_null_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_null_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_path_edge_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_path_node_boundary(self)
networkx.algorithms.tests.test_boundary.TestBoundary.test_petersen(self)
networkx.tests.test_TestBoundary
networkx.tests.test_TestBoundary.setUp(self)
networkx.tests.test_TestBoundary.test_k10_edge_boundary(self)
networkx.tests.test_TestBoundary.test_k10_node_boundary(self)
networkx.tests.test_TestBoundary.test_null_edge_boundary(self)
networkx.tests.test_TestBoundary.test_null_node_boundary(self)
networkx.tests.test_TestBoundary.test_path_edge_boundary(self)
networkx.tests.test_TestBoundary.test_path_node_boundary(self)
networkx.tests.test_TestBoundary.test_petersen(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_richclub.py----------------------------------------
A:networkx.algorithms.tests.test_richclub.G->networkx.Graph([(0, 1), (0, 2), (1, 2), (1, 3), (1, 4), (4, 5)])
A:networkx.algorithms.tests.test_richclub.rc->networkx.richclub.rich_club_coefficient(T, normalized=False)
A:networkx.algorithms.tests.test_richclub.rcNorm->networkx.richclub.rich_club_coefficient(G, Q=2)
A:networkx.algorithms.tests.test_richclub.T->networkx.balanced_tree(2, 10)
networkx.algorithms.tests.test_richclub.test_richclub()
networkx.algorithms.tests.test_richclub.test_richclub2()
networkx.algorithms.tests.test_richclub.test_richclub_normalized()
networkx.tests.test_test_richclub()
networkx.tests.test_test_richclub2()
networkx.tests.test_test_richclub_normalized()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_euler.py----------------------------------------
A:networkx.algorithms.tests.test_euler.G->networkx.MultiGraph()
A:networkx.algorithms.tests.test_euler.edges->list(eulerian_circuit(G, source=0))
networkx.algorithms.tests.test_euler.TestEuler
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_cycle(self)
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_digraph(self)
networkx.algorithms.tests.test_euler.TestEuler.test_eulerian_circuit_multigraph(self)
networkx.algorithms.tests.test_euler.TestEuler.test_is_eulerian(self)
networkx.tests.test_TestEuler
networkx.tests.test_TestEuler.test_eulerian_circuit_cycle(self)
networkx.tests.test_TestEuler.test_eulerian_circuit_digraph(self)
networkx.tests.test_TestEuler.test_eulerian_circuit_multigraph(self)
networkx.tests.test_TestEuler.test_is_eulerian(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_block.py----------------------------------------
A:networkx.algorithms.tests.test_block.G->networkx.barbell_graph(3, 0)
A:networkx.algorithms.tests.test_block.M->networkx.blockmodel(G, partition)
networkx.algorithms.tests.test_block.TestBlock
networkx.algorithms.tests.test_block.TestBlock.test_barbell(self)
networkx.algorithms.tests.test_block.TestBlock.test_barbell_plus(self)
networkx.algorithms.tests.test_block.TestBlock.test_path(self)
networkx.algorithms.tests.test_block.TestBlock.test_weighted_path(self)
networkx.tests.test_TestBlock
networkx.tests.test_TestBlock.test_barbell(self)
networkx.tests.test_TestBlock.test_barbell_plus(self)
networkx.tests.test_TestBlock.test_path(self)
networkx.tests.test_TestBlock.test_weighted_path(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_dag.py----------------------------------------
A:networkx.algorithms.tests.test_dag.DG->networkx.DiGraph()
A:networkx.algorithms.tests.test_dag.G->networkx.DiGraph()
networkx.algorithms.tests.test_dag.TestDAG
networkx.algorithms.tests.test_dag.TestDAG.setUp(self)
networkx.algorithms.tests.test_dag.TestDAG.test_nbunch_argument(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort1(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort2(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort3(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort4(self)
networkx.algorithms.tests.test_dag.TestDAG.test_topological_sort5(self)
networkx.algorithms.tests.test_dag.test_is_aperiodic_bipartite()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle3()
networkx.algorithms.tests.test_dag.test_is_aperiodic_cycle4()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected()
networkx.algorithms.tests.test_dag.test_is_aperiodic_disconnected2()
networkx.algorithms.tests.test_dag.test_is_aperiodic_raise()
networkx.algorithms.tests.test_dag.test_is_aperiodic_rary_tree()
networkx.algorithms.tests.test_dag.test_is_aperiodic_selfloop()
networkx.tests.test_TestDAG
networkx.tests.test_TestDAG.setUp(self)
networkx.tests.test_TestDAG.test_nbunch_argument(self)
networkx.tests.test_TestDAG.test_topological_sort1(self)
networkx.tests.test_TestDAG.test_topological_sort2(self)
networkx.tests.test_TestDAG.test_topological_sort3(self)
networkx.tests.test_TestDAG.test_topological_sort4(self)
networkx.tests.test_TestDAG.test_topological_sort5(self)
networkx.tests.test_test_is_aperiodic_bipartite()
networkx.tests.test_test_is_aperiodic_cycle()
networkx.tests.test_test_is_aperiodic_cycle2()
networkx.tests.test_test_is_aperiodic_cycle3()
networkx.tests.test_test_is_aperiodic_cycle4()
networkx.tests.test_test_is_aperiodic_disconnected()
networkx.tests.test_test_is_aperiodic_disconnected2()
networkx.tests.test_test_is_aperiodic_raise()
networkx.tests.test_test_is_aperiodic_rary_tree()
networkx.tests.test_test_is_aperiodic_selfloop()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_smetric.py----------------------------------------
A:networkx.algorithms.tests.test_smetric.g->networkx.Graph()
A:networkx.algorithms.tests.test_smetric.sm->networkx.s_metric(g, normalized=False)
networkx.algorithms.tests.test_smetric.test_smetric()
networkx.tests.test_test_smetric()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_mis.py----------------------------------------
A:networkx.algorithms.tests.test_mis.self.florentine->networkx.Graph()
A:networkx.algorithms.tests.test_mis.G->networkx.random_graphs.erdos_renyi_graph(i * 10 + 1, random.random())
A:networkx.algorithms.tests.test_mis.indep->networkx.maximal_independent_set(G, [4, 5, 9, 10])
A:networkx.algorithms.tests.test_mis.IS->networkx.maximal_independent_set(G)
A:networkx.algorithms.tests.test_mis.neighbors_of_MIS->set.union(*(set(G.neighbors(v)) for v in IS))
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet(object)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.setup(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K5(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_K55(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_bipartite(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_exception(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_florentine_family(self)
networkx.algorithms.tests.test_mis.TestMaximalIndependantSet.test_random_graphs(self)
networkx.tests.test_TestMaximalIndependantSet(object)
networkx.tests.test_TestMaximalIndependantSet.setup(self)
networkx.tests.test_TestMaximalIndependantSet.test_K5(self)
networkx.tests.test_TestMaximalIndependantSet.test_K55(self)
networkx.tests.test_TestMaximalIndependantSet.test_bipartite(self)
networkx.tests.test_TestMaximalIndependantSet.test_exception(self)
networkx.tests.test_TestMaximalIndependantSet.test_florentine_family(self)
networkx.tests.test_TestMaximalIndependantSet.test_random_graphs(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_distance_measures.py----------------------------------------
A:networkx.algorithms.tests.test_distance_measures.G->networkx.Graph()
A:networkx.algorithms.tests.test_distance_measures.e->networkx.eccentricity(self.G)
networkx.algorithms.tests.test_distance_measures.TestDistance
networkx.algorithms.tests.test_distance_measures.TestDistance.setUp(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_center(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_diameter(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_eccentricity_exception(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_periphery(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius(self)
networkx.algorithms.tests.test_distance_measures.TestDistance.test_radius_exception(self)
networkx.tests.test_TestDistance
networkx.tests.test_TestDistance.setUp(self)
networkx.tests.test_TestDistance.test_center(self)
networkx.tests.test_TestDistance.test_diameter(self)
networkx.tests.test_TestDistance.test_eccentricity(self)
networkx.tests.test_TestDistance.test_eccentricity_exception(self)
networkx.tests.test_TestDistance.test_periphery(self)
networkx.tests.test_TestDistance.test_radius(self)
networkx.tests.test_TestDistance.test_radius_exception(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/tests/test_swap.py----------------------------------------
A:networkx.algorithms.tests.test_swap.graph->barabasi_albert_graph(200, 1)
A:networkx.algorithms.tests.test_swap.degreeStart->sorted(graph.degree().values())
A:networkx.algorithms.tests.test_swap.G->double_edge_swap(G, 1, 100)
A:networkx.algorithms.tests.test_swap.degseq->sorted(G.degree().values())
A:networkx.algorithms.tests.test_swap.degseq2->sorted(graph.degree().values())
A:networkx.algorithms.tests.test_swap.degree_start->sorted(G.degree().values())
networkx.algorithms.tests.test_swap.test_degree_seq_c4()
networkx.algorithms.tests.test_swap.test_double_edge_swap()
networkx.tests.test_test_degree_seq_c4()
networkx.tests.test_test_double_edge_swap()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.generic.sp->networkx.shortest_path(G, source, target)
A:networkx.algorithms.shortest_paths.generic.paths->networkx.dijkstra_path_length(G, source, target, weight)
A:networkx.algorithms.shortest_paths.generic.p->networkx.bidirectional_shortest_path(G, source, target)
A:networkx.algorithms.shortest_paths.generic.path_length->networkx.single_source_dijkstra_path_length(G, node, weight=weight)
A:networkx.algorithms.shortest_paths.generic.n->len(G)
networkx.algorithms.shortest_paths.generic.average_shortest_path_length(G,weight=None)
networkx.algorithms.shortest_paths.generic.has_path(G,source,target)
networkx.algorithms.shortest_paths.generic.shortest_path(G,source=None,target=None,weight=None)
networkx.algorithms.shortest_paths.generic.shortest_path_length(G,source=None,target=None,weight=None)
networkx.average_shortest_path_length(G,weight=None)
networkx.has_path(G,source,target)
networkx.shortest_path(G,source=None,target=None,weight=None)
networkx.shortest_path_length(G,source=None,target=None,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.dense.A->numpy.minimum(A, r + r.T)
A:networkx.algorithms.shortest_paths.dense.I->numpy.identity(n)
A:networkx.algorithms.shortest_paths.dense.dist->defaultdict(lambda : defaultdict(lambda : float('inf')))
A:networkx.algorithms.shortest_paths.dense.pred->defaultdict(dict)
A:networkx.algorithms.shortest_paths.dense.e_weight->d.get(weight, 1.0)
A:networkx.algorithms.shortest_paths.dense.dist[u][v]->min(e_weight, dist[u][v])
A:networkx.algorithms.shortest_paths.dense.dist[v][u]->min(e_weight, dist[v][u])
networkx.algorithms.shortest_paths.dense.floyd_warshall(G,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.algorithms.shortest_paths.dense.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.algorithms.shortest_paths.dense.setup_module(module)
networkx.floyd_warshall(G,weight='weight')
networkx.floyd_warshall_numpy(G,nodelist=None,weight='weight')
networkx.floyd_warshall_predecessor_and_distance(G,weight='weight')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.unweighted.paths[n]->single_source_shortest_path(G, n, cutoff=cutoff)
A:networkx.algorithms.shortest_paths.unweighted.results->_bidirectional_pred_succ(G, source, target)
networkx.algorithms.shortest_paths.unweighted._bidirectional_pred_succ(G,source,target)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.all_pairs_shortest_path_length(G,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.bidirectional_shortest_path(G,source,target)
networkx.algorithms.shortest_paths.unweighted.predecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path(G,source,cutoff=None)
networkx.algorithms.shortest_paths.unweighted.single_source_shortest_path_length(G,source,cutoff=None)
networkx.un_bidirectional_pred_succ(G,source,target)
networkx.unall_pairs_shortest_path(G,cutoff=None)
networkx.unall_pairs_shortest_path_length(G,cutoff=None)
networkx.unbidirectional_shortest_path(G,source,target)
networkx.unpredecessor(G,source,target=None,cutoff=None,return_seen=None)
networkx.unsingle_source_shortest_path(G,source,cutoff=None)
networkx.unsingle_source_shortest_path_length(G,source,cutoff=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.astar.__author__->'\n'.join(['Salim Fadhley <salimfadhley@gmail.com>', "Matteo Dell'Amico <matteodellamico@gmail.com>"])
A:networkx.algorithms.shortest_paths.astar.(_, __, curnode, dist, parent)->heappop(queue)
A:networkx.algorithms.shortest_paths.astar.h->heuristic(neighbor, target)
A:networkx.algorithms.shortest_paths.astar.path->astar_path(G, source, target, heuristic)
networkx.algorithms.shortest_paths.astar.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.algorithms.shortest_paths.astar.astar_path_length(G,source,target,heuristic=None,weight='weight')
networkx.astar_path(G,source,target,heuristic=None,weight='weight')
networkx.astar_path_length(G,source,target,heuristic=None,weight='weight')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.weighted.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Loïc Séguin-C. <loicseguin@gmail.com>', 'Dan Schult <dschult@colgate.edu>'])
A:networkx.algorithms.shortest_paths.weighted.(length, path)->single_source_dijkstra(G, source, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.length->single_source_dijkstra_path_length(G, source, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.(d, v)->pop(fringe)
A:networkx.algorithms.shortest_paths.weighted.minweight->G[w][v].get(weight, 1)
A:networkx.algorithms.shortest_paths.weighted.edata->iter(G[v].items())
A:networkx.algorithms.shortest_paths.weighted.paths[n]->single_source_dijkstra_path(G, n, cutoff=cutoff, weight=weight)
A:networkx.algorithms.shortest_paths.weighted.numb_nodes->len(G)
A:networkx.algorithms.shortest_paths.weighted.newnode->generate_unique_node()
A:networkx.algorithms.shortest_paths.weighted.(dist, v)->heapq.heappop(fringe[dir])
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.bellman_ford(G,source,weight='weight')
networkx.algorithms.shortest_paths.weighted.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_path_length(G,source,target,weight='weight')
networkx.algorithms.shortest_paths.weighted.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.negative_edge_cycle(G,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.algorithms.shortest_paths.weighted.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')
networkx.all_pairs_dijkstra_path(G,cutoff=None,weight='weight')
networkx.all_pairs_dijkstra_path_length(G,cutoff=None,weight='weight')
networkx.bellman_ford(G,source,weight='weight')
networkx.bidirectional_dijkstra(G,source,target,weight='weight')
networkx.dijkstra_path(G,source,target,weight='weight')
networkx.dijkstra_path_length(G,source,target,weight='weight')
networkx.dijkstra_predecessor_and_distance(G,source,cutoff=None,weight='weight')
networkx.negative_edge_cycle(G,weight='weight')
networkx.single_source_dijkstra(G,source,target=None,cutoff=None,weight='weight')
networkx.single_source_dijkstra_path(G,source,cutoff=None,weight='weight')
networkx.single_source_dijkstra_path_length(G,source,cutoff=None,weight='weight')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/tests/test_generic.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_generic.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_generic.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_generic.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_generic.p->networkx.shortest_path(self.grid, weight='weight')
A:networkx.algorithms.shortest_paths.tests.test_generic.l->networkx.average_shortest_path_length(G, weight='weight')
A:networkx.algorithms.shortest_paths.tests.test_generic.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_generic.g->networkx.Graph()
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.setUp(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_disconnected(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_average_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_has_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_single_source_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_generic.TestGenericPath.test_weighted_average_shortest_path(self)
networkx.tests.test_TestGenericPath
networkx.tests.test_TestGenericPath.setUp(self)
networkx.tests.test_TestGenericPath.test_all_pairs_shortest_path(self)
networkx.tests.test_TestGenericPath.test_all_pairs_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_average_shortest_disconnected(self)
networkx.tests.test_TestGenericPath.test_average_shortest_path(self)
networkx.tests.test_TestGenericPath.test_has_path(self)
networkx.tests.test_TestGenericPath.test_shortest_path(self)
networkx.tests.test_TestGenericPath.test_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_single_source_shortest_path(self)
networkx.tests.test_TestGenericPath.test_single_source_shortest_path_length(self)
networkx.tests.test_TestGenericPath.test_weighted_average_shortest_path(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/tests/test_unweighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_unweighted.p->networkx.all_pairs_shortest_path(self.grid)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.l->networkx.all_pairs_shortest_path_length(self.grid)
A:networkx.algorithms.shortest_paths.tests.test_unweighted.G->networkx.grid_2d_graph(2, 2)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.setUp(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_predecessor(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_shortest_path_length(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path(self)
networkx.algorithms.shortest_paths.tests.test_unweighted.TestUnweightedPath.test_single_source_shortest_path_length(self)
networkx.tests.test_unTestUnweightedPath
networkx.tests.test_unTestUnweightedPath.setUp(self)
networkx.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_all_pairs_shortest_path_length(self)
networkx.tests.test_unTestUnweightedPath.test_bidirectional_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_predecessor(self)
networkx.tests.test_unTestUnweightedPath.test_shortest_path_length(self)
networkx.tests.test_unTestUnweightedPath.test_single_source_shortest_path(self)
networkx.tests.test_unTestUnweightedPath.test_single_source_shortest_path_length(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/tests/test_dense.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_dense.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.(path, dist)->networkx.floyd_warshall_predecessor_and_distance(XG4, weight='heavy')
A:networkx.algorithms.shortest_paths.tests.test_dense.GG->networkx.DiGraph().to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_dense.G->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_dense.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_dense.dist->networkx.floyd_warshall_numpy(XG4, weight='heavy')
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.setUp(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_cycle_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weight_parameter_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted2(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted_numpy(self)
networkx.algorithms.shortest_paths.tests.test_dense.TestFloyd.test_weighted_numpy(self)
networkx.tests.test_TestFloyd
networkx.tests.test_TestFloyd.setUp(self)
networkx.tests.test_TestFloyd.test_cycle(self)
networkx.tests.test_TestFloyd.test_cycle_numpy(self)
networkx.tests.test_TestFloyd.test_floyd_warshall_predecessor_and_distance(self)
networkx.tests.test_TestFloyd.test_weight_parameter(self)
networkx.tests.test_TestFloyd.test_weight_parameter_numpy(self)
networkx.tests.test_TestFloyd.test_weighted(self)
networkx.tests.test_TestFloyd.test_weighted2(self)
networkx.tests.test_TestFloyd.test_weighted_numpy(self)
networkx.tests.test_TestFloyd.test_weighted_numpy(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/tests/test_weighted.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1, ordering='sorted')
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.cycle->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.directed_cycle->networkx.cycle_graph(7, create_using=nx.DiGraph())
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG->networkx.MultiDiGraph(self.XG)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.MXG4->networkx.MultiGraph(self.XG4)
A:networkx.algorithms.shortest_paths.tests.test_weighted.self.G->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(D, P)->networkx.single_source_dijkstra(GG, 's')
A:networkx.algorithms.shortest_paths.tests.test_weighted.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_weighted.G->networkx.grid_2d_graph(2, 2)
A:networkx.algorithms.shortest_paths.tests.test_weighted.(pred, dist)->networkx.bellman_ford(G, (0, 0))
A:networkx.algorithms.shortest_paths.tests.test_weighted.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_weighted.(P, D)->networkx.bellman_ford(self.XG, 's')
A:networkx.algorithms.shortest_paths.tests.test_weighted.dp->networkx.bidirectional_dijkstra(G, 'a', 'b')
A:networkx.algorithms.shortest_paths.tests.test_weighted.(p, d)->networkx.dijkstra_predecessor_and_distance(G, 'a')
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.setUp(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bellman_ford(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_dijkstra_predecessor(self)
networkx.algorithms.shortest_paths.tests.test_weighted.TestWeightedPath.test_negative_edge_cycle(self)
networkx.tests.test_TestWeightedPath
networkx.tests.test_TestWeightedPath.setUp(self)
networkx.tests.test_TestWeightedPath.test_bellman_ford(self)
networkx.tests.test_TestWeightedPath.test_bidirectional_dijkstra(self)
networkx.tests.test_TestWeightedPath.test_bidirectional_dijkstra_multigraph(self)
networkx.tests.test_TestWeightedPath.test_dijkstra(self)
networkx.tests.test_TestWeightedPath.test_dijkstra_pred_distance_multigraph(self)
networkx.tests.test_TestWeightedPath.test_dijkstra_predecessor(self)
networkx.tests.test_TestWeightedPath.test_negative_edge_cycle(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/shortest_paths/tests/test_astar.py----------------------------------------
A:networkx.algorithms.shortest_paths.tests.test_astar.self.XG->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.G->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.path->networkx.algorithms.shortest_paths.astar.astar_path(G, node_1, node_4)
A:networkx.algorithms.shortest_paths.tests.test_astar.GG->self.XG.to_undirected()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG2->networkx.DiGraph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG3->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.XG4->networkx.Graph()
A:networkx.algorithms.shortest_paths.tests.test_astar.C->networkx.cycle_graph(7)
A:networkx.algorithms.shortest_paths.tests.test_astar.node_1->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_2->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_3->UnorderableClass()
A:networkx.algorithms.shortest_paths.tests.test_astar.node_4->UnorderableClass()
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.setUp(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_directed2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_multigraph(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_nopath(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected2(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_undirected3(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_astar_w1(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_cycle(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_orderable(self)
networkx.algorithms.shortest_paths.tests.test_astar.TestAStar.test_random_graph(self)
networkx.tests.test_TestAStar
networkx.tests.test_TestAStar.setUp(self)
networkx.tests.test_TestAStar.test_astar_directed(self)
networkx.tests.test_TestAStar.test_astar_directed2(self)
networkx.tests.test_TestAStar.test_astar_multigraph(self)
networkx.tests.test_TestAStar.test_astar_nopath(self)
networkx.tests.test_TestAStar.test_astar_undirected(self)
networkx.tests.test_TestAStar.test_astar_undirected2(self)
networkx.tests.test_TestAStar.test_astar_undirected3(self)
networkx.tests.test_TestAStar.test_astar_w1(self)
networkx.tests.test_TestAStar.test_cycle(self)
networkx.tests.test_TestAStar.test_orderable(self)
networkx.tests.test_TestAStar.test_random_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/link_analysis/hits_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.hits_alg.h->numpy.asarray(M * a).flatten()
A:networkx.algorithms.link_analysis.hits_alg.a->numpy.asarray(x).flatten()
A:networkx.algorithms.link_analysis.hits_alg.err->scipy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.hits_alg.M->networkx.to_scipy_sparse_matrix(G, nodelist=G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.H->networkx.hub_matrix(G, G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.(e, ev)->numpy.linalg.eig(A)
A:networkx.algorithms.link_analysis.hits_alg.A->networkx.authority_matrix(G, G.nodes())
A:networkx.algorithms.link_analysis.hits_alg.hubs->dict(zip(G.nodes(), h / h.sum()))
A:networkx.algorithms.link_analysis.hits_alg.authorities->dict(zip(G.nodes(), a / a.sum()))
networkx.algorithms.link_analysis.hits_alg.authority_matrix(G,nodelist=None)
networkx.algorithms.link_analysis.hits_alg.hits(G,max_iter=100,tol=1e-08,nstart=None)
networkx.algorithms.link_analysis.hits_alg.hits_numpy(G)
networkx.algorithms.link_analysis.hits_alg.hits_scipy(G,max_iter=100,tol=1e-06)
networkx.algorithms.link_analysis.hits_alg.hub_matrix(G,nodelist=None)
networkx.algorithms.link_analysis.hits_alg.setup_module(module)
networkx.authority_matrix(G,nodelist=None)
networkx.hits(G,max_iter=100,tol=1e-08,nstart=None)
networkx.hits_numpy(G)
networkx.hits_scipy(G,max_iter=100,tol=1e-06)
networkx.hub_matrix(G,nodelist=None)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/link_analysis/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/link_analysis/pagerank_alg.py----------------------------------------
A:networkx.algorithms.link_analysis.pagerank_alg.D->G.to_directed()
A:networkx.algorithms.link_analysis.pagerank_alg.W->networkx.stochastic_graph(D, weight=weight)
A:networkx.algorithms.link_analysis.pagerank_alg.x->dict.fromkeys(xlast.keys(), 0)
A:networkx.algorithms.link_analysis.pagerank_alg.p->dict.fromkeys(W, scale)
A:networkx.algorithms.link_analysis.pagerank_alg.out_degree->networkx.stochastic_graph(D, weight=weight).out_degree()
A:networkx.algorithms.link_analysis.pagerank_alg.err->scipy.absolute(x - xlast).sum()
A:networkx.algorithms.link_analysis.pagerank_alg.nodelist->personalization.keys()
A:networkx.algorithms.link_analysis.pagerank_alg.M->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight)
A:networkx.algorithms.link_analysis.pagerank_alg.dangling->numpy.where(M.sum(axis=1) == 0)
A:networkx.algorithms.link_analysis.pagerank_alg.e->numpy.ones(n)
A:networkx.algorithms.link_analysis.pagerank_alg.v->scipy.array(personalization.values()).astype(scipy.float_)
A:networkx.algorithms.link_analysis.pagerank_alg.(eigenvalues, eigenvectors)->numpy.linalg.eig(M.T)
A:networkx.algorithms.link_analysis.pagerank_alg.ind->eigenvalues.argsort()
A:networkx.algorithms.link_analysis.pagerank_alg.largest->numpy.array(eigenvectors[:, ind[-1]]).flatten().astype(np.float)
A:networkx.algorithms.link_analysis.pagerank_alg.norm->numpy.array(eigenvectors[:, ind[-1]]).flatten().astype(np.float).sum()
A:networkx.algorithms.link_analysis.pagerank_alg.centrality->dict(zip(nodelist, largest / norm))
A:networkx.algorithms.link_analysis.pagerank_alg.S->scipy.array(M.sum(axis=1)).flatten()
A:networkx.algorithms.link_analysis.pagerank_alg.dangle->scipy.array(scipy.where(M.sum(axis=1) == 0, 1.0 / n, 0)).flatten()
networkx.algorithms.link_analysis.pagerank_alg.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight')
networkx.algorithms.link_analysis.pagerank_alg.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-08,nstart=None,weight='weight')
networkx.algorithms.link_analysis.pagerank_alg.pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight')
networkx.algorithms.link_analysis.pagerank_alg.pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,weight='weight')
networkx.algorithms.link_analysis.pagerank_alg.setup_module(module)
networkx.google_matrix(G,alpha=0.85,personalization=None,nodelist=None,weight='weight')
networkx.pagerank(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-08,nstart=None,weight='weight')
networkx.pagerank_numpy(G,alpha=0.85,personalization=None,weight='weight')
networkx.pagerank_scipy(G,alpha=0.85,personalization=None,max_iter=100,tol=1e-06,weight='weight')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/link_analysis/tests/test_pagerank.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_pagerank.G->networkx.complete_graph(4)
A:networkx.algorithms.link_analysis.tests.test_pagerank.self.G.pagerank->dict(zip(G, [0.03721197, 0.05395735, 0.04150565, 0.37508082, 0.20599833, 0.28624589]))
A:networkx.algorithms.link_analysis.tests.test_pagerank.p->networkx.pagerank(G, alpha=0.0, personalization=personalize)
A:networkx.algorithms.link_analysis.tests.test_pagerank.M->networkx.google_matrix(G, alpha=0.9)
A:networkx.algorithms.link_analysis.tests.test_pagerank.(e, ev)->numpy.linalg.eig(M.T)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.setUp(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_google_matrix(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_numpy_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_pagerank(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_personalization(self)
networkx.algorithms.link_analysis.tests.test_pagerank.TestPageRank.test_scipy_pagerank(self)
networkx.tests.test_pagerank.TestPageRank
networkx.tests.test_pagerank.TestPageRank.setUp(self)
networkx.tests.test_pagerank.TestPageRank.test_google_matrix(self)
networkx.tests.test_pagerank.TestPageRank.test_numpy_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_pagerank(self)
networkx.tests.test_pagerank.TestPageRank.test_personalization(self)
networkx.tests.test_pagerank.TestPageRank.test_scipy_pagerank(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/link_analysis/tests/test_hits.py----------------------------------------
A:networkx.algorithms.link_analysis.tests.test_hits.G->networkx.DiGraph()
A:networkx.algorithms.link_analysis.tests.test_hits.self.G.a->dict(zip(G, [0.0, 0.0, 0.366025, 0.133975, 0.5, 0.0]))
A:networkx.algorithms.link_analysis.tests.test_hits.self.G.h->dict(zip(G, [0.366025, 0.0, 0.211325, 0.0, 0.211325, 0.211325]))
A:networkx.algorithms.link_analysis.tests.test_hits.(h, a)->networkx.hits_scipy(G, tol=1e-08)
A:networkx.algorithms.link_analysis.tests.test_hits.nstart->dict([(i, 1.0 / 2) for i in G])
networkx.algorithms.link_analysis.tests.test_hits.TestHITS
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.setUp(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_nstart(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_numpy(self)
networkx.algorithms.link_analysis.tests.test_hits.TestHITS.test_hits_scipy(self)
networkx.tests.test_hits.TestHITS
networkx.tests.test_hits.TestHITS.setUp(self)
networkx.tests.test_hits.TestHITS.test_hits(self)
networkx.tests.test_hits.TestHITS.test_hits_nstart(self)
networkx.tests.test_hits.TestHITS.test_hits_numpy(self)
networkx.tests.test_hits.TestHITS.test_hits_scipy(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/degree_alg.py----------------------------------------
A:networkx.algorithms.centrality.degree_alg.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.degree_alg.centrality->dict(((n, d * s) for (n, d) in G.out_degree_iter()))
networkx.algorithms.centrality.degree_alg.degree_centrality(G)
networkx.algorithms.centrality.degree_alg.in_degree_centrality(G)
networkx.algorithms.centrality.degree_alg.out_degree_centrality(G)
networkx.degree_centrality(G)
networkx.in_degree_centrality(G)
networkx.out_degree_centrality(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/closeness.py----------------------------------------
A:networkx.algorithms.centrality.closeness.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.closeness.path_length->functools.partial(nx.single_source_dijkstra_path_length, weight=distance)
A:networkx.algorithms.centrality.closeness.nodes->G.nodes()
A:networkx.algorithms.centrality.closeness.sp->path_length(G, n)
A:networkx.algorithms.centrality.closeness.totsp->sum(sp.values())
networkx.algorithms.centrality.closeness.closeness_centrality(G,v=None,distance=None,normalized=True)
networkx.closeness_centrality(G,v=None,distance=None,normalized=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/eigenvector.py----------------------------------------
A:networkx.algorithms.centrality.eigenvector.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.eigenvector.x->dict.fromkeys(xlast, 0)
A:networkx.algorithms.centrality.eigenvector.nnodes->G.number_of_nodes()
A:networkx.algorithms.centrality.eigenvector.err->sum([abs(x[n] - xlast[n]) for n in x])
A:networkx.algorithms.centrality.eigenvector.A->networkx.adj_matrix(G, nodelist=G.nodes())
A:networkx.algorithms.centrality.eigenvector.(eigenvalues, eigenvectors)->numpy.linalg.eig(A)
A:networkx.algorithms.centrality.eigenvector.largest->numpy.array(eigenvectors[:, ind[0]]).flatten()
A:networkx.algorithms.centrality.eigenvector.centrality->dict(zip(G, largest / norm))
networkx.algorithms.centrality.eigenvector.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None)
networkx.algorithms.centrality.eigenvector.eigenvector_centrality_numpy(G)
networkx.algorithms.centrality.eigenvector.setup_module(module)
networkx.eigenvector_centrality(G,max_iter=100,tol=1e-06,nstart=None)
networkx.eigenvector_centrality_numpy(G)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/load.py----------------------------------------
A:networkx.algorithms.centrality.load.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Sasha Gutfraind (ag362@cornell.edu)'])
A:networkx.algorithms.centrality.load.ubetween->_edge_betweenness(G, source, nodes, cutoff=cutoff)
A:networkx.algorithms.centrality.load.betweenness->{}.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.load.order->len(betweenness)
A:networkx.algorithms.centrality.load.(pred, length)->networkx.predecessor(G, source, cutoff=cutoff, return_seen=True)
A:networkx.algorithms.centrality.load.between->{}.fromkeys(length, 1.0)
A:networkx.algorithms.centrality.load.v->onodes.pop()
A:networkx.algorithms.centrality.load.num_paths->len(pred[w])
A:networkx.algorithms.centrality.load.l->len(between)
A:networkx.algorithms.centrality.load.nodes->G.nodes()
A:networkx.algorithms.centrality.load.b->{}.fromkeys(G, 0.0).setdefault(v, 0)
networkx._edge_betweenness(G,source,nodes,cutoff=False)
networkx._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.load._edge_betweenness(G,source,nodes,cutoff=False)
networkx.algorithms.centrality.load._node_betweenness(G,source,cutoff=False,normalized=True,weight=None)
networkx.algorithms.centrality.load.edge_load(G,nodes=None,cutoff=False)
networkx.algorithms.centrality.load.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)
networkx.edge_load(G,nodes=None,cutoff=False)
networkx.newman_betweenness_centrality(G,v=None,cutoff=None,normalized=True,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_closeness.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_closeness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_closeness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_closeness.betweenness->dict.fromkeys(H, 0.0)
A:networkx.algorithms.centrality.current_flow_closeness.L->laplacian_sparse_matrix(H, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.current_flow_closeness.C2->solvername[solver](L, width=1, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_closeness.col->solvername[solver](L, width=1, dtype=dtype).get_row(v)
networkx.algorithms.centrality.current_flow_closeness.current_flow_closeness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_closeness.setup_module(module)
networkx.current_flow_closeness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/current_flow_betweenness.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness.H->networkx.relabel_nodes(G, dict(zip(ordering, range(n))))
A:networkx.algorithms.centrality.current_flow_betweenness.L->laplacian_sparse_matrix(H, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.current_flow_betweenness.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.betweenness->dict.fromkeys(H.edges(), 0.0)
A:networkx.algorithms.centrality.current_flow_betweenness.(s, t)->random.sample(range(n), 2)
A:networkx.algorithms.centrality.current_flow_betweenness.b->numpy.zeros(n, dtype=dtype)
A:networkx.algorithms.centrality.current_flow_betweenness.p->solvername[solver](L, dtype=dtype).solve(b)
A:networkx.algorithms.centrality.current_flow_betweenness.w->H[v][nbr].get(weight, 1.0)
A:networkx.algorithms.centrality.current_flow_betweenness.pos->dict(zip(row.argsort()[::-1], range(1, n + 1)))
networkx.algorithms.centrality.current_flow_betweenness.approximate_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu',epsilon=0.5,kmax=10000)
networkx.algorithms.centrality.current_flow_betweenness.current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness.edge_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness.setup_module(module)
networkx.approximate_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu',epsilon=0.5,kmax=10000)
networkx.current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.edge_current_flow_betweenness_centrality(G,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/current_flow_betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.current_flow_betweenness_subset.n->G.number_of_nodes()
A:networkx.algorithms.centrality.current_flow_betweenness_subset.ordering->list(reverse_cuthill_mckee_ordering(G))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.mapping->dict(zip(ordering, range(n)))
A:networkx.algorithms.centrality.current_flow_betweenness_subset.H->networkx.relabel_nodes(G, mapping)
A:networkx.algorithms.centrality.current_flow_betweenness_subset.betweenness->dict.fromkeys(H.edges(), 0.0)
networkx.algorithms.centrality.current_flow_betweenness_subset.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.current_flow_betweenness_subset.setup_module(module)
networkx.current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.edge_current_flow_betweenness_centrality_subset(G,sources,targets,normalized=True,weight='weight',dtype=float,solver='lu')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/flow_matrix.py----------------------------------------
A:networkx.algorithms.centrality.flow_matrix.n->G.number_of_nodes()
A:networkx.algorithms.centrality.flow_matrix.L->laplacian_sparse_matrix(G, nodelist=range(n), weight=weight, dtype=dtype, format='csc')
A:networkx.algorithms.centrality.flow_matrix.C->solvername[solver](L, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.B->numpy.zeros(w, dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.c->d.get(weight, 1.0)
A:networkx.algorithms.centrality.flow_matrix.row->numpy.dot(B, C.get_rows(u, v))
A:networkx.algorithms.centrality.flow_matrix.self.w->self.width(L)
A:networkx.algorithms.centrality.flow_matrix.self.C->numpy.zeros((self.w, n), dtype=dtype)
A:networkx.algorithms.centrality.flow_matrix.self.C[r % self.w, 1:]->self.solve_inverse(r)
A:networkx.algorithms.centrality.flow_matrix.(x, y)->numpy.nonzero(row)
A:networkx.algorithms.centrality.flow_matrix.m->max(w, m)
A:networkx.algorithms.centrality.flow_matrix.self.IL->numpy.zeros(L.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.IL[1:, 1:]->numpy.linalg.inv(self.L1.todense())
A:networkx.algorithms.centrality.flow_matrix.s->numpy.zeros(rhs.shape, dtype=self.dtype)
A:networkx.algorithms.centrality.flow_matrix.self.lusolve->scipy.sparse.linalg.factorized(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.rhs->numpy.zeros(self.n, self.dtype)
A:networkx.algorithms.centrality.flow_matrix.s[1:]->self.lusolve(rhs[1:])
A:networkx.algorithms.centrality.flow_matrix.ilu->scipy.sparse.linalg.spilu(self.L1.tocsc())
A:networkx.algorithms.centrality.flow_matrix.self.M->scipy.sparse.linalg.LinearOperator(shape=(n, n), matvec=ilu.solve)
A:networkx.algorithms.centrality.flow_matrix.A->networkx.to_scipy_sparse_matrix(G, nodelist=nodelist, weight=weight, dtype=dtype, format=format)
A:networkx.algorithms.centrality.flow_matrix.data->numpy.asarray(A.sum(axis=1).T)
A:networkx.algorithms.centrality.flow_matrix.D->scipy.sparse.spdiags(data, 0, n, n, format=format)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.CGInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.FullInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.__init__(self,L,width=None,dtype=None)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_row(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.get_rows(self,r1,r2)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.InverseLaplacian.width(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian(InverseLaplacian)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.init_solver(self,L)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve(self,rhs)
networkx.algorithms.centrality.flow_matrix.SuperLUInverseLaplacian.solve_inverse(self,r)
networkx.algorithms.centrality.flow_matrix.flow_matrix_row(G,weight='weight',dtype=float,solver='lu')
networkx.algorithms.centrality.flow_matrix.laplacian_sparse_matrix(G,nodelist=None,weight='weight',dtype=None,format='csr')
networkx.flow_matrix.CGInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.CGInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.CGInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.CGInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.FullInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.FullInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.FullInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.FullInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.InverseLaplacian(self,L,width=None,dtype=None)
networkx.flow_matrix.InverseLaplacian.get_row(self,r)
networkx.flow_matrix.InverseLaplacian.get_rows(self,r1,r2)
networkx.flow_matrix.InverseLaplacian.init_solver(self,L)
networkx.flow_matrix.InverseLaplacian.solve(self,r)
networkx.flow_matrix.InverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.InverseLaplacian.width(self,L)
networkx.flow_matrix.SuperLUInverseLaplacian(InverseLaplacian)
networkx.flow_matrix.SuperLUInverseLaplacian.init_solver(self,L)
networkx.flow_matrix.SuperLUInverseLaplacian.solve(self,rhs)
networkx.flow_matrix.SuperLUInverseLaplacian.solve_inverse(self,r)
networkx.flow_matrix.flow_matrix_row(G,weight='weight',dtype=float,solver='lu')
networkx.flow_matrix.laplacian_sparse_matrix(G,nodelist=None,weight='weight',dtype=None,format='csr')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/communicability_alg.py----------------------------------------
A:networkx.algorithms.centrality.communicability_alg.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Franck Kalala (franckkalala@yahoo.fr'])
A:networkx.algorithms.centrality.communicability_alg.nodelist->G.nodes()
A:networkx.algorithms.centrality.communicability_alg.A->networkx.to_numpy_matrix(G, nodelist)
A:networkx.algorithms.centrality.communicability_alg.expA->scipy.linalg.expm(A)
A:networkx.algorithms.centrality.communicability_alg.sc->_rescale(sc, normalized=normalized)
A:networkx.algorithms.centrality.communicability_alg.(w, v)->numpy.linalg.eigh(A)
A:networkx.algorithms.centrality.communicability_alg.expw->numpy.exp(w)
A:networkx.algorithms.centrality.communicability_alg.xg->numpy.dot(vsquare, expw)
A:networkx.algorithms.centrality.communicability_alg.n->len(nodelist)
A:networkx.algorithms.centrality.communicability_alg.mapping->dict(zip(nodelist, range(len(nodelist))))
A:networkx.algorithms.centrality.communicability_alg.row->A[i, :].copy()
A:networkx.algorithms.centrality.communicability_alg.col->A[:, i].copy()
A:networkx.algorithms.centrality.communicability_alg.sc[v]->B.sum()
A:networkx.algorithms.centrality.communicability_alg.order->len(sc)
A:networkx.algorithms.centrality.communicability_alg.(w, vec)->numpy.linalg.eigh(A)
networkx._rescale(sc,normalized)
networkx.algorithms.centrality.communicability_alg._rescale(sc,normalized)
networkx.algorithms.centrality.communicability_alg.communicability(G)
networkx.algorithms.centrality.communicability_alg.communicability_betweenness_centrality(G,normalized=True)
networkx.algorithms.centrality.communicability_alg.communicability_centrality(G)
networkx.algorithms.centrality.communicability_alg.communicability_centrality_exp(G)
networkx.algorithms.centrality.communicability_alg.communicability_exp(G)
networkx.algorithms.centrality.communicability_alg.estrada_index(G)
networkx.algorithms.centrality.communicability_alg.setup_module(module)
networkx.communicability(G)
networkx.communicability_betweenness_centrality(G,normalized=True)
networkx.communicability_centrality(G)
networkx.communicability_centrality_exp(G)
networkx.communicability_exp(G)
networkx.estrada_index(G)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/betweenness_subset.py----------------------------------------
A:networkx.algorithms.centrality.betweenness_subset.b->_rescale_e(b, len(G), normalized=normalized, directed=G.is_directed())
A:networkx.algorithms.centrality.betweenness_subset.(S, P, sigma)->dijkstra(G, s, weight)
A:networkx.algorithms.centrality.betweenness_subset.sources->G.nodes()
A:networkx.algorithms.centrality.betweenness_subset.targets->G.nodes()
A:networkx.algorithms.centrality.betweenness_subset.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness_subset.target_set->set(targets)
A:networkx.algorithms.centrality.betweenness_subset.w->S.pop()
networkx._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx._rescale(betweenness,n,normalized,directed=False)
networkx._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset._accumulate_edges_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._accumulate_subset(betweenness,S,P,sigma,s,targets)
networkx.algorithms.centrality.betweenness_subset._rescale(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_source(G,normalized=True,weight=None,sources=None)
networkx.algorithms.centrality.betweenness_subset.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.algorithms.centrality.betweenness_subset.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.betweenness_centrality_source(G,normalized=True,weight=None,sources=None)
networkx.betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)
networkx.edge_betweenness_centrality_subset(G,sources,targets,normalized=False,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/betweenness.py----------------------------------------
A:networkx.algorithms.centrality.betweenness.betweenness->_rescale_e(betweenness, len(G), normalized=normalized, directed=G.is_directed())
A:networkx.algorithms.centrality.betweenness.nodes->random.sample(G.nodes(), k)
A:networkx.algorithms.centrality.betweenness.(S, P, sigma)->_single_source_dijkstra_path_basic(G, s, weight)
A:networkx.algorithms.centrality.betweenness.sigma->dict.fromkeys(G, 0.0)
A:networkx.algorithms.centrality.betweenness.v->Q.pop(0)
A:networkx.algorithms.centrality.betweenness.(dist, pred, v)->pop(Q)
A:networkx.algorithms.centrality.betweenness.delta->dict.fromkeys(S, 0)
A:networkx.algorithms.centrality.betweenness.w->S.pop()
networkx._accumulate_basic(betweenness,S,P,sigma,s)
networkx._accumulate_edges(betweenness,S,P,sigma,s)
networkx._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx._rescale(betweenness,n,normalized,directed=False,k=None)
networkx._rescale_e(betweenness,n,normalized,directed=False)
networkx._single_source_dijkstra_path_basic(G,s,weight='weight')
networkx._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness._accumulate_basic(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_edges(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._accumulate_endpoints(betweenness,S,P,sigma,s)
networkx.algorithms.centrality.betweenness._rescale(betweenness,n,normalized,directed=False,k=None)
networkx.algorithms.centrality.betweenness._rescale_e(betweenness,n,normalized,directed=False)
networkx.algorithms.centrality.betweenness._single_source_dijkstra_path_basic(G,s,weight='weight')
networkx.algorithms.centrality.betweenness._single_source_shortest_path_basic(G,s)
networkx.algorithms.centrality.betweenness.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.algorithms.centrality.betweenness.edge_betweenness(G,normalized=True,weight=None)
networkx.algorithms.centrality.betweenness.edge_betweenness_centrality(G,normalized=True,weight=None)
networkx.betweenness_centrality(G,k=None,normalized=True,weight=None,endpoints=False,seed=None)
networkx.edge_betweenness(G,normalized=True,weight=None)
networkx.edge_betweenness_centrality(G,normalized=True,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_load_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_load_centrality.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_load_centrality.self.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_load_centrality.b->networkx.load_centrality(self.G, weight='weight', normalized=False)
A:networkx.algorithms.centrality.tests.test_load_centrality.c->networkx.edge_load(G)
A:networkx.algorithms.centrality.tests.test_load_centrality.B->networkx.Graph()
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.setUp(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_c4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_load_betweenness_difference(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_p4_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_tree_edge_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_florentine_families_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_k5_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_krackhardt_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_unnormalized_p3_load(self)
networkx.algorithms.centrality.tests.test_load_centrality.TestLoadCentrality.test_weighted_load(self)
networkx.tests.test_load_TestLoadCentrality
networkx.tests.test_load_TestLoadCentrality.setUp(self)
networkx.tests.test_load_TestLoadCentrality.test_c4_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_florentine_families_load(self)
networkx.tests.test_load_TestLoadCentrality.test_k5_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_k5_load(self)
networkx.tests.test_load_TestLoadCentrality.test_krackhardt_load(self)
networkx.tests.test_load_TestLoadCentrality.test_load_betweenness_difference(self)
networkx.tests.test_load_TestLoadCentrality.test_p3_load(self)
networkx.tests.test_load_TestLoadCentrality.test_p4_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_tree_edge_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_florentine_families_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_k5_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_krackhardt_load(self)
networkx.tests.test_load_TestLoadCentrality.test_unnormalized_p3_load(self)
networkx.tests.test_load_TestLoadCentrality.test_weighted_load(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_current_flow_closeness.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_current_flow_closeness.b->networkx.current_flow_closeness_centrality(G, normalized=True)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestFlowClosenessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_closeness.TestWeightedFlowClosenessCentrality(object)
networkx.tests.test_TestFlowClosenessCentrality(object)
networkx.tests.test_TestFlowClosenessCentrality.setupClass(cls)
networkx.tests.test_TestFlowClosenessCentrality.test_K4(self)
networkx.tests.test_TestFlowClosenessCentrality.test_P4(self)
networkx.tests.test_TestFlowClosenessCentrality.test_P4_normalized(self)
networkx.tests.test_TestFlowClosenessCentrality.test_star(self)
networkx.tests.test_TestWeightedFlowClosenessCentrality(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_current_flow_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.G->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b->edge_current_flow_subset(G, G.nodes(), G.nodes(), normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.b_answer->edge_current_flow(G, normalized=True)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.v2->edge_current_flow_subset(G, G.nodes(), G.nodes(), normalized=True).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.tests.test_current_flow_betweenness_centrality_subset.TestFlowBetweennessCentrality.test_star(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_eigenvector_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b->networkx.eigenvector_centrality_numpy(G)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.v->math.sqrt(1 / 5.0)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.b_answer->dict.fromkeys(G, v)
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.H->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_eigenvector_centrality.p->networkx.eigenvector_centrality_numpy(G)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality(object)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected(object)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setUp(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.setupClass(cls)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted(self)
networkx.algorithms.centrality.tests.test_eigenvector_centrality.TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality(object)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.setupClass(cls)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_K5(self)
networkx.tests.test_eigenvector_TestEigenvectorCentrality.test_P3(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected(object)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.setUp(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.setupClass(cls)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_unweighted(self)
networkx.tests.test_eigenvector_TestEigenvectorCentralityDirected.test_eigenvector_centrality_weighted(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_degree_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_degree_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_degree_centrality.F->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.G->networkx.DiGraph()
A:networkx.algorithms.centrality.tests.test_degree_centrality.d->networkx.out_degree_centrality(self.G)
A:networkx.algorithms.centrality.tests.test_degree_centrality.exact->dict(zip(names, dcs))
A:networkx.algorithms.centrality.tests.test_degree_centrality.names->sorted(self.F.nodes())
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.__init__(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_1(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_2(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_3(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_degree_centrality_4(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_indegree_centrality(self)
networkx.algorithms.centrality.tests.test_degree_centrality.TestDegreeCentrality.test_outdegree_centrality(self)
networkx.tests.test_degree_TestDegreeCentrality(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_1(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_2(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_3(self)
networkx.tests.test_degree_TestDegreeCentrality.test_degree_centrality_4(self)
networkx.tests.test_degree_TestDegreeCentrality.test_indegree_centrality(self)
networkx.tests.test_degree_TestDegreeCentrality.test_outdegree_centrality(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b->networkx.edge_betweenness_centrality(G, weight='weight', normalized=True)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 1)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_K5_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_directed_path_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_disconnected_path_endpoints(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestEdgeBetweennessCentrality.test_normalized_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_G2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_P3_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_florentine_families_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedBetweennessCentrality.test_ladder_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.TestWeightedEdgeBetweennessCentrality.test_weighted_graph(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality.weighted_G()
networkx.tests.test_betweenness_TestBetweennessCentrality(object)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_K5_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_P3_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_directed_path(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_directed_path_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_disconnected_path(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_disconnected_path_endpoints(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_florentine_families_graph(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.tests.test_betweenness_TestBetweennessCentrality.test_ladder_graph(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality(object)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_C4(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_P4(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_normalized_K5(self)
networkx.tests.test_betweenness_TestEdgeBetweennessCentrality.test_normalized_P4(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality(object)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_G(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_G2(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_P3(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_P3_normalized(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_florentine_families_graph(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_krackhardt_kite_graph(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_krackhardt_kite_graph_normalized(self)
networkx.tests.test_betweenness_TestWeightedBetweennessCentrality.test_ladder_graph(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality(object)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_C4(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_P4(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_balanced_tree(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_normalized_weighted_graph(self)
networkx.tests.test_betweenness_TestWeightedEdgeBetweennessCentrality.test_weighted_graph(self)
networkx.tests.test_betweenness_weighted_G()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_closeness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.K->networkx.krackhardt_kite_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.P3->networkx.path_graph(3)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.K5->networkx.complete_graph(5)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.T->networkx.balanced_tree(r=2, h=2)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.self.Gb->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.F->networkx.florentine_families_graph()
A:networkx.algorithms.centrality.tests.test_closeness_centrality.c->networkx.closeness_centrality(XG, distance=True)
A:networkx.algorithms.centrality.tests.test_closeness_centrality.XG->networkx.Graph()
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.setUp(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_florentine_families_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_k5_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_krackhardt_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_p3_closeness(self)
networkx.algorithms.centrality.tests.test_closeness_centrality.TestClosenessCentrality.test_weighted_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality
networkx.tests.test_closeness_TestClosenessCentrality.setUp(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_florentine_families_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_k5_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_krackhardt_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_p3_closeness(self)
networkx.tests.test_closeness_TestClosenessCentrality.test_weighted_closeness(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_betweenness_centrality_subset.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.G->networkx.Graph()
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b->edge_betweenness_centrality_subset(G, sources=[0], targets=[3, 4], weight=None)
A:networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.b_answer->dict.fromkeys(G.edges(), 0)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path(self)
networkx.algorithms.centrality.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestBetweennessCentralitySources.test_P3(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_directed(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path(self)
networkx.tests.test_betweenness_centrality_subset.TestEdgeSubsetBetweennessCentrality.test_box_and_path2(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_K5(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_directed(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_P5_multiple_target(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path(self)
networkx.tests.test_betweenness_centrality_subset.TestSubsetBetweennessCentrality.test_box_and_path2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_communicability.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_communicability.result->estrada_index(nx.karate_club_graph())
A:networkx.algorithms.centrality.tests.test_communicability.G1->networkx.Graph([('Franck', 'Aric'), ('Aric', 'Dan'), ('Dan', 'Albert'), ('Albert', 'Franck'), ('Dan', '1'), ('Franck', 'Albert')])
A:networkx.algorithms.centrality.tests.test_communicability.result1->communicability_betweenness_centrality(G1)
A:networkx.algorithms.centrality.tests.test_communicability.answer->defaultdict(dict)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.setupClass(cls)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability2(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_communicability_centrality(self)
networkx.algorithms.centrality.tests.test_communicability.TestCommunicability.test_estrada_index(self)
networkx.tests.test_communicability.TestCommunicability
networkx.tests.test_communicability.TestCommunicability.setupClass(cls)
networkx.tests.test_communicability.TestCommunicability.test_communicability(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability2(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability_betweenness_centrality(self)
networkx.tests.test_communicability.TestCommunicability.test_communicability_centrality(self)
networkx.tests.test_communicability.TestCommunicability.test_estrada_index(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/centrality/tests/test_current_flow_betweenness_centrality.py----------------------------------------
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.G->networkx.path_graph(4)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b->edge_current_flow(G, normalized=False)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.ba->approximate_cfbc(G, normalized=True, epsilon=0.5 * epsilon)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.b_answer->dict.fromkeys(G.edges(), 0.75)
A:networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.v2->edge_current_flow(G, normalized=False).get((s, t), b.get((t, s)))
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_grid(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_solvers(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestApproximateFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality(object)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.setupClass(cls)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_solers(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestFlowBetweennessCentrality.test_star(self)
networkx.algorithms.centrality.tests.test_current_flow_betweenness_centrality.TestWeightedFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_grid(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_solvers(self)
networkx.tests.test_current_flow_betweenness_TestApproximateFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_C4(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestEdgeFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality(object)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.setupClass(cls)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_K4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_K4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_P4(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_P4_normalized(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_solers(self)
networkx.tests.test_current_flow_betweenness_TestFlowBetweennessCentrality.test_star(self)
networkx.tests.test_current_flow_betweenness_TestWeightedFlowBetweennessCentrality(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.connectivity.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.assortativity.connectivity.dsum->defaultdict(float)
A:networkx.algorithms.assortativity.connectivity.dnorm->defaultdict(float)
A:networkx.algorithms.assortativity.connectivity.nbrdeg->target_degree(neighbors(n))
A:networkx.algorithms.assortativity.connectivity.s->float(sum((G[n][nbr].get(weight, 1) * d for (nbr, d) in nbrdeg.items())))
networkx._avg_deg_conn(G,neighbors,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.connectivity._avg_deg_conn(G,neighbors,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.connectivity.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)
networkx.average_degree_connectivity(G,source='in+out',target='in+out',nodes=None,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.neighbor_degree.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.assortativity.neighbor_degree.nbrdeg->target_degree(G[n])
networkx._average_nbr_deg(G,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.neighbor_degree._average_nbr_deg(G,source_degree,target_degree,nodes=None,weight=None)
networkx.algorithms.assortativity.neighbor_degree.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)
networkx.average_neighbor_degree(G,source='out',target='out',nodes=None,weight=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/correlation.py----------------------------------------
A:networkx.algorithms.assortativity.correlation.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Oleguer Sagarra <oleguer.sagarra@gmail.com>'])
A:networkx.algorithms.assortativity.correlation.M->numpy.asmatrix(M)
A:networkx.algorithms.assortativity.correlation.xy->numpy.outer(x, y)
A:networkx.algorithms.assortativity.correlation.(x, y)->zip(*xy)
A:networkx.algorithms.assortativity.correlation.a->numpy.asmatrix(M).sum(axis=0)
A:networkx.algorithms.assortativity.correlation.s->(M * M).sum()
A:networkx.algorithms.assortativity.correlation.t->numpy.asmatrix(M).trace()
A:networkx.algorithms.assortativity.correlation.x->numpy.arange(nx)
A:networkx.algorithms.assortativity.correlation.y->numpy.arange(ny)
A:networkx.algorithms.assortativity.correlation.b->numpy.asmatrix(M).sum(axis=1)
A:networkx.algorithms.assortativity.correlation.ab->numpy.outer(a, b)
networkx.algorithms.assortativity.correlation.attribute_ac(M)
networkx.algorithms.assortativity.correlation.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.correlation.numeric_ac(M)
networkx.algorithms.assortativity.correlation.numeric_assortativity_coefficient(G,attribute,nodes=None)
networkx.algorithms.assortativity.correlation.setup_module(module)
networkx.attribute_ac(M)
networkx.attribute_assortativity_coefficient(G,attribute,nodes=None)
networkx.degree_assortativity_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.degree_pearson_correlation_coefficient(G,x='out',y='in',weight=None,nodes=None)
networkx.numeric_ac(M)
networkx.numeric_assortativity_coefficient(G,attribute,nodes=None)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/pairs.py----------------------------------------
A:networkx.algorithms.assortativity.pairs.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.assortativity.pairs.nodes->set(nodes)
A:networkx.algorithms.assortativity.pairs.uattr->node[u].get(attribute, None)
A:networkx.algorithms.assortativity.pairs.vattr->node[v].get(attribute, None)
networkx.algorithms.assortativity.pairs.node_attribute_xy(G,attribute,nodes=None)
networkx.algorithms.assortativity.pairs.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)
networkx.algorithms.assortativity.pairs.setup_module(module)
networkx.node_attribute_xy(G,attribute,nodes=None)
networkx.node_degree_xy(G,x='out',y='in',weight=None,nodes=None)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/mixing.py----------------------------------------
A:networkx.algorithms.assortativity.mixing.__author__->' '.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.assortativity.mixing.xy_iter->node_degree_xy(G, x=x, y=y, nodes=nodes, weight=weight)
A:networkx.algorithms.assortativity.mixing.d->attribute_mixing_dict(G, attribute, nodes)
A:networkx.algorithms.assortativity.mixing.a->dict_to_numpy_array(d, mapping=mapping)
A:networkx.algorithms.assortativity.mixing.s->set(d.keys())
A:networkx.algorithms.assortativity.mixing.m->max(s)
A:networkx.algorithms.assortativity.mixing.mapping->dict(zip(range(m + 1), range(m + 1)))
A:networkx.algorithms.assortativity.mixing.v->d[x].get(y, 0)
networkx.algorithms.assortativity.mixing.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.algorithms.assortativity.mixing.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.algorithms.assortativity.mixing.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True)
networkx.algorithms.assortativity.mixing.mixing_dict(xy,normalized=False)
networkx.algorithms.assortativity.mixing.numeric_mixing_matrix(G,attribute,nodes=None,normalized=True)
networkx.algorithms.assortativity.mixing.setup_module(module)
networkx.attribute_mixing_dict(G,attribute,nodes=None,normalized=False)
networkx.attribute_mixing_matrix(G,attribute,nodes=None,mapping=None,normalized=True)
networkx.degree_mixing_dict(G,x='out',y='in',weight=None,nodes=None,normalized=False)
networkx.degree_mixing_matrix(G,x='out',y='in',weight=None,nodes=None,normalized=True)
networkx.mixing_dict(xy,normalized=False)
networkx.numeric_mixing_matrix(G,attribute,nodes=None,normalized=True)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/test_neighbor_degree.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.G->networkx.star_graph(5)
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.nd->networkx.average_neighbor_degree(G, nodes=[1, 2])
A:networkx.algorithms.assortativity.tests.test_neighbor_degree.D->networkx.star_graph(5).to_directed()
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor(object)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_neighbor_degree.TestAverageNeighbor.test_degree_p4_weighted(self)
networkx.tests.test_TestAverageNeighbor(object)
networkx.tests.test_TestAverageNeighbor.test_degree_barrat(self)
networkx.tests.test_TestAverageNeighbor.test_degree_k4(self)
networkx.tests.test_TestAverageNeighbor.test_degree_k4_nodes(self)
networkx.tests.test_TestAverageNeighbor.test_degree_p4(self)
networkx.tests.test_TestAverageNeighbor.test_degree_p4_weighted(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/test_mixing.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_mixing.d->networkx.attribute_mixing_dict(self.M, 'fish')
A:networkx.algorithms.assortativity.tests.test_mixing.a_result->numpy.array([[4, 0, 0, 0], [0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
A:networkx.algorithms.assortativity.tests.test_mixing.a->networkx.attribute_mixing_matrix(self.M, 'fish', mapping=mapping)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.setupClass(cls)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.setupClass(cls)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.algorithms.assortativity.tests.test_mixing.TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)
networkx.tests.test_TestAttributeMixingDict(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_directed(self)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_multigraph(self)
networkx.tests.test_TestAttributeMixingDict.test_attribute_mixing_dict_undirected(self)
networkx.tests.test_TestAttributeMixingMatrix(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingMatrix.setupClass(cls)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_directed(self)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_multigraph(self)
networkx.tests.test_TestAttributeMixingMatrix.test_attribute_mixing_matrix_undirected(self)
networkx.tests.test_TestDegreeMixingDict(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_directed(self)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_multigraph(self)
networkx.tests.test_TestDegreeMixingDict.test_degree_mixing_dict_undirected(self)
networkx.tests.test_TestDegreeMixingMatrix(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingMatrix.setupClass(cls)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_directed(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_multigraph(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_selfloop(self)
networkx.tests.test_TestDegreeMixingMatrix.test_degree_mixing_matrix_undirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/test_connectivity.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_connectivity.G->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.test_connectivity.nd->networkx.average_degree_connectivity(D, weight='other', source='in', target='in')
A:networkx.algorithms.assortativity.tests.test_connectivity.D->networkx.DiGraph().to_directed()
A:networkx.algorithms.assortativity.tests.test_connectivity.c->networkx.average_degree_connectivity(G, source='out', target='in+out')
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity(object)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_barrat(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_weight_keyword(self)
networkx.algorithms.assortativity.tests.test_connectivity.TestNeighborConnectivity.test_zero_deg(self)
networkx.tests.test_TestNeighborConnectivity(object)
networkx.tests.test_TestNeighborConnectivity.test_degree_barrat(self)
networkx.tests.test_TestNeighborConnectivity.test_degree_p4(self)
networkx.tests.test_TestNeighborConnectivity.test_degree_p4_weighted(self)
networkx.tests.test_TestNeighborConnectivity.test_weight_keyword(self)
networkx.tests.test_TestNeighborConnectivity.test_zero_deg(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/base_test.py----------------------------------------
A:networkx.algorithms.assortativity.tests.base_test.G->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.S->networkx.Graph()
A:networkx.algorithms.assortativity.tests.base_test.self.P4->networkx.path_graph(4)
A:networkx.algorithms.assortativity.tests.base_test.self.D->networkx.DiGraph()
A:networkx.algorithms.assortativity.tests.base_test.self.M->networkx.MultiGraph()
A:networkx.algorithms.assortativity.tests.base_test.self.S->networkx.Graph()
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing(object)
networkx.algorithms.assortativity.tests.base_test.BaseTestAttributeMixing.setUp(self)
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing(object)
networkx.algorithms.assortativity.tests.base_test.BaseTestDegreeMixing.setUp(self)
networkx.tests.base_test.BaseTestAttributeMixing(object)
networkx.tests.base_test.BaseTestAttributeMixing.setUp(self)
networkx.tests.base_test.BaseTestDegreeMixing(object)
networkx.tests.base_test.BaseTestDegreeMixing.setUp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/test_pairs.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy->sorted(nx.node_attribute_xy(self.S, 'fish'))
A:networkx.algorithms.assortativity.tests.test_pairs.attrxy_result->sorted([('one', 'one'), ('two', 'two'), ('one', 'red'), ('two', 'blue')])
A:networkx.algorithms.assortativity.tests.test_pairs.xy->sorted(nx.node_degree_xy(G, weight='weight'))
A:networkx.algorithms.assortativity.tests.test_pairs.xy_result->sorted([(7, 17), (17, 10), (17, 7), (10, 17)])
A:networkx.algorithms.assortativity.tests.test_pairs.G->networkx.Graph()
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.algorithms.assortativity.tests.test_pairs.TestDegreeMixingXY.test_node_degree_xy_weighted(self)
networkx.tests.test_TestAttributeMixingXY(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_directed(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_multigraph(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_selfloop(self)
networkx.tests.test_TestAttributeMixingXY.test_node_attribute_xy_undirected(self)
networkx.tests.test_TestDegreeMixingXY(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_directed(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_multigraph(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_selfloop(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_undirected(self)
networkx.tests.test_TestDegreeMixingXY.test_node_degree_xy_weighted(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/assortativity/tests/test_correlation.py----------------------------------------
A:networkx.algorithms.assortativity.tests.test_correlation.r->attribute_ac(a)
A:networkx.algorithms.assortativity.tests.test_correlation.a->numpy.array([[50, 50, 0], [50, 50, 0], [0, 0, 2]])
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.setupClass(cls)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.setupClass(cls)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.algorithms.assortativity.tests.test_correlation.TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.tests.test_TestAttributeMixingCorrelation(BaseTestAttributeMixing)
networkx.tests.test_TestAttributeMixingCorrelation.setupClass(cls)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_coefficient2(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_directed(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_multigraph(self)
networkx.tests.test_TestAttributeMixingCorrelation.test_attribute_assortativity_undirected(self)
networkx.tests.test_TestDegreeMixingCorrelation(BaseTestDegreeMixing)
networkx.tests.test_TestDegreeMixingCorrelation.setupClass(cls)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_directed(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_multigraph(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)
networkx.tests.test_TestDegreeMixingCorrelation.test_degree_assortativity_undirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/matchhelpers.py----------------------------------------
A:networkx.algorithms.isomorphism.matchhelpers.attrs->list(zip(attr, default))
A:networkx.algorithms.isomorphism.matchhelpers.values1->sorted([data.get(attr, default) for data in datasets1.values()])
A:networkx.algorithms.isomorphism.matchhelpers.values2->sorted([data.get(attr, default) for data in datasets2.values()])
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match->copyfunc(categorical_node_match, 'categorical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.x->tuple((data2.get(attr, d) for (attr, d) in attrs))
A:networkx.algorithms.isomorphism.matchhelpers.categorical_edge_match.__doc__->categorical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.tmpdoc->tmpdoc.replace('numerical_edge_match', 'numerical_multiedge_match').replace('numerical_edge_match', 'numerical_multiedge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match->copyfunc(numerical_node_match, 'numerical_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.numerical_edge_match.__doc__->numerical_doc.replace('node', 'edge')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match->copyfunc(generic_node_match, 'generic_edge_match')
A:networkx.algorithms.isomorphism.matchhelpers.generic_edge_match.__doc__->generic_doc.replace('node', 'edge')
networkx.algorithms.isomorphism.matchhelpers.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.categorical_multiedge_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.categorical_node_match(attr,default)
networkx.algorithms.isomorphism.matchhelpers.close(x,y,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.copyfunc(f,name=None)
networkx.algorithms.isomorphism.matchhelpers.generic_multiedge_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.generic_node_match(attr,default,op)
networkx.algorithms.isomorphism.matchhelpers.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.algorithms.isomorphism.matchhelpers.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.isomorphism.allclose(x,y,rtol=1e-05,atol=1e-08)
networkx.isomorphism.categorical_multiedge_match(attr,default)
networkx.isomorphism.categorical_node_match(attr,default)
networkx.isomorphism.close(x,y,rtol=1e-05,atol=1e-08)
networkx.isomorphism.copyfunc(f,name=None)
networkx.isomorphism.generic_multiedge_match(attr,default,op)
networkx.isomorphism.generic_node_match(attr,default,op)
networkx.isomorphism.numerical_multiedge_match(attr,default,rtol=1e-05,atol=1e-08)
networkx.isomorphism.numerical_node_match(attr,default,rtol=1e-05,atol=1e-08)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/isomorph.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Christopher Ellison cellison@cse.ucdavis.edu)'])
A:networkx.algorithms.isomorphism.isomorph.d1->list(G1.degree().values())
A:networkx.algorithms.isomorphism.isomorph.t1->networkx.triangles(G1)
A:networkx.algorithms.isomorphism.isomorph.c1->networkx.number_of_cliques(G1)
A:networkx.algorithms.isomorphism.isomorph.d2->list(G2.degree().values())
A:networkx.algorithms.isomorphism.isomorph.t2->networkx.triangles(G2)
A:networkx.algorithms.isomorphism.isomorph.c2->networkx.number_of_cliques(G2)
A:networkx.algorithms.isomorphism.isomorph.gm->GM(G1, G2, node_match=node_match, edge_match=edge_match)
networkx.algorithms.isomorphism.isomorph.could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.fast_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.faster_could_be_isomorphic(G1,G2)
networkx.algorithms.isomorphism.isomorph.is_isomorphic(G1,G2,node_match=None,edge_match=None)
networkx.could_be_isomorphic(G1,G2)
networkx.fast_could_be_isomorphic(G1,G2)
networkx.faster_could_be_isomorphic(G1,G2)
networkx.is_isomorphic(G1,G2,node_match=None,edge_match=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.vf2userfunc.nm->self.node_match(self.G1.node[G1_node], self.G2.node[G2_node])
A:networkx.algorithms.isomorphism.vf2userfunc.feasible->_semantic_feasibility(self, G1_node, G2_node)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.GraphMatcher.__init__(self,G1,G2,node_match=None,edge_match=None)
networkx.algorithms.isomorphism.vf2userfunc.MultiDiGraphMatcher(DiGraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc.MultiGraphMatcher(GraphMatcher)
networkx.algorithms.isomorphism.vf2userfunc._semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.DiGraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.isomorphism.DiGraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.GraphMatcher(self,G1,G2,node_match=None,edge_match=None)
networkx.isomorphism.MultiDiGraphMatcher(DiGraphMatcher)
networkx.isomorphism.MultiGraphMatcher(GraphMatcher)
networkx.isomorphism._semantic_feasibility(self,G1_node,G2_node)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.isomorphvf2.self.G1_nodes->set(G1.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.G2_nodes->set(G2.nodes())
A:networkx.algorithms.isomorphism.isomorphvf2.self.old_recursion_limit->sys.getrecursionlimit()
A:networkx.algorithms.isomorphism.isomorphvf2.expected_max_recursion_level->len(self.G2)
A:networkx.algorithms.isomorphism.isomorphvf2.other_node->min(G2_nodes - set(self.core_2))
A:networkx.algorithms.isomorphism.isomorphvf2.self.state->DiGMState(self)
A:networkx.algorithms.isomorphism.isomorphvf2.self.mapping->self.core_1.copy()
A:networkx.algorithms.isomorphism.isomorphvf2.d1->sorted(self.G1.degree().values())
A:networkx.algorithms.isomorphism.isomorphvf2.d2->sorted(self.G2.degree().values())
A:networkx.algorithms.isomorphism.isomorphvf2.x->next(self.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.isomorphvf2.newstate->self.state.__class__(self, G1_node, G2_node)
A:networkx.algorithms.isomorphism.isomorphvf2.node_2->min(G2_nodes - set(self.core_2))
A:networkx.algorithms.isomorphism.isomorphvf2.self.depth->len(GM.core_1)
A:networkx.algorithms.isomorphism.isomorphvf2.new_nodes->set([])
networkx.algorithms.isomorphism.isomorphvf2.DiGMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.DiGMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GMState(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.__init__(self,GM,G1_node=None,G2_node=None)
networkx.algorithms.isomorphism.isomorphvf2.GMState.restore(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.__init__(self,G1,G2)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.initialize(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.match(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter(self)
networkx.algorithms.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.DiGMState(self,GM,G1_node=None,G2_node=None)
networkx.isomorphism.isomorphvf2.DiGMState.restore(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher(self,G1,G2)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.candidate_pairs_iter(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.initialize(self)
networkx.isomorphism.isomorphvf2.DiGraphMatcher.syntactic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.GMState(self,GM,G1_node=None,G2_node=None)
networkx.isomorphism.isomorphvf2.GMState.restore(self)
networkx.isomorphism.isomorphvf2.GraphMatcher(self,G1,G2)
networkx.isomorphism.isomorphvf2.GraphMatcher.candidate_pairs_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.initialize(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.is_isomorphic(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.isomorphisms_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.match(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.reset_recursion_limit(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.semantic_feasibility(self,G1_node,G2_node)
networkx.isomorphism.isomorphvf2.GraphMatcher.subgraph_is_isomorphic(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.subgraph_isomorphisms_iter(self)
networkx.isomorphism.isomorphvf2.GraphMatcher.syntactic_feasibility(self,G1_node,G2_node)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphvf2.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g1->networkx.cycle_graph(L)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm->networkx.algorithms.isomorphism.GraphMatcher(g1, g1)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.mapping->sorted(gm.mapping.items())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.g3->networkx.subgraph(g2, ['A', 'B'])
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.fh->open(filename, mode='rb')
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.graph->self.create_graph(os.path.join(head, 'si2_b06_m200.B99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.(head, tail)->os.path.split(__file__)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.subgraph->self.create_graph(os.path.join(head, 'si2_b06_m200.A99'))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.alphabet->list(range(26))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nlist->self.create_graph(os.path.join(head, 'si2_b06_m200.B99')).nodes()
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.d->dict(zip(nodes, new_nodes))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.relabel->networkx.relabel_nodes(graph, d)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.nodes->list(range(6))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.new_nodes->list(nodes)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm12->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gm13->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.x->list(gm12.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.y->list(gm13.subgraph_isomorphisms_iter())
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.s->len(list(gm.isomorphisms_iter()))
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmA->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g2)
A:networkx.algorithms.isomorphism.tests.test_isomorphvf2.gmB->networkx.algorithms.isomorphism.DiGraphMatcher(g1, g3)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB(object)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph(filename)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample(object)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph(self)
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_graph_atlas()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiedge()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_multiple()
networkx.algorithms.isomorphism.tests.test_isomorphvf2.test_selfloop()
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB(object)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.create_graph(filename)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_graph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestVF2GraphDB.test_subgraph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample(object)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_graph(self)
networkx.isomorphism.tests.test_isomorphvf2.TestWikipediaExample.test_subgraph(self)
networkx.isomorphism.tests.test_isomorphvf2.test_graph_atlas()
networkx.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter1()
networkx.isomorphism.tests.test_isomorphvf2.test_isomorphism_iter2()
networkx.isomorphism.tests.test_isomorphvf2.test_multiedge()
networkx.isomorphism.tests.test_isomorphvf2.test_multiple()
networkx.isomorphism.tests.test_isomorphvf2.test_selfloop()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/tests/test_isomorphism.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G1->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G2->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G3->networkx.Graph()
A:networkx.algorithms.isomorphism.tests.test_isomorphism.self.G4->networkx.Graph()
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.setUp(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic(self)
networkx.algorithms.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.setUp(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_fast_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_faster_could_be_isomorphic(self)
networkx.isomorphism.tests.test_isomorphism.TestIsomorph.test_is_isomorphic(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/isomorphism/tests/test_vf2userfunc.py----------------------------------------
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g2->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.g1->networkx.DiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g1->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.g2->networkx.MultiDiGraph()
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.nm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_node_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.em->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).numerical_edge_match('weight', 1)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.iso->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emc->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match('color', '')
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emcm->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).categorical_edge_match(['color', 'weight'], ['', 1])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg1->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_multiedge_match('color', 'red', eq)
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.self.emg2->networkx.is_isomorphic(self.g1, self.g2, node_match=self.nm, edge_match=self.em).generic_edge_match(['color', 'weight', 'size'], ['red', 1, 0.5], [eq, eq, iso.matchhelpers.close])
A:networkx.algorithms.isomorphism.tests.test_vf2userfunc.gm->self.GM(self.g1, self.g2, edge_match=self.emg2)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_DiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiDiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph(object)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph(object)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.build(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.setUp(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_color2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight1(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.TestNodeMatch_Graph.test_weight2(self)
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_simple()
networkx.algorithms.isomorphism.tests.test_vf2userfunc.test_weightkey()
networkx.isomorphism.tests.test_TestEdgeMatch_DiGraph(TestNodeMatch_Graph)
networkx.isomorphism.tests.test_TestEdgeMatch_DiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph(TestEdgeMatch_MultiGraph)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiDiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph(object)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.build(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.setUp(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colors_only(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_colorsandweights(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic1(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_generic2(self)
networkx.isomorphism.tests.test_TestEdgeMatch_MultiGraph.test_weights_only(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph(object)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.build(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.setUp(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_color1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_color2(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights2(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_colorsandweights3(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_noweight_nocolor(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_weight1(self)
networkx.isomorphism.tests.test_TestNodeMatch_Graph.test_weight2(self)
networkx.isomorphism.tests.test_test_simple()
networkx.isomorphism.tests.test_test_weightkey()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/centrality.py----------------------------------------
A:networkx.algorithms.bipartite.centrality.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.centrality.top->set(nodes)
A:networkx.algorithms.bipartite.centrality.centrality->dict(((n, d * s) for (n, d) in G.degree_iter(top)))
A:networkx.algorithms.bipartite.centrality.n->float(len(top))
A:networkx.algorithms.bipartite.centrality.m->float(len(bottom))
A:networkx.algorithms.bipartite.centrality.betweenness->networkx.betweenness_centrality(G, normalized=False, weight=None)
A:networkx.algorithms.bipartite.centrality.sp->path_length(G, node)
A:networkx.algorithms.bipartite.centrality.totsp->sum(sp.values())
networkx.algorithms.bipartite.centrality.betweenness_centrality(G,nodes)
networkx.algorithms.bipartite.centrality.closeness_centrality(G,nodes,normalized=True)
networkx.algorithms.bipartite.centrality.degree_centrality(G,nodes)
networkx.bipartite.betweenness_centrality(G,nodes)
networkx.bipartite.closeness_centrality(G,nodes,normalized=True)
networkx.bipartite.degree_centrality(G,nodes)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/redundancy.py----------------------------------------
A:networkx.algorithms.bipartite.redundancy.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.redundancy.n->len(G[v])
networkx.algorithms.bipartite.redundancy.node_redundancy(G,nodes=None)
networkx.bipartite.node_redundancy(G,nodes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/projection.py----------------------------------------
A:networkx.algorithms.bipartite.projection.G->networkx.Graph()
A:networkx.algorithms.bipartite.projection.n_top->float(len(B) - len(nodes))
A:networkx.algorithms.bipartite.projection.unbrs->set(B[u])
A:networkx.algorithms.bipartite.projection.vnbrs->set(pred[v])
A:networkx.algorithms.bipartite.projection.weight->weight_function(unbrs, vnbrs)
networkx.algorithms.bipartite.projection.collaboration_weighted_projected_graph(B,nodes)
networkx.algorithms.bipartite.projection.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.algorithms.bipartite.projection.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.algorithms.bipartite.projection.project(B,nodes,create_using=None)
networkx.algorithms.bipartite.projection.projected_graph(B,nodes,multigraph=False)
networkx.algorithms.bipartite.projection.weighted_projected_graph(B,nodes,ratio=False)
networkx.bipartite.collaboration_weighted_projected_graph(B,nodes)
networkx.bipartite.generic_weighted_projected_graph(B,nodes,weight_function=None)
networkx.bipartite.overlap_weighted_projected_graph(B,nodes,jaccard=True)
networkx.bipartite.weighted_projected_graph(B,nodes,ratio=False)
networkx.project(B,nodes,create_using=None)
networkx.projected_graph(B,nodes,multigraph=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/spectral.py----------------------------------------
A:networkx.algorithms.bipartite.spectral.nodelist->G.nodes()
A:networkx.algorithms.bipartite.spectral.A->networkx.to_numpy_matrix(G, nodelist, weight=weight)
A:networkx.algorithms.bipartite.spectral.expA->scipy.linalg.expm(A)
A:networkx.algorithms.bipartite.spectral.expmA->scipy.linalg.expm(-A)
A:networkx.algorithms.bipartite.spectral.index->dict(zip(nodelist, range(len(nodelist))))
networkx.algorithms.bipartite.spectral.setup_module(module)
networkx.algorithms.bipartite.spectral.spectral_bipartivity(G,nodes=None,weight='weight')
networkx.bipartite.setup_module(module)
networkx.bipartite.spectral_bipartivity(G,nodes=None,weight='weight')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/cluster.py----------------------------------------
A:networkx.algorithms.bipartite.cluster.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.algorithms.bipartite.cluster.ccs->clustering(G, nodes=nodes, mode=mode)
networkx.algorithms.bipartite.cluster.average_clustering(G,nodes=None,mode='dot')
networkx.algorithms.bipartite.cluster.cc_dot(nu,nv)
networkx.algorithms.bipartite.cluster.cc_max(nu,nv)
networkx.algorithms.bipartite.cluster.cc_min(nu,nv)
networkx.algorithms.bipartite.cluster.clustering(G,nodes=None,mode='dot')
networkx.bipartite.average_clustering(G,nodes=None,mode='dot')
networkx.bipartite.cc_dot(nu,nv)
networkx.bipartite.cc_max(nu,nv)
networkx.bipartite.cc_min(nu,nv)
networkx.bipartite.clustering(G,nodes=None,mode='dot')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/basic.py----------------------------------------
A:networkx.algorithms.bipartite.basic.v->queue.pop()
A:networkx.algorithms.bipartite.basic.S->set(nodes)
A:networkx.algorithms.bipartite.basic.(X, Y)->sets(CC)
A:networkx.algorithms.bipartite.basic.c->color(G)
A:networkx.algorithms.bipartite.basic.X->set((n for n in c if c[n]))
A:networkx.algorithms.bipartite.basic.Y->set((n for n in c if not c[n]))
A:networkx.algorithms.bipartite.basic.n->len(B)
A:networkx.algorithms.bipartite.basic.m->networkx.number_of_edges(B)
A:networkx.algorithms.bipartite.basic.nb->len(nodes)
A:networkx.algorithms.bipartite.basic.bottom->set(nodes)
networkx.algorithms.bipartite.basic.color(G)
networkx.algorithms.bipartite.basic.degrees(B,nodes,weight=None)
networkx.algorithms.bipartite.basic.density(B,nodes)
networkx.algorithms.bipartite.basic.is_bipartite(G)
networkx.algorithms.bipartite.basic.is_bipartite_node_set(G,nodes)
networkx.algorithms.bipartite.basic.sets(G)
networkx.bipartite.color(G)
networkx.bipartite.degrees(B,nodes,weight=None)
networkx.bipartite.density(B,nodes)
networkx.bipartite.sets(G)
networkx.is_bipartite(G)
networkx.is_bipartite_node_set(G,nodes)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/tests/test_cluster.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_cluster.G1->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7)])
A:networkx.algorithms.bipartite.tests.test_cluster.G2->networkx.Graph([(0, 2), (0, 3), (0, 4), (1, 3), (1, 4), (1, 5)])
A:networkx.algorithms.bipartite.tests.test_cluster.G3->networkx.Graph([(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)])
A:networkx.algorithms.bipartite.tests.test_cluster.G->networkx.path_graph(4)
networkx.algorithms.bipartite.tests.test_cluster.test_average_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_pairwise_bipartite_cc_functions()
networkx.algorithms.bipartite.tests.test_cluster.test_path_graph()
networkx.algorithms.bipartite.tests.test_cluster.test_star_graph()
networkx.bipartite.tests.test_test_average_path_graph()
networkx.bipartite.tests.test_test_pairwise_bipartite_cc_functions()
networkx.bipartite.tests.test_test_path_graph()
networkx.bipartite.tests.test_test_star_graph()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/tests/test_spectral_bipartivity.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.G->networkx.complete_bipartite_graph(2, 3)
A:networkx.algorithms.bipartite.tests.test_spectral_bipartivity.sbn->sb(G, nodes=[1, 2])
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity(object)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.k23_like(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setupClass(cls)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes(self)
networkx.algorithms.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity(object)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.k23_like(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.setupClass(cls)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_single_nodes(self)
networkx.bipartite.tests.test_spectral_bipartivity.TestSpectralBipartivity.test_star_like(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/tests/test_basic.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_basic.G->networkx.path_graph(5)
A:networkx.algorithms.bipartite.tests.test_basic.c->networkx.algorithms.bipartite.color(G)
A:networkx.algorithms.bipartite.tests.test_basic.(X, Y)->networkx.algorithms.bipartite.sets(G)
A:networkx.algorithms.bipartite.tests.test_basic.X->set([1, 3])
A:networkx.algorithms.bipartite.tests.test_basic.Y->set([0, 2, 4])
A:networkx.algorithms.bipartite.tests.test_basic.(u, d)->networkx.algorithms.bipartite.degrees(G, Y, weight='other')
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_color(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_density(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_directed(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_sets(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite(self)
networkx.algorithms.bipartite.tests.test_basic.TestBipartiteBasic.test_is_bipartite_node_set(self)
networkx.bipartite.tests.test_TestBipartiteBasic
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_color(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_degrees(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_density(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_directed(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_sets(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_bipartite_weighted_degrees(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite(self)
networkx.bipartite.tests.test_TestBipartiteBasic.test_is_bipartite_node_set(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/tests/test_project.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_project.G->networkx.DiGraph()
A:networkx.algorithms.bipartite.tests.test_project.P->networkx.algorithms.bipartite.overlap_weighted_projected_graph(self.N, 'ABCDE')
A:networkx.algorithms.bipartite.tests.test_project.self.G->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.self.N->networkx.Graph()
A:networkx.algorithms.bipartite.tests.test_project.Panswer->networkx.Graph()
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.setUp(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio(self)
networkx.algorithms.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared(self)
networkx.bipartite.tests.test_project.TestBipartiteProject
networkx.bipartite.tests.test_project.TestBipartiteProject.test_directed_projection(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_collaboration_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_projected_properties_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_path_weighted_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_project_collaboration(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_project_multigraph(self)
networkx.bipartite.tests.test_project.TestBipartiteProject.test_star_projected_graph(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.setUp(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_jaccard(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_newman(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_overlap(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_ratio(self)
networkx.bipartite.tests.test_project.TestBipartiteWeightedProjection.test_project_weighted_shared(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/bipartite/tests/test_centrality.py----------------------------------------
A:networkx.algorithms.bipartite.tests.test_centrality.self.P4->networkx.path_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.self.K3->networkx.complete_bipartite_graph(3, 3)
A:networkx.algorithms.bipartite.tests.test_centrality.self.C4->networkx.cycle_graph(4)
A:networkx.algorithms.bipartite.tests.test_centrality.self.davis->networkx.davis_southern_women_graph()
A:networkx.algorithms.bipartite.tests.test_centrality.d->networkx.algorithms.bipartite.degree_centrality(self.C4, [0, 2])
A:networkx.algorithms.bipartite.tests.test_centrality.c->networkx.algorithms.bipartite.closeness_centrality(self.C4, [0, 2])
A:networkx.algorithms.bipartite.tests.test_centrality.deg->networkx.algorithms.bipartite.degree_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.bet->networkx.algorithms.bipartite.betweenness_centrality(G, self.top_nodes)
A:networkx.algorithms.bipartite.tests.test_centrality.clos->networkx.algorithms.bipartite.closeness_centrality(G, self.top_nodes)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality(object)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.setUp(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.algorithms.bipartite.tests.test_centrality.TestBipartiteCentrality.test_degree_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality(object)
networkx.bipartite.tests.test_TestBipartiteCentrality.setUp(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_betweenness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_closeness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_betweenness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_closeness_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_davis_degree_centrality(self)
networkx.bipartite.tests.test_TestBipartiteCentrality.test_degree_centrality(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/chordal/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/chordal/chordal_alg.py----------------------------------------
A:networkx.algorithms.chordal.chordal_alg.__authors__->'\n'.join(['Jesus Cerquides <cerquide@iiia.csic.es>'])
A:networkx.algorithms.chordal.chordal_alg.H->networkx.Graph(G)
A:networkx.algorithms.chordal.chordal_alg.I->set()
A:networkx.algorithms.chordal.chordal_alg.triplet->_find_chordality_breaker(H, s, treewidth_bound)
A:networkx.algorithms.chordal.chordal_alg.cliques->set()
A:networkx.algorithms.chordal.chordal_alg.max_clique->max(max_clique, len(clique))
A:networkx.algorithms.chordal.chordal_alg.n->G.number_of_nodes()
A:networkx.algorithms.chordal.chordal_alg.e->G.number_of_edges()
A:networkx.algorithms.chordal.chordal_alg.nodes->set(G)
A:networkx.algorithms.chordal.chordal_alg.number->len([y for y in G[x] if y in wanna_connect])
A:networkx.algorithms.chordal.chordal_alg.unnumbered->set(G.nodes())
A:networkx.algorithms.chordal.chordal_alg.s->random.choice(list(unnumbered))
A:networkx.algorithms.chordal.chordal_alg.numbered->set([v])
A:networkx.algorithms.chordal.chordal_alg.v->_max_cardinality_node(G, unnumbered, numbered)
A:networkx.algorithms.chordal.chordal_alg.sg->G.subgraph(clique_wanna_be)
A:networkx.algorithms.chordal.chordal_alg.current_treewidth->max(current_treewidth, len(clique_wanna_be))
A:networkx.algorithms.chordal.chordal_alg.(u, w)->_find_missing_edge(sg)
A:networkx.algorithms.chordal.chordal_alg.x->frozenset(G.nodes())
A:networkx.algorithms.chordal.chordal_alg.clique_wanna_be->set([v])
networkx.NetworkXTreewidthBoundExceeded(nx.NetworkXException)
networkx._connected_chordal_graph_cliques(G)
networkx._find_chordality_breaker(G,s=None,treewidth_bound=sys.maxsize)
networkx._find_missing_edge(G)
networkx._is_complete_graph(G)
networkx._max_cardinality_node(G,choices,wanna_connect)
networkx.algorithms.chordal.chordal_alg.NetworkXTreewidthBoundExceeded(nx.NetworkXException)
networkx.algorithms.chordal.chordal_alg._connected_chordal_graph_cliques(G)
networkx.algorithms.chordal.chordal_alg._find_chordality_breaker(G,s=None,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal.chordal_alg._find_missing_edge(G)
networkx.algorithms.chordal.chordal_alg._is_complete_graph(G)
networkx.algorithms.chordal.chordal_alg._max_cardinality_node(G,choices,wanna_connect)
networkx.algorithms.chordal.chordal_alg.chordal_graph_cliques(G)
networkx.algorithms.chordal.chordal_alg.chordal_graph_treewidth(G)
networkx.algorithms.chordal.chordal_alg.find_induced_nodes(G,s,t,treewidth_bound=sys.maxsize)
networkx.algorithms.chordal.chordal_alg.is_chordal(G)
networkx.chordal_graph_cliques(G)
networkx.chordal_graph_treewidth(G)
networkx.find_induced_nodes(G,s,t,treewidth_bound=sys.maxsize)
networkx.is_chordal(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/chordal/tests/test_chordal.py----------------------------------------
A:networkx.algorithms.chordal.tests.test_chordal.connected_chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.non_chordal_G->networkx.Graph()
A:networkx.algorithms.chordal.tests.test_chordal.G->networkx.path_graph(10)
A:networkx.algorithms.chordal.tests.test_chordal.I->networkx.find_induced_nodes(self.chordal_G, 1, 6)
A:networkx.algorithms.chordal.tests.test_chordal.cliques->set([frozenset([1, 2, 3]), frozenset([2, 3, 4]), frozenset([3, 4, 5, 6])])
A:networkx.algorithms.chordal.tests.test_chordal.cliqueset->networkx.chordal_graph_cliques(G)
networkx.algorithms.chordal.tests.test_chordal.TestMCS
networkx.algorithms.chordal.tests.test_chordal.TestMCS.setUp(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliquesCC(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_chordal_find_cliques_path(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_induced_nodes(self)
networkx.algorithms.chordal.tests.test_chordal.TestMCS.test_is_chordal(self)
networkx.tests.test_TestMCS
networkx.tests.test_TestMCS.setUp(self)
networkx.tests.test_TestMCS.test_chordal_find_cliques(self)
networkx.tests.test_TestMCS.test_chordal_find_cliquesCC(self)
networkx.tests.test_TestMCS.test_chordal_find_cliques_path(self)
networkx.tests.test_TestMCS.test_induced_nodes(self)
networkx.tests.test_TestMCS.test_is_chordal(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/traversal/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/traversal/depth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.depth_first_search.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.traversal.depth_first_search.visited->set()
A:networkx.algorithms.traversal.depth_first_search.child->next(children)
A:networkx.algorithms.traversal.depth_first_search.d->defaultdict(list)
networkx.algorithms.traversal.depth_first_search.dfs_edges(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_labeled_edges(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_postorder_nodes(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_predecessors(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_preorder_nodes(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_successors(G,source=None)
networkx.algorithms.traversal.depth_first_search.dfs_tree(G,source=None)
networkx.dfs_edges(G,source=None)
networkx.dfs_labeled_edges(G,source=None)
networkx.dfs_postorder_nodes(G,source=None)
networkx.dfs_predecessors(G,source=None)
networkx.dfs_preorder_nodes(G,source=None)
networkx.dfs_successors(G,source=None)
networkx.dfs_tree(G,source=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/traversal/breadth_first_search.py----------------------------------------
A:networkx.algorithms.traversal.breadth_first_search.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.algorithms.traversal.breadth_first_search.visited->set([source])
A:networkx.algorithms.traversal.breadth_first_search.child->next(children)
A:networkx.algorithms.traversal.breadth_first_search.d->defaultdict(list)
networkx.algorithms.traversal.breadth_first_search.bfs_edges(G,source)
networkx.algorithms.traversal.breadth_first_search.bfs_predecessors(G,source)
networkx.algorithms.traversal.breadth_first_search.bfs_successors(G,source)
networkx.algorithms.traversal.breadth_first_search.bfs_tree(G,source)
networkx.bfs_edges(G,source)
networkx.bfs_predecessors(G,source)
networkx.bfs_successors(G,source)
networkx.bfs_tree(G,source)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/traversal/tests/test_bfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_bfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_bfs.T->networkx.bfs_tree(self.G, source=0)
A:networkx.algorithms.traversal.tests.test_bfs.edges->networkx.bfs_edges(self.G, source=0)
networkx.algorithms.traversal.tests.test_bfs.TestBFS
networkx.algorithms.traversal.tests.test_bfs.TestBFS.setUp(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_edges(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_bfs_tree(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_bfs.TestBFS.test_successor(self)
networkx.tests.test_bfs.TestBFS
networkx.tests.test_bfs.TestBFS.setUp(self)
networkx.tests.test_bfs.TestBFS.test_bfs_edges(self)
networkx.tests.test_bfs.TestBFS.test_bfs_tree(self)
networkx.tests.test_bfs.TestBFS.test_predecessor(self)
networkx.tests.test_bfs.TestBFS.test_successor(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/traversal/tests/test_dfs.py----------------------------------------
A:networkx.algorithms.traversal.tests.test_dfs.G->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.D->networkx.Graph()
A:networkx.algorithms.traversal.tests.test_dfs.T->networkx.dfs_tree(self.G, source=0)
A:networkx.algorithms.traversal.tests.test_dfs.edges->list(nx.dfs_labeled_edges(self.D))
networkx.algorithms.traversal.tests.test_dfs.TestDFS
networkx.algorithms.traversal.tests.test_dfs.TestDFS.setUp(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_labeled_edges(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_dfs_tree(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_postorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_predecessor(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_preorder_nodes(self)
networkx.algorithms.traversal.tests.test_dfs.TestDFS.test_successor(self)
networkx.tests.test_dfs.TestDFS
networkx.tests.test_dfs.TestDFS.setUp(self)
networkx.tests.test_dfs.TestDFS.test_dfs_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_labeled_disconnected_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_labeled_edges(self)
networkx.tests.test_dfs.TestDFS.test_dfs_tree(self)
networkx.tests.test_dfs.TestDFS.test_postorder_nodes(self)
networkx.tests.test_dfs.TestDFS.test_predecessor(self)
networkx.tests.test_dfs.TestDFS.test_preorder_nodes(self)
networkx.tests.test_dfs.TestDFS.test_successor(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/attracting.py----------------------------------------
A:networkx.algorithms.components.attracting.__authors__->'\n'.join(['Christopher Ellison'])
A:networkx.algorithms.components.attracting.scc->networkx.strongly_connected_components(G)
A:networkx.algorithms.components.attracting.cG->networkx.condensation(G, scc)
A:networkx.algorithms.components.attracting.n->len(attracting_components(G))
A:networkx.algorithms.components.attracting.ac->attracting_components(G)
networkx.algorithms.components.attracting.attracting_component_subgraphs(G)
networkx.algorithms.components.attracting.attracting_components(G)
networkx.algorithms.components.attracting.is_attracting_component(G)
networkx.algorithms.components.attracting.number_attracting_components(G)
networkx.attracting_component_subgraphs(G)
networkx.attracting_components(G)
networkx.is_attracting_component(G)
networkx.number_attracting_components(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/strongly_connected.py----------------------------------------
A:networkx.algorithms.components.strongly_connected.__authors__->'\n'.join(['Eben Kenah', 'Aric Hagberg (hagberg@lanl.gov)Christopher Ellison'])
A:networkx.algorithms.components.strongly_connected.lowlink[v]->min([lowlink[v], preorder[w]])
A:networkx.algorithms.components.strongly_connected.k->scc_queue.pop()
A:networkx.algorithms.components.strongly_connected.G->G.reverse(copy=False).reverse(copy=False)
A:networkx.algorithms.components.strongly_connected.post->list(nx.dfs_postorder_nodes(G, source=source))
A:networkx.algorithms.components.strongly_connected.r->list(nx.dfs_postorder_nodes(G, source=source)).pop()
A:networkx.algorithms.components.strongly_connected.c->networkx.dfs_preorder_nodes(G, r)
A:networkx.algorithms.components.strongly_connected.root[v]->min(root[v], root[w])
A:networkx.algorithms.components.strongly_connected.w->stack.pop()
A:networkx.algorithms.components.strongly_connected.cc->strongly_connected_components(G)
A:networkx.algorithms.components.strongly_connected.C->networkx.DiGraph()
networkx.algorithms.components.strongly_connected.condensation(G,scc)
networkx.algorithms.components.strongly_connected.is_strongly_connected(G)
networkx.algorithms.components.strongly_connected.kosaraju_strongly_connected_components(G,source=None)
networkx.algorithms.components.strongly_connected.number_strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_component_subgraphs(G)
networkx.algorithms.components.strongly_connected.strongly_connected_components(G)
networkx.algorithms.components.strongly_connected.strongly_connected_components_recursive(G)
networkx.condensation(G,scc)
networkx.is_strongly_connected(G)
networkx.kosaraju_strongly_connected_components(G,source=None)
networkx.number_strongly_connected_components(G)
networkx.strongly_connected_component_subgraphs(G)
networkx.strongly_connected_components(G)
networkx.strongly_connected_components_recursive(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/weakly_connected.py----------------------------------------
A:networkx.algorithms.components.weakly_connected.__authors__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)Christopher Ellison'])
A:networkx.algorithms.components.weakly_connected.c->_single_source_shortest_unipath_length(G, v)
A:networkx.algorithms.components.weakly_connected.wcc->weakly_connected_components(G)
networkx._single_source_shortest_unipath_length(G,source,cutoff=None)
networkx.algorithms.components.weakly_connected._single_source_shortest_unipath_length(G,source,cutoff=None)
networkx.algorithms.components.weakly_connected.is_weakly_connected(G)
networkx.algorithms.components.weakly_connected.number_weakly_connected_components(G)
networkx.algorithms.components.weakly_connected.weakly_connected_component_subgraphs(G)
networkx.algorithms.components.weakly_connected.weakly_connected_components(G)
networkx.is_weakly_connected(G)
networkx.number_weakly_connected_components(G)
networkx.weakly_connected_component_subgraphs(G)
networkx.weakly_connected_components(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/connected.py----------------------------------------
A:networkx.algorithms.components.connected.__authors__->'\n'.join(['Eben Kenah', 'Aric Hagberg (hagberg@lanl.gov)Christopher Ellison'])
A:networkx.algorithms.components.connected.c->networkx.single_source_shortest_path_length(G, v)
A:networkx.algorithms.components.connected.cc->connected_components(G)
networkx.algorithms.components.connected.connected_component_subgraphs(G)
networkx.algorithms.components.connected.connected_components(G)
networkx.algorithms.components.connected.is_connected(G)
networkx.algorithms.components.connected.node_connected_component(G,n)
networkx.algorithms.components.connected.number_connected_components(G)
networkx.connected_component_subgraphs(G)
networkx.connected_components(G)
networkx.is_connected(G)
networkx.node_connected_component(G,n)
networkx.number_connected_components(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/biconnected.py----------------------------------------
A:networkx.algorithms.components.biconnected.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Dan Schult <dschult@colgate.edu>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.components.biconnected.bcc->list(biconnected_components(G))
A:networkx.algorithms.components.biconnected.H->G.__class__()
A:networkx.algorithms.components.biconnected.H.node[n]->G.node[n].copy()
A:networkx.algorithms.components.biconnected.H.graph->G.graph.copy()
A:networkx.algorithms.components.biconnected.visited->set()
A:networkx.algorithms.components.biconnected.child->next(children)
A:networkx.algorithms.components.biconnected.low[parent]->min(low[parent], discovery[child])
A:networkx.algorithms.components.biconnected.low[child]discovery[child]->len(discovery)
A:networkx.algorithms.components.biconnected.ind->edge_stack.index((grandparent, parent))
A:networkx.algorithms.components.biconnected.low[grandparent]->min(low[parent], low[grandparent])
networkx._biconnected_dfs(G,components=True)
networkx.algorithms.components.biconnected._biconnected_dfs(G,components=True)
networkx.algorithms.components.biconnected.articulation_points(G)
networkx.algorithms.components.biconnected.biconnected_component_edges(G)
networkx.algorithms.components.biconnected.biconnected_component_subgraphs(G)
networkx.algorithms.components.biconnected.biconnected_components(G)
networkx.algorithms.components.biconnected.is_biconnected(G)
networkx.articulation_points(G)
networkx.biconnected_component_edges(G)
networkx.biconnected_component_subgraphs(G)
networkx.biconnected_components(G)
networkx.is_biconnected(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/tests/test_attracting.py----------------------------------------
A:networkx.algorithms.components.tests.test_attracting.self.G1->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.self.G2->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.self.G3->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_attracting.ac->networkx.attracting_components(self.G3)
A:networkx.algorithms.components.tests.test_attracting.g2->self.G3.subgraph([1, 2])
A:networkx.algorithms.components.tests.test_attracting.subgraphs->networkx.attracting_component_subgraphs(self.G2)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents(object)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.setUp(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_component_subgraphs(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_attracting_components(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_is_attracting_component(self)
networkx.algorithms.components.tests.test_attracting.TestAttractingComponents.test_number_attacting_components(self)
networkx.tests.test_TestAttractingComponents(object)
networkx.tests.test_TestAttractingComponents.setUp(self)
networkx.tests.test_TestAttractingComponents.test_attracting_component_subgraphs(self)
networkx.tests.test_TestAttractingComponents.test_attracting_components(self)
networkx.tests.test_TestAttractingComponents.test_is_attracting_component(self)
networkx.tests.test_TestAttractingComponents.test_number_attacting_components(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/tests/test_strongly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_strongly_connected.G->networkx.DiGraph()
A:networkx.algorithms.components.tests.test_strongly_connected.scc->networkx.strongly_connected_components(G)
A:networkx.algorithms.components.tests.test_strongly_connected.cG->networkx.condensation(G, scc)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.setUp(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc1(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_edge(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_contract_scc_isolate(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_is_strongly_connected(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_kosaraju(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_strongly_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan(self)
networkx.algorithms.components.tests.test_strongly_connected.TestStronglyConnected.test_tarjan_recursive(self)
networkx.tests.test_TestStronglyConnected
networkx.tests.test_TestStronglyConnected.setUp(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc1(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc_edge(self)
networkx.tests.test_TestStronglyConnected.test_contract_scc_isolate(self)
networkx.tests.test_TestStronglyConnected.test_is_strongly_connected(self)
networkx.tests.test_TestStronglyConnected.test_kosaraju(self)
networkx.tests.test_TestStronglyConnected.test_number_strongly_connected_components(self)
networkx.tests.test_TestStronglyConnected.test_strongly_connected_component_subgraphs(self)
networkx.tests.test_TestStronglyConnected.test_tarjan(self)
networkx.tests.test_TestStronglyConnected.test_tarjan_recursive(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/tests/test_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_connected.G1->cnlti(nx.grid_2d_graph(2, 2), first_label=0, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G2->cnlti(nx.lollipop_graph(3, 3), first_label=4, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.G3->cnlti(nx.house_graph(), first_label=10, ordering='sorted')
A:networkx.algorithms.components.tests.test_connected.self.G->networkx.union(self.G, G3)
A:networkx.algorithms.components.tests.test_connected.self.DG->networkx.DiGraph([(1, 2), (1, 3), (2, 3)])
A:networkx.algorithms.components.tests.test_connected.self.grid->cnlti(nx.grid_2d_graph(4, 4), first_label=1)
A:networkx.algorithms.components.tests.test_connected.ccs->networkx.connected_component_subgraphs(G)
A:networkx.algorithms.components.tests.test_connected.G->networkx.Graph()
networkx.algorithms.components.tests.test_connected.TestConnected
networkx.algorithms.components.tests.test_connected.TestConnected.setUp(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_components2(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_is_connected(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_node_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components(self)
networkx.algorithms.components.tests.test_connected.TestConnected.test_number_connected_components2(self)
networkx.tests.test_TestConnected
networkx.tests.test_TestConnected.setUp(self)
networkx.tests.test_TestConnected.test_connected_component_subgraphs(self)
networkx.tests.test_TestConnected.test_connected_components(self)
networkx.tests.test_TestConnected.test_connected_components2(self)
networkx.tests.test_TestConnected.test_connected_raise(self)
networkx.tests.test_TestConnected.test_is_connected(self)
networkx.tests.test_TestConnected.test_node_connected_components(self)
networkx.tests.test_TestConnected.test_number_connected_components(self)
networkx.tests.test_TestConnected.test_number_connected_components2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/tests/test_weakly_connected.py----------------------------------------
A:networkx.algorithms.components.tests.test_weakly_connected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_weakly_connected.U->networkx.Graph().to_undirected()
A:networkx.algorithms.components.tests.test_weakly_connected.w->sorted([sorted(g.nodes()) for g in wcc(G)])
A:networkx.algorithms.components.tests.test_weakly_connected.c->sorted([sorted(g.nodes()) for g in cc(U)])
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.setUp(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_connected_raise(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_is_weakly_connected(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_component_subgraphs(self)
networkx.algorithms.components.tests.test_weakly_connected.TestWeaklyConnected.test_weakly_connected_components(self)
networkx.tests.test_TestWeaklyConnected
networkx.tests.test_TestWeaklyConnected.setUp(self)
networkx.tests.test_TestWeaklyConnected.test_connected_raise(self)
networkx.tests.test_TestWeaklyConnected.test_is_weakly_connected(self)
networkx.tests.test_TestWeaklyConnected.test_number_weakly_connected_components(self)
networkx.tests.test_TestWeaklyConnected.test_weakly_connected_component_subgraphs(self)
networkx.tests.test_TestWeaklyConnected.test_weakly_connected_components(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/components/tests/test_biconnected.py----------------------------------------
A:networkx.algorithms.components.tests.test_biconnected.sx->set((frozenset([frozenset(e) for e in c]) for c in x))
A:networkx.algorithms.components.tests.test_biconnected.sy->set((frozenset([frozenset(e) for e in c]) for c in y))
A:networkx.algorithms.components.tests.test_biconnected.G->networkx.Graph()
A:networkx.algorithms.components.tests.test_biconnected.pts->set(biconnected.articulation_points(G))
A:networkx.algorithms.components.tests.test_biconnected.bcc->list(biconnected.biconnected_components(G2))
A:networkx.algorithms.components.tests.test_biconnected.Gc->set(biconnected.biconnected_component_subgraphs(G))
A:networkx.algorithms.components.tests.test_biconnected.comps->list(biconnected.biconnected_component_edges(G))
A:networkx.algorithms.components.tests.test_biconnected.D->networkx.davis_southern_women_graph()
A:networkx.algorithms.components.tests.test_biconnected.K->networkx.karate_club_graph()
A:networkx.algorithms.components.tests.test_biconnected.G1->networkx.Graph({0: [1, 2, 5], 1: [0, 5], 2: [0, 3, 4], 3: [2, 4, 5, 6], 4: [2, 3, 5, 6], 5: [0, 1, 3, 4], 6: [3, 4]})
A:networkx.algorithms.components.tests.test_biconnected.G2->networkx.Graph({0: [2, 5], 1: [3, 8], 2: [0, 3, 5], 3: [1, 2, 6, 8], 4: [7], 5: [0, 2], 6: [3, 8], 7: [4], 8: [1, 3, 6]})
networkx.algorithms.components.tests.test_biconnected.assert_components_equal(x,y)
networkx.algorithms.components.tests.test_biconnected.test_articulation_points_cycle()
networkx.algorithms.components.tests.test_biconnected.test_barbell()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_component_subgraphs_cycle()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components1()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components2()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_components_cycle()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_davis()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_eppstein()
networkx.algorithms.components.tests.test_biconnected.test_biconnected_karate()
networkx.algorithms.components.tests.test_biconnected.test_empty_is_biconnected()
networkx.algorithms.components.tests.test_biconnected.test_is_biconnected()
networkx.tests.test_assert_components_equal(x,y)
networkx.tests.test_test_articulation_points_cycle()
networkx.tests.test_test_barbell()
networkx.tests.test_test_biconnected_component_subgraphs_cycle()
networkx.tests.test_test_biconnected_components1()
networkx.tests.test_test_biconnected_components2()
networkx.tests.test_test_biconnected_components_cycle()
networkx.tests.test_test_biconnected_davis()
networkx.tests.test_test_biconnected_eppstein()
networkx.tests.test_test_biconnected_karate()
networkx.tests.test_test_empty_is_biconnected()
networkx.tests.test_test_is_biconnected()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/community/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/community/kclique.py----------------------------------------
A:networkx.algorithms.community.kclique.__author__->'\n'.join(['Conrad Lee <conradlee@gmail.com>', 'Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.algorithms.community.kclique.cliques->networkx.find_cliques(G)
A:networkx.algorithms.community.kclique.membership_dict->defaultdict(list)
A:networkx.algorithms.community.kclique.perc_graph->networkx.Graph()
A:networkx.algorithms.community.kclique.adjacent_cliques->set()
networkx._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.kclique._get_adjacent_cliques(clique,membership_dict)
networkx.algorithms.community.kclique.k_clique_communities(G,k,cliques=None)
networkx.k_clique_communities(G,k,cliques=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/algorithms/community/tests/test_kclique.py----------------------------------------
A:networkx.algorithms.community.tests.test_kclique.G->networkx.Graph()
A:networkx.algorithms.community.tests.test_kclique.c->list(nx.k_clique_communities(G, 5))
networkx.algorithms.community.tests.test_kclique.test_overlaping_K5()
networkx.tests.test_test_overlaping_K5()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test_relabel.py----------------------------------------
A:networkx.tests.test_relabel.G->nx.relabel_nodes(G, dict([(i, i - 1) for i in range(4)]), copy=False)
A:networkx.tests.test_relabel.H->relabel_nodes(G, mapping, copy=False)
A:networkx.tests.test_relabel.degH->relabel_nodes(G, mapping, copy=False).degree().values()
A:networkx.tests.test_relabel.degG->nx.relabel_nodes(G, dict([(i, i - 1) for i in range(4)]), copy=False).degree().values()
A:networkx.tests.test_relabel.K5->nx.complete_graph(4)
networkx.tests.test_TestRelabel
networkx.tests.test_TestRelabel.test_convert_node_labels_to_integers(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_copy(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_digraph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_function(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_graph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_missing(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_multidigraph(self)
networkx.tests.test_TestRelabel.test_relabel_nodes_multigraph(self)
networkx.tests.test_TestRelabel.test_relabel_toposort(self)
networkx.tests.test_relabel.TestRelabel
networkx.tests.test_relabel.TestRelabel.test_convert_node_labels_to_integers(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_copy(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_digraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_function(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_graph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_missing(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multidigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_nodes_multigraph(self)
networkx.tests.test_relabel.TestRelabel.test_relabel_toposort(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test_convert_numpy.py----------------------------------------
A:networkx.tests.test_convert_numpy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_numpy.self.G2->cycle_graph(10, create_using=nx.DiGraph())
A:networkx.tests.test_convert_numpy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_numpy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_numpy.g->cycle_graph(4)
A:networkx.tests.test_convert_numpy.e->cycle_graph(4).edges()
A:networkx.tests.test_convert_numpy.ex->zip(source, dest, weight)
A:networkx.tests.test_convert_numpy.GG->networkx.from_numpy_matrix(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_numpy.GI->create_using.__class__(A)
A:networkx.tests.test_convert_numpy.A->networkx.to_numpy_matrix(G, multigraph_weight=max)
A:networkx.tests.test_convert_numpy.P4->path_graph(4)
A:networkx.tests.test_convert_numpy.P3->path_graph(3)
A:networkx.tests.test_convert_numpy.nodelist->path_graph(3).nodes()
A:networkx.tests.test_convert_numpy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_numpy.WP4->networkx.Graph()
A:networkx.tests.test_convert_numpy.G->networkx.MultiGraph()
networkx.tests.test_convert_numpy.TestConvertNumpy(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.__init__(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.assert_equal(self,G1,G2)
networkx.tests.test_convert_numpy.TestConvertNumpy.create_weighted(self,G)
networkx.tests.test_convert_numpy.TestConvertNumpy.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_numpy.TestConvertNumpy.setupClass(cls)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_dtype(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_from_numpy_matrix_type(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_digraph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_graph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_digraph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_array(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_identity_weighted_graph_matrix(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_nodelist(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_numpy_multigraph(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_shape(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_to_numpy_recarray(self)
networkx.tests.test_convert_numpy.TestConvertNumpy.test_weight_keyword(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test_exceptions.py----------------------------------------
networkx.tests.test_exceptions.test_raises_networkx_algorithm_error()
networkx.tests.test_exceptions.test_raises_networkx_error()
networkx.tests.test_exceptions.test_raises_networkx_exception()
networkx.tests.test_exceptions.test_raises_networkx_no_path()
networkx.tests.test_exceptions.test_raises_networkx_pointless_concept()
networkx.tests.test_exceptions.test_raises_networkx_unbounded()
networkx.tests.test_exceptions.test_raises_networkx_unfeasible()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/benchmark.py----------------------------------------
A:networkx.tests.benchmark.self.class_tests->dict(((gc, '') for gc in graph_classes))
A:networkx.tests.benchmark.graph_class->self.class_tests.keys()
A:networkx.tests.benchmark.self.class_tests[GC]->Timer(test_str, setup_string)
A:networkx.tests.benchmark.column_len->max((len(G) for G in self.class_tests))
A:networkx.tests.benchmark.name->GC.ljust(column_len)
A:networkx.tests.benchmark.b->Benchmark(classes, title, runs=3, reps=1)
networkx.tests.benchmark.Benchmark(self,graph_classes,title='',test_string=None,runs=3,reps=1000)
networkx.tests.benchmark.Benchmark.__init__(self,graph_classes,title='',test_string=None,runs=3,reps=1000)
networkx.tests.benchmark.Benchmark.__setitem__(self,graph_class,some_strs)
networkx.tests.benchmark.Benchmark.run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test_convert.py----------------------------------------
A:networkx.tests.test_convert.G->Graph(e)
A:networkx.tests.test_convert.dod->to_dict_of_dicts(XGM)
A:networkx.tests.test_convert.GG->from_dict_of_lists(dol, create_using=MultiGraph())
A:networkx.tests.test_convert.GW->to_networkx_graph(dol, create_using=MultiGraph())
A:networkx.tests.test_convert.GI->MultiGraph(dol)
A:networkx.tests.test_convert.P4->path_graph(4)
A:networkx.tests.test_convert.P3->path_graph(3)
A:networkx.tests.test_convert.Gdod->Graph(dod)
A:networkx.tests.test_convert.e->Graph(e).edges()
A:networkx.tests.test_convert.ex->list(zip(source, dest, source))
A:networkx.tests.test_convert.dol->to_dict_of_lists(G)
A:networkx.tests.test_convert.(source, dest)->list(zip(*e))
A:networkx.tests.test_convert.XG->Graph()
A:networkx.tests.test_convert.XGM->MultiGraph()
A:networkx.tests.test_convert.XGS->Graph()
A:networkx.tests.test_convert.GE->from_dict_of_dicts(dod, create_using=MultiGraph(), multigraph_input=False)
A:networkx.tests.test_convert.GM->MultiGraph(G)
A:networkx.tests.test_convert.P->path_graph(4)
networkx.tests.test_TestConvert
networkx.tests.test_TestConvert.edgelists_equal(self,e1,e2)
networkx.tests.test_TestConvert.test_digraphs(self)
networkx.tests.test_TestConvert.test_directed_to_undirected(self)
networkx.tests.test_TestConvert.test_edgelists(self)
networkx.tests.test_TestConvert.test_graph(self)
networkx.tests.test_TestConvert.test_simple_graphs(self)
networkx.tests.test_TestConvert.test_with_multiedges_self_loops(self)
networkx.tests.test_convert.TestConvert
networkx.tests.test_convert.TestConvert.edgelists_equal(self,e1,e2)
networkx.tests.test_convert.TestConvert.test_digraphs(self)
networkx.tests.test_convert.TestConvert.test_directed_to_undirected(self)
networkx.tests.test_convert.TestConvert.test_edgelists(self)
networkx.tests.test_convert.TestConvert.test_graph(self)
networkx.tests.test_convert.TestConvert.test_simple_graphs(self)
networkx.tests.test_convert.TestConvert.test_with_multiedges_self_loops(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test.py----------------------------------------
A:networkx.tests.test.nx_install_dir->os.path.join(path.dirname(__file__), path.pardir)
networkx.test(verbosity=1,doctest=False,numpy=True)
networkx.tests.test.run(verbosity=1,doctest=False,numpy=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/tests/test_convert_scipy.py----------------------------------------
A:networkx.tests.test_convert_scipy.self.G1->barbell_graph(10, 3)
A:networkx.tests.test_convert_scipy.self.G2->cycle_graph(10, create_using=nx.DiGraph())
A:networkx.tests.test_convert_scipy.self.G3->self.create_weighted(nx.Graph())
A:networkx.tests.test_convert_scipy.self.G4->self.create_weighted(nx.DiGraph())
A:networkx.tests.test_convert_scipy.g->cycle_graph(4)
A:networkx.tests.test_convert_scipy.e->cycle_graph(4).edges()
A:networkx.tests.test_convert_scipy.ex->zip(source, dest, weight)
A:networkx.tests.test_convert_scipy.GG->networkx.from_scipy_sparse_matrix(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GW->networkx.to_networkx_graph(A, create_using=create_using)
A:networkx.tests.test_convert_scipy.GI->create_using.__class__(AA)
A:networkx.tests.test_convert_scipy.ACSR->networkx.to_scipy_sparse_matrix(P4, format='dok').tocsr()
A:networkx.tests.test_convert_scipy.ACOO->networkx.to_scipy_sparse_matrix(P4, format='dok').tocoo()
A:networkx.tests.test_convert_scipy.ACSC->networkx.to_scipy_sparse_matrix(P4, format='dok').tocsc()
A:networkx.tests.test_convert_scipy.AD->networkx.to_scipy_sparse_matrix(P4, format='dok').todense()
A:networkx.tests.test_convert_scipy.AA->networkx.to_scipy_sparse_matrix(P4, format='dok').toarray()
A:networkx.tests.test_convert_scipy.A->networkx.to_scipy_sparse_matrix(P4, format='dok')
A:networkx.tests.test_convert_scipy.P4->path_graph(4)
A:networkx.tests.test_convert_scipy.P3->path_graph(3)
A:networkx.tests.test_convert_scipy.nodelist->path_graph(3).nodes()
A:networkx.tests.test_convert_scipy.GA->networkx.Graph(A)
A:networkx.tests.test_convert_scipy.WP4->networkx.Graph()
networkx.tests.test_convert_scipy.TestConvertNumpy(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.__init__(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.assert_equal(self,G1,G2)
networkx.tests.test_convert_scipy.TestConvertNumpy.create_weighted(self,G)
networkx.tests.test_convert_scipy.TestConvertNumpy.identity_conversion(self,G,A,create_using)
networkx.tests.test_convert_scipy.TestConvertNumpy.setupClass(cls)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_format_keyword_fail(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_digraph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_identity_weighted_graph_matrix(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_nodelist(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_shape(self)
networkx.tests.test_convert_scipy.TestConvertNumpy.test_weight_keyword(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/external/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/external/decorator/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/external/decorator/_decorator3.py----------------------------------------
A:networkx.external.decorator._decorator3.kw->cls(func, name, signature, defaults, doc, module).keywords.copy()
A:networkx.external.decorator._decorator3.(self.args, self.varargs, self.varkw, self.defaults)->inspect.getargspec(f)
A:networkx.external.decorator._decorator3.self.annotations->getattr(f, '__annotations__', {})
A:networkx.external.decorator._decorator3.DEF->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(')
A:networkx.external.decorator._decorator3.argspec->getfullargspec(func)
A:networkx.external.decorator._decorator3.allargs->list(self.args)
A:networkx.external.decorator._decorator3.self.shortsignature->', '.join(allargs)
A:networkx.external.decorator._decorator3.self.dict->func.__dict__.copy()
A:networkx.external.decorator._decorator3.func.__doc__->getattr(self, 'doc', None)
A:networkx.external.decorator._decorator3.func.__dict__->getattr(self, 'dict', {})
A:networkx.external.decorator._decorator3.func.__defaults__->getattr(self, 'defaults', ())
A:networkx.external.decorator._decorator3.func.__kwdefaults__->getattr(self, 'kwonlydefaults', None)
A:networkx.external.decorator._decorator3.callermodule->sys._getframe(3).f_globals.get('__name__', '?')
A:networkx.external.decorator._decorator3.func.__module__->getattr(self, 'module', callermodule)
A:networkx.external.decorator._decorator3.mo->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(').match(src)
A:networkx.external.decorator._decorator3.name->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(').match(src).group(1)
A:networkx.external.decorator._decorator3.names->set([name] + [arg.strip(' *') for arg in self.shortsignature.split(',')])
A:networkx.external.decorator._decorator3.code->compile(src, '<string>', 'single')
A:networkx.external.decorator._decorator3.(name, rest)->obj.strip().split('(', 1)
A:networkx.external.decorator._decorator3.self->cls(func, name, signature, defaults, doc, module)
A:networkx.external.decorator._decorator3.ibody->'\n'.join(('    ' + line for line in body.splitlines()))
A:networkx.external.decorator._decorator3.evaldict->caller.__globals__.copy()
networkx.external.decorator.FunctionMaker(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
networkx.external.decorator.FunctionMaker.create(cls,obj,body,evaldict,defaults=None,doc=None,module=None,addsource=True,**attrs)
networkx.external.decorator.FunctionMaker.make(self,src_templ,evaldict=None,addsource=False,**attrs)
networkx.external.decorator.FunctionMaker.update(self,func,**kw)
networkx.external.decorator._decorator3.FunctionMaker(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
networkx.external.decorator._decorator3.FunctionMaker.__init__(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
networkx.external.decorator._decorator3.FunctionMaker.create(cls,obj,body,evaldict,defaults=None,doc=None,module=None,addsource=True,**attrs)
networkx.external.decorator._decorator3.FunctionMaker.make(self,src_templ,evaldict=None,addsource=False,**attrs)
networkx.external.decorator._decorator3.FunctionMaker.update(self,func,**kw)
networkx.external.decorator._decorator3.decorator(caller,func=None)
networkx.external.decorator.decorator(caller,func=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/graphmatrix.py----------------------------------------
A:networkx.linalg.graphmatrix.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.linalg.graphmatrix.nodelist->G.nodes()
A:networkx.linalg.graphmatrix.edgelist->G.edges()
A:networkx.linalg.graphmatrix.A->numpy.zeros((len(nodelist), len(edgelist)))
A:networkx.linalg.graphmatrix.node_index->dict(((node, i) for (i, node) in enumerate(nodelist)))
A:networkx.linalg.graphmatrix.wt->G[u][v].get(weight, 1)
networkx.adjacency_matrix(G,nodelist=None,weight='weight')
networkx.incidence_matrix(G,nodelist=None,edgelist=None,oriented=False,weight=None)
networkx.linalg.graphmatrix.adjacency_matrix(G,nodelist=None,weight='weight')
networkx.linalg.graphmatrix.incidence_matrix(G,nodelist=None,edgelist=None,oriented=False,weight=None)
networkx.linalg.graphmatrix.setup_module(module)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/spectrum.py----------------------------------------
A:networkx.linalg.spectrum.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
networkx.adjacency_spectrum(G,weight='weight')
networkx.laplacian_spectrum(G,weight='weight')
networkx.linalg.spectrum.adjacency_spectrum(G,weight='weight')
networkx.linalg.spectrum.laplacian_spectrum(G,weight='weight')
networkx.linalg.spectrum.setup_module(module)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/laplacianmatrix.py----------------------------------------
A:networkx.linalg.laplacianmatrix.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.linalg.laplacianmatrix.A->numpy.asarray(nx.to_numpy_matrix(G, nodelist=nodelist, weight=weight))
A:networkx.linalg.laplacianmatrix.I->numpy.identity(n)
A:networkx.linalg.laplacianmatrix.nodelist->G.nodes()
A:networkx.linalg.laplacianmatrix.n->len(nodelist)
A:networkx.linalg.laplacianmatrix.index->dict(((n, i) for (i, n) in enumerate(nodelist)))
A:networkx.linalg.laplacianmatrix.L->numpy.dot(deg, np.dot(L, deg))
A:networkx.linalg.laplacianmatrix.wt->data.get(weight, 1)
A:networkx.linalg.laplacianmatrix.d->numpy.sum(A, axis=1)
A:networkx.linalg.laplacianmatrix.osd->numpy.zeros(n)
A:networkx.linalg.laplacianmatrix.osd[i]->numpy.sqrt(1.0 / d[i])
A:networkx.linalg.laplacianmatrix.deg->numpy.zeros((n, n))
A:networkx.linalg.laplacianmatrix.deg[ui, ui]->numpy.sqrt(1.0 / totalwt)
networkx.laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.normalized_laplacian_matrix(G,nodelist=None,weight='weight')
networkx.linalg.laplacianmatrix.setup_module(module)
networkx.normalized_laplacian_matrix(G,nodelist=None,weight='weight')
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/attrmatrix.py----------------------------------------
A:networkx.linalg.attrmatrix.edge_value->_edge_value(G, edge_attr)
A:networkx.linalg.attrmatrix.node_value->_node_value(G, node_attr)
A:networkx.linalg.attrmatrix.ordering->list(set([node_value(n) for n in G]))
A:networkx.linalg.attrmatrix.N->len(ordering)
A:networkx.linalg.attrmatrix.index->dict(zip(ordering, range(N)))
A:networkx.linalg.attrmatrix.M->scipy.sparse.lil_matrix((N, N), dtype=dtype)
A:networkx.linalg.attrmatrix.seen->set([])
A:networkx.linalg.attrmatrix.norms->numpy.asarray(M.sum(axis=1)).ravel()
networkx._edge_value(G,edge_attr)
networkx._node_value(G,node_attr)
networkx.attr_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None,order=None)
networkx.attr_sparse_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None)
networkx.linalg.attrmatrix._edge_value(G,edge_attr)
networkx.linalg.attrmatrix._node_value(G,node_attr)
networkx.linalg.attrmatrix.attr_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None,order=None)
networkx.linalg.attrmatrix.attr_sparse_matrix(G,edge_attr=None,node_attr=None,normalized=False,rc_order=None,dtype=None)
networkx.linalg.attrmatrix.setup_module(module)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/tests/test_laplaican.py----------------------------------------
A:networkx.linalg.tests.test_laplaican.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_laplaican.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_laplaican.self.MG->networkx.MultiGraph(self.G)
A:networkx.linalg.tests.test_laplaican.NL->numpy.array([[3, -1, -1, -1, 0], [-1, 2, -1, 0, 0], [-1, -1, 2, 0, 0], [-1, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_laplaican.GL->numpy.array([[1.0, -0.408, -0.408, -0.577, 0.0], [-0.408, 1.0, -0.5, 0.0, 0.0], [-0.408, -0.5, 1.0, 0.0, 0.0], [-0.577, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]])
networkx.linalg.tests.test_laplaican.TestLaplacian(object)
networkx.linalg.tests.test_laplaican.TestLaplacian.setUp(self)
networkx.linalg.tests.test_laplaican.TestLaplacian.setupClass(cls)
networkx.linalg.tests.test_laplaican.TestLaplacian.test_generalized_laplacian(self)
networkx.linalg.tests.test_laplaican.TestLaplacian.test_laplacian(self)
networkx.linalg.tests.test_laplaican.TestLaplacian.test_normalized_laplacian(self)
networkx.tests.test_laplaican.TestLaplacian(object)
networkx.tests.test_laplaican.TestLaplacian.setUp(self)
networkx.tests.test_laplaican.TestLaplacian.setupClass(cls)
networkx.tests.test_laplaican.TestLaplacian.test_generalized_laplacian(self)
networkx.tests.test_laplaican.TestLaplacian.test_laplacian(self)
networkx.tests.test_laplaican.TestLaplacian.test_normalized_laplacian(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/tests/test_graphmatrix.py----------------------------------------
A:networkx.linalg.tests.test_graphmatrix.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_graphmatrix.self.OI->numpy.array([[-1, -1, -1, 0], [1, 0, 0, -1], [0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.A->numpy.array([[0, 1, 1, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_graphmatrix.self.WA->numpy.array([[0, 0.5, 0.5, 0.5, 0], [0.5, 0, 0.5, 0, 0], [0.5, 0.5, 0, 0, 0], [0.5, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.MG->networkx.MultiGraph(self.G)
A:networkx.linalg.tests.test_graphmatrix.self.MG2->self.MG.copy()
A:networkx.linalg.tests.test_graphmatrix.self.MG2A->numpy.array([[0, 2, 1, 1, 0], [2, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.self.MGOI->numpy.array([[-1, -1, -1, -1, 0], [1, 1, 0, 0, -1], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
A:networkx.linalg.tests.test_graphmatrix.WMG->networkx.MultiGraph(self.WG)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix(object)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setUp(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.setupClass(cls)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_adjacency_matrix(self)
networkx.linalg.tests.test_graphmatrix.TestGraphMatrix.test_incidence_matrix(self)
networkx.tests.test_TestGraphMatrix(object)
networkx.tests.test_TestGraphMatrix.setUp(self)
networkx.tests.test_TestGraphMatrix.setupClass(cls)
networkx.tests.test_TestGraphMatrix.test_adjacency_matrix(self)
networkx.tests.test_TestGraphMatrix.test_incidence_matrix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/linalg/tests/test_spectrum.py----------------------------------------
A:networkx.linalg.tests.test_spectrum.self.G->havel_hakimi_graph(deg)
A:networkx.linalg.tests.test_spectrum.self.P->networkx.path_graph(3)
A:networkx.linalg.tests.test_spectrum.self.WG->networkx.Graph(((u, v, {'weight': 0.5, 'other': 0.3}) for (u, v) in self.G.edges_iter()))
A:networkx.linalg.tests.test_spectrum.evals->numpy.array([-numpy.sqrt(2), 0, numpy.sqrt(2)])
A:networkx.linalg.tests.test_spectrum.e->sorted(nx.adjacency_spectrum(self.P))
networkx.linalg.tests.test_spectrum.TestSpectrum(object)
networkx.linalg.tests.test_spectrum.TestSpectrum.setUp(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.setupClass(cls)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_adjacency_spectrum(self)
networkx.linalg.tests.test_spectrum.TestSpectrum.test_laplacian_spectrum(self)
networkx.tests.test_TestSpectrum(object)
networkx.tests.test_TestSpectrum.setUp(self)
networkx.tests.test_TestSpectrum.setupClass(cls)
networkx.tests.test_TestSpectrum.test_adjacency_spectrum(self)
networkx.tests.test_TestSpectrum.test_laplacian_spectrum(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/digraph.py----------------------------------------
A:networkx.classes.digraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.digraph.newdict->attr.copy()
A:networkx.classes.digraph.self.node[n]->attr.copy()
A:networkx.classes.digraph.datadict->self.adj[u].get(v, {})
A:networkx.classes.digraph.ne->len(e)
A:networkx.classes.digraph.nodes_nbrs->self.succ.items()
A:networkx.classes.digraph.H->self.__class__()
A:networkx.classes.digraph.H.graph->deepcopy(self.graph)
A:networkx.classes.digraph.H.node->deepcopy(self.node)
A:networkx.classes.digraph.bunch->self.nbunch_iter(nbunch)
networkx.DiGraph(self,data=None,**attr)
networkx.DiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.DiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.DiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.DiGraph.add_nodes_from(self,nodes,**attr)
networkx.DiGraph.clear(self)
networkx.DiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.edges_iter(self,nbunch=None,data=False)
networkx.DiGraph.has_predecessor(self,u,v)
networkx.DiGraph.has_successor(self,u,v)
networkx.DiGraph.in_degree(self,nbunch=None,weight=None)
networkx.DiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.in_edges(self,nbunch=None,data=False)
networkx.DiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.DiGraph.is_directed(self)
networkx.DiGraph.is_multigraph(self)
networkx.DiGraph.out_degree(self,nbunch=None,weight=None)
networkx.DiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.DiGraph.predecessors(self,n)
networkx.DiGraph.predecessors_iter(self,n)
networkx.DiGraph.remove_edge(self,u,v)
networkx.DiGraph.remove_edges_from(self,ebunch)
networkx.DiGraph.remove_node(self,n)
networkx.DiGraph.remove_nodes_from(self,nbunch)
networkx.DiGraph.reverse(self,copy=True)
networkx.DiGraph.subgraph(self,nbunch)
networkx.DiGraph.successors(self,n)
networkx.DiGraph.successors_iter(self,n)
networkx.DiGraph.to_directed(self)
networkx.DiGraph.to_undirected(self,reciprocal=False)
networkx.classes.digraph.DiGraph(self,data=None,**attr)
networkx.classes.digraph.DiGraph.__init__(self,data=None,**attr)
networkx.classes.digraph.DiGraph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.digraph.DiGraph.add_nodes_from(self,nodes,**attr)
networkx.classes.digraph.DiGraph.clear(self)
networkx.classes.digraph.DiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.edges_iter(self,nbunch=None,data=False)
networkx.classes.digraph.DiGraph.has_predecessor(self,u,v)
networkx.classes.digraph.DiGraph.has_successor(self,u,v)
networkx.classes.digraph.DiGraph.in_degree(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.in_edges(self,nbunch=None,data=False)
networkx.classes.digraph.DiGraph.in_edges_iter(self,nbunch=None,data=False)
networkx.classes.digraph.DiGraph.is_directed(self)
networkx.classes.digraph.DiGraph.is_multigraph(self)
networkx.classes.digraph.DiGraph.out_degree(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.digraph.DiGraph.predecessors(self,n)
networkx.classes.digraph.DiGraph.predecessors_iter(self,n)
networkx.classes.digraph.DiGraph.remove_edge(self,u,v)
networkx.classes.digraph.DiGraph.remove_edges_from(self,ebunch)
networkx.classes.digraph.DiGraph.remove_node(self,n)
networkx.classes.digraph.DiGraph.remove_nodes_from(self,nbunch)
networkx.classes.digraph.DiGraph.reverse(self,copy=True)
networkx.classes.digraph.DiGraph.subgraph(self,nbunch)
networkx.classes.digraph.DiGraph.successors(self,n)
networkx.classes.digraph.DiGraph.successors_iter(self,n)
networkx.classes.digraph.DiGraph.to_directed(self)
networkx.classes.digraph.DiGraph.to_undirected(self,reciprocal=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/multigraph.py----------------------------------------
A:networkx.classes.multigraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.multigraph.key->len(keydict)
A:networkx.classes.multigraph.datadict->self.adj[u].get(v, {}).get(key, {})
A:networkx.classes.multigraph.ne->len(e)
A:networkx.classes.multigraph.keydict->self.adj[u].get(v, {})
A:networkx.classes.multigraph.nodes_nbrs->self.adj.items()
A:networkx.classes.multigraph.deg->sum([d.get(weight, 1) for data in nbrs.values() for d in data.values()])
A:networkx.classes.multigraph.G->MultiDiGraph()
A:networkx.classes.multigraph.G.graph->deepcopy(self.graph)
A:networkx.classes.multigraph.G.node->deepcopy(self.node)
A:networkx.classes.multigraph.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.multigraph.H->self.__class__()
A:networkx.classes.multigraph.ed->edgedict.copy()
networkx.MultiGraph(Graph)
networkx.MultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.MultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.MultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.MultiGraph.edges(self,nbunch=None,data=False,keys=False)
networkx.MultiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.MultiGraph.has_edge(self,u,v,key=None)
networkx.MultiGraph.is_directed(self)
networkx.MultiGraph.is_multigraph(self)
networkx.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.MultiGraph.remove_edge(self,u,v,key=None)
networkx.MultiGraph.remove_edges_from(self,ebunch)
networkx.MultiGraph.selfloop_edges(self,data=False,keys=False)
networkx.MultiGraph.subgraph(self,nbunch)
networkx.MultiGraph.to_directed(self)
networkx.classes.multigraph.MultiGraph(Graph)
networkx.classes.multigraph.MultiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.multigraph.MultiGraph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.multigraph.MultiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.multigraph.MultiGraph.edges(self,nbunch=None,data=False,keys=False)
networkx.classes.multigraph.MultiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.multigraph.MultiGraph.get_edge_data(self,u,v,key=None,default=None)
networkx.classes.multigraph.MultiGraph.has_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.is_directed(self)
networkx.classes.multigraph.MultiGraph.is_multigraph(self)
networkx.classes.multigraph.MultiGraph.number_of_edges(self,u=None,v=None)
networkx.classes.multigraph.MultiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multigraph.MultiGraph.remove_edges_from(self,ebunch)
networkx.classes.multigraph.MultiGraph.selfloop_edges(self,data=False,keys=False)
networkx.classes.multigraph.MultiGraph.subgraph(self,nbunch)
networkx.classes.multigraph.MultiGraph.to_directed(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/graph.py----------------------------------------
A:networkx.classes.graph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.graph.newdict->attr.copy()
A:networkx.classes.graph.self.node[n]->attr.copy()
A:networkx.classes.graph.nbrs->list(adj[n].keys())
A:networkx.classes.graph.datadict->self.adj[u].get(v, {})
A:networkx.classes.graph.ne->len(e)
A:networkx.classes.graph.nodes_nbrs->self.adj.items()
A:networkx.classes.graph.G->DiGraph()
A:networkx.classes.graph.G.graph->deepcopy(self.graph)
A:networkx.classes.graph.G.node->deepcopy(self.node)
A:networkx.classes.graph.bunch->bunch_iter(nbunch, self.adj)
A:networkx.classes.graph.H->self.__class__()
A:networkx.classes.graph.nlist->list(nodes)
A:networkx.classes.graph.edges->zip(nlist, nlist[1:] + [nlist[0]])
networkx.Graph(self,data=None,**attr)
networkx.Graph.__contains__(self,n)
networkx.Graph.__getitem__(self,n)
networkx.Graph.__iter__(self)
networkx.Graph.__len__(self)
networkx.Graph.__str__(self)
networkx.Graph.add_cycle(self,nodes,**attr)
networkx.Graph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.Graph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.Graph.add_node(self,n,attr_dict=None,**attr)
networkx.Graph.add_nodes_from(self,nodes,**attr)
networkx.Graph.add_path(self,nodes,**attr)
networkx.Graph.add_star(self,nodes,**attr)
networkx.Graph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.Graph.adjacency_iter(self)
networkx.Graph.adjacency_list(self)
networkx.Graph.clear(self)
networkx.Graph.copy(self)
networkx.Graph.degree(self,nbunch=None,weight=None)
networkx.Graph.degree_iter(self,nbunch=None,weight=None)
networkx.Graph.edges(self,nbunch=None,data=False)
networkx.Graph.edges_iter(self,nbunch=None,data=False)
networkx.Graph.get_edge_data(self,u,v,default=None)
networkx.Graph.has_edge(self,u,v)
networkx.Graph.has_node(self,n)
networkx.Graph.is_directed(self)
networkx.Graph.is_multigraph(self)
networkx.Graph.name(self)
networkx.Graph.name(self,s)
networkx.Graph.nbunch_iter(self,nbunch=None)
networkx.Graph.neighbors(self,n)
networkx.Graph.neighbors_iter(self,n)
networkx.Graph.nodes(self,data=False)
networkx.Graph.nodes_iter(self,data=False)
networkx.Graph.nodes_with_selfloops(self)
networkx.Graph.number_of_edges(self,u=None,v=None)
networkx.Graph.number_of_nodes(self)
networkx.Graph.number_of_selfloops(self)
networkx.Graph.order(self)
networkx.Graph.remove_edge(self,u,v)
networkx.Graph.remove_edges_from(self,ebunch)
networkx.Graph.remove_node(self,n)
networkx.Graph.remove_nodes_from(self,nodes)
networkx.Graph.selfloop_edges(self,data=False)
networkx.Graph.size(self,weight=None)
networkx.Graph.subgraph(self,nbunch)
networkx.Graph.to_directed(self)
networkx.Graph.to_undirected(self)
networkx.classes.graph.Graph(self,data=None,**attr)
networkx.classes.graph.Graph.__contains__(self,n)
networkx.classes.graph.Graph.__getitem__(self,n)
networkx.classes.graph.Graph.__init__(self,data=None,**attr)
networkx.classes.graph.Graph.__iter__(self)
networkx.classes.graph.Graph.__len__(self)
networkx.classes.graph.Graph.__str__(self)
networkx.classes.graph.Graph.add_cycle(self,nodes,**attr)
networkx.classes.graph.Graph.add_edge(self,u,v,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_edges_from(self,ebunch,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_node(self,n,attr_dict=None,**attr)
networkx.classes.graph.Graph.add_nodes_from(self,nodes,**attr)
networkx.classes.graph.Graph.add_path(self,nodes,**attr)
networkx.classes.graph.Graph.add_star(self,nodes,**attr)
networkx.classes.graph.Graph.add_weighted_edges_from(self,ebunch,weight='weight',**attr)
networkx.classes.graph.Graph.adjacency_iter(self)
networkx.classes.graph.Graph.adjacency_list(self)
networkx.classes.graph.Graph.clear(self)
networkx.classes.graph.Graph.copy(self)
networkx.classes.graph.Graph.degree(self,nbunch=None,weight=None)
networkx.classes.graph.Graph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.graph.Graph.edges(self,nbunch=None,data=False)
networkx.classes.graph.Graph.edges_iter(self,nbunch=None,data=False)
networkx.classes.graph.Graph.get_edge_data(self,u,v,default=None)
networkx.classes.graph.Graph.has_edge(self,u,v)
networkx.classes.graph.Graph.has_node(self,n)
networkx.classes.graph.Graph.is_directed(self)
networkx.classes.graph.Graph.is_multigraph(self)
networkx.classes.graph.Graph.name(self)
networkx.classes.graph.Graph.name(self,s)
networkx.classes.graph.Graph.nbunch_iter(self,nbunch=None)
networkx.classes.graph.Graph.neighbors(self,n)
networkx.classes.graph.Graph.neighbors_iter(self,n)
networkx.classes.graph.Graph.nodes(self,data=False)
networkx.classes.graph.Graph.nodes_iter(self,data=False)
networkx.classes.graph.Graph.nodes_with_selfloops(self)
networkx.classes.graph.Graph.number_of_edges(self,u=None,v=None)
networkx.classes.graph.Graph.number_of_nodes(self)
networkx.classes.graph.Graph.number_of_selfloops(self)
networkx.classes.graph.Graph.order(self)
networkx.classes.graph.Graph.remove_edge(self,u,v)
networkx.classes.graph.Graph.remove_edges_from(self,ebunch)
networkx.classes.graph.Graph.remove_node(self,n)
networkx.classes.graph.Graph.remove_nodes_from(self,nodes)
networkx.classes.graph.Graph.selfloop_edges(self,data=False)
networkx.classes.graph.Graph.size(self,weight=None)
networkx.classes.graph.Graph.subgraph(self,nbunch)
networkx.classes.graph.Graph.to_directed(self)
networkx.classes.graph.Graph.to_undirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/multidigraph.py----------------------------------------
A:networkx.classes.multidigraph.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.multidigraph.key->len(keydict)
A:networkx.classes.multidigraph.datadict->keydict.get(key, {})
A:networkx.classes.multidigraph.nodes_nbrs->self.succ.items()
A:networkx.classes.multidigraph.indeg->sum([len(data) for data in pred.values()])
A:networkx.classes.multidigraph.outdeg->sum([len(data) for data in succ.values()])
A:networkx.classes.multidigraph.deg->sum([d.get(weight, 1) for data in succ.values() for d in data.values()])
A:networkx.classes.multidigraph.H->self.__class__(name='Reverse of (%s)' % self.name)
A:networkx.classes.multidigraph.H.graph->deepcopy(self.graph)
A:networkx.classes.multidigraph.H.node->deepcopy(self.node)
A:networkx.classes.multidigraph.bunch->self.nbunch_iter(nbunch)
A:networkx.classes.multidigraph.ed->edgedict.copy()
networkx.MultiDiGraph(MultiGraph,DiGraph)
networkx.MultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.MultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.MultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.MultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.MultiDiGraph.is_directed(self)
networkx.MultiDiGraph.is_multigraph(self)
networkx.MultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.MultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.MultiDiGraph.reverse(self,copy=True)
networkx.MultiDiGraph.subgraph(self,nbunch)
networkx.MultiDiGraph.to_directed(self)
networkx.MultiDiGraph.to_undirected(self,reciprocal=False)
networkx.classes.multidigraph.MultiDiGraph(MultiGraph,DiGraph)
networkx.classes.multidigraph.MultiDiGraph.add_edge(self,u,v,key=None,attr_dict=None,**attr)
networkx.classes.multidigraph.MultiDiGraph.degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.multidigraph.MultiDiGraph.in_degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.in_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.multidigraph.MultiDiGraph.in_edges_iter(self,nbunch=None,data=False,keys=False)
networkx.classes.multidigraph.MultiDiGraph.is_directed(self)
networkx.classes.multidigraph.MultiDiGraph.is_multigraph(self)
networkx.classes.multidigraph.MultiDiGraph.out_degree_iter(self,nbunch=None,weight=None)
networkx.classes.multidigraph.MultiDiGraph.out_edges(self,nbunch=None,keys=False,data=False)
networkx.classes.multidigraph.MultiDiGraph.remove_edge(self,u,v,key=None)
networkx.classes.multidigraph.MultiDiGraph.reverse(self,copy=True)
networkx.classes.multidigraph.MultiDiGraph.subgraph(self,nbunch)
networkx.classes.multidigraph.MultiDiGraph.to_directed(self)
networkx.classes.multidigraph.MultiDiGraph.to_undirected(self,reciprocal=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/function.py----------------------------------------
A:networkx.classes.function.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.classes.function.n->number_of_nodes(G)
A:networkx.classes.function.m->number_of_edges(G)
A:networkx.classes.function.degseq->list(G.degree().values())
A:networkx.classes.function.H->G.__class__()
A:networkx.classes.function.nnodes->G.number_of_nodes()
A:networkx.classes.function.s->sum(G.degree().values())
networkx.classes.function.create_empty_copy(G,with_nodes=True)
networkx.classes.function.degree(G,nbunch=None,weight=None)
networkx.classes.function.degree_histogram(G)
networkx.classes.function.density(G)
networkx.classes.function.edges(G,nbunch=None)
networkx.classes.function.edges_iter(G,nbunch=None)
networkx.classes.function.freeze(G)
networkx.classes.function.get_edge_attributes(G,name)
networkx.classes.function.get_node_attributes(G,name)
networkx.classes.function.info(G,n=None)
networkx.classes.function.is_directed(G)
networkx.classes.function.is_frozen(G)
networkx.classes.function.neighbors(G,n)
networkx.classes.function.nodes(G)
networkx.classes.function.nodes_iter(G)
networkx.classes.function.number_of_edges(G)
networkx.classes.function.number_of_nodes(G)
networkx.classes.function.set_edge_attributes(G,name,attributes)
networkx.classes.function.set_node_attributes(G,name,attributes)
networkx.classes.function.subgraph(G,nbunch)
networkx.create_empty_copy(G,with_nodes=True)
networkx.degree(G,nbunch=None,weight=None)
networkx.degree_histogram(G)
networkx.density(G)
networkx.edges(G,nbunch=None)
networkx.edges_iter(G,nbunch=None)
networkx.freeze(G)
networkx.get_edge_attributes(G,name)
networkx.get_node_attributes(G,name)
networkx.info(G,n=None)
networkx.is_directed(G)
networkx.is_frozen(G)
networkx.neighbors(G,n)
networkx.nodes(G)
networkx.nodes_iter(G)
networkx.number_of_edges(G)
networkx.number_of_nodes(G)
networkx.set_edge_attributes(G,name,attributes)
networkx.set_node_attributes(G,name,attributes)
networkx.subgraph(G,nbunch)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_multidigraph.py----------------------------------------
A:networkx.classes.tests.test_multidigraph.H->self.Graph().to_undirected()
A:networkx.classes.tests.test_multidigraph.G->self.Graph()
A:networkx.classes.tests.test_multidigraph.R->self.Graph().reverse(copy=False)
A:networkx.classes.tests.test_multidigraph.self.K3->self.Graph()
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester(BaseMultiGraphTester)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow(self,H,G)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_size(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors_iter(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph(BaseMultiDiGraphTester,TestMultiGraph)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.setUp(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester(BaseMultiGraphTester)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.is_deep(self,H,G)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.is_shallow(self,H,G)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_data(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_predecessor(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_has_successor(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_in_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_degree_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_out_edges_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_predecessors_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_copy(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_reverse_nocopy(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_size(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_successors_iter(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected(self)
networkx.tests.test_multidigraph.BaseMultiDiGraphTester.test_to_undirected_reciprocal(self)
networkx.tests.test_multidigraph.TestMultiDiGraph(BaseMultiDiGraphTester,TestMultiGraph)
networkx.tests.test_multidigraph.TestMultiDiGraph.setUp(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_add_edge(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_add_edges_from(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_edge(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_edges_from(self)
networkx.tests.test_multidigraph.TestMultiDiGraph.test_remove_multiedge(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_graph.py----------------------------------------
A:networkx.classes.tests.test_graph.G->self.Graph()
A:networkx.classes.tests.test_graph.bunch->self.Graph().nbunch_iter([0, 1, 2, {}])
A:networkx.classes.tests.test_graph.H->self.Graph()
A:networkx.classes.tests.test_graph.self.K3->self.Graph()
networkx.classes.tests.test_graph.BaseAttrGraphTester(BaseGraphTester)
networkx.classes.tests.test_graph.BaseAttrGraphTester.add_attributes(self,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.graphs_equal(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_deepcopy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.is_shallow_copy(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr(self,H,G)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_attr_dict_not_dict(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_copy_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr3(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_graph_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_name(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_node_attr2(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_subgraph(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_directed(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_to_undirected(self)
networkx.classes.tests.test_graph.BaseAttrGraphTester.test_weighted_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester(object)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_cycle(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_path(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_add_star(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_adjacency_list(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_contains(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_degree_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_edges(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_edges_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_edge(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_has_node(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nbunch_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_neighbors_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nodes(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_nodes_iter(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_order(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloop_degree(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_selfloops(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_size(self)
networkx.classes.tests.test_graph.BaseGraphTester.test_weighted_degree(self)
networkx.classes.tests.test_graph.TestGraph(BaseAttrGraphTester)
networkx.classes.tests.test_graph.TestGraph.setUp(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_add_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_add_node(self)
networkx.classes.tests.test_graph.TestGraph.test_add_nodes_from(self)
networkx.classes.tests.test_graph.TestGraph.test_adjacency_iter(self)
networkx.classes.tests.test_graph.TestGraph.test_clear(self)
networkx.classes.tests.test_graph.TestGraph.test_data_input(self)
networkx.classes.tests.test_graph.TestGraph.test_edges_data(self)
networkx.classes.tests.test_graph.TestGraph.test_get_edge_data(self)
networkx.classes.tests.test_graph.TestGraph.test_getitem(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edge(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_edges_from(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_node(self)
networkx.classes.tests.test_graph.TestGraph.test_remove_nodes_from(self)
networkx.tests.test_graph.BaseAttrGraphTester(BaseGraphTester)
networkx.tests.test_graph.BaseAttrGraphTester.add_attributes(self,G)
networkx.tests.test_graph.BaseAttrGraphTester.deep_copy_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_edge_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_graph_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.deepcopy_node_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.different_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.graphs_equal(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.is_deepcopy(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.is_shallow_copy(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.same_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_attrdict(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_graph_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.shallow_copy_node_attr(self,H,G)
networkx.tests.test_graph.BaseAttrGraphTester.test_attr_dict_not_dict(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_copy(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_copy_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr2(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr3(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_edge_attr4(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_graph_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_name(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_node_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_node_attr2(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_selfloops_attr(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_subgraph(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_to_directed(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_to_undirected(self)
networkx.tests.test_graph.BaseAttrGraphTester.test_weighted_degree(self)
networkx.tests.test_graph.BaseGraphTester(object)
networkx.tests.test_graph.BaseGraphTester.test_add_cycle(self)
networkx.tests.test_graph.BaseGraphTester.test_add_path(self)
networkx.tests.test_graph.BaseGraphTester.test_add_star(self)
networkx.tests.test_graph.BaseGraphTester.test_adjacency_list(self)
networkx.tests.test_graph.BaseGraphTester.test_contains(self)
networkx.tests.test_graph.BaseGraphTester.test_degree(self)
networkx.tests.test_graph.BaseGraphTester.test_degree_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_edges(self)
networkx.tests.test_graph.BaseGraphTester.test_edges_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_has_edge(self)
networkx.tests.test_graph.BaseGraphTester.test_has_node(self)
networkx.tests.test_graph.BaseGraphTester.test_nbunch_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_neighbors(self)
networkx.tests.test_graph.BaseGraphTester.test_neighbors_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_nodes(self)
networkx.tests.test_graph.BaseGraphTester.test_nodes_iter(self)
networkx.tests.test_graph.BaseGraphTester.test_order(self)
networkx.tests.test_graph.BaseGraphTester.test_selfloop_degree(self)
networkx.tests.test_graph.BaseGraphTester.test_selfloops(self)
networkx.tests.test_graph.BaseGraphTester.test_size(self)
networkx.tests.test_graph.BaseGraphTester.test_weighted_degree(self)
networkx.tests.test_graph.TestGraph(BaseAttrGraphTester)
networkx.tests.test_graph.TestGraph.setUp(self)
networkx.tests.test_graph.TestGraph.test_add_edge(self)
networkx.tests.test_graph.TestGraph.test_add_edges_from(self)
networkx.tests.test_graph.TestGraph.test_add_node(self)
networkx.tests.test_graph.TestGraph.test_add_nodes_from(self)
networkx.tests.test_graph.TestGraph.test_adjacency_iter(self)
networkx.tests.test_graph.TestGraph.test_clear(self)
networkx.tests.test_graph.TestGraph.test_data_input(self)
networkx.tests.test_graph.TestGraph.test_edges_data(self)
networkx.tests.test_graph.TestGraph.test_get_edge_data(self)
networkx.tests.test_graph.TestGraph.test_getitem(self)
networkx.tests.test_graph.TestGraph.test_remove_edge(self)
networkx.tests.test_graph.TestGraph.test_remove_edges_from(self)
networkx.tests.test_graph.TestGraph.test_remove_node(self)
networkx.tests.test_graph.TestGraph.test_remove_nodes_from(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_function.py----------------------------------------
A:networkx.classes.tests.test_function.self.G->networkx.Graph({0: [1, 2, 3], 1: [1, 2, 0], 4: []}, name='Test')
A:networkx.classes.tests.test_function.self.Gnodes->list(range(5))
A:networkx.classes.tests.test_function.self.DG->networkx.DiGraph({0: [1, 2, 3], 1: [1, 2, 0], 4: []})
A:networkx.classes.tests.test_function.self.DGnodes->list(range(5))
A:networkx.classes.tests.test_function.G->networkx.DiGraph(name='path_graph(5)')
A:networkx.classes.tests.test_function.info->networkx.info(G, n=1)
A:networkx.classes.tests.test_function.expected_graph_info->'\n'.join(['Name: path_graph(5)', 'Type: DiGraph', 'Number of nodes: 5', 'Number of edges: 4', 'Average in degree:   0.8000', 'Average out degree:   0.8000'])
A:networkx.classes.tests.test_function.expected_node_info->'\n'.join(['Node 1 has the following properties:', 'Degree: 2', 'Neighbors: 2'])
networkx.classes.tests.test_function.TestFunction(object)
networkx.classes.tests.test_function.TestFunction.setUp(self)
networkx.classes.tests.test_function.TestFunction.test_create_empty_copy(self)
networkx.classes.tests.test_function.TestFunction.test_degree(self)
networkx.classes.tests.test_function.TestFunction.test_degree_histogram(self)
networkx.classes.tests.test_function.TestFunction.test_density(self)
networkx.classes.tests.test_function.TestFunction.test_edges(self)
networkx.classes.tests.test_function.TestFunction.test_edges_iter(self)
networkx.classes.tests.test_function.TestFunction.test_freeze(self)
networkx.classes.tests.test_function.TestFunction.test_info(self)
networkx.classes.tests.test_function.TestFunction.test_info_digraph(self)
networkx.classes.tests.test_function.TestFunction.test_is_directed(self)
networkx.classes.tests.test_function.TestFunction.test_is_frozen(self)
networkx.classes.tests.test_function.TestFunction.test_neighbors(self)
networkx.classes.tests.test_function.TestFunction.test_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_nodes_iter(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_edges(self)
networkx.classes.tests.test_function.TestFunction.test_number_of_nodes(self)
networkx.classes.tests.test_function.TestFunction.test_subgraph(self)
networkx.tests.test_TestFunction(object)
networkx.tests.test_TestFunction.setUp(self)
networkx.tests.test_TestFunction.test_create_empty_copy(self)
networkx.tests.test_TestFunction.test_degree(self)
networkx.tests.test_TestFunction.test_degree_histogram(self)
networkx.tests.test_TestFunction.test_density(self)
networkx.tests.test_TestFunction.test_edges(self)
networkx.tests.test_TestFunction.test_edges_iter(self)
networkx.tests.test_TestFunction.test_freeze(self)
networkx.tests.test_TestFunction.test_info(self)
networkx.tests.test_TestFunction.test_info_digraph(self)
networkx.tests.test_TestFunction.test_is_directed(self)
networkx.tests.test_TestFunction.test_is_frozen(self)
networkx.tests.test_TestFunction.test_neighbors(self)
networkx.tests.test_TestFunction.test_nodes(self)
networkx.tests.test_TestFunction.test_nodes_iter(self)
networkx.tests.test_TestFunction.test_number_of_edges(self)
networkx.tests.test_TestFunction.test_number_of_nodes(self)
networkx.tests.test_TestFunction.test_subgraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_graph_historical.py----------------------------------------
networkx.classes.tests.test_graph_historical.TestGraphHistorical(HistoricalTests)
networkx.classes.tests.test_graph_historical.TestGraphHistorical.setUp(self)
networkx.tests.test_graph_historical.TestGraphHistorical(HistoricalTests)
networkx.tests.test_graph_historical.TestGraphHistorical.setUp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/historical_tests.py----------------------------------------
A:networkx.classes.tests.historical_tests.self.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.self.P1->cnlti(nx.path_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.self.P3->cnlti(nx.path_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.self.P10->cnlti(nx.path_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.self.K1->cnlti(nx.complete_graph(1), first_label=1)
A:networkx.classes.tests.historical_tests.self.K3->cnlti(nx.complete_graph(3), first_label=1)
A:networkx.classes.tests.historical_tests.self.K4->cnlti(nx.complete_graph(4), first_label=1)
A:networkx.classes.tests.historical_tests.self.K5->cnlti(nx.complete_graph(5), first_label=1)
A:networkx.classes.tests.historical_tests.self.K10->cnlti(nx.complete_graph(10), first_label=1)
A:networkx.classes.tests.historical_tests.G->networkx.null_graph()
A:networkx.classes.tests.historical_tests.H->self.G()
A:networkx.classes.tests.historical_tests.nbunch->set('ABCDEFGHIJKL')
A:networkx.classes.tests.historical_tests.n_iter->self.P3.nodes_iter()
A:networkx.classes.tests.historical_tests.G1->self.G()
A:networkx.classes.tests.historical_tests.P3->networkx.path_graph(3)
A:networkx.classes.tests.historical_tests.P5->networkx.path_graph(5)
A:networkx.classes.tests.historical_tests.null->networkx.null_graph()
A:networkx.classes.tests.historical_tests.SG->networkx.null_graph().subgraph(['A', 'B', 'D'])
A:networkx.classes.tests.historical_tests.DG->networkx.null_graph().to_directed()
A:networkx.classes.tests.historical_tests.UG->networkx.null_graph().to_undirected()
A:networkx.classes.tests.historical_tests.nullgraph->networkx.null_graph()
A:networkx.classes.tests.historical_tests.E5->networkx.empty_graph(5)
A:networkx.classes.tests.historical_tests.E10->networkx.empty_graph(10)
A:networkx.classes.tests.historical_tests.K1->networkx.complete_graph(1)
A:networkx.classes.tests.historical_tests.K3->networkx.complete_graph(3)
A:networkx.classes.tests.historical_tests.K5->networkx.complete_graph(5)
networkx.classes.tests.historical_tests.HistoricalTests(object)
networkx.classes.tests.historical_tests.HistoricalTests.setUp(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_edges_from3(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_nodes_from(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_add_remove_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_complete_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_contains(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_copy(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree2(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_degree_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_edges_iter_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_edges_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_empty_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_iterators(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_name(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_dict(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_graph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_list(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_is_set(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nbunch_iterator(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_neighbors(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_node_tuple_error(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_nonhashable_node(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_null_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_order_size(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_remove_edge(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_self_loop(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_subgraph_nbunch(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_directed(self)
networkx.classes.tests.historical_tests.HistoricalTests.test_to_undirected(self)
networkx.tests.historical_tests.HistoricalTests(object)
networkx.tests.historical_tests.HistoricalTests.setUp(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edge(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from2(self)
networkx.tests.historical_tests.HistoricalTests.test_add_edges_from3(self)
networkx.tests.historical_tests.HistoricalTests.test_add_nodes_from(self)
networkx.tests.historical_tests.HistoricalTests.test_add_remove(self)
networkx.tests.historical_tests.HistoricalTests.test_add_remove_node(self)
networkx.tests.historical_tests.HistoricalTests.test_complete_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_contains(self)
networkx.tests.historical_tests.HistoricalTests.test_copy(self)
networkx.tests.historical_tests.HistoricalTests.test_degree(self)
networkx.tests.historical_tests.HistoricalTests.test_degree2(self)
networkx.tests.historical_tests.HistoricalTests.test_degree_graph(self)
networkx.tests.historical_tests.HistoricalTests.test_edges_iter_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_edges_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_empty_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_iterators(self)
networkx.tests.historical_tests.HistoricalTests.test_name(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_dict(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_graph(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_is_list(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_is_set(self)
networkx.tests.historical_tests.HistoricalTests.test_nbunch_iterator(self)
networkx.tests.historical_tests.HistoricalTests.test_neighbors(self)
networkx.tests.historical_tests.HistoricalTests.test_node_tuple_error(self)
networkx.tests.historical_tests.HistoricalTests.test_nonhashable_node(self)
networkx.tests.historical_tests.HistoricalTests.test_null(self)
networkx.tests.historical_tests.HistoricalTests.test_null_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_order_size(self)
networkx.tests.historical_tests.HistoricalTests.test_remove_edge(self)
networkx.tests.historical_tests.HistoricalTests.test_self_loop(self)
networkx.tests.historical_tests.HistoricalTests.test_subgraph(self)
networkx.tests.historical_tests.HistoricalTests.test_subgraph_nbunch(self)
networkx.tests.historical_tests.HistoricalTests.test_to_directed(self)
networkx.tests.historical_tests.HistoricalTests.test_to_undirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_multigraph.py----------------------------------------
A:networkx.classes.tests.test_multigraph.HH->G.to_directed().copy()
A:networkx.classes.tests.test_multigraph.H->self.Graph().to_directed()
A:networkx.classes.tests.test_multigraph.G->self.Graph()
A:networkx.classes.tests.test_multigraph.self.K3->self.Graph()
networkx.classes.tests.test_multigraph.BaseMultiGraphTester(BaseAttrGraphTester)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.different_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.same_attrdict(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_adjacency_iter(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_has_edge(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_selfloops2(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_directed(self)
networkx.classes.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected(self)
networkx.classes.tests.test_multigraph.TestMultiGraph(BaseMultiGraphTester,TestGraph)
networkx.classes.tests.test_multigraph.TestMultiGraph.setUp(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_add_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_data_input(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_getitem(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_edges_from(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_multiedge(self)
networkx.classes.tests.test_multigraph.TestMultiGraph.test_remove_node(self)
networkx.tests.test_multigraph.BaseMultiGraphTester(BaseAttrGraphTester)
networkx.tests.test_multigraph.BaseMultiGraphTester.deepcopy_edge_attr(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.different_attrdict(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.same_attrdict(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.shallow_copy_edge_attr(self,H,G)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_adjacency_iter(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_edge_attr4(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_get_edge_data(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_has_edge(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_selfloops(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_selfloops2(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_to_directed(self)
networkx.tests.test_multigraph.BaseMultiGraphTester.test_to_undirected(self)
networkx.tests.test_multigraph.TestMultiGraph(BaseMultiGraphTester,TestGraph)
networkx.tests.test_multigraph.TestMultiGraph.setUp(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edge_conflicting_key(self)
networkx.tests.test_multigraph.TestMultiGraph.test_add_edges_from(self)
networkx.tests.test_multigraph.TestMultiGraph.test_data_input(self)
networkx.tests.test_multigraph.TestMultiGraph.test_getitem(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_edge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_edges_from(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_multiedge(self)
networkx.tests.test_multigraph.TestMultiGraph.test_remove_node(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_digraph_historical.py----------------------------------------
A:networkx.classes.tests.test_digraph_historical.G->networkx.complete_graph(10)
A:networkx.classes.tests.test_digraph_historical.H->networkx.DiGraph()
A:networkx.classes.tests.test_digraph_historical.HR->networkx.DiGraph().reverse()
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical(HistoricalTests)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.setUp(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3(self)
networkx.classes.tests.test_digraph_historical.TestDiGraphHistorical.test_successors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical(HistoricalTests)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.setUp(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_degree_digraph(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_in_degree(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_neighbors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_out_degree(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_predecessors(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse2(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_reverse3(self)
networkx.tests.test_digraph_historical.TestDiGraphHistorical.test_successors(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/classes/tests/test_digraph.py----------------------------------------
A:networkx.classes.tests.test_digraph.G->self.Graph()
A:networkx.classes.tests.test_digraph.R->self.Graph().reverse(copy=False)
A:networkx.classes.tests.test_digraph.self.K3->self.Graph()
A:networkx.classes.tests.test_digraph.self.P3->self.Graph()
networkx.classes.tests.test_digraph.BaseAttrDiGraphTester(BaseDiGraphTester,BaseAttrGraphTester)
networkx.classes.tests.test_digraph.BaseDiGraphTester(BaseGraphTester)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_data(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_edges_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_predecessor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_has_successor(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter_weighted(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_in_edges_iter_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter_weighted(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter_dir(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_predecessors_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_copy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_size(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_successors_iter(self)
networkx.classes.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal(self)
networkx.classes.tests.test_digraph.TestDiGraph(BaseAttrDiGraphTester,TestGraph)
networkx.classes.tests.test_digraph.TestDiGraph.setUp(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_add_edges_from(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_data_input(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edge(self)
networkx.classes.tests.test_digraph.TestDiGraph.test_remove_edges_from(self)
networkx.tests.test_digraph.BaseAttrDiGraphTester(BaseDiGraphTester,BaseAttrGraphTester)
networkx.tests.test_digraph.BaseDiGraphTester(BaseGraphTester)
networkx.tests.test_digraph.BaseDiGraphTester.test_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges_data(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_edges_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_has_predecessor(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_has_successor(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_degree_iter_weighted(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_edges_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_in_edges_iter_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_degree_iter_weighted(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_out_edges_iter_dir(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_predecessors(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_predecessors_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_reverse_copy(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_reverse_nocopy(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_size(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_successors(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_successors_iter(self)
networkx.tests.test_digraph.BaseDiGraphTester.test_to_undirected_reciprocal(self)
networkx.tests.test_digraph.TestDiGraph(BaseAttrDiGraphTester,TestGraph)
networkx.tests.test_digraph.TestDiGraph.setUp(self)
networkx.tests.test_digraph.TestDiGraph.test_add_edge(self)
networkx.tests.test_digraph.TestDiGraph.test_add_edges_from(self)
networkx.tests.test_digraph.TestDiGraph.test_data_input(self)
networkx.tests.test_digraph.TestDiGraph.test_remove_edge(self)
networkx.tests.test_digraph.TestDiGraph.test_remove_edges_from(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/nx_pylab.py----------------------------------------
A:networkx.drawing.nx_pylab.cf->pylab.gcf()
A:networkx.drawing.nx_pylab.ax->pylab.gca()
A:networkx.drawing.nx_pylab.b->pylab.ishold()
A:networkx.drawing.nx_pylab.h->kwds.pop('hold', None)
A:networkx.drawing.nx_pylab.pos->networkx.drawing.graphviz_layout(G, prog)
A:networkx.drawing.nx_pylab.node_collection->pylab.gca().scatter(xy[:, 0], xy[:, 1], s=node_size, c=node_color, marker=node_shape, cmap=cmap, vmin=vmin, vmax=vmax, alpha=alpha, linewidths=linewidths)
A:networkx.drawing.nx_pylab.edge_collection->LineCollection(edge_pos, colors=edge_colors, linewidths=lw, antialiaseds=(1,), linestyle=style, transOffset=ax.transData)
A:networkx.drawing.nx_pylab.nodelist->G.nodes()
A:networkx.drawing.nx_pylab.xy->numpy.array((x, y))
A:networkx.drawing.nx_pylab.edgelist->G.edges()
A:networkx.drawing.nx_pylab.edge_pos->numpy.asarray([(pos[e[0]], pos[e[1]]) for e in edgelist])
A:networkx.drawing.nx_pylab.edge_colors->tuple(edge_color)
A:networkx.drawing.nx_pylab.d->numpy.sqrt(float(dx ** 2 + dy ** 2))
A:networkx.drawing.nx_pylab.theta->numpy.arctan2(dy, dx)
A:networkx.drawing.nx_pylab.arrow_collection->LineCollection(a_pos, colors=arrow_colors, linewidths=[4 * ww for ww in lw], antialiaseds=(1,), transOffset=ax.transData)
A:networkx.drawing.nx_pylab.minx->numpy.amin(numpy.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.maxx->numpy.amax(numpy.ravel(edge_pos[:, :, 0]))
A:networkx.drawing.nx_pylab.miny->numpy.amin(numpy.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.maxy->numpy.amax(numpy.ravel(edge_pos[:, :, 1]))
A:networkx.drawing.nx_pylab.labels->dict((((u, v), d) for (u, v, d) in G.edges(data=True)))
A:networkx.drawing.nx_pylab.horizontalalignment->kwds.get('horizontalalignment', 'center')
A:networkx.drawing.nx_pylab.verticalalignment->kwds.get('verticalalignment', 'center')
A:networkx.drawing.nx_pylab.label->str(label)
A:networkx.drawing.nx_pylab.t->pylab.gca().text(x, y, label, size=font_size, color=font_color, family=font_family, weight=font_weight, horizontalalignment=horizontalalignment, verticalalignment=verticalalignment, rotation=trans_angle, transform=ax.transData, bbox=bbox, zorder=1, clip_on=True)
A:networkx.drawing.nx_pylab.bbox->dict(boxstyle='round', ec=(1.0, 1.0, 1.0), fc=(1.0, 1.0, 1.0))
A:networkx.drawing.nx_pylab.nlist->kwargs.get('nlist', None)
networkx.draw(G,pos=None,ax=None,hold=None,**kwds)
networkx.draw_circular(G,**kwargs)
networkx.draw_graphviz(G,prog='neato',**kwargs)
networkx.draw_networkx(G,pos=None,with_labels=True,**kwds)
networkx.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,rotate=True,**kwds)
networkx.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=None,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=True,**kwds)
networkx.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,ax=None,**kwds)
networkx.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='r',node_shape='o',alpha=1.0,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,**kwds)
networkx.draw_nx(G,pos,**kwds)
networkx.draw_random(G,**kwargs)
networkx.draw_shell(G,**kwargs)
networkx.draw_spectral(G,**kwargs)
networkx.draw_spring(G,**kwargs)
networkx.drawing.nx_pylab.draw(G,pos=None,ax=None,hold=None,**kwds)
networkx.drawing.nx_pylab.draw_circular(G,**kwargs)
networkx.drawing.nx_pylab.draw_graphviz(G,prog='neato',**kwargs)
networkx.drawing.nx_pylab.draw_networkx(G,pos=None,with_labels=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_edge_labels(G,pos,edge_labels=None,label_pos=0.5,font_size=10,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,bbox=None,ax=None,rotate=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_edges(G,pos,edgelist=None,width=1.0,edge_color='k',style='solid',alpha=None,edge_cmap=None,edge_vmin=None,edge_vmax=None,ax=None,arrows=True,**kwds)
networkx.drawing.nx_pylab.draw_networkx_labels(G,pos,labels=None,font_size=12,font_color='k',font_family='sans-serif',font_weight='normal',alpha=1.0,ax=None,**kwds)
networkx.drawing.nx_pylab.draw_networkx_nodes(G,pos,nodelist=None,node_size=300,node_color='r',node_shape='o',alpha=1.0,cmap=None,vmin=None,vmax=None,ax=None,linewidths=None,**kwds)
networkx.drawing.nx_pylab.draw_nx(G,pos,**kwds)
networkx.drawing.nx_pylab.draw_random(G,**kwargs)
networkx.drawing.nx_pylab.draw_shell(G,**kwargs)
networkx.drawing.nx_pylab.draw_spectral(G,**kwargs)
networkx.drawing.nx_pylab.draw_spring(G,**kwargs)
networkx.drawing.nx_pylab.setup_module(module)
networkx.setup_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/nx_pydot.py----------------------------------------
A:networkx.drawing.nx_pydot.P->to_pydot(G)
A:networkx.drawing.nx_pydot.data->path.read()
A:networkx.drawing.nx_pydot.create_using->networkx.DiGraph()
A:networkx.drawing.nx_pydot.N->networkx.empty_graph(0, create_using)
A:networkx.drawing.nx_pydot.N.name->to_pydot(G).get_name()
A:networkx.drawing.nx_pydot.n->pydot.Node(str(n), **str_nodedata).get_name().strip('"')
A:networkx.drawing.nx_pydot.u->e.get_source().strip('"')
A:networkx.drawing.nx_pydot.v->e.get_destination().strip('"')
A:networkx.drawing.nx_pydot.attr->e.get_attributes()
A:networkx.drawing.nx_pydot.N.graph['graph']->to_pydot(G).get_attributes()
A:networkx.drawing.nx_pydot.name->networkx.empty_graph(0, create_using).graph.get('name')
A:networkx.drawing.nx_pydot.graph_defaults->networkx.empty_graph(0, create_using).graph.get('graph', {})
A:networkx.drawing.nx_pydot.str_nodedata->dict(((k, str(v)) for (k, v) in nodedata.items()))
A:networkx.drawing.nx_pydot.p->pydot.Node(str(n), **str_nodedata)
A:networkx.drawing.nx_pydot.str_edgedata->dict(((k, str(v)) for (k, v) in edgedata.items()))
A:networkx.drawing.nx_pydot.edge->pydot.Edge(str(u), str(v), **str_edgedata)
A:networkx.drawing.nx_pydot.D->to_pydot(G).create_dot(prog=prog)
A:networkx.drawing.nx_pydot.Q->pydot.graph_from_dot_data(D)
A:networkx.drawing.nx_pydot.node->pydot.graph_from_dot_data(D).get_node(pydot.Node(str(n)).get_name())
A:networkx.drawing.nx_pydot.(xx, yy)->pos.split(',')
networkx.drawing.nx_pydot.from_pydot(P)
networkx.drawing.nx_pydot.graphviz_layout(G,prog='neato',root=None,**kwds)
networkx.drawing.nx_pydot.networkx_from_pydot(D,create_using=None)
networkx.drawing.nx_pydot.pydot_from_networkx(N)
networkx.drawing.nx_pydot.pydot_layout(G,prog='neato',root=None,**kwds)
networkx.drawing.nx_pydot.read_dot(path)
networkx.drawing.nx_pydot.setup_module(module)
networkx.drawing.nx_pydot.to_pydot(N,strict=True)
networkx.drawing.nx_pydot.write_dot(G,path)
networkx.from_pydot(P)
networkx.graphviz_layout(G,prog='neato',root=None,**kwds)
networkx.networkx_from_pydot(D,create_using=None)
networkx.pydot_from_networkx(N)
networkx.pydot_layout(G,prog='neato',root=None,**kwds)
networkx.read_dot(path)
networkx.setup_module(module)
networkx.to_pydot(N,strict=True)
networkx.write_dot(G,path)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/layout.py----------------------------------------
A:networkx.drawing.layout.n->len(G)
A:networkx.drawing.layout.pos->_rescale_layout(pos, scale)
A:networkx.drawing.layout.t->numpy.arange(0, 2.0 * np.pi, 2.0 * np.pi / len(nodes), dtype=np.float32)
A:networkx.drawing.layout.nfixed->dict(zip(G, range(len(G))))
A:networkx.drawing.layout.fixed->numpy.asarray([nfixed[v] for v in fixed])
A:networkx.drawing.layout.pos_arr->numpy.asarray(np.random.random((len(G), dim)))
A:networkx.drawing.layout.pos_arr[i]->numpy.asarray(pos[n])
A:networkx.drawing.layout.A->numpy.asarray(A)
A:networkx.drawing.layout.k->numpy.sqrt(1.0 / nnodes)
A:networkx.drawing.layout.delta->numpy.zeros((pos.shape[0], pos.shape[0], pos.shape[1]), dtype=A.dtype)
A:networkx.drawing.layout.distance->numpy.where(distance < 0.01, 0.01, distance)
A:networkx.drawing.layout.displacement->numpy.zeros((dim, nnodes))
A:networkx.drawing.layout.length->numpy.where(length < 0.01, 0.1, length)
A:networkx.drawing.layout.delta_pos->numpy.transpose(np.transpose(displacement) * t / length)
A:networkx.drawing.layout.Ai->numpy.asarray(A.getrowview(i).toarray())
A:networkx.drawing.layout.I->numpy.identity(nnodes, dtype=A.dtype)
A:networkx.drawing.layout.(eigenvalues, eigenvectors)->eigsh(L, k, which='SM', ncv=ncv)
A:networkx.drawing.layout.data->numpy.asarray(A.sum(axis=1).T)
A:networkx.drawing.layout.D->spdiags(data, 0, nnodes, nnodes)
A:networkx.drawing.layout.ncv->max(2 * k + 1, int(np.sqrt(nnodes)))
A:networkx.drawing.layout.lim->max(pos[:, i].max(), lim)
networkx._fruchterman_reingold(A,dim=2,pos=None,fixed=None,iterations=50)
networkx._rescale_layout(pos,scale=1)
networkx._sparse_fruchterman_reingold(A,dim=2,pos=None,fixed=None,iterations=50)
networkx._sparse_spectral(A,dim=2)
networkx._spectral(A,dim=2)
networkx.circular_layout(G,dim=2,scale=1)
networkx.drawing.layout._fruchterman_reingold(A,dim=2,pos=None,fixed=None,iterations=50)
networkx.drawing.layout._rescale_layout(pos,scale=1)
networkx.drawing.layout._sparse_fruchterman_reingold(A,dim=2,pos=None,fixed=None,iterations=50)
networkx.drawing.layout._sparse_spectral(A,dim=2)
networkx.drawing.layout._spectral(A,dim=2)
networkx.drawing.layout.circular_layout(G,dim=2,scale=1)
networkx.drawing.layout.fruchterman_reingold_layout(G,dim=2,pos=None,fixed=None,iterations=50,weight='weight',scale=1)
networkx.drawing.layout.random_layout(G,dim=2)
networkx.drawing.layout.setup_module(module)
networkx.drawing.layout.shell_layout(G,nlist=None,dim=2,scale=1)
networkx.drawing.layout.spectral_layout(G,dim=2,weight='weight',scale=1)
networkx.fruchterman_reingold_layout(G,dim=2,pos=None,fixed=None,iterations=50,weight='weight',scale=1)
networkx.random_layout(G,dim=2)
networkx.setup_module(module)
networkx.shell_layout(G,nlist=None,dim=2,scale=1)
networkx.spectral_layout(G,dim=2,weight='weight',scale=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/nx_agraph.py----------------------------------------
A:networkx.drawing.nx_agraph.create_using->networkx.MultiGraph()
A:networkx.drawing.nx_agraph.N->networkx.empty_graph(0, create_using)
A:networkx.drawing.nx_agraph.N.name->str(A)
A:networkx.drawing.nx_agraph.str_attr->dict(((str(k), v) for (k, v) in attr.items()))
A:networkx.drawing.nx_agraph.attr->dict(e.attr)
A:networkx.drawing.nx_agraph.N.graph['graph']->dict(A.graph_attr)
A:networkx.drawing.nx_agraph.N.graph['node']->dict(A.node_attr)
A:networkx.drawing.nx_agraph.N.graph['edge']->dict(A.edge_attr)
A:networkx.drawing.nx_agraph.directed->networkx.empty_graph(0, create_using).is_directed()
A:networkx.drawing.nx_agraph.A->to_agraph(G)
A:networkx.drawing.nx_agraph.str_edgedata->dict(((k, str(v)) for (k, v) in edgedata.items()))
A:networkx.drawing.nx_agraph.node->pygraphviz.Node(A, n)
A:networkx.drawing.nx_agraph.(xx, yy)->pygraphviz.Node(A, n).attr['pos'].split(',')
A:networkx.drawing.nx_agraph.edge->to_agraph(G).get_edge(u, v)
A:networkx.drawing.nx_agraph.edge.attr['label']->str(func(data))
A:networkx.drawing.nx_agraph.path->tempfile.NamedTemporaryFile(suffix=suffix, delete=False)
networkx.display_pygraphviz(graph,path,format=None,prog=None,args='')
networkx.drawing.nx_agraph.display_pygraphviz(graph,path,format=None,prog=None,args='')
networkx.drawing.nx_agraph.from_agraph(A,create_using=None)
networkx.drawing.nx_agraph.graphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.pygraphviz_layout(G,prog='neato',root=None,args='')
networkx.drawing.nx_agraph.read_dot(path)
networkx.drawing.nx_agraph.setup_module(module)
networkx.drawing.nx_agraph.to_agraph(N)
networkx.drawing.nx_agraph.view_pygraphviz(G,edgelabel=None,prog='dot',args='',suffix='',path=None)
networkx.drawing.nx_agraph.write_dot(G,path)
networkx.from_agraph(A,create_using=None)
networkx.graphviz_layout(G,prog='neato',root=None,args='')
networkx.pygraphviz_layout(G,prog='neato',root=None,args='')
networkx.read_dot(path)
networkx.setup_module(module)
networkx.to_agraph(N)
networkx.view_pygraphviz(G,edgelabel=None,prog='dot',args='',suffix='',path=None)
networkx.write_dot(G,path)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/tests/test_layout.py----------------------------------------
A:networkx.drawing.tests.test_layout.self.Gi->networkx.grid_2d_graph(5, 5)
A:networkx.drawing.tests.test_layout.self.Gs->networkx.Graph()
A:networkx.drawing.tests.test_layout.self.bigG->networkx.grid_2d_graph(25, 25)
A:networkx.drawing.tests.test_layout.vpos->networkx.shell_layout(G)
A:networkx.drawing.tests.test_layout.A->networkx.to_scipy_sparse_matrix(self.Gs)
A:networkx.drawing.tests.test_layout.pos->networkx.drawing.layout._sparse_fruchterman_reingold(A, dim=3)
networkx.drawing.tests.test_layout.TestLayout(object)
networkx.drawing.tests.test_layout.TestLayout.setUp(self)
networkx.drawing.tests.test_layout.TestLayout.setupClass(cls)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_numpy(self)
networkx.drawing.tests.test_layout.TestLayout.test_adjacency_interface_scipy(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_int(self)
networkx.drawing.tests.test_layout.TestLayout.test_smoke_string(self)
networkx.tests.test_TestLayout(object)
networkx.tests.test_TestLayout.setUp(self)
networkx.tests.test_TestLayout.setupClass(cls)
networkx.tests.test_TestLayout.test_adjacency_interface_numpy(self)
networkx.tests.test_TestLayout.test_adjacency_interface_scipy(self)
networkx.tests.test_TestLayout.test_smoke_int(self)
networkx.tests.test_TestLayout.test_smoke_string(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/tests/test_pydot.py----------------------------------------
A:networkx.drawing.tests.test_pydot.(H, P)->self.build_graph(G)
A:networkx.drawing.tests.test_pydot.G2->H.__class__(nx.from_pydot(P))
A:networkx.drawing.tests.test_pydot.fname->tempfile.mktemp()
A:networkx.drawing.tests.test_pydot.Pin->pydot.graph_from_dot_file(fname)
A:networkx.drawing.tests.test_pydot.n1->sorted([p.get_name() for p in P.get_node_list()])
A:networkx.drawing.tests.test_pydot.n2->sorted([p.get_name() for p in Pin.get_node_list()])
A:networkx.drawing.tests.test_pydot.Hin->H.__class__(Hin)
networkx.drawing.tests.test_pydot.TestPydot(object)
networkx.drawing.tests.test_pydot.TestPydot.assert_equal(self,G1,G2)
networkx.drawing.tests.test_pydot.TestPydot.build_graph(self,G)
networkx.drawing.tests.test_pydot.TestPydot.pydot_checks(self,G)
networkx.drawing.tests.test_pydot.TestPydot.setupClass(cls)
networkx.drawing.tests.test_pydot.TestPydot.testDirected(self)
networkx.drawing.tests.test_pydot.TestPydot.testUndirected(self)
networkx.tests.test_pydot.TestPydot(object)
networkx.tests.test_pydot.TestPydot.assert_equal(self,G1,G2)
networkx.tests.test_pydot.TestPydot.build_graph(self,G)
networkx.tests.test_pydot.TestPydot.pydot_checks(self,G)
networkx.tests.test_pydot.TestPydot.setupClass(cls)
networkx.tests.test_pydot.TestPydot.testDirected(self)
networkx.tests.test_pydot.TestPydot.testUndirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/tests/test_pylab.py----------------------------------------
A:networkx.drawing.tests.test_pylab.self.G->networkx.barbell_graph(5, 10)
networkx.drawing.tests.test_pylab.TestPylab(object)
networkx.drawing.tests.test_pylab.TestPylab.setUp(self)
networkx.drawing.tests.test_pylab.TestPylab.setupClass(cls)
networkx.drawing.tests.test_pylab.TestPylab.test_draw(self)
networkx.tests.test_pylab.TestPylab(object)
networkx.tests.test_pylab.TestPylab.setUp(self)
networkx.tests.test_pylab.TestPylab.setupClass(cls)
networkx.tests.test_pylab.TestPylab.test_draw(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/drawing/tests/test_agraph.py----------------------------------------
A:networkx.drawing.tests.test_agraph.G->self.build_graph(G)
A:networkx.drawing.tests.test_agraph.A->networkx.to_agraph(G)
A:networkx.drawing.tests.test_agraph.H->networkx.from_agraph(A)
A:networkx.drawing.tests.test_agraph.fname->tempfile.mktemp()
A:networkx.drawing.tests.test_agraph.Hin->networkx.drawing.nx_agraph.read_dot(fh)
A:networkx.drawing.tests.test_agraph.(fd, fname)->tempfile.mkstemp()
A:networkx.drawing.tests.test_agraph.fh->open(fname, 'r')
networkx.drawing.tests.test_agraph.TestAGraph(object)
networkx.drawing.tests.test_agraph.TestAGraph.agraph_checks(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.assert_equal(self,G1,G2)
networkx.drawing.tests.test_agraph.TestAGraph.build_graph(self,G)
networkx.drawing.tests.test_agraph.TestAGraph.setupClass(cls)
networkx.drawing.tests.test_agraph.TestAGraph.testDirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testMultiDirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testMultiUndirected(self)
networkx.drawing.tests.test_agraph.TestAGraph.testUndirected(self)
networkx.tests.test_agraph.TestAGraph(object)
networkx.tests.test_agraph.TestAGraph.agraph_checks(self,G)
networkx.tests.test_agraph.TestAGraph.assert_equal(self,G1,G2)
networkx.tests.test_agraph.TestAGraph.build_graph(self,G)
networkx.tests.test_agraph.TestAGraph.setupClass(cls)
networkx.tests.test_agraph.TestAGraph.testDirected(self)
networkx.tests.test_agraph.TestAGraph.testMultiDirected(self)
networkx.tests.test_agraph.TestAGraph.testMultiUndirected(self)
networkx.tests.test_agraph.TestAGraph.testUndirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/small.py----------------------------------------
A:networkx.generators.small.G->make_small_undirected_graph(description, create_using)
A:networkx.generators.small.nodes->make_small_undirected_graph(description, create_using).nodes()
networkx.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.bull_graph(create_using=None)
networkx.chvatal_graph(create_using=None)
networkx.cubical_graph(create_using=None)
networkx.desargues_graph(create_using=None)
networkx.diamond_graph(create_using=None)
networkx.dodecahedral_graph(create_using=None)
networkx.frucht_graph(create_using=None)
networkx.generators.small.LCF_graph(n,shift_list,repeats,create_using=None)
networkx.generators.small.bull_graph(create_using=None)
networkx.generators.small.chvatal_graph(create_using=None)
networkx.generators.small.cubical_graph(create_using=None)
networkx.generators.small.desargues_graph(create_using=None)
networkx.generators.small.diamond_graph(create_using=None)
networkx.generators.small.dodecahedral_graph(create_using=None)
networkx.generators.small.frucht_graph(create_using=None)
networkx.generators.small.heawood_graph(create_using=None)
networkx.generators.small.house_graph(create_using=None)
networkx.generators.small.house_x_graph(create_using=None)
networkx.generators.small.icosahedral_graph(create_using=None)
networkx.generators.small.krackhardt_kite_graph(create_using=None)
networkx.generators.small.make_small_graph(graph_description,create_using=None)
networkx.generators.small.make_small_undirected_graph(graph_description,create_using=None)
networkx.generators.small.moebius_kantor_graph(create_using=None)
networkx.generators.small.octahedral_graph(create_using=None)
networkx.generators.small.pappus_graph()
networkx.generators.small.petersen_graph(create_using=None)
networkx.generators.small.sedgewick_maze_graph(create_using=None)
networkx.generators.small.tetrahedral_graph(create_using=None)
networkx.generators.small.truncated_cube_graph(create_using=None)
networkx.generators.small.truncated_tetrahedron_graph(create_using=None)
networkx.generators.small.tutte_graph(create_using=None)
networkx.heawood_graph(create_using=None)
networkx.house_graph(create_using=None)
networkx.house_x_graph(create_using=None)
networkx.icosahedral_graph(create_using=None)
networkx.krackhardt_kite_graph(create_using=None)
networkx.make_small_graph(graph_description,create_using=None)
networkx.make_small_undirected_graph(graph_description,create_using=None)
networkx.moebius_kantor_graph(create_using=None)
networkx.octahedral_graph(create_using=None)
networkx.pappus_graph()
networkx.petersen_graph(create_using=None)
networkx.sedgewick_maze_graph(create_using=None)
networkx.tetrahedral_graph(create_using=None)
networkx.truncated_cube_graph(create_using=None)
networkx.truncated_tetrahedron_graph(create_using=None)
networkx.tutte_graph(create_using=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/ego.py----------------------------------------
A:networkx.generators.ego.__author__->'\n'.join(['Drew Conway <drew.conway@nyu.edu>', 'Aric Hagberg <hagberg@lanl.gov>'])
A:networkx.generators.ego.(sp, _)->networkx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)
A:networkx.generators.ego.sp->networkx.single_source_shortest_path_length(G, n, cutoff=radius)
A:networkx.generators.ego.H->G.subgraph(sp).copy()
networkx.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)
networkx.generators.ego.ego_graph(G,n,radius=1,center=True,undirected=False,distance=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/random_clustered.py----------------------------------------
A:networkx.generators.random_clustered.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Joel Miller (joel.c.miller.research@gmail.com)'])
A:networkx.generators.random_clustered.create_using->networkx.MultiGraph()
A:networkx.generators.random_clustered.joint_degree_sequence->list(joint_degree_sequence)
A:networkx.generators.random_clustered.N->len(joint_degree_sequence)
A:networkx.generators.random_clustered.G->networkx.empty_graph(N, create_using)
A:networkx.generators.random_clustered.n1->tlist.pop()
A:networkx.generators.random_clustered.n2->tlist.pop()
A:networkx.generators.random_clustered.n3->tlist.pop()
networkx.generators.random_clustered.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)
networkx.random_clustered_graph(joint_degree_sequence,create_using=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/intersection.py----------------------------------------
A:networkx.generators.intersection.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.generators.intersection.G->networkx.empty_graph(n + m)
A:networkx.generators.intersection.mset->range(n, n + m)
A:networkx.generators.intersection.targets->random.sample(mset, k)
networkx.general_random_intersection_graph(n,m,p)
networkx.generators.intersection.general_random_intersection_graph(n,m,p)
networkx.generators.intersection.k_random_intersection_graph(n,m,k)
networkx.generators.intersection.uniform_random_intersection_graph(n,m,p,seed=None)
networkx.k_random_intersection_graph(n,m,k)
networkx.uniform_random_intersection_graph(n,m,p,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/stochastic.py----------------------------------------
A:networkx.generators.stochastic.W->networkx.DiGraph(G)
A:networkx.generators.stochastic.degree->networkx.DiGraph(G).out_degree(weight=weight)
networkx.generators.stochastic.stochastic_graph(G,copy=True,weight='weight')
networkx.stochastic_graph(G,copy=True,weight='weight')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/geometric.py----------------------------------------
A:networkx.generators.geometric.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult (dschult@colgate.edu)', 'Ben Edwards (BJEdwards@gmail.com)'])
A:networkx.generators.geometric.G->networkx.DiGraph()
A:networkx.generators.geometric.nodes->list(product(range(n), repeat=dim))
A:networkx.generators.geometric.(u, du)->list(product(range(n), repeat=dim)).pop()
A:networkx.generators.geometric.d->sum((abs(b - a) for (a, b) in zip(p1, p2)))
A:networkx.generators.geometric.G.node[n]['weight']->random.expovariate(1.0)
A:networkx.generators.geometric.r->math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
A:networkx.generators.geometric.pos->list(nx.get_node_attributes(G, 'pos').values())
A:networkx.generators.geometric.(x1, y1)->list(nx.get_node_attributes(G, 'pos').values()).pop()
A:networkx.generators.geometric.l->math.sqrt(l)
A:networkx.generators.geometric.u->list(product(range(n), repeat=dim)).pop()
A:networkx.generators.geometric.cdf->list(nx.utils.cumulative_sum(probs))
networkx.generators.geometric.geographical_threshold_edges(G,theta,alpha=2)
networkx.generators.geometric.geographical_threshold_graph(n,theta,alpha=2,dim=2,pos=None,weight=None)
networkx.generators.geometric.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.generators.geometric.random_geometric_graph(n,radius,dim=2,pos=None)
networkx.generators.geometric.waxman_graph(n,alpha=0.4,beta=0.1,L=None,domain=(0,0,1,1))
networkx.geographical_threshold_edges(G,theta,alpha=2)
networkx.geographical_threshold_graph(n,theta,alpha=2,dim=2,pos=None,weight=None)
networkx.navigable_small_world_graph(n,p=1,q=1,r=2,dim=2,seed=None)
networkx.random_geometric_graph(n,radius,dim=2,pos=None)
networkx.waxman_graph(n,alpha=0.4,beta=0.1,L=None,domain=(0,0,1,1))


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/random_graphs.py----------------------------------------
A:networkx.generators.random_graphs.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult (dschult@colgate.edu)'])
A:networkx.generators.random_graphs.G->degree_sequence_tree(s)
A:networkx.generators.random_graphs.lp->math.log(1.0 - p)
A:networkx.generators.random_graphs.lr->math.log(1.0 - random.random())
A:networkx.generators.random_graphs.edges->_try_creation()
A:networkx.generators.random_graphs.nlist->degree_sequence_tree(s).nodes()
A:networkx.generators.random_graphs.u->random.choice(nlist1)
A:networkx.generators.random_graphs.v->random.choice(nlist2)
A:networkx.generators.random_graphs.e->degree_sequence_tree(s).edges()
A:networkx.generators.random_graphs.w->random.choice(nodes)
A:networkx.generators.random_graphs.nodes->list(range(n))
A:networkx.generators.random_graphs.potential_edges->defaultdict(lambda : 0)
A:networkx.generators.random_graphs.stubiter->iter(stubs)
A:networkx.generators.random_graphs.targets->_random_subset(repeated_nodes, m)
A:networkx.generators.random_graphs.x->random.choice(seq)
A:networkx.generators.random_graphs.repeated_nodes->degree_sequence_tree(s).nodes()
A:networkx.generators.random_graphs.possible_targets->_random_subset(repeated_nodes, m)
A:networkx.generators.random_graphs.target->_random_subset(repeated_nodes, m).pop()
A:networkx.generators.random_graphs.nbr->random.choice(neighborhood)
A:networkx.generators.random_graphs.llen->int(2 * random.random() * n + 0.5)
A:networkx.generators.random_graphs.L->path_graph(llen)
A:networkx.generators.random_graphs.inter_edges->int(m * d)
A:networkx.generators.random_graphs.g->networkx.convert_node_labels_to_integers(gnm_random_graph(n, inter_edges), first_label=nnodes)
A:networkx.generators.random_graphs.nlist1->glist[gi].nodes()
A:networkx.generators.random_graphs.nlist2->glist[gi + 1].nodes()
A:networkx.generators.random_graphs.s->random_powerlaw_tree_sequence(n, gamma=gamma, seed=seed, tries=tries)
A:networkx.generators.random_graphs.z->networkx.utils.powerlaw_sequence(tries, exponent=gamma)
A:networkx.generators.random_graphs.index->random.randint(0, n - 1)
A:networkx.generators.random_graphs.zseq[index]->swap.pop()
networkx._random_subset(seq,m)
networkx.barabasi_albert_graph(n,m,seed=None)
networkx.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.dense_gnm_random_graph(n,m,seed=None)
networkx.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs._random_subset(seq,m)
networkx.generators.random_graphs.barabasi_albert_graph(n,m,seed=None)
networkx.generators.random_graphs.connected_watts_strogatz_graph(n,k,p,tries=100,seed=None)
networkx.generators.random_graphs.dense_gnm_random_graph(n,m,seed=None)
networkx.generators.random_graphs.fast_gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.gnm_random_graph(n,m,seed=None,directed=False)
networkx.generators.random_graphs.gnp_random_graph(n,p,seed=None,directed=False)
networkx.generators.random_graphs.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.generators.random_graphs.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.generators.random_graphs.random_lobster(n,p1,p2,seed=None)
networkx.generators.random_graphs.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.generators.random_graphs.random_regular_graph(d,n,seed=None)
networkx.generators.random_graphs.random_shell_graph(constructor,seed=None)
networkx.generators.random_graphs.watts_strogatz_graph(n,k,p,seed=None)
networkx.gnm_random_graph(n,m,seed=None,directed=False)
networkx.gnp_random_graph(n,p,seed=None,directed=False)
networkx.newman_watts_strogatz_graph(n,k,p,seed=None)
networkx.powerlaw_cluster_graph(n,m,p,seed=None)
networkx.random_lobster(n,p1,p2,seed=None)
networkx.random_powerlaw_tree(n,gamma=3,seed=None,tries=100)
networkx.random_powerlaw_tree_sequence(n,gamma=3,seed=None,tries=100)
networkx.random_regular_graph(d,n,seed=None)
networkx.random_shell_graph(constructor,seed=None)
networkx.watts_strogatz_graph(n,k,p,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/hybrid.py----------------------------------------
A:networkx.generators.hybrid.H->copy.deepcopy(G)
A:networkx.generators.hybrid.verts->set([u, v])
A:networkx.generators.hybrid.G2->copy.deepcopy(G)
A:networkx.generators.hybrid.path->networkx.shortest_path(G2, u, v)
networkx.generators.hybrid.is_kl_connected(G,k,l,low_memory=False)
networkx.generators.hybrid.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)
networkx.is_kl_connected(G,k,l,low_memory=False)
networkx.kl_connected_subgraph(G,k,l,low_memory=False,same_as_graph=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/classic.py----------------------------------------
A:networkx.generators.classic.nodes->iter(range(n))
A:networkx.generators.classic.source->parents.pop(0)
A:networkx.generators.classic.target->next(nodes)
A:networkx.generators.classic.G->star_graph(n - 1, create_using)
A:networkx.generators.classic.n->int((1 - r ** (h + 1)) / (1 - r))
A:networkx.generators.classic.edges->itertools.combinations(range(n), 2)
A:networkx.generators.classic.last_generation_edges->star_graph(n - 1, create_using).edges()
A:networkx.generators.classic.number_of_edges_in_last_generation->len(last_generation_edges)
A:networkx.generators.classic.rows->range(m)
A:networkx.generators.classic.columns->range(n)
A:networkx.generators.classic.current_dim->dim.pop()
A:networkx.generators.classic.Gold->star_graph(n - 1, create_using).copy()
A:networkx.generators.classic.Gnew->func(current_dim)
A:networkx.generators.classic.H->networkx.relabel_nodes(G, flatten)
networkx._tree_edges(n,r)
networkx.balanced_tree(r,h,create_using=None)
networkx.barbell_graph(m1,m2,create_using=None)
networkx.circular_ladder_graph(n,create_using=None)
networkx.complete_bipartite_graph(n1,n2,create_using=None)
networkx.complete_graph(n,create_using=None)
networkx.cycle_graph(n,create_using=None)
networkx.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.empty_graph(n=0,create_using=None)
networkx.full_rary_tree(r,n,create_using=None)
networkx.generators.classic._tree_edges(n,r)
networkx.generators.classic.balanced_tree(r,h,create_using=None)
networkx.generators.classic.barbell_graph(m1,m2,create_using=None)
networkx.generators.classic.circular_ladder_graph(n,create_using=None)
networkx.generators.classic.complete_bipartite_graph(n1,n2,create_using=None)
networkx.generators.classic.complete_graph(n,create_using=None)
networkx.generators.classic.cycle_graph(n,create_using=None)
networkx.generators.classic.dorogovtsev_goltsev_mendes_graph(n,create_using=None)
networkx.generators.classic.empty_graph(n=0,create_using=None)
networkx.generators.classic.full_rary_tree(r,n,create_using=None)
networkx.generators.classic.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.generators.classic.grid_graph(dim,periodic=False)
networkx.generators.classic.hypercube_graph(n)
networkx.generators.classic.ladder_graph(n,create_using=None)
networkx.generators.classic.lollipop_graph(m,n,create_using=None)
networkx.generators.classic.null_graph(create_using=None)
networkx.generators.classic.path_graph(n,create_using=None)
networkx.generators.classic.star_graph(n,create_using=None)
networkx.generators.classic.trivial_graph(create_using=None)
networkx.generators.classic.wheel_graph(n,create_using=None)
networkx.grid_2d_graph(m,n,periodic=False,create_using=None)
networkx.grid_graph(dim,periodic=False)
networkx.hypercube_graph(n)
networkx.ladder_graph(n,create_using=None)
networkx.lollipop_graph(m,n,create_using=None)
networkx.null_graph(create_using=None)
networkx.path_graph(n,create_using=None)
networkx.star_graph(n,create_using=None)
networkx.trivial_graph(create_using=None)
networkx.wheel_graph(n,create_using=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/social.py----------------------------------------
A:networkx.generators.social.__author__->'\n'.join(['Jordi Torrents <jtorrents@milnou.net>', 'Katy Bold <kbold@princeton.edu>', 'Aric Hagberg <aric.hagberg@gmail.com)'])
A:networkx.generators.social.G->networkx.Graph()
A:networkx.generators.social.thisrow->list(map(int, line.split(' ')))
networkx.davis_southern_women_graph()
networkx.florentine_families_graph()
networkx.generators.social.davis_southern_women_graph()
networkx.generators.social.florentine_families_graph()
networkx.generators.social.karate_club_graph()
networkx.karate_club_graph()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/line.py----------------------------------------
A:networkx.generators.line.L->G.__class__()
A:networkx.generators.line.u->nodes.pop()
networkx.generators.line.line_graph(G)
networkx.line_graph(G)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/directed.py----------------------------------------
A:networkx.generators.directed.create_using->networkx.DiGraph()
A:networkx.generators.directed.G->networkx.MultiDiGraph()
A:networkx.generators.directed.target->random.randrange(0, source)
A:networkx.generators.directed.r->random.random()
A:networkx.generators.directed.v->_choose_node(G, G.out_degree(), delta_out)
A:networkx.generators.directed.w->len(G)
networkx.generators.directed.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.generators.directed.gnc_graph(n,create_using=None,seed=None)
networkx.generators.directed.gnr_graph(n,p,create_using=None,seed=None)
networkx.generators.directed.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None)
networkx.gn_graph(n,kernel=None,create_using=None,seed=None)
networkx.gnc_graph(n,create_using=None,seed=None)
networkx.gnr_graph(n,p,create_using=None,seed=None)
networkx.scale_free_graph(n,alpha=0.41,beta=0.54,gamma=0.05,delta_in=0.2,delta_out=0,create_using=None,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/atlas.py----------------------------------------
A:networkx.generators.atlas.g->make_small_graph(descr_list[i])
networkx.generators.atlas.graph_atlas_g()
networkx.graph_atlas_g()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/bipartite.py----------------------------------------
A:networkx.generators.bipartite.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Pieter Swart (swart@lanl.gov)', 'Dan Schult(dschult@colgate.edu)'])
A:networkx.generators.bipartite.create_using->networkx.Graph()
A:networkx.generators.bipartite.G->networkx.DiGraph(G)
A:networkx.generators.bipartite.lena->len(aseq)
A:networkx.generators.bipartite.lenb->len(bseq)
A:networkx.generators.bipartite.suma->sum(aseq)
A:networkx.generators.bipartite.sumb->sum(bseq)
A:networkx.generators.bipartite.naseq->len(aseq)
A:networkx.generators.bipartite.nbseq->len(bseq)
A:networkx.generators.bipartite.(degree, u)->astubs.pop()
A:networkx.generators.bipartite.target->random.choice(rightstubs)
A:networkx.generators.bipartite.bbstubs->reduce(lambda x, y: x + y, bb)
A:networkx.generators.bipartite.nodes->range(0, n)
A:networkx.generators.bipartite.stubs->reduce(lambda x, y: x + y, vv)
A:networkx.generators.bipartite.source->random.choice(leftstubs)
A:networkx.generators.bipartite.lp->math.log(1.0 - p)
A:networkx.generators.bipartite.lr->math.log(1.0 - random.random())
A:networkx.generators.bipartite.bottom->list(set(G) - set(top))
A:networkx.generators.bipartite.u->random.choice(top)
A:networkx.generators.bipartite.v->random.choice(bottom)
A:networkx.generators.bipartite.b->dict(zip(range(0, lena), [0] * lena))
networkx._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.bipartite_alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.bipartite_configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.bipartite_gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.bipartite_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.bipartite_preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.bipartite_random_graph(n,m,p,seed=None,directed=False)
networkx.bipartite_random_regular_graph(d,n,create_using=None,seed=None)
networkx.bipartite_reverse_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.generators.bipartite._add_nodes_with_bipartite_label(G,lena,lenb)
networkx.generators.bipartite.bipartite_alternating_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.generators.bipartite.bipartite_configuration_model(aseq,bseq,create_using=None,seed=None)
networkx.generators.bipartite.bipartite_gnmk_random_graph(n,m,k,seed=None,directed=False)
networkx.generators.bipartite.bipartite_havel_hakimi_graph(aseq,bseq,create_using=None)
networkx.generators.bipartite.bipartite_preferential_attachment_graph(aseq,p,create_using=None,seed=None)
networkx.generators.bipartite.bipartite_random_graph(n,m,p,seed=None,directed=False)
networkx.generators.bipartite.bipartite_random_regular_graph(d,n,create_using=None,seed=None)
networkx.generators.bipartite.bipartite_reverse_havel_hakimi_graph(aseq,bseq,create_using=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/threshold.py----------------------------------------
A:networkx.generators.threshold.(d, v)->degree_sequence(cs).pop()
A:networkx.generators.threshold.wseq->uncompact(creation_sequence)
A:networkx.generators.threshold.(w, label)->uncompact(creation_sequence).pop()
A:networkx.generators.threshold.ci->uncompact(creation_sequence)
A:networkx.generators.threshold.cs->uncompact(creation_sequence)
A:networkx.generators.threshold.G->networkx.Graph()
A:networkx.generators.threshold.(v, node_type)->uncompact(creation_sequence).pop(0)
A:networkx.generators.threshold.dsdict->H.subgraph(H.neighbors(bigv)).degree()
A:networkx.generators.threshold.(d, iso)->degree_sequence(cs).pop(0)
A:networkx.generators.threshold.(d, bigv)->degree_sequence(cs).pop()
A:networkx.generators.threshold.H->H.subgraph(H.neighbors(bigv)).subgraph(H.neighbors(bigv))
A:networkx.generators.threshold.dr->sum(ccs[::2])
A:networkx.generators.threshold.triseq->triangle_sequence(creation_sequence)
A:networkx.generators.threshold.degseq->degree_sequence(creation_sequence)
A:networkx.generators.threshold.rd->uncompact(creation_sequence).count('d')
A:networkx.generators.threshold.N->sum(ccs)
A:networkx.generators.threshold.two_size->sum(degree_sequence(creation_sequence))
A:networkx.generators.threshold.ds->degree_sequence(cs)
A:networkx.generators.threshold.uindex->verts.index(u)
A:networkx.generators.threshold.vindex->verts.index(v)
A:networkx.generators.threshold.bigind->max(uindex, vindex)
A:networkx.generators.threshold.vert->uncompact(creation_sequence).pop()
A:networkx.generators.threshold.i->[v[0] for v in creation_sequence].index(i)
A:networkx.generators.threshold.order->len(cs)
A:networkx.generators.threshold.ccs->make_compact(creation_sequence)
A:networkx.generators.threshold.c->sum([evv * uv for (evv, uv) in zip(ev, u)])
A:networkx.generators.threshold.row->len(degseq)
A:networkx.generators.threshold.bigdeg->degree_sequence(creation_sequence).pop()
A:networkx.generators.threshold.choice->random.choice(dlist)
A:networkx.generators.threshold.split_to->random.choice(range(choice))
A:networkx.generators.threshold.first_choice->random.choice(dlist)
A:networkx.generators.threshold.second_choice->random.choice(dlist)
networkx.betweenness_sequence(creation_sequence,normalized=True)
networkx.cluster_sequence(creation_sequence)
networkx.creation_sequence(degree_sequence,with_labels=False,compact=False)
networkx.creation_sequence_to_weights(creation_sequence)
networkx.degree_correlation(creation_sequence)
networkx.degree_sequence(creation_sequence)
networkx.density(creation_sequence)
networkx.eigenvalues(creation_sequence)
networkx.eigenvectors(creation_sequence)
networkx.find_alternating_4_cycle(G)
networkx.find_creation_sequence(G)
networkx.find_threshold_graph(G,create_using=None)
networkx.generators.threshold.betweenness_sequence(creation_sequence,normalized=True)
networkx.generators.threshold.cluster_sequence(creation_sequence)
networkx.generators.threshold.creation_sequence(degree_sequence,with_labels=False,compact=False)
networkx.generators.threshold.creation_sequence_to_weights(creation_sequence)
networkx.generators.threshold.degree_correlation(creation_sequence)
networkx.generators.threshold.degree_sequence(creation_sequence)
networkx.generators.threshold.density(creation_sequence)
networkx.generators.threshold.eigenvalues(creation_sequence)
networkx.generators.threshold.eigenvectors(creation_sequence)
networkx.generators.threshold.find_alternating_4_cycle(G)
networkx.generators.threshold.find_creation_sequence(G)
networkx.generators.threshold.find_threshold_graph(G,create_using=None)
networkx.generators.threshold.is_threshold_graph(G)
networkx.generators.threshold.is_threshold_sequence(degree_sequence)
networkx.generators.threshold.left_d_threshold_sequence(n,m)
networkx.generators.threshold.make_compact(creation_sequence)
networkx.generators.threshold.random_threshold_sequence(n,p,seed=None)
networkx.generators.threshold.right_d_threshold_sequence(n,m)
networkx.generators.threshold.shortest_path(creation_sequence,u,v)
networkx.generators.threshold.shortest_path_length(creation_sequence,i)
networkx.generators.threshold.spectral_projection(u,eigenpairs)
networkx.generators.threshold.swap_d(cs,p_split=1.0,p_combine=1.0,seed=None)
networkx.generators.threshold.threshold_graph(creation_sequence,create_using=None)
networkx.generators.threshold.triangle_sequence(creation_sequence)
networkx.generators.threshold.triangles(creation_sequence)
networkx.generators.threshold.uncompact(creation_sequence)
networkx.generators.threshold.weights_to_creation_sequence(weights,threshold=1,with_labels=False,compact=False)
networkx.is_threshold_graph(G)
networkx.is_threshold_sequence(degree_sequence)
networkx.left_d_threshold_sequence(n,m)
networkx.make_compact(creation_sequence)
networkx.random_threshold_sequence(n,p,seed=None)
networkx.right_d_threshold_sequence(n,m)
networkx.shortest_path(creation_sequence,u,v)
networkx.shortest_path_length(creation_sequence,i)
networkx.spectral_projection(u,eigenpairs)
networkx.swap_d(cs,p_split=1.0,p_combine=1.0,seed=None)
networkx.threshold_graph(creation_sequence,create_using=None)
networkx.triangle_sequence(creation_sequence)
networkx.triangles(creation_sequence)
networkx.uncompact(creation_sequence)
networkx.weights_to_creation_sequence(weights,threshold=1,with_labels=False,compact=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/degree_seq.py----------------------------------------
A:networkx.generators.degree_seq.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>', 'Pieter Swart <swart@lanl.gov>', 'Dan Schult <dschult@colgate.edu>Joel Miller <joel.c.miller.research@gmail.com>', 'Nathan Lemons <nlemons@gmail.com>'])
A:networkx.generators.degree_seq.create_using->networkx.MultiDiGraph()
A:networkx.generators.degree_seq.N->len(deg_sequence)
A:networkx.generators.degree_seq.G->networkx.path_graph(n, create_using)
A:networkx.generators.degree_seq.n1->stublist.pop()
A:networkx.generators.degree_seq.n2->stublist.pop()
A:networkx.generators.degree_seq.nin->len(in_degree_sequence)
A:networkx.generators.degree_seq.nout->len(out_degree_sequence)
A:networkx.generators.degree_seq.source->out_stublist.pop()
A:networkx.generators.degree_seq.target->in_stublist.pop()
A:networkx.generators.degree_seq.n->len(w)
A:networkx.generators.degree_seq.order->sorted(enumerate(w), key=itemgetter(1), reverse=True)
A:networkx.generators.degree_seq.mapping->dict(((c, uv[0]) for (c, uv) in enumerate(order)))
A:networkx.generators.degree_seq.r->random.random()
A:networkx.generators.degree_seq.(freestubs, source)->stublist.pop()
A:networkx.generators.degree_seq.DSRG->DegreeSequenceRandomGraph(sequence, seed=seed)
A:networkx.generators.degree_seq.self.dmax->max(self.degree)
A:networkx.generators.degree_seq.self.remaining_degree->dict(enumerate(self.degree))
A:networkx.generators.degree_seq.self.graph->networkx.Graph()
A:networkx.generators.degree_seq.nodes->iter(self.remaining_degree)
A:networkx.generators.degree_seq.u->next(nodes)
A:networkx.generators.degree_seq.(u, v)->sorted(random.choice(H.edges()))
A:networkx.generators.degree_seq.potential_edges->combinations(self.remaining_degree, 2)
A:networkx.generators.degree_seq.H->networkx.Graph([(u, v) for (u, v) in potential_edges if not self.graph.has_edge(u, v)])
networkx.DegreeSequenceRandomGraph(self,degree,seed=None)
networkx.DegreeSequenceRandomGraph.generate(self)
networkx.DegreeSequenceRandomGraph.p(self,u,v)
networkx.DegreeSequenceRandomGraph.phase1(self)
networkx.DegreeSequenceRandomGraph.phase2(self)
networkx.DegreeSequenceRandomGraph.phase3(self)
networkx.DegreeSequenceRandomGraph.q(self,u,v)
networkx.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.degree_sequence_tree(deg_sequence,create_using=None)
networkx.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.degree_seq.DegreeSequenceRandomGraph(self,degree,seed=None)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.__init__(self,degree,seed=None)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.generate(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.p(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase1(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase2(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.phase3(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.q(self,u,v)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.suitable_edge(self)
networkx.generators.degree_seq.DegreeSequenceRandomGraph.update_remaining(self,u,v,aux_graph=None)
networkx.generators.degree_seq.configuration_model(deg_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.degree_sequence_tree(deg_sequence,create_using=None)
networkx.generators.degree_seq.directed_configuration_model(in_degree_sequence,out_degree_sequence,create_using=None,seed=None)
networkx.generators.degree_seq.expected_degree_graph(w,seed=None,selfloops=True)
networkx.generators.degree_seq.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.generators.degree_seq.random_degree_sequence_graph(sequence,seed=None,tries=10)
networkx.havel_hakimi_graph(deg_sequence,create_using=None)
networkx.random_degree_sequence_graph(sequence,seed=None,tries=10)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_geometric.py----------------------------------------
A:networkx.generators.tests.test_geometric.G->networkx.navigable_small_world_graph(5, p=1, q=0, dim=1)
A:networkx.generators.tests.test_geometric.gg->networkx.grid_graph([5]).to_directed()
networkx.generators.tests.test_geometric.TestGeneratorsGeometric
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_geographical_threshold_graph(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_naviable_small_world(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_random_geometric_graph(self)
networkx.generators.tests.test_geometric.TestGeneratorsGeometric.test_waxman_graph(self)
networkx.tests.test_TestGeneratorsGeometric
networkx.tests.test_TestGeneratorsGeometric.test_geographical_threshold_graph(self)
networkx.tests.test_TestGeneratorsGeometric.test_naviable_small_world(self)
networkx.tests.test_TestGeneratorsGeometric.test_random_geometric_graph(self)
networkx.tests.test_TestGeneratorsGeometric.test_waxman_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_classic.py----------------------------------------
A:networkx.generators.tests.test_classic.t->full_rary_tree(3, 20)
A:networkx.generators.tests.test_classic.order->full_rary_tree(3, 20).order()
A:networkx.generators.tests.test_classic.dh->degree_histogram(t)
A:networkx.generators.tests.test_classic.th->balanced_tree(2, 3)
A:networkx.generators.tests.test_classic.b->lollipop_graph(m1, m2)
A:networkx.generators.tests.test_classic.mb->lollipop_graph(m1, m2, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.g->wheel_graph(10)
A:networkx.generators.tests.test_classic.mg->wheel_graph(10, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.G->grid_2d_graph(n, m)
A:networkx.generators.tests.test_classic.mG->cycle_graph(4, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.pete->petersen_graph()
A:networkx.generators.tests.test_classic.DG->grid_2d_graph(4, 2, periodic=True, create_using=DiGraph())
A:networkx.generators.tests.test_classic.MG->grid_2d_graph(4, 2, periodic=True, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.p->path_graph(10)
A:networkx.generators.tests.test_classic.dp->path_graph(3, create_using=DiGraph())
A:networkx.generators.tests.test_classic.mp->path_graph(10, create_using=MultiGraph())
A:networkx.generators.tests.test_classic.s->star_graph(10)
A:networkx.generators.tests.test_classic.ms->star_graph(10, create_using=MultiGraph())
networkx.generators.tests.test_classic.TestGeneratorClassic
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_balanced_tree_star(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_barbell_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_bipartite_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_digraph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_complete_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_cycle_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_empty_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_2d_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_grid_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_hypercube_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_ladder_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_lollipop_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_null_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_path_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_periodic_grid_2d_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_star_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_trivial_graph(self)
networkx.generators.tests.test_classic.TestGeneratorClassic.test_wheel_graph(self)
networkx.tests.test_TestGeneratorClassic
networkx.tests.test_TestGeneratorClassic.test_balanced_tree(self)
networkx.tests.test_TestGeneratorClassic.test_balanced_tree_star(self)
networkx.tests.test_TestGeneratorClassic.test_barbell_graph(self)
networkx.tests.test_TestGeneratorClassic.test_circular_ladder_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_bipartite_graph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_digraph(self)
networkx.tests.test_TestGeneratorClassic.test_complete_graph(self)
networkx.tests.test_TestGeneratorClassic.test_cycle_graph(self)
networkx.tests.test_TestGeneratorClassic.test_dorogovtsev_goltsev_mendes_graph(self)
networkx.tests.test_TestGeneratorClassic.test_empty_graph(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_3_20(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_balanced(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_empty(self)
networkx.tests.test_TestGeneratorClassic.test_full_rary_tree_path(self)
networkx.tests.test_TestGeneratorClassic.test_grid_2d_graph(self)
networkx.tests.test_TestGeneratorClassic.test_grid_graph(self)
networkx.tests.test_TestGeneratorClassic.test_hypercube_graph(self)
networkx.tests.test_TestGeneratorClassic.test_ladder_graph(self)
networkx.tests.test_TestGeneratorClassic.test_lollipop_graph(self)
networkx.tests.test_TestGeneratorClassic.test_null_graph(self)
networkx.tests.test_TestGeneratorClassic.test_path_graph(self)
networkx.tests.test_TestGeneratorClassic.test_periodic_grid_2d_graph(self)
networkx.tests.test_TestGeneratorClassic.test_star_graph(self)
networkx.tests.test_TestGeneratorClassic.test_trivial_graph(self)
networkx.tests.test_TestGeneratorClassic.test_wheel_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_atlas.py----------------------------------------
A:networkx.generators.tests.test_atlas.self.GAG->networkx.graph_atlas_g()
A:networkx.generators.tests.test_atlas.previous->g.copy()
A:networkx.generators.tests.test_atlas.deg_seq->sorted(g.degree().values())
A:networkx.generators.tests.test_atlas.previous_deg_seq->sorted(previous.degree().values())
networkx.generators.tests.test_atlas.TestAtlas(object)
networkx.generators.tests.test_atlas.TestAtlas.setUp(self)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_degree_sequence(self)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.generators.tests.test_atlas.TestAtlas.test_monotone_nodes(self)
networkx.generators.tests.test_atlas.TestAtlas.test_names(self)
networkx.generators.tests.test_atlas.TestAtlas.test_sizes(self)
networkx.tests.test_TestAtlas(object)
networkx.tests.test_TestAtlas.setUp(self)
networkx.tests.test_TestAtlas.test_monotone_degree_sequence(self)
networkx.tests.test_TestAtlas.test_monotone_nodes(self)
networkx.tests.test_TestAtlas.test_monotone_nodes(self)
networkx.tests.test_TestAtlas.test_names(self)
networkx.tests.test_TestAtlas.test_sizes(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_bipartite.py----------------------------------------
A:networkx.generators.tests.test_bipartite.G->bipartite_gnmk_random_graph(n, m, edges)
A:networkx.generators.tests.test_bipartite.GU->project(Graph(G), range(len(aseq)))
A:networkx.generators.tests.test_bipartite.GD->project(Graph(G), range(len(aseq), len(aseq) + len(bseq)))
A:networkx.generators.tests.test_bipartite.(X, Y)->nx.algorithms.bipartite.sets(G)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_bipartite_gnmk_random_graph(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_bipartite_random_graph(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_configuration_model(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_directed_bipartite_random_graph(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.generators.tests.test_bipartite.TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)
networkx.tests.test_TestGeneratorsBipartite
networkx.tests.test_TestGeneratorsBipartite.test_alternating_havel_hakimi_graph(self)
networkx.tests.test_TestGeneratorsBipartite.test_bipartite_gnmk_random_graph(self)
networkx.tests.test_TestGeneratorsBipartite.test_bipartite_random_graph(self)
networkx.tests.test_TestGeneratorsBipartite.test_configuration_model(self)
networkx.tests.test_TestGeneratorsBipartite.test_directed_bipartite_random_graph(self)
networkx.tests.test_TestGeneratorsBipartite.test_havel_hakimi_graph(self)
networkx.tests.test_TestGeneratorsBipartite.test_preferential_attachment(self)
networkx.tests.test_TestGeneratorsBipartite.test_reverse_havel_hakimi_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_hybrid.py----------------------------------------
A:networkx.generators.tests.test_hybrid.G->networkx.Graph()
A:networkx.generators.tests.test_hybrid.(H, graphOK)->networkx.kl_connected_subgraph(G, 2, 2, low_memory=True, same_as_graph=True)
A:networkx.generators.tests.test_hybrid.H->networkx.kl_connected_subgraph(G, 2, 2)
networkx.generators.tests.test_hybrid.test_2d_grid_graph()
networkx.generators.tests.test_hybrid.test_small_graph()
networkx.tests.test_test_2d_grid_graph()
networkx.tests.test_test_small_graph()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_stochastic.py----------------------------------------
A:networkx.generators.tests.test_stochastic.G->networkx.MultiGraph()
A:networkx.generators.tests.test_stochastic.S->networkx.stochastic_graph(G, copy=True)
networkx.generators.tests.test_stochastic.test_stochastic()
networkx.generators.tests.test_stochastic.test_stochastic_error()
networkx.tests.test_test_stochastic()
networkx.tests.test_test_stochastic_error()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_line.py----------------------------------------
A:networkx.generators.tests.test_line.G->networkx.DiGraph()
A:networkx.generators.tests.test_line.L->networkx.line_graph(G)
networkx.generators.tests.test_line.TestGeneratorLine
networkx.generators.tests.test_line.TestGeneratorLine.test_line(self)
networkx.tests.test_TestGeneratorLine
networkx.tests.test_TestGeneratorLine.test_line(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_small.py----------------------------------------
A:networkx.generators.tests.test_small.null->null_graph()
A:networkx.generators.tests.test_small.G->tutte_graph()
A:networkx.generators.tests.test_small.utility_graph->complete_bipartite_graph(3, 3)
A:networkx.generators.tests.test_small.MG->tutte_graph(create_using=MultiGraph())
networkx.generators.tests.test_small.TestGeneratorsSmall
networkx.generators.tests.test_small.TestGeneratorsSmall.test__LCF_graph(self)
networkx.generators.tests.test_small.TestGeneratorsSmall.test_make_small_graph(self)
networkx.generators.tests.test_small.TestGeneratorsSmall.test_properties_named_small_graphs(self)
networkx.tests.test_TestGeneratorsSmall
networkx.tests.test_TestGeneratorsSmall.test__LCF_graph(self)
networkx.tests.test_TestGeneratorsSmall.test_make_small_graph(self)
networkx.tests.test_TestGeneratorsSmall.test_properties_named_small_graphs(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_directed.py----------------------------------------
A:networkx.generators.tests.test_directed.G->gnc_graph(100, seed=1)
A:networkx.generators.tests.test_directed.MG->gnc_graph(100, create_using=MultiDiGraph(), seed=1)
networkx.generators.tests.test_directed.TestGeneratorsDirected
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.generators.tests.test_directed.TestGeneratorsDirected.test_smoke_test_random_graphs(self)
networkx.tests.test_TestGeneratorsDirected
networkx.tests.test_TestGeneratorsDirected.test_create_using_keyword_arguments(self)
networkx.tests.test_TestGeneratorsDirected.test_smoke_test_random_graphs(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_random_graphs.py----------------------------------------
A:networkx.generators.tests.test_random_graphs.G->gnm_random_graph(10, -1.1)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.smoke_test_random_graph(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_fast_gnp(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnm(self)
networkx.generators.tests.test_random_graphs.TestGeneratorsRandom.test_gnp(self)
networkx.tests.test_TestGeneratorsRandom
networkx.tests.test_TestGeneratorsRandom.smoke_test_random_graph(self)
networkx.tests.test_TestGeneratorsRandom.test_fast_gnp(self)
networkx.tests.test_TestGeneratorsRandom.test_gnm(self)
networkx.tests.test_TestGeneratorsRandom.test_gnp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_ego.py----------------------------------------
A:networkx.generators.tests.test_ego.G->networkx.Graph()
A:networkx.generators.tests.test_ego.H->networkx.ego_graph(G, 0)
A:networkx.generators.tests.test_ego.eg->networkx.ego_graph(G, 0, radius=3, distance='distance')
networkx.generators.tests.test_ego.TestGeneratorEgo
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego(self)
networkx.generators.tests.test_ego.TestGeneratorEgo.test_ego_distance(self)
networkx.tests.test_TestGeneratorEgo
networkx.tests.test_TestGeneratorEgo.test_ego(self)
networkx.tests.test_TestGeneratorEgo.test_ego_distance(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_threshold.py----------------------------------------
A:networkx.generators.tests.test_threshold.G->networkx.generators.threshold.threshold_graph(cs)
A:networkx.generators.tests.test_threshold.cs0->networkx.generators.threshold.creation_sequence(deg)
A:networkx.generators.tests.test_threshold.H0->networkx.generators.threshold.threshold_graph(cs0)
A:networkx.generators.tests.test_threshold.cs1->networkx.generators.threshold.creation_sequence(deg, with_labels=True)
A:networkx.generators.tests.test_threshold.H1->networkx.generators.threshold.threshold_graph(cs1)
A:networkx.generators.tests.test_threshold.cs2->networkx.generators.threshold.weights_to_creation_sequence(wseq)
A:networkx.generators.tests.test_threshold.H2->networkx.generators.threshold.threshold_graph(cs2)
A:networkx.generators.tests.test_threshold.spl->networkx.generators.threshold.shortest_path_length(cs1, 3)
A:networkx.generators.tests.test_threshold.spl2->networkx.generators.threshold.shortest_path_length([t for (v, t) in cs1], 2)
A:networkx.generators.tests.test_threshold.cs->networkx.generators.threshold.creation_sequence(TG.degree(), with_labels=True)
A:networkx.generators.tests.test_threshold.wseq->networkx.generators.threshold.creation_sequence_to_weights('ddidiiidididid')
A:networkx.generators.tests.test_threshold.TG->networkx.generators.threshold.find_threshold_graph(G)
A:networkx.generators.tests.test_threshold.ts->networkx.generators.threshold.triangle_sequence(cs)
A:networkx.generators.tests.test_threshold.c1->networkx.generators.threshold.cluster_sequence(cs)
A:networkx.generators.tests.test_threshold.c2->list(nx.clustering(G).values())
A:networkx.generators.tests.test_threshold.b1->networkx.betweenness_centrality(G).values()
A:networkx.generators.tests.test_threshold.b2->networkx.generators.threshold.betweenness_sequence(cs)
A:networkx.generators.tests.test_threshold.s->networkx.generators.threshold.right_d_threshold_sequence(5, 7)
A:networkx.generators.tests.test_threshold.s1->networkx.generators.threshold.swap_d(s, 1.0, 1.0)
A:networkx.generators.tests.test_threshold.(tgeval, tgevec)->networkx.generators.threshold.eigenvectors(cs)
A:networkx.generators.tests.test_threshold.lapl->networkx.laplacian(G)
A:networkx.generators.tests.test_threshold.lev->list(eigenval(lapl))
A:networkx.generators.tests.test_threshold.MG->networkx.generators.threshold.threshold_graph(cs, create_using=nx.MultiGraph())
networkx.generators.tests.test_threshold.TestGeneratorThreshold
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_create_using(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_creation_sequences(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_eigenvectors(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_finding_routines(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_shortest_path(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_tg_creation_routines(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_threshold_sequence_graph_test(self)
networkx.generators.tests.test_threshold.TestGeneratorThreshold.test_weights_thresholds(self)
networkx.tests.test_TestGeneratorThreshold
networkx.tests.test_TestGeneratorThreshold.test_create_using(self)
networkx.tests.test_TestGeneratorThreshold.test_creation_sequences(self)
networkx.tests.test_TestGeneratorThreshold.test_eigenvectors(self)
networkx.tests.test_TestGeneratorThreshold.test_fast_versions_properties_threshold_graphs(self)
networkx.tests.test_TestGeneratorThreshold.test_finding_routines(self)
networkx.tests.test_TestGeneratorThreshold.test_shortest_path(self)
networkx.tests.test_TestGeneratorThreshold.test_tg_creation_routines(self)
networkx.tests.test_TestGeneratorThreshold.test_threshold_sequence_graph_test(self)
networkx.tests.test_TestGeneratorThreshold.test_weights_thresholds(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_intersection.py----------------------------------------
A:networkx.generators.tests.test_intersection.G->networkx.general_random_intersection_graph(10, 5, [0.1, 0.2, 0.2, 0.1, 0.1])
networkx.generators.tests.test_intersection.TestIntersectionGraph
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.generators.tests.test_intersection.TestIntersectionGraph.test_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph
networkx.tests.test_TestIntersectionGraph.test_general_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph.test_k_random_intersection_graph(self)
networkx.tests.test_TestIntersectionGraph.test_random_intersection_graph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_random_clustered.py----------------------------------------
A:networkx.generators.tests.test_random_clustered.joint_degree_sequence->zip(node, tri)
A:networkx.generators.tests.test_random_clustered.G->networkx.random_clustered_graph([(1, 2), (2, 1), (1, 1), (1, 1), (1, 1), (2, 0)])
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid1(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_invalid2(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid(self)
networkx.generators.tests.test_random_clustered.TestRandomClusteredGraph.test_valid2(self)
networkx.tests.test_TestRandomClusteredGraph
networkx.tests.test_TestRandomClusteredGraph.test_invalid1(self)
networkx.tests.test_TestRandomClusteredGraph.test_invalid2(self)
networkx.tests.test_TestRandomClusteredGraph.test_valid(self)
networkx.tests.test_TestRandomClusteredGraph.test_valid2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/generators/tests/test_degree_seq.py----------------------------------------
A:networkx.generators.tests.test_degree_seq.G->nx.random_degree_sequence_graph(d)
A:networkx.generators.tests.test_degree_seq.G1->expected_degree_graph(deg_seq, seed=10)
A:networkx.generators.tests.test_degree_seq.G2->expected_degree_graph(deg_seq, seed=10)
networkx.generators.tests.test_degree_seq.test_configuration_model()
networkx.generators.tests.test_degree_seq.test_degree_sequence_tree()
networkx.generators.tests.test_degree_seq.test_expected_degree_graph()
networkx.generators.tests.test_degree_seq.test_havel_hakimi_construction()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph()
networkx.generators.tests.test_degree_seq.test_random_degree_sequence_graph_raise()
networkx.tests.test_test_configuration_model()
networkx.tests.test_test_degree_sequence_tree()
networkx.tests.test_test_expected_degree_graph()
networkx.tests.test_test_havel_hakimi_construction()
networkx.tests.test_test_random_degree_sequence_graph()
networkx.tests.test_test_random_degree_sequence_graph_raise()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/decorators.py----------------------------------------
A:networkx.utils.decorators._dispatch_dict->defaultdict(lambda : open)
A:networkx.utils.decorators.fh->_dispatch_dict[ext](path, mode=mode)
A:networkx.utils.decorators.new_args->list(args)
A:networkx.utils.decorators.result->func(*new_args, **kwargs)
networkx.utils._open_bz2(path,mode)
networkx.utils._open_gz(path,mode)
networkx.utils.decorators._open_bz2(path,mode)
networkx.utils.decorators._open_gz(path,mode)
networkx.utils.decorators.open_file(path_arg,mode='r')
networkx.utils.decorators.require(*packages)
networkx.utils.open_file(path_arg,mode='r')
networkx.utils.require(*packages)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/rcm.py----------------------------------------
A:networkx.utils.rcm.__author__->'\n'.join(['Aric Hagberg <aric.hagberg@gmail.com>'])
A:networkx.utils.rcm.(_, start)->find_pseudo_peripheral_node_pair(G)
A:networkx.utils.rcm.visited->set([start])
A:networkx.utils.rcm.child->next(children)
A:networkx.utils.rcm.nd->sorted(G.degree(G[child]).items(), key=itemgetter(1))
A:networkx.utils.rcm.u->next(G.nodes_iter())
A:networkx.utils.rcm.spl->networkx.shortest_path_length(G, v)
A:networkx.utils.rcm.l->max(spl.values())
networkx.utils.connected_cuthill_mckee_ordering(G,start=None)
networkx.utils.cuthill_mckee_ordering(G,start=None)
networkx.utils.find_pseudo_peripheral_node_pair(G,start=None)
networkx.utils.rcm.connected_cuthill_mckee_ordering(G,start=None)
networkx.utils.rcm.cuthill_mckee_ordering(G,start=None)
networkx.utils.rcm.find_pseudo_peripheral_node_pair(G,start=None)
networkx.utils.rcm.reverse_cuthill_mckee_ordering(G,start=None)
networkx.utils.reverse_cuthill_mckee_ordering(G,start=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/random_sequence.py----------------------------------------
A:networkx.utils.random_sequence.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)', 'Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.utils.random_sequence.trialseq->sfunction(n, **kwds)
A:networkx.utils.random_sequence.v->random.random()
A:networkx.utils.random_sequence.x->int(xmin * u ** (-(1.0 / a1)))
A:networkx.utils.random_sequence.psum->float(sum(distribution))
A:networkx.utils.random_sequence.cdf->cumulative_distribution(distribution)
A:networkx.utils.random_sequence.sample->set()
networkx.utils.create_degree_sequence(n,sfunction=None,max_tries=50,**kwds)
networkx.utils.cumulative_distribution(distribution)
networkx.utils.discrete_sequence(n,distribution=None,cdistribution=None)
networkx.utils.pareto_sequence(n,exponent=1.0)
networkx.utils.powerlaw_sequence(n,exponent=2.0)
networkx.utils.random_sequence.create_degree_sequence(n,sfunction=None,max_tries=50,**kwds)
networkx.utils.random_sequence.cumulative_distribution(distribution)
networkx.utils.random_sequence.discrete_sequence(n,distribution=None,cdistribution=None)
networkx.utils.random_sequence.pareto_sequence(n,exponent=1.0)
networkx.utils.random_sequence.powerlaw_sequence(n,exponent=2.0)
networkx.utils.random_sequence.random_weighted_sample(mapping,k)
networkx.utils.random_sequence.uniform_sequence(n)
networkx.utils.random_sequence.weighted_choice(mapping)
networkx.utils.random_sequence.zipf_rv(alpha,xmin=1,seed=None)
networkx.utils.random_sequence.zipf_sequence(n,alpha=2.0,xmin=1)
networkx.utils.random_weighted_sample(mapping,k)
networkx.utils.uniform_sequence(n)
networkx.utils.weighted_choice(mapping)
networkx.utils.zipf_rv(alpha,xmin=1,seed=None)
networkx.utils.zipf_sequence(n,alpha=2.0,xmin=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/misc.py----------------------------------------
A:networkx.utils.misc.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)', 'Dan Schult(dschult@colgate.edu)', 'Ben Edwards(bedwards@cs.unm.edu)'])
A:networkx.utils.misc.s->set(d.keys())
A:networkx.utils.misc.mapping->dict(zip(s, range(len(s))))
A:networkx.utils.misc.n->len(mapping)
A:networkx.utils.misc.a->numpy.zeros((n, n))
networkx.utils.cumulative_sum(numbers)
networkx.utils.default_opener(filename)
networkx.utils.dict_to_numpy_array(d,mapping=None)
networkx.utils.flatten(obj,result=None)
networkx.utils.generate_unique_node()
networkx.utils.is_list_of_ints(intlist)
networkx.utils.is_string_like(obj)
networkx.utils.iterable(obj)
networkx.utils.make_str(t)
networkx.utils.misc.cumulative_sum(numbers)
networkx.utils.misc.default_opener(filename)
networkx.utils.misc.dict_to_numpy_array(d,mapping=None)
networkx.utils.misc.flatten(obj,result=None)
networkx.utils.misc.generate_unique_node()
networkx.utils.misc.is_list_of_ints(intlist)
networkx.utils.misc.is_string_like(obj)
networkx.utils.misc.iterable(obj)
networkx.utils.misc.make_str(t)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/union_find.py----------------------------------------
networkx.utils.UnionFind(self)
networkx.utils.UnionFind.__getitem__(self,object)
networkx.utils.UnionFind.__iter__(self)
networkx.utils.UnionFind.union(self,*objects)
networkx.utils.union_find.UnionFind(self)
networkx.utils.union_find.UnionFind.__getitem__(self,object)
networkx.utils.union_find.UnionFind.__init__(self)
networkx.utils.union_find.UnionFind.__iter__(self)
networkx.utils.union_find.UnionFind.union(self,*objects)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/tests/test_misc.py----------------------------------------
A:networkx.utils.tests.test_misc.K->networkx.complete_graph(10)
A:networkx.utils.tests.test_misc.z->discrete_sequence(20, distribution=[0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3])
networkx.utils.tests.test_misc.test_graph_iterable()
networkx.utils.tests.test_misc.test_is_list_of_ints()
networkx.utils.tests.test_misc.test_is_string_like()
networkx.utils.tests.test_misc.test_iterable()
networkx.utils.tests.test_misc.test_random_number_distribution()
networkx.utils.tests.test_test_graph_iterable()
networkx.utils.tests.test_test_is_list_of_ints()
networkx.utils.tests.test_test_is_string_like()
networkx.utils.tests.test_test_iterable()
networkx.utils.tests.test_test_random_number_distribution()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/tests/test_random_sequence.py----------------------------------------
A:networkx.utils.tests.test_random_sequence.seq->create_degree_sequence(10, powerlaw_sequence)
A:networkx.utils.tests.test_random_sequence.r->zipf_rv(2.3)
A:networkx.utils.tests.test_random_sequence.s->random_weighted_sample(mapping, 2)
A:networkx.utils.tests.test_random_sequence.c->weighted_choice(mapping)
networkx.utils.tests.test_random_sequence.test_degree_sequences()
networkx.utils.tests.test_random_sequence.test_random_weighted_choice()
networkx.utils.tests.test_random_sequence.test_random_weighted_sample()
networkx.utils.tests.test_random_sequence.test_zipf_rv()
networkx.utils.tests.test_random_sequence.test_zipf_sequence()
networkx.utils.tests.test_test_degree_sequences()
networkx.utils.tests.test_test_random_weighted_choice()
networkx.utils.tests.test_test_random_weighted_sample()
networkx.utils.tests.test_test_zipf_rv()
networkx.utils.tests.test_test_zipf_sequence()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/tests/test_decorators.py----------------------------------------
A:networkx.utils.tests.test_decorators.self.fobj->tempfile.NamedTemporaryFile('wb+', delete=False)
A:networkx.utils.tests.test_decorators.fh->tempfile.NamedTemporaryFile('wb+', delete=False)
A:networkx.utils.tests.test_decorators.path->kwargs.get('path', None)
networkx.utils.tests.test_TestOpenFileDecorator(object)
networkx.utils.tests.test_TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.setUp(self)
networkx.utils.tests.test_TestOpenFileDecorator.tearDown(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_decorators.TestOpenFileDecorator(object)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.read(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.setUp(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.tearDown(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg0_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg1_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg2default_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_arg4default_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_fobj(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.test_writer_kwarg_str(self)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.write(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg0(path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg1(self,path)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg2default(self,x,path=None)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_arg4default(self,x,y,other='hello',path=None,**kwargs)
networkx.utils.tests.test_decorators.TestOpenFileDecorator.writer_kwarg(self,**kwargs)
networkx.utils.tests.test_decorators.test_require_decorator1()
networkx.utils.tests.test_decorators.test_require_decorator2()
networkx.utils.tests.test_test_require_decorator1()
networkx.utils.tests.test_test_require_decorator2()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/utils/tests/test_rcm.py----------------------------------------
A:networkx.utils.tests.test_rcm.G->networkx.Graph([(0, 3), (0, 5), (1, 2), (1, 4), (1, 6), (1, 9), (2, 3), (2, 4), (3, 5), (3, 8), (4, 6), (5, 6), (5, 7), (6, 7)])
A:networkx.utils.tests.test_rcm.rcm->list(reverse_cuthill_mckee_ordering(G))
networkx.utils.tests.test_rcm.test_reverse_cuthill_mckee()
networkx.utils.tests.test_test_reverse_cuthill_mckee()


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/sparsegraph6.py----------------------------------------
A:networkx.readwrite.sparsegraph6.data->graph6data(str)
A:networkx.readwrite.sparsegraph6.(n, data)->graph6n(graph6data(string[1:]))
A:networkx.readwrite.sparsegraph6.G->networkx.MultiGraph()
A:networkx.readwrite.sparsegraph6.line->line.strip().strip()
A:networkx.readwrite.sparsegraph6.chunks->iter(data)
A:networkx.readwrite.sparsegraph6.d->next(chunks)
networkx.graph6data(str)
networkx.graph6n(data)
networkx.parse_graph6(str)
networkx.parse_sparse6(string)
networkx.read_graph6(path)
networkx.read_graph6_list(path)
networkx.read_sparse6(path)
networkx.read_sparse6_list(path)
networkx.readwrite.sparsegraph6.graph6data(str)
networkx.readwrite.sparsegraph6.graph6n(data)
networkx.readwrite.sparsegraph6.parse_graph6(str)
networkx.readwrite.sparsegraph6.parse_sparse6(string)
networkx.readwrite.sparsegraph6.read_graph6(path)
networkx.readwrite.sparsegraph6.read_graph6_list(path)
networkx.readwrite.sparsegraph6.read_sparse6(path)
networkx.readwrite.sparsegraph6.read_sparse6_list(path)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/p2g.py----------------------------------------
A:networkx.readwrite.p2g.__author__->'\n'.join(['Willem Ligtenberg (w.p.a.ligtenberg@tue.nl)', 'Aric Hagberg (aric.hagberg@gmail.com)'])
A:networkx.readwrite.p2g.nodes->networkx.MultiDiGraph(name=description, selfloops=True).nodes()
A:networkx.readwrite.p2g.nodenumber->dict(zip(nodes, range(len(nodes))))
A:networkx.readwrite.p2g.G->networkx.MultiDiGraph(name=description, selfloops=True)
A:networkx.readwrite.p2g.description->next(lines).strip()
A:networkx.readwrite.p2g.(nnodes, nedges)->map(int, next(lines).split())
A:networkx.readwrite.p2g.n->next(lines).strip()
A:networkx.readwrite.p2g.nbrs[n]->map(int, next(lines).split())
networkx.p2g.parse_p2g(lines)
networkx.p2g.read_p2g(path,encoding='utf-8')
networkx.p2g.write_p2g(G,path,encoding='utf-8')
networkx.readwrite.p2g.parse_p2g(lines)
networkx.readwrite.p2g.read_p2g(path,encoding='utf-8')
networkx.readwrite.p2g.write_p2g(G,path,encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/graphml.py----------------------------------------
A:networkx.readwrite.graphml.__author__->'\n'.join(['Salim Fadhley', 'Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.readwrite.graphml.writer->GraphMLWriter(encoding=encoding, prettyprint=prettyprint)
A:networkx.readwrite.graphml.reader->GraphMLReader(node_type=node_type)
A:networkx.readwrite.graphml.glist->list(reader(path))
A:networkx.readwrite.graphml.SCHEMALOCATION->' '.join(['http://graphml.graphdrawing.org/xmlns', 'http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd'])
A:networkx.readwrite.graphml.xml_type->dict(types)
A:networkx.readwrite.graphml.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.graphml.self.xml->ElementTree(file=stream)
A:networkx.readwrite.graphml.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.graphml.key_element->Element('key', **key_kwargs)
A:networkx.readwrite.graphml.default_element->Element('default')
A:networkx.readwrite.graphml.default_element.text->make_str(default)
A:networkx.readwrite.graphml.key_id->self.get_key(name, self.xml_type[element_type], scope, default)
A:networkx.readwrite.graphml.data_element->Element('data', key=key_id)
A:networkx.readwrite.graphml.data_element.text->make_str(value)
A:networkx.readwrite.graphml.default_value->k.find('{%s}default' % self.NS_GRAPHML).get(k)
A:networkx.readwrite.graphml.obj->self.add_data(make_str(k), type(v), make_str(v), scope=scope, default=default_value)
A:networkx.readwrite.graphml.node_element->Element('node', id=make_str(node))
A:networkx.readwrite.graphml.default->k.find('{%s}default' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.edge_element->Element('edge', source=make_str(u), target=make_str(v))
A:networkx.readwrite.graphml.graphid->networkx.MultiGraph().graph.pop('id', None)
A:networkx.readwrite.graphml.graph_element->Element('graph', edgedefault=default_edge_type, id=graphid)
A:networkx.readwrite.graphml.data->self.decode_data_elements(graphml_keys, edge_element)
A:networkx.readwrite.graphml.document->ElementTree(self.xml)
A:networkx.readwrite.graphml.(keys, defaults)->self.find_graphml_keys(self.xml)
A:networkx.readwrite.graphml.edgedefault->graph_xml.get('edgedefault', None)
A:networkx.readwrite.graphml.G->networkx.MultiGraph()
A:networkx.readwrite.graphml.hyperedge->graph_xml.find('{%s}hyperedge' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.ports->Element('edge', source=make_str(u), target=make_str(v)).find('{%s}port' % self.NS_GRAPHML)
A:networkx.readwrite.graphml.node_id->self.node_type(node_xml.get('id'))
A:networkx.readwrite.graphml.directed->Element('edge', source=make_str(u), target=make_str(v)).get('directed')
A:networkx.readwrite.graphml.source->self.node_type(edge_element.get('source'))
A:networkx.readwrite.graphml.target->self.node_type(edge_element.get('target'))
A:networkx.readwrite.graphml.edge_id->self.decode_data_elements(graphml_keys, edge_element).pop('key', None)
A:networkx.readwrite.graphml.key->Element('data', key=key_id).get('key')
A:networkx.readwrite.graphml.data[data_name]->data_type(text)
A:networkx.readwrite.graphml.node_label->Element('data', key=key_id).find('{%s}%s/{%s}NodeLabel' % (self.NS_Y, node_type, self.NS_Y))
A:networkx.readwrite.graphml.edge_label->Element('data', key=key_id).find('{%s}PolyLineEdge/{%s}EdgeLabel' % (self.NS_Y, self.NS_Y))
A:networkx.readwrite.graphml.attr_id->k.get('id')
A:networkx.readwrite.graphml.attr_type->k.get('attr.type')
A:networkx.readwrite.graphml.attr_name->k.get('yfiles.type')
networkx.GraphML(object)
networkx.GraphMLReader(self,node_type=str)
networkx.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.GraphMLReader.add_node(self,G,node_xml,graphml_keys)
networkx.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults)
networkx.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.GraphMLWriter.__str__(self)
networkx.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.GraphMLWriter.add_edges(self,G,graph_element)
networkx.GraphMLWriter.add_graph_element(self,G)
networkx.GraphMLWriter.add_graphs(self,graph_list)
networkx.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.GraphMLWriter.dump(self,stream)
networkx.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.GraphMLWriter.indent(self,elem,level=0)
networkx.generate_graphml(G,encoding='utf-8',prettyprint=True)
networkx.read_graphml(path,node_type=str)
networkx.readwrite.graphml.GraphML(object)
networkx.readwrite.graphml.GraphMLReader(self,node_type=str)
networkx.readwrite.graphml.GraphMLReader.__init__(self,node_type=str)
networkx.readwrite.graphml.GraphMLReader.add_edge(self,G,edge_element,graphml_keys)
networkx.readwrite.graphml.GraphMLReader.add_node(self,G,node_xml,graphml_keys)
networkx.readwrite.graphml.GraphMLReader.decode_data_elements(self,graphml_keys,obj_xml)
networkx.readwrite.graphml.GraphMLReader.find_graphml_keys(self,graph_element)
networkx.readwrite.graphml.GraphMLReader.make_graph(self,graph_xml,graphml_keys,defaults)
networkx.readwrite.graphml.GraphMLWriter(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.GraphMLWriter.__init__(self,graph=None,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.GraphMLWriter.__str__(self)
networkx.readwrite.graphml.GraphMLWriter.add_attributes(self,scope,xml_obj,data,default)
networkx.readwrite.graphml.GraphMLWriter.add_data(self,name,element_type,value,scope='all',default=None)
networkx.readwrite.graphml.GraphMLWriter.add_edges(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.add_graph_element(self,G)
networkx.readwrite.graphml.GraphMLWriter.add_graphs(self,graph_list)
networkx.readwrite.graphml.GraphMLWriter.add_nodes(self,G,graph_element)
networkx.readwrite.graphml.GraphMLWriter.dump(self,stream)
networkx.readwrite.graphml.GraphMLWriter.get_key(self,name,attr_type,scope,default)
networkx.readwrite.graphml.GraphMLWriter.indent(self,elem,level=0)
networkx.readwrite.graphml.generate_graphml(G,encoding='utf-8',prettyprint=True)
networkx.readwrite.graphml.read_graphml(path,node_type=str)
networkx.readwrite.graphml.setup_module(module)
networkx.readwrite.graphml.teardown_module(module)
networkx.readwrite.graphml.write_graphml(G,path,encoding='utf-8',prettyprint=True)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_graphml(G,path,encoding='utf-8',prettyprint=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/nx_shp.py----------------------------------------
A:networkx.readwrite.nx_shp.net->networkx.DiGraph()
A:networkx.readwrite.nx_shp.f->shp.GetLayerByIndex(lyrindex).GetFeature(findex)
A:networkx.readwrite.nx_shp.flddata->getfieldinfo(lyr, f, fields)
A:networkx.readwrite.nx_shp.g->netgeometry(e, data)
A:networkx.readwrite.nx_shp.attributes->dict(zip(fields, flddata))
A:networkx.readwrite.nx_shp.attributes['ShpName']->shp.GetLayerByIndex(lyrindex).GetName()
A:networkx.readwrite.nx_shp.attributes['Wkb']->netgeometry(e, data).ExportToWkb()
A:networkx.readwrite.nx_shp.attributes['Wkt']->netgeometry(e, data).ExportToWkt()
A:networkx.readwrite.nx_shp.attributes['Json']->netgeometry(e, data).ExportToJson()
A:networkx.readwrite.nx_shp.shp->ogr.Open(path)
A:networkx.readwrite.nx_shp.lyrcount->ogr.Open(path).GetLayerCount()
A:networkx.readwrite.nx_shp.lyr->ogr.Open(path).GetLayerByIndex(lyrindex)
A:networkx.readwrite.nx_shp.geom->ogr.Geometry(ogr.wkbPoint)
A:networkx.readwrite.nx_shp.feature->ogr.Feature(lyr.GetLayerDefn())
A:networkx.readwrite.nx_shp.drv->ogr.GetDriverByName('ESRI Shapefile')
A:networkx.readwrite.nx_shp.shpdir->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir)
A:networkx.readwrite.nx_shp.nodes->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir).CreateLayer('nodes', None, ogr.wkbPoint)
A:networkx.readwrite.nx_shp.edges->ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(outdir).CreateLayer('edges', None, ogr.wkbLineString)
A:networkx.readwrite.nx_shp.data->G.get_edge_data(*e)
networkx.read_shp(path)
networkx.readwrite.nx_shp.read_shp(path)
networkx.readwrite.nx_shp.setup_module(module)
networkx.readwrite.nx_shp.write_shp(G,outdir)
networkx.setup_module(module)
networkx.write_shp(G,outdir)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/multiline_adjlist.py----------------------------------------
A:networkx.readwrite.multiline_adjlist.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Dan Schult <dschult@colgate.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.readwrite.multiline_adjlist.deg->int(deg)
A:networkx.readwrite.multiline_adjlist.seen->set()
A:networkx.readwrite.multiline_adjlist.G->networkx.Graph()
A:networkx.readwrite.multiline_adjlist.p->next(lines).find(comments)
A:networkx.readwrite.multiline_adjlist.(u, deg)->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.u->nodetype(u)
A:networkx.readwrite.multiline_adjlist.line->next(lines)
A:networkx.readwrite.multiline_adjlist.vlist->next(lines).strip().split(delimiter)
A:networkx.readwrite.multiline_adjlist.numb->len(vlist)
A:networkx.readwrite.multiline_adjlist.v->nodetype(v)
A:networkx.readwrite.multiline_adjlist.data->''.join(vlist)
A:networkx.readwrite.multiline_adjlist.edgedata->literal_eval(data)
networkx.generate_multiline_adjlist(G,delimiter='')
networkx.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.multiline_adjlist.generate_multiline_adjlist(G,delimiter='')
networkx.readwrite.multiline_adjlist.parse_multiline_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None)
networkx.readwrite.multiline_adjlist.read_multiline_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,edgetype=None,encoding='utf-8')
networkx.readwrite.multiline_adjlist.teardown_module(module)
networkx.readwrite.multiline_adjlist.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_multiline_adjlist(G,path,delimiter='',comments='#',encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/edgelist.py----------------------------------------
A:networkx.readwrite.edgelist.G->networkx.Graph()
A:networkx.readwrite.edgelist.p->line.find(comments)
A:networkx.readwrite.edgelist.s->line.strip().split(delimiter)
A:networkx.readwrite.edgelist.u->nodetype(u)
A:networkx.readwrite.edgelist.v->nodetype(v)
A:networkx.readwrite.edgelist.edgedata->dict(literal_eval(' '.join(d)))
A:networkx.readwrite.edgelist.edge_value->edge_type(edge_value)
networkx.generate_edgelist(G,delimiter='',data=True)
networkx.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.edgelist.generate_edgelist(G,delimiter='',data=True)
networkx.readwrite.edgelist.parse_edgelist(lines,comments='#',delimiter=None,create_using=None,nodetype=None,data=True)
networkx.readwrite.edgelist.read_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,data=True,edgetype=None,encoding='utf-8')
networkx.readwrite.edgelist.read_weighted_edgelist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.edgelist.teardown_module(module)
networkx.readwrite.edgelist.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.readwrite.edgelist.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_edgelist(G,path,comments='#',delimiter='',data=True,encoding='utf-8')
networkx.write_weighted_edgelist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/nx_yaml.py----------------------------------------
A:networkx.readwrite.nx_yaml.G->yaml.load(path)
networkx.read_yaml(path)
networkx.readwrite.nx_yaml.read_yaml(path)
networkx.readwrite.nx_yaml.setup_module(module)
networkx.readwrite.nx_yaml.teardown_module(module)
networkx.readwrite.nx_yaml.write_yaml(G,path,encoding='UTF-8',**kwds)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_yaml(G,path,encoding='UTF-8',**kwds)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/gexf.py----------------------------------------
A:networkx.readwrite.gexf.__author__->'\n'.join(['Aric Hagberg (hagberg@lanl.gov)'])
A:networkx.readwrite.gexf.writer->GEXFWriter(encoding=encoding, prettyprint=prettyprint, version=version)
A:networkx.readwrite.gexf.reader->GEXFReader(node_type=node_type, version=version)
A:networkx.readwrite.gexf.G->networkx.Graph(G)
A:networkx.readwrite.gexf.blurb->chr(1245)
A:networkx.readwrite.gexf.xml_type->dict(types)
A:networkx.readwrite.gexf.python_type->dict((reversed(a) for a in types))
A:networkx.readwrite.gexf.d->self.versions.get(version)
A:networkx.readwrite.gexf.self.xml->ElementTree(file=stream)
A:networkx.readwrite.gexf.self.edge_id->itertools.count()
A:networkx.readwrite.gexf.self.attr_id->itertools.count()
A:networkx.readwrite.gexf.s->tostring(self.xml).decode(self.encoding)
A:networkx.readwrite.gexf.graph_element->Element('graph', defaultedgetype=default, mode=self.mode)
A:networkx.readwrite.gexf.nodes_element->graph_xml.find('{%s}nodes' % self.NS_GEXF)
A:networkx.readwrite.gexf.node_data->self.add_attributes('node', node_element, node_data, default)
A:networkx.readwrite.gexf.node_id->self.node_type(node_id)
A:networkx.readwrite.gexf.label->self.add_attributes('node', node_element, node_data, default).pop('label', make_str(node))
A:networkx.readwrite.gexf.pid->self.add_attributes('node', node_element, node_data, default).pop('pid')
A:networkx.readwrite.gexf.node_element->Element('node', **kw)
A:networkx.readwrite.gexf.default->k.find('{%s}default' % self.NS_GEXF)
A:networkx.readwrite.gexf.edge_data->self.add_attributes('edge', edge_element, edge_data, default)
A:networkx.readwrite.gexf.edge_id->Element('edge', source=make_str(u), target=make_str(v), **kw).get('id')
A:networkx.readwrite.gexf.edges_element->graph_xml.find('{%s}edges' % self.NS_GEXF)
A:networkx.readwrite.gexf.edge_weight->self.add_attributes('edge', edge_element, edge_data, default).pop('weight')
A:networkx.readwrite.gexf.kw['weight']->make_str(edge_weight)
A:networkx.readwrite.gexf.edge_type->self.add_attributes('edge', edge_element, edge_data, default).pop('type')
A:networkx.readwrite.gexf.kw['type']->make_str(edge_type)
A:networkx.readwrite.gexf.edge_element->Element('edge', source=make_str(u), target=make_str(v), **kw)
A:networkx.readwrite.gexf.attvalues->Element('attvalues')
A:networkx.readwrite.gexf.attr_id->k.get('id')
A:networkx.readwrite.gexf.e->Element('spell', start=str(start), end=str(end))
A:networkx.readwrite.gexf.e.attrib['value']->make_str(v)
A:networkx.readwrite.gexf.e.attrib['start']->make_str(start)
A:networkx.readwrite.gexf.e.attrib['end']->make_str(end)
A:networkx.readwrite.gexf.new_id->str(next(self.attr_id))
A:networkx.readwrite.gexf.attribute->Element('attribute', **attr_kwargs)
A:networkx.readwrite.gexf.default_title->k.find('{%s}default' % self.NS_GEXF).get(title)
A:networkx.readwrite.gexf.default_element->Element('default')
A:networkx.readwrite.gexf.default_element.text->make_str(default_title)
A:networkx.readwrite.gexf.a_class->a.get('class')
A:networkx.readwrite.gexf.a_mode->a.get('mode', 'static')
A:networkx.readwrite.gexf.attributes_element->Element('attributes', **attr_kwargs)
A:networkx.readwrite.gexf.viz->self.add_attributes('node', node_element, node_data, default).pop('viz', False)
A:networkx.readwrite.gexf.color->node_xml.find('{%s}color' % self.NS_VIZ)
A:networkx.readwrite.gexf.size->node_xml.find('{%s}size' % self.NS_VIZ)
A:networkx.readwrite.gexf.thickness->node_xml.find('{%s}thickness' % self.NS_VIZ)
A:networkx.readwrite.gexf.shape->node_xml.find('{%s}shape' % self.NS_VIZ)
A:networkx.readwrite.gexf.position->node_xml.find('{%s}position' % self.NS_VIZ)
A:networkx.readwrite.gexf.parents->self.add_attributes('node', node_element, node_data, default).pop('parents', False)
A:networkx.readwrite.gexf.parents_element->node_xml.find('{%s}parents' % self.NS_GEXF)
A:networkx.readwrite.gexf.e.attrib['for']->str(p)
A:networkx.readwrite.gexf.slices->self.add_attributes('node', node_element, node_data, default).pop('slices', False)
A:networkx.readwrite.gexf.slices_element->node_xml.find('{%s}slices' % self.NS_GEXF)
A:networkx.readwrite.gexf.spells->self.add_attributes('node', node_element, node_data, default).pop('spells', False)
A:networkx.readwrite.gexf.spells_element->node_xml.find('{%s}spells' % self.NS_GEXF)
A:networkx.readwrite.gexf.document->ElementTree(self.xml)
A:networkx.readwrite.gexf.g->self.xml.find('{%s}graph' % self.NS_GEXF)
A:networkx.readwrite.gexf.graph_mode->graph_xml.get('mode', '')
A:networkx.readwrite.gexf.edgedefault->graph_xml.get('defaultedgetype', None)
A:networkx.readwrite.gexf.graph_start->graph_xml.get('start')
A:networkx.readwrite.gexf.graph_end->graph_xml.get('end')
A:networkx.readwrite.gexf.attributes_elements->graph_xml.findall('{%s}attributes' % self.NS_GEXF)
A:networkx.readwrite.gexf.attr_class->a.get('class')
A:networkx.readwrite.gexf.(na, nd)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.(ea, ed)->self.find_gexf_attributes(a)
A:networkx.readwrite.gexf.data->self.add_start_end(data, edge_element)
A:networkx.readwrite.gexf.node_label->node_xml.get('label')
A:networkx.readwrite.gexf.node_pid->node_xml.get('pid', node_pid)
A:networkx.readwrite.gexf.subnodes->node_xml.find('{%s}nodes' % self.NS_GEXF)
A:networkx.readwrite.gexf.node_start->xml.get('start')
A:networkx.readwrite.gexf.node_end->xml.get('end')
A:networkx.readwrite.gexf.viz['size']->float(size.get('value'))
A:networkx.readwrite.gexf.viz['thickness']->float(thickness.get('value'))
A:networkx.readwrite.gexf.viz['shape']->node_xml.find('{%s}shape' % self.NS_VIZ).get('uri')
A:networkx.readwrite.gexf.parent->p.get('for')
A:networkx.readwrite.gexf.start->a.get('start')
A:networkx.readwrite.gexf.end->a.get('end')
A:networkx.readwrite.gexf.edge_direction->Element('edge', source=make_str(u), target=make_str(v), **kw).get('type')
A:networkx.readwrite.gexf.source->self.node_type(source)
A:networkx.readwrite.gexf.target->self.node_type(target)
A:networkx.readwrite.gexf.multigraph_key->self.add_start_end(data, edge_element).pop('networkx_key', None)
A:networkx.readwrite.gexf.weight->Element('edge', source=make_str(u), target=make_str(v), **kw).get('weight')
A:networkx.readwrite.gexf.data['weight']->float(weight)
A:networkx.readwrite.gexf.edge_label->Element('edge', source=make_str(u), target=make_str(v), **kw).get('label')
A:networkx.readwrite.gexf.attr_element->obj_xml.find('{%s}attvalues' % self.NS_GEXF)
A:networkx.readwrite.gexf.key->a.get('for')
A:networkx.readwrite.gexf.value->self.python_type[atype](default.text)
A:networkx.readwrite.gexf.mode->Element('attributes', **attr_kwargs).get('mode')
A:networkx.readwrite.gexf.title->k.get('title')
A:networkx.readwrite.gexf.atype->k.get('type')
A:networkx.readwrite.gexf.(x, y)->zip(*mapping)
A:networkx.readwrite.gexf.mapping->dict(mapping)
A:networkx.readwrite.gexf.H->networkx.relabel_nodes(G, mapping)
networkx.GEXF(object)
networkx.GEXF.set_version(self,version)
networkx.GEXFReader(self,node_type=None,version='1.1draft')
networkx.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.GEXFReader.add_parents(self,data,node_xml)
networkx.GEXFReader.add_slices(self,data,node_xml)
networkx.GEXFReader.add_spells(self,data,node_xml)
networkx.GEXFReader.add_start_end(self,data,xml)
networkx.GEXFReader.add_viz(self,data,node_xml)
networkx.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.GEXFReader.make_graph(self,graph_xml)
networkx.GEXFWriter(self,graph=None,encoding='utf-8',mode='static',prettyprint=True,version='1.1draft')
networkx.GEXFWriter.__str__(self)
networkx.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.GEXFWriter.add_edges(self,G,graph_element)
networkx.GEXFWriter.add_graph(self,G)
networkx.GEXFWriter.add_nodes(self,G,graph_element)
networkx.GEXFWriter.add_parents(self,node_element,node_data)
networkx.GEXFWriter.add_slices(self,node_element,node_data)
networkx.GEXFWriter.add_spells(self,node_element,node_data)
networkx.GEXFWriter.add_viz(self,element,node_data)
networkx.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.GEXFWriter.indent(self,elem,level=0)
networkx.GEXFWriter.write(self,fh)
networkx.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.read_gexf(path,node_type=str,relabel=False,version='1.1draft')
networkx.readwrite.gexf.GEXF(object)
networkx.readwrite.gexf.GEXF.set_version(self,version)
networkx.readwrite.gexf.GEXFReader(self,node_type=None,version='1.1draft')
networkx.readwrite.gexf.GEXFReader.__init__(self,node_type=None,version='1.1draft')
networkx.readwrite.gexf.GEXFReader.add_edge(self,G,edge_element,edge_attr)
networkx.readwrite.gexf.GEXFReader.add_node(self,G,node_xml,node_attr,node_pid=None)
networkx.readwrite.gexf.GEXFReader.add_parents(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.add_slices(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.add_spells(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.add_start_end(self,data,xml)
networkx.readwrite.gexf.GEXFReader.add_viz(self,data,node_xml)
networkx.readwrite.gexf.GEXFReader.decode_attr_elements(self,gexf_keys,obj_xml)
networkx.readwrite.gexf.GEXFReader.find_gexf_attributes(self,attributes_element)
networkx.readwrite.gexf.GEXFReader.make_graph(self,graph_xml)
networkx.readwrite.gexf.GEXFWriter(self,graph=None,encoding='utf-8',mode='static',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.GEXFWriter.__init__(self,graph=None,encoding='utf-8',mode='static',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.GEXFWriter.__str__(self)
networkx.readwrite.gexf.GEXFWriter.add_attributes(self,node_or_edge,xml_obj,data,default)
networkx.readwrite.gexf.GEXFWriter.add_edges(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_graph(self,G)
networkx.readwrite.gexf.GEXFWriter.add_nodes(self,G,graph_element)
networkx.readwrite.gexf.GEXFWriter.add_parents(self,node_element,node_data)
networkx.readwrite.gexf.GEXFWriter.add_slices(self,node_element,node_data)
networkx.readwrite.gexf.GEXFWriter.add_spells(self,node_element,node_data)
networkx.readwrite.gexf.GEXFWriter.add_viz(self,element,node_data)
networkx.readwrite.gexf.GEXFWriter.get_attr_id(self,title,attr_type,edge_or_node,default,mode)
networkx.readwrite.gexf.GEXFWriter.indent(self,elem,level=0)
networkx.readwrite.gexf.GEXFWriter.write(self,fh)
networkx.readwrite.gexf.generate_gexf(G,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.readwrite.gexf.read_gexf(path,node_type=str,relabel=False,version='1.1draft')
networkx.readwrite.gexf.relabel_gexf_graph(G)
networkx.readwrite.gexf.setup_module(module)
networkx.readwrite.gexf.teardown_module(module)
networkx.readwrite.gexf.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.1draft')
networkx.relabel_gexf_graph(G)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_gexf(G,path,encoding='utf-8',prettyprint=True,version='1.1draft')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/leda.py----------------------------------------
A:networkx.readwrite.leda.G->networkx.Graph()
A:networkx.readwrite.leda.lines->iter([line.rstrip('\n') for line in lines if not (line.startswith('#') or line.startswith('\n') or line == '')])
A:networkx.readwrite.leda.du->int(next(lines))
A:networkx.readwrite.leda.n->int(next(lines))
A:networkx.readwrite.leda.symbol->str(i)
A:networkx.readwrite.leda.m->int(next(lines))
A:networkx.readwrite.leda.(s, t, reversal, label)->next(lines).split()
networkx.parse_leda(lines)
networkx.read_leda(path,encoding='UTF-8')
networkx.readwrite.leda.parse_leda(lines)
networkx.readwrite.leda.read_leda(path,encoding='UTF-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/gpickle.py----------------------------------------
networkx.read_gpickle(path)
networkx.readwrite.gpickle.read_gpickle(path)
networkx.readwrite.gpickle.teardown_module(module)
networkx.readwrite.gpickle.write_gpickle(G,path)
networkx.teardown_module(module)
networkx.write_gpickle(G,path)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/pajek.py----------------------------------------
A:networkx.readwrite.pajek.nodes->G.to_directed().nodes()
A:networkx.readwrite.pajek.nodenumber->dict(zip(nodes, range(1, len(nodes) + 1)))
A:networkx.readwrite.pajek.na->G.to_directed().node.get(n, {})
A:networkx.readwrite.pajek.x->G.to_directed().node.get(n, {}).get('x', 0.0)
A:networkx.readwrite.pajek.y->G.to_directed().node.get(n, {}).get('y', 0.0)
A:networkx.readwrite.pajek.id->int(na.get('id', nodenumber[n]))
A:networkx.readwrite.pajek.shape->G.to_directed().node.get(n, {}).get('shape', 'ellipse')
A:networkx.readwrite.pajek.s->' '.join(map(make_qstr, (nodenumber[u], nodenumber[v], value)))
A:networkx.readwrite.pajek.d->edgedata.copy()
A:networkx.readwrite.pajek.value->edgedata.copy().pop('weight', 1.0)
A:networkx.readwrite.pajek.lines->iter([line.rstrip('\n') for line in lines])
A:networkx.readwrite.pajek.G->G.to_directed().to_directed()
A:networkx.readwrite.pajek.l->next(lines)
A:networkx.readwrite.pajek.(label, name)->next(lines).split()
A:networkx.readwrite.pajek.(l, nnodes)->next(lines).split()
A:networkx.readwrite.pajek.splitline->shlex.split(str(l))
A:networkx.readwrite.pajek.extra_attr->zip(splitline[3::2], splitline[4::2])
A:networkx.readwrite.pajek.u->nodelabels.get(ui, ui)
A:networkx.readwrite.pajek.v->nodelabels.get(vi, vi)
A:networkx.readwrite.pajek.t->str(t)
networkx.generate_pajek(G)
networkx.make_qstr(t)
networkx.parse_pajek(lines)
networkx.read_pajek(path,encoding='UTF-8')
networkx.readwrite.pajek.generate_pajek(G)
networkx.readwrite.pajek.make_qstr(t)
networkx.readwrite.pajek.parse_pajek(lines)
networkx.readwrite.pajek.read_pajek(path,encoding='UTF-8')
networkx.readwrite.pajek.teardown_module(module)
networkx.readwrite.pajek.write_pajek(G,path,encoding='UTF-8')
networkx.teardown_module(module)
networkx.write_pajek(G,path,encoding='UTF-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/adjlist.py----------------------------------------
A:networkx.readwrite.adjlist.__author__->'\n'.join(['Aric Hagberg <hagberg@lanl.gov>', 'Dan Schult <dschult@colgate.edu>', 'Loïc Séguin-C. <loicseguin@gmail.com>'])
A:networkx.readwrite.adjlist.directed->networkx.Graph().is_directed()
A:networkx.readwrite.adjlist.seen->set()
A:networkx.readwrite.adjlist.G->networkx.Graph()
A:networkx.readwrite.adjlist.p->line.find(comments)
A:networkx.readwrite.adjlist.vlist->map(nodetype, vlist)
A:networkx.readwrite.adjlist.u->nodetype(u)
networkx.generate_adjlist(G,delimiter='')
networkx.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.adjlist.generate_adjlist(G,delimiter='')
networkx.readwrite.adjlist.parse_adjlist(lines,comments='#',delimiter=None,create_using=None,nodetype=None)
networkx.readwrite.adjlist.read_adjlist(path,comments='#',delimiter=None,create_using=None,nodetype=None,encoding='utf-8')
networkx.readwrite.adjlist.teardown_module(module)
networkx.readwrite.adjlist.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')
networkx.teardown_module(module)
networkx.write_adjlist(G,path,comments='#',delimiter='',encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/gml.py----------------------------------------
A:networkx.readwrite.gml.G->networkx.relabel_nodes(G, dict(mapping))
A:networkx.readwrite.gml.data->''.join(lines)
A:networkx.readwrite.gml.gml->pyparse_gml()
A:networkx.readwrite.gml.tokens->pyparse_gml().parseString(data)
A:networkx.readwrite.gml.listtype->type(tok)
A:networkx.readwrite.gml.result[str(k)]->wrap(v)
A:networkx.readwrite.gml.vdict->wrap(v)
A:networkx.readwrite.gml.source->wrap(v).pop('source')
A:networkx.readwrite.gml.target->wrap(v).pop('target')
A:networkx.readwrite.gml.(x, y)->zip(*mapping)
A:networkx.readwrite.gml.lbrack->Literal('[').suppress()
A:networkx.readwrite.gml.rbrack->Literal(']').suppress()
A:networkx.readwrite.gml.integer->Word(nums + '-').setParseAction(lambda s, l, t: [int(t[0])])
A:networkx.readwrite.gml.real->Regex('[+-]?\\d+\\.\\d*([eE][+-]?\\d+)?').setParseAction(lambda s, l, t: [float(t[0])])
A:networkx.readwrite.gml.key->Word(alphas, alphanums + '_')
A:networkx.readwrite.gml.value->Forward()
A:networkx.readwrite.gml.keyvalue->Group(key + value)
A:networkx.readwrite.gml.node->Group(Literal('node') + lbrack + Group(OneOrMore(keyvalue)) + rbrack)
A:networkx.readwrite.gml.edge->Group(Literal('edge') + lbrack + Group(OneOrMore(keyvalue)) + rbrack)
A:networkx.readwrite.gml.creator->Group(Literal('Creator') + Optional(restOfLine))
A:networkx.readwrite.gml.version->Group(Literal('Version') + Optional(restOfLine))
A:networkx.readwrite.gml.graphkey->Literal('graph').suppress()
A:networkx.readwrite.gml.graph->Dict(Optional(creator) + Optional(version) + graphkey + lbrack + ZeroOrMore(node | edge | keyvalue) + rbrack)
A:networkx.readwrite.gml.v->int(v)
A:networkx.readwrite.gml.count->iter(range(len(G)))
A:networkx.readwrite.gml.nid->networkx.relabel_nodes(G, dict(mapping)).node[n].get('id', next(count))
A:networkx.readwrite.gml.label->networkx.relabel_nodes(G, dict(mapping)).node[n].pop('label', n)
networkx.generate_gml(G)
networkx.parse_gml(lines,relabel=True)
networkx.pyparse_gml()
networkx.read_gml(path,encoding='UTF-8',relabel=False)
networkx.readwrite.gml.generate_gml(G)
networkx.readwrite.gml.parse_gml(lines,relabel=True)
networkx.readwrite.gml.pyparse_gml()
networkx.readwrite.gml.read_gml(path,encoding='UTF-8',relabel=False)
networkx.readwrite.gml.setup_module(module)
networkx.readwrite.gml.teardown_module(module)
networkx.readwrite.gml.write_gml(G,path)
networkx.setup_module(module)
networkx.teardown_module(module)
networkx.write_gml(G,path)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_edgelist.py----------------------------------------
A:networkx.readwrite.tests.test_edgelist.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_edgelist.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_edgelist.self.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_edgelist.self.XDG->networkx.MultiDiGraph(self.XG)
A:networkx.readwrite.tests.test_edgelist.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_edgelist.G->networkx.convert_node_labels_to_integers(self.G)
A:networkx.readwrite.tests.test_edgelist.fh->io.BytesIO()
A:networkx.readwrite.tests.test_edgelist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_edgelist.H->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_edgelist.blurb->chr(1245)
A:networkx.readwrite.tests.test_edgelist.H2->networkx.read_edgelist(fname, nodetype=int, create_using=nx.MultiDiGraph())
networkx.readwrite.tests.test_edgelist.TestEdgelist
networkx.readwrite.tests.test_edgelist.TestEdgelist.setUp(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_digraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_graph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_integers(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multidigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_edgelist_multigraph(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_latin1_error(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_2(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_read_edgelist_3(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_unicode(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_1(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_2(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_3(self)
networkx.readwrite.tests.test_edgelist.TestEdgelist.test_write_edgelist_4(self)
networkx.readwrite.tests.test_edgelist.assert_equal_edges(elist1,elist2)
networkx.tests.test_TestEdgelist
networkx.tests.test_TestEdgelist.setUp(self)
networkx.tests.test_TestEdgelist.test_edgelist_digraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_digraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_graph(self)
networkx.tests.test_TestEdgelist.test_edgelist_integers(self)
networkx.tests.test_TestEdgelist.test_edgelist_multidigraph(self)
networkx.tests.test_TestEdgelist.test_edgelist_multigraph(self)
networkx.tests.test_TestEdgelist.test_latin1(self)
networkx.tests.test_TestEdgelist.test_latin1_error(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_1(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_2(self)
networkx.tests.test_TestEdgelist.test_read_edgelist_3(self)
networkx.tests.test_TestEdgelist.test_unicode(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_1(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_2(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_3(self)
networkx.tests.test_TestEdgelist.test_write_edgelist_4(self)
networkx.tests.test_assert_equal_edges(elist1,elist2)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_yaml.py----------------------------------------
A:networkx.readwrite.tests.test_yaml.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_yaml.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_yaml.self.MG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_yaml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_yaml.Gin->networkx.read_yaml(fname)
networkx.readwrite.tests.test_yaml.TestYaml(object)
networkx.readwrite.tests.test_yaml.TestYaml.assert_equal(self,G,data=False)
networkx.readwrite.tests.test_yaml.TestYaml.build_graphs(self)
networkx.readwrite.tests.test_yaml.TestYaml.setUp(self)
networkx.readwrite.tests.test_yaml.TestYaml.setupClass(cls)
networkx.readwrite.tests.test_yaml.TestYaml.testDirected(self)
networkx.readwrite.tests.test_yaml.TestYaml.testMultiGraph(self)
networkx.readwrite.tests.test_yaml.TestYaml.testUndirected(self)
networkx.tests.test_yaml.TestYaml(object)
networkx.tests.test_yaml.TestYaml.assert_equal(self,G,data=False)
networkx.tests.test_yaml.TestYaml.build_graphs(self)
networkx.tests.test_yaml.TestYaml.setUp(self)
networkx.tests.test_yaml.TestYaml.setupClass(cls)
networkx.tests.test_yaml.TestYaml.testDirected(self)
networkx.tests.test_yaml.TestYaml.testMultiGraph(self)
networkx.tests.test_yaml.TestYaml.testUndirected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_sparsegraph6.py----------------------------------------
A:networkx.readwrite.tests.test_sparsegraph6.G->networkx.parse_sparse6(data)
A:networkx.readwrite.tests.test_sparsegraph6.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_sparsegraph6.fh->open(fname, 'w')
A:networkx.readwrite.tests.test_sparsegraph6.b->open(fname, 'w').write(data)
A:networkx.readwrite.tests.test_sparsegraph6.Gin->networkx.read_sparse6(fname)
A:networkx.readwrite.tests.test_sparsegraph6.glist->networkx.read_sparse6_list(fname)
networkx.readwrite.tests.test_sparsegraph6.TestGraph6(object)
networkx.readwrite.tests.test_sparsegraph6.TestGraph6.test_parse_graph6(self)
networkx.readwrite.tests.test_sparsegraph6.TestGraph6.test_read_graph6(self)
networkx.readwrite.tests.test_sparsegraph6.TestGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_sparsegraph6.TestSparseGraph6(object)
networkx.readwrite.tests.test_sparsegraph6.TestSparseGraph6.test_parse_sparse6(self)
networkx.readwrite.tests.test_sparsegraph6.TestSparseGraph6.test_read_many_graph6(self)
networkx.readwrite.tests.test_sparsegraph6.TestSparseGraph6.test_read_sparse6(self)
networkx.tests.test_TestGraph6(object)
networkx.tests.test_TestGraph6.test_parse_graph6(self)
networkx.tests.test_TestGraph6.test_read_graph6(self)
networkx.tests.test_TestGraph6.test_read_many_graph6(self)
networkx.tests.test_TestSparseGraph6(object)
networkx.tests.test_TestSparseGraph6.test_parse_sparse6(self)
networkx.tests.test_TestSparseGraph6.test_read_many_graph6(self)
networkx.tests.test_TestSparseGraph6.test_read_sparse6(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_pajek.py----------------------------------------
A:networkx.readwrite.tests.test_pajek.self.G->nx.MultiDiGraph()
A:networkx.readwrite.tests.test_pajek.(self.fd, self.fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_pajek.fh->open(self.fname, 'wb')
A:networkx.readwrite.tests.test_pajek.G->parse_pajek(self.data)
A:networkx.readwrite.tests.test_pajek.Gin->read_pajek(self.fname)
networkx.readwrite.tests.test_pajek.TestPajek(object)
networkx.readwrite.tests.test_pajek.TestPajek.setUp(self)
networkx.readwrite.tests.test_pajek.TestPajek.tearDown(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_parse_pajek_simple(self)
networkx.readwrite.tests.test_pajek.TestPajek.test_read_pajek(self)
networkx.tests.test_TestPajek(object)
networkx.tests.test_TestPajek.setUp(self)
networkx.tests.test_TestPajek.tearDown(self)
networkx.tests.test_TestPajek.test_parse_pajek(self)
networkx.tests.test_TestPajek.test_parse_pajek_simple(self)
networkx.tests.test_TestPajek.test_read_pajek(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_gexf.py----------------------------------------
A:networkx.readwrite.tests.test_gexf.self.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.self.simple_directed_fh->io.BytesIO(self.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.self.attribute_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_gexf.self.attribute_fh->io.BytesIO(self.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.self.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_gexf.self.simple_undirected_fh->io.BytesIO(self.simple_undirected_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gexf.H->networkx.read_gexf(fh, node_type=int)
A:networkx.readwrite.tests.test_gexf.fh->io.BytesIO()
A:networkx.readwrite.tests.test_gexf.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_gexf.he->sorted(H.edges(data=True))
A:networkx.readwrite.tests.test_gexf.G->networkx.Graph()
networkx.readwrite.tests.test_gexf.TestGEXF(object)
networkx.readwrite.tests.test_gexf.TestGEXF.setUp(self)
networkx.readwrite.tests.test_gexf.TestGEXF.setupClass(cls)
networkx.readwrite.tests.test_gexf.TestGEXF.test_default_attribute(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_key_error(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_relabel(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_gexf.TestGEXF.test_write_read_simple_directed_graphml(self)
networkx.tests.test_TestGEXF(object)
networkx.tests.test_TestGEXF.setUp(self)
networkx.tests.test_TestGEXF.setupClass(cls)
networkx.tests.test_TestGEXF.test_default_attribute(self)
networkx.tests.test_TestGEXF.test_directed_edge_in_undirected(self)
networkx.tests.test_TestGEXF.test_key_error(self)
networkx.tests.test_TestGEXF.test_read_attribute_graphml(self)
networkx.tests.test_TestGEXF.test_read_simple_directed_graphml(self)
networkx.tests.test_TestGEXF.test_read_simple_undirected_graphml(self)
networkx.tests.test_TestGEXF.test_relabel(self)
networkx.tests.test_TestGEXF.test_undirected_edge_in_directed(self)
networkx.tests.test_TestGEXF.test_write_read_simple_directed_graphml(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_leda.py----------------------------------------
A:networkx.readwrite.tests.test_leda.G->networkx.parse_leda(data)
A:networkx.readwrite.tests.test_leda.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_leda.fh->open(fname, 'w')
A:networkx.readwrite.tests.test_leda.b->open(fname, 'w').write(data)
A:networkx.readwrite.tests.test_leda.Gin->networkx.read_leda(fname)
networkx.readwrite.tests.test_leda.TestLEDA(object)
networkx.readwrite.tests.test_leda.TestLEDA.test_parse_leda(self)
networkx.readwrite.tests.test_leda.TestLEDA.test_read_LEDA(self)
networkx.tests.test_TestLEDA(object)
networkx.tests.test_TestLEDA.test_parse_leda(self)
networkx.tests.test_TestLEDA.test_read_LEDA(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_p2g.py----------------------------------------
A:networkx.readwrite.tests.test_p2g.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_p2g.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_p2g.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_p2g.G->networkx.DiGraph()
A:networkx.readwrite.tests.test_p2g.fh->io.BytesIO()
A:networkx.readwrite.tests.test_p2g.r->io.BytesIO().read()
A:networkx.readwrite.tests.test_p2g.H->read_p2g(fh)
networkx.readwrite.tests.test_p2g.TestP2G
networkx.readwrite.tests.test_p2g.TestP2G.setUp(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_read_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_p2g(self)
networkx.readwrite.tests.test_p2g.TestP2G.test_write_read_p2g(self)
networkx.readwrite.tests.test_p2g.assert_equal_edges(elist1,elist2)
networkx.tests.test_p2g.TestP2G
networkx.tests.test_p2g.TestP2G.setUp(self)
networkx.tests.test_p2g.TestP2G.test_read_p2g(self)
networkx.tests.test_p2g.TestP2G.test_write_p2g(self)
networkx.tests.test_p2g.TestP2G.test_write_read_p2g(self)
networkx.tests.test_p2g.assert_equal_edges(elist1,elist2)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_graphml.py----------------------------------------
A:networkx.readwrite.tests.test_graphml.self.simple_directed_graph->networkx.DiGraph()
A:networkx.readwrite.tests.test_graphml.self.simple_directed_fh->io.BytesIO(self.simple_directed_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.self.attribute_graph->networkx.DiGraph(id='G')
A:networkx.readwrite.tests.test_graphml.self.attribute_fh->io.BytesIO(self.attribute_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.self.simple_undirected_graph->networkx.Graph()
A:networkx.readwrite.tests.test_graphml.self.simple_undirected_fh->io.BytesIO(self.simple_undirected_data.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.H->networkx.read_graphml(fname, node_type=node_type)
A:networkx.readwrite.tests.test_graphml.fh->io.BytesIO(s.encode('UTF-8'))
A:networkx.readwrite.tests.test_graphml.ge->sorted(G.edges(data=True))
A:networkx.readwrite.tests.test_graphml.he->sorted(H.edges(data=True))
A:networkx.readwrite.tests.test_graphml.G->networkx.read_graphml(fh)
A:networkx.readwrite.tests.test_graphml.(fd, fname)->tempfile.mkstemp()
networkx.readwrite.tests.test_graphml.TestGraph(object)
networkx.readwrite.tests.test_graphml.TestGraph.setUp(self)
networkx.readwrite.tests.test_graphml.TestGraph.setupClass(cls)
networkx.readwrite.tests.test_graphml.TestGraph.test_bool(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_default_attribute(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_directed_edge_in_undirected(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_hyperedge_error(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_key_error(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_keys(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_multigraph_to_graph(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_attribute_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_read_simple_undirected_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_undirected_edge_in_directed(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_unicode(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_write_read_simple_directed_graphml(self)
networkx.readwrite.tests.test_graphml.TestGraph.test_yfiles_extension(self)
networkx.tests.test_TestGraph(object)
networkx.tests.test_TestGraph.setUp(self)
networkx.tests.test_TestGraph.setupClass(cls)
networkx.tests.test_TestGraph.test_bool(self)
networkx.tests.test_TestGraph.test_default_attribute(self)
networkx.tests.test_TestGraph.test_directed_edge_in_undirected(self)
networkx.tests.test_TestGraph.test_hyperedge_error(self)
networkx.tests.test_TestGraph.test_key_error(self)
networkx.tests.test_TestGraph.test_multigraph_keys(self)
networkx.tests.test_TestGraph.test_multigraph_to_graph(self)
networkx.tests.test_TestGraph.test_read_attribute_graphml(self)
networkx.tests.test_TestGraph.test_read_simple_directed_graphml(self)
networkx.tests.test_TestGraph.test_read_simple_undirected_graphml(self)
networkx.tests.test_TestGraph.test_undirected_edge_in_directed(self)
networkx.tests.test_TestGraph.test_unicode(self)
networkx.tests.test_TestGraph.test_write_read_simple_directed_graphml(self)
networkx.tests.test_TestGraph.test_yfiles_extension(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_adjlist.py----------------------------------------
A:networkx.readwrite.tests.test_adjlist.self.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_adjlist.self.DG->networkx.DiGraph(self.G)
A:networkx.readwrite.tests.test_adjlist.self.XG->networkx.MultiGraph()
A:networkx.readwrite.tests.test_adjlist.self.XDG->networkx.MultiDiGraph(self.XG)
A:networkx.readwrite.tests.test_adjlist.bytesIO->io.BytesIO(s)
A:networkx.readwrite.tests.test_adjlist.G->networkx.convert_node_labels_to_integers(self.G)
A:networkx.readwrite.tests.test_adjlist.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_adjlist.H->networkx.read_multiline_adjlist(fname, nodetype=int, create_using=nx.MultiDiGraph())
A:networkx.readwrite.tests.test_adjlist.blurb->chr(1245)
A:networkx.readwrite.tests.test_adjlist.H2->networkx.read_multiline_adjlist(fname, nodetype=int, create_using=nx.MultiDiGraph())
networkx.readwrite.tests.test_adjlist.TestAdjlist
networkx.readwrite.tests.test_adjlist.TestAdjlist.setUp(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_adjlist_multigraph(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_latin1_error(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.readwrite.tests.test_adjlist.TestAdjlist.test_unicode(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.setUp(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.readwrite.tests.test_adjlist.TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)
networkx.tests.test_TestAdjlist
networkx.tests.test_TestAdjlist.setUp(self)
networkx.tests.test_TestAdjlist.test_adjlist_digraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_digraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_graph(self)
networkx.tests.test_TestAdjlist.test_adjlist_integers(self)
networkx.tests.test_TestAdjlist.test_adjlist_multidigraph(self)
networkx.tests.test_TestAdjlist.test_adjlist_multigraph(self)
networkx.tests.test_TestAdjlist.test_latin1(self)
networkx.tests.test_TestAdjlist.test_latin1_error(self)
networkx.tests.test_TestAdjlist.test_read_multiline_adjlist_1(self)
networkx.tests.test_TestAdjlist.test_unicode(self)
networkx.tests.test_TestMultilineAdjlist
networkx.tests.test_TestMultilineAdjlist.setUp(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_digraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_graph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_integers(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multidigraph(self)
networkx.tests.test_TestMultilineAdjlist.test_multiline_adjlist_multigraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_gml.py----------------------------------------
A:networkx.readwrite.tests.test_gml.G->networkx.Graph()
A:networkx.readwrite.tests.test_gml.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_gml.fh->io.BytesIO(data.encode('UTF-8'))
A:networkx.readwrite.tests.test_gml.Gin->networkx.read_gml(fname, relabel=True)
A:networkx.readwrite.tests.test_gml.data->'\n'.join(list(networkx.generate_gml(G)))
networkx.readwrite.tests.test_gml.TestGraph(object)
networkx.readwrite.tests.test_gml.TestGraph.setUp(self)
networkx.readwrite.tests.test_gml.TestGraph.setupClass(cls)
networkx.readwrite.tests.test_gml.TestGraph.test_bool(self)
networkx.readwrite.tests.test_gml.TestGraph.test_parse_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_read_gml(self)
networkx.readwrite.tests.test_gml.TestGraph.test_relabel_duplicate(self)
networkx.tests.test_TestGraph(object)
networkx.tests.test_TestGraph.setUp(self)
networkx.tests.test_TestGraph.setupClass(cls)
networkx.tests.test_TestGraph.test_bool(self)
networkx.tests.test_TestGraph.test_parse_gml(self)
networkx.tests.test_TestGraph.test_read_gml(self)
networkx.tests.test_TestGraph.test_relabel_duplicate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_gpickle.py----------------------------------------
A:networkx.readwrite.tests.test_gpickle.G->networkx.Graph(name='test')
A:networkx.readwrite.tests.test_gpickle.(fd, fname)->tempfile.mkstemp()
A:networkx.readwrite.tests.test_gpickle.Gin->networkx.read_gpickle(fname)
networkx.readwrite.tests.test_gpickle.TestGpickle(object)
networkx.readwrite.tests.test_gpickle.TestGpickle.setUp(self)
networkx.readwrite.tests.test_gpickle.TestGpickle.test_gpickle(self)
networkx.tests.test_TestGpickle(object)
networkx.tests.test_TestGpickle.setUp(self)
networkx.tests.test_TestGpickle.test_gpickle(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/tests/test_shp.py----------------------------------------
A:networkx.readwrite.tests.test_shp.lyr->createlayer(shp)
A:networkx.readwrite.tests.test_shp.namedef->osgeo.ogr.FieldDefn('Name', ogr.OFTString)
A:networkx.readwrite.tests.test_shp.drv->osgeo.ogr.GetDriverByName('ESRI Shapefile')
A:networkx.readwrite.tests.test_shp.testdir->os.path.join(tempfile.gettempdir(), 'shpdir')
A:networkx.readwrite.tests.test_shp.shppath->os.path.join(tempfile.gettempdir(), 'tmpshp.shp')
A:networkx.readwrite.tests.test_shp.shp->osgeo.ogr.GetDriverByName('ESRI Shapefile').CreateDataSource(shppath)
A:networkx.readwrite.tests.test_shp.feat->osgeo.ogr.Feature(lyr.GetLayerDefn())
A:networkx.readwrite.tests.test_shp.g->osgeo.ogr.Geometry(ogr.wkbLineString)
A:networkx.readwrite.tests.test_shp.expected->networkx.DiGraph()
A:networkx.readwrite.tests.test_shp.G->networkx.read_shp(self.shppath)
A:networkx.readwrite.tests.test_shp.feature->createlayer(shp).GetNextFeature()
A:networkx.readwrite.tests.test_shp.tpath->os.path.join(tempfile.gettempdir(), 'shpdir')
A:networkx.readwrite.tests.test_shp.shpdir->osgeo.ogr.Open(tpath)
A:networkx.readwrite.tests.test_shp.nodes->osgeo.ogr.Open(tpath).GetLayerByName('nodes')
networkx.readwrite.tests.test_shp.TestShp(object)
networkx.readwrite.tests.test_shp.TestShp.deletetmp(self,drv,*paths)
networkx.readwrite.tests.test_shp.TestShp.setUp(self)
networkx.readwrite.tests.test_shp.TestShp.setupClass(cls)
networkx.readwrite.tests.test_shp.TestShp.tearDown(self)
networkx.readwrite.tests.test_shp.TestShp.test_attributeexport(self)
networkx.readwrite.tests.test_shp.TestShp.test_geometryexport(self)
networkx.readwrite.tests.test_shp.TestShp.testload(self)
networkx.tests.test_shp.TestShp(object)
networkx.tests.test_shp.TestShp.deletetmp(self,drv,*paths)
networkx.tests.test_shp.TestShp.setUp(self)
networkx.tests.test_shp.TestShp.setupClass(cls)
networkx.tests.test_shp.TestShp.tearDown(self)
networkx.tests.test_shp.TestShp.test_attributeexport(self)
networkx.tests.test_shp.TestShp.test_geometryexport(self)
networkx.tests.test_shp.TestShp.testload(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/node_link.py----------------------------------------
A:networkx.readwrite.json_graph.node_link.mapping->dict(zip(G, count()))
A:networkx.readwrite.json_graph.node_link.data['directed']->G.is_directed()
A:networkx.readwrite.json_graph.node_link.data['multigraph']->G.is_multigraph()
A:networkx.readwrite.json_graph.node_link.data['graph']->list(G.graph.items())
A:networkx.readwrite.json_graph.node_link.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.node_link.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.node_link.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.node_link.graph.graph->dict(data.get('graph', []))
A:networkx.readwrite.json_graph.node_link.c->count()
A:networkx.readwrite.json_graph.node_link.node->d.get('id', next(c))
A:networkx.readwrite.json_graph.node_link.nodedata->dict(((str(k), v) for (k, v) in d.items() if k != 'id'))
A:networkx.readwrite.json_graph.node_link.source->d.pop('source')
A:networkx.readwrite.json_graph.node_link.target->d.pop('target')
A:networkx.readwrite.json_graph.node_link.edgedata->dict(((str(k), v) for (k, v) in d.items() if k != 'source' and k != 'target'))
networkx.json_graph.node_link_data(G)
networkx.json_graph.node_link_graph(data,directed=False,multigraph=True)
networkx.readwrite.json_graph.node_link.node_link_data(G)
networkx.readwrite.json_graph.node_link.node_link_graph(data,directed=False,multigraph=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/serialize.py----------------------------------------
A:networkx.readwrite.json_graph.serialize.d->json.loads(s)
A:networkx.readwrite.json_graph.serialize.dumps->partial(json.dumps, cls=NXJSONEncoder)
A:networkx.readwrite.json_graph.serialize.loads->partial(json.loads, cls=NXJSONDecoder)
A:networkx.readwrite.json_graph.serialize.dump->partial(json.dump, cls=NXJSONEncoder)
A:networkx.readwrite.json_graph.serialize.load->partial(json.load, cls=NXJSONDecoder)
networkx.json_graph.NXJSONDecoder(json.JSONDecoder)
networkx.json_graph.NXJSONDecoder.decode(self,s)
networkx.json_graph.NXJSONEncoder(json.JSONEncoder)
networkx.json_graph.NXJSONEncoder.default(self,o)
networkx.readwrite.json_graph.serialize.NXJSONDecoder(json.JSONDecoder)
networkx.readwrite.json_graph.serialize.NXJSONDecoder.decode(self,s)
networkx.readwrite.json_graph.serialize.NXJSONEncoder(json.JSONEncoder)
networkx.readwrite.json_graph.serialize.NXJSONEncoder.default(self,o)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/tree.py----------------------------------------
A:networkx.readwrite.json_graph.tree.d->dict(id=child, **G.node[child])
A:networkx.readwrite.json_graph.tree.c->add_children(child, G)
A:networkx.readwrite.json_graph.tree.data->dict(id=root, **G.node[root])
A:networkx.readwrite.json_graph.tree.data['children']->add_children(root, G)
A:networkx.readwrite.json_graph.tree.graph->networkx.DiGraph()
A:networkx.readwrite.json_graph.tree.grandchildren->dict(id=root, **G.node[root]).get('children', [])
A:networkx.readwrite.json_graph.tree.nodedata->dict(((k, v) for (k, v) in data.items() if k != 'id' and k != 'children'))
A:networkx.readwrite.json_graph.tree.children->dict(id=root, **G.node[root]).get('children', [])
networkx.json_graph.tree_data(G,root)
networkx.json_graph.tree_graph(data)
networkx.readwrite.json_graph.tree.tree_data(G,root)
networkx.readwrite.json_graph.tree.tree_graph(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.adjacency.data['directed']->G.is_directed()
A:networkx.readwrite.json_graph.adjacency.data['multigraph']->G.is_multigraph()
A:networkx.readwrite.json_graph.adjacency.data['graph']->list(G.graph.items())
A:networkx.readwrite.json_graph.adjacency.multigraph->data.get('multigraph', multigraph)
A:networkx.readwrite.json_graph.adjacency.directed->data.get('directed', directed)
A:networkx.readwrite.json_graph.adjacency.graph->graph.to_directed().to_directed()
A:networkx.readwrite.json_graph.adjacency.graph.graph->dict(data.get('graph', []))
A:networkx.readwrite.json_graph.adjacency.node->d.pop('id')
A:networkx.readwrite.json_graph.adjacency.target->tdata.pop('id')
networkx.json_graph.adjacency_data(G)
networkx.json_graph.adjacency_graph(data,directed=False,multigraph=True)
networkx.readwrite.json_graph.adjacency.adjacency_data(G)
networkx.readwrite.json_graph.adjacency.adjacency_graph(data,directed=False,multigraph=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/tests/test_node_link.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_node_link.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_node_link.H->node_link_graph(node_link_data(G))
A:networkx.readwrite.json_graph.tests.test_node_link.d->json.dumps(node_link_data(G))
networkx.json_graph.tests.test_TestNodeLink
networkx.json_graph.tests.test_TestNodeLink.test_digraph(self)
networkx.json_graph.tests.test_TestNodeLink.test_graph(self)
networkx.json_graph.tests.test_TestNodeLink.test_graph_attributes(self)
networkx.json_graph.tests.test_TestNodeLink.test_multidigraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_digraph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_node_link.TestNodeLink.test_multidigraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/tests/test_adjacency.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_adjacency.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_adjacency.H->adjacency_graph(adjacency_data(G))
A:networkx.readwrite.json_graph.tests.test_adjacency.d->json.dumps(adjacency_data(G))
networkx.json_graph.tests.test_TestAdjacency
networkx.json_graph.tests.test_TestAdjacency.test_digraph(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph_attributes(self)
networkx.json_graph.tests.test_TestAdjacency.test_multidigraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_digraph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_adjacency.TestAdjacency.test_multidigraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/tests/test_serialize.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_serialize.G->networkx.MultiDiGraph()
A:networkx.readwrite.json_graph.tests.test_serialize.H->loads(dumps(G))
A:networkx.readwrite.json_graph.tests.test_serialize.io->StringIO()
networkx.json_graph.tests.test_TestAdjacency
networkx.json_graph.tests.test_TestAdjacency.test_digraph(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph(self)
networkx.json_graph.tests.test_TestAdjacency.test_graph_attributes(self)
networkx.json_graph.tests.test_TestAdjacency.test_multidigraph(self)
networkx.readwrite.json_graph.tests.test_serialize.TestAdjacency
networkx.readwrite.json_graph.tests.test_serialize.TestAdjacency.test_digraph(self)
networkx.readwrite.json_graph.tests.test_serialize.TestAdjacency.test_graph(self)
networkx.readwrite.json_graph.tests.test_serialize.TestAdjacency.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_serialize.TestAdjacency.test_multidigraph(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/networkx1.6/lib/python3.6/site-packages/networkx/readwrite/json_graph/tests/test_tree.py----------------------------------------
A:networkx.readwrite.json_graph.tests.test_tree.G->networkx.DiGraph()
A:networkx.readwrite.json_graph.tests.test_tree.H->tree_graph(json.loads(d))
A:networkx.readwrite.json_graph.tests.test_tree.d->json.dumps(tree_data(G, 1))
networkx.json_graph.tests.test_TestTree
networkx.json_graph.tests.test_TestTree.test_graph(self)
networkx.json_graph.tests.test_TestTree.test_graph_attributes(self)
networkx.readwrite.json_graph.tests.test_tree.TestTree
networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph(self)
networkx.readwrite.json_graph.tests.test_tree.TestTree.test_graph_attributes(self)

