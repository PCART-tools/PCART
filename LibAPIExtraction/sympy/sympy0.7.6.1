
----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/__init__.py----------------------------------------
A:sympy.__init__.debug_str->os.getenv('SYMPY_DEBUG', 'False')
A:sympy.__init__.SYMPY_DEBUG->__sympy_debug()
sympy.__init__.__sympy_debug()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/release.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/abc.py----------------------------------------
A:sympy.abc._latin->list(string.ascii_letters)
A:sympy.abc._greek->list(greeks)
A:sympy.abc.(k, _)->ns.popitem()
A:sympy.abc.clash2[k]->Symbol(k)
A:sympy.abc.clash1[k]->Symbol(k)
A:sympy.abc.(_clash1, _clash2, _clash)->clashing()
sympy.abc.clashing()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/conftest.py----------------------------------------
A:sympy.conftest.sp->re.compile('([0-9]+)/([1-9][0-9]*)')
A:sympy.conftest.split->config.getoption('--split')
A:sympy.conftest.m->re.compile('([0-9]+)/([1-9][0-9]*)').match(split)
A:sympy.conftest.(i, t)->map(int, m.groups())
A:sympy.conftest.version->gmpy2.version()
sympy.conftest.check_disabled(request)
sympy.conftest.file_clear_cache()
sympy.conftest.process_split(session,config,items)
sympy.conftest.pytest_addoption(parser)
sympy.conftest.pytest_collection_modifyitems(session,config,items)
sympy.conftest.pytest_report_header(config)
sympy.conftest.pytest_terminal_summary(terminalreporter)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/baseclasses.py----------------------------------------
A:sympy.categories.baseclasses.normalised_components->CompositeMorphism._add_morphism(normalised_components, components[-1])
A:sympy.categories.baseclasses.new_category->sympy.core.Basic.__new__(cls, Symbol(name), Class(objects), FiniteSet(*commutative_diagrams))
A:sympy.categories.baseclasses.empty->EmptySet()
A:sympy.categories.baseclasses.id_dom->IdentityMorphism(morphism.domain)
A:sympy.categories.baseclasses.id_cod->IdentityMorphism(morphism.codomain)
A:sympy.categories.baseclasses.objects->EmptySet()
A:sympy.categories.baseclasses.premises->all([m in self.premises and diagram.premises[m] == self.premises[m] for m in diagram.premises])
A:sympy.categories.baseclasses.conclusions->all([m in self.conclusions and diagram.conclusions[m] == self.conclusions[m] for m in diagram.conclusions])
sympy.categories.Category(cls,name,objects=EmptySet(),commutative_diagrams=EmptySet())
sympy.categories.Category.all_morphisms(self)
sympy.categories.Category.commutative_diagrams(self)
sympy.categories.Category.hom(self,A,B)
sympy.categories.Category.name(self)
sympy.categories.Category.objects(self)
sympy.categories.CompositeMorphism(cls,*components)
sympy.categories.CompositeMorphism._add_morphism(t,morphism)
sympy.categories.CompositeMorphism.codomain(self)
sympy.categories.CompositeMorphism.components(self)
sympy.categories.CompositeMorphism.domain(self)
sympy.categories.CompositeMorphism.flatten(self,new_name)
sympy.categories.Diagram(cls,*args)
sympy.categories.Diagram._add_morphism_closure(morphisms,morphism,props,add_identities=True,recurse_composites=True)
sympy.categories.Diagram._set_dict_union(dictionary,key,value)
sympy.categories.Diagram.conclusions(self)
sympy.categories.Diagram.hom(self,A,B)
sympy.categories.Diagram.is_subdiagram(self,diagram)
sympy.categories.Diagram.objects(self)
sympy.categories.Diagram.premises(self)
sympy.categories.Diagram.subdiagram_from_objects(self,objects)
sympy.categories.IdentityMorphism(cls,domain)
sympy.categories.Morphism(cls,domain,codomain)
sympy.categories.Morphism.__mul__(self,other)
sympy.categories.Morphism.codomain(self)
sympy.categories.Morphism.compose(self,other)
sympy.categories.Morphism.domain(self)
sympy.categories.NamedMorphism(cls,domain,codomain,name)
sympy.categories.NamedMorphism.name(self)
sympy.categories.Object(Symbol)
sympy.categories.baseclasses.Category(cls,name,objects=EmptySet(),commutative_diagrams=EmptySet())
sympy.categories.baseclasses.Category.__new__(cls,name,objects=EmptySet(),commutative_diagrams=EmptySet())
sympy.categories.baseclasses.Category.all_morphisms(self)
sympy.categories.baseclasses.Category.commutative_diagrams(self)
sympy.categories.baseclasses.Category.hom(self,A,B)
sympy.categories.baseclasses.Category.name(self)
sympy.categories.baseclasses.Category.objects(self)
sympy.categories.baseclasses.Class(Set)
sympy.categories.baseclasses.CompositeMorphism(cls,*components)
sympy.categories.baseclasses.CompositeMorphism.__new__(cls,*components)
sympy.categories.baseclasses.CompositeMorphism._add_morphism(t,morphism)
sympy.categories.baseclasses.CompositeMorphism.codomain(self)
sympy.categories.baseclasses.CompositeMorphism.components(self)
sympy.categories.baseclasses.CompositeMorphism.domain(self)
sympy.categories.baseclasses.CompositeMorphism.flatten(self,new_name)
sympy.categories.baseclasses.Diagram(cls,*args)
sympy.categories.baseclasses.Diagram.__new__(cls,*args)
sympy.categories.baseclasses.Diagram._add_morphism_closure(morphisms,morphism,props,add_identities=True,recurse_composites=True)
sympy.categories.baseclasses.Diagram._set_dict_union(dictionary,key,value)
sympy.categories.baseclasses.Diagram.conclusions(self)
sympy.categories.baseclasses.Diagram.hom(self,A,B)
sympy.categories.baseclasses.Diagram.is_subdiagram(self,diagram)
sympy.categories.baseclasses.Diagram.objects(self)
sympy.categories.baseclasses.Diagram.premises(self)
sympy.categories.baseclasses.Diagram.subdiagram_from_objects(self,objects)
sympy.categories.baseclasses.IdentityMorphism(cls,domain)
sympy.categories.baseclasses.IdentityMorphism.__new__(cls,domain)
sympy.categories.baseclasses.Morphism(cls,domain,codomain)
sympy.categories.baseclasses.Morphism.__mul__(self,other)
sympy.categories.baseclasses.Morphism.__new__(cls,domain,codomain)
sympy.categories.baseclasses.Morphism.codomain(self)
sympy.categories.baseclasses.Morphism.compose(self,other)
sympy.categories.baseclasses.Morphism.domain(self)
sympy.categories.baseclasses.NamedMorphism(cls,domain,codomain,name)
sympy.categories.baseclasses.NamedMorphism.__new__(cls,domain,codomain,name)
sympy.categories.baseclasses.NamedMorphism.name(self)
sympy.categories.baseclasses.Object(Symbol)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/diagram_drawing.py----------------------------------------
A:sympy.categories.diagram_drawing.edges1->dict(edges)
A:sympy.categories.diagram_drawing.wv->DiagramGrid._juxtapose_edges(w, v)
A:sympy.categories.diagram_drawing.triangles->DiagramGrid._drop_irrelevant_triangles(triangles, placed_objects)
A:sympy.categories.diagram_drawing.pt1_empty->DiagramGrid._empty_point(pt1, grid)
A:sympy.categories.diagram_drawing.pt2_empty->DiagramGrid._empty_point(pt2, grid)
A:sympy.categories.diagram_drawing.obj->DiagramGrid._other_vertex(tri, (grid[a], grid[b]))
A:sympy.categories.diagram_drawing.target_cell->DiagramGrid._choose_target_cell(left_up, left_down, (a, b), obj, skeleton, grid)
A:sympy.categories.diagram_drawing.offset->DiagramGrid._put_object(pt, other_obj, grid, fringe)
A:sympy.categories.diagram_drawing.objects->sorted(all_objects, key=default_sort_key)
A:sympy.categories.diagram_drawing.sorted_candidates->sorted(candidates, key=default_sort_key)
A:sympy.categories.diagram_drawing.objs->DiagramGrid._triangle_objects(tri)
A:sympy.categories.diagram_drawing.candidates->sorted([e for e in tri if skeleton[e]], key=lambda e: FiniteSet(*e).sort_key())
A:sympy.categories.diagram_drawing.groups_grids[group]->DiagramGrid(diagram.subdiagram_from_objects(group), **hints)
A:sympy.categories.diagram_drawing.finiteset_group->group_to_finiteset(group)
A:sympy.categories.diagram_drawing.top_grid->DiagramGrid(Diagram(new_morphisms))
A:sympy.categories.diagram_drawing.grid->DiagramGrid(diagram, groups, **hints)
A:sympy.categories.diagram_drawing.all_objects->set(diagram.objects)
A:sympy.categories.diagram_drawing.skeleton->DiagramGrid._build_skeleton(merged_morphisms)
A:sympy.categories.diagram_drawing.triangle_sizes->DiagramGrid._compute_triangle_min_sizes(triangles, skeleton)
A:sympy.categories.diagram_drawing.root_edge->DiagramGrid._pick_root_edge(triangles[0], skeleton)
A:sympy.categories.diagram_drawing.placed_objects->set([root])
A:sympy.categories.diagram_drawing.welding->DiagramGrid._find_triangle_to_weld(triangles, fringe, grid)
A:sympy.categories.diagram_drawing.restart_required->DiagramGrid._weld_triangle(triangle, welding_edge, fringe, grid, skeleton)
A:sympy.categories.diagram_drawing.new_obj->DiagramGrid._grow_pseudopod(triangles, fringe, grid, skeleton, placed_objects)
A:sympy.categories.diagram_drawing.remaining_diagram->diagram.subdiagram_from_objects(FiniteSet(*remaining_objects))
A:sympy.categories.diagram_drawing.remaining_grid->DiagramGrid(remaining_diagram)
A:sympy.categories.diagram_drawing.final_height->max(grid.height, remaining_grid.height)
A:sympy.categories.diagram_drawing.final_grid->_GrowableGrid(final_width, final_height)
A:sympy.categories.diagram_drawing.sorted_objects->sorted(objects, key=default_sort_key)
A:sympy.categories.diagram_drawing.adjlists->DiagramGrid._get_undirected_graph(objects, merged_morphisms)
A:sympy.categories.diagram_drawing.mindegree->len(adjlists[root])
A:sympy.categories.diagram_drawing.current_degree->len(adjlists[obj])
A:sympy.categories.diagram_drawing.adjlist->DiagramGrid._get_undirected_graph(objects, merged_morphisms)
A:sympy.categories.diagram_drawing.current_morphisms[IdentityMorphism(component[0])]->FiniteSet()
A:sympy.categories.diagram_drawing.premises->DiagramGrid._simplify_morphisms(diagram.premises)
A:sympy.categories.diagram_drawing.conclusions->DiagramGrid._simplify_morphisms(diagram.conclusions)
A:sympy.categories.diagram_drawing.all_merged_morphisms->DiagramGrid._merge_premises_conclusions(premises, conclusions)
A:sympy.categories.diagram_drawing.merged_morphisms->DiagramGrid._drop_inessential_morphisms(all_merged_morphisms)
A:sympy.categories.diagram_drawing.components->sorted(components, key=default_sort_key)
A:sympy.categories.diagram_drawing.self._grid->DiagramGrid._generic_layout(diagram, merged_morphisms)
A:sympy.categories.diagram_drawing.total_width->sum((g.width for g in grids))
A:sympy.categories.diagram_drawing.total_height->max((g.height for g in grids))
A:sympy.categories.diagram_drawing.vertical_direction->repeat_string_cond(delta_i, 'd', 'u')
A:sympy.categories.diagram_drawing.horizontal_direction->repeat_string_cond(delta_j, 'r', 'l')
A:sympy.categories.diagram_drawing.(curving, label_pos, looping_start, looping_end)->XypicDiagramDrawer._process_loop_morphism(i, j, grid, morphisms_str_info, object_coords)
A:sympy.categories.diagram_drawing.(curving, label_pos)->XypicDiagramDrawer._process_vertical_morphism(i, j, target_i, grid, morphisms_str_info, object_coords)
A:sympy.categories.diagram_drawing.count->count_morphisms_undirected(morphism.domain, morphism.codomain)
A:sympy.categories.diagram_drawing.filtered_morphisms->count_morphisms_filtered(morphism.domain, morphism.codomain, curving)
A:sympy.categories.diagram_drawing.morphism_name->latex(Symbol(morphism.name))
A:sympy.categories.diagram_drawing.free_up->all([grid[dom_i - 1, j] for j in xrange(start, end + 1)])
A:sympy.categories.diagram_drawing.free_down->all([not grid[dom_i + 1, j] for j in xrange(start, end + 1)])
A:sympy.categories.diagram_drawing.free_left->all([not grid[i, dom_j - 1] for i in xrange(start, end + 1)])
A:sympy.categories.diagram_drawing.free_right->all([not grid[i, dom_j + 1] for i in xrange(start, end + 1)])
A:sympy.categories.diagram_drawing.(free_up, free_down, backwards)->XypicDiagramDrawer._check_free_space_diagonal(dom_i, cod_i, dom_j, cod_j, grid)
A:sympy.categories.diagram_drawing.(free_left, free_right, backwards)->XypicDiagramDrawer._check_free_space_vertical(dom_i, cod_i, dom_j, grid)
A:sympy.categories.diagram_drawing.morphisms->sorted(morphisms_props, key=lambda m: XypicDiagramDrawer._morphism_sort_key(m, object_coords))
A:sympy.categories.diagram_drawing.string_description->self._process_morphism(diagram, grid, morphism, object_coords, morphisms, morphisms_str_info)
A:sympy.categories.diagram_drawing.drawer->XypicDiagramDrawer()
A:sympy.categories.diagram_drawing.latex_output->xypic_draw_diagram(diagram, masked, diagram_format, groups, **hints)
sympy.categories.DiagramGrid(self,diagram,groups=None,**hints)
sympy.categories.DiagramGrid.__getitem__(self,i_j)
sympy.categories.DiagramGrid.__str__(self)
sympy.categories.DiagramGrid._add_edge_append(dictionary,edge,elem)
sympy.categories.DiagramGrid._build_skeleton(morphisms)
sympy.categories.DiagramGrid._choose_target_cell(pt1,pt2,edge,obj,skeleton,grid)
sympy.categories.DiagramGrid._compute_triangle_min_sizes(triangles,edges)
sympy.categories.DiagramGrid._drop_inessential_morphisms(merged_morphisms)
sympy.categories.DiagramGrid._drop_irrelevant_triangles(triangles,placed_objects)
sympy.categories.DiagramGrid._drop_redundant_triangles(triangles,skeleton)
sympy.categories.DiagramGrid._empty_point(pt,grid)
sympy.categories.DiagramGrid._find_triangle_to_weld(triangles,fringe,grid)
sympy.categories.DiagramGrid._generic_layout(diagram,merged_morphisms)
sympy.categories.DiagramGrid._get_connected_components(objects,merged_morphisms)
sympy.categories.DiagramGrid._get_undirected_graph(objects,merged_morphisms)
sympy.categories.DiagramGrid._grow_pseudopod(triangles,fringe,grid,skeleton,placed_objects)
sympy.categories.DiagramGrid._handle_groups(diagram,groups,merged_morphisms,hints)
sympy.categories.DiagramGrid._juxtapose_edges(edge1,edge2)
sympy.categories.DiagramGrid._list_triangles(edges)
sympy.categories.DiagramGrid._merge_premises_conclusions(premises,conclusions)
sympy.categories.DiagramGrid._morphism_length(morphism)
sympy.categories.DiagramGrid._other_vertex(triangle,edge)
sympy.categories.DiagramGrid._pick_root_edge(tri,skeleton)
sympy.categories.DiagramGrid._put_object(coords,obj,grid,fringe)
sympy.categories.DiagramGrid._sequential_layout(diagram,merged_morphisms)
sympy.categories.DiagramGrid._simplify_morphisms(morphisms)
sympy.categories.DiagramGrid._triangle_key(tri,triangle_sizes)
sympy.categories.DiagramGrid._triangle_objects(triangle)
sympy.categories.DiagramGrid._weld_triangle(tri,welding_edge,fringe,grid,skeleton)
sympy.categories.DiagramGrid.height(self)
sympy.categories.DiagramGrid.morphisms(self)
sympy.categories.DiagramGrid.width(self)
sympy.categories.XypicDiagramDrawer(self)
sympy.categories.XypicDiagramDrawer._build_xypic_string(diagram,grid,morphisms,morphisms_str_info,diagram_format)
sympy.categories.XypicDiagramDrawer._check_free_space_diagonal(dom_i,cod_i,dom_j,cod_j,grid)
sympy.categories.XypicDiagramDrawer._check_free_space_horizontal(dom_i,dom_j,cod_j,grid)
sympy.categories.XypicDiagramDrawer._check_free_space_vertical(dom_i,cod_i,dom_j,grid)
sympy.categories.XypicDiagramDrawer._morphism_sort_key(morphism,object_coords)
sympy.categories.XypicDiagramDrawer._process_horizontal_morphism(i,j,target_j,grid,morphisms_str_info,object_coords)
sympy.categories.XypicDiagramDrawer._process_loop_morphism(i,j,grid,morphisms_str_info,object_coords)
sympy.categories.XypicDiagramDrawer._process_morphism(self,diagram,grid,morphism,object_coords,morphisms,morphisms_str_info)
sympy.categories.XypicDiagramDrawer._process_vertical_morphism(i,j,target_i,grid,morphisms_str_info,object_coords)
sympy.categories.XypicDiagramDrawer._push_labels_out(self,morphisms_str_info,grid,object_coords)
sympy.categories.XypicDiagramDrawer.draw(self,diagram,grid,masked=None,diagram_format='')
sympy.categories.diagram_drawing.ArrowStringDescription(self,unit,curving,curving_amount,looping_start,looping_end,horizontal_direction,vertical_direction,label_position,label)
sympy.categories.diagram_drawing.ArrowStringDescription.__init__(self,unit,curving,curving_amount,looping_start,looping_end,horizontal_direction,vertical_direction,label_position,label)
sympy.categories.diagram_drawing.ArrowStringDescription.__str__(self)
sympy.categories.diagram_drawing.DiagramGrid(self,diagram,groups=None,**hints)
sympy.categories.diagram_drawing.DiagramGrid.__getitem__(self,i_j)
sympy.categories.diagram_drawing.DiagramGrid.__init__(self,diagram,groups=None,**hints)
sympy.categories.diagram_drawing.DiagramGrid.__str__(self)
sympy.categories.diagram_drawing.DiagramGrid._add_edge_append(dictionary,edge,elem)
sympy.categories.diagram_drawing.DiagramGrid._build_skeleton(morphisms)
sympy.categories.diagram_drawing.DiagramGrid._choose_target_cell(pt1,pt2,edge,obj,skeleton,grid)
sympy.categories.diagram_drawing.DiagramGrid._compute_triangle_min_sizes(triangles,edges)
sympy.categories.diagram_drawing.DiagramGrid._drop_inessential_morphisms(merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._drop_irrelevant_triangles(triangles,placed_objects)
sympy.categories.diagram_drawing.DiagramGrid._drop_redundant_triangles(triangles,skeleton)
sympy.categories.diagram_drawing.DiagramGrid._empty_point(pt,grid)
sympy.categories.diagram_drawing.DiagramGrid._find_triangle_to_weld(triangles,fringe,grid)
sympy.categories.diagram_drawing.DiagramGrid._generic_layout(diagram,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._get_connected_components(objects,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._get_undirected_graph(objects,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._grow_pseudopod(triangles,fringe,grid,skeleton,placed_objects)
sympy.categories.diagram_drawing.DiagramGrid._handle_groups(diagram,groups,merged_morphisms,hints)
sympy.categories.diagram_drawing.DiagramGrid._juxtapose_edges(edge1,edge2)
sympy.categories.diagram_drawing.DiagramGrid._list_triangles(edges)
sympy.categories.diagram_drawing.DiagramGrid._merge_premises_conclusions(premises,conclusions)
sympy.categories.diagram_drawing.DiagramGrid._morphism_length(morphism)
sympy.categories.diagram_drawing.DiagramGrid._other_vertex(triangle,edge)
sympy.categories.diagram_drawing.DiagramGrid._pick_root_edge(tri,skeleton)
sympy.categories.diagram_drawing.DiagramGrid._put_object(coords,obj,grid,fringe)
sympy.categories.diagram_drawing.DiagramGrid._sequential_layout(diagram,merged_morphisms)
sympy.categories.diagram_drawing.DiagramGrid._simplify_morphisms(morphisms)
sympy.categories.diagram_drawing.DiagramGrid._triangle_key(tri,triangle_sizes)
sympy.categories.diagram_drawing.DiagramGrid._triangle_objects(triangle)
sympy.categories.diagram_drawing.DiagramGrid._weld_triangle(tri,welding_edge,fringe,grid,skeleton)
sympy.categories.diagram_drawing.DiagramGrid.height(self)
sympy.categories.diagram_drawing.DiagramGrid.morphisms(self)
sympy.categories.diagram_drawing.DiagramGrid.width(self)
sympy.categories.diagram_drawing.XypicDiagramDrawer(self)
sympy.categories.diagram_drawing.XypicDiagramDrawer.__init__(self)
sympy.categories.diagram_drawing.XypicDiagramDrawer._build_xypic_string(diagram,grid,morphisms,morphisms_str_info,diagram_format)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_diagonal(dom_i,cod_i,dom_j,cod_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_horizontal(dom_i,dom_j,cod_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._check_free_space_vertical(dom_i,cod_i,dom_j,grid)
sympy.categories.diagram_drawing.XypicDiagramDrawer._morphism_sort_key(morphism,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_horizontal_morphism(i,j,target_j,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_loop_morphism(i,j,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_morphism(self,diagram,grid,morphism,object_coords,morphisms,morphisms_str_info)
sympy.categories.diagram_drawing.XypicDiagramDrawer._process_vertical_morphism(i,j,target_i,grid,morphisms_str_info,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer._push_labels_out(self,morphisms_str_info,grid,object_coords)
sympy.categories.diagram_drawing.XypicDiagramDrawer.draw(self,diagram,grid,masked=None,diagram_format='')
sympy.categories.diagram_drawing._GrowableGrid(self,width,height)
sympy.categories.diagram_drawing._GrowableGrid.__getitem__(self,i_j)
sympy.categories.diagram_drawing._GrowableGrid.__init__(self,width,height)
sympy.categories.diagram_drawing._GrowableGrid.__setitem__(self,i_j,newvalue)
sympy.categories.diagram_drawing._GrowableGrid.append_column(self)
sympy.categories.diagram_drawing._GrowableGrid.append_row(self)
sympy.categories.diagram_drawing._GrowableGrid.height(self)
sympy.categories.diagram_drawing._GrowableGrid.prepend_column(self)
sympy.categories.diagram_drawing._GrowableGrid.prepend_row(self)
sympy.categories.diagram_drawing._GrowableGrid.width(self)
sympy.categories.diagram_drawing.preview_diagram(diagram,masked=None,diagram_format='',groups=None,output='png',viewer=None,euler=True,**hints)
sympy.categories.diagram_drawing.xypic_draw_diagram(diagram,masked=None,diagram_format='',groups=None,**hints)
sympy.categories.preview_diagram(diagram,masked=None,diagram_format='',groups=None,output='png',viewer=None,euler=True,**hints)
sympy.categories.xypic_draw_diagram(diagram,masked=None,diagram_format='',groups=None,**hints)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/tests/test_drawing.py----------------------------------------
A:sympy.categories.tests.test_drawing.grid->DiagramGrid(d, layout='sequential')
A:sympy.categories.tests.test_drawing.A->Object('A')
A:sympy.categories.tests.test_drawing.B->Object('B')
A:sympy.categories.tests.test_drawing.C->Object('C')
A:sympy.categories.tests.test_drawing.D->Object('D')
A:sympy.categories.tests.test_drawing.E->Object('E')
A:sympy.categories.tests.test_drawing.f->NamedMorphism(A, B, 'f')
A:sympy.categories.tests.test_drawing.g->NamedMorphism(B, C, 'g')
A:sympy.categories.tests.test_drawing.h->NamedMorphism(C, D, 'h')
A:sympy.categories.tests.test_drawing.k->NamedMorphism(D, B, 'k')
A:sympy.categories.tests.test_drawing.d->Diagram([f, g, h, i])
A:sympy.categories.tests.test_drawing.l_A->NamedMorphism(A, A, 'l_A')
A:sympy.categories.tests.test_drawing.A_->Object("A'")
A:sympy.categories.tests.test_drawing.B_->Object("B'")
A:sympy.categories.tests.test_drawing.C_->Object("C'")
A:sympy.categories.tests.test_drawing.D_->Object("D'")
A:sympy.categories.tests.test_drawing.E_->Object("E'")
A:sympy.categories.tests.test_drawing.i->NamedMorphism(D, E, 'i')
A:sympy.categories.tests.test_drawing.j->NamedMorphism(A_, B_, 'j')
A:sympy.categories.tests.test_drawing.l->NamedMorphism(C_, D_, 'l')
A:sympy.categories.tests.test_drawing.m->NamedMorphism(D_, E_, 'm')
A:sympy.categories.tests.test_drawing.o->NamedMorphism(A, A_, 'o')
A:sympy.categories.tests.test_drawing.p->NamedMorphism(B, B_, 'p')
A:sympy.categories.tests.test_drawing.q->NamedMorphism(C, C_, 'q')
A:sympy.categories.tests.test_drawing.r->NamedMorphism(D, D_, 'r')
A:sympy.categories.tests.test_drawing.s->NamedMorphism(E, E_, 's')
A:sympy.categories.tests.test_drawing.morphisms[m]->FiniteSet()
A:sympy.categories.tests.test_drawing.A1->Object('A1')
A:sympy.categories.tests.test_drawing.A2->Object('A2')
A:sympy.categories.tests.test_drawing.A3->Object('A3')
A:sympy.categories.tests.test_drawing.A4->Object('A4')
A:sympy.categories.tests.test_drawing.A5->Object('A5')
A:sympy.categories.tests.test_drawing.A6->Object('A6')
A:sympy.categories.tests.test_drawing.A7->Object('A7')
A:sympy.categories.tests.test_drawing.A8->Object('A8')
A:sympy.categories.tests.test_drawing.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.categories.tests.test_drawing.f2->NamedMorphism(A1, A3, 'f2')
A:sympy.categories.tests.test_drawing.f3->NamedMorphism(A2, A4, 'f3')
A:sympy.categories.tests.test_drawing.f4->NamedMorphism(A3, A4, 'f3')
A:sympy.categories.tests.test_drawing.f5->NamedMorphism(A5, A6, 'f5')
A:sympy.categories.tests.test_drawing.f6->NamedMorphism(A5, A7, 'f6')
A:sympy.categories.tests.test_drawing.f7->NamedMorphism(A6, A8, 'f7')
A:sympy.categories.tests.test_drawing.f8->NamedMorphism(A7, A8, 'f8')
A:sympy.categories.tests.test_drawing.f9->NamedMorphism(A1, A5, 'f9')
A:sympy.categories.tests.test_drawing.f10->NamedMorphism(A2, A6, 'f10')
A:sympy.categories.tests.test_drawing.f11->NamedMorphism(A3, A7, 'f11')
A:sympy.categories.tests.test_drawing.f12->NamedMorphism(A4, A8, 'f11')
A:sympy.categories.tests.test_drawing.m1->NamedMorphism(A, B, 'm1')
A:sympy.categories.tests.test_drawing.m2->NamedMorphism(A, C, 'm2')
A:sympy.categories.tests.test_drawing.s1->NamedMorphism(B, D, 's1')
A:sympy.categories.tests.test_drawing.s2->NamedMorphism(C, D, 's2')
A:sympy.categories.tests.test_drawing.f_->NamedMorphism(A_, B_, 'f')
A:sympy.categories.tests.test_drawing.g_->NamedMorphism(B_, C_, 'g')
A:sympy.categories.tests.test_drawing.F->Object('F')
A:sympy.categories.tests.test_drawing.morphisms[f]->FiniteSet()
A:sympy.categories.tests.test_drawing.astr->ArrowStringDescription('cm', '_', 12, '', '', 'd', 'r', '_', 'f')
A:sympy.categories.tests.test_drawing.drawer->XypicDiagramDrawer()
A:sympy.categories.tests.test_drawing.g1->NamedMorphism(C, B, 'g1')
A:sympy.categories.tests.test_drawing.g2->NamedMorphism(B, C, 'g2')
A:sympy.categories.tests.test_drawing.h1->NamedMorphism(D, A, 'h1')
A:sympy.categories.tests.test_drawing.h2->NamedMorphism(A, D, 'h2')
A:sympy.categories.tests.test_drawing.l_D->NamedMorphism(D, D, 'l_D')
A:sympy.categories.tests.test_drawing.l_C->NamedMorphism(C, C, 'l_C')
A:sympy.categories.tests.test_drawing.l_A_->NamedMorphism(A, A, 'n_A')
A:sympy.categories.tests.test_drawing.l_D_->NamedMorphism(D, D, 'n_D')
A:sympy.categories.tests.test_drawing.l_C_->NamedMorphism(C, C, 'n_C')
sympy.categories.tests.test_drawing.test_ArrowStringDescription()
sympy.categories.tests.test_drawing.test_DiagramGrid()
sympy.categories.tests.test_drawing.test_GrowableGrid()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_cube()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_curved_and_loops()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_line()
sympy.categories.tests.test_drawing.test_XypicDiagramDrawer_triangle()
sympy.categories.tests.test_drawing.test_xypic_draw_diagram()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/categories/tests/test_baseclasses.py----------------------------------------
A:sympy.categories.tests.test_baseclasses.A->Object('A')
A:sympy.categories.tests.test_baseclasses.B->Object('B')
A:sympy.categories.tests.test_baseclasses.C->Object('C')
A:sympy.categories.tests.test_baseclasses.D->Object('D')
A:sympy.categories.tests.test_baseclasses.f->NamedMorphism(A, B, 'f')
A:sympy.categories.tests.test_baseclasses.id_A->IdentityMorphism(A)
A:sympy.categories.tests.test_baseclasses.id_B->IdentityMorphism(B)
A:sympy.categories.tests.test_baseclasses.g->NamedMorphism(B, C, 'g')
A:sympy.categories.tests.test_baseclasses.k->NamedMorphism(B, C, 'g').compose(f)
A:sympy.categories.tests.test_baseclasses.h->NamedMorphism(C, D, 'h')
A:sympy.categories.tests.test_baseclasses.u2->u.flatten('u')
A:sympy.categories.tests.test_baseclasses.empty->EmptySet()
A:sympy.categories.tests.test_baseclasses.d1->Diagram([f, g])
A:sympy.categories.tests.test_baseclasses.d2->Diagram([f])
A:sympy.categories.tests.test_baseclasses.d11->Diagram({f: 'unique'})
A:sympy.categories.tests.test_baseclasses.d->Diagram([f, g], {f: 'unique', g * f: 'veryunique'})
A:sympy.categories.tests.test_baseclasses.K->Category('K', objects, commutative_diagrams=[d1, d2])
sympy.categories.tests.test_baseclasses.test_category()
sympy.categories.tests.test_baseclasses.test_diagram()
sympy.categories.tests.test_baseclasses.test_morphisms()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/decorators.py----------------------------------------
A:sympy.core.decorators.b->sympify(b, strict=True)
A:sympy.core.decorators.f->getattr(other, method_name)
sympy.core.decorators.__sympifyit(func,arg,retval=None)
sympy.core.decorators._sympifyit(arg,retval=None)
sympy.core.decorators.call_highest_priority(method_name)
sympy.core.decorators.deprecated(**decorator_kwargs)
sympy.decorators.__sympifyit(func,arg,retval=None)
sympy.decorators._sympifyit(arg,retval=None)
sympy.decorators.call_highest_priority(method_name)
sympy.decorators.deprecated(**decorator_kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/numbers.py----------------------------------------
A:sympy.core.numbers._LOG2->math.log(2)
A:sympy.core.numbers.rv->sympy.mpmath.libmp.from_man_exp(v, -prec - 10)
A:sympy.core.numbers.(s, d, e)->dec.as_tuple()
A:sympy.core.numbers.prec->max([prec_to_dps(i) for i in (self._prec, other._prec)])
A:sympy.core.numbers.d->sum([di * 10 ** i for (i, di) in enumerate(reversed(d))])
A:sympy.core.numbers.a->abs(a or b)
A:sympy.core.numbers.val->sympify(obj)
A:sympy.core.numbers.other->_sympify(other)
A:sympy.core.numbers.num->list(num)
A:sympy.core.numbers.Num->decimal.Decimal(num)
A:sympy.core.numbers.(num, dps)->_decimal_to_Rational_prec(Num)
A:sympy.core.numbers.dps->max(dps, len(str(num).lstrip('-')))
A:sympy.core.numbers._mpf_->mpf_norm(_mpf_, prec)
A:sympy.core.numbers.num[1]->long(num[1], 16)
A:sympy.core.numbers.obj->expr.Expr.__new__(cls, *sargs)
A:sympy.core.numbers.obj._mpf_->mpf_norm(_mpf_, _prec)
A:sympy.core.numbers.(rhs, prec)->_sympify(other)._as_mpf_op(self._prec)
A:sympy.core.numbers.(expt, prec)->expt._as_mpf_op(self._prec)
A:sympy.core.numbers.y->mpf_pow(self, expt, prec, rnd)
A:sympy.core.numbers.(re, im)->sympy.mpmath.libmp.mpc_pow((self, _mpf_zero), (expt, _mpf_zero), prec, rnd)
A:sympy.core.numbers.o->Float(other)
A:sympy.core.numbers.ompf->_sympify(other)._as_mpf_val(self._prec)
A:sympy.core.numbers.p->perfect_power(b_pos)
A:sympy.core.numbers.(neg_pow, digits, expt)->decimal.Decimal(p).as_tuple()
A:sympy.core.numbers.f->defaultdict(int, f)
A:sympy.core.numbers.(n, d)->defaultdict(int, f).groups()
A:sympy.core.numbers.(p, q)->perfect_power(b_pos).split('/')
A:sympy.core.numbers.q->Rational(q)
A:sympy.core.numbers.n->igcd(abs(p), q)
A:sympy.core.numbers.bound1->Rational(p0 + k * p1, q0 + k * q1)
A:sympy.core.numbers.bound2->Rational(p1, q1)
A:sympy.core.numbers.ints->sorted(_intcache.keys())
A:sympy.core.numbers.i->i.replace(' ', '').replace(' ', '')
A:sympy.core.numbers.ival->int(i)
A:sympy.core.numbers.(x, xexact)->integer_nthroot(abs(self.p), expt.q)
A:sympy.core.numbers.result->Integer(x ** abs(expt.p))
A:sympy.core.numbers.b_pos->int(abs(self.p))
A:sympy.core.numbers.dict->Integer(self).factors(limit=2 ** 15)
A:sympy.core.numbers.(div_e, div_m)->divmod(exponent, expt.q)
A:sympy.core.numbers.g->igcd(div_m, expt.q)
A:sympy.core.numbers.sqr_gcd->igcd(sqr_gcd, ex)
A:sympy.core.numbers.expr->sympify(expr)
A:sympy.core.numbers.minpoly->core.C.Poly(minpoly)
A:sympy.core.numbers.dom->core.C.Poly(minpoly).get_domain()
A:sympy.core.numbers.rep->sympy.polys.polyclasses.DMP.from_list([1, 0], 0, dom)
A:sympy.core.numbers.scoeffs->Tuple(*coeffs.to_list())
A:sympy.core.numbers.alias->Symbol(alias)
A:sympy.core.numbers.poly->defaultdict(int, f).compose(C.Poly(f.gen / f.LC()))
A:sympy.core.numbers.(coeff, terms)->expt.as_coeff_Mul()
A:sympy.core.numbers.(i, r)->divmod(expt.p, expt.q)
A:sympy.core.numbers.approx->self.approximation_interval(other.__class__)
A:sympy.core.numbers.r->_sympify(-self <= -other)
A:sympy.core.numbers.v->sympy.mpmath.libmp.catalan_fixed(prec + 10)
A:sympy.core.numbers.(real, imag)->list(map(sympify, (a.real, a.imag)))
A:sympy.core.numbers.Mul.identity->One()
A:sympy.core.numbers.Add.identity->Zero()
sympy.AlgebraicNumber(cls,expr,coeffs=Tuple(),alias=None,**args)
sympy.AlgebraicNumber.__hash__(self)
sympy.AlgebraicNumber._eval_evalf(self,prec)
sympy.AlgebraicNumber.as_expr(self,x=None)
sympy.AlgebraicNumber.as_poly(self,x=None)
sympy.AlgebraicNumber.coeffs(self)
sympy.AlgebraicNumber.is_aliased(self)
sympy.AlgebraicNumber.native_coeffs(self)
sympy.AlgebraicNumber.to_algebraic_integer(self)
sympy.EulerGamma(with_metaclass(Singleton,NumberSymbol))
sympy.EulerGamma.__int__(self)
sympy.EulerGamma._as_mpf_val(self,prec)
sympy.EulerGamma._latex(self,printer)
sympy.EulerGamma._sage_(self)
sympy.EulerGamma.approximation_interval(self,number_cls)
sympy.Exp1(with_metaclass(Singleton,NumberSymbol))
sympy.Exp1.__abs__()
sympy.Exp1.__int__(self)
sympy.Exp1._as_mpf_val(self,prec)
sympy.Exp1._eval_power(self,expt)
sympy.Exp1._eval_rewrite_as_cos(self)
sympy.Exp1._eval_rewrite_as_sin(self)
sympy.Exp1._latex(self,printer)
sympy.Exp1._sage_(self)
sympy.Exp1.approximation_interval(self,number_cls)
sympy.Float(cls,num,prec=15)
sympy.Float.__abs__(self)
sympy.Float.__add__(self,other)
sympy.Float.__div__(self,other)
sympy.Float.__eq__(self,other)
sympy.Float.__format__(self,format_spec)
sympy.Float.__ge__(self,other)
sympy.Float.__getnewargs__(self)
sympy.Float.__getstate__(self)
sympy.Float.__gt__(self,other)
sympy.Float.__hash__(self)
sympy.Float.__int__(self)
sympy.Float.__le__(self,other)
sympy.Float.__lt__(self,other)
sympy.Float.__mod__(self,other)
sympy.Float.__mul__(self,other)
sympy.Float.__ne__(self,other)
sympy.Float.__neg__(self)
sympy.Float.__nonzero__(self)
sympy.Float.__rmod__(self,other)
sympy.Float.__sub__(self,other)
sympy.Float._as_mpf_op(self,prec)
sympy.Float._as_mpf_val(self,prec)
sympy.Float._eval_is_finite(self)
sympy.Float._eval_is_infinite(self)
sympy.Float._eval_is_integer(self)
sympy.Float._eval_is_negative(self)
sympy.Float._eval_is_positive(self)
sympy.Float._eval_is_zero(self)
sympy.Float._eval_power(self,expt)
sympy.Float._hashable_content(self)
sympy.Float._new(cls,_mpf_,_prec)
sympy.Float._sage_(self)
sympy.Float.ceiling(self)
sympy.Float.epsilon_eq(self,other,epsilon='1e-15')
sympy.Float.floor(self)
sympy.Float.num(self)
sympy.ImaginaryUnit(with_metaclass(Singleton,AtomicExpr))
sympy.ImaginaryUnit.__abs__()
sympy.ImaginaryUnit._eval_conjugate(self)
sympy.ImaginaryUnit._eval_evalf(self,prec)
sympy.ImaginaryUnit._eval_power(self,expt)
sympy.ImaginaryUnit._latex(self,printer)
sympy.ImaginaryUnit._sage_(self)
sympy.ImaginaryUnit.as_base_exp(self)
sympy.Infinity(cls)
sympy.Infinity.__abs__(self)
sympy.Infinity.__add__(self,other)
sympy.Infinity.__div__(self,other)
sympy.Infinity.__eq__(self,other)
sympy.Infinity.__ge__(self,other)
sympy.Infinity.__gt__(self,other)
sympy.Infinity.__hash__(self)
sympy.Infinity.__le__(self,other)
sympy.Infinity.__lt__(self,other)
sympy.Infinity.__mod__(self,other)
sympy.Infinity.__mul__(self,other)
sympy.Infinity.__ne__(self,other)
sympy.Infinity.__neg__(self)
sympy.Infinity.__sub__(self,other)
sympy.Infinity._as_mpf_val(self,prec)
sympy.Infinity._eval_power(self,expt)
sympy.Infinity._latex(self,printer)
sympy.Infinity._sage_(self)
sympy.Integer(cls,i)
sympy.Integer.__abs__(self)
sympy.Integer.__add__(self,other)
sympy.Integer.__divmod__(self,other)
sympy.Integer.__eq__(self,other)
sympy.Integer.__floordiv__(self,other)
sympy.Integer.__ge__(self,other)
sympy.Integer.__getnewargs__(self)
sympy.Integer.__gt__(self,other)
sympy.Integer.__hash__(self)
sympy.Integer.__index__(self)
sympy.Integer.__int__(self)
sympy.Integer.__le__(self,other)
sympy.Integer.__lt__(self,other)
sympy.Integer.__mod__(self,other)
sympy.Integer.__mul__(self,other)
sympy.Integer.__ne__(self,other)
sympy.Integer.__neg__(self)
sympy.Integer.__radd__(self,other)
sympy.Integer.__rdivmod__(self,other)
sympy.Integer.__rfloordiv__(self,other)
sympy.Integer.__rmod__(self,other)
sympy.Integer.__rmul__(self,other)
sympy.Integer.__rsub__(self,other)
sympy.Integer.__sub__(self,other)
sympy.Integer._as_mpf_val(self,prec)
sympy.Integer._eval_is_odd(self)
sympy.Integer._eval_is_prime(self)
sympy.Integer._eval_power(self,expt)
sympy.Integer._mpmath_(self,prec,rnd)
sympy.Integer.as_numer_denom(self)
sympy.IntegerConstant(cls)
sympy.Number(cls,*obj)
sympy.Number.__add__(self,other)
sympy.Number.__div__(self,other)
sympy.Number.__divmod__(self,other)
sympy.Number.__eq__(self,other)
sympy.Number.__float__(self)
sympy.Number.__ge__(self,other)
sympy.Number.__gt__(self,other)
sympy.Number.__hash__(self)
sympy.Number.__le__(self,other)
sympy.Number.__lt__(self,other)
sympy.Number.__mul__(self,other)
sympy.Number.__ne__(self,other)
sympy.Number.__rdivmod__(self,other)
sympy.Number.__round__(self,*args)
sympy.Number.__sub__(self,other)
sympy.Number._as_mpf_op(self,prec)
sympy.Number._as_mpf_val(self,prec)
sympy.Number._eval_conjugate(self)
sympy.Number._eval_evalf(self,prec)
sympy.Number._eval_is_finite(self)
sympy.Number._eval_order(self,*symbols)
sympy.Number._eval_subs(self,old,new)
sympy.Number.as_coeff_Add(self)
sympy.Number.as_coeff_Mul(self,rational=False)
sympy.Number.as_coeff_add(self,*deps)
sympy.Number.as_coeff_mul(self,*deps)
sympy.Number.class_key(cls)
sympy.Number.cofactors(self,other)
sympy.Number.gcd(self,other)
sympy.Number.is_constant(self,*wrt,**flags)
sympy.Number.lcm(self,other)
sympy.Number.sort_key(self,order=None)
sympy.NumberSymbol(cls)
sympy.NumberSymbol.__eq__(self,other)
sympy.NumberSymbol.__ge__(self,other)
sympy.NumberSymbol.__gt__(self,other)
sympy.NumberSymbol.__hash__(self)
sympy.NumberSymbol.__int__(self)
sympy.NumberSymbol.__le__(self,other)
sympy.NumberSymbol.__long__(self)
sympy.NumberSymbol.__lt__(self,other)
sympy.NumberSymbol.__ne__(self,other)
sympy.NumberSymbol._eval_evalf(self,prec)
sympy.NumberSymbol.approximation(self,number_cls)
sympy.Rational(cls,p,q=None)
sympy.Rational.__abs__(self)
sympy.Rational.__add__(self,other)
sympy.Rational.__div__(self,other)
sympy.Rational.__eq__(self,other)
sympy.Rational.__ge__(self,other)
sympy.Rational.__getnewargs__(self)
sympy.Rational.__gt__(self,other)
sympy.Rational.__hash__(self)
sympy.Rational.__int__(self)
sympy.Rational.__le__(self,other)
sympy.Rational.__lt__(self,other)
sympy.Rational.__mod__(self,other)
sympy.Rational.__mul__(self,other)
sympy.Rational.__ne__(self,other)
sympy.Rational.__neg__(self)
sympy.Rational.__rmod__(self,other)
sympy.Rational.__sub__(self,other)
sympy.Rational._as_mpf_val(self,prec)
sympy.Rational._eval_is_positive(self)
sympy.Rational._eval_is_zero(self)
sympy.Rational._eval_power(self,expt)
sympy.Rational._hashable_content(self)
sympy.Rational._mpmath_(self,prec,rnd)
sympy.Rational._sage_(self)
sympy.Rational.as_content_primitive(self,radical=False)
sympy.Rational.as_numer_denom(self)
sympy.Rational.factors(self,limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.Rational.gcd(self,other)
sympy.Rational.lcm(self,other)
sympy.Rational.limit_denominator(self,max_denominator=1000000)
sympy.RationalConstant(cls)
sympy.core.numbers.AlgebraicNumber(cls,expr,coeffs=Tuple(),alias=None,**args)
sympy.core.numbers.AlgebraicNumber.__hash__(self)
sympy.core.numbers.AlgebraicNumber.__new__(cls,expr,coeffs=Tuple(),alias=None,**args)
sympy.core.numbers.AlgebraicNumber._eval_evalf(self,prec)
sympy.core.numbers.AlgebraicNumber.as_expr(self,x=None)
sympy.core.numbers.AlgebraicNumber.as_poly(self,x=None)
sympy.core.numbers.AlgebraicNumber.coeffs(self)
sympy.core.numbers.AlgebraicNumber.is_aliased(self)
sympy.core.numbers.AlgebraicNumber.native_coeffs(self)
sympy.core.numbers.AlgebraicNumber.to_algebraic_integer(self)
sympy.core.numbers.Catalan(with_metaclass(Singleton,NumberSymbol))
sympy.core.numbers.Catalan.__int__(self)
sympy.core.numbers.Catalan._as_mpf_val(self,prec)
sympy.core.numbers.Catalan._sage_(self)
sympy.core.numbers.Catalan.approximation_interval(self,number_cls)
sympy.core.numbers.ComplexInfinity(cls)
sympy.core.numbers.ComplexInfinity.__abs__()
sympy.core.numbers.ComplexInfinity.__neg__()
sympy.core.numbers.ComplexInfinity.__new__(cls)
sympy.core.numbers.ComplexInfinity._eval_power(self,expt)
sympy.core.numbers.ComplexInfinity._latex(self,printer)
sympy.core.numbers.EulerGamma(with_metaclass(Singleton,NumberSymbol))
sympy.core.numbers.EulerGamma.__int__(self)
sympy.core.numbers.EulerGamma._as_mpf_val(self,prec)
sympy.core.numbers.EulerGamma._latex(self,printer)
sympy.core.numbers.EulerGamma._sage_(self)
sympy.core.numbers.EulerGamma.approximation_interval(self,number_cls)
sympy.core.numbers.Exp1(with_metaclass(Singleton,NumberSymbol))
sympy.core.numbers.Exp1.__abs__()
sympy.core.numbers.Exp1.__int__(self)
sympy.core.numbers.Exp1._as_mpf_val(self,prec)
sympy.core.numbers.Exp1._eval_power(self,expt)
sympy.core.numbers.Exp1._eval_rewrite_as_cos(self)
sympy.core.numbers.Exp1._eval_rewrite_as_sin(self)
sympy.core.numbers.Exp1._latex(self,printer)
sympy.core.numbers.Exp1._sage_(self)
sympy.core.numbers.Exp1.approximation_interval(self,number_cls)
sympy.core.numbers.Float(cls,num,prec=15)
sympy.core.numbers.Float.__abs__(self)
sympy.core.numbers.Float.__add__(self,other)
sympy.core.numbers.Float.__div__(self,other)
sympy.core.numbers.Float.__eq__(self,other)
sympy.core.numbers.Float.__format__(self,format_spec)
sympy.core.numbers.Float.__ge__(self,other)
sympy.core.numbers.Float.__getnewargs__(self)
sympy.core.numbers.Float.__getstate__(self)
sympy.core.numbers.Float.__gt__(self,other)
sympy.core.numbers.Float.__hash__(self)
sympy.core.numbers.Float.__int__(self)
sympy.core.numbers.Float.__le__(self,other)
sympy.core.numbers.Float.__lt__(self,other)
sympy.core.numbers.Float.__mod__(self,other)
sympy.core.numbers.Float.__mul__(self,other)
sympy.core.numbers.Float.__ne__(self,other)
sympy.core.numbers.Float.__neg__(self)
sympy.core.numbers.Float.__new__(cls,num,prec=15)
sympy.core.numbers.Float.__nonzero__(self)
sympy.core.numbers.Float.__rmod__(self,other)
sympy.core.numbers.Float.__sub__(self,other)
sympy.core.numbers.Float._as_mpf_op(self,prec)
sympy.core.numbers.Float._as_mpf_val(self,prec)
sympy.core.numbers.Float._eval_is_finite(self)
sympy.core.numbers.Float._eval_is_infinite(self)
sympy.core.numbers.Float._eval_is_integer(self)
sympy.core.numbers.Float._eval_is_negative(self)
sympy.core.numbers.Float._eval_is_positive(self)
sympy.core.numbers.Float._eval_is_zero(self)
sympy.core.numbers.Float._eval_power(self,expt)
sympy.core.numbers.Float._hashable_content(self)
sympy.core.numbers.Float._new(cls,_mpf_,_prec)
sympy.core.numbers.Float._sage_(self)
sympy.core.numbers.Float.ceiling(self)
sympy.core.numbers.Float.epsilon_eq(self,other,epsilon='1e-15')
sympy.core.numbers.Float.floor(self)
sympy.core.numbers.Float.num(self)
sympy.core.numbers.GoldenRatio(with_metaclass(Singleton,NumberSymbol))
sympy.core.numbers.GoldenRatio.__int__(self)
sympy.core.numbers.GoldenRatio._as_mpf_val(self,prec)
sympy.core.numbers.GoldenRatio._eval_expand_func(self,**hints)
sympy.core.numbers.GoldenRatio._latex(self,printer)
sympy.core.numbers.GoldenRatio._sage_(self)
sympy.core.numbers.GoldenRatio.approximation_interval(self,number_cls)
sympy.core.numbers.Half(with_metaclass(Singleton,RationalConstant))
sympy.core.numbers.Half.__abs__()
sympy.core.numbers.ImaginaryUnit(with_metaclass(Singleton,AtomicExpr))
sympy.core.numbers.ImaginaryUnit.__abs__()
sympy.core.numbers.ImaginaryUnit._eval_conjugate(self)
sympy.core.numbers.ImaginaryUnit._eval_evalf(self,prec)
sympy.core.numbers.ImaginaryUnit._eval_power(self,expt)
sympy.core.numbers.ImaginaryUnit._latex(self,printer)
sympy.core.numbers.ImaginaryUnit._sage_(self)
sympy.core.numbers.ImaginaryUnit.as_base_exp(self)
sympy.core.numbers.Infinity(cls)
sympy.core.numbers.Infinity.__abs__(self)
sympy.core.numbers.Infinity.__add__(self,other)
sympy.core.numbers.Infinity.__div__(self,other)
sympy.core.numbers.Infinity.__eq__(self,other)
sympy.core.numbers.Infinity.__ge__(self,other)
sympy.core.numbers.Infinity.__gt__(self,other)
sympy.core.numbers.Infinity.__hash__(self)
sympy.core.numbers.Infinity.__le__(self,other)
sympy.core.numbers.Infinity.__lt__(self,other)
sympy.core.numbers.Infinity.__mod__(self,other)
sympy.core.numbers.Infinity.__mul__(self,other)
sympy.core.numbers.Infinity.__ne__(self,other)
sympy.core.numbers.Infinity.__neg__(self)
sympy.core.numbers.Infinity.__new__(cls)
sympy.core.numbers.Infinity.__sub__(self,other)
sympy.core.numbers.Infinity._as_mpf_val(self,prec)
sympy.core.numbers.Infinity._eval_power(self,expt)
sympy.core.numbers.Infinity._latex(self,printer)
sympy.core.numbers.Infinity._sage_(self)
sympy.core.numbers.Integer(cls,i)
sympy.core.numbers.Integer.__abs__(self)
sympy.core.numbers.Integer.__add__(self,other)
sympy.core.numbers.Integer.__divmod__(self,other)
sympy.core.numbers.Integer.__eq__(self,other)
sympy.core.numbers.Integer.__floordiv__(self,other)
sympy.core.numbers.Integer.__ge__(self,other)
sympy.core.numbers.Integer.__getnewargs__(self)
sympy.core.numbers.Integer.__gt__(self,other)
sympy.core.numbers.Integer.__hash__(self)
sympy.core.numbers.Integer.__index__(self)
sympy.core.numbers.Integer.__int__(self)
sympy.core.numbers.Integer.__le__(self,other)
sympy.core.numbers.Integer.__lt__(self,other)
sympy.core.numbers.Integer.__mod__(self,other)
sympy.core.numbers.Integer.__mul__(self,other)
sympy.core.numbers.Integer.__ne__(self,other)
sympy.core.numbers.Integer.__neg__(self)
sympy.core.numbers.Integer.__new__(cls,i)
sympy.core.numbers.Integer.__radd__(self,other)
sympy.core.numbers.Integer.__rdivmod__(self,other)
sympy.core.numbers.Integer.__rfloordiv__(self,other)
sympy.core.numbers.Integer.__rmod__(self,other)
sympy.core.numbers.Integer.__rmul__(self,other)
sympy.core.numbers.Integer.__rsub__(self,other)
sympy.core.numbers.Integer.__sub__(self,other)
sympy.core.numbers.Integer._as_mpf_val(self,prec)
sympy.core.numbers.Integer._eval_is_odd(self)
sympy.core.numbers.Integer._eval_is_prime(self)
sympy.core.numbers.Integer._eval_power(self,expt)
sympy.core.numbers.Integer._mpmath_(self,prec,rnd)
sympy.core.numbers.Integer.as_numer_denom(self)
sympy.core.numbers.IntegerConstant(cls)
sympy.core.numbers.IntegerConstant.__new__(cls)
sympy.core.numbers.NaN(cls)
sympy.core.numbers.NaN.__add__(self,other)
sympy.core.numbers.NaN.__div__(self,other)
sympy.core.numbers.NaN.__eq__(self,other)
sympy.core.numbers.NaN.__ge__(self,other)
sympy.core.numbers.NaN.__gt__(self,other)
sympy.core.numbers.NaN.__hash__(self)
sympy.core.numbers.NaN.__le__(self,other)
sympy.core.numbers.NaN.__lt__(self,other)
sympy.core.numbers.NaN.__mul__(self,other)
sympy.core.numbers.NaN.__ne__(self,other)
sympy.core.numbers.NaN.__new__(cls)
sympy.core.numbers.NaN.__sub__(self,other)
sympy.core.numbers.NaN._as_mpf_val(self,prec)
sympy.core.numbers.NaN._eval_Eq(self,other)
sympy.core.numbers.NaN._latex(self,printer)
sympy.core.numbers.NaN._sage_(self)
sympy.core.numbers.NegativeInfinity(cls)
sympy.core.numbers.NegativeInfinity.__abs__(self)
sympy.core.numbers.NegativeInfinity.__add__(self,other)
sympy.core.numbers.NegativeInfinity.__div__(self,other)
sympy.core.numbers.NegativeInfinity.__eq__(self,other)
sympy.core.numbers.NegativeInfinity.__ge__(self,other)
sympy.core.numbers.NegativeInfinity.__gt__(self,other)
sympy.core.numbers.NegativeInfinity.__hash__(self)
sympy.core.numbers.NegativeInfinity.__le__(self,other)
sympy.core.numbers.NegativeInfinity.__lt__(self,other)
sympy.core.numbers.NegativeInfinity.__mod__(self,other)
sympy.core.numbers.NegativeInfinity.__mul__(self,other)
sympy.core.numbers.NegativeInfinity.__ne__(self,other)
sympy.core.numbers.NegativeInfinity.__neg__(self)
sympy.core.numbers.NegativeInfinity.__new__(cls)
sympy.core.numbers.NegativeInfinity.__sub__(self,other)
sympy.core.numbers.NegativeInfinity._as_mpf_val(self,prec)
sympy.core.numbers.NegativeInfinity._eval_power(self,expt)
sympy.core.numbers.NegativeInfinity._latex(self,printer)
sympy.core.numbers.NegativeInfinity._sage_(self)
sympy.core.numbers.NegativeOne(with_metaclass(Singleton,IntegerConstant))
sympy.core.numbers.NegativeOne.__abs__()
sympy.core.numbers.NegativeOne.__neg__()
sympy.core.numbers.NegativeOne._eval_power(self,expt)
sympy.core.numbers.Number(cls,*obj)
sympy.core.numbers.Number.__add__(self,other)
sympy.core.numbers.Number.__div__(self,other)
sympy.core.numbers.Number.__divmod__(self,other)
sympy.core.numbers.Number.__eq__(self,other)
sympy.core.numbers.Number.__float__(self)
sympy.core.numbers.Number.__ge__(self,other)
sympy.core.numbers.Number.__gt__(self,other)
sympy.core.numbers.Number.__hash__(self)
sympy.core.numbers.Number.__le__(self,other)
sympy.core.numbers.Number.__lt__(self,other)
sympy.core.numbers.Number.__mul__(self,other)
sympy.core.numbers.Number.__ne__(self,other)
sympy.core.numbers.Number.__new__(cls,*obj)
sympy.core.numbers.Number.__rdivmod__(self,other)
sympy.core.numbers.Number.__round__(self,*args)
sympy.core.numbers.Number.__sub__(self,other)
sympy.core.numbers.Number._as_mpf_op(self,prec)
sympy.core.numbers.Number._as_mpf_val(self,prec)
sympy.core.numbers.Number._eval_conjugate(self)
sympy.core.numbers.Number._eval_evalf(self,prec)
sympy.core.numbers.Number._eval_is_finite(self)
sympy.core.numbers.Number._eval_order(self,*symbols)
sympy.core.numbers.Number._eval_subs(self,old,new)
sympy.core.numbers.Number.as_coeff_Add(self)
sympy.core.numbers.Number.as_coeff_Mul(self,rational=False)
sympy.core.numbers.Number.as_coeff_add(self,*deps)
sympy.core.numbers.Number.as_coeff_mul(self,*deps)
sympy.core.numbers.Number.class_key(cls)
sympy.core.numbers.Number.cofactors(self,other)
sympy.core.numbers.Number.gcd(self,other)
sympy.core.numbers.Number.is_constant(self,*wrt,**flags)
sympy.core.numbers.Number.lcm(self,other)
sympy.core.numbers.Number.sort_key(self,order=None)
sympy.core.numbers.NumberSymbol(cls)
sympy.core.numbers.NumberSymbol.__eq__(self,other)
sympy.core.numbers.NumberSymbol.__ge__(self,other)
sympy.core.numbers.NumberSymbol.__gt__(self,other)
sympy.core.numbers.NumberSymbol.__hash__(self)
sympy.core.numbers.NumberSymbol.__int__(self)
sympy.core.numbers.NumberSymbol.__le__(self,other)
sympy.core.numbers.NumberSymbol.__long__(self)
sympy.core.numbers.NumberSymbol.__lt__(self,other)
sympy.core.numbers.NumberSymbol.__ne__(self,other)
sympy.core.numbers.NumberSymbol.__new__(cls)
sympy.core.numbers.NumberSymbol._eval_evalf(self,prec)
sympy.core.numbers.NumberSymbol.approximation(self,number_cls)
sympy.core.numbers.One(with_metaclass(Singleton,IntegerConstant))
sympy.core.numbers.One.__abs__()
sympy.core.numbers.One.__neg__()
sympy.core.numbers.One._eval_order(self,*symbols)
sympy.core.numbers.One._eval_power(self,expt)
sympy.core.numbers.One.factors(limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.core.numbers.Pi(with_metaclass(Singleton,NumberSymbol))
sympy.core.numbers.Pi.__abs__()
sympy.core.numbers.Pi.__int__(self)
sympy.core.numbers.Pi._as_mpf_val(self,prec)
sympy.core.numbers.Pi._latex(self,printer)
sympy.core.numbers.Pi._sage_(self)
sympy.core.numbers.Pi.approximation_interval(self,number_cls)
sympy.core.numbers.Rational(cls,p,q=None)
sympy.core.numbers.Rational.__abs__(self)
sympy.core.numbers.Rational.__add__(self,other)
sympy.core.numbers.Rational.__div__(self,other)
sympy.core.numbers.Rational.__eq__(self,other)
sympy.core.numbers.Rational.__ge__(self,other)
sympy.core.numbers.Rational.__getnewargs__(self)
sympy.core.numbers.Rational.__gt__(self,other)
sympy.core.numbers.Rational.__hash__(self)
sympy.core.numbers.Rational.__int__(self)
sympy.core.numbers.Rational.__le__(self,other)
sympy.core.numbers.Rational.__lt__(self,other)
sympy.core.numbers.Rational.__mod__(self,other)
sympy.core.numbers.Rational.__mul__(self,other)
sympy.core.numbers.Rational.__ne__(self,other)
sympy.core.numbers.Rational.__neg__(self)
sympy.core.numbers.Rational.__new__(cls,p,q=None)
sympy.core.numbers.Rational.__rmod__(self,other)
sympy.core.numbers.Rational.__sub__(self,other)
sympy.core.numbers.Rational._as_mpf_val(self,prec)
sympy.core.numbers.Rational._eval_is_positive(self)
sympy.core.numbers.Rational._eval_is_zero(self)
sympy.core.numbers.Rational._eval_power(self,expt)
sympy.core.numbers.Rational._hashable_content(self)
sympy.core.numbers.Rational._mpmath_(self,prec,rnd)
sympy.core.numbers.Rational._sage_(self)
sympy.core.numbers.Rational.as_content_primitive(self,radical=False)
sympy.core.numbers.Rational.as_numer_denom(self)
sympy.core.numbers.Rational.factors(self,limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.core.numbers.Rational.gcd(self,other)
sympy.core.numbers.Rational.lcm(self,other)
sympy.core.numbers.Rational.limit_denominator(self,max_denominator=1000000)
sympy.core.numbers.RationalConstant(cls)
sympy.core.numbers.RationalConstant.__new__(cls)
sympy.core.numbers.Zero(with_metaclass(Singleton,IntegerConstant))
sympy.core.numbers.Zero.__abs__()
sympy.core.numbers.Zero.__neg__()
sympy.core.numbers.Zero.__nonzero__(self)
sympy.core.numbers.Zero._eval_order(self,*symbols)
sympy.core.numbers.Zero._eval_power(self,expt)
sympy.core.numbers._decimal_to_Rational_prec(dec)
sympy.core.numbers._intcache_printinfo()
sympy.core.numbers._literal_float(f)
sympy.core.numbers.igcd(*args)
sympy.core.numbers.igcdex(a,b)
sympy.core.numbers.ilcm(*args)
sympy.core.numbers.int_trace(f)
sympy.core.numbers.mpf_norm(mpf,prec)
sympy.core.numbers.seterr(divide=False)
sympy.core.numbers.sympify_complex(a)
sympy.core.numbers.sympify_fractions(f)
sympy.core.numbers.sympify_mpmath(x)
sympy.igcd(*args)
sympy.igcdex(a,b)
sympy.ilcm(*args)
sympy.numbers.Catalan(with_metaclass(Singleton,NumberSymbol))
sympy.numbers.Catalan.__int__(self)
sympy.numbers.Catalan._as_mpf_val(self,prec)
sympy.numbers.Catalan._sage_(self)
sympy.numbers.Catalan.approximation_interval(self,number_cls)
sympy.numbers.ComplexInfinity(cls)
sympy.numbers.ComplexInfinity.__abs__()
sympy.numbers.ComplexInfinity.__neg__()
sympy.numbers.ComplexInfinity._eval_power(self,expt)
sympy.numbers.ComplexInfinity._latex(self,printer)
sympy.numbers.GoldenRatio(with_metaclass(Singleton,NumberSymbol))
sympy.numbers.GoldenRatio.__int__(self)
sympy.numbers.GoldenRatio._as_mpf_val(self,prec)
sympy.numbers.GoldenRatio._eval_expand_func(self,**hints)
sympy.numbers.GoldenRatio._latex(self,printer)
sympy.numbers.GoldenRatio._sage_(self)
sympy.numbers.GoldenRatio.approximation_interval(self,number_cls)
sympy.numbers.Half(with_metaclass(Singleton,RationalConstant))
sympy.numbers.Half.__abs__()
sympy.numbers.NaN(cls)
sympy.numbers.NaN.__add__(self,other)
sympy.numbers.NaN.__div__(self,other)
sympy.numbers.NaN.__eq__(self,other)
sympy.numbers.NaN.__ge__(self,other)
sympy.numbers.NaN.__gt__(self,other)
sympy.numbers.NaN.__hash__(self)
sympy.numbers.NaN.__le__(self,other)
sympy.numbers.NaN.__lt__(self,other)
sympy.numbers.NaN.__mul__(self,other)
sympy.numbers.NaN.__ne__(self,other)
sympy.numbers.NaN.__sub__(self,other)
sympy.numbers.NaN._as_mpf_val(self,prec)
sympy.numbers.NaN._eval_Eq(self,other)
sympy.numbers.NaN._latex(self,printer)
sympy.numbers.NaN._sage_(self)
sympy.numbers.NegativeInfinity(cls)
sympy.numbers.NegativeInfinity.__abs__(self)
sympy.numbers.NegativeInfinity.__add__(self,other)
sympy.numbers.NegativeInfinity.__div__(self,other)
sympy.numbers.NegativeInfinity.__eq__(self,other)
sympy.numbers.NegativeInfinity.__ge__(self,other)
sympy.numbers.NegativeInfinity.__gt__(self,other)
sympy.numbers.NegativeInfinity.__hash__(self)
sympy.numbers.NegativeInfinity.__le__(self,other)
sympy.numbers.NegativeInfinity.__lt__(self,other)
sympy.numbers.NegativeInfinity.__mod__(self,other)
sympy.numbers.NegativeInfinity.__mul__(self,other)
sympy.numbers.NegativeInfinity.__ne__(self,other)
sympy.numbers.NegativeInfinity.__neg__(self)
sympy.numbers.NegativeInfinity.__sub__(self,other)
sympy.numbers.NegativeInfinity._as_mpf_val(self,prec)
sympy.numbers.NegativeInfinity._eval_power(self,expt)
sympy.numbers.NegativeInfinity._latex(self,printer)
sympy.numbers.NegativeInfinity._sage_(self)
sympy.numbers.NegativeOne(with_metaclass(Singleton,IntegerConstant))
sympy.numbers.NegativeOne.__abs__()
sympy.numbers.NegativeOne.__neg__()
sympy.numbers.NegativeOne._eval_power(self,expt)
sympy.numbers.One(with_metaclass(Singleton,IntegerConstant))
sympy.numbers.One.__abs__()
sympy.numbers.One.__neg__()
sympy.numbers.One._eval_order(self,*symbols)
sympy.numbers.One._eval_power(self,expt)
sympy.numbers.One.factors(limit=None,use_trial=True,use_rho=False,use_pm1=False,verbose=False,visual=False)
sympy.numbers.Pi(with_metaclass(Singleton,NumberSymbol))
sympy.numbers.Pi.__abs__()
sympy.numbers.Pi.__int__(self)
sympy.numbers.Pi._as_mpf_val(self,prec)
sympy.numbers.Pi._latex(self,printer)
sympy.numbers.Pi._sage_(self)
sympy.numbers.Pi.approximation_interval(self,number_cls)
sympy.numbers.Zero(with_metaclass(Singleton,IntegerConstant))
sympy.numbers.Zero.__abs__()
sympy.numbers.Zero.__neg__()
sympy.numbers.Zero.__nonzero__(self)
sympy.numbers.Zero._eval_order(self,*symbols)
sympy.numbers.Zero._eval_power(self,expt)
sympy.numbers._decimal_to_Rational_prec(dec)
sympy.numbers._intcache_printinfo()
sympy.numbers._literal_float(f)
sympy.numbers.int_trace(f)
sympy.numbers.mpf_norm(mpf,prec)
sympy.numbers.sympify_complex(a)
sympy.numbers.sympify_fractions(f)
sympy.numbers.sympify_mpmath(x)
sympy.seterr(divide=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/add.py----------------------------------------
A:sympy.core.add._args_sortkey->cmp_to_key(Basic.compare)
A:sympy.core.add.args->list(args)
A:sympy.core.add.a->list(args).pop()
A:sympy.core.add.(c, s)->o.as_coeff_Mul()
A:sympy.core.add.(b, e)->ai.as_base_exp()
A:sympy.core.add.cs->self.func(*iargs, evaluate=False)._new_rawargs(*(c,) + s.args)
A:sympy.core.add.d->defaultdict(list)
A:sympy.core.add.(c, m)->list(args).pop().as_coeff_Mul()
A:sympy.core.add.d[k]->Add(*v)
A:sympy.core.add.di->defaultdict(int)
A:sympy.core.add.(coeff, notrat)->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().args[0].as_coeff_add()
A:sympy.core.add.(coeff, terms)->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().as_coeff_add()
A:sympy.core.add.(content, expr)->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().primitive()
A:sympy.core.add.(ncon, dcon)->content.as_numer_denom()
A:sympy.core.add.nd->defaultdict(list)
A:sympy.core.add.(ni, di)->f.as_numer_denom()
A:sympy.core.add.n->defaultdict(list).pop(S.Zero)
A:sympy.core.add.(d, n)->defaultdict(list).popitem()
A:sympy.core.add.nd[d]->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*n)
A:sympy.core.add.rv->factor_terms(plain, fraction=False)
A:sympy.core.add.r->_fuzzy_group((a.is_real for a in iargs))
A:sympy.core.add.s->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*iargs, evaluate=False)
A:sympy.core.add.others->list(self.args)
A:sympy.core.add.saw_INF->set()
A:sympy.core.add.(coeff_self, terms_self)->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().as_coeff_Add()
A:sympy.core.add.(coeff_old, terms_old)->old.as_coeff_Add()
A:sympy.core.add.self_set->set(args_self)
A:sympy.core.add.old_set->set(args_old)
A:sympy.core.add.args_old->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func.make_args(-terms_old)
A:sympy.core.add.symbols->list(symbols if is_sequence(symbols) else [symbols])
A:sympy.core.add.(re, im)->term.as_real_imag(deep=deep)
A:sympy.core.add.self->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*[t.as_leading_term(x) for t in self.args]).removeO()
A:sympy.core.add.plain->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*[s for (s, _) in self.extract_leading_order(x)])
A:sympy.core.add.rv_simplify->factor_terms(plain, fraction=False).simplify()
A:sympy.core.add.ngcd->reduce(igcd, [t[0] for t in terms if t[1]], 0)
A:sympy.core.add.dlcm->reduce(ilcm, [t[1] for t in terms if t[1]], 1)
A:sympy.core.add.terms[i]->_keep_coeff(Rational(p, q), term)
A:sympy.core.add.c->terms.pop(0)
A:sympy.core.add.(con, prim)->self.func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*[t.as_leading_term(x) for t in self.args]).removeO().func(*[_keep_coeff(*a.as_content_primitive(radical=radical)) for a in self.args]).primitive()
A:sympy.core.add.term_rads->defaultdict(list)
A:sympy.core.add.common_q->set(term_rads.keys())
A:sympy.core.add.r[q]->prod(r[q])
A:sympy.core.add.g->reduce(igcd, [r[q] for r in rads], 0)
A:sympy.core.add.G->Mul(*G)
sympy.Add(Expr,AssocOp)
sympy.Add.__neg__(self)
sympy.Add._combine_inverse(lhs,rhs)
sympy.Add._eval_adjoint(self)
sympy.Add._eval_as_leading_term(self,x)
sympy.Add._eval_conjugate(self)
sympy.Add._eval_derivative(self,s)
sympy.Add._eval_is_algebraic_expr(self,syms)
sympy.Add._eval_is_imaginary(self)
sympy.Add._eval_is_irrational(self)
sympy.Add._eval_is_negative(self)
sympy.Add._eval_is_odd(self)
sympy.Add._eval_is_polynomial(self,syms)
sympy.Add._eval_is_positive(self)
sympy.Add._eval_is_rational_function(self,syms)
sympy.Add._eval_nseries(self,x,n,logx)
sympy.Add._eval_subs(self,old,new)
sympy.Add._eval_transpose(self)
sympy.Add._matches_simple(self,expr,repl_dict)
sympy.Add._sage_(self)
sympy.Add._sorted_args(self)
sympy.Add.as_coeff_Add(self)
sympy.Add.as_coeff_add(self,*deps)
sympy.Add.as_coefficients_dict(a)
sympy.Add.as_content_primitive(self,radical=False)
sympy.Add.as_numer_denom(self)
sympy.Add.as_real_imag(self,deep=True,**hints)
sympy.Add.as_two_terms(self)
sympy.Add.class_key(cls)
sympy.Add.extract_leading_order(self,symbols,point=None)
sympy.Add.flatten(cls,seq)
sympy.Add.getO(self)
sympy.Add.matches(self,expr,repl_dict={},old=False)
sympy.Add.primitive(self)
sympy.Add.removeO(self)
sympy.add._addsort(args)
sympy.add._unevaluated_Add(*args)
sympy.core.add.Add(Expr,AssocOp)
sympy.core.add.Add.__neg__(self)
sympy.core.add.Add._combine_inverse(lhs,rhs)
sympy.core.add.Add._eval_adjoint(self)
sympy.core.add.Add._eval_as_leading_term(self,x)
sympy.core.add.Add._eval_conjugate(self)
sympy.core.add.Add._eval_derivative(self,s)
sympy.core.add.Add._eval_is_algebraic_expr(self,syms)
sympy.core.add.Add._eval_is_imaginary(self)
sympy.core.add.Add._eval_is_irrational(self)
sympy.core.add.Add._eval_is_negative(self)
sympy.core.add.Add._eval_is_odd(self)
sympy.core.add.Add._eval_is_polynomial(self,syms)
sympy.core.add.Add._eval_is_positive(self)
sympy.core.add.Add._eval_is_rational_function(self,syms)
sympy.core.add.Add._eval_nseries(self,x,n,logx)
sympy.core.add.Add._eval_subs(self,old,new)
sympy.core.add.Add._eval_transpose(self)
sympy.core.add.Add._matches_simple(self,expr,repl_dict)
sympy.core.add.Add._sage_(self)
sympy.core.add.Add._sorted_args(self)
sympy.core.add.Add.as_coeff_Add(self)
sympy.core.add.Add.as_coeff_add(self,*deps)
sympy.core.add.Add.as_coefficients_dict(a)
sympy.core.add.Add.as_content_primitive(self,radical=False)
sympy.core.add.Add.as_numer_denom(self)
sympy.core.add.Add.as_real_imag(self,deep=True,**hints)
sympy.core.add.Add.as_two_terms(self)
sympy.core.add.Add.class_key(cls)
sympy.core.add.Add.extract_leading_order(self,symbols,point=None)
sympy.core.add.Add.flatten(cls,seq)
sympy.core.add.Add.getO(self)
sympy.core.add.Add.matches(self,expr,repl_dict={},old=False)
sympy.core.add.Add.primitive(self)
sympy.core.add.Add.removeO(self)
sympy.core.add._addsort(args)
sympy.core.add._unevaluated_Add(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/alphabets.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/power.py----------------------------------------
A:sympy.core.power.(x, rem)->mpmath_sqrtrem(y)
A:sympy.core.power.guess->int(2.0 ** exp)
A:sympy.core.power.shift->int(exp - 53)
A:sympy.core.power.b->_keep_coeff(*b.as_content_primitive(radical=radical))
A:sympy.core.power.e->_keep_coeff(ce, pe)
A:sympy.core.power.(c, ex)->factor_terms(e, sign=False).as_coeff_Mul()
A:sympy.core.power.den->denom(ex)
A:sympy.core.power.s->core.C.sign(s)
A:sympy.core.power.obj->expr.Expr.__new__(cls, b, e)
A:sympy.core.power.(b, e)->self.simplify().as_base_exp()
A:sympy.core.power.(n, d)->base._evalf(prec).as_numer_denom()
A:sympy.core.power.rv->(bs ** e).series(x).subs(c, O(1, x))
A:sympy.core.power.check->self.simplify().func(*self.args)
A:sympy.core.power.(c, a)->self.simplify().exp.as_coeff_Add()
A:sympy.core.power.c->self.simplify().func(b, iceh)
A:sympy.core.power.pow->as_int(pow)
A:sympy.core.power.ct1->old.args[0].as_independent(C.Symbol, as_Add=False)
A:sympy.core.power.ct2->(self.exp * C.log(self.base)).as_independent(C.Symbol, as_Add=False)
A:sympy.core.power.(ok, pow)->_check(ct1, ct2, old)
A:sympy.core.power.newa->a._subs(old, new)
A:sympy.core.power.expanded->self.simplify().expand(deep, **hints)
A:sympy.core.power.force->hints.get('force', False)
A:sympy.core.power.(cargs, nc)->_keep_coeff(*b.as_content_primitive(radical=radical)).args_cnc(split_1=False)
A:sympy.core.power.sifted->sift(cargs, pred)
A:sympy.core.power.n->_sympify(n)
A:sympy.core.power.expanded_base_n->expanded_base_n._eval_expand_multinomial()._eval_expand_multinomial()
A:sympy.core.power.f->Add(*other_terms)
A:sympy.core.power.o->O(z, x)
A:sympy.core.power.g->g.nseries(x, n=n, logx=logx).nseries(x, n=n, logx=logx)
A:sympy.core.power.(a, b)->symbols('a b', cls=Dummy)
A:sympy.core.power.k->k.simplify().simplify()
A:sympy.core.power.expansion_dict->multinomial_coefficients(len(p), n)
A:sympy.core.power.multi->(base ** (n - 1))._eval_expand_multinomial()
A:sympy.core.power.(re, im)->self.simplify().base.as_real_imag(deep=deep)
A:sympy.core.power.expr->_sympify(expr)
A:sympy.core.power.re_part->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.im_part1->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.im_part3->Add(*[cc * a ** aa * b ** bb for ((aa, bb), cc) in r])
A:sympy.core.power.r->Add(*l)
A:sympy.core.power.t->core.C.atan2(im, re)
A:sympy.core.power.dbase->self.simplify().base.diff(s)
A:sympy.core.power.dexp->self.simplify().exp.diff(s)
A:sympy.core.power.(base, exp)->self.simplify().as_base_exp()
A:sympy.core.power.base->base._evalf(prec)._evalf(prec)
A:sympy.core.power.exp->sympy.exp._evalf(prec)._evalf(prec)
A:sympy.core.power.p->self.simplify().func(*self.as_base_exp())
A:sympy.core.power.neg_exp->_coeff_isneg(exp)
A:sympy.core.power.d->self.simplify().exp.xreplace(d).matches(e, d)
A:sympy.core.power.(sb, se)->self.simplify().as_base_exp()
A:sympy.core.power.ord->_keep_coeff(*b.as_content_primitive(radical=radical)).as_leading_term(x)
A:sympy.core.power.cf->core.C.Order(lt, x).getn()
A:sympy.core.power.prefactor->_keep_coeff(*b.as_content_primitive(radical=radical)).as_leading_term(x)
A:sympy.core.power.rest->expand_mul((b - prefactor) / prefactor)
A:sympy.core.power.(k, l)->expand_mul((b - prefactor) / prefactor).leadterm(x)
A:sympy.core.power.l->l.evalf().evalf()
A:sympy.core.power.dn->core.C.Order(1 / prefactor, x).getn()
A:sympy.core.power.new_term->expand_mul(new_term, deep=False)
A:sympy.core.power.denominator->(b ** (-e))._eval_nseries(x, n=nuse, logx=logx)
A:sympy.core.power.order->O(x ** n, x)
A:sympy.core.power.(ei, infinite)->e2int(e)
A:sympy.core.power.b0->_keep_coeff(*b.as_content_primitive(radical=radical)).limit(x, 0)
A:sympy.core.power.lt->bs.removeO().as_leading_term(x)
A:sympy.core.power.nuse->ceiling(n - cf * (e - 1))
A:sympy.core.power.bs->Add(*res)
A:sympy.core.power.terms->Add(*res).removeO()
A:sympy.core.power.(n, infinite)->e2int(e2)
A:sympy.core.power.(ce, pe)->_keep_coeff(ce, pe).as_content_primitive(radical=radical)
A:sympy.core.power.(h, t)->_keep_coeff(*b.as_content_primitive(radical=radical)).as_content_primitive(radical=radical)
A:sympy.core.power.(iceh, r)->divmod(ceh.p, ceh.q)
A:sympy.core.power.(c, m)->self.simplify().func(h, e).as_coeff_Mul()
A:sympy.core.power.(m, me)->m.as_base_exp()
A:sympy.core.power.self->self.simplify().simplify()
A:sympy.core.power.bz->_keep_coeff(*b.as_content_primitive(radical=radical)).equals(0)
A:sympy.core.power.econ->_keep_coeff(ce, pe).is_constant(*wrt)
A:sympy.core.power.bcon->_keep_coeff(*b.as_content_primitive(radical=radical)).is_constant(*wrt)
sympy.Pow(cls,b,e,evaluate=None)
sympy.Pow._eval_adjoint(self)
sympy.Pow._eval_as_leading_term(self,x)
sympy.Pow._eval_conjugate(self)
sympy.Pow._eval_derivative(self,s)
sympy.Pow._eval_evalf(self,prec)
sympy.Pow._eval_expand_multinomial(self,**hints)
sympy.Pow._eval_expand_power_base(self,**hints)
sympy.Pow._eval_expand_power_exp(self,**hints)
sympy.Pow._eval_is_algebraic(self)
sympy.Pow._eval_is_algebraic_expr(self,syms)
sympy.Pow._eval_is_complex(self)
sympy.Pow._eval_is_even(self)
sympy.Pow._eval_is_finite(self)
sympy.Pow._eval_is_imaginary(self)
sympy.Pow._eval_is_integer(self)
sympy.Pow._eval_is_negative(self)
sympy.Pow._eval_is_odd(self)
sympy.Pow._eval_is_polar(self)
sympy.Pow._eval_is_polynomial(self,syms)
sympy.Pow._eval_is_positive(self)
sympy.Pow._eval_is_rational(self)
sympy.Pow._eval_is_rational_function(self,syms)
sympy.Pow._eval_is_real(self)
sympy.Pow._eval_nseries(self,x,n,logx)
sympy.Pow._eval_power(self,other)
sympy.Pow._eval_subs(self,old,new)
sympy.Pow._eval_transpose(self)
sympy.Pow._sage_(self)
sympy.Pow._taylor_term(self,n,x,*previous_terms)
sympy.Pow.as_base_exp(self)
sympy.Pow.as_content_primitive(self,radical=False)
sympy.Pow.as_numer_denom(self)
sympy.Pow.as_real_imag(self,deep=True,**hints)
sympy.Pow.base(self)
sympy.Pow.class_key(cls)
sympy.Pow.exp(self)
sympy.Pow.is_constant(self,*wrt,**flags)
sympy.Pow.matches(self,expr,repl_dict={},old=False)
sympy.core.power.Pow(cls,b,e,evaluate=None)
sympy.core.power.Pow.__new__(cls,b,e,evaluate=None)
sympy.core.power.Pow._eval_adjoint(self)
sympy.core.power.Pow._eval_as_leading_term(self,x)
sympy.core.power.Pow._eval_conjugate(self)
sympy.core.power.Pow._eval_derivative(self,s)
sympy.core.power.Pow._eval_evalf(self,prec)
sympy.core.power.Pow._eval_expand_multinomial(self,**hints)
sympy.core.power.Pow._eval_expand_power_base(self,**hints)
sympy.core.power.Pow._eval_expand_power_exp(self,**hints)
sympy.core.power.Pow._eval_is_algebraic(self)
sympy.core.power.Pow._eval_is_algebraic_expr(self,syms)
sympy.core.power.Pow._eval_is_complex(self)
sympy.core.power.Pow._eval_is_even(self)
sympy.core.power.Pow._eval_is_finite(self)
sympy.core.power.Pow._eval_is_imaginary(self)
sympy.core.power.Pow._eval_is_integer(self)
sympy.core.power.Pow._eval_is_negative(self)
sympy.core.power.Pow._eval_is_odd(self)
sympy.core.power.Pow._eval_is_polar(self)
sympy.core.power.Pow._eval_is_polynomial(self,syms)
sympy.core.power.Pow._eval_is_positive(self)
sympy.core.power.Pow._eval_is_rational(self)
sympy.core.power.Pow._eval_is_rational_function(self,syms)
sympy.core.power.Pow._eval_is_real(self)
sympy.core.power.Pow._eval_nseries(self,x,n,logx)
sympy.core.power.Pow._eval_power(self,other)
sympy.core.power.Pow._eval_subs(self,old,new)
sympy.core.power.Pow._eval_transpose(self)
sympy.core.power.Pow._sage_(self)
sympy.core.power.Pow._taylor_term(self,n,x,*previous_terms)
sympy.core.power.Pow.as_base_exp(self)
sympy.core.power.Pow.as_content_primitive(self,radical=False)
sympy.core.power.Pow.as_numer_denom(self)
sympy.core.power.Pow.as_real_imag(self,deep=True,**hints)
sympy.core.power.Pow.base(self)
sympy.core.power.Pow.class_key(cls)
sympy.core.power.Pow.exp(self)
sympy.core.power.Pow.is_constant(self,*wrt,**flags)
sympy.core.power.Pow.matches(self,expr,repl_dict={},old=False)
sympy.core.power.integer_nthroot(y,n)
sympy.integer_nthroot(y,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/assumptions.py----------------------------------------
A:sympy.core.assumptions._assume_rules->FactRules(['integer        ->  rational', 'rational       ->  real', 'rational       ->  algebraic', 'algebraic      ->  complex', 'real           ->  complex', 'real           ->  hermitian', 'imaginary      ->  complex', 'imaginary      ->  antihermitian', 'complex        ->  commutative', 'odd            ==  integer & !even', 'even           ==  integer & !odd', 'real           ==  negative | zero | positive', 'transcendental ==  complex & !algebraic', 'negative       ==  nonpositive & nonzero', 'positive       ==  nonnegative & nonzero', 'zero           ==  nonnegative & nonpositive', 'nonpositive    ==  real & !positive', 'nonnegative    ==  real & !negative', 'zero           ->  even & finite', 'prime          ->  integer & positive', 'composite      ==  integer & positive & !prime', 'irrational     ==  real & !rational', 'imaginary      ->  !real', 'infinite       ->  !finite', 'noninteger     ==  real & !integer', 'nonzero        ==  !zero'])
A:sympy.core.assumptions._assume_defined->frozenset(_assume_defined)
A:sympy.core.assumptions.self._assumptions->self.default_assumptions.copy()
A:sympy.core.assumptions.getit.func_name->as_property(fact)
A:sympy.core.assumptions.a->evaluate(obj)
A:sympy.core.assumptions.prereq->list(_assume_rules.prereq[fact])
A:sympy.core.assumptions.ret_val->assumptions.get(fact)
A:sympy.core.assumptions.attrname->as_property(k)
A:sympy.core.assumptions.v->bool(v)
A:sympy.core.assumptions.cls.default_assumptions->StdFactKB(defs)
A:sympy.core.assumptions.cls._prop_handler[k]->getattr(cls, '_eval_is_%s' % k)
A:sympy.core.assumptions.derived_from_bases->set()
A:sympy.core.assumptions.pname->as_property(fact)
sympy.core.ManagedProperties(cls,*args,**kws)
sympy.core.StdFactKB(self,facts=None)
sympy.core.StdFactKB.copy(self)
sympy.core._ask(fact,obj)
sympy.core.as_property(fact)
sympy.core.assumptions.ManagedProperties(cls,*args,**kws)
sympy.core.assumptions.ManagedProperties.__init__(cls,*args,**kws)
sympy.core.assumptions.StdFactKB(self,facts=None)
sympy.core.assumptions.StdFactKB.__init__(self,facts=None)
sympy.core.assumptions.StdFactKB.copy(self)
sympy.core.assumptions._ask(fact,obj)
sympy.core.assumptions.as_property(fact)
sympy.core.assumptions.make_property(fact)
sympy.core.make_property(fact)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/compatibility.py----------------------------------------
A:sympy.core.compatibility.get_function_code->operator.attrgetter('func_code')
A:sympy.core.compatibility.get_function_globals->operator.attrgetter('func_globals')
A:sympy.core.compatibility.get_function_name->operator.attrgetter('func_name')
A:sympy.core.compatibility.exec_->getattr(builtins, 'exec')
A:sympy.core.compatibility.frame->sys._getframe(1)
A:sympy.core.compatibility.pool->tuple(iterable)
A:sympy.core.compatibility.n->len(pool)
A:sympy.core.compatibility.result->user_function(*args, **kwds)
A:sympy.core.compatibility.args->sorted(args)
A:sympy.core.compatibility.item->sympify(item)
A:sympy.core.compatibility.d->defaultdict(list)
A:sympy.core.compatibility.keys->list(keys)
A:sympy.core.compatibility.f->list(keys).pop(0)
A:sympy.core.compatibility.d[k]->ordered(d[k], (_nodes, default_sort_key), default=False, warn=warn)
A:sympy.core.compatibility.u->list(uniq(d[k]))
A:sympy.core.compatibility.GROUND_TYPES->_getenv('SYMPY_GROUND_TYPES', 'auto').lower()
A:sympy.core.compatibility.gmpy->import_module('gmpy', min_module_version='1.13', module_version_attr='version', module_version_attr_call_args=())
A:sympy.core.compatibility._CacheInfo->namedtuple('CacheInfo', ['hits', 'misses', 'maxsize', 'currsize'])
A:sympy.core.compatibility.self.hashvalue->hash(tup)
A:sympy.core.compatibility.sorted_items->sorted(kwds.items())
A:sympy.core.compatibility.cache->dict()
A:sympy.core.compatibility.lock->RLock()
A:sympy.core.compatibility.key->make_key(args, kwds, typed)
A:sympy.core.compatibility.link->cache_get(key)
sympy.compatibility.NotIterable
sympy.compatibility._HashedSeq(self,tup,hash=hash)
sympy.compatibility._HashedSeq.__hash__(self)
sympy.compatibility._getenv(key,default=None)
sympy.compatibility._make_key(args,kwds,typed,kwd_mark=(object(),),fasttypes=set((int,str,frozenset,type(None))),sorted=sorted,tuple=tuple,type=type,len=len)
sympy.compatibility._nodes(e)
sympy.compatibility.as_int(n)
sympy.compatibility.default_sort_key(item,order=None)
sympy.compatibility.is_sequence(i,include=None)
sympy.compatibility.iterable(i,exclude=(string_types,dict,NotIterable))
sympy.compatibility.lru_cache(maxsize=100,typed=False)
sympy.compatibility.ordered(seq,keys=None,default=True,warn=False)
sympy.compatibility.with_metaclass(meta,*bases)
sympy.core.compatibility.NotIterable
sympy.core.compatibility._HashedSeq(self,tup,hash=hash)
sympy.core.compatibility._HashedSeq.__hash__(self)
sympy.core.compatibility._HashedSeq.__init__(self,tup,hash=hash)
sympy.core.compatibility._getenv(key,default=None)
sympy.core.compatibility._make_key(args,kwds,typed,kwd_mark=(object(),),fasttypes=set((int,str,frozenset,type(None))),sorted=sorted,tuple=tuple,type=type,len=len)
sympy.core.compatibility._nodes(e)
sympy.core.compatibility.as_int(n)
sympy.core.compatibility.default_sort_key(item,order=None)
sympy.core.compatibility.is_sequence(i,include=None)
sympy.core.compatibility.iterable(i,exclude=(string_types,dict,NotIterable))
sympy.core.compatibility.lru_cache(maxsize=100,typed=False)
sympy.core.compatibility.ordered(seq,keys=None,default=True,warn=False)
sympy.core.compatibility.with_metaclass(meta,*bases)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/facts.py----------------------------------------
A:sympy.core.facts.full_implications->defaultdict(set)
A:sympy.core.facts.literals->set.union(*map(set, implications))
A:sympy.core.facts.res->defaultdict(set)
A:sympy.core.facts.na->Not(a)
A:sympy.core.facts.bargs->set(bcond.args)
A:sympy.core.facts.bimpl_impl->x_impl.get(bimpl)
A:sympy.core.facts.prereq->defaultdict(set)
A:sympy.core.facts.self._rules_seen->set()
A:sympy.core.facts.rules->rules.splitlines().splitlines()
A:sympy.core.facts.P->Prover()
A:sympy.core.facts.(a, op, b)->rule.split(None, 2)
A:sympy.core.facts.a->logic.Logic.fromstring(a)
A:sympy.core.facts.b->logic.Logic.fromstring(b)
A:sympy.core.facts.impl_a->deduce_alpha_implications(P.rules_alpha)
A:sympy.core.facts.impl_ab->apply_beta_to_alpha_route(impl_a, P.rules_beta)
A:sympy.core.facts.self.defined_facts->set((_base_fact(k) for k in impl_ab.keys()))
A:sympy.core.facts.beta_triggers->defaultdict(set)
A:sympy.core.facts.full_implications[_as_pair(k)]->set((_as_pair(i) for i in impl))
A:sympy.core.facts.rel_prereq->rules_2prereq(full_implications)
A:sympy.core.facts.facts->facts.items().items()
A:sympy.core.facts.beta_maytrigger->set()
sympy.core.facts.FactKB(self,rules)
sympy.core.facts.FactKB.__init__(self,rules)
sympy.core.facts.FactKB.__str__(self)
sympy.core.facts.FactKB._tell(self,k,v)
sympy.core.facts.FactKB.deduce_all_facts(self,facts)
sympy.core.facts.FactRules(self,rules)
sympy.core.facts.FactRules.__init__(self,rules)
sympy.core.facts.InconsistentAssumptions(ValueError)
sympy.core.facts.InconsistentAssumptions.__str__(self)
sympy.core.facts.Prover(self)
sympy.core.facts.Prover.__init__(self)
sympy.core.facts.Prover._process_rule(self,a,b)
sympy.core.facts.Prover.process_rule(self,a,b)
sympy.core.facts.Prover.rules_alpha(self)
sympy.core.facts.Prover.rules_beta(self)
sympy.core.facts.Prover.split_alpha_beta(self)
sympy.core.facts.TautologyDetected(Exception)
sympy.core.facts._as_pair(atom)
sympy.core.facts._base_fact(atom)
sympy.core.facts.apply_beta_to_alpha_route(alpha_implications,beta_rules)
sympy.core.facts.deduce_alpha_implications(implications)
sympy.core.facts.rules_2prereq(rules)
sympy.core.facts.transitive_closure(implications)
sympy.facts.FactKB(self,rules)
sympy.facts.FactKB.__str__(self)
sympy.facts.FactKB._tell(self,k,v)
sympy.facts.FactKB.deduce_all_facts(self,facts)
sympy.facts.FactRules(self,rules)
sympy.facts.InconsistentAssumptions(ValueError)
sympy.facts.InconsistentAssumptions.__str__(self)
sympy.facts.Prover(self)
sympy.facts.Prover._process_rule(self,a,b)
sympy.facts.Prover.process_rule(self,a,b)
sympy.facts.Prover.rules_alpha(self)
sympy.facts.Prover.rules_beta(self)
sympy.facts.Prover.split_alpha_beta(self)
sympy.facts.TautologyDetected(Exception)
sympy.facts._as_pair(atom)
sympy.facts._base_fact(atom)
sympy.facts.apply_beta_to_alpha_route(alpha_implications,beta_rules)
sympy.facts.deduce_alpha_implications(implications)
sympy.facts.rules_2prereq(rules)
sympy.facts.transitive_closure(implications)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/multidimensional.py----------------------------------------
A:sympy.core.multidimensional.arglength->len(args)
A:sympy.core.multidimensional.args->list(args)
A:sympy.core.multidimensional.args[n]->structure_copy(entry)
A:sympy.core.multidimensional.kwargs[n]->structure_copy(entry)
A:sympy.core.multidimensional.result->apply_on_element(wrapper, args, kwargs, n)
sympy.core.multidimensional.apply_on_element(f,args,kwargs,n)
sympy.core.multidimensional.iter_copy(structure)
sympy.core.multidimensional.structure_copy(structure)
sympy.core.multidimensional.vectorize(self,*mdargs)
sympy.core.multidimensional.vectorize.__init__(self,*mdargs)
sympy.multidimensional.apply_on_element(f,args,kwargs,n)
sympy.multidimensional.iter_copy(structure)
sympy.multidimensional.structure_copy(structure)
sympy.vectorize(self,*mdargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/core.py----------------------------------------
A:sympy.core.core.all_classes->set()
A:sympy.core.core.cls->getattr(self, name)
A:sympy.core.core.C->ClassRegistry()
A:sympy.core.core.i1->ordering_of_classes.index(n1)
A:sympy.core.core.i2->ordering_of_classes.index(n2)
sympy.BasicMeta(cls,*args,**kws)
sympy.BasicMeta.__cmp__(cls,other)
sympy.BasicMeta.__gt__(cls,other)
sympy.BasicMeta.__lt__(cls,other)
sympy.BasicType(type)
sympy.ClassRegistry(Registry)
sympy.ClassRegistry.__delattr__(self,name)
sympy.ClassRegistry.__setattr__(self,name,cls)
sympy.Registry(object)
sympy.Registry.__delattr__(self,name)
sympy.Registry.__setattr__(self,name,obj)
sympy.core.core.BasicMeta(cls,*args,**kws)
sympy.core.core.BasicMeta.__cmp__(cls,other)
sympy.core.core.BasicMeta.__gt__(cls,other)
sympy.core.core.BasicMeta.__init__(cls,*args,**kws)
sympy.core.core.BasicMeta.__lt__(cls,other)
sympy.core.core.BasicType(type)
sympy.core.core.ClassRegistry(Registry)
sympy.core.core.ClassRegistry.__delattr__(self,name)
sympy.core.core.ClassRegistry.__setattr__(self,name,cls)
sympy.core.core.Registry(object)
sympy.core.core.Registry.__delattr__(self,name)
sympy.core.core.Registry.__setattr__(self,name,obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/symbol.py----------------------------------------
A:sympy.core.symbol.is_commutative->fuzzy_bool(assumptions.get('commutative', True))
A:sympy.core.symbol.keymap->defaultdict(lambda : None)
A:sympy.core.symbol.assumptions[key]->bool(v)
A:sympy.core.symbol.obj->Symbol.__xnew__(cls, name, **assumptions)
A:sympy.core.symbol.obj._assumptions->StdFactKB(assumptions)
A:sympy.core.symbol.__xnew__->staticmethod(__new_stage2__)
A:sympy.core.symbol.__xnew_cached_->staticmethod(cacheit(__new_stage2__))
A:sympy.core.symbol.exclude->tuple([sympify(x) for x in exclude])
A:sympy.core.symbol.properties->tuple(properties)
A:sympy.core.symbol.repl_dict->repl_dict.copy().copy()
A:sympy.core.symbol._range->re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])')
A:sympy.core.symbol.lit->literals.pop(0)
A:sympy.core.symbol.lit_char->chr(marker)
A:sympy.core.symbol.names->names[:-1].rstrip()
A:sympy.core.symbol.s->s.replace(c, l).replace(c, l)
A:sympy.core.symbol.as_seq->names[:-1].rstrip().endswith(',')
A:sympy.core.symbol.names[i:i + 1]->names[i].split()
A:sympy.core.symbol.cls->args.pop('cls', Symbol)
A:sympy.core.symbol.seq->args.pop('seq', as_seq)
A:sympy.core.symbol.symbol->cls(literal(name), **args)
A:sympy.core.symbol.split->re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])').split(name)
A:sympy.core.symbol.(a, b)->s.replace(c, l).replace(c, l).split(':')
A:sympy.core.symbol.b->int(b)
A:sympy.core.symbol.syms->symbols(names, **args)
sympy.Dummy(cls,name=None,**assumptions)
sympy.Dummy.__getstate__(self)
sympy.Dummy._hashable_content(self)
sympy.Dummy.sort_key(self,order=None)
sympy.Symbol(cls,name,**assumptions)
sympy.Symbol.__getnewargs__(self)
sympy.Symbol.__getstate__(self)
sympy.Symbol.__new_stage2__(cls,name,**assumptions)
sympy.Symbol._diff_wrt(self)
sympy.Symbol._hashable_content(self)
sympy.Symbol._sage_(self)
sympy.Symbol._sanitize(assumptions,obj=None)
sympy.Symbol.as_dummy(self)
sympy.Symbol.as_real_imag(self,deep=True,**hints)
sympy.Symbol.assumptions0(self)
sympy.Symbol.free_symbols(self)
sympy.Symbol.is_constant(self,*wrt,**flags)
sympy.Symbol.sort_key(self,order=None)
sympy.Wild(cls,name,exclude=(),properties=(),**assumptions)
sympy.Wild.__getnewargs__(self)
sympy.Wild.__xnew__(cls,name,exclude,properties,**assumptions)
sympy.Wild._hashable_content(self)
sympy.Wild.matches(self,expr,repl_dict={},old=False)
sympy.core.symbol.Dummy(cls,name=None,**assumptions)
sympy.core.symbol.Dummy.__getstate__(self)
sympy.core.symbol.Dummy.__new__(cls,name=None,**assumptions)
sympy.core.symbol.Dummy._hashable_content(self)
sympy.core.symbol.Dummy.sort_key(self,order=None)
sympy.core.symbol.Symbol(cls,name,**assumptions)
sympy.core.symbol.Symbol.__getnewargs__(self)
sympy.core.symbol.Symbol.__getstate__(self)
sympy.core.symbol.Symbol.__new__(cls,name,**assumptions)
sympy.core.symbol.Symbol.__new_stage2__(cls,name,**assumptions)
sympy.core.symbol.Symbol._diff_wrt(self)
sympy.core.symbol.Symbol._hashable_content(self)
sympy.core.symbol.Symbol._sage_(self)
sympy.core.symbol.Symbol._sanitize(assumptions,obj=None)
sympy.core.symbol.Symbol.as_dummy(self)
sympy.core.symbol.Symbol.as_real_imag(self,deep=True,**hints)
sympy.core.symbol.Symbol.assumptions0(self)
sympy.core.symbol.Symbol.free_symbols(self)
sympy.core.symbol.Symbol.is_constant(self,*wrt,**flags)
sympy.core.symbol.Symbol.sort_key(self,order=None)
sympy.core.symbol.Wild(cls,name,exclude=(),properties=(),**assumptions)
sympy.core.symbol.Wild.__getnewargs__(self)
sympy.core.symbol.Wild.__new__(cls,name,exclude=(),properties=(),**assumptions)
sympy.core.symbol.Wild.__xnew__(cls,name,exclude,properties,**assumptions)
sympy.core.symbol.Wild._hashable_content(self)
sympy.core.symbol.Wild.matches(self,expr,repl_dict={},old=False)
sympy.core.symbol.symbols(names,**args)
sympy.core.symbol.var(names,**args)
sympy.symbols(names,**args)
sympy.var(names,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/sympify.py----------------------------------------
A:sympy.core.sympify.cls->type(a)
A:sympy.core.sympify.a->a.replace('\n', '').replace('\n', '')
A:sympy.core.sympify.expr->_clear(expr)
A:sympy.core.sympify.s->s.replace(kern2, ')').replace(kern2, ')')
A:sympy.core.sympify.j->s.replace(kern2, ')').replace(kern2, ')').find('(')
sympy.SympifyError(self,expr,base_exc=None)
sympy.SympifyError.__str__(self)
sympy.core.sympify.CantSympify(object)
sympy.core.sympify.SympifyError(self,expr,base_exc=None)
sympy.core.sympify.SympifyError.__init__(self,expr,base_exc=None)
sympy.core.sympify.SympifyError.__str__(self)
sympy.core.sympify._sympify(a)
sympy.core.sympify.kernS(s)
sympy.core.sympify.sympify(a,locals=None,convert_xor=True,strict=False,rational=False,evaluate=None)
sympy.sympify(a,locals=None,convert_xor=True,strict=False,rational=False,evaluate=None)
sympy.sympify.CantSympify(object)
sympy.sympify._sympify(a)
sympy.sympify.kernS(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/relational.py----------------------------------------
A:sympy.core.relational.r->cls._eval_relation(lhs, rhs)
A:sympy.core.relational.know->dif.evalf().equals(0)
A:sympy.core.relational.dif->dif.evalf().evalf()
A:sympy.core.relational.sym->syms.pop()
A:sympy.core.relational.lhs->_sympify(lhs)
A:sympy.core.relational.rhs->_sympify(rhs)
A:sympy.core.relational.evaluate->options.pop('evaluate', global_evaluate[0])
A:sympy.core.relational.is_equal->Equality(lhs, rhs)
sympy.Equality(cls,lhs,rhs=0,**options)
sympy.Equality._eval_relation(cls,lhs,rhs)
sympy.GreaterThan(_Greater)
sympy.GreaterThan._eval_relation(cls,lhs,rhs)
sympy.LessThan(_Less)
sympy.LessThan._eval_relation(cls,lhs,rhs)
sympy.Relational(cls,lhs,rhs,rop=None,**assumptions)
sympy.Relational.__nonzero__(self)
sympy.Relational._eval_evalf(self,prec)
sympy.Relational._eval_simplify(self,ratio,measure)
sympy.Relational.as_set(self)
sympy.Relational.lhs(self)
sympy.Relational.rhs(self)
sympy.StrictGreaterThan(_Greater)
sympy.StrictGreaterThan._eval_relation(cls,lhs,rhs)
sympy.StrictLessThan(_Less)
sympy.StrictLessThan._eval_relation(cls,lhs,rhs)
sympy.Unequality(cls,lhs,rhs,**options)
sympy.Unequality._eval_relation(cls,lhs,rhs)
sympy.core.relational.Equality(cls,lhs,rhs=0,**options)
sympy.core.relational.Equality.__new__(cls,lhs,rhs=0,**options)
sympy.core.relational.Equality._eval_relation(cls,lhs,rhs)
sympy.core.relational.GreaterThan(_Greater)
sympy.core.relational.GreaterThan._eval_relation(cls,lhs,rhs)
sympy.core.relational.LessThan(_Less)
sympy.core.relational.LessThan._eval_relation(cls,lhs,rhs)
sympy.core.relational.Relational(cls,lhs,rhs,rop=None,**assumptions)
sympy.core.relational.Relational.__new__(cls,lhs,rhs,rop=None,**assumptions)
sympy.core.relational.Relational.__nonzero__(self)
sympy.core.relational.Relational._eval_evalf(self,prec)
sympy.core.relational.Relational._eval_simplify(self,ratio,measure)
sympy.core.relational.Relational.as_set(self)
sympy.core.relational.Relational.lhs(self)
sympy.core.relational.Relational.rhs(self)
sympy.core.relational.StrictGreaterThan(_Greater)
sympy.core.relational.StrictGreaterThan._eval_relation(cls,lhs,rhs)
sympy.core.relational.StrictLessThan(_Less)
sympy.core.relational.StrictLessThan._eval_relation(cls,lhs,rhs)
sympy.core.relational.Unequality(cls,lhs,rhs,**options)
sympy.core.relational.Unequality.__new__(cls,lhs,rhs,**options)
sympy.core.relational.Unequality._eval_relation(cls,lhs,rhs)
sympy.core.relational._Greater(_Inequality)
sympy.core.relational._Greater.gts(self)
sympy.core.relational._Greater.lts(self)
sympy.core.relational._Inequality(cls,lhs,rhs,**options)
sympy.core.relational._Inequality.__new__(cls,lhs,rhs,**options)
sympy.core.relational._Less(_Inequality)
sympy.core.relational._Less.gts(self)
sympy.core.relational._Less.lts(self)
sympy.relational._Greater(_Inequality)
sympy.relational._Greater.gts(self)
sympy.relational._Greater.lts(self)
sympy.relational._Inequality(cls,lhs,rhs,**options)
sympy.relational._Less(_Inequality)
sympy.relational._Less.gts(self)
sympy.relational._Less.lts(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/mul.py----------------------------------------
A:sympy.core.mul._args_sortkey->cmp_to_key(Basic.compare)
A:sympy.core.mul.args->list(self.args)
A:sympy.core.mul.a->powdenest(a)
A:sympy.core.mul.(c, nc)->breakup(self)
A:sympy.core.mul.(r, b)->Pow(b, e / co).as_coeff_Add()
A:sympy.core.mul.(o, order_symbols)->nc_seq.pop(0).as_expr_variables(order_symbols)
A:sympy.core.mul.(b, e)->base_exp(b)
A:sympy.core.mul.o->nc_seq.pop(0)
A:sympy.core.mul.o1->nc_part.pop()
A:sympy.core.mul.(b1, e1)->nc_part.pop().as_base_exp()
A:sympy.core.mul.(b2, e2)->nc_seq.pop(0).as_base_exp()
A:sympy.core.mul.co->Rational(ep, e.q).as_coeff_Mul()
A:sympy.core.mul.d[di]->Add(*li)
A:sympy.core.mul.c_powers->_gather(c_powers)
A:sympy.core.mul.num_exp->_gather(num_exp)
A:sympy.core.mul.inv_exp_dict[e]->cls(*b)
A:sympy.core.mul.b->Pow(b, e / co)
A:sympy.core.mul.(e_i, ep)->divmod(e.p, e.q)
A:sympy.core.mul.e->Rational(ep, e.q)
A:sympy.core.mul.pnew->defaultdict(list)
A:sympy.core.mul.g->bi.gcd(bj)
A:sympy.core.mul.obj->Pow(bi, ei)
A:sympy.core.mul.pnew[e]->cls(*b)
A:sympy.core.mul.(p, q)->Rational(p, q).as_numer_denom()
A:sympy.core.mul.(n, p)->divmod(p, q)
A:sympy.core.mul.neg1e->Rational(p, q)
A:sympy.core.mul.(c_part, coeff_sign)->_handle_for_oo(c_part, 1)
A:sympy.core.mul.(nc_part, coeff_sign)->_handle_for_oo(nc_part, coeff_sign)
A:sympy.core.mul.(cargs, nc)->Pow(b, e / co).args_cnc(split_1=False)
A:sympy.core.mul.p->Pow(b, e, evaluate=False)
A:sympy.core.mul.(c, m)->self.as_coeff_Mul()
A:sympy.core.mul.mnew->self.func(*other)._eval_evalf(prec)
A:sympy.core.mul.rv->operations.AssocOp._eval_evalf(self, prec)
A:sympy.core.mul.m->self.func(*other)
A:sympy.core.mul.imco->basic.C.im(coeffi.pop(0))
A:sympy.core.mul.reco->self.func(*coeffr + coeffi)
A:sympy.core.mul.(addre, addim)->expand_mul(addterms, deep=False).as_real_imag()
A:sympy.core.mul.L->len(sums)
A:sympy.core.mul.left->Mul._expandsums(sums[:L // 2])
A:sympy.core.mul.right->Mul._expandsums(sums[L // 2:])
A:sympy.core.mul.added->Add(*terms)
A:sympy.core.mul.(n, d)->fraction(self)
A:sympy.core.mul.plain->self.func(*plain)
A:sympy.core.mul.terms->Mul.make_args(terms)
A:sympy.core.mul.t->t._eval_expand_mul()._eval_expand_mul()
A:sympy.core.mul.d->defaultdict(int)
A:sympy.core.mul.(coeff, terms)->self.as_coeff_Mul()
A:sympy.core.mul.newexpr->self.__class__._combine_inverse(expr, coeff)
A:sympy.core.mul.expr->sympify(expr)
A:sympy.core.mul.(c1, nc1)->self.args_cnc()
A:sympy.core.mul.(c2, nc2)->sympify(expr).args_cnc()
A:sympy.core.mul.repl_dict->powdenest(a).matches(self.func(*nc2), repl_dict)
A:sympy.core.mul.(a, b)->self.as_two_terms()
A:sympy.core.mul.dd->powdenest(a).matches(Rational(sign), dd)
A:sympy.core.mul.pp->list(self.args)
A:sympy.core.mul.ee->list(expr.args)
A:sympy.core.mul.(numers, denoms)->list(zip(*[f.as_numer_denom() for f in self.args]))
A:sympy.core.mul.r->rejoin(*r)
A:sympy.core.mul.has_polar->any((arg.is_polar for arg in self.args))
A:sympy.core.mul.zero->fuzzy_not(t.is_nonzero)
A:sympy.core.mul.others->list(self.args)
A:sympy.core.mul.(co, _)->Rational(ep, e.q).as_coeff_mul()
A:sympy.core.mul.co_xmul->co_self.extract_multiplicatively(co_old)
A:sympy.core.mul.(old_c, old_nc)->breakup(old)
A:sympy.core.mul.mult->S(multiplicity(abs(co_old), co_self))
A:sympy.core.mul.cdid->min(rat)
A:sympy.core.mul.nc[i]->rejoin(*nc[i]).subs(old, new)
A:sympy.core.mul.take->len(old_nc)
A:sympy.core.mul.ndo->min(cdid, ndo)
A:sympy.core.mul.l->rejoin(nc[i][0], nc[i][1] - ndo * old_nc[0][1])
A:sympy.core.mul.do->min(ncdid, cdid)
A:sympy.core.mul.res->powsimp(self.func(*terms).expand(), combine='exp', deep=True)
A:sympy.core.mul.(c, p)->powdenest(a).as_content_primitive(radical=radical)
A:sympy.core.mul.(cpart, ncpart)->self.args_cnc()
A:sympy.core.mul.q->S(coeff.q)
A:sympy.core.mul.(c, t)->i.as_coeff_Mul()
A:sympy.core.mul.margs->list(factors.args)
A:sympy.core.mul.(c, r)->Rational(ep, e.q).as_coeff_Mul()
sympy.Mul(Expr,AssocOp)
sympy.Mul._combine_inverse(lhs,rhs)
sympy.Mul._eval_adjoint(self)
sympy.Mul._eval_as_leading_term(self,x)
sympy.Mul._eval_conjugate(self)
sympy.Mul._eval_derivative(self,s)
sympy.Mul._eval_evalf(self,prec)
sympy.Mul._eval_expand_mul(self,**hints)
sympy.Mul._eval_is_algebraic(self)
sympy.Mul._eval_is_algebraic_expr(self,syms)
sympy.Mul._eval_is_antihermitian(self)
sympy.Mul._eval_is_even(self)
sympy.Mul._eval_is_hermitian(self)
sympy.Mul._eval_is_imaginary(self)
sympy.Mul._eval_is_infinite(self)
sympy.Mul._eval_is_integer(self)
sympy.Mul._eval_is_irrational(self)
sympy.Mul._eval_is_negative(self)
sympy.Mul._eval_is_odd(self)
sympy.Mul._eval_is_polar(self)
sympy.Mul._eval_is_polynomial(self,syms)
sympy.Mul._eval_is_positive(self)
sympy.Mul._eval_is_rational(self)
sympy.Mul._eval_is_rational_function(self,syms)
sympy.Mul._eval_is_real(self)
sympy.Mul._eval_is_zero(self)
sympy.Mul._eval_nseries(self,x,n,logx)
sympy.Mul._eval_power(b,e)
sympy.Mul._eval_subs(self,old,new)
sympy.Mul._eval_transpose(self)
sympy.Mul._expandsums(sums)
sympy.Mul._matches(self,expr,repl_dict={})
sympy.Mul._matches_simple(self,expr,repl_dict)
sympy.Mul._sage_(self)
sympy.Mul._sorted_args(self)
sympy.Mul.as_base_exp(self)
sympy.Mul.as_coeff_Mul(self,rational=False)
sympy.Mul.as_coeff_mul(self,*deps)
sympy.Mul.as_content_primitive(self,radical=False)
sympy.Mul.as_numer_denom(self)
sympy.Mul.as_ordered_factors(self,order=None)
sympy.Mul.as_powers_dict(self)
sympy.Mul.as_real_imag(self,deep=True,**hints)
sympy.Mul.as_two_terms(self)
sympy.Mul.class_key(cls)
sympy.Mul.flatten(cls,seq)
sympy.Mul.matches(self,expr,repl_dict={},old=False)
sympy.core.mul.Mul(Expr,AssocOp)
sympy.core.mul.Mul._combine_inverse(lhs,rhs)
sympy.core.mul.Mul._eval_adjoint(self)
sympy.core.mul.Mul._eval_as_leading_term(self,x)
sympy.core.mul.Mul._eval_conjugate(self)
sympy.core.mul.Mul._eval_derivative(self,s)
sympy.core.mul.Mul._eval_evalf(self,prec)
sympy.core.mul.Mul._eval_expand_mul(self,**hints)
sympy.core.mul.Mul._eval_is_algebraic(self)
sympy.core.mul.Mul._eval_is_algebraic_expr(self,syms)
sympy.core.mul.Mul._eval_is_antihermitian(self)
sympy.core.mul.Mul._eval_is_even(self)
sympy.core.mul.Mul._eval_is_hermitian(self)
sympy.core.mul.Mul._eval_is_imaginary(self)
sympy.core.mul.Mul._eval_is_infinite(self)
sympy.core.mul.Mul._eval_is_integer(self)
sympy.core.mul.Mul._eval_is_irrational(self)
sympy.core.mul.Mul._eval_is_negative(self)
sympy.core.mul.Mul._eval_is_odd(self)
sympy.core.mul.Mul._eval_is_polar(self)
sympy.core.mul.Mul._eval_is_polynomial(self,syms)
sympy.core.mul.Mul._eval_is_positive(self)
sympy.core.mul.Mul._eval_is_rational(self)
sympy.core.mul.Mul._eval_is_rational_function(self,syms)
sympy.core.mul.Mul._eval_is_real(self)
sympy.core.mul.Mul._eval_is_zero(self)
sympy.core.mul.Mul._eval_nseries(self,x,n,logx)
sympy.core.mul.Mul._eval_power(b,e)
sympy.core.mul.Mul._eval_subs(self,old,new)
sympy.core.mul.Mul._eval_transpose(self)
sympy.core.mul.Mul._expandsums(sums)
sympy.core.mul.Mul._matches(self,expr,repl_dict={})
sympy.core.mul.Mul._matches_simple(self,expr,repl_dict)
sympy.core.mul.Mul._sage_(self)
sympy.core.mul.Mul._sorted_args(self)
sympy.core.mul.Mul.as_base_exp(self)
sympy.core.mul.Mul.as_coeff_Mul(self,rational=False)
sympy.core.mul.Mul.as_coeff_mul(self,*deps)
sympy.core.mul.Mul.as_content_primitive(self,radical=False)
sympy.core.mul.Mul.as_numer_denom(self)
sympy.core.mul.Mul.as_ordered_factors(self,order=None)
sympy.core.mul.Mul.as_powers_dict(self)
sympy.core.mul.Mul.as_real_imag(self,deep=True,**hints)
sympy.core.mul.Mul.as_two_terms(self)
sympy.core.mul.Mul.class_key(cls)
sympy.core.mul.Mul.flatten(cls,seq)
sympy.core.mul.Mul.matches(self,expr,repl_dict={},old=False)
sympy.core.mul.NC_Marker
sympy.core.mul._keep_coeff(coeff,factors,clear=True,sign=False)
sympy.core.mul._mulsort(args)
sympy.core.mul._unevaluated_Mul(*args)
sympy.core.mul.expand_2arg(e)
sympy.core.mul.prod(a,start=1)
sympy.mul.NC_Marker
sympy.mul._keep_coeff(coeff,factors,clear=True,sign=False)
sympy.mul._mulsort(args)
sympy.mul._unevaluated_Mul(*args)
sympy.mul.expand_2arg(e)
sympy.prod(a,start=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/basic.py----------------------------------------
A:sympy.core.basic.obj->object.__new__(cls)
A:sympy.core.basic.h->hash((type(self).__name__,) + self._hashable_content())
A:sympy.core.basic.st->self._hashable_content()
A:sympy.core.basic.ot->_sympify(other)._hashable_content()
A:sympy.core.basic.c->Basic.compare(a3, b3)
A:sympy.core.basic.r_a->a.match(p1 * p2 ** p3)
A:sympy.core.basic.r_b->b.match(p1 * p2 ** p3)
A:sympy.core.basic.other->_sympify(other)
A:sympy.core.basic.dummy->dummy_symbols.pop()
A:sympy.core.basic.symbol->symbols.pop()
A:sympy.core.basic.tmp->dummy_symbols.pop().__class__()
A:sympy.core.basic.types->tuple([t if isinstance(t, type) else type(t) for t in types])
A:sympy.core.basic.result->_query(expr)
A:sympy.core.basic.poly->Poly(self, *gens, **args)
A:sympy.core.basic.sequence->sorted([(k, v) for (k, v) in sequence.items()], key=default_sort_key)
A:sympy.core.basic.so->core.C.Symbol(o)
A:sympy.core.basic.m->core.C.Dummy()
A:sympy.core.basic.d->arg._subs(old, new, **hints).xreplace(d).matches(other_arg, d, old=old)
A:sympy.core.basic.rv->sympify(pattern).matches(self, old=old)
A:sympy.core.basic.args->ordered(args)
A:sympy.core.basic.arg->arg._subs(old, new, **hints)._subs(old, new, **hints)
A:sympy.core.basic.hack2->hints.get('hack2', False)
A:sympy.core.basic.nonnumber->self.func(*nonnumber)
A:sympy.core.basic.pattern->sympify(pattern)
A:sympy.core.basic.match->sympify(pattern)._has_matcher()
A:sympy.core.basic.query->sympify(query)
A:sympy.core.basic.value->sympify(value)
A:sympy.core.basic.new->_value(expr, result)
A:sympy.core.basic.com->getattr(new, 'is_commutative', True)
A:sympy.core.basic.mask->list(reversed(mask))
A:sympy.core.basic.mapping->dict([(k.xreplace(r), v.xreplace(r)) for (k, v) in mapping.items()])
A:sympy.core.basic.results->list(filter(query, preorder_traversal(self)))
A:sympy.core.basic.expr->sympify(expr)
A:sympy.core.basic.s->signsimp(self)
A:sympy.core.basic.p->signsimp(pattern)
A:sympy.core.basic.rewritten->getattr(self, rule)(*args)
A:sympy.core.basic.pot->preorder_traversal(e)
A:sympy.core.basic.seen->set()
A:sympy.core.basic.atoms->set()
A:sympy.core.basic.self._pt->self._preorder_traversal(node, keys)
sympy.Atom(Basic)
sympy.Atom._eval_simplify(self,ratio,measure)
sympy.Atom._sorted_args(self)
sympy.Atom.class_key(cls)
sympy.Atom.doit(self,**hints)
sympy.Atom.matches(self,expr,repl_dict={},old=False)
sympy.Atom.sort_key(self,order=None)
sympy.Atom.xreplace(self,rule,hack2=False)
sympy.Basic(cls,*args)
sympy.Basic.__eq__(self,other)
sympy.Basic.__getnewargs__(self)
sympy.Basic.__getstate__(self)
sympy.Basic.__hash__(self)
sympy.Basic.__ne__(self,other)
sympy.Basic.__reduce_ex__(self,proto)
sympy.Basic.__repr__(self)
sympy.Basic.__setstate__(self,state)
sympy.Basic.__str__(self)
sympy.Basic._compare_pretty(a,b)
sympy.Basic._eval_rewrite(self,pattern,rule,**hints)
sympy.Basic._eval_subs(self,old,new)
sympy.Basic._has(self,pattern)
sympy.Basic._has_matcher(self)
sympy.Basic._hashable_content(self)
sympy.Basic._recursive_call(expr_to_call,on_args)
sympy.Basic._sorted_args(self)
sympy.Basic._subs(self,old,new,**hints)
sympy.Basic.args(self)
sympy.Basic.as_content_primitive(self,radical=False)
sympy.Basic.as_poly(self,*gens,**args)
sympy.Basic.assumptions0(self)
sympy.Basic.atoms(self,*types)
sympy.Basic.canonical_variables(self)
sympy.Basic.class_key(cls)
sympy.Basic.compare(self,other)
sympy.Basic.copy(self)
sympy.Basic.count(self,query)
sympy.Basic.count_ops(self,visual=None)
sympy.Basic.doit(self,**hints)
sympy.Basic.dummy_eq(self,other,symbol=None)
sympy.Basic.find(self,query,group=False)
sympy.Basic.free_symbols(self)
sympy.Basic.fromiter(cls,args,**assumptions)
sympy.Basic.func(self)
sympy.Basic.has(self,*patterns)
sympy.Basic.is_bounded(self)
sympy.Basic.is_comparable(self)
sympy.Basic.is_hypergeometric(self,k)
sympy.Basic.is_infinitesimal(self)
sympy.Basic.is_unbounded(self)
sympy.Basic.iter_basic_args(self)
sympy.Basic.match(self,pattern,old=False)
sympy.Basic.matches(self,expr,repl_dict={},old=False)
sympy.Basic.rcall(self,*args)
sympy.Basic.replace(self,query,value,map=False,simultaneous=True,exact=False)
sympy.Basic.rewrite(self,*args,**hints)
sympy.Basic.sort_key(self,order=None)
sympy.Basic.subs(self,*args,**kwargs)
sympy.Basic.xreplace(self,rule)
sympy.basic._aresame(a,b)
sympy.basic._atomic(e)
sympy.basic._make_find_query(query)
sympy.core.basic.Atom(Basic)
sympy.core.basic.Atom._eval_simplify(self,ratio,measure)
sympy.core.basic.Atom._sorted_args(self)
sympy.core.basic.Atom.class_key(cls)
sympy.core.basic.Atom.doit(self,**hints)
sympy.core.basic.Atom.matches(self,expr,repl_dict={},old=False)
sympy.core.basic.Atom.sort_key(self,order=None)
sympy.core.basic.Atom.xreplace(self,rule,hack2=False)
sympy.core.basic.Basic(cls,*args)
sympy.core.basic.Basic.__eq__(self,other)
sympy.core.basic.Basic.__getnewargs__(self)
sympy.core.basic.Basic.__getstate__(self)
sympy.core.basic.Basic.__hash__(self)
sympy.core.basic.Basic.__ne__(self,other)
sympy.core.basic.Basic.__new__(cls,*args)
sympy.core.basic.Basic.__reduce_ex__(self,proto)
sympy.core.basic.Basic.__repr__(self)
sympy.core.basic.Basic.__setstate__(self,state)
sympy.core.basic.Basic.__str__(self)
sympy.core.basic.Basic._compare_pretty(a,b)
sympy.core.basic.Basic._eval_rewrite(self,pattern,rule,**hints)
sympy.core.basic.Basic._eval_subs(self,old,new)
sympy.core.basic.Basic._has(self,pattern)
sympy.core.basic.Basic._has_matcher(self)
sympy.core.basic.Basic._hashable_content(self)
sympy.core.basic.Basic._recursive_call(expr_to_call,on_args)
sympy.core.basic.Basic._sorted_args(self)
sympy.core.basic.Basic._subs(self,old,new,**hints)
sympy.core.basic.Basic.args(self)
sympy.core.basic.Basic.as_content_primitive(self,radical=False)
sympy.core.basic.Basic.as_poly(self,*gens,**args)
sympy.core.basic.Basic.assumptions0(self)
sympy.core.basic.Basic.atoms(self,*types)
sympy.core.basic.Basic.canonical_variables(self)
sympy.core.basic.Basic.class_key(cls)
sympy.core.basic.Basic.compare(self,other)
sympy.core.basic.Basic.copy(self)
sympy.core.basic.Basic.count(self,query)
sympy.core.basic.Basic.count_ops(self,visual=None)
sympy.core.basic.Basic.doit(self,**hints)
sympy.core.basic.Basic.dummy_eq(self,other,symbol=None)
sympy.core.basic.Basic.find(self,query,group=False)
sympy.core.basic.Basic.free_symbols(self)
sympy.core.basic.Basic.fromiter(cls,args,**assumptions)
sympy.core.basic.Basic.func(self)
sympy.core.basic.Basic.has(self,*patterns)
sympy.core.basic.Basic.is_bounded(self)
sympy.core.basic.Basic.is_comparable(self)
sympy.core.basic.Basic.is_hypergeometric(self,k)
sympy.core.basic.Basic.is_infinitesimal(self)
sympy.core.basic.Basic.is_unbounded(self)
sympy.core.basic.Basic.iter_basic_args(self)
sympy.core.basic.Basic.match(self,pattern,old=False)
sympy.core.basic.Basic.matches(self,expr,repl_dict={},old=False)
sympy.core.basic.Basic.rcall(self,*args)
sympy.core.basic.Basic.replace(self,query,value,map=False,simultaneous=True,exact=False)
sympy.core.basic.Basic.rewrite(self,*args,**hints)
sympy.core.basic.Basic.sort_key(self,order=None)
sympy.core.basic.Basic.subs(self,*args,**kwargs)
sympy.core.basic.Basic.xreplace(self,rule)
sympy.core.basic._aresame(a,b)
sympy.core.basic._atomic(e)
sympy.core.basic._make_find_query(query)
sympy.core.basic.preorder_traversal(self,node,keys=None)
sympy.core.basic.preorder_traversal.__init__(self,node,keys=None)
sympy.core.basic.preorder_traversal.__iter__(self)
sympy.core.basic.preorder_traversal.__next__(self)
sympy.core.basic.preorder_traversal._preorder_traversal(self,node,keys)
sympy.core.basic.preorder_traversal.skip(self)
sympy.preorder_traversal(self,node,keys=None)
sympy.preorder_traversal.__iter__(self)
sympy.preorder_traversal.__next__(self)
sympy.preorder_traversal._preorder_traversal(self,node,keys)
sympy.preorder_traversal.skip(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/containers.py----------------------------------------
A:sympy.core.containers.obj->sympy.core.basic.Basic.__new__(cls, elements)
A:sympy.core.containers.indices->i.indices(len(self))
A:sympy.core.containers.n->as_int(other)
A:sympy.core.containers.elements->frozenset(items)
A:sympy.core.containers.obj._dict->dict(items)
sympy.Dict(cls,*args)
sympy.Dict.__contains__(self,key)
sympy.Dict.__getitem__(self,key)
sympy.Dict.__iter__(self)
sympy.Dict.__len__(self)
sympy.Dict.__lt__(self,other)
sympy.Dict.__setitem__(self,key,value)
sympy.Dict._sorted_args(self)
sympy.Dict.args(self)
sympy.Dict.get(self,key,default=None)
sympy.Dict.items(self)
sympy.Dict.keys(self)
sympy.Dict.values(self)
sympy.Tuple(cls,*args,**assumptions)
sympy.Tuple.__add__(self,other)
sympy.Tuple.__contains__(self,item)
sympy.Tuple.__eq__(self,other)
sympy.Tuple.__getitem__(self,i)
sympy.Tuple.__hash__(self)
sympy.Tuple.__iter__(self)
sympy.Tuple.__le__(self,other)
sympy.Tuple.__len__(self)
sympy.Tuple.__lt__(self,other)
sympy.Tuple.__mul__(self,other)
sympy.Tuple.__ne__(self,other)
sympy.Tuple.__radd__(self,other)
sympy.Tuple._to_mpmath(self,prec)
sympy.Tuple.index(self,value,start=None,stop=None)
sympy.Tuple.tuple_count(self,value)
sympy.containers.tuple_wrapper(method)
sympy.core.containers.Dict(cls,*args)
sympy.core.containers.Dict.__contains__(self,key)
sympy.core.containers.Dict.__getitem__(self,key)
sympy.core.containers.Dict.__iter__(self)
sympy.core.containers.Dict.__len__(self)
sympy.core.containers.Dict.__lt__(self,other)
sympy.core.containers.Dict.__new__(cls,*args)
sympy.core.containers.Dict.__setitem__(self,key,value)
sympy.core.containers.Dict._sorted_args(self)
sympy.core.containers.Dict.args(self)
sympy.core.containers.Dict.get(self,key,default=None)
sympy.core.containers.Dict.items(self)
sympy.core.containers.Dict.keys(self)
sympy.core.containers.Dict.values(self)
sympy.core.containers.Tuple(cls,*args,**assumptions)
sympy.core.containers.Tuple.__add__(self,other)
sympy.core.containers.Tuple.__contains__(self,item)
sympy.core.containers.Tuple.__eq__(self,other)
sympy.core.containers.Tuple.__getitem__(self,i)
sympy.core.containers.Tuple.__hash__(self)
sympy.core.containers.Tuple.__iter__(self)
sympy.core.containers.Tuple.__le__(self,other)
sympy.core.containers.Tuple.__len__(self)
sympy.core.containers.Tuple.__lt__(self,other)
sympy.core.containers.Tuple.__mul__(self,other)
sympy.core.containers.Tuple.__ne__(self,other)
sympy.core.containers.Tuple.__new__(cls,*args,**assumptions)
sympy.core.containers.Tuple.__radd__(self,other)
sympy.core.containers.Tuple._to_mpmath(self,prec)
sympy.core.containers.Tuple.index(self,value,start=None,stop=None)
sympy.core.containers.Tuple.tuple_count(self,value)
sympy.core.containers.tuple_wrapper(method)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/trace.py----------------------------------------
A:sympy.core.trace.e->sympify(e)
A:sympy.core.trace.min_item->min(l, key=default_sort_key)
A:sympy.core.trace.le->list(l)
A:sympy.core.trace.idx->sublist.index(min(sublist))
A:sympy.core.trace.x->list(l[-1:])
A:sympy.core.trace.indices->Tuple()
A:sympy.core.trace.(c_part, nc_part)->expr.args_cnc()
A:sympy.core.trace.obj->sympy.Expr.__new__(cls, Mul(*nc_part), indices)
A:sympy.core.trace.args->_cycle_permute(_rearrange_args(self.args[0].args))
sympy.core.trace.Tr(cls,*args)
sympy.core.trace.Tr.__new__(cls,*args)
sympy.core.trace.Tr._hashable_content(self)
sympy.core.trace.Tr.doit(self,**kwargs)
sympy.core.trace.Tr.is_number(self)
sympy.core.trace.Tr.permute(self,pos)
sympy.core.trace._cycle_permute(l)
sympy.core.trace._is_scalar(e)
sympy.core.trace._rearrange_args(l)
sympy.trace.Tr(cls,*args)
sympy.trace.Tr._hashable_content(self)
sympy.trace.Tr.doit(self,**kwargs)
sympy.trace.Tr.is_number(self)
sympy.trace.Tr.permute(self,pos)
sympy.trace._cycle_permute(l)
sympy.trace._is_scalar(e)
sympy.trace._rearrange_args(l)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/logic.py----------------------------------------
A:sympy.core.logic.ai->fuzzy_bool(ai)
A:sympy.core.logic.obj->object.__new__(cls)
A:sympy.core.logic.a->str(type(a))
A:sympy.core.logic.b->str(type(b))
A:sympy.core.logic.term->Not(term[1:])
A:sympy.core.logic.lexpr->Logic.op_2class[schedop](lexpr, term)
A:sympy.core.logic.args->tuple(res)
A:sympy.core.logic.args_queue->list(args)
A:sympy.core.logic.arg->arg._eval_propagate_not()._eval_propagate_not()
A:sympy.core.logic.orterms[j]->orterms[j].expand().expand()
A:sympy.core.logic.res->Or(*orterms)
sympy.core.And(AndOr_Base)
sympy.core.And._eval_propagate_not(self)
sympy.core.And.expand(self)
sympy.core.AndOr_Base(cls,*args)
sympy.core.AndOr_Base.flatten(cls,args)
sympy.core.Logic(cls,*args)
sympy.core.Logic.__cmp__(a,b)
sympy.core.Logic.__eq__(a,b)
sympy.core.Logic.__getnewargs__(self)
sympy.core.Logic.__hash__(self)
sympy.core.Logic.__lt__(cls,other)
sympy.core.Logic.__ne__(a,b)
sympy.core.Logic.__str__(self)
sympy.core.Logic.fromstring(text)
sympy.core.Not(cls,arg)
sympy.core.Not.arg(self)
sympy.core.Or(AndOr_Base)
sympy.core.Or._eval_propagate_not(self)
sympy.core._fuzzy_group(args,quick_exit=False)
sympy.core.fuzzy_and(args)
sympy.core.fuzzy_bool(x)
sympy.core.fuzzy_not(v)
sympy.core.fuzzy_or(args)
sympy.core.logic.And(AndOr_Base)
sympy.core.logic.And._eval_propagate_not(self)
sympy.core.logic.And.expand(self)
sympy.core.logic.AndOr_Base(cls,*args)
sympy.core.logic.AndOr_Base.__new__(cls,*args)
sympy.core.logic.AndOr_Base.flatten(cls,args)
sympy.core.logic.Logic(cls,*args)
sympy.core.logic.Logic.__cmp__(a,b)
sympy.core.logic.Logic.__eq__(a,b)
sympy.core.logic.Logic.__getnewargs__(self)
sympy.core.logic.Logic.__hash__(self)
sympy.core.logic.Logic.__lt__(cls,other)
sympy.core.logic.Logic.__ne__(a,b)
sympy.core.logic.Logic.__new__(cls,*args)
sympy.core.logic.Logic.__str__(self)
sympy.core.logic.Logic.fromstring(text)
sympy.core.logic.Not(cls,arg)
sympy.core.logic.Not.__new__(cls,arg)
sympy.core.logic.Not.arg(self)
sympy.core.logic.Or(AndOr_Base)
sympy.core.logic.Or._eval_propagate_not(self)
sympy.core.logic._fuzzy_group(args,quick_exit=False)
sympy.core.logic.fuzzy_and(args)
sympy.core.logic.fuzzy_bool(x)
sympy.core.logic.fuzzy_not(v)
sympy.core.logic.fuzzy_or(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/evalf.py----------------------------------------
A:sympy.core.evalf.LG10->math.log(10, 2)
A:sympy.core.evalf.INF->float(mpmath_inf)
A:sympy.core.evalf.MINUS_INF->float(-mpmath_inf)
A:sympy.core.evalf.(h, t)->self._eval_evalf(prec).as_coeff_Add()
A:sympy.core.evalf.(c, i)->t.as_coeff_Mul()
A:sympy.core.evalf.re_size->fastlog(re)
A:sympy.core.evalf.im_size->fastlog(im)
A:sympy.core.evalf.absolute_error->max(absolute_error, bc + exp - accuracy)
A:sympy.core.evalf.(re, im, re_acc, im_acc)->evalf(s, prec2, options)
A:sympy.core.evalf.res->pure_complex(v)
A:sympy.core.evalf.size_re->fastlog(re)
A:sympy.core.evalf.size_im->fastlog(im)
A:sympy.core.evalf.a->complex_accuracy(result)
A:sympy.core.evalf.(ire, iim, ire_acc, iim_acc)->evalf(expr, margin + assumed_size + gap, options)
A:sympy.core.evalf.gap->max(fastlog(ire) - ire_acc, fastlog(iim) - iim_acc)
A:sympy.core.evalf.nint->from_int(nint)
A:sympy.core.evalf.expr->expr.subs(options['subs']).subs(options['subs'])
A:sympy.core.evalf.(x, _, x_acc, _)->evalf(expr, 10, options)
A:sympy.core.evalf.(re, re_acc)->scaled_zero(min(-prec, -max_real_term[0], -quadrature_error))
A:sympy.core.evalf.(im, im_acc)->scaled_zero(min(-prec, -max_imag_term[0], -quadrature_error))
A:sympy.core.evalf.arg->mpf_mul(re, wim, use_prec).Add(S.NegativeOne, arg, evaluate=False)
A:sympy.core.evalf.rv->rv.round(1 - m).round(1 - m)
A:sympy.core.evalf.sum_bc->bitcount(sum_man)
A:sympy.core.evalf.(re, _, re_acc, _)->evalf(h, prec, options)
A:sympy.core.evalf.(im, _, im_acc, _)->evalf(h, prec, options)
A:sympy.core.evalf.oldmaxprec->options.get('maxprec', DEFAULT_MAXPREC)
A:sympy.core.evalf.options['maxprec']->min(oldmaxprec, 2 * prec)
A:sympy.core.evalf.acc->min(acc, complex_accuracy((wre, wim, wre_acc, wim_acc)))
A:sympy.core.evalf.re->from_int(re.p)
A:sympy.core.evalf.im->from_int(im.p)
A:sympy.core.evalf.args->list(v.args)
A:sympy.core.evalf.special->Mul(*special)
A:sympy.core.evalf.last->len(args)
A:sympy.core.evalf.args[-1]->(args[-1] * arg).expand()
A:sympy.core.evalf.v->self._eval_evalf(prec)
A:sympy.core.evalf.A->mpf_mul(re, wim, use_prec).Wild('A', exclude=[x])
A:sympy.core.evalf.B->mpf_mul(re, wim, use_prec).Wild('B', exclude=[x])
A:sympy.core.evalf.C->mpf_mul(re, wim, use_prec)
A:sympy.core.evalf.D->mpf_mul(re, wim, use_prec).Wild('D')
A:sympy.core.evalf.z->mpf_pow_int(im, p, target_prec)
A:sympy.core.evalf.(re, im)->self._eval_evalf(prec).as_real_imag()
A:sympy.core.evalf.(xre, xim, _, _)->evalf_add(arg, prec, options)
A:sympy.core.evalf.(yre, yim, _, _)->evalf(exp, prec, options)
A:sympy.core.evalf.ysize->fastlog(y)
A:sympy.core.evalf.xsize->fastlog(re)
A:sympy.core.evalf.y->func(re, prec, rnd)
A:sympy.core.evalf.(xre, xim, xacc, _)->evalf(arg, workprec, options)
A:sympy.core.evalf.size->fastlog(re)
A:sympy.core.evalf.(xre, xim, reacc, imacc)->evalf(arg, prec + 5, options)
A:sympy.core.evalf.b->mpf_bernoulli(n, prec, rnd)
A:sympy.core.evalf.newopts->options.copy()
A:sympy.core.evalf.n->int(arg)
A:sympy.core.evalf.x->x.subs(evalf_subs(prec, options['subs'])).subs(evalf_subs(prec, options['subs']))
A:sympy.core.evalf.(re, im, _, _)->evalf(self, prec, {})
A:sympy.core.evalf.xlow->as_mpmath(xlow, prec + 15, options)
A:sympy.core.evalf.xhigh->as_mpmath(xhigh, prec + 15, options)
A:sympy.core.evalf.max_real_term[0]->max(max_real_term[0], fastlog(re))
A:sympy.core.evalf.max_imag_term[0]->max(max_imag_term[0], fastlog(im))
A:sympy.core.evalf.m->_mag(rv)
A:sympy.core.evalf.period->as_mpmath(2 * S.Pi / m[A], prec + 15, options)
A:sympy.core.evalf.result->evalf(v, prec, options)
A:sympy.core.evalf.(result, quadrature_error)->quadts(f, [xlow, xhigh], error=1)
A:sympy.core.evalf.quadrature_error->fastlog(quadrature_error._mpf_)
A:sympy.core.evalf.maxprec->options.get('maxprec', INF)
A:sympy.core.evalf.accuracy->complex_accuracy(result)
A:sympy.core.evalf.workprec->min(workprec, maxprec)
A:sympy.core.evalf.npol->mpf_mul(re, wim, use_prec).Poly(numer, n)
A:sympy.core.evalf.dpol->mpf_mul(re, wim, use_prec).Poly(denom, n)
A:sympy.core.evalf.p->max(min(prec, im_acc), 1)
A:sympy.core.evalf.q->mpf_mul(re, wim, use_prec).Poly(denom, n).degree()
A:sympy.core.evalf.hs->hypersimp(expr, n)
A:sympy.core.evalf.(num, den)->hypersimp(expr, n).as_numer_denom()
A:sympy.core.evalf.func1->lambdify(n, num)
A:sympy.core.evalf.func2->lambdify(n, den)
A:sympy.core.evalf.(h, g, p)->check_convergence(num, den, n)
A:sympy.core.evalf.term->expr.subs(options['subs']).subs(options['subs']).subs(n, 0)
A:sympy.core.evalf.k->int(k)
A:sympy.core.evalf.(s, err)->expr.subs(options['subs']).subs(options['subs']).euler_maclaurin(m=m, n=n, eps=eps, eval_integral=False)
A:sympy.core.evalf.err->fastlog(evalf(abs(err), 20, options)[0])
A:sympy.core.evalf.(cached, cached_prec)->cache.get(x.name, (None, MINUS_INF))
A:sympy.core.evalf.r->self._eval_evalf(prec)
A:sympy.core.evalf.chop->options.get('chop', False)
A:sympy.core.evalf.chop_prec->int(round(-3.321 * math.log10(chop) + 2.5))
A:sympy.core.evalf.prec->dps_to_prec(n)
sympy.N(x,n=15,**options)
sympy.PrecisionExhausted(ArithmeticError)
sympy.core.evalf.EvalfMixin(object)
sympy.core.evalf.EvalfMixin._eval_evalf(self,prec)
sympy.core.evalf.EvalfMixin._evalf(self,prec)
sympy.core.evalf.EvalfMixin._to_mpmath(self,prec,allow_ints=True)
sympy.core.evalf.EvalfMixin.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.core.evalf.N(x,n=15,**options)
sympy.core.evalf.PrecisionExhausted(ArithmeticError)
sympy.core.evalf._create_evalf_table()
sympy.core.evalf.add_terms(terms,prec,target_prec)
sympy.core.evalf.as_mpmath(x,prec,options)
sympy.core.evalf.bitcount(n)
sympy.core.evalf.check_convergence(numer,denom,n)
sympy.core.evalf.check_target(expr,result,prec)
sympy.core.evalf.chop_parts(value,prec)
sympy.core.evalf.complex_accuracy(result)
sympy.core.evalf.do_integral(expr,prec,options)
sympy.core.evalf.evalf(x,prec,options)
sympy.core.evalf.evalf_abs(expr,prec,options)
sympy.core.evalf.evalf_add(v,prec,options)
sympy.core.evalf.evalf_atan(v,prec,options)
sympy.core.evalf.evalf_bernoulli(expr,prec,options)
sympy.core.evalf.evalf_ceiling(expr,prec,options)
sympy.core.evalf.evalf_floor(expr,prec,options)
sympy.core.evalf.evalf_im(expr,prec,options)
sympy.core.evalf.evalf_integral(expr,prec,options)
sympy.core.evalf.evalf_log(expr,prec,options)
sympy.core.evalf.evalf_mul(v,prec,options)
sympy.core.evalf.evalf_piecewise(expr,prec,options)
sympy.core.evalf.evalf_pow(v,prec,options)
sympy.core.evalf.evalf_prod(expr,prec,options)
sympy.core.evalf.evalf_re(expr,prec,options)
sympy.core.evalf.evalf_subs(prec,subs)
sympy.core.evalf.evalf_sum(expr,prec,options)
sympy.core.evalf.evalf_symbol(x,prec,options)
sympy.core.evalf.evalf_trig(v,prec,options)
sympy.core.evalf.fastlog(x)
sympy.core.evalf.finalize_complex(re,im,prec)
sympy.core.evalf.get_abs(expr,prec,options)
sympy.core.evalf.get_complex_part(expr,no,prec,options)
sympy.core.evalf.get_integer_part(expr,no,options,return_ints=False)
sympy.core.evalf.hypsum(expr,n,start,prec)
sympy.core.evalf.iszero(mpf,scaled=False)
sympy.core.evalf.pure_complex(v)
sympy.core.evalf.scaled_zero(mag,sign=1)
sympy.evalf.EvalfMixin(object)
sympy.evalf.EvalfMixin._eval_evalf(self,prec)
sympy.evalf.EvalfMixin._evalf(self,prec)
sympy.evalf.EvalfMixin._to_mpmath(self,prec,allow_ints=True)
sympy.evalf.EvalfMixin.evalf(self,n=15,subs=None,maxn=100,chop=False,strict=False,quad=None,verbose=False)
sympy.evalf._create_evalf_table()
sympy.evalf.add_terms(terms,prec,target_prec)
sympy.evalf.as_mpmath(x,prec,options)
sympy.evalf.bitcount(n)
sympy.evalf.check_convergence(numer,denom,n)
sympy.evalf.check_target(expr,result,prec)
sympy.evalf.chop_parts(value,prec)
sympy.evalf.complex_accuracy(result)
sympy.evalf.do_integral(expr,prec,options)
sympy.evalf.evalf(x,prec,options)
sympy.evalf.evalf_abs(expr,prec,options)
sympy.evalf.evalf_add(v,prec,options)
sympy.evalf.evalf_atan(v,prec,options)
sympy.evalf.evalf_bernoulli(expr,prec,options)
sympy.evalf.evalf_ceiling(expr,prec,options)
sympy.evalf.evalf_floor(expr,prec,options)
sympy.evalf.evalf_im(expr,prec,options)
sympy.evalf.evalf_integral(expr,prec,options)
sympy.evalf.evalf_log(expr,prec,options)
sympy.evalf.evalf_mul(v,prec,options)
sympy.evalf.evalf_piecewise(expr,prec,options)
sympy.evalf.evalf_pow(v,prec,options)
sympy.evalf.evalf_prod(expr,prec,options)
sympy.evalf.evalf_re(expr,prec,options)
sympy.evalf.evalf_subs(prec,subs)
sympy.evalf.evalf_sum(expr,prec,options)
sympy.evalf.evalf_symbol(x,prec,options)
sympy.evalf.evalf_trig(v,prec,options)
sympy.evalf.fastlog(x)
sympy.evalf.finalize_complex(re,im,prec)
sympy.evalf.get_abs(expr,prec,options)
sympy.evalf.get_complex_part(expr,no,prec,options)
sympy.evalf.get_integer_part(expr,no,options,return_ints=False)
sympy.evalf.hypsum(expr,n,start,prec)
sympy.evalf.iszero(mpf,scaled=False)
sympy.evalf.pure_complex(v)
sympy.evalf.scaled_zero(mag,sign=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/mod.py----------------------------------------
A:sympy.core.mod.d->int(r)
A:sympy.core.mod.rv->doit(p, q)
A:sympy.core.mod.G->sympy.core.mul.Mul._from_args(G.args[1:])
A:sympy.core.mod.a->cls(i, q)
A:sympy.core.mod.p->Add(*args)
A:sympy.core.mod.(cp, p)->Add(*args).as_coeff_Mul()
A:sympy.core.mod.(cq, q)->q.as_coeff_Mul()
sympy.Mod(Function)
sympy.Mod.eval(cls,p,q)
sympy.core.mod.Mod(Function)
sympy.core.mod.Mod.eval(cls,p,q)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/coreerrors.py----------------------------------------
sympy.core.coreerrors.BaseCoreError(Exception)
sympy.core.coreerrors.NonCommutativeExpression(BaseCoreError)
sympy.coreerrors.BaseCoreError(Exception)
sympy.coreerrors.NonCommutativeExpression(BaseCoreError)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/operations.py----------------------------------------
A:sympy.core.operations.args->list(map(_sympify, args))
A:sympy.core.operations.(c_part, nc_part, order_symbols)->cls.flatten(args)
A:sympy.core.operations.obj->super(AssocOp, cls).__new__(cls, _args)
A:sympy.core.operations.is_commutative->fuzzy_and((a.is_commutative for a in args))
A:sympy.core.operations.o->seq.pop()
A:sympy.core.operations.d->self._matches_simple(expr, repl_dict)
A:sympy.core.operations.exact->self.func(*exact_part)
A:sympy.core.operations.newpattern->self.func(*wild_part)
A:sympy.core.operations.newexpr->self._combine_inverse(expr, exact)
A:sympy.core.operations.saw->set()
A:sympy.core.operations.d1->w.matches(last_op, repl_dict)
A:sympy.core.operations.d2->self.xreplace(d1).matches(expr, d1)
A:sympy.core.operations.expr->collect(expr, free)
A:sympy.core.operations.(c, e)->collect(expr, free).as_coeff_Mul()
A:sympy.core.operations.did->set()
A:sympy.core.operations.(c, w)->w.as_coeff_mul(Wild)
A:sympy.core.operations.(c, nc)->_ncsplit(self)
A:sympy.core.operations.(_c, _nc)->_ncsplit(expr)
A:sympy.core.operations.(x, tail)->self.as_independent(C.Symbol, C.AppliedUndef)
A:sympy.core.operations.newa->a._eval_evalf(prec)
A:sympy.core.operations.tail->self.func(*args)
A:sympy.core.operations._args->frozenset(cls._new_args_filter(args))
sympy.core.operations.AssocOp(cls,*args,**options)
sympy.core.operations.AssocOp.__new__(cls,*args,**options)
sympy.core.operations.AssocOp._eval_evalf(self,prec)
sympy.core.operations.AssocOp._from_args(cls,args,is_commutative=None)
sympy.core.operations.AssocOp._has_matcher(self)
sympy.core.operations.AssocOp._matches_commutative(self,expr,repl_dict={},old=False)
sympy.core.operations.AssocOp._new_rawargs(self,*args,**kwargs)
sympy.core.operations.AssocOp.flatten(cls,seq)
sympy.core.operations.AssocOp.make_args(cls,expr)
sympy.core.operations.LatticeOp(cls,*args,**options)
sympy.core.operations.LatticeOp.__new__(cls,*args,**options)
sympy.core.operations.LatticeOp._compare_pretty(a,b)
sympy.core.operations.LatticeOp._new_args_filter(cls,arg_sequence,call_cls=None)
sympy.core.operations.LatticeOp.args(self)
sympy.core.operations.LatticeOp.make_args(cls,expr)
sympy.core.operations.ShortCircuit(Exception)
sympy.operations.AssocOp(cls,*args,**options)
sympy.operations.AssocOp._eval_evalf(self,prec)
sympy.operations.AssocOp._from_args(cls,args,is_commutative=None)
sympy.operations.AssocOp._has_matcher(self)
sympy.operations.AssocOp._matches_commutative(self,expr,repl_dict={},old=False)
sympy.operations.AssocOp._new_rawargs(self,*args,**kwargs)
sympy.operations.AssocOp.flatten(cls,seq)
sympy.operations.AssocOp.make_args(cls,expr)
sympy.operations.LatticeOp(cls,*args,**options)
sympy.operations.LatticeOp._compare_pretty(a,b)
sympy.operations.LatticeOp._new_args_filter(cls,arg_sequence,call_cls=None)
sympy.operations.LatticeOp.args(self)
sympy.operations.LatticeOp.make_args(cls,expr)
sympy.operations.ShortCircuit(Exception)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/singleton.py----------------------------------------
A:sympy.core.singleton.__call__->staticmethod(sympify)
A:sympy.core.singleton.S->SingletonRegistry()
A:sympy.core.singleton.cls._new_instance->staticmethod(ctor)
A:sympy.core.singleton.the_instance->ctor(cls)
A:sympy.core.singleton.cls.__new__->staticmethod(__new__)
sympy.Singleton(cls,name,bases,dict_)
sympy.SingletonRegistry(Registry)
sympy.SingletonRegistry.__repr__(self)
sympy.core.singleton.Singleton(cls,name,bases,dict_)
sympy.core.singleton.Singleton.__init__(cls,name,bases,dict_)
sympy.core.singleton.SingletonRegistry(Registry)
sympy.core.singleton.SingletonRegistry.__repr__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/rules.py----------------------------------------
sympy.core.rules.Transform(self,transform,filter=lambdax:True)
sympy.core.rules.Transform.__contains__(self,item)
sympy.core.rules.Transform.__getitem__(self,key)
sympy.core.rules.Transform.__init__(self,transform,filter=lambdax:True)
sympy.core.rules.Transform.get(self,item,default=None)
sympy.rules.Transform(self,transform,filter=lambdax:True)
sympy.rules.Transform.__contains__(self,item)
sympy.rules.Transform.__getitem__(self,key)
sympy.rules.Transform.get(self,item,default=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/evaluate.py----------------------------------------
A:sympy.core.evaluate.global_evaluate->_global_evaluate([True])
sympy.core.evaluate._global_evaluate(list)
sympy.core.evaluate._global_evaluate.__setitem__(self,key,value)
sympy.core.evaluate.evaluate(x)
sympy.evaluate(x)
sympy.evaluate._global_evaluate(list)
sympy.evaluate._global_evaluate.__setitem__(self,key,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/expr.py----------------------------------------
A:sympy.core.expr.(coeff, expr)->self.simplify().as_coeff_Mul()
A:sympy.core.expr.args->mul.Mul.make_args(self)
A:sympy.core.expr.exp->exps.pop()
A:sympy.core.expr.r->self.simplify().extract_multiplicatively(expr)
A:sympy.core.expr.i->int(r)
A:sympy.core.expr.x->sympify(symbols[0])
A:sympy.core.expr.result->self.simplify().evalf()
A:sympy.core.expr.(re, im)->self.simplify().evalf().as_real_imag()
A:sympy.core.expr.other->sympify(other)
A:sympy.core.expr.re->core.C.Float._new(re, prec)
A:sympy.core.expr.reps->dict(list(zip(free, [random_complex_number(a, b, c, d, rational=True) for zi in free])))
A:sympy.core.expr.nmag->abs(self.evalf(prec, subs=reps))
A:sympy.core.expr.n->S(0)
A:sympy.core.expr.simplify->flags.get('simplify', True)
A:sympy.core.expr.wrt->set(wrt)
A:sympy.core.expr.self->self.simplify().simplify()
A:sympy.core.expr.a->self.simplify().simplify()._random(None, 0, 0, 0, 0)
A:sympy.core.expr.b->self.simplify().simplify()._random()
A:sympy.core.expr.deriv->deriv.simplify().simplify()
A:sympy.core.expr.diff->factor_terms((self - other).simplify(), radical=True)
A:sympy.core.expr.constant->factor_terms((self - other).simplify(), radical=True).is_constant(simplify=False, failing_number=True)
A:sympy.core.expr.ndiff->factor_terms((self - other).simplify(), radical=True)._random()
A:sympy.core.expr.approx->factor_terms((self - other).simplify(), radical=True).nsimplify()
A:sympy.core.expr.sol->solve(diff, s, check=False, simplify=False)
A:sympy.core.expr.mp->minimal_polynomial(diff)
A:sympy.core.expr.n2->self.simplify().simplify()._eval_evalf(2)
A:sympy.core.expr.(n, i)->self.simplify().simplify().evalf(2).as_real_imag()
A:sympy.core.expr.A->limit(self, x, a)
A:sympy.core.expr.B->limit(self, x, b)
A:sympy.core.expr.obj->self.simplify().simplify()._eval_as_leading_term(x)
A:sympy.core.expr.reverse->order.startswith('rev-')
A:sympy.core.expr.monom_key->monomial_key(order)
A:sympy.core.expr.monom->neg(monom_key(monom))
A:sympy.core.expr.ncpart->tuple(ncpart)
A:sympy.core.expr.(key, reverse)->self.simplify().simplify()._parse_order(order)
A:sympy.core.expr.(terms, gens)->self.simplify().simplify().as_terms()
A:sympy.core.expr.ordered->sorted(terms, key=key, reverse=reverse)
A:sympy.core.expr.(coeff, _term)->term.as_coeff_Mul()
A:sympy.core.expr.coeff->exps.pop().as_coefficient(pi * I)
A:sympy.core.expr.(base, exp)->decompose_power(factor)
A:sympy.core.expr.gens->sorted(gens, key=default_sort_key)
A:sympy.core.expr.o->core.C.Order(x ** n, x)
A:sympy.core.expr.syms->self.simplify().simplify().atoms(C.Symbol)
A:sympy.core.expr.oi->oi.subs(x, C.Dummy('x', positive=True)).subs(x, C.Dummy('x', positive=True))
A:sympy.core.expr.clen->len(c)
A:sympy.core.expr.c->sympy.functions.elementary.complexes.conjugate.subs(d, C.log(x)).subs(d, C.log(x))
A:sympy.core.expr.resid->margs.difference(xargs)
A:sympy.core.expr.(margs, nc)->self.simplify().simplify()._random(None, 0, 0, 0, 0).args_cnc(cset=True)
A:sympy.core.expr.(xargs, nx)->sympify(symbols[0]).args_cnc(cset=True)
A:sympy.core.expr.ii->find(n, nx, right)
A:sympy.core.expr.beg->reduce(incommon, (n[1] for n in co))
A:sympy.core.expr.gcdc->gcdc.intersection(co[i][0]).intersection(co[i][0])
A:sympy.core.expr.end->list(reversed(reduce(incommon, (list(reversed(n[1])) for n in co))))
A:sympy.core.expr.sym->set()
A:sympy.core.expr.has_other->series.removeO().has(*other)
A:sympy.core.expr.(args, nc)->self.simplify().simplify().args_cnc()
A:sympy.core.expr.d->core.C.Dummy('logx')
A:sympy.core.expr.(c, m)->self.simplify().simplify().as_coeff_Mul()
A:sympy.core.expr.(c, r)->self.simplify().simplify().as_coeff_Mul(rational=True)
A:sympy.core.expr.(n, d)->fraction(self)
A:sympy.core.expr.(cc, pc)->sympy.functions.elementary.complexes.conjugate.subs(d, C.log(x)).subs(d, C.log(x)).primitive()
A:sympy.core.expr.(a, b)->sympy.functions.elementary.complexes.conjugate.subs(d, C.log(x)).subs(d, C.log(x)).as_two_terms()
A:sympy.core.expr.(cs, ps)->self.simplify().simplify().primitive()
A:sympy.core.expr.newarg->arg.extract_multiplicatively(c)
A:sympy.core.expr.new_exp->self.simplify().simplify().exp.extract_additively(1)
A:sympy.core.expr.(co, t)->self.simplify().simplify().as_coeff_Add()
A:sympy.core.expr.xa->coc.extract_additively(ac)
A:sympy.core.expr.co->self.simplify().simplify().coeff(at)
A:sympy.core.expr.(h, t)->sympy.functions.elementary.complexes.conjugate.subs(d, C.log(x)).subs(d, C.log(x)).as_coeff_Add()
A:sympy.core.expr.(sh, st)->self.simplify().simplify().as_coeff_Add()
A:sympy.core.expr.xa2->st.extract_additively(t)
A:sympy.core.expr.(ac, at)->self.simplify().simplify()._random(None, 0, 0, 0, 0).as_coeff_Mul()
A:sympy.core.expr.(coc, cot)->self.simplify().simplify().coeff(at).as_coeff_Add()
A:sympy.core.expr.all_args->len(self.args)
A:sympy.core.expr.negative_args->list(filter(None, arg_signs))
A:sympy.core.expr.(num, den)->self.simplify().simplify().as_numer_denom()
A:sympy.core.expr.res->S(1)
A:sympy.core.expr.piimult->S(0)
A:sympy.core.expr.(coeff, tail)->term.as_coeff_Mul(rational=True)
A:sympy.core.expr.nc->sympy.functions.elementary.complexes.conjugate.subs(d, C.log(x)).subs(d, C.log(x)).extract_additively(1)
A:sympy.core.expr.s->collect(self, x)
A:sympy.core.expr.xpos->abs(x.n())
A:sympy.core.expr.rv->Rational(rv, q)
A:sympy.core.expr.s1->s1.removeO().removeO()
A:sympy.core.expr.ngot->core.C.Order(x ** n, x).getn()
A:sympy.core.expr.newn->s1.removeO().removeO().getn()
A:sympy.core.expr.ndo->len(si.args)
A:sympy.core.expr.do->(si - yielded + o).removeO()
A:sympy.core.expr._x->core.C.Dummy('x')
A:sympy.core.expr.series->self.simplify().simplify()._eval_nseries(x, n=n, logx=logx).removeO()
A:sympy.core.expr.e->self.simplify().simplify()._eval_nseries(x, n=n, logx=logx).removeO().removeO()
A:sympy.core.expr.(c, p)->collect(self, x).as_coeff_mul(x)
A:sympy.core.expr.(b, e)->p[0].as_base_exp()
A:sympy.core.expr.l->l.subs(C.log(x), d).subs(C.log(x), d)
A:sympy.core.expr.(c, e)->l.subs(C.log(x), d).subs(C.log(x), d).as_coeff_exponent(x)
A:sympy.core.expr.new_symbols->list(map(sympify, symbols))
A:sympy.core.expr.(real, imag)->self.simplify().simplify().as_real_imag(**hints)
A:sympy.core.expr.(arg, arghit)->Expr._expand_hint(arg, hint, **hints)
A:sympy.core.expr.expr->Add(*terms)
A:sympy.core.expr.newexpr->getattr(expr, hint)(**hints)
A:sympy.core.expr.(expr, hit)->Expr._expand_hint(expr, hint, deep=deep, **hints)
A:sympy.core.expr.(expr, _)->Expr._expand_hint(expr, '_eval_expand_log', deep=deep, **hints)
A:sympy.core.expr.modulus->sympify(modulus)
A:sympy.core.expr.(i, r)->sympify(symbols[0]).as_real_imag()
A:sympy.core.expr.p->int(p)
A:sympy.core.expr.mag_first_dig->int(ceil(C.Float(mpf_log(xpos._mpf_, 53)) / log(10)))
A:sympy.core.expr.mag->Pow(10, p)
sympy.AtomicExpr(Atom,Expr)
sympy.AtomicExpr._eval_derivative(self,s)
sympy.AtomicExpr._eval_is_algebraic_expr(self,syms)
sympy.AtomicExpr._eval_is_polynomial(self,syms)
sympy.AtomicExpr._eval_is_rational_function(self,syms)
sympy.AtomicExpr._eval_nseries(self,x,n,logx)
sympy.Expr(Basic,EvalfMixin)
sympy.Expr.__abs__(self)
sympy.Expr.__add__(self,other)
sympy.Expr.__complex__(self)
sympy.Expr.__div__(self,other)
sympy.Expr.__float__(self)
sympy.Expr.__ge__(self,other)
sympy.Expr.__gt__(self,other)
sympy.Expr.__int__(self)
sympy.Expr.__le__(self,other)
sympy.Expr.__lt__(self,other)
sympy.Expr.__mod__(self,other)
sympy.Expr.__mul__(self,other)
sympy.Expr.__neg__(self)
sympy.Expr.__pos__(self)
sympy.Expr.__pow__(self,other)
sympy.Expr.__radd__(self,other)
sympy.Expr.__rdiv__(self,other)
sympy.Expr.__rmod__(self,other)
sympy.Expr.__rmul__(self,other)
sympy.Expr.__rpow__(self,other)
sympy.Expr.__rsub__(self,other)
sympy.Expr.__sub__(self,other)
sympy.Expr._diff_wrt(self)
sympy.Expr._eval_adjoint(self)
sympy.Expr._eval_as_leading_term(self,x)
sympy.Expr._eval_conjugate(self)
sympy.Expr._eval_expand_complex(self,**hints)
sympy.Expr._eval_interval(self,x,a,b)
sympy.Expr._eval_is_algebraic_expr(self,syms)
sympy.Expr._eval_is_negative(self)
sympy.Expr._eval_is_polynomial(self,syms)
sympy.Expr._eval_is_positive(self)
sympy.Expr._eval_is_rational_function(self,syms)
sympy.Expr._eval_lseries(self,x,logx=None)
sympy.Expr._eval_nseries(self,x,n,logx)
sympy.Expr._eval_power(self,other)
sympy.Expr._eval_transpose(self)
sympy.Expr._expand_hint(expr,hint,deep=True,**hints)
sympy.Expr._from_mpmath(x,prec)
sympy.Expr._parse_order(cls,order)
sympy.Expr._random(self,n=None,re_min=-1,im_min=-1,re_max=1,im_max=1)
sympy.Expr.adjoint(self)
sympy.Expr.apart(self,x=None,**args)
sympy.Expr.args_cnc(self,cset=False,warn=True,split_1=True)
sympy.Expr.as_base_exp(self)
sympy.Expr.as_coeff_Add(self)
sympy.Expr.as_coeff_Mul(self,rational=False)
sympy.Expr.as_coeff_add(self,*deps)
sympy.Expr.as_coeff_exponent(self,x)
sympy.Expr.as_coeff_mul(self,*deps)
sympy.Expr.as_coefficient(self,expr)
sympy.Expr.as_coefficients_dict(self)
sympy.Expr.as_content_primitive(self,radical=False)
sympy.Expr.as_expr(self,*gens)
sympy.Expr.as_independent(self,*deps,**hint)
sympy.Expr.as_leading_term(self,*symbols)
sympy.Expr.as_numer_denom(self)
sympy.Expr.as_ordered_factors(self,order=None)
sympy.Expr.as_ordered_terms(self,order=None,data=False)
sympy.Expr.as_powers_dict(self)
sympy.Expr.as_real_imag(self,deep=True,**hints)
sympy.Expr.as_terms(self)
sympy.Expr.cancel(self,*gens,**args)
sympy.Expr.coeff(self,x,n=1,right=False)
sympy.Expr.collect(self,syms,func=None,evaluate=True,exact=False,distribute_order_term=True)
sympy.Expr.combsimp(self)
sympy.Expr.compute_leading_term(self,x,logx=None)
sympy.Expr.conjugate(self)
sympy.Expr.could_extract_minus_sign(self)
sympy.Expr.count_ops(self,visual=None)
sympy.Expr.diff(self,*symbols,**assumptions)
sympy.Expr.equals(self,other,failing_expression=False)
sympy.Expr.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.Expr.extract_additively(self,c)
sympy.Expr.extract_branch_factor(self,allow_half=False)
sympy.Expr.extract_multiplicatively(self,c)
sympy.Expr.factor(self,*gens,**args)
sympy.Expr.getO(self)
sympy.Expr.getn(self)
sympy.Expr.integrate(self,*args,**kwargs)
sympy.Expr.invert(self,g)
sympy.Expr.is_algebraic_expr(self,*syms)
sympy.Expr.is_constant(self,*wrt,**flags)
sympy.Expr.is_number(self)
sympy.Expr.is_polynomial(self,*syms)
sympy.Expr.is_rational_function(self,*syms)
sympy.Expr.leadterm(self,x)
sympy.Expr.limit(self,x,xlim,dir='+')
sympy.Expr.lseries(self,x=None,x0=0,dir='+',logx=None)
sympy.Expr.normal(self)
sympy.Expr.nseries(self,x=None,x0=0,n=6,dir='+',logx=None)
sympy.Expr.nsimplify(self,constants=[],tolerance=None,full=False)
sympy.Expr.powsimp(self,deep=False,combine='all')
sympy.Expr.primitive(self)
sympy.Expr.radsimp(self)
sympy.Expr.ratsimp(self)
sympy.Expr.refine(self,assumption=True)
sympy.Expr.removeO(self)
sympy.Expr.round(self,p=0)
sympy.Expr.separate(self,deep=False,force=False)
sympy.Expr.series(self,x=None,x0=0,n=6,dir='+',logx=None)
sympy.Expr.simplify(self,ratio=1.7,measure=None)
sympy.Expr.sort_key(self,order=None)
sympy.Expr.taylor_term(self,n,x,*previous_terms)
sympy.Expr.together(self,*args,**kwargs)
sympy.Expr.transpose(self)
sympy.Expr.trigsimp(self,**args)
sympy.core.expr.AtomicExpr(Atom,Expr)
sympy.core.expr.AtomicExpr._eval_derivative(self,s)
sympy.core.expr.AtomicExpr._eval_is_algebraic_expr(self,syms)
sympy.core.expr.AtomicExpr._eval_is_polynomial(self,syms)
sympy.core.expr.AtomicExpr._eval_is_rational_function(self,syms)
sympy.core.expr.AtomicExpr._eval_nseries(self,x,n,logx)
sympy.core.expr.Expr(Basic,EvalfMixin)
sympy.core.expr.Expr.__abs__(self)
sympy.core.expr.Expr.__add__(self,other)
sympy.core.expr.Expr.__complex__(self)
sympy.core.expr.Expr.__div__(self,other)
sympy.core.expr.Expr.__float__(self)
sympy.core.expr.Expr.__ge__(self,other)
sympy.core.expr.Expr.__gt__(self,other)
sympy.core.expr.Expr.__int__(self)
sympy.core.expr.Expr.__le__(self,other)
sympy.core.expr.Expr.__lt__(self,other)
sympy.core.expr.Expr.__mod__(self,other)
sympy.core.expr.Expr.__mul__(self,other)
sympy.core.expr.Expr.__neg__(self)
sympy.core.expr.Expr.__pos__(self)
sympy.core.expr.Expr.__pow__(self,other)
sympy.core.expr.Expr.__radd__(self,other)
sympy.core.expr.Expr.__rdiv__(self,other)
sympy.core.expr.Expr.__rmod__(self,other)
sympy.core.expr.Expr.__rmul__(self,other)
sympy.core.expr.Expr.__rpow__(self,other)
sympy.core.expr.Expr.__rsub__(self,other)
sympy.core.expr.Expr.__sub__(self,other)
sympy.core.expr.Expr._diff_wrt(self)
sympy.core.expr.Expr._eval_adjoint(self)
sympy.core.expr.Expr._eval_as_leading_term(self,x)
sympy.core.expr.Expr._eval_conjugate(self)
sympy.core.expr.Expr._eval_expand_complex(self,**hints)
sympy.core.expr.Expr._eval_interval(self,x,a,b)
sympy.core.expr.Expr._eval_is_algebraic_expr(self,syms)
sympy.core.expr.Expr._eval_is_negative(self)
sympy.core.expr.Expr._eval_is_polynomial(self,syms)
sympy.core.expr.Expr._eval_is_positive(self)
sympy.core.expr.Expr._eval_is_rational_function(self,syms)
sympy.core.expr.Expr._eval_lseries(self,x,logx=None)
sympy.core.expr.Expr._eval_nseries(self,x,n,logx)
sympy.core.expr.Expr._eval_power(self,other)
sympy.core.expr.Expr._eval_transpose(self)
sympy.core.expr.Expr._expand_hint(expr,hint,deep=True,**hints)
sympy.core.expr.Expr._from_mpmath(x,prec)
sympy.core.expr.Expr._parse_order(cls,order)
sympy.core.expr.Expr._random(self,n=None,re_min=-1,im_min=-1,re_max=1,im_max=1)
sympy.core.expr.Expr.adjoint(self)
sympy.core.expr.Expr.apart(self,x=None,**args)
sympy.core.expr.Expr.args_cnc(self,cset=False,warn=True,split_1=True)
sympy.core.expr.Expr.as_base_exp(self)
sympy.core.expr.Expr.as_coeff_Add(self)
sympy.core.expr.Expr.as_coeff_Mul(self,rational=False)
sympy.core.expr.Expr.as_coeff_add(self,*deps)
sympy.core.expr.Expr.as_coeff_exponent(self,x)
sympy.core.expr.Expr.as_coeff_mul(self,*deps)
sympy.core.expr.Expr.as_coefficient(self,expr)
sympy.core.expr.Expr.as_coefficients_dict(self)
sympy.core.expr.Expr.as_content_primitive(self,radical=False)
sympy.core.expr.Expr.as_expr(self,*gens)
sympy.core.expr.Expr.as_independent(self,*deps,**hint)
sympy.core.expr.Expr.as_leading_term(self,*symbols)
sympy.core.expr.Expr.as_numer_denom(self)
sympy.core.expr.Expr.as_ordered_factors(self,order=None)
sympy.core.expr.Expr.as_ordered_terms(self,order=None,data=False)
sympy.core.expr.Expr.as_powers_dict(self)
sympy.core.expr.Expr.as_real_imag(self,deep=True,**hints)
sympy.core.expr.Expr.as_terms(self)
sympy.core.expr.Expr.cancel(self,*gens,**args)
sympy.core.expr.Expr.coeff(self,x,n=1,right=False)
sympy.core.expr.Expr.collect(self,syms,func=None,evaluate=True,exact=False,distribute_order_term=True)
sympy.core.expr.Expr.combsimp(self)
sympy.core.expr.Expr.compute_leading_term(self,x,logx=None)
sympy.core.expr.Expr.conjugate(self)
sympy.core.expr.Expr.could_extract_minus_sign(self)
sympy.core.expr.Expr.count_ops(self,visual=None)
sympy.core.expr.Expr.diff(self,*symbols,**assumptions)
sympy.core.expr.Expr.equals(self,other,failing_expression=False)
sympy.core.expr.Expr.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.core.expr.Expr.extract_additively(self,c)
sympy.core.expr.Expr.extract_branch_factor(self,allow_half=False)
sympy.core.expr.Expr.extract_multiplicatively(self,c)
sympy.core.expr.Expr.factor(self,*gens,**args)
sympy.core.expr.Expr.getO(self)
sympy.core.expr.Expr.getn(self)
sympy.core.expr.Expr.integrate(self,*args,**kwargs)
sympy.core.expr.Expr.invert(self,g)
sympy.core.expr.Expr.is_algebraic_expr(self,*syms)
sympy.core.expr.Expr.is_constant(self,*wrt,**flags)
sympy.core.expr.Expr.is_number(self)
sympy.core.expr.Expr.is_polynomial(self,*syms)
sympy.core.expr.Expr.is_rational_function(self,*syms)
sympy.core.expr.Expr.leadterm(self,x)
sympy.core.expr.Expr.limit(self,x,xlim,dir='+')
sympy.core.expr.Expr.lseries(self,x=None,x0=0,dir='+',logx=None)
sympy.core.expr.Expr.normal(self)
sympy.core.expr.Expr.nseries(self,x=None,x0=0,n=6,dir='+',logx=None)
sympy.core.expr.Expr.nsimplify(self,constants=[],tolerance=None,full=False)
sympy.core.expr.Expr.powsimp(self,deep=False,combine='all')
sympy.core.expr.Expr.primitive(self)
sympy.core.expr.Expr.radsimp(self)
sympy.core.expr.Expr.ratsimp(self)
sympy.core.expr.Expr.refine(self,assumption=True)
sympy.core.expr.Expr.removeO(self)
sympy.core.expr.Expr.round(self,p=0)
sympy.core.expr.Expr.separate(self,deep=False,force=False)
sympy.core.expr.Expr.series(self,x=None,x0=0,n=6,dir='+',logx=None)
sympy.core.expr.Expr.simplify(self,ratio=1.7,measure=None)
sympy.core.expr.Expr.sort_key(self,order=None)
sympy.core.expr.Expr.taylor_term(self,n,x,*previous_terms)
sympy.core.expr.Expr.together(self,*args,**kwargs)
sympy.core.expr.Expr.transpose(self)
sympy.core.expr.Expr.trigsimp(self,**args)
sympy.core.expr._mag(x)
sympy.expr._mag(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/exprtools.py----------------------------------------
A:sympy.core.exprtools.(base, exp)->decompose_power(factor)
A:sympy.core.exprtools.base->Pow(base, Rational(1, exp.q))
A:sympy.core.exprtools.(exp, tail)->max(exp, factors[factor]).as_coeff_Mul(rational=True)
A:sympy.core.exprtools.tail->_keep_coeff(Rational(1, exp.q), tail)
A:sympy.core.exprtools.factors->dict(self.factors)
A:sympy.core.exprtools.(c, nc)->dict(self.factors).args_cnc()
A:sympy.core.exprtools.i->gcd(c, Mul._from_args(a[0])).count(I)
A:sympy.core.exprtools.self.gens->frozenset(factors.keys())
A:sympy.core.exprtools.keys->tuple(ordered(self.factors.keys()))
A:sympy.core.exprtools.(b, e)->f.as_base_exp()
A:sympy.core.exprtools.e->min(e, et)
A:sympy.core.exprtools.other->Factors(other)
A:sympy.core.exprtools.self_factors->dict(self.factors)
A:sympy.core.exprtools.other_factors->dict(other.factors)
A:sympy.core.exprtools.r->Mul(*n)
A:sympy.core.exprtools.(sc, sa)->quo[factor].as_coeff_Add()
A:sympy.core.exprtools.(oc, oa)->other_exp.as_coeff_Add()
A:sympy.core.exprtools.exp->max(exp, factors[factor])
A:sympy.core.exprtools.(coeff, factors)->cont.as_expr().as_coeff_Mul()
A:sympy.core.exprtools.(cont, base)->Pow(base, Rational(1, exp.q)).primitive()
A:sympy.core.exprtools.numer->numer.xreplace(reps).xreplace(reps)
A:sympy.core.exprtools.denom->denom.as_expr().as_expr()
A:sympy.core.exprtools.(numer, denom)->numer.xreplace(reps).xreplace(reps).normal(denom)
A:sympy.core.exprtools.terms->sympify(terms)
A:sympy.core.exprtools.cont->cont.as_expr().as_expr()
A:sympy.core.exprtools.terms[i]->term.quo(cont)
A:sympy.core.exprtools.(_cont, numer)->numer.xreplace(reps).xreplace(reps).primitive()
A:sympy.core.exprtools.nc->Dummy(commutative=False)
A:sympy.core.exprtools.d->Dummy()
A:sympy.core.exprtools.args[i]->sympy.core.mul.Mul._from_args(c)
A:sympy.core.exprtools.isadd->isinstance(terms, Add)
A:sympy.core.exprtools.(terms, reps)->mask(terms)
A:sympy.core.exprtools.(cont, numer, denom)->_gcd_terms(terms, isprimitive, fraction)
A:sympy.core.exprtools.(c, args)->sympify(terms).as_coeff_mul()
A:sympy.core.exprtools.is_iterable->iterable(expr)
A:sympy.core.exprtools.newargs->tuple([do(i) for i in args])
A:sympy.core.exprtools.(cont, p)->sympify(expr).as_content_primitive(radical=radical)
A:sympy.core.exprtools.list_args[i]->Dummy()
A:sympy.core.exprtools.p->p.func(*[do(a) for a in p.args]).func(*[do(a) for a in p.args])
A:sympy.core.exprtools.rv->_keep_coeff(cont, p, clear=clear, sign=sign)
A:sympy.core.exprtools.expr->sympify(expr)
A:sympy.core.exprtools.names->numbered_names()
A:sympy.core.exprtools.nc_obj->sorted(nc_obj, key=default_sort_key)
A:sympy.core.exprtools.nc_syms->list(nc_syms)
A:sympy.core.exprtools.pot->preorder_traversal(expr, keys=default_sort_key)
A:sympy.core.exprtools.(expr, rep, nc_symbols)->_mask_nc(expr)
A:sympy.core.exprtools.c->gcd(c, Mul._from_args(a[0]))
A:sympy.core.exprtools.(c, g)->gcd(c, Mul._from_args(a[0])).as_coeff_Mul()
A:sympy.core.exprtools.cc->list(Mul.make_args(Mul._from_args(list(cc)) / g))
A:sympy.core.exprtools.n->common_suffix(n, a[1])
A:sympy.core.exprtools.(bt, et)->t[1][-1].as_base_exp()
A:sympy.core.exprtools.lenn->len(n)
A:sympy.core.exprtools.l->Mul(*n)
A:sympy.core.exprtools.mid->Add(*[Mul(*cc) * Mul(*nc) for (cc, nc) in args])
A:sympy.core.exprtools.(new_mid, r2, _)->_mask_nc(mid.subs(rep1))
A:sympy.core.exprtools.new_mid->new_mid.subs(r2).subs(unrep1).subs(r2).subs(unrep1)
A:sympy.core.exprtools.target->_pemexpand(expr / c)
sympy.core.exprtools.Factors(self,factors=None)
sympy.core.exprtools.Factors.__div__(self,other)
sympy.core.exprtools.Factors.__divmod__(self,other)
sympy.core.exprtools.Factors.__eq__(self,other)
sympy.core.exprtools.Factors.__hash__(self)
sympy.core.exprtools.Factors.__init__(self,factors=None)
sympy.core.exprtools.Factors.__mod__(self,other)
sympy.core.exprtools.Factors.__mul__(self,other)
sympy.core.exprtools.Factors.__ne__(self,other)
sympy.core.exprtools.Factors.__pow__(self,other)
sympy.core.exprtools.Factors.__repr__(self)
sympy.core.exprtools.Factors.as_expr(self)
sympy.core.exprtools.Factors.div(self,other)
sympy.core.exprtools.Factors.gcd(self,other)
sympy.core.exprtools.Factors.is_one(self)
sympy.core.exprtools.Factors.is_zero(self)
sympy.core.exprtools.Factors.lcm(self,other)
sympy.core.exprtools.Factors.mul(self,other)
sympy.core.exprtools.Factors.normal(self,other)
sympy.core.exprtools.Factors.pow(self,other)
sympy.core.exprtools.Factors.quo(self,other)
sympy.core.exprtools.Factors.rem(self,other)
sympy.core.exprtools.Term(self,term,numer=None,denom=None)
sympy.core.exprtools.Term.__div__(self,other)
sympy.core.exprtools.Term.__eq__(self,other)
sympy.core.exprtools.Term.__hash__(self)
sympy.core.exprtools.Term.__init__(self,term,numer=None,denom=None)
sympy.core.exprtools.Term.__mul__(self,other)
sympy.core.exprtools.Term.__ne__(self,other)
sympy.core.exprtools.Term.__pow__(self,other)
sympy.core.exprtools.Term.__repr__(self)
sympy.core.exprtools.Term.as_expr(self)
sympy.core.exprtools.Term.gcd(self,other)
sympy.core.exprtools.Term.inv(self)
sympy.core.exprtools.Term.lcm(self,other)
sympy.core.exprtools.Term.mul(self,other)
sympy.core.exprtools.Term.pow(self,other)
sympy.core.exprtools.Term.quo(self,other)
sympy.core.exprtools._gcd_terms(terms,isprimitive=False,fraction=True)
sympy.core.exprtools._isnumber(i)
sympy.core.exprtools._mask_nc(eq,name=None)
sympy.core.exprtools.decompose_power(expr)
sympy.core.exprtools.factor_nc(expr)
sympy.core.exprtools.factor_terms(expr,radical=False,clear=False,fraction=False,sign=True)
sympy.core.exprtools.gcd_terms(terms,isprimitive=False,clear=True,fraction=True)
sympy.exprtools.Factors(self,factors=None)
sympy.exprtools.Factors.__div__(self,other)
sympy.exprtools.Factors.__divmod__(self,other)
sympy.exprtools.Factors.__eq__(self,other)
sympy.exprtools.Factors.__hash__(self)
sympy.exprtools.Factors.__mod__(self,other)
sympy.exprtools.Factors.__mul__(self,other)
sympy.exprtools.Factors.__ne__(self,other)
sympy.exprtools.Factors.__pow__(self,other)
sympy.exprtools.Factors.__repr__(self)
sympy.exprtools.Factors.as_expr(self)
sympy.exprtools.Factors.div(self,other)
sympy.exprtools.Factors.gcd(self,other)
sympy.exprtools.Factors.is_one(self)
sympy.exprtools.Factors.is_zero(self)
sympy.exprtools.Factors.lcm(self,other)
sympy.exprtools.Factors.mul(self,other)
sympy.exprtools.Factors.normal(self,other)
sympy.exprtools.Factors.pow(self,other)
sympy.exprtools.Factors.quo(self,other)
sympy.exprtools.Factors.rem(self,other)
sympy.exprtools.Term(self,term,numer=None,denom=None)
sympy.exprtools.Term.__div__(self,other)
sympy.exprtools.Term.__eq__(self,other)
sympy.exprtools.Term.__hash__(self)
sympy.exprtools.Term.__mul__(self,other)
sympy.exprtools.Term.__ne__(self,other)
sympy.exprtools.Term.__pow__(self,other)
sympy.exprtools.Term.__repr__(self)
sympy.exprtools.Term.as_expr(self)
sympy.exprtools.Term.gcd(self,other)
sympy.exprtools.Term.inv(self)
sympy.exprtools.Term.lcm(self,other)
sympy.exprtools.Term.mul(self,other)
sympy.exprtools.Term.pow(self,other)
sympy.exprtools.Term.quo(self,other)
sympy.exprtools._gcd_terms(terms,isprimitive=False,fraction=True)
sympy.exprtools._isnumber(i)
sympy.exprtools._mask_nc(eq,name=None)
sympy.exprtools.decompose_power(expr)
sympy.factor_nc(expr)
sympy.factor_terms(expr,radical=False,clear=False,fraction=False,sign=True)
sympy.gcd_terms(terms,isprimitive=False,clear=True,fraction=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/cache.py----------------------------------------
A:sympy.core.cache.info->myfunc.cache_info()
A:sympy.core.cache.CACHE->_cache()
A:sympy.core.cache.cfunc->__cacheit(maxsize)(func)
A:sympy.core.cache.retval->func(*args, **kwargs)
A:sympy.core.cache.uw->update_wrapper(wrapper, func)
A:sympy.core.cache.r1->func(*args, **kw_args)
A:sympy.core.cache.r2->cfunc(*args, **kw_args)
A:sympy.core.cache.USE_CACHE->_getenv('SYMPY_USE_CACHE', 'yes').lower()
A:sympy.core.cache.scs->_getenv('SYMPY_CACHE_SIZE', '1000')
A:sympy.core.cache.SYMPY_CACHE_SIZE->int(scs)
A:sympy.core.cache.cacheit->__cacheit_debug(SYMPY_CACHE_SIZE)
sympy.cache.__cacheit_debug(maxsize)
sympy.cache.__cacheit_nocache(func)
sympy.cache._cache(list)
sympy.cache._cache.clear_cache(self)
sympy.cache._cache.print_cache(self)
sympy.cache._getenv(key,default=None)
sympy.core.cache.__cacheit_debug(maxsize)
sympy.core.cache.__cacheit_nocache(func)
sympy.core.cache._cache(list)
sympy.core.cache._cache.clear_cache(self)
sympy.core.cache._cache.print_cache(self)
sympy.core.cache._getenv(key,default=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/function.py----------------------------------------
A:sympy.core.function.evalargspec->inspect.getargspec(cls.eval)
A:sympy.core.function.evalargs->tuple(range(evalargs - len(evalargspec.defaults), evalargs + 1))
A:sympy.core.function.nargs->FiniteSet(*nargs)
A:sympy.core.function.args->list(map(sympify, args))
A:sympy.core.function.evaluate->assumptions.pop('evaluate', False)
A:sympy.core.function.evaluated->cls.eval(*args)
A:sympy.core.function.obj->sympy.core.expr.Expr.__new__(cls, expr, Tuple(*variables), point)
A:sympy.core.function.obj.nargs->FiniteSet(len(variables))
A:sympy.core.function.n->len(args)
A:sympy.core.function.result->super(Function, cls).__new__(cls, *args, **options)
A:sympy.core.function.pr->max((cls._should_evalf(a) for a in result.args))
A:sympy.core.function.pr2->min((cls._should_evalf(a) for a in result.args))
A:sympy.core.function.(re, im)->self.args[0].nseries(x, n=n, logx=logx).as_real_imag()
A:sympy.core.function.func->getattr(mpmath, fname)
A:sympy.core.function.v->func(*args)
A:sympy.core.function.da->args.pop().diff(s)
A:sympy.core.function.df->Function.fdiff(self, i)
A:sympy.core.function.e1->e.diff(_x).expand()
A:sympy.core.function.s->s.removeO().removeO()
A:sympy.core.function.o->core.C.Symbol(a.func.__name__.upper())
A:sympy.core.function.term->term.expand().expand()
A:sympy.core.function._x->Dummy('x')
A:sympy.core.function.e->e.diff(_x).diff(_x)
A:sympy.core.function.subs->e.diff(_x).diff(_x).limit(_x, S.Zero)
A:sympy.core.function.cf->core.C.Order(arg.as_leading_term(x), x).getn()
A:sympy.core.function.nterms->int(nterms / cf)
A:sympy.core.function.g->g.nseries(x, n=n, logx=logx).nseries(x, n=n, logx=logx)
A:sympy.core.function.arg_dummy->core.C.Dummy('xi_%i' % argindex)
A:sympy.core.function.arg_dummy.dummy_index->hash(self.args[argindex - 1])
A:sympy.core.function.ret->core.BasicMeta.__new__(mcl, name, (AppliedUndef,), kwargs)
A:sympy.core.function.include->set()
A:sympy.core.function.repl_dict->repl_dict.copy().copy()
A:sympy.core.function.expr->sympify(expr)
A:sympy.core.function.variables->list(sympify(variables))
A:sympy.core.function.count->int(count)
A:sympy.core.function.symbol_set->set((sc[0] for sc in variable_count if sc[0].is_Symbol))
A:sympy.core.function.new_v->core.C.Dummy('xi_%i' % i)
A:sympy.core.function.new_v.dummy_index->hash(v)
A:sympy.core.function.unhandled_variables->cls._sort_variables(unhandled_variables)
A:sympy.core.function.f0->f0.evalf(mlib.libmpf.prec_to_dps(mpmath.mp.prec)).evalf(mlib.libmpf.prec_to_dps(mpmath.mp.prec))
A:sympy.core.function.old_vars->Derivative._sort_variables(old.variables)
A:sympy.core.function.self_vars->Derivative._sort_variables(self.args[1:])
A:sympy.core.function.arg->self.args[0].nseries(x, n=n, logx=logx)
A:sympy.core.function.otherexpr->otherexpr.xreplace(dict(list(zip(other.args[0], self.args[0])))).xreplace(dict(list(zip(other.args[0], self.args[0]))))
A:sympy.core.function.point->Tuple(*(point if is_sequence(point, Tuple) else [point]))
A:sympy.core.function.pts->list(self.point.args)
A:sympy.core.function.p->CustomStrPrinter(settings)
A:sympy.core.function.s_pts->dict([(p, Symbol(pre + mystr(p))) for p in pts])
A:sympy.core.function.obj._expr->sympify(expr).subs(reps)
A:sympy.core.function.NEG->core.C.Symbol('NEG')
A:sympy.core.function.DIV->core.C.Symbol('DIV')
A:sympy.core.function.SUB->core.C.Symbol('SUB')
A:sympy.core.function.ADD->core.C.Symbol('ADD')
A:sympy.core.function.a->list(map(sympify, args)).pop()
A:sympy.core.function.(n, d)->fraction(a)
A:sympy.core.function.aargs->list(a.args)
A:sympy.core.function.ops->Add(*ops)
A:sympy.core.function.rv->rv.xreplace(Transform(lambda x: Pow(x.base, Float(x.exp, n)), lambda x: x.is_Pow and x.exp.is_Integer)).xreplace(Transform(lambda x: Pow(x.base, Float(x.exp, n)), lambda x: x.is_Pow and x.exp.is_Integer))
sympy.Derivative(cls,expr,*variables,**assumptions)
sympy.Derivative._diff_wrt(self)
sympy.Derivative._eval_as_leading_term(self,x)
sympy.Derivative._eval_derivative(self,v)
sympy.Derivative._eval_is_commutative(self)
sympy.Derivative._eval_lseries(self,x,logx)
sympy.Derivative._eval_nseries(self,x,n,logx)
sympy.Derivative._eval_subs(self,old,new)
sympy.Derivative._sort_variables(cls,vars)
sympy.Derivative.doit(self,**hints)
sympy.Derivative.doit_numerically(self,z0)
sympy.Derivative.expr(self)
sympy.Derivative.free_symbols(self)
sympy.Derivative.variables(self)
sympy.Function(cls,*args,**options)
sympy.Function._diff_wrt(self)
sympy.Function._eval_as_leading_term(self,x)
sympy.Function._eval_aseries(self,n,args0,x,logx)
sympy.Function._eval_derivative(self,s)
sympy.Function._eval_evalf(self,prec)
sympy.Function._eval_is_commutative(self)
sympy.Function._eval_is_complex(self)
sympy.Function._eval_nseries(self,x,n,logx)
sympy.Function._should_evalf(cls,arg)
sympy.Function.as_base_exp(self)
sympy.Function.class_key(cls)
sympy.Function.fdiff(self,argindex=1)
sympy.Function.is_commutative(self)
sympy.FunctionClass(cls,*args,**kwargs)
sympy.FunctionClass.__repr__(cls)
sympy.FunctionClass.nargs(self)
sympy.Lambda(cls,variables,expr)
sympy.Lambda.__eq__(self,other)
sympy.Lambda.__hash__(self)
sympy.Lambda.__ne__(self,other)
sympy.Lambda._hashable_content(self)
sympy.Lambda.expr(self)
sympy.Lambda.free_symbols(self)
sympy.Lambda.is_identity(self)
sympy.Lambda.variables(self)
sympy.PoleError(Exception)
sympy.Subs(cls,expr,variables,point,**assumptions)
sympy.Subs.__eq__(self,other)
sympy.Subs.__hash__(self)
sympy.Subs.__ne__(self,other)
sympy.Subs._eval_derivative(self,s)
sympy.Subs._eval_is_commutative(self)
sympy.Subs._eval_subs(self,old,new)
sympy.Subs._hashable_content(self)
sympy.Subs.doit(self)
sympy.Subs.evalf(self,prec=None,**options)
sympy.Subs.expr(self)
sympy.Subs.free_symbols(self)
sympy.Subs.point(self)
sympy.Subs.variables(self)
sympy.WildFunction(cls,name,**assumptions)
sympy.WildFunction.matches(self,expr,repl_dict={},old=False)
sympy.core.function.Application(cls,*args,**options)
sympy.core.function.Application.__new__(cls,*args,**options)
sympy.core.function.Application._eval_subs(self,old,new)
sympy.core.function.Application.eval(cls,*args)
sympy.core.function.Application.func(self)
sympy.core.function.AppliedUndef(cls,*args,**options)
sympy.core.function.AppliedUndef.__new__(cls,*args,**options)
sympy.core.function.AppliedUndef._eval_as_leading_term(self,x)
sympy.core.function.ArgumentIndexError(ValueError)
sympy.core.function.ArgumentIndexError.__str__(self)
sympy.core.function.Derivative(cls,expr,*variables,**assumptions)
sympy.core.function.Derivative.__new__(cls,expr,*variables,**assumptions)
sympy.core.function.Derivative._diff_wrt(self)
sympy.core.function.Derivative._eval_as_leading_term(self,x)
sympy.core.function.Derivative._eval_derivative(self,v)
sympy.core.function.Derivative._eval_is_commutative(self)
sympy.core.function.Derivative._eval_lseries(self,x,logx)
sympy.core.function.Derivative._eval_nseries(self,x,n,logx)
sympy.core.function.Derivative._eval_subs(self,old,new)
sympy.core.function.Derivative._sort_variables(cls,vars)
sympy.core.function.Derivative.doit(self,**hints)
sympy.core.function.Derivative.doit_numerically(self,z0)
sympy.core.function.Derivative.expr(self)
sympy.core.function.Derivative.free_symbols(self)
sympy.core.function.Derivative.variables(self)
sympy.core.function.Function(cls,*args,**options)
sympy.core.function.Function.__new__(cls,*args,**options)
sympy.core.function.Function._diff_wrt(self)
sympy.core.function.Function._eval_as_leading_term(self,x)
sympy.core.function.Function._eval_aseries(self,n,args0,x,logx)
sympy.core.function.Function._eval_derivative(self,s)
sympy.core.function.Function._eval_evalf(self,prec)
sympy.core.function.Function._eval_is_commutative(self)
sympy.core.function.Function._eval_is_complex(self)
sympy.core.function.Function._eval_nseries(self,x,n,logx)
sympy.core.function.Function._should_evalf(cls,arg)
sympy.core.function.Function.as_base_exp(self)
sympy.core.function.Function.class_key(cls)
sympy.core.function.Function.fdiff(self,argindex=1)
sympy.core.function.Function.is_commutative(self)
sympy.core.function.FunctionClass(cls,*args,**kwargs)
sympy.core.function.FunctionClass.__init__(cls,*args,**kwargs)
sympy.core.function.FunctionClass.__repr__(cls)
sympy.core.function.FunctionClass.nargs(self)
sympy.core.function.Lambda(cls,variables,expr)
sympy.core.function.Lambda.__eq__(self,other)
sympy.core.function.Lambda.__hash__(self)
sympy.core.function.Lambda.__ne__(self,other)
sympy.core.function.Lambda.__new__(cls,variables,expr)
sympy.core.function.Lambda._hashable_content(self)
sympy.core.function.Lambda.expr(self)
sympy.core.function.Lambda.free_symbols(self)
sympy.core.function.Lambda.is_identity(self)
sympy.core.function.Lambda.variables(self)
sympy.core.function.PoleError(Exception)
sympy.core.function.Subs(cls,expr,variables,point,**assumptions)
sympy.core.function.Subs.__eq__(self,other)
sympy.core.function.Subs.__hash__(self)
sympy.core.function.Subs.__ne__(self,other)
sympy.core.function.Subs.__new__(cls,expr,variables,point,**assumptions)
sympy.core.function.Subs._eval_derivative(self,s)
sympy.core.function.Subs._eval_is_commutative(self)
sympy.core.function.Subs._eval_subs(self,old,new)
sympy.core.function.Subs._hashable_content(self)
sympy.core.function.Subs.doit(self)
sympy.core.function.Subs.evalf(self,prec=None,**options)
sympy.core.function.Subs.expr(self)
sympy.core.function.Subs.free_symbols(self)
sympy.core.function.Subs.point(self)
sympy.core.function.Subs.variables(self)
sympy.core.function.UndefinedFunction(mcl,name,**kwargs)
sympy.core.function.UndefinedFunction.__instancecheck__(cls,instance)
sympy.core.function.UndefinedFunction.__new__(mcl,name,**kwargs)
sympy.core.function.WildFunction(cls,name,**assumptions)
sympy.core.function.WildFunction.__init__(cls,name,**assumptions)
sympy.core.function.WildFunction.matches(self,expr,repl_dict={},old=False)
sympy.core.function._coeff_isneg(a)
sympy.core.function.count_ops(expr,visual=False)
sympy.core.function.diff(f,*symbols,**kwargs)
sympy.core.function.expand(e,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.core.function.expand_complex(expr,deep=True)
sympy.core.function.expand_func(expr,deep=True)
sympy.core.function.expand_log(expr,deep=True,force=False)
sympy.core.function.expand_mul(expr,deep=True)
sympy.core.function.expand_multinomial(expr,deep=True)
sympy.core.function.expand_power_base(expr,deep=True,force=False)
sympy.core.function.expand_power_exp(expr,deep=True)
sympy.core.function.expand_trig(expr,deep=True)
sympy.core.function.nfloat(expr,n=15,exponent=False)
sympy.count_ops(expr,visual=False)
sympy.diff(f,*symbols,**kwargs)
sympy.expand(e,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.expand_complex(expr,deep=True)
sympy.expand_func(expr,deep=True)
sympy.expand_log(expr,deep=True,force=False)
sympy.expand_mul(expr,deep=True)
sympy.expand_multinomial(expr,deep=True)
sympy.expand_power_base(expr,deep=True,force=False)
sympy.expand_power_exp(expr,deep=True)
sympy.expand_trig(expr,deep=True)
sympy.function.Application(cls,*args,**options)
sympy.function.Application._eval_subs(self,old,new)
sympy.function.Application.eval(cls,*args)
sympy.function.Application.func(self)
sympy.function.AppliedUndef(cls,*args,**options)
sympy.function.AppliedUndef._eval_as_leading_term(self,x)
sympy.function.ArgumentIndexError(ValueError)
sympy.function.ArgumentIndexError.__str__(self)
sympy.function.UndefinedFunction(mcl,name,**kwargs)
sympy.function.UndefinedFunction.__instancecheck__(cls,instance)
sympy.function._coeff_isneg(a)
sympy.nfloat(expr,n=15,exponent=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_arit.py----------------------------------------
A:sympy.core.tests.test_arit.(a, c, x, y, z)->symbols('a,c,x,y,z')
A:sympy.core.tests.test_arit.b->Dummy('b', finite=ib, real=True)
A:sympy.core.tests.test_arit.x->Symbol('x')
A:sympy.core.tests.test_arit.p->exp(I * pi / 3)
A:sympy.core.tests.test_arit.n1->Rational(1)
A:sympy.core.tests.test_arit.n2->Rational(2)
A:sympy.core.tests.test_arit.n5->Rational(5)
A:sympy.core.tests.test_arit.y->Symbol('y', nonnegative=True)
A:sympy.core.tests.test_arit.n->symbols('n', negative=True)
A:sympy.core.tests.test_arit.k->Symbol('k', integer=True, nonnegative=True)
A:sympy.core.tests.test_arit.o->Symbol('o', odd=True)
A:sympy.core.tests.test_arit.(r, i)->Dummy('b', finite=ib, real=True).as_real_imag()
A:sympy.core.tests.test_arit.e->Mul(b, z, evaluate=False)
A:sympy.core.tests.test_arit.im->symbols('im', imaginary=True)
A:sympy.core.tests.test_arit.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_arit.B->Symbol('B', commutative=False)
A:sympy.core.tests.test_arit.C->Symbol('C', commutative=False)
A:sympy.core.tests.test_arit.z->Dummy('z', nonzero=iz, real=True)
A:sympy.core.tests.test_arit.a->Add(0, 3, 2, evaluate=False)
A:sympy.core.tests.test_arit.c->Dummy(real=False, complex=True, finite=True)
A:sympy.core.tests.test_arit.m->Symbol('m', odd=True)
A:sympy.core.tests.test_arit.r->Dummy(real=True)
A:sympy.core.tests.test_arit.i->Dummy(imaginary=True, finite=True)
A:sympy.core.tests.test_arit.bi->Symbol('i', imaginary=True, finite=True)
A:sympy.core.tests.test_arit.neg->Symbol('neg', negative=True)
A:sympy.core.tests.test_arit.pos->Symbol('pos', positive=True)
A:sympy.core.tests.test_arit.nneg->Symbol('nneg', nonnegative=True)
A:sympy.core.tests.test_arit.npos->Symbol('npos', nonpositive=True)
A:sympy.core.tests.test_arit.d->Symbol('d', antihermitian=True)
A:sympy.core.tests.test_arit.u->Mul(2, 1 + x, evaluate=False)
A:sympy.core.tests.test_arit.v->Symbol('v', nonpositive=True)
A:sympy.core.tests.test_arit.l->Symbol('l', integer=True, positive=True)
A:sympy.core.tests.test_arit.ii->Symbol('ii', imaginary=True)
A:sympy.core.tests.test_arit.j->Symbol('j', integer=True, zero=False)
A:sympy.core.tests.test_arit.nr->Symbol('nr', real=False, complex=True)
A:sympy.core.tests.test_arit.e1->Mul(a, b, c, evaluate=False)
A:sympy.core.tests.test_arit.e2->Mul(b, a, c, evaluate=False)
A:sympy.core.tests.test_arit.e3->Mul(a, b, c, d, evaluate=False)
A:sympy.core.tests.test_arit.e4->Mul(b, a, c, d, evaluate=False)
A:sympy.core.tests.test_arit.e5->Mul(a, c, evaluate=False)
A:sympy.core.tests.test_arit.e6->Mul(a, c, d, evaluate=False)
A:sympy.core.tests.test_arit.f->Foo()
A:sympy.core.tests.test_arit.point3->sympy.Float._new(Float(0.3)._mpf_, 51)
A:sympy.core.tests.test_arit.point6->sympy.Float._new(Float(0.6)._mpf_, 51)
A:sympy.core.tests.test_arit.r2->sqrt(2)
A:sympy.core.tests.test_arit.r3->sqrt(3)
A:sympy.core.tests.test_arit.q->Symbol('q', polar=True)
A:sympy.core.tests.test_arit.(n, m)->symbols('n,m', negative=True)
A:sympy.core.tests.test_arit.x_im->symbols('x_im', imaginary=True)
A:sympy.core.tests.test_arit.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.core.tests.test_arit.eq->Mul(-2, x - 2, evaluate=False)
A:sympy.core.tests.test_arit.nz->Dummy(real=True, zero=False, finite=True)
A:sympy.core.tests.test_arit.c2->Dummy(real=False, complex=True, finite=True)
sympy.core.tests.test_arit.test_Add_Mul_is_finite()
sympy.core.tests.test_arit.test_Add_Mul_is_integer()
sympy.core.tests.test_arit.test_Add_as_coeff_mul()
sympy.core.tests.test_arit.test_Add_as_content_primitive()
sympy.core.tests.test_arit.test_Add_is_comparable()
sympy.core.tests.test_arit.test_Add_is_even_odd()
sympy.core.tests.test_arit.test_Add_is_irrational()
sympy.core.tests.test_arit.test_Add_is_negative_positive()
sympy.core.tests.test_arit.test_Add_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Add_is_positive_2()
sympy.core.tests.test_arit.test_Add_is_rational()
sympy.core.tests.test_arit.test_Mod()
sympy.core.tests.test_arit.test_Mul_as_content_primitive()
sympy.core.tests.test_arit.test_Mul_doesnt_expand_exp()
sympy.core.tests.test_arit.test_Mul_hermitian_antihermitian()
sympy.core.tests.test_arit.test_Mul_is_comparable()
sympy.core.tests.test_arit.test_Mul_is_even_odd()
sympy.core.tests.test_arit.test_Mul_is_imaginary_real()
sympy.core.tests.test_arit.test_Mul_is_negative_positive()
sympy.core.tests.test_arit.test_Mul_is_negative_positive_2()
sympy.core.tests.test_arit.test_Mul_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Mul_is_rational()
sympy.core.tests.test_arit.test_Pow_as_coeff_mul_doesnt_expand()
sympy.core.tests.test_arit.test_Pow_as_content_primitive()
sympy.core.tests.test_arit.test_Pow_is_comparable()
sympy.core.tests.test_arit.test_Pow_is_even_odd()
sympy.core.tests.test_arit.test_Pow_is_finite()
sympy.core.tests.test_arit.test_Pow_is_integer()
sympy.core.tests.test_arit.test_Pow_is_negative_positive()
sympy.core.tests.test_arit.test_Pow_is_nonpositive_nonnegative()
sympy.core.tests.test_arit.test_Pow_is_real()
sympy.core.tests.test_arit.test_Pow_is_zero()
sympy.core.tests.test_arit.test_Rational_as_content_primitive()
sympy.core.tests.test_arit.test_Symbol()
sympy.core.tests.test_arit.test_add_flatten()
sympy.core.tests.test_arit.test_arit0()
sympy.core.tests.test_arit.test_bug1()
sympy.core.tests.test_arit.test_bug3()
sympy.core.tests.test_arit.test_denest_add_mul()
sympy.core.tests.test_arit.test_div()
sympy.core.tests.test_arit.test_float_int()
sympy.core.tests.test_arit.test_issue_3514()
sympy.core.tests.test_arit.test_issue_3531()
sympy.core.tests.test_arit.test_issue_3531b()
sympy.core.tests.test_arit.test_issue_5126()
sympy.core.tests.test_arit.test_issue_5160_6087_6089_6090()
sympy.core.tests.test_arit.test_issue_5460()
sympy.core.tests.test_arit.test_issue_5919()
sympy.core.tests.test_arit.test_issue_6001()
sympy.core.tests.test_arit.test_issue_6040()
sympy.core.tests.test_arit.test_issue_6077()
sympy.core.tests.test_arit.test_issue_6082()
sympy.core.tests.test_arit.test_issue_6611a()
sympy.core.tests.test_arit.test_make_args()
sympy.core.tests.test_arit.test_mul_coeff()
sympy.core.tests.test_arit.test_mul_flatten_oo()
sympy.core.tests.test_arit.test_mul_zero_detection()
sympy.core.tests.test_arit.test_ncmul()
sympy.core.tests.test_arit.test_ncpow()
sympy.core.tests.test_arit.test_polar()
sympy.core.tests.test_arit.test_pow()
sympy.core.tests.test_arit.test_pow2()
sympy.core.tests.test_arit.test_pow3()
sympy.core.tests.test_arit.test_pow_E()
sympy.core.tests.test_arit.test_pow_im()
sympy.core.tests.test_arit.test_pow_issue_3516()
sympy.core.tests.test_arit.test_powerbug()
sympy.core.tests.test_arit.test_product_irrational()
sympy.core.tests.test_arit.test_real_Pow()
sympy.core.tests.test_arit.test_real_mul()
sympy.core.tests.test_arit.test_suppressed_evaluation()
sympy.tests.test_arit.test_Add_Mul_is_finite()
sympy.tests.test_arit.test_Add_Mul_is_integer()
sympy.tests.test_arit.test_Add_as_coeff_mul()
sympy.tests.test_arit.test_Add_as_content_primitive()
sympy.tests.test_arit.test_Add_is_comparable()
sympy.tests.test_arit.test_Add_is_even_odd()
sympy.tests.test_arit.test_Add_is_irrational()
sympy.tests.test_arit.test_Add_is_negative_positive()
sympy.tests.test_arit.test_Add_is_nonpositive_nonnegative()
sympy.tests.test_arit.test_Add_is_positive_2()
sympy.tests.test_arit.test_Add_is_rational()
sympy.tests.test_arit.test_Mod()
sympy.tests.test_arit.test_Mul_as_content_primitive()
sympy.tests.test_arit.test_Mul_doesnt_expand_exp()
sympy.tests.test_arit.test_Mul_hermitian_antihermitian()
sympy.tests.test_arit.test_Mul_is_comparable()
sympy.tests.test_arit.test_Mul_is_even_odd()
sympy.tests.test_arit.test_Mul_is_imaginary_real()
sympy.tests.test_arit.test_Mul_is_negative_positive()
sympy.tests.test_arit.test_Mul_is_negative_positive_2()
sympy.tests.test_arit.test_Mul_is_nonpositive_nonnegative()
sympy.tests.test_arit.test_Mul_is_rational()
sympy.tests.test_arit.test_Pow_as_coeff_mul_doesnt_expand()
sympy.tests.test_arit.test_Pow_as_content_primitive()
sympy.tests.test_arit.test_Pow_is_comparable()
sympy.tests.test_arit.test_Pow_is_even_odd()
sympy.tests.test_arit.test_Pow_is_finite()
sympy.tests.test_arit.test_Pow_is_integer()
sympy.tests.test_arit.test_Pow_is_negative_positive()
sympy.tests.test_arit.test_Pow_is_nonpositive_nonnegative()
sympy.tests.test_arit.test_Pow_is_real()
sympy.tests.test_arit.test_Pow_is_zero()
sympy.tests.test_arit.test_Rational_as_content_primitive()
sympy.tests.test_arit.test_Symbol()
sympy.tests.test_arit.test_add_flatten()
sympy.tests.test_arit.test_arit0()
sympy.tests.test_arit.test_bug1()
sympy.tests.test_arit.test_bug3()
sympy.tests.test_arit.test_denest_add_mul()
sympy.tests.test_arit.test_div()
sympy.tests.test_arit.test_float_int()
sympy.tests.test_arit.test_issue_3514()
sympy.tests.test_arit.test_issue_3531()
sympy.tests.test_arit.test_issue_3531b()
sympy.tests.test_arit.test_issue_5126()
sympy.tests.test_arit.test_issue_5160_6087_6089_6090()
sympy.tests.test_arit.test_issue_5460()
sympy.tests.test_arit.test_issue_5919()
sympy.tests.test_arit.test_issue_6001()
sympy.tests.test_arit.test_issue_6040()
sympy.tests.test_arit.test_issue_6077()
sympy.tests.test_arit.test_issue_6082()
sympy.tests.test_arit.test_issue_6611a()
sympy.tests.test_arit.test_make_args()
sympy.tests.test_arit.test_mul_coeff()
sympy.tests.test_arit.test_mul_flatten_oo()
sympy.tests.test_arit.test_mul_zero_detection()
sympy.tests.test_arit.test_ncmul()
sympy.tests.test_arit.test_ncpow()
sympy.tests.test_arit.test_polar()
sympy.tests.test_arit.test_pow()
sympy.tests.test_arit.test_pow2()
sympy.tests.test_arit.test_pow3()
sympy.tests.test_arit.test_pow_E()
sympy.tests.test_arit.test_pow_im()
sympy.tests.test_arit.test_pow_issue_3516()
sympy.tests.test_arit.test_powerbug()
sympy.tests.test_arit.test_product_irrational()
sympy.tests.test_arit.test_real_Pow()
sympy.tests.test_arit.test_real_mul()
sympy.tests.test_arit.test_suppressed_evaluation()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_evalf.py----------------------------------------
A:sympy.core.tests.test_evalf.A->Rational('63287/100000')
A:sympy.core.tests.test_evalf.B->Rational('52498/100000')
A:sympy.core.tests.test_evalf.C->Rational('69301/100000')
A:sympy.core.tests.test_evalf.D->Rational('83542/100000')
A:sympy.core.tests.test_evalf.F->Rational('2231321613/2500000000')
A:sympy.core.tests.test_evalf.a->sin(160 * pi, evaluate=False)
A:sympy.core.tests.test_evalf.b->floor(log(8) / log(2), evaluate=False)
A:sympy.core.tests.test_evalf.t->sin(160 * pi, evaluate=False).evalf(maxn=100)
A:sympy.core.tests.test_evalf.f->implemented_function(f, lambda x: x + 1)
A:sympy.core.tests.test_evalf.v->S('-(357587765856 + 18873261792*249**(1/2) + 56619785376*I*83**(1/2) +\n    108755765856*I*3**(1/2) + 41281887168*6**(1/3)*(1422 +\n    54*249**(1/2))**(1/3) - 1239810624*6**(1/3)*249**(1/2)*(1422 +\n    54*249**(1/2))**(1/3) - 3110400000*I*6**(1/3)*83**(1/2)*(1422 +\n    54*249**(1/2))**(1/3) + 13478400000*I*3**(1/2)*6**(1/3)*(1422 +\n    54*249**(1/2))**(1/3) + 1274950152*6**(2/3)*(1422 +\n    54*249**(1/2))**(2/3) + 32347944*6**(2/3)*249**(1/2)*(1422 +\n    54*249**(1/2))**(2/3) - 1758790152*I*3**(1/2)*6**(2/3)*(1422 +\n    54*249**(1/2))**(2/3) - 304403832*I*6**(2/3)*83**(1/2)*(1422 +\n    4*249**(1/2))**(2/3))/(175732658352 + (1106028 + 25596*249**(1/2) +\n    76788*I*83**(1/2))**2)')
A:sympy.core.tests.test_evalf.eps->Rational(1, 1000000)
sympy.core.tests.test_evalf.NS(e,n=15,**options)
sympy.core.tests.test_evalf.test_bugs()
sympy.core.tests.test_evalf.test_cancellation()
sympy.core.tests.test_evalf.test_chop_value()
sympy.core.tests.test_evalf.test_evalf_arguments()
sympy.core.tests.test_evalf.test_evalf_basic()
sympy.core.tests.test_evalf.test_evalf_bugs()
sympy.core.tests.test_evalf.test_evalf_complex()
sympy.core.tests.test_evalf.test_evalf_complex_bug()
sympy.core.tests.test_evalf.test_evalf_complex_cancellation()
sympy.core.tests.test_evalf.test_evalf_complex_powers()
sympy.core.tests.test_evalf.test_evalf_complex_powers_bug()
sympy.core.tests.test_evalf.test_evalf_divergent_series()
sympy.core.tests.test_evalf.test_evalf_exponentiation()
sympy.core.tests.test_evalf.test_evalf_helpers()
sympy.core.tests.test_evalf.test_evalf_integer_parts()
sympy.core.tests.test_evalf.test_evalf_integral()
sympy.core.tests.test_evalf.test_evalf_logs()
sympy.core.tests.test_evalf.test_evalf_mul()
sympy.core.tests.test_evalf.test_evalf_near_integers()
sympy.core.tests.test_evalf.test_evalf_power_subs_bugs()
sympy.core.tests.test_evalf.test_evalf_powers()
sympy.core.tests.test_evalf.test_evalf_product()
sympy.core.tests.test_evalf.test_evalf_py_methods()
sympy.core.tests.test_evalf.test_evalf_ramanujan()
sympy.core.tests.test_evalf.test_evalf_relational()
sympy.core.tests.test_evalf.test_evalf_rump()
sympy.core.tests.test_evalf.test_evalf_sum()
sympy.core.tests.test_evalf.test_evalf_trig()
sympy.core.tests.test_evalf.test_evalf_trig_zero_detection()
sympy.core.tests.test_evalf.test_evaluate_false()
sympy.core.tests.test_evalf.test_implemented_function_evalf()
sympy.core.tests.test_evalf.test_infinities()
sympy.core.tests.test_evalf.test_issue_4806()
sympy.core.tests.test_evalf.test_issue_4945()
sympy.core.tests.test_evalf.test_issue_4956_5204()
sympy.core.tests.test_evalf.test_issue_5486()
sympy.core.tests.test_evalf.test_issue_5486_bug()
sympy.core.tests.test_evalf.test_issue_6632_evalf()
sympy.core.tests.test_evalf.test_old_docstring()
sympy.core.tests.test_evalf.test_scaled_zero()
sympy.core.tests.test_evalf.test_subs()
sympy.core.tests.test_evalf.test_to_mpmath()
sympy.tests.test_NS(e,n=15,**options)
sympy.tests.test_evalf.test_bugs()
sympy.tests.test_evalf.test_cancellation()
sympy.tests.test_evalf.test_chop_value()
sympy.tests.test_evalf.test_evalf_arguments()
sympy.tests.test_evalf.test_evalf_basic()
sympy.tests.test_evalf.test_evalf_bugs()
sympy.tests.test_evalf.test_evalf_complex()
sympy.tests.test_evalf.test_evalf_complex_bug()
sympy.tests.test_evalf.test_evalf_complex_cancellation()
sympy.tests.test_evalf.test_evalf_complex_powers()
sympy.tests.test_evalf.test_evalf_complex_powers_bug()
sympy.tests.test_evalf.test_evalf_divergent_series()
sympy.tests.test_evalf.test_evalf_exponentiation()
sympy.tests.test_evalf.test_evalf_helpers()
sympy.tests.test_evalf.test_evalf_integer_parts()
sympy.tests.test_evalf.test_evalf_integral()
sympy.tests.test_evalf.test_evalf_logs()
sympy.tests.test_evalf.test_evalf_mul()
sympy.tests.test_evalf.test_evalf_near_integers()
sympy.tests.test_evalf.test_evalf_power_subs_bugs()
sympy.tests.test_evalf.test_evalf_powers()
sympy.tests.test_evalf.test_evalf_product()
sympy.tests.test_evalf.test_evalf_py_methods()
sympy.tests.test_evalf.test_evalf_ramanujan()
sympy.tests.test_evalf.test_evalf_relational()
sympy.tests.test_evalf.test_evalf_rump()
sympy.tests.test_evalf.test_evalf_sum()
sympy.tests.test_evalf.test_evalf_trig()
sympy.tests.test_evalf.test_evalf_trig_zero_detection()
sympy.tests.test_evalf.test_evaluate_false()
sympy.tests.test_evalf.test_implemented_function_evalf()
sympy.tests.test_evalf.test_infinities()
sympy.tests.test_evalf.test_issue_4806()
sympy.tests.test_evalf.test_issue_4945()
sympy.tests.test_evalf.test_issue_4956_5204()
sympy.tests.test_evalf.test_issue_5486()
sympy.tests.test_evalf.test_issue_5486_bug()
sympy.tests.test_evalf.test_issue_6632_evalf()
sympy.tests.test_evalf.test_old_docstring()
sympy.tests.test_evalf.test_scaled_zero()
sympy.tests.test_evalf.test_subs()
sympy.tests.test_evalf.test_to_mpmath()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_operations.py----------------------------------------
A:sympy.core.tests.test_operations.zero->Integer(0)
A:sympy.core.tests.test_operations.identity->Integer(1)
sympy.core.tests.test_operations.join(LatticeOp)
sympy.core.tests.test_operations.test_lattice_make_args()
sympy.core.tests.test_operations.test_lattice_print()
sympy.core.tests.test_operations.test_lattice_shortcircuit()
sympy.core.tests.test_operations.test_lattice_simple()
sympy.tests.test_operations.join(LatticeOp)
sympy.tests.test_operations.test_lattice_make_args()
sympy.tests.test_operations.test_lattice_print()
sympy.tests.test_operations.test_lattice_shortcircuit()
sympy.tests.test_operations.test_lattice_simple()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_expand.py----------------------------------------
A:sympy.core.tests.test_expand.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_expand.B->Symbol('B', commutative=False)
A:sympy.core.tests.test_expand.C->Symbol('C', commutative=False)
A:sympy.core.tests.test_expand.a->Symbol('a')
A:sympy.core.tests.test_expand.b->Symbol('b')
A:sympy.core.tests.test_expand.i->Symbol('i', integer=True)
A:sympy.core.tests.test_expand.n->Symbol('n', negative=True)
A:sympy.core.tests.test_expand.m->Symbol('m', negative=True)
A:sympy.core.tests.test_expand.p->Symbol('p', positive=True)
A:sympy.core.tests.test_expand.np->Symbol('p', polar=False)
A:sympy.core.tests.test_expand.e->Pow(Mul(a, 1 / a, A, B, evaluate=False), S(2), evaluate=False)
A:sympy.core.tests.test_expand.c->Symbol('c')
A:sympy.core.tests.test_expand.x->Symbol('x')
A:sympy.core.tests.test_expand.W->W.expand().expand()
A:sympy.core.tests.test_expand.eq->Pow((A + 1) ** 2, 2, evaluate=False)
A:sympy.core.tests.test_expand.t->Symbol('t', positive=True)
sympy.core.tests.test_expand.test_expand_arit()
sympy.core.tests.test_expand.test_expand_frac()
sympy.core.tests.test_expand.test_expand_log()
sympy.core.tests.test_expand.test_expand_modulus()
sympy.core.tests.test_expand.test_expand_negative_integer_powers()
sympy.core.tests.test_expand.test_expand_no_log()
sympy.core.tests.test_expand.test_expand_no_multinomial()
sympy.core.tests.test_expand.test_expand_non_commutative()
sympy.core.tests.test_expand.test_expand_power_base()
sympy.core.tests.test_expand.test_expand_radicals()
sympy.core.tests.test_expand.test_issue_5743()
sympy.core.tests.test_expand.test_issue_6121()
sympy.core.tests.test_expand.test_issues_5919_6830()
sympy.core.tests.test_expand.test_power_expand()
sympy.tests.test_expand.test_expand_arit()
sympy.tests.test_expand.test_expand_frac()
sympy.tests.test_expand.test_expand_log()
sympy.tests.test_expand.test_expand_modulus()
sympy.tests.test_expand.test_expand_negative_integer_powers()
sympy.tests.test_expand.test_expand_no_log()
sympy.tests.test_expand.test_expand_no_multinomial()
sympy.tests.test_expand.test_expand_non_commutative()
sympy.tests.test_expand.test_expand_power_base()
sympy.tests.test_expand.test_expand_radicals()
sympy.tests.test_expand.test_issue_5743()
sympy.tests.test_expand.test_issue_6121()
sympy.tests.test_expand.test_issues_5919_6830()
sympy.tests.test_expand.test_power_expand()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_relational.py----------------------------------------
A:sympy.core.tests.test_relational.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.core.tests.test_relational.e->Ge(x, p).doit()
A:sympy.core.tests.test_relational.res->Relational(y, e, '!=')
A:sympy.core.tests.test_relational.p->symbols('p', cls=Wild)
A:sympy.core.tests.test_relational.a->sqrt(2)
A:sympy.core.tests.test_relational.b->Float('.0000000000000000000001', '')
A:sympy.core.tests.test_relational.n->Symbol('n', negative=True)
A:sympy.core.tests.test_relational.np->Symbol('np', nonpositive=True)
A:sympy.core.tests.test_relational.nn->Symbol('nn', nonnegative=True)
A:sympy.core.tests.test_relational.x->Symbol('x', real=True, nonzero=True)
A:sympy.core.tests.test_relational.relation_type->strtype(randint(0, length))
A:sympy.core.tests.test_relational.y->Symbol('y', imaginary=True)
A:sympy.core.tests.test_relational.z->Symbol('z', complex=True)
A:sympy.core.tests.test_relational.t->Symbol('t', imaginary=True)
A:sympy.core.tests.test_relational.ineq->Lt(x, y, evaluate=False)
A:sympy.core.tests.test_relational.q->sqrt(2).n(10)
A:sympy.core.tests.test_relational.r->Rational(str(a.n(29)))
sympy.core.tests.test_relational.assert_all_ineq_give_class_Inequality(a,b)
sympy.core.tests.test_relational.assert_all_ineq_raise_TypeError(a,b)
sympy.core.tests.test_relational.test_Eq()
sympy.core.tests.test_relational.test_Not()
sympy.core.tests.test_relational.test_bool()
sympy.core.tests.test_relational.test_complex_compare_not_real()
sympy.core.tests.test_relational.test_complex_pure_imag_not_ordered()
sympy.core.tests.test_relational.test_doit()
sympy.core.tests.test_relational.test_evaluate()
sympy.core.tests.test_relational.test_imaginary_and_inf_compare_raises_TypeError()
sympy.core.tests.test_relational.test_imaginary_compare_raises_TypeError()
sympy.core.tests.test_relational.test_ineq_avoid_wild_symbol_flip()
sympy.core.tests.test_relational.test_inequalities_cant_sympify_other()
sympy.core.tests.test_relational.test_inequalities_symbol_name_same()
sympy.core.tests.test_relational.test_inequalities_symbol_name_same_complex()
sympy.core.tests.test_relational.test_issue_8245()
sympy.core.tests.test_relational.test_multivariate_relational_as_set()
sympy.core.tests.test_relational.test_nan_equality_exceptions()
sympy.core.tests.test_relational.test_new_relational()
sympy.core.tests.test_relational.test_rel_Infinity()
sympy.core.tests.test_relational.test_rel_ne()
sympy.core.tests.test_relational.test_rel_subs()
sympy.core.tests.test_relational.test_relational_bool_output()
sympy.core.tests.test_relational.test_relational_logic_symbols()
sympy.core.tests.test_relational.test_rich_cmp()
sympy.core.tests.test_relational.test_univariate_relational_as_set()
sympy.core.tests.test_relational.test_wrappers()
sympy.core.tests.test_relational.test_x_minus_y_not_same_as_x_lt_y()
sympy.tests.test_relational.assert_all_ineq_give_class_Inequality(a,b)
sympy.tests.test_relational.assert_all_ineq_raise_TypeError(a,b)
sympy.tests.test_relational.test_Eq()
sympy.tests.test_relational.test_Not()
sympy.tests.test_relational.test_bool()
sympy.tests.test_relational.test_complex_compare_not_real()
sympy.tests.test_relational.test_complex_pure_imag_not_ordered()
sympy.tests.test_relational.test_doit()
sympy.tests.test_relational.test_evaluate()
sympy.tests.test_relational.test_imaginary_and_inf_compare_raises_TypeError()
sympy.tests.test_relational.test_imaginary_compare_raises_TypeError()
sympy.tests.test_relational.test_ineq_avoid_wild_symbol_flip()
sympy.tests.test_relational.test_inequalities_cant_sympify_other()
sympy.tests.test_relational.test_inequalities_symbol_name_same()
sympy.tests.test_relational.test_inequalities_symbol_name_same_complex()
sympy.tests.test_relational.test_issue_8245()
sympy.tests.test_relational.test_multivariate_relational_as_set()
sympy.tests.test_relational.test_nan_equality_exceptions()
sympy.tests.test_relational.test_new_relational()
sympy.tests.test_relational.test_rel_Infinity()
sympy.tests.test_relational.test_rel_ne()
sympy.tests.test_relational.test_rel_subs()
sympy.tests.test_relational.test_relational_bool_output()
sympy.tests.test_relational.test_relational_logic_symbols()
sympy.tests.test_relational.test_rich_cmp()
sympy.tests.test_relational.test_univariate_relational_as_set()
sympy.tests.test_relational.test_wrappers()
sympy.tests.test_relational.test_x_minus_y_not_same_as_x_lt_y()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_eval_power.py----------------------------------------
A:sympy.core.tests.test_eval_power.a->Symbol('a')
A:sympy.core.tests.test_eval_power.x->Symbol('x')
A:sympy.core.tests.test_eval_power.b->Symbol('b')
A:sympy.core.tests.test_eval_power.k->Symbol('k', integer=True)
A:sympy.core.tests.test_eval_power.m->Symbol('m', integer=True)
A:sympy.core.tests.test_eval_power.y->Symbol('y')
A:sympy.core.tests.test_eval_power.neg->Symbol('neg', negative=True)
A:sympy.core.tests.test_eval_power.nonneg->Symbol('nonneg', nonnegative=True)
A:sympy.core.tests.test_eval_power.any->Symbol('any')
A:sympy.core.tests.test_eval_power.(num, den)->sqrt(1 / any).as_numer_denom()
A:sympy.core.tests.test_eval_power.eq->eqn(nneg, dneg, -pow)
A:sympy.core.tests.test_eval_power.notp->Symbol('notp', positive=False)
A:sympy.core.tests.test_eval_power.nonp->Symbol('nonp', nonpositive=True)
A:sympy.core.tests.test_eval_power.n->Symbol('n', even=True)
A:sympy.core.tests.test_eval_power.c->Symbol('c')
A:sympy.core.tests.test_eval_power.e->sqrt(1 / c)
A:sympy.core.tests.test_eval_power.i->Symbol('i', imaginary=True)
A:sympy.core.tests.test_eval_power.r->symbols('r', real=True)
A:sympy.core.tests.test_eval_power.p->symbols('p', positive=True)
sympy.core.tests.test_eval_power.test_Pow_signs()
sympy.core.tests.test_eval_power.test_expand()
sympy.core.tests.test_eval_power.test_issue_3449()
sympy.core.tests.test_eval_power.test_issue_3866()
sympy.core.tests.test_eval_power.test_issue_4362()
sympy.core.tests.test_eval_power.test_issue_6068()
sympy.core.tests.test_eval_power.test_issue_6100()
sympy.core.tests.test_eval_power.test_issue_6208()
sympy.core.tests.test_eval_power.test_issue_6429()
sympy.core.tests.test_eval_power.test_issue_6653()
sympy.core.tests.test_eval_power.test_issue_6782()
sympy.core.tests.test_eval_power.test_issue_6990()
sympy.core.tests.test_eval_power.test_issue_7638()
sympy.core.tests.test_eval_power.test_large_rational()
sympy.core.tests.test_eval_power.test_negative_one()
sympy.core.tests.test_eval_power.test_negative_real()
sympy.core.tests.test_eval_power.test_pow_as_base_exp()
sympy.core.tests.test_eval_power.test_power_with_noncommutative_mul_as_base()
sympy.core.tests.test_eval_power.test_rational()
sympy.core.tests.test_eval_power.test_zero()
sympy.tests.test_eval_power.test_Pow_signs()
sympy.tests.test_eval_power.test_expand()
sympy.tests.test_eval_power.test_issue_3449()
sympy.tests.test_eval_power.test_issue_3866()
sympy.tests.test_eval_power.test_issue_4362()
sympy.tests.test_eval_power.test_issue_6068()
sympy.tests.test_eval_power.test_issue_6100()
sympy.tests.test_eval_power.test_issue_6208()
sympy.tests.test_eval_power.test_issue_6429()
sympy.tests.test_eval_power.test_issue_6653()
sympy.tests.test_eval_power.test_issue_6782()
sympy.tests.test_eval_power.test_issue_6990()
sympy.tests.test_eval_power.test_issue_7638()
sympy.tests.test_eval_power.test_large_rational()
sympy.tests.test_eval_power.test_negative_one()
sympy.tests.test_eval_power.test_negative_real()
sympy.tests.test_eval_power.test_pow_as_base_exp()
sympy.tests.test_eval_power.test_power_with_noncommutative_mul_as_base()
sympy.tests.test_eval_power.test_rational()
sympy.tests.test_eval_power.test_zero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_truediv.py----------------------------------------
A:sympy.core.tests.test_truediv.x->Symbol('x')
A:sympy.core.tests.test_truediv.y->Symbol('y')
sympy.core.tests.test_truediv.dotest(s)
sympy.core.tests.test_truediv.test_basic()
sympy.core.tests.test_truediv.test_ibasic()
sympy.core.tests.test_truediv.test_truediv()
sympy.tests.test_truediv.dotest(s)
sympy.tests.test_truediv.test_basic()
sympy.tests.test_truediv.test_ibasic()
sympy.tests.test_truediv.test_truediv()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_wester.py----------------------------------------
A:sympy.core.tests.test_wester.(x, y, z)->symbols('x y z', real=True)
A:sympy.core.tests.test_wester.(i, j, k, l, m, n)->symbols('i j k l m n', integer=True)
A:sympy.core.tests.test_wester.f->inverse_laplace_transform(s / (s ** 2 + (w - 1) ** 2), s, t)
A:sympy.core.tests.test_wester.g->MV('g', 'vector', fct=True)
A:sympy.core.tests.test_wester.test->factor(x ** 3 + y ** 3, extension=sqrt(-3))
A:sympy.core.tests.test_wester.s->symbols('s')
A:sympy.core.tests.test_wester.it->cf_i((exp(1 / s) - 1) / (exp(1 / s) + 1))
A:sympy.core.tests.test_wester.expr->factor(6 * x - 10)
A:sympy.core.tests.test_wester.ep->expand(p)
A:sympy.core.tests.test_wester.dep->diff(ep, x)
A:sympy.core.tests.test_wester.a->symbols('a', real=True)
A:sympy.core.tests.test_wester.phi->AlgebraicNumber(S.GoldenRatio.expand(func=True), alias='phi')
A:sympy.core.tests.test_wester.(A, B, C)->symbols('A, B, C', commutatative=False)
A:sympy.core.tests.test_wester.p->symbols('p', real=True, positive=True)
A:sympy.core.tests.test_wester.(mu, nu)->symbols('mu, nu', integer=True)
A:sympy.core.tests.test_wester.(z1, z2)->symbols('z1, z2', complex=True)
A:sympy.core.tests.test_wester.(a, b)->symbols('a b', commutative=False, scalar=False)
A:sympy.core.tests.test_wester.(x, y)->symbols('x y', real=True)
A:sympy.core.tests.test_wester.y->Function('y')
A:sympy.core.tests.test_wester.sexpr->simplify(expr)
A:sympy.core.tests.test_wester.z->symbols('z', complex=True)
A:sympy.core.tests.test_wester.sol->dsolve(eq, f(x))
A:sympy.core.tests.test_wester.x->symbols('x', real=True)
A:sympy.core.tests.test_wester.solution->solve(1 - binomial(m, 2) * 2 ** k, k)
A:sympy.core.tests.test_wester.answer->log(2 / (m * (m - 1)), 2)
A:sympy.core.tests.test_wester.(a, b, c, d)->symbols('a b c d', real=True)
A:sympy.core.tests.test_wester.b->symbols('b', real=True)
A:sympy.core.tests.test_wester.variabes->vring('k1:50', vfield('a,b,c', ZZ).to_domain())
A:sympy.core.tests.test_wester.(x, y, k)->symbols('x y k', real=True)
A:sympy.core.tests.test_wester.(x, y, k, n)->symbols('x y k n', real=True)
A:sympy.core.tests.test_wester.(r, t)->symbols('r t', real=True)
A:sympy.core.tests.test_wester.M->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))])
A:sympy.core.tests.test_wester.(va, vb, vc, vd)->sympy.galgebra.ga.MV.setup('va vb vc vd')
A:sympy.core.tests.test_wester.(ex, ey, ez, grad)->sympy.galgebra.ga.MV.setup('e*x|y|z', metric='[1,1,1]', coords=(x, y, z))
A:sympy.core.tests.test_wester.(_, _, _, grad)->sympy.galgebra.ga.MV.setup('e*x|y|z', metric='[1,1,1]', coords=(x, y, z))
A:sympy.core.tests.test_wester.A->Matrix([[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34], [41, 42, 43, 44]])
A:sympy.core.tests.test_wester.A22->MatrixSymbol('A22', n, n)
A:sympy.core.tests.test_wester.B->BlockMatrix([[A11, A12], [ZeroMatrix(n, n), A22]])
A:sympy.core.tests.test_wester.(a, b, c)->symbols('a b c')
A:sympy.core.tests.test_wester.A11->MatrixSymbol('A11', n, n)
A:sympy.core.tests.test_wester.A12->MatrixSymbol('A12', n, n)
A:sympy.core.tests.test_wester.(L, U, _)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).LUdecomposition()
A:sympy.core.tests.test_wester.(R, _)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).rref()
A:sympy.core.tests.test_wester.t->symbols('t', real=True, positive=True)
A:sympy.core.tests.test_wester.w->symbols('w', real=True)
A:sympy.core.tests.test_wester.MF->N(Matrix([[611, 196, -192, 407, -8, -52, -49, 29], [196, 899, 113, -192, -71, -43, -8, -44], [-192, 113, 899, 196, 61, 49, 8, 52], [407, -192, 196, 611, 8, 44, 59, -23], [-8, -71, 61, 8, 411, -599, 208, 208], [-52, -43, 49, 44, -599, 411, 208, 208], [-49, -8, 8, 59, 208, 208, 99, -911], [29, -44, 52, -23, 208, 208, -911, 99]]))
A:sympy.core.tests.test_wester.(a0, a1, a2, a3, a4)->symbols('a0 a1 a2 a3 a4')
A:sympy.core.tests.test_wester.(_, J)->Matrix([Matrix(Y).T.diff(x, n) for n in range(0, len(Y))]).jordan_form()
A:sympy.core.tests.test_wester.(w, t)->symbols('w t')
A:sympy.core.tests.test_wester.V->Matrix([diff(f, v) for v in Y])
A:sympy.core.tests.test_wester.(i, n)->symbols('i n', integer=True, positive=True)
A:sympy.core.tests.test_wester.xn->MatrixSymbol('xn', n, 1)
A:sympy.core.tests.test_wester.Sm->Sum(Product(k / (2 * k - 1), (k, 1, m)), (m, 2, oo))
A:sympy.core.tests.test_wester.(m, b)->symbols('m b', real=True)
A:sympy.core.tests.test_wester.yn->MatrixSymbol('yn', n, 1)
A:sympy.core.tests.test_wester.f1->Lambda(x, diff(f0(x), x))
A:sympy.core.tests.test_wester.f2->diff(f, b)
A:sympy.core.tests.test_wester.(n, k)->symbols('n k', integer=True, positive=True)
A:sympy.core.tests.test_wester.T->integrate(f(y), y, h(x), g(x))
A:sympy.core.tests.test_wester.T2->integrate(f(y), y, h(x), g(x)).combsimp().rewrite(factorial)
A:sympy.core.tests.test_wester.(a, b, c, n, k)->symbols('a b c n k', integer=True, positive=True)
A:sympy.core.tests.test_wester.gn->MatrixSymbol('gn', n + 1, 1)
A:sympy.core.tests.test_wester.(n, m, r, k)->symbols('n m r k', integer=True, positive=True)
A:sympy.core.tests.test_wester.T3->integrate(f(y), y, h(x), g(x)).combsimp().rewrite(factorial).rewrite(binomial)
A:sympy.core.tests.test_wester.k->symbols('k', integer=True, positive=True)
A:sympy.core.tests.test_wester.(m, k)->symbols('m k', integer=True, positive=True)
A:sympy.core.tests.test_wester.Pr->Product((k * (k + 1) + 1 + I) / (k * (k + 1) + 1 - I), (k, 0, oo))
A:sympy.core.tests.test_wester.(a, z)->symbols('a z', real=True, positive=True)
A:sympy.core.tests.test_wester.(z, k)->symbols('z k', real=True, positive=True)
A:sympy.core.tests.test_wester.(x, t)->symbols('x t', real=True)
A:sympy.core.tests.test_wester.n->symbols('n', integer=True, positive=True)
A:sympy.core.tests.test_wester.h->Function('h')
A:sympy.core.tests.test_wester.(p, t)->symbols('p t', real=True)
A:sympy.core.tests.test_wester.eq->eq.subs(y, f(x)).subs(y, f(x))
A:sympy.core.tests.test_wester.s2->tan(x).series()
A:sympy.core.tests.test_wester.s3->tan(x).series().doit().factor()
A:sympy.core.tests.test_wester.(dx, dy, dz)->sympy.galgebra.ga.MV.setup('dx dy dz')
A:sympy.core.tests.test_wester.r1->integrate(integrate(sqrt(x ** 2 + y ** 2), (x, 0, 1)), (y, 0, 1))
A:sympy.core.tests.test_wester.r2->integrate(integrate(x / (x ** 2 + y ** 2), (y, -oo, oo)), (x, a, b))
A:sympy.core.tests.test_wester.q->symbols('q', real=True)
A:sympy.core.tests.test_wester.(t, u)->symbols('t u', real=True)
A:sympy.core.tests.test_wester.(a, x, y)->symbols('a x y', real=True)
A:sympy.core.tests.test_wester.i1->integrate(sin(a) * sin(y) / sqrt(1 - sin(a) ** 2 * sin(x) ** 2 * sin(y) ** 2), (x, 0, pi / 2))
A:sympy.core.tests.test_wester.i2->integrate(i1, (y, 0, pi / 2))
A:sympy.core.tests.test_wester.(v, c)->symbols('v c', real=True)
A:sympy.core.tests.test_wester.s1->log(sin(x) / x).series()
A:sympy.core.tests.test_wester.(z, w)->symbols('z w')
A:sympy.core.tests.test_wester.(a, b, x)->symbols('a b x', real=True)
A:sympy.core.tests.test_wester.e1->integrate(exp(-t) / t, (t, x, oo))
A:sympy.core.tests.test_wester.(F, _, _)->laplace_transform(eq, t, s)
A:sympy.core.tests.test_wester.(x, s)->symbols('x s')
A:sympy.core.tests.test_wester.r->Function('r')
A:sympy.core.tests.test_wester.c->symbols('c')
A:sympy.core.tests.test_wester.(C1, C2)->symbols('C1 C2')
A:sympy.core.tests.test_wester.f0->Lambda(x, sol.rhs)
A:sympy.core.tests.test_wester.const_dict->solve((f0(0), f1(0)))
A:sympy.core.tests.test_wester.result->f0(x).subs(C1, const_dict[C1]).subs(C2, const_dict[C2])
sympy.core.tests.test_wester.test_B1()
sympy.core.tests.test_wester.test_B2()
sympy.core.tests.test_wester.test_B3()
sympy.core.tests.test_wester.test_B4()
sympy.core.tests.test_wester.test_C1()
sympy.core.tests.test_wester.test_C10()
sympy.core.tests.test_wester.test_C11()
sympy.core.tests.test_wester.test_C12()
sympy.core.tests.test_wester.test_C13()
sympy.core.tests.test_wester.test_C14()
sympy.core.tests.test_wester.test_C15()
sympy.core.tests.test_wester.test_C16()
sympy.core.tests.test_wester.test_C17()
sympy.core.tests.test_wester.test_C18()
sympy.core.tests.test_wester.test_C19()
sympy.core.tests.test_wester.test_C2()
sympy.core.tests.test_wester.test_C20()
sympy.core.tests.test_wester.test_C21()
sympy.core.tests.test_wester.test_C22()
sympy.core.tests.test_wester.test_C23()
sympy.core.tests.test_wester.test_C24()
sympy.core.tests.test_wester.test_C3()
sympy.core.tests.test_wester.test_C4()
sympy.core.tests.test_wester.test_C5()
sympy.core.tests.test_wester.test_C6()
sympy.core.tests.test_wester.test_C7()
sympy.core.tests.test_wester.test_C8()
sympy.core.tests.test_wester.test_C9()
sympy.core.tests.test_wester.test_D1()
sympy.core.tests.test_wester.test_D10()
sympy.core.tests.test_wester.test_D11()
sympy.core.tests.test_wester.test_D12()
sympy.core.tests.test_wester.test_D13()
sympy.core.tests.test_wester.test_D2()
sympy.core.tests.test_wester.test_D3()
sympy.core.tests.test_wester.test_D4()
sympy.core.tests.test_wester.test_D5()
sympy.core.tests.test_wester.test_D6()
sympy.core.tests.test_wester.test_D7()
sympy.core.tests.test_wester.test_D8()
sympy.core.tests.test_wester.test_D9()
sympy.core.tests.test_wester.test_F1()
sympy.core.tests.test_wester.test_F2()
sympy.core.tests.test_wester.test_F3()
sympy.core.tests.test_wester.test_F4()
sympy.core.tests.test_wester.test_F5()
sympy.core.tests.test_wester.test_F6()
sympy.core.tests.test_wester.test_F7()
sympy.core.tests.test_wester.test_F8()
sympy.core.tests.test_wester.test_F9()
sympy.core.tests.test_wester.test_G1()
sympy.core.tests.test_wester.test_G15()
sympy.core.tests.test_wester.test_G16()
sympy.core.tests.test_wester.test_G17()
sympy.core.tests.test_wester.test_G18()
sympy.core.tests.test_wester.test_G19()
sympy.core.tests.test_wester.test_G2()
sympy.core.tests.test_wester.test_G20()
sympy.core.tests.test_wester.test_G20b()
sympy.core.tests.test_wester.test_G3()
sympy.core.tests.test_wester.test_H1()
sympy.core.tests.test_wester.test_H10()
sympy.core.tests.test_wester.test_H11()
sympy.core.tests.test_wester.test_H12()
sympy.core.tests.test_wester.test_H13()
sympy.core.tests.test_wester.test_H14()
sympy.core.tests.test_wester.test_H15()
sympy.core.tests.test_wester.test_H16()
sympy.core.tests.test_wester.test_H17()
sympy.core.tests.test_wester.test_H18()
sympy.core.tests.test_wester.test_H19()
sympy.core.tests.test_wester.test_H2()
sympy.core.tests.test_wester.test_H20()
sympy.core.tests.test_wester.test_H21()
sympy.core.tests.test_wester.test_H22()
sympy.core.tests.test_wester.test_H23()
sympy.core.tests.test_wester.test_H24()
sympy.core.tests.test_wester.test_H25()
sympy.core.tests.test_wester.test_H26()
sympy.core.tests.test_wester.test_H27()
sympy.core.tests.test_wester.test_H28()
sympy.core.tests.test_wester.test_H29()
sympy.core.tests.test_wester.test_H3()
sympy.core.tests.test_wester.test_H30()
sympy.core.tests.test_wester.test_H31()
sympy.core.tests.test_wester.test_H32()
sympy.core.tests.test_wester.test_H33()
sympy.core.tests.test_wester.test_H4()
sympy.core.tests.test_wester.test_H5()
sympy.core.tests.test_wester.test_H6()
sympy.core.tests.test_wester.test_H7()
sympy.core.tests.test_wester.test_H8()
sympy.core.tests.test_wester.test_H9()
sympy.core.tests.test_wester.test_I1()
sympy.core.tests.test_wester.test_I10()
sympy.core.tests.test_wester.test_I12()
sympy.core.tests.test_wester.test_I2()
sympy.core.tests.test_wester.test_I3()
sympy.core.tests.test_wester.test_I4()
sympy.core.tests.test_wester.test_I5()
sympy.core.tests.test_wester.test_I6()
sympy.core.tests.test_wester.test_I7()
sympy.core.tests.test_wester.test_I8()
sympy.core.tests.test_wester.test_I9()
sympy.core.tests.test_wester.test_J1()
sympy.core.tests.test_wester.test_J10()
sympy.core.tests.test_wester.test_J11()
sympy.core.tests.test_wester.test_J12()
sympy.core.tests.test_wester.test_J13()
sympy.core.tests.test_wester.test_J14()
sympy.core.tests.test_wester.test_J15()
sympy.core.tests.test_wester.test_J16()
sympy.core.tests.test_wester.test_J17()
sympy.core.tests.test_wester.test_J18()
sympy.core.tests.test_wester.test_J2()
sympy.core.tests.test_wester.test_J3()
sympy.core.tests.test_wester.test_J4()
sympy.core.tests.test_wester.test_J5()
sympy.core.tests.test_wester.test_J6()
sympy.core.tests.test_wester.test_J7()
sympy.core.tests.test_wester.test_J8()
sympy.core.tests.test_wester.test_J9()
sympy.core.tests.test_wester.test_K1()
sympy.core.tests.test_wester.test_K10()
sympy.core.tests.test_wester.test_K2()
sympy.core.tests.test_wester.test_K3()
sympy.core.tests.test_wester.test_K4()
sympy.core.tests.test_wester.test_K5()
sympy.core.tests.test_wester.test_K6()
sympy.core.tests.test_wester.test_K7()
sympy.core.tests.test_wester.test_K8()
sympy.core.tests.test_wester.test_K9()
sympy.core.tests.test_wester.test_L1()
sympy.core.tests.test_wester.test_L2()
sympy.core.tests.test_wester.test_L3()
sympy.core.tests.test_wester.test_L4()
sympy.core.tests.test_wester.test_L5()
sympy.core.tests.test_wester.test_L6()
sympy.core.tests.test_wester.test_L7()
sympy.core.tests.test_wester.test_L8()
sympy.core.tests.test_wester.test_L9()
sympy.core.tests.test_wester.test_M1()
sympy.core.tests.test_wester.test_M10()
sympy.core.tests.test_wester.test_M11()
sympy.core.tests.test_wester.test_M12()
sympy.core.tests.test_wester.test_M13()
sympy.core.tests.test_wester.test_M14()
sympy.core.tests.test_wester.test_M15()
sympy.core.tests.test_wester.test_M16()
sympy.core.tests.test_wester.test_M17()
sympy.core.tests.test_wester.test_M18()
sympy.core.tests.test_wester.test_M19()
sympy.core.tests.test_wester.test_M2()
sympy.core.tests.test_wester.test_M20()
sympy.core.tests.test_wester.test_M21()
sympy.core.tests.test_wester.test_M22()
sympy.core.tests.test_wester.test_M23()
sympy.core.tests.test_wester.test_M24()
sympy.core.tests.test_wester.test_M25()
sympy.core.tests.test_wester.test_M26()
sympy.core.tests.test_wester.test_M27()
sympy.core.tests.test_wester.test_M28()
sympy.core.tests.test_wester.test_M29()
sympy.core.tests.test_wester.test_M30()
sympy.core.tests.test_wester.test_M31()
sympy.core.tests.test_wester.test_M32()
sympy.core.tests.test_wester.test_M33()
sympy.core.tests.test_wester.test_M34()
sympy.core.tests.test_wester.test_M35()
sympy.core.tests.test_wester.test_M36()
sympy.core.tests.test_wester.test_M37()
sympy.core.tests.test_wester.test_M38()
sympy.core.tests.test_wester.test_M39()
sympy.core.tests.test_wester.test_M5()
sympy.core.tests.test_wester.test_M6()
sympy.core.tests.test_wester.test_M7()
sympy.core.tests.test_wester.test_M8()
sympy.core.tests.test_wester.test_M9()
sympy.core.tests.test_wester.test_N1()
sympy.core.tests.test_wester.test_N10()
sympy.core.tests.test_wester.test_N11()
sympy.core.tests.test_wester.test_N12()
sympy.core.tests.test_wester.test_N13()
sympy.core.tests.test_wester.test_N14()
sympy.core.tests.test_wester.test_N15()
sympy.core.tests.test_wester.test_N16()
sympy.core.tests.test_wester.test_N17()
sympy.core.tests.test_wester.test_N2()
sympy.core.tests.test_wester.test_N3()
sympy.core.tests.test_wester.test_N4()
sympy.core.tests.test_wester.test_N5()
sympy.core.tests.test_wester.test_N6()
sympy.core.tests.test_wester.test_N7()
sympy.core.tests.test_wester.test_N8()
sympy.core.tests.test_wester.test_N9()
sympy.core.tests.test_wester.test_O1()
sympy.core.tests.test_wester.test_O10()
sympy.core.tests.test_wester.test_O2()
sympy.core.tests.test_wester.test_O3()
sympy.core.tests.test_wester.test_O4()
sympy.core.tests.test_wester.test_O5()
sympy.core.tests.test_wester.test_P1()
sympy.core.tests.test_wester.test_P10()
sympy.core.tests.test_wester.test_P11()
sympy.core.tests.test_wester.test_P12()
sympy.core.tests.test_wester.test_P13()
sympy.core.tests.test_wester.test_P14()
sympy.core.tests.test_wester.test_P15()
sympy.core.tests.test_wester.test_P16()
sympy.core.tests.test_wester.test_P17()
sympy.core.tests.test_wester.test_P18()
sympy.core.tests.test_wester.test_P19()
sympy.core.tests.test_wester.test_P2()
sympy.core.tests.test_wester.test_P20()
sympy.core.tests.test_wester.test_P21()
sympy.core.tests.test_wester.test_P22()
sympy.core.tests.test_wester.test_P23()
sympy.core.tests.test_wester.test_P24()
sympy.core.tests.test_wester.test_P25()
sympy.core.tests.test_wester.test_P26()
sympy.core.tests.test_wester.test_P27()
sympy.core.tests.test_wester.test_P28()
sympy.core.tests.test_wester.test_P29()
sympy.core.tests.test_wester.test_P3()
sympy.core.tests.test_wester.test_P30()
sympy.core.tests.test_wester.test_P31()
sympy.core.tests.test_wester.test_P32()
sympy.core.tests.test_wester.test_P33()
sympy.core.tests.test_wester.test_P34()
sympy.core.tests.test_wester.test_P35()
sympy.core.tests.test_wester.test_P36()
sympy.core.tests.test_wester.test_P37()
sympy.core.tests.test_wester.test_P38()
sympy.core.tests.test_wester.test_P39()
sympy.core.tests.test_wester.test_P4()
sympy.core.tests.test_wester.test_P40()
sympy.core.tests.test_wester.test_P41()
sympy.core.tests.test_wester.test_P42()
sympy.core.tests.test_wester.test_P43()
sympy.core.tests.test_wester.test_P44()
sympy.core.tests.test_wester.test_P45()
sympy.core.tests.test_wester.test_P5()
sympy.core.tests.test_wester.test_P5_workaround()
sympy.core.tests.test_wester.test_P6()
sympy.core.tests.test_wester.test_P7()
sympy.core.tests.test_wester.test_P8()
sympy.core.tests.test_wester.test_P9()
sympy.core.tests.test_wester.test_R1()
sympy.core.tests.test_wester.test_R10()
sympy.core.tests.test_wester.test_R11()
sympy.core.tests.test_wester.test_R12()
sympy.core.tests.test_wester.test_R13()
sympy.core.tests.test_wester.test_R14()
sympy.core.tests.test_wester.test_R15()
sympy.core.tests.test_wester.test_R16()
sympy.core.tests.test_wester.test_R17()
sympy.core.tests.test_wester.test_R18()
sympy.core.tests.test_wester.test_R19()
sympy.core.tests.test_wester.test_R2()
sympy.core.tests.test_wester.test_R20()
sympy.core.tests.test_wester.test_R21()
sympy.core.tests.test_wester.test_R23()
sympy.core.tests.test_wester.test_R24()
sympy.core.tests.test_wester.test_R3()
sympy.core.tests.test_wester.test_R4()
sympy.core.tests.test_wester.test_R5()
sympy.core.tests.test_wester.test_R6()
sympy.core.tests.test_wester.test_R7()
sympy.core.tests.test_wester.test_R8()
sympy.core.tests.test_wester.test_R9()
sympy.core.tests.test_wester.test_S1()
sympy.core.tests.test_wester.test_S10()
sympy.core.tests.test_wester.test_S2()
sympy.core.tests.test_wester.test_S3()
sympy.core.tests.test_wester.test_S4()
sympy.core.tests.test_wester.test_S5()
sympy.core.tests.test_wester.test_S6()
sympy.core.tests.test_wester.test_S7()
sympy.core.tests.test_wester.test_S8()
sympy.core.tests.test_wester.test_S9()
sympy.core.tests.test_wester.test_T1()
sympy.core.tests.test_wester.test_T10()
sympy.core.tests.test_wester.test_T11()
sympy.core.tests.test_wester.test_T12()
sympy.core.tests.test_wester.test_T13()
sympy.core.tests.test_wester.test_T14()
sympy.core.tests.test_wester.test_T2()
sympy.core.tests.test_wester.test_T3()
sympy.core.tests.test_wester.test_T4()
sympy.core.tests.test_wester.test_T5()
sympy.core.tests.test_wester.test_T6()
sympy.core.tests.test_wester.test_T7()
sympy.core.tests.test_wester.test_T8()
sympy.core.tests.test_wester.test_T9()
sympy.core.tests.test_wester.test_U1()
sympy.core.tests.test_wester.test_U10()
sympy.core.tests.test_wester.test_U11()
sympy.core.tests.test_wester.test_U12()
sympy.core.tests.test_wester.test_U13()
sympy.core.tests.test_wester.test_U14()
sympy.core.tests.test_wester.test_U15()
sympy.core.tests.test_wester.test_U16()
sympy.core.tests.test_wester.test_U17()
sympy.core.tests.test_wester.test_U2()
sympy.core.tests.test_wester.test_U3()
sympy.core.tests.test_wester.test_U4()
sympy.core.tests.test_wester.test_U5()
sympy.core.tests.test_wester.test_U6()
sympy.core.tests.test_wester.test_U7()
sympy.core.tests.test_wester.test_U8()
sympy.core.tests.test_wester.test_U9()
sympy.core.tests.test_wester.test_V1()
sympy.core.tests.test_wester.test_V10()
sympy.core.tests.test_wester.test_V11()
sympy.core.tests.test_wester.test_V12()
sympy.core.tests.test_wester.test_V13()
sympy.core.tests.test_wester.test_V14()
sympy.core.tests.test_wester.test_V15()
sympy.core.tests.test_wester.test_V16()
sympy.core.tests.test_wester.test_V17()
sympy.core.tests.test_wester.test_V2()
sympy.core.tests.test_wester.test_V3()
sympy.core.tests.test_wester.test_V4()
sympy.core.tests.test_wester.test_V5()
sympy.core.tests.test_wester.test_V6()
sympy.core.tests.test_wester.test_V7()
sympy.core.tests.test_wester.test_V8_V9()
sympy.core.tests.test_wester.test_W1()
sympy.core.tests.test_wester.test_W10()
sympy.core.tests.test_wester.test_W11()
sympy.core.tests.test_wester.test_W12()
sympy.core.tests.test_wester.test_W13()
sympy.core.tests.test_wester.test_W14()
sympy.core.tests.test_wester.test_W15()
sympy.core.tests.test_wester.test_W16()
sympy.core.tests.test_wester.test_W17()
sympy.core.tests.test_wester.test_W18()
sympy.core.tests.test_wester.test_W19()
sympy.core.tests.test_wester.test_W2()
sympy.core.tests.test_wester.test_W20()
sympy.core.tests.test_wester.test_W21()
sympy.core.tests.test_wester.test_W22()
sympy.core.tests.test_wester.test_W23()
sympy.core.tests.test_wester.test_W23b()
sympy.core.tests.test_wester.test_W24()
sympy.core.tests.test_wester.test_W25()
sympy.core.tests.test_wester.test_W26()
sympy.core.tests.test_wester.test_W27()
sympy.core.tests.test_wester.test_W3()
sympy.core.tests.test_wester.test_W4()
sympy.core.tests.test_wester.test_W5()
sympy.core.tests.test_wester.test_W6()
sympy.core.tests.test_wester.test_W7()
sympy.core.tests.test_wester.test_W8()
sympy.core.tests.test_wester.test_W9()
sympy.core.tests.test_wester.test_X1()
sympy.core.tests.test_wester.test_X10()
sympy.core.tests.test_wester.test_X11()
sympy.core.tests.test_wester.test_X12()
sympy.core.tests.test_wester.test_X13()
sympy.core.tests.test_wester.test_X14()
sympy.core.tests.test_wester.test_X15()
sympy.core.tests.test_wester.test_X16()
sympy.core.tests.test_wester.test_X17()
sympy.core.tests.test_wester.test_X18()
sympy.core.tests.test_wester.test_X19()
sympy.core.tests.test_wester.test_X2()
sympy.core.tests.test_wester.test_X20()
sympy.core.tests.test_wester.test_X21()
sympy.core.tests.test_wester.test_X22()
sympy.core.tests.test_wester.test_X3()
sympy.core.tests.test_wester.test_X4()
sympy.core.tests.test_wester.test_X5()
sympy.core.tests.test_wester.test_X6()
sympy.core.tests.test_wester.test_X7()
sympy.core.tests.test_wester.test_X8()
sympy.core.tests.test_wester.test_X9()
sympy.core.tests.test_wester.test_Y1()
sympy.core.tests.test_wester.test_Y10()
sympy.core.tests.test_wester.test_Y11()
sympy.core.tests.test_wester.test_Y12()
sympy.core.tests.test_wester.test_Y13()
sympy.core.tests.test_wester.test_Y14()
sympy.core.tests.test_wester.test_Y2()
sympy.core.tests.test_wester.test_Y3()
sympy.core.tests.test_wester.test_Y4()
sympy.core.tests.test_wester.test_Y5_Y6()
sympy.core.tests.test_wester.test_Y7()
sympy.core.tests.test_wester.test_Y8()
sympy.core.tests.test_wester.test_Y9()
sympy.core.tests.test_wester.test_Z1()
sympy.core.tests.test_wester.test_Z2()
sympy.core.tests.test_wester.test_Z3()
sympy.core.tests.test_wester.test_Z4()
sympy.core.tests.test_wester.test_Z5()
sympy.core.tests.test_wester.test_Z6()
sympy.tests.test_wester.test_B1()
sympy.tests.test_wester.test_B2()
sympy.tests.test_wester.test_B3()
sympy.tests.test_wester.test_B4()
sympy.tests.test_wester.test_C1()
sympy.tests.test_wester.test_C10()
sympy.tests.test_wester.test_C11()
sympy.tests.test_wester.test_C12()
sympy.tests.test_wester.test_C13()
sympy.tests.test_wester.test_C14()
sympy.tests.test_wester.test_C15()
sympy.tests.test_wester.test_C16()
sympy.tests.test_wester.test_C17()
sympy.tests.test_wester.test_C18()
sympy.tests.test_wester.test_C19()
sympy.tests.test_wester.test_C2()
sympy.tests.test_wester.test_C20()
sympy.tests.test_wester.test_C21()
sympy.tests.test_wester.test_C22()
sympy.tests.test_wester.test_C23()
sympy.tests.test_wester.test_C24()
sympy.tests.test_wester.test_C3()
sympy.tests.test_wester.test_C4()
sympy.tests.test_wester.test_C5()
sympy.tests.test_wester.test_C6()
sympy.tests.test_wester.test_C7()
sympy.tests.test_wester.test_C8()
sympy.tests.test_wester.test_C9()
sympy.tests.test_wester.test_D1()
sympy.tests.test_wester.test_D10()
sympy.tests.test_wester.test_D11()
sympy.tests.test_wester.test_D12()
sympy.tests.test_wester.test_D13()
sympy.tests.test_wester.test_D2()
sympy.tests.test_wester.test_D3()
sympy.tests.test_wester.test_D4()
sympy.tests.test_wester.test_D5()
sympy.tests.test_wester.test_D6()
sympy.tests.test_wester.test_D7()
sympy.tests.test_wester.test_D8()
sympy.tests.test_wester.test_D9()
sympy.tests.test_wester.test_F1()
sympy.tests.test_wester.test_F2()
sympy.tests.test_wester.test_F3()
sympy.tests.test_wester.test_F4()
sympy.tests.test_wester.test_F5()
sympy.tests.test_wester.test_F6()
sympy.tests.test_wester.test_F7()
sympy.tests.test_wester.test_F8()
sympy.tests.test_wester.test_F9()
sympy.tests.test_wester.test_G1()
sympy.tests.test_wester.test_G15()
sympy.tests.test_wester.test_G16()
sympy.tests.test_wester.test_G17()
sympy.tests.test_wester.test_G18()
sympy.tests.test_wester.test_G19()
sympy.tests.test_wester.test_G2()
sympy.tests.test_wester.test_G20()
sympy.tests.test_wester.test_G20b()
sympy.tests.test_wester.test_G3()
sympy.tests.test_wester.test_H1()
sympy.tests.test_wester.test_H10()
sympy.tests.test_wester.test_H11()
sympy.tests.test_wester.test_H12()
sympy.tests.test_wester.test_H13()
sympy.tests.test_wester.test_H14()
sympy.tests.test_wester.test_H15()
sympy.tests.test_wester.test_H16()
sympy.tests.test_wester.test_H17()
sympy.tests.test_wester.test_H18()
sympy.tests.test_wester.test_H19()
sympy.tests.test_wester.test_H2()
sympy.tests.test_wester.test_H20()
sympy.tests.test_wester.test_H21()
sympy.tests.test_wester.test_H22()
sympy.tests.test_wester.test_H23()
sympy.tests.test_wester.test_H24()
sympy.tests.test_wester.test_H25()
sympy.tests.test_wester.test_H26()
sympy.tests.test_wester.test_H27()
sympy.tests.test_wester.test_H28()
sympy.tests.test_wester.test_H29()
sympy.tests.test_wester.test_H3()
sympy.tests.test_wester.test_H30()
sympy.tests.test_wester.test_H31()
sympy.tests.test_wester.test_H32()
sympy.tests.test_wester.test_H33()
sympy.tests.test_wester.test_H4()
sympy.tests.test_wester.test_H5()
sympy.tests.test_wester.test_H6()
sympy.tests.test_wester.test_H7()
sympy.tests.test_wester.test_H8()
sympy.tests.test_wester.test_H9()
sympy.tests.test_wester.test_I1()
sympy.tests.test_wester.test_I10()
sympy.tests.test_wester.test_I12()
sympy.tests.test_wester.test_I2()
sympy.tests.test_wester.test_I3()
sympy.tests.test_wester.test_I4()
sympy.tests.test_wester.test_I5()
sympy.tests.test_wester.test_I6()
sympy.tests.test_wester.test_I7()
sympy.tests.test_wester.test_I8()
sympy.tests.test_wester.test_I9()
sympy.tests.test_wester.test_J1()
sympy.tests.test_wester.test_J10()
sympy.tests.test_wester.test_J11()
sympy.tests.test_wester.test_J12()
sympy.tests.test_wester.test_J13()
sympy.tests.test_wester.test_J14()
sympy.tests.test_wester.test_J15()
sympy.tests.test_wester.test_J16()
sympy.tests.test_wester.test_J17()
sympy.tests.test_wester.test_J18()
sympy.tests.test_wester.test_J2()
sympy.tests.test_wester.test_J3()
sympy.tests.test_wester.test_J4()
sympy.tests.test_wester.test_J5()
sympy.tests.test_wester.test_J6()
sympy.tests.test_wester.test_J7()
sympy.tests.test_wester.test_J8()
sympy.tests.test_wester.test_J9()
sympy.tests.test_wester.test_K1()
sympy.tests.test_wester.test_K10()
sympy.tests.test_wester.test_K2()
sympy.tests.test_wester.test_K3()
sympy.tests.test_wester.test_K4()
sympy.tests.test_wester.test_K5()
sympy.tests.test_wester.test_K6()
sympy.tests.test_wester.test_K7()
sympy.tests.test_wester.test_K8()
sympy.tests.test_wester.test_K9()
sympy.tests.test_wester.test_L1()
sympy.tests.test_wester.test_L2()
sympy.tests.test_wester.test_L3()
sympy.tests.test_wester.test_L4()
sympy.tests.test_wester.test_L5()
sympy.tests.test_wester.test_L6()
sympy.tests.test_wester.test_L7()
sympy.tests.test_wester.test_L8()
sympy.tests.test_wester.test_L9()
sympy.tests.test_wester.test_M1()
sympy.tests.test_wester.test_M10()
sympy.tests.test_wester.test_M11()
sympy.tests.test_wester.test_M12()
sympy.tests.test_wester.test_M13()
sympy.tests.test_wester.test_M14()
sympy.tests.test_wester.test_M15()
sympy.tests.test_wester.test_M16()
sympy.tests.test_wester.test_M17()
sympy.tests.test_wester.test_M18()
sympy.tests.test_wester.test_M19()
sympy.tests.test_wester.test_M2()
sympy.tests.test_wester.test_M20()
sympy.tests.test_wester.test_M21()
sympy.tests.test_wester.test_M22()
sympy.tests.test_wester.test_M23()
sympy.tests.test_wester.test_M24()
sympy.tests.test_wester.test_M25()
sympy.tests.test_wester.test_M26()
sympy.tests.test_wester.test_M27()
sympy.tests.test_wester.test_M28()
sympy.tests.test_wester.test_M29()
sympy.tests.test_wester.test_M30()
sympy.tests.test_wester.test_M31()
sympy.tests.test_wester.test_M32()
sympy.tests.test_wester.test_M33()
sympy.tests.test_wester.test_M34()
sympy.tests.test_wester.test_M35()
sympy.tests.test_wester.test_M36()
sympy.tests.test_wester.test_M37()
sympy.tests.test_wester.test_M38()
sympy.tests.test_wester.test_M39()
sympy.tests.test_wester.test_M5()
sympy.tests.test_wester.test_M6()
sympy.tests.test_wester.test_M7()
sympy.tests.test_wester.test_M8()
sympy.tests.test_wester.test_M9()
sympy.tests.test_wester.test_N1()
sympy.tests.test_wester.test_N10()
sympy.tests.test_wester.test_N11()
sympy.tests.test_wester.test_N12()
sympy.tests.test_wester.test_N13()
sympy.tests.test_wester.test_N14()
sympy.tests.test_wester.test_N15()
sympy.tests.test_wester.test_N16()
sympy.tests.test_wester.test_N17()
sympy.tests.test_wester.test_N2()
sympy.tests.test_wester.test_N3()
sympy.tests.test_wester.test_N4()
sympy.tests.test_wester.test_N5()
sympy.tests.test_wester.test_N6()
sympy.tests.test_wester.test_N7()
sympy.tests.test_wester.test_N8()
sympy.tests.test_wester.test_N9()
sympy.tests.test_wester.test_O1()
sympy.tests.test_wester.test_O10()
sympy.tests.test_wester.test_O2()
sympy.tests.test_wester.test_O3()
sympy.tests.test_wester.test_O4()
sympy.tests.test_wester.test_O5()
sympy.tests.test_wester.test_P1()
sympy.tests.test_wester.test_P10()
sympy.tests.test_wester.test_P11()
sympy.tests.test_wester.test_P12()
sympy.tests.test_wester.test_P13()
sympy.tests.test_wester.test_P14()
sympy.tests.test_wester.test_P15()
sympy.tests.test_wester.test_P16()
sympy.tests.test_wester.test_P17()
sympy.tests.test_wester.test_P18()
sympy.tests.test_wester.test_P19()
sympy.tests.test_wester.test_P2()
sympy.tests.test_wester.test_P20()
sympy.tests.test_wester.test_P21()
sympy.tests.test_wester.test_P22()
sympy.tests.test_wester.test_P23()
sympy.tests.test_wester.test_P24()
sympy.tests.test_wester.test_P25()
sympy.tests.test_wester.test_P26()
sympy.tests.test_wester.test_P27()
sympy.tests.test_wester.test_P28()
sympy.tests.test_wester.test_P29()
sympy.tests.test_wester.test_P3()
sympy.tests.test_wester.test_P30()
sympy.tests.test_wester.test_P31()
sympy.tests.test_wester.test_P32()
sympy.tests.test_wester.test_P33()
sympy.tests.test_wester.test_P34()
sympy.tests.test_wester.test_P35()
sympy.tests.test_wester.test_P36()
sympy.tests.test_wester.test_P37()
sympy.tests.test_wester.test_P38()
sympy.tests.test_wester.test_P39()
sympy.tests.test_wester.test_P4()
sympy.tests.test_wester.test_P40()
sympy.tests.test_wester.test_P41()
sympy.tests.test_wester.test_P42()
sympy.tests.test_wester.test_P43()
sympy.tests.test_wester.test_P44()
sympy.tests.test_wester.test_P45()
sympy.tests.test_wester.test_P5()
sympy.tests.test_wester.test_P5_workaround()
sympy.tests.test_wester.test_P6()
sympy.tests.test_wester.test_P7()
sympy.tests.test_wester.test_P8()
sympy.tests.test_wester.test_P9()
sympy.tests.test_wester.test_R1()
sympy.tests.test_wester.test_R10()
sympy.tests.test_wester.test_R11()
sympy.tests.test_wester.test_R12()
sympy.tests.test_wester.test_R13()
sympy.tests.test_wester.test_R14()
sympy.tests.test_wester.test_R15()
sympy.tests.test_wester.test_R16()
sympy.tests.test_wester.test_R17()
sympy.tests.test_wester.test_R18()
sympy.tests.test_wester.test_R19()
sympy.tests.test_wester.test_R2()
sympy.tests.test_wester.test_R20()
sympy.tests.test_wester.test_R21()
sympy.tests.test_wester.test_R23()
sympy.tests.test_wester.test_R24()
sympy.tests.test_wester.test_R3()
sympy.tests.test_wester.test_R4()
sympy.tests.test_wester.test_R5()
sympy.tests.test_wester.test_R6()
sympy.tests.test_wester.test_R7()
sympy.tests.test_wester.test_R8()
sympy.tests.test_wester.test_R9()
sympy.tests.test_wester.test_S1()
sympy.tests.test_wester.test_S10()
sympy.tests.test_wester.test_S2()
sympy.tests.test_wester.test_S3()
sympy.tests.test_wester.test_S4()
sympy.tests.test_wester.test_S5()
sympy.tests.test_wester.test_S6()
sympy.tests.test_wester.test_S7()
sympy.tests.test_wester.test_S8()
sympy.tests.test_wester.test_S9()
sympy.tests.test_wester.test_T1()
sympy.tests.test_wester.test_T10()
sympy.tests.test_wester.test_T11()
sympy.tests.test_wester.test_T12()
sympy.tests.test_wester.test_T13()
sympy.tests.test_wester.test_T14()
sympy.tests.test_wester.test_T2()
sympy.tests.test_wester.test_T3()
sympy.tests.test_wester.test_T4()
sympy.tests.test_wester.test_T5()
sympy.tests.test_wester.test_T6()
sympy.tests.test_wester.test_T7()
sympy.tests.test_wester.test_T8()
sympy.tests.test_wester.test_T9()
sympy.tests.test_wester.test_U1()
sympy.tests.test_wester.test_U10()
sympy.tests.test_wester.test_U11()
sympy.tests.test_wester.test_U12()
sympy.tests.test_wester.test_U13()
sympy.tests.test_wester.test_U14()
sympy.tests.test_wester.test_U15()
sympy.tests.test_wester.test_U16()
sympy.tests.test_wester.test_U17()
sympy.tests.test_wester.test_U2()
sympy.tests.test_wester.test_U3()
sympy.tests.test_wester.test_U4()
sympy.tests.test_wester.test_U5()
sympy.tests.test_wester.test_U6()
sympy.tests.test_wester.test_U7()
sympy.tests.test_wester.test_U8()
sympy.tests.test_wester.test_U9()
sympy.tests.test_wester.test_V1()
sympy.tests.test_wester.test_V10()
sympy.tests.test_wester.test_V11()
sympy.tests.test_wester.test_V12()
sympy.tests.test_wester.test_V13()
sympy.tests.test_wester.test_V14()
sympy.tests.test_wester.test_V15()
sympy.tests.test_wester.test_V16()
sympy.tests.test_wester.test_V17()
sympy.tests.test_wester.test_V2()
sympy.tests.test_wester.test_V3()
sympy.tests.test_wester.test_V4()
sympy.tests.test_wester.test_V5()
sympy.tests.test_wester.test_V6()
sympy.tests.test_wester.test_V7()
sympy.tests.test_wester.test_V8_V9()
sympy.tests.test_wester.test_W1()
sympy.tests.test_wester.test_W10()
sympy.tests.test_wester.test_W11()
sympy.tests.test_wester.test_W12()
sympy.tests.test_wester.test_W13()
sympy.tests.test_wester.test_W14()
sympy.tests.test_wester.test_W15()
sympy.tests.test_wester.test_W16()
sympy.tests.test_wester.test_W17()
sympy.tests.test_wester.test_W18()
sympy.tests.test_wester.test_W19()
sympy.tests.test_wester.test_W2()
sympy.tests.test_wester.test_W20()
sympy.tests.test_wester.test_W21()
sympy.tests.test_wester.test_W22()
sympy.tests.test_wester.test_W23()
sympy.tests.test_wester.test_W23b()
sympy.tests.test_wester.test_W24()
sympy.tests.test_wester.test_W25()
sympy.tests.test_wester.test_W26()
sympy.tests.test_wester.test_W27()
sympy.tests.test_wester.test_W3()
sympy.tests.test_wester.test_W4()
sympy.tests.test_wester.test_W5()
sympy.tests.test_wester.test_W6()
sympy.tests.test_wester.test_W7()
sympy.tests.test_wester.test_W8()
sympy.tests.test_wester.test_W9()
sympy.tests.test_wester.test_X1()
sympy.tests.test_wester.test_X10()
sympy.tests.test_wester.test_X11()
sympy.tests.test_wester.test_X12()
sympy.tests.test_wester.test_X13()
sympy.tests.test_wester.test_X14()
sympy.tests.test_wester.test_X15()
sympy.tests.test_wester.test_X16()
sympy.tests.test_wester.test_X17()
sympy.tests.test_wester.test_X18()
sympy.tests.test_wester.test_X19()
sympy.tests.test_wester.test_X2()
sympy.tests.test_wester.test_X20()
sympy.tests.test_wester.test_X21()
sympy.tests.test_wester.test_X22()
sympy.tests.test_wester.test_X3()
sympy.tests.test_wester.test_X4()
sympy.tests.test_wester.test_X5()
sympy.tests.test_wester.test_X6()
sympy.tests.test_wester.test_X7()
sympy.tests.test_wester.test_X8()
sympy.tests.test_wester.test_X9()
sympy.tests.test_wester.test_Y1()
sympy.tests.test_wester.test_Y10()
sympy.tests.test_wester.test_Y11()
sympy.tests.test_wester.test_Y12()
sympy.tests.test_wester.test_Y13()
sympy.tests.test_wester.test_Y14()
sympy.tests.test_wester.test_Y2()
sympy.tests.test_wester.test_Y3()
sympy.tests.test_wester.test_Y4()
sympy.tests.test_wester.test_Y5_Y6()
sympy.tests.test_wester.test_Y7()
sympy.tests.test_wester.test_Y8()
sympy.tests.test_wester.test_Y9()
sympy.tests.test_wester.test_Z1()
sympy.tests.test_wester.test_Z2()
sympy.tests.test_wester.test_Z3()
sympy.tests.test_wester.test_Z4()
sympy.tests.test_wester.test_Z5()
sympy.tests.test_wester.test_Z6()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_exprtools.py----------------------------------------
A:sympy.core.tests.test_exprtools.a->symbols('a', real=True)
A:sympy.core.tests.test_exprtools.b->Term(2 * x ** 3 * y ** 5 * t ** 7)
A:sympy.core.tests.test_exprtools.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_exprtools.f->factor_nc(ex)
A:sympy.core.tests.test_exprtools.args->sympy.Add.make_args(f)
A:sympy.core.tests.test_exprtools.(alpha, alpha1, alpha2, alpha3)->symbols('alpha:4')
A:sympy.core.tests.test_exprtools.s->Sum(x, (x, 1, 2))
A:sympy.core.tests.test_exprtools.i->Integral(x, (x, 0, oo))
A:sympy.core.tests.test_exprtools.e->Mul(2, 1 + x, evaluate=False)
A:sympy.core.tests.test_exprtools.(x, y)->symbols('x,y')
A:sympy.core.tests.test_exprtools.k->symbols('k', integer=True)
A:sympy.core.tests.test_exprtools.(n, m, o)->symbols('n,m,o', commutative=False)
A:sympy.core.tests.test_exprtools.ex->_mexpand(e)
A:sympy.core.tests.test_exprtools.(a, b)->symbols('a b')
sympy.core.tests.test_exprtools.test_Factors()
sympy.core.tests.test_exprtools.test_Term()
sympy.core.tests.test_exprtools.test_decompose_power()
sympy.core.tests.test_exprtools.test_factor_nc()
sympy.core.tests.test_exprtools.test_factor_terms()
sympy.core.tests.test_exprtools.test_gcd_terms()
sympy.core.tests.test_exprtools.test_issue_6360()
sympy.core.tests.test_exprtools.test_issue_7903()
sympy.core.tests.test_exprtools.test_xreplace()
sympy.tests.test_exprtools.test_Factors()
sympy.tests.test_exprtools.test_Term()
sympy.tests.test_exprtools.test_decompose_power()
sympy.tests.test_exprtools.test_factor_nc()
sympy.tests.test_exprtools.test_factor_terms()
sympy.tests.test_exprtools.test_gcd_terms()
sympy.tests.test_exprtools.test_issue_6360()
sympy.tests.test_exprtools.test_issue_7903()
sympy.tests.test_exprtools.test_xreplace()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_rules.py----------------------------------------
A:sympy.core.tests.test_rules.add1->Transform(lambda x: x + 1, lambda x: x % 2 == 1)
sympy.core.tests.test_rules.test_Transform()
sympy.tests.test_rules.test_Transform()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_basic.py----------------------------------------
A:sympy.core.tests.test_basic.b1->Basic()
A:sympy.core.tests.test_basic.b2->Basic(b1)
A:sympy.core.tests.test_basic.b3->Basic(b2)
A:sympy.core.tests.test_basic.b21->Basic(b2, b1)
A:sympy.core.tests.test_basic.expr->Basic(b21, b3)
A:sympy.core.tests.test_basic.pt->preorder_traversal(expr)
A:sympy.core.tests.test_basic.(w, x, y, z)->symbols('w:z')
A:sympy.core.tests.test_basic.x->symbols('x')
A:sympy.core.tests.test_basic.(x, y)->symbols('x y')
A:sympy.core.tests.test_basic.l->Lambda(x, 2 * x)
A:sympy.core.tests.test_basic.f->Function('f')
A:sympy.core.tests.test_basic.i->Integral(0, (x, x, x))
sympy.core.tests.test_basic.test_S()
sympy.core.tests.test_basic.test_Singleton()
sympy.core.tests.test_basic.test_atoms()
sympy.core.tests.test_basic.test_call()
sympy.core.tests.test_basic.test_doit()
sympy.core.tests.test_basic.test_equality()
sympy.core.tests.test_basic.test_free_symbols_empty()
sympy.core.tests.test_basic.test_has()
sympy.core.tests.test_basic.test_literal_evalf_is_number_is_zero_is_comparable()
sympy.core.tests.test_basic.test_matches_basic()
sympy.core.tests.test_basic.test_preorder_traversal()
sympy.core.tests.test_basic.test_sorted_args()
sympy.core.tests.test_basic.test_structure()
sympy.core.tests.test_basic.test_subs()
sympy.core.tests.test_basic.test_xreplace()
sympy.tests.test_basic.test_S()
sympy.tests.test_basic.test_Singleton()
sympy.tests.test_basic.test_atoms()
sympy.tests.test_basic.test_call()
sympy.tests.test_basic.test_doit()
sympy.tests.test_basic.test_equality()
sympy.tests.test_basic.test_free_symbols_empty()
sympy.tests.test_basic.test_has()
sympy.tests.test_basic.test_literal_evalf_is_number_is_zero_is_comparable()
sympy.tests.test_basic.test_matches_basic()
sympy.tests.test_basic.test_preorder_traversal()
sympy.tests.test_basic.test_sorted_args()
sympy.tests.test_basic.test_structure()
sympy.tests.test_basic.test_subs()
sympy.tests.test_basic.test_xreplace()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_compatibility.py----------------------------------------
sympy.core.tests.test_compatibility.test_as_int()
sympy.core.tests.test_compatibility.test_default_sort_key()
sympy.core.tests.test_compatibility.test_iterable()
sympy.core.tests.test_compatibility.test_ordered()
sympy.tests.test_compatibility.test_as_int()
sympy.tests.test_compatibility.test_default_sort_key()
sympy.tests.test_compatibility.test_iterable()
sympy.tests.test_compatibility.test_ordered()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_complex.py----------------------------------------
A:sympy.core.tests.test_complex.a->Symbol('a', real=True)
A:sympy.core.tests.test_complex.b->Symbol('b', real=True)
A:sympy.core.tests.test_complex.c->Symbol('c', imaginary=True)
A:sympy.core.tests.test_complex.d->Symbol('d', imaginary=True)
A:sympy.core.tests.test_complex.x->Symbol('x')
A:sympy.core.tests.test_complex.y->Symbol('y', real=True)
A:sympy.core.tests.test_complex.z->Symbol('z')
A:sympy.core.tests.test_complex.(x, y, z)->symbols('x, y, z')
A:sympy.core.tests.test_complex.(X, Y, Z)->symbols('X, Y, Z', commutative=False)
A:sympy.core.tests.test_complex.r->Symbol('r', real=True)
A:sympy.core.tests.test_complex.i->Symbol('i', imaginary=True)
A:sympy.core.tests.test_complex.e->S('-2/3 - (-29/54 + sqrt(93)/18)**(1/3) - 1/(9*(-29/54 + sqrt(93)/18)**(1/3))')
sympy.core.tests.test_complex.test_abs1()
sympy.core.tests.test_complex.test_abs2()
sympy.core.tests.test_complex.test_complex()
sympy.core.tests.test_complex.test_conjugate()
sympy.core.tests.test_complex.test_evalc()
sympy.core.tests.test_complex.test_expand()
sympy.core.tests.test_complex.test_expand_complex()
sympy.core.tests.test_complex.test_expand_inverse()
sympy.core.tests.test_complex.test_issue_4124()
sympy.core.tests.test_complex.test_issue_5084()
sympy.core.tests.test_complex.test_issue_5236()
sympy.core.tests.test_complex.test_issue_5429()
sympy.core.tests.test_complex.test_pow_issue_1724()
sympy.core.tests.test_complex.test_pythoncomplex()
sympy.core.tests.test_complex.test_re_im1652()
sympy.core.tests.test_complex.test_real_imag()
sympy.core.tests.test_complex.test_rootcomplex()
sympy.tests.test_complex.test_abs1()
sympy.tests.test_complex.test_abs2()
sympy.tests.test_complex.test_complex()
sympy.tests.test_complex.test_conjugate()
sympy.tests.test_complex.test_evalc()
sympy.tests.test_complex.test_expand()
sympy.tests.test_complex.test_expand_complex()
sympy.tests.test_complex.test_expand_inverse()
sympy.tests.test_complex.test_issue_4124()
sympy.tests.test_complex.test_issue_5084()
sympy.tests.test_complex.test_issue_5236()
sympy.tests.test_complex.test_issue_5429()
sympy.tests.test_complex.test_pow_issue_1724()
sympy.tests.test_complex.test_pythoncomplex()
sympy.tests.test_complex.test_re_im1652()
sympy.tests.test_complex.test_real_imag()
sympy.tests.test_complex.test_rootcomplex()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_logic.py----------------------------------------
A:sympy.core.tests.test_logic.l1->And('a', Not('b'))
A:sympy.core.tests.test_logic.l2->And('a', Not('b'))
A:sympy.core.tests.test_logic.t->And(Or('a', 'b'), Or('c', 'd'))
sympy.core.tests.test_logic.test_formatting()
sympy.core.tests.test_logic.test_fuzzy_and()
sympy.core.tests.test_logic.test_fuzzy_group()
sympy.core.tests.test_logic.test_fuzzy_not()
sympy.core.tests.test_logic.test_fuzzy_or()
sympy.core.tests.test_logic.test_logic_cmp()
sympy.core.tests.test_logic.test_logic_combine_args()
sympy.core.tests.test_logic.test_logic_eval_TF()
sympy.core.tests.test_logic.test_logic_expand()
sympy.core.tests.test_logic.test_logic_fromstring()
sympy.core.tests.test_logic.test_logic_not()
sympy.core.tests.test_logic.test_logic_onearg()
sympy.core.tests.test_logic.test_logic_xnotx()
sympy.core.tests.test_test_formatting()
sympy.core.tests.test_test_fuzzy_and()
sympy.core.tests.test_test_fuzzy_group()
sympy.core.tests.test_test_fuzzy_not()
sympy.core.tests.test_test_fuzzy_or()
sympy.core.tests.test_test_logic_cmp()
sympy.core.tests.test_test_logic_combine_args()
sympy.core.tests.test_test_logic_eval_TF()
sympy.core.tests.test_test_logic_expand()
sympy.core.tests.test_test_logic_fromstring()
sympy.core.tests.test_test_logic_not()
sympy.core.tests.test_test_logic_onearg()
sympy.core.tests.test_test_logic_xnotx()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_priority.py----------------------------------------
A:sympy.core.tests.test_priority.x->Symbol('x')
A:sympy.core.tests.test_priority.h->Higher()
A:sympy.core.tests.test_priority.l->Lower()
sympy.core.tests.test_priority.Higher(Expr)
sympy.core.tests.test_priority.Higher.__add__(self,other)
sympy.core.tests.test_priority.Higher.__div__(self,other)
sympy.core.tests.test_priority.Higher.__mul__(self,other)
sympy.core.tests.test_priority.Higher.__pow__(self,other)
sympy.core.tests.test_priority.Higher.__radd__(self,other)
sympy.core.tests.test_priority.Higher.__rdiv__(self,other)
sympy.core.tests.test_priority.Higher.__rmul__(self,other)
sympy.core.tests.test_priority.Higher.__rpow__(self,other)
sympy.core.tests.test_priority.Higher.__rsub__(self,other)
sympy.core.tests.test_priority.Higher.__sub__(self,other)
sympy.core.tests.test_priority.Lower(Higher)
sympy.core.tests.test_priority.test_add()
sympy.core.tests.test_priority.test_div()
sympy.core.tests.test_priority.test_mul()
sympy.core.tests.test_priority.test_pow()
sympy.core.tests.test_priority.test_sub()
sympy.tests.test_priority.Higher(Expr)
sympy.tests.test_priority.Higher.__add__(self,other)
sympy.tests.test_priority.Higher.__div__(self,other)
sympy.tests.test_priority.Higher.__mul__(self,other)
sympy.tests.test_priority.Higher.__pow__(self,other)
sympy.tests.test_priority.Higher.__radd__(self,other)
sympy.tests.test_priority.Higher.__rdiv__(self,other)
sympy.tests.test_priority.Higher.__rmul__(self,other)
sympy.tests.test_priority.Higher.__rpow__(self,other)
sympy.tests.test_priority.Higher.__rsub__(self,other)
sympy.tests.test_priority.Higher.__sub__(self,other)
sympy.tests.test_priority.Lower(Higher)
sympy.tests.test_priority.test_add()
sympy.tests.test_priority.test_div()
sympy.tests.test_priority.test_mul()
sympy.tests.test_priority.test_pow()
sympy.tests.test_priority.test_sub()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_noncommutative.py----------------------------------------
A:sympy.core.tests.test_noncommutative.(A, B, C)->symbols('A B C', commutative=False)
A:sympy.core.tests.test_noncommutative.X->symbols('X', commutative=False, hermitian=True)
A:sympy.core.tests.test_noncommutative.Y->symbols('Y', commutative=False, antihermitian=True)
A:sympy.core.tests.test_noncommutative.p->posify(q)
sympy.core.tests.test_noncommutative.test_adjoint()
sympy.core.tests.test_noncommutative.test_cancel()
sympy.core.tests.test_noncommutative.test_collect()
sympy.core.tests.test_noncommutative.test_combsimp()
sympy.core.tests.test_noncommutative.test_conjugate()
sympy.core.tests.test_noncommutative.test_expand()
sympy.core.tests.test_noncommutative.test_factor()
sympy.core.tests.test_noncommutative.test_posify()
sympy.core.tests.test_noncommutative.test_radsimp()
sympy.core.tests.test_noncommutative.test_ratsimp()
sympy.core.tests.test_noncommutative.test_rcollect()
sympy.core.tests.test_noncommutative.test_simplify()
sympy.core.tests.test_noncommutative.test_subs()
sympy.core.tests.test_noncommutative.test_transpose()
sympy.core.tests.test_noncommutative.test_trigsimp()
sympy.tests.test_noncommutative.test_adjoint()
sympy.tests.test_noncommutative.test_cancel()
sympy.tests.test_noncommutative.test_collect()
sympy.tests.test_noncommutative.test_combsimp()
sympy.tests.test_noncommutative.test_conjugate()
sympy.tests.test_noncommutative.test_expand()
sympy.tests.test_noncommutative.test_factor()
sympy.tests.test_noncommutative.test_posify()
sympy.tests.test_noncommutative.test_radsimp()
sympy.tests.test_noncommutative.test_ratsimp()
sympy.tests.test_noncommutative.test_rcollect()
sympy.tests.test_noncommutative.test_simplify()
sympy.tests.test_noncommutative.test_subs()
sympy.tests.test_noncommutative.test_transpose()
sympy.tests.test_noncommutative.test_trigsimp()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_evaluate.py----------------------------------------
sympy.core.tests.test_evaluate.test_add()
sympy.core.tests.test_evaluate.test_nested()
sympy.tests.test_evaluate.test_add()
sympy.tests.test_evaluate.test_nested()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_match.py----------------------------------------
A:sympy.core.tests.test_match.x->Symbol('x')
A:sympy.core.tests.test_match.(a, b, c, p, q)->map(Wild, 'abcpq')
A:sympy.core.tests.test_match.e->S(3)
A:sympy.core.tests.test_match.(x, y, a, b, c)->map(Symbol, 'xyabc')
A:sympy.core.tests.test_match.(p, q, r)->map(Wild, 'pqr')
A:sympy.core.tests.test_match.y->Wild('y')
A:sympy.core.tests.test_match.p->Wild('p')
A:sympy.core.tests.test_match.q->Wild('q', exclude=[p])
A:sympy.core.tests.test_match.r->Symbol('r', rational=True)
A:sympy.core.tests.test_match.a->Wild('a')
A:sympy.core.tests.test_match.(p, q)->map(Wild, 'pq')
A:sympy.core.tests.test_match.(x, y)->symbols('x y')
A:sympy.core.tests.test_match.(A, B)->symbols('A B', commutative=False)
A:sympy.core.tests.test_match.(u, v)->symbols('u v', cls=Wild)
A:sympy.core.tests.test_match.w->Wild('w', exclude=[x])
A:sympy.core.tests.test_match.(a, b, c)->symbols('a b c', cls=Wild)
A:sympy.core.tests.test_match.g->WildFunction('g')
A:sympy.core.tests.test_match.f->meijerg(((), ()), ((0,), ()), x)
A:sympy.core.tests.test_match.fd->Derivative(f(x), x)
A:sympy.core.tests.test_match.b->Wild('b')
A:sympy.core.tests.test_match.d2->pattern.xreplace(d1).matches(expr, d1)
A:sympy.core.tests.test_match.n->Function('n')
A:sympy.core.tests.test_match.l->Wild('l', exclude=(0,))
A:sympy.core.tests.test_match.res->(x + y).match(p + q + r)
A:sympy.core.tests.test_match.(x, a, b)->map(Symbol, 'xab')
A:sympy.core.tests.test_match.c->Wild('c', exclude=[x])
A:sympy.core.tests.test_match.d->Wild('d', exclude=[x])
A:sympy.core.tests.test_match.(x, y, a)->map(Symbol, 'xya')
A:sympy.core.tests.test_match.(a, b)->symbols('a b', cls=Wild, exclude=(f(x),))
A:sympy.core.tests.test_match.eq->diff(g(x) * f(x).diff(x), x)
A:sympy.core.tests.test_match.(z, phi, r)->symbols('z phi r')
A:sympy.core.tests.test_match.(c, A, B, N)->symbols('c A B N', cls=Wild)
A:sympy.core.tests.test_match.g1->Wild('g1', exclude=[gamma])
A:sympy.core.tests.test_match.g2->Wild('g2', exclude=[gamma])
A:sympy.core.tests.test_match.g3->Wild('g3', exclude=[gamma])
A:sympy.core.tests.test_match.(f, g)->symbols('f g', cls=Function)
A:sympy.core.tests.test_match.eq1->sin(x)
A:sympy.core.tests.test_match.ans->set([S.Zero, y - S(1) / 8])
A:sympy.core.tests.test_match.(p, c, q)->symbols('p c q', cls=Wild)
sympy.core.tests.test_match.test_Derivative_bug1()
sympy.core.tests.test_match.test_add()
sympy.core.tests.test_match.test_combine_inverse()
sympy.core.tests.test_match.test_complex()
sympy.core.tests.test_match.test_derivative1()
sympy.core.tests.test_match.test_derivative2()
sympy.core.tests.test_match.test_derivative_bug1()
sympy.core.tests.test_match.test_exclude()
sympy.core.tests.test_match.test_floats()
sympy.core.tests.test_match.test_functions()
sympy.core.tests.test_match.test_functions_X1()
sympy.core.tests.test_match.test_gh_issue_2711()
sympy.core.tests.test_match.test_interface()
sympy.core.tests.test_match.test_issue_3539()
sympy.core.tests.test_match.test_issue_3773()
sympy.core.tests.test_match.test_issue_3778()
sympy.core.tests.test_match.test_issue_3883()
sympy.core.tests.test_match.test_issue_4319()
sympy.core.tests.test_match.test_issue_4418()
sympy.core.tests.test_match.test_issue_4559()
sympy.core.tests.test_match.test_issue_4700()
sympy.core.tests.test_match.test_issue_4883()
sympy.core.tests.test_match.test_issue_5168()
sympy.core.tests.test_match.test_issue_6103()
sympy.core.tests.test_match.test_match_bug2()
sympy.core.tests.test_match.test_match_bug3()
sympy.core.tests.test_match.test_match_bug4()
sympy.core.tests.test_match.test_match_bug5()
sympy.core.tests.test_match.test_match_bug6()
sympy.core.tests.test_match.test_match_deriv_bug1()
sympy.core.tests.test_match.test_match_exclude()
sympy.core.tests.test_match.test_match_polynomial()
sympy.core.tests.test_match.test_match_wild_wild()
sympy.core.tests.test_match.test_mul()
sympy.core.tests.test_match.test_mul_noncommutative()
sympy.core.tests.test_match.test_power()
sympy.core.tests.test_match.test_symbol()
sympy.tests.test_match.test_Derivative_bug1()
sympy.tests.test_match.test_add()
sympy.tests.test_match.test_combine_inverse()
sympy.tests.test_match.test_complex()
sympy.tests.test_match.test_derivative1()
sympy.tests.test_match.test_derivative2()
sympy.tests.test_match.test_derivative_bug1()
sympy.tests.test_match.test_exclude()
sympy.tests.test_match.test_floats()
sympy.tests.test_match.test_functions()
sympy.tests.test_match.test_functions_X1()
sympy.tests.test_match.test_gh_issue_2711()
sympy.tests.test_match.test_interface()
sympy.tests.test_match.test_issue_3539()
sympy.tests.test_match.test_issue_3773()
sympy.tests.test_match.test_issue_3778()
sympy.tests.test_match.test_issue_3883()
sympy.tests.test_match.test_issue_4319()
sympy.tests.test_match.test_issue_4418()
sympy.tests.test_match.test_issue_4559()
sympy.tests.test_match.test_issue_4700()
sympy.tests.test_match.test_issue_4883()
sympy.tests.test_match.test_issue_5168()
sympy.tests.test_match.test_issue_6103()
sympy.tests.test_match.test_match_bug2()
sympy.tests.test_match.test_match_bug3()
sympy.tests.test_match.test_match_bug4()
sympy.tests.test_match.test_match_bug5()
sympy.tests.test_match.test_match_bug6()
sympy.tests.test_match.test_match_deriv_bug1()
sympy.tests.test_match.test_match_exclude()
sympy.tests.test_match.test_match_polynomial()
sympy.tests.test_match.test_match_wild_wild()
sympy.tests.test_match.test_mul()
sympy.tests.test_match.test_mul_noncommutative()
sympy.tests.test_match.test_power()
sympy.tests.test_match.test_symbol()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_diff.py----------------------------------------
A:sympy.core.tests.test_diff.(x, y)->symbols('x y')
A:sympy.core.tests.test_diff.a->Symbol('a')
A:sympy.core.tests.test_diff.b->Symbol('b')
A:sympy.core.tests.test_diff.c->Symbol('c')
A:sympy.core.tests.test_diff.p->Rational(5)
A:sympy.core.tests.test_diff.n3->Rational(3)
A:sympy.core.tests.test_diff.n2->Rational(2)
A:sympy.core.tests.test_diff.n6->Rational(6)
A:sympy.core.tests.test_diff.(x, c)->map(Symbol, 'xc')
A:sympy.core.tests.test_diff.(a, b, c)->map(Symbol, 'abc')
A:sympy.core.tests.test_diff.e->log(sin(c))
A:sympy.core.tests.test_diff.x->Symbol('x')
A:sympy.core.tests.test_diff.A->Symbol('A', commutative=False)
A:sympy.core.tests.test_diff.f->Function('f')
sympy.core.tests.test_diff.test_deriv_noncommutative()
sympy.core.tests.test_diff.test_diff()
sympy.core.tests.test_diff.test_diff2()
sympy.core.tests.test_diff.test_diff3()
sympy.core.tests.test_diff.test_diff_no_eval_derivative()
sympy.core.tests.test_diff.test_speed()
sympy.tests.test_diff.test_deriv_noncommutative()
sympy.tests.test_diff.test_diff()
sympy.tests.test_diff.test_diff2()
sympy.tests.test_diff.test_diff3()
sympy.tests.test_diff.test_diff_no_eval_derivative()
sympy.tests.test_diff.test_speed()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_args.py----------------------------------------
A:sympy.core.tests.test_args.(x, y, z)->symbols('x,y,z')
A:sympy.core.tests.test_args.path->os.path.join(this, os.pardir, os.pardir)
A:sympy.core.tests.test_args.sympy_path->os.path.abspath(path)
A:sympy.core.tests.test_args.re_cls->sympy.functions.elementary.complexes.re.compile('^class ([A-Za-z][A-Za-z0-9_]*)\\s*\\(', re.MULTILINE)
A:sympy.core.tests.test_args.module->root.replace(prefix, '').replace(os.sep, '.')
A:sympy.core.tests.test_args.text->NamedMorphism(A, B, 'f').read()
A:sympy.core.tests.test_args.names->list(filter(is_Basic, names))
A:sympy.core.tests.test_args.mod->root.replace(prefix, '').replace(os.sep, '.').replace('.', '__')
A:sympy.core.tests.test_args.cls->getattr(mod, name)
A:sympy.core.tests.test_args.ns->globals()
A:sympy.core.tests.test_args.(a, b)->tensor_indices('a,b', Lorentz)
A:sympy.core.tests.test_args.x->MatrixSymbol('x', 10, 1)
A:sympy.core.tests.test_args.nd->NormalDistribution(0, 1)
A:sympy.core.tests.test_args.die->DieDistribution(6)
A:sympy.core.tests.test_args.D->SingleDomain(x, Interval(-oo, oo))
A:sympy.core.tests.test_args.E->SingleDomain(y, Interval(0, oo))
A:sympy.core.tests.test_args.A->Object('A')
A:sympy.core.tests.test_args.B->Object('B')
A:sympy.core.tests.test_args.xd->SingleFiniteDomain(x, set([1, 2]))
A:sympy.core.tests.test_args.yd->SingleFiniteDomain(y, set([1, 2]))
A:sympy.core.tests.test_args.xp->SingleFinitePSpace(Symbol('x'), die)
A:sympy.core.tests.test_args.yp->SingleFinitePSpace(Symbol('y'), die)
A:sympy.core.tests.test_args.X->MatrixSymbol('X', 10, 10)
A:sympy.core.tests.test_args.Y->MatrixSymbol('Y', x, y)
A:sympy.core.tests.test_args.Z->MatrixSymbol('Z', x, y)
A:sympy.core.tests.test_args.O->ZeroMatrix(y, x)
A:sympy.core.tests.test_args.(i, j)->symbols('i j', below_fermi=True)
A:sympy.core.tests.test_args.(A, B)->symbols('A,B', commutative=False)
A:sympy.core.tests.test_args.c->ComplexSpace(2)
A:sympy.core.tests.test_args.f->NamedMorphism(A, B, 'f')
A:sympy.core.tests.test_args.b->Bra('b')
A:sympy.core.tests.test_args.k->symbols('k', integer=True)
A:sympy.core.tests.test_args.(j, m, j1, j2, j3, j12, x)->symbols('j m j1:4 j12 x')
A:sympy.core.tests.test_args.g->NamedMorphism(B, C, 'g')
A:sympy.core.tests.test_args.length->Dimension(length=1)
A:sympy.core.tests.test_args.i->tensor_indices('i', Lorentz)
A:sympy.core.tests.test_args.Lorentz->TensorIndexType('Lorentz', dummy_fmt='L')
A:sympy.core.tests.test_args.sym->TensorSymmetry(get_symmetric_group_sgs(1))
A:sympy.core.tests.test_args.S1->TensorType([Lorentz], sym)
A:sympy.core.tests.test_args.(p, q)->S1('p,q')
A:sympy.core.tests.test_args.t1->p(a)
A:sympy.core.tests.test_args.t2->q(a)
A:sympy.core.tests.test_args.p->S1('p')
A:sympy.core.tests.test_args.(free, dum)->sympy.tensor.tensor.TIDS.free_dum_from_indices(a)
A:sympy.core.tests.test_args.cs->CoordSystem('name', Patch('name', Manifold('name', 3)))
A:sympy.core.tests.test_args.cs1->CoordSystem('name1', Patch('name', Manifold('name', 3)))
A:sympy.core.tests.test_args.v->BaseVectorField(cs, 0)
A:sympy.core.tests.test_args.v1->BaseVectorField(cs1, 0)
A:sympy.core.tests.test_args.d->Diagram([f])
A:sympy.core.tests.test_args.d1->Diagram([f, g])
A:sympy.core.tests.test_args.C->CoordSysCartesian('C')
A:sympy.core.tests.test_args.d2->Diagram([f])
A:sympy.core.tests.test_args.K->Category('K', commutative_diagrams=[d1, d2])
A:sympy.core.tests.test_args.t->divisor_sigma(n, k)
A:sympy.core.tests.test_args.n->symbols('n', integer=True)
A:sympy.core.tests.test_args.(A, f, phi)->symbols('A, f, phi')
A:sympy.core.tests.test_args.(a, b, c, d)->symbols('a b c d')
sympy.core.tests.test_args._test_args(obj)
sympy.core.tests.test_args.test_all_classes_are_tested()
sympy.core.tests.test_args.test_as_coeff_add()
sympy.core.tests.test_args.test_sympy__assumptions__assume__AppliedPredicate()
sympy.core.tests.test_args.test_sympy__assumptions__assume__Predicate()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Category()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Class()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__CompositeMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Diagram()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__IdentityMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Morphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__NamedMorphism()
sympy.core.tests.test_args.test_sympy__categories__baseclasses__Object()
sympy.core.tests.test_args.test_sympy__combinatorics__graycode__GrayCode()
sympy.core.tests.test_args.test_sympy__combinatorics__partitions__IntegerPartition()
sympy.core.tests.test_args.test_sympy__combinatorics__partitions__Partition()
sympy.core.tests.test_args.test_sympy__combinatorics__perm_groups__PermutationGroup()
sympy.core.tests.test_args.test_sympy__combinatorics__permutations__Permutation()
sympy.core.tests.test_args.test_sympy__combinatorics__polyhedron__Polyhedron()
sympy.core.tests.test_args.test_sympy__combinatorics__prufer__Prufer()
sympy.core.tests.test_args.test_sympy__combinatorics__subsets__Subset()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_intlimits__ExprWithIntLimits()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_limits__AddWithLimits()
sympy.core.tests.test_args.test_sympy__concrete__expr_with_limits__ExprWithLimits()
sympy.core.tests.test_args.test_sympy__concrete__products__Product()
sympy.core.tests.test_args.test_sympy__concrete__summations__Sum()
sympy.core.tests.test_args.test_sympy__core__add__Add()
sympy.core.tests.test_args.test_sympy__core__basic__Atom()
sympy.core.tests.test_args.test_sympy__core__basic__Basic()
sympy.core.tests.test_args.test_sympy__core__containers__Dict()
sympy.core.tests.test_args.test_sympy__core__containers__Tuple()
sympy.core.tests.test_args.test_sympy__core__expr__AtomicExpr()
sympy.core.tests.test_args.test_sympy__core__expr__Expr()
sympy.core.tests.test_args.test_sympy__core__function__Application()
sympy.core.tests.test_args.test_sympy__core__function__AppliedUndef()
sympy.core.tests.test_args.test_sympy__core__function__Derivative()
sympy.core.tests.test_args.test_sympy__core__function__Function()
sympy.core.tests.test_args.test_sympy__core__function__Lambda()
sympy.core.tests.test_args.test_sympy__core__function__Subs()
sympy.core.tests.test_args.test_sympy__core__function__WildFunction()
sympy.core.tests.test_args.test_sympy__core__mod__Mod()
sympy.core.tests.test_args.test_sympy__core__mul__Mul()
sympy.core.tests.test_args.test_sympy__core__numbers__AlgebraicNumber()
sympy.core.tests.test_args.test_sympy__core__numbers__Catalan()
sympy.core.tests.test_args.test_sympy__core__numbers__ComplexInfinity()
sympy.core.tests.test_args.test_sympy__core__numbers__EulerGamma()
sympy.core.tests.test_args.test_sympy__core__numbers__Exp1()
sympy.core.tests.test_args.test_sympy__core__numbers__Float()
sympy.core.tests.test_args.test_sympy__core__numbers__GoldenRatio()
sympy.core.tests.test_args.test_sympy__core__numbers__Half()
sympy.core.tests.test_args.test_sympy__core__numbers__ImaginaryUnit()
sympy.core.tests.test_args.test_sympy__core__numbers__Infinity()
sympy.core.tests.test_args.test_sympy__core__numbers__Integer()
sympy.core.tests.test_args.test_sympy__core__numbers__IntegerConstant()
sympy.core.tests.test_args.test_sympy__core__numbers__NaN()
sympy.core.tests.test_args.test_sympy__core__numbers__NegativeInfinity()
sympy.core.tests.test_args.test_sympy__core__numbers__NegativeOne()
sympy.core.tests.test_args.test_sympy__core__numbers__Number()
sympy.core.tests.test_args.test_sympy__core__numbers__NumberSymbol()
sympy.core.tests.test_args.test_sympy__core__numbers__One()
sympy.core.tests.test_args.test_sympy__core__numbers__Pi()
sympy.core.tests.test_args.test_sympy__core__numbers__Rational()
sympy.core.tests.test_args.test_sympy__core__numbers__RationalConstant()
sympy.core.tests.test_args.test_sympy__core__numbers__Zero()
sympy.core.tests.test_args.test_sympy__core__operations__AssocOp()
sympy.core.tests.test_args.test_sympy__core__operations__LatticeOp()
sympy.core.tests.test_args.test_sympy__core__power__Pow()
sympy.core.tests.test_args.test_sympy__core__relational__Equality()
sympy.core.tests.test_args.test_sympy__core__relational__GreaterThan()
sympy.core.tests.test_args.test_sympy__core__relational__LessThan()
sympy.core.tests.test_args.test_sympy__core__relational__Relational()
sympy.core.tests.test_args.test_sympy__core__relational__StrictGreaterThan()
sympy.core.tests.test_args.test_sympy__core__relational__StrictLessThan()
sympy.core.tests.test_args.test_sympy__core__relational__Unequality()
sympy.core.tests.test_args.test_sympy__core__symbol__Dummy()
sympy.core.tests.test_args.test_sympy__core__symbol__Symbol()
sympy.core.tests.test_args.test_sympy__core__symbol__Wild()
sympy.core.tests.test_args.test_sympy__core__trace__Tr()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseCovarDerivativeOp()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseScalarField()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__BaseVectorField()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Commutator()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__CoordSystem()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__CovarDerivativeOp()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Differential()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__LieDerivative()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Manifold()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Patch()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__Point()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__TensorProduct()
sympy.core.tests.test_args.test_sympy__diffgeom__diffgeom__WedgeProduct()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__CombinatorialFunction()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__FallingFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__MultiFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__RisingFactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__binomial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial2()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__factorials__subfactorial()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__bell()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__bernoulli()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__catalan()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__euler()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__fibonacci()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__harmonic()
sympy.core.tests.test_args.test_sympy__functions__combinatorial__numbers__lucas()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__Abs()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__adjoint()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__arg()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__conjugate()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__im()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__periodic_argument()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__polar_lift()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__principal_branch()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__re()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__sign()
sympy.core.tests.test_args.test_sympy__functions__elementary__complexes__transpose()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__ExpBase()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__LambertW()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__exp()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__exp_polar()
sympy.core.tests.test_args.test_sympy__functions__elementary__exponential__log()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__HyperbolicFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__acosh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__acoth()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__asinh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__atanh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__cosh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__coth()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__sinh()
sympy.core.tests.test_args.test_sympy__functions__elementary__hyperbolic__tanh()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__RoundFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__ceiling()
sympy.core.tests.test_args.test_sympy__functions__elementary__integers__floor()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__IdentityFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__Max()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__Min()
sympy.core.tests.test_args.test_sympy__functions__elementary__miscellaneous__MinMaxBase()
sympy.core.tests.test_args.test_sympy__functions__elementary__piecewise__ExprCondPair()
sympy.core.tests.test_args.test_sympy__functions__elementary__piecewise__Piecewise()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__InverseTrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__ReciprocalTrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__TrigonometricFunction()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acos()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acot()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__acsc()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__asec()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__asin()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__atan()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__atan2()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__cos()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__cot()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__csc()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__sec()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__sin()
sympy.core.tests.test_args.test_sympy__functions__elementary__trigonometric__tan()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__AiryBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__BesselBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__SphericalBesselBase()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airyai()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airyaiprime()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airybi()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__airybiprime()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besseli()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besselj()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__besselk()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__bessely()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hankel1()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__hankel2()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__jn()
sympy.core.tests.test_args.test_sympy__functions__special__bessel__yn()
sympy.core.tests.test_args.test_sympy__functions__special__beta_functions__beta()
sympy.core.tests.test_args.test_sympy__functions__special__delta_functions__DiracDelta()
sympy.core.tests.test_args.test_sympy__functions__special__delta_functions__Heaviside()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_e()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_f()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_k()
sympy.core.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_pi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Chi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Ci()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Ei()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__FresnelIntegral()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Li()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Shi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__Si()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__TrigonometricIntegral()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf2()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erf2inv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfc()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfcinv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfi()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfinv()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__erfs()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__expint()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__fresnelc()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__fresnels()
sympy.core.tests.test_args.test_sympy__functions__special__error_functions__li()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__gamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__loggamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__lowergamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__polygamma()
sympy.core.tests.test_args.test_sympy__functions__special__gamma_functions__uppergamma()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_atanh()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_cosasin()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sinasin()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts1()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts2()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__TupleArg()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__TupleParametersBase()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__hyper()
sympy.core.tests.test_args.test_sympy__functions__special__hyper__meijerg()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__OrthogonalPolynomial()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__assoc_laguerre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__assoc_legendre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt_root()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu_root()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__gegenbauer()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__hermite()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__jacobi()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__laguerre()
sympy.core.tests.test_args.test_sympy__functions__special__polynomials__legendre()
sympy.core.tests.test_args.test_sympy__functions__special__spherical_harmonics__Ynm()
sympy.core.tests.test_args.test_sympy__functions__special__spherical_harmonics__Znm()
sympy.core.tests.test_args.test_sympy__functions__special__tensor_functions__KroneckerDelta()
sympy.core.tests.test_args.test_sympy__functions__special__tensor_functions__LeviCivita()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__dirichlet_eta()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__lerchphi()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__polylog()
sympy.core.tests.test_args.test_sympy__functions__special__zeta_functions__zeta()
sympy.core.tests.test_args.test_sympy__geometry__curve__Curve()
sympy.core.tests.test_args.test_sympy__geometry__ellipse__Circle()
sympy.core.tests.test_args.test_sympy__geometry__ellipse__Ellipse()
sympy.core.tests.test_args.test_sympy__geometry__entity__GeometryEntity()
sympy.core.tests.test_args.test_sympy__geometry__line3d__Line3D()
sympy.core.tests.test_args.test_sympy__geometry__line3d__LinearEntity3D()
sympy.core.tests.test_args.test_sympy__geometry__line3d__Ray3D()
sympy.core.tests.test_args.test_sympy__geometry__line3d__Segment3D()
sympy.core.tests.test_args.test_sympy__geometry__line__Line()
sympy.core.tests.test_args.test_sympy__geometry__line__LinearEntity()
sympy.core.tests.test_args.test_sympy__geometry__line__Ray()
sympy.core.tests.test_args.test_sympy__geometry__line__Segment()
sympy.core.tests.test_args.test_sympy__geometry__plane__Plane()
sympy.core.tests.test_args.test_sympy__geometry__point3d__Point3D()
sympy.core.tests.test_args.test_sympy__geometry__point__Point()
sympy.core.tests.test_args.test_sympy__geometry__polygon__Polygon()
sympy.core.tests.test_args.test_sympy__geometry__polygon__RegularPolygon()
sympy.core.tests.test_args.test_sympy__geometry__polygon__Triangle()
sympy.core.tests.test_args.test_sympy__integrals__integrals__Integral()
sympy.core.tests.test_args.test_sympy__integrals__risch__NonElementaryIntegral()
sympy.core.tests.test_args.test_sympy__integrals__transforms__CosineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__FourierTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__FourierTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__HankelTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__HankelTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__IntegralTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseCosineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseFourierTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseHankelTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseLaplaceTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseMellinTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__InverseSineTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__LaplaceTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__MellinTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__SineCosineTypeTransform()
sympy.core.tests.test_args.test_sympy__integrals__transforms__SineTransform()
sympy.core.tests.test_args.test_sympy__liealgebras__cartan_type__CartanType_generator()
sympy.core.tests.test_args.test_sympy__liealgebras__cartan_type__Standard_Cartan()
sympy.core.tests.test_args.test_sympy__liealgebras__root_system__RootSystem()
sympy.core.tests.test_args.test_sympy__liealgebras__type_a__TypeA()
sympy.core.tests.test_args.test_sympy__liealgebras__type_b__TypeB()
sympy.core.tests.test_args.test_sympy__liealgebras__type_c__TypeC()
sympy.core.tests.test_args.test_sympy__liealgebras__type_d__TypeD()
sympy.core.tests.test_args.test_sympy__liealgebras__type_e__TypeE()
sympy.core.tests.test_args.test_sympy__liealgebras__type_f__TypeF()
sympy.core.tests.test_args.test_sympy__liealgebras__type_g__TypeG()
sympy.core.tests.test_args.test_sympy__liealgebras__weyl_group__WeylGroup()
sympy.core.tests.test_args.test_sympy__logic__boolalg__And()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Boolean()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanAtom()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanFalse()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanFunction()
sympy.core.tests.test_args.test_sympy__logic__boolalg__BooleanTrue()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Equivalent()
sympy.core.tests.test_args.test_sympy__logic__boolalg__ITE()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Implies()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Nand()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Nor()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Not()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Or()
sympy.core.tests.test_args.test_sympy__logic__boolalg__Xor()
sympy.core.tests.test_args.test_sympy__matrices__expressions__adjoint__Adjoint()
sympy.core.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockDiagMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__determinant__Determinant()
sympy.core.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalOf()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenValues()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenVectors()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__Factorization()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__LofCholesky()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__LofLU()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__QofQR()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__RofQR()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__SofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofCholesky()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofLU()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__UofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__factorizations__VofSVD()
sympy.core.tests.test_args.test_sympy__matrices__expressions__fourier__DFT()
sympy.core.tests.test_args.test_sympy__matrices__expressions__fourier__IDFT()
sympy.core.tests.test_args.test_sympy__matrices__expressions__funcmatrix__FunctionMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__hadamard__HadamardProduct()
sympy.core.tests.test_args.test_sympy__matrices__expressions__inverse__Inverse()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matadd__MatAdd()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__Identity()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixBase()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixElement()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixExpr()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixSymbol()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matexpr__ZeroMatrix()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matmul__MatMul()
sympy.core.tests.test_args.test_sympy__matrices__expressions__matpow__MatPow()
sympy.core.tests.test_args.test_sympy__matrices__expressions__slice__MatrixSlice()
sympy.core.tests.test_args.test_sympy__matrices__expressions__trace__Trace()
sympy.core.tests.test_args.test_sympy__matrices__expressions__transpose__Transpose()
sympy.core.tests.test_args.test_sympy__matrices__immutable__ImmutableMatrix()
sympy.core.tests.test_args.test_sympy__matrices__immutable__ImmutableSparseMatrix()
sympy.core.tests.test_args.test_sympy__matrices__matrices__DeferredVector()
sympy.core.tests.test_args.test_sympy__ntheory__factor___divisor_sigma()
sympy.core.tests.test_args.test_sympy__ntheory__factor___totient()
sympy.core.tests.test_args.test_sympy__ntheory__residue_ntheory__mobius()
sympy.core.tests.test_args.test_sympy__physics__hep__gamma_matrices__GammaMatrixHead()
sympy.core.tests.test_args.test_sympy__physics__optics__gaussopt__BeamParameter()
sympy.core.tests.test_args.test_sympy__physics__optics__medium__Medium()
sympy.core.tests.test_args.test_sympy__physics__optics__waves__TWave()
sympy.core.tests.test_args.test_sympy__physics__paulialgebra__Pauli()
sympy.core.tests.test_args.test_sympy__physics__quantum__anticommutator__AntiCommutator()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonFockBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonFockKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__boson__BosonOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionBra3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionKet3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PositionState3D()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__PxOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__XOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__YOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cartesian__ZOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__CG()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner3j()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner6j()
sympy.core.tests.test_args.test_sympy__physics__quantum__cg__Wigner9j()
sympy.core.tests.test_args.test_sympy__physics__quantum__circuitplot__Mx()
sympy.core.tests.test_args.test_sympy__physics__quantum__circuitplot__Mz()
sympy.core.tests.test_args.test_sympy__physics__quantum__commutator__Commutator()
sympy.core.tests.test_args.test_sympy__physics__quantum__constants__HBar()
sympy.core.tests.test_args.test_sympy__physics__quantum__dagger__Dagger()
sympy.core.tests.test_args.test_sympy__physics__quantum__density__Density()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__fermion__FermionOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CGateS()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__CNotGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__Gate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__HadamardGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__IdentityGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__OneQubitGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__PhaseGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__SwapGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__TGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__TwoQubitGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__UGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__XGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__YGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__gate__ZGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__grover__OracleGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__grover__WGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__ComplexSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__DirectSumHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__FockSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__HilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__L2()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__TensorPowerHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__hilbert__TensorProductHilbertSpace()
sympy.core.tests.test_args.test_sympy__physics__quantum__identitysearch__GateIdentity()
sympy.core.tests.test_args.test_sympy__physics__quantum__innerproduct__InnerProduct()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__DifferentialOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__HermitianOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__IdentityOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__Operator()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__OuterProduct()
sympy.core.tests.test_args.test_sympy__physics__quantum__operator__UnitaryOperator()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaMinus()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaOpBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaPlus()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaX()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaY()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZ()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABHamiltonian()
sympy.core.tests.test_args.test_sympy__physics__quantum__piab__PIABKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__qexpr__QExpr()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__Fourier()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__IQFT()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__QFT()
sympy.core.tests.test_args.test_sympy__physics__quantum__qft__RkGate()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubit()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitState()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__Qubit()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__QubitBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__qubit__QubitState()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__Hamiltonian()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__LoweringOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__NumberOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__RaisingOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__sho1d__SHOState()
sympy.core.tests.test_args.test_sympy__physics__quantum__shor__CMod()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__CoupledSpinState()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__J2Op()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JminusOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JplusOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JxOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JyOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzBraCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzKetCoupled()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__JzOp()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__Rotation()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__SpinState()
sympy.core.tests.test_args.test_sympy__physics__quantum__spin__WignerD()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Bra()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__BraBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Ket()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__KetBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__State()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__StateBase()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepBra()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepKet()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__TimeDepState()
sympy.core.tests.test_args.test_sympy__physics__quantum__state__Wavefunction()
sympy.core.tests.test_args.test_sympy__physics__quantum__tensorproduct__TensorProduct()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AnnihilateBoson()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AnnihilateFermion()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Annihilator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__AntiSymmetricTensor()
sympy.core.tests.test_args.test_sympy__physics__secondquant__BosonState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__BosonicOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Commutator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__CreateBoson()
sympy.core.tests.test_args.test_sympy__physics__secondquant__CreateFermion()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Creator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__Dagger()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FermionState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FermionicOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockState()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBosonBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBosonKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateFermionBra()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateFermionKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__FockStateKet()
sympy.core.tests.test_args.test_sympy__physics__secondquant__InnerProduct()
sympy.core.tests.test_args.test_sympy__physics__secondquant__NO()
sympy.core.tests.test_args.test_sympy__physics__secondquant__PermutationOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__SqOperator()
sympy.core.tests.test_args.test_sympy__physics__secondquant__TensorSymbol()
sympy.core.tests.test_args.test_sympy__physics__units__Unit()
sympy.core.tests.test_args.test_sympy__physics__unitsystems__dimensions__Dimension()
sympy.core.tests.test_args.test_sympy__physics__unitsystems__quantities__Quantity()
sympy.core.tests.test_args.test_sympy__physics__unitsystems__units__Constant()
sympy.core.tests.test_args.test_sympy__physics__unitsystems__units__Unit()
sympy.core.tests.test_args.test_sympy__physics__vector__frame__CoordinateSym()
sympy.core.tests.test_args.test_sympy__polys__polytools__GroebnerBasis()
sympy.core.tests.test_args.test_sympy__polys__polytools__Poly()
sympy.core.tests.test_args.test_sympy__polys__polytools__PurePoly()
sympy.core.tests.test_args.test_sympy__polys__rootoftools__RootOf()
sympy.core.tests.test_args.test_sympy__polys__rootoftools__RootSum()
sympy.core.tests.test_args.test_sympy__printing__codeprinter__Assignment()
sympy.core.tests.test_args.test_sympy__series__limits__Limit()
sympy.core.tests.test_args.test_sympy__series__order__Order()
sympy.core.tests.test_args.test_sympy__sets__contains__Contains()
sympy.core.tests.test_args.test_sympy__sets__fancysets__ImageSet()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Integers()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Naturals()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Naturals0()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Range()
sympy.core.tests.test_args.test_sympy__sets__fancysets__Reals()
sympy.core.tests.test_args.test_sympy__sets__sets__Complement()
sympy.core.tests.test_args.test_sympy__sets__sets__EmptySet()
sympy.core.tests.test_args.test_sympy__sets__sets__FiniteSet()
sympy.core.tests.test_args.test_sympy__sets__sets__Intersection()
sympy.core.tests.test_args.test_sympy__sets__sets__Interval()
sympy.core.tests.test_args.test_sympy__sets__sets__ProductSet()
sympy.core.tests.test_args.test_sympy__sets__sets__Set()
sympy.core.tests.test_args.test_sympy__sets__sets__Union()
sympy.core.tests.test_args.test_sympy__sets__sets__UniversalSet()
sympy.core.tests.test_args.test_sympy__simplify__hyperexpand__G_Function()
sympy.core.tests.test_args.test_sympy__simplify__hyperexpand__Hyper_Function()
sympy.core.tests.test_args.test_sympy__stats__crv__ConditionalContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__ContinuousPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv__ProductContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__ProductContinuousPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousDomain()
sympy.core.tests.test_args.test_sympy__stats__crv__SingleContinuousPSpace()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ArcsinDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BeniniDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BetaDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__BetaPrimeDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__CauchyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiNoncentralDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ChiSquaredDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__DagumDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ExponentialDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FDistributionDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FisherZDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__FrechetDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GammaDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__GammaInverseDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__KumaraswamyDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LaplaceDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogNormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__LogisticDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__MaxwellDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__NakagamiDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__NormalDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__ParetoDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__QuadraticUDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__RaisedCosineDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__RayleighDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__StudentTDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__TriangularDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__UniformDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__UniformSumDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__VonMisesDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__WeibullDistribution()
sympy.core.tests.test_args.test_sympy__stats__crv_types__WignerSemicircleDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscreteDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscreteDomain()
sympy.core.tests.test_args.test_sympy__stats__drv__SingleDiscretePSpace()
sympy.core.tests.test_args.test_sympy__stats__drv_types__GeometricDistribution()
sympy.core.tests.test_args.test_sympy__stats__drv_types__PoissonDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv__ConditionalFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__FiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__FinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv__ProductFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__ProductFinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFiniteDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFiniteDomain()
sympy.core.tests.test_args.test_sympy__stats__frv__SingleFinitePSpace()
sympy.core.tests.test_args.test_sympy__stats__frv_types__BernoulliDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__BinomialDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__DieDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__DiscreteUniformDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__FiniteDistributionHandmade()
sympy.core.tests.test_args.test_sympy__stats__frv_types__HypergeometricDistribution()
sympy.core.tests.test_args.test_sympy__stats__frv_types__RademacherDistribution()
sympy.core.tests.test_args.test_sympy__stats__rv__ConditionalDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__Density()
sympy.core.tests.test_args.test_sympy__stats__rv__PSpace()
sympy.core.tests.test_args.test_sympy__stats__rv__ProductDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__ProductPSpace()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__RandomSymbol()
sympy.core.tests.test_args.test_sympy__stats__rv__SingleDomain()
sympy.core.tests.test_args.test_sympy__stats__rv__SinglePSpace()
sympy.core.tests.test_args.test_sympy__tensor__indexed__Idx()
sympy.core.tests.test_args.test_sympy__tensor__indexed__Indexed()
sympy.core.tests.test_args.test_sympy__tensor__indexed__IndexedBase()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensAdd()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensExpr()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensMul()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorHead()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorIndex()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorIndexType()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorSymmetry()
sympy.core.tests.test_args.test_sympy__tensor__tensor__TensorType()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependent()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentAdd()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentMul()
sympy.core.tests.test_args.test_sympy__vector__basisdependent__BasisDependentZero()
sympy.core.tests.test_args.test_sympy__vector__coordsysrect__CoordSysCartesian()
sympy.core.tests.test_args.test_sympy__vector__deloperator__Del()
sympy.core.tests.test_args.test_sympy__vector__dyadic__BaseDyadic()
sympy.core.tests.test_args.test_sympy__vector__dyadic__Dyadic()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicAdd()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicMul()
sympy.core.tests.test_args.test_sympy__vector__dyadic__DyadicZero()
sympy.core.tests.test_args.test_sympy__vector__orienters__AxisOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__BodyOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__Orienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__QuaternionOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__SpaceOrienter()
sympy.core.tests.test_args.test_sympy__vector__orienters__ThreeAngleOrienter()
sympy.core.tests.test_args.test_sympy__vector__point__Point()
sympy.core.tests.test_args.test_sympy__vector__scalar__BaseScalar()
sympy.core.tests.test_args.test_sympy__vector__vector__BaseVector()
sympy.core.tests.test_args.test_sympy__vector__vector__Vector()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorAdd()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorMul()
sympy.core.tests.test_args.test_sympy__vector__vector__VectorZero()
sympy.tests.test_args._test_args(obj)
sympy.tests.test_args.test_all_classes_are_tested()
sympy.tests.test_args.test_as_coeff_add()
sympy.tests.test_args.test_sympy__assumptions__assume__AppliedPredicate()
sympy.tests.test_args.test_sympy__assumptions__assume__Predicate()
sympy.tests.test_args.test_sympy__categories__baseclasses__Category()
sympy.tests.test_args.test_sympy__categories__baseclasses__Class()
sympy.tests.test_args.test_sympy__categories__baseclasses__CompositeMorphism()
sympy.tests.test_args.test_sympy__categories__baseclasses__Diagram()
sympy.tests.test_args.test_sympy__categories__baseclasses__IdentityMorphism()
sympy.tests.test_args.test_sympy__categories__baseclasses__Morphism()
sympy.tests.test_args.test_sympy__categories__baseclasses__NamedMorphism()
sympy.tests.test_args.test_sympy__categories__baseclasses__Object()
sympy.tests.test_args.test_sympy__combinatorics__graycode__GrayCode()
sympy.tests.test_args.test_sympy__combinatorics__partitions__IntegerPartition()
sympy.tests.test_args.test_sympy__combinatorics__partitions__Partition()
sympy.tests.test_args.test_sympy__combinatorics__perm_groups__PermutationGroup()
sympy.tests.test_args.test_sympy__combinatorics__permutations__Permutation()
sympy.tests.test_args.test_sympy__combinatorics__polyhedron__Polyhedron()
sympy.tests.test_args.test_sympy__combinatorics__prufer__Prufer()
sympy.tests.test_args.test_sympy__combinatorics__subsets__Subset()
sympy.tests.test_args.test_sympy__concrete__expr_with_intlimits__ExprWithIntLimits()
sympy.tests.test_args.test_sympy__concrete__expr_with_limits__AddWithLimits()
sympy.tests.test_args.test_sympy__concrete__expr_with_limits__ExprWithLimits()
sympy.tests.test_args.test_sympy__concrete__products__Product()
sympy.tests.test_args.test_sympy__concrete__summations__Sum()
sympy.tests.test_args.test_sympy__core__add__Add()
sympy.tests.test_args.test_sympy__core__basic__Atom()
sympy.tests.test_args.test_sympy__core__basic__Basic()
sympy.tests.test_args.test_sympy__core__containers__Dict()
sympy.tests.test_args.test_sympy__core__containers__Tuple()
sympy.tests.test_args.test_sympy__core__expr__AtomicExpr()
sympy.tests.test_args.test_sympy__core__expr__Expr()
sympy.tests.test_args.test_sympy__core__function__Application()
sympy.tests.test_args.test_sympy__core__function__AppliedUndef()
sympy.tests.test_args.test_sympy__core__function__Derivative()
sympy.tests.test_args.test_sympy__core__function__Function()
sympy.tests.test_args.test_sympy__core__function__Lambda()
sympy.tests.test_args.test_sympy__core__function__Subs()
sympy.tests.test_args.test_sympy__core__function__WildFunction()
sympy.tests.test_args.test_sympy__core__mod__Mod()
sympy.tests.test_args.test_sympy__core__mul__Mul()
sympy.tests.test_args.test_sympy__core__numbers__AlgebraicNumber()
sympy.tests.test_args.test_sympy__core__numbers__Catalan()
sympy.tests.test_args.test_sympy__core__numbers__ComplexInfinity()
sympy.tests.test_args.test_sympy__core__numbers__EulerGamma()
sympy.tests.test_args.test_sympy__core__numbers__Exp1()
sympy.tests.test_args.test_sympy__core__numbers__Float()
sympy.tests.test_args.test_sympy__core__numbers__GoldenRatio()
sympy.tests.test_args.test_sympy__core__numbers__Half()
sympy.tests.test_args.test_sympy__core__numbers__ImaginaryUnit()
sympy.tests.test_args.test_sympy__core__numbers__Infinity()
sympy.tests.test_args.test_sympy__core__numbers__Integer()
sympy.tests.test_args.test_sympy__core__numbers__IntegerConstant()
sympy.tests.test_args.test_sympy__core__numbers__NaN()
sympy.tests.test_args.test_sympy__core__numbers__NegativeInfinity()
sympy.tests.test_args.test_sympy__core__numbers__NegativeOne()
sympy.tests.test_args.test_sympy__core__numbers__Number()
sympy.tests.test_args.test_sympy__core__numbers__NumberSymbol()
sympy.tests.test_args.test_sympy__core__numbers__One()
sympy.tests.test_args.test_sympy__core__numbers__Pi()
sympy.tests.test_args.test_sympy__core__numbers__Rational()
sympy.tests.test_args.test_sympy__core__numbers__RationalConstant()
sympy.tests.test_args.test_sympy__core__numbers__Zero()
sympy.tests.test_args.test_sympy__core__operations__AssocOp()
sympy.tests.test_args.test_sympy__core__operations__LatticeOp()
sympy.tests.test_args.test_sympy__core__power__Pow()
sympy.tests.test_args.test_sympy__core__relational__Equality()
sympy.tests.test_args.test_sympy__core__relational__GreaterThan()
sympy.tests.test_args.test_sympy__core__relational__LessThan()
sympy.tests.test_args.test_sympy__core__relational__Relational()
sympy.tests.test_args.test_sympy__core__relational__StrictGreaterThan()
sympy.tests.test_args.test_sympy__core__relational__StrictLessThan()
sympy.tests.test_args.test_sympy__core__relational__Unequality()
sympy.tests.test_args.test_sympy__core__symbol__Dummy()
sympy.tests.test_args.test_sympy__core__symbol__Symbol()
sympy.tests.test_args.test_sympy__core__symbol__Wild()
sympy.tests.test_args.test_sympy__core__trace__Tr()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__BaseCovarDerivativeOp()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__BaseScalarField()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__BaseVectorField()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__Commutator()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__CoordSystem()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__CovarDerivativeOp()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__Differential()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__LieDerivative()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__Manifold()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__Patch()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__Point()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__TensorProduct()
sympy.tests.test_args.test_sympy__diffgeom__diffgeom__WedgeProduct()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__CombinatorialFunction()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__FallingFactorial()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__MultiFactorial()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__RisingFactorial()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__binomial()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__factorial2()
sympy.tests.test_args.test_sympy__functions__combinatorial__factorials__subfactorial()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__bell()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__bernoulli()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__catalan()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__euler()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__fibonacci()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__harmonic()
sympy.tests.test_args.test_sympy__functions__combinatorial__numbers__lucas()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__Abs()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__adjoint()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__arg()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__conjugate()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__im()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__periodic_argument()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__polar_lift()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__principal_branch()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__re()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__sign()
sympy.tests.test_args.test_sympy__functions__elementary__complexes__transpose()
sympy.tests.test_args.test_sympy__functions__elementary__exponential__ExpBase()
sympy.tests.test_args.test_sympy__functions__elementary__exponential__LambertW()
sympy.tests.test_args.test_sympy__functions__elementary__exponential__exp()
sympy.tests.test_args.test_sympy__functions__elementary__exponential__exp_polar()
sympy.tests.test_args.test_sympy__functions__elementary__exponential__log()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__HyperbolicFunction()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__acosh()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__acoth()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__asinh()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__atanh()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__cosh()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__coth()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__sinh()
sympy.tests.test_args.test_sympy__functions__elementary__hyperbolic__tanh()
sympy.tests.test_args.test_sympy__functions__elementary__integers__RoundFunction()
sympy.tests.test_args.test_sympy__functions__elementary__integers__ceiling()
sympy.tests.test_args.test_sympy__functions__elementary__integers__floor()
sympy.tests.test_args.test_sympy__functions__elementary__miscellaneous__IdentityFunction()
sympy.tests.test_args.test_sympy__functions__elementary__miscellaneous__Max()
sympy.tests.test_args.test_sympy__functions__elementary__miscellaneous__Min()
sympy.tests.test_args.test_sympy__functions__elementary__miscellaneous__MinMaxBase()
sympy.tests.test_args.test_sympy__functions__elementary__piecewise__ExprCondPair()
sympy.tests.test_args.test_sympy__functions__elementary__piecewise__Piecewise()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__InverseTrigonometricFunction()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__ReciprocalTrigonometricFunction()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__TrigonometricFunction()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__acos()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__acot()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__acsc()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__asec()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__asin()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__atan()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__atan2()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__cos()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__cot()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__csc()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__sec()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__sin()
sympy.tests.test_args.test_sympy__functions__elementary__trigonometric__tan()
sympy.tests.test_args.test_sympy__functions__special__bessel__AiryBase()
sympy.tests.test_args.test_sympy__functions__special__bessel__BesselBase()
sympy.tests.test_args.test_sympy__functions__special__bessel__SphericalBesselBase()
sympy.tests.test_args.test_sympy__functions__special__bessel__airyai()
sympy.tests.test_args.test_sympy__functions__special__bessel__airyaiprime()
sympy.tests.test_args.test_sympy__functions__special__bessel__airybi()
sympy.tests.test_args.test_sympy__functions__special__bessel__airybiprime()
sympy.tests.test_args.test_sympy__functions__special__bessel__besseli()
sympy.tests.test_args.test_sympy__functions__special__bessel__besselj()
sympy.tests.test_args.test_sympy__functions__special__bessel__besselk()
sympy.tests.test_args.test_sympy__functions__special__bessel__bessely()
sympy.tests.test_args.test_sympy__functions__special__bessel__hankel1()
sympy.tests.test_args.test_sympy__functions__special__bessel__hankel2()
sympy.tests.test_args.test_sympy__functions__special__bessel__jn()
sympy.tests.test_args.test_sympy__functions__special__bessel__yn()
sympy.tests.test_args.test_sympy__functions__special__beta_functions__beta()
sympy.tests.test_args.test_sympy__functions__special__delta_functions__DiracDelta()
sympy.tests.test_args.test_sympy__functions__special__delta_functions__Heaviside()
sympy.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_e()
sympy.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_f()
sympy.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_k()
sympy.tests.test_args.test_sympy__functions__special__elliptic_integrals__elliptic_pi()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Chi()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Ci()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Ei()
sympy.tests.test_args.test_sympy__functions__special__error_functions__FresnelIntegral()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Li()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Shi()
sympy.tests.test_args.test_sympy__functions__special__error_functions__Si()
sympy.tests.test_args.test_sympy__functions__special__error_functions__TrigonometricIntegral()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erf()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erf2()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erf2inv()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erfc()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erfcinv()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erfi()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erfinv()
sympy.tests.test_args.test_sympy__functions__special__error_functions__erfs()
sympy.tests.test_args.test_sympy__functions__special__error_functions__expint()
sympy.tests.test_args.test_sympy__functions__special__error_functions__fresnelc()
sympy.tests.test_args.test_sympy__functions__special__error_functions__fresnels()
sympy.tests.test_args.test_sympy__functions__special__error_functions__li()
sympy.tests.test_args.test_sympy__functions__special__gamma_functions__gamma()
sympy.tests.test_args.test_sympy__functions__special__gamma_functions__loggamma()
sympy.tests.test_args.test_sympy__functions__special__gamma_functions__lowergamma()
sympy.tests.test_args.test_sympy__functions__special__gamma_functions__polygamma()
sympy.tests.test_args.test_sympy__functions__special__gamma_functions__uppergamma()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin1()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_asin2()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_atanh()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_cosasin()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log1()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_log2()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power1()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_power2()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sinasin()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts1()
sympy.tests.test_args.test_sympy__functions__special__hyper__HyperRep_sqrts2()
sympy.tests.test_args.test_sympy__functions__special__hyper__TupleArg()
sympy.tests.test_args.test_sympy__functions__special__hyper__TupleParametersBase()
sympy.tests.test_args.test_sympy__functions__special__hyper__hyper()
sympy.tests.test_args.test_sympy__functions__special__hyper__meijerg()
sympy.tests.test_args.test_sympy__functions__special__polynomials__OrthogonalPolynomial()
sympy.tests.test_args.test_sympy__functions__special__polynomials__assoc_laguerre()
sympy.tests.test_args.test_sympy__functions__special__polynomials__assoc_legendre()
sympy.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt()
sympy.tests.test_args.test_sympy__functions__special__polynomials__chebyshevt_root()
sympy.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu()
sympy.tests.test_args.test_sympy__functions__special__polynomials__chebyshevu_root()
sympy.tests.test_args.test_sympy__functions__special__polynomials__gegenbauer()
sympy.tests.test_args.test_sympy__functions__special__polynomials__hermite()
sympy.tests.test_args.test_sympy__functions__special__polynomials__jacobi()
sympy.tests.test_args.test_sympy__functions__special__polynomials__laguerre()
sympy.tests.test_args.test_sympy__functions__special__polynomials__legendre()
sympy.tests.test_args.test_sympy__functions__special__spherical_harmonics__Ynm()
sympy.tests.test_args.test_sympy__functions__special__spherical_harmonics__Znm()
sympy.tests.test_args.test_sympy__functions__special__tensor_functions__KroneckerDelta()
sympy.tests.test_args.test_sympy__functions__special__tensor_functions__LeviCivita()
sympy.tests.test_args.test_sympy__functions__special__zeta_functions__dirichlet_eta()
sympy.tests.test_args.test_sympy__functions__special__zeta_functions__lerchphi()
sympy.tests.test_args.test_sympy__functions__special__zeta_functions__polylog()
sympy.tests.test_args.test_sympy__functions__special__zeta_functions__zeta()
sympy.tests.test_args.test_sympy__geometry__curve__Curve()
sympy.tests.test_args.test_sympy__geometry__ellipse__Circle()
sympy.tests.test_args.test_sympy__geometry__ellipse__Ellipse()
sympy.tests.test_args.test_sympy__geometry__entity__GeometryEntity()
sympy.tests.test_args.test_sympy__geometry__line3d__Line3D()
sympy.tests.test_args.test_sympy__geometry__line3d__LinearEntity3D()
sympy.tests.test_args.test_sympy__geometry__line3d__Ray3D()
sympy.tests.test_args.test_sympy__geometry__line3d__Segment3D()
sympy.tests.test_args.test_sympy__geometry__line__Line()
sympy.tests.test_args.test_sympy__geometry__line__LinearEntity()
sympy.tests.test_args.test_sympy__geometry__line__Ray()
sympy.tests.test_args.test_sympy__geometry__line__Segment()
sympy.tests.test_args.test_sympy__geometry__plane__Plane()
sympy.tests.test_args.test_sympy__geometry__point3d__Point3D()
sympy.tests.test_args.test_sympy__geometry__point__Point()
sympy.tests.test_args.test_sympy__geometry__polygon__Polygon()
sympy.tests.test_args.test_sympy__geometry__polygon__RegularPolygon()
sympy.tests.test_args.test_sympy__geometry__polygon__Triangle()
sympy.tests.test_args.test_sympy__integrals__integrals__Integral()
sympy.tests.test_args.test_sympy__integrals__risch__NonElementaryIntegral()
sympy.tests.test_args.test_sympy__integrals__transforms__CosineTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__FourierTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__FourierTypeTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__HankelTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__HankelTypeTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__IntegralTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseCosineTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseFourierTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseHankelTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseLaplaceTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseMellinTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__InverseSineTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__LaplaceTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__MellinTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__SineCosineTypeTransform()
sympy.tests.test_args.test_sympy__integrals__transforms__SineTransform()
sympy.tests.test_args.test_sympy__liealgebras__cartan_type__CartanType_generator()
sympy.tests.test_args.test_sympy__liealgebras__cartan_type__Standard_Cartan()
sympy.tests.test_args.test_sympy__liealgebras__root_system__RootSystem()
sympy.tests.test_args.test_sympy__liealgebras__type_a__TypeA()
sympy.tests.test_args.test_sympy__liealgebras__type_b__TypeB()
sympy.tests.test_args.test_sympy__liealgebras__type_c__TypeC()
sympy.tests.test_args.test_sympy__liealgebras__type_d__TypeD()
sympy.tests.test_args.test_sympy__liealgebras__type_e__TypeE()
sympy.tests.test_args.test_sympy__liealgebras__type_f__TypeF()
sympy.tests.test_args.test_sympy__liealgebras__type_g__TypeG()
sympy.tests.test_args.test_sympy__liealgebras__weyl_group__WeylGroup()
sympy.tests.test_args.test_sympy__logic__boolalg__And()
sympy.tests.test_args.test_sympy__logic__boolalg__Boolean()
sympy.tests.test_args.test_sympy__logic__boolalg__BooleanAtom()
sympy.tests.test_args.test_sympy__logic__boolalg__BooleanFalse()
sympy.tests.test_args.test_sympy__logic__boolalg__BooleanFunction()
sympy.tests.test_args.test_sympy__logic__boolalg__BooleanTrue()
sympy.tests.test_args.test_sympy__logic__boolalg__Equivalent()
sympy.tests.test_args.test_sympy__logic__boolalg__ITE()
sympy.tests.test_args.test_sympy__logic__boolalg__Implies()
sympy.tests.test_args.test_sympy__logic__boolalg__Nand()
sympy.tests.test_args.test_sympy__logic__boolalg__Nor()
sympy.tests.test_args.test_sympy__logic__boolalg__Not()
sympy.tests.test_args.test_sympy__logic__boolalg__Or()
sympy.tests.test_args.test_sympy__logic__boolalg__Xor()
sympy.tests.test_args.test_sympy__matrices__expressions__adjoint__Adjoint()
sympy.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockDiagMatrix()
sympy.tests.test_args.test_sympy__matrices__expressions__blockmatrix__BlockMatrix()
sympy.tests.test_args.test_sympy__matrices__expressions__determinant__Determinant()
sympy.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalMatrix()
sympy.tests.test_args.test_sympy__matrices__expressions__diagonal__DiagonalOf()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenValues()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__EigenVectors()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__Factorization()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__LofCholesky()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__LofLU()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__QofQR()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__RofQR()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__SofSVD()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__UofCholesky()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__UofLU()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__UofSVD()
sympy.tests.test_args.test_sympy__matrices__expressions__factorizations__VofSVD()
sympy.tests.test_args.test_sympy__matrices__expressions__fourier__DFT()
sympy.tests.test_args.test_sympy__matrices__expressions__fourier__IDFT()
sympy.tests.test_args.test_sympy__matrices__expressions__funcmatrix__FunctionMatrix()
sympy.tests.test_args.test_sympy__matrices__expressions__hadamard__HadamardProduct()
sympy.tests.test_args.test_sympy__matrices__expressions__inverse__Inverse()
sympy.tests.test_args.test_sympy__matrices__expressions__matadd__MatAdd()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__Identity()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixBase()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixElement()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixExpr()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__MatrixSymbol()
sympy.tests.test_args.test_sympy__matrices__expressions__matexpr__ZeroMatrix()
sympy.tests.test_args.test_sympy__matrices__expressions__matmul__MatMul()
sympy.tests.test_args.test_sympy__matrices__expressions__matpow__MatPow()
sympy.tests.test_args.test_sympy__matrices__expressions__slice__MatrixSlice()
sympy.tests.test_args.test_sympy__matrices__expressions__trace__Trace()
sympy.tests.test_args.test_sympy__matrices__expressions__transpose__Transpose()
sympy.tests.test_args.test_sympy__matrices__immutable__ImmutableMatrix()
sympy.tests.test_args.test_sympy__matrices__immutable__ImmutableSparseMatrix()
sympy.tests.test_args.test_sympy__matrices__matrices__DeferredVector()
sympy.tests.test_args.test_sympy__ntheory__factor___divisor_sigma()
sympy.tests.test_args.test_sympy__ntheory__factor___totient()
sympy.tests.test_args.test_sympy__ntheory__residue_ntheory__mobius()
sympy.tests.test_args.test_sympy__physics__hep__gamma_matrices__GammaMatrixHead()
sympy.tests.test_args.test_sympy__physics__optics__gaussopt__BeamParameter()
sympy.tests.test_args.test_sympy__physics__optics__medium__Medium()
sympy.tests.test_args.test_sympy__physics__optics__waves__TWave()
sympy.tests.test_args.test_sympy__physics__paulialgebra__Pauli()
sympy.tests.test_args.test_sympy__physics__quantum__anticommutator__AntiCommutator()
sympy.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentBra()
sympy.tests.test_args.test_sympy__physics__quantum__boson__BosonCoherentKet()
sympy.tests.test_args.test_sympy__physics__quantum__boson__BosonFockBra()
sympy.tests.test_args.test_sympy__physics__quantum__boson__BosonFockKet()
sympy.tests.test_args.test_sympy__physics__quantum__boson__BosonOp()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PositionBra3D()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PositionKet3D()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PositionState3D()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PxBra()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PxKet()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__PxOp()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__XBra()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__XKet()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__XOp()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__YOp()
sympy.tests.test_args.test_sympy__physics__quantum__cartesian__ZOp()
sympy.tests.test_args.test_sympy__physics__quantum__cg__CG()
sympy.tests.test_args.test_sympy__physics__quantum__cg__Wigner3j()
sympy.tests.test_args.test_sympy__physics__quantum__cg__Wigner6j()
sympy.tests.test_args.test_sympy__physics__quantum__cg__Wigner9j()
sympy.tests.test_args.test_sympy__physics__quantum__circuitplot__Mx()
sympy.tests.test_args.test_sympy__physics__quantum__circuitplot__Mz()
sympy.tests.test_args.test_sympy__physics__quantum__commutator__Commutator()
sympy.tests.test_args.test_sympy__physics__quantum__constants__HBar()
sympy.tests.test_args.test_sympy__physics__quantum__dagger__Dagger()
sympy.tests.test_args.test_sympy__physics__quantum__density__Density()
sympy.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockBra()
sympy.tests.test_args.test_sympy__physics__quantum__fermion__FermionFockKet()
sympy.tests.test_args.test_sympy__physics__quantum__fermion__FermionOp()
sympy.tests.test_args.test_sympy__physics__quantum__gate__CGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__CGateS()
sympy.tests.test_args.test_sympy__physics__quantum__gate__CNotGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__Gate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__HadamardGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__IdentityGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__OneQubitGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__PhaseGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__SwapGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__TGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__TwoQubitGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__UGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__XGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__YGate()
sympy.tests.test_args.test_sympy__physics__quantum__gate__ZGate()
sympy.tests.test_args.test_sympy__physics__quantum__grover__OracleGate()
sympy.tests.test_args.test_sympy__physics__quantum__grover__WGate()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__ComplexSpace()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__DirectSumHilbertSpace()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__FockSpace()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__HilbertSpace()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__L2()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__TensorPowerHilbertSpace()
sympy.tests.test_args.test_sympy__physics__quantum__hilbert__TensorProductHilbertSpace()
sympy.tests.test_args.test_sympy__physics__quantum__identitysearch__GateIdentity()
sympy.tests.test_args.test_sympy__physics__quantum__innerproduct__InnerProduct()
sympy.tests.test_args.test_sympy__physics__quantum__operator__DifferentialOperator()
sympy.tests.test_args.test_sympy__physics__quantum__operator__HermitianOperator()
sympy.tests.test_args.test_sympy__physics__quantum__operator__IdentityOperator()
sympy.tests.test_args.test_sympy__physics__quantum__operator__Operator()
sympy.tests.test_args.test_sympy__physics__quantum__operator__OuterProduct()
sympy.tests.test_args.test_sympy__physics__quantum__operator__UnitaryOperator()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaMinus()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaOpBase()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaPlus()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaX()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaY()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZ()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZBra()
sympy.tests.test_args.test_sympy__physics__quantum__pauli__SigmaZKet()
sympy.tests.test_args.test_sympy__physics__quantum__piab__PIABBra()
sympy.tests.test_args.test_sympy__physics__quantum__piab__PIABHamiltonian()
sympy.tests.test_args.test_sympy__physics__quantum__piab__PIABKet()
sympy.tests.test_args.test_sympy__physics__quantum__qexpr__QExpr()
sympy.tests.test_args.test_sympy__physics__quantum__qft__Fourier()
sympy.tests.test_args.test_sympy__physics__quantum__qft__IQFT()
sympy.tests.test_args.test_sympy__physics__quantum__qft__QFT()
sympy.tests.test_args.test_sympy__physics__quantum__qft__RkGate()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__IntQubit()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitBra()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__IntQubitState()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__Qubit()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__QubitBra()
sympy.tests.test_args.test_sympy__physics__quantum__qubit__QubitState()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__Hamiltonian()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__LoweringOp()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__NumberOp()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__RaisingOp()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__SHOBra()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__SHOKet()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__SHOOp()
sympy.tests.test_args.test_sympy__physics__quantum__sho1d__SHOState()
sympy.tests.test_args.test_sympy__physics__quantum__shor__CMod()
sympy.tests.test_args.test_sympy__physics__quantum__spin__CoupledSpinState()
sympy.tests.test_args.test_sympy__physics__quantum__spin__J2Op()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JminusOp()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JplusOp()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JxBra()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JxBraCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JxKet()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JxKetCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JxOp()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JyBra()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JyBraCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JyKet()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JyKetCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JyOp()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JzBra()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JzBraCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JzKet()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JzKetCoupled()
sympy.tests.test_args.test_sympy__physics__quantum__spin__JzOp()
sympy.tests.test_args.test_sympy__physics__quantum__spin__Rotation()
sympy.tests.test_args.test_sympy__physics__quantum__spin__SpinState()
sympy.tests.test_args.test_sympy__physics__quantum__spin__WignerD()
sympy.tests.test_args.test_sympy__physics__quantum__state__Bra()
sympy.tests.test_args.test_sympy__physics__quantum__state__BraBase()
sympy.tests.test_args.test_sympy__physics__quantum__state__Ket()
sympy.tests.test_args.test_sympy__physics__quantum__state__KetBase()
sympy.tests.test_args.test_sympy__physics__quantum__state__State()
sympy.tests.test_args.test_sympy__physics__quantum__state__StateBase()
sympy.tests.test_args.test_sympy__physics__quantum__state__TimeDepBra()
sympy.tests.test_args.test_sympy__physics__quantum__state__TimeDepKet()
sympy.tests.test_args.test_sympy__physics__quantum__state__TimeDepState()
sympy.tests.test_args.test_sympy__physics__quantum__state__Wavefunction()
sympy.tests.test_args.test_sympy__physics__quantum__tensorproduct__TensorProduct()
sympy.tests.test_args.test_sympy__physics__secondquant__AnnihilateBoson()
sympy.tests.test_args.test_sympy__physics__secondquant__AnnihilateFermion()
sympy.tests.test_args.test_sympy__physics__secondquant__Annihilator()
sympy.tests.test_args.test_sympy__physics__secondquant__AntiSymmetricTensor()
sympy.tests.test_args.test_sympy__physics__secondquant__BosonState()
sympy.tests.test_args.test_sympy__physics__secondquant__BosonicOperator()
sympy.tests.test_args.test_sympy__physics__secondquant__Commutator()
sympy.tests.test_args.test_sympy__physics__secondquant__CreateBoson()
sympy.tests.test_args.test_sympy__physics__secondquant__CreateFermion()
sympy.tests.test_args.test_sympy__physics__secondquant__Creator()
sympy.tests.test_args.test_sympy__physics__secondquant__Dagger()
sympy.tests.test_args.test_sympy__physics__secondquant__FermionState()
sympy.tests.test_args.test_sympy__physics__secondquant__FermionicOperator()
sympy.tests.test_args.test_sympy__physics__secondquant__FockState()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateBosonBra()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateBosonKet()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateBra()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateFermionBra()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateFermionKet()
sympy.tests.test_args.test_sympy__physics__secondquant__FockStateKet()
sympy.tests.test_args.test_sympy__physics__secondquant__InnerProduct()
sympy.tests.test_args.test_sympy__physics__secondquant__NO()
sympy.tests.test_args.test_sympy__physics__secondquant__PermutationOperator()
sympy.tests.test_args.test_sympy__physics__secondquant__SqOperator()
sympy.tests.test_args.test_sympy__physics__secondquant__TensorSymbol()
sympy.tests.test_args.test_sympy__physics__units__Unit()
sympy.tests.test_args.test_sympy__physics__unitsystems__dimensions__Dimension()
sympy.tests.test_args.test_sympy__physics__unitsystems__quantities__Quantity()
sympy.tests.test_args.test_sympy__physics__unitsystems__units__Constant()
sympy.tests.test_args.test_sympy__physics__unitsystems__units__Unit()
sympy.tests.test_args.test_sympy__physics__vector__frame__CoordinateSym()
sympy.tests.test_args.test_sympy__polys__polytools__GroebnerBasis()
sympy.tests.test_args.test_sympy__polys__polytools__Poly()
sympy.tests.test_args.test_sympy__polys__polytools__PurePoly()
sympy.tests.test_args.test_sympy__polys__rootoftools__RootOf()
sympy.tests.test_args.test_sympy__polys__rootoftools__RootSum()
sympy.tests.test_args.test_sympy__printing__codeprinter__Assignment()
sympy.tests.test_args.test_sympy__series__limits__Limit()
sympy.tests.test_args.test_sympy__series__order__Order()
sympy.tests.test_args.test_sympy__sets__contains__Contains()
sympy.tests.test_args.test_sympy__sets__fancysets__ImageSet()
sympy.tests.test_args.test_sympy__sets__fancysets__Integers()
sympy.tests.test_args.test_sympy__sets__fancysets__Naturals()
sympy.tests.test_args.test_sympy__sets__fancysets__Naturals0()
sympy.tests.test_args.test_sympy__sets__fancysets__Range()
sympy.tests.test_args.test_sympy__sets__fancysets__Reals()
sympy.tests.test_args.test_sympy__sets__sets__Complement()
sympy.tests.test_args.test_sympy__sets__sets__EmptySet()
sympy.tests.test_args.test_sympy__sets__sets__FiniteSet()
sympy.tests.test_args.test_sympy__sets__sets__Intersection()
sympy.tests.test_args.test_sympy__sets__sets__Interval()
sympy.tests.test_args.test_sympy__sets__sets__ProductSet()
sympy.tests.test_args.test_sympy__sets__sets__Set()
sympy.tests.test_args.test_sympy__sets__sets__Union()
sympy.tests.test_args.test_sympy__sets__sets__UniversalSet()
sympy.tests.test_args.test_sympy__simplify__hyperexpand__G_Function()
sympy.tests.test_args.test_sympy__simplify__hyperexpand__Hyper_Function()
sympy.tests.test_args.test_sympy__stats__crv__ConditionalContinuousDomain()
sympy.tests.test_args.test_sympy__stats__crv__ContinuousDistribution()
sympy.tests.test_args.test_sympy__stats__crv__ContinuousDistributionHandmade()
sympy.tests.test_args.test_sympy__stats__crv__ContinuousDomain()
sympy.tests.test_args.test_sympy__stats__crv__ContinuousPSpace()
sympy.tests.test_args.test_sympy__stats__crv__ProductContinuousDomain()
sympy.tests.test_args.test_sympy__stats__crv__ProductContinuousPSpace()
sympy.tests.test_args.test_sympy__stats__crv__SingleContinuousDistribution()
sympy.tests.test_args.test_sympy__stats__crv__SingleContinuousDomain()
sympy.tests.test_args.test_sympy__stats__crv__SingleContinuousPSpace()
sympy.tests.test_args.test_sympy__stats__crv_types__ArcsinDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__BeniniDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__BetaDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__BetaPrimeDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__CauchyDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__ChiDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__ChiNoncentralDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__ChiSquaredDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__DagumDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__ExponentialDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__FDistributionDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__FisherZDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__FrechetDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__GammaDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__GammaInverseDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__KumaraswamyDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__LaplaceDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__LogNormalDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__LogisticDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__MaxwellDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__NakagamiDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__NormalDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__ParetoDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__QuadraticUDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__RaisedCosineDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__RayleighDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__StudentTDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__TriangularDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__UniformDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__UniformSumDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__VonMisesDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__WeibullDistribution()
sympy.tests.test_args.test_sympy__stats__crv_types__WignerSemicircleDistribution()
sympy.tests.test_args.test_sympy__stats__drv__SingleDiscreteDistribution()
sympy.tests.test_args.test_sympy__stats__drv__SingleDiscreteDomain()
sympy.tests.test_args.test_sympy__stats__drv__SingleDiscretePSpace()
sympy.tests.test_args.test_sympy__stats__drv_types__GeometricDistribution()
sympy.tests.test_args.test_sympy__stats__drv_types__PoissonDistribution()
sympy.tests.test_args.test_sympy__stats__frv__ConditionalFiniteDomain()
sympy.tests.test_args.test_sympy__stats__frv__FiniteDomain()
sympy.tests.test_args.test_sympy__stats__frv__FinitePSpace()
sympy.tests.test_args.test_sympy__stats__frv__ProductFiniteDomain()
sympy.tests.test_args.test_sympy__stats__frv__ProductFinitePSpace()
sympy.tests.test_args.test_sympy__stats__frv__SingleFiniteDistribution()
sympy.tests.test_args.test_sympy__stats__frv__SingleFiniteDomain()
sympy.tests.test_args.test_sympy__stats__frv__SingleFinitePSpace()
sympy.tests.test_args.test_sympy__stats__frv_types__BernoulliDistribution()
sympy.tests.test_args.test_sympy__stats__frv_types__BinomialDistribution()
sympy.tests.test_args.test_sympy__stats__frv_types__DieDistribution()
sympy.tests.test_args.test_sympy__stats__frv_types__DiscreteUniformDistribution()
sympy.tests.test_args.test_sympy__stats__frv_types__FiniteDistributionHandmade()
sympy.tests.test_args.test_sympy__stats__frv_types__HypergeometricDistribution()
sympy.tests.test_args.test_sympy__stats__frv_types__RademacherDistribution()
sympy.tests.test_args.test_sympy__stats__rv__ConditionalDomain()
sympy.tests.test_args.test_sympy__stats__rv__Density()
sympy.tests.test_args.test_sympy__stats__rv__PSpace()
sympy.tests.test_args.test_sympy__stats__rv__ProductDomain()
sympy.tests.test_args.test_sympy__stats__rv__ProductPSpace()
sympy.tests.test_args.test_sympy__stats__rv__RandomDomain()
sympy.tests.test_args.test_sympy__stats__rv__RandomSymbol()
sympy.tests.test_args.test_sympy__stats__rv__SingleDomain()
sympy.tests.test_args.test_sympy__stats__rv__SinglePSpace()
sympy.tests.test_args.test_sympy__tensor__indexed__Idx()
sympy.tests.test_args.test_sympy__tensor__indexed__Indexed()
sympy.tests.test_args.test_sympy__tensor__indexed__IndexedBase()
sympy.tests.test_args.test_sympy__tensor__tensor__TensAdd()
sympy.tests.test_args.test_sympy__tensor__tensor__TensExpr()
sympy.tests.test_args.test_sympy__tensor__tensor__TensMul()
sympy.tests.test_args.test_sympy__tensor__tensor__TensorHead()
sympy.tests.test_args.test_sympy__tensor__tensor__TensorIndex()
sympy.tests.test_args.test_sympy__tensor__tensor__TensorIndexType()
sympy.tests.test_args.test_sympy__tensor__tensor__TensorSymmetry()
sympy.tests.test_args.test_sympy__tensor__tensor__TensorType()
sympy.tests.test_args.test_sympy__vector__basisdependent__BasisDependent()
sympy.tests.test_args.test_sympy__vector__basisdependent__BasisDependentAdd()
sympy.tests.test_args.test_sympy__vector__basisdependent__BasisDependentMul()
sympy.tests.test_args.test_sympy__vector__basisdependent__BasisDependentZero()
sympy.tests.test_args.test_sympy__vector__coordsysrect__CoordSysCartesian()
sympy.tests.test_args.test_sympy__vector__deloperator__Del()
sympy.tests.test_args.test_sympy__vector__dyadic__BaseDyadic()
sympy.tests.test_args.test_sympy__vector__dyadic__Dyadic()
sympy.tests.test_args.test_sympy__vector__dyadic__DyadicAdd()
sympy.tests.test_args.test_sympy__vector__dyadic__DyadicMul()
sympy.tests.test_args.test_sympy__vector__dyadic__DyadicZero()
sympy.tests.test_args.test_sympy__vector__orienters__AxisOrienter()
sympy.tests.test_args.test_sympy__vector__orienters__BodyOrienter()
sympy.tests.test_args.test_sympy__vector__orienters__Orienter()
sympy.tests.test_args.test_sympy__vector__orienters__QuaternionOrienter()
sympy.tests.test_args.test_sympy__vector__orienters__SpaceOrienter()
sympy.tests.test_args.test_sympy__vector__orienters__ThreeAngleOrienter()
sympy.tests.test_args.test_sympy__vector__point__Point()
sympy.tests.test_args.test_sympy__vector__scalar__BaseScalar()
sympy.tests.test_args.test_sympy__vector__vector__BaseVector()
sympy.tests.test_args.test_sympy__vector__vector__Vector()
sympy.tests.test_args.test_sympy__vector__vector__VectorAdd()
sympy.tests.test_args.test_sympy__vector__vector__VectorMul()
sympy.tests.test_args.test_sympy__vector__vector__VectorZero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_symbol.py----------------------------------------
A:sympy.core.tests.test_symbol.a->Symbol('a')
A:sympy.core.tests.test_symbol.x1->Symbol('x1')
A:sympy.core.tests.test_symbol.x2->Symbol('x2')
A:sympy.core.tests.test_symbol.xdummy1->Dummy('x')
A:sympy.core.tests.test_symbol.xdummy2->Dummy('x')
A:sympy.core.tests.test_symbol.d->Symbol('d')
A:sympy.core.tests.test_symbol.(c, d)->symbols('c,d', cls=Dummy)
A:sympy.core.tests.test_symbol.d1->Dummy()
A:sympy.core.tests.test_symbol.x->Symbol('x')
A:sympy.core.tests.test_symbol.(x, y, z)->symbols('x,y,z')
A:sympy.core.tests.test_symbol.y->Symbol('y')
A:sympy.core.tests.test_symbol.p->Symbol('p', positive=True)
A:sympy.core.tests.test_symbol.k->Symbol('k', integer=True)
A:sympy.core.tests.test_symbol.n->Symbol('n', integer=True, positive=True)
A:sympy.core.tests.test_symbol.S->Wild('S', properties=[symbolp])
A:sympy.core.tests.test_symbol.R->Wild('R', properties=[realp])
A:sympy.core.tests.test_symbol.Y->Wild('Y', exclude=[x, p, k, n])
A:sympy.core.tests.test_symbol.P->Wild('P', properties=[positivep])
A:sympy.core.tests.test_symbol.K->Wild('K', properties=[integerp])
A:sympy.core.tests.test_symbol.N->Wild('N', properties=[positivep, integerp])
A:sympy.core.tests.test_symbol.z->Symbol('z')
A:sympy.core.tests.test_symbol.xyz->Symbol('xyz')
A:sympy.core.tests.test_symbol.abc->Symbol('abc')
A:sympy.core.tests.test_symbol.(a, b)->symbols('x,y', real=True)
A:sympy.core.tests.test_symbol.x0->Symbol('x0')
A:sympy.core.tests.test_symbol.y0->Symbol('y0')
A:sympy.core.tests.test_symbol.y1->Symbol('y1')
A:sympy.core.tests.test_symbol.b->Symbol('b')
A:sympy.core.tests.test_symbol.c->Symbol('c')
A:sympy.core.tests.test_symbol.aa->Symbol('aa')
A:sympy.core.tests.test_symbol.ab->Symbol('ab')
A:sympy.core.tests.test_symbol.ac->Symbol('ac')
A:sympy.core.tests.test_symbol.ad->Symbol('ad')
A:sympy.core.tests.test_symbol.f->Symbol('f')
A:sympy.core.tests.test_symbol.xu->Symbol(u('x'))
sympy.core.tests.test_symbol.test_Dummy()
sympy.core.tests.test_symbol.test_Symbol()
sympy.core.tests.test_symbol.test_Wild_properties()
sympy.core.tests.test_symbol.test_as_dummy()
sympy.core.tests.test_symbol.test_call()
sympy.core.tests.test_symbol.test_ineq_unequal()
sympy.core.tests.test_symbol.test_lt_gt()
sympy.core.tests.test_symbol.test_no_len()
sympy.core.tests.test_symbol.test_symbols()
sympy.core.tests.test_symbol.test_unicode()
sympy.tests.test_symbol.test_Dummy()
sympy.tests.test_symbol.test_Symbol()
sympy.tests.test_symbol.test_Wild_properties()
sympy.tests.test_symbol.test_as_dummy()
sympy.tests.test_symbol.test_call()
sympy.tests.test_symbol.test_ineq_unequal()
sympy.tests.test_symbol.test_lt_gt()
sympy.tests.test_symbol.test_no_len()
sympy.tests.test_symbol.test_symbols()
sympy.tests.test_symbol.test_unicode()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_function.py----------------------------------------
A:sympy.core.tests.test_function.(f, g, h)->symbols('f g h', cls=Function)
A:sympy.core.tests.test_function.x->Symbol('x')
A:sympy.core.tests.test_function.e->Subs(y ** 2 * f(x), x, y)
A:sympy.core.tests.test_function.nu->Function('nu')
A:sympy.core.tests.test_function.edx->Subs(y ** 2 * f(x), x, y).diff(x)
A:sympy.core.tests.test_function.edy->Subs(y ** 2 * f(x), x, y).diff(y)
A:sympy.core.tests.test_function.edxdx->Subs(y ** 2 * f(x), x, y).diff(x).diff(x)
A:sympy.core.tests.test_function.edxdy->Subs(y ** 2 * f(x), x, y).diff(x).diff(y)
A:sympy.core.tests.test_function.d->Derivative(f, x)
A:sympy.core.tests.test_function.f->Function('f')
A:sympy.core.tests.test_function.e1->Subs(z * f(x), x, 1)
A:sympy.core.tests.test_function.e2->Subs(z * f(y), y, 1)
A:sympy.core.tests.test_function.a->A('f')
A:sympy.core.tests.test_function.n->Symbol('n', integer=True)
A:sympy.core.tests.test_function.noraise->eq.diff(*v)
A:sympy.core.tests.test_function.mf->myfunc(x)
A:sympy.core.tests.test_function.xd->diff(x, t)
A:sympy.core.tests.test_function.xdd->diff(xd, t)
A:sympy.core.tests.test_function.y->g(t)
A:sympy.core.tests.test_function.yd->diff(y, t)
A:sympy.core.tests.test_function.fx->f(x)
A:sympy.core.tests.test_function.dfx->diff(f(x), x)
A:sympy.core.tests.test_function.ddfx->diff(f(x), x, x)
A:sympy.core.tests.test_function.m->Symbol('m')
A:sympy.core.tests.test_function.phi->f(x, t)
A:sympy.core.tests.test_function.eqna->Eq(diff(L, x), diff(L, diff(x, t), t))
A:sympy.core.tests.test_function.eqnb->Eq(-k * x, m * diff(x, t, t))
A:sympy.core.tests.test_function.k->Symbol('k')
A:sympy.core.tests.test_function.F->f(x)
A:sympy.core.tests.test_function.Fd->f(x).diff(x)
A:sympy.core.tests.test_function.L->sqrt(1 + Fd ** 2)
A:sympy.core.tests.test_function.expr->MyExpr(x, y, z)
A:sympy.core.tests.test_function.Float_big->Float(big)
A:sympy.core.tests.test_function.y1->Dummy('y')
A:sympy.core.tests.test_function.y2->Dummy('y')
A:sympy.core.tests.test_function.func1->f(a + y1 * b)
A:sympy.core.tests.test_function.func2->f(a + y2 * b)
A:sympy.core.tests.test_function.func1_y->f(a + y1 * b).diff(y1)
A:sympy.core.tests.test_function.func2_y->f(a + y2 * b).diff(y2)
A:sympy.core.tests.test_function.z1->Subs(f(a), a, y1)
A:sympy.core.tests.test_function.z2->Subs(f(a), a, y2)
A:sympy.core.tests.test_function.ans1->f(x).series(x, a)
A:sympy.core.tests.test_function._xi_1->f(x).series(x, a).atoms(Dummy).pop()
A:sympy.core.tests.test_function.ans2->f(x).series(x, a)
A:sympy.core.tests.test_function.ff->Function('f')(x)
A:sympy.core.tests.test_function.match_with_cache->Function('f')(x).matches(f)
sympy.core.tests.test_function.test_Function()
sympy.core.tests.test_function.test_IdentityFunction()
sympy.core.tests.test_function.test_Lambda()
sympy.core.tests.test_function.test_Lambda_arguments()
sympy.core.tests.test_function.test_Lambda_equality()
sympy.core.tests.test_function.test_Lambda_symbols()
sympy.core.tests.test_function.test_Subs()
sympy.core.tests.test_function.test_Subs2()
sympy.core.tests.test_function.test_bug1()
sympy.core.tests.test_function.test_deriv1()
sympy.core.tests.test_function.test_deriv2()
sympy.core.tests.test_function.test_deriv_wrt_function()
sympy.core.tests.test_function.test_derivative_evaluate()
sympy.core.tests.test_function.test_derivative_linearity()
sympy.core.tests.test_function.test_derivative_numerically()
sympy.core.tests.test_function.test_derivative_subs_bug()
sympy.core.tests.test_function.test_derivative_subs_self_bug()
sympy.core.tests.test_function.test_diff_symbols()
sympy.core.tests.test_function.test_diff_wrt()
sympy.core.tests.test_function.test_diff_wrt_func_subs()
sympy.core.tests.test_function.test_diff_wrt_not_allowed()
sympy.core.tests.test_function.test_diff_wrt_value()
sympy.core.tests.test_function.test_doit()
sympy.core.tests.test_function.test_evalf_default()
sympy.core.tests.test_function.test_expand_function()
sympy.core.tests.test_function.test_extensibility_eval()
sympy.core.tests.test_function.test_f_expand_complex()
sympy.core.tests.test_function.test_fdiff_argument_index_error()
sympy.core.tests.test_function.test_func_deriv()
sympy.core.tests.test_function.test_function__eval_nseries()
sympy.core.tests.test_function.test_function_comparable()
sympy.core.tests.test_function.test_function_comparable_infinities()
sympy.core.tests.test_function.test_function_complex()
sympy.core.tests.test_function.test_function_evalf()
sympy.core.tests.test_function.test_function_non_commutative()
sympy.core.tests.test_function.test_general_function()
sympy.core.tests.test_function.test_issue_4711()
sympy.core.tests.test_function.test_issue_5399()
sympy.core.tests.test_function.test_issue_7068()
sympy.core.tests.test_function.test_issue_7231()
sympy.core.tests.test_function.test_issue_7687()
sympy.core.tests.test_function.test_issue_7688()
sympy.core.tests.test_function.test_klein_gordon_lagrangian()
sympy.core.tests.test_function.test_nargs()
sympy.core.tests.test_function.test_nfloat()
sympy.core.tests.test_function.test_sho_lagrangian()
sympy.core.tests.test_function.test_sort_variable()
sympy.core.tests.test_function.test_straight_line()
sympy.core.tests.test_function.test_suppressed_evaluation()
sympy.core.tests.test_function.test_unhandled()
sympy.tests.test_function.test_Function()
sympy.tests.test_function.test_IdentityFunction()
sympy.tests.test_function.test_Lambda()
sympy.tests.test_function.test_Lambda_arguments()
sympy.tests.test_function.test_Lambda_equality()
sympy.tests.test_function.test_Lambda_symbols()
sympy.tests.test_function.test_Subs()
sympy.tests.test_function.test_Subs2()
sympy.tests.test_function.test_bug1()
sympy.tests.test_function.test_deriv1()
sympy.tests.test_function.test_deriv2()
sympy.tests.test_function.test_deriv_wrt_function()
sympy.tests.test_function.test_derivative_evaluate()
sympy.tests.test_function.test_derivative_linearity()
sympy.tests.test_function.test_derivative_numerically()
sympy.tests.test_function.test_derivative_subs_bug()
sympy.tests.test_function.test_derivative_subs_self_bug()
sympy.tests.test_function.test_diff_symbols()
sympy.tests.test_function.test_diff_wrt()
sympy.tests.test_function.test_diff_wrt_func_subs()
sympy.tests.test_function.test_diff_wrt_not_allowed()
sympy.tests.test_function.test_diff_wrt_value()
sympy.tests.test_function.test_doit()
sympy.tests.test_function.test_evalf_default()
sympy.tests.test_function.test_expand_function()
sympy.tests.test_function.test_extensibility_eval()
sympy.tests.test_function.test_f_expand_complex()
sympy.tests.test_function.test_fdiff_argument_index_error()
sympy.tests.test_function.test_func_deriv()
sympy.tests.test_function.test_function__eval_nseries()
sympy.tests.test_function.test_function_comparable()
sympy.tests.test_function.test_function_comparable_infinities()
sympy.tests.test_function.test_function_complex()
sympy.tests.test_function.test_function_evalf()
sympy.tests.test_function.test_function_non_commutative()
sympy.tests.test_function.test_general_function()
sympy.tests.test_function.test_issue_4711()
sympy.tests.test_function.test_issue_5399()
sympy.tests.test_function.test_issue_7068()
sympy.tests.test_function.test_issue_7231()
sympy.tests.test_function.test_issue_7687()
sympy.tests.test_function.test_issue_7688()
sympy.tests.test_function.test_klein_gordon_lagrangian()
sympy.tests.test_function.test_nargs()
sympy.tests.test_function.test_nfloat()
sympy.tests.test_function.test_sho_lagrangian()
sympy.tests.test_function.test_sort_variable()
sympy.tests.test_function.test_straight_line()
sympy.tests.test_function.test_suppressed_evaluation()
sympy.tests.test_function.test_unhandled()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_eval.py----------------------------------------
A:sympy.core.tests.test_eval.a->Symbol('a')
A:sympy.core.tests.test_eval.b->Symbol('b')
A:sympy.core.tests.test_eval.c->Rational(1)
A:sympy.core.tests.test_eval.p->Rational(5)
A:sympy.core.tests.test_eval.x->Symbol('x')
A:sympy.core.tests.test_eval.y->Symbol('y')
A:sympy.core.tests.test_eval.f->Function('f')
A:sympy.core.tests.test_eval.(l, x)->map(Symbol, 'lx')
sympy.core.tests.test_eval.test_add_eval()
sympy.core.tests.test_eval.test_addmul_eval()
sympy.core.tests.test_eval.test_evalpow_bug()
sympy.core.tests.test_eval.test_function()
sympy.core.tests.test_eval.test_mulpow_eval()
sympy.core.tests.test_eval.test_pow_eval()
sympy.core.tests.test_eval.test_pow_eval_X1()
sympy.core.tests.test_eval.test_symbol_expand()
sympy.tests.test_eval.test_add_eval()
sympy.tests.test_eval.test_addmul_eval()
sympy.tests.test_eval.test_evalpow_bug()
sympy.tests.test_eval.test_function()
sympy.tests.test_eval.test_mulpow_eval()
sympy.tests.test_eval.test_pow_eval()
sympy.tests.test_eval.test_pow_eval_X1()
sympy.tests.test_eval.test_symbol_expand()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_trace.py----------------------------------------
A:sympy.core.tests.test_trace.(a, b, c, d, Y)->symbols('a b c d Y')
A:sympy.core.tests.test_trace.(A, B, C, D)->symbols('A B C D', commutative=False)
A:sympy.core.tests.test_trace.M->Matrix([[1, 1], [2, 2]])
A:sympy.core.tests.test_trace.t->Tr((A + B) * (B * B) * C * D)
A:sympy.core.tests.test_trace.(a, b, c, d)->symbols('a b c d')
A:sympy.core.tests.test_trace.(A, B, C, D, E, F, G)->symbols('A B C D E F G', commutative=False)
A:sympy.core.tests.test_trace.t1->Tr(A * B)
A:sympy.core.tests.test_trace.t2->Tr(A * B).permute(1)
sympy.core.tests.test_trace.test_permute()
sympy.core.tests.test_trace.test_trace_doit()
sympy.core.tests.test_trace.test_trace_new()
sympy.tests.test_trace.test_permute()
sympy.tests.test_trace.test_trace_doit()
sympy.tests.test_trace.test_trace_new()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_var.py----------------------------------------
A:sympy.core.tests.test_var.v->var(['d', 'e', 'fg'])
A:sympy.core.tests.test_var.v2->var('x,y,z')
A:sympy.core.tests.test_var.v3->var('x,y z')
A:sympy.core.tests.test_var.v1->var('x y z')
A:sympy.core.tests.test_var.f->var('f', cls=Function)
A:sympy.core.tests.test_var.(g, h)->var('g,h', cls=Function)
sympy.core.tests.test_var.__make_z2()
sympy.core.tests.test_var._make_z1()
sympy.core.tests.test_var._make_z2()
sympy.core.tests.test_var.test_var()
sympy.core.tests.test_var.test_var_accepts_comma()
sympy.core.tests.test_var.test_var_cls()
sympy.core.tests.test_var.test_var_keywords()
sympy.core.tests.test_var.test_var_return()
sympy.tests.test_var.__make_z2()
sympy.tests.test_var._make_z1()
sympy.tests.test_var._make_z2()
sympy.tests.test_var.test_var()
sympy.tests.test_var.test_var_accepts_comma()
sympy.tests.test_var.test_var_cls()
sympy.tests.test_var.test_var_keywords()
sympy.tests.test_var.test_var_return()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_count_ops.py----------------------------------------
A:sympy.core.tests.test_count_ops.(x, y, z)->symbols('x,y,z')
A:sympy.core.tests.test_count_ops.(a, b, c)->symbols('a,b,c')
A:sympy.core.tests.test_count_ops.(ADD, MUL, POW, SIN, COS, EXP, AND, D, G)->symbols('Add Mul Pow sin cos exp And Derivative Integral'.upper())
A:sympy.core.tests.test_count_ops.(DIV, SUB, NEG)->symbols('DIV SUB NEG')
A:sympy.core.tests.test_count_ops.(NOT, OR, AND, XOR, IMPLIES, EQUIVALENT, ITE, BASIC, TUPLE)->symbols('Not Or And Xor Implies Equivalent ITE Basic Tuple'.upper())
sympy.core.tests.test_count_ops.test_count_ops_non_visual()
sympy.core.tests.test_count_ops.test_count_ops_visual()
sympy.tests.test_count_ops.test_count_ops_non_visual()
sympy.tests.test_count_ops.test_count_ops_visual()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_containers.py----------------------------------------
A:sympy.core.tests.test_containers.st->Tuple(*t)
A:sympy.core.tests.test_containers.(p, q, r, s)->symbols('p q r s')
A:sympy.core.tests.test_containers.st2->Tuple(*t2)
A:sympy.core.tests.test_containers.p->symbols('p')
A:sympy.core.tests.test_containers.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_containers.d->Dict({x: 1, y: 2, z: 3})
sympy.core.tests.test_containers.test_Dict()
sympy.core.tests.test_containers.test_Tuple()
sympy.core.tests.test_containers.test_Tuple_comparision()
sympy.core.tests.test_containers.test_Tuple_concatenation()
sympy.core.tests.test_containers.test_Tuple_contains()
sympy.core.tests.test_containers.test_Tuple_equality()
sympy.core.tests.test_containers.test_Tuple_index()
sympy.core.tests.test_containers.test_Tuple_mul()
sympy.core.tests.test_containers.test_Tuple_tuple_count()
sympy.core.tests.test_containers.test_issue_5788()
sympy.core.tests.test_containers.test_iterable_is_sequence()
sympy.core.tests.test_containers.test_tuple_wrapper()
sympy.tests.test_containers.test_Dict()
sympy.tests.test_containers.test_Tuple()
sympy.tests.test_containers.test_Tuple_comparision()
sympy.tests.test_containers.test_Tuple_concatenation()
sympy.tests.test_containers.test_Tuple_contains()
sympy.tests.test_containers.test_Tuple_equality()
sympy.tests.test_containers.test_Tuple_index()
sympy.tests.test_containers.test_Tuple_mul()
sympy.tests.test_containers.test_Tuple_tuple_count()
sympy.tests.test_containers.test_issue_5788()
sympy.tests.test_containers.test_iterable_is_sequence()
sympy.tests.test_containers.test_tuple_wrapper()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_numbers.py----------------------------------------
A:sympy.core.tests.test_numbers.sympy_int->Integer(python_int)
A:sympy.core.tests.test_numbers.sympy_int_int->Integer(sympy_int)
A:sympy.core.tests.test_numbers.sympy_hash_int->Integer(hash(python_int))
A:sympy.core.tests.test_numbers.x->Symbol('x', finite=True, real=True)
A:sympy.core.tests.test_numbers.y->Rational(3, 4)
A:sympy.core.tests.test_numbers.z->Rational(5, 18043)
A:sympy.core.tests.test_numbers.a->Integer(4)
A:sympy.core.tests.test_numbers.r->Rational(500, 41)
A:sympy.core.tests.test_numbers.f->Float(n.n(), 5)
A:sympy.core.tests.test_numbers.ans->Float(Rational(f) % r, 3)
A:sympy.core.tests.test_numbers.b->Symbol('b', finite=True)
A:sympy.core.tests.test_numbers.i->Integer(10)
A:sympy.core.tests.test_numbers.n1->Rational(1, 4)
A:sympy.core.tests.test_numbers.n3_4->Rational(3, 4)
A:sympy.core.tests.test_numbers.n2->Rational(1, 3)
A:sympy.core.tests.test_numbers.n3->Rational(2, 4)
A:sympy.core.tests.test_numbers.n4->Rational(2, -4)
A:sympy.core.tests.test_numbers.n5->Rational(0)
A:sympy.core.tests.test_numbers.n6->Rational(1)
A:sympy.core.tests.test_numbers.n7->Rational(3)
A:sympy.core.tests.test_numbers.n8->Rational(-3)
A:sympy.core.tests.test_numbers.t->Float('1.0E-15')
A:sympy.core.tests.test_numbers.x_str->Float((0, '13333333333333', -52, 53))
A:sympy.core.tests.test_numbers.x2_str->Float((0, '26666666666666', -53, 53))
A:sympy.core.tests.test_numbers.x_hex->Float((0, long(5404319552844595), -52, 53))
A:sympy.core.tests.test_numbers.x_dec->Float((0, 5404319552844595, -52, 53))
A:sympy.core.tests.test_numbers.x2_hex->Float((0, long(5404319552844595) * 2, -53, 53))
A:sympy.core.tests.test_numbers.zero->Float('0.0')
A:sympy.core.tests.test_numbers.(p, r)->integer_nthroot(int(factorial(10000)), 100)
A:sympy.core.tests.test_numbers.n->Symbol('n', negative=True)
A:sympy.core.tests.test_numbers.nz->Symbol('nz', nonzero=True)
A:sympy.core.tests.test_numbers.p->Symbol('p', positive=True)
A:sympy.core.tests.test_numbers.im->Symbol('i', imaginary=True)
A:sympy.core.tests.test_numbers.c->Symbol('c', complex=True)
A:sympy.core.tests.test_numbers.pb->Symbol('pb', positive=True, finite=True)
A:sympy.core.tests.test_numbers.nb->Symbol('nb', negative=True, finite=True)
A:sympy.core.tests.test_numbers.imb->Symbol('ib', imaginary=True, finite=True)
sympy.core.tests.test_numbers._strictly_equal(a,b)
sympy.core.tests.test_numbers._test_rational_new(cls)
sympy.core.tests.test_numbers.test_Catalan_EulerGamma_prec()
sympy.core.tests.test_numbers.test_Div_By_Zero()
sympy.core.tests.test_numbers.test_Float()
sympy.core.tests.test_numbers.test_Float_eq()
sympy.core.tests.test_numbers.test_Float_eval()
sympy.core.tests.test_numbers.test_Float_gcd_lcm_cofactors()
sympy.core.tests.test_numbers.test_Float_issue_2107()
sympy.core.tests.test_numbers.test_GoldenRatio_expand()
sympy.core.tests.test_numbers.test_Infinity()
sympy.core.tests.test_numbers.test_Infinity_2()
sympy.core.tests.test_numbers.test_Infinity_inequations()
sympy.core.tests.test_numbers.test_IntegerInteger()
sympy.core.tests.test_numbers.test_Integer_as_index()
sympy.core.tests.test_numbers.test_Integer_factors()
sympy.core.tests.test_numbers.test_Integer_new()
sympy.core.tests.test_numbers.test_Mul_Infinity_Zero()
sympy.core.tests.test_numbers.test_NaN()
sympy.core.tests.test_numbers.test_Number_new()
sympy.core.tests.test_numbers.test_Rational_cmp()
sympy.core.tests.test_numbers.test_Rational_factors()
sympy.core.tests.test_numbers.test_Rational_gcd_lcm_cofactors()
sympy.core.tests.test_numbers.test_Rational_int()
sympy.core.tests.test_numbers.test_Rational_new()
sympy.core.tests.test_numbers.test_abs1()
sympy.core.tests.test_numbers.test_accept_int()
sympy.core.tests.test_numbers.test_as_content_primitive()
sympy.core.tests.test_numbers.test_bug_sqrt()
sympy.core.tests.test_numbers.test_conversion_to_mpmath()
sympy.core.tests.test_numbers.test_divmod()
sympy.core.tests.test_numbers.test_dont_accept_str()
sympy.core.tests.test_numbers.test_hashing_sympy_integers()
sympy.core.tests.test_numbers.test_igcd()
sympy.core.tests.test_numbers.test_igcdex()
sympy.core.tests.test_numbers.test_ilcm()
sympy.core.tests.test_numbers.test_int()
sympy.core.tests.test_numbers.test_int_NumberSymbols()
sympy.core.tests.test_numbers.test_integer_nthroot_overflow()
sympy.core.tests.test_numbers.test_integers_cache()
sympy.core.tests.test_numbers.test_issue_3321()
sympy.core.tests.test_numbers.test_issue_3423()
sympy.core.tests.test_numbers.test_issue_3449()
sympy.core.tests.test_numbers.test_issue_3692()
sympy.core.tests.test_numbers.test_issue_4107()
sympy.core.tests.test_numbers.test_issue_4122()
sympy.core.tests.test_numbers.test_issue_4172()
sympy.core.tests.test_numbers.test_issue_4611()
sympy.core.tests.test_numbers.test_issue_6349()
sympy.core.tests.test_numbers.test_issue_6640()
sympy.core.tests.test_numbers.test_issue_7742()
sympy.core.tests.test_numbers.test_latex()
sympy.core.tests.test_numbers.test_long()
sympy.core.tests.test_numbers.test_mod()
sympy.core.tests.test_numbers.test_mpf_norm()
sympy.core.tests.test_numbers.test_mpmath_issues()
sympy.core.tests.test_numbers.test_no_len()
sympy.core.tests.test_numbers.test_pi_Pi()
sympy.core.tests.test_numbers.test_powers()
sympy.core.tests.test_numbers.test_powers_Float()
sympy.core.tests.test_numbers.test_powers_Integer()
sympy.core.tests.test_numbers.test_powers_Rational()
sympy.core.tests.test_numbers.test_real_bug()
sympy.core.tests.test_numbers.test_relational()
sympy.core.tests.test_numbers.test_seterr()
sympy.core.tests.test_numbers.test_special_numbers()
sympy.core.tests.test_numbers.test_zoo()
sympy.tests.test_numbers._strictly_equal(a,b)
sympy.tests.test_numbers._test_rational_new(cls)
sympy.tests.test_numbers.test_Catalan_EulerGamma_prec()
sympy.tests.test_numbers.test_Div_By_Zero()
sympy.tests.test_numbers.test_Float()
sympy.tests.test_numbers.test_Float_eq()
sympy.tests.test_numbers.test_Float_eval()
sympy.tests.test_numbers.test_Float_gcd_lcm_cofactors()
sympy.tests.test_numbers.test_Float_issue_2107()
sympy.tests.test_numbers.test_GoldenRatio_expand()
sympy.tests.test_numbers.test_Infinity()
sympy.tests.test_numbers.test_Infinity_2()
sympy.tests.test_numbers.test_Infinity_inequations()
sympy.tests.test_numbers.test_IntegerInteger()
sympy.tests.test_numbers.test_Integer_as_index()
sympy.tests.test_numbers.test_Integer_factors()
sympy.tests.test_numbers.test_Integer_new()
sympy.tests.test_numbers.test_Mul_Infinity_Zero()
sympy.tests.test_numbers.test_NaN()
sympy.tests.test_numbers.test_Number_new()
sympy.tests.test_numbers.test_Rational_cmp()
sympy.tests.test_numbers.test_Rational_factors()
sympy.tests.test_numbers.test_Rational_gcd_lcm_cofactors()
sympy.tests.test_numbers.test_Rational_int()
sympy.tests.test_numbers.test_Rational_new()
sympy.tests.test_numbers.test_abs1()
sympy.tests.test_numbers.test_accept_int()
sympy.tests.test_numbers.test_as_content_primitive()
sympy.tests.test_numbers.test_bug_sqrt()
sympy.tests.test_numbers.test_conversion_to_mpmath()
sympy.tests.test_numbers.test_divmod()
sympy.tests.test_numbers.test_dont_accept_str()
sympy.tests.test_numbers.test_hashing_sympy_integers()
sympy.tests.test_numbers.test_igcd()
sympy.tests.test_numbers.test_igcdex()
sympy.tests.test_numbers.test_ilcm()
sympy.tests.test_numbers.test_int()
sympy.tests.test_numbers.test_int_NumberSymbols()
sympy.tests.test_numbers.test_integer_nthroot_overflow()
sympy.tests.test_numbers.test_integers_cache()
sympy.tests.test_numbers.test_issue_3321()
sympy.tests.test_numbers.test_issue_3423()
sympy.tests.test_numbers.test_issue_3449()
sympy.tests.test_numbers.test_issue_3692()
sympy.tests.test_numbers.test_issue_4107()
sympy.tests.test_numbers.test_issue_4122()
sympy.tests.test_numbers.test_issue_4172()
sympy.tests.test_numbers.test_issue_4611()
sympy.tests.test_numbers.test_issue_6349()
sympy.tests.test_numbers.test_issue_6640()
sympy.tests.test_numbers.test_issue_7742()
sympy.tests.test_numbers.test_latex()
sympy.tests.test_numbers.test_long()
sympy.tests.test_numbers.test_mod()
sympy.tests.test_numbers.test_mpf_norm()
sympy.tests.test_numbers.test_mpmath_issues()
sympy.tests.test_numbers.test_no_len()
sympy.tests.test_numbers.test_pi_Pi()
sympy.tests.test_numbers.test_powers()
sympy.tests.test_numbers.test_powers_Float()
sympy.tests.test_numbers.test_powers_Integer()
sympy.tests.test_numbers.test_powers_Rational()
sympy.tests.test_numbers.test_real_bug()
sympy.tests.test_numbers.test_relational()
sympy.tests.test_numbers.test_seterr()
sympy.tests.test_numbers.test_special_numbers()
sympy.tests.test_numbers.test_zoo()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_facts.py----------------------------------------
A:sympy.core.tests.test_facts.I->deduce_alpha_implications(i)
A:sympy.core.tests.test_facts.P->rules_2prereq(dict((((k, True), set([(v, True) for v in S])) for (k, S) in I.items())))
A:sympy.core.tests.test_facts.(I, P)->D([('rat', 'real'), ('int', 'rat')])
A:sympy.core.tests.test_facts.f->FactRules(['real  == neg | zero | pos', 'neg   -> real & !zero & !pos', 'pos   -> real & !zero & !neg', 'nneg  == real & !neg', 'npos  == real & !pos'])
A:sympy.core.tests.test_facts.kb->FactKB(f)
A:sympy.core.tests.test_facts.base->FactKB(f)
sympy.core.tests.test_facts.test_FactRules_deduce()
sympy.core.tests.test_facts.test_FactRules_deduce2()
sympy.core.tests.test_facts.test_FactRules_deduce_base()
sympy.core.tests.test_facts.test_FactRules_deduce_multiple()
sympy.core.tests.test_facts.test_FactRules_deduce_multiple2()
sympy.core.tests.test_facts.test_FactRules_deduce_staticext()
sympy.core.tests.test_facts.test_FactRules_parse()
sympy.core.tests.test_facts.test_FactRules_parse2()
sympy.core.tests.test_facts.test_apply_beta_to_alpha_route()
sympy.core.tests.test_facts.test_deduce_alpha_implications()
sympy.tests.test_facts.test_FactRules_deduce()
sympy.tests.test_facts.test_FactRules_deduce2()
sympy.tests.test_facts.test_FactRules_deduce_base()
sympy.tests.test_facts.test_FactRules_deduce_multiple()
sympy.tests.test_facts.test_FactRules_deduce_multiple2()
sympy.tests.test_facts.test_FactRules_deduce_staticext()
sympy.tests.test_facts.test_FactRules_parse()
sympy.tests.test_facts.test_FactRules_parse2()
sympy.tests.test_facts.test_apply_beta_to_alpha_route()
sympy.tests.test_facts.test_deduce_alpha_implications()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_assumptions.py----------------------------------------
A:sympy.core.tests.test_assumptions.x->Symbol('x', real=True)
A:sympy.core.tests.test_assumptions.z->Dummy(zero=True)
A:sympy.core.tests.test_assumptions.r->Symbol('r', rational=True)
A:sympy.core.tests.test_assumptions.a->Symbol('a', algebraic=True)
A:sympy.core.tests.test_assumptions.y->Symbol('y', real=True)
A:sympy.core.tests.test_assumptions.h1->hash(a1)
A:sympy.core.tests.test_assumptions.h2->hash(a2)
A:sympy.core.tests.test_assumptions.x1->Symbol('x', even=True)
A:sympy.core.tests.test_assumptions.x2->Symbol('x', integer=True, odd=False)
A:sympy.core.tests.test_assumptions.ha->hash(a)
A:sympy.core.tests.test_assumptions.b->Symbol('b', finite=None)
A:sympy.core.tests.test_assumptions.hb->hash(b)
A:sympy.core.tests.test_assumptions.n->Symbol('n', negative=True)
A:sympy.core.tests.test_assumptions.nn->Dummy(nonnegative=True)
A:sympy.core.tests.test_assumptions.np->Symbol('n', nonpositive=True, infinite=True)
A:sympy.core.tests.test_assumptions.p->Symbol('p', positive=True)
A:sympy.core.tests.test_assumptions.xf->Symbol('xb', finite=True)
A:sympy.core.tests.test_assumptions.na->Symbol('na', algebraic=False)
A:sympy.core.tests.test_assumptions.nb->Symbol('nb', algebraic=False)
A:sympy.core.tests.test_assumptions.an->Symbol('an', algebraic=True, nonzero=True)
A:sympy.core.tests.test_assumptions.e->S('-sqrt(3)*I/2 + 0.866025403784439*I')
A:sympy.core.tests.test_assumptions.ia->Symbol('ia', algebraic=True, irrational=True)
A:sympy.core.tests.test_assumptions.ib->Symbol('ib', algebraic=True, irrational=True)
A:sympy.core.tests.test_assumptions.f->Symbol('f', finite=True)
A:sympy.core.tests.test_assumptions.i->Symbol('i', imaginary=True)
A:sympy.core.tests.test_assumptions.nzf->Dummy(finite=True, zero=False)
sympy.core.tests.test_assumptions.test_Add_is_algebraic()
sympy.core.tests.test_assumptions.test_Add_is_imaginary()
sympy.core.tests.test_assumptions.test_Add_is_pos_neg()
sympy.core.tests.test_assumptions.test_E()
sympy.core.tests.test_assumptions.test_I()
sympy.core.tests.test_assumptions.test_Mul_is_algebraic()
sympy.core.tests.test_assumptions.test_Mul_is_infinite()
sympy.core.tests.test_assumptions.test_Pow_is_algebraic()
sympy.core.tests.test_assumptions.test_composite()
sympy.core.tests.test_assumptions.test_hash_vs_eq()
sympy.core.tests.test_assumptions.test_hash_vs_typeinfo()
sympy.core.tests.test_assumptions.test_hash_vs_typeinfo_2()
sympy.core.tests.test_assumptions.test_inconsistent()
sympy.core.tests.test_assumptions.test_infinity()
sympy.core.tests.test_assumptions.test_issue_2730()
sympy.core.tests.test_assumptions.test_issue_2920()
sympy.core.tests.test_assumptions.test_issue_3825()
sympy.core.tests.test_assumptions.test_issue_4149()
sympy.core.tests.test_assumptions.test_issue_4822()
sympy.core.tests.test_assumptions.test_issue_6275()
sympy.core.tests.test_assumptions.test_issue_6631()
sympy.core.tests.test_assumptions.test_issue_7899()
sympy.core.tests.test_assumptions.test_nan()
sympy.core.tests.test_assumptions.test_neg_infinity()
sympy.core.tests.test_assumptions.test_neg_rational()
sympy.core.tests.test_assumptions.test_neg_symbol_falsenonnegative()
sympy.core.tests.test_assumptions.test_neg_symbol_falsenonnegative_real()
sympy.core.tests.test_assumptions.test_neg_symbol_falsepositive()
sympy.core.tests.test_assumptions.test_neg_symbol_falsepositive_real()
sympy.core.tests.test_assumptions.test_neg_symbol_nonpositive()
sympy.core.tests.test_assumptions.test_neg_symbol_positive()
sympy.core.tests.test_assumptions.test_negativeone()
sympy.core.tests.test_assumptions.test_one()
sympy.core.tests.test_assumptions.test_one_is_composite()
sympy.core.tests.test_assumptions.test_other_symbol()
sympy.core.tests.test_assumptions.test_pi()
sympy.core.tests.test_assumptions.test_pos_rational()
sympy.core.tests.test_assumptions.test_prime()
sympy.core.tests.test_assumptions.test_prime_symbol()
sympy.core.tests.test_assumptions.test_sanitize_assumptions()
sympy.core.tests.test_assumptions.test_special_assumptions()
sympy.core.tests.test_assumptions.test_special_is_rational()
sympy.core.tests.test_assumptions.test_symbol_falsenonnegative()
sympy.core.tests.test_assumptions.test_symbol_falsenonnegative_real()
sympy.core.tests.test_assumptions.test_symbol_falsepositive()
sympy.core.tests.test_assumptions.test_symbol_falsepositive_real()
sympy.core.tests.test_assumptions.test_symbol_noncommutative()
sympy.core.tests.test_assumptions.test_symbol_nonpositive()
sympy.core.tests.test_assumptions.test_symbol_positive()
sympy.core.tests.test_assumptions.test_symbol_real()
sympy.core.tests.test_assumptions.test_symbol_unset()
sympy.core.tests.test_assumptions.test_symbol_zero()
sympy.core.tests.test_assumptions.test_zero()
sympy.core.tests.test_test_Add_is_algebraic()
sympy.core.tests.test_test_Add_is_imaginary()
sympy.core.tests.test_test_Add_is_pos_neg()
sympy.core.tests.test_test_E()
sympy.core.tests.test_test_I()
sympy.core.tests.test_test_Mul_is_algebraic()
sympy.core.tests.test_test_Mul_is_infinite()
sympy.core.tests.test_test_Pow_is_algebraic()
sympy.core.tests.test_test_composite()
sympy.core.tests.test_test_hash_vs_eq()
sympy.core.tests.test_test_hash_vs_typeinfo()
sympy.core.tests.test_test_hash_vs_typeinfo_2()
sympy.core.tests.test_test_inconsistent()
sympy.core.tests.test_test_infinity()
sympy.core.tests.test_test_issue_2730()
sympy.core.tests.test_test_issue_2920()
sympy.core.tests.test_test_issue_3825()
sympy.core.tests.test_test_issue_4149()
sympy.core.tests.test_test_issue_4822()
sympy.core.tests.test_test_issue_6275()
sympy.core.tests.test_test_issue_6631()
sympy.core.tests.test_test_issue_7899()
sympy.core.tests.test_test_nan()
sympy.core.tests.test_test_neg_infinity()
sympy.core.tests.test_test_neg_rational()
sympy.core.tests.test_test_neg_symbol_falsenonnegative()
sympy.core.tests.test_test_neg_symbol_falsenonnegative_real()
sympy.core.tests.test_test_neg_symbol_falsepositive()
sympy.core.tests.test_test_neg_symbol_falsepositive_real()
sympy.core.tests.test_test_neg_symbol_nonpositive()
sympy.core.tests.test_test_neg_symbol_positive()
sympy.core.tests.test_test_negativeone()
sympy.core.tests.test_test_one()
sympy.core.tests.test_test_one_is_composite()
sympy.core.tests.test_test_other_symbol()
sympy.core.tests.test_test_pi()
sympy.core.tests.test_test_pos_rational()
sympy.core.tests.test_test_prime()
sympy.core.tests.test_test_prime_symbol()
sympy.core.tests.test_test_sanitize_assumptions()
sympy.core.tests.test_test_special_assumptions()
sympy.core.tests.test_test_special_is_rational()
sympy.core.tests.test_test_symbol_falsenonnegative()
sympy.core.tests.test_test_symbol_falsenonnegative_real()
sympy.core.tests.test_test_symbol_falsepositive()
sympy.core.tests.test_test_symbol_falsepositive_real()
sympy.core.tests.test_test_symbol_noncommutative()
sympy.core.tests.test_test_symbol_nonpositive()
sympy.core.tests.test_test_symbol_positive()
sympy.core.tests.test_test_symbol_real()
sympy.core.tests.test_test_symbol_unset()
sympy.core.tests.test_test_symbol_zero()
sympy.core.tests.test_test_zero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_expr.py----------------------------------------
A:sympy.core.tests.test_expr.i5->I5()
A:sympy.core.tests.test_expr.f1_1->F1_1()
A:sympy.core.tests.test_expr.m1->Symbol('m1', negative=False)
A:sympy.core.tests.test_expr.m2->Symbol('m2', nonpositive=False)
A:sympy.core.tests.test_expr.m3->Symbol('m3', positive=False)
A:sympy.core.tests.test_expr.m4->Symbol('m4', nonnegative=False)
A:sympy.core.tests.test_expr.(A, B)->symbols('A,B', commutative=False)
A:sympy.core.tests.test_expr.n->S(12345)
A:sympy.core.tests.test_expr.f->Function('f')
A:sympy.core.tests.test_expr.k->Symbol('k', nonnegative=True, integer=True)
A:sympy.core.tests.test_expr.m->MyInt()
A:sympy.core.tests.test_expr.o->MySymbol()
A:sympy.core.tests.test_expr.a->Add(1, Float('1.' + '9' * 27, ''), evaluate=0)
A:sympy.core.tests.test_expr.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.core.tests.test_expr.(a, b, c)->symbols('a, b, c')
A:sympy.core.tests.test_expr.(n1, n2, n3)->symbols('n1:4', commutative=False)
A:sympy.core.tests.test_expr.b->Wild('b')
A:sympy.core.tests.test_expr.g->g.expand().expand()
A:sympy.core.tests.test_expr.p->Symbol('p', positive=True)
A:sympy.core.tests.test_expr.i->Integer(4400)
A:sympy.core.tests.test_expr.h->Function('h')
A:sympy.core.tests.test_expr.poly->Poly(x ** 2 + x * y * sin(z), x, y, t)
A:sympy.core.tests.test_expr.e->sqrt((a + b * t) ** 2 + (c + z * t) ** 2)
A:sympy.core.tests.test_expr.fx->D(f(x), x)
A:sympy.core.tests.test_expr.(n1, n2)->symbols('n1 n2', commutative=False)
A:sympy.core.tests.test_expr.(n, m, o, l)->symbols('n m o l', commutative=False)
A:sympy.core.tests.test_expr.(r, kappa)->symbols('r, kappa')
A:sympy.core.tests.test_expr.psi->Function('psi')
A:sympy.core.tests.test_expr.A->symbols('A', commutative=False)
A:sympy.core.tests.test_expr.x->Symbol('x', commutative=False)
A:sympy.core.tests.test_expr.(f, g)->symbols('f,g', cls=Function)
A:sympy.core.tests.test_expr.expr->Add(*args)
A:sympy.core.tests.test_expr.(z1, z2)->symbols('z1 z2', zero=True)
A:sympy.core.tests.test_expr.r->S(12345).round(-4)
A:sympy.core.tests.test_expr.q->symbols('q')
A:sympy.core.tests.test_expr.ans->S(12345).round(4)
A:sympy.core.tests.test_expr.s->Symbol('bad')
sympy.core.tests.test_expr.DummyNumber(object)
sympy.core.tests.test_expr.DummyNumber.__add__(self,a)
sympy.core.tests.test_expr.DummyNumber.__div__(self,a)
sympy.core.tests.test_expr.DummyNumber.__mul__(self,a)
sympy.core.tests.test_expr.DummyNumber.__neg__(self)
sympy.core.tests.test_expr.DummyNumber.__pos__(self)
sympy.core.tests.test_expr.DummyNumber.__pow__(self,a)
sympy.core.tests.test_expr.DummyNumber.__radd__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rdiv__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rmul__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rpow__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rsub__(self,a)
sympy.core.tests.test_expr.DummyNumber.__rtruediv__(a,b)
sympy.core.tests.test_expr.DummyNumber.__sub__(self,a)
sympy.core.tests.test_expr.DummyNumber.__truediv__(a,b)
sympy.core.tests.test_expr.F1_1(DummyNumber)
sympy.core.tests.test_expr.F1_1.__float__(self)
sympy.core.tests.test_expr.I5(DummyNumber)
sympy.core.tests.test_expr.I5.__int__(self)
sympy.core.tests.test_expr.dotest(s)
sympy.core.tests.test_expr.test_SAGE1()
sympy.core.tests.test_expr.test_SAGE2()
sympy.core.tests.test_expr.test_SAGE3()
sympy.core.tests.test_expr.test_action_verbs()
sympy.core.tests.test_expr.test_args()
sympy.core.tests.test_expr.test_args_cnc()
sympy.core.tests.test_expr.test_as_base_exp()
sympy.core.tests.test_expr.test_as_coeff_Add()
sympy.core.tests.test_expr.test_as_coeff_Mul()
sympy.core.tests.test_expr.test_as_coeff_add()
sympy.core.tests.test_expr.test_as_coeff_exponent()
sympy.core.tests.test_expr.test_as_coeff_mul()
sympy.core.tests.test_expr.test_as_coefficients_dict()
sympy.core.tests.test_expr.test_as_independent()
sympy.core.tests.test_expr.test_as_leading_term()
sympy.core.tests.test_expr.test_as_leading_term2()
sympy.core.tests.test_expr.test_as_leading_term3()
sympy.core.tests.test_expr.test_as_leading_term4()
sympy.core.tests.test_expr.test_as_leading_term_stub()
sympy.core.tests.test_expr.test_as_numer_denom()
sympy.core.tests.test_expr.test_as_ordered_factors()
sympy.core.tests.test_expr.test_as_ordered_terms()
sympy.core.tests.test_expr.test_as_poly_as_expr()
sympy.core.tests.test_expr.test_as_powers_dict()
sympy.core.tests.test_expr.test_atoms()
sympy.core.tests.test_expr.test_attribute_error()
sympy.core.tests.test_expr.test_basic()
sympy.core.tests.test_expr.test_basic_nostr()
sympy.core.tests.test_expr.test_coeff()
sympy.core.tests.test_expr.test_coeff2()
sympy.core.tests.test_expr.test_coeff2_0()
sympy.core.tests.test_expr.test_coeff_expand()
sympy.core.tests.test_expr.test_count()
sympy.core.tests.test_expr.test_doit()
sympy.core.tests.test_expr.test_equals()
sympy.core.tests.test_expr.test_expr_sorting()
sympy.core.tests.test_expr.test_extract_branch_factor()
sympy.core.tests.test_expr.test_extractions()
sympy.core.tests.test_expr.test_find()
sympy.core.tests.test_expr.test_float_0()
sympy.core.tests.test_expr.test_float_0_fail()
sympy.core.tests.test_expr.test_free_symbols()
sympy.core.tests.test_expr.test_has_basics()
sympy.core.tests.test_expr.test_has_integrals()
sympy.core.tests.test_expr.test_has_iterative()
sympy.core.tests.test_expr.test_has_multiple()
sympy.core.tests.test_expr.test_has_physics()
sympy.core.tests.test_expr.test_has_piecewise()
sympy.core.tests.test_expr.test_has_polys()
sympy.core.tests.test_expr.test_has_tuple()
sympy.core.tests.test_expr.test_has_units()
sympy.core.tests.test_expr.test_ibasic()
sympy.core.tests.test_expr.test_identity_removal()
sympy.core.tests.test_expr.test_integrate()
sympy.core.tests.test_expr.test_is_algebraic_expr()
sympy.core.tests.test_expr.test_is_constant()
sympy.core.tests.test_expr.test_is_number()
sympy.core.tests.test_expr.test_is_polynomial()
sympy.core.tests.test_expr.test_is_rational_function()
sympy.core.tests.test_expr.test_issue_4199()
sympy.core.tests.test_expr.test_issue_4963()
sympy.core.tests.test_expr.test_issue_5226()
sympy.core.tests.test_expr.test_issue_5300()
sympy.core.tests.test_expr.test_issue_5843()
sympy.core.tests.test_expr.test_issue_6325()
sympy.core.tests.test_expr.test_issue_7426()
sympy.core.tests.test_expr.test_leadterm()
sympy.core.tests.test_expr.test_leadterm2()
sympy.core.tests.test_expr.test_leadterm3()
sympy.core.tests.test_expr.test_len()
sympy.core.tests.test_expr.test_new_rawargs()
sympy.core.tests.test_expr.test_noncommutative_expand_issue_3757()
sympy.core.tests.test_expr.test_nonzero()
sympy.core.tests.test_expr.test_primitive()
sympy.core.tests.test_expr.test_random()
sympy.core.tests.test_expr.test_relational()
sympy.core.tests.test_expr.test_relational_assumptions()
sympy.core.tests.test_expr.test_relational_noncommutative()
sympy.core.tests.test_expr.test_replace()
sympy.core.tests.test_expr.test_round()
sympy.core.tests.test_expr.test_round_exception_nostr()
sympy.core.tests.test_expr.test_series_expansion_for_uniform_order()
sympy.core.tests.test_expr.test_sort_key_atomic_expr()
sympy.tests.test_expr.DummyNumber(object)
sympy.tests.test_expr.DummyNumber.__add__(self,a)
sympy.tests.test_expr.DummyNumber.__div__(self,a)
sympy.tests.test_expr.DummyNumber.__mul__(self,a)
sympy.tests.test_expr.DummyNumber.__neg__(self)
sympy.tests.test_expr.DummyNumber.__pos__(self)
sympy.tests.test_expr.DummyNumber.__pow__(self,a)
sympy.tests.test_expr.DummyNumber.__radd__(self,a)
sympy.tests.test_expr.DummyNumber.__rdiv__(self,a)
sympy.tests.test_expr.DummyNumber.__rmul__(self,a)
sympy.tests.test_expr.DummyNumber.__rpow__(self,a)
sympy.tests.test_expr.DummyNumber.__rsub__(self,a)
sympy.tests.test_expr.DummyNumber.__rtruediv__(a,b)
sympy.tests.test_expr.DummyNumber.__sub__(self,a)
sympy.tests.test_expr.DummyNumber.__truediv__(a,b)
sympy.tests.test_expr.F1_1(DummyNumber)
sympy.tests.test_expr.F1_1.__float__(self)
sympy.tests.test_expr.I5(DummyNumber)
sympy.tests.test_expr.I5.__int__(self)
sympy.tests.test_expr.dotest(s)
sympy.tests.test_expr.test_SAGE1()
sympy.tests.test_expr.test_SAGE2()
sympy.tests.test_expr.test_SAGE3()
sympy.tests.test_expr.test_action_verbs()
sympy.tests.test_expr.test_args()
sympy.tests.test_expr.test_args_cnc()
sympy.tests.test_expr.test_as_base_exp()
sympy.tests.test_expr.test_as_coeff_Add()
sympy.tests.test_expr.test_as_coeff_Mul()
sympy.tests.test_expr.test_as_coeff_add()
sympy.tests.test_expr.test_as_coeff_exponent()
sympy.tests.test_expr.test_as_coeff_mul()
sympy.tests.test_expr.test_as_coefficients_dict()
sympy.tests.test_expr.test_as_independent()
sympy.tests.test_expr.test_as_leading_term()
sympy.tests.test_expr.test_as_leading_term2()
sympy.tests.test_expr.test_as_leading_term3()
sympy.tests.test_expr.test_as_leading_term4()
sympy.tests.test_expr.test_as_leading_term_stub()
sympy.tests.test_expr.test_as_numer_denom()
sympy.tests.test_expr.test_as_ordered_factors()
sympy.tests.test_expr.test_as_ordered_terms()
sympy.tests.test_expr.test_as_poly_as_expr()
sympy.tests.test_expr.test_as_powers_dict()
sympy.tests.test_expr.test_atoms()
sympy.tests.test_expr.test_attribute_error()
sympy.tests.test_expr.test_basic()
sympy.tests.test_expr.test_basic_nostr()
sympy.tests.test_expr.test_coeff()
sympy.tests.test_expr.test_coeff2()
sympy.tests.test_expr.test_coeff2_0()
sympy.tests.test_expr.test_coeff_expand()
sympy.tests.test_expr.test_count()
sympy.tests.test_expr.test_doit()
sympy.tests.test_expr.test_equals()
sympy.tests.test_expr.test_expr_sorting()
sympy.tests.test_expr.test_extract_branch_factor()
sympy.tests.test_expr.test_extractions()
sympy.tests.test_expr.test_find()
sympy.tests.test_expr.test_float_0()
sympy.tests.test_expr.test_float_0_fail()
sympy.tests.test_expr.test_free_symbols()
sympy.tests.test_expr.test_has_basics()
sympy.tests.test_expr.test_has_integrals()
sympy.tests.test_expr.test_has_iterative()
sympy.tests.test_expr.test_has_multiple()
sympy.tests.test_expr.test_has_physics()
sympy.tests.test_expr.test_has_piecewise()
sympy.tests.test_expr.test_has_polys()
sympy.tests.test_expr.test_has_tuple()
sympy.tests.test_expr.test_has_units()
sympy.tests.test_expr.test_ibasic()
sympy.tests.test_expr.test_identity_removal()
sympy.tests.test_expr.test_integrate()
sympy.tests.test_expr.test_is_algebraic_expr()
sympy.tests.test_expr.test_is_constant()
sympy.tests.test_expr.test_is_number()
sympy.tests.test_expr.test_is_polynomial()
sympy.tests.test_expr.test_is_rational_function()
sympy.tests.test_expr.test_issue_4199()
sympy.tests.test_expr.test_issue_4963()
sympy.tests.test_expr.test_issue_5226()
sympy.tests.test_expr.test_issue_5300()
sympy.tests.test_expr.test_issue_5843()
sympy.tests.test_expr.test_issue_6325()
sympy.tests.test_expr.test_issue_7426()
sympy.tests.test_expr.test_leadterm()
sympy.tests.test_expr.test_leadterm2()
sympy.tests.test_expr.test_leadterm3()
sympy.tests.test_expr.test_len()
sympy.tests.test_expr.test_new_rawargs()
sympy.tests.test_expr.test_noncommutative_expand_issue_3757()
sympy.tests.test_expr.test_nonzero()
sympy.tests.test_expr.test_primitive()
sympy.tests.test_expr.test_random()
sympy.tests.test_expr.test_relational()
sympy.tests.test_expr.test_relational_assumptions()
sympy.tests.test_expr.test_relational_noncommutative()
sympy.tests.test_expr.test_replace()
sympy.tests.test_expr.test_round()
sympy.tests.test_expr.test_round_exception_nostr()
sympy.tests.test_expr.test_series_expansion_for_uniform_order()
sympy.tests.test_expr.test_sort_key_atomic_expr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_subs.py----------------------------------------
A:sympy.core.tests.test_subs.n3->Rational(3)
A:sympy.core.tests.test_subs.e->r(5 / 6, 10, 5)
A:sympy.core.tests.test_subs.i->Symbol('i', integer=True)
A:sympy.core.tests.test_subs.o->Symbol('o', odd=True)
A:sympy.core.tests.test_subs.n->Symbol('n', negative=True)
A:sympy.core.tests.test_subs.x->symbols('x', real=True)
A:sympy.core.tests.test_subs.w->Symbol('w')
A:sympy.core.tests.test_subs.x1->Symbol('x1')
A:sympy.core.tests.test_subs.x2->Symbol('x2')
A:sympy.core.tests.test_subs.(a, b, c)->symbols('a b c', commutative=True)
A:sympy.core.tests.test_subs.r->Float(2.0).match(a * cos(b * x))
A:sympy.core.tests.test_subs.s->Symbol('s')
A:sympy.core.tests.test_subs.y->Symbol('y')
A:sympy.core.tests.test_subs.z->symbols('z')
A:sympy.core.tests.test_subs.f->Float(2.0)
A:sympy.core.tests.test_subs.pat->Derivative(f(x), x, x)
A:sympy.core.tests.test_subs.eq->Eq(f(x) ** 2, 16)
A:sympy.core.tests.test_subs.res->Eq(Integer(16), x)
A:sympy.core.tests.test_subs.(x, y)->symbols('x,y', commutative=False)
A:sympy.core.tests.test_subs.(c2, c3, q1p, q2p, c1, s1, s2, s3)->symbols('c2 c3 q1p q2p c1 s1 s2 s3')
A:sympy.core.tests.test_subs.(x, y, z, a, b, c)->symbols('x y z a b c')
A:sympy.core.tests.test_subs.(A, B, C)->symbols('A B C', commutative=0)
A:sympy.core.tests.test_subs.a->symbols('a', commutative=True)
A:sympy.core.tests.test_subs.(a, b)->symbols('a b', commutative=True)
A:sympy.core.tests.test_subs.(a, b, c, d, K)->symbols('a b c d K', commutative=True)
A:sympy.core.tests.test_subs.(w, x, y, z, L)->symbols('w x y z L', commutative=False)
A:sympy.core.tests.test_subs.(R, S, T, U)->symbols('R S T U', cls=Wild)
A:sympy.core.tests.test_subs.(x, y, z)->symbols('x y z')
A:sympy.core.tests.test_subs.(a, b, c, d, x, y, t)->symbols('a b c d x y t')
A:sympy.core.tests.test_subs.ans->Mul(2, y + 1, evaluate=False)
A:sympy.core.tests.test_subs.(f, g)->symbols('f g', cls=Function)
A:sympy.core.tests.test_subs.l->Lambda((x, y), sin(x) + y)
A:sympy.core.tests.test_subs.dex->Derivative(exp(x), x)
A:sympy.core.tests.test_subs.(A, B)->symbols('A B', commutative=False)
A:sympy.core.tests.test_subs.it->iter([[x, y]])
A:sympy.core.tests.test_subs.(a, b, c, d, e)->symbols('a b c d e')
A:sympy.core.tests.test_subs.reps->reps.items().items()
A:sympy.core.tests.test_subs.(a, x, y)->symbols('a x y')
A:sympy.core.tests.test_subs.(a, b, c, K)->symbols('a b c K', commutative=True)
A:sympy.core.tests.test_subs.N->Symbol('N', commutative=False)
A:sympy.core.tests.test_subs.(f, g, h, i)->symbols('f g h i', cls=Function)
A:sympy.core.tests.test_subs.p->Piecewise((g(f(x, y)), x < -1), (g(x), x <= 1))
A:sympy.core.tests.test_subs.(x0, x1)->symbols('x0 x1')
A:sympy.core.tests.test_subs.t->Symbol('t')
sympy.core.tests.test_subs.test_2arg_hack()
sympy.core.tests.test_subs.test_Function_subs()
sympy.core.tests.test_subs.test_add()
sympy.core.tests.test_subs.test_bug()
sympy.core.tests.test_subs.test_deriv_sub_bug3()
sympy.core.tests.test_subs.test_derivative_subs()
sympy.core.tests.test_subs.test_derivative_subs2()
sympy.core.tests.test_subs.test_derivative_subs3()
sympy.core.tests.test_subs.test_dict_ambigous()
sympy.core.tests.test_subs.test_dict_set()
sympy.core.tests.test_subs.test_division()
sympy.core.tests.test_subs.test_equality_subs1()
sympy.core.tests.test_subs.test_equality_subs2()
sympy.core.tests.test_subs.test_functions_subs()
sympy.core.tests.test_subs.test_issue_2877()
sympy.core.tests.test_subs.test_issue_3742()
sympy.core.tests.test_subs.test_issue_4680()
sympy.core.tests.test_subs.test_issue_5217()
sympy.core.tests.test_subs.test_issue_5261()
sympy.core.tests.test_subs.test_issue_5284()
sympy.core.tests.test_subs.test_issue_5651()
sympy.core.tests.test_subs.test_issue_5910()
sympy.core.tests.test_subs.test_issue_6075()
sympy.core.tests.test_subs.test_issue_6079()
sympy.core.tests.test_subs.test_issue_6158()
sympy.core.tests.test_subs.test_issue_6419_6421()
sympy.core.tests.test_subs.test_issue_6559()
sympy.core.tests.test_subs.test_issue_6923()
sympy.core.tests.test_subs.test_logexppow()
sympy.core.tests.test_subs.test_mul()
sympy.core.tests.test_subs.test_mul2()
sympy.core.tests.test_subs.test_no_arith_subs_on_floats()
sympy.core.tests.test_subs.test_noncommutative_subs()
sympy.core.tests.test_subs.test_powers()
sympy.core.tests.test_subs.test_simultaneous_subs()
sympy.core.tests.test_subs.test_subbug1()
sympy.core.tests.test_subs.test_subbug2()
sympy.core.tests.test_subs.test_subs()
sympy.core.tests.test_subs.test_subs_basic_funcs()
sympy.core.tests.test_subs.test_subs_commutative()
sympy.core.tests.test_subs.test_subs_constants()
sympy.core.tests.test_subs.test_subs_dict()
sympy.core.tests.test_subs.test_subs_dict1()
sympy.core.tests.test_subs.test_subs_issue_4009()
sympy.core.tests.test_subs.test_subs_iter()
sympy.core.tests.test_subs.test_subs_mixed()
sympy.core.tests.test_subs.test_subs_noncommutative()
sympy.core.tests.test_subs.test_subs_simple()
sympy.core.tests.test_subs.test_subs_wild()
sympy.core.tests.test_subs.test_trigonometric()
sympy.tests.test_subs.test_2arg_hack()
sympy.tests.test_subs.test_Function_subs()
sympy.tests.test_subs.test_add()
sympy.tests.test_subs.test_bug()
sympy.tests.test_subs.test_deriv_sub_bug3()
sympy.tests.test_subs.test_derivative_subs()
sympy.tests.test_subs.test_derivative_subs2()
sympy.tests.test_subs.test_derivative_subs3()
sympy.tests.test_subs.test_dict_ambigous()
sympy.tests.test_subs.test_dict_set()
sympy.tests.test_subs.test_division()
sympy.tests.test_subs.test_equality_subs1()
sympy.tests.test_subs.test_equality_subs2()
sympy.tests.test_subs.test_functions_subs()
sympy.tests.test_subs.test_issue_2877()
sympy.tests.test_subs.test_issue_3742()
sympy.tests.test_subs.test_issue_4680()
sympy.tests.test_subs.test_issue_5217()
sympy.tests.test_subs.test_issue_5261()
sympy.tests.test_subs.test_issue_5284()
sympy.tests.test_subs.test_issue_5651()
sympy.tests.test_subs.test_issue_5910()
sympy.tests.test_subs.test_issue_6075()
sympy.tests.test_subs.test_issue_6079()
sympy.tests.test_subs.test_issue_6158()
sympy.tests.test_subs.test_issue_6419_6421()
sympy.tests.test_subs.test_issue_6559()
sympy.tests.test_subs.test_issue_6923()
sympy.tests.test_subs.test_logexppow()
sympy.tests.test_subs.test_mul()
sympy.tests.test_subs.test_mul2()
sympy.tests.test_subs.test_no_arith_subs_on_floats()
sympy.tests.test_subs.test_noncommutative_subs()
sympy.tests.test_subs.test_powers()
sympy.tests.test_subs.test_simultaneous_subs()
sympy.tests.test_subs.test_subbug1()
sympy.tests.test_subs.test_subbug2()
sympy.tests.test_subs.test_subs()
sympy.tests.test_subs.test_subs_basic_funcs()
sympy.tests.test_subs.test_subs_commutative()
sympy.tests.test_subs.test_subs_constants()
sympy.tests.test_subs.test_subs_dict()
sympy.tests.test_subs.test_subs_dict1()
sympy.tests.test_subs.test_subs_issue_4009()
sympy.tests.test_subs.test_subs_iter()
sympy.tests.test_subs.test_subs_mixed()
sympy.tests.test_subs.test_subs_noncommutative()
sympy.tests.test_subs.test_subs_simple()
sympy.tests.test_subs.test_subs_wild()
sympy.tests.test_subs.test_trigonometric()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_cache.py----------------------------------------
sympy.core.tests.test_cache.test_cacheit_doc()
sympy.core.tests.test_cache.test_cacheit_unhashable()
sympy.tests.test_cache.test_cacheit_doc()
sympy.tests.test_cache.test_cacheit_unhashable()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_sympify.py----------------------------------------
A:sympy.core.tests.test_sympify.v->sympify('exp(x)')
A:sympy.core.tests.test_sympify.n1->Rational(1, 2)
A:sympy.core.tests.test_sympify.value->sympify(mpmath.mpf(1.0))
A:sympy.core.tests.test_sympify.a->sympify('Integer(4)')
A:sympy.core.tests.test_sympify.p->sympify(Point(0, 1))
A:sympy.core.tests.test_sympify.x->Symbol('x')
A:sympy.core.tests.test_sympify.f->Function('f')
A:sympy.core.tests.test_sympify.y->Symbol('y')
A:sympy.core.tests.test_sympify.i5->I5()
A:sympy.core.tests.test_sympify.i5b->I5b()
A:sympy.core.tests.test_sympify.i5c->I5c()
A:sympy.core.tests.test_sympify.f1_1->F1_1()
A:sympy.core.tests.test_sympify.f1_1b->F1_1b()
A:sympy.core.tests.test_sympify.f1_1c->F1_1c()
A:sympy.core.tests.test_sympify.C->Symbol('C')
A:sympy.core.tests.test_sympify.exp1->sympify('C')
A:sympy.core.tests.test_sympify.exp2->sympify('C', vars)
A:sympy.core.tests.test_sympify.L->sympify(Line(p, (1, 0)))
A:sympy.core.tests.test_sympify.ss->kernS(s)
A:sympy.core.tests.test_sympify.s->'-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'.replace('x', '_kern')
sympy.core.tests.test_sympify.test_S_sympify()
sympy.core.tests.test_sympify.test__sympify()
sympy.core.tests.test_sympify.test_evaluate_false()
sympy.core.tests.test_sympify.test_geometry()
sympy.core.tests.test_sympify.test_int_float()
sympy.core.tests.test_sympify.test_issue_3218()
sympy.core.tests.test_sympify.test_issue_3538()
sympy.core.tests.test_sympify.test_issue_3595()
sympy.core.tests.test_sympify.test_issue_3982()
sympy.core.tests.test_sympify.test_issue_4133()
sympy.core.tests.test_sympify.test_issue_4788()
sympy.core.tests.test_sympify.test_issue_4798_None()
sympy.core.tests.test_sympify.test_issue_4988_builtins()
sympy.core.tests.test_sympify.test_issue_5596()
sympy.core.tests.test_sympify.test_issue_6540_6552()
sympy.core.tests.test_sympify.test_kernS()
sympy.core.tests.test_sympify.test_lambda()
sympy.core.tests.test_sympify.test_lambda_raises()
sympy.core.tests.test_sympify.test_sage()
sympy.core.tests.test_sympify.test_sympify1()
sympy.core.tests.test_sympify.test_sympify2()
sympy.core.tests.test_sympify.test_sympify3()
sympy.core.tests.test_sympify.test_sympify4()
sympy.core.tests.test_sympify.test_sympify_Fraction()
sympy.core.tests.test_sympify.test_sympify_bool()
sympy.core.tests.test_sympify.test_sympify_factorial()
sympy.core.tests.test_sympify.test_sympify_float()
sympy.core.tests.test_sympify.test_sympify_function()
sympy.core.tests.test_sympify.test_sympify_gmpy()
sympy.core.tests.test_sympify.test_sympify_keywords()
sympy.core.tests.test_sympify.test_sympify_mpmath()
sympy.core.tests.test_sympify.test_sympify_poly()
sympy.core.tests.test_sympify.test_sympify_raises()
sympy.core.tests.test_sympify.test_sympify_text()
sympy.core.tests.test_sympify.test_sympifyit()
sympy.core.tests.test_sympify.test_sympyify_iterables()
sympy.tests.test_sympify.test_S_sympify()
sympy.tests.test_sympify.test__sympify()
sympy.tests.test_sympify.test_evaluate_false()
sympy.tests.test_sympify.test_geometry()
sympy.tests.test_sympify.test_int_float()
sympy.tests.test_sympify.test_issue_3218()
sympy.tests.test_sympify.test_issue_3538()
sympy.tests.test_sympify.test_issue_3595()
sympy.tests.test_sympify.test_issue_3982()
sympy.tests.test_sympify.test_issue_4133()
sympy.tests.test_sympify.test_issue_4788()
sympy.tests.test_sympify.test_issue_4798_None()
sympy.tests.test_sympify.test_issue_4988_builtins()
sympy.tests.test_sympify.test_issue_5596()
sympy.tests.test_sympify.test_issue_6540_6552()
sympy.tests.test_sympify.test_kernS()
sympy.tests.test_sympify.test_lambda()
sympy.tests.test_sympify.test_lambda_raises()
sympy.tests.test_sympify.test_sage()
sympy.tests.test_sympify.test_sympify1()
sympy.tests.test_sympify.test_sympify2()
sympy.tests.test_sympify.test_sympify3()
sympy.tests.test_sympify.test_sympify4()
sympy.tests.test_sympify.test_sympify_Fraction()
sympy.tests.test_sympify.test_sympify_bool()
sympy.tests.test_sympify.test_sympify_factorial()
sympy.tests.test_sympify.test_sympify_float()
sympy.tests.test_sympify.test_sympify_function()
sympy.tests.test_sympify.test_sympify_gmpy()
sympy.tests.test_sympify.test_sympify_keywords()
sympy.tests.test_sympify.test_sympify_mpmath()
sympy.tests.test_sympify.test_sympify_poly()
sympy.tests.test_sympify.test_sympify_raises()
sympy.tests.test_sympify.test_sympify_text()
sympy.tests.test_sympify.test_sympifyit()
sympy.tests.test_sympify.test_sympyify_iterables()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/tests/test_equal.py----------------------------------------
A:sympy.core.tests.test_equal.b->Symbol('b')
A:sympy.core.tests.test_equal.a->Symbol('a')
A:sympy.core.tests.test_equal.x->Symbol('x')
A:sympy.core.tests.test_equal.e1->exp(1 * x)
A:sympy.core.tests.test_equal.y->Symbol('y')
A:sympy.core.tests.test_equal.e2->exp(y + 1 / y)
A:sympy.core.tests.test_equal.e3->exp(x)
A:sympy.core.tests.test_equal.t->T()
A:sympy.core.tests.test_equal.u->Dummy('u')
sympy.core.tests.test_equal.test_cmp_bug1()
sympy.core.tests.test_equal.test_cmp_bug2()
sympy.core.tests.test_equal.test_cmp_issue_4357()
sympy.core.tests.test_equal.test_dummy_eq()
sympy.core.tests.test_equal.test_equal()
sympy.core.tests.test_equal.test_expevalbug()
sympy.tests.test_equal.test_cmp_bug1()
sympy.tests.test_equal.test_cmp_bug2()
sympy.tests.test_equal.test_cmp_issue_4357()
sympy.tests.test_equal.test_dummy_eq()
sympy.tests.test_equal.test_equal()
sympy.tests.test_equal.test_expevalbug()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_assumptions.py----------------------------------------
A:sympy.core.benchmarks.bench_assumptions.x->Symbol('x')
A:sympy.core.benchmarks.bench_assumptions.i3->Integer(3)
sympy.core.benchmarks.bench_assumptions.timeit_Integer_is_irrational()
sympy.core.benchmarks.bench_assumptions.timeit_x_is_integer()
sympy.core.benchmarks.bench_timeit_Integer_is_irrational()
sympy.core.benchmarks.bench_timeit_x_is_integer()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_numbers.py----------------------------------------
A:sympy.core.benchmarks.bench_numbers.i3->Integer(3)
A:sympy.core.benchmarks.bench_numbers.i4->Integer(4)
A:sympy.core.benchmarks.bench_numbers.r34->Rational(3, 4)
A:sympy.core.benchmarks.bench_numbers.q45->Rational(4, 5)
sympy.benchmarks.bench_numbers.timeit_Integer_abs()
sympy.benchmarks.bench_numbers.timeit_Integer_add_Rational()
sympy.benchmarks.bench_numbers.timeit_Integer_add_i1()
sympy.benchmarks.bench_numbers.timeit_Integer_add_ij()
sympy.benchmarks.bench_numbers.timeit_Integer_create()
sympy.benchmarks.bench_numbers.timeit_Integer_ed_Rational()
sympy.benchmarks.bench_numbers.timeit_Integer_eq_i3()
sympy.benchmarks.bench_numbers.timeit_Integer_int()
sympy.benchmarks.bench_numbers.timeit_Integer_mul_Rational()
sympy.benchmarks.bench_numbers.timeit_Integer_mul_i4()
sympy.benchmarks.bench_numbers.timeit_Integer_mul_ij()
sympy.benchmarks.bench_numbers.timeit_Integer_neg()
sympy.benchmarks.bench_numbers.timeit_Integer_sub()
sympy.benchmarks.bench_numbers.timeit_Rational_add_r1()
sympy.benchmarks.bench_numbers.timeit_Rational_add_rq()
sympy.benchmarks.bench_numbers.timeit_abs_pi()
sympy.benchmarks.bench_numbers.timeit_integer_nthroot()
sympy.benchmarks.bench_numbers.timeit_neg_one()
sympy.benchmarks.bench_numbers.timeit_neg_oo()
sympy.benchmarks.bench_numbers.timeit_number_igcd_23_17()
sympy.benchmarks.bench_numbers.timeit_number_igcd_60_3600()
sympy.core.benchmarks.bench_numbers.timeit_Integer_abs()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_i1()
sympy.core.benchmarks.bench_numbers.timeit_Integer_add_ij()
sympy.core.benchmarks.bench_numbers.timeit_Integer_create()
sympy.core.benchmarks.bench_numbers.timeit_Integer_ed_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_eq_i3()
sympy.core.benchmarks.bench_numbers.timeit_Integer_int()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_Rational()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_i4()
sympy.core.benchmarks.bench_numbers.timeit_Integer_mul_ij()
sympy.core.benchmarks.bench_numbers.timeit_Integer_neg()
sympy.core.benchmarks.bench_numbers.timeit_Integer_sub()
sympy.core.benchmarks.bench_numbers.timeit_Rational_add_r1()
sympy.core.benchmarks.bench_numbers.timeit_Rational_add_rq()
sympy.core.benchmarks.bench_numbers.timeit_abs_pi()
sympy.core.benchmarks.bench_numbers.timeit_integer_nthroot()
sympy.core.benchmarks.bench_numbers.timeit_neg_one()
sympy.core.benchmarks.bench_numbers.timeit_neg_oo()
sympy.core.benchmarks.bench_numbers.timeit_number_igcd_23_17()
sympy.core.benchmarks.bench_numbers.timeit_number_igcd_60_3600()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_basic.py----------------------------------------
A:sympy.core.benchmarks.bench_basic.(x, y)->symbols('x,y')
sympy.benchmarks.bench_basic.timeit_C_lookup()
sympy.benchmarks.bench_basic.timeit_S_lookup()
sympy.benchmarks.bench_basic.timeit_Symbol_eq_xy()
sympy.benchmarks.bench_basic.timeit_Symbol_meth_lookup()
sympy.core.benchmarks.bench_basic.timeit_C_lookup()
sympy.core.benchmarks.bench_basic.timeit_S_lookup()
sympy.core.benchmarks.bench_basic.timeit_Symbol_eq_xy()
sympy.core.benchmarks.bench_basic.timeit_Symbol_meth_lookup()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_sympify.py----------------------------------------
A:sympy.core.benchmarks.bench_sympify.x->Symbol('x')
sympy.benchmarks.bench_sympify.timeit_sympify_1()
sympy.benchmarks.bench_sympify.timeit_sympify_x()
sympy.core.benchmarks.bench_sympify.timeit_sympify_1()
sympy.core.benchmarks.bench_sympify.timeit_sympify_x()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_expand.py----------------------------------------
A:sympy.core.benchmarks.bench_expand.(x, y, z)->symbols('x,y,z')
sympy.benchmarks.bench_expand.bench_expand_32()
sympy.benchmarks.bench_expand.timeit_expand_complex_number_1()
sympy.benchmarks.bench_expand.timeit_expand_complex_number_2()
sympy.benchmarks.bench_expand.timeit_expand_nothing_todo()
sympy.core.benchmarks.bench_expand.bench_expand_32()
sympy.core.benchmarks.bench_expand.timeit_expand_complex_number_1()
sympy.core.benchmarks.bench_expand.timeit_expand_complex_number_2()
sympy.core.benchmarks.bench_expand.timeit_expand_nothing_todo()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/core/benchmarks/bench_arit.py----------------------------------------
A:sympy.core.benchmarks.bench_arit.(x, y, z)->symbols('x,y,z')
sympy.benchmarks.bench_arit.timeit_Add_1x()
sympy.benchmarks.bench_arit.timeit_Add_x05()
sympy.benchmarks.bench_arit.timeit_Add_x1()
sympy.benchmarks.bench_arit.timeit_Add_xy()
sympy.benchmarks.bench_arit.timeit_Add_xyz()
sympy.benchmarks.bench_arit.timeit_Div_2y()
sympy.benchmarks.bench_arit.timeit_Div_xy()
sympy.benchmarks.bench_arit.timeit_Mul_xy()
sympy.benchmarks.bench_arit.timeit_Mul_xyz()
sympy.benchmarks.bench_arit.timeit_neg()
sympy.core.benchmarks.bench_arit.timeit_Add_1x()
sympy.core.benchmarks.bench_arit.timeit_Add_x05()
sympy.core.benchmarks.bench_arit.timeit_Add_x1()
sympy.core.benchmarks.bench_arit.timeit_Add_xy()
sympy.core.benchmarks.bench_arit.timeit_Add_xyz()
sympy.core.benchmarks.bench_arit.timeit_Div_2y()
sympy.core.benchmarks.bench_arit.timeit_Div_xy()
sympy.core.benchmarks.bench_arit.timeit_Mul_xy()
sympy.core.benchmarks.bench_arit.timeit_Mul_xyz()
sympy.core.benchmarks.bench_arit.timeit_neg()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/plot_implicit.py----------------------------------------
A:sympy.plotting.plot_implicit.self.expr->sympify(expr)
A:sympy.plotting.plot_implicit.self.var_x->sympify(var_start_end_x[0])
A:sympy.plotting.plot_implicit.self.start_x->float(var_start_end_x[1])
A:sympy.plotting.plot_implicit.self.end_x->float(var_start_end_x[2])
A:sympy.plotting.plot_implicit.self.var_y->sympify(var_start_end_y[0])
A:sympy.plotting.plot_implicit.self.start_y->float(var_start_end_y[1])
A:sympy.plotting.plot_implicit.self.end_y->float(var_start_end_y[2])
A:sympy.plotting.plot_implicit.func->vectorized_lambdify((self.var_x, self.var_y), expr)
A:sympy.plotting.plot_implicit.xinterval->interval(self.start_x, self.end_x)
A:sympy.plotting.plot_implicit.yinterval->interval(self.start_y, self.end_y)
A:sympy.plotting.plot_implicit.temp->func(xinterval, yinterval)
A:sympy.plotting.plot_implicit.np->import_module('numpy')
A:sympy.plotting.plot_implicit.xsample->import_module('numpy').linspace(self.start_x, self.end_x, 33)
A:sympy.plotting.plot_implicit.ysample->import_module('numpy').linspace(self.start_y, self.end_y, 33)
A:sympy.plotting.plot_implicit.func_eval->func(intervalx, intervaly)
A:sympy.plotting.plot_implicit.a->interval(intervalx.start, avgx)
A:sympy.plotting.plot_implicit.b->interval(avgx, intervalx.end)
A:sympy.plotting.plot_implicit.c->interval(intervaly.start, avgy)
A:sympy.plotting.plot_implicit.d->interval(avgy, intervaly.end)
A:sympy.plotting.plot_implicit.(interval_list, plot_list_temp)->refine_pixels(interval_list)
A:sympy.plotting.plot_implicit.xarray->import_module('numpy').linspace(self.start_x, self.end_x, self.nb_of_points)
A:sympy.plotting.plot_implicit.yarray->import_module('numpy').linspace(self.start_y, self.end_y, self.nb_of_points)
A:sympy.plotting.plot_implicit.(x_grid, y_grid)->import_module('numpy').meshgrid(xarray, yarray)
A:sympy.plotting.plot_implicit.z_grid->func(x_grid, y_grid)
A:sympy.plotting.plot_implicit.expr->Eq(expr, 0)
A:sympy.plotting.plot_implicit.default_range->Tuple(-5, 5)
A:sympy.plotting.plot_implicit.xyvar->list(_sort_gens(free_symbols))
A:sympy.plotting.plot_implicit.var_start_end_x->_range_tuple(xyvar[0])
A:sympy.plotting.plot_implicit.var_start_end_y->_range_tuple(xyvar[1])
A:sympy.plotting.plot_implicit.use_interval->kwargs.pop('adaptive', True)
A:sympy.plotting.plot_implicit.nb_of_points->kwargs.pop('points', 300)
A:sympy.plotting.plot_implicit.depth->kwargs.pop('depth', 0)
A:sympy.plotting.plot_implicit.series_argument->ImplicitSeries(expr, var_start_end_x, var_start_end_y, has_equality, use_interval, depth, nb_of_points)
A:sympy.plotting.plot_implicit.show->kwargs.pop('show', True)
A:sympy.plotting.plot_implicit.kwargs['xlim']->tuple((float(x) for x in var_start_end_x[1:]))
A:sympy.plotting.plot_implicit.kwargs['ylim']->tuple((float(y) for y in var_start_end_y[1:]))
A:sympy.plotting.plot_implicit.p->Plot(series_argument, **kwargs)
sympy.plot_implicit(expr,x_var=None,y_var=None,**kwargs)
sympy.plot_implicit.ImplicitSeries(self,expr,var_start_end_x,var_start_end_y,has_equality,use_interval_math,depth,nb_of_points)
sympy.plot_implicit.ImplicitSeries.__str__(self)
sympy.plot_implicit.ImplicitSeries._get_meshes_grid(self)
sympy.plot_implicit.ImplicitSeries._get_raster_interval(self,func)
sympy.plot_implicit.ImplicitSeries.get_raster(self)
sympy.plotting.plot_implicit.ImplicitSeries(self,expr,var_start_end_x,var_start_end_y,has_equality,use_interval_math,depth,nb_of_points)
sympy.plotting.plot_implicit.ImplicitSeries.__init__(self,expr,var_start_end_x,var_start_end_y,has_equality,use_interval_math,depth,nb_of_points)
sympy.plotting.plot_implicit.ImplicitSeries.__str__(self)
sympy.plotting.plot_implicit.ImplicitSeries._get_meshes_grid(self)
sympy.plotting.plot_implicit.ImplicitSeries._get_raster_interval(self,func)
sympy.plotting.plot_implicit.ImplicitSeries.get_raster(self)
sympy.plotting.plot_implicit.plot_implicit(expr,x_var=None,y_var=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/experimental_lambdify.py----------------------------------------
A:sympy.plotting.experimental_lambdify.self.lambda_func->experimental_lambdify(self.args, self.expr, use_evalf=True, complex_wrap_evalf=True)
A:sympy.plotting.experimental_lambdify.np->import_module('numpy')
A:sympy.plotting.experimental_lambdify.np_old_err->import_module('numpy').seterr(invalid='raise')
A:sympy.plotting.experimental_lambdify.results->import_module('numpy').ma.masked_where(np.abs(results.imag) > 1e-07 * np.abs(results), results.real, copy=False)
A:sympy.plotting.experimental_lambdify.self.vector_func->import_module('numpy').vectorize(self.lambda_func, otypes=[np.complex])
A:sympy.plotting.experimental_lambdify.args->complex(args)
A:sympy.plotting.experimental_lambdify.result->self.lambda_func(args)
A:sympy.plotting.experimental_lambdify.l->Lambdifier(*args, **kwargs)
A:sympy.plotting.experimental_lambdify.syms->numbered_symbols(exclude=expr.free_symbols)
A:sympy.plotting.experimental_lambdify.expr->expr.xreplace(dict(zip(args, newargs))).xreplace(dict(zip(args, newargs)))
A:sympy.plotting.experimental_lambdify.argstr->self.tree2str_translate(argtree)
A:sympy.plotting.experimental_lambdify.self.dict_str->self.get_dict_str()
A:sympy.plotting.experimental_lambdify.self.dict_fun->self.get_dict_fun()
A:sympy.plotting.experimental_lambdify.exprstr->str(expr)
A:sympy.plotting.experimental_lambdify.newexpr->self.tree2str_translate(self.str2tree(exprstr))
A:sympy.plotting.experimental_lambdify.dict_str->dict(self.builtin_not_functions)
A:sympy.plotting.experimental_lambdify.dict_fun->dict(self.builtin_functions_different)
A:sympy.plotting.experimental_lambdify.first_par->re.search('(\\w+\\()', exprstr)
A:sympy.plotting.experimental_lambdify.start->re.search('(\\w+\\()', exprstr).start()
A:sympy.plotting.experimental_lambdify.end->re.search('(\\w+\\()', exprstr).end()
A:sympy.plotting.experimental_lambdify.func_tail->self.str2tree(tail[:i])
A:sympy.plotting.experimental_lambdify.tail->self.str2tree(tail[i:])
A:sympy.plotting.experimental_lambdify.estr->re.sub(pattern, repl, estr)
A:sympy.plotting.experimental_lambdify.funcname->str(expr.func)
A:sympy.plotting.experimental_lambdify.m->re.match(r, funcname)
A:sympy.plotting.experimental_lambdify.atoms->expr.xreplace(dict(zip(args, newargs))).xreplace(dict(zip(args, newargs))).atoms(Symbol, NumberSymbol, I, zoo, oo)
sympy.plotting.experimental_lambdify.Lambdifier(self,args,expr,print_lambda=False,use_evalf=False,float_wrap_evalf=False,complex_wrap_evalf=False,use_np=False,use_python_math=False,use_python_cmath=False,use_interval=False)
sympy.plotting.experimental_lambdify.Lambdifier.__init__(self,args,expr,print_lambda=False,use_evalf=False,float_wrap_evalf=False,complex_wrap_evalf=False,use_np=False,use_python_math=False,use_python_cmath=False,use_interval=False)
sympy.plotting.experimental_lambdify.Lambdifier.get_dict_fun(self)
sympy.plotting.experimental_lambdify.Lambdifier.get_dict_str(self)
sympy.plotting.experimental_lambdify.Lambdifier.str2tree(self,exprstr)
sympy.plotting.experimental_lambdify.Lambdifier.sympy_atoms_namespace(expr)
sympy.plotting.experimental_lambdify.Lambdifier.sympy_expression_namespace(cls,expr)
sympy.plotting.experimental_lambdify.Lambdifier.translate_func(self,func_name,argtree)
sympy.plotting.experimental_lambdify.Lambdifier.translate_str(self,estr)
sympy.plotting.experimental_lambdify.Lambdifier.tree2str(cls,tree)
sympy.plotting.experimental_lambdify.Lambdifier.tree2str_translate(self,tree)
sympy.plotting.experimental_lambdify.experimental_lambdify(*args,**kwargs)
sympy.plotting.experimental_lambdify.lambdify(self,args,expr)
sympy.plotting.experimental_lambdify.lambdify.__init__(self,args,expr)
sympy.plotting.experimental_lambdify.vectorized_lambdify(self,args,expr)
sympy.plotting.experimental_lambdify.vectorized_lambdify.__init__(self,args,expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/textplot.py----------------------------------------
A:sympy.plotting.textplot.f->lambdify([x], expr)
A:sympy.plotting.textplot.a->float(a)
A:sympy.plotting.textplot.b->float(b)
A:sympy.plotting.textplot.y[x]->int(float(H) * (y[x] - mi) / (ma - mi))
A:sympy.plotting.textplot.ma->max(y)
A:sympy.plotting.textplot.mi->min(y)
A:sympy.plotting.textplot.(mi, ma)->sorted([0, 2 * ma])
A:sympy.plotting.textplot.s->s.replace(' ', '-').replace(' ', '-')
sympy.plotting.textplot.textplot(expr,a,b,W=55,H=18)
sympy.textplot(expr,a,b,W=55,H=18)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/plot.py----------------------------------------
A:sympy.plotting.plot.self._backend->self.backend(self)
A:sympy.plotting.plot.np->import_module('numpy')
A:sympy.plotting.plot.points->s.get_raster()
A:sympy.plotting.plot.f->vectorized_lambdify((self.var_x, self.var_y), self.expr)
A:sympy.plotting.plot.arity->len(getargspec(c)[0])
A:sympy.plotting.plot.x->self.get_parameter_points()
A:sympy.plotting.plot.variables->list(map(centers_of_faces, self.get_meshes()))
A:sympy.plotting.plot.self.list_x->import_module('numpy').array(list_x)
A:sympy.plotting.plot.self.list_y->import_module('numpy').array(list_y)
A:sympy.plotting.plot.self.expr->sympify(expr)
A:sympy.plotting.plot.self.label->str(self.expr)
A:sympy.plotting.plot.self.var->sympify(var_start_end[0])
A:sympy.plotting.plot.self.start->float(var_start_end[1])
A:sympy.plotting.plot.self.end->float(var_start_end[2])
A:sympy.plotting.plot.self.nb_of_points->kwargs.get('nb_of_points', 300)
A:sympy.plotting.plot.self.adaptive->kwargs.get('adaptive', True)
A:sympy.plotting.plot.self.depth->kwargs.get('depth', 12)
A:sympy.plotting.plot.self.line_color->kwargs.get('line_color', None)
A:sympy.plotting.plot.ynew->f_y(param_new)
A:sympy.plotting.plot.new_point->import_module('numpy').array([xnew, ynew])
A:sympy.plotting.plot.xarray->import_module('numpy').linspace(p[0], q[0], 10)
A:sympy.plotting.plot.yarray->list(map(f, xarray))
A:sympy.plotting.plot.f_start->f(self.start)
A:sympy.plotting.plot.f_end->f(self.end)
A:sympy.plotting.plot.list_x->fx(param)
A:sympy.plotting.plot.list_y->fy(param)
A:sympy.plotting.plot.self.expr_x->sympify(expr_x)
A:sympy.plotting.plot.self.expr_y->sympify(expr_y)
A:sympy.plotting.plot.param->self.get_parameter_points()
A:sympy.plotting.plot.fx->vectorized_lambdify((self.var_u, self.var_v), self.expr_x)
A:sympy.plotting.plot.fy->vectorized_lambdify((self.var_u, self.var_v), self.expr_y)
A:sympy.plotting.plot.f_x->lambdify([self.var], self.expr_x)
A:sympy.plotting.plot.f_y->lambdify([self.var], self.expr_y)
A:sympy.plotting.plot.xnew->f_x(param_new)
A:sympy.plotting.plot.param_array->import_module('numpy').linspace(param_p, param_q, 10)
A:sympy.plotting.plot.x_array->list(map(f_x, param_array))
A:sympy.plotting.plot.y_array->list(map(f_y, param_array))
A:sympy.plotting.plot.f_start_x->f_x(self.start)
A:sympy.plotting.plot.f_start_y->f_y(self.start)
A:sympy.plotting.plot.f_end_x->f_x(self.end)
A:sympy.plotting.plot.f_end_y->f_y(self.end)
A:sympy.plotting.plot.self.expr_z->sympify(expr_z)
A:sympy.plotting.plot.fz->vectorized_lambdify((self.var_u, self.var_v), self.expr_z)
A:sympy.plotting.plot.list_z->fz(param)
A:sympy.plotting.plot.self.var_x->sympify(var_start_end_x[0])
A:sympy.plotting.plot.self.start_x->float(var_start_end_x[1])
A:sympy.plotting.plot.self.end_x->float(var_start_end_x[2])
A:sympy.plotting.plot.self.var_y->sympify(var_start_end_y[0])
A:sympy.plotting.plot.self.start_y->float(var_start_end_y[1])
A:sympy.plotting.plot.self.end_y->float(var_start_end_y[2])
A:sympy.plotting.plot.self.nb_of_points_x->kwargs.get('nb_of_points_x', 50)
A:sympy.plotting.plot.self.nb_of_points_y->kwargs.get('nb_of_points_y', 50)
A:sympy.plotting.plot.self.surface_color->kwargs.get('surface_color', None)
A:sympy.plotting.plot.(mesh_x, mesh_y)->import_module('numpy').meshgrid(np.linspace(self.start_x, self.end_x, num=self.nb_of_points_x), np.linspace(self.start_y, self.end_y, num=self.nb_of_points_y))
A:sympy.plotting.plot.self.var_u->sympify(var_start_end_u[0])
A:sympy.plotting.plot.self.start_u->float(var_start_end_u[1])
A:sympy.plotting.plot.self.end_u->float(var_start_end_u[2])
A:sympy.plotting.plot.self.var_v->sympify(var_start_end_v[0])
A:sympy.plotting.plot.self.start_v->float(var_start_end_v[1])
A:sympy.plotting.plot.self.end_v->float(var_start_end_v[2])
A:sympy.plotting.plot.self.nb_of_points_u->kwargs.get('nb_of_points_u', 50)
A:sympy.plotting.plot.self.nb_of_points_v->kwargs.get('nb_of_points_v', 50)
A:sympy.plotting.plot.(mesh_u, mesh_v)->self.get_parameter_meshes()
A:sympy.plotting.plot.self.matplotlib->import_module('matplotlib', __import__kwargs={'fromlist': ['pyplot', 'cm', 'collections']}, min_module_version='1.1.0', catch=(RuntimeError,))
A:sympy.plotting.plot.self.fig->self.plt.figure()
A:sympy.plotting.plot.self.ax->self.fig.add_subplot(111, projection='3d')
A:sympy.plotting.plot.mpl_toolkits->import_module('mpl_toolkits', __import__kwargs={'fromlist': ['mplot3d']})
A:sympy.plotting.plot.collection->self.ax.plot_surface(x, y, z, cmap=self.cm.jet, rstride=1, cstride=1, linewidth=0.1)
A:sympy.plotting.plot.(x, y, z)->s.get_meshes()
A:sympy.plotting.plot.(x, y)->_matplotlib_list(points[0])
A:sympy.plotting.plot.colormap->ListedColormap(['white', 'blue'])
A:sympy.plotting.plot.color_array->color_array.reshape(color_array.size).reshape(color_array.size)
A:sympy.plotting.plot.(xl, xh)->self.ax.get_xlim()
A:sympy.plotting.plot.(yl, yh)->self.ax.get_ylim()
A:sympy.plotting.plot.matplotlib->import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))
A:sympy.plotting.plot.dot_product->import_module('numpy').dot(vector_a, vector_b)
A:sympy.plotting.plot.vector_a_norm->import_module('numpy').linalg.norm(vector_a)
A:sympy.plotting.plot.vector_b_norm->import_module('numpy').linalg.norm(vector_b)
A:sympy.plotting.plot.args->list(map(sympify, args))
A:sympy.plotting.plot.free->set()
A:sympy.plotting.plot.show->kwargs.pop('show', True)
A:sympy.plotting.plot.plot_expr->check_arguments(args, 3, 2)
A:sympy.plotting.plot.plots->Plot(*series, **kwargs)
A:sympy.plotting.plot.exprs->Tuple(*args[:i])
A:sympy.plotting.plot.free_symbols->list(set.union(*[e.free_symbols for expr in exprs for e in expr]))
A:sympy.plotting.plot.default_range->Tuple(-10, 10)
A:sympy.plotting.plot.args[i]->Tuple(args[i])
A:sympy.plotting.plot.ranges->Tuple(*ranges)
sympy.plot(*args,**kwargs)
sympy.plot.BaseBackend(self,parent)
sympy.plot.BaseSeries(self)
sympy.plot.BaseSeries.is_3D(self)
sympy.plot.BaseSeries.is_line(self)
sympy.plot.ContourSeries(self,expr,var_start_end_x,var_start_end_y)
sympy.plot.ContourSeries.__str__(self)
sympy.plot.ContourSeries.get_meshes(self)
sympy.plot.DefaultBackend(cls,parent)
sympy.plot.Line2DBaseSeries(self)
sympy.plot.Line2DBaseSeries.get_color_array(self)
sympy.plot.Line2DBaseSeries.get_segments(self)
sympy.plot.Line3DBaseSeries(self)
sympy.plot.LineOver1DRangeSeries(self,expr,var_start_end,**kwargs)
sympy.plot.LineOver1DRangeSeries.__str__(self)
sympy.plot.LineOver1DRangeSeries.get_points(self)
sympy.plot.LineOver1DRangeSeries.get_segments(self)
sympy.plot.List2DSeries(self,list_x,list_y)
sympy.plot.List2DSeries.__str__(self)
sympy.plot.List2DSeries.get_points(self)
sympy.plot.MatplotlibBackend(self,parent)
sympy.plot.MatplotlibBackend.close(self)
sympy.plot.MatplotlibBackend.process_series(self)
sympy.plot.MatplotlibBackend.save(self,path)
sympy.plot.MatplotlibBackend.show(self)
sympy.plot.Parametric2DLineSeries(self,expr_x,expr_y,var_start_end,**kwargs)
sympy.plot.Parametric2DLineSeries.__str__(self)
sympy.plot.Parametric2DLineSeries.get_parameter_points(self)
sympy.plot.Parametric2DLineSeries.get_points(self)
sympy.plot.Parametric2DLineSeries.get_segments(self)
sympy.plot.Parametric3DLineSeries(self,expr_x,expr_y,expr_z,var_start_end,**kwargs)
sympy.plot.Parametric3DLineSeries.__str__(self)
sympy.plot.Parametric3DLineSeries.get_parameter_points(self)
sympy.plot.Parametric3DLineSeries.get_points(self)
sympy.plot.ParametricSurfaceSeries(self,expr_x,expr_y,expr_z,var_start_end_u,var_start_end_v,**kwargs)
sympy.plot.ParametricSurfaceSeries.__str__(self)
sympy.plot.ParametricSurfaceSeries.get_meshes(self)
sympy.plot.ParametricSurfaceSeries.get_parameter_meshes(self)
sympy.plot.Plot(self,*args,**kwargs)
sympy.plot.Plot.__delitem__(self,index)
sympy.plot.Plot.__getitem__(self,index)
sympy.plot.Plot.__setitem__(self,index,*args)
sympy.plot.Plot.__str__(self)
sympy.plot.Plot.append(self,arg)
sympy.plot.Plot.extend(self,arg)
sympy.plot.Plot.save(self,path)
sympy.plot.Plot.show(self)
sympy.plot.SurfaceBaseSeries(self)
sympy.plot.SurfaceBaseSeries.get_color_array(self)
sympy.plot.SurfaceOver2DRangeSeries(self,expr,var_start_end_x,var_start_end_y,**kwargs)
sympy.plot.SurfaceOver2DRangeSeries.__str__(self)
sympy.plot.SurfaceOver2DRangeSeries.get_meshes(self)
sympy.plot.TextBackend(self,parent)
sympy.plot.TextBackend.close(self)
sympy.plot.TextBackend.show(self)
sympy.plot._matplotlib_list(interval_list)
sympy.plot.centers_of_faces(array)
sympy.plot.centers_of_segments(array)
sympy.plot.check_arguments(args,expr_len,nb_of_free_symbols)
sympy.plot.flat(x,y,z,eps=0.001)
sympy.plot.unset_show()
sympy.plot3d(*args,**kwargs)
sympy.plot3d_parametric_line(*args,**kwargs)
sympy.plot3d_parametric_surface(*args,**kwargs)
sympy.plot_parametric(*args,**kwargs)
sympy.plotting.plot.BaseBackend(self,parent)
sympy.plotting.plot.BaseBackend.__init__(self,parent)
sympy.plotting.plot.BaseSeries(self)
sympy.plotting.plot.BaseSeries.__init__(self)
sympy.plotting.plot.BaseSeries.is_3D(self)
sympy.plotting.plot.BaseSeries.is_line(self)
sympy.plotting.plot.ContourSeries(self,expr,var_start_end_x,var_start_end_y)
sympy.plotting.plot.ContourSeries.__init__(self,expr,var_start_end_x,var_start_end_y)
sympy.plotting.plot.ContourSeries.__str__(self)
sympy.plotting.plot.ContourSeries.get_meshes(self)
sympy.plotting.plot.DefaultBackend(cls,parent)
sympy.plotting.plot.DefaultBackend.__new__(cls,parent)
sympy.plotting.plot.Line2DBaseSeries(self)
sympy.plotting.plot.Line2DBaseSeries.__init__(self)
sympy.plotting.plot.Line2DBaseSeries.get_color_array(self)
sympy.plotting.plot.Line2DBaseSeries.get_segments(self)
sympy.plotting.plot.Line3DBaseSeries(self)
sympy.plotting.plot.Line3DBaseSeries.__init__(self)
sympy.plotting.plot.LineOver1DRangeSeries(self,expr,var_start_end,**kwargs)
sympy.plotting.plot.LineOver1DRangeSeries.__init__(self,expr,var_start_end,**kwargs)
sympy.plotting.plot.LineOver1DRangeSeries.__str__(self)
sympy.plotting.plot.LineOver1DRangeSeries.get_points(self)
sympy.plotting.plot.LineOver1DRangeSeries.get_segments(self)
sympy.plotting.plot.List2DSeries(self,list_x,list_y)
sympy.plotting.plot.List2DSeries.__init__(self,list_x,list_y)
sympy.plotting.plot.List2DSeries.__str__(self)
sympy.plotting.plot.List2DSeries.get_points(self)
sympy.plotting.plot.MatplotlibBackend(self,parent)
sympy.plotting.plot.MatplotlibBackend.__init__(self,parent)
sympy.plotting.plot.MatplotlibBackend.close(self)
sympy.plotting.plot.MatplotlibBackend.process_series(self)
sympy.plotting.plot.MatplotlibBackend.save(self,path)
sympy.plotting.plot.MatplotlibBackend.show(self)
sympy.plotting.plot.Parametric2DLineSeries(self,expr_x,expr_y,var_start_end,**kwargs)
sympy.plotting.plot.Parametric2DLineSeries.__init__(self,expr_x,expr_y,var_start_end,**kwargs)
sympy.plotting.plot.Parametric2DLineSeries.__str__(self)
sympy.plotting.plot.Parametric2DLineSeries.get_parameter_points(self)
sympy.plotting.plot.Parametric2DLineSeries.get_points(self)
sympy.plotting.plot.Parametric2DLineSeries.get_segments(self)
sympy.plotting.plot.Parametric3DLineSeries(self,expr_x,expr_y,expr_z,var_start_end,**kwargs)
sympy.plotting.plot.Parametric3DLineSeries.__init__(self,expr_x,expr_y,expr_z,var_start_end,**kwargs)
sympy.plotting.plot.Parametric3DLineSeries.__str__(self)
sympy.plotting.plot.Parametric3DLineSeries.get_parameter_points(self)
sympy.plotting.plot.Parametric3DLineSeries.get_points(self)
sympy.plotting.plot.ParametricSurfaceSeries(self,expr_x,expr_y,expr_z,var_start_end_u,var_start_end_v,**kwargs)
sympy.plotting.plot.ParametricSurfaceSeries.__init__(self,expr_x,expr_y,expr_z,var_start_end_u,var_start_end_v,**kwargs)
sympy.plotting.plot.ParametricSurfaceSeries.__str__(self)
sympy.plotting.plot.ParametricSurfaceSeries.get_meshes(self)
sympy.plotting.plot.ParametricSurfaceSeries.get_parameter_meshes(self)
sympy.plotting.plot.Plot(self,*args,**kwargs)
sympy.plotting.plot.Plot.__delitem__(self,index)
sympy.plotting.plot.Plot.__getitem__(self,index)
sympy.plotting.plot.Plot.__init__(self,*args,**kwargs)
sympy.plotting.plot.Plot.__setitem__(self,index,*args)
sympy.plotting.plot.Plot.__str__(self)
sympy.plotting.plot.Plot.append(self,arg)
sympy.plotting.plot.Plot.extend(self,arg)
sympy.plotting.plot.Plot.save(self,path)
sympy.plotting.plot.Plot.show(self)
sympy.plotting.plot.SurfaceBaseSeries(self)
sympy.plotting.plot.SurfaceBaseSeries.__init__(self)
sympy.plotting.plot.SurfaceBaseSeries.get_color_array(self)
sympy.plotting.plot.SurfaceOver2DRangeSeries(self,expr,var_start_end_x,var_start_end_y,**kwargs)
sympy.plotting.plot.SurfaceOver2DRangeSeries.__init__(self,expr,var_start_end_x,var_start_end_y,**kwargs)
sympy.plotting.plot.SurfaceOver2DRangeSeries.__str__(self)
sympy.plotting.plot.SurfaceOver2DRangeSeries.get_meshes(self)
sympy.plotting.plot.TextBackend(self,parent)
sympy.plotting.plot.TextBackend.__init__(self,parent)
sympy.plotting.plot.TextBackend.close(self)
sympy.plotting.plot.TextBackend.show(self)
sympy.plotting.plot._matplotlib_list(interval_list)
sympy.plotting.plot.centers_of_faces(array)
sympy.plotting.plot.centers_of_segments(array)
sympy.plotting.plot.check_arguments(args,expr_len,nb_of_free_symbols)
sympy.plotting.plot.flat(x,y,z,eps=0.001)
sympy.plotting.plot.plot(*args,**kwargs)
sympy.plotting.plot.plot3d(*args,**kwargs)
sympy.plotting.plot.plot3d_parametric_line(*args,**kwargs)
sympy.plotting.plot.plot3d_parametric_surface(*args,**kwargs)
sympy.plotting.plot.plot_parametric(*args,**kwargs)
sympy.plotting.plot.unset_show()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_mode.py----------------------------------------
A:sympy.plotting.pygletplot.plot_mode.(newargs, newkwargs)->PlotMode._extract_options(args, kwargs)
A:sympy.plotting.pygletplot.plot_mode.mode_arg->dict(newkwargs, **kwargs).get('mode', '')
A:sympy.plotting.pygletplot.plot_mode.(d_vars, intervals)->PlotMode._interpret_args(newargs)
A:sympy.plotting.pygletplot.plot_mode.i_vars->PlotMode._find_i_vars(d_vars, intervals)
A:sympy.plotting.pygletplot.plot_mode.subcls->PlotMode._get_mode(mode_arg, i, d)
A:sympy.plotting.pygletplot.plot_mode.o->object.__new__(subcls)
A:sympy.plotting.pygletplot.plot_mode.cls.i_vars->symbols_list(cls.i_vars)
A:sympy.plotting.pygletplot.plot_mode.cls.d_vars->symbols_list(cls.d_vars)
A:sympy.plotting.pygletplot.plot_mode.cls.i_var_count->len(cls.i_vars)
A:sympy.plotting.pygletplot.plot_mode.cls.d_var_count->len(cls.d_vars)
A:sympy.plotting.pygletplot.plot_mode.di[i]->PlotInterval(None, *di[i])
A:sympy.plotting.pygletplot.plot_mode.i->plot_interval.PlotInterval.try_parse(a)
A:sympy.plotting.pygletplot.plot_mode.f->sympify(a)
A:sympy.plotting.pygletplot.plot_mode.newkwargs->dict(newkwargs, **kwargs)
sympy.plotting.pygletplot.plot_mode.PlotMode(cls,*args,**kwargs)
sympy.plotting.pygletplot.plot_mode.PlotMode.__new__(cls,*args,**kwargs)
sympy.plotting.pygletplot.plot_mode.PlotMode._extract_options(args,kwargs)
sympy.plotting.pygletplot.plot_mode.PlotMode._fill_i_vars(self,i_vars)
sympy.plotting.pygletplot.plot_mode.PlotMode._fill_intervals(self,intervals)
sympy.plotting.pygletplot.plot_mode.PlotMode._find_i_vars(functions,intervals)
sympy.plotting.pygletplot.plot_mode.PlotMode._get_aliased_mode(alias,i,d,i_vars=-1)
sympy.plotting.pygletplot.plot_mode.PlotMode._get_default_mode(i,d,i_vars=-1)
sympy.plotting.pygletplot.plot_mode.PlotMode._get_mode(mode_arg,i_var_count,d_var_count)
sympy.plotting.pygletplot.plot_mode.PlotMode._init_mode(cls)
sympy.plotting.pygletplot.plot_mode.PlotMode._interpret_args(args)
sympy.plotting.pygletplot.plot_mode.PlotMode._register(cls)
sympy.plotting.pygletplot.plot_mode.PlotMode.draw(self)
sympy.plotting.pygletplot.plot_mode.var_count_error(is_independent,is_plotting)
sympy.plotting.pygletplot_mode.PlotMode(cls,*args,**kwargs)
sympy.plotting.pygletplot_mode.PlotMode._extract_options(args,kwargs)
sympy.plotting.pygletplot_mode.PlotMode._fill_i_vars(self,i_vars)
sympy.plotting.pygletplot_mode.PlotMode._fill_intervals(self,intervals)
sympy.plotting.pygletplot_mode.PlotMode._find_i_vars(functions,intervals)
sympy.plotting.pygletplot_mode.PlotMode._get_aliased_mode(alias,i,d,i_vars=-1)
sympy.plotting.pygletplot_mode.PlotMode._get_default_mode(i,d,i_vars=-1)
sympy.plotting.pygletplot_mode.PlotMode._get_mode(mode_arg,i_var_count,d_var_count)
sympy.plotting.pygletplot_mode.PlotMode._init_mode(cls)
sympy.plotting.pygletplot_mode.PlotMode._interpret_args(args)
sympy.plotting.pygletplot_mode.PlotMode._register(cls)
sympy.plotting.pygletplot_mode.PlotMode.draw(self)
sympy.plotting.pygletplot_mode.var_count_error(is_independent,is_plotting)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_controller.py----------------------------------------
A:sympy.plotting.pygletplot.plot_controller.self.invert_mouse_zoom->kwargs.pop('invert_mouse_zoom', False)
sympy.plotting.pygletplot.plot_controller.PlotController(self,window,**kwargs)
sympy.plotting.pygletplot.plot_controller.PlotController.__init__(self,window,**kwargs)
sympy.plotting.pygletplot.plot_controller.PlotController.get_key_sensitivity(self)
sympy.plotting.pygletplot.plot_controller.PlotController.get_mouse_sensitivity(self)
sympy.plotting.pygletplot.plot_controller.PlotController.is_2D(self)
sympy.plotting.pygletplot.plot_controller.PlotController.on_key_press(self,symbol,modifiers)
sympy.plotting.pygletplot.plot_controller.PlotController.on_key_release(self,symbol,modifiers)
sympy.plotting.pygletplot.plot_controller.PlotController.on_mouse_drag(self,x,y,dx,dy,buttons,modifiers)
sympy.plotting.pygletplot.plot_controller.PlotController.on_mouse_scroll(self,x,y,dx,dy)
sympy.plotting.pygletplot.plot_controller.PlotController.update(self,dt)
sympy.plotting.pygletplot_controller.PlotController(self,window,**kwargs)
sympy.plotting.pygletplot_controller.PlotController.get_key_sensitivity(self)
sympy.plotting.pygletplot_controller.PlotController.get_mouse_sensitivity(self)
sympy.plotting.pygletplot_controller.PlotController.is_2D(self)
sympy.plotting.pygletplot_controller.PlotController.on_key_press(self,symbol,modifiers)
sympy.plotting.pygletplot_controller.PlotController.on_key_release(self,symbol,modifiers)
sympy.plotting.pygletplot_controller.PlotController.on_mouse_drag(self,x,y,dx,dy,buttons,modifiers)
sympy.plotting.pygletplot_controller.PlotController.on_mouse_scroll(self,x,y,dx,dy)
sympy.plotting.pygletplot_controller.PlotController.update(self,dt)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_axes.py----------------------------------------
A:sympy.plotting.pygletplot.plot_axes.style->kwargs.pop('style', '').lower()
A:sympy.plotting.pygletplot.plot_axes.self._render_object->PlotAxesFrame(self)
A:sympy.plotting.pygletplot.plot_axes.stride->eval(stride)
A:sympy.plotting.pygletplot.plot_axes.self._tick_length->float(kwargs.pop('tick_length', 0.1))
A:sympy.plotting.pygletplot.plot_axes.self.visible->flexible_boolean(kwargs.pop('visible', ''), True)
A:sympy.plotting.pygletplot.plot_axes.self._overlay->flexible_boolean(kwargs.pop('overlay', ''), True)
A:sympy.plotting.pygletplot.plot_axes.self._colored->flexible_boolean(kwargs.pop('colored', ''), False)
A:sympy.plotting.pygletplot.plot_axes.self._label_axes->flexible_boolean(kwargs.pop('label_axes', ''), False)
A:sympy.plotting.pygletplot.plot_axes.self._label_ticks->flexible_boolean(kwargs.pop('label_ticks', ''), True)
A:sympy.plotting.pygletplot.plot_axes.self.font_face->kwargs.pop('font_face', 'Arial')
A:sympy.plotting.pygletplot.plot_axes.self.font_size->kwargs.pop('font_size', 28)
A:sympy.plotting.pygletplot.plot_axes.self._axis_ticks[axis]->strided_range(b[axis][0], b[axis][1], self._stride[axis])
A:sympy.plotting.pygletplot.plot_axes.self._p.label_font->pyglet.font.load(self._p.font_face, self._p.font_size, bold=True, italic=False)
A:sympy.plotting.pygletplot.plot_axes.label->pyglet.font.Text(self._p.label_font, text, color=color, valign=font.Text.BASELINE, halign=font.Text.CENTER)
A:sympy.plotting.pygletplot.plot_axes.axis_vector->vec_sub(axis_lines[1], axis_lines[0])
A:sympy.plotting.pygletplot.plot_axes.d->abs(dot_product(axis_vector, pos_z))
sympy.plotting.pygletplot.plot_axes.PlotAxes(self,*args,**kwargs)
sympy.plotting.pygletplot.plot_axes.PlotAxes.__init__(self,*args,**kwargs)
sympy.plotting.pygletplot.plot_axes.PlotAxes._recalculate_axis_ticks(self,axis)
sympy.plotting.pygletplot.plot_axes.PlotAxes.adjust_bounds(self,child_bounds)
sympy.plotting.pygletplot.plot_axes.PlotAxes.draw(self)
sympy.plotting.pygletplot.plot_axes.PlotAxes.reset_bounding_box(self)
sympy.plotting.pygletplot.plot_axes.PlotAxes.reset_resources(self)
sympy.plotting.pygletplot.plot_axes.PlotAxes.toggle_colors(self)
sympy.plotting.pygletplot.plot_axes.PlotAxes.toggle_visible(self)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.__init__(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.draw(self)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.draw_axis(self,axis,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.draw_background(self,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.draw_line(self,v,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesBase.draw_text(self,text,position,color,scale=1.0)
sympy.plotting.pygletplot.plot_axes.PlotAxesFrame(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesFrame.__init__(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesFrame.draw_axis(self,axis,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesFrame.draw_background(self,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.__init__(self,parent_axes)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.draw_axis(self,axis,color)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.draw_axis_line(self,axis,color,a_min,a_max,labels_visible)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.draw_axis_line_labels(self,axis,color,axis_line)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.draw_tick_line(self,axis,color,radius,tick,labels_visible)
sympy.plotting.pygletplot.plot_axes.PlotAxesOrdinate.draw_tick_line_label(self,axis,color,radius,tick)
sympy.plotting.pygletplot_axes.PlotAxes(self,*args,**kwargs)
sympy.plotting.pygletplot_axes.PlotAxes._recalculate_axis_ticks(self,axis)
sympy.plotting.pygletplot_axes.PlotAxes.adjust_bounds(self,child_bounds)
sympy.plotting.pygletplot_axes.PlotAxes.draw(self)
sympy.plotting.pygletplot_axes.PlotAxes.reset_bounding_box(self)
sympy.plotting.pygletplot_axes.PlotAxes.reset_resources(self)
sympy.plotting.pygletplot_axes.PlotAxes.toggle_colors(self)
sympy.plotting.pygletplot_axes.PlotAxes.toggle_visible(self)
sympy.plotting.pygletplot_axes.PlotAxesBase(self,parent_axes)
sympy.plotting.pygletplot_axes.PlotAxesBase.draw(self)
sympy.plotting.pygletplot_axes.PlotAxesBase.draw_axis(self,axis,color)
sympy.plotting.pygletplot_axes.PlotAxesBase.draw_background(self,color)
sympy.plotting.pygletplot_axes.PlotAxesBase.draw_line(self,v,color)
sympy.plotting.pygletplot_axes.PlotAxesBase.draw_text(self,text,position,color,scale=1.0)
sympy.plotting.pygletplot_axes.PlotAxesFrame(self,parent_axes)
sympy.plotting.pygletplot_axes.PlotAxesFrame.draw_axis(self,axis,color)
sympy.plotting.pygletplot_axes.PlotAxesFrame.draw_background(self,color)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate(self,parent_axes)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate.draw_axis(self,axis,color)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate.draw_axis_line(self,axis,color,a_min,a_max,labels_visible)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate.draw_axis_line_labels(self,axis,color,axis_line)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate.draw_tick_line(self,axis,color,radius,tick,labels_visible)
sympy.plotting.pygletplot_axes.PlotAxesOrdinate.draw_tick_line_label(self,axis,color,radius,tick)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_surface.py----------------------------------------
A:sympy.plotting.pygletplot.plot_surface.self.u_set->list(self.u_interval.frange())
A:sympy.plotting.pygletplot.plot_surface.self.v_set->list(self.v_interval.frange())
A:sympy.plotting.pygletplot.plot_surface.evaluate->self._get_evaluator()
A:sympy.plotting.pygletplot.plot_surface.self._calculating_verts_len->float(self.u_interval.v_len * self.v_interval.v_len)
A:sympy.plotting.pygletplot.plot_surface.verts->list()
A:sympy.plotting.pygletplot.plot_surface.column->list()
A:sympy.plotting.pygletplot.plot_surface._e->evaluate(u, v)
A:sympy.plotting.pygletplot.plot_surface.b[axis][0]->min([b[axis][0], _e[axis]])
A:sympy.plotting.pygletplot.plot_surface.b[axis][1]->max([b[axis][1], _e[axis]])
A:sympy.plotting.pygletplot.plot_surface.self._calculating_cverts_len->float(n)
A:sympy.plotting.pygletplot.plot_surface.self.cverts->self.color.apply_to_surface(self.verts, self.u_set, self.v_set, set_len=set_work_len, inc_pos=inc_work_pos)
sympy.plotting.pygletplot.plot_surface.PlotSurface(PlotModeBase)
sympy.plotting.pygletplot.plot_surface.PlotSurface._on_calculate_cverts(self)
sympy.plotting.pygletplot.plot_surface.PlotSurface._on_calculate_verts(self)
sympy.plotting.pygletplot.plot_surface.PlotSurface.calculate_one_cvert(self,u,v)
sympy.plotting.pygletplot.plot_surface.PlotSurface.draw_verts(self,use_cverts,use_solid_color)
sympy.plotting.pygletplot_surface.PlotSurface(PlotModeBase)
sympy.plotting.pygletplot_surface.PlotSurface._on_calculate_cverts(self)
sympy.plotting.pygletplot_surface.PlotSurface._on_calculate_verts(self)
sympy.plotting.pygletplot_surface.PlotSurface.calculate_one_cvert(self,u,v)
sympy.plotting.pygletplot_surface.PlotSurface.draw_verts(self,use_cverts,use_solid_color)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_rotation.py----------------------------------------
A:sympy.plotting.pygletplot.plot_rotation.m->mag(a)
A:sympy.plotting.pygletplot.plot_rotation.x->min([max([x, 0]), width])
A:sympy.plotting.pygletplot.plot_rotation.y->min([max([y, 0]), height])
A:sympy.plotting.pygletplot.plot_rotation.sr->_sqrt((width / 2) ** 2 + (height / 2) ** 2)
A:sympy.plotting.pygletplot.plot_rotation.sz->_sqrt(sz)
A:sympy.plotting.pygletplot.plot_rotation.v1->get_sphere_mapping(p1[0], p1[1], width, height)
A:sympy.plotting.pygletplot.plot_rotation.v2->get_sphere_mapping(p2[0], p2[1], width, height)
A:sympy.plotting.pygletplot.plot_rotation.d->min(max([dot(v1, v2), -1]), 1)
A:sympy.plotting.pygletplot.plot_rotation.raxis->norm(cross(v1, v2))
A:sympy.plotting.pygletplot.plot_rotation.mat->(c_float * 16)()
sympy.plotting.pygletplot.plot_rotation.cross(a,b)
sympy.plotting.pygletplot.plot_rotation.dot(a,b)
sympy.plotting.pygletplot.plot_rotation.get_sphere_mapping(x,y,width,height)
sympy.plotting.pygletplot.plot_rotation.get_spherical_rotatation(p1,p2,width,height,theta_multiplier)
sympy.plotting.pygletplot.plot_rotation.mag(a)
sympy.plotting.pygletplot.plot_rotation.norm(a)
sympy.plotting.pygletplot_rotation.cross(a,b)
sympy.plotting.pygletplot_rotation.dot(a,b)
sympy.plotting.pygletplot_rotation.get_sphere_mapping(x,y,width,height)
sympy.plotting.pygletplot_rotation.get_spherical_rotatation(p1,p2,width,height,theta_multiplier)
sympy.plotting.pygletplot_rotation.mag(a)
sympy.plotting.pygletplot_rotation.norm(a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_mode_base.py----------------------------------------
A:sympy.plotting.pygletplot.plot_mode_base.e->self._get_lambda_evaluator()
A:sympy.plotting.pygletplot.plot_mode_base.self._draw_lock->RLock()
A:sympy.plotting.pygletplot.plot_mode_base.self._calculating_verts->Event()
A:sympy.plotting.pygletplot.plot_mode_base.self._calculating_cverts->Event()
A:sympy.plotting.pygletplot.plot_mode_base.self.style->self.options.pop('style', '')
A:sympy.plotting.pygletplot.plot_mode_base.self.color->self.options.pop('color', 'rainbow')
A:sympy.plotting.pygletplot.plot_mode_base.self.bounds_callback->kwargs.pop('bounds_callback', None)
A:sympy.plotting.pygletplot.plot_mode_base.r->f(self, *args, **kwargs)
A:sympy.plotting.pygletplot.plot_mode_base.dl->self._render_stack_top(self._draw_wireframe)
A:sympy.plotting.pygletplot.plot_mode_base.step_max->max([step_max, int(i.v_steps)])
A:sympy.plotting.pygletplot.plot_mode_base.v->ColorScheme(v)
A:sympy.plotting.pygletplot.plot_mode_base.style->property(_get_style, _set_style)
A:sympy.plotting.pygletplot.plot_mode_base.color->property(_get_color, _set_color)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_verts->property(_get_calculating_verts)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_verts_pos->property(_get_calculating_verts_pos)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_verts_len->property(_get_calculating_verts_len)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_cverts->property(_get_calculating_cverts)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_cverts_pos->property(_get_calculating_cverts_pos)
A:sympy.plotting.pygletplot.plot_mode_base.calculating_cverts_len->property(_get_calculating_cverts_len)
A:sympy.plotting.pygletplot.plot_mode_base.f->', '.join((str(d) for d in self.d_vars))
A:sympy.plotting.pygletplot.plot_mode_base.i->', '.join((str(i) for i in self.intervals))
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase(self,*args,**kwargs)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.__init__(self,*args,**kwargs)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.__repr__(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.__str__(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._calculate_all(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._calculate_cverts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._calculate_verts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._create_display_list(self,function)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._draw_solid_display_list(self,dl)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._draw_wireframe_display_list(self,dl)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_cverts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_cverts_len(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_cverts_pos(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_verts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_verts_len(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_calculating_verts_pos(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_color(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_evaluator(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_style(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._on_calculate(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._on_calculate_cverts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._on_calculate_verts(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._on_change_color(self,color)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._render_stack_top(self,render_stack)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._set_color(self,v)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase._set_style(self,v)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.draw(self)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.push_solid(self,function)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.push_wireframe(self,function)
sympy.plotting.pygletplot.plot_mode_base.PlotModeBase.synchronized(f)
sympy.plotting.pygletplot_mode_base.PlotModeBase(self,*args,**kwargs)
sympy.plotting.pygletplot_mode_base.PlotModeBase.__repr__(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase.__str__(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._calculate_all(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._calculate_cverts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._calculate_verts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._create_display_list(self,function)
sympy.plotting.pygletplot_mode_base.PlotModeBase._draw_solid_display_list(self,dl)
sympy.plotting.pygletplot_mode_base.PlotModeBase._draw_wireframe_display_list(self,dl)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_cverts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_cverts_len(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_cverts_pos(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_verts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_verts_len(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_calculating_verts_pos(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_color(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_evaluator(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_lambda_evaluator(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_style(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._get_sympy_evaluator(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._on_calculate(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._on_calculate_cverts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._on_calculate_verts(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase._on_change_color(self,color)
sympy.plotting.pygletplot_mode_base.PlotModeBase._render_stack_top(self,render_stack)
sympy.plotting.pygletplot_mode_base.PlotModeBase._set_color(self,v)
sympy.plotting.pygletplot_mode_base.PlotModeBase._set_style(self,v)
sympy.plotting.pygletplot_mode_base.PlotModeBase.draw(self)
sympy.plotting.pygletplot_mode_base.PlotModeBase.push_solid(self,function)
sympy.plotting.pygletplot_mode_base.PlotModeBase.push_wireframe(self,function)
sympy.plotting.pygletplot_mode_base.PlotModeBase.synchronized(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_modes.py----------------------------------------
A:sympy.plotting.pygletplot.plot_modes.v->f(*args)
A:sympy.plotting.pygletplot.plot_modes._r->float(fr.subs(t, _t).subs(p, _p))
sympy.plotting.pygletplot.plot_modes.Cartesian2D(PlotCurve)
sympy.plotting.pygletplot.plot_modes.Cartesian2D._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Cartesian2D._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Cartesian3D(PlotSurface)
sympy.plotting.pygletplot.plot_modes.Cartesian3D._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Cartesian3D._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Cylindrical(PlotSurface)
sympy.plotting.pygletplot.plot_modes.Cylindrical._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Cylindrical._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricCurve2D(PlotCurve)
sympy.plotting.pygletplot.plot_modes.ParametricCurve2D._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricCurve2D._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricCurve3D(PlotCurve)
sympy.plotting.pygletplot.plot_modes.ParametricCurve3D._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricCurve3D._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricSurface(PlotSurface)
sympy.plotting.pygletplot.plot_modes.ParametricSurface._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.ParametricSurface._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Polar(PlotCurve)
sympy.plotting.pygletplot.plot_modes.Polar._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Polar._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Spherical(PlotSurface)
sympy.plotting.pygletplot.plot_modes.Spherical._get_lambda_evaluator(self)
sympy.plotting.pygletplot.plot_modes.Spherical._get_sympy_evaluator(self)
sympy.plotting.pygletplot.plot_modes.float_vec3(f)
sympy.plotting.pygletplot_modes.Cartesian2D(PlotCurve)
sympy.plotting.pygletplot_modes.Cartesian2D._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.Cartesian2D._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.Cartesian3D(PlotSurface)
sympy.plotting.pygletplot_modes.Cartesian3D._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.Cartesian3D._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.Cylindrical(PlotSurface)
sympy.plotting.pygletplot_modes.Cylindrical._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.Cylindrical._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricCurve2D(PlotCurve)
sympy.plotting.pygletplot_modes.ParametricCurve2D._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricCurve2D._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricCurve3D(PlotCurve)
sympy.plotting.pygletplot_modes.ParametricCurve3D._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricCurve3D._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricSurface(PlotSurface)
sympy.plotting.pygletplot_modes.ParametricSurface._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.ParametricSurface._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.Polar(PlotCurve)
sympy.plotting.pygletplot_modes.Polar._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.Polar._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.Spherical(PlotSurface)
sympy.plotting.pygletplot_modes.Spherical._get_lambda_evaluator(self)
sympy.plotting.pygletplot_modes.Spherical._get_sympy_evaluator(self)
sympy.plotting.pygletplot_modes.float_vec3(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/color_scheme.py----------------------------------------
A:sympy.plotting.pygletplot.color_scheme.self.colors->list(args)
A:sympy.plotting.pygletplot.color_scheme.c->list(c)
A:sympy.plotting.pygletplot.color_scheme.m->len(self.intervals)
A:sympy.plotting.pygletplot.color_scheme.i->self._find_interval(v)
A:sympy.plotting.pygletplot.color_scheme.v->rinterpolate(self.intervals[i - 1], self.intervals[i], v)
A:sympy.plotting.pygletplot.color_scheme.self.f->lambdify('x,y,z,u,v', args[0])
A:sympy.plotting.pygletplot.color_scheme.(self.f, self.gradient)->self._interpret_args(args, kwargs)
A:sympy.plotting.pygletplot.color_scheme.(atoms, lists)->self._sort_args(args)
A:sympy.plotting.pygletplot.color_scheme.s->self._fill_in_vars(s)
A:sympy.plotting.pygletplot.color_scheme.f_str->', '.join((str(fa) for fa in atoms))
A:sympy.plotting.pygletplot.color_scheme.s_str->', '.join((sa for sa in s_str if sa.find('unbound') < 0))
A:sympy.plotting.pygletplot.color_scheme.f_error->ValueError('Could not interpret arguments %s as functions of %s.' % (f_str, s_str))
A:sympy.plotting.pygletplot.color_scheme.f->lambdify(s, [fr, fg, fb])
A:sympy.plotting.pygletplot.color_scheme.gradient->ColorGradient(*gargs)
A:sympy.plotting.pygletplot.color_scheme.defaults->symbols('x,y,z,u,v')
A:sympy.plotting.pygletplot.color_scheme.result->self.f(0, 0, 0, 0, 0)
A:sympy.plotting.pygletplot.color_scheme.bounds->create_bounds()
A:sympy.plotting.pygletplot.color_scheme.cverts->list()
A:sympy.plotting.pygletplot.color_scheme.cverts[_u][_c]->rinterpolate(bounds[_c][0], bounds[_c][1], cverts[_u][_c])
A:sympy.plotting.pygletplot.color_scheme.cverts[_u]->self.gradient(*cverts[_u])
A:sympy.plotting.pygletplot.color_scheme.column->list()
A:sympy.plotting.pygletplot.color_scheme.cverts[_u][_v][_c]->rinterpolate(bounds[_c][0], bounds[_c][1], cverts[_u][_v][_c])
A:sympy.plotting.pygletplot.color_scheme.cverts[_u][_v]->self.gradient(*cverts[_u][_v])
A:sympy.plotting.pygletplot.color_scheme.(x, y, z, t, u, v)->symbols('x,y,z,t,u,v')
A:sympy.plotting.pygletplot.color_scheme.default_color_schemes['rainbow']->ColorScheme(z, y, x)
A:sympy.plotting.pygletplot.color_scheme.default_color_schemes['zfade']->ColorScheme(z, (0.4, 0.4, 0.97), (0.97, 0.4, 0.4), (None, None, z))
A:sympy.plotting.pygletplot.color_scheme.default_color_schemes['zfade3']->ColorScheme(z, (None, None, z), [0.0, (0.2, 0.2, 1.0), 0.35, (0.2, 0.8, 0.4), 0.5, (0.3, 0.9, 0.3), 0.65, (0.4, 0.8, 0.2), 1.0, (1.0, 0.2, 0.2)])
A:sympy.plotting.pygletplot.color_scheme.default_color_schemes['zfade4']->ColorScheme(z, (None, None, z), [0.0, (0.3, 0.3, 1.0), 0.3, (0.3, 1.0, 0.3), 0.55, (0.95, 1.0, 0.2), 0.65, (1.0, 0.95, 0.2), 0.85, (1.0, 0.7, 0.2), 1.0, (1.0, 0.3, 0.2)])
sympy.plotting.pygletplot.color_scheme.ColorGradient(self,*args)
sympy.plotting.pygletplot.color_scheme.ColorGradient.__init__(self,*args)
sympy.plotting.pygletplot.color_scheme.ColorGradient._find_interval(self,v)
sympy.plotting.pygletplot.color_scheme.ColorGradient._interpolate_axis(self,axis,v)
sympy.plotting.pygletplot.color_scheme.ColorGradient.copy(self)
sympy.plotting.pygletplot.color_scheme.ColorScheme(self,*args,**kwargs)
sympy.plotting.pygletplot.color_scheme.ColorScheme.__init__(self,*args,**kwargs)
sympy.plotting.pygletplot.color_scheme.ColorScheme.__repr__(self)
sympy.plotting.pygletplot.color_scheme.ColorScheme._fill_in_vars(self,args)
sympy.plotting.pygletplot.color_scheme.ColorScheme._interpret_args(self,args,kwargs)
sympy.plotting.pygletplot.color_scheme.ColorScheme._pop_symbol_list(self,lists)
sympy.plotting.pygletplot.color_scheme.ColorScheme._sort_args(self,args)
sympy.plotting.pygletplot.color_scheme.ColorScheme._test_color_function(self)
sympy.plotting.pygletplot.color_scheme.ColorScheme.apply_to_curve(self,verts,u_set,set_len=None,inc_pos=None)
sympy.plotting.pygletplot.color_scheme.ColorScheme.apply_to_surface(self,verts,u_set,v_set,set_len=None,inc_pos=None)
sympy.plotting.pygletplot.color_scheme.ColorScheme.str_base(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/managed_window.py----------------------------------------
A:sympy.plotting.pygletplot.managed_window.gl_lock->Lock()
A:sympy.plotting.pygletplot.managed_window.default_win_args->dict(width=600, height=500, vsync=False, resizable=True)
A:sympy.plotting.pygletplot.managed_window.self.win_args->dict(self.default_win_args, **win_args)
A:sympy.plotting.pygletplot.managed_window.self.Thread->Thread(target=self.__event_loop__)
A:sympy.plotting.pygletplot.managed_window.clock->Clock()
A:sympy.plotting.pygletplot.managed_window.dt->Clock().tick()
sympy.plotting.pygletplot.managed_window.ManagedWindow(self,**win_args)
sympy.plotting.pygletplot.managed_window.ManagedWindow.__event_loop__(self,**win_args)
sympy.plotting.pygletplot.managed_window.ManagedWindow.__init__(self,**win_args)
sympy.plotting.pygletplot.managed_window.ManagedWindow.close(self)
sympy.plotting.pygletplot.managed_window.ManagedWindow.draw(self)
sympy.plotting.pygletplot.managed_window.ManagedWindow.setup(self)
sympy.plotting.pygletplot.managed_window.ManagedWindow.update(self,dt)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_camera.py----------------------------------------
A:sympy.plotting.pygletplot.plot_camera.self._rot->get_model_matrix()
A:sympy.plotting.pygletplot.plot_camera.mat->get_spherical_rotatation(p1, p2, self.window.width, self.window.height, sensitivity)
A:sympy.plotting.pygletplot.plot_camera.d->vec_subs(screen_to_model(x, y, z), screen_to_model(x - dx, y - dy, z))
sympy.plotting.pygletplot.plot_camera.PlotCamera(self,window,ortho=False)
sympy.plotting.pygletplot.plot_camera.PlotCamera.__init__(self,window,ortho=False)
sympy.plotting.pygletplot.plot_camera.PlotCamera._get_scale(self)
sympy.plotting.pygletplot.plot_camera.PlotCamera.apply_transformation(self)
sympy.plotting.pygletplot.plot_camera.PlotCamera.euler_rotate(self,angle,x,y,z)
sympy.plotting.pygletplot.plot_camera.PlotCamera.init_rot_matrix(self)
sympy.plotting.pygletplot.plot_camera.PlotCamera.mouse_translate(self,x,y,dx,dy)
sympy.plotting.pygletplot.plot_camera.PlotCamera.mult_rot_matrix(self,rot)
sympy.plotting.pygletplot.plot_camera.PlotCamera.reset(self)
sympy.plotting.pygletplot.plot_camera.PlotCamera.set_rot_preset(self,preset_name)
sympy.plotting.pygletplot.plot_camera.PlotCamera.setup_projection(self)
sympy.plotting.pygletplot.plot_camera.PlotCamera.spherical_rotate(self,p1,p2,sensitivity=1.0)
sympy.plotting.pygletplot.plot_camera.PlotCamera.zoom_relative(self,clicks,sensitivity)
sympy.plotting.pygletplot_camera.PlotCamera(self,window,ortho=False)
sympy.plotting.pygletplot_camera.PlotCamera._get_scale(self)
sympy.plotting.pygletplot_camera.PlotCamera.apply_transformation(self)
sympy.plotting.pygletplot_camera.PlotCamera.euler_rotate(self,angle,x,y,z)
sympy.plotting.pygletplot_camera.PlotCamera.init_rot_matrix(self)
sympy.plotting.pygletplot_camera.PlotCamera.mouse_translate(self,x,y,dx,dy)
sympy.plotting.pygletplot_camera.PlotCamera.mult_rot_matrix(self,rot)
sympy.plotting.pygletplot_camera.PlotCamera.reset(self)
sympy.plotting.pygletplot_camera.PlotCamera.set_rot_preset(self,preset_name)
sympy.plotting.pygletplot_camera.PlotCamera.setup_projection(self)
sympy.plotting.pygletplot_camera.PlotCamera.spherical_rotate(self,p1,p2,sensitivity=1.0)
sympy.plotting.pygletplot_camera.PlotCamera.zoom_relative(self,clicks,sensitivity)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_window.py----------------------------------------
A:sympy.plotting.pygletplot.plot_window.self.antialiasing->kwargs.pop('antialiasing', True)
A:sympy.plotting.pygletplot.plot_window.self.ortho->kwargs.pop('ortho', False)
A:sympy.plotting.pygletplot.plot_window.self.invert_mouse_zoom->kwargs.pop('invert_mouse_zoom', False)
A:sympy.plotting.pygletplot.plot_window.self.linewidth->kwargs.pop('linewidth', 1.5)
A:sympy.plotting.pygletplot.plot_window.self.title->kwargs.setdefault('caption', 'SymPy Plot')
A:sympy.plotting.pygletplot.plot_window.self.camera->PlotCamera(self, ortho=self.ortho)
A:sympy.plotting.pygletplot.plot_window.self.controller->PlotController(self, invert_mouse_zoom=self.invert_mouse_zoom)
A:sympy.plotting.pygletplot.plot_window.self.last_caption_update->clock()
sympy.plotting.pygletplot.plot_window.PlotWindow(self,plot,**kwargs)
sympy.plotting.pygletplot.plot_window.PlotWindow.__init__(self,plot,**kwargs)
sympy.plotting.pygletplot.plot_window.PlotWindow.draw(self)
sympy.plotting.pygletplot.plot_window.PlotWindow.on_resize(self,w,h)
sympy.plotting.pygletplot.plot_window.PlotWindow.setup(self)
sympy.plotting.pygletplot.plot_window.PlotWindow.update(self,dt)
sympy.plotting.pygletplot.plot_window.PlotWindow.update_caption(self,calc_verts_pos,calc_verts_len,calc_cverts_pos,calc_cverts_len)
sympy.plotting.pygletplot_window.PlotWindow(self,plot,**kwargs)
sympy.plotting.pygletplot_window.PlotWindow.draw(self)
sympy.plotting.pygletplot_window.PlotWindow.on_resize(self,w,h)
sympy.plotting.pygletplot_window.PlotWindow.setup(self)
sympy.plotting.pygletplot_window.PlotWindow.update(self,dt)
sympy.plotting.pygletplot_window.PlotWindow.update_caption(self,calc_verts_pos,calc_verts_len,calc_cverts_pos,calc_cverts_len)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot.py----------------------------------------
A:sympy.plotting.pygletplot.plot.self._render_lock->RLock()
A:sympy.plotting.pygletplot.plot.self._screenshot->ScreenShot(self)
A:sympy.plotting.pygletplot.plot.axe_options->parse_option_string(win_args.pop('axes', ''))
A:sympy.plotting.pygletplot.plot.self.axes->PlotAxes(**axe_options)
A:sympy.plotting.pygletplot.plot.self._window->PlotWindow(self, **self._win_args)
A:sympy.plotting.pygletplot.plot.kwargs->dict(bounds_callback=self.adjust_all_bounds)
A:sympy.plotting.pygletplot.plot.f->PlotMode(*args, **kwargs)
A:sympy.plotting.pygletplot.plot.(size_x, size_y)->self._plot._window.get_size()
A:sympy.plotting.pygletplot.plot.image->create_string_buffer(size)
A:sympy.plotting.pygletplot.plot.im->PIL.Image.frombuffer('RGBA', (size_x, size_y), image.raw, 'raw', 'RGBA', 0, 1)
A:sympy.plotting.pygletplot.plot.self._plot._window->PlotWindow(self._plot, **self._plot._win_args)
A:sympy.plotting.pygletplot.plot.self.outfile->self._create_unique_path()
A:sympy.plotting.pygletplot.plot.cwd->getcwd()
A:sympy.plotting.pygletplot.plot.l->listdir(cwd)
sympy.plotting.pygletplot.PygletPlot(self,*fargs,**win_args)
sympy.plotting.pygletplot.PygletPlot.__delitem__(self,i)
sympy.plotting.pygletplot.PygletPlot.__getitem__(self,i)
sympy.plotting.pygletplot.PygletPlot.__iter__(self)
sympy.plotting.pygletplot.PygletPlot.__len__(self)
sympy.plotting.pygletplot.PygletPlot.__repr__(self)
sympy.plotting.pygletplot.PygletPlot.__setitem__(self,i,args)
sympy.plotting.pygletplot.PygletPlot.__str__(self)
sympy.plotting.pygletplot.PygletPlot.adjust_all_bounds(self)
sympy.plotting.pygletplot.PygletPlot.append(self,*args)
sympy.plotting.pygletplot.PygletPlot.clear(self)
sympy.plotting.pygletplot.PygletPlot.close(self)
sympy.plotting.pygletplot.PygletPlot.firstavailableindex(self)
sympy.plotting.pygletplot.PygletPlot.saveimage(self,outfile=None,format='',size=(600,500))
sympy.plotting.pygletplot.PygletPlot.show(self)
sympy.plotting.pygletplot.PygletPlot.wait_for_calculations(self)
sympy.plotting.pygletplot.ScreenShot(self,plot)
sympy.plotting.pygletplot.ScreenShot.__nonzero__(self)
sympy.plotting.pygletplot.ScreenShot._create_unique_path(self)
sympy.plotting.pygletplot.ScreenShot._execute_saving(self)
sympy.plotting.pygletplot.ScreenShot.save(self,outfile=None,format='',size=(600,500))
sympy.plotting.pygletplot.plot.PygletPlot(self,*fargs,**win_args)
sympy.plotting.pygletplot.plot.PygletPlot.__delitem__(self,i)
sympy.plotting.pygletplot.plot.PygletPlot.__getitem__(self,i)
sympy.plotting.pygletplot.plot.PygletPlot.__init__(self,*fargs,**win_args)
sympy.plotting.pygletplot.plot.PygletPlot.__iter__(self)
sympy.plotting.pygletplot.plot.PygletPlot.__len__(self)
sympy.plotting.pygletplot.plot.PygletPlot.__repr__(self)
sympy.plotting.pygletplot.plot.PygletPlot.__setitem__(self,i,args)
sympy.plotting.pygletplot.plot.PygletPlot.__str__(self)
sympy.plotting.pygletplot.plot.PygletPlot.adjust_all_bounds(self)
sympy.plotting.pygletplot.plot.PygletPlot.append(self,*args)
sympy.plotting.pygletplot.plot.PygletPlot.clear(self)
sympy.plotting.pygletplot.plot.PygletPlot.close(self)
sympy.plotting.pygletplot.plot.PygletPlot.firstavailableindex(self)
sympy.plotting.pygletplot.plot.PygletPlot.saveimage(self,outfile=None,format='',size=(600,500))
sympy.plotting.pygletplot.plot.PygletPlot.show(self)
sympy.plotting.pygletplot.plot.PygletPlot.wait_for_calculations(self)
sympy.plotting.pygletplot.plot.ScreenShot(self,plot)
sympy.plotting.pygletplot.plot.ScreenShot.__init__(self,plot)
sympy.plotting.pygletplot.plot.ScreenShot.__nonzero__(self)
sympy.plotting.pygletplot.plot.ScreenShot._create_unique_path(self)
sympy.plotting.pygletplot.plot.ScreenShot._execute_saving(self)
sympy.plotting.pygletplot.plot.ScreenShot.save(self,outfile=None,format='',size=(600,500))


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/util.py----------------------------------------
A:sympy.plotting.pygletplot.util.m->get_model_matrix()
A:sympy.plotting.pygletplot.util.p->get_projection_matrix(c_double, glGetDoublev)
A:sympy.plotting.pygletplot.util.w->get_viewport()
A:sympy.plotting.pygletplot.util.b[axis][0]->min([b[axis][0], v[axis]])
A:sympy.plotting.pygletplot.util.b[axis][1]->max([b[axis][1], v[axis]])
A:sympy.plotting.pygletplot.util.r_steps->int((r_max - r_min) / stride)
A:sympy.plotting.pygletplot.util.pieces->token.split('=')
A:sympy.plotting.pygletplot.util.options[option.strip()]->value.strip()
sympy.plotting.pygletplot.util.billboard_matrix()
sympy.plotting.pygletplot.util.create_bounds()
sympy.plotting.pygletplot.util.dot_product(v1,v2)
sympy.plotting.pygletplot.util.get_basis_vectors()
sympy.plotting.pygletplot.util.get_direction_vectors()
sympy.plotting.pygletplot.util.get_model_matrix(array_type=c_float,glGetMethod=glGetFloatv)
sympy.plotting.pygletplot.util.get_projection_matrix(array_type=c_float,glGetMethod=glGetFloatv)
sympy.plotting.pygletplot.util.get_view_direction_vectors()
sympy.plotting.pygletplot.util.get_viewport()
sympy.plotting.pygletplot.util.interpolate(a_min,a_max,a_ratio)
sympy.plotting.pygletplot.util.interpolate_color(color1,color2,ratio)
sympy.plotting.pygletplot.util.model_to_screen(x,y,z)
sympy.plotting.pygletplot.util.parse_option_string(s)
sympy.plotting.pygletplot.util.rinterpolate(a_min,a_max,a_value)
sympy.plotting.pygletplot.util.scale_value(v,v_min,v_len)
sympy.plotting.pygletplot.util.scale_value_list(flist)
sympy.plotting.pygletplot.util.screen_to_model(x,y,z)
sympy.plotting.pygletplot.util.strided_range(r_min,r_max,stride,max_steps=50)
sympy.plotting.pygletplot.util.update_bounds(b,v)
sympy.plotting.pygletplot.util.vec_mag(v)
sympy.plotting.pygletplot.util.vec_sub(v1,v2)
sympy.plotting.pygletplot.util.vec_subs(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_interval.py----------------------------------------
A:sympy.plotting.pygletplot.plot_interval.args->list(args)
A:sympy.plotting.pygletplot.plot_interval.self.v->list(args).pop(0)
A:sympy.plotting.pygletplot.plot_interval.self.v_min->list(args).pop(0)
A:sympy.plotting.pygletplot.plot_interval.self.v_max->list(args).pop(0)
A:sympy.plotting.pygletplot.plot_interval.self.v_steps->list(args).pop(0)
A:sympy.plotting.pygletplot.plot_interval.self._v_min->sympify(v_min)
A:sympy.plotting.pygletplot.plot_interval.self._v_max->sympify(v_max)
A:sympy.plotting.pygletplot.plot_interval.v_steps->property(get_v_steps, set_v_steps)
A:sympy.plotting.pygletplot.plot_interval.v->property(get_v, set_v)
A:sympy.plotting.pygletplot.plot_interval.v_min->property(get_v_min, set_v_min)
A:sympy.plotting.pygletplot.plot_interval.v_max->property(get_v_max, set_v_max)
A:sympy.plotting.pygletplot.plot_interval.v_len->property(get_v_len)
sympy.plotting.pygletplot.plot_interval.PlotInterval(self,*args)
sympy.plotting.pygletplot.plot_interval.PlotInterval.__init__(self,*args)
sympy.plotting.pygletplot.plot_interval.PlotInterval.__repr__(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.__str__(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval._str_base(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.assert_complete(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.fill_from(self,b)
sympy.plotting.pygletplot.plot_interval.PlotInterval.frange(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.get_v(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.get_v_len(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.get_v_max(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.get_v_min(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.get_v_steps(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.require_all_args(f)
sympy.plotting.pygletplot.plot_interval.PlotInterval.set_v(self,v)
sympy.plotting.pygletplot.plot_interval.PlotInterval.set_v_max(self,v_max)
sympy.plotting.pygletplot.plot_interval.PlotInterval.set_v_min(self,v_min)
sympy.plotting.pygletplot.plot_interval.PlotInterval.set_v_steps(self,v_steps)
sympy.plotting.pygletplot.plot_interval.PlotInterval.try_parse(*args)
sympy.plotting.pygletplot.plot_interval.PlotInterval.vrange(self)
sympy.plotting.pygletplot.plot_interval.PlotInterval.vrange2(self)
sympy.plotting.pygletplot_interval.PlotInterval(self,*args)
sympy.plotting.pygletplot_interval.PlotInterval.__repr__(self)
sympy.plotting.pygletplot_interval.PlotInterval.__str__(self)
sympy.plotting.pygletplot_interval.PlotInterval._str_base(self)
sympy.plotting.pygletplot_interval.PlotInterval.assert_complete(self)
sympy.plotting.pygletplot_interval.PlotInterval.fill_from(self,b)
sympy.plotting.pygletplot_interval.PlotInterval.frange(self)
sympy.plotting.pygletplot_interval.PlotInterval.get_v(self)
sympy.plotting.pygletplot_interval.PlotInterval.get_v_len(self)
sympy.plotting.pygletplot_interval.PlotInterval.get_v_max(self)
sympy.plotting.pygletplot_interval.PlotInterval.get_v_min(self)
sympy.plotting.pygletplot_interval.PlotInterval.get_v_steps(self)
sympy.plotting.pygletplot_interval.PlotInterval.require_all_args(f)
sympy.plotting.pygletplot_interval.PlotInterval.set_v(self,v)
sympy.plotting.pygletplot_interval.PlotInterval.set_v_max(self,v_max)
sympy.plotting.pygletplot_interval.PlotInterval.set_v_min(self,v_min)
sympy.plotting.pygletplot_interval.PlotInterval.set_v_steps(self,v_steps)
sympy.plotting.pygletplot_interval.PlotInterval.try_parse(*args)
sympy.plotting.pygletplot_interval.PlotInterval.vrange(self)
sympy.plotting.pygletplot_interval.PlotInterval.vrange2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_curve.py----------------------------------------
A:sympy.plotting.pygletplot.plot_curve.self.t_set->list(self.t_interval.frange())
A:sympy.plotting.pygletplot.plot_curve.evaluate->self._get_evaluator()
A:sympy.plotting.pygletplot.plot_curve.self._calculating_verts_len->float(self.t_interval.v_len)
A:sympy.plotting.pygletplot.plot_curve.self.verts->list()
A:sympy.plotting.pygletplot.plot_curve._e->evaluate(t)
A:sympy.plotting.pygletplot.plot_curve.b[axis][0]->min([b[axis][0], _e[axis]])
A:sympy.plotting.pygletplot.plot_curve.b[axis][1]->max([b[axis][1], _e[axis]])
A:sympy.plotting.pygletplot.plot_curve.self._calculating_cverts_len->float(n)
A:sympy.plotting.pygletplot.plot_curve.self.cverts->self.color.apply_to_curve(self.verts, self.t_set, set_len=set_work_len, inc_pos=inc_work_pos)
sympy.plotting.pygletplot.plot_curve.PlotCurve(PlotModeBase)
sympy.plotting.pygletplot.plot_curve.PlotCurve._on_calculate_cverts(self)
sympy.plotting.pygletplot.plot_curve.PlotCurve._on_calculate_verts(self)
sympy.plotting.pygletplot.plot_curve.PlotCurve.calculate_one_cvert(self,t)
sympy.plotting.pygletplot.plot_curve.PlotCurve.draw_verts(self,use_cverts)
sympy.plotting.pygletplot_curve.PlotCurve(PlotModeBase)
sympy.plotting.pygletplot_curve.PlotCurve._on_calculate_cverts(self)
sympy.plotting.pygletplot_curve.PlotCurve._on_calculate_verts(self)
sympy.plotting.pygletplot_curve.PlotCurve.calculate_one_cvert(self,t)
sympy.plotting.pygletplot_curve.PlotCurve.draw_verts(self,use_cverts)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/plot_object.py----------------------------------------
sympy.plotting.pygletplot.plot_object.PlotObject(object)
sympy.plotting.pygletplot.plot_object.PlotObject._draw(self)
sympy.plotting.pygletplot.plot_object.PlotObject.draw(self)
sympy.plotting.pygletplot_object.PlotObject(object)
sympy.plotting.pygletplot_object.PlotObject._draw(self)
sympy.plotting.pygletplot_object.PlotObject.draw(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/pygletplot/tests/test_plotting.py----------------------------------------
A:sympy.plotting.pygletplot.tests.test_plotting.pyglet_gl->import_module('pyglet.gl', catch=(OSError,))
A:sympy.plotting.pygletplot.tests.test_plotting.pyglet_window->import_module('pyglet.window', catch=(OSError,))
A:sympy.plotting.pygletplot.tests.test_plotting.(x, y, z)->symbols('x, y, z')
A:sympy.plotting.pygletplot.tests.test_plotting.p->PygletPlot(Integral(z * x, (x, 1, z), (z, 1, y)), visible=False)
sympy.plotting.pygletplot.tests.test_plotting._test_plot_log()
sympy.plotting.pygletplot.tests.test_plotting.test_import()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_2d()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_2d_discontinuous()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_2d_parametric()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_2d_polar()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_3d()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_3d_cylinder()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_3d_discontinuous()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_3d_parametric()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_3d_spherical()
sympy.plotting.pygletplot.tests.test_plotting.test_plot_integral()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/tests/test_plot_implicit.py----------------------------------------
A:sympy.plotting.tests.test_plot_implicit.x->Symbol('x')
A:sympy.plotting.tests.test_plot_implicit.y->Symbol('y')
A:sympy.plotting.tests.test_plot_implicit.z->Symbol('z')
A:sympy.plotting.tests.test_plot_implicit.matplotlib->import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))
sympy.plotting.tests.test_plot_implicit.plot_and_save(name)
sympy.plotting.tests.test_plot_implicit.test_matplotlib()
sympy.plotting.tests.test_plot_implicit.tmp_file(name='')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/tests/test_plot.py----------------------------------------
A:sympy.plotting.tests.test_plot.sys.stdout->MockPrint()
A:sympy.plotting.tests.test_plot.x->Symbol('x')
A:sympy.plotting.tests.test_plot.y->Symbol('y')
A:sympy.plotting.tests.test_plot.z->Symbol('z')
A:sympy.plotting.tests.test_plot.p->plot(summation(1 / x, (x, 1, y)), (y, 2, 10), show=False)
A:sympy.plotting.tests.test_plot.p[2]->plot(x ** 2, (x, -2, 3))
A:sympy.plotting.tests.test_plot.i->Integral(log((sin(x) ** 2 + 1) * sqrt(x ** 2 + 1)), (x, 0, y))
A:sympy.plotting.tests.test_plot.s->summation(1 / x ** y, (x, 1, oo))
A:sympy.plotting.tests.test_plot.matplotlib->import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))
A:sympy.plotting.tests.test_plot.f->lambdify([x], x + 1)
A:sympy.plotting.tests.test_plot.p1->plot(x)
A:sympy.plotting.tests.test_plot.p2->plot(x ** 2)
A:sympy.plotting.tests.test_plot.p3->plot(x + 2)
sympy.plotting.tests.test_plot.MockPrint(object)
sympy.plotting.tests.test_plot.MockPrint.write(self,s)
sympy.plotting.tests.test_plot.TmpFileManager
sympy.plotting.tests.test_plot.TmpFileManager.cleanup(cls)
sympy.plotting.tests.test_plot.TmpFileManager.tmp_file(cls,name='')
sympy.plotting.tests.test_plot.disable_print(func,*args,**kwargs)
sympy.plotting.tests.test_plot.plot_and_save(name)
sympy.plotting.tests.test_plot.test_append_issue_7140()
sympy.plotting.tests.test_plot.test_experimental_lambify()
sympy.plotting.tests.test_plot.test_matplotlib()
sympy.plotting.tests.test_plot_and_save(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/interval_arithmetic.py----------------------------------------
A:sympy.plotting.intervalmath.interval_arithmetic.self.is_valid->kwargs.pop('is_valid', True)
A:sympy.plotting.intervalmath.interval_arithmetic.self.start->float(args[1])
A:sympy.plotting.intervalmath.interval_arithmetic.self.end->float(args[0])
A:sympy.plotting.intervalmath.interval_arithmetic.start->max(inters)
A:sympy.plotting.intervalmath.interval_arithmetic.end->max(inter.start ** power, inter.end ** power)
A:sympy.plotting.intervalmath.interval_arithmetic.other->interval(other)
A:sympy.plotting.intervalmath.interval_arithmetic.power_rational->nsimplify(power)
A:sympy.plotting.intervalmath.interval_arithmetic.(num, denom)->nsimplify(power).as_numer_denom()
A:sympy.plotting.intervalmath.interval_arithmetic.ret->interval(start, end)
A:sympy.plotting.intervalmath.interval_arithmetic.power->int(power)
sympy.plotting.intervalmath.interval(self,*args,**kwargs)
sympy.plotting.intervalmath.interval.__add__(self,other)
sympy.plotting.intervalmath.interval.__contains__(self,other)
sympy.plotting.intervalmath.interval.__div__(self,other)
sympy.plotting.intervalmath.interval.__eq__(self,other)
sympy.plotting.intervalmath.interval.__ge__(self,other)
sympy.plotting.intervalmath.interval.__gt__(self,other)
sympy.plotting.intervalmath.interval.__hash__(self)
sympy.plotting.intervalmath.interval.__le__(self,other)
sympy.plotting.intervalmath.interval.__lt__(self,other)
sympy.plotting.intervalmath.interval.__mul__(self,other)
sympy.plotting.intervalmath.interval.__ne__(self,other)
sympy.plotting.intervalmath.interval.__neg__(self)
sympy.plotting.intervalmath.interval.__pow__(self,other)
sympy.plotting.intervalmath.interval.__rdiv__(self,other)
sympy.plotting.intervalmath.interval.__repr__(self)
sympy.plotting.intervalmath.interval.__rpow__(self,other)
sympy.plotting.intervalmath.interval.__rsub__(self,other)
sympy.plotting.intervalmath.interval.__str__(self)
sympy.plotting.intervalmath.interval.__sub__(self,other)
sympy.plotting.intervalmath.interval.mid(self)
sympy.plotting.intervalmath.interval.width(self)
sympy.plotting.intervalmath.interval_arithmetic._pow_float(inter,power)
sympy.plotting.intervalmath.interval_arithmetic._pow_int(inter,power)
sympy.plotting.intervalmath.interval_arithmetic.interval(self,*args,**kwargs)
sympy.plotting.intervalmath.interval_arithmetic.interval.__add__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__contains__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__div__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__eq__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__ge__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__gt__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__hash__(self)
sympy.plotting.intervalmath.interval_arithmetic.interval.__init__(self,*args,**kwargs)
sympy.plotting.intervalmath.interval_arithmetic.interval.__le__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__lt__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__mul__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__ne__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__neg__(self)
sympy.plotting.intervalmath.interval_arithmetic.interval.__pow__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__rdiv__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__repr__(self)
sympy.plotting.intervalmath.interval_arithmetic.interval.__rpow__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__rsub__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.__str__(self)
sympy.plotting.intervalmath.interval_arithmetic.interval.__sub__(self,other)
sympy.plotting.intervalmath.interval_arithmetic.interval.mid(self)
sympy.plotting.intervalmath.interval_arithmetic.interval.width(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/lib_interval.py----------------------------------------
A:sympy.plotting.intervalmath.lib_interval.np->import_module('numpy')
A:sympy.plotting.intervalmath.lib_interval.start->import_module('numpy').arctanh(x.start)
A:sympy.plotting.intervalmath.lib_interval.end->import_module('numpy').arctanh(x.end)
A:sympy.plotting.intervalmath.lib_interval.(na, __)->divmod(x.start, np.pi / 2.0)
A:sympy.plotting.intervalmath.lib_interval.(nb, __)->divmod(x.end, np.pi / 2.0)
sympy.plotting.intervalmath.Abs(x)
sympy.plotting.intervalmath.And(*args)
sympy.plotting.intervalmath.Or(*args)
sympy.plotting.intervalmath.acos(x)
sympy.plotting.intervalmath.acosh(x)
sympy.plotting.intervalmath.asin(x)
sympy.plotting.intervalmath.asinh(x)
sympy.plotting.intervalmath.atan(x)
sympy.plotting.intervalmath.atanh(x)
sympy.plotting.intervalmath.ceil(x)
sympy.plotting.intervalmath.cos(x)
sympy.plotting.intervalmath.cosh(x)
sympy.plotting.intervalmath.exp(x)
sympy.plotting.intervalmath.floor(x)
sympy.plotting.intervalmath.imax(*args)
sympy.plotting.intervalmath.imin(*args)
sympy.plotting.intervalmath.lib_interval.Abs(x)
sympy.plotting.intervalmath.lib_interval.And(*args)
sympy.plotting.intervalmath.lib_interval.Or(*args)
sympy.plotting.intervalmath.lib_interval.acos(x)
sympy.plotting.intervalmath.lib_interval.acosh(x)
sympy.plotting.intervalmath.lib_interval.asin(x)
sympy.plotting.intervalmath.lib_interval.asinh(x)
sympy.plotting.intervalmath.lib_interval.atan(x)
sympy.plotting.intervalmath.lib_interval.atanh(x)
sympy.plotting.intervalmath.lib_interval.ceil(x)
sympy.plotting.intervalmath.lib_interval.cos(x)
sympy.plotting.intervalmath.lib_interval.cosh(x)
sympy.plotting.intervalmath.lib_interval.exp(x)
sympy.plotting.intervalmath.lib_interval.floor(x)
sympy.plotting.intervalmath.lib_interval.imax(*args)
sympy.plotting.intervalmath.lib_interval.imin(*args)
sympy.plotting.intervalmath.lib_interval.log(x)
sympy.plotting.intervalmath.lib_interval.log10(x)
sympy.plotting.intervalmath.lib_interval.sin(x)
sympy.plotting.intervalmath.lib_interval.sinh(x)
sympy.plotting.intervalmath.lib_interval.sqrt(x)
sympy.plotting.intervalmath.lib_interval.tan(x)
sympy.plotting.intervalmath.lib_interval.tanh(x)
sympy.plotting.intervalmath.log(x)
sympy.plotting.intervalmath.log10(x)
sympy.plotting.intervalmath.sin(x)
sympy.plotting.intervalmath.sinh(x)
sympy.plotting.intervalmath.sqrt(x)
sympy.plotting.intervalmath.tan(x)
sympy.plotting.intervalmath.tanh(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/tests/test_intervalmath.py----------------------------------------
A:sympy.plotting.intervalmath.tests.test_intervalmath.inter->interval(-5, 5)
A:sympy.plotting.intervalmath.tests.test_intervalmath.interb->interval(-float('inf'), float('inf'))
sympy.plotting.intervalmath.tests.test_intervalmath.test_hashable()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval_add()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval_div()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval_inequality()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval_mul()
sympy.plotting.intervalmath.tests.test_intervalmath.test_interval_sub()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/plotting/intervalmath/tests/test_interval_functions.py----------------------------------------
A:sympy.plotting.intervalmath.tests.test_interval_functions.np->import_module('numpy')
A:sympy.plotting.intervalmath.tests.test_interval_functions.a->atanh(1.5)
sympy.plotting.intervalmath.tests.test_interval_functions.test_Abs()
sympy.plotting.intervalmath.tests.test_interval_functions.test_And()
sympy.plotting.intervalmath.tests.test_interval_functions.test_Or()
sympy.plotting.intervalmath.tests.test_interval_functions.test_acos()
sympy.plotting.intervalmath.tests.test_interval_functions.test_acosh()
sympy.plotting.intervalmath.tests.test_interval_functions.test_asin()
sympy.plotting.intervalmath.tests.test_interval_functions.test_asinh()
sympy.plotting.intervalmath.tests.test_interval_functions.test_atan()
sympy.plotting.intervalmath.tests.test_interval_functions.test_atanh()
sympy.plotting.intervalmath.tests.test_interval_functions.test_ceil()
sympy.plotting.intervalmath.tests.test_interval_functions.test_cos()
sympy.plotting.intervalmath.tests.test_interval_functions.test_cosh()
sympy.plotting.intervalmath.tests.test_interval_functions.test_exp()
sympy.plotting.intervalmath.tests.test_interval_functions.test_floor()
sympy.plotting.intervalmath.tests.test_interval_functions.test_imax()
sympy.plotting.intervalmath.tests.test_interval_functions.test_imin()
sympy.plotting.intervalmath.tests.test_interval_functions.test_interval_pow()
sympy.plotting.intervalmath.tests.test_interval_functions.test_log()
sympy.plotting.intervalmath.tests.test_interval_functions.test_log10()
sympy.plotting.intervalmath.tests.test_interval_functions.test_sin()
sympy.plotting.intervalmath.tests.test_interval_functions.test_sinh()
sympy.plotting.intervalmath.tests.test_interval_functions.test_sqrt()
sympy.plotting.intervalmath.tests.test_interval_functions.test_tan()
sympy.plotting.intervalmath.tests.test_interval_functions.test_tanh()
sympy.plotting.intervalmath.tests.test_interval_test_Abs()
sympy.plotting.intervalmath.tests.test_interval_test_And()
sympy.plotting.intervalmath.tests.test_interval_test_Or()
sympy.plotting.intervalmath.tests.test_interval_test_acos()
sympy.plotting.intervalmath.tests.test_interval_test_acosh()
sympy.plotting.intervalmath.tests.test_interval_test_asin()
sympy.plotting.intervalmath.tests.test_interval_test_asinh()
sympy.plotting.intervalmath.tests.test_interval_test_atan()
sympy.plotting.intervalmath.tests.test_interval_test_atanh()
sympy.plotting.intervalmath.tests.test_interval_test_ceil()
sympy.plotting.intervalmath.tests.test_interval_test_cos()
sympy.plotting.intervalmath.tests.test_interval_test_cosh()
sympy.plotting.intervalmath.tests.test_interval_test_exp()
sympy.plotting.intervalmath.tests.test_interval_test_floor()
sympy.plotting.intervalmath.tests.test_interval_test_imax()
sympy.plotting.intervalmath.tests.test_interval_test_imin()
sympy.plotting.intervalmath.tests.test_interval_test_interval_pow()
sympy.plotting.intervalmath.tests.test_interval_test_log()
sympy.plotting.intervalmath.tests.test_interval_test_log10()
sympy.plotting.intervalmath.tests.test_interval_test_sin()
sympy.plotting.intervalmath.tests.test_interval_test_sinh()
sympy.plotting.intervalmath.tests.test_interval_test_sqrt()
sympy.plotting.intervalmath.tests.test_interval_test_tan()
sympy.plotting.intervalmath.tests.test_interval_test_tanh()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/polysys.py----------------------------------------
A:sympy.solvers.polysys.(polys, opt)->parallel_poly_from_expr(seq, *gens, **args)
A:sympy.solvers.polysys.(a, b)->univariate.pop().degree_list()
A:sympy.solvers.polysys.(c, d)->g.degree_list()
A:sympy.solvers.polysys.G->list(reversed(G))
A:sympy.solvers.polysys.p->min(H, key=lambda h: h.degree())
A:sympy.solvers.polysys.q->q.ltrim(-1).ltrim(-1)
A:sympy.solvers.polysys.q_roots->list(roots(q).keys())
A:sympy.solvers.polysys.zeros->min(H, key=lambda h: h.degree()).ground_roots()
A:sympy.solvers.polysys.basis->groebner(system, gens, polys=True)
A:sympy.solvers.polysys.univariate->list(filter(_is_univariate, basis))
A:sympy.solvers.polysys.f->list(filter(_is_univariate, basis)).pop()
A:sympy.solvers.polysys.eq->_subs_root(b, gen, zero)
A:sympy.solvers.polysys.result->_solve_reduced_system(polys, opt.gens, entry=True)
A:sympy.solvers.polysys.domain->args.get('domain')
A:sympy.solvers.polysys.G[i]->g.set_domain(domain)
A:sympy.solvers.polysys.dom->list(filter(_is_univariate, basis)).pop().get_domain()
A:sympy.solvers.polysys.solutions->list(solutions)
A:sympy.solvers.polysys.var_seq->reversed(gens[:-1])
A:sympy.solvers.polysys.vars_seq->postfixes(gens[1:])
A:sympy.solvers.polysys._solutions->set([])
A:sympy.solvers.polysys.h->g.ltrim(var).eval(dict(mapping))
A:sympy.solvers.polysys.dom_zero->list(filter(_is_univariate, basis)).pop().get_domain().algebraic_field(zero)
sympy.polysys.SolveFailed(Exception)
sympy.polysys.solve_biquadratic(f,g,opt)
sympy.polysys.solve_generic(polys,opt)
sympy.solve_poly_system(seq,*gens,**args)
sympy.solve_triangulated(polys,*gens,**args)
sympy.solvers.polysys.SolveFailed(Exception)
sympy.solvers.polysys.solve_biquadratic(f,g,opt)
sympy.solvers.polysys.solve_generic(polys,opt)
sympy.solvers.polysys.solve_poly_system(seq,*gens,**args)
sympy.solvers.polysys.solve_triangulated(polys,*gens,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/diophantine.py----------------------------------------
A:sympy.solvers.diophantine.eq->_mexpand(4 * A * r * u * v + 4 * A * D * (B * v + r * u + r * v - B * u) + 2 * A * 4 * A * E * (u - v) + 4 * A * r * 4 * A * F)
A:sympy.solvers.diophantine.var->list(eq.free_symbols)
A:sympy.solvers.diophantine.sols->diophantine(coeff[x * y] * x + coeff[y * z] * z - x * z)
A:sympy.solvers.diophantine.(var_t, jnk, eq_type)->classify_diop(base)
A:sympy.solvers.diophantine.solution->iter(solution)
A:sympy.solvers.diophantine.params->numbered_symbols('n', Integer=True, start=1)
A:sympy.solvers.diophantine.(var, coeff, eq_type)->classify_diop(eq)
A:sympy.solvers.diophantine.(x_0, y_0, z_0)->holzer(x_0, y_0, z_0, abs(a_2), abs(b_2), abs(c_2))
A:sympy.solvers.diophantine.l->int(sqrt(n))
A:sympy.solvers.diophantine.s->set([])
A:sympy.solvers.diophantine.coeff->dict([reversed(t.as_independent(*[X, Y])) for t in simplified.args])
A:sympy.solvers.diophantine.coeff[term]->Integer(0)
A:sympy.solvers.diophantine.(var, coeff, diop_type)->classify_diop(eq)
A:sympy.solvers.diophantine.(sol_x, sol_y)->base_solution_linear(c, a, b, param)
A:sympy.solvers.diophantine.d->divisors(square_factor(N))
A:sympy.solvers.diophantine.(x0, y0, d)->extended_euclid(b, a % b)
A:sympy.solvers.diophantine.div->divisors(Q)
A:sympy.solvers.diophantine.g->igcd(a, b)
A:sympy.solvers.diophantine.e->sign(B / A)
A:sympy.solvers.diophantine.z->symbols('z', real=True)
A:sympy.solvers.diophantine.roots->solve(sqrt(a) * g * z ** 2 + D * z + sqrt(a) * F)
A:sympy.solvers.diophantine.r->sqrt_mod(A, B)
A:sympy.solvers.diophantine.(u, v)->symbols('u, v', integer=True)
A:sympy.solvers.diophantine.sol->set([]).pop()
A:sympy.solvers.diophantine.(P, Q)->_transformation_to_DN(var, coeff)
A:sympy.solvers.diophantine.(D, N)->_find_DN(var, coeff)
A:sympy.solvers.diophantine.solns_pell->diop_DN(D, N)
A:sympy.solvers.diophantine.a->int(q)
A:sympy.solvers.diophantine.x_n->_mexpand(x_n)
A:sympy.solvers.diophantine.y_n->_mexpand(y_n)
A:sympy.solvers.diophantine.L->ilcm(S(P[0]).q, ilcm(S(P[1]).q, ilcm(S(P[2]).q, ilcm(S(P[3]).q, ilcm(S(Q[0]).q, S(Q[1]).q)))))
A:sympy.solvers.diophantine.pqa->PQa(z, abs(m), D)
A:sympy.solvers.diophantine.a_0->square_factor(a)
A:sympy.solvers.diophantine.i->next(pqa)
A:sympy.solvers.diophantine.zs->sqrt_mod(D, abs(m), True)
A:sympy.solvers.diophantine.v->sqrt_mod(-b * a1, m, True)
A:sympy.solvers.diophantine.a_i->floor((P_i + sqrt(D)) / Q_i)
A:sympy.solvers.diophantine.L1->ceiling(sqrt(S(-N) / D))
A:sympy.solvers.diophantine.x->sympify(x)
A:sympy.solvers.diophantine.(num, den)->rad_rationalize(1, q - a)
A:sympy.solvers.diophantine.(X, Y)->symbols('X, Y', integer=True)
A:sympy.solvers.diophantine.(A_0, B_0)->_transformation_to_DN([X, Y], coeff)
A:sympy.solvers.diophantine.(A, B)->_mexpand(eq_1).as_independent(r, as_Add=True)
A:sympy.solvers.diophantine.simplified->_mexpand(Subs(eq, (x, y), (u, v)).doit())
A:sympy.solvers.diophantine.(k, m, n)->symbols('k, m, n', integer=True)
A:sympy.solvers.diophantine.p->Wild('p', exclude=[k])
A:sympy.solvers.diophantine.q->Wild('q', exclude=[k])
A:sympy.solvers.diophantine.z_x->_mexpand(Subs(x, t, a * k + i).doit()).match(p * k + q)
A:sympy.solvers.diophantine.z_y->_mexpand(Subs(y, t, a * k + i).doit()).match(p * k + q)
A:sympy.solvers.diophantine.x_param->sympify(x).match(p * t + q)
A:sympy.solvers.diophantine.y_param->y.match(p * t + q)
A:sympy.solvers.diophantine.(l1, junk)->Poly(y).clear_denoms()
A:sympy.solvers.diophantine.(l2, junk)->Poly(x).clear_denoms()
A:sympy.solvers.diophantine.(lcm_denom, junk)->Poly(eq).clear_denoms()
A:sympy.solvers.diophantine.(y_0, x_0, z_0)->_diop_ternary_quadratic(var, coeff)
A:sympy.solvers.diophantine.(z_0, y_0, x_0)->_diop_ternary_quadratic(var, coeff)
A:sympy.solvers.diophantine._coeff->dict()
A:sympy.solvers.diophantine.(X_0, y_0, z_0)->_diop_ternary_quadratic(var, _coeff)
A:sympy.solvers.diophantine.T->_transformation_to_normal(_var, coeff)
A:sympy.solvers.diophantine.T_0->_transformation_to_normal(_var, _coeff)
A:sympy.solvers.diophantine.(z_p, y_p, x_p)->_parametrize_ternary_quadratic((z_0, y_0, x_0), v, coeff)
A:sympy.solvers.diophantine.(y_p, x_p, z_p)->_parametrize_ternary_quadratic((y_0, x_0, z_0), v, coeff)
A:sympy.solvers.diophantine.(r, p, q)->symbols('r, p, q', integer=True)
A:sympy.solvers.diophantine.eq_1->_mexpand(eq_1)
A:sympy.solvers.diophantine.b_0->square_factor(b)
A:sympy.solvers.diophantine.c_0->square_factor(c)
A:sympy.solvers.diophantine.(a_2, b_2, c_2)->pairwise_prime(a_1, b_1, c_1)
A:sympy.solvers.diophantine.(z_0, x_0, y_0)->descent(A, B)
A:sympy.solvers.diophantine.(x_0, z_0, y_0)->holzer(x_0, z_0, y_0, abs(a_2), abs(c_2), abs(b_2))
A:sympy.solvers.diophantine.(y_0, z_0, x_0)->holzer(y_0, z_0, x_0, abs(b_2), abs(c_2), abs(a_2))
A:sympy.solvers.diophantine.x_0->abs(x_0 * l // a_0)
A:sympy.solvers.diophantine.y_0->abs(y_0 * l // b_0)
A:sympy.solvers.diophantine.z_0->abs(z_0 * l // c_0)
A:sympy.solvers.diophantine.f->partition(k, m, True)
A:sympy.solvers.diophantine.(a, b, c)->make_prime(a, b, c)
A:sympy.solvers.diophantine.(b, c, a)->make_prime(b, c, a)
A:sympy.solvers.diophantine.(c, a, b)->make_prime(c, a, b)
A:sympy.solvers.diophantine.(w, y, x)->ldescent(B, A)
A:sympy.solvers.diophantine.(W, X, Y)->ldescent(A, B_0)
A:sympy.solvers.diophantine.(x, y, z)->sum_of_three_squares(n)
A:sympy.solvers.diophantine.(x, z, y)->descent(-1, A)
A:sympy.solvers.diophantine.w->sqrt_mod(A, B)
A:sympy.solvers.diophantine.(x_0, z_0)->gaussian_reduce(w, A, B)
A:sympy.solvers.diophantine.t_2->square_factor(t)
A:sympy.solvers.diophantine.(x_1, z_1, y_1)->descent(A, t_1)
A:sympy.solvers.diophantine.(u_0, v_0)->base_solution_linear(c, y_0, -x_0)
A:sympy.solvers.diophantine.n->len(var)
A:sympy.solvers.diophantine.m->symbols(str(t) + '1:' + str(n), integer=True)
A:sympy.solvers.diophantine.lcm->ilcm(lcm, sqrt(coeff[v ** 2]) if sqrt(coeff[v ** 2]) % 2 else sqrt(coeff[v ** 2]) // 2)
A:sympy.solvers.diophantine.(a, b, c, d)->sum_of_four_squares(n_i)
A:sympy.solvers.diophantine.b->pow(b, (p - 1) // 4, p)
A:sympy.solvers.diophantine.(y, z)->prime_as_sum_of_two_squares(n - x ** 2)
sympy.diophantine.PQa(P_0,Q_0,D)
sympy.diophantine._diop_general_pythagorean(var,coeff,t)
sympy.diophantine._diop_general_sum_of_squares(var,coeff,limit=1)
sympy.diophantine._diop_linear(var,coeff,param)
sympy.diophantine._diop_quadratic(var,coeff,t)
sympy.diophantine._diop_ternary_quadratic(_var,coeff)
sympy.diophantine._diop_ternary_quadratic_normal(var,coeff)
sympy.diophantine._find_DN(var,coeff)
sympy.diophantine._parametrize_ternary_quadratic(solution,_var,coeff)
sympy.diophantine._transformation_to_DN(var,coeff)
sympy.diophantine._transformation_to_normal(var,coeff)
sympy.diophantine.base_solution_linear(c,a,b,t=None)
sympy.diophantine.check_param(x,y,a,t)
sympy.diophantine.classify_diop(eq)
sympy.diophantine.cornacchia(a,b,m)
sympy.diophantine.descent(A,B)
sympy.diophantine.diop_DN(D,N,t=symbols('t',integer=True))
sympy.diophantine.diop_bf_DN(D,N,t=symbols('t',integer=True))
sympy.diophantine.diop_general_pythagorean(eq,param=symbols('m',integer=True))
sympy.diophantine.diop_general_sum_of_squares(eq,limit=1)
sympy.diophantine.diop_linear(eq,param=symbols('t',integer=True))
sympy.diophantine.diop_quadratic(eq,param=symbols('t',integer=True))
sympy.diophantine.diop_solve(eq,param=symbols('t',integer=True))
sympy.diophantine.diop_ternary_quadratic(eq)
sympy.diophantine.diop_ternary_quadratic_normal(eq)
sympy.diophantine.diophantine(eq,param=symbols('t',integer=True))
sympy.diophantine.divisible(a,b)
sympy.diophantine.dot(u,v,w,a,b)
sympy.diophantine.equivalent(u,v,r,s,D,N)
sympy.diophantine.extended_euclid(a,b)
sympy.diophantine.find_DN(eq)
sympy.diophantine.gaussian_reduce(w,a,b)
sympy.diophantine.holzer(x_0,y_0,z_0,a,b,c)
sympy.diophantine.is_solution_quad(var,coeff,u,v)
sympy.diophantine.ldescent(A,B)
sympy.diophantine.length(P,Q,D)
sympy.diophantine.make_prime(a,b,c)
sympy.diophantine.merge_solution(var,var_t,solution)
sympy.diophantine.norm(u,w,a,b)
sympy.diophantine.pairwise_prime(a,b,c)
sympy.diophantine.parametrize_ternary_quadratic(eq)
sympy.diophantine.partition(n,k=None,zeros=False)
sympy.diophantine.pow_rep_recursive(n_i,k,n_remaining,terms,p)
sympy.diophantine.power_representation(n,p,k,zeros=False)
sympy.diophantine.prime_as_sum_of_two_squares(p)
sympy.diophantine.reconstruct(a,b,z)
sympy.diophantine.simplified(x,y,z)
sympy.diophantine.square_factor(a)
sympy.diophantine.sum_of_four_squares(n)
sympy.diophantine.sum_of_three_squares(n)
sympy.diophantine.transformation_to_DN(eq)
sympy.diophantine.transformation_to_normal(eq)
sympy.solvers.diophantine.PQa(P_0,Q_0,D)
sympy.solvers.diophantine._diop_general_pythagorean(var,coeff,t)
sympy.solvers.diophantine._diop_general_sum_of_squares(var,coeff,limit=1)
sympy.solvers.diophantine._diop_linear(var,coeff,param)
sympy.solvers.diophantine._diop_quadratic(var,coeff,t)
sympy.solvers.diophantine._diop_ternary_quadratic(_var,coeff)
sympy.solvers.diophantine._diop_ternary_quadratic_normal(var,coeff)
sympy.solvers.diophantine._find_DN(var,coeff)
sympy.solvers.diophantine._parametrize_ternary_quadratic(solution,_var,coeff)
sympy.solvers.diophantine._transformation_to_DN(var,coeff)
sympy.solvers.diophantine._transformation_to_normal(var,coeff)
sympy.solvers.diophantine.base_solution_linear(c,a,b,t=None)
sympy.solvers.diophantine.check_param(x,y,a,t)
sympy.solvers.diophantine.classify_diop(eq)
sympy.solvers.diophantine.cornacchia(a,b,m)
sympy.solvers.diophantine.descent(A,B)
sympy.solvers.diophantine.diop_DN(D,N,t=symbols('t',integer=True))
sympy.solvers.diophantine.diop_bf_DN(D,N,t=symbols('t',integer=True))
sympy.solvers.diophantine.diop_general_pythagorean(eq,param=symbols('m',integer=True))
sympy.solvers.diophantine.diop_general_sum_of_squares(eq,limit=1)
sympy.solvers.diophantine.diop_linear(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diop_quadratic(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diop_solve(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.diop_ternary_quadratic(eq)
sympy.solvers.diophantine.diop_ternary_quadratic_normal(eq)
sympy.solvers.diophantine.diophantine(eq,param=symbols('t',integer=True))
sympy.solvers.diophantine.divisible(a,b)
sympy.solvers.diophantine.dot(u,v,w,a,b)
sympy.solvers.diophantine.equivalent(u,v,r,s,D,N)
sympy.solvers.diophantine.extended_euclid(a,b)
sympy.solvers.diophantine.find_DN(eq)
sympy.solvers.diophantine.gaussian_reduce(w,a,b)
sympy.solvers.diophantine.holzer(x_0,y_0,z_0,a,b,c)
sympy.solvers.diophantine.is_solution_quad(var,coeff,u,v)
sympy.solvers.diophantine.ldescent(A,B)
sympy.solvers.diophantine.length(P,Q,D)
sympy.solvers.diophantine.make_prime(a,b,c)
sympy.solvers.diophantine.merge_solution(var,var_t,solution)
sympy.solvers.diophantine.norm(u,w,a,b)
sympy.solvers.diophantine.pairwise_prime(a,b,c)
sympy.solvers.diophantine.parametrize_ternary_quadratic(eq)
sympy.solvers.diophantine.partition(n,k=None,zeros=False)
sympy.solvers.diophantine.pow_rep_recursive(n_i,k,n_remaining,terms,p)
sympy.solvers.diophantine.power_representation(n,p,k,zeros=False)
sympy.solvers.diophantine.prime_as_sum_of_two_squares(p)
sympy.solvers.diophantine.reconstruct(a,b,z)
sympy.solvers.diophantine.simplified(x,y,z)
sympy.solvers.diophantine.square_factor(a)
sympy.solvers.diophantine.sum_of_four_squares(n)
sympy.solvers.diophantine.sum_of_three_squares(n)
sympy.solvers.diophantine.transformation_to_DN(eq)
sympy.solvers.diophantine.transformation_to_normal(eq)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/inequalities.py----------------------------------------
A:sympy.solvers.inequalities.interval->numer_interval.intersect(global_interval)
A:sympy.solvers.inequalities.numer_intervals->solve_poly_inequality(numer * denom, rel)
A:sympy.solvers.inequalities.denom_intervals->solve_poly_inequality(denom, '==')
A:sympy.solvers.inequalities.result->solution.evalf().as_relational(gen)
A:sympy.solvers.inequalities.((numer, denom), opt)->parallel_poly_from_expr(expr.together().as_numer_denom(), gen)
A:sympy.solvers.inequalities.domain->opt.domain.get_exact()
A:sympy.solvers.inequalities.solution->solution.evalf().evalf()
A:sympy.solvers.inequalities._exprs->_bottom_up_scan(expr.args[0])
A:sympy.solvers.inequalities.exprs->_bottom_up_scan(expr)
A:sympy.solvers.inequalities.expr->Relational(-expr, 0, mapping[rel])
A:sympy.solvers.inequalities.solns->solve(expr.lhs - expr.rhs, gen)
A:sympy.solvers.inequalities.rv->Union(*sol_sets)
A:sympy.solvers.inequalities.p->Poly(expr, s)
A:sympy.solvers.inequalities.(n, d)->Relational(-expr, 0, mapping[rel]).as_numer_denom()
A:sympy.solvers.inequalities.(a, b)->Poly(expr, s).all_coeffs()
A:sympy.solvers.inequalities.gen->gens.pop()
A:sympy.solvers.inequalities.components->Relational(-expr, 0, mapping[rel]).find(lambda u: u.is_Function)
sympy.inequalities._solve_inequality(ie,s)
sympy.inequalities.reduce_rational_inequalities(exprs,gen,relational=True)
sympy.inequalities.solve_poly_inequalities(polys)
sympy.reduce_abs_inequalities(exprs,gen)
sympy.reduce_abs_inequality(expr,rel,gen)
sympy.reduce_inequalities(inequalities,symbols=[])
sympy.solve_poly_inequality(poly,rel)
sympy.solve_rational_inequalities(eqs)
sympy.solve_univariate_inequality(expr,gen,relational=True)
sympy.solvers.inequalities._solve_inequality(ie,s)
sympy.solvers.inequalities.reduce_abs_inequalities(exprs,gen)
sympy.solvers.inequalities.reduce_abs_inequality(expr,rel,gen)
sympy.solvers.inequalities.reduce_inequalities(inequalities,symbols=[])
sympy.solvers.inequalities.reduce_rational_inequalities(exprs,gen,relational=True)
sympy.solvers.inequalities.solve_poly_inequalities(polys)
sympy.solvers.inequalities.solve_poly_inequality(poly,rel)
sympy.solvers.inequalities.solve_rational_inequalities(eqs)
sympy.solvers.inequalities.solve_univariate_inequality(expr,gen,relational=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/pde.py----------------------------------------
A:sympy.solvers.pde.solvefun->Function('F')
A:sympy.solvers.pde.hints->_desolve(eq, func=func, hint=hint, simplify=True, type='pde', **kwargs)
A:sympy.solvers.pde.eq->expand(eq)
A:sympy.solvers.pde.all_->_desolve(eq, func=func, hint=hint, simplify=True, type='pde', **kwargs).pop('all', False)
A:sympy.solvers.pde.gethints->classify_pde(eq, dict=True)
A:sympy.solvers.pde.rv->_helper_simplify(eq, hint, hints[hint]['func'], hints[hint]['order'], hints[hint][hint], solvefun)
A:sympy.solvers.pde.prep->kwargs.pop('prep', True)
A:sympy.solvers.pde.(prep, func_)->_preprocess(eq, func)
A:sympy.solvers.pde.fx->f(x, y).diff(x)
A:sympy.solvers.pde.fy->f(x, y).diff(y)
A:sympy.solvers.pde.order->ode_order(eq, f(x, y))
A:sympy.solvers.pde.a->Wild('a', exclude=[f(x, y)])
A:sympy.solvers.pde.b->Wild('b', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.c->Wild('c', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.d->Wild('d', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.e->Wild('e', exclude=[f(x, y), fx, fy])
A:sympy.solvers.pde.n->Wild('n', exclude=[x, y])
A:sympy.solvers.pde.var->set(combinations_with_replacement((x, y), order))
A:sympy.solvers.pde.dummyvar->set(combinations_with_replacement((x, y), order)).copy()
A:sympy.solvers.pde.coeff->expand(eq).coeff(f(x, y).diff(*i))
A:sympy.solvers.pde.match->expand(eq).coeff(f(x, y).diff(*i)).match(a * f(x, y) ** n)
A:sympy.solvers.pde.reduced_eq->collect(reduced_eq, f(x, y))
A:sympy.solvers.pde.r->collect(reduced_eq, f(x, y)).match(b * fx + c * fy + d * f(x, y) + e)
A:sympy.solvers.pde.matching_hints['ordered_hints']->tuple(retlist)
A:sympy.solvers.pde.pde->Eq(pde, 0)
A:sympy.solvers.pde.(_, func)->_preprocess(pde.lhs)
A:sympy.solvers.pde.funcs->reduce(set.union, funcs, set())
A:sympy.solvers.pde.func->reduce(set.union, funcs, set()).pop()
A:sympy.solvers.pde.sol->dsolve(dummy(x).diff(x) - h, dummy(x))
A:sympy.solvers.pde.solved->solve(sol, func)
A:sympy.solvers.pde.result->expand(eq).lhs.subs(fun, functions).doit()
A:sympy.solvers.pde.s->Eq(pde, 0).subs(func, sol.lhs).doit()
A:sympy.solvers.pde.ss->simplify(s)
A:sympy.solvers.pde.(xi, eta)->symbols('xi eta')
A:sympy.solvers.pde.expterm->exp(-S(d) / (b ** 2 + c ** 2) * xi)
A:sympy.solvers.pde.functerm->solvefun(eta)
A:sympy.solvers.pde.solvedict->solve((b * x + c * y - xi, c * x - b * y - eta), x, y)
A:sympy.solvers.pde.tsol->integrate(e / b, x)
A:sympy.solvers.pde.rhs->simplify(rhs / fulldiv).expand()
A:sympy.solvers.pde.dummy->Function('d')
A:sympy.solvers.pde.h->(c / b).subs(y, dummy(x))
A:sympy.solvers.pde.solsym->solsym.pop().pop()
A:sympy.solvers.pde.etat->solve(sol, solsym)[0].subs(dummy(x), y)
A:sympy.solvers.pde.deq->(b * f(x).diff(x) + d * f(x) - e).subs(y, ysub)
A:sympy.solvers.pde.eta->Symbol('eta')
A:sympy.solvers.pde.sym->syms.pop()
A:sympy.solvers.pde.final->dsolve(dummy(x).diff(x) - h, dummy(x)).subs(sym, func(funcarg))
A:sympy.solvers.pde.tempfun->Function(fname + str(key))
A:sympy.solvers.pde.orig_args->list(fun.args)
A:sympy.solvers.pde.functions->reduce(operator.mul, sep)
A:sympy.solvers.pde.terms->set()
A:sympy.solvers.pde.div->set()
A:sympy.solvers.pde.(ext, sep)->term.expand().as_independent(dep)
A:sympy.solvers.pde.(temp, sep)->term.expand().as_independent(dep)
A:sympy.solvers.pde.fulldiv->reduce(operator.add, div)
A:sympy.solvers.pde.lhs->simplify(lhs / fulldiv).expand()
sympy.checkpdesol(pde,sol,func=None,solve_for_func=True)
sympy.classify_pde(eq,func=None,dict=False,**kwargs)
sympy.pde._handle_Integral(expr,func,order,hint)
sympy.pde._helper_simplify(eq,hint,func,order,match,solvefun)
sympy.pde._separate(eq,dep,others)
sympy.pde._simplify_variable_coeff(sol,syms,func,funcarg)
sympy.pde.pde_1st_linear_constant_coeff(eq,func,order,match,solvefun)
sympy.pde.pde_1st_linear_constant_coeff_homogeneous(eq,func,order,match,solvefun)
sympy.pde.pde_1st_linear_variable_coeff(eq,func,order,match,solvefun)
sympy.pde_separate(eq,fun,sep,strategy='mul')
sympy.pde_separate_add(eq,fun,sep)
sympy.pde_separate_mul(eq,fun,sep)
sympy.pdsolve(eq,func=None,hint='default',dict=False,solvefun=None,**kwargs)
sympy.solvers.pde._handle_Integral(expr,func,order,hint)
sympy.solvers.pde._helper_simplify(eq,hint,func,order,match,solvefun)
sympy.solvers.pde._separate(eq,dep,others)
sympy.solvers.pde._simplify_variable_coeff(sol,syms,func,funcarg)
sympy.solvers.pde.checkpdesol(pde,sol,func=None,solve_for_func=True)
sympy.solvers.pde.classify_pde(eq,func=None,dict=False,**kwargs)
sympy.solvers.pde.pde_1st_linear_constant_coeff(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_1st_linear_constant_coeff_homogeneous(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_1st_linear_variable_coeff(eq,func,order,match,solvefun)
sympy.solvers.pde.pde_separate(eq,fun,sep,strategy='mul')
sympy.solvers.pde.pde_separate_add(eq,fun,sep)
sympy.solvers.pde.pde_separate_mul(eq,fun,sep)
sympy.solvers.pde.pdsolve(eq,func=None,hint='default',dict=False,solvefun=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/deutils.py----------------------------------------
A:sympy.solvers.deutils.derivs->expr.atoms(Derivative)
A:sympy.solvers.deutils.funcs->set.union(*[d.atoms(AppliedUndef) for d in derivs])
A:sympy.solvers.deutils.func->set.union(*[d.atoms(AppliedUndef) for d in derivs]).pop()
A:sympy.solvers.deutils.fvars->set(func.args)
A:sympy.solvers.deutils.eq->expr.subs(reps)
A:sympy.solvers.deutils.a->Wild('a', exclude=[func])
A:sympy.solvers.deutils.order->max(order, ode_order(arg, func))
A:sympy.solvers.deutils.prep->kwargs.pop('prep', True)
A:sympy.solvers.deutils.(eq, func)->_preprocess(eq, func)
A:sympy.solvers.deutils.type->kwargs.get('type', None)
A:sympy.solvers.deutils.xi->kwargs.get('xi')
A:sympy.solvers.deutils.eta->kwargs.get('eta')
A:sympy.solvers.deutils.x0->kwargs.get('x0', 0)
A:sympy.solvers.deutils.terms->kwargs.get('n')
A:sympy.solvers.deutils.hints->kwargs.get('hint', {'default': hint, hint: kwargs['match'], 'order': kwargs['order']})
A:sympy.solvers.deutils.sol->_desolve(eq, func, ics=ics, hint=i, x0=x0, simplify=simplify, prep=prep, classify=False, n=terms, order=hints['order'], match=hints[i], type=type)
sympy.deutils._desolve(eq,func=None,hint='default',ics=None,simplify=True,**kwargs)
sympy.deutils._preprocess(expr,func=None,hint='_Integral')
sympy.ode_order(expr,func)
sympy.solvers.deutils._desolve(eq,func=None,hint='default',ics=None,simplify=True,**kwargs)
sympy.solvers.deutils._preprocess(expr,func=None,hint='_Integral')
sympy.solvers.deutils.ode_order(expr,func)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/recurr.py----------------------------------------
A:sympy.solvers.recurr.f->f.expand().collect(y.func(Wild('m', integer=True))).expand().collect(y.func(Wild('m', integer=True)))
A:sympy.solvers.recurr.((exp,), coeff)->polys[i].LT()
A:sympy.solvers.recurr.x->Dummy('x')
A:sympy.solvers.recurr.nni_roots->list(roots(res, h, filter='Z', predicate=lambda r: r >= 0).keys())
A:sympy.solvers.recurr.N->int(max(N))
A:sympy.solvers.recurr.solutions->solve(E, *C)
A:sympy.solvers.recurr.result->solve(equations, *symbols)
A:sympy.solvers.recurr.D->_delta(polys[j].as_expr(), k)
A:sympy.solvers.recurr.I->_one_vector(d + 1)
A:sympy.solvers.recurr.B->quo(B, d.subs(n, n - i), n)
A:sympy.solvers.recurr.V->Matrix(U, A, lambda i, j: int(i == j))
A:sympy.solvers.recurr.v->_zero_vector(A)
A:sympy.solvers.recurr.denom->alpha[-A].subs(x, i)
A:sympy.solvers.recurr.G->_zero_vector(U)
A:sympy.solvers.recurr.P[i]->(P[i - 1] * (n - a - i + 1) / i).expand()
A:sympy.solvers.recurr.Q[i]->Add(*[(v * p).expand() for (v, p) in zip(V[:, i], P)])
A:sympy.solvers.recurr.h->Dummy('h')
A:sympy.solvers.recurr.coeffs->list(map(sympify, coeffs))
A:sympy.solvers.recurr.A->quo(A, d, n)
A:sympy.solvers.recurr.res->quo(p, q, h)
A:sympy.solvers.recurr.(p, q)->polys[i].nth(d).as_numer_denom()
A:sympy.solvers.recurr.d->gcd(A, B.subs(n, n + i), n)
A:sympy.solvers.recurr.g->gcd(coeffs[i], denoms[i], n)
A:sympy.solvers.recurr.numers[i]->quo(coeffs[i], g, n)
A:sympy.solvers.recurr.denoms[i]->quo(denoms[i], g, n)
A:sympy.solvers.recurr.s->hypersimp(g, n)
A:sympy.solvers.recurr.R->rsolve_poly(polys, Mul(*denoms), n)
A:sympy.solvers.recurr.Z->Dummy('Z')
A:sympy.solvers.recurr.a->Mul(*[A.subs(n, n + j) for j in xrange(0, i)])
A:sympy.solvers.recurr.b->Mul(*[B.subs(n, n + j) for j in xrange(i, r)])
A:sympy.solvers.recurr.poly->quo(coeffs[i] * a * b, D, n)
A:sympy.solvers.recurr.coeff->polys[i].nth(d)
A:sympy.solvers.recurr.(C, s)->rsolve_poly([polys[i] * z ** i for i in xrange(r + 1)], 0, n, symbols=True)
A:sympy.solvers.recurr.ratio->simplify(ratio)
A:sympy.solvers.recurr.K->abs(K_min)
A:sympy.solvers.recurr.sk->list(zip(numbered_symbols('C'), kernel))
A:sympy.solvers.recurr.k->Wild('k', exclude=(n,))
A:sympy.solvers.recurr.h_part->defaultdict(lambda : S.Zero)
A:sympy.solvers.recurr.kspec->int(result[k])
A:sympy.solvers.recurr.h_part[k]->simplify(coeff)
A:sympy.solvers.recurr.common->common.subs(n, n + K).expand().subs(n, n + K).expand()
A:sympy.solvers.recurr.(i_numer, i_denom)->i_part.subs(n, n + K).expand().as_numer_denom()
A:sympy.solvers.recurr.(numer, denom)->polys[i].nth(d).as_numer_denom()
A:sympy.solvers.recurr.K_min->min(h_part.keys())
A:sympy.solvers.recurr.H_part->defaultdict(lambda : S.Zero)
A:sympy.solvers.recurr.i_part->i_part.subs(n, n + K).expand().subs(n, n + K).expand()
A:sympy.solvers.recurr.H_part[k + K]->polys[i].nth(d).subs(n, n + K).expand()
A:sympy.solvers.recurr.K_max->max(H_part.keys())
A:sympy.solvers.recurr.init->dict([(i, init[i]) for i in xrange(len(init))])
A:sympy.solvers.recurr.i->int(k.args[0])
A:sympy.solvers.recurr.solution->solution.subs(result).subs(result)
sympy.rsolve(f,y,init=None)
sympy.rsolve_hyper(coeffs,f,n,**hints)
sympy.rsolve_poly(coeffs,f,n,**hints)
sympy.rsolve_ratio(coeffs,f,n,**hints)
sympy.solvers.recurr.rsolve(f,y,init=None)
sympy.solvers.recurr.rsolve_hyper(coeffs,f,n,**hints)
sympy.solvers.recurr.rsolve_poly(coeffs,f,n,**hints)
sympy.solvers.recurr.rsolve_ratio(coeffs,f,n,**hints)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/bivariate.py----------------------------------------
A:sympy.solvers.bivariate.gens->set([g for g in poly.gens if symbol in g.free_symbols])
A:sympy.solvers.bivariate.arg->arg.expand().expand()
A:sympy.solvers.bivariate.(ind, dep)->arg.expand().expand().as_independent(symbol)
A:sympy.solvers.bivariate.(a, x)->separatevars(dep).as_independent(symbol, as_Add=False)
A:sympy.solvers.bivariate.eq->(eq - other).subs(mainlog, mainlog.args[0])
A:sympy.solvers.bivariate.mainlog->_mostfunc(lhs, log, symbol)
A:sympy.solvers.bivariate.other->collect(lhs, mainpow).subs(mainpow, 0)
A:sympy.solvers.bivariate.(d, f, X2)->_linab(other, x)
A:sympy.solvers.bivariate.logterm->collect(eq - other, mainlog)
A:sympy.solvers.bivariate.a->root(p.coeff_monomial(x ** d * y ** d), d)
A:sympy.solvers.bivariate.(b, c, X1)->_linab(logarg, x)
A:sympy.solvers.bivariate.u->Dummy('u', positive=True)
A:sympy.solvers.bivariate.solns->solve(X1 - u, x)
A:sympy.solvers.bivariate.solns[i]->tmp.subs(u, rhs)
A:sympy.solvers.bivariate.(nrhs, lhs)->p.as_expr().as_independent(symbol, as_Add=True)
A:sympy.solvers.bivariate.lhs->collect(lhs, mainpow)
A:sympy.solvers.bivariate.rhs->i.xreplace({r: rhs})
A:sympy.solvers.bivariate.r->Dummy()
A:sympy.solvers.bivariate.(i, lhs)->_invert(lhs - r, symbol)
A:sympy.solvers.bivariate.soln->_lambert(expand_log(diff), symbol)
A:sympy.solvers.bivariate.mainexp->_mostfunc(lhs, exp, symbol)
A:sympy.solvers.bivariate.mainpow->_mostfunc(lhs, Pow, symbol)
A:sympy.solvers.bivariate.p->Poly(f, x, y)
A:sympy.solvers.bivariate.f->Poly(f, x, y).as_expr()
A:sympy.solvers.bivariate._x->Dummy()
A:sympy.solvers.bivariate._y->Dummy()
A:sympy.solvers.bivariate.rv->bivariate_type(Poly(f.subs({x: _x, y: _y}), _x, _y), _x, _y, first=False)
A:sympy.solvers.bivariate.args->sympy.core.add.Add.make_args(p.as_expr())
A:sympy.solvers.bivariate.new->ok(f, x, (u - b * y) / a / y)
A:sympy.solvers.bivariate.d->Poly(f, x, y).degree(x)
A:sympy.solvers.bivariate.b->root(p.coeff_monomial(y ** d), d)
sympy.bivariate._filtered_gens(poly,symbol)
sympy.bivariate._lambert(eq,x)
sympy.bivariate._linab(arg,symbol)
sympy.bivariate._mostfunc(lhs,func,X=None)
sympy.bivariate._solve_lambert(f,symbol,gens)
sympy.bivariate.bivariate_type(f,x,y,**kwargs)
sympy.solvers.bivariate._filtered_gens(poly,symbol)
sympy.solvers.bivariate._lambert(eq,x)
sympy.solvers.bivariate._linab(arg,symbol)
sympy.solvers.bivariate._mostfunc(lhs,func,X=None)
sympy.solvers.bivariate._solve_lambert(f,symbol,gens)
sympy.solvers.bivariate.bivariate_type(f,x,y,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/ode.py----------------------------------------
A:sympy.solvers.ode.u->Dummy('u')
A:sympy.solvers.ode.repu[u]->cancel(r['d2'] * eqz ** 2).subs(func, new).doit()
A:sympy.solvers.ode.atom_set->set.union(*[i.free_symbols for i in eq])
A:sympy.solvers.ode.ncs->numbered_symbols(start=start, prefix=prefix, exclude=atom_set)
A:sympy.solvers.ode.match->h.subs(func, y).match(A + B * exp(y / C))
A:sympy.solvers.ode.sols->solve(sol, func)
A:sympy.solvers.ode.hints->_desolve(eq, func=func, hint=hint, simplify=True, xi=xi, eta=eta, type='ode', ics=ics, x0=x0, n=n, **kwargs)
A:sympy.solvers.ode.eq->_mexpand(eq)
A:sympy.solvers.ode.all_->_desolve(eq, func=func, hint=hint, simplify=True, xi=xi, eta=eta, type='ode', ics=ics, x0=x0, n=n, **kwargs).pop('all', False)
A:sympy.solvers.ode.gethints->classify_ode(eq, dict=True)
A:sympy.solvers.ode.rv->_handle_Integral(solvefunc(eq, func, order, match), func, order, hint)
A:sympy.solvers.ode.retdict['best']->min(list(retdict.values()), key=lambda x: ode_sol_simplicity(x, func, trysolving=not simplify))
A:sympy.solvers.ode.prep->kwargs.pop('prep', True)
A:sympy.solvers.ode.(eq, func_)->_preprocess(eq, func)
A:sympy.solvers.ode.y->Dummy('y')
A:sympy.solvers.ode.xi->Function('xi')(x, func)
A:sympy.solvers.ode.eta->Function('eta')(x, func)
A:sympy.solvers.ode.terms->h.subs(func, y).match(A + B * exp(y / C)).get('terms')
A:sympy.solvers.ode.order->ode_order(eq, func)
A:sympy.solvers.ode.df->funcs.pop().diff(x)
A:sympy.solvers.ode.a->vals[0].subs(w, c)
A:sympy.solvers.ode.b->vals[1].subs(w, c)
A:sympy.solvers.ode.c->lcm(vals[0].as_numer_denom()[1], vals[1].as_numer_denom()[1])
A:sympy.solvers.ode.d->cancel(r['d2'] * eqz ** 2)
A:sympy.solvers.ode.e->Wild('e', exclude=[df])
A:sympy.solvers.ode.k->sqrt(a ** 2 + b ** 2 + c ** 2)
A:sympy.solvers.ode.n->Wild('n', exclude=[x(t), y(t)])
A:sympy.solvers.ode.c1->cancel(r['a3'] / f)
A:sympy.solvers.ode.a2->denum.coeff(x(t))
A:sympy.solvers.ode.b2->denum.coeff(y(t))
A:sympy.solvers.ode.c2->cancel(r['b3'] / f)
A:sympy.solvers.ode.d2->Wild('d2', exclude=[x, f(x), df])
A:sympy.solvers.ode.a3->Wild('a3', exclude=[f(x), df, f(x).diff(x, 2)])
A:sympy.solvers.ode.b3->cancel(r['c2'] / f)
A:sympy.solvers.ode.c3->Wild('c3', exclude=[f(x), df, f(x).diff(x, 2)])
A:sympy.solvers.ode.C1->symbols('C1')
A:sympy.solvers.ode.dorder->ode_order(deriv, x)
A:sympy.solvers.ode.deriv_coef->_mexpand(eq).coeff(f(x).diff(x, order))
A:sympy.solvers.ode.r->collect_const(r1[F2]).match(s * F2)
A:sympy.solvers.ode.reduced_eq->Add(*[arg / den for arg in eq.args])
A:sympy.solvers.ode.(ind, dep)->(reduced_eq + u).as_independent(f)
A:sympy.solvers.ode.r[d]->separatevars(r[d])
A:sympy.solvers.ode.r[e]->separatevars(r[e])
A:sympy.solvers.ode.point->h.subs(func, y).match(A + B * exp(y / C)).get('f0')
A:sympy.solvers.ode.value->h.subs(func, y).match(A + B * exp(y / C)).get('f0val')
A:sympy.solvers.ode.check->simplify(fx.diff(x, 2) - fdd)
A:sympy.solvers.ode.check1->simplify(fx.diff(x, 2) - fdd).subs({x: point, y: value})
A:sympy.solvers.ode.check2->simplify(fx.diff(x, 2) - fdd).subs({x: point, y: value}).diff(x).subs({x: point, y: value})
A:sympy.solvers.ode.rseries->collect_const(r1[F2]).match(s * F2).copy()
A:sympy.solvers.ode.numerator->simplify(r[d].diff(y) - r[e].diff(x))
A:sympy.solvers.ode.factor->cancel(hinv.diff(y) / hinv.diff(y, 2))
A:sympy.solvers.ode.m1->match(m.pop())
A:sympy.solvers.ode.m2->separatevars(r[e], dict=True, symbols=(x, y))
A:sympy.solvers.ode.ordera->homogeneous_order(r[d], x, y)
A:sympy.solvers.ode.orderb->homogeneous_order(r[e], x, y)
A:sympy.solvers.ode.u1->Dummy('u1')
A:sympy.solvers.ode.u2->Dummy('u2')
A:sympy.solvers.ode.params->_linear_coeff_match(F, func)
A:sympy.solvers.ode.t->exp((1 - r[r['n']]) * C.Integral(r[r['b']] / r[r['a']], x))
A:sympy.solvers.ode.dummy_eq->simplify(dummy_eq.subs(reps))
A:sympy.solvers.ode.r2->(-eq[1]).match(diff(y(t), t) - y(t) / t + g / t)
A:sympy.solvers.ode.orderd->homogeneous_order(r2[d], x, f(x))
A:sympy.solvers.ode.ordere->homogeneous_order(r2[e], x, f(x))
A:sympy.solvers.ode.r2[d]->factor_terms(r2[d])
A:sympy.solvers.ode.r2[e]->r2[e].subs(f(x), y).subs(f(x), y)
A:sympy.solvers.ode.(_, u)->sqrt(abs(a * b)).as_independent(x, f(x))
A:sympy.solvers.ode.p->Wild('p', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.(xpart, ypart)->Dummy('u').as_independent(f(x))
A:sympy.solvers.ode.test->cancel(hinv.diff(y) / hinv.diff(y, 2)).subs(((u, t), (1 / u, 1 / t)))
A:sympy.solvers.ode.(no_f, r2[d])->factor_terms(r2[d]).as_independent(f(x))
A:sympy.solvers.ode.g->Wild('g')
A:sympy.solvers.ode.h->h.subs(func, y).subs(func, y)
A:sympy.solvers.ode.q->Wild('q', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.undetcoeff->_undetermined_coefficients_match(e.subs(re), x)
A:sympy.solvers.ode.(e, re)->posify(r[-1].subs(x, exp(x)))
A:sympy.solvers.ode.matching_hints['ordered_hints']->tuple(retlist)
A:sympy.solvers.ode.derivs->_mexpand(eq).atoms(Derivative)
A:sympy.solvers.ode.func->reduce(set.union, funcs, set()).pop()
A:sympy.solvers.ode.funcs->reduce(set.union, funcs, set())
A:sympy.solvers.ode.func_dict->dict()
A:sympy.solvers.ode.order_->ode_order(eqs_, func)
A:sympy.solvers.ode.matching_hints['func']->list(func_dict.values())
A:sympy.solvers.ode.func_coef[j, func, k]->collect(eqs.expand(), [diff(func, t, k)]).coeff(diff(func, t, k))
A:sympy.solvers.ode.is_linear->linearity_check(eqs, j, func, is_linear)
A:sympy.solvers.ode.type_of_equation->check_nonlinear_3eq_order1(eq, funcs, func_coef)
A:sympy.solvers.ode.p1->cancel(r['c'] / cancel(r['c'] / r['d']).as_numer_denom()[0])
A:sympy.solvers.ode.p2->cancel(r['a'] / cancel(r['a'] / r['b']).as_numer_denom()[0])
A:sympy.solvers.ode.v->Wild('v', exclude=[t, t ** 2])
A:sympy.solvers.ode.w->cancel(ew3 / I)
A:sympy.solvers.ode.(b, e)->cancel(r['d2'] * eqz ** 2).as_base_exp()
A:sympy.solvers.ode.co->Wild('e', exclude=[df]).coeff(t)
A:sympy.solvers.ode.f->Wild('f')
A:sympy.solvers.ode.(u, v)->symbols('u, v')
A:sympy.solvers.ode.r1->Eq(f(x), sol).match(diff(x(t), t) - x(t) * (F2 - F3))
A:sympy.solvers.ode.eq_type->check_type(y, x)
A:sympy.solvers.ode.f1->Wild('f1', exclude=[v, t])
A:sympy.solvers.ode.f2->Wild('f2', exclude=[v, t])
A:sympy.solvers.ode.g1->Wild('g1', exclude=[u, t])
A:sympy.solvers.ode.g2->Wild('g2', exclude=[u, t])
A:sympy.solvers.ode.(num, denum)->(r1[f].subs(x(t), u).subs(y(t), v) / r2[g].subs(x(t), u).subs(y(t), v)).as_numer_denom()
A:sympy.solvers.ode.R1->simplify(scoord.diff(x) + scoord.diff(y) * h).match(f1 * g1)
A:sympy.solvers.ode.R2->denum.match(f2 * g2)
A:sympy.solvers.ode.(u, v, w)->symbols('u, v, w')
A:sympy.solvers.ode.F1->r[F1].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.F2->r[F2].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.F3->r[F3].subs(x(t), u).subs(y(t), v).subs(z(t), w)
A:sympy.solvers.ode.r3->((diff(z(t), t) - eq[2]) / r1[f]).match(c * x(t) * y(t))
A:sympy.solvers.ode.(num1, den1)->r1[a].as_numer_denom()
A:sympy.solvers.ode.(num2, den2)->r2[b].as_numer_denom()
A:sympy.solvers.ode.(num3, den3)->r3[c].as_numer_denom()
A:sympy.solvers.ode.eqs->expand_mul(eqs)
A:sympy.solvers.ode.dictsol->dict()
A:sympy.solvers.ode.solved->solve(sol, func)
A:sympy.solvers.ode.ss->simplify(s)
A:sympy.solvers.ode.sol->_nonlinear_3eq_order1_type5(x, y, z, t, eq)
A:sympy.solvers.ode.eq[0]->Eq(f(x), sol)
A:sympy.solvers.ode.eqsol->solve(eq, func, force=True)
A:sympy.solvers.ode.(numer, denom)->_lie_group_remove(expr).as_numer_denom()
A:sympy.solvers.ode.newi->Eq(newi.lhs.args[0] / C1, C1)
A:sympy.solvers.ode.eq[i]->constant_renumber(eq[i], 'C', 1, 2 * order)
A:sympy.solvers.ode.ode->Eq(ode, 0)
A:sympy.solvers.ode.(_, func)->_preprocess(ode.lhs)
A:sympy.solvers.ode.result->checkodesol(ode, [Eq(func, t) for t in solved], order=order, solve_for_func=False)
A:sympy.solvers.ode.s->Wild('s', exclude=[x(t), y(t), z(t), t])
A:sympy.solvers.ode.ds->_nonlinear_3eq_order1_type5(x, y, z, t, eq).diff(x)
A:sympy.solvers.ode.sdf->solve(ds, func.diff(x, i))
A:sympy.solvers.ode.diffsols[i]->diffsols[i - 1].diff(x)
A:sympy.solvers.ode.lhs->Mul(*dlhs[False])
A:sympy.solvers.ode.rhs->solve(req, maxf)
A:sympy.solvers.ode.ode_or_bool->simplify(ode_or_bool)
A:sympy.solvers.ode.num->simplify(scoord.diff(x) + scoord.diff(y) * h)
A:sympy.solvers.ode._func->Dummy('func')
A:sympy.solvers.ode.(num, reps)->posify(num)
A:sympy.solvers.ode.Cs->set(Cs)
A:sympy.solvers.ode.expr->_lie_group_remove(expr)
A:sympy.solvers.ode.x->_lie_group_remove(expr).func(*d[True])
A:sympy.solvers.ode.cnts->dict([(i, expr.count(i)) for i in Cs])
A:sympy.solvers.ode.dlhs->sift([lhs] if isinstance(lhs, C.AtomicExpr) else lhs.args, f)
A:sympy.solvers.ode.drhs->sift([rhs] if isinstance(rhs, C.AtomicExpr) else rhs.args, f)
A:sympy.solvers.ode.constant_subexprs->_get_constant_subexpressions(expr, Cs)
A:sympy.solvers.ode.xes->list(xe.free_symbols)
A:sympy.solvers.ode.(commons, rexpr)->cse(expr)
A:sympy.solvers.ode.cs->list(s[1].atoms(Symbol))
A:sympy.solvers.ode.rexpr->rexpr.subs(*s).subs(*s)
A:sympy.solvers.ode.new_expr->terms_gcd(expr, clear=False, deep=True, expand=False)
A:sympy.solvers.ode.infac->any((fi.func is exp for t in m.args for fi in Mul.make_args(t)))
A:sympy.solvers.ode.sortedargs->list(expr.args)
A:sympy.solvers.ode.newconsts->symbols('C1:%d' % newstartnumber)
A:sympy.solvers.ode.sol1->dsolve(a * diff(x(t), t) - (b - c) * y_x * z_x * r[f], hint='separable_Integral')
A:sympy.solvers.ode.sol2->dsolve(b * diff(y(t), t) - (c - a) * z_y * x_y * r[f], hint='separable_Integral')
A:sympy.solvers.ode.simplify->h.subs(func, y).match(A + B * exp(y / C)).get('simplify', True)
A:sympy.solvers.ode.constants->numbered_symbols(prefix='C', cls=Symbol, start=1)
A:sympy.solvers.ode.xarg->h.subs(func, y).match(A + B * exp(y / C)).get('xarg', 0)
A:sympy.solvers.ode.yarg->h.subs(func, y).match(A + B * exp(y / C)).get('yarg', 0)
A:sympy.solvers.ode.int->next(constants).Integral(exp(C.Integral(r['g'], y)), (y, None, f(x)))
A:sympy.solvers.ode.symset->set(symbols)
A:sympy.solvers.ode.dum->numbered_symbols(prefix='d', cls=Dummy)
A:sympy.solvers.ode.newsyms->set()
A:sympy.solvers.ode.iargs->set(i.args)
A:sympy.solvers.ode.dummyvar->next(dum)
A:sympy.solvers.ode.(i, d)->expand_mul(eqs).as_independent(t, as_Add=False)
A:sympy.solvers.ode.tt->next(constants).Integral(t * (-r[r['c']] / r[r['a']]), x)
A:sympy.solvers.ode.mu->sqrt(4 * d2 * b2 - (a2 - c2) ** 2)
A:sympy.solvers.ode.(C1, C2)->symbols('C1:3')
A:sympy.solvers.ode.(C0, C1)->get_numbered_constants(eq, num=2)
A:sympy.solvers.ode.x0->h.subs(func, y).match(A + B * exp(y / C)).get('x0')
A:sympy.solvers.ode.recurr->Function('r')
A:sympy.solvers.ode.powm->arg.match(s * x ** k)
A:sympy.solvers.ode.term->_remove_coefficient(expr, x)
A:sympy.solvers.ode.startind->powm[k].subs(n, index)
A:sympy.solvers.ode.seriesdict[term]->S(0)
A:sympy.solvers.ode.teq->S(0)
A:sympy.solvers.ode.suminit->seriesdict.values()
A:sympy.solvers.ode.rkeys->seriesdict.keys()
A:sympy.solvers.ode.req->Add(*rkeys)
A:sympy.solvers.ode.maxval->max(suminit)
A:sympy.solvers.ode.fargs->Add(*rkeys).atoms(AppliedUndef)
A:sympy.solvers.ode.maxf->max(fargs, key=lambda x: x.args[0])
A:sympy.solvers.ode.minf->min(fargs, key=lambda x: x.args[0])
A:sympy.solvers.ode.tcounter->len([t for t in finaldict.values() if t])
A:sympy.solvers.ode.nlhs->Mul(*dlhs[False]).subs(n, startiter)
A:sympy.solvers.ode.nrhs->simplify(fx.diff(x, 2) - fdd).subs(finaldict)
A:sympy.solvers.ode.m->abc(d)
A:sympy.solvers.ode.sollist->coeffdict.values()
A:sympy.solvers.ode.m1m2->coeffdict.values().pop()
A:sympy.solvers.ode.serdict1->_frobenius(terms - m1 - 1, m1, p0, q0, p, q, x0, x, C0)
A:sympy.solvers.ode.serdict2->_frobenius(terms - m2 - 1, m2, p0, q0, p, q, x0, x, C1, check=m1)
A:sympy.solvers.ode.power->int(key.name[1:])
A:sympy.solvers.ode.finalseries2->S(0)
A:sympy.solvers.ode.numsyms->numbered_symbols('C', start=0)
A:sympy.solvers.ode.C0->Symbol('C0')
A:sympy.solvers.ode.ser->ser.subs(x, x + x0).subs(x, x + x0)
A:sympy.solvers.ode.dict_->dict(((sym, 1) for sym in solsyms))
A:sympy.solvers.ode.tseries->series(ser, x=x0, n=n + 1)
A:sympy.solvers.ode.dict_[i,]->S(0)
A:sympy.solvers.ode.sym->Symbol('C' + str(j))
A:sympy.solvers.ode.frobdict[numsyms[i]]->S(0)
A:sympy.solvers.ode.one_x->set([x])
A:sympy.solvers.ode.(c, f)->i.as_independent(func)
A:sympy.solvers.ode.chareq->Poly(chareq, symbol)
A:sympy.solvers.ode.charroots->defaultdict(int)
A:sympy.solvers.ode.gsol->_linear_2eq_order2_type1(x, y, t, r)
A:sympy.solvers.ode.reroot->re(root)
A:sympy.solvers.ode.imroot->im(root)
A:sympy.solvers.ode.gensol->ode_nth_linear_constant_coeff_homogeneous(eq, func, order, match, returns='both')
A:sympy.solvers.ode.(n, d)->arg.together().as_numer_denom()
A:sympy.solvers.ode.hc->h.subs(func, y).subs(func, y).subs({x: point, y: value})
A:sympy.solvers.ode.Fnewc->Fnew.subs({x: point, y: value})
A:sympy.solvers.ode.coeffs->numbered_symbols('a', cls=Dummy)
A:sympy.solvers.ode.notneedset->set([])
A:sympy.solvers.ode.newtrialset->set([])
A:sympy.solvers.ode.usedsin->set([])
A:sympy.solvers.ode.coeffsdict->dict(list(zip(trialset, [0] * (len(trialset) + 1))))
A:sympy.solvers.ode.coeffvals->solve(list(coeffsdict.values()), coefflist)
A:sympy.solvers.ode.psol->solve([peq1, peq2, peq3, peq4])
A:sympy.solvers.ode.exprs->exprs.union(_get_trial_set(term, x, exprs)).union(_get_trial_set(term, x, exprs))
A:sympy.solvers.ode.tmpset->tmpset.union(_get_trial_set(term, x, tmpset)).union(_get_trial_set(term, x, tmpset))
A:sympy.solvers.ode.oldset->tmpset.union(_get_trial_set(term, x, tmpset)).union(_get_trial_set(term, x, tmpset)).copy()
A:sympy.solvers.ode.retdict['test']->_test_term(expr, x)
A:sympy.solvers.ode.retdict['trialset']->_get_trial_set(expr, x)
A:sympy.solvers.ode.wr->trigsimp(wr, deep=True, recursive=True)
A:sympy.solvers.ode.(eq, func)->_preprocess(eq)
A:sympy.solvers.ode.dxi->Function('dxi')(x, y)
A:sympy.solvers.ode.deta->Function('deta')(x, y)
A:sympy.solvers.ode.xis->h.subs(func, y).match(A + B * exp(y / C)).pop('xi')
A:sympy.solvers.ode.etas->h.subs(func, y).match(A + B * exp(y / C)).pop('eta')
A:sympy.solvers.ode.inf->separatevars(log(hinv).diff(y).diff(x) / hinv ** 2, dict=True, symbols=[x, y])
A:sympy.solvers.ode.xiinf->infsim[xi(x, func)].subs(func, y)
A:sympy.solvers.ode.etainf->infsim[eta(x, func)].subs(func, y)
A:sympy.solvers.ode.denom->simplify(rcoord.diff(x) + rcoord.diff(y) * h)
A:sympy.solvers.ode.diffeq->simplify((num / denom).subs([(x, xsub), (y, ysub)]))
A:sympy.solvers.ode.sep->separatevars(frac, dict=True, symbols=[x, y])
A:sympy.solvers.ode.deq->deq.subs([(r, rcoord), (s, scoord)]).subs([(r, rcoord), (s, scoord)])
A:sympy.solvers.ode.sdeq->solve(deq, y)
A:sympy.solvers.ode.subfunc->coords.subs(func, 0).atoms(AppliedUndef)
A:sympy.solvers.ode.coords->coords.subs(func, 0).subs(func, 0)
A:sympy.solvers.ode.(base, expr)->coords.subs(func, 0).subs(func, 0).as_base_exp()
A:sympy.solvers.ode.base->_lie_group_remove(base)
A:sympy.solvers.ode.hx->h.subs(func, y).subs(func, y).diff(x)
A:sympy.solvers.ode.hy->h.subs(func, y).subs(func, y).diff(y)
A:sympy.solvers.ode.hinv->(1 / h).subs([(x, u), (y, x)]).subs(u, y)
A:sympy.solvers.ode.inflist->function(match, comp=True)
A:sympy.solvers.ode.xieta->function(match, comp=True)
A:sympy.solvers.ode.fx->fx.subs(x, y).subs(x, y)
A:sympy.solvers.ode.fy->exp(integrate(factor, y))
A:sympy.solvers.ode.gy->gy.subs(y, x).subs(y, x)
A:sympy.solvers.ode.etaval->etaval.subs(onedict).subs(onedict)
A:sympy.solvers.ode.(etax, etay, etad, xix, xiy, xid)->symbols('etax etay etad xix xiy xid')
A:sympy.solvers.ode.(num, denom)->cancel(cpde).as_numer_denom()
A:sympy.solvers.ode.deg->Poly(num, x, y).total_degree()
A:sympy.solvers.ode.xieq->Symbol('xi0')
A:sympy.solvers.ode.etaeq->Symbol('eta0')
A:sympy.solvers.ode.(pden, denom)->ipde.subs({dxi: xieq, deta: etaeq}).doit().as_numer_denom()
A:sympy.solvers.ode.pden->expand(pden)
A:sympy.solvers.ode.polyy->Poly(pden, x, y).as_dict()
A:sympy.solvers.ode.soldict->solve(sollist, symlist)
A:sympy.solvers.ode.xired->Symbol('xi0').subs(soldict)
A:sympy.solvers.ode.etared->Symbol('eta0').subs(soldict)
A:sympy.solvers.ode.(schi, schix, schiy)->symbols('schi, schix, schiy')
A:sympy.solvers.ode.chi->Function('chi')(x, y)
A:sympy.solvers.ode.chix->Function('chi')(x, y).diff(x)
A:sympy.solvers.ode.chiy->Function('chi')(x, y).diff(y)
A:sympy.solvers.ode.chieq->chieq.subs(dict_).subs(dict_)
A:sympy.solvers.ode.(cnum, cden)->cancel(cpde.subs({chi: chieq}).doit()).as_numer_denom()
A:sympy.solvers.ode.cnum->expand(cnum)
A:sympy.solvers.ode.cpoly->Poly(cnum, x, y).as_dict()
A:sympy.solvers.ode.(xic, etac)->div(chieq, h)
A:sympy.solvers.ode.factorx->cancel(hinv.diff(y) / hinv.diff(y, 2)).diff(x)
A:sympy.solvers.ode.factory->cancel(hinv.diff(y) / hinv.diff(y, 2)).diff(y)
A:sympy.solvers.ode.A->h.subs(func, y).subs(func, y).diff(x).diff(y)
A:sympy.solvers.ode.B->Wild('B', exclude=[y])
A:sympy.solvers.ode.C->next(constants)
A:sympy.solvers.ode.gamma->cancel(factorx / factory)
A:sympy.solvers.ode.tauint->cancel((gamma * hinv.diff(y) - gamma.diff(x) - hinv.diff(x)) / (hinv + gamma))
A:sympy.solvers.ode.tau->exp(integrate(tauint, x))
A:sympy.solvers.ode.(base, exp)->atom.as_base_exp()
A:sympy.solvers.ode.frac->cancel(f.diff(y) / f.diff(x))
A:sympy.solvers.ode.Ax->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x)
A:sympy.solvers.ode.Ay->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(y)
A:sympy.solvers.ode.Axy->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x).diff(y)
A:sympy.solvers.ode.Axx->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(x).diff(x)
A:sympy.solvers.ode.Ayy->h.subs(func, y).subs(func, y).diff(x).diff(y).diff(y).diff(y)
A:sympy.solvers.ode.E1->simplify((2 * Ayy + (2 * B - hy ** 2) * A) * A - 3 * Ay ** 2)
A:sympy.solvers.ode.E2->simplify(4 * A ** 3 * D - D ** 2 + E1 * ((2 * Axx - (hx ** 2 + 2 * C) * A) * A - 3 * Ax ** 2))
A:sympy.solvers.ode.E3->simplify(-(A * D) * E1.diff(y) + ((E1.diff(x) - hy * D) * A + 3 * Ay * D + (A * hx - 3 * Ax) * E1) * E1)
A:sympy.solvers.ode.symbols->numbered_symbols('c', cls=Dummy)
A:sympy.solvers.ode.(pde, denom)->powsimp(expand(pde)).as_numer_denom()
A:sympy.solvers.ode.pde->powsimp(expand(pde))
A:sympy.solvers.ode.rem->Mul(*[m for m in term.args if not m.has(x, y)])
A:sympy.solvers.ode.coeffdict[term]->S(1)
A:sympy.solvers.ode.subval->solve(sollist, symlist).values()
A:sympy.solvers.ode.onedict->dict(zip(symlist, [1] * 6))
A:sympy.solvers.ode.xival->xival.subs(onedict).subs(onedict)
A:sympy.solvers.ode.(C1, C2, C3, C4)->symbols('C1:5')
A:sympy.solvers.ode.l->Symbol('l')
A:sympy.solvers.ode.l1->RootOf(chara_eq, 0)
A:sympy.solvers.ode.l2->RootOf(chara_eq, 1)
A:sympy.solvers.ode.sigma->re(l1)
A:sympy.solvers.ode.beta->im(l2)
A:sympy.solvers.ode.(x0, y0)->symbols('x0, y0')
A:sympy.solvers.ode.F->r1[f].subs(x(t), u).subs(y(t), v)
A:sympy.solvers.ode.G->r2[g].subs(x(t), u).subs(y(t), v)
A:sympy.solvers.ode.T->Symbol('T')
A:sympy.solvers.ode.P->exp(C.Integral(r['d'], t))
A:sympy.solvers.ode.l3->RootOf(chara_eq, 2)
A:sympy.solvers.ode.l4->RootOf(chara_eq, 3)
A:sympy.solvers.ode.sa->sqrt(r['a'])
A:sympy.solvers.ode.mid->sqrt(r['a'] + r['b'] * k)
A:sympy.solvers.ode.(Ra, Ca, Rb, Cb)->symbols('Ra, Ca, Rb, Cb')
A:sympy.solvers.ode.ew3->collect(ew2, t).coeff(t)
A:sympy.solvers.ode.[k1, k2, k3, k4]->roots_quartic(Poly(eq))
A:sympy.solvers.ode.mul->sqrt(abs(a * b))
A:sympy.solvers.ode.z->Function('z')
A:sympy.solvers.ode.a1->simplify(scoord.diff(x) + scoord.diff(y) * h).coeff(x(t))
A:sympy.solvers.ode.b1->cancel(r['a2'] / f)
A:sympy.solvers.ode.Igral->next(constants).Integral(t * f, t)
A:sympy.solvers.ode.dic->denum.match((n * (p * t ** 2 + q * t + s) ** 2).expand())
A:sympy.solvers.ode.[msol1, msol2]->dsolve([Eq(diff(u(t), t), t * f * u(t) + t * g * v(t)), Eq(diff(v(t), t), t * h * u(t) + t * p * v(t))])
A:sympy.solvers.ode.(C0, C1, C2, C3)->symbols('C0:4')
A:sympy.solvers.ode.(a2, a3)->cancel(r['b1'] / r['c1']).as_numer_denom()
A:sympy.solvers.ode.(a1, g)->div(r['a1'], f)
A:sympy.solvers.ode.M->Matrix(n, n, lambda i, j: -fc[i, func[j], 0])
A:sympy.solvers.ode.evector->Matrix(n, n, lambda i, j: -fc[i, func[j], 0]).eigenvects(simplify=True)
A:sympy.solvers.ode.e_vector->zeros(n, 1)
A:sympy.solvers.ode.var_mat->Matrix(n, 1, lambda i, j: Symbol('x' + str(i)))
A:sympy.solvers.ode.sol_dict->solve(list(w_), var_mat[1:])
A:sympy.solvers.ode.sol_dict[key]->h.subs(func, y).match(A + B * exp(y / C)).get('f0val').subs(var_mat[0], 1)
A:sympy.solvers.ode.w[r]->Matrix(n, 1, lambda i, j: sol_dict[var_mat[i]])
A:sympy.solvers.ode.evects[2][j]->simplify(evects[2][j])
A:sympy.solvers.ode.(u, v, phi)->symbols('u, v, phi', function=True)
A:sympy.solvers.ode.phi->phi.doit().doit()
A:sympy.solvers.ode.sol2r->solve(C.Integral(F2 / F1, u).doit() - C.Integral(G1 / G2, v).doit() - C1, v)
A:sympy.solvers.ode.sol1r->solve(C.Integral(F2 / F1, u).doit() - C.Integral(G1 / G2, v).doit() - C1, u)
A:sympy.solvers.ode.[r1, r2]->check_type(y, x)
A:sympy.solvers.ode.x1->diff(x(t), t)
A:sympy.solvers.ode.y1->diff(y(t), t)
A:sympy.solvers.ode.(n1, d1)->r[p].as_numer_denom()
A:sympy.solvers.ode.(n2, d2)->r[q].as_numer_denom()
A:sympy.solvers.ode.(n3, d3)->r[s].as_numer_denom()
A:sympy.solvers.ode.val->solve([n1 * u - d1 * v + d1 * w, d2 * u + n2 * v - d2 * w, -d3 * u + d3 * v + n3 * w], [u, v])
A:sympy.solvers.ode.y_x->sqrt((c * C1 - C2 - a * (c - a) * x(t) ** 2) / (b * (c - b)))
A:sympy.solvers.ode.z_x->sqrt((b * C1 - C2 - a * (b - a) * x(t) ** 2) / (c * (b - c)))
A:sympy.solvers.ode.z_y->sqrt((a * C1 - C2 - b * (a - b) * y(t) ** 2) / (c * (a - c)))
A:sympy.solvers.ode.x_y->sqrt((c * C1 - C2 - b * (c - b) * y(t) ** 2) / (a * (c - a)))
A:sympy.solvers.ode.x_z->sqrt((b * C1 - C2 - c * (b - c) * z(t) ** 2) / (a * (b - a)))
A:sympy.solvers.ode.y_z->sqrt((a * C1 - C2 - c * (a - c) * z(t) ** 2) / (b * (a - b)))
A:sympy.solvers.ode.sol3->dsolve(c * diff(z(t), t) - (a - b) * x_z * y_z * r[f], hint='separable_Integral')
A:sympy.solvers.ode.(F1, F2, F3)->symbols('F1, F2, F3', cls=Wild)
A:sympy.solvers.ode.x_yz->sqrt((C1 - b * v ** 2 - c * w ** 2) / a)
A:sympy.solvers.ode.y_zx->sqrt((C1 - c * w ** 2 - a * u ** 2) / b)
A:sympy.solvers.ode.z_xy->sqrt((C1 - a * u ** 2 - b * v ** 2) / c)
sympy.checkodesol(ode,sol,func=None,order='auto',solve_for_func=True)
sympy.classify_ode(eq,func=None,dict=False,ics=None,**kwargs)
sympy.dsolve(eq,func=None,hint='default',simplify=True,ics=None,xi=None,eta=None,x0=0,n=6,**kwargs)
sympy.homogeneous_order(eq,*symbols)
sympy.ode.__remove_linear_redundancies(expr,Cs)
sympy.ode._frobenius(n,m,p0,q0,p,q,x0,x,c,check=None)
sympy.ode._get_constant_subexpressions(expr,Cs)
sympy.ode._handle_Integral(expr,func,order,hint)
sympy.ode._helper_simplify(eq,hint,match,simplify=True,**kwargs)
sympy.ode._lie_group_remove(coords)
sympy.ode._linear_2eq_order1_type1(x,y,t,r)
sympy.ode._linear_2eq_order1_type2(x,y,t,r)
sympy.ode._linear_2eq_order1_type3(x,y,t,r)
sympy.ode._linear_2eq_order1_type4(x,y,t,r)
sympy.ode._linear_2eq_order1_type5(x,y,t,r)
sympy.ode._linear_2eq_order1_type6(x,y,t,r)
sympy.ode._linear_2eq_order1_type7(x,y,t,r)
sympy.ode._linear_2eq_order2_type1(x,y,t,r)
sympy.ode._linear_2eq_order2_type10(x,y,t,r)
sympy.ode._linear_2eq_order2_type11(x,y,t,r)
sympy.ode._linear_2eq_order2_type2(x,y,t,r)
sympy.ode._linear_2eq_order2_type3(x,y,t,r)
sympy.ode._linear_2eq_order2_type4(x,y,t,r)
sympy.ode._linear_2eq_order2_type5(x,y,t,r)
sympy.ode._linear_2eq_order2_type6(x,y,t,r)
sympy.ode._linear_2eq_order2_type7(x,y,t,r)
sympy.ode._linear_2eq_order2_type8(x,y,t,r)
sympy.ode._linear_2eq_order2_type9(x,y,t,r)
sympy.ode._linear_3eq_order1_type1(x,y,z,t,r)
sympy.ode._linear_3eq_order1_type2(x,y,z,t,r)
sympy.ode._linear_3eq_order1_type3(x,y,z,t,r)
sympy.ode._linear_3eq_order1_type4(x,y,z,t,r)
sympy.ode._linear_coeff_match(expr,func)
sympy.ode._linear_neq_order1_type1(match_)
sympy.ode._nonlinear_2eq_order1_type1(x,y,t,eq)
sympy.ode._nonlinear_2eq_order1_type2(x,y,t,eq)
sympy.ode._nonlinear_2eq_order1_type3(x,y,t,eq)
sympy.ode._nonlinear_2eq_order1_type4(x,y,t,eq)
sympy.ode._nonlinear_2eq_order1_type5(func,t,eq)
sympy.ode._nonlinear_3eq_order1_type1(x,y,z,t,eq)
sympy.ode._nonlinear_3eq_order1_type2(x,y,z,t,eq)
sympy.ode._nonlinear_3eq_order1_type3(x,y,z,t,eq)
sympy.ode._nonlinear_3eq_order1_type4(x,y,z,t,eq)
sympy.ode._nonlinear_3eq_order1_type5(x,y,t,eq)
sympy.ode._nth_linear_match(eq,func,order)
sympy.ode._solve_undetermined_coefficients(eq,func,order,match)
sympy.ode._solve_variation_of_parameters(eq,func,order,match)
sympy.ode._undetermined_coefficients_match(expr,x)
sympy.ode.check_linear_2eq_order1(eq,func,func_coef)
sympy.ode.check_linear_2eq_order2(eq,func,func_coef)
sympy.ode.check_linear_3eq_order1(eq,func,func_coef)
sympy.ode.check_linear_neq_order1(eq,func,func_coef)
sympy.ode.check_nonlinear_2eq_order1(eq,func,func_coef)
sympy.ode.check_nonlinear_2eq_order2(eq,func,func_coef)
sympy.ode.check_nonlinear_3eq_order1(eq,func,func_coef)
sympy.ode.check_nonlinear_3eq_order2(eq,func,func_coef)
sympy.ode.checkinfsol(eq,infinitesimals,func=None,order=None)
sympy.ode.checksysodesol(eqs,sols,func=None)
sympy.ode.classify_sysode(eq,funcs=None,**kwargs)
sympy.ode.constant_renumber(expr,symbolname,startnumber,endnumber)
sympy.ode.constantsimp(expr,constants)
sympy.ode.get_numbered_constants(eq,num=1,start=1,prefix='C')
sympy.ode.infinitesimals(eq,func=None,order=None,hint='default',match=None)
sympy.ode.lie_heuristic_abaco1_product(match,comp=False)
sympy.ode.lie_heuristic_abaco1_simple(match,comp=False)
sympy.ode.lie_heuristic_abaco2_similar(match,comp=False)
sympy.ode.lie_heuristic_abaco2_unique_general(match,comp=False)
sympy.ode.lie_heuristic_abaco2_unique_unknown(match,comp=False)
sympy.ode.lie_heuristic_bivariate(match,comp=False)
sympy.ode.lie_heuristic_chi(match,comp=False)
sympy.ode.lie_heuristic_function_sum(match,comp=False)
sympy.ode.lie_heuristic_linear(match,comp=False)
sympy.ode.ode_1st_exact(eq,func,order,match)
sympy.ode.ode_1st_homogeneous_coeff_best(eq,func,order,match)
sympy.ode.ode_1st_homogeneous_coeff_subs_dep_div_indep(eq,func,order,match)
sympy.ode.ode_1st_homogeneous_coeff_subs_indep_div_dep(eq,func,order,match)
sympy.ode.ode_1st_linear(eq,func,order,match)
sympy.ode.ode_1st_power_series(eq,func,order,match)
sympy.ode.ode_2nd_power_series_ordinary(eq,func,order,match)
sympy.ode.ode_2nd_power_series_regular(eq,func,order,match)
sympy.ode.ode_Bernoulli(eq,func,order,match)
sympy.ode.ode_Liouville(eq,func,order,match)
sympy.ode.ode_Riccati_special_minus2(eq,func,order,match)
sympy.ode.ode_almost_linear(eq,func,order,match)
sympy.ode.ode_lie_group(eq,func,order,match)
sympy.ode.ode_linear_coefficients(eq,func,order,match)
sympy.ode.ode_nth_linear_constant_coeff_homogeneous(eq,func,order,match,returns='sol')
sympy.ode.ode_nth_linear_constant_coeff_undetermined_coefficients(eq,func,order,match)
sympy.ode.ode_nth_linear_constant_coeff_variation_of_parameters(eq,func,order,match)
sympy.ode.ode_nth_linear_euler_eq_homogeneous(eq,func,order,match,returns='sol')
sympy.ode.ode_nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients(eq,func,order,match,returns='sol')
sympy.ode.ode_nth_linear_euler_eq_nonhomogeneous_variation_of_parameters(eq,func,order,match,returns='sol')
sympy.ode.ode_separable(eq,func,order,match)
sympy.ode.ode_separable_reduced(eq,func,order,match)
sympy.ode.ode_sol_simplicity(sol,func,trysolving=True)
sympy.ode.odesimp(eq,func,order,constants,hint)
sympy.ode.sub_func_doit(eq,func,new)
sympy.ode.sysode_linear_2eq_order1(match_)
sympy.ode.sysode_linear_2eq_order2(match_)
sympy.ode.sysode_linear_3eq_order1(match_)
sympy.ode.sysode_linear_neq_order1(match_)
sympy.ode.sysode_nonlinear_2eq_order1(match_)
sympy.ode.sysode_nonlinear_3eq_order1(match_)
sympy.solvers.ode.__remove_linear_redundancies(expr,Cs)
sympy.solvers.ode._frobenius(n,m,p0,q0,p,q,x0,x,c,check=None)
sympy.solvers.ode._get_constant_subexpressions(expr,Cs)
sympy.solvers.ode._handle_Integral(expr,func,order,hint)
sympy.solvers.ode._helper_simplify(eq,hint,match,simplify=True,**kwargs)
sympy.solvers.ode._lie_group_remove(coords)
sympy.solvers.ode._linear_2eq_order1_type1(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type2(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type3(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type4(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type5(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type6(x,y,t,r)
sympy.solvers.ode._linear_2eq_order1_type7(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type1(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type10(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type11(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type2(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type3(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type4(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type5(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type6(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type7(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type8(x,y,t,r)
sympy.solvers.ode._linear_2eq_order2_type9(x,y,t,r)
sympy.solvers.ode._linear_3eq_order1_type1(x,y,z,t,r)
sympy.solvers.ode._linear_3eq_order1_type2(x,y,z,t,r)
sympy.solvers.ode._linear_3eq_order1_type3(x,y,z,t,r)
sympy.solvers.ode._linear_3eq_order1_type4(x,y,z,t,r)
sympy.solvers.ode._linear_coeff_match(expr,func)
sympy.solvers.ode._linear_neq_order1_type1(match_)
sympy.solvers.ode._nonlinear_2eq_order1_type1(x,y,t,eq)
sympy.solvers.ode._nonlinear_2eq_order1_type2(x,y,t,eq)
sympy.solvers.ode._nonlinear_2eq_order1_type3(x,y,t,eq)
sympy.solvers.ode._nonlinear_2eq_order1_type4(x,y,t,eq)
sympy.solvers.ode._nonlinear_2eq_order1_type5(func,t,eq)
sympy.solvers.ode._nonlinear_3eq_order1_type1(x,y,z,t,eq)
sympy.solvers.ode._nonlinear_3eq_order1_type2(x,y,z,t,eq)
sympy.solvers.ode._nonlinear_3eq_order1_type3(x,y,z,t,eq)
sympy.solvers.ode._nonlinear_3eq_order1_type4(x,y,z,t,eq)
sympy.solvers.ode._nonlinear_3eq_order1_type5(x,y,t,eq)
sympy.solvers.ode._nth_linear_match(eq,func,order)
sympy.solvers.ode._solve_undetermined_coefficients(eq,func,order,match)
sympy.solvers.ode._solve_variation_of_parameters(eq,func,order,match)
sympy.solvers.ode._undetermined_coefficients_match(expr,x)
sympy.solvers.ode.check_linear_2eq_order1(eq,func,func_coef)
sympy.solvers.ode.check_linear_2eq_order2(eq,func,func_coef)
sympy.solvers.ode.check_linear_3eq_order1(eq,func,func_coef)
sympy.solvers.ode.check_linear_neq_order1(eq,func,func_coef)
sympy.solvers.ode.check_nonlinear_2eq_order1(eq,func,func_coef)
sympy.solvers.ode.check_nonlinear_2eq_order2(eq,func,func_coef)
sympy.solvers.ode.check_nonlinear_3eq_order1(eq,func,func_coef)
sympy.solvers.ode.check_nonlinear_3eq_order2(eq,func,func_coef)
sympy.solvers.ode.checkinfsol(eq,infinitesimals,func=None,order=None)
sympy.solvers.ode.checkodesol(ode,sol,func=None,order='auto',solve_for_func=True)
sympy.solvers.ode.checksysodesol(eqs,sols,func=None)
sympy.solvers.ode.classify_ode(eq,func=None,dict=False,ics=None,**kwargs)
sympy.solvers.ode.classify_sysode(eq,funcs=None,**kwargs)
sympy.solvers.ode.constant_renumber(expr,symbolname,startnumber,endnumber)
sympy.solvers.ode.constantsimp(expr,constants)
sympy.solvers.ode.dsolve(eq,func=None,hint='default',simplify=True,ics=None,xi=None,eta=None,x0=0,n=6,**kwargs)
sympy.solvers.ode.get_numbered_constants(eq,num=1,start=1,prefix='C')
sympy.solvers.ode.homogeneous_order(eq,*symbols)
sympy.solvers.ode.infinitesimals(eq,func=None,order=None,hint='default',match=None)
sympy.solvers.ode.lie_heuristic_abaco1_product(match,comp=False)
sympy.solvers.ode.lie_heuristic_abaco1_simple(match,comp=False)
sympy.solvers.ode.lie_heuristic_abaco2_similar(match,comp=False)
sympy.solvers.ode.lie_heuristic_abaco2_unique_general(match,comp=False)
sympy.solvers.ode.lie_heuristic_abaco2_unique_unknown(match,comp=False)
sympy.solvers.ode.lie_heuristic_bivariate(match,comp=False)
sympy.solvers.ode.lie_heuristic_chi(match,comp=False)
sympy.solvers.ode.lie_heuristic_function_sum(match,comp=False)
sympy.solvers.ode.lie_heuristic_linear(match,comp=False)
sympy.solvers.ode.ode_1st_exact(eq,func,order,match)
sympy.solvers.ode.ode_1st_homogeneous_coeff_best(eq,func,order,match)
sympy.solvers.ode.ode_1st_homogeneous_coeff_subs_dep_div_indep(eq,func,order,match)
sympy.solvers.ode.ode_1st_homogeneous_coeff_subs_indep_div_dep(eq,func,order,match)
sympy.solvers.ode.ode_1st_linear(eq,func,order,match)
sympy.solvers.ode.ode_1st_power_series(eq,func,order,match)
sympy.solvers.ode.ode_2nd_power_series_ordinary(eq,func,order,match)
sympy.solvers.ode.ode_2nd_power_series_regular(eq,func,order,match)
sympy.solvers.ode.ode_Bernoulli(eq,func,order,match)
sympy.solvers.ode.ode_Liouville(eq,func,order,match)
sympy.solvers.ode.ode_Riccati_special_minus2(eq,func,order,match)
sympy.solvers.ode.ode_almost_linear(eq,func,order,match)
sympy.solvers.ode.ode_lie_group(eq,func,order,match)
sympy.solvers.ode.ode_linear_coefficients(eq,func,order,match)
sympy.solvers.ode.ode_nth_linear_constant_coeff_homogeneous(eq,func,order,match,returns='sol')
sympy.solvers.ode.ode_nth_linear_constant_coeff_undetermined_coefficients(eq,func,order,match)
sympy.solvers.ode.ode_nth_linear_constant_coeff_variation_of_parameters(eq,func,order,match)
sympy.solvers.ode.ode_nth_linear_euler_eq_homogeneous(eq,func,order,match,returns='sol')
sympy.solvers.ode.ode_nth_linear_euler_eq_nonhomogeneous_undetermined_coefficients(eq,func,order,match,returns='sol')
sympy.solvers.ode.ode_nth_linear_euler_eq_nonhomogeneous_variation_of_parameters(eq,func,order,match,returns='sol')
sympy.solvers.ode.ode_separable(eq,func,order,match)
sympy.solvers.ode.ode_separable_reduced(eq,func,order,match)
sympy.solvers.ode.ode_sol_simplicity(sol,func,trysolving=True)
sympy.solvers.ode.odesimp(eq,func,order,constants,hint)
sympy.solvers.ode.sub_func_doit(eq,func,new)
sympy.solvers.ode.sysode_linear_2eq_order1(match_)
sympy.solvers.ode.sysode_linear_2eq_order2(match_)
sympy.solvers.ode.sysode_linear_3eq_order1(match_)
sympy.solvers.ode.sysode_linear_neq_order1(match_)
sympy.solvers.ode.sysode_nonlinear_2eq_order1(match_)
sympy.solvers.ode.sysode_nonlinear_3eq_order1(match_)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_ode.py----------------------------------------
A:sympy.solvers.tests.test_ode.(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10)->symbols('C0:11')
A:sympy.solvers.tests.test_ode.(x, y, z)->symbols('x, y, z', Function=True)
A:sympy.solvers.tests.test_ode.f->Function('f')
A:sympy.solvers.tests.test_ode.g->exp(-x)
A:sympy.solvers.tests.test_ode.h->Function('h')
A:sympy.solvers.tests.test_ode.(k, l, m, n)->symbols('k, l, m, n', Integer=True)
A:sympy.solvers.tests.test_ode.t->Symbol('t')
A:sympy.solvers.tests.test_ode.(x0, y0)->symbols('x0, y0')
A:sympy.solvers.tests.test_ode.(t, l)->symbols('t, l')
A:sympy.solvers.tests.test_ode.sol4->set([Eq(f(x), sqrt(C1 + C2 * exp(x)) * exp(-x / 2)), Eq(f(x), -sqrt(C1 + C2 * exp(x)) * exp(-x / 2))])
A:sympy.solvers.tests.test_ode.sol5->Eq(f(x), log(C1 + C2 / x))
A:sympy.solvers.tests.test_ode.root1->sqrt(-sqrt(109) / 2 + S(15) / 2)
A:sympy.solvers.tests.test_ode.root3->sqrt(sqrt(109) / 2 + S(15) / 2)
A:sympy.solvers.tests.test_ode.sol->Eq(f(x), C1 - 2 * x * sqrt(x ** 3) / 5)
A:sympy.solvers.tests.test_ode.sol1->Eq(f(x), log(x / (C1 + C2 * x)))
A:sympy.solvers.tests.test_ode.sol3->set([Eq(f(x), -sqrt(C1 + C2 * log(x))), Eq(f(x), sqrt(C1 + C2 * log(x)))])
A:sympy.solvers.tests.test_ode.a->Symbol('a', positive=True)
A:sympy.solvers.tests.test_ode.b->classify_ode(f(x).diff(x) * f(x) + f(x) * f(x) - x * f(x), f(x))
A:sympy.solvers.tests.test_ode.c->classify_ode(f(x).diff(x) / f(x) + f(x) / f(x) - x / f(x), f(x))
A:sympy.solvers.tests.test_ode.k->Symbol('k')
A:sympy.solvers.tests.test_ode.(k1, k2, k3, l1, l2, l3, m1, m2, m3)->symbols('k1, k2, k3, l1, l2, l3, m1, m2, m3', Integer=True)
A:sympy.solvers.tests.test_ode.(P, Q, R, p, q, r)->symbols('P, Q, R, p, q, r', Function=True)
A:sympy.solvers.tests.test_ode.(P1, P2, P3, Q1, Q2, R1, R2)->symbols('P1, P2, P3, Q1, Q2, R1, R2', function=True)
A:sympy.solvers.tests.test_ode.x1->diff(x(t), t)
A:sympy.solvers.tests.test_ode.y1->diff(y(t), t)
A:sympy.solvers.tests.test_ode.z1->diff(z(t), t)
A:sympy.solvers.tests.test_ode.x2->diff(x(t), t, t)
A:sympy.solvers.tests.test_ode.y2->diff(y(t), t, t)
A:sympy.solvers.tests.test_ode.z2->diff(z(t), t, t)
A:sympy.solvers.tests.test_ode.x->Symbol('x')
A:sympy.solvers.tests.test_ode.eq1->tan(x + f(x))
A:sympy.solvers.tests.test_ode.eq2->sin(3 * x / (4 * f(x)))
A:sympy.solvers.tests.test_ode.eq3->log(sin(rat))
A:sympy.solvers.tests.test_ode.eq4->log((3 * x + 4 * f(x)) / (5 * f(x) + 7 * x))
A:sympy.solvers.tests.test_ode.eq5->exp(2 * x ** 2 / (3 * f(x) ** 2))
A:sympy.solvers.tests.test_ode.eq6->log((3 * x + 4 * f(x)) / (5 * f(x) + 7 * x) + exp(2 * x ** 2 / (3 * f(x) ** 2)))
A:sympy.solvers.tests.test_ode.eq7->sin(3 * x / (5 * f(x) + x ** 2))
A:sympy.solvers.tests.test_ode.eq8->Eq(f(x).diff(x, x) - 4 * diff(f(x), x) + 4 * f(x), 0)
A:sympy.solvers.tests.test_ode.eq9->Eq(f(x).diff(x, x) + 2 * diff(f(x), x) + 3 * f(x), 0)
A:sympy.solvers.tests.test_ode.eq10->Eq(3 * f(x).diff(x) - 1, 0)
A:sympy.solvers.tests.test_ode.eq11->Eq(x * f(x).diff(x) - 1, 0)
A:sympy.solvers.tests.test_ode.sol2->Eq(f(x), log(x / (C1 + C2 * x)))
A:sympy.solvers.tests.test_ode.sol6->Eq(f(x), -x * exp(x) - 2 * exp(-x) + C1 * exp(-2 * x) + C2 * exp(4 * x))
A:sympy.solvers.tests.test_ode.sol7->Eq(f(x), (C1 + C2 * x + x ** 4 / 12) * exp(-x))
A:sympy.solvers.tests.test_ode.sol8->Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)
A:sympy.solvers.tests.test_ode.sol9->Eq(f(x), (C1 + C2 * x + C3 * x ** 2 + x ** 3 / 6) * exp(x))
A:sympy.solvers.tests.test_ode.sol10->Eq(f(x), (C1 + x * (C2 + log(x))) * exp(-x))
A:sympy.solvers.tests.test_ode.sol11->Eq(f(x), cos(x) * (C2 - Integral(1 / cos(x), x)) + sin(x) * (C1 + Integral(1 / sin(x), x)))
A:sympy.solvers.tests.test_ode.eq->Eq(f(x).diff(x), x ** 2 * f(x))
A:sympy.solvers.tests.test_ode.sol2b->Eq(log(f(x)) + x / f(x) + x ** 2, C1)
A:sympy.solvers.tests.test_ode.sol12->Eq(f(x), C1 + C2 * x + x ** 3 * (C3 + log(x) / 6) + C4 * x ** 2)
A:sympy.solvers.tests.test_ode.sol13->Eq(f(x), C1 + x ** 3 / 3 + C2 * exp(-x))
A:sympy.solvers.tests.test_ode.sol14->Eq(f(x), C1 - x - sin(2 * x) / 5 - cos(2 * x) / 10 + x ** 2 / 2 + C2 * exp(-x))
A:sympy.solvers.tests.test_ode.sol15->Eq(f(x), (C1 + x) * sin(x) + (C2 - x ** 2) * cos(x))
A:sympy.solvers.tests.test_ode.sol16->Eq(f(x), (C1 + x / 16) * sin(2 * x) + (C2 - x ** 2 / 8) * cos(2 * x))
A:sympy.solvers.tests.test_ode.sol17->Eq(f(x), (C1 + C2 * x + x ** 4 / 12) * exp(-x))
A:sympy.solvers.tests.test_ode.sol18->Eq(f(x), (C1 + C2 * x + C3 * x ** 2 - x ** 5 / 60 + x ** 3 / 3) * exp(-x))
A:sympy.solvers.tests.test_ode.sol19->Eq(f(x), S(7) / 4 - 3 * x / 2 + x ** 2 / 2 + C1 * exp(-x) + (C2 - x) * exp(-2 * x))
A:sympy.solvers.tests.test_ode.sol20->Eq(f(x), C1 * exp(x) + C2 * exp(2 * x) + (6 * x + 5) * exp(-x) / 36)
A:sympy.solvers.tests.test_ode.sol21->Eq(f(x), -S(1) / 36 - x / 6 + C1 * exp(-3 * x) + (C2 + x / 5) * exp(2 * x))
A:sympy.solvers.tests.test_ode.sol3a->Eq(f(x), x * exp(1 - LambertW(C1 * x)))
A:sympy.solvers.tests.test_ode.sol3b->Eq(f(x), C1 * LambertW(C2 * x))
A:sympy.solvers.tests.test_ode._u2->Dummy('u2')
A:sympy.solvers.tests.test_ode.__a->Dummy('a')
A:sympy.solvers.tests.test_ode.c1->classify_ode(eq1, f(x))
A:sympy.solvers.tests.test_ode.c2->classify_ode(eq2, f(x))
A:sympy.solvers.tests.test_ode.eq13->f(x).diff(x, 4)
A:sympy.solvers.tests.test_ode.sol22->Eq(f(x), C1 * sin(x) + (C2 - x / 2) * cos(x) + exp(-x) / 2)
A:sympy.solvers.tests.test_ode.sol23->Eq(f(x), (C1 + C2 * x + C3 * x ** 2 + x ** 3 / 6) * exp(x))
A:sympy.solvers.tests.test_ode.sol24->Eq(f(x), S(1) / 2 - cos(2 * x) / 6 + C1 * sin(x) + C2 * cos(x))
A:sympy.solvers.tests.test_ode.sol25->Eq(f(x), C1 + C2 * exp(-x) + C3 * exp(x) + (-21 * sin(2 * x) + 27 * cos(2 * x) + 130) * exp(2 * x) / 1560)
A:sympy.solvers.tests.test_ode.sol26->Eq(f(x), C1 + (C2 + C3 * x - x ** 2 / 8) * sin(x) + (C4 + C5 * x + x ** 2 / 8) * cos(x) + x ** 2)
A:sympy.solvers.tests.test_ode.sol27->Eq(f(x), cos(3 * x) / 16 + C1 * cos(x) + (C2 + x / 4) * sin(x))
A:sympy.solvers.tests.test_ode.sol28->Eq(f(x), C1 + x)
A:sympy.solvers.tests.test_ode.sol29->Eq(f(x), C1 + C2 * sin(2 * x) + C3 * cos(2 * x) + C4 * x)
A:sympy.solvers.tests.test_ode.sol30->Eq(f(x), C1 + (C2 + C3 * x) * sin(x) + (C4 + C5 * x) * cos(x))
A:sympy.solvers.tests.test_ode.sol1s->constant_renumber(sol1, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol2s->constant_renumber(sol2, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol3s->constant_renumber(sol3, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol4s->constant_renumber(sol4, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol5s->constant_renumber(sol5, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol6s->constant_renumber(sol6, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol7s->constant_renumber(sol7, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol8s->constant_renumber(sol8, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol9s->constant_renumber(sol9, 'C', 1, 3)
A:sympy.solvers.tests.test_ode.sol10s->constant_renumber(sol10, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol11s->constant_renumber(sol11, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol12s->constant_renumber(sol12, 'C', 1, 4)
A:sympy.solvers.tests.test_ode.sol13s->constant_renumber(sol13, 'C', 1, 4)
A:sympy.solvers.tests.test_ode.sol14s->constant_renumber(sol14, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol15s->constant_renumber(sol15, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol16s->constant_renumber(sol16, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol17s->constant_renumber(sol17, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol18s->constant_renumber(sol18, 'C', 1, 3)
A:sympy.solvers.tests.test_ode.sol19s->constant_renumber(sol19, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol20s->constant_renumber(sol20, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol21s->constant_renumber(sol21, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol22s->constant_renumber(sol22, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol23s->constant_renumber(sol23, 'C', 1, 3)
A:sympy.solvers.tests.test_ode.sol24s->constant_renumber(sol24, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol25s->constant_renumber(sol25, 'C', 1, 3)
A:sympy.solvers.tests.test_ode.sol26s->constant_renumber(sol26, 'C', 1, 5)
A:sympy.solvers.tests.test_ode.sol27s->constant_renumber(sol27, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.sol28s->constant_renumber(sol28, 'C', 1, 3)
A:sympy.solvers.tests.test_ode.sol29s->constant_renumber(sol29, 'C', 1, 4)
A:sympy.solvers.tests.test_ode.sol30s->constant_renumber(sol30, 'C', 1, 5)
A:sympy.solvers.tests.test_ode.y->Symbol('y')
A:sympy.solvers.tests.test_ode.s->set([cos(x), x * cos(x), x ** 2 * cos(x), x ** 2 * sin(x), x * sin(x), sin(x)])
A:sympy.solvers.tests.test_ode.f2->f(x).diff(x, 2)
A:sympy.solvers.tests.test_ode.eq1a->diff(x * exp(-f(x)), x, x)
A:sympy.solvers.tests.test_ode.sol1a->Eq(C1 + C2 / x - exp(-f(x)), 0)
A:sympy.solvers.tests.test_ode.not_Liouville1->classify_ode(diff(f(x), x) / x + f(x) * diff(f(x), x, x) / 2 - diff(f(x), x) ** 2 / 2, f(x))
A:sympy.solvers.tests.test_ode.not_Liouville2->classify_ode(diff(f(x), x) / x + diff(f(x), x, x) / 2 - x * diff(f(x), x) ** 2 / 2, f(x))
A:sympy.solvers.tests.test_ode.w->Function('w')
A:sympy.solvers.tests.test_ode.(x, t, a, b, c)->symbols('x t a b c')
A:sympy.solvers.tests.test_ode.sols->constant_renumber(sol, 'C', 1, 2)
A:sympy.solvers.tests.test_ode.(x, t)->symbols('x, t')
A:sympy.solvers.tests.test_ode.(a, b, c, d)->symbols('a, b, c, d', integer=True)
A:sympy.solvers.tests.test_ode.A->Symbol('A', positive=True)
A:sympy.solvers.tests.test_ode.d->f(x).diff(x)
A:sympy.solvers.tests.test_ode.df->f(x).diff(x)
A:sympy.solvers.tests.test_ode.actual_sol->Eq(f(x), (C1 + x ** 2) / (C1 - x ** 2))
A:sympy.solvers.tests.test_ode.(y, a, b, c, a4, a3, a2, a1, a0)->symbols('y a b c a4 a3 a2 a1 a0')
A:sympy.solvers.tests.test_ode.xi->Function('xi')
A:sympy.solvers.tests.test_ode.eta->Function('eta')
A:sympy.solvers.tests.test_ode.i->infinitesimals(eq, hint='sum_function')
A:sympy.solvers.tests.test_ode.i1->infinitesimals(eq1, hint='abaco1_simple')
A:sympy.solvers.tests.test_ode.i2->infinitesimals(eq2, hint='abaco1_simple')
A:sympy.solvers.tests.test_ode.i3->infinitesimals(eq3, hint='abaco1_simple')
A:sympy.solvers.tests.test_ode.i4->infinitesimals(eq4, hint='abaco1_simple')
A:sympy.solvers.tests.test_ode.i5->infinitesimals(eq5, hint='abaco1_simple')
A:sympy.solvers.tests.test_ode.check->checkinfsol(eq, i)
A:sympy.solvers.tests.test_ode.(a, b)->symbols('a b')
A:sympy.solvers.tests.test_ode.(y, a)->symbols('y a')
A:sympy.solvers.tests.test_ode.F->Function('F')
A:sympy.solvers.tests.test_ode.(a, b, m, n)->symbols('a b m n')
A:sympy.solvers.tests.test_ode.(a, b, alpha, c)->symbols('a b alpha c')
A:sympy.solvers.tests.test_ode.C1->Symbol('C1')
A:sympy.solvers.tests.test_ode.(a, b, c)->symbols('a b c')
A:sympy.solvers.tests.test_ode.C2->Symbol('C2')
A:sympy.solvers.tests.test_ode.(C1, C2)->symbols('C1 C2')
sympy.solvers.tests.test_ode.test_1st_exact1()
sympy.solvers.tests.test_ode.test_1st_exact2()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_corner_case()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode2()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode2_check3()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode3()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode_check134568()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode_check2()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode_check3()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode_check7()
sympy.solvers.tests.test_ode.test_1st_homogeneous_coeff_ode_check9()
sympy.solvers.tests.test_ode.test_1st_linear()
sympy.solvers.tests.test_ode.test_2nd_power_series_ordinary()
sympy.solvers.tests.test_ode.test_2nd_power_series_regular()
sympy.solvers.tests.test_ode.test_Bernoulli()
sympy.solvers.tests.test_ode.test_Liouville_ODE()
sympy.solvers.tests.test_ode.test_Riccati_special_minus2()
sympy.solvers.tests.test_ode.test_almost_linear()
sympy.solvers.tests.test_ode.test_checkodesol()
sympy.solvers.tests.test_ode.test_checksysodesol()
sympy.solvers.tests.test_ode.test_classify_ode()
sympy.solvers.tests.test_ode.test_classify_sysode()
sympy.solvers.tests.test_ode.test_collect_respecting_exponentials()
sympy.solvers.tests.test_ode.test_constant_renumber_order_issue_5308()
sympy.solvers.tests.test_ode.test_constantsimp_take_problem()
sympy.solvers.tests.test_ode.test_dsolve_options()
sympy.solvers.tests.test_ode.test_exact_enhancement()
sympy.solvers.tests.test_ode.test_heuristic1()
sympy.solvers.tests.test_ode.test_heuristic2()
sympy.solvers.tests.test_ode.test_heuristic3()
sympy.solvers.tests.test_ode.test_heuristic_4()
sympy.solvers.tests.test_ode.test_heuristic_abaco2_similar()
sympy.solvers.tests.test_ode.test_heuristic_abaco2_unique_unknown()
sympy.solvers.tests.test_ode.test_heuristic_function_sum()
sympy.solvers.tests.test_ode.test_heuristic_linear()
sympy.solvers.tests.test_ode.test_homogeneous_function()
sympy.solvers.tests.test_ode.test_homogeneous_order()
sympy.solvers.tests.test_ode.test_issue_4785()
sympy.solvers.tests.test_ode.test_issue_4825()
sympy.solvers.tests.test_ode.test_issue_5095()
sympy.solvers.tests.test_ode.test_issue_5112_5430()
sympy.solvers.tests.test_ode.test_issue_5770()
sympy.solvers.tests.test_ode.test_issue_5787()
sympy.solvers.tests.test_ode.test_issue_6247()
sympy.solvers.tests.test_ode.test_issue_6879()
sympy.solvers.tests.test_ode.test_issue_6989()
sympy.solvers.tests.test_ode.test_issue_7081()
sympy.solvers.tests.test_ode.test_issue_7093()
sympy.solvers.tests.test_ode.test_kamke()
sympy.solvers.tests.test_ode.test_lie_group()
sympy.solvers.tests.test_ode.test_linear_2eq_order1()
sympy.solvers.tests.test_ode.test_linear_2eq_order2()
sympy.solvers.tests.test_ode.test_linear_3eq_order1()
sympy.solvers.tests.test_ode.test_linear_coeff_match()
sympy.solvers.tests.test_ode.test_linear_coefficients()
sympy.solvers.tests.test_ode.test_noncircularized_real_imaginary_parts()
sympy.solvers.tests.test_ode.test_nonlinear_2eq_order1()
sympy.solvers.tests.test_ode.test_nonlinear_3eq_order1()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_homogeneous()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_homogeneous_RootOf()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_homogeneous_RootOf_sol()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_undetermined_coefficients()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_undetermined_coefficients_imaginary_exp()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_variation_of_parameters()
sympy.solvers.tests.test_ode.test_nth_linear_constant_coeff_variation_of_parameters_simplify_False()
sympy.solvers.tests.test_ode.test_nth_order_linear_euler_eq_homogeneous()
sympy.solvers.tests.test_ode.test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients()
sympy.solvers.tests.test_ode.test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters()
sympy.solvers.tests.test_ode.test_ode_order()
sympy.solvers.tests.test_ode.test_old_ode_tests()
sympy.solvers.tests.test_ode.test_separable1()
sympy.solvers.tests.test_ode.test_separable2()
sympy.solvers.tests.test_ode.test_separable3()
sympy.solvers.tests.test_ode.test_separable4()
sympy.solvers.tests.test_ode.test_separable5()
sympy.solvers.tests.test_ode.test_separable_1_5_checkodesol()
sympy.solvers.tests.test_ode.test_separable_reduced()
sympy.solvers.tests.test_ode.test_series()
sympy.solvers.tests.test_ode.test_undetermined_coefficients_match()
sympy.solvers.tests.test_ode.test_unexpanded_Liouville_ODE()
sympy.solvers.tests.test_ode.test_user_infinitesimals()
sympy.tests.test_ode.test_1st_exact1()
sympy.tests.test_ode.test_1st_exact2()
sympy.tests.test_ode.test_1st_homogeneous_coeff_corner_case()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode2()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode2_check3()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode3()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode_check134568()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode_check2()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode_check3()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode_check7()
sympy.tests.test_ode.test_1st_homogeneous_coeff_ode_check9()
sympy.tests.test_ode.test_1st_linear()
sympy.tests.test_ode.test_2nd_power_series_ordinary()
sympy.tests.test_ode.test_2nd_power_series_regular()
sympy.tests.test_ode.test_Bernoulli()
sympy.tests.test_ode.test_Liouville_ODE()
sympy.tests.test_ode.test_Riccati_special_minus2()
sympy.tests.test_ode.test_almost_linear()
sympy.tests.test_ode.test_checkodesol()
sympy.tests.test_ode.test_checksysodesol()
sympy.tests.test_ode.test_classify_ode()
sympy.tests.test_ode.test_classify_sysode()
sympy.tests.test_ode.test_collect_respecting_exponentials()
sympy.tests.test_ode.test_constant_renumber_order_issue_5308()
sympy.tests.test_ode.test_constantsimp_take_problem()
sympy.tests.test_ode.test_dsolve_options()
sympy.tests.test_ode.test_exact_enhancement()
sympy.tests.test_ode.test_heuristic1()
sympy.tests.test_ode.test_heuristic2()
sympy.tests.test_ode.test_heuristic3()
sympy.tests.test_ode.test_heuristic_4()
sympy.tests.test_ode.test_heuristic_abaco2_similar()
sympy.tests.test_ode.test_heuristic_abaco2_unique_unknown()
sympy.tests.test_ode.test_heuristic_function_sum()
sympy.tests.test_ode.test_heuristic_linear()
sympy.tests.test_ode.test_homogeneous_function()
sympy.tests.test_ode.test_homogeneous_order()
sympy.tests.test_ode.test_issue_4785()
sympy.tests.test_ode.test_issue_4825()
sympy.tests.test_ode.test_issue_5095()
sympy.tests.test_ode.test_issue_5112_5430()
sympy.tests.test_ode.test_issue_5770()
sympy.tests.test_ode.test_issue_5787()
sympy.tests.test_ode.test_issue_6247()
sympy.tests.test_ode.test_issue_6879()
sympy.tests.test_ode.test_issue_6989()
sympy.tests.test_ode.test_issue_7081()
sympy.tests.test_ode.test_issue_7093()
sympy.tests.test_ode.test_kamke()
sympy.tests.test_ode.test_lie_group()
sympy.tests.test_ode.test_linear_2eq_order1()
sympy.tests.test_ode.test_linear_2eq_order2()
sympy.tests.test_ode.test_linear_3eq_order1()
sympy.tests.test_ode.test_linear_coeff_match()
sympy.tests.test_ode.test_linear_coefficients()
sympy.tests.test_ode.test_noncircularized_real_imaginary_parts()
sympy.tests.test_ode.test_nonlinear_2eq_order1()
sympy.tests.test_ode.test_nonlinear_3eq_order1()
sympy.tests.test_ode.test_nth_linear_constant_coeff_homogeneous()
sympy.tests.test_ode.test_nth_linear_constant_coeff_homogeneous_RootOf()
sympy.tests.test_ode.test_nth_linear_constant_coeff_homogeneous_RootOf_sol()
sympy.tests.test_ode.test_nth_linear_constant_coeff_undetermined_coefficients()
sympy.tests.test_ode.test_nth_linear_constant_coeff_undetermined_coefficients_imaginary_exp()
sympy.tests.test_ode.test_nth_linear_constant_coeff_variation_of_parameters()
sympy.tests.test_ode.test_nth_linear_constant_coeff_variation_of_parameters_simplify_False()
sympy.tests.test_ode.test_nth_order_linear_euler_eq_homogeneous()
sympy.tests.test_ode.test_nth_order_linear_euler_eq_nonhomogeneous_undetermined_coefficients()
sympy.tests.test_ode.test_nth_order_linear_euler_eq_nonhomogeneous_variation_of_parameters()
sympy.tests.test_ode.test_ode_order()
sympy.tests.test_ode.test_old_ode_tests()
sympy.tests.test_ode.test_separable1()
sympy.tests.test_ode.test_separable2()
sympy.tests.test_ode.test_separable3()
sympy.tests.test_ode.test_separable4()
sympy.tests.test_ode.test_separable5()
sympy.tests.test_ode.test_separable_1_5_checkodesol()
sympy.tests.test_ode.test_separable_reduced()
sympy.tests.test_ode.test_series()
sympy.tests.test_ode.test_undetermined_coefficients_match()
sympy.tests.test_ode.test_unexpanded_Liouville_ODE()
sympy.tests.test_ode.test_user_infinitesimals()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_recurr.py----------------------------------------
A:sympy.solvers.tests.test_recurr.y->Function('y')
A:sympy.solvers.tests.test_recurr.(n, k)->symbols('n,k', integer=True)
A:sympy.solvers.tests.test_recurr.(C0, C1, C2)->symbols('C0,C1,C2')
A:sympy.solvers.tests.test_recurr.solution->rsolve_ratio([-2 * n ** 3 + n ** 2 + 2 * n - 1, 2 * n ** 3 + n ** 2 - 6 * n, -2 * n ** 3 - 11 * n ** 2 - 18 * n - 9, 2 * n ** 3 + 13 * n ** 2 + 22 * n + 8], 0, n)
A:sympy.solvers.tests.test_recurr.q->recurrence_term(c, p)
A:sympy.solvers.tests.test_recurr.x->Function('x')
sympy.solvers.tests.test_recurr.recurrence_term(c,f)
sympy.solvers.tests.test_recurr.test_issue_6844()
sympy.solvers.tests.test_recurr.test_rsolve()
sympy.solvers.tests.test_recurr.test_rsolve_bulk()
sympy.solvers.tests.test_recurr.test_rsolve_hyper()
sympy.solvers.tests.test_recurr.test_rsolve_poly()
sympy.solvers.tests.test_recurr.test_rsolve_raises()
sympy.solvers.tests.test_recurr.test_rsolve_ratio()
sympy.tests.test_recurr.recurrence_term(c,f)
sympy.tests.test_recurr.test_issue_6844()
sympy.tests.test_recurr.test_rsolve()
sympy.tests.test_recurr.test_rsolve_bulk()
sympy.tests.test_recurr.test_rsolve_hyper()
sympy.tests.test_recurr.test_rsolve_poly()
sympy.tests.test_recurr.test_rsolve_raises()
sympy.tests.test_recurr.test_rsolve_ratio()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_pde.py----------------------------------------
A:sympy.solvers.tests.test_pde.(a, b, c, x, y)->symbols('a b c x y')
A:sympy.solvers.tests.test_pde.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.solvers.tests.test_pde.(F, T, X, Y, Z, u)->map(Function, 'FTXYZu')
A:sympy.solvers.tests.test_pde.eq->Eq(res[1], c)
A:sympy.solvers.tests.test_pde.res->pde_separate_mul(eq, u(theta, r), [R(r), T(theta)])
A:sympy.solvers.tests.test_pde.c->Symbol('C', real=True)
A:sympy.solvers.tests.test_pde.Phi->Function('Phi')
A:sympy.solvers.tests.test_pde.(F, R, T, X, Y, Z, u)->map(Function, 'FRTXYZu')
A:sympy.solvers.tests.test_pde.(r, theta, z)->symbols('r,theta,z')
A:sympy.solvers.tests.test_pde.wave->Eq(D(u(x, t), t, t), c ** 2 * D(u(x, t), x, x))
A:sympy.solvers.tests.test_pde.f->Function('f')
A:sympy.solvers.tests.test_pde.(f, F)->map(Function, ['f', 'F'])
A:sympy.solvers.tests.test_pde.(f, F, G, H)->map(Function, ['f', 'F', 'G', 'H'])
A:sympy.solvers.tests.test_pde.u->f(x, y)
A:sympy.solvers.tests.test_pde.sol->pdsolve(eq, hint='1st_linear_variable_coeff')
sympy.solvers.tests.test_pde.test_checkpdesol()
sympy.solvers.tests.test_pde.test_pde_1st_linear_constant_coeff()
sympy.solvers.tests.test_pde.test_pde_1st_linear_constant_coeff_homogeneous()
sympy.solvers.tests.test_pde.test_pde_classify()
sympy.solvers.tests.test_pde.test_pde_separate_add()
sympy.solvers.tests.test_pde.test_pde_separate_mul()
sympy.solvers.tests.test_pde.test_pdsolve_all()
sympy.solvers.tests.test_pde.test_pdsolve_variable_coeff()
sympy.solvers.tests.test_pde.test_solvefun()
sympy.tests.test_pde.test_checkpdesol()
sympy.tests.test_pde.test_pde_1st_linear_constant_coeff()
sympy.tests.test_pde.test_pde_1st_linear_constant_coeff_homogeneous()
sympy.tests.test_pde.test_pde_classify()
sympy.tests.test_pde.test_pde_separate_add()
sympy.tests.test_pde.test_pde_separate_mul()
sympy.tests.test_pde.test_pdsolve_all()
sympy.tests.test_pde.test_pdsolve_variable_coeff()
sympy.tests.test_pde.test_solvefun()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_constantsimp.py----------------------------------------
A:sympy.solvers.tests.test_constantsimp.x->Symbol('x')
A:sympy.solvers.tests.test_constantsimp.y->Symbol('y')
A:sympy.solvers.tests.test_constantsimp.z->Symbol('z')
A:sympy.solvers.tests.test_constantsimp.C1->Symbol('C1')
A:sympy.solvers.tests.test_constantsimp.C2->Symbol('C2')
A:sympy.solvers.tests.test_constantsimp.C3->Symbol('C3')
A:sympy.solvers.tests.test_constantsimp.f->Function('f')
A:sympy.solvers.tests.test_constantsimp.u2->Symbol('u2')
A:sympy.solvers.tests.test_constantsimp._a->Symbol('_a')
sympy.solvers.tests.test_constantsimp.test_constant_Eq()
sympy.solvers.tests.test_constantsimp.test_constant_add()
sympy.solvers.tests.test_constantsimp.test_constant_function()
sympy.solvers.tests.test_constantsimp.test_constant_function_multiple()
sympy.solvers.tests.test_constantsimp.test_constant_mul()
sympy.solvers.tests.test_constantsimp.test_constant_multiple()
sympy.solvers.tests.test_constantsimp.test_constant_power_as_base()
sympy.solvers.tests.test_constantsimp.test_constant_power_as_exp()
sympy.solvers.tests.test_constantsimp.test_constant_repeated()
sympy.solvers.tests.test_constantsimp.test_nonlocal_simplification()
sympy.solvers.tests.test_constantsimp.test_ode_solutions()
sympy.tests.test_constantsimp.test_constant_Eq()
sympy.tests.test_constantsimp.test_constant_add()
sympy.tests.test_constantsimp.test_constant_function()
sympy.tests.test_constantsimp.test_constant_function_multiple()
sympy.tests.test_constantsimp.test_constant_mul()
sympy.tests.test_constantsimp.test_constant_multiple()
sympy.tests.test_constantsimp.test_constant_power_as_base()
sympy.tests.test_constantsimp.test_constant_power_as_exp()
sympy.tests.test_constantsimp.test_constant_repeated()
sympy.tests.test_constantsimp.test_nonlocal_simplification()
sympy.tests.test_constantsimp.test_ode_solutions()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_polysys.py----------------------------------------
A:sympy.solvers.tests.test_polysys.(x0, y0, x1, y1, r)->symbols('x0 y0 x1 y1 r')
A:sympy.solvers.tests.test_polysys.result->solve_poly_system([f_1, f_2], x, y)
A:sympy.solvers.tests.test_polysys.dom->sympy.QQ.algebraic_field(sqrt(2))
A:sympy.solvers.tests.test_polysys.roots->solve_poly_system([(x - 5) ** 2 / 250000 + (y - 5.0 / 10) ** 2 / 250000 - 1, x], x, y)
sympy.solvers.tests.test_polysys.test_solve_biquadratic()
sympy.solvers.tests.test_polysys.test_solve_issue_3686()
sympy.solvers.tests.test_polysys.test_solve_poly_system()
sympy.solvers.tests.test_polysys.test_solve_triangualted()
sympy.tests.test_polysys.test_solve_biquadratic()
sympy.tests.test_polysys.test_solve_issue_3686()
sympy.tests.test_polysys.test_solve_poly_system()
sympy.tests.test_polysys.test_solve_triangualted()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_inequalities.py----------------------------------------
A:sympy.solvers.tests.test_inequalities.inf->sympy.oo.evalf()
A:sympy.solvers.tests.test_inequalities.x->Symbol('x', real=True)
A:sympy.solvers.tests.test_inequalities.y->Symbol('y')
A:sympy.solvers.tests.test_inequalities.s->sqrt(2)
A:sympy.solvers.tests.test_inequalities.cond->Eq(im(x), 0)
A:sympy.solvers.tests.test_inequalities.sol->solve(eq >= 0)
A:sympy.solvers.tests.test_inequalities.known_sol->Or(And(-oo < x, RootOf(x ** 8 + x ** 2 - 9, 1) <= x, x < oo), And(-oo < x, x < oo, x <= RootOf(x ** 8 + x ** 2 - 9, 0)))
A:sympy.solvers.tests.test_inequalities.f->Function('f')
A:sympy.solvers.tests.test_inequalities.e->Sum(f(x), (x, 1, 3))
sympy.solvers.tests.test_inequalities.test_hacky_inequalities()
sympy.solvers.tests.test_inequalities.test_issue_5526()
sympy.solvers.tests.test_inequalities.test_issue_6343()
sympy.solvers.tests.test_inequalities.test_issue_8235()
sympy.solvers.tests.test_inequalities.test_reduce_abs_inequalities()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_boolean()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_errors()
sympy.solvers.tests.test_inequalities.test_reduce_inequalities_multivariate()
sympy.solvers.tests.test_inequalities.test_reduce_poly_inequalities_complex_relational()
sympy.solvers.tests.test_inequalities.test_reduce_poly_inequalities_real_interval()
sympy.solvers.tests.test_inequalities.test_reduce_poly_inequalities_real_relational()
sympy.solvers.tests.test_inequalities.test_reduce_rational_inequalities_real_relational()
sympy.solvers.tests.test_inequalities.test_solve_univariate_inequality()
sympy.tests.test_inequalities.test_hacky_inequalities()
sympy.tests.test_inequalities.test_issue_5526()
sympy.tests.test_inequalities.test_issue_6343()
sympy.tests.test_inequalities.test_issue_8235()
sympy.tests.test_inequalities.test_reduce_abs_inequalities()
sympy.tests.test_inequalities.test_reduce_inequalities_boolean()
sympy.tests.test_inequalities.test_reduce_inequalities_errors()
sympy.tests.test_inequalities.test_reduce_inequalities_multivariate()
sympy.tests.test_inequalities.test_reduce_poly_inequalities_complex_relational()
sympy.tests.test_inequalities.test_reduce_poly_inequalities_real_interval()
sympy.tests.test_inequalities.test_reduce_poly_inequalities_real_relational()
sympy.tests.test_inequalities.test_reduce_rational_inequalities_real_relational()
sympy.tests.test_inequalities.test_solve_univariate_inequality()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_diophantine.py----------------------------------------
A:sympy.solvers.tests.test_diophantine.(x, y, z, w, t, X, Y, Z)->symbols('x, y, z, w, t, X, Y, Z', integer=True)
A:sympy.solvers.tests.test_diophantine.(A, B)->transformation_to_DN(eq)
A:sympy.solvers.tests.test_diophantine.simplified->_mexpand(Subs(eq, (x, y, z), (X, Y, Z)).doit())
A:sympy.solvers.tests.test_diophantine.coeff->dict([reversed(t.as_independent(*[X, Y, Z])) for t in simplified.args])
A:sympy.solvers.tests.test_diophantine.coeff[term]->Integer(0)
A:sympy.solvers.tests.test_diophantine.(w, x, y)->descent(a, b)
A:sympy.solvers.tests.test_diophantine.A->transformation_to_normal(eq)
A:sympy.solvers.tests.test_diophantine.f->power_representation(n, p, k)
A:sympy.solvers.tests.test_diophantine.l->next(f)
A:sympy.solvers.tests.test_diophantine.(a, b)->symbols('a b', integer=True, positive=False)
A:sympy.solvers.tests.test_diophantine.(a, b, c)->sum_of_three_squares(i)
A:sympy.solvers.tests.test_diophantine.n->randint(1, 100000000000000)
A:sympy.solvers.tests.test_diophantine.(a, b, c, d)->sum_of_four_squares(n)
A:sympy.solvers.tests.test_diophantine.(m, n)->symbols('m n', integer=True, positive=True)
A:sympy.solvers.tests.test_diophantine.diof->diophantine(a * b + 2 * a + 3 * b - 6)
A:sympy.solvers.tests.test_diophantine.s->diophantine(eq)
A:sympy.solvers.tests.test_diophantine.var->list(eq.free_symbols)
A:sympy.solvers.tests.test_diophantine.solution->diophantine(eq).pop()
sympy.solvers.tests.test_diophantine.check_solutions(eq)
sympy.solvers.tests.test_diophantine.is_normal_transformation_ok(eq)
sympy.solvers.tests.test_diophantine.is_pell_transformation_ok(eq)
sympy.solvers.tests.test_diophantine.test_DN()
sympy.solvers.tests.test_diophantine.test_assumptions()
sympy.solvers.tests.test_diophantine.test_bf_pell()
sympy.solvers.tests.test_diophantine.test_descent()
sympy.solvers.tests.test_diophantine.test_diop_general_sum_of_squares()
sympy.solvers.tests.test_diophantine.test_diop_ternary_quadratic()
sympy.solvers.tests.test_diophantine.test_diop_ternary_quadratic_normal()
sympy.solvers.tests.test_diophantine.test_diophantine()
sympy.solvers.tests.test_diophantine.test_find_DN()
sympy.solvers.tests.test_diophantine.test_general_pythagorean()
sympy.solvers.tests.test_diophantine.test_input_format()
sympy.solvers.tests.test_diophantine.test_ldescent()
sympy.solvers.tests.test_diophantine.test_length()
sympy.solvers.tests.test_diophantine.test_linear()
sympy.solvers.tests.test_diophantine.test_no_square_ternary_quadratic()
sympy.solvers.tests.test_diophantine.test_pairwise_prime()
sympy.solvers.tests.test_diophantine.test_parametrize_ternary_quadratic()
sympy.solvers.tests.test_diophantine.test_partition()
sympy.solvers.tests.test_diophantine.test_power_representation()
sympy.solvers.tests.test_diophantine.test_prime_as_sum_of_two_squares()
sympy.solvers.tests.test_diophantine.test_quadratic_elliptical_case()
sympy.solvers.tests.test_diophantine.test_quadratic_non_perfect_slow()
sympy.solvers.tests.test_diophantine.test_quadratic_non_perfect_square()
sympy.solvers.tests.test_diophantine.test_quadratic_parabolic_case()
sympy.solvers.tests.test_diophantine.test_quadratic_perfect_square()
sympy.solvers.tests.test_diophantine.test_quadratic_simple_hyperbolic_case()
sympy.solvers.tests.test_diophantine.test_square_factor()
sympy.solvers.tests.test_diophantine.test_sum_of_four_squares()
sympy.solvers.tests.test_diophantine.test_sum_of_three_squares()
sympy.solvers.tests.test_diophantine.test_transformation_to_normal()
sympy.solvers.tests.test_diophantine.test_transformation_to_pell()
sympy.solvers.tests.test_diophantine.test_univariate()
sympy.tests.test_diophantine.check_solutions(eq)
sympy.tests.test_diophantine.is_normal_transformation_ok(eq)
sympy.tests.test_diophantine.is_pell_transformation_ok(eq)
sympy.tests.test_diophantine.test_DN()
sympy.tests.test_diophantine.test_assumptions()
sympy.tests.test_diophantine.test_bf_pell()
sympy.tests.test_diophantine.test_descent()
sympy.tests.test_diophantine.test_diop_general_sum_of_squares()
sympy.tests.test_diophantine.test_diop_ternary_quadratic()
sympy.tests.test_diophantine.test_diop_ternary_quadratic_normal()
sympy.tests.test_diophantine.test_diophantine()
sympy.tests.test_diophantine.test_find_DN()
sympy.tests.test_diophantine.test_general_pythagorean()
sympy.tests.test_diophantine.test_input_format()
sympy.tests.test_diophantine.test_ldescent()
sympy.tests.test_diophantine.test_length()
sympy.tests.test_diophantine.test_linear()
sympy.tests.test_diophantine.test_no_square_ternary_quadratic()
sympy.tests.test_diophantine.test_pairwise_prime()
sympy.tests.test_diophantine.test_parametrize_ternary_quadratic()
sympy.tests.test_diophantine.test_partition()
sympy.tests.test_diophantine.test_power_representation()
sympy.tests.test_diophantine.test_prime_as_sum_of_two_squares()
sympy.tests.test_diophantine.test_quadratic_elliptical_case()
sympy.tests.test_diophantine.test_quadratic_non_perfect_slow()
sympy.tests.test_diophantine.test_quadratic_non_perfect_square()
sympy.tests.test_diophantine.test_quadratic_parabolic_case()
sympy.tests.test_diophantine.test_quadratic_perfect_square()
sympy.tests.test_diophantine.test_quadratic_simple_hyperbolic_case()
sympy.tests.test_diophantine.test_square_factor()
sympy.tests.test_diophantine.test_sum_of_four_squares()
sympy.tests.test_diophantine.test_sum_of_three_squares()
sympy.tests.test_diophantine.test_transformation_to_normal()
sympy.tests.test_diophantine.test_transformation_to_pell()
sympy.tests.test_diophantine.test_univariate()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_numeric.py----------------------------------------
A:sympy.solvers.tests.test_numeric.x->Symbol('x')
A:sympy.solvers.tests.test_numeric.x1->Symbol('x1')
A:sympy.solvers.tests.test_numeric.x2->Symbol('x2')
A:sympy.solvers.tests.test_numeric.F->lambdify((x, y, z), f.T, modules='mpmath')
A:sympy.solvers.tests.test_numeric.y->Symbol('y')
A:sympy.solvers.tests.test_numeric.z->Symbol('z')
A:sympy.solvers.tests.test_numeric.root->nsolve(f, (x, y, z), x0)
A:sympy.solvers.tests.test_numeric.a->Symbol('a')
A:sympy.solvers.tests.test_numeric.(x, y)->symbols('x y')
sympy.solvers.tests.test_numeric.test_issue_6408()
sympy.solvers.tests.test_numeric.test_issue_6408_fail()
sympy.solvers.tests.test_numeric.test_nsolve()
sympy.tests.test_numeric.test_issue_6408()
sympy.tests.test_numeric.test_issue_6408_fail()
sympy.tests.test_numeric.test_nsolve()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/tests/test_solvers.py----------------------------------------
A:sympy.solvers.tests.test_solvers.(f, g)->map(Function, 'fg')
A:sympy.solvers.tests.test_solvers.(a11, a12, a21, a22, b1, b2)->symbols('a11,a12,a21,a22,b1,b2')
A:sympy.solvers.tests.test_solvers.s->SparseMatrix(2, 2, (1, 2, 1, 4))
A:sympy.solvers.tests.test_solvers.res->Function('f').subs(x, root.n()).n()
A:sympy.solvers.tests.test_solvers.sol->Matrix(nsolve(Tuple(eq1, eq2, eq3), [A, B, V], (0, 0, 0)))
A:sympy.solvers.tests.test_solvers.(x, y, z, t, n)->symbols('x, y, z, t, n')
A:sympy.solvers.tests.test_solvers.M->Matrix([[1, 2, 0, 1], [1, 3, 2 * n, 1], [4, -1, n ** 2, 1]])
A:sympy.solvers.tests.test_solvers.a->Symbol('a')
A:sympy.solvers.tests.test_solvers.n->Symbol('n', integer=True, positive=True)
A:sympy.solvers.tests.test_solvers.ans->solve(list(eqs), list(v), simplify=False)
A:sympy.solvers.tests.test_solvers.result->solve(eq, x)
A:sympy.solvers.tests.test_solvers.(a, b)->symbols('a b', imaginary=True)
A:sympy.solvers.tests.test_solvers.t->Symbol('t')
A:sympy.solvers.tests.test_solvers.x->symbols('x')
A:sympy.solvers.tests.test_solvers.y->Symbol('y', positive=True)
A:sympy.solvers.tests.test_solvers.soln->solve([a11 * x + a12 * y.diff(t) - b1, a21 * x + a22 * y.diff(t) - b2], x, y.diff(t))
A:sympy.solvers.tests.test_solvers.eqns->set((3 * x - 1, 2 * y - 4))
A:sympy.solvers.tests.test_solvers.f->Function('f')
A:sympy.solvers.tests.test_solvers.e->Symbol('F').diff(x)
A:sympy.solvers.tests.test_solvers.(a, b, c, d)->symbols('a b c d')
A:sympy.solvers.tests.test_solvers.A->Matrix(2, 2, [a, b, c, d])
A:sympy.solvers.tests.test_solvers.B->Matrix(2, 2, [0, 2, -3, 0])
A:sympy.solvers.tests.test_solvers.C->Matrix(2, 2, [1, 2, 3, 4])
A:sympy.solvers.tests.test_solvers.w->symbols('w', integer=True)
A:sympy.solvers.tests.test_solvers.p->symbols('p', positive=True)
A:sympy.solvers.tests.test_solvers.(x, y, z)->symbols('x y z', positive=True)
A:sympy.solvers.tests.test_solvers.(C1, C2)->symbols('C1 C2')
A:sympy.solvers.tests.test_solvers.(r, t)->symbols('r,t')
A:sympy.solvers.tests.test_solvers.(lam, a0, conc)->symbols('lam a0 conc')
A:sympy.solvers.tests.test_solvers.rv[0]->rv[0].expand().expand()
A:sympy.solvers.tests.test_solvers.ans[0]->ans[0].expand().expand()
A:sympy.solvers.tests.test_solvers.rv->list(rv)
A:sympy.solvers.tests.test_solvers.d->rv[0].expand().expand().atoms(Dummy)
A:sympy.solvers.tests.test_solvers.reps->list(zip(d, [s] * len(d)))
A:sympy.solvers.tests.test_solvers.ra->S('-1484/375 - 4*(-1/2 + sqrt(3)*I/2)*(-12459439/52734375 +\n    114*sqrt(12657)/78125)**(1/3) - 172564/(140625*(-1/2 +\n    sqrt(3)*I/2)*(-12459439/52734375 + 114*sqrt(12657)/78125)**(1/3))')
A:sympy.solvers.tests.test_solvers.r->symbols('r', real=True)
A:sympy.solvers.tests.test_solvers.F->Symbol('F')
A:sympy.solvers.tests.test_solvers.Y->solve((x * y).subs(x, X).diff(y), y, simplify=False, minimal=True)
A:sympy.solvers.tests.test_solvers.eq->(x * exp(x) - 3).subs(x, x * exp(x))
A:sympy.solvers.tests.test_solvers.(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)->symbols('a:r')
A:sympy.solvers.tests.test_solvers.(I1, I2, I3, I4, I5, I6)->symbols('I1:7')
A:sympy.solvers.tests.test_solvers.(dI1, dI4, dQ2, dQ4, Q2, Q4)->symbols('dI1,dI4,dQ2,dQ4,Q2,Q4')
A:sympy.solvers.tests.test_solvers.(f, g, h)->map(Function, 'fgh')
A:sympy.solvers.tests.test_solvers.D->Derivative(f(x), x)
A:sympy.solvers.tests.test_solvers.G->Derivative(g(a), a)
A:sympy.solvers.tests.test_solvers.absxm3->Piecewise((x - 3, S(0) <= x - 3), (3 - x, S(0) > x - 3))
A:sympy.solvers.tests.test_solvers.(R, C, Ri, Vout, V1, Vminus, Vplus, s)->symbols('R, C, Ri, Vout, V1, Vminus, Vplus, s')
A:sympy.solvers.tests.test_solvers.Rf->symbols('Rf', positive=True)
A:sympy.solvers.tests.test_solvers.(x, y)->symbols('x y', real=True)
A:sympy.solvers.tests.test_solvers.i->symbols('i', imaginary=True)
A:sympy.solvers.tests.test_solvers.R->Symbol('R')
A:sympy.solvers.tests.test_solvers.(b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)->symbols('b:r')
A:sympy.solvers.tests.test_solvers.eqs->Matrix([[b - c / d + r / d], [c * (1 / g + 1 / e + 1 / d) - f / g - r / d], [-c / g + f * (1 / j + 1 / i + 1 / g) - h / i], [-f / i + h * (1 / m + 1 / l + 1 / i) - k / m], [-h / m + k * (1 / p + 1 / o + 1 / m) - n / p], [-k / p + n * (1 / q + 1 / p)]])
A:sympy.solvers.tests.test_solvers.v->Matrix([f, h, k, n, b, c])
A:sympy.solvers.tests.test_solvers.m->Matrix(3, 3, list(range(9)))
A:sympy.solvers.tests.test_solvers.(A, B, V)->symbols('A,B,V')
A:sympy.solvers.tests.test_solvers.eq1->Eq(630.26 * (V - 39.0) * V * (V + 39) - A + B, 0)
A:sympy.solvers.tests.test_solvers.eq2->Eq(B, 1.36 * 10 ** 8 * (V - 39))
A:sympy.solvers.tests.test_solvers.eq3->Eq(A, 5.75 * 10 ** 5 * V * (V + 39.0))
sympy.solvers.tests.test_solvers.NS(e,n=15,**options)
sympy.solvers.tests.test_solvers.guess_solve_strategy(eq,symbol)
sympy.solvers.tests.test_solvers.test_PR1964()
sympy.solvers.tests.test_solvers.test__invert()
sympy.solvers.tests.test_solvers.test__ispow()
sympy.solvers.tests.test_solvers.test_atan2()
sympy.solvers.tests.test_solvers.test_check_assumptions()
sympy.solvers.tests.test_solvers.test_checking()
sympy.solvers.tests.test_solvers.test_det_quick()
sympy.solvers.tests.test_solvers.test_errorinverses()
sympy.solvers.tests.test_solvers.test_exclude()
sympy.solvers.tests.test_solvers.test_float_handling()
sympy.solvers.tests.test_solvers.test_guess_poly()
sympy.solvers.tests.test_solvers.test_guess_poly_cv()
sympy.solvers.tests.test_solvers.test_guess_rational_cv()
sympy.solvers.tests.test_solvers.test_guess_transcendental()
sympy.solvers.tests.test_solvers.test_high_order_roots()
sympy.solvers.tests.test_solvers.test_highorder_poly()
sympy.solvers.tests.test_solvers.test_issue_2725()
sympy.solvers.tests.test_solvers.test_issue_2777()
sympy.solvers.tests.test_solvers.test_issue_3725()
sympy.solvers.tests.test_solvers.test_issue_3870()
sympy.solvers.tests.test_solvers.test_issue_4463()
sympy.solvers.tests.test_solvers.test_issue_4671_4463_4467()
sympy.solvers.tests.test_solvers.test_issue_4793()
sympy.solvers.tests.test_solvers.test_issue_5114()
sympy.solvers.tests.test_solvers.test_issue_5114_6611()
sympy.solvers.tests.test_solvers.test_issue_5132()
sympy.solvers.tests.test_solvers.test_issue_5197()
sympy.solvers.tests.test_solvers.test_issue_5335()
sympy.solvers.tests.test_solvers.test_issue_5335_float()
sympy.solvers.tests.test_solvers.test_issue_5673()
sympy.solvers.tests.test_solvers.test_issue_5767()
sympy.solvers.tests.test_solvers.test_issue_5849()
sympy.solvers.tests.test_solvers.test_issue_5849_matrix()
sympy.solvers.tests.test_solvers.test_issue_5901()
sympy.solvers.tests.test_solvers.test_issue_5912()
sympy.solvers.tests.test_solvers.test_issue_6056()
sympy.solvers.tests.test_solvers.test_issue_6060()
sympy.solvers.tests.test_solvers.test_issue_6528()
sympy.solvers.tests.test_solvers.test_issue_6605()
sympy.solvers.tests.test_solvers.test_issue_6644()
sympy.solvers.tests.test_solvers.test_issue_6752()
sympy.solvers.tests.test_solvers.test_issue_6792()
sympy.solvers.tests.test_solvers.test_issue_6989()
sympy.solvers.tests.test_solvers.test_issue_7110()
sympy.solvers.tests.test_solvers.test_issue_7190()
sympy.solvers.tests.test_solvers.test_issue_7228()
sympy.solvers.tests.test_solvers.test_issue_7322()
sympy.solvers.tests.test_solvers.test_issue_7547()
sympy.solvers.tests.test_solvers.test_issue_7895()
sympy.solvers.tests.test_solvers.test_issues_6819_6820_6821_6248()
sympy.solvers.tests.test_solvers.test_lambert_multivariate()
sympy.solvers.tests.test_solvers.test_linear_system()
sympy.solvers.tests.test_solvers.test_linear_systemLU()
sympy.solvers.tests.test_solvers.test_linear_system_function()
sympy.solvers.tests.test_solvers.test_minsolve_linear_system()
sympy.solvers.tests.test_solvers.test_other_lambert()
sympy.solvers.tests.test_solvers.test_overdetermined()
sympy.solvers.tests.test_solvers.test_piecewise()
sympy.solvers.tests.test_solvers.test_polysys()
sympy.solvers.tests.test_solvers.test_quintics_1()
sympy.solvers.tests.test_solvers.test_quintics_2()
sympy.solvers.tests.test_solvers.test_real_imag_splitting()
sympy.solvers.tests.test_solvers.test_real_roots()
sympy.solvers.tests.test_solvers.test_rewrite_trig()
sympy.solvers.tests.test_solvers.test_rewrite_trigh()
sympy.solvers.tests.test_solvers.test_solve_args()
sympy.solvers.tests.test_solvers.test_solve_for_functions_derivatives()
sympy.solvers.tests.test_solvers.test_solve_inequalities()
sympy.solvers.tests.test_solvers.test_solve_linear()
sympy.solvers.tests.test_solvers.test_solve_nonlinear()
sympy.solvers.tests.test_solvers.test_solve_polynomial1()
sympy.solvers.tests.test_solvers.test_solve_polynomial2()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_1a()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_1b()
sympy.solvers.tests.test_solvers.test_solve_polynomial_cv_2()
sympy.solvers.tests.test_solvers.test_solve_rational()
sympy.solvers.tests.test_solvers.test_solve_transcendental()
sympy.solvers.tests.test_solvers.test_solve_undetermined_coeffs()
sympy.solvers.tests.test_solvers.test_swap_back()
sympy.solvers.tests.test_solvers.test_units()
sympy.solvers.tests.test_solvers.test_unrad()
sympy.solvers.tests.test_solvers.test_unrad_slow()
sympy.solvers.tests.test_solvers.test_uselogcombine()
sympy.tests.test_NS(e,n=15,**options)
sympy.tests.test_guess_solve_strategy(eq,symbol)
sympy.tests.test_test_PR1964()
sympy.tests.test_test__invert()
sympy.tests.test_test__ispow()
sympy.tests.test_test_atan2()
sympy.tests.test_test_check_assumptions()
sympy.tests.test_test_checking()
sympy.tests.test_test_det_quick()
sympy.tests.test_test_errorinverses()
sympy.tests.test_test_exclude()
sympy.tests.test_test_float_handling()
sympy.tests.test_test_guess_poly()
sympy.tests.test_test_guess_poly_cv()
sympy.tests.test_test_guess_rational_cv()
sympy.tests.test_test_guess_transcendental()
sympy.tests.test_test_high_order_roots()
sympy.tests.test_test_highorder_poly()
sympy.tests.test_test_issue_2725()
sympy.tests.test_test_issue_2777()
sympy.tests.test_test_issue_3725()
sympy.tests.test_test_issue_3870()
sympy.tests.test_test_issue_4463()
sympy.tests.test_test_issue_4671_4463_4467()
sympy.tests.test_test_issue_4793()
sympy.tests.test_test_issue_5114()
sympy.tests.test_test_issue_5114_6611()
sympy.tests.test_test_issue_5132()
sympy.tests.test_test_issue_5197()
sympy.tests.test_test_issue_5335()
sympy.tests.test_test_issue_5335_float()
sympy.tests.test_test_issue_5673()
sympy.tests.test_test_issue_5767()
sympy.tests.test_test_issue_5849()
sympy.tests.test_test_issue_5849_matrix()
sympy.tests.test_test_issue_5901()
sympy.tests.test_test_issue_5912()
sympy.tests.test_test_issue_6056()
sympy.tests.test_test_issue_6060()
sympy.tests.test_test_issue_6528()
sympy.tests.test_test_issue_6605()
sympy.tests.test_test_issue_6644()
sympy.tests.test_test_issue_6752()
sympy.tests.test_test_issue_6792()
sympy.tests.test_test_issue_6989()
sympy.tests.test_test_issue_7110()
sympy.tests.test_test_issue_7190()
sympy.tests.test_test_issue_7228()
sympy.tests.test_test_issue_7322()
sympy.tests.test_test_issue_7547()
sympy.tests.test_test_issue_7895()
sympy.tests.test_test_issues_6819_6820_6821_6248()
sympy.tests.test_test_lambert_multivariate()
sympy.tests.test_test_linear_system()
sympy.tests.test_test_linear_systemLU()
sympy.tests.test_test_linear_system_function()
sympy.tests.test_test_minsolve_linear_system()
sympy.tests.test_test_other_lambert()
sympy.tests.test_test_overdetermined()
sympy.tests.test_test_piecewise()
sympy.tests.test_test_polysys()
sympy.tests.test_test_quintics_1()
sympy.tests.test_test_quintics_2()
sympy.tests.test_test_real_imag_splitting()
sympy.tests.test_test_real_roots()
sympy.tests.test_test_rewrite_trig()
sympy.tests.test_test_rewrite_trigh()
sympy.tests.test_test_solve_args()
sympy.tests.test_test_solve_for_functions_derivatives()
sympy.tests.test_test_solve_inequalities()
sympy.tests.test_test_solve_linear()
sympy.tests.test_test_solve_nonlinear()
sympy.tests.test_test_solve_polynomial1()
sympy.tests.test_test_solve_polynomial2()
sympy.tests.test_test_solve_polynomial_cv_1a()
sympy.tests.test_test_solve_polynomial_cv_1b()
sympy.tests.test_test_solve_polynomial_cv_2()
sympy.tests.test_test_solve_rational()
sympy.tests.test_test_solve_transcendental()
sympy.tests.test_test_solve_undetermined_coeffs()
sympy.tests.test_test_swap_back()
sympy.tests.test_test_units()
sympy.tests.test_test_unrad()
sympy.tests.test_test_unrad_slow()
sympy.tests.test_test_uselogcombine()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/benchmarks/bench_solvers.py----------------------------------------
A:sympy.solvers.benchmarks.bench_solvers.M->zeros(N, N + 1)
A:sympy.solvers.benchmarks.bench_solvers.M[:, :N]->eye(N)
sympy.benchmarks.bench_timeit_linsolve_trivial()
sympy.solvers.benchmarks.bench_solvers.timeit_linsolve_trivial()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/solvers/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/inference.py----------------------------------------
A:sympy.logic.inference.expr->sympify(expr)
A:sympy.logic.inference.model->dict(((k, True) for k in result.atoms()))
A:sympy.logic.inference.result->sympify(expr).subs(model)
A:sympy.logic.inference.formula_set->list(formula_set)
A:sympy.logic.inference.self.clauses_->set()
sympy.inference.KB(self,sentence=None)
sympy.inference.KB.ask(self,query)
sympy.inference.KB.clauses(self)
sympy.inference.KB.retract(self,sentence)
sympy.inference.KB.tell(self,sentence)
sympy.inference.PropKB(KB)
sympy.inference.PropKB.ask(self,query)
sympy.inference.PropKB.retract(self,sentence)
sympy.inference.PropKB.tell(self,sentence)
sympy.inference.entails(expr,formula_set={})
sympy.inference.literal_symbol(literal)
sympy.inference.pl_true(expr,model={},deep=False)
sympy.inference.valid(expr)
sympy.logic.inference.KB(self,sentence=None)
sympy.logic.inference.KB.__init__(self,sentence=None)
sympy.logic.inference.KB.ask(self,query)
sympy.logic.inference.KB.clauses(self)
sympy.logic.inference.KB.retract(self,sentence)
sympy.logic.inference.KB.tell(self,sentence)
sympy.logic.inference.PropKB(KB)
sympy.logic.inference.PropKB.ask(self,query)
sympy.logic.inference.PropKB.retract(self,sentence)
sympy.logic.inference.PropKB.tell(self,sentence)
sympy.logic.inference.entails(expr,formula_set={})
sympy.logic.inference.literal_symbol(literal)
sympy.logic.inference.pl_true(expr,model={},deep=False)
sympy.logic.inference.satisfiable(expr,algorithm='dpll2',all_models=False)
sympy.logic.inference.valid(expr)
sympy.satisfiable(expr,algorithm='dpll2',all_models=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/boolalg.py----------------------------------------
A:sympy.logic.boolalg.true->BooleanTrue()
A:sympy.logic.boolalg.false->BooleanFalse()
A:sympy.logic.boolalg.simplify->kwargs.get('simplify', True)
A:sympy.logic.boolalg.argset->set(args)
A:sympy.logic.boolalg.arg->arg.to_nnf(simplify).to_nnf(simplify)
A:sympy.logic.boolalg.obj->super(Equivalent, cls).__new__(cls, _args)
A:sympy.logic.boolalg.obj._args->tuple(ordered(argset))
A:sympy.logic.boolalg.obj._argset->frozenset(argset)
A:sympy.logic.boolalg._args->frozenset(argset)
A:sympy.logic.boolalg.rest->info[2](*[a for a in info[0].args if a is not conj])
A:sympy.logic.boolalg.expr->sympify(expr)
A:sympy.logic.boolalg.symbols->dict(list(zip(symbols, list(xrange(1, len(symbols) + 1)))))
A:sympy.logic.boolalg.todo->list(range(len(terms)))
A:sympy.logic.boolalg.index->_check_pair(ti, tj)
A:sympy.logic.boolalg.new->_simplified_pairs(old)
A:sympy.logic.boolalg.essential->_rem_redundancy(new, maxterms)
A:sympy.logic.boolalg.t->list(t)
A:sympy.logic.boolalg.variables->_find_predicates(expr)
A:sympy.logic.boolalg.d->dict(list(zip(f, [[0] * 5 for fi in f])))
A:sympy.logic.boolalg.inv->defaultdict(list)
A:sympy.logic.boolalg.f1->_finger(function1)
A:sympy.logic.boolalg.f2->_finger(function2)
A:sympy.logic.boolalg.a->simplify_logic(bool1)
A:sympy.logic.boolalg.b->simplify_logic(bool2)
A:sympy.logic.boolalg.m->match(a, b)
A:sympy.logic.boolalg.mapping->bool_map(bool1, bool2)
sympy.And(LatticeOp,BooleanFunction)
sympy.And._new_args_filter(cls,args)
sympy.And.as_set(self)
sympy.Equivalent(cls,*args,**options)
sympy.Equivalent.args(self)
sympy.Equivalent.to_nnf(self,simplify=True)
sympy.ITE(BooleanFunction)
sympy.ITE.eval(cls,*args)
sympy.ITE.to_nnf(self,simplify=True)
sympy.Implies(BooleanFunction)
sympy.Implies.eval(cls,*args)
sympy.Implies.to_nnf(self,simplify=True)
sympy.Nand(BooleanFunction)
sympy.Nand.eval(cls,*args)
sympy.Nor(BooleanFunction)
sympy.Nor.eval(cls,*args)
sympy.Not(BooleanFunction)
sympy.Not.as_set(self)
sympy.Not.eval(cls,arg)
sympy.Not.to_nnf(self,simplify=True)
sympy.Or(LatticeOp,BooleanFunction)
sympy.Or._new_args_filter(cls,args)
sympy.Or.as_set(self)
sympy.POSform(variables,minterms,dontcares=None)
sympy.SOPform(variables,minterms,dontcares=None)
sympy.Xor(cls,*args,**kwargs)
sympy.Xor.args(self)
sympy.Xor.to_nnf(self,simplify=True)
sympy.bool_equal(bool1,bool2,info=False)
sympy.bool_map(bool1,bool2)
sympy.boolalg.Boolean(Basic)
sympy.boolalg.Boolean.__and__(self,other)
sympy.boolalg.Boolean.__invert__(self)
sympy.boolalg.Boolean.__lshift__(self,other)
sympy.boolalg.Boolean.__or__(self,other)
sympy.boolalg.Boolean.__rshift__(self,other)
sympy.boolalg.Boolean.__xor__(self,other)
sympy.boolalg.Boolean.equals(self,other)
sympy.boolalg.BooleanAtom(Boolean)
sympy.boolalg.BooleanFalse(with_metaclass(Singleton,BooleanAtom))
sympy.boolalg.BooleanFalse.__hash__(self)
sympy.boolalg.BooleanFalse.__nonzero__(self)
sympy.boolalg.BooleanFalse.as_set(self)
sympy.boolalg.BooleanFunction(self,*args)
sympy.boolalg.BooleanFunction._eval_simplify(self,ratio,measure)
sympy.boolalg.BooleanFunction._to_nnf(cls,*args,**kwargs)
sympy.boolalg.BooleanFunction.to_nnf(self,simplify=True)
sympy.boolalg.BooleanTrue(with_metaclass(Singleton,BooleanAtom))
sympy.boolalg.BooleanTrue.__hash__(self)
sympy.boolalg.BooleanTrue.__nonzero__(self)
sympy.boolalg.BooleanTrue.as_set(self)
sympy.boolalg._check_pair(minterm1,minterm2)
sympy.boolalg._compare_term(minterm,term)
sympy.boolalg._convert_to_varsPOS(maxterm,variables)
sympy.boolalg._convert_to_varsSOP(minterm,variables)
sympy.boolalg._distribute(info)
sympy.boolalg._find_predicates(expr)
sympy.boolalg._finger(eq)
sympy.boolalg._is_form(expr,function1,function2)
sympy.boolalg._rem_redundancy(l1,terms)
sympy.boolalg._simplified_pairs(terms)
sympy.boolalg.compile_rule(s)
sympy.boolalg.conjuncts(expr)
sympy.boolalg.disjuncts(expr)
sympy.boolalg.distribute_and_over_or(expr)
sympy.boolalg.distribute_or_over_and(expr)
sympy.boolalg.eliminate_implications(expr)
sympy.boolalg.is_cnf(expr)
sympy.boolalg.is_dnf(expr)
sympy.boolalg.is_literal(expr)
sympy.boolalg.is_nnf(expr,simplified=True)
sympy.boolalg.to_int_repr(clauses,symbols)
sympy.logic.boolalg.And(LatticeOp,BooleanFunction)
sympy.logic.boolalg.And._new_args_filter(cls,args)
sympy.logic.boolalg.And.as_set(self)
sympy.logic.boolalg.Boolean(Basic)
sympy.logic.boolalg.Boolean.__and__(self,other)
sympy.logic.boolalg.Boolean.__invert__(self)
sympy.logic.boolalg.Boolean.__lshift__(self,other)
sympy.logic.boolalg.Boolean.__or__(self,other)
sympy.logic.boolalg.Boolean.__rshift__(self,other)
sympy.logic.boolalg.Boolean.__xor__(self,other)
sympy.logic.boolalg.Boolean.equals(self,other)
sympy.logic.boolalg.BooleanAtom(Boolean)
sympy.logic.boolalg.BooleanFalse(with_metaclass(Singleton,BooleanAtom))
sympy.logic.boolalg.BooleanFalse.__hash__(self)
sympy.logic.boolalg.BooleanFalse.__nonzero__(self)
sympy.logic.boolalg.BooleanFalse.as_set(self)
sympy.logic.boolalg.BooleanFunction(self,*args)
sympy.logic.boolalg.BooleanFunction.__call__(self,*args)
sympy.logic.boolalg.BooleanFunction._eval_simplify(self,ratio,measure)
sympy.logic.boolalg.BooleanFunction._to_nnf(cls,*args,**kwargs)
sympy.logic.boolalg.BooleanFunction.to_nnf(self,simplify=True)
sympy.logic.boolalg.BooleanTrue(with_metaclass(Singleton,BooleanAtom))
sympy.logic.boolalg.BooleanTrue.__hash__(self)
sympy.logic.boolalg.BooleanTrue.__nonzero__(self)
sympy.logic.boolalg.BooleanTrue.as_set(self)
sympy.logic.boolalg.Equivalent(cls,*args,**options)
sympy.logic.boolalg.Equivalent.__new__(cls,*args,**options)
sympy.logic.boolalg.Equivalent.args(self)
sympy.logic.boolalg.Equivalent.to_nnf(self,simplify=True)
sympy.logic.boolalg.ITE(BooleanFunction)
sympy.logic.boolalg.ITE.eval(cls,*args)
sympy.logic.boolalg.ITE.to_nnf(self,simplify=True)
sympy.logic.boolalg.Implies(BooleanFunction)
sympy.logic.boolalg.Implies.eval(cls,*args)
sympy.logic.boolalg.Implies.to_nnf(self,simplify=True)
sympy.logic.boolalg.Nand(BooleanFunction)
sympy.logic.boolalg.Nand.eval(cls,*args)
sympy.logic.boolalg.Nor(BooleanFunction)
sympy.logic.boolalg.Nor.eval(cls,*args)
sympy.logic.boolalg.Not(BooleanFunction)
sympy.logic.boolalg.Not.as_set(self)
sympy.logic.boolalg.Not.eval(cls,arg)
sympy.logic.boolalg.Not.to_nnf(self,simplify=True)
sympy.logic.boolalg.Or(LatticeOp,BooleanFunction)
sympy.logic.boolalg.Or._new_args_filter(cls,args)
sympy.logic.boolalg.Or.as_set(self)
sympy.logic.boolalg.POSform(variables,minterms,dontcares=None)
sympy.logic.boolalg.SOPform(variables,minterms,dontcares=None)
sympy.logic.boolalg.Xor(cls,*args,**kwargs)
sympy.logic.boolalg.Xor.__new__(cls,*args,**kwargs)
sympy.logic.boolalg.Xor.args(self)
sympy.logic.boolalg.Xor.to_nnf(self,simplify=True)
sympy.logic.boolalg._check_pair(minterm1,minterm2)
sympy.logic.boolalg._compare_term(minterm,term)
sympy.logic.boolalg._convert_to_varsPOS(maxterm,variables)
sympy.logic.boolalg._convert_to_varsSOP(minterm,variables)
sympy.logic.boolalg._distribute(info)
sympy.logic.boolalg._find_predicates(expr)
sympy.logic.boolalg._finger(eq)
sympy.logic.boolalg._is_form(expr,function1,function2)
sympy.logic.boolalg._rem_redundancy(l1,terms)
sympy.logic.boolalg._simplified_pairs(terms)
sympy.logic.boolalg.bool_equal(bool1,bool2,info=False)
sympy.logic.boolalg.bool_map(bool1,bool2)
sympy.logic.boolalg.compile_rule(s)
sympy.logic.boolalg.conjuncts(expr)
sympy.logic.boolalg.disjuncts(expr)
sympy.logic.boolalg.distribute_and_over_or(expr)
sympy.logic.boolalg.distribute_or_over_and(expr)
sympy.logic.boolalg.eliminate_implications(expr)
sympy.logic.boolalg.is_cnf(expr)
sympy.logic.boolalg.is_dnf(expr)
sympy.logic.boolalg.is_literal(expr)
sympy.logic.boolalg.is_nnf(expr,simplified=True)
sympy.logic.boolalg.simplify_logic(expr,form=None,deep=True)
sympy.logic.boolalg.to_cnf(expr,simplify=False)
sympy.logic.boolalg.to_dnf(expr,simplify=False)
sympy.logic.boolalg.to_int_repr(clauses,symbols)
sympy.logic.boolalg.to_nnf(expr,simplify=True)
sympy.simplify_logic(expr,form=None,deep=True)
sympy.to_cnf(expr,simplify=False)
sympy.to_dnf(expr,simplify=False)
sympy.to_nnf(expr,simplify=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/algorithms/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/algorithms/dpll.py----------------------------------------
A:sympy.logic.algorithms.dpll.clauses->unit_propagate_int_repr(clauses, P)
A:sympy.logic.algorithms.dpll.symbols->sorted(_find_predicates(expr), key=default_sort_key)
A:sympy.logic.algorithms.dpll.symbols_int_repr->set(range(1, len(symbols) + 1))
A:sympy.logic.algorithms.dpll.clauses_int_repr->to_int_repr(clauses, symbols)
A:sympy.logic.algorithms.dpll.result->dpll_int_repr(clauses_int_repr, symbols_int_repr, {})
A:sympy.logic.algorithms.dpll.(P, value)->find_pure_symbol_int_repr(symbols, clauses)
A:sympy.logic.algorithms.dpll.val->pl_true_int_repr(c, model)
A:sympy.logic.algorithms.dpll.P->sorted(_find_predicates(expr), key=default_sort_key).pop()
A:sympy.logic.algorithms.dpll.model_copy->model.copy()
A:sympy.logic.algorithms.dpll.symbols_copy->sorted(_find_predicates(expr), key=default_sort_key).copy()
A:sympy.logic.algorithms.dpll.p->unbound.pop()
A:sympy.logic.algorithms.dpll.negated->set([-s])
A:sympy.logic.algorithms.dpll.all_symbols->reduce(set.union, unknown_clauses, set())
A:sympy.logic.algorithms.dpll.found_pos->reduce(set.union, unknown_clauses, set()).intersection(symbols)
A:sympy.logic.algorithms.dpll.found_neg->reduce(set.union, unknown_clauses, set()).intersection([-s for s in symbols])
A:sympy.logic.algorithms.dpll.sym->literal_symbol(literal)
sympy.algorithms.dpll.dpll(clauses,symbols,model)
sympy.algorithms.dpll.dpll_int_repr(clauses,symbols,model)
sympy.algorithms.dpll.dpll_satisfiable(expr)
sympy.algorithms.dpll.find_pure_symbol(symbols,unknown_clauses)
sympy.algorithms.dpll.find_pure_symbol_int_repr(symbols,unknown_clauses)
sympy.algorithms.dpll.find_unit_clause(clauses,model)
sympy.algorithms.dpll.find_unit_clause_int_repr(clauses,model)
sympy.algorithms.dpll.pl_true_int_repr(clause,model={})
sympy.algorithms.dpll.unit_propagate(clauses,symbol)
sympy.algorithms.dpll.unit_propagate_int_repr(clauses,s)
sympy.logic.algorithms.dpll.dpll(clauses,symbols,model)
sympy.logic.algorithms.dpll.dpll_int_repr(clauses,symbols,model)
sympy.logic.algorithms.dpll.dpll_satisfiable(expr)
sympy.logic.algorithms.dpll.find_pure_symbol(symbols,unknown_clauses)
sympy.logic.algorithms.dpll.find_pure_symbol_int_repr(symbols,unknown_clauses)
sympy.logic.algorithms.dpll.find_unit_clause(clauses,model)
sympy.logic.algorithms.dpll.find_unit_clause_int_repr(clauses,model)
sympy.logic.algorithms.dpll.pl_true_int_repr(clause,model={})
sympy.logic.algorithms.dpll.unit_propagate(clauses,symbol)
sympy.logic.algorithms.dpll.unit_propagate_int_repr(clauses,s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/algorithms/dpll2.py----------------------------------------
A:sympy.logic.algorithms.dpll2.clauses->conjuncts(to_cnf(expr))
A:sympy.logic.algorithms.dpll2.symbols->sorted(_find_predicates(expr), key=default_sort_key)
A:sympy.logic.algorithms.dpll2.symbols_int_repr->range(1, len(symbols) + 1)
A:sympy.logic.algorithms.dpll2.clauses_int_repr->to_int_repr(clauses, symbols)
A:sympy.logic.algorithms.dpll2.solver->SATSolver(clauses_int_repr, symbols_int_repr, set(), symbols)
A:sympy.logic.algorithms.dpll2.models->SATSolver(clauses_int_repr, symbols_int_repr, set(), symbols)._find_model()
A:sympy.logic.algorithms.dpll2.self.symbols->list(ordered(variables))
A:sympy.logic.algorithms.dpll2.self.original_num_clauses->len(self.clauses)
A:sympy.logic.algorithms.dpll2.self.sentinels->defaultdict(set)
A:sympy.logic.algorithms.dpll2.self.occurrence_count->defaultdict(int)
A:sympy.logic.algorithms.dpll2.lit->self.heur_calculate()
A:sympy.logic.algorithms.dpll2.sentinel_list->list(self.sentinels[-lit])
A:sympy.logic.algorithms.dpll2.next_lit->self._unit_prop_queue.pop()
A:sympy.logic.algorithms.dpll2.self.lit_scores[var]->float(-self.occurrence_count[var])
A:sympy.logic.algorithms.dpll2.self.lit_scores[-var]->float(-self.occurrence_count[-var])
A:sympy.logic.algorithms.dpll2.var->abs(lit)
A:sympy.logic.algorithms.dpll2.cls_num->len(self.clauses)
A:sympy.logic.algorithms.dpll2.self.var_settings->set()
sympy.algorithms.dpll2.Level(self,decision,flipped=False)
sympy.algorithms.dpll2.SATSolver(self,clauses,variables,var_settings,symbols=None,heuristic='vsids',clause_learning='none',INTERVAL=500)
sympy.algorithms.dpll2.SATSolver._assign_literal(self,lit)
sympy.algorithms.dpll2.SATSolver._clause_sat(self,cls)
sympy.algorithms.dpll2.SATSolver._current_level(self)
sympy.algorithms.dpll2.SATSolver._find_model(self)
sympy.algorithms.dpll2.SATSolver._initialize_clauses(self,clauses)
sympy.algorithms.dpll2.SATSolver._initialize_variables(self,variables)
sympy.algorithms.dpll2.SATSolver._is_sentinel(self,lit,cls)
sympy.algorithms.dpll2.SATSolver._pure_literal(self)
sympy.algorithms.dpll2.SATSolver._simple_add_learned_clause(self,cls)
sympy.algorithms.dpll2.SATSolver._simple_clean_clauses(self)
sympy.algorithms.dpll2.SATSolver._simple_compute_conflict(self)
sympy.algorithms.dpll2.SATSolver._simplify(self)
sympy.algorithms.dpll2.SATSolver._undo(self)
sympy.algorithms.dpll2.SATSolver._unit_prop(self)
sympy.algorithms.dpll2.SATSolver._vsids_calculate(self)
sympy.algorithms.dpll2.SATSolver._vsids_clause_added(self,cls)
sympy.algorithms.dpll2.SATSolver._vsids_decay(self)
sympy.algorithms.dpll2.SATSolver._vsids_init(self)
sympy.algorithms.dpll2.SATSolver._vsids_lit_assigned(self,lit)
sympy.algorithms.dpll2.SATSolver._vsids_lit_unset(self,lit)
sympy.algorithms.dpll2._all_models(models)
sympy.algorithms.dpll2.dpll_satisfiable(expr,all_models=False)
sympy.logic.algorithms.dpll2.Level(self,decision,flipped=False)
sympy.logic.algorithms.dpll2.Level.__init__(self,decision,flipped=False)
sympy.logic.algorithms.dpll2.SATSolver(self,clauses,variables,var_settings,symbols=None,heuristic='vsids',clause_learning='none',INTERVAL=500)
sympy.logic.algorithms.dpll2.SATSolver.__init__(self,clauses,variables,var_settings,symbols=None,heuristic='vsids',clause_learning='none',INTERVAL=500)
sympy.logic.algorithms.dpll2.SATSolver._assign_literal(self,lit)
sympy.logic.algorithms.dpll2.SATSolver._clause_sat(self,cls)
sympy.logic.algorithms.dpll2.SATSolver._current_level(self)
sympy.logic.algorithms.dpll2.SATSolver._find_model(self)
sympy.logic.algorithms.dpll2.SATSolver._initialize_clauses(self,clauses)
sympy.logic.algorithms.dpll2.SATSolver._initialize_variables(self,variables)
sympy.logic.algorithms.dpll2.SATSolver._is_sentinel(self,lit,cls)
sympy.logic.algorithms.dpll2.SATSolver._pure_literal(self)
sympy.logic.algorithms.dpll2.SATSolver._simple_add_learned_clause(self,cls)
sympy.logic.algorithms.dpll2.SATSolver._simple_clean_clauses(self)
sympy.logic.algorithms.dpll2.SATSolver._simple_compute_conflict(self)
sympy.logic.algorithms.dpll2.SATSolver._simplify(self)
sympy.logic.algorithms.dpll2.SATSolver._undo(self)
sympy.logic.algorithms.dpll2.SATSolver._unit_prop(self)
sympy.logic.algorithms.dpll2.SATSolver._vsids_calculate(self)
sympy.logic.algorithms.dpll2.SATSolver._vsids_clause_added(self,cls)
sympy.logic.algorithms.dpll2.SATSolver._vsids_decay(self)
sympy.logic.algorithms.dpll2.SATSolver._vsids_init(self)
sympy.logic.algorithms.dpll2.SATSolver._vsids_lit_assigned(self,lit)
sympy.logic.algorithms.dpll2.SATSolver._vsids_lit_unset(self,lit)
sympy.logic.algorithms.dpll2._all_models(models)
sympy.logic.algorithms.dpll2.dpll_satisfiable(expr,all_models=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/utilities/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/utilities/dimacs.py----------------------------------------
A:sympy.logic.utilities.dimacs.lines->f.read().split('\n')
A:sympy.logic.utilities.dimacs.pComment->re.compile('c.*')
A:sympy.logic.utilities.dimacs.pStats->re.compile('p\\s*cnf\\s*(\\d*)\\s*(\\d*)')
A:sympy.logic.utilities.dimacs.line->f.read().split('\n').pop(0)
A:sympy.logic.utilities.dimacs.m->re.compile('p\\s*cnf\\s*(\\d*)\\s*(\\d*)').match(line)
A:sympy.logic.utilities.dimacs.nums->f.read().split('\n').pop(0).rstrip('\n').split(' ')
A:sympy.logic.utilities.dimacs.num->abs(int(lit))
A:sympy.logic.utilities.dimacs.s->f.read()
sympy.logic.dimacs.load(s)
sympy.logic.load_file(location)
sympy.logic.utilities.dimacs.load(s)
sympy.logic.utilities.dimacs.load_file(location)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/tests/test_inference.py----------------------------------------
A:sympy.logic.tests.test_inference.(A, B)->symbols('A,B')
A:sympy.logic.tests.test_inference.(A, B, C)->symbols('A,B,C')
A:sympy.logic.tests.test_inference.kb->PropKB()
A:sympy.logic.tests.test_inference.(x, y)->symbols('x y')
A:sympy.logic.tests.test_inference.assumptions->sympy.Q.zero(x * y)
A:sympy.logic.tests.test_inference.facts->Implies(Q.zero(x * y), Q.zero(x) | Q.zero(y))
A:sympy.logic.tests.test_inference.result->satisfiable(Or(*X), all_models=True)
A:sympy.logic.tests.test_inference.sym->numbered_symbols()
sympy.logic.tests.test_inference.test_PropKB()
sympy.logic.tests.test_inference.test_dpll()
sympy.logic.tests.test_inference.test_dpll_satisfiable()
sympy.logic.tests.test_inference.test_entails()
sympy.logic.tests.test_inference.test_find_pure_symbol()
sympy.logic.tests.test_inference.test_find_pure_symbol_int_repr()
sympy.logic.tests.test_inference.test_literal()
sympy.logic.tests.test_inference.test_pl_true()
sympy.logic.tests.test_inference.test_pl_true_wrong_input()
sympy.logic.tests.test_inference.test_propKB_tolerant()
sympy.logic.tests.test_inference.test_satisfiable()
sympy.logic.tests.test_inference.test_satisfiable_all_models()
sympy.logic.tests.test_inference.test_satisfiable_bool()
sympy.logic.tests.test_inference.test_satisfiable_non_symbols()
sympy.logic.tests.test_inference.test_unit_clause()
sympy.logic.tests.test_inference.test_unit_clause_int_repr()
sympy.logic.tests.test_inference.test_unit_propagate()
sympy.logic.tests.test_inference.test_unit_propagate_int_repr()
sympy.logic.tests.test_inference.test_valid()
sympy.tests.test_inference.test_PropKB()
sympy.tests.test_inference.test_dpll()
sympy.tests.test_inference.test_dpll_satisfiable()
sympy.tests.test_inference.test_entails()
sympy.tests.test_inference.test_find_pure_symbol()
sympy.tests.test_inference.test_find_pure_symbol_int_repr()
sympy.tests.test_inference.test_literal()
sympy.tests.test_inference.test_pl_true()
sympy.tests.test_inference.test_pl_true_wrong_input()
sympy.tests.test_inference.test_propKB_tolerant()
sympy.tests.test_inference.test_satisfiable()
sympy.tests.test_inference.test_satisfiable_all_models()
sympy.tests.test_inference.test_satisfiable_bool()
sympy.tests.test_inference.test_satisfiable_non_symbols()
sympy.tests.test_inference.test_unit_clause()
sympy.tests.test_inference.test_unit_clause_int_repr()
sympy.tests.test_inference.test_unit_propagate()
sympy.tests.test_inference.test_unit_propagate_int_repr()
sympy.tests.test_inference.test_valid()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/tests/test_boolalg.py----------------------------------------
A:sympy.logic.tests.test_boolalg.(A, B, C, D)->symbols('A,B,C,D')
A:sympy.logic.tests.test_boolalg.ans->SOPform('xy', [[1, 0]])
A:sympy.logic.tests.test_boolalg.function1->SOPform(['x', 'z', 'y'], [[1, 0, 1], [0, 0, 1]])
A:sympy.logic.tests.test_boolalg.function2->SOPform(['a', 'b', 'c'], [[1, 0, 1], [1, 0, 0]])
A:sympy.logic.tests.test_boolalg.(A, B)->map(Boolean, symbols('A,B'))
A:sympy.logic.tests.test_boolalg.a->Boolean()
A:sympy.logic.tests.test_boolalg.(x, y, z)->symbols('x,y,z')
A:sympy.logic.tests.test_boolalg.(A, B, C)->map(Boolean, symbols('A,B,C'))
A:sympy.logic.tests.test_boolalg.x->symbols('x')
A:sympy.logic.tests.test_boolalg.(x, y)->symbols('x,y')
sympy.logic.tests.test_boolalg.test_And()
sympy.logic.tests.test_boolalg.test_Equivalent()
sympy.logic.tests.test_boolalg.test_ITE()
sympy.logic.tests.test_boolalg.test_Implies()
sympy.logic.tests.test_boolalg.test_Nand()
sympy.logic.tests.test_boolalg.test_Nor()
sympy.logic.tests.test_boolalg.test_Not()
sympy.logic.tests.test_boolalg.test_Or()
sympy.logic.tests.test_boolalg.test_Xor()
sympy.logic.tests.test_boolalg.test_and_associativity()
sympy.logic.tests.test_boolalg.test_bool_as_set()
sympy.logic.tests.test_boolalg.test_bool_map()
sympy.logic.tests.test_boolalg.test_bool_symbol()
sympy.logic.tests.test_boolalg.test_commutative()
sympy.logic.tests.test_boolalg.test_conjuncts()
sympy.logic.tests.test_boolalg.test_disjuncts()
sympy.logic.tests.test_boolalg.test_distribute()
sympy.logic.tests.test_boolalg.test_double_negation()
sympy.logic.tests.test_boolalg.test_eliminate_implications()
sympy.logic.tests.test_boolalg.test_equal()
sympy.logic.tests.test_boolalg.test_is_cnf()
sympy.logic.tests.test_boolalg.test_is_dnf()
sympy.logic.tests.test_boolalg.test_is_literal()
sympy.logic.tests.test_boolalg.test_is_nnf()
sympy.logic.tests.test_boolalg.test_multivariate_bool_as_set()
sympy.logic.tests.test_boolalg.test_operators()
sympy.logic.tests.test_boolalg.test_or_assicativity()
sympy.logic.tests.test_boolalg.test_overloading()
sympy.logic.tests.test_boolalg.test_simplification()
sympy.logic.tests.test_boolalg.test_subs()
sympy.logic.tests.test_boolalg.test_to_cnf()
sympy.logic.tests.test_boolalg.test_to_dnf()
sympy.logic.tests.test_boolalg.test_to_int_repr()
sympy.logic.tests.test_boolalg.test_to_nnf()
sympy.logic.tests.test_boolalg.test_true_false()
sympy.tests.test_boolalg.test_And()
sympy.tests.test_boolalg.test_Equivalent()
sympy.tests.test_boolalg.test_ITE()
sympy.tests.test_boolalg.test_Implies()
sympy.tests.test_boolalg.test_Nand()
sympy.tests.test_boolalg.test_Nor()
sympy.tests.test_boolalg.test_Not()
sympy.tests.test_boolalg.test_Or()
sympy.tests.test_boolalg.test_Xor()
sympy.tests.test_boolalg.test_and_associativity()
sympy.tests.test_boolalg.test_bool_as_set()
sympy.tests.test_boolalg.test_bool_map()
sympy.tests.test_boolalg.test_bool_symbol()
sympy.tests.test_boolalg.test_commutative()
sympy.tests.test_boolalg.test_conjuncts()
sympy.tests.test_boolalg.test_disjuncts()
sympy.tests.test_boolalg.test_distribute()
sympy.tests.test_boolalg.test_double_negation()
sympy.tests.test_boolalg.test_eliminate_implications()
sympy.tests.test_boolalg.test_equal()
sympy.tests.test_boolalg.test_is_cnf()
sympy.tests.test_boolalg.test_is_dnf()
sympy.tests.test_boolalg.test_is_literal()
sympy.tests.test_boolalg.test_is_nnf()
sympy.tests.test_boolalg.test_multivariate_bool_as_set()
sympy.tests.test_boolalg.test_operators()
sympy.tests.test_boolalg.test_or_assicativity()
sympy.tests.test_boolalg.test_overloading()
sympy.tests.test_boolalg.test_simplification()
sympy.tests.test_boolalg.test_subs()
sympy.tests.test_boolalg.test_to_cnf()
sympy.tests.test_boolalg.test_to_dnf()
sympy.tests.test_boolalg.test_to_int_repr()
sympy.tests.test_boolalg.test_to_nnf()
sympy.tests.test_boolalg.test_true_false()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/tests/test_dimacs.py----------------------------------------
sympy.logic.tests.test_dimacs.test_f1()
sympy.logic.tests.test_dimacs.test_f2()
sympy.logic.tests.test_dimacs.test_f3()
sympy.logic.tests.test_dimacs.test_f4()
sympy.logic.tests.test_dimacs.test_f5()
sympy.tests.test_dimacs.test_f1()
sympy.tests.test_dimacs.test_f2()
sympy.tests.test_dimacs.test_f3()
sympy.tests.test_dimacs.test_f4()
sympy.tests.test_dimacs.test_f5()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/logic/benchmarks/run-solvers.py----------------------------------------
A:sympy.logic.benchmarks.run-solvers.input_path->os.path.dirname(__file__)
A:sympy.logic.benchmarks.run-solvers.file_name->os.path.join(input_path, 'input', '%s.cnf' % test)
A:sympy.logic.benchmarks.run-solvers.theory->load_file(file_name)
A:sympy.logic.benchmarks.run-solvers.start->time.time()
A:sympy.logic.benchmarks.run-solvers.end->time.time()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/refine.py----------------------------------------
A:sympy.assumptions.refine.expr->expr.func(*args).func(*args)
A:sympy.assumptions.refine.handler->handlers_dict.get(name, None)
A:sympy.assumptions.refine.new_expr->handler(expr, assumptions)
A:sympy.assumptions.refine.(coeff, terms)->expr.func(*args).func(*args).exp.as_coeff_add()
A:sympy.assumptions.refine.terms->set(terms)
A:sympy.assumptions.refine.even_terms->set([])
A:sympy.assumptions.refine.odd_terms->set([])
A:sympy.assumptions.refine.initial_number_of_terms->len(terms)
A:sympy.assumptions.refine.(i, p)->e2.as_two_terms()
A:sympy.assumptions.refine.coeff->arg.as_coefficient(S.Pi * S.ImaginaryUnit)
sympy.assumptions.refine.refine(expr,assumptions=True)
sympy.assumptions.refine.refine_Pow(expr,assumptions)
sympy.assumptions.refine.refine_Relational(expr,assumptions)
sympy.assumptions.refine.refine_abs(expr,assumptions)
sympy.assumptions.refine.refine_exp(expr,assumptions)
sympy.refine(expr,assumptions=True)
sympy.refine_Pow(expr,assumptions)
sympy.refine_Relational(expr,assumptions)
sympy.refine_abs(expr,assumptions)
sympy.refine_exp(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/assume.py----------------------------------------
A:sympy.assumptions.assume.global_assumptions->AssumptionsContext()
A:sympy.assumptions.assume.arg->_sympify(arg)
A:sympy.assumptions.assume.obj->sympy.logic.boolalg.Boolean.__new__(cls)
A:sympy.assumptions.assume.mro->inspect.getmro(type(expr))
A:sympy.assumptions.assume.cls->get_class(handler)
A:sympy.assumptions.assume.eval->getattr(cls, subclass.__name__)
A:sympy.assumptions.assume.res->eval(expr, assumptions)
A:sympy.assumptions.assume.old_global_assumptions->AssumptionsContext().copy()
sympy.AppliedPredicate(cls,predicate,arg)
sympy.AppliedPredicate.__eq__(self,other)
sympy.AppliedPredicate.__hash__(self)
sympy.AppliedPredicate._eval_ask(self,assumptions)
sympy.AppliedPredicate.arg(self)
sympy.AppliedPredicate.args(self)
sympy.AppliedPredicate.func(self)
sympy.AppliedPredicate.sort_key(self,order=None)
sympy.AssumptionsContext(set)
sympy.AssumptionsContext.add(self,*assumptions)
sympy.Predicate(cls,name,handlers=None)
sympy.Predicate.__getnewargs__(self)
sympy.Predicate._hashable_content(self)
sympy.Predicate.add_handler(self,handler)
sympy.Predicate.eval(self,expr,assumptions=True)
sympy.Predicate.remove_handler(self,handler)
sympy.Predicate.sort_key(self,order=None)
sympy.assuming(*assumptions)
sympy.assumptions.assume.AppliedPredicate(cls,predicate,arg)
sympy.assumptions.assume.AppliedPredicate.__eq__(self,other)
sympy.assumptions.assume.AppliedPredicate.__hash__(self)
sympy.assumptions.assume.AppliedPredicate.__new__(cls,predicate,arg)
sympy.assumptions.assume.AppliedPredicate._eval_ask(self,assumptions)
sympy.assumptions.assume.AppliedPredicate.arg(self)
sympy.assumptions.assume.AppliedPredicate.args(self)
sympy.assumptions.assume.AppliedPredicate.func(self)
sympy.assumptions.assume.AppliedPredicate.sort_key(self,order=None)
sympy.assumptions.assume.AssumptionsContext(set)
sympy.assumptions.assume.AssumptionsContext.add(self,*assumptions)
sympy.assumptions.assume.Predicate(cls,name,handlers=None)
sympy.assumptions.assume.Predicate.__getnewargs__(self)
sympy.assumptions.assume.Predicate.__new__(cls,name,handlers=None)
sympy.assumptions.assume.Predicate._hashable_content(self)
sympy.assumptions.assume.Predicate.add_handler(self,handler)
sympy.assumptions.assume.Predicate.eval(self,expr,assumptions=True)
sympy.assumptions.assume.Predicate.remove_handler(self,handler)
sympy.assumptions.assume.Predicate.sort_key(self,order=None)
sympy.assumptions.assume.assuming(*assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/ask.py----------------------------------------
A:sympy.assumptions.ask.antihermitian->Predicate('antihermitian')
A:sympy.assumptions.ask.bounded->Predicate('bounded')
A:sympy.assumptions.ask.commutative->Predicate('commutative')
A:sympy.assumptions.ask.complex->Predicate('complex')
A:sympy.assumptions.ask.composite->Predicate('composite')
A:sympy.assumptions.ask.even->Predicate('even')
A:sympy.assumptions.ask.extended_real->Predicate('extended_real')
A:sympy.assumptions.ask.hermitian->Predicate('hermitian')
A:sympy.assumptions.ask.imaginary->Predicate('imaginary')
A:sympy.assumptions.ask.infinitesimal->Predicate('infinitesimal')
A:sympy.assumptions.ask.infinity->Predicate('infinity')
A:sympy.assumptions.ask.integer->Predicate('integer')
A:sympy.assumptions.ask.irrational->Predicate('irrational')
A:sympy.assumptions.ask.rational->Predicate('rational')
A:sympy.assumptions.ask.algebraic->Predicate('algebraic')
A:sympy.assumptions.ask.transcendental->Predicate('transcendental')
A:sympy.assumptions.ask.negative->Predicate('negative')
A:sympy.assumptions.ask.nonzero->Predicate('nonzero')
A:sympy.assumptions.ask.positive->Predicate('positive')
A:sympy.assumptions.ask.prime->Predicate('prime')
A:sympy.assumptions.ask.real->Predicate('real')
A:sympy.assumptions.ask.odd->Predicate('odd')
A:sympy.assumptions.ask.is_true->Predicate('is_true')
A:sympy.assumptions.ask.nonpositive->Predicate('nonpositive')
A:sympy.assumptions.ask.nonnegative->Predicate('nonnegative')
A:sympy.assumptions.ask.zero->Predicate('zero')
A:sympy.assumptions.ask.symmetric->Predicate('symmetric')
A:sympy.assumptions.ask.invertible->Predicate('invertible')
A:sympy.assumptions.ask.singular->Predicate('singular')
A:sympy.assumptions.ask.orthogonal->Predicate('orthogonal')
A:sympy.assumptions.ask.unitary->Predicate('unitary')
A:sympy.assumptions.ask.normal->Predicate('normal')
A:sympy.assumptions.ask.positive_definite->Predicate('positive_definite')
A:sympy.assumptions.ask.upper_triangular->Predicate('upper_triangular')
A:sympy.assumptions.ask.lower_triangular->Predicate('lower_triangular')
A:sympy.assumptions.ask.diagonal->Predicate('diagonal')
A:sympy.assumptions.ask.triangular->Predicate('triangular')
A:sympy.assumptions.ask.unit_triangular->Predicate('unit_triangular')
A:sympy.assumptions.ask.fullrank->Predicate('fullrank')
A:sympy.assumptions.ask.square->Predicate('square')
A:sympy.assumptions.ask.real_elements->Predicate('real_elements')
A:sympy.assumptions.ask.complex_elements->Predicate('complex_elements')
A:sympy.assumptions.ask.integer_elements->Predicate('integer_elements')
A:sympy.assumptions.ask.expr->cls(*[~arg for arg in expr.args[0].args])
A:sympy.assumptions.ask.assumptions->to_cnf(assumptions)
A:sympy.assumptions.ask.local_facts->_extract_facts(assumptions, expr)
A:sympy.assumptions.ask.res->key(expr)._eval_ask(assumptions)
A:sympy.assumptions.ask.mapping[key]->set([key])
A:sympy.assumptions.ask.fact_string->dedent('    """\n    The contents of this file are the return value of\n    ``sympy.assumptions.ask.compute_known_facts``.  Do NOT manually\n    edit this file.  Instead, run ./bin/ask_update.py.\n    """\n\n    from sympy.logic.boolalg import And, Not, Or\n    from sympy.assumptions.ask import Q\n\n    # -{ Known facts in CNF }-\n    known_facts_cnf = And(\n        %s\n    )\n\n    # -{ Known facts in compressed sets }-\n    known_facts_dict = {\n        %s\n    }\n    ')
A:sympy.assumptions.ask.cnf->to_cnf(known_facts)
A:sympy.assumptions.ask.c->LINE.join([str(a) for a in cnf.args])
A:sympy.assumptions.ask.mapping->single_fact_lookup(known_facts_keys, cnf)
A:sympy.assumptions.ask.items->sorted(mapping.items(), key=str)
A:sympy.assumptions.ask.known_facts->And(Implies(Q.real, Q.complex), Implies(Q.real, Q.hermitian), Equivalent(Q.even, Q.integer & ~Q.odd), Equivalent(Q.extended_real, Q.real | Q.infinity), Equivalent(Q.odd, Q.integer & ~Q.even), Equivalent(Q.prime, Q.integer & Q.positive & ~Q.composite), Implies(Q.integer, Q.rational), Implies(Q.rational, Q.algebraic), Implies(Q.algebraic, Q.complex), Equivalent(Q.transcendental, Q.complex & ~Q.algebraic), Implies(Q.imaginary, Q.complex & ~Q.real), Implies(Q.imaginary, Q.antihermitian), Implies(Q.antihermitian, ~Q.hermitian), Equivalent(Q.negative, Q.nonzero & ~Q.positive), Equivalent(Q.positive, Q.nonzero & ~Q.negative), Equivalent(Q.rational, Q.real & ~Q.irrational), Equivalent(Q.real, Q.rational | Q.irrational), Implies(Q.nonzero, Q.real), Equivalent(Q.nonzero, Q.positive | Q.negative), Equivalent(Q.nonpositive, ~Q.positive & Q.real), Equivalent(Q.nonnegative, ~Q.negative & Q.real), Equivalent(Q.zero, Q.real & ~Q.nonzero), Implies(Q.zero, Q.even), Implies(Q.orthogonal, Q.positive_definite), Implies(Q.orthogonal, Q.unitary), Implies(Q.unitary & Q.real, Q.orthogonal), Implies(Q.unitary, Q.normal), Implies(Q.unitary, Q.invertible), Implies(Q.normal, Q.square), Implies(Q.diagonal, Q.normal), Implies(Q.positive_definite, Q.invertible), Implies(Q.diagonal, Q.upper_triangular), Implies(Q.diagonal, Q.lower_triangular), Implies(Q.lower_triangular, Q.triangular), Implies(Q.upper_triangular, Q.triangular), Implies(Q.triangular, Q.upper_triangular | Q.lower_triangular), Implies(Q.upper_triangular & Q.lower_triangular, Q.diagonal), Implies(Q.diagonal, Q.symmetric), Implies(Q.unit_triangular, Q.triangular), Implies(Q.invertible, Q.fullrank), Implies(Q.invertible, Q.square), Implies(Q.symmetric, Q.square), Implies(Q.fullrank & Q.square, Q.invertible), Equivalent(Q.invertible, ~Q.singular), Implies(Q.integer_elements, Q.real_elements), Implies(Q.real_elements, Q.complex_elements))
sympy.Q
sympy.ask(proposition,assumptions=True,context=global_assumptions)
sympy.ask._extract_facts(expr,symbol)
sympy.ask.compute_known_facts(known_facts,known_facts_keys)
sympy.ask.single_fact_lookup(known_facts_keys,known_facts_cnf)
sympy.ask_full_inference(proposition,assumptions,known_facts_cnf)
sympy.assumptions.ask.Q
sympy.assumptions.ask._extract_facts(expr,symbol)
sympy.assumptions.ask.ask(proposition,assumptions=True,context=global_assumptions)
sympy.assumptions.ask.ask_full_inference(proposition,assumptions,known_facts_cnf)
sympy.assumptions.ask.compute_known_facts(known_facts,known_facts_keys)
sympy.assumptions.ask.register_handler(key,handler)
sympy.assumptions.ask.remove_handler(key,handler)
sympy.assumptions.ask.single_fact_lookup(known_facts_keys,known_facts_cnf)
sympy.register_handler(key,handler)
sympy.remove_handler(key,handler)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/ask_generated.py----------------------------------------
A:sympy.assumptions.ask_generated.known_facts_cnf->And(Or(Q.invertible, Q.singular), Or(Not(Q.rational), Q.algebraic), Or(Not(Q.imaginary), Q.antihermitian), Or(Not(Q.algebraic), Q.complex), Or(Not(Q.imaginary), Q.complex), Or(Not(Q.real), Q.complex), Or(Not(Q.transcendental), Q.complex), Or(Not(Q.real_elements), Q.complex_elements), Or(Not(Q.zero), Q.even), Or(Not(Q.infinity), Q.extended_real), Or(Not(Q.real), Q.extended_real), Or(Not(Q.invertible), Q.fullrank), Or(Not(Q.real), Q.hermitian), Or(Not(Q.even), Q.integer), Or(Not(Q.odd), Q.integer), Or(Not(Q.prime), Q.integer), Or(Not(Q.positive_definite), Q.invertible), Or(Not(Q.unitary), Q.invertible), Or(Not(Q.diagonal), Q.lower_triangular), Or(Not(Q.negative), Q.nonzero), Or(Not(Q.positive), Q.nonzero), Or(Not(Q.diagonal), Q.normal), Or(Not(Q.unitary), Q.normal), Or(Not(Q.prime), Q.positive), Or(Not(Q.orthogonal), Q.positive_definite), Or(Not(Q.integer), Q.rational), Or(Not(Q.irrational), Q.real), Or(Not(Q.nonnegative), Q.real), Or(Not(Q.nonpositive), Q.real), Or(Not(Q.nonzero), Q.real), Or(Not(Q.rational), Q.real), Or(Not(Q.zero), Q.real), Or(Not(Q.integer_elements), Q.real_elements), Or(Not(Q.invertible), Q.square), Or(Not(Q.normal), Q.square), Or(Not(Q.symmetric), Q.square), Or(Not(Q.diagonal), Q.symmetric), Or(Not(Q.lower_triangular), Q.triangular), Or(Not(Q.unit_triangular), Q.triangular), Or(Not(Q.upper_triangular), Q.triangular), Or(Not(Q.orthogonal), Q.unitary), Or(Not(Q.diagonal), Q.upper_triangular), Or(Not(Q.algebraic), Not(Q.transcendental)), Or(Not(Q.antihermitian), Not(Q.hermitian)), Or(Not(Q.composite), Not(Q.prime)), Or(Not(Q.even), Not(Q.odd)), Or(Not(Q.imaginary), Not(Q.real)), Or(Not(Q.invertible), Not(Q.singular)), Or(Not(Q.irrational), Not(Q.rational)), Or(Not(Q.negative), Not(Q.nonnegative)), Or(Not(Q.negative), Not(Q.positive)), Or(Not(Q.nonpositive), Not(Q.positive)), Or(Not(Q.nonzero), Not(Q.zero)), Or(Not(Q.complex), Q.algebraic, Q.transcendental), Or(Not(Q.integer), Q.even, Q.odd), Or(Not(Q.extended_real), Q.infinity, Q.real), Or(Not(Q.real), Q.irrational, Q.rational), Or(Not(Q.triangular), Q.lower_triangular, Q.upper_triangular), Or(Not(Q.real), Q.negative, Q.nonnegative), Or(Not(Q.nonzero), Q.negative, Q.positive), Or(Not(Q.real), Q.nonpositive, Q.positive), Or(Not(Q.real), Q.nonzero, Q.zero), Or(Not(Q.lower_triangular), Not(Q.upper_triangular), Q.diagonal), Or(Not(Q.fullrank), Not(Q.square), Q.invertible), Or(Not(Q.real), Not(Q.unitary), Q.orthogonal), Or(Not(Q.integer), Not(Q.positive), Q.composite, Q.prime))


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/test_context.py----------------------------------------
sympy.assumptions.tests.test_context.test_assuming()
sympy.assumptions.tests.test_context.test_assuming_nested()
sympy.assumptions.tests.test_context.test_finally()
sympy.assumptions.tests.test_context.test_remove_safe()
sympy.tests.test_context.test_assuming()
sympy.tests.test_context.test_assuming_nested()
sympy.tests.test_context.test_finally()
sympy.tests.test_context.test_remove_safe()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/test_query.py----------------------------------------
A:sympy.assumptions.tests.test_query.z->sqrt(2)
A:sympy.assumptions.tests.test_query.r->Rational(-5, 3)
A:sympy.assumptions.tests.test_query.(x, y, z)->symbols('x,y,z')
A:sympy.assumptions.tests.test_query.eq->Pow(exp(2 * pi * I * x, evaluate=False), x, evaluate=False)
A:sympy.assumptions.tests.test_query.local_context->AssumptionsContext()
A:sympy.assumptions.tests.test_query.a->MyType()
A:sympy.assumptions.tests.test_query.known_facts->And(Implies(Q.integer, Q.rational), Implies(Q.rational, Q.real), Implies(Q.real, Q.complex))
A:sympy.assumptions.tests.test_query.known_facts_keys->set([Q.integer, Q.rational, Q.real, Q.complex])
A:sympy.assumptions.tests.test_query.known_facts_cnf->to_cnf(known_facts)
A:sympy.assumptions.tests.test_query.mapping->single_fact_lookup(known_facts_keys, known_facts_cnf)
A:sympy.assumptions.tests.test_query.s->compute_known_facts(known_facts, known_facts_keys)
sympy.assumptions.tests.test_query.test_Add_queries()
sympy.assumptions.tests.test_query.test_E()
sympy.assumptions.tests.test_query.test_GoldenRatio()
sympy.assumptions.tests.test_query.test_I()
sympy.assumptions.tests.test_query.test_Rational_number()
sympy.assumptions.tests.test_query.test_algebraic()
sympy.assumptions.tests.test_query.test_bounded()
sympy.assumptions.tests.test_query.test_bounded_xfail()
sympy.assumptions.tests.test_query.test_commutative()
sympy.assumptions.tests.test_query.test_complex()
sympy.assumptions.tests.test_query.test_composite_ask()
sympy.assumptions.tests.test_query.test_composite_assumptions()
sympy.assumptions.tests.test_query.test_composite_proposition()
sympy.assumptions.tests.test_query.test_compute_known_facts()
sympy.assumptions.tests.test_query.test_custom_context()
sympy.assumptions.tests.test_query.test_even()
sympy.assumptions.tests.test_query.test_extended_real()
sympy.assumptions.tests.test_query.test_float_1()
sympy.assumptions.tests.test_query.test_functions_in_assumptions()
sympy.assumptions.tests.test_query.test_global()
sympy.assumptions.tests.test_query.test_hermitian()
sympy.assumptions.tests.test_query.test_imaginary()
sympy.assumptions.tests.test_query.test_incompatible_resolutors()
sympy.assumptions.tests.test_query.test_infinitesimal()
sympy.assumptions.tests.test_query.test_infinity()
sympy.assumptions.tests.test_query.test_int_1()
sympy.assumptions.tests.test_query.test_int_11()
sympy.assumptions.tests.test_query.test_int_12()
sympy.assumptions.tests.test_query.test_integer()
sympy.assumptions.tests.test_query.test_issue_3906()
sympy.assumptions.tests.test_query.test_issue_5421()
sympy.assumptions.tests.test_query.test_issue_5833()
sympy.assumptions.tests.test_query.test_issue_6732()
sympy.assumptions.tests.test_query.test_issue_7246()
sympy.assumptions.tests.test_query.test_issue_7246_failing()
sympy.assumptions.tests.test_query.test_key_extensibility()
sympy.assumptions.tests.test_query.test_known_facts_consistent()
sympy.assumptions.tests.test_query.test_nan()
sympy.assumptions.tests.test_query.test_neg_infinity()
sympy.assumptions.tests.test_query.test_negative()
sympy.assumptions.tests.test_query.test_negativeone()
sympy.assumptions.tests.test_query.test_nonnegative()
sympy.assumptions.tests.test_query.test_nonpositive()
sympy.assumptions.tests.test_query.test_nonzero()
sympy.assumptions.tests.test_query.test_odd()
sympy.assumptions.tests.test_query.test_pi()
sympy.assumptions.tests.test_query.test_positive()
sympy.assumptions.tests.test_query.test_positive_assuming()
sympy.assumptions.tests.test_query.test_prime()
sympy.assumptions.tests.test_query.test_rational()
sympy.assumptions.tests.test_query.test_real()
sympy.assumptions.tests.test_query.test_single_fact_lookup()
sympy.assumptions.tests.test_query.test_sqrt_2()
sympy.assumptions.tests.test_query.test_type_extensibility()
sympy.assumptions.tests.test_query.test_zero()
sympy.assumptions.tests.test_query.test_zero_0()
sympy.assumptions.tests.test_query.test_zero_doesnt_work()
sympy.tests.test_query.test_Add_queries()
sympy.tests.test_query.test_E()
sympy.tests.test_query.test_GoldenRatio()
sympy.tests.test_query.test_I()
sympy.tests.test_query.test_Rational_number()
sympy.tests.test_query.test_algebraic()
sympy.tests.test_query.test_bounded()
sympy.tests.test_query.test_bounded_xfail()
sympy.tests.test_query.test_commutative()
sympy.tests.test_query.test_complex()
sympy.tests.test_query.test_composite_ask()
sympy.tests.test_query.test_composite_assumptions()
sympy.tests.test_query.test_composite_proposition()
sympy.tests.test_query.test_compute_known_facts()
sympy.tests.test_query.test_custom_context()
sympy.tests.test_query.test_even()
sympy.tests.test_query.test_extended_real()
sympy.tests.test_query.test_float_1()
sympy.tests.test_query.test_functions_in_assumptions()
sympy.tests.test_query.test_global()
sympy.tests.test_query.test_hermitian()
sympy.tests.test_query.test_imaginary()
sympy.tests.test_query.test_incompatible_resolutors()
sympy.tests.test_query.test_infinitesimal()
sympy.tests.test_query.test_infinity()
sympy.tests.test_query.test_int_1()
sympy.tests.test_query.test_int_11()
sympy.tests.test_query.test_int_12()
sympy.tests.test_query.test_integer()
sympy.tests.test_query.test_issue_3906()
sympy.tests.test_query.test_issue_5421()
sympy.tests.test_query.test_issue_5833()
sympy.tests.test_query.test_issue_6732()
sympy.tests.test_query.test_issue_7246()
sympy.tests.test_query.test_issue_7246_failing()
sympy.tests.test_query.test_key_extensibility()
sympy.tests.test_query.test_known_facts_consistent()
sympy.tests.test_query.test_nan()
sympy.tests.test_query.test_neg_infinity()
sympy.tests.test_query.test_negative()
sympy.tests.test_query.test_negativeone()
sympy.tests.test_query.test_nonnegative()
sympy.tests.test_query.test_nonpositive()
sympy.tests.test_query.test_nonzero()
sympy.tests.test_query.test_odd()
sympy.tests.test_query.test_pi()
sympy.tests.test_query.test_positive()
sympy.tests.test_query.test_positive_assuming()
sympy.tests.test_query.test_prime()
sympy.tests.test_query.test_rational()
sympy.tests.test_query.test_real()
sympy.tests.test_query.test_single_fact_lookup()
sympy.tests.test_query.test_sqrt_2()
sympy.tests.test_query.test_type_extensibility()
sympy.tests.test_query.test_zero()
sympy.tests.test_query.test_zero_0()
sympy.tests.test_query.test_zero_doesnt_work()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/test_matrices.py----------------------------------------
A:sympy.assumptions.tests.test_matrices.X->MatrixSymbol('X', 4, 4)
A:sympy.assumptions.tests.test_matrices.Y->MatrixSymbol('Y', 4, 4)
A:sympy.assumptions.tests.test_matrices.Z->MatrixSymbol('Z', 2, 2)
A:sympy.assumptions.tests.test_matrices.B->MatrixSlice(X, (1, 3), (1, 3))
A:sympy.assumptions.tests.test_matrices.C->MatrixSlice(X, (0, 3), (1, 3))
A:sympy.assumptions.tests.test_matrices.alpha->Symbol('alpha')
sympy.assumptions.tests.test__test_orthogonal_unitary(predicate)
sympy.assumptions.tests.test_matrices._test_orthogonal_unitary(predicate)
sympy.assumptions.tests.test_matrices.test_MatrixSlice()
sympy.assumptions.tests.test_matrices.test_det_trace_positive()
sympy.assumptions.tests.test_matrices.test_diagonal()
sympy.assumptions.tests.test_matrices.test_field_assumptions()
sympy.assumptions.tests.test_matrices.test_fullrank()
sympy.assumptions.tests.test_matrices.test_invertible()
sympy.assumptions.tests.test_matrices.test_invertible_fullrank()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets_determinant_trace()
sympy.assumptions.tests.test_matrices.test_matrix_element_sets_slices_blocks()
sympy.assumptions.tests.test_matrices.test_non_atoms()
sympy.assumptions.tests.test_matrices.test_non_trivial_implies()
sympy.assumptions.tests.test_matrices.test_orthogonal()
sympy.assumptions.tests.test_matrices.test_positive_definite()
sympy.assumptions.tests.test_matrices.test_singular()
sympy.assumptions.tests.test_matrices.test_square()
sympy.assumptions.tests.test_matrices.test_symmetric()
sympy.assumptions.tests.test_matrices.test_triangular()
sympy.assumptions.tests.test_matrices.test_unitary()
sympy.assumptions.tests.test_test_MatrixSlice()
sympy.assumptions.tests.test_test_det_trace_positive()
sympy.assumptions.tests.test_test_diagonal()
sympy.assumptions.tests.test_test_field_assumptions()
sympy.assumptions.tests.test_test_fullrank()
sympy.assumptions.tests.test_test_invertible()
sympy.assumptions.tests.test_test_invertible_fullrank()
sympy.assumptions.tests.test_test_matrix_element_sets()
sympy.assumptions.tests.test_test_matrix_element_sets_determinant_trace()
sympy.assumptions.tests.test_test_matrix_element_sets_slices_blocks()
sympy.assumptions.tests.test_test_non_atoms()
sympy.assumptions.tests.test_test_non_trivial_implies()
sympy.assumptions.tests.test_test_orthogonal()
sympy.assumptions.tests.test_test_positive_definite()
sympy.assumptions.tests.test_test_singular()
sympy.assumptions.tests.test_test_square()
sympy.assumptions.tests.test_test_symmetric()
sympy.assumptions.tests.test_test_triangular()
sympy.assumptions.tests.test_test_unitary()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/test_refine.py----------------------------------------
A:sympy.assumptions.tests.test_refine.obj->MyClass(*args)
A:sympy.assumptions.tests.test_refine.x->MyClass()
sympy.assumptions.tests.test_refine.test_Abs()
sympy.assumptions.tests.test_refine.test_Piecewise()
sympy.assumptions.tests.test_refine.test_Relational()
sympy.assumptions.tests.test_refine.test_exp()
sympy.assumptions.tests.test_refine.test_func_args()
sympy.assumptions.tests.test_refine.test_pow()
sympy.tests.test_refine.test_Abs()
sympy.tests.test_refine.test_Piecewise()
sympy.tests.test_refine.test_Relational()
sympy.tests.test_refine.test_exp()
sympy.tests.test_refine.test_func_args()
sympy.tests.test_refine.test_pow()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/tests/test_assumptions_2.py----------------------------------------
A:sympy.assumptions.tests.test_assumptions_2.(a, b)->symbols('a b', cls=Predicate)
sympy.assumptions.tests.test_assumptions_2.test_composite_predicates()
sympy.assumptions.tests.test_assumptions_2.test_equal()
sympy.assumptions.tests.test_assumptions_2.test_extract_facts()
sympy.assumptions.tests.test_assumptions_2.test_global()
sympy.assumptions.tests.test_assumptions_2.test_pretty()
sympy.tests.test_assumptions_2.test_composite_predicates()
sympy.tests.test_assumptions_2.test_equal()
sympy.tests.test_assumptions_2.test_extract_facts()
sympy.tests.test_assumptions_2.test_global()
sympy.tests.test_assumptions_2.test_pretty()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/order.py----------------------------------------
A:sympy.assumptions.handlers.order.(r, i)->expr.as_real_imag()
A:sympy.assumptions.handlers.order.r->ask(Q.real(expr.args[0]), assumptions)
A:sympy.assumptions.handlers.order.i->i.evalf(2).evalf(2)
A:sympy.assumptions.handlers.order.notnegative->fuzzy_not(AskNegativeHandler._number(expr, assumptions))
A:sympy.assumptions.handlers.order.result->ask(Q.nonzero(arg), assumptions)
A:sympy.assumptions.handlers.order.NaN->staticmethod(CommonHandler.AlwaysTrue)
A:sympy.assumptions.handlers.order.notpositive->fuzzy_not(AskPositiveHandler._number(expr, assumptions))
A:sympy.assumptions.handlers.order.ImaginaryUnit->staticmethod(CommonHandler.AlwaysFalse)
sympy.assumptions.handlers.order.AskNegativeHandler(CommonHandler)
sympy.assumptions.handlers.order.AskNegativeHandler.Add(expr,assumptions)
sympy.assumptions.handlers.order.AskNegativeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskNegativeHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.order.AskNegativeHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.order.AskNegativeHandler._number(expr,assumptions)
sympy.assumptions.handlers.order.AskNegativeHandler.exp(expr,assumptions)
sympy.assumptions.handlers.order.AskNonNegativeHandler(CommonHandler)
sympy.assumptions.handlers.order.AskNonNegativeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskNonPositiveHandler(CommonHandler)
sympy.assumptions.handlers.order.AskNonPositiveHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskNonZeroHandler(CommonHandler)
sympy.assumptions.handlers.order.AskNonZeroHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.order.AskNonZeroHandler.Add(expr,assumptions)
sympy.assumptions.handlers.order.AskNonZeroHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskNonZeroHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.order.AskNonZeroHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler(CommonHandler)
sympy.assumptions.handlers.order.AskPositiveHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Add(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Determinant(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.Trace(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler._number(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.acos(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.acot(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.asin(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.atan(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.exp(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.factorial(expr,assumptions)
sympy.assumptions.handlers.order.AskPositiveHandler.log(expr,assumptions)
sympy.assumptions.handlers.order.AskZeroHandler(CommonHandler)
sympy.assumptions.handlers.order.AskZeroHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.order.AskZeroHandler.Mul(expr,assumptions)
sympy.handlers.order.AskNegativeHandler(CommonHandler)
sympy.handlers.order.AskNegativeHandler.Add(expr,assumptions)
sympy.handlers.order.AskNegativeHandler.Basic(expr,assumptions)
sympy.handlers.order.AskNegativeHandler.Mul(expr,assumptions)
sympy.handlers.order.AskNegativeHandler.Pow(expr,assumptions)
sympy.handlers.order.AskNegativeHandler._number(expr,assumptions)
sympy.handlers.order.AskNegativeHandler.exp(expr,assumptions)
sympy.handlers.order.AskNonNegativeHandler(CommonHandler)
sympy.handlers.order.AskNonNegativeHandler.Basic(expr,assumptions)
sympy.handlers.order.AskNonPositiveHandler(CommonHandler)
sympy.handlers.order.AskNonPositiveHandler.Basic(expr,assumptions)
sympy.handlers.order.AskNonZeroHandler(CommonHandler)
sympy.handlers.order.AskNonZeroHandler.Abs(expr,assumptions)
sympy.handlers.order.AskNonZeroHandler.Add(expr,assumptions)
sympy.handlers.order.AskNonZeroHandler.Basic(expr,assumptions)
sympy.handlers.order.AskNonZeroHandler.Mul(expr,assumptions)
sympy.handlers.order.AskNonZeroHandler.Pow(expr,assumptions)
sympy.handlers.order.AskPositiveHandler(CommonHandler)
sympy.handlers.order.AskPositiveHandler.Abs(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Add(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Basic(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Determinant(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.MatrixElement(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Mul(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Pow(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.Trace(expr,assumptions)
sympy.handlers.order.AskPositiveHandler._number(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.acos(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.acot(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.asin(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.atan(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.exp(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.factorial(expr,assumptions)
sympy.handlers.order.AskPositiveHandler.log(expr,assumptions)
sympy.handlers.order.AskZeroHandler(CommonHandler)
sympy.handlers.order.AskZeroHandler.Basic(expr,assumptions)
sympy.handlers.order.AskZeroHandler.Mul(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/matrices.py----------------------------------------
A:sympy.assumptions.handlers.matrices.(factor, mmul)->expr.as_coeff_mmul()
A:sympy.assumptions.handlers.matrices.Identity->staticmethod(CommonHandler.AlwaysTrue)
A:sympy.assumptions.handlers.matrices.ZeroMatrix->staticmethod(CommonHandler.AlwaysFalse)
A:sympy.assumptions.handlers.matrices.Factorization->staticmethod(partial(_Factorization, Q.diagonal))
A:sympy.assumptions.handlers.matrices.(factor, matrices)->expr.as_coeff_matrices()
A:sympy.assumptions.handlers.matrices.d->sift(expr.args, lambda x: isinstance(x, MatrixExpr))
A:sympy.assumptions.handlers.matrices.MatMul->staticmethod(partial(MatMul_elements, Q.complex_elements, Q.complex))
A:sympy.assumptions.handlers.matrices.MatrixSlice->staticmethod(partial(MS_elements, Q.complex_elements))
A:sympy.assumptions.handlers.matrices.BlockMatrix->staticmethod(partial(BM_elements, Q.complex_elements))
A:sympy.assumptions.handlers.matrices.DFT->staticmethod(CommonHandler.AlwaysTrue)
sympy.assumptions.handlers.AskComplexElementsHandler(CommonHandler)
sympy.assumptions.handlers.AskComplexElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler(CommonHandler)
sympy.assumptions.handlers.AskDiagonalHandler.DiagonalMatrix(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskDiagonalHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskFullRankHandler(CommonHandler)
sympy.assumptions.handlers.AskFullRankHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskFullRankHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskFullRankHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskIntegerElementsHandler(CommonHandler)
sympy.assumptions.handlers.AskIntegerElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskInvertibleHandler(CommonHandler)
sympy.assumptions.handlers.AskInvertibleHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskInvertibleHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskInvertibleHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskInvertibleHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskInvertibleHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler(CommonHandler)
sympy.assumptions.handlers.AskLowerTriangularHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskLowerTriangularHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskOrthogonalHandler(CommonHandler)
sympy.assumptions.handlers.AskOrthogonalHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskOrthogonalHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskOrthogonalHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskOrthogonalHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskOrthogonalHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskPositiveDefiniteHandler(CommonHandler)
sympy.assumptions.handlers.AskPositiveDefiniteHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskPositiveDefiniteHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskPositiveDefiniteHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskPositiveDefiniteHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskPositiveDefiniteHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskRealElementsHandler(CommonHandler)
sympy.assumptions.handlers.AskRealElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskSquareHandler(CommonHandler)
sympy.assumptions.handlers.AskSquareHandler.MatrixExpr(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler(CommonHandler)
sympy.assumptions.handlers.AskSymmetricHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskSymmetricHandler.ZeroMatrix(expr,assumptions)
sympy.assumptions.handlers.AskUnitaryHandler(CommonHandler)
sympy.assumptions.handlers.AskUnitaryHandler.DFT(expr,assumptions)
sympy.assumptions.handlers.AskUnitaryHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskUnitaryHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskUnitaryHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskUnitaryHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler(CommonHandler)
sympy.assumptions.handlers.AskUpperTriangularHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.AskUpperTriangularHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.BM_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.MS_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.MatMul_elements(matrix_predicate,scalar_predicate,expr,assumptions)
sympy.assumptions.handlers._Factorization(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices.AskComplexElementsHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskComplexElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.DiagonalMatrix(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskDiagonalHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskFullRankHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskFullRankHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskFullRankHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskFullRankHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskIntegerElementsHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskIntegerElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskInvertibleHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskInvertibleHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskInvertibleHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskInvertibleHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskInvertibleHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskInvertibleHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskLowerTriangularHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskOrthogonalHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskPositiveDefiniteHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskRealElementsHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskRealElementsHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSquareHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskSquareHandler.MatrixExpr(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskSymmetricHandler.ZeroMatrix(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUnitaryHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskUnitaryHandler.DFT(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUnitaryHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUnitaryHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUnitaryHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUnitaryHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler(CommonHandler)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.Inverse(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.MatAdd(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.MatMul(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.MatrixSlice(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.MatrixSymbol(expr,assumptions)
sympy.assumptions.handlers.matrices.AskUpperTriangularHandler.Transpose(expr,assumptions)
sympy.assumptions.handlers.matrices.BM_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices.MS_elements(predicate,expr,assumptions)
sympy.assumptions.handlers.matrices.MatMul_elements(matrix_predicate,scalar_predicate,expr,assumptions)
sympy.assumptions.handlers.matrices._Factorization(predicate,expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/ntheory.py----------------------------------------
A:sympy.assumptions.handlers.ntheory.i->int(expr.round())
A:sympy.assumptions.handlers.ntheory._positive->ask(Q.positive(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._integer->ask(Q.integer(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._prime->ask(Q.prime(expr), assumptions)
A:sympy.assumptions.handlers.ntheory._even->ask(Q.even(expr), assumptions)
sympy.assumptions.handlers.AskCompositeHandler(CommonHandler)
sympy.assumptions.handlers.AskCompositeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler(CommonHandler)
sympy.assumptions.handlers.AskEvenHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Float(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Integer(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.NumberSymbol(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler._number(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.im(expr,assumptions)
sympy.assumptions.handlers.AskEvenHandler.re(expr,assumptions)
sympy.assumptions.handlers.AskOddHandler(CommonHandler)
sympy.assumptions.handlers.AskOddHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler(CommonHandler)
sympy.assumptions.handlers.AskPrimeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler.Float(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler.Integer(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler.NumberSymbol(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskPrimeHandler._number(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskCompositeHandler(CommonHandler)
sympy.assumptions.handlers.ntheory.AskCompositeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler(CommonHandler)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Add(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Float(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Integer(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.NumberSymbol(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler._number(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.im(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskEvenHandler.re(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskOddHandler(CommonHandler)
sympy.assumptions.handlers.ntheory.AskOddHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler(CommonHandler)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.Float(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.Integer(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.NumberSymbol(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.ntheory.AskPrimeHandler._number(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/calculus.py----------------------------------------
A:sympy.assumptions.handlers.calculus.ImaginaryUnit->staticmethod(CommonHandler.AlwaysFalse)
A:sympy.assumptions.handlers.calculus._bounded->ask(Q.bounded(arg), assumptions)
A:sympy.assumptions.handlers.calculus.s->ask(Q.positive(arg), assumptions)
A:sympy.assumptions.handlers.calculus.base_bounded->ask(Q.bounded(expr.base), assumptions)
A:sympy.assumptions.handlers.calculus.exp_bounded->ask(Q.bounded(expr.exp), assumptions)
sympy.assumptions.handlers.AskBoundedHandler(CommonHandler)
sympy.assumptions.handlers.AskBoundedHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskBoundedHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskBoundedHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskBoundedHandler.Symbol(expr,assumptions)
sympy.assumptions.handlers.AskBoundedHandler.log(expr,assumptions)
sympy.assumptions.handlers.AskInfinitesimalHandler(CommonHandler)
sympy.assumptions.handlers.AskInfinitesimalHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskInfinitesimalHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskInfinitesimalHandler.Number(expr,assumptions)
sympy.assumptions.handlers.AskInfinitesimalHandler._number(expr,assumptions)
sympy.assumptions.handlers.calculus.AskBoundedHandler(CommonHandler)
sympy.assumptions.handlers.calculus.AskBoundedHandler.Add(expr,assumptions)
sympy.assumptions.handlers.calculus.AskBoundedHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.calculus.AskBoundedHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.calculus.AskBoundedHandler.Symbol(expr,assumptions)
sympy.assumptions.handlers.calculus.AskBoundedHandler.log(expr,assumptions)
sympy.assumptions.handlers.calculus.AskInfinitesimalHandler(CommonHandler)
sympy.assumptions.handlers.calculus.AskInfinitesimalHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.calculus.AskInfinitesimalHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.calculus.AskInfinitesimalHandler.Number(expr,assumptions)
sympy.assumptions.handlers.calculus.AskInfinitesimalHandler._number(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/common.py----------------------------------------
A:sympy.assumptions.handlers.common.assumps->conjuncts(assumptions)
A:sympy.assumptions.handlers.common.BooleanTrue->staticmethod(CommonHandler.AlwaysTrue)
A:sympy.assumptions.handlers.common.BooleanFalse->staticmethod(CommonHandler.AlwaysFalse)
A:sympy.assumptions.handlers.common.value->ask(expr.args[0], assumptions=assumptions)
A:sympy.assumptions.handlers.common.p->ask(arg, assumptions=assumptions)
A:sympy.assumptions.handlers.common.pt->ask(p, assumptions=assumptions)
A:sympy.assumptions.handlers.common.qt->ask(q, assumptions=assumptions)
sympy.assumptions.handlers.common.AskCommutativeHandler(CommonHandler)
sympy.assumptions.handlers.common.AskCommutativeHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.common.AskCommutativeHandler.Symbol(expr,assumptions)
sympy.assumptions.handlers.common.AskHandler(object)
sympy.assumptions.handlers.common.CommonHandler(AskHandler)
sympy.assumptions.handlers.common.CommonHandler.AlwaysFalse(expr,assumptions)
sympy.assumptions.handlers.common.CommonHandler.AlwaysTrue(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler(AskHandler)
sympy.assumptions.handlers.common.TautologicalHandler.And(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.AppliedPredicate(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.Equivalent(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.Implies(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.Not(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.Or(expr,assumptions)
sympy.assumptions.handlers.common.TautologicalHandler.bool(expr,assumptions)
sympy.assumptions.handlers.common.test_closed_group(expr,assumptions,key)
sympy.handlers.AskCommutativeHandler(CommonHandler)
sympy.handlers.AskCommutativeHandler.Basic(expr,assumptions)
sympy.handlers.AskCommutativeHandler.Symbol(expr,assumptions)
sympy.handlers.AskHandler(object)
sympy.handlers.CommonHandler(AskHandler)
sympy.handlers.CommonHandler.AlwaysFalse(expr,assumptions)
sympy.handlers.CommonHandler.AlwaysTrue(expr,assumptions)
sympy.handlers.TautologicalHandler(AskHandler)
sympy.handlers.TautologicalHandler.And(expr,assumptions)
sympy.handlers.TautologicalHandler.AppliedPredicate(expr,assumptions)
sympy.handlers.TautologicalHandler.Equivalent(expr,assumptions)
sympy.handlers.TautologicalHandler.Implies(expr,assumptions)
sympy.handlers.TautologicalHandler.Not(expr,assumptions)
sympy.handlers.TautologicalHandler.Or(expr,assumptions)
sympy.handlers.TautologicalHandler.bool(expr,assumptions)
sympy.handlers.test_closed_group(expr,assumptions,key)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/assumptions/handlers/sets.py----------------------------------------
A:sympy.assumptions.handlers.sets.i->expr.as_real_imag()[1].evalf(2)
A:sympy.assumptions.handlers.sets._real->ask(Q.real(expr), assumptions)
A:sympy.assumptions.handlers.sets._rational->ask(Q.rational(expr), assumptions)
A:sympy.assumptions.handlers.sets.odd->ask(Q.odd(expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.imlog->ask(Q.imaginary(C.log(expr.base)), assumptions)
A:sympy.assumptions.handlers.sets.r->expr.as_real_imag()[0].evalf(2)
A:sympy.assumptions.handlers.sets.rat->ask(Q.rational(expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.half->ask(Q.integer(2 * expr.exp), assumptions)
A:sympy.assumptions.handlers.sets.im->ask(Q.imaginary(expr.args[0]), assumptions)
A:sympy.assumptions.handlers.sets.ImaginaryUnit->staticmethod(CommonHandler.AlwaysTrue)
sympy.assumptions.handlers.AskAlgebraicHandler(CommonHandler)
sympy.assumptions.handlers.AskAlgebraicHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.Rational(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.cot(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.exp(expr,assumptions)
sympy.assumptions.handlers.AskAlgebraicHandler.log(expr,assumptions)
sympy.assumptions.handlers.AskAntiHermitianHandler(AskImaginaryHandler)
sympy.assumptions.handlers.AskAntiHermitianHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskAntiHermitianHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskAntiHermitianHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskComplexHandler(CommonHandler)
sympy.assumptions.handlers.AskComplexHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskComplexHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.AskExtendedRealHandler(AskRealHandler)
sympy.assumptions.handlers.AskExtendedRealHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskHermitianHandler(AskRealHandler)
sympy.assumptions.handlers.AskHermitianHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskHermitianHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskHermitianHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskHermitianHandler.sin(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler(CommonHandler)
sympy.assumptions.handlers.AskImaginaryHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler.Number(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler._number(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler.exp(expr,assumptions)
sympy.assumptions.handlers.AskImaginaryHandler.log(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler(CommonHandler)
sympy.assumptions.handlers.AskIntegerHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler.Float(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler.Rational(expr,assumptions)
sympy.assumptions.handlers.AskIntegerHandler._number(expr,assumptions)
sympy.assumptions.handlers.AskIrrationalHandler(CommonHandler)
sympy.assumptions.handlers.AskIrrationalHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.AskRationalHandler(CommonHandler)
sympy.assumptions.handlers.AskRationalHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskRationalHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskRationalHandler.cot(expr,assumptions)
sympy.assumptions.handlers.AskRationalHandler.exp(expr,assumptions)
sympy.assumptions.handlers.AskRationalHandler.log(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler(CommonHandler)
sympy.assumptions.handlers.AskRealHandler.Add(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler._number(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.exp(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.log(expr,assumptions)
sympy.assumptions.handlers.AskRealHandler.sin(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.Rational(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.cot(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.exp(expr,assumptions)
sympy.assumptions.handlers.sets.AskAlgebraicHandler.log(expr,assumptions)
sympy.assumptions.handlers.sets.AskAntiHermitianHandler(AskImaginaryHandler)
sympy.assumptions.handlers.sets.AskAntiHermitianHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskAntiHermitianHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskAntiHermitianHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskComplexHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskComplexHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskComplexHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.sets.AskExtendedRealHandler(AskRealHandler)
sympy.assumptions.handlers.sets.AskExtendedRealHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskHermitianHandler(AskRealHandler)
sympy.assumptions.handlers.sets.AskHermitianHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskHermitianHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskHermitianHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskHermitianHandler.sin(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskImaginaryHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler.Number(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler._number(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler.exp(expr,assumptions)
sympy.assumptions.handlers.sets.AskImaginaryHandler.log(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskIntegerHandler.Abs(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler.Float(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler.Rational(expr,assumptions)
sympy.assumptions.handlers.sets.AskIntegerHandler._number(expr,assumptions)
sympy.assumptions.handlers.sets.AskIrrationalHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskIrrationalHandler.Basic(expr,assumptions)
sympy.assumptions.handlers.sets.AskRationalHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskRationalHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskRationalHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskRationalHandler.cot(expr,assumptions)
sympy.assumptions.handlers.sets.AskRationalHandler.exp(expr,assumptions)
sympy.assumptions.handlers.sets.AskRationalHandler.log(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler(CommonHandler)
sympy.assumptions.handlers.sets.AskRealHandler.Add(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.MatrixElement(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.Mul(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.Pow(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler._number(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.exp(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.log(expr,assumptions)
sympy.assumptions.handlers.sets.AskRealHandler.sin(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/crypto/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/crypto/crypto.py----------------------------------------
A:sympy.crypto.crypto.symbols->''.join(symbols)
A:sympy.crypto.crypto.L->cycle_list(k2, n)
A:sympy.crypto.crypto.A->alphabet_of_cipher()
A:sympy.crypto.crypto.n->S((e * d - 1) // M)
A:sympy.crypto.crypto.N->len(A)
A:sympy.crypto.crypto.key0->uniq(key)
A:sympy.crypto.crypto.k->int(k)
A:sympy.crypto.crypto.C->(C - d * (b ** (p - 2) % p) * x ** m * B).expand()
A:sympy.crypto.crypto.key_inv->uniq(key).inv_mod(N)
A:sympy.crypto.crypto.P->int(P)
A:sympy.crypto.crypto.key->uniq(key)
A:sympy.crypto.crypto.tmp_cipher->flatten([x[0] for x in pairs] + [x[1] for x in pairs])
A:sympy.crypto.crypto.ct->''.join([long_key[7 * tmp_cipher[2 * i] + tmp_cipher[2 * i + 1]] for i in range(n)])
A:sympy.crypto.crypto.pairs->flatten([[long_key.index(x) // 6, long_key.index(x) % 6] for x in ct0])
A:sympy.crypto.crypto.tmp_plain->flatten([[pairs[i], pairs[n + i]] for i in range(n)])
A:sympy.crypto.crypto.pt->pt.upper().upper()
A:sympy.crypto.crypto.M->S(a * b - 1)
A:sympy.crypto.crypto.phi->totient(n)
A:sympy.crypto.crypto.d->S(B * M + b)
A:sympy.crypto.crypto.e->S(A * M + a)
A:sympy.crypto.crypto.words->mc.split('||')
A:sympy.crypto.crypto.letters->''.join(characterword).split('|')
A:sympy.crypto.crypto.word->''.join(characterword)
A:sympy.crypto.crypto.F->FF(p)
A:sympy.crypto.crypto.x->Symbol('x')
A:sympy.crypto.crypto.tot->sum(L2)
A:sympy.crypto.crypto.dC->Poly(C).degree()
A:sympy.crypto.crypto.r->randrange(2, puk[0])
A:sympy.crypto.crypto.p->nextprime(2 ** digit)
sympy.crypto.alphabet_of_cipher(symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.bifid5_square(key)
sympy.crypto.bifid6_square(key)
sympy.crypto.bifid7_square(key)
sympy.crypto.crypto.alphabet_of_cipher(symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.bifid5_square(key)
sympy.crypto.crypto.bifid6_square(key)
sympy.crypto.crypto.bifid7_square(key)
sympy.crypto.crypto.cycle_list(k,n)
sympy.crypto.crypto.decipher_bifid5(ct,key)
sympy.crypto.crypto.decipher_bifid6(ct,key)
sympy.crypto.crypto.decipher_elgamal(ct,prk)
sympy.crypto.crypto.decipher_hill(ct,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.decipher_kid_rsa(ct,prk)
sympy.crypto.crypto.decipher_rsa(ct,prk)
sympy.crypto.crypto.decipher_vigenere(ct,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.decode_morse(mc)
sympy.crypto.crypto.elgamal_private_key(digit=10)
sympy.crypto.crypto.elgamal_public_key(prk)
sympy.crypto.crypto.encipher_affine(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.encipher_bifid5(pt,key)
sympy.crypto.crypto.encipher_bifid6(pt,key)
sympy.crypto.crypto.encipher_bifid7(pt,key)
sympy.crypto.crypto.encipher_elgamal(m,puk)
sympy.crypto.crypto.encipher_hill(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.encipher_kid_rsa(pt,puk)
sympy.crypto.crypto.encipher_rsa(pt,puk)
sympy.crypto.crypto.encipher_shift(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.encipher_substitution(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.encipher_vigenere(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.crypto.encode_morse(pt)
sympy.crypto.crypto.kid_rsa_private_key(a,b,A,B)
sympy.crypto.crypto.kid_rsa_public_key(a,b,A,B)
sympy.crypto.crypto.lfsr_autocorrelation(L,P,k)
sympy.crypto.crypto.lfsr_connection_polynomial(s)
sympy.crypto.crypto.lfsr_sequence(key,fill,n)
sympy.crypto.crypto.rsa_private_key(p,q,e)
sympy.crypto.crypto.rsa_public_key(p,q,e)
sympy.crypto.cycle_list(k,n)
sympy.crypto.decipher_bifid5(ct,key)
sympy.crypto.decipher_bifid6(ct,key)
sympy.crypto.decipher_elgamal(ct,prk)
sympy.crypto.decipher_hill(ct,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.decipher_kid_rsa(ct,prk)
sympy.crypto.decipher_rsa(ct,prk)
sympy.crypto.decipher_vigenere(ct,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.decode_morse(mc)
sympy.crypto.elgamal_private_key(digit=10)
sympy.crypto.elgamal_public_key(prk)
sympy.crypto.encipher_affine(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.encipher_bifid5(pt,key)
sympy.crypto.encipher_bifid6(pt,key)
sympy.crypto.encipher_bifid7(pt,key)
sympy.crypto.encipher_elgamal(m,puk)
sympy.crypto.encipher_hill(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.encipher_kid_rsa(pt,puk)
sympy.crypto.encipher_rsa(pt,puk)
sympy.crypto.encipher_shift(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.encipher_substitution(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.encipher_vigenere(pt,key,symbols='ABCDEFGHIJKLMNOPQRSTUVWXYZ')
sympy.crypto.encode_morse(pt)
sympy.crypto.kid_rsa_private_key(a,b,A,B)
sympy.crypto.kid_rsa_public_key(a,b,A,B)
sympy.crypto.lfsr_autocorrelation(L,P,k)
sympy.crypto.lfsr_connection_polynomial(s)
sympy.crypto.lfsr_sequence(key,fill,n)
sympy.crypto.rsa_private_key(p,q,e)
sympy.crypto.rsa_public_key(p,q,e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/crypto/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/crypto/tests/test_crypto.py----------------------------------------
A:sympy.crypto.tests.test_crypto.A->alphabet_of_cipher()
A:sympy.crypto.tests.test_crypto.M->Matrix(6, 6, f)
A:sympy.crypto.tests.test_crypto.puk->rsa_public_key(5, 3, 3)
A:sympy.crypto.tests.test_crypto.prk->rsa_private_key(5, 3, 3)
A:sympy.crypto.tests.test_crypto.F->FF(2)
A:sympy.crypto.tests.test_crypto.s->lfsr_sequence([F(1), F(1)], [F(0), F(1)], 5)
A:sympy.crypto.tests.test_crypto.x->symbols('x')
A:sympy.crypto.tests.test_crypto.(a, b, _)->elgamal_private_key(digit=100)
A:sympy.crypto.tests.test_crypto.dk->elgamal_private_key(20)
A:sympy.crypto.tests.test_crypto.ek->elgamal_public_key(dk)
sympy.crypto.tests.test_crypto.test_alphabet_of_cipher()
sympy.crypto.tests.test_crypto.test_bifid5_square()
sympy.crypto.tests.test_crypto.test_bifid6_square()
sympy.crypto.tests.test_crypto.test_bifid7_square()
sympy.crypto.tests.test_crypto.test_cycle_list()
sympy.crypto.tests.test_crypto.test_decipher_bifid5()
sympy.crypto.tests.test_crypto.test_decipher_bifid6()
sympy.crypto.tests.test_crypto.test_decipher_hill()
sympy.crypto.tests.test_crypto.test_decipher_kid_rsa()
sympy.crypto.tests.test_crypto.test_decipher_rsa()
sympy.crypto.tests.test_crypto.test_decipher_vigenere()
sympy.crypto.tests.test_crypto.test_decode_morse()
sympy.crypto.tests.test_crypto.test_elgamal()
sympy.crypto.tests.test_crypto.test_elgamal_private_key()
sympy.crypto.tests.test_crypto.test_encipher_affine()
sympy.crypto.tests.test_crypto.test_encipher_bifid5()
sympy.crypto.tests.test_crypto.test_encipher_bifid6()
sympy.crypto.tests.test_crypto.test_encipher_bifid7()
sympy.crypto.tests.test_crypto.test_encipher_hill()
sympy.crypto.tests.test_crypto.test_encipher_kid_rsa()
sympy.crypto.tests.test_crypto.test_encipher_rsa()
sympy.crypto.tests.test_crypto.test_encipher_shift()
sympy.crypto.tests.test_crypto.test_encipher_substitution()
sympy.crypto.tests.test_crypto.test_encipher_vigenere()
sympy.crypto.tests.test_crypto.test_encode_morse()
sympy.crypto.tests.test_crypto.test_kid_rsa_private_key()
sympy.crypto.tests.test_crypto.test_kid_rsa_public_key()
sympy.crypto.tests.test_crypto.test_lfsr_autocorrelation()
sympy.crypto.tests.test_crypto.test_lfsr_connection_polynomial()
sympy.crypto.tests.test_crypto.test_lfsr_sequence()
sympy.crypto.tests.test_crypto.test_rsa_private_key()
sympy.crypto.tests.test_crypto.test_rsa_public_key()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/generate.py----------------------------------------
A:sympy.ntheory.generate.ar->_array('l', [0] * (b - a))
A:sympy.ntheory.generate._list->_array('l', [2, 3, 5, 7, 11, 13])
A:sympy.ntheory.generate.n->int(n)
A:sympy.ntheory.generate.newsieve->_arange(begin, n + 1)
A:sympy.ntheory.generate.i->as_int(ith)
A:sympy.ntheory.generate.a->nextprime(a)
A:sympy.ntheory.generate.b->int(ceiling(b))
A:sympy.ntheory.generate.test->int(ceiling(n))
A:sympy.ntheory.generate.(a, b)->map(int, (a, b))
A:sympy.ntheory.generate.sieve->Sieve()
A:sympy.ntheory.generate.pr->nextprime(pr)
A:sympy.ntheory.generate.p->prevprime(b)
A:sympy.ntheory.generate.nmax->int(nmax or 0)
A:sympy.ntheory.generate.hare->f(hare)
A:sympy.ntheory.generate.tortoise->f(tortoise)
sympy.Sieve
sympy.Sieve.__contains__(self,n)
sympy.Sieve.__getitem__(self,n)
sympy.Sieve.__repr__(self)
sympy.Sieve.extend(self,n)
sympy.Sieve.extend_to_no(self,i)
sympy.Sieve.primerange(self,a,b)
sympy.Sieve.search(self,n)
sympy.cycle_length(f,x0,nmax=None,values=False)
sympy.generate._arange(a,b)
sympy.nextprime(n,ith=1)
sympy.ntheory.generate.Sieve
sympy.ntheory.generate.Sieve.__contains__(self,n)
sympy.ntheory.generate.Sieve.__getitem__(self,n)
sympy.ntheory.generate.Sieve.__repr__(self)
sympy.ntheory.generate.Sieve.extend(self,n)
sympy.ntheory.generate.Sieve.extend_to_no(self,i)
sympy.ntheory.generate.Sieve.primerange(self,a,b)
sympy.ntheory.generate.Sieve.search(self,n)
sympy.ntheory.generate._arange(a,b)
sympy.ntheory.generate.cycle_length(f,x0,nmax=None,values=False)
sympy.ntheory.generate.nextprime(n,ith=1)
sympy.ntheory.generate.prevprime(n)
sympy.ntheory.generate.prime(nth)
sympy.ntheory.generate.primepi(n)
sympy.ntheory.generate.primerange(a,b)
sympy.ntheory.generate.primorial(n,nth=True)
sympy.ntheory.generate.randprime(a,b)
sympy.prevprime(n)
sympy.prime(nth)
sympy.primepi(n)
sympy.primerange(a,b)
sympy.primorial(n,nth=True)
sympy.randprime(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/residue_ntheory.py----------------------------------------
A:sympy.ntheory.residue_ntheory.factors->defaultdict(int)
A:sympy.ntheory.residue_ntheory.f->totient(p)
A:sympy.ntheory.residue_ntheory.fpx->factorint(px - 1)
A:sympy.ntheory.residue_ntheory.p->abs(as_int(p))
A:sympy.ntheory.residue_ntheory.g->primitive_root(p)
A:sympy.ntheory.residue_ntheory.s->trailing(m)
A:sympy.ntheory.residue_ntheory.d->randint(2, p - 1)
A:sympy.ntheory.residue_ntheory.r->set()
A:sympy.ntheory.residue_ntheory.A->pow(a, t, p)
A:sympy.ntheory.residue_ntheory.D->pow(d, t, p)
A:sympy.ntheory.residue_ntheory.adm->pow(adm, 2 ** (s - 1 - i), p)
A:sympy.ntheory.residue_ntheory.it->sqrt_mod_iter(a, p)
A:sympy.ntheory.residue_ntheory.inf_iters->tuple((itertools.cycle(enumerate(it)) for it in iters))
A:sympy.ntheory.residue_ntheory.num_iters->len(inf_iters)
A:sympy.ntheory.residue_ntheory.(i, cur_val[p])->next(inf_iters[p])
A:sympy.ntheory.residue_ntheory.res->_nthroot_mod1(a, pa, p, all_roots)
A:sympy.ntheory.residue_ntheory.rx->_sqrt_mod_prime_power(a, px, ex)
A:sympy.ntheory.residue_ntheory.(mm, e, s)->gf_crt1(pv, ZZ)
A:sympy.ntheory.residue_ntheory.sign->pow(a, (p - 1) // 4, p)
A:sympy.ntheory.residue_ntheory.b->pow(4 * a, (p - 5) // 8, p)
A:sympy.ntheory.residue_ntheory.rv->_sqrt_mod_prime_power(a, p, 1)
A:sympy.ntheory.residue_ntheory.res1->_sqrt_mod_prime_power(a1, p, n - r)
A:sympy.ntheory.residue_ntheory.w->pow(g, z, p)
A:sympy.ntheory.residue_ntheory.r1->pow(s, x, p)
A:sympy.ntheory.residue_ntheory.s1->pow(s, f, p)
A:sympy.ntheory.residue_ntheory.y->pow(g, f, p)
A:sympy.ntheory.residue_ntheory.h->pow(g, (p - 1) // q, p)
A:sympy.ntheory.residue_ntheory.g2->pow(g, z * t, p)
A:sympy.ntheory.residue_ntheory.(q, r)->divmod(pa, pb)
A:sympy.ntheory.residue_ntheory.c->pow(b, q, p)
A:sympy.ntheory.residue_ntheory.a->factorint(n)
sympy.is_nthpow_residue(a,n,m)
sympy.is_primitive_root(a,p)
sympy.is_quad_residue(a,p)
sympy.jacobi_symbol(m,n)
sympy.legendre_symbol(a,p)
sympy.mobius(Function)
sympy.mobius.eval(cls,n)
sympy.n_order(a,n)
sympy.ntheory.residue_ntheory._nthroot_mod1(s,q,p,all_roots)
sympy.ntheory.residue_ntheory._nthroot_mod2(s,q,p)
sympy.ntheory.residue_ntheory._primitive_root_prime_iter(p)
sympy.ntheory.residue_ntheory._product(*iters)
sympy.ntheory.residue_ntheory._sqrt_mod1(a,p,n)
sympy.ntheory.residue_ntheory._sqrt_mod_prime_power(a,p,k)
sympy.ntheory.residue_ntheory._sqrt_mod_tonelli_shanks(a,p)
sympy.ntheory.residue_ntheory.is_nthpow_residue(a,n,m)
sympy.ntheory.residue_ntheory.is_primitive_root(a,p)
sympy.ntheory.residue_ntheory.is_quad_residue(a,p)
sympy.ntheory.residue_ntheory.jacobi_symbol(m,n)
sympy.ntheory.residue_ntheory.legendre_symbol(a,p)
sympy.ntheory.residue_ntheory.mobius(Function)
sympy.ntheory.residue_ntheory.mobius.eval(cls,n)
sympy.ntheory.residue_ntheory.n_order(a,n)
sympy.ntheory.residue_ntheory.nthroot_mod(a,n,p,all_roots=False)
sympy.ntheory.residue_ntheory.primitive_root(p)
sympy.ntheory.residue_ntheory.quadratic_residues(p)
sympy.ntheory.residue_ntheory.sqrt_mod(a,p,all_roots=False)
sympy.ntheory.residue_ntheory.sqrt_mod_iter(a,p,domain=int)
sympy.nthroot_mod(a,n,p,all_roots=False)
sympy.primitive_root(p)
sympy.quadratic_residues(p)
sympy.residue__nthroot_mod1(s,q,p,all_roots)
sympy.residue__nthroot_mod2(s,q,p)
sympy.residue__primitive_root_prime_iter(p)
sympy.residue__product(*iters)
sympy.residue__sqrt_mod1(a,p,n)
sympy.residue__sqrt_mod_prime_power(a,p,k)
sympy.residue__sqrt_mod_tonelli_shanks(a,p)
sympy.sqrt_mod(a,p,all_roots=False)
sympy.sqrt_mod_iter(a,p,domain=int)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/egyptian_fraction.py----------------------------------------
A:sympy.ntheory.egyptian_fraction.(prefix, rem)->egypt_harmonic(r)
A:sympy.ntheory.egyptian_fraction.(x, y)->rem.as_numer_denom()
A:sympy.ntheory.egyptian_fraction.c->gcd(a, b)
A:sympy.ntheory.egyptian_fraction.xp->sympy.polys.ZZ.invert(int(x), int(y))
A:sympy.ntheory.egyptian_fraction.d->Integer(1)
A:sympy.ntheory.egyptian_fraction.acc->Integer(0)
sympy.egyptian_fraction(r,algorithm='Greedy')
sympy.egyptian_fraction.egypt_golomb(x,y)
sympy.egyptian_fraction.egypt_graham_jewett(x,y)
sympy.egyptian_fraction.egypt_greedy(x,y)
sympy.egyptian_fraction.egypt_harmonic(r)
sympy.egyptian_fraction.egypt_takenouchi(x,y)
sympy.ntheory.egyptian_fraction.egypt_golomb(x,y)
sympy.ntheory.egyptian_fraction.egypt_graham_jewett(x,y)
sympy.ntheory.egyptian_fraction.egypt_greedy(x,y)
sympy.ntheory.egyptian_fraction.egypt_harmonic(r)
sympy.ntheory.egyptian_fraction.egypt_takenouchi(x,y)
sympy.ntheory.egyptian_fraction.egyptian_fraction(r,algorithm='Greedy')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/bbp_pi.py----------------------------------------
A:sympy.ntheory.bbp_pi.D->_dn(n)
A:sympy.ntheory.bbp_pi.xp->int(16 ** (n - k) * 16 ** D)
sympy.bbp_pi._dn(n)
sympy.bbp_pi._series(j,n)
sympy.bbp_pi.pi_hex_digits(n)
sympy.ntheory.bbp_pi._dn(n)
sympy.ntheory.bbp_pi._series(j,n)
sympy.ntheory.bbp_pi.pi_hex_digits(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/factor_.py----------------------------------------
A:sympy.ntheory.factor_.facs->factorint(r, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose)
A:sympy.ntheory.factor_.visual->bool(visual)
A:sympy.ntheory.factor_.dat->flatten(dat)
A:sympy.ntheory.factor_.n->sympify(n)
A:sympy.ntheory.factor_.p->perfect_power(n, factor=False)
A:sympy.ntheory.factor_.like->min(multiplicity(p.p, n.p), multiplicity(p.q, n.q))
A:sympy.ntheory.factor_.cross->min(multiplicity(p.q, n.p), multiplicity(p.p, n.q))
A:sympy.ntheory.factor_.(n, rem)->divmod(n, p)
A:sympy.ntheory.factor_.(nnew, rem)->divmod(n, ppow)
A:sympy.ntheory.factor_.logn->math.log(n, 2)
A:sympy.ntheory.factor_.candidates->primerange(2 + not_square, max_possible)
A:sympy.ntheory.factor_.e->factorint(n).pop(k)
A:sympy.ntheory.factor_.(r, exact)->integer_nthroot(n, e)
A:sympy.ntheory.factor_.m->trailing(n)
A:sympy.ntheory.factor_.g->igcd(aM - 1, n)
A:sympy.ntheory.factor_.e0->primefactors(e)
A:sympy.ntheory.factor_.afactor->nextprime(afactor)
A:sympy.ntheory.factor_.prng->random.Random(seed + B)
A:sympy.ntheory.factor_.U->F(U)
A:sympy.ntheory.factor_.V->random.Random(seed + B).randint(0, n - 1)
A:sympy.ntheory.factor_.a->random.Random(seed + B).randint(2, n - 2)
A:sympy.ntheory.factor_.aM->pow(aM, pow(p, e), n)
A:sympy.ntheory.factor_.factors0->list(factors.keys())
A:sympy.ntheory.factor_.nfactors->len(factors)
A:sympy.ntheory.factor_.mm->multiplicity(d, n)
A:sympy.ntheory.factor_.factordict->factorint(n)
A:sympy.ntheory.factor_.d->factorint(k, limit=limit, use_trial=use_trial, use_rho=use_rho, use_pm1=use_pm1, verbose=verbose, visual=False)
A:sympy.ntheory.factor_.limit->int(limit)
A:sympy.ntheory.factor_.factors->factorint(n)
A:sympy.ntheory.factor_.sn->str(n)
A:sympy.ntheory.factor_.small->min(small, limit or small)
A:sympy.ntheory.factor_.(n, next_p)->_factorint_small(factors, n, small, fail_max)
A:sympy.ntheory.factor_.(b, fermat)->integer_nthroot(b2, 2)
A:sympy.ntheory.factor_.ps->sorted(factordict.keys())
A:sympy.ntheory.factor_.(n, found_trial)->_trial(factors, n, ps, verbose)
A:sympy.ntheory.factor_.high_root->max(int(math.log(high_ ** 0.7)), low, 3)
A:sympy.ntheory.factor_.c->pollard_rho(n, retries=1, max_steps=max_steps, seed=high_)
A:sympy.ntheory.factor_.(n, _)->_trial(factors, n, ps, verbose=False)
A:sympy.ntheory.factor_.rv->_antidivisors(n)
A:sympy.ntheory.factor_.(n, r)->divmod(n, modulus)
A:sympy.ntheory.factor_.k->sympify(k)
sympy.divisor_count(n,modulus=1)
sympy.divisor_sigma(Function)
sympy.divisor_sigma.eval(cls,n,k=1)
sympy.divisors(n,generator=False)
sympy.factor_._antidivisors(n)
sympy.factor_._check_termination(factors,n,limitp1,use_trial,use_rho,use_pm1,verbose)
sympy.factor_._divisors(n)
sympy.factor_._factorint_small(factors,n,limit,fail_max)
sympy.factor_._trial(factors,n,candidates,verbose=False)
sympy.factor_.antidivisor_count(n)
sympy.factor_.antidivisors(n,generator=False)
sympy.factor_.smoothness(n)
sympy.factor_.smoothness_p(n,m=-1,power=0,visual=None)
sympy.factorint(n,limit=None,use_trial=True,use_rho=True,use_pm1=True,verbose=False,visual=None)
sympy.multiplicity(p,n)
sympy.ntheory.factor_._antidivisors(n)
sympy.ntheory.factor_._check_termination(factors,n,limitp1,use_trial,use_rho,use_pm1,verbose)
sympy.ntheory.factor_._divisors(n)
sympy.ntheory.factor_._factorint_small(factors,n,limit,fail_max)
sympy.ntheory.factor_._trial(factors,n,candidates,verbose=False)
sympy.ntheory.factor_.antidivisor_count(n)
sympy.ntheory.factor_.antidivisors(n,generator=False)
sympy.ntheory.factor_.divisor_count(n,modulus=1)
sympy.ntheory.factor_.divisor_sigma(Function)
sympy.ntheory.factor_.divisor_sigma.eval(cls,n,k=1)
sympy.ntheory.factor_.divisors(n,generator=False)
sympy.ntheory.factor_.factorint(n,limit=None,use_trial=True,use_rho=True,use_pm1=True,verbose=False,visual=None)
sympy.ntheory.factor_.multiplicity(p,n)
sympy.ntheory.factor_.perfect_power(n,candidates=None,big=True,factor=True)
sympy.ntheory.factor_.pollard_pm1(n,B=10,a=2,retries=0,seed=1234)
sympy.ntheory.factor_.pollard_rho(n,s=2,a=1,retries=5,seed=1234,max_steps=None,F=None)
sympy.ntheory.factor_.primefactors(n,limit=None,verbose=False)
sympy.ntheory.factor_.smoothness(n)
sympy.ntheory.factor_.smoothness_p(n,m=-1,power=0,visual=None)
sympy.ntheory.factor_.totient(Function)
sympy.ntheory.factor_.totient.eval(cls,n)
sympy.ntheory.factor_.trailing(n)
sympy.perfect_power(n,candidates=None,big=True,factor=True)
sympy.pollard_pm1(n,B=10,a=2,retries=0,seed=1234)
sympy.pollard_rho(n,s=2,a=1,retries=5,seed=1234,max_steps=None,F=None)
sympy.primefactors(n,limit=None,verbose=False)
sympy.totient(Function)
sympy.totient.eval(cls,n)
sympy.trailing(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/primetest.py----------------------------------------
A:sympy.ntheory.primetest._pseudos->set([669094855201, 1052516956501, 2007193456621, 2744715551581, 9542968210729, 17699592963781, 19671510288601, 24983920772821, 24984938689453, 29661584268781, 37473222618541, 46856248255981, 47922612926653, 48103703944453, 49110566041153, 49752242681221, 91206655032481, 91481980096033, 119034193492321, 123645258399601, 128928036060253, 137364148720147, 150753857310253, 153131886327421, 155216912613121, 185610214763821, 224334357392701, 227752294950181, 230058334559041, 304562854940401, 306001576998253, 335788261073821, 377133492079081, 379242177424951, 389970770948461, 397319638319521, 448114903362253, 523235160050221, 628999496281621, 699349238838253, 746667678235753, 790198268451301, 794036495175661, 823820871230281, 867739535711821, 1039918661294761, 1099127938585141, 1104388025338153, 1173374598605653, 1262797719066157, 1265872947674653, 1325898212229667, 1327034517143653, 1418575746675583, 1666122072463621, 1837400535259453, 1857422490084961, 1870756820971741, 1914550540480717, 2018963273468221, 2163829000939453, 2206020317369221, 2301037384029121, 2416062055125421, 2435076500074921, 2545656135020833, 2594428516569781, 2669983768115821, 2690937050990653, 2758640869506607, 2833525461416653, 2876662942007221, 2932155806957821, 2957010595723801, 3183606449929153, 3220133449185901, 3424103775720253, 3625360152399541, 3939300299037421, 3947917710714841, 3980273496750253, 4182256679324041, 4450605887818261, 4727893739521501, 4750350311306953, 4755334362931153, 5756440863559753, 5760976603475341, 5794399356078761, 5954850603819253, 6125544931991761, 6320931714094861, 6347593619672581, 6406268028524101, 6510632945054941, 6620082224794741, 6627325072566061, 6844056606431101, 6989404981060153, 7144293947609521, 7288348593229021, 7288539837129253, 7406102904971689, 7430233301822341, 7576425305871193, 7601696719033861, 7803926845356487, 7892007967006633, 7947797946559453, 8207000460596953, 8295064717807513, 8337196000698841, 8352714234009421, 8389755717406381, 8509654470665701, 8757647355282841, 8903933671696381, 8996133652295653, 9074421465661261, 9157536631454221, 9188353522314541])
A:sympy.ntheory.primetest.b->pow(b, 2, n)
A:sympy.ntheory.primetest.n->int(n)
A:sympy.ntheory.primetest.s->trailing(n - 1)
A:sympy.ntheory.primetest.base->ZZ(base)
A:sympy.ntheory.primetest.f->factorint(b)
A:sympy.ntheory.primetest.factors->str(factors)
A:sympy.ntheory.primetest.bases->sorted(set(bases))
sympy.isprime(n)
sympy.ntheory.primetest._mr_safe(n)
sympy.ntheory.primetest._mr_safe_helper(_s)
sympy.ntheory.primetest._test(n,base,s,t)
sympy.ntheory.primetest.isprime(n)
sympy.ntheory.primetest.mr(n,bases)
sympy.primetest._mr_safe(n)
sympy.primetest._mr_safe_helper(_s)
sympy.primetest._test(n,base,s,t)
sympy.primetest.mr(n,bases)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/partitions_.py----------------------------------------
A:sympy.ntheory.partitions_.pi->mpf_pi(prec)
A:sympy.ntheory.partitions_.s->mpf_add(s, mpf_mul(a, d), prec)
A:sympy.ntheory.partitions_.j->from_int(j)
A:sympy.ntheory.partitions_.a->_a(n, q, p)
A:sympy.ntheory.partitions_.b->mpf_sub(from_int(n), from_rational(1, 24, prec), prec)
A:sympy.ntheory.partitions_.c->mpf_sqrt(b, prec)
A:sympy.ntheory.partitions_.(ch, sh)->mpf_cosh_sinh(mpf_mul(a, c), prec)
A:sympy.ntheory.partitions_.D->mpf_div(mpf_sqrt(j, prec), mpf_mul(mpf_mul(sqrt8, b), pi), prec)
A:sympy.ntheory.partitions_.E->mpf_sub(mpf_mul(a, ch), mpf_div(sh, c, prec), prec)
A:sympy.ntheory.partitions_.n->int(n)
A:sympy.ntheory.partitions_.precp->int(pbits * 1.1 + 100)
A:sympy.ntheory.partitions_.M->max(6, int(0.24 * n ** 0.5 + 4))
A:sympy.ntheory.partitions_.sq23pi->mpf_mul(mpf_sqrt(from_rational(2, 3, p), p), mpf_pi(p), p)
A:sympy.ntheory.partitions_.sqrt8->mpf_sqrt(from_int(8), p)
A:sympy.ntheory.partitions_.d->_d(n, q, p, sq23pi, sqrt8)
sympy.npartitions(n,verbose=False)
sympy.ntheory.partitions_._a(n,j,prec)
sympy.ntheory.partitions_._d(n,j,prec,sq23pi,sqrt8)
sympy.ntheory.partitions_.npartitions(n,verbose=False)
sympy.partitions_._a(n,j,prec)
sympy.partitions_._d(n,j,prec,sq23pi,sqrt8)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/multinomial.py----------------------------------------
A:sympy.ntheory.multinomial.l[0]->r.items()
A:sympy.ntheory.multinomial.d->defaultdict(int)
A:sympy.ntheory.multinomial.tt->_tuple([aa + bb for (aa, bb) in _zip(t2, t)])
A:sympy.ntheory.multinomial.mc->multinomial_coefficients(n, n)
A:sympy.ntheory.multinomial.t1->_tuple(t)
A:sympy.ntheory.multinomial.b->_tuple(filter(None, t1))
sympy.binomial_coefficients(n)
sympy.binomial_coefficients_list(n)
sympy.multinomial_coefficients(m,n)
sympy.multinomial_coefficients0(m,n,_tuple=tuple,_zip=zip)
sympy.multinomial_coefficients_iterator(m,n,_tuple=tuple)
sympy.ntheory.multinomial.binomial_coefficients(n)
sympy.ntheory.multinomial.binomial_coefficients_list(n)
sympy.ntheory.multinomial.multinomial_coefficients(m,n)
sympy.ntheory.multinomial.multinomial_coefficients0(m,n,_tuple=tuple,_zip=zip)
sympy.ntheory.multinomial.multinomial_coefficients_iterator(m,n,_tuple=tuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/modular.py----------------------------------------
A:sympy.ntheory.modular.m->list(map(as_int, m))
A:sympy.ntheory.modular.v->list(map(as_int, v))
A:sympy.ntheory.modular.result->gf_crt2(v, m, mm, e, s, ZZ)
A:sympy.ntheory.modular.mm->prod(m)
A:sympy.ntheory.modular.g->reduce(igcd, [a, b, c])
A:sympy.ntheory.modular.(inv_a, _, g)->igcdex(a, c)
A:sympy.ntheory.modular.symmetric->hint.get('symmetric', False)
A:sympy.ntheory.modular.(r, m)->list(zip(*rm))
A:sympy.ntheory.modular.rv->combine(rv, rmi)
sympy.modular.crt(m,v,symmetric=False,check=True)
sympy.modular.crt1(m)
sympy.modular.crt2(m,v,mm,e,s,symmetric=False)
sympy.modular.solve_congruence(*remainder_modulus_pairs,**hint)
sympy.modular.symmetric_residue(a,m)
sympy.ntheory.modular.crt(m,v,symmetric=False,check=True)
sympy.ntheory.modular.crt1(m)
sympy.ntheory.modular.crt2(m,v,mm,e,s,symmetric=False)
sympy.ntheory.modular.solve_congruence(*remainder_modulus_pairs,**hint)
sympy.ntheory.modular.symmetric_residue(a,m)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/continued_fraction.py----------------------------------------
A:sympy.ntheory.continued_fraction.(p, q, d)->list(map(as_int, [p, q, d]))
A:sympy.ntheory.continued_fraction.sd->sqrt(d)
A:sympy.ntheory.continued_fraction.pq[p, q]->len(terms)
A:sympy.ntheory.continued_fraction.x->Dummy('x')
A:sympy.ntheory.continued_fraction.a->Integer(0)
A:sympy.ntheory.continued_fraction.y->Dummy('y')
A:sympy.ntheory.continued_fraction.solns->solve(continued_fraction_reduce(period + [y]) - y, y)
A:sympy.ntheory.continued_fraction.i->floor(x)
sympy.continued_fraction_convergents(cf)
sympy.continued_fraction_iterator(x)
sympy.continued_fraction_periodic(p,q,d=0)
sympy.continued_fraction_reduce(cf)
sympy.ntheory.continued_fraction.continued_fraction_convergents(cf)
sympy.ntheory.continued_fraction.continued_fraction_iterator(x)
sympy.ntheory.continued_fraction.continued_fraction_periodic(p,q,d=0)
sympy.ntheory.continued_fraction.continued_fraction_reduce(cf)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/ntheory/tests/test_ntheory.py----------------------------------------
A:sympy.ntheory.tests.test_ntheory.s->sm(t)
A:sympy.ntheory.tests.test_ntheory.ps->set(s.primerange(2, 100001))
A:sympy.ntheory.tests.test_ntheory.A->list(s.primerange(i, i + j))
A:sympy.ntheory.tests.test_ntheory.B->list(primerange(i, i + j))
A:sympy.ntheory.tests.test_ntheory.p->Symbol('p', integer=True, positive=True, prime=True)
A:sympy.ntheory.tests.test_ntheory.seq->iter(seq.items())
A:sympy.ntheory.tests.test_ntheory.p1->nextprime(2 ** 17)
A:sympy.ntheory.tests.test_ntheory.p2->nextprime(2 * p1)
A:sympy.ntheory.tests.test_ntheory.p3->nextprime(p2)
A:sympy.ntheory.tests.test_ntheory.a->nextprime(2 ** 2 ** 8)
A:sympy.ntheory.tests.test_ntheory.b->nextprime(a + 2 ** 2 ** 4)
A:sympy.ntheory.tests.test_ntheory.n->nextprime(8069)
A:sympy.ntheory.tests.test_ntheory.S->set(divisors(4)).union(set(divisors(Integer(2))))
A:sympy.ntheory.tests.test_ntheory.m->fi(d, visual=True)
A:sympy.ntheory.tests.test_ntheory.k->Symbol('k', integer=True)
A:sympy.ntheory.tests.test_ntheory.it->multinomial_coefficients_iterator(7, 2)
A:sympy.ntheory.tests.test_ntheory.d->fi(n)
A:sympy.ntheory.tests.test_ntheory.v->sorted(v)
A:sympy.ntheory.tests.test_ntheory.r->random_complex_number(a=0, c=1, b=0, d=0, rational=True)
A:sympy.ntheory.tests.test_ntheory.qv->range(3, p, 4)
A:sympy.ntheory.tests.test_ntheory.res->nthroot_mod(a, q, p, True)
A:sympy.ntheory.tests.test_ntheory.x->Symbol('x', positive=True)
A:sympy.ntheory.tests.test_ntheory.i->Symbol('i', integer=True)
A:sympy.ntheory.tests.test_ntheory.(mm, e, s)->crt1(m)
A:sympy.ntheory.tests.test_ntheory.c->binomial_coefficients(n)
A:sympy.ntheory.tests.test_ntheory.mc->multinomial_coefficients(3, 3)
A:sympy.ntheory.tests.test_ntheory.forty2->factorint(42, visual=True)
A:sympy.ntheory.tests.test_ntheory.no->dict(evaluate=False)
A:sympy.ntheory.tests.test_ntheory.t->sm(n)
sympy.ntheory.tests.test_ntheory.fac_multiplicity(n,p)
sympy.ntheory.tests.test_ntheory.multiproduct(seq=(),start=1)
sympy.ntheory.tests.test_ntheory.test_antidivisor_count()
sympy.ntheory.tests.test_ntheory.test_antidivisors()
sympy.ntheory.tests.test_ntheory.test_binomial_coefficients()
sympy.ntheory.tests.test_ntheory.test_binomial_coefficients_list()
sympy.ntheory.tests.test_ntheory.test_continued_fraction()
sympy.ntheory.tests.test_ntheory.test_crt()
sympy.ntheory.tests.test_ntheory.test_divisor_count()
sympy.ntheory.tests.test_ntheory.test_divisor_sigma()
sympy.ntheory.tests.test_ntheory.test_divisors()
sympy.ntheory.tests.test_ntheory.test_divisors_and_divisor_count()
sympy.ntheory.tests.test_ntheory.test_egyptian_fraction()
sympy.ntheory.tests.test_ntheory.test_factorint()
sympy.ntheory.tests.test_ntheory.test_generate()
sympy.ntheory.tests.test_ntheory.test_hex_pi_nth_digits()
sympy.ntheory.tests.test_ntheory.test_isprime()
sympy.ntheory.tests.test_ntheory.test_issue_4356()
sympy.ntheory.tests.test_ntheory.test_issue_6981()
sympy.ntheory.tests.test_ntheory.test_modular()
sympy.ntheory.tests.test_ntheory.test_multinomial_coefficients()
sympy.ntheory.tests.test_ntheory.test_multiplicity()
sympy.ntheory.tests.test_ntheory.test_partitions()
sympy.ntheory.tests.test_ntheory.test_perfect_power()
sympy.ntheory.tests.test_ntheory.test_prime()
sympy.ntheory.tests.test_ntheory.test_primepi()
sympy.ntheory.tests.test_ntheory.test_primorial()
sympy.ntheory.tests.test_ntheory.test_randprime()
sympy.ntheory.tests.test_ntheory.test_residue()
sympy.ntheory.tests.test_ntheory.test_search()
sympy.ntheory.tests.test_ntheory.test_sieve_slice()
sympy.ntheory.tests.test_ntheory.test_smoothness_and_smoothness_p()
sympy.ntheory.tests.test_ntheory.test_totient()
sympy.ntheory.tests.test_ntheory.test_trailing()
sympy.ntheory.tests.test_ntheory.test_visual_factorint()
sympy.ntheory.tests.test_ntheory.test_visual_io()
sympy.tests.test_fac_multiplicity(n,p)
sympy.tests.test_multiproduct(seq=(),start=1)
sympy.tests.test_test_antidivisor_count()
sympy.tests.test_test_antidivisors()
sympy.tests.test_test_binomial_coefficients()
sympy.tests.test_test_binomial_coefficients_list()
sympy.tests.test_test_continued_fraction()
sympy.tests.test_test_crt()
sympy.tests.test_test_divisor_count()
sympy.tests.test_test_divisor_sigma()
sympy.tests.test_test_divisors()
sympy.tests.test_test_divisors_and_divisor_count()
sympy.tests.test_test_egyptian_fraction()
sympy.tests.test_test_factorint()
sympy.tests.test_test_generate()
sympy.tests.test_test_hex_pi_nth_digits()
sympy.tests.test_test_isprime()
sympy.tests.test_test_issue_4356()
sympy.tests.test_test_issue_6981()
sympy.tests.test_test_modular()
sympy.tests.test_test_multinomial_coefficients()
sympy.tests.test_test_multiplicity()
sympy.tests.test_test_partitions()
sympy.tests.test_test_perfect_power()
sympy.tests.test_test_prime()
sympy.tests.test_test_primepi()
sympy.tests.test_test_primorial()
sympy.tests.test_test_randprime()
sympy.tests.test_test_residue()
sympy.tests.test_test_search()
sympy.tests.test_test_sieve_slice()
sympy.tests.test_test_smoothness_and_smoothness_p()
sympy.tests.test_test_totient()
sympy.tests.test_test_trailing()
sympy.tests.test_test_visual_factorint()
sympy.tests.test_test_visual_io()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/epathtools.py----------------------------------------
A:sympy.simplify.epathtools.selector->selector.strip().strip()
A:sympy.simplify.epathtools.element->element.strip().strip()
A:sympy.simplify.epathtools.i->selector.strip().strip().index(']')
A:sympy.simplify.epathtools.span->slice(*span)
A:sympy.simplify.epathtools.obj->object.__new__(cls)
A:sympy.simplify.epathtools.args->self._get_ordered_args(expr)
A:sympy.simplify.epathtools.indices->xrange(len(args))
A:sympy.simplify.epathtools.args[i]->_apply(path, arg, func)
A:sympy.simplify.epathtools._epath->EPath(path)
sympy.EPath(cls,path)
sympy.EPath.__repr__(self)
sympy.EPath._get_ordered_args(self,expr)
sympy.EPath._has(self,expr,attrs,types)
sympy.EPath._hasattrs(self,expr,attrs)
sympy.EPath._hastypes(self,expr,types)
sympy.EPath.apply(self,expr,func,args=None,kwargs=None)
sympy.EPath.select(self,expr)
sympy.epath(path,expr=None,func=None,args=None,kwargs=None)
sympy.simplify.epathtools.EPath(cls,path)
sympy.simplify.epathtools.EPath.__new__(cls,path)
sympy.simplify.epathtools.EPath.__repr__(self)
sympy.simplify.epathtools.EPath._get_ordered_args(self,expr)
sympy.simplify.epathtools.EPath._has(self,expr,attrs,types)
sympy.simplify.epathtools.EPath._hasattrs(self,expr,attrs)
sympy.simplify.epathtools.EPath._hastypes(self,expr,types)
sympy.simplify.epathtools.EPath.apply(self,expr,func,args=None,kwargs=None)
sympy.simplify.epathtools.EPath.select(self,expr)
sympy.simplify.epathtools.epath(path,expr=None,func=None,args=None,kwargs=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/hyperexpand.py----------------------------------------
A:sympy.simplify.hyperexpand.(c, x)->x.as_coeff_Add()
A:sympy.simplify.hyperexpand.(a, b, c, z)->list(map(Dummy, 'abcz'))
A:sympy.simplify.hyperexpand.func->G_Function(an, bm, ap, bq)
A:sympy.simplify.hyperexpand.rho->Dummy('rho')
A:sympy.simplify.hyperexpand.s->Dummy('s')
A:sympy.simplify.hyperexpand.c_->cos(2 * sqrt(z))
A:sympy.simplify.hyperexpand.C->C.applyfunc(make_simp(z)).applyfunc(make_simp(z))
A:sympy.simplify.hyperexpand.(numer, denom)->arg.as_numer_denom()
A:sympy.simplify.hyperexpand.(c, numer, denom)->poly(numer, z).cancel(poly(denom, z))
A:sympy.simplify.hyperexpand.obj->super(G_Function, cls).__new__(cls)
A:sympy.simplify.hyperexpand.obj.ap->Tuple(*list(map(expand, ap)))
A:sympy.simplify.hyperexpand.obj.bq->Tuple(*list(map(expand, bq)))
A:sympy.simplify.hyperexpand.bucket->tuple([(mod, len(values)) for (mod, values) in bucket if values])
A:sympy.simplify.hyperexpand.l1->list(bucket[mod])
A:sympy.simplify.hyperexpand.l2->list(obucket[mod])
A:sympy.simplify.hyperexpand.obj.an->Tuple(*list(map(expand, an)))
A:sympy.simplify.hyperexpand.obj.bm->Tuple(*list(map(expand, bm)))
A:sympy.simplify.hyperexpand._x->Dummy('x')
A:sympy.simplify.hyperexpand.poly->Poly(expr, _x)
A:sympy.simplify.hyperexpand.self.B->Matrix(b)
A:sympy.simplify.hyperexpand.self.C->Matrix([[1] + [0] * n])
A:sympy.simplify.hyperexpand.m->func(z)
A:sympy.simplify.hyperexpand.self.M->func(z).row_insert(n, -Matrix([l]) / poly.all_coeffs()[0])
A:sympy.simplify.hyperexpand.z->Dummy('z')
A:sympy.simplify.hyperexpand.res->S(0)
A:sympy.simplify.hyperexpand._n->Dummy()
A:sympy.simplify.hyperexpand.repl0->repl.copy()
A:sympy.simplify.hyperexpand.(n0,)->solve(expr.xreplace(repl0) - target, _n)
A:sympy.simplify.hyperexpand.min_->floor(min(vals))
A:sympy.simplify.hyperexpand.max_->ceiling(max(vals))
A:sympy.simplify.hyperexpand.inv->G_Function(an, bm, ap, bq).build_invariants()
A:sympy.simplify.hyperexpand.repls->sympify(f).find_instantiations(func)
A:sympy.simplify.hyperexpand.func2->sympify(f).func.xreplace(repl)
A:sympy.simplify.hyperexpand.diff->sympify(f).func.xreplace(repl).difficulty(func)
A:sympy.simplify.hyperexpand.f2->Formula(func2, f.z, None, [], f.B.subs(repl), f.C.subs(repl), f.M.subs(repl))
A:sympy.simplify.hyperexpand.self.func->G_Function(an, ap, bm, bq)
A:sympy.simplify.hyperexpand.self.formulae->dict(self.formulae)
A:sympy.simplify.hyperexpand.coeffs->Operator.__new__(cls)._poly.all_coeffs()
A:sympy.simplify.hyperexpand.self._poly->Poly(p, _x)
A:sympy.simplify.hyperexpand.ai->sympify(ai)
A:sympy.simplify.hyperexpand.bi->sympify(bi)
A:sympy.simplify.hyperexpand.(ap, bq, i)->list(map(sympify, [ap, bq, i]))
A:sympy.simplify.hyperexpand.ap->list(ap)
A:sympy.simplify.hyperexpand.bq->list(func.bq[:])
A:sympy.simplify.hyperexpand.A->Dummy('A')
A:sympy.simplify.hyperexpand.nD->Poly(ai * A - ai, A)
A:sympy.simplify.hyperexpand.n->len(B)
A:sympy.simplify.hyperexpand.B->Matrix(basis)
A:sympy.simplify.hyperexpand.D->Poly(ai - 1 - B, B)
A:sympy.simplify.hyperexpand.b0->len(B).nth(0)
A:sympy.simplify.hyperexpand.(an, ap, bm, bq, i)->list(map(sympify, [an, ap, bm, bq, i]))
A:sympy.simplify.hyperexpand.an->list(an)
A:sympy.simplify.hyperexpand.bm->list(bm)
A:sympy.simplify.hyperexpand.bj->sympify(bj)
A:sympy.simplify.hyperexpand.self->Operator.__new__(cls)
A:sympy.simplify.hyperexpand.p->simplify(p).subs(z0, z)
A:sympy.simplify.hyperexpand.b->sympify(b)
A:sympy.simplify.hyperexpand.a->sympify(a)
A:sympy.simplify.hyperexpand.self._b->Add(1, a - 1, evaluate=False)
A:sympy.simplify.hyperexpand.self._a->Add(1, b - 1, evaluate=False)
A:sympy.simplify.hyperexpand.op->try_shift(fbq, to.bq, lambda i: MeijerShiftC(fbq[i]), 1, [])
A:sympy.simplify.hyperexpand.(nap, nbq, operators)->_reduce_order(func.ap, func.bq, ReduceOrder, default_sort_key)
A:sympy.simplify.hyperexpand.(nan, nbq, ops1)->_reduce_order(func.an, func.bq, ReduceOrder.meijer_plus, lambda x: default_sort_key(-x))
A:sympy.simplify.hyperexpand.(nbm, nap, ops2)->_reduce_order(func.bm, func.ap, ReduceOrder.meijer_minus, default_sort_key)
A:sympy.simplify.hyperexpand.r->_meijergexpand(G_Function(ap[0], ap[1], bq[0], bq[1]), z, allow_hyper, rewrite=rewrite)
A:sympy.simplify.hyperexpand.aother->others(nabuckets, r)
A:sympy.simplify.hyperexpand.bother->others(nbbuckets, r)
A:sympy.simplify.hyperexpand.l->len(pap[i])
A:sympy.simplify.hyperexpand.nap->list(func.ap)
A:sympy.simplify.hyperexpand.nbq->list(func.bq)
A:sympy.simplify.hyperexpand.t->Dummy('t')
A:sympy.simplify.hyperexpand.numer->S(1)
A:sympy.simplify.hyperexpand.denom->S(1)
A:sympy.simplify.hyperexpand.part->apart(numer / denom, t)
A:sympy.simplify.hyperexpand.args->sympy.core.Add.make_args(part)
A:sympy.simplify.hyperexpand.((b,), a)->simplify(p).subs(z0, z).LT()
A:sympy.simplify.hyperexpand.(indep, [dep])->S(1).as_coeff_mul(t)
A:sympy.simplify.hyperexpand.(a, tmp)->dep.as_independent(t)
A:sympy.simplify.hyperexpand.(b, _)->tmp.as_independent(t)
A:sympy.simplify.hyperexpand.C[trans[b]]->Add(*c)
A:sympy.simplify.hyperexpand.M->zeros(n)
A:sympy.simplify.hyperexpand._collection->FormulaCollection()
A:sympy.simplify.hyperexpand.(func, ops)->reduce_order_meijer(func)
A:sympy.simplify.hyperexpand.f->sympify(f)
A:sympy.simplify.hyperexpand.formula->build_hypergeometric_formula(func)
A:sympy.simplify.hyperexpand.sh->shifter(idx)
A:sympy.simplify.hyperexpand.fan->list(fro.an)
A:sympy.simplify.hyperexpand.fap->list(fro.ap)
A:sympy.simplify.hyperexpand.fbm->list(fro.bm)
A:sympy.simplify.hyperexpand.fbq->list(fro.bq)
A:sympy.simplify.hyperexpand._meijercollection->MeijerFormulaCollection()
A:sympy.simplify.hyperexpand.(_, pbm, pap, _)->G_Function(an, bm, ap, bq).compute_buckets()
A:sympy.simplify.hyperexpand.bo->list(bm)
A:sympy.simplify.hyperexpand.k->polar_lift(S(-1) ** (len(ao) + len(bo) + 1))
A:sympy.simplify.hyperexpand.hyp->_hyperexpand(Hyper_Function(nap, nbq), harg, ops, t, premult, au, rewrite=None)
A:sympy.simplify.hyperexpand.u->len(ki)
A:sympy.simplify.hyperexpand.ao->list(ap)
A:sympy.simplify.hyperexpand.integrand->expand_func(integrand)
A:sympy.simplify.hyperexpand.resid->apply_operators(resid, ops, lambda f: z * f.diff(z))
A:sympy.simplify.hyperexpand.(slater1, cond1)->do_slater(func.an, func.bm, func.ap, func.bq, z, z0)
A:sympy.simplify.hyperexpand.op._poly->Poly(op._poly.subs({z: 1 / t, _x: -_x}), _x)
A:sympy.simplify.hyperexpand.(slater2, cond2)->do_slater(tr(func.bm), tr(func.an), tr(func.bq), tr(func.ap), t, 1 / z0)
A:sympy.simplify.hyperexpand.slater1->slater1.rewrite(rewrite or 'nonrepsmall').rewrite(rewrite or 'nonrepsmall')
A:sympy.simplify.hyperexpand.slater2->slater2.rewrite(rewrite or 'nonrepsmall').rewrite(rewrite or 'nonrepsmall')
A:sympy.simplify.hyperexpand.cond2->cond2.subs(z, z0).subs(z, z0)
A:sympy.simplify.hyperexpand.cond1->cond1.subs(z, z0).subs(z, z0)
A:sympy.simplify.hyperexpand.w1->weight(slater1, cond1)
A:sympy.simplify.hyperexpand.w2->weight(slater2, cond2)
sympy.hyperexpand(f,allow_hyper=False,rewrite='default')
sympy.hyperexpand.Formula(self,func,z,res,symbols,B=None,C=None,M=None)
sympy.hyperexpand.Formula._compute_basis(self,closed_form)
sympy.hyperexpand.Formula.closed_form(self)
sympy.hyperexpand.Formula.find_instantiations(self,func)
sympy.hyperexpand.FormulaCollection(self)
sympy.hyperexpand.FormulaCollection.lookup_origin(self,func)
sympy.hyperexpand.G_Function(cls,an,ap,bm,bq)
sympy.hyperexpand.G_Function._hashable_content(self)
sympy.hyperexpand.G_Function.args(self)
sympy.hyperexpand.G_Function.compute_buckets(self)
sympy.hyperexpand.G_Function.signature(self)
sympy.hyperexpand.Hyper_Function(cls,ap,bq)
sympy.hyperexpand.Hyper_Function._hashable_content(self)
sympy.hyperexpand.Hyper_Function._is_suitable_origin(self)
sympy.hyperexpand.Hyper_Function.args(self)
sympy.hyperexpand.Hyper_Function.build_invariants(self)
sympy.hyperexpand.Hyper_Function.difficulty(self,func)
sympy.hyperexpand.Hyper_Function.gamma(self)
sympy.hyperexpand.Hyper_Function.sizes(self)
sympy.hyperexpand.MeijerFormula(self,an,ap,bm,bq,z,symbols,B,C,M,matcher)
sympy.hyperexpand.MeijerFormula.closed_form(self)
sympy.hyperexpand.MeijerFormula.try_instantiate(self,func)
sympy.hyperexpand.MeijerFormulaCollection(self)
sympy.hyperexpand.MeijerFormulaCollection.lookup_origin(self,func)
sympy.hyperexpand.MeijerShiftA(self,bi)
sympy.hyperexpand.MeijerShiftA.__str__(self)
sympy.hyperexpand.MeijerShiftB(self,bi)
sympy.hyperexpand.MeijerShiftB.__str__(self)
sympy.hyperexpand.MeijerShiftC(self,bi)
sympy.hyperexpand.MeijerShiftC.__str__(self)
sympy.hyperexpand.MeijerShiftD(self,bi)
sympy.hyperexpand.MeijerShiftD.__str__(self)
sympy.hyperexpand.MeijerUnShiftA(self,an,ap,bm,bq,i,z)
sympy.hyperexpand.MeijerUnShiftA.__str__(self)
sympy.hyperexpand.MeijerUnShiftB(self,an,ap,bm,bq,i,z)
sympy.hyperexpand.MeijerUnShiftB.__str__(self)
sympy.hyperexpand.MeijerUnShiftC(self,an,ap,bm,bq,i,z)
sympy.hyperexpand.MeijerUnShiftC.__str__(self)
sympy.hyperexpand.MeijerUnShiftD(self,an,ap,bm,bq,i,z)
sympy.hyperexpand.MeijerUnShiftD.__str__(self)
sympy.hyperexpand.MultOperator(self,p)
sympy.hyperexpand.Operator(object)
sympy.hyperexpand.Operator.apply(self,obj,op)
sympy.hyperexpand.ReduceOrder(cls,ai,bj)
sympy.hyperexpand.ReduceOrder.__str__(self)
sympy.hyperexpand.ReduceOrder._meijer(cls,b,a,sign)
sympy.hyperexpand.ReduceOrder.meijer_minus(cls,b,a)
sympy.hyperexpand.ReduceOrder.meijer_plus(cls,a,b)
sympy.hyperexpand.ShiftA(self,ai)
sympy.hyperexpand.ShiftA.__str__(self)
sympy.hyperexpand.ShiftB(self,bi)
sympy.hyperexpand.ShiftB.__str__(self)
sympy.hyperexpand.UnShiftA(self,ap,bq,i,z)
sympy.hyperexpand.UnShiftA.__str__(self)
sympy.hyperexpand.UnShiftB(self,ap,bq,i,z)
sympy.hyperexpand.UnShiftB.__str__(self)
sympy.hyperexpand._hyperexpand(func,z,ops0=[],z0=Dummy('z0'),premult=1,prem=0,rewrite='default')
sympy.hyperexpand._meijergexpand(func,z0,allow_hyper=False,rewrite='default')
sympy.hyperexpand._mod1(x)
sympy.hyperexpand._reduce_order(ap,bq,gen,key)
sympy.hyperexpand.add_formulae(formulae)
sympy.hyperexpand.add_meijerg_formulae(formulae)
sympy.hyperexpand.apply_operators(obj,ops,op)
sympy.hyperexpand.build_hypergeometric_formula(func)
sympy.hyperexpand.debug(*args)
sympy.hyperexpand.devise_plan(target,origin,z)
sympy.hyperexpand.devise_plan_meijer(fro,to,z)
sympy.hyperexpand.make_derivative_operator(M,z)
sympy.hyperexpand.make_simp(z)
sympy.hyperexpand.reduce_order(func)
sympy.hyperexpand.reduce_order_meijer(func)
sympy.hyperexpand.try_lerchphi(func)
sympy.hyperexpand.try_polynomial(func,z)
sympy.hyperexpand.try_shifted_sum(func,z)
sympy.hyperexpand_special(ap,bq,z)
sympy.simplify.hyperexpand.Formula(self,func,z,res,symbols,B=None,C=None,M=None)
sympy.simplify.hyperexpand.Formula.__init__(self,func,z,res,symbols,B=None,C=None,M=None)
sympy.simplify.hyperexpand.Formula._compute_basis(self,closed_form)
sympy.simplify.hyperexpand.Formula.closed_form(self)
sympy.simplify.hyperexpand.Formula.find_instantiations(self,func)
sympy.simplify.hyperexpand.FormulaCollection(self)
sympy.simplify.hyperexpand.FormulaCollection.__init__(self)
sympy.simplify.hyperexpand.FormulaCollection.lookup_origin(self,func)
sympy.simplify.hyperexpand.G_Function(cls,an,ap,bm,bq)
sympy.simplify.hyperexpand.G_Function.__new__(cls,an,ap,bm,bq)
sympy.simplify.hyperexpand.G_Function._hashable_content(self)
sympy.simplify.hyperexpand.G_Function.args(self)
sympy.simplify.hyperexpand.G_Function.compute_buckets(self)
sympy.simplify.hyperexpand.G_Function.signature(self)
sympy.simplify.hyperexpand.Hyper_Function(cls,ap,bq)
sympy.simplify.hyperexpand.Hyper_Function.__new__(cls,ap,bq)
sympy.simplify.hyperexpand.Hyper_Function._hashable_content(self)
sympy.simplify.hyperexpand.Hyper_Function._is_suitable_origin(self)
sympy.simplify.hyperexpand.Hyper_Function.args(self)
sympy.simplify.hyperexpand.Hyper_Function.build_invariants(self)
sympy.simplify.hyperexpand.Hyper_Function.difficulty(self,func)
sympy.simplify.hyperexpand.Hyper_Function.gamma(self)
sympy.simplify.hyperexpand.Hyper_Function.sizes(self)
sympy.simplify.hyperexpand.MeijerFormula(self,an,ap,bm,bq,z,symbols,B,C,M,matcher)
sympy.simplify.hyperexpand.MeijerFormula.__init__(self,an,ap,bm,bq,z,symbols,B,C,M,matcher)
sympy.simplify.hyperexpand.MeijerFormula.closed_form(self)
sympy.simplify.hyperexpand.MeijerFormula.try_instantiate(self,func)
sympy.simplify.hyperexpand.MeijerFormulaCollection(self)
sympy.simplify.hyperexpand.MeijerFormulaCollection.__init__(self)
sympy.simplify.hyperexpand.MeijerFormulaCollection.lookup_origin(self,func)
sympy.simplify.hyperexpand.MeijerShiftA(self,bi)
sympy.simplify.hyperexpand.MeijerShiftA.__init__(self,bi)
sympy.simplify.hyperexpand.MeijerShiftA.__str__(self)
sympy.simplify.hyperexpand.MeijerShiftB(self,bi)
sympy.simplify.hyperexpand.MeijerShiftB.__init__(self,bi)
sympy.simplify.hyperexpand.MeijerShiftB.__str__(self)
sympy.simplify.hyperexpand.MeijerShiftC(self,bi)
sympy.simplify.hyperexpand.MeijerShiftC.__init__(self,bi)
sympy.simplify.hyperexpand.MeijerShiftC.__str__(self)
sympy.simplify.hyperexpand.MeijerShiftD(self,bi)
sympy.simplify.hyperexpand.MeijerShiftD.__init__(self,bi)
sympy.simplify.hyperexpand.MeijerShiftD.__str__(self)
sympy.simplify.hyperexpand.MeijerUnShiftA(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftA.__init__(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftA.__str__(self)
sympy.simplify.hyperexpand.MeijerUnShiftB(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftB.__init__(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftB.__str__(self)
sympy.simplify.hyperexpand.MeijerUnShiftC(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftC.__init__(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftC.__str__(self)
sympy.simplify.hyperexpand.MeijerUnShiftD(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftD.__init__(self,an,ap,bm,bq,i,z)
sympy.simplify.hyperexpand.MeijerUnShiftD.__str__(self)
sympy.simplify.hyperexpand.MultOperator(self,p)
sympy.simplify.hyperexpand.MultOperator.__init__(self,p)
sympy.simplify.hyperexpand.Operator(object)
sympy.simplify.hyperexpand.Operator.apply(self,obj,op)
sympy.simplify.hyperexpand.ReduceOrder(cls,ai,bj)
sympy.simplify.hyperexpand.ReduceOrder.__new__(cls,ai,bj)
sympy.simplify.hyperexpand.ReduceOrder.__str__(self)
sympy.simplify.hyperexpand.ReduceOrder._meijer(cls,b,a,sign)
sympy.simplify.hyperexpand.ReduceOrder.meijer_minus(cls,b,a)
sympy.simplify.hyperexpand.ReduceOrder.meijer_plus(cls,a,b)
sympy.simplify.hyperexpand.ShiftA(self,ai)
sympy.simplify.hyperexpand.ShiftA.__init__(self,ai)
sympy.simplify.hyperexpand.ShiftA.__str__(self)
sympy.simplify.hyperexpand.ShiftB(self,bi)
sympy.simplify.hyperexpand.ShiftB.__init__(self,bi)
sympy.simplify.hyperexpand.ShiftB.__str__(self)
sympy.simplify.hyperexpand.UnShiftA(self,ap,bq,i,z)
sympy.simplify.hyperexpand.UnShiftA.__init__(self,ap,bq,i,z)
sympy.simplify.hyperexpand.UnShiftA.__str__(self)
sympy.simplify.hyperexpand.UnShiftB(self,ap,bq,i,z)
sympy.simplify.hyperexpand.UnShiftB.__init__(self,ap,bq,i,z)
sympy.simplify.hyperexpand.UnShiftB.__str__(self)
sympy.simplify.hyperexpand._hyperexpand(func,z,ops0=[],z0=Dummy('z0'),premult=1,prem=0,rewrite='default')
sympy.simplify.hyperexpand._meijergexpand(func,z0,allow_hyper=False,rewrite='default')
sympy.simplify.hyperexpand._mod1(x)
sympy.simplify.hyperexpand._reduce_order(ap,bq,gen,key)
sympy.simplify.hyperexpand.add_formulae(formulae)
sympy.simplify.hyperexpand.add_meijerg_formulae(formulae)
sympy.simplify.hyperexpand.apply_operators(obj,ops,op)
sympy.simplify.hyperexpand.build_hypergeometric_formula(func)
sympy.simplify.hyperexpand.debug(*args)
sympy.simplify.hyperexpand.devise_plan(target,origin,z)
sympy.simplify.hyperexpand.devise_plan_meijer(fro,to,z)
sympy.simplify.hyperexpand.hyperexpand(f,allow_hyper=False,rewrite='default')
sympy.simplify.hyperexpand.hyperexpand_special(ap,bq,z)
sympy.simplify.hyperexpand.make_derivative_operator(M,z)
sympy.simplify.hyperexpand.make_simp(z)
sympy.simplify.hyperexpand.reduce_order(func)
sympy.simplify.hyperexpand.reduce_order_meijer(func)
sympy.simplify.hyperexpand.try_lerchphi(func)
sympy.simplify.hyperexpand.try_polynomial(func,z)
sympy.simplify.hyperexpand.try_shifted_sum(func,z)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/sqrtdenest.py----------------------------------------
A:sympy.simplify.sqrtdenest.b->Add(*b1)
A:sympy.simplify.sqrtdenest.expr->sqrt(_mexpand(Add(*[_sqrtdenest0(x) for x in args])))
A:sympy.simplify.sqrtdenest.z->_mexpand(Mul._from_args(z.as_content_primitive()))
A:sympy.simplify.sqrtdenest.p->Mul(*[nested[i] for i in range(len(nested)) if f[i]])
A:sympy.simplify.sqrtdenest.pargs->sorted(p.args, key=default_sort_key)
A:sympy.simplify.sqrtdenest.(r, b, a)->split_surds(p)
A:sympy.simplify.sqrtdenest.nmax->max(v, key=default_sort_key)
A:sympy.simplify.sqrtdenest.r->radsimp(r)
A:sympy.simplify.sqrtdenest.x1args->list(x1.args)
A:sympy.simplify.sqrtdenest.a->Add(*a1)
A:sympy.simplify.sqrtdenest.(b, r)->Mul(*[nested[i] for i in range(len(nested)) if f[i]]).as_coeff_Mul()
A:sympy.simplify.sqrtdenest.(n, d)->sqrt(_mexpand(Add(*[_sqrtdenest0(x) for x in args]))).as_numer_denom()
A:sympy.simplify.sqrtdenest.args->sorted(n.base.args, key=default_sort_key)
A:sympy.simplify.sqrtdenest.(g, a, b)->split_surds(expr.base)
A:sympy.simplify.sqrtdenest.c2->_mexpand(a ** 2 - b ** 2)
A:sympy.simplify.sqrtdenest.(g, a1, b1)->split_surds(c2)
A:sympy.simplify.sqrtdenest.c2_1->_mexpand(a1 ** 2 - b1 ** 2)
A:sympy.simplify.sqrtdenest.c_1->_sqrtdenest_rec(sqrt(c2_1))
A:sympy.simplify.sqrtdenest.d_1->_sqrtdenest_rec(sqrt(a1 + c_1))
A:sympy.simplify.sqrtdenest.(num, den)->rad_rationalize(b, d)
A:sympy.simplify.sqrtdenest.c->_sqrtdenest1(sqrt(c2))
A:sympy.simplify.sqrtdenest.d->sqrt(d2)
A:sympy.simplify.sqrtdenest.val->_sqrt_match(a)
A:sympy.simplify.sqrtdenest.d2->_mexpand(a ** 2 - b ** 2 * r)
A:sympy.simplify.sqrtdenest.dr2->_mexpand(-d2 * r)
A:sympy.simplify.sqrtdenest.dr->sqrt(dr2)
A:sympy.simplify.sqrtdenest.res->_mexpand(sqvad / sqrt(2) + v[1] * sqrt(R) * sqvad1 / sqrt(2))
A:sympy.simplify.sqrtdenest.(a, b, r)->map(sympify, (a, b, r))
A:sympy.simplify.sqrtdenest.rval->_sqrt_match(r)
A:sympy.simplify.sqrtdenest.y->Dummy('y', positive=True)
A:sympy.simplify.sqrtdenest.newa->Poly(a.subs(sqrt(rr), (y ** 2 - ra) / rb), y)
A:sympy.simplify.sqrtdenest.(ca, cb, cc)->Poly(a.subs(sqrt(rr), (y ** 2 - ra) / rb), y).all_coeffs()
A:sympy.simplify.sqrtdenest.depthr->sqrt_depth(r)
A:sympy.simplify.sqrtdenest.vad1->radsimp(1 / vad)
A:sympy.simplify.sqrtdenest.sqd->_mexpand(sqrtdenest(sqrt(radsimp(d2))))
A:sympy.simplify.sqrtdenest.A->sqrtdenest(sqrt(x))
A:sympy.simplify.sqrtdenest.(Bn, Bd)->rad_rationalize(b, _mexpand(2 * A))
A:sympy.simplify.sqrtdenest.sqp->sqrt(p)
A:sympy.simplify.sqrtdenest.values->list(filter(None, [_sqrt_match(expr) for expr in nested]))
A:sympy.simplify.sqrtdenest.(d, f)->_denester(nested2, av0, h + 1, max_depth_level)
A:sympy.simplify.sqrtdenest.v->_sqrt_match(p)
A:sympy.simplify.sqrtdenest.vad->_mexpand(v[0] + d)
A:sympy.simplify.sqrtdenest.sqvad->_sqrtdenest1(sqrt(vad), denester=False)
A:sympy.simplify.sqrtdenest.sqvad1->radsimp(1 / sqvad)
sympy.simplify.sqrtdenest.SqrtdenestStopIteration(StopIteration)
sympy.simplify.sqrtdenest._denester(nested,av0,h,max_depth_level)
sympy.simplify.sqrtdenest._mexpand(expr)
sympy.simplify.sqrtdenest._sqrt_match(p)
sympy.simplify.sqrtdenest._sqrt_numeric_denest(a,b,r,d2)
sympy.simplify.sqrtdenest._sqrt_symbolic_denest(a,b,r)
sympy.simplify.sqrtdenest._sqrtdenest0(expr)
sympy.simplify.sqrtdenest._sqrtdenest1(expr,denester=True)
sympy.simplify.sqrtdenest._sqrtdenest_rec(expr)
sympy.simplify.sqrtdenest._subsets(n)
sympy.simplify.sqrtdenest.is_algebraic(p)
sympy.simplify.sqrtdenest.is_sqrt(expr)
sympy.simplify.sqrtdenest.sqrt_biquadratic_denest(expr,a,b,r,d2)
sympy.simplify.sqrtdenest.sqrt_depth(p)
sympy.simplify.sqrtdenest.sqrtdenest(expr,max_iter=3)
sympy.sqrtdenest(expr,max_iter=3)
sympy.sqrtdenest.SqrtdenestStopIteration(StopIteration)
sympy.sqrtdenest._denester(nested,av0,h,max_depth_level)
sympy.sqrtdenest._mexpand(expr)
sympy.sqrtdenest._sqrt_match(p)
sympy.sqrtdenest._sqrt_numeric_denest(a,b,r,d2)
sympy.sqrtdenest._sqrt_symbolic_denest(a,b,r)
sympy.sqrtdenest._sqrtdenest0(expr)
sympy.sqrtdenest._sqrtdenest1(expr,denester=True)
sympy.sqrtdenest._sqrtdenest_rec(expr)
sympy.sqrtdenest._subsets(n)
sympy.sqrtdenest.is_algebraic(p)
sympy.sqrtdenest.is_sqrt(expr)
sympy.sqrtdenest.sqrt_biquadratic_denest(expr,a,b,r,d2)
sympy.sqrtdenest.sqrt_depth(p)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/hyperexpand_doc.py----------------------------------------
A:sympy.simplify.hyperexpand_doc.c->FormulaCollection()
A:sympy.simplify.hyperexpand_doc.obj->Eq(hyper(f.func.ap, f.func.bq, f.z), f.closed_form.rewrite('nonrepsmall'))


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/fu.py----------------------------------------
A:sympy.simplify.fu.(n, d)->Add(*args).as_numer_denom()
A:sympy.simplify.fu.n->min(len(c), len(s))
A:sympy.simplify.fu.d->Dummy()
A:sympy.simplify.fu.newk->Mul(*newk).as_powers_dict()
A:sympy.simplify.fu.a->Add(*args).args[0].xreplace({d: S.One})
A:sympy.simplify.fu.rv->Add(*args)
A:sympy.simplify.fu.p->perfect_power(rv.exp)
A:sympy.simplify.fu.newn->TR14(n, first=False)
A:sympy.simplify.fu.newd->TR14(d, first=False)
A:sympy.simplify.fu.a1->Add(*[_.args[0] for _ in m]).pop()
A:sympy.simplify.fu.a2->Add(*[_.args[0] for _ in m]).pop()
A:sympy.simplify.fu.args->set([j.args for j in (ca, sa)])
A:sympy.simplify.fu.new->do(e)
A:sympy.simplify.fu.split->trig_split(*args, two=True)
A:sympy.simplify.fu.b->sympy.core.add.Add._from_args(args)
A:sympy.simplify.fu.byrad->defaultdict(list)
A:sympy.simplify.fu.was->Add(byrad[a][i] + byrad[b][j])
A:sympy.simplify.fu.t->f(base * 2)
A:sympy.simplify.fu.(co, t)->f(base * 2).as_coeff_Mul()
A:sympy.simplify.fu.c->TR11(cos(arg))
A:sympy.simplify.fu.s->Add(*[_.args[0] for _ in m])
A:sympy.simplify.fu.(c, m)->Add(*args).args[0].as_coeff_Mul(rational=True)
A:sympy.simplify.fu.tb->tan(b)
A:sympy.simplify.fu.m->pow_cos_sin(b, two)
A:sympy.simplify.fu.d_args->list(Mul.make_args(d))
A:sympy.simplify.fu.di->factor(di)
A:sympy.simplify.fu.n_args->list(Mul.make_args(factor_terms(n)))
A:sympy.simplify.fu.ni->factor(ni)
A:sympy.simplify.fu.newed->ed.extract_additively(S.One)
A:sympy.simplify.fu.t1->TR11(cos(arg)).pop()
A:sympy.simplify.fu.t2->TR11(cos(arg)).pop()
A:sympy.simplify.fu.(b, e)->Add(*args).args[0].xreplace({d: S.One}).as_base_exp()
A:sympy.simplify.fu.(co, a)->Add(*args).args[0].xreplace({d: S.One}).as_coeff_Mul()
A:sympy.simplify.fu.key->cos(a * cc, evaluate=False)
A:sympy.simplify.fu.take->min(A[e], B[e])
A:sympy.simplify.fu.cc->ccs.pop()
A:sympy.simplify.fu.process->list(ordered(process))
A:sympy.simplify.fu.nother->len(other)
A:sympy.simplify.fu.keys(g, t, e, f, si, a)->list(range(6))
A:sympy.simplify.fu.A->list(ordered(process)).pop(0)
A:sympy.simplify.fu.B->list(ordered(process)).pop(0)
A:sympy.simplify.fu.(TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR11, TR12, TR13, TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22)->list(map(debug, (TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR11, TR12, TR13, TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22)))
A:sympy.simplify.fu.fRL1->greedy(RL1, measure)
A:sympy.simplify.fu.fRL2->greedy(RL2, measure)
A:sympy.simplify.fu.rv1->fRL2(rv)
A:sympy.simplify.fu.rv2->TR8(TRmorrie(rv1))
A:sympy.simplify.fu.absc->defaultdict(list)
A:sympy.simplify.fu.(c, a)->Add(*args).args[0].xreplace({d: S.One}).as_coeff_Mul()
A:sympy.simplify.fu.e->Add(*v, evaluate=False)
A:sympy.simplify.fu.fufuncs->'\n    TR0 TR1 TR2 TR3 TR4 TR5 TR6 TR7 TR8 TR9 TR10 TR10i TR11\n    TR12 TR13 L TR2i TRmorrie TR12i\n    TR14 TR15 TR16 TR111 TR22'.split()
A:sympy.simplify.fu.FU->dict(list(zip(fufuncs, list(map(locals().get, fufuncs)))))
A:sympy.simplify.fu.(ua, ub)->Add(*args).args[0].xreplace({d: S.One}).normal(b)
A:sympy.simplify.fu.gcd->Add(*args).args[0].xreplace({d: S.One}).gcd(b).as_expr()
A:sympy.simplify.fu.ua->ua.quo(S.NegativeOne).quo(S.NegativeOne)
A:sympy.simplify.fu.ub->ub.quo(S.NegativeOne).quo(S.NegativeOne)
A:sympy.simplify.fu.trigs->Add(*args).atoms(C.TrigonometricFunction)
A:sympy.simplify.fu.masked->Add(*args).xreplace(dict(reps))
sympy.fu(rv,measure=lambdax:(L(x),x.count_ops()))
sympy.fu.L(rv)
sympy.fu.TR0(rv)
sympy.fu.TR1(rv)
sympy.fu.TR10(rv,first=True)
sympy.fu.TR10i(rv)
sympy.fu.TR11(rv,base=None)
sympy.fu.TR111(rv)
sympy.fu.TR12(rv,first=True)
sympy.fu.TR12i(rv)
sympy.fu.TR13(rv)
sympy.fu.TR14(rv,first=True)
sympy.fu.TR15(rv,max=4,pow=False)
sympy.fu.TR16(rv,max=4,pow=False)
sympy.fu.TR2(rv)
sympy.fu.TR22(rv,max=4,pow=False)
sympy.fu.TR2i(rv,half=False)
sympy.fu.TR3(rv)
sympy.fu.TR4(rv)
sympy.fu.TR5(rv,max=4,pow=False)
sympy.fu.TR6(rv,max=4,pow=False)
sympy.fu.TR7(rv)
sympy.fu.TR8(rv,first=True)
sympy.fu.TR9(rv)
sympy.fu.TRmorrie(rv)
sympy.fu._TR56(rv,f,g,h,max,pow)
sympy.fu._osborne(e,d)
sympy.fu._osbornei(e,d)
sympy.fu._roots()
sympy.fu.as_f_sign_1(e)
sympy.fu.hyper_as_trig(rv)
sympy.fu.process_common_addends(rv,do,key2=None,key1=True)
sympy.fu.trig_split(a,b,two=False)
sympy.simplify.fu.L(rv)
sympy.simplify.fu.TR0(rv)
sympy.simplify.fu.TR1(rv)
sympy.simplify.fu.TR10(rv,first=True)
sympy.simplify.fu.TR10i(rv)
sympy.simplify.fu.TR11(rv,base=None)
sympy.simplify.fu.TR111(rv)
sympy.simplify.fu.TR12(rv,first=True)
sympy.simplify.fu.TR12i(rv)
sympy.simplify.fu.TR13(rv)
sympy.simplify.fu.TR14(rv,first=True)
sympy.simplify.fu.TR15(rv,max=4,pow=False)
sympy.simplify.fu.TR16(rv,max=4,pow=False)
sympy.simplify.fu.TR2(rv)
sympy.simplify.fu.TR22(rv,max=4,pow=False)
sympy.simplify.fu.TR2i(rv,half=False)
sympy.simplify.fu.TR3(rv)
sympy.simplify.fu.TR4(rv)
sympy.simplify.fu.TR5(rv,max=4,pow=False)
sympy.simplify.fu.TR6(rv,max=4,pow=False)
sympy.simplify.fu.TR7(rv)
sympy.simplify.fu.TR8(rv,first=True)
sympy.simplify.fu.TR9(rv)
sympy.simplify.fu.TRmorrie(rv)
sympy.simplify.fu._TR56(rv,f,g,h,max,pow)
sympy.simplify.fu._osborne(e,d)
sympy.simplify.fu._osbornei(e,d)
sympy.simplify.fu._roots()
sympy.simplify.fu.as_f_sign_1(e)
sympy.simplify.fu.fu(rv,measure=lambdax:(L(x),x.count_ops()))
sympy.simplify.fu.hyper_as_trig(rv)
sympy.simplify.fu.process_common_addends(rv,do,key2=None,key1=True)
sympy.simplify.fu.trig_split(a,b,two=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/cse_main.py----------------------------------------
A:sympy.simplify.cse_main.r->sympify(r)
A:sympy.simplify.cse_main.d->sift(e, lambda w: w.is_Equality and w.lhs.is_Symbol)
A:sympy.simplify.cse_main.expr->post(expr)
A:sympy.simplify.cse_main.opt_subs->opt_cse(reduced_exprs, order)
A:sympy.simplify.cse_main.adds->set()
A:sympy.simplify.cse_main.muls->set()
A:sympy.simplify.cse_main.seen_subexp->set()
A:sympy.simplify.cse_main.opt_subs[expr]->Pow(Pow(expr.base, -expr.exp), S.NegativeOne, evaluate=False)
A:sympy.simplify.cse_main.funcs->sorted(funcs, key=lambda x: len(x.args))
A:sympy.simplify.cse_main.com_args->func_args[i].intersection(func_args[j])
A:sympy.simplify.cse_main.com_func->Func(*com_args)
A:sympy.simplify.cse_main.diff_i->func_args[i].difference(com_args)
A:sympy.simplify.cse_main.opt_subs[funcs[i]]->Func(Func(*diff_i), com_func, evaluate=False)
A:sympy.simplify.cse_main.diff_j->func_args[j].difference(com_args)
A:sympy.simplify.cse_main.opt_subs[funcs[j]]->Func(Func(*diff_j), com_func, evaluate=False)
A:sympy.simplify.cse_main.diff_k->func_args[k].difference(com_args)
A:sympy.simplify.cse_main.opt_subs[funcs[k]]->Func(Func(*diff_k), com_func, evaluate=False)
A:sympy.simplify.cse_main.comutative_muls->set()
A:sympy.simplify.cse_main.(c, nc)->post(expr).args_cnc()
A:sympy.simplify.cse_main.c_mul->Mul(*c)
A:sympy.simplify.cse_main.opt_subs[m]->Mul(c_mul, Mul(*nc), evaluate=False)
A:sympy.simplify.cse_main.to_eliminate->set()
A:sympy.simplify.cse_main.subs->dict()
A:sympy.simplify.cse_main.args->list(ordered(expr.args))
A:sympy.simplify.cse_main.new_args->list(map(_rebuild, args))
A:sympy.simplify.cse_main.new_expr->post(expr).func(*new_args)
A:sympy.simplify.cse_main.sym->next(symbols)
A:sympy.simplify.cse_main.reduced_e->_rebuild(e)
A:sympy.simplify.cse_main.optimizations->list()
A:sympy.simplify.cse_main.excluded_symbols->set.union(*[expr.atoms(Symbol) for expr in reduced_exprs])
A:sympy.simplify.cse_main.symbols->filter_symbols(symbols, excluded_symbols)
A:sympy.simplify.cse_main.(replacements, reduced_exprs)->tree_cse(reduced_exprs, symbols, opt_subs, order)
A:sympy.simplify.cse_main.subtree->postprocess_for_cse(subtree, optimizations)
sympy.cse(exprs,symbols=None,optimizations=None,postprocess=None,order='canonical')
sympy.cse_main.opt_cse(exprs,order='canonical')
sympy.cse_main.postprocess_for_cse(expr,optimizations)
sympy.cse_main.preprocess_for_cse(expr,optimizations)
sympy.cse_main.reps_toposort(r)
sympy.cse_main.tree_cse(exprs,symbols,opt_subs=None,order='canonical')
sympy.cse_separate(r,e)
sympy.simplify.cse_main.cse(exprs,symbols=None,optimizations=None,postprocess=None,order='canonical')
sympy.simplify.cse_main.cse_separate(r,e)
sympy.simplify.cse_main.opt_cse(exprs,order='canonical')
sympy.simplify.cse_main.postprocess_for_cse(expr,optimizations)
sympy.simplify.cse_main.preprocess_for_cse(expr,optimizations)
sympy.simplify.cse_main.reps_toposort(r)
sympy.simplify.cse_main.tree_cse(exprs,symbols,opt_subs=None,order='canonical')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/simplify.py----------------------------------------
A:sympy.simplify.simplify.expr->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args])
A:sympy.simplify.simplify.(b, ex)->result.subs(res).as_base_exp()
A:sympy.simplify.simplify.(n, d)->fraction(expr)
A:sympy.simplify.simplify.(a, b)->fraction(expr)
A:sympy.simplify.simplify.(sexpr, deriv)->parse_derivative(expr)
A:sympy.simplify.simplify.(coeff, tail)->arg.as_coeff_Mul(rational=True)
A:sympy.simplify.simplify.pattern->pattern.subs(a, a_t).subs(a, a_t)
A:sympy.simplify.simplify.b->len(x.free_symbols)
A:sympy.simplify.simplify.order_term->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).getO()
A:sympy.simplify.simplify.result->result.subs(a, a_t).subs(a, a_t)
A:sympy.simplify.simplify.index->expand_power_base(index, deep=False)
A:sympy.simplify.simplify.terms->sympy.core.Mul.make_args(s)
A:sympy.simplify.simplify.collected->defaultdict(list)
A:sympy.simplify.simplify.args->tuple([bottom_up(a, F, atoms, nonbasic) for a in rv.args])
A:sympy.simplify.simplify.args[i]->separatevars(a, force)
A:sympy.simplify.simplify.commonc->Mul(*commonc)
A:sympy.simplify.simplify.(c, nc)->expr.match(pattern).args_cnc()
A:sympy.simplify.simplify.nonsepar->Add(*args)
A:sympy.simplify.simplify._expr->factor(_expr).subs(reps)
A:sympy.simplify.simplify.symbols->list(expr.free_symbols)
A:sympy.simplify.simplify.ret->dict(((i, []) for i in symbols + ['coeff']))
A:sympy.simplify.simplify.intersection->set(symbols).intersection(expsym)
A:sympy.simplify.simplify.ret[k]->Mul(*v)
A:sympy.simplify.simplify.(f, g)->list(map(sympify, (f, g)))
A:sympy.simplify.simplify.(Q, r)->reduced(f, [g], field=True, expand=False)
A:sympy.simplify.simplify.quick->tuple([bottom_up(a, F, atoms, nonbasic) for a in rv.args]).pop('quick', True)
A:sympy.simplify.simplify.polynomial->tuple([bottom_up(a, F, atoms, nonbasic) for a in rv.args]).pop('polynomial', False)
A:sympy.simplify.simplify.(num, denom)->cancel(expr).as_numer_denom()
A:sympy.simplify.simplify.(polys, opt)->parallel_poly_from_expr([num, denom] + G, *gens, **args)
A:sympy.simplify.simplify.opt.domain->domain.get_field()
A:sympy.simplify.simplify.tested->set()
A:sympy.simplify.simplify.M1->staircase(N)
A:sympy.simplify.simplify.M2->staircase(D)
A:sympy.simplify.simplify.Cs->symbols('c:%d' % len(M1), cls=Dummy)
A:sympy.simplify.simplify.Ds->symbols('d:%d' % len(M2), cls=Dummy)
A:sympy.simplify.simplify.c_hat->Poly(sum([Cs[i] * M1[i] for i in xrange(len(M1))]), opt.gens + ng)
A:sympy.simplify.simplify.d_hat->Poly(sum([Ds[i] * M2[i] for i in xrange(len(M2))]), opt.gens + ng)
A:sympy.simplify.simplify.S->Poly(r, gens=opt.gens).coeffs()
A:sympy.simplify.simplify.sol->sqrtdenest(sol)
A:sympy.simplify.simplify.c->len(cancel(x / y).free_symbols).as_coefficient(I)
A:sympy.simplify.simplify.d->Wild('d', commutative=False)
A:sympy.simplify.simplify.(c, d, allsol)->_ratsimpmodprime(Poly(num, opt.gens), Poly(denom, opt.gens), [])
A:sympy.simplify.simplify.(c, d)->min(newsol, key=lambda x: len(x[0].terms()) + len(x[1].terms()))
A:sympy.simplify.simplify.(cn, c)->len(cancel(x / y).free_symbols).as_coefficient(I).clear_denoms(convert=True)
A:sympy.simplify.simplify.(dn, d)->Wild('d', commutative=False).clear_denoms(convert=True)
A:sympy.simplify.simplify.r->Integer(0)
A:sympy.simplify.simplify.y->find_fuzzy(denom, g - 1)
A:sympy.simplify.simplify.cn->fn(coeff * y).expand(trig=True).subs(y, x)
A:sympy.simplify.simplify.(n, funcs, iterables, extragens)->parse_hints(hints)
A:sympy.simplify.simplify.gens->list(set(gens))
A:sympy.simplify.simplify.funcs->list(set(funcs))
A:sympy.simplify.simplify.iterables->list(set(iterables))
A:sympy.simplify.simplify.allfuncs->set([sin, cos, tan, sinh, cosh, tanh])
A:sympy.simplify.simplify.gcd->reduce(igcd, val)
A:sympy.simplify.simplify.fs->set(funcs + fns)
A:sympy.simplify.simplify.dummys->symbols('d:%i' % len(args), cls=Dummy)
A:sympy.simplify.simplify.myI->Dummy('I')
A:sympy.simplify.simplify.((pnum, pdenom), opt)->parallel_poly_from_expr([num, denom])
A:sympy.simplify.simplify.(ideal, freegens, gens)->analyse_gens(opt.gens, hints)
A:sympy.simplify.simplify.G->groebner(ideal, order=order, gens=gens, domain=ZZ)
A:sympy.simplify.simplify.num->powsimp(_num(rterms))
A:sympy.simplify.simplify.ourgens->set(parallel_poly_from_expr([coeff, denom])[1].gens)
A:sympy.simplify.simplify.p->sqrtdenest(sqrt(p))
A:sympy.simplify.simplify.old->fraction(expr)
A:sympy.simplify.simplify.recursive->opts.pop('recursive', False)
A:sympy.simplify.simplify.method->opts.pop('method', 'matching')
A:sympy.simplify.simplify.new->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).rewrite(exp, deep=deep)
A:sympy.simplify.simplify.(coeff, expr)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).as_coeff_Add()
A:sympy.simplify.simplify.vars->list(ordered(vars))
A:sympy.simplify.simplify.Numbers->kwargs.get('Numbers', True)
A:sympy.simplify.simplify.Fv->Factors(v)
A:sympy.simplify.simplify.f->futrig(old)
A:sympy.simplify.simplify.(q, r)->futrig(old).div(Fv)
A:sympy.simplify.simplify.fwas->futrig(old).factors.copy()
A:sympy.simplify.simplify.v->expand_mul(v)
A:sympy.simplify.simplify.g1->gammas.pop()
A:sympy.simplify.simplify.x->Symbol('x')
A:sympy.simplify.simplify.sols->solve(f, x)
A:sympy.simplify.simplify.n->n.func(*n.args).func(*n.args)
A:sympy.simplify.simplify.a->len(cancel(x / y).free_symbols)
A:sympy.simplify.simplify.(g, b1, b2)->_split_gcd(*surds)
A:sympy.simplify.simplify.(g1, b1n, b2)->_split_gcd(*b1n)
A:sympy.simplify.simplify.(g, a, b)->split_surds(den)
A:sympy.simplify.simplify.den->_mexpand(a ** 2 - b ** 2)
A:sympy.simplify.simplify.syms->syms.union(e.atoms(C.Symbol)).union(e.atoms(C.Symbol))
A:sympy.simplify.simplify.reps->dict([(s, Dummy(s.name, polar=True)) for s in eq.free_symbols])
A:sympy.simplify.simplify._d->nsimplify(d)
A:sympy.simplify.simplify.rterms->list(ordered(list(collected.items())))
A:sympy.simplify.simplify.(nd, d)->rad_rationalize(S.One, Add._from_args([sqrt(x) * y for (x, y) in rterms]))
A:sympy.simplify.simplify.u->list(uniq(coeffs))
A:sympy.simplify.simplify.(n2, d2)->fraction(gcd_terms(_umul(n, 1 / d)))
A:sympy.simplify.simplify.eq->sympify(eq)
A:sympy.simplify.simplify.eq[i]->expr.atoms(exp).subs(reps)
A:sympy.simplify.simplify.func->_polarify(eq.function, lift, pause=pause)
A:sympy.simplify.simplify.var->_polarify(limit[0], lift=False, pause=pause)
A:sympy.simplify.simplify.rest->_polarify(limit[1:], lift=lift, pause=pause)
A:sympy.simplify.simplify.expo->_unpolarify(eq.exp, exponents_only)
A:sympy.simplify.simplify.base->_unpolarify(eq.base, exponents_only, not (expo.is_integer and (not pause)))
A:sympy.simplify.simplify.res->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).match(pattern)
A:sympy.simplify.simplify.(b, e)->Symbol('x').as_base_exp()
A:sympy.simplify.simplify.logs->logcombine(Mul(*logs))
A:sympy.simplify.simplify.(_, be)->len(x.free_symbols).as_base_exp()
A:sympy.simplify.simplify.logb->expand_log(log(b))
A:sympy.simplify.simplify.g->trigsimpfunc(g, deep)
A:sympy.simplify.simplify.glogb->_denest_pow(glogb.args[0])
A:sympy.simplify.simplify.(cg, rg)->trigsimpfunc(g, deep).as_coeff_Mul()
A:sympy.simplify.simplify.(eq, rep)->polarify(eq)
A:sympy.simplify.simplify._y->Dummy('y')
A:sympy.simplify.simplify._deep->kwargs.get('deep', deep)
A:sympy.simplify.simplify._combine->kwargs.get('combine', combine)
A:sympy.simplify.simplify._force->kwargs.get('force', force)
A:sympy.simplify.simplify._measure->kwargs.get('measure', measure)
A:sympy.simplify.simplify.c_powers->defaultdict(list)
A:sympy.simplify.simplify.term->result.subs(a, a_t).subs(a, a_t).subs(res)
A:sympy.simplify.simplify.(b1, e1)->Pow(b1 * b2, e1).as_base_exp()
A:sympy.simplify.simplify.(b2, e2)->result.subs(a, a_t).subs(a, a_t).subs(res).as_base_exp()
A:sympy.simplify.simplify.nc_part[-1]->Pow(b1 * b2, e1)
A:sympy.simplify.simplify.m->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).match(pattern)
A:sympy.simplify.simplify.c_powers[b]->Add(*e)
A:sympy.simplify.simplify.be->list(c_powers.items())
A:sympy.simplify.simplify.skip->set()
A:sympy.simplify.simplify.e->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).atoms(exp)
A:sympy.simplify.simplify.(c, m)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).atoms(exp).as_coeff_Mul(rational=True)
A:sympy.simplify.simplify.(newe, r)->divmod(common_b[b], b[1])
A:sympy.simplify.simplify.(bib, bie)->bkey(bi)
A:sympy.simplify.simplify.min1->min(min1, rat)
A:sympy.simplify.simplify.qlcm->lcm([ratq(bi) for bi in Mul.make_args(bstart)])
A:sympy.simplify.simplify.(b, be)->len(x.free_symbols).as_base_exp()
A:sympy.simplify.simplify.check->len(c_powers)
A:sympy.simplify.simplify.newexpr->_match_div_rewrite(expr, i)
A:sympy.simplify.simplify.(exp_c, exp_t)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).atoms(exp).as_coeff_Mul(rational=True)
A:sympy.simplify.simplify.c_exp->defaultdict(list)
A:sympy.simplify.simplify.new_base->factor_terms(xnew_base)
A:sympy.simplify.simplify.(p, d)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).atoms(exp).as_numer_denom()
A:sympy.simplify.simplify.xnew_base->expand_mul(new_base, deep=False)
A:sympy.simplify.simplify.h->h.expand(func=True, basic=False).expand(func=True, basic=False)
A:sympy.simplify.simplify.(c, _b)->len(x.free_symbols).as_coeff_Add()
A:sympy.simplify.simplify.(c, _a)->len(cancel(x / y).free_symbols).as_coeff_Add()
A:sympy.simplify.simplify.(cn, _n)->n.func(*n.args).func(*n.args).as_coeff_Add()
A:sympy.simplify.simplify.(ck, _k)->k.as_coeff_Add()
A:sympy.simplify.simplify.was->factor(expr)
A:sympy.simplify.simplify.xx->Symbol('x').replace(gamma, lambda n: _rf(1, (n - 1).expand()).replace(_rf, lambda a, b: gamma(a + b) / gamma(a)))
A:sympy.simplify.simplify.(args, nc)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).args_cnc()
A:sympy.simplify.simplify.sifted->sift(expr.args, gamma_factor)
A:sympy.simplify.simplify.gamma_ind->Mul(*sifted.pop(False, []))
A:sympy.simplify.simplify.(nd, dd)->Wild('d', commutative=False).as_numer_denom()
A:sympy.simplify.simplify.(ni, dd)->Add(*[rule_gamma(gamma_rat(a / dd), level + 1) for a in ni.args]).as_numer_denom()
A:sympy.simplify.simplify.nd->Mul(*args)
A:sympy.simplify.simplify.newargs->list(ordered(expr.args))
A:sympy.simplify.simplify.(isg, l)->explicate(d)
A:sympy.simplify.simplify.get->list(range(1, n))
A:sympy.simplify.simplify.(c, resid)->trigsimpfunc(g, deep).as_coeff_Add()
A:sympy.simplify.simplify.keys->sorted(rats, key=default_sort_key)
A:sympy.simplify.simplify.coeffs->list(sorted(rats[resid]))
A:sympy.simplify.simplify.run->_run(coeffs)
A:sympy.simplify.simplify.(S1, T1)->compute_ST(x)
A:sympy.simplify.simplify.inv[expr]->compute_ST(expr)
A:sympy.simplify.simplify.original_exprexpr->signsimp(expr)
A:sympy.simplify.simplify._e->cancel(expr)
A:sympy.simplify.simplify.expr1->shorter(_e, _mexpand(_e).cancel())
A:sympy.simplify.simplify.expr2->shorter(together(expr, deep=True), together(expr1, deep=True))
A:sympy.simplify.simplify.short->exptrigsimp(short, simplify=False)
A:sympy.simplify.simplify.hollow_mul->Transform(lambda x: Mul(*x.args), lambda x: x.is_Mul and len(x.args) == 2 and x.args[0].is_Number and x.args[1].is_Add and x.is_commutative)
A:sympy.simplify.simplify.(numer, denom)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).as_numer_denom()
A:sympy.simplify.simplify.reduce_num->ceiling(1 / tolerance)
A:sympy.simplify.simplify.bprec->int(prec * 3.33)
A:sympy.simplify.simplify.constant->sympify(constant)
A:sympy.simplify.simplify.constants_dict[str(constant)]->expand_mul(v)._to_mpmath(bprec)
A:sympy.simplify.simplify.exprval->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).evalf(prec, chop=True)
A:sympy.simplify.simplify.(re, im)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).evalf(prec, chop=True).as_real_imag()
A:sympy.simplify.simplify.xv->Symbol('x')._to_mpmath(bprec)
A:sympy.simplify.simplify.rat->sympy.mpmath.findpoly(xv, 1)
A:sympy.simplify.simplify.re->nsimplify_real(re)
A:sympy.simplify.simplify.im->nsimplify_real(im)
A:sympy.simplify.simplify.log1->defaultdict(list)
A:sympy.simplify.simplify.l->list(ordered(l))
A:sympy.simplify.simplify.li->list(ordered(l)).pop(0)
A:sympy.simplify.simplify.log1[Mul(*k)]->log(logcombine(Mul(*[l.args[0] ** Mul(*c) for (c, l) in log1.pop(k)]), force=force))
A:sympy.simplify.simplify.rv->F(rv)
A:sympy.simplify.simplify.factors->set(factors)
A:sympy.simplify.simplify.z0->Dummy('z')
A:sympy.simplify.simplify.ex->traverse(ex)
A:sympy.simplify.simplify.t->tanh(a / 2)
A:sympy.simplify.simplify.(e, f)->hyper_as_trig(e)
A:sympy.simplify.simplify.(coeff, e)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).atoms(exp).as_independent(C.TrigonometricFunction)
A:sympy.simplify.simplify.s_t[i]->sum_add(s_term1, s_term2, method)
A:sympy.simplify.simplify.p_t[i]->product_mul(p_term1, p_term2, method)
A:sympy.simplify.simplify.first->opts.pop('first', True)
A:sympy.simplify.simplify.trigsyms->set.union(*[t.free_symbols for t in expr.atoms(*_trigs)])
A:sympy.simplify.simplify.vnew->trigsimp(v, **opts)
A:sympy.simplify.simplify.(r, e)->expr.func(*[_trigsimp(a, deep) for a in expr.args]).func(*[_trigsimp(a, deep) for a in expr.args]).as_independent(s)
A:sympy.simplify.simplify.deep->opts.pop('deep', False)
A:sympy.simplify.simplify.(w, g)->cse(expr)
A:sympy.simplify.simplify.(a, b, c)->symbols('a b c', cls=Wild)
A:sympy.simplify.simplify.fargs->defaultdict(int)
A:sympy.simplify.simplify.gargs->defaultdict(int)
A:sympy.simplify.simplify.key->common.pop()
A:sympy.simplify.simplify.fe->defaultdict(int).pop(key)
A:sympy.simplify.simplify.ge->defaultdict(int).pop(key)
A:sympy.simplify.simplify.(key, e)->defaultdict(int).popitem()
A:sympy.simplify.simplify.(com, nc)->result.subs(a, a_t).subs(a, a_t).subs(res).args_cnc()
A:sympy.simplify.simplify.ok->ok2.subs(res)
A:sympy.simplify.simplify.nc->sympy.core.Mul._from_args(nc)
A:sympy.simplify.simplify.a_t->Wild('a', exclude=[ex])
A:sympy.simplify.simplify.fnew->factor(new)
sympy.__trigsimp(expr,deep=False)
sympy._denest_pow(eq)
sympy._dotrig(a,b)
sympy._eapply(func,e,cond=None)
sympy._futrig(e,**kwargs)
sympy._is_Expr(e)
sympy._is_sum_surds(p)
sympy._match_div_rewrite(expr,i)
sympy._mexpand(expr)
sympy._nthroot_solve(p,n,prec)
sympy._polarify(eq,lift,pause=False)
sympy._real_to_rational(expr,tolerance=None)
sympy._replace_mul_fpowxgpow(expr,f,g,rexp,h,rexph)
sympy._rf(Function)
sympy._rf.eval(cls,a,b)
sympy._separatevars(expr,force)
sympy._separatevars_dict(expr,symbols)
sympy._split_gcd(*a)
sympy._trigpats()
sympy._trigsimp(expr,deep=False)
sympy._unpolarify(eq,exponents_only,pause=False)
sympy.besselsimp(expr)
sympy.bottom_up(rv,F,atoms=False,nonbasic=False)
sympy.collect(expr,syms,func=None,evaluate=None,exact=False,distribute_order_term=True)
sympy.collect_const(expr,*vars,**kwargs)
sympy.collect_sqrt(expr,evaluate=None)
sympy.combsimp(expr)
sympy.denom(expr)
sympy.denom_expand(expr,**hints)
sympy.exptrigsimp(expr,simplify=True)
sympy.fraction(expr,exact=False)
sympy.fraction_expand(expr,**hints)
sympy.futrig(e,**kwargs)
sympy.hypersimilar(f,g,k)
sympy.hypersimp(f,k)
sympy.logcombine(expr,force=False)
sympy.nsimplify(expr,constants=[],tolerance=None,full=False,rational=None)
sympy.nthroot(expr,n,max_len=4,prec=15)
sympy.numer(expr)
sympy.numer_expand(expr,**hints)
sympy.polarify(eq,subs=True,lift=False)
sympy.posify(eq)
sympy.powdenest(eq,force=False,polar=False)
sympy.powsimp(expr,deep=False,combine='all',force=False,measure=count_ops)
sympy.product_mul(self,other,method=0)
sympy.product_simplify(s)
sympy.rad_rationalize(num,den)
sympy.radsimp(expr,symbolic=True,max_terms=4)
sympy.ratsimp(expr)
sympy.ratsimpmodprime(expr,G,*gens,**args)
sympy.rcollect(expr,*vars)
sympy.separatevars(expr,symbols=[],dict=False,force=False)
sympy.signsimp(expr,evaluate=None)
sympy.simplify(expr,ratio=1.7,measure=count_ops,fu=False)
sympy.simplify.simplify.__trigsimp(expr,deep=False)
sympy.simplify.simplify._denest_pow(eq)
sympy.simplify.simplify._dotrig(a,b)
sympy.simplify.simplify._eapply(func,e,cond=None)
sympy.simplify.simplify._futrig(e,**kwargs)
sympy.simplify.simplify._is_Expr(e)
sympy.simplify.simplify._is_sum_surds(p)
sympy.simplify.simplify._match_div_rewrite(expr,i)
sympy.simplify.simplify._mexpand(expr)
sympy.simplify.simplify._nthroot_solve(p,n,prec)
sympy.simplify.simplify._polarify(eq,lift,pause=False)
sympy.simplify.simplify._real_to_rational(expr,tolerance=None)
sympy.simplify.simplify._replace_mul_fpowxgpow(expr,f,g,rexp,h,rexph)
sympy.simplify.simplify._rf(Function)
sympy.simplify.simplify._rf.eval(cls,a,b)
sympy.simplify.simplify._separatevars(expr,force)
sympy.simplify.simplify._separatevars_dict(expr,symbols)
sympy.simplify.simplify._split_gcd(*a)
sympy.simplify.simplify._trigpats()
sympy.simplify.simplify._trigsimp(expr,deep=False)
sympy.simplify.simplify._unpolarify(eq,exponents_only,pause=False)
sympy.simplify.simplify.besselsimp(expr)
sympy.simplify.simplify.bottom_up(rv,F,atoms=False,nonbasic=False)
sympy.simplify.simplify.collect(expr,syms,func=None,evaluate=None,exact=False,distribute_order_term=True)
sympy.simplify.simplify.collect_const(expr,*vars,**kwargs)
sympy.simplify.simplify.collect_sqrt(expr,evaluate=None)
sympy.simplify.simplify.combsimp(expr)
sympy.simplify.simplify.denom(expr)
sympy.simplify.simplify.denom_expand(expr,**hints)
sympy.simplify.simplify.exptrigsimp(expr,simplify=True)
sympy.simplify.simplify.fraction(expr,exact=False)
sympy.simplify.simplify.fraction_expand(expr,**hints)
sympy.simplify.simplify.futrig(e,**kwargs)
sympy.simplify.simplify.hypersimilar(f,g,k)
sympy.simplify.simplify.hypersimp(f,k)
sympy.simplify.simplify.logcombine(expr,force=False)
sympy.simplify.simplify.nsimplify(expr,constants=[],tolerance=None,full=False,rational=None)
sympy.simplify.simplify.nthroot(expr,n,max_len=4,prec=15)
sympy.simplify.simplify.numer(expr)
sympy.simplify.simplify.numer_expand(expr,**hints)
sympy.simplify.simplify.polarify(eq,subs=True,lift=False)
sympy.simplify.simplify.posify(eq)
sympy.simplify.simplify.powdenest(eq,force=False,polar=False)
sympy.simplify.simplify.powsimp(expr,deep=False,combine='all',force=False,measure=count_ops)
sympy.simplify.simplify.product_mul(self,other,method=0)
sympy.simplify.simplify.product_simplify(s)
sympy.simplify.simplify.rad_rationalize(num,den)
sympy.simplify.simplify.radsimp(expr,symbolic=True,max_terms=4)
sympy.simplify.simplify.ratsimp(expr)
sympy.simplify.simplify.ratsimpmodprime(expr,G,*gens,**args)
sympy.simplify.simplify.rcollect(expr,*vars)
sympy.simplify.simplify.separatevars(expr,symbols=[],dict=False,force=False)
sympy.simplify.simplify.signsimp(expr,evaluate=None)
sympy.simplify.simplify.simplify(expr,ratio=1.7,measure=count_ops,fu=False)
sympy.simplify.simplify.split_surds(expr)
sympy.simplify.simplify.sum_add(self,other,method=0)
sympy.simplify.simplify.sum_simplify(s)
sympy.simplify.simplify.trigsimp(expr,**opts)
sympy.simplify.simplify.trigsimp_groebner(expr,hints=[],quick=False,order='grlex',polynomial=False)
sympy.simplify.simplify.trigsimp_old(expr,**opts)
sympy.simplify.simplify.unpolarify(eq,subs={},exponents_only=False)
sympy.split_surds(expr)
sympy.sum_add(self,other,method=0)
sympy.sum_simplify(s)
sympy.trigsimp(expr,**opts)
sympy.trigsimp_groebner(expr,hints=[],quick=False,order='grlex',polynomial=False)
sympy.trigsimp_old(expr,**opts)
sympy.unpolarify(eq,subs={},exponents_only=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/traversaltools.py----------------------------------------
sympy.simplify.traversaltools.use(expr,func,level=0,args=(),kwargs={})
sympy.use(expr,func,level=0,args=(),kwargs={})


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/cse_opts.py----------------------------------------
A:sympy.simplify.cse_opts.e->e.xreplace({node: replacement}).xreplace({node: replacement})
A:sympy.simplify.cse_opts.negs[a]->sympy.core.Mul._from_args([S.One, S.NegativeOne, -a])
sympy.cse_opts.sub_post(e)
sympy.cse_opts.sub_pre(e)
sympy.simplify.cse_opts.sub_post(e)
sympy.simplify.cse_opts.sub_pre(e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_rewrite.py----------------------------------------
A:sympy.simplify.tests.test_rewrite.(x, y, z, n)->symbols('x,y,z,n')
sympy.simplify.tests.test_rewrite.test_has()
sympy.simplify.tests.test_rewrite.test_sin_exp_rewrite()
sympy.tests.test_rewrite.test_has()
sympy.tests.test_rewrite.test_sin_exp_rewrite()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_fu.py----------------------------------------
A:sympy.simplify.tests.test_fu.i->symbols('i', integer=True)
A:sympy.simplify.tests.test_fu.j->TR3(i)
A:sympy.simplify.tests.test_fu.c->cos(x)
A:sympy.simplify.tests.test_fu.s->sin(x)
A:sympy.simplify.tests.test_fu.args->zip(si, a)
A:sympy.simplify.tests.test_fu.ex->Add(*[Mul(*ai) for ai in args])
A:sympy.simplify.tests.test_fu.t->TR10i(ex)
A:sympy.simplify.tests.test_fu.A->Symbol('A', commutative=False)
A:sympy.simplify.tests.test_fu.h->func(pi)
A:sympy.simplify.tests.test_fu.r->cos(pi / 6)
A:sympy.simplify.tests.test_fu.expr->Mul(*[cos(2 ** i) for i in range(10)])
A:sympy.simplify.tests.test_fu.e->Mul(*[cos(2 ** i * pi / 17) for i in range(1, 17)])
A:sympy.simplify.tests.test_fu.(t, f)->hyper_as_trig(eq)
A:sympy.simplify.tests.test_fu.(e, f)->hyper_as_trig(tanh(x + y))
A:sympy.simplify.tests.test_fu.d->Dummy()
sympy.simplify.tests.test_fu.test_L()
sympy.simplify.tests.test_fu.test_TR1()
sympy.simplify.tests.test_fu.test_TR10()
sympy.simplify.tests.test_fu.test_TR10i()
sympy.simplify.tests.test_fu.test_TR11()
sympy.simplify.tests.test_fu.test_TR12()
sympy.simplify.tests.test_fu.test_TR12i()
sympy.simplify.tests.test_fu.test_TR13()
sympy.simplify.tests.test_fu.test_TR14()
sympy.simplify.tests.test_fu.test_TR15_16_17()
sympy.simplify.tests.test_fu.test_TR2()
sympy.simplify.tests.test_fu.test_TR2i()
sympy.simplify.tests.test_fu.test_TR3()
sympy.simplify.tests.test_fu.test_TR5()
sympy.simplify.tests.test_fu.test_TR6()
sympy.simplify.tests.test_fu.test_TR7()
sympy.simplify.tests.test_fu.test_TR8()
sympy.simplify.tests.test_fu.test_TR9()
sympy.simplify.tests.test_fu.test_TRmorrie()
sympy.simplify.tests.test_fu.test__TR56()
sympy.simplify.tests.test_fu.test_as_f_sign_1()
sympy.simplify.tests.test_fu.test_fu()
sympy.simplify.tests.test_fu.test_hyper_as_trig()
sympy.simplify.tests.test_fu.test_objective()
sympy.simplify.tests.test_fu.test_process_common_addends()
sympy.simplify.tests.test_fu.test_trig_split()
sympy.tests.test_fu.test_L()
sympy.tests.test_fu.test_TR1()
sympy.tests.test_fu.test_TR10()
sympy.tests.test_fu.test_TR10i()
sympy.tests.test_fu.test_TR11()
sympy.tests.test_fu.test_TR12()
sympy.tests.test_fu.test_TR12i()
sympy.tests.test_fu.test_TR13()
sympy.tests.test_fu.test_TR14()
sympy.tests.test_fu.test_TR15_16_17()
sympy.tests.test_fu.test_TR2()
sympy.tests.test_fu.test_TR2i()
sympy.tests.test_fu.test_TR3()
sympy.tests.test_fu.test_TR5()
sympy.tests.test_fu.test_TR6()
sympy.tests.test_fu.test_TR7()
sympy.tests.test_fu.test_TR8()
sympy.tests.test_fu.test_TR9()
sympy.tests.test_fu.test_TRmorrie()
sympy.tests.test_fu.test__TR56()
sympy.tests.test_fu.test_as_f_sign_1()
sympy.tests.test_fu.test_fu()
sympy.tests.test_fu.test_hyper_as_trig()
sympy.tests.test_fu.test_objective()
sympy.tests.test_fu.test_process_common_addends()
sympy.tests.test_fu.test_trig_split()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_traversaltools.py----------------------------------------
sympy.simplify.tests.test_traversaltools.test_use()
sympy.tests.test_traversaltools.test_use()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_cse.py----------------------------------------
A:sympy.simplify.tests.test_cse.(w, x, y, z)->symbols('w,x,y,z')
A:sympy.simplify.tests.test_cse.(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)->symbols('x:13')
A:sympy.simplify.tests.test_cse.ns->sympy.simplify.cse_main.numbered_symbols()
A:sympy.simplify.tests.test_cse.e->Eq(x * (-x + 1) + x * (x - 1), 0)
A:sympy.simplify.tests.test_cse.(substs, reduced)->cse(l, symbols('x:10'))
A:sympy.simplify.tests.test_cse.(rsubsts, _)->cse(reversed(l))
A:sympy.simplify.tests.test_cse.(A, B, C)->symbols('A B C', commutative=False)
A:sympy.simplify.tests.test_cse.x0->symbols('x0', commutative=False)
A:sympy.simplify.tests.test_cse.f->Piecewise((-z + x * y, Eq(y, 0)), (-z - x * y, True))
A:sympy.simplify.tests.test_cse.g->Function('g')
A:sympy.simplify.tests.test_cse.(name_val, (expr,))->cse(Subs(f(x, y), (x, y), (0, x + y)) + Subs(g(x, y), (x, y), (0, x + y)))
A:sympy.simplify.tests.test_cse.B->Function('B')
A:sympy.simplify.tests.test_cse.G->Function('G')
A:sympy.simplify.tests.test_cse.t->Tuple(*(a, a + S(1) / 2, 2 * a, b, 2 * a - b + 1, (sqrt(z) / 2) ** (-2 * a + 1) * B(2 * a - b, sqrt(z)) * B(b - 1, sqrt(z)) * G(b) * G(2 * a - b + 1), sqrt(z) * (sqrt(z) / 2) ** (-2 * a + 1) * B(b, sqrt(z)) * B(2 * a - b, sqrt(z)) * G(b) * G(2 * a - b + 1), sqrt(z) * (sqrt(z) / 2) ** (-2 * a + 1) * B(b - 1, sqrt(z)) * B(2 * a - b + 1, sqrt(z)) * G(b) * G(2 * a - b + 1), (sqrt(z) / 2) ** (-2 * a + 1) * B(b, sqrt(z)) * B(2 * a - b + 1, sqrt(z)) * G(b) * G(2 * a - b + 1), 1, 0, S(1) / 2, z / 2, -b + 1, -2 * a + b, -2 * a))
A:sympy.simplify.tests.test_cse.c->cse(t)
A:sympy.simplify.tests.test_cse.r->RootOf(x ** 6 - 4 * x ** 5 - 2, 1)
A:sympy.simplify.tests.test_cse.y->MatrixSymbol('y', 3, 1)
A:sympy.simplify.tests.test_cse.x->IndexedBase('x', shape=(len_y,))
A:sympy.simplify.tests.test_cse.Dy->IndexedBase('Dy', shape=(len_y - 1,))
A:sympy.simplify.tests.test_cse.i->Idx('i', len_y - 1)
A:sympy.simplify.tests.test_cse.(replacements, reduced_exprs)->cse([expr1, expr2])
A:sympy.simplify.tests.test_cse.A->MatrixSymbol('A', 3, 3)
A:sympy.simplify.tests.test_cse.ans->cse(f)
sympy.simplify.tests.test_cse.opt1(expr)
sympy.simplify.tests.test_cse.opt2(expr)
sympy.simplify.tests.test_cse.test_Piecewise()
sympy.simplify.tests.test_cse.test_bypass_non_commutatives()
sympy.simplify.tests.test_cse.test_cse_Indexed()
sympy.simplify.tests.test_cse.test_cse_MatrixSymbol()
sympy.simplify.tests.test_cse.test_cse_not_possible()
sympy.simplify.tests.test_cse.test_cse_single()
sympy.simplify.tests.test_cse.test_cse_single2()
sympy.simplify.tests.test_cse.test_dont_cse_tuples()
sympy.simplify.tests.test_cse.test_ignore_order_terms()
sympy.simplify.tests.test_cse.test_issue_4020()
sympy.simplify.tests.test_cse.test_issue_4203()
sympy.simplify.tests.test_cse.test_issue_4498()
sympy.simplify.tests.test_cse.test_issue_4499()
sympy.simplify.tests.test_cse.test_issue_6169()
sympy.simplify.tests.test_cse.test_issue_6263()
sympy.simplify.tests.test_cse.test_multiple_expressions()
sympy.simplify.tests.test_cse.test_name_conflict()
sympy.simplify.tests.test_cse.test_name_conflict_cust_symbols()
sympy.simplify.tests.test_cse.test_nested_substitution()
sympy.simplify.tests.test_cse.test_non_commutative_cse()
sympy.simplify.tests.test_cse.test_non_commutative_order()
sympy.simplify.tests.test_cse.test_numbered_symbols()
sympy.simplify.tests.test_cse.test_postprocess()
sympy.simplify.tests.test_cse.test_postprocess_for_cse()
sympy.simplify.tests.test_cse.test_pow_invpow()
sympy.simplify.tests.test_cse.test_powers()
sympy.simplify.tests.test_cse.test_preprocess_for_cse()
sympy.simplify.tests.test_cse.test_subtraction_opt()
sympy.simplify.tests.test_cse.test_symbols_exhausted_error()
sympy.tests.test_cse.opt1(expr)
sympy.tests.test_cse.opt2(expr)
sympy.tests.test_cse.test_Piecewise()
sympy.tests.test_cse.test_bypass_non_commutatives()
sympy.tests.test_cse.test_cse_Indexed()
sympy.tests.test_cse.test_cse_MatrixSymbol()
sympy.tests.test_cse.test_cse_not_possible()
sympy.tests.test_cse.test_cse_single()
sympy.tests.test_cse.test_cse_single2()
sympy.tests.test_cse.test_dont_cse_tuples()
sympy.tests.test_cse.test_ignore_order_terms()
sympy.tests.test_cse.test_issue_4020()
sympy.tests.test_cse.test_issue_4203()
sympy.tests.test_cse.test_issue_4498()
sympy.tests.test_cse.test_issue_4499()
sympy.tests.test_cse.test_issue_6169()
sympy.tests.test_cse.test_issue_6263()
sympy.tests.test_cse.test_multiple_expressions()
sympy.tests.test_cse.test_name_conflict()
sympy.tests.test_cse.test_name_conflict_cust_symbols()
sympy.tests.test_cse.test_nested_substitution()
sympy.tests.test_cse.test_non_commutative_cse()
sympy.tests.test_cse.test_non_commutative_order()
sympy.tests.test_cse.test_numbered_symbols()
sympy.tests.test_cse.test_postprocess()
sympy.tests.test_cse.test_postprocess_for_cse()
sympy.tests.test_cse.test_pow_invpow()
sympy.tests.test_cse.test_powers()
sympy.tests.test_cse.test_preprocess_for_cse()
sympy.tests.test_cse.test_subtraction_opt()
sympy.tests.test_cse.test_symbols_exhausted_error()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_epathtools.py----------------------------------------
sympy.simplify.tests.test_epathtools.test_EPath()
sympy.simplify.tests.test_epathtools.test_epath_apply()
sympy.simplify.tests.test_epathtools.test_epath_select()
sympy.tests.test_epathtools.test_EPath()
sympy.tests.test_epathtools.test_epath_apply()
sympy.tests.test_epathtools.test_epath_select()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_simplify.py----------------------------------------
A:sympy.simplify.tests.test_simplify.A->symbols('A', commutative=False)
A:sympy.simplify.tests.test_simplify.B->log(erf(x) - 1)
A:sympy.simplify.tests.test_simplify.C->log(erf(x) + 1)
A:sympy.simplify.tests.test_simplify.(x, y)->symbols('x,y', positive=True)
A:sympy.simplify.tests.test_simplify.x->Symbol('x')
A:sympy.simplify.tests.test_simplify.(a, x, y)->symbols('a x y')
A:sympy.simplify.tests.test_simplify.(a, b)->symbols('a b')
A:sympy.simplify.tests.test_simplify.n->symbols('n', negative=True)
A:sympy.simplify.tests.test_simplify.(A, B)->symbols('A B', commutative=False)
A:sympy.simplify.tests.test_simplify.c->sqrt(sqrt(x) * y)
A:sympy.simplify.tests.test_simplify.s->simplify(e)
A:sympy.simplify.tests.test_simplify.(x, y, z, k, n, m, w, f, s, A)->symbols('x,y,z,k,n,m,w,f,s,A')
A:sympy.simplify.tests.test_simplify.e->cos(1 / (1 + sqrt(2)))
A:sympy.simplify.tests.test_simplify.solutions->solve([f_1, f_2, f_3], x, y, z, simplify=False)
A:sympy.simplify.tests.test_simplify.nc->symbols('nc', commutative=False)
A:sympy.simplify.tests.test_simplify.cosAsExp->cos(x)._eval_rewrite_as_exp(x)
A:sympy.simplify.tests.test_simplify.tanAsExp->tan(x)._eval_rewrite_as_exp(x)
A:sympy.simplify.tests.test_simplify.r->S(r)
A:sympy.simplify.tests.test_simplify.expr2->Eq(sin(x) ** 2 + cos(x) ** 2, 1)
A:sympy.simplify.tests.test_simplify.y->Symbol('y')
A:sympy.simplify.tests.test_simplify.(x, y, z)->symbols('x y z', polar=True)
A:sympy.simplify.tests.test_simplify.(x, y, z, n)->symbols('x,y,z,n')
A:sympy.simplify.tests.test_simplify.f->Function('f')
A:sympy.simplify.tests.test_simplify.p->symbols('p', positive=True)
A:sympy.simplify.tests.test_simplify.i->Symbol('i', integer=True)
A:sympy.simplify.tests.test_simplify.(w, n, m)->symbols('w n m', negative=True)
A:sympy.simplify.tests.test_simplify.eq->Mul(*[sqrt(Dummy(imaginary=True)) for i in range(3)])
A:sympy.simplify.tests.test_simplify.(p, q, r)->symbols('p q r', polar=True)
A:sympy.simplify.tests.test_simplify.(A, B, C)->symbols('A B C', commutative=False)
A:sympy.simplify.tests.test_simplify.(a, b, x)->symbols('a,b,x')
A:sympy.simplify.tests.test_simplify.(a, b, c)->symbols('a b c')
A:sympy.simplify.tests.test_simplify.(a, b, c, x)->symbols('a,b,c,x')
A:sympy.simplify.tests.test_simplify.(a, x, y, z, n)->symbols('a,x,y,z,n')
A:sympy.simplify.tests.test_simplify.(x, a, b)->symbols('x,a,b')
A:sympy.simplify.tests.test_simplify.fx->D(f(x), x)
A:sympy.simplify.tests.test_simplify.fxx->D(f(x), x, x)
A:sympy.simplify.tests.test_simplify.(a, b, x, y)->symbols('a b x y')
A:sympy.simplify.tests.test_simplify.w1->Wild('.1')
A:sympy.simplify.tests.test_simplify.w2->Wild('.2')
A:sympy.simplify.tests.test_simplify.(a, b, x, t)->symbols('a,b,x,t')
A:sympy.simplify.tests.test_simplify.(n, m)->symbols('n,m', commutative=False)
A:sympy.simplify.tests.test_simplify.(n, k)->symbols('n,k', integer=True)
A:sympy.simplify.tests.test_simplify.a->A(5, 2)
A:sympy.simplify.tests.test_simplify.b->Symbol('b', real=True)
A:sympy.simplify.tests.test_simplify.g->Function('g')
A:sympy.simplify.tests.test_simplify.(z, w)->symbols('z,w', positive=True)
A:sympy.simplify.tests.test_simplify.(eq, rep)->posify(1 / x)
A:sympy.simplify.tests.test_simplify.(modified, reps)->posify(orig)
A:sympy.simplify.tests.test_simplify.(p, q)->symbols('p q', positive=True)
A:sympy.simplify.tests.test_simplify.(i, j)->symbols('i,j', integer=True)
A:sympy.simplify.tests.test_simplify.(aA, Re, a, b, D)->symbols('aA Re a b D')
A:sympy.simplify.tests.test_simplify.r2->sqrt(2)
A:sympy.simplify.tests.test_simplify.r3->sqrt(3)
A:sympy.simplify.tests.test_simplify.r5->sqrt(5)
A:sympy.simplify.tests.test_simplify.r7->sqrt(7)
A:sympy.simplify.tests.test_simplify.z->Symbol('z', polar=True)
A:sympy.simplify.tests.test_simplify.(c, p)->symbols('c p', positive=True)
A:sympy.simplify.tests.test_simplify.(newex, subs)->polarify(f(x) + z)
A:sympy.simplify.tests.test_simplify.mu->Symbol('mu')
A:sympy.simplify.tests.test_simplify.sigma->Symbol('sigma', positive=True)
A:sympy.simplify.tests.test_simplify.t->principal_branch(x, 2 * pi)
A:sympy.simplify.tests.test_simplify.e3->expand((x + y) * y / x)
A:sympy.simplify.tests.test_simplify.s1->simplify(e1)
A:sympy.simplify.tests.test_simplify.s2->simplify(e2)
A:sympy.simplify.tests.test_simplify.s3->simplify(e3)
A:sympy.simplify.tests.test_simplify.(n1, n2, n3, n4)->symbols('n1 n2 n3 n4', negative=True)
A:sympy.simplify.tests.test_simplify.(xp, y, x, z)->symbols('xp, y, x, z')
A:sympy.simplify.tests.test_simplify.w->exp(a)
A:sympy.simplify.tests.test_simplify.sinv->simplify(1 / eq)
A:sympy.simplify.tests.test_simplify.ans->Matrix([1])
A:sympy.simplify.tests.test_simplify.M->sympy.Matrix.eye(1)
sympy.simplify.tests.test_simplify.test_Piecewise()
sympy.simplify.tests.test_simplify.test_as_content_primitive()
sympy.simplify.tests.test_simplify.test_besselsimp()
sympy.simplify.tests.test_simplify.test_collect_1()
sympy.simplify.tests.test_simplify.test_collect_2()
sympy.simplify.tests.test_simplify.test_collect_3()
sympy.simplify.tests.test_simplify.test_collect_4()
sympy.simplify.tests.test_simplify.test_collect_5()
sympy.simplify.tests.test_simplify.test_collect_D()
sympy.simplify.tests.test_simplify.test_collect_D_0()
sympy.simplify.tests.test_simplify.test_collect_Wild()
sympy.simplify.tests.test_simplify.test_collect_const()
sympy.simplify.tests.test_simplify.test_collect_func()
sympy.simplify.tests.test_simplify.test_collect_func_xfail()
sympy.simplify.tests.test_simplify.test_collect_issues()
sympy.simplify.tests.test_simplify.test_collect_order()
sympy.simplify.tests.test_simplify.test_combsimp()
sympy.simplify.tests.test_simplify.test_combsimp_gamma()
sympy.simplify.tests.test_simplify.test_diff()
sympy.simplify.tests.test_simplify.test_exptrigsimp()
sympy.simplify.tests.test_simplify.test_extract_minus_sign()
sympy.simplify.tests.test_simplify.test_factorial_simplify()
sympy.simplify.tests.test_simplify.test_fraction()
sympy.simplify.tests.test_simplify.test_fraction_expand()
sympy.simplify.tests.test_simplify.test_hyperbolic_simp()
sympy.simplify.tests.test_simplify.test_hypersimp()
sympy.simplify.tests.test_simplify.test_issue_2827_trigsimp_methods()
sympy.simplify.tests.test_simplify.test_issue_3210()
sympy.simplify.tests.test_simplify.test_issue_3557()
sympy.simplify.tests.test_simplify.test_issue_4194()
sympy.simplify.tests.test_simplify.test_issue_4280()
sympy.simplify.tests.test_simplify.test_issue_4373()
sympy.simplify.tests.test_simplify.test_issue_4494()
sympy.simplify.tests.test_simplify.test_issue_4661()
sympy.simplify.tests.test_simplify.test_issue_4775()
sympy.simplify.tests.test_simplify.test_issue_5615()
sympy.simplify.tests.test_simplify.test_issue_5652()
sympy.simplify.tests.test_simplify.test_issue_5728()
sympy.simplify.tests.test_simplify.test_issue_5805()
sympy.simplify.tests.test_simplify.test_issue_5933()
sympy.simplify.tests.test_simplify.test_issue_5948()
sympy.simplify.tests.test_simplify.test_issue_6097()
sympy.simplify.tests.test_simplify.test_issue_6367()
sympy.simplify.tests.test_simplify.test_issue_6440()
sympy.simplify.tests.test_simplify.test_issue_6811()
sympy.simplify.tests.test_simplify.test_issue_6811_fail()
sympy.simplify.tests.test_simplify.test_issue_6920()
sympy.simplify.tests.test_simplify.test_issue_7001()
sympy.simplify.tests.test_simplify.test_issue_7263()
sympy.simplify.tests.test_simplify.test_issue_from_PR1599()
sympy.simplify.tests.test_simplify.test_logcombine_1()
sympy.simplify.tests.test_simplify.test_logcombine_complex_coeff()
sympy.simplify.tests.test_simplify.test_nsimplify()
sympy.simplify.tests.test_simplify.test_nthroot()
sympy.simplify.tests.test_simplify.test_nthroot1()
sympy.simplify.tests.test_simplify.test_polarify()
sympy.simplify.tests.test_simplify.test_polymorphism()
sympy.simplify.tests.test_simplify.test_posify()
sympy.simplify.tests.test_simplify.test_powdenest()
sympy.simplify.tests.test_simplify.test_powdenest_polar()
sympy.simplify.tests.test_simplify.test_powsimp()
sympy.simplify.tests.test_simplify.test_powsimp_nc()
sympy.simplify.tests.test_simplify.test_powsimp_negated_base()
sympy.simplify.tests.test_simplify.test_powsimp_on_numbers()
sympy.simplify.tests.test_simplify.test_powsimp_polar()
sympy.simplify.tests.test_simplify.test_radsimp()
sympy.simplify.tests.test_simplify.test_radsimp_issue_3214()
sympy.simplify.tests.test_simplify.test_ratsimp()
sympy.simplify.tests.test_simplify.test_ratsimpmodprime()
sympy.simplify.tests.test_simplify.test_rcollect()
sympy.simplify.tests.test_simplify.test_separatevars()
sympy.simplify.tests.test_simplify.test_separatevars_advanced_factor()
sympy.simplify.tests.test_simplify.test_signsimp()
sympy.simplify.tests.test_simplify.test_simplify_complex()
sympy.simplify.tests.test_simplify.test_simplify_expr()
sympy.simplify.tests.test_simplify.test_simplify_fail1()
sympy.simplify.tests.test_simplify.test_simplify_float_vs_integer()
sympy.simplify.tests.test_simplify.test_simplify_issue_1308()
sympy.simplify.tests.test_simplify.test_simplify_measure()
sympy.simplify.tests.test_simplify.test_simplify_other()
sympy.simplify.tests.test_simplify.test_simplify_ratio()
sympy.simplify.tests.test_simplify.test_trigsimp1()
sympy.simplify.tests.test_simplify.test_trigsimp1a()
sympy.simplify.tests.test_simplify.test_trigsimp2()
sympy.simplify.tests.test_simplify.test_trigsimp3()
sympy.simplify.tests.test_simplify.test_trigsimp_groebner()
sympy.simplify.tests.test_simplify.test_trigsimp_issue_2515()
sympy.simplify.tests.test_simplify.test_trigsimp_issue_3826()
sympy.simplify.tests.test_simplify.test_trigsimp_issue_4032()
sympy.simplify.tests.test_simplify.test_trigsimp_issue_7761()
sympy.simplify.tests.test_simplify.test_trigsimp_issues()
sympy.simplify.tests.test_simplify.test_trigsimp_noncommutative()
sympy.simplify.tests.test_simplify.test_unpolarify()
sympy.tests.test_test_Piecewise()
sympy.tests.test_test_as_content_primitive()
sympy.tests.test_test_besselsimp()
sympy.tests.test_test_collect_1()
sympy.tests.test_test_collect_2()
sympy.tests.test_test_collect_3()
sympy.tests.test_test_collect_4()
sympy.tests.test_test_collect_5()
sympy.tests.test_test_collect_D()
sympy.tests.test_test_collect_D_0()
sympy.tests.test_test_collect_Wild()
sympy.tests.test_test_collect_const()
sympy.tests.test_test_collect_func()
sympy.tests.test_test_collect_func_xfail()
sympy.tests.test_test_collect_issues()
sympy.tests.test_test_collect_order()
sympy.tests.test_test_combsimp()
sympy.tests.test_test_combsimp_gamma()
sympy.tests.test_test_diff()
sympy.tests.test_test_exptrigsimp()
sympy.tests.test_test_extract_minus_sign()
sympy.tests.test_test_factorial_simplify()
sympy.tests.test_test_fraction()
sympy.tests.test_test_fraction_expand()
sympy.tests.test_test_hyperbolic_simp()
sympy.tests.test_test_hypersimp()
sympy.tests.test_test_issue_2827_trigsimp_methods()
sympy.tests.test_test_issue_3210()
sympy.tests.test_test_issue_3557()
sympy.tests.test_test_issue_4194()
sympy.tests.test_test_issue_4280()
sympy.tests.test_test_issue_4373()
sympy.tests.test_test_issue_4494()
sympy.tests.test_test_issue_4661()
sympy.tests.test_test_issue_4775()
sympy.tests.test_test_issue_5615()
sympy.tests.test_test_issue_5652()
sympy.tests.test_test_issue_5728()
sympy.tests.test_test_issue_5805()
sympy.tests.test_test_issue_5933()
sympy.tests.test_test_issue_5948()
sympy.tests.test_test_issue_6097()
sympy.tests.test_test_issue_6367()
sympy.tests.test_test_issue_6440()
sympy.tests.test_test_issue_6811()
sympy.tests.test_test_issue_6811_fail()
sympy.tests.test_test_issue_6920()
sympy.tests.test_test_issue_7001()
sympy.tests.test_test_issue_7263()
sympy.tests.test_test_issue_from_PR1599()
sympy.tests.test_test_logcombine_1()
sympy.tests.test_test_logcombine_complex_coeff()
sympy.tests.test_test_nsimplify()
sympy.tests.test_test_nthroot()
sympy.tests.test_test_nthroot1()
sympy.tests.test_test_polarify()
sympy.tests.test_test_polymorphism()
sympy.tests.test_test_posify()
sympy.tests.test_test_powdenest()
sympy.tests.test_test_powdenest_polar()
sympy.tests.test_test_powsimp()
sympy.tests.test_test_powsimp_nc()
sympy.tests.test_test_powsimp_negated_base()
sympy.tests.test_test_powsimp_on_numbers()
sympy.tests.test_test_powsimp_polar()
sympy.tests.test_test_radsimp()
sympy.tests.test_test_radsimp_issue_3214()
sympy.tests.test_test_ratsimp()
sympy.tests.test_test_ratsimpmodprime()
sympy.tests.test_test_rcollect()
sympy.tests.test_test_separatevars()
sympy.tests.test_test_separatevars_advanced_factor()
sympy.tests.test_test_signsimp()
sympy.tests.test_test_simplify_complex()
sympy.tests.test_test_simplify_expr()
sympy.tests.test_test_simplify_fail1()
sympy.tests.test_test_simplify_float_vs_integer()
sympy.tests.test_test_simplify_issue_1308()
sympy.tests.test_test_simplify_measure()
sympy.tests.test_test_simplify_other()
sympy.tests.test_test_simplify_ratio()
sympy.tests.test_test_trigsimp1()
sympy.tests.test_test_trigsimp1a()
sympy.tests.test_test_trigsimp2()
sympy.tests.test_test_trigsimp3()
sympy.tests.test_test_trigsimp_groebner()
sympy.tests.test_test_trigsimp_issue_2515()
sympy.tests.test_test_trigsimp_issue_3826()
sympy.tests.test_test_trigsimp_issue_4032()
sympy.tests.test_test_trigsimp_issue_7761()
sympy.tests.test_test_trigsimp_issues()
sympy.tests.test_test_trigsimp_noncommutative()
sympy.tests.test_test_unpolarify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_function.py----------------------------------------
A:sympy.simplify.tests.test_function.(a, b)->symbols('a, b', cls=Dummy)
A:sympy.simplify.tests.test_function.f->Hyper_Function([2, -a], [b])
A:sympy.simplify.tests.test_function.(a, b, x)->symbols('a, b, x', cls=Dummy)
A:sympy.simplify.tests.test_function.(a, b, c)->symbols('a, b, c', cls=Dummy)
A:sympy.simplify.tests.test_function.n->Dummy(integer=True)
A:sympy.simplify.tests.test_function.p->Dummy(integer=True, positive=True)
sympy.simplify.tests.test_function.test_attrs()
sympy.simplify.tests.test_function.test_call()
sympy.simplify.tests.test_function.test_eq()
sympy.simplify.tests.test_function.test_gamma()
sympy.simplify.tests.test_function.test_has()
sympy.simplify.tests.test_function.test_suitable_origin()
sympy.tests.test_function.test_attrs()
sympy.tests.test_function.test_call()
sympy.tests.test_function.test_eq()
sympy.tests.test_function.test_gamma()
sympy.tests.test_function.test_has()
sympy.tests.test_function.test_suitable_origin()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_sqrtdenest.py----------------------------------------
A:sympy.simplify.tests.test_sqrtdenest.e->sqrt(-2 * r10 + 2 * r2 * sqrt(-2 * r10 + 11) + 14)
A:sympy.simplify.tests.test_sqrtdenest.r->sqrt(-2 * r29 + 11)
A:sympy.simplify.tests.test_sqrtdenest.z->sqrt(1 / (4 * r3 + 7) + 1)
A:sympy.simplify.tests.test_sqrtdenest.n->sqrt(2 * r6 / 7 + 2 * r7 / 7 + 2 * sqrt(42) / 7 + 2)
A:sympy.simplify.tests.test_sqrtdenest.d->sqrt(16 - 2 * r29 + 2 * sqrt(55 - 10 * r29))
A:sympy.simplify.tests.test_sqrtdenest.z1->((-r15 * c - r3 * c + c + r5 * c - r6 - r2 + r10 + sqrt(30)) / 4).expand()
A:sympy.simplify.tests.test_sqrtdenest.c->cos(3)
A:sympy.simplify.tests.test_sqrtdenest.x->Symbol('x')
A:sympy.simplify.tests.test_sqrtdenest.ra->sqrt(1 + r3)
sympy.simplify.tests.test_sqrtdenest.test_issue_5653()
sympy.simplify.tests.test_sqrtdenest.test_issue_5857()
sympy.simplify.tests.test_sqrtdenest.test_issue_6241()
sympy.simplify.tests.test_sqrtdenest.test_sqrt_symbolic_denest()
sympy.simplify.tests.test_sqrtdenest.test_sqrtdenest()
sympy.simplify.tests.test_sqrtdenest.test_sqrtdenest2()
sympy.simplify.tests.test_sqrtdenest.test_sqrtdenest3()
sympy.simplify.tests.test_sqrtdenest.test_sqrtdenest4()
sympy.simplify.tests.test_sqrtdenest.test_sqrtdenest_rec()
sympy.simplify.tests.test_sqrtdenest.test_subsets()
sympy.tests.test_sqrtdenest.test_issue_5653()
sympy.tests.test_sqrtdenest.test_issue_5857()
sympy.tests.test_sqrtdenest.test_issue_6241()
sympy.tests.test_sqrtdenest.test_sqrt_symbolic_denest()
sympy.tests.test_sqrtdenest.test_sqrtdenest()
sympy.tests.test_sqrtdenest.test_sqrtdenest2()
sympy.tests.test_sqrtdenest.test_sqrtdenest3()
sympy.tests.test_sqrtdenest.test_sqrtdenest4()
sympy.tests.test_sqrtdenest.test_sqrtdenest_rec()
sympy.tests.test_sqrtdenest.test_subsets()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/simplify/tests/test_hyperexpand.py----------------------------------------
A:sympy.simplify.tests.test_hyperexpand.r->unpolarify(expand(r, force=True, power_base=True, power_exp=False, mul=False, log=False, multinomial=False, basic=False))
A:sympy.simplify.tests.test_hyperexpand.h->hyper([-1, 1], [z], -1)
A:sympy.simplify.tests.test_hyperexpand.rep[sym]->randcplx()
A:sympy.simplify.tests.test_hyperexpand.closed_form->formula.closed_form.subs(rep)
A:sympy.simplify.tests.test_hyperexpand.cl->(formula.C * formula.B)[0].subs(rep)
A:sympy.simplify.tests.test_hyperexpand.g->meijerg([a1], [a3, a4], [b1], [b3, b4], z)
A:sympy.simplify.tests.test_hyperexpand.(a1, a2, b1)->map(lambda n: randcplx(n), range(3))
A:sympy.simplify.tests.test_hyperexpand.h2->hyper((a2 + 4, a1), (b1, a2), z)
A:sympy.simplify.tests.test_hyperexpand.ops->devise_plan(h2, h, z)
A:sympy.simplify.tests.test_hyperexpand.f->build_hypergeometric_formula(func)
A:sympy.simplify.tests.test_hyperexpand.deriv->make_derivative_operator(f.M, z)
A:sympy.simplify.tests.test_hyperexpand.(func, ops)->reduce_order(Hyper_Function(ap, bq))
A:sympy.simplify.tests.test_hyperexpand.(a1, a2, b1, b2, b3)->map(lambda n: randcplx(n), range(5))
A:sympy.simplify.tests.test_hyperexpand.s->MeijerUnShiftD([a1], [a3, a4], [b1], [b3, b4], 0, z)
A:sympy.simplify.tests.test_hyperexpand.repl[a]->randcplx(n)
A:sympy.simplify.tests.test_hyperexpand.(a1, a2)->map(lambda n: randcplx() - 5 * I - n * I, range(2))
A:sympy.simplify.tests.test_hyperexpand.(b1, b2)->map(lambda n: randcplx() + 5 * I + n * I, range(2))
A:sympy.simplify.tests.test_hyperexpand.(b3, b4, b5, a3, a4, a5)->map(lambda n: randcplx(), range(6))
A:sympy.simplify.tests.test_hyperexpand.g2->meijerg([a1], [a3, a4, b2 - 1], [b1, b2 + 2], [b3, b4], z)
A:sympy.simplify.tests.test_hyperexpand.(niq, ops)->reduce_order_meijer(G_Function(an, ap, bm, bq))
A:sympy.simplify.tests.test_hyperexpand.(a1, a2, a3, a4, a5, b1, b2, b3, b4, b5)->map(lambda n: randcplx(n), range(10))
A:sympy.simplify.tests.test_hyperexpand.(a, b)->sympify([a, b])
A:sympy.simplify.tests.test_hyperexpand.m->meijerg(an, ap, bm, bq, z)
A:sympy.simplify.tests.test_hyperexpand.m2->hyperexpand(m, allow_hyper=True)
A:sympy.simplify.tests.test_hyperexpand.(a, b, c, d, e)->map(lambda _: randcplx(), range(5))
A:sympy.simplify.tests.test_hyperexpand.n->Symbol('n', integer=True)
A:sympy.simplify.tests.test_hyperexpand.o->S(1)
sympy.simplify.tests.test_hyperexpand._randrat()
sympy.simplify.tests.test_hyperexpand.can_do(ap,bq,numerical=True,div=1,lowerplane=False)
sympy.simplify.tests.test_hyperexpand.can_do_meijer(a1,a2,b1,b2,numeric=True)
sympy.simplify.tests.test_hyperexpand.op(f)
sympy.simplify.tests.test_hyperexpand.randcplx(offset=-1)
sympy.simplify.tests.test_hyperexpand.test_Mod1_behavior()
sympy.simplify.tests.test_hyperexpand.test_branch_bug()
sympy.simplify.tests.test_hyperexpand.test_bug()
sympy.simplify.tests.test_hyperexpand.test_formulae()
sympy.simplify.tests.test_hyperexpand.test_hyperexpand()
sympy.simplify.tests.test_hyperexpand.test_hyperexpand_bases()
sympy.simplify.tests.test_hyperexpand.test_hyperexpand_parametric()
sympy.simplify.tests.test_hyperexpand.test_hyperexpand_special()
sympy.simplify.tests.test_hyperexpand.test_lerchphi()
sympy.simplify.tests.test_hyperexpand.test_meijerg()
sympy.simplify.tests.test_hyperexpand.test_meijerg_confluence()
sympy.simplify.tests.test_hyperexpand.test_meijerg_expand()
sympy.simplify.tests.test_hyperexpand.test_meijerg_expand_fail()
sympy.simplify.tests.test_hyperexpand.test_meijerg_formulae()
sympy.simplify.tests.test_hyperexpand.test_meijerg_lookup()
sympy.simplify.tests.test_hyperexpand.test_meijerg_shift_operators()
sympy.simplify.tests.test_hyperexpand.test_partial_simp()
sympy.simplify.tests.test_hyperexpand.test_plan()
sympy.simplify.tests.test_hyperexpand.test_plan_derivatives()
sympy.simplify.tests.test_hyperexpand.test_polynomial()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_1()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_10()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_11()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_12()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_2()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_2F1()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_3()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_4()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_5()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_6()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_7()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_8()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_9()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_fail_2F1()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_fail_3F2()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_fail_other()
sympy.simplify.tests.test_hyperexpand.test_prudnikov_misc()
sympy.simplify.tests.test_hyperexpand.test_reduction_operators()
sympy.simplify.tests.test_hyperexpand.test_roach()
sympy.simplify.tests.test_hyperexpand.test_roach_fail()
sympy.simplify.tests.test_hyperexpand.test_shift_operators()
sympy.simplify.tests.test_hyperexpand.test_shifted_sum()
sympy.simplify.tests.test_hyperexpand.test_ushift_operators()
sympy.tests.test_hyperexpand._randrat()
sympy.tests.test_hyperexpand.can_do(ap,bq,numerical=True,div=1,lowerplane=False)
sympy.tests.test_hyperexpand.can_do_meijer(a1,a2,b1,b2,numeric=True)
sympy.tests.test_hyperexpand.op(f)
sympy.tests.test_hyperexpand.randcplx(offset=-1)
sympy.tests.test_hyperexpand.test_Mod1_behavior()
sympy.tests.test_hyperexpand.test_branch_bug()
sympy.tests.test_hyperexpand.test_bug()
sympy.tests.test_hyperexpand.test_formulae()
sympy.tests.test_hyperexpand.test_hyperexpand()
sympy.tests.test_hyperexpand.test_hyperexpand_bases()
sympy.tests.test_hyperexpand.test_hyperexpand_parametric()
sympy.tests.test_hyperexpand.test_hyperexpand_special()
sympy.tests.test_hyperexpand.test_lerchphi()
sympy.tests.test_hyperexpand.test_meijerg()
sympy.tests.test_hyperexpand.test_meijerg_confluence()
sympy.tests.test_hyperexpand.test_meijerg_expand()
sympy.tests.test_hyperexpand.test_meijerg_expand_fail()
sympy.tests.test_hyperexpand.test_meijerg_formulae()
sympy.tests.test_hyperexpand.test_meijerg_lookup()
sympy.tests.test_hyperexpand.test_meijerg_shift_operators()
sympy.tests.test_hyperexpand.test_partial_simp()
sympy.tests.test_hyperexpand.test_plan()
sympy.tests.test_hyperexpand.test_plan_derivatives()
sympy.tests.test_hyperexpand.test_polynomial()
sympy.tests.test_hyperexpand.test_prudnikov_1()
sympy.tests.test_hyperexpand.test_prudnikov_10()
sympy.tests.test_hyperexpand.test_prudnikov_11()
sympy.tests.test_hyperexpand.test_prudnikov_12()
sympy.tests.test_hyperexpand.test_prudnikov_2()
sympy.tests.test_hyperexpand.test_prudnikov_2F1()
sympy.tests.test_hyperexpand.test_prudnikov_3()
sympy.tests.test_hyperexpand.test_prudnikov_4()
sympy.tests.test_hyperexpand.test_prudnikov_5()
sympy.tests.test_hyperexpand.test_prudnikov_6()
sympy.tests.test_hyperexpand.test_prudnikov_7()
sympy.tests.test_hyperexpand.test_prudnikov_8()
sympy.tests.test_hyperexpand.test_prudnikov_9()
sympy.tests.test_hyperexpand.test_prudnikov_fail_2F1()
sympy.tests.test_hyperexpand.test_prudnikov_fail_3F2()
sympy.tests.test_hyperexpand.test_prudnikov_fail_other()
sympy.tests.test_hyperexpand.test_prudnikov_misc()
sympy.tests.test_hyperexpand.test_reduction_operators()
sympy.tests.test_hyperexpand.test_roach()
sympy.tests.test_hyperexpand.test_roach_fail()
sympy.tests.test_hyperexpand.test_shift_operators()
sympy.tests.test_hyperexpand.test_shifted_sum()
sympy.tests.test_hyperexpand.test_ushift_operators()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyquinticconst.py----------------------------------------
A:sympy.polys.polyquinticconst.x->Symbol('x')
A:sympy.polys.polyquinticconst.(_, _, self.p, self.q, self.r, self.s)->poly.all_coeffs()
A:sympy.polys.polyquinticconst.u->S(-25 * self.q / 2)
sympy.polyquinticconst.PolyQuintic(self,poly)
sympy.polyquinticconst.PolyQuintic.F(self)
sympy.polyquinticconst.PolyQuintic.T(self,theta,d)
sympy.polyquinticconst.PolyQuintic.a(self)
sympy.polyquinticconst.PolyQuintic.b(self)
sympy.polyquinticconst.PolyQuintic.c(self)
sympy.polyquinticconst.PolyQuintic.f20(self)
sympy.polyquinticconst.PolyQuintic.l0(self,theta)
sympy.polyquinticconst.PolyQuintic.o(self)
sympy.polyquinticconst.PolyQuintic.order(self,theta,d)
sympy.polyquinticconst.PolyQuintic.uv(self,theta,d)
sympy.polyquinticconst.PolyQuintic.zeta(self)
sympy.polys.polyquinticconst.PolyQuintic(self,poly)
sympy.polys.polyquinticconst.PolyQuintic.F(self)
sympy.polys.polyquinticconst.PolyQuintic.T(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.__init__(self,poly)
sympy.polys.polyquinticconst.PolyQuintic.a(self)
sympy.polys.polyquinticconst.PolyQuintic.b(self)
sympy.polys.polyquinticconst.PolyQuintic.c(self)
sympy.polys.polyquinticconst.PolyQuintic.f20(self)
sympy.polys.polyquinticconst.PolyQuintic.l0(self,theta)
sympy.polys.polyquinticconst.PolyQuintic.o(self)
sympy.polys.polyquinticconst.PolyQuintic.order(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.uv(self,theta,d)
sympy.polys.polyquinticconst.PolyQuintic.zeta(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/heuristicgcd.py----------------------------------------
A:sympy.polys.heuristicgcd.(gcd, f, g)->f.extract_ground(g)
A:sympy.polys.heuristicgcd.f_norm->f.max_norm()
A:sympy.polys.heuristicgcd.g_norm->h.trunc_ground(x).max_norm()
A:sympy.polys.heuristicgcd.B->domain(2 * min(f_norm, g_norm) + 29)
A:sympy.polys.heuristicgcd.x->max(min(B, 99 * domain.sqrt(B)), 2 * min(f_norm // abs(f.LC), g_norm // abs(g.LC)) + 2)
A:sympy.polys.heuristicgcd.ff->f.evaluate(x0, x)
A:sympy.polys.heuristicgcd.gg->h.trunc_ground(x).evaluate(x0, x)
A:sympy.polys.heuristicgcd.(h, cff, cfg)->heugcd(ff, gg)
A:sympy.polys.heuristicgcd.h->(h - g).quo_ground(x)
A:sympy.polys.heuristicgcd.(cff_, r)->f.div(h)
A:sympy.polys.heuristicgcd.(cfg_, r)->h.trunc_ground(x).div(h)
A:sympy.polys.heuristicgcd.cff->_gcd_interpolate(cff, x, ring)
A:sympy.polys.heuristicgcd.(h, r)->h.trunc_ground(x).div(cfg)
A:sympy.polys.heuristicgcd.cfg->_gcd_interpolate(cfg, x, ring)
A:sympy.polys.heuristicgcd.g->(h - g).quo_ground(x).trunc_ground(x)
sympy.heuristicgcd._gcd_interpolate(h,x,ring)
sympy.heuristicgcd.heugcd(f,g)
sympy.polys.heuristicgcd._gcd_interpolate(h,x,ring)
sympy.polys.heuristicgcd.heugcd(f,g)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyfuncs.py----------------------------------------
A:sympy.polys.polyfuncs.(F, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polyfuncs.poly->symmetric_poly(i + 1, roots)
A:sympy.polys.polyfuncs.indices->list(range(0, len(gens) - 1))
A:sympy.polys.polyfuncs.weights->list(range(len(gens), 0, -1))
A:sympy.polys.polyfuncs.height->max([n * m for (n, m) in zip(weights, monom)])
A:sympy.polys.polyfuncs.product->product.mul(p).mul(p)
A:sympy.polys.polyfuncs.n->f.degree()
A:sympy.polys.polyfuncs.(X, Y)->list(zip(*data))
A:sympy.polys.polyfuncs.X->list(range(1, n + 1))
A:sympy.polys.polyfuncs.Y->list(data)
A:sympy.polys.polyfuncs.(f, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polyfuncs.roots->take(roots, n)
sympy.horner(f,*gens,**args)
sympy.interpolate(data,x)
sympy.polys.polyfuncs.horner(f,*gens,**args)
sympy.polys.polyfuncs.interpolate(data,x)
sympy.polys.polyfuncs.symmetrize(F,*gens,**args)
sympy.polys.polyfuncs.viete(f,roots=None,*gens,**args)
sympy.symmetrize(F,*gens,**args)
sympy.viete(f,roots=None,*gens,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyclasses.py----------------------------------------
A:sympy.polys.polyclasses.rep->dmp_to_dict(f.rep, 0, f.dom)
A:sympy.polys.polyclasses.(rep, lev)->dmp_validate(rep)
A:sympy.polys.polyclasses.ring->ring.unify(g.ring).unify(g.ring)
A:sympy.polys.polyclasses.F->dup_convert(f.rep, f.dom, dom)
A:sympy.polys.polyclasses.G->dup_convert(g.rep, g.dom, dom)
A:sympy.polys.polyclasses.rep[k]->f.dom.to_sympy(v)
A:sympy.polys.polyclasses.n->dup_degree(f.rep)
A:sympy.polys.polyclasses.(J, F)->dmp_terms_gcd(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(F, lev)->dmp_inject(f.rep, f.lev, f.dom, front=front)
A:sympy.polys.polyclasses.(J, F, u)->dmp_exclude(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(lev, dom, per, F, G)->f.frac_unify(g)
A:sympy.polys.polyclasses.(q, r)->dmp_div(F, G, lev, dom)
A:sympy.polys.polyclasses.res->f.per(f.den, f.num, cancel=False)
A:sympy.polys.polyclasses.td->f.total_degree()
A:sympy.polys.polyclasses.d->sum(term[0])
A:sympy.polys.polyclasses.l->list(term[0])
A:sympy.polys.polyclasses.monoms->f.monoms()
A:sympy.polys.polyclasses.tdeg->sum(monoms[0])
A:sympy.polys.polyclasses._tdeg->sum(monom)
A:sympy.polys.polyclasses.(coeff, F)->dmp_clear_denoms(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(s, h)->dup_half_gcdex(F, G, dom)
A:sympy.polys.polyclasses.(s, t, h)->dup_gcdex(F, G, dom)
A:sympy.polys.polyclasses.R->dmp_subresultants(F, G, lev, dom)
A:sympy.polys.polyclasses.(res, R)->dmp_resultant(F, G, lev, dom, includePRS=includePRS)
A:sympy.polys.polyclasses.(h, cff, cfg)->dmp_inner_gcd(F, G, lev, dom)
A:sympy.polys.polyclasses.(F, G)->dmp_cancel(F, G, lev, dom, include=True)
A:sympy.polys.polyclasses.(cF, cG, F, G)->dmp_cancel(F, G, lev, dom, include=False)
A:sympy.polys.polyclasses.(cont, F)->dmp_ground_primitive(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(s, g, r)->dmp_sqf_norm(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.(coeff, factors)->dmp_factor_list(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.factors->dmp_factor_list_include(f.rep, f.lev, f.dom)
A:sympy.polys.polyclasses.g->f.ring.convert(g)
A:sympy.polys.polyclasses.(_, _, _, F, G)->f.frac_unify(g)
A:sympy.polys.polyclasses.(num, den, lev)->cls._parse(rep, dom, lev)
A:sympy.polys.polyclasses.(num, den)->dmp_cancel(num, den, lev, dom)
A:sympy.polys.polyclasses.obj->object.__new__(cls)
A:sympy.polys.polyclasses.num->dmp_mul(F_num, G_den, lev, dom)
A:sympy.polys.polyclasses.den->dmp_mul(F_den, G_num, lev, dom)
A:sympy.polys.polyclasses.(num, num_lev)->dmp_validate(num)
A:sympy.polys.polyclasses.(den, den_lev)->dmp_validate(den)
A:sympy.polys.polyclasses.(num, lev)->dmp_validate(num)
A:sympy.polys.polyclasses.(lev, dom, per, (F_num, F_den), G)->f.poly_unify(g)
A:sympy.polys.polyclasses.(_, _, _, (F_num, F_den), G)->f.poly_unify(g)
A:sympy.polys.polyclasses.self.rep->dup_strip(rep)
A:sympy.polys.polyclasses.self.mod->dup_strip(mod)
A:sympy.polys.polyclasses.dom->f.dom.unify(g.dom)
A:sympy.polys.polyclasses.mod->dup_convert(f.mod, f.dom, dom)
A:sympy.polys.polyclasses.(dom, per, F, G, mod)->f.unify(g)
A:sympy.polys.polyclasses.(dom, _, _, _, mod)->f.unify(g)
A:sympy.polys.polyclasses.(_, _, F, G, _)->f.unify(g)
sympy.polyclasses.ANP(self,rep,mod,dom)
sympy.polyclasses.ANP.LC(f)
sympy.polyclasses.ANP.TC(f)
sympy.polyclasses.ANP.__add__(f,g)
sympy.polyclasses.ANP.__div__(f,g)
sympy.polyclasses.ANP.__divmod__(f,g)
sympy.polyclasses.ANP.__eq__(f,g)
sympy.polyclasses.ANP.__ge__(f,g)
sympy.polyclasses.ANP.__gt__(f,g)
sympy.polyclasses.ANP.__hash__(f)
sympy.polyclasses.ANP.__le__(f,g)
sympy.polyclasses.ANP.__lt__(f,g)
sympy.polyclasses.ANP.__mod__(f,g)
sympy.polyclasses.ANP.__mul__(f,g)
sympy.polyclasses.ANP.__ne__(f,g)
sympy.polyclasses.ANP.__neg__(f)
sympy.polyclasses.ANP.__nonzero__(f)
sympy.polyclasses.ANP.__pow__(f,n)
sympy.polyclasses.ANP.__radd__(f,g)
sympy.polyclasses.ANP.__repr__(f)
sympy.polyclasses.ANP.__rmul__(f,g)
sympy.polyclasses.ANP.__rsub__(f,g)
sympy.polyclasses.ANP.__sub__(f,g)
sympy.polyclasses.ANP.add(f,g)
sympy.polyclasses.ANP.div(f,g)
sympy.polyclasses.ANP.from_list(cls,rep,mod,dom)
sympy.polyclasses.ANP.is_ground(f)
sympy.polyclasses.ANP.is_one(f)
sympy.polyclasses.ANP.is_zero(f)
sympy.polyclasses.ANP.mul(f,g)
sympy.polyclasses.ANP.neg(f)
sympy.polyclasses.ANP.one(cls,mod,dom)
sympy.polyclasses.ANP.per(f,rep,mod=None,dom=None)
sympy.polyclasses.ANP.pow(f,n)
sympy.polyclasses.ANP.quo(f,g)
sympy.polyclasses.ANP.rem(f,g)
sympy.polyclasses.ANP.sub(f,g)
sympy.polyclasses.ANP.to_dict(f)
sympy.polyclasses.ANP.to_list(f)
sympy.polyclasses.ANP.to_sympy_dict(f)
sympy.polyclasses.ANP.to_sympy_list(f)
sympy.polyclasses.ANP.to_tuple(f)
sympy.polyclasses.ANP.unify(f,g)
sympy.polyclasses.ANP.zero(cls,mod,dom)
sympy.polyclasses.DMF(self,rep,dom,lev=None,ring=None)
sympy.polyclasses.DMF.__add__(f,g)
sympy.polyclasses.DMF.__div__(f,g)
sympy.polyclasses.DMF.__eq__(f,g)
sympy.polyclasses.DMF.__ge__(f,g)
sympy.polyclasses.DMF.__gt__(f,g)
sympy.polyclasses.DMF.__hash__(f)
sympy.polyclasses.DMF.__le__(f,g)
sympy.polyclasses.DMF.__lt__(f,g)
sympy.polyclasses.DMF.__mul__(f,g)
sympy.polyclasses.DMF.__ne__(f,g)
sympy.polyclasses.DMF.__neg__(f)
sympy.polyclasses.DMF.__nonzero__(f)
sympy.polyclasses.DMF.__pow__(f,n)
sympy.polyclasses.DMF.__radd__(f,g)
sympy.polyclasses.DMF.__rdiv__(self,g)
sympy.polyclasses.DMF.__repr__(f)
sympy.polyclasses.DMF.__rmul__(f,g)
sympy.polyclasses.DMF.__rsub__(f,g)
sympy.polyclasses.DMF.__sub__(f,g)
sympy.polyclasses.DMF._parse(cls,rep,dom,lev=None)
sympy.polyclasses.DMF.add(f,g)
sympy.polyclasses.DMF.cancel(f)
sympy.polyclasses.DMF.denom(f)
sympy.polyclasses.DMF.frac_unify(f,g)
sympy.polyclasses.DMF.half_per(f,rep,kill=False)
sympy.polyclasses.DMF.invert(f,check=True)
sympy.polyclasses.DMF.is_one(f)
sympy.polyclasses.DMF.is_zero(f)
sympy.polyclasses.DMF.mul(f,g)
sympy.polyclasses.DMF.neg(f)
sympy.polyclasses.DMF.new(cls,rep,dom,lev=None,ring=None)
sympy.polyclasses.DMF.numer(f)
sympy.polyclasses.DMF.one(cls,lev,dom,ring=None)
sympy.polyclasses.DMF.per(f,num,den,cancel=True,kill=False,ring=None)
sympy.polyclasses.DMF.poly_unify(f,g)
sympy.polyclasses.DMF.pow(f,n)
sympy.polyclasses.DMF.quo(f,g)
sympy.polyclasses.DMF.sub(f,g)
sympy.polyclasses.DMF.zero(cls,lev,dom,ring=None)
sympy.polyclasses.DMP(self,rep,dom,lev=None,ring=None)
sympy.polyclasses.DMP.LC(f)
sympy.polyclasses.DMP.TC(f)
sympy.polyclasses.DMP.__abs__(f)
sympy.polyclasses.DMP.__add__(f,g)
sympy.polyclasses.DMP.__div__(f,g)
sympy.polyclasses.DMP.__divmod__(f,g)
sympy.polyclasses.DMP.__eq__(f,g)
sympy.polyclasses.DMP.__floordiv__(f,g)
sympy.polyclasses.DMP.__ge__(f,g)
sympy.polyclasses.DMP.__gt__(f,g)
sympy.polyclasses.DMP.__hash__(f)
sympy.polyclasses.DMP.__le__(f,g)
sympy.polyclasses.DMP.__lt__(f,g)
sympy.polyclasses.DMP.__mod__(f,g)
sympy.polyclasses.DMP.__mul__(f,g)
sympy.polyclasses.DMP.__ne__(f,g)
sympy.polyclasses.DMP.__neg__(f)
sympy.polyclasses.DMP.__nonzero__(f)
sympy.polyclasses.DMP.__pow__(f,n)
sympy.polyclasses.DMP.__radd__(f,g)
sympy.polyclasses.DMP.__rdiv__(f,g)
sympy.polyclasses.DMP.__repr__(f)
sympy.polyclasses.DMP.__rmul__(f,g)
sympy.polyclasses.DMP.__rsub__(f,g)
sympy.polyclasses.DMP.__sub__(f,g)
sympy.polyclasses.DMP._strict_eq(f,g)
sympy.polyclasses.DMP.abs(f)
sympy.polyclasses.DMP.add(f,g)
sympy.polyclasses.DMP.add_ground(f,c)
sympy.polyclasses.DMP.all_coeffs(f)
sympy.polyclasses.DMP.all_monoms(f)
sympy.polyclasses.DMP.all_terms(f)
sympy.polyclasses.DMP.cancel(f,g,include=True)
sympy.polyclasses.DMP.clear_denoms(f)
sympy.polyclasses.DMP.coeffs(f,order=None)
sympy.polyclasses.DMP.cofactors(f,g)
sympy.polyclasses.DMP.compose(f,g)
sympy.polyclasses.DMP.content(f)
sympy.polyclasses.DMP.convert(f,dom)
sympy.polyclasses.DMP.count_complex_roots(f,inf=None,sup=None)
sympy.polyclasses.DMP.count_real_roots(f,inf=None,sup=None)
sympy.polyclasses.DMP.decompose(f)
sympy.polyclasses.DMP.deflate(f)
sympy.polyclasses.DMP.degree(f,j=0)
sympy.polyclasses.DMP.degree_list(f)
sympy.polyclasses.DMP.diff(f,m=1,j=0)
sympy.polyclasses.DMP.discriminant(f)
sympy.polyclasses.DMP.div(f,g)
sympy.polyclasses.DMP.eject(f,dom,front=False)
sympy.polyclasses.DMP.eq(f,g,strict=False)
sympy.polyclasses.DMP.eval(f,a,j=0)
sympy.polyclasses.DMP.exclude(f)
sympy.polyclasses.DMP.exquo(f,g)
sympy.polyclasses.DMP.exquo_ground(f,c)
sympy.polyclasses.DMP.factor_list(f)
sympy.polyclasses.DMP.factor_list_include(f)
sympy.polyclasses.DMP.from_dict(cls,rep,lev,dom)
sympy.polyclasses.DMP.from_list(cls,rep,lev,dom)
sympy.polyclasses.DMP.from_monoms_coeffs(cls,monoms,coeffs,lev,dom,ring=None)
sympy.polyclasses.DMP.from_sympy_list(cls,rep,lev,dom)
sympy.polyclasses.DMP.gcd(f,g)
sympy.polyclasses.DMP.gcdex(f,g)
sympy.polyclasses.DMP.gff_list(f)
sympy.polyclasses.DMP.half_gcdex(f,g)
sympy.polyclasses.DMP.homogeneous_order(f)
sympy.polyclasses.DMP.homogenize(f,s)
sympy.polyclasses.DMP.inject(f,front=False)
sympy.polyclasses.DMP.integrate(f,m=1,j=0)
sympy.polyclasses.DMP.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.polyclasses.DMP.invert(f,g)
sympy.polyclasses.DMP.is_cyclotomic(f)
sympy.polyclasses.DMP.is_ground(f)
sympy.polyclasses.DMP.is_homogeneous(f)
sympy.polyclasses.DMP.is_irreducible(f)
sympy.polyclasses.DMP.is_linear(f)
sympy.polyclasses.DMP.is_monic(f)
sympy.polyclasses.DMP.is_monomial(f)
sympy.polyclasses.DMP.is_one(f)
sympy.polyclasses.DMP.is_primitive(f)
sympy.polyclasses.DMP.is_quadratic(f)
sympy.polyclasses.DMP.is_sqf(f)
sympy.polyclasses.DMP.is_zero(f)
sympy.polyclasses.DMP.l1_norm(f)
sympy.polyclasses.DMP.lcm(f,g)
sympy.polyclasses.DMP.lift(f)
sympy.polyclasses.DMP.max_norm(f)
sympy.polyclasses.DMP.monic(f)
sympy.polyclasses.DMP.monoms(f,order=None)
sympy.polyclasses.DMP.mul(f,g)
sympy.polyclasses.DMP.mul_ground(f,c)
sympy.polyclasses.DMP.ne(f,g,strict=False)
sympy.polyclasses.DMP.neg(f)
sympy.polyclasses.DMP.nth(f,*N)
sympy.polyclasses.DMP.one(cls,lev,dom,ring=None)
sympy.polyclasses.DMP.pdiv(f,g)
sympy.polyclasses.DMP.per(f,rep,dom=None,kill=False,ring=None)
sympy.polyclasses.DMP.permute(f,P)
sympy.polyclasses.DMP.pexquo(f,g)
sympy.polyclasses.DMP.pow(f,n)
sympy.polyclasses.DMP.pquo(f,g)
sympy.polyclasses.DMP.prem(f,g)
sympy.polyclasses.DMP.primitive(f)
sympy.polyclasses.DMP.quo(f,g)
sympy.polyclasses.DMP.quo_ground(f,c)
sympy.polyclasses.DMP.refine_root(f,s,t,eps=None,steps=None,fast=False)
sympy.polyclasses.DMP.rem(f,g)
sympy.polyclasses.DMP.resultant(f,g,includePRS=False)
sympy.polyclasses.DMP.revert(f,n)
sympy.polyclasses.DMP.shift(f,a)
sympy.polyclasses.DMP.slice(f,m,n,j=0)
sympy.polyclasses.DMP.sqf_list(f,all=False)
sympy.polyclasses.DMP.sqf_list_include(f,all=False)
sympy.polyclasses.DMP.sqf_norm(f)
sympy.polyclasses.DMP.sqf_part(f)
sympy.polyclasses.DMP.sqr(f)
sympy.polyclasses.DMP.sturm(f)
sympy.polyclasses.DMP.sub(f,g)
sympy.polyclasses.DMP.sub_ground(f,c)
sympy.polyclasses.DMP.subresultants(f,g)
sympy.polyclasses.DMP.terms(f,order=None)
sympy.polyclasses.DMP.terms_gcd(f)
sympy.polyclasses.DMP.to_dict(f,zero=False)
sympy.polyclasses.DMP.to_exact(f)
sympy.polyclasses.DMP.to_field(f)
sympy.polyclasses.DMP.to_ring(f)
sympy.polyclasses.DMP.to_sympy_dict(f,zero=False)
sympy.polyclasses.DMP.to_tuple(f)
sympy.polyclasses.DMP.total_degree(f)
sympy.polyclasses.DMP.trunc(f,p)
sympy.polyclasses.DMP.unify(f,g)
sympy.polyclasses.DMP.zero(cls,lev,dom,ring=None)
sympy.polyclasses.GenericPoly(PicklableWithSlots)
sympy.polyclasses.GenericPoly._perify_factors(per,result,include)
sympy.polyclasses.GenericPoly.ground_to_exact(f)
sympy.polyclasses.GenericPoly.ground_to_field(f)
sympy.polyclasses.GenericPoly.ground_to_ring(f)
sympy.polyclasses.init_normal_ANP(rep,mod,dom)
sympy.polyclasses.init_normal_DMF(num,den,lev,dom)
sympy.polyclasses.init_normal_DMP(rep,lev,dom)
sympy.polys.polyclasses.ANP(self,rep,mod,dom)
sympy.polys.polyclasses.ANP.LC(f)
sympy.polys.polyclasses.ANP.TC(f)
sympy.polys.polyclasses.ANP.__add__(f,g)
sympy.polys.polyclasses.ANP.__div__(f,g)
sympy.polys.polyclasses.ANP.__divmod__(f,g)
sympy.polys.polyclasses.ANP.__eq__(f,g)
sympy.polys.polyclasses.ANP.__ge__(f,g)
sympy.polys.polyclasses.ANP.__gt__(f,g)
sympy.polys.polyclasses.ANP.__hash__(f)
sympy.polys.polyclasses.ANP.__init__(self,rep,mod,dom)
sympy.polys.polyclasses.ANP.__le__(f,g)
sympy.polys.polyclasses.ANP.__lt__(f,g)
sympy.polys.polyclasses.ANP.__mod__(f,g)
sympy.polys.polyclasses.ANP.__mul__(f,g)
sympy.polys.polyclasses.ANP.__ne__(f,g)
sympy.polys.polyclasses.ANP.__neg__(f)
sympy.polys.polyclasses.ANP.__nonzero__(f)
sympy.polys.polyclasses.ANP.__pow__(f,n)
sympy.polys.polyclasses.ANP.__radd__(f,g)
sympy.polys.polyclasses.ANP.__repr__(f)
sympy.polys.polyclasses.ANP.__rmul__(f,g)
sympy.polys.polyclasses.ANP.__rsub__(f,g)
sympy.polys.polyclasses.ANP.__sub__(f,g)
sympy.polys.polyclasses.ANP.add(f,g)
sympy.polys.polyclasses.ANP.div(f,g)
sympy.polys.polyclasses.ANP.from_list(cls,rep,mod,dom)
sympy.polys.polyclasses.ANP.is_ground(f)
sympy.polys.polyclasses.ANP.is_one(f)
sympy.polys.polyclasses.ANP.is_zero(f)
sympy.polys.polyclasses.ANP.mul(f,g)
sympy.polys.polyclasses.ANP.neg(f)
sympy.polys.polyclasses.ANP.one(cls,mod,dom)
sympy.polys.polyclasses.ANP.per(f,rep,mod=None,dom=None)
sympy.polys.polyclasses.ANP.pow(f,n)
sympy.polys.polyclasses.ANP.quo(f,g)
sympy.polys.polyclasses.ANP.rem(f,g)
sympy.polys.polyclasses.ANP.sub(f,g)
sympy.polys.polyclasses.ANP.to_dict(f)
sympy.polys.polyclasses.ANP.to_list(f)
sympy.polys.polyclasses.ANP.to_sympy_dict(f)
sympy.polys.polyclasses.ANP.to_sympy_list(f)
sympy.polys.polyclasses.ANP.to_tuple(f)
sympy.polys.polyclasses.ANP.unify(f,g)
sympy.polys.polyclasses.ANP.zero(cls,mod,dom)
sympy.polys.polyclasses.DMF(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMF.__add__(f,g)
sympy.polys.polyclasses.DMF.__div__(f,g)
sympy.polys.polyclasses.DMF.__eq__(f,g)
sympy.polys.polyclasses.DMF.__ge__(f,g)
sympy.polys.polyclasses.DMF.__gt__(f,g)
sympy.polys.polyclasses.DMF.__hash__(f)
sympy.polys.polyclasses.DMF.__init__(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMF.__le__(f,g)
sympy.polys.polyclasses.DMF.__lt__(f,g)
sympy.polys.polyclasses.DMF.__mul__(f,g)
sympy.polys.polyclasses.DMF.__ne__(f,g)
sympy.polys.polyclasses.DMF.__neg__(f)
sympy.polys.polyclasses.DMF.__nonzero__(f)
sympy.polys.polyclasses.DMF.__pow__(f,n)
sympy.polys.polyclasses.DMF.__radd__(f,g)
sympy.polys.polyclasses.DMF.__rdiv__(self,g)
sympy.polys.polyclasses.DMF.__repr__(f)
sympy.polys.polyclasses.DMF.__rmul__(f,g)
sympy.polys.polyclasses.DMF.__rsub__(f,g)
sympy.polys.polyclasses.DMF.__sub__(f,g)
sympy.polys.polyclasses.DMF._parse(cls,rep,dom,lev=None)
sympy.polys.polyclasses.DMF.add(f,g)
sympy.polys.polyclasses.DMF.cancel(f)
sympy.polys.polyclasses.DMF.denom(f)
sympy.polys.polyclasses.DMF.frac_unify(f,g)
sympy.polys.polyclasses.DMF.half_per(f,rep,kill=False)
sympy.polys.polyclasses.DMF.invert(f,check=True)
sympy.polys.polyclasses.DMF.is_one(f)
sympy.polys.polyclasses.DMF.is_zero(f)
sympy.polys.polyclasses.DMF.mul(f,g)
sympy.polys.polyclasses.DMF.neg(f)
sympy.polys.polyclasses.DMF.new(cls,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMF.numer(f)
sympy.polys.polyclasses.DMF.one(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMF.per(f,num,den,cancel=True,kill=False,ring=None)
sympy.polys.polyclasses.DMF.poly_unify(f,g)
sympy.polys.polyclasses.DMF.pow(f,n)
sympy.polys.polyclasses.DMF.quo(f,g)
sympy.polys.polyclasses.DMF.sub(f,g)
sympy.polys.polyclasses.DMF.zero(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMP(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMP.LC(f)
sympy.polys.polyclasses.DMP.TC(f)
sympy.polys.polyclasses.DMP.__abs__(f)
sympy.polys.polyclasses.DMP.__add__(f,g)
sympy.polys.polyclasses.DMP.__div__(f,g)
sympy.polys.polyclasses.DMP.__divmod__(f,g)
sympy.polys.polyclasses.DMP.__eq__(f,g)
sympy.polys.polyclasses.DMP.__floordiv__(f,g)
sympy.polys.polyclasses.DMP.__ge__(f,g)
sympy.polys.polyclasses.DMP.__gt__(f,g)
sympy.polys.polyclasses.DMP.__hash__(f)
sympy.polys.polyclasses.DMP.__init__(self,rep,dom,lev=None,ring=None)
sympy.polys.polyclasses.DMP.__le__(f,g)
sympy.polys.polyclasses.DMP.__lt__(f,g)
sympy.polys.polyclasses.DMP.__mod__(f,g)
sympy.polys.polyclasses.DMP.__mul__(f,g)
sympy.polys.polyclasses.DMP.__ne__(f,g)
sympy.polys.polyclasses.DMP.__neg__(f)
sympy.polys.polyclasses.DMP.__nonzero__(f)
sympy.polys.polyclasses.DMP.__pow__(f,n)
sympy.polys.polyclasses.DMP.__radd__(f,g)
sympy.polys.polyclasses.DMP.__rdiv__(f,g)
sympy.polys.polyclasses.DMP.__repr__(f)
sympy.polys.polyclasses.DMP.__rmul__(f,g)
sympy.polys.polyclasses.DMP.__rsub__(f,g)
sympy.polys.polyclasses.DMP.__sub__(f,g)
sympy.polys.polyclasses.DMP._strict_eq(f,g)
sympy.polys.polyclasses.DMP.abs(f)
sympy.polys.polyclasses.DMP.add(f,g)
sympy.polys.polyclasses.DMP.add_ground(f,c)
sympy.polys.polyclasses.DMP.all_coeffs(f)
sympy.polys.polyclasses.DMP.all_monoms(f)
sympy.polys.polyclasses.DMP.all_terms(f)
sympy.polys.polyclasses.DMP.cancel(f,g,include=True)
sympy.polys.polyclasses.DMP.clear_denoms(f)
sympy.polys.polyclasses.DMP.coeffs(f,order=None)
sympy.polys.polyclasses.DMP.cofactors(f,g)
sympy.polys.polyclasses.DMP.compose(f,g)
sympy.polys.polyclasses.DMP.content(f)
sympy.polys.polyclasses.DMP.convert(f,dom)
sympy.polys.polyclasses.DMP.count_complex_roots(f,inf=None,sup=None)
sympy.polys.polyclasses.DMP.count_real_roots(f,inf=None,sup=None)
sympy.polys.polyclasses.DMP.decompose(f)
sympy.polys.polyclasses.DMP.deflate(f)
sympy.polys.polyclasses.DMP.degree(f,j=0)
sympy.polys.polyclasses.DMP.degree_list(f)
sympy.polys.polyclasses.DMP.diff(f,m=1,j=0)
sympy.polys.polyclasses.DMP.discriminant(f)
sympy.polys.polyclasses.DMP.div(f,g)
sympy.polys.polyclasses.DMP.eject(f,dom,front=False)
sympy.polys.polyclasses.DMP.eq(f,g,strict=False)
sympy.polys.polyclasses.DMP.eval(f,a,j=0)
sympy.polys.polyclasses.DMP.exclude(f)
sympy.polys.polyclasses.DMP.exquo(f,g)
sympy.polys.polyclasses.DMP.exquo_ground(f,c)
sympy.polys.polyclasses.DMP.factor_list(f)
sympy.polys.polyclasses.DMP.factor_list_include(f)
sympy.polys.polyclasses.DMP.from_dict(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.from_list(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.from_monoms_coeffs(cls,monoms,coeffs,lev,dom,ring=None)
sympy.polys.polyclasses.DMP.from_sympy_list(cls,rep,lev,dom)
sympy.polys.polyclasses.DMP.gcd(f,g)
sympy.polys.polyclasses.DMP.gcdex(f,g)
sympy.polys.polyclasses.DMP.gff_list(f)
sympy.polys.polyclasses.DMP.half_gcdex(f,g)
sympy.polys.polyclasses.DMP.homogeneous_order(f)
sympy.polys.polyclasses.DMP.homogenize(f,s)
sympy.polys.polyclasses.DMP.inject(f,front=False)
sympy.polys.polyclasses.DMP.integrate(f,m=1,j=0)
sympy.polys.polyclasses.DMP.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.polys.polyclasses.DMP.invert(f,g)
sympy.polys.polyclasses.DMP.is_cyclotomic(f)
sympy.polys.polyclasses.DMP.is_ground(f)
sympy.polys.polyclasses.DMP.is_homogeneous(f)
sympy.polys.polyclasses.DMP.is_irreducible(f)
sympy.polys.polyclasses.DMP.is_linear(f)
sympy.polys.polyclasses.DMP.is_monic(f)
sympy.polys.polyclasses.DMP.is_monomial(f)
sympy.polys.polyclasses.DMP.is_one(f)
sympy.polys.polyclasses.DMP.is_primitive(f)
sympy.polys.polyclasses.DMP.is_quadratic(f)
sympy.polys.polyclasses.DMP.is_sqf(f)
sympy.polys.polyclasses.DMP.is_zero(f)
sympy.polys.polyclasses.DMP.l1_norm(f)
sympy.polys.polyclasses.DMP.lcm(f,g)
sympy.polys.polyclasses.DMP.lift(f)
sympy.polys.polyclasses.DMP.max_norm(f)
sympy.polys.polyclasses.DMP.monic(f)
sympy.polys.polyclasses.DMP.monoms(f,order=None)
sympy.polys.polyclasses.DMP.mul(f,g)
sympy.polys.polyclasses.DMP.mul_ground(f,c)
sympy.polys.polyclasses.DMP.ne(f,g,strict=False)
sympy.polys.polyclasses.DMP.neg(f)
sympy.polys.polyclasses.DMP.nth(f,*N)
sympy.polys.polyclasses.DMP.one(cls,lev,dom,ring=None)
sympy.polys.polyclasses.DMP.pdiv(f,g)
sympy.polys.polyclasses.DMP.per(f,rep,dom=None,kill=False,ring=None)
sympy.polys.polyclasses.DMP.permute(f,P)
sympy.polys.polyclasses.DMP.pexquo(f,g)
sympy.polys.polyclasses.DMP.pow(f,n)
sympy.polys.polyclasses.DMP.pquo(f,g)
sympy.polys.polyclasses.DMP.prem(f,g)
sympy.polys.polyclasses.DMP.primitive(f)
sympy.polys.polyclasses.DMP.quo(f,g)
sympy.polys.polyclasses.DMP.quo_ground(f,c)
sympy.polys.polyclasses.DMP.refine_root(f,s,t,eps=None,steps=None,fast=False)
sympy.polys.polyclasses.DMP.rem(f,g)
sympy.polys.polyclasses.DMP.resultant(f,g,includePRS=False)
sympy.polys.polyclasses.DMP.revert(f,n)
sympy.polys.polyclasses.DMP.shift(f,a)
sympy.polys.polyclasses.DMP.slice(f,m,n,j=0)
sympy.polys.polyclasses.DMP.sqf_list(f,all=False)
sympy.polys.polyclasses.DMP.sqf_list_include(f,all=False)
sympy.polys.polyclasses.DMP.sqf_norm(f)
sympy.polys.polyclasses.DMP.sqf_part(f)
sympy.polys.polyclasses.DMP.sqr(f)
sympy.polys.polyclasses.DMP.sturm(f)
sympy.polys.polyclasses.DMP.sub(f,g)
sympy.polys.polyclasses.DMP.sub_ground(f,c)
sympy.polys.polyclasses.DMP.subresultants(f,g)
sympy.polys.polyclasses.DMP.terms(f,order=None)
sympy.polys.polyclasses.DMP.terms_gcd(f)
sympy.polys.polyclasses.DMP.to_dict(f,zero=False)
sympy.polys.polyclasses.DMP.to_exact(f)
sympy.polys.polyclasses.DMP.to_field(f)
sympy.polys.polyclasses.DMP.to_ring(f)
sympy.polys.polyclasses.DMP.to_sympy_dict(f,zero=False)
sympy.polys.polyclasses.DMP.to_tuple(f)
sympy.polys.polyclasses.DMP.total_degree(f)
sympy.polys.polyclasses.DMP.trunc(f,p)
sympy.polys.polyclasses.DMP.unify(f,g)
sympy.polys.polyclasses.DMP.zero(cls,lev,dom,ring=None)
sympy.polys.polyclasses.GenericPoly(PicklableWithSlots)
sympy.polys.polyclasses.GenericPoly._perify_factors(per,result,include)
sympy.polys.polyclasses.GenericPoly.ground_to_exact(f)
sympy.polys.polyclasses.GenericPoly.ground_to_field(f)
sympy.polys.polyclasses.GenericPoly.ground_to_ring(f)
sympy.polys.polyclasses.init_normal_ANP(rep,mod,dom)
sympy.polys.polyclasses.init_normal_DMF(num,den,lev,dom)
sympy.polys.polyclasses.init_normal_DMP(rep,lev,dom)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/rationaltools.py----------------------------------------
A:sympy.polys.rationaltools.base->_together(expr.base)
A:sympy.polys.rationaltools.exp->_together(expr.exp)
sympy.polys.rationaltools.together(expr,deep=False)
sympy.together(expr,deep=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/euclidtools.py----------------------------------------
A:sympy.polys.euclidtools.(q, r)->dup_div(f, g, K)
A:sympy.polys.euclidtools.a->dmp_ground_LC(f, u, K)
A:sympy.polys.euclidtools.f->dmp_convert(f, u, K, exact)
A:sympy.polys.euclidtools.(s, h)->dup_half_gcdex(f, g, K)
A:sympy.polys.euclidtools.F->dmp_content(f, u, K)
A:sympy.polys.euclidtools.t->dup_quo(F, g, K)
A:sympy.polys.euclidtools.h->dmp_quo(dmp_mul(f, g, u, K), dmp_gcd(f, g, u, K), u, K)
A:sympy.polys.euclidtools.(_, h)->dmp_primitive(h, u, K)
A:sympy.polys.euclidtools.n->dmp_degree(f, u)
A:sympy.polys.euclidtools.m->dmp_degree(g, u)
A:sympy.polys.euclidtools.k->dmp_degree(h, u)
A:sympy.polys.euclidtools.lc->dmp_LC(g, K)
A:sympy.polys.euclidtools.c->K.lcm(fc, gc)
A:sympy.polys.euclidtools.(R, B, D)->dmp_inner_subresultants(f, g, u, K)
A:sympy.polys.euclidtools.du->dmp_degree(R[i - 1], u)
A:sympy.polys.euclidtools.dv->dmp_degree(R[i], u)
A:sympy.polys.euclidtools.dw->dmp_degree(R[i + 1], u)
A:sympy.polys.euclidtools.i->dmp_degree(R[-2], u)
A:sympy.polys.euclidtools.res->dmp_quo(dmp_mul(res, p, v, K), q, v, K)
A:sympy.polys.euclidtools.b->dmp_ground_LC(g, u, K)
A:sympy.polys.euclidtools.p->dmp_mul_ground(p, cp, u, K)
A:sympy.polys.euclidtools.q->dmp_mul_ground(q, cq, u, K)
A:sympy.polys.euclidtools.(_, p, q)->dmp_inner_gcd(f, g, u, K)
A:sympy.polys.euclidtools.N->dmp_degree_in(f, 1, u)
A:sympy.polys.euclidtools.M->dmp_degree_in(g, 1, u)
A:sympy.polys.euclidtools.r->dmp_resultant(f, dmp_diff(f, 1, u, K), u, K)
A:sympy.polys.euclidtools.G->dmp_LC(g, K)
A:sympy.polys.euclidtools.R->dmp_zz_modular_resultant(F, G, p, u, K)
A:sympy.polys.euclidtools.e->dup_strip([e])
A:sympy.polys.euclidtools.d->dup_degree(f)
A:sympy.polys.euclidtools.D->dup_trunc(D, p, K)
A:sympy.polys.euclidtools.A->dmp_max_norm(f, u, K)
A:sympy.polys.euclidtools.B->K(2 * min(f_norm, g_norm) + 29)
A:sympy.polys.euclidtools.K1->K0.get_ring()
A:sympy.polys.euclidtools.(cf, f)->dmp_clear_denoms(f, u, K0, K1)
A:sympy.polys.euclidtools.(cg, g)->dmp_clear_denoms(g, u, K0, K1)
A:sympy.polys.euclidtools.g->dmp_convert(g, u, K, exact)
A:sympy.polys.euclidtools.zero_f->dmp_zero_p(f, u)
A:sympy.polys.euclidtools.zero_g->dmp_zero_p(g, u)
A:sympy.polys.euclidtools.df->dup_degree(f)
A:sympy.polys.euclidtools.dg->dup_degree(g)
A:sympy.polys.euclidtools.result->_dmp_ff_trivial_gcd(f, g, u, K0)
A:sympy.polys.euclidtools.(fc, F)->dmp_primitive(f, u, K)
A:sympy.polys.euclidtools.(gc, G)->dmp_primitive(g, u, K)
A:sympy.polys.euclidtools.cff->dmp_convert(cff, u, exact, K)
A:sympy.polys.euclidtools.cfg->dmp_convert(cfg, u, exact, K)
A:sympy.polys.euclidtools.(c, _, _)->dmp_ff_prs_gcd(fc, gc, u - 1, K)
A:sympy.polys.euclidtools.(gcd, f, g)->dmp_ground_extract(f, g, u, K)
A:sympy.polys.euclidtools.f_norm->dmp_max_norm(f, u, K)
A:sympy.polys.euclidtools.g_norm->dmp_max_norm(g, u, K)
A:sympy.polys.euclidtools.x->max(min(B, 99 * K.sqrt(B)), 2 * min(f_norm // abs(dmp_ground_LC(f, u, K)), g_norm // abs(dmp_ground_LC(g, u, K))) + 2)
A:sympy.polys.euclidtools.ff->dmp_eval(f, x, u, K)
A:sympy.polys.euclidtools.gg->dmp_eval(g, x, u, K)
A:sympy.polys.euclidtools.(cff_, r)->dmp_div(f, h, u, K)
A:sympy.polys.euclidtools.(cfg_, r)->dmp_div(g, h, u, K)
A:sympy.polys.euclidtools.(h, r)->dmp_div(g, cfg, u, K)
A:sympy.polys.euclidtools.(h, cff, cfg)->_dmp_inner_gcd(f, g, u, K)
A:sympy.polys.euclidtools.exact->K.get_exact()
A:sympy.polys.euclidtools.(J, (f, g))->dmp_multi_deflate((f, g), u, K)
A:sympy.polys.euclidtools.(fc, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.euclidtools.(gc, g)->dmp_ground_primitive(g, u, K)
A:sympy.polys.euclidtools.cont->dmp_gcd(cont, c, v, K)
A:sympy.polys.euclidtools.(cq, f)->dmp_clear_denoms(f, u, K0, K, convert=True)
A:sympy.polys.euclidtools.(cp, g)->dmp_clear_denoms(g, u, K0, K, convert=True)
A:sympy.polys.euclidtools.(_, cp, cq)->K.cofactors(cp, cq)
A:sympy.polys.euclidtools.p_neg->K.is_negative(dmp_ground_LC(p, u, K))
A:sympy.polys.euclidtools.q_neg->K.is_negative(dmp_ground_LC(q, u, K))
sympy.euclidtools._collins_crt(r,R,P,p,K)
sympy.euclidtools._dmp_ff_trivial_gcd(f,g,u,K)
sympy.euclidtools._dmp_inner_gcd(f,g,u,K)
sympy.euclidtools._dmp_rr_trivial_gcd(f,g,u,K)
sympy.euclidtools._dmp_simplify_gcd(f,g,u,K)
sympy.euclidtools._dmp_zz_gcd_interpolate(h,x,v,K)
sympy.euclidtools._dup_ff_trivial_gcd(f,g,K)
sympy.euclidtools._dup_rr_trivial_gcd(f,g,K)
sympy.euclidtools._dup_zz_gcd_interpolate(h,x,K)
sympy.euclidtools.dmp_cancel(f,g,u,K,include=True)
sympy.euclidtools.dmp_content(f,u,K)
sympy.euclidtools.dmp_discriminant(f,u,K)
sympy.euclidtools.dmp_euclidean_prs(f,g,u,K)
sympy.euclidtools.dmp_ff_lcm(f,g,u,K)
sympy.euclidtools.dmp_ff_prs_gcd(f,g,u,K)
sympy.euclidtools.dmp_gcd(f,g,u,K)
sympy.euclidtools.dmp_gcdex(f,g,u,K)
sympy.euclidtools.dmp_half_gcdex(f,g,u,K)
sympy.euclidtools.dmp_inner_gcd(f,g,u,K)
sympy.euclidtools.dmp_inner_subresultants(f,g,u,K)
sympy.euclidtools.dmp_invert(f,g,u,K)
sympy.euclidtools.dmp_lcm(f,g,u,K)
sympy.euclidtools.dmp_primitive(f,u,K)
sympy.euclidtools.dmp_primitive_prs(f,g,u,K)
sympy.euclidtools.dmp_prs_resultant(f,g,u,K)
sympy.euclidtools.dmp_qq_collins_resultant(f,g,u,K0)
sympy.euclidtools.dmp_qq_heu_gcd(f,g,u,K0)
sympy.euclidtools.dmp_resultant(f,g,u,K,includePRS=False)
sympy.euclidtools.dmp_rr_lcm(f,g,u,K)
sympy.euclidtools.dmp_rr_prs_gcd(f,g,u,K)
sympy.euclidtools.dmp_subresultants(f,g,u,K)
sympy.euclidtools.dmp_zz_collins_resultant(f,g,u,K)
sympy.euclidtools.dmp_zz_heu_gcd(f,g,u,K)
sympy.euclidtools.dmp_zz_modular_resultant(f,g,p,u,K)
sympy.euclidtools.dup_cancel(f,g,K,include=True)
sympy.euclidtools.dup_discriminant(f,K)
sympy.euclidtools.dup_euclidean_prs(f,g,K)
sympy.euclidtools.dup_ff_lcm(f,g,K)
sympy.euclidtools.dup_ff_prs_gcd(f,g,K)
sympy.euclidtools.dup_gcd(f,g,K)
sympy.euclidtools.dup_gcdex(f,g,K)
sympy.euclidtools.dup_half_gcdex(f,g,K)
sympy.euclidtools.dup_inner_gcd(f,g,K)
sympy.euclidtools.dup_inner_subresultants(f,g,K)
sympy.euclidtools.dup_invert(f,g,K)
sympy.euclidtools.dup_lcm(f,g,K)
sympy.euclidtools.dup_primitive_prs(f,g,K)
sympy.euclidtools.dup_prs_resultant(f,g,K)
sympy.euclidtools.dup_qq_heu_gcd(f,g,K0)
sympy.euclidtools.dup_resultant(f,g,K,includePRS=False)
sympy.euclidtools.dup_rr_lcm(f,g,K)
sympy.euclidtools.dup_rr_prs_gcd(f,g,K)
sympy.euclidtools.dup_subresultants(f,g,K)
sympy.euclidtools.dup_zz_heu_gcd(f,g,K)
sympy.polys.euclidtools._collins_crt(r,R,P,p,K)
sympy.polys.euclidtools._dmp_ff_trivial_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_inner_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_rr_trivial_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_simplify_gcd(f,g,u,K)
sympy.polys.euclidtools._dmp_zz_gcd_interpolate(h,x,v,K)
sympy.polys.euclidtools._dup_ff_trivial_gcd(f,g,K)
sympy.polys.euclidtools._dup_rr_trivial_gcd(f,g,K)
sympy.polys.euclidtools._dup_zz_gcd_interpolate(h,x,K)
sympy.polys.euclidtools.dmp_cancel(f,g,u,K,include=True)
sympy.polys.euclidtools.dmp_content(f,u,K)
sympy.polys.euclidtools.dmp_discriminant(f,u,K)
sympy.polys.euclidtools.dmp_euclidean_prs(f,g,u,K)
sympy.polys.euclidtools.dmp_ff_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_ff_prs_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_gcdex(f,g,u,K)
sympy.polys.euclidtools.dmp_half_gcdex(f,g,u,K)
sympy.polys.euclidtools.dmp_inner_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_inner_subresultants(f,g,u,K)
sympy.polys.euclidtools.dmp_invert(f,g,u,K)
sympy.polys.euclidtools.dmp_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_primitive(f,u,K)
sympy.polys.euclidtools.dmp_primitive_prs(f,g,u,K)
sympy.polys.euclidtools.dmp_prs_resultant(f,g,u,K)
sympy.polys.euclidtools.dmp_qq_collins_resultant(f,g,u,K0)
sympy.polys.euclidtools.dmp_qq_heu_gcd(f,g,u,K0)
sympy.polys.euclidtools.dmp_resultant(f,g,u,K,includePRS=False)
sympy.polys.euclidtools.dmp_rr_lcm(f,g,u,K)
sympy.polys.euclidtools.dmp_rr_prs_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_subresultants(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_collins_resultant(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_heu_gcd(f,g,u,K)
sympy.polys.euclidtools.dmp_zz_modular_resultant(f,g,p,u,K)
sympy.polys.euclidtools.dup_cancel(f,g,K,include=True)
sympy.polys.euclidtools.dup_discriminant(f,K)
sympy.polys.euclidtools.dup_euclidean_prs(f,g,K)
sympy.polys.euclidtools.dup_ff_lcm(f,g,K)
sympy.polys.euclidtools.dup_ff_prs_gcd(f,g,K)
sympy.polys.euclidtools.dup_gcd(f,g,K)
sympy.polys.euclidtools.dup_gcdex(f,g,K)
sympy.polys.euclidtools.dup_half_gcdex(f,g,K)
sympy.polys.euclidtools.dup_inner_gcd(f,g,K)
sympy.polys.euclidtools.dup_inner_subresultants(f,g,K)
sympy.polys.euclidtools.dup_invert(f,g,K)
sympy.polys.euclidtools.dup_lcm(f,g,K)
sympy.polys.euclidtools.dup_primitive_prs(f,g,K)
sympy.polys.euclidtools.dup_prs_resultant(f,g,K)
sympy.polys.euclidtools.dup_qq_heu_gcd(f,g,K0)
sympy.polys.euclidtools.dup_resultant(f,g,K,includePRS=False)
sympy.polys.euclidtools.dup_rr_lcm(f,g,K)
sympy.polys.euclidtools.dup_rr_prs_gcd(f,g,K)
sympy.polys.euclidtools.dup_subresultants(f,g,K)
sympy.polys.euclidtools.dup_zz_heu_gcd(f,g,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/compatibility.py----------------------------------------
A:sympy.polys.compatibility.(q, r)->gf_div(self.to_gf_dense(f), self.to_gf_dense(g), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.LC->list(map(mv.to_dense, LC))
A:sympy.polys.compatibility.TC->dmp_TC(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.result->dmp_zz_wang_hensel_lifting(self.to_dense(f), H, LC, A, p, self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(c, F, G)->dmp_ground_extract(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(p, q)->dup_real_imag(self.wrap(f).drop(1).to_dense(), self.domain)
A:sympy.polys.compatibility.components->dup_decompose(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.(c, F)->dmp_clear_denoms(self.to_dense(f), self.ngens - 1, self.domain, convert=convert)
A:sympy.polys.compatibility.ring->self.clone(domain=self.domain.get_ring())
A:sympy.polys.compatibility.(s, h)->dmp_half_gcdex(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(s, t, h)->dmp_gcdex(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.prs->dmp_subresultants(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(prs, beta, delta)->dmp_inner_subresultants(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(res, prs)->dmp_prs_resultant(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.res->dmp_resultant(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.disc->dmp_discriminant(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(H, F, G)->dmp_inner_gcd(self.to_dense(f), self.to_dense(g), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.H->list(map(uv.to_dense, H))
A:sympy.polys.compatibility.cont->dmp_ground_content(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(cont, prim)->dmp_ground_primitive(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.factors->gf_shoup(self.to_gf_dense(f), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.(G, H, S, T)->dup_zz_hensel_step(m, D(f), D(g), D(h), D(s), D(t), self.domain)
A:sympy.polys.compatibility.polys->dup_zz_hensel_lift(p, D(f), list(map(D, f_list)), l, self.domain)
A:sympy.polys.compatibility.F->dup_zz_cyclotomic_poly(n, self.domain)
A:sympy.polys.compatibility.(f, HH, CC)->dmp_zz_wang_lead_coeffs(self.to_dense(f), T, cs, E, H, A, self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(coeff, factors)->gf_factor(self.to_gf_dense(f), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.seq->dup_sturm(self.to_dense(f), self.domain)
A:sympy.polys.compatibility.(s, F, R)->dmp_sqf_norm(self.to_dense(f), self.ngens - 1, self.domain)
A:sympy.polys.compatibility.(h, cff, cfg)->gf_cofactors(self.to_gf_dense(f), self.to_gf_dense(g), self.domain.mod, self.domain.dom)
A:sympy.polys.compatibility.a->self.to_gf_dense(a)
A:sympy.polys.compatibility.b->self.to_gf_dense(b)
A:sympy.polys.compatibility.c->self.to_gf_dense(c)
A:sympy.polys.compatibility.f->self.to_gf_dense(f)
A:sympy.polys.compatibility.(U, V)->gf_trace_map(a, b, c, n, f, self.domain.mod, self.domain.dom)
sympy.compatibility.IPolys(object)
sympy.compatibility.IPolys.clone(self,symbols=None,domain=None,order=None)
sympy.compatibility.IPolys.dmp_LC(self,f)
sympy.compatibility.IPolys.dmp_TC(self,f)
sympy.compatibility.IPolys.dmp_abs(self,f)
sympy.compatibility.IPolys.dmp_add(self,f,g)
sympy.compatibility.IPolys.dmp_add_ground(self,f,c)
sympy.compatibility.IPolys.dmp_add_mul(self,f,g,h)
sympy.compatibility.IPolys.dmp_add_term(self,f,c,i)
sympy.compatibility.IPolys.dmp_cancel(self,f,g,include=True)
sympy.compatibility.IPolys.dmp_clear_denoms(self,f,convert=False)
sympy.compatibility.IPolys.dmp_compose(self,f,g)
sympy.compatibility.IPolys.dmp_content(self,f)
sympy.compatibility.IPolys.dmp_degree(self,f)
sympy.compatibility.IPolys.dmp_degree_in(self,f,j)
sympy.compatibility.IPolys.dmp_diff(self,f,m)
sympy.compatibility.IPolys.dmp_diff_eval_in(self,f,m,a,j)
sympy.compatibility.IPolys.dmp_diff_in(self,f,m,j)
sympy.compatibility.IPolys.dmp_discriminant(self,f)
sympy.compatibility.IPolys.dmp_div(self,f,g)
sympy.compatibility.IPolys.dmp_euclidean_prs(self,f,g)
sympy.compatibility.IPolys.dmp_eval(self,f,a)
sympy.compatibility.IPolys.dmp_eval_in(self,f,a,j)
sympy.compatibility.IPolys.dmp_eval_tail(self,f,A)
sympy.compatibility.IPolys.dmp_expand(self,polys)
sympy.compatibility.IPolys.dmp_exquo(self,f,g)
sympy.compatibility.IPolys.dmp_exquo_ground(self,f,c)
sympy.compatibility.IPolys.dmp_ext_factor(self,f)
sympy.compatibility.IPolys.dmp_factor_list(self,f)
sympy.compatibility.IPolys.dmp_factor_list_include(self,f)
sympy.compatibility.IPolys.dmp_ff_div(self,f,g)
sympy.compatibility.IPolys.dmp_ff_lcm(self,f,g)
sympy.compatibility.IPolys.dmp_ff_prs_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_gcdex(self,f,g)
sympy.compatibility.IPolys.dmp_gf_factor(self,f)
sympy.compatibility.IPolys.dmp_gf_sqf_list(self,f,all=False)
sympy.compatibility.IPolys.dmp_gf_sqf_part(self,f)
sympy.compatibility.IPolys.dmp_gff_list(self,f)
sympy.compatibility.IPolys.dmp_ground_LC(self,f)
sympy.compatibility.IPolys.dmp_ground_TC(self,f)
sympy.compatibility.IPolys.dmp_ground_content(self,f)
sympy.compatibility.IPolys.dmp_ground_extract(self,f,g)
sympy.compatibility.IPolys.dmp_ground_monic(self,f)
sympy.compatibility.IPolys.dmp_ground_primitive(self,f)
sympy.compatibility.IPolys.dmp_ground_trunc(self,f,p)
sympy.compatibility.IPolys.dmp_half_gcdex(self,f,g)
sympy.compatibility.IPolys.dmp_inner_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_inner_subresultants(self,f,g)
sympy.compatibility.IPolys.dmp_integrate(self,f,m)
sympy.compatibility.IPolys.dmp_integrate_in(self,f,m,j)
sympy.compatibility.IPolys.dmp_invert(self,f,g)
sympy.compatibility.IPolys.dmp_irreducible_p(self,f)
sympy.compatibility.IPolys.dmp_l1_norm(self,f)
sympy.compatibility.IPolys.dmp_lcm(self,f,g)
sympy.compatibility.IPolys.dmp_lift(self,f)
sympy.compatibility.IPolys.dmp_max_norm(self,f)
sympy.compatibility.IPolys.dmp_mul(self,f,g)
sympy.compatibility.IPolys.dmp_mul_ground(self,f,c)
sympy.compatibility.IPolys.dmp_mul_term(self,f,c,i)
sympy.compatibility.IPolys.dmp_neg(self,f)
sympy.compatibility.IPolys.dmp_pdiv(self,f,g)
sympy.compatibility.IPolys.dmp_pexquo(self,f,g)
sympy.compatibility.IPolys.dmp_pow(self,f,n)
sympy.compatibility.IPolys.dmp_pquo(self,f,g)
sympy.compatibility.IPolys.dmp_prem(self,f,g)
sympy.compatibility.IPolys.dmp_primitive(self,f)
sympy.compatibility.IPolys.dmp_primitive_prs(self,f,g)
sympy.compatibility.IPolys.dmp_prs_resultant(self,f,g)
sympy.compatibility.IPolys.dmp_qq_collins_resultant(self,f,g)
sympy.compatibility.IPolys.dmp_qq_heu_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_quo(self,f,g)
sympy.compatibility.IPolys.dmp_quo_ground(self,f,c)
sympy.compatibility.IPolys.dmp_rem(self,f,g)
sympy.compatibility.IPolys.dmp_resultant(self,f,g)
sympy.compatibility.IPolys.dmp_rr_div(self,f,g)
sympy.compatibility.IPolys.dmp_rr_lcm(self,f,g)
sympy.compatibility.IPolys.dmp_rr_prs_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_sqf_list(self,f,all=False)
sympy.compatibility.IPolys.dmp_sqf_list_include(self,f,all=False)
sympy.compatibility.IPolys.dmp_sqf_norm(self,f)
sympy.compatibility.IPolys.dmp_sqf_p(self,f)
sympy.compatibility.IPolys.dmp_sqf_part(self,f)
sympy.compatibility.IPolys.dmp_sqr(self,f)
sympy.compatibility.IPolys.dmp_sub(self,f,g)
sympy.compatibility.IPolys.dmp_sub_ground(self,f,c)
sympy.compatibility.IPolys.dmp_sub_mul(self,f,g,h)
sympy.compatibility.IPolys.dmp_sub_term(self,f,c,i)
sympy.compatibility.IPolys.dmp_subresultants(self,f,g)
sympy.compatibility.IPolys.dmp_trial_division(self,f,factors)
sympy.compatibility.IPolys.dmp_trunc(self,f,g)
sympy.compatibility.IPolys.dmp_zz_collins_resultant(self,f,g)
sympy.compatibility.IPolys.dmp_zz_diophantine(self,F,c,A,d,p)
sympy.compatibility.IPolys.dmp_zz_factor(self,f)
sympy.compatibility.IPolys.dmp_zz_heu_gcd(self,f,g)
sympy.compatibility.IPolys.dmp_zz_mignotte_bound(self,f)
sympy.compatibility.IPolys.dmp_zz_modular_resultant(self,f,g,p)
sympy.compatibility.IPolys.dmp_zz_wang(self,f,mod=None,seed=None)
sympy.compatibility.IPolys.dmp_zz_wang_hensel_lifting(self,f,H,LC,A,p)
sympy.compatibility.IPolys.dmp_zz_wang_lead_coeffs(self,f,T,cs,E,H,A)
sympy.compatibility.IPolys.dmp_zz_wang_non_divisors(self,E,cs,ct)
sympy.compatibility.IPolys.domain_new(self,element)
sympy.compatibility.IPolys.drop(self,gen)
sympy.compatibility.IPolys.dup_LC(self,f)
sympy.compatibility.IPolys.dup_TC(self,f)
sympy.compatibility.IPolys.dup_abs(self,f)
sympy.compatibility.IPolys.dup_add(self,f,g)
sympy.compatibility.IPolys.dup_add_ground(self,f,c)
sympy.compatibility.IPolys.dup_add_mul(self,f,g,h)
sympy.compatibility.IPolys.dup_add_term(self,f,c,i)
sympy.compatibility.IPolys.dup_cancel(self,f,g,include=True)
sympy.compatibility.IPolys.dup_clear_denoms(self,f,convert=False)
sympy.compatibility.IPolys.dup_compose(self,f,g)
sympy.compatibility.IPolys.dup_content(self,f)
sympy.compatibility.IPolys.dup_count_complex_roots(self,f,inf=None,sup=None,exclude=None)
sympy.compatibility.IPolys.dup_count_real_roots(self,f,inf=None,sup=None)
sympy.compatibility.IPolys.dup_cyclotomic_p(self,f,irreducible=False)
sympy.compatibility.IPolys.dup_decompose(self,f)
sympy.compatibility.IPolys.dup_degree(self,f)
sympy.compatibility.IPolys.dup_diff(self,f,m)
sympy.compatibility.IPolys.dup_discriminant(self,f)
sympy.compatibility.IPolys.dup_div(self,f,g)
sympy.compatibility.IPolys.dup_euclidean_prs(self,f,g)
sympy.compatibility.IPolys.dup_eval(self,f,a)
sympy.compatibility.IPolys.dup_expand(self,polys)
sympy.compatibility.IPolys.dup_exquo(self,f,g)
sympy.compatibility.IPolys.dup_exquo_ground(self,f,c)
sympy.compatibility.IPolys.dup_ext_factor(self,f)
sympy.compatibility.IPolys.dup_extract(self,f,g)
sympy.compatibility.IPolys.dup_factor_list(self,f)
sympy.compatibility.IPolys.dup_factor_list_include(self,f)
sympy.compatibility.IPolys.dup_ff_div(self,f,g)
sympy.compatibility.IPolys.dup_ff_lcm(self,f,g)
sympy.compatibility.IPolys.dup_ff_prs_gcd(self,f,g)
sympy.compatibility.IPolys.dup_gcd(self,f,g)
sympy.compatibility.IPolys.dup_gcdex(self,f,g)
sympy.compatibility.IPolys.dup_gf_factor(self,f)
sympy.compatibility.IPolys.dup_gf_sqf_list(self,f,all=False)
sympy.compatibility.IPolys.dup_gf_sqf_part(self,f)
sympy.compatibility.IPolys.dup_gff_list(self,f)
sympy.compatibility.IPolys.dup_half_gcdex(self,f,g)
sympy.compatibility.IPolys.dup_inner_gcd(self,f,g)
sympy.compatibility.IPolys.dup_inner_isolate_negative_roots(self,f,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.compatibility.IPolys.dup_inner_isolate_positive_roots(self,f,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.compatibility.IPolys.dup_inner_isolate_real_roots(self,f,eps=None,fast=False)
sympy.compatibility.IPolys.dup_inner_refine_real_root(self,f,M,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.compatibility.IPolys.dup_inner_subresultants(self,f,g)
sympy.compatibility.IPolys.dup_integrate(self,f,m)
sympy.compatibility.IPolys.dup_invert(self,f,g)
sympy.compatibility.IPolys.dup_irreducible_p(self,f)
sympy.compatibility.IPolys.dup_isolate_all_roots(self,f,eps=None,inf=None,sup=None,fast=False)
sympy.compatibility.IPolys.dup_isolate_all_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.compatibility.IPolys.dup_isolate_complex_roots_sqf(self,f,eps=None,inf=None,sup=None,blackbox=False)
sympy.compatibility.IPolys.dup_isolate_real_roots(self,f,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.compatibility.IPolys.dup_isolate_real_roots_list(self,polys,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.compatibility.IPolys.dup_isolate_real_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.compatibility.IPolys.dup_l1_norm(self,f)
sympy.compatibility.IPolys.dup_lcm(self,f,g)
sympy.compatibility.IPolys.dup_lshift(self,f,n)
sympy.compatibility.IPolys.dup_max_norm(self,f)
sympy.compatibility.IPolys.dup_mirror(self,f)
sympy.compatibility.IPolys.dup_monic(self,f)
sympy.compatibility.IPolys.dup_mul(self,f,g)
sympy.compatibility.IPolys.dup_mul_ground(self,f,c)
sympy.compatibility.IPolys.dup_mul_term(self,f,c,i)
sympy.compatibility.IPolys.dup_neg(self,f)
sympy.compatibility.IPolys.dup_outer_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.compatibility.IPolys.dup_pdiv(self,f,g)
sympy.compatibility.IPolys.dup_pexquo(self,f,g)
sympy.compatibility.IPolys.dup_pow(self,f,n)
sympy.compatibility.IPolys.dup_pquo(self,f,g)
sympy.compatibility.IPolys.dup_prem(self,f,g)
sympy.compatibility.IPolys.dup_primitive(self,f)
sympy.compatibility.IPolys.dup_primitive_prs(self,f,g)
sympy.compatibility.IPolys.dup_prs_resultant(self,f,g)
sympy.compatibility.IPolys.dup_qq_heu_gcd(self,f,g)
sympy.compatibility.IPolys.dup_quo(self,f,g)
sympy.compatibility.IPolys.dup_quo_ground(self,f,c)
sympy.compatibility.IPolys.dup_real_imag(self,f)
sympy.compatibility.IPolys.dup_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.compatibility.IPolys.dup_rem(self,f,g)
sympy.compatibility.IPolys.dup_resultant(self,f,g)
sympy.compatibility.IPolys.dup_revert(self,f,n)
sympy.compatibility.IPolys.dup_root_lower_bound(self,f)
sympy.compatibility.IPolys.dup_root_upper_bound(self,f)
sympy.compatibility.IPolys.dup_rr_div(self,f,g)
sympy.compatibility.IPolys.dup_rr_lcm(self,f,g)
sympy.compatibility.IPolys.dup_rr_prs_gcd(self,f,g)
sympy.compatibility.IPolys.dup_rshift(self,f,n)
sympy.compatibility.IPolys.dup_scale(self,f,a)
sympy.compatibility.IPolys.dup_shift(self,f,a)
sympy.compatibility.IPolys.dup_sign_variations(self,f)
sympy.compatibility.IPolys.dup_sqf_list(self,f,all=False)
sympy.compatibility.IPolys.dup_sqf_list_include(self,f,all=False)
sympy.compatibility.IPolys.dup_sqf_norm(self,f)
sympy.compatibility.IPolys.dup_sqf_p(self,f)
sympy.compatibility.IPolys.dup_sqf_part(self,f)
sympy.compatibility.IPolys.dup_sqr(self,f)
sympy.compatibility.IPolys.dup_step_refine_real_root(self,f,M,fast=False)
sympy.compatibility.IPolys.dup_sturm(self,f)
sympy.compatibility.IPolys.dup_sub(self,f,g)
sympy.compatibility.IPolys.dup_sub_ground(self,f,c)
sympy.compatibility.IPolys.dup_sub_mul(self,f,g,h)
sympy.compatibility.IPolys.dup_sub_term(self,f,c,i)
sympy.compatibility.IPolys.dup_subresultants(self,f,g)
sympy.compatibility.IPolys.dup_transform(self,f,p,q)
sympy.compatibility.IPolys.dup_trial_division(self,f,factors)
sympy.compatibility.IPolys.dup_trunc(self,f,p)
sympy.compatibility.IPolys.dup_zz_cyclotomic_factor(self,f)
sympy.compatibility.IPolys.dup_zz_cyclotomic_poly(self,n)
sympy.compatibility.IPolys.dup_zz_diophantine(self,F,m,p)
sympy.compatibility.IPolys.dup_zz_factor(self,f)
sympy.compatibility.IPolys.dup_zz_factor_sqf(self,f)
sympy.compatibility.IPolys.dup_zz_hensel_lift(self,p,f,f_list,l)
sympy.compatibility.IPolys.dup_zz_hensel_step(self,m,f,g,h,s,t)
sympy.compatibility.IPolys.dup_zz_heu_gcd(self,f,g)
sympy.compatibility.IPolys.dup_zz_irreducible_p(self,f)
sympy.compatibility.IPolys.dup_zz_mignotte_bound(self,f)
sympy.compatibility.IPolys.dup_zz_zassenhaus(self,f)
sympy.compatibility.IPolys.fateman_poly_F_1(self)
sympy.compatibility.IPolys.fateman_poly_F_2(self)
sympy.compatibility.IPolys.fateman_poly_F_3(self)
sympy.compatibility.IPolys.from_dense(self,element)
sympy.compatibility.IPolys.from_dict(self,d)
sympy.compatibility.IPolys.from_gf_dense(self,element)
sympy.compatibility.IPolys.gf_LC(self,f)
sympy.compatibility.IPolys.gf_Qmatrix(self,f)
sympy.compatibility.IPolys.gf_TC(self,f)
sympy.compatibility.IPolys.gf_add(self,f,g)
sympy.compatibility.IPolys.gf_add_ground(self,f,a)
sympy.compatibility.IPolys.gf_add_mul(self,f,g,h)
sympy.compatibility.IPolys.gf_berlekamp(self,f)
sympy.compatibility.IPolys.gf_cofactors(self,f,g)
sympy.compatibility.IPolys.gf_compose(self,f,g)
sympy.compatibility.IPolys.gf_compose_mod(self,g,h,f)
sympy.compatibility.IPolys.gf_ddf_shoup(self,f)
sympy.compatibility.IPolys.gf_ddf_zassenhaus(self,f)
sympy.compatibility.IPolys.gf_degree(self,f)
sympy.compatibility.IPolys.gf_diff(self,f)
sympy.compatibility.IPolys.gf_div(self,f,g)
sympy.compatibility.IPolys.gf_edf_shoup(self,f,n)
sympy.compatibility.IPolys.gf_edf_zassenhaus(self,f,n)
sympy.compatibility.IPolys.gf_eval(self,f,a)
sympy.compatibility.IPolys.gf_expand(self,F)
sympy.compatibility.IPolys.gf_exquo(self,f,g)
sympy.compatibility.IPolys.gf_factor(self,f)
sympy.compatibility.IPolys.gf_factor_sqf(self,f,method=None)
sympy.compatibility.IPolys.gf_from_dict(self,f)
sympy.compatibility.IPolys.gf_from_int_poly(self,f)
sympy.compatibility.IPolys.gf_gcd(self,f,g)
sympy.compatibility.IPolys.gf_gcdex(self,f,g)
sympy.compatibility.IPolys.gf_irred_p_ben_or(self,f)
sympy.compatibility.IPolys.gf_irred_p_rabin(self,f)
sympy.compatibility.IPolys.gf_irreducible(self,n)
sympy.compatibility.IPolys.gf_irreducible_p(self,f)
sympy.compatibility.IPolys.gf_lcm(self,f,g)
sympy.compatibility.IPolys.gf_lshift(self,f,n)
sympy.compatibility.IPolys.gf_monic(self,f)
sympy.compatibility.IPolys.gf_mul(self,f,g)
sympy.compatibility.IPolys.gf_mul_ground(self,f,a)
sympy.compatibility.IPolys.gf_multi_eval(self,f,A)
sympy.compatibility.IPolys.gf_neg(self,f)
sympy.compatibility.IPolys.gf_normal(self,f)
sympy.compatibility.IPolys.gf_pow(self,f,n)
sympy.compatibility.IPolys.gf_pow_mod(self,f,n,g)
sympy.compatibility.IPolys.gf_quo(self,f,g)
sympy.compatibility.IPolys.gf_quo_ground(self,f,a)
sympy.compatibility.IPolys.gf_random(self,n)
sympy.compatibility.IPolys.gf_rem(self,f,g)
sympy.compatibility.IPolys.gf_rshift(self,f,n)
sympy.compatibility.IPolys.gf_shoup(self,f)
sympy.compatibility.IPolys.gf_sqf_list(self,f,all=False)
sympy.compatibility.IPolys.gf_sqf_p(self,f)
sympy.compatibility.IPolys.gf_sqf_part(self,f)
sympy.compatibility.IPolys.gf_sqr(self,f)
sympy.compatibility.IPolys.gf_strip(self,f)
sympy.compatibility.IPolys.gf_sub(self,f,g)
sympy.compatibility.IPolys.gf_sub_ground(self,f,a)
sympy.compatibility.IPolys.gf_sub_mul(self,f,g,h)
sympy.compatibility.IPolys.gf_to_dict(self,f,symmetric=True)
sympy.compatibility.IPolys.gf_to_int_poly(self,f,symmetric=True)
sympy.compatibility.IPolys.gf_trace_map(self,a,b,c,n,f)
sympy.compatibility.IPolys.gf_trunc(self,f)
sympy.compatibility.IPolys.gf_zassenhaus(self,f)
sympy.compatibility.IPolys.ground_new(self,element)
sympy.compatibility.IPolys.to_dense(self,element)
sympy.compatibility.IPolys.to_gf_dense(self,element)
sympy.compatibility.IPolys.to_ground(self)
sympy.compatibility.IPolys.wrap(self,element)
sympy.polys.compatibility.IPolys(object)
sympy.polys.compatibility.IPolys.clone(self,symbols=None,domain=None,order=None)
sympy.polys.compatibility.IPolys.dmp_LC(self,f)
sympy.polys.compatibility.IPolys.dmp_TC(self,f)
sympy.polys.compatibility.IPolys.dmp_abs(self,f)
sympy.polys.compatibility.IPolys.dmp_add(self,f,g)
sympy.polys.compatibility.IPolys.dmp_add_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dmp_add_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_cancel(self,f,g,include=True)
sympy.polys.compatibility.IPolys.dmp_clear_denoms(self,f,convert=False)
sympy.polys.compatibility.IPolys.dmp_compose(self,f,g)
sympy.polys.compatibility.IPolys.dmp_content(self,f)
sympy.polys.compatibility.IPolys.dmp_degree(self,f)
sympy.polys.compatibility.IPolys.dmp_degree_in(self,f,j)
sympy.polys.compatibility.IPolys.dmp_diff(self,f,m)
sympy.polys.compatibility.IPolys.dmp_diff_eval_in(self,f,m,a,j)
sympy.polys.compatibility.IPolys.dmp_diff_in(self,f,m,j)
sympy.polys.compatibility.IPolys.dmp_discriminant(self,f)
sympy.polys.compatibility.IPolys.dmp_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_euclidean_prs(self,f,g)
sympy.polys.compatibility.IPolys.dmp_eval(self,f,a)
sympy.polys.compatibility.IPolys.dmp_eval_in(self,f,a,j)
sympy.polys.compatibility.IPolys.dmp_eval_tail(self,f,A)
sympy.polys.compatibility.IPolys.dmp_expand(self,polys)
sympy.polys.compatibility.IPolys.dmp_exquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_exquo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_ext_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_factor_list(self,f)
sympy.polys.compatibility.IPolys.dmp_factor_list_include(self,f)
sympy.polys.compatibility.IPolys.dmp_ff_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ff_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ff_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dmp_gf_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dmp_gff_list(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_LC(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_TC(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_content(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_extract(self,f,g)
sympy.polys.compatibility.IPolys.dmp_ground_monic(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_primitive(self,f)
sympy.polys.compatibility.IPolys.dmp_ground_trunc(self,f,p)
sympy.polys.compatibility.IPolys.dmp_half_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dmp_inner_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_inner_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dmp_integrate(self,f,m)
sympy.polys.compatibility.IPolys.dmp_integrate_in(self,f,m,j)
sympy.polys.compatibility.IPolys.dmp_invert(self,f,g)
sympy.polys.compatibility.IPolys.dmp_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dmp_l1_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_lift(self,f)
sympy.polys.compatibility.IPolys.dmp_max_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_mul(self,f,g)
sympy.polys.compatibility.IPolys.dmp_mul_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_mul_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_neg(self,f)
sympy.polys.compatibility.IPolys.dmp_pdiv(self,f,g)
sympy.polys.compatibility.IPolys.dmp_pexquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_pow(self,f,n)
sympy.polys.compatibility.IPolys.dmp_pquo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_prem(self,f,g)
sympy.polys.compatibility.IPolys.dmp_primitive(self,f)
sympy.polys.compatibility.IPolys.dmp_primitive_prs(self,f,g)
sympy.polys.compatibility.IPolys.dmp_prs_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_qq_collins_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_qq_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_quo(self,f,g)
sympy.polys.compatibility.IPolys.dmp_quo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_rem(self,f,g)
sympy.polys.compatibility.IPolys.dmp_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_div(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dmp_rr_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_sqf_list_include(self,f,all=False)
sympy.polys.compatibility.IPolys.dmp_sqf_norm(self,f)
sympy.polys.compatibility.IPolys.dmp_sqf_p(self,f)
sympy.polys.compatibility.IPolys.dmp_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dmp_sqr(self,f)
sympy.polys.compatibility.IPolys.dmp_sub(self,f,g)
sympy.polys.compatibility.IPolys.dmp_sub_ground(self,f,c)
sympy.polys.compatibility.IPolys.dmp_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dmp_sub_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dmp_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dmp_trial_division(self,f,factors)
sympy.polys.compatibility.IPolys.dmp_trunc(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_collins_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_diophantine(self,F,c,A,d,p)
sympy.polys.compatibility.IPolys.dmp_zz_factor(self,f)
sympy.polys.compatibility.IPolys.dmp_zz_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dmp_zz_mignotte_bound(self,f)
sympy.polys.compatibility.IPolys.dmp_zz_modular_resultant(self,f,g,p)
sympy.polys.compatibility.IPolys.dmp_zz_wang(self,f,mod=None,seed=None)
sympy.polys.compatibility.IPolys.dmp_zz_wang_hensel_lifting(self,f,H,LC,A,p)
sympy.polys.compatibility.IPolys.dmp_zz_wang_lead_coeffs(self,f,T,cs,E,H,A)
sympy.polys.compatibility.IPolys.dmp_zz_wang_non_divisors(self,E,cs,ct)
sympy.polys.compatibility.IPolys.domain_new(self,element)
sympy.polys.compatibility.IPolys.drop(self,gen)
sympy.polys.compatibility.IPolys.dup_LC(self,f)
sympy.polys.compatibility.IPolys.dup_TC(self,f)
sympy.polys.compatibility.IPolys.dup_abs(self,f)
sympy.polys.compatibility.IPolys.dup_add(self,f,g)
sympy.polys.compatibility.IPolys.dup_add_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dup_add_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_cancel(self,f,g,include=True)
sympy.polys.compatibility.IPolys.dup_clear_denoms(self,f,convert=False)
sympy.polys.compatibility.IPolys.dup_compose(self,f,g)
sympy.polys.compatibility.IPolys.dup_content(self,f)
sympy.polys.compatibility.IPolys.dup_count_complex_roots(self,f,inf=None,sup=None,exclude=None)
sympy.polys.compatibility.IPolys.dup_count_real_roots(self,f,inf=None,sup=None)
sympy.polys.compatibility.IPolys.dup_cyclotomic_p(self,f,irreducible=False)
sympy.polys.compatibility.IPolys.dup_decompose(self,f)
sympy.polys.compatibility.IPolys.dup_degree(self,f)
sympy.polys.compatibility.IPolys.dup_diff(self,f,m)
sympy.polys.compatibility.IPolys.dup_discriminant(self,f)
sympy.polys.compatibility.IPolys.dup_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_euclidean_prs(self,f,g)
sympy.polys.compatibility.IPolys.dup_eval(self,f,a)
sympy.polys.compatibility.IPolys.dup_expand(self,polys)
sympy.polys.compatibility.IPolys.dup_exquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_exquo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_ext_factor(self,f)
sympy.polys.compatibility.IPolys.dup_extract(self,f,g)
sympy.polys.compatibility.IPolys.dup_factor_list(self,f)
sympy.polys.compatibility.IPolys.dup_factor_list_include(self,f)
sympy.polys.compatibility.IPolys.dup_ff_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_ff_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_ff_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dup_gf_factor(self,f)
sympy.polys.compatibility.IPolys.dup_gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dup_gff_list(self,f)
sympy.polys.compatibility.IPolys.dup_half_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.dup_inner_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_inner_isolate_negative_roots(self,f,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_isolate_positive_roots(self,f,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_isolate_real_roots(self,f,eps=None,fast=False)
sympy.polys.compatibility.IPolys.dup_inner_refine_real_root(self,f,M,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.polys.compatibility.IPolys.dup_inner_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dup_integrate(self,f,m)
sympy.polys.compatibility.IPolys.dup_invert(self,f,g)
sympy.polys.compatibility.IPolys.dup_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dup_isolate_all_roots(self,f,eps=None,inf=None,sup=None,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_all_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.compatibility.IPolys.dup_isolate_complex_roots_sqf(self,f,eps=None,inf=None,sup=None,blackbox=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots(self,f,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots_list(self,polys,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.compatibility.IPolys.dup_isolate_real_roots_sqf(self,f,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.compatibility.IPolys.dup_l1_norm(self,f)
sympy.polys.compatibility.IPolys.dup_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_lshift(self,f,n)
sympy.polys.compatibility.IPolys.dup_max_norm(self,f)
sympy.polys.compatibility.IPolys.dup_mirror(self,f)
sympy.polys.compatibility.IPolys.dup_monic(self,f)
sympy.polys.compatibility.IPolys.dup_mul(self,f,g)
sympy.polys.compatibility.IPolys.dup_mul_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_mul_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_neg(self,f)
sympy.polys.compatibility.IPolys.dup_outer_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.compatibility.IPolys.dup_pdiv(self,f,g)
sympy.polys.compatibility.IPolys.dup_pexquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_pow(self,f,n)
sympy.polys.compatibility.IPolys.dup_pquo(self,f,g)
sympy.polys.compatibility.IPolys.dup_prem(self,f,g)
sympy.polys.compatibility.IPolys.dup_primitive(self,f)
sympy.polys.compatibility.IPolys.dup_primitive_prs(self,f,g)
sympy.polys.compatibility.IPolys.dup_prs_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dup_qq_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_quo(self,f,g)
sympy.polys.compatibility.IPolys.dup_quo_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_real_imag(self,f)
sympy.polys.compatibility.IPolys.dup_refine_real_root(self,f,s,t,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.compatibility.IPolys.dup_rem(self,f,g)
sympy.polys.compatibility.IPolys.dup_resultant(self,f,g)
sympy.polys.compatibility.IPolys.dup_revert(self,f,n)
sympy.polys.compatibility.IPolys.dup_root_lower_bound(self,f)
sympy.polys.compatibility.IPolys.dup_root_upper_bound(self,f)
sympy.polys.compatibility.IPolys.dup_rr_div(self,f,g)
sympy.polys.compatibility.IPolys.dup_rr_lcm(self,f,g)
sympy.polys.compatibility.IPolys.dup_rr_prs_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_rshift(self,f,n)
sympy.polys.compatibility.IPolys.dup_scale(self,f,a)
sympy.polys.compatibility.IPolys.dup_shift(self,f,a)
sympy.polys.compatibility.IPolys.dup_sign_variations(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_sqf_list_include(self,f,all=False)
sympy.polys.compatibility.IPolys.dup_sqf_norm(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_p(self,f)
sympy.polys.compatibility.IPolys.dup_sqf_part(self,f)
sympy.polys.compatibility.IPolys.dup_sqr(self,f)
sympy.polys.compatibility.IPolys.dup_step_refine_real_root(self,f,M,fast=False)
sympy.polys.compatibility.IPolys.dup_sturm(self,f)
sympy.polys.compatibility.IPolys.dup_sub(self,f,g)
sympy.polys.compatibility.IPolys.dup_sub_ground(self,f,c)
sympy.polys.compatibility.IPolys.dup_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.dup_sub_term(self,f,c,i)
sympy.polys.compatibility.IPolys.dup_subresultants(self,f,g)
sympy.polys.compatibility.IPolys.dup_transform(self,f,p,q)
sympy.polys.compatibility.IPolys.dup_trial_division(self,f,factors)
sympy.polys.compatibility.IPolys.dup_trunc(self,f,p)
sympy.polys.compatibility.IPolys.dup_zz_cyclotomic_factor(self,f)
sympy.polys.compatibility.IPolys.dup_zz_cyclotomic_poly(self,n)
sympy.polys.compatibility.IPolys.dup_zz_diophantine(self,F,m,p)
sympy.polys.compatibility.IPolys.dup_zz_factor(self,f)
sympy.polys.compatibility.IPolys.dup_zz_factor_sqf(self,f)
sympy.polys.compatibility.IPolys.dup_zz_hensel_lift(self,p,f,f_list,l)
sympy.polys.compatibility.IPolys.dup_zz_hensel_step(self,m,f,g,h,s,t)
sympy.polys.compatibility.IPolys.dup_zz_heu_gcd(self,f,g)
sympy.polys.compatibility.IPolys.dup_zz_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.dup_zz_mignotte_bound(self,f)
sympy.polys.compatibility.IPolys.dup_zz_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.fateman_poly_F_1(self)
sympy.polys.compatibility.IPolys.fateman_poly_F_2(self)
sympy.polys.compatibility.IPolys.fateman_poly_F_3(self)
sympy.polys.compatibility.IPolys.from_dense(self,element)
sympy.polys.compatibility.IPolys.from_dict(self,d)
sympy.polys.compatibility.IPolys.from_gf_dense(self,element)
sympy.polys.compatibility.IPolys.gf_LC(self,f)
sympy.polys.compatibility.IPolys.gf_Qmatrix(self,f)
sympy.polys.compatibility.IPolys.gf_TC(self,f)
sympy.polys.compatibility.IPolys.gf_add(self,f,g)
sympy.polys.compatibility.IPolys.gf_add_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_add_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.gf_berlekamp(self,f)
sympy.polys.compatibility.IPolys.gf_cofactors(self,f,g)
sympy.polys.compatibility.IPolys.gf_compose(self,f,g)
sympy.polys.compatibility.IPolys.gf_compose_mod(self,g,h,f)
sympy.polys.compatibility.IPolys.gf_ddf_shoup(self,f)
sympy.polys.compatibility.IPolys.gf_ddf_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.gf_degree(self,f)
sympy.polys.compatibility.IPolys.gf_diff(self,f)
sympy.polys.compatibility.IPolys.gf_div(self,f,g)
sympy.polys.compatibility.IPolys.gf_edf_shoup(self,f,n)
sympy.polys.compatibility.IPolys.gf_edf_zassenhaus(self,f,n)
sympy.polys.compatibility.IPolys.gf_eval(self,f,a)
sympy.polys.compatibility.IPolys.gf_expand(self,F)
sympy.polys.compatibility.IPolys.gf_exquo(self,f,g)
sympy.polys.compatibility.IPolys.gf_factor(self,f)
sympy.polys.compatibility.IPolys.gf_factor_sqf(self,f,method=None)
sympy.polys.compatibility.IPolys.gf_from_dict(self,f)
sympy.polys.compatibility.IPolys.gf_from_int_poly(self,f)
sympy.polys.compatibility.IPolys.gf_gcd(self,f,g)
sympy.polys.compatibility.IPolys.gf_gcdex(self,f,g)
sympy.polys.compatibility.IPolys.gf_irred_p_ben_or(self,f)
sympy.polys.compatibility.IPolys.gf_irred_p_rabin(self,f)
sympy.polys.compatibility.IPolys.gf_irreducible(self,n)
sympy.polys.compatibility.IPolys.gf_irreducible_p(self,f)
sympy.polys.compatibility.IPolys.gf_lcm(self,f,g)
sympy.polys.compatibility.IPolys.gf_lshift(self,f,n)
sympy.polys.compatibility.IPolys.gf_monic(self,f)
sympy.polys.compatibility.IPolys.gf_mul(self,f,g)
sympy.polys.compatibility.IPolys.gf_mul_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_multi_eval(self,f,A)
sympy.polys.compatibility.IPolys.gf_neg(self,f)
sympy.polys.compatibility.IPolys.gf_normal(self,f)
sympy.polys.compatibility.IPolys.gf_pow(self,f,n)
sympy.polys.compatibility.IPolys.gf_pow_mod(self,f,n,g)
sympy.polys.compatibility.IPolys.gf_quo(self,f,g)
sympy.polys.compatibility.IPolys.gf_quo_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_random(self,n)
sympy.polys.compatibility.IPolys.gf_rem(self,f,g)
sympy.polys.compatibility.IPolys.gf_rshift(self,f,n)
sympy.polys.compatibility.IPolys.gf_shoup(self,f)
sympy.polys.compatibility.IPolys.gf_sqf_list(self,f,all=False)
sympy.polys.compatibility.IPolys.gf_sqf_p(self,f)
sympy.polys.compatibility.IPolys.gf_sqf_part(self,f)
sympy.polys.compatibility.IPolys.gf_sqr(self,f)
sympy.polys.compatibility.IPolys.gf_strip(self,f)
sympy.polys.compatibility.IPolys.gf_sub(self,f,g)
sympy.polys.compatibility.IPolys.gf_sub_ground(self,f,a)
sympy.polys.compatibility.IPolys.gf_sub_mul(self,f,g,h)
sympy.polys.compatibility.IPolys.gf_to_dict(self,f,symmetric=True)
sympy.polys.compatibility.IPolys.gf_to_int_poly(self,f,symmetric=True)
sympy.polys.compatibility.IPolys.gf_trace_map(self,a,b,c,n,f)
sympy.polys.compatibility.IPolys.gf_trunc(self,f)
sympy.polys.compatibility.IPolys.gf_zassenhaus(self,f)
sympy.polys.compatibility.IPolys.ground_new(self,element)
sympy.polys.compatibility.IPolys.to_dense(self,element)
sympy.polys.compatibility.IPolys.to_gf_dense(self,element)
sympy.polys.compatibility.IPolys.to_ground(self)
sympy.polys.compatibility.IPolys.wrap(self,element)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/densebasic.py----------------------------------------
A:sympy.polys.densebasic.f->dmp_to_dict(p, u)
A:sympy.polys.densebasic.degs[i]->max(degs[i], dmp_degree(g, v))
A:sympy.polys.densebasic.levels->_rec_validate(f, f, 0, K)
A:sympy.polys.densebasic.u->_rec_validate(f, f, 0, K).pop()
A:sympy.polys.densebasic.d->dmp_degree(f, v)
A:sympy.polys.densebasic.coeff->coeffs.get(k)
A:sympy.polys.densebasic.h->dmp_to_dict(f[n - k], v)
A:sympy.polys.densebasic.g->g.to_dict().to_dict()
A:sympy.polys.densebasic.F->dmp_to_dict(f, u)
A:sympy.polys.densebasic.B[i]->igcd(B[i], m)
A:sympy.polys.densebasic.B->tuple(B)
A:sympy.polys.densebasic.G->monomial_min(*list(F.keys()))
A:sympy.polys.densebasic.(M, H)->dup_multi_deflate(polys, K)
A:sympy.polys.densebasic.monom->list(monom)
A:sympy.polys.densebasic.h[monom]->K(c)
A:sympy.polys.densebasic.terms->_rec_list_terms(f, u, ())
A:sympy.polys.densebasic.k->len(f)
A:sympy.polys.densebasic.f[0]->K.convert(random.randint(a, b))
sympy.densebasic._rec_degree_in(g,v,i,j)
sympy.densebasic._rec_degree_list(g,v,i,degs)
sympy.densebasic._rec_inflate(g,M,v,i,K)
sympy.densebasic._rec_list_terms(g,v,monom)
sympy.densebasic._rec_strip(g,v)
sympy.densebasic._rec_validate(f,g,i,K)
sympy.densebasic.dmp_apply_pairs(f,g,h,args,u,K)
sympy.densebasic.dmp_convert(f,u,K0,K1)
sympy.densebasic.dmp_copy(f,u)
sympy.densebasic.dmp_deflate(f,u,K)
sympy.densebasic.dmp_degree(f,u)
sympy.densebasic.dmp_degree_in(f,j,u)
sympy.densebasic.dmp_degree_list(f,u)
sympy.densebasic.dmp_eject(f,u,K,front=False)
sympy.densebasic.dmp_exclude(f,u,K)
sympy.densebasic.dmp_from_dict(f,u,K)
sympy.densebasic.dmp_from_sympy(f,u,K)
sympy.densebasic.dmp_ground(c,u)
sympy.densebasic.dmp_ground_LC(f,u,K)
sympy.densebasic.dmp_ground_TC(f,u,K)
sympy.densebasic.dmp_ground_nth(f,N,u,K)
sympy.densebasic.dmp_ground_p(f,c,u)
sympy.densebasic.dmp_grounds(c,n,u)
sympy.densebasic.dmp_include(f,J,u,K)
sympy.densebasic.dmp_inflate(f,M,u,K)
sympy.densebasic.dmp_inject(f,u,K,front=False)
sympy.densebasic.dmp_list_terms(f,u,K,order=None)
sympy.densebasic.dmp_multi_deflate(polys,u,K)
sympy.densebasic.dmp_negative_p(f,u,K)
sympy.densebasic.dmp_nest(f,l,K)
sympy.densebasic.dmp_normal(f,u,K)
sympy.densebasic.dmp_nth(f,n,u,K)
sympy.densebasic.dmp_one(u,K)
sympy.densebasic.dmp_one_p(f,u,K)
sympy.densebasic.dmp_permute(f,P,u,K)
sympy.densebasic.dmp_positive_p(f,u,K)
sympy.densebasic.dmp_raise(f,l,u,K)
sympy.densebasic.dmp_slice(f,m,n,u,K)
sympy.densebasic.dmp_slice_in(f,m,n,j,u,K)
sympy.densebasic.dmp_strip(f,u)
sympy.densebasic.dmp_swap(f,i,j,u,K)
sympy.densebasic.dmp_terms_gcd(f,u,K)
sympy.densebasic.dmp_to_dict(f,u,K=None,zero=False)
sympy.densebasic.dmp_to_tuple(f,u)
sympy.densebasic.dmp_true_LT(f,u,K)
sympy.densebasic.dmp_validate(f,K=None)
sympy.densebasic.dmp_zero(u)
sympy.densebasic.dmp_zero_p(f,u)
sympy.densebasic.dmp_zeros(n,u,K)
sympy.densebasic.dup_apply_pairs(f,g,h,args,K)
sympy.densebasic.dup_convert(f,K0,K1)
sympy.densebasic.dup_copy(f)
sympy.densebasic.dup_deflate(f,K)
sympy.densebasic.dup_degree(f)
sympy.densebasic.dup_from_dict(f,K)
sympy.densebasic.dup_from_raw_dict(f,K)
sympy.densebasic.dup_from_sympy(f,K)
sympy.densebasic.dup_inflate(f,m,K)
sympy.densebasic.dup_multi_deflate(polys,K)
sympy.densebasic.dup_normal(f,K)
sympy.densebasic.dup_nth(f,n,K)
sympy.densebasic.dup_random(n,a,b,K)
sympy.densebasic.dup_reverse(f)
sympy.densebasic.dup_slice(f,m,n,K)
sympy.densebasic.dup_strip(f)
sympy.densebasic.dup_terms_gcd(f,K)
sympy.densebasic.dup_to_dict(f,K=None,zero=False)
sympy.densebasic.dup_to_raw_dict(f,K=None,zero=False)
sympy.densebasic.dup_to_tuple(f)
sympy.densebasic.poly_LC(f,K)
sympy.densebasic.poly_TC(f,K)
sympy.polys.densebasic._rec_degree_in(g,v,i,j)
sympy.polys.densebasic._rec_degree_list(g,v,i,degs)
sympy.polys.densebasic._rec_inflate(g,M,v,i,K)
sympy.polys.densebasic._rec_list_terms(g,v,monom)
sympy.polys.densebasic._rec_strip(g,v)
sympy.polys.densebasic._rec_validate(f,g,i,K)
sympy.polys.densebasic.dmp_apply_pairs(f,g,h,args,u,K)
sympy.polys.densebasic.dmp_convert(f,u,K0,K1)
sympy.polys.densebasic.dmp_copy(f,u)
sympy.polys.densebasic.dmp_deflate(f,u,K)
sympy.polys.densebasic.dmp_degree(f,u)
sympy.polys.densebasic.dmp_degree_in(f,j,u)
sympy.polys.densebasic.dmp_degree_list(f,u)
sympy.polys.densebasic.dmp_eject(f,u,K,front=False)
sympy.polys.densebasic.dmp_exclude(f,u,K)
sympy.polys.densebasic.dmp_from_dict(f,u,K)
sympy.polys.densebasic.dmp_from_sympy(f,u,K)
sympy.polys.densebasic.dmp_ground(c,u)
sympy.polys.densebasic.dmp_ground_LC(f,u,K)
sympy.polys.densebasic.dmp_ground_TC(f,u,K)
sympy.polys.densebasic.dmp_ground_nth(f,N,u,K)
sympy.polys.densebasic.dmp_ground_p(f,c,u)
sympy.polys.densebasic.dmp_grounds(c,n,u)
sympy.polys.densebasic.dmp_include(f,J,u,K)
sympy.polys.densebasic.dmp_inflate(f,M,u,K)
sympy.polys.densebasic.dmp_inject(f,u,K,front=False)
sympy.polys.densebasic.dmp_list_terms(f,u,K,order=None)
sympy.polys.densebasic.dmp_multi_deflate(polys,u,K)
sympy.polys.densebasic.dmp_negative_p(f,u,K)
sympy.polys.densebasic.dmp_nest(f,l,K)
sympy.polys.densebasic.dmp_normal(f,u,K)
sympy.polys.densebasic.dmp_nth(f,n,u,K)
sympy.polys.densebasic.dmp_one(u,K)
sympy.polys.densebasic.dmp_one_p(f,u,K)
sympy.polys.densebasic.dmp_permute(f,P,u,K)
sympy.polys.densebasic.dmp_positive_p(f,u,K)
sympy.polys.densebasic.dmp_raise(f,l,u,K)
sympy.polys.densebasic.dmp_slice(f,m,n,u,K)
sympy.polys.densebasic.dmp_slice_in(f,m,n,j,u,K)
sympy.polys.densebasic.dmp_strip(f,u)
sympy.polys.densebasic.dmp_swap(f,i,j,u,K)
sympy.polys.densebasic.dmp_terms_gcd(f,u,K)
sympy.polys.densebasic.dmp_to_dict(f,u,K=None,zero=False)
sympy.polys.densebasic.dmp_to_tuple(f,u)
sympy.polys.densebasic.dmp_true_LT(f,u,K)
sympy.polys.densebasic.dmp_validate(f,K=None)
sympy.polys.densebasic.dmp_zero(u)
sympy.polys.densebasic.dmp_zero_p(f,u)
sympy.polys.densebasic.dmp_zeros(n,u,K)
sympy.polys.densebasic.dup_apply_pairs(f,g,h,args,K)
sympy.polys.densebasic.dup_convert(f,K0,K1)
sympy.polys.densebasic.dup_copy(f)
sympy.polys.densebasic.dup_deflate(f,K)
sympy.polys.densebasic.dup_degree(f)
sympy.polys.densebasic.dup_from_dict(f,K)
sympy.polys.densebasic.dup_from_raw_dict(f,K)
sympy.polys.densebasic.dup_from_sympy(f,K)
sympy.polys.densebasic.dup_inflate(f,m,K)
sympy.polys.densebasic.dup_multi_deflate(polys,K)
sympy.polys.densebasic.dup_normal(f,K)
sympy.polys.densebasic.dup_nth(f,n,K)
sympy.polys.densebasic.dup_random(n,a,b,K)
sympy.polys.densebasic.dup_reverse(f)
sympy.polys.densebasic.dup_slice(f,m,n,K)
sympy.polys.densebasic.dup_strip(f)
sympy.polys.densebasic.dup_terms_gcd(f,K)
sympy.polys.densebasic.dup_to_dict(f,K=None,zero=False)
sympy.polys.densebasic.dup_to_raw_dict(f,K=None,zero=False)
sympy.polys.densebasic.dup_to_tuple(f)
sympy.polys.densebasic.poly_LC(f,K)
sympy.polys.densebasic.poly_TC(f,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/modulargcd.py----------------------------------------
A:sympy.polys.modulargcd.deg->_trunc(g, minpoly, p).degree(0)
A:sympy.polys.modulargcd.lcinv->domain.invert(lc, p)
A:sympy.polys.modulargcd.degrem->rem.trunc_ground(p).degree()
A:sympy.polys.modulargcd.rem->rem.trunc_ground(p).trunc_ground(p)
A:sympy.polys.modulargcd.gamma->fring.drop_to_ground(*xrange(1, fring.ngens)).domain.gcd(f.LC, g.LC)
A:sympy.polys.modulargcd.p->nextprime(p)
A:sympy.polys.modulargcd.fp->_trunc(f, minpoly, p).trunc_ground(p)
A:sympy.polys.modulargcd.gp->_trunc(g, minpoly, p).trunc_ground(p)
A:sympy.polys.modulargcd.hp->_func_field_modgcd_p(fp, gp, minpolyp, p)
A:sympy.polys.modulargcd.deghp->_func_field_modgcd_p(fp, gp, minpolyp, p).degree()
A:sympy.polys.modulargcd.n->len(coeff)
A:sympy.polys.modulargcd.result->_trivial_gcd(f, g)
A:sympy.polys.modulargcd.(cf, f)->_trunc(f, minpoly, p).primitive()
A:sympy.polys.modulargcd.(cg, g)->_trunc(g, minpoly, p).primitive()
A:sympy.polys.modulargcd.ch->_rational_function_reconstruction(c, p, m)
A:sympy.polys.modulargcd.bound->sqrt(m / 2)
A:sympy.polys.modulargcd.hm->_rational_reconstruction_int_coeffs(hm, m, QQring)
A:sympy.polys.modulargcd.h->h.quo_ground(h.LC).quo_ground(h.LC)
A:sympy.polys.modulargcd.(fquo, frem)->_trunc(f, minpoly, p).div(h)
A:sympy.polys.modulargcd.(gquo, grem)->_trunc(g, minpoly, p).div(h)
A:sympy.polys.modulargcd.cff->fquo.mul_ground(cf // ch)
A:sympy.polys.modulargcd.cfg->gquo.mul_ground(cg // ch)
A:sympy.polys.modulargcd.cont->gf_gcd(cont, gf_from_dict(coeff, p, dom), p, dom)
A:sympy.polys.modulargcd.yring->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=ring.symbols[k - 1])
A:sympy.polys.modulargcd.contf->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=ring.symbols[k - 1]).from_dense(cont).trunc_ground(p)
A:sympy.polys.modulargcd.degf->_deg(f)
A:sympy.polys.modulargcd.gamma1->fring.drop_to_ground(*xrange(1, fring.ngens)).domain.gcd(f.LC, g.LC)
A:sympy.polys.modulargcd.gamma2->fring.drop_to_ground(*xrange(1, fring.ngens)).domain.gcd(fswap.LC, gswap.LC)
A:sympy.polys.modulargcd.(contfp, fp)->_primitive(fp, p)
A:sympy.polys.modulargcd.(contgp, gp)->_primitive(gp, p)
A:sympy.polys.modulargcd.conthp->_gf_gcd(contfp, contgp, p)
A:sympy.polys.modulargcd.ycontbound->_gf_gcd(contfp, contgp, p).degree()
A:sympy.polys.modulargcd.delta->_gf_gcd(lcf, lcg, p)
A:sympy.polys.modulargcd.fpa->_trunc(f, minpoly, p).trunc_ground(p).evaluate(1, a).trunc_ground(p)
A:sympy.polys.modulargcd.gpa->_trunc(g, minpoly, p).trunc_ground(p).evaluate(1, a).trunc_ground(p)
A:sympy.polys.modulargcd.hpa->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p)
A:sympy.polys.modulargcd.xbound->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p).degree()
A:sympy.polys.modulargcd.hpmonoms->set(hp.monoms())
A:sympy.polys.modulargcd.hqmonoms->set(hq.monoms())
A:sympy.polys.modulargcd.monoms->set(hp.monoms()).intersection(hqmonoms)
A:sympy.polys.modulargcd.hpq[monom]->crt_(zero, hq[monom], p, q)
A:sympy.polys.modulargcd.denom->domain.invert(denom, p)
A:sympy.polys.modulargcd.coeff->numer.mul_ground(denom)
A:sympy.polys.modulargcd.(xbound, ycontbound)->_degree_bound_bivariate(f, g)
A:sympy.polys.modulargcd.fswap->_swap(f, 1)
A:sympy.polys.modulargcd.gswap->_swap(g, 1)
A:sympy.polys.modulargcd.degyf->_trunc(f, minpoly, p).degree(k - 1)
A:sympy.polys.modulargcd.degyg->_trunc(g, minpoly, p).degree(k - 1)
A:sympy.polys.modulargcd.(ybound, xcontbound)->_degree_bound_bivariate(fswap, gswap)
A:sympy.polys.modulargcd.degconthp->_gf_gcd(contfp, contgp, p).degree()
A:sympy.polys.modulargcd.degcontfp->contfp.degree()
A:sympy.polys.modulargcd.degcontgp->contgp.degree()
A:sympy.polys.modulargcd.degdelta->_gf_gcd(lcf, lcg, p).degree()
A:sympy.polys.modulargcd.deltaa->_gf_gcd(lcf, lcg, p).evaluate(0, a)
A:sympy.polys.modulargcd.deghpa->hpa.mul_ground(deltaa).trunc_ground(p).mul_ground(deltaa).trunc_ground(p).degree()
A:sympy.polys.modulargcd.degyhp->_func_field_modgcd_p(fp, gp, minpolyp, p).degree(1)
A:sympy.polys.modulargcd.degh->h.quo_ground(h.LC).quo_ground(h.LC).degree()
A:sympy.polys.modulargcd.(contf, f)->_primitive(f, p)
A:sympy.polys.modulargcd.(contg, g)->_primitive(g, p)
A:sympy.polys.modulargcd.conth->_gf_gcd(contf, contg, p)
A:sympy.polys.modulargcd.degcontf->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=ring.symbols[k - 1]).from_dense(cont).trunc_ground(p).degree()
A:sympy.polys.modulargcd.degcontg->contg.degree()
A:sympy.polys.modulargcd.degconth->_gf_gcd(contf, contg, p).degree()
A:sympy.polys.modulargcd.lcf->_LC(f)
A:sympy.polys.modulargcd.lcg->_LC(g)
A:sympy.polys.modulargcd.points->set(range(p))
A:sympy.polys.modulargcd.fa->_evaluate_ground(f, k - 1, a)
A:sympy.polys.modulargcd.ga->_evaluate_ground(g, k - 1, a)
A:sympy.polys.modulargcd.ha->_func_field_modgcd_p(fa, ga, minpolya, p)
A:sympy.polys.modulargcd.degyh->h.quo_ground(h.LC).quo_ground(h.LC).degree(k - 1)
A:sympy.polys.modulargcd.contbound->list(degbound)
A:sympy.polys.modulargcd.(densequo, denserem)->gf_div(f.to_dense(), g.to_dense(), p, ring.domain)
A:sympy.polys.modulargcd.M->m.mul_monom(monom[1:]).degree()
A:sympy.polys.modulargcd.a->a.mul_ground(lcinv).trunc_ground(p).mul_ground(lcinv).trunc_ground(p)
A:sympy.polys.modulargcd.b->b.mul_ground(lcinv).trunc_ground(p).mul_ground(lcinv).trunc_ground(p)
A:sympy.polys.modulargcd.field->domain.get_field()
A:sympy.polys.modulargcd.coeffh->reconstruction(coeff, m, domain)
A:sympy.polys.modulargcd.(s, t, h)->gf_gcdex(f.to_dense(), g.to_dense(), p, ring.domain)
A:sympy.polys.modulargcd.minpoly->_minpoly_from_dense(domain.mod, ZZring_.drop(0))
A:sympy.polys.modulargcd.p_->fring.drop_to_ground(*xrange(1, fring.ngens)).ground_new(p)
A:sympy.polys.modulargcd.f->_trunc(f, minpoly, p)
A:sympy.polys.modulargcd.g->_trunc(g, minpoly, p)
A:sympy.polys.modulargcd.(lcinv, _, gcd)->_gf_gcdex(ring.dmp_LC(g), minpoly, p)
A:sympy.polys.modulargcd.quo->(lcinv * ring.dmp_LC(rem)).set_ring(ring)
A:sympy.polys.modulargcd.lcfinv->_gf_gcdex(ring.dmp_LC(f), minpoly, p)[0].set_ring(ring)
A:sympy.polys.modulargcd.zxring->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=(ring.symbols[1], ring.symbols[0]))
A:sympy.polys.modulargcd.degm->_minpoly_from_dense(domain.mod, ZZring_.drop(0)).degree(1)
A:sympy.polys.modulargcd.lch->_LC(h).set_ring(ring)
A:sympy.polys.modulargcd.lcrem->_LC(rem.set_ring(zxring)).set_ring(ring)
A:sympy.polys.modulargcd.ring->fring.drop_to_ground(*xrange(1, fring.ngens))
A:sympy.polys.modulargcd.fa[monom]->numer.mul_ground(denom).evaluate(i, a)
A:sympy.polys.modulargcd.qdomain->qdomain.clone(domain=qdomain.domain.ring.to_field()).clone(domain=qdomain.domain.ring.to_field())
A:sympy.polys.modulargcd.qring->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(domain=qdomain)
A:sympy.polys.modulargcd.gammaa->_evaluate_ground(gamma, k - 1, a)
A:sympy.polys.modulargcd.minpolya->_evaluate_ground(minpoly, k - 1, a)
A:sympy.polys.modulargcd.m->m.mul_monom(monom[1:]).mul_monom(monom[1:])
A:sympy.polys.modulargcd.den->domain.lcm(den, c.denominator)
A:sympy.polys.modulargcd.QQdomain->domain.ring.clone(domain=domain.domain.get_field())
A:sympy.polys.modulargcd.QQring->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(domain=ring.domain.get_field())
A:sympy.polys.modulargcd.minpolyp->_minpoly_from_dense(domain.mod, ZZring_.drop(0)).trunc_ground(p)
A:sympy.polys.modulargcd.c->domain([domain.domain(coeff)] + [0] * monom[1])
A:sympy.polys.modulargcd.minpoly_[monom]->fring.drop_to_ground(*xrange(1, fring.ngens)).domain(coeff)
A:sympy.polys.modulargcd.f_->_to_ZZ_poly(f, ZZring_)
A:sympy.polys.modulargcd.z->Dummy('z')
A:sympy.polys.modulargcd.ZZring->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=ring.symbols + (z,), domain=domain.domain.get_ring())
A:sympy.polys.modulargcd.g_->_to_ZZ_poly(g, ZZring_)
A:sympy.polys.modulargcd.(contx0f, f)->_primitive_in_x0(f)
A:sympy.polys.modulargcd.(contx0g, g)->_primitive_in_x0(g)
A:sympy.polys.modulargcd.ZZring_->fring.drop_to_ground(*xrange(1, fring.ngens)).clone(symbols=ring.symbols + (z,), domain=domain.domain.get_ring()).drop_to_ground(*xrange(1, n))
A:sympy.polys.modulargcd.(contx0h_, h)->_primitive_in_x0(h)
sympy.modulargcd._LC(f)
sympy.modulargcd._chinese_remainder_reconstruction_multivariate(hp,hq,p,q)
sympy.modulargcd._chinese_remainder_reconstruction_univariate(hp,hq,p,q)
sympy.modulargcd._deg(f)
sympy.modulargcd._degree_bound_bivariate(f,g)
sympy.modulargcd._degree_bound_univariate(f,g)
sympy.modulargcd._euclidean_algorithm(f,g,minpoly,p)
sympy.modulargcd._evaluate_ground(f,i,a)
sympy.modulargcd._func_field_modgcd_m(f,g,minpoly)
sympy.modulargcd._func_field_modgcd_p(f,g,minpoly,p)
sympy.modulargcd._gf_div(f,g,p)
sympy.modulargcd._gf_gcd(fp,gp,p)
sympy.modulargcd._gf_gcdex(f,g,p)
sympy.modulargcd._integer_rational_reconstruction(c,m,domain)
sympy.modulargcd._interpolate_multivariate(evalpoints,hpeval,ring,i,p,ground=False)
sympy.modulargcd._minpoly_from_dense(minpoly,ring)
sympy.modulargcd._modgcd_multivariate_p(f,g,p,degbound,contbound)
sympy.modulargcd._primitive(f,p)
sympy.modulargcd._primitive_in_x0(f)
sympy.modulargcd._rational_function_reconstruction(c,p,m)
sympy.modulargcd._rational_reconstruction_func_coeffs(hm,p,m,ring,k)
sympy.modulargcd._rational_reconstruction_int_coeffs(hm,m,ring)
sympy.modulargcd._swap(f,i)
sympy.modulargcd._to_ANP_poly(f,ring)
sympy.modulargcd._to_ZZ_poly(f,ring)
sympy.modulargcd._trial_division(f,h,minpoly,p=None)
sympy.modulargcd._trivial_gcd(f,g)
sympy.modulargcd._trunc(f,minpoly,p)
sympy.modulargcd.func_field_modgcd(f,g)
sympy.modulargcd.modgcd_bivariate(f,g)
sympy.modulargcd.modgcd_multivariate(f,g)
sympy.modulargcd.modgcd_univariate(f,g)
sympy.polys.modulargcd._LC(f)
sympy.polys.modulargcd._chinese_remainder_reconstruction_multivariate(hp,hq,p,q)
sympy.polys.modulargcd._chinese_remainder_reconstruction_univariate(hp,hq,p,q)
sympy.polys.modulargcd._deg(f)
sympy.polys.modulargcd._degree_bound_bivariate(f,g)
sympy.polys.modulargcd._degree_bound_univariate(f,g)
sympy.polys.modulargcd._euclidean_algorithm(f,g,minpoly,p)
sympy.polys.modulargcd._evaluate_ground(f,i,a)
sympy.polys.modulargcd._func_field_modgcd_m(f,g,minpoly)
sympy.polys.modulargcd._func_field_modgcd_p(f,g,minpoly,p)
sympy.polys.modulargcd._gf_div(f,g,p)
sympy.polys.modulargcd._gf_gcd(fp,gp,p)
sympy.polys.modulargcd._gf_gcdex(f,g,p)
sympy.polys.modulargcd._integer_rational_reconstruction(c,m,domain)
sympy.polys.modulargcd._interpolate_multivariate(evalpoints,hpeval,ring,i,p,ground=False)
sympy.polys.modulargcd._minpoly_from_dense(minpoly,ring)
sympy.polys.modulargcd._modgcd_multivariate_p(f,g,p,degbound,contbound)
sympy.polys.modulargcd._primitive(f,p)
sympy.polys.modulargcd._primitive_in_x0(f)
sympy.polys.modulargcd._rational_function_reconstruction(c,p,m)
sympy.polys.modulargcd._rational_reconstruction_func_coeffs(hm,p,m,ring,k)
sympy.polys.modulargcd._rational_reconstruction_int_coeffs(hm,m,ring)
sympy.polys.modulargcd._swap(f,i)
sympy.polys.modulargcd._to_ANP_poly(f,ring)
sympy.polys.modulargcd._to_ZZ_poly(f,ring)
sympy.polys.modulargcd._trial_division(f,h,minpoly,p=None)
sympy.polys.modulargcd._trivial_gcd(f,g)
sympy.polys.modulargcd._trunc(f,minpoly,p)
sympy.polys.modulargcd.func_field_modgcd(f,g)
sympy.polys.modulargcd.modgcd_bivariate(f,g)
sympy.polys.modulargcd.modgcd_multivariate(f,g)
sympy.polys.modulargcd.modgcd_univariate(f,g)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/monomials.py----------------------------------------
A:sympy.polys.monomials.monoms->itermonomials(tail, degree)
A:sympy.polys.monomials.C->monomial_ldiv(A, B)
A:sympy.polys.monomials.M->list(monoms[0])
A:sympy.polys.monomials.M[i]->min(M[i], n)
A:sympy.polys.monomials.monom->monomial_div(a_lm, b_lm)
A:sympy.polys.monomials.template->dedent('        def %(name)s(A, B):\n            (%(A)s,) = A\n            (%(B)s,) = B\n            return (%(AB)s,)\n        ')
A:sympy.polys.monomials.A->self._vars('a')
A:sympy.polys.monomials.B->self._vars('b')
A:sympy.polys.monomials.R->self._vars('r')
A:sympy.polys.monomials.(rep, gens)->dict_from_expr(sympify(monom), gens=gens)
A:sympy.polys.monomials.self.exponents->tuple(map(int, monom))
A:sympy.polys.monomials.result->monomial_div(self.exponents, exponents)
A:sympy.polys.monomials.n->int(other)
A:sympy.polys.monomials.exponents->monomial_mul(exponents, self.exponents)
sympy.Monomial(self,monom,gens=None)
sympy.Monomial.__div__(self,other)
sympy.Monomial.__eq__(self,other)
sympy.Monomial.__getitem__(self,item)
sympy.Monomial.__hash__(self)
sympy.Monomial.__iter__(self)
sympy.Monomial.__len__(self)
sympy.Monomial.__mul__(self,other)
sympy.Monomial.__ne__(self,other)
sympy.Monomial.__pow__(self,other)
sympy.Monomial.__str__(self)
sympy.Monomial.as_expr(self,*gens)
sympy.Monomial.gcd(self,other)
sympy.Monomial.lcm(self,other)
sympy.Monomial.rebuild(self,exponents,gens=None)
sympy.MonomialOps(self,ngens)
sympy.MonomialOps._build(self,code,name)
sympy.MonomialOps._vars(self,name)
sympy.MonomialOps.div(self)
sympy.MonomialOps.gcd(self)
sympy.MonomialOps.lcm(self)
sympy.MonomialOps.ldiv(self)
sympy.MonomialOps.mul(self)
sympy.MonomialOps.mulpow(self)
sympy.MonomialOps.pow(self)
sympy.itermonomials(variables,degree)
sympy.monomial_count(V,N)
sympy.monomial_deg(M)
sympy.monomial_div(A,B)
sympy.monomial_divides(A,B)
sympy.monomial_gcd(A,B)
sympy.monomial_lcm(A,B)
sympy.monomial_ldiv(A,B)
sympy.monomial_max(*monoms)
sympy.monomial_min(*monoms)
sympy.monomial_mul(A,B)
sympy.monomial_pow(A,n)
sympy.polys.monomials.Monomial(self,monom,gens=None)
sympy.polys.monomials.Monomial.__div__(self,other)
sympy.polys.monomials.Monomial.__eq__(self,other)
sympy.polys.monomials.Monomial.__getitem__(self,item)
sympy.polys.monomials.Monomial.__hash__(self)
sympy.polys.monomials.Monomial.__init__(self,monom,gens=None)
sympy.polys.monomials.Monomial.__iter__(self)
sympy.polys.monomials.Monomial.__len__(self)
sympy.polys.monomials.Monomial.__mul__(self,other)
sympy.polys.monomials.Monomial.__ne__(self,other)
sympy.polys.monomials.Monomial.__pow__(self,other)
sympy.polys.monomials.Monomial.__str__(self)
sympy.polys.monomials.Monomial.as_expr(self,*gens)
sympy.polys.monomials.Monomial.gcd(self,other)
sympy.polys.monomials.Monomial.lcm(self,other)
sympy.polys.monomials.Monomial.rebuild(self,exponents,gens=None)
sympy.polys.monomials.MonomialOps(self,ngens)
sympy.polys.monomials.MonomialOps.__init__(self,ngens)
sympy.polys.monomials.MonomialOps._build(self,code,name)
sympy.polys.monomials.MonomialOps._vars(self,name)
sympy.polys.monomials.MonomialOps.div(self)
sympy.polys.monomials.MonomialOps.gcd(self)
sympy.polys.monomials.MonomialOps.lcm(self)
sympy.polys.monomials.MonomialOps.ldiv(self)
sympy.polys.monomials.MonomialOps.mul(self)
sympy.polys.monomials.MonomialOps.mulpow(self)
sympy.polys.monomials.MonomialOps.pow(self)
sympy.polys.monomials.itermonomials(variables,degree)
sympy.polys.monomials.monomial_count(V,N)
sympy.polys.monomials.monomial_deg(M)
sympy.polys.monomials.monomial_div(A,B)
sympy.polys.monomials.monomial_divides(A,B)
sympy.polys.monomials.monomial_gcd(A,B)
sympy.polys.monomials.monomial_lcm(A,B)
sympy.polys.monomials.monomial_ldiv(A,B)
sympy.polys.monomials.monomial_max(*monoms)
sympy.polys.monomials.monomial_min(*monoms)
sympy.polys.monomials.monomial_mul(A,B)
sympy.polys.monomials.monomial_pow(A,n)
sympy.polys.monomials.term_div(a,b,domain)
sympy.term_div(a,b,domain)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/rootisolation.py----------------------------------------
A:sympy.polys.rootisolation.f->dup_transform(f, dup_strip([a, b]), dup_strip([c, d]), dom)
A:sympy.polys.rootisolation.s->dup_rem(sturm[-2], sturm[-1], K)
A:sympy.polys.rootisolation.q->min(QL)
A:sympy.polys.rootisolation.bound->dup_root_upper_bound(dup_reverse(f), K)
A:sympy.polys.rootisolation.A->K(int(A))
A:sympy.polys.rootisolation.k->dup_sign_variations(f, K)
A:sympy.polys.rootisolation.F->K.get_field()
A:sympy.polys.rootisolation.(a, b, c, d)->_mobius_from_interval((s, t), dom.get_field())
A:sympy.polys.rootisolation.(f, (a, b, c, d))->dup_step_refine_real_root(f, (a, b, c, d), K, fast=fast)
A:sympy.polys.rootisolation.(u, v)->_mobius_to_interval(M, F)
A:sympy.polys.rootisolation.(s, t)->dup_outer_refine_real_root(f, s, t, K, eps=eps, steps=steps, disjoint=disjoint, fast=fast)
A:sympy.polys.rootisolation.(a, b, c, d, f, k)->stack.pop()
A:sympy.polys.rootisolation.f1->dup_rshift(f1, 1, K)
A:sympy.polys.rootisolation.k1->dup_sign_variations(f1, K)
A:sympy.polys.rootisolation.f2->dup_rshift(f2, 1, K)
A:sympy.polys.rootisolation.k2->dup_sign_variations(f2, K)
A:sympy.polys.rootisolation.(f, M)->dup_inner_refine_real_root(f, M, K, steps=1, fast=fast, mobius=True)
A:sympy.polys.rootisolation.roots->sorted(I_neg + I_zero + I_pos)
A:sympy.polys.rootisolation.result->_discard_if_outside_interval(f, M, inf, sup, K, True, fast, mobius)
A:sympy.polys.rootisolation.(j, f)->dup_terms_gcd(f, K)
A:sympy.polys.rootisolation.(I_zero, f)->_isolate_zero(f, K, inf, sup, basis=basis, sqf=False)
A:sympy.polys.rootisolation.I_neg->dup_inner_isolate_negative_roots(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.I_pos->dup_inner_isolate_positive_roots(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.(_, factors)->dup_sqf_list(f, K)
A:sympy.polys.rootisolation.(I_neg, I_pos)->_real_isolate_and_disjoin(factors_list, K, eps=eps, inf=inf, sup=sup, strict=strict, basis=basis, fast=fast)
A:sympy.polys.rootisolation.(j, p)->dup_terms_gcd(p, K)
A:sympy.polys.rootisolation.(g, N)->dup_inner_refine_real_root(g, N, K, steps=1, fast=fast, mobius=True)
A:sympy.polys.rootisolation.field->self._inner_refine().dom.get_field()
A:sympy.polys.rootisolation.sturm->dup_sturm(f, K)
A:sympy.polys.rootisolation.signs_inf->dup_sign_variations([dup_eval(s, inf, K) for s in sturm], K)
A:sympy.polys.rootisolation.signs_sup->dup_sign_variations([dup_eval(s, sup, K) for s in sturm], K)
A:sympy.polys.rootisolation.count->abs(signs_inf - signs_sup)
A:sympy.polys.rootisolation.re->dup_eval(f1, a, F)
A:sympy.polys.rootisolation.im->dup_eval(f2, a, F)
A:sympy.polys.rootisolation.cls->_classify_point(re, im)
A:sympy.polys.rootisolation.exclude->set(exclude)
A:sympy.polys.rootisolation.(f1, f2)->dup_real_imag(f, F)
A:sympy.polys.rootisolation.f1L1F->dmp_eval_in(f1, v, 1, 1, F)
A:sympy.polys.rootisolation.f2L1F->dmp_eval_in(f2, v, 1, 1, F)
A:sympy.polys.rootisolation.(_, f1L1R)->dup_clear_denoms(f1L1F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L1R)->dup_clear_denoms(f2L1F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L2F->dmp_eval_in(f1, s, 0, 1, F)
A:sympy.polys.rootisolation.f2L2F->dmp_eval_in(f2, s, 0, 1, F)
A:sympy.polys.rootisolation.(_, f1L2R)->dup_clear_denoms(f1L2F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L2R)->dup_clear_denoms(f2L2F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L3F->dmp_eval_in(f1, t, 1, 1, F)
A:sympy.polys.rootisolation.f2L3F->dmp_eval_in(f2, t, 1, 1, F)
A:sympy.polys.rootisolation.(_, f1L3R)->dup_clear_denoms(f1L3F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L3R)->dup_clear_denoms(f2L3F, F, R, convert=True)
A:sympy.polys.rootisolation.f1L4F->dmp_eval_in(f1, u, 0, 1, F)
A:sympy.polys.rootisolation.f2L4F->dmp_eval_in(f2, u, 0, 1, F)
A:sympy.polys.rootisolation.(_, f1L4R)->dup_clear_denoms(f1L4F, F, R, convert=True)
A:sympy.polys.rootisolation.(_, f2L4R)->dup_clear_denoms(f2L4F, F, R, convert=True)
A:sympy.polys.rootisolation.I_L1->dup_isolate_real_roots_list(S_L1, F, inf=u, sup=s, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.I_L2->dup_isolate_real_roots_list(S_L2, F, inf=v, sup=t, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.I_L3->_reverse_intervals(I_L3)
A:sympy.polys.rootisolation.I_L4->_reverse_intervals(I_L4)
A:sympy.polys.rootisolation.Q_L1->_intervals_to_quadrants(I_L1, f1L1, f2L1, u, s, F)
A:sympy.polys.rootisolation.Q_L2->_intervals_to_quadrants(I_L2, f1L2, f2L2, v, t, F)
A:sympy.polys.rootisolation.Q_L3->_intervals_to_quadrants(I_L3, f1L3, f2L3, s, u, F)
A:sympy.polys.rootisolation.Q_L4->_intervals_to_quadrants(I_L4, f1L4, f2L4, t, v, F)
A:sympy.polys.rootisolation.T->_traverse_quadrants(Q_L1, Q_L2, Q_L3, Q_L4)
A:sympy.polys.rootisolation.f1V->dmp_eval_in(f1, x, 0, 1, F)
A:sympy.polys.rootisolation.f2V->dmp_eval_in(f2, x, 0, 1, F)
A:sympy.polys.rootisolation.I_V->dup_isolate_real_roots_list([f1V, f2V], F, inf=v, sup=t, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.(a, b)->dup_refine_real_root(h, a, b, F.get_ring(), disjoint=y, fast=True)
A:sympy.polys.rootisolation.Q_L1_L->_intervals_to_quadrants(I_L1_L, f1L1F, f2L1F, u, x, F)
A:sympy.polys.rootisolation.Q_L2_L->_intervals_to_quadrants(I_L2_L, f1V, f2V, v, t, F)
A:sympy.polys.rootisolation.Q_L3_L->_intervals_to_quadrants(I_L3_L, f1L3F, f2L3F, x, u, F)
A:sympy.polys.rootisolation.Q_L1_R->_intervals_to_quadrants(I_L1_R, f1L1F, f2L1F, x, s, F)
A:sympy.polys.rootisolation.Q_L3_R->_intervals_to_quadrants(I_L3_R, f1L3F, f2L3F, s, x, F)
A:sympy.polys.rootisolation.Q_L4_R->_intervals_to_quadrants(I_L4_R, f1V, f2V, t, v, F)
A:sympy.polys.rootisolation.T_L->_traverse_quadrants(Q_L1_L, Q_L2_L, Q_L3_L, Q_L4_L, exclude=True)
A:sympy.polys.rootisolation.T_R->_traverse_quadrants(Q_L1_R, Q_L2_R, Q_L3_R, Q_L4_R, exclude=True)
A:sympy.polys.rootisolation.N_L->_winding_number(T_L, F)
A:sympy.polys.rootisolation.N_R->_winding_number(T_R, F)
A:sympy.polys.rootisolation.f1H->dmp_eval_in(f1, y, 1, 1, F)
A:sympy.polys.rootisolation.f2H->dmp_eval_in(f2, y, 1, 1, F)
A:sympy.polys.rootisolation.I_H->dup_isolate_real_roots_list([f1H, f2H], F, inf=u, sup=s, fast=True, strict=True, basis=True)
A:sympy.polys.rootisolation.Q_L2_B->_intervals_to_quadrants(I_L2_B, f1L2F, f2L2F, v, y, F)
A:sympy.polys.rootisolation.Q_L3_B->_intervals_to_quadrants(I_L3_B, f1H, f2H, s, u, F)
A:sympy.polys.rootisolation.Q_L4_B->_intervals_to_quadrants(I_L4_B, f1L4F, f2L4F, y, v, F)
A:sympy.polys.rootisolation.Q_L1_U->_intervals_to_quadrants(I_L1_U, f1H, f2H, u, s, F)
A:sympy.polys.rootisolation.Q_L2_U->_intervals_to_quadrants(I_L2_U, f1L2F, f2L2F, y, t, F)
A:sympy.polys.rootisolation.Q_L4_U->_intervals_to_quadrants(I_L4_U, f1L4F, f2L4F, t, y, F)
A:sympy.polys.rootisolation.T_B->_traverse_quadrants(Q_L1_B, Q_L2_B, Q_L3_B, Q_L4_B, exclude=True)
A:sympy.polys.rootisolation.T_U->_traverse_quadrants(Q_L1_U, Q_L2_U, Q_L3_U, Q_L4_U, exclude=True)
A:sympy.polys.rootisolation.N_B->_winding_number(T_B, F)
A:sympy.polys.rootisolation.N_U->_winding_number(T_U, F)
A:sympy.polys.rootisolation.f1L1->dmp_eval_in(f1, v, 1, 1, F)
A:sympy.polys.rootisolation.f2L1->dmp_eval_in(f2, v, 1, 1, F)
A:sympy.polys.rootisolation.f1L2->dmp_eval_in(f1, s, 0, 1, F)
A:sympy.polys.rootisolation.f2L2->dmp_eval_in(f2, s, 0, 1, F)
A:sympy.polys.rootisolation.f1L3->dmp_eval_in(f1, t, 1, 1, F)
A:sympy.polys.rootisolation.f2L3->dmp_eval_in(f2, t, 1, 1, F)
A:sympy.polys.rootisolation.f1L4->dmp_eval_in(f1, u, 0, 1, F)
A:sympy.polys.rootisolation.f2L4->dmp_eval_in(f2, u, 0, 1, F)
A:sympy.polys.rootisolation.N->_winding_number(T, F)
A:sympy.polys.rootisolation.(N, (u, v), (s, t), I, Q, F1, F2)->_depth_first_select(rectangles)
A:sympy.polys.rootisolation.(D_L, D_R)->_vertical_bisection(1, (u, v), (s, t), I, Q, F1, F2, f1, f2, dom)
A:sympy.polys.rootisolation.(D_B, D_U)->_horizontal_bisection(1, (u, v), (s, t), I, Q, F1, F2, f1, f2, dom)
A:sympy.polys.rootisolation.(real_part, complex_part)->dup_isolate_all_roots_sqf(f, K, eps=eps, inf=inf, sup=sup, fast=fast)
A:sympy.polys.rootisolation.(f, mobius)->dup_inner_refine_real_root(self.f, self.mobius, self.dom, steps=1, mobius=True)
A:sympy.polys.rootisolation.self->self._inner_refine()._inner_refine()
sympy.polys.rootisolation.ComplexInterval(self,a,b,I,Q,F1,F2,f1,f2,dom,conj=False)
sympy.polys.rootisolation.ComplexInterval.__init__(self,a,b,I,Q,F1,F2,f1,f2,dom,conj=False)
sympy.polys.rootisolation.ComplexInterval.__repr__(self)
sympy.polys.rootisolation.ComplexInterval._inner_refine(self)
sympy.polys.rootisolation.ComplexInterval.as_tuple(self)
sympy.polys.rootisolation.ComplexInterval.ax(self)
sympy.polys.rootisolation.ComplexInterval.ay(self)
sympy.polys.rootisolation.ComplexInterval.bx(self)
sympy.polys.rootisolation.ComplexInterval.by(self)
sympy.polys.rootisolation.ComplexInterval.center(self)
sympy.polys.rootisolation.ComplexInterval.conjugate(self)
sympy.polys.rootisolation.ComplexInterval.dx(self)
sympy.polys.rootisolation.ComplexInterval.dy(self)
sympy.polys.rootisolation.ComplexInterval.is_disjoint(self,other)
sympy.polys.rootisolation.ComplexInterval.refine(self)
sympy.polys.rootisolation.ComplexInterval.refine_disjoint(self,other)
sympy.polys.rootisolation.ComplexInterval.refine_size(self,dx,dy=None)
sympy.polys.rootisolation.ComplexInterval.refine_step(self,steps=1)
sympy.polys.rootisolation.RealInterval(self,data,f,dom)
sympy.polys.rootisolation.RealInterval.__init__(self,data,f,dom)
sympy.polys.rootisolation.RealInterval.__repr__(self)
sympy.polys.rootisolation.RealInterval._inner_refine(self)
sympy.polys.rootisolation.RealInterval.a(self)
sympy.polys.rootisolation.RealInterval.as_tuple(self)
sympy.polys.rootisolation.RealInterval.b(self)
sympy.polys.rootisolation.RealInterval.center(self)
sympy.polys.rootisolation.RealInterval.dx(self)
sympy.polys.rootisolation.RealInterval.is_disjoint(self,other)
sympy.polys.rootisolation.RealInterval.refine(self)
sympy.polys.rootisolation.RealInterval.refine_disjoint(self,other)
sympy.polys.rootisolation.RealInterval.refine_size(self,dx)
sympy.polys.rootisolation.RealInterval.refine_step(self,steps=1)
sympy.polys.rootisolation._classify_point(re,im)
sympy.polys.rootisolation._depth_first_select(rectangles)
sympy.polys.rootisolation._discard_if_outside_interval(f,M,inf,sup,K,negative,fast,mobius)
sympy.polys.rootisolation._disjoint_p(M,N,strict=False)
sympy.polys.rootisolation._horizontal_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.polys.rootisolation._intervals_to_quadrants(intervals,f1,f2,s,t,F)
sympy.polys.rootisolation._isolate_zero(f,K,inf,sup,basis=False,sqf=False)
sympy.polys.rootisolation._mobius_from_interval(I,field)
sympy.polys.rootisolation._mobius_to_interval(M,field)
sympy.polys.rootisolation._real_isolate_and_disjoin(factors,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.rootisolation._rectangle_small_p(a,b,eps)
sympy.polys.rootisolation._reverse_intervals(intervals)
sympy.polys.rootisolation._traverse_quadrants(Q_L1,Q_L2,Q_L3,Q_L4,exclude=None)
sympy.polys.rootisolation._vertical_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.polys.rootisolation._winding_number(T,field)
sympy.polys.rootisolation.dup_count_complex_roots(f,K,inf=None,sup=None,exclude=None)
sympy.polys.rootisolation.dup_count_real_roots(f,K,inf=None,sup=None)
sympy.polys.rootisolation.dup_inner_isolate_negative_roots(f,K,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_inner_isolate_positive_roots(f,K,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_inner_isolate_real_roots(f,K,eps=None,fast=False)
sympy.polys.rootisolation.dup_inner_refine_real_root(f,M,K,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.polys.rootisolation.dup_isolate_all_roots(f,K,eps=None,inf=None,sup=None,fast=False)
sympy.polys.rootisolation.dup_isolate_all_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.rootisolation.dup_isolate_complex_roots_sqf(f,K,eps=None,inf=None,sup=None,blackbox=False)
sympy.polys.rootisolation.dup_isolate_real_roots(f,K,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.polys.rootisolation.dup_isolate_real_roots_list(polys,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.polys.rootisolation.dup_isolate_real_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.polys.rootisolation.dup_outer_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.rootisolation.dup_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.polys.rootisolation.dup_root_lower_bound(f,K)
sympy.polys.rootisolation.dup_root_upper_bound(f,K)
sympy.polys.rootisolation.dup_step_refine_real_root(f,M,K,fast=False)
sympy.polys.rootisolation.dup_sturm(f,K)
sympy.rootisolation.ComplexInterval(self,a,b,I,Q,F1,F2,f1,f2,dom,conj=False)
sympy.rootisolation.ComplexInterval.__repr__(self)
sympy.rootisolation.ComplexInterval._inner_refine(self)
sympy.rootisolation.ComplexInterval.as_tuple(self)
sympy.rootisolation.ComplexInterval.ax(self)
sympy.rootisolation.ComplexInterval.ay(self)
sympy.rootisolation.ComplexInterval.bx(self)
sympy.rootisolation.ComplexInterval.by(self)
sympy.rootisolation.ComplexInterval.center(self)
sympy.rootisolation.ComplexInterval.conjugate(self)
sympy.rootisolation.ComplexInterval.dx(self)
sympy.rootisolation.ComplexInterval.dy(self)
sympy.rootisolation.ComplexInterval.is_disjoint(self,other)
sympy.rootisolation.ComplexInterval.refine(self)
sympy.rootisolation.ComplexInterval.refine_disjoint(self,other)
sympy.rootisolation.ComplexInterval.refine_size(self,dx,dy=None)
sympy.rootisolation.ComplexInterval.refine_step(self,steps=1)
sympy.rootisolation.RealInterval(self,data,f,dom)
sympy.rootisolation.RealInterval.__repr__(self)
sympy.rootisolation.RealInterval._inner_refine(self)
sympy.rootisolation.RealInterval.a(self)
sympy.rootisolation.RealInterval.as_tuple(self)
sympy.rootisolation.RealInterval.b(self)
sympy.rootisolation.RealInterval.center(self)
sympy.rootisolation.RealInterval.dx(self)
sympy.rootisolation.RealInterval.is_disjoint(self,other)
sympy.rootisolation.RealInterval.refine(self)
sympy.rootisolation.RealInterval.refine_disjoint(self,other)
sympy.rootisolation.RealInterval.refine_size(self,dx)
sympy.rootisolation.RealInterval.refine_step(self,steps=1)
sympy.rootisolation._classify_point(re,im)
sympy.rootisolation._depth_first_select(rectangles)
sympy.rootisolation._discard_if_outside_interval(f,M,inf,sup,K,negative,fast,mobius)
sympy.rootisolation._disjoint_p(M,N,strict=False)
sympy.rootisolation._horizontal_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.rootisolation._intervals_to_quadrants(intervals,f1,f2,s,t,F)
sympy.rootisolation._isolate_zero(f,K,inf,sup,basis=False,sqf=False)
sympy.rootisolation._mobius_from_interval(I,field)
sympy.rootisolation._mobius_to_interval(M,field)
sympy.rootisolation._real_isolate_and_disjoin(factors,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.rootisolation._rectangle_small_p(a,b,eps)
sympy.rootisolation._reverse_intervals(intervals)
sympy.rootisolation._traverse_quadrants(Q_L1,Q_L2,Q_L3,Q_L4,exclude=None)
sympy.rootisolation._vertical_bisection(N,a,b,I,Q,F1,F2,f1,f2,F)
sympy.rootisolation._winding_number(T,field)
sympy.rootisolation.dup_count_complex_roots(f,K,inf=None,sup=None,exclude=None)
sympy.rootisolation.dup_count_real_roots(f,K,inf=None,sup=None)
sympy.rootisolation.dup_inner_isolate_negative_roots(f,K,inf=None,sup=None,eps=None,fast=False,mobius=False)
sympy.rootisolation.dup_inner_isolate_positive_roots(f,K,eps=None,inf=None,sup=None,fast=False,mobius=False)
sympy.rootisolation.dup_inner_isolate_real_roots(f,K,eps=None,fast=False)
sympy.rootisolation.dup_inner_refine_real_root(f,M,K,eps=None,steps=None,disjoint=None,fast=False,mobius=False)
sympy.rootisolation.dup_isolate_all_roots(f,K,eps=None,inf=None,sup=None,fast=False)
sympy.rootisolation.dup_isolate_all_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.rootisolation.dup_isolate_complex_roots_sqf(f,K,eps=None,inf=None,sup=None,blackbox=False)
sympy.rootisolation.dup_isolate_real_roots(f,K,eps=None,inf=None,sup=None,basis=False,fast=False)
sympy.rootisolation.dup_isolate_real_roots_list(polys,K,eps=None,inf=None,sup=None,strict=False,basis=False,fast=False)
sympy.rootisolation.dup_isolate_real_roots_sqf(f,K,eps=None,inf=None,sup=None,fast=False,blackbox=False)
sympy.rootisolation.dup_outer_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.rootisolation.dup_refine_real_root(f,s,t,K,eps=None,steps=None,disjoint=None,fast=False)
sympy.rootisolation.dup_root_lower_bound(f,K)
sympy.rootisolation.dup_root_upper_bound(f,K)
sympy.rootisolation.dup_step_refine_real_root(f,M,K,fast=False)
sympy.rootisolation.dup_sturm(f,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/dispersion.py----------------------------------------
A:sympy.polys.dispersion.p->Poly(p, *gens, **args)
A:sympy.polys.dispersion.q->Poly(q, *gens, **args)
A:sympy.polys.dispersion.fp->Poly(p, *gens, **args).factor_list()
A:sympy.polys.dispersion.J->dispersionset(p, q, *gens, **args)
A:sympy.polys.dispersion.m->s.degree()
A:sympy.polys.dispersion.n->t.degree()
A:sympy.polys.dispersion.an->s.LC()
A:sympy.polys.dispersion.bn->t.LC()
A:sympy.polys.dispersion.anm1->s.coeff_monomial(gen ** (m - 1))
A:sympy.polys.dispersion.bnm1->t.coeff_monomial(gen ** (n - 1))
A:sympy.polys.dispersion.j->max(J)
sympy.dispersion.dispersion(p,q=None,*gens,**args)
sympy.dispersion.dispersionset(p,q=None,*gens,**args)
sympy.polys.dispersion.dispersion(p,q=None,*gens,**args)
sympy.polys.dispersion.dispersionset(p,q=None,*gens,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/galoistools.py----------------------------------------
A:sympy.polys.galoistools.p->prod(M, start=K.one)
A:sympy.polys.galoistools.(s, _, _)->K.gcdex(e, m)
A:sympy.polys.galoistools.a->gf_int(f[n - k], p)
A:sympy.polys.galoistools.df->gf_degree(f)
A:sympy.polys.galoistools.dg->gf_degree(g)
A:sympy.polys.galoistools.k->int(_ceil(_sqrt(n // 2)))
A:sympy.polys.galoistools.jmin->max(0, i - df)
A:sympy.polys.galoistools.jmax->min(i, df)
A:sympy.polys.galoistools.f->gf_quo(f, g, p, K)
A:sympy.polys.galoistools.g->gf_gcd(f, h, p, K)
A:sympy.polys.galoistools.inv->K.invert(Q[k][i], p)
A:sympy.polys.galoistools.(q, r)->gf_div(f, g, p, K)
A:sympy.polys.galoistools.h->gf_pow_mod(H, (q - 1) // 2, f, p, K)
A:sympy.polys.galoistools.n->gf_degree(f)
A:sympy.polys.galoistools.mon->gf_lshift(b[i - 1], p, K)
A:sympy.polys.galoistools.b[i]->gf_rem(b[i], g, p, K)
A:sympy.polys.galoistools.b[1]->gf_pow_mod([K.one, K.zero], p, g, p, K)
A:sympy.polys.galoistools.m->gf_degree(g)
A:sympy.polys.galoistools.v->gf_compose_mod(v, v, f, p, K)
A:sympy.polys.galoistools.sf->gf_add(sf, v, p, K)
A:sympy.polys.galoistools.r->gf_random(N - 1, p, K)
A:sympy.polys.galoistools.res->gf_pow_mod(r, (p - 1) // 2, g, p, K)
A:sympy.polys.galoistools.(p0, r0)->gf_monic(f, p, K)
A:sympy.polys.galoistools.(p1, r1)->gf_monic(g, p, K)
A:sympy.polys.galoistools.(Q, R)->gf_div(r0, r1, p, K)
A:sympy.polys.galoistools.s->gf_sub_mul(s0, s1, Q, p, K)
A:sympy.polys.galoistools.t->gf_sub_mul(t0, t1, Q, p, K)
A:sympy.polys.galoistools.comp->gf_rem(comp, f, p, K)
A:sympy.polys.galoistools.u->gf_add(u, gf_compose_mod(u, v, f, p, K), p, K)
A:sympy.polys.galoistools.U->gf_add(U, gf_compose_mod(u, V, f, p, K), p, K)
A:sympy.polys.galoistools.V->gf_Qbasis(Q, p, K)
A:sympy.polys.galoistools.(_, f)->gf_monic(f, p, K)
A:sympy.polys.galoistools.Hh->gf_frobenius_map([K.one, K.zero], f, b, p, K)
A:sympy.polys.galoistools.b->gf_frobenius_monomial_base(f, p, K)
A:sympy.polys.galoistools.indices->set([n // d for d in factorint(n)])
A:sympy.polys.galoistools.method->query('GF_IRRED_METHOD')
A:sympy.polys.galoistools.irred->gf_irred_p_rabin(f, p, K)
A:sympy.polys.galoistools.(_, sqf)->gf_sqf_list(f, p, K)
A:sympy.polys.galoistools.(lc, f)->gf_monic(f, p, K)
A:sympy.polys.galoistools.F->gf_gcd(g, h, p, K)
A:sympy.polys.galoistools.G->gf_gcd(g, h, p, K)
A:sympy.polys.galoistools.H->_gf_trace_map(r, n, f, b, p, K)
A:sympy.polys.galoistools.Q[i // r]->list(qq)
A:sympy.polys.galoistools.Q->gf_Qmatrix(f, p, K)
A:sympy.polys.galoistools.V[i]->gf_compose_mod(V[i - 1], h, f, p, K)
A:sympy.polys.galoistools.U[i]->gf_frobenius_map(U[i - 1], f, b, p, K)
A:sympy.polys.galoistools.h1->gf_gcd(f, h, p, K)
A:sympy.polys.galoistools.h2->gf_gcd(f, gf_sub_ground(h, K.one, p, K), p, K)
A:sympy.polys.galoistools.h3->gf_quo(f, gf_mul(h1, h2, p, K), p, K)
A:sympy.polys.galoistools.factors->gf_zassenhaus(f, p, K)
A:sympy.polys.galoistools.(r, _, g)->gcdex(a, m)
A:sympy.polys.galoistools.f_f->gf_diff(f, p, ZZ)
A:sympy.polys.galoistools.alpha->gf_value(f_f, x)
A:sympy.polys.galoistools.S->list(zip(X1, [1] * len(X1)))
A:sympy.polys.galoistools.(x, s)->list(zip(X1, [1] * len(X1))).pop()
A:sympy.polys.galoistools.P->factorint(n)
A:sympy.polys.galoistools.pools->list(map(tuple, X))
sympy.galoistools._gf_pow_pnm1d2(f,n,g,b,p,K)
sympy.galoistools._gf_trace_map(f,n,g,b,p,K)
sympy.galoistools._raise_mod_power(x,s,p,f)
sympy.galoistools.csolve_prime(f,p,e=1)
sympy.galoistools.gf_LC(f,K)
sympy.galoistools.gf_Qbasis(Q,p,K)
sympy.galoistools.gf_Qmatrix(f,p,K)
sympy.galoistools.gf_TC(f,K)
sympy.galoistools.gf_add(f,g,p,K)
sympy.galoistools.gf_add_ground(f,a,p,K)
sympy.galoistools.gf_add_mul(f,g,h,p,K)
sympy.galoistools.gf_berlekamp(f,p,K)
sympy.galoistools.gf_cofactors(f,g,p,K)
sympy.galoistools.gf_compose(f,g,p,K)
sympy.galoistools.gf_compose_mod(g,h,f,p,K)
sympy.galoistools.gf_crt(U,M,K=None)
sympy.galoistools.gf_crt1(M,K)
sympy.galoistools.gf_crt2(U,M,p,E,S,K)
sympy.galoistools.gf_csolve(f,n)
sympy.galoistools.gf_ddf_shoup(f,p,K)
sympy.galoistools.gf_ddf_zassenhaus(f,p,K)
sympy.galoistools.gf_degree(f)
sympy.galoistools.gf_diff(f,p,K)
sympy.galoistools.gf_div(f,g,p,K)
sympy.galoistools.gf_edf_shoup(f,n,p,K)
sympy.galoistools.gf_edf_zassenhaus(f,n,p,K)
sympy.galoistools.gf_eval(f,a,p,K)
sympy.galoistools.gf_expand(F,p,K)
sympy.galoistools.gf_exquo(f,g,p,K)
sympy.galoistools.gf_factor(f,p,K)
sympy.galoistools.gf_factor_sqf(f,p,K,method=None)
sympy.galoistools.gf_frobenius_map(f,g,b,p,K)
sympy.galoistools.gf_frobenius_monomial_base(g,p,K)
sympy.galoistools.gf_from_dict(f,p,K)
sympy.galoistools.gf_from_int_poly(f,p)
sympy.galoistools.gf_gcd(f,g,p,K)
sympy.galoistools.gf_gcdex(f,g,p,K)
sympy.galoistools.gf_int(a,p)
sympy.galoistools.gf_irred_p_ben_or(f,p,K)
sympy.galoistools.gf_irred_p_rabin(f,p,K)
sympy.galoistools.gf_irreducible(n,p,K)
sympy.galoistools.gf_irreducible_p(f,p,K)
sympy.galoistools.gf_lcm(f,g,p,K)
sympy.galoistools.gf_lshift(f,n,K)
sympy.galoistools.gf_monic(f,p,K)
sympy.galoistools.gf_mul(f,g,p,K)
sympy.galoistools.gf_mul_ground(f,a,p,K)
sympy.galoistools.gf_multi_eval(f,A,p,K)
sympy.galoistools.gf_neg(f,p,K)
sympy.galoistools.gf_normal(f,p,K)
sympy.galoistools.gf_pow(f,n,p,K)
sympy.galoistools.gf_pow_mod(f,n,g,p,K)
sympy.galoistools.gf_quo(f,g,p,K)
sympy.galoistools.gf_quo_ground(f,a,p,K)
sympy.galoistools.gf_random(n,p,K)
sympy.galoistools.gf_rem(f,g,p,K)
sympy.galoistools.gf_rshift(f,n,K)
sympy.galoistools.gf_shoup(f,p,K)
sympy.galoistools.gf_sqf_list(f,p,K,all=False)
sympy.galoistools.gf_sqf_p(f,p,K)
sympy.galoistools.gf_sqf_part(f,p,K)
sympy.galoistools.gf_sqr(f,p,K)
sympy.galoistools.gf_strip(f)
sympy.galoistools.gf_sub(f,g,p,K)
sympy.galoistools.gf_sub_ground(f,a,p,K)
sympy.galoistools.gf_sub_mul(f,g,h,p,K)
sympy.galoistools.gf_to_dict(f,p,symmetric=True)
sympy.galoistools.gf_to_int_poly(f,p,symmetric=True)
sympy.galoistools.gf_trace_map(a,b,c,n,f,p,K)
sympy.galoistools.gf_trunc(f,p)
sympy.galoistools.gf_value(f,a)
sympy.galoistools.gf_zassenhaus(f,p,K)
sympy.galoistools.linear_congruence(a,b,m)
sympy.polys.galoistools._gf_pow_pnm1d2(f,n,g,b,p,K)
sympy.polys.galoistools._gf_trace_map(f,n,g,b,p,K)
sympy.polys.galoistools._raise_mod_power(x,s,p,f)
sympy.polys.galoistools.csolve_prime(f,p,e=1)
sympy.polys.galoistools.gf_LC(f,K)
sympy.polys.galoistools.gf_Qbasis(Q,p,K)
sympy.polys.galoistools.gf_Qmatrix(f,p,K)
sympy.polys.galoistools.gf_TC(f,K)
sympy.polys.galoistools.gf_add(f,g,p,K)
sympy.polys.galoistools.gf_add_ground(f,a,p,K)
sympy.polys.galoistools.gf_add_mul(f,g,h,p,K)
sympy.polys.galoistools.gf_berlekamp(f,p,K)
sympy.polys.galoistools.gf_cofactors(f,g,p,K)
sympy.polys.galoistools.gf_compose(f,g,p,K)
sympy.polys.galoistools.gf_compose_mod(g,h,f,p,K)
sympy.polys.galoistools.gf_crt(U,M,K=None)
sympy.polys.galoistools.gf_crt1(M,K)
sympy.polys.galoistools.gf_crt2(U,M,p,E,S,K)
sympy.polys.galoistools.gf_csolve(f,n)
sympy.polys.galoistools.gf_ddf_shoup(f,p,K)
sympy.polys.galoistools.gf_ddf_zassenhaus(f,p,K)
sympy.polys.galoistools.gf_degree(f)
sympy.polys.galoistools.gf_diff(f,p,K)
sympy.polys.galoistools.gf_div(f,g,p,K)
sympy.polys.galoistools.gf_edf_shoup(f,n,p,K)
sympy.polys.galoistools.gf_edf_zassenhaus(f,n,p,K)
sympy.polys.galoistools.gf_eval(f,a,p,K)
sympy.polys.galoistools.gf_expand(F,p,K)
sympy.polys.galoistools.gf_exquo(f,g,p,K)
sympy.polys.galoistools.gf_factor(f,p,K)
sympy.polys.galoistools.gf_factor_sqf(f,p,K,method=None)
sympy.polys.galoistools.gf_frobenius_map(f,g,b,p,K)
sympy.polys.galoistools.gf_frobenius_monomial_base(g,p,K)
sympy.polys.galoistools.gf_from_dict(f,p,K)
sympy.polys.galoistools.gf_from_int_poly(f,p)
sympy.polys.galoistools.gf_gcd(f,g,p,K)
sympy.polys.galoistools.gf_gcdex(f,g,p,K)
sympy.polys.galoistools.gf_int(a,p)
sympy.polys.galoistools.gf_irred_p_ben_or(f,p,K)
sympy.polys.galoistools.gf_irred_p_rabin(f,p,K)
sympy.polys.galoistools.gf_irreducible(n,p,K)
sympy.polys.galoistools.gf_irreducible_p(f,p,K)
sympy.polys.galoistools.gf_lcm(f,g,p,K)
sympy.polys.galoistools.gf_lshift(f,n,K)
sympy.polys.galoistools.gf_monic(f,p,K)
sympy.polys.galoistools.gf_mul(f,g,p,K)
sympy.polys.galoistools.gf_mul_ground(f,a,p,K)
sympy.polys.galoistools.gf_multi_eval(f,A,p,K)
sympy.polys.galoistools.gf_neg(f,p,K)
sympy.polys.galoistools.gf_normal(f,p,K)
sympy.polys.galoistools.gf_pow(f,n,p,K)
sympy.polys.galoistools.gf_pow_mod(f,n,g,p,K)
sympy.polys.galoistools.gf_quo(f,g,p,K)
sympy.polys.galoistools.gf_quo_ground(f,a,p,K)
sympy.polys.galoistools.gf_random(n,p,K)
sympy.polys.galoistools.gf_rem(f,g,p,K)
sympy.polys.galoistools.gf_rshift(f,n,K)
sympy.polys.galoistools.gf_shoup(f,p,K)
sympy.polys.galoistools.gf_sqf_list(f,p,K,all=False)
sympy.polys.galoistools.gf_sqf_p(f,p,K)
sympy.polys.galoistools.gf_sqf_part(f,p,K)
sympy.polys.galoistools.gf_sqr(f,p,K)
sympy.polys.galoistools.gf_strip(f)
sympy.polys.galoistools.gf_sub(f,g,p,K)
sympy.polys.galoistools.gf_sub_ground(f,a,p,K)
sympy.polys.galoistools.gf_sub_mul(f,g,h,p,K)
sympy.polys.galoistools.gf_to_dict(f,p,symmetric=True)
sympy.polys.galoistools.gf_to_int_poly(f,p,symmetric=True)
sympy.polys.galoistools.gf_trace_map(a,b,c,n,f,p,K)
sympy.polys.galoistools.gf_trunc(f,p)
sympy.polys.galoistools.gf_value(f,a)
sympy.polys.galoistools.gf_zassenhaus(f,p,K)
sympy.polys.galoistools.linear_congruence(a,b,m)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/solvers.py----------------------------------------
A:sympy.polys.solvers._sympify->staticmethod(lambda x: x)
A:sympy.polys.solvers.M->zeros(len(eqs), len(xs) + 1, cls=RawMatrix)
A:sympy.polys.solvers.M[j, i]->e_j.coeff(x_i)
A:sympy.polys.solvers.matrix->eqs_to_matrix(eqs, ring)
A:sympy.polys.solvers.(echelon, pivots)->eqs_to_matrix(eqs, ring).rref(iszerofunc=lambda x: not x, simplify=lambda x: x)
A:sympy.polys.solvers.vect->RawMatrix([[-x] for x in xs[p + 1:]] + [[ring.one]])
sympy.polys.RawMatrix(Matrix)
sympy.polys.eqs_to_matrix(eqs,ring)
sympy.polys.solve_lin_sys(eqs,ring)
sympy.polys.solvers.RawMatrix(Matrix)
sympy.polys.solvers.eqs_to_matrix(eqs,ring)
sympy.polys.solvers.solve_lin_sys(eqs,ring)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyoptions.py----------------------------------------
A:sympy.polys.polyoptions.args->dict(args)
A:sympy.polys.polyoptions.defaults->dict(args).pop('defaults', {})
A:sympy.polys.polyoptions.self[option]->cls.preprocess(value)
A:sympy.polys.polyoptions.cls.__order__->topological_sort((vertices, list(edges)))
A:sympy.polys.polyoptions.obj->dict.__new__(self.__class__)
A:sympy.polys.polyoptions.options[option]->getattr(self, option)
A:sympy.polys.polyoptions.flags[option]->getattr(self, option)
A:sympy.polys.polyoptions._re_split->re.compile('\\s*,\\s*|\\s+')
A:sympy.polys.polyoptions.wrt->wrt.strip().strip()
A:sympy.polys.polyoptions._re_realfield->re.compile('^(R|RR)(_(\\d+))?$')
A:sympy.polys.polyoptions._re_complexfield->re.compile('^(C|CC)(_(\\d+))?$')
A:sympy.polys.polyoptions._re_finitefield->re.compile('^(FF|GF)\\((\\d+)\\)$')
A:sympy.polys.polyoptions._re_polynomial->re.compile('^(Z|ZZ|Q|QQ)\\[(.+)\\]$')
A:sympy.polys.polyoptions._re_fraction->re.compile('^(Z|ZZ|Q|QQ)\\((.+)\\)$')
A:sympy.polys.polyoptions._re_algebraic->re.compile('^(Q|QQ)\\<(.+)\\>$')
A:sympy.polys.polyoptions.r->cls._re_algebraic.match(domain)
A:sympy.polys.polyoptions.(_, _, prec)->cls._re_algebraic.match(domain).groups()
A:sympy.polys.polyoptions.(ground, gens)->cls._re_algebraic.match(domain).groups()
A:sympy.polys.polyoptions.gens->list(map(sympify, r.groups()[1].split(',')))
A:sympy.polys.polyoptions.options['extension']->set([S.ImaginaryUnit])
A:sympy.polys.polyoptions.extension->set(extension)
A:sympy.polys.polyoptions.options['domain']->sympy.polys.domains.FF(modulus, symmetric)
A:sympy.polys.polyoptions.modulus->sympify(modulus)
A:sympy.polys.polyoptions.symmetric->dict(options).get('symmetric', True)
A:sympy.polys.polyoptions.flags->set(flags)
A:sympy.polys.polyoptions.options->dict(options)
sympy.All(with_metaclass(OptionType,BooleanOption,Flag))
sympy.All.default(cls)
sympy.Auto(with_metaclass(OptionType,BooleanOption,Flag))
sympy.Auto.default(cls)
sympy.Auto.postprocess(cls,options)
sympy.BooleanOption(Option)
sympy.BooleanOption.preprocess(cls,value)
sympy.Composite(with_metaclass(OptionType,BooleanOption))
sympy.Composite.default(cls)
sympy.Domain(with_metaclass(OptionType,Option))
sympy.Domain.postprocess(cls,options)
sympy.Domain.preprocess(cls,domain)
sympy.Expand(with_metaclass(OptionType,BooleanOption))
sympy.Expand.default(cls)
sympy.Extension(with_metaclass(OptionType,Option))
sympy.Extension.postprocess(cls,options)
sympy.Extension.preprocess(cls,extension)
sympy.Field(with_metaclass(OptionType,BooleanOption))
sympy.Flag(Option)
sympy.Formal(with_metaclass(OptionType,BooleanOption,Flag))
sympy.Formal.default(cls)
sympy.Frac(with_metaclass(OptionType,BooleanOption,Flag))
sympy.Frac.default(cls)
sympy.Gaussian(with_metaclass(OptionType,BooleanOption))
sympy.Gaussian.postprocess(cls,options)
sympy.Gen(with_metaclass(OptionType,Flag))
sympy.Gen.default(cls)
sympy.Gen.preprocess(cls,gen)
sympy.Gens(with_metaclass(OptionType,Option))
sympy.Gens.default(cls)
sympy.Gens.preprocess(cls,gens)
sympy.Greedy(with_metaclass(OptionType,BooleanOption))
sympy.Include(with_metaclass(OptionType,BooleanOption,Flag))
sympy.Include.default(cls)
sympy.Method(with_metaclass(OptionType,Flag))
sympy.Method.preprocess(cls,method)
sympy.Modulus(with_metaclass(OptionType,Option))
sympy.Modulus.postprocess(cls,options)
sympy.Modulus.preprocess(cls,modulus)
sympy.Option(object)
sympy.Option.default(cls)
sympy.Option.postprocess(cls,options)
sympy.Option.preprocess(cls,option)
sympy.OptionType(cls,*args,**kwargs)
sympy.Options(self,gens,args,flags=None,strict=False)
sympy.Options.__setattr__(self,attr,value)
sympy.Options._init_dependencies_order(cls)
sympy.Options.args(self)
sympy.Options.clone(self,updates={})
sympy.Options.flags(self)
sympy.Options.options(self)
sympy.Order(with_metaclass(OptionType,Option))
sympy.Order.default(cls)
sympy.Order.preprocess(cls,order)
sympy.Polys(with_metaclass(OptionType,BooleanOption,Flag))
sympy.Sort(with_metaclass(OptionType,Option))
sympy.Sort.default(cls)
sympy.Sort.preprocess(cls,sort)
sympy.Split(with_metaclass(OptionType,BooleanOption))
sympy.Split.postprocess(cls,options)
sympy.Strict(with_metaclass(OptionType,BooleanOption))
sympy.Strict.default(cls)
sympy.Symbols(with_metaclass(OptionType,Flag))
sympy.Symbols.default(cls)
sympy.Symbols.preprocess(cls,symbols)
sympy.Symmetric(with_metaclass(OptionType,BooleanOption))
sympy.Wrt(with_metaclass(OptionType,Option))
sympy.Wrt.preprocess(cls,wrt)
sympy.allowed_flags(args,flags)
sympy.build_options(gens,args=None)
sympy.polys.polyoptions.All(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.All.default(cls)
sympy.polys.polyoptions.Auto(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.Auto.default(cls)
sympy.polys.polyoptions.Auto.postprocess(cls,options)
sympy.polys.polyoptions.BooleanOption(Option)
sympy.polys.polyoptions.BooleanOption.preprocess(cls,value)
sympy.polys.polyoptions.Composite(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Composite.default(cls)
sympy.polys.polyoptions.Domain(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Domain.postprocess(cls,options)
sympy.polys.polyoptions.Domain.preprocess(cls,domain)
sympy.polys.polyoptions.Expand(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Expand.default(cls)
sympy.polys.polyoptions.Extension(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Extension.postprocess(cls,options)
sympy.polys.polyoptions.Extension.preprocess(cls,extension)
sympy.polys.polyoptions.Field(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Flag(Option)
sympy.polys.polyoptions.Formal(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.Formal.default(cls)
sympy.polys.polyoptions.Frac(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.Frac.default(cls)
sympy.polys.polyoptions.Gaussian(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Gaussian.postprocess(cls,options)
sympy.polys.polyoptions.Gen(with_metaclass(OptionType,Flag))
sympy.polys.polyoptions.Gen.default(cls)
sympy.polys.polyoptions.Gen.preprocess(cls,gen)
sympy.polys.polyoptions.Gens(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Gens.default(cls)
sympy.polys.polyoptions.Gens.preprocess(cls,gens)
sympy.polys.polyoptions.Greedy(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Include(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.Include.default(cls)
sympy.polys.polyoptions.Method(with_metaclass(OptionType,Flag))
sympy.polys.polyoptions.Method.preprocess(cls,method)
sympy.polys.polyoptions.Modulus(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Modulus.postprocess(cls,options)
sympy.polys.polyoptions.Modulus.preprocess(cls,modulus)
sympy.polys.polyoptions.Option(object)
sympy.polys.polyoptions.Option.default(cls)
sympy.polys.polyoptions.Option.postprocess(cls,options)
sympy.polys.polyoptions.Option.preprocess(cls,option)
sympy.polys.polyoptions.OptionType(cls,*args,**kwargs)
sympy.polys.polyoptions.OptionType.__init__(cls,*args,**kwargs)
sympy.polys.polyoptions.Options(self,gens,args,flags=None,strict=False)
sympy.polys.polyoptions.Options.__init__(self,gens,args,flags=None,strict=False)
sympy.polys.polyoptions.Options.__setattr__(self,attr,value)
sympy.polys.polyoptions.Options._init_dependencies_order(cls)
sympy.polys.polyoptions.Options.args(self)
sympy.polys.polyoptions.Options.clone(self,updates={})
sympy.polys.polyoptions.Options.flags(self)
sympy.polys.polyoptions.Options.options(self)
sympy.polys.polyoptions.Order(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Order.default(cls)
sympy.polys.polyoptions.Order.preprocess(cls,order)
sympy.polys.polyoptions.Polys(with_metaclass(OptionType,BooleanOption,Flag))
sympy.polys.polyoptions.Sort(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Sort.default(cls)
sympy.polys.polyoptions.Sort.preprocess(cls,sort)
sympy.polys.polyoptions.Split(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Split.postprocess(cls,options)
sympy.polys.polyoptions.Strict(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Strict.default(cls)
sympy.polys.polyoptions.Symbols(with_metaclass(OptionType,Flag))
sympy.polys.polyoptions.Symbols.default(cls)
sympy.polys.polyoptions.Symbols.preprocess(cls,symbols)
sympy.polys.polyoptions.Symmetric(with_metaclass(OptionType,BooleanOption))
sympy.polys.polyoptions.Wrt(with_metaclass(OptionType,Option))
sympy.polys.polyoptions.Wrt.preprocess(cls,wrt)
sympy.polys.polyoptions.allowed_flags(args,flags)
sympy.polys.polyoptions.build_options(gens,args=None)
sympy.polys.polyoptions.set_defaults(options,**defaults)
sympy.set_defaults(options,**defaults)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/orderings.py----------------------------------------
A:sympy.polys.orderings.lex->LexOrder()
A:sympy.polys.orderings.grlex->GradedLexOrder()
A:sympy.polys.orderings.grevlex->ReversedGradedLexOrder()
A:sympy.polys.orderings.ilex->InverseOrder(lex)
A:sympy.polys.orderings.igrlex->InverseOrder(grlex)
A:sympy.polys.orderings.igrevlex->InverseOrder(grevlex)
A:sympy.polys.orderings.order->str(order)
A:sympy.polys.orderings.self.seq->tuple(seq)
sympy.ordeGradedLexOrder(self,monomial)
sympy.ordeInverseOrder(self,O)
sympy.ordeInverseOrder.__eq__(self,other)
sympy.ordeInverseOrder.__hash__(self)
sympy.ordeInverseOrder.__str__(self)
sympy.ordeInverseOrder.is_global(self)
sympy.ordeLexOrder(self,monomial)
sympy.ordeMonomialOrder(self,monomial)
sympy.ordeMonomialOrder.__eq__(self,other)
sympy.ordeMonomialOrder.__hash__(self)
sympy.ordeMonomialOrder.__ne__(self,other)
sympy.ordeMonomialOrder.__repr__(self)
sympy.ordeMonomialOrder.__str__(self)
sympy.ordeProductOrder(self,*args)
sympy.ordeProductOrder.__eq__(self,other)
sympy.ordeProductOrder.__hash__(self)
sympy.ordeProductOrder.__repr__(self)
sympy.ordeProductOrder.__str__(self)
sympy.ordeProductOrder.is_global(self)
sympy.ordeReversedGradedLexOrder(self,monomial)
sympy.orde_ItemGetter(self,seq)
sympy.orde_ItemGetter.__eq__(self,other)
sympy.ordebuild_product_order(arg,gens)
sympy.ordemonomial_key(order=None,gens=None)
sympy.polys.orderings.GradedLexOrder(self,monomial)
sympy.polys.orderings.GradedLexOrder.__call__(self,monomial)
sympy.polys.orderings.InverseOrder(self,O)
sympy.polys.orderings.InverseOrder.__eq__(self,other)
sympy.polys.orderings.InverseOrder.__hash__(self)
sympy.polys.orderings.InverseOrder.__init__(self,O)
sympy.polys.orderings.InverseOrder.__str__(self)
sympy.polys.orderings.InverseOrder.is_global(self)
sympy.polys.orderings.LexOrder(self,monomial)
sympy.polys.orderings.LexOrder.__call__(self,monomial)
sympy.polys.orderings.MonomialOrder(self,monomial)
sympy.polys.orderings.MonomialOrder.__call__(self,monomial)
sympy.polys.orderings.MonomialOrder.__eq__(self,other)
sympy.polys.orderings.MonomialOrder.__hash__(self)
sympy.polys.orderings.MonomialOrder.__ne__(self,other)
sympy.polys.orderings.MonomialOrder.__repr__(self)
sympy.polys.orderings.MonomialOrder.__str__(self)
sympy.polys.orderings.ProductOrder(self,*args)
sympy.polys.orderings.ProductOrder.__eq__(self,other)
sympy.polys.orderings.ProductOrder.__hash__(self)
sympy.polys.orderings.ProductOrder.__init__(self,*args)
sympy.polys.orderings.ProductOrder.__repr__(self)
sympy.polys.orderings.ProductOrder.__str__(self)
sympy.polys.orderings.ProductOrder.is_global(self)
sympy.polys.orderings.ReversedGradedLexOrder(self,monomial)
sympy.polys.orderings.ReversedGradedLexOrder.__call__(self,monomial)
sympy.polys.orderings._ItemGetter(self,seq)
sympy.polys.orderings._ItemGetter.__eq__(self,other)
sympy.polys.orderings._ItemGetter.__init__(self,seq)
sympy.polys.orderings.build_product_order(arg,gens)
sympy.polys.orderings.monomial_key(order=None,gens=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyconfig.py----------------------------------------
A:sympy.polys.polyconfig.key->key.upper().upper()
A:sympy.polys.polyconfig.value->getenv('SYMPY_' + key)
A:sympy.polys.polyconfig._current_config[key]->eval(value)
sympy.polyconfig.configure()
sympy.polyconfig.query(key)
sympy.polyconfig.setup(key,value=None)
sympy.polyconfig.using(**kwargs)
sympy.polys.polyconfig.configure()
sympy.polys.polyconfig.query(key)
sympy.polys.polyconfig.setup(key,value=None)
sympy.polys.polyconfig.using(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/groebnertools.py----------------------------------------
A:sympy.polys.groebnertools.method->query('groebner')
A:sympy.polys.groebnertools.G->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms)
A:sympy.polys.groebnertools.pr->min(P, key=lambda pair: order(monomial_lcm(f[pair[0]].LM, f[pair[1]].LM)))
A:sympy.polys.groebnertools.h->ring.from_terms(h_terms)
A:sympy.polys.groebnertools.I[h]->len(f)
A:sympy.polys.groebnertools.C->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms).copy()
A:sympy.polys.groebnertools.D->set()
A:sympy.polys.groebnertools.ig->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(g_terms).pop()
A:sympy.polys.groebnertools.LCMhg->monomial_lcm(mh, mg)
A:sympy.polys.groebnertools.m->monomial_lcm(mh, f[ip].LM)
A:sympy.polys.groebnertools.E->set()
A:sympy.polys.groebnertools.(ih, ig)->set().pop()
A:sympy.polys.groebnertools.B_new->set()
A:sympy.polys.groebnertools.(ig1, ig2)->select(CP)
A:sympy.polys.groebnertools.LCM12->ring.monomial_lcm(LM1, LM2)
A:sympy.polys.groebnertools.G_new->set()
A:sympy.polys.groebnertools.r->lbp(Sign(p), Polyn(p).monic(), k + 1).rem(F[:i])
A:sympy.polys.groebnertools.F->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(f_terms)
A:sympy.polys.groebnertools.CP->set()
A:sympy.polys.groebnertools.(G, CP)->update(G, CP, ht[1])
A:sympy.polys.groebnertools.G1->sorted(G, key=lambda g: order(f[g].LM))
A:sympy.polys.groebnertools.ht->normal(f[ig], G - set([ig]))
A:sympy.polys.groebnertools.Gr->sorted(Gr, key=lambda f: order(f.LM), reverse=True)
A:sympy.polys.groebnertools.m1->ring.monomial_div(LCM12, LM1)
A:sympy.polys.groebnertools.m2->ring.monomial_div(LCM12, LM2)
A:sympy.polys.groebnertools.s1->p1.mul_monom(m1)
A:sympy.polys.groebnertools.s2->p2.mul_monom(m2)
A:sympy.polys.groebnertools.um->term_div(lt, ltf, domain)
A:sympy.polys.groebnertools.vm->term_div(lt, ltg, domain)
A:sympy.polys.groebnertools.fr->lbp_mul_term(lbp(Sign(f), Polyn(f).leading_term(), Num(f)), um)
A:sympy.polys.groebnertools.gr->lbp_mul_term(lbp(Sign(g), Polyn(g).leading_term(), Num(g)), vm)
A:sympy.polys.groebnertools.c0->lbp(c[0], zero, Num(c[2]))
A:sympy.polys.groebnertools.d0->lbp(d[0], zero, Num(d[2]))
A:sympy.polys.groebnertools.c1->lbp(c[3], zero, Num(c[5]))
A:sympy.polys.groebnertools.d1->lbp(d[3], zero, Num(d[5]))
A:sympy.polys.groebnertools.t->Dummy('t')
A:sympy.polys.groebnertools.hp->lbp_mul_term(h, t)
A:sympy.polys.groebnertools.f->lbp_sub(f, hp)
A:sympy.polys.groebnertools.k->len(B)
A:sympy.polys.groebnertools.cp->critical_pair(p, g, ring)
A:sympy.polys.groebnertools.s->s.rem(G).rem(G)
A:sympy.polys.groebnertools.p->lbp(Sign(p), Polyn(p).monic(), k + 1)
A:sympy.polys.groebnertools.H->(f * g).quo([groebner_lcm(f, g)])
A:sympy.polys.groebnertools.f0->ring.clone(symbols=(t,) + ring.symbols, order=lex).from_terms(f_terms).pop()
A:sympy.polys.groebnertools.monom->monomial_lcm(f.LM, g.LM)
A:sympy.polys.groebnertools.coeff->domain.lcm(f.LC, g.LC)
A:sympy.polys.groebnertools.(fc, f)->lbp_sub(f, hp).primitive()
A:sympy.polys.groebnertools.(gc, g)->g.primitive()
A:sympy.polys.groebnertools.lcm->domain.lcm(fc, gc)
A:sympy.polys.groebnertools.t_ring->ring.clone(symbols=(t,) + ring.symbols, order=lex)
A:sympy.polys.groebnertools.basis->groebner([F, G], t_ring)
A:sympy.polys.groebnertools.gcd->domain.gcd(fc, gc)
sympy.groebnertools.Num(f)
sympy.groebnertools.Polyn(f)
sympy.groebnertools.Sign(f)
sympy.groebnertools._buchberger(f,ring)
sympy.groebnertools._f5b(F,ring)
sympy.groebnertools.cp_cmp(c,d)
sympy.groebnertools.cp_key(c,ring)
sympy.groebnertools.critical_pair(f,g,ring)
sympy.groebnertools.f5_reduce(f,B)
sympy.groebnertools.groebner(seq,ring,method=None)
sympy.groebnertools.groebner_gcd(f,g)
sympy.groebnertools.groebner_lcm(f,g)
sympy.groebnertools.is_groebner(G,ring)
sympy.groebnertools.is_minimal(G,ring)
sympy.groebnertools.is_reduced(G,ring)
sympy.groebnertools.is_rewritable_or_comparable(sign,num,B)
sympy.groebnertools.lbp(signature,polynomial,number)
sympy.groebnertools.lbp_cmp(f,g)
sympy.groebnertools.lbp_key(f)
sympy.groebnertools.lbp_mul_term(f,cx)
sympy.groebnertools.lbp_sub(f,g)
sympy.groebnertools.red_groebner(G,ring)
sympy.groebnertools.s_poly(cp)
sympy.groebnertools.sig(monomial,index)
sympy.groebnertools.sig_cmp(u,v,order)
sympy.groebnertools.sig_key(s,order)
sympy.groebnertools.sig_mult(s,m)
sympy.groebnertools.spoly(p1,p2,ring)
sympy.polys.groebnertools.Num(f)
sympy.polys.groebnertools.Polyn(f)
sympy.polys.groebnertools.Sign(f)
sympy.polys.groebnertools._buchberger(f,ring)
sympy.polys.groebnertools._f5b(F,ring)
sympy.polys.groebnertools.cp_cmp(c,d)
sympy.polys.groebnertools.cp_key(c,ring)
sympy.polys.groebnertools.critical_pair(f,g,ring)
sympy.polys.groebnertools.f5_reduce(f,B)
sympy.polys.groebnertools.groebner(seq,ring,method=None)
sympy.polys.groebnertools.groebner_gcd(f,g)
sympy.polys.groebnertools.groebner_lcm(f,g)
sympy.polys.groebnertools.is_groebner(G,ring)
sympy.polys.groebnertools.is_minimal(G,ring)
sympy.polys.groebnertools.is_reduced(G,ring)
sympy.polys.groebnertools.is_rewritable_or_comparable(sign,num,B)
sympy.polys.groebnertools.lbp(signature,polynomial,number)
sympy.polys.groebnertools.lbp_cmp(f,g)
sympy.polys.groebnertools.lbp_key(f)
sympy.polys.groebnertools.lbp_mul_term(f,cx)
sympy.polys.groebnertools.lbp_sub(f,g)
sympy.polys.groebnertools.red_groebner(G,ring)
sympy.polys.groebnertools.s_poly(cp)
sympy.polys.groebnertools.sig(monomial,index)
sympy.polys.groebnertools.sig_cmp(u,v,order)
sympy.polys.groebnertools.sig_key(s,order)
sympy.polys.groebnertools.sig_mult(s,m)
sympy.polys.groebnertools.spoly(p1,p2,ring)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyerrors.py----------------------------------------
sympy.BasePolynomialError(Exception)
sympy.BasePolynomialError.new(self,*args)
sympy.CoercionFailed(BasePolynomialError)
sympy.ComputationFailed(self,func,nargs,exc)
sympy.ComputationFailed.__str__(self)
sympy.DomainError(BasePolynomialError)
sympy.EvaluationFailed(BasePolynomialError)
sympy.ExactQuotientFailed(self,f,g,dom=None)
sympy.ExactQuotientFailed.__str__(self)
sympy.ExactQuotientFailed.new(self,f,g)
sympy.ExtraneousFactors(BasePolynomialError)
sympy.FlagError(OptionError)
sympy.GeneratorsError(BasePolynomialError)
sympy.GeneratorsNeeded(GeneratorsError)
sympy.HeuristicGCDFailed(BasePolynomialError)
sympy.HomomorphismFailed(BasePolynomialError)
sympy.IsomorphismFailed(BasePolynomialError)
sympy.ModularGCDFailed(BasePolynomialError)
sympy.MultivariatePolynomialError(PolynomialError)
sympy.NotAlgebraic(BasePolynomialError)
sympy.NotInvertible(BasePolynomialError)
sympy.NotReversible(BasePolynomialError)
sympy.OperationNotSupported(self,poly,func)
sympy.OperationNotSupported.__str__(self)
sympy.OptionError(BasePolynomialError)
sympy.PolificationFailed(self,opt,origs,exprs,seq=False)
sympy.PolificationFailed.__str__(self)
sympy.PolynomialDivisionFailed(self,f,g,domain)
sympy.PolynomialDivisionFailed.__str__(self)
sympy.PolynomialError(BasePolynomialError)
sympy.RefinementFailed(BasePolynomialError)
sympy.UnificationFailed(BasePolynomialError)
sympy.UnivariatePolynomialError(PolynomialError)
sympy.polys.polyerrors.BasePolynomialError(Exception)
sympy.polys.polyerrors.BasePolynomialError.new(self,*args)
sympy.polys.polyerrors.CoercionFailed(BasePolynomialError)
sympy.polys.polyerrors.ComputationFailed(self,func,nargs,exc)
sympy.polys.polyerrors.ComputationFailed.__init__(self,func,nargs,exc)
sympy.polys.polyerrors.ComputationFailed.__str__(self)
sympy.polys.polyerrors.DomainError(BasePolynomialError)
sympy.polys.polyerrors.EvaluationFailed(BasePolynomialError)
sympy.polys.polyerrors.ExactQuotientFailed(self,f,g,dom=None)
sympy.polys.polyerrors.ExactQuotientFailed.__init__(self,f,g,dom=None)
sympy.polys.polyerrors.ExactQuotientFailed.__str__(self)
sympy.polys.polyerrors.ExactQuotientFailed.new(self,f,g)
sympy.polys.polyerrors.ExtraneousFactors(BasePolynomialError)
sympy.polys.polyerrors.FlagError(OptionError)
sympy.polys.polyerrors.GeneratorsError(BasePolynomialError)
sympy.polys.polyerrors.GeneratorsNeeded(GeneratorsError)
sympy.polys.polyerrors.HeuristicGCDFailed(BasePolynomialError)
sympy.polys.polyerrors.HomomorphismFailed(BasePolynomialError)
sympy.polys.polyerrors.IsomorphismFailed(BasePolynomialError)
sympy.polys.polyerrors.ModularGCDFailed(BasePolynomialError)
sympy.polys.polyerrors.MultivariatePolynomialError(PolynomialError)
sympy.polys.polyerrors.NotAlgebraic(BasePolynomialError)
sympy.polys.polyerrors.NotInvertible(BasePolynomialError)
sympy.polys.polyerrors.NotReversible(BasePolynomialError)
sympy.polys.polyerrors.OperationNotSupported(self,poly,func)
sympy.polys.polyerrors.OperationNotSupported.__init__(self,poly,func)
sympy.polys.polyerrors.OperationNotSupported.__str__(self)
sympy.polys.polyerrors.OptionError(BasePolynomialError)
sympy.polys.polyerrors.PolificationFailed(self,opt,origs,exprs,seq=False)
sympy.polys.polyerrors.PolificationFailed.__init__(self,opt,origs,exprs,seq=False)
sympy.polys.polyerrors.PolificationFailed.__str__(self)
sympy.polys.polyerrors.PolynomialDivisionFailed(self,f,g,domain)
sympy.polys.polyerrors.PolynomialDivisionFailed.__init__(self,f,g,domain)
sympy.polys.polyerrors.PolynomialDivisionFailed.__str__(self)
sympy.polys.polyerrors.PolynomialError(BasePolynomialError)
sympy.polys.polyerrors.RefinementFailed(BasePolynomialError)
sympy.polys.polyerrors.UnificationFailed(BasePolynomialError)
sympy.polys.polyerrors.UnivariatePolynomialError(PolynomialError)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/fglmtools.py----------------------------------------
A:sympy.polys.fglmtools.ring_to->ring.clone(order=O_to)
A:sympy.polys.fglmtools.old_basis->_basis(F, ring)
A:sympy.polys.fglmtools.M->_representing_matrices(old_basis, F, ring)
A:sympy.polys.fglmtools.t->candidates.pop()
A:sympy.polys.fglmtools.P->_update(s, _lambda, P)
A:sympy.polys.fglmtools.s->len(S)
A:sympy.polys.fglmtools.v->_matrix_mul(M[t[0]], V[t[1]])
A:sympy.polys.fglmtools._lambda->_matrix_mul(P, v)
A:sympy.polys.fglmtools.lt->ring.term_new(_incr_k(S[t[1]], t[0]), domain.one)
A:sympy.polys.fglmtools.rest->ring.from_dict(dict([(S[i], _lambda[i]) for i in xrange(s)]))
A:sympy.polys.fglmtools.g->(lt - rest).set_ring(ring_to)
A:sympy.polys.fglmtools.L->list(set(L))
A:sympy.polys.fglmtools.k->min([j for j in xrange(s, len(_lambda)) if _lambda[j] != 0])
A:sympy.polys.fglmtools.r->ring.term_new(monomial_mul(m, v), domain.one).rem(G)
A:sympy.polys.fglmtools.j->list(set(basis)).index(monom)
A:sympy.polys.fglmtools.basis->list(set(basis))
sympy.fglmtools._basis(G,ring)
sympy.fglmtools._identity_matrix(n,domain)
sympy.fglmtools._incr_k(m,k)
sympy.fglmtools._matrix_mul(M,v)
sympy.fglmtools._representing_matrices(basis,G,ring)
sympy.fglmtools._update(s,_lambda,P)
sympy.fglmtools.matrix_fglm(F,ring,O_to)
sympy.polys.fglmtools._basis(G,ring)
sympy.polys.fglmtools._identity_matrix(n,domain)
sympy.polys.fglmtools._incr_k(m,k)
sympy.polys.fglmtools._matrix_mul(M,v)
sympy.polys.fglmtools._representing_matrices(basis,G,ring)
sympy.polys.fglmtools._update(s,_lambda,P)
sympy.polys.fglmtools.matrix_fglm(F,ring,O_to)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/factortools.py----------------------------------------
A:sympy.polys.factortools.(q, r)->dup_div(dup_mul(s, e, K), h, K)
A:sympy.polys.factortools.a->dmp_max_norm(f, u, K)
A:sympy.polys.factortools.b->dmp_zz_mignotte_bound(f, u, K)
A:sympy.polys.factortools.n->len(A)
A:sympy.polys.factortools.e->dmp_expand(F, u, K)
A:sympy.polys.factortools.q->abs(q)
A:sympy.polys.factortools.r->len(H)
A:sympy.polys.factortools.u->dup_add(dup_mul(t, b, K), dup_mul(c, G, K), K)
A:sympy.polys.factortools.G->dup_sqf_part(F, K)
A:sympy.polys.factortools.H->dmp_raise([K.one, s * K.unit], u, 0, K)
A:sympy.polys.factortools.(c, d)->dup_div(dup_mul(s, b, K), H, K)
A:sympy.polys.factortools.c->dmp_ground_trunc(h, p, w, K)
A:sympy.polys.factortools.d->max(dmp_degree_list(f, u)[1:])
A:sympy.polys.factortools.S->dmp_zz_diophantine(G, C, A, d, p, v, K)
A:sympy.polys.factortools.T->dmp_zz_diophantine(G, C, I, d, p, w - 1, K)
A:sympy.polys.factortools.lc->dmp_ground_LC(f, u, K)
A:sympy.polys.factortools.F->_dup_cyclotomic_decompose(n, K)
A:sympy.polys.factortools.g->dmp_mul_ground(factors[0][0], coeff, u, K)
A:sympy.polys.factortools.h->dmp_compose(h, H, u, K)
A:sympy.polys.factortools.(s, t, _)->gf_gcdex(g, h, p, K)
A:sympy.polys.factortools.s->dmp_eval_in(S[0], a, n - i, u - i, K)
A:sympy.polys.factortools.t->dup_mul_ground(t, coeff, K)
A:sympy.polys.factortools.A->dup_max_norm(f, K)
A:sympy.polys.factortools.B->int(abs(K.sqrt(K(n + 1)) * 2 ** n * A * b))
A:sympy.polys.factortools.C->dmp_quo_ground(C, K.factorial(k + 1), w - 1, K)
A:sympy.polys.factortools.gamma->int(_ceil(2 * _log(C, 2)))
A:sympy.polys.factortools.bound->int(2 * gamma * _log(gamma))
A:sympy.polys.factortools.px->K0.get_ring().convert(px)
A:sympy.polys.factortools.(p, fsqf)->min(a, key=lambda x: len(x[1]))
A:sympy.polys.factortools.l->int(_ceil(_log(2 * B + 1, p)))
A:sympy.polys.factortools.sorted_T->range(len(g))
A:sympy.polys.factortools.G_norm->dup_l1_norm(G, K)
A:sympy.polys.factortools.H_norm->dup_l1_norm(H, K)
A:sympy.polys.factortools.tc->dup_TC(f, K)
A:sympy.polys.factortools.e_fc->dup_content(f[1:], K)
A:sympy.polys.factortools.e_ff->factorint(int(e_fc))
A:sympy.polys.factortools.f->dmp_convert(f, u, K0, K0_inexact)
A:sympy.polys.factortools.(coeff, factors)->dmp_factor_list(f, u, K)
A:sympy.polys.factortools.(cont, g)->dmp_ground_primitive(f, u, K)
A:sympy.polys.factortools.factors->dmp_factor_list_include(r, u, K.dom)
A:sympy.polys.factortools.(c, h)->dup_primitive(g, K)
A:sympy.polys.factortools.D->dmp_zz_wang_non_divisors(E, c, ct, K)
A:sympy.polys.factortools.(s, t, G)->gf_gcdex(g, f, p, K)
A:sympy.polys.factortools.(q, s)->gf_div(s, f, p, K)
A:sympy.polys.factortools.(t, s)->dmp_zz_diophantine([g, f], T[-1], [], 0, p, 1, K)
A:sympy.polys.factortools.S[j]->dup_trunc(dup_add(s, t, K), p, K)
A:sympy.polys.factortools.m->dmp_nest([K.one, -a], w, K)
A:sympy.polys.factortools.M->dmp_mul(M, m, w, K)
A:sympy.polys.factortools.T[i]->dmp_mul(dmp_raise(t, 1, v, K), M, u, K)
A:sympy.polys.factortools.S[i]->dmp_add(s, t, u, K)
A:sympy.polys.factortools.dj->dmp_degree_in(s, w, w)
A:sympy.polys.factortools.H[i]->dmp_ground_trunc(h, p, w, K)
A:sympy.polys.factortools.randint->_randint(seed)
A:sympy.polys.factortools.(ct, T)->dmp_zz_factor(dmp_LC(f, K), u - 1, K)
A:sympy.polys.factortools.p->K(nextprime(b))
A:sympy.polys.factortools.(cs, s, E)->dmp_zz_wang_test_points(f, T, ct, A, u, K)
A:sympy.polys.factortools.(_, H)->dup_zz_factor_sqf(s, K)
A:sympy.polys.factortools.eez_num_configs->query('EEZ_NUMBER_OF_CONFIGS')
A:sympy.polys.factortools.eez_num_tries->query('EEZ_NUMBER_OF_TRIES')
A:sympy.polys.factortools.eez_mod_step->query('EEZ_MODULUS_STEP')
A:sympy.polys.factortools.rr->len(H)
A:sympy.polys.factortools._s_norm->dup_max_norm(s, K)
A:sympy.polys.factortools.(f, H, LC)->dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K)
A:sympy.polys.factortools.(_, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.factortools.(G, g)->dmp_primitive(g, u, K)
A:sympy.polys.factortools.(s, g, r)->dmp_sqf_norm(f, u, K)
A:sympy.polys.factortools.(h, _, g)->dmp_inner_gcd(h, g, u, K)
A:sympy.polys.factortools.(j, f)->dup_terms_gcd(f, K0)
A:sympy.polys.factortools.(cont, f)->dmp_ground_primitive(f, u, K0)
A:sympy.polys.factortools.K->K0.get_ring()
A:sympy.polys.factortools.(denom, f)->dmp_clear_denoms(f, u, K0, K)
A:sympy.polys.factortools.(f, u)->dmp_inject(f, 0, K)
A:sympy.polys.factortools.coeff->K0_inexact.convert(coeff, K0)
A:sympy.polys.factortools.(J, f)->dmp_terms_gcd(f, u, K0)
A:sympy.polys.factortools.(levels, f, v)->dmp_exclude(f, u, K)
A:sympy.polys.factortools.(f, v)->dmp_inject(f, u, K)
A:sympy.polys.factortools.(_, factors)->dmp_factor_list(f, u, K)
sympy.factortools._dup_cyclotomic_decompose(n,K)
sympy.factortools._test_pl(fc,q,pl)
sympy.factortools.dmp_ext_factor(f,u,K)
sympy.factortools.dmp_factor_list(f,u,K0)
sympy.factortools.dmp_factor_list_include(f,u,K)
sympy.factortools.dmp_gf_factor(f,u,K)
sympy.factortools.dmp_irreducible_p(f,u,K)
sympy.factortools.dmp_trial_division(f,factors,u,K)
sympy.factortools.dmp_zz_diophantine(F,c,A,d,p,u,K)
sympy.factortools.dmp_zz_factor(f,u,K)
sympy.factortools.dmp_zz_mignotte_bound(f,u,K)
sympy.factortools.dmp_zz_wang(f,u,K,mod=None,seed=None)
sympy.factortools.dmp_zz_wang_hensel_lifting(f,H,LC,A,p,u,K)
sympy.factortools.dmp_zz_wang_lead_coeffs(f,T,cs,E,H,A,u,K)
sympy.factortools.dmp_zz_wang_non_divisors(E,cs,ct,K)
sympy.factortools.dmp_zz_wang_test_points(f,T,ct,A,u,K)
sympy.factortools.dup_cyclotomic_p(f,K,irreducible=False)
sympy.factortools.dup_ext_factor(f,K)
sympy.factortools.dup_factor_list(f,K0)
sympy.factortools.dup_factor_list_include(f,K)
sympy.factortools.dup_gf_factor(f,K)
sympy.factortools.dup_irreducible_p(f,K)
sympy.factortools.dup_trial_division(f,factors,K)
sympy.factortools.dup_zz_cyclotomic_factor(f,K)
sympy.factortools.dup_zz_cyclotomic_poly(n,K)
sympy.factortools.dup_zz_diophantine(F,m,p,K)
sympy.factortools.dup_zz_factor(f,K)
sympy.factortools.dup_zz_factor_sqf(f,K)
sympy.factortools.dup_zz_hensel_lift(p,f,f_list,l,K)
sympy.factortools.dup_zz_hensel_step(m,f,g,h,s,t,K)
sympy.factortools.dup_zz_irreducible_p(f,K)
sympy.factortools.dup_zz_mignotte_bound(f,K)
sympy.factortools.dup_zz_zassenhaus(f,K)
sympy.polys.factortools._dup_cyclotomic_decompose(n,K)
sympy.polys.factortools._test_pl(fc,q,pl)
sympy.polys.factortools.dmp_ext_factor(f,u,K)
sympy.polys.factortools.dmp_factor_list(f,u,K0)
sympy.polys.factortools.dmp_factor_list_include(f,u,K)
sympy.polys.factortools.dmp_gf_factor(f,u,K)
sympy.polys.factortools.dmp_irreducible_p(f,u,K)
sympy.polys.factortools.dmp_trial_division(f,factors,u,K)
sympy.polys.factortools.dmp_zz_diophantine(F,c,A,d,p,u,K)
sympy.polys.factortools.dmp_zz_factor(f,u,K)
sympy.polys.factortools.dmp_zz_mignotte_bound(f,u,K)
sympy.polys.factortools.dmp_zz_wang(f,u,K,mod=None,seed=None)
sympy.polys.factortools.dmp_zz_wang_hensel_lifting(f,H,LC,A,p,u,K)
sympy.polys.factortools.dmp_zz_wang_lead_coeffs(f,T,cs,E,H,A,u,K)
sympy.polys.factortools.dmp_zz_wang_non_divisors(E,cs,ct,K)
sympy.polys.factortools.dmp_zz_wang_test_points(f,T,ct,A,u,K)
sympy.polys.factortools.dup_cyclotomic_p(f,K,irreducible=False)
sympy.polys.factortools.dup_ext_factor(f,K)
sympy.polys.factortools.dup_factor_list(f,K0)
sympy.polys.factortools.dup_factor_list_include(f,K)
sympy.polys.factortools.dup_gf_factor(f,K)
sympy.polys.factortools.dup_irreducible_p(f,K)
sympy.polys.factortools.dup_trial_division(f,factors,K)
sympy.polys.factortools.dup_zz_cyclotomic_factor(f,K)
sympy.polys.factortools.dup_zz_cyclotomic_poly(n,K)
sympy.polys.factortools.dup_zz_diophantine(F,m,p,K)
sympy.polys.factortools.dup_zz_factor(f,K)
sympy.polys.factortools.dup_zz_factor_sqf(f,K)
sympy.polys.factortools.dup_zz_hensel_lift(p,f,f_list,l,K)
sympy.polys.factortools.dup_zz_hensel_step(m,f,g,h,s,t,K)
sympy.polys.factortools.dup_zz_irreducible_p(f,K)
sympy.polys.factortools.dup_zz_mignotte_bound(f,K)
sympy.polys.factortools.dup_zz_zassenhaus(f,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/specialpolys.py----------------------------------------
A:sympy.polys.specialpolys.x->Dummy('x')
A:sympy.polys.specialpolys.p->nextprime(p)
A:sympy.polys.specialpolys.poly->Poly(dup_random(n, inf, sup, domain), x, domain=domain)
A:sympy.polys.specialpolys.gens->_analyze_gens(gens)
A:sympy.polys.specialpolys.X->symbols('%s:%s' % (X, n))
A:sympy.polys.specialpolys.Y->dmp_raise(f, m, 1, K)
A:sympy.polys.specialpolys.numer->Mul(*numer)
A:sympy.polys.specialpolys.denom->Mul(*denom)
A:sympy.polys.specialpolys.F->Poly((y_0 ** (n + 1) - u - 2) ** 2, *Y)
A:sympy.polys.specialpolys.G->Poly((y_0 ** (n + 1) + u + 2) ** 2, *Y)
A:sympy.polys.specialpolys.H->Poly((y_0 ** (n + 1) + u + 1) ** 2, *Y)
A:sympy.polys.specialpolys.U->dmp_add_term(u, dmp_ground(K(1), m), 0, n, K)
A:sympy.polys.specialpolys.V->dmp_add_term(u, dmp_ground(K(2), m), 0, n, K)
A:sympy.polys.specialpolys.W->dmp_add_term(v, dmp_ground(K(1), m), 0, n, K)
A:sympy.polys.specialpolys.u->dmp_add_term([u], dmp_one(i, K), n + 1, i + 1, K)
A:sympy.polys.specialpolys.v->dmp_add_term(u, dmp_one(n - 2, K), 0, n - 1, K)
A:sympy.polys.specialpolys.f->dmp_sqr(dmp_add_term([dmp_neg(v, n - 1, K)], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.g->dmp_sqr(dmp_add_term([v], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.h->dmp_sqr(dmp_add_term([v], dmp_one(n - 1, K), n + 1, n, K), n, K)
A:sympy.polys.specialpolys.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.specialpolys.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.specialpolys.(R, x, y)->ring('x,y', ZZ)
sympy._f_0()
sympy._f_1()
sympy._f_2()
sympy._f_3()
sympy._f_4()
sympy._f_5()
sympy._f_6()
sympy._w_1()
sympy._w_2()
sympy.cyclotomic_poly(n,x=None,**args)
sympy.dmp_fateman_poly_F_1(n,K)
sympy.dmp_fateman_poly_F_2(n,K)
sympy.dmp_fateman_poly_F_3(n,K)
sympy.f_polys()
sympy.fateman_poly_F_1(n)
sympy.fateman_poly_F_2(n)
sympy.fateman_poly_F_3(n)
sympy.interpolating_poly(n,x,X='x',Y='y')
sympy.polys.specialpolys._f_0()
sympy.polys.specialpolys._f_1()
sympy.polys.specialpolys._f_2()
sympy.polys.specialpolys._f_3()
sympy.polys.specialpolys._f_4()
sympy.polys.specialpolys._f_5()
sympy.polys.specialpolys._f_6()
sympy.polys.specialpolys._w_1()
sympy.polys.specialpolys._w_2()
sympy.polys.specialpolys.cyclotomic_poly(n,x=None,**args)
sympy.polys.specialpolys.dmp_fateman_poly_F_1(n,K)
sympy.polys.specialpolys.dmp_fateman_poly_F_2(n,K)
sympy.polys.specialpolys.dmp_fateman_poly_F_3(n,K)
sympy.polys.specialpolys.f_polys()
sympy.polys.specialpolys.fateman_poly_F_1(n)
sympy.polys.specialpolys.fateman_poly_F_2(n)
sympy.polys.specialpolys.fateman_poly_F_3(n)
sympy.polys.specialpolys.interpolating_poly(n,x,X='x',Y='y')
sympy.polys.specialpolys.random_poly(x,n,inf,sup,domain=ZZ,polys=False)
sympy.polys.specialpolys.swinnerton_dyer_poly(n,x=None,**args)
sympy.polys.specialpolys.symmetric_poly(n,*gens,**args)
sympy.polys.specialpolys.w_polys()
sympy.random_poly(x,n,inf,sup,domain=ZZ,polys=False)
sympy.swinnerton_dyer_poly(n,x=None,**args)
sympy.symmetric_poly(n,*gens,**args)
sympy.w_polys()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/densetools.py----------------------------------------
A:sympy.polys.densetools.n->dmp_degree(f, u)
A:sympy.polys.densetools.result->_dup_decompose(f, K)
A:sympy.polys.densetools.e->_rec_eval_tail(f, 0, A, u, K)
A:sympy.polys.densetools.lc->dup_LC(f, K)
A:sympy.polys.densetools.cont->dmp_ground_content(f, u, K)
A:sympy.polys.densetools.fc->dmp_ground_content(f, u, K)
A:sympy.polys.densetools.gc->dmp_ground_content(g, u, K)
A:sympy.polys.densetools.gcd->K.gcd(fc, gc)
A:sympy.polys.densetools.f->dmp_mul_ground(f, common, u, K0)
A:sympy.polys.densetools.g->dup_rem(dup_sub(a, b, K), h, K)
A:sympy.polys.densetools.f1->dmp_sub(f1, h, 1, K)
A:sympy.polys.densetools.f2->dmp_sub(f2, h, 1, K)
A:sympy.polys.densetools.h->dup_lshift(h, dup_degree(h), K)
A:sympy.polys.densetools.H->dup_to_raw_dict(h)
A:sympy.polys.densetools.q->dup_mul_ground(q, c, K)
A:sympy.polys.densetools.g[s - i]->K.quo(coeff, i * r * lc)
A:sympy.polys.densetools.(q, r)->dup_div(f, h, K)
A:sympy.polys.densetools.g[i]->dup_LC(r, K)
A:sympy.polys.densetools.perms->variations([-1, 1], len(monoms), repetition=True)
A:sympy.polys.densetools.G->dict(F)
A:sympy.polys.densetools.K1->K0.get_ring()
A:sympy.polys.densetools.common->_rec_clear_denoms(f, u, K0, K1)
A:sympy.polys.densetools.N->int(_ceil(_log(n, 2)))
A:sympy.polys.densetools.a->dup_mul_ground(g, K(2), K)
A:sympy.polys.densetools.b->dup_mul(f, dup_sqr(g, K), K)
sympy.densetools._dup_decompose(f,K)
sympy.densetools._dup_left_decompose(f,h,K)
sympy.densetools._dup_right_decompose(f,s,K)
sympy.densetools._rec_clear_denoms(g,v,K0,K1)
sympy.densetools._rec_diff_eval(g,m,a,v,i,j,K)
sympy.densetools._rec_diff_in(g,m,v,i,j,K)
sympy.densetools._rec_eval_in(g,a,v,i,j,K)
sympy.densetools._rec_eval_tail(g,i,A,u,K)
sympy.densetools._rec_integrate_in(g,m,v,i,j,K)
sympy.densetools.dmp_clear_denoms(f,u,K0,K1=None,convert=False)
sympy.densetools.dmp_compose(f,g,u,K)
sympy.densetools.dmp_diff(f,m,u,K)
sympy.densetools.dmp_diff_eval_in(f,m,a,j,u,K)
sympy.densetools.dmp_diff_in(f,m,j,u,K)
sympy.densetools.dmp_eval(f,a,u,K)
sympy.densetools.dmp_eval_in(f,a,j,u,K)
sympy.densetools.dmp_eval_tail(f,A,u,K)
sympy.densetools.dmp_ground_content(f,u,K)
sympy.densetools.dmp_ground_extract(f,g,u,K)
sympy.densetools.dmp_ground_monic(f,u,K)
sympy.densetools.dmp_ground_primitive(f,u,K)
sympy.densetools.dmp_ground_trunc(f,p,u,K)
sympy.densetools.dmp_integrate(f,m,u,K)
sympy.densetools.dmp_integrate_in(f,m,j,u,K)
sympy.densetools.dmp_lift(f,u,K)
sympy.densetools.dmp_revert(f,g,u,K)
sympy.densetools.dmp_trunc(f,p,u,K)
sympy.densetools.dup_clear_denoms(f,K0,K1=None,convert=False)
sympy.densetools.dup_compose(f,g,K)
sympy.densetools.dup_content(f,K)
sympy.densetools.dup_decompose(f,K)
sympy.densetools.dup_diff(f,m,K)
sympy.densetools.dup_eval(f,a,K)
sympy.densetools.dup_extract(f,g,K)
sympy.densetools.dup_integrate(f,m,K)
sympy.densetools.dup_mirror(f,K)
sympy.densetools.dup_monic(f,K)
sympy.densetools.dup_primitive(f,K)
sympy.densetools.dup_real_imag(f,K)
sympy.densetools.dup_revert(f,n,K)
sympy.densetools.dup_scale(f,a,K)
sympy.densetools.dup_shift(f,a,K)
sympy.densetools.dup_sign_variations(f,K)
sympy.densetools.dup_transform(f,p,q,K)
sympy.densetools.dup_trunc(f,p,K)
sympy.polys.densetools._dup_decompose(f,K)
sympy.polys.densetools._dup_left_decompose(f,h,K)
sympy.polys.densetools._dup_right_decompose(f,s,K)
sympy.polys.densetools._rec_clear_denoms(g,v,K0,K1)
sympy.polys.densetools._rec_diff_eval(g,m,a,v,i,j,K)
sympy.polys.densetools._rec_diff_in(g,m,v,i,j,K)
sympy.polys.densetools._rec_eval_in(g,a,v,i,j,K)
sympy.polys.densetools._rec_eval_tail(g,i,A,u,K)
sympy.polys.densetools._rec_integrate_in(g,m,v,i,j,K)
sympy.polys.densetools.dmp_clear_denoms(f,u,K0,K1=None,convert=False)
sympy.polys.densetools.dmp_compose(f,g,u,K)
sympy.polys.densetools.dmp_diff(f,m,u,K)
sympy.polys.densetools.dmp_diff_eval_in(f,m,a,j,u,K)
sympy.polys.densetools.dmp_diff_in(f,m,j,u,K)
sympy.polys.densetools.dmp_eval(f,a,u,K)
sympy.polys.densetools.dmp_eval_in(f,a,j,u,K)
sympy.polys.densetools.dmp_eval_tail(f,A,u,K)
sympy.polys.densetools.dmp_ground_content(f,u,K)
sympy.polys.densetools.dmp_ground_extract(f,g,u,K)
sympy.polys.densetools.dmp_ground_monic(f,u,K)
sympy.polys.densetools.dmp_ground_primitive(f,u,K)
sympy.polys.densetools.dmp_ground_trunc(f,p,u,K)
sympy.polys.densetools.dmp_integrate(f,m,u,K)
sympy.polys.densetools.dmp_integrate_in(f,m,j,u,K)
sympy.polys.densetools.dmp_lift(f,u,K)
sympy.polys.densetools.dmp_revert(f,g,u,K)
sympy.polys.densetools.dmp_trunc(f,p,u,K)
sympy.polys.densetools.dup_clear_denoms(f,K0,K1=None,convert=False)
sympy.polys.densetools.dup_compose(f,g,K)
sympy.polys.densetools.dup_content(f,K)
sympy.polys.densetools.dup_decompose(f,K)
sympy.polys.densetools.dup_diff(f,m,K)
sympy.polys.densetools.dup_eval(f,a,K)
sympy.polys.densetools.dup_extract(f,g,K)
sympy.polys.densetools.dup_integrate(f,m,K)
sympy.polys.densetools.dup_mirror(f,K)
sympy.polys.densetools.dup_monic(f,K)
sympy.polys.densetools.dup_primitive(f,K)
sympy.polys.densetools.dup_real_imag(f,K)
sympy.polys.densetools.dup_revert(f,n,K)
sympy.polys.densetools.dup_scale(f,a,K)
sympy.polys.densetools.dup_shift(f,a,K)
sympy.polys.densetools.dup_sign_variations(f,K)
sympy.polys.densetools.dup_transform(f,p,q,K)
sympy.polys.densetools.dup_trunc(f,p,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/constructor.py----------------------------------------
A:sympy.polys.constructor.(domain, result)->_construct_algebraic(coeffs, opt)
A:sympy.polys.constructor.a->sympy.polys.domains.QQ.from_sympy(a)
A:sympy.polys.constructor.b->sympy.polys.domains.QQ.from_sympy(b)
A:sympy.polys.constructor.exts->list(exts)
A:sympy.polys.constructor.(g, span, H)->primitive_element(exts, ex=True, polys=True)
A:sympy.polys.constructor.root->sum([s * ext for (s, ext) in zip(span, exts)])
A:sympy.polys.constructor.coeff->ground.frac_field(*gens).dtype.from_list([b], g, QQ)
A:sympy.polys.constructor.(numer, denom)->ground.frac_field(*gens).dtype.from_list([b], g, QQ).as_numer_denom()
A:sympy.polys.constructor.(polys, gens)->parallel_dict_from_basic(numers + denoms)
A:sympy.polys.constructor.all_symbols->set([])
A:sympy.polys.constructor.n->len(gens)
A:sympy.polys.constructor.coeffs->list(map(sympify, coeffs))
A:sympy.polys.constructor.domain->ground.frac_field(*gens)
A:sympy.polys.constructor.numer[monom]->ground.from_sympy(coeff)
A:sympy.polys.constructor.denom[monom]->ground.from_sympy(coeff)
A:sympy.polys.constructor.opt->build_options(args)
A:sympy.polys.constructor.(monoms, coeffs)->list(zip(*list(obj.items())))
A:sympy.polys.constructor.result->_construct_composite(coeffs, opt)
A:sympy.polys.constructor.(domain, coeffs)->_construct_expression(coeffs, opt)
sympy._construct_algebraic(coeffs,opt)
sympy._construct_composite(coeffs,opt)
sympy._construct_expression(coeffs,opt)
sympy._construct_simple(coeffs,opt)
sympy.construct_domain(obj,**args)
sympy.polys.constructor._construct_algebraic(coeffs,opt)
sympy.polys.constructor._construct_composite(coeffs,opt)
sympy.polys.constructor._construct_expression(coeffs,opt)
sympy.polys.constructor._construct_simple(coeffs,opt)
sympy.polys.constructor.construct_domain(obj,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyroots.py----------------------------------------
A:sympy.polys.polyroots.dom->f.to_field().get_domain()
A:sympy.polys.polyroots.r->r.n(2).n(2)
A:sympy.polys.polyroots.(a, b, c)->f.to_field().all_coeffs()
A:sympy.polys.polyroots.r1->roots_quadratic(h1)
A:sympy.polys.polyroots.R->max(xsols)
A:sympy.polys.polyroots.d->discriminant(f)
A:sympy.polys.polyroots.B->_simplify(B)
A:sympy.polys.polyroots.(a, b, c, d)->f.to_field().all_coeffs()
A:sympy.polys.polyroots.(_, a, b, c)->f.to_field().monic().all_coeffs()
A:sympy.polys.polyroots.(x1, x2)->roots([1, a, b], multiple=True)
A:sympy.polys.polyroots.u1->root(q / 2 + sqrt(q ** 2 / 4 + pon3 ** 3), 3)
A:sympy.polys.polyroots.(y1, y2)->roots([1, 0, p], multiple=True)
A:sympy.polys.polyroots.x->Dummy('x')
A:sympy.polys.polyroots.xsols->list(roots(Poly(eq, x), cubics=False).keys())
A:sympy.polys.polyroots.c1->sqrt(R)
A:sympy.polys.polyroots.c2->sqrt(A + B)
A:sympy.polys.polyroots.c3->sqrt(A - B)
A:sympy.polys.polyroots.(_, a, b, c, d)->f.to_field().monic().all_coeffs()
A:sympy.polys.polyroots.g->Poly(f, extension=root(-1, n))
A:sympy.polys.polyroots.(z1, z2)->roots_quadratic(g)
A:sympy.polys.polyroots.h1->Poly(x ** 2 - z1 * x + m, x)
A:sympy.polys.polyroots.h2->Poly(x ** 2 - z2 * x + m, x)
A:sympy.polys.polyroots.r2->roots_quadratic(h2)
A:sympy.polys.polyroots.sols->_roots_quartic_euler(e, f, g, aon4)
A:sympy.polys.polyroots.TH->Rational(1, 3)
A:sympy.polys.polyroots.w->sqrt(e + 2 * y)
A:sympy.polys.polyroots.root->sqrt(q ** 2 / 4 + p ** 3 / 27)
A:sympy.polys.polyroots.n->f.to_field().degree()
A:sympy.polys.polyroots.alpha->alpha.expand(complex=True).expand(complex=True)
A:sympy.polys.polyroots.pair->list(reversed(pair))
A:sympy.polys.polyroots.zeta->exp(k * d).expand(complex=True)
A:sympy.polys.polyroots.U->int(math.ceil(m * (float(P) / b)))
A:sympy.polys.polyroots.p->nextprime(p)
A:sympy.polys.polyroots.(L, U)->_inv_totient_estimate(f.degree())
A:sympy.polys.polyroots.(coeff_5, coeff_4, p, q, r, s)->f.to_field().all_coeffs()
A:sympy.polys.polyroots.f->f.to_field().to_field()
A:sympy.polys.polyroots.quintic->PolyQuintic(f)
A:sympy.polys.polyroots.theta->_factor[0].root(0)
A:sympy.polys.polyroots.delta->sqrt(d)
A:sympy.polys.polyroots.T->PolyQuintic(f).T(theta, d)
A:sympy.polys.polyroots.tol->S(1e-10)
A:sympy.polys.polyroots.l0->PolyQuintic(f).l0(theta)
A:sympy.polys.polyroots.l1->_quintic_simplify((-alpha + sqrt(disc)) / S(2))
A:sympy.polys.polyroots.l4->_quintic_simplify((-alpha - sqrt(disc)) / S(2))
A:sympy.polys.polyroots.l2->_quintic_simplify((-alpha_bar + sqrt(disc_bar)) / S(2))
A:sympy.polys.polyroots.l3->_quintic_simplify((-alpha_bar - sqrt(disc_bar)) / S(2))
A:sympy.polys.polyroots.order->PolyQuintic(f).order(theta, d)
A:sympy.polys.polyroots.sol->Symbol('sol')
A:sympy.polys.polyroots.R1->R1.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R2->R2.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R3->R3.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.R4->R4.as_real_imag().as_real_imag()
A:sympy.polys.polyroots.(a, b)->symbols('a b', cls=Dummy)
A:sympy.polys.polyroots._sol->_solve(sol ** 5 - a - I * b, sol)
A:sympy.polys.polyroots._sol[i]->factor(_sol[i])
A:sympy.polys.polyroots.Res[1][i]->_quintic_simplify(root.subs({a: R1[0], b: R1[1]}))
A:sympy.polys.polyroots.Res[2][i]->_quintic_simplify(root.subs({a: R2[0], b: R2[1]}))
A:sympy.polys.polyroots.Res[3][i]->_quintic_simplify(root.subs({a: R3[0], b: R3[1]}))
A:sympy.polys.polyroots.Res[4][i]->_quintic_simplify(root.subs({a: R4[0], b: R4[1]}))
A:sympy.polys.polyroots.Res_n[i][j]->_quintic_simplify(Res[i][j]).n()
A:sympy.polys.polyroots.Res[i][j]->_quintic_simplify(Res[i][j])
A:sympy.polys.polyroots.(u, v)->PolyQuintic(f).uv(theta, d)
A:sympy.polys.polyroots.sqrt5->math.sqrt(5)
A:sympy.polys.polyroots.testplus->(u + v * delta * sqrt(5)).n()
A:sympy.polys.polyroots.testminus->(u - v * delta * sqrt(5)).n()
A:sympy.polys.polyroots.r4_n->r4.n()
A:sympy.polys.polyroots.saw->set()
A:sympy.polys.polyroots.expr->cancel(expr)
A:sympy.polys.polyroots.(monoms, coeffs)->list(zip(*poly.terms()))
A:sympy.polys.polyroots.(monoms,)->list(zip(*monoms))
A:sympy.polys.polyroots.coeffs->list(reversed(coeffs))
A:sympy.polys.polyroots.divs->reversed(divisors(gcd_list(coeffs))[1:])
A:sympy.polys.polyroots.div->next(divs)
A:sympy.polys.polyroots.(_, poly)->poly.termwise(func).clear_denoms(convert=True)
A:sympy.polys.polyroots.poly->poly.termwise(func).termwise(func)
A:sympy.polys.polyroots.strips->list(zip(*poly.monoms()))
A:sympy.polys.polyroots.gens->list(poly.gens[1:])
A:sympy.polys.polyroots.strip->reversed(strip)
A:sympy.polys.polyroots.basis->_integer_basis(poly)
A:sympy.polys.polyroots.flags->dict(flags)
A:sympy.polys.polyroots.auto->dict(flags).pop('auto', True)
A:sympy.polys.polyroots.cubics->dict(flags).pop('cubics', True)
A:sympy.polys.polyroots.trig->dict(flags).pop('trig', False)
A:sympy.polys.polyroots.quartics->dict(flags).pop('quartics', True)
A:sympy.polys.polyroots.quintics->dict(flags).pop('quintics', False)
A:sympy.polys.polyroots.multiple->dict(flags).pop('multiple', False)
A:sympy.polys.polyroots.filter->dict(args).pop('filter', None)
A:sympy.polys.polyroots.predicate->dict(flags).pop('predicate', None)
A:sympy.polys.polyroots.((k,), f)->f.to_field().to_field().terms_gcd()
A:sympy.polys.polyroots.(coeff, f)->preprocess_roots(f)
A:sympy.polys.polyroots.(_, factors)->Poly(f.as_expr()).factor_list()
A:sympy.polys.polyroots.res->to_rational_coeffs(f)
A:sympy.polys.polyroots.result->roots(f)
A:sympy.polys.polyroots.args->dict(args)
A:sympy.polys.polyroots.F->Poly(f, *gens, **args)
A:sympy.polys.polyroots.zeros->roots(F, filter=filter)
A:sympy.polys.polyroots.G->reduce(lambda p, q: p * q, factors)
sympy._integer_basis(poly)
sympy._inv_totient_estimate(m)
sympy._quintic_simplify(expr)
sympy._roots_quartic_euler(p,q,r,a)
sympy.polys.polyroots._integer_basis(poly)
sympy.polys.polyroots._inv_totient_estimate(m)
sympy.polys.polyroots._quintic_simplify(expr)
sympy.polys.polyroots._roots_quartic_euler(p,q,r,a)
sympy.polys.polyroots.preprocess_roots(poly)
sympy.polys.polyroots.root_factors(f,*gens,**args)
sympy.polys.polyroots.roots(f,*gens,**flags)
sympy.polys.polyroots.roots_binomial(f)
sympy.polys.polyroots.roots_cubic(f,trig=False)
sympy.polys.polyroots.roots_cyclotomic(f,factor=False)
sympy.polys.polyroots.roots_linear(f)
sympy.polys.polyroots.roots_quadratic(f)
sympy.polys.polyroots.roots_quartic(f)
sympy.polys.polyroots.roots_quintic(f)
sympy.preprocess_roots(poly)
sympy.root_factors(f,*gens,**args)
sympy.roots(f,*gens,**flags)
sympy.roots_binomial(f)
sympy.roots_cubic(f,trig=False)
sympy.roots_cyclotomic(f,factor=False)
sympy.roots_linear(f)
sympy.roots_quadratic(f)
sympy.roots_quartic(f)
sympy.roots_quintic(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/numberfields.py----------------------------------------
A:sympy.polys.numberfields.t->QQ(1, 10)
A:sympy.polys.numberfields.sifted->sift(y.args, is_sqrt)
A:sympy.polys.numberfields.(g, b1, b2)->_split_gcd(*surds[i:])
A:sympy.polys.numberfields.p1->R(dict_from_expr(mp1)[0])
A:sympy.polys.numberfields.p2->R(dict_from_expr(mp2)[0])
A:sympy.polys.numberfields.p->p.subs({ex.poly.gens[0]: x}).subs({ex.poly.gens[0]: x})
A:sympy.polys.numberfields.n->AlgebraicNumber(a).minpoly.degree()
A:sympy.polys.numberfields.r->sift(f.items(), lambda itx: itx[0].is_Rational and itx[1].is_Rational)
A:sympy.polys.numberfields.result->field_isomorphism_pslq(a, b)
A:sympy.polys.numberfields.y->next(generator)
A:sympy.polys.numberfields.mp1->minimal_polynomial(ex1, x)
A:sympy.polys.numberfields.mp2->mp2.subs({x: y}).subs({x: y})
A:sympy.polys.numberfields.(R, X)->ring('X', QQ)
A:sympy.polys.numberfields.((p1, p2), _)->parallel_poly_from_expr((mp1, x - y), x, y)
A:sympy.polys.numberfields.mp1a->_muly(mp1, x, y)
A:sympy.polys.numberfields.deg1->degree(mp1, x)
A:sympy.polys.numberfields.deg2->degree(mp2, y)
A:sympy.polys.numberfields.(_, factors)->factor_list(a.minpoly, extension=b)
A:sympy.polys.numberfields.res->_minimal_polynomial_sq(ex, S.One, x)
A:sympy.polys.numberfields.pw->sympify(pw)
A:sympy.polys.numberfields.mp->_choose_factor(factors, x, ex)
A:sympy.polys.numberfields.(n, d)->sympify(pw).as_numer_denom()
A:sympy.polys.numberfields.(c, a)->expand_multinomial(ex).args[0].as_coeff_Mul()
A:sympy.polys.numberfields.q->sympify(c.q)
A:sympy.polys.numberfields.a->AlgebraicNumber(a)
A:sympy.polys.numberfields.s->_minpoly_sin(ex, x)
A:sympy.polys.numberfields.ex1->Mul(*[bx ** ex for (bx, ex) in r[False] + r[None]])
A:sympy.polys.numberfields.lcmdens->reduce(lcm, dens, 1)
A:sympy.polys.numberfields.ex2->Mul(*nums)
A:sympy.polys.numberfields.compose->args.get('compose', True)
A:sympy.polys.numberfields.polys->args.get('polys', False)
A:sympy.polys.numberfields.dom->args.get('domain', None)
A:sympy.polys.numberfields.ex->expand_multinomial(ex)
A:sympy.polys.numberfields.c->field_isomorphism_pslq(a, b).coeff(x ** degree(result, x))
A:sympy.polys.numberfields.generator->numbered_symbols('y', cls=Dummy)
A:sympy.polys.numberfields.mapping[ex]->exp.as_expr(a)
A:sympy.polys.numberfields.(coeff, terms)->expand_multinomial(ex).base.as_coeff_add()
A:sympy.polys.numberfields.(elt, _)->primitive_element(terms, polys=True)
A:sympy.polys.numberfields.inverse->invert(elt.gen + coeff, elt).as_expr()
A:sympy.polys.numberfields.base->bottom_up_scan(base)
A:sympy.polys.numberfields.inverted->simpler_inverse(ex)
A:sympy.polys.numberfields.bus->bottom_up_scan(ex)
A:sympy.polys.numberfields.G->groebner(F + [f], Y + [x], order='lex', field=True)
A:sympy.polys.numberfields.(s, _, g)->sqf_norm(g, x, extension=ext)
A:sympy.polys.numberfields.f->minpoly(ext, y)
A:sympy.polys.numberfields.coeffs_generator->args.get('coeffs', _coeffs_generator)
A:sympy.polys.numberfields.H[i]->Poly(y - h, x, domain='QQ').all_coeffs()
A:sympy.polys.numberfields.(_, g)->b.minpoly.replace(f.gen).clear_denoms()
A:sympy.polys.numberfields.m->AlgebraicNumber(b).minpoly.degree()
A:sympy.polys.numberfields.da->AlgebraicNumber(a).minpoly.discriminant()
A:sympy.polys.numberfields.db->AlgebraicNumber(b).minpoly.discriminant()
A:sympy.polys.numberfields.g->AlgebraicNumber(b).minpoly.replace(f.gen)
A:sympy.polys.numberfields.A->AlgebraicNumber(a).root.evalf(n)
A:sympy.polys.numberfields.B->AlgebraicNumber(b).root.evalf(n)
A:sympy.polys.numberfields.coeffs->field_isomorphism(root, theta)
A:sympy.polys.numberfields.h->Poly(coeffs, f.gen, domain='QQ')
A:sympy.polys.numberfields.root->sum([coeff * ext for (coeff, ext) in zip(coeffs, extension)])
A:sympy.polys.numberfields.b->AlgebraicNumber(b)
A:sympy.polys.numberfields.gen->args.get('gen')
A:sympy.polys.numberfields.extension->list(extension)
A:sympy.polys.numberfields.(minpoly, coeffs)->primitive_element(extension, gen, polys=True)
A:sympy.polys.numberfields.theta->AlgebraicNumber(theta, gen=gen)
A:sympy.polys.numberfields.alg->func()
A:sympy.polys.numberfields.func->lambdify((), alg, modules='mpmath', printer=IntervalPrinter())
A:sympy.polys.numberfields.poly->minpoly(alg, polys=True)
A:sympy.polys.numberfields.intervals->minpoly(alg, polys=True).intervals(sqf=True)
A:sympy.polys.numberfields.(a, b)->minpoly(alg, polys=True).refine_root(a, b, eps=eps, fast=fast)
sympy.numberIntervalPrinter(LambdaPrinter)
sympy.numberIntervalPrinter._print_Integer(self,expr)
sympy.numberIntervalPrinter._print_Pow(self,expr)
sympy.numberIntervalPrinter._print_Rational(self,expr)
sympy.number_choose_factor(factors,x,v,dom=QQ,prec=200,bound=5)
sympy.number_coeffs_generator(n)
sympy.number_invertx(p,x)
sympy.number_minimal_polynomial_sq(p,n,x)
sympy.number_minpoly_add(x,dom,*a)
sympy.number_minpoly_compose(ex,x,dom)
sympy.number_minpoly_cos(ex,x)
sympy.number_minpoly_exp(ex,x)
sympy.number_minpoly_groebner(ex,x,cls)
sympy.number_minpoly_mul(x,dom,*a)
sympy.number_minpoly_op_algebraic_element(op,ex1,ex2,x,dom,mp1=None,mp2=None)
sympy.number_minpoly_pow(ex,pw,x,dom,mp=None)
sympy.number_minpoly_rootof(ex,x)
sympy.number_minpoly_sin(ex,x)
sympy.number_muly(p,x,y)
sympy.number_separate_sq(p)
sympy.numberfield_isomorphism(a,b,**args)
sympy.numberfield_isomorphism_factor(a,b)
sympy.numberfield_isomorphism_pslq(a,b)
sympy.numberis_isomorphism_possible(a,b)
sympy.numberisolate(alg,eps=None,fast=False)
sympy.numberminimal_polynomial(ex,x=None,**args)
sympy.numberprimitive_element(extension,x=None,**args)
sympy.numberto_number_field(extension,theta=None,**args)
sympy.polys.numberfields.IntervalPrinter(LambdaPrinter)
sympy.polys.numberfields.IntervalPrinter._print_Integer(self,expr)
sympy.polys.numberfields.IntervalPrinter._print_Pow(self,expr)
sympy.polys.numberfields.IntervalPrinter._print_Rational(self,expr)
sympy.polys.numberfields._choose_factor(factors,x,v,dom=QQ,prec=200,bound=5)
sympy.polys.numberfields._coeffs_generator(n)
sympy.polys.numberfields._invertx(p,x)
sympy.polys.numberfields._minimal_polynomial_sq(p,n,x)
sympy.polys.numberfields._minpoly_add(x,dom,*a)
sympy.polys.numberfields._minpoly_compose(ex,x,dom)
sympy.polys.numberfields._minpoly_cos(ex,x)
sympy.polys.numberfields._minpoly_exp(ex,x)
sympy.polys.numberfields._minpoly_groebner(ex,x,cls)
sympy.polys.numberfields._minpoly_mul(x,dom,*a)
sympy.polys.numberfields._minpoly_op_algebraic_element(op,ex1,ex2,x,dom,mp1=None,mp2=None)
sympy.polys.numberfields._minpoly_pow(ex,pw,x,dom,mp=None)
sympy.polys.numberfields._minpoly_rootof(ex,x)
sympy.polys.numberfields._minpoly_sin(ex,x)
sympy.polys.numberfields._muly(p,x,y)
sympy.polys.numberfields._separate_sq(p)
sympy.polys.numberfields.field_isomorphism(a,b,**args)
sympy.polys.numberfields.field_isomorphism_factor(a,b)
sympy.polys.numberfields.field_isomorphism_pslq(a,b)
sympy.polys.numberfields.is_isomorphism_possible(a,b)
sympy.polys.numberfields.isolate(alg,eps=None,fast=False)
sympy.polys.numberfields.minimal_polynomial(ex,x=None,**args)
sympy.polys.numberfields.primitive_element(extension,x=None,**args)
sympy.polys.numberfields.to_number_field(extension,theta=None,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polyutils.py----------------------------------------
A:sympy.polys.polyutils._re_gen->re.compile('^(.+?)(\\d*)$')
A:sympy.polys.polyutils.opt->build_options(args)
A:sympy.polys.polyutils.gen->str(gen)
A:sympy.polys.polyutils.(name, index)->re.compile('^(.+?)(\\d*)$').match(gen).groups()
A:sympy.polys.polyutils.index->int(index)
A:sympy.polys.polyutils.gens->list(gens)
A:sympy.polys.polyutils.f_gens->list(f_gens)
A:sympy.polys.polyutils.g_gens->list(g_gens)
A:sympy.polys.polyutils.i->list(g_gens).index(gen)
A:sympy.polys.polyutils.(base, exp)->decompose_power(factor)
A:sympy.polys.polyutils.monom->tuple(monom)
A:sympy.polys.polyutils.poly[monom]->Mul(*coeff)
A:sympy.polys.polyutils.((poly,), gens)->_parallel_dict_from_expr_no_gens((expr,), opt)
A:sympy.polys.polyutils.(reps, opt)->_parallel_dict_from_expr(exprs, build_options(args))
A:sympy.polys.polyutils.(reps, gens)->_parallel_dict_from_expr_no_gens(exprs, opt)
A:sympy.polys.polyutils.(rep, opt)->_dict_from_expr(expr, build_options(args))
A:sympy.polys.polyutils.expr->expand_mul(expr)
A:sympy.polys.polyutils.(rep, gens)->_dict_from_expr_no_gens(expr, opt)
A:sympy.polys.polyutils.monoms->rep.keys()
A:sympy.polys.polyutils.coeffs->rep.values()
A:sympy.polys.polyutils.used_indices->set()
A:sympy.polys.polyutils.j->list(gens).index(gen)
A:sympy.polys.polyutils.d[name]->getattr(self, name)
sympy.polys.polyutils.PicklableWithSlots(object)
sympy.polys.polyutils.PicklableWithSlots.__getstate__(self,cls=None)
sympy.polys.polyutils.PicklableWithSlots.__setstate__(self,d)
sympy.polys.polyutils._analyze_gens(gens)
sympy.polys.polyutils._dict_from_expr(expr,opt)
sympy.polys.polyutils._dict_from_expr_if_gens(expr,opt)
sympy.polys.polyutils._dict_from_expr_no_gens(expr,opt)
sympy.polys.polyutils._dict_reorder(rep,gens,new_gens)
sympy.polys.polyutils._not_a_coeff(expr)
sympy.polys.polyutils._parallel_dict_from_expr(exprs,opt)
sympy.polys.polyutils._parallel_dict_from_expr_if_gens(exprs,opt)
sympy.polys.polyutils._parallel_dict_from_expr_no_gens(exprs,opt)
sympy.polys.polyutils._sort_factors(factors,**args)
sympy.polys.polyutils._sort_gens(gens,**args)
sympy.polys.polyutils._unify_gens(f_gens,g_gens)
sympy.polys.polyutils.dict_from_expr(expr,**args)
sympy.polys.polyutils.expr_from_dict(rep,*gens)
sympy.polys.polyutils.parallel_dict_from_expr(exprs,**args)
sympy.polyutils.PicklableWithSlots(object)
sympy.polyutils.PicklableWithSlots.__getstate__(self,cls=None)
sympy.polyutils.PicklableWithSlots.__setstate__(self,d)
sympy.polyutils._analyze_gens(gens)
sympy.polyutils._dict_from_expr(expr,opt)
sympy.polyutils._dict_from_expr_if_gens(expr,opt)
sympy.polyutils._dict_from_expr_no_gens(expr,opt)
sympy.polyutils._dict_reorder(rep,gens,new_gens)
sympy.polyutils._not_a_coeff(expr)
sympy.polyutils._parallel_dict_from_expr(exprs,opt)
sympy.polyutils._parallel_dict_from_expr_if_gens(exprs,opt)
sympy.polyutils._parallel_dict_from_expr_no_gens(exprs,opt)
sympy.polyutils._sort_factors(factors,**args)
sympy.polyutils._sort_gens(gens,**args)
sympy.polyutils._unify_gens(f_gens,g_gens)
sympy.polyutils.dict_from_expr(expr,**args)
sympy.polyutils.expr_from_dict(rep,*gens)
sympy.polyutils.parallel_dict_from_expr(exprs,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/polytools.py----------------------------------------
A:sympy.polys.polytools.opt->sympy.polys.polyoptions.build_options(gens, args)
A:sympy.polys.polytools.rep->dict(list(zip(monoms, coeffs)))
A:sympy.polys.polytools.obj->sympy.core.Basic.__new__(cls)
A:sympy.polys.polytools.(domain, rep)->construct_domain(rep, opt=opt)
A:sympy.polys.polytools.rep[monom]->f.get_domain().convert(coeff)
A:sympy.polys.polytools.(rep, opt)->_dict_from_expr(expr, opt)
A:sympy.polys.polytools.symbols->set([])
A:sympy.polys.polytools.(_, per, F, G)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.g->g.__class__._from_poly(g, opt).__class__._from_poly(g, opt)
A:sympy.polys.polytools.gens->list(f.gens)
A:sympy.polys.polytools.(f_monoms, f_coeffs)->_dict_reorder(f.rep.to_dict(), f.gens, gens)
A:sympy.polys.polytools.F->Poly(f, greedy=False)
A:sympy.polys.polytools.(g_monoms, g_coeffs)->_dict_reorder(g.rep.to_dict(), g.gens, gens)
A:sympy.polys.polytools.G->matrix_fglm(polys, _ring, dst_order)
A:sympy.polys.polytools.modulus->sympy.polys.polyoptions.Modulus.preprocess(modulus)
A:sympy.polys.polytools.domain->factor_terms(f, radical=True).get_domain()
A:sympy.polys.polytools.(J, new)->factor_terms(f, radical=True).rep.exclude()
A:sympy.polys.polytools.dom->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens)
A:sympy.polys.polytools.j->factor_terms(f, radical=True)._gen_to_level(x)
A:sympy.polys.polytools.indices->set([])
A:sympy.polys.polytools.index->list(f.gens).index(gen)
A:sympy.polys.polytools.result->result.add(Poly._from_expr(term, opt)).add(Poly._from_expr(term, opt))
A:sympy.polys.polytools.(dom, rep)->construct_domain(f.as_dict(zero=True), field=field, composite=f.domain.is_Composite or None)
A:sympy.polys.polytools.(J, result)->factor_terms(f, radical=True).rep.terms_gcd()
A:sympy.polys.polytools.n->Poly(p, x, domain='EX').degree()
A:sympy.polys.polytools.(q, r)->Poly(f, greedy=False).div(G, auto=opt.auto)
A:sympy.polys.polytools.(dom, per, F, G)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.r->Poly._from_dict(dict(r), opt)
A:sympy.polys.polytools.q->Poly(f, greedy=False).exquo(G, auto=opt.auto)
A:sympy.polys.polytools.length->len(f.gens)
A:sympy.polys.polytools.i->len(f.gens)
A:sympy.polys.polytools.(coeff, result)->factor_terms(f, radical=True).rep.clear_denoms()
A:sympy.polys.polytools.(dom, per, f, g)->factor_terms(f, radical=True)._unify(g)
A:sympy.polys.polytools.f->factor_terms(f, radical=True)
A:sympy.polys.polytools.(a, f)->factor_terms(f, radical=True).clear_denoms(convert=True)
A:sympy.polys.polytools.(b, g)->g.__class__._from_poly(g, opt).__class__._from_poly(g, opt).clear_denoms(convert=True)
A:sympy.polys.polytools.(a_domain, [a])->construct_domain([a])
A:sympy.polys.polytools.new_domain->factor_terms(f, radical=True).get_domain().unify_with_symbols(a_domain, f.gens)
A:sympy.polys.polytools.a->factor_terms(f, radical=True).get_domain().unify_with_symbols(a_domain, f.gens).convert(a, a_domain)
A:sympy.polys.polytools.(s, h)->Poly(f, greedy=False).half_gcdex(G, auto=opt.auto)
A:sympy.polys.polytools.(s, t, h)->Poly(f, greedy=False).gcdex(G, auto=opt.auto)
A:sympy.polys.polytools.(result, R)->Poly(f, greedy=False).resultant(G, includePRS=includePRS)
A:sympy.polys.polytools.(h, cff, cfg)->Poly(f, greedy=False).cofactors(G)
A:sympy.polys.polytools.p->factor_terms(f, radical=True).rep.dom.convert(p)
A:sympy.polys.polytools.(cont, result)->Poly(f, greedy=False).primitive()
A:sympy.polys.polytools.(s, g, r)->Poly(f, greedy=False).sqf_norm()
A:sympy.polys.polytools.(coeff, factors)->_symbolic_factor_list(together(expr), opt, method)
A:sympy.polys.polytools.factors->factor_list(g.as_expr())
A:sympy.polys.polytools.eps->sympy.polys.polyoptions.build_options(gens, args).domain.convert(eps)
A:sympy.polys.polytools.inf->sympy.polys.polyoptions.build_options(gens, args).domain.convert(inf)
A:sympy.polys.polytools.sup->sympy.polys.polyoptions.build_options(gens, args).domain.convert(sup)
A:sympy.polys.polytools.steps->int(steps)
A:sympy.polys.polytools.(S, T)->factor_terms(f, radical=True).rep.refine_root(s, t, eps=eps, steps=steps, fast=fast)
A:sympy.polys.polytools.(re, im)->sympy.polys.polyoptions.build_options(gens, args).domain.convert(sup).as_real_imag()
A:sympy.polys.polytools.count->factor_terms(f, radical=True).rep.count_complex_roots(inf=inf, sup=sup)
A:sympy.polys.polytools.reals->sympy.polys.rootoftools.RootOf.real_roots(f, radicals=radicals)
A:sympy.polys.polytools.roots->list(map(sympify, sorted(roots, key=lambda r: (1 if r.imag else 0, r.real, r.imag))))
A:sympy.polys.polytools.fac->factor(p, *gens, **args)
A:sympy.polys.polytools.(a, b)->Mul(*factors).all_coeffs()
A:sympy.polys.polytools.N->sympify(n)
A:sympy.polys.polytools.t->Dummy('t')
A:sympy.polys.polytools.cp->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens).to_sympy(cp)
A:sympy.polys.polytools.cq->factor_terms(f, radical=True).rep.dom.unify(g.rep.dom, gens).to_sympy(cq)
A:sympy.polys.polytools.poly->poly.set_domain(opt.domain).rep.to_dict().set_domain(opt.domain).rep.to_dict()
A:sympy.polys.polytools.expr->sympify(expr)
A:sympy.polys.polytools.(monoms, coeffs)->list(zip(*list(rep.items())))
A:sympy.polys.polytools.(opt.domain, coeffs)->construct_domain(coeffs, opt=opt)
A:sympy.polys.polytools.coeffs->factor_terms(f, radical=True).rep.dom.convert(p).coeffs()
A:sympy.polys.polytools.(f, g)->factor_terms(f, radical=True).unify(g)
A:sympy.polys.polytools.exprs[i]->exprs[i].as_expr().as_expr()
A:sympy.polys.polytools.(reps, opt)->_parallel_dict_from_expr(exprs, opt)
A:sympy.polys.polytools.(opt.domain, coeffs_list)->construct_domain(coeffs_list, opt=opt)
A:sympy.polys.polytools.coeffs_list->list(map(domain.from_sympy, coeffs_list))
A:sympy.polys.polytools.opt.polys->bool(_polys)
A:sympy.polys.polytools.args->dict(args)
A:sympy.polys.polytools.(F, opt)->poly_from_expr(f, *gens, **args)
A:sympy.polys.polytools.degrees->Poly(f, greedy=False).degree_list()
A:sympy.polys.polytools.monom->Poly(f, greedy=False).LM(order=opt.order)
A:sympy.polys.polytools.(monom, coeff)->Poly(f, greedy=False).LT(order=opt.order)
A:sympy.polys.polytools.((F, G), opt)->parallel_poly_from_expr((p, q), *gens, **args)
A:sympy.polys.polytools.(domain, (a, b))->construct_domain(exc.exprs)
A:sympy.polys.polytools.h->Poly(f, greedy=False).invert(G, auto=opt.auto)
A:sympy.polys.polytools.includePRS->dict(args).pop('includePRS', False)
A:sympy.polys.polytools.seq->sympify(seq)
A:sympy.polys.polytools.(domain, numbers)->construct_domain(seq)
A:sympy.polys.polytools.(polys, opt)->parallel_poly_from_expr(F, *gens, **args)
A:sympy.polys.polytools.orig->sympify(f)
A:sympy.polys.polytools.new->factor_terms(f, radical=True).func(*[terms_gcd(a, *gens, **args) for a in f.args])
A:sympy.polys.polytools.clear->dict(args).pop('clear', True)
A:sympy.polys.polytools.(J, f)->Poly(f, greedy=False).terms_gcd()
A:sympy.polys.polytools.(denom, f)->factor_terms(f, radical=True).clear_denoms(convert=True)
A:sympy.polys.polytools.(coeff, f)->_keep_coeff(coeff, f.as_expr(), clear=False).as_coeff_Mul()
A:sympy.polys.polytools.term->Add(*terms)
A:sympy.polys.polytools.(poly, _)->_poly_from_expr(base, opt)
A:sympy.polys.polytools.func->getattr(poly, method + '_list')
A:sympy.polys.polytools.(_coeff, _factors)->func()
A:sympy.polys.polytools.(numer, denom)->together(expr).as_numer_denom()
A:sympy.polys.polytools.(cp, fp)->_symbolic_factor_list(numer, opt, method)
A:sympy.polys.polytools.(cq, fq)->_symbolic_factor_list(denom, opt, method)
A:sympy.polys.polytools._opt->sympy.polys.polyoptions.build_options(gens, args).clone(dict(expand=True))
A:sympy.polys.polytools.(f, _)->_poly_from_expr(f, _opt)
A:sympy.polys.polytools.fp->_sorted_factors(fp, method)
A:sympy.polys.polytools.fq->_sorted_factors(fq, method)
A:sympy.polys.polytools.lc->factor_terms(f, radical=True).LC()
A:sympy.polys.polytools.rescale1_x->simplify(coeffs[-2] / coeffs[-1])
A:sympy.polys.polytools.coeffx->simplify(coeffs[i] * rescale1_x ** (i + 1))
A:sympy.polys.polytools.rescale_x->simplify(1 / rescale1_x)
A:sympy.polys.polytools.f1->factor_terms(f, radical=True).monic()
A:sympy.polys.polytools.c->simplify(factors[0] * lc * r ** n)
A:sympy.polys.polytools.sifted->sift(f.args, lambda x: x.is_commutative and (not x.has(Piecewise)))
A:sympy.polys.polytools.f2->factor_terms(f, radical=True).monic().shift(alpha)
A:sympy.polys.polytools.p1->Poly(p, x, domain='EX')
A:sympy.polys.polytools.res->to_rational_coeffs(p1)
A:sympy.polys.polytools.r1->simplify(1 / r)
A:sympy.polys.polytools.muladd->factor_terms(f, radical=True).atoms(Mul, Add)
A:sympy.polys.polytools.intervals->dup_isolate_real_roots_list(polys, opt.domain, eps=eps, inf=inf, sup=sup, strict=strict, fast=fast)
A:sympy.polys.polytools.(p, q)->factor_terms(f, radical=True).as_numer_denom()
A:sympy.polys.polytools.pot->preorder_traversal(f)
A:sympy.polys.polytools.(c, P, Q)->Poly(f, greedy=False).cancel(G)
A:sympy.polys.polytools.(_ring, _)->xring(opt.gens, opt.domain, opt.order)
A:sympy.polys.polytools.polys[i]->_ring.from_dict(poly)
A:sympy.polys.polytools.(Q, r)->polys[0].div(polys[1:])
A:sympy.polys.polytools.ring->PolyRing(opt.gens, opt.domain, opt.order)
A:sympy.polys.polytools.obj._basis->tuple(basis)
A:sympy.polys.polytools.exponents->Monomial([0] * len(self.gens))
A:sympy.polys.polytools.monomial->poly.set_domain(opt.domain).rep.to_dict().set_domain(opt.domain).rep.to_dict().LM(order=order)
A:sympy.polys.polytools.dst_order->monomial_key(order)
A:sympy.polys.polytools.polys->list(self._basis)
A:sympy.polys.polytools.product->product.mul(Poly._from_expr(factor, opt)).mul(Poly._from_expr(factor, opt))
A:sympy.polys.polytools.factor->Mul(*factors)
sympy.GroebnerBasis(cls,F,*gens,**args)
sympy.GroebnerBasis.__eq__(self,other)
sympy.GroebnerBasis.__getitem__(self,item)
sympy.GroebnerBasis.__hash__(self)
sympy.GroebnerBasis.__iter__(self)
sympy.GroebnerBasis.__len__(self)
sympy.GroebnerBasis.__ne__(self,other)
sympy.GroebnerBasis._new(cls,basis,options)
sympy.GroebnerBasis.args(self)
sympy.GroebnerBasis.contains(self,poly)
sympy.GroebnerBasis.domain(self)
sympy.GroebnerBasis.exprs(self)
sympy.GroebnerBasis.fglm(self,order)
sympy.GroebnerBasis.gens(self)
sympy.GroebnerBasis.is_zero_dimensional(self)
sympy.GroebnerBasis.order(self)
sympy.GroebnerBasis.polys(self)
sympy.GroebnerBasis.reduce(self,expr,auto=True)
sympy.LC(f,*gens,**args)
sympy.LM(f,*gens,**args)
sympy.LT(f,*gens,**args)
sympy.Poly(cls,rep,*gens,**args)
sympy.Poly.EC(f,order=None)
sympy.Poly.EM(f,order=None)
sympy.Poly.ET(f,order=None)
sympy.Poly.LC(f,order=None)
sympy.Poly.LM(f,order=None)
sympy.Poly.LT(f,order=None)
sympy.Poly.TC(f)
sympy.Poly.__abs__(f)
sympy.Poly.__add__(f,g)
sympy.Poly.__div__(f,g)
sympy.Poly.__divmod__(f,g)
sympy.Poly.__eq__(f,g)
sympy.Poly.__floordiv__(f,g)
sympy.Poly.__hash__(self)
sympy.Poly.__mod__(f,g)
sympy.Poly.__mul__(f,g)
sympy.Poly.__ne__(f,g)
sympy.Poly.__neg__(f)
sympy.Poly.__nonzero__(f)
sympy.Poly.__pow__(f,n)
sympy.Poly.__radd__(f,g)
sympy.Poly.__rdiv__(f,g)
sympy.Poly.__rdivmod__(f,g)
sympy.Poly.__rfloordiv__(f,g)
sympy.Poly.__rmod__(f,g)
sympy.Poly.__rmul__(f,g)
sympy.Poly.__rsub__(f,g)
sympy.Poly.__sub__(f,g)
sympy.Poly._eval_subs(f,old,new)
sympy.Poly._from_dict(cls,rep,opt)
sympy.Poly._from_expr(cls,rep,opt)
sympy.Poly._from_list(cls,rep,opt)
sympy.Poly._from_poly(cls,rep,opt)
sympy.Poly._gen_to_level(f,gen)
sympy.Poly._hashable_content(self)
sympy.Poly._strict_eq(f,g)
sympy.Poly._unify(f,g)
sympy.Poly.abs(f)
sympy.Poly.add(f,g)
sympy.Poly.add_ground(f,coeff)
sympy.Poly.all_coeffs(f)
sympy.Poly.all_monoms(f)
sympy.Poly.all_roots(f,multiple=True,radicals=True)
sympy.Poly.all_terms(f)
sympy.Poly.args(self)
sympy.Poly.as_dict(f,native=False,zero=False)
sympy.Poly.as_expr(f,*gens)
sympy.Poly.as_list(f,native=False)
sympy.Poly.cancel(f,g,include=False)
sympy.Poly.clear_denoms(f,convert=False)
sympy.Poly.coeff(f,x,n=1,right=False)
sympy.Poly.coeff_monomial(f,monom)
sympy.Poly.coeffs(f,order=None)
sympy.Poly.cofactors(f,g)
sympy.Poly.compose(f,g)
sympy.Poly.content(f)
sympy.Poly.count_roots(f,inf=None,sup=None)
sympy.Poly.decompose(f)
sympy.Poly.deflate(f)
sympy.Poly.degree(f,gen=0)
sympy.Poly.degree_list(f)
sympy.Poly.diff(f,*specs)
sympy.Poly.discriminant(f)
sympy.Poly.dispersion(f,g=None)
sympy.Poly.dispersionset(f,g=None)
sympy.Poly.div(f,g,auto=True)
sympy.Poly.domain(self)
sympy.Poly.eject(f,*gens)
sympy.Poly.eq(f,g,strict=False)
sympy.Poly.eval(f,x,a=None,auto=True)
sympy.Poly.exclude(f)
sympy.Poly.exquo(f,g,auto=True)
sympy.Poly.exquo_ground(f,coeff)
sympy.Poly.factor_list(f)
sympy.Poly.factor_list_include(f)
sympy.Poly.free_symbols(self)
sympy.Poly.free_symbols_in_domain(self)
sympy.Poly.from_dict(cls,rep,*gens,**args)
sympy.Poly.from_expr(cls,rep,*gens,**args)
sympy.Poly.from_list(cls,rep,*gens,**args)
sympy.Poly.from_poly(cls,rep,*gens,**args)
sympy.Poly.gcd(f,g)
sympy.Poly.gcdex(f,g,auto=True)
sympy.Poly.gen(self)
sympy.Poly.get_domain(f)
sympy.Poly.get_modulus(f)
sympy.Poly.gff_list(f)
sympy.Poly.ground_roots(f)
sympy.Poly.half_gcdex(f,g,auto=True)
sympy.Poly.has_only_gens(f,*gens)
sympy.Poly.homogeneous_order(f)
sympy.Poly.homogenize(f,s)
sympy.Poly.inject(f,front=False)
sympy.Poly.integrate(f,*specs,**args)
sympy.Poly.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.Poly.invert(f,g,auto=True)
sympy.Poly.is_cyclotomic(f)
sympy.Poly.is_ground(f)
sympy.Poly.is_homogeneous(f)
sympy.Poly.is_irreducible(f)
sympy.Poly.is_linear(f)
sympy.Poly.is_monic(f)
sympy.Poly.is_monomial(f)
sympy.Poly.is_multivariate(f)
sympy.Poly.is_one(f)
sympy.Poly.is_primitive(f)
sympy.Poly.is_quadratic(f)
sympy.Poly.is_sqf(f)
sympy.Poly.is_univariate(f)
sympy.Poly.is_zero(f)
sympy.Poly.l1_norm(f)
sympy.Poly.lcm(f,g)
sympy.Poly.length(f)
sympy.Poly.lift(f)
sympy.Poly.ltrim(f,gen)
sympy.Poly.max_norm(f)
sympy.Poly.monic(f,auto=True)
sympy.Poly.monoms(f,order=None)
sympy.Poly.mul(f,g)
sympy.Poly.mul_ground(f,coeff)
sympy.Poly.ne(f,g,strict=False)
sympy.Poly.neg(f)
sympy.Poly.new(cls,rep,*gens)
sympy.Poly.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.Poly.nth(f,*N)
sympy.Poly.nth_power_roots_poly(f,n)
sympy.Poly.one(self)
sympy.Poly.pdiv(f,g)
sympy.Poly.per(f,rep,gens=None,remove=None)
sympy.Poly.pexquo(f,g)
sympy.Poly.pow(f,n)
sympy.Poly.pquo(f,g)
sympy.Poly.prem(f,g)
sympy.Poly.primitive(f)
sympy.Poly.quo(f,g,auto=True)
sympy.Poly.quo_ground(f,coeff)
sympy.Poly.rat_clear_denoms(f,g)
sympy.Poly.real_roots(f,multiple=True,radicals=True)
sympy.Poly.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.Poly.rem(f,g,auto=True)
sympy.Poly.reorder(f,*gens,**args)
sympy.Poly.replace(f,x,y=None)
sympy.Poly.resultant(f,g,includePRS=False)
sympy.Poly.retract(f,field=None)
sympy.Poly.revert(f,n)
sympy.Poly.root(f,index,radicals=True)
sympy.Poly.set_domain(f,domain)
sympy.Poly.set_modulus(f,modulus)
sympy.Poly.shift(f,a)
sympy.Poly.slice(f,x,m,n=None)
sympy.Poly.sqf_list(f,all=False)
sympy.Poly.sqf_list_include(f,all=False)
sympy.Poly.sqf_norm(f)
sympy.Poly.sqf_part(f)
sympy.Poly.sqr(f)
sympy.Poly.sturm(f,auto=True)
sympy.Poly.sub(f,g)
sympy.Poly.sub_ground(f,coeff)
sympy.Poly.subresultants(f,g)
sympy.Poly.terms(f,order=None)
sympy.Poly.terms_gcd(f)
sympy.Poly.termwise(f,func,*gens,**args)
sympy.Poly.to_exact(f)
sympy.Poly.to_field(f)
sympy.Poly.to_ring(f)
sympy.Poly.total_degree(f)
sympy.Poly.trunc(f,p)
sympy.Poly.unify(f,g)
sympy.Poly.unit(self)
sympy.Poly.zero(self)
sympy.PurePoly(Poly)
sympy.PurePoly.__eq__(f,g)
sympy.PurePoly.__hash__(self)
sympy.PurePoly._hashable_content(self)
sympy.PurePoly._strict_eq(f,g)
sympy.PurePoly._unify(f,g)
sympy.PurePoly.free_symbols(self)
sympy._factors_product(factors)
sympy._generic_factor(expr,gens,args,method)
sympy._generic_factor_list(expr,gens,args,method)
sympy._parallel_poly_from_expr(exprs,opt)
sympy._poly_from_expr(expr,opt)
sympy._sorted_factors(factors,method)
sympy._symbolic_factor(expr,opt,method)
sympy._symbolic_factor_list(expr,opt,method)
sympy._torational_factor_list(p,x)
sympy._update_args(args,key,value)
sympy.cancel(f,*gens,**args)
sympy.cofactors(f,g,*gens,**args)
sympy.compose(f,g,*gens,**args)
sympy.content(f,*gens,**args)
sympy.count_roots(f,inf=None,sup=None)
sympy.decompose(f,*gens,**args)
sympy.degree(f,*gens,**args)
sympy.degree_list(f,*gens,**args)
sympy.discriminant(f,*gens,**args)
sympy.div(f,g,*gens,**args)
sympy.exquo(f,g,*gens,**args)
sympy.factor(f,*gens,**args)
sympy.factor_list(f,*gens,**args)
sympy.gcd(f,g=None,*gens,**args)
sympy.gcd_list(seq,*gens,**args)
sympy.gcdex(f,g,*gens,**args)
sympy.gff(f,*gens,**args)
sympy.gff_list(f,*gens,**args)
sympy.groebner(F,*gens,**args)
sympy.ground_roots(f,*gens,**args)
sympy.half_gcdex(f,g,*gens,**args)
sympy.intervals(F,all=False,eps=None,inf=None,sup=None,strict=False,fast=False,sqf=False)
sympy.invert(f,g,*gens,**args)
sympy.is_zero_dimensional(F,*gens,**args)
sympy.lcm(f,g=None,*gens,**args)
sympy.lcm_list(seq,*gens,**args)
sympy.monic(f,*gens,**args)
sympy.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.nth_power_roots_poly(f,n,*gens,**args)
sympy.parallel_poly_from_expr(exprs,*gens,**args)
sympy.pdiv(f,g,*gens,**args)
sympy.pexquo(f,g,*gens,**args)
sympy.poly(expr,*gens,**args)
sympy.poly_from_expr(expr,*gens,**args)
sympy.polys.polytools.GroebnerBasis(cls,F,*gens,**args)
sympy.polys.polytools.GroebnerBasis.__eq__(self,other)
sympy.polys.polytools.GroebnerBasis.__getitem__(self,item)
sympy.polys.polytools.GroebnerBasis.__hash__(self)
sympy.polys.polytools.GroebnerBasis.__iter__(self)
sympy.polys.polytools.GroebnerBasis.__len__(self)
sympy.polys.polytools.GroebnerBasis.__ne__(self,other)
sympy.polys.polytools.GroebnerBasis.__new__(cls,F,*gens,**args)
sympy.polys.polytools.GroebnerBasis._new(cls,basis,options)
sympy.polys.polytools.GroebnerBasis.args(self)
sympy.polys.polytools.GroebnerBasis.contains(self,poly)
sympy.polys.polytools.GroebnerBasis.domain(self)
sympy.polys.polytools.GroebnerBasis.exprs(self)
sympy.polys.polytools.GroebnerBasis.fglm(self,order)
sympy.polys.polytools.GroebnerBasis.gens(self)
sympy.polys.polytools.GroebnerBasis.is_zero_dimensional(self)
sympy.polys.polytools.GroebnerBasis.order(self)
sympy.polys.polytools.GroebnerBasis.polys(self)
sympy.polys.polytools.GroebnerBasis.reduce(self,expr,auto=True)
sympy.polys.polytools.LC(f,*gens,**args)
sympy.polys.polytools.LM(f,*gens,**args)
sympy.polys.polytools.LT(f,*gens,**args)
sympy.polys.polytools.Poly(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.EC(f,order=None)
sympy.polys.polytools.Poly.EM(f,order=None)
sympy.polys.polytools.Poly.ET(f,order=None)
sympy.polys.polytools.Poly.LC(f,order=None)
sympy.polys.polytools.Poly.LM(f,order=None)
sympy.polys.polytools.Poly.LT(f,order=None)
sympy.polys.polytools.Poly.TC(f)
sympy.polys.polytools.Poly.__abs__(f)
sympy.polys.polytools.Poly.__add__(f,g)
sympy.polys.polytools.Poly.__div__(f,g)
sympy.polys.polytools.Poly.__divmod__(f,g)
sympy.polys.polytools.Poly.__eq__(f,g)
sympy.polys.polytools.Poly.__floordiv__(f,g)
sympy.polys.polytools.Poly.__hash__(self)
sympy.polys.polytools.Poly.__mod__(f,g)
sympy.polys.polytools.Poly.__mul__(f,g)
sympy.polys.polytools.Poly.__ne__(f,g)
sympy.polys.polytools.Poly.__neg__(f)
sympy.polys.polytools.Poly.__new__(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.__nonzero__(f)
sympy.polys.polytools.Poly.__pow__(f,n)
sympy.polys.polytools.Poly.__radd__(f,g)
sympy.polys.polytools.Poly.__rdiv__(f,g)
sympy.polys.polytools.Poly.__rdivmod__(f,g)
sympy.polys.polytools.Poly.__rfloordiv__(f,g)
sympy.polys.polytools.Poly.__rmod__(f,g)
sympy.polys.polytools.Poly.__rmul__(f,g)
sympy.polys.polytools.Poly.__rsub__(f,g)
sympy.polys.polytools.Poly.__sub__(f,g)
sympy.polys.polytools.Poly._eval_subs(f,old,new)
sympy.polys.polytools.Poly._from_dict(cls,rep,opt)
sympy.polys.polytools.Poly._from_expr(cls,rep,opt)
sympy.polys.polytools.Poly._from_list(cls,rep,opt)
sympy.polys.polytools.Poly._from_poly(cls,rep,opt)
sympy.polys.polytools.Poly._gen_to_level(f,gen)
sympy.polys.polytools.Poly._hashable_content(self)
sympy.polys.polytools.Poly._strict_eq(f,g)
sympy.polys.polytools.Poly._unify(f,g)
sympy.polys.polytools.Poly.abs(f)
sympy.polys.polytools.Poly.add(f,g)
sympy.polys.polytools.Poly.add_ground(f,coeff)
sympy.polys.polytools.Poly.all_coeffs(f)
sympy.polys.polytools.Poly.all_monoms(f)
sympy.polys.polytools.Poly.all_roots(f,multiple=True,radicals=True)
sympy.polys.polytools.Poly.all_terms(f)
sympy.polys.polytools.Poly.args(self)
sympy.polys.polytools.Poly.as_dict(f,native=False,zero=False)
sympy.polys.polytools.Poly.as_expr(f,*gens)
sympy.polys.polytools.Poly.as_list(f,native=False)
sympy.polys.polytools.Poly.cancel(f,g,include=False)
sympy.polys.polytools.Poly.clear_denoms(f,convert=False)
sympy.polys.polytools.Poly.coeff(f,x,n=1,right=False)
sympy.polys.polytools.Poly.coeff_monomial(f,monom)
sympy.polys.polytools.Poly.coeffs(f,order=None)
sympy.polys.polytools.Poly.cofactors(f,g)
sympy.polys.polytools.Poly.compose(f,g)
sympy.polys.polytools.Poly.content(f)
sympy.polys.polytools.Poly.count_roots(f,inf=None,sup=None)
sympy.polys.polytools.Poly.decompose(f)
sympy.polys.polytools.Poly.deflate(f)
sympy.polys.polytools.Poly.degree(f,gen=0)
sympy.polys.polytools.Poly.degree_list(f)
sympy.polys.polytools.Poly.diff(f,*specs)
sympy.polys.polytools.Poly.discriminant(f)
sympy.polys.polytools.Poly.dispersion(f,g=None)
sympy.polys.polytools.Poly.dispersionset(f,g=None)
sympy.polys.polytools.Poly.div(f,g,auto=True)
sympy.polys.polytools.Poly.domain(self)
sympy.polys.polytools.Poly.eject(f,*gens)
sympy.polys.polytools.Poly.eq(f,g,strict=False)
sympy.polys.polytools.Poly.eval(f,x,a=None,auto=True)
sympy.polys.polytools.Poly.exclude(f)
sympy.polys.polytools.Poly.exquo(f,g,auto=True)
sympy.polys.polytools.Poly.exquo_ground(f,coeff)
sympy.polys.polytools.Poly.factor_list(f)
sympy.polys.polytools.Poly.factor_list_include(f)
sympy.polys.polytools.Poly.free_symbols(self)
sympy.polys.polytools.Poly.free_symbols_in_domain(self)
sympy.polys.polytools.Poly.from_dict(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_expr(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_list(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.from_poly(cls,rep,*gens,**args)
sympy.polys.polytools.Poly.gcd(f,g)
sympy.polys.polytools.Poly.gcdex(f,g,auto=True)
sympy.polys.polytools.Poly.gen(self)
sympy.polys.polytools.Poly.get_domain(f)
sympy.polys.polytools.Poly.get_modulus(f)
sympy.polys.polytools.Poly.gff_list(f)
sympy.polys.polytools.Poly.ground_roots(f)
sympy.polys.polytools.Poly.half_gcdex(f,g,auto=True)
sympy.polys.polytools.Poly.has_only_gens(f,*gens)
sympy.polys.polytools.Poly.homogeneous_order(f)
sympy.polys.polytools.Poly.homogenize(f,s)
sympy.polys.polytools.Poly.inject(f,front=False)
sympy.polys.polytools.Poly.integrate(f,*specs,**args)
sympy.polys.polytools.Poly.intervals(f,all=False,eps=None,inf=None,sup=None,fast=False,sqf=False)
sympy.polys.polytools.Poly.invert(f,g,auto=True)
sympy.polys.polytools.Poly.is_cyclotomic(f)
sympy.polys.polytools.Poly.is_ground(f)
sympy.polys.polytools.Poly.is_homogeneous(f)
sympy.polys.polytools.Poly.is_irreducible(f)
sympy.polys.polytools.Poly.is_linear(f)
sympy.polys.polytools.Poly.is_monic(f)
sympy.polys.polytools.Poly.is_monomial(f)
sympy.polys.polytools.Poly.is_multivariate(f)
sympy.polys.polytools.Poly.is_one(f)
sympy.polys.polytools.Poly.is_primitive(f)
sympy.polys.polytools.Poly.is_quadratic(f)
sympy.polys.polytools.Poly.is_sqf(f)
sympy.polys.polytools.Poly.is_univariate(f)
sympy.polys.polytools.Poly.is_zero(f)
sympy.polys.polytools.Poly.l1_norm(f)
sympy.polys.polytools.Poly.lcm(f,g)
sympy.polys.polytools.Poly.length(f)
sympy.polys.polytools.Poly.lift(f)
sympy.polys.polytools.Poly.ltrim(f,gen)
sympy.polys.polytools.Poly.max_norm(f)
sympy.polys.polytools.Poly.monic(f,auto=True)
sympy.polys.polytools.Poly.monoms(f,order=None)
sympy.polys.polytools.Poly.mul(f,g)
sympy.polys.polytools.Poly.mul_ground(f,coeff)
sympy.polys.polytools.Poly.ne(f,g,strict=False)
sympy.polys.polytools.Poly.neg(f)
sympy.polys.polytools.Poly.new(cls,rep,*gens)
sympy.polys.polytools.Poly.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.polys.polytools.Poly.nth(f,*N)
sympy.polys.polytools.Poly.nth_power_roots_poly(f,n)
sympy.polys.polytools.Poly.one(self)
sympy.polys.polytools.Poly.pdiv(f,g)
sympy.polys.polytools.Poly.per(f,rep,gens=None,remove=None)
sympy.polys.polytools.Poly.pexquo(f,g)
sympy.polys.polytools.Poly.pow(f,n)
sympy.polys.polytools.Poly.pquo(f,g)
sympy.polys.polytools.Poly.prem(f,g)
sympy.polys.polytools.Poly.primitive(f)
sympy.polys.polytools.Poly.quo(f,g,auto=True)
sympy.polys.polytools.Poly.quo_ground(f,coeff)
sympy.polys.polytools.Poly.rat_clear_denoms(f,g)
sympy.polys.polytools.Poly.real_roots(f,multiple=True,radicals=True)
sympy.polys.polytools.Poly.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.polys.polytools.Poly.rem(f,g,auto=True)
sympy.polys.polytools.Poly.reorder(f,*gens,**args)
sympy.polys.polytools.Poly.replace(f,x,y=None)
sympy.polys.polytools.Poly.resultant(f,g,includePRS=False)
sympy.polys.polytools.Poly.retract(f,field=None)
sympy.polys.polytools.Poly.revert(f,n)
sympy.polys.polytools.Poly.root(f,index,radicals=True)
sympy.polys.polytools.Poly.set_domain(f,domain)
sympy.polys.polytools.Poly.set_modulus(f,modulus)
sympy.polys.polytools.Poly.shift(f,a)
sympy.polys.polytools.Poly.slice(f,x,m,n=None)
sympy.polys.polytools.Poly.sqf_list(f,all=False)
sympy.polys.polytools.Poly.sqf_list_include(f,all=False)
sympy.polys.polytools.Poly.sqf_norm(f)
sympy.polys.polytools.Poly.sqf_part(f)
sympy.polys.polytools.Poly.sqr(f)
sympy.polys.polytools.Poly.sturm(f,auto=True)
sympy.polys.polytools.Poly.sub(f,g)
sympy.polys.polytools.Poly.sub_ground(f,coeff)
sympy.polys.polytools.Poly.subresultants(f,g)
sympy.polys.polytools.Poly.terms(f,order=None)
sympy.polys.polytools.Poly.terms_gcd(f)
sympy.polys.polytools.Poly.termwise(f,func,*gens,**args)
sympy.polys.polytools.Poly.to_exact(f)
sympy.polys.polytools.Poly.to_field(f)
sympy.polys.polytools.Poly.to_ring(f)
sympy.polys.polytools.Poly.total_degree(f)
sympy.polys.polytools.Poly.trunc(f,p)
sympy.polys.polytools.Poly.unify(f,g)
sympy.polys.polytools.Poly.unit(self)
sympy.polys.polytools.Poly.zero(self)
sympy.polys.polytools.PurePoly(Poly)
sympy.polys.polytools.PurePoly.__eq__(f,g)
sympy.polys.polytools.PurePoly.__hash__(self)
sympy.polys.polytools.PurePoly._hashable_content(self)
sympy.polys.polytools.PurePoly._strict_eq(f,g)
sympy.polys.polytools.PurePoly._unify(f,g)
sympy.polys.polytools.PurePoly.free_symbols(self)
sympy.polys.polytools._factors_product(factors)
sympy.polys.polytools._generic_factor(expr,gens,args,method)
sympy.polys.polytools._generic_factor_list(expr,gens,args,method)
sympy.polys.polytools._parallel_poly_from_expr(exprs,opt)
sympy.polys.polytools._poly_from_expr(expr,opt)
sympy.polys.polytools._sorted_factors(factors,method)
sympy.polys.polytools._symbolic_factor(expr,opt,method)
sympy.polys.polytools._symbolic_factor_list(expr,opt,method)
sympy.polys.polytools._torational_factor_list(p,x)
sympy.polys.polytools._update_args(args,key,value)
sympy.polys.polytools.cancel(f,*gens,**args)
sympy.polys.polytools.cofactors(f,g,*gens,**args)
sympy.polys.polytools.compose(f,g,*gens,**args)
sympy.polys.polytools.content(f,*gens,**args)
sympy.polys.polytools.count_roots(f,inf=None,sup=None)
sympy.polys.polytools.decompose(f,*gens,**args)
sympy.polys.polytools.degree(f,*gens,**args)
sympy.polys.polytools.degree_list(f,*gens,**args)
sympy.polys.polytools.discriminant(f,*gens,**args)
sympy.polys.polytools.div(f,g,*gens,**args)
sympy.polys.polytools.exquo(f,g,*gens,**args)
sympy.polys.polytools.factor(f,*gens,**args)
sympy.polys.polytools.factor_list(f,*gens,**args)
sympy.polys.polytools.gcd(f,g=None,*gens,**args)
sympy.polys.polytools.gcd_list(seq,*gens,**args)
sympy.polys.polytools.gcdex(f,g,*gens,**args)
sympy.polys.polytools.gff(f,*gens,**args)
sympy.polys.polytools.gff_list(f,*gens,**args)
sympy.polys.polytools.groebner(F,*gens,**args)
sympy.polys.polytools.ground_roots(f,*gens,**args)
sympy.polys.polytools.half_gcdex(f,g,*gens,**args)
sympy.polys.polytools.intervals(F,all=False,eps=None,inf=None,sup=None,strict=False,fast=False,sqf=False)
sympy.polys.polytools.invert(f,g,*gens,**args)
sympy.polys.polytools.is_zero_dimensional(F,*gens,**args)
sympy.polys.polytools.lcm(f,g=None,*gens,**args)
sympy.polys.polytools.lcm_list(seq,*gens,**args)
sympy.polys.polytools.monic(f,*gens,**args)
sympy.polys.polytools.nroots(f,n=15,maxsteps=50,cleanup=True)
sympy.polys.polytools.nth_power_roots_poly(f,n,*gens,**args)
sympy.polys.polytools.parallel_poly_from_expr(exprs,*gens,**args)
sympy.polys.polytools.pdiv(f,g,*gens,**args)
sympy.polys.polytools.pexquo(f,g,*gens,**args)
sympy.polys.polytools.poly(expr,*gens,**args)
sympy.polys.polytools.poly_from_expr(expr,*gens,**args)
sympy.polys.polytools.pquo(f,g,*gens,**args)
sympy.polys.polytools.prem(f,g,*gens,**args)
sympy.polys.polytools.primitive(f,*gens,**args)
sympy.polys.polytools.quo(f,g,*gens,**args)
sympy.polys.polytools.real_roots(f,multiple=True)
sympy.polys.polytools.reduced(f,G,*gens,**args)
sympy.polys.polytools.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.polys.polytools.rem(f,g,*gens,**args)
sympy.polys.polytools.resultant(f,g,*gens,**args)
sympy.polys.polytools.sqf(f,*gens,**args)
sympy.polys.polytools.sqf_list(f,*gens,**args)
sympy.polys.polytools.sqf_norm(f,*gens,**args)
sympy.polys.polytools.sqf_part(f,*gens,**args)
sympy.polys.polytools.sturm(f,*gens,**args)
sympy.polys.polytools.subresultants(f,g,*gens,**args)
sympy.polys.polytools.terms_gcd(f,*gens,**args)
sympy.polys.polytools.to_rational_coeffs(f)
sympy.polys.polytools.trunc(f,p,*gens,**args)
sympy.pquo(f,g,*gens,**args)
sympy.prem(f,g,*gens,**args)
sympy.primitive(f,*gens,**args)
sympy.quo(f,g,*gens,**args)
sympy.real_roots(f,multiple=True)
sympy.reduced(f,G,*gens,**args)
sympy.refine_root(f,s,t,eps=None,steps=None,fast=False,check_sqf=False)
sympy.rem(f,g,*gens,**args)
sympy.resultant(f,g,*gens,**args)
sympy.sqf(f,*gens,**args)
sympy.sqf_list(f,*gens,**args)
sympy.sqf_norm(f,*gens,**args)
sympy.sqf_part(f,*gens,**args)
sympy.sturm(f,*gens,**args)
sympy.subresultants(f,g,*gens,**args)
sympy.terms_gcd(f,*gens,**args)
sympy.to_rational_coeffs(f)
sympy.trunc(f,p,*gens,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/distributedmodules.py----------------------------------------
A:sympy.polys.distributedmodules.h->NF(sdm_spoly(f, g, O, K), S, O, K)
A:sympy.polys.distributedmodules.(dics, gens)->parallel_dict_from_expr(sympify(vec), **opts)
A:sympy.polys.distributedmodules.dic[(i,) + k]->K.convert(v)
A:sympy.polys.distributedmodules.dic->sdm_to_dict(f)
A:sympy.polys.distributedmodules.LM1->sdm_LM(f)
A:sympy.polys.distributedmodules.LM2->sdm_LM(g)
A:sympy.polys.distributedmodules.lcm->monomial_lcm(LM1, LM2)
A:sympy.polys.distributedmodules.m1->monomial_div(lcm, LM1)
A:sympy.polys.distributedmodules.m2->monomial_div(lcm, LM2)
A:sympy.polys.distributedmodules.c->K.quo(-sdm_LC(f, K), sdm_LC(g, K))
A:sympy.polys.distributedmodules.r1->sdm_add(sdm_mul_term(f, (m1, K.one), O, K), sdm_mul_term(g, (m2, c), O, K), O, K)
A:sympy.polys.distributedmodules.r2->sdm_add(sdm_mul_term(phantom[0], (m1, K.one), O, K), sdm_mul_term(phantom[1], (m2, c), O, K), O, K)
A:sympy.polys.distributedmodules.T->list(G)
A:sympy.polys.distributedmodules.Tp->repeat([])
A:sympy.polys.distributedmodules.(g, _, gp)->min(Th, key=lambda x: x[1])
A:sympy.polys.distributedmodules.(h, hp)->sdm_spoly(h, g, O, K, phantom=(hp, gp))
A:sympy.polys.distributedmodules.(g, gp)->next(((g, gp) for (g, gp) in zip(T, Tp) if sdm_monomial_divides(sdm_LM(g), sdm_LM(h))))
A:sympy.polys.distributedmodules.g->sdm_nf_buchberger(g, G, O, K)
A:sympy.polys.distributedmodules.LMi->sdm_LM(S[i])
A:sympy.polys.distributedmodules.LMj->sdm_LM(S[j])
A:sympy.polys.distributedmodules.k->len(S)
A:sympy.polys.distributedmodules.LMf->sdm_LM(f)
A:sympy.polys.distributedmodules.tik->sdm_monomial_lcm(LMf, sdm_LM(S[i]))
A:sympy.polys.distributedmodules.tjk->sdm_monomial_lcm(LMf, sdm_LM(S[j]))
A:sympy.polys.distributedmodules.remove->set()
A:sympy.polys.distributedmodules.P->update(h, Ssugar(i, j), P)
A:sympy.polys.distributedmodules.(i, j, s, t)->update(h, Ssugar(i, j), P).pop()
A:sympy.polys.distributedmodules.(sp, coeff)->sdm_spoly(f, g, O, K, phantom=(coefficients[i], coefficients[j]))
A:sympy.polys.distributedmodules.(h, hcoeff)->NF(sp, S, O, K, phantom=(coeff, coefficients))
A:sympy.polys.distributedmodules.S->set(((tuple(f), i) for (i, f) in enumerate(S)))
A:sympy.polys.distributedmodules.A->sdm_LM(a)
A:sympy.polys.distributedmodules.B->sdm_LM(b)
A:sympy.polys.distributedmodules.L->sorted(((list(f), i) for (f, i) in S), key=lambda p: O(sdm_LM(p[0])), reverse=True)
sympy.distributedmodules.sdm_LC(f,K)
sympy.distributedmodules.sdm_LM(f)
sympy.distributedmodules.sdm_LT(f)
sympy.distributedmodules.sdm_add(f,g,O,K)
sympy.distributedmodules.sdm_deg(f)
sympy.distributedmodules.sdm_ecart(f)
sympy.distributedmodules.sdm_from_dict(d,O)
sympy.distributedmodules.sdm_from_vector(vec,O,K,**opts)
sympy.distributedmodules.sdm_groebner(G,NF,O,K,extended=False)
sympy.distributedmodules.sdm_monomial_deg(M)
sympy.distributedmodules.sdm_monomial_divides(A,B)
sympy.distributedmodules.sdm_monomial_lcm(A,B)
sympy.distributedmodules.sdm_monomial_mul(M,X)
sympy.distributedmodules.sdm_mul_term(f,term,O,K)
sympy.distributedmodules.sdm_nf_buchberger(f,G,O,K,phantom=None)
sympy.distributedmodules.sdm_nf_buchberger_reduced(f,G,O,K)
sympy.distributedmodules.sdm_nf_mora(f,G,O,K,phantom=None)
sympy.distributedmodules.sdm_sort(f,O)
sympy.distributedmodules.sdm_spoly(f,g,O,K,phantom=None)
sympy.distributedmodules.sdm_strip(f)
sympy.distributedmodules.sdm_to_dict(f)
sympy.distributedmodules.sdm_to_vector(f,gens,K,n=None)
sympy.distributedmodules.sdm_zero()
sympy.polys.distributedmodules.sdm_LC(f,K)
sympy.polys.distributedmodules.sdm_LM(f)
sympy.polys.distributedmodules.sdm_LT(f)
sympy.polys.distributedmodules.sdm_add(f,g,O,K)
sympy.polys.distributedmodules.sdm_deg(f)
sympy.polys.distributedmodules.sdm_ecart(f)
sympy.polys.distributedmodules.sdm_from_dict(d,O)
sympy.polys.distributedmodules.sdm_from_vector(vec,O,K,**opts)
sympy.polys.distributedmodules.sdm_groebner(G,NF,O,K,extended=False)
sympy.polys.distributedmodules.sdm_monomial_deg(M)
sympy.polys.distributedmodules.sdm_monomial_divides(A,B)
sympy.polys.distributedmodules.sdm_monomial_lcm(A,B)
sympy.polys.distributedmodules.sdm_monomial_mul(M,X)
sympy.polys.distributedmodules.sdm_mul_term(f,term,O,K)
sympy.polys.distributedmodules.sdm_nf_buchberger(f,G,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_nf_buchberger_reduced(f,G,O,K)
sympy.polys.distributedmodules.sdm_nf_mora(f,G,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_sort(f,O)
sympy.polys.distributedmodules.sdm_spoly(f,g,O,K,phantom=None)
sympy.polys.distributedmodules.sdm_strip(f)
sympy.polys.distributedmodules.sdm_to_dict(f)
sympy.polys.distributedmodules.sdm_to_vector(f,gens,K,n=None)
sympy.polys.distributedmodules.sdm_zero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/rootoftools.py----------------------------------------
A:sympy.polys.rootoftools.v->mathlog(i, 2)
A:sympy.polys.rootoftools.x->sympify(x)
A:sympy.polys.rootoftools.index->int(index)
A:sympy.polys.rootoftools.poly->PurePoly(expr, x, greedy=False)
A:sympy.polys.rootoftools.degree->PurePoly(expr, x, greedy=False).degree()
A:sympy.polys.rootoftools.dom->PurePoly(expr, x, greedy=False).get_domain()
A:sympy.polys.rootoftools.roots->symbols('r:%d' % poly.degree())
A:sympy.polys.rootoftools.(coeff, poly)->cls._transform(expr, x)
A:sympy.polys.rootoftools.root->findroot(func, x0)
A:sympy.polys.rootoftools.obj->sympy.core.Expr.__new__(cls)
A:sympy.polys.rootoftools.obj.poly->PurePoly(poly)
A:sympy.polys.rootoftools._reals_cache[factor]real_part->dup_isolate_real_roots_sqf(factor.rep.rep, factor.rep.dom, blackbox=True)
A:sympy.polys.rootoftools._complexes_cache[factor]complex_part->dup_isolate_complex_roots_sqf(factor.rep.rep, factor.rep.dom, blackbox=True)
A:sympy.polys.rootoftools.real_part->cls._get_reals_sqf(factor)
A:sympy.polys.rootoftools.complex_part->cls._get_complexes_sqf(factor)
A:sympy.polys.rootoftools.(u, v)->u._inner_refine().refine_disjoint(v)
A:sympy.polys.rootoftools.reals->cls._reals_sorted(reals)
A:sympy.polys.rootoftools.deg->PurePoly(expr, x, greedy=False).degree()
A:sympy.polys.rootoftools.sifted->sift(complexes, lambda c: c[1])
A:sympy.polys.rootoftools.isift->sift(sifted[f], lambda c: is_imag(c))
A:sympy.polys.rootoftools.mixed->sift(sifted[f], lambda c: is_imag(c)).pop(None, [])
A:sympy.polys.rootoftools.u->u._inner_refine()._inner_refine()
A:sympy.polys.rootoftools.uu->set([(u.ax, u.bx) for (u, _, _) in complexes])
A:sympy.polys.rootoftools.(imag, complexes)->cls._separate_imaginary_from_complex(complexes)
A:sympy.polys.rootoftools.complexes->cls._complexes_sorted(complexes)
A:sympy.polys.rootoftools.r->_root(abs(f.TC() / f.LC()), f.degree())
A:sympy.polys.rootoftools.imag->sorted(imag, key=lambda c: key(c))
A:sympy.polys.rootoftools.(_, factors)->PurePoly(expr, x, greedy=False).factor_list()
A:sympy.polys.rootoftools.reals_count->len(_reals_cache[self.poly])
A:sympy.polys.rootoftools.complexes_count->cls._count_roots(complexes)
A:sympy.polys.rootoftools.func->Lambda(var, expr.diff(x))
A:sympy.polys.rootoftools.interval->self._get_interval()
A:sympy.polys.rootoftools.x0->mpc(*map(str, interval.center))
A:sympy.polys.rootoftools.a->sympify(a)
A:sympy.polys.rootoftools.b->sympify(b)
A:sympy.polys.rootoftools.ax->mpf(str(interval.ax))
A:sympy.polys.rootoftools.bx->mpf(str(interval.bx))
A:sympy.polys.rootoftools.ay->mpf(str(interval.ay))
A:sympy.polys.rootoftools.by->mpf(str(interval.by))
A:sympy.polys.rootoftools.expr->expr.subs(var, coeff * var).subs(var, coeff * var)
A:sympy.polys.rootoftools.(add_const, expr)->expr.subs(var, coeff * var).subs(var, coeff * var).as_independent(var)
A:sympy.polys.rootoftools.(mul_const, expr)->expr.subs(var, coeff * var).subs(var, coeff * var).as_independent(var)
A:sympy.polys.rootoftools.rational->cls._is_func_rational(poly, func)
A:sympy.polys.rootoftools.term->cls._rational_case(poly, func)
A:sympy.polys.rootoftools.f->sum((expr.subs(var, r) for r in roots))
A:sympy.polys.rootoftools.(p, q)->together(f).as_numer_denom()
A:sympy.polys.rootoftools.p->Poly(dict(zip(p_monom, p_coeff)), *p.gens).as_expr()
A:sympy.polys.rootoftools.q->Poly(dict(zip(q_monom, q_coeff)), *q.gens).as_expr()
A:sympy.polys.rootoftools.(p_monom, p_coeff)->zip(*p.terms())
A:sympy.polys.rootoftools.(q_monom, q_coeff)->zip(*q.terms())
A:sympy.polys.rootoftools.(coeffs, mapping)->symmetrize(p_coeff + q_coeff, formal=True)
A:sympy.polys.rootoftools.coeffs[i]->coeff.subs(values)
A:sympy.polys.rootoftools.n->len(p_coeff)
A:sympy.polys.rootoftools._roots->self.poly.nroots(n=prec_to_dps(prec))
A:sympy.polys.rootoftools.fa->f(a)
A:sympy.polys.rootoftools.fb->f(b)
A:sympy.polys.rootoftools.fc->f(c)
sympy.RootOf(cls,f,x,index=None,radicals=True,expand=True)
sympy.RootOf._all_roots(cls,poly)
sympy.RootOf._complexes_index(cls,complexes,index)
sympy.RootOf._complexes_sorted(cls,complexes)
sympy.RootOf._count_roots(cls,roots)
sympy.RootOf._eval_evalf(self,prec)
sympy.RootOf._eval_is_real(self)
sympy.RootOf._get_complexes(cls,factors)
sympy.RootOf._get_complexes_sqf(cls,factor)
sympy.RootOf._get_interval(self)
sympy.RootOf._get_reals(cls,factors)
sympy.RootOf._get_reals_sqf(cls,factor)
sympy.RootOf._get_roots(cls,method,poly,radicals)
sympy.RootOf._hashable_content(self)
sympy.RootOf._indexed_root(cls,poly,index)
sympy.RootOf._new(cls,poly,index)
sympy.RootOf._postprocess_root(cls,root,radicals)
sympy.RootOf._preprocess_roots(cls,poly)
sympy.RootOf._real_roots(cls,poly)
sympy.RootOf._reals_index(cls,reals,index)
sympy.RootOf._reals_sorted(cls,reals)
sympy.RootOf._refine_complexes(cls,complexes)
sympy.RootOf._roots_trivial(cls,poly,radicals)
sympy.RootOf._separate_imaginary_from_complex(cls,complexes)
sympy.RootOf._set_interval(self,interval)
sympy.RootOf.all_roots(cls,poly,radicals=True)
sympy.RootOf.args(self)
sympy.RootOf.eval_rational(self,tol)
sympy.RootOf.expr(self)
sympy.RootOf.free_symbols(self)
sympy.RootOf.real_roots(cls,poly,radicals=True)
sympy.RootSum(cls,expr,func=None,x=None,auto=True,quadratic=False)
sympy.RootSum._eval_derivative(self,x)
sympy.RootSum._eval_evalf(self,prec)
sympy.RootSum._hashable_content(self)
sympy.RootSum._is_func_rational(cls,poly,func)
sympy.RootSum._new(cls,poly,func,auto=True)
sympy.RootSum._rational_case(cls,poly,func)
sympy.RootSum._transform(cls,expr,x)
sympy.RootSum.args(self)
sympy.RootSum.doit(self,**hints)
sympy.RootSum.expr(self)
sympy.RootSum.free_symbols(self)
sympy.RootSum.is_commutative(self)
sympy.RootSum.new(cls,poly,func,auto=True)
sympy._ispow2(i)
sympy.bisect(f,a,b,tol)
sympy.polys.rootoftools.RootOf(cls,f,x,index=None,radicals=True,expand=True)
sympy.polys.rootoftools.RootOf.__new__(cls,f,x,index=None,radicals=True,expand=True)
sympy.polys.rootoftools.RootOf._all_roots(cls,poly)
sympy.polys.rootoftools.RootOf._complexes_index(cls,complexes,index)
sympy.polys.rootoftools.RootOf._complexes_sorted(cls,complexes)
sympy.polys.rootoftools.RootOf._count_roots(cls,roots)
sympy.polys.rootoftools.RootOf._eval_evalf(self,prec)
sympy.polys.rootoftools.RootOf._eval_is_real(self)
sympy.polys.rootoftools.RootOf._get_complexes(cls,factors)
sympy.polys.rootoftools.RootOf._get_complexes_sqf(cls,factor)
sympy.polys.rootoftools.RootOf._get_interval(self)
sympy.polys.rootoftools.RootOf._get_reals(cls,factors)
sympy.polys.rootoftools.RootOf._get_reals_sqf(cls,factor)
sympy.polys.rootoftools.RootOf._get_roots(cls,method,poly,radicals)
sympy.polys.rootoftools.RootOf._hashable_content(self)
sympy.polys.rootoftools.RootOf._indexed_root(cls,poly,index)
sympy.polys.rootoftools.RootOf._new(cls,poly,index)
sympy.polys.rootoftools.RootOf._postprocess_root(cls,root,radicals)
sympy.polys.rootoftools.RootOf._preprocess_roots(cls,poly)
sympy.polys.rootoftools.RootOf._real_roots(cls,poly)
sympy.polys.rootoftools.RootOf._reals_index(cls,reals,index)
sympy.polys.rootoftools.RootOf._reals_sorted(cls,reals)
sympy.polys.rootoftools.RootOf._refine_complexes(cls,complexes)
sympy.polys.rootoftools.RootOf._roots_trivial(cls,poly,radicals)
sympy.polys.rootoftools.RootOf._separate_imaginary_from_complex(cls,complexes)
sympy.polys.rootoftools.RootOf._set_interval(self,interval)
sympy.polys.rootoftools.RootOf.all_roots(cls,poly,radicals=True)
sympy.polys.rootoftools.RootOf.args(self)
sympy.polys.rootoftools.RootOf.eval_rational(self,tol)
sympy.polys.rootoftools.RootOf.expr(self)
sympy.polys.rootoftools.RootOf.free_symbols(self)
sympy.polys.rootoftools.RootOf.real_roots(cls,poly,radicals=True)
sympy.polys.rootoftools.RootSum(cls,expr,func=None,x=None,auto=True,quadratic=False)
sympy.polys.rootoftools.RootSum.__new__(cls,expr,func=None,x=None,auto=True,quadratic=False)
sympy.polys.rootoftools.RootSum._eval_derivative(self,x)
sympy.polys.rootoftools.RootSum._eval_evalf(self,prec)
sympy.polys.rootoftools.RootSum._hashable_content(self)
sympy.polys.rootoftools.RootSum._is_func_rational(cls,poly,func)
sympy.polys.rootoftools.RootSum._new(cls,poly,func,auto=True)
sympy.polys.rootoftools.RootSum._rational_case(cls,poly,func)
sympy.polys.rootoftools.RootSum._transform(cls,expr,x)
sympy.polys.rootoftools.RootSum.args(self)
sympy.polys.rootoftools.RootSum.doit(self,**hints)
sympy.polys.rootoftools.RootSum.expr(self)
sympy.polys.rootoftools.RootSum.free_symbols(self)
sympy.polys.rootoftools.RootSum.is_commutative(self)
sympy.polys.rootoftools.RootSum.new(cls,poly,func,auto=True)
sympy.polys.rootoftools._ispow2(i)
sympy.polys.rootoftools.bisect(f,a,b,tol)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/fields.py----------------------------------------
A:sympy.polys.fields._field->FracField(symbols, domain, order)
A:sympy.polys.fields.ring->PolyRing(symbols, domain, order)
A:sympy.polys.fields._hash->hash((cls.__name__, symbols, ngens, domain, order))
A:sympy.polys.fields.obj->object.__new__(cls)
A:sympy.polys.fields.obj.dtype->type('FracElement', (FracElement,), {'field': obj})
A:sympy.polys.fields.obj.zero->object.__new__(cls).dtype(ring.zero)
A:sympy.polys.fields.obj.one->object.__new__(cls).dtype(ring.one)
A:sympy.polys.fields.obj.gens->object.__new__(cls)._gens()
A:sympy.polys.fields.(numer, denom)->list(map(self.ring.ring_new, element))
A:sympy.polys.fields.ground_field->domain.get_field()
A:sympy.polys.fields.element->domain.get_field().convert(element)
A:sympy.polys.fields.numer->self.numer.set_ring(new_ring)
A:sympy.polys.fields.denom->self.denom.set_ring(new_ring)
A:sympy.polys.fields.(denom, numer)->domain.get_field().convert(element).clear_denoms()
A:sympy.polys.fields.generator->dict(list(zip(self.symbols, self.gens))).get(expr)
A:sympy.polys.fields.mapping->dict(list(zip(self.symbols, self.gens)))
A:sympy.polys.fields.frac->self._rebuild_expr(expr, mapping)
A:sympy.polys.fields.self._hash_hash->hash((self.field, self.numer, self.denom))
A:sympy.polys.fields.(op, g_numer, g_denom)->f._extract_ground(c)
A:sympy.polys.fields.x->x.to_poly().to_poly()
A:sympy.polys.fields.field->self.numer.set_ring(new_ring).ring.to_field()
sympy.FracElement(self,numer,denom=None)
sympy.FracElement.__add__(f,g)
sympy.FracElement.__eq__(f,g)
sympy.FracElement.__ge__(f1,f2)
sympy.FracElement.__getnewargs__(self)
sympy.FracElement.__gt__(f1,f2)
sympy.FracElement.__hash__(self)
sympy.FracElement.__le__(f1,f2)
sympy.FracElement.__lt__(f1,f2)
sympy.FracElement.__mul__(f,g)
sympy.FracElement.__ne__(f,g)
sympy.FracElement.__neg__(f)
sympy.FracElement.__nonzero__(f)
sympy.FracElement.__pos__(f)
sympy.FracElement.__pow__(f,n)
sympy.FracElement.__radd__(f,c)
sympy.FracElement.__rmul__(f,c)
sympy.FracElement.__rsub__(f,c)
sympy.FracElement.__rtruediv__(f,c)
sympy.FracElement.__sub__(f,g)
sympy.FracElement.__truediv__(f,g)
sympy.FracElement._cmp(f1,f2,op)
sympy.FracElement._extract_ground(self,element)
sympy.FracElement.as_expr(self,*symbols)
sympy.FracElement.compose(f,x,a=None)
sympy.FracElement.copy(self)
sympy.FracElement.diff(f,x)
sympy.FracElement.evaluate(f,x,a=None)
sympy.FracElement.new(f,numer,denom)
sympy.FracElement.parent(self)
sympy.FracElement.raw_new(f,numer,denom)
sympy.FracElement.set_field(self,new_field)
sympy.FracElement.sort_key(self)
sympy.FracElement.subs(f,x,a=None)
sympy.FracElement.to_poly(f)
sympy.FracField(cls,symbols,domain,order=lex)
sympy.FracField.__eq__(self,other)
sympy.FracField.__getnewargs__(self)
sympy.FracField.__hash__(self)
sympy.FracField.__ne__(self,other)
sympy.FracField._gens(self)
sympy.FracField._rebuild_expr(self,expr,mapping)
sympy.FracField.domain_new(self,element)
sympy.FracField.field_new(self,element)
sympy.FracField.from_expr(self,expr)
sympy.FracField.ground_new(self,element)
sympy.FracField.new(self,numer,denom=None)
sympy.FracField.raw_new(self,numer,denom=None)
sympy.FracField.to_domain(self)
sympy.FracField.to_ring(self)
sympy.field(symbols,domain,order=lex)
sympy.polys.fields.FracElement(self,numer,denom=None)
sympy.polys.fields.FracElement.__add__(f,g)
sympy.polys.fields.FracElement.__eq__(f,g)
sympy.polys.fields.FracElement.__ge__(f1,f2)
sympy.polys.fields.FracElement.__getnewargs__(self)
sympy.polys.fields.FracElement.__gt__(f1,f2)
sympy.polys.fields.FracElement.__hash__(self)
sympy.polys.fields.FracElement.__init__(self,numer,denom=None)
sympy.polys.fields.FracElement.__le__(f1,f2)
sympy.polys.fields.FracElement.__lt__(f1,f2)
sympy.polys.fields.FracElement.__mul__(f,g)
sympy.polys.fields.FracElement.__ne__(f,g)
sympy.polys.fields.FracElement.__neg__(f)
sympy.polys.fields.FracElement.__nonzero__(f)
sympy.polys.fields.FracElement.__pos__(f)
sympy.polys.fields.FracElement.__pow__(f,n)
sympy.polys.fields.FracElement.__radd__(f,c)
sympy.polys.fields.FracElement.__rmul__(f,c)
sympy.polys.fields.FracElement.__rsub__(f,c)
sympy.polys.fields.FracElement.__rtruediv__(f,c)
sympy.polys.fields.FracElement.__sub__(f,g)
sympy.polys.fields.FracElement.__truediv__(f,g)
sympy.polys.fields.FracElement._cmp(f1,f2,op)
sympy.polys.fields.FracElement._extract_ground(self,element)
sympy.polys.fields.FracElement.as_expr(self,*symbols)
sympy.polys.fields.FracElement.compose(f,x,a=None)
sympy.polys.fields.FracElement.copy(self)
sympy.polys.fields.FracElement.diff(f,x)
sympy.polys.fields.FracElement.evaluate(f,x,a=None)
sympy.polys.fields.FracElement.new(f,numer,denom)
sympy.polys.fields.FracElement.parent(self)
sympy.polys.fields.FracElement.raw_new(f,numer,denom)
sympy.polys.fields.FracElement.set_field(self,new_field)
sympy.polys.fields.FracElement.sort_key(self)
sympy.polys.fields.FracElement.subs(f,x,a=None)
sympy.polys.fields.FracElement.to_poly(f)
sympy.polys.fields.FracField(cls,symbols,domain,order=lex)
sympy.polys.fields.FracField.__eq__(self,other)
sympy.polys.fields.FracField.__getnewargs__(self)
sympy.polys.fields.FracField.__hash__(self)
sympy.polys.fields.FracField.__ne__(self,other)
sympy.polys.fields.FracField.__new__(cls,symbols,domain,order=lex)
sympy.polys.fields.FracField._gens(self)
sympy.polys.fields.FracField._rebuild_expr(self,expr,mapping)
sympy.polys.fields.FracField.domain_new(self,element)
sympy.polys.fields.FracField.field_new(self,element)
sympy.polys.fields.FracField.from_expr(self,expr)
sympy.polys.fields.FracField.ground_new(self,element)
sympy.polys.fields.FracField.new(self,numer,denom=None)
sympy.polys.fields.FracField.raw_new(self,numer,denom=None)
sympy.polys.fields.FracField.to_domain(self)
sympy.polys.fields.FracField.to_ring(self)
sympy.polys.fields.field(symbols,domain,order=lex)
sympy.polys.fields.sfield(exprs,*symbols,**options)
sympy.polys.fields.vfield(symbols,domain,order=lex)
sympy.polys.fields.xfield(symbols,domain,order=lex)
sympy.sfield(exprs,*symbols,**options)
sympy.vfield(symbols,domain,order=lex)
sympy.xfield(symbols,domain,order=lex)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/densearith.py----------------------------------------
A:sympy.polys.densearith.n->len(f)
A:sympy.polys.densearith.df->dmp_degree(f, u)
A:sympy.polys.densearith.dg->dmp_degree(g, u)
A:sympy.polys.densearith.k->abs(df - dg)
A:sympy.polys.densearith.fh->dup_rshift(dup_slice(f, n2, n, K), n2, K)
A:sympy.polys.densearith.gh->dup_rshift(dup_slice(g, n2, n, K), n2, K)
A:sympy.polys.densearith.mid->dup_sub(mid, dup_add(lo, hi, K), K)
A:sympy.polys.densearith.coeff->dmp_add(coeff, dmp_mul(f[j], g[i - j], v, K), v, K)
A:sympy.polys.densearith.jmin->max(0, i - df)
A:sympy.polys.densearith.jmax->min(i, df)
A:sympy.polys.densearith.c->K.exquo(lc_r, lc_g)
A:sympy.polys.densearith.elem->dmp_sqr(f[jmax + 1], v, K)
A:sympy.polys.densearith.g->dmp_mul(g, f, u, K)
A:sympy.polys.densearith.f->dmp_mul(f, g, u, K)
A:sympy.polys.densearith.lc_g->dup_LC(g, K)
A:sympy.polys.densearith.lc_r->dmp_LC(r, K)
A:sympy.polys.densearith.Q->dmp_mul_term(q, lc_g, 0, u, K)
A:sympy.polys.densearith.q->dmp_add_term(q, c, j, u, K)
A:sympy.polys.densearith.R->dmp_mul_term(r, lc_g, 0, u, K)
A:sympy.polys.densearith.G->dmp_mul_term(g, lc_r, j, u, K)
A:sympy.polys.densearith.r->dmp_sub(r, h, u, K)
A:sympy.polys.densearith.(q, r)->dmp_div(f, g, u, K)
A:sympy.polys.densearith.h->dmp_mul_term(g, c, j, u, K)
A:sympy.polys.densearith.(c, R)->dmp_ff_div(lc_r, lc_g, v, K)
sympy.densearith.dmp_abs(f,u,K)
sympy.densearith.dmp_add(f,g,u,K)
sympy.densearith.dmp_add_ground(f,c,u,K)
sympy.densearith.dmp_add_mul(f,g,h,u,K)
sympy.densearith.dmp_add_term(f,c,i,u,K)
sympy.densearith.dmp_div(f,g,u,K)
sympy.densearith.dmp_expand(polys,u,K)
sympy.densearith.dmp_exquo(f,g,u,K)
sympy.densearith.dmp_exquo_ground(f,c,u,K)
sympy.densearith.dmp_ff_div(f,g,u,K)
sympy.densearith.dmp_l1_norm(f,u,K)
sympy.densearith.dmp_max_norm(f,u,K)
sympy.densearith.dmp_mul(f,g,u,K)
sympy.densearith.dmp_mul_ground(f,c,u,K)
sympy.densearith.dmp_mul_term(f,c,i,u,K)
sympy.densearith.dmp_neg(f,u,K)
sympy.densearith.dmp_pdiv(f,g,u,K)
sympy.densearith.dmp_pexquo(f,g,u,K)
sympy.densearith.dmp_pow(f,n,u,K)
sympy.densearith.dmp_pquo(f,g,u,K)
sympy.densearith.dmp_prem(f,g,u,K)
sympy.densearith.dmp_quo(f,g,u,K)
sympy.densearith.dmp_quo_ground(f,c,u,K)
sympy.densearith.dmp_rem(f,g,u,K)
sympy.densearith.dmp_rr_div(f,g,u,K)
sympy.densearith.dmp_sqr(f,u,K)
sympy.densearith.dmp_sub(f,g,u,K)
sympy.densearith.dmp_sub_ground(f,c,u,K)
sympy.densearith.dmp_sub_mul(f,g,h,u,K)
sympy.densearith.dmp_sub_term(f,c,i,u,K)
sympy.densearith.dup_abs(f,K)
sympy.densearith.dup_add(f,g,K)
sympy.densearith.dup_add_ground(f,c,K)
sympy.densearith.dup_add_mul(f,g,h,K)
sympy.densearith.dup_add_term(f,c,i,K)
sympy.densearith.dup_div(f,g,K)
sympy.densearith.dup_expand(polys,K)
sympy.densearith.dup_exquo(f,g,K)
sympy.densearith.dup_exquo_ground(f,c,K)
sympy.densearith.dup_ff_div(f,g,K)
sympy.densearith.dup_l1_norm(f,K)
sympy.densearith.dup_lshift(f,n,K)
sympy.densearith.dup_max_norm(f,K)
sympy.densearith.dup_mul(f,g,K)
sympy.densearith.dup_mul_ground(f,c,K)
sympy.densearith.dup_mul_term(f,c,i,K)
sympy.densearith.dup_neg(f,K)
sympy.densearith.dup_pdiv(f,g,K)
sympy.densearith.dup_pexquo(f,g,K)
sympy.densearith.dup_pow(f,n,K)
sympy.densearith.dup_pquo(f,g,K)
sympy.densearith.dup_prem(f,g,K)
sympy.densearith.dup_quo(f,g,K)
sympy.densearith.dup_quo_ground(f,c,K)
sympy.densearith.dup_rem(f,g,K)
sympy.densearith.dup_rr_div(f,g,K)
sympy.densearith.dup_rshift(f,n,K)
sympy.densearith.dup_sqr(f,K)
sympy.densearith.dup_sub(f,g,K)
sympy.densearith.dup_sub_ground(f,c,K)
sympy.densearith.dup_sub_mul(f,g,h,K)
sympy.densearith.dup_sub_term(f,c,i,K)
sympy.polys.densearith.dmp_abs(f,u,K)
sympy.polys.densearith.dmp_add(f,g,u,K)
sympy.polys.densearith.dmp_add_ground(f,c,u,K)
sympy.polys.densearith.dmp_add_mul(f,g,h,u,K)
sympy.polys.densearith.dmp_add_term(f,c,i,u,K)
sympy.polys.densearith.dmp_div(f,g,u,K)
sympy.polys.densearith.dmp_expand(polys,u,K)
sympy.polys.densearith.dmp_exquo(f,g,u,K)
sympy.polys.densearith.dmp_exquo_ground(f,c,u,K)
sympy.polys.densearith.dmp_ff_div(f,g,u,K)
sympy.polys.densearith.dmp_l1_norm(f,u,K)
sympy.polys.densearith.dmp_max_norm(f,u,K)
sympy.polys.densearith.dmp_mul(f,g,u,K)
sympy.polys.densearith.dmp_mul_ground(f,c,u,K)
sympy.polys.densearith.dmp_mul_term(f,c,i,u,K)
sympy.polys.densearith.dmp_neg(f,u,K)
sympy.polys.densearith.dmp_pdiv(f,g,u,K)
sympy.polys.densearith.dmp_pexquo(f,g,u,K)
sympy.polys.densearith.dmp_pow(f,n,u,K)
sympy.polys.densearith.dmp_pquo(f,g,u,K)
sympy.polys.densearith.dmp_prem(f,g,u,K)
sympy.polys.densearith.dmp_quo(f,g,u,K)
sympy.polys.densearith.dmp_quo_ground(f,c,u,K)
sympy.polys.densearith.dmp_rem(f,g,u,K)
sympy.polys.densearith.dmp_rr_div(f,g,u,K)
sympy.polys.densearith.dmp_sqr(f,u,K)
sympy.polys.densearith.dmp_sub(f,g,u,K)
sympy.polys.densearith.dmp_sub_ground(f,c,u,K)
sympy.polys.densearith.dmp_sub_mul(f,g,h,u,K)
sympy.polys.densearith.dmp_sub_term(f,c,i,u,K)
sympy.polys.densearith.dup_abs(f,K)
sympy.polys.densearith.dup_add(f,g,K)
sympy.polys.densearith.dup_add_ground(f,c,K)
sympy.polys.densearith.dup_add_mul(f,g,h,K)
sympy.polys.densearith.dup_add_term(f,c,i,K)
sympy.polys.densearith.dup_div(f,g,K)
sympy.polys.densearith.dup_expand(polys,K)
sympy.polys.densearith.dup_exquo(f,g,K)
sympy.polys.densearith.dup_exquo_ground(f,c,K)
sympy.polys.densearith.dup_ff_div(f,g,K)
sympy.polys.densearith.dup_l1_norm(f,K)
sympy.polys.densearith.dup_lshift(f,n,K)
sympy.polys.densearith.dup_max_norm(f,K)
sympy.polys.densearith.dup_mul(f,g,K)
sympy.polys.densearith.dup_mul_ground(f,c,K)
sympy.polys.densearith.dup_mul_term(f,c,i,K)
sympy.polys.densearith.dup_neg(f,K)
sympy.polys.densearith.dup_pdiv(f,g,K)
sympy.polys.densearith.dup_pexquo(f,g,K)
sympy.polys.densearith.dup_pow(f,n,K)
sympy.polys.densearith.dup_pquo(f,g,K)
sympy.polys.densearith.dup_prem(f,g,K)
sympy.polys.densearith.dup_quo(f,g,K)
sympy.polys.densearith.dup_quo_ground(f,c,K)
sympy.polys.densearith.dup_rem(f,g,K)
sympy.polys.densearith.dup_rr_div(f,g,K)
sympy.polys.densearith.dup_rshift(f,n,K)
sympy.polys.densearith.dup_sqr(f,K)
sympy.polys.densearith.dup_sub(f,g,K)
sympy.polys.densearith.dup_sub_ground(f,c,K)
sympy.polys.densearith.dup_sub_mul(f,g,h,K)
sympy.polys.densearith.dup_sub_term(f,c,i,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/ring_series.py----------------------------------------
A:sympy.polys.ring_series.terms->list(p1.items())
A:sympy.polys.ring_series.deg->rs_mul(p1, p, x, prec).degree()
A:sympy.polys.ring_series.cv->_invert_monoms(p).listcoeffs()
A:sympy.polys.ring_series.mv->_invert_monoms(p).listmonoms()
A:sympy.polys.ring_series.res->giant_steps(2, target)
A:sympy.polys.ring_series.i->sympy.polys.rings.ring.gens.index(x)
A:sympy.polys.ring_series.iv->sympy.polys.rings.ring.gens.index(x)
A:sympy.polys.ring_series.items2->list(p2.items())
A:sympy.polys.ring_series.exp->monomial_mul(exp1, exp2)
A:sympy.polys.ring_series.items->list(p1.items())
A:sympy.polys.ring_series.p->rs_mul(p1, p, x, prec)
A:sympy.polys.ring_series.e2->monomial_mul(expv, expv)
A:sympy.polys.ring_series.n->sympy.polys.rings.ring.gens.index(x)
A:sympy.polys.ring_series.p1->_invert_monoms(p)
A:sympy.polys.ring_series.p2->rs_series_inversion(p1, x, prec)
A:sympy.polys.ring_series.miv->tuple(a)
A:sympy.polys.ring_series.tmp->rs_mul(pt, p1, x, precx)
A:sympy.polys.ring_series.ii->sympy.polys.rings.ring.gens.index(x)
A:sympy.polys.ring_series.q->_invert_monoms(q)
A:sympy.polys.ring_series.J->int(math.sqrt(n) + 1)
A:sympy.polys.ring_series.(K, r)->divmod(n, J)
A:sympy.polys.ring_series.pj->rs_mul(ax[-1], p, x, prec)
A:sympy.polys.ring_series.b->rs_mul(b, pj, x, prec)
A:sympy.polys.ring_series.s->ring(0)
A:sympy.polys.ring_series.s1->rs_mul(s1, b, x, prec)
A:sympy.polys.ring_series.mn->tuple(mn)
A:sympy.polys.ring_series.e->monomial_mul(expv, mn)
A:sympy.polys.ring_series.dlog->rs_mul(dlog, _series_inversion1(p, x, prec), x, prec - 1)
A:sympy.polys.ring_series.one->ring(1)
A:sympy.polys.ring_series.r->rs_series_from_list(p, c, x, prec)
A:sympy.polys.ring_series.p3->rs_mul(p1.diff(x), p2, x, prec)
A:sympy.polys.ring_series.np1->rs_newton(p1, x, prec)
A:sympy.polys.ring_series.np1e->rs_hadamard_exp(np1)
A:sympy.polys.ring_series.np2->rs_newton(p2, x, prec)
A:sympy.polys.ring_series.np2e->rs_hadamard_exp(np2)
A:sympy.polys.ring_series.np3e->rs_mul(np1e, np2e, x, prec)
A:sympy.polys.ring_series.np3->rs_hadamard_exp(np3e, True)
sympy.polys.ring__exp1(p,x,prec)
sympy.polys.ring__giant_steps(target)
sympy.polys.ring__has_constant_term(p,x)
sympy.polys.ring__invert_monoms(p1)
sympy.polys.ring__series_inversion1(p,x,prec)
sympy.polys.ring_rs_compose_add(p1,p2)
sympy.polys.ring_rs_exp(p,x,prec)
sympy.polys.ring_rs_hadamard_exp(p1,inverse=False)
sympy.polys.ring_rs_integrate(self,x)
sympy.polys.ring_rs_log(p,x,prec)
sympy.polys.ring_rs_mul(p1,p2,x,prec)
sympy.polys.ring_rs_newton(p,x,prec)
sympy.polys.ring_rs_pow(p1,n,x,prec)
sympy.polys.ring_rs_series_from_list(p,c,x,prec,concur=1)
sympy.polys.ring_rs_series_inversion(p,x,prec)
sympy.polys.ring_rs_square(p1,x,prec)
sympy.polys.ring_rs_trunc(p1,x,prec)
sympy.polys.ring_series._exp1(p,x,prec)
sympy.polys.ring_series._giant_steps(target)
sympy.polys.ring_series._has_constant_term(p,x)
sympy.polys.ring_series._invert_monoms(p1)
sympy.polys.ring_series._series_inversion1(p,x,prec)
sympy.polys.ring_series.rs_compose_add(p1,p2)
sympy.polys.ring_series.rs_exp(p,x,prec)
sympy.polys.ring_series.rs_hadamard_exp(p1,inverse=False)
sympy.polys.ring_series.rs_integrate(self,x)
sympy.polys.ring_series.rs_log(p,x,prec)
sympy.polys.ring_series.rs_mul(p1,p2,x,prec)
sympy.polys.ring_series.rs_newton(p,x,prec)
sympy.polys.ring_series.rs_pow(p1,n,x,prec)
sympy.polys.ring_series.rs_series_from_list(p,c,x,prec,concur=1)
sympy.polys.ring_series.rs_series_inversion(p,x,prec)
sympy.polys.ring_series.rs_square(p1,x,prec)
sympy.polys.ring_series.rs_trunc(p1,x,prec)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/sqfreetools.py----------------------------------------
A:sympy.polys.sqfreetools.(h, _)->dmp_inject(f, u, K, front=True)
A:sympy.polys.sqfreetools.r->dmp_resultant(g, h, u + 1, K.dom)
A:sympy.polys.sqfreetools.g->dup_mul(g, dup_shift(h, -K(k), K), K)
A:sympy.polys.sqfreetools.F->dmp_raise([K.one, -K.unit], u, 0, K)
A:sympy.polys.sqfreetools.f->dup_quo(f, g, K)
A:sympy.polys.sqfreetools.gcd->dmp_gcd(f, dmp_diff(f, 1, u, K), u, K)
A:sympy.polys.sqfreetools.sqf->dmp_quo(f, gcd, u, K)
A:sympy.polys.sqfreetools.(coeff, factors)->dmp_sqf_list(f, u, K, all=all)
A:sympy.polys.sqfreetools.coeff->dmp_ground_LC(f, u, K)
A:sympy.polys.sqfreetools.(coeff, f)->dmp_ground_primitive(f, u, K)
A:sympy.polys.sqfreetools.h->dmp_sub(q, d, u, K)
A:sympy.polys.sqfreetools.(g, p, q)->dmp_inner_gcd(p, h, u, K)
A:sympy.polys.sqfreetools.d->dmp_diff(p, 1, u, K)
A:sympy.polys.sqfreetools.H->dup_gff_list(g, K)
sympy.polys.sqfreetools.dmp_gf_sqf_list(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_gf_sqf_part(f,K)
sympy.polys.sqfreetools.dmp_gff_list(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_list(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_sqf_list_include(f,u,K,all=False)
sympy.polys.sqfreetools.dmp_sqf_norm(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_p(f,u,K)
sympy.polys.sqfreetools.dmp_sqf_part(f,u,K)
sympy.polys.sqfreetools.dup_gf_sqf_list(f,K,all=False)
sympy.polys.sqfreetools.dup_gf_sqf_part(f,K)
sympy.polys.sqfreetools.dup_gff_list(f,K)
sympy.polys.sqfreetools.dup_sqf_list(f,K,all=False)
sympy.polys.sqfreetools.dup_sqf_list_include(f,K,all=False)
sympy.polys.sqfreetools.dup_sqf_norm(f,K)
sympy.polys.sqfreetools.dup_sqf_p(f,K)
sympy.polys.sqfreetools.dup_sqf_part(f,K)
sympy.sqfreetools.dmp_gf_sqf_list(f,u,K,all=False)
sympy.sqfreetools.dmp_gf_sqf_part(f,K)
sympy.sqfreetools.dmp_gff_list(f,u,K)
sympy.sqfreetools.dmp_sqf_list(f,u,K,all=False)
sympy.sqfreetools.dmp_sqf_list_include(f,u,K,all=False)
sympy.sqfreetools.dmp_sqf_norm(f,u,K)
sympy.sqfreetools.dmp_sqf_p(f,u,K)
sympy.sqfreetools.dmp_sqf_part(f,u,K)
sympy.sqfreetools.dup_gf_sqf_list(f,K,all=False)
sympy.sqfreetools.dup_gf_sqf_part(f,K)
sympy.sqfreetools.dup_gff_list(f,K)
sympy.sqfreetools.dup_sqf_list(f,K,all=False)
sympy.sqfreetools.dup_sqf_list_include(f,K,all=False)
sympy.sqfreetools.dup_sqf_norm(f,K)
sympy.sqfreetools.dup_sqf_p(f,K)
sympy.sqfreetools.dup_sqf_part(f,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/orthopolys.py----------------------------------------
A:sympy.polys.orthopolys.p0->dup_mul_ground(seq[-1], f0, K)
A:sympy.polys.orthopolys.p1->dup_mul_ground(dup_lshift(seq[-1], 1, K), f1, K)
A:sympy.polys.orthopolys.p2->dup_mul_ground(seq[-2], f2, K)
A:sympy.polys.orthopolys.(K, v)->construct_domain([a, b], field=True)
A:sympy.polys.orthopolys.poly->sympy.polys.polytools.PurePoly.new(poly, 1 / Dummy('x'))
A:sympy.polys.orthopolys.(K, a)->construct_domain(a, field=True)
A:sympy.polys.orthopolys.a->dup_mul_ground(dup_lshift(seq[-1], 1, K), K(3 - 2 * i), K)
A:sympy.polys.orthopolys.b->dup_mul_ground(seq[-2], alpha / i + K(i - 1) / i, K)
A:sympy.polys.orthopolys.c->dup_mul_ground(dup_sub(a, b, K), K(2), K)
A:sympy.polys.orthopolys.(K, alpha)->construct_domain(alpha, field=True)
A:sympy.polys.orthopolys.dup->dup_spherical_bessel_fn(int(n), ZZ)
sympy.chebyshevt_poly(n,x=None,**args)
sympy.chebyshevu_poly(n,x=None,**args)
sympy.dup_chebyshevt(n,K)
sympy.dup_chebyshevu(n,K)
sympy.dup_gegenbauer(n,a,K)
sympy.dup_hermite(n,K)
sympy.dup_jacobi(n,a,b,K)
sympy.dup_laguerre(n,alpha,K)
sympy.dup_legendre(n,K)
sympy.dup_spherical_bessel_fn(n,K)
sympy.dup_spherical_bessel_fn_minus(n,K)
sympy.gegenbauer_poly(n,a,x=None,**args)
sympy.hermite_poly(n,x=None,**args)
sympy.jacobi_poly(n,a,b,x=None,**args)
sympy.laguerre_poly(n,x=None,alpha=None,**args)
sympy.legendre_poly(n,x=None,**args)
sympy.polys.orthopolys.chebyshevt_poly(n,x=None,**args)
sympy.polys.orthopolys.chebyshevu_poly(n,x=None,**args)
sympy.polys.orthopolys.dup_chebyshevt(n,K)
sympy.polys.orthopolys.dup_chebyshevu(n,K)
sympy.polys.orthopolys.dup_gegenbauer(n,a,K)
sympy.polys.orthopolys.dup_hermite(n,K)
sympy.polys.orthopolys.dup_jacobi(n,a,b,K)
sympy.polys.orthopolys.dup_laguerre(n,alpha,K)
sympy.polys.orthopolys.dup_legendre(n,K)
sympy.polys.orthopolys.dup_spherical_bessel_fn(n,K)
sympy.polys.orthopolys.dup_spherical_bessel_fn_minus(n,K)
sympy.polys.orthopolys.gegenbauer_poly(n,a,x=None,**args)
sympy.polys.orthopolys.hermite_poly(n,x=None,**args)
sympy.polys.orthopolys.jacobi_poly(n,a,b,x=None,**args)
sympy.polys.orthopolys.laguerre_poly(n,x=None,alpha=None,**args)
sympy.polys.orthopolys.legendre_poly(n,x=None,**args)
sympy.polys.orthopolys.spherical_bessel_fn(n,x=None,**args)
sympy.spherical_bessel_fn(n,x=None,**args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/rings.py----------------------------------------
A:sympy.polys.rings._ring->PolyRing(opt.gens, opt.domain, opt.order)
A:sympy.polys.rings.exprs->list(map(sympify, exprs))
A:sympy.polys.rings.opt->build_options(symbols, options)
A:sympy.polys.rings.(reps, opt)->_parallel_dict_from_expr(exprs, opt)
A:sympy.polys.rings.coeffs->sum([list(rep.values()) for rep in reps], [])
A:sympy.polys.rings.(opt.domain, _)->construct_domain(coeffs, opt=opt)
A:sympy.polys.rings.polys->list(map(_ring.from_dict, reps))
A:sympy.polys.rings.symbols->list(ring.symbols)
A:sympy.polys.rings.ngens->len(symbols)
A:sympy.polys.rings.domain->sympy.polys.polyoptions.Domain.preprocess(domain)
A:sympy.polys.rings.order->sympy.polys.polyoptions.Order.preprocess(order)
A:sympy.polys.rings._hash->hash((cls.__name__, symbols, ngens, domain, order))
A:sympy.polys.rings.obj->object.__new__(cls)
A:sympy.polys.rings.obj.dtype->type('PolyElement', (PolyElement,), {'ring': obj})
A:sympy.polys.rings.obj.gens->object.__new__(cls)._gens()
A:sympy.polys.rings.obj._gens_set->set(obj.gens)
A:sympy.polys.rings.codegen->MonomialOps(ngens)
A:sympy.polys.rings.obj.monomial_mul->MonomialOps(ngens).mul()
A:sympy.polys.rings.obj.monomial_pow->MonomialOps(ngens).pow()
A:sympy.polys.rings.obj.monomial_mulpow->MonomialOps(ngens).mulpow()
A:sympy.polys.rings.obj.monomial_ldiv->MonomialOps(ngens).ldiv()
A:sympy.polys.rings.obj.monomial_div->MonomialOps(ngens).div()
A:sympy.polys.rings.obj.monomial_lcm->MonomialOps(ngens).lcm()
A:sympy.polys.rings.obj.monomial_gcd->MonomialOps(ngens).gcd()
A:sympy.polys.rings.expv->self.copy().leading_expv()
A:sympy.polys.rings.state->self.copy().__dict__.copy()
A:sympy.polys.rings.coeff->domain_new(coeff)
A:sympy.polys.rings.generator->dict(list(zip(self.symbols, self.gens))).get(expr)
A:sympy.polys.rings.mapping->dict(list(zip(self.symbols, self.gens)))
A:sympy.polys.rings.poly->f.subs(X, a).new(terms)
A:sympy.polys.rings.i->ring.index(x)
A:sympy.polys.rings.indices->set(map(self.index, gens))
A:sympy.polys.rings.self._hash_hash->hash((self.ring, frozenset(self.items())))
A:sympy.polys.rings.terms->list(element.iterterms())
A:sympy.polys.rings.ground_ring->sympy.polys.polyoptions.Domain.preprocess(domain).get_ring()
A:sympy.polys.rings.common->lcm(common, denom(coeff))
A:sympy.polys.rings.p2->ring.domain_new(p2)
A:sympy.polys.rings.(i, ring)->self.copy()._drop_to_ground(gen)
A:sympy.polys.rings.K->list(k)
A:sympy.polys.rings.poly[mon]->(gen ** monom[i]).mul_ground(coeff)
A:sympy.polys.rings.positive->ring.domain.is_positive(coeff)
A:sympy.polys.rings.scoeff->printer.parenthesize(coeff, prec_add)
A:sympy.polys.rings.symbol->printer.parenthesize(symbols[i], prec_atom - 1)
A:sympy.polys.rings.head->sexpvs.pop(0)
A:sympy.polys.rings.p->p.mul_ground(cp).mul_ground(cp)
A:sympy.polys.rings.cp2->ring.domain_new(p2)
A:sympy.polys.rings.n->int(n)
A:sympy.polys.rings.p2it->list(p2.items())
A:sympy.polys.rings.exp->monomial_mul(k1, k2)
A:sympy.polys.rings.self->self.copy().copy()
A:sympy.polys.rings.multinomials->list(multinomial_coefficients(len(self), n).items())
A:sympy.polys.rings.product_monom->monomial_mulpow(product_monom, monom, exp)
A:sympy.polys.rings.monom->list(monom)
A:sympy.polys.rings.keys->list(self.keys())
A:sympy.polys.rings.k2->monomial_mul(k, k)
A:sympy.polys.rings.s->len(fv)
A:sympy.polys.rings.term_div->f.subs(X, a)._term_div()
A:sympy.polys.rings.term->term_div((expv, p[expv]), (expvs[i], fv[i][expvs[i]]))
A:sympy.polys.rings.qv[i]->qv[i]._iadd_monom((expv1, c))._iadd_monom((expv1, c))
A:sympy.polys.rings.r->r._iadd_monom((expv, p[expv]))._iadd_monom((expv, p[expv]))
A:sympy.polys.rings.f->f.subs(X, a).subs(X, a)
A:sympy.polys.rings.tq->term_div(ltf, g.LT)
A:sympy.polys.rings.m1->monomial_mul(mg, m)
A:sympy.polys.rings.ltm->f.subs(X, a).subs(X, a).leading_expv()
A:sympy.polys.rings.(q, r)->f.subs(X, a).subs(X, a).div(G)
A:sympy.polys.rings.c->sympy.polys.polyoptions.Domain.preprocess(domain).lcm(fc, gc)
A:sympy.polys.rings.p1->p1.copy().copy()
A:sympy.polys.rings.ka->monomial_mul(k, m)
A:sympy.polys.rings.cont->f.subs(X, a).subs(X, a).content()
A:sympy.polys.rings.fc->f.subs(X, a).subs(X, a).content()
A:sympy.polys.rings.gc->g.set_ring(new_ring).content()
A:sympy.polys.rings.gcd->f.subs(X, a).subs(X, a).ring.domain.gcd(fc, gc)
A:sympy.polys.rings.g->g.set_ring(new_ring).set_ring(new_ring)
A:sympy.polys.rings.J[i]->igcd(J[i], m)
A:sympy.polys.rings.J->tuple(J)
A:sympy.polys.rings.(fc, f)->f.subs(X, a).subs(X, a).primitive()
A:sympy.polys.rings.(gc, g)->g.set_ring(new_ring).set_ring(new_ring).primitive()
A:sympy.polys.rings.h->h.set_ring(ring).set_ring(ring)
A:sympy.polys.rings.(h, cff, cfg)->f.subs(X, a).subs(X, a)._gcd_ZZ(g)
A:sympy.polys.rings.(h, cfg, cff)->g.set_ring(new_ring).set_ring(new_ring)._gcd_monom(f)
A:sympy.polys.rings.(J, (f, g))->f.subs(X, a).subs(X, a).deflate(g)
A:sympy.polys.rings._mgcd->monomial_gcd(_mgcd, mg)
A:sympy.polys.rings._cgcd->ground_gcd(_cgcd, cg)
A:sympy.polys.rings.cff->cff.set_ring(ring).mul_ground(ring.domain.quo(c, cf)).set_ring(ring).mul_ground(ring.domain.quo(c, cf))
A:sympy.polys.rings.cfg->cfg.set_ring(ring).mul_ground(ring.domain.quo(c, cg)).set_ring(ring).mul_ground(ring.domain.quo(c, cg))
A:sympy.polys.rings.new_ring->ring.clone(domain=domain.get_ring())
A:sympy.polys.rings.(cf, f)->f.subs(X, a).subs(X, a).clear_denoms()
A:sympy.polys.rings.(cg, g)->g.set_ring(new_ring).set_ring(new_ring).clear_denoms()
A:sympy.polys.rings.(_, p, q)->f.subs(X, a).subs(X, a).cofactors(g)
A:sympy.polys.rings.(cq, f)->f.subs(X, a).subs(X, a).clear_denoms()
A:sympy.polys.rings.(cp, g)->g.set_ring(new_ring).set_ring(new_ring).clear_denoms()
A:sympy.polys.rings.(_, cp, cq)->ring.clone(domain=domain.get_ring()).domain.cofactors(cp, cq)
A:sympy.polys.rings.q->q.mul_ground(cq).mul_ground(cq)
A:sympy.polys.rings.m->ring.monomial_basis(i)
A:sympy.polys.rings.e->ring.monomial_ldiv(expv, m)
A:sympy.polys.rings.a->ring.domain.convert(a)
A:sympy.polys.rings.gens_map->dict(list(zip(ring.gens, list(range(ring.ngens)))))
A:sympy.polys.rings.replacements->sorted(list(x.items()), key=lambda k: gens_map[k[0]])
A:sympy.polys.rings.subpoly->subpoly.mul_term((tuple(monom), coeff)).mul_term((tuple(monom), coeff))
sympy.PolyElement(f,*values)
sympy.PolyElement.LC(self)
sympy.PolyElement.LM(self)
sympy.PolyElement.LT(self)
sympy.PolyElement.__add__(p1,p2)
sympy.PolyElement.__divmod__(p1,p2)
sympy.PolyElement.__eq__(p1,p2)
sympy.PolyElement.__ge__(p1,p2)
sympy.PolyElement.__getnewargs__(self)
sympy.PolyElement.__gt__(p1,p2)
sympy.PolyElement.__hash__(self)
sympy.PolyElement.__le__(p1,p2)
sympy.PolyElement.__lt__(p1,p2)
sympy.PolyElement.__mod__(p1,p2)
sympy.PolyElement.__mul__(p1,p2)
sympy.PolyElement.__ne__(p1,p2)
sympy.PolyElement.__neg__(self)
sympy.PolyElement.__pos__(self)
sympy.PolyElement.__pow__(self,n)
sympy.PolyElement.__radd__(p1,n)
sympy.PolyElement.__rdivmod__(p1,p2)
sympy.PolyElement.__rmod__(p1,p2)
sympy.PolyElement.__rmul__(p1,p2)
sympy.PolyElement.__rsub__(p1,n)
sympy.PolyElement.__rtruediv__(p1,p2)
sympy.PolyElement.__sub__(p1,p2)
sympy.PolyElement.__truediv__(p1,p2)
sympy.PolyElement._cmp(p1,p2,op)
sympy.PolyElement._drop(self,gen)
sympy.PolyElement._drop_to_ground(self,gen)
sympy.PolyElement._gcd(f,g)
sympy.PolyElement._gcd_QQ(f,g)
sympy.PolyElement._gcd_ZZ(f,g)
sympy.PolyElement._gcd_monom(f,g)
sympy.PolyElement._gcd_zero(f,g)
sympy.PolyElement._get_coeff(self,expv)
sympy.PolyElement._iadd_monom(self,mc)
sympy.PolyElement._iadd_poly_monom(p1,p2,mc)
sympy.PolyElement._norm(f,norm_func)
sympy.PolyElement._pow_generic(self,n)
sympy.PolyElement._pow_multinomial(self,n)
sympy.PolyElement._sorted(self,seq,order)
sympy.PolyElement._term_div(self)
sympy.PolyElement.almosteq(p1,p2,tolerance=None)
sympy.PolyElement.as_expr(self,*symbols)
sympy.PolyElement.as_expr_dict(self)
sympy.PolyElement.cancel(f,g)
sympy.PolyElement.clear_denoms(self)
sympy.PolyElement.coeff(self,element)
sympy.PolyElement.coeffs(self,order=None)
sympy.PolyElement.cofactors(f,g)
sympy.PolyElement.compose(f,x,a=None)
sympy.PolyElement.const(self)
sympy.PolyElement.content(f)
sympy.PolyElement.copy(self)
sympy.PolyElement.decompose(f)
sympy.PolyElement.deflate(f,*G)
sympy.PolyElement.degree(f,x=None)
sympy.PolyElement.degrees(f)
sympy.PolyElement.diff(f,x)
sympy.PolyElement.discriminant(f)
sympy.PolyElement.div(self,fv)
sympy.PolyElement.drop(self,gen)
sympy.PolyElement.drop_to_ground(self,gen)
sympy.PolyElement.evaluate(f,x,a=None)
sympy.PolyElement.exquo(f,G)
sympy.PolyElement.extract_ground(f,g)
sympy.PolyElement.factor_list(f)
sympy.PolyElement.gcd(f,g)
sympy.PolyElement.gcdex(f,g)
sympy.PolyElement.gff_list(f)
sympy.PolyElement.half_gcdex(f,g)
sympy.PolyElement.imul_num(p,c)
sympy.PolyElement.inflate(f,J)
sympy.PolyElement.is_cyclotomic(f)
sympy.PolyElement.is_generator(self)
sympy.PolyElement.is_ground(self)
sympy.PolyElement.is_irreducible(f)
sympy.PolyElement.is_linear(f)
sympy.PolyElement.is_monic(f)
sympy.PolyElement.is_monomial(self)
sympy.PolyElement.is_negative(self)
sympy.PolyElement.is_nonnegative(self)
sympy.PolyElement.is_nonpositive(self)
sympy.PolyElement.is_one(f)
sympy.PolyElement.is_positive(self)
sympy.PolyElement.is_primitive(f)
sympy.PolyElement.is_quadratic(f)
sympy.PolyElement.is_squarefree(f)
sympy.PolyElement.is_term(self)
sympy.PolyElement.is_zero(f)
sympy.PolyElement.itercoeffs(self)
sympy.PolyElement.itermonoms(self)
sympy.PolyElement.iterterms(self)
sympy.PolyElement.l1_norm(f)
sympy.PolyElement.lcm(f,g)
sympy.PolyElement.leading_expv(self)
sympy.PolyElement.leading_monom(self)
sympy.PolyElement.leading_term(self)
sympy.PolyElement.listcoeffs(self)
sympy.PolyElement.listmonoms(self)
sympy.PolyElement.listterms(self)
sympy.PolyElement.max_norm(f)
sympy.PolyElement.monic(f)
sympy.PolyElement.monoms(self,order=None)
sympy.PolyElement.mul_ground(f,x)
sympy.PolyElement.mul_monom(f,monom)
sympy.PolyElement.mul_term(f,term)
sympy.PolyElement.new(self,init)
sympy.PolyElement.parent(self)
sympy.PolyElement.pdiv(f,g)
sympy.PolyElement.pexquo(f,g)
sympy.PolyElement.pquo(f,g)
sympy.PolyElement.prem(f,g)
sympy.PolyElement.primitive(f)
sympy.PolyElement.quo(f,G)
sympy.PolyElement.quo_ground(f,x)
sympy.PolyElement.quo_term(f,term)
sympy.PolyElement.rem(f,G)
sympy.PolyElement.resultant(f,g)
sympy.PolyElement.set_ring(self,new_ring)
sympy.PolyElement.shift(f,a)
sympy.PolyElement.sort_key(self)
sympy.PolyElement.sqf_list(f,all=False)
sympy.PolyElement.sqf_norm(f)
sympy.PolyElement.sqf_part(f)
sympy.PolyElement.square(self)
sympy.PolyElement.str(self,printer,precedence,exp_pattern,mul_symbol)
sympy.PolyElement.strip_zero(self)
sympy.PolyElement.sturm(f)
sympy.PolyElement.subresultants(f,g)
sympy.PolyElement.subs(f,x,a=None)
sympy.PolyElement.tail_degree(f,x=None)
sympy.PolyElement.tail_degrees(f)
sympy.PolyElement.terms(self,order=None)
sympy.PolyElement.to_dense(self)
sympy.PolyElement.to_dict(self)
sympy.PolyElement.trunc_ground(f,p)
sympy.PolyRing(cls,symbols,domain,order=lex)
sympy.PolyRing.__eq__(self,other)
sympy.PolyRing.__getitem__(self,key)
sympy.PolyRing.__getnewargs__(self)
sympy.PolyRing.__getstate__(self)
sympy.PolyRing.__hash__(self)
sympy.PolyRing.__ne__(self,other)
sympy.PolyRing._gens(self)
sympy.PolyRing._rebuild_expr(self,expr,mapping)
sympy.PolyRing.add(self,*objs)
sympy.PolyRing.clone(self,symbols=None,domain=None,order=None)
sympy.PolyRing.domain_new(self,element,orig_domain=None)
sympy.PolyRing.drop(self,*gens)
sympy.PolyRing.drop_to_ground(self,*gens)
sympy.PolyRing.from_dict(self,element)
sympy.PolyRing.from_expr(self,expr)
sympy.PolyRing.from_list(self,element)
sympy.PolyRing.from_terms(self,element)
sympy.PolyRing.ground_new(self,coeff)
sympy.PolyRing.index(self,gen)
sympy.PolyRing.is_multivariate(self)
sympy.PolyRing.is_univariate(self)
sympy.PolyRing.monomial_basis(self,i)
sympy.PolyRing.mul(self,*objs)
sympy.PolyRing.one(self)
sympy.PolyRing.ring_new(self,element)
sympy.PolyRing.term_new(self,monom,coeff)
sympy.PolyRing.to_domain(self)
sympy.PolyRing.to_field(self)
sympy.PolyRing.to_ground(self)
sympy.PolyRing.zero(self)
sympy._parse_symbols(symbols)
sympy.polys.rings.PolyElement(f,*values)
sympy.polys.rings.PolyElement.LC(self)
sympy.polys.rings.PolyElement.LM(self)
sympy.polys.rings.PolyElement.LT(self)
sympy.polys.rings.PolyElement.__add__(p1,p2)
sympy.polys.rings.PolyElement.__call__(f,*values)
sympy.polys.rings.PolyElement.__divmod__(p1,p2)
sympy.polys.rings.PolyElement.__eq__(p1,p2)
sympy.polys.rings.PolyElement.__ge__(p1,p2)
sympy.polys.rings.PolyElement.__getnewargs__(self)
sympy.polys.rings.PolyElement.__gt__(p1,p2)
sympy.polys.rings.PolyElement.__hash__(self)
sympy.polys.rings.PolyElement.__le__(p1,p2)
sympy.polys.rings.PolyElement.__lt__(p1,p2)
sympy.polys.rings.PolyElement.__mod__(p1,p2)
sympy.polys.rings.PolyElement.__mul__(p1,p2)
sympy.polys.rings.PolyElement.__ne__(p1,p2)
sympy.polys.rings.PolyElement.__neg__(self)
sympy.polys.rings.PolyElement.__pos__(self)
sympy.polys.rings.PolyElement.__pow__(self,n)
sympy.polys.rings.PolyElement.__radd__(p1,n)
sympy.polys.rings.PolyElement.__rdivmod__(p1,p2)
sympy.polys.rings.PolyElement.__rmod__(p1,p2)
sympy.polys.rings.PolyElement.__rmul__(p1,p2)
sympy.polys.rings.PolyElement.__rsub__(p1,n)
sympy.polys.rings.PolyElement.__rtruediv__(p1,p2)
sympy.polys.rings.PolyElement.__sub__(p1,p2)
sympy.polys.rings.PolyElement.__truediv__(p1,p2)
sympy.polys.rings.PolyElement._cmp(p1,p2,op)
sympy.polys.rings.PolyElement._drop(self,gen)
sympy.polys.rings.PolyElement._drop_to_ground(self,gen)
sympy.polys.rings.PolyElement._gcd(f,g)
sympy.polys.rings.PolyElement._gcd_QQ(f,g)
sympy.polys.rings.PolyElement._gcd_ZZ(f,g)
sympy.polys.rings.PolyElement._gcd_monom(f,g)
sympy.polys.rings.PolyElement._gcd_zero(f,g)
sympy.polys.rings.PolyElement._get_coeff(self,expv)
sympy.polys.rings.PolyElement._iadd_monom(self,mc)
sympy.polys.rings.PolyElement._iadd_poly_monom(p1,p2,mc)
sympy.polys.rings.PolyElement._norm(f,norm_func)
sympy.polys.rings.PolyElement._pow_generic(self,n)
sympy.polys.rings.PolyElement._pow_multinomial(self,n)
sympy.polys.rings.PolyElement._sorted(self,seq,order)
sympy.polys.rings.PolyElement._term_div(self)
sympy.polys.rings.PolyElement.almosteq(p1,p2,tolerance=None)
sympy.polys.rings.PolyElement.as_expr(self,*symbols)
sympy.polys.rings.PolyElement.as_expr_dict(self)
sympy.polys.rings.PolyElement.cancel(f,g)
sympy.polys.rings.PolyElement.clear_denoms(self)
sympy.polys.rings.PolyElement.coeff(self,element)
sympy.polys.rings.PolyElement.coeffs(self,order=None)
sympy.polys.rings.PolyElement.cofactors(f,g)
sympy.polys.rings.PolyElement.compose(f,x,a=None)
sympy.polys.rings.PolyElement.const(self)
sympy.polys.rings.PolyElement.content(f)
sympy.polys.rings.PolyElement.copy(self)
sympy.polys.rings.PolyElement.decompose(f)
sympy.polys.rings.PolyElement.deflate(f,*G)
sympy.polys.rings.PolyElement.degree(f,x=None)
sympy.polys.rings.PolyElement.degrees(f)
sympy.polys.rings.PolyElement.diff(f,x)
sympy.polys.rings.PolyElement.discriminant(f)
sympy.polys.rings.PolyElement.div(self,fv)
sympy.polys.rings.PolyElement.drop(self,gen)
sympy.polys.rings.PolyElement.drop_to_ground(self,gen)
sympy.polys.rings.PolyElement.evaluate(f,x,a=None)
sympy.polys.rings.PolyElement.exquo(f,G)
sympy.polys.rings.PolyElement.extract_ground(f,g)
sympy.polys.rings.PolyElement.factor_list(f)
sympy.polys.rings.PolyElement.gcd(f,g)
sympy.polys.rings.PolyElement.gcdex(f,g)
sympy.polys.rings.PolyElement.gff_list(f)
sympy.polys.rings.PolyElement.half_gcdex(f,g)
sympy.polys.rings.PolyElement.imul_num(p,c)
sympy.polys.rings.PolyElement.inflate(f,J)
sympy.polys.rings.PolyElement.is_cyclotomic(f)
sympy.polys.rings.PolyElement.is_generator(self)
sympy.polys.rings.PolyElement.is_ground(self)
sympy.polys.rings.PolyElement.is_irreducible(f)
sympy.polys.rings.PolyElement.is_linear(f)
sympy.polys.rings.PolyElement.is_monic(f)
sympy.polys.rings.PolyElement.is_monomial(self)
sympy.polys.rings.PolyElement.is_negative(self)
sympy.polys.rings.PolyElement.is_nonnegative(self)
sympy.polys.rings.PolyElement.is_nonpositive(self)
sympy.polys.rings.PolyElement.is_one(f)
sympy.polys.rings.PolyElement.is_positive(self)
sympy.polys.rings.PolyElement.is_primitive(f)
sympy.polys.rings.PolyElement.is_quadratic(f)
sympy.polys.rings.PolyElement.is_squarefree(f)
sympy.polys.rings.PolyElement.is_term(self)
sympy.polys.rings.PolyElement.is_zero(f)
sympy.polys.rings.PolyElement.itercoeffs(self)
sympy.polys.rings.PolyElement.itermonoms(self)
sympy.polys.rings.PolyElement.iterterms(self)
sympy.polys.rings.PolyElement.l1_norm(f)
sympy.polys.rings.PolyElement.lcm(f,g)
sympy.polys.rings.PolyElement.leading_expv(self)
sympy.polys.rings.PolyElement.leading_monom(self)
sympy.polys.rings.PolyElement.leading_term(self)
sympy.polys.rings.PolyElement.listcoeffs(self)
sympy.polys.rings.PolyElement.listmonoms(self)
sympy.polys.rings.PolyElement.listterms(self)
sympy.polys.rings.PolyElement.max_norm(f)
sympy.polys.rings.PolyElement.monic(f)
sympy.polys.rings.PolyElement.monoms(self,order=None)
sympy.polys.rings.PolyElement.mul_ground(f,x)
sympy.polys.rings.PolyElement.mul_monom(f,monom)
sympy.polys.rings.PolyElement.mul_term(f,term)
sympy.polys.rings.PolyElement.new(self,init)
sympy.polys.rings.PolyElement.parent(self)
sympy.polys.rings.PolyElement.pdiv(f,g)
sympy.polys.rings.PolyElement.pexquo(f,g)
sympy.polys.rings.PolyElement.pquo(f,g)
sympy.polys.rings.PolyElement.prem(f,g)
sympy.polys.rings.PolyElement.primitive(f)
sympy.polys.rings.PolyElement.quo(f,G)
sympy.polys.rings.PolyElement.quo_ground(f,x)
sympy.polys.rings.PolyElement.quo_term(f,term)
sympy.polys.rings.PolyElement.rem(f,G)
sympy.polys.rings.PolyElement.resultant(f,g)
sympy.polys.rings.PolyElement.set_ring(self,new_ring)
sympy.polys.rings.PolyElement.shift(f,a)
sympy.polys.rings.PolyElement.sort_key(self)
sympy.polys.rings.PolyElement.sqf_list(f,all=False)
sympy.polys.rings.PolyElement.sqf_norm(f)
sympy.polys.rings.PolyElement.sqf_part(f)
sympy.polys.rings.PolyElement.square(self)
sympy.polys.rings.PolyElement.str(self,printer,precedence,exp_pattern,mul_symbol)
sympy.polys.rings.PolyElement.strip_zero(self)
sympy.polys.rings.PolyElement.sturm(f)
sympy.polys.rings.PolyElement.subresultants(f,g)
sympy.polys.rings.PolyElement.subs(f,x,a=None)
sympy.polys.rings.PolyElement.tail_degree(f,x=None)
sympy.polys.rings.PolyElement.tail_degrees(f)
sympy.polys.rings.PolyElement.terms(self,order=None)
sympy.polys.rings.PolyElement.to_dense(self)
sympy.polys.rings.PolyElement.to_dict(self)
sympy.polys.rings.PolyElement.trunc_ground(f,p)
sympy.polys.rings.PolyRing(cls,symbols,domain,order=lex)
sympy.polys.rings.PolyRing.__eq__(self,other)
sympy.polys.rings.PolyRing.__getitem__(self,key)
sympy.polys.rings.PolyRing.__getnewargs__(self)
sympy.polys.rings.PolyRing.__getstate__(self)
sympy.polys.rings.PolyRing.__hash__(self)
sympy.polys.rings.PolyRing.__ne__(self,other)
sympy.polys.rings.PolyRing.__new__(cls,symbols,domain,order=lex)
sympy.polys.rings.PolyRing._gens(self)
sympy.polys.rings.PolyRing._rebuild_expr(self,expr,mapping)
sympy.polys.rings.PolyRing.add(self,*objs)
sympy.polys.rings.PolyRing.clone(self,symbols=None,domain=None,order=None)
sympy.polys.rings.PolyRing.domain_new(self,element,orig_domain=None)
sympy.polys.rings.PolyRing.drop(self,*gens)
sympy.polys.rings.PolyRing.drop_to_ground(self,*gens)
sympy.polys.rings.PolyRing.from_dict(self,element)
sympy.polys.rings.PolyRing.from_expr(self,expr)
sympy.polys.rings.PolyRing.from_list(self,element)
sympy.polys.rings.PolyRing.from_terms(self,element)
sympy.polys.rings.PolyRing.ground_new(self,coeff)
sympy.polys.rings.PolyRing.index(self,gen)
sympy.polys.rings.PolyRing.is_multivariate(self)
sympy.polys.rings.PolyRing.is_univariate(self)
sympy.polys.rings.PolyRing.monomial_basis(self,i)
sympy.polys.rings.PolyRing.mul(self,*objs)
sympy.polys.rings.PolyRing.one(self)
sympy.polys.rings.PolyRing.ring_new(self,element)
sympy.polys.rings.PolyRing.term_new(self,monom,coeff)
sympy.polys.rings.PolyRing.to_domain(self)
sympy.polys.rings.PolyRing.to_field(self)
sympy.polys.rings.PolyRing.to_ground(self)
sympy.polys.rings.PolyRing.zero(self)
sympy.polys.rings._parse_symbols(symbols)
sympy.polys.rings.ring(symbols,domain,order=lex)
sympy.polys.rings.sring(exprs,*symbols,**options)
sympy.polys.rings.vring(symbols,domain,order=lex)
sympy.polys.rings.xring(symbols,domain,order=lex)
sympy.ring(symbols,domain,order=lex)
sympy.sring(exprs,*symbols,**options)
sympy.vring(symbols,domain,order=lex)
sympy.xring(symbols,domain,order=lex)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/partfrac.py----------------------------------------
A:sympy.polys.partfrac.f->sympify(f)
A:sympy.polys.partfrac.(P, Q)->cancel(H[j]).as_numer_denom()
A:sympy.polys.partfrac._options->set_defaults(options, extension=True).copy()
A:sympy.polys.partfrac.options->set_defaults(options, extension=True)
A:sympy.polys.partfrac.((P, Q), opt)->parallel_poly_from_expr((P, Q), x, **options)
A:sympy.polys.partfrac.(c, nc)->sympify(f).args_cnc(split_1=False)
A:sympy.polys.partfrac.nc->sympify(f).func(*[apart(i, x=x, full=full, **_options) for i in nc])
A:sympy.polys.partfrac.c->apart(f.func._from_args(c), x=x, full=full, **_options)
A:sympy.polys.partfrac.pot->preorder_traversal(f)
A:sympy.polys.partfrac.fc->sympify(f).cancel()
A:sympy.polys.partfrac.(common, P, Q)->Poly(P, x).cancel(Q)
A:sympy.polys.partfrac.(poly, P)->Poly(P, x).div(Q, auto=True)
A:sympy.polys.partfrac.partial->apart_full_decomposition(P, Q)
A:sympy.polys.partfrac.X->numbered_symbols(cls=Dummy)
A:sympy.polys.partfrac.(_, factors)->Poly(Q, x).factor_list()
A:sympy.polys.partfrac.dom->Poly(Q, x).get_domain().inject(*symbols)
A:sympy.polys.partfrac.F->Poly(0, Q.gen, domain=dom)
A:sympy.polys.partfrac.h->h.as_expr().subs(solution).as_expr().subs(solution)
A:sympy.polys.partfrac.q->q.set_domain(dom).set_domain(dom)
A:sympy.polys.partfrac.solution->solve(system, symbols)
A:sympy.polys.partfrac.d->Dummy(name)
A:sympy.polys.partfrac.dummies->dummies('w')
A:sympy.polys.partfrac.rationalpart->apart_list_full_decomposition(P, Q, dummies)
A:sympy.polys.partfrac.u->Function('u')(x)
A:sympy.polys.partfrac.a->Dummy('a')
A:sympy.polys.partfrac.b->(P * B.quo(g)).rem(D)
A:sympy.polys.partfrac.P->Poly(P, x)
A:sympy.polys.partfrac.Q->Poly(Q, x)
A:sympy.polys.partfrac.G->Poly(P, x).gcd(d)
A:sympy.polys.partfrac.D->Dummy(name).quo(G)
A:sympy.polys.partfrac.(B, g)->Poly(Q, x).half_gcdex(D)
A:sympy.polys.partfrac.Dw->Dummy(name).quo(G).subs(x, next(dummygen))
A:sympy.polys.partfrac.numer->Lambda(a, b.as_expr().subs(x, a))
A:sympy.polys.partfrac.denom->Lambda(a, x - a)
A:sympy.polys.partfrac.pfd->polypart.as_expr()
A:sympy.polys.partfrac.de->de.subs(ad[0], an[0]).subs(ad[0], an[0])
A:sympy.polys.partfrac.func->Lambda(an, nu / de ** ex)
sympy.apart(f,x=None,full=False,**options)
sympy.apart_full_decomposition(P,Q)
sympy.apart_list(f,x=None,dummies=None,**options)
sympy.apart_list_full_decomposition(P,Q,dummygen)
sympy.apart_undetermined_coeffs(P,Q)
sympy.assemble_partfrac_list(partial_list)
sympy.polys.partfrac.apart(f,x=None,full=False,**options)
sympy.polys.partfrac.apart_full_decomposition(P,Q)
sympy.polys.partfrac.apart_list(f,x=None,dummies=None,**options)
sympy.polys.partfrac.apart_list_full_decomposition(P,Q,dummygen)
sympy.polys.partfrac.apart_undetermined_coeffs(P,Q)
sympy.polys.partfrac.assemble_partfrac_list(partial_list)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_euclidtools.py----------------------------------------
A:sympy.polys.tests.test_euclidtools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_euclidtools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_euclidtools.(s, t, h)->R.dup_gcdex(f, g)
A:sympy.polys.tests.test_euclidtools.(S, T, H)->R.dup_gcdex(g, f)
A:sympy.polys.tests.test_euclidtools.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_euclidtools.r->R.dmp_LC(b)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_euclidtools.(Rt, t)->ring('t', ZZ)
A:sympy.polys.tests.test_euclidtools.(Rx, x)->ring('x', Rt)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_euclidtools.(f, g, h)->map(R.from_dense, dmp_fateman_poly_F_3(4, ZZ))
A:sympy.polys.tests.test_euclidtools.(H, cff, cfg)->R.dmp_inner_gcd(f, g)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_euclidtools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_euclidtools.(cont, f)->R.dmp_primitive(f_6)
sympy.polys.tests.test_euclidtools.test_dmp_cancel()
sympy.polys.tests.test_euclidtools.test_dmp_content()
sympy.polys.tests.test_euclidtools.test_dmp_discriminant()
sympy.polys.tests.test_euclidtools.test_dmp_gcd()
sympy.polys.tests.test_euclidtools.test_dmp_lcm()
sympy.polys.tests.test_euclidtools.test_dmp_primitive()
sympy.polys.tests.test_euclidtools.test_dmp_subresultants()
sympy.polys.tests.test_euclidtools.test_dup_cancel()
sympy.polys.tests.test_euclidtools.test_dup_discriminant()
sympy.polys.tests.test_euclidtools.test_dup_euclidean_prs()
sympy.polys.tests.test_euclidtools.test_dup_gcd()
sympy.polys.tests.test_euclidtools.test_dup_gcdex()
sympy.polys.tests.test_euclidtools.test_dup_invert()
sympy.polys.tests.test_euclidtools.test_dup_lcm()
sympy.polys.tests.test_euclidtools.test_dup_primitive_prs()
sympy.polys.tests.test_euclidtools.test_dup_subresultants()
sympy.tests.test_euclidtools.test_dmp_cancel()
sympy.tests.test_euclidtools.test_dmp_content()
sympy.tests.test_euclidtools.test_dmp_discriminant()
sympy.tests.test_euclidtools.test_dmp_gcd()
sympy.tests.test_euclidtools.test_dmp_lcm()
sympy.tests.test_euclidtools.test_dmp_primitive()
sympy.tests.test_euclidtools.test_dmp_subresultants()
sympy.tests.test_euclidtools.test_dup_cancel()
sympy.tests.test_euclidtools.test_dup_discriminant()
sympy.tests.test_euclidtools.test_dup_euclidean_prs()
sympy.tests.test_euclidtools.test_dup_gcd()
sympy.tests.test_euclidtools.test_dup_gcdex()
sympy.tests.test_euclidtools.test_dup_invert()
sympy.tests.test_euclidtools.test_dup_lcm()
sympy.tests.test_euclidtools.test_dup_primitive_prs()
sympy.tests.test_euclidtools.test_dup_subresultants()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_groebnertools.py----------------------------------------
A:sympy.polys.tests.test_groebnertools.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_groebnertools.(R, y, x)->ring('y,x', QQ, lex)
A:sympy.polys.tests.test_groebnertools.(R, x, y, z)->ring('x,y,z', QQ)
A:sympy.polys.tests.test_groebnertools.V->range(1, 12 + 1)
A:sympy.polys.tests.test_groebnertools.(R, V)->xring(['x%d' % v for v in V], QQ, lex)
A:sympy.polys.tests.test_groebnertools.(R, x0, x1, x2)->ring('x:3', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, x0, x1, x2, x3)->ring('x:4', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, x, t)->ring('x,t', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.(R, a, b, c, d)->ring('a,b,c,d', ZZ, grlex)
A:sympy.polys.tests.test_groebnertools.s1->sig((0,) * 3, 2)
A:sympy.polys.tests.test_groebnertools.s2->sig((1,) * 3, 4)
A:sympy.polys.tests.test_groebnertools.s3->sig((2,) * 3, 2)
A:sympy.polys.tests.test_groebnertools.(R, x, y, z, t)->ring('x,y,z,t', QQ, grlex)
A:sympy.polys.tests.test_groebnertools.p1->lbp(sig((0,) * 4, 3), R.zero, 12)
A:sympy.polys.tests.test_groebnertools.p2->lbp(sig((0,) * 4, 4), R.zero, 13)
A:sympy.polys.tests.test_groebnertools.p3->lbp(sig((0,) * 4, 4), R.zero, 12)
A:sympy.polys.tests.test_groebnertools.cp1->critical_pair(p1, p2, R)
A:sympy.polys.tests.test_groebnertools.cp2->critical_pair(q1, q2, R)
A:sympy.polys.tests.test_groebnertools.p->lbp(sig((0, 1, 1, 0), 2), R.zero, 7)
A:sympy.polys.tests.test_groebnertools.cp->critical_pair(F[0], F[1], R)
A:sympy.polys.tests.test_groebnertools.s->lbp(sig(Sign(s)[0], 100), Polyn(s), Num(s))
sympy.polys.tests.test_groebnertools._do_test_benchmark_cyclic_4()
sympy.polys.tests.test_groebnertools._do_test_benchmark_czichowski()
sympy.polys.tests.test_groebnertools._do_test_benchmark_katsura_3()
sympy.polys.tests.test_groebnertools._do_test_benchmark_katsura_4()
sympy.polys.tests.test_groebnertools._do_test_benchmark_minpoly()
sympy.polys.tests.test_groebnertools._do_test_groebner()
sympy.polys.tests.test_groebnertools.test_benchmark_coloring()
sympy.polys.tests.test_groebnertools.test_benchmark_cyclic_4_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_cyclic_4_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_czichowski_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_czichowski_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_kastura_4_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_kastura_4_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_katsura3_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_katsura3_f5b()
sympy.polys.tests.test_groebnertools.test_benchmark_minpoly_buchberger()
sympy.polys.tests.test_groebnertools.test_benchmark_minpoly_f5b()
sympy.polys.tests.test_groebnertools.test_cp_key()
sympy.polys.tests.test_groebnertools.test_critical_pair()
sympy.polys.tests.test_groebnertools.test_f5_reduce()
sympy.polys.tests.test_groebnertools.test_groebner_buchberger()
sympy.polys.tests.test_groebnertools.test_groebner_f5b()
sympy.polys.tests.test_groebnertools.test_groebner_gcd()
sympy.polys.tests.test_groebnertools.test_groebner_lcm()
sympy.polys.tests.test_groebnertools.test_is_rewritable_or_comparable()
sympy.polys.tests.test_groebnertools.test_lbp_key()
sympy.polys.tests.test_groebnertools.test_representing_matrices()
sympy.polys.tests.test_groebnertools.test_sig_key()
sympy.tests.test_groebnertools._do_test_benchmark_cyclic_4()
sympy.tests.test_groebnertools._do_test_benchmark_czichowski()
sympy.tests.test_groebnertools._do_test_benchmark_katsura_3()
sympy.tests.test_groebnertools._do_test_benchmark_katsura_4()
sympy.tests.test_groebnertools._do_test_benchmark_minpoly()
sympy.tests.test_groebnertools._do_test_groebner()
sympy.tests.test_groebnertools.test_benchmark_coloring()
sympy.tests.test_groebnertools.test_benchmark_cyclic_4_buchberger()
sympy.tests.test_groebnertools.test_benchmark_cyclic_4_f5b()
sympy.tests.test_groebnertools.test_benchmark_czichowski_buchberger()
sympy.tests.test_groebnertools.test_benchmark_czichowski_f5b()
sympy.tests.test_groebnertools.test_benchmark_kastura_4_buchberger()
sympy.tests.test_groebnertools.test_benchmark_kastura_4_f5b()
sympy.tests.test_groebnertools.test_benchmark_katsura3_buchberger()
sympy.tests.test_groebnertools.test_benchmark_katsura3_f5b()
sympy.tests.test_groebnertools.test_benchmark_minpoly_buchberger()
sympy.tests.test_groebnertools.test_benchmark_minpoly_f5b()
sympy.tests.test_groebnertools.test_cp_key()
sympy.tests.test_groebnertools.test_critical_pair()
sympy.tests.test_groebnertools.test_f5_reduce()
sympy.tests.test_groebnertools.test_groebner_buchberger()
sympy.tests.test_groebnertools.test_groebner_f5b()
sympy.tests.test_groebnertools.test_groebner_gcd()
sympy.tests.test_groebnertools.test_groebner_lcm()
sympy.tests.test_groebnertools.test_is_rewritable_or_comparable()
sympy.tests.test_groebnertools.test_lbp_key()
sympy.tests.test_groebnertools.test_representing_matrices()
sympy.tests.test_groebnertools.test_sig_key()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_rings.py----------------------------------------
A:sympy.polys.tests.test_rings.(x, y, z, t)->symbols('x,y,z,t')
A:sympy.polys.tests.test_rings._lex->Symbol('lex')
A:sympy.polys.tests.test_rings.R1->PolyRing('x,y', ZZ, lex)
A:sympy.polys.tests.test_rings.R2->PolyRing('x,y', ZZ, lex)
A:sympy.polys.tests.test_rings.R3->PolyRing('x,y,z', ZZ, lex)
A:sympy.polys.tests.test_rings.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_rings.R->PolyRing('x,y,z', Rt, lex)
A:sympy.polys.tests.test_rings.(R, x)->ring('x', QQ.algebraic_field(sqrt(2)))
A:sympy.polys.tests.test_rings.Rt->FracField('t', ZZ, lex)
A:sympy.polys.tests.test_rings.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_rings.(Rt, t)->ring('t', Fx)
A:sympy.polys.tests.test_rings.g->R.from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1).copy()
A:sympy.polys.tests.test_rings.(X, Y, Z)->symbols('x,y,z')
A:sympy.polys.tests.test_rings.(x, y, z)->symbols('x,y,z')
A:sympy.polys.tests.test_rings.(R, X, Y, Z)->ring((x, y, z), ZZ)
A:sympy.polys.tests.test_rings.f->PolyRing('x,y,z', Rt, lex).from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1)
A:sympy.polys.tests.test_rings.terms->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).terms()
A:sympy.polys.tests.test_rings.monoms->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).monoms()
A:sympy.polys.tests.test_rings.coeffs->(x ** 2 / 3 + y ** 3 / 4 + z ** 4 / 5).coeffs()
A:sympy.polys.tests.test_rings.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.polys.tests.test_rings.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.polys.tests.test_rings.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.polys.tests.test_rings.(R, t)->ring('t', ZZ)
A:sympy.polys.tests.test_rings.(rQQ, x, t)->ring('x,t', QQ, lex)
A:sympy.polys.tests.test_rings.(rZZ, X, T)->ring('x,t', ZZ, lex)
A:sympy.polys.tests.test_rings.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_rings.(Fx, x)->field('x', ZZ)
A:sympy.polys.tests.test_rings.(R, X)->xring('x:11', QQ)
A:sympy.polys.tests.test_rings.Ry->PolyRing('x,y,z', Rt, lex).drop(x)
A:sympy.polys.tests.test_rings.r->(x ** 3 + 4 * x ** 2 + 2 * x * y * z + 3).compose(x, y * z ** 2 - 1)
A:sympy.polys.tests.test_rings.(_, t)->ring('t', FF(11))
A:sympy.polys.tests.test_rings.(_, u)->ring('u', ZZ)
A:sympy.polys.tests.test_rings.(_, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_rings.(_, x)->ring('x', ZZ)
A:sympy.polys.tests.test_rings.(F, a, b, c)->ring('a,b,c', ZZ)
A:sympy.polys.tests.test_rings.(F, t)->field('t', ZZ)
sympy.polys.tests.test_rings.test_PolyElement_LC()
sympy.polys.tests.test_rings.test_PolyElement_LM()
sympy.polys.tests.test_rings.test_PolyElement_LT()
sympy.polys.tests.test_rings.test_PolyElement___add__()
sympy.polys.tests.test_rings.test_PolyElement___call__()
sympy.polys.tests.test_rings.test_PolyElement___div__()
sympy.polys.tests.test_rings.test_PolyElement___eq__()
sympy.polys.tests.test_rings.test_PolyElement___hash__()
sympy.polys.tests.test_rings.test_PolyElement___mul__()
sympy.polys.tests.test_rings.test_PolyElement___pow__()
sympy.polys.tests.test_rings.test_PolyElement___sub__()
sympy.polys.tests.test_rings.test_PolyElement__lt_le_gt_ge__()
sympy.polys.tests.test_rings.test_PolyElement_as_expr()
sympy.polys.tests.test_rings.test_PolyElement_cancel()
sympy.polys.tests.test_rings.test_PolyElement_clear_denoms()
sympy.polys.tests.test_rings.test_PolyElement_coeff()
sympy.polys.tests.test_rings.test_PolyElement_coeffs()
sympy.polys.tests.test_rings.test_PolyElement_cofactors()
sympy.polys.tests.test_rings.test_PolyElement_compose()
sympy.polys.tests.test_rings.test_PolyElement_copy()
sympy.polys.tests.test_rings.test_PolyElement_decompose()
sympy.polys.tests.test_rings.test_PolyElement_deflate()
sympy.polys.tests.test_rings.test_PolyElement_degree()
sympy.polys.tests.test_rings.test_PolyElement_degrees()
sympy.polys.tests.test_rings.test_PolyElement_diff()
sympy.polys.tests.test_rings.test_PolyElement_discriminant()
sympy.polys.tests.test_rings.test_PolyElement_div()
sympy.polys.tests.test_rings.test_PolyElement_drop()
sympy.polys.tests.test_rings.test_PolyElement_evaluate()
sympy.polys.tests.test_rings.test_PolyElement_factor_list()
sympy.polys.tests.test_rings.test_PolyElement_from_expr()
sympy.polys.tests.test_rings.test_PolyElement_gcd()
sympy.polys.tests.test_rings.test_PolyElement_gcdex()
sympy.polys.tests.test_rings.test_PolyElement_gff_list()
sympy.polys.tests.test_rings.test_PolyElement_is_()
sympy.polys.tests.test_rings.test_PolyElement_l1_norm()
sympy.polys.tests.test_rings.test_PolyElement_leading_monom()
sympy.polys.tests.test_rings.test_PolyElement_leading_term()
sympy.polys.tests.test_rings.test_PolyElement_max_norm()
sympy.polys.tests.test_rings.test_PolyElement_monoms()
sympy.polys.tests.test_rings.test_PolyElement_pdiv()
sympy.polys.tests.test_rings.test_PolyElement_rem()
sympy.polys.tests.test_rings.test_PolyElement_resultant()
sympy.polys.tests.test_rings.test_PolyElement_shift()
sympy.polys.tests.test_rings.test_PolyElement_sqf_list()
sympy.polys.tests.test_rings.test_PolyElement_sqf_norm()
sympy.polys.tests.test_rings.test_PolyElement_sturm()
sympy.polys.tests.test_rings.test_PolyElement_subresultants()
sympy.polys.tests.test_rings.test_PolyElement_subs()
sympy.polys.tests.test_rings.test_PolyElement_tail_degree()
sympy.polys.tests.test_rings.test_PolyElement_tail_degrees()
sympy.polys.tests.test_rings.test_PolyElement_terms()
sympy.polys.tests.test_rings.test_PolyRing___eq__()
sympy.polys.tests.test_rings.test_PolyRing___getitem__()
sympy.polys.tests.test_rings.test_PolyRing___hash__()
sympy.polys.tests.test_rings.test_PolyRing___init__()
sympy.polys.tests.test_rings.test_PolyRing_add()
sympy.polys.tests.test_rings.test_PolyRing_drop()
sympy.polys.tests.test_rings.test_PolyRing_is_()
sympy.polys.tests.test_rings.test_PolyRing_mul()
sympy.polys.tests.test_rings.test_PolyRing_ring_new()
sympy.polys.tests.test_rings.test_sring()
sympy.tests.test_test_PolyElement_LC()
sympy.tests.test_test_PolyElement_LM()
sympy.tests.test_test_PolyElement_LT()
sympy.tests.test_test_PolyElement___add__()
sympy.tests.test_test_PolyElement___call__()
sympy.tests.test_test_PolyElement___div__()
sympy.tests.test_test_PolyElement___eq__()
sympy.tests.test_test_PolyElement___hash__()
sympy.tests.test_test_PolyElement___mul__()
sympy.tests.test_test_PolyElement___pow__()
sympy.tests.test_test_PolyElement___sub__()
sympy.tests.test_test_PolyElement__lt_le_gt_ge__()
sympy.tests.test_test_PolyElement_as_expr()
sympy.tests.test_test_PolyElement_cancel()
sympy.tests.test_test_PolyElement_clear_denoms()
sympy.tests.test_test_PolyElement_coeff()
sympy.tests.test_test_PolyElement_coeffs()
sympy.tests.test_test_PolyElement_cofactors()
sympy.tests.test_test_PolyElement_compose()
sympy.tests.test_test_PolyElement_copy()
sympy.tests.test_test_PolyElement_decompose()
sympy.tests.test_test_PolyElement_deflate()
sympy.tests.test_test_PolyElement_degree()
sympy.tests.test_test_PolyElement_degrees()
sympy.tests.test_test_PolyElement_diff()
sympy.tests.test_test_PolyElement_discriminant()
sympy.tests.test_test_PolyElement_div()
sympy.tests.test_test_PolyElement_drop()
sympy.tests.test_test_PolyElement_evaluate()
sympy.tests.test_test_PolyElement_factor_list()
sympy.tests.test_test_PolyElement_from_expr()
sympy.tests.test_test_PolyElement_gcd()
sympy.tests.test_test_PolyElement_gcdex()
sympy.tests.test_test_PolyElement_gff_list()
sympy.tests.test_test_PolyElement_is_()
sympy.tests.test_test_PolyElement_l1_norm()
sympy.tests.test_test_PolyElement_leading_monom()
sympy.tests.test_test_PolyElement_leading_term()
sympy.tests.test_test_PolyElement_max_norm()
sympy.tests.test_test_PolyElement_monoms()
sympy.tests.test_test_PolyElement_pdiv()
sympy.tests.test_test_PolyElement_rem()
sympy.tests.test_test_PolyElement_resultant()
sympy.tests.test_test_PolyElement_shift()
sympy.tests.test_test_PolyElement_sqf_list()
sympy.tests.test_test_PolyElement_sqf_norm()
sympy.tests.test_test_PolyElement_sturm()
sympy.tests.test_test_PolyElement_subresultants()
sympy.tests.test_test_PolyElement_subs()
sympy.tests.test_test_PolyElement_tail_degree()
sympy.tests.test_test_PolyElement_tail_degrees()
sympy.tests.test_test_PolyElement_terms()
sympy.tests.test_test_PolyRing___eq__()
sympy.tests.test_test_PolyRing___getitem__()
sympy.tests.test_test_PolyRing___hash__()
sympy.tests.test_test_PolyRing___init__()
sympy.tests.test_test_PolyRing_add()
sympy.tests.test_test_PolyRing_drop()
sympy.tests.test_test_PolyRing_is_()
sympy.tests.test_test_PolyRing_mul()
sympy.tests.test_test_PolyRing_ring_new()
sympy.tests.test_test_sring()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_constructor.py----------------------------------------
A:sympy.polys.tests.test_constructor.alg->sympy.polys.domains.QQ.algebraic_field(sqrt(2) + sqrt(3))
A:sympy.polys.tests.test_constructor.dom->sympy.polys.domains.RR.frac_field(x, y)
sympy.polys.tests.test_constructor.test_composite_option()
sympy.polys.tests.test_constructor.test_construct_domain()
sympy.tests.test_test_composite_option()
sympy.tests.test_test_construct_domain()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_fields.py----------------------------------------
A:sympy.polys.tests.test_fields.F1->FracField('x,y', ZZ, lex)
A:sympy.polys.tests.test_fields.F2->FracField('x,y', ZZ, lex)
A:sympy.polys.tests.test_fields.F3->FracField('x,y,z', ZZ, lex)
A:sympy.polys.tests.test_fields.(F, x, y, z)->field('x,y,z', ZZ)
A:sympy.polys.tests.test_fields.g->F.from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1).copy()
A:sympy.polys.tests.test_fields.(X, Y, Z)->symbols('x,y,z')
A:sympy.polys.tests.test_fields.(x, y, z)->symbols('x,y,z')
A:sympy.polys.tests.test_fields.(F, X, Y, Z)->field((x, y, z), ZZ)
A:sympy.polys.tests.test_fields.f->F.from_expr(x ** 3 * y * z + x ** 2 * y ** 7 + 1)
A:sympy.polys.tests.test_fields.(F, x, y)->field('x,y', QQ)
A:sympy.polys.tests.test_fields.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.polys.tests.test_fields.(Fxyzt, x, y, z, t)->field('x,y,z,t', Ruv)
A:sympy.polys.tests.test_fields.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.polys.tests.test_fields.r->f(1, 1, 1)
sympy.polys.tests.test_fields.test_FracElement___add__()
sympy.polys.tests.test_fields.test_FracElement___call__()
sympy.polys.tests.test_fields.test_FracElement___div__()
sympy.polys.tests.test_fields.test_FracElement___hash__()
sympy.polys.tests.test_fields.test_FracElement___mul__()
sympy.polys.tests.test_fields.test_FracElement___neg__()
sympy.polys.tests.test_fields.test_FracElement___pow__()
sympy.polys.tests.test_fields.test_FracElement___sub__()
sympy.polys.tests.test_fields.test_FracElement__lt_le_gt_ge__()
sympy.polys.tests.test_fields.test_FracElement_as_expr()
sympy.polys.tests.test_fields.test_FracElement_compose()
sympy.polys.tests.test_fields.test_FracElement_copy()
sympy.polys.tests.test_fields.test_FracElement_diff()
sympy.polys.tests.test_fields.test_FracElement_evaluate()
sympy.polys.tests.test_fields.test_FracElement_from_expr()
sympy.polys.tests.test_fields.test_FracElement_subs()
sympy.polys.tests.test_fields.test_FracField___eq__()
sympy.polys.tests.test_fields.test_FracField___hash__()
sympy.polys.tests.test_fields.test_FracField___init__()
sympy.tests.test_test_FracElement___add__()
sympy.tests.test_test_FracElement___call__()
sympy.tests.test_test_FracElement___div__()
sympy.tests.test_test_FracElement___hash__()
sympy.tests.test_test_FracElement___mul__()
sympy.tests.test_test_FracElement___neg__()
sympy.tests.test_test_FracElement___pow__()
sympy.tests.test_test_FracElement___sub__()
sympy.tests.test_test_FracElement__lt_le_gt_ge__()
sympy.tests.test_test_FracElement_as_expr()
sympy.tests.test_test_FracElement_compose()
sympy.tests.test_test_FracElement_copy()
sympy.tests.test_test_FracElement_diff()
sympy.tests.test_test_FracElement_evaluate()
sympy.tests.test_test_FracElement_from_expr()
sympy.tests.test_test_FracElement_subs()
sympy.tests.test_test_FracField___eq__()
sympy.tests.test_test_FracField___hash__()
sympy.tests.test_test_FracField___init__()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polyfuncs.py----------------------------------------
A:sympy.polys.tests.test_polyfuncs.U[u0, u1, u2]->symbols('u:3')
A:sympy.polys.tests.test_polyfuncs.(r1, r2)->symbols('r1, r2')
sympy.polys.tests.test_polyfuncs.test_horner()
sympy.polys.tests.test_polyfuncs.test_interpolate()
sympy.polys.tests.test_polyfuncs.test_symmetrize()
sympy.polys.tests.test_polyfuncs.test_viete()
sympy.tests.test_test_horner()
sympy.tests.test_test_interpolate()
sympy.tests.test_test_symmetrize()
sympy.tests.test_test_viete()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_modulargcd.py----------------------------------------
A:sympy.polys.tests.test_modulargcd.(R, x)->ring('x', A)
A:sympy.polys.tests.test_modulargcd.(R, x, y)->ring('x, y', A)
A:sympy.polys.tests.test_modulargcd.hpq->_chinese_remainder_reconstruction_multivariate(hp, hq, p, q)
A:sympy.polys.tests.test_modulargcd.(T, z)->ring('z', R)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z)->ring('x, y, z', A)
A:sympy.polys.tests.test_modulargcd.(f, g, h)->R.fateman_poly_F_3()
A:sympy.polys.tests.test_modulargcd.(H, cff, cfg)->modgcd_multivariate(f, g)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_modulargcd.A->AlgebraicField(QQ, sqrt(2) ** (-1) * sqrt(3))
A:sympy.polys.tests.test_modulargcd.(T, x_, z_)->ring('x_, z_', D)
A:sympy.polys.tests.test_modulargcd.(R, x, t, s)->ring('x, t, s', A)
A:sympy.polys.tests.test_modulargcd.(D, t_, s_)->ring('t_, s_', ZZ)
A:sympy.polys.tests.test_modulargcd.(D, t)->ring('t', ZZ)
A:sympy.polys.tests.test_modulargcd.(R, x, z)->ring('x, z', D)
A:sympy.polys.tests.test_modulargcd.minpoly->(z ** 2 * t ** 2 + z ** 2 * t - 1).drop(0)
sympy.polys.tests.test_modulargcd.test_chinese_remainder()
sympy.polys.tests.test_modulargcd.test_modgcd_algebraic_field()
sympy.polys.tests.test_modulargcd.test_modgcd_bivariate_integers()
sympy.polys.tests.test_modulargcd.test_modgcd_func_field()
sympy.polys.tests.test_modulargcd.test_modgcd_multivariate_integers()
sympy.polys.tests.test_modulargcd.test_modgcd_univariate_integers()
sympy.polys.tests.test_modulargcd.test_to_ZZ_ANP_poly()
sympy.tests.test_modulargcd.test_chinese_remainder()
sympy.tests.test_modulargcd.test_modgcd_algebraic_field()
sympy.tests.test_modulargcd.test_modgcd_bivariate_integers()
sympy.tests.test_modulargcd.test_modgcd_func_field()
sympy.tests.test_modulargcd.test_modgcd_multivariate_integers()
sympy.tests.test_modulargcd.test_modgcd_univariate_integers()
sympy.tests.test_modulargcd.test_to_ZZ_ANP_poly()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polyroots.py----------------------------------------
A:sympy.polys.tests.test_polyroots.(a, b, c, d, e, q, t, x, y, z)->symbols('a,b,c,d,e,q,t,x,y,z')
A:sympy.polys.tests.test_polyroots.(_, roots)->zip(*sorted(zip(key, roots)))
A:sympy.polys.tests.test_polyroots.f->(x ** 2 + 2 * x + 3).subs(x, 2 * x ** 2 + 3 * x).subs(x, 5 * x - 4)
A:sympy.polys.tests.test_polyroots.r->roots(x ** 3 + 40 * x + 64)
A:sympy.polys.tests.test_polyroots.roots->Poly(x ** 5 + 3 * x + 1, x).nroots(n=5)
A:sympy.polys.tests.test_polyroots.lhs->roots_quartic(Poly(x ** 4 + x, x))
A:sympy.polys.tests.test_polyroots.ans->roots_quartic(eq)
A:sympy.polys.tests.test_polyroots.eq->Poly(x ** 3 - 2 * x ** 2 + 6 * sqrt(2) * x ** 2 - 8 * sqrt(2) * x + 23 * x - 14 + 14 * sqrt(2), x, domain='EX')
A:sympy.polys.tests.test_polyroots.sol->roots_quartic(Poly(eq.subs(rep), x))
A:sympy.polys.tests.test_polyroots.z->symbols('z', negative=True)
A:sympy.polys.tests.test_polyroots.zans->roots_quartic(Poly(eq, x))
A:sympy.polys.tests.test_polyroots.a1->Symbol('a1', nonnegative=True)
A:sympy.polys.tests.test_polyroots.b1->Symbol('b1', nonnegative=True)
A:sympy.polys.tests.test_polyroots.r0->roots_quadratic(Poly(a1 * x ** 2 + b1, x))
A:sympy.polys.tests.test_polyroots.r1->roots_binomial(Poly(a1 * x ** 2 + b1, x))
A:sympy.polys.tests.test_polyroots.p->Poly(x ** 5 + 3 * x + 1, x)
A:sympy.polys.tests.test_polyroots.(coeff, poly)->preprocess_roots(Poly(f, x))
A:sympy.polys.tests.test_polyroots.(E, F, J, L)->symbols('E,F,J,L')
A:sympy.polys.tests.test_polyroots.g->((x ** 2 + 1) * f ** 2).expand()
A:sympy.polys.tests.test_polyroots.s2->sqrt(2)
A:sympy.polys.tests.test_polyroots.(a, b, c, d, x)->symbols('a,b,c,d,x')
A:sympy.polys.tests.test_polyroots.(zz, yy, xx, zy, zx, yx, k)->symbols('zz,yy,xx,zy,zx,yx,k')
A:sympy.polys.tests.test_polyroots.R->list(roots(f).keys())
A:sympy.polys.tests.test_polyroots.R1->roots(f.evalf(), x, multiple=True)
A:sympy.polys.tests.test_polyroots.R2->roots(x ** 2 + x + 1.0, x, multiple=True)
A:sympy.polys.tests.test_polyroots.w->Wild('w')
A:sympy.polys.tests.test_polyroots.match->roots_binomial(Poly(a1 * x ** 2 + b1, x)).match(p)
A:sympy.polys.tests.test_polyroots.(_re, _im)->intervals(f, all=True)
A:sympy.polys.tests.test_polyroots._nroots->sorted(_nroots, key=lambda x: x.sort_key())
A:sympy.polys.tests.test_polyroots._sroots->sorted(_sroots, key=lambda x: x.sort_key())
sympy.polys.tests.test_polyroots._nsort(roots)
sympy.polys.tests.test_polyroots.test_issue_8285()
sympy.polys.tests.test_polyroots.test_issue_8289()
sympy.polys.tests.test_polyroots.test_nroots1()
sympy.polys.tests.test_polyroots.test_nroots2()
sympy.polys.tests.test_polyroots.test_root_factors()
sympy.polys.tests.test_polyroots.test_roots()
sympy.polys.tests.test_polyroots.test_roots_binomial()
sympy.polys.tests.test_polyroots.test_roots_cubic()
sympy.polys.tests.test_polyroots.test_roots_cyclotomic()
sympy.polys.tests.test_polyroots.test_roots_inexact()
sympy.polys.tests.test_polyroots.test_roots_linear()
sympy.polys.tests.test_polyroots.test_roots_mixed()
sympy.polys.tests.test_polyroots.test_roots_preprocessed()
sympy.polys.tests.test_polyroots.test_roots_preprocessing()
sympy.polys.tests.test_polyroots.test_roots_quadratic()
sympy.polys.tests.test_polyroots.test_roots_quartic()
sympy.polys.tests.test_polyroots.test_roots_slow()
sympy.tests.test__nsort(roots)
sympy.tests.test_test_issue_8285()
sympy.tests.test_test_issue_8289()
sympy.tests.test_test_nroots1()
sympy.tests.test_test_nroots2()
sympy.tests.test_test_root_factors()
sympy.tests.test_test_roots()
sympy.tests.test_test_roots_binomial()
sympy.tests.test_test_roots_cubic()
sympy.tests.test_test_roots_cyclotomic()
sympy.tests.test_test_roots_inexact()
sympy.tests.test_test_roots_linear()
sympy.tests.test_test_roots_mixed()
sympy.tests.test_test_roots_preprocessed()
sympy.tests.test_test_roots_preprocessing()
sympy.tests.test_test_roots_quadratic()
sympy.tests.test_test_roots_quartic()
sympy.tests.test_test_roots_slow()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_factortools.py----------------------------------------
A:sympy.polys.tests.test_factortools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_factortools.(w_1, w_2)->w_polys()
A:sympy.polys.tests.test_factortools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_factortools.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_factortools.(G, H, S, T)->R.dup_zz_hensel_step(5, f, g, h, s, t)
A:sympy.polys.tests.test_factortools.F_0->R.dup_zz_factor(f)
A:sympy.polys.tests.test_factortools.F_1->R.dup_zz_factor(f)
A:sympy.polys.tests.test_factortools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_factortools.(UV, _x)->ring('x', ZZ)
A:sympy.polys.tests.test_factortools.p->ZZ(nextprime(R.dmp_zz_mignotte_bound(w_1)))
A:sympy.polys.tests.test_factortools.T->zip([t.drop(x) for t in T], K)
A:sympy.polys.tests.test_factortools.S->R.dmp_eval_tail(w_1, A)
A:sympy.polys.tests.test_factortools.(cs, s)->UV.dup_primitive(S)
A:sympy.polys.tests.test_factortools.(_, H)->UV.dup_zz_factor_sqf(s)
A:sympy.polys.tests.test_factortools.factors->R.dmp_zz_wang_hensel_lifting(w_1, H, LC, A, p)
A:sympy.polys.tests.test_factortools.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_factortools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
A:sympy.polys.tests.test_factortools.(coeff, factors)->R.dmp_factor_list(f)
A:sympy.polys.tests.test_factortools.(Rt, t)->ring('t', QQ)
A:sympy.polys.tests.test_factortools.(R, X)->xring('x:200', ZZ)
sympy.polys.tests.test_factortools.test_dmp_ext_factor()
sympy.polys.tests.test_factortools.test_dmp_factor_list()
sympy.polys.tests.test_factortools.test_dmp_irreducible_p()
sympy.polys.tests.test_factortools.test_dmp_trial_division()
sympy.polys.tests.test_factortools.test_dmp_zz_factor()
sympy.polys.tests.test_factortools.test_dmp_zz_mignotte_bound()
sympy.polys.tests.test_factortools.test_dmp_zz_wang()
sympy.polys.tests.test_factortools.test_dup_cyclotomic_p()
sympy.polys.tests.test_factortools.test_dup_ext_factor()
sympy.polys.tests.test_factortools.test_dup_factor_list()
sympy.polys.tests.test_factortools.test_dup_irreducible_p()
sympy.polys.tests.test_factortools.test_dup_trial_division()
sympy.polys.tests.test_factortools.test_dup_zz_cyclotomic_factor()
sympy.polys.tests.test_factortools.test_dup_zz_cyclotomic_poly()
sympy.polys.tests.test_factortools.test_dup_zz_factor()
sympy.polys.tests.test_factortools.test_dup_zz_hensel_lift()
sympy.polys.tests.test_factortools.test_dup_zz_hensel_step()
sympy.polys.tests.test_factortools.test_dup_zz_irreducible_p()
sympy.polys.tests.test_factortools.test_dup_zz_mignotte_bound()
sympy.polys.tests.test_factortools.test_issue_6355()
sympy.tests.test_factortools.test_dmp_ext_factor()
sympy.tests.test_factortools.test_dmp_factor_list()
sympy.tests.test_factortools.test_dmp_irreducible_p()
sympy.tests.test_factortools.test_dmp_trial_division()
sympy.tests.test_factortools.test_dmp_zz_factor()
sympy.tests.test_factortools.test_dmp_zz_mignotte_bound()
sympy.tests.test_factortools.test_dmp_zz_wang()
sympy.tests.test_factortools.test_dup_cyclotomic_p()
sympy.tests.test_factortools.test_dup_ext_factor()
sympy.tests.test_factortools.test_dup_factor_list()
sympy.tests.test_factortools.test_dup_irreducible_p()
sympy.tests.test_factortools.test_dup_trial_division()
sympy.tests.test_factortools.test_dup_zz_cyclotomic_factor()
sympy.tests.test_factortools.test_dup_zz_cyclotomic_poly()
sympy.tests.test_factortools.test_dup_zz_factor()
sympy.tests.test_factortools.test_dup_zz_hensel_lift()
sympy.tests.test_factortools.test_dup_zz_hensel_step()
sympy.tests.test_factortools.test_dup_zz_irreducible_p()
sympy.tests.test_factortools.test_dup_zz_mignotte_bound()
sympy.tests.test_factortools.test_issue_6355()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_orthopolys.py----------------------------------------
sympy.polys.tests.test_orthopolys.test_chebyshevt_poly()
sympy.polys.tests.test_orthopolys.test_chebyshevu_poly()
sympy.polys.tests.test_orthopolys.test_gegenbauer_poly()
sympy.polys.tests.test_orthopolys.test_hermite_poly()
sympy.polys.tests.test_orthopolys.test_jacobi_poly()
sympy.polys.tests.test_orthopolys.test_laguerre_poly()
sympy.polys.tests.test_orthopolys.test_legendre_poly()
sympy.tests.test_test_chebyshevt_poly()
sympy.tests.test_test_chebyshevu_poly()
sympy.tests.test_test_gegenbauer_poly()
sympy.tests.test_test_hermite_poly()
sympy.tests.test_test_jacobi_poly()
sympy.tests.test_test_laguerre_poly()
sympy.tests.test_test_legendre_poly()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_orderings.py----------------------------------------
A:sympy.polys.tests.test_orderings.ilex->InverseOrder(lex)
A:sympy.polys.tests.test_orderings.igrlex->InverseOrder(grlex)
A:sympy.polys.tests.test_orderings.P->ProductOrder((grlex, lambda m: m[:2]), (grlex, lambda m: m[2:]))
sympy.polys.tests.test_orderings.test_InverseOrder()
sympy.polys.tests.test_orderings.test_ProductOrder()
sympy.polys.tests.test_orderings.test_build_product_order()
sympy.polys.tests.test_orderings.test_grevlex_order()
sympy.polys.tests.test_orderings.test_grlex_order()
sympy.polys.tests.test_orderings.test_lex_order()
sympy.polys.tests.test_orderings.test_monomial_key()
sympy.tests.test_ordetest_InverseOrder()
sympy.tests.test_ordetest_ProductOrder()
sympy.tests.test_ordetest_build_product_order()
sympy.tests.test_ordetest_grevlex_order()
sympy.tests.test_ordetest_grlex_order()
sympy.tests.test_ordetest_lex_order()
sympy.tests.test_ordetest_monomial_key()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_dispersion.py----------------------------------------
A:sympy.polys.tests.test_dispersion.x->Symbol('x')
A:sympy.polys.tests.test_dispersion.a->Symbol('a')
A:sympy.polys.tests.test_dispersion.fp->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x)
A:sympy.polys.tests.test_dispersion.gp->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(x, x - 3 * a).as_poly(x)
A:sympy.polys.tests.test_dispersion.fpa->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(a, 2).as_poly(x)
A:sympy.polys.tests.test_dispersion.gpa->poly(a ** 2 * x ** 3 + (a ** 3 + a ** 2 + a + 1) * x, x).as_expr().subs(x, x - 3 * a).as_poly(x).as_expr().subs(a, 2).as_poly(x)
sympy.polys.tests.test_dispersion.test_dispersion()
sympy.tests.test_dispersion.test_dispersion()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polyutils.py----------------------------------------
A:sympy.polys.tests.test_polyutils.(x, y, z, p, q, r, s, t, u, v, w)->symbols('x,y,z,p,q,r,s,t,u,v,w')
A:sympy.polys.tests.test_polyutils.(A, B)->symbols('A,B', commutative=False)
A:sympy.polys.tests.test_polyutils.X->symbols('x0,x1,x2,x10,x11,x12,x20,x21,x22')
sympy.polys.tests.test_polyutils.test__analyze_gens()
sympy.polys.tests.test_polyutils.test__dict_from_expr_if_gens()
sympy.polys.tests.test_polyutils.test__dict_from_expr_no_gens()
sympy.polys.tests.test_polyutils.test__parallel_dict_from_expr_if_gens()
sympy.polys.tests.test_polyutils.test__parallel_dict_from_expr_no_gens()
sympy.polys.tests.test_polyutils.test__sort_factors()
sympy.polys.tests.test_polyutils.test__sort_gens()
sympy.polys.tests.test_polyutils.test__unify_gens()
sympy.polys.tests.test_polyutils.test_dict_from_expr()
sympy.polys.tests.test_polyutils.test_parallel_dict_from_expr()
sympy.tests.test_polyutils.test__analyze_gens()
sympy.tests.test_polyutils.test__dict_from_expr_if_gens()
sympy.tests.test_polyutils.test__dict_from_expr_no_gens()
sympy.tests.test_polyutils.test__parallel_dict_from_expr_if_gens()
sympy.tests.test_polyutils.test__parallel_dict_from_expr_no_gens()
sympy.tests.test_polyutils.test__sort_factors()
sympy.tests.test_polyutils.test__sort_gens()
sympy.tests.test_polyutils.test__unify_gens()
sympy.tests.test_polyutils.test_dict_from_expr()
sympy.tests.test_polyutils.test_parallel_dict_from_expr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_galoistools.py----------------------------------------
A:sympy.polys.tests.test_galoistools.f->sympy.polys.domains.ZZ.map([1, 2, 5, 26, 41, 39, 38])
A:sympy.polys.tests.test_galoistools.g->sympy.polys.domains.ZZ.map([[1, 0, 1], [1, 1, 2]])
A:sympy.polys.tests.test_galoistools.h->gf_frobenius_map(f, g, b, p, ZZ)
A:sympy.polys.tests.test_galoistools.c->sympy.polys.domains.ZZ.map([1, 0])
A:sympy.polys.tests.test_galoistools.b->gf_frobenius_monomial_base(g, p, ZZ)
A:sympy.polys.tests.test_galoistools.h1->gf_pow_mod(f, p, g, p, ZZ)
A:sympy.polys.tests.test_galoistools.Q->sympy.polys.domains.ZZ.map([[1, 0, 0, 0, 0, 0, 0, 0], [2, 1, 7, 11, 10, 12, 5, 11], [3, 6, 4, 3, 0, 4, 7, 2], [4, 3, 6, 5, 1, 6, 2, 3], [2, 11, 8, 8, 3, 1, 3, 11], [6, 11, 8, 6, 2, 7, 10, 9], [5, 11, 7, 10, 0, 11, 7, 12], [3, 3, 12, 5, 0, 11, 9, 12]])
A:sympy.polys.tests.test_galoistools.p->ZZ(nextprime(int((2 ** 4 * pi).evalf())))
sympy.polys.tests.test_galoistools.test_gf_LC()
sympy.polys.tests.test_galoistools.test_gf_TC()
sympy.polys.tests.test_galoistools.test_gf_arith()
sympy.polys.tests.test_galoistools.test_gf_berlekamp()
sympy.polys.tests.test_galoistools.test_gf_cofactors()
sympy.polys.tests.test_galoistools.test_gf_compose()
sympy.polys.tests.test_galoistools.test_gf_crt()
sympy.polys.tests.test_galoistools.test_gf_csolve()
sympy.polys.tests.test_galoistools.test_gf_ddf()
sympy.polys.tests.test_galoistools.test_gf_degree()
sympy.polys.tests.test_galoistools.test_gf_diff()
sympy.polys.tests.test_galoistools.test_gf_division()
sympy.polys.tests.test_galoistools.test_gf_edf()
sympy.polys.tests.test_galoistools.test_gf_eval()
sympy.polys.tests.test_galoistools.test_gf_expand()
sympy.polys.tests.test_galoistools.test_gf_factor()
sympy.polys.tests.test_galoistools.test_gf_frobenius_map()
sympy.polys.tests.test_galoistools.test_gf_from_to_dict()
sympy.polys.tests.test_galoistools.test_gf_from_to_int_poly()
sympy.polys.tests.test_galoistools.test_gf_gcd()
sympy.polys.tests.test_galoistools.test_gf_gcdex()
sympy.polys.tests.test_galoistools.test_gf_int()
sympy.polys.tests.test_galoistools.test_gf_irreducible()
sympy.polys.tests.test_galoistools.test_gf_irreducible_p()
sympy.polys.tests.test_galoistools.test_gf_lcm()
sympy.polys.tests.test_galoistools.test_gf_monic()
sympy.polys.tests.test_galoistools.test_gf_normal()
sympy.polys.tests.test_galoistools.test_gf_powering()
sympy.polys.tests.test_galoistools.test_gf_shift()
sympy.polys.tests.test_galoistools.test_gf_squarefree()
sympy.polys.tests.test_galoistools.test_gf_strip()
sympy.polys.tests.test_galoistools.test_gf_trace_map()
sympy.polys.tests.test_galoistools.test_gf_trunc()
sympy.tests.test_galoistools.test_gf_LC()
sympy.tests.test_galoistools.test_gf_TC()
sympy.tests.test_galoistools.test_gf_arith()
sympy.tests.test_galoistools.test_gf_berlekamp()
sympy.tests.test_galoistools.test_gf_cofactors()
sympy.tests.test_galoistools.test_gf_compose()
sympy.tests.test_galoistools.test_gf_crt()
sympy.tests.test_galoistools.test_gf_csolve()
sympy.tests.test_galoistools.test_gf_ddf()
sympy.tests.test_galoistools.test_gf_degree()
sympy.tests.test_galoistools.test_gf_diff()
sympy.tests.test_galoistools.test_gf_division()
sympy.tests.test_galoistools.test_gf_edf()
sympy.tests.test_galoistools.test_gf_eval()
sympy.tests.test_galoistools.test_gf_expand()
sympy.tests.test_galoistools.test_gf_factor()
sympy.tests.test_galoistools.test_gf_frobenius_map()
sympy.tests.test_galoistools.test_gf_from_to_dict()
sympy.tests.test_galoistools.test_gf_from_to_int_poly()
sympy.tests.test_galoistools.test_gf_gcd()
sympy.tests.test_galoistools.test_gf_gcdex()
sympy.tests.test_galoistools.test_gf_int()
sympy.tests.test_galoistools.test_gf_irreducible()
sympy.tests.test_galoistools.test_gf_irreducible_p()
sympy.tests.test_galoistools.test_gf_lcm()
sympy.tests.test_galoistools.test_gf_monic()
sympy.tests.test_galoistools.test_gf_normal()
sympy.tests.test_galoistools.test_gf_powering()
sympy.tests.test_galoistools.test_gf_shift()
sympy.tests.test_galoistools.test_gf_squarefree()
sympy.tests.test_galoistools.test_gf_strip()
sympy.tests.test_galoistools.test_gf_trace_map()
sympy.tests.test_galoistools.test_gf_trunc()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_densebasic.py----------------------------------------
A:sympy.polys.tests.test_densebasic.g->dmp_normal([[1, 0, 0, 0, 0], [1, 0, 0], [1]], 1, ZZ)
A:sympy.polys.tests.test_densebasic.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_densebasic.K->R.to_domain()
A:sympy.polys.tests.test_densebasic.f->dup_random(3, -40, 40, ZZ)
sympy.polys.tests.test_densebasic.test_dmp_LC()
sympy.polys.tests.test_densebasic.test_dmp_TC()
sympy.polys.tests.test_densebasic.test_dmp_apply_pairs()
sympy.polys.tests.test_densebasic.test_dmp_convert()
sympy.polys.tests.test_densebasic.test_dmp_copy()
sympy.polys.tests.test_densebasic.test_dmp_deflate()
sympy.polys.tests.test_densebasic.test_dmp_degree()
sympy.polys.tests.test_densebasic.test_dmp_degree_in()
sympy.polys.tests.test_densebasic.test_dmp_degree_list()
sympy.polys.tests.test_densebasic.test_dmp_eject()
sympy.polys.tests.test_densebasic.test_dmp_exclude()
sympy.polys.tests.test_densebasic.test_dmp_from_sympy()
sympy.polys.tests.test_densebasic.test_dmp_from_to_dict()
sympy.polys.tests.test_densebasic.test_dmp_ground()
sympy.polys.tests.test_densebasic.test_dmp_ground_LC()
sympy.polys.tests.test_densebasic.test_dmp_ground_TC()
sympy.polys.tests.test_densebasic.test_dmp_ground_nth()
sympy.polys.tests.test_densebasic.test_dmp_ground_p()
sympy.polys.tests.test_densebasic.test_dmp_grounds()
sympy.polys.tests.test_densebasic.test_dmp_include()
sympy.polys.tests.test_densebasic.test_dmp_inflate()
sympy.polys.tests.test_densebasic.test_dmp_inject()
sympy.polys.tests.test_densebasic.test_dmp_list_terms()
sympy.polys.tests.test_densebasic.test_dmp_multi_deflate()
sympy.polys.tests.test_densebasic.test_dmp_negative_p()
sympy.polys.tests.test_densebasic.test_dmp_nest()
sympy.polys.tests.test_densebasic.test_dmp_normal()
sympy.polys.tests.test_densebasic.test_dmp_nth()
sympy.polys.tests.test_densebasic.test_dmp_one()
sympy.polys.tests.test_densebasic.test_dmp_one_p()
sympy.polys.tests.test_densebasic.test_dmp_permute()
sympy.polys.tests.test_densebasic.test_dmp_positive_p()
sympy.polys.tests.test_densebasic.test_dmp_raise()
sympy.polys.tests.test_densebasic.test_dmp_strip()
sympy.polys.tests.test_densebasic.test_dmp_swap()
sympy.polys.tests.test_densebasic.test_dmp_terms_gcd()
sympy.polys.tests.test_densebasic.test_dmp_true_LT()
sympy.polys.tests.test_densebasic.test_dmp_validate()
sympy.polys.tests.test_densebasic.test_dmp_zero()
sympy.polys.tests.test_densebasic.test_dmp_zero_p()
sympy.polys.tests.test_densebasic.test_dmp_zeros()
sympy.polys.tests.test_densebasic.test_dup_LC()
sympy.polys.tests.test_densebasic.test_dup_TC()
sympy.polys.tests.test_densebasic.test_dup_convert()
sympy.polys.tests.test_densebasic.test_dup_copy()
sympy.polys.tests.test_densebasic.test_dup_deflate()
sympy.polys.tests.test_densebasic.test_dup_degree()
sympy.polys.tests.test_densebasic.test_dup_from_sympy()
sympy.polys.tests.test_densebasic.test_dup_from_to_dict()
sympy.polys.tests.test_densebasic.test_dup_inflate()
sympy.polys.tests.test_densebasic.test_dup_multi_deflate()
sympy.polys.tests.test_densebasic.test_dup_normal()
sympy.polys.tests.test_densebasic.test_dup_nth()
sympy.polys.tests.test_densebasic.test_dup_random()
sympy.polys.tests.test_densebasic.test_dup_reverse()
sympy.polys.tests.test_densebasic.test_dup_slice()
sympy.polys.tests.test_densebasic.test_dup_strip()
sympy.polys.tests.test_densebasic.test_dup_terms_gcd()
sympy.tests.test_densebasic.test_dmp_LC()
sympy.tests.test_densebasic.test_dmp_TC()
sympy.tests.test_densebasic.test_dmp_apply_pairs()
sympy.tests.test_densebasic.test_dmp_convert()
sympy.tests.test_densebasic.test_dmp_copy()
sympy.tests.test_densebasic.test_dmp_deflate()
sympy.tests.test_densebasic.test_dmp_degree()
sympy.tests.test_densebasic.test_dmp_degree_in()
sympy.tests.test_densebasic.test_dmp_degree_list()
sympy.tests.test_densebasic.test_dmp_eject()
sympy.tests.test_densebasic.test_dmp_exclude()
sympy.tests.test_densebasic.test_dmp_from_sympy()
sympy.tests.test_densebasic.test_dmp_from_to_dict()
sympy.tests.test_densebasic.test_dmp_ground()
sympy.tests.test_densebasic.test_dmp_ground_LC()
sympy.tests.test_densebasic.test_dmp_ground_TC()
sympy.tests.test_densebasic.test_dmp_ground_nth()
sympy.tests.test_densebasic.test_dmp_ground_p()
sympy.tests.test_densebasic.test_dmp_grounds()
sympy.tests.test_densebasic.test_dmp_include()
sympy.tests.test_densebasic.test_dmp_inflate()
sympy.tests.test_densebasic.test_dmp_inject()
sympy.tests.test_densebasic.test_dmp_list_terms()
sympy.tests.test_densebasic.test_dmp_multi_deflate()
sympy.tests.test_densebasic.test_dmp_negative_p()
sympy.tests.test_densebasic.test_dmp_nest()
sympy.tests.test_densebasic.test_dmp_normal()
sympy.tests.test_densebasic.test_dmp_nth()
sympy.tests.test_densebasic.test_dmp_one()
sympy.tests.test_densebasic.test_dmp_one_p()
sympy.tests.test_densebasic.test_dmp_permute()
sympy.tests.test_densebasic.test_dmp_positive_p()
sympy.tests.test_densebasic.test_dmp_raise()
sympy.tests.test_densebasic.test_dmp_strip()
sympy.tests.test_densebasic.test_dmp_swap()
sympy.tests.test_densebasic.test_dmp_terms_gcd()
sympy.tests.test_densebasic.test_dmp_true_LT()
sympy.tests.test_densebasic.test_dmp_validate()
sympy.tests.test_densebasic.test_dmp_zero()
sympy.tests.test_densebasic.test_dmp_zero_p()
sympy.tests.test_densebasic.test_dmp_zeros()
sympy.tests.test_densebasic.test_dup_LC()
sympy.tests.test_densebasic.test_dup_TC()
sympy.tests.test_densebasic.test_dup_convert()
sympy.tests.test_densebasic.test_dup_copy()
sympy.tests.test_densebasic.test_dup_deflate()
sympy.tests.test_densebasic.test_dup_degree()
sympy.tests.test_densebasic.test_dup_from_sympy()
sympy.tests.test_densebasic.test_dup_from_to_dict()
sympy.tests.test_densebasic.test_dup_inflate()
sympy.tests.test_densebasic.test_dup_multi_deflate()
sympy.tests.test_densebasic.test_dup_normal()
sympy.tests.test_densebasic.test_dup_nth()
sympy.tests.test_densebasic.test_dup_random()
sympy.tests.test_densebasic.test_dup_reverse()
sympy.tests.test_densebasic.test_dup_slice()
sympy.tests.test_densebasic.test_dup_strip()
sympy.tests.test_densebasic.test_dup_terms_gcd()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_injections.py----------------------------------------
A:sympy.polys.tests.test_injections.R->_make_r2()
A:sympy.polys.tests.test_injections.F->_make_f2()
sympy.polys.tests.test_injections.__make_f2()
sympy.polys.tests.test_injections.__make_r2()
sympy.polys.tests.test_injections._make_f1()
sympy.polys.tests.test_injections._make_f2()
sympy.polys.tests.test_injections._make_r1()
sympy.polys.tests.test_injections._make_r2()
sympy.polys.tests.test_injections.test_vfield()
sympy.polys.tests.test_injections.test_vring()
sympy.tests.test_injections.__make_f2()
sympy.tests.test_injections.__make_r2()
sympy.tests.test_injections._make_f1()
sympy.tests.test_injections._make_f2()
sympy.tests.test_injections._make_r1()
sympy.tests.test_injections._make_r2()
sympy.tests.test_injections.test_vfield()
sympy.tests.test_injections.test_vring()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_densearith.py----------------------------------------
A:sympy.polys.tests.test_densearith.F_0->dmp_mul_ground(dmp_normal(f_0, 2, QQ), QQ(1, 7), 2, QQ)
A:sympy.polys.tests.test_densearith.f->dmp_normal([[1], [], [1, 0, 0]], 1, QQ)
A:sympy.polys.tests.test_densearith.g->dmp_normal([[2], [-2, 0]], 1, QQ)
A:sympy.polys.tests.test_densearith.h->dup_normal([4, 0, 0, 4, 28, 0, 1, 14, 49], ZZ)
A:sympy.polys.tests.test_densearith.K->FF(9)
A:sympy.polys.tests.test_densearith.p1->dup_normal([83, -61, -86, -24, 12, 43, -88, -9, 42, 55, -66, 74, 95, -25, -12, 68, -99, 4, 45, 6, -15, -19, 78, 65, -55, 47, -13, 17, 86, 81, -58, -27, 50, -40, -24, 39, -41, -92, 75, 90, -1, 40, -15, -27, -35, 68, 70, -64, -40, 78, -88, -58, -39, 69, 46, 12, 28, -94, -37, -50, -80, -96, -61, 25, 1, 71, 4, 12, 48, 4, 34, -47, -75, 5, 48, 82, 88, 23, 98, 35, 17, -10, 48, -61, -95, 47, 65, -19, -66, -57, -6, -51, -42, -89, 66, -13, 18, 37, 90, -23, 72, 96, -53, 0, 40, -73, -52, -68, 32, -25, -53, 79, -52, 18, 44, 73, -81, 31, -90, 70, 3, 36, 48, 76, -24, -44, 23, 98, -4, 73, 69, 88, -70, 14, -68, 94, -78, -15, -64, -97, -70, -35, 65, 88, 49, -53, -7, 12, -45, -7, 59, -94, 99, -2, 67, -60, -71, 29, -62, -77, 1, 51, 17, 80, -20, -47, -19, 24, -9, 39, -23, 21, -84, 10, 84, 56, -17, -21, -66, 85, 70, 46, -51, -22, -95, 78, -60, -96, -97, -45, 72, 35, 30, -61, -92, -93, -60, -61, 4, -4, -81, -73, 46, 53, -11, 26, 94, 45, 14, -78, 55, 84, -68, 98, 60, 23, 100, -63, 68, 96, -16, 3, 56, 21, -58, 62, -67, 66, 85, 41, -79, -22, 97, -67, 82, 82, -96, -20, -7, 48, -67, 48, -9, -39, 78], ZZ)
A:sympy.polys.tests.test_densearith.p2->dup_normal([52, 88, 76, 66, 9, -64, 46, -20, -28, 69, 60, 96, -36, -92, -30, -11, -35, 35, 55, 63, -92, -7, 25, -58, 74, 55, -6, 4, 47, -92, -65, 67, -45, 74, -76, 59, -6, 69, 39, 24, -71, -7, 39, -45, 60, -68, 98, 97, -79, 17, 4, 94, -64, 68, -100, -96, -2, 3, 22, 96, 54, -77, -86, 67, 6, 57, 37, 40, 89, -78, 64, -94, -45, -92, 57, 87, -26, 36, 19, 97, 25, 77, -87, 24, 43, -5, 35, 57, 83, 71, 35, 63, 61, 96, -22, 8, -1, 96, 43, 45, 94, -93, 36, 71, -41, -99, 85, -48, 59, 52, -17, 5, 87, -16, -68, -54, 76, -18, 100, 91, -42, -70, -66, -88, -12, 1, 95, -82, 52, 43, -29, 3, 12, 72, -99, -43, -32, -93, -51, 16, -20, -12, -11, 5, 33, -38, 93, -5, -74, 25, 74, -58, 93, 59, -63, -86, 63, -20, -4, -74, -73, -95, 29, -28, 93, -91, -2, -38, -62, 77, -58, -85, -28, 95, 38, 19, -69, 86, 94, 25, -2, -4, 47, 34, -59, 35, -48, 29, -63, -53, 34, 29, 66, 73, 6, 92, -84, 89, 15, 81, 93, 97, 51, -72, -78, 25, 60, 90, -45, 39, 67, -84, -62, 57, 26, -32, -56, -14, -83, 76, 5, -2, 99, -100, 28, 46, 94, -7, 53, -25, 16, -23, -36, 89, -78, -63, 31, 1, 84, -99, -52, 76, 48, 90, -76, 44, -19, 54, -36, -9, -73, -100, -69, 31, 42, 25, -39, 76, -26, -8, -14, 51, 3, 37, 45, 2, -54, 13, -34, -92, 17, -25, -65, 53, -63, 30, 4, -70, -67, 90, 52, 51, 18, -3, 31, -45, -9, 59, 63, -87, 22, -32, 29, -38, 21, 36, -82, 27, -11], ZZ)
A:sympy.polys.tests.test_densearith.res->dup_normal([4316, 4132, -3532, -7974, -11303, -10069, 5484, -3330, -5874, 7734, 4673, 11327, -9884, -8031, 17343, 21035, -10570, -9285, 15893, 3780, -14083, 8819, 17592, 10159, 7174, -11587, 8598, -16479, 3602, 25596, 9781, 12163, 150, 18749, -21782, -12307, 27578, -2757, -12573, 12565, 6345, -18956, 19503, -15617, 1443, -16778, 36851, 23588, -28474, 5749, 40695, -7521, -53669, -2497, -18530, 6770, 57038, 3926, -6927, -15399, 1848, -64649, -27728, 3644, 49608, 15187, -8902, -9480, -7398, -40425, 4824, 23767, -7594, -6905, 33089, 18786, 12192, 24670, 31114, 35334, -4501, -14676, 7107, -59018, -21352, 20777, 19661, 20653, 33754, -885, -43758, 6269, 51897, -28719, -97488, -9527, 13746, 11644, 17644, -21720, 23782, -10481, 47867, 20752, 33810, -1875, 39918, -7710, -40840, 19808, -47075, 23066, 46616, 25201, 9287, 35436, -1602, 9645, -11978, 13273, 15544, 33465, 20063, 44539, 11687, 27314, -6538, -37467, 14031, 32970, -27086, 41323, 29551, 65910, -39027, -37800, -22232, 8212, 46316, -28981, -55282, 50417, -44929, -44062, 73879, 37573, -2596, -10877, -21893, -133218, -33707, -25753, -9531, 17530, 61126, 2748, -56235, 43874, -10872, -90459, -30387, 115267, -7264, -44452, 122626, 14839, -599, 10337, 57166, -67467, -54957, 63669, 1202, 18488, 52594, 7205, -97822, 612, 78069, -5403, -63562, 47236, 36873, -154827, -26188, 82427, -39521, 5628, 7416, 5276, -53095, 47050, 26121, -42207, 79021, -13035, 2499, -66943, 29040, -72355, -23480, 23416, -12885, -44225, -42688, -4224, 19858, 55299, 15735, 11465, 101876, -39169, 51786, 14723, 43280, -68697, 16410, 92295, 56767, 7183, 111850, 4550, 115451, -38443, -19642, -35058, 10230, 93829, 8925, 63047, 3146, 29250, 8530, 5255, -98117, -115517, -76817, -8724, 41044, 1312, -35974, 79333, -28567, 7547, -10580, -24559, -16238, 10794, -3867, 24848, 57770, -51536, -35040, 71033, 29853, 62029, -7125, -125585, -32169, -47907, 156811, -65176, -58006, -15757, -57861, 11963, 30225, -41901, -41681, 31310, 27982, 18613, 61760, 60746, -59096, 33499, 30097, -17997, 24032, 56442, -83042, 23747, -20931, -21978, -158752, -9883, -73598, -7987, -7333, -125403, -116329, 30585, 53281, 51018, -29193, 88575, 8264, -40147, -16289, 113088, 12810, -6508, 101552, -13037, 34440, -41840, 101643, 24263, 80532, 61748, 65574, 6423, -20672, 6591, -10834, -71716, 86919, -92626, 39161, 28490, 81319, 46676, 106720, 43530, 26998, 57456, -8862, 60989, 13982, 3119, -2224, 14743, 55415, -49093, -29303, 28999, 1789, 55953, -84043, -7780, -65013, 57129, -47251, 61484, 61994, -78361, -82778, 22487, -26894, 9756, -74637, -15519, -4360, 30115, 42433, 35475, 15286, 69768, 21509, -20214, 78675, -21163, 13596, 11443, -10698, -53621, -53867, -24155, 64500, -42784, -33077, -16500, 873, -52788, 14546, -38011, 36974, -39849, -34029, -94311, 83068, -50437, -26169, -46746, 59185, 42259, -101379, -12943, 30089, -59086, 36271, 22723, -30253, -52472, -70826, -23289, 3331, -31687, 14183, -857, -28627, 35246, -51284, 5636, -6933, 66539, 36654, 50927, 24783, 3457, 33276, 45281, 45650, -4938, -9968, -22590, 47995, 69229, 5214, -58365, -17907, -14651, 18668, 18009, 12649, -11851, -13387, 20339, 52472, -1087, -21458, -68647, 52295, 15849, 40608, 15323, 25164, -29368, 10352, -7055, 7159, 21695, -5373, -54849, 101103, -24963, -10511, 33227, 7659, 41042, -69588, 26718, -20515, 6441, 38135, -63, 24088, -35364, -12785, -18709, 47843, 48533, -48575, 17251, -19394, 32878, -9010, -9050, 504, -12407, 28076, -3429, 25324, -4210, -26119, 752, -29203, 28251, -11324, -32140, -3366, -25135, 18702, -31588, -7047, -24267, 49987, -14975, -33169, 37744, -7720, -9035, 16964, -2807, -421, 14114, -17097, -13662, 40628, -12139, -9427, 5369, 17551, -13232, -16211, 9804, -7422, 2677, 28635, -8280, -4906, 2908, -22558, 5604, 12459, 8756, -3980, -4745, -18525, 7913, 5970, -16457, 20230, -6247, -13812, 2505, 11899, 1409, -15094, 22540, -18863, 137, 11123, -4516, 2290, -8594, 12150, -10380, 3005, 5235, -7350, 2535, -858], ZZ)
A:sympy.polys.tests.test_densearith.q->dmp_normal([[-1], [-1, 0]], 1, ZZ)
A:sympy.polys.tests.test_densearith.r->dmp_normal([[2, 0, 0]], 1, ZZ)
sympy.polys.tests.test_densearith.test_dmp_abs()
sympy.polys.tests.test_densearith.test_dmp_add()
sympy.polys.tests.test_densearith.test_dmp_add_ground()
sympy.polys.tests.test_densearith.test_dmp_add_term()
sympy.polys.tests.test_densearith.test_dmp_div()
sympy.polys.tests.test_densearith.test_dmp_expand()
sympy.polys.tests.test_densearith.test_dmp_exquo_ground()
sympy.polys.tests.test_densearith.test_dmp_ff_div()
sympy.polys.tests.test_densearith.test_dmp_l1_norm()
sympy.polys.tests.test_densearith.test_dmp_max_norm()
sympy.polys.tests.test_densearith.test_dmp_mul()
sympy.polys.tests.test_densearith.test_dmp_mul_ground()
sympy.polys.tests.test_densearith.test_dmp_mul_term()
sympy.polys.tests.test_densearith.test_dmp_neg()
sympy.polys.tests.test_densearith.test_dmp_pdiv()
sympy.polys.tests.test_densearith.test_dmp_pow()
sympy.polys.tests.test_densearith.test_dmp_quo_ground()
sympy.polys.tests.test_densearith.test_dmp_rr_div()
sympy.polys.tests.test_densearith.test_dmp_sqr()
sympy.polys.tests.test_densearith.test_dmp_sub()
sympy.polys.tests.test_densearith.test_dmp_sub_ground()
sympy.polys.tests.test_densearith.test_dmp_sub_term()
sympy.polys.tests.test_densearith.test_dup_abs()
sympy.polys.tests.test_densearith.test_dup_add()
sympy.polys.tests.test_densearith.test_dup_add_ground()
sympy.polys.tests.test_densearith.test_dup_add_mul()
sympy.polys.tests.test_densearith.test_dup_add_term()
sympy.polys.tests.test_densearith.test_dup_div()
sympy.polys.tests.test_densearith.test_dup_expand()
sympy.polys.tests.test_densearith.test_dup_exquo_ground()
sympy.polys.tests.test_densearith.test_dup_ff_div()
sympy.polys.tests.test_densearith.test_dup_l1_norm()
sympy.polys.tests.test_densearith.test_dup_lshift()
sympy.polys.tests.test_densearith.test_dup_max_norm()
sympy.polys.tests.test_densearith.test_dup_mul()
sympy.polys.tests.test_densearith.test_dup_mul_ground()
sympy.polys.tests.test_densearith.test_dup_mul_term()
sympy.polys.tests.test_densearith.test_dup_neg()
sympy.polys.tests.test_densearith.test_dup_pdiv()
sympy.polys.tests.test_densearith.test_dup_pow()
sympy.polys.tests.test_densearith.test_dup_quo_ground()
sympy.polys.tests.test_densearith.test_dup_rr_div()
sympy.polys.tests.test_densearith.test_dup_rshift()
sympy.polys.tests.test_densearith.test_dup_sqr()
sympy.polys.tests.test_densearith.test_dup_sub()
sympy.polys.tests.test_densearith.test_dup_sub_ground()
sympy.polys.tests.test_densearith.test_dup_sub_mul()
sympy.polys.tests.test_densearith.test_dup_sub_term()
sympy.tests.test_densearith.test_dmp_abs()
sympy.tests.test_densearith.test_dmp_add()
sympy.tests.test_densearith.test_dmp_add_ground()
sympy.tests.test_densearith.test_dmp_add_term()
sympy.tests.test_densearith.test_dmp_div()
sympy.tests.test_densearith.test_dmp_expand()
sympy.tests.test_densearith.test_dmp_exquo_ground()
sympy.tests.test_densearith.test_dmp_ff_div()
sympy.tests.test_densearith.test_dmp_l1_norm()
sympy.tests.test_densearith.test_dmp_max_norm()
sympy.tests.test_densearith.test_dmp_mul()
sympy.tests.test_densearith.test_dmp_mul_ground()
sympy.tests.test_densearith.test_dmp_mul_term()
sympy.tests.test_densearith.test_dmp_neg()
sympy.tests.test_densearith.test_dmp_pdiv()
sympy.tests.test_densearith.test_dmp_pow()
sympy.tests.test_densearith.test_dmp_quo_ground()
sympy.tests.test_densearith.test_dmp_rr_div()
sympy.tests.test_densearith.test_dmp_sqr()
sympy.tests.test_densearith.test_dmp_sub()
sympy.tests.test_densearith.test_dmp_sub_ground()
sympy.tests.test_densearith.test_dmp_sub_term()
sympy.tests.test_densearith.test_dup_abs()
sympy.tests.test_densearith.test_dup_add()
sympy.tests.test_densearith.test_dup_add_ground()
sympy.tests.test_densearith.test_dup_add_mul()
sympy.tests.test_densearith.test_dup_add_term()
sympy.tests.test_densearith.test_dup_div()
sympy.tests.test_densearith.test_dup_expand()
sympy.tests.test_densearith.test_dup_exquo_ground()
sympy.tests.test_densearith.test_dup_ff_div()
sympy.tests.test_densearith.test_dup_l1_norm()
sympy.tests.test_densearith.test_dup_lshift()
sympy.tests.test_densearith.test_dup_max_norm()
sympy.tests.test_densearith.test_dup_mul()
sympy.tests.test_densearith.test_dup_mul_ground()
sympy.tests.test_densearith.test_dup_mul_term()
sympy.tests.test_densearith.test_dup_neg()
sympy.tests.test_densearith.test_dup_pdiv()
sympy.tests.test_densearith.test_dup_pow()
sympy.tests.test_densearith.test_dup_quo_ground()
sympy.tests.test_densearith.test_dup_rr_div()
sympy.tests.test_densearith.test_dup_rshift()
sympy.tests.test_densearith.test_dup_sqr()
sympy.tests.test_densearith.test_dup_sub()
sympy.tests.test_densearith.test_dup_sub_ground()
sympy.tests.test_densearith.test_dup_sub_mul()
sympy.tests.test_densearith.test_dup_sub_term()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polytools.py----------------------------------------
A:sympy.polys.tests.test_polytools.K->FF(3)
A:sympy.polys.tests.test_polytools.f->Poly(5 * x * y + x, y, domain='ZZ(x)')
A:sympy.polys.tests.test_polytools.g->Poly(2 * x ** 2 * y, y, domain='ZZ(x)')
A:sympy.polys.tests.test_polytools.h->Poly(x + y, x, y, domain=ZZ)
A:sympy.polys.tests.test_polytools.F3->FF(3)
A:sympy.polys.tests.test_polytools.F5->FF(5)
A:sympy.polys.tests.test_polytools.(F, A, B)->field('a,b', ZZ)
A:sympy.polys.tests.test_polytools.t0->Symbol('t0')
A:sympy.polys.tests.test_polytools.p->expand(((x ** 2 - 1) * (x - 2)).subs({x: x * (1 + 2 ** Rational(1, 4))}))
A:sympy.polys.tests.test_polytools.(coeff, poly)->Poly(x / 3 + sqrt(2), x, domain='EX').clear_denoms(convert=True)
A:sympy.polys.tests.test_polytools.alpha->Symbol('alpha')
A:sympy.polys.tests.test_polytools.(q, r)->Poly(5 * x * y + x, y, domain='ZZ(x)').div(g)
A:sympy.polys.tests.test_polytools.r->Poly(x ** 2 + y ** 2 + y, x, y)
A:sympy.polys.tests.test_polytools.q->Poly(5 * x * y + x, y, domain='ZZ(x)').exquo(g)
A:sympy.polys.tests.test_polytools.F->Poly(x + a, x)
A:sympy.polys.tests.test_polytools.fp->poly(x ** 4 - 3 * x ** 2 + 1, x)
A:sympy.polys.tests.test_polytools.gp->poly(x ** 4 - 3 * x ** 2 + 1, x).shift(-3)
A:sympy.polys.tests.test_polytools.gcd->gcd_list([], x, polys=True)
A:sympy.polys.tests.test_polytools.lcm->lcm_list([], x, polys=True)
A:sympy.polys.tests.test_polytools.eq->Eq(2 * x, 2 * y + 2 * z * y)
A:sympy.polys.tests.test_polytools.(F, G, H)->map(Poly, (f, g, h))
A:sympy.polys.tests.test_polytools.(F, G, H, P)->map(Poly, (f, g, h, p))
A:sympy.polys.tests.test_polytools.(F, U, V, W)->map(Poly, (f, u, v, w))
A:sympy.polys.tests.test_polytools.i->Symbol('i', integer=True)
A:sympy.polys.tests.test_polytools.(real_part, complex_part)->intervals(f, all=True, sqf=True, eps=S(1) / 10)
A:sympy.polys.tests.test_polytools.roots->nroots(x ** 2 - 1)
A:sympy.polys.tests.test_polytools.eps->Float('1e-6')
A:sympy.polys.tests.test_polytools.G->groebner(F, x, y, order='grevlex', polys=True)
A:sympy.polys.tests.test_polytools.P->tanh(x - 3.0)
A:sympy.polys.tests.test_polytools.Q->tanh(x + 3.0)
A:sympy.polys.tests.test_polytools.A->Symbol('A', commutative=False)
A:sympy.polys.tests.test_polytools.p1->Piecewise((A * (x ** 2 - 1) / (x + 1), x > 1), ((x + 2) / (x ** 2 + 2 * x), True))
A:sympy.polys.tests.test_polytools.p2->Piecewise((A * (x - 1), x > 1), (1 / x, True))
A:sympy.polys.tests.test_polytools.p3->Piecewise(((x ** 2 - 1) / (x + 1), x > 1), ((x + 2) / (x ** 2 + 2 * x), True))
A:sympy.polys.tests.test_polytools.p4->Piecewise((x - 1, x > 1), (1 / x, True))
A:sympy.polys.tests.test_polytools.H->groebner(G, polys=True)
A:sympy.polys.tests.test_polytools.(Q, r)->reduced(f, G, x, y, z, modulus=7, symmetric=False, polys=True)
A:sympy.polys.tests.test_polytools.u->Mul(2, x + 1, evaluate=False)
sympy.polys.tests.test_polytools._epsilon_eq(a,b)
sympy.polys.tests.test_polytools._strict_eq(a,b)
sympy.polys.tests.test_polytools.test_GroebnerBasis()
sympy.polys.tests.test_polytools.test_Poly_EC()
sympy.polys.tests.test_polytools.test_Poly_EM()
sympy.polys.tests.test_polytools.test_Poly_ET()
sympy.polys.tests.test_polytools.test_Poly_LC()
sympy.polys.tests.test_polytools.test_Poly_LM()
sympy.polys.tests.test_polytools.test_Poly_LM_custom_order()
sympy.polys.tests.test_polytools.test_Poly_LT()
sympy.polys.tests.test_polytools.test_Poly_TC()
sympy.polys.tests.test_polytools.test_Poly___call__()
sympy.polys.tests.test_polytools.test_Poly__args()
sympy.polys.tests.test_polytools.test_Poly__eq__()
sympy.polys.tests.test_polytools.test_Poly__gen_to_level()
sympy.polys.tests.test_polytools.test_Poly__gens()
sympy.polys.tests.test_polytools.test_Poly__new__()
sympy.polys.tests.test_polytools.test_Poly__unify()
sympy.polys.tests.test_polytools.test_Poly_abs()
sympy.polys.tests.test_polytools.test_Poly_add()
sympy.polys.tests.test_polytools.test_Poly_add_ground()
sympy.polys.tests.test_polytools.test_Poly_all_coeffs()
sympy.polys.tests.test_polytools.test_Poly_all_monoms()
sympy.polys.tests.test_polytools.test_Poly_all_terms()
sympy.polys.tests.test_polytools.test_Poly_as_dict()
sympy.polys.tests.test_polytools.test_Poly_as_expr()
sympy.polys.tests.test_polytools.test_Poly_clear_denoms()
sympy.polys.tests.test_polytools.test_Poly_coeff()
sympy.polys.tests.test_polytools.test_Poly_coeffs()
sympy.polys.tests.test_polytools.test_Poly_deflate()
sympy.polys.tests.test_polytools.test_Poly_degree()
sympy.polys.tests.test_polytools.test_Poly_degree_list()
sympy.polys.tests.test_polytools.test_Poly_diff()
sympy.polys.tests.test_polytools.test_Poly_divmod()
sympy.polys.tests.test_polytools.test_Poly_eject()
sympy.polys.tests.test_polytools.test_Poly_eq_ne()
sympy.polys.tests.test_polytools.test_Poly_eval()
sympy.polys.tests.test_polytools.test_Poly_exclude()
sympy.polys.tests.test_polytools.test_Poly_exquo_ground()
sympy.polys.tests.test_polytools.test_Poly_free_symbols()
sympy.polys.tests.test_polytools.test_Poly_from_dict()
sympy.polys.tests.test_polytools.test_Poly_from_expr()
sympy.polys.tests.test_polytools.test_Poly_from_list()
sympy.polys.tests.test_polytools.test_Poly_from_poly()
sympy.polys.tests.test_polytools.test_Poly_get_domain()
sympy.polys.tests.test_polytools.test_Poly_get_modulus()
sympy.polys.tests.test_polytools.test_Poly_has_only_gens()
sympy.polys.tests.test_polytools.test_Poly_homogeneous_order()
sympy.polys.tests.test_polytools.test_Poly_homogenize()
sympy.polys.tests.test_polytools.test_Poly_inject()
sympy.polys.tests.test_polytools.test_Poly_integrate()
sympy.polys.tests.test_polytools.test_Poly_is_irreducible()
sympy.polys.tests.test_polytools.test_Poly_l1_norm()
sympy.polys.tests.test_polytools.test_Poly_length()
sympy.polys.tests.test_polytools.test_Poly_lift()
sympy.polys.tests.test_polytools.test_Poly_ltrim()
sympy.polys.tests.test_polytools.test_Poly_max_norm()
sympy.polys.tests.test_polytools.test_Poly_monoms()
sympy.polys.tests.test_polytools.test_Poly_mul()
sympy.polys.tests.test_polytools.test_Poly_mul_ground()
sympy.polys.tests.test_polytools.test_Poly_neg()
sympy.polys.tests.test_polytools.test_Poly_nonzero()
sympy.polys.tests.test_polytools.test_Poly_nth()
sympy.polys.tests.test_polytools.test_Poly_one()
sympy.polys.tests.test_polytools.test_Poly_pow()
sympy.polys.tests.test_polytools.test_Poly_properties()
sympy.polys.tests.test_polytools.test_Poly_quo_ground()
sympy.polys.tests.test_polytools.test_Poly_rat_clear_denoms()
sympy.polys.tests.test_polytools.test_Poly_reorder()
sympy.polys.tests.test_polytools.test_Poly_replace()
sympy.polys.tests.test_polytools.test_Poly_retract()
sympy.polys.tests.test_polytools.test_Poly_root()
sympy.polys.tests.test_polytools.test_Poly_set_domain()
sympy.polys.tests.test_polytools.test_Poly_set_modulus()
sympy.polys.tests.test_polytools.test_Poly_slice()
sympy.polys.tests.test_polytools.test_Poly_sqr()
sympy.polys.tests.test_polytools.test_Poly_sub()
sympy.polys.tests.test_polytools.test_Poly_sub_ground()
sympy.polys.tests.test_polytools.test_Poly_subs()
sympy.polys.tests.test_polytools.test_Poly_terms()
sympy.polys.tests.test_polytools.test_Poly_termwise()
sympy.polys.tests.test_polytools.test_Poly_to_exact()
sympy.polys.tests.test_polytools.test_Poly_to_field()
sympy.polys.tests.test_polytools.test_Poly_to_ring()
sympy.polys.tests.test_polytools.test_Poly_total_degree()
sympy.polys.tests.test_polytools.test_Poly_zero()
sympy.polys.tests.test_polytools.test_PurePoly_Poly()
sympy.polys.tests.test_polytools.test_PurePoly__eq__()
sympy.polys.tests.test_polytools.test_PurePoly_free_symbols()
sympy.polys.tests.test_polytools.test_all_roots()
sympy.polys.tests.test_polytools.test_cancel()
sympy.polys.tests.test_polytools.test_compose()
sympy.polys.tests.test_polytools.test_content()
sympy.polys.tests.test_polytools.test_count_roots()
sympy.polys.tests.test_polytools.test_discriminant()
sympy.polys.tests.test_polytools.test_dispersion()
sympy.polys.tests.test_polytools.test_div()
sympy.polys.tests.test_polytools.test_factor()
sympy.polys.tests.test_polytools.test_factor_large()
sympy.polys.tests.test_polytools.test_factor_noeval()
sympy.polys.tests.test_polytools.test_fglm()
sympy.polys.tests.test_polytools.test_gcd()
sympy.polys.tests.test_polytools.test_gcd_list()
sympy.polys.tests.test_polytools.test_gcd_numbers_vs_polys()
sympy.polys.tests.test_polytools.test_gcdex()
sympy.polys.tests.test_polytools.test_gff()
sympy.polys.tests.test_polytools.test_groebner()
sympy.polys.tests.test_polytools.test_ground_roots()
sympy.polys.tests.test_polytools.test_intervals()
sympy.polys.tests.test_polytools.test_is_zero_dimensional()
sympy.polys.tests.test_polytools.test_issue_5786()
sympy.polys.tests.test_polytools.test_keep_coeff()
sympy.polys.tests.test_polytools.test_lcm_list()
sympy.polys.tests.test_polytools.test_monic()
sympy.polys.tests.test_polytools.test_noncommutative()
sympy.polys.tests.test_polytools.test_nroots()
sympy.polys.tests.test_polytools.test_nth_power_roots_poly()
sympy.polys.tests.test_polytools.test_parallel_poly_from_expr()
sympy.polys.tests.test_polytools.test_pdiv()
sympy.polys.tests.test_polytools.test_poly()
sympy.polys.tests.test_polytools.test_poly_matching_consistency()
sympy.polys.tests.test_polytools.test_primitive()
sympy.polys.tests.test_polytools.test_real_roots()
sympy.polys.tests.test_polytools.test_reduced()
sympy.polys.tests.test_polytools.test_refine_root()
sympy.polys.tests.test_polytools.test_resultant()
sympy.polys.tests.test_polytools.test_revert()
sympy.polys.tests.test_polytools.test_shift()
sympy.polys.tests.test_polytools.test_sqf()
sympy.polys.tests.test_polytools.test_sqf_norm()
sympy.polys.tests.test_polytools.test_sturm()
sympy.polys.tests.test_polytools.test_subresultants()
sympy.polys.tests.test_polytools.test_terms_gcd()
sympy.polys.tests.test_polytools.test_torational_factor_list()
sympy.polys.tests.test_polytools.test_trunc()
sympy.tests.test__epsilon_eq(a,b)
sympy.tests.test__strict_eq(a,b)
sympy.tests.test_test_GroebnerBasis()
sympy.tests.test_test_Poly_EC()
sympy.tests.test_test_Poly_EM()
sympy.tests.test_test_Poly_ET()
sympy.tests.test_test_Poly_LC()
sympy.tests.test_test_Poly_LM()
sympy.tests.test_test_Poly_LM_custom_order()
sympy.tests.test_test_Poly_LT()
sympy.tests.test_test_Poly_TC()
sympy.tests.test_test_Poly___call__()
sympy.tests.test_test_Poly__args()
sympy.tests.test_test_Poly__eq__()
sympy.tests.test_test_Poly__gen_to_level()
sympy.tests.test_test_Poly__gens()
sympy.tests.test_test_Poly__new__()
sympy.tests.test_test_Poly__unify()
sympy.tests.test_test_Poly_abs()
sympy.tests.test_test_Poly_add()
sympy.tests.test_test_Poly_add_ground()
sympy.tests.test_test_Poly_all_coeffs()
sympy.tests.test_test_Poly_all_monoms()
sympy.tests.test_test_Poly_all_terms()
sympy.tests.test_test_Poly_as_dict()
sympy.tests.test_test_Poly_as_expr()
sympy.tests.test_test_Poly_clear_denoms()
sympy.tests.test_test_Poly_coeff()
sympy.tests.test_test_Poly_coeffs()
sympy.tests.test_test_Poly_deflate()
sympy.tests.test_test_Poly_degree()
sympy.tests.test_test_Poly_degree_list()
sympy.tests.test_test_Poly_diff()
sympy.tests.test_test_Poly_divmod()
sympy.tests.test_test_Poly_eject()
sympy.tests.test_test_Poly_eq_ne()
sympy.tests.test_test_Poly_eval()
sympy.tests.test_test_Poly_exclude()
sympy.tests.test_test_Poly_exquo_ground()
sympy.tests.test_test_Poly_free_symbols()
sympy.tests.test_test_Poly_from_dict()
sympy.tests.test_test_Poly_from_expr()
sympy.tests.test_test_Poly_from_list()
sympy.tests.test_test_Poly_from_poly()
sympy.tests.test_test_Poly_get_domain()
sympy.tests.test_test_Poly_get_modulus()
sympy.tests.test_test_Poly_has_only_gens()
sympy.tests.test_test_Poly_homogeneous_order()
sympy.tests.test_test_Poly_homogenize()
sympy.tests.test_test_Poly_inject()
sympy.tests.test_test_Poly_integrate()
sympy.tests.test_test_Poly_is_irreducible()
sympy.tests.test_test_Poly_l1_norm()
sympy.tests.test_test_Poly_length()
sympy.tests.test_test_Poly_lift()
sympy.tests.test_test_Poly_ltrim()
sympy.tests.test_test_Poly_max_norm()
sympy.tests.test_test_Poly_monoms()
sympy.tests.test_test_Poly_mul()
sympy.tests.test_test_Poly_mul_ground()
sympy.tests.test_test_Poly_neg()
sympy.tests.test_test_Poly_nonzero()
sympy.tests.test_test_Poly_nth()
sympy.tests.test_test_Poly_one()
sympy.tests.test_test_Poly_pow()
sympy.tests.test_test_Poly_properties()
sympy.tests.test_test_Poly_quo_ground()
sympy.tests.test_test_Poly_rat_clear_denoms()
sympy.tests.test_test_Poly_reorder()
sympy.tests.test_test_Poly_replace()
sympy.tests.test_test_Poly_retract()
sympy.tests.test_test_Poly_root()
sympy.tests.test_test_Poly_set_domain()
sympy.tests.test_test_Poly_set_modulus()
sympy.tests.test_test_Poly_slice()
sympy.tests.test_test_Poly_sqr()
sympy.tests.test_test_Poly_sub()
sympy.tests.test_test_Poly_sub_ground()
sympy.tests.test_test_Poly_subs()
sympy.tests.test_test_Poly_terms()
sympy.tests.test_test_Poly_termwise()
sympy.tests.test_test_Poly_to_exact()
sympy.tests.test_test_Poly_to_field()
sympy.tests.test_test_Poly_to_ring()
sympy.tests.test_test_Poly_total_degree()
sympy.tests.test_test_Poly_zero()
sympy.tests.test_test_PurePoly_Poly()
sympy.tests.test_test_PurePoly__eq__()
sympy.tests.test_test_PurePoly_free_symbols()
sympy.tests.test_test_all_roots()
sympy.tests.test_test_cancel()
sympy.tests.test_test_compose()
sympy.tests.test_test_content()
sympy.tests.test_test_count_roots()
sympy.tests.test_test_discriminant()
sympy.tests.test_test_dispersion()
sympy.tests.test_test_div()
sympy.tests.test_test_factor()
sympy.tests.test_test_factor_large()
sympy.tests.test_test_factor_noeval()
sympy.tests.test_test_fglm()
sympy.tests.test_test_gcd()
sympy.tests.test_test_gcd_list()
sympy.tests.test_test_gcd_numbers_vs_polys()
sympy.tests.test_test_gcdex()
sympy.tests.test_test_gff()
sympy.tests.test_test_groebner()
sympy.tests.test_test_ground_roots()
sympy.tests.test_test_intervals()
sympy.tests.test_test_is_zero_dimensional()
sympy.tests.test_test_issue_5786()
sympy.tests.test_test_keep_coeff()
sympy.tests.test_test_lcm_list()
sympy.tests.test_test_monic()
sympy.tests.test_test_noncommutative()
sympy.tests.test_test_nroots()
sympy.tests.test_test_nth_power_roots_poly()
sympy.tests.test_test_parallel_poly_from_expr()
sympy.tests.test_test_pdiv()
sympy.tests.test_test_poly()
sympy.tests.test_test_poly_matching_consistency()
sympy.tests.test_test_primitive()
sympy.tests.test_test_real_roots()
sympy.tests.test_test_reduced()
sympy.tests.test_test_refine_root()
sympy.tests.test_test_resultant()
sympy.tests.test_test_revert()
sympy.tests.test_test_shift()
sympy.tests.test_test_sqf()
sympy.tests.test_test_sqf_norm()
sympy.tests.test_test_sturm()
sympy.tests.test_test_subresultants()
sympy.tests.test_test_terms_gcd()
sympy.tests.test_test_torational_factor_list()
sympy.tests.test_test_trunc()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_pythonrational.py----------------------------------------
sympy.polys.tests.test_pythonrational.test_PythonRational__abs__()
sympy.polys.tests.test_pythonrational.test_PythonRational__add__()
sympy.polys.tests.test_pythonrational.test_PythonRational__div__()
sympy.polys.tests.test_pythonrational.test_PythonRational__eq__()
sympy.polys.tests.test_pythonrational.test_PythonRational__float__()
sympy.polys.tests.test_pythonrational.test_PythonRational__hash__()
sympy.polys.tests.test_pythonrational.test_PythonRational__init__()
sympy.polys.tests.test_pythonrational.test_PythonRational__int__()
sympy.polys.tests.test_pythonrational.test_PythonRational__lt_le_gt_ge__()
sympy.polys.tests.test_pythonrational.test_PythonRational__mul__()
sympy.polys.tests.test_pythonrational.test_PythonRational__neg__()
sympy.polys.tests.test_pythonrational.test_PythonRational__pos__()
sympy.polys.tests.test_pythonrational.test_PythonRational__pow__()
sympy.polys.tests.test_pythonrational.test_PythonRational__sub__()
sympy.tests.test_pythonrational.test_PythonRational__abs__()
sympy.tests.test_pythonrational.test_PythonRational__add__()
sympy.tests.test_pythonrational.test_PythonRational__div__()
sympy.tests.test_pythonrational.test_PythonRational__eq__()
sympy.tests.test_pythonrational.test_PythonRational__float__()
sympy.tests.test_pythonrational.test_PythonRational__hash__()
sympy.tests.test_pythonrational.test_PythonRational__init__()
sympy.tests.test_pythonrational.test_PythonRational__int__()
sympy.tests.test_pythonrational.test_PythonRational__lt_le_gt_ge__()
sympy.tests.test_pythonrational.test_PythonRational__mul__()
sympy.tests.test_pythonrational.test_PythonRational__neg__()
sympy.tests.test_pythonrational.test_PythonRational__pos__()
sympy.tests.test_pythonrational.test_PythonRational__pow__()
sympy.tests.test_pythonrational.test_PythonRational__sub__()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polyclasses.py----------------------------------------
A:sympy.polys.tests.test_polyclasses.f->ANP(1, mod, QQ)
A:sympy.polys.tests.test_polyclasses.g->DMF(([[1]], [[1, 0]]), ZZ)
A:sympy.polys.tests.test_polyclasses.h->DMF(([[1]], [[1, 0, 0, 0]]), ZZ)
A:sympy.polys.tests.test_polyclasses.q->DMP([[1], [1, 0]], ZZ)
A:sympy.polys.tests.test_polyclasses.r->DMP([675, 675, 225, 25], ZZ)
A:sympy.polys.tests.test_polyclasses.u->DMP([[QQ(45), QQ(30), QQ(5)]], QQ)
A:sympy.polys.tests.test_polyclasses.v->DMP([[QQ(1), QQ(2, 3), QQ(1, 9)]], QQ)
A:sympy.polys.tests.test_polyclasses.s->DMP([QQ(1, 32), QQ(0)], QQ)
A:sympy.polys.tests.test_polyclasses.t->DMP([QQ(-1, 16)], QQ)
A:sympy.polys.tests.test_polyclasses.a->ANP([QQ(1)], mod, QQ)
A:sympy.polys.tests.test_polyclasses.b->ANP([ZZ(1)], mod, ZZ)
A:sympy.polys.tests.test_polyclasses.c->ANP([QQ(-1, 43), QQ(9, 43), QQ(5, 43)], mod, QQ)
sympy.polys.tests.test_polyclasses.test_ANP___bool__()
sympy.polys.tests.test_polyclasses.test_ANP___eq__()
sympy.polys.tests.test_polyclasses.test_ANP___init__()
sympy.polys.tests.test_polyclasses.test_ANP_arithmetics()
sympy.polys.tests.test_polyclasses.test_ANP_properties()
sympy.polys.tests.test_polyclasses.test_ANP_unify()
sympy.polys.tests.test_polyclasses.test_DMF__bool__()
sympy.polys.tests.test_polyclasses.test_DMF__init__()
sympy.polys.tests.test_polyclasses.test_DMF_arithmetics()
sympy.polys.tests.test_polyclasses.test_DMF_properties()
sympy.polys.tests.test_polyclasses.test_DMP___bool__()
sympy.polys.tests.test_polyclasses.test_DMP___eq__()
sympy.polys.tests.test_polyclasses.test_DMP___init__()
sympy.polys.tests.test_polyclasses.test_DMP_arithmetics()
sympy.polys.tests.test_polyclasses.test_DMP_exclude()
sympy.polys.tests.test_polyclasses.test_DMP_functionality()
sympy.polys.tests.test_polyclasses.test_DMP_properties()
sympy.polys.tests.test_polyclasses.test_DMP_to_dict()
sympy.polys.tests.test_polyclasses.test___hash__()
sympy.tests.test_polyclasses.test_ANP___bool__()
sympy.tests.test_polyclasses.test_ANP___eq__()
sympy.tests.test_polyclasses.test_ANP___init__()
sympy.tests.test_polyclasses.test_ANP_arithmetics()
sympy.tests.test_polyclasses.test_ANP_properties()
sympy.tests.test_polyclasses.test_ANP_unify()
sympy.tests.test_polyclasses.test_DMF__bool__()
sympy.tests.test_polyclasses.test_DMF__init__()
sympy.tests.test_polyclasses.test_DMF_arithmetics()
sympy.tests.test_polyclasses.test_DMF_properties()
sympy.tests.test_polyclasses.test_DMP___bool__()
sympy.tests.test_polyclasses.test_DMP___eq__()
sympy.tests.test_polyclasses.test_DMP___init__()
sympy.tests.test_polyclasses.test_DMP_arithmetics()
sympy.tests.test_polyclasses.test_DMP_exclude()
sympy.tests.test_polyclasses.test_DMP_functionality()
sympy.tests.test_polyclasses.test_DMP_properties()
sympy.tests.test_polyclasses.test_DMP_to_dict()
sympy.tests.test_polyclasses.test___hash__()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_partfrac.py----------------------------------------
A:sympy.polys.tests.test_partfrac.M->Matrix(2, 2, lambda i, j: 1 / (x + i + 1) / (x + j))
A:sympy.polys.tests.test_partfrac.p->Poly(1, x, domain='ZZ[a,b]')
A:sympy.polys.tests.test_partfrac.q->Poly((x + a) * (x + b), x, domain='ZZ[a,b]')
A:sympy.polys.tests.test_partfrac._a->Dummy('a')
A:sympy.polys.tests.test_partfrac.pfd->apart_list(f)
A:sympy.polys.tests.test_partfrac.a->Dummy('a')
sympy.polys.tests.test_partfrac.test_apart()
sympy.polys.tests.test_partfrac.test_apart_extension()
sympy.polys.tests.test_partfrac.test_apart_full()
sympy.polys.tests.test_partfrac.test_apart_list()
sympy.polys.tests.test_partfrac.test_apart_matrix()
sympy.polys.tests.test_partfrac.test_apart_symbolic()
sympy.polys.tests.test_partfrac.test_apart_undetermined_coeffs()
sympy.polys.tests.test_partfrac.test_assemble_partfrac_list()
sympy.polys.tests.test_partfrac.test_issue_5798()
sympy.polys.tests.test_partfrac.test_noncommutative_pseudomultivariate()
sympy.tests.test_test_apart()
sympy.tests.test_test_apart_extension()
sympy.tests.test_test_apart_full()
sympy.tests.test_test_apart_list()
sympy.tests.test_test_apart_matrix()
sympy.tests.test_test_apart_symbolic()
sympy.tests.test_test_apart_undetermined_coeffs()
sympy.tests.test_test_assemble_partfrac_list()
sympy.tests.test_test_issue_5798()
sympy.tests.test_test_noncommutative_pseudomultivariate()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_rootoftools.py----------------------------------------
A:sympy.polys.tests.test_rootoftools.r->RootOf(x ** 5 - 5 * x + 12, 1)
A:sympy.polys.tests.test_rootoftools.real->RootOf(x ** 3 + x + 3, 0).evalf(n=20)
A:sympy.polys.tests.test_rootoftools.(re, im)->RootOf(x ** 5 - 5 * x + 12, 4).evalf(n=20).as_real_imag()
A:sympy.polys.tests.test_rootoftools.p->legendre_poly(4, x, polys=True)
A:sympy.polys.tests.test_rootoftools.re->RootOf(x ** 5 - 5 * x + 12, 0).evalf(n=20)
A:sympy.polys.tests.test_rootoftools.a->RootOf(x ** 5 - 5 * x + 12, 1)._get_interval()
A:sympy.polys.tests.test_rootoftools.b->RootOf(x ** 5 - 5 * x + 12, 1)._get_interval()
A:sympy.polys.tests.test_rootoftools.g->Lambda(x, 5 * tan(x) + 7)
A:sympy.polys.tests.test_rootoftools.s->RootSum(f, g)
A:sympy.polys.tests.test_rootoftools.f->Poly(7 * x ** 8 - 10)
A:sympy.polys.tests.test_rootoftools.rs->RootSum(x ** 2 + a, exp, x)
A:sympy.polys.tests.test_rootoftools.h->Lambda(x, tan(x))
A:sympy.polys.tests.test_rootoftools.G->Lambda(r, exp(r * y))
A:sympy.polys.tests.test_rootoftools.r0->RootSum(x ** 3 - a, h, x)
A:sympy.polys.tests.test_rootoftools.r1->RootSum(x ** 4 - b, h, x)
A:sympy.polys.tests.test_rootoftools.l1->Poly(x ** 6 - x + 1, x).all_roots()
sympy.polys.tests.test_rootoftools.test_RootOf___eq__()
sympy.polys.tests.test_rootoftools.test_RootOf___new__()
sympy.polys.tests.test_rootoftools.test_RootOf_all_roots()
sympy.polys.tests.test_rootoftools.test_RootOf_diff()
sympy.polys.tests.test_rootoftools.test_RootOf_eval_rational()
sympy.polys.tests.test_rootoftools.test_RootOf_evalf()
sympy.polys.tests.test_rootoftools.test_RootOf_evalf_caching_bug()
sympy.polys.tests.test_rootoftools.test_RootOf_free_symbols()
sympy.polys.tests.test_rootoftools.test_RootOf_is_complex()
sympy.polys.tests.test_rootoftools.test_RootOf_is_real()
sympy.polys.tests.test_rootoftools.test_RootOf_real_roots()
sympy.polys.tests.test_rootoftools.test_RootOf_subs()
sympy.polys.tests.test_rootoftools.test_RootSum___eq__()
sympy.polys.tests.test_rootoftools.test_RootSum___new__()
sympy.polys.tests.test_rootoftools.test_RootSum_diff()
sympy.polys.tests.test_rootoftools.test_RootSum_doit()
sympy.polys.tests.test_rootoftools.test_RootSum_evalf()
sympy.polys.tests.test_rootoftools.test_RootSum_free_symbols()
sympy.polys.tests.test_rootoftools.test_RootSum_independent()
sympy.polys.tests.test_rootoftools.test_RootSum_rational()
sympy.polys.tests.test_rootoftools.test_RootSum_subs()
sympy.polys.tests.test_rootoftools.test_issue_7876()
sympy.polys.tests.test_rootoftools.test_issue_8316()
sympy.tests.test_test_RootOf___eq__()
sympy.tests.test_test_RootOf___new__()
sympy.tests.test_test_RootOf_all_roots()
sympy.tests.test_test_RootOf_diff()
sympy.tests.test_test_RootOf_eval_rational()
sympy.tests.test_test_RootOf_evalf()
sympy.tests.test_test_RootOf_evalf_caching_bug()
sympy.tests.test_test_RootOf_free_symbols()
sympy.tests.test_test_RootOf_is_complex()
sympy.tests.test_test_RootOf_is_real()
sympy.tests.test_test_RootOf_real_roots()
sympy.tests.test_test_RootOf_subs()
sympy.tests.test_test_RootSum___eq__()
sympy.tests.test_test_RootSum___new__()
sympy.tests.test_test_RootSum_diff()
sympy.tests.test_test_RootSum_doit()
sympy.tests.test_test_RootSum_evalf()
sympy.tests.test_test_RootSum_free_symbols()
sympy.tests.test_test_RootSum_independent()
sympy.tests.test_test_RootSum_rational()
sympy.tests.test_test_RootSum_subs()
sympy.tests.test_test_issue_7876()
sympy.tests.test_test_issue_8316()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_heuristicgcd.py----------------------------------------
A:sympy.polys.tests.test_heuristicgcd.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y)->ring('x,y', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u)->ring('x,y,z,u', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(f, g, h)->R.fateman_poly_F_3()
A:sympy.polys.tests.test_heuristicgcd.(H, cff, cfg)->heugcd(f, g)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v)->ring('x,y,z,u,v', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v, a, b)->ring('x,y,z,u,v,a,b', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, u, v, a, b, c, d)->ring('x,y,z,u,v,a,b,c,d', ZZ)
A:sympy.polys.tests.test_heuristicgcd.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
sympy.polys.tests.test_heuristicgcd.test_heugcd_multivariate_integers()
sympy.polys.tests.test_heuristicgcd.test_heugcd_univariate_integers()
sympy.tests.test_heuristicgcd.test_heugcd_multivariate_integers()
sympy.tests.test_heuristicgcd.test_heugcd_univariate_integers()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_sqfreetools.py----------------------------------------
A:sympy.polys.tests.test_sqfreetools.(f_0, f_1, f_2, f_3, f_4, f_5, f_6)->f_polys()
A:sympy.polys.tests.test_sqfreetools.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R1, x)->ring('x', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R2, y)->ring('y', FF(3))
A:sympy.polys.tests.test_sqfreetools.(R, x, y)->ring('x,y', FF(2))
A:sympy.polys.tests.test_sqfreetools.res->R.dmp_resultant(f, g)
A:sympy.polys.tests.test_sqfreetools.h->(4 * y ** 2 + 1).drop(x)
A:sympy.polys.tests.test_sqfreetools.(Rt, t)->ring('t', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R, x, y, z)->ring('x,y,z', ZZ)
A:sympy.polys.tests.test_sqfreetools.(R, x, y, z, t)->ring('x,y,z,t', ZZ)
sympy.polys.tests.test_sqfreetools.test_dmp_sqf()
sympy.polys.tests.test_sqfreetools.test_dup_gff_list()
sympy.polys.tests.test_sqfreetools.test_dup_sqf()
sympy.tests.test_sqfreetools.test_dmp_sqf()
sympy.tests.test_sqfreetools.test_dup_gff_list()
sympy.tests.test_sqfreetools.test_dup_sqf()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_rationaltools.py----------------------------------------
A:sympy.polys.tests.test_rationaltools.(A, B)->symbols('A,B', commutative=False)
sympy.polys.tests.test_rationaltools.test_together()
sympy.tests.test_test_together()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_rootisolation.py----------------------------------------
A:sympy.polys.tests.test_rootisolation.(R, x)->ring('x', ZZ)
A:sympy.polys.tests.test_rootisolation.((u, v), B, C, (s, t))->R.dup_isolate_real_roots_sqf(f, fast=True)
A:sympy.polys.tests.test_rootisolation.g->R.dup_sqf_part(f)
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_1()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_2()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_3()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_4()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_5()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_6()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_7()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_8()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_exclude()
sympy.polys.tests.test_rootisolation.test_dup_count_complex_roots_implicit()
sympy.polys.tests.test_rootisolation.test_dup_count_real_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_all_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_all_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_isolate_complex_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_list()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_list_QQ()
sympy.polys.tests.test_rootisolation.test_dup_isolate_real_roots_sqf()
sympy.polys.tests.test_rootisolation.test_dup_refine_real_root()
sympy.polys.tests.test_rootisolation.test_dup_sturm()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_1()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_2()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_3()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_4()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_5()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_6()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_7()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_8()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_exclude()
sympy.tests.test_rootisolation.test_dup_count_complex_roots_implicit()
sympy.tests.test_rootisolation.test_dup_count_real_roots()
sympy.tests.test_rootisolation.test_dup_isolate_all_roots()
sympy.tests.test_rootisolation.test_dup_isolate_all_roots_sqf()
sympy.tests.test_rootisolation.test_dup_isolate_complex_roots_sqf()
sympy.tests.test_rootisolation.test_dup_isolate_real_roots()
sympy.tests.test_rootisolation.test_dup_isolate_real_roots_list()
sympy.tests.test_rootisolation.test_dup_isolate_real_roots_list_QQ()
sympy.tests.test_rootisolation.test_dup_isolate_real_roots_sqf()
sympy.tests.test_rootisolation.test_dup_refine_real_root()
sympy.tests.test_rootisolation.test_dup_sturm()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_ring_series.py----------------------------------------
A:sympy.polys.tests.test_ring_series.(R, x)->ring('x', QQ)
A:sympy.polys.tests.test_ring_series.(R, x, y)->ring('x, y', QQ)
A:sympy.polys.tests.test_ring_series.(R, x, y, t)->ring('x, y, t', QQ)
A:sympy.polys.tests.test_ring_series.p1->rs_exp(p, x, prec)
A:sympy.polys.tests.test_ring_series.p->rs_log(1 + x, x, prec)
A:sympy.polys.tests.test_ring_series.(R1, z)->ring('z', QQ)
A:sympy.polys.tests.test_ring_series.p2->rs_series_inversion(p, x, 9)
A:sympy.polys.tests.test_ring_series.(R, x, y, z)->ring('x, y, z', QQ)
A:sympy.polys.tests.test_ring_series.r->rs_newton(p, x, 4)
A:sympy.polys.tests.test_ring_series.pc->R.from_list(list(reversed(c)))
A:sympy.polys.tests.test_ring_series.r1->rs_trunc(pc.compose(x, p), x, 5)
A:sympy.polys.tests.test_ring_series.p3->rs_log(p2, x, 9)
A:sympy.polys.tests.test_ring_series.q1->rs_log(p1, x, h)
sympy.polys.tests.test_ring_series.test_compose_add()
sympy.polys.tests.test_ring_series.test_exp()
sympy.polys.tests.test_ring_series.test_has_constant_term()
sympy.polys.tests.test_ring_series.test_inversion()
sympy.polys.tests.test_ring_series.test_log()
sympy.polys.tests.test_ring_series.test_mul_trunc()
sympy.polys.tests.test_ring_series.test_newton()
sympy.polys.tests.test_ring_series.test_pow_trunc()
sympy.polys.tests.test_ring_series.test_ring_series1()
sympy.polys.tests.test_ring_series.test_series_from_list()
sympy.polys.tests.test_ring_series.test_square_trunc()
sympy.polys.tests.test_ring_series.test_trunc()
sympy.polys.tests.test_ring_test_compose_add()
sympy.polys.tests.test_ring_test_exp()
sympy.polys.tests.test_ring_test_has_constant_term()
sympy.polys.tests.test_ring_test_inversion()
sympy.polys.tests.test_ring_test_log()
sympy.polys.tests.test_ring_test_mul_trunc()
sympy.polys.tests.test_ring_test_newton()
sympy.polys.tests.test_ring_test_pow_trunc()
sympy.polys.tests.test_ring_test_ring_series1()
sympy.polys.tests.test_ring_test_series_from_list()
sympy.polys.tests.test_ring_test_square_trunc()
sympy.polys.tests.test_ring_test_trunc()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_distributedmodules.py----------------------------------------
A:sympy.polys.tests.test_distributedmodules.f->sdm_from_vector([x * z, y ** 2 + y * z - z, y], lex, QQ, gens=[x, y, z])
A:sympy.polys.tests.test_distributedmodules.f1->sdm_from_vector([1, x], grlex, QQ, gens=gens)
A:sympy.polys.tests.test_distributedmodules.f2->sdm_from_vector([0, x - 2], grlex, QQ, gens=gens)
A:sympy.polys.tests.test_distributedmodules.G->sdm_groebner(S, sdm_nf_mora, igrlex, QQ)
A:sympy.polys.tests.test_distributedmodules.igrlex->InverseOrder(grlex)
A:sympy.polys.tests.test_distributedmodules.f3->sdm_from_vector([0, y], lex, QQ, gens=gens)
sympy.polys.tests.test_distributedmodules.test_chain_criterion()
sympy.polys.tests.test_distributedmodules.test_conversion()
sympy.polys.tests.test_distributedmodules.test_local()
sympy.polys.tests.test_distributedmodules.test_nontrivial()
sympy.polys.tests.test_distributedmodules.test_sdm_LC()
sympy.polys.tests.test_distributedmodules.test_sdm_LM()
sympy.polys.tests.test_distributedmodules.test_sdm_LT()
sympy.polys.tests.test_distributedmodules.test_sdm_add()
sympy.polys.tests.test_distributedmodules.test_sdm_deg()
sympy.polys.tests.test_distributedmodules.test_sdm_ecart()
sympy.polys.tests.test_distributedmodules.test_sdm_from_dict()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_deg()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_divides()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_lcm()
sympy.polys.tests.test_distributedmodules.test_sdm_monomial_mul()
sympy.polys.tests.test_distributedmodules.test_sdm_mul_term()
sympy.polys.tests.test_distributedmodules.test_sdm_nf_mora()
sympy.polys.tests.test_distributedmodules.test_sdm_spoly()
sympy.polys.tests.test_distributedmodules.test_sdm_zero()
sympy.polys.tests.test_distributedmodules.test_uncovered_line()
sympy.tests.test_distributedmodules.test_chain_criterion()
sympy.tests.test_distributedmodules.test_conversion()
sympy.tests.test_distributedmodules.test_local()
sympy.tests.test_distributedmodules.test_nontrivial()
sympy.tests.test_distributedmodules.test_sdm_LC()
sympy.tests.test_distributedmodules.test_sdm_LM()
sympy.tests.test_distributedmodules.test_sdm_LT()
sympy.tests.test_distributedmodules.test_sdm_add()
sympy.tests.test_distributedmodules.test_sdm_deg()
sympy.tests.test_distributedmodules.test_sdm_ecart()
sympy.tests.test_distributedmodules.test_sdm_from_dict()
sympy.tests.test_distributedmodules.test_sdm_monomial_deg()
sympy.tests.test_distributedmodules.test_sdm_monomial_divides()
sympy.tests.test_distributedmodules.test_sdm_monomial_lcm()
sympy.tests.test_distributedmodules.test_sdm_monomial_mul()
sympy.tests.test_distributedmodules.test_sdm_mul_term()
sympy.tests.test_distributedmodules.test_sdm_nf_mora()
sympy.tests.test_distributedmodules.test_sdm_spoly()
sympy.tests.test_distributedmodules.test_sdm_zero()
sympy.tests.test_distributedmodules.test_uncovered_line()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_specialpolys.py----------------------------------------
A:sympy.polys.tests.test_specialpolys.poly->random_poly(x, 10, -100, 100, polys=True)
A:sympy.polys.tests.test_specialpolys.(x0, x1, x2, y0, y1, y2)->symbols('x:3, y:3')
A:sympy.polys.tests.test_specialpolys.(f, g, h)->fateman_poly_F_3(3)
A:sympy.polys.tests.test_specialpolys.(F, G, H)->dmp_fateman_poly_F_3(3, ZZ)
sympy.polys.tests.test_specialpolys.test_cyclotomic_poly()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_1()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_2()
sympy.polys.tests.test_specialpolys.test_fateman_poly_F_3()
sympy.polys.tests.test_specialpolys.test_interpolating_poly()
sympy.polys.tests.test_specialpolys.test_random_poly()
sympy.polys.tests.test_specialpolys.test_swinnerton_dyer_poly()
sympy.polys.tests.test_specialpolys.test_symmetric_poly()
sympy.tests.test_test_cyclotomic_poly()
sympy.tests.test_test_fateman_poly_F_1()
sympy.tests.test_test_fateman_poly_F_2()
sympy.tests.test_test_fateman_poly_F_3()
sympy.tests.test_test_interpolating_poly()
sympy.tests.test_test_random_poly()
sympy.tests.test_test_swinnerton_dyer_poly()
sympy.tests.test_test_symmetric_poly()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_solvers.py----------------------------------------
A:sympy.polys.tests.test_solvers.(domain, x1, x2)->ring('x1,x2', QQ)
A:sympy.polys.tests.test_solvers._sol->solve_lin_sys(eqs, domain)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3)->ring('x1,x2,x3', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4)->ring('x1,x2,x3,x4', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4, x5, x6, x7)->ring('x1,x2,x3,x4,x5,x6,x7', QQ)
A:sympy.polys.tests.test_solvers.(domain, x1, x2, x3, x4, x5)->ring('x1,x2,x3,x4,x5', QQ)
A:sympy.polys.tests.test_solvers.(ground, d, r, e, g, i, j, l, o, m, p, q)->field('d,r,e,g,i,j,l,o,m,p,q', ZZ)
A:sympy.polys.tests.test_solvers.(domain, c, f, h, k, n, b)->ring('c,f,h,k,n,b', ground)
sympy.polys.tests.test_solvers.test_solve_lin_sys_2x2_one()
sympy.polys.tests.test_solvers.test_solve_lin_sys_2x4_none()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x3_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x4_none()
sympy.polys.tests.test_solvers.test_solve_lin_sys_3x4_one()
sympy.polys.tests.test_solvers.test_solve_lin_sys_4x7_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_5x5_inf()
sympy.polys.tests.test_solvers.test_solve_lin_sys_6x6_1()
sympy.polys.tests.test_solvers.test_solve_lin_sys_6x6_2()
sympy.polys.tests.test_test_solve_lin_sys_2x2_one()
sympy.polys.tests.test_test_solve_lin_sys_2x4_none()
sympy.polys.tests.test_test_solve_lin_sys_3x3_inf()
sympy.polys.tests.test_test_solve_lin_sys_3x4_none()
sympy.polys.tests.test_test_solve_lin_sys_3x4_one()
sympy.polys.tests.test_test_solve_lin_sys_4x7_inf()
sympy.polys.tests.test_test_solve_lin_sys_5x5_inf()
sympy.polys.tests.test_test_solve_lin_sys_6x6_1()
sympy.polys.tests.test_test_solve_lin_sys_6x6_2()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_densetools.py----------------------------------------
A:sympy.polys.tests.test_densetools.f->dmp_normal([[2930944], [], [2198208], [], [549552], [], [45796]], 1, ZZ)
A:sympy.polys.tests.test_densetools.K->FF(23)
A:sympy.polys.tests.test_densetools.F_6->dmp_normal(f_6, 3, K)
A:sympy.polys.tests.test_densetools.g->dmp_normal([[17585664], [], [8792832], [], [1099104], []], 1, ZZ)
A:sympy.polys.tests.test_densetools.F->dmp_normal([[64], [], [48], [], [12], [], [1]], 1, ZZ)
A:sympy.polys.tests.test_densetools.G->dmp_normal([[384], [], [192], [], [24], []], 1, ZZ)
A:sympy.polys.tests.test_densetools.(R, t)->ring('t', ZZ)
sympy.polys.tests.test_densetools.test_dmp_clear_denoms()
sympy.polys.tests.test_densetools.test_dmp_compose()
sympy.polys.tests.test_densetools.test_dmp_diff()
sympy.polys.tests.test_densetools.test_dmp_diff_eval_in()
sympy.polys.tests.test_densetools.test_dmp_diff_in()
sympy.polys.tests.test_densetools.test_dmp_eval()
sympy.polys.tests.test_densetools.test_dmp_eval_in()
sympy.polys.tests.test_densetools.test_dmp_eval_tail()
sympy.polys.tests.test_densetools.test_dmp_ground_content()
sympy.polys.tests.test_densetools.test_dmp_ground_extract()
sympy.polys.tests.test_densetools.test_dmp_ground_monic()
sympy.polys.tests.test_densetools.test_dmp_ground_primitive()
sympy.polys.tests.test_densetools.test_dmp_ground_trunc()
sympy.polys.tests.test_densetools.test_dmp_integrate()
sympy.polys.tests.test_densetools.test_dmp_integrate_in()
sympy.polys.tests.test_densetools.test_dmp_lift()
sympy.polys.tests.test_densetools.test_dmp_revert()
sympy.polys.tests.test_densetools.test_dmp_trunc()
sympy.polys.tests.test_densetools.test_dup_clear_denoms()
sympy.polys.tests.test_densetools.test_dup_compose()
sympy.polys.tests.test_densetools.test_dup_content()
sympy.polys.tests.test_densetools.test_dup_decompose()
sympy.polys.tests.test_densetools.test_dup_diff()
sympy.polys.tests.test_densetools.test_dup_eval()
sympy.polys.tests.test_densetools.test_dup_extract()
sympy.polys.tests.test_densetools.test_dup_integrate()
sympy.polys.tests.test_densetools.test_dup_mirror()
sympy.polys.tests.test_densetools.test_dup_monic()
sympy.polys.tests.test_densetools.test_dup_primitive()
sympy.polys.tests.test_densetools.test_dup_real_imag()
sympy.polys.tests.test_densetools.test_dup_revert()
sympy.polys.tests.test_densetools.test_dup_scale()
sympy.polys.tests.test_densetools.test_dup_shift()
sympy.polys.tests.test_densetools.test_dup_sign_variations()
sympy.polys.tests.test_densetools.test_dup_transform()
sympy.polys.tests.test_densetools.test_dup_trunc()
sympy.tests.test_densetools.test_dmp_clear_denoms()
sympy.tests.test_densetools.test_dmp_compose()
sympy.tests.test_densetools.test_dmp_diff()
sympy.tests.test_densetools.test_dmp_diff_eval_in()
sympy.tests.test_densetools.test_dmp_diff_in()
sympy.tests.test_densetools.test_dmp_eval()
sympy.tests.test_densetools.test_dmp_eval_in()
sympy.tests.test_densetools.test_dmp_eval_tail()
sympy.tests.test_densetools.test_dmp_ground_content()
sympy.tests.test_densetools.test_dmp_ground_extract()
sympy.tests.test_densetools.test_dmp_ground_monic()
sympy.tests.test_densetools.test_dmp_ground_primitive()
sympy.tests.test_densetools.test_dmp_ground_trunc()
sympy.tests.test_densetools.test_dmp_integrate()
sympy.tests.test_densetools.test_dmp_integrate_in()
sympy.tests.test_densetools.test_dmp_lift()
sympy.tests.test_densetools.test_dmp_revert()
sympy.tests.test_densetools.test_dmp_trunc()
sympy.tests.test_densetools.test_dup_clear_denoms()
sympy.tests.test_densetools.test_dup_compose()
sympy.tests.test_densetools.test_dup_content()
sympy.tests.test_densetools.test_dup_decompose()
sympy.tests.test_densetools.test_dup_diff()
sympy.tests.test_densetools.test_dup_eval()
sympy.tests.test_densetools.test_dup_extract()
sympy.tests.test_densetools.test_dup_integrate()
sympy.tests.test_densetools.test_dup_mirror()
sympy.tests.test_densetools.test_dup_monic()
sympy.tests.test_densetools.test_dup_primitive()
sympy.tests.test_densetools.test_dup_real_imag()
sympy.tests.test_densetools.test_dup_revert()
sympy.tests.test_densetools.test_dup_scale()
sympy.tests.test_densetools.test_dup_shift()
sympy.tests.test_densetools.test_dup_sign_variations()
sympy.tests.test_densetools.test_dup_transform()
sympy.tests.test_densetools.test_dup_trunc()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_numberfields.py----------------------------------------
A:sympy.polys.tests.test_numberfields.a->AlgebraicNumber(sqrt(3) / 2, [S(7) / 19, 3], gen=x).to_algebraic_integer()
A:sympy.polys.tests.test_numberfields.b->AlgebraicNumber(sqrt(2), alias='alpha')
A:sympy.polys.tests.test_numberfields.eq->S('\n        -1/(800*sqrt(-1/240 + 1/(18000*(-1/17280000 +\n        sqrt(15)*I/28800000)**(1/3)) + 2*(-1/17280000 +\n        sqrt(15)*I/28800000)**(1/3)))')
A:sympy.polys.tests.test_numberfields.mp->minimal_polynomial(r, x)
A:sympy.polys.tests.test_numberfields.p->AlgebraicNumber(sqrt(3) / 2, [S(7) / 19, 3], gen=x).to_algebraic_integer().as_poly()
A:sympy.polys.tests.test_numberfields.ex->RootOf(x ** 3 + x * 4 + 1, 0)
A:sympy.polys.tests.test_numberfields.r->AlgebraicNumber(sqrt(2) - sqrt(3))
A:sympy.polys.tests.test_numberfields.c->AlgebraicNumber(sqrt(2), gen=x)
A:sympy.polys.tests.test_numberfields.d->AlgebraicNumber(sqrt(2), gen=x)
A:sympy.polys.tests.test_numberfields.e->AlgebraicNumber(sqrt(2) + sqrt(3) + sqrt(7))
A:sympy.polys.tests.test_numberfields.f->AlgebraicNumber(3 * sqrt(2) + 8 * sqrt(7) - 5)
A:sympy.polys.tests.test_numberfields.q->AlgebraicNumber(-sqrt(2) + sqrt(3))
A:sympy.polys.tests.test_numberfields.s->AlgebraicNumber(-sqrt(2) - sqrt(3))
A:sympy.polys.tests.test_numberfields.ip->IntervalPrinter()
sympy.polys.tests.test_numberfields.test_AlgebraicNumber()
sympy.polys.tests.test_numberfields.test_IntervalPrinter()
sympy.polys.tests.test_numberfields.test_field_isomorphism()
sympy.polys.tests.test_numberfields.test_field_isomorphism_pslq()
sympy.polys.tests.test_numberfields.test_isolate()
sympy.polys.tests.test_numberfields.test_minimal_polynomial()
sympy.polys.tests.test_numberfields.test_minimal_polynomial_hi_prec()
sympy.polys.tests.test_numberfields.test_minimal_polynomial_sq()
sympy.polys.tests.test_numberfields.test_minpoly_compose()
sympy.polys.tests.test_numberfields.test_minpoly_domain()
sympy.polys.tests.test_numberfields.test_minpoly_fraction_field()
sympy.polys.tests.test_numberfields.test_minpoly_fraction_field_slow()
sympy.polys.tests.test_numberfields.test_minpoly_issue_7113()
sympy.polys.tests.test_numberfields.test_minpoly_issue_7574()
sympy.polys.tests.test_numberfields.test_primitive_element()
sympy.polys.tests.test_numberfields.test_to_algebraic_integer()
sympy.polys.tests.test_numberfields.test_to_number_field()
sympy.tests.test_numbertest_AlgebraicNumber()
sympy.tests.test_numbertest_IntervalPrinter()
sympy.tests.test_numbertest_field_isomorphism()
sympy.tests.test_numbertest_field_isomorphism_pslq()
sympy.tests.test_numbertest_isolate()
sympy.tests.test_numbertest_minimal_polynomial()
sympy.tests.test_numbertest_minimal_polynomial_hi_prec()
sympy.tests.test_numbertest_minimal_polynomial_sq()
sympy.tests.test_numbertest_minpoly_compose()
sympy.tests.test_numbertest_minpoly_domain()
sympy.tests.test_numbertest_minpoly_fraction_field()
sympy.tests.test_numbertest_minpoly_fraction_field_slow()
sympy.tests.test_numbertest_minpoly_issue_7113()
sympy.tests.test_numbertest_minpoly_issue_7574()
sympy.tests.test_numbertest_primitive_element()
sympy.tests.test_numbertest_to_algebraic_integer()
sympy.tests.test_numbertest_to_number_field()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_monomials.py----------------------------------------
A:sympy.polys.tests.test_monomials.m->Monomial((3, 4, 1), (x, y, z))
A:sympy.polys.tests.test_monomials.n->Monomial((1, 2, 0), (x, y, z))
sympy.polys.tests.test_monomials.test_Monomial()
sympy.polys.tests.test_monomials.test_monomial_count()
sympy.polys.tests.test_monomials.test_monomial_div()
sympy.polys.tests.test_monomials.test_monomial_divides()
sympy.polys.tests.test_monomials.test_monomial_gcd()
sympy.polys.tests.test_monomials.test_monomial_lcm()
sympy.polys.tests.test_monomials.test_monomial_max()
sympy.polys.tests.test_monomials.test_monomial_min()
sympy.polys.tests.test_monomials.test_monomial_mul()
sympy.polys.tests.test_monomials.test_monomials()
sympy.tests.test_test_Monomial()
sympy.tests.test_test_monomial_count()
sympy.tests.test_test_monomial_div()
sympy.tests.test_test_monomial_divides()
sympy.tests.test_test_monomial_gcd()
sympy.tests.test_test_monomial_lcm()
sympy.tests.test_test_monomial_max()
sympy.tests.test_test_monomial_min()
sympy.tests.test_test_monomial_mul()
sympy.tests.test_test_monomials()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/tests/test_polyoptions.py----------------------------------------
A:sympy.polys.tests.test_polyoptions.opt->Options((x, y, z), {'domain': 'ZZ'})
A:sympy.polys.tests.test_polyoptions.new_opt->Options((x, y, z), {'domain': 'ZZ'}).clone({'gens': (x, y), 'order': 'lex'})
A:sympy.polys.tests.test_polyoptions.a->Symbol('a', commutative=False)
sympy.polys.tests.test_polyoptions.test_All_postprocess()
sympy.polys.tests.test_polyoptions.test_All_preprocess()
sympy.polys.tests.test_polyoptions.test_Auto_postprocess()
sympy.polys.tests.test_polyoptions.test_Auto_preprocess()
sympy.polys.tests.test_polyoptions.test_Domain_postprocess()
sympy.polys.tests.test_polyoptions.test_Domain_preprocess()
sympy.polys.tests.test_polyoptions.test_Expand_postprocess()
sympy.polys.tests.test_polyoptions.test_Expand_preprocess()
sympy.polys.tests.test_polyoptions.test_Extension_postprocess()
sympy.polys.tests.test_polyoptions.test_Extension_preprocess()
sympy.polys.tests.test_polyoptions.test_Field_postprocess()
sympy.polys.tests.test_polyoptions.test_Field_preprocess()
sympy.polys.tests.test_polyoptions.test_Formal_postprocess()
sympy.polys.tests.test_polyoptions.test_Formal_preprocess()
sympy.polys.tests.test_polyoptions.test_Frac_postprocess()
sympy.polys.tests.test_polyoptions.test_Frac_preprocess()
sympy.polys.tests.test_polyoptions.test_Gaussian_postprocess()
sympy.polys.tests.test_polyoptions.test_Gaussian_preprocess()
sympy.polys.tests.test_polyoptions.test_Gen_postprocess()
sympy.polys.tests.test_polyoptions.test_Gens_postprocess()
sympy.polys.tests.test_polyoptions.test_Gens_preprocess()
sympy.polys.tests.test_polyoptions.test_Greedy_postprocess()
sympy.polys.tests.test_polyoptions.test_Greedy_preprocess()
sympy.polys.tests.test_polyoptions.test_Include_postprocess()
sympy.polys.tests.test_polyoptions.test_Include_preprocess()
sympy.polys.tests.test_polyoptions.test_Method_postprocess()
sympy.polys.tests.test_polyoptions.test_Method_preprocess()
sympy.polys.tests.test_polyoptions.test_Modulus_postprocess()
sympy.polys.tests.test_polyoptions.test_Modulus_preprocess()
sympy.polys.tests.test_polyoptions.test_Options_clone()
sympy.polys.tests.test_polyoptions.test_Order_postprocess()
sympy.polys.tests.test_polyoptions.test_Order_preprocess()
sympy.polys.tests.test_polyoptions.test_Polys_postprocess()
sympy.polys.tests.test_polyoptions.test_Polys_preprocess()
sympy.polys.tests.test_polyoptions.test_Sort_postprocess()
sympy.polys.tests.test_polyoptions.test_Sort_preprocess()
sympy.polys.tests.test_polyoptions.test_Split_postprocess()
sympy.polys.tests.test_polyoptions.test_Split_preprocess()
sympy.polys.tests.test_polyoptions.test_Strict_postprocess()
sympy.polys.tests.test_polyoptions.test_Strict_preprocess()
sympy.polys.tests.test_polyoptions.test_Symbols_postprocess()
sympy.polys.tests.test_polyoptions.test_Symbols_preprocess()
sympy.polys.tests.test_polyoptions.test_Symmetric_postprocess()
sympy.polys.tests.test_polyoptions.test_Symmetric_preprocess()
sympy.polys.tests.test_polyoptions.test_Wrt_postprocess()
sympy.polys.tests.test_polyoptions.test_Wrt_preprocess()
sympy.tests.test_test_All_postprocess()
sympy.tests.test_test_All_preprocess()
sympy.tests.test_test_Auto_postprocess()
sympy.tests.test_test_Auto_preprocess()
sympy.tests.test_test_Domain_postprocess()
sympy.tests.test_test_Domain_preprocess()
sympy.tests.test_test_Expand_postprocess()
sympy.tests.test_test_Expand_preprocess()
sympy.tests.test_test_Extension_postprocess()
sympy.tests.test_test_Extension_preprocess()
sympy.tests.test_test_Field_postprocess()
sympy.tests.test_test_Field_preprocess()
sympy.tests.test_test_Formal_postprocess()
sympy.tests.test_test_Formal_preprocess()
sympy.tests.test_test_Frac_postprocess()
sympy.tests.test_test_Frac_preprocess()
sympy.tests.test_test_Gaussian_postprocess()
sympy.tests.test_test_Gaussian_preprocess()
sympy.tests.test_test_Gen_postprocess()
sympy.tests.test_test_Gens_postprocess()
sympy.tests.test_test_Gens_preprocess()
sympy.tests.test_test_Greedy_postprocess()
sympy.tests.test_test_Greedy_preprocess()
sympy.tests.test_test_Include_postprocess()
sympy.tests.test_test_Include_preprocess()
sympy.tests.test_test_Method_postprocess()
sympy.tests.test_test_Method_preprocess()
sympy.tests.test_test_Modulus_postprocess()
sympy.tests.test_test_Modulus_preprocess()
sympy.tests.test_test_Options_clone()
sympy.tests.test_test_Order_postprocess()
sympy.tests.test_test_Order_preprocess()
sympy.tests.test_test_Polys_postprocess()
sympy.tests.test_test_Polys_preprocess()
sympy.tests.test_test_Sort_postprocess()
sympy.tests.test_test_Sort_preprocess()
sympy.tests.test_test_Split_postprocess()
sympy.tests.test_test_Split_preprocess()
sympy.tests.test_test_Strict_postprocess()
sympy.tests.test_test_Strict_preprocess()
sympy.tests.test_test_Symbols_postprocess()
sympy.tests.test_test_Symbols_preprocess()
sympy.tests.test_test_Symmetric_postprocess()
sympy.tests.test_test_Symmetric_preprocess()
sympy.tests.test_test_Wrt_postprocess()
sympy.tests.test_test_Wrt_preprocess()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/benchmarks/bench_solvers.py----------------------------------------
A:sympy.polys.benchmarks.bench_solvers.(R_165, uk_0, uk_1, uk_2, uk_3, uk_4, uk_5, uk_6, uk_7, uk_8, uk_9, uk_10, uk_11, uk_12, uk_13, uk_14, uk_15, uk_16, uk_17, uk_18, uk_19, uk_20, uk_21, uk_22, uk_23, uk_24, uk_25, uk_26, uk_27, uk_28, uk_29, uk_30, uk_31, uk_32, uk_33, uk_34, uk_35, uk_36, uk_37, uk_38, uk_39, uk_40, uk_41, uk_42, uk_43, uk_44, uk_45, uk_46, uk_47, uk_48, uk_49, uk_50, uk_51, uk_52, uk_53, uk_54, uk_55, uk_56, uk_57, uk_58, uk_59, uk_60, uk_61, uk_62, uk_63, uk_64, uk_65, uk_66, uk_67, uk_68, uk_69, uk_70, uk_71, uk_72, uk_73, uk_74, uk_75, uk_76, uk_77, uk_78, uk_79, uk_80, uk_81, uk_82, uk_83, uk_84, uk_85, uk_86, uk_87, uk_88, uk_89, uk_90, uk_91, uk_92, uk_93, uk_94, uk_95, uk_96, uk_97, uk_98, uk_99, uk_100, uk_101, uk_102, uk_103, uk_104, uk_105, uk_106, uk_107, uk_108, uk_109, uk_110, uk_111, uk_112, uk_113, uk_114, uk_115, uk_116, uk_117, uk_118, uk_119, uk_120, uk_121, uk_122, uk_123, uk_124, uk_125, uk_126, uk_127, uk_128, uk_129, uk_130, uk_131, uk_132, uk_133, uk_134, uk_135, uk_136, uk_137, uk_138, uk_139, uk_140, uk_141, uk_142, uk_143, uk_144, uk_145, uk_146, uk_147, uk_148, uk_149, uk_150, uk_151, uk_152, uk_153, uk_154, uk_155, uk_156, uk_157, uk_158, uk_159, uk_160, uk_161, uk_162, uk_163, uk_164)->ring('uk_:165', QQ)
A:sympy.polys.benchmarks.bench_solvers.eqs->eqs_10x8()
A:sympy.polys.benchmarks.bench_solvers.sol->sol_10x8()
A:sympy.polys.benchmarks.bench_solvers.(F_abc, a, b, c)->field('a,b,c', ZZ)
A:sympy.polys.benchmarks.bench_solvers.(R_49, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49)->ring('k1:50', F_abc)
A:sympy.polys.benchmarks.bench_solvers.(F_a5_5, a_11, a_12, a_13, a_14, a_21, a_22, a_23, a_24, a_31, a_32, a_33, a_34, a_41, a_42, a_43, a_44)->field('a_(1:5)(1:5)', ZZ)
A:sympy.polys.benchmarks.bench_solvers.(R_8, x0, x1, x2, x3, x4, x5, x6, x7)->ring('x:8', F_a5_5)
sympy.polys.benchmarks.bench_eqs_10x8()
sympy.polys.benchmarks.bench_eqs_165x165()
sympy.polys.benchmarks.bench_eqs_189x49()
sympy.polys.benchmarks.bench_sol_10x8()
sympy.polys.benchmarks.bench_sol_165x165()
sympy.polys.benchmarks.bench_sol_189x49()
sympy.polys.benchmarks.bench_solvers.eqs_10x8()
sympy.polys.benchmarks.bench_solvers.eqs_165x165()
sympy.polys.benchmarks.bench_solvers.eqs_189x49()
sympy.polys.benchmarks.bench_solvers.sol_10x8()
sympy.polys.benchmarks.bench_solvers.sol_165x165()
sympy.polys.benchmarks.bench_solvers.sol_189x49()
sympy.polys.benchmarks.bench_solvers.time_eqs_10x8()
sympy.polys.benchmarks.bench_solvers.time_eqs_165x165()
sympy.polys.benchmarks.bench_solvers.time_eqs_189x49()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_10x8()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_165x165()
sympy.polys.benchmarks.bench_solvers.time_solve_lin_sys_189x49()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_10x8()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_165x165()
sympy.polys.benchmarks.bench_solvers.time_to_expr_eqs_189x49()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_10x8()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_165x165()
sympy.polys.benchmarks.bench_solvers.time_verify_sol_189x49()
sympy.polys.benchmarks.bench_time_eqs_10x8()
sympy.polys.benchmarks.bench_time_eqs_165x165()
sympy.polys.benchmarks.bench_time_eqs_189x49()
sympy.polys.benchmarks.bench_time_solve_lin_sys_10x8()
sympy.polys.benchmarks.bench_time_solve_lin_sys_165x165()
sympy.polys.benchmarks.bench_time_solve_lin_sys_189x49()
sympy.polys.benchmarks.bench_time_to_expr_eqs_10x8()
sympy.polys.benchmarks.bench_time_to_expr_eqs_165x165()
sympy.polys.benchmarks.bench_time_to_expr_eqs_189x49()
sympy.polys.benchmarks.bench_time_verify_sol_10x8()
sympy.polys.benchmarks.bench_time_verify_sol_165x165()
sympy.polys.benchmarks.bench_time_verify_sol_189x49()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/benchmarks/bench_galoispolys.py----------------------------------------
A:sympy.polys.benchmarks.bench_galoispolys.p_10->genprime(10, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.f_10->gathen_poly(10, p_10, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.p_20->genprime(20, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.f_20->gathen_poly(20, p_20, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.P_08->genprime(8, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.F_10->shoup_poly(10, P_08, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.P_18->genprime(18, ZZ)
A:sympy.polys.benchmarks.bench_galoispolys.F_20->shoup_poly(20, P_18, ZZ)
sympy.benchmarks.bench_galoisgathen_poly(n,p,K)
sympy.benchmarks.bench_galoisgenprime(n,K)
sympy.benchmarks.bench_galoisshoup_poly(n,p,K)
sympy.benchmarks.bench_galoistimeit_gathen_poly_f10_shoup()
sympy.benchmarks.bench_galoistimeit_gathen_poly_f10_zassenhaus()
sympy.benchmarks.bench_galoistimeit_gathen_poly_f20_shoup()
sympy.benchmarks.bench_galoistimeit_gathen_poly_f20_zassenhaus()
sympy.benchmarks.bench_galoistimeit_shoup_poly_F10_shoup()
sympy.benchmarks.bench_galoistimeit_shoup_poly_F10_zassenhaus()
sympy.benchmarks.bench_galoistimeit_shoup_poly_F20_shoup()
sympy.benchmarks.bench_galoistimeit_shoup_poly_F20_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.gathen_poly(n,p,K)
sympy.polys.benchmarks.bench_galoispolys.genprime(n,K)
sympy.polys.benchmarks.bench_galoispolys.shoup_poly(n,p,K)
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f10_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f10_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f20_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_gathen_poly_f20_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F10_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F10_zassenhaus()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F20_shoup()
sympy.polys.benchmarks.bench_galoispolys.timeit_shoup_poly_F20_zassenhaus()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/benchmarks/bench_groebnertools.py----------------------------------------
A:sympy.polys.benchmarks.bench_groebnertools.(R, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)->ring('x1:13', QQ)
sympy.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_23_edges()
sympy.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_24_edges()
sympy.polys.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_23_edges()
sympy.polys.benchmarks.bench_groebnertools.time_vertex_color_12_vertices_24_edges()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/pythonfinitefield.py----------------------------------------
sympy.PythonFiniteField(self,mod,symmetric=True)
sympy.polys.domains.pythonfinitefield.PythonFiniteField(self,mod,symmetric=True)
sympy.polys.domains.pythonfinitefield.PythonFiniteField.__init__(self,mod,symmetric=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/__init__.py----------------------------------------
A:sympy.polys.domains.__init__.RR->RealField()
A:sympy.polys.domains.__init__.CC->ComplexField()
A:sympy.polys.domains.__init__.EX->ExpressionDomain()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/simpledomain.py----------------------------------------
sympy.polys.domains.simpledomain.SimpleDomain(Domain)
sympy.polys.domains.simpledomain.SimpleDomain.inject(self,*gens)
sympy.simpleSimpleDomain(Domain)
sympy.simpleSimpleDomain.inject(self,*gens)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/ring.py----------------------------------------
A:sympy.polys.domains.ring.(s, t, h)->self.gcdex(a, b)
A:sympy.polys.domains.ring.e->self.ideal(*e)
sympy.polys.domains.ring.Ring(Domain)
sympy.polys.domains.ring.Ring.__div__(self,e)
sympy.polys.domains.ring.Ring.denom(self,a)
sympy.polys.domains.ring.Ring.div(self,a,b)
sympy.polys.domains.ring.Ring.exquo(self,a,b)
sympy.polys.domains.ring.Ring.free_module(self,rank)
sympy.polys.domains.ring.Ring.get_ring(self)
sympy.polys.domains.ring.Ring.ideal(self,*gens)
sympy.polys.domains.ring.Ring.invert(self,a,b)
sympy.polys.domains.ring.Ring.is_unit(self,a)
sympy.polys.domains.ring.Ring.numer(self,a)
sympy.polys.domains.ring.Ring.quo(self,a,b)
sympy.polys.domains.ring.Ring.quotient_ring(self,e)
sympy.polys.domains.ring.Ring.rem(self,a,b)
sympy.polys.domains.ring.Ring.revert(self,a)
sympy.ring.Ring(Domain)
sympy.ring.Ring.__div__(self,e)
sympy.ring.Ring.denom(self,a)
sympy.ring.Ring.div(self,a,b)
sympy.ring.Ring.exquo(self,a,b)
sympy.ring.Ring.free_module(self,rank)
sympy.ring.Ring.get_ring(self)
sympy.ring.Ring.ideal(self,*gens)
sympy.ring.Ring.invert(self,a,b)
sympy.ring.Ring.is_unit(self,a)
sympy.ring.Ring.numer(self,a)
sympy.ring.Ring.quo(self,a,b)
sympy.ring.Ring.quotient_ring(self,e)
sympy.ring.Ring.rem(self,a,b)
sympy.ring.Ring.revert(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/rationalfield.py----------------------------------------
sympy.RationalField(Field,CharacteristicZero,SimpleDomain)
sympy.RationalField.algebraic_field(self,*extension)
sympy.RationalField.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.rationalfield.RationalField(Field,CharacteristicZero,SimpleDomain)
sympy.polys.domains.rationalfield.RationalField.algebraic_field(self,*extension)
sympy.polys.domains.rationalfield.RationalField.from_AlgebraicField(K1,a,K0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/finitefield.py----------------------------------------
A:sympy.polys.domains.finitefield.self.dtype->ModularIntegerFactory(mod, dom, symmetric, self)
A:sympy.polys.domains.finitefield.self.zero->self.dtype(0)
A:sympy.polys.domains.finitefield.self.one->self.dtype(1)
A:sympy.polys.domains.finitefield.(p, q)->K0.to_rational(a)
sympy.FiniteField(self,mod,dom=None,symmetric=True)
sympy.FiniteField.__eq__(self,other)
sympy.FiniteField.__hash__(self)
sympy.FiniteField.__str__(self)
sympy.FiniteField.characteristic(self)
sympy.FiniteField.from_FF_gmpy(K1,a,K0=None)
sympy.FiniteField.from_FF_python(K1,a,K0=None)
sympy.FiniteField.from_QQ_gmpy(K1,a,K0=None)
sympy.FiniteField.from_QQ_python(K1,a,K0=None)
sympy.FiniteField.from_RealField(K1,a,K0)
sympy.FiniteField.from_ZZ_gmpy(K1,a,K0=None)
sympy.FiniteField.from_ZZ_python(K1,a,K0=None)
sympy.FiniteField.from_sympy(self,a)
sympy.FiniteField.get_field(self)
sympy.FiniteField.to_sympy(self,a)
sympy.polys.domains.finitefield.FiniteField(self,mod,dom=None,symmetric=True)
sympy.polys.domains.finitefield.FiniteField.__eq__(self,other)
sympy.polys.domains.finitefield.FiniteField.__hash__(self)
sympy.polys.domains.finitefield.FiniteField.__init__(self,mod,dom=None,symmetric=True)
sympy.polys.domains.finitefield.FiniteField.__str__(self)
sympy.polys.domains.finitefield.FiniteField.characteristic(self)
sympy.polys.domains.finitefield.FiniteField.from_FF_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_FF_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_QQ_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_QQ_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_RealField(K1,a,K0)
sympy.polys.domains.finitefield.FiniteField.from_ZZ_gmpy(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_ZZ_python(K1,a,K0=None)
sympy.polys.domains.finitefield.FiniteField.from_sympy(self,a)
sympy.polys.domains.finitefield.FiniteField.get_field(self)
sympy.polys.domains.finitefield.FiniteField.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/fractionfield.py----------------------------------------
A:sympy.polys.domains.fractionfield.field->FracField(symbols, domain_or_field, order)
sympy.FractionField(self,domain_or_field,symbols=None,order=None)
sympy.FractionField.__eq__(self,other)
sympy.FractionField.__hash__(self)
sympy.FractionField.__str__(self)
sympy.FractionField.denom(self,a)
sympy.FractionField.factorial(self,a)
sympy.FractionField.from_AlgebraicField(K1,a,K0)
sympy.FractionField.from_FractionField(K1,a,K0)
sympy.FractionField.from_PolynomialRing(K1,a,K0)
sympy.FractionField.from_QQ_gmpy(K1,a,K0)
sympy.FractionField.from_QQ_python(K1,a,K0)
sympy.FractionField.from_RealField(K1,a,K0)
sympy.FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.FractionField.from_ZZ_python(K1,a,K0)
sympy.FractionField.from_sympy(self,a)
sympy.FractionField.get_ring(self)
sympy.FractionField.is_negative(self,a)
sympy.FractionField.is_nonnegative(self,a)
sympy.FractionField.is_nonpositive(self,a)
sympy.FractionField.is_positive(self,a)
sympy.FractionField.new(self,element)
sympy.FractionField.numer(self,a)
sympy.FractionField.one(self)
sympy.FractionField.order(self)
sympy.FractionField.to_sympy(self,a)
sympy.FractionField.zero(self)
sympy.polys.domains.fractionfield.FractionField(self,domain_or_field,symbols=None,order=None)
sympy.polys.domains.fractionfield.FractionField.__eq__(self,other)
sympy.polys.domains.fractionfield.FractionField.__hash__(self)
sympy.polys.domains.fractionfield.FractionField.__init__(self,domain_or_field,symbols=None,order=None)
sympy.polys.domains.fractionfield.FractionField.__str__(self)
sympy.polys.domains.fractionfield.FractionField.denom(self,a)
sympy.polys.domains.fractionfield.FractionField.factorial(self,a)
sympy.polys.domains.fractionfield.FractionField.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_FractionField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_QQ_python(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_RealField(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.fractionfield.FractionField.from_sympy(self,a)
sympy.polys.domains.fractionfield.FractionField.get_ring(self)
sympy.polys.domains.fractionfield.FractionField.is_negative(self,a)
sympy.polys.domains.fractionfield.FractionField.is_nonnegative(self,a)
sympy.polys.domains.fractionfield.FractionField.is_nonpositive(self,a)
sympy.polys.domains.fractionfield.FractionField.is_positive(self,a)
sympy.polys.domains.fractionfield.FractionField.new(self,element)
sympy.polys.domains.fractionfield.FractionField.numer(self,a)
sympy.polys.domains.fractionfield.FractionField.one(self)
sympy.polys.domains.fractionfield.FractionField.order(self)
sympy.polys.domains.fractionfield.FractionField.to_sympy(self,a)
sympy.polys.domains.fractionfield.FractionField.zero(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/integerring.py----------------------------------------
sympy.IntegerRing(Ring,CharacteristicZero,SimpleDomain)
sympy.IntegerRing.algebraic_field(self,*extension)
sympy.IntegerRing.from_AlgebraicField(K1,a,K0)
sympy.IntegerRing.get_field(self)
sympy.IntegerRing.log(self,a,b)
sympy.polys.domains.integerring.IntegerRing(Ring,CharacteristicZero,SimpleDomain)
sympy.polys.domains.integerring.IntegerRing.algebraic_field(self,*extension)
sympy.polys.domains.integerring.IntegerRing.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.integerring.IntegerRing.get_field(self)
sympy.polys.domains.integerring.IntegerRing.log(self,a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/gmpyintegerring.py----------------------------------------
A:sympy.polys.domains.gmpyintegerring.zero->dtype(0)
A:sympy.polys.domains.gmpyintegerring.one->dtype(1)
A:sympy.polys.domains.gmpyintegerring.tp->type(one)
A:sympy.polys.domains.gmpyintegerring.(p, q)->K0.to_rational(a)
A:sympy.polys.domains.gmpyintegerring.(h, s, t)->gmpy_gcdex(a, b)
sympy.GMPYIntegerRing(self)
sympy.GMPYIntegerRing.factorial(self,a)
sympy.GMPYIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.GMPYIntegerRing.from_FF_python(K1,a,K0)
sympy.GMPYIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.GMPYIntegerRing.from_QQ_python(K1,a,K0)
sympy.GMPYIntegerRing.from_RealField(K1,a,K0)
sympy.GMPYIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.GMPYIntegerRing.from_ZZ_python(K1,a,K0)
sympy.GMPYIntegerRing.from_sympy(self,a)
sympy.GMPYIntegerRing.gcd(self,a,b)
sympy.GMPYIntegerRing.gcdex(self,a,b)
sympy.GMPYIntegerRing.lcm(self,a,b)
sympy.GMPYIntegerRing.sqrt(self,a)
sympy.GMPYIntegerRing.to_sympy(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing(self)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.__init__(self)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.factorial(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_FF_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_RealField(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.from_sympy(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.gcd(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.gcdex(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.lcm(self,a,b)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.sqrt(self,a)
sympy.polys.domains.gmpyintegerring.GMPYIntegerRing.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/mpelements.py----------------------------------------
A:sympy.polys.domains.mpelements._mpf_->property(lambda self: self.__mpf__, _set_mpf)
A:sympy.polys.domains.mpelements._mpc_->property(lambda self: self.__mpc__, _set_mpc)
A:sympy.polys.domains.mpelements.ctx.mpf->type('RealElement', (RealElement,), {})
A:sympy.polys.domains.mpelements.ctx.mpc->type('ComplexElement', (ComplexElement,), {})
A:sympy.polys.domains.mpelements.ctx.constant->type('constant', (_constant,), {})
A:sympy.polys.domains.mpelements.ctx.tol->ctx._convert_tol(tol)
A:sympy.polys.domains.mpelements.ctx.tolerance->ctx.make_mpf(ctx.tol)
A:sympy.polys.domains.mpelements.ctx.max_denom->int(1 / ctx.tolerance)
A:sympy.polys.domains.mpelements.ctx.zero->ctx.make_mpf(fzero)
A:sympy.polys.domains.mpelements.ctx.one->ctx.make_mpf(fone)
A:sympy.polys.domains.mpelements.ctx.j->ctx.make_mpc((fzero, fone))
A:sympy.polys.domains.mpelements.ctx.inf->ctx.make_mpf(finf)
A:sympy.polys.domains.mpelements.ctx.ninf->ctx.make_mpf(fninf)
A:sympy.polys.domains.mpelements.ctx.nan->ctx.make_mpf(fnan)
A:sympy.polys.domains.mpelements.(p, q)->to_rational(s._mpf_)
A:sympy.polys.domains.mpelements.number->mpq(p, q)
A:sympy.polys.domains.mpelements.bound1->mpq(p0 + k * p1, q0 + k * q1)
A:sympy.polys.domains.mpelements.bound2->mpq(p1, q1)
A:sympy.polys.domains.mpelements.t->ctx.convert(t)
A:sympy.polys.domains.mpelements.abs_eps->ctx.convert(rel_eps)
A:sympy.polys.domains.mpelements.rel_eps->ctx.convert(abs_eps)
A:sympy.polys.domains.mpelements.diff->abs(s - t)
A:sympy.polys.domains.mpelements.abss->abs(s)
A:sympy.polys.domains.mpelements.abst->abs(t)
sympy.mpelements.ComplexElement(_mpc,DomainElement)
sympy.mpelements.ComplexElement._set_mpc(self,val)
sympy.mpelements.ComplexElement.parent(self)
sympy.mpelements.MPContext(ctx,prec=53,dps=None,tol=None)
sympy.mpelements.MPContext._convert_fallback(ctx,x,strings)
sympy.mpelements.MPContext._convert_tol(ctx,tol)
sympy.mpelements.MPContext._make_tol(ctx)
sympy.mpelements.MPContext._repr_digits(ctx)
sympy.mpelements.MPContext._str_digits(ctx)
sympy.mpelements.MPContext.almosteq(ctx,s,t,rel_eps=None,abs_eps=None)
sympy.mpelements.MPContext.make_tol(ctx)
sympy.mpelements.MPContext.to_rational(ctx,s,limit=True)
sympy.mpelements.RealElement(_mpf,DomainElement)
sympy.mpelements.RealElement._set_mpf(self,val)
sympy.mpelements.RealElement.parent(self)
sympy.polys.domains.mpelements.ComplexElement(_mpc,DomainElement)
sympy.polys.domains.mpelements.ComplexElement._set_mpc(self,val)
sympy.polys.domains.mpelements.ComplexElement.parent(self)
sympy.polys.domains.mpelements.MPContext(ctx,prec=53,dps=None,tol=None)
sympy.polys.domains.mpelements.MPContext.__init__(ctx,prec=53,dps=None,tol=None)
sympy.polys.domains.mpelements.MPContext._convert_fallback(ctx,x,strings)
sympy.polys.domains.mpelements.MPContext._convert_tol(ctx,tol)
sympy.polys.domains.mpelements.MPContext._make_tol(ctx)
sympy.polys.domains.mpelements.MPContext._repr_digits(ctx)
sympy.polys.domains.mpelements.MPContext._str_digits(ctx)
sympy.polys.domains.mpelements.MPContext.almosteq(ctx,s,t,rel_eps=None,abs_eps=None)
sympy.polys.domains.mpelements.MPContext.make_tol(ctx)
sympy.polys.domains.mpelements.MPContext.to_rational(ctx,s,limit=True)
sympy.polys.domains.mpelements.RealElement(_mpf,DomainElement)
sympy.polys.domains.mpelements.RealElement._set_mpf(self,val)
sympy.polys.domains.mpelements.RealElement.parent(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/old_polynomialring.py----------------------------------------
A:sympy.polys.domains.old_polynomialring.self.ngens->len(gens)
A:sympy.polys.domains.old_polynomialring.self.zero->self.dtype.zero(lev, dom, ring=self)
A:sympy.polys.domains.old_polynomialring.self.one->self.dtype.one(lev, dom, ring=self)
A:sympy.polys.domains.old_polynomialring.self.order->opts.get('order', monomial_key(self.default_order))
A:sympy.polys.domains.old_polynomialring.s_order->str(self.order)
A:sympy.polys.domains.old_polynomialring.(monoms, coeffs)->_dict_reorder(a.to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_polynomialring.dic->sdm_to_dict(s)
A:sympy.polys.domains.old_polynomialring.dics->self._sdm_to_dics(s, n)
A:sympy.polys.domains.old_polynomialring.(rep, _)->dict_from_basic(a, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.rep[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.res->self.dtype(a, self.dom, len(self.gens) - 1, ring=self)
A:sympy.polys.domains.old_polynomialring.a->self.convert(a)
A:sympy.polys.domains.old_polynomialring.dmf->K1.get_field().from_FractionField(a, K0)
A:sympy.polys.domains.old_polynomialring.(p, q)->self.convert(a).as_numer_denom()
A:sympy.polys.domains.old_polynomialring.(num, _)->dict_from_basic(p, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.(den, _)->dict_from_basic(q, gens=self.gens)
A:sympy.polys.domains.old_polynomialring.num[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.den[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_polynomialring.u->self.one.numer()
A:sympy.polys.domains.old_polynomialring.order->monomial_key(order)
sympy.old_GeneralizedPolynomialRing(PolynomialRingBase)
sympy.old_GeneralizedPolynomialRing.__contains__(self,a)
sympy.old_GeneralizedPolynomialRing._vector_to_sdm(self,v,order)
sympy.old_GeneralizedPolynomialRing.from_FractionField(K1,a,K0)
sympy.old_GeneralizedPolynomialRing.from_sympy(self,a)
sympy.old_GeneralizedPolynomialRing.new(self,a)
sympy.old_GeneralizedPolynomialRing.to_sympy(self,a)
sympy.old_GlobalPolynomialRing(PolynomialRingBase)
sympy.old_GlobalPolynomialRing._vector_to_sdm(self,v,order)
sympy.old_GlobalPolynomialRing.from_FractionField(K1,a,K0)
sympy.old_GlobalPolynomialRing.from_sympy(self,a)
sympy.old_GlobalPolynomialRing.is_negative(self,a)
sympy.old_GlobalPolynomialRing.is_nonnegative(self,a)
sympy.old_GlobalPolynomialRing.is_nonpositive(self,a)
sympy.old_GlobalPolynomialRing.is_positive(self,a)
sympy.old_GlobalPolynomialRing.to_sympy(self,a)
sympy.old_PolynomialRing(dom,*gens,**opts)
sympy.old_PolynomialRingBase(self,dom,*gens,**opts)
sympy.old_PolynomialRingBase.__eq__(self,other)
sympy.old_PolynomialRingBase.__hash__(self)
sympy.old_PolynomialRingBase.__str__(self)
sympy.old_PolynomialRingBase._sdm_to_dics(self,s,n)
sympy.old_PolynomialRingBase._sdm_to_vector(self,s,n)
sympy.old_PolynomialRingBase._vector_to_sdm(self,v,order)
sympy.old_PolynomialRingBase.factorial(self,a)
sympy.old_PolynomialRingBase.frac_field(self,*gens)
sympy.old_PolynomialRingBase.free_module(self,rank)
sympy.old_PolynomialRingBase.from_AlgebraicField(K1,a,K0)
sympy.old_PolynomialRingBase.from_GlobalPolynomialRing(K1,a,K0)
sympy.old_PolynomialRingBase.from_QQ_gmpy(K1,a,K0)
sympy.old_PolynomialRingBase.from_QQ_python(K1,a,K0)
sympy.old_PolynomialRingBase.from_RealField(K1,a,K0)
sympy.old_PolynomialRingBase.from_ZZ_gmpy(K1,a,K0)
sympy.old_PolynomialRingBase.from_ZZ_python(K1,a,K0)
sympy.old_PolynomialRingBase.gcd(self,a,b)
sympy.old_PolynomialRingBase.gcdex(self,a,b)
sympy.old_PolynomialRingBase.get_field(self)
sympy.old_PolynomialRingBase.lcm(self,a,b)
sympy.old_PolynomialRingBase.new(self,element)
sympy.old_PolynomialRingBase.poly_ring(self,*gens)
sympy.old_PolynomialRingBase.revert(self,a)
sympy.old__vector_to_sdm_helper(v,order)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing(PolynomialRingBase)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.__contains__(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.from_sympy(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.new(self,a)
sympy.polys.domains.old_polynomialring.GeneralizedPolynomialRing.to_sympy(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing(PolynomialRingBase)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.from_sympy(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_negative(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_nonnegative(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_nonpositive(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.is_positive(self,a)
sympy.polys.domains.old_polynomialring.GlobalPolynomialRing.to_sympy(self,a)
sympy.polys.domains.old_polynomialring.PolynomialRing(dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.PolynomialRingBase(self,dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__eq__(self,other)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__hash__(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__init__(self,dom,*gens,**opts)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.__str__(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._sdm_to_dics(self,s,n)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._sdm_to_vector(self,s,n)
sympy.polys.domains.old_polynomialring.PolynomialRingBase._vector_to_sdm(self,v,order)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.factorial(self,a)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.frac_field(self,*gens)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.free_module(self,rank)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_QQ_python(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_RealField(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.from_ZZ_python(K1,a,K0)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.gcd(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.gcdex(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.get_field(self)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.lcm(self,a,b)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.new(self,element)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.poly_ring(self,*gens)
sympy.polys.domains.old_polynomialring.PolynomialRingBase.revert(self,a)
sympy.polys.domains.old_polynomialring._vector_to_sdm_helper(v,order)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/realfield.py----------------------------------------
A:sympy.polys.domains.realfield.context->MPContext(prec, dps, tol)
A:sympy.polys.domains.realfield.self.zero->self.dtype(0)
A:sympy.polys.domains.realfield.self.one->self.dtype(1)
A:sympy.polys.domains.realfield.number->expr.evalf(n=self.dps)
sympy.RealField(self,prec=_default_precision,dps=None,tol=None)
sympy.RealField.__eq__(self,other)
sympy.RealField.__hash__(self)
sympy.RealField.almosteq(self,a,b,tolerance=None)
sympy.RealField.dps(self)
sympy.RealField.from_ComplexField(self,element,base)
sympy.RealField.from_QQ_gmpy(self,element,base)
sympy.RealField.from_QQ_python(self,element,base)
sympy.RealField.from_RealField(self,element,base)
sympy.RealField.from_ZZ_gmpy(self,element,base)
sympy.RealField.from_ZZ_python(self,element,base)
sympy.RealField.from_sympy(self,expr)
sympy.RealField.gcd(self,a,b)
sympy.RealField.get_exact(self)
sympy.RealField.get_ring(self)
sympy.RealField.has_default_precision(self)
sympy.RealField.lcm(self,a,b)
sympy.RealField.precision(self)
sympy.RealField.to_rational(self,element,limit=True)
sympy.RealField.to_sympy(self,element)
sympy.RealField.tolerance(self)
sympy.polys.domains.realfield.RealField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.realfield.RealField.__eq__(self,other)
sympy.polys.domains.realfield.RealField.__hash__(self)
sympy.polys.domains.realfield.RealField.__init__(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.realfield.RealField.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.realfield.RealField.dps(self)
sympy.polys.domains.realfield.RealField.from_ComplexField(self,element,base)
sympy.polys.domains.realfield.RealField.from_QQ_gmpy(self,element,base)
sympy.polys.domains.realfield.RealField.from_QQ_python(self,element,base)
sympy.polys.domains.realfield.RealField.from_RealField(self,element,base)
sympy.polys.domains.realfield.RealField.from_ZZ_gmpy(self,element,base)
sympy.polys.domains.realfield.RealField.from_ZZ_python(self,element,base)
sympy.polys.domains.realfield.RealField.from_sympy(self,expr)
sympy.polys.domains.realfield.RealField.gcd(self,a,b)
sympy.polys.domains.realfield.RealField.get_exact(self)
sympy.polys.domains.realfield.RealField.get_ring(self)
sympy.polys.domains.realfield.RealField.has_default_precision(self)
sympy.polys.domains.realfield.RealField.lcm(self,a,b)
sympy.polys.domains.realfield.RealField.precision(self)
sympy.polys.domains.realfield.RealField.to_rational(self,element,limit=True)
sympy.polys.domains.realfield.RealField.to_sympy(self,element)
sympy.polys.domains.realfield.RealField.tolerance(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/pythonintegerring.py----------------------------------------
A:sympy.polys.domains.pythonintegerring.zero->dtype(0)
A:sympy.polys.domains.pythonintegerring.one->dtype(1)
A:sympy.polys.domains.pythonintegerring.(p, q)->K0.to_rational(a)
sympy.PythonIntegerRing(self)
sympy.PythonIntegerRing.factorial(self,a)
sympy.PythonIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.PythonIntegerRing.from_FF_python(K1,a,K0)
sympy.PythonIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.PythonIntegerRing.from_QQ_python(K1,a,K0)
sympy.PythonIntegerRing.from_RealField(K1,a,K0)
sympy.PythonIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.PythonIntegerRing.from_ZZ_python(K1,a,K0)
sympy.PythonIntegerRing.from_sympy(self,a)
sympy.PythonIntegerRing.gcd(self,a,b)
sympy.PythonIntegerRing.gcdex(self,a,b)
sympy.PythonIntegerRing.lcm(self,a,b)
sympy.PythonIntegerRing.sqrt(self,a)
sympy.PythonIntegerRing.to_sympy(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing(self)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.__init__(self)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.factorial(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_FF_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_RealField(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.from_sympy(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.gcd(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.gcdex(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.lcm(self,a,b)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.sqrt(self,a)
sympy.polys.domains.pythonintegerring.PythonIntegerRing.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/groundtypes.py----------------------------------------
sympy.groundtypes.python_factorial(n)
sympy.groundtypes.python_sqrt(n)
sympy.polys.domains.groundtypes.python_factorial(n)
sympy.polys.domains.groundtypes.python_sqrt(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/old_fractionfield.py----------------------------------------
A:sympy.polys.domains.old_fractionfield.self.ngens->len(gens)
A:sympy.polys.domains.old_fractionfield.self.zero->self.dtype.zero(lev, dom, ring=self)
A:sympy.polys.domains.old_fractionfield.self.one->self.dtype.one(lev, dom, ring=self)
A:sympy.polys.domains.old_fractionfield.(p, q)->a.as_numer_denom()
A:sympy.polys.domains.old_fractionfield.(num, _)->dict_from_basic(p, gens=self.gens)
A:sympy.polys.domains.old_fractionfield.(den, _)->dict_from_basic(q, gens=self.gens)
A:sympy.polys.domains.old_fractionfield.num[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_fractionfield.den[k]->self.dom.from_sympy(v)
A:sympy.polys.domains.old_fractionfield.(monoms, coeffs)->_dict_reorder(a.to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_fractionfield.(nmonoms, ncoeffs)->_dict_reorder(a.numer().to_dict(), K0.gens, K1.gens)
A:sympy.polys.domains.old_fractionfield.(dmonoms, dcoeffs)->_dict_reorder(a.denom().to_dict(), K0.gens, K1.gens)
sympy.old_FractionField(self,dom,*gens)
sympy.old_FractionField.__eq__(self,other)
sympy.old_FractionField.__hash__(self)
sympy.old_FractionField.__str__(self)
sympy.old_FractionField.denom(self,a)
sympy.old_FractionField.factorial(self,a)
sympy.old_FractionField.frac_field(self,*gens)
sympy.old_FractionField.from_FractionField(K1,a,K0)
sympy.old_FractionField.from_GlobalPolynomialRing(K1,a,K0)
sympy.old_FractionField.from_QQ_gmpy(K1,a,K0)
sympy.old_FractionField.from_QQ_python(K1,a,K0)
sympy.old_FractionField.from_RealField(K1,a,K0)
sympy.old_FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.old_FractionField.from_ZZ_python(K1,a,K0)
sympy.old_FractionField.from_sympy(self,a)
sympy.old_FractionField.get_ring(self)
sympy.old_FractionField.is_negative(self,a)
sympy.old_FractionField.is_nonnegative(self,a)
sympy.old_FractionField.is_nonpositive(self,a)
sympy.old_FractionField.is_positive(self,a)
sympy.old_FractionField.new(self,element)
sympy.old_FractionField.numer(self,a)
sympy.old_FractionField.poly_ring(self,*gens)
sympy.old_FractionField.to_sympy(self,a)
sympy.polys.domains.old_fractionfield.FractionField(self,dom,*gens)
sympy.polys.domains.old_fractionfield.FractionField.__eq__(self,other)
sympy.polys.domains.old_fractionfield.FractionField.__hash__(self)
sympy.polys.domains.old_fractionfield.FractionField.__init__(self,dom,*gens)
sympy.polys.domains.old_fractionfield.FractionField.__str__(self)
sympy.polys.domains.old_fractionfield.FractionField.denom(self,a)
sympy.polys.domains.old_fractionfield.FractionField.factorial(self,a)
sympy.polys.domains.old_fractionfield.FractionField.frac_field(self,*gens)
sympy.polys.domains.old_fractionfield.FractionField.from_FractionField(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_QQ_python(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_RealField(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.old_fractionfield.FractionField.from_sympy(self,a)
sympy.polys.domains.old_fractionfield.FractionField.get_ring(self)
sympy.polys.domains.old_fractionfield.FractionField.is_negative(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_nonnegative(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_nonpositive(self,a)
sympy.polys.domains.old_fractionfield.FractionField.is_positive(self,a)
sympy.polys.domains.old_fractionfield.FractionField.new(self,element)
sympy.polys.domains.old_fractionfield.FractionField.numer(self,a)
sympy.polys.domains.old_fractionfield.FractionField.poly_ring(self,*gens)
sympy.polys.domains.old_fractionfield.FractionField.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/characteristiczero.py----------------------------------------
sympy.characteristiczero.CharacteristicZero(Domain)
sympy.characteristiczero.CharacteristicZero.characteristic(self)
sympy.polys.domains.characteristiczero.CharacteristicZero(Domain)
sympy.polys.domains.characteristiczero.CharacteristicZero.characteristic(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/field.py----------------------------------------
A:sympy.polys.domains.field.ring->self.get_ring()
A:sympy.polys.domains.field.p->self.get_ring().lcm(self.numer(a), self.numer(b))
A:sympy.polys.domains.field.q->self.get_ring().gcd(self.denom(a), self.denom(b))
sympy.field.Field(Ring)
sympy.field.Field.div(self,a,b)
sympy.field.Field.exquo(self,a,b)
sympy.field.Field.gcd(self,a,b)
sympy.field.Field.get_field(self)
sympy.field.Field.get_ring(self)
sympy.field.Field.lcm(self,a,b)
sympy.field.Field.quo(self,a,b)
sympy.field.Field.rem(self,a,b)
sympy.field.Field.revert(self,a)
sympy.polys.domains.field.Field(Ring)
sympy.polys.domains.field.Field.div(self,a,b)
sympy.polys.domains.field.Field.exquo(self,a,b)
sympy.polys.domains.field.Field.gcd(self,a,b)
sympy.polys.domains.field.Field.get_field(self)
sympy.polys.domains.field.Field.get_ring(self)
sympy.polys.domains.field.Field.lcm(self,a,b)
sympy.polys.domains.field.Field.quo(self,a,b)
sympy.polys.domains.field.Field.rem(self,a,b)
sympy.polys.domains.field.Field.revert(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/compositedomain.py----------------------------------------
sympy.compositeCompositeDomain(Domain)
sympy.compositeCompositeDomain.inject(self,*symbols)
sympy.polys.domains.compositedomain.CompositeDomain(Domain)
sympy.polys.domains.compositedomain.CompositeDomain.inject(self,*symbols)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/polynomialring.py----------------------------------------
A:sympy.polys.domains.polynomialring.ring->PolyRing(symbols, domain_or_ring, order)
A:sympy.polys.domains.polynomialring.denom->K0.denom(a)
sympy.PolynomialRing(self,domain_or_ring,symbols=None,order=None)
sympy.PolynomialRing.__eq__(self,other)
sympy.PolynomialRing.__hash__(self)
sympy.PolynomialRing.__str__(self)
sympy.PolynomialRing.factorial(self,a)
sympy.PolynomialRing.from_AlgebraicField(K1,a,K0)
sympy.PolynomialRing.from_FractionField(K1,a,K0)
sympy.PolynomialRing.from_PolynomialRing(K1,a,K0)
sympy.PolynomialRing.from_QQ_gmpy(K1,a,K0)
sympy.PolynomialRing.from_QQ_python(K1,a,K0)
sympy.PolynomialRing.from_RealField(K1,a,K0)
sympy.PolynomialRing.from_ZZ_gmpy(K1,a,K0)
sympy.PolynomialRing.from_ZZ_python(K1,a,K0)
sympy.PolynomialRing.from_sympy(self,a)
sympy.PolynomialRing.gcd(self,a,b)
sympy.PolynomialRing.gcdex(self,a,b)
sympy.PolynomialRing.get_field(self)
sympy.PolynomialRing.is_negative(self,a)
sympy.PolynomialRing.is_nonnegative(self,a)
sympy.PolynomialRing.is_nonpositive(self,a)
sympy.PolynomialRing.is_positive(self,a)
sympy.PolynomialRing.lcm(self,a,b)
sympy.PolynomialRing.new(self,element)
sympy.PolynomialRing.one(self)
sympy.PolynomialRing.order(self)
sympy.PolynomialRing.to_sympy(self,a)
sympy.PolynomialRing.zero(self)
sympy.polys.domains.polynomialring.PolynomialRing(self,domain_or_ring,symbols=None,order=None)
sympy.polys.domains.polynomialring.PolynomialRing.__eq__(self,other)
sympy.polys.domains.polynomialring.PolynomialRing.__hash__(self)
sympy.polys.domains.polynomialring.PolynomialRing.__init__(self,domain_or_ring,symbols=None,order=None)
sympy.polys.domains.polynomialring.PolynomialRing.__str__(self)
sympy.polys.domains.polynomialring.PolynomialRing.factorial(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_FractionField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_QQ_python(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_RealField(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.polynomialring.PolynomialRing.from_sympy(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.gcd(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.gcdex(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.get_field(self)
sympy.polys.domains.polynomialring.PolynomialRing.is_negative(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_nonnegative(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_nonpositive(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.is_positive(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.lcm(self,a,b)
sympy.polys.domains.polynomialring.PolynomialRing.new(self,element)
sympy.polys.domains.polynomialring.PolynomialRing.one(self)
sympy.polys.domains.polynomialring.PolynomialRing.order(self)
sympy.polys.domains.polynomialring.PolynomialRing.to_sympy(self,a)
sympy.polys.domains.polynomialring.PolynomialRing.zero(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/gmpyrationalfield.py----------------------------------------
A:sympy.polys.domains.gmpyrationalfield.zero->dtype(0)
A:sympy.polys.domains.gmpyrationalfield.one->dtype(1)
A:sympy.polys.domains.gmpyrationalfield.tp->type(one)
sympy.GMPYRationalField(self)
sympy.GMPYRationalField.denom(self,a)
sympy.GMPYRationalField.div(self,a,b)
sympy.GMPYRationalField.exquo(self,a,b)
sympy.GMPYRationalField.factorial(self,a)
sympy.GMPYRationalField.from_QQ_gmpy(K1,a,K0)
sympy.GMPYRationalField.from_QQ_python(K1,a,K0)
sympy.GMPYRationalField.from_RealField(K1,a,K0)
sympy.GMPYRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.GMPYRationalField.from_ZZ_python(K1,a,K0)
sympy.GMPYRationalField.from_sympy(self,a)
sympy.GMPYRationalField.get_ring(self)
sympy.GMPYRationalField.numer(self,a)
sympy.GMPYRationalField.quo(self,a,b)
sympy.GMPYRationalField.rem(self,a,b)
sympy.GMPYRationalField.to_sympy(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.__init__(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.denom(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.div(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.exquo(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.factorial(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_QQ_python(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_RealField(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.from_sympy(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.get_ring(self)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.numer(self,a)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.quo(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.rem(self,a,b)
sympy.polys.domains.gmpyrationalfield.GMPYRationalField.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/pythonrational.py----------------------------------------
A:sympy.polys.domains.pythonrational.obj->object.__new__(cls)
sympy.PythonRational(self,p,q=1)
sympy.PythonRational.__abs__(self)
sympy.PythonRational.__add__(self,other)
sympy.PythonRational.__div__(self,other)
sympy.PythonRational.__divmod__(self,other)
sympy.PythonRational.__eq__(self,other)
sympy.PythonRational.__float__(self)
sympy.PythonRational.__ge__(self,other)
sympy.PythonRational.__gt__(self,other)
sympy.PythonRational.__hash__(self)
sympy.PythonRational.__int__(self)
sympy.PythonRational.__le__(self,other)
sympy.PythonRational.__lt__(self,other)
sympy.PythonRational.__mod__(self,other)
sympy.PythonRational.__mul__(self,other)
sympy.PythonRational.__ne__(self,other)
sympy.PythonRational.__neg__(self)
sympy.PythonRational.__nonzero__(self)
sympy.PythonRational.__pos__(self)
sympy.PythonRational.__pow__(self,exp)
sympy.PythonRational.__radd__(self,other)
sympy.PythonRational.__rdiv__(self,other)
sympy.PythonRational.__rmul__(self,other)
sympy.PythonRational.__rsub__(self,other)
sympy.PythonRational.__sub__(self,other)
sympy.PythonRational._cmp(self,other,op)
sympy.PythonRational.denom(self)
sympy.PythonRational.new(cls,p,q)
sympy.PythonRational.numer(self)
sympy.PythonRational.parent(self)
sympy.polys.domains.pythonrational.PythonRational(self,p,q=1)
sympy.polys.domains.pythonrational.PythonRational.__abs__(self)
sympy.polys.domains.pythonrational.PythonRational.__add__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__div__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__divmod__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__eq__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__float__(self)
sympy.polys.domains.pythonrational.PythonRational.__ge__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__gt__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__hash__(self)
sympy.polys.domains.pythonrational.PythonRational.__init__(self,p,q=1)
sympy.polys.domains.pythonrational.PythonRational.__int__(self)
sympy.polys.domains.pythonrational.PythonRational.__le__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__lt__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__mod__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__mul__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__ne__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__neg__(self)
sympy.polys.domains.pythonrational.PythonRational.__nonzero__(self)
sympy.polys.domains.pythonrational.PythonRational.__pos__(self)
sympy.polys.domains.pythonrational.PythonRational.__pow__(self,exp)
sympy.polys.domains.pythonrational.PythonRational.__radd__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__rdiv__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__rmul__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__rsub__(self,other)
sympy.polys.domains.pythonrational.PythonRational.__sub__(self,other)
sympy.polys.domains.pythonrational.PythonRational._cmp(self,other,op)
sympy.polys.domains.pythonrational.PythonRational.denom(self)
sympy.polys.domains.pythonrational.PythonRational.new(cls,p,q)
sympy.polys.domains.pythonrational.PythonRational.numer(self)
sympy.polys.domains.pythonrational.PythonRational.parent(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/expressiondomain.py----------------------------------------
A:sympy.polys.domains.expressiondomain.self.ex->sympify(ex)
A:sympy.polys.domains.expressiondomain.g->f._to_ex(g)
A:sympy.polys.domains.expressiondomain.n->f._to_ex(n)
A:sympy.polys.domains.expressiondomain.zero->Expression(0)
A:sympy.polys.domains.expressiondomain.one->Expression(1)
sympy.ExpressionDomain(self)
sympy.ExpressionDomain.Expression(self,ex)
sympy.ExpressionDomain.Expression.__abs__(f)
sympy.ExpressionDomain.Expression.__add__(f,g)
sympy.ExpressionDomain.Expression.__eq__(f,g)
sympy.ExpressionDomain.Expression.__hash__(self)
sympy.ExpressionDomain.Expression.__mul__(f,g)
sympy.ExpressionDomain.Expression.__ne__(f,g)
sympy.ExpressionDomain.Expression.__neg__(f)
sympy.ExpressionDomain.Expression.__nonzero__(f)
sympy.ExpressionDomain.Expression.__pow__(f,n)
sympy.ExpressionDomain.Expression.__radd__(f,g)
sympy.ExpressionDomain.Expression.__repr__(f)
sympy.ExpressionDomain.Expression.__rmul__(f,g)
sympy.ExpressionDomain.Expression.__rsub__(f,g)
sympy.ExpressionDomain.Expression.__rtruediv__(f,g)
sympy.ExpressionDomain.Expression.__str__(f)
sympy.ExpressionDomain.Expression.__sub__(f,g)
sympy.ExpressionDomain.Expression.__truediv__(f,g)
sympy.ExpressionDomain.Expression._to_ex(f,g)
sympy.ExpressionDomain.Expression.as_expr(f)
sympy.ExpressionDomain.Expression.denom(f)
sympy.ExpressionDomain.Expression.gcd(f,g)
sympy.ExpressionDomain.Expression.lcm(f,g)
sympy.ExpressionDomain.Expression.numer(f)
sympy.ExpressionDomain.Expression.simplify(f,ex)
sympy.ExpressionDomain.denom(self,a)
sympy.ExpressionDomain.from_ExpressionDomain(K1,a,K0)
sympy.ExpressionDomain.from_FractionField(K1,a,K0)
sympy.ExpressionDomain.from_PolynomialRing(K1,a,K0)
sympy.ExpressionDomain.from_QQ_gmpy(K1,a,K0)
sympy.ExpressionDomain.from_QQ_python(K1,a,K0)
sympy.ExpressionDomain.from_RealField(K1,a,K0)
sympy.ExpressionDomain.from_ZZ_gmpy(K1,a,K0)
sympy.ExpressionDomain.from_ZZ_python(K1,a,K0)
sympy.ExpressionDomain.from_sympy(self,a)
sympy.ExpressionDomain.gcd(self,a,b)
sympy.ExpressionDomain.get_field(self)
sympy.ExpressionDomain.get_ring(self)
sympy.ExpressionDomain.is_negative(self,a)
sympy.ExpressionDomain.is_nonnegative(self,a)
sympy.ExpressionDomain.is_nonpositive(self,a)
sympy.ExpressionDomain.is_positive(self,a)
sympy.ExpressionDomain.lcm(self,a,b)
sympy.ExpressionDomain.numer(self,a)
sympy.ExpressionDomain.to_sympy(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression(self,ex)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__abs__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__add__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__eq__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__hash__(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__init__(self,ex)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__mul__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__ne__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__neg__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__nonzero__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__pow__(f,n)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__radd__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__repr__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rmul__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rsub__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__rtruediv__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__str__(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__sub__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.__truediv__(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression._to_ex(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.as_expr(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.denom(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.gcd(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.lcm(f,g)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.numer(f)
sympy.polys.domains.expressiondomain.ExpressionDomain.Expression.simplify(f,ex)
sympy.polys.domains.expressiondomain.ExpressionDomain.__init__(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.denom(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ExpressionDomain(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_FractionField(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_QQ_python(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_RealField(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_ZZ_python(K1,a,K0)
sympy.polys.domains.expressiondomain.ExpressionDomain.from_sympy(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.gcd(self,a,b)
sympy.polys.domains.expressiondomain.ExpressionDomain.get_field(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.get_ring(self)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_negative(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_nonnegative(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_nonpositive(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.is_positive(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.lcm(self,a,b)
sympy.polys.domains.expressiondomain.ExpressionDomain.numer(self,a)
sympy.polys.domains.expressiondomain.ExpressionDomain.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/domainelement.py----------------------------------------
sympy.domainelement.DomainElement(object)
sympy.domainelement.DomainElement.parent(self)
sympy.polys.domains.domainelement.DomainElement(object)
sympy.polys.domains.domainelement.DomainElement.parent(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/domain.py----------------------------------------
A:sympy.polys.domains.domain._convert->getattr(self, method)
A:sympy.polys.domains.domain.result->_convert(element, base)
A:sympy.polys.domains.domain.integers->GMPYIntegerRing()
A:sympy.polys.domains.domain.rationals->GMPYRationalField()
A:sympy.polys.domains.domain.parent->ComplexField(tol=False)
A:sympy.polys.domains.domain.element->sympify(element)
A:sympy.polys.domains.domain.domain->domain.get_ring().get_ring()
A:sympy.polys.domains.domain.symbols->_unify_gens(K0_symbols, K1_symbols)
A:sympy.polys.domains.domain.prec->max(K0.precision, K1.precision)
A:sympy.polys.domains.domain.tol->max(K0.tolerance, K1.tolerance)
A:sympy.polys.domains.domain.(s, t, h)->self.gcdex(a, b)
A:sympy.polys.domains.domain.gcd->self.gcd(a, b)
A:sympy.polys.domains.domain.cfa->self.quo(a, gcd)
A:sympy.polys.domains.domain.cfb->self.quo(b, gcd)
sympy.Domain(self)
sympy.Domain.__contains__(self,a)
sympy.Domain.__eq__(self,other)
sympy.Domain.__getitem__(self,symbols)
sympy.Domain.__hash__(self)
sympy.Domain.__ne__(self,other)
sympy.Domain.__repr__(self)
sympy.Domain.__str__(self)
sympy.Domain.abs(self,a)
sympy.Domain.add(self,a,b)
sympy.Domain.algebraic_field(self,*extension)
sympy.Domain.almosteq(self,a,b,tolerance=None)
sympy.Domain.characteristic(self)
sympy.Domain.cofactors(self,a,b)
sympy.Domain.convert(self,element,base=None)
sympy.Domain.convert_from(self,element,base)
sympy.Domain.denom(self,a)
sympy.Domain.div(self,a,b)
sympy.Domain.evalf(self,a,prec=None,**options)
sympy.Domain.exquo(self,a,b)
sympy.Domain.frac_field(self,*symbols,**kwargs)
sympy.Domain.from_AlgebraicField(K1,a,K0)
sympy.Domain.from_ComplexField(K1,a,K0)
sympy.Domain.from_ExpressionDomain(K1,a,K0)
sympy.Domain.from_FF_gmpy(K1,a,K0)
sympy.Domain.from_FF_python(K1,a,K0)
sympy.Domain.from_FractionField(K1,a,K0)
sympy.Domain.from_GeneralizedPolynomialRing(K1,a,K0)
sympy.Domain.from_GlobalPolynomialRing(K1,a,K0)
sympy.Domain.from_PolynomialRing(K1,a,K0)
sympy.Domain.from_QQ_gmpy(K1,a,K0)
sympy.Domain.from_QQ_python(K1,a,K0)
sympy.Domain.from_RealField(K1,a,K0)
sympy.Domain.from_ZZ_gmpy(K1,a,K0)
sympy.Domain.from_ZZ_python(K1,a,K0)
sympy.Domain.from_sympy(self,a)
sympy.Domain.gcd(self,a,b)
sympy.Domain.gcdex(self,a,b)
sympy.Domain.get_exact(self)
sympy.Domain.get_field(self)
sympy.Domain.get_ring(self)
sympy.Domain.half_gcdex(self,a,b)
sympy.Domain.imag(self,a)
sympy.Domain.inject(self,*symbols)
sympy.Domain.invert(self,a,b)
sympy.Domain.is_negative(self,a)
sympy.Domain.is_nonnegative(self,a)
sympy.Domain.is_nonpositive(self,a)
sympy.Domain.is_one(self,a)
sympy.Domain.is_positive(self,a)
sympy.Domain.is_zero(self,a)
sympy.Domain.lcm(self,a,b)
sympy.Domain.log(self,a,b)
sympy.Domain.map(self,seq)
sympy.Domain.mul(self,a,b)
sympy.Domain.neg(self,a)
sympy.Domain.new(self,*args)
sympy.Domain.normal(self,*args)
sympy.Domain.numer(self,a)
sympy.Domain.of_type(self,element)
sympy.Domain.old_frac_field(self,*symbols,**kwargs)
sympy.Domain.old_poly_ring(self,*symbols,**kwargs)
sympy.Domain.poly_ring(self,*symbols,**kwargs)
sympy.Domain.pos(self,a)
sympy.Domain.pow(self,a,b)
sympy.Domain.quo(self,a,b)
sympy.Domain.real(self,a)
sympy.Domain.rem(self,a,b)
sympy.Domain.revert(self,a)
sympy.Domain.sqrt(self,a)
sympy.Domain.sub(self,a,b)
sympy.Domain.to_sympy(self,a)
sympy.Domain.tp(self)
sympy.Domain.unify(K0,K1,symbols=None)
sympy.Domain.unify_with_symbols(K0,K1,symbols)
sympy.polys.domains.domain.Domain(self)
sympy.polys.domains.domain.Domain.__contains__(self,a)
sympy.polys.domains.domain.Domain.__eq__(self,other)
sympy.polys.domains.domain.Domain.__getitem__(self,symbols)
sympy.polys.domains.domain.Domain.__hash__(self)
sympy.polys.domains.domain.Domain.__init__(self)
sympy.polys.domains.domain.Domain.__ne__(self,other)
sympy.polys.domains.domain.Domain.__repr__(self)
sympy.polys.domains.domain.Domain.__str__(self)
sympy.polys.domains.domain.Domain.abs(self,a)
sympy.polys.domains.domain.Domain.add(self,a,b)
sympy.polys.domains.domain.Domain.algebraic_field(self,*extension)
sympy.polys.domains.domain.Domain.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.domain.Domain.characteristic(self)
sympy.polys.domains.domain.Domain.cofactors(self,a,b)
sympy.polys.domains.domain.Domain.convert(self,element,base=None)
sympy.polys.domains.domain.Domain.convert_from(self,element,base)
sympy.polys.domains.domain.Domain.denom(self,a)
sympy.polys.domains.domain.Domain.div(self,a,b)
sympy.polys.domains.domain.Domain.evalf(self,a,prec=None,**options)
sympy.polys.domains.domain.Domain.exquo(self,a,b)
sympy.polys.domains.domain.Domain.frac_field(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.from_AlgebraicField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ComplexField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ExpressionDomain(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FF_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FF_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_FractionField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_GeneralizedPolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_GlobalPolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_PolynomialRing(K1,a,K0)
sympy.polys.domains.domain.Domain.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_QQ_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_RealField(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.domain.Domain.from_ZZ_python(K1,a,K0)
sympy.polys.domains.domain.Domain.from_sympy(self,a)
sympy.polys.domains.domain.Domain.gcd(self,a,b)
sympy.polys.domains.domain.Domain.gcdex(self,a,b)
sympy.polys.domains.domain.Domain.get_exact(self)
sympy.polys.domains.domain.Domain.get_field(self)
sympy.polys.domains.domain.Domain.get_ring(self)
sympy.polys.domains.domain.Domain.half_gcdex(self,a,b)
sympy.polys.domains.domain.Domain.imag(self,a)
sympy.polys.domains.domain.Domain.inject(self,*symbols)
sympy.polys.domains.domain.Domain.invert(self,a,b)
sympy.polys.domains.domain.Domain.is_negative(self,a)
sympy.polys.domains.domain.Domain.is_nonnegative(self,a)
sympy.polys.domains.domain.Domain.is_nonpositive(self,a)
sympy.polys.domains.domain.Domain.is_one(self,a)
sympy.polys.domains.domain.Domain.is_positive(self,a)
sympy.polys.domains.domain.Domain.is_zero(self,a)
sympy.polys.domains.domain.Domain.lcm(self,a,b)
sympy.polys.domains.domain.Domain.log(self,a,b)
sympy.polys.domains.domain.Domain.map(self,seq)
sympy.polys.domains.domain.Domain.mul(self,a,b)
sympy.polys.domains.domain.Domain.neg(self,a)
sympy.polys.domains.domain.Domain.new(self,*args)
sympy.polys.domains.domain.Domain.normal(self,*args)
sympy.polys.domains.domain.Domain.numer(self,a)
sympy.polys.domains.domain.Domain.of_type(self,element)
sympy.polys.domains.domain.Domain.old_frac_field(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.old_poly_ring(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.poly_ring(self,*symbols,**kwargs)
sympy.polys.domains.domain.Domain.pos(self,a)
sympy.polys.domains.domain.Domain.pow(self,a,b)
sympy.polys.domains.domain.Domain.quo(self,a,b)
sympy.polys.domains.domain.Domain.real(self,a)
sympy.polys.domains.domain.Domain.rem(self,a,b)
sympy.polys.domains.domain.Domain.revert(self,a)
sympy.polys.domains.domain.Domain.sqrt(self,a)
sympy.polys.domains.domain.Domain.sub(self,a,b)
sympy.polys.domains.domain.Domain.to_sympy(self,a)
sympy.polys.domains.domain.Domain.tp(self)
sympy.polys.domains.domain.Domain.unify(K0,K1,symbols=None)
sympy.polys.domains.domain.Domain.unify_with_symbols(K0,K1,symbols)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/pythonrationalfield.py----------------------------------------
A:sympy.polys.domains.pythonrationalfield.zero->dtype(0)
A:sympy.polys.domains.pythonrationalfield.one->dtype(1)
A:sympy.polys.domains.pythonrationalfield.(p, q)->K0.to_rational(a)
sympy.PythonRationalField(self)
sympy.PythonRationalField.denom(self,a)
sympy.PythonRationalField.from_QQ_gmpy(K1,a,K0)
sympy.PythonRationalField.from_QQ_python(K1,a,K0)
sympy.PythonRationalField.from_RealField(K1,a,K0)
sympy.PythonRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.PythonRationalField.from_ZZ_python(K1,a,K0)
sympy.PythonRationalField.from_sympy(self,a)
sympy.PythonRationalField.get_ring(self)
sympy.PythonRationalField.numer(self,a)
sympy.PythonRationalField.to_sympy(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField.__init__(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField.denom(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_QQ_python(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_RealField(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.pythonrationalfield.PythonRationalField.from_sympy(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.get_ring(self)
sympy.polys.domains.pythonrationalfield.PythonRationalField.numer(self,a)
sympy.polys.domains.pythonrationalfield.PythonRationalField.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/modularinteger.py----------------------------------------
A:sympy.polys.domains.modularinteger.val->self._get_val(other)
A:sympy.polys.domains.modularinteger._mod->_dom.convert(_mod)
sympy.modularinteger.ModularInteger(self,val)
sympy.modularinteger.ModularInteger.__add__(self,other)
sympy.modularinteger.ModularInteger.__div__(self,other)
sympy.modularinteger.ModularInteger.__eq__(self,other)
sympy.modularinteger.ModularInteger.__ge__(self,other)
sympy.modularinteger.ModularInteger.__gt__(self,other)
sympy.modularinteger.ModularInteger.__hash__(self)
sympy.modularinteger.ModularInteger.__int__(self)
sympy.modularinteger.ModularInteger.__le__(self,other)
sympy.modularinteger.ModularInteger.__lt__(self,other)
sympy.modularinteger.ModularInteger.__mod__(self,other)
sympy.modularinteger.ModularInteger.__mul__(self,other)
sympy.modularinteger.ModularInteger.__ne__(self,other)
sympy.modularinteger.ModularInteger.__neg__(self)
sympy.modularinteger.ModularInteger.__nonzero__(self)
sympy.modularinteger.ModularInteger.__pos__(self)
sympy.modularinteger.ModularInteger.__pow__(self,exp)
sympy.modularinteger.ModularInteger.__radd__(self,other)
sympy.modularinteger.ModularInteger.__rdiv__(self,other)
sympy.modularinteger.ModularInteger.__repr__(self)
sympy.modularinteger.ModularInteger.__rmod__(self,other)
sympy.modularinteger.ModularInteger.__rmul__(self,other)
sympy.modularinteger.ModularInteger.__rsub__(self,other)
sympy.modularinteger.ModularInteger.__str__(self)
sympy.modularinteger.ModularInteger.__sub__(self,other)
sympy.modularinteger.ModularInteger._compare(self,other,op)
sympy.modularinteger.ModularInteger._get_val(cls,other)
sympy.modularinteger.ModularInteger._invert(cls,value)
sympy.modularinteger.ModularInteger.invert(self)
sympy.modularinteger.ModularInteger.parent(self)
sympy.modularinteger.ModularInteger.to_int(self)
sympy.modularinteger.ModularIntegerFactory(_mod,_dom,_sym,parent)
sympy.polys.domains.modularinteger.ModularInteger(self,val)
sympy.polys.domains.modularinteger.ModularInteger.__add__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__div__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__eq__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__ge__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__gt__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__hash__(self)
sympy.polys.domains.modularinteger.ModularInteger.__init__(self,val)
sympy.polys.domains.modularinteger.ModularInteger.__int__(self)
sympy.polys.domains.modularinteger.ModularInteger.__le__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__lt__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__mod__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__mul__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__ne__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__neg__(self)
sympy.polys.domains.modularinteger.ModularInteger.__nonzero__(self)
sympy.polys.domains.modularinteger.ModularInteger.__pos__(self)
sympy.polys.domains.modularinteger.ModularInteger.__pow__(self,exp)
sympy.polys.domains.modularinteger.ModularInteger.__radd__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rdiv__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__repr__(self)
sympy.polys.domains.modularinteger.ModularInteger.__rmod__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rmul__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__rsub__(self,other)
sympy.polys.domains.modularinteger.ModularInteger.__str__(self)
sympy.polys.domains.modularinteger.ModularInteger.__sub__(self,other)
sympy.polys.domains.modularinteger.ModularInteger._compare(self,other,op)
sympy.polys.domains.modularinteger.ModularInteger._get_val(cls,other)
sympy.polys.domains.modularinteger.ModularInteger._invert(cls,value)
sympy.polys.domains.modularinteger.ModularInteger.invert(self)
sympy.polys.domains.modularinteger.ModularInteger.parent(self)
sympy.polys.domains.modularinteger.ModularInteger.to_int(self)
sympy.polys.domains.modularinteger.ModularIntegerFactory(_mod,_dom,_sym,parent)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/quotientring.py----------------------------------------
A:sympy.polys.domains.quotientring.om->self.ring.convert(om)
A:sympy.polys.domains.quotientring.o->self.ring.convert(o)
A:sympy.polys.domains.quotientring.self.zero->self(self.ring.zero)
A:sympy.polys.domains.quotientring.self.one->self(self.ring.one)
A:sympy.polys.domains.quotientring.a->self.ring(a)
sympy.polys.domains.quotientring.QuotientRing(self,ring,ideal)
sympy.polys.domains.quotientring.QuotientRing.__eq__(self,other)
sympy.polys.domains.quotientring.QuotientRing.__hash__(self)
sympy.polys.domains.quotientring.QuotientRing.__init__(self,ring,ideal)
sympy.polys.domains.quotientring.QuotientRing.__str__(self)
sympy.polys.domains.quotientring.QuotientRing.frac_field(self,*gens)
sympy.polys.domains.quotientring.QuotientRing.free_module(self,rank)
sympy.polys.domains.quotientring.QuotientRing.from_QuotientRing(self,a,K0)
sympy.polys.domains.quotientring.QuotientRing.from_ZZ_python(K1,a,K0)
sympy.polys.domains.quotientring.QuotientRing.from_sympy(self,a)
sympy.polys.domains.quotientring.QuotientRing.is_zero(self,a)
sympy.polys.domains.quotientring.QuotientRing.new(self,a)
sympy.polys.domains.quotientring.QuotientRing.poly_ring(self,*gens)
sympy.polys.domains.quotientring.QuotientRing.revert(self,a)
sympy.polys.domains.quotientring.QuotientRing.to_sympy(self,a)
sympy.polys.domains.quotientring.QuotientRingElement(self,ring,data)
sympy.polys.domains.quotientring.QuotientRingElement.__add__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__div__(self,o)
sympy.polys.domains.quotientring.QuotientRingElement.__eq__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__init__(self,ring,data)
sympy.polys.domains.quotientring.QuotientRingElement.__mul__(self,o)
sympy.polys.domains.quotientring.QuotientRingElement.__ne__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__neg__(self)
sympy.polys.domains.quotientring.QuotientRingElement.__pow__(self,oth)
sympy.polys.domains.quotientring.QuotientRingElement.__rdiv__(self,o)
sympy.polys.domains.quotientring.QuotientRingElement.__rsub__(self,om)
sympy.polys.domains.quotientring.QuotientRingElement.__str__(self)
sympy.polys.domains.quotientring.QuotientRingElement.__sub__(self,om)
sympy.quotientring.QuotientRing(self,ring,ideal)
sympy.quotientring.QuotientRing.__eq__(self,other)
sympy.quotientring.QuotientRing.__hash__(self)
sympy.quotientring.QuotientRing.__str__(self)
sympy.quotientring.QuotientRing.frac_field(self,*gens)
sympy.quotientring.QuotientRing.free_module(self,rank)
sympy.quotientring.QuotientRing.from_QuotientRing(self,a,K0)
sympy.quotientring.QuotientRing.from_ZZ_python(K1,a,K0)
sympy.quotientring.QuotientRing.from_sympy(self,a)
sympy.quotientring.QuotientRing.is_zero(self,a)
sympy.quotientring.QuotientRing.new(self,a)
sympy.quotientring.QuotientRing.poly_ring(self,*gens)
sympy.quotientring.QuotientRing.revert(self,a)
sympy.quotientring.QuotientRing.to_sympy(self,a)
sympy.quotientring.QuotientRingElement(self,ring,data)
sympy.quotientring.QuotientRingElement.__add__(self,om)
sympy.quotientring.QuotientRingElement.__div__(self,o)
sympy.quotientring.QuotientRingElement.__eq__(self,om)
sympy.quotientring.QuotientRingElement.__mul__(self,o)
sympy.quotientring.QuotientRingElement.__ne__(self,om)
sympy.quotientring.QuotientRingElement.__neg__(self)
sympy.quotientring.QuotientRingElement.__pow__(self,oth)
sympy.quotientring.QuotientRingElement.__rdiv__(self,o)
sympy.quotientring.QuotientRingElement.__rsub__(self,om)
sympy.quotientring.QuotientRingElement.__str__(self)
sympy.quotientring.QuotientRingElement.__sub__(self,om)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/gmpyfinitefield.py----------------------------------------
sympy.GMPYFiniteField(self,mod,symmetric=True)
sympy.polys.domains.gmpyfinitefield.GMPYFiniteField(self,mod,symmetric=True)
sympy.polys.domains.gmpyfinitefield.GMPYFiniteField.__init__(self,mod,symmetric=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/complexfield.py----------------------------------------
A:sympy.polys.domains.complexfield.context->MPContext(prec, dps, tol)
A:sympy.polys.domains.complexfield.self.zero->self.dtype(0)
A:sympy.polys.domains.complexfield.self.one->self.dtype(1)
A:sympy.polys.domains.complexfield.number->expr.evalf(n=self.dps)
A:sympy.polys.domains.complexfield.(real, imag)->expr.evalf(n=self.dps).as_real_imag()
sympy.ComplexField(self,prec=_default_precision,dps=None,tol=None)
sympy.ComplexField.__eq__(self,other)
sympy.ComplexField.__hash__(self)
sympy.ComplexField.almosteq(self,a,b,tolerance=None)
sympy.ComplexField.dps(self)
sympy.ComplexField.from_ComplexField(self,element,base)
sympy.ComplexField.from_QQ_gmpy(self,element,base)
sympy.ComplexField.from_QQ_python(self,element,base)
sympy.ComplexField.from_RealField(self,element,base)
sympy.ComplexField.from_ZZ_gmpy(self,element,base)
sympy.ComplexField.from_ZZ_python(self,element,base)
sympy.ComplexField.from_sympy(self,expr)
sympy.ComplexField.gcd(self,a,b)
sympy.ComplexField.get_exact(self)
sympy.ComplexField.get_ring(self)
sympy.ComplexField.has_default_precision(self)
sympy.ComplexField.lcm(self,a,b)
sympy.ComplexField.precision(self)
sympy.ComplexField.to_sympy(self,element)
sympy.ComplexField.tolerance(self)
sympy.polys.domains.complexfield.ComplexField(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.complexfield.ComplexField.__eq__(self,other)
sympy.polys.domains.complexfield.ComplexField.__hash__(self)
sympy.polys.domains.complexfield.ComplexField.__init__(self,prec=_default_precision,dps=None,tol=None)
sympy.polys.domains.complexfield.ComplexField.almosteq(self,a,b,tolerance=None)
sympy.polys.domains.complexfield.ComplexField.dps(self)
sympy.polys.domains.complexfield.ComplexField.from_ComplexField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_QQ_gmpy(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_QQ_python(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_RealField(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ZZ_gmpy(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_ZZ_python(self,element,base)
sympy.polys.domains.complexfield.ComplexField.from_sympy(self,expr)
sympy.polys.domains.complexfield.ComplexField.gcd(self,a,b)
sympy.polys.domains.complexfield.ComplexField.get_exact(self)
sympy.polys.domains.complexfield.ComplexField.get_ring(self)
sympy.polys.domains.complexfield.ComplexField.has_default_precision(self)
sympy.polys.domains.complexfield.ComplexField.lcm(self,a,b)
sympy.polys.domains.complexfield.ComplexField.precision(self)
sympy.polys.domains.complexfield.ComplexField.to_sympy(self,element)
sympy.polys.domains.complexfield.ComplexField.tolerance(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/algebraicfield.py----------------------------------------
A:sympy.polys.domains.algebraicfield.self.ext->to_number_field(ext)
A:sympy.polys.domains.algebraicfield.self.unit->self([dom(1), dom(0)])
A:sympy.polys.domains.algebraicfield.self.zero->self.dtype.zero(self.mod.rep, dom)
A:sympy.polys.domains.algebraicfield.self.one->self.dtype.one(self.mod.rep, dom)
sympy.AlgebraicField(self,dom,*ext)
sympy.AlgebraicField.__eq__(self,other)
sympy.AlgebraicField.__hash__(self)
sympy.AlgebraicField.__str__(self)
sympy.AlgebraicField.algebraic_field(self,*extension)
sympy.AlgebraicField.denom(self,a)
sympy.AlgebraicField.from_QQ_gmpy(K1,a,K0)
sympy.AlgebraicField.from_QQ_python(K1,a,K0)
sympy.AlgebraicField.from_RealField(K1,a,K0)
sympy.AlgebraicField.from_ZZ_gmpy(K1,a,K0)
sympy.AlgebraicField.from_ZZ_python(K1,a,K0)
sympy.AlgebraicField.from_sympy(self,a)
sympy.AlgebraicField.get_ring(self)
sympy.AlgebraicField.is_negative(self,a)
sympy.AlgebraicField.is_nonnegative(self,a)
sympy.AlgebraicField.is_nonpositive(self,a)
sympy.AlgebraicField.is_positive(self,a)
sympy.AlgebraicField.new(self,element)
sympy.AlgebraicField.numer(self,a)
sympy.AlgebraicField.to_sympy(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField(self,dom,*ext)
sympy.polys.domains.algebraicfield.AlgebraicField.__eq__(self,other)
sympy.polys.domains.algebraicfield.AlgebraicField.__hash__(self)
sympy.polys.domains.algebraicfield.AlgebraicField.__init__(self,dom,*ext)
sympy.polys.domains.algebraicfield.AlgebraicField.__str__(self)
sympy.polys.domains.algebraicfield.AlgebraicField.algebraic_field(self,*extension)
sympy.polys.domains.algebraicfield.AlgebraicField.denom(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.from_QQ_gmpy(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_QQ_python(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_RealField(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_ZZ_gmpy(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_ZZ_python(K1,a,K0)
sympy.polys.domains.algebraicfield.AlgebraicField.from_sympy(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.get_ring(self)
sympy.polys.domains.algebraicfield.AlgebraicField.is_negative(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_nonnegative(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_nonpositive(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.is_positive(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.new(self,element)
sympy.polys.domains.algebraicfield.AlgebraicField.numer(self,a)
sympy.polys.domains.algebraicfield.AlgebraicField.to_sympy(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/tests/test_polynomialring.py----------------------------------------
A:sympy.polys.domains.tests.test_polynomialring.R->sympy.polys.domains.ZZ.old_poly_ring(x)
A:sympy.polys.domains.tests.test_polynomialring.Qxy->sympy.polys.domains.QQ.old_frac_field(x, y)
A:sympy.polys.domains.tests.test_polynomialring.X->sympy.polys.domains.ZZ.old_poly_ring(x).convert(x)
A:sympy.polys.domains.tests.test_polynomialring.Y->sympy.polys.domains.ZZ.old_poly_ring(x).convert(y)
A:sympy.polys.domains.tests.test_polynomialring.L->sympy.polys.domains.QQ.old_poly_ring(x, y, order='ilex')
A:sympy.polys.domains.tests.test_polynomialring.G->sympy.polys.domains.QQ.old_poly_ring(x, y)
sympy.polys.domains.tests.test_polynomialring.test_build_order()
sympy.polys.domains.tests.test_polynomialring.test_conversion()
sympy.polys.domains.tests.test_polynomialring.test_globalring()
sympy.polys.domains.tests.test_polynomialring.test_localring()
sympy.polys.domains.tests.test_polynomialring.test_units()
sympy.tests.test_test_build_order()
sympy.tests.test_test_conversion()
sympy.tests.test_test_globalring()
sympy.tests.test_test_localring()
sympy.tests.test_test_units()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/tests/test_domains.py----------------------------------------
A:sympy.polys.domains.tests.test_domains.ALG->sympy.polys.domains.QQ.algebraic_field(sqrt(2), sqrt(3))
A:sympy.polys.domains.tests.test_domains.F3->FF(3)
A:sympy.polys.domains.tests.test_domains.sqrt5->sympy.polys.domains.QQ.algebraic_field(sqrt(5))
A:sympy.polys.domains.tests.test_domains.sqrt7->sympy.polys.domains.QQ.algebraic_field(sqrt(7))
A:sympy.polys.domains.tests.test_domains.sqrt57->sympy.polys.domains.QQ.algebraic_field(sqrt(5), sqrt(7))
A:sympy.polys.domains.tests.test_domains.(R, x)->ring('x', ZZ)
A:sympy.polys.domains.tests.test_domains.seq->sympy.polys.domains.ZZ.map([[1, 2, 3, 4]])
A:sympy.polys.domains.tests.test_domains.alg->alg.algebraic_field(sqrt(3)).algebraic_field(sqrt(3))
A:sympy.polys.domains.tests.test_domains.(F, x, y)->field('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(R, X, Y)->ring('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(R, x, y)->ring('x,y', QQ)
A:sympy.polys.domains.tests.test_domains.(F, X, Y)->field('x,y', ZZ)
A:sympy.polys.domains.tests.test_domains.a->F3(F3(4))
A:sympy.polys.domains.tests.test_domains.F5->FF(5)
sympy.polys.domains.tests.test_domains.test_Domain___eq__()
sympy.polys.domains.tests.test_domains.test_Domain__algebraic_field()
sympy.polys.domains.tests.test_domains.test_Domain__contains__()
sympy.polys.domains.tests.test_domains.test_Domain_convert()
sympy.polys.domains.tests.test_domains.test_Domain_get_exact()
sympy.polys.domains.tests.test_domains.test_Domain_get_field()
sympy.polys.domains.tests.test_domains.test_Domain_get_ring()
sympy.polys.domains.tests.test_domains.test_Domain_map()
sympy.polys.domains.tests.test_domains.test_Domain_unify()
sympy.polys.domains.tests.test_domains.test_Domain_unify_algebraic()
sympy.polys.domains.tests.test_domains.test_Domain_unify_composite()
sympy.polys.domains.tests.test_domains.test_Domain_unify_with_symbols()
sympy.polys.domains.tests.test_domains.test_FF_of_type()
sympy.polys.domains.tests.test_domains.test_FractionField__init()
sympy.polys.domains.tests.test_domains.test_FractionField_from_PolynomialRing()
sympy.polys.domains.tests.test_domains.test_ModularInteger()
sympy.polys.domains.tests.test_domains.test_PolynomialRing__init()
sympy.polys.domains.tests.test_domains.test_PolynomialRing_from_FractionField()
sympy.polys.domains.tests.test_domains.test_QQ_int()
sympy.polys.domains.tests.test_domains.test_RealField_from_sympy()
sympy.polys.domains.tests.test_domains.test___eq__()
sympy.polys.domains.tests.test_domains.test_inject()
sympy.polys.domains.tests.test_domains.unify(K0,K1)
sympy.tests.test_test_Domain___eq__()
sympy.tests.test_test_Domain__algebraic_field()
sympy.tests.test_test_Domain__contains__()
sympy.tests.test_test_Domain_convert()
sympy.tests.test_test_Domain_get_exact()
sympy.tests.test_test_Domain_get_field()
sympy.tests.test_test_Domain_get_ring()
sympy.tests.test_test_Domain_map()
sympy.tests.test_test_Domain_unify()
sympy.tests.test_test_Domain_unify_algebraic()
sympy.tests.test_test_Domain_unify_composite()
sympy.tests.test_test_Domain_unify_with_symbols()
sympy.tests.test_test_FF_of_type()
sympy.tests.test_test_FractionField__init()
sympy.tests.test_test_FractionField_from_PolynomialRing()
sympy.tests.test_test_ModularInteger()
sympy.tests.test_test_PolynomialRing__init()
sympy.tests.test_test_PolynomialRing_from_FractionField()
sympy.tests.test_test_QQ_int()
sympy.tests.test_test_RealField_from_sympy()
sympy.tests.test_test___eq__()
sympy.tests.test_test_inject()
sympy.tests.test_unify(K0,K1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/domains/tests/test_quotientring.py----------------------------------------
A:sympy.polys.domains.tests.test_quotientring.X->sympy.QQ.old_poly_ring(x, order='ilex').convert(x)
A:sympy.polys.domains.tests.test_quotientring.I->sympy.QQ.old_poly_ring(x, order='ilex').ideal(x)
A:sympy.polys.domains.tests.test_quotientring.Y->sympy.QQ.old_poly_ring(x).convert(x)
A:sympy.polys.domains.tests.test_quotientring.R->sympy.QQ.old_poly_ring(x, order='ilex')
sympy.polys.domains.tests.test_quotientring.test_QuotientRing()
sympy.polys.domains.tests.test_quotientring.test_QuotientRingElement()
sympy.tests.test_quotientring.test_QuotientRing()
sympy.tests.test_quotientring.test_QuotientRingElement()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/modules.py----------------------------------------
A:sympy.polys.agca.modules.e->self.convert(e)
A:sympy.polys.agca.modules.om->self.module.convert(om)
A:sympy.polys.agca.modules.o->self.module.ring.convert(o)
A:sympy.polys.agca.modules.tpl->tuple((self.ring.convert(x) for x in elem))
A:sympy.polys.agca.modules.M->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False)
A:sympy.polys.agca.modules.F->self.ring.free_module(r + k).submodule(*newgens, order='ilex', TOP=False)
A:sympy.polys.agca.modules.self.gens->tuple((container.convert(x) for x in gens))
A:sympy.polys.agca.modules.r->copy(self.container.convert(elem, M))
A:sympy.polys.agca.modules.self.base->self.container.base.submodule(*[x.data for x in self.gens], **opts).union(self.killed_module)
A:sympy.polys.agca.modules.self.order->ModuleOrder(monomial_key(order), self.ring.order, TOP)
A:sympy.polys.agca.modules.(gb, gbe)->self._groebner(extended=True)
A:sympy.polys.agca.modules.self._gb->tuple(sdm_groebner([self.ring._vector_to_sdm(x, self.order) for x in self.gens], sdm_nf_mora, self.order, self.ring.dom))
A:sympy.polys.agca.modules.k->len(self.gens)
A:sympy.polys.agca.modules.im->eye(k)
A:sympy.polys.agca.modules.Rkr->self.ring.free_module(r + k)
A:sympy.polys.agca.modules.G->M.syzygy_module(order='ilex', TOP=False)._groebner_vec()
A:sympy.polys.agca.modules.S->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False).syzygy_module(order='ilex', TOP=False)
A:sympy.polys.agca.modules.syz->self.ring.free_module(2 * r).submodule(*ci + di + ei)._syzygies()
A:sympy.polys.agca.modules.res->self.container.submodule(*([-y for y in x[:r]] for x in nonzero))
A:sympy.polys.agca.modules.(G, R)->self.ring.free_module(self.rank + 1).submodule(*[g1] + gi, order='ilex', TOP=False)._groebner_vec(extended=True)
A:sympy.polys.agca.modules.self.quot->self.container.quot.submodule(*[self.container.lift(x) for x in self.gens])
sympy.agca.modules.FreeModule(self,ring,rank)
sympy.agca.modules.FreeModule.__repr__(self)
sympy.agca.modules.FreeModule.basis(self)
sympy.agca.modules.FreeModule.convert(self,elem,M=None)
sympy.agca.modules.FreeModule.identity_hom(self)
sympy.agca.modules.FreeModule.is_submodule(self,other)
sympy.agca.modules.FreeModule.is_zero(self)
sympy.agca.modules.FreeModule.multiply_ideal(self,other)
sympy.agca.modules.FreeModule.quotient_module(self,submodule)
sympy.agca.modules.FreeModuleElement(ModuleElement)
sympy.agca.modules.FreeModuleElement.__getitem__(self,idx)
sympy.agca.modules.FreeModuleElement.__iter__(self)
sympy.agca.modules.FreeModuleElement.__repr__(self)
sympy.agca.modules.FreeModuleElement.add(self,d1,d2)
sympy.agca.modules.FreeModuleElement.div(self,d,p)
sympy.agca.modules.FreeModuleElement.mul(self,d,p)
sympy.agca.modules.FreeModulePolyRing(self,ring,rank)
sympy.agca.modules.FreeModulePolyRing.submodule(self,*gens,**opts)
sympy.agca.modules.FreeModuleQuotientRing(self,ring,rank)
sympy.agca.modules.FreeModuleQuotientRing.__repr__(self)
sympy.agca.modules.FreeModuleQuotientRing.lift(self,elem)
sympy.agca.modules.FreeModuleQuotientRing.submodule(self,*gens,**opts)
sympy.agca.modules.FreeModuleQuotientRing.unlift(self,elem)
sympy.agca.modules.Module(self,ring)
sympy.agca.modules.Module.__contains__(self,elem)
sympy.agca.modules.Module.__div__(self,e)
sympy.agca.modules.Module.__eq__(self,other)
sympy.agca.modules.Module.__mul__(self,e)
sympy.agca.modules.Module.__ne__(self,other)
sympy.agca.modules.Module.contains(self,elem)
sympy.agca.modules.Module.convert(self,elem,M=None)
sympy.agca.modules.Module.identity_hom(self)
sympy.agca.modules.Module.is_submodule(self,other)
sympy.agca.modules.Module.is_zero(self)
sympy.agca.modules.Module.multiply_ideal(self,other)
sympy.agca.modules.Module.quotient_module(self,other)
sympy.agca.modules.Module.submodule(self,*gens)
sympy.agca.modules.Module.subset(self,other)
sympy.agca.modules.ModuleElement(self,module,data)
sympy.agca.modules.ModuleElement.__add__(self,om)
sympy.agca.modules.ModuleElement.__div__(self,o)
sympy.agca.modules.ModuleElement.__eq__(self,om)
sympy.agca.modules.ModuleElement.__mul__(self,o)
sympy.agca.modules.ModuleElement.__ne__(self,om)
sympy.agca.modules.ModuleElement.__neg__(self)
sympy.agca.modules.ModuleElement.__rsub__(self,om)
sympy.agca.modules.ModuleElement.__sub__(self,om)
sympy.agca.modules.ModuleElement.add(self,d1,d2)
sympy.agca.modules.ModuleElement.div(self,m,d)
sympy.agca.modules.ModuleElement.eq(self,d1,d2)
sympy.agca.modules.ModuleElement.mul(self,m,d)
sympy.agca.modules.ModuleOrder(self,o1,o2,TOP)
sympy.agca.modules.QuotientModule(self,ring,base,submodule)
sympy.agca.modules.QuotientModule.__repr__(self)
sympy.agca.modules.QuotientModule.convert(self,elem,M=None)
sympy.agca.modules.QuotientModule.identity_hom(self)
sympy.agca.modules.QuotientModule.is_submodule(self,other)
sympy.agca.modules.QuotientModule.is_zero(self)
sympy.agca.modules.QuotientModule.quotient_hom(self)
sympy.agca.modules.QuotientModule.submodule(self,*gens,**opts)
sympy.agca.modules.QuotientModuleElement(ModuleElement)
sympy.agca.modules.QuotientModuleElement.__repr__(self)
sympy.agca.modules.QuotientModuleElement.eq(self,d1,d2)
sympy.agca.modules.SubModule(self,gens,container)
sympy.agca.modules.SubModule.__add__(self,oth)
sympy.agca.modules.SubModule.__repr__(self)
sympy.agca.modules.SubModule._contains(self,other)
sympy.agca.modules.SubModule._in_terms_of_generators(self,e)
sympy.agca.modules.SubModule._intersect(self,other)
sympy.agca.modules.SubModule._module_quotient(self,other)
sympy.agca.modules.SubModule._syzygies(self)
sympy.agca.modules.SubModule.convert(self,elem,M=None)
sympy.agca.modules.SubModule.identity_hom(self)
sympy.agca.modules.SubModule.in_terms_of_generators(self,e)
sympy.agca.modules.SubModule.inclusion_hom(self)
sympy.agca.modules.SubModule.intersect(self,other,**options)
sympy.agca.modules.SubModule.is_full_module(self)
sympy.agca.modules.SubModule.is_submodule(self,other)
sympy.agca.modules.SubModule.is_zero(self)
sympy.agca.modules.SubModule.module_quotient(self,other,**options)
sympy.agca.modules.SubModule.multiply_ideal(self,I)
sympy.agca.modules.SubModule.quotient_module(self,other,**opts)
sympy.agca.modules.SubModule.reduce_element(self,x)
sympy.agca.modules.SubModule.submodule(self,*gens)
sympy.agca.modules.SubModule.syzygy_module(self,**opts)
sympy.agca.modules.SubModule.union(self,other)
sympy.agca.modules.SubModulePolyRing(self,gens,container,order='lex',TOP=True)
sympy.agca.modules.SubModulePolyRing.__eq__(self,other)
sympy.agca.modules.SubModulePolyRing._contains(self,x)
sympy.agca.modules.SubModulePolyRing._groebner(self,extended=False)
sympy.agca.modules.SubModulePolyRing._groebner_vec(self,extended=False)
sympy.agca.modules.SubModulePolyRing._in_terms_of_generators(self,e)
sympy.agca.modules.SubModulePolyRing._intersect(self,other,relations=False)
sympy.agca.modules.SubModulePolyRing._module_quotient(self,other,relations=False)
sympy.agca.modules.SubModulePolyRing._syzygies(self)
sympy.agca.modules.SubModulePolyRing.reduce_element(self,x,NF=None)
sympy.agca.modules.SubModuleQuotientRing(self,gens,container)
sympy.agca.modules.SubModuleQuotientRing._contains(self,elem)
sympy.agca.modules.SubModuleQuotientRing._in_terms_of_generators(self,elem)
sympy.agca.modules.SubModuleQuotientRing._syzygies(self)
sympy.agca.modules.SubQuotientModule(self,gens,container,**opts)
sympy.agca.modules.SubQuotientModule._contains(self,elem)
sympy.agca.modules.SubQuotientModule._in_terms_of_generators(self,e)
sympy.agca.modules.SubQuotientModule._syzygies(self)
sympy.agca.modules.SubQuotientModule.is_full_module(self)
sympy.agca.modules.SubQuotientModule.quotient_hom(self)
sympy.polys.agca.modules.FreeModule(self,ring,rank)
sympy.polys.agca.modules.FreeModule.__init__(self,ring,rank)
sympy.polys.agca.modules.FreeModule.__repr__(self)
sympy.polys.agca.modules.FreeModule.basis(self)
sympy.polys.agca.modules.FreeModule.convert(self,elem,M=None)
sympy.polys.agca.modules.FreeModule.identity_hom(self)
sympy.polys.agca.modules.FreeModule.is_submodule(self,other)
sympy.polys.agca.modules.FreeModule.is_zero(self)
sympy.polys.agca.modules.FreeModule.multiply_ideal(self,other)
sympy.polys.agca.modules.FreeModule.quotient_module(self,submodule)
sympy.polys.agca.modules.FreeModuleElement(ModuleElement)
sympy.polys.agca.modules.FreeModuleElement.__getitem__(self,idx)
sympy.polys.agca.modules.FreeModuleElement.__iter__(self)
sympy.polys.agca.modules.FreeModuleElement.__repr__(self)
sympy.polys.agca.modules.FreeModuleElement.add(self,d1,d2)
sympy.polys.agca.modules.FreeModuleElement.div(self,d,p)
sympy.polys.agca.modules.FreeModuleElement.mul(self,d,p)
sympy.polys.agca.modules.FreeModulePolyRing(self,ring,rank)
sympy.polys.agca.modules.FreeModulePolyRing.__init__(self,ring,rank)
sympy.polys.agca.modules.FreeModulePolyRing.submodule(self,*gens,**opts)
sympy.polys.agca.modules.FreeModuleQuotientRing(self,ring,rank)
sympy.polys.agca.modules.FreeModuleQuotientRing.__init__(self,ring,rank)
sympy.polys.agca.modules.FreeModuleQuotientRing.__repr__(self)
sympy.polys.agca.modules.FreeModuleQuotientRing.lift(self,elem)
sympy.polys.agca.modules.FreeModuleQuotientRing.submodule(self,*gens,**opts)
sympy.polys.agca.modules.FreeModuleQuotientRing.unlift(self,elem)
sympy.polys.agca.modules.Module(self,ring)
sympy.polys.agca.modules.Module.__contains__(self,elem)
sympy.polys.agca.modules.Module.__div__(self,e)
sympy.polys.agca.modules.Module.__eq__(self,other)
sympy.polys.agca.modules.Module.__init__(self,ring)
sympy.polys.agca.modules.Module.__mul__(self,e)
sympy.polys.agca.modules.Module.__ne__(self,other)
sympy.polys.agca.modules.Module.contains(self,elem)
sympy.polys.agca.modules.Module.convert(self,elem,M=None)
sympy.polys.agca.modules.Module.identity_hom(self)
sympy.polys.agca.modules.Module.is_submodule(self,other)
sympy.polys.agca.modules.Module.is_zero(self)
sympy.polys.agca.modules.Module.multiply_ideal(self,other)
sympy.polys.agca.modules.Module.quotient_module(self,other)
sympy.polys.agca.modules.Module.submodule(self,*gens)
sympy.polys.agca.modules.Module.subset(self,other)
sympy.polys.agca.modules.ModuleElement(self,module,data)
sympy.polys.agca.modules.ModuleElement.__add__(self,om)
sympy.polys.agca.modules.ModuleElement.__div__(self,o)
sympy.polys.agca.modules.ModuleElement.__eq__(self,om)
sympy.polys.agca.modules.ModuleElement.__init__(self,module,data)
sympy.polys.agca.modules.ModuleElement.__mul__(self,o)
sympy.polys.agca.modules.ModuleElement.__ne__(self,om)
sympy.polys.agca.modules.ModuleElement.__neg__(self)
sympy.polys.agca.modules.ModuleElement.__rsub__(self,om)
sympy.polys.agca.modules.ModuleElement.__sub__(self,om)
sympy.polys.agca.modules.ModuleElement.add(self,d1,d2)
sympy.polys.agca.modules.ModuleElement.div(self,m,d)
sympy.polys.agca.modules.ModuleElement.eq(self,d1,d2)
sympy.polys.agca.modules.ModuleElement.mul(self,m,d)
sympy.polys.agca.modules.ModuleOrder(self,o1,o2,TOP)
sympy.polys.agca.modules.ModuleOrder.__init__(self,o1,o2,TOP)
sympy.polys.agca.modules.QuotientModule(self,ring,base,submodule)
sympy.polys.agca.modules.QuotientModule.__init__(self,ring,base,submodule)
sympy.polys.agca.modules.QuotientModule.__repr__(self)
sympy.polys.agca.modules.QuotientModule.convert(self,elem,M=None)
sympy.polys.agca.modules.QuotientModule.identity_hom(self)
sympy.polys.agca.modules.QuotientModule.is_submodule(self,other)
sympy.polys.agca.modules.QuotientModule.is_zero(self)
sympy.polys.agca.modules.QuotientModule.quotient_hom(self)
sympy.polys.agca.modules.QuotientModule.submodule(self,*gens,**opts)
sympy.polys.agca.modules.QuotientModuleElement(ModuleElement)
sympy.polys.agca.modules.QuotientModuleElement.__repr__(self)
sympy.polys.agca.modules.QuotientModuleElement.eq(self,d1,d2)
sympy.polys.agca.modules.SubModule(self,gens,container)
sympy.polys.agca.modules.SubModule.__add__(self,oth)
sympy.polys.agca.modules.SubModule.__init__(self,gens,container)
sympy.polys.agca.modules.SubModule.__repr__(self)
sympy.polys.agca.modules.SubModule._contains(self,other)
sympy.polys.agca.modules.SubModule._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModule._intersect(self,other)
sympy.polys.agca.modules.SubModule._module_quotient(self,other)
sympy.polys.agca.modules.SubModule._syzygies(self)
sympy.polys.agca.modules.SubModule.convert(self,elem,M=None)
sympy.polys.agca.modules.SubModule.identity_hom(self)
sympy.polys.agca.modules.SubModule.in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModule.inclusion_hom(self)
sympy.polys.agca.modules.SubModule.intersect(self,other,**options)
sympy.polys.agca.modules.SubModule.is_full_module(self)
sympy.polys.agca.modules.SubModule.is_submodule(self,other)
sympy.polys.agca.modules.SubModule.is_zero(self)
sympy.polys.agca.modules.SubModule.module_quotient(self,other,**options)
sympy.polys.agca.modules.SubModule.multiply_ideal(self,I)
sympy.polys.agca.modules.SubModule.quotient_module(self,other,**opts)
sympy.polys.agca.modules.SubModule.reduce_element(self,x)
sympy.polys.agca.modules.SubModule.submodule(self,*gens)
sympy.polys.agca.modules.SubModule.syzygy_module(self,**opts)
sympy.polys.agca.modules.SubModule.union(self,other)
sympy.polys.agca.modules.SubModulePolyRing(self,gens,container,order='lex',TOP=True)
sympy.polys.agca.modules.SubModulePolyRing.__eq__(self,other)
sympy.polys.agca.modules.SubModulePolyRing.__init__(self,gens,container,order='lex',TOP=True)
sympy.polys.agca.modules.SubModulePolyRing._contains(self,x)
sympy.polys.agca.modules.SubModulePolyRing._groebner(self,extended=False)
sympy.polys.agca.modules.SubModulePolyRing._groebner_vec(self,extended=False)
sympy.polys.agca.modules.SubModulePolyRing._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubModulePolyRing._intersect(self,other,relations=False)
sympy.polys.agca.modules.SubModulePolyRing._module_quotient(self,other,relations=False)
sympy.polys.agca.modules.SubModulePolyRing._syzygies(self)
sympy.polys.agca.modules.SubModulePolyRing.reduce_element(self,x,NF=None)
sympy.polys.agca.modules.SubModuleQuotientRing(self,gens,container)
sympy.polys.agca.modules.SubModuleQuotientRing.__init__(self,gens,container)
sympy.polys.agca.modules.SubModuleQuotientRing._contains(self,elem)
sympy.polys.agca.modules.SubModuleQuotientRing._in_terms_of_generators(self,elem)
sympy.polys.agca.modules.SubModuleQuotientRing._syzygies(self)
sympy.polys.agca.modules.SubQuotientModule(self,gens,container,**opts)
sympy.polys.agca.modules.SubQuotientModule.__init__(self,gens,container,**opts)
sympy.polys.agca.modules.SubQuotientModule._contains(self,elem)
sympy.polys.agca.modules.SubQuotientModule._in_terms_of_generators(self,e)
sympy.polys.agca.modules.SubQuotientModule._syzygies(self)
sympy.polys.agca.modules.SubQuotientModule.is_full_module(self)
sympy.polys.agca.modules.SubQuotientModule.quotient_hom(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/homomorphisms.py----------------------------------------
A:sympy.polys.agca.homomorphisms.self._ker->self._kernel()
A:sympy.polys.agca.homomorphisms.self._img->self._image()
A:sympy.polys.agca.homomorphisms.self.matrix->tuple((converter(x) for x in matrix))
A:sympy.polys.agca.homomorphisms.lines->repr(self._sympy_matrix()).split('\n')
A:sympy.polys.agca.homomorphisms.n->len(lines)
A:sympy.polys.agca.homomorphisms.syz->self.image().syzygy_module()
A:sympy.polys.agca.homomorphisms.(SF, SS, SQ, _)->freepres(domain)
A:sympy.polys.agca.homomorphisms.(TF, TS, TQ, c)->freepres(codomain)
sympy.agca.homomorphism(domain,codomain,matrix)
sympy.agca.homomorphisms.FreeModuleHomomorphism(MatrixHomomorphism)
sympy.agca.homomorphisms.FreeModuleHomomorphism._apply(self,elem)
sympy.agca.homomorphisms.FreeModuleHomomorphism._image(self)
sympy.agca.homomorphisms.FreeModuleHomomorphism._kernel(self)
sympy.agca.homomorphisms.MatrixHomomorphism(self,domain,codomain,matrix)
sympy.agca.homomorphisms.MatrixHomomorphism.__repr__(self)
sympy.agca.homomorphisms.MatrixHomomorphism._add(self,oth)
sympy.agca.homomorphisms.MatrixHomomorphism._compose(self,oth)
sympy.agca.homomorphisms.MatrixHomomorphism._mul_scalar(self,c)
sympy.agca.homomorphisms.MatrixHomomorphism._quotient_codomain(self,sm)
sympy.agca.homomorphisms.MatrixHomomorphism._quotient_domain(self,sm)
sympy.agca.homomorphisms.MatrixHomomorphism._restrict_codomain(self,sm)
sympy.agca.homomorphisms.MatrixHomomorphism._restrict_domain(self,sm)
sympy.agca.homomorphisms.MatrixHomomorphism._sympy_matrix(self)
sympy.agca.homomorphisms.ModuleHomomorphism(self,domain,codomain)
sympy.agca.homomorphisms.ModuleHomomorphism.__add__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism.__div__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism.__eq__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism.__mul__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism.__ne__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism.__sub__(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism._add(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism._apply(self,elem)
sympy.agca.homomorphisms.ModuleHomomorphism._check_hom(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism._compose(self,oth)
sympy.agca.homomorphisms.ModuleHomomorphism._image(self)
sympy.agca.homomorphisms.ModuleHomomorphism._kernel(self)
sympy.agca.homomorphisms.ModuleHomomorphism._mul_scalar(self,c)
sympy.agca.homomorphisms.ModuleHomomorphism._quotient_codomain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism._quotient_domain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism._restrict_codomain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism._restrict_domain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism.image(self)
sympy.agca.homomorphisms.ModuleHomomorphism.is_injective(self)
sympy.agca.homomorphisms.ModuleHomomorphism.is_isomorphism(self)
sympy.agca.homomorphisms.ModuleHomomorphism.is_surjective(self)
sympy.agca.homomorphisms.ModuleHomomorphism.is_zero(self)
sympy.agca.homomorphisms.ModuleHomomorphism.kernel(self)
sympy.agca.homomorphisms.ModuleHomomorphism.quotient_codomain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism.quotient_domain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism.restrict_codomain(self,sm)
sympy.agca.homomorphisms.ModuleHomomorphism.restrict_domain(self,sm)
sympy.agca.homomorphisms.SubModuleHomomorphism(MatrixHomomorphism)
sympy.agca.homomorphisms.SubModuleHomomorphism._apply(self,elem)
sympy.agca.homomorphisms.SubModuleHomomorphism._image(self)
sympy.agca.homomorphisms.SubModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism(MatrixHomomorphism)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.FreeModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.MatrixHomomorphism(self,domain,codomain,matrix)
sympy.polys.agca.homomorphisms.MatrixHomomorphism.__init__(self,domain,codomain,matrix)
sympy.polys.agca.homomorphisms.MatrixHomomorphism.__repr__(self)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._add(self,oth)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._compose(self,oth)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._mul_scalar(self,c)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.MatrixHomomorphism._sympy_matrix(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism(self,domain,codomain)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__add__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__div__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__eq__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__init__(self,domain,codomain)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__mul__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__ne__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.__sub__(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._add(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._check_hom(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._compose(self,oth)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._mul_scalar(self,c)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism._restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.image(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_injective(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_isomorphism(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_surjective(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.is_zero(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.kernel(self)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.quotient_domain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_codomain(self,sm)
sympy.polys.agca.homomorphisms.ModuleHomomorphism.restrict_domain(self,sm)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism(MatrixHomomorphism)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._apply(self,elem)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._image(self)
sympy.polys.agca.homomorphisms.SubModuleHomomorphism._kernel(self)
sympy.polys.agca.homomorphisms.homomorphism(domain,codomain,matrix)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/ideals.py----------------------------------------
A:sympy.polys.agca.ideals.R->self.ring.quotient_ring(self)
A:sympy.polys.agca.ideals.e->self.ring.ideal(e)
sympy.agca.ideals.Ideal(self,ring)
sympy.agca.ideals.Ideal.__add__(self,e)
sympy.agca.ideals.Ideal.__eq__(self,e)
sympy.agca.ideals.Ideal.__mul__(self,e)
sympy.agca.ideals.Ideal.__ne__(self,e)
sympy.agca.ideals.Ideal.__pow__(self,exp)
sympy.agca.ideals.Ideal._check_ideal(self,J)
sympy.agca.ideals.Ideal._contains_elem(self,x)
sympy.agca.ideals.Ideal._contains_ideal(self,I)
sympy.agca.ideals.Ideal._equals(self,J)
sympy.agca.ideals.Ideal._intersect(self,J)
sympy.agca.ideals.Ideal._quotient(self,J)
sympy.agca.ideals.Ideal.contains(self,elem)
sympy.agca.ideals.Ideal.depth(self)
sympy.agca.ideals.Ideal.height(self)
sympy.agca.ideals.Ideal.intersect(self,J)
sympy.agca.ideals.Ideal.is_maximal(self)
sympy.agca.ideals.Ideal.is_primary(self)
sympy.agca.ideals.Ideal.is_prime(self)
sympy.agca.ideals.Ideal.is_principal(self)
sympy.agca.ideals.Ideal.is_radical(self)
sympy.agca.ideals.Ideal.is_whole_ring(self)
sympy.agca.ideals.Ideal.is_zero(self)
sympy.agca.ideals.Ideal.product(self,J)
sympy.agca.ideals.Ideal.quotient(self,J,**opts)
sympy.agca.ideals.Ideal.radical(self)
sympy.agca.ideals.Ideal.reduce_element(self,x)
sympy.agca.ideals.Ideal.saturate(self,J)
sympy.agca.ideals.Ideal.subset(self,other)
sympy.agca.ideals.Ideal.union(self,J)
sympy.agca.ideals.ModuleImplementedIdeal(self,ring,module)
sympy.agca.ideals.ModuleImplementedIdeal.__repr__(self)
sympy.agca.ideals.ModuleImplementedIdeal._contains_elem(self,x)
sympy.agca.ideals.ModuleImplementedIdeal._contains_ideal(self,J)
sympy.agca.ideals.ModuleImplementedIdeal._intersect(self,J)
sympy.agca.ideals.ModuleImplementedIdeal._product(self,J)
sympy.agca.ideals.ModuleImplementedIdeal._quotient(self,J,**opts)
sympy.agca.ideals.ModuleImplementedIdeal._union(self,J)
sympy.agca.ideals.ModuleImplementedIdeal.gens(self)
sympy.agca.ideals.ModuleImplementedIdeal.in_terms_of_generators(self,e)
sympy.agca.ideals.ModuleImplementedIdeal.is_whole_ring(self)
sympy.agca.ideals.ModuleImplementedIdeal.is_zero(self)
sympy.agca.ideals.ModuleImplementedIdeal.reduce_element(self,x,**options)
sympy.polys.agca.ideals.Ideal(self,ring)
sympy.polys.agca.ideals.Ideal.__add__(self,e)
sympy.polys.agca.ideals.Ideal.__eq__(self,e)
sympy.polys.agca.ideals.Ideal.__init__(self,ring)
sympy.polys.agca.ideals.Ideal.__mul__(self,e)
sympy.polys.agca.ideals.Ideal.__ne__(self,e)
sympy.polys.agca.ideals.Ideal.__pow__(self,exp)
sympy.polys.agca.ideals.Ideal._check_ideal(self,J)
sympy.polys.agca.ideals.Ideal._contains_elem(self,x)
sympy.polys.agca.ideals.Ideal._contains_ideal(self,I)
sympy.polys.agca.ideals.Ideal._equals(self,J)
sympy.polys.agca.ideals.Ideal._intersect(self,J)
sympy.polys.agca.ideals.Ideal._quotient(self,J)
sympy.polys.agca.ideals.Ideal.contains(self,elem)
sympy.polys.agca.ideals.Ideal.depth(self)
sympy.polys.agca.ideals.Ideal.height(self)
sympy.polys.agca.ideals.Ideal.intersect(self,J)
sympy.polys.agca.ideals.Ideal.is_maximal(self)
sympy.polys.agca.ideals.Ideal.is_primary(self)
sympy.polys.agca.ideals.Ideal.is_prime(self)
sympy.polys.agca.ideals.Ideal.is_principal(self)
sympy.polys.agca.ideals.Ideal.is_radical(self)
sympy.polys.agca.ideals.Ideal.is_whole_ring(self)
sympy.polys.agca.ideals.Ideal.is_zero(self)
sympy.polys.agca.ideals.Ideal.product(self,J)
sympy.polys.agca.ideals.Ideal.quotient(self,J,**opts)
sympy.polys.agca.ideals.Ideal.radical(self)
sympy.polys.agca.ideals.Ideal.reduce_element(self,x)
sympy.polys.agca.ideals.Ideal.saturate(self,J)
sympy.polys.agca.ideals.Ideal.subset(self,other)
sympy.polys.agca.ideals.Ideal.union(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal(self,ring,module)
sympy.polys.agca.ideals.ModuleImplementedIdeal.__init__(self,ring,module)
sympy.polys.agca.ideals.ModuleImplementedIdeal.__repr__(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal._contains_elem(self,x)
sympy.polys.agca.ideals.ModuleImplementedIdeal._contains_ideal(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._intersect(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._product(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal._quotient(self,J,**opts)
sympy.polys.agca.ideals.ModuleImplementedIdeal._union(self,J)
sympy.polys.agca.ideals.ModuleImplementedIdeal.gens(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.in_terms_of_generators(self,e)
sympy.polys.agca.ideals.ModuleImplementedIdeal.is_whole_ring(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.is_zero(self)
sympy.polys.agca.ideals.ModuleImplementedIdeal.reduce_element(self,x,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/tests/test_homomorphisms.py----------------------------------------
A:sympy.polys.agca.tests.test_homomorphisms.R->sympy.QQ.old_poly_ring(x, y)
A:sympy.polys.agca.tests.test_homomorphisms.F->R2.free_module(2)
A:sympy.polys.agca.tests.test_homomorphisms.G->sympy.QQ.old_poly_ring(x).free_module(2)
A:sympy.polys.agca.tests.test_homomorphisms.f->R2.free_module(2).identity_hom()
A:sympy.polys.agca.tests.test_homomorphisms.g->homomorphism(F, F, [0, [1, x]])
A:sympy.polys.agca.tests.test_homomorphisms.h->homomorphism(F, F, [[x, 0], [y, y + 1]])
A:sympy.polys.agca.tests.test_homomorphisms.i->homomorphism(F, G, [[1, 0, 0], [0, 1, 0]])
A:sympy.polys.agca.tests.test_homomorphisms.h1->homomorphism(F, F, [[x, 0], [y, y + 1]]).quotient_domain(F.submodule([0, 1]))
A:sympy.polys.agca.tests.test_homomorphisms.SM->R2.free_module(2).submodule([1, 1, 1])
A:sympy.polys.agca.tests.test_homomorphisms.SQ->Q.submodule([1, 0, 0])
A:sympy.polys.agca.tests.test_homomorphisms.h2->homomorphism(Q, G, matrix)
A:sympy.polys.agca.tests.test_homomorphisms.container->conv()
sympy.agca.tests.test_homomorphisms.test_creation()
sympy.agca.tests.test_homomorphisms.test_operations()
sympy.agca.tests.test_homomorphisms.test_printing()
sympy.agca.tests.test_homomorphisms.test_properties()
sympy.polys.agca.tests.test_homomorphisms.test_creation()
sympy.polys.agca.tests.test_homomorphisms.test_operations()
sympy.polys.agca.tests.test_homomorphisms.test_printing()
sympy.polys.agca.tests.test_homomorphisms.test_properties()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/tests/test_modules.py----------------------------------------
A:sympy.polys.agca.tests.test_modules.M->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2])
A:sympy.polys.agca.tests.test_modules.e->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert([x ** 2, 2, 0])
A:sympy.polys.agca.tests.test_modules.g->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert([x, 0, 0])
A:sympy.polys.agca.tests.test_modules.R->sympy.polys.QQ.old_poly_ring(x, y, z)
A:sympy.polys.agca.tests.test_modules.M1->R.free_module(2).submodule([x, y], [y, 1])
A:sympy.polys.agca.tests.test_modules.M2->R.free_module(2).submodule([0, y - 1], [x, 1], [y, x])
A:sympy.polys.agca.tests.test_modules.X->sympy.polys.QQ.old_poly_ring(x, order='ilex').convert(x)
A:sympy.polys.agca.tests.test_modules.M3->R2.free_module(1).submodule([x * y], [y * z], [x * z])
A:sympy.polys.agca.tests.test_modules.o1->ModuleOrder(lex, grlex, False)
A:sympy.polys.agca.tests.test_modules.o2->ModuleOrder(ilex, lex, False)
A:sympy.polys.agca.tests.test_modules.F->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2)
A:sympy.polys.agca.tests.test_modules.Fd->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x ** 2, 0, 0], [1, 2, 0], [1, 2, 3])
A:sympy.polys.agca.tests.test_modules.m->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).convert([x ** 2 + y ** 2, 1, 0])
A:sympy.polys.agca.tests.test_modules.n->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).convert(m)
A:sympy.polys.agca.tests.test_modules.S->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([0, x, -y], [z, -x, 0])
A:sympy.polys.agca.tests.test_modules.S2->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x ** 2, 0], [0, x ** 2])
A:sympy.polys.agca.tests.test_modules.S3->R2.free_module(3).submodule([z, 0, 0], [0, x, 0], [0, 0, y])
A:sympy.polys.agca.tests.test_modules.SM->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x, 0], [0, y])
A:sympy.polys.agca.tests.test_modules.N->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x + y, x + y])
A:sympy.polys.agca.tests.test_modules.G->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2)
A:sympy.polys.agca.tests.test_modules.S1->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).submodule([x, 0], [0, x])
A:sympy.polys.agca.tests.test_modules.I->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(2).submodule([x, y], [y ** 2 - y, y - 1], [x * y + y, x + 1])
A:sympy.polys.agca.tests.test_modules.(I1, rel1, rel2)->R.free_module(2).submodule([x, y], [y, 1]).intersect(M2, relations=True)
A:sympy.polys.agca.tests.test_modules.(q, rel)->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2]).module_quotient(N, relations=True)
A:sympy.polys.agca.tests.test_modules.(G, R)->sympy.polys.QQ.old_poly_ring(x, y, z).free_module(3).submodule([x + 1, y, 1], [x * y, z, z ** 2])._groebner_vec(extended=True)
sympy.agca.tests.test_modules.test_FreeModule()
sympy.agca.tests.test_modules.test_FreeModuleElement()
sympy.agca.tests.test_modules.test_ModuleOrder()
sympy.agca.tests.test_modules.test_ModulesQuotientRing()
sympy.agca.tests.test_modules.test_QuotientModule()
sympy.agca.tests.test_modules.test_QuotientModuleElement()
sympy.agca.tests.test_modules.test_SubModulePolyRing_global()
sympy.agca.tests.test_modules.test_SubModulePolyRing_local()
sympy.agca.tests.test_modules.test_SubModulePolyRing_nontriv_global()
sympy.agca.tests.test_modules.test_SubModulePolyRing_nontriv_local()
sympy.agca.tests.test_modules.test_groebner_extendend()
sympy.agca.tests.test_modules.test_in_terms_of_generators()
sympy.agca.tests.test_modules.test_intersection()
sympy.agca.tests.test_modules.test_module_mul()
sympy.agca.tests.test_modules.test_quotient()
sympy.agca.tests.test_modules.test_syzygy()
sympy.polys.agca.tests.test_modules.test_FreeModule()
sympy.polys.agca.tests.test_modules.test_FreeModuleElement()
sympy.polys.agca.tests.test_modules.test_ModuleOrder()
sympy.polys.agca.tests.test_modules.test_ModulesQuotientRing()
sympy.polys.agca.tests.test_modules.test_QuotientModule()
sympy.polys.agca.tests.test_modules.test_QuotientModuleElement()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_global()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_local()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_nontriv_global()
sympy.polys.agca.tests.test_modules.test_SubModulePolyRing_nontriv_local()
sympy.polys.agca.tests.test_modules.test_groebner_extendend()
sympy.polys.agca.tests.test_modules.test_in_terms_of_generators()
sympy.polys.agca.tests.test_modules.test_intersection()
sympy.polys.agca.tests.test_modules.test_module_mul()
sympy.polys.agca.tests.test_modules.test_quotient()
sympy.polys.agca.tests.test_modules.test_syzygy()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/polys/agca/tests/test_ideals.py----------------------------------------
A:sympy.polys.agca.tests.test_ideals.R->sympy.polys.QQ.old_poly_ring(x, y)
A:sympy.polys.agca.tests.test_ideals.I->sympy.polys.QQ.old_poly_ring(x, y).ideal(x ** 5, y)
A:sympy.polys.agca.tests.test_ideals.J->sympy.polys.QQ.old_poly_ring(y).ideal(1)
A:sympy.polys.agca.tests.test_ideals.S->sympy.polys.QQ.old_poly_ring(x, y).ideal(x * y)
A:sympy.polys.agca.tests.test_ideals.T->sympy.polys.QQ.old_poly_ring(x, y).ideal(x, y)
A:sympy.polys.agca.tests.test_ideals.e->sympy.polys.QQ.old_poly_ring(x, y).convert(x ** 3 + y ** 2)
sympy.agca.tests.test_ideals.test_exceptions()
sympy.agca.tests.test_ideals.test_ideal_operations()
sympy.agca.tests.test_ideals.test_intersection()
sympy.agca.tests.test_ideals.test_nontriv_global()
sympy.agca.tests.test_ideals.test_nontriv_local()
sympy.agca.tests.test_ideals.test_quotient()
sympy.agca.tests.test_ideals.test_reduction()
sympy.polys.agca.tests.test_ideals.test_exceptions()
sympy.polys.agca.tests.test_ideals.test_ideal_operations()
sympy.polys.agca.tests.test_ideals.test_intersection()
sympy.polys.agca.tests.test_ideals.test_nontriv_global()
sympy.polys.agca.tests.test_ideals.test_nontriv_local()
sympy.polys.agca.tests.test_ideals.test_quotient()
sympy.polys.agca.tests.test_ideals.test_reduction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/decorator.py----------------------------------------
A:sympy.utilities.decorator.expr->sympify(expr)
A:sympy.utilities.decorator.func_wrapper->functools.update_wrapper(func_wrapper, func)
A:sympy.utilities.decorator.fn._doctest_depends_on->dict(exe=exe, modules=modules, disable_viewers=disable_viewers, pyglet=pyglet)
A:sympy.utilities.decorator.fn._doctest_depdends_on->no_attrs_in_subclass(fn, fn._doctest_depends_on)
A:sympy.utilities.decorator.ns->get_function_globals(obj)
A:sympy.utilities.decorator.name->get_function_name(obj)
sympy.decorator.conserve_mpmath_dps(func)
sympy.decorator.doctest_depends_on(exe=None,modules=None,disable_viewers=None)
sympy.decorator.no_attrs_in_subclass(self,cls,f)
sympy.decorator.no_attrs_in_subclass.__get__(self,instance,owner=None)
sympy.public(obj)
sympy.threaded(func)
sympy.threaded_factory(func,use_add)
sympy.utilities.decorator.conserve_mpmath_dps(func)
sympy.utilities.decorator.doctest_depends_on(exe=None,modules=None,disable_viewers=None)
sympy.utilities.decorator.no_attrs_in_subclass(self,cls,f)
sympy.utilities.decorator.no_attrs_in_subclass.__get__(self,instance,owner=None)
sympy.utilities.decorator.no_attrs_in_subclass.__init__(self,cls,f)
sympy.utilities.decorator.public(obj)
sympy.utilities.decorator.threaded(func)
sympy.utilities.decorator.threaded_factory(func,use_add)
sympy.utilities.decorator.xthreaded(func)
sympy.xthreaded(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/pkgdata.py----------------------------------------
A:sympy.utilities.pkgdata.fn->getattr(mod, '__file__', None)
A:sympy.utilities.pkgdata.path->os.path.join(os.path.dirname(fn), identifier)
A:sympy.utilities.pkgdata.loader->getattr(mod, '__loader__', None)
A:sympy.utilities.pkgdata.data->getattr(mod, '__loader__', None).get_data(path)
sympy.pkgdata.get_resource(identifier,pkgname=__name__)
sympy.utilities.pkgdata.get_resource(identifier,pkgname=__name__)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/codegen.py----------------------------------------
A:sympy.utilities.codegen.input_symbols->set([])
A:sympy.utilities.codegen.symbols->set([])
A:sympy.utilities.codegen.notcovered->set([]).difference(input_symbols.union(local_vars))
A:sympy.utilities.codegen.v->set(self.local_vars)
A:sympy.utilities.codegen.datatype->get_default_datatype(expr)
A:sympy.utilities.codegen.name->ccode(arg.name)
A:sympy.utilities.codegen.expressions->Tuple(expr)
A:sympy.utilities.codegen.local_vars->set([i.label for i in expressions.atoms(Idx)])
A:sympy.utilities.codegen.dims->tuple([(S.Zero, dim - 1) for dim in out_arg.shape])
A:sympy.utilities.codegen.out_arg->MatrixSymbol('out_%s' % abs(hash(expr)), *expr.shape)
A:sympy.utilities.codegen.name_arg_dict->dict([(x.name, x) for x in arg_list])
A:sympy.utilities.codegen.contents->StringIO()
A:sympy.utilities.codegen.code_lines->self._indent_code(''.join(code_lines))
A:sympy.utilities.codegen.ctype->routine.results[0].get_datatype('C')
A:sympy.utilities.codegen.arguments->', '.join(['%s %s' % t for t in type_args])
A:sympy.utilities.codegen.prototype->self.get_interface(routine)
A:sympy.utilities.codegen.t->get_default_datatype(obj)
A:sympy.utilities.codegen.(constants, not_c, c_expr)->ccode(result.expr, human=False, assign_to=assign_to, dereference=dereference)
A:sympy.utilities.codegen.p->OctaveCodePrinter({'human': False})
A:sympy.utilities.codegen.args->', '.join(args)
A:sympy.utilities.codegen.call_sig->'{0}({1})\n'.format(routine.name, args)
A:sympy.utilities.codegen.dimstr->', '.join(['%s:%s' % (fprint(dim[0] + 1), fprint(dim[1] + 1)) for dim in arg.dimensions])
A:sympy.utilities.codegen.typeinfo->get_default_datatype(var)
A:sympy.utilities.codegen.(constants, not_fortran, f_expr)->fcode(result.expr, assign_to=assign_to, source_format='free', human=False)
A:sympy.utilities.codegen.lowercase->set([str(x).lower() for x in r.variables])
A:sympy.utilities.codegen.orig_case->set([str(x) for x in r.variables])
A:sympy.utilities.codegen.s->self._get_symbol(result.name)
A:sympy.utilities.codegen.(constants, not_supported, oct_expr)->octave_code(result.expr, assign_to=assign_to, human=False)
A:sympy.utilities.codegen.CodeGenClass->{'C': CCodeGen, 'F95': FCodeGen, 'OCTAVE': OctaveCodeGen}.get(language.upper())
A:sympy.utilities.codegen.code_gen->get_code_generator(language, 'nothingElseMatters')
sympy.codegen.Argument(Variable)
sympy.codegen.CCodeGen(CodeGen)
sympy.codegen.CCodeGen._call_printer(self,routine)
sympy.codegen.CCodeGen._declare_arguments(self,routine)
sympy.codegen.CCodeGen._declare_locals(self,routine)
sympy.codegen.CCodeGen._get_header(self)
sympy.codegen.CCodeGen._get_routine_ending(self,routine)
sympy.codegen.CCodeGen._get_routine_opening(self,routine)
sympy.codegen.CCodeGen._indent_code(self,codelines)
sympy.codegen.CCodeGen._preprocessor_statements(self,prefix)
sympy.codegen.CCodeGen.dump_c(self,routines,f,prefix,header=True,empty=True)
sympy.codegen.CCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.codegen.CCodeGen.get_prototype(self,routine)
sympy.codegen.CodeGen(self,project='project')
sympy.codegen.CodeGen.dump_code(self,routines,f,prefix,header=True,empty=True)
sympy.codegen.CodeGen.routine(self,name,expr,argument_sequence)
sympy.codegen.CodeGen.write(self,routines,prefix,to_files=False,header=True,empty=True)
sympy.codegen.CodeGenArgumentListError(Exception)
sympy.codegen.CodeGenArgumentListError.missing_args(self)
sympy.codegen.CodeGenError(Exception)
sympy.codegen.DataType(self,cname,fname,pyname,octname)
sympy.codegen.FCodeGen(self,project='project')
sympy.codegen.FCodeGen._call_printer(self,routine)
sympy.codegen.FCodeGen._declare_arguments(self,routine)
sympy.codegen.FCodeGen._declare_locals(self,routine)
sympy.codegen.FCodeGen._get_header(self)
sympy.codegen.FCodeGen._get_routine_ending(self,routine)
sympy.codegen.FCodeGen._get_routine_opening(self,routine)
sympy.codegen.FCodeGen._get_symbol(self,s)
sympy.codegen.FCodeGen._indent_code(self,codelines)
sympy.codegen.FCodeGen._preprocessor_statements(self,prefix)
sympy.codegen.FCodeGen.dump_f95(self,routines,f,prefix,header=True,empty=True)
sympy.codegen.FCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.codegen.FCodeGen.get_interface(self,routine)
sympy.codegen.InOutArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.codegen.InputArgument(Argument)
sympy.codegen.OctaveCodeGen(CodeGen)
sympy.codegen.OctaveCodeGen._call_printer(self,routine)
sympy.codegen.OctaveCodeGen._declare_arguments(self,routine)
sympy.codegen.OctaveCodeGen._declare_locals(self,routine)
sympy.codegen.OctaveCodeGen._get_header(self)
sympy.codegen.OctaveCodeGen._get_routine_ending(self,routine)
sympy.codegen.OctaveCodeGen._get_routine_opening(self,routine)
sympy.codegen.OctaveCodeGen._get_symbol(self,s)
sympy.codegen.OctaveCodeGen._indent_code(self,codelines)
sympy.codegen.OctaveCodeGen._preprocessor_statements(self,prefix)
sympy.codegen.OctaveCodeGen.dump_m(self,routines,f,prefix,header=True,empty=True,inline=True)
sympy.codegen.OctaveCodeGen.routine(self,name,expr,argument_sequence)
sympy.codegen.OutputArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.codegen.Result(self,expr,name=None,result_var=None,datatype=None,dimensions=None,precision=None)
sympy.codegen.ResultBase(self,expr,result_var)
sympy.codegen.Routine(self,name,arguments,results,local_vars)
sympy.codegen.Routine.result_variables(self)
sympy.codegen.Routine.variables(self)
sympy.codegen.Variable(self,name,datatype=None,dimensions=None,precision=None)
sympy.codegen.Variable.get_datatype(self,language)
sympy.codegen.Variable.name(self)
sympy.codegen.codegen(name_expr,language,prefix=None,project='project',to_files=False,header=True,empty=True,argument_sequence=None)
sympy.codegen.get_code_generator(language,project)
sympy.codegen.get_default_datatype(expr)
sympy.codegen.make_routine(name,expr,argument_sequence=None,language='F95')
sympy.utilities.codegen.Argument(Variable)
sympy.utilities.codegen.CCodeGen(CodeGen)
sympy.utilities.codegen.CCodeGen._call_printer(self,routine)
sympy.utilities.codegen.CCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.CCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.CCodeGen._get_header(self)
sympy.utilities.codegen.CCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.CCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.CCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.CCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.CCodeGen.dump_c(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CCodeGen.get_prototype(self,routine)
sympy.utilities.codegen.CodeGen(self,project='project')
sympy.utilities.codegen.CodeGen.__init__(self,project='project')
sympy.utilities.codegen.CodeGen.dump_code(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.CodeGen.routine(self,name,expr,argument_sequence)
sympy.utilities.codegen.CodeGen.write(self,routines,prefix,to_files=False,header=True,empty=True)
sympy.utilities.codegen.CodeGenArgumentListError(Exception)
sympy.utilities.codegen.CodeGenArgumentListError.missing_args(self)
sympy.utilities.codegen.CodeGenError(Exception)
sympy.utilities.codegen.DataType(self,cname,fname,pyname,octname)
sympy.utilities.codegen.DataType.__init__(self,cname,fname,pyname,octname)
sympy.utilities.codegen.FCodeGen(self,project='project')
sympy.utilities.codegen.FCodeGen.__init__(self,project='project')
sympy.utilities.codegen.FCodeGen._call_printer(self,routine)
sympy.utilities.codegen.FCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.FCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.FCodeGen._get_header(self)
sympy.utilities.codegen.FCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.FCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.FCodeGen._get_symbol(self,s)
sympy.utilities.codegen.FCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.FCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.FCodeGen.dump_f95(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.FCodeGen.dump_h(self,routines,f,prefix,header=True,empty=True)
sympy.utilities.codegen.FCodeGen.get_interface(self,routine)
sympy.utilities.codegen.InOutArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.InOutArgument.__init__(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.InputArgument(Argument)
sympy.utilities.codegen.OctaveCodeGen(CodeGen)
sympy.utilities.codegen.OctaveCodeGen._call_printer(self,routine)
sympy.utilities.codegen.OctaveCodeGen._declare_arguments(self,routine)
sympy.utilities.codegen.OctaveCodeGen._declare_locals(self,routine)
sympy.utilities.codegen.OctaveCodeGen._get_header(self)
sympy.utilities.codegen.OctaveCodeGen._get_routine_ending(self,routine)
sympy.utilities.codegen.OctaveCodeGen._get_routine_opening(self,routine)
sympy.utilities.codegen.OctaveCodeGen._get_symbol(self,s)
sympy.utilities.codegen.OctaveCodeGen._indent_code(self,codelines)
sympy.utilities.codegen.OctaveCodeGen._preprocessor_statements(self,prefix)
sympy.utilities.codegen.OctaveCodeGen.dump_m(self,routines,f,prefix,header=True,empty=True,inline=True)
sympy.utilities.codegen.OctaveCodeGen.routine(self,name,expr,argument_sequence)
sympy.utilities.codegen.OutputArgument(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.OutputArgument.__init__(self,name,result_var,expr,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Result(self,expr,name=None,result_var=None,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Result.__init__(self,expr,name=None,result_var=None,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.ResultBase(self,expr,result_var)
sympy.utilities.codegen.ResultBase.__init__(self,expr,result_var)
sympy.utilities.codegen.Routine(self,name,arguments,results,local_vars)
sympy.utilities.codegen.Routine.__init__(self,name,arguments,results,local_vars)
sympy.utilities.codegen.Routine.result_variables(self)
sympy.utilities.codegen.Routine.variables(self)
sympy.utilities.codegen.Variable(self,name,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Variable.__init__(self,name,datatype=None,dimensions=None,precision=None)
sympy.utilities.codegen.Variable.get_datatype(self,language)
sympy.utilities.codegen.Variable.name(self)
sympy.utilities.codegen.codegen(name_expr,language,prefix=None,project='project',to_files=False,header=True,empty=True,argument_sequence=None)
sympy.utilities.codegen.get_code_generator(language,project)
sympy.utilities.codegen.get_default_datatype(expr)
sympy.utilities.codegen.make_routine(name,expr,argument_sequence=None,language='F95')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/autowrap.py----------------------------------------
A:sympy.utilities.autowrap.oldwork->os.getcwd()
A:sympy.utilities.autowrap.mod->__import__(self.module_name)
A:sympy.utilities.autowrap.retoutput->check_output(command, stderr=STDOUT)
A:sympy.utilities.autowrap.printed->', '.join([str(res.expr) for res in routine.result_variables])
A:sympy.utilities.autowrap.args->tuple(args)
A:sympy.utilities.autowrap.prototype->self.generator.get_prototype(routine)
A:sympy.utilities.autowrap.(py_rets, py_args, py_loc, py_inf)->self._partition_args(routine.arguments)
A:sympy.utilities.autowrap.arg_string->', '.join((self._prototype_arg(arg) for arg in py_args))
A:sympy.utilities.autowrap.proto->self._prototype_arg(arg)
A:sympy.utilities.autowrap.declarations->'\n'.join(local_decs)
A:sympy.utilities.autowrap.args_c->', '.join([self._call_arg(a) for a in routine.arguments])
A:sympy.utilities.autowrap.rets->', '.join([str(r.name) for r in py_rets])
A:sympy.utilities.autowrap.py_inferred[arg]->py_inferred.pop(arg.name)
A:sympy.utilities.autowrap.t->arg.get_datatype('c')
A:sympy.utilities.autowrap.ndim->len(arg.dimensions)
A:sympy.utilities.autowrap.langs->_lang_lookup.get(backend.upper(), False)
A:sympy.utilities.autowrap.language->_infer_language(backend)
A:sympy.utilities.autowrap.code_generator->get_code_generator(language, 'autowrap')
A:sympy.utilities.autowrap.CodeWrapperClass->_get_code_wrapper_class(backend)
A:sympy.utilities.autowrap.code_wrapper->UfuncifyCodeWrapper(CCodeGen('ufuncify'), tempdir, flags, verbose)
A:sympy.utilities.autowrap.routine->make_routine('autofunc', expr, args)
A:sympy.utilities.autowrap.binary->autowrap(expr, **kwargs)
A:sympy.utilities.autowrap._ufunc_top->Template('#include "Python.h"\n#include "math.h"\n#include "numpy/ndarraytypes.h"\n#include "numpy/ufuncobject.h"\n#include "numpy/halffloat.h"\n#include ${include_file}\n\nstatic PyMethodDef ${module}Methods[] = {\n        {NULL, NULL, 0, NULL}\n};')
A:sympy.utilities.autowrap._ufunc_body->Template('static void ${funcname}_ufunc(char **args, npy_intp *dimensions, npy_intp* steps, void* data)\n{\n    npy_intp i;\n    npy_intp n = dimensions[0];\n    ${declare_args}\n    ${declare_steps}\n    for (i = 0; i < n; i++) {\n        *((double *)out1) = ${funcname}(${call_args});\n        ${step_increments}\n    }\n}\nPyUFuncGenericFunction ${funcname}_funcs[1] = {&${funcname}_ufunc};\nstatic char ${funcname}_types[${n_types}] = ${types}\nstatic void *${funcname}_data[1] = {NULL};')
A:sympy.utilities.autowrap._ufunc_bottom->Template('#if PY_VERSION_HEX >= 0x03000000\nstatic struct PyModuleDef moduledef = {\n    PyModuleDef_HEAD_INIT,\n    "${module}",\n    NULL,\n    -1,\n    ${module}Methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyMODINIT_FUNC PyInit_${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = PyModule_Create(&moduledef);\n    if (!m) {\n        return NULL;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n    return m;\n}\n#else\nPyMODINIT_FUNC init${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = Py_InitModule("${module}", ${module}Methods);\n    if (m == NULL) {\n        return;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n}\n#endif')
A:sympy.utilities.autowrap._ufunc_init_form->Template('ufunc${ind} = PyUFunc_FromFuncAndData(${funcname}_funcs, ${funcname}_data, ${funcname}_types, 1, ${n_in}, ${n_out},\n            PyUFunc_None, "${module}", ${docstring}, 0);\n    PyDict_SetItemString(d, "${funcname}", ufunc${ind});\n    Py_DECREF(ufunc${ind});')
A:sympy.utilities.autowrap._ufunc_setup->Template('def configuration(parent_package=\'\', top_path=None):\n    import numpy\n    from numpy.distutils.misc_util import Configuration\n\n    config = Configuration(\'\',\n                           parent_package,\n                           top_path)\n    config.add_extension(\'${module}\', sources=[\'${module}.c\', \'${filename}.c\'])\n\n    return config\n\nif __name__ == "__main__":\n    from numpy.distutils.core import setup\n    setup(configuration=configuration)')
A:sympy.utilities.autowrap.setup->Template('def configuration(parent_package=\'\', top_path=None):\n    import numpy\n    from numpy.distutils.misc_util import Configuration\n\n    config = Configuration(\'\',\n                           parent_package,\n                           top_path)\n    config.add_extension(\'${module}\', sources=[\'${module}.c\', \'${filename}.c\'])\n\n    return config\n\nif __name__ == "__main__":\n    from numpy.distutils.core import setup\n    setup(configuration=configuration)').substitute(module=self.module_name, filename=self.filename)
A:sympy.utilities.autowrap.include_file->'"{0}.h"'.format(prefix)
A:sympy.utilities.autowrap.top->Template('#include "Python.h"\n#include "math.h"\n#include "numpy/ndarraytypes.h"\n#include "numpy/ufuncobject.h"\n#include "numpy/halffloat.h"\n#include ${include_file}\n\nstatic PyMethodDef ${module}Methods[] = {\n        {NULL, NULL, 0, NULL}\n};').substitute(include_file=include_file, module=module)
A:sympy.utilities.autowrap.(py_in, py_out)->self._partition_args(routine.arguments)
A:sympy.utilities.autowrap.n_in->len(py_in)
A:sympy.utilities.autowrap.declare_args->'\n    '.join(arg_decs)
A:sympy.utilities.autowrap.declare_steps->'\n    '.join(step_decs)
A:sympy.utilities.autowrap.call_args->', '.join([form.format(a) for a in range(n_in)])
A:sympy.utilities.autowrap.step_increments->'\n        '.join(step_incs)
A:sympy.utilities.autowrap.init_form->Template('ufunc${ind} = PyUFunc_FromFuncAndData(${funcname}_funcs, ${funcname}_data, ${funcname}_types, 1, ${n_in}, ${n_out},\n            PyUFunc_None, "${module}", ${docstring}, 0);\n    PyDict_SetItemString(d, "${funcname}", ufunc${ind});\n    Py_DECREF(ufunc${ind});').substitute(module=module, funcname=name, docstring=docstring, n_in=n_in, n_out=n_out, ind=r_index)
A:sympy.utilities.autowrap.body->'\n\n'.join(functions)
A:sympy.utilities.autowrap.ufunc_init->'\n    '.join(ufunc_init)
A:sympy.utilities.autowrap.function_creation->'\n    '.join(function_creation)
A:sympy.utilities.autowrap.bottom->Template('#if PY_VERSION_HEX >= 0x03000000\nstatic struct PyModuleDef moduledef = {\n    PyModuleDef_HEAD_INIT,\n    "${module}",\n    NULL,\n    -1,\n    ${module}Methods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nPyMODINIT_FUNC PyInit_${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = PyModule_Create(&moduledef);\n    if (!m) {\n        return NULL;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n    return m;\n}\n#else\nPyMODINIT_FUNC init${module}(void)\n{\n    PyObject *m, *d;\n    ${function_creation}\n    m = Py_InitModule("${module}", ${module}Methods);\n    if (m == NULL) {\n        return;\n    }\n    import_array();\n    import_umath();\n    d = PyModule_GetDict(m);\n    ${ufunc_init}\n}\n#endif').substitute(module=module, ufunc_init=ufunc_init, function_creation=function_creation)
A:sympy.utilities.autowrap.y->IndexedBase(Dummy())
A:sympy.utilities.autowrap.m->Dummy(integer=True)
A:sympy.utilities.autowrap.i->Idx(Dummy(integer=True), m)
A:sympy.utilities.autowrap.f->implemented_function(Dummy().name, Lambda(args, expr))
sympy.autowrap.CodeWrapError(Exception)
sympy.autowrap.CodeWrapper(self,generator,filepath=None,flags=[],verbose=False)
sympy.autowrap.CodeWrapper._generate_code(self,main_routine,routines)
sympy.autowrap.CodeWrapper._process_files(self,routine)
sympy.autowrap.CodeWrapper.filename(self)
sympy.autowrap.CodeWrapper.include_empty(self)
sympy.autowrap.CodeWrapper.include_header(self)
sympy.autowrap.CodeWrapper.module_name(self)
sympy.autowrap.CodeWrapper.wrap_code(self,routine,helpers=[])
sympy.autowrap.CythonCodeWrapper(CodeWrapper)
sympy.autowrap.CythonCodeWrapper._call_arg(self,arg)
sympy.autowrap.CythonCodeWrapper._declare_arg(self,arg)
sympy.autowrap.CythonCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.autowrap.CythonCodeWrapper._partition_args(self,args)
sympy.autowrap.CythonCodeWrapper._prepare_files(self,routine)
sympy.autowrap.CythonCodeWrapper._prototype_arg(self,arg)
sympy.autowrap.CythonCodeWrapper.command(self)
sympy.autowrap.CythonCodeWrapper.dump_pyx(self,routines,f,prefix)
sympy.autowrap.DummyWrapper(CodeWrapper)
sympy.autowrap.DummyWrapper._generate_code(self,routine,helpers)
sympy.autowrap.DummyWrapper._get_wrapped_function(cls,mod,name)
sympy.autowrap.DummyWrapper._prepare_files(self,routine)
sympy.autowrap.DummyWrapper._process_files(self,routine)
sympy.autowrap.F2PyCodeWrapper(CodeWrapper)
sympy.autowrap.F2PyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.autowrap.F2PyCodeWrapper._prepare_files(self,routine)
sympy.autowrap.F2PyCodeWrapper.command(self)
sympy.autowrap.UfuncifyCodeWrapper(CodeWrapper)
sympy.autowrap.UfuncifyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.autowrap.UfuncifyCodeWrapper._partition_args(self,args)
sympy.autowrap.UfuncifyCodeWrapper._prepare_files(self,routine)
sympy.autowrap.UfuncifyCodeWrapper.command(self)
sympy.autowrap.UfuncifyCodeWrapper.dump_c(self,routines,f,prefix)
sympy.autowrap.UfuncifyCodeWrapper.dump_setup(self,f)
sympy.autowrap._get_code_wrapper_class(backend)
sympy.autowrap._infer_language(backend)
sympy.autowrap._validate_backend_language(backend,language)
sympy.autowrap.autowrap(expr,language=None,backend='f2py',tempdir=None,args=None,flags=None,verbose=False,helpers=None)
sympy.autowrap.binary_function(symfunc,expr,**kwargs)
sympy.autowrap.ufuncify(args,expr,language=None,backend='numpy',tempdir=None,flags=None,verbose=False,helpers=None)
sympy.utilities.autowrap.CodeWrapError(Exception)
sympy.utilities.autowrap.CodeWrapper(self,generator,filepath=None,flags=[],verbose=False)
sympy.utilities.autowrap.CodeWrapper.__init__(self,generator,filepath=None,flags=[],verbose=False)
sympy.utilities.autowrap.CodeWrapper._generate_code(self,main_routine,routines)
sympy.utilities.autowrap.CodeWrapper._process_files(self,routine)
sympy.utilities.autowrap.CodeWrapper.filename(self)
sympy.utilities.autowrap.CodeWrapper.include_empty(self)
sympy.utilities.autowrap.CodeWrapper.include_header(self)
sympy.utilities.autowrap.CodeWrapper.module_name(self)
sympy.utilities.autowrap.CodeWrapper.wrap_code(self,routine,helpers=[])
sympy.utilities.autowrap.CythonCodeWrapper(CodeWrapper)
sympy.utilities.autowrap.CythonCodeWrapper._call_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper._declare_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.CythonCodeWrapper._partition_args(self,args)
sympy.utilities.autowrap.CythonCodeWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.CythonCodeWrapper._prototype_arg(self,arg)
sympy.utilities.autowrap.CythonCodeWrapper.command(self)
sympy.utilities.autowrap.CythonCodeWrapper.dump_pyx(self,routines,f,prefix)
sympy.utilities.autowrap.DummyWrapper(CodeWrapper)
sympy.utilities.autowrap.DummyWrapper._generate_code(self,routine,helpers)
sympy.utilities.autowrap.DummyWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.DummyWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.DummyWrapper._process_files(self,routine)
sympy.utilities.autowrap.F2PyCodeWrapper(CodeWrapper)
sympy.utilities.autowrap.F2PyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.F2PyCodeWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.F2PyCodeWrapper.command(self)
sympy.utilities.autowrap.UfuncifyCodeWrapper(CodeWrapper)
sympy.utilities.autowrap.UfuncifyCodeWrapper._get_wrapped_function(cls,mod,name)
sympy.utilities.autowrap.UfuncifyCodeWrapper._partition_args(self,args)
sympy.utilities.autowrap.UfuncifyCodeWrapper._prepare_files(self,routine)
sympy.utilities.autowrap.UfuncifyCodeWrapper.command(self)
sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_c(self,routines,f,prefix)
sympy.utilities.autowrap.UfuncifyCodeWrapper.dump_setup(self,f)
sympy.utilities.autowrap._get_code_wrapper_class(backend)
sympy.utilities.autowrap._infer_language(backend)
sympy.utilities.autowrap._validate_backend_language(backend,language)
sympy.utilities.autowrap.autowrap(expr,language=None,backend='f2py',tempdir=None,args=None,flags=None,verbose=False,helpers=None)
sympy.utilities.autowrap.binary_function(symfunc,expr,**kwargs)
sympy.utilities.autowrap.ufuncify(args,expr,language=None,backend='numpy',tempdir=None,flags=None,verbose=False,helpers=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/runtests.py----------------------------------------
A:sympy.utilities.runtests.s->s.encode('raw_unicode_escape').decode('utf8', 'ignore').encode('raw_unicode_escape').decode('utf8', 'ignore')
A:sympy.utilities.runtests.rv->os.path.join(*rv.split('/'))
A:sympy.utilities.runtests.pos->os.path.join(*rv.split('/')).find(':')
A:sympy.utilities.runtests.this_file->os.path.abspath(__file__)
A:sympy.utilities.runtests.sympy_dir->get_sympy_dir()
A:sympy.utilities.runtests.p->kwargs.pop('subprocess', True).Popen([command, '-R', '-c', commandstring])
A:sympy.utilities.runtests.hash_seed->os.getenv('PYTHONHASHSEED')
A:sympy.utilities.runtests.os.environ['PYTHONHASHSEED']->str(random.randrange(2 ** 32))
A:sympy.utilities.runtests.dev_null->open(os.devnull, 'w')
A:sympy.utilities.runtests.subprocess->kwargs.pop('subprocess', True)
A:sympy.utilities.runtests.rerun->kwargs.pop('rerun', 0)
A:sympy.utilities.runtests.ret->run_in_subprocess_with_hash_randomization('_doctest', function_args=paths, function_kwargs=kwargs)
A:sympy.utilities.runtests.verbose->kwargs.get('verbose', False)
A:sympy.utilities.runtests.tb->kwargs.get('tb', 'short')
A:sympy.utilities.runtests.post_mortem->kwargs.get('pdb', False)
A:sympy.utilities.runtests.colors->kwargs.get('colors', True)
A:sympy.utilities.runtests.force_colors->kwargs.get('force_colors', False)
A:sympy.utilities.runtests.sort->kwargs.get('sort', True)
A:sympy.utilities.runtests.seed->random.randrange(100000000)
A:sympy.utilities.runtests.timeout->kwargs.get('timeout', False)
A:sympy.utilities.runtests.slow->kwargs.get('slow', False)
A:sympy.utilities.runtests.enhance_asserts->kwargs.get('enhance_asserts', False)
A:sympy.utilities.runtests.split->kwargs.get('split', None)
A:sympy.utilities.runtests.blacklist->convert_to_native_paths(blacklist)
A:sympy.utilities.runtests.r->PyTestReporter(verbose, split=split)
A:sympy.utilities.runtests.t->traceback.format_exception_only(e, val)
A:sympy.utilities.runtests.test_files->traceback.format_exception_only(e, val).get_test_files('doc/src', '*.rst', init_only=False)
A:sympy.utilities.runtests.paths->convert_to_native_paths(paths)
A:sympy.utilities.runtests.basename->os.path.basename(f)
A:sympy.utilities.runtests.matched->split_list(matched, split)
A:sympy.utilities.runtests.normal->kwargs.get('normal', False)
A:sympy.utilities.runtests.out->sympytestfile(rst_file, module_relative=False, encoding='utf-8', optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL)
A:sympy.utilities.runtests.sp->re.compile('([0-9]+)/([1-9][0-9]*)')
A:sympy.utilities.runtests.m->re.compile('([0-9]+)/([1-9][0-9]*)').match(split)
A:sympy.utilities.runtests.(i, t)->map(int, m.groups())
A:sympy.utilities.runtests.SymPyTestResults->namedtuple('TestResults', 'failed attempted')
A:sympy.utilities.runtests.(text, filename)->doctest._load_testfile(filename, package, module_relative, encoding)
A:sympy.utilities.runtests.text->text.encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding)
A:sympy.utilities.runtests.name->os.path.basename(filename)
A:sympy.utilities.runtests.globs->globs.copy().copy()
A:sympy.utilities.runtests.runner->SymPyDocTestRunner(optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL)
A:sympy.utilities.runtests.runner._checker->SymPyOutputChecker()
A:sympy.utilities.runtests.test->self._get_test(obj, name, module, globs, source_lines)
A:sympy.utilities.runtests.target->Tuple(names_store, Store())
A:sympy.utilities.runtests.value->Tuple(values, Load())
A:sympy.utilities.runtests.assign->Assign([target], value)
A:sympy.utilities.runtests.new_compare->Compare(names_load[0], compare.ops, names_load[1:])
A:sympy.utilities.runtests.msg->BinOp(Str(msg_format), Mod(), Tuple(names_load, Load()))
A:sympy.utilities.runtests.tree->parse(source)
A:sympy.utilities.runtests.new_tree->Transform().visit(tree)
A:sympy.utilities.runtests.source->self._enhance_asserts(source)
A:sympy.utilities.runtests.code->compile(source, filename, 'exec')
A:sympy.utilities.runtests.pytestfile->inspect.getsourcefile(gl['XFAIL'])
A:sympy.utilities.runtests.pytestfile2->inspect.getsourcefile(gl['slow'])
A:sympy.utilities.runtests.disabled->gl.get('disabled', False)
A:sympy.utilities.runtests.f->funcs.pop(i)
A:sympy.utilities.runtests.(t, v, tr)->sys.exc_info()
A:sympy.utilities.runtests.dir->os.path.join(self._root_dir, convert_to_native_paths([dir])[0])
A:sympy.utilities.runtests.(dirname, file)->os.path.split(filename)
A:sympy.utilities.runtests.module->doctest._normalize_module(module)
A:sympy.utilities.runtests.tests->SymPyDocTestFinder().find(module)
A:sympy.utilities.runtests.new->StringIO()
A:sympy.utilities.runtests.(f, t)->SymPyDocTestRunner(optionflags=pdoctest.ELLIPSIS | pdoctest.NORMALIZE_WHITESPACE | pdoctest.IGNORE_EXCEPTION_DETAIL).run(test, compileflags=future_flags, out=new.write, clear_globs=False)
A:sympy.utilities.runtests.init_py->os.path.join(os.path.dirname(x), '__init__.py')
A:sympy.utilities.runtests.executables->deps.get('exe', None)
A:sympy.utilities.runtests.moduledeps->deps.get('modules', None)
A:sympy.utilities.runtests.viewers->deps.get('disable_viewers', None)
A:sympy.utilities.runtests.pyglet->deps.get('pyglet', None)
A:sympy.utilities.runtests.found->find_executable(ex)
A:sympy.utilities.runtests.matplotlib->import_module('matplotlib', __import__kwargs={'fromlist': ['pyplot', 'cm', 'collections']}, min_module_version='1.0.0', catch=(RuntimeError,))
A:sympy.utilities.runtests.mod->import_module(extmod)
A:sympy.utilities.runtests.tempdir->tempfile.mkdtemp()
A:sympy.utilities.runtests.val->getattr(obj, valname)
A:sympy.utilities.runtests.matches->self.num_want_rgx.finditer(want)
A:sympy.utilities.runtests.lineno->self._find_lineno(tobj, source_lines)
A:sympy.utilities.runtests.docstring->str(docstring)
A:sympy.utilities.runtests.filename->getattr(module, '__file__', module.__name__)
A:sympy.utilities.runtests.compileflags->doctest._extract_future_flags(test.globs)
A:sympy.utilities.runtests.self.debugger->doctest._OutputRedirectingPdb(save_stdout)
A:sympy.utilities.runtests.self.num_got_rgx->re.compile('(%s|%s)' % (fbeg, fmidend))
A:sympy.utilities.runtests.self.num_want_rgx->re.compile('(%s|%s)' % (fbeg, fmidend))
A:sympy.utilities.runtests.got->' '.join(got.split())
A:sympy.utilities.runtests.want->' '.join(want.split())
A:sympy.utilities.runtests.h->ctypes.windll.kernel32.GetStdHandle(-12)
A:sympy.utilities.runtests.csbi->create_string_buffer(22)
A:sympy.utilities.runtests.res->ctypes.windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
A:sympy.utilities.runtests.(_, _, _, _, _, left, _, right, _, _, _)->struct.unpack('hhhhHhhhhhh', csbi.raw)
A:sympy.utilities.runtests.process->kwargs.pop('subprocess', True).Popen(['stty', '-a'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:sympy.utilities.runtests.stdout->stdout.decode('utf-8').decode('utf-8')
A:sympy.utilities.runtests.match->re.search(regex, stdout)
A:sympy.utilities.runtests.columns->re.search(regex, stdout).group('columns')
A:sympy.utilities.runtests.width->findout_terminal_width()
A:sympy.utilities.runtests.l->text.encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).encode(sys.stdout.encoding, 'backslashreplace').decode(sys.stdout.encoding).rfind('\n')
A:sympy.utilities.runtests.v->tuple(sys.version_info)
A:sympy.utilities.runtests.implementation->platform.python_implementation()
A:sympy.utilities.runtests.version->gmpy2.version()
A:sympy.utilities.runtests.self._t_start->clock()
A:sympy.utilities.runtests.self._t_end->clock()
A:sympy.utilities.runtests.linelen->len(text)
A:sympy.utilities.runtests.message->str(v)
A:sympy.utilities.runtests.error_msg->'\n'.join(error_msg.split('\n')[1:])
sympy.doctest(*paths,**kwargs)
sympy.runtests.PyTestReporter(self,verbose=False,tb='short',colors=True,force_colors=False,split=None)
sympy.runtests.PyTestReporter.doctest_fail(self,name,error_msg)
sympy.runtests.PyTestReporter.entering_filename(self,filename,n)
sympy.runtests.PyTestReporter.entering_test(self,f)
sympy.runtests.PyTestReporter.finish(self)
sympy.runtests.PyTestReporter.import_error(self,filename,exc_info)
sympy.runtests.PyTestReporter.leaving_filename(self)
sympy.runtests.PyTestReporter.root_dir(self,dir)
sympy.runtests.PyTestReporter.start(self,seed=None,msg='testprocessstarts')
sympy.runtests.PyTestReporter.terminal_width(self)
sympy.runtests.PyTestReporter.test_exception(self,exc_info)
sympy.runtests.PyTestReporter.test_fail(self,exc_info)
sympy.runtests.PyTestReporter.test_pass(self,char='.')
sympy.runtests.PyTestReporter.test_skip(self,v=None)
sympy.runtests.PyTestReporter.test_xfail(self)
sympy.runtests.PyTestReporter.test_xpass(self,v)
sympy.runtests.PyTestReporter.write(self,text,color='',align='left',width=None,force_colors=False)
sympy.runtests.PyTestReporter.write_center(self,text,delim='=')
sympy.runtests.PyTestReporter.write_exception(self,e,val,tb)
sympy.runtests.Reporter(object)
sympy.runtests.Skipped(Exception)
sympy.runtests.SymPyDocTestFinder(DocTestFinder)
sympy.runtests.SymPyDocTestFinder._find(self,tests,obj,name,module,source_lines,globs,seen)
sympy.runtests.SymPyDocTestFinder._get_test(self,obj,name,module,globs,source_lines)
sympy.runtests.SymPyDocTestRunner(DocTestRunner)
sympy.runtests.SymPyDocTestRunner.run(self,test,compileflags=None,out=None,clear_globs=True)
sympy.runtests.SymPyDocTests(self,reporter,normal)
sympy.runtests.SymPyDocTests._process_dependencies(self,deps)
sympy.runtests.SymPyDocTests.get_test_files(self,dir,pat='*.py',init_only=True)
sympy.runtests.SymPyDocTests.test(self)
sympy.runtests.SymPyDocTests.test_file(self,filename)
sympy.runtests.SymPyOutputChecker(self)
sympy.runtests.SymPyOutputChecker.check_output(self,want,got,optionflags)
sympy.runtests.SymPyTests(self,reporter,kw='',post_mortem=False,seed=None)
sympy.runtests.SymPyTests._enhance_asserts(self,source)
sympy.runtests.SymPyTests._timeout(self,function,timeout)
sympy.runtests.SymPyTests.get_test_files(self,dir,pat='test_*.py')
sympy.runtests.SymPyTests.matches(self,x)
sympy.runtests.SymPyTests.test(self,sort=False,timeout=False,slow=False,enhance_asserts=False)
sympy.runtests.SymPyTests.test_file(self,filename,sort=True,timeout=False,slow=False,enhance_asserts=False)
sympy.runtests._doctest(*paths,**kwargs)
sympy.runtests._indent(s,indent=4)
sympy.runtests._report_failure(self,out,test,example,got)
sympy.runtests._test(*paths,**kwargs)
sympy.runtests.convert_to_native_paths(lst)
sympy.runtests.get_sympy_dir()
sympy.runtests.run_all_tests(test_args=(),test_kwargs={},doctest_args=(),doctest_kwargs={},examples_args=(),examples_kwargs={'quiet':True})
sympy.runtests.run_in_subprocess_with_hash_randomization(function,function_args=(),function_kwargs={},command=sys.executable,module='sympy.utilities.runtests',force=False)
sympy.runtests.setup_pprint()
sympy.runtests.split_list(l,split)
sympy.runtests.sympytestfile(filename,module_relative=True,name=None,package=None,globs=None,verbose=None,report=True,optionflags=0,extraglobs=None,raise_on_error=False,parser=pdoctest.DocTestParser(),encoding=None)
sympy.runtests.sys_normcase(f)
sympy.test(*paths,**kwargs)
sympy.utilities.runtests.PyTestReporter(self,verbose=False,tb='short',colors=True,force_colors=False,split=None)
sympy.utilities.runtests.PyTestReporter.__init__(self,verbose=False,tb='short',colors=True,force_colors=False,split=None)
sympy.utilities.runtests.PyTestReporter.doctest_fail(self,name,error_msg)
sympy.utilities.runtests.PyTestReporter.entering_filename(self,filename,n)
sympy.utilities.runtests.PyTestReporter.entering_test(self,f)
sympy.utilities.runtests.PyTestReporter.finish(self)
sympy.utilities.runtests.PyTestReporter.import_error(self,filename,exc_info)
sympy.utilities.runtests.PyTestReporter.leaving_filename(self)
sympy.utilities.runtests.PyTestReporter.root_dir(self,dir)
sympy.utilities.runtests.PyTestReporter.start(self,seed=None,msg='testprocessstarts')
sympy.utilities.runtests.PyTestReporter.terminal_width(self)
sympy.utilities.runtests.PyTestReporter.test_exception(self,exc_info)
sympy.utilities.runtests.PyTestReporter.test_fail(self,exc_info)
sympy.utilities.runtests.PyTestReporter.test_pass(self,char='.')
sympy.utilities.runtests.PyTestReporter.test_skip(self,v=None)
sympy.utilities.runtests.PyTestReporter.test_xfail(self)
sympy.utilities.runtests.PyTestReporter.test_xpass(self,v)
sympy.utilities.runtests.PyTestReporter.write(self,text,color='',align='left',width=None,force_colors=False)
sympy.utilities.runtests.PyTestReporter.write_center(self,text,delim='=')
sympy.utilities.runtests.PyTestReporter.write_exception(self,e,val,tb)
sympy.utilities.runtests.Reporter(object)
sympy.utilities.runtests.Skipped(Exception)
sympy.utilities.runtests.SymPyDocTestFinder(DocTestFinder)
sympy.utilities.runtests.SymPyDocTestFinder._find(self,tests,obj,name,module,source_lines,globs,seen)
sympy.utilities.runtests.SymPyDocTestFinder._get_test(self,obj,name,module,globs,source_lines)
sympy.utilities.runtests.SymPyDocTestRunner(DocTestRunner)
sympy.utilities.runtests.SymPyDocTestRunner.run(self,test,compileflags=None,out=None,clear_globs=True)
sympy.utilities.runtests.SymPyDocTests(self,reporter,normal)
sympy.utilities.runtests.SymPyDocTests.__init__(self,reporter,normal)
sympy.utilities.runtests.SymPyDocTests._process_dependencies(self,deps)
sympy.utilities.runtests.SymPyDocTests.get_test_files(self,dir,pat='*.py',init_only=True)
sympy.utilities.runtests.SymPyDocTests.test(self)
sympy.utilities.runtests.SymPyDocTests.test_file(self,filename)
sympy.utilities.runtests.SymPyOutputChecker(self)
sympy.utilities.runtests.SymPyOutputChecker.__init__(self)
sympy.utilities.runtests.SymPyOutputChecker.check_output(self,want,got,optionflags)
sympy.utilities.runtests.SymPyTests(self,reporter,kw='',post_mortem=False,seed=None)
sympy.utilities.runtests.SymPyTests.__init__(self,reporter,kw='',post_mortem=False,seed=None)
sympy.utilities.runtests.SymPyTests._enhance_asserts(self,source)
sympy.utilities.runtests.SymPyTests._timeout(self,function,timeout)
sympy.utilities.runtests.SymPyTests.get_test_files(self,dir,pat='test_*.py')
sympy.utilities.runtests.SymPyTests.matches(self,x)
sympy.utilities.runtests.SymPyTests.test(self,sort=False,timeout=False,slow=False,enhance_asserts=False)
sympy.utilities.runtests.SymPyTests.test_file(self,filename,sort=True,timeout=False,slow=False,enhance_asserts=False)
sympy.utilities.runtests._doctest(*paths,**kwargs)
sympy.utilities.runtests._indent(s,indent=4)
sympy.utilities.runtests._report_failure(self,out,test,example,got)
sympy.utilities.runtests._test(*paths,**kwargs)
sympy.utilities.runtests.convert_to_native_paths(lst)
sympy.utilities.runtests.doctest(*paths,**kwargs)
sympy.utilities.runtests.get_sympy_dir()
sympy.utilities.runtests.run_all_tests(test_args=(),test_kwargs={},doctest_args=(),doctest_kwargs={},examples_args=(),examples_kwargs={'quiet':True})
sympy.utilities.runtests.run_in_subprocess_with_hash_randomization(function,function_args=(),function_kwargs={},command=sys.executable,module='sympy.utilities.runtests',force=False)
sympy.utilities.runtests.setup_pprint()
sympy.utilities.runtests.split_list(l,split)
sympy.utilities.runtests.sympytestfile(filename,module_relative=True,name=None,package=None,globs=None,verbose=None,report=True,optionflags=0,extraglobs=None,raise_on_error=False,parser=pdoctest.DocTestParser(),encoding=None)
sympy.utilities.runtests.sys_normcase(f)
sympy.utilities.runtests.test(*paths,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/exceptions.py----------------------------------------
sympy.exceptions.SymPyDeprecationWarning(self,value=None,feature=None,last_supported_version=None,useinstead=None,issue=None,deprecated_since_version=None)
sympy.exceptions.SymPyDeprecationWarning.__str__(self)
sympy.exceptions.SymPyDeprecationWarning.warn(self,stacklevel=2)
sympy.utilities.exceptions.SymPyDeprecationWarning(self,value=None,feature=None,last_supported_version=None,useinstead=None,issue=None,deprecated_since_version=None)
sympy.utilities.exceptions.SymPyDeprecationWarning.__init__(self,value=None,feature=None,last_supported_version=None,useinstead=None,issue=None,deprecated_since_version=None)
sympy.utilities.exceptions.SymPyDeprecationWarning.__str__(self)
sympy.utilities.exceptions.SymPyDeprecationWarning.warn(self,stacklevel=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/randtest.py----------------------------------------
A:sympy.utilities.randtest.diff->abs(z1 - z2)
A:sympy.utilities.randtest.az1->abs(z1)
A:sympy.utilities.randtest.(f, g, z)->Tuple(f, g, z)
A:sympy.utilities.randtest.reps->list(zip(z, [random_complex_number(a, b, c, d) for zi in z]))
A:sympy.utilities.randtest.z1->f.subs(reps).n()
A:sympy.utilities.randtest.z2->g.subs(reps).n()
A:sympy.utilities.randtest.z0->random_complex_number(a, b, c, d)
A:sympy.utilities.randtest.f1->f.diff(z).subs(z, z0)
A:sympy.utilities.randtest.f2->Derivative(f, z).doit_numerically(z0)
A:sympy.utilities.randtest.seed->list(seed)
A:sympy.utilities.randtest.x->seq.pop()
sympy.randtest._randint(seed=None)
sympy.randtest._randrange(seed=None)
sympy.randtest.comp(z1,z2,tol)
sympy.randtest.random_complex_number(a=2,b=-1,c=3,d=1,rational=False)
sympy.randtest.test_derivative_numerically(f,z,tol=1e-06,a=2,b=-1,c=3,d=1)
sympy.randtest.verify_numerically(f,g,z=None,tol=1e-06,a=2,b=-1,c=3,d=1)
sympy.utilities.randtest._randint(seed=None)
sympy.utilities.randtest._randrange(seed=None)
sympy.utilities.randtest.comp(z1,z2,tol)
sympy.utilities.randtest.random_complex_number(a=2,b=-1,c=3,d=1,rational=False)
sympy.utilities.randtest.test_derivative_numerically(f,z,tol=1e-06,a=2,b=-1,c=3,d=1)
sympy.utilities.randtest.verify_numerically(f,g,z=None,tol=1e-06,a=2,b=-1,c=3,d=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/magic.py----------------------------------------
sympy.magic.pollute(names,objects)
sympy.utilities.magic.pollute(names,objects)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/enumerative.py----------------------------------------
A:sympy.utilities.enumerative.m->len(multiplicities)
A:sympy.utilities.enumerative.n->sum(multiplicities)
A:sympy.utilities.enumerative.pstack[k].v->min(pstack[j].v, pstack[k].u)
A:sympy.utilities.enumerative.num_components->len(multiplicities)
A:sympy.utilities.enumerative.cardinality->sum(multiplicities)
A:sympy.utilities.enumerative.plen->len(part)
A:sympy.utilities.enumerative.total_mult->sum((pc.u for pc in part))
A:sympy.utilities.enumerative.total_alloc->sum((pc.v for pc in part))
A:sympy.utilities.enumerative.pkey->part_key(self.top_part())
sympy.enumerative.MultisetPartitionTraverser(self)
sympy.enumerative.MultisetPartitionTraverser._initialize_enumeration(self,multiplicities)
sympy.enumerative.MultisetPartitionTraverser.count_partitions(self,multiplicities)
sympy.enumerative.MultisetPartitionTraverser.count_partitions_slow(self,multiplicities)
sympy.enumerative.MultisetPartitionTraverser.db_trace(self,msg)
sympy.enumerative.MultisetPartitionTraverser.decrement_part(self,part)
sympy.enumerative.MultisetPartitionTraverser.decrement_part_large(self,part,amt,lb)
sympy.enumerative.MultisetPartitionTraverser.decrement_part_range(self,part,lb,ub)
sympy.enumerative.MultisetPartitionTraverser.decrement_part_small(self,part,ub)
sympy.enumerative.MultisetPartitionTraverser.enum_all(self,multiplicities)
sympy.enumerative.MultisetPartitionTraverser.enum_large(self,multiplicities,lb)
sympy.enumerative.MultisetPartitionTraverser.enum_range(self,multiplicities,lb,ub)
sympy.enumerative.MultisetPartitionTraverser.enum_small(self,multiplicities,ub)
sympy.enumerative.MultisetPartitionTraverser.spread_part_multiplicity(self)
sympy.enumerative.MultisetPartitionTraverser.top_part(self)
sympy.enumerative.PartComponent(self)
sympy.enumerative.PartComponent.__eq__(self,other)
sympy.enumerative.PartComponent.__ne__(self,other)
sympy.enumerative.PartComponent.__repr__(self)
sympy.enumerative.factoring_visitor(state,primes)
sympy.enumerative.list_visitor(state,components)
sympy.enumerative.multiset_partitions_taocp(multiplicities)
sympy.enumerative.part_key(part)
sympy.utilities.enumerative.MultisetPartitionTraverser(self)
sympy.utilities.enumerative.MultisetPartitionTraverser.__init__(self)
sympy.utilities.enumerative.MultisetPartitionTraverser._initialize_enumeration(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.count_partitions_slow(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.db_trace(self,msg)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part(self,part)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_large(self,part,amt,lb)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_range(self,part,lb,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.decrement_part_small(self,part,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_all(self,multiplicities)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_large(self,multiplicities,lb)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_range(self,multiplicities,lb,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.enum_small(self,multiplicities,ub)
sympy.utilities.enumerative.MultisetPartitionTraverser.spread_part_multiplicity(self)
sympy.utilities.enumerative.MultisetPartitionTraverser.top_part(self)
sympy.utilities.enumerative.PartComponent(self)
sympy.utilities.enumerative.PartComponent.__eq__(self,other)
sympy.utilities.enumerative.PartComponent.__init__(self)
sympy.utilities.enumerative.PartComponent.__ne__(self,other)
sympy.utilities.enumerative.PartComponent.__repr__(self)
sympy.utilities.enumerative.factoring_visitor(state,primes)
sympy.utilities.enumerative.list_visitor(state,components)
sympy.utilities.enumerative.multiset_partitions_taocp(multiplicities)
sympy.utilities.enumerative.part_key(part)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/iterables.py----------------------------------------
A:sympy.utilities.iterables.m->min(m or n, n)
A:sympy.utilities.iterables.(n, rem)->divmod(len(seq), m)
A:sympy.utilities.iterables.container->type(how)
A:sympy.utilities.iterables.n->len(seq)
A:sympy.utilities.iterables.hi_type->type(hi)
A:sympy.utilities.iterables.rv[k]->container(rv[k])
A:sympy.utilities.iterables.rv->defaultdict(int)
A:sympy.utilities.iterables.args->list(expr)
A:sympy.utilities.iterables.n_args->len(args)
A:sympy.utilities.iterables.choice->int(choice)
A:sympy.utilities.iterables.result->_interactive_traversal(args[choice], stage + 1)
A:sympy.utilities.iterables.bits->as_int(bits)
A:sympy.utilities.iterables.seq->iter(seq)
A:sympy.utilities.iterables.exclude->set(exclude or [])
A:sympy.utilities.iterables.s->cls(name, *args, **assumptions)
A:sympy.utilities.iterables.sys.stdoutfile->StringIO()
A:sympy.utilities.iterables.S->sorted(S, key=key, reverse=True)
A:sympy.utilities.iterables.E->list(E)
A:sympy.utilities.iterables.node->sorted(S, key=key, reverse=True).pop()
A:sympy.utilities.iterables.kv->key(v)
A:sympy.utilities.iterables.ks->key(s)
A:sympy.utilities.iterables.SUM->sum([gi[1] for gi in do])
A:sympy.utilities.iterables.multiset->list(ordered(multiset))
A:sympy.utilities.iterables.(elements, multiplicities)->zip(*group(multiset, False))
A:sympy.utilities.iterables.mpt->MultisetPartitionTraverser()
A:sympy.utilities.iterables.k->min(k or n, n)
A:sympy.utilities.iterables.(q, r)->divmod(reuse, i)
A:sympy.utilities.iterables.reuse->ms.pop(1)
A:sympy.utilities.iterables.pow->int(2 ** ceil(log(n, 2)))
A:sympy.utilities.iterables.uniq->set()
A:sympy.utilities.iterables.seen->set()
A:sympy.utilities.iterables.l->list(range(n))
A:sympy.utilities.iterables.idx->list(range(n))
A:sympy.utilities.iterables.p->multiset_permutations(perm)
A:sympy.utilities.iterables.indices->range(len(perm))
A:sympy.utilities.iterables.p0->next(p)
A:sympy.utilities.iterables.P->list(range(-1, n))
A:sympy.utilities.iterables.is_str->isinstance(seq, str)
A:sympy.utilities.iterables.small->min(seq, key=default_sort_key)
A:sympy.utilities.iterables.i->iter(seq).index(small)
A:sympy.utilities.iterables.count->iter(seq).count(small)
A:sympy.utilities.iterables.best->rotate_left(seq, seq.index(small))
A:sympy.utilities.iterables.ei->next(seq)
A:sympy.utilities.iterables.pl->list(pl)
A:sympy.utilities.iterables.li->list(li)
sympy.capture(func)
sympy.dict_merge(*dicts)
sympy.flatten(iterable,levels=None,cls=None)
sympy.group(seq,multiple=True)
sympy.has_dups(seq)
sympy.has_variety(seq)
sympy.interactive_traversal(expr)
sympy.iterables._partition(seq,vector,m=None)
sympy.iterables._set_partitions(n)
sympy.iterables.binary_partitions(n)
sympy.iterables.bracelets(n,k)
sympy.iterables.common_prefix(*seqs)
sympy.iterables.common_suffix(*seqs)
sympy.iterables.filter_symbols(iterator,exclude)
sympy.iterables.generate_bell(n)
sympy.iterables.generate_derangements(perm)
sympy.iterables.generate_involutions(n)
sympy.iterables.generate_oriented_forest(n)
sympy.iterables.ibin(n,bits=0,str=False)
sympy.iterables.kbins(l,k,ordered=None)
sympy.iterables.minlex(seq,directed=True,is_set=False,small=None)
sympy.iterables.multiset(seq)
sympy.iterables.multiset_combinations(m,n,g=None)
sympy.iterables.multiset_partitions(multiset,m=None)
sympy.iterables.multiset_permutations(m,size=None,g=None)
sympy.iterables.necklaces(n,k,free=False)
sympy.iterables.partitions(n,m=None,k=None,size=False)
sympy.iterables.rotate_left(x,y)
sympy.iterables.rotate_right(x,y)
sympy.iterables.runs(seq,op=gt)
sympy.iterables.uniq(seq,result=None)
sympy.iterables.unrestricted_necklace(n,k)
sympy.numbered_symbols(prefix='x',cls=None,start=0,exclude=[],*args,**assumptions)
sympy.postfixes(seq)
sympy.postorder_traversal(node,keys=None)
sympy.prefixes(seq)
sympy.reshape(seq,how)
sympy.sift(seq,keyfunc)
sympy.subsets(seq,k=None,repetition=False)
sympy.take(iter,n)
sympy.topological_sort(graph,key=None)
sympy.unflatten(iter,n=2)
sympy.utilities.iterables._partition(seq,vector,m=None)
sympy.utilities.iterables._set_partitions(n)
sympy.utilities.iterables.binary_partitions(n)
sympy.utilities.iterables.bracelets(n,k)
sympy.utilities.iterables.capture(func)
sympy.utilities.iterables.common_prefix(*seqs)
sympy.utilities.iterables.common_suffix(*seqs)
sympy.utilities.iterables.dict_merge(*dicts)
sympy.utilities.iterables.filter_symbols(iterator,exclude)
sympy.utilities.iterables.flatten(iterable,levels=None,cls=None)
sympy.utilities.iterables.generate_bell(n)
sympy.utilities.iterables.generate_derangements(perm)
sympy.utilities.iterables.generate_involutions(n)
sympy.utilities.iterables.generate_oriented_forest(n)
sympy.utilities.iterables.group(seq,multiple=True)
sympy.utilities.iterables.has_dups(seq)
sympy.utilities.iterables.has_variety(seq)
sympy.utilities.iterables.ibin(n,bits=0,str=False)
sympy.utilities.iterables.interactive_traversal(expr)
sympy.utilities.iterables.kbins(l,k,ordered=None)
sympy.utilities.iterables.minlex(seq,directed=True,is_set=False,small=None)
sympy.utilities.iterables.multiset(seq)
sympy.utilities.iterables.multiset_combinations(m,n,g=None)
sympy.utilities.iterables.multiset_partitions(multiset,m=None)
sympy.utilities.iterables.multiset_permutations(m,size=None,g=None)
sympy.utilities.iterables.necklaces(n,k,free=False)
sympy.utilities.iterables.numbered_symbols(prefix='x',cls=None,start=0,exclude=[],*args,**assumptions)
sympy.utilities.iterables.partitions(n,m=None,k=None,size=False)
sympy.utilities.iterables.postfixes(seq)
sympy.utilities.iterables.postorder_traversal(node,keys=None)
sympy.utilities.iterables.prefixes(seq)
sympy.utilities.iterables.reshape(seq,how)
sympy.utilities.iterables.rotate_left(x,y)
sympy.utilities.iterables.rotate_right(x,y)
sympy.utilities.iterables.runs(seq,op=gt)
sympy.utilities.iterables.sift(seq,keyfunc)
sympy.utilities.iterables.subsets(seq,k=None,repetition=False)
sympy.utilities.iterables.take(iter,n)
sympy.utilities.iterables.topological_sort(graph,key=None)
sympy.utilities.iterables.unflatten(iter,n=2)
sympy.utilities.iterables.uniq(seq,result=None)
sympy.utilities.iterables.unrestricted_necklace(n,k)
sympy.utilities.iterables.variations(seq,n,repetition=False)
sympy.variations(seq,n,repetition=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/pytest.py----------------------------------------
A:sympy.utilities.pytest.USE_PYTEST->getattr(sys, '_running_pytest', False)
A:sympy.utilities.pytest.ON_TRAVIS->os.getenv('TRAVIS_BUILD_NUMBER', None)
A:sympy.utilities.pytest.message->str(e)
A:sympy.utilities.pytest.wrapper->functools.update_wrapper(wrapper, func)
A:sympy.utilities.pytest.func_wrapper->functools.update_wrapper(func_wrapper, func)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/misc.py----------------------------------------
A:sympy.utilities.misc.lines->s.split('\n')
A:sympy.utilities.misc.trailing->s.endswith('\n')
A:sympy.utilities.misc.rv->'\n    '.join(lines)
A:sympy.utilities.misc.size->getattr(sys, 'maxint', None)
A:sympy.utilities.misc.HASH_RANDOMIZATION->getattr(sys.flags, 'hash_randomization', False)
A:sympy.utilities.misc.x->s.split('\n')
A:sympy.utilities.misc.r->f(*args, **kw)
A:sympy.utilities.misc.paths->path.split(os.pathsep)
A:sympy.utilities.misc.(base, ext)->os.path.splitext(executable)
A:sympy.utilities.misc.pathext->os.environ['PATHEXT'].lower().split(os.pathsep)
A:sympy.utilities.misc.f->os.path.join(p, execname)
sympy.misc.debug(*args)
sympy.misc.debug_decorator(func)
sympy.misc.find_executable(executable,path=None)
sympy.misc.rawlines(s)
sympy.utilities.misc.debug(*args)
sympy.utilities.misc.debug_decorator(func)
sympy.utilities.misc.find_executable(executable,path=None)
sympy.utilities.misc.rawlines(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/benchmarking.py----------------------------------------
A:sympy.utilities.benchmarking.unitn->dict(((s, i) for (i, s) in enumerate(units)))
A:sympy.utilities.benchmarking.stmt->timeit.reindent(stmt, 8)
A:sympy.utilities.benchmarking.setup->timeit.reindent(setup, 4)
A:sympy.utilities.benchmarking.code->compile(src, timeit.dummy_src_name, 'exec')
A:sympy.utilities.benchmarking.src->'\n'.join(src.splitlines()[1:])
A:sympy.utilities.benchmarking.self.benchtitle->'\n'.join(src.splitlines()[1:]).splitlines()[0].strip()
A:sympy.utilities.benchmarking.timer->Timer(src, globals=target.func_globals)
A:sympy.utilities.benchmarking.t->Timer(src, globals=target.func_globals).timeit(number)
A:sympy.utilities.benchmarking.number->int(_ceil(number))
A:sympy.utilities.benchmarking.self.benchtime->Timer(src, globals=target.func_globals).timeit(1)
A:sympy.utilities.benchmarking.order->min(-int(_floor(log10(best)) // 3), 3)
A:sympy.utilities.benchmarking.(n, u)->tstr.split()
A:sympy.utilities.benchmarking.(m, e)->' '.join((m, e)).split('.')
A:sympy.utilities.benchmarking.wm[un]->max(len(m), wm[un])
A:sympy.utilities.benchmarking.we[un]->max(len(e), we[un])
A:sympy.utilities.benchmarking.m->m.rjust(wm[un]).rjust(wm[un])
A:sympy.utilities.benchmarking.e->e.ljust(we[un]).ljust(we[un])
A:sympy.utilities.benchmarking.n->' '.join((m, e))
A:sympy.utilities.benchmarking.w->max((len(s[i]) for s in results))
A:sympy.utilities.benchmarking.s[i]->s[i].ljust(w).ljust(w)
sympy.benchmarking.BenchSession(TerminalSession)
sympy.benchmarking.BenchSession.footer(self,colitems)
sympy.benchmarking.BenchSession.header(self,colitems)
sympy.benchmarking.BenchSession.print_bench_results(self)
sympy.benchmarking.Directory(py.test.collect.Directory)
sympy.benchmarking.Directory.filefilter(self,path)
sympy.benchmarking.Function(self,*args,**kw)
sympy.benchmarking.Function.execute(self,target,*args)
sympy.benchmarking.Module(py.test.collect.Module)
sympy.benchmarking.Module.funcnamefilter(self,name)
sympy.benchmarking.Timer(self,stmt,setup='pass',timer=timeit.default_timer,globals=globals())
sympy.benchmarking.main(args=None)
sympy.utilities.benchmarking.BenchSession(TerminalSession)
sympy.utilities.benchmarking.BenchSession.footer(self,colitems)
sympy.utilities.benchmarking.BenchSession.header(self,colitems)
sympy.utilities.benchmarking.BenchSession.print_bench_results(self)
sympy.utilities.benchmarking.Directory(py.test.collect.Directory)
sympy.utilities.benchmarking.Directory.filefilter(self,path)
sympy.utilities.benchmarking.Function(self,*args,**kw)
sympy.utilities.benchmarking.Function.__init__(self,*args,**kw)
sympy.utilities.benchmarking.Function.execute(self,target,*args)
sympy.utilities.benchmarking.Module(py.test.collect.Module)
sympy.utilities.benchmarking.Module.funcnamefilter(self,name)
sympy.utilities.benchmarking.Timer(self,stmt,setup='pass',timer=timeit.default_timer,globals=globals())
sympy.utilities.benchmarking.Timer.__init__(self,stmt,setup='pass',timer=timeit.default_timer,globals=globals())
sympy.utilities.benchmarking.main(args=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/compilef.py----------------------------------------
A:sympy.utilities.compilef.libtcc->ctypes.cdll.LoadLibrary(libtccpath)
A:sympy.utilities.compilef.i->__getClosePos(expr[index + oplength:], '()', stopchar)
A:sympy.utilities.compilef.index->pyexpr.replace(left + '**' + right, ' pow(%s, %s) ' % (left.lstrip(), right.rstrip())).find('**')
A:sympy.utilities.compilef.(left, right)->__getLeftRight(pyexpr, index, 2, '+-*/')
A:sympy.utilities.compilef.pyexpr->pyexpr.replace(left + '**' + right, ' pow(%s, %s) ' % (left.lstrip(), right.rstrip())).replace(left + '**' + right, ' pow(%s, %s) ' % (left.lstrip(), right.rstrip()))
A:sympy.utilities.compilef.(varstr, fstr)->lambdastr.split(': ')
A:sympy.utilities.compilef.varstr->varstr.lstrip('lambda ').lstrip('lambda ')
A:sympy.utilities.compilef.cvars->varstr.lstrip('lambda ').lstrip('lambda ').split(',')
A:sympy.utilities.compilef.cvarstr->cvarstr.rstrip(', ').rstrip(', ')
A:sympy.utilities.compilef.finalexpr->cexpr(str(finalexpr[0].evalf(dps)))
A:sympy.utilities.compilef.(subs, finalexpr)->cse(sympify(fstr), _gentmpvars())
A:sympy.utilities.compilef.fprototype->ctypes.CFUNCTYPE(*[ctypes.c_double] * (argcount + 1))
A:sympy.utilities.compilef.tccstate->ctypes.cdll.LoadLibrary(libtccpath).tcc_new()
A:sympy.utilities.compilef.symbol->ctypes.c_long()
A:sympy.utilities.compilef.s->getlambdastr(args, expr.evalf(21))
A:sympy.utilities.compilef.length->len(array)
A:sympy.utilities.compilef.a->frange(*args)
A:sympy.utilities.compilef.evalonrange->_compile(code, fname='evalonrange', fprototype=[None, ctypes.c_void_p, ctypes.c_int])
A:sympy.utilities.compilef.pointer->ctypes.byref(array)
A:sympy.utilities.compilef.run->_compile(code, fname='evalonarray', fprototype=[None, ctypes.c_void_p, ctypes.c_int])
A:sympy.utilities.compilef.x->Symbol('x')
A:sympy.utilities.compilef.y->Symbol('y')
A:sympy.utilities.compilef.z->Symbol('z')
A:sympy.utilities.compilef.f1->sqrt(x * y)
A:sympy.utilities.compilef.pf1->lambdify((x, y), f1, 'math')
A:sympy.utilities.compilef.cf1->clambdify((x, y), f1)
A:sympy.utilities.compilef.pf2->lambdify((x, y, z), f2, 'math')
A:sympy.utilities.compilef.cf2->clambdify((x, y, z), f2)
A:sympy.utilities.compilef.f->eval(fstr)
A:sympy.utilities.compilef.args->range(30, 168, 3)
A:sympy.utilities.compilef.b->frange(*args, **kwargs)
A:sympy.utilities.compilef.numpy->import_module('numpy')
A:sympy.utilities.compilef.start->time()
A:sympy.utilities.compilef.cf->clambdify(var, f)
A:sympy.utilities.compilef.pf->lambdify(var, f, 'math')
A:sympy.utilities.compilef.psyco->import_module('psyco')
A:sympy.utilities.compilef.psyf->lambdify(var, f, 'math')
A:sympy.utilities.compilef.t1->Timer(code, 'from __main__ import cf as f')
A:sympy.utilities.compilef.t2->Timer(code, 'from __main__ import pf as f')
A:sympy.utilities.compilef.t3->Timer(code, 'from __main__ import psyf as f')
A:sympy.utilities.compilef.t4->Timer("frange('lambda x: %s', 0, %i)" % (fstr, times), 'from __main__ import frange')
A:sympy.utilities.compilef.t5->Timer('x = arange(%i); result = %s' % (times, fstr), 'from numpy import arange, sqrt, exp, sin, cos, exp, pi')
sympy.compilef.__getClosePos(expr,braces,stopchar)
sympy.compilef.__getLeftRight(expr,index,oplength=1,stopchar='+-')
sympy.compilef.__run(cmd)
sympy.compilef._compile(code,argcount=None,fname='f',fprototype=None)
sympy.compilef._gentmpvars()
sympy.compilef.benchmark()
sympy.compilef.cexpr(pyexpr)
sympy.compilef.clambdify(args,expr,**kwargs)
sympy.compilef.evalonarray(lambdastr,array,length=None,**kwargs)
sympy.compilef.frange(*args,**kwargs)
sympy.compilef.genfcode(lambdastr,use_cse=False)
sympy.compilef.test_cexpr()
sympy.compilef.test_clambdify()
sympy.compilef.test_evalonarray_ctypes()
sympy.compilef.test_evalonarray_numpy()
sympy.compilef.test_frange()
sympy.compilef.test_use_cse()
sympy.utilities.compilef.__getClosePos(expr,braces,stopchar)
sympy.utilities.compilef.__getLeftRight(expr,index,oplength=1,stopchar='+-')
sympy.utilities.compilef.__run(cmd)
sympy.utilities.compilef._compile(code,argcount=None,fname='f',fprototype=None)
sympy.utilities.compilef._gentmpvars()
sympy.utilities.compilef.benchmark()
sympy.utilities.compilef.cexpr(pyexpr)
sympy.utilities.compilef.clambdify(args,expr,**kwargs)
sympy.utilities.compilef.evalonarray(lambdastr,array,length=None,**kwargs)
sympy.utilities.compilef.frange(*args,**kwargs)
sympy.utilities.compilef.genfcode(lambdastr,use_cse=False)
sympy.utilities.compilef.test_cexpr()
sympy.utilities.compilef.test_clambdify()
sympy.utilities.compilef.test_evalonarray_ctypes()
sympy.utilities.compilef.test_evalonarray_numpy()
sympy.utilities.compilef.test_frange()
sympy.utilities.compilef.test_use_cse()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/lambdify.py----------------------------------------
A:sympy.utilities.lambdify.module->eval(import_command)
A:sympy.utilities.lambdify.buf->_get_namespace(m)
A:sympy.utilities.lambdify.syms->lambdarepr(expr).atoms(Symbol)
A:sympy.utilities.lambdify.callers_local_vars->inspect.currentframe().f_back.f_locals.items()
A:sympy.utilities.lambdify.lstr->lambdastr(flatten(args), expr, printer=printer, dummify=dummify)
A:sympy.utilities.lambdify.func->getattr(expr, 'func', None)
A:sympy.utilities.lambdify.sig->textwrap.fill(sig, subsequent_indent=' ' * 8)
A:sympy.utilities.lambdify.expr_str->str(expr)
A:sympy.utilities.lambdify.func.__doc__->'Created with lambdify. Signature:\n\n{sig}\n\nExpression:\n\n{expr}'.format(sig=sig, expr=expr_str)
A:sympy.utilities.lambdify.mat->namespace.get('ImmutableMatrix', False)
A:sympy.utilities.lambdify.dummies->Dummy()
A:sympy.utilities.lambdify.expr->lambdarepr(expr)
A:sympy.utilities.lambdify.iter_args->','.join([i if isiter(a) else i for (i, a) in zip(dum_args, args)])
A:sympy.utilities.lambdify.args->','.join((str(a) for a in args))
A:sympy.utilities.lambdify.imp->getattr(func, '_imp_', None)
A:sympy.utilities.lambdify.symfunc->UndefinedFunction(symfunc)
A:sympy.utilities.lambdify.symfunc._imp_->staticmethod(implementation)
sympy.lambdify(args,expr,modules=None,printer=None,use_imps=True,dummify=True)
sympy.lambdify._get_namespace(m)
sympy.lambdify._imp_namespace(expr,namespace=None)
sympy.lambdify._import(module,reload='False')
sympy.lambdify._issue_7853_dep_check(namespaces,namespace,expr)
sympy.lambdify.implemented_function(symfunc,implementation)
sympy.lambdify.lambdastr(args,expr,printer=None,dummify=False)
sympy.utilities.lambdify._get_namespace(m)
sympy.utilities.lambdify._imp_namespace(expr,namespace=None)
sympy.utilities.lambdify._import(module,reload='False')
sympy.utilities.lambdify._issue_7853_dep_check(namespaces,namespace,expr)
sympy.utilities.lambdify.implemented_function(symfunc,implementation)
sympy.utilities.lambdify.lambdastr(args,expr,printer=None,dummify=False)
sympy.utilities.lambdify.lambdify(args,expr,modules=None,printer=None,use_imps=True,dummify=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/memoization.py----------------------------------------
A:sympy.utilities.memoization.L->len(cache)
A:sympy.utilities.memoization.F_i0->base_seq(i)
A:sympy.utilities.memoization.F_ij->f(i, j, cache)
sympy.memoization.assoc_recurrence_memo(base_seq)
sympy.memoization.recurrence_memo(initial)
sympy.utilities.memoization.assoc_recurrence_memo(base_seq)
sympy.utilities.memoization.recurrence_memo(initial)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/source.py----------------------------------------
A:sympy.utilities.source.(mod_name, func_name)->get_mod_func(lookup_view)
A:sympy.utilities.source.lookup_view->getattr(__import__(mod_name, {}, {}, ['*']), func_name)
A:sympy.utilities.source.dot->callback.rfind('.')
sympy.source(object)
sympy.source.get_class(lookup_view)
sympy.source.get_mod_func(callback)
sympy.utilities.source.get_class(lookup_view)
sympy.utilities.source.get_mod_func(callback)
sympy.utilities.source.source(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/timeutils.py----------------------------------------
A:sympy.utilities.timeutils.timer->timeit.Timer(func, setup=setup)
A:sympy.utilities.timeutils.order->min(-int(math.floor(math.log10(time)) // 3), 3)
A:sympy.utilities.timeutils.res->os.getenv('SYMPY_TIMINGS', '')
A:sympy.utilities.timeutils._do_timings->__do_timings()
A:sympy.utilities.timeutils.t1->time()
A:sympy.utilities.timeutils.r->func(*args, **kwargs)
A:sympy.utilities.timeutils.t2->time()
sympy.timed(func,setup='pass',limit=None)
sympy.timeutils.__do_timings()
sympy.timeutils._print_timestack(stack,level=1)
sympy.timeutils.timethis(name)
sympy.utilities.timeutils.__do_timings()
sympy.utilities.timeutils._print_timestack(stack,level=1)
sympy.utilities.timeutils.timed(func,setup='pass',limit=None)
sympy.utilities.timeutils.timethis(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/mathml/__init__.py----------------------------------------
A:sympy.utilities.mathml.__init__.s->str(result)
A:sympy.utilities.mathml.__init__.transform->lxml.etree.XSLT(s)
A:sympy.utilities.mathml.__init__.doc->lxml.etree.XML(mml)
A:sympy.utilities.mathml.__init__.result->transform(doc)
A:sympy.utilities.mathml.__init__.mml->add_mathml_headers(mml)
sympy.mathml.__init__.add_mathml_headers(s)
sympy.mathml.__init__.apply_xsl(mml,xsl)
sympy.mathml.__init__.c2p(mml,simple=False)
sympy.utilities.mathml.__init__.add_mathml_headers(s)
sympy.utilities.mathml.__init__.apply_xsl(mml,xsl)
sympy.utilities.mathml.__init__.c2p(mml,simple=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_codegen.py----------------------------------------
A:sympy.utilities.tests.test_codegen.output->StringIO()
A:sympy.utilities.tests.test_codegen.source->get_string(code_gen.dump_f95, [routine])
A:sympy.utilities.tests.test_codegen.(a, x, y, z)->symbols('a x y z')
A:sympy.utilities.tests.test_codegen.r->make_routine('foo', [Equality(y, sin(x)), cos(x)])
A:sympy.utilities.tests.test_codegen.(A, B)->map(IndexedBase, ['A', 'B'])
A:sympy.utilities.tests.test_codegen.m->symbols('m', integer=True)
A:sympy.utilities.tests.test_codegen.i->Idx('i', m)
A:sympy.utilities.tests.test_codegen.expr->Integral(x * y * z, (x, 1, 2), (y, 1, 3))
A:sympy.utilities.tests.test_codegen.code_gen->FCodeGen()
A:sympy.utilities.tests.test_codegen.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen.routine->make_routine('test', expr)
A:sympy.utilities.tests.test_codegen.result->codegen(name_expr, 'f95', 'test', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.x->symbols('x:20')
A:sympy.utilities.tests.test_codegen.(x, y)->symbols('x,y')
A:sympy.utilities.tests.test_codegen.(n, m)->symbols('n m', integer=True)
A:sympy.utilities.tests.test_codegen.A->MatrixSymbol('A', 2, 3)
A:sympy.utilities.tests.test_codegen.y->IndexedBase('y')
A:sympy.utilities.tests.test_codegen.j->Idx('j', n)
A:sympy.utilities.tests.test_codegen.((f1, code), (f2, interface))->codegen(('matrix_vector', Eq(y[i], A[i, j] * x[j])), 'F95', 'file', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.utilities.tests.test_codegen.c->FCodeGen()
A:sympy.utilities.tests.test_codegen.code->get_string(p.dump_f95, [routine])
A:sympy.utilities.tests.test_codegen.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.utilities.tests.test_codegen.(B, C)->symbols('B,C')
A:sympy.utilities.tests.test_codegen.expr1->Equality(A, Matrix([[1, 2, x]]))
A:sympy.utilities.tests.test_codegen.expr2->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen.B->MatrixSymbol('B', 1, 3)
A:sympy.utilities.tests.test_codegen.C->MatrixSymbol('C', 1, 3)
A:sympy.utilities.tests.test_codegen.D->MatrixSymbol('D', 2, 1)
A:sympy.utilities.tests.test_codegen.(A, x, y)->map(IndexedBase, 'Axy')
A:sympy.utilities.tests.test_codegen.(i, j, n, m)->symbols('i,j,n,m', integer=True)
A:sympy.utilities.tests.test_codegen.p->FCodeGen()
A:sympy.utilities.tests.test_codegen.func->implemented_function('func', Lambda(n, n * (n + 1)))
A:sympy.utilities.tests.test_codegen.(x, X)->symbols('x,X')
A:sympy.utilities.tests.test_codegen.x1->symbols('x')
A:sympy.utilities.tests.test_codegen.x2->symbols('x', my_assumption=True)
A:sympy.utilities.tests.test_codegen.expresult->codegen(name_expr, 'C', 'foo', header=False, empty=False)
A:sympy.utilities.tests.test_codegen.e2->Matrix([[x, y], [z, 16]])
A:sympy.utilities.tests.test_codegen.b->a.split('_')
sympy.tests.test_codegen.get_string(dump_fn,routines,prefix='file',header=False,empty=False)
sympy.tests.test_codegen.test_Routine_argument_order()
sympy.tests.test_codegen.test_ansi_math1_codegen()
sympy.tests.test_codegen.test_ansi_math2_codegen()
sympy.tests.test_codegen.test_c_code_argument_order()
sympy.tests.test_codegen.test_c_code_reserved_words()
sympy.tests.test_codegen.test_c_fortran_omit_routine_name()
sympy.tests.test_codegen.test_ccode_matrixsymbol_slice()
sympy.tests.test_codegen.test_ccode_results_named_ordered()
sympy.tests.test_codegen.test_check_case()
sympy.tests.test_codegen.test_check_case_false_positive()
sympy.tests.test_codegen.test_complicated_codegen()
sympy.tests.test_codegen.test_complicated_codegen_f95()
sympy.tests.test_codegen.test_dummy_loops_c()
sympy.tests.test_codegen.test_dummy_loops_f95()
sympy.tests.test_codegen.test_empty_c_code()
sympy.tests.test_codegen.test_empty_c_code_with_comment()
sympy.tests.test_codegen.test_empty_c_header()
sympy.tests.test_codegen.test_empty_f_code()
sympy.tests.test_codegen.test_empty_f_code_with_header()
sympy.tests.test_codegen.test_empty_f_header()
sympy.tests.test_codegen.test_erf_f_code()
sympy.tests.test_codegen.test_f_code_argument_order()
sympy.tests.test_codegen.test_f_code_call_signature_wrap()
sympy.tests.test_codegen.test_fcode_matrix_output()
sympy.tests.test_codegen.test_fcode_matrixsymbol_slice()
sympy.tests.test_codegen.test_fcode_matrixsymbol_slice_autoname()
sympy.tests.test_codegen.test_fcode_results_named_ordered()
sympy.tests.test_codegen.test_inline_function()
sympy.tests.test_codegen.test_intrinsic_math2_codegen()
sympy.tests.test_codegen.test_intrinsic_math_codegen()
sympy.tests.test_codegen.test_loops()
sympy.tests.test_codegen.test_loops_InOut()
sympy.tests.test_codegen.test_loops_c()
sympy.tests.test_codegen.test_multiple_results_c()
sympy.tests.test_codegen.test_multiple_results_f()
sympy.tests.test_codegen.test_no_results_c()
sympy.tests.test_codegen.test_no_results_f()
sympy.tests.test_codegen.test_numbersymbol_c_code()
sympy.tests.test_codegen.test_numbersymbol_f_code()
sympy.tests.test_codegen.test_output_arg_c()
sympy.tests.test_codegen.test_output_arg_c_reserved_words()
sympy.tests.test_codegen.test_output_arg_f()
sympy.tests.test_codegen.test_partial_loops_c()
sympy.tests.test_codegen.test_partial_loops_f()
sympy.tests.test_codegen.test_simple_c_code()
sympy.tests.test_codegen.test_simple_c_codegen()
sympy.tests.test_codegen.test_simple_c_header()
sympy.tests.test_codegen.test_simple_f_code()
sympy.tests.test_codegen.test_simple_f_codegen()
sympy.tests.test_codegen.test_simple_f_header()
sympy.utilities.tests.test_codegen.get_string(dump_fn,routines,prefix='file',header=False,empty=False)
sympy.utilities.tests.test_codegen.test_Routine_argument_order()
sympy.utilities.tests.test_codegen.test_ansi_math1_codegen()
sympy.utilities.tests.test_codegen.test_ansi_math2_codegen()
sympy.utilities.tests.test_codegen.test_c_code_argument_order()
sympy.utilities.tests.test_codegen.test_c_code_reserved_words()
sympy.utilities.tests.test_codegen.test_c_fortran_omit_routine_name()
sympy.utilities.tests.test_codegen.test_ccode_matrixsymbol_slice()
sympy.utilities.tests.test_codegen.test_ccode_results_named_ordered()
sympy.utilities.tests.test_codegen.test_check_case()
sympy.utilities.tests.test_codegen.test_check_case_false_positive()
sympy.utilities.tests.test_codegen.test_complicated_codegen()
sympy.utilities.tests.test_codegen.test_complicated_codegen_f95()
sympy.utilities.tests.test_codegen.test_dummy_loops_c()
sympy.utilities.tests.test_codegen.test_dummy_loops_f95()
sympy.utilities.tests.test_codegen.test_empty_c_code()
sympy.utilities.tests.test_codegen.test_empty_c_code_with_comment()
sympy.utilities.tests.test_codegen.test_empty_c_header()
sympy.utilities.tests.test_codegen.test_empty_f_code()
sympy.utilities.tests.test_codegen.test_empty_f_code_with_header()
sympy.utilities.tests.test_codegen.test_empty_f_header()
sympy.utilities.tests.test_codegen.test_erf_f_code()
sympy.utilities.tests.test_codegen.test_f_code_argument_order()
sympy.utilities.tests.test_codegen.test_f_code_call_signature_wrap()
sympy.utilities.tests.test_codegen.test_fcode_matrix_output()
sympy.utilities.tests.test_codegen.test_fcode_matrixsymbol_slice()
sympy.utilities.tests.test_codegen.test_fcode_matrixsymbol_slice_autoname()
sympy.utilities.tests.test_codegen.test_fcode_results_named_ordered()
sympy.utilities.tests.test_codegen.test_inline_function()
sympy.utilities.tests.test_codegen.test_intrinsic_math2_codegen()
sympy.utilities.tests.test_codegen.test_intrinsic_math_codegen()
sympy.utilities.tests.test_codegen.test_loops()
sympy.utilities.tests.test_codegen.test_loops_InOut()
sympy.utilities.tests.test_codegen.test_loops_c()
sympy.utilities.tests.test_codegen.test_multiple_results_c()
sympy.utilities.tests.test_codegen.test_multiple_results_f()
sympy.utilities.tests.test_codegen.test_no_results_c()
sympy.utilities.tests.test_codegen.test_no_results_f()
sympy.utilities.tests.test_codegen.test_numbersymbol_c_code()
sympy.utilities.tests.test_codegen.test_numbersymbol_f_code()
sympy.utilities.tests.test_codegen.test_output_arg_c()
sympy.utilities.tests.test_codegen.test_output_arg_c_reserved_words()
sympy.utilities.tests.test_codegen.test_output_arg_f()
sympy.utilities.tests.test_codegen.test_partial_loops_c()
sympy.utilities.tests.test_codegen.test_partial_loops_f()
sympy.utilities.tests.test_codegen.test_simple_c_code()
sympy.utilities.tests.test_codegen.test_simple_c_codegen()
sympy.utilities.tests.test_codegen.test_simple_c_header()
sympy.utilities.tests.test_codegen.test_simple_f_code()
sympy.utilities.tests.test_codegen.test_simple_f_codegen()
sympy.utilities.tests.test_codegen.test_simple_f_header()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_code_quality.py----------------------------------------
A:sympy.utilities.tests.test_code_quality.SYMPY_PATH->abspath(join(split(__file__)[0], pardir, pardir))
A:sympy.utilities.tests.test_code_quality.TOP_PATH->abspath(join(SYMPY_PATH, pardir))
A:sympy.utilities.tests.test_code_quality.BIN_PATH->join(TOP_PATH, 'bin')
A:sympy.utilities.tests.test_code_quality.EXAMPLES_PATH->join(TOP_PATH, 'examples')
A:sympy.utilities.tests.test_code_quality.implicit_test_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?from .* import .*\\*')
A:sympy.utilities.tests.test_code_quality.str_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise(\\s+(\\\'|\\")|\\s*(\\(\\s*)+(\\\'|\\"))')
A:sympy.utilities.tests.test_code_quality.gen_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise(\\s+Exception|\\s*(\\(\\s*)+Exception)')
A:sympy.utilities.tests.test_code_quality.old_raise_re->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise((\\s*\\(\\s*)|\\s+)\\w+\\s*,')
A:sympy.utilities.tests.test_code_quality.test_suite_def_re->re.compile('^def\\s+(?!(_|test))[^(]*\\(\\s*\\)\\s*:$')
A:sympy.utilities.tests.test_code_quality.test_ok_def_re->re.compile('^def\\s+test_.*:$')
A:sympy.utilities.tests.test_code_quality.test_file_re->re.compile('.*test_.*\\.py$')
A:sympy.utilities.tests.test_code_quality.test_set->set()
A:sympy.utilities.tests.test_code_quality.result->re.compile('^\\s*(>>> )?(\\.\\.\\. )?raise((\\s*\\(\\s*)|\\s+)\\w+\\s*,').search(line)
A:sympy.utilities.tests.test_code_quality.exclude->set(['%(sep)smpmath%(sep)s' % sepd])
A:sympy.utilities.tests.test_code_quality.import_exclude->set(['%(sep)ssympy%(sep)s__init__.py' % sepd, '%(sep)svector%(sep)s__init__.py' % sepd, '%(sep)smechanics%(sep)s__init__.py' % sepd, '%(sep)squantum%(sep)s__init__.py' % sepd, '%(sep)spolys%(sep)s__init__.py' % sepd, '%(sep)spolys%(sep)sdomains%(sep)s__init__.py' % sepd, '%(sep)sinteractive%(sep)ssession.py' % sepd, '%(sep)sbin%(sep)sisympy' % sepd, '%(sep)sbin%(sep)ssympy_time.py' % sepd, '%(sep)sbin%(sep)ssympy_time_cache.py' % sepd, '%(sep)sparsing%(sep)ssympy_tokenize.py' % sepd, '%(sep)splotting%(sep)spygletplot%(sep)s' % sepd])
sympy.tests.test_code_quality._with_space(c)
sympy.tests.test_code_quality.check_directory_tree(base_path,file_check,exclusions=set(),pattern='*.py')
sympy.tests.test_code_quality.check_files(files,file_check,exclusions=set(),pattern=None)
sympy.tests.test_code_quality.tab_in_leading(s)
sympy.tests.test_code_quality.test_files()
sympy.tests.test_code_quality.test_implicit_imports_regular_expression()
sympy.tests.test_code_quality.test_raise_statement_regular_expression()
sympy.tests.test_code_quality.test_test_duplicate_defs()
sympy.tests.test_code_quality.test_test_suite_defs()
sympy.utilities.tests.test_code_quality._with_space(c)
sympy.utilities.tests.test_code_quality.check_directory_tree(base_path,file_check,exclusions=set(),pattern='*.py')
sympy.utilities.tests.test_code_quality.check_files(files,file_check,exclusions=set(),pattern=None)
sympy.utilities.tests.test_code_quality.tab_in_leading(s)
sympy.utilities.tests.test_code_quality.test_files()
sympy.utilities.tests.test_code_quality.test_implicit_imports_regular_expression()
sympy.utilities.tests.test_code_quality.test_raise_statement_regular_expression()
sympy.utilities.tests.test_code_quality.test_test_duplicate_defs()
sympy.utilities.tests.test_code_quality.test_test_suite_defs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_pytest.py----------------------------------------
A:sympy.utilities.tests.test_pytest.pytestmark->py.test.mark.skipif(USE_PYTEST, reason='using py.test')
sympy.tests.test_pytest.test_expected_exception_is_silent_callable()
sympy.tests.test_pytest.test_expected_exception_is_silent_with()
sympy.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_callable()
sympy.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_with()
sympy.tests.test_pytest.test_second_argument_should_be_callable_or_string()
sympy.tests.test_pytest.test_unexpected_exception_is_passed_through_callable()
sympy.tests.test_pytest.test_unexpected_exception_is_passed_through_with()
sympy.utilities.tests.test_pytest.test_expected_exception_is_silent_callable()
sympy.utilities.tests.test_pytest.test_expected_exception_is_silent_with()
sympy.utilities.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_callable()
sympy.utilities.tests.test_pytest.test_lack_of_exception_triggers_AssertionError_with()
sympy.utilities.tests.test_pytest.test_second_argument_should_be_callable_or_string()
sympy.utilities.tests.test_pytest.test_unexpected_exception_is_passed_through_callable()
sympy.utilities.tests.test_pytest.test_unexpected_exception_is_passed_through_with()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_lambdify.py----------------------------------------
A:sympy.utilities.tests.test_lambdify.numpy->import_module('numpy')
A:sympy.utilities.tests.test_lambdify.numexpr->import_module('numexpr')
A:sympy.utilities.tests.test_lambdify.(w, x, y, z)->symbols('w,x,y,z')
A:sympy.utilities.tests.test_lambdify.f->lambdify(python_if, expr)
A:sympy.utilities.tests.test_lambdify.sin02->sympy.mpmath.mpf('0.19866933079506121545941262711838975037020672954020')
A:sympy.utilities.tests.test_lambdify.ssym->S(sym)
A:sympy.utilities.tests.test_lambdify.d->f(3.14159)
A:sympy.utilities.tests.test_lambdify.A->Matrix([[x, x * y], [sin(z) + 4, x ** z]])
A:sympy.utilities.tests.test_lambdify.sol->Matrix([[1, 0], [1, 1]])
A:sympy.utilities.tests.test_lambdify.J->Matrix((x, x + y)).jacobian((x, y))
A:sympy.utilities.tests.test_lambdify.v->Matrix((x, y))
A:sympy.utilities.tests.test_lambdify.sol_arr->import_module('numpy').array([[1, 2], [numpy.sin(3) + 4, 1]])
A:sympy.utilities.tests.test_lambdify.(a, b, c)->import_module('numpy').random.randn(3, 128, 128)
A:sympy.utilities.tests.test_lambdify.npfunc->lambdify((x, y, z), expr, modules='numpy')
A:sympy.utilities.tests.test_lambdify.nefunc->lambdify((x, y, z), expr, modules='numexpr')
A:sympy.utilities.tests.test_lambdify.(a, b)->import_module('numpy').random.randn(2, 10)
A:sympy.utilities.tests.test_lambdify.uf->implemented_function(Function('uf'), lambda x, y: 2 * x * y + 1)
A:sympy.utilities.tests.test_lambdify.func->lambdify(syms, sum(syms))
A:sympy.utilities.tests.test_lambdify.l->lambdify(x, Integral(f(x), (x, -oo, oo)), modules='sympy')
A:sympy.utilities.tests.test_lambdify.g->implemented_function('f', lambda x: math.sqrt(x))
A:sympy.utilities.tests.test_lambdify.if1->lambdify(x, f(x), modules=(n1, 'sympy'))
A:sympy.utilities.tests.test_lambdify.if2->lambdify(x, g(x), modules=(n2, 'sympy'))
A:sympy.utilities.tests.test_lambdify.l1->lambdify(x, f(x))
A:sympy.utilities.tests.test_lambdify.l2->lambdify(x, g(x))
A:sympy.utilities.tests.test_lambdify.my_f->implemented_function(func, lambda x: 2 * x)
A:sympy.utilities.tests.test_lambdify.f2->implemented_function('f', lambda x: x + 101)
A:sympy.utilities.tests.test_lambdify.lam->lambdify((alpha, t), 2 * alpha + t)
A:sympy.utilities.tests.test_lambdify.t->symbols('t')
A:sympy.utilities.tests.test_lambdify.F->Function('F')
A:sympy.utilities.tests.test_lambdify.G->Function('G')
A:sympy.utilities.tests.test_lambdify.alpha->symbols('\\alpha')
A:sympy.utilities.tests.test_lambdify.python_if->symbols('if')
A:sympy.utilities.tests.test_lambdify.syms->symbols('a1:26')
A:sympy.utilities.tests.test_lambdify.func0->lambdify((), expr, modules='mpmath', printer=intervalrepr)
A:sympy.utilities.tests.test_lambdify.func1->lambdify((), expr, modules='mpmath', printer=IntervalPrinter)
A:sympy.utilities.tests.test_lambdify.func2->lambdify((), expr, modules='mpmath', printer=IntervalPrinter())
A:sympy.utilities.tests.test_lambdify.mpi->type(mpmath.mpi(1, 2))
sympy.tests.test_lambdify.test_atoms()
sympy.tests.test_lambdify.test_bad_args()
sympy.tests.test_lambdify.test_docs()
sympy.tests.test_lambdify.test_dummification()
sympy.tests.test_lambdify.test_exponentiation()
sympy.tests.test_lambdify.test_imps()
sympy.tests.test_lambdify.test_imps_wrong_args()
sympy.tests.test_lambdify.test_integral()
sympy.tests.test_lambdify.test_issue_2790()
sympy.tests.test_lambdify.test_lambdify_docstring()
sympy.tests.test_lambdify.test_lambdify_imps()
sympy.tests.test_lambdify.test_list_args()
sympy.tests.test_lambdify.test_math()
sympy.tests.test_lambdify.test_math_lambda()
sympy.tests.test_lambdify.test_math_transl()
sympy.tests.test_lambdify.test_matrix()
sympy.tests.test_lambdify.test_mpmath_lambda()
sympy.tests.test_lambdify.test_mpmath_transl()
sympy.tests.test_lambdify.test_namespace_order()
sympy.tests.test_lambdify.test_no_args()
sympy.tests.test_lambdify.test_number_precision()
sympy.tests.test_lambdify.test_numexpr_printer()
sympy.tests.test_lambdify.test_numexpr_userfunctions()
sympy.tests.test_lambdify.test_numpy_matrix()
sympy.tests.test_lambdify.test_numpy_numexpr()
sympy.tests.test_lambdify.test_numpy_transl()
sympy.tests.test_lambdify.test_numpy_translation_abs()
sympy.tests.test_lambdify.test_own_module()
sympy.tests.test_lambdify.test_own_namespace()
sympy.tests.test_lambdify.test_python_keywords()
sympy.tests.test_lambdify.test_sin()
sympy.tests.test_lambdify.test_single_arg()
sympy.tests.test_lambdify.test_special_printers()
sympy.tests.test_lambdify.test_sqrt()
sympy.tests.test_lambdify.test_str_args()
sympy.tests.test_lambdify.test_sym_integral()
sympy.tests.test_lambdify.test_sym_list_args()
sympy.tests.test_lambdify.test_sym_single_arg()
sympy.tests.test_lambdify.test_sympy_lambda()
sympy.tests.test_lambdify.test_trig()
sympy.tests.test_lambdify.test_trig_float()
sympy.tests.test_lambdify.test_trig_symbolic()
sympy.tests.test_lambdify.test_true_false()
sympy.tests.test_lambdify.test_vector_discontinuous()
sympy.tests.test_lambdify.test_vector_simple()
sympy.utilities.tests.test_lambdify.test_atoms()
sympy.utilities.tests.test_lambdify.test_bad_args()
sympy.utilities.tests.test_lambdify.test_docs()
sympy.utilities.tests.test_lambdify.test_dummification()
sympy.utilities.tests.test_lambdify.test_exponentiation()
sympy.utilities.tests.test_lambdify.test_imps()
sympy.utilities.tests.test_lambdify.test_imps_wrong_args()
sympy.utilities.tests.test_lambdify.test_integral()
sympy.utilities.tests.test_lambdify.test_issue_2790()
sympy.utilities.tests.test_lambdify.test_lambdify_docstring()
sympy.utilities.tests.test_lambdify.test_lambdify_imps()
sympy.utilities.tests.test_lambdify.test_list_args()
sympy.utilities.tests.test_lambdify.test_math()
sympy.utilities.tests.test_lambdify.test_math_lambda()
sympy.utilities.tests.test_lambdify.test_math_transl()
sympy.utilities.tests.test_lambdify.test_matrix()
sympy.utilities.tests.test_lambdify.test_mpmath_lambda()
sympy.utilities.tests.test_lambdify.test_mpmath_transl()
sympy.utilities.tests.test_lambdify.test_namespace_order()
sympy.utilities.tests.test_lambdify.test_no_args()
sympy.utilities.tests.test_lambdify.test_number_precision()
sympy.utilities.tests.test_lambdify.test_numexpr_printer()
sympy.utilities.tests.test_lambdify.test_numexpr_userfunctions()
sympy.utilities.tests.test_lambdify.test_numpy_matrix()
sympy.utilities.tests.test_lambdify.test_numpy_numexpr()
sympy.utilities.tests.test_lambdify.test_numpy_transl()
sympy.utilities.tests.test_lambdify.test_numpy_translation_abs()
sympy.utilities.tests.test_lambdify.test_own_module()
sympy.utilities.tests.test_lambdify.test_own_namespace()
sympy.utilities.tests.test_lambdify.test_python_keywords()
sympy.utilities.tests.test_lambdify.test_sin()
sympy.utilities.tests.test_lambdify.test_single_arg()
sympy.utilities.tests.test_lambdify.test_special_printers()
sympy.utilities.tests.test_lambdify.test_sqrt()
sympy.utilities.tests.test_lambdify.test_str_args()
sympy.utilities.tests.test_lambdify.test_sym_integral()
sympy.utilities.tests.test_lambdify.test_sym_list_args()
sympy.utilities.tests.test_lambdify.test_sym_single_arg()
sympy.utilities.tests.test_lambdify.test_sympy_lambda()
sympy.utilities.tests.test_lambdify.test_trig()
sympy.utilities.tests.test_lambdify.test_trig_float()
sympy.utilities.tests.test_lambdify.test_trig_symbolic()
sympy.utilities.tests.test_lambdify.test_true_false()
sympy.utilities.tests.test_lambdify.test_vector_discontinuous()
sympy.utilities.tests.test_lambdify.test_vector_simple()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_module_imports.py----------------------------------------
A:sympy.utilities.tests.test_module_imports.my_filename->abspath(inspect.getfile(inspect.currentframe()))
A:sympy.utilities.tests.test_module_imports.my_dirname->dirname(my_filename)
A:sympy.utilities.tests.test_module_imports.diagnose_imports_filename->normpath(diagnose_imports_filename)
A:sympy.utilities.tests.test_module_imports.process->subprocess.Popen([sys.executable, normpath(diagnose_imports_filename), '--problems', '--by-importer'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1)
A:sympy.utilities.tests.test_module_imports.(output, _)->subprocess.Popen([sys.executable, normpath(diagnose_imports_filename), '--problems', '--by-importer'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1).communicate()
sympy.tests.test_module_imports.test_module_imports_are_direct()
sympy.utilities.tests.test_module_imports.test_module_imports_are_direct()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_source.py----------------------------------------
A:sympy.utilities.tests.test_source._basic->get_class('sympy.core.basic.Basic')
sympy.tests.test_source.test_get_class()
sympy.tests.test_source.test_get_mod_func()
sympy.utilities.tests.test_source.test_get_class()
sympy.utilities.tests.test_source.test_get_mod_func()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_timeutils.py----------------------------------------
A:sympy.utilities.tests.test_timeutils.result->timed('1 + 1', limit=100000)
sympy.tests.test_timeutils.test_timed()
sympy.utilities.tests.test_timeutils.test_timed()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_autowrap.py----------------------------------------
A:sympy.utilities.tests.test_autowrap.output->StringIO()
A:sympy.utilities.tests.test_autowrap.source->get_string(code_wrapper.dump_c, [routine])
A:sympy.utilities.tests.test_autowrap.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_autowrap.routine->make_routine('test', x + y + z)
A:sympy.utilities.tests.test_autowrap.code_gen->CythonCodeWrapper(CCodeGen())
A:sympy.utilities.tests.test_autowrap.f->binary_function('f', x + y, backend='dummy')
A:sympy.utilities.tests.test_autowrap.(x, y)->symbols('x y')
A:sympy.utilities.tests.test_autowrap.tmp->tempfile.mkdtemp()
A:sympy.utilities.tests.test_autowrap.code_wrapper->UfuncifyCodeWrapper(CCodeGen('ufuncify'))
sympy.tests.test_autowrap.get_string(dump_fn,routines,prefix='file')
sympy.tests.test_autowrap.test_autowrap_args()
sympy.tests.test_autowrap.test_autowrap_dummy()
sympy.tests.test_autowrap.test_autowrap_store_files()
sympy.tests.test_autowrap.test_binary_function()
sympy.tests.test_autowrap.test_cython_wrapper_inoutarg()
sympy.tests.test_autowrap.test_cython_wrapper_outarg()
sympy.tests.test_autowrap.test_cython_wrapper_scalar_function()
sympy.tests.test_autowrap.test_ufuncify_source()
sympy.utilities.tests.test_autowrap.get_string(dump_fn,routines,prefix='file')
sympy.utilities.tests.test_autowrap.test_autowrap_args()
sympy.utilities.tests.test_autowrap.test_autowrap_dummy()
sympy.utilities.tests.test_autowrap.test_autowrap_store_files()
sympy.utilities.tests.test_autowrap.test_binary_function()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_inoutarg()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_outarg()
sympy.utilities.tests.test_autowrap.test_cython_wrapper_scalar_function()
sympy.utilities.tests.test_autowrap.test_ufuncify_source()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_iterables.py----------------------------------------
A:sympy.utilities.tests.test_iterables.(w, x, y, z)->symbols('w,x,y,z')
A:sympy.utilities.tests.test_iterables.expr->Piecewise((x, x < 1), (x ** 2, True))
A:sympy.utilities.tests.test_iterables.l->list(range(4))
A:sympy.utilities.tests.test_iterables.s->numbered_symbols(cls=Dummy)
A:sympy.utilities.tests.test_iterables.filtered->filter_symbols(s, symbols('x0 x2 x3'))
A:sympy.utilities.tests.test_iterables.X->numbered_symbols()
A:sympy.utilities.tests.test_iterables.B->rotate_left(A, 1)
A:sympy.utilities.tests.test_iterables.M->multiset('mississippi')
A:sympy.utilities.tests.test_iterables.p->p.next_trotterjohnson().next_trotterjohnson()
A:sympy.utilities.tests.test_iterables.b->generate_bell(n)
A:sympy.utilities.tests.test_iterables.i->list(generate_involutions(n + 1))
A:sympy.utilities.tests.test_iterables.r->list(range(10))
A:sympy.utilities.tests.test_iterables.seq->list(range(1, 9))
sympy.tests.test_iterables.test__partition()
sympy.tests.test_iterables.test_bell_perm()
sympy.tests.test_iterables.test_binary_partitions()
sympy.tests.test_iterables.test_bracelets()
sympy.tests.test_iterables.test_cartes()
sympy.tests.test_iterables.test_common_prefix_suffix()
sympy.tests.test_iterables.test_derangements()
sympy.tests.test_iterables.test_dict_merge()
sympy.tests.test_iterables.test_filter_symbols()
sympy.tests.test_iterables.test_flatten()
sympy.tests.test_iterables.test_generate_oriented_forest()
sympy.tests.test_iterables.test_group()
sympy.tests.test_iterables.test_has_dups()
sympy.tests.test_iterables.test_involutions()
sympy.tests.test_iterables.test_kbins()
sympy.tests.test_iterables.test_minlex()
sympy.tests.test_iterables.test_multiset_combinations()
sympy.tests.test_iterables.test_multiset_partitions()
sympy.tests.test_iterables.test_multiset_permutations()
sympy.tests.test_iterables.test_necklaces()
sympy.tests.test_iterables.test_numbered_symbols()
sympy.tests.test_iterables.test_ordered()
sympy.tests.test_iterables.test_partitions()
sympy.tests.test_iterables.test_postfixes()
sympy.tests.test_iterables.test_postorder_traversal()
sympy.tests.test_iterables.test_prefixes()
sympy.tests.test_iterables.test_reshape()
sympy.tests.test_iterables.test_rotate()
sympy.tests.test_iterables.test_runs()
sympy.tests.test_iterables.test_sift()
sympy.tests.test_iterables.test_subsets()
sympy.tests.test_iterables.test_take()
sympy.tests.test_iterables.test_topological_sort()
sympy.tests.test_iterables.test_unflatten()
sympy.tests.test_iterables.test_uniq()
sympy.tests.test_iterables.test_variations()
sympy.utilities.tests.test_iterables.test__partition()
sympy.utilities.tests.test_iterables.test_bell_perm()
sympy.utilities.tests.test_iterables.test_binary_partitions()
sympy.utilities.tests.test_iterables.test_bracelets()
sympy.utilities.tests.test_iterables.test_cartes()
sympy.utilities.tests.test_iterables.test_common_prefix_suffix()
sympy.utilities.tests.test_iterables.test_derangements()
sympy.utilities.tests.test_iterables.test_dict_merge()
sympy.utilities.tests.test_iterables.test_filter_symbols()
sympy.utilities.tests.test_iterables.test_flatten()
sympy.utilities.tests.test_iterables.test_generate_oriented_forest()
sympy.utilities.tests.test_iterables.test_group()
sympy.utilities.tests.test_iterables.test_has_dups()
sympy.utilities.tests.test_iterables.test_involutions()
sympy.utilities.tests.test_iterables.test_kbins()
sympy.utilities.tests.test_iterables.test_minlex()
sympy.utilities.tests.test_iterables.test_multiset_combinations()
sympy.utilities.tests.test_iterables.test_multiset_partitions()
sympy.utilities.tests.test_iterables.test_multiset_permutations()
sympy.utilities.tests.test_iterables.test_necklaces()
sympy.utilities.tests.test_iterables.test_numbered_symbols()
sympy.utilities.tests.test_iterables.test_ordered()
sympy.utilities.tests.test_iterables.test_partitions()
sympy.utilities.tests.test_iterables.test_postfixes()
sympy.utilities.tests.test_iterables.test_postorder_traversal()
sympy.utilities.tests.test_iterables.test_prefixes()
sympy.utilities.tests.test_iterables.test_reshape()
sympy.utilities.tests.test_iterables.test_rotate()
sympy.utilities.tests.test_iterables.test_runs()
sympy.utilities.tests.test_iterables.test_sift()
sympy.utilities.tests.test_iterables.test_subsets()
sympy.utilities.tests.test_iterables.test_take()
sympy.utilities.tests.test_iterables.test_topological_sort()
sympy.utilities.tests.test_iterables.test_unflatten()
sympy.utilities.tests.test_iterables.test_uniq()
sympy.utilities.tests.test_iterables.test_variations()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_codegen_octave.py----------------------------------------
A:sympy.utilities.tests.test_codegen_octave.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_codegen_octave.code_gen->OctaveCodeGen()
A:sympy.utilities.tests.test_codegen_octave.output->StringIO()
A:sympy.utilities.tests.test_codegen_octave.source->StringIO().getvalue()
A:sympy.utilities.tests.test_codegen_octave.(result,)->codegen(name_expr, 'Octave', header=False, empty=False)
A:sympy.utilities.tests.test_codegen_octave.expr->Equality(x, x ** 2 + y)
A:sympy.utilities.tests.test_codegen_octave.routine->make_routine('test', expr, argument_sequence=[z, x, y], language='octave')
A:sympy.utilities.tests.test_codegen_octave.(A, B, C)->symbols('A,B,C')
A:sympy.utilities.tests.test_codegen_octave.expr1->Equality(C, (x + y) * z)
A:sympy.utilities.tests.test_codegen_octave.expr2->Equality(A, Matrix([[1, 2, x]]))
A:sympy.utilities.tests.test_codegen_octave.expr3->Equality(B, 2 * x)
A:sympy.utilities.tests.test_codegen_octave.result->codegen(name_expr, 'Octave', header=False, empty=False)
A:sympy.utilities.tests.test_codegen_octave.a->symbols('a')
A:sympy.utilities.tests.test_codegen_octave.pw->Piecewise((0, x < -1), (x ** 2, x <= 1), (-x + 2, x > 1), (1, True))
A:sympy.utilities.tests.test_codegen_octave.e2->Matrix([[2 * x, 2 * y, 2 * z]])
A:sympy.utilities.tests.test_codegen_octave.myout1->MatrixSymbol('myout1', 1, 3)
A:sympy.utilities.tests.test_codegen_octave.e3->Matrix([[x], [y], [z]])
A:sympy.utilities.tests.test_codegen_octave.e4->Matrix([[x, y], [z, 16]])
A:sympy.utilities.tests.test_codegen_octave.(B, C)->symbols('B,C')
A:sympy.utilities.tests.test_codegen_octave.A->IndexedBase('A')
A:sympy.utilities.tests.test_codegen_octave.B->IndexedBase('B')
A:sympy.utilities.tests.test_codegen_octave.C->MatrixSymbol('C', 4, 2)
A:sympy.utilities.tests.test_codegen_octave.D->MatrixSymbol('D', 2, 1)
A:sympy.utilities.tests.test_codegen_octave.(n, m)->symbols('n m', integer=True)
A:sympy.utilities.tests.test_codegen_octave.x->IndexedBase('x')
A:sympy.utilities.tests.test_codegen_octave.y->IndexedBase('y')
A:sympy.utilities.tests.test_codegen_octave.i->Idx('i', m)
A:sympy.utilities.tests.test_codegen_octave.j->Idx('j', n)
A:sympy.utilities.tests.test_codegen_octave.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.utilities.tests.test_codegen_octave.k->Idx('k', o)
A:sympy.utilities.tests.test_codegen_octave.l->Idx('l', p)
A:sympy.utilities.tests.test_codegen_octave.f->Function('f')
sympy.tests.test_codegen_octave.test_complicated_m_codegen()
sympy.tests.test_codegen_octave.test_empty_m_code()
sympy.tests.test_codegen_octave.test_m_InOutArgument()
sympy.tests.test_codegen_octave.test_m_InOutArgument_order()
sympy.tests.test_codegen_octave.test_m_code_argument_order()
sympy.tests.test_codegen_octave.test_m_filename_match_first_fcn()
sympy.tests.test_codegen_octave.test_m_loops()
sympy.tests.test_codegen_octave.test_m_matrix_named()
sympy.tests.test_codegen_octave.test_m_matrix_named_matsym()
sympy.tests.test_codegen_octave.test_m_matrix_output_autoname()
sympy.tests.test_codegen_octave.test_m_matrix_output_autoname_2()
sympy.tests.test_codegen_octave.test_m_matrixsymbol_slice()
sympy.tests.test_codegen_octave.test_m_matrixsymbol_slice2()
sympy.tests.test_codegen_octave.test_m_matrixsymbol_slice3()
sympy.tests.test_codegen_octave.test_m_matrixsymbol_slice_autoname()
sympy.tests.test_codegen_octave.test_m_multifcns_per_file()
sympy.tests.test_codegen_octave.test_m_multifcns_per_file_w_header()
sympy.tests.test_codegen_octave.test_m_not_supported()
sympy.tests.test_codegen_octave.test_m_numbersymbol()
sympy.tests.test_codegen_octave.test_m_numbersymbol_no_inline()
sympy.tests.test_codegen_octave.test_m_output_arg_mixed_unordered()
sympy.tests.test_codegen_octave.test_m_piecewise_()
sympy.tests.test_codegen_octave.test_m_piecewise_no_inline()
sympy.tests.test_codegen_octave.test_m_results_matrix_named_ordered()
sympy.tests.test_codegen_octave.test_m_simple_code()
sympy.tests.test_codegen_octave.test_m_simple_code_nameout()
sympy.tests.test_codegen_octave.test_m_simple_code_with_header()
sympy.tests.test_codegen_octave.test_m_tensor_loops_multiple_contractions()
sympy.tests.test_codegen_octave.test_multiple_results_m()
sympy.tests.test_codegen_octave.test_results_named_ordered()
sympy.tests.test_codegen_octave.test_results_named_unordered()
sympy.utilities.tests.test_codegen_octave.test_complicated_m_codegen()
sympy.utilities.tests.test_codegen_octave.test_empty_m_code()
sympy.utilities.tests.test_codegen_octave.test_m_InOutArgument()
sympy.utilities.tests.test_codegen_octave.test_m_InOutArgument_order()
sympy.utilities.tests.test_codegen_octave.test_m_code_argument_order()
sympy.utilities.tests.test_codegen_octave.test_m_filename_match_first_fcn()
sympy.utilities.tests.test_codegen_octave.test_m_loops()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_named()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_named_matsym()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_output_autoname()
sympy.utilities.tests.test_codegen_octave.test_m_matrix_output_autoname_2()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice2()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice3()
sympy.utilities.tests.test_codegen_octave.test_m_matrixsymbol_slice_autoname()
sympy.utilities.tests.test_codegen_octave.test_m_multifcns_per_file()
sympy.utilities.tests.test_codegen_octave.test_m_multifcns_per_file_w_header()
sympy.utilities.tests.test_codegen_octave.test_m_not_supported()
sympy.utilities.tests.test_codegen_octave.test_m_numbersymbol()
sympy.utilities.tests.test_codegen_octave.test_m_numbersymbol_no_inline()
sympy.utilities.tests.test_codegen_octave.test_m_output_arg_mixed_unordered()
sympy.utilities.tests.test_codegen_octave.test_m_piecewise_()
sympy.utilities.tests.test_codegen_octave.test_m_piecewise_no_inline()
sympy.utilities.tests.test_codegen_octave.test_m_results_matrix_named_ordered()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code_nameout()
sympy.utilities.tests.test_codegen_octave.test_m_simple_code_with_header()
sympy.utilities.tests.test_codegen_octave.test_m_tensor_loops_multiple_contractions()
sympy.utilities.tests.test_codegen_octave.test_multiple_results_m()
sympy.utilities.tests.test_codegen_octave.test_results_named_ordered()
sympy.utilities.tests.test_codegen_octave.test_results_named_unordered()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_pickling.py----------------------------------------
A:sympy.utilities.tests.test_pickling.excluded_attrs->set(['_assumptions', '_mhash'])
A:sympy.utilities.tests.test_pickling.b->pickle.loads(pickle.dumps(a, protocol))
A:sympy.utilities.tests.test_pickling.d1->dir(a)
A:sympy.utilities.tests.test_pickling.d2->dir(b)
A:sympy.utilities.tests.test_pickling.attr->getattr(a, i)
A:sympy.utilities.tests.test_pickling.x->Symbol('x')
A:sympy.utilities.tests.test_pickling.y->Symbol('y')
A:sympy.utilities.tests.test_pickling.f->Function('f')
A:sympy.utilities.tests.test_pickling.(x, y, z)->symbols('x,y,z')
A:sympy.utilities.tests.test_pickling.c->cls(x, y)
A:sympy.utilities.tests.test_pickling.p1->Point(1, 2)
A:sympy.utilities.tests.test_pickling.p2->Point(2, 3)
A:sympy.utilities.tests.test_pickling.p3->Point(0, 0)
A:sympy.utilities.tests.test_pickling.p4->Point(0, 1)
A:sympy.utilities.tests.test_pickling.ring->PolyRing('x,y,z', ZZ, lex)
A:sympy.utilities.tests.test_pickling.field->FracField('x,y,z', ZZ, lex)
A:sympy.utilities.tests.test_pickling.gf->PythonFiniteField(17)
A:sympy.utilities.tests.test_pickling.mp->MPContext()
A:sympy.utilities.tests.test_pickling.e->Symbol('e')
sympy.tests.test_pickling.check(a,exclude=[],check_attr=True)
sympy.tests.test_pickling.test_Singletons()
sympy.tests.test_pickling.test_concrete()
sympy.tests.test_pickling.test_core_add()
sympy.tests.test_pickling.test_core_basic()
sympy.tests.test_pickling.test_core_dynamicfunctions()
sympy.tests.test_pickling.test_core_function()
sympy.tests.test_pickling.test_core_interval()
sympy.tests.test_pickling.test_core_mul()
sympy.tests.test_pickling.test_core_multidimensional()
sympy.tests.test_pickling.test_core_numbers()
sympy.tests.test_pickling.test_core_power()
sympy.tests.test_pickling.test_core_relational()
sympy.tests.test_pickling.test_core_symbol()
sympy.tests.test_pickling.test_functions()
sympy.tests.test_pickling.test_geometry()
sympy.tests.test_pickling.test_integrals()
sympy.tests.test_pickling.test_logic()
sympy.tests.test_pickling.test_matrices()
sympy.tests.test_pickling.test_ntheory()
sympy.tests.test_pickling.test_physics()
sympy.tests.test_pickling.test_pickling_polys_domains()
sympy.tests.test_pickling.test_pickling_polys_elements()
sympy.tests.test_pickling.test_pickling_polys_errors()
sympy.tests.test_pickling.test_pickling_polys_fields()
sympy.tests.test_pickling.test_pickling_polys_monomials()
sympy.tests.test_pickling.test_pickling_polys_numberfields()
sympy.tests.test_pickling.test_pickling_polys_options()
sympy.tests.test_pickling.test_pickling_polys_orderings()
sympy.tests.test_pickling.test_pickling_polys_polyclasses()
sympy.tests.test_pickling.test_pickling_polys_polytools()
sympy.tests.test_pickling.test_pickling_polys_rings()
sympy.tests.test_pickling.test_pickling_polys_rootoftools()
sympy.tests.test_pickling.test_plotting()
sympy.tests.test_pickling.test_plotting2()
sympy.tests.test_pickling.test_printing()
sympy.tests.test_pickling.test_printing1()
sympy.tests.test_pickling.test_printing2()
sympy.tests.test_pickling.test_series()
sympy.utilities.tests.test_pickling.check(a,exclude=[],check_attr=True)
sympy.utilities.tests.test_pickling.test_Singletons()
sympy.utilities.tests.test_pickling.test_concrete()
sympy.utilities.tests.test_pickling.test_core_add()
sympy.utilities.tests.test_pickling.test_core_basic()
sympy.utilities.tests.test_pickling.test_core_dynamicfunctions()
sympy.utilities.tests.test_pickling.test_core_function()
sympy.utilities.tests.test_pickling.test_core_interval()
sympy.utilities.tests.test_pickling.test_core_mul()
sympy.utilities.tests.test_pickling.test_core_multidimensional()
sympy.utilities.tests.test_pickling.test_core_numbers()
sympy.utilities.tests.test_pickling.test_core_power()
sympy.utilities.tests.test_pickling.test_core_relational()
sympy.utilities.tests.test_pickling.test_core_symbol()
sympy.utilities.tests.test_pickling.test_functions()
sympy.utilities.tests.test_pickling.test_geometry()
sympy.utilities.tests.test_pickling.test_integrals()
sympy.utilities.tests.test_pickling.test_logic()
sympy.utilities.tests.test_pickling.test_matrices()
sympy.utilities.tests.test_pickling.test_ntheory()
sympy.utilities.tests.test_pickling.test_physics()
sympy.utilities.tests.test_pickling.test_pickling_polys_domains()
sympy.utilities.tests.test_pickling.test_pickling_polys_elements()
sympy.utilities.tests.test_pickling.test_pickling_polys_errors()
sympy.utilities.tests.test_pickling.test_pickling_polys_fields()
sympy.utilities.tests.test_pickling.test_pickling_polys_monomials()
sympy.utilities.tests.test_pickling.test_pickling_polys_numberfields()
sympy.utilities.tests.test_pickling.test_pickling_polys_options()
sympy.utilities.tests.test_pickling.test_pickling_polys_orderings()
sympy.utilities.tests.test_pickling.test_pickling_polys_polyclasses()
sympy.utilities.tests.test_pickling.test_pickling_polys_polytools()
sympy.utilities.tests.test_pickling.test_pickling_polys_rings()
sympy.utilities.tests.test_pickling.test_pickling_polys_rootoftools()
sympy.utilities.tests.test_pickling.test_plotting()
sympy.utilities.tests.test_pickling.test_plotting2()
sympy.utilities.tests.test_pickling.test_printing()
sympy.utilities.tests.test_pickling.test_printing1()
sympy.utilities.tests.test_pickling.test_printing2()
sympy.utilities.tests.test_pickling.test_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_enumerative.py----------------------------------------
A:sympy.utilities.tests.test_enumerative.cache->set()
A:sympy.utilities.tests.test_enumerative.n->len(canon)
A:sympy.utilities.tests.test_enumerative.canonical->tuple(sorted([tuple(p) for p in rv]))
A:sympy.utilities.tests.test_enumerative.bl_partitions->multiset_partitions_baseline(multiplicities, letters)
A:sympy.utilities.tests.test_enumerative.aocp_partitions->set()
A:sympy.utilities.tests.test_enumerative.p1->tuple(sorted([tuple(p) for p in list_visitor(state, letters)]))
A:sympy.utilities.tests.test_enumerative.m->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.ma->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.mc->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.md->MultisetPartitionTraverser()
A:sympy.utilities.tests.test_enumerative.a_it->MultisetPartitionTraverser().enum_range(mult, lb, ub)
A:sympy.utilities.tests.test_enumerative.b_it->part_range_filter(multiset_partitions_taocp(mult), lb, ub)
A:sympy.utilities.tests.test_enumerative.c_it->part_range_filter(mc.enum_small(mult, ub), lb, sum(mult))
A:sympy.utilities.tests.test_enumerative.d_it->part_range_filter(md.enum_large(mult, lb), 0, ub)
sympy.tests.test_enumerative.compare_multiset_states(s1,s2)
sympy.tests.test_enumerative.compare_multiset_w_baseline(multiplicities)
sympy.tests.test_enumerative.multiset_partitions_baseline(multiplicities,components)
sympy.tests.test_enumerative.part_range_filter(partition_iterator,lb,ub)
sympy.tests.test_enumerative.subrange_exercise(mult,lb,ub)
sympy.tests.test_enumerative.test_multiset_partitions_taocp()
sympy.tests.test_enumerative.test_multiset_partitions_versions()
sympy.tests.test_enumerative.test_subrange()
sympy.tests.test_enumerative.test_subrange_large()
sympy.utilities.tests.test_enumerative.compare_multiset_states(s1,s2)
sympy.utilities.tests.test_enumerative.compare_multiset_w_baseline(multiplicities)
sympy.utilities.tests.test_enumerative.multiset_partitions_baseline(multiplicities,components)
sympy.utilities.tests.test_enumerative.part_range_filter(partition_iterator,lb,ub)
sympy.utilities.tests.test_enumerative.subrange_exercise(mult,lb,ub)
sympy.utilities.tests.test_enumerative.test_multiset_partitions_taocp()
sympy.utilities.tests.test_enumerative.test_multiset_partitions_versions()
sympy.utilities.tests.test_enumerative.test_subrange()
sympy.utilities.tests.test_enumerative.test_subrange_large()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/diagnose_imports.py----------------------------------------
A:sympy.utilities.tests.diagnose_imports.this_file->abspath(__file__)
A:sympy.utilities.tests.diagnose_imports.sympy_dir->normpath(sympy_dir)
A:sympy.utilities.tests.diagnose_imports.option_parser->optparse.OptionParser(usage='Usage: %prog option [options]\n\nImport analysis for imports between SymPy modules.')
A:sympy.utilities.tests.diagnose_imports.option_group->optparse.OptionGroup(option_parser, 'Sort options', 'These options define the sort order for output lines. At most one of these options is allowed. Unsorted output will reflect the order in which imports happened.')
A:sympy.utilities.tests.diagnose_imports.(options, args)->optparse.OptionParser(usage='Usage: %prog option [options]\n\nImport analysis for imports between SymPy modules.').parse_args()
A:sympy.utilities.tests.diagnose_imports.caller_frame->inspect.getframeinfo(sys._getframe(1))
A:sympy.utilities.tests.diagnose_imports.result->builtin_import(module, globals, locals, fromlist, level)
A:sympy.utilities.tests.diagnose_imports.definition->Definition(symbol, result.__dict__[symbol], importer_module)
A:sympy.utilities.tests.diagnose_imports.symbol_list->builtin_import(module, globals, locals, fromlist, level).__dict__.iterkeys()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/utilities/tests/test_decorator.py----------------------------------------
A:sympy.utilities.tests.test_decorator.new_my_func->wraps(my_func)(new_my_func)
sympy.tests.test_decorator.test_threaded()
sympy.tests.test_decorator.test_wraps()
sympy.tests.test_decorator.test_xthreaded()
sympy.utilities.tests.test_decorator.test_threaded()
sympy.utilities.tests.test_decorator.test_wraps()
sympy.utilities.tests.test_decorator.test_xthreaded()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/contains.py----------------------------------------
A:sympy.sets.contains.ret->S.contains(x)
sympy.Contains(BooleanFunction)
sympy.Contains.eval(cls,x,S)
sympy.sets.contains.Contains(BooleanFunction)
sympy.sets.contains.Contains.eval(cls,x,S)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/fancysets.py----------------------------------------
A:sympy.sets.fancysets.s->Range(ceiling(other.left), floor(other.right) + 1)
A:sympy.sets.fancysets.i->S(1)
A:sympy.sets.fancysets.a->Wild('a')
A:sympy.sets.fancysets.b->Wild('b')
A:sympy.sets.fancysets.match->expr.match(a * n + b)
A:sympy.sets.fancysets.lamda->property(lambda self: self.args[0])
A:sympy.sets.fancysets.base_set->property(lambda self: self.args[1])
A:sympy.sets.fancysets.already_seen->set()
A:sympy.sets.fancysets.val->self.lamda(i)
A:sympy.sets.fancysets.solns->list(diophantine(f - g))
A:sympy.sets.fancysets.solns_set->diophantine(f - g)
A:sympy.sets.fancysets.slc->slice(*args)
A:sympy.sets.fancysets.n->ceiling((stop - start) / step)
A:sympy.sets.fancysets.(start, stop)->sorted((start, stop - step))
A:sympy.sets.fancysets.step->property(lambda self: self.args[2])
A:sympy.sets.fancysets.start->property(lambda self: self.args[0])
A:sympy.sets.fancysets.stop->property(lambda self: self.args[1])
A:sympy.sets.fancysets.inf->ceiling(Max(self.inf, oinf))
A:sympy.sets.fancysets.sup->floor(Min(self.sup, osup))
sympy.ImageSet(cls,lamda,base_set)
sympy.ImageSet.__iter__(self)
sympy.ImageSet._contains(self,other)
sympy.ImageSet._intersect(self,other)
sympy.ImageSet._is_multivariate(self)
sympy.ImageSet.is_iterable(self)
sympy.Range(cls,*args)
sympy.Range.__iter__(self)
sympy.Range.__len__(self)
sympy.Range.__nonzero__(self)
sympy.Range._boundary(self)
sympy.Range._contains(self,other)
sympy.Range._inf(self)
sympy.Range._intersect(self,other)
sympy.Range._ith_element(self,i)
sympy.Range._last_element(self)
sympy.Range._sup(self)
sympy.TransformationSet(*args,**kwargs)
sympy.fancyIntegers(with_metaclass(Singleton,Set))
sympy.fancyIntegers.__iter__(self)
sympy.fancyIntegers._boundary(self)
sympy.fancyIntegers._contains(self,other)
sympy.fancyIntegers._eval_imageset(self,f)
sympy.fancyIntegers._inf(self)
sympy.fancyIntegers._intersect(self,other)
sympy.fancyIntegers._sup(self)
sympy.fancyNaturals(with_metaclass(Singleton,Set))
sympy.fancyNaturals.__iter__(self)
sympy.fancyNaturals._boundary(self)
sympy.fancyNaturals._contains(self,other)
sympy.fancyNaturals._intersect(self,other)
sympy.fancyNaturals0(Naturals)
sympy.fancyNaturals0._contains(self,other)
sympy.fancyReals(cls)
sympy.sets.fancysets.ImageSet(cls,lamda,base_set)
sympy.sets.fancysets.ImageSet.__iter__(self)
sympy.sets.fancysets.ImageSet.__new__(cls,lamda,base_set)
sympy.sets.fancysets.ImageSet._contains(self,other)
sympy.sets.fancysets.ImageSet._intersect(self,other)
sympy.sets.fancysets.ImageSet._is_multivariate(self)
sympy.sets.fancysets.ImageSet.is_iterable(self)
sympy.sets.fancysets.Integers(with_metaclass(Singleton,Set))
sympy.sets.fancysets.Integers.__iter__(self)
sympy.sets.fancysets.Integers._boundary(self)
sympy.sets.fancysets.Integers._contains(self,other)
sympy.sets.fancysets.Integers._eval_imageset(self,f)
sympy.sets.fancysets.Integers._inf(self)
sympy.sets.fancysets.Integers._intersect(self,other)
sympy.sets.fancysets.Integers._sup(self)
sympy.sets.fancysets.Naturals(with_metaclass(Singleton,Set))
sympy.sets.fancysets.Naturals.__iter__(self)
sympy.sets.fancysets.Naturals._boundary(self)
sympy.sets.fancysets.Naturals._contains(self,other)
sympy.sets.fancysets.Naturals._intersect(self,other)
sympy.sets.fancysets.Naturals0(Naturals)
sympy.sets.fancysets.Naturals0._contains(self,other)
sympy.sets.fancysets.Range(cls,*args)
sympy.sets.fancysets.Range.__iter__(self)
sympy.sets.fancysets.Range.__len__(self)
sympy.sets.fancysets.Range.__new__(cls,*args)
sympy.sets.fancysets.Range.__nonzero__(self)
sympy.sets.fancysets.Range._boundary(self)
sympy.sets.fancysets.Range._contains(self,other)
sympy.sets.fancysets.Range._inf(self)
sympy.sets.fancysets.Range._intersect(self,other)
sympy.sets.fancysets.Range._ith_element(self,i)
sympy.sets.fancysets.Range._last_element(self)
sympy.sets.fancysets.Range._sup(self)
sympy.sets.fancysets.Reals(cls)
sympy.sets.fancysets.Reals.__new__(cls)
sympy.sets.fancysets.TransformationSet(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/sets.py----------------------------------------
A:sympy.sets.sets.switch_sets->ProductSet((FiniteSet(o, o - s) for (s, o) in zip(self.sets, other.sets)))
A:sympy.sets.sets.ret->Contains(other, self, evaluate=False)
A:sympy.sets.sets.symb->self.contains(other)
A:sympy.sets.sets.sets->flatten(list(sets))
A:sympy.sets.sets.start->Min(self.start, other.start)
A:sympy.sets.sets.end->Max(self.end, other.end)
A:sympy.sets.sets.left_open->_sympify(left_open)
A:sympy.sets.sets.right_open->_sympify(right_open)
A:sympy.sets.sets.a->Interval(S.NegativeInfinity, self.start, True, not self.left_open)
A:sympy.sets.sets.b->Interval(self.end, S.Infinity, not self.right_open, True)
A:sympy.sets.sets.new_self->Interval(self.start, self.end, open_left, open_right)
A:sympy.sets.sets.expr->args[0](var)
A:sympy.sets.sets._start->f(self.start)
A:sympy.sets.sets._end->f(self.end)
A:sympy.sets.sets.solns->solve(diff(expr, var), var)
A:sympy.sets.sets.other->Intersection(other_sets)
A:sympy.sets.sets.evaluate->kwargs.get('evaluate', global_evaluate[0])
A:sympy.sets.sets.args->list(ordered(frozenset(tuple(args)), Set._infimum_key))
A:sympy.sets.sets.finite_set->FiniteSet(*a)
A:sympy.sets.sets.new_set->s._intersect(t)
A:sympy.sets.sets.new_args->(args - set((s, t))).union(set((new_set,)))
A:sympy.sets.sets.result->B._complement(A)
A:sympy.sets.sets.obj->sympy.core.basic.Basic.__new__(cls, *args)
A:sympy.sets.sets.obj._elements->frozenset(args)
A:sympy.sets.sets.nums->sorted((m for m in self.args if m.is_number))
A:sympy.sets.sets.f->Lambda(var, expr)
A:sympy.sets.sets.var->Dummy()
A:sympy.sets.sets.r->set._eval_imageset(f)
sympy.Complement(cls,a,b,evaluate=True)
sympy.Complement._contains(self,other)
sympy.Complement.reduce(A,B)
sympy.EmptySet(with_metaclass(Singleton,Set))
sympy.EmptySet.__iter__(self)
sympy.EmptySet.__len__(self)
sympy.EmptySet._boundary(self)
sympy.EmptySet._contains(self,other)
sympy.EmptySet._eval_imageset(self,f)
sympy.EmptySet._eval_powerset(self)
sympy.EmptySet._intersect(self,other)
sympy.EmptySet._measure(self)
sympy.EmptySet._union(self,other)
sympy.EmptySet.as_relational(self,symbol)
sympy.FiniteSet(cls,*args,**kwargs)
sympy.FiniteSet.__ge__(self,other)
sympy.FiniteSet.__gt__(self,other)
sympy.FiniteSet.__iter__(self)
sympy.FiniteSet.__le__(self,other)
sympy.FiniteSet.__len__(self)
sympy.FiniteSet.__lt__(self,other)
sympy.FiniteSet._boundary(self)
sympy.FiniteSet._complement(self,other)
sympy.FiniteSet._contains(self,other)
sympy.FiniteSet._eval_evalf(self,prec)
sympy.FiniteSet._eval_imageset(self,f)
sympy.FiniteSet._eval_powerset(self)
sympy.FiniteSet._hashable_content(self)
sympy.FiniteSet._inf(self)
sympy.FiniteSet._intersect(self,other)
sympy.FiniteSet._sorted_args(self)
sympy.FiniteSet._sup(self)
sympy.FiniteSet._union(self,other)
sympy.FiniteSet.as_relational(self,symbol)
sympy.FiniteSet.compare(self,other)
sympy.FiniteSet.is_real(self)
sympy.FiniteSet.measure(self)
sympy.Intersection(cls,*args,**kwargs)
sympy.Intersection.__iter__(self)
sympy.Intersection._contains(self,other)
sympy.Intersection._eval_imageset(self,f)
sympy.Intersection._inf(self)
sympy.Intersection._sup(self)
sympy.Intersection.as_relational(self,symbol)
sympy.Intersection.is_iterable(self)
sympy.Intersection.reduce(args)
sympy.Interval(cls,start,end,left_open=False,right_open=False)
sympy.Interval._boundary(self)
sympy.Interval._complement(self,other)
sympy.Interval._contains(self,other)
sympy.Interval._eval_evalf(self,prec)
sympy.Interval._eval_imageset(self,f)
sympy.Interval._intersect(self,other)
sympy.Interval._is_comparable(self,other)
sympy.Interval._measure(self)
sympy.Interval._union(self,other)
sympy.Interval.as_relational(self,symbol)
sympy.Interval.end(self)
sympy.Interval.is_left_unbounded(self)
sympy.Interval.is_real(self)
sympy.Interval.is_right_unbounded(self)
sympy.Interval.left_open(self)
sympy.Interval.right_open(self)
sympy.Interval.start(self)
sympy.Interval.to_mpi(self,prec=53)
sympy.ProductSet(cls,*sets,**assumptions)
sympy.ProductSet.__iter__(self)
sympy.ProductSet.__len__(self)
sympy.ProductSet._boundary(self)
sympy.ProductSet._contains(self,element)
sympy.ProductSet._intersect(self,other)
sympy.ProductSet._measure(self)
sympy.ProductSet._union(self,other)
sympy.ProductSet.is_iterable(self)
sympy.ProductSet.is_real(self)
sympy.ProductSet.sets(self)
sympy.Set(Basic)
sympy.Set.__add__(self,other)
sympy.Set.__and__(self,other)
sympy.Set.__contains__(self,other)
sympy.Set.__mul__(self,other)
sympy.Set.__or__(self,other)
sympy.Set.__pow__(self,exp)
sympy.Set.__sub__(self,other)
sympy.Set._boundary(self)
sympy.Set._complement(self,other)
sympy.Set._contains(self,other)
sympy.Set._eval_imageset(self,f)
sympy.Set._eval_powerset(self)
sympy.Set._inf(self)
sympy.Set._infimum_key(expr)
sympy.Set._intersect(self,other)
sympy.Set._measure(self)
sympy.Set._sup(self)
sympy.Set._union(self,other)
sympy.Set.boundary(self)
sympy.Set.closure(self)
sympy.Set.complement(self,universe)
sympy.Set.contains(self,other)
sympy.Set.inf(self)
sympy.Set.interior(self)
sympy.Set.intersect(self,other)
sympy.Set.intersection(self,other)
sympy.Set.is_closed(self)
sympy.Set.is_disjoint(self,other)
sympy.Set.is_open(self)
sympy.Set.is_proper_subset(self,other)
sympy.Set.is_proper_superset(self,other)
sympy.Set.is_real(self)
sympy.Set.is_subset(self,other)
sympy.Set.is_superset(self,other)
sympy.Set.isdisjoint(self,other)
sympy.Set.issubset(self,other)
sympy.Set.issuperset(self,other)
sympy.Set.measure(self)
sympy.Set.powerset(self)
sympy.Set.subset(self,other)
sympy.Set.sup(self)
sympy.Set.union(self,other)
sympy.Union(cls,*args,**kwargs)
sympy.Union.__iter__(self)
sympy.Union._boundary(self)
sympy.Union._contains(self,other)
sympy.Union._eval_evalf(self,prec)
sympy.Union._eval_imageset(self,f)
sympy.Union._inf(self)
sympy.Union._measure(self)
sympy.Union._sup(self)
sympy.Union.as_relational(self,symbol)
sympy.Union.complement(self,universe)
sympy.Union.is_iterable(self)
sympy.Union.is_real(self)
sympy.Union.reduce(args)
sympy.UniversalSet(with_metaclass(Singleton,Set))
sympy.UniversalSet._boundary(self)
sympy.UniversalSet._contains(self,other)
sympy.UniversalSet._intersect(self,other)
sympy.UniversalSet._measure(self)
sympy.UniversalSet._union(self,other)
sympy.UniversalSet.as_relational(self,symbol)
sympy.UniversalSet.complement(self,universal_set)
sympy.imageset(*args)
sympy.sets.sets.Complement(cls,a,b,evaluate=True)
sympy.sets.sets.Complement.__new__(cls,a,b,evaluate=True)
sympy.sets.sets.Complement._contains(self,other)
sympy.sets.sets.Complement.reduce(A,B)
sympy.sets.sets.EmptySet(with_metaclass(Singleton,Set))
sympy.sets.sets.EmptySet.__iter__(self)
sympy.sets.sets.EmptySet.__len__(self)
sympy.sets.sets.EmptySet._boundary(self)
sympy.sets.sets.EmptySet._contains(self,other)
sympy.sets.sets.EmptySet._eval_imageset(self,f)
sympy.sets.sets.EmptySet._eval_powerset(self)
sympy.sets.sets.EmptySet._intersect(self,other)
sympy.sets.sets.EmptySet._measure(self)
sympy.sets.sets.EmptySet._union(self,other)
sympy.sets.sets.EmptySet.as_relational(self,symbol)
sympy.sets.sets.FiniteSet(cls,*args,**kwargs)
sympy.sets.sets.FiniteSet.__ge__(self,other)
sympy.sets.sets.FiniteSet.__gt__(self,other)
sympy.sets.sets.FiniteSet.__iter__(self)
sympy.sets.sets.FiniteSet.__le__(self,other)
sympy.sets.sets.FiniteSet.__len__(self)
sympy.sets.sets.FiniteSet.__lt__(self,other)
sympy.sets.sets.FiniteSet.__new__(cls,*args,**kwargs)
sympy.sets.sets.FiniteSet._boundary(self)
sympy.sets.sets.FiniteSet._complement(self,other)
sympy.sets.sets.FiniteSet._contains(self,other)
sympy.sets.sets.FiniteSet._eval_evalf(self,prec)
sympy.sets.sets.FiniteSet._eval_imageset(self,f)
sympy.sets.sets.FiniteSet._eval_powerset(self)
sympy.sets.sets.FiniteSet._hashable_content(self)
sympy.sets.sets.FiniteSet._inf(self)
sympy.sets.sets.FiniteSet._intersect(self,other)
sympy.sets.sets.FiniteSet._sorted_args(self)
sympy.sets.sets.FiniteSet._sup(self)
sympy.sets.sets.FiniteSet._union(self,other)
sympy.sets.sets.FiniteSet.as_relational(self,symbol)
sympy.sets.sets.FiniteSet.compare(self,other)
sympy.sets.sets.FiniteSet.is_real(self)
sympy.sets.sets.FiniteSet.measure(self)
sympy.sets.sets.Intersection(cls,*args,**kwargs)
sympy.sets.sets.Intersection.__iter__(self)
sympy.sets.sets.Intersection.__new__(cls,*args,**kwargs)
sympy.sets.sets.Intersection._contains(self,other)
sympy.sets.sets.Intersection._eval_imageset(self,f)
sympy.sets.sets.Intersection._inf(self)
sympy.sets.sets.Intersection._sup(self)
sympy.sets.sets.Intersection.as_relational(self,symbol)
sympy.sets.sets.Intersection.is_iterable(self)
sympy.sets.sets.Intersection.reduce(args)
sympy.sets.sets.Interval(cls,start,end,left_open=False,right_open=False)
sympy.sets.sets.Interval.__new__(cls,start,end,left_open=False,right_open=False)
sympy.sets.sets.Interval._boundary(self)
sympy.sets.sets.Interval._complement(self,other)
sympy.sets.sets.Interval._contains(self,other)
sympy.sets.sets.Interval._eval_evalf(self,prec)
sympy.sets.sets.Interval._eval_imageset(self,f)
sympy.sets.sets.Interval._intersect(self,other)
sympy.sets.sets.Interval._is_comparable(self,other)
sympy.sets.sets.Interval._measure(self)
sympy.sets.sets.Interval._union(self,other)
sympy.sets.sets.Interval.as_relational(self,symbol)
sympy.sets.sets.Interval.end(self)
sympy.sets.sets.Interval.is_left_unbounded(self)
sympy.sets.sets.Interval.is_real(self)
sympy.sets.sets.Interval.is_right_unbounded(self)
sympy.sets.sets.Interval.left_open(self)
sympy.sets.sets.Interval.right_open(self)
sympy.sets.sets.Interval.start(self)
sympy.sets.sets.Interval.to_mpi(self,prec=53)
sympy.sets.sets.ProductSet(cls,*sets,**assumptions)
sympy.sets.sets.ProductSet.__iter__(self)
sympy.sets.sets.ProductSet.__len__(self)
sympy.sets.sets.ProductSet.__new__(cls,*sets,**assumptions)
sympy.sets.sets.ProductSet._boundary(self)
sympy.sets.sets.ProductSet._contains(self,element)
sympy.sets.sets.ProductSet._intersect(self,other)
sympy.sets.sets.ProductSet._measure(self)
sympy.sets.sets.ProductSet._union(self,other)
sympy.sets.sets.ProductSet.is_iterable(self)
sympy.sets.sets.ProductSet.is_real(self)
sympy.sets.sets.ProductSet.sets(self)
sympy.sets.sets.Set(Basic)
sympy.sets.sets.Set.__add__(self,other)
sympy.sets.sets.Set.__and__(self,other)
sympy.sets.sets.Set.__contains__(self,other)
sympy.sets.sets.Set.__mul__(self,other)
sympy.sets.sets.Set.__or__(self,other)
sympy.sets.sets.Set.__pow__(self,exp)
sympy.sets.sets.Set.__sub__(self,other)
sympy.sets.sets.Set._boundary(self)
sympy.sets.sets.Set._complement(self,other)
sympy.sets.sets.Set._contains(self,other)
sympy.sets.sets.Set._eval_imageset(self,f)
sympy.sets.sets.Set._eval_powerset(self)
sympy.sets.sets.Set._inf(self)
sympy.sets.sets.Set._infimum_key(expr)
sympy.sets.sets.Set._intersect(self,other)
sympy.sets.sets.Set._measure(self)
sympy.sets.sets.Set._sup(self)
sympy.sets.sets.Set._union(self,other)
sympy.sets.sets.Set.boundary(self)
sympy.sets.sets.Set.closure(self)
sympy.sets.sets.Set.complement(self,universe)
sympy.sets.sets.Set.contains(self,other)
sympy.sets.sets.Set.inf(self)
sympy.sets.sets.Set.interior(self)
sympy.sets.sets.Set.intersect(self,other)
sympy.sets.sets.Set.intersection(self,other)
sympy.sets.sets.Set.is_closed(self)
sympy.sets.sets.Set.is_disjoint(self,other)
sympy.sets.sets.Set.is_open(self)
sympy.sets.sets.Set.is_proper_subset(self,other)
sympy.sets.sets.Set.is_proper_superset(self,other)
sympy.sets.sets.Set.is_real(self)
sympy.sets.sets.Set.is_subset(self,other)
sympy.sets.sets.Set.is_superset(self,other)
sympy.sets.sets.Set.isdisjoint(self,other)
sympy.sets.sets.Set.issubset(self,other)
sympy.sets.sets.Set.issuperset(self,other)
sympy.sets.sets.Set.measure(self)
sympy.sets.sets.Set.powerset(self)
sympy.sets.sets.Set.subset(self,other)
sympy.sets.sets.Set.sup(self)
sympy.sets.sets.Set.union(self,other)
sympy.sets.sets.Union(cls,*args,**kwargs)
sympy.sets.sets.Union.__iter__(self)
sympy.sets.sets.Union.__new__(cls,*args,**kwargs)
sympy.sets.sets.Union._boundary(self)
sympy.sets.sets.Union._contains(self,other)
sympy.sets.sets.Union._eval_evalf(self,prec)
sympy.sets.sets.Union._eval_imageset(self,f)
sympy.sets.sets.Union._inf(self)
sympy.sets.sets.Union._measure(self)
sympy.sets.sets.Union._sup(self)
sympy.sets.sets.Union.as_relational(self,symbol)
sympy.sets.sets.Union.complement(self,universe)
sympy.sets.sets.Union.is_iterable(self)
sympy.sets.sets.Union.is_real(self)
sympy.sets.sets.Union.reduce(args)
sympy.sets.sets.UniversalSet(with_metaclass(Singleton,Set))
sympy.sets.sets.UniversalSet._boundary(self)
sympy.sets.sets.UniversalSet._contains(self,other)
sympy.sets.sets.UniversalSet._intersect(self,other)
sympy.sets.sets.UniversalSet._measure(self)
sympy.sets.sets.UniversalSet._union(self,other)
sympy.sets.sets.UniversalSet.as_relational(self,symbol)
sympy.sets.sets.UniversalSet.complement(self,universal_set)
sympy.sets.sets.imageset(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/tests/test_fancysets.py----------------------------------------
A:sympy.sets.tests.test_fancysets.x->Symbol('x')
A:sympy.sets.tests.test_fancysets.ni->iter(N)
A:sympy.sets.tests.test_fancysets.zi->iter(Z)
A:sympy.sets.tests.test_fancysets.squares->ImageSet(Lambda(x, x ** 2), S.Naturals)
A:sympy.sets.tests.test_fancysets.si->iter(squares)
A:sympy.sets.tests.test_fancysets.harmonics->ImageSet(Lambda(x, 1 / x), S.Naturals)
A:sympy.sets.tests.test_fancysets.(r, th)->symbols('r, theta', real=True)
A:sympy.sets.tests.test_fancysets.L->Lambda(x, x - x % 2)
A:sympy.sets.tests.test_fancysets.halfcircle->ImageSet(L, Interval(0, 1) * Interval(0, pi))
A:sympy.sets.tests.test_fancysets.evens->ImageSet(L, S.Naturals)
A:sympy.sets.tests.test_fancysets.i->iter(evens)
A:sympy.sets.tests.test_fancysets.r->Range(10, 20, 2)
A:sympy.sets.tests.test_fancysets.it->iter(Range(-oo, 0, 2))
A:sympy.sets.tests.test_fancysets.a->Symbol('a', integer=True)
sympy.sets.tests.test_fancysets.take(n,iterable)
sympy.sets.tests.test_fancysets.test_ImageSet()
sympy.sets.tests.test_fancysets.test_ImageSet_iterator_not_injetive()
sympy.sets.tests.test_fancysets.test_ImageSet_simplification()
sympy.sets.tests.test_fancysets.test_Range()
sympy.sets.tests.test_fancysets.test_fun()
sympy.sets.tests.test_fancysets.test_halfcircle()
sympy.sets.tests.test_fancysets.test_image_is_ImageSet()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_failed_diophantine()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_1()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_2()
sympy.sets.tests.test_fancysets.test_infinitely_indexed_set_3()
sympy.sets.tests.test_fancysets.test_integers()
sympy.sets.tests.test_fancysets.test_intersections()
sympy.sets.tests.test_fancysets.test_naturals()
sympy.sets.tests.test_fancysets.test_naturals0()
sympy.sets.tests.test_fancysets.test_range_interval_intersection()
sympy.sets.tests.test_fancysets.test_reals()
sympy.tests.test_fancytake(n,iterable)
sympy.tests.test_fancytest_ImageSet()
sympy.tests.test_fancytest_ImageSet_iterator_not_injetive()
sympy.tests.test_fancytest_ImageSet_simplification()
sympy.tests.test_fancytest_Range()
sympy.tests.test_fancytest_fun()
sympy.tests.test_fancytest_halfcircle()
sympy.tests.test_fancytest_image_is_ImageSet()
sympy.tests.test_fancytest_infinitely_indexed_failed_diophantine()
sympy.tests.test_fancytest_infinitely_indexed_set_1()
sympy.tests.test_fancytest_infinitely_indexed_set_2()
sympy.tests.test_fancytest_infinitely_indexed_set_3()
sympy.tests.test_fancytest_integers()
sympy.tests.test_fancytest_intersections()
sympy.tests.test_fancytest_naturals()
sympy.tests.test_fancytest_naturals0()
sympy.tests.test_fancytest_range_interval_intersection()
sympy.tests.test_fancytest_reals()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/tests/test_contains.py----------------------------------------
A:sympy.sets.tests.test_contains.i->Symbol('i', integer=True)
A:sympy.sets.tests.test_contains.x->Symbol('x')
sympy.sets.tests.test_contains.test_contains_basic()
sympy.sets.tests.test_contains.test_issue_6194()
sympy.tests.test_contains.test_contains_basic()
sympy.tests.test_contains.test_issue_6194()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/sets/tests/test_sets.py----------------------------------------
A:sympy.sets.tests.test_sets.a->Symbol('a', real=True)
A:sympy.sets.tests.test_sets.x->Symbol('x', real=True)
A:sympy.sets.tests.test_sets.y->Symbol('y', real=True)
A:sympy.sets.tests.test_sets.z->Symbol('z')
A:sympy.sets.tests.test_sets.XandY->X.intersect(Y)
A:sympy.sets.tests.test_sets.notsquare->square.complement(S.Reals * S.Reals)
A:sympy.sets.tests.test_sets.i->Intersection(line ** 2, line ** 3, evaluate=False)
A:sympy.sets.tests.test_sets.line->Interval(0, 2)
A:sympy.sets.tests.test_sets.fset->FiniteSet(*items)
A:sympy.sets.tests.test_sets.e->Union(i1, i2).contains(x)
A:sympy.sets.tests.test_sets.i1->Interval(0, 1)
A:sympy.sets.tests.test_sets.i2->Interval(2, 3)
A:sympy.sets.tests.test_sets.i3->Union(i1, i2)
A:sympy.sets.tests.test_sets.A->FiniteSet(1, 2, 30, x, S.Pi)
A:sympy.sets.tests.test_sets.B->FiniteSet(-4, 0)
A:sympy.sets.tests.test_sets.AorB->Union(A, B)
A:sympy.sets.tests.test_sets.AandB->FiniteSet(1, 2, 30, x, S.Pi).intersect(B)
A:sympy.sets.tests.test_sets.s->FiniteSet((1, 2), Float, A, -5, x, 'eggs', x ** 2, Interval)
A:sympy.sets.tests.test_sets.pset->FiniteSet(1, 2, 30, x, S.Pi).powerset()
A:sympy.sets.tests.test_sets.I->Interval(0, 5)
A:sympy.sets.tests.test_sets.unit_line->Interval(0, 1)
A:sympy.sets.tests.test_sets.d6->FiniteSet(1, 2, 3, 4, 5, 6)
A:sympy.sets.tests.test_sets.d4->FiniteSet(1, 2, 3, 4)
A:sympy.sets.tests.test_sets.coin->FiniteSet(H, T)
A:sympy.sets.tests.test_sets.J->Interval(10, 20)
A:sympy.sets.tests.test_sets.C->FiniteSet(100)
A:sympy.sets.tests.test_sets.D->FiniteSet('Ham', 'Eggs')
A:sympy.sets.tests.test_sets.points->FiniteSet(0, 1, 2)
sympy.sets.tests.test_sets.test_Complement()
sympy.sets.tests.test_sets.test_EmptySet()
sympy.sets.tests.test_sets.test_Finite_as_relational()
sympy.sets.tests.test_sets.test_Intersection_as_relational()
sympy.sets.tests.test_sets.test_Interval_as_relational()
sympy.sets.tests.test_sets.test_Interval_free_symbols()
sympy.sets.tests.test_sets.test_Interval_is_left_unbounded()
sympy.sets.tests.test_sets.test_Interval_is_right_unbounded()
sympy.sets.tests.test_sets.test_ProductSet_of_single_arg_is_arg()
sympy.sets.tests.test_sets.test_Union_as_relational()
sympy.sets.tests.test_sets.test_Union_of_ProductSets_shares()
sympy.sets.tests.test_sets.test_boundary()
sympy.sets.tests.test_sets.test_boundary_ProductSet()
sympy.sets.tests.test_sets.test_boundary_ProductSet_line()
sympy.sets.tests.test_sets.test_boundary_Union()
sympy.sets.tests.test_sets.test_closure()
sympy.sets.tests.test_sets.test_complement()
sympy.sets.tests.test_sets.test_contains()
sympy.sets.tests.test_sets.test_difference()
sympy.sets.tests.test_sets.test_finite_basic()
sympy.sets.tests.test_sets.test_image_EmptySet()
sympy.sets.tests.test_sets.test_image_FiniteSet()
sympy.sets.tests.test_sets.test_image_Intersection()
sympy.sets.tests.test_sets.test_image_Union()
sympy.sets.tests.test_sets.test_image_interval()
sympy.sets.tests.test_sets.test_interior()
sympy.sets.tests.test_sets.test_intersect()
sympy.sets.tests.test_sets.test_intersection()
sympy.sets.tests.test_sets.test_interval_arguments()
sympy.sets.tests.test_sets.test_interval_subs()
sympy.sets.tests.test_sets.test_interval_symbolic()
sympy.sets.tests.test_sets.test_interval_symbolic_end_points()
sympy.sets.tests.test_sets.test_interval_to_mpi()
sympy.sets.tests.test_sets.test_is_closed()
sympy.sets.tests.test_sets.test_is_disjoint()
sympy.sets.tests.test_sets.test_is_number()
sympy.sets.tests.test_sets.test_is_open()
sympy.sets.tests.test_sets.test_is_proper_subset()
sympy.sets.tests.test_sets.test_is_proper_superset()
sympy.sets.tests.test_sets.test_is_subset()
sympy.sets.tests.test_sets.test_is_superset()
sympy.sets.tests.test_sets.test_issue_5724_7680()
sympy.sets.tests.test_sets.test_issue_7841()
sympy.sets.tests.test_sets.test_measure()
sympy.sets.tests.test_sets.test_powerset()
sympy.sets.tests.test_sets.test_product_basic()
sympy.sets.tests.test_sets.test_real()
sympy.sets.tests.test_sets.test_supinf()
sympy.sets.tests.test_sets.test_union()
sympy.sets.tests.test_sets.test_union_boundary_of_joining_sets()
sympy.sets.tests.test_sets.test_union_contains()
sympy.sets.tests.test_sets.test_universalset()
sympy.tests.test_test_Complement()
sympy.tests.test_test_EmptySet()
sympy.tests.test_test_Finite_as_relational()
sympy.tests.test_test_Intersection_as_relational()
sympy.tests.test_test_Interval_as_relational()
sympy.tests.test_test_Interval_free_symbols()
sympy.tests.test_test_Interval_is_left_unbounded()
sympy.tests.test_test_Interval_is_right_unbounded()
sympy.tests.test_test_ProductSet_of_single_arg_is_arg()
sympy.tests.test_test_Union_as_relational()
sympy.tests.test_test_Union_of_ProductSets_shares()
sympy.tests.test_test_boundary()
sympy.tests.test_test_boundary_ProductSet()
sympy.tests.test_test_boundary_ProductSet_line()
sympy.tests.test_test_boundary_Union()
sympy.tests.test_test_closure()
sympy.tests.test_test_complement()
sympy.tests.test_test_contains()
sympy.tests.test_test_difference()
sympy.tests.test_test_finite_basic()
sympy.tests.test_test_image_EmptySet()
sympy.tests.test_test_image_FiniteSet()
sympy.tests.test_test_image_Intersection()
sympy.tests.test_test_image_Union()
sympy.tests.test_test_image_interval()
sympy.tests.test_test_interior()
sympy.tests.test_test_intersect()
sympy.tests.test_test_intersection()
sympy.tests.test_test_interval_arguments()
sympy.tests.test_test_interval_subs()
sympy.tests.test_test_interval_symbolic()
sympy.tests.test_test_interval_symbolic_end_points()
sympy.tests.test_test_interval_to_mpi()
sympy.tests.test_test_is_closed()
sympy.tests.test_test_is_disjoint()
sympy.tests.test_test_is_number()
sympy.tests.test_test_is_open()
sympy.tests.test_test_is_proper_subset()
sympy.tests.test_test_is_proper_superset()
sympy.tests.test_test_is_subset()
sympy.tests.test_test_is_superset()
sympy.tests.test_test_issue_5724_7680()
sympy.tests.test_test_issue_7841()
sympy.tests.test_test_measure()
sympy.tests.test_test_powerset()
sympy.tests.test_test_product_basic()
sympy.tests.test_test_real()
sympy.tests.test_test_supinf()
sympy.tests.test_test_union()
sympy.tests.test_test_union_boundary_of_joining_sets()
sympy.tests.test_test_union_contains()
sympy.tests.test_test_universalset()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/printer.py----------------------------------------
A:sympy.printing.printer.self._settings->self._default_settings.copy()
sympy.printing.printer.Printer(self,settings=None)
sympy.printing.printer.Printer.__init__(self,settings=None)
sympy.printing.printer.Printer._as_ordered_terms(self,expr,order=None)
sympy.printing.printer.Printer._print(self,expr,*args,**kwargs)
sympy.printing.printer.Printer.doprint(self,expr)
sympy.printing.printer.Printer.order(self)
sympy.printing.printer.Printer.set_global_settings(cls,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/defaults.py----------------------------------------
sympy.printing.defaults.DefaultPrinting(object)
sympy.printing.defaults.DefaultPrinting.__str__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/jscode.py----------------------------------------
A:sympy.printing.jscode.self.known_functions->dict(known_functions)
A:sympy.printing.jscode.userfuncs->settings.get('user_functions', {})
A:sympy.printing.jscode.PREC->precedence(expr)
A:sympy.printing.jscode.code0->self._print(e)
A:sympy.printing.jscode.code_lines->self.indent_code(code.splitlines(True))
sympy.jscode(expr,assign_to=None,**settings)
sympy.jscode.JavascriptCodePrinter(self,settings={})
sympy.jscode.JavascriptCodePrinter._declare_number_const(self,name,value)
sympy.jscode.JavascriptCodePrinter._format_code(self,lines)
sympy.jscode.JavascriptCodePrinter._get_comment(self,text)
sympy.jscode.JavascriptCodePrinter._get_loop_opening_ending(self,indices)
sympy.jscode.JavascriptCodePrinter._get_statement(self,codestring)
sympy.jscode.JavascriptCodePrinter._print_Exp1(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Idx(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Indexed(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Infinity(self,expr)
sympy.jscode.JavascriptCodePrinter._print_MatrixElement(self,expr)
sympy.jscode.JavascriptCodePrinter._print_NegativeInfinity(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Pi(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Piecewise(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Pow(self,expr)
sympy.jscode.JavascriptCodePrinter._print_Rational(self,expr)
sympy.jscode.JavascriptCodePrinter._rate_index_position(self,p)
sympy.jscode.JavascriptCodePrinter._traverse_matrix_indices(self,mat)
sympy.jscode.JavascriptCodePrinter.indent_code(self,code)
sympy.printing.jscode.JavascriptCodePrinter(self,settings={})
sympy.printing.jscode.JavascriptCodePrinter.__init__(self,settings={})
sympy.printing.jscode.JavascriptCodePrinter._declare_number_const(self,name,value)
sympy.printing.jscode.JavascriptCodePrinter._format_code(self,lines)
sympy.printing.jscode.JavascriptCodePrinter._get_comment(self,text)
sympy.printing.jscode.JavascriptCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.jscode.JavascriptCodePrinter._get_statement(self,codestring)
sympy.printing.jscode.JavascriptCodePrinter._print_Exp1(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Idx(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Indexed(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Infinity(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_MatrixElement(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Pi(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Piecewise(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Pow(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._print_Rational(self,expr)
sympy.printing.jscode.JavascriptCodePrinter._rate_index_position(self,p)
sympy.printing.jscode.JavascriptCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.jscode.JavascriptCodePrinter.indent_code(self,code)
sympy.printing.jscode.jscode(expr,assign_to=None,**settings)
sympy.printing.jscode.print_jscode(expr,**settings)
sympy.printing.print_jscode(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/mathml.py----------------------------------------
A:sympy.printing.mathml.self.dom->Document()
A:sympy.printing.mathml.mathML->printer.Printer._print(self, expr)
A:sympy.printing.mathml.unistr->printer.Printer._print(self, expr).toxml()
A:sympy.printing.mathml.xmlbstr->printer.Printer._print(self, expr).toxml().encode('ascii', 'xmlcharrefreplace')
A:sympy.printing.mathml.res->printer.Printer._print(self, expr).toxml().encode('ascii', 'xmlcharrefreplace').decode()
A:sympy.printing.mathml.x->self.dom.createElement('apply')
A:sympy.printing.mathml.(numer, denom)->fraction(expr)
A:sympy.printing.mathml.(coeff, terms)->expr.as_coeff_mul()
A:sympy.printing.mathml.terms->sympy.Mul._from_args(terms).as_ordered_factors()
A:sympy.printing.mathml.args->self._as_ordered_terms(expr, order=order)
A:sympy.printing.mathml.lastProcessed->self._print(arg)
A:sympy.printing.mathml.x_r->self.dom.createElement('matrixrow')
A:sympy.printing.mathml.xnum->self.dom.createElement('cn')
A:sympy.printing.mathml.xdenom->self.dom.createElement('cn')
A:sympy.printing.mathml.x_1->self.dom.createElement(self.mathml_tag(e))
A:sympy.printing.mathml.x_2->self.dom.createElement('lowlimit')
A:sympy.printing.mathml.bvar_elem->self.dom.createElement('bvar')
A:sympy.printing.mathml.low_elem->self.dom.createElement('lowlimit')
A:sympy.printing.mathml.up_elem->self.dom.createElement('uplimit')
A:sympy.printing.mathml.limits->list(e.limits)
A:sympy.printing.mathml.ci->self.dom.createElement(self.mathml_tag(sym))
A:sympy.printing.mathml.mrow->self.dom.createElement('mml:mrow')
A:sympy.printing.mathml.mo->self.dom.createElement('mml:mo')
A:sympy.printing.mathml.mi->self.dom.createElement('mml:mi')
A:sympy.printing.mathml.greek_letters->set(greeks)
A:sympy.printing.mathml.(name, supers, subs)->split_super_sub(sym.name)
A:sympy.printing.mathml.name->translate(name)
A:sympy.printing.mathml.mname->self.dom.createElement('mml:mi')
A:sympy.printing.mathml.msub->self.dom.createElement('mml:msub')
A:sympy.printing.mathml.msup->self.dom.createElement('mml:msup')
A:sympy.printing.mathml.msubsup->self.dom.createElement('mml:msubsup')
A:sympy.printing.mathml.xmldeg->self.dom.createElement('degree')
A:sympy.printing.mathml.xmlci->self.dom.createElement('ci')
A:sympy.printing.mathml.diff_symbol->self.mathml_tag(e)
A:sympy.printing.mathml.dom_element->self.dom.createElement(self.mathml_tag(p))
A:sympy.printing.mathml.attrs->self._get_attributes()
A:sympy.printing.mathml.a_names->list(attrs.keys())
A:sympy.printing.mathml.s->MathMLPrinter(settings)
A:sympy.printing.mathml.xml->MathMLPrinter(settings)._print(sympify(expr))
A:sympy.printing.mathml.pretty_xml->MathMLPrinter(settings)._print(sympify(expr)).toprettyxml()
sympy.printing.mathml(expr,**settings)
sympy.printing.mathml.MathMLPrinter(self,settings=None)
sympy.printing.mathml.MathMLPrinter.__init__(self,settings=None)
sympy.printing.mathml.MathMLPrinter._print_Add(self,expr,order=None)
sympy.printing.mathml.MathMLPrinter._print_AssocOp(self,e)
sympy.printing.mathml.MathMLPrinter._print_Basic(self,e)
sympy.printing.mathml.MathMLPrinter._print_Derivative(self,e)
sympy.printing.mathml.MathMLPrinter._print_EulerGamma(self,e)
sympy.printing.mathml.MathMLPrinter._print_Exp1(self,e)
sympy.printing.mathml.MathMLPrinter._print_Function(self,e)
sympy.printing.mathml.MathMLPrinter._print_GoldenRatio(self,e)
sympy.printing.mathml.MathMLPrinter._print_ImaginaryUnit(self,e)
sympy.printing.mathml.MathMLPrinter._print_Infinity(self,e)
sympy.printing.mathml.MathMLPrinter._print_Integral(self,e)
sympy.printing.mathml.MathMLPrinter._print_Limit(self,e)
sympy.printing.mathml.MathMLPrinter._print_MatrixBase(self,m)
sympy.printing.mathml.MathMLPrinter._print_Mul(self,expr)
sympy.printing.mathml.MathMLPrinter._print_Negative_Infinity(self,e)
sympy.printing.mathml.MathMLPrinter._print_Number(self,e)
sympy.printing.mathml.MathMLPrinter._print_Pi(self,e)
sympy.printing.mathml.MathMLPrinter._print_Pow(self,e)
sympy.printing.mathml.MathMLPrinter._print_Rational(self,e)
sympy.printing.mathml.MathMLPrinter._print_Relational(self,e)
sympy.printing.mathml.MathMLPrinter._print_Sum(self,e)
sympy.printing.mathml.MathMLPrinter._print_Symbol(self,sym)
sympy.printing.mathml.MathMLPrinter._print_int(self,p)
sympy.printing.mathml.MathMLPrinter._print_list(self,seq)
sympy.printing.mathml.MathMLPrinter.apply_patch(self)
sympy.printing.mathml.MathMLPrinter.doprint(self,expr)
sympy.printing.mathml.MathMLPrinter.mathml_tag(self,e)
sympy.printing.mathml.MathMLPrinter.restore_patch(self)
sympy.printing.mathml.mathml(expr,**settings)
sympy.printing.mathml.print_mathml(expr,**settings)
sympy.printing.print_mathml(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/ccode.py----------------------------------------
A:sympy.printing.ccode.self.known_functions->dict(known_functions)
A:sympy.printing.ccode.userfuncs->settings.get('user_functions', {})
A:sympy.printing.ccode.self._dereference->set(settings.get('dereference', []))
A:sympy.printing.ccode.self.reserved_words->set(reserved_words)
A:sympy.printing.ccode.PREC->precedence(expr)
A:sympy.printing.ccode.code0->self._print(e)
A:sympy.printing.ccode.name->super(CCodePrinter, self)._print_Symbol(expr)
A:sympy.printing.ccode.code_lines->self.indent_code(code.splitlines(True))
sympy.ccode(expr,assign_to=None,**settings)
sympy.ccode.CCodePrinter(self,settings={})
sympy.ccode.CCodePrinter._declare_number_const(self,name,value)
sympy.ccode.CCodePrinter._format_code(self,lines)
sympy.ccode.CCodePrinter._get_comment(self,text)
sympy.ccode.CCodePrinter._get_loop_opening_ending(self,indices)
sympy.ccode.CCodePrinter._get_statement(self,codestring)
sympy.ccode.CCodePrinter._print_Exp1(self,expr)
sympy.ccode.CCodePrinter._print_Idx(self,expr)
sympy.ccode.CCodePrinter._print_Indexed(self,expr)
sympy.ccode.CCodePrinter._print_Infinity(self,expr)
sympy.ccode.CCodePrinter._print_MatrixElement(self,expr)
sympy.ccode.CCodePrinter._print_NegativeInfinity(self,expr)
sympy.ccode.CCodePrinter._print_Pi(self,expr)
sympy.ccode.CCodePrinter._print_Piecewise(self,expr)
sympy.ccode.CCodePrinter._print_Pow(self,expr)
sympy.ccode.CCodePrinter._print_Rational(self,expr)
sympy.ccode.CCodePrinter._print_Symbol(self,expr)
sympy.ccode.CCodePrinter._print_sign(self,func)
sympy.ccode.CCodePrinter._rate_index_position(self,p)
sympy.ccode.CCodePrinter._traverse_matrix_indices(self,mat)
sympy.ccode.CCodePrinter.indent_code(self,code)
sympy.printing.ccode.CCodePrinter(self,settings={})
sympy.printing.ccode.CCodePrinter.__init__(self,settings={})
sympy.printing.ccode.CCodePrinter._declare_number_const(self,name,value)
sympy.printing.ccode.CCodePrinter._format_code(self,lines)
sympy.printing.ccode.CCodePrinter._get_comment(self,text)
sympy.printing.ccode.CCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.ccode.CCodePrinter._get_statement(self,codestring)
sympy.printing.ccode.CCodePrinter._print_Exp1(self,expr)
sympy.printing.ccode.CCodePrinter._print_Idx(self,expr)
sympy.printing.ccode.CCodePrinter._print_Indexed(self,expr)
sympy.printing.ccode.CCodePrinter._print_Infinity(self,expr)
sympy.printing.ccode.CCodePrinter._print_MatrixElement(self,expr)
sympy.printing.ccode.CCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.ccode.CCodePrinter._print_Pi(self,expr)
sympy.printing.ccode.CCodePrinter._print_Piecewise(self,expr)
sympy.printing.ccode.CCodePrinter._print_Pow(self,expr)
sympy.printing.ccode.CCodePrinter._print_Rational(self,expr)
sympy.printing.ccode.CCodePrinter._print_Symbol(self,expr)
sympy.printing.ccode.CCodePrinter._print_sign(self,func)
sympy.printing.ccode.CCodePrinter._rate_index_position(self,p)
sympy.printing.ccode.CCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.ccode.CCodePrinter.indent_code(self,code)
sympy.printing.ccode.ccode(expr,assign_to=None,**settings)
sympy.printing.ccode.print_ccode(expr,**settings)
sympy.printing.print_ccode(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/preview.py----------------------------------------
A:sympy.printing.preview.path->find_executable(candidate)
A:sympy.printing.preview.latex_string->latex(expr, mode='inline', **latex_settings)
A:sympy.printing.preview.workdir->tempfile.mkdtemp()
A:sympy.printing.preview.buffer->BytesIO()
A:sympy.printing.preview.img->pyglet.image.load(join(workdir, src), decoder=PNGImageDecoder())
A:sympy.printing.preview.win->pyglet.window.Window(width=img.width + 2 * offset, height=img.height + 2 * offset, caption='sympy', resizable=False)
sympy.preview(expr,output='png',viewer=None,euler=True,packages=(),filename=None,outputbuffer=None,preamble=None,dvioptions=None,outputTexFile=None,**latex_settings)
sympy.printing.preview.preview(expr,output='png',viewer=None,euler=True,packages=(),filename=None,outputbuffer=None,preamble=None,dvioptions=None,outputTexFile=None,**latex_settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/fcode.py----------------------------------------
A:sympy.printing.fcode.self.known_functions->dict(known_functions)
A:sympy.printing.fcode.userfuncs->settings.get('user_functions', {})
A:sympy.printing.fcode.standards->set([66, 77, 90, 95, 2003, 2008])
A:sympy.printing.fcode.(var, start, stop)->map(self._print, [i.label, i.lower + 1, i.upper + 1])
A:sympy.printing.fcode.code->pattern.format(T=expr, F=code, COND=cond)
A:sympy.printing.fcode.terms->list(expr.args[:-1])
A:sympy.printing.fcode.(e, c)->list(expr.args[:-1]).pop()
A:sympy.printing.fcode.expr->self._print(e)
A:sympy.printing.fcode.cond->self._print(c)
A:sympy.printing.fcode.PREC->precedence(expr)
A:sympy.printing.fcode.term->Add(*mixed)
A:sympy.printing.fcode.t->self._print(term)
A:sympy.printing.fcode.eval_expr->self._print(e).func(*args)
A:sympy.printing.fcode.printed->sympy.printing.codeprinter.CodePrinter._print_Float(self, expr)
A:sympy.printing.fcode.e->sympy.printing.codeprinter.CodePrinter._print_Float(self, expr).find('e')
A:sympy.printing.fcode.my_alnum->set('_+-.' + string.digits + string.ascii_letters)
A:sympy.printing.fcode.my_white->set(' \t()')
A:sympy.printing.fcode.pos->split_pos_code(line, 65)
A:sympy.printing.fcode.line->line[pos:].lstrip()
A:sympy.printing.fcode.hunk->line[:pos].rstrip()
A:sympy.printing.fcode.code_lines->self.indent_code(code.splitlines(True))
sympy.fcode(expr,assign_to=None,**settings)
sympy.fcode.FCodePrinter(self,settings={})
sympy.fcode.FCodePrinter._declare_number_const(self,name,value)
sympy.fcode.FCodePrinter._format_code(self,lines)
sympy.fcode.FCodePrinter._get_comment(self,text)
sympy.fcode.FCodePrinter._get_loop_opening_ending(self,indices)
sympy.fcode.FCodePrinter._get_statement(self,codestring)
sympy.fcode.FCodePrinter._pad_leading_columns(self,lines)
sympy.fcode.FCodePrinter._print_Add(self,expr)
sympy.fcode.FCodePrinter._print_Float(self,expr)
sympy.fcode.FCodePrinter._print_Function(self,expr)
sympy.fcode.FCodePrinter._print_Idx(self,expr)
sympy.fcode.FCodePrinter._print_ImaginaryUnit(self,expr)
sympy.fcode.FCodePrinter._print_Indexed(self,expr)
sympy.fcode.FCodePrinter._print_MatrixElement(self,expr)
sympy.fcode.FCodePrinter._print_Mul(self,expr)
sympy.fcode.FCodePrinter._print_Piecewise(self,expr)
sympy.fcode.FCodePrinter._print_Pow(self,expr)
sympy.fcode.FCodePrinter._print_Rational(self,expr)
sympy.fcode.FCodePrinter._print_int(self,expr)
sympy.fcode.FCodePrinter._rate_index_position(self,p)
sympy.fcode.FCodePrinter._traverse_matrix_indices(self,mat)
sympy.fcode.FCodePrinter._wrap_fortran(self,lines)
sympy.fcode.FCodePrinter.indent_code(self,code)
sympy.printing.fcode.FCodePrinter(self,settings={})
sympy.printing.fcode.FCodePrinter.__init__(self,settings={})
sympy.printing.fcode.FCodePrinter._declare_number_const(self,name,value)
sympy.printing.fcode.FCodePrinter._format_code(self,lines)
sympy.printing.fcode.FCodePrinter._get_comment(self,text)
sympy.printing.fcode.FCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.fcode.FCodePrinter._get_statement(self,codestring)
sympy.printing.fcode.FCodePrinter._pad_leading_columns(self,lines)
sympy.printing.fcode.FCodePrinter._print_Add(self,expr)
sympy.printing.fcode.FCodePrinter._print_Float(self,expr)
sympy.printing.fcode.FCodePrinter._print_Function(self,expr)
sympy.printing.fcode.FCodePrinter._print_Idx(self,expr)
sympy.printing.fcode.FCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.fcode.FCodePrinter._print_Indexed(self,expr)
sympy.printing.fcode.FCodePrinter._print_MatrixElement(self,expr)
sympy.printing.fcode.FCodePrinter._print_Mul(self,expr)
sympy.printing.fcode.FCodePrinter._print_Piecewise(self,expr)
sympy.printing.fcode.FCodePrinter._print_Pow(self,expr)
sympy.printing.fcode.FCodePrinter._print_Rational(self,expr)
sympy.printing.fcode.FCodePrinter._print_int(self,expr)
sympy.printing.fcode.FCodePrinter._rate_index_position(self,p)
sympy.printing.fcode.FCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.fcode.FCodePrinter._wrap_fortran(self,lines)
sympy.printing.fcode.FCodePrinter.indent_code(self,code)
sympy.printing.fcode.fcode(expr,assign_to=None,**settings)
sympy.printing.fcode.print_fcode(expr,**settings)
sympy.printing.print_fcode(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/str.py----------------------------------------
A:sympy.printing.str._relationals->dict()
A:sympy.printing.str.terms->self._as_ordered_terms(expr, order=order)
A:sympy.printing.str.PREC->precedence(expr)
A:sympy.printing.str.t->self._print(term)
A:sympy.printing.str.sign->l.pop(0)
A:sympy.printing.str.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.str.s->StrReprPrinter(settings).doprint(expr)
A:sympy.printing.str.L->', '.join([_xab_tostr(l) for l in expr.limits])
A:sympy.printing.str.arg_string->', '.join((self._print(arg) for arg in args))
A:sympy.printing.str.args->', '.join((self._print(item) for item in items))
A:sympy.printing.str.x->list(x)
A:sympy.printing.str.prec->precedence(expr)
A:sympy.printing.str.(c, e)->_keep_coeff(-c, e).as_coeff_Mul()
A:sympy.printing.str.expr->_keep_coeff(-c, e)
A:sympy.printing.str.a_str->list(map(lambda x: self.parenthesize(x, prec), a))
A:sympy.printing.str.b_str->list(map(lambda x: self.parenthesize(x, prec), b))
A:sympy.printing.str.last->StrReprPrinter(settings).doprint(expr).rfind('(')
A:sympy.printing.str.usefull->str(expr.array_form)
A:sympy.printing.str.numer->self.parenthesize(frac.numer, PRECEDENCE['Add'])
A:sympy.printing.str.denom->self.parenthesize(frac.denom, PRECEDENCE['Atom'] - 1)
A:sympy.printing.str.s_monom->'*'.join(s_monom)
A:sympy.printing.str.s_coeff->self._print(coeff)
A:sympy.printing.str.modifier->self._as_ordered_terms(expr, order=order).pop(0)
A:sympy.printing.str.e->self.parenthesize(expr.exp, PREC)
A:sympy.printing.str.dps->prec_to_dps(expr._prec)
A:sympy.printing.str.rv->sympy.mpmath.libmp.to_str(expr._mpf_, dps, strip_zeros=strip)
A:sympy.printing.str.items->sorted(s, key=default_sort_key)
A:sympy.printing.str.rep->self._print(p.rep)
A:sympy.printing.str.dom->self._print(p.dom)
A:sympy.printing.str.ring->self._print(p.ring)
A:sympy.printing.str.p->StrReprPrinter(settings)
sympy.printing.StrPrinter(Printer)
sympy.printing.StrPrinter._print_Add(self,expr,order=None)
sympy.printing.StrPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.StrPrinter._print_And(self,expr)
sympy.printing.StrPrinter._print_AppliedPredicate(self,expr)
sympy.printing.StrPrinter._print_BaseScalarField(self,field)
sympy.printing.StrPrinter._print_BaseVectorField(self,field)
sympy.printing.StrPrinter._print_Basic(self,expr)
sympy.printing.StrPrinter._print_BlockMatrix(self,B)
sympy.printing.StrPrinter._print_BooleanFalse(self,expr)
sympy.printing.StrPrinter._print_BooleanTrue(self,expr)
sympy.printing.StrPrinter._print_Catalan(self,expr)
sympy.printing.StrPrinter._print_Category(self,category)
sympy.printing.StrPrinter._print_Complement(self,expr)
sympy.printing.StrPrinter._print_ComplexInfinity(self,expr)
sympy.printing.StrPrinter._print_Cycle(self,expr)
sympy.printing.StrPrinter._print_DMF(self,expr)
sympy.printing.StrPrinter._print_DMP(self,p)
sympy.printing.StrPrinter._print_DeferredVector(self,expr)
sympy.printing.StrPrinter._print_Derivative(self,expr)
sympy.printing.StrPrinter._print_Dict(self,expr)
sympy.printing.StrPrinter._print_Differential(self,diff)
sympy.printing.StrPrinter._print_Dimension(self,expr)
sympy.printing.StrPrinter._print_Dummy(self,expr)
sympy.printing.StrPrinter._print_EulerGamma(self,expr)
sympy.printing.StrPrinter._print_Exp1(self,expr)
sympy.printing.StrPrinter._print_ExprCondPair(self,expr)
sympy.printing.StrPrinter._print_FiniteSet(self,s)
sympy.printing.StrPrinter._print_Float(self,expr)
sympy.printing.StrPrinter._print_FracElement(self,frac)
sympy.printing.StrPrinter._print_FracField(self,field)
sympy.printing.StrPrinter._print_Fraction(self,expr)
sympy.printing.StrPrinter._print_Function(self,expr)
sympy.printing.StrPrinter._print_GeometryEntity(self,expr)
sympy.printing.StrPrinter._print_GoldenRatio(self,expr)
sympy.printing.StrPrinter._print_GroebnerBasis(self,basis)
sympy.printing.StrPrinter._print_HadamardProduct(self,expr)
sympy.printing.StrPrinter._print_Identity(self,expr)
sympy.printing.StrPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.StrPrinter._print_ImaginaryUnit(self,expr)
sympy.printing.StrPrinter._print_Infinity(self,expr)
sympy.printing.StrPrinter._print_Integer(self,expr)
sympy.printing.StrPrinter._print_Integral(self,expr)
sympy.printing.StrPrinter._print_Interval(self,i)
sympy.printing.StrPrinter._print_Inverse(self,I)
sympy.printing.StrPrinter._print_Lambda(self,obj)
sympy.printing.StrPrinter._print_LatticeOp(self,expr)
sympy.printing.StrPrinter._print_Limit(self,expr)
sympy.printing.StrPrinter._print_MatAdd(self,expr)
sympy.printing.StrPrinter._print_MatMul(self,expr)
sympy.printing.StrPrinter._print_MatPow(self,expr)
sympy.printing.StrPrinter._print_MatrixBase(self,expr)
sympy.printing.StrPrinter._print_MatrixElement(self,expr)
sympy.printing.StrPrinter._print_MatrixSlice(self,expr)
sympy.printing.StrPrinter._print_Mul(self,expr)
sympy.printing.StrPrinter._print_NaN(self,expr)
sympy.printing.StrPrinter._print_NamedMorphism(self,morphism)
sympy.printing.StrPrinter._print_NegativeInfinity(self,expr)
sympy.printing.StrPrinter._print_Normal(self,expr)
sympy.printing.StrPrinter._print_Object(self,object)
sympy.printing.StrPrinter._print_Or(self,expr)
sympy.printing.StrPrinter._print_Order(self,expr)
sympy.printing.StrPrinter._print_PDF(self,expr)
sympy.printing.StrPrinter._print_Permutation(self,expr)
sympy.printing.StrPrinter._print_PermutationGroup(self,expr)
sympy.printing.StrPrinter._print_Pi(self,expr)
sympy.printing.StrPrinter._print_Poly(self,expr)
sympy.printing.StrPrinter._print_PolyElement(self,poly)
sympy.printing.StrPrinter._print_PolyRing(self,ring)
sympy.printing.StrPrinter._print_Pow(self,expr,rational=False)
sympy.printing.StrPrinter._print_Predicate(self,expr)
sympy.printing.StrPrinter._print_ProductSet(self,p)
sympy.printing.StrPrinter._print_PythonRational(self,expr)
sympy.printing.StrPrinter._print_RandomDomain(self,d)
sympy.printing.StrPrinter._print_Rational(self,expr)
sympy.printing.StrPrinter._print_Relational(self,expr)
sympy.printing.StrPrinter._print_RootOf(self,expr)
sympy.printing.StrPrinter._print_RootSum(self,expr)
sympy.printing.StrPrinter._print_Sample(self,expr)
sympy.printing.StrPrinter._print_SparseMatrix(self,expr)
sympy.printing.StrPrinter._print_Sum(self,expr)
sympy.printing.StrPrinter._print_Symbol(self,expr)
sympy.printing.StrPrinter._print_TensAdd(self,expr)
sympy.printing.StrPrinter._print_TensMul(self,expr)
sympy.printing.StrPrinter._print_TensorHead(self,expr)
sympy.printing.StrPrinter._print_TensorIndex(self,expr)
sympy.printing.StrPrinter._print_Tr(self,expr)
sympy.printing.StrPrinter._print_Transpose(self,T)
sympy.printing.StrPrinter._print_Tuple(self,expr)
sympy.printing.StrPrinter._print_Uniform(self,expr)
sympy.printing.StrPrinter._print_Union(self,expr)
sympy.printing.StrPrinter._print_Unit(self,expr)
sympy.printing.StrPrinter._print_Wild(self,expr)
sympy.printing.StrPrinter._print_WildFunction(self,expr)
sympy.printing.StrPrinter._print_Zero(self,expr)
sympy.printing.StrPrinter._print_ZeroMatrix(self,expr)
sympy.printing.StrPrinter._print_dict(self,d)
sympy.printing.StrPrinter._print_int(self,expr)
sympy.printing.StrPrinter._print_list(self,expr)
sympy.printing.StrPrinter._print_mpq(self,expr)
sympy.printing.StrPrinter._print_mpz(self,expr)
sympy.printing.StrPrinter._print_set(self,s)
sympy.printing.StrPrinter._print_str(self,expr)
sympy.printing.StrPrinter._print_tuple(self,expr)
sympy.printing.StrPrinter.emptyPrinter(self,expr)
sympy.printing.StrPrinter.parenthesize(self,item,level)
sympy.printing.StrPrinter.stringify(self,args,sep,level=0)
sympy.printing.str.StrPrinter(Printer)
sympy.printing.str.StrPrinter._print_Add(self,expr,order=None)
sympy.printing.str.StrPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.str.StrPrinter._print_And(self,expr)
sympy.printing.str.StrPrinter._print_AppliedPredicate(self,expr)
sympy.printing.str.StrPrinter._print_BaseScalarField(self,field)
sympy.printing.str.StrPrinter._print_BaseVectorField(self,field)
sympy.printing.str.StrPrinter._print_Basic(self,expr)
sympy.printing.str.StrPrinter._print_BlockMatrix(self,B)
sympy.printing.str.StrPrinter._print_BooleanFalse(self,expr)
sympy.printing.str.StrPrinter._print_BooleanTrue(self,expr)
sympy.printing.str.StrPrinter._print_Catalan(self,expr)
sympy.printing.str.StrPrinter._print_Category(self,category)
sympy.printing.str.StrPrinter._print_Complement(self,expr)
sympy.printing.str.StrPrinter._print_ComplexInfinity(self,expr)
sympy.printing.str.StrPrinter._print_Cycle(self,expr)
sympy.printing.str.StrPrinter._print_DMF(self,expr)
sympy.printing.str.StrPrinter._print_DMP(self,p)
sympy.printing.str.StrPrinter._print_DeferredVector(self,expr)
sympy.printing.str.StrPrinter._print_Derivative(self,expr)
sympy.printing.str.StrPrinter._print_Dict(self,expr)
sympy.printing.str.StrPrinter._print_Differential(self,diff)
sympy.printing.str.StrPrinter._print_Dimension(self,expr)
sympy.printing.str.StrPrinter._print_Dummy(self,expr)
sympy.printing.str.StrPrinter._print_EulerGamma(self,expr)
sympy.printing.str.StrPrinter._print_Exp1(self,expr)
sympy.printing.str.StrPrinter._print_ExprCondPair(self,expr)
sympy.printing.str.StrPrinter._print_FiniteSet(self,s)
sympy.printing.str.StrPrinter._print_Float(self,expr)
sympy.printing.str.StrPrinter._print_FracElement(self,frac)
sympy.printing.str.StrPrinter._print_FracField(self,field)
sympy.printing.str.StrPrinter._print_Fraction(self,expr)
sympy.printing.str.StrPrinter._print_Function(self,expr)
sympy.printing.str.StrPrinter._print_GeometryEntity(self,expr)
sympy.printing.str.StrPrinter._print_GoldenRatio(self,expr)
sympy.printing.str.StrPrinter._print_GroebnerBasis(self,basis)
sympy.printing.str.StrPrinter._print_HadamardProduct(self,expr)
sympy.printing.str.StrPrinter._print_Identity(self,expr)
sympy.printing.str.StrPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.str.StrPrinter._print_ImaginaryUnit(self,expr)
sympy.printing.str.StrPrinter._print_Infinity(self,expr)
sympy.printing.str.StrPrinter._print_Integer(self,expr)
sympy.printing.str.StrPrinter._print_Integral(self,expr)
sympy.printing.str.StrPrinter._print_Interval(self,i)
sympy.printing.str.StrPrinter._print_Inverse(self,I)
sympy.printing.str.StrPrinter._print_Lambda(self,obj)
sympy.printing.str.StrPrinter._print_LatticeOp(self,expr)
sympy.printing.str.StrPrinter._print_Limit(self,expr)
sympy.printing.str.StrPrinter._print_MatAdd(self,expr)
sympy.printing.str.StrPrinter._print_MatMul(self,expr)
sympy.printing.str.StrPrinter._print_MatPow(self,expr)
sympy.printing.str.StrPrinter._print_MatrixBase(self,expr)
sympy.printing.str.StrPrinter._print_MatrixElement(self,expr)
sympy.printing.str.StrPrinter._print_MatrixSlice(self,expr)
sympy.printing.str.StrPrinter._print_Mul(self,expr)
sympy.printing.str.StrPrinter._print_NaN(self,expr)
sympy.printing.str.StrPrinter._print_NamedMorphism(self,morphism)
sympy.printing.str.StrPrinter._print_NegativeInfinity(self,expr)
sympy.printing.str.StrPrinter._print_Normal(self,expr)
sympy.printing.str.StrPrinter._print_Object(self,object)
sympy.printing.str.StrPrinter._print_Or(self,expr)
sympy.printing.str.StrPrinter._print_Order(self,expr)
sympy.printing.str.StrPrinter._print_PDF(self,expr)
sympy.printing.str.StrPrinter._print_Permutation(self,expr)
sympy.printing.str.StrPrinter._print_PermutationGroup(self,expr)
sympy.printing.str.StrPrinter._print_Pi(self,expr)
sympy.printing.str.StrPrinter._print_Poly(self,expr)
sympy.printing.str.StrPrinter._print_PolyElement(self,poly)
sympy.printing.str.StrPrinter._print_PolyRing(self,ring)
sympy.printing.str.StrPrinter._print_Pow(self,expr,rational=False)
sympy.printing.str.StrPrinter._print_Predicate(self,expr)
sympy.printing.str.StrPrinter._print_ProductSet(self,p)
sympy.printing.str.StrPrinter._print_PythonRational(self,expr)
sympy.printing.str.StrPrinter._print_RandomDomain(self,d)
sympy.printing.str.StrPrinter._print_Rational(self,expr)
sympy.printing.str.StrPrinter._print_Relational(self,expr)
sympy.printing.str.StrPrinter._print_RootOf(self,expr)
sympy.printing.str.StrPrinter._print_RootSum(self,expr)
sympy.printing.str.StrPrinter._print_Sample(self,expr)
sympy.printing.str.StrPrinter._print_SparseMatrix(self,expr)
sympy.printing.str.StrPrinter._print_Sum(self,expr)
sympy.printing.str.StrPrinter._print_Symbol(self,expr)
sympy.printing.str.StrPrinter._print_TensAdd(self,expr)
sympy.printing.str.StrPrinter._print_TensMul(self,expr)
sympy.printing.str.StrPrinter._print_TensorHead(self,expr)
sympy.printing.str.StrPrinter._print_TensorIndex(self,expr)
sympy.printing.str.StrPrinter._print_Tr(self,expr)
sympy.printing.str.StrPrinter._print_Transpose(self,T)
sympy.printing.str.StrPrinter._print_Tuple(self,expr)
sympy.printing.str.StrPrinter._print_Uniform(self,expr)
sympy.printing.str.StrPrinter._print_Union(self,expr)
sympy.printing.str.StrPrinter._print_Unit(self,expr)
sympy.printing.str.StrPrinter._print_Wild(self,expr)
sympy.printing.str.StrPrinter._print_WildFunction(self,expr)
sympy.printing.str.StrPrinter._print_Zero(self,expr)
sympy.printing.str.StrPrinter._print_ZeroMatrix(self,expr)
sympy.printing.str.StrPrinter._print_dict(self,d)
sympy.printing.str.StrPrinter._print_int(self,expr)
sympy.printing.str.StrPrinter._print_list(self,expr)
sympy.printing.str.StrPrinter._print_mpq(self,expr)
sympy.printing.str.StrPrinter._print_mpz(self,expr)
sympy.printing.str.StrPrinter._print_set(self,s)
sympy.printing.str.StrPrinter._print_str(self,expr)
sympy.printing.str.StrPrinter._print_tuple(self,expr)
sympy.printing.str.StrPrinter.emptyPrinter(self,expr)
sympy.printing.str.StrPrinter.parenthesize(self,item,level)
sympy.printing.str.StrPrinter.stringify(self,args,sep,level=0)
sympy.printing.str.StrReprPrinter(StrPrinter)
sympy.printing.str.StrReprPrinter._print_str(self,s)
sympy.printing.str.sstr(expr,**settings)
sympy.printing.str.sstrrepr(expr,**settings)
sympy.sstr(expr,**settings)
sympy.sstrrepr(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/lambdarepr.py----------------------------------------
A:sympy.printing.lambdarepr.nstr->self._numexpr_functions.get(func_name, None)
A:sympy.printing.lambdarepr.lstr->super(NumExprPrinter, self).doprint(expr)
sympy.printing.lambdarepr.LambdaPrinter(StrPrinter)
sympy.printing.lambdarepr.LambdaPrinter._print_And(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_BooleanFalse(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_BooleanTrue(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_MatrixBase(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Not(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Or(self,expr)
sympy.printing.lambdarepr.LambdaPrinter._print_Piecewise(self,expr)
sympy.printing.lambdarepr.NumExprPrinter(LambdaPrinter)
sympy.printing.lambdarepr.NumExprPrinter._print_Function(self,e)
sympy.printing.lambdarepr.NumExprPrinter._print_ImaginaryUnit(self,expr)
sympy.printing.lambdarepr.NumExprPrinter._print_seq(self,seq,delimiter=',')
sympy.printing.lambdarepr.NumExprPrinter.blacklisted(self,expr)
sympy.printing.lambdarepr.NumExprPrinter.doprint(self,expr)
sympy.printing.lambdarepr.lambdarepr(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/precedence.py----------------------------------------
sympy.printing.precedence.precedence(item)
sympy.printing.precedence.precedence_Float(item)
sympy.printing.precedence.precedence_FracElement(item)
sympy.printing.precedence.precedence_Integer(item)
sympy.printing.precedence.precedence_Mul(item)
sympy.printing.precedence.precedence_PolyElement(item)
sympy.printing.precedence.precedence_Rational(item)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/conventions.py----------------------------------------
A:sympy.printing.conventions.pos_hat->len(text)
A:sympy.printing.conventions.pos_usc->len(text)
A:sympy.printing.conventions.pos_next->min(pos_hat, pos_usc)
A:sympy.printing.conventions.m->re.match('(^[a-zA-Z]+)([0-9]+)$', name)
A:sympy.printing.conventions.(name, sub)->re.match('(^[a-zA-Z]+)([0-9]+)$', name).groups()
sympy.printing.conventions.requires_partial(expr)
sympy.printing.conventions.split_super_sub(text)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/gtk.py----------------------------------------
A:sympy.printing.gtk.tmp->tempfile.mktemp()
sympy.print_gtk(x,start_viewer=True)
sympy.printing.gtk.print_gtk(x,start_viewer=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/mathematica.py----------------------------------------
A:sympy.printing.mathematica._number_symbols->set()
A:sympy.printing.mathematica._not_supported->set()
A:sympy.printing.mathematica.self.known_functions->dict(known_functions)
A:sympy.printing.mathematica.userfuncs->settings.get('user_functions', {})
A:sympy.printing.mathematica.PREC->precedence(expr)
A:sympy.printing.mathematica.(c, nc)->expr.args_cnc()
A:sympy.printing.mathematica.res->super(MCodePrinter, self)._print_Mul(expr.func(*c))
sympy.mathematica_code(expr,**settings)
sympy.printing.mathematica.MCodePrinter(self,settings={})
sympy.printing.mathematica.MCodePrinter.__init__(self,settings={})
sympy.printing.mathematica.MCodePrinter._print_Function(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Infinity(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Integral(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Mul(self,expr)
sympy.printing.mathematica.MCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Pi(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Pow(self,expr)
sympy.printing.mathematica.MCodePrinter._print_Sum(self,expr)
sympy.printing.mathematica.MCodePrinter._print_list(self,expr)
sympy.printing.mathematica.mathematica_code(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/dot.py----------------------------------------
A:sympy.printing.dot.args->sorted(x.args, key=default_sort_key)
A:sympy.printing.dot.style->styleof(expr, styles)
A:sympy.printing.dot.label->labelfunc(expr)
A:sympy.printing.dot.expr_str->purestr(expr)
sympy.printing.dot.attrprint(d,delimiter=',')
sympy.printing.dot.dotedges(expr,atom=lambdax:notisinstance(x,Basic),pos=(),repeat=True)
sympy.printing.dot.dotnode(expr,styles=default_styles,labelfunc=str,pos=(),repeat=True)
sympy.printing.dot.dotprint(expr,styles=default_styles,atom=lambdax:notisinstance(x,Basic),maxdepth=None,repeat=True,labelfunc=str,**kwargs)
sympy.printing.dot.purestr(x)
sympy.printing.dot.styleof(expr,styles=default_styles)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tree.py----------------------------------------
A:sympy.printing.tree.x->s.split('\n')
sympy.print_tree(node)
sympy.printing.tree.pprint_nodes(subtrees)
sympy.printing.tree.print_node(node)
sympy.printing.tree.print_tree(node)
sympy.printing.tree.tree(node)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/codeprinter.py----------------------------------------
A:sympy.printing.codeprinter.lhs->_sympify(lhs)
A:sympy.printing.codeprinter.rhs->_sympify(rhs)
A:sympy.printing.codeprinter.self.reserved_words->set()
A:sympy.printing.codeprinter.assign_to->sympy.core.C.Symbol(assign_to)
A:sympy.printing.codeprinter.expr->_keep_coeff(-c, e)
A:sympy.printing.codeprinter.self._not_supported->set()
A:sympy.printing.codeprinter.self._number_symbols->set()
A:sympy.printing.codeprinter.lines->self._format_code(lines)
A:sympy.printing.codeprinter.result->'\n'.join(lines)
A:sympy.printing.codeprinter.indices->self._sort_optimized(d, expr)
A:sympy.printing.codeprinter.dummies->get_contraction_structure(expr)
A:sympy.printing.codeprinter.(openloop, closeloop)->self._get_loop_opening_ending(indices)
A:sympy.printing.codeprinter.text->self._get_statement('%s = %s' % (lhs_printed, text))
A:sympy.printing.codeprinter.lhs_printed->self._print(assign_to)
A:sympy.printing.codeprinter.(openloop_d, closeloop_d)->self._get_loop_opening_ending(indices)
A:sympy.printing.codeprinter.(rinds, junk)->get_indices(expr)
A:sympy.printing.codeprinter.(linds, junk)->get_indices(assign_to)
A:sympy.printing.codeprinter.arrays->_keep_coeff(-c, e).atoms(C.Indexed)
A:sympy.printing.codeprinter.temp->Assignment(lhs[i, j], rhs[i, j])
A:sympy.printing.codeprinter.code0->self._print(temp)
A:sympy.printing.codeprinter.lhs_code->self._print(lhs)
A:sympy.printing.codeprinter.rhs_code->self._print(rhs)
A:sympy.printing.codeprinter.name->super(CodePrinter, self)._print_Symbol(expr)
A:sympy.printing.codeprinter.PREC->precedence(expr)
A:sympy.printing.codeprinter.prec->precedence(expr)
A:sympy.printing.codeprinter.(c, e)->_keep_coeff(-c, e).as_coeff_Mul()
A:sympy.printing.codeprinter.args->sympy.core.Mul.make_args(expr)
sympy.printing.codeprinter.Assignment(cls,lhs,rhs=0,**assumptions)
sympy.printing.codeprinter.Assignment.__new__(cls,lhs,rhs=0,**assumptions)
sympy.printing.codeprinter.AssignmentError(Exception)
sympy.printing.codeprinter.CodePrinter(self,settings=None)
sympy.printing.codeprinter.CodePrinter.__init__(self,settings=None)
sympy.printing.codeprinter.CodePrinter._declare_number_const(self,name,value)
sympy.printing.codeprinter.CodePrinter._doprint_loops(self,expr,assign_to=None)
sympy.printing.codeprinter.CodePrinter._format_code(self,lines)
sympy.printing.codeprinter.CodePrinter._get_comment(self,text)
sympy.printing.codeprinter.CodePrinter._get_expression_indices(self,expr,assign_to)
sympy.printing.codeprinter.CodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.codeprinter.CodePrinter._get_statement(self,codestring)
sympy.printing.codeprinter.CodePrinter._print_And(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Assignment(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Catalan(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Dummy(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Equivalent(self,expr)
sympy.printing.codeprinter.CodePrinter._print_EulerGamma(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Exp1(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Function(self,expr)
sympy.printing.codeprinter.CodePrinter._print_GoldenRatio(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Mul(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Not(self,expr)
sympy.printing.codeprinter.CodePrinter._print_NumberSymbol(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Or(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Pi(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Symbol(self,expr)
sympy.printing.codeprinter.CodePrinter._print_Xor(self,expr)
sympy.printing.codeprinter.CodePrinter._print_not_supported(self,expr)
sympy.printing.codeprinter.CodePrinter._rate_index_position(self,p)
sympy.printing.codeprinter.CodePrinter._sort_optimized(self,indices,expr)
sympy.printing.codeprinter.CodePrinter.doprint(self,expr,assign_to=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/theanocode.py----------------------------------------
A:sympy.printing.theanocode.theano->import_module('theano')
A:sympy.printing.theanocode.self.cache->kwargs.pop('cache', dict())
A:sympy.printing.theanocode.dtype->dtypes.get(X, 'floatX')
A:sympy.printing.theanocode.broadcastable->dim_handling(inputs, **kwargs).get(s, ())
A:sympy.printing.theanocode.value->tt.Tensor(dtype, (False, False))(X.name)
A:sympy.printing.theanocode.result->tt.dot(result, child)
A:sympy.printing.theanocode.parent->self._print(expr.parent, **kwargs)
A:sympy.printing.theanocode.rowslice->self._print(slice(*expr.rowslice), **kwargs)
A:sympy.printing.theanocode.colslice->self._print(slice(*expr.colslice), **kwargs)
A:sympy.printing.theanocode.rv->tt.Rop(rv, var, tt.ones_like(var))
A:sympy.printing.theanocode.var->self._print(var, **kwargs)
A:sympy.printing.theanocode.dims->dict(zip(inputs, [dim] * len(inputs)))
A:sympy.printing.theanocode.maxdim->max(dims.values())
A:sympy.printing.theanocode.broadcastables->dim_handling(inputs, **kwargs)
A:sympy.printing.theanocode.theano_kwargs->dict(((k, v) for (k, v) in kwargs.items() if k not in dim_names))
A:sympy.printing.theanocode.code->partial(theano_code, cache=cache, dtypes=dtypes, broadcastables=broadcastables)
A:sympy.printing.theanocode.tinputs->list(map(code, inputs))
A:sympy.printing.theanocode.toutputs->list(map(code, outputs))
sympy.printing.theanocode.TheanoPrinter(self,*args,**kwargs)
sympy.printing.theanocode.TheanoPrinter.__init__(self,*args,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_AppliedUndef(self,s,dtypes={},broadcastables={})
sympy.printing.theanocode.TheanoPrinter._print_Basic(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_BlockMatrix(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_DenseMatrix(self,X,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Derivative(self,deriv,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Integer(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatMul(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatrixSlice(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_MatrixSymbol(self,X,dtypes={},**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Number(self,n,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Pi(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Piecewise(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Rational(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_Symbol(self,s,dtypes={},broadcastables={})
sympy.printing.theanocode.TheanoPrinter._print_factorial(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter._print_slice(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter.doprint(self,expr,**kwargs)
sympy.printing.theanocode.TheanoPrinter.emptyPrinter(self,expr)
sympy.printing.theanocode.dim_handling(inputs,dim=None,dims={},broadcastables={},keys=(),**kwargs)
sympy.printing.theanocode.theano_code(expr,cache=global_cache,**kwargs)
sympy.printing.theanocode.theano_function(inputs,outputs,dtypes={},cache=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/latex.py----------------------------------------
A:sympy.printing.latex.other_symbols->set(['aleph', 'beth', 'daleth', 'gimel', 'ell', 'eth', 'hbar', 'hslash', 'mho', 'wp'])
A:sympy.printing.latex.greek_letters_set->frozenset(greeks)
A:sympy.printing.latex.tex->tex_greek_dictionary.get(s)
A:sympy.printing.latex.terms->list(expr.args)
A:sympy.printing.latex.dps->prec_to_dps(expr._prec)
A:sympy.printing.latex.str_real->sympy.mpmath.libmp.to_str(expr._mpf_, dps, strip_zeros=True)
A:sympy.printing.latex.(mant, exp)->sympy.mpmath.libmp.to_str(expr._mpf_, dps, strip_zeros=True).split('e')
A:sympy.printing.latex.(coeff, _)->self._print(root.expr).as_coeff_Mul()
A:sympy.printing.latex.(numer, denom)->fraction(expr, exact=True)
A:sympy.printing.latex.args->', '.join([expr] + gens + [domain])
A:sympy.printing.latex.term_tex->self._print(term)
A:sympy.printing.latex.snumer->convert(numer)
A:sympy.printing.latex.sdenom->convert(denom)
A:sympy.printing.latex.ldenom->len(sdenom.split())
A:sympy.printing.latex.base->self._print(expr.base)
A:sympy.printing.latex.items->', '.join(map(self._print, items))
A:sympy.printing.latex.inneritems->list(vect.components.items())
A:sympy.printing.latex.outstr->''.join(o1)
A:sympy.printing.latex.dim->len(expr.variables)
A:sympy.printing.latex.latex_expr->self._print(expr)
A:sympy.printing.latex.latex_subs->'\\\\ '.join((e[0] + '=' + e[1] for e in zip(latex_old, latex_new)))
A:sympy.printing.latex.func->self._deal_with_super_sub(func)
A:sympy.printing.latex.name->translate(name)
A:sympy.printing.latex.symbols->', '.join(map(self._print, expr.symbols))
A:sympy.printing.latex.nu->self._print(expr.args[0])
A:sympy.printing.latex.(s, z)->map(self._print, expr.args)
A:sympy.printing.latex.(n, a, b, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, a, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, x)->map(self._print, expr.args)
A:sympy.printing.latex.(n, m, theta, phi)->map(self._print, expr.args)
A:sympy.printing.latex.s->self._print(expr.expr)
A:sympy.printing.latex.(name, supers, subs)->split_super_sub(string)
A:sympy.printing.latex.out_str->out_str.replace('%s', '{' + 'c' * expr.cols + '}%s').replace('%s', '{' + 'c' * expr.cols + '}%s')
A:sympy.printing.latex.x->list(x)
A:sympy.printing.latex.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.latex.i->self._print(expr.args[0])
A:sympy.printing.latex.j->self._print(expr.args[1])
A:sympy.printing.latex.indices->map(self._print, expr.args)
A:sympy.printing.latex.it->iter(s)
A:sympy.printing.latex.printset->tuple(s)
A:sympy.printing.latex.domain->self._print(morphism.domain)
A:sympy.printing.latex.expr->self._print(root.expr)
A:sympy.printing.latex.gens->list(map(self._print, poly.gens))
A:sympy.printing.latex.numer->self._print(frac.numer)
A:sympy.printing.latex.denom->self._print(frac.denom)
A:sympy.printing.latex.codomain->self._print(morphism.codomain)
A:sympy.printing.latex.pretty_name->self._print(Symbol(morphism.name))
A:sympy.printing.latex.pretty_morphism->self._print_Morphism(morphism)
A:sympy.printing.latex.latex_result->self._print(diagram.premises)
A:sympy.printing.latex.string->self._print(field)
A:sympy.printing.latex.contents->self._print(p.args[0])
sympy.latex(expr,**settings)
sympy.latex.LatexPrinter(self,settings=None)
sympy.latex.LatexPrinter._deal_with_super_sub(self,string)
sympy.latex.LatexPrinter._do_exponent(self,expr,exp)
sympy.latex.LatexPrinter._hprint_BesselBase(self,expr,exp,sym)
sympy.latex.LatexPrinter._hprint_Function(self,func)
sympy.latex.LatexPrinter._hprint_airy(self,expr,exp=None,notation='')
sympy.latex.LatexPrinter._hprint_airy_prime(self,expr,exp=None,notation='')
sympy.latex.LatexPrinter._hprint_vec(self,vec)
sympy.latex.LatexPrinter._mul_is_clean(self,expr)
sympy.latex.LatexPrinter._needs_brackets(self,expr)
sympy.latex.LatexPrinter._needs_function_brackets(self,expr)
sympy.latex.LatexPrinter._needs_mul_brackets(self,expr,last=False)
sympy.latex.LatexPrinter._pow_is_clean(self,expr)
sympy.latex.LatexPrinter._print_Abs(self,expr,exp=None)
sympy.latex.LatexPrinter._print_Add(self,expr,order=None)
sympy.latex.LatexPrinter._print_Adjoint(self,expr)
sympy.latex.LatexPrinter._print_And(self,e)
sympy.latex.LatexPrinter._print_BaseScalarField(self,field)
sympy.latex.LatexPrinter._print_BaseVectorField(self,field)
sympy.latex.LatexPrinter._print_BasisDependent(self,expr)
sympy.latex.LatexPrinter._print_BlockMatrix(self,expr)
sympy.latex.LatexPrinter._print_Category(self,morphism)
sympy.latex.LatexPrinter._print_Complement(self,u)
sympy.latex.LatexPrinter._print_ComplexField(self,expr)
sympy.latex.LatexPrinter._print_CompositeMorphism(self,morphism)
sympy.latex.LatexPrinter._print_Contains(self,e)
sympy.latex.LatexPrinter._print_CosineTransform(self,expr)
sympy.latex.LatexPrinter._print_DMF(self,p)
sympy.latex.LatexPrinter._print_DMP(self,p)
sympy.latex.LatexPrinter._print_Derivative(self,expr)
sympy.latex.LatexPrinter._print_Diagram(self,diagram)
sympy.latex.LatexPrinter._print_DiagramGrid(self,grid)
sympy.latex.LatexPrinter._print_Dict(self,expr)
sympy.latex.LatexPrinter._print_Differential(self,diff)
sympy.latex.LatexPrinter._print_DiracDelta(self,expr,exp=None)
sympy.latex.LatexPrinter._print_EmptySet(self,e)
sympy.latex.LatexPrinter._print_Equivalent(self,e,altchar=None)
sympy.latex.LatexPrinter._print_ExpBase(self,expr,exp=None)
sympy.latex.LatexPrinter._print_FallingFactorial(self,expr,exp=None)
sympy.latex.LatexPrinter._print_FiniteField(self,expr)
sympy.latex.LatexPrinter._print_FiniteSet(self,s)
sympy.latex.LatexPrinter._print_Float(self,expr)
sympy.latex.LatexPrinter._print_FourierTransform(self,expr)
sympy.latex.LatexPrinter._print_FracElement(self,frac)
sympy.latex.LatexPrinter._print_FractionField(self,expr)
sympy.latex.LatexPrinter._print_FreeModule(self,M)
sympy.latex.LatexPrinter._print_FreeModuleElement(self,m)
sympy.latex.LatexPrinter._print_Function(self,expr,exp=None)
sympy.latex.LatexPrinter._print_FunctionClass(self,expr)
sympy.latex.LatexPrinter._print_HadamardProduct(self,expr)
sympy.latex.LatexPrinter._print_Heaviside(self,expr,exp=None)
sympy.latex.LatexPrinter._print_Identity(self,I)
sympy.latex.LatexPrinter._print_IdentityMorphism(self,morphism)
sympy.latex.LatexPrinter._print_ImageSet(self,s)
sympy.latex.LatexPrinter._print_Implies(self,e,altchar=None)
sympy.latex.LatexPrinter._print_Indexed(self,expr)
sympy.latex.LatexPrinter._print_IndexedBase(self,expr)
sympy.latex.LatexPrinter._print_IntegerRing(self,expr)
sympy.latex.LatexPrinter._print_Integers(self,i)
sympy.latex.LatexPrinter._print_Integral(self,expr)
sympy.latex.LatexPrinter._print_Intersection(self,u)
sympy.latex.LatexPrinter._print_Interval(self,i)
sympy.latex.LatexPrinter._print_InverseCosineTransform(self,expr)
sympy.latex.LatexPrinter._print_InverseFourierTransform(self,expr)
sympy.latex.LatexPrinter._print_InverseLaplaceTransform(self,expr)
sympy.latex.LatexPrinter._print_InverseMellinTransform(self,expr)
sympy.latex.LatexPrinter._print_InverseSineTransform(self,expr)
sympy.latex.LatexPrinter._print_KroneckerDelta(self,expr,exp=None)
sympy.latex.LatexPrinter._print_Lambda(self,expr)
sympy.latex.LatexPrinter._print_LaplaceTransform(self,expr)
sympy.latex.LatexPrinter._print_LeviCivita(self,expr,exp=None)
sympy.latex.LatexPrinter._print_Limit(self,expr)
sympy.latex.LatexPrinter._print_LogOp(self,args,char)
sympy.latex.LatexPrinter._print_MatAdd(self,expr)
sympy.latex.LatexPrinter._print_MatMul(self,expr)
sympy.latex.LatexPrinter._print_MatPow(self,expr)
sympy.latex.LatexPrinter._print_MatrixBase(self,expr)
sympy.latex.LatexPrinter._print_MatrixElement(self,expr)
sympy.latex.LatexPrinter._print_MatrixHomomorphism(self,h)
sympy.latex.LatexPrinter._print_MatrixSlice(self,expr)
sympy.latex.LatexPrinter._print_Max(self,expr,exp=None)
sympy.latex.LatexPrinter._print_MellinTransform(self,expr)
sympy.latex.LatexPrinter._print_Min(self,expr,exp=None)
sympy.latex.LatexPrinter._print_ModuleImplementedIdeal(self,m)
sympy.latex.LatexPrinter._print_Morphism(self,morphism)
sympy.latex.LatexPrinter._print_Mul(self,expr)
sympy.latex.LatexPrinter._print_NamedMorphism(self,morphism)
sympy.latex.LatexPrinter._print_Naturals(self,n)
sympy.latex.LatexPrinter._print_NoneType(self,e)
sympy.latex.LatexPrinter._print_Not(self,e)
sympy.latex.LatexPrinter._print_Object(self,object)
sympy.latex.LatexPrinter._print_Or(self,e)
sympy.latex.LatexPrinter._print_Order(self,expr)
sympy.latex.LatexPrinter._print_Piecewise(self,expr)
sympy.latex.LatexPrinter._print_Poly(self,poly)
sympy.latex.LatexPrinter._print_PolyElement(self,poly)
sympy.latex.LatexPrinter._print_PolynomialRing(self,expr)
sympy.latex.LatexPrinter._print_PolynomialRingBase(self,expr)
sympy.latex.LatexPrinter._print_Pow(self,expr)
sympy.latex.LatexPrinter._print_Product(self,expr)
sympy.latex.LatexPrinter._print_ProductSet(self,p)
sympy.latex.LatexPrinter._print_QuotientModule(self,M)
sympy.latex.LatexPrinter._print_QuotientModuleElement(self,m)
sympy.latex.LatexPrinter._print_QuotientRing(self,R)
sympy.latex.LatexPrinter._print_QuotientRingElement(self,x)
sympy.latex.LatexPrinter._print_RandomDomain(self,d)
sympy.latex.LatexPrinter._print_Range(self,s)
sympy.latex.LatexPrinter._print_Rational(self,expr)
sympy.latex.LatexPrinter._print_RationalField(self,expr)
sympy.latex.LatexPrinter._print_RealField(self,expr)
sympy.latex.LatexPrinter._print_Reals(self,i)
sympy.latex.LatexPrinter._print_Relational(self,expr)
sympy.latex.LatexPrinter._print_RisingFactorial(self,expr,exp=None)
sympy.latex.LatexPrinter._print_RootOf(self,root)
sympy.latex.LatexPrinter._print_RootSum(self,expr)
sympy.latex.LatexPrinter._print_SineTransform(self,expr)
sympy.latex.LatexPrinter._print_SubModule(self,m)
sympy.latex.LatexPrinter._print_Subs(self,subs)
sympy.latex.LatexPrinter._print_Sum(self,expr)
sympy.latex.LatexPrinter._print_Symbol(self,expr)
sympy.latex.LatexPrinter._print_Tr(self,p)
sympy.latex.LatexPrinter._print_Transpose(self,expr)
sympy.latex.LatexPrinter._print_Tuple(self,expr)
sympy.latex.LatexPrinter._print_UndefinedFunction(self,expr)
sympy.latex.LatexPrinter._print_Union(self,u)
sympy.latex.LatexPrinter._print_Xor(self,e)
sympy.latex.LatexPrinter._print_Ynm(self,expr,exp=None)
sympy.latex.LatexPrinter._print_ZeroMatrix(self,Z)
sympy.latex.LatexPrinter._print_Znm(self,expr,exp=None)
sympy.latex.LatexPrinter._print_airyai(self,expr,exp=None)
sympy.latex.LatexPrinter._print_airyaiprime(self,expr,exp=None)
sympy.latex.LatexPrinter._print_airybi(self,expr,exp=None)
sympy.latex.LatexPrinter._print_airybiprime(self,expr,exp=None)
sympy.latex.LatexPrinter._print_assoc_laguerre(self,expr,exp=None)
sympy.latex.LatexPrinter._print_assoc_legendre(self,expr,exp=None)
sympy.latex.LatexPrinter._print_besseli(self,expr,exp=None)
sympy.latex.LatexPrinter._print_besselj(self,expr,exp=None)
sympy.latex.LatexPrinter._print_besselk(self,expr,exp=None)
sympy.latex.LatexPrinter._print_bessely(self,expr,exp=None)
sympy.latex.LatexPrinter._print_binomial(self,expr,exp=None)
sympy.latex.LatexPrinter._print_bool(self,e)
sympy.latex.LatexPrinter._print_catalan(self,expr)
sympy.latex.LatexPrinter._print_ceiling(self,expr,exp=None)
sympy.latex.LatexPrinter._print_chebyshevt(self,expr,exp=None)
sympy.latex.LatexPrinter._print_chebyshevu(self,expr,exp=None)
sympy.latex.LatexPrinter._print_conjugate(self,expr,exp=None)
sympy.latex.LatexPrinter._print_dict(self,d)
sympy.latex.LatexPrinter._print_dirichlet_eta(self,expr,exp=None)
sympy.latex.LatexPrinter._print_divisor_sigma(self,expr,exp=None)
sympy.latex.LatexPrinter._print_elliptic_e(self,expr,exp=None)
sympy.latex.LatexPrinter._print_elliptic_f(self,expr,exp=None)
sympy.latex.LatexPrinter._print_elliptic_k(self,expr,exp=None)
sympy.latex.LatexPrinter._print_elliptic_pi(self,expr,exp=None)
sympy.latex.LatexPrinter._print_euler(self,expr)
sympy.latex.LatexPrinter._print_expint(self,expr,exp=None)
sympy.latex.LatexPrinter._print_factorial(self,expr,exp=None)
sympy.latex.LatexPrinter._print_factorial2(self,expr,exp=None)
sympy.latex.LatexPrinter._print_floor(self,expr,exp=None)
sympy.latex.LatexPrinter._print_fresnelc(self,expr,exp=None)
sympy.latex.LatexPrinter._print_fresnels(self,expr,exp=None)
sympy.latex.LatexPrinter._print_gamma(self,expr,exp=None)
sympy.latex.LatexPrinter._print_gegenbauer(self,expr,exp=None)
sympy.latex.LatexPrinter._print_hankel1(self,expr,exp=None)
sympy.latex.LatexPrinter._print_hankel2(self,expr,exp=None)
sympy.latex.LatexPrinter._print_hermite(self,expr,exp=None)
sympy.latex.LatexPrinter._print_hyper(self,expr,exp=None)
sympy.latex.LatexPrinter._print_im(self,expr,exp=None)
sympy.latex.LatexPrinter._print_jacobi(self,expr,exp=None)
sympy.latex.LatexPrinter._print_jn(self,expr,exp=None)
sympy.latex.LatexPrinter._print_laguerre(self,expr,exp=None)
sympy.latex.LatexPrinter._print_legendre(self,expr,exp=None)
sympy.latex.LatexPrinter._print_lerchphi(self,expr,exp=None)
sympy.latex.LatexPrinter._print_list(self,expr)
sympy.latex.LatexPrinter._print_lowergamma(self,expr,exp=None)
sympy.latex.LatexPrinter._print_meijerg(self,expr,exp=None)
sympy.latex.LatexPrinter._print_polar_lift(self,expr,exp=None)
sympy.latex.LatexPrinter._print_polylog(self,expr,exp=None)
sympy.latex.LatexPrinter._print_re(self,expr,exp=None)
sympy.latex.LatexPrinter._print_set(self,s)
sympy.latex.LatexPrinter._print_subfactorial(self,expr,exp=None)
sympy.latex.LatexPrinter._print_totient(self,expr)
sympy.latex.LatexPrinter._print_tuple(self,expr)
sympy.latex.LatexPrinter._print_uppergamma(self,expr,exp=None)
sympy.latex.LatexPrinter._print_yn(self,expr,exp=None)
sympy.latex.LatexPrinter._print_zeta(self,expr,exp=None)
sympy.latex.LatexPrinter.doprint(self,expr)
sympy.latex.LatexPrinter.parenthesize(self,item,level)
sympy.latex.translate(s)
sympy.printing.latex.LatexPrinter(self,settings=None)
sympy.printing.latex.LatexPrinter.__init__(self,settings=None)
sympy.printing.latex.LatexPrinter._deal_with_super_sub(self,string)
sympy.printing.latex.LatexPrinter._do_exponent(self,expr,exp)
sympy.printing.latex.LatexPrinter._hprint_BesselBase(self,expr,exp,sym)
sympy.printing.latex.LatexPrinter._hprint_Function(self,func)
sympy.printing.latex.LatexPrinter._hprint_airy(self,expr,exp=None,notation='')
sympy.printing.latex.LatexPrinter._hprint_airy_prime(self,expr,exp=None,notation='')
sympy.printing.latex.LatexPrinter._hprint_vec(self,vec)
sympy.printing.latex.LatexPrinter._mul_is_clean(self,expr)
sympy.printing.latex.LatexPrinter._needs_brackets(self,expr)
sympy.printing.latex.LatexPrinter._needs_function_brackets(self,expr)
sympy.printing.latex.LatexPrinter._needs_mul_brackets(self,expr,last=False)
sympy.printing.latex.LatexPrinter._pow_is_clean(self,expr)
sympy.printing.latex.LatexPrinter._print_Abs(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Add(self,expr,order=None)
sympy.printing.latex.LatexPrinter._print_Adjoint(self,expr)
sympy.printing.latex.LatexPrinter._print_And(self,e)
sympy.printing.latex.LatexPrinter._print_BaseScalarField(self,field)
sympy.printing.latex.LatexPrinter._print_BaseVectorField(self,field)
sympy.printing.latex.LatexPrinter._print_BasisDependent(self,expr)
sympy.printing.latex.LatexPrinter._print_BlockMatrix(self,expr)
sympy.printing.latex.LatexPrinter._print_Category(self,morphism)
sympy.printing.latex.LatexPrinter._print_Complement(self,u)
sympy.printing.latex.LatexPrinter._print_ComplexField(self,expr)
sympy.printing.latex.LatexPrinter._print_CompositeMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Contains(self,e)
sympy.printing.latex.LatexPrinter._print_CosineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_DMF(self,p)
sympy.printing.latex.LatexPrinter._print_DMP(self,p)
sympy.printing.latex.LatexPrinter._print_Derivative(self,expr)
sympy.printing.latex.LatexPrinter._print_Diagram(self,diagram)
sympy.printing.latex.LatexPrinter._print_DiagramGrid(self,grid)
sympy.printing.latex.LatexPrinter._print_Dict(self,expr)
sympy.printing.latex.LatexPrinter._print_Differential(self,diff)
sympy.printing.latex.LatexPrinter._print_DiracDelta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_EmptySet(self,e)
sympy.printing.latex.LatexPrinter._print_Equivalent(self,e,altchar=None)
sympy.printing.latex.LatexPrinter._print_ExpBase(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_FallingFactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_FiniteField(self,expr)
sympy.printing.latex.LatexPrinter._print_FiniteSet(self,s)
sympy.printing.latex.LatexPrinter._print_Float(self,expr)
sympy.printing.latex.LatexPrinter._print_FourierTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_FracElement(self,frac)
sympy.printing.latex.LatexPrinter._print_FractionField(self,expr)
sympy.printing.latex.LatexPrinter._print_FreeModule(self,M)
sympy.printing.latex.LatexPrinter._print_FreeModuleElement(self,m)
sympy.printing.latex.LatexPrinter._print_Function(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_FunctionClass(self,expr)
sympy.printing.latex.LatexPrinter._print_HadamardProduct(self,expr)
sympy.printing.latex.LatexPrinter._print_Heaviside(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Identity(self,I)
sympy.printing.latex.LatexPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_ImageSet(self,s)
sympy.printing.latex.LatexPrinter._print_Implies(self,e,altchar=None)
sympy.printing.latex.LatexPrinter._print_Indexed(self,expr)
sympy.printing.latex.LatexPrinter._print_IndexedBase(self,expr)
sympy.printing.latex.LatexPrinter._print_IntegerRing(self,expr)
sympy.printing.latex.LatexPrinter._print_Integers(self,i)
sympy.printing.latex.LatexPrinter._print_Integral(self,expr)
sympy.printing.latex.LatexPrinter._print_Intersection(self,u)
sympy.printing.latex.LatexPrinter._print_Interval(self,i)
sympy.printing.latex.LatexPrinter._print_InverseCosineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseFourierTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseLaplaceTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseMellinTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_InverseSineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_KroneckerDelta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Lambda(self,expr)
sympy.printing.latex.LatexPrinter._print_LaplaceTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_LeviCivita(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_Limit(self,expr)
sympy.printing.latex.LatexPrinter._print_LogOp(self,args,char)
sympy.printing.latex.LatexPrinter._print_MatAdd(self,expr)
sympy.printing.latex.LatexPrinter._print_MatMul(self,expr)
sympy.printing.latex.LatexPrinter._print_MatPow(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixBase(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixElement(self,expr)
sympy.printing.latex.LatexPrinter._print_MatrixHomomorphism(self,h)
sympy.printing.latex.LatexPrinter._print_MatrixSlice(self,expr)
sympy.printing.latex.LatexPrinter._print_Max(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_MellinTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_Min(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ModuleImplementedIdeal(self,m)
sympy.printing.latex.LatexPrinter._print_Morphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Mul(self,expr)
sympy.printing.latex.LatexPrinter._print_NamedMorphism(self,morphism)
sympy.printing.latex.LatexPrinter._print_Naturals(self,n)
sympy.printing.latex.LatexPrinter._print_NoneType(self,e)
sympy.printing.latex.LatexPrinter._print_Not(self,e)
sympy.printing.latex.LatexPrinter._print_Object(self,object)
sympy.printing.latex.LatexPrinter._print_Or(self,e)
sympy.printing.latex.LatexPrinter._print_Order(self,expr)
sympy.printing.latex.LatexPrinter._print_Piecewise(self,expr)
sympy.printing.latex.LatexPrinter._print_Poly(self,poly)
sympy.printing.latex.LatexPrinter._print_PolyElement(self,poly)
sympy.printing.latex.LatexPrinter._print_PolynomialRing(self,expr)
sympy.printing.latex.LatexPrinter._print_PolynomialRingBase(self,expr)
sympy.printing.latex.LatexPrinter._print_Pow(self,expr)
sympy.printing.latex.LatexPrinter._print_Product(self,expr)
sympy.printing.latex.LatexPrinter._print_ProductSet(self,p)
sympy.printing.latex.LatexPrinter._print_QuotientModule(self,M)
sympy.printing.latex.LatexPrinter._print_QuotientModuleElement(self,m)
sympy.printing.latex.LatexPrinter._print_QuotientRing(self,R)
sympy.printing.latex.LatexPrinter._print_QuotientRingElement(self,x)
sympy.printing.latex.LatexPrinter._print_RandomDomain(self,d)
sympy.printing.latex.LatexPrinter._print_Range(self,s)
sympy.printing.latex.LatexPrinter._print_Rational(self,expr)
sympy.printing.latex.LatexPrinter._print_RationalField(self,expr)
sympy.printing.latex.LatexPrinter._print_RealField(self,expr)
sympy.printing.latex.LatexPrinter._print_Reals(self,i)
sympy.printing.latex.LatexPrinter._print_Relational(self,expr)
sympy.printing.latex.LatexPrinter._print_RisingFactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_RootOf(self,root)
sympy.printing.latex.LatexPrinter._print_RootSum(self,expr)
sympy.printing.latex.LatexPrinter._print_SineTransform(self,expr)
sympy.printing.latex.LatexPrinter._print_SubModule(self,m)
sympy.printing.latex.LatexPrinter._print_Subs(self,subs)
sympy.printing.latex.LatexPrinter._print_Sum(self,expr)
sympy.printing.latex.LatexPrinter._print_Symbol(self,expr)
sympy.printing.latex.LatexPrinter._print_Tr(self,p)
sympy.printing.latex.LatexPrinter._print_Transpose(self,expr)
sympy.printing.latex.LatexPrinter._print_Tuple(self,expr)
sympy.printing.latex.LatexPrinter._print_UndefinedFunction(self,expr)
sympy.printing.latex.LatexPrinter._print_Union(self,u)
sympy.printing.latex.LatexPrinter._print_Xor(self,e)
sympy.printing.latex.LatexPrinter._print_Ynm(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_ZeroMatrix(self,Z)
sympy.printing.latex.LatexPrinter._print_Znm(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airyai(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airyaiprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airybi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_airybiprime(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_assoc_laguerre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_assoc_legendre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besseli(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besselj(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_besselk(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bessely(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_binomial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_bool(self,e)
sympy.printing.latex.LatexPrinter._print_catalan(self,expr)
sympy.printing.latex.LatexPrinter._print_ceiling(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_chebyshevt(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_chebyshevu(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_conjugate(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_dict(self,d)
sympy.printing.latex.LatexPrinter._print_dirichlet_eta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_divisor_sigma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_e(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_f(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_k(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_elliptic_pi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_euler(self,expr)
sympy.printing.latex.LatexPrinter._print_expint(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_factorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_factorial2(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_floor(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_fresnelc(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_fresnels(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_gamma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_gegenbauer(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hankel1(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hankel2(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hermite(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_hyper(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_im(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_jacobi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_jn(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_laguerre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_legendre(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_lerchphi(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_list(self,expr)
sympy.printing.latex.LatexPrinter._print_lowergamma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_meijerg(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_polar_lift(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_polylog(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_re(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_set(self,s)
sympy.printing.latex.LatexPrinter._print_subfactorial(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_totient(self,expr)
sympy.printing.latex.LatexPrinter._print_tuple(self,expr)
sympy.printing.latex.LatexPrinter._print_uppergamma(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_yn(self,expr,exp=None)
sympy.printing.latex.LatexPrinter._print_zeta(self,expr,exp=None)
sympy.printing.latex.LatexPrinter.doprint(self,expr)
sympy.printing.latex.LatexPrinter.parenthesize(self,item,level)
sympy.printing.latex.latex(expr,**settings)
sympy.printing.latex.print_latex(expr,**settings)
sympy.printing.latex.translate(s)
sympy.printing.print_latex(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/repr.py----------------------------------------
A:sympy.printing.repr.args->map(self._print, args)
A:sympy.printing.repr.r->sympy.mpmath.libmp.to_str(expr._mpf_, repr_dps(expr._prec))
A:sympy.printing.repr.dps->prec_to_dps(expr._prec)
A:sympy.printing.repr.terms->list(poly.terms())
A:sympy.printing.repr.numer_terms->list(frac.numer.terms())
A:sympy.printing.repr.denom_terms->list(frac.denom.terms())
A:sympy.printing.repr.numer->self._print(numer_terms)
A:sympy.printing.repr.denom->self._print(denom_terms)
sympy.printing.repr.ReprPrinter(Printer)
sympy.printing.repr.ReprPrinter._print_Add(self,expr,order=None)
sympy.printing.repr.ReprPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.repr.ReprPrinter._print_AppliedPredicate(self,expr)
sympy.printing.repr.ReprPrinter._print_AtomicExpr(self,expr)
sympy.printing.repr.ReprPrinter._print_BooleanFalse(self,expr)
sympy.printing.repr.ReprPrinter._print_BooleanTrue(self,expr)
sympy.printing.repr.ReprPrinter._print_Float(self,expr)
sympy.printing.repr.ReprPrinter._print_FracElement(self,frac)
sympy.printing.repr.ReprPrinter._print_FracField(self,field)
sympy.printing.repr.ReprPrinter._print_Fraction(self,expr)
sympy.printing.repr.ReprPrinter._print_Function(self,expr)
sympy.printing.repr.ReprPrinter._print_FunctionClass(self,expr)
sympy.printing.repr.ReprPrinter._print_Half(self,expr)
sympy.printing.repr.ReprPrinter._print_Integer(self,expr)
sympy.printing.repr.ReprPrinter._print_MatrixBase(self,expr)
sympy.printing.repr.ReprPrinter._print_Mul(self,expr,order=None)
sympy.printing.repr.ReprPrinter._print_NaN(self,expr)
sympy.printing.repr.ReprPrinter._print_NumberSymbol(self,expr)
sympy.printing.repr.ReprPrinter._print_PolyElement(self,poly)
sympy.printing.repr.ReprPrinter._print_PolyRing(self,ring)
sympy.printing.repr.ReprPrinter._print_Predicate(self,expr)
sympy.printing.repr.ReprPrinter._print_PythonRational(self,expr)
sympy.printing.repr.ReprPrinter._print_Rational(self,expr)
sympy.printing.repr.ReprPrinter._print_RationalConstant(self,expr)
sympy.printing.repr.ReprPrinter._print_Sum2(self,expr)
sympy.printing.repr.ReprPrinter._print_Symbol(self,expr)
sympy.printing.repr.ReprPrinter._print_WildFunction(self,expr)
sympy.printing.repr.ReprPrinter._print_list(self,expr)
sympy.printing.repr.ReprPrinter._print_str(self,expr)
sympy.printing.repr.ReprPrinter._print_tuple(self,expr)
sympy.printing.repr.ReprPrinter.emptyPrinter(self,expr)
sympy.printing.repr.ReprPrinter.reprify(self,args,sep)
sympy.printing.repr.srepr(expr,**settings)
sympy.srepr(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/octave.py----------------------------------------
A:sympy.printing.octave.self.known_functions->dict(zip(known_fcns_src1, known_fcns_src1))
A:sympy.printing.octave.userfuncs->settings.get('user_functions', {})
A:sympy.printing.octave.(var, start, stop)->map(self._print, [i.label, i.lower + 1, i.upper + 1])
A:sympy.printing.octave.prec->precedence(expr)
A:sympy.printing.octave.(c, e)->_keep_coeff(-c, e).as_coeff_Mul()
A:sympy.printing.octave.expr->_keep_coeff(-c, e)
A:sympy.printing.octave.args->sympy.core.Mul.make_args(expr)
A:sympy.printing.octave.a_str->list(map(lambda x: self.parenthesize(x, prec), a))
A:sympy.printing.octave.b_str->list(map(lambda x: self.parenthesize(x, prec), b))
A:sympy.printing.octave.PREC->precedence(expr)
A:sympy.printing.octave.temp->sympy.core.C.Piecewise(*zip(expressions, conditions))
A:sympy.printing.octave.lhs_code->self._print(lhs)
A:sympy.printing.octave.rhs_code->self._print(rhs)
A:sympy.printing.octave.L->A.col_list()
A:sympy.printing.octave.I->Matrix([[k[0] + 1 for k in L]])
A:sympy.printing.octave.J->Matrix([[k[1] + 1 for k in L]])
A:sympy.printing.octave.AIJ->Matrix([[k[2] for k in L]])
A:sympy.printing.octave.lstr->self._print(l)
A:sympy.printing.octave.code0->self._print(e)
A:sympy.printing.octave.code_lines->self.indent_code(code.splitlines(True))
sympy.octave_code(expr,assign_to=None,**settings)
sympy.printing.octave.OctaveCodePrinter(self,settings={})
sympy.printing.octave.OctaveCodePrinter.__init__(self,settings={})
sympy.printing.octave.OctaveCodePrinter._declare_number_const(self,name,value)
sympy.printing.octave.OctaveCodePrinter._format_code(self,lines)
sympy.printing.octave.OctaveCodePrinter._get_comment(self,text)
sympy.printing.octave.OctaveCodePrinter._get_loop_opening_ending(self,indices)
sympy.printing.octave.OctaveCodePrinter._get_statement(self,codestring)
sympy.printing.octave.OctaveCodePrinter._print_Assignment(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_BooleanFalse(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_BooleanTrue(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Exp1(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_GoldenRatio(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Identity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Idx(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_ImaginaryUnit(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Indexed(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Infinity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatPow(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatrixBase(self,A)
sympy.printing.octave.OctaveCodePrinter._print_MatrixElement(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_MatrixSlice(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Mul(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_NaN(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_NegativeInfinity(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_NumberSymbol(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Pi(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Piecewise(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_Pow(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_SparseMatrix(self,A)
sympy.printing.octave.OctaveCodePrinter._print_bool(self,expr)
sympy.printing.octave.OctaveCodePrinter._print_list(self,expr)
sympy.printing.octave.OctaveCodePrinter._rate_index_position(self,p)
sympy.printing.octave.OctaveCodePrinter._traverse_matrix_indices(self,mat)
sympy.printing.octave.OctaveCodePrinter.indent_code(self,code)
sympy.printing.octave.octave_code(expr,assign_to=None,**settings)
sympy.printing.octave.print_octave_code(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/python.py----------------------------------------
A:sympy.printing.python.f->getattr(StrPrinter, f_name)
A:sympy.printing.python.symbol->self._str(expr)
A:sympy.printing.python.printer->PythonPrinter(settings)
A:sympy.printing.python.exprp->expr.subs(renamings)
A:sympy.printing.python.renamings[sympy.Symbol(symbolname)]->sympy.Symbol(newsymbolname)
A:sympy.printing.python.renamings[sympy.Function(functionname)]->sympy.Function(newfunctionname)
sympy.print_python(expr,**settings)
sympy.printing.python.PythonPrinter(self,settings=None)
sympy.printing.python.PythonPrinter.__init__(self,settings=None)
sympy.printing.python.PythonPrinter._print_Function(self,expr)
sympy.printing.python.PythonPrinter._print_Symbol(self,expr)
sympy.printing.python.PythonPrinter._print_module(self,expr)
sympy.printing.python.print_python(expr,**settings)
sympy.printing.python.python(expr,**settings)
sympy.python(expr,**settings)
sympy.python.PythonPrinter(self,settings=None)
sympy.python.PythonPrinter._print_Function(self,expr)
sympy.python.PythonPrinter._print_Symbol(self,expr)
sympy.python.PythonPrinter._print_module(self,expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tableform.py----------------------------------------
A:sympy.printing.tableform.data->data.tolist().tolist()
A:sympy.printing.tableform._w->max((len(line) for line in data))
A:sympy.printing.tableform._h->len(data)
A:sympy.printing.tableform.pad->Symbol(pad)
A:sympy.printing.tableform.lj->Symbol(str(lj))
A:sympy.printing.tableform._lines->Tuple(*data)
A:sympy.printing.tableform.headings->kwarg.get('headings', [None, None])
A:sympy.printing.tableform.h1->range(1, _h + 1)
A:sympy.printing.tableform.h2->range(1, _w + 1)
A:sympy.printing.tableform.alignments->kwarg.get('alignments', 'l')
A:sympy.printing.tableform.a->a.strip().lower().strip().lower()
A:sympy.printing.tableform.std_align->_std_align(a)
A:sympy.printing.tableform._column_formats->kwarg.get('formats', [None] * _w)
A:sympy.printing.tableform._wipe_zeros->kwarg.get('wipe_zeros', True)
A:sympy.printing.tableform.s->str(self._headings[1][i])
A:sympy.printing.tableform.w->len(s)
A:sympy.printing.tableform._head_width->max([len(x) for x in self._headings[0]])
A:sympy.printing.tableform.v->printer._print(x)
sympy.TableForm(self,data,**kwarg)
sympy.TableForm.__repr__(self)
sympy.TableForm.__str__(self)
sympy.TableForm._latex(self,printer)
sympy.TableForm._sympystr(self,p)
sympy.TableForm.as_latex(self)
sympy.TableForm.as_matrix(self)
sympy.TableForm.as_str(self)
sympy.printing.tableform.TableForm(self,data,**kwarg)
sympy.printing.tableform.TableForm.__init__(self,data,**kwarg)
sympy.printing.tableform.TableForm.__repr__(self)
sympy.printing.tableform.TableForm.__str__(self)
sympy.printing.tableform.TableForm._latex(self,printer)
sympy.printing.tableform.TableForm._sympystr(self,p)
sympy.printing.tableform.TableForm.as_latex(self)
sympy.printing.tableform.TableForm.as_matrix(self)
sympy.printing.tableform.TableForm.as_str(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_mathml.py----------------------------------------
A:sympy.printing.tests.test_mathml.x->Symbol('x')
A:sympy.printing.tests.test_mathml.y->Symbol('y')
A:sympy.printing.tests.test_mathml.mp->MathMLPrinter({'order': 'rev-lex'})
A:sympy.printing.tests.test_mathml.mml_1->MathMLPrinter({'order': 'rev-lex'})._print(Eq(x, 1))
A:sympy.printing.tests.test_mathml.mml_2->MathMLPrinter({'order': 'rev-lex'})._print(Ne(1, x))
A:sympy.printing.tests.test_mathml.mml_3->MathMLPrinter({'order': 'rev-lex'})._print(Ge(1, x))
A:sympy.printing.tests.test_mathml.mml->MathMLPrinter({'order': 'rev-lex'})._print(expr)
A:sympy.printing.tests.test_mathml.mml_4->MathMLPrinter({'order': 'rev-lex'})._print(Lt(1, x))
A:sympy.printing.tests.test_mathml.doc->xml.dom.minidom.parseString('<apply><plus/><ci>x</ci><cn>1</cn></apply>')
A:sympy.printing.tests.test_mathml.prettyxml_old->xml.dom.minidom.parseString('<apply><plus/><ci>x</ci><cn>1</cn></apply>').toprettyxml()
sympy.printing.tests.test_mathml.test_mathml_Rational()
sympy.printing.tests.test_mathml.test_mathml_add()
sympy.printing.tests.test_mathml.test_mathml_constants()
sympy.printing.tests.test_mathml.test_mathml_core()
sympy.printing.tests.test_mathml.test_mathml_functions()
sympy.printing.tests.test_mathml.test_mathml_greek()
sympy.printing.tests.test_mathml.test_mathml_integrals()
sympy.printing.tests.test_mathml.test_mathml_limits()
sympy.printing.tests.test_mathml.test_mathml_order()
sympy.printing.tests.test_mathml.test_mathml_relational()
sympy.printing.tests.test_mathml.test_mathml_sums()
sympy.printing.tests.test_mathml.test_mathml_trig()
sympy.printing.tests.test_mathml.test_mathml_tuples()
sympy.printing.tests.test_mathml.test_printmethod()
sympy.printing.tests.test_mathml.test_settings()
sympy.printing.tests.test_mathml.test_symbol()
sympy.printing.tests.test_mathml.test_toprettyxml_hooking()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_gtk.py----------------------------------------
sympy.printing.tests.test_gtk.test_1()
sympy.printing.tests.test_gtk.test_settings()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_lambdarepr.py----------------------------------------
A:sympy.printing.tests.test_lambdarepr.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_lambdarepr.A->Matrix([[x, y], [y * x, z ** 2]])
A:sympy.printing.tests.test_lambdarepr.p->Piecewise((1, x < 1), (2, x < 2), (3, x < 3), (4, x < 4), (5, x < 5), (6, True))
A:sympy.printing.tests.test_lambdarepr.l->lambdarepr(p)
sympy.printing.tests.test_lambdarepr.test_basic()
sympy.printing.tests.test_lambdarepr.test_matrix()
sympy.printing.tests.test_lambdarepr.test_piecewise()
sympy.printing.tests.test_lambdarepr.test_settings()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_fcode.py----------------------------------------
A:sympy.printing.tests.test_fcode.x->symbols('x')
A:sympy.printing.tests.test_fcode.(x, y)->symbols('x,y')
A:sympy.printing.tests.test_fcode.n->symbols('n', integer=True)
A:sympy.printing.tests.test_fcode.p->FCodePrinter({'source_format': 'free'})
A:sympy.printing.tests.test_fcode.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_fcode.A->MatrixSymbol('A', 3, 1)
A:sympy.printing.tests.test_fcode.i->Idx('i', len_y - 1)
A:sympy.printing.tests.test_fcode.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_fcode.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_fcode.code->fcode(x[i], assign_to=y[i], source_format='free')
A:sympy.printing.tests.test_fcode.a->diff(a, x)
A:sympy.printing.tests.test_fcode.b->diff(b, x)
A:sympy.printing.tests.test_fcode.printer->MyFancyFCodePrinter()
A:sympy.printing.tests.test_fcode.wrapped_lines->MyFancyFCodePrinter()._wrap_fortran(lines)
A:sympy.printing.tests.test_fcode.result->FCodePrinter({'source_format': 'free'}).indent_code(codelines)
A:sympy.printing.tests.test_fcode.(n, m)->symbols('n,m', integer=True)
A:sympy.printing.tests.test_fcode.y->IndexedBase('y', shape=(len_y,))
A:sympy.printing.tests.test_fcode.j->Idx('j', n)
A:sympy.printing.tests.test_fcode.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_fcode.Dy->IndexedBase('Dy', shape=(len_y - 1,))
A:sympy.printing.tests.test_fcode.e->Eq(Dy[i], (y[i + 1] - y[i]) / (x[i + 1] - x[i]))
A:sympy.printing.tests.test_fcode.code0->fcode(e.rhs, assign_to=e.lhs, contract=False)
A:sympy.printing.tests.test_fcode._default_settings->sympy.printing.fcode.FCodePrinter._default_settings.copy()
A:sympy.printing.tests.test_fcode.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_fcode.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_fcode.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_fcode.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
sympy.printing.tests.test_fcode.test_Matrix_printing()
sympy.printing.tests.test_fcode.test_assign_to()
sympy.printing.tests.test_fcode.test_derived_classes()
sympy.printing.tests.test_fcode.test_dummy_loops()
sympy.printing.tests.test_fcode.test_fcode_Float()
sympy.printing.tests.test_fcode.test_fcode_Indexed_without_looking_for_contraction()
sympy.printing.tests.test_fcode.test_fcode_Integer()
sympy.printing.tests.test_fcode.test_fcode_Logical()
sympy.printing.tests.test_fcode.test_fcode_NumberSymbol()
sympy.printing.tests.test_fcode.test_fcode_Piecewise()
sympy.printing.tests.test_fcode.test_fcode_Pow()
sympy.printing.tests.test_fcode.test_fcode_Rational()
sympy.printing.tests.test_fcode.test_fcode_Relational()
sympy.printing.tests.test_fcode.test_fcode_Xlogical()
sympy.printing.tests.test_fcode.test_fcode_complex()
sympy.printing.tests.test_fcode.test_fcode_functions()
sympy.printing.tests.test_fcode.test_fcode_functions_with_integers()
sympy.printing.tests.test_fcode.test_fcode_precedence()
sympy.printing.tests.test_fcode.test_free_form_code_line()
sympy.printing.tests.test_fcode.test_free_form_comment_line()
sympy.printing.tests.test_fcode.test_free_form_continuation_line()
sympy.printing.tests.test_fcode.test_implicit()
sympy.printing.tests.test_fcode.test_indent()
sympy.printing.tests.test_fcode.test_inline_function()
sympy.printing.tests.test_fcode.test_line_wrapping()
sympy.printing.tests.test_fcode.test_loops()
sympy.printing.tests.test_fcode.test_not_fortran()
sympy.printing.tests.test_fcode.test_printmethod()
sympy.printing.tests.test_fcode.test_settings()
sympy.printing.tests.test_fcode.test_user_functions()
sympy.printing.tests.test_fcode.test_wrap_fortran()
sympy.printing.tests.test_fcode.test_wrap_fortran_keep_d0()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_str.py----------------------------------------
A:sympy.printing.tests.test_str.(x, y, z, w)->symbols('x,y,z,w')
A:sympy.printing.tests.test_str.d->Dummy('d')
A:sympy.printing.tests.test_str.n->Symbol('n', integer=True)
A:sympy.printing.tests.test_str.f->NamedMorphism(A, B, 'f')
A:sympy.printing.tests.test_str.fx->f(x)
A:sympy.printing.tests.test_str.w->Wild('x')
A:sympy.printing.tests.test_str.a->str(e)
A:sympy.printing.tests.test_str.M->SparseMatrix([[x ** (+1), 1], [y, x + y]])
A:sympy.printing.tests.test_str.cc1->CustomClass1()
A:sympy.printing.tests.test_str.cc2->CustomClass2()
A:sympy.printing.tests.test_str.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.printing.tests.test_str.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.printing.tests.test_str.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.printing.tests.test_str.(Fxyzt, x, y, z, t)->field('x,y,z,t', Fuv)
A:sympy.printing.tests.test_str.n1->Rational(1, 4)
A:sympy.printing.tests.test_str.n2->Rational(1, 3)
A:sympy.printing.tests.test_str.n3->Rational(2, 4)
A:sympy.printing.tests.test_str.n4->Rational(2, -4)
A:sympy.printing.tests.test_str.n5->Rational(0)
A:sympy.printing.tests.test_str.n7->Rational(3)
A:sympy.printing.tests.test_str.n8->Rational(-3)
A:sympy.printing.tests.test_str.b->str(e)
A:sympy.printing.tests.test_str.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.tests.test_str.str_printer->StrPrinter()
A:sympy.printing.tests.test_str.X->Normal('x1', 0, 1)
A:sympy.printing.tests.test_str.D->Die('d1', 6)
A:sympy.printing.tests.test_str.A->Object('A')
A:sympy.printing.tests.test_str.B->Object('B')
A:sympy.printing.tests.test_str.F->sympy.polys.domains.QQ.frac_field(x, y)
A:sympy.printing.tests.test_str.id_A->IdentityMorphism(A)
A:sympy.printing.tests.test_str.K->Category('K')
A:sympy.printing.tests.test_str.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.tests.test_str.t->Tr(A * B)
sympy.printing.tests.test_str.test_Abs()
sympy.printing.tests.test_str.test_Add()
sympy.printing.tests.test_str.test_Catalan()
sympy.printing.tests.test_str.test_Complement()
sympy.printing.tests.test_str.test_ComplexInfinity()
sympy.printing.tests.test_str.test_Derivative()
sympy.printing.tests.test_str.test_Dict()
sympy.printing.tests.test_str.test_Dummy()
sympy.printing.tests.test_str.test_Equivalent()
sympy.printing.tests.test_str.test_EulerGamma()
sympy.printing.tests.test_str.test_Exp()
sympy.printing.tests.test_str.test_FiniteSet()
sympy.printing.tests.test_str.test_Float()
sympy.printing.tests.test_str.test_FracElement()
sympy.printing.tests.test_str.test_FracField()
sympy.printing.tests.test_str.test_Function()
sympy.printing.tests.test_str.test_Geometry()
sympy.printing.tests.test_str.test_GoldenRatio()
sympy.printing.tests.test_str.test_GroebnerBasis()
sympy.printing.tests.test_str.test_ImaginaryUnit()
sympy.printing.tests.test_str.test_Infinity()
sympy.printing.tests.test_str.test_Integer()
sympy.printing.tests.test_str.test_Integral()
sympy.printing.tests.test_str.test_Interval()
sympy.printing.tests.test_str.test_Lambda()
sympy.printing.tests.test_str.test_Limit()
sympy.printing.tests.test_str.test_MatMul_MatAdd()
sympy.printing.tests.test_str.test_MatrixSlice()
sympy.printing.tests.test_str.test_Matrix_str()
sympy.printing.tests.test_str.test_Mul()
sympy.printing.tests.test_str.test_NaN()
sympy.printing.tests.test_str.test_NegativeInfinity()
sympy.printing.tests.test_str.test_Order()
sympy.printing.tests.test_str.test_Permutation_Cycle()
sympy.printing.tests.test_str.test_Pi()
sympy.printing.tests.test_str.test_Poly()
sympy.printing.tests.test_str.test_PolyElement()
sympy.printing.tests.test_str.test_PolyRing()
sympy.printing.tests.test_str.test_Pow()
sympy.printing.tests.test_str.test_PrettyPoly()
sympy.printing.tests.test_str.test_RandomDomain()
sympy.printing.tests.test_str.test_Rational()
sympy.printing.tests.test_str.test_Relational()
sympy.printing.tests.test_str.test_RootOf()
sympy.printing.tests.test_str.test_RootSum()
sympy.printing.tests.test_str.test_SparseMatrix()
sympy.printing.tests.test_str.test_Sum()
sympy.printing.tests.test_str.test_Symbol()
sympy.printing.tests.test_str.test_Tr()
sympy.printing.tests.test_str.test_Unit()
sympy.printing.tests.test_str.test_Xor()
sympy.printing.tests.test_str.test_categories()
sympy.printing.tests.test_str.test_dict()
sympy.printing.tests.test_str.test_empty_printer()
sympy.printing.tests.test_str.test_factorial()
sympy.printing.tests.test_str.test_full_prec()
sympy.printing.tests.test_str.test_infinity()
sympy.printing.tests.test_str.test_issue_3101()
sympy.printing.tests.test_str.test_issue_3103()
sympy.printing.tests.test_str.test_issue_4021()
sympy.printing.tests.test_str.test_issue_6387()
sympy.printing.tests.test_str.test_list()
sympy.printing.tests.test_str.test_noncommutative()
sympy.printing.tests.test_str.test_printmethod()
sympy.printing.tests.test_str.test_set()
sympy.printing.tests.test_str.test_settings()
sympy.printing.tests.test_str.test_sqrt()
sympy.printing.tests.test_str.test_sstrrepr()
sympy.printing.tests.test_str.test_true_false()
sympy.printing.tests.test_str.test_tuple()
sympy.printing.tests.test_str.test_wild_str()
sympy.printing.tests.test_str.test_zeta()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_precedence.py----------------------------------------
A:sympy.printing.tests.test_precedence.(x, y)->symbols('x,y')
sympy.printing.tests.test_precedence.test_Add()
sympy.printing.tests.test_precedence.test_And_Or()
sympy.printing.tests.test_precedence.test_Function()
sympy.printing.tests.test_precedence.test_Integral()
sympy.printing.tests.test_precedence.test_Mul()
sympy.printing.tests.test_precedence.test_Number()
sympy.printing.tests.test_precedence.test_Order()
sympy.printing.tests.test_precedence.test_Pow()
sympy.printing.tests.test_precedence.test_Product()
sympy.printing.tests.test_precedence.test_Relational()
sympy.printing.tests.test_precedence.test_Sum()
sympy.printing.tests.test_precedence.test_Symbol()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_repr.py----------------------------------------
A:sympy.printing.tests.test_repr.(x, y)->symbols('x,y')
A:sympy.printing.tests.test_repr.(R, x, y)->ring('x,y', ZZ)
A:sympy.printing.tests.test_repr.(F, x, y)->field('x,y', ZZ)
sympy.printing.tests.test_repr.sT(expr,string)
sympy.printing.tests.test_repr.test_Add()
sympy.printing.tests.test_repr.test_BooleanAtom()
sympy.printing.tests.test_repr.test_Float()
sympy.printing.tests.test_repr.test_FracElement()
sympy.printing.tests.test_repr.test_FracField()
sympy.printing.tests.test_repr.test_Function()
sympy.printing.tests.test_repr.test_Geometry()
sympy.printing.tests.test_repr.test_Integer()
sympy.printing.tests.test_repr.test_Matrix()
sympy.printing.tests.test_repr.test_Mul()
sympy.printing.tests.test_repr.test_PolyElement()
sympy.printing.tests.test_repr.test_PolyRing()
sympy.printing.tests.test_repr.test_Rational()
sympy.printing.tests.test_repr.test_Singletons()
sympy.printing.tests.test_repr.test_Symbol()
sympy.printing.tests.test_repr.test_WildFunction()
sympy.printing.tests.test_repr.test_empty_Matrix()
sympy.printing.tests.test_repr.test_list()
sympy.printing.tests.test_repr.test_printmethod()
sympy.printing.tests.test_repr.test_settins()
sympy.printing.tests.test_repr.test_tuple()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_python.py----------------------------------------
A:sympy.printing.tests.test_python.(x, y)->symbols('x,y')
A:sympy.printing.tests.test_python.th->Symbol('theta')
A:sympy.printing.tests.test_python.ph->Symbol('phi')
A:sympy.printing.tests.test_python.f->Function('f')
A:sympy.printing.tests.test_python.(a, b)->map(Symbol, 'ab')
A:sympy.printing.tests.test_python.f_1->Integral(log(x), x)
A:sympy.printing.tests.test_python.f_3->Integral(x ** 2 ** x, x)
A:sympy.printing.tests.test_python.f_2->Integral(x ** 2, x)
A:sympy.printing.tests.test_python.f_4->Integral(x ** 2, (x, 1, 2))
A:sympy.printing.tests.test_python.f_5->Integral(x ** 2, (x, Rational(1, 2), 10))
A:sympy.printing.tests.test_python.f_6->Integral(x ** 2 * y ** 2, x, y)
sympy.printing.tests.test_python.test_python_basic()
sympy.printing.tests.test_python.test_python_derivatives()
sympy.printing.tests.test_python.test_python_functions()
sympy.printing.tests.test_python.test_python_functions_conjugates()
sympy.printing.tests.test_python.test_python_integrals()
sympy.printing.tests.test_python.test_python_keyword_function_name_escaping()
sympy.printing.tests.test_python.test_python_keyword_symbol_name_escaping()
sympy.printing.tests.test_python.test_python_limits()
sympy.printing.tests.test_python.test_python_relational()
sympy.printing.tests.test_python.test_settings()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_latex.py----------------------------------------
A:sympy.printing.tests.test_latex.(x, y, z, t, a, b)->symbols('x y z t a b')
A:sympy.printing.tests.test_latex.(k, m, n)->symbols('k m n', integer=True)
A:sympy.printing.tests.test_latex.(Gamma, lmbda, rho)->symbols('Gamma, lambda, rho')
A:sympy.printing.tests.test_latex.(mass, volume)->symbols('mass, volume')
A:sympy.printing.tests.test_latex.(rho, mass, volume)->symbols('rho, mass, volume')
A:sympy.printing.tests.test_latex.f->NamedMorphism(A, B, 'f')
A:sympy.printing.tests.test_latex.g->NamedMorphism(B, C, 'g')
A:sympy.printing.tests.test_latex.h->homomorphism(QQ.old_poly_ring(x).free_module(2), QQ.old_poly_ring(x).free_module(2), [0, 0])
A:sympy.printing.tests.test_latex.Li->Function('Li')
A:sympy.printing.tests.test_latex.beta->Symbol('beta')
A:sympy.printing.tests.test_latex.a1->Function('a_1')
A:sympy.printing.tests.test_latex.omega1->Function('omega1')
A:sympy.printing.tests.test_latex.w->Wild('w')
A:sympy.printing.tests.test_latex.theta->Symbol('theta', real=True)
A:sympy.printing.tests.test_latex.phi->Symbol('phi', real=True)
A:sympy.printing.tests.test_latex.fjlkd->Function('fjlkd')
A:sympy.printing.tests.test_latex.Psi_symbol->Symbol('Psi_0', complex=True, real=False)
A:sympy.printing.tests.test_latex.Psi_indexed->IndexedBase(Symbol('Psi', complex=True, real=False))
A:sympy.printing.tests.test_latex.symbol_latex->latex(Psi_symbol * conjugate(Psi_symbol))
A:sympy.printing.tests.test_latex.indexed_latex->latex(Psi_indexed[0] * conjugate(Psi_indexed[0]))
A:sympy.printing.tests.test_latex.a->Symbol('a')
A:sympy.printing.tests.test_latex.line->Interval(0, 1)
A:sympy.printing.tests.test_latex.bigline->Interval(0, 10)
A:sympy.printing.tests.test_latex.fset->FiniteSet(1, 2, 3)
A:sympy.printing.tests.test_latex.x->Symbol('x')
A:sympy.printing.tests.test_latex.D->Die('d1', 6)
A:sympy.printing.tests.test_latex.p->Function('Pi')
A:sympy.printing.tests.test_latex.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.tests.test_latex.M->R.free_module(2).submodule([x, y], [1, x ** 2])
A:sympy.printing.tests.test_latex.M2->Matrix(1, 11, range(11))
A:sympy.printing.tests.test_latex.t->Tr(A * B)
A:sympy.printing.tests.test_latex.theta1->symbols('theta1', cls=Function)
A:sympy.printing.tests.test_latex.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.tests.test_latex.(Ruv, u, v)->ring('u,v', ZZ)
A:sympy.printing.tests.test_latex.(Rxyz, x, y, z)->ring('x,y,z', Ruv)
A:sympy.printing.tests.test_latex.(Fuv, u, v)->field('u,v', ZZ)
A:sympy.printing.tests.test_latex.(Fxyzt, x, y, z, t)->field('x,y,z,t', Fuv)
A:sympy.printing.tests.test_latex.y->Symbol('y')
A:sympy.printing.tests.test_latex.C->Object('C')
A:sympy.printing.tests.test_latex.B->Object('B')
A:sympy.printing.tests.test_latex.l->LatexPrinter()
A:sympy.printing.tests.test_latex.A->Object('A')
A:sympy.printing.tests.test_latex.X->MatrixSymbol('X', 2, 2)
A:sympy.printing.tests.test_latex.F->sympy.polys.domains.QQ.old_poly_ring(x, y).free_module(2)
A:sympy.printing.tests.test_latex.k->Symbol('k')
A:sympy.printing.tests.test_latex.b->Symbol('b')
A:sympy.printing.tests.test_latex.A1->Object('A1')
A:sympy.printing.tests.test_latex.A2->Object('A2')
A:sympy.printing.tests.test_latex.A3->Object('A3')
A:sympy.printing.tests.test_latex.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.printing.tests.test_latex.f2->NamedMorphism(A2, A3, 'f2')
A:sympy.printing.tests.test_latex.id_A1->IdentityMorphism(A1)
A:sympy.printing.tests.test_latex.K1->Category('K1')
A:sympy.printing.tests.test_latex.d->Diagram([f, g])
A:sympy.printing.tests.test_latex.grid->DiagramGrid(d)
A:sympy.printing.tests.test_latex.R->sympy.polys.domains.QQ.old_poly_ring(x, y)
A:sympy.printing.tests.test_latex.I->sympy.polys.domains.QQ.old_poly_ring(x, y).ideal(x ** 2, y)
A:sympy.printing.tests.test_latex.Y->MatrixSymbol('Y', 2, 2)
A:sympy.printing.tests.test_latex.syms->symbols('a:f')
A:sympy.printing.tests.test_latex.expr->Xor(*syms)
A:sympy.printing.tests.test_latex.i->sqrt(-1)
A:sympy.printing.tests.test_latex.s->Function('Eta')
A:sympy.printing.tests.test_latex.c->Function('chi')
A:sympy.printing.tests.test_latex.e->Pow(2, 2, evaluate=False)
sympy.printing.tests.test_latex.test_Adjoint()
sympy.printing.tests.test_latex.test_Hadamard()
sympy.printing.tests.test_latex.test_Modules()
sympy.printing.tests.test_latex.test_Mul()
sympy.printing.tests.test_latex.test_PolynomialRingBase()
sympy.printing.tests.test_latex.test_Pow()
sympy.printing.tests.test_latex.test_PrettyPoly()
sympy.printing.tests.test_latex.test_QuotientRing()
sympy.printing.tests.test_latex.test_Tr()
sympy.printing.tests.test_latex.test_boolean_args_order()
sympy.printing.tests.test_latex.test_builtin_no_args()
sympy.printing.tests.test_latex.test_builtin_without_args_mismatched_names()
sympy.printing.tests.test_latex.test_builtins_without_args()
sympy.printing.tests.test_latex.test_categories()
sympy.printing.tests.test_latex.test_custom_symbol_names()
sympy.printing.tests.test_latex.test_greek_symbols()
sympy.printing.tests.test_latex.test_hyper_printing()
sympy.printing.tests.test_latex.test_imaginary()
sympy.printing.tests.test_latex.test_integral_transforms()
sympy.printing.tests.test_latex.test_issue_3568()
sympy.printing.tests.test_latex.test_issue_6853()
sympy.printing.tests.test_latex.test_issue_7180()
sympy.printing.tests.test_latex.test_lamda()
sympy.printing.tests.test_latex.test_latex()
sympy.printing.tests.test_latex.test_latex_Complement()
sympy.printing.tests.test_latex.test_latex_Contains()
sympy.printing.tests.test_latex.test_latex_DiracDelta()
sympy.printing.tests.test_latex.test_latex_Float()
sympy.printing.tests.test_latex.test_latex_FracElement()
sympy.printing.tests.test_latex.test_latex_Heaviside()
sympy.printing.tests.test_latex.test_latex_ImageSet()
sympy.printing.tests.test_latex.test_latex_KroneckerDelta()
sympy.printing.tests.test_latex.test_latex_Lambda()
sympy.printing.tests.test_latex.test_latex_LeviCivita()
sympy.printing.tests.test_latex.test_latex_Matrix()
sympy.printing.tests.test_latex.test_latex_MatrixSlice()
sympy.printing.tests.test_latex.test_latex_Naturals()
sympy.printing.tests.test_latex.test_latex_Piecewise()
sympy.printing.tests.test_latex.test_latex_Poly()
sympy.printing.tests.test_latex.test_latex_PolyElement()
sympy.printing.tests.test_latex.test_latex_RandomDomain()
sympy.printing.tests.test_latex.test_latex_Range()
sympy.printing.tests.test_latex.test_latex_RootOf()
sympy.printing.tests.test_latex.test_latex_RootSum()
sympy.printing.tests.test_latex.test_latex_basic()
sympy.printing.tests.test_latex.test_latex_bessel()
sympy.printing.tests.test_latex.test_latex_brackets()
sympy.printing.tests.test_latex.test_latex_builtins()
sympy.printing.tests.test_latex.test_latex_derivatives()
sympy.printing.tests.test_latex.test_latex_dict()
sympy.printing.tests.test_latex.test_latex_emptyset()
sympy.printing.tests.test_latex.test_latex_fresnel()
sympy.printing.tests.test_latex.test_latex_functions()
sympy.printing.tests.test_latex.test_latex_greek_functions()
sympy.printing.tests.test_latex.test_latex_indexed()
sympy.printing.tests.test_latex.test_latex_integrals()
sympy.printing.tests.test_latex.test_latex_intervals()
sympy.printing.tests.test_latex.test_latex_inverse()
sympy.printing.tests.test_latex.test_latex_issue_4381()
sympy.printing.tests.test_latex.test_latex_issue_4576()
sympy.printing.tests.test_latex.test_latex_limits()
sympy.printing.tests.test_latex.test_latex_list()
sympy.printing.tests.test_latex.test_latex_matrix_with_functions()
sympy.printing.tests.test_latex.test_latex_mul_symbol()
sympy.printing.tests.test_latex.test_latex_numbers()
sympy.printing.tests.test_latex.test_latex_order()
sympy.printing.tests.test_latex.test_latex_pow_fraction()
sympy.printing.tests.test_latex.test_latex_product()
sympy.printing.tests.test_latex.test_latex_productset()
sympy.printing.tests.test_latex.test_latex_rational()
sympy.printing.tests.test_latex.test_latex_sets()
sympy.printing.tests.test_latex.test_latex_subs()
sympy.printing.tests.test_latex.test_latex_sum()
sympy.printing.tests.test_latex.test_latex_symbols()
sympy.printing.tests.test_latex.test_latex_symbols_failing()
sympy.printing.tests.test_latex.test_latex_union()
sympy.printing.tests.test_latex.test_matAdd()
sympy.printing.tests.test_latex.test_matMul()
sympy.printing.tests.test_latex.test_mode()
sympy.printing.tests.test_latex.test_modifiers()
sympy.printing.tests.test_latex.test_noncommutative()
sympy.printing.tests.test_latex.test_other_symbols()
sympy.printing.tests.test_latex.test_printmethod()
sympy.printing.tests.test_latex.test_settings()
sympy.printing.tests.test_latex.test_translate()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_tableform.py----------------------------------------
A:sympy.printing.tests.test_tableform.s->latex(TableForm([['a', x ** 3], ['c', S(1) / 4], [sqrt(x), sin(x ** 2)]]))
sympy.printing.tests.test_tableform.test_TableForm()
sympy.printing.tests.test_tableform.test_TableForm_latex()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_theanocode.py----------------------------------------
A:sympy.printing.tests.test_theanocode.theano->import_module('theano')
A:sympy.printing.tests.test_theanocode.outs->list(map(theano_code, exprs))
A:sympy.printing.tests.test_theanocode.ins->import_module('theano').gof.graph.inputs(outs)
A:sympy.printing.tests.test_theanocode.(ins, outs)->import_module('theano').gof.graph.clone(ins, outs)
A:sympy.printing.tests.test_theanocode.mode->import_module('theano').compile.get_default_mode().excluding('fusion')
A:sympy.printing.tests.test_theanocode.fgraph->fgraph.clone().clone()
A:sympy.printing.tests.test_theanocode.astr->import_module('theano').printing.debugprint(a, file='str')
A:sympy.printing.tests.test_theanocode.bstr->import_module('theano').printing.debugprint(b, file='str')
A:sympy.printing.tests.test_theanocode.xt->theano_code(x)
A:sympy.printing.tests.test_theanocode.comp->theano_code(expr)
A:sympy.printing.tests.test_theanocode.X->MatrixType([[sy.cos(t), -sy.sin(t)], [sy.sin(t), sy.cos(t)]])
A:sympy.printing.tests.test_theanocode.Xt->theano_code(X)
A:sympy.printing.tests.test_theanocode.Y->sympy.MatrixSymbol('X', 4, 4)
A:sympy.printing.tests.test_theanocode.Z->sympy.MatrixSymbol('X', 4, 4)
A:sympy.printing.tests.test_theanocode.n->sympy.Symbol('n', integer=True)
A:sympy.printing.tests.test_theanocode.f->sy.Function('f')
A:sympy.printing.tests.test_theanocode.xx->numpy.arange(3).astype('float64')
A:sympy.printing.tests.test_theanocode.Yt->theano_code(Y, dtypes={n: 'int32', k: 'int32'})
A:sympy.printing.tests.test_theanocode.k->sympy.Symbol('k')
A:sympy.printing.tests.test_theanocode.kt->theano_code(k, dtypes={k: 'int32'})
A:sympy.printing.tests.test_theanocode.A->sympy.MatrixSymbol('A', n, k)
A:sympy.printing.tests.test_theanocode.B->sympy.MatrixSymbol('B', n, n)
A:sympy.printing.tests.test_theanocode.C->sympy.MatrixSymbol('C', n, n)
A:sympy.printing.tests.test_theanocode.D->sympy.MatrixSymbol('D', n, n)
A:sympy.printing.tests.test_theanocode.(At, Bt, Ct, Dt)->map(theano_code, (A, B, C, D))
A:sympy.printing.tests.test_theanocode.Block->sympy.BlockMatrix([[A, B], [C, D]])
A:sympy.printing.tests.test_theanocode.Blockt->theano_code(Block)
A:sympy.printing.tests.test_theanocode.cutoutput->output.subs(dict(zip(inputs, cutinputs)))
A:sympy.printing.tests.test_theanocode.dtypes->dict(zip(inputs, [dtype] * len(inputs)))
A:sympy.printing.tests.test_theanocode.fblocked->theano_function(inputs, [sympy.block_collapse(cutoutput)], dtypes=dtypes, cache={})
A:sympy.printing.tests.test_theanocode.t->sy.Symbol('t')
A:sympy.printing.tests.test_theanocode.tX->theano_code(X)
A:sympy.printing.tests.test_theanocode.ft->theano_code(f(t))
A:sympy.printing.tests.test_theanocode.sx->sy.Symbol('x')
A:sympy.printing.tests.test_theanocode.tx->theano_code(sx, cache=cache)
A:sympy.printing.tests.test_theanocode.expr->sy.Piecewise((x, x < 0))
A:sympy.printing.tests.test_theanocode.result->theano_code(expr)
A:sympy.printing.tests.test_theanocode.expected->tt.switch(xt < 0, xt, np.nan)
sympy.printing.tests.test_theanocode.fgraph_of(*exprs)
sympy.printing.tests.test_theanocode.test_AppliedUndef()
sympy.printing.tests.test_theanocode.test_BlockMatrix()
sympy.printing.tests.test_theanocode.test_BlockMatrix_Inverse_execution()
sympy.printing.tests.test_theanocode.test_DenseMatrix()
sympy.printing.tests.test_theanocode.test_Derivative()
sympy.printing.tests.test_theanocode.test_Integers()
sympy.printing.tests.test_theanocode.test_MatAdd()
sympy.printing.tests.test_theanocode.test_MatMul()
sympy.printing.tests.test_theanocode.test_MatrixSlice()
sympy.printing.tests.test_theanocode.test_MatrixSymbol()
sympy.printing.tests.test_theanocode.test_Piecewise()
sympy.printing.tests.test_theanocode.test_Rationals()
sympy.printing.tests.test_theanocode.test_Relationals()
sympy.printing.tests.test_theanocode.test_Transpose()
sympy.printing.tests.test_theanocode.test_add()
sympy.printing.tests.test_theanocode.test_bad_keyword_args_raise_error()
sympy.printing.tests.test_theanocode.test_cache()
sympy.printing.tests.test_theanocode.test_dim_handling()
sympy.printing.tests.test_theanocode.test_dtype()
sympy.printing.tests.test_theanocode.test_factorial()
sympy.printing.tests.test_theanocode.test_many()
sympy.printing.tests.test_theanocode.test_slice()
sympy.printing.tests.test_theanocode.test_symbol()
sympy.printing.tests.test_theanocode.test_symbols_are_created_once()
sympy.printing.tests.test_theanocode.test_theano_function_kwargs()
sympy.printing.tests.test_theanocode.test_theano_function_numpy()
sympy.printing.tests.test_theanocode.test_theano_function_simple()
sympy.printing.tests.test_theanocode.test_trig()
sympy.printing.tests.test_theanocode.theano_simplify(fgraph)
sympy.printing.tests.test_theanocode.theq(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_mathematica.py----------------------------------------
A:sympy.printing.tests.test_mathematica.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_mathematica.f->Function('f')
A:sympy.printing.tests.test_mathematica.(A, B, C, D)->symbols('A B C D', commutative=False)
sympy.printing.tests.test_mathematica.test_Function()
sympy.printing.tests.test_mathematica.test_Integer()
sympy.printing.tests.test_mathematica.test_Integral()
sympy.printing.tests.test_mathematica.test_Mul()
sympy.printing.tests.test_mathematica.test_Pow()
sympy.printing.tests.test_mathematica.test_Rational()
sympy.printing.tests.test_mathematica.test_Sum()
sympy.printing.tests.test_mathematica.test_constants()
sympy.printing.tests.test_mathematica.test_containers()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_octave.py----------------------------------------
A:sympy.printing.tests.test_octave.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_octave.g->implemented_function('g', Lambda(x, 2 * x))
A:sympy.printing.tests.test_octave.I->S('I')
A:sympy.printing.tests.test_octave.A->MatrixSymbol('A', 3, 3)
A:sympy.printing.tests.test_octave.n->Symbol('n', integer=True)
A:sympy.printing.tests.test_octave.B->MatrixSymbol('B', 3, 3)
A:sympy.printing.tests.test_octave.source->mcode((x + y) / Catalan, assign_to='me', inline=False)
A:sympy.printing.tests.test_octave.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_octave.pw->Piecewise((t1, x < 0), (t2, x <= 1), (1, True))
A:sympy.printing.tests.test_octave.C->HadamardProduct(A, B)
A:sympy.printing.tests.test_octave.f->Function('f')
A:sympy.printing.tests.test_octave.t1->S('endless')
A:sympy.printing.tests.test_octave.t2->S('elsewhere')
A:sympy.printing.tests.test_octave.v->MatrixSymbol('v', 3, 1)
A:sympy.printing.tests.test_octave.h->MatrixSymbol('h', 1, 3)
A:sympy.printing.tests.test_octave.M->SparseMatrix(5, 6, {})
sympy.printing.tests.test_octave.test_1_over_x_and_sqrt()
sympy.printing.tests.test_octave.test_Function()
sympy.printing.tests.test_octave.test_Integer()
sympy.printing.tests.test_octave.test_Matrices()
sympy.printing.tests.test_octave.test_Matrices_entries_not_hadamard()
sympy.printing.tests.test_octave.test_MatrixSymbol()
sympy.printing.tests.test_octave.test_Pow()
sympy.printing.tests.test_octave.test_Rational()
sympy.printing.tests.test_octave.test_basic_ops()
sympy.printing.tests.test_octave.test_boolean()
sympy.printing.tests.test_octave.test_constants()
sympy.printing.tests.test_octave.test_constants_other()
sympy.printing.tests.test_octave.test_containers()
sympy.printing.tests.test_octave.test_haramard()
sympy.printing.tests.test_octave.test_imag()
sympy.printing.tests.test_octave.test_mix_number_mult_symbols()
sympy.printing.tests.test_octave.test_mix_number_pow_symbols()
sympy.printing.tests.test_octave.test_octave_boolean()
sympy.printing.tests.test_octave.test_octave_matrix_1x1()
sympy.printing.tests.test_octave.test_octave_matrix_assign_to()
sympy.printing.tests.test_octave.test_octave_matrix_assign_to_more()
sympy.printing.tests.test_octave.test_octave_matrix_elements()
sympy.printing.tests.test_octave.test_octave_noninline()
sympy.printing.tests.test_octave.test_octave_not_supported()
sympy.printing.tests.test_octave.test_octave_piecewise()
sympy.printing.tests.test_octave.test_octave_piecewise_times_const()
sympy.printing.tests.test_octave.test_sparse()
sympy.printing.tests.test_octave.test_special_matrices()
sympy.printing.tests.test_octave.test_trick_indent_with_end_else_words()
sympy.printing.tests.test_octave.test_vector_entries_hadamard()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_codeprinter.py----------------------------------------
A:sympy.printing.tests.test_codeprinter.p->setup_test_printer(reserved_word_suffix='_He_Man')
A:sympy.printing.tests.test_codeprinter.p._not_supported->set()
A:sympy.printing.tests.test_codeprinter.p._number_symbols->set()
A:sympy.printing.tests.test_codeprinter.d->sympy.core.C.Dummy('d')
A:sympy.printing.tests.test_codeprinter.(x, y)->symbols('x, if')
A:sympy.printing.tests.test_codeprinter.A->MatrixSymbol('A', 3, 1)
A:sympy.printing.tests.test_codeprinter.mat->Matrix([1, 2, 3])
A:sympy.printing.tests.test_codeprinter.B->IndexedBase('B')
A:sympy.printing.tests.test_codeprinter.n->symbols('n', integer=True)
A:sympy.printing.tests.test_codeprinter.i->Idx('i', n)
sympy.printing.tests.test_codeprinter.setup_test_printer(**kwargs)
sympy.printing.tests.test_codeprinter.test_Assignment()
sympy.printing.tests.test_codeprinter.test_print_Dummy()
sympy.printing.tests.test_codeprinter.test_print_Symbol()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_conventions.py----------------------------------------
A:sympy.printing.tests.test_conventions.(x, y, z, t, nu)->symbols('x y z t nu')
A:sympy.printing.tests.test_conventions.n->symbols('n', integer=True)
A:sympy.printing.tests.test_conventions.f->symbols('f', cls=Function)
A:sympy.printing.tests.test_conventions.g->sum(f)
sympy.printing.tests.test_conventions.test_requires_partial()
sympy.printing.tests.test_conventions.test_super_sub()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_dot.py----------------------------------------
A:sympy.printing.tests.test_dot.text->dotprint(x + 2, labelfunc=srepr)
A:sympy.printing.tests.test_dot.n->Symbol('n')
sympy.printing.tests.test_dot.test_Matrix_and_non_basics()
sympy.printing.tests.test_dot.test_attrprint()
sympy.printing.tests.test_dot.test_dotedges()
sympy.printing.tests.test_dot.test_dotnode()
sympy.printing.tests.test_dot.test_dotprint()
sympy.printing.tests.test_dot.test_dotprint_depth()
sympy.printing.tests.test_dot.test_labelfunc()
sympy.printing.tests.test_dot.test_purestr()
sympy.printing.tests.test_dot.test_styleof()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_ccode.py----------------------------------------
A:sympy.printing.tests.test_ccode.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_ccode.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_ccode.x->IndexedBase('x')
A:sympy.printing.tests.test_ccode.A->MatrixSymbol('A', 3, 1)
A:sympy.printing.tests.test_ccode.i->Idx('i', m)
A:sympy.printing.tests.test_ccode.n->symbols('n', integer=True)
A:sympy.printing.tests.test_ccode.expr->sign(cos(x))
A:sympy.printing.tests.test_ccode.p->CCodePrinter()
A:sympy.printing.tests.test_ccode.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_ccode.p._not_c->set()
A:sympy.printing.tests.test_ccode.y->IndexedBase('y')
A:sympy.printing.tests.test_ccode.Dy->IndexedBase('Dy', shape=(len_y - 1,))
A:sympy.printing.tests.test_ccode.e->Eq(Dy[i], (y[i + 1] - y[i]) / (x[i + 1] - x[i]))
A:sympy.printing.tests.test_ccode.code0->ccode(e.rhs, assign_to=e.lhs, contract=False)
A:sympy.printing.tests.test_ccode.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_ccode.j->Idx('j', n)
A:sympy.printing.tests.test_ccode.c->ccode(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_ccode.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_ccode.code->ccode(x[i], assign_to=y[i])
A:sympy.printing.tests.test_ccode.z->IndexedBase('z')
A:sympy.printing.tests.test_ccode.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_ccode.a->IndexedBase('a')
A:sympy.printing.tests.test_ccode.b->IndexedBase('b')
A:sympy.printing.tests.test_ccode.k->Idx('k', o)
A:sympy.printing.tests.test_ccode.l->Idx('l', p)
A:sympy.printing.tests.test_ccode.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_ccode.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_ccode.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_ccode.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
A:sympy.printing.tests.test_ccode.(x, y)->symbols('x, if')
sympy.printing.tests.test_ccode.test_Matrix_printing()
sympy.printing.tests.test_ccode.test_ccode_Indexed()
sympy.printing.tests.test_ccode.test_ccode_Indexed_without_looking_for_contraction()
sympy.printing.tests.test_ccode.test_ccode_Integer()
sympy.printing.tests.test_ccode.test_ccode_Piecewise()
sympy.printing.tests.test_ccode.test_ccode_Piecewise_deep()
sympy.printing.tests.test_ccode.test_ccode_Pow()
sympy.printing.tests.test_ccode.test_ccode_Rational()
sympy.printing.tests.test_ccode.test_ccode_boolean()
sympy.printing.tests.test_ccode.test_ccode_constants_mathh()
sympy.printing.tests.test_ccode.test_ccode_constants_other()
sympy.printing.tests.test_ccode.test_ccode_exceptions()
sympy.printing.tests.test_ccode.test_ccode_functions()
sympy.printing.tests.test_ccode.test_ccode_inline_function()
sympy.printing.tests.test_ccode.test_ccode_loops_add()
sympy.printing.tests.test_ccode.test_ccode_loops_addfactor()
sympy.printing.tests.test_ccode.test_ccode_loops_matrix_vector()
sympy.printing.tests.test_ccode.test_ccode_loops_multiple_contractions()
sympy.printing.tests.test_ccode.test_ccode_loops_multiple_terms()
sympy.printing.tests.test_ccode.test_ccode_reserved_words()
sympy.printing.tests.test_ccode.test_ccode_settings()
sympy.printing.tests.test_ccode.test_ccode_sign()
sympy.printing.tests.test_ccode.test_ccode_sqrt()
sympy.printing.tests.test_ccode.test_ccode_user_functions()
sympy.printing.tests.test_ccode.test_dereference_printing()
sympy.printing.tests.test_ccode.test_dummy_loops()
sympy.printing.tests.test_ccode.test_printmethod()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/tests/test_jscode.py----------------------------------------
A:sympy.printing.tests.test_jscode.(x, y, z)->symbols('x,y,z')
A:sympy.printing.tests.test_jscode.g->implemented_function('g', Lambda(x, x * (1 + x) * (2 + x)))
A:sympy.printing.tests.test_jscode.x->IndexedBase('x')
A:sympy.printing.tests.test_jscode.A->MatrixSymbol('A', 3, 1)
A:sympy.printing.tests.test_jscode.i->Idx('i', m)
A:sympy.printing.tests.test_jscode.expr->Piecewise((x, x < 1), (x ** 2, x > 1), (sin(x), x > 0))
A:sympy.printing.tests.test_jscode.p->JavascriptCodePrinter()
A:sympy.printing.tests.test_jscode.(n, m, o)->symbols('n m o', integer=True)
A:sympy.printing.tests.test_jscode.p._not_c->set()
A:sympy.printing.tests.test_jscode.(n, m)->symbols('n m', integer=True)
A:sympy.printing.tests.test_jscode.y->IndexedBase('y')
A:sympy.printing.tests.test_jscode.j->Idx('j', n)
A:sympy.printing.tests.test_jscode.c->jscode(b[j] * a[i, j] + b[k] * a[i, k] + b[j] * b[k] * c[i, j, k], assign_to=y[i])
A:sympy.printing.tests.test_jscode.(i, m)->symbols('i m', integer=True, cls=Dummy)
A:sympy.printing.tests.test_jscode.code->jscode(x[i], assign_to=y[i])
A:sympy.printing.tests.test_jscode.z->IndexedBase('z')
A:sympy.printing.tests.test_jscode.(n, m, o, p)->symbols('n m o p', integer=True)
A:sympy.printing.tests.test_jscode.a->IndexedBase('a')
A:sympy.printing.tests.test_jscode.b->IndexedBase('b')
A:sympy.printing.tests.test_jscode.k->Idx('k', o)
A:sympy.printing.tests.test_jscode.l->Idx('l', p)
A:sympy.printing.tests.test_jscode.mat->Matrix([x * y, Piecewise((2 + x, y > 0), (y, True)), sin(z)])
A:sympy.printing.tests.test_jscode.q->MatrixSymbol('q', 5, 1)
A:sympy.printing.tests.test_jscode.M->MatrixSymbol('M', 3, 3)
A:sympy.printing.tests.test_jscode.m->Matrix([[sin(q[1, 0]), 0, cos(q[2, 0])], [q[1, 0] + q[2, 0], q[3, 0], 5], [2 * q[4, 0] / q[1, 0], sqrt(q[0, 0]) + 4, 0]])
sympy.printing.tests.test_jscode.test_Matrix_printing()
sympy.printing.tests.test_jscode.test_dummy_loops()
sympy.printing.tests.test_jscode.test_jscode_Indexed()
sympy.printing.tests.test_jscode.test_jscode_Integer()
sympy.printing.tests.test_jscode.test_jscode_Piecewise()
sympy.printing.tests.test_jscode.test_jscode_Piecewise_deep()
sympy.printing.tests.test_jscode.test_jscode_Pow()
sympy.printing.tests.test_jscode.test_jscode_Rational()
sympy.printing.tests.test_jscode.test_jscode_boolean()
sympy.printing.tests.test_jscode.test_jscode_constants_mathh()
sympy.printing.tests.test_jscode.test_jscode_constants_other()
sympy.printing.tests.test_jscode.test_jscode_exceptions()
sympy.printing.tests.test_jscode.test_jscode_functions()
sympy.printing.tests.test_jscode.test_jscode_inline_function()
sympy.printing.tests.test_jscode.test_jscode_loops_add()
sympy.printing.tests.test_jscode.test_jscode_loops_addfactor()
sympy.printing.tests.test_jscode.test_jscode_loops_matrix_vector()
sympy.printing.tests.test_jscode.test_jscode_loops_multiple_contractions()
sympy.printing.tests.test_jscode.test_jscode_loops_multiple_terms()
sympy.printing.tests.test_jscode.test_jscode_settings()
sympy.printing.tests.test_jscode.test_jscode_sqrt()
sympy.printing.tests.test_jscode.test_printmethod()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/pretty_symbology.py----------------------------------------
A:sympy.printing.pretty.pretty_symbology.u->unicodedata.lookup(name)
A:sympy.printing.pretty.pretty_symbology.encoding->getattr(sys.stdout, 'encoding', None)
A:sympy.printing.pretty.pretty_symbology.greek_letters->list(greeks)
A:sympy.printing.pretty.pretty_symbology.greek_unicode->dict(((L, g(L)) for L in greek_letters))
A:sympy.printing.pretty.pretty_symbology.greek_unicode['varsigma']->u('ς')
A:sympy.printing.pretty.pretty_symbology.sub[l]->LSUB(l)
A:sympy.printing.pretty.pretty_symbology.sup[l]->LSUP(l)
A:sympy.printing.pretty.pretty_symbology.sub[gl]->GSUB(gl)
A:sympy.printing.pretty.pretty_symbology.sub[d]->DSUB(d)
A:sympy.printing.pretty.pretty_symbology.sup[d]->DSUP(d)
A:sympy.printing.pretty.pretty_symbology.sub[s]->SSUB(s)
A:sympy.printing.pretty.pretty_symbology.sup[s]->SSUP(s)
A:sympy.printing.pretty.pretty_symbology.(name, sups, subs)->split_super_sub(symb_name)
A:sympy.printing.pretty.pretty_symbology.gG->dict(((L, g(L)) for L in greek_letters)).get(s)
A:sympy.printing.pretty.pretty_symbology.name->translate(name)
A:sympy.printing.pretty.pretty_symbology.pretty->''.join([mapping[c] for c in s])
A:sympy.printing.pretty.pretty_symbology.pretty_sups->pretty_list(sups, sup)
A:sympy.printing.pretty.pretty_symbology.pretty_subs->pretty_list(subs, sub)
A:sympy.printing.pretty.pretty_symbology.sups_result->' '.join(pretty_sups)
A:sympy.printing.pretty.pretty_symbology.subs_result->' '.join(pretty_subs)
sympy.pretty_symbology.annotated(letter)
sympy.pretty_symbology.hobj(symb,width)
sympy.pretty_symbology.pretty_atom(atom_name,default=None)
sympy.pretty_symbology.pretty_symbol(symb_name)
sympy.pretty_symbology.pretty_try_use_unicode()
sympy.pretty_symbology.pretty_use_unicode(flag=None)
sympy.pretty_symbology.vobj(symb,height)
sympy.pretty_symbology.xobj(symb,length)
sympy.pretty_symbology.xstr(*args)
sympy.pretty_symbology.xsym(sym)
sympy.printing.pretty.pretty_symbology.annotated(letter)
sympy.printing.pretty.pretty_symbology.hobj(symb,width)
sympy.printing.pretty.pretty_symbology.pretty_atom(atom_name,default=None)
sympy.printing.pretty.pretty_symbology.pretty_symbol(symb_name)
sympy.printing.pretty.pretty_symbology.pretty_try_use_unicode()
sympy.printing.pretty.pretty_symbology.pretty_use_unicode(flag=None)
sympy.printing.pretty.pretty_symbology.vobj(symb,height)
sympy.printing.pretty.pretty_symbology.xobj(symb,length)
sympy.printing.pretty.pretty_symbology.xstr(*args)
sympy.printing.pretty.pretty_symbology.xsym(sym)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/pretty.py----------------------------------------
A:sympy.printing.pretty.pretty.pform->prettyForm(*pform.right(')'))
A:sympy.printing.pretty.pretty.symb->pretty_symbol(e.name)
A:sympy.printing.pretty.pretty.n_pform->self._print(n)
A:sympy.printing.pretty.pretty.k_pform->self._print(k)
A:sympy.printing.pretty.pretty.op->prettyForm(' ' + xsym(e.rel_op) + ' ')
A:sympy.printing.pretty.pretty.l->self._print(e.lhs)
A:sympy.printing.pretty.pretty.r->self._print(e.rhs)
A:sympy.printing.pretty.pretty.args->list(expr.symbols)
A:sympy.printing.pretty.pretty.pform_arg->prettyForm(*pform_arg.below(arg))
A:sympy.printing.pretty.pretty.deriv_symbol->U('PARTIAL DIFFERENTIAL')
A:sympy.printing.pretty.pretty.syms->list(reversed(deriv.variables))
A:sympy.printing.pretty.pretty.s->prettyForm(*stringPict.next(K, ': ', V))
A:sympy.printing.pretty.pretty.ds->prettyForm(*s.left(deriv_symbol))
A:sympy.printing.pretty.pretty.x->list(x)
A:sympy.printing.pretty.pretty.f->prettyForm(*f.parens())
A:sympy.printing.pretty.pretty.lim->prettyForm(*lim.parens())
A:sympy.printing.pretty.pretty.prettyF->prettyForm(*prettySign.right(prettyF))
A:sympy.printing.pretty.pretty.prettyArg->prettyForm(*prettyArg.parens())
A:sympy.printing.pretty.pretty.arg->self._print(e.args[0])
A:sympy.printing.pretty.pretty.h->max(hrequired, 2)
A:sympy.printing.pretty.pretty.vint->vobj('int', H)
A:sympy.printing.pretty.pretty.prettyA->prettyForm(*prettyA.right(' ' * spc))
A:sympy.printing.pretty.pretty.prettyB->prettyForm(*prettyB.left(' ' * spc))
A:sympy.printing.pretty.pretty.spc->max(1, 4 - prettyA.width())
A:sympy.printing.pretty.pretty.pretty_func->prettyForm(*pretty_sign.right(pretty_func))
A:sympy.printing.pretty.pretty.horizontal_chr->xobj('-', 1)
A:sympy.printing.pretty.pretty.corner_chr->u('┬')
A:sympy.printing.pretty.pretty.vertical_chr->xobj('|', 1)
A:sympy.printing.pretty.pretty.func_height->prettyForm(*pretty_sign.right(pretty_func)).height()
A:sympy.printing.pretty.pretty.pretty_sign->prettyForm(*pretty_sign.right(padding))
A:sympy.printing.pretty.pretty.pretty_upper->self._print(lim[2])
A:sympy.printing.pretty.pretty.pretty_lower->self._print(C.Equality(lim[0], lim[1]))
A:sympy.printing.pretty.pretty.max_upper->max(max_upper, prettyUpper.height())
A:sympy.printing.pretty.pretty.sign_height->prettyForm(*prettySign.right(pad)).height()
A:sympy.printing.pretty.pretty.height->prettyForm(*pretty_sign.right(padding)).height()
A:sympy.printing.pretty.pretty.padding->prettyForm(*padding.stack(*[' '] * (height - 1)))
A:sympy.printing.pretty.pretty.vsum->vobj('sum', 4)
A:sympy.printing.pretty.pretty.prettyUpper->self._print('')
A:sympy.printing.pretty.pretty.prettyLower->self._print(lim[0])
A:sympy.printing.pretty.pretty.(d, h, slines, adjustment)->asum(H, prettyLower.width(), prettyUpper.width(), ascii_mode)
A:sympy.printing.pretty.pretty.prettySign->prettyForm(*prettySign.right(pad))
A:sympy.printing.pretty.pretty.pad->prettyForm(*pad.stack(*[' '] * h))
A:sympy.printing.pretty.pretty.E->self._print(e)
A:sympy.printing.pretty.pretty.Lim->prettyForm(*Lim.right(E))
A:sympy.printing.pretty.pretty.LimArg->prettyForm(*LimArg.right(self._print(dir)))
A:sympy.printing.pretty.pretty.Ms[i, j]->self._print(M[i, j])
A:sympy.printing.pretty.pretty.maxw[j]->max([Ms[i, j].width() for i in range(M.rows)] or [0])
A:sympy.printing.pretty.pretty.D_row->self._hprint_vec(v)
A:sympy.printing.pretty.pretty.D->prettyForm(*F.right(' ', D))
A:sympy.printing.pretty.pretty.prettyFunc->prettyForm('Chi')
A:sympy.printing.pretty.pretty.dag->prettyForm('+')
A:sympy.printing.pretty.pretty.args[i]->self._print(a)
A:sympy.printing.pretty.pretty.delim->pretty_atom('Ring')
A:sympy.printing.pretty.pretty.items->sorted(s, key=default_sort_key)
A:sympy.printing.pretty.pretty.inneritems->list(vect.components.items())
A:sympy.printing.pretty.pretty.tempstr->tempstr.replace(u('⎞'), u('⎞') + ' ' + vectstrs[i]).replace(u('⎞'), u('⎞') + ' ' + vectstrs[i])
A:sympy.printing.pretty.pretty.n_newlines->max([len(x) for x in o1])
A:sympy.printing.pretty.pretty.P[n, 0]->self._print(ec.expr)
A:sympy.printing.pretty.pretty.P[n, 1]->prettyForm(*prettyForm('for ').right(self._print(ec.cond)))
A:sympy.printing.pretty.pretty.len_args->len(pexpr.args)
A:sympy.printing.pretty.pretty.p->stringpict.stringPict.next(pform_neg, p)
A:sympy.printing.pretty.pretty.tmp->prettyForm(*p1.right(p2))
A:sympy.printing.pretty.pretty.sep->stringPict(vobj('|', tmp.height()), baseline=tmp.baseline)
A:sympy.printing.pretty.pretty.P->prettyForm(*P.left(' '))
A:sympy.printing.pretty.pretty.(sz, t, b, add, img)->annotated('G')
A:sympy.printing.pretty.pretty.F->prettyForm(*F.right(p))
A:sympy.printing.pretty.pretty.vp[idx]->self._hprint_vec(v[idx])
A:sympy.printing.pretty.pretty.maxw->max(vp[0, i].width(), vp[1, i].width())
A:sympy.printing.pretty.pretty.D1->prettyForm(*D1.below(' '))
A:sympy.printing.pretty.pretty.D2->prettyForm(*vp[1, 0].right('  ', vp[1, 1]))
A:sympy.printing.pretty.pretty.pp->PrettyPrinter(settings)
A:sympy.printing.pretty.pretty.pq->self._print(len(e.bq))
A:sympy.printing.pretty.pretty.pm->self._print(len(e.bm))
A:sympy.printing.pretty.pretty.pn->self._print(len(e.an))
A:sympy.printing.pretty.pretty.(pp, pm)->adjust(pp, pm)
A:sympy.printing.pretty.pretty.(pq, pn)->adjust(pq, pn)
A:sympy.printing.pretty.pretty.pu->prettyForm(*pu.below('\n' * ht))
A:sympy.printing.pretty.pretty.pl->prettyForm(*pp.right(', ', pq))
A:sympy.printing.pretty.pretty.base->self._print(ts.base_set)
A:sympy.printing.pretty.pretty.prettyArgs->prettyForm(*self._print_seq(e.args).parens())
A:sympy.printing.pretty.pretty.arrow->xsym('-->')
A:sympy.printing.pretty.pretty.var_form->self._print(tuple(vars))
A:sympy.printing.pretty.pretty.pforma0->self._print(e.args[0])
A:sympy.printing.pretty.pretty.pforma1->self._print(e.args[1])
A:sympy.printing.pretty.pretty.pforma2->self._print(e.args[2])
A:sympy.printing.pretty.pretty.pforma->prettyForm(*pforma.left('; '))
A:sympy.printing.pretty.pretty.terms->self._as_ordered_terms(expr, order=order)
A:sympy.printing.pretty.pretty.(coeff, other)->term.as_coeff_mul()
A:sympy.printing.pretty.pretty.a[i]->self._print(a[i])
A:sympy.printing.pretty.pretty.b[i]->self._print(b[i])
A:sympy.printing.pretty.pretty.bpretty->self._print(base)
A:sympy.printing.pretty.pretty._zZ->xobj('/', 1)
A:sympy.printing.pretty.pretty.exp->exp.ljust(2).ljust(2)
A:sympy.printing.pretty.pretty.rootsign->prettyForm(*rootsign.right(diagonal))
A:sympy.printing.pretty.pretty.diagonal->stringPict('\n'.join((' ' * (linelength - i - 1) + _zZ + ' ' * i for i in range(linelength))))
A:sympy.printing.pretty.pretty.rootsign.baseline->max(1, bpretty.baseline)
A:sympy.printing.pretty.pretty.(b, e)->power.as_base_exp()
A:sympy.printing.pretty.pretty.(n, d)->fraction(e)
A:sympy.printing.pretty.pretty.result->self.__print_numer_denom(expr.numerator, expr.denominator)
A:sympy.printing.pretty.pretty.prod_char->u('×')
A:sympy.printing.pretty.pretty.dots->u('…')
A:sympy.printing.pretty.pretty.it->iter(s)
A:sympy.printing.pretty.pretty.printset->tuple(s)
A:sympy.printing.pretty.pretty.inn->u('∊')
A:sympy.printing.pretty.pretty.variables->self._print_seq(ts.lamda.variables)
A:sympy.printing.pretty.pretty.expr->self._print(ts.lamda.expr)
A:sympy.printing.pretty.pretty.bar->self._print('|')
A:sympy.printing.pretty.pretty.el->u(' ∈ ')
A:sympy.printing.pretty.pretty.ptuple->prettyForm(*stringPict.next(self._print(t[0]), ','))
A:sympy.printing.pretty.pretty.keys->sorted(d.keys(), key=default_sort_key)
A:sympy.printing.pretty.pretty.K->self._print(k)
A:sympy.printing.pretty.pretty.V->self._print(d[k])
A:sympy.printing.pretty.pretty.pretty->prettyForm(*stringPict.next(type(s).__name__, pretty))
A:sympy.printing.pretty.pretty.form->u('ℤ_%d')
A:sympy.printing.pretty.pretty.prefix->u('ℂ')
A:sympy.printing.pretty.pretty.order->prettyForm(*prettyForm('order=').right(self._print(basis.order)))
A:sympy.printing.pretty.pretty.exprs->prettyForm(*self.join(', ', exprs).parens(left='[', right=']'))
A:sympy.printing.pretty.pretty.domain->self._print(morphism.domain)
A:sympy.printing.pretty.pretty.rvert->stringPict(vobj('|', h), baseline=pform.baseline)
A:sympy.printing.pretty.pretty.a->stringPict('d')
A:sympy.printing.pretty.pretty.top->stringPict(*b.left(' ' * a.width()))
A:sympy.printing.pretty.pretty.bot->stringPict(*a.right(' ' * b.width()))
A:sympy.printing.pretty.pretty.codomain->self._print(morphism.codomain)
A:sympy.printing.pretty.pretty.pretty_name->self._print(component_names)
A:sympy.printing.pretty.pretty.pretty_morphism->self._print_Morphism(morphism)
A:sympy.printing.pretty.pretty.circle->xsym('.')
A:sympy.printing.pretty.pretty.pretty_result->pretty_result.right(results_arrow, pretty_conclusions).right(results_arrow, pretty_conclusions)
A:sympy.printing.pretty.pretty.matrix->self._print(h._sympy_matrix())
A:sympy.printing.pretty.pretty.uflag->pretty_use_unicode(use_unicode)
sympy.pager_print(expr,**settings)
sympy.pretty(expr,**settings)
sympy.pretty.PrettyPrinter(self,settings=None)
sympy.pretty.PrettyPrinter.__print_Boolean(self,e,char,sort=True)
sympy.pretty.PrettyPrinter.__print_numer_denom(self,p,q)
sympy.pretty.PrettyPrinter._hprint_vec(self,v)
sympy.pretty.PrettyPrinter._hprint_vseparator(self,p1,p2)
sympy.pretty.PrettyPrinter._print_Abs(self,e)
sympy.pretty.PrettyPrinter._print_Add(self,expr,order=None)
sympy.pretty.PrettyPrinter._print_Adjoint(self,expr)
sympy.pretty.PrettyPrinter._print_AlgebraicNumber(self,expr)
sympy.pretty.PrettyPrinter._print_And(self,e)
sympy.pretty.PrettyPrinter._print_Atom(self,e)
sympy.pretty.PrettyPrinter._print_BaseScalarField(self,field)
sympy.pretty.PrettyPrinter._print_BaseVectorField(self,field)
sympy.pretty.PrettyPrinter._print_BasisDependent(self,expr)
sympy.pretty.PrettyPrinter._print_BlockMatrix(self,B)
sympy.pretty.PrettyPrinter._print_Category(self,category)
sympy.pretty.PrettyPrinter._print_Chi(self,e)
sympy.pretty.PrettyPrinter._print_Complement(self,u)
sympy.pretty.PrettyPrinter._print_ComplexField(self,domain)
sympy.pretty.PrettyPrinter._print_CompositeMorphism(self,morphism)
sympy.pretty.PrettyPrinter._print_Contains(self,e)
sympy.pretty.PrettyPrinter._print_Cycle(self,dc)
sympy.pretty.PrettyPrinter._print_DMF(self,p)
sympy.pretty.PrettyPrinter._print_DMP(self,p)
sympy.pretty.PrettyPrinter._print_Derivative(self,deriv)
sympy.pretty.PrettyPrinter._print_Diagram(self,diagram)
sympy.pretty.PrettyPrinter._print_DiagramGrid(self,grid)
sympy.pretty.PrettyPrinter._print_Dict(self,d)
sympy.pretty.PrettyPrinter._print_Differential(self,diff)
sympy.pretty.PrettyPrinter._print_Equivalent(self,e,altchar=None)
sympy.pretty.PrettyPrinter._print_ExpBase(self,e)
sympy.pretty.PrettyPrinter._print_FiniteField(self,expr)
sympy.pretty.PrettyPrinter._print_FiniteSet(self,s)
sympy.pretty.PrettyPrinter._print_Float(self,e)
sympy.pretty.PrettyPrinter._print_FracElement(self,frac)
sympy.pretty.PrettyPrinter._print_FracField(self,field)
sympy.pretty.PrettyPrinter._print_Fraction(self,expr)
sympy.pretty.PrettyPrinter._print_FractionField(self,expr)
sympy.pretty.PrettyPrinter._print_FreeModule(self,M)
sympy.pretty.PrettyPrinter._print_FreeModuleElement(self,m)
sympy.pretty.PrettyPrinter._print_Function(self,e,sort=False)
sympy.pretty.PrettyPrinter._print_FunctionMatrix(self,X)
sympy.pretty.PrettyPrinter._print_GeometryEntity(self,expr)
sympy.pretty.PrettyPrinter._print_GroebnerBasis(self,basis)
sympy.pretty.PrettyPrinter._print_HadamardProduct(self,expr)
sympy.pretty.PrettyPrinter._print_IdentityMorphism(self,morphism)
sympy.pretty.PrettyPrinter._print_ImageSet(self,ts)
sympy.pretty.PrettyPrinter._print_Implies(self,e,altchar=None)
sympy.pretty.PrettyPrinter._print_IntegerRing(self,expr)
sympy.pretty.PrettyPrinter._print_Integral(self,integral)
sympy.pretty.PrettyPrinter._print_Intersection(self,u)
sympy.pretty.PrettyPrinter._print_Interval(self,i)
sympy.pretty.PrettyPrinter._print_KroneckerDelta(self,e)
sympy.pretty.PrettyPrinter._print_Lambda(self,e)
sympy.pretty.PrettyPrinter._print_Limit(self,l)
sympy.pretty.PrettyPrinter._print_MatAdd(self,expr)
sympy.pretty.PrettyPrinter._print_MatMul(self,expr)
sympy.pretty.PrettyPrinter._print_MatPow(self,expr)
sympy.pretty.PrettyPrinter._print_MatrixBase(self,e)
sympy.pretty.PrettyPrinter._print_MatrixElement(self,expr)
sympy.pretty.PrettyPrinter._print_MatrixHomomorphism(self,h)
sympy.pretty.PrettyPrinter._print_MatrixSlice(self,m)
sympy.pretty.PrettyPrinter._print_ModuleImplementedIdeal(self,M)
sympy.pretty.PrettyPrinter._print_Morphism(self,morphism)
sympy.pretty.PrettyPrinter._print_Mul(self,product)
sympy.pretty.PrettyPrinter._print_NamedMorphism(self,morphism)
sympy.pretty.PrettyPrinter._print_Nand(self,e)
sympy.pretty.PrettyPrinter._print_Nor(self,e)
sympy.pretty.PrettyPrinter._print_Not(self,e)
sympy.pretty.PrettyPrinter._print_Object(self,object)
sympy.pretty.PrettyPrinter._print_Or(self,e)
sympy.pretty.PrettyPrinter._print_Order(self,expr)
sympy.pretty.PrettyPrinter._print_PDF(self,pdf)
sympy.pretty.PrettyPrinter._print_Piecewise(self,pexpr)
sympy.pretty.PrettyPrinter._print_PolyElement(self,poly)
sympy.pretty.PrettyPrinter._print_PolyRing(self,ring)
sympy.pretty.PrettyPrinter._print_PolynomialRing(self,expr)
sympy.pretty.PrettyPrinter._print_PolynomialRingBase(self,expr)
sympy.pretty.PrettyPrinter._print_Pow(self,power)
sympy.pretty.PrettyPrinter._print_Product(self,expr)
sympy.pretty.PrettyPrinter._print_ProductSet(self,p)
sympy.pretty.PrettyPrinter._print_QuotientModule(self,M)
sympy.pretty.PrettyPrinter._print_QuotientModuleElement(self,m)
sympy.pretty.PrettyPrinter._print_QuotientRing(self,R)
sympy.pretty.PrettyPrinter._print_QuotientRingElement(self,R)
sympy.pretty.PrettyPrinter._print_RandomDomain(self,d)
sympy.pretty.PrettyPrinter._print_Range(self,s)
sympy.pretty.PrettyPrinter._print_Rational(self,expr)
sympy.pretty.PrettyPrinter._print_RationalField(self,expr)
sympy.pretty.PrettyPrinter._print_RealField(self,domain)
sympy.pretty.PrettyPrinter._print_Relational(self,e)
sympy.pretty.PrettyPrinter._print_RootOf(self,expr)
sympy.pretty.PrettyPrinter._print_RootSum(self,expr)
sympy.pretty.PrettyPrinter._print_SubModule(self,M)
sympy.pretty.PrettyPrinter._print_Subs(self,e)
sympy.pretty.PrettyPrinter._print_Sum(self,expr)
sympy.pretty.PrettyPrinter._print_Symbol(self,e)
sympy.pretty.PrettyPrinter._print_Tr(self,p)
sympy.pretty.PrettyPrinter._print_Transpose(self,expr)
sympy.pretty.PrettyPrinter._print_Tuple(self,expr)
sympy.pretty.PrettyPrinter._print_Union(self,u)
sympy.pretty.PrettyPrinter._print_Xor(self,e)
sympy.pretty.PrettyPrinter._print_atan2(self,e)
sympy.pretty.PrettyPrinter._print_basestring(self,e)
sympy.pretty.PrettyPrinter._print_binomial(self,e)
sympy.pretty.PrettyPrinter._print_catalan(self,e)
sympy.pretty.PrettyPrinter._print_ceiling(self,e)
sympy.pretty.PrettyPrinter._print_conjugate(self,e)
sympy.pretty.PrettyPrinter._print_dict(self,d)
sympy.pretty.PrettyPrinter._print_elliptic_e(self,e)
sympy.pretty.PrettyPrinter._print_elliptic_f(self,e)
sympy.pretty.PrettyPrinter._print_elliptic_k(self,e)
sympy.pretty.PrettyPrinter._print_elliptic_pi(self,e)
sympy.pretty.PrettyPrinter._print_euler(self,e)
sympy.pretty.PrettyPrinter._print_expint(self,e)
sympy.pretty.PrettyPrinter._print_factorial(self,e)
sympy.pretty.PrettyPrinter._print_factorial2(self,e)
sympy.pretty.PrettyPrinter._print_floor(self,e)
sympy.pretty.PrettyPrinter._print_gamma(self,e)
sympy.pretty.PrettyPrinter._print_hyper(self,e)
sympy.pretty.PrettyPrinter._print_list(self,l)
sympy.pretty.PrettyPrinter._print_lowergamma(self,e)
sympy.pretty.PrettyPrinter._print_matrix_contents(self,e)
sympy.pretty.PrettyPrinter._print_meijerg(self,e)
sympy.pretty.PrettyPrinter._print_nth_root(self,base,expt)
sympy.pretty.PrettyPrinter._print_seq(self,seq,left=None,right=None,delimiter=',',parenthesize=lambdax:False)
sympy.pretty.PrettyPrinter._print_set(self,s)
sympy.pretty.PrettyPrinter._print_stringPict(self,e)
sympy.pretty.PrettyPrinter._print_subfactorial(self,e)
sympy.pretty.PrettyPrinter._print_tuple(self,t)
sympy.pretty.PrettyPrinter._print_uppergamma(self,e)
sympy.pretty.PrettyPrinter._use_unicode(self)
sympy.pretty.PrettyPrinter.doprint(self,expr)
sympy.pretty.PrettyPrinter.join(self,delimiter,args)
sympy.pretty_print(expr,**settings)
sympy.printing.pretty.pretty.PrettyPrinter(self,settings=None)
sympy.printing.pretty.pretty.PrettyPrinter.__init__(self,settings=None)
sympy.printing.pretty.pretty.PrettyPrinter.__print_Boolean(self,e,char,sort=True)
sympy.printing.pretty.pretty.PrettyPrinter.__print_numer_denom(self,p,q)
sympy.printing.pretty.pretty.PrettyPrinter._hprint_vec(self,v)
sympy.printing.pretty.pretty.PrettyPrinter._hprint_vseparator(self,p1,p2)
sympy.printing.pretty.pretty.PrettyPrinter._print_Abs(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Add(self,expr,order=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_Adjoint(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_AlgebraicNumber(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_And(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Atom(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_BaseScalarField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_BaseVectorField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_BasisDependent(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_BlockMatrix(self,B)
sympy.printing.pretty.pretty.PrettyPrinter._print_Category(self,category)
sympy.printing.pretty.pretty.PrettyPrinter._print_Chi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Complement(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_ComplexField(self,domain)
sympy.printing.pretty.pretty.PrettyPrinter._print_CompositeMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_Contains(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Cycle(self,dc)
sympy.printing.pretty.pretty.PrettyPrinter._print_DMF(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_DMP(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_Derivative(self,deriv)
sympy.printing.pretty.pretty.PrettyPrinter._print_Diagram(self,diagram)
sympy.printing.pretty.pretty.PrettyPrinter._print_DiagramGrid(self,grid)
sympy.printing.pretty.pretty.PrettyPrinter._print_Dict(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_Differential(self,diff)
sympy.printing.pretty.pretty.PrettyPrinter._print_Equivalent(self,e,altchar=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_ExpBase(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_FiniteField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FiniteSet(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Float(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_FracElement(self,frac)
sympy.printing.pretty.pretty.PrettyPrinter._print_FracField(self,field)
sympy.printing.pretty.pretty.PrettyPrinter._print_Fraction(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FractionField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_FreeModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_FreeModuleElement(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_Function(self,e,sort=False)
sympy.printing.pretty.pretty.PrettyPrinter._print_FunctionMatrix(self,X)
sympy.printing.pretty.pretty.PrettyPrinter._print_GeometryEntity(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_GroebnerBasis(self,basis)
sympy.printing.pretty.pretty.PrettyPrinter._print_HadamardProduct(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_IdentityMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_ImageSet(self,ts)
sympy.printing.pretty.pretty.PrettyPrinter._print_Implies(self,e,altchar=None)
sympy.printing.pretty.pretty.PrettyPrinter._print_IntegerRing(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Integral(self,integral)
sympy.printing.pretty.pretty.PrettyPrinter._print_Intersection(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_Interval(self,i)
sympy.printing.pretty.pretty.PrettyPrinter._print_KroneckerDelta(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Lambda(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Limit(self,l)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatAdd(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatMul(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatPow(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixBase(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixElement(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixHomomorphism(self,h)
sympy.printing.pretty.pretty.PrettyPrinter._print_MatrixSlice(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_ModuleImplementedIdeal(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_Morphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_Mul(self,product)
sympy.printing.pretty.pretty.PrettyPrinter._print_NamedMorphism(self,morphism)
sympy.printing.pretty.pretty.PrettyPrinter._print_Nand(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Nor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Not(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Object(self,object)
sympy.printing.pretty.pretty.PrettyPrinter._print_Or(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Order(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PDF(self,pdf)
sympy.printing.pretty.pretty.PrettyPrinter._print_Piecewise(self,pexpr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolyElement(self,poly)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolyRing(self,ring)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolynomialRing(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_PolynomialRingBase(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Pow(self,power)
sympy.printing.pretty.pretty.PrettyPrinter._print_Product(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_ProductSet(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientModuleElement(self,m)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientRing(self,R)
sympy.printing.pretty.pretty.PrettyPrinter._print_QuotientRingElement(self,R)
sympy.printing.pretty.pretty.PrettyPrinter._print_RandomDomain(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_Range(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_Rational(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_RationalField(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_RealField(self,domain)
sympy.printing.pretty.pretty.PrettyPrinter._print_Relational(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_RootOf(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_RootSum(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_SubModule(self,M)
sympy.printing.pretty.pretty.PrettyPrinter._print_Subs(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Sum(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Symbol(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_Tr(self,p)
sympy.printing.pretty.pretty.PrettyPrinter._print_Transpose(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Tuple(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter._print_Union(self,u)
sympy.printing.pretty.pretty.PrettyPrinter._print_Xor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_atan2(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_basestring(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_binomial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_catalan(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_ceiling(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_conjugate(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_dict(self,d)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_e(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_f(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_k(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_elliptic_pi(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_euler(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_expint(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_factorial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_factorial2(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_floor(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_gamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_hyper(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_list(self,l)
sympy.printing.pretty.pretty.PrettyPrinter._print_lowergamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_matrix_contents(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_meijerg(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_nth_root(self,base,expt)
sympy.printing.pretty.pretty.PrettyPrinter._print_seq(self,seq,left=None,right=None,delimiter=',',parenthesize=lambdax:False)
sympy.printing.pretty.pretty.PrettyPrinter._print_set(self,s)
sympy.printing.pretty.pretty.PrettyPrinter._print_stringPict(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_subfactorial(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._print_tuple(self,t)
sympy.printing.pretty.pretty.PrettyPrinter._print_uppergamma(self,e)
sympy.printing.pretty.pretty.PrettyPrinter._use_unicode(self)
sympy.printing.pretty.pretty.PrettyPrinter.doprint(self,expr)
sympy.printing.pretty.pretty.PrettyPrinter.join(self,delimiter,args)
sympy.printing.pretty.pretty.pager_print(expr,**settings)
sympy.printing.pretty.pretty.pretty(expr,**settings)
sympy.printing.pretty.pretty.pretty_print(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/stringpict.py----------------------------------------
A:sympy.printing.pretty.stringpict.self.picture->stringPict.equalLengths(s.splitlines())
A:sympy.printing.pretty.stringpict.width->max((len(line) for line in lines))
A:sympy.printing.pretty.stringpict.arg->args[0].__pretty__()
A:sympy.printing.pretty.stringpict.newBaseline->max((obj.baseline for obj in objects))
A:sympy.printing.pretty.stringpict.newHeightBelowBaseline->max((obj.height() - obj.baseline for obj in objects))
A:sympy.printing.pretty.stringpict.newWidth->max((obj.width() for obj in objects if obj is not stringPict.LINE))
A:sympy.printing.pretty.stringpict.lineObj->stringPict(hobj('-', newWidth))
A:sympy.printing.pretty.stringpict.(s, baseline)->stringPict.stack(self, *args)
A:sympy.printing.pretty.stringpict.(string, baseline)->stringPict.stack(*args + (self,))
A:sympy.printing.pretty.stringpict.h->ctypes.windll.kernel32.GetStdHandle(-12)
A:sympy.printing.pretty.stringpict.lparen->stringPict(vobj(left, h), baseline=b)
A:sympy.printing.pretty.stringpict.res->ctypes.windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
A:sympy.printing.pretty.stringpict.rparen->stringPict(vobj(right, h), baseline=b)
A:sympy.printing.pretty.stringpict.slash->stringPict(slash, height - 1)
A:sympy.printing.pretty.stringpict.result->self.above('_' * self.width())
A:sympy.printing.pretty.stringpict.height->self.height()
A:sympy.printing.pretty.stringpict.downline->downline.above(n).above(n)
A:sympy.printing.pretty.stringpict.root->downline.above(n).above(n).right(slash)
A:sympy.printing.pretty.stringpict.ncols->curses.tigetnum('cols')
A:sympy.printing.pretty.stringpict.csbi->create_string_buffer(22)
A:sympy.printing.pretty.stringpict.(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)->struct.unpack('hhhhHhhhhhh', csbi.raw)
A:sympy.printing.pretty.stringpict.(ATOM, FUNC, DIV, POW, MUL, ADD, NEG, OPEN)->range(8)
A:sympy.printing.pretty.stringpict.num->stringPict(*num.parens())
A:sympy.printing.pretty.stringpict.den->stringPict(*den.parens())
A:sympy.printing.pretty.stringpict.len_res->len(result)
A:sympy.printing.pretty.stringpict.a->stringPict(*a.parens())
A:sympy.printing.pretty.stringpict.b->stringPict(*b.parens())
A:sympy.printing.pretty.stringpict.func->stringPict(*a.prettyFunc.right(b))
A:sympy.printing.pretty.stringpict.top->stringPict(*b.left(' ' * a.width()))
A:sympy.printing.pretty.stringpict.bot->stringPict(*a.right(' ' * b.width()))
A:sympy.printing.pretty.stringpict.argumentList->stringPict(*argumentList.parens())
sympy.pretty.stringpict.prettyForm(self,s,baseline=0,binding=0,unicode=None)
sympy.pretty.stringpict.prettyForm.__add__(self,*others)
sympy.pretty.stringpict.prettyForm.__div__(self,den,slashed=False)
sympy.pretty.stringpict.prettyForm.__mul__(self,*others)
sympy.pretty.stringpict.prettyForm.__pow__(self,b)
sympy.pretty.stringpict.prettyForm.__repr__(self)
sympy.pretty.stringpict.prettyForm.__truediv__(self,o)
sympy.pretty.stringpict.prettyForm.apply(function,*args)
sympy.pretty.stringpict.stringPict(self,s,baseline=0)
sympy.pretty.stringpict.stringPict.__eq__(self,o)
sympy.pretty.stringpict.stringPict.__getitem__(self,index)
sympy.pretty.stringpict.stringPict.__hash__(self)
sympy.pretty.stringpict.stringPict.__len__(self)
sympy.pretty.stringpict.stringPict.__repr__(self)
sympy.pretty.stringpict.stringPict.__str__(self)
sympy.pretty.stringpict.stringPict.__unicode__(self)
sympy.pretty.stringpict.stringPict.above(self,*args)
sympy.pretty.stringpict.stringPict.below(self,*args)
sympy.pretty.stringpict.stringPict.equalLengths(lines)
sympy.pretty.stringpict.stringPict.height(self)
sympy.pretty.stringpict.stringPict.left(self,*args)
sympy.pretty.stringpict.stringPict.leftslash(self)
sympy.pretty.stringpict.stringPict.next(*args)
sympy.pretty.stringpict.stringPict.parens(self,left='(',right=')',ifascii_nougly=False)
sympy.pretty.stringpict.stringPict.render(self,*args,**kwargs)
sympy.pretty.stringpict.stringPict.right(self,*args)
sympy.pretty.stringpict.stringPict.root(self,n=None)
sympy.pretty.stringpict.stringPict.stack(*args)
sympy.pretty.stringpict.stringPict.terminal_width(self)
sympy.pretty.stringpict.stringPict.width(self)
sympy.printing.pretty.stringpict.prettyForm(self,s,baseline=0,binding=0,unicode=None)
sympy.printing.pretty.stringpict.prettyForm.__add__(self,*others)
sympy.printing.pretty.stringpict.prettyForm.__div__(self,den,slashed=False)
sympy.printing.pretty.stringpict.prettyForm.__init__(self,s,baseline=0,binding=0,unicode=None)
sympy.printing.pretty.stringpict.prettyForm.__mul__(self,*others)
sympy.printing.pretty.stringpict.prettyForm.__pow__(self,b)
sympy.printing.pretty.stringpict.prettyForm.__repr__(self)
sympy.printing.pretty.stringpict.prettyForm.__truediv__(self,o)
sympy.printing.pretty.stringpict.prettyForm.apply(function,*args)
sympy.printing.pretty.stringpict.stringPict(self,s,baseline=0)
sympy.printing.pretty.stringpict.stringPict.__eq__(self,o)
sympy.printing.pretty.stringpict.stringPict.__getitem__(self,index)
sympy.printing.pretty.stringpict.stringPict.__hash__(self)
sympy.printing.pretty.stringpict.stringPict.__init__(self,s,baseline=0)
sympy.printing.pretty.stringpict.stringPict.__len__(self)
sympy.printing.pretty.stringpict.stringPict.__repr__(self)
sympy.printing.pretty.stringpict.stringPict.__str__(self)
sympy.printing.pretty.stringpict.stringPict.__unicode__(self)
sympy.printing.pretty.stringpict.stringPict.above(self,*args)
sympy.printing.pretty.stringpict.stringPict.below(self,*args)
sympy.printing.pretty.stringpict.stringPict.equalLengths(lines)
sympy.printing.pretty.stringpict.stringPict.height(self)
sympy.printing.pretty.stringpict.stringPict.left(self,*args)
sympy.printing.pretty.stringpict.stringPict.leftslash(self)
sympy.printing.pretty.stringpict.stringPict.next(*args)
sympy.printing.pretty.stringpict.stringPict.parens(self,left='(',right=')',ifascii_nougly=False)
sympy.printing.pretty.stringpict.stringPict.render(self,*args,**kwargs)
sympy.printing.pretty.stringpict.stringPict.right(self,*args)
sympy.printing.pretty.stringpict.stringPict.root(self,n=None)
sympy.printing.pretty.stringpict.stringPict.stack(*args)
sympy.printing.pretty.stringpict.stringPict.terminal_width(self)
sympy.printing.pretty.stringpict.stringPict.width(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/printing/pretty/tests/test_pretty.py----------------------------------------
A:sympy.printing.pretty.tests.test_pretty.(a, b, x, y, z, k)->symbols('a,b,x,y,z,k')
A:sympy.printing.pretty.tests.test_pretty.th->Symbol('theta')
A:sympy.printing.pretty.tests.test_pretty.ph->Symbol('phi')
A:sympy.printing.pretty.tests.test_pretty.ucode_str->u('  3\n 2 \n───\n  2\n10 ')
A:sympy.printing.pretty.tests.test_pretty.expr->homomorphism(R.free_module(1), R.free_module(1) / [[x]], [0])
A:sympy.printing.pretty.tests.test_pretty.ucode_str_1->u('⎡     2       ⎤\n⎢1 + x     1  ⎥\n⎢             ⎥\n⎣  y     x + y⎦')
A:sympy.printing.pretty.tests.test_pretty.ucode_str_2->u('⎡ 2           ⎤\n⎢x  + 1    1  ⎥\n⎢             ⎥\n⎣  y     x + y⎦')
A:sympy.printing.pretty.tests.test_pretty.ucode_str_3->u('y⋅(x + 1)')
A:sympy.printing.pretty.tests.test_pretty.n->Symbol('n', integer=True)
A:sympy.printing.pretty.tests.test_pretty.f->Function('f')
A:sympy.printing.pretty.tests.test_pretty.(x, y)->symbols('x y')
A:sympy.printing.pretty.tests.test_pretty.(n, m, k, l)->symbols('n m k l')
A:sympy.printing.pretty.tests.test_pretty.unicode_str->u('⎛d       ⎞│          \n⎜──(f(x))⎟│          \n⎜dx      ⎟│          \n⎜────────⎟│          \n⎝   y    ⎠│x=0, y=1/2')
A:sympy.printing.pretty.tests.test_pretty.alpha->Symbol('alpha')
A:sympy.printing.pretty.tests.test_pretty.beta->Function('beta')
A:sympy.printing.pretty.tests.test_pretty.X->Normal('x1', 0, 1)
A:sympy.printing.pretty.tests.test_pretty.Y->MatrixSymbol('Y', 2, 2)
A:sympy.printing.pretty.tests.test_pretty.expr_2->Dict({x ** 2: 1})
A:sympy.printing.pretty.tests.test_pretty.b1->Basic()
A:sympy.printing.pretty.tests.test_pretty.b2->Basic(Basic())
A:sympy.printing.pretty.tests.test_pretty.expr2->Dict({b2: b1, b1: b2})
A:sympy.printing.pretty.tests.test_pretty.syms->symbols('a:f')
A:sympy.printing.pretty.tests.test_pretty.fd->StringIO()
A:sympy.printing.pretty.tests.test_pretty.ascii_str->u('  oo    \n ___    \n \\  `   \n  \\    2\n  /   x \n /__,   \nx = 0   ')
A:sympy.printing.pretty.tests.test_pretty.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.printing.pretty.tests.test_pretty.e->Mul(x, y, evaluate=False)
A:sympy.printing.pretty.tests.test_pretty.D->Die('d1', 6)
A:sympy.printing.pretty.tests.test_pretty.A->Exponential('a', 1)
A:sympy.printing.pretty.tests.test_pretty.B->Exponential('b', 1)
A:sympy.printing.pretty.tests.test_pretty.F->sympy.QQ.old_poly_ring(x).free_module(2)
A:sympy.printing.pretty.tests.test_pretty.R->sympy.QQ.old_poly_ring(x)
A:sympy.printing.pretty.tests.test_pretty.A1->Object('A1')
A:sympy.printing.pretty.tests.test_pretty.A2->Object('A2')
A:sympy.printing.pretty.tests.test_pretty.A3->Object('A3')
A:sympy.printing.pretty.tests.test_pretty.f1->NamedMorphism(A1, A2, 'f1')
A:sympy.printing.pretty.tests.test_pretty.f2->NamedMorphism(A2, A3, 'f2')
A:sympy.printing.pretty.tests.test_pretty.id_A1->IdentityMorphism(A1)
A:sympy.printing.pretty.tests.test_pretty.K1->Category('K1')
A:sympy.printing.pretty.tests.test_pretty.d->Diagram({f1: 'unique', f2: S.EmptySet}, {f2 * f1: 'unique'})
A:sympy.printing.pretty.tests.test_pretty.grid->DiagramGrid(d)
A:sympy.printing.pretty.tests.test_pretty.M->sympy.QQ.old_poly_ring(x).free_module(2).submodule([x, y], [1, x ** 2])
A:sympy.printing.pretty.tests.test_pretty.I->sympy.QQ.old_poly_ring(x).ideal(x ** 2, y)
A:sympy.printing.pretty.tests.test_pretty.(A, B)->symbols('A B', commutative=False)
A:sympy.printing.pretty.tests.test_pretty.t->Tr(A * B)
A:sympy.printing.pretty.tests.test_pretty.x->Pow(2, 3, evaluate=False)
A:sympy.printing.pretty.tests.test_pretty.y->Pow(10, -2, evaluate=False)
sympy.pretty.tests.test_pretty(expr,order=None)
sympy.pretty.tests.test_pretty.test_Adjoint()
sympy.pretty.tests.test_pretty.test_GroebnerBasis()
sympy.pretty.tests.test_pretty.test_Homomorphism()
sympy.pretty.tests.test_pretty.test_PrettyModules()
sympy.pretty.tests.test_pretty.test_PrettyPoly()
sympy.pretty.tests.test_pretty.test_QuotientRing()
sympy.pretty.tests.test_pretty.test_RandomDomain()
sympy.pretty.tests.test_pretty.test_Tr()
sympy.pretty.tests.test_pretty.test_any_object_in_sequence()
sympy.pretty.tests.test_pretty.test_categories()
sympy.pretty.tests.test_pretty.test_complicated_symbol_unchanged()
sympy.pretty.tests.test_pretty.test_elliptic_functions()
sympy.pretty.tests.test_pretty.test_expint()
sympy.pretty.tests.test_pretty.test_gammas()
sympy.pretty.tests.test_pretty.test_hyper()
sympy.pretty.tests.test_pretty.test_issue_4335()
sympy.pretty.tests.test_pretty.test_issue_5524()
sympy.pretty.tests.test_pretty.test_issue_6285()
sympy.pretty.tests.test_pretty.test_issue_6324()
sympy.pretty.tests.test_pretty.test_issue_6359()
sympy.pretty.tests.test_pretty.test_issue_6739()
sympy.pretty.tests.test_pretty.test_issue_7179()
sympy.pretty.tests.test_pretty.test_issue_7180()
sympy.pretty.tests.test_pretty.test_issue_8292()
sympy.pretty.tests.test_pretty.test_issue_8344()
sympy.pretty.tests.test_pretty.test_meijerg()
sympy.pretty.tests.test_pretty.test_negative_fractions()
sympy.pretty.tests.test_pretty.test_noncommutative()
sympy.pretty.tests.test_pretty.test_pprint()
sympy.pretty.tests.test_pretty.test_pretty_Add()
sympy.pretty.tests.test_pretty.test_pretty_Boolean()
sympy.pretty.tests.test_pretty.test_pretty_Complement()
sympy.pretty.tests.test_pretty.test_pretty_Contains()
sympy.pretty.tests.test_pretty.test_pretty_Domain()
sympy.pretty.tests.test_pretty.test_pretty_KroneckerDelta()
sympy.pretty.tests.test_pretty.test_pretty_RootOf()
sympy.pretty.tests.test_pretty.test_pretty_RootSum()
sympy.pretty.tests.test_pretty.test_pretty_Subs()
sympy.pretty.tests.test_pretty.test_pretty_ascii_str()
sympy.pretty.tests.test_pretty.test_pretty_basic()
sympy.pretty.tests.test_pretty.test_pretty_class()
sympy.pretty.tests.test_pretty.test_pretty_derivatives()
sympy.pretty.tests.test_pretty.test_pretty_functions()
sympy.pretty.tests.test_pretty.test_pretty_geometry()
sympy.pretty.tests.test_pretty.test_pretty_integrals()
sympy.pretty.tests.test_pretty.test_pretty_lambda()
sympy.pretty.tests.test_pretty.test_pretty_limits()
sympy.pretty.tests.test_pretty.test_pretty_matrix()
sympy.pretty.tests.test_pretty.test_pretty_no_wrap_line()
sympy.pretty.tests.test_pretty.test_pretty_order()
sympy.pretty.tests.test_pretty.test_pretty_ordering()
sympy.pretty.tests.test_pretty.test_pretty_piecewise()
sympy.pretty.tests.test_pretty.test_pretty_prec()
sympy.pretty.tests.test_pretty.test_pretty_product()
sympy.pretty.tests.test_pretty.test_pretty_rational()
sympy.pretty.tests.test_pretty.test_pretty_relational()
sympy.pretty.tests.test_pretty.test_pretty_seq()
sympy.pretty.tests.test_pretty.test_pretty_sets()
sympy.pretty.tests.test_pretty.test_pretty_special_functions()
sympy.pretty.tests.test_pretty.test_pretty_sqrt()
sympy.pretty.tests.test_pretty.test_pretty_sum()
sympy.pretty.tests.test_pretty.test_pretty_unicode_str()
sympy.pretty.tests.test_pretty.test_settings()
sympy.pretty.tests.test_pretty.test_units()
sympy.pretty.tests.test_pretty.test_upretty_greek()
sympy.pretty.tests.test_pretty.test_upretty_modifiers()
sympy.pretty.tests.test_pretty.test_upretty_multiindex()
sympy.pretty.tests.test_pretty.test_upretty_sub_super()
sympy.pretty.tests.test_pretty.test_upretty_subs_missingin_24()
sympy.pretty.tests.test_pretty.upretty(expr,order=None)
sympy.printing.pretty.tests.test_pretty.pretty(expr,order=None)
sympy.printing.pretty.tests.test_pretty.test_Adjoint()
sympy.printing.pretty.tests.test_pretty.test_GroebnerBasis()
sympy.printing.pretty.tests.test_pretty.test_Homomorphism()
sympy.printing.pretty.tests.test_pretty.test_PrettyModules()
sympy.printing.pretty.tests.test_pretty.test_PrettyPoly()
sympy.printing.pretty.tests.test_pretty.test_QuotientRing()
sympy.printing.pretty.tests.test_pretty.test_RandomDomain()
sympy.printing.pretty.tests.test_pretty.test_Tr()
sympy.printing.pretty.tests.test_pretty.test_any_object_in_sequence()
sympy.printing.pretty.tests.test_pretty.test_categories()
sympy.printing.pretty.tests.test_pretty.test_complicated_symbol_unchanged()
sympy.printing.pretty.tests.test_pretty.test_elliptic_functions()
sympy.printing.pretty.tests.test_pretty.test_expint()
sympy.printing.pretty.tests.test_pretty.test_gammas()
sympy.printing.pretty.tests.test_pretty.test_hyper()
sympy.printing.pretty.tests.test_pretty.test_issue_4335()
sympy.printing.pretty.tests.test_pretty.test_issue_5524()
sympy.printing.pretty.tests.test_pretty.test_issue_6285()
sympy.printing.pretty.tests.test_pretty.test_issue_6324()
sympy.printing.pretty.tests.test_pretty.test_issue_6359()
sympy.printing.pretty.tests.test_pretty.test_issue_6739()
sympy.printing.pretty.tests.test_pretty.test_issue_7179()
sympy.printing.pretty.tests.test_pretty.test_issue_7180()
sympy.printing.pretty.tests.test_pretty.test_issue_8292()
sympy.printing.pretty.tests.test_pretty.test_issue_8344()
sympy.printing.pretty.tests.test_pretty.test_meijerg()
sympy.printing.pretty.tests.test_pretty.test_negative_fractions()
sympy.printing.pretty.tests.test_pretty.test_noncommutative()
sympy.printing.pretty.tests.test_pretty.test_pprint()
sympy.printing.pretty.tests.test_pretty.test_pretty_Add()
sympy.printing.pretty.tests.test_pretty.test_pretty_Boolean()
sympy.printing.pretty.tests.test_pretty.test_pretty_Complement()
sympy.printing.pretty.tests.test_pretty.test_pretty_Contains()
sympy.printing.pretty.tests.test_pretty.test_pretty_Domain()
sympy.printing.pretty.tests.test_pretty.test_pretty_KroneckerDelta()
sympy.printing.pretty.tests.test_pretty.test_pretty_RootOf()
sympy.printing.pretty.tests.test_pretty.test_pretty_RootSum()
sympy.printing.pretty.tests.test_pretty.test_pretty_Subs()
sympy.printing.pretty.tests.test_pretty.test_pretty_ascii_str()
sympy.printing.pretty.tests.test_pretty.test_pretty_basic()
sympy.printing.pretty.tests.test_pretty.test_pretty_class()
sympy.printing.pretty.tests.test_pretty.test_pretty_derivatives()
sympy.printing.pretty.tests.test_pretty.test_pretty_functions()
sympy.printing.pretty.tests.test_pretty.test_pretty_geometry()
sympy.printing.pretty.tests.test_pretty.test_pretty_integrals()
sympy.printing.pretty.tests.test_pretty.test_pretty_lambda()
sympy.printing.pretty.tests.test_pretty.test_pretty_limits()
sympy.printing.pretty.tests.test_pretty.test_pretty_matrix()
sympy.printing.pretty.tests.test_pretty.test_pretty_no_wrap_line()
sympy.printing.pretty.tests.test_pretty.test_pretty_order()
sympy.printing.pretty.tests.test_pretty.test_pretty_ordering()
sympy.printing.pretty.tests.test_pretty.test_pretty_piecewise()
sympy.printing.pretty.tests.test_pretty.test_pretty_prec()
sympy.printing.pretty.tests.test_pretty.test_pretty_product()
sympy.printing.pretty.tests.test_pretty.test_pretty_rational()
sympy.printing.pretty.tests.test_pretty.test_pretty_relational()
sympy.printing.pretty.tests.test_pretty.test_pretty_seq()
sympy.printing.pretty.tests.test_pretty.test_pretty_sets()
sympy.printing.pretty.tests.test_pretty.test_pretty_special_functions()
sympy.printing.pretty.tests.test_pretty.test_pretty_sqrt()
sympy.printing.pretty.tests.test_pretty.test_pretty_sum()
sympy.printing.pretty.tests.test_pretty.test_pretty_unicode_str()
sympy.printing.pretty.tests.test_pretty.test_settings()
sympy.printing.pretty.tests.test_pretty.test_units()
sympy.printing.pretty.tests.test_pretty.test_upretty_greek()
sympy.printing.pretty.tests.test_pretty.test_upretty_modifiers()
sympy.printing.pretty.tests.test_pretty.test_upretty_multiindex()
sympy.printing.pretty.tests.test_pretty.test_upretty_sub_super()
sympy.printing.pretty.tests.test_pretty.test_upretty_subs_missingin_24()
sympy.printing.pretty.tests.test_pretty.upretty(expr,order=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/order.py----------------------------------------
A:sympy.series.order.expr->self.expr._eval_transpose()
A:sympy.series.order.variables->list(new_vp.keys())
A:sympy.series.order.args->tuple(variables)
A:sympy.series.order.(v, p)->list(map(sympify, a))
A:sympy.series.order.expr_vp->dict(expr.args[1:])
A:sympy.series.order.new_vp->dict(expr_vp)
A:sympy.series.order.vp->dict(zip(variables, point))
A:sympy.series.order.s->dict(((k, Dummy() + point[0]) for k in variables))
A:sympy.series.order.rs->dict(((v - point[0], k - point[0]) for (k, v) in s.items()))
A:sympy.series.order.lst->self.expr._eval_transpose().extract_leading_order(args)
A:sympy.series.order.margs->list(Mul.make_args(expr.as_independent(x, as_Add=False)[1]))
A:sympy.series.order.obj->self.func(expr, *self.args[1:])
A:sympy.series.order.order_symbols->sorted(order_symbols.items(), key=lambda x: default_sort_key(x[0]))
A:sympy.series.order.common_symbols->tuple([s for s in self.variables if s in expr.variables])
A:sympy.series.order.ratio->powsimp(ratio, deep=True, combine='exp')
A:sympy.series.order.l->powsimp(ratio, deep=True, combine='exp').limit(s, point)
A:sympy.series.order.result->self.contains(other)
A:sympy.series.order.newexpr->self.expr.subs(old, new)
A:sympy.series.order.i->self.variables.index(old)
A:sympy.series.order.newvars->list(self.variables)
A:sympy.series.order.newpt->list(self.point)
A:sympy.series.order.var->syms.pop()
A:sympy.series.order.point->Dummy().subs(res[0]).limit(old, self.point[i])
A:sympy.series.order.d->Dummy()
A:sympy.series.order.res->solve(old - new.subs(var, d), d, dict=True)
sympy.Order(cls,expr,*args,**kwargs)
sympy.Order.__contains__(self,other)
sympy.Order._eval_conjugate(self)
sympy.Order._eval_derivative(self,x)
sympy.Order._eval_nseries(self,x,n,logx)
sympy.Order._eval_power(b,e)
sympy.Order._eval_subs(self,old,new)
sympy.Order._eval_transpose(self)
sympy.Order._sage_(self)
sympy.Order.as_expr_variables(self,order_symbols)
sympy.Order.contains(self,expr)
sympy.Order.expr(self)
sympy.Order.free_symbols(self)
sympy.Order.getO(self)
sympy.Order.point(self)
sympy.Order.removeO(self)
sympy.Order.variables(self)
sympy.series.order.Order(cls,expr,*args,**kwargs)
sympy.series.order.Order.__contains__(self,other)
sympy.series.order.Order.__new__(cls,expr,*args,**kwargs)
sympy.series.order.Order._eval_conjugate(self)
sympy.series.order.Order._eval_derivative(self,x)
sympy.series.order.Order._eval_nseries(self,x,n,logx)
sympy.series.order.Order._eval_power(b,e)
sympy.series.order.Order._eval_subs(self,old,new)
sympy.series.order.Order._eval_transpose(self)
sympy.series.order.Order._sage_(self)
sympy.series.order.Order.as_expr_variables(self,order_symbols)
sympy.series.order.Order.contains(self,expr)
sympy.series.order.Order.expr(self)
sympy.series.order.Order.free_symbols(self)
sympy.series.order.Order.getO(self)
sympy.series.order.Order.point(self)
sympy.series.order.Order.removeO(self)
sympy.series.order.Order.variables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/series.py----------------------------------------
A:sympy.series.series.expr->sympify(expr)
sympy.series(expr,x=None,x0=0,n=6,dir='+')
sympy.series.series.series(expr,x=None,x0=0,n=6,dir='+')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/acceleration.py----------------------------------------
sympy.acceleration.richardson(A,k,n,N)
sympy.acceleration.shanks(A,k,n,m=1)
sympy.series.acceleration.richardson(A,k,n,N)
sympy.series.acceleration.shanks(A,k,n,m=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/gruntz.py----------------------------------------
A:sympy.series.gruntz.timeit->timethis('gruntz')
A:sympy.series.gruntz.c->limitinf(f.args[0] / g.args[0], x)
A:sympy.series.gruntz.self[key]->Dummy()
A:sympy.series.gruntz.e->e.subs(x, p).subs(x, p)
A:sympy.series.gruntz.res->self.copy()
A:sympy.series.gruntz.exps->exps.subs(var, res[expr]).subs(var, res[expr])
A:sympy.series.gruntz.res.rewrites[var]->rewr.subs(tr)
A:sympy.series.gruntz.r->limitinf(e0, z)
A:sympy.series.gruntz.r.rewrites->self.rewrites.copy()
A:sympy.series.gruntz.s->sign(c0, x)
A:sympy.series.gruntz.(i, d)->e.subs(x, p).subs(x, p).as_independent(x)
A:sympy.series.gruntz.(s, expr)->mrv(e.args[0], x)
A:sympy.series.gruntz.(a, b)->e.subs(x, p).subs(x, p).as_two_terms()
A:sympy.series.gruntz.(s1, e1)->mrv(a, x)
A:sympy.series.gruntz.(s2, e2)->mrv(e.args[0], x)
A:sympy.series.gruntz.(b, e)->e.subs(x, p).subs(x, p).as_base_exp()
A:sympy.series.gruntz.li->limitinf(e.args[0], x)
A:sympy.series.gruntz.s1->SubsSet()
A:sympy.series.gruntz.su.rewrites[e1]->exp(e2)
A:sympy.series.gruntz.(u, b)->f.subs(wsym, wsym ** exponent).union(g, exps)
A:sympy.series.gruntz.sa->sign(a, x)
A:sympy.series.gruntz.(c0, e0)->calculate_series(f, w, logx=logw).leadterm(x)
A:sympy.series.gruntz.p->Dummy('p', positive=True, finite=True)
A:sympy.series.gruntz.sig->sign(g.args[0], x)
A:sympy.series.gruntz.r.rewrites[var]->sign(c0, x).rewrites[var].subs(x, exp(x))
A:sympy.series.gruntz.t->cancel(t)
A:sympy.series.gruntz.Omega->list(Omega.items())
A:sympy.series.gruntz.(Omega, exps)->mrv(e, x)
A:sympy.series.gruntz.series->calculate_series(f, w, logx=logw)
A:sympy.series.gruntz.Omega_up->moveup2(Omega, x)
A:sympy.series.gruntz.w->Dummy('w', real=True, positive=True, finite=True)
A:sympy.series.gruntz.(f, logw)->rewrite(exps, Omega, x, w)
A:sympy.series.gruntz.n->Node()
A:sympy.series.gruntz.nodes->build_expression_tree(Omega, rewrites)
A:sympy.series.gruntz.f->f.subs(wsym, wsym ** exponent).subs(wsym, wsym ** exponent)
A:sympy.series.gruntz.exponent->reduce(ilcm, denominators, 1)
A:sympy.series.gruntz.e0->e.subs(x, p).subs(x, p).subs(z, z0 + 1 / z)
sympy.gruntz(e,z,z0,dir='+')
sympy.gruntz.SubsSet(self)
sympy.gruntz.SubsSet.__getitem__(self,key)
sympy.gruntz.SubsSet.__repr__(self)
sympy.gruntz.SubsSet.copy(self)
sympy.gruntz.SubsSet.do_subs(self,e)
sympy.gruntz.SubsSet.meets(self,s2)
sympy.gruntz.SubsSet.union(self,s2,exps=None)
sympy.gruntz.build_expression_tree(Omega,rewrites)
sympy.gruntz.calculate_series(e,x,logx=None)
sympy.gruntz.compare(a,b,x)
sympy.gruntz.limitinf(e,x)
sympy.gruntz.moveup(l,x)
sympy.gruntz.moveup2(s,x)
sympy.gruntz.mrv(e,x)
sympy.gruntz.mrv_leadterm(e,x)
sympy.gruntz.mrv_max1(f,g,exps,x)
sympy.gruntz.mrv_max3(f,expsf,g,expsg,union,expsboth,x)
sympy.gruntz.rewrite(e,Omega,x,wsym)
sympy.gruntz.sign(e,x)
sympy.series.gruntz.SubsSet(self)
sympy.series.gruntz.SubsSet.__getitem__(self,key)
sympy.series.gruntz.SubsSet.__init__(self)
sympy.series.gruntz.SubsSet.__repr__(self)
sympy.series.gruntz.SubsSet.copy(self)
sympy.series.gruntz.SubsSet.do_subs(self,e)
sympy.series.gruntz.SubsSet.meets(self,s2)
sympy.series.gruntz.SubsSet.union(self,s2,exps=None)
sympy.series.gruntz.build_expression_tree(Omega,rewrites)
sympy.series.gruntz.calculate_series(e,x,logx=None)
sympy.series.gruntz.compare(a,b,x)
sympy.series.gruntz.gruntz(e,z,z0,dir='+')
sympy.series.gruntz.limitinf(e,x)
sympy.series.gruntz.moveup(l,x)
sympy.series.gruntz.moveup2(s,x)
sympy.series.gruntz.mrv(e,x)
sympy.series.gruntz.mrv_leadterm(e,x)
sympy.series.gruntz.mrv_max1(f,g,exps,x)
sympy.series.gruntz.mrv_max3(f,expsf,g,expsg,union,expsboth,x)
sympy.series.gruntz.rewrite(e,Omega,x,wsym)
sympy.series.gruntz.sign(e,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/limits.py----------------------------------------
A:sympy.series.limits.rv->e.rewrite(factorial, gamma).func(*r)
A:sympy.series.limits.l->limit(a, z, z0, dir)
A:sympy.series.limits.e->e.rewrite(factorial, gamma).rewrite(factorial, gamma)
A:sympy.series.limits.z->z.doit(**hints).doit(**hints)
A:sympy.series.limits.z0->z0.doit(**hints).doit(**hints)
A:sympy.series.limits.dir->Symbol(dir)
A:sympy.series.limits.obj->sympy.core.Expr.__new__(cls)
A:sympy.series.limits.u->sympy.core.C.Dummy(positive=z0 is S.Infinity)
A:sympy.series.limits.inve->e.rewrite(factorial, gamma).rewrite(factorial, gamma).subs(z, 1 / u)
A:sympy.series.limits.r->heuristics(e, z, z0, dir)
sympy.Limit(cls,e,z,z0,dir='+')
sympy.Limit.doit(self,**hints)
sympy.limit(e,z,z0,dir='+')
sympy.limits.heuristics(e,z,z0,dir)
sympy.series.limits.Limit(cls,e,z,z0,dir='+')
sympy.series.limits.Limit.__new__(cls,e,z,z0,dir='+')
sympy.series.limits.Limit.doit(self,**hints)
sympy.series.limits.heuristics(e,z,z0,dir)
sympy.series.limits.limit(e,z,z0,dir='+')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/kauers.py----------------------------------------
A:sympy.series.kauers.expression->expression.expand().expand()
A:sympy.series.kauers.expression2->expression2.expand().expand()
A:sympy.series.kauers.function->function.subs(l[0], l[-1] + 1).subs(l[0], l[-1] + 1)
sympy.kauers.finite_diff(expression,variable,increment=1)
sympy.kauers.finite_diff_kauers(sum)
sympy.series.kauers.finite_diff(expression,variable,increment=1)
sympy.series.kauers.finite_diff_kauers(sum)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/residues.py----------------------------------------
A:sympy.series.residues.expr->expr.subs(x, x + x0).subs(x, x + x0)
A:sympy.series.residues.s->collect(s.removeO(), x)
A:sympy.series.residues.res->S(0)
A:sympy.series.residues.(c, m)->arg.as_coeff_mul(x)
A:sympy.series.residues.m->Mul(*m)
sympy.residue(expr,x,x0)
sympy.series.residues.residue(expr,x,x0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_residues.py----------------------------------------
A:sympy.series.tests.test_residues.f->Function('f')
A:sympy.series.tests.test_residues.n->Symbol('n', integer=True, positive=True)
sympy.series.tests.test_residues._test_f()
sympy.series.tests.test_residues.test_NotImplemented()
sympy.series.tests.test_residues.test_basic1()
sympy.series.tests.test_residues.test_basic2()
sympy.series.tests.test_residues.test_bug()
sympy.series.tests.test_residues.test_expressions()
sympy.series.tests.test_residues.test_expressions_failing()
sympy.series.tests.test_residues.test_functions()
sympy.series.tests.test_residues.test_issue_5654()
sympy.series.tests.test_residues.test_issue_6499()
sympy.tests.test_residues._test_f()
sympy.tests.test_residues.test_NotImplemented()
sympy.tests.test_residues.test_basic1()
sympy.tests.test_residues.test_basic2()
sympy.tests.test_residues.test_bug()
sympy.tests.test_residues.test_expressions()
sympy.tests.test_residues.test_expressions_failing()
sympy.tests.test_residues.test_functions()
sympy.tests.test_residues.test_issue_5654()
sympy.tests.test_residues.test_issue_6499()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_limits.py----------------------------------------
A:sympy.series.tests.test_limits.x->Symbol('x', positive=True, finite=True)
A:sympy.series.tests.test_limits.z->Symbol('z', positive=True)
A:sympy.series.tests.test_limits.n->Symbol('n')
A:sympy.series.tests.test_limits.f->factorial(x)
A:sympy.series.tests.test_limits.l->Limit(f, x, oo)
A:sympy.series.tests.test_limits.tests->list(cartes([cot, tan], [-pi / 2, 0, pi / 2, pi, 3 * pi / 2], ['-', '+']))
A:sympy.series.tests.test_limits.r->Symbol('r', positive=True)
A:sympy.series.tests.test_limits.eq->f(x)
A:sympy.series.tests.test_limits.c->Symbol('c')
A:sympy.series.tests.test_limits.p->Symbol('p', positive=True)
A:sympy.series.tests.test_limits.m->Symbol('m', negative=True)
A:sympy.series.tests.test_limits.expr->expr.subs(c, c + 1).subs(c, c + 1)
A:sympy.series.tests.test_limits.a->Symbol('a')
A:sympy.series.tests.test_limits.dx->Symbol('dx')
sympy.series.tests.test_limits.test_Limit()
sympy.series.tests.test_limits.test_Limit_dir()
sympy.series.tests.test_limits.test_abs()
sympy.series.tests.test_limits.test_atan()
sympy.series.tests.test_limits.test_basic1()
sympy.series.tests.test_limits.test_basic2()
sympy.series.tests.test_limits.test_basic3()
sympy.series.tests.test_limits.test_basic4()
sympy.series.tests.test_limits.test_basic5()
sympy.series.tests.test_limits.test_calculate_series()
sympy.series.tests.test_limits.test_ceiling()
sympy.series.tests.test_limits.test_ceiling_requires_robust_assumptions()
sympy.series.tests.test_limits.test_doit()
sympy.series.tests.test_limits.test_doit2()
sympy.series.tests.test_limits.test_exponential()
sympy.series.tests.test_limits.test_exponential2()
sympy.series.tests.test_limits.test_extended_real_line()
sympy.series.tests.test_limits.test_factorial()
sympy.series.tests.test_limits.test_floor()
sympy.series.tests.test_limits.test_floor_requires_robust_assumptions()
sympy.series.tests.test_limits.test_heuristic()
sympy.series.tests.test_limits.test_issue_3792()
sympy.series.tests.test_limits.test_issue_3871()
sympy.series.tests.test_limits.test_issue_3885()
sympy.series.tests.test_limits.test_issue_3934()
sympy.series.tests.test_limits.test_issue_4090()
sympy.series.tests.test_limits.test_issue_4099()
sympy.series.tests.test_limits.test_issue_4503()
sympy.series.tests.test_limits.test_issue_4546()
sympy.series.tests.test_limits.test_issue_4547()
sympy.series.tests.test_limits.test_issue_5164()
sympy.series.tests.test_limits.test_issue_5172()
sympy.series.tests.test_limits.test_issue_5183()
sympy.series.tests.test_limits.test_issue_5184()
sympy.series.tests.test_limits.test_issue_5229()
sympy.series.tests.test_limits.test_issue_5436()
sympy.series.tests.test_limits.test_issue_5740()
sympy.series.tests.test_limits.test_issue_5955()
sympy.series.tests.test_limits.test_issue_6364()
sympy.series.tests.test_limits.test_issue_6366()
sympy.series.tests.test_limits.test_issue_6560()
sympy.series.tests.test_limits.test_issue_7088()
sympy.series.tests.test_limits.test_newissue()
sympy.series.tests.test_limits.test_order_oo()
sympy.series.tests.test_limits.test_polynomial()
sympy.series.tests.test_limits.test_rational()
sympy.tests.test_limits.test_Limit()
sympy.tests.test_limits.test_Limit_dir()
sympy.tests.test_limits.test_abs()
sympy.tests.test_limits.test_atan()
sympy.tests.test_limits.test_basic1()
sympy.tests.test_limits.test_basic2()
sympy.tests.test_limits.test_basic3()
sympy.tests.test_limits.test_basic4()
sympy.tests.test_limits.test_basic5()
sympy.tests.test_limits.test_calculate_series()
sympy.tests.test_limits.test_ceiling()
sympy.tests.test_limits.test_ceiling_requires_robust_assumptions()
sympy.tests.test_limits.test_doit()
sympy.tests.test_limits.test_doit2()
sympy.tests.test_limits.test_exponential()
sympy.tests.test_limits.test_exponential2()
sympy.tests.test_limits.test_extended_real_line()
sympy.tests.test_limits.test_factorial()
sympy.tests.test_limits.test_floor()
sympy.tests.test_limits.test_floor_requires_robust_assumptions()
sympy.tests.test_limits.test_heuristic()
sympy.tests.test_limits.test_issue_3792()
sympy.tests.test_limits.test_issue_3871()
sympy.tests.test_limits.test_issue_3885()
sympy.tests.test_limits.test_issue_3934()
sympy.tests.test_limits.test_issue_4090()
sympy.tests.test_limits.test_issue_4099()
sympy.tests.test_limits.test_issue_4503()
sympy.tests.test_limits.test_issue_4546()
sympy.tests.test_limits.test_issue_4547()
sympy.tests.test_limits.test_issue_5164()
sympy.tests.test_limits.test_issue_5172()
sympy.tests.test_limits.test_issue_5183()
sympy.tests.test_limits.test_issue_5184()
sympy.tests.test_limits.test_issue_5229()
sympy.tests.test_limits.test_issue_5436()
sympy.tests.test_limits.test_issue_5740()
sympy.tests.test_limits.test_issue_5955()
sympy.tests.test_limits.test_issue_6364()
sympy.tests.test_limits.test_issue_6366()
sympy.tests.test_limits.test_issue_6560()
sympy.tests.test_limits.test_issue_7088()
sympy.tests.test_limits.test_newissue()
sympy.tests.test_limits.test_order_oo()
sympy.tests.test_limits.test_polynomial()
sympy.tests.test_limits.test_rational()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_series.py----------------------------------------
A:sympy.series.tests.test_series.e1->exp(cos(x)).series(x, 0)
A:sympy.series.tests.test_series.e2->series(exp(cos(x)), x, 0)
A:sympy.series.tests.test_series.e->cos(x).series(x, 1, n=None, dir='-')
A:sympy.series.tests.test_series.logx->Symbol('logx')
A:sympy.series.tests.test_series.p->Symbol('p', positive=True)
A:sympy.series.tests.test_series.f->Function('f')
A:sympy.series.tests.test_series.A->Sum(Integer(-1) ** (k + 1) / k, (k, 1, n))
A:sympy.series.tests.test_series.(a, b)->symbols('a, b', positive=True)
sympy.series.tests.test_series.test_acceleration()
sympy.series.tests.test_series.test_cos()
sympy.series.tests.test_series.test_exp()
sympy.series.tests.test_series.test_exp2()
sympy.series.tests.test_series.test_exp_product_positive_factors()
sympy.series.tests.test_series.test_issue_3978()
sympy.series.tests.test_series.test_issue_4583()
sympy.series.tests.test_series.test_issue_5223()
sympy.series.tests.test_series.test_issue_5852()
sympy.series.tests.test_series.test_issue_6318()
sympy.series.tests.test_series.test_issue_7203()
sympy.series.tests.test_series.test_sin()
sympy.series.tests.test_series.test_sin_power()
sympy.series.tests.test_series.test_x_is_base_detection()
sympy.tests.test_test_acceleration()
sympy.tests.test_test_cos()
sympy.tests.test_test_exp()
sympy.tests.test_test_exp2()
sympy.tests.test_test_exp_product_positive_factors()
sympy.tests.test_test_issue_3978()
sympy.tests.test_test_issue_4583()
sympy.tests.test_test_issue_5223()
sympy.tests.test_test_issue_5852()
sympy.tests.test_test_issue_6318()
sympy.tests.test_test_issue_7203()
sympy.tests.test_test_sin()
sympy.tests.test_test_sin_power()
sympy.tests.test_test_x_is_base_detection()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_order.py----------------------------------------
A:sympy.series.tests.test_order.e->O(w)
A:sympy.series.tests.test_order.o->Rational(0)
A:sympy.series.tests.test_order.y->Symbol('y', imaginary=True)
A:sympy.series.tests.test_order.z->Symbol('z', complex=True)
A:sympy.series.tests.test_order.(a, b)->symbols('a b')
A:sympy.series.tests.test_order.f->Function('f')
A:sympy.series.tests.test_order.x->Symbol('x', real=True)
A:sympy.series.tests.test_order.A->Symbol('A', commutative=False)
sympy.series.tests.test_order.test_O1()
sympy.series.tests.test_order.test_add_1()
sympy.series.tests.test_order.test_as_expr_variables()
sympy.series.tests.test_order.test_caching_bug()
sympy.series.tests.test_order.test_contains()
sympy.series.tests.test_order.test_contains_0()
sympy.series.tests.test_order.test_contains_1()
sympy.series.tests.test_order.test_contains_2()
sympy.series.tests.test_order.test_contains_3()
sympy.series.tests.test_order.test_contains_4()
sympy.series.tests.test_order.test_diff()
sympy.series.tests.test_order.test_eval()
sympy.series.tests.test_order.test_free_symbols()
sympy.series.tests.test_order.test_getO()
sympy.series.tests.test_order.test_getn()
sympy.series.tests.test_order.test_issue_3468()
sympy.series.tests.test_order.test_issue_4279()
sympy.series.tests.test_order.test_issue_4855()
sympy.series.tests.test_order.test_issue_6753()
sympy.series.tests.test_order.test_leading_order()
sympy.series.tests.test_order.test_leading_order2()
sympy.series.tests.test_order.test_leading_term()
sympy.series.tests.test_order.test_ln_args()
sympy.series.tests.test_order.test_mixing_order_at_zero_and_infinity()
sympy.series.tests.test_order.test_multivar_0()
sympy.series.tests.test_order.test_multivar_0a()
sympy.series.tests.test_order.test_multivar_1()
sympy.series.tests.test_order.test_multivar_2()
sympy.series.tests.test_order.test_multivar_3()
sympy.series.tests.test_order.test_multivar_mul_1()
sympy.series.tests.test_order.test_nan()
sympy.series.tests.test_order.test_order_at_infinity()
sympy.series.tests.test_order.test_order_at_some_point()
sympy.series.tests.test_order.test_order_conjugate_transpose()
sympy.series.tests.test_order.test_order_leadterm()
sympy.series.tests.test_order.test_order_noncommutative()
sympy.series.tests.test_order.test_order_subs_limits()
sympy.series.tests.test_order.test_order_symbols()
sympy.series.tests.test_order.test_simple_1()
sympy.series.tests.test_order.test_simple_2()
sympy.series.tests.test_order.test_simple_3()
sympy.series.tests.test_order.test_simple_4()
sympy.series.tests.test_order.test_simple_5()
sympy.series.tests.test_order.test_simple_6()
sympy.series.tests.test_order.test_simple_7()
sympy.series.tests.test_order.test_simple_8()
sympy.tests.test_order.test_O1()
sympy.tests.test_order.test_add_1()
sympy.tests.test_order.test_as_expr_variables()
sympy.tests.test_order.test_caching_bug()
sympy.tests.test_order.test_contains()
sympy.tests.test_order.test_contains_0()
sympy.tests.test_order.test_contains_1()
sympy.tests.test_order.test_contains_2()
sympy.tests.test_order.test_contains_3()
sympy.tests.test_order.test_contains_4()
sympy.tests.test_order.test_diff()
sympy.tests.test_order.test_eval()
sympy.tests.test_order.test_free_symbols()
sympy.tests.test_order.test_getO()
sympy.tests.test_order.test_getn()
sympy.tests.test_order.test_issue_3468()
sympy.tests.test_order.test_issue_4279()
sympy.tests.test_order.test_issue_4855()
sympy.tests.test_order.test_issue_6753()
sympy.tests.test_order.test_leading_order()
sympy.tests.test_order.test_leading_order2()
sympy.tests.test_order.test_leading_term()
sympy.tests.test_order.test_ln_args()
sympy.tests.test_order.test_mixing_order_at_zero_and_infinity()
sympy.tests.test_order.test_multivar_0()
sympy.tests.test_order.test_multivar_0a()
sympy.tests.test_order.test_multivar_1()
sympy.tests.test_order.test_multivar_2()
sympy.tests.test_order.test_multivar_3()
sympy.tests.test_order.test_multivar_mul_1()
sympy.tests.test_order.test_nan()
sympy.tests.test_order.test_order_at_infinity()
sympy.tests.test_order.test_order_at_some_point()
sympy.tests.test_order.test_order_conjugate_transpose()
sympy.tests.test_order.test_order_leadterm()
sympy.tests.test_order.test_order_noncommutative()
sympy.tests.test_order.test_order_subs_limits()
sympy.tests.test_order.test_order_symbols()
sympy.tests.test_order.test_simple_1()
sympy.tests.test_order.test_simple_2()
sympy.tests.test_order.test_simple_3()
sympy.tests.test_order.test_simple_4()
sympy.tests.test_order.test_simple_5()
sympy.tests.test_order.test_simple_6()
sympy.tests.test_order.test_simple_7()
sympy.tests.test_order.test_simple_8()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_demidovich.py----------------------------------------
A:sympy.series.tests.test_demidovich.x->Symbol('x')
A:sympy.series.tests.test_demidovich.a->Symbol('a')
A:sympy.series.tests.test_demidovich.h->Symbol('h')
A:sympy.series.tests.test_demidovich.m->Symbol('m')
A:sympy.series.tests.test_demidovich.n->Symbol('n')
sympy.series.tests.test_demidovich.root3(x)
sympy.series.tests.test_demidovich.root4(x)
sympy.series.tests.test_demidovich.test_Limits_simple_0()
sympy.series.tests.test_demidovich.test_Limits_simple_1()
sympy.series.tests.test_demidovich.test_Limits_simple_2()
sympy.series.tests.test_demidovich.test_Limits_simple_3a()
sympy.series.tests.test_demidovich.test_Limits_simple_3b()
sympy.series.tests.test_demidovich.test_Limits_simple_4a()
sympy.series.tests.test_demidovich.test_Limits_simple_4b()
sympy.series.tests.test_demidovich.test_Limits_simple_4c()
sympy.series.tests.test_demidovich.test_bounded()
sympy.series.tests.test_demidovich.test_f1a()
sympy.series.tests.test_demidovich.test_f1a2()
sympy.series.tests.test_demidovich.test_f1b()
sympy.series.tests.test_demidovich.test_f2()
sympy.series.tests.test_demidovich.test_f2a()
sympy.series.tests.test_demidovich.test_f3()
sympy.series.tests.test_demidovich.test_leadterm()
sympy.series.tests.test_demidovich.test_limits_simple_4aa()
sympy.tests.test_demidovich.root3(x)
sympy.tests.test_demidovich.root4(x)
sympy.tests.test_demidovich.test_Limits_simple_0()
sympy.tests.test_demidovich.test_Limits_simple_1()
sympy.tests.test_demidovich.test_Limits_simple_2()
sympy.tests.test_demidovich.test_Limits_simple_3a()
sympy.tests.test_demidovich.test_Limits_simple_3b()
sympy.tests.test_demidovich.test_Limits_simple_4a()
sympy.tests.test_demidovich.test_Limits_simple_4b()
sympy.tests.test_demidovich.test_Limits_simple_4c()
sympy.tests.test_demidovich.test_bounded()
sympy.tests.test_demidovich.test_f1a()
sympy.tests.test_demidovich.test_f1a2()
sympy.tests.test_demidovich.test_f1b()
sympy.tests.test_demidovich.test_f2()
sympy.tests.test_demidovich.test_f2a()
sympy.tests.test_demidovich.test_f3()
sympy.tests.test_demidovich.test_leadterm()
sympy.tests.test_demidovich.test_limits_simple_4aa()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_kauers.py----------------------------------------
sympy.series.tests.test_kauers.test_finite_diff()
sympy.series.tests.test_kauers.test_finite_diff_kauers()
sympy.tests.test_kauers.test_finite_diff()
sympy.tests.test_kauers.test_finite_diff_kauers()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_lseries.py----------------------------------------
A:sympy.series.tests.test_lseries.e->exp(cos(x)).lseries(x)
A:sympy.series.tests.test_lseries.s->tanh(x).lseries(x, 1)
sympy.series.tests.test_lseries.test_cos()
sympy.series.tests.test_lseries.test_exp()
sympy.series.tests.test_lseries.test_exp2()
sympy.series.tests.test_lseries.test_issue_5183()
sympy.series.tests.test_lseries.test_issue_6999()
sympy.series.tests.test_lseries.test_simple()
sympy.series.tests.test_lseries.test_sin()
sympy.tests.test_ltest_cos()
sympy.tests.test_ltest_exp()
sympy.tests.test_ltest_exp2()
sympy.tests.test_ltest_issue_5183()
sympy.tests.test_ltest_issue_6999()
sympy.tests.test_ltest_simple()
sympy.tests.test_ltest_sin()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_nseries.py----------------------------------------
A:sympy.series.tests.test_nseries.l->Symbol('l')
A:sympy.series.tests.test_nseries.e->log(sin(2 * w) / w)
A:sympy.series.tests.test_nseries.w->Symbol('w')
A:sympy.series.tests.test_nseries.logw->Symbol('logw')
A:sympy.series.tests.test_nseries.p->Rational(3, 2)
A:sympy.series.tests.test_nseries.x->Symbol('x', negative=True)
A:sympy.series.tests.test_nseries.f->sqrt(1 - sqrt(y))
A:sympy.series.tests.test_nseries.(w, i)->symbols('w,i')
A:sympy.series.tests.test_nseries.a->Symbol('a')
A:sympy.series.tests.test_nseries.(a, b)->symbols('a,b')
A:sympy.series.tests.test_nseries.sx->sqrt(x + z).series(z, 0, 1)
A:sympy.series.tests.test_nseries.sxy->sqrt(x + y + z).series(z, 0, 1)
sympy.series.tests.test_nseries.test_abs()
sympy.series.tests.test_nseries.test_bug2()
sympy.series.tests.test_nseries.test_bug3()
sympy.series.tests.test_nseries.test_bug4()
sympy.series.tests.test_nseries.test_bug5()
sympy.series.tests.test_nseries.test_ceiling()
sympy.series.tests.test_nseries.test_dir()
sympy.series.tests.test_nseries.test_exp()
sympy.series.tests.test_nseries.test_exp2()
sympy.series.tests.test_nseries.test_exp_1()
sympy.series.tests.test_nseries.test_exp_sqrt_1()
sympy.series.tests.test_nseries.test_expbug4()
sympy.series.tests.test_nseries.test_expbug5()
sympy.series.tests.test_nseries.test_expsinbug()
sympy.series.tests.test_nseries.test_floor()
sympy.series.tests.test_nseries.test_generalexponent()
sympy.series.tests.test_nseries.test_genexp_x()
sympy.series.tests.test_nseries.test_genexp_x2()
sympy.series.tests.test_nseries.test_geometric_1()
sympy.series.tests.test_nseries.test_hyperbolic()
sympy.series.tests.test_nseries.test_issue_3204()
sympy.series.tests.test_nseries.test_issue_3224()
sympy.series.tests.test_nseries.test_issue_3258()
sympy.series.tests.test_nseries.test_issue_3463()
sympy.series.tests.test_nseries.test_issue_3501()
sympy.series.tests.test_nseries.test_issue_3502()
sympy.series.tests.test_nseries.test_issue_3503()
sympy.series.tests.test_nseries.test_issue_3504()
sympy.series.tests.test_nseries.test_issue_3505()
sympy.series.tests.test_nseries.test_issue_3506()
sympy.series.tests.test_nseries.test_issue_3507()
sympy.series.tests.test_nseries.test_issue_3508()
sympy.series.tests.test_nseries.test_issue_3515()
sympy.series.tests.test_nseries.test_issue_3639()
sympy.series.tests.test_nseries.test_issue_4115()
sympy.series.tests.test_nseries.test_issue_4329()
sympy.series.tests.test_nseries.test_issue_4441()
sympy.series.tests.test_nseries.test_issue_5183()
sympy.series.tests.test_nseries.test_issue_5654()
sympy.series.tests.test_nseries.test_issue_5925()
sympy.series.tests.test_nseries.test_log2()
sympy.series.tests.test_nseries.test_log3()
sympy.series.tests.test_nseries.test_log_power1()
sympy.series.tests.test_nseries.test_log_series()
sympy.series.tests.test_nseries.test_log_singular1()
sympy.series.tests.test_nseries.test_logbug4()
sympy.series.tests.test_nseries.test_mul_0()
sympy.series.tests.test_nseries.test_mul_1()
sympy.series.tests.test_nseries.test_pole()
sympy.series.tests.test_nseries.test_pow_0()
sympy.series.tests.test_nseries.test_pow_1()
sympy.series.tests.test_nseries.test_power_x_x1()
sympy.series.tests.test_nseries.test_power_x_x2()
sympy.series.tests.test_nseries.test_series1()
sympy.series.tests.test_nseries.test_series1_failing()
sympy.series.tests.test_nseries.test_series2()
sympy.series.tests.test_nseries.test_series2x()
sympy.series.tests.test_nseries.test_series3()
sympy.series.tests.test_nseries.test_seriesbug1()
sympy.series.tests.test_nseries.test_seriesbug2()
sympy.series.tests.test_nseries.test_seriesbug2b()
sympy.series.tests.test_nseries.test_seriesbug2c()
sympy.series.tests.test_nseries.test_seriesbug2d()
sympy.series.tests.test_nseries.test_simple_1()
sympy.series.tests.test_nseries.test_sin()
sympy.series.tests.test_nseries.test_sinsinbug()
sympy.series.tests.test_nseries.test_sqrt_1()
sympy.tests.test_ntest_abs()
sympy.tests.test_ntest_bug2()
sympy.tests.test_ntest_bug3()
sympy.tests.test_ntest_bug4()
sympy.tests.test_ntest_bug5()
sympy.tests.test_ntest_ceiling()
sympy.tests.test_ntest_dir()
sympy.tests.test_ntest_exp()
sympy.tests.test_ntest_exp2()
sympy.tests.test_ntest_exp_1()
sympy.tests.test_ntest_exp_sqrt_1()
sympy.tests.test_ntest_expbug4()
sympy.tests.test_ntest_expbug5()
sympy.tests.test_ntest_expsinbug()
sympy.tests.test_ntest_floor()
sympy.tests.test_ntest_generalexponent()
sympy.tests.test_ntest_genexp_x()
sympy.tests.test_ntest_genexp_x2()
sympy.tests.test_ntest_geometric_1()
sympy.tests.test_ntest_hyperbolic()
sympy.tests.test_ntest_issue_3204()
sympy.tests.test_ntest_issue_3224()
sympy.tests.test_ntest_issue_3258()
sympy.tests.test_ntest_issue_3463()
sympy.tests.test_ntest_issue_3501()
sympy.tests.test_ntest_issue_3502()
sympy.tests.test_ntest_issue_3503()
sympy.tests.test_ntest_issue_3504()
sympy.tests.test_ntest_issue_3505()
sympy.tests.test_ntest_issue_3506()
sympy.tests.test_ntest_issue_3507()
sympy.tests.test_ntest_issue_3508()
sympy.tests.test_ntest_issue_3515()
sympy.tests.test_ntest_issue_3639()
sympy.tests.test_ntest_issue_4115()
sympy.tests.test_ntest_issue_4329()
sympy.tests.test_ntest_issue_4441()
sympy.tests.test_ntest_issue_5183()
sympy.tests.test_ntest_issue_5654()
sympy.tests.test_ntest_issue_5925()
sympy.tests.test_ntest_log2()
sympy.tests.test_ntest_log3()
sympy.tests.test_ntest_log_power1()
sympy.tests.test_ntest_log_series()
sympy.tests.test_ntest_log_singular1()
sympy.tests.test_ntest_logbug4()
sympy.tests.test_ntest_mul_0()
sympy.tests.test_ntest_mul_1()
sympy.tests.test_ntest_pole()
sympy.tests.test_ntest_pow_0()
sympy.tests.test_ntest_pow_1()
sympy.tests.test_ntest_power_x_x1()
sympy.tests.test_ntest_power_x_x2()
sympy.tests.test_ntest_series1()
sympy.tests.test_ntest_series1_failing()
sympy.tests.test_ntest_series2()
sympy.tests.test_ntest_series2x()
sympy.tests.test_ntest_series3()
sympy.tests.test_ntest_seriesbug1()
sympy.tests.test_ntest_seriesbug2()
sympy.tests.test_ntest_seriesbug2b()
sympy.tests.test_ntest_seriesbug2c()
sympy.tests.test_ntest_seriesbug2d()
sympy.tests.test_ntest_simple_1()
sympy.tests.test_ntest_sin()
sympy.tests.test_ntest_sinsinbug()
sympy.tests.test_ntest_sqrt_1()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/tests/test_gruntz.py----------------------------------------
A:sympy.series.tests.test_gruntz.x->Symbol('x', real=True)
A:sympy.series.tests.test_gruntz.m->Symbol('m', negative=True)
A:sympy.series.tests.test_gruntz.y->Symbol('y')
A:sympy.series.tests.test_gruntz.e->exp(x + 1 / x)
A:sympy.series.tests.test_gruntz.a->Symbol('a')
A:sympy.series.tests.test_gruntz.h->exp(-x / (1 + exp(-x)))
A:sympy.series.tests.test_gruntz.expected->set([1 / h, exp(x), exp(x - h), exp(x / (1 + h))])
A:sympy.series.tests.test_gruntz.n->Symbol('n')
A:sympy.series.tests.test_gruntz.r->Symbol('r', positive=True)
A:sympy.series.tests.test_gruntz.c->Symbol('c')
A:sympy.series.tests.test_gruntz.p->Symbol('p', positive=True)
A:sympy.series.tests.test_gruntz.expr->expr.subs(c, c + 1).subs(c, c + 1)
sympy.series.tests.test_gruntz._sskip()
sympy.series.tests.test_gruntz.mmrv(a,b)
sympy.series.tests.test_gruntz.mrewrite(a,b,c)
sympy.series.tests.test_gruntz.test_I()
sympy.series.tests.test_gruntz.test_MrvTestCase_page47_ex3_21()
sympy.series.tests.test_gruntz.test_aseries_trig()
sympy.series.tests.test_gruntz.test_compare1()
sympy.series.tests.test_gruntz.test_compare2()
sympy.series.tests.test_gruntz.test_compare3()
sympy.series.tests.test_gruntz.test_exp_log_series()
sympy.series.tests.test_gruntz.test_grunts_eval_special_slow_sometimes_fail()
sympy.series.tests.test_gruntz.test_gruntz_eval_special()
sympy.series.tests.test_gruntz.test_gruntz_eval_special_fail()
sympy.series.tests.test_gruntz.test_gruntz_eval_special_slow()
sympy.series.tests.test_gruntz.test_gruntz_evaluation()
sympy.series.tests.test_gruntz.test_gruntz_evaluation_slow()
sympy.series.tests.test_gruntz.test_gruntz_hyperbolic()
sympy.series.tests.test_gruntz.test_intractable()
sympy.series.tests.test_gruntz.test_issue_3644()
sympy.series.tests.test_gruntz.test_issue_4109()
sympy.series.tests.test_gruntz.test_issue_4190()
sympy.series.tests.test_gruntz.test_issue_4814()
sympy.series.tests.test_gruntz.test_issue_5172()
sympy.series.tests.test_gruntz.test_issue_6682()
sympy.series.tests.test_gruntz.test_issue_6843()
sympy.series.tests.test_gruntz.test_issue_7096()
sympy.series.tests.test_gruntz.test_limit1()
sympy.series.tests.test_gruntz.test_limit2()
sympy.series.tests.test_gruntz.test_limit3()
sympy.series.tests.test_gruntz.test_limit4()
sympy.series.tests.test_gruntz.test_mrv1()
sympy.series.tests.test_gruntz.test_mrv2a()
sympy.series.tests.test_gruntz.test_mrv2b()
sympy.series.tests.test_gruntz.test_mrv2c()
sympy.series.tests.test_gruntz.test_mrv3()
sympy.series.tests.test_gruntz.test_mrv4()
sympy.series.tests.test_gruntz.test_mrv_leadterm1()
sympy.series.tests.test_gruntz.test_mrv_leadterm2()
sympy.series.tests.test_gruntz.test_mrv_leadterm3()
sympy.series.tests.test_gruntz.test_rewrite1()
sympy.series.tests.test_gruntz.test_rewrite2()
sympy.series.tests.test_gruntz.test_rewrite3()
sympy.series.tests.test_gruntz.test_sign1()
sympy.series.tests.test_gruntz.test_sign2()
sympy.tests.test_gruntz._sskip()
sympy.tests.test_gruntz.mmrv(a,b)
sympy.tests.test_gruntz.mrewrite(a,b,c)
sympy.tests.test_gruntz.test_I()
sympy.tests.test_gruntz.test_MrvTestCase_page47_ex3_21()
sympy.tests.test_gruntz.test_aseries_trig()
sympy.tests.test_gruntz.test_compare1()
sympy.tests.test_gruntz.test_compare2()
sympy.tests.test_gruntz.test_compare3()
sympy.tests.test_gruntz.test_exp_log_series()
sympy.tests.test_gruntz.test_grunts_eval_special_slow_sometimes_fail()
sympy.tests.test_gruntz.test_gruntz_eval_special()
sympy.tests.test_gruntz.test_gruntz_eval_special_fail()
sympy.tests.test_gruntz.test_gruntz_eval_special_slow()
sympy.tests.test_gruntz.test_gruntz_evaluation()
sympy.tests.test_gruntz.test_gruntz_evaluation_slow()
sympy.tests.test_gruntz.test_gruntz_hyperbolic()
sympy.tests.test_gruntz.test_intractable()
sympy.tests.test_gruntz.test_issue_3644()
sympy.tests.test_gruntz.test_issue_4109()
sympy.tests.test_gruntz.test_issue_4190()
sympy.tests.test_gruntz.test_issue_4814()
sympy.tests.test_gruntz.test_issue_5172()
sympy.tests.test_gruntz.test_issue_6682()
sympy.tests.test_gruntz.test_issue_6843()
sympy.tests.test_gruntz.test_issue_7096()
sympy.tests.test_gruntz.test_limit1()
sympy.tests.test_gruntz.test_limit2()
sympy.tests.test_gruntz.test_limit3()
sympy.tests.test_gruntz.test_limit4()
sympy.tests.test_gruntz.test_mrv1()
sympy.tests.test_gruntz.test_mrv2a()
sympy.tests.test_gruntz.test_mrv2b()
sympy.tests.test_gruntz.test_mrv2c()
sympy.tests.test_gruntz.test_mrv3()
sympy.tests.test_gruntz.test_mrv4()
sympy.tests.test_gruntz.test_mrv_leadterm1()
sympy.tests.test_gruntz.test_mrv_leadterm2()
sympy.tests.test_gruntz.test_mrv_leadterm3()
sympy.tests.test_gruntz.test_rewrite1()
sympy.tests.test_gruntz.test_rewrite2()
sympy.tests.test_gruntz.test_rewrite3()
sympy.tests.test_gruntz.test_sign1()
sympy.tests.test_gruntz.test_sign2()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/series/benchmarks/bench_limit.py----------------------------------------
A:sympy.series.benchmarks.bench_limit.x->Symbol('x')
sympy.benchmarks.bench_limit.timeit_limit_1x()
sympy.series.benchmarks.bench_limit.timeit_limit_1x()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/manualintegrate.py----------------------------------------
A:sympy.integrals.manualintegrate.cls->namedtuple(name, props + ' context symbol')
A:sympy.integrals.manualintegrate.ConstantRule->Rule('ConstantRule', 'constant')
A:sympy.integrals.manualintegrate.ConstantTimesRule->Rule('ConstantTimesRule', 'constant other substep')
A:sympy.integrals.manualintegrate.PowerRule->Rule('PowerRule', 'base exp')
A:sympy.integrals.manualintegrate.AddRule->Rule('AddRule', 'substeps')
A:sympy.integrals.manualintegrate.URule->Rule('URule', 'u_var u_func constant substep')
A:sympy.integrals.manualintegrate.PartsRule->Rule('PartsRule', 'u dv v_step second_step')
A:sympy.integrals.manualintegrate.CyclicPartsRule->Rule('CyclicPartsRule', 'parts_rules coefficient')
A:sympy.integrals.manualintegrate.TrigRule->Rule('TrigRule', 'func arg')
A:sympy.integrals.manualintegrate.ExpRule->Rule('ExpRule', 'base exp')
A:sympy.integrals.manualintegrate.ReciprocalRule->Rule('ReciprocalRule', 'func')
A:sympy.integrals.manualintegrate.ArctanRule->Rule('ArctanRule')
A:sympy.integrals.manualintegrate.ArcsinRule->Rule('ArcsinRule')
A:sympy.integrals.manualintegrate.InverseHyperbolicRule->Rule('InverseHyperbolicRule', 'func')
A:sympy.integrals.manualintegrate.AlternativeRule->Rule('AlternativeRule', 'alternatives')
A:sympy.integrals.manualintegrate.DontKnowRule->Rule('DontKnowRule')
A:sympy.integrals.manualintegrate.DerivativeRule->Rule('DerivativeRule')
A:sympy.integrals.manualintegrate.RewriteRule->Rule('RewriteRule', 'rewritten substep')
A:sympy.integrals.manualintegrate.PiecewiseRule->Rule('PiecewiseRule', 'subfunctions')
A:sympy.integrals.manualintegrate.HeavisideRule->Rule('HeavisideRule', 'func')
A:sympy.integrals.manualintegrate.TrigSubstitutionRule->Rule('TrigSubstitutionRule', 'theta func rewritten substep restriction')
A:sympy.integrals.manualintegrate.IntegralInfo->namedtuple('IntegralInfo', 'integrand symbol')
A:sympy.integrals.manualintegrate.substituted->substituted.subs(u_func, u_var).subs(u_func, u_var)
A:sympy.integrals.manualintegrate.u_diff->manual_diff(u, symbol)
A:sympy.integrals.manualintegrate.new_integrand->test_subterm(u, u_diff)
A:sympy.integrals.manualintegrate.rewritten->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).subs(1 / sympy.cos(symbol), sympy.sec(symbol))
A:sympy.integrals.manualintegrate.substep->integral_steps(integrand.subs(expr, 0), symbol)
A:sympy.integrals.manualintegrate.result->_manualintegrate(substep)
A:sympy.integrals.manualintegrate.(base, exp)->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).as_base_exp()
A:sympy.integrals.manualintegrate.rule->ConstantTimesRule(q, csccot, rule, integrand, symbol)
A:sympy.integrals.manualintegrate.a->sympy.Wild('a', exclude=[0, symbol])
A:sympy.integrals.manualintegrate.b->sympy.Wild('b', exclude=[0, symbol])
A:sympy.integrals.manualintegrate.match->expr.match(a + b * symbol ** 2)
A:sympy.integrals.manualintegrate.u_var->sympy.Dummy('u')
A:sympy.integrals.manualintegrate.u_constant->sympy.sqrt(a / b)
A:sympy.integrals.manualintegrate.(coeff, f)->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).as_independent(symbol)
A:sympy.integrals.manualintegrate.integrand->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)})
A:sympy.integrals.manualintegrate.u->u.subs(dummy, 1).subs(dummy, 1)
A:sympy.integrals.manualintegrate.dummy->sympy.Dummy('temporary')
A:sympy.integrals.manualintegrate.dv->dv.subs(dummy, 1).subs(dummy, 1)
A:sympy.integrals.manualintegrate.r->rule(integrand)
A:sympy.integrals.manualintegrate.du->u.subs(dummy, 1).subs(dummy, 1).diff(symbol)
A:sympy.integrals.manualintegrate.v_step->integral_steps(dv, symbol)
A:sympy.integrals.manualintegrate.v->_manualintegrate(v_step)
A:sympy.integrals.manualintegrate.(constant, integrand)->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).as_coeff_Mul()
A:sympy.integrals.manualintegrate.coefficient->(v * du / integrand).cancel()
A:sympy.integrals.manualintegrate.m->sympy.Wild('m', exclude=[symbol], properties=[lambda n: isinstance(n, sympy.Integer)])
A:sympy.integrals.manualintegrate.n->sympy.Wild('n', exclude=[symbol], properties=[lambda n: isinstance(n, sympy.Integer)])
A:sympy.integrals.manualintegrate.(a, b, m, n)->make_wilds(symbol)
A:sympy.integrals.manualintegrate.sincos_botheven_condition->uncurry(lambda a, b, m, n, i, s: m.is_even and n.is_even and m.is_nonnegative and n.is_nonnegative)
A:sympy.integrals.manualintegrate.sincos_botheven->trig_rewriter(lambda a, b, m, n, i, symbol: ((1 - sympy.cos(2 * a * symbol)) / 2) ** (m / 2) * ((1 + sympy.cos(2 * b * symbol)) / 2) ** (n / 2))
A:sympy.integrals.manualintegrate.sincos_sinodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd and m >= 3)
A:sympy.integrals.manualintegrate.sincos_sinodd->trig_rewriter(lambda a, b, m, n, i, symbol: (1 - sympy.cos(a * symbol) ** 2) ** ((m - 1) / 2) * sympy.sin(a * symbol) * sympy.cos(b * symbol) ** n)
A:sympy.integrals.manualintegrate.sincos_cosodd_condition->uncurry(lambda a, b, m, n, i, s: n.is_odd and n >= 3)
A:sympy.integrals.manualintegrate.sincos_cosodd->trig_rewriter(lambda a, b, m, n, i, symbol: (1 - sympy.sin(b * symbol) ** 2) ** ((n - 1) / 2) * sympy.cos(b * symbol) * sympy.sin(a * symbol) ** m)
A:sympy.integrals.manualintegrate.tansec_seceven_condition->uncurry(lambda a, b, m, n, i, s: n.is_even and n >= 4)
A:sympy.integrals.manualintegrate.tansec_seceven->trig_rewriter(lambda a, b, m, n, i, symbol: (1 + sympy.tan(b * symbol) ** 2) ** (n / 2 - 1) * sympy.sec(b * symbol) ** 2 * sympy.tan(a * symbol) ** m)
A:sympy.integrals.manualintegrate.tansec_tanodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd)
A:sympy.integrals.manualintegrate.tansec_tanodd->trig_rewriter(lambda a, b, m, n, i, symbol: (sympy.sec(a * symbol) ** 2 - 1) ** ((m - 1) / 2) * sympy.tan(a * symbol) * sympy.sec(b * symbol) ** n)
A:sympy.integrals.manualintegrate.tan_tansquared_condition->uncurry(lambda a, b, m, n, i, s: m == 2 and n == 0)
A:sympy.integrals.manualintegrate.tan_tansquared->trig_rewriter(lambda a, b, m, n, i, symbol: sympy.sec(a * symbol) ** 2 - 1)
A:sympy.integrals.manualintegrate.cotcsc_csceven_condition->uncurry(lambda a, b, m, n, i, s: n.is_even and n >= 4)
A:sympy.integrals.manualintegrate.cotcsc_csceven->trig_rewriter(lambda a, b, m, n, i, symbol: (1 + sympy.cot(b * symbol) ** 2) ** (n / 2 - 1) * sympy.csc(b * symbol) ** 2 * sympy.cot(a * symbol) ** m)
A:sympy.integrals.manualintegrate.cotcsc_cotodd_condition->uncurry(lambda a, b, m, n, i, s: m.is_odd)
A:sympy.integrals.manualintegrate.cotcsc_cotodd->trig_rewriter(lambda a, b, m, n, i, symbol: (sympy.csc(a * symbol) ** 2 - 1) ** ((m - 1) / 2) * sympy.cot(a * symbol) * sympy.csc(b * symbol) ** n)
A:sympy.integrals.manualintegrate.(pattern, a, b, m, n)->cotcsc_pattern(symbol)
A:sympy.integrals.manualintegrate.theta->sympy.Dummy('theta')
A:sympy.integrals.manualintegrate.matches->integrand.subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).subs({1 / sympy.sin(symbol): sympy.csc(symbol), 1 / sympy.tan(symbol): sympy.cot(symbol), sympy.cos(symbol) / sympy.tan(symbol): sympy.cot(symbol)}).find(a + b * symbol ** 2)
A:sympy.integrals.manualintegrate.restriction->sympy.And(symbol > -constant, symbol < constant)
A:sympy.integrals.manualintegrate.substitutions[sympy.sqrt(f(theta) ** 2)]->f(theta)
A:sympy.integrals.manualintegrate.replaced->replaced.xreplace({1 / sympy.cos(theta): sympy.sec(theta)}).xreplace({1 / sympy.cos(theta): sympy.sec(theta)})
A:sympy.integrals.manualintegrate.secants->replaced.xreplace({1 / sympy.cos(theta): sympy.sec(theta)}).xreplace({1 / sympy.cos(theta): sympy.sec(theta)}).find(1 / sympy.cos(theta))
A:sympy.integrals.manualintegrate.substitutions->find_substitutions(integrand, symbol, u_var)
A:sympy.integrals.manualintegrate.subrule->PiecewiseRule(piecewise, substituted, symbol)
A:sympy.integrals.manualintegrate.(_, denom)->c.as_numer_denom()
A:sympy.integrals.manualintegrate.u_func->sympy.exp(symbol)
A:sympy.integrals.manualintegrate.partial_fractions_rule->rewriter(lambda integrand, symbol: integrand.is_rational_function(), lambda integrand, symbol: integrand.apart(symbol))
A:sympy.integrals.manualintegrate.distribute_expand_rule->rewriter(lambda integrand, symbol: all((arg.is_Pow or arg.is_polynomial(symbol) for arg in integrand.args)) or isinstance(integrand, sympy.Pow) or isinstance(integrand, sympy.Mul), lambda integrand, symbol: integrand.expand())
A:sympy.integrals.manualintegrate.integral->IntegralInfo(integrand, symbol)
A:sympy.integrals.manualintegrate.k->key(integral)
A:sympy.integrals.manualintegrate.func->func.subs(sympy.sec(theta), 1 / sympy.cos(theta)).subs(sympy.sec(theta), 1 / sympy.cos(theta))
A:sympy.integrals.manualintegrate.trig_function->list(func.find(TrigonometricFunction))
A:sympy.integrals.manualintegrate.relation->sympy.solve(symbol - func, trig_function)
A:sympy.integrals.manualintegrate.(numer, denom)->sympy.fraction(relation[0])
A:sympy.integrals.manualintegrate.adjacent->sympy.sqrt(denom ** 2 - numer ** 2)
A:sympy.integrals.manualintegrate.inverse->sympy.atan(relation[0])
A:sympy.integrals.manualintegrate.opposite->sympy.sqrt(denom ** 2 - numer ** 2)
A:sympy.integrals.manualintegrate.hypotenuse->sympy.sqrt(denom ** 2 + numer ** 2)
A:sympy.integrals.manualintegrate.evaluator->evaluators.get(rule.__class__)
sympy.integrals.manualintegrate.Rule(name,props='')
sympy.integrals.manualintegrate._manualintegrate(rule)
sympy.integrals.manualintegrate._parts_rule(integrand,symbol)
sympy.integrals.manualintegrate.add_rule(integral)
sympy.integrals.manualintegrate.alternatives(*rules)
sympy.integrals.manualintegrate.constant_rule(integral)
sympy.integrals.manualintegrate.contains_dont_know(rule)
sympy.integrals.manualintegrate.cotcsc_pattern(symbol)
sympy.integrals.manualintegrate.derivative_rule(integral)
sympy.integrals.manualintegrate.eval_add(substeps,integrand,symbol)
sympy.integrals.manualintegrate.eval_alternative(alternatives,integrand,symbol)
sympy.integrals.manualintegrate.eval_arcsin(integrand,symbol)
sympy.integrals.manualintegrate.eval_arctan(integrand,symbol)
sympy.integrals.manualintegrate.eval_constant(constant,integrand,symbol)
sympy.integrals.manualintegrate.eval_constanttimes(constant,other,substep,integrand,symbol)
sympy.integrals.manualintegrate.eval_cyclicparts(parts_rules,coefficient,integrand,symbol)
sympy.integrals.manualintegrate.eval_derivativerule(integrand,symbol)
sympy.integrals.manualintegrate.eval_dontknowrule(integrand,symbol)
sympy.integrals.manualintegrate.eval_exp(base,exp,integrand,symbol)
sympy.integrals.manualintegrate.eval_heaviside(arg,integrand,symbol)
sympy.integrals.manualintegrate.eval_inversehyperbolic(func,integrand,symbol)
sympy.integrals.manualintegrate.eval_parts(u,dv,v_step,second_step,integrand,symbol)
sympy.integrals.manualintegrate.eval_piecewise(substeps,integrand,symbol)
sympy.integrals.manualintegrate.eval_power(base,exp,integrand,symbol)
sympy.integrals.manualintegrate.eval_reciprocal(func,integrand,symbol)
sympy.integrals.manualintegrate.eval_rewrite(rewritten,substep,integrand,symbol)
sympy.integrals.manualintegrate.eval_trig(func,arg,integrand,symbol)
sympy.integrals.manualintegrate.eval_trigsubstitution(theta,func,rewritten,substep,restriction,integrand,symbol)
sympy.integrals.manualintegrate.eval_u(u_var,u_func,constant,substep,integrand,symbol)
sympy.integrals.manualintegrate.evaluates(rule)
sympy.integrals.manualintegrate.exp_rule(integral)
sympy.integrals.manualintegrate.fallback_rule(integral)
sympy.integrals.manualintegrate.find_substitutions(integrand,symbol,u_var)
sympy.integrals.manualintegrate.heaviside_rule(integral)
sympy.integrals.manualintegrate.integral_steps(integrand,symbol,**options)
sympy.integrals.manualintegrate.inverse_trig_rule(integral)
sympy.integrals.manualintegrate.make_wilds(symbol)
sympy.integrals.manualintegrate.manual_diff(f,symbol)
sympy.integrals.manualintegrate.manualintegrate(f,var)
sympy.integrals.manualintegrate.mul_rule(integral)
sympy.integrals.manualintegrate.multiplexer(conditions)
sympy.integrals.manualintegrate.parts_rule(integral)
sympy.integrals.manualintegrate.power_rule(integral)
sympy.integrals.manualintegrate.proxy_rewriter(condition,rewrite)
sympy.integrals.manualintegrate.rewriter(condition,rewrite)
sympy.integrals.manualintegrate.rewrites_rule(integral)
sympy.integrals.manualintegrate.sincos_pattern(symbol)
sympy.integrals.manualintegrate.substitution_rule(integral)
sympy.integrals.manualintegrate.tansec_pattern(symbol)
sympy.integrals.manualintegrate.trig_cotcsc_rule(integral)
sympy.integrals.manualintegrate.trig_powers_products_rule(integral)
sympy.integrals.manualintegrate.trig_product_rule(integral)
sympy.integrals.manualintegrate.trig_rewriter(rewrite)
sympy.integrals.manualintegrate.trig_rule(integral)
sympy.integrals.manualintegrate.trig_sincos_rule(integral)
sympy.integrals.manualintegrate.trig_substitution_rule(integral)
sympy.integrals.manualintegrate.trig_tansec_rule(integral)
sympy.integrals.manualintegrate.uncurry(func)
sympy.manualintegrate.Rule(name,props='')
sympy.manualintegrate._manualintegrate(rule)
sympy.manualintegrate._parts_rule(integrand,symbol)
sympy.manualintegrate.add_rule(integral)
sympy.manualintegrate.alternatives(*rules)
sympy.manualintegrate.constant_rule(integral)
sympy.manualintegrate.contains_dont_know(rule)
sympy.manualintegrate.cotcsc_pattern(symbol)
sympy.manualintegrate.derivative_rule(integral)
sympy.manualintegrate.eval_add(substeps,integrand,symbol)
sympy.manualintegrate.eval_alternative(alternatives,integrand,symbol)
sympy.manualintegrate.eval_arcsin(integrand,symbol)
sympy.manualintegrate.eval_arctan(integrand,symbol)
sympy.manualintegrate.eval_constant(constant,integrand,symbol)
sympy.manualintegrate.eval_constanttimes(constant,other,substep,integrand,symbol)
sympy.manualintegrate.eval_cyclicparts(parts_rules,coefficient,integrand,symbol)
sympy.manualintegrate.eval_derivativerule(integrand,symbol)
sympy.manualintegrate.eval_dontknowrule(integrand,symbol)
sympy.manualintegrate.eval_exp(base,exp,integrand,symbol)
sympy.manualintegrate.eval_heaviside(arg,integrand,symbol)
sympy.manualintegrate.eval_inversehyperbolic(func,integrand,symbol)
sympy.manualintegrate.eval_parts(u,dv,v_step,second_step,integrand,symbol)
sympy.manualintegrate.eval_piecewise(substeps,integrand,symbol)
sympy.manualintegrate.eval_power(base,exp,integrand,symbol)
sympy.manualintegrate.eval_reciprocal(func,integrand,symbol)
sympy.manualintegrate.eval_rewrite(rewritten,substep,integrand,symbol)
sympy.manualintegrate.eval_trig(func,arg,integrand,symbol)
sympy.manualintegrate.eval_trigsubstitution(theta,func,rewritten,substep,restriction,integrand,symbol)
sympy.manualintegrate.eval_u(u_var,u_func,constant,substep,integrand,symbol)
sympy.manualintegrate.evaluates(rule)
sympy.manualintegrate.exp_rule(integral)
sympy.manualintegrate.fallback_rule(integral)
sympy.manualintegrate.find_substitutions(integrand,symbol,u_var)
sympy.manualintegrate.heaviside_rule(integral)
sympy.manualintegrate.integral_steps(integrand,symbol,**options)
sympy.manualintegrate.inverse_trig_rule(integral)
sympy.manualintegrate.make_wilds(symbol)
sympy.manualintegrate.manual_diff(f,symbol)
sympy.manualintegrate.manualintegrate(f,var)
sympy.manualintegrate.mul_rule(integral)
sympy.manualintegrate.multiplexer(conditions)
sympy.manualintegrate.parts_rule(integral)
sympy.manualintegrate.power_rule(integral)
sympy.manualintegrate.proxy_rewriter(condition,rewrite)
sympy.manualintegrate.rewriter(condition,rewrite)
sympy.manualintegrate.rewrites_rule(integral)
sympy.manualintegrate.sincos_pattern(symbol)
sympy.manualintegrate.substitution_rule(integral)
sympy.manualintegrate.tansec_pattern(symbol)
sympy.manualintegrate.trig_cotcsc_rule(integral)
sympy.manualintegrate.trig_powers_products_rule(integral)
sympy.manualintegrate.trig_product_rule(integral)
sympy.manualintegrate.trig_rewriter(rewrite)
sympy.manualintegrate.trig_rule(integral)
sympy.manualintegrate.trig_sincos_rule(integral)
sympy.manualintegrate.trig_substitution_rule(integral)
sympy.manualintegrate.trig_tansec_rule(integral)
sympy.manualintegrate.uncurry(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/rationaltools.py----------------------------------------
A:sympy.integrals.rationaltools.(p, q)->f.to_field().div(g)
A:sympy.integrals.rationaltools.(coeff, p, q)->p.cancel(q)
A:sympy.integrals.rationaltools.(poly, p)->p.div(q)
A:sympy.integrals.rationaltools.result->S(0)
A:sympy.integrals.rationaltools.(g, h)->ratint_ratpart(p, q, x)
A:sympy.integrals.rationaltools.(P, Q)->Poly(dict(list(zip(h.monoms(), coeffs))), x).as_numer_denom()
A:sympy.integrals.rationaltools.P->Poly(P, x)
A:sympy.integrals.rationaltools.Q->q.as_expr().subs({t: u + I * v}).expand()
A:sympy.integrals.rationaltools.(q, r)->Poly(P, x).div(Q)
A:sympy.integrals.rationaltools.symbol->flags.get('symbol', 't')
A:sympy.integrals.rationaltools.t->flags.get('symbol', 't').as_dummy()
A:sympy.integrals.rationaltools.L->ratint_logpart(r, Q, x, t)
A:sympy.integrals.rationaltools.real->flags.get('real')
A:sympy.integrals.rationaltools.atoms->f.to_field().atoms()
A:sympy.integrals.rationaltools.eps->S(0)
A:sympy.integrals.rationaltools.R->Poly(resultant(c, d, v), u)
A:sympy.integrals.rationaltools.f->f.to_field().to_field()
A:sympy.integrals.rationaltools.g->g.to_field().to_field()
A:sympy.integrals.rationaltools.(u, v, _)->g.to_field().to_field().cofactors(g.diff())
A:sympy.integrals.rationaltools.n->(f * s + g * t).quo(h).degree()
A:sympy.integrals.rationaltools.m->v.degree()
A:sympy.integrals.rationaltools.A->Poly(a.subs({u: r_u, v: r_v}), x)
A:sympy.integrals.rationaltools.B->Poly(b.subs({u: r_u, v: r_v}), x)
A:sympy.integrals.rationaltools.rat_part->cancel(A / u.as_expr(), x)
A:sympy.integrals.rationaltools.log_part->cancel(B / v.as_expr(), x)
A:sympy.integrals.rationaltools.(res, R)->resultant(a, b, includePRS=True)
A:sympy.integrals.rationaltools.res->Poly(res, t, composite=False)
A:sympy.integrals.rationaltools.(C, res_sqf)->Poly(res, t, composite=False).sqf_list()
A:sympy.integrals.rationaltools.(_, q)->q.primitive()
A:sympy.integrals.rationaltools.h_lc->Poly(h.LC(), t, field=True)
A:sympy.integrals.rationaltools.(c, h_lc_sqf)->Poly(h.LC(), t, field=True).sqf_list(all=True)
A:sympy.integrals.rationaltools.h->Poly(dict(list(zip(h.monoms(), coeffs))), x)
A:sympy.integrals.rationaltools.T->(inv * coeff).rem(q)
A:sympy.integrals.rationaltools.(s, t, h)->g.to_field().to_field().gcdex(-f)
A:sympy.integrals.rationaltools.u->(f * s + g * t).quo(h)
A:sympy.integrals.rationaltools.(u, v)->symbols('u,v', cls=Dummy)
A:sympy.integrals.rationaltools.H->Poly(dict(list(zip(h.monoms(), coeffs))), x).as_expr().subs({t: u + I * v}).expand()
A:sympy.integrals.rationaltools.H_map->collect(H, I, evaluate=False)
A:sympy.integrals.rationaltools.Q_map->collect(Q, I, evaluate=False)
A:sympy.integrals.rationaltools.R_u->roots(R, filter='R')
A:sympy.integrals.rationaltools.C->Poly(c.subs({u: r_u}), v)
A:sympy.integrals.rationaltools.R_v->roots(C, filter='R')
A:sympy.integrals.rationaltools.D->d.subs({u: r_u, v: r_v})
A:sympy.integrals.rationaltools.AB->(A ** 2 + B ** 2).as_expr()
A:sympy.integrals.rationaltools.R_q->roots(q, filter='R')
sympy.integrals.rationaltools.log_to_atan(f,g)
sympy.integrals.rationaltools.log_to_real(h,q,x,t)
sympy.integrals.rationaltools.ratint(f,x,**flags)
sympy.integrals.rationaltools.ratint_logpart(f,g,x,t=None)
sympy.integrals.rationaltools.ratint_ratpart(f,g,x)
sympy.rationaltools.log_to_atan(f,g)
sympy.rationaltools.log_to_real(h,q,x,t)
sympy.rationaltools.ratint(f,x,**flags)
sympy.rationaltools.ratint_logpart(f,g,x,t=None)
sympy.rationaltools.ratint_ratpart(f,g,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/rde.py----------------------------------------
A:sympy.integrals.rde.r->Poly(r, z)
A:sympy.integrals.rde.product->Poly(1, t)
A:sympy.integrals.rde.final->power_list.pop()
A:sympy.integrals.rde.(dn, ds)->splitfactor(fd, DE)
A:sympy.integrals.rde.g->a.gcd(b)
A:sympy.integrals.rde.d_sqf_part->dn.quo(g)
A:sympy.integrals.rde.d1->dn.quo(g).quo(gcd(d_sqf_part, g))
A:sympy.integrals.rde.(a1, b)->gcdex_diophantine(d.quo(d1).as_poly(DE.t), d1.as_poly(DE.t), a.as_poly(DE.t))
A:sympy.integrals.rde.q->Poly(0, DE.t)
A:sympy.integrals.rde.dq->derivation(q, DE)
A:sympy.integrals.rde.(sn, sd)->sn.cancel(sd, include=True)
A:sympy.integrals.rde.(en, es)->splitfactor(gd, DE)
A:sympy.integrals.rde.p->Poly(c.as_poly(DE.t).LC() / u * DE.t ** m, DE.t, expand=False)
A:sympy.integrals.rde.h->en.gcd(en.diff(DE.t)).quo(p.gcd(p.diff(DE.t)))
A:sympy.integrals.rde.(ca, cd)->ca.cancel(gd, include=True)
A:sympy.integrals.rde.(ba, bd)->frac_in(b, DE.t)
A:sympy.integrals.rde.B->ba.to_field().quo(bd)
A:sympy.integrals.rde.C->(ca * pN * pn).quo(cd)
A:sympy.integrals.rde.n->bound_degree(A, B, C, DE)
A:sympy.integrals.rde.dcoeff->DE.d.quo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.rde.(alphaa, alphad)->frac_in(alpha, DE.t)
A:sympy.integrals.rde.(etaa, etad)->frac_in(eta, DE.t)
A:sympy.integrals.rde.A->parametric_log_deriv(ba, bd, etaa, etad, DE)
A:sympy.integrals.rde.(betaa, betad)->frac_in(beta, DE.t)
A:sympy.integrals.rde.N->max(0, -nb, n - nc)
A:sympy.integrals.rde.da->a.degree(DE.t)
A:sympy.integrals.rde.db->b.to_field().quo(a).degree(DE.t)
A:sympy.integrals.rde.dc->cQ.degree(DE.t)
A:sympy.integrals.rde.alpha->Poly(1, DE.t)
A:sympy.integrals.rde.((za, zd), m)->limited_integrate(betaa, betad, [(etaa, etad)], DE)
A:sympy.integrals.rde.delta->DE.d.degree(DE.t)
A:sympy.integrals.rde.lam->DE.d.LC()
A:sympy.integrals.rde.zero->Poly(0, DE.t)
A:sympy.integrals.rde.beta->Poly(0, DE.t)
A:sympy.integrals.rde.b->b.to_field().quo(a).to_field().quo(a)
A:sympy.integrals.rde.c->c.to_field().quo(a).to_field().quo(a)
A:sympy.integrals.rde.(r, z)->gcdex_diophantine(b, a, c)
A:sympy.integrals.rde.lc->cancel(-b.as_poly(DE.t).LC() / DE.d.as_poly(DE.t).LC())
A:sympy.integrals.rde.m->c.to_field().quo(a).to_field().quo(a).degree(DE.t)
A:sympy.integrals.rde.u->cancel(m * DE.d.as_poly(DE.t).LC() + b.as_poly(DE.t).LC())
A:sympy.integrals.rde.(a2a, a2d)->frac_in(c.LC(), DE.t)
A:sympy.integrals.rde.(sa, sd)->rischDE(a1a, a1d, a2a, a2d, DE)
A:sympy.integrals.rde.stm->Poly(sa.as_expr() / sd.as_expr() * DE.t ** m, DE.t, expand=False)
A:sympy.integrals.rde.eta->DE.d.quo(Poly(DE.t, DE.t)).as_expr()
A:sympy.integrals.rde.a1->b.to_field().quo(a).to_field().quo(a).as_expr()
A:sympy.integrals.rde.(a1a, a1d)->frac_in(a1, DE.t)
A:sympy.integrals.rde.R->no_cancel_equal(b, cQ, n, DE)
A:sympy.integrals.rde.y->solve_poly_rde(B, C, m, DE)
A:sympy.integrals.rde.(_, (fa, fd))->weak_normalizer(fa, fd, DE)
A:sympy.integrals.rde.(a, (ba, bd), (ca, cd), hn)->normal_denom(fa, fd, ga, gd, DE)
A:sympy.integrals.rde.(A, B, C, hs)->special_denom(a, ba, bd, ca, cd, DE)
A:sympy.integrals.rde.(B, C, m, alpha, beta)->spde(A, B, C, n, DE)
sympy.integrals.rde.bound_degree(a,b,cQ,DE,case='auto',parametric=False)
sympy.integrals.rde.cancel_exp(b,c,n,DE)
sympy.integrals.rde.cancel_primitive(b,c,n,DE)
sympy.integrals.rde.no_cancel_b_large(b,c,n,DE)
sympy.integrals.rde.no_cancel_b_small(b,c,n,DE)
sympy.integrals.rde.no_cancel_equal(b,c,n,DE)
sympy.integrals.rde.normal_denom(fa,fd,ga,gd,DE)
sympy.integrals.rde.order_at(a,p,t)
sympy.integrals.rde.order_at_oo(a,d,t)
sympy.integrals.rde.rischDE(fa,fd,ga,gd,DE)
sympy.integrals.rde.solve_poly_rde(b,cQ,n,DE,parametric=False)
sympy.integrals.rde.spde(a,b,c,n,DE)
sympy.integrals.rde.special_denom(a,ba,bd,ca,cd,DE,case='auto')
sympy.integrals.rde.weak_normalizer(a,d,DE,z=None)
sympy.rde.bound_degree(a,b,cQ,DE,case='auto',parametric=False)
sympy.rde.cancel_exp(b,c,n,DE)
sympy.rde.cancel_primitive(b,c,n,DE)
sympy.rde.no_cancel_b_large(b,c,n,DE)
sympy.rde.no_cancel_b_small(b,c,n,DE)
sympy.rde.no_cancel_equal(b,c,n,DE)
sympy.rde.normal_denom(fa,fd,ga,gd,DE)
sympy.rde.order_at(a,p,t)
sympy.rde.order_at_oo(a,d,t)
sympy.rde.rischDE(fa,fd,ga,gd,DE)
sympy.rde.solve_poly_rde(b,cQ,n,DE,parametric=False)
sympy.rde.spde(a,b,c,n,DE)
sympy.rde.special_denom(a,ba,bd,ca,cd,DE,case='auto')
sympy.rde.weak_normalizer(a,d,DE,z=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/trigonometry.py----------------------------------------
A:sympy.integrals.trigonometry.a->Wild('a', exclude=[x])
A:sympy.integrals.trigonometry._u->Dummy('u')
A:sympy.integrals.trigonometry.(pat, a, n, m)->_pat_sincos(x)
A:sympy.integrals.trigonometry.f->f.rewrite('sincos').rewrite('sincos')
A:sympy.integrals.trigonometry.M->f.rewrite('sincos').rewrite('sincos').match(pat)
A:sympy.integrals.trigonometry.uu->sin(a * x)
A:sympy.integrals.trigonometry.fi->integrate(ff, u)
A:sympy.integrals.trigonometry.fx->integrate(ff, u).subs(u, uu)
A:sympy.integrals.trigonometry.res->integrate((Rational(1, 2) * sin(2 * x)) ** m, x)
sympy.integrals.trigonometry._cos_pow_integrate(n,x)
sympy.integrals.trigonometry._integer_instance(n)
sympy.integrals.trigonometry._pat_sincos(x)
sympy.integrals.trigonometry._sin_pow_integrate(n,x)
sympy.integrals.trigonometry.trigintegrate(f,x,conds='piecewise')
sympy.trigonometry._cos_pow_integrate(n,x)
sympy.trigonometry._integer_instance(n)
sympy.trigonometry._pat_sincos(x)
sympy.trigonometry._sin_pow_integrate(n,x)
sympy.trigonometry.trigintegrate(f,x,conds='piecewise')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/heurisch.py----------------------------------------
A:sympy.integrals.heurisch.result->heurisch(f, x, mappings=mappings, rewrite=rewrite, hints=hints, retries=retries - 1, unnecessary_permutations=unnecessary_permutations)
A:sympy.integrals.heurisch.f->f.rewrite(candidates, rule).rewrite(candidates, rule)
A:sympy.integrals.heurisch.res->heurisch(f, x, rewrite, hints, mappings, retries, degree_offset, unnecessary_permutations)
A:sympy.integrals.heurisch.slns->list(uniq(slns))
A:sympy.integrals.heurisch.expr->heurisch(f.subs(sub_dict), x, rewrite, hints, mappings, retries, degree_offset, unnecessary_permutations)
A:sympy.integrals.heurisch.cond->And(*[Eq(key, value) for (key, value) in sub_dict.items()])
A:sympy.integrals.heurisch.(indep, f)->f.rewrite(candidates, rule).rewrite(candidates, rule).as_independent(x)
A:sympy.integrals.heurisch.terms->components(f, x)
A:sympy.integrals.heurisch.a->Wild('a', exclude=[x])
A:sympy.integrals.heurisch.b->Wild('b', exclude=[x])
A:sympy.integrals.heurisch.c->Wild('c', exclude=[x])
A:sympy.integrals.heurisch.M->g.base.match(a * x ** 2 - b)
A:sympy.integrals.heurisch.V->_symbols('x', len(terms))
A:sympy.integrals.heurisch.mapping->list(mapping)
A:sympy.integrals.heurisch.mappings->permutations(mapping)
A:sympy.integrals.heurisch.denom->reduce(lambda p, q: lcm(p, q, *V), denoms)
A:sympy.integrals.heurisch.(c, q)->p.as_poly(y).primitive()
A:sympy.integrals.heurisch.q->q.as_expr().as_expr()
A:sympy.integrals.heurisch.h->gcd(q, _derivation(q), y)
A:sympy.integrals.heurisch.s->quo(h, gcd(q, q.diff(y), y), y)
A:sympy.integrals.heurisch.c_split->_splitter(c)
A:sympy.integrals.heurisch.q_split->_splitter(cancel(q / s))
A:sympy.integrals.heurisch.F->_substitute(f)
A:sympy.integrals.heurisch.(P, Q)->_substitute(f).as_numer_denom()
A:sympy.integrals.heurisch.u_split->_splitter(denom)
A:sympy.integrals.heurisch.v_split->_splitter(Q)
A:sympy.integrals.heurisch.poly_denom->(s * v_split[0] * _deflation(v_split[1])).as_expr()
A:sympy.integrals.heurisch.monoms->itermonomials(V, A + B + degree_offset)
A:sympy.integrals.heurisch.poly_coeffs->_symbols('A', len(monoms))
A:sympy.integrals.heurisch.poly_part->Add(*[poly_coeffs[i] * monomial for (i, monomial) in enumerate(monoms)])
A:sympy.integrals.heurisch.reducibles->set()
A:sympy.integrals.heurisch.factorization->factor(poly, greedy=True)
A:sympy.integrals.heurisch.irreducibles->set()
A:sympy.integrals.heurisch.B->_symbols('B', len(irreducibles))
A:sympy.integrals.heurisch.non_syms->set([])
A:sympy.integrals.heurisch.(ground, _)->construct_domain(non_syms, field=True)
A:sympy.integrals.heurisch.coeff_ring->PolyRing(coeffs, ground)
A:sympy.integrals.heurisch.ring->PolyRing(V, coeff_ring)
A:sympy.integrals.heurisch.numer->PolyRing(V, coeff_ring).from_expr(raw_numer)
A:sympy.integrals.heurisch.solution->_integrate()
A:sympy.integrals.heurisch.antideriv->cancel(antideriv).expand(force=True)
sympy.heurisch._symbols(name,n)
sympy.heurisch.components(f,x)
sympy.heurisch.heurisch(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None)
sympy.heurisch.heurisch_wrapper(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None)
sympy.integrals.heurisch._symbols(name,n)
sympy.integrals.heurisch.components(f,x)
sympy.integrals.heurisch.heurisch(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None)
sympy.integrals.heurisch.heurisch_wrapper(f,x,rewrite=False,hints=None,mappings=None,retries=3,degree_offset=0,unnecessary_permutations=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/risch.py----------------------------------------
A:sympy.integrals.risch.a->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.risch.common_denom->reduce(ilcm, [i.as_numer_denom()[1] for (_, i) in terms[term]])
A:sympy.integrals.risch.self.newf->self.newf.xreplace({log(arg): self.t})
A:sympy.integrals.risch.s->list(zip(reversed(DE.T), reversed([f(DE.x) for f in DE.Tfuncs])))
A:sympy.integrals.risch.exps->update(exps, self.newf.atoms(exp), lambda i: i.exp.is_rational_function(*self.T) and i.exp.has(*self.T))
A:sympy.integrals.risch.pows->update(pows, self.newf.atoms(Pow), lambda i: i.exp.is_rational_function(*self.T) and i.exp.has(*self.T))
A:sympy.integrals.risch.numpows->update(numpows, set(pows), lambda i: not i.base.has(*self.T))
A:sympy.integrals.risch.sympows->update(sympows, set(pows) - set(numpows), lambda i: i.base.is_rational_function(*self.T) and (not i.exp.is_Integer))
A:sympy.integrals.risch.logs->list(set(logs))
A:sympy.integrals.risch.symlogs->update(symlogs, atoms, lambda i: i.has(*self.T) and i.args[0].is_Pow and i.args[0].base.is_rational_function(*self.T) and (not i.args[0].exp.is_Integer))
A:sympy.integrals.risch.new->exp(i.exp * log(i.base))
A:sympy.integrals.risch.(basea, based)->frac_in(i.base, self.t)
A:sympy.integrals.risch.A->is_deriv_k(arga, argd, self)
A:sympy.integrals.risch.newterm->exp(i.exp * (log(const) + u))
A:sympy.integrals.risch.atoms->self.newf.atoms(log)
A:sympy.integrals.risch.lbase->log(i.args[0].base)
A:sympy.integrals.risch.exp_new_extension->self._exp_part(exps, dummy=dummy)
A:sympy.integrals.risch.log_new_extension->self._log_part(logs, dummy=dummy)
A:sympy.integrals.risch.(self.fa, self.fd)->frac_in(self.newf, self.t)
A:sympy.integrals.risch.ip->integer_powers(expargs)
A:sympy.integrals.risch.(arga, argd)->frac_in(arg, self.t)
A:sympy.integrals.risch.rad->Mul(*[term ** (power / n) for (term, power) in ans])
A:sympy.integrals.risch.(darga, dargd)->darga.cancel(dargd, include=True)
A:sympy.integrals.risch.self.t->next(self.ts)
A:sympy.integrals.risch.i->NonElementaryIntegral(i.function.subs(DE.backsubs), i.limits)
A:sympy.integrals.risch.self.ts->numbered_symbols('t')
A:sympy.integrals.risch.(s, g)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).half_gcdex(b)
A:sympy.integrals.risch.q->Poly(0, DE.t)
A:sympy.integrals.risch.(q, s)->list(zip(reversed(DE.T), reversed([f(DE.x) for f in DE.Tfuncs]))).div(b)
A:sympy.integrals.risch.t->(c - s * a).exquo(b)
A:sympy.integrals.risch.cancel->kwargs.pop('cancel', False)
A:sympy.integrals.risch.(fa, fd)->frac_in(i, DE.t)
A:sympy.integrals.risch.(pa, pd)->frac_in(p, t, cancel=True)
A:sympy.integrals.risch.d->pd.degree(t)
A:sympy.integrals.risch.one_t_part->one_t_part.replace(t, z).replace(t, z)
A:sympy.integrals.risch.t_part->t_part.to_field().exquo(pd).to_field().exquo(pd)
A:sympy.integrals.risch.r->Poly(r, z)
A:sympy.integrals.risch.pv->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).as_expr()
A:sympy.integrals.risch.One->Poly(1, DE.t, domain=p.get_domain())
A:sympy.integrals.risch.Dp->derivation(p, DE, coefficientD=coefficientD)
A:sympy.integrals.risch.n->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).exquo(s)
A:sympy.integrals.risch.h->Poly(dict(list(zip(h.monoms(), coeffs))), DE.t)
A:sympy.integrals.risch.g->gcd(d, H[-1]).as_poly()
A:sympy.integrals.risch.q_split->splitfactor(p.exquo(s), DE, coefficientD=coefficientD)
A:sympy.integrals.risch.p_sqf->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).sqf_list_include()
A:sympy.integrals.risch.Si->Poly(Si, DE.t)
A:sympy.integrals.risch.pi->Poly(pi, DE.t)
A:sympy.integrals.risch.Ni->Poly(pi, DE.t).exquo(Si)
A:sympy.integrals.risch.l->Poly(1 / d.LC(), DE.t)
A:sympy.integrals.risch.(q, r)->polynomial_reduce(p, DE)
A:sympy.integrals.risch.(dn, ds)->splitfactor(d, DE)
A:sympy.integrals.risch.(b, c)->gcdex_diophantine(-ds_ddm_dm.as_poly(DE.t), dms.as_poly(DE.t), a.as_poly(DE.t))
A:sympy.integrals.risch.(fp, fs, fn)->canonical_representation(a, d, DE)
A:sympy.integrals.risch.ga->Poly(0, DE.t)
A:sympy.integrals.risch.gd->Poly(1, DE.t)
A:sympy.integrals.risch.dd->derivation(d, DE)
A:sympy.integrals.risch.dm->gcd(d, dd).as_poly(DE.t)
A:sympy.integrals.risch.(ds, r)->pd.degree(t).div(dm)
A:sympy.integrals.risch.ddm->derivation(dm, DE)
A:sympy.integrals.risch.dm2->gcd(dm, ddm)
A:sympy.integrals.risch.(dms, r)->gcd(d, dd).as_poly(DE.t).div(dm2)
A:sympy.integrals.risch.ds_ddm->ds.mul(ddm)
A:sympy.integrals.risch.(ds_ddm_dm, r)->ds.mul(ddm).div(dm)
A:sympy.integrals.risch.db->derivation(b, DE).as_poly(DE.t)
A:sympy.integrals.risch.(ds_dms, r)->ds.div(dms)
A:sympy.integrals.risch.(ga, gd)->Poly(0, DE.t).cancel(gd, include=True)
A:sympy.integrals.risch.(r, d)->Poly(r, z).cancel(d, include=True)
A:sympy.integrals.risch.(rra, rrd)->rra.cancel(rrd, include=True)
A:sympy.integrals.risch.q0->Poly(DE.t ** m, DE.t).mul(Poly(p.as_poly(DE.t).LC() / (m * DE.d.LC()), DE.t))
A:sympy.integrals.risch.Z->_symbols('z', n)
A:sympy.integrals.risch.delta_a->Poly(0, DE.t)
A:sympy.integrals.risch.delta_d->Poly(1, DE.t)
A:sympy.integrals.risch.E->pd.degree(t).quo(F ** n)
A:sympy.integrals.risch.dF->derivation(F, DE)
A:sympy.integrals.risch.(B, G)->gcdex_diophantine(E, F, Poly(1, DE.t))
A:sympy.integrals.risch.(C, G)->gcdex_diophantine(dF, F, Poly(1, DE.t))
A:sympy.integrals.risch.F_store->derivation(F_store, DE)
A:sympy.integrals.risch.DE_new->DifferentialExtension(extension={'D': DE_D_list})
A:sympy.integrals.risch.Q->Q.subs(Z[i], V[i]).subs(Z[i], V[i])
A:sympy.integrals.risch.(Ff, Fr)->F.div(gcd(F, Q))
A:sympy.integrals.risch.(F_stara, F_stard)->frac_in(Ff, DE.t)
A:sympy.integrals.risch.H->(QBC * F_stard).rem(F_stara)
A:sympy.integrals.risch.alphas->real_roots(F_stara)
A:sympy.integrals.risch.(a, d)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).cancel(d, include=True)
A:sympy.integrals.risch.(Np, Sp)->splitfactor_sqf(r, DE, coefficientD=True, z=z)
A:sympy.integrals.risch.(delta_a, delta_d, H)->laurent_series(r, d, s, j, DE)
A:sympy.integrals.risch.(p, a)->DE.d.exquo(Poly(DE.t ** 2 + 1, DE.t)).div(d)
A:sympy.integrals.risch.pz->Poly(z, DE.t)
A:sympy.integrals.risch.Dd->derivation(d, DE)
A:sympy.integrals.risch.(r, R)->Poly(0, DE.t).resultant(d, includePRS=True)
A:sympy.integrals.risch.h_lc->Poly(h.as_poly(DE.t).LC(), DE.t, field=True, expand=False)
A:sympy.integrals.risch.h_lc_sqf->Poly(h.as_poly(DE.t).LC(), DE.t, field=True, expand=False).sqf_list_include(all=True)
A:sympy.integrals.risch.b->all([not cancel(i.as_expr()).has(DE.t, z) for (i, _) in Np])
A:sympy.integrals.risch.Zero->Poly(0, DE.t)
A:sympy.integrals.risch.(Dta, Dtb)->frac_in(DE.d, DE.T[DE.level - 1])
A:sympy.integrals.risch.(aa, ad)->aa.cancel(ad, include=True)
A:sympy.integrals.risch.((ba, bd), c)->limited_integrate(aa, ad, [(Dta, Dtb)], DE)
A:sympy.integrals.risch.m->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t).degree(DE.t)
A:sympy.integrals.risch.(g1, h, r)->hermite_reduce(a, d, DE)
A:sympy.integrals.risch.(g2, b)->residue_reduce(h[0], h[1], DE, z=z)
A:sympy.integrals.risch.p->cancel(h[0].as_expr() / h[1].as_expr() - residue_reduce_derivation(g2, DE, z).as_expr() + r[0].as_expr() / r[1].as_expr()).as_poly(DE.t)
A:sympy.integrals.risch.(q, i, b)->integrate_primitive_polynomial(p, DE)
A:sympy.integrals.risch.dtt->DE.d.exquo(Poly(DE.t, DE.t))
A:sympy.integrals.risch.qa->Poly(0, DE.t)
A:sympy.integrals.risch.qd->Poly(1, DE.t)
A:sympy.integrals.risch.(iDta, iDtd)->frac_in(iDt, DE.t, field=True)
A:sympy.integrals.risch.(va, vd)->frac_in((va, vd), t1)
A:sympy.integrals.risch.pp->as_poly_1t(p, DE.t, z)
A:sympy.integrals.risch.(qa, qd, b)->integrate_hyperexponential_polynomial(pp, DE, z)
A:sympy.integrals.risch.qas->Poly(0, DE.t).as_expr().subs(s)
A:sympy.integrals.risch.qds->Poly(1, DE.t).as_expr().subs(s)
A:sympy.integrals.risch.c->Poly(r.nth(1) / (2 * a.as_expr()), DE.t)
A:sympy.integrals.risch.(q1, q2)->polynomial_reduce(p, DE)
A:sympy.integrals.risch.f->S(f)
A:sympy.integrals.risch.result->result.subs(DE.backsubs).subs(DE.backsubs)
A:sympy.integrals.risch.(ans, i, b)->integrate_primitive(fa, fd, DE)
A:sympy.integrals.risch.ans->integrate(fa.as_expr() / fd.as_expr(), DE.x, risch=False)
sympy.integrals.risch.DecrementLevel(self,DE)
sympy.integrals.risch.DecrementLevel.__enter__(self)
sympy.integrals.risch.DecrementLevel.__exit__(self,exc_type,exc_value,traceback)
sympy.integrals.risch.DecrementLevel.__init__(self,DE)
sympy.integrals.risch.DifferentialExtension(self,f=None,x=None,handle_first='log',dummy=True,extension=None,rewrite_complex=False)
sympy.integrals.risch.DifferentialExtension.__getattr__(self,attr)
sympy.integrals.risch.DifferentialExtension.__init__(self,f=None,x=None,handle_first='log',dummy=True,extension=None,rewrite_complex=False)
sympy.integrals.risch.DifferentialExtension.__str__(self)
sympy.integrals.risch.DifferentialExtension._auto_attrs(self)
sympy.integrals.risch.DifferentialExtension._exp_part(self,exps,dummy=True)
sympy.integrals.risch.DifferentialExtension._important_attrs(self)
sympy.integrals.risch.DifferentialExtension._log_part(self,logs,dummy=True)
sympy.integrals.risch.DifferentialExtension.decrement_level(self)
sympy.integrals.risch.DifferentialExtension.increment_level(self)
sympy.integrals.risch.DifferentialExtension.reset(self,dummy=True)
sympy.integrals.risch.NonElementaryIntegral(Integral)
sympy.integrals.risch.NonElementaryIntegralException(Exception)
sympy.integrals.risch.as_poly_1t(p,t,z)
sympy.integrals.risch.canonical_representation(a,d,DE)
sympy.integrals.risch.derivation(p,DE,coefficientD=False,basic=False)
sympy.integrals.risch.frac_in(f,t,**kwargs)
sympy.integrals.risch.gcdex_diophantine(a,b,c)
sympy.integrals.risch.get_case(d,t)
sympy.integrals.risch.hermite_reduce(a,d,DE)
sympy.integrals.risch.integer_powers(exprs)
sympy.integrals.risch.integrate_hyperexponential(a,d,DE,z=None,conds='piecewise')
sympy.integrals.risch.integrate_hyperexponential_polynomial(p,DE,z)
sympy.integrals.risch.integrate_hypertangent_polynomial(p,DE)
sympy.integrals.risch.integrate_nonlinear_no_specials(a,d,DE,z=None)
sympy.integrals.risch.integrate_primitive(a,d,DE,z=None)
sympy.integrals.risch.integrate_primitive_polynomial(p,DE)
sympy.integrals.risch.laurent_series(a,d,F,n,DE)
sympy.integrals.risch.polynomial_reduce(p,DE)
sympy.integrals.risch.recognize_derivative(a,d,DE,z=None)
sympy.integrals.risch.recognize_log_derivative(a,d,DE,z=None)
sympy.integrals.risch.residue_reduce(a,d,DE,z=None,invert=True)
sympy.integrals.risch.residue_reduce_derivation(H,DE,z)
sympy.integrals.risch.residue_reduce_to_basic(H,DE,z)
sympy.integrals.risch.risch_integrate(f,x,extension=None,handle_first='log',separate_integral=False,rewrite_complex=False,conds='piecewise')
sympy.integrals.risch.splitfactor(p,DE,coefficientD=False,z=None)
sympy.integrals.risch.splitfactor_sqf(p,DE,coefficientD=False,z=None,basic=False)
sympy.risch.DecrementLevel(self,DE)
sympy.risch.DecrementLevel.__enter__(self)
sympy.risch.DecrementLevel.__exit__(self,exc_type,exc_value,traceback)
sympy.risch.DifferentialExtension(self,f=None,x=None,handle_first='log',dummy=True,extension=None,rewrite_complex=False)
sympy.risch.DifferentialExtension.__getattr__(self,attr)
sympy.risch.DifferentialExtension.__str__(self)
sympy.risch.DifferentialExtension._auto_attrs(self)
sympy.risch.DifferentialExtension._exp_part(self,exps,dummy=True)
sympy.risch.DifferentialExtension._important_attrs(self)
sympy.risch.DifferentialExtension._log_part(self,logs,dummy=True)
sympy.risch.DifferentialExtension.decrement_level(self)
sympy.risch.DifferentialExtension.increment_level(self)
sympy.risch.DifferentialExtension.reset(self,dummy=True)
sympy.risch.NonElementaryIntegral(Integral)
sympy.risch.NonElementaryIntegralException(Exception)
sympy.risch.as_poly_1t(p,t,z)
sympy.risch.canonical_representation(a,d,DE)
sympy.risch.derivation(p,DE,coefficientD=False,basic=False)
sympy.risch.frac_in(f,t,**kwargs)
sympy.risch.gcdex_diophantine(a,b,c)
sympy.risch.get_case(d,t)
sympy.risch.hermite_reduce(a,d,DE)
sympy.risch.integer_powers(exprs)
sympy.risch.integrate_hyperexponential(a,d,DE,z=None,conds='piecewise')
sympy.risch.integrate_hyperexponential_polynomial(p,DE,z)
sympy.risch.integrate_hypertangent_polynomial(p,DE)
sympy.risch.integrate_nonlinear_no_specials(a,d,DE,z=None)
sympy.risch.integrate_primitive(a,d,DE,z=None)
sympy.risch.integrate_primitive_polynomial(p,DE)
sympy.risch.laurent_series(a,d,F,n,DE)
sympy.risch.polynomial_reduce(p,DE)
sympy.risch.recognize_derivative(a,d,DE,z=None)
sympy.risch.recognize_log_derivative(a,d,DE,z=None)
sympy.risch.residue_reduce(a,d,DE,z=None,invert=True)
sympy.risch.residue_reduce_derivation(H,DE,z)
sympy.risch.residue_reduce_to_basic(H,DE,z)
sympy.risch.risch_integrate(f,x,extension=None,handle_first='log',separate_integral=False,rewrite_complex=False,conds='piecewise')
sympy.risch.splitfactor(p,DE,coefficientD=False,z=None)
sympy.risch.splitfactor_sqf(p,DE,coefficientD=False,z=None,basic=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/transforms.py----------------------------------------
A:sympy.integrals.transforms.cond->And(*conds)
A:sympy.integrals.transforms.needeval->hints.pop('needeval', False)
A:sympy.integrals.transforms.fn->expand_mul(fn)
A:sympy.integrals.transforms.res->factor(res, gens=res.atoms(Heaviside))
A:sympy.integrals.transforms.extra->self._collapse_extra(extra)
A:sympy.integrals.transforms.(coeff, rest)->expand_mul(fn).as_coeff_mul(self.function_variable)
A:sympy.integrals.transforms.noconds->kwargs.pop('noconds', default)
A:sympy.integrals.transforms._noconds->_noconds_(False)
A:sympy.integrals.transforms.s->Dummy('s')
A:sympy.integrals.transforms.F->integrate(f * besselj(nu, k * r) * r, (r, 0, oo))
A:sympy.integrals.transforms.conds->conjuncts(to_cnf(conds))
A:sympy.integrals.transforms.t->Dummy('t', real=True)
A:sympy.integrals.transforms.d_->d.replace(re, lambda x: x.expand().as_real_imag()[0]).subs(re(s), t)
A:sympy.integrals.transforms.soln->_solve_inequality(d_, t)
A:sympy.integrals.transforms.b_->Max(soln.gts, b_)
A:sympy.integrals.transforms.a_->Min(soln.lts, a_)
A:sympy.integrals.transforms.a->Mul(*exponentials).subs(exp(-t), u)
A:sympy.integrals.transforms.b->bigger(x, y)
A:sympy.integrals.transforms.aux->_simplifyconds(aux, s, a)
A:sympy.integrals.transforms.m->d.match(0 < cos(abs(arg(polar_lift(s) ** w1 * w5, q)) * w2) * abs(s ** w3) ** w4 - p)
A:sympy.integrals.transforms.n->power(ex2)
A:sympy.integrals.transforms.r->bigger(x, y)
A:sympy.integrals.transforms.(a_, b_)->S([a, b])
A:sympy.integrals.transforms.c->expand(re(c))
A:sympy.integrals.transforms.(coeff, _)->Mul(*exponentials).as_coeff_mul(s)
A:sympy.integrals.transforms.common_coefficient->S(1)
A:sympy.integrals.transforms.exponent->S(1)
A:sympy.integrals.transforms.fac->S(1)
A:sympy.integrals.transforms.f->f.replace(exp, simp_exp).replace(exp, simp_exp)
A:sympy.integrals.transforms.(numer, denom)->f.replace(exp, simp_exp).replace(exp, simp_exp).as_numer_denom()
A:sympy.integrals.transforms.numer->sympy.Mul.make_args(numer)
A:sympy.integrals.transforms.denom->sympy.Mul.make_args(denom)
A:sympy.integrals.transforms.(fact, is_numer)->args.pop()
A:sympy.integrals.transforms.p->abs(S(a))
A:sympy.integrals.transforms.base->exp_polar(1)
A:sympy.integrals.transforms.(a, b)->linear_arg(fact.args[0])
A:sympy.integrals.transforms.rs->sympy.RootOf.all_roots(p)
A:sympy.integrals.transforms.(a, c)->gammas.pop()
A:sympy.integrals.transforms.(gamma1, gamma2, fac_)->_rewrite_sin(linear_arg(a), s, a_, b_)
A:sympy.integrals.transforms.arg->Mul(*exponentials)
A:sympy.integrals.transforms.x->_dummy('t', 'inverse-mellin-transform', F, positive=True)
A:sympy.integrals.transforms.(a, b, C, e, fac)->_rewrite_gamma(g, s, strip[0], strip[1])
A:sympy.integrals.transforms.G->meijerg(a, b, C / x ** e)
A:sympy.integrals.transforms.h->hyperexpand(G)
A:sympy.integrals.transforms._none_sentinel->Dummy('None')
A:sympy.integrals.transforms._c->Dummy('c')
A:sympy.integrals.transforms._allowed->set([exp, gamma, sin, cos, tan, cot, cosh, sinh, tanh, coth, factorial, rf])
A:sympy.integrals.transforms.expr->repl(expr, Unequality, replue)
A:sympy.integrals.transforms.u->Dummy('u')
A:sympy.integrals.transforms.(p, q, w1, w2, w3, w4, w5)->symbols('p q w1 w2 w3 w4 w5', cls=Wild, exclude=[s])
A:sympy.integrals.transforms.plane->Max(*planes)
A:sympy.integrals.transforms.(coeff, exponent)->_get_coeff_exp(arg, t)
A:sympy.integrals.transforms.(f, cond)->inverse_mellin_transform(F, s, exp(-t), (None, oo), needeval=True, noconds=False)
A:sympy.integrals.transforms.rel->_solve_inequality(a > 0, u)
A:sympy.integrals.transforms.k->log(rel.lts)
sympy.CosineTransform(SineCosineTypeTransform)
sympy.FourierTransform(FourierTypeTransform)
sympy.HankelTransform(HankelTypeTransform)
sympy.InverseCosineTransform(SineCosineTypeTransform)
sympy.InverseFourierTransform(FourierTypeTransform)
sympy.InverseHankelTransform(HankelTypeTransform)
sympy.InverseLaplaceTransform(cls,F,s,x,plane,**opts)
sympy.InverseLaplaceTransform._as_integral(self,F,s,t)
sympy.InverseLaplaceTransform._compute_transform(self,F,s,t,**hints)
sympy.InverseLaplaceTransform.fundamental_plane(self)
sympy.InverseMellinTransform(cls,F,s,x,a,b,**opts)
sympy.InverseMellinTransform._as_integral(self,F,s,x)
sympy.InverseMellinTransform._compute_transform(self,F,s,x,**hints)
sympy.InverseMellinTransform.fundamental_strip(self)
sympy.InverseSineTransform(SineCosineTypeTransform)
sympy.LaplaceTransform(IntegralTransform)
sympy.LaplaceTransform._as_integral(self,f,t,s)
sympy.LaplaceTransform._collapse_extra(self,extra)
sympy.LaplaceTransform._compute_transform(self,f,t,s,**hints)
sympy.MellinTransform(IntegralTransform)
sympy.MellinTransform._as_integral(self,f,x,s)
sympy.MellinTransform._collapse_extra(self,extra)
sympy.MellinTransform._compute_transform(self,f,x,s,**hints)
sympy.MellinTransformStripError(ValueError)
sympy.SineTransform(SineCosineTypeTransform)
sympy.cosine_transform(f,x,k,**hints)
sympy.fourier_transform(f,x,k,**hints)
sympy.hankel_transform(f,r,k,nu,**hints)
sympy.integrals.transforms.CosineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.FourierTransform(FourierTypeTransform)
sympy.integrals.transforms.FourierTypeTransform(IntegralTransform)
sympy.integrals.transforms.FourierTypeTransform._as_integral(self,f,x,k)
sympy.integrals.transforms.FourierTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.integrals.transforms.HankelTransform(HankelTypeTransform)
sympy.integrals.transforms.HankelTypeTransform(IntegralTransform)
sympy.integrals.transforms.HankelTypeTransform._as_integral(self,f,r,k,nu)
sympy.integrals.transforms.HankelTypeTransform._compute_transform(self,f,r,k,nu,**hints)
sympy.integrals.transforms.HankelTypeTransform.as_integral(self)
sympy.integrals.transforms.HankelTypeTransform.doit(self,**hints)
sympy.integrals.transforms.IntegralTransform(Function)
sympy.integrals.transforms.IntegralTransform._as_integral(self,f,x,s)
sympy.integrals.transforms.IntegralTransform._collapse_extra(self,extra)
sympy.integrals.transforms.IntegralTransform._compute_transform(self,f,x,s,**hints)
sympy.integrals.transforms.IntegralTransform._eval_rewrite_as_Integral(self,*args)
sympy.integrals.transforms.IntegralTransform.as_integral(self)
sympy.integrals.transforms.IntegralTransform.doit(self,**hints)
sympy.integrals.transforms.IntegralTransform.free_symbols(self)
sympy.integrals.transforms.IntegralTransform.function(self)
sympy.integrals.transforms.IntegralTransform.function_variable(self)
sympy.integrals.transforms.IntegralTransform.transform_variable(self)
sympy.integrals.transforms.IntegralTransformError(self,transform,function,msg)
sympy.integrals.transforms.IntegralTransformError.__init__(self,transform,function,msg)
sympy.integrals.transforms.InverseCosineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.InverseFourierTransform(FourierTypeTransform)
sympy.integrals.transforms.InverseHankelTransform(HankelTypeTransform)
sympy.integrals.transforms.InverseLaplaceTransform(cls,F,s,x,plane,**opts)
sympy.integrals.transforms.InverseLaplaceTransform.__new__(cls,F,s,x,plane,**opts)
sympy.integrals.transforms.InverseLaplaceTransform._as_integral(self,F,s,t)
sympy.integrals.transforms.InverseLaplaceTransform._compute_transform(self,F,s,t,**hints)
sympy.integrals.transforms.InverseLaplaceTransform.fundamental_plane(self)
sympy.integrals.transforms.InverseMellinTransform(cls,F,s,x,a,b,**opts)
sympy.integrals.transforms.InverseMellinTransform.__new__(cls,F,s,x,a,b,**opts)
sympy.integrals.transforms.InverseMellinTransform._as_integral(self,F,s,x)
sympy.integrals.transforms.InverseMellinTransform._compute_transform(self,F,s,x,**hints)
sympy.integrals.transforms.InverseMellinTransform.fundamental_strip(self)
sympy.integrals.transforms.InverseSineTransform(SineCosineTypeTransform)
sympy.integrals.transforms.LaplaceTransform(IntegralTransform)
sympy.integrals.transforms.LaplaceTransform._as_integral(self,f,t,s)
sympy.integrals.transforms.LaplaceTransform._collapse_extra(self,extra)
sympy.integrals.transforms.LaplaceTransform._compute_transform(self,f,t,s,**hints)
sympy.integrals.transforms.MellinTransform(IntegralTransform)
sympy.integrals.transforms.MellinTransform._as_integral(self,f,x,s)
sympy.integrals.transforms.MellinTransform._collapse_extra(self,extra)
sympy.integrals.transforms.MellinTransform._compute_transform(self,f,x,s,**hints)
sympy.integrals.transforms.MellinTransformStripError(ValueError)
sympy.integrals.transforms.SineCosineTypeTransform(IntegralTransform)
sympy.integrals.transforms.SineCosineTypeTransform._as_integral(self,f,x,k)
sympy.integrals.transforms.SineCosineTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.integrals.transforms.SineTransform(SineCosineTypeTransform)
sympy.integrals.transforms._default_integrator(f,x)
sympy.integrals.transforms._fourier_transform(f,x,k,a,b,name,simplify=True)
sympy.integrals.transforms._hankel_transform(f,r,k,nu,name,simplify=True)
sympy.integrals.transforms._inverse_laplace_transform(F,s,t_,plane,simplify=True)
sympy.integrals.transforms._inverse_mellin_transform(F,s,x_,strip,as_meijerg=False)
sympy.integrals.transforms._laplace_transform(f,t,s_,simplify=True)
sympy.integrals.transforms._mellin_transform(f,x,s_,integrator=_default_integrator,simplify=True)
sympy.integrals.transforms._noconds_(default)
sympy.integrals.transforms._rewrite_gamma(f,s,a,b)
sympy.integrals.transforms._rewrite_sin(m_n,s,a,b)
sympy.integrals.transforms._simplify(expr,doit)
sympy.integrals.transforms._simplifyconds(expr,s,a)
sympy.integrals.transforms._sine_cosine_transform(f,x,k,a,b,K,name,simplify=True)
sympy.integrals.transforms.cosine_transform(f,x,k,**hints)
sympy.integrals.transforms.fourier_transform(f,x,k,**hints)
sympy.integrals.transforms.hankel_transform(f,r,k,nu,**hints)
sympy.integrals.transforms.inverse_cosine_transform(F,k,x,**hints)
sympy.integrals.transforms.inverse_fourier_transform(F,k,x,**hints)
sympy.integrals.transforms.inverse_hankel_transform(F,k,r,nu,**hints)
sympy.integrals.transforms.inverse_laplace_transform(F,s,t,plane=None,**hints)
sympy.integrals.transforms.inverse_mellin_transform(F,s,x,strip,**hints)
sympy.integrals.transforms.inverse_sine_transform(F,k,x,**hints)
sympy.integrals.transforms.laplace_transform(f,t,s,**hints)
sympy.integrals.transforms.mellin_transform(f,x,s,**hints)
sympy.integrals.transforms.sine_transform(f,x,k,**hints)
sympy.inverse_cosine_transform(F,k,x,**hints)
sympy.inverse_fourier_transform(F,k,x,**hints)
sympy.inverse_hankel_transform(F,k,r,nu,**hints)
sympy.inverse_laplace_transform(F,s,t,plane=None,**hints)
sympy.inverse_mellin_transform(F,s,x,strip,**hints)
sympy.inverse_sine_transform(F,k,x,**hints)
sympy.laplace_transform(f,t,s,**hints)
sympy.mellin_transform(f,x,s,**hints)
sympy.sine_transform(f,x,k,**hints)
sympy.transforms.FourierTypeTransform(IntegralTransform)
sympy.transforms.FourierTypeTransform._as_integral(self,f,x,k)
sympy.transforms.FourierTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.transforms.HankelTypeTransform(IntegralTransform)
sympy.transforms.HankelTypeTransform._as_integral(self,f,r,k,nu)
sympy.transforms.HankelTypeTransform._compute_transform(self,f,r,k,nu,**hints)
sympy.transforms.HankelTypeTransform.as_integral(self)
sympy.transforms.HankelTypeTransform.doit(self,**hints)
sympy.transforms.IntegralTransform(Function)
sympy.transforms.IntegralTransform._as_integral(self,f,x,s)
sympy.transforms.IntegralTransform._collapse_extra(self,extra)
sympy.transforms.IntegralTransform._compute_transform(self,f,x,s,**hints)
sympy.transforms.IntegralTransform._eval_rewrite_as_Integral(self,*args)
sympy.transforms.IntegralTransform.as_integral(self)
sympy.transforms.IntegralTransform.doit(self,**hints)
sympy.transforms.IntegralTransform.free_symbols(self)
sympy.transforms.IntegralTransform.function(self)
sympy.transforms.IntegralTransform.function_variable(self)
sympy.transforms.IntegralTransform.transform_variable(self)
sympy.transforms.IntegralTransformError(self,transform,function,msg)
sympy.transforms.SineCosineTypeTransform(IntegralTransform)
sympy.transforms.SineCosineTypeTransform._as_integral(self,f,x,k)
sympy.transforms.SineCosineTypeTransform._compute_transform(self,f,x,k,**hints)
sympy.transforms._default_integrator(f,x)
sympy.transforms._fourier_transform(f,x,k,a,b,name,simplify=True)
sympy.transforms._hankel_transform(f,r,k,nu,name,simplify=True)
sympy.transforms._inverse_laplace_transform(F,s,t_,plane,simplify=True)
sympy.transforms._inverse_mellin_transform(F,s,x_,strip,as_meijerg=False)
sympy.transforms._laplace_transform(f,t,s_,simplify=True)
sympy.transforms._mellin_transform(f,x,s_,integrator=_default_integrator,simplify=True)
sympy.transforms._noconds_(default)
sympy.transforms._rewrite_gamma(f,s,a,b)
sympy.transforms._rewrite_sin(m_n,s,a,b)
sympy.transforms._simplify(expr,doit)
sympy.transforms._simplifyconds(expr,s,a)
sympy.transforms._sine_cosine_transform(f,x,k,a,b,K,name,simplify=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/quadrature.py----------------------------------------
A:sympy.integrals.quadrature.x->Dummy('x')
A:sympy.integrals.quadrature.p->jacobi_poly(n, alpha, beta, x, polys=True)
A:sympy.integrals.quadrature.pd->jacobi_poly(n, alpha, beta, x, polys=True).diff(x)
A:sympy.integrals.quadrature.r->r.eval_rational(S(1) / 10 ** (n_digits + 2)).eval_rational(S(1) / 10 ** (n_digits + 2))
A:sympy.integrals.quadrature.p1->laguerre_poly(n - 1, x, alpha=alpha, polys=True)
A:sympy.integrals.quadrature.p2->laguerre_poly(n - 1, x, alpha=alpha + 1, polys=True)
A:sympy.integrals.quadrature.pn->jacobi_poly(n + 1, alpha, beta, x, polys=True)
sympy.integrals.quadrature.gauss_chebyshev_t(n,n_digits)
sympy.integrals.quadrature.gauss_chebyshev_u(n,n_digits)
sympy.integrals.quadrature.gauss_gen_laguerre(n,alpha,n_digits)
sympy.integrals.quadrature.gauss_hermite(n,n_digits)
sympy.integrals.quadrature.gauss_jacobi(n,alpha,beta,n_digits)
sympy.integrals.quadrature.gauss_laguerre(n,n_digits)
sympy.integrals.quadrature.gauss_legendre(n,n_digits)
sympy.quadrature.gauss_chebyshev_t(n,n_digits)
sympy.quadrature.gauss_chebyshev_u(n,n_digits)
sympy.quadrature.gauss_gen_laguerre(n,alpha,n_digits)
sympy.quadrature.gauss_hermite(n,n_digits)
sympy.quadrature.gauss_jacobi(n,alpha,beta,n_digits)
sympy.quadrature.gauss_laguerre(n,n_digits)
sympy.quadrature.gauss_legendre(n,n_digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/meijerint.py----------------------------------------
A:sympy.integrals.meijerint.z->Dummy('z')
A:sympy.integrals.meijerint.(p, q, a, b, c)->list(map(wild, 'pqabc'))
A:sympy.integrals.meijerint.n->Wild('n', properties=[lambda x: x.is_Integer and x > 0])
A:sympy.integrals.meijerint.arg->list(f.args).pop()
A:sympy.integrals.meijerint.timeit->timethis('meijerg')
A:sympy.integrals.meijerint.(c, m)->Mul(*newargs).as_coeff_mul(x)
A:sympy.integrals.meijerint.res->res.subs(t, t + shift).subs(t, t + shift)
A:sympy.integrals.meijerint.m->_my_unpolarify(_clean(expr)).match(unbranched_argument(polar_lift(p) ** q))
A:sympy.integrals.meijerint.innermost->_find_splitting_points(f, x)
A:sympy.integrals.meijerint.fac->S(1)
A:sympy.integrals.meijerint.po->S(1)
A:sympy.integrals.meijerint.g->_rewrite_single(g, x, recursive)
A:sympy.integrals.meijerint.f->Mul(*newargs)
A:sympy.integrals.meijerint.args->list(f.args)
A:sympy.integrals.meijerint.(c, t)->expand_mul(a.base).as_coeff_mul(x)
A:sympy.integrals.meijerint.gs->_rewrite1(f, x)
A:sympy.integrals.meijerint.v->S(len(g.ap) - len(g.bq))
A:sympy.integrals.meijerint.p->S(a.p)
A:sympy.integrals.meijerint.q->S(a.q)
A:sympy.integrals.meijerint.(D, g)->_inflate_g(g, q)
A:sympy.integrals.meijerint.d->Dummy('x')
A:sympy.integrals.meijerint._dummies[name, token]->Dummy(name, **kwargs)
A:sympy.integrals.meijerint.cond->cond.subs(t, t + shift).subs(t, t + shift)
A:sympy.integrals.meijerint.(p, q, r)->symbols('p q r', cls=Wild)
A:sympy.integrals.meijerint.(_, s)->_get_coeff_exp(po, x)
A:sympy.integrals.meijerint.(a, b)->_get_coeff_exp(arg.exp, x)
A:sympy.integrals.meijerint.period->_rewrite_single(g, x, recursive).get_period()
A:sympy.integrals.meijerint.a->_dummy_('a', 'rewrite-single')
A:sympy.integrals.meijerint.(eta, _)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(m, n, p, q)->S([len(g.bm), len(g.an), len(g.ap), len(g.bq)])
A:sympy.integrals.meijerint.cond_3->And(*tmp)
A:sympy.integrals.meijerint.cond_3_star->And(*tmp)
A:sympy.integrals.meijerint.case_extra->And(*case_extra)
A:sympy.integrals.meijerint.case_extra_2->And(*case_extra_2)
A:sympy.integrals.meijerint.per->_rewrite_single(g, x, recursive).get_period()
A:sympy.integrals.meijerint.(_, b1)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(_, b2)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.g1->_rewrite_single(fac1, x, recursive)
A:sympy.integrals.meijerint.g2->_rewrite_single(fac2, x, recursive)
A:sympy.integrals.meijerint.tau->ilcm(m1 * n2, m2 * n1)
A:sympy.integrals.meijerint.(C1, g1)->_inflate_g(g1, r1)
A:sympy.integrals.meijerint.(C2, g2)->_inflate_g(g2, r2)
A:sympy.integrals.meijerint.(a1, b)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(a2, _)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.(sigma, _)->_get_coeff_exp(g1.argument, x)
A:sympy.integrals.meijerint.(omega, _)->_get_coeff_exp(g2.argument, x)
A:sympy.integrals.meijerint.(s, t, u, v)->S([len(g1.bm), len(g1.an), len(g1.ap), len(g1.bq)])
A:sympy.integrals.meijerint.lambda_s->Piecewise((lambda_s0(+1, +1) * lambda_s0(-1, -1), And(Eq(arg(sigma), 0), Eq(arg(omega), 0))), (lambda_s0(sign(arg(omega)), +1) * lambda_s0(sign(arg(omega)), -1), And(Eq(arg(sigma), 0), Ne(arg(omega), 0))), (lambda_s0(+1, sign(arg(sigma))) * lambda_s0(-1, sign(arg(sigma))), And(Ne(arg(sigma), 0), Eq(arg(omega), 0))), (lambda_s0(sign(arg(omega)), sign(arg(sigma))), True))
A:sympy.integrals.meijerint.c2->And(*tmp)
A:sympy.integrals.meijerint.c3->And(*tmp)
A:sympy.integrals.meijerint.c4->And(*tmp)
A:sympy.integrals.meijerint.c5->And(*tmp)
A:sympy.integrals.meijerint.c6->And(*tmp)
A:sympy.integrals.meijerint.c7->And(*tmp)
A:sympy.integrals.meijerint.c11->Eq(abs(arg(sigma)), bstar * pi)
A:sympy.integrals.meijerint.c13->Eq(abs(arg(omega)), cstar * pi)
A:sympy.integrals.meijerint.z0->exp(-(bstar + cstar) * pi * I)
A:sympy.integrals.meijerint.zos->unpolarify(z0 * omega / sigma)
A:sympy.integrals.meijerint.zso->unpolarify(z0 * sigma / omega)
A:sympy.integrals.meijerint.c14->Or(c14, c14_alt)
A:sympy.integrals.meijerint.c14_alt->And(Eq(phi, 0), cstar - 1 + bstar <= 0, Or(And(Ne(zso, 1), abs(arg_(1 - zso)) < pi), And(re(mu + rho + q - p) < 1, Eq(zso, 1))))
A:sympy.integrals.meijerint.c15->Or(*tmp)
A:sympy.integrals.meijerint.mt1_exists->_check_antecedents_1(g1, x, helper=True)
A:sympy.integrals.meijerint.mt2_exists->_check_antecedents_1(g2, x, helper=True)
A:sympy.integrals.meijerint.r->_rewrite_saxena(fac * C1 * C2, po * x ** (s1 + s2), f1, f2, x, full_pb)
A:sympy.integrals.meijerint.(_, e)->_get_coeff_exp(z, x)
A:sympy.integrals.meijerint.(coeff, exponent)->_get_coeff_exp(z, x)
A:sympy.integrals.meijerint.(b, a)->_get_coeff_exp(g.argument, x)
A:sympy.integrals.meijerint.(C, g)->_inflate_fox_h(meijerg(g.an, g.aother, g.bm, g.bother, b / t ** a), -a)
A:sympy.integrals.meijerint.(coeff, m)->factor(f.argument, x).as_coeff_mul(x)
A:sympy.integrals.meijerint.t->Dummy('t', polar=True)
A:sympy.integrals.meijerint.subs->Mul(*newargs).match(formula, old=True)
A:sympy.integrals.meijerint.subs_[fro]->unpolarify(polarify(to, lift=True), exponents_only=True)
A:sympy.integrals.meijerint.hint->hint.subs(subs).subs(subs)
A:sympy.integrals.meijerint.terms->terms(subs)
A:sympy.integrals.meijerint.r1->_get_coeff_exp(unpolarify(fac.subs(subs).subs(z, x), exponents_only=True), x)
A:sympy.integrals.meijerint.s->_dummy('s', 'rewrite-single', f)
A:sympy.integrals.meijerint.(F, strip, _)->mellin_transform(f.subs(x, a * x), x, s, integrator=my_integrator, needeval=True, simplify=False)
A:sympy.integrals.meijerint.(fac, po, g)->_split_mul(f, x)
A:sympy.integrals.meijerint.l->list(ordered(l, [lambda p: max(len(_exponents(p[0], x)), len(_exponents(p[1], x))), lambda p: max(len(_functions(p[0], x)), len(_functions(p[1], x))), lambda p: max(len(_find_splitting_points(p[0], x)), len(_find_splitting_points(p[1], x)))]))
A:sympy.integrals.meijerint.(_, c)->_get_coeff_exp(po, x)
A:sympy.integrals.meijerint.expr->_my_unpolarify(_clean(expr))
A:sympy.integrals.meijerint.res1->_meijerint_definite_2(f.subs(x, x + c), x)
A:sympy.integrals.meijerint.res2->_meijerint_definite_2(f.subs(x, c - x), x)
A:sympy.integrals.meijerint.phi->exp(I * arg(b))
A:sympy.integrals.meijerint.b->abs(b)
A:sympy.integrals.meijerint.expanded->expand_mul(expand_trig(res[-1][0]))
A:sympy.integrals.meijerint.dummy->_dummy('x', 'meijerint-definite2', f, positive=True)
A:sympy.integrals.meijerint.c->Dummy('c')
A:sympy.integrals.meijerint.(C, f)->_rewrite_inversion(fac * C, po * x ** s, f, x)
A:sympy.integrals.meijerint.arg2->expand(arg)
A:sympy.integrals.meijerint.shift->Add(*exponentials)
sympy.integrals.meijerint._CoeffExpValueError(ValueError)
sympy.integrals.meijerint._check_antecedents(g1,g2,x)
sympy.integrals.meijerint._check_antecedents_1(g,x,helper=False)
sympy.integrals.meijerint._check_antecedents_inversion(g,x)
sympy.integrals.meijerint._condsimp(cond)
sympy.integrals.meijerint._create_lookup_table(table)
sympy.integrals.meijerint._dummy(name,token,expr,**kwargs)
sympy.integrals.meijerint._dummy_(name,token,**kwargs)
sympy.integrals.meijerint._eval_cond(cond)
sympy.integrals.meijerint._exponents(expr,x)
sympy.integrals.meijerint._find_splitting_points(expr,x)
sympy.integrals.meijerint._flip_g(g)
sympy.integrals.meijerint._functions(expr,x)
sympy.integrals.meijerint._get_coeff_exp(expr,x)
sympy.integrals.meijerint._guess_expansion(f,x)
sympy.integrals.meijerint._inflate_fox_h(g,a)
sympy.integrals.meijerint._inflate_g(g,n)
sympy.integrals.meijerint._int0oo(g1,g2,x)
sympy.integrals.meijerint._int0oo_1(g,x)
sympy.integrals.meijerint._int_inversion(g,x,t)
sympy.integrals.meijerint._is_analytic(f,x)
sympy.integrals.meijerint._meijerint_definite_2(f,x)
sympy.integrals.meijerint._meijerint_definite_3(f,x)
sympy.integrals.meijerint._meijerint_definite_4(f,x,only_double=False)
sympy.integrals.meijerint._meijerint_indefinite_1(f,x)
sympy.integrals.meijerint._mul_args(f)
sympy.integrals.meijerint._mul_as_two_parts(f)
sympy.integrals.meijerint._my_principal_branch(expr,period,full_pb=False)
sympy.integrals.meijerint._my_unpolarify(f)
sympy.integrals.meijerint._mytype(f,x)
sympy.integrals.meijerint._rewrite1(f,x,recursive=True)
sympy.integrals.meijerint._rewrite2(f,x)
sympy.integrals.meijerint._rewrite_inversion(fac,po,g,x)
sympy.integrals.meijerint._rewrite_saxena(fac,po,g1,g2,x,full_pb=False)
sympy.integrals.meijerint._rewrite_saxena_1(fac,po,g,x)
sympy.integrals.meijerint._rewrite_single(f,x,recursive=True)
sympy.integrals.meijerint._split_mul(f,x)
sympy.integrals.meijerint.meijerint_definite(f,x,a,b)
sympy.integrals.meijerint.meijerint_indefinite(f,x)
sympy.integrals.meijerint.meijerint_inversion(f,x,t)
sympy.meijerint._CoeffExpValueError(ValueError)
sympy.meijerint._check_antecedents(g1,g2,x)
sympy.meijerint._check_antecedents_1(g,x,helper=False)
sympy.meijerint._check_antecedents_inversion(g,x)
sympy.meijerint._condsimp(cond)
sympy.meijerint._create_lookup_table(table)
sympy.meijerint._dummy(name,token,expr,**kwargs)
sympy.meijerint._dummy_(name,token,**kwargs)
sympy.meijerint._eval_cond(cond)
sympy.meijerint._exponents(expr,x)
sympy.meijerint._find_splitting_points(expr,x)
sympy.meijerint._flip_g(g)
sympy.meijerint._functions(expr,x)
sympy.meijerint._get_coeff_exp(expr,x)
sympy.meijerint._guess_expansion(f,x)
sympy.meijerint._inflate_fox_h(g,a)
sympy.meijerint._inflate_g(g,n)
sympy.meijerint._int0oo(g1,g2,x)
sympy.meijerint._int0oo_1(g,x)
sympy.meijerint._int_inversion(g,x,t)
sympy.meijerint._is_analytic(f,x)
sympy.meijerint._meijerint_definite_2(f,x)
sympy.meijerint._meijerint_definite_3(f,x)
sympy.meijerint._meijerint_definite_4(f,x,only_double=False)
sympy.meijerint._meijerint_indefinite_1(f,x)
sympy.meijerint._mul_args(f)
sympy.meijerint._mul_as_two_parts(f)
sympy.meijerint._my_principal_branch(expr,period,full_pb=False)
sympy.meijerint._my_unpolarify(f)
sympy.meijerint._mytype(f,x)
sympy.meijerint._rewrite1(f,x,recursive=True)
sympy.meijerint._rewrite2(f,x)
sympy.meijerint._rewrite_inversion(fac,po,g,x)
sympy.meijerint._rewrite_saxena(fac,po,g1,g2,x,full_pb=False)
sympy.meijerint._rewrite_saxena_1(fac,po,g,x)
sympy.meijerint._rewrite_single(f,x,recursive=True)
sympy.meijerint._split_mul(f,x)
sympy.meijerint.meijerint_definite(f,x,a,b)
sympy.meijerint.meijerint_indefinite(f,x)
sympy.meijerint.meijerint_inversion(f,x,t)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/meijerint_doc.py----------------------------------------
A:sympy.integrals.meijerint_doc.g->Add(*[fac * f for (fac, f) in gs])
A:sympy.integrals.meijerint_doc.obj->Eq(formula, g)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/integrals.py----------------------------------------
A:sympy.integrals.integrals.obj->sympy.concrete.expr_with_limits.AddWithLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.integrals.integrals.d->Dummy('d')
A:sympy.integrals.integrals.xfree->x.free_symbols.intersection(self.variables)
A:sympy.integrals.integrals.u->Dummy('u')
A:sympy.integrals.integrals.uvar->ufree.pop()
A:sympy.integrals.integrals.soln->solve(u - x, xvar, check=False)
A:sympy.integrals.integrals.(pdiff, reps)->posify(u - x)
A:sympy.integrals.integrals.puvar->ufree.pop().subs([(v, k) for (k, v) in reps.items()])
A:sympy.integrals.integrals.newfuncs->set([(self.function.subs(xvar, fi) * fi.diff(d)).subs(d, uvar) for fi in f])
A:sympy.integrals.integrals.newfunc->set([(self.function.subs(xvar, fi) * fi.diff(d)).subs(d, uvar) for fi in f]).pop()
A:sympy.integrals.integrals.wok->sympify(field).subs(d, a)
A:sympy.integrals.integrals.avals->list(set([_calc_limit_1(Fi, a, b) for Fi in F]))
A:sympy.integrals.integrals.a->Wild('a', exclude=[x])
A:sympy.integrals.integrals.deep->hints.get('deep', True)
A:sympy.integrals.integrals.meijerg->kwargs.pop('meijerg', None)
A:sympy.integrals.integrals.conds->kwargs.pop('conds', 'piecewise')
A:sympy.integrals.integrals.risch->kwargs.pop('risch', None)
A:sympy.integrals.integrals.manual->kwargs.pop('manual', None)
A:sympy.integrals.integrals.function->self.as_dummy().func(*[function] + [xab])
A:sympy.integrals.integrals.ulj->set()
A:sympy.integrals.integrals.uli->xab[1].free_symbols.union(xab[2].free_symbols)
A:sympy.integrals.integrals.factored_function->self.as_dummy().func(*[function] + [xab]).factor()
A:sympy.integrals.integrals.res->meijerint_definite(function, x, a, b)
A:sympy.integrals.integrals.ret->try_meijerg(function, xab)
A:sympy.integrals.integrals.antideriv->antideriv.as_expr().as_expr()
A:sympy.integrals.integrals.b->Wild('b', exclude=[x])
A:sympy.integrals.integrals.gens->list(antideriv.gens)
A:sympy.integrals.integrals.limit->limits.pop(-1)
A:sympy.integrals.integrals.f->f.expand(mul=True, deep=False).expand(mul=True, deep=False)
A:sympy.integrals.integrals.dab_dsym->diff(ab, sym)
A:sympy.integrals.integrals.arg->f.expand(mul=True, deep=False).expand(mul=True, deep=False).subs(x, u).diff(sym).subs(u, x)
A:sympy.integrals.integrals.result->self.as_dummy().function.limit(sym, lower_limit)
A:sympy.integrals.integrals.poly->f.expand(mul=True, deep=False).expand(mul=True, deep=False).as_poly(x)
A:sympy.integrals.integrals.(result, i)->risch_integrate(f, x, separate_integral=True, conds=conds)
A:sympy.integrals.integrals.args->sympy.core.add.Add.make_args(f)
A:sympy.integrals.integrals.(coeff, g)->g.as_independent(x)
A:sympy.integrals.integrals.order_term->g.getO()
A:sympy.integrals.integrals.h->meijerint_indefinite(g, x)
A:sympy.integrals.integrals.h_order_expr->self.as_dummy()._eval_integral(order_term.expr, x)
A:sympy.integrals.integrals.h_order_term->g.getO().func(h_order_expr, *order_term.variables)
A:sympy.integrals.integrals.M->g.base.match(a * x + b)
A:sympy.integrals.integrals.h1->sympy.core.basic.C.log(g.base)
A:sympy.integrals.integrals.(h, i)->risch_integrate(g, x, separate_integral=True, conds=conds)
A:sympy.integrals.integrals.self->self.as_dummy().as_dummy()
A:sympy.integrals.integrals.(terms, order)->self.as_dummy().as_dummy().function.nseries(x=symb, n=n, logx=logx).as_coeff_add(C.Order)
A:sympy.integrals.integrals.l->self.as_dummy().as_dummy().function.limit(sym, lower_limit)
A:sympy.integrals.integrals.r->self.as_dummy().as_dummy().function.limit(sym, upper_limit, '-')
A:sympy.integrals.integrals.integral->Integral(Ft, curve.limits).doit(deep=False)
A:sympy.integrals.integrals.F->sympify(field)
A:sympy.integrals.integrals._dn->diff(_f, curve.parameter)
A:sympy.integrals.integrals.Ft->Ft.subs(var, _f).subs(var, _f)
sympy.Integral(cls,function,*symbols,**assumptions)
sympy.Integral.__getnewargs__(self)
sympy.Integral._eval_derivative(self,sym)
sympy.Integral._eval_integral(self,f,x,meijerg=None,risch=None,manual=None,conds='piecewise')
sympy.Integral._eval_is_zero(self)
sympy.Integral._eval_lseries(self,x,logx)
sympy.Integral._eval_nseries(self,x,n,logx)
sympy.Integral.as_sum(self,n,method='midpoint')
sympy.Integral.doit(self,**hints)
sympy.Integral.free_symbols(self)
sympy.Integral.transform(self,x,u)
sympy.integrals.integrals.Integral(cls,function,*symbols,**assumptions)
sympy.integrals.integrals.Integral.__getnewargs__(self)
sympy.integrals.integrals.Integral.__new__(cls,function,*symbols,**assumptions)
sympy.integrals.integrals.Integral._eval_derivative(self,sym)
sympy.integrals.integrals.Integral._eval_integral(self,f,x,meijerg=None,risch=None,manual=None,conds='piecewise')
sympy.integrals.integrals.Integral._eval_is_zero(self)
sympy.integrals.integrals.Integral._eval_lseries(self,x,logx)
sympy.integrals.integrals.Integral._eval_nseries(self,x,n,logx)
sympy.integrals.integrals.Integral.as_sum(self,n,method='midpoint')
sympy.integrals.integrals.Integral.doit(self,**hints)
sympy.integrals.integrals.Integral.free_symbols(self)
sympy.integrals.integrals.Integral.transform(self,x,u)
sympy.integrals.integrals.integrate(*args,**kwargs)
sympy.integrals.integrals.line_integrate(field,curve,vars)
sympy.integrate(*args,**kwargs)
sympy.line_integrate(field,curve,vars)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/deltafunctions.py----------------------------------------
A:sympy.integrals.deltafunctions.(c, nc)->node.args_cnc()
A:sympy.integrals.deltafunctions.sorted_args->sorted(c, key=default_sort_key)
A:sympy.integrals.deltafunctions.nnode->Mul(*new_args).expand()
A:sympy.integrals.deltafunctions.h->f.simplify(x)
A:sympy.integrals.deltafunctions.fh->integrate(rest_mult, x)
A:sympy.integrals.deltafunctions.g->f.expand()
A:sympy.integrals.deltafunctions.(dg, rest_mult)->change_mul(f, x)
A:sympy.integrals.deltafunctions.dg->dg.simplify(x).simplify(x)
A:sympy.integrals.deltafunctions.(dg, rest_mult_2)->change_mul(dg, x)
sympy.deltafunctions.change_mul(node,x)
sympy.deltafunctions.deltaintegrate(f,x)
sympy.integrals.deltafunctions.change_mul(node,x)
sympy.integrals.deltafunctions.deltaintegrate(f,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/prde.py----------------------------------------
A:sympy.integrals.prde.(dn, ds)->splitfactor(fd, DE)
A:sympy.integrals.prde.(Gas, Gds)->list(zip(*G))
A:sympy.integrals.prde.gd->reduce(lambda i, j: i.lcm(j), Gds, Poly(1, DE.t))
A:sympy.integrals.prde.(en, es)->splitfactor(gd, DE)
A:sympy.integrals.prde.p->p.as_poly(DE.t).as_poly(DE.t)
A:sympy.integrals.prde.h->en.gcd(en.diff(DE.t)).quo(p.gcd(p.diff(DE.t)))
A:sympy.integrals.prde.(ba, bd)->ba.as_poly(gen).as_dict().cancel(fd, include=True)
A:sympy.integrals.prde.bd->(bd_real * bd_real + bd_imag * bd_imag).as_poly(gen)
A:sympy.integrals.prde.ba->ba.as_poly(gen).as_dict().as_poly(gen).as_dict()
A:sympy.integrals.prde.bd_real->sum((r for r in denom_real))
A:sympy.integrals.prde.bd_imag->sum((r for r in denom_imag))
A:sympy.integrals.prde.ba_real->sum((r for r in num_real))
A:sympy.integrals.prde.ba_imag->sum((r for r in num_imag))
A:sympy.integrals.prde.B->max(0, derivation(DE.t, DE).degree(DE.t) - 1)
A:sympy.integrals.prde.nc->min([order_at(Ga, p, DE.t) - order_at(Gd, p, DE.t) for (Ga, Gd) in G])
A:sympy.integrals.prde.n->reduce(ilcm, [i.as_numer_denom()[1] for (_, i) in residueterms], S(1))
A:sympy.integrals.prde.dcoeff->DE.d.quo(Poly(DE.t ** 2 + 1, DE.t))
A:sympy.integrals.prde.(alphaa, alphad)->frac_in(-ba.eval(0) / bd.eval(0) / a.eval(0), DE.t)
A:sympy.integrals.prde.(etaa, etad)->frac_in(dcoeff, DE.t)
A:sympy.integrals.prde.A->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto')
A:sympy.integrals.prde.(betaa, alphaa, alphad)->real_imag(ba, bd * a, DE.t)
A:sympy.integrals.prde.N->max([ri.degree(DE.t) for (_, ri) in Q])
A:sympy.integrals.prde.m->len(Q)
A:sympy.integrals.prde.(Gns, Gds)->list(zip(*G))
A:sympy.integrals.prde.d->Poly(d, field=True)
A:sympy.integrals.prde.M->Matrix(dc + 1, m, lambda i, j: Q[j].nth(i))
A:sympy.integrals.prde.(qs, _)->list(zip(*Q))
A:sympy.integrals.prde.Au->Au.applyfunc(cancel).applyfunc(cancel)
A:sympy.integrals.prde.Rm1->Rm1.applyfunc(cancel).applyfunc(cancel)
A:sympy.integrals.prde.um1->cancel(derivation(u[i], DE, basic=True) / derivation(A[i, j], DE, basic=True))
A:sympy.integrals.prde.u->cancel(u ** m * Mul(*[Pow(i, j) for (i, j) in residueterms]))
A:sympy.integrals.prde.(R, Z)->list(zip(*[gcdex_diophantine(b, a, qi) for qi in Q]))
A:sympy.integrals.prde.R->list(R)
A:sympy.integrals.prde.db->b.degree(DE.t)
A:sympy.integrals.prde.sitn->Poly(si * DE.t ** N, DE.t)
A:sympy.integrals.prde.dc->max([qi.degree(DE.t) for qi in Q])
A:sympy.integrals.prde.(A, u)->constant_system(lhs, rhs, DE)
A:sympy.integrals.prde.c->lcm(fd.as_poly(DE.t).LC(), wd.as_poly(DE.t).LC())
A:sympy.integrals.prde.si->Poly(Q[i].nth(b.degree(DE.t)) / b.LC(), DE.t)
A:sympy.integrals.prde.(_, (fa, fd))->weak_normalizer(fa, fd, DE)
A:sympy.integrals.prde.(a, (ba, bd), G, hn)->prde_normal_denom(ga, gd, G, DE)
A:sympy.integrals.prde.(A, B, G, hs)->prde_special_denom(a, ba, bd, G, DE)
A:sympy.integrals.prde.g->is_log_deriv_k_t_radical_in_field(pa, pd, DE, case='auto').gcd(B)
A:sympy.integrals.prde.(Q, M)->prde_linear_constraints(A, B, V, DE)
A:sympy.integrals.prde.(M, _)->constant_system(M, zeros(M.rows, 1), DE)
A:sympy.integrals.prde.(A, B, Q, R, n1)->prde_spde(A, B, Q, n, DE)
A:sympy.integrals.prde.(En, Es)->list(zip(*E))
A:sympy.integrals.prde.hn->lcm(fd.as_poly(DE.t).LC(), wd.as_poly(DE.t).LC()).gcd(c.diff(DE.t))
A:sympy.integrals.prde.hs->reduce(lambda i, j: i.lcm(j), (ds,) + Es)
A:sympy.integrals.prde.mu->min(order_at_oo(fa, fd, DE.t), min([order_at_oo(ga, gd, DE.t) for (ga, gd) in G]))
A:sympy.integrals.prde.(A, B, h, N, g, V)->limited_integrate_reduce(fa, fd, G, DE)
A:sympy.integrals.prde.l->Matrix(dc + 1, m, lambda i, j: Q[j].nth(i)).nullspace()
A:sympy.integrals.prde.C->max(p.degree(DE.t), q.degree(DE.t))
A:sympy.integrals.prde.(B, C, m, alpha, beta)->spde(A, B, C, N, DE)
A:sympy.integrals.prde.y->solve_poly_rde(B, C, m, DE)
A:sympy.integrals.prde.(p, a)->fa.div(fd)
A:sympy.integrals.prde.(q, b)->wa.div(wd)
A:sympy.integrals.prde.s->solve(eqs, c1)
A:sympy.integrals.prde.(N, M)->s[c1].as_numer_denom()
A:sympy.integrals.prde.Qv->is_log_deriv_k_t_radical_in_field(nfmwa, nfmwd, DE)
A:sympy.integrals.prde.(ln, ls)->splitfactor(l, DE)
A:sympy.integrals.prde.(u1, r1)->(fa * l.quo(fd)).div(z)
A:sympy.integrals.prde.(u2, r2)->(wa * l.quo(wd)).div(z)
A:sympy.integrals.prde.(M, N)->s[c1].as_numer_denom()
A:sympy.integrals.prde.(dfa, dfd)->(fd * derivation(fa, DE) - fa * derivation(fd, DE)).cancel(fd ** 2, include=True)
A:sympy.integrals.prde.lhs->Matrix([E_part + L_part])
A:sympy.integrals.prde.rhs->Matrix([dfa.as_expr() / dfd.as_expr()])
A:sympy.integrals.prde.ans->list(zip(terms, u))
A:sympy.integrals.prde.result->Mul(*[Pow(i, j) for (i, j) in ans])
A:sympy.integrals.prde.(icoeff, iterms)->sqf_list(i)
A:sympy.integrals.prde.const->cancel(fa.as_expr() / fd.as_expr() - Add(*[Mul(i, j / n) for (i, j) in zip(argterms, u)]))
A:sympy.integrals.prde.(fa, fd)->fa.cancel(fd, include=True)
A:sympy.integrals.prde.(n, s)->splitfactor(fd, DE)
A:sympy.integrals.prde.(H, b)->residue_reduce(fa, fd, DE, z=z)
A:sympy.integrals.prde.(wa, wd)->frac_in((wa, wd), DE.t)
A:sympy.integrals.prde.(pa, pd)->frac_in(p, DE.t)
A:sympy.integrals.prde.common_denom->reduce(ilcm, [i.as_numer_denom()[1] for i in [j for (_, j) in residueterms]] + [n], S(1))
sympy.integrals.prde.constant_system(A,u,DE)
sympy.integrals.prde.is_deriv_k(fa,fd,DE)
sympy.integrals.prde.is_log_deriv_k_t_radical(fa,fd,DE,Df=True)
sympy.integrals.prde.is_log_deriv_k_t_radical_in_field(fa,fd,DE,case='auto',z=None)
sympy.integrals.prde.limited_integrate(fa,fd,G,DE)
sympy.integrals.prde.limited_integrate_reduce(fa,fd,G,DE)
sympy.integrals.prde.param_rischDE(fa,fd,G,DE)
sympy.integrals.prde.parametric_log_deriv(fa,fd,wa,wd,DE)
sympy.integrals.prde.parametric_log_deriv_heu(fa,fd,wa,wd,DE,c1=None)
sympy.integrals.prde.prde_linear_constraints(a,b,G,DE)
sympy.integrals.prde.prde_no_cancel_b_large(b,Q,n,DE)
sympy.integrals.prde.prde_no_cancel_b_small(b,Q,n,DE)
sympy.integrals.prde.prde_normal_denom(fa,fd,G,DE)
sympy.integrals.prde.prde_spde(a,b,Q,n,DE)
sympy.integrals.prde.prde_special_denom(a,ba,bd,G,DE,case='auto')
sympy.integrals.prde.real_imag(ba,bd,gen)
sympy.prde.constant_system(A,u,DE)
sympy.prde.is_deriv_k(fa,fd,DE)
sympy.prde.is_log_deriv_k_t_radical(fa,fd,DE,Df=True)
sympy.prde.is_log_deriv_k_t_radical_in_field(fa,fd,DE,case='auto',z=None)
sympy.prde.limited_integrate(fa,fd,G,DE)
sympy.prde.limited_integrate_reduce(fa,fd,G,DE)
sympy.prde.param_rischDE(fa,fd,G,DE)
sympy.prde.parametric_log_deriv(fa,fd,wa,wd,DE)
sympy.prde.parametric_log_deriv_heu(fa,fd,wa,wd,DE,c1=None)
sympy.prde.prde_linear_constraints(a,b,G,DE)
sympy.prde.prde_no_cancel_b_large(b,Q,n,DE)
sympy.prde.prde_no_cancel_b_small(b,Q,n,DE)
sympy.prde.prde_normal_denom(fa,fd,G,DE)
sympy.prde.prde_spde(a,b,Q,n,DE)
sympy.prde.prde_special_denom(a,ba,bd,G,DE,case='auto')
sympy.prde.real_imag(ba,bd,gen)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_failing_integrals.py----------------------------------------
A:sympy.integrals.tests.test_failing_integrals.r->eval(test)
sympy.integrals.tests.test_failing_integrals.TimeOutError(Exception)
sympy.integrals.tests.test_failing_integrals.run_with_timeout(test,time)
sympy.integrals.tests.test_failing_integrals.test_issue_1638b()
sympy.integrals.tests.test_failing_integrals.test_issue_1796a()
sympy.integrals.tests.test_failing_integrals.test_issue_3880()
sympy.integrals.tests.test_failing_integrals.test_issue_4212()
sympy.integrals.tests.test_failing_integrals.test_issue_4326()
sympy.integrals.tests.test_failing_integrals.test_issue_4491()
sympy.integrals.tests.test_failing_integrals.test_issue_4511()
sympy.integrals.tests.test_failing_integrals.test_issue_4514()
sympy.integrals.tests.test_failing_integrals.test_issue_4525()
sympy.integrals.tests.test_failing_integrals.test_issue_4540()
sympy.integrals.tests.test_failing_integrals.test_issue_4551()
sympy.integrals.tests.test_failing_integrals.test_issue_4737a()
sympy.integrals.tests.test_failing_integrals.test_issue_4891()
sympy.integrals.tests.test_failing_integrals.test_issue_4895b()
sympy.integrals.tests.test_failing_integrals.test_issue_4895c()
sympy.integrals.tests.test_failing_integrals.test_issue_4895d()
sympy.integrals.tests.test_failing_integrals.test_issue_4941()
sympy.integrals.tests.test_failing_integrals.test_issue_4950()
sympy.integrals.tests.test_failing_integrals.test_issue_4968()
sympy.integrals.tests.test_failing_integrals.test_issue_4992()
sympy.integrals.tests.test_failing_integrals.timeout(signum,frame,time)
sympy.tests.test_failing_TimeOutError(Exception)
sympy.tests.test_failing_run_with_timeout(test,time)
sympy.tests.test_failing_test_issue_1638b()
sympy.tests.test_failing_test_issue_1796a()
sympy.tests.test_failing_test_issue_3880()
sympy.tests.test_failing_test_issue_4212()
sympy.tests.test_failing_test_issue_4326()
sympy.tests.test_failing_test_issue_4491()
sympy.tests.test_failing_test_issue_4511()
sympy.tests.test_failing_test_issue_4514()
sympy.tests.test_failing_test_issue_4525()
sympy.tests.test_failing_test_issue_4540()
sympy.tests.test_failing_test_issue_4551()
sympy.tests.test_failing_test_issue_4737a()
sympy.tests.test_failing_test_issue_4891()
sympy.tests.test_failing_test_issue_4895b()
sympy.tests.test_failing_test_issue_4895c()
sympy.tests.test_failing_test_issue_4895d()
sympy.tests.test_failing_test_issue_4941()
sympy.tests.test_failing_test_issue_4950()
sympy.tests.test_failing_test_issue_4968()
sympy.tests.test_failing_test_issue_4992()
sympy.tests.test_failing_timeout(signum,frame,time)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_transforms.py----------------------------------------
A:sympy.integrals.tests.test_transforms.(nu, beta, rho)->symbols('nu beta rho')
A:sympy.integrals.tests.test_transforms.f->Function('f')
A:sympy.integrals.tests.test_transforms.bpos->symbols('b', positive=True)
A:sympy.integrals.tests.test_transforms.bneg->symbols('b', negative=True)
A:sympy.integrals.tests.test_transforms.mt->MT(exp(-x / 2) * besselk(a, x / 2), x, s)
A:sympy.integrals.tests.test_transforms.mt0->combsimp(trigsimp(combsimp(mt[0].expand(func=True))))
A:sympy.integrals.tests.test_transforms.aneg->Symbol('a', negative=True)
A:sympy.integrals.tests.test_transforms.u->Symbol('u', polar=True)
A:sympy.integrals.tests.test_transforms.r->Symbol('r')
A:sympy.integrals.tests.test_transforms.(_a, _b)->symbols('a b', positive=True)
A:sympy.integrals.tests.test_transforms.nu->Symbol('nu')
A:sympy.integrals.tests.test_transforms.(a, b, c)->symbols('a b c', positive=True, finite=True)
A:sympy.integrals.tests.test_transforms.t->symbols('t')
A:sympy.integrals.tests.test_transforms.w->symbols('w')
A:sympy.integrals.tests.test_transforms.spos->symbols('s', positive=True)
A:sympy.integrals.tests.test_transforms.k->Symbol('k')
A:sympy.integrals.tests.test_transforms.a->symbols('a')
A:sympy.integrals.tests.test_transforms.b->symbols('b', positive=True)
A:sympy.integrals.tests.test_transforms.posk->symbols('posk', positive=True)
A:sympy.integrals.tests.test_transforms.m->Symbol('m')
sympy.integrals.tests.test_transforms.test_as_integral()
sympy.integrals.tests.test_transforms.test_cosine_transform()
sympy.integrals.tests.test_transforms.test_expint()
sympy.integrals.tests.test_transforms.test_fourier_transform()
sympy.integrals.tests.test_transforms.test_free_symbols()
sympy.integrals.tests.test_transforms.test_hankel_transform()
sympy.integrals.tests.test_transforms.test_inverse_laplace_transform()
sympy.integrals.tests.test_transforms.test_inverse_mellin_transform()
sympy.integrals.tests.test_transforms.test_issue_7181()
sympy.integrals.tests.test_transforms.test_laplace_transform()
sympy.integrals.tests.test_transforms.test_mellin_transform()
sympy.integrals.tests.test_transforms.test_mellin_transform_bessel()
sympy.integrals.tests.test_transforms.test_mellin_transform_fail()
sympy.integrals.tests.test_transforms.test_sine_transform()
sympy.integrals.tests.test_transforms.test_undefined_function()
sympy.tests.test_transforms.test_as_integral()
sympy.tests.test_transforms.test_cosine_transform()
sympy.tests.test_transforms.test_expint()
sympy.tests.test_transforms.test_fourier_transform()
sympy.tests.test_transforms.test_free_symbols()
sympy.tests.test_transforms.test_hankel_transform()
sympy.tests.test_transforms.test_inverse_laplace_transform()
sympy.tests.test_transforms.test_inverse_mellin_transform()
sympy.tests.test_transforms.test_issue_7181()
sympy.tests.test_transforms.test_laplace_transform()
sympy.tests.test_transforms.test_mellin_transform()
sympy.tests.test_transforms.test_mellin_transform_bessel()
sympy.tests.test_transforms.test_mellin_transform_fail()
sympy.tests.test_transforms.test_sine_transform()
sympy.tests.test_transforms.test_undefined_function()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_deltafunctions.py----------------------------------------
A:sympy.integrals.tests.test_deltafunctions.f->Function('f')
A:sympy.integrals.tests.test_deltafunctions.(x_1, x_2, x, y, z)->symbols('x_1 x_2 x y z')
A:sympy.integrals.tests.test_deltafunctions.(a, b, c)->symbols('a b c', commutative=False)
sympy.integrals.tests.test_deltafunctions.test_change_mul()
sympy.integrals.tests.test_deltafunctions.test_deltaintegrate()
sympy.tests.test_deltafunctions.test_change_mul()
sympy.tests.test_deltafunctions.test_deltaintegrate()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_integrals.py----------------------------------------
A:sympy.integrals.tests.test_integrals.(x, y, a, t, x_1, x_2, z)->symbols('x y a t x_1 x_2 z')
A:sympy.integrals.tests.test_integrals.n->Symbol('n', integer=True, positive=True)
A:sympy.integrals.tests.test_integrals.f->Piecewise((0, t - 478.515625 * pi < 0), (13.2075145209219 * pi / (0.000871222 * t + 0.995) ** 2, t - 478.515625 * pi >= 0))
A:sympy.integrals.tests.test_integrals.s1->Integral(n, n)
A:sympy.integrals.tests.test_integrals.s2->Integral(n, (n,))
A:sympy.integrals.tests.test_integrals.s3->Integral(Sum(x, (x, 1, y)))
A:sympy.integrals.tests.test_integrals.s4->Integral(n, Tuple(n))
A:sympy.integrals.tests.test_integrals.s5->Integral(n, (n, Interval(1, 2)))
A:sympy.integrals.tests.test_integrals.(A, B)->symbols('A B', commutative=False)
A:sympy.integrals.tests.test_integrals.x->Symbol('x')
A:sympy.integrals.tests.test_integrals.p->Poly(x + x ** 2 * y + y ** 3, x, y)
A:sympy.integrals.tests.test_integrals.b->Symbol('b')
A:sympy.integrals.tests.test_integrals.c->Symbol('c', nonzero=True)
A:sympy.integrals.tests.test_integrals.qx->integrate(p, x)
A:sympy.integrals.tests.test_integrals.qy->integrate(p, y)
A:sympy.integrals.tests.test_integrals.Qx->integrate(p, (x, 0, 1))
A:sympy.integrals.tests.test_integrals.Qy->integrate(p, (y, 0, pi))
A:sympy.integrals.tests.test_integrals.y->Symbol('y', nonzero=True, real=True)
A:sympy.integrals.tests.test_integrals.fid->diff(integrate(f, x), x)
A:sympy.integrals.tests.test_integrals.ans->integrate(exp(-(1 + I) * x), (x, 0, oo))
A:sympy.integrals.tests.test_integrals.M->Matrix(2, 2, lambda i, j: (i + j + 1) * sin((i + j + 1) * x))
A:sympy.integrals.tests.test_integrals.a->Symbol('a', positive=True)
A:sympy.integrals.tests.test_integrals._3->S(3)
A:sympy.integrals.tests.test_integrals.gauss->Integral(exp(-x ** 2), (x, -oo, oo))
A:sympy.integrals.tests.test_integrals.t->Symbol('t')
A:sympy.integrals.tests.test_integrals.e->Integral(cos(x), (x, x)).lseries(x)
A:sympy.integrals.tests.test_integrals.conv->Integral(f(y) * f(y), (y, -oo, oo), (t, x, 1))
A:sympy.integrals.tests.test_integrals.(a, b)->symbols('a b')
A:sympy.integrals.tests.test_integrals.i->Integral(cos(x), (x, x))
A:sympy.integrals.tests.test_integrals.z->Symbol('z', nonzero=True)
A:sympy.integrals.tests.test_integrals.R->Symbol('R', positive=True)
A:sympy.integrals.tests.test_integrals.(k, m)->symbols('k m', integer=True)
A:sympy.integrals.tests.test_integrals.ypos->Symbol('y', positive=True)
A:sympy.integrals.tests.test_integrals.(a, b, c, d)->symbols('a:d', positive=True, finite=True)
A:sympy.integrals.tests.test_integrals.(a, d)->symbols('a d', positive=True)
A:sympy.integrals.tests.test_integrals.(A, z)->symbols('A z')
A:sympy.integrals.tests.test_integrals.g->Function('g')
A:sympy.integrals.tests.test_integrals.(R, b, h)->symbols('R b h')
A:sympy.integrals.tests.test_integrals.x_max->Symbol('x_max')
A:sympy.integrals.tests.test_integrals.integral_f->NonElementaryIntegral(f, (z, 2, 3))
sympy.integrals.tests.test_integrals.NS(e,n=15,**options)
sympy.integrals.tests.test_integrals.diff_test(i)
sympy.integrals.tests.test_integrals.test_as_sum_left()
sympy.integrals.tests.test_integrals.test_as_sum_midpoint1()
sympy.integrals.tests.test_integrals.test_as_sum_midpoint2()
sympy.integrals.tests.test_integrals.test_as_sum_raises()
sympy.integrals.tests.test_integrals.test_as_sum_right()
sympy.integrals.tests.test_integrals.test_atom_bug()
sympy.integrals.tests.test_integrals.test_basics()
sympy.integrals.tests.test_integrals.test_basics_multiple()
sympy.integrals.tests.test_integrals.test_conjugate_transpose()
sympy.integrals.tests.test_integrals.test_constructor()
sympy.integrals.tests.test_integrals.test_doit_integrals()
sympy.integrals.tests.test_integrals.test_evalf_integrals()
sympy.integrals.tests.test_integrals.test_evalf_issue_939()
sympy.integrals.tests.test_integrals.test_expand()
sympy.integrals.tests.test_integrals.test_expand_integral()
sympy.integrals.tests.test_integrals.test_failing_integrals()
sympy.integrals.tests.test_integrals.test_improper_integral()
sympy.integrals.tests.test_integrals.test_integral_reconstruct()
sympy.integrals.tests.test_integrals.test_integrate_DiracDelta()
sympy.integrals.tests.test_integrals.test_integrate_DiracDelta_fails()
sympy.integrals.tests.test_integrals.test_integrate_Piecewise_rational_over_reals()
sympy.integrals.tests.test_integrals.test_integrate_derivatives()
sympy.integrals.tests.test_integrals.test_integrate_functions()
sympy.integrals.tests.test_integrals.test_integrate_linearterm_pow()
sympy.integrals.tests.test_integrals.test_integrate_omit_var()
sympy.integrals.tests.test_integrals.test_integrate_poly()
sympy.integrals.tests.test_integrals.test_integrate_poly_accurately()
sympy.integrals.tests.test_integrals.test_integrate_poly_defined()
sympy.integrals.tests.test_integrals.test_integrate_returns_piecewise()
sympy.integrals.tests.test_integrals.test_integrate_series()
sympy.integrals.tests.test_integrals.test_integrate_units()
sympy.integrals.tests.test_integrals.test_integration()
sympy.integrals.tests.test_integrals.test_integration_variable()
sympy.integrals.tests.test_integrals.test_is_number()
sympy.integrals.tests.test_integrals.test_is_zero()
sympy.integrals.tests.test_integrals.test_issue_1888()
sympy.integrals.tests.test_integrals.test_issue_2708()
sympy.integrals.tests.test_integrals.test_issue_3532()
sympy.integrals.tests.test_integrals.test_issue_3558()
sympy.integrals.tests.test_integrals.test_issue_3560()
sympy.integrals.tests.test_integrals.test_issue_3618()
sympy.integrals.tests.test_integrals.test_issue_3623()
sympy.integrals.tests.test_integrals.test_issue_3635()
sympy.integrals.tests.test_integrals.test_issue_3664()
sympy.integrals.tests.test_integrals.test_issue_3679()
sympy.integrals.tests.test_integrals.test_issue_3686()
sympy.integrals.tests.test_integrals.test_issue_3740()
sympy.integrals.tests.test_integrals.test_issue_3788()
sympy.integrals.tests.test_integrals.test_issue_3940()
sympy.integrals.tests.test_integrals.test_issue_3952()
sympy.integrals.tests.test_integrals.test_issue_4052()
sympy.integrals.tests.test_integrals.test_issue_4100()
sympy.integrals.tests.test_integrals.test_issue_4153()
sympy.integrals.tests.test_integrals.test_issue_4199()
sympy.integrals.tests.test_integrals.test_issue_4215()
sympy.integrals.tests.test_integrals.test_issue_4234()
sympy.integrals.tests.test_integrals.test_issue_4326()
sympy.integrals.tests.test_integrals.test_issue_4376()
sympy.integrals.tests.test_integrals.test_issue_4400()
sympy.integrals.tests.test_integrals.test_issue_4403()
sympy.integrals.tests.test_integrals.test_issue_4403_2()
sympy.integrals.tests.test_integrals.test_issue_4422()
sympy.integrals.tests.test_integrals.test_issue_4487()
sympy.integrals.tests.test_integrals.test_issue_4492()
sympy.integrals.tests.test_integrals.test_issue_4493()
sympy.integrals.tests.test_integrals.test_issue_4516()
sympy.integrals.tests.test_integrals.test_issue_4517()
sympy.integrals.tests.test_integrals.test_issue_4527()
sympy.integrals.tests.test_integrals.test_issue_4665()
sympy.integrals.tests.test_integrals.test_issue_4703()
sympy.integrals.tests.test_integrals.test_issue_4737()
sympy.integrals.tests.test_integrals.test_issue_4803()
sympy.integrals.tests.test_integrals.test_issue_4884()
sympy.integrals.tests.test_integrals.test_issue_4890()
sympy.integrals.tests.test_integrals.test_issue_4892a()
sympy.integrals.tests.test_integrals.test_issue_4892b()
sympy.integrals.tests.test_integrals.test_issue_4992()
sympy.integrals.tests.test_integrals.test_issue_5167()
sympy.integrals.tests.test_integrals.test_issue_5178()
sympy.integrals.tests.test_integrals.test_issue_5413()
sympy.integrals.tests.test_integrals.test_issue_6253()
sympy.integrals.tests.test_integrals.test_issue_6828()
sympy.integrals.tests.test_integrals.test_issue_7450()
sympy.integrals.tests.test_integrals.test_limit_bug()
sympy.integrals.tests.test_integrals.test_matrices()
sympy.integrals.tests.test_integrals.test_multiple_integration()
sympy.integrals.tests.test_integrals.test_nested_doit()
sympy.integrals.tests.test_integrals.test_powers()
sympy.integrals.tests.test_integrals.test_risch_option()
sympy.integrals.tests.test_integrals.test_series()
sympy.integrals.tests.test_integrals.test_subs1()
sympy.integrals.tests.test_integrals.test_subs2()
sympy.integrals.tests.test_integrals.test_subs3()
sympy.integrals.tests.test_integrals.test_subs4()
sympy.integrals.tests.test_integrals.test_subs5()
sympy.integrals.tests.test_integrals.test_subs6()
sympy.integrals.tests.test_integrals.test_subs7()
sympy.integrals.tests.test_integrals.test_symbols()
sympy.integrals.tests.test_integrals.test_transcendental_functions()
sympy.integrals.tests.test_integrals.test_transform()
sympy.tests.test_NS(e,n=15,**options)
sympy.tests.test_diff_test(i)
sympy.tests.test_test_as_sum_left()
sympy.tests.test_test_as_sum_midpoint1()
sympy.tests.test_test_as_sum_midpoint2()
sympy.tests.test_test_as_sum_raises()
sympy.tests.test_test_as_sum_right()
sympy.tests.test_test_atom_bug()
sympy.tests.test_test_basics()
sympy.tests.test_test_basics_multiple()
sympy.tests.test_test_conjugate_transpose()
sympy.tests.test_test_constructor()
sympy.tests.test_test_doit_integrals()
sympy.tests.test_test_evalf_integrals()
sympy.tests.test_test_evalf_issue_939()
sympy.tests.test_test_expand()
sympy.tests.test_test_expand_integral()
sympy.tests.test_test_failing_integrals()
sympy.tests.test_test_improper_integral()
sympy.tests.test_test_integral_reconstruct()
sympy.tests.test_test_integrate_DiracDelta()
sympy.tests.test_test_integrate_DiracDelta_fails()
sympy.tests.test_test_integrate_Piecewise_rational_over_reals()
sympy.tests.test_test_integrate_derivatives()
sympy.tests.test_test_integrate_functions()
sympy.tests.test_test_integrate_linearterm_pow()
sympy.tests.test_test_integrate_omit_var()
sympy.tests.test_test_integrate_poly()
sympy.tests.test_test_integrate_poly_accurately()
sympy.tests.test_test_integrate_poly_defined()
sympy.tests.test_test_integrate_returns_piecewise()
sympy.tests.test_test_integrate_series()
sympy.tests.test_test_integrate_units()
sympy.tests.test_test_integration()
sympy.tests.test_test_integration_variable()
sympy.tests.test_test_is_number()
sympy.tests.test_test_is_zero()
sympy.tests.test_test_issue_1888()
sympy.tests.test_test_issue_2708()
sympy.tests.test_test_issue_3532()
sympy.tests.test_test_issue_3558()
sympy.tests.test_test_issue_3560()
sympy.tests.test_test_issue_3618()
sympy.tests.test_test_issue_3623()
sympy.tests.test_test_issue_3635()
sympy.tests.test_test_issue_3664()
sympy.tests.test_test_issue_3679()
sympy.tests.test_test_issue_3686()
sympy.tests.test_test_issue_3740()
sympy.tests.test_test_issue_3788()
sympy.tests.test_test_issue_3940()
sympy.tests.test_test_issue_3952()
sympy.tests.test_test_issue_4052()
sympy.tests.test_test_issue_4100()
sympy.tests.test_test_issue_4153()
sympy.tests.test_test_issue_4199()
sympy.tests.test_test_issue_4215()
sympy.tests.test_test_issue_4234()
sympy.tests.test_test_issue_4326()
sympy.tests.test_test_issue_4376()
sympy.tests.test_test_issue_4400()
sympy.tests.test_test_issue_4403()
sympy.tests.test_test_issue_4403_2()
sympy.tests.test_test_issue_4422()
sympy.tests.test_test_issue_4487()
sympy.tests.test_test_issue_4492()
sympy.tests.test_test_issue_4493()
sympy.tests.test_test_issue_4516()
sympy.tests.test_test_issue_4517()
sympy.tests.test_test_issue_4527()
sympy.tests.test_test_issue_4665()
sympy.tests.test_test_issue_4703()
sympy.tests.test_test_issue_4737()
sympy.tests.test_test_issue_4803()
sympy.tests.test_test_issue_4884()
sympy.tests.test_test_issue_4890()
sympy.tests.test_test_issue_4892a()
sympy.tests.test_test_issue_4892b()
sympy.tests.test_test_issue_4992()
sympy.tests.test_test_issue_5167()
sympy.tests.test_test_issue_5178()
sympy.tests.test_test_issue_5413()
sympy.tests.test_test_issue_6253()
sympy.tests.test_test_issue_6828()
sympy.tests.test_test_issue_7450()
sympy.tests.test_test_limit_bug()
sympy.tests.test_test_matrices()
sympy.tests.test_test_multiple_integration()
sympy.tests.test_test_nested_doit()
sympy.tests.test_test_powers()
sympy.tests.test_test_risch_option()
sympy.tests.test_test_series()
sympy.tests.test_test_subs1()
sympy.tests.test_test_subs2()
sympy.tests.test_test_subs3()
sympy.tests.test_test_subs4()
sympy.tests.test_test_subs5()
sympy.tests.test_test_subs6()
sympy.tests.test_test_subs7()
sympy.tests.test_test_symbols()
sympy.tests.test_test_transcendental_functions()
sympy.tests.test_test_transform()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_trigonometry.py----------------------------------------
A:sympy.integrals.tests.test_trigonometry.x->Symbol('x')
A:sympy.integrals.tests.test_trigonometry.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_trigonometry.n->Symbol('n', integer=True)
sympy.integrals.tests.test_trigonometry.test_trigintegrate_even()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_mixed()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_odd()
sympy.integrals.tests.test_trigonometry.test_trigintegrate_symbolic()
sympy.tests.test_trigonometry.test_trigintegrate_even()
sympy.tests.test_trigonometry.test_trigintegrate_mixed()
sympy.tests.test_trigonometry.test_trigintegrate_odd()
sympy.tests.test_trigonometry.test_trigintegrate_symbolic()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_prde.py----------------------------------------
A:sympy.integrals.tests.test_prde.(t0, t1, t2, t3, k)->symbols('t:4 k')
A:sympy.integrals.tests.test_prde.DE->DifferentialExtension(extension={'D': [Poly(1, x), Poly(1 / x, t)]})
A:sympy.integrals.tests.test_prde.fa->Poly(1, t)
A:sympy.integrals.tests.test_prde.fd->Poly(x, t)
A:sympy.integrals.tests.test_prde.a->Poly(t + 1, t)
A:sympy.integrals.tests.test_prde.ba->Poly(t ** 2, t)
A:sympy.integrals.tests.test_prde.bd->Poly(1, t)
A:sympy.integrals.tests.test_prde.A->Matrix([[-(x + 3) / (x - 1), (x + 1) / (x - 1), 1], [-x - 3, x + 1, x - 1], [2 * (x + 3) / (x - 1), 0, 0]])
A:sympy.integrals.tests.test_prde.u->Matrix([(x + 1) / (x - 1), x + 1, 0])
sympy.integrals.tests.test_prde.test_constant_system()
sympy.integrals.tests.test_prde.test_is_deriv_k()
sympy.integrals.tests.test_prde.test_is_log_deriv_k_t_radical()
sympy.integrals.tests.test_prde.test_is_log_deriv_k_t_radical_in_field()
sympy.integrals.tests.test_prde.test_limited_integrate()
sympy.integrals.tests.test_prde.test_limited_integrate_reduce()
sympy.integrals.tests.test_prde.test_parametric_log_deriv()
sympy.integrals.tests.test_prde.test_prde_linear_constraints()
sympy.integrals.tests.test_prde.test_prde_no_cancel()
sympy.integrals.tests.test_prde.test_prde_normal_denom()
sympy.integrals.tests.test_prde.test_prde_spde()
sympy.integrals.tests.test_prde.test_prde_special_denom()
sympy.tests.test_prde.test_constant_system()
sympy.tests.test_prde.test_is_deriv_k()
sympy.tests.test_prde.test_is_log_deriv_k_t_radical()
sympy.tests.test_prde.test_is_log_deriv_k_t_radical_in_field()
sympy.tests.test_prde.test_limited_integrate()
sympy.tests.test_prde.test_limited_integrate_reduce()
sympy.tests.test_prde.test_parametric_log_deriv()
sympy.tests.test_prde.test_prde_linear_constraints()
sympy.tests.test_prde.test_prde_no_cancel()
sympy.tests.test_prde.test_prde_normal_denom()
sympy.tests.test_prde.test_prde_spde()
sympy.tests.test_prde.test_prde_special_denom()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_rde.py----------------------------------------
A:sympy.integrals.tests.test_rde.(t0, t1, t2, k)->symbols('t:3 k')
A:sympy.integrals.tests.test_rde.a->Poly((1 + x) * t ** 5 + 4 * t ** 4 + (-1 - 3 * x) * t ** 3 - 4 * t ** 2 + (-2 + 2 * x) * t, t)
A:sympy.integrals.tests.test_rde.b->Poly((t ** 2 + 1) ** 3 * t, t)
A:sympy.integrals.tests.test_rde.c->Poly((t ** 2 + 1) ** 6 * t, t)
A:sympy.integrals.tests.test_rde.d->Poly(t ** 4 - 3 * t ** 2 + 2, t)
A:sympy.integrals.tests.test_rde.e->Poly((t ** 2 + 1) ** 100 * t ** 37, t)
A:sympy.integrals.tests.test_rde.p1->Poly(t, t)
A:sympy.integrals.tests.test_rde.p2->Poly(1 + t ** 2, t)
A:sympy.integrals.tests.test_rde.DE->DifferentialExtension(extension={'D': [Poly(1, x), Poly(t, t)]})
A:sympy.integrals.tests.test_rde.r->weak_normalizer(Poly(1 + t ** 2), Poly(t, t), DE, z)
sympy.integrals.tests.test_rde.test_bound_degree()
sympy.integrals.tests.test_rde.test_bound_degree_fail()
sympy.integrals.tests.test_rde.test_normal_denom()
sympy.integrals.tests.test_rde.test_order_at()
sympy.integrals.tests.test_rde.test_rischDE()
sympy.integrals.tests.test_rde.test_solve_poly_rde_cancel()
sympy.integrals.tests.test_rde.test_solve_poly_rde_no_cancel()
sympy.integrals.tests.test_rde.test_spde()
sympy.integrals.tests.test_rde.test_special_denom()
sympy.integrals.tests.test_rde.test_weak_normalizer()
sympy.tests.test_rde.test_bound_degree()
sympy.tests.test_rde.test_bound_degree_fail()
sympy.tests.test_rde.test_normal_denom()
sympy.tests.test_rde.test_order_at()
sympy.tests.test_rde.test_rischDE()
sympy.tests.test_rde.test_solve_poly_rde_cancel()
sympy.tests.test_rde.test_solve_poly_rde_no_cancel()
sympy.tests.test_rde.test_spde()
sympy.tests.test_rde.test_special_denom()
sympy.tests.test_rde.test_weak_normalizer()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_risch.py----------------------------------------
A:sympy.integrals.tests.test_risch.(t0, t1, t2)->symbols('t:3')
A:sympy.integrals.tests.test_risch.i->Symbol('i')
A:sympy.integrals.tests.test_risch.p->Poly((-28 * x ** 11 * t0 - 6 * x ** 8 * t0 + 6 * x ** 9 * t0 - 15 * x ** 8 * t0 ** 2 + 15 * x ** 7 * t0 ** 2 + 84 * x ** 10 * t0 ** 2 - 140 * x ** 9 * t0 ** 3 - 20 * x ** 6 * t0 ** 3 + 20 * x ** 7 * t0 ** 3 - 15 * x ** 6 * t0 ** 4 + 15 * x ** 5 * t0 ** 4 + 140 * x ** 8 * t0 ** 4 - 84 * x ** 7 * t0 ** 5 - 6 * x ** 4 * t0 ** 5 + 6 * x ** 5 * t0 ** 5 + x ** 3 * t0 ** 6 - x ** 4 * t0 ** 6 + 28 * x ** 6 * t0 ** 6 - 4 * x ** 5 * t0 ** 7 + x ** 9 - x ** 10 + 4 * x ** 12) / (-8 * x ** 11 * t0 + 28 * x ** 10 * t0 ** 2 - 56 * x ** 9 * t0 ** 3 + 70 * x ** 8 * t0 ** 4 - 56 * x ** 7 * t0 ** 5 + 28 * x ** 6 * t0 ** 6 - 8 * x ** 5 * t0 ** 7 + x ** 4 * t0 ** 8 + x ** 12) * t1 ** 2 + (-28 * x ** 11 * t0 - 12 * x ** 8 * t0 + 12 * x ** 9 * t0 - 30 * x ** 8 * t0 ** 2 + 30 * x ** 7 * t0 ** 2 + 84 * x ** 10 * t0 ** 2 - 140 * x ** 9 * t0 ** 3 - 40 * x ** 6 * t0 ** 3 + 40 * x ** 7 * t0 ** 3 - 30 * x ** 6 * t0 ** 4 + 30 * x ** 5 * t0 ** 4 + 140 * x ** 8 * t0 ** 4 - 84 * x ** 7 * t0 ** 5 - 12 * x ** 4 * t0 ** 5 + 12 * x ** 5 * t0 ** 5 - 2 * x ** 4 * t0 ** 6 + 2 * x ** 3 * t0 ** 6 + 28 * x ** 6 * t0 ** 6 - 4 * x ** 5 * t0 ** 7 + 2 * x ** 9 - 2 * x ** 10 + 4 * x ** 12) / (-8 * x ** 11 * t0 + 28 * x ** 10 * t0 ** 2 - 56 * x ** 9 * t0 ** 3 + 70 * x ** 8 * t0 ** 4 - 56 * x ** 7 * t0 ** 5 + 28 * x ** 6 * t0 ** 6 - 8 * x ** 5 * t0 ** 7 + x ** 4 * t0 ** 8 + x ** 12) * t1 + (-2 * x ** 2 * t0 + 2 * x ** 3 * t0 + x * t0 ** 2 - x ** 2 * t0 ** 2 + x ** 3 - x ** 4) / (-4 * x ** 5 * t0 + 6 * x ** 4 * t0 ** 2 - 4 * x ** 3 * t0 ** 3 + x ** 2 * t0 ** 4 + x ** 6), t1, z, expand=False)
A:sympy.integrals.tests.test_risch.DE->DifferentialExtension(x * log(exp(x) + 1), x, dummy=False)
A:sympy.integrals.tests.test_risch.r->Poly(-4 * x ** 4 * z ** 2 + 4 * x ** 6 * z ** 2 - z * x ** 3 - 4 * x ** 5 * z ** 3 + 4 * x ** 3 * z ** 3 + x ** 4 + z * x ** 5 - x ** 6, t)
A:sympy.integrals.tests.test_risch.a->Poly(25 * t ** 6 - 10 * t ** 5 + 7 * t ** 4 - 8 * t ** 3 + 13 * t ** 2 + 2 * t - 1, t)
A:sympy.integrals.tests.test_risch.d->Poly(25 * t ** 6 + 35 * t ** 4 + 11 * t ** 2 + 1, t)
A:sympy.integrals.tests.test_risch.F->Poly(t ** 2 - 1, t)
A:sympy.integrals.tests.test_risch.ans->residue_reduce(Poly(-2 / x, t), Poly(t ** 2 - 1, t), DE, z, invert=True)
A:sympy.integrals.tests.test_risch.(elem, nonelem, b)->integrate_hyperexponential(Poly((8 * x ** 7 - 12 * x ** 5 + 6 * x ** 3 - x) * t1 ** 4 + (8 * t0 * x ** 7 - 8 * t0 * x ** 6 - 4 * t0 * x ** 5 + 2 * t0 * x ** 3 + 2 * t0 * x ** 2 - t0 * x + 24 * x ** 8 - 36 * x ** 6 - 4 * x ** 5 + 22 * x ** 4 + 4 * x ** 3 - 7 * x ** 2 - x + 1) * t1 ** 3 + (8 * t0 * x ** 8 - 4 * t0 * x ** 6 - 16 * t0 * x ** 5 - 2 * t0 * x ** 4 + 12 * t0 * x ** 3 + t0 * x ** 2 - 2 * t0 * x + 24 * x ** 9 - 36 * x ** 7 - 8 * x ** 6 + 22 * x ** 5 + 12 * x ** 4 - 7 * x ** 3 - 6 * x ** 2 + x + 1) * t1 ** 2 + (8 * t0 * x ** 8 - 8 * t0 * x ** 6 - 16 * t0 * x ** 5 + 6 * t0 * x ** 4 + 10 * t0 * x ** 3 - 2 * t0 * x ** 2 - t0 * x + 8 * x ** 10 - 12 * x ** 8 - 4 * x ** 7 + 2 * x ** 6 + 12 * x ** 5 + 3 * x ** 4 - 9 * x ** 3 - x ** 2 + 2 * x) * t1 + 8 * t0 * x ** 7 - 12 * t0 * x ** 6 - 4 * t0 * x ** 5 + 8 * t0 * x ** 4 - t0 * x ** 2 - 4 * x ** 7 + 4 * x ** 6 + 4 * x ** 5 - 4 * x ** 4 - x ** 3 + x ** 2, t1), Poly((8 * x ** 7 - 12 * x ** 5 + 6 * x ** 3 - x) * t1 ** 4 + (24 * x ** 8 + 8 * x ** 7 - 36 * x ** 6 - 12 * x ** 5 + 18 * x ** 4 + 6 * x ** 3 - 3 * x ** 2 - x) * t1 ** 3 + (24 * x ** 9 + 24 * x ** 8 - 36 * x ** 7 - 36 * x ** 6 + 18 * x ** 5 + 18 * x ** 4 - 3 * x ** 3 - 3 * x ** 2) * t1 ** 2 + (8 * x ** 10 + 24 * x ** 9 - 12 * x ** 8 - 36 * x ** 7 + 6 * x ** 6 + 18 * x ** 5 - x ** 4 - 3 * x ** 3) * t1 + 8 * x ** 10 - 12 * x ** 8 + 6 * x ** 6 - x ** 4, t1), DE)
A:sympy.integrals.tests.test_risch.(a, b)->symbols('a b')
A:sympy.integrals.tests.test_risch.f->Function('phi_nu')
sympy.integrals.tests.test_risch.TestingException(Exception)
sympy.integrals.tests.test_risch.test_DecrementLevel()
sympy.integrals.tests.test_risch.test_DifferentialExtension_Rothstein()
sympy.integrals.tests.test_risch.test_DifferentialExtension_all_attrs()
sympy.integrals.tests.test_risch.test_DifferentialExtension_exp()
sympy.integrals.tests.test_risch.test_DifferentialExtension_extension_flag()
sympy.integrals.tests.test_risch.test_DifferentialExtension_handle_first()
sympy.integrals.tests.test_risch.test_DifferentialExtension_log()
sympy.integrals.tests.test_risch.test_DifferentialExtension_misc()
sympy.integrals.tests.test_risch.test_DifferentialExtension_symlog()
sympy.integrals.tests.test_risch.test_NonElementaryIntegral()
sympy.integrals.tests.test_risch.test_as_poly_1t()
sympy.integrals.tests.test_risch.test_canonical_representation()
sympy.integrals.tests.test_risch.test_derivation()
sympy.integrals.tests.test_risch.test_frac_in()
sympy.integrals.tests.test_risch.test_gcdex_diophantine()
sympy.integrals.tests.test_risch.test_hermite_reduce()
sympy.integrals.tests.test_risch.test_integer_powers()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential_polynomial()
sympy.integrals.tests.test_risch.test_integrate_hyperexponential_returns_piecewise()
sympy.integrals.tests.test_risch.test_integrate_hypertangent_polynomial()
sympy.integrals.tests.test_risch.test_integrate_nonlinear_no_specials()
sympy.integrals.tests.test_risch.test_integrate_primitive()
sympy.integrals.tests.test_risch.test_laurent_series()
sympy.integrals.tests.test_risch.test_polynomial_reduce()
sympy.integrals.tests.test_risch.test_recognize_derivative()
sympy.integrals.tests.test_risch.test_recognize_log_derivative()
sympy.integrals.tests.test_risch.test_residue_reduce()
sympy.integrals.tests.test_risch.test_risch_integrate()
sympy.integrals.tests.test_risch.test_risch_integrate_float()
sympy.integrals.tests.test_risch.test_splitfactor()
sympy.tests.test_risch.TestingException(Exception)
sympy.tests.test_risch.test_DecrementLevel()
sympy.tests.test_risch.test_DifferentialExtension_Rothstein()
sympy.tests.test_risch.test_DifferentialExtension_all_attrs()
sympy.tests.test_risch.test_DifferentialExtension_exp()
sympy.tests.test_risch.test_DifferentialExtension_extension_flag()
sympy.tests.test_risch.test_DifferentialExtension_handle_first()
sympy.tests.test_risch.test_DifferentialExtension_log()
sympy.tests.test_risch.test_DifferentialExtension_misc()
sympy.tests.test_risch.test_DifferentialExtension_symlog()
sympy.tests.test_risch.test_NonElementaryIntegral()
sympy.tests.test_risch.test_as_poly_1t()
sympy.tests.test_risch.test_canonical_representation()
sympy.tests.test_risch.test_derivation()
sympy.tests.test_risch.test_frac_in()
sympy.tests.test_risch.test_gcdex_diophantine()
sympy.tests.test_risch.test_hermite_reduce()
sympy.tests.test_risch.test_integer_powers()
sympy.tests.test_risch.test_integrate_hyperexponential()
sympy.tests.test_risch.test_integrate_hyperexponential_polynomial()
sympy.tests.test_risch.test_integrate_hyperexponential_returns_piecewise()
sympy.tests.test_risch.test_integrate_hypertangent_polynomial()
sympy.tests.test_risch.test_integrate_nonlinear_no_specials()
sympy.tests.test_risch.test_integrate_primitive()
sympy.tests.test_risch.test_laurent_series()
sympy.tests.test_risch.test_polynomial_reduce()
sympy.tests.test_risch.test_recognize_derivative()
sympy.tests.test_risch.test_recognize_log_derivative()
sympy.tests.test_risch.test_residue_reduce()
sympy.tests.test_risch.test_risch_integrate()
sympy.tests.test_risch.test_risch_integrate_float()
sympy.tests.test_risch.test_splitfactor()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_quadrature.py----------------------------------------
A:sympy.integrals.tests.test_quadrature.(x, w)->gauss_jacobi(3, 2, 3, 40)
sympy.integrals.tests.test_quadrature.test_chebyshev_t()
sympy.integrals.tests.test_quadrature.test_chebyshev_t_precise()
sympy.integrals.tests.test_quadrature.test_chebyshev_u()
sympy.integrals.tests.test_quadrature.test_chebyshev_u_precise()
sympy.integrals.tests.test_quadrature.test_gen_laguerre()
sympy.integrals.tests.test_quadrature.test_gen_laguerre_precise()
sympy.integrals.tests.test_quadrature.test_hermite()
sympy.integrals.tests.test_quadrature.test_hermite_precise()
sympy.integrals.tests.test_quadrature.test_jacobi()
sympy.integrals.tests.test_quadrature.test_jacobi_precise()
sympy.integrals.tests.test_quadrature.test_laguerre()
sympy.integrals.tests.test_quadrature.test_laguerre_precise()
sympy.integrals.tests.test_quadrature.test_legendre()
sympy.integrals.tests.test_quadrature.test_legendre_precise()
sympy.tests.test_quadrature.test_chebyshev_t()
sympy.tests.test_quadrature.test_chebyshev_t_precise()
sympy.tests.test_quadrature.test_chebyshev_u()
sympy.tests.test_quadrature.test_chebyshev_u_precise()
sympy.tests.test_quadrature.test_gen_laguerre()
sympy.tests.test_quadrature.test_gen_laguerre_precise()
sympy.tests.test_quadrature.test_hermite()
sympy.tests.test_quadrature.test_hermite_precise()
sympy.tests.test_quadrature.test_jacobi()
sympy.tests.test_quadrature.test_jacobi_precise()
sympy.tests.test_quadrature.test_laguerre()
sympy.tests.test_quadrature.test_laguerre_precise()
sympy.tests.test_quadrature.test_legendre()
sympy.tests.test_quadrature.test_legendre_precise()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_rationaltools.py----------------------------------------
A:sympy.integrals.tests.test_rationaltools.f->S(36)
A:sympy.integrals.tests.test_rationaltools.ans->atan(x)
A:sympy.integrals.tests.test_rationaltools.(a, b, c)->symbols('a,b,c', positive=True)
A:sympy.integrals.tests.test_rationaltools.u->symbols('u')
sympy.integrals.tests.test_rationaltools.test_issue_5249()
sympy.integrals.tests.test_rationaltools.test_issue_5414()
sympy.integrals.tests.test_rationaltools.test_issue_5817()
sympy.integrals.tests.test_rationaltools.test_issue_5981()
sympy.integrals.tests.test_rationaltools.test_log_to_atan()
sympy.integrals.tests.test_rationaltools.test_ratint()
sympy.integrals.tests.test_rationaltools.test_ratint_logpart()
sympy.tests.test_rationaltools.test_issue_5249()
sympy.tests.test_rationaltools.test_issue_5414()
sympy.tests.test_rationaltools.test_issue_5817()
sympy.tests.test_rationaltools.test_issue_5981()
sympy.tests.test_rationaltools.test_log_to_atan()
sympy.tests.test_rationaltools.test_ratint()
sympy.tests.test_rationaltools.test_ratint_logpart()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_lineintegrals.py----------------------------------------
A:sympy.integrals.tests.test_lineintegrals.(s, t, x, y, z)->symbols('s,t,x,y,z')
A:sympy.integrals.tests.test_lineintegrals.c->Curve([E ** t + 1, E ** t - 1], (t, 0, ln(2)))
sympy.integrals.tests.test_lineintegrals.test_lineintegral()
sympy.tests.test_linetest_lineintegral()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_heurisch.py----------------------------------------
A:sympy.integrals.tests.test_heurisch.(x, y, z, nu)->symbols('x,y,z,nu')
A:sympy.integrals.tests.test_heurisch.f->LambertW(x)
A:sympy.integrals.tests.test_heurisch.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_heurisch.df->diff(f(x), x)
A:sympy.integrals.tests.test_heurisch.g->besselj(nu, x)
sympy.integrals.tests.test_heurisch.test_components()
sympy.integrals.tests.test_heurisch.test_heurisch_exp()
sympy.integrals.tests.test_heurisch.test_heurisch_fractions()
sympy.integrals.tests.test_heurisch.test_heurisch_function()
sympy.integrals.tests.test_heurisch.test_heurisch_function_derivative()
sympy.integrals.tests.test_heurisch.test_heurisch_hacking()
sympy.integrals.tests.test_heurisch.test_heurisch_hyperbolic()
sympy.integrals.tests.test_heurisch.test_heurisch_log()
sympy.integrals.tests.test_heurisch.test_heurisch_mixed()
sympy.integrals.tests.test_heurisch.test_heurisch_polynomials()
sympy.integrals.tests.test_heurisch.test_heurisch_radicals()
sympy.integrals.tests.test_heurisch.test_heurisch_special()
sympy.integrals.tests.test_heurisch.test_heurisch_symbolic_coeffs()
sympy.integrals.tests.test_heurisch.test_heurisch_symbolic_coeffs_1130()
sympy.integrals.tests.test_heurisch.test_heurisch_trigonometric()
sympy.integrals.tests.test_heurisch.test_heurisch_wrapper()
sympy.integrals.tests.test_heurisch.test_issue_3609()
sympy.integrals.tests.test_heurisch.test_pmint_LambertW()
sympy.integrals.tests.test_heurisch.test_pmint_WrightOmega()
sympy.integrals.tests.test_heurisch.test_pmint_besselj()
sympy.integrals.tests.test_heurisch.test_pmint_erf()
sympy.integrals.tests.test_heurisch.test_pmint_logexp()
sympy.integrals.tests.test_heurisch.test_pmint_rat()
sympy.integrals.tests.test_heurisch.test_pmint_trig()
sympy.tests.test_heurisch.test_components()
sympy.tests.test_heurisch.test_heurisch_exp()
sympy.tests.test_heurisch.test_heurisch_fractions()
sympy.tests.test_heurisch.test_heurisch_function()
sympy.tests.test_heurisch.test_heurisch_function_derivative()
sympy.tests.test_heurisch.test_heurisch_hacking()
sympy.tests.test_heurisch.test_heurisch_hyperbolic()
sympy.tests.test_heurisch.test_heurisch_log()
sympy.tests.test_heurisch.test_heurisch_mixed()
sympy.tests.test_heurisch.test_heurisch_polynomials()
sympy.tests.test_heurisch.test_heurisch_radicals()
sympy.tests.test_heurisch.test_heurisch_special()
sympy.tests.test_heurisch.test_heurisch_symbolic_coeffs()
sympy.tests.test_heurisch.test_heurisch_symbolic_coeffs_1130()
sympy.tests.test_heurisch.test_heurisch_trigonometric()
sympy.tests.test_heurisch.test_heurisch_wrapper()
sympy.tests.test_heurisch.test_issue_3609()
sympy.tests.test_heurisch.test_pmint_LambertW()
sympy.tests.test_heurisch.test_pmint_WrightOmega()
sympy.tests.test_heurisch.test_pmint_besselj()
sympy.tests.test_heurisch.test_pmint_erf()
sympy.tests.test_heurisch.test_pmint_logexp()
sympy.tests.test_heurisch.test_pmint_rat()
sympy.tests.test_heurisch.test_pmint_trig()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_manual.py----------------------------------------
A:sympy.integrals.tests.test_manual.(x, y, u, n, a, b)->symbols('x y u n a b')
A:sympy.integrals.tests.test_manual.result->_parts_rule(atan(x), x)
A:sympy.integrals.tests.test_manual.(r, x, phi)->map(Symbol, 'r x phi'.split())
A:sympy.integrals.tests.test_manual.n->Symbol('n', nonzero=True)
A:sympy.integrals.tests.test_manual.y->Symbol('y', positive=True)
A:sympy.integrals.tests.test_manual.a->Symbol('a', negative=True)
sympy.integrals.tests.test_manual.test_constant_independent_of_symbol()
sympy.integrals.tests.test_manual.test_find_substitutions()
sympy.integrals.tests.test_manual.test_issue_2850()
sympy.integrals.tests.test_manual.test_issue_3796()
sympy.integrals.tests.test_manual.test_issue_6746()
sympy.integrals.tests.test_manual.test_issue_6799()
sympy.integrals.tests.test_manual.test_manual_true()
sympy.integrals.tests.test_manual.test_manualintegrate_Heaviside()
sympy.integrals.tests.test_manual.test_manualintegrate_derivative()
sympy.integrals.tests.test_manual.test_manualintegrate_exponentials()
sympy.integrals.tests.test_manual.test_manualintegrate_inversetrig()
sympy.integrals.tests.test_manual.test_manualintegrate_parts()
sympy.integrals.tests.test_manual.test_manualintegrate_polynomials()
sympy.integrals.tests.test_manual.test_manualintegrate_rational()
sympy.integrals.tests.test_manual.test_manualintegrate_trig_substitution()
sympy.integrals.tests.test_manual.test_manualintegrate_trigonometry()
sympy.integrals.tests.test_manual.test_manualintegrate_trigpowers()
sympy.tests.test_manual.test_constant_independent_of_symbol()
sympy.tests.test_manual.test_find_substitutions()
sympy.tests.test_manual.test_issue_2850()
sympy.tests.test_manual.test_issue_3796()
sympy.tests.test_manual.test_issue_6746()
sympy.tests.test_manual.test_issue_6799()
sympy.tests.test_manual.test_manual_true()
sympy.tests.test_manual.test_manualintegrate_Heaviside()
sympy.tests.test_manual.test_manualintegrate_derivative()
sympy.tests.test_manual.test_manualintegrate_exponentials()
sympy.tests.test_manual.test_manualintegrate_inversetrig()
sympy.tests.test_manual.test_manualintegrate_parts()
sympy.tests.test_manual.test_manualintegrate_polynomials()
sympy.tests.test_manual.test_manualintegrate_rational()
sympy.tests.test_manual.test_manualintegrate_trig_substitution()
sympy.tests.test_manual.test_manualintegrate_trigonometry()
sympy.tests.test_manual.test_manualintegrate_trigpowers()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/tests/test_meijerint.py----------------------------------------
A:sympy.integrals.tests.test_meijerint.e->integrate(exp(-(x - a) ** 2) * exp(-(x - b) ** 2) * exp(c * x), (x, 0, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.r->min(abs(a), abs(b))
A:sympy.integrals.tests.test_meijerint.integral->meijerint_indefinite(g, x)
A:sympy.integrals.tests.test_meijerint.m1->meijerg(a, b, arg)
A:sympy.integrals.tests.test_meijerint.m2->Mul(*_inflate_g(m1, n))
A:sympy.integrals.tests.test_meijerint.(a, b, c)->symbols('a b c', positive=True)
A:sympy.integrals.tests.test_meijerint.(s, t, mu)->symbols('s t mu', real=True)
A:sympy.integrals.tests.test_meijerint.s->symbols('s', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, b)->symbols('a b', positive=True)
A:sympy.integrals.tests.test_meijerint.(sigma, mu)->symbols('sigma mu', positive=True)
A:sympy.integrals.tests.test_meijerint.(i, c)->meijerint_definite(exp(-((x - mu) / (2 * sigma)) ** 2), x, 0, oo)
A:sympy.integrals.tests.test_meijerint.(i, _)->meijerint_definite(exp(-mu * x) * exp(sigma * x), x, 0, oo)
A:sympy.integrals.tests.test_meijerint.(a, b, s)->symbols('a b s')
A:sympy.integrals.tests.test_meijerint.n->Symbol('n', positive=True)
A:sympy.integrals.tests.test_meijerint.alpha->symbols('alpha', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, s)->symbols('a s', positive=True)
A:sympy.integrals.tests.test_meijerint.subs[a]->uniform(1.5, 2.0)
A:sympy.integrals.tests.test_meijerint.terms->terms(subs)
A:sympy.integrals.tests.test_meijerint.expanded->Add(*[f * x for (f, x) in terms])
A:sympy.integrals.tests.test_meijerint.(mu1, mu2)->symbols('mu1 mu2', real=True, nonzero=True, finite=True)
A:sympy.integrals.tests.test_meijerint.(sigma1, sigma2)->symbols('sigma1 sigma2', real=True, nonzero=True, finite=True, positive=True)
A:sympy.integrals.tests.test_meijerint.rate->Symbol('lambda', real=True, positive=True, finite=True)
A:sympy.integrals.tests.test_meijerint.i->integrate(x * betadist, (x, 0, oo), meijerg=True, conds='separate')
A:sympy.integrals.tests.test_meijerint.res1->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (x, 0, oo), (y, -oo, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.res2->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (y, -oo, oo), (x, 0, oo), meijerg=True)
A:sympy.integrals.tests.test_meijerint.(alpha, beta)->symbols('alpha beta', positive=True)
A:sympy.integrals.tests.test_meijerint.j->integrate(x ** 2 * betadist, (x, 0, oo), meijerg=True, conds='separate')
A:sympy.integrals.tests.test_meijerint.k->Symbol('k', positive=True)
A:sympy.integrals.tests.test_meijerint.(a, b, p)->symbols('a b p', positive=True)
A:sympy.integrals.tests.test_meijerint.(d1, d2)->symbols('d1 d2', positive=True)
A:sympy.integrals.tests.test_meijerint.(lamda, mu)->symbols('lamda mu', positive=True)
A:sympy.integrals.tests.test_meijerint.c->Symbol('c', positive=True)
A:sympy.integrals.tests.test_meijerint.(nu, sigma)->symbols('nu sigma', positive=True)
A:sympy.integrals.tests.test_meijerint.mu->Symbol('mu', real=True)
A:sympy.integrals.tests.test_meijerint.b->Symbol('b', positive=True)
A:sympy.integrals.tests.test_meijerint.t->Symbol('t', positive=True)
A:sympy.integrals.tests.test_meijerint.u->Symbol('u', polar=True)
A:sympy.integrals.tests.test_meijerint.anti->integrate(expr, x, meijerg=True)
sympy.integrals.tests.test_meijerint.test_bessel()
sympy.integrals.tests.test_meijerint.test_branch_bug()
sympy.integrals.tests.test_meijerint.test_expint()
sympy.integrals.tests.test_meijerint.test_fresnel()
sympy.integrals.tests.test_meijerint.test_inflate()
sympy.integrals.tests.test_meijerint.test_inversion()
sympy.integrals.tests.test_meijerint.test_issue_6122()
sympy.integrals.tests.test_meijerint.test_issue_6252()
sympy.integrals.tests.test_meijerint.test_issue_6348()
sympy.integrals.tests.test_meijerint.test_issue_6860()
sympy.integrals.tests.test_meijerint.test_linear_subs()
sympy.integrals.tests.test_meijerint.test_lookup_table()
sympy.integrals.tests.test_meijerint.test_meijerint()
sympy.integrals.tests.test_meijerint.test_meijerint_indefinite_numerically()
sympy.integrals.tests.test_meijerint.test_messy()
sympy.integrals.tests.test_meijerint.test_probability()
sympy.integrals.tests.test_meijerint.test_recursive()
sympy.integrals.tests.test_meijerint.test_rewrite1()
sympy.integrals.tests.test_meijerint.test_rewrite_single()
sympy.tests.test_meijerint.test_bessel()
sympy.tests.test_meijerint.test_branch_bug()
sympy.tests.test_meijerint.test_expint()
sympy.tests.test_meijerint.test_fresnel()
sympy.tests.test_meijerint.test_inflate()
sympy.tests.test_meijerint.test_inversion()
sympy.tests.test_meijerint.test_issue_6122()
sympy.tests.test_meijerint.test_issue_6252()
sympy.tests.test_meijerint.test_issue_6348()
sympy.tests.test_meijerint.test_issue_6860()
sympy.tests.test_meijerint.test_linear_subs()
sympy.tests.test_meijerint.test_lookup_table()
sympy.tests.test_meijerint.test_meijerint()
sympy.tests.test_meijerint.test_meijerint_indefinite_numerically()
sympy.tests.test_meijerint.test_messy()
sympy.tests.test_meijerint.test_probability()
sympy.tests.test_meijerint.test_recursive()
sympy.tests.test_meijerint.test_rewrite1()
sympy.tests.test_meijerint.test_rewrite_single()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/benchmarks/bench_integrate.py----------------------------------------
A:sympy.integrals.benchmarks.bench_integrate.x->Symbol('x')
sympy.benchmarks.bench_integrate.bench_integrate_sin()
sympy.benchmarks.bench_integrate.bench_integrate_x1sin()
sympy.benchmarks.bench_integrate.bench_integrate_x2sin()
sympy.benchmarks.bench_integrate.bench_integrate_x3sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x1sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x2sin()
sympy.integrals.benchmarks.bench_integrate.bench_integrate_x3sin()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/integrals/benchmarks/bench_trigintegrate.py----------------------------------------
A:sympy.integrals.benchmarks.bench_trigintegrate.x->Symbol('x')
sympy.benchmarks.bench_trigintegrate.timeit_trigintegrate_sin3x()
sympy.benchmarks.bench_trigintegrate.timeit_trigintegrate_x2()
sympy.integrals.benchmarks.bench_trigintegrate.timeit_trigintegrate_sin3x()
sympy.integrals.benchmarks.bench_trigintegrate.timeit_trigintegrate_x2()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/products.py----------------------------------------
A:sympy.concrete.products.obj->sympy.concrete.expr_with_intlimits.ExprWithIntLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.concrete.products.g->self._eval_product(f, (i, a, b))
A:sympy.concrete.products.poly->term.as_poly(k)
A:sympy.concrete.products.all_roots->roots(poly)
A:sympy.concrete.products.arg->term._new_rawargs(*include)
A:sympy.concrete.products.B->self.func(arg, (k, a, n)).doit()
A:sympy.concrete.products.(p, q)->term.as_numer_denom()
A:sympy.concrete.products.p->self._eval_product(term.base, (k, a, n))
A:sympy.concrete.products.q->self._eval_product(q, (k, a, n))
A:sympy.concrete.products.A->Mul(*exclude)
A:sympy.concrete.products.s->summation(term.exp, (k, a, n))
A:sympy.concrete.products.evaluated->term.doit()
A:sympy.concrete.products.f->self._eval_product(evaluated, limits)
A:sympy.concrete.products.l_indices->list(indices)
A:sympy.concrete.products.l_indices[i]->expr.index(indx)
A:sympy.concrete.products.prod->Product(*args, **kwargs)
sympy.Product(cls,function,*symbols,**assumptions)
sympy.Product._eval_adjoint(self)
sympy.Product._eval_conjugate(self)
sympy.Product._eval_is_zero(self)
sympy.Product._eval_product(self,term,limits)
sympy.Product._eval_rewrite_as_Sum(self,*args)
sympy.Product._eval_simplify(self,ratio,measure)
sympy.Product._eval_transpose(self)
sympy.Product.doit(self,**hints)
sympy.Product.reverse_order(expr,*indices)
sympy.Product.term(self)
sympy.concrete.products.Product(cls,function,*symbols,**assumptions)
sympy.concrete.products.Product.__new__(cls,function,*symbols,**assumptions)
sympy.concrete.products.Product._eval_adjoint(self)
sympy.concrete.products.Product._eval_conjugate(self)
sympy.concrete.products.Product._eval_is_zero(self)
sympy.concrete.products.Product._eval_product(self,term,limits)
sympy.concrete.products.Product._eval_rewrite_as_Sum(self,*args)
sympy.concrete.products.Product._eval_simplify(self,ratio,measure)
sympy.concrete.products.Product._eval_transpose(self)
sympy.concrete.products.Product.doit(self,**hints)
sympy.concrete.products.Product.reverse_order(expr,*indices)
sympy.concrete.products.Product.term(self)
sympy.concrete.products.product(*args,**kwargs)
sympy.product(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/gosper.py----------------------------------------
A:sympy.concrete.gosper.((p, q), opt)->parallel_poly_from_expr((f, g), n, field=True, extension=True)
A:sympy.concrete.gosper.h->Dummy('h')
A:sympy.concrete.gosper.D->set([K - N + 1, (B.nth(N - 1) - A.nth(N - 1)) / A.LC()])
A:sympy.concrete.gosper.R->A.as_expr().resultant(B.compose(D))
A:sympy.concrete.gosper.roots->set(R.ground_roots().keys())
A:sympy.concrete.gosper.d->max(D)
A:sympy.concrete.gosper.A->A.as_expr().as_expr()
A:sympy.concrete.gosper.B->B.shift(-1).shift(-1)
A:sympy.concrete.gosper.C->C.as_expr().as_expr()
A:sympy.concrete.gosper.r->hypersimp(f, n)
A:sympy.concrete.gosper.(p, q)->hypersimp(f, n).as_numer_denom()
A:sympy.concrete.gosper.(A, B, C)->gosper_normal(p, q, n)
A:sympy.concrete.gosper.N->S(A.degree())
A:sympy.concrete.gosper.M->S(B.degree())
A:sympy.concrete.gosper.K->S(C.degree())
A:sympy.concrete.gosper.coeffs->symbols('c:%s' % (d + 1), cls=Dummy)
A:sympy.concrete.gosper.domain->A.as_expr().as_expr().get_domain().inject(*coeffs)
A:sympy.concrete.gosper.x->x.subs(coeff, 0).subs(coeff, 0)
A:sympy.concrete.gosper.solution->solve(H.coeffs(), coeffs)
A:sympy.concrete.gosper.g->gosper_term(f, k)
sympy.concrete.gosper.gosper_normal(f,g,n,polys=True)
sympy.concrete.gosper.gosper_sum(f,k)
sympy.concrete.gosper.gosper_term(f,n)
sympy.gosper.gosper_normal(f,g,n,polys=True)
sympy.gosper.gosper_sum(f,k)
sympy.gosper.gosper_term(f,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/expr_with_intlimits.py----------------------------------------
A:sympy.concrete.expr_with_intlimits.p->trafo.as_poly(var)
A:sympy.concrete.expr_with_intlimits.alpha->trafo.as_poly(var).coeff_monomial(var)
A:sympy.concrete.expr_with_intlimits.beta->trafo.as_poly(var).coeff_monomial(S.One)
A:sympy.concrete.expr_with_intlimits.function->function.subs(var, newvar).subs(var, newvar)
A:sympy.concrete.expr_with_intlimits.index1->expr.index(r[0])
A:sympy.concrete.expr_with_intlimits.index2->expr.index(r[1])
A:sympy.concrete.expr_with_intlimits.new_expr->new_expr.reorder_limit(index1, index2).reorder_limit(index1, index2)
A:sympy.concrete.expr_with_intlimits.var->set([limit[0] for limit in expr.limits])
sympy.concrete.expr_with_intlimits.ExprWithIntLimits(ExprWithLimits)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.change_index(self,var,trafo,newvar=None)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index(expr,x)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder(expr,*arg)
sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder_limit(expr,x,y)
sympy.concrete.expr_with_intlimits.ReorderError(self,expr,msg)
sympy.concrete.expr_with_intlimits.ReorderError.__init__(self,expr,msg)
sympy.expr_with_intlimits.ExprWithIntLimits(ExprWithLimits)
sympy.expr_with_intlimits.ExprWithIntLimits.change_index(self,var,trafo,newvar=None)
sympy.expr_with_intlimits.ExprWithIntLimits.index(expr,x)
sympy.expr_with_intlimits.ExprWithIntLimits.reorder(expr,*arg)
sympy.expr_with_intlimits.ExprWithIntLimits.reorder_limit(expr,x,y)
sympy.expr_with_intlimits.ReorderError(self,expr,msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/delta.py----------------------------------------
A:sympy.concrete.delta.p->(delta.args[0] - delta.args[1]).as_poly(index)
A:sympy.concrete.delta.solns->solve(delta.args[0] - delta.args[1], x)
A:sympy.concrete.delta.expr2->expr.func(*newargs)
A:sympy.concrete.delta.slns->solve(expr.args[0] - expr.args[1], dict=True)
A:sympy.concrete.delta.newexpr->f.func(*terms)
A:sympy.concrete.delta.k->Dummy('kprime', integer=True)
A:sympy.concrete.delta.(delta, _)->_extract_delta(f, limit[0])
A:sympy.concrete.delta.g->_expand_delta(f, x)
A:sympy.concrete.delta.c->Eq(limit[2], limit[1] - 1)
A:sympy.concrete.delta.(delta, expr)->_extract_delta(g, x)
sympy.concrete.delta._expand_delta(expr,index)
sympy.concrete.delta._extract_delta(expr,index)
sympy.concrete.delta._has_simple_delta(expr,index)
sympy.concrete.delta._is_simple_delta(delta,index)
sympy.concrete.delta._remove_multiple_delta(expr)
sympy.concrete.delta._simplify_delta(expr)
sympy.concrete.delta.deltaproduct(f,limit)
sympy.concrete.delta.deltasummation(f,limit,no_piecewise=False)
sympy.delta._expand_delta(expr,index)
sympy.delta._extract_delta(expr,index)
sympy.delta._has_simple_delta(expr,index)
sympy.delta._is_simple_delta(delta,index)
sympy.delta._remove_multiple_delta(expr)
sympy.delta._simplify_delta(expr)
sympy.delta.deltaproduct(f,limit)
sympy.delta.deltasummation(f,limit,no_piecewise=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/summations.py----------------------------------------
A:sympy.concrete.summations.obj->sympy.concrete.expr_with_limits.AddWithLimits.__new__(cls, function, *symbols, **assumptions)
A:sympy.concrete.summations.f->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a)
A:sympy.concrete.summations.newf->eval_sum(f, (i, a, b))
A:sympy.concrete.summations.limit->limits.pop(-1)
A:sympy.concrete.summations.df->Derivative(f, x, evaluate=True)
A:sympy.concrete.summations.rv->rv.doit().doit()
A:sympy.concrete.summations.m->Dummy('m')
A:sympy.concrete.summations.n->Wild('n')
A:sympy.concrete.summations.term->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, a + k)
A:sympy.concrete.summations.x->Dummy('x')
A:sympy.concrete.summations.I->I.doit().doit()
A:sympy.concrete.summations.(fa, fb)->fpoint(f)
A:sympy.concrete.summations.g->g.diff(i, 2, simplify=False).diff(i, 2, simplify=False)
A:sympy.concrete.summations.(ga, gb)->fpoint(g)
A:sympy.concrete.summations.l_indices->list(indices)
A:sympy.concrete.summations.l_indices[i]->self.index(indx)
A:sympy.concrete.summations.k->Wild('k')
A:sympy.concrete.summations.sol->(-R).match(L.subs(i, i + k))
A:sympy.concrete.summations.newexpr->eval_sum(arg.expr, limits)
A:sympy.concrete.summations.value->eval_sum_symbolic(f.expand(), (i, a, b))
A:sympy.concrete.summations.(L, R)->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).as_two_terms()
A:sympy.concrete.summations.sR->eval_sum_symbolic(R, (i, a, b))
A:sympy.concrete.summations.sL->eval_sum_symbolic(L, (i, a, b))
A:sympy.concrete.summations.lrsum->telescopic(L, R, (i, a, b))
A:sympy.concrete.summations.lsum->eval_sum_symbolic(L, (i, a, b))
A:sympy.concrete.summations.rsum->eval_sum_symbolic(R, (i, a, b))
A:sympy.concrete.summations.result->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).match(i ** n)
A:sympy.concrete.summations.c1->sympy.core.basic.C.Wild('c1', exclude=[i])
A:sympy.concrete.summations.c2->sympy.core.basic.C.Wild('c2', exclude=[i])
A:sympy.concrete.summations.c3->sympy.core.basic.C.Wild('c3', exclude=[i])
A:sympy.concrete.summations.e->f.subs(i, Dummy('i', integer=True, positive=True) + a).subs(i, Dummy('i', integer=True, positive=True) + a).match(c1 ** (c2 * i + c3))
A:sympy.concrete.summations.p->Poly(fac, i)
A:sympy.concrete.summations.q->(c1 ** c2).subs(e)
A:sympy.concrete.summations.r->gosper_sum(f, (i, a, b))
A:sympy.concrete.summations.hs->hypersimp(f, i)
A:sympy.concrete.summations.(numer, denom)->fraction(factor(hs))
A:sympy.concrete.summations.(top, topl)->numer.as_coeff_mul(i)
A:sympy.concrete.summations.(bot, botl)->denom.as_coeff_mul(i)
A:sympy.concrete.summations.(m, n)->Poly(fac, i).all_coeffs()
A:sympy.concrete.summations.h->hyper(ap, bq, x)
A:sympy.concrete.summations.old_sum->Sum(f, (i, a, b))
A:sympy.concrete.summations.res->_eval_sum_hyper(f, i, a)
A:sympy.concrete.summations.res1->_eval_sum_hyper(f.subs(i, -i), i, 1)
A:sympy.concrete.summations.res2->_eval_sum_hyper(f, i, 0)
A:sympy.concrete.summations.cond->And(cond1, cond2)
sympy.Sum(cls,function,*symbols,**assumptions)
sympy.Sum._eval_derivative(self,x)
sympy.Sum._eval_is_zero(self)
sympy.Sum._eval_simplify(self,ratio,measure)
sympy.Sum._eval_summation(self,f,x)
sympy.Sum.doit(self,**hints)
sympy.Sum.euler_maclaurin(self,m=0,n=0,eps=0,eval_integral=True)
sympy.Sum.reverse_order(self,*indices)
sympy.concrete.summations.Sum(cls,function,*symbols,**assumptions)
sympy.concrete.summations.Sum.__new__(cls,function,*symbols,**assumptions)
sympy.concrete.summations.Sum._eval_derivative(self,x)
sympy.concrete.summations.Sum._eval_is_zero(self)
sympy.concrete.summations.Sum._eval_simplify(self,ratio,measure)
sympy.concrete.summations.Sum._eval_summation(self,f,x)
sympy.concrete.summations.Sum.doit(self,**hints)
sympy.concrete.summations.Sum.euler_maclaurin(self,m=0,n=0,eps=0,eval_integral=True)
sympy.concrete.summations.Sum.reverse_order(self,*indices)
sympy.concrete.summations._eval_sum_hyper(f,i,a)
sympy.concrete.summations.eval_sum(f,limits)
sympy.concrete.summations.eval_sum_direct(expr,limits)
sympy.concrete.summations.eval_sum_hyper(f,i_a_b)
sympy.concrete.summations.eval_sum_symbolic(f,limits)
sympy.concrete.summations.summation(f,*symbols,**kwargs)
sympy.concrete.summations.telescopic(L,R,limits)
sympy.concrete.summations.telescopic_direct(L,R,n,limits)
sympy.summation(f,*symbols,**kwargs)
sympy.summations._eval_sum_hyper(f,i,a)
sympy.summations.eval_sum(f,limits)
sympy.summations.eval_sum_direct(expr,limits)
sympy.summations.eval_sum_hyper(f,i_a_b)
sympy.summations.eval_sum_symbolic(f,limits)
sympy.summations.telescopic(L,R,limits)
sympy.summations.telescopic_direct(L,R,n,limits)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/expr_with_limits.py----------------------------------------
A:sympy.concrete.expr_with_limits.V->sympify(flatten(V))
A:sympy.concrete.expr_with_limits.function->piecewise_fold(function)
A:sympy.concrete.expr_with_limits.(limits, orientation)->_process_limits(*symbols)
A:sympy.concrete.expr_with_limits.obj->sympy.core.expr.Expr.__new__(cls, **assumptions)
A:sympy.concrete.expr_with_limits.obj._args->tuple(arglist)
A:sympy.concrete.expr_with_limits.limits->list(self.limits)
A:sympy.concrete.expr_with_limits.xab->list(limits[i])
A:sympy.concrete.expr_with_limits.xab[0]->x.as_dummy()
A:sympy.concrete.expr_with_limits.xab[j]->xab[j].subs(reps).subs(reps)
A:sympy.concrete.expr_with_limits.f->f.subs(reps).subs(reps)
A:sympy.concrete.expr_with_limits.limits[i]->Tuple(xab[0])
A:sympy.concrete.expr_with_limits.sy2->set(self.variables).intersection(set(new.atoms(Symbol)))
A:sympy.concrete.expr_with_limits.sy1->set(self.variables).intersection(set(old.args))
A:sympy.concrete.expr_with_limits.func->func.subs(old, new).subs(old, new)
A:sympy.concrete.expr_with_limits.summand->self.function.expand(**hints)
A:sympy.concrete.expr_with_limits.out->sift(summand.args, lambda w: w.is_commutative and (not w.has(*self.variables)))
sympy.concrete.expr_with_limits.AddWithLimits(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.AddWithLimits.__new__(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.AddWithLimits._eval_adjoint(self)
sympy.concrete.expr_with_limits.AddWithLimits._eval_conjugate(self)
sympy.concrete.expr_with_limits.AddWithLimits._eval_expand_basic(self,**hints)
sympy.concrete.expr_with_limits.AddWithLimits._eval_factor(self,**hints)
sympy.concrete.expr_with_limits.AddWithLimits._eval_transpose(self)
sympy.concrete.expr_with_limits.ExprWithLimits(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.ExprWithLimits.__new__(cls,function,*symbols,**assumptions)
sympy.concrete.expr_with_limits.ExprWithLimits._eval_interval(self,x,a,b)
sympy.concrete.expr_with_limits.ExprWithLimits._eval_subs(self,old,new)
sympy.concrete.expr_with_limits.ExprWithLimits.as_dummy(self)
sympy.concrete.expr_with_limits.ExprWithLimits.free_symbols(self)
sympy.concrete.expr_with_limits.ExprWithLimits.function(self)
sympy.concrete.expr_with_limits.ExprWithLimits.is_number(self)
sympy.concrete.expr_with_limits.ExprWithLimits.limits(self)
sympy.concrete.expr_with_limits.ExprWithLimits.variables(self)
sympy.concrete.expr_with_limits._process_limits(*symbols)
sympy.expr_with_limits.AddWithLimits(cls,function,*symbols,**assumptions)
sympy.expr_with_limits.AddWithLimits._eval_adjoint(self)
sympy.expr_with_limits.AddWithLimits._eval_conjugate(self)
sympy.expr_with_limits.AddWithLimits._eval_expand_basic(self,**hints)
sympy.expr_with_limits.AddWithLimits._eval_factor(self,**hints)
sympy.expr_with_limits.AddWithLimits._eval_transpose(self)
sympy.expr_with_limits.ExprWithLimits(cls,function,*symbols,**assumptions)
sympy.expr_with_limits.ExprWithLimits._eval_interval(self,x,a,b)
sympy.expr_with_limits.ExprWithLimits._eval_subs(self,old,new)
sympy.expr_with_limits.ExprWithLimits.as_dummy(self)
sympy.expr_with_limits.ExprWithLimits.free_symbols(self)
sympy.expr_with_limits.ExprWithLimits.function(self)
sympy.expr_with_limits.ExprWithLimits.is_number(self)
sympy.expr_with_limits.ExprWithLimits.limits(self)
sympy.expr_with_limits.ExprWithLimits.variables(self)
sympy.expr_with_limits._process_limits(*symbols)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/tests/test_sums_products.py----------------------------------------
A:sympy.concrete.tests.test_sums_products.n->Symbol('n', integer=True)
A:sympy.concrete.tests.test_sums_products.i->Symbol('i', integer=True)
A:sympy.concrete.tests.test_sums_products.k->Symbol('k', integer=True)
A:sympy.concrete.tests.test_sums_products.j->Symbol('j', integer=True)
A:sympy.concrete.tests.test_sums_products.S1->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.S2->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.Sz->Sum(f(i), (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.f->Symbol('f')
A:sympy.concrete.tests.test_sums_products.u->Symbol('u', integer=True)
A:sympy.concrete.tests.test_sums_products.v->Symbol('v', integer=True)
A:sympy.concrete.tests.test_sums_products.S->Sum(x * f(y), (x, 0, oo), (y, 0, oo))
A:sympy.concrete.tests.test_sums_products.w->Symbol('w', integer=True)
A:sympy.concrete.tests.test_sums_products.S3->Sum(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_sums_products.s1->Product(n, (n, lo, hi))
A:sympy.concrete.tests.test_sums_products.s2->Product(n, (n, hi, lo))
A:sympy.concrete.tests.test_sums_products.s->Sum(binomial_dist * k, (k, 0, n))
A:sympy.concrete.tests.test_sums_products.B->Product(2 * n * (2 * n) / (2 * n - 1) / (2 * n + 1), (n, 1, b))
A:sympy.concrete.tests.test_sums_products.estr->NS(E, 100)
A:sympy.concrete.tests.test_sums_products.pistr->NS(pi, 100)
A:sympy.concrete.tests.test_sums_products.astr->NS(zeta(3), 100)
A:sympy.concrete.tests.test_sums_products.A->Product(4 * n ** 2 / (4 * n ** 2 - 1), (n, 1, b))
A:sympy.concrete.tests.test_sums_products.(s, e)->Product(4 * n ** 2 / (4 * n ** 2 - 1), (n, 1, b)).euler_maclaurin(m, n)
A:sympy.concrete.tests.test_sums_products.(f, g)->symbols('f g', cls=Function)
A:sympy.concrete.tests.test_sums_products.half->Rational(1, 2)
A:sympy.concrete.tests.test_sums_products.r->symbols('x', real=True)
A:sympy.concrete.tests.test_sums_products.l->Symbol('l', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.nmax->symbols('N', integer=True, positive=True)
A:sympy.concrete.tests.test_sums_products.pw->Piecewise((1, And(S(1) <= n, n <= nmax)), (0, True))
A:sympy.concrete.tests.test_sums_products.e->Sum(x * y, (x, 1, a))
A:sympy.concrete.tests.test_sums_products.m->Symbol('m', commutative=False)
A:sympy.concrete.tests.test_sums_products.(A, B)->symbols('A B', commutative=False)
A:sympy.concrete.tests.test_sums_products.p->symbols('p', positive=True)
A:sympy.concrete.tests.test_sums_products.(y, t)->symbols('y, t')
A:sympy.concrete.tests.test_sums_products.(b, v)->symbols('b, v', integer=True)
A:sympy.concrete.tests.test_sums_products.(b, y, c, d, z)->symbols('b, y, c, d, z', integer=True)
A:sympy.concrete.tests.test_sums_products.(n, k)->symbols('n k', positive=True, integer=True)
A:sympy.concrete.tests.test_sums_products.res->Sum(binomial_dist * k, (k, 0, n)).doit().simplify()
sympy.concrete.tests.test_sums_products.NS(e,n=15,**options)
sympy.concrete.tests.test_sums_products.test_Product_doit()
sympy.concrete.tests.test_sums_products.test_Sum_doit()
sympy.concrete.tests.test_sums_products.test_Sum_interface()
sympy.concrete.tests.test_sums_products.test_arithmetic_sums()
sympy.concrete.tests.test_sums_products.test_change_index()
sympy.concrete.tests.test_sums_products.test_composite_sums()
sympy.concrete.tests.test_sums_products.test_conjugate_transpose()
sympy.concrete.tests.test_sums_products.test_distribution_over_equality()
sympy.concrete.tests.test_sums_products.test_equality()
sympy.concrete.tests.test_sums_products.test_euler_maclaurin()
sympy.concrete.tests.test_sums_products.test_eval_diff()
sympy.concrete.tests.test_sums_products.test_evalf_euler_maclaurin()
sympy.concrete.tests.test_sums_products.test_evalf_fast_series()
sympy.concrete.tests.test_sums_products.test_evalf_fast_series_issue_4021()
sympy.concrete.tests.test_sums_products.test_evalf_issue_3273()
sympy.concrete.tests.test_sums_products.test_evalf_slow_series()
sympy.concrete.tests.test_sums_products.test_evalf_symbolic()
sympy.concrete.tests.test_sums_products.test_factor_expand_subs()
sympy.concrete.tests.test_sums_products.test_free_symbols()
sympy.concrete.tests.test_sums_products.test_function_subs()
sympy.concrete.tests.test_sums_products.test_geometric_sums()
sympy.concrete.tests.test_sums_products.test_harmonic_sums()
sympy.concrete.tests.test_sums_products.test_hypergeometric_sums()
sympy.concrete.tests.test_sums_products.test_hypersum()
sympy.concrete.tests.test_sums_products.test_is_commutative()
sympy.concrete.tests.test_sums_products.test_is_number()
sympy.concrete.tests.test_sums_products.test_is_zero()
sympy.concrete.tests.test_sums_products.test_issue_2787()
sympy.concrete.tests.test_sums_products.test_issue_4170()
sympy.concrete.tests.test_sums_products.test_issue_4171()
sympy.concrete.tests.test_sums_products.test_issue_4668()
sympy.concrete.tests.test_sums_products.test_issue_6273()
sympy.concrete.tests.test_sums_products.test_issue_6274()
sympy.concrete.tests.test_sums_products.test_issue_7097()
sympy.concrete.tests.test_sums_products.test_karr_convention()
sympy.concrete.tests.test_sums_products.test_karr_proposition_2a()
sympy.concrete.tests.test_sums_products.test_karr_proposition_2b()
sympy.concrete.tests.test_sums_products.test_limit_subs()
sympy.concrete.tests.test_sums_products.test_other_sums()
sympy.concrete.tests.test_sums_products.test_polynomial_sums()
sympy.concrete.tests.test_sums_products.test_rational_products()
sympy.concrete.tests.test_sums_products.test_reorder()
sympy.concrete.tests.test_sums_products.test_reverse_order()
sympy.concrete.tests.test_sums_products.test_simple_products()
sympy.concrete.tests.test_sums_products.test_simplify()
sympy.concrete.tests.test_sums_products.test_sum_reconstruct()
sympy.concrete.tests.test_sums_products.test_telescopic_sums()
sympy.concrete.tests.test_sums_products.test_wallis_product()
sympy.tests.test_sums_products.NS(e,n=15,**options)
sympy.tests.test_sums_products.test_Product_doit()
sympy.tests.test_sums_products.test_Sum_doit()
sympy.tests.test_sums_products.test_Sum_interface()
sympy.tests.test_sums_products.test_arithmetic_sums()
sympy.tests.test_sums_products.test_change_index()
sympy.tests.test_sums_products.test_composite_sums()
sympy.tests.test_sums_products.test_conjugate_transpose()
sympy.tests.test_sums_products.test_distribution_over_equality()
sympy.tests.test_sums_products.test_equality()
sympy.tests.test_sums_products.test_euler_maclaurin()
sympy.tests.test_sums_products.test_eval_diff()
sympy.tests.test_sums_products.test_evalf_euler_maclaurin()
sympy.tests.test_sums_products.test_evalf_fast_series()
sympy.tests.test_sums_products.test_evalf_fast_series_issue_4021()
sympy.tests.test_sums_products.test_evalf_issue_3273()
sympy.tests.test_sums_products.test_evalf_slow_series()
sympy.tests.test_sums_products.test_evalf_symbolic()
sympy.tests.test_sums_products.test_factor_expand_subs()
sympy.tests.test_sums_products.test_free_symbols()
sympy.tests.test_sums_products.test_function_subs()
sympy.tests.test_sums_products.test_geometric_sums()
sympy.tests.test_sums_products.test_harmonic_sums()
sympy.tests.test_sums_products.test_hypergeometric_sums()
sympy.tests.test_sums_products.test_hypersum()
sympy.tests.test_sums_products.test_is_commutative()
sympy.tests.test_sums_products.test_is_number()
sympy.tests.test_sums_products.test_is_zero()
sympy.tests.test_sums_products.test_issue_2787()
sympy.tests.test_sums_products.test_issue_4170()
sympy.tests.test_sums_products.test_issue_4171()
sympy.tests.test_sums_products.test_issue_4668()
sympy.tests.test_sums_products.test_issue_6273()
sympy.tests.test_sums_products.test_issue_6274()
sympy.tests.test_sums_products.test_issue_7097()
sympy.tests.test_sums_products.test_karr_convention()
sympy.tests.test_sums_products.test_karr_proposition_2a()
sympy.tests.test_sums_products.test_karr_proposition_2b()
sympy.tests.test_sums_products.test_limit_subs()
sympy.tests.test_sums_products.test_other_sums()
sympy.tests.test_sums_products.test_polynomial_sums()
sympy.tests.test_sums_products.test_rational_products()
sympy.tests.test_sums_products.test_reorder()
sympy.tests.test_sums_products.test_reverse_order()
sympy.tests.test_sums_products.test_simple_products()
sympy.tests.test_sums_products.test_simplify()
sympy.tests.test_sums_products.test_sum_reconstruct()
sympy.tests.test_sums_products.test_telescopic_sums()
sympy.tests.test_sums_products.test_wallis_product()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/tests/test_delta.py----------------------------------------
A:sympy.concrete.tests.test_delta.(i, j, k, l, m)->symbols('i j k l m', integer=True, finite=True)
A:sympy.concrete.tests.test_delta.(x, y)->symbols('x y', commutative=False)
A:sympy.concrete.tests.test_delta.n->symbols('n', integer=True, nonzero=True)
sympy.concrete.tests.test_delta.test_deltaproduct_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_add_mul_x_y_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_basic()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_kd_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_add_x_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_y_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_add_y_twokd()
sympy.concrete.tests.test_delta.test_deltaproduct_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltaproduct_trivial()
sympy.concrete.tests.test_delta.test_deltasummation_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_add_mul_x_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_add_mul_x_y_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltasummation_basic_numerical()
sympy.concrete.tests.test_delta.test_deltasummation_basic_symbolic()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_kd_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_add_x_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_kd_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_y_kd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_add_y_twokd()
sympy.concrete.tests.test_delta.test_deltasummation_mul_x_kd()
sympy.concrete.tests.test_delta.test_deltasummation_trivial()
sympy.tests.test_delta.test_deltaproduct_add_kd_kd()
sympy.tests.test_delta.test_deltaproduct_add_mul_x_y_mul_x_kd()
sympy.tests.test_delta.test_deltaproduct_basic()
sympy.tests.test_delta.test_deltaproduct_mul_add_x_kd_add_y_kd()
sympy.tests.test_delta.test_deltaproduct_mul_add_x_y_add_kd_kd()
sympy.tests.test_delta.test_deltaproduct_mul_add_x_y_add_y_kd()
sympy.tests.test_delta.test_deltaproduct_mul_add_x_y_kd()
sympy.tests.test_delta.test_deltaproduct_mul_x_add_kd_kd()
sympy.tests.test_delta.test_deltaproduct_mul_x_add_y_kd()
sympy.tests.test_delta.test_deltaproduct_mul_x_add_y_twokd()
sympy.tests.test_delta.test_deltaproduct_mul_x_kd()
sympy.tests.test_delta.test_deltaproduct_trivial()
sympy.tests.test_delta.test_deltasummation_add_kd_kd()
sympy.tests.test_delta.test_deltasummation_add_mul_x_kd_kd()
sympy.tests.test_delta.test_deltasummation_add_mul_x_y_mul_x_kd()
sympy.tests.test_delta.test_deltasummation_basic_numerical()
sympy.tests.test_delta.test_deltasummation_basic_symbolic()
sympy.tests.test_delta.test_deltasummation_mul_add_x_kd_add_y_kd()
sympy.tests.test_delta.test_deltasummation_mul_add_x_y_add_kd_kd()
sympy.tests.test_delta.test_deltasummation_mul_add_x_y_add_y_kd()
sympy.tests.test_delta.test_deltasummation_mul_add_x_y_kd()
sympy.tests.test_delta.test_deltasummation_mul_x_add_kd_kd()
sympy.tests.test_delta.test_deltasummation_mul_x_add_y_kd()
sympy.tests.test_delta.test_deltasummation_mul_x_add_y_twokd()
sympy.tests.test_delta.test_deltasummation_mul_x_kd()
sympy.tests.test_delta.test_deltasummation_trivial()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/tests/test_gosper.py----------------------------------------
A:sympy.concrete.tests.test_gosper.g->gosper_sum(f3g, (n, 1, m))
A:sympy.concrete.tests.test_gosper.a->Symbol('a', positive=True)
A:sympy.concrete.tests.test_gosper.b->Symbol('b', positive=True)
A:sympy.concrete.tests.test_gosper.n->Symbol('n', integer=True)
A:sympy.concrete.tests.test_gosper.m->Symbol('m', integer=True)
sympy.concrete.tests.test_gosper.test_gosper_nan()
sympy.concrete.tests.test_gosper.test_gosper_normal()
sympy.concrete.tests.test_gosper.test_gosper_sum()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part1()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part2()
sympy.concrete.tests.test_gosper.test_gosper_sum_AeqB_part3()
sympy.concrete.tests.test_gosper.test_gosper_sum_algebraic()
sympy.concrete.tests.test_gosper.test_gosper_sum_indefinite()
sympy.concrete.tests.test_gosper.test_gosper_sum_iterated()
sympy.concrete.tests.test_gosper.test_gosper_sum_parametric()
sympy.concrete.tests.test_gosper.test_gosper_term()
sympy.tests.test_gosper.test_gosper_nan()
sympy.tests.test_gosper.test_gosper_normal()
sympy.tests.test_gosper.test_gosper_sum()
sympy.tests.test_gosper.test_gosper_sum_AeqB_part1()
sympy.tests.test_gosper.test_gosper_sum_AeqB_part2()
sympy.tests.test_gosper.test_gosper_sum_AeqB_part3()
sympy.tests.test_gosper.test_gosper_sum_algebraic()
sympy.tests.test_gosper.test_gosper_sum_indefinite()
sympy.tests.test_gosper.test_gosper_sum_iterated()
sympy.tests.test_gosper.test_gosper_sum_parametric()
sympy.tests.test_gosper.test_gosper_term()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/concrete/tests/test_products.py----------------------------------------
A:sympy.concrete.tests.test_products.(a, k, n, m, x)->symbols('a,k,n,m,x', integer=True)
A:sympy.concrete.tests.test_products.f->simplify(g.subs(i, i + 1) / g)
A:sympy.concrete.tests.test_products.i->Symbol('i', integer=True)
A:sympy.concrete.tests.test_products.k->Symbol('k', integer=True)
A:sympy.concrete.tests.test_products.j->Symbol('j', integer=True)
A:sympy.concrete.tests.test_products.S1->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.S2->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.Sz->Product(f(i), (i, a, b)).doit()
A:sympy.concrete.tests.test_products.u->Symbol('u', integer=True)
A:sympy.concrete.tests.test_products.v->Symbol('v', integer=True)
A:sympy.concrete.tests.test_products.P->Product(f, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.w->Symbol('w', integer=True)
A:sympy.concrete.tests.test_products.S3->Product(s, (i, a, b)).doit()
A:sympy.concrete.tests.test_products.a->Function('a')
A:sympy.concrete.tests.test_products.p->Product(A * B ** k, (k, 1, 3))
A:sympy.concrete.tests.test_products.(A, B)->symbols('A B', commutative=False)
A:sympy.concrete.tests.test_products.(y, t, b, c)->symbols('y, t, b, c', integer=True)
A:sympy.concrete.tests.test_products.(b, y, c, d, z)->symbols('b, y, c, d, z', integer=True)
A:sympy.concrete.tests.test_products.(x, y, a, b, c, d)->symbols('x, y, a, b, c, d', integer=True)
sympy.concrete.tests.test_products.test__eval_product()
sympy.concrete.tests.test_products.test_change_index()
sympy.concrete.tests.test_products.test_conjugate_transpose()
sympy.concrete.tests.test_products.test_infinite_product()
sympy.concrete.tests.test_products.test_karr_convention()
sympy.concrete.tests.test_products.test_karr_proposition_2a()
sympy.concrete.tests.test_products.test_karr_proposition_2b()
sympy.concrete.tests.test_products.test_multiple_products()
sympy.concrete.tests.test_products.test_product_pow()
sympy.concrete.tests.test_products.test_rational_products()
sympy.concrete.tests.test_products.test_reorder()
sympy.concrete.tests.test_products.test_reverse_order()
sympy.concrete.tests.test_products.test_rewrite_Sum()
sympy.concrete.tests.test_products.test_simple_products()
sympy.concrete.tests.test_products.test_simplify()
sympy.concrete.tests.test_products.test_special_products()
sympy.tests.test_products.test__eval_product()
sympy.tests.test_products.test_change_index()
sympy.tests.test_products.test_conjugate_transpose()
sympy.tests.test_products.test_infinite_product()
sympy.tests.test_products.test_karr_convention()
sympy.tests.test_products.test_karr_proposition_2a()
sympy.tests.test_products.test_karr_proposition_2b()
sympy.tests.test_products.test_multiple_products()
sympy.tests.test_products.test_product_pow()
sympy.tests.test_products.test_rational_products()
sympy.tests.test_products.test_reorder()
sympy.tests.test_products.test_reverse_order()
sympy.tests.test_products.test_rewrite_Sum()
sympy.tests.test_products.test_simple_products()
sympy.tests.test_products.test_simplify()
sympy.tests.test_products.test_special_products()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/importtools.py----------------------------------------
A:sympy.external.importtools.debug_str->os.getenv('SYMPY_DEBUG', 'False')
A:sympy.external.importtools.mod->__import__(module, **__import__kwargs)
A:sympy.external.importtools.from_list->__import__kwargs.get('fromlist', tuple())
A:sympy.external.importtools.modversion->modversion(*module_version_attr_call_args)
A:sympy.external.importtools.verstr->str(min_module_version)
sympy.external.import_module(module,min_module_version=None,min_python_version=None,warn_not_installed=None,warn_old_version=None,module_version_attr='__version__',module_version_attr_call_args=None,__import__kwargs={},catch=())
sympy.external.importtools.__sympy_debug()
sympy.external.importtools.import_module(module,min_module_version=None,min_python_version=None,warn_not_installed=None,warn_old_version=None,module_version_attr='__version__',module_version_attr_call_args=None,__import__kwargs={},catch=())


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_numpy.py----------------------------------------
A:sympy.external.tests.test_numpy.numpy->import_module('numpy')
A:sympy.external.tests.test_numpy.x->Symbol('x')
A:sympy.external.tests.test_numpy.y->Symbol('y')
A:sympy.external.tests.test_numpy.one->Rational(1)
A:sympy.external.tests.test_numpy.zero->Rational(0)
A:sympy.external.tests.test_numpy.X->sympy.DeferredVector('X')
A:sympy.external.tests.test_numpy.a->symarray('a', 3)
A:sympy.external.tests.test_numpy.b->symarray('b', 3)
A:sympy.external.tests.test_numpy.m->matrix([[2, 4], [x, 6], [x, z ** 2]])
A:sympy.external.tests.test_numpy.M->Matrix([[X[0] ** 2, X[0] * X[1], X[0] * X[2]], [X[1] * X[0], X[1] ** 2, X[1] * X[2]], [X[2] * X[0], X[2] * X[1], X[2] ** 2]])
A:sympy.external.tests.test_numpy.matarr->matarray()
A:sympy.external.tests.test_numpy.c->matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='int8')
A:sympy.external.tests.test_numpy.d->matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='float64')
A:sympy.external.tests.test_numpy.sin02->sympy.mpmath.mpf('0.198669330795061215459412627')
A:sympy.external.tests.test_numpy.f->lambdify(X, M, [{'ImmutableMatrix': numpy.array}, 'numpy'])
A:sympy.external.tests.test_numpy.expected->array([[Xh[0] ** 2, Xh[0] * Xh[1], Xh[0] * Xh[2]], [Xh[1] * Xh[0], Xh[1] ** 2, Xh[1] * Xh[2]], [Xh[2] * Xh[0], Xh[2] * Xh[1], Xh[2] ** 2]])
A:sympy.external.tests.test_numpy.actual->f(Xh)
A:sympy.external.tests.test_numpy.Xh->array([1.0, 2.0, 3.0])
A:sympy.external.tests.test_numpy.syms->symbols('_0,_1,_2')
A:sympy.external.tests.test_numpy.s1->symarray('', 3)
A:sympy.external.tests.test_numpy.s2->symarray('', 3)
A:sympy.external.tests.test_numpy.asyms->symbols('a_0,a_1,a_2')
A:sympy.external.tests.test_numpy.a2d->symarray('a', (2, 3))
A:sympy.external.tests.test_numpy.(a00, a12)->symbols('a_0_0,a_1_2')
A:sympy.external.tests.test_numpy.a3d->symarray('a', (2, 3, 2))
A:sympy.external.tests.test_numpy.(a000, a120, a121)->symbols('a_0_0_0,a_1_2_0,a_1_2_1')
sympy.external.tests.test_numpy.test_Matrix1()
sympy.external.tests.test_numpy.test_Matrix2()
sympy.external.tests.test_numpy.test_Matrix3()
sympy.external.tests.test_numpy.test_Matrix4()
sympy.external.tests.test_numpy.test_Matrix_array()
sympy.external.tests.test_numpy.test_Matrix_mul()
sympy.external.tests.test_numpy.test_Matrix_sum()
sympy.external.tests.test_numpy.test_arrays()
sympy.external.tests.test_numpy.test_basics()
sympy.external.tests.test_numpy.test_conversion1()
sympy.external.tests.test_numpy.test_conversion2()
sympy.external.tests.test_numpy.test_issue_3728()
sympy.external.tests.test_numpy.test_lambdify()
sympy.external.tests.test_numpy.test_lambdify_matrix()
sympy.external.tests.test_numpy.test_lambdify_matrix_multi_input()
sympy.external.tests.test_numpy.test_lambdify_matrix_vec_input()
sympy.external.tests.test_numpy.test_lambdify_transl()
sympy.external.tests.test_numpy.test_list2numpy()
sympy.external.tests.test_numpy.test_matrix2numpy()
sympy.external.tests.test_numpy.test_matrix2numpy_conversion()
sympy.external.tests.test_numpy.test_symarray()
sympy.external.tests.test_numpy.test_systematic_basic()
sympy.external.tests.test_numpy.test_vectorize()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_codegen.py----------------------------------------
A:sympy.external.tests.test_codegen.null->open(os.devnull, 'w')
A:sympy.external.tests.test_codegen.retcode->subprocess.call(command, stdout=null, shell=True, stderr=subprocess.STDOUT)
A:sympy.external.tests.test_codegen.language->language.upper().upper()
A:sympy.external.tests.test_codegen.clean->os.getenv('SYMPY_TEST_CLEAN_TEMP', 'always').lower()
A:sympy.external.tests.test_codegen.work->tempfile.mkdtemp('_sympy_%s_test' % language, '%s_' % label)
A:sympy.external.tests.test_codegen.oldwork->os.getcwd()
A:sympy.external.tests.test_codegen.code_gen->get_code_generator(language, 'codegen')
A:sympy.external.tests.test_codegen.call_string->fortranize_double_constants(call_string)
A:sympy.external.tests.test_codegen.threshold->fortranize_double_constants(str(threshold))
A:sympy.external.tests.test_codegen.compiled->try_run(commands)
A:sympy.external.tests.test_codegen.executed->try_run(['./test.exe'])
A:sympy.external.tests.test_codegen.pattern_exp->re.compile('\\d+(\\.)?\\d*[eE]-?\\d+')
A:sympy.external.tests.test_codegen.pattern_float->re.compile('\\d+\\.\\d*(?!\\d*d)')
A:sympy.external.tests.test_codegen.code_string->re.compile('\\d+\\.\\d*(?!\\d*d)').sub(subs_float, code_string)
A:sympy.external.tests.test_codegen.routine->make_routine('test', x)
A:sympy.external.tests.test_codegen.expected->N(expr.subs(x, xval).subs(y, yval).subs(z, zval))
sympy.external.tests.test_codegen.fortranize_double_constants(code_string)
sympy.external.tests.test_codegen.is_feasible(language,commands)
sympy.external.tests.test_codegen.run_test(label,routines,numerical_tests,language,commands,friendly=True)
sympy.external.tests.test_codegen.test_C_cc()
sympy.external.tests.test_codegen.test_F95_g95()
sympy.external.tests.test_codegen.test_F95_gfortran()
sympy.external.tests.test_codegen.test_F95_ifort()
sympy.external.tests.test_codegen.test_basic_codegen()
sympy.external.tests.test_codegen.test_complicated_codegen()
sympy.external.tests.test_codegen.test_instrinsic_math2_codegen()
sympy.external.tests.test_codegen.test_intrinsic_math1_codegen()
sympy.external.tests.test_codegen.try_run(commands)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_importtools.py----------------------------------------
A:sympy.external.tests.test_importtools.matplotlib->import_module('matplotlib', __import__kwargs={'fromlist': ['cm', 'collections']}, min_module_version='1.1.0')
sympy.external.tests.test_importtools.test_no_stdlib_collections()
sympy.external.tests.test_importtools.test_no_stdlib_collections2()
sympy.external.tests.test_importtools.test_no_stdlib_collections3()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_autowrap.py----------------------------------------
A:sympy.external.tests.test_autowrap.numpy->import_module('numpy', min_module_version='1.6.1')
A:sympy.external.tests.test_autowrap.Cython->import_module('Cython', min_module_version='0.15.1')
A:sympy.external.tests.test_autowrap.f2py->import_module('numpy.f2py', __import__kwargs={'fromlist': ['f2py']})
A:sympy.external.tests.test_autowrap.(a, b, c)->symbols('a b c')
A:sympy.external.tests.test_autowrap.(n, m, d)->symbols('n m d', integer=True)
A:sympy.external.tests.test_autowrap.(A, B, C)->symbols('A B C', cls=IndexedBase)
A:sympy.external.tests.test_autowrap.i->Idx('i', m)
A:sympy.external.tests.test_autowrap.j->Idx('j', n)
A:sympy.external.tests.test_autowrap.k->Idx('k', d)
A:sympy.external.tests.test_autowrap.f->autowrap((((a + b) / c) ** 5).expand(), language, backend)
A:sympy.external.tests.test_autowrap.g->autowrap((((a + b) / c) ** 4).expand(), language, backend)
A:sympy.external.tests.test_autowrap.trace->autowrap(A[i, i], language, backend)
A:sympy.external.tests.test_autowrap.(x, y)->symbols('x y', cls=IndexedBase)
A:sympy.external.tests.test_autowrap.expr->Eq(C[i, j], A[i, k] * B[k, j])
A:sympy.external.tests.test_autowrap.mv->autowrap(expr, language, backend)
A:sympy.external.tests.test_autowrap.M->import_module('numpy', min_module_version='1.6.1').random.rand(10, 20)
A:sympy.external.tests.test_autowrap.x->import_module('numpy', min_module_version='1.6.1').random.rand(20)
A:sympy.external.tests.test_autowrap.y->import_module('numpy', min_module_version='1.6.1').dot(M, x)
A:sympy.external.tests.test_autowrap.matmat->autowrap(expr, language, backend)
A:sympy.external.tests.test_autowrap.M1->import_module('numpy', min_module_version='1.6.1').random.rand(10, 20)
A:sympy.external.tests.test_autowrap.M2->import_module('numpy', min_module_version='1.6.1').random.rand(20, 15)
A:sympy.external.tests.test_autowrap.M3->import_module('numpy', min_module_version='1.6.1').dot(M1, M2)
A:sympy.external.tests.test_autowrap.fabc->ufuncify([a, b, c], a * b + c, backend=backend)
A:sympy.external.tests.test_autowrap.facb->ufuncify([a, c, b], a * b + c, backend=backend)
A:sympy.external.tests.test_autowrap.grid->import_module('numpy', min_module_version='1.6.1').linspace(-2, 2, 50)
A:sympy.external.tests.test_autowrap.b->import_module('numpy', min_module_version='1.6.1').linspace(-5, 4, 50)
A:sympy.external.tests.test_autowrap.c->import_module('numpy', min_module_version='1.6.1').linspace(-1, 1, 50)
sympy.external.tests.test_autowrap.has_module(module)
sympy.external.tests.test_autowrap.runtest_autowrap_matrix_matrix(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_matrix_vector(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_trace(language,backend)
sympy.external.tests.test_autowrap.runtest_autowrap_twice(language,backend)
sympy.external.tests.test_autowrap.runtest_ufuncify(language,backend)
sympy.external.tests.test_autowrap.test_autowrap_matrix_matrix_C_cython()
sympy.external.tests.test_autowrap.test_autowrap_matrix_matrix_f95_f2py()
sympy.external.tests.test_autowrap.test_autowrap_matrix_vector_C_cython()
sympy.external.tests.test_autowrap.test_autowrap_matrix_vector_f95_f2py()
sympy.external.tests.test_autowrap.test_autowrap_trace_C_Cython()
sympy.external.tests.test_autowrap.test_autowrap_trace_f95_f2py()
sympy.external.tests.test_autowrap.test_ufuncify_C_Cython()
sympy.external.tests.test_autowrap.test_ufuncify_f95_f2py()
sympy.external.tests.test_autowrap.test_ufuncify_numpy()
sympy.external.tests.test_autowrap.test_wrap_twice_c_cython()
sympy.external.tests.test_autowrap.test_wrap_twice_f95_f2py()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_sage.py----------------------------------------
A:sympy.external.tests.test_sage.sage->import_module('sage.all', __import__kwargs={'fromlist': ['all']})
A:sympy.external.tests.test_sage.a->globals().copy()
A:sympy.external.tests.test_sage.e_sage->eval(expr, a)
A:sympy.external.tests.test_sage.b->globals().copy()
A:sympy.external.tests.test_sage.e_sympy->eval(expr, b)
A:sympy.external.tests.test_sage.i->sympy.integrate(log(x) / a, (x, a, a + 1))
A:sympy.external.tests.test_sage.i2->sympy.simplify(i)
A:sympy.external.tests.test_sage.s->import_module('sage.all', __import__kwargs={'fromlist': ['all']}).SR(i2)
sympy.external.tests.test_sage.check_expression(expr,var_symbols)
sympy.external.tests.test_sage.test_Catalan()
sympy.external.tests.test_sage.test_E()
sympy.external.tests.test_sage.test_GoldenRation()
sympy.external.tests.test_sage.test_NaN()
sympy.external.tests.test_sage.test_basics()
sympy.external.tests.test_sage.test_complex()
sympy.external.tests.test_sage.test_complex_fail()
sympy.external.tests.test_sage.test_euler_gamma()
sympy.external.tests.test_sage.test_functions()
sympy.external.tests.test_sage.test_integer()
sympy.external.tests.test_sage.test_issue_4023()
sympy.external.tests.test_sage.test_oo()
sympy.external.tests.test_sage.test_pi()
sympy.external.tests.test_sage.test_real()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/external/tests/test_scipy.py----------------------------------------
A:sympy.external.tests.test_scipy.scipy->import_module('scipy')
sympy.external.tests.test_scipy.eq(a,b,tol=1e-06)
sympy.external.tests.test_scipy.test_jn_zeros()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/core.py----------------------------------------
A:sympy.unify.core.is_commutative->fns.get('is_commutative', lambda x: False)
A:sympy.unify.core.is_associative->fns.get('is_associative', lambda x: False)
A:sympy.unify.core.combs->allcombinations(a.args, b.args, 'associative')
A:sympy.unify.core.d->d.copy().copy()
sympy.unify.Compound(self,op,args)
sympy.unify.Compound.__eq__(self,other)
sympy.unify.Compound.__hash__(self)
sympy.unify.Compound.__str__(self)
sympy.unify.CondVariable(self,arg,valid)
sympy.unify.CondVariable.__eq__(self,other)
sympy.unify.CondVariable.__hash__(self)
sympy.unify.CondVariable.__str__(self)
sympy.unify.Variable(self,arg)
sympy.unify.Variable.__eq__(self,other)
sympy.unify.Variable.__hash__(self)
sympy.unify.Variable.__str__(self)
sympy.unify.allcombinations(A,B,ordered)
sympy.unify.assoc(d,key,val)
sympy.unify.core.Compound(self,op,args)
sympy.unify.core.Compound.__eq__(self,other)
sympy.unify.core.Compound.__hash__(self)
sympy.unify.core.Compound.__init__(self,op,args)
sympy.unify.core.Compound.__str__(self)
sympy.unify.core.CondVariable(self,arg,valid)
sympy.unify.core.CondVariable.__eq__(self,other)
sympy.unify.core.CondVariable.__hash__(self)
sympy.unify.core.CondVariable.__init__(self,arg,valid)
sympy.unify.core.CondVariable.__str__(self)
sympy.unify.core.Variable(self,arg)
sympy.unify.core.Variable.__eq__(self,other)
sympy.unify.core.Variable.__hash__(self)
sympy.unify.core.Variable.__init__(self,arg)
sympy.unify.core.Variable.__str__(self)
sympy.unify.core.allcombinations(A,B,ordered)
sympy.unify.core.assoc(d,key,val)
sympy.unify.core.index(it,ind)
sympy.unify.core.is_args(x)
sympy.unify.core.occur_check(var,x)
sympy.unify.core.partition(it,part)
sympy.unify.core.unify(x,y,s=None,**fns)
sympy.unify.core.unify_var(var,x,s,**fns)
sympy.unify.core.unpack(x)
sympy.unify.index(it,ind)
sympy.unify.is_args(x)
sympy.unify.occur_check(var,x)
sympy.unify.partition(it,part)
sympy.unify.unify(x,y,s=None,**fns)
sympy.unify.unify_var(var,x,s,**fns)
sympy.unify.unpack(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/usympy.py----------------------------------------
A:sympy.unify.usympy.s->dict(((decons(k), decons(v)) for (k, v) in s.items()))
A:sympy.unify.usympy.ds->sympy.unify.core.unify(decons(x), decons(y), s, is_associative=is_associative, is_commutative=is_commutative, **kwargs)
sympy.unify.rebuild(s)
sympy.unify.unify(x,y,s=None,variables=(),**kwargs)
sympy.unify.usympy.construct(t)
sympy.unify.usympy.deconstruct(s,variables=())
sympy.unify.usympy.is_associative(x)
sympy.unify.usympy.is_commutative(x)
sympy.unify.usympy.mk_matchtype(typ)
sympy.unify.usympy.rebuild(s)
sympy.unify.usympy.sympy_associative(op)
sympy.unify.usympy.sympy_commutative(op)
sympy.unify.usympy.unify(x,y,s=None,variables=(),**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/rewrite.py----------------------------------------
A:sympy.unify.rewrite.expr2->rebuild(expr2)
sympy.unify.rewrite.rewriterule(source,target,variables=(),condition=None,assume=None)
sympy.unify.rewriterule(source,target,variables=(),condition=None,assume=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/tests/test_rewrite.py----------------------------------------
A:sympy.unify.tests.test_rewrite.rl->rewriterule(x + y, x ** y, [x, y], assume=Q.integer(x))
A:sympy.unify.tests.test_rewrite.a->Symbol('a')
A:sympy.unify.tests.test_rewrite.b->Symbol('b', integer=True)
A:sympy.unify.tests.test_rewrite.c->Symbol('c', integer=True)
A:sympy.unify.tests.test_rewrite.d->Symbol('d', integer=True)
A:sympy.unify.tests.test_rewrite.(a, b)->map(Symbol, 'ab')
sympy.unify.tests.test_rewrite.test_Exprs_ok()
sympy.unify.tests.test_rewrite.test_assumptions()
sympy.unify.tests.test_rewrite.test_condition_multiple()
sympy.unify.tests.test_rewrite.test_condition_simple()
sympy.unify.tests.test_rewrite.test_moderate()
sympy.unify.tests.test_rewrite.test_simple()
sympy.unify.tests.test_rewrite.test_simple_variables()
sympy.unify.tests.test_rewrite.test_sincos()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/tests/test_unify.py----------------------------------------
A:sympy.unify.tests.test_unify.(w, x, y, z)->map(Variable, 'wxyz')
A:sympy.unify.tests.test_unify.c1->Compound('CAdd', (a, b))
A:sympy.unify.tests.test_unify.c2->Compound('CAdd', (x, y))
A:sympy.unify.tests.test_unify.result->list(unify(c1, c2, {}))
A:sympy.unify.tests.test_unify.expr->C('CAdd', (1, 2))
A:sympy.unify.tests.test_unify.x->Variable('x')
A:sympy.unify.tests.test_unify.y->CondVariable('y', lambda a: a % 2 == 0)
A:sympy.unify.tests.test_unify.z->CondVariable('z', lambda a: a > 3)
A:sympy.unify.tests.test_unify.pattern->C('CAdd', (z, y))
sympy.unify.tests.test_unify._test_combinations_assoc()
sympy.unify.tests.test_unify._test_combinations_comm()
sympy.unify.tests.test_unify.is_associative(x)
sympy.unify.tests.test_unify.is_commutative(x)
sympy.unify.tests.test_unify.test_CondVariable()
sympy.unify.tests.test_unify.test_allcombinations()
sympy.unify.tests.test_unify.test_associative()
sympy.unify.tests.test_unify.test_basic()
sympy.unify.tests.test_unify.test_commutative()
sympy.unify.tests.test_unify.test_commutativity()
sympy.unify.tests.test_unify.test_defaultdict()
sympy.unify.tests.test_unify.test_ops()
sympy.unify.tests.test_unify.unify(a,b,s={})


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/unify/tests/test_sympy.py----------------------------------------
A:sympy.unify.tests.test_sympy.expr->FiniteSet(Basic(1, x), y, Basic(x, z))
A:sympy.unify.tests.test_sympy.expected->tuple([{b: 1, a: FiniteSet(y, Basic(x, z))}, {b: z, a: FiniteSet(y, Basic(1, x))}])
A:sympy.unify.tests.test_sympy.cmpd->Compound(Basic, (1, Compound(Basic, (2,)), 3))
A:sympy.unify.tests.test_sympy.(a, b, c)->map(Symbol, 'abc')
A:sympy.unify.tests.test_sympy.pattern->FiniteSet(a, Basic(x, b))
A:sympy.unify.tests.test_sympy.(a, b)->map(Symbol, 'ab')
A:sympy.unify.tests.test_sympy.a->tuple(a)
A:sympy.unify.tests.test_sympy.b->tuple(b)
A:sympy.unify.tests.test_sympy.result->list(unify(expr, pattern, {}, (a, c)))
A:sympy.unify.tests.test_sympy.(p, q)->map(Symbol, 'pq')
A:sympy.unify.tests.test_sympy.X->MatrixSymbol('X', n, n)
A:sympy.unify.tests.test_sympy.Y->MatrixSymbol('Y', 2, 2)
A:sympy.unify.tests.test_sympy.Z->MatrixSymbol('Z', 2, 3)
A:sympy.unify.tests.test_sympy.rebuilt->construct(deconstruct(expr))
A:sympy.unify.tests.test_sympy.(a, b, c, x, y)->symbols('a,b,c,x,y')
A:sympy.unify.tests.test_sympy.s->FiniteSet(a, b, c)
A:sympy.unify.tests.test_sympy.t->FiniteSet(x, y)
A:sympy.unify.tests.test_sympy.(a, b, c, x, y, z)->symbols('a,b,c,x,y,z')
sympy.unify.tests.test_sympy.iterdicteq(a,b)
sympy.unify.tests.test_sympy.test_FiniteSet_commutivity()
sympy.unify.tests.test_sympy.test_FiniteSet_complex()
sympy.unify.tests.test_sympy.test_Union()
sympy.unify.tests.test_sympy.test_and()
sympy.unify.tests.test_sympy.test_commutative_in_commutative()
sympy.unify.tests.test_sympy.test_construct()
sympy.unify.tests.test_sympy.test_deconstruct()
sympy.unify.tests.test_sympy.test_hard_match()
sympy.unify.tests.test_sympy.test_is_commutative()
sympy.unify.tests.test_sympy.test_matrix()
sympy.unify.tests.test_sympy.test_nested()
sympy.unify.tests.test_sympy.test_non_frankenAdds()
sympy.unify.tests.test_sympy.test_s_input()
sympy.unify.tests.test_sympy.test_unify()
sympy.unify.tests.test_sympy.test_unify_commutative()
sympy.unify.tests.test_sympy.test_unify_iter()
sympy.unify.tests.test_sympy.test_unify_variables()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/core.py----------------------------------------
A:sympy.strategies.core.result->rl(expr)
A:sympy.strategies.core.expr->rule(expr)
A:sympy.strategies.core.rl->ruledict.get(key(expr), identity)
A:sympy.strategies.core.objective->kwargs.get('objective', identity)
sympy.strategies.chain(*rules)
sympy.strategies.condition(cond,rule)
sympy.strategies.core.chain(*rules)
sympy.strategies.core.condition(cond,rule)
sympy.strategies.core.debug(rule,file=None)
sympy.strategies.core.do_one(*rules)
sympy.strategies.core.exhaust(rule)
sympy.strategies.core.memoize(rule)
sympy.strategies.core.minimize(*rules,**kwargs)
sympy.strategies.core.null_safe(rule)
sympy.strategies.core.switch(key,ruledict)
sympy.strategies.core.tryit(rule)
sympy.strategies.debug(rule,file=None)
sympy.strategies.do_one(*rules)
sympy.strategies.exhaust(rule)
sympy.strategies.memoize(rule)
sympy.strategies.minimize(*rules,**kwargs)
sympy.strategies.null_safe(rule)
sympy.strategies.switch(key,ruledict)
sympy.strategies.tryit(rule)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/traverse.py----------------------------------------
A:sympy.strategies.traverse.(op, new, children, leaf)->map(fns.get, ('op', 'new', 'children', 'leaf'))
A:sympy.strategies.traverse.args->map(rule, children(expr))
sympy.strategies.traverse.bottom_up(rule,fns=basic_fns)
sympy.strategies.traverse.bottom_up_once(rule,fns=basic_fns)
sympy.strategies.traverse.sall(rule,fns=basic_fns)
sympy.strategies.traverse.top_down(rule,fns=basic_fns)
sympy.strategies.traverse.top_down_once(rule,fns=basic_fns)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/rl.py----------------------------------------
A:sympy.strategies.rl.ids->list(map(isid, expr.args))
A:sympy.strategies.rl.groups->sift(expr.args, key)
A:sympy.strategies.rl.counts->dict(((k, sum(map(count, args))) for (k, args) in groups.items()))
sympy.strategies.distribute(A,B)
sympy.strategies.flatten(expr,new=new)
sympy.strategies.glom(key,count,combine)
sympy.strategies.rebuild(expr)
sympy.strategies.rl.distribute(A,B)
sympy.strategies.rl.flatten(expr,new=new)
sympy.strategies.rl.glom(key,count,combine)
sympy.strategies.rl.rebuild(expr)
sympy.strategies.rl.rm_id(isid,new=new)
sympy.strategies.rl.sort(key,new=new)
sympy.strategies.rl.subs(a,b)
sympy.strategies.rl.unpack(expr)
sympy.strategies.rm_id(isid,new=new)
sympy.strategies.sort(key,new=new)
sympy.strategies.unpack(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tree.py----------------------------------------
A:sympy.strategies.tree.optimize->partial(minimize, objective=objective)
sympy.strategies.tree.allresults(tree,leaf=yieldify)
sympy.strategies.tree.brute(tree,objective=identity,**kwargs)
sympy.strategies.tree.greedy(tree,objective=identity,**kwargs)
sympy.strategies.tree.treeapply(tree,join,leaf=identity)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tools.py----------------------------------------
sympy.strategies.canon(*rules,**kwargs)
sympy.strategies.tools.canon(*rules,**kwargs)
sympy.strategies.tools.subs(d,**kwargs)
sympy.strategies.tools.typed(ruletypes)
sympy.strategies.typed(ruletypes)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/util.py----------------------------------------
A:sympy.strategies.util.d->d.copy().copy()
A:sympy.strategies.util.expr_fns->assoc(basic_fns, 'new', lambda op, *args: op(*args))
sympy.strategies.util.assoc(d,k,v)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/core.py----------------------------------------
A:sympy.strategies.branch.core.seen->set([])
sympy.strategies.branch.chain(*brules)
sympy.strategies.branch.condition(cond,brule)
sympy.strategies.branch.core.chain(*brules)
sympy.strategies.branch.core.condition(cond,brule)
sympy.strategies.branch.core.debug(brule,file=None)
sympy.strategies.branch.core.do_one(*brules)
sympy.strategies.branch.core.exhaust(brule)
sympy.strategies.branch.core.identity(x)
sympy.strategies.branch.core.multiplex(*brules)
sympy.strategies.branch.core.notempty(brule)
sympy.strategies.branch.core.onaction(brule,fn)
sympy.strategies.branch.core.sfilter(pred,brule)
sympy.strategies.branch.core.yieldify(rl)
sympy.strategies.branch.debug(brule,file=None)
sympy.strategies.branch.do_one(*brules)
sympy.strategies.branch.exhaust(brule)
sympy.strategies.branch.identity(x)
sympy.strategies.branch.multiplex(*brules)
sympy.strategies.branch.notempty(brule)
sympy.strategies.branch.onaction(brule,fn)
sympy.strategies.branch.sfilter(pred,brule)
sympy.strategies.branch.yieldify(rl)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/traverse.py----------------------------------------
A:sympy.strategies.branch.traverse.(op, new, children, leaf)->map(fns.get, ('op', 'new', 'children', 'leaf'))
A:sympy.strategies.branch.traverse.myop->op(expr)
A:sympy.strategies.branch.traverse.argss->product(*map(brule, children(expr)))
sympy.strategies.branch.traverse.sall(brule,fns=basic_fns)
sympy.strategies.branch.traverse.top_down(brule,fns=basic_fns)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/tools.py----------------------------------------
sympy.strategies.branch.canon(*rules)
sympy.strategies.branch.tools.canon(*rules)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/tests/test_traverse.py----------------------------------------
A:sympy.strategies.branch.tests.test_traverse.expr->Basic(1, 2, Basic(3, 4))
A:sympy.strategies.branch.tests.test_traverse.expected->Basic(2, 3, Basic(3, 4))
A:sympy.strategies.branch.tests.test_traverse.brl->sall(do_one(inc, identity))
sympy.strategies.branch.tests.test_traverse.inc(x)
sympy.strategies.branch.tests.test_traverse.test_sall()
sympy.strategies.branch.tests.test_traverse.test_top_down_big_tree()
sympy.strategies.branch.tests.test_traverse.test_top_down_easy()
sympy.strategies.branch.tests.test_traverse.test_top_down_harder_function()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/tests/test_tools.py----------------------------------------
A:sympy.strategies.branch.tests.test_tools.expr->Basic(2, Basic(5, 3), 8)
A:sympy.strategies.branch.tests.test_tools.expected->set([Basic(0, Basic(0, 0), 10), Basic(0, Basic(10, 0), 10)])
A:sympy.strategies.branch.tests.test_tools.brl->canon(branch5)
sympy.strategies.branch.tests.test_tools.branch5(x)
sympy.strategies.branch.tests.test_tools.posdec(x)
sympy.strategies.branch.tests.test_tools.test_split5()
sympy.strategies.branch.tests.test_tools.test_zero_ints()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/branch/tests/test_core.py----------------------------------------
A:sympy.strategies.branch.tests.test_core.brl->notempty(ident_if_even)
A:sympy.strategies.branch.tests.test_core.file->StringIO()
A:sympy.strategies.branch.tests.test_core.rl->debug(posdec, file)
A:sympy.strategies.branch.tests.test_core.log->StringIO().getvalue()
A:sympy.strategies.branch.tests.test_core.yinc->yieldify(inc)
sympy.strategies.branch.tests.test_branch5(x)
sympy.strategies.branch.tests.test_core.branch5(x)
sympy.strategies.branch.tests.test_core.inc(x)
sympy.strategies.branch.tests.test_core.one_to_n(n)
sympy.strategies.branch.tests.test_core.posdec(x)
sympy.strategies.branch.tests.test_core.test_chain()
sympy.strategies.branch.tests.test_core.test_condition()
sympy.strategies.branch.tests.test_core.test_debug()
sympy.strategies.branch.tests.test_core.test_do_one()
sympy.strategies.branch.tests.test_core.test_exhaust()
sympy.strategies.branch.tests.test_core.test_multiplex()
sympy.strategies.branch.tests.test_core.test_notempty()
sympy.strategies.branch.tests.test_core.test_onaction()
sympy.strategies.branch.tests.test_core.test_sfilter()
sympy.strategies.branch.tests.test_core.test_yieldify()
sympy.strategies.branch.tests.test_inc(x)
sympy.strategies.branch.tests.test_one_to_n(n)
sympy.strategies.branch.tests.test_posdec(x)
sympy.strategies.branch.tests.test_test_chain()
sympy.strategies.branch.tests.test_test_condition()
sympy.strategies.branch.tests.test_test_debug()
sympy.strategies.branch.tests.test_test_do_one()
sympy.strategies.branch.tests.test_test_exhaust()
sympy.strategies.branch.tests.test_test_multiplex()
sympy.strategies.branch.tests.test_test_notempty()
sympy.strategies.branch.tests.test_test_onaction()
sympy.strategies.branch.tests.test_test_sfilter()
sympy.strategies.branch.tests.test_test_yieldify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_traverse.py----------------------------------------
A:sympy.strategies.tests.test_traverse.(x, y, z)->symbols('x,y,z')
A:sympy.strategies.tests.test_traverse.zero_onelevel->sall(zero_symbols)
A:sympy.strategies.tests.test_traverse.zero_all_symbols->trav(zero_symbols)
A:sympy.strategies.tests.test_traverse.expr->Basic(1, 'a', Basic(2, 'b'))
A:sympy.strategies.tests.test_traverse.expected->Basic(2, 'a', Basic(3, 'b'))
A:sympy.strategies.tests.test_traverse.rl->trav(add_one_if_can)
A:sympy.strategies.tests.test_traverse.top_rl->top_down_once(rl)
A:sympy.strategies.tests.test_traverse.bottom_rl->bottom_up_once(rl)
A:sympy.strategies.tests.test_traverse.(x, y)->map(Symbol, 'xy')
A:sympy.strategies.tests.test_traverse.e->bottom_up(lambda x: x + 1, expr_fns)(expr)
A:sympy.strategies.tests.test_traverse.b->bottom_up(lambda x: Basic.__new__(Add, x, 1), basic_fns)(expr)
sympy.strategies.tests.test_traverse.Basic2(Basic)
sympy.strategies.tests.test_traverse._test_global_traversal(trav)
sympy.strategies.tests.test_traverse._test_stop_on_non_basics(trav)
sympy.strategies.tests.test_traverse.test_bottom_up()
sympy.strategies.tests.test_traverse.test_bottom_up_once()
sympy.strategies.tests.test_traverse.test_expr_fns()
sympy.strategies.tests.test_traverse.test_sall()
sympy.strategies.tests.test_traverse.test_top_down()
sympy.strategies.tests.test_traverse.test_top_down_once()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_strat.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_tools.py----------------------------------------
A:sympy.strategies.tests.test_tools.(a, b, c, d, e, f)->symbols('a,b,c,d,e,f')
A:sympy.strategies.tests.test_tools.expr->Basic(a, Basic(b, c), Basic(d, Basic(e)))
A:sympy.strategies.tests.test_tools.result->Basic(d, Basic(b, c), Basic(a, Basic(f)))
A:sympy.strategies.tests.test_tools.rmzeros->rm_id(lambda x: x == 0)
A:sympy.strategies.tests.test_tools.rmones->rm_id(lambda x: x == 1)
A:sympy.strategies.tests.test_tools.remove_something->typed({A: rmzeros, B: rmones})
sympy.strategies.tests.test_tools.test_subs()
sympy.strategies.tests.test_tools.test_subs_empty()
sympy.strategies.tests.test_tools.test_typed()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_rl.py----------------------------------------
A:sympy.strategies.tests.test_rl.rmzeros->rm_id(lambda x: x == 0)
A:sympy.strategies.tests.test_rl.rl->subs(1, 2)
A:sympy.strategies.tests.test_rl.result->rl(Add(x, -x, 3 * x, 2, 3, evaluate=False))
A:sympy.strategies.tests.test_rl.expected->Add(Mul(2, x), Mul(2, y))
A:sympy.strategies.tests.test_rl.distribute_t12->distribute(T1, T2)
A:sympy.strategies.tests.test_rl.(x, y)->symbols('x, y')
A:sympy.strategies.tests.test_rl.expr->sympy.Basic.__new__(Add, 1, 2)
A:sympy.strategies.tests.test_rl.distribute_mul->distribute(Mul, Add)
sympy.strategies.tests.test_rl.test_distribute()
sympy.strategies.tests.test_rl.test_distribute_add_mul()
sympy.strategies.tests.test_rl.test_flatten()
sympy.strategies.tests.test_rl.test_glom()
sympy.strategies.tests.test_rl.test_rebuild()
sympy.strategies.tests.test_rl.test_rm_id()
sympy.strategies.tests.test_rl.test_sort()
sympy.strategies.tests.test_rl.test_subs()
sympy.strategies.tests.test_rl.test_unpack()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_core.py----------------------------------------
A:sympy.strategies.tests.test_core.safe_rl->tryit(rl)
A:sympy.strategies.tests.test_core.sink->exhaust(posdec)
A:sympy.strategies.tests.test_core.rl->minimize(inc, dec, objective=lambda x: -x)
A:sympy.strategies.tests.test_core.rule->do_one(rl1, rl2)
A:sympy.strategies.tests.test_core.file->StringIO()
A:sympy.strategies.tests.test_core.log->StringIO().getvalue()
sympy.strategies.tests.test_core.posdec(x)
sympy.strategies.tests.test_core.test_chain()
sympy.strategies.tests.test_core.test_condition()
sympy.strategies.tests.test_core.test_debug()
sympy.strategies.tests.test_core.test_do_one()
sympy.strategies.tests.test_core.test_exhaust()
sympy.strategies.tests.test_core.test_memoize()
sympy.strategies.tests.test_core.test_minimize()
sympy.strategies.tests.test_core.test_null_safe()
sympy.strategies.tests.test_core.test_switch()
sympy.strategies.tests.test_core.test_tryit()
sympy.strategies.tests.test_posdec(x)
sympy.strategies.tests.test_test_chain()
sympy.strategies.tests.test_test_condition()
sympy.strategies.tests.test_test_debug()
sympy.strategies.tests.test_test_do_one()
sympy.strategies.tests.test_test_exhaust()
sympy.strategies.tests.test_test_memoize()
sympy.strategies.tests.test_test_minimize()
sympy.strategies.tests.test_test_null_safe()
sympy.strategies.tests.test_test_switch()
sympy.strategies.tests.test_test_tryit()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/strategies/tests/test_tree.py----------------------------------------
A:sympy.strategies.tests.test_tree.maximize->partial(minimize, objective=lambda x: -x)
A:sympy.strategies.tests.test_tree.fn->brute(tree, lambda x: -x)
A:sympy.strategies.tests.test_tree.lowest->greedy(tree)
A:sympy.strategies.tests.test_tree.highest->greedy(tree, objective=lambda x: -x)
sympy.strategies.tests.test_tree.test_allresults()
sympy.strategies.tests.test_tree.test_brute()
sympy.strategies.tests.test_tree.test_greedy()
sympy.strategies.tests.test_tree.test_treeapply()
sympy.strategies.tests.test_tree.test_treeapply_leaf()
sympy.strategies.tests.test_tree.test_treeapply_strategies()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/tensor.py----------------------------------------
A:sympy.tensor.tensor.tids_sing->TIDS([i], *TIDS.free_dum_from_indices(*indices[cur_pos:cur_pos + i.rank]))
A:sympy.tensor.tensor.tids->TIDS(components, free, dum)
A:sympy.tensor.tensor.dummy_index->TensorIndex('dummy_index_{0}'.format(i), tensor_index_type)
A:sympy.tensor.tensor.n->line.index(min(line))
A:sympy.tensor.tensor.free_dict1->dict([(i if i.is_up else -i, (pos, cpos, i)) for (i, pos, cpos) in f.free])
A:sympy.tensor.tensor.free_dict2->dict([(i if i.is_up else -i, (pos, cpos, i)) for (i, pos, cpos) in g.free])
A:sympy.tensor.tensor.nc1->len(f.components)
A:sympy.tensor.tensor.cv->list(zip(self.components, range(len(self.components))))
A:sympy.tensor.tensor.c->cv[j - 1][0].commutes_with(cv[j][0])
A:sympy.tensor.tensor.perm->_af_invert(perm_inv)
A:sympy.tensor.tensor.pos->len(self.free)
A:sympy.tensor.tensor.j->len(self.free)
A:sympy.tensor.tensor.comm->_TensorManager().get_comm(h._comm, h._comm)
A:sympy.tensor.tensor.nfree->len(sorted_free)
A:sympy.tensor.tensor.(idum, cov)->divmod(j, 2)
A:sympy.tensor.tensor._substitutions_dict->dict()
A:sympy.tensor.tensor._substitutions_dict_tensmul->dict()
A:sympy.tensor.tensor.dat->self.substitute_indices((v1[1], -auto_index))._get(key)
A:sympy.tensor.tensor.numpy->import_module('numpy')
A:sympy.tensor.tensor.tensmul_list->key.split()
A:sympy.tensor.tensor.signature->tuple([i.is_up for i in tensmul_list[0].get_indices()])
A:sympy.tensor.tensor.(data_result, tensmul_result)->self.substitute_indices((v1[1], -auto_index)).data_product_tensors(data_list, tensmul_list)
A:sympy.tensor.tensor.(components, free, dum)->TIDS.mul(tensmul1, tensmul2)
A:sympy.tensor.tensor.data->_TensorDataLazyEvaluator.parse_data(data)
A:sympy.tensor.tensor.newdata->self.substitute_indices((v1[1], -auto_index)).data_tensorhead_from_tensmul(data, key, tensorhead)
A:sympy.tensor.tensor.(key, data)->self.substitute_indices((v1[1], -auto_index))._assign_data_to_tensor_expr(key, data)
A:sympy.tensor.tensor.nidx->self_free.index(-jindex[0])
A:sympy.tensor.tensor.contracted_ndarray->import_module('numpy').tensordot(ndarray1, ndarray2, (axes1, axes2))
A:sympy.tensor.tensor._TensorDataLazyEvaluator._substitutions_dict[prod]->mul_function()
A:sympy.tensor.tensor._TensorDataLazyEvaluator._substitutions_dict[addition]->add_function()
A:sympy.tensor.tensor.inverse_transpose->self.substitute_indices((v1[1], -auto_index)).inverse_transpose_matrix(data)
A:sympy.tensor.tensor.m->Matrix(ndarray).inv()
A:sympy.tensor.tensor.invt->Matrix(inverse_transpose)
A:sympy.tensor.tensor.nd->indices[:i].index(-indx1)
A:sympy.tensor.tensor.new_data->import_module('numpy').swapaxes(new_data, i, j)
A:sympy.tensor.tensor._TensorDataLazyEvaluator._substitutions_dict[new_tensmul]->sorted_compo()
A:sympy.tensor.tensor.vsympify->import_module('numpy').vectorize(sympify)
A:sympy.tensor.tensor._tensor_data_substitution_dict->_TensorDataLazyEvaluator()
A:sympy.tensor.tensor.TensorManager->_TensorManager()
A:sympy.tensor.tensor.name->'_i{0}'.format(len(tensortype._autogenerated))
A:sympy.tensor.tensor.obj->sympy.core.Basic.__new__(cls, coeff, t_components, t_indices)
A:sympy.tensor.tensor.obj._name->str(name)
A:sympy.tensor.tensor.sym2->TensorSymmetry(get_symmetric_group_sgs(2))
A:sympy.tensor.tensor.S2->TensorType([self] * 2, sym2)
A:sympy.tensor.tensor.obj.metric->S2(metric_name)
A:sympy.tensor.tensor.obj._delta->sympy.core.Basic.__new__(cls, coeff, t_components, t_indices).get_kronecker_delta()
A:sympy.tensor.tensor.obj._epsilon->sympy.core.Basic.__new__(cls, coeff, t_components, t_indices).get_epsilon()
A:sympy.tensor.tensor.self._auto_right->TensorIndex('auto_right', self)
A:sympy.tensor.tensor.self._auto_left->TensorIndex('auto_left', self)
A:sympy.tensor.tensor.self._auto_index->TensorIndex('auto_index', self)
A:sympy.tensor.tensor.newndarray->import_module('numpy').zeros((dim, dim), dtype=object)
A:sympy.tensor.tensor.delta->self.substitute_indices((v1[1], -auto_index)).get_kronecker_delta()
A:sympy.tensor.tensor.i1->TensorIndex('i1', self)
A:sympy.tensor.tensor.i2->TensorIndex('i2', self)
A:sympy.tensor.tensor.delta(i1, -i2).data->_TensorDataLazyEvaluator.parse_data(eye(dim1))
A:sympy.tensor.tensor.sym->tensorsymmetry(*sym)
A:sympy.tensor.tensor.Sdim->TensorType([self] * self._eps_dim, sym)
A:sympy.tensor.tensor.epsilon->Sdim('Eps')
A:sympy.tensor.tensor.name_symbol->Symbol(name)
A:sympy.tensor.tensor.t1->t(*indices[pos:pos + t._rank])
A:sympy.tensor.tensor.base->Tuple(*base)
A:sympy.tensor.tensor.generators->Tuple(*generators)
A:sympy.tensor.tensor.bsgs->get_symmetric_group_sgs(n)
A:sympy.tensor.tensor.(base, sgs)->bsgs_direct_product(base, sgs, basex, sgsx)
A:sympy.tensor.tensor.(basex, sgsx)->tableau2bsgs(a)
A:sympy.tensor.tensor.S->TensorType(typ, sym)
A:sympy.tensor.tensor.th->S(name, comm, matrix_behavior=matrix_behavior)
A:sympy.tensor.tensor.comm2i->_TensorManager().comm_symbols2i(comm)
A:sympy.tensor.tensor.obj._rank->len(obj.index_types)
A:sympy.tensor.tensor.r->_TensorManager().get_comm(self._comm, other._comm)
A:sympy.tensor.tensor.matrix_behavior_kinds->dict()
A:sympy.tensor.tensor.indices->list(indices)
A:sympy.tensor.tensor.(indices, matrix_behavior_kinds)->self.substitute_indices((v1[1], -auto_index))._check_auto_matrix_indices_in_call(*indices)
A:sympy.tensor.tensor.tmul->self.fun_eval(*list(zip(free_args, indices))).perm2tensor(can, True)
A:sympy.tensor.tensor.marray->import_module('numpy').tensordot(marray, numpy.tensordot(metric[0]._tensortype.data, marray, (1, 0)), (0, 0))
A:sympy.tensor.tensor.expr->i.simplify_this_type(expr)
A:sympy.tensor.tensor.args->Tuple(*args)
A:sympy.tensor.tensor.a->TensAdd._tensAdd_collect_terms(args)
A:sympy.tensor.tensor.obj._args->tuple(a)
A:sympy.tensor.tensor.auto_left_types->set([])
A:sympy.tensor.tensor.auto_right_types->set([])
A:sympy.tensor.tensor.arg_auto_left_types->set([])
A:sympy.tensor.tensor.arg_auto_right_types->set([])
A:sympy.tensor.tensor.indices0->set([x[0] for x in args[0].free])
A:sympy.tensor.tensor.t->self.substitute_indices((v1[1], -auto_index)).fun_eval(*list(zip(free_args, indices)))
A:sympy.tensor.tensor.prev->TensMul.from_data(prev_coeff, prev.components, prev.free, prev.dum)
A:sympy.tensor.tensor.index_tuples->list(zip(free_args, indices))
A:sympy.tensor.tensor.res->'*'.join(a)
A:sympy.tensor.tensor.other->sympify(other)
A:sympy.tensor.tensor.y->x.substitute_indices(*index_tuples)
A:sympy.tensor.tensor.s->s.replace('+ -', '- ').replace('+ -', '- ')
A:sympy.tensor.tensor.coeff->sympify(coeff)
A:sympy.tensor.tensor.t_components->Tuple(*components)
A:sympy.tensor.tensor.t_indices->Tuple(*indices)
A:sympy.tensor.tensor.obj._is_canon_bp->kw_args.get('is_canon_bp', False)
A:sympy.tensor.tensor.obj._matrix_behavior_kinds->dict()
A:sympy.tensor.tensor.cdt->defaultdict(int)
A:sympy.tensor.tensor.cdt[indx._tensortype]->max(cdt[indx._tensortype], int(indx._name.split('_')[1]) + 1)
A:sympy.tensor.tensor.indices[start1 + ipos1]->TensorIndex(fmt % nd, typ1)
A:sympy.tensor.tensor.indices[start2 + ipos2]->TensorIndex(fmt % nd, typ1, False)
A:sympy.tensor.tensor.res[0]->TensMul.from_data(self._coeff, res[0].components, res[0]._tids.free, res[0]._tids.dum, is_canon_bp=res[0]._is_canon_bp)
A:sympy.tensor.tensor.self->self.substitute_indices((v1[1], -auto_index)).substitute_indices((v1[1], -auto_index))
A:sympy.tensor.tensor.(new_tids, sign)->self.substitute_indices((v1[1], -auto_index)).substitute_indices((v1[1], -auto_index))._tids.sorted_components()
A:sympy.tensor.tensor.new_tids->self.substitute_indices((v1[1], -auto_index)).substitute_indices((v1[1], -auto_index))._tids.perm2tensor(g, canon_bp)
A:sympy.tensor.tensor.(g, dummies, msym, v)->self.substitute_indices((v1[1], -auto_index)).fun_eval(*list(zip(free_args, indices)))._tids.canon_args()
A:sympy.tensor.tensor.can->canonicalize(g, dummies, msym, *v)
A:sympy.tensor.tensor.elim->set()
A:sympy.tensor.tensor.free->sorted(t_r.free, key=lambda x: x[1])
A:sympy.tensor.tensor.t3->TensAdd(*a3)
A:sympy.tensor.tensor.lines->_join_lines(lines)
sympy.TIDS(self,components,free,dum)
sympy.TIDS.__mul__(self,other)
sympy.TIDS.__repr__(self)
sympy.TIDS.__str__(self)
sympy.TIDS.canon_args(self)
sympy.TIDS.free_dum_from_indices(*indices)
sympy.TIDS.from_components_and_indices(components,indices)
sympy.TIDS.get_components_with_free_indices(self)
sympy.TIDS.mul(f,g)
sympy.TIDS.perm2tensor(self,g,canon_bp=False)
sympy.TIDS.sorted_components(self)
sympy.TIDS.to_indices(self)
sympy.TensAdd(cls,*args,**kw_args)
sympy.TensAdd.__add__(self,other)
sympy.TensAdd.__div__(self,other)
sympy.TensAdd.__getitem__(self,item)
sympy.TensAdd.__iter__(self)
sympy.TensAdd.__mul__(self,other)
sympy.TensAdd.__radd__(self,other)
sympy.TensAdd.__rdiv__(self,other)
sympy.TensAdd.__rmul__(self,other)
sympy.TensAdd.__rsub__(self,other)
sympy.TensAdd.__sub__(self,other)
sympy.TensAdd._print(self)
sympy.TensAdd._tensAdd_check(args)
sympy.TensAdd._tensAdd_check_automatrix(args)
sympy.TensAdd._tensAdd_collect_terms(args)
sympy.TensAdd._tensAdd_flatten(args)
sympy.TensAdd.canon_bp(self)
sympy.TensAdd.contract_delta(self,delta)
sympy.TensAdd.contract_metric(self,g)
sympy.TensAdd.data(self)
sympy.TensAdd.data(self)
sympy.TensAdd.data(self,data)
sympy.TensAdd.equals(self,other)
sympy.TensAdd.free_args(self)
sympy.TensAdd.from_TIDS_list(coeff,tids_list)
sympy.TensAdd.fun_eval(self,*index_tuples)
sympy.TensAdd.rank(self)
sympy.TensAdd.substitute_indices(self,*index_tuples)
sympy.TensExpr(Basic)
sympy.TensExpr.__abs__(self)
sympy.TensExpr.__add__(self,other)
sympy.TensExpr.__div__(self,other)
sympy.TensExpr.__mul__(self,other)
sympy.TensExpr.__neg__(self)
sympy.TensExpr.__pow__(self,other)
sympy.TensExpr.__radd__(self,other)
sympy.TensExpr.__rdiv__(self,other)
sympy.TensExpr.__rmul__(self,other)
sympy.TensExpr.__rpow__(self,other)
sympy.TensExpr.__rsub__(self,other)
sympy.TensExpr.__sub__(self,other)
sympy.TensExpr._eval_simplify(self,ratio,measure)
sympy.TensExpr.get_matrix(self)
sympy.TensMul(cls,coeff,*args,**kw_args)
sympy.TensMul.__add__(self,other)
sympy.TensMul.__div__(self,other)
sympy.TensMul.__getitem__(self,item)
sympy.TensMul.__iter__(self)
sympy.TensMul.__mul__(self,other)
sympy.TensMul.__radd__(self,other)
sympy.TensMul.__rdiv__(self,other)
sympy.TensMul.__rmul__(self,other)
sympy.TensMul.__rsub__(self,other)
sympy.TensMul.__sub__(self,other)
sympy.TensMul._print(self)
sympy.TensMul.canon_bp(self)
sympy.TensMul.coeff(self)
sympy.TensMul.components(self)
sympy.TensMul.contract_delta(self,delta)
sympy.TensMul.contract_metric(self,g)
sympy.TensMul.data(self)
sympy.TensMul.data(self)
sympy.TensMul.data(self,data)
sympy.TensMul.dum(self)
sympy.TensMul.equals(self,other)
sympy.TensMul.free(self)
sympy.TensMul.free_args(self)
sympy.TensMul.from_TIDS(coeff,tids,**kw_args)
sympy.TensMul.from_data(coeff,components,free,dum,**kw_args)
sympy.TensMul.fun_eval(self,*index_tuples)
sympy.TensMul.get_indices(self)
sympy.TensMul.perm2tensor(self,g,canon_bp=False)
sympy.TensMul.rank(self)
sympy.TensMul.sorted_components(self)
sympy.TensMul.split(self)
sympy.TensMul.substitute_indices(self,*index_tuples)
sympy.TensMul.types(self)
sympy.TensorHead(cls,name,typ,comm=0,matrix_behavior=0,**kw_args)
sympy.TensorHead.__iter__(self)
sympy.TensorHead.__lt__(self,other)
sympy.TensorHead.__pow__(self,other)
sympy.TensorHead._check_auto_matrix_indices_in_call(self,*indices)
sympy.TensorHead._components_data_full_destroy(self)
sympy.TensorHead._print(self)
sympy.TensorHead.comm(self)
sympy.TensorHead.commutes_with(self,other)
sympy.TensorHead.data(self)
sympy.TensorHead.data(self)
sympy.TensorHead.data(self,data)
sympy.TensorHead.index_types(self)
sympy.TensorHead.name(self)
sympy.TensorHead.rank(self)
sympy.TensorHead.symmetry(self)
sympy.TensorHead.typ(self)
sympy.TensorHead.types(self)
sympy.TensorIndex(cls,name,tensortype,is_up=True)
sympy.TensorIndex.__lt__(self,other)
sympy.TensorIndex.__neg__(self)
sympy.TensorIndex._print(self)
sympy.TensorIndex.is_up(self)
sympy.TensorIndex.name(self)
sympy.TensorIndex.tensortype(self)
sympy.TensorIndexType(cls,name,metric=False,dim=None,eps_dim=None,dummy_fmt=None)
sympy.TensorIndexType.__lt__(self,other)
sympy.TensorIndexType.__str__(self)
sympy.TensorIndexType._components_data_full_destroy(self)
sympy.TensorIndexType.auto_index(self)
sympy.TensorIndexType.auto_left(self)
sympy.TensorIndexType.auto_right(self)
sympy.TensorIndexType.data(self)
sympy.TensorIndexType.data(self)
sympy.TensorIndexType.data(self,data)
sympy.TensorIndexType.delta(self)
sympy.TensorIndexType.dim(self)
sympy.TensorIndexType.dummy_fmt(self)
sympy.TensorIndexType.eps_dim(self)
sympy.TensorIndexType.epsilon(self)
sympy.TensorIndexType.get_epsilon(self)
sympy.TensorIndexType.get_kronecker_delta(self)
sympy.TensorIndexType.name(self)
sympy.TensorSymmetry(cls,*args,**kw_args)
sympy.TensorSymmetry.base(self)
sympy.TensorSymmetry.generators(self)
sympy.TensorSymmetry.rank(self)
sympy.TensorType(cls,index_types,symmetry,**kw_args)
sympy.TensorType.__str__(self)
sympy.TensorType.index_types(self)
sympy.TensorType.symmetry(self)
sympy.TensorType.types(self)
sympy.VTIDS(self,components,free,dum,data)
sympy.VTIDS.correct_signature_from_indices(self,data,indices,free,dum)
sympy.VTIDS.flip_index_by_metric(data,metric,pos)
sympy.VTIDS.parse_data(data)
sympy._TensorDataLazyEvaluator(CantSympify)
sympy._TensorDataLazyEvaluator.__contains__(self,key)
sympy._TensorDataLazyEvaluator.__delitem__(self,key)
sympy._TensorDataLazyEvaluator.__getitem__(self,key)
sympy._TensorDataLazyEvaluator.__setitem__(self,key,value)
sympy._TensorDataLazyEvaluator._assign_data_to_tensor_expr(self,key,data)
sympy._TensorDataLazyEvaluator._contract_ndarray(free1,free2,ndarray1,ndarray2)
sympy._TensorDataLazyEvaluator._correct_signature_from_indices(data,indices,free,dum,inverse=False)
sympy._TensorDataLazyEvaluator._flip_index_by_metric(data,metric,pos)
sympy._TensorDataLazyEvaluator._get(self,key)
sympy._TensorDataLazyEvaluator._sort_data_axes(old,new)
sympy._TensorDataLazyEvaluator.add_metric_data(self,metric,data)
sympy._TensorDataLazyEvaluator.add_rearrange_tensmul_parts(new_tensmul,old_tensmul)
sympy._TensorDataLazyEvaluator.add_tensor_add(addition,f,g)
sympy._TensorDataLazyEvaluator.add_tensor_mul(prod,f,g)
sympy._TensorDataLazyEvaluator.data_product_tensors(self,data_list,tensmul_list)
sympy._TensorDataLazyEvaluator.data_tensmul_from_tensorhead(self,tensmul,tensorhead)
sympy._TensorDataLazyEvaluator.data_tensorhead_from_tensmul(self,data,tensmul,tensorhead)
sympy._TensorDataLazyEvaluator.inverse_matrix(ndarray)
sympy._TensorDataLazyEvaluator.inverse_transpose_matrix(ndarray)
sympy._TensorDataLazyEvaluator.parse_data(data)
sympy._TensorManager(self)
sympy._TensorManager._comm_init(self)
sympy._TensorManager.clear(self)
sympy._TensorManager.comm(self)
sympy._TensorManager.comm_i2symbol(self,i)
sympy._TensorManager.comm_symbols2i(self,i)
sympy._TensorManager.get_comm(self,i,j)
sympy._TensorManager.set_comm(self,i,j,c)
sympy._TensorManager.set_comms(self,*args)
sympy.canon_bp(p)
sympy.get_lines(ex,index_type)
sympy.riemann_cyclic(t2)
sympy.riemann_cyclic_replace(t_r)
sympy.tensor.tensor.TIDS(self,components,free,dum)
sympy.tensor.tensor.TIDS.__init__(self,components,free,dum)
sympy.tensor.tensor.TIDS.__mul__(self,other)
sympy.tensor.tensor.TIDS.__repr__(self)
sympy.tensor.tensor.TIDS.__str__(self)
sympy.tensor.tensor.TIDS.canon_args(self)
sympy.tensor.tensor.TIDS.free_dum_from_indices(*indices)
sympy.tensor.tensor.TIDS.from_components_and_indices(components,indices)
sympy.tensor.tensor.TIDS.get_components_with_free_indices(self)
sympy.tensor.tensor.TIDS.mul(f,g)
sympy.tensor.tensor.TIDS.perm2tensor(self,g,canon_bp=False)
sympy.tensor.tensor.TIDS.sorted_components(self)
sympy.tensor.tensor.TIDS.to_indices(self)
sympy.tensor.tensor.TensAdd(cls,*args,**kw_args)
sympy.tensor.tensor.TensAdd.__add__(self,other)
sympy.tensor.tensor.TensAdd.__div__(self,other)
sympy.tensor.tensor.TensAdd.__getitem__(self,item)
sympy.tensor.tensor.TensAdd.__iter__(self)
sympy.tensor.tensor.TensAdd.__mul__(self,other)
sympy.tensor.tensor.TensAdd.__new__(cls,*args,**kw_args)
sympy.tensor.tensor.TensAdd.__radd__(self,other)
sympy.tensor.tensor.TensAdd.__rdiv__(self,other)
sympy.tensor.tensor.TensAdd.__rmul__(self,other)
sympy.tensor.tensor.TensAdd.__rsub__(self,other)
sympy.tensor.tensor.TensAdd.__sub__(self,other)
sympy.tensor.tensor.TensAdd._print(self)
sympy.tensor.tensor.TensAdd._tensAdd_check(args)
sympy.tensor.tensor.TensAdd._tensAdd_check_automatrix(args)
sympy.tensor.tensor.TensAdd._tensAdd_collect_terms(args)
sympy.tensor.tensor.TensAdd._tensAdd_flatten(args)
sympy.tensor.tensor.TensAdd.canon_bp(self)
sympy.tensor.tensor.TensAdd.contract_delta(self,delta)
sympy.tensor.tensor.TensAdd.contract_metric(self,g)
sympy.tensor.tensor.TensAdd.data(self)
sympy.tensor.tensor.TensAdd.data(self)
sympy.tensor.tensor.TensAdd.data(self,data)
sympy.tensor.tensor.TensAdd.equals(self,other)
sympy.tensor.tensor.TensAdd.free_args(self)
sympy.tensor.tensor.TensAdd.from_TIDS_list(coeff,tids_list)
sympy.tensor.tensor.TensAdd.fun_eval(self,*index_tuples)
sympy.tensor.tensor.TensAdd.rank(self)
sympy.tensor.tensor.TensAdd.substitute_indices(self,*index_tuples)
sympy.tensor.tensor.TensExpr(Basic)
sympy.tensor.tensor.TensExpr.__abs__(self)
sympy.tensor.tensor.TensExpr.__add__(self,other)
sympy.tensor.tensor.TensExpr.__div__(self,other)
sympy.tensor.tensor.TensExpr.__mul__(self,other)
sympy.tensor.tensor.TensExpr.__neg__(self)
sympy.tensor.tensor.TensExpr.__pow__(self,other)
sympy.tensor.tensor.TensExpr.__radd__(self,other)
sympy.tensor.tensor.TensExpr.__rdiv__(self,other)
sympy.tensor.tensor.TensExpr.__rmul__(self,other)
sympy.tensor.tensor.TensExpr.__rpow__(self,other)
sympy.tensor.tensor.TensExpr.__rsub__(self,other)
sympy.tensor.tensor.TensExpr.__sub__(self,other)
sympy.tensor.tensor.TensExpr._eval_simplify(self,ratio,measure)
sympy.tensor.tensor.TensExpr.get_matrix(self)
sympy.tensor.tensor.TensMul(cls,coeff,*args,**kw_args)
sympy.tensor.tensor.TensMul.__add__(self,other)
sympy.tensor.tensor.TensMul.__div__(self,other)
sympy.tensor.tensor.TensMul.__getitem__(self,item)
sympy.tensor.tensor.TensMul.__iter__(self)
sympy.tensor.tensor.TensMul.__mul__(self,other)
sympy.tensor.tensor.TensMul.__new__(cls,coeff,*args,**kw_args)
sympy.tensor.tensor.TensMul.__radd__(self,other)
sympy.tensor.tensor.TensMul.__rdiv__(self,other)
sympy.tensor.tensor.TensMul.__rmul__(self,other)
sympy.tensor.tensor.TensMul.__rsub__(self,other)
sympy.tensor.tensor.TensMul.__sub__(self,other)
sympy.tensor.tensor.TensMul._print(self)
sympy.tensor.tensor.TensMul.canon_bp(self)
sympy.tensor.tensor.TensMul.coeff(self)
sympy.tensor.tensor.TensMul.components(self)
sympy.tensor.tensor.TensMul.contract_delta(self,delta)
sympy.tensor.tensor.TensMul.contract_metric(self,g)
sympy.tensor.tensor.TensMul.data(self)
sympy.tensor.tensor.TensMul.data(self)
sympy.tensor.tensor.TensMul.data(self,data)
sympy.tensor.tensor.TensMul.dum(self)
sympy.tensor.tensor.TensMul.equals(self,other)
sympy.tensor.tensor.TensMul.free(self)
sympy.tensor.tensor.TensMul.free_args(self)
sympy.tensor.tensor.TensMul.from_TIDS(coeff,tids,**kw_args)
sympy.tensor.tensor.TensMul.from_data(coeff,components,free,dum,**kw_args)
sympy.tensor.tensor.TensMul.fun_eval(self,*index_tuples)
sympy.tensor.tensor.TensMul.get_indices(self)
sympy.tensor.tensor.TensMul.perm2tensor(self,g,canon_bp=False)
sympy.tensor.tensor.TensMul.rank(self)
sympy.tensor.tensor.TensMul.sorted_components(self)
sympy.tensor.tensor.TensMul.split(self)
sympy.tensor.tensor.TensMul.substitute_indices(self,*index_tuples)
sympy.tensor.tensor.TensMul.types(self)
sympy.tensor.tensor.TensorHead(cls,name,typ,comm=0,matrix_behavior=0,**kw_args)
sympy.tensor.tensor.TensorHead.__iter__(self)
sympy.tensor.tensor.TensorHead.__lt__(self,other)
sympy.tensor.tensor.TensorHead.__new__(cls,name,typ,comm=0,matrix_behavior=0,**kw_args)
sympy.tensor.tensor.TensorHead.__pow__(self,other)
sympy.tensor.tensor.TensorHead._check_auto_matrix_indices_in_call(self,*indices)
sympy.tensor.tensor.TensorHead._components_data_full_destroy(self)
sympy.tensor.tensor.TensorHead._print(self)
sympy.tensor.tensor.TensorHead.comm(self)
sympy.tensor.tensor.TensorHead.commutes_with(self,other)
sympy.tensor.tensor.TensorHead.data(self)
sympy.tensor.tensor.TensorHead.data(self)
sympy.tensor.tensor.TensorHead.data(self,data)
sympy.tensor.tensor.TensorHead.index_types(self)
sympy.tensor.tensor.TensorHead.name(self)
sympy.tensor.tensor.TensorHead.rank(self)
sympy.tensor.tensor.TensorHead.symmetry(self)
sympy.tensor.tensor.TensorHead.typ(self)
sympy.tensor.tensor.TensorHead.types(self)
sympy.tensor.tensor.TensorIndex(cls,name,tensortype,is_up=True)
sympy.tensor.tensor.TensorIndex.__lt__(self,other)
sympy.tensor.tensor.TensorIndex.__neg__(self)
sympy.tensor.tensor.TensorIndex.__new__(cls,name,tensortype,is_up=True)
sympy.tensor.tensor.TensorIndex._print(self)
sympy.tensor.tensor.TensorIndex.is_up(self)
sympy.tensor.tensor.TensorIndex.name(self)
sympy.tensor.tensor.TensorIndex.tensortype(self)
sympy.tensor.tensor.TensorIndexType(cls,name,metric=False,dim=None,eps_dim=None,dummy_fmt=None)
sympy.tensor.tensor.TensorIndexType.__lt__(self,other)
sympy.tensor.tensor.TensorIndexType.__new__(cls,name,metric=False,dim=None,eps_dim=None,dummy_fmt=None)
sympy.tensor.tensor.TensorIndexType.__str__(self)
sympy.tensor.tensor.TensorIndexType._components_data_full_destroy(self)
sympy.tensor.tensor.TensorIndexType.auto_index(self)
sympy.tensor.tensor.TensorIndexType.auto_left(self)
sympy.tensor.tensor.TensorIndexType.auto_right(self)
sympy.tensor.tensor.TensorIndexType.data(self)
sympy.tensor.tensor.TensorIndexType.data(self)
sympy.tensor.tensor.TensorIndexType.data(self,data)
sympy.tensor.tensor.TensorIndexType.delta(self)
sympy.tensor.tensor.TensorIndexType.dim(self)
sympy.tensor.tensor.TensorIndexType.dummy_fmt(self)
sympy.tensor.tensor.TensorIndexType.eps_dim(self)
sympy.tensor.tensor.TensorIndexType.epsilon(self)
sympy.tensor.tensor.TensorIndexType.get_epsilon(self)
sympy.tensor.tensor.TensorIndexType.get_kronecker_delta(self)
sympy.tensor.tensor.TensorIndexType.name(self)
sympy.tensor.tensor.TensorSymmetry(cls,*args,**kw_args)
sympy.tensor.tensor.TensorSymmetry.__new__(cls,*args,**kw_args)
sympy.tensor.tensor.TensorSymmetry.base(self)
sympy.tensor.tensor.TensorSymmetry.generators(self)
sympy.tensor.tensor.TensorSymmetry.rank(self)
sympy.tensor.tensor.TensorType(cls,index_types,symmetry,**kw_args)
sympy.tensor.tensor.TensorType.__new__(cls,index_types,symmetry,**kw_args)
sympy.tensor.tensor.TensorType.__str__(self)
sympy.tensor.tensor.TensorType.index_types(self)
sympy.tensor.tensor.TensorType.symmetry(self)
sympy.tensor.tensor.TensorType.types(self)
sympy.tensor.tensor.VTIDS(self,components,free,dum,data)
sympy.tensor.tensor.VTIDS.__init__(self,components,free,dum,data)
sympy.tensor.tensor.VTIDS.correct_signature_from_indices(self,data,indices,free,dum)
sympy.tensor.tensor.VTIDS.flip_index_by_metric(data,metric,pos)
sympy.tensor.tensor.VTIDS.parse_data(data)
sympy.tensor.tensor._TensorDataLazyEvaluator(CantSympify)
sympy.tensor.tensor._TensorDataLazyEvaluator.__contains__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__delitem__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__getitem__(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator.__setitem__(self,key,value)
sympy.tensor.tensor._TensorDataLazyEvaluator._assign_data_to_tensor_expr(self,key,data)
sympy.tensor.tensor._TensorDataLazyEvaluator._contract_ndarray(free1,free2,ndarray1,ndarray2)
sympy.tensor.tensor._TensorDataLazyEvaluator._correct_signature_from_indices(data,indices,free,dum,inverse=False)
sympy.tensor.tensor._TensorDataLazyEvaluator._flip_index_by_metric(data,metric,pos)
sympy.tensor.tensor._TensorDataLazyEvaluator._get(self,key)
sympy.tensor.tensor._TensorDataLazyEvaluator._sort_data_axes(old,new)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_metric_data(self,metric,data)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_rearrange_tensmul_parts(new_tensmul,old_tensmul)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_tensor_add(addition,f,g)
sympy.tensor.tensor._TensorDataLazyEvaluator.add_tensor_mul(prod,f,g)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_product_tensors(self,data_list,tensmul_list)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_tensmul_from_tensorhead(self,tensmul,tensorhead)
sympy.tensor.tensor._TensorDataLazyEvaluator.data_tensorhead_from_tensmul(self,data,tensmul,tensorhead)
sympy.tensor.tensor._TensorDataLazyEvaluator.inverse_matrix(ndarray)
sympy.tensor.tensor._TensorDataLazyEvaluator.inverse_transpose_matrix(ndarray)
sympy.tensor.tensor._TensorDataLazyEvaluator.parse_data(data)
sympy.tensor.tensor._TensorManager(self)
sympy.tensor.tensor._TensorManager.__init__(self)
sympy.tensor.tensor._TensorManager._comm_init(self)
sympy.tensor.tensor._TensorManager.clear(self)
sympy.tensor.tensor._TensorManager.comm(self)
sympy.tensor.tensor._TensorManager.comm_i2symbol(self,i)
sympy.tensor.tensor._TensorManager.comm_symbols2i(self,i)
sympy.tensor.tensor._TensorManager.get_comm(self,i,j)
sympy.tensor.tensor._TensorManager.set_comm(self,i,j,c)
sympy.tensor.tensor._TensorManager.set_comms(self,*args)
sympy.tensor.tensor.canon_bp(p)
sympy.tensor.tensor.get_lines(ex,index_type)
sympy.tensor.tensor.riemann_cyclic(t2)
sympy.tensor.tensor.riemann_cyclic_replace(t_r)
sympy.tensor.tensor.tensor_indices(s,typ)
sympy.tensor.tensor.tensor_mul(*a)
sympy.tensor.tensor.tensorhead(name,typ,sym,comm=0,matrix_behavior=0)
sympy.tensor.tensor.tensorsymmetry(*args)
sympy.tensor_indices(s,typ)
sympy.tensor_mul(*a)
sympy.tensorhead(name,typ,sym,comm=0,matrix_behavior=0)
sympy.tensorsymmetry(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/index_methods.py----------------------------------------
A:sympy.tensor.index_methods.inds->list(map(get_indices, expr.args))
A:sympy.tensor.index_methods.(inds, syms)->list(zip(*inds))
A:sympy.tensor.index_methods.(inds, dummies)->_remove_repeated(c)
A:sympy.tensor.index_methods.(base, exp)->expr.as_base_exp()
A:sympy.tensor.index_methods.(binds, bsyms)->get_indices(base)
A:sympy.tensor.index_methods.(einds, esyms)->get_indices(exp)
A:sympy.tensor.index_methods.ind0->set()
A:sympy.tensor.index_methods.(ind, sym)->get_indices(arg)
A:sympy.tensor.index_methods.(junk, key)->_remove_repeated(expr.indices)
A:sympy.tensor.index_methods.(junk, junk, key)->_get_indices_Mul(expr, return_dummies=True)
A:sympy.tensor.index_methods.facd->get_contraction_structure(fac)
A:sympy.tensor.index_methods.(b, e)->expr.as_base_exp()
A:sympy.tensor.index_methods.dbase->get_contraction_structure(b)
A:sympy.tensor.index_methods.dexp->get_contraction_structure(e)
A:sympy.tensor.index_methods.d->get_contraction_structure(term)
A:sympy.tensor.index_methods.deep->get_contraction_structure(arg)
sympy.get_contraction_structure(expr)
sympy.get_indices(expr)
sympy.index_methods.IndexConformanceException(Exception)
sympy.index_methods._get_indices_Add(expr)
sympy.index_methods._get_indices_Mul(expr,return_dummies=False)
sympy.index_methods._get_indices_Pow(expr)
sympy.index_methods._remove_repeated(inds)
sympy.tensor.index_methods.IndexConformanceException(Exception)
sympy.tensor.index_methods._get_indices_Add(expr)
sympy.tensor.index_methods._get_indices_Mul(expr,return_dummies=False)
sympy.tensor.index_methods._get_indices_Pow(expr)
sympy.tensor.index_methods._remove_repeated(inds)
sympy.tensor.index_methods.get_contraction_structure(expr)
sympy.tensor.index_methods.get_indices(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/indexed.py----------------------------------------
A:sympy.tensor.indexed.base->IndexedBase(base)
A:sympy.tensor.indexed.args->list(map(sympify, args))
A:sympy.tensor.indexed.indices->list(map(p.doprint, self.indices))
A:sympy.tensor.indexed.label->Symbol(label, integer=True)
A:sympy.tensor.indexed.obj->sympy.core.Expr.__new__(cls, *args, **kw_args)
A:sympy.tensor.indexed.obj._shape->sympify(shape)
A:sympy.tensor.indexed.(label, range)->list(map(sympify, (label, range)))
sympy.Idx(cls,label,range=None,**kw_args)
sympy.Idx._sympystr(self,p)
sympy.Idx.label(self)
sympy.Idx.lower(self)
sympy.Idx.upper(self)
sympy.Indexed(cls,base,*args,**kw_args)
sympy.Indexed._sympystr(self,p)
sympy.Indexed.base(self)
sympy.Indexed.indices(self)
sympy.Indexed.ranges(self)
sympy.Indexed.rank(self)
sympy.Indexed.shape(self)
sympy.IndexedBase(cls,label,shape=None,**kw_args)
sympy.IndexedBase.__getitem__(self,indices,**kw_args)
sympy.IndexedBase._hashable_content(self)
sympy.IndexedBase._sympystr(self,p)
sympy.IndexedBase.args(self)
sympy.IndexedBase.label(self)
sympy.IndexedBase.shape(self)
sympy.indexed.IndexException(Exception)
sympy.tensor.indexed.Idx(cls,label,range=None,**kw_args)
sympy.tensor.indexed.Idx.__new__(cls,label,range=None,**kw_args)
sympy.tensor.indexed.Idx._sympystr(self,p)
sympy.tensor.indexed.Idx.label(self)
sympy.tensor.indexed.Idx.lower(self)
sympy.tensor.indexed.Idx.upper(self)
sympy.tensor.indexed.IndexException(Exception)
sympy.tensor.indexed.Indexed(cls,base,*args,**kw_args)
sympy.tensor.indexed.Indexed.__new__(cls,base,*args,**kw_args)
sympy.tensor.indexed.Indexed._sympystr(self,p)
sympy.tensor.indexed.Indexed.base(self)
sympy.tensor.indexed.Indexed.indices(self)
sympy.tensor.indexed.Indexed.ranges(self)
sympy.tensor.indexed.Indexed.rank(self)
sympy.tensor.indexed.Indexed.shape(self)
sympy.tensor.indexed.IndexedBase(cls,label,shape=None,**kw_args)
sympy.tensor.indexed.IndexedBase.__getitem__(self,indices,**kw_args)
sympy.tensor.indexed.IndexedBase.__new__(cls,label,shape=None,**kw_args)
sympy.tensor.indexed.IndexedBase._hashable_content(self)
sympy.tensor.indexed.IndexedBase._sympystr(self,p)
sympy.tensor.indexed.IndexedBase.args(self)
sympy.tensor.indexed.IndexedBase.label(self)
sympy.tensor.indexed.IndexedBase.shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/tests/test_index_methods.py----------------------------------------
A:sympy.tensor.tests.test_index_methods.(x, y)->symbols('x y')
A:sympy.tensor.tests.test_index_methods.x->IndexedBase('x')
A:sympy.tensor.tests.test_index_methods.y->IndexedBase('y')
A:sympy.tensor.tests.test_index_methods.f->Function('f')
A:sympy.tensor.tests.test_index_methods.A->IndexedBase('A')
A:sympy.tensor.tests.test_index_methods.result->get_contraction_structure(s_ii_jj_s)
A:sympy.tensor.tests.test_index_methods.z->IndexedBase('z')
A:sympy.tensor.tests.test_index_methods.g->Function('g')
A:sympy.tensor.tests.test_index_methods.a->symbols('a')
sympy.tensor.tests.test_index_methods.test_contraction_structure_Add_in_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_Mul_and_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_Pow_in_Pow()
sympy.tensor.tests.test_index_methods.test_contraction_structure_simple_Pow()
sympy.tensor.tests.test_index_methods.test_get_contraction_structure_basic()
sympy.tensor.tests.test_index_methods.test_get_contraction_structure_complex()
sympy.tensor.tests.test_index_methods.test_get_indices_Idx()
sympy.tensor.tests.test_index_methods.test_get_indices_Indexed()
sympy.tensor.tests.test_index_methods.test_get_indices_Pow()
sympy.tensor.tests.test_index_methods.test_get_indices_add()
sympy.tensor.tests.test_index_methods.test_get_indices_exceptions()
sympy.tensor.tests.test_index_methods.test_get_indices_mul()
sympy.tensor.tests.test_index_methods.test_scalar_broadcast()
sympy.tensor.tests.test_index_methods.test_trivial_indices()
sympy.tensor.tests.test_index_methods.test_ufunc_support()
sympy.tests.test_index_methods.test_contraction_structure_Add_in_Pow()
sympy.tests.test_index_methods.test_contraction_structure_Mul_and_Pow()
sympy.tests.test_index_methods.test_contraction_structure_Pow_in_Pow()
sympy.tests.test_index_methods.test_contraction_structure_simple_Pow()
sympy.tests.test_index_methods.test_get_contraction_structure_basic()
sympy.tests.test_index_methods.test_get_contraction_structure_complex()
sympy.tests.test_index_methods.test_get_indices_Idx()
sympy.tests.test_index_methods.test_get_indices_Indexed()
sympy.tests.test_index_methods.test_get_indices_Pow()
sympy.tests.test_index_methods.test_get_indices_add()
sympy.tests.test_index_methods.test_get_indices_exceptions()
sympy.tests.test_index_methods.test_get_indices_mul()
sympy.tests.test_index_methods.test_scalar_broadcast()
sympy.tests.test_index_methods.test_trivial_indices()
sympy.tests.test_index_methods.test_ufunc_support()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/tests/test_indexed.py----------------------------------------
A:sympy.tensor.tests.test_indexed.(i, a, b)->symbols('i a b', integer=True)
A:sympy.tensor.tests.test_indexed.x->symbols('x')
A:sympy.tensor.tests.test_indexed.ii->Idx(i, (a, b))
A:sympy.tensor.tests.test_indexed.(i, j)->symbols('i j', integer=True)
A:sympy.tensor.tests.test_indexed.a->(1 / y[i + 1] * y[i]).coeff(y[i])
A:sympy.tensor.tests.test_indexed.A1->Indexed(a, i, j)
A:sympy.tensor.tests.test_indexed.A2->IndexedBase(a)
A:sympy.tensor.tests.test_indexed.(i, j, k)->symbols('i j k', integer=True)
A:sympy.tensor.tests.test_indexed.(a, b)->symbols('a b')
A:sympy.tensor.tests.test_indexed.A->Indexed('A', i, i + j)
A:sympy.tensor.tests.test_indexed.B->IndexedBase(b)
A:sympy.tensor.tests.test_indexed.(i, j, m, n)->symbols('i j m n', integer=True)
A:sympy.tensor.tests.test_indexed.b->(y[i] / y[i + 1]).coeff(y[i])
A:sympy.tensor.tests.test_indexed.(n, m)->symbols('n m', integer=True)
A:sympy.tensor.tests.test_indexed.(o, p)->symbols('o p', integer=True)
A:sympy.tensor.tests.test_indexed.N->Symbol('N', integer=True)
A:sympy.tensor.tests.test_indexed.i->Idx('i', len_y - 1)
A:sympy.tensor.tests.test_indexed.y->IndexedBase('y', shape=(len_y,))
sympy.tensor.tests.test_indexed.test_Idx_bounds()
sympy.tensor.tests.test_indexed.test_Idx_construction()
sympy.tensor.tests.test_indexed.test_Idx_fixed_bounds()
sympy.tensor.tests.test_indexed.test_Idx_func_args()
sympy.tensor.tests.test_indexed.test_Idx_properties()
sympy.tensor.tests.test_indexed.test_Idx_subs()
sympy.tensor.tests.test_indexed.test_IndexedBase_shape()
sympy.tensor.tests.test_indexed.test_IndexedBase_subs()
sympy.tensor.tests.test_indexed.test_IndexedBase_sugar()
sympy.tensor.tests.test_indexed.test_Indexed_coeff()
sympy.tensor.tests.test_indexed.test_Indexed_constructor()
sympy.tensor.tests.test_indexed.test_Indexed_func_args()
sympy.tensor.tests.test_indexed.test_Indexed_properties()
sympy.tensor.tests.test_indexed.test_Indexed_shape_precedence()
sympy.tensor.tests.test_indexed.test_Indexed_subs()
sympy.tensor.tests.test_indexed.test_complex_indices()
sympy.tensor.tests.test_indexed.test_not_interable()
sympy.tests.test_indexed.test_Idx_bounds()
sympy.tests.test_indexed.test_Idx_construction()
sympy.tests.test_indexed.test_Idx_fixed_bounds()
sympy.tests.test_indexed.test_Idx_func_args()
sympy.tests.test_indexed.test_Idx_properties()
sympy.tests.test_indexed.test_Idx_subs()
sympy.tests.test_indexed.test_IndexedBase_shape()
sympy.tests.test_indexed.test_IndexedBase_subs()
sympy.tests.test_indexed.test_IndexedBase_sugar()
sympy.tests.test_indexed.test_Indexed_coeff()
sympy.tests.test_indexed.test_Indexed_constructor()
sympy.tests.test_indexed.test_Indexed_func_args()
sympy.tests.test_indexed.test_Indexed_properties()
sympy.tests.test_indexed.test_Indexed_shape_precedence()
sympy.tests.test_indexed.test_Indexed_subs()
sympy.tests.test_indexed.test_complex_indices()
sympy.tests.test_indexed.test_not_interable()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/tensor/tests/test_tensor.py----------------------------------------
A:sympy.tensor.tests.test_tensor.Lorentz->TensorIndexType('Lorentz')
A:sympy.tensor.tests.test_tensor.(a, b, d0, d1)->tensor_indices('a,b,d0,d1', Lorentz)
A:sympy.tensor.tests.test_tensor.sym1->TensorSymmetry(get_symmetric_group_sgs(2, 1))
A:sympy.tensor.tests.test_tensor.S1->TensorType([Lorentz], sym1)
A:sympy.tensor.tests.test_tensor.(A, B)->tensorhead('A,B', [Lorentz] * 2, [[1] * 2])
A:sympy.tensor.tests.test_tensor.tc->t.contract_metric(g).canon_bp()
A:sympy.tensor.tests.test_tensor.sym2->tensorsymmetry()
A:sympy.tensor.tests.test_tensor.S2->TensorType([Lorentz] * 2, sym2)
A:sympy.tensor.tests.test_tensor.A->tensorhead('A', [Lorentz], [[1]])
A:sympy.tensor.tests.test_tensor.(B, C)->S1('B, C')
A:sympy.tensor.tests.test_tensor.nsym2->tensorsymmetry([1], [1])
A:sympy.tensor.tests.test_tensor.NS2->TensorType([Lorentz] * 2, nsym2)
A:sympy.tensor.tests.test_tensor.B->tensorhead('B', [Lorentz], [[1]], 'Gcomm')
A:sympy.tensor.tests.test_tensor.C->tensorhead('C', [LorentzD], [[1]])
A:sympy.tensor.tests.test_tensor.(a, b, c, d)->symbols('a b c d', commutative=False)
A:sympy.tensor.tests.test_tensor.sym2a->tensorsymmetry([2])
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3)->tensor_indices('d:4', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, a0, a1, a2, a3, b, d0, d1, d2, d3)->tensor_indices('a,a0,a1,a2,a3,b,d0,d1,d2,d3', Mat)
A:sympy.tensor.tests.test_tensor.(base3, gens3)->get_symmetric_group_sgs(3)
A:sympy.tensor.tests.test_tensor.sym3->tensorsymmetry([1] * 3)
A:sympy.tensor.tests.test_tensor.sym3a->tensorsymmetry([3])
A:sympy.tensor.tests.test_tensor.S3->TensorType([Mat] * 3, sym3)
A:sympy.tensor.tests.test_tensor.S2a->TensorType([Lorentz] * 2, sym2a)
A:sympy.tensor.tests.test_tensor.Spinor->TensorIndexType('Spinor', dim=D, metric=True, dummy_fmt='S')
A:sympy.tensor.tests.test_tensor.Mat->TensorIndexType('Mat', metric=None, dummy_fmt='M')
A:sympy.tensor.tests.test_tensor.S3a->TensorType([Lorentz] * 3, sym3a)
A:sympy.tensor.tests.test_tensor.(alpha, beta, gamma, mu, nu, rho)->tensor_indices('alpha,beta,gamma,mu,nu,rho', Lorentz)
A:sympy.tensor.tests.test_tensor.Gamma->S1('Gamma', 2)
A:sympy.tensor.tests.test_tensor.Gamma2->S2a('Gamma', 2)
A:sympy.tensor.tests.test_tensor.Gamma3->S3a('Gamma', 2)
A:sympy.tensor.tests.test_tensor.Flavor->TensorIndexType('Flavor', dummy_fmt='F')
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, ff)->tensor_indices('a,b,c,d,e,f', Flavor)
A:sympy.tensor.tests.test_tensor.(mu, nu)->tensor_indices('mu,nu', Lorentz)
A:sympy.tensor.tests.test_tensor.sym_f->tensorsymmetry([1], [2])
A:sympy.tensor.tests.test_tensor.S_f->TensorType([Flavor] * 3, sym_f)
A:sympy.tensor.tests.test_tensor.sym_A->tensorsymmetry([1], [1])
A:sympy.tensor.tests.test_tensor.S_A->TensorType([Lorentz, Flavor], sym_A)
A:sympy.tensor.tests.test_tensor.f->S_f('f')
A:sympy.tensor.tests.test_tensor.i->tensor_indices('i', A)
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11)->tensor_indices('d0:12', Lorentz)
A:sympy.tensor.tests.test_tensor.R->tensorhead('R', [Lorentz] * 4, [[2, 2]])
A:sympy.tensor.tests.test_tensor.t->t.contract_metric(g).contract_metric(g)
A:sympy.tensor.tests.test_tensor.(d0, d1, d2, d3, d4, d5, d6)->tensor_indices('d0:7', Lorentz)
A:sympy.tensor.tests.test_tensor.(a0, a1, a2, a3, a4, a5)->tensor_indices('a0:6', Lorentz)
A:sympy.tensor.tests.test_tensor.(a, b)->tensor_indices('a,b', Lorentz)
A:sympy.tensor.tests.test_tensor.V->tensorhead('V', [Lorentz] * 2, [[1] * 2])
A:sympy.tensor.tests.test_tensor.D->tensorhead('D', [L, L, S, S], [[1, 1], [1, 1]], matrix_behavior=True)
A:sympy.tensor.tests.test_tensor.Eucl->TensorIndexType('Eucl', metric=0, dim=D, dummy_fmt='E')
A:sympy.tensor.tests.test_tensor.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14)->tensor_indices('i0:15', Eucl)
A:sympy.tensor.tests.test_tensor.t1->t.contract_metric(g).contract_metric(g).fun_eval((a, b), (b, a))
A:sympy.tensor.tests.test_tensor.(a0, a1, a2, a3, a4)->tensor_indices('a0:5', Spinor)
A:sympy.tensor.tests.test_tensor.(chi, psi)->tensorhead('chi,psi', [Spinor], [[1]], 1)
A:sympy.tensor.tests.test_tensor.obj->sympy.core.Basic.__new__(cls, name, antisym, **kwargs)
A:sympy.tensor.tests.test_tensor.G->tensorhead('G', [L, S, S], [[1] * 3], matrix_behavior=True)
A:sympy.tensor.tests.test_tensor.(m0, m1, m2, m3, m4)->tensor_indices('m0:5', Lorentz)
A:sympy.tensor.tests.test_tensor.sym2n->tensorsymmetry(*get_symmetric_group_sgs(2))
A:sympy.tensor.tests.test_tensor.TSpace->TensorIndexType('TSpace')
A:sympy.tensor.tests.test_tensor.(i0, i1)->tensor_indices('i0 i1', TSpace)
A:sympy.tensor.tests.test_tensor.indices->t.contract_metric(g).contract_metric(g).get_indices()
A:sympy.tensor.tests.test_tensor.L_0->TensorIndex('L_0', Lorentz)
A:sympy.tensor.tests.test_tensor.sym->tensorsymmetry([1] * 2)
A:sympy.tensor.tests.test_tensor.typ->TensorType([], zsym)
A:sympy.tensor.tests.test_tensor.(a, b, d0, d1, i, j, k)->tensor_indices('a,b,d0,d1,i,j,k', Lorentz)
A:sympy.tensor.tests.test_tensor.(p, q, r)->tensorhead('p,q,r', [Lorentz], [[1]])
A:sympy.tensor.tests.test_tensor.(m, n, p, q)->tensor_indices('m,n,p,q', Lorentz)
A:sympy.tensor.tests.test_tensor.zsym->tensorsymmetry()
A:sympy.tensor.tests.test_tensor.(i, j, k, l, m, n, p, q)->tensor_indices('i,j,k,l,m,n,p,q', Lorentz)
A:sympy.tensor.tests.test_tensor.p->tensorhead('p', [Lorentz], [[1]])
A:sympy.tensor.tests.test_tensor.A_tmul->A(m, n)
A:sympy.tensor.tests.test_tensor.A_c->A_tmul(m, -m)
A:sympy.tensor.tests.test_tensor.ABc1->ABm(i, j, -i, -j)
A:sympy.tensor.tests.test_tensor.ABc2->ABm(i, -i, j, -j)
A:sympy.tensor.tests.test_tensor.asc1->asum(i, -i)
A:sympy.tensor.tests.test_tensor.(m0, m1, m2, m3)->tensor_indices('m0:4', Lorentz)
A:sympy.tensor.tests.test_tensor.symr->tensorsymmetry([2, 2])
A:sympy.tensor.tests.test_tensor.t3->riemann_cyclic(t2)
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e)->tensor_indices('a,b,c,d,e', Lorentz)
A:sympy.tensor.tests.test_tensor.t2->t.contract_metric(g).contract_metric(g).fun_eval((a, b), (b, a)).substitute_indices((a, -a), (b, -b), (c, -c), (d, -d))
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, L_0)->tensor_indices('a,b,c,d,e,L_0', Lorentz)
A:sympy.tensor.tests.test_tensor.(p, q)->tensorhead('p q', [Lorentz], [[1]])
A:sympy.tensor.tests.test_tensor.M->Symbol('M')
A:sympy.tensor.tests.test_tensor.(p, q, r, s)->tensorhead('p,q,r,s', [Lorentz], [[1]])
A:sympy.tensor.tests.test_tensor.n->sympy.tensor.tensor.TensorManager.comm_symbols2i(Gsymbol)
A:sympy.tensor.tests.test_tensor.Color->TensorIndexType('Color', metric=None, dim=n, dummy_fmt='C')
A:sympy.tensor.tests.test_tensor.(a, b, c, d, e, f)->tensor_indices('a,b,c,d,e,f', Color)
A:sympy.tensor.tests.test_tensor.dg->tensorhead('dg', [Lorentz] * 3, [[1], [1] * 2])
A:sympy.tensor.tests.test_tensor.LorentzH->TensorIndexType('LorentzH', dummy_fmt='LH')
A:sympy.tensor.tests.test_tensor.(i, j)->tensor_indices('i,j', Lorentz)
A:sympy.tensor.tests.test_tensor.(ih, jh)->tensor_indices('ih,jh', LorentzH)
A:sympy.tensor.tests.test_tensor.(ph, qh)->tensorhead('ph qh', [LorentzH], [[1]])
A:sympy.tensor.tests.test_tensor.Gsymbol->Symbol('Gsymbol')
A:sympy.tensor.tests.test_tensor.GHsymbol->Symbol('GHsymbol')
A:sympy.tensor.tests.test_tensor.GH->tensorhead('GH', [LorentzH], [[1]], GHsymbol)
A:sympy.tensor.tests.test_tensor.nh->sympy.tensor.tensor.TensorManager.comm_symbols2i(GHsymbol)
A:sympy.tensor.tests.test_tensor.tsymmetry->tensorsymmetry([2], [1], [1, 1, 1])
A:sympy.tensor.tests.test_tensor.L->TensorIndexType('L')
A:sympy.tensor.tests.test_tensor.S->TensorIndexType('S')
A:sympy.tensor.tests.test_tensor.(m0, m1, m2, m3, m4, m5)->tensor_indices('m0:6', L)
A:sympy.tensor.tests.test_tensor.(s0, s1, s2)->tensor_indices('s0:3', S)
A:sympy.tensor.tests.test_tensor.E->tensorhead('E', [L, L, L, L], [[1], [1], [1], [1]], matrix_behavior=True)
A:sympy.tensor.tests.test_tensor.F->tensorhead('F', [L], [[1]], matrix_behavior=True)
A:sympy.tensor.tests.test_tensor.A0->A(m0)
A:sympy.tensor.tests.test_tensor.B0->B(-m0)
A:sympy.tensor.tests.test_tensor.B1->B(m1)
A:sympy.tensor.tests.test_tensor.D0->D(True, True, True, True)
A:sympy.tensor.tests.test_tensor.Aa->A(True, True, True)
A:sympy.tensor.tests.test_tensor.numpy->import_module('numpy')
A:sympy.tensor.tests.test_tensor.minkowski->Matrix(((1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, -1)))
A:sympy.tensor.tests.test_tensor.(i0, i1, i2, i3, i4)->tensor_indices('i0:5', Lorentz)
A:sympy.tensor.tests.test_tensor.(E, px, py, pz)->symbols('E px py pz')
A:sympy.tensor.tests.test_tensor.B.data->range(4)
A:sympy.tensor.tests.test_tensor.AB->tensorhead('AB', [Lorentz] * 2, [[1]] * 2)
A:sympy.tensor.tests.test_tensor.ba_matrix->Matrix(((1, 2, 3, 4), (5, 6, 7, 8), (9, 0, -1, -2), (-3, -4, -5, -6)))
A:sympy.tensor.tests.test_tensor.BA->tensorhead('BA', [Lorentz] * 2, [[1]] * 2)
A:sympy.tensor.tests.test_tensor.LorentzD->TensorIndexType('LorentzD')
A:sympy.tensor.tests.test_tensor.(mu0, mu1, mu2)->tensor_indices('mu0:3', LorentzD)
A:sympy.tensor.tests.test_tensor.ndm->TensorIndexType('ndm')
A:sympy.tensor.tests.test_tensor.(n0, n1, n2)->tensor_indices('n0:3', ndm)
A:sympy.tensor.tests.test_tensor.NA->tensorhead('NA', [ndm], [[1]])
A:sympy.tensor.tests.test_tensor.NA.data->range(10, 13)
A:sympy.tensor.tests.test_tensor.NB->tensorhead('NB', [ndm] * 2, [[1]] * 2)
A:sympy.tensor.tests.test_tensor.NC->tensorhead('NC', [ndm] * 3, [[1]] * 3)
A:sympy.tensor.tests.test_tensor.(A, B, AB, BA, C, Lorentz, E, px, py, pz, LorentzD, mu0, mu1, mu2, ndm, n0, n1, n2, NA, NB, NC, minkowski, ba_matrix, ndm_matrix, i0, i1, i2, i3, i4)->_get_valued_base_test_variables()
A:sympy.tensor.tests.test_tensor.matab->AB(i0, i1).get_matrix()
A:sympy.tensor.tests.test_tensor.(x1, x2, x3)->symbols('x1:4')
A:sympy.tensor.tests.test_tensor.euclid->TensorIndexType('Euclidean')
A:sympy.tensor.tests.test_tensor.(i1, i2, i3)->tensor_indices('i1:4', euclid)
A:sympy.tensor.tests.test_tensor.V1->tensorhead('V1', [euclid] * 2, [[1]] * 2)
A:sympy.tensor.tests.test_tensor.V2->tensorhead('V2', [euclid] * 2, [[1]] * 2)
A:sympy.tensor.tests.test_tensor.mmatrix->Matrix(ndm_matrix)
A:sympy.tensor.tests.test_tensor.A.data->import_module('numpy').array(arr)
A:sympy.tensor.tests.test_tensor.(qx, qy, qz)->symbols('qx qy qz')
A:sympy.tensor.tests.test_tensor.A(-i0).data->import_module('numpy').array([E, qx, qy, qz])
A:sympy.tensor.tests.test_tensor.m->Matrix(md)
A:sympy.tensor.tests.test_tensor.minv->Matrix(md).inv()
A:sympy.tensor.tests.test_tensor.meye->eye(4)
A:sympy.tensor.tests.test_tensor.KD->TensorIndexType('Lorentz').get_kronecker_delta()
A:sympy.tensor.tests.test_tensor.e2->e1.canon_bp()
A:sympy.tensor.tests.test_tensor.o2->o1.canon_bp()
A:sympy.tensor.tests.test_tensor.(m0, m1, m2)->tensor_indices('m0:3', L)
sympy.tensor.tests.test_tensor.Metric(cls,name,antisym,**kwargs)
sympy.tensor.tests.test_tensor.Metric.__new__(cls,name,antisym,**kwargs)
sympy.tensor.tests.test_tensor._get_valued_base_test_variables()
sympy.tensor.tests.test_tensor._is_equal(arg1,arg2)
sympy.tensor.tests.test_tensor.test_TensExpr()
sympy.tensor.tests.test_tensor.test_TensorHead()
sympy.tensor.tests.test_tensor.test_TensorIndexType()
sympy.tensor.tests.test_tensor.test_TensorManager()
sympy.tensor.tests.test_tensor.test_TensorType()
sympy.tensor.tests.test_tensor.test_add1()
sympy.tensor.tests.test_tensor.test_add2()
sympy.tensor.tests.test_tensor.test_bug_correction_tensor_indices()
sympy.tensor.tests.test_tensor.test_canonicalize1()
sympy.tensor.tests.test_tensor.test_canonicalize2()
sympy.tensor.tests.test_tensor.test_canonicalize3()
sympy.tensor.tests.test_tensor.test_canonicalize_no_dummies()
sympy.tensor.tests.test_tensor.test_canonicalize_no_slot_sym()
sympy.tensor.tests.test_tensor.test_contract_automatrix_and_data()
sympy.tensor.tests.test_tensor.test_contract_delta1()
sympy.tensor.tests.test_tensor.test_contract_metric1()
sympy.tensor.tests.test_tensor.test_contract_metric2()
sympy.tensor.tests.test_tensor.test_div()
sympy.tensor.tests.test_tensor.test_epsilon()
sympy.tensor.tests.test_tensor.test_fun()
sympy.tensor.tests.test_tensor.test_hash()
sympy.tensor.tests.test_tensor.test_hidden_indices_for_matrix_multiplication()
sympy.tensor.tests.test_tensor.test_indices()
sympy.tensor.tests.test_tensor.test_metric_contract3()
sympy.tensor.tests.test_tensor.test_mul()
sympy.tensor.tests.test_tensor.test_no_metric_symmetry()
sympy.tensor.tests.test_tensor.test_noncommuting_components()
sympy.tensor.tests.test_tensor.test_pprint()
sympy.tensor.tests.test_tensor.test_riemann_cyclic()
sympy.tensor.tests.test_tensor.test_riemann_cyclic_replace()
sympy.tensor.tests.test_tensor.test_riemann_invariants()
sympy.tensor.tests.test_tensor.test_riemann_products()
sympy.tensor.tests.test_tensor.test_special_eq_ne()
sympy.tensor.tests.test_tensor.test_substitute_indices()
sympy.tensor.tests.test_tensor.test_tensorsymmetry()
sympy.tensor.tests.test_tensor.test_valued_assign_numpy_ndarray()
sympy.tensor.tests.test_tensor.test_valued_canon_bp_swapaxes()
sympy.tensor.tests.test_tensor.test_valued_metric_inverse()
sympy.tensor.tests.test_tensor.test_valued_non_diagonal_metric()
sympy.tensor.tests.test_tensor.test_valued_tensor_contraction()
sympy.tensor.tests.test_tensor.test_valued_tensor_covariant_contravariant_elements()
sympy.tensor.tests.test_tensor.test_valued_tensor_expressions()
sympy.tensor.tests.test_tensor.test_valued_tensor_get_matrix()
sympy.tensor.tests.test_tensor.test_valued_tensor_iter()
sympy.tensor.tests.test_tensor.test_valued_tensor_pow()
sympy.tensor.tests.test_tensor.test_valued_tensor_self_contraction()
sympy.tests.test_Metric(cls,name,antisym,**kwargs)
sympy.tests.test__get_valued_base_test_variables()
sympy.tests.test__is_equal(arg1,arg2)
sympy.tests.test_test_TensExpr()
sympy.tests.test_test_TensorHead()
sympy.tests.test_test_TensorIndexType()
sympy.tests.test_test_TensorManager()
sympy.tests.test_test_TensorType()
sympy.tests.test_test_add1()
sympy.tests.test_test_add2()
sympy.tests.test_test_bug_correction_tensor_indices()
sympy.tests.test_test_canonicalize1()
sympy.tests.test_test_canonicalize2()
sympy.tests.test_test_canonicalize3()
sympy.tests.test_test_canonicalize_no_dummies()
sympy.tests.test_test_canonicalize_no_slot_sym()
sympy.tests.test_test_contract_automatrix_and_data()
sympy.tests.test_test_contract_delta1()
sympy.tests.test_test_contract_metric1()
sympy.tests.test_test_contract_metric2()
sympy.tests.test_test_div()
sympy.tests.test_test_epsilon()
sympy.tests.test_test_fun()
sympy.tests.test_test_hash()
sympy.tests.test_test_hidden_indices_for_matrix_multiplication()
sympy.tests.test_test_indices()
sympy.tests.test_test_metric_contract3()
sympy.tests.test_test_mul()
sympy.tests.test_test_no_metric_symmetry()
sympy.tests.test_test_noncommuting_components()
sympy.tests.test_test_pprint()
sympy.tests.test_test_riemann_cyclic()
sympy.tests.test_test_riemann_cyclic_replace()
sympy.tests.test_test_riemann_invariants()
sympy.tests.test_test_riemann_products()
sympy.tests.test_test_special_eq_ne()
sympy.tests.test_test_substitute_indices()
sympy.tests.test_test_tensorsymmetry()
sympy.tests.test_test_valued_assign_numpy_ndarray()
sympy.tests.test_test_valued_canon_bp_swapaxes()
sympy.tests.test_test_valued_metric_inverse()
sympy.tests.test_test_valued_non_diagonal_metric()
sympy.tests.test_test_valued_tensor_contraction()
sympy.tests.test_test_valued_tensor_covariant_contravariant_elements()
sympy.tests.test_test_valued_tensor_expressions()
sympy.tests.test_test_valued_tensor_get_matrix()
sympy.tests.test_test_valued_tensor_iter()
sympy.tests.test_test_valued_tensor_pow()
sympy.tests.test_test_valued_tensor_self_contraction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/singularities.py----------------------------------------
sympy.calculus.singularities.singularities(expr,sym)
sympy.singularities(expr,sym)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/finite_diff.py----------------------------------------
A:sympy.calculus.finite_diff.delta[0][0][0]->S(1)
A:sympy.calculus.finite_diff.c1->S(1)
A:sympy.calculus.finite_diff.c2->S(1)
A:sympy.calculus.finite_diff.delta->finite_diff_weights(order, x_list, x0)
A:sympy.calculus.finite_diff.order->derivative.variables.count(wrt)
sympy.apply_finite_diff(order,x_list,y_list,x0)
sympy.as_finite_diff(derivative,points=1,x0=None,wrt=None)
sympy.calculus.finite_diff.apply_finite_diff(order,x_list,y_list,x0)
sympy.calculus.finite_diff.as_finite_diff(derivative,points=1,x0=None,wrt=None)
sympy.calculus.finite_diff.finite_diff_weights(order,x_list,x0)
sympy.finite_diff_weights(order,x_list,x0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/euler.py----------------------------------------
A:sympy.calculus.euler.funcs->tuple(L.atoms(Function))
A:sympy.calculus.euler.vars->tuple((sympify(var) for var in vars))
A:sympy.calculus.euler.order->max((len(d.variables) for d in L.atoms(Derivative) if d.expr in funcs))
A:sympy.calculus.euler.eq->diff(L, f)
sympy.calculus.euler.euler_equations(L,funcs=(),vars=())
sympy.euler_equations(L,funcs=(),vars=())


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/tests/test_singularities.py----------------------------------------
A:sympy.calculus.tests.test_singularities.x->Symbol('x', real=True)
sympy.calculus.tests.test_singularities.test_singularities()
sympy.calculus.tests.test_singularities.test_singularities_non_rational()
sympy.tests.test_singularities.test_singularities()
sympy.tests.test_singularities.test_singularities_non_rational()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/tests/test_euler.py----------------------------------------
A:sympy.calculus.tests.test_euler.x->Function('x')
A:sympy.calculus.tests.test_euler.y->Function('y')
A:sympy.calculus.tests.test_euler.t->Symbol('t')
A:sympy.calculus.tests.test_euler.L->sum((D(z(t), t) ** 2 / 2 - z(t) ** 2 / 2 for z in [x, y]))
A:sympy.calculus.tests.test_euler.psi->Function('psi')
A:sympy.calculus.tests.test_euler.m->Symbol('m')
A:sympy.calculus.tests.test_euler.k->Symbol('k')
A:sympy.calculus.tests.test_euler.w->Symbol('w')
sympy.calculus.tests.test_euler.test_euler_henonheiles()
sympy.calculus.tests.test_euler.test_euler_high_order()
sympy.calculus.tests.test_euler.test_euler_interface()
sympy.calculus.tests.test_euler.test_euler_pendulum()
sympy.calculus.tests.test_euler.test_euler_sineg()
sympy.tests.test_euler.test_euler_henonheiles()
sympy.tests.test_euler.test_euler_high_order()
sympy.tests.test_euler.test_euler_interface()
sympy.tests.test_euler.test_euler_pendulum()
sympy.tests.test_euler.test_euler_sineg()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/calculus/tests/test_finite_diff.py----------------------------------------
A:sympy.calculus.tests.test_finite_diff.(x, h)->symbols('x h')
A:sympy.calculus.tests.test_finite_diff.f->Function('f')
A:sympy.calculus.tests.test_finite_diff.d->finite_diff_weights(1, [5, 6, 7], 5)
sympy.calculus.tests.test_finite_diff.test_apply_finite_diff()
sympy.calculus.tests.test_finite_diff.test_as_finite_diff()
sympy.calculus.tests.test_finite_diff.test_finite_diff_weights()
sympy.tests.test_finite_diff.test_apply_finite_diff()
sympy.tests.test_finite_diff.test_as_finite_diff()
sympy.tests.test_finite_diff.test_finite_diff_weights()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/sympy_tokenize.py----------------------------------------
A:sympy.parsing.sympy_tokenize.Intnumber->group(Hexnumber, Binnumber, Octnumber, Decnumber)
A:sympy.parsing.sympy_tokenize.Floatnumber->group(Repeatedfloat, Pointfloat, Expfloat)
A:sympy.parsing.sympy_tokenize.Imagnumber->group('\\d+[jJ]', Floatnumber + '[jJ]')
A:sympy.parsing.sympy_tokenize.Number->group(Imagnumber, Floatnumber, Intnumber)
A:sympy.parsing.sympy_tokenize.Triple->group("[uU]?[rR]?'''", '[uU]?[rR]?"""')
A:sympy.parsing.sympy_tokenize.String->group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'", '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"')
A:sympy.parsing.sympy_tokenize.Operator->group('\\*\\*=?', '>>=?', '<<=?', '<>', '!=', '//=?', '[+\\-*/%&|^=<>]=?', '~')
A:sympy.parsing.sympy_tokenize.Special->group('\\r?\\n', '[:;.,`@]', '\\!\\!', '\\!')
A:sympy.parsing.sympy_tokenize.Funny->group(Operator, Bracket, Special)
A:sympy.parsing.sympy_tokenize.PlainToken->group(Number, Funny, String, Name)
A:sympy.parsing.sympy_tokenize.ContStr->group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*" + group("'", '\\\\\\r?\\n'), '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*' + group('"', '\\\\\\r?\\n'))
A:sympy.parsing.sympy_tokenize.PseudoExtras->group('\\\\\\r?\\n', Comment, Triple)
A:sympy.parsing.sympy_tokenize.(tokenprog, pseudoprog, single3prog, double3prog)->map(re.compile, (Token, PseudoToken, Single3, Double3))
A:sympy.parsing.sympy_tokenize.ut->Untokenizer()
A:sympy.parsing.sympy_tokenize.line->readline()
A:sympy.parsing.sympy_tokenize.endmatch->endprog.match(line, pos)
A:sympy.parsing.sympy_tokenize.posend->endprog.match(line, pos).end(0)
A:sympy.parsing.sympy_tokenize.comment_token->line[pos:].rstrip('\r\n')
A:sympy.parsing.sympy_tokenize.pseudomatch->pseudoprog.match(line, pos)
A:sympy.parsing.sympy_tokenize.(start, end)->pseudoprog.match(line, pos).span(1)
A:sympy.parsing.sympy_tokenize.pos->endprog.match(line, pos).end(0)
sympy.parsing.sympy_tokenize.StopTokenizing(Exception)
sympy.parsing.sympy_tokenize.TokenError(Exception)
sympy.parsing.sympy_tokenize.Untokenizer(self)
sympy.parsing.sympy_tokenize.Untokenizer.__init__(self)
sympy.parsing.sympy_tokenize.Untokenizer.add_whitespace(self,start)
sympy.parsing.sympy_tokenize.Untokenizer.compat(self,token,iterable)
sympy.parsing.sympy_tokenize.Untokenizer.untokenize(self,iterable)
sympy.parsing.sympy_tokenize.any(*choices)
sympy.parsing.sympy_tokenize.generate_tokens(readline)
sympy.parsing.sympy_tokenize.group(*choices)
sympy.parsing.sympy_tokenize.maybe(*choices)
sympy.parsing.sympy_tokenize.printtoken(type,token,srow_scol,erow_ecol,line)
sympy.parsing.sympy_tokenize.tokenize(readline,tokeneater=printtoken)
sympy.parsing.sympy_tokenize.tokenize_loop(readline,tokeneater)
sympy.parsing.sympy_tokenize.untokenize(iterable)
sympy.sympy_tokenize.StopTokenizing(Exception)
sympy.sympy_tokenize.TokenError(Exception)
sympy.sympy_tokenize.Untokenizer(self)
sympy.sympy_tokenize.Untokenizer.add_whitespace(self,start)
sympy.sympy_tokenize.Untokenizer.compat(self,token,iterable)
sympy.sympy_tokenize.Untokenizer.untokenize(self,iterable)
sympy.sympy_tokenize.any(*choices)
sympy.sympy_tokenize.generate_tokens(readline)
sympy.sympy_tokenize.group(*choices)
sympy.sympy_tokenize.maybe(*choices)
sympy.sympy_tokenize.printtoken(type,token,srow_scol,erow_ecol,line)
sympy.sympy_tokenize.tokenize(readline,tokeneater=printtoken)
sympy.sympy_tokenize.tokenize_loop(readline,tokeneater)
sympy.sympy_tokenize.untokenize(iterable)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/mathematica.py----------------------------------------
A:sympy.parsing.mathematica.s->s.strip().strip()
A:sympy.parsing.mathematica.m->match(rule, s)
sympy.mathematica.mathematica(s)
sympy.mathematica.parse(s)
sympy.mathematica.translateFunction(s)
sympy.mathematica.translateOperator(s)
sympy.parsing.mathematica.mathematica(s)
sympy.parsing.mathematica.parse(s)
sympy.parsing.mathematica.translateFunction(s)
sympy.parsing.mathematica.translateOperator(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/sympy_parser.py----------------------------------------
A:sympy.parsing.sympy_parser._re_repeated->re.compile('^(\\d*)\\.(\\d*)\\[(\\d+)\\]$')
A:sympy.parsing.sympy_parser.func->global_dict.get(token[1])
A:sympy.parsing.sympy_parser.length->len(result)
A:sympy.parsing.sympy_parser.stack->stacks.pop()
A:sympy.parsing.sympy_parser.inner->recursor(inner, local_dict, global_dict)
A:sympy.parsing.sympy_parser.result[-1]->AppliedFunction(symbol, tok)
A:sympy.parsing.sympy_parser.split_symbols->split_symbols_custom(_token_splittable)
A:sympy.parsing.sympy_parser.result->_add_factorial_tokens('factorial', result)
A:sympy.parsing.sympy_parser.tokLen->len(tokens)
A:sympy.parsing.sympy_parser.match->re.compile('^(\\d*)\\.(\\d*)\\[(\\d+)\\]$').match(number)
A:sympy.parsing.sympy_parser.(pre, post, repetend)->re.compile('^(\\d*)\\.(\\d*)\\[(\\d+)\\]$').match(number).groups()
A:sympy.parsing.sympy_parser.input_code->StringIO(s.strip())
A:sympy.parsing.sympy_parser.tokens->transform(tokens, local_dict, global_dict)
A:sympy.parsing.sympy_parser.expr->eval(code, global_dict, local_dict)
A:sympy.parsing.sympy_parser.code->compile(evaluateFalse(code), '<string>', 'eval')
A:sympy.parsing.sympy_parser.node->ast.Expression(node.body[0].value)
A:sympy.parsing.sympy_parser.right->ast.Call(func=ast.Name(id='Pow', ctx=ast.Load()), args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))], keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))], starargs=None, kwargs=None)
A:sympy.parsing.sympy_parser.new_node->ast.Call(func=ast.Name(id=sympy_class, ctx=ast.Load()), args=[self.visit(node.left), right], keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))], starargs=None, kwargs=None)
A:sympy.parsing.sympy_parser.new_node.args->self.flatten(new_node.args, sympy_class)
sympy.parsing.sympy_parser.AppliedFunction(self,function,args,exponent=None)
sympy.parsing.sympy_parser.AppliedFunction.__getitem__(self,index)
sympy.parsing.sympy_parser.AppliedFunction.__init__(self,function,args,exponent=None)
sympy.parsing.sympy_parser.AppliedFunction.__repr__(self)
sympy.parsing.sympy_parser.AppliedFunction.expand(self)
sympy.parsing.sympy_parser.EvaluateFalseTransformer(ast.NodeTransformer)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.flatten(self,args,func)
sympy.parsing.sympy_parser.EvaluateFalseTransformer.visit_BinOp(self,node)
sympy.parsing.sympy_parser.ParenthesisGroup(list)
sympy.parsing.sympy_parser._add_factorial_tokens(name,result)
sympy.parsing.sympy_parser._apply_functions(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser._flatten(result)
sympy.parsing.sympy_parser._group_parentheses(recursor)
sympy.parsing.sympy_parser._implicit_application(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser._implicit_multiplication(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser._token_callable(token,local_dict,global_dict,nextToken=None)
sympy.parsing.sympy_parser._token_splittable(token)
sympy.parsing.sympy_parser.auto_number(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.auto_symbol(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.convert_xor(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.eval_expr(code,local_dict,global_dict)
sympy.parsing.sympy_parser.evaluateFalse(s)
sympy.parsing.sympy_parser.factorial_notation(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.function_exponentiation(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.implicit_application(result,local_dict,global_dict)
sympy.parsing.sympy_parser.implicit_multiplication(result,local_dict,global_dict)
sympy.parsing.sympy_parser.implicit_multiplication_application(result,local_dict,global_dict)
sympy.parsing.sympy_parser.lambda_notation(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.parse_expr(s,local_dict=None,transformations=standard_transformations,global_dict=None,evaluate=True)
sympy.parsing.sympy_parser.rationalize(tokens,local_dict,global_dict)
sympy.parsing.sympy_parser.split_symbols_custom(predicate)
sympy.parsing.sympy_parser.stringify_expr(s,local_dict,global_dict,transformations)
sympy.sympy_parser.AppliedFunction(self,function,args,exponent=None)
sympy.sympy_parser.AppliedFunction.__getitem__(self,index)
sympy.sympy_parser.AppliedFunction.__repr__(self)
sympy.sympy_parser.AppliedFunction.expand(self)
sympy.sympy_parser.EvaluateFalseTransformer(ast.NodeTransformer)
sympy.sympy_parser.EvaluateFalseTransformer.flatten(self,args,func)
sympy.sympy_parser.EvaluateFalseTransformer.visit_BinOp(self,node)
sympy.sympy_parser.ParenthesisGroup(list)
sympy.sympy_parser._add_factorial_tokens(name,result)
sympy.sympy_parser._apply_functions(tokens,local_dict,global_dict)
sympy.sympy_parser._flatten(result)
sympy.sympy_parser._group_parentheses(recursor)
sympy.sympy_parser._implicit_application(tokens,local_dict,global_dict)
sympy.sympy_parser._implicit_multiplication(tokens,local_dict,global_dict)
sympy.sympy_parser._token_callable(token,local_dict,global_dict,nextToken=None)
sympy.sympy_parser._token_splittable(token)
sympy.sympy_parser.auto_number(tokens,local_dict,global_dict)
sympy.sympy_parser.auto_symbol(tokens,local_dict,global_dict)
sympy.sympy_parser.convert_xor(tokens,local_dict,global_dict)
sympy.sympy_parser.eval_expr(code,local_dict,global_dict)
sympy.sympy_parser.evaluateFalse(s)
sympy.sympy_parser.factorial_notation(tokens,local_dict,global_dict)
sympy.sympy_parser.function_exponentiation(tokens,local_dict,global_dict)
sympy.sympy_parser.implicit_application(result,local_dict,global_dict)
sympy.sympy_parser.implicit_multiplication(result,local_dict,global_dict)
sympy.sympy_parser.implicit_multiplication_application(result,local_dict,global_dict)
sympy.sympy_parser.lambda_notation(tokens,local_dict,global_dict)
sympy.sympy_parser.parse_expr(s,local_dict=None,transformations=standard_transformations,global_dict=None,evaluate=True)
sympy.sympy_parser.rationalize(tokens,local_dict,global_dict)
sympy.sympy_parser.split_symbols_custom(predicate)
sympy.sympy_parser.stringify_expr(s,local_dict,global_dict,transformations)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/maxima.py----------------------------------------
A:sympy.parsing.maxima.var_name->re.compile('^\\s*(\\w+)\\s*:')
A:sympy.parsing.maxima.str->str[var_match.end():].strip()
A:sympy.parsing.maxima.var_match->re.compile('^\\s*(\\w+)\\s*:').search(str)
A:sympy.parsing.maxima.assign_var->re.compile('^\\s*(\\w+)\\s*:').search(str).group(1)
A:sympy.parsing.maxima.dct->MaximaHelpers.__dict__.copy()
A:sympy.parsing.maxima.obj->sympify(str, locals=dct)
sympy.maxima.MaximaHelpers
sympy.maxima.MaximaHelpers.maxima_csc(expr)
sympy.maxima.MaximaHelpers.maxima_expand(expr)
sympy.maxima.MaximaHelpers.maxima_float(expr)
sympy.maxima.MaximaHelpers.maxima_product(a1,a2,a3,a4)
sympy.maxima.MaximaHelpers.maxima_sec(expr)
sympy.maxima.MaximaHelpers.maxima_sum(a1,a2,a3,a4)
sympy.maxima.MaximaHelpers.maxima_trigexpand(expr)
sympy.maxima.parse_maxima(str,globals=None,name_dict={})
sympy.parsing.maxima.MaximaHelpers
sympy.parsing.maxima.MaximaHelpers.maxima_csc(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_expand(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_float(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_product(a1,a2,a3,a4)
sympy.parsing.maxima.MaximaHelpers.maxima_sec(expr)
sympy.parsing.maxima.MaximaHelpers.maxima_sum(a1,a2,a3,a4)
sympy.parsing.maxima.MaximaHelpers.maxima_trigexpand(expr)
sympy.parsing.maxima.parse_maxima(str,globals=None,name_dict={})


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/ast_parser.py----------------------------------------
A:sympy.parsing.ast_parser.body->self.visit(node.body)
A:sympy.parsing.ast_parser.n->Call(Name('Lambda', Load()), [Tuple(args, Load()), body], [], None, None)
A:sympy.parsing.ast_parser.a->Transform(local_dict, global_dict).visit(a)
A:sympy.parsing.ast_parser.e->compile(a, '<string>', 'eval')
sympy.ast_parser.Transform(self,local_dict,global_dict)
sympy.ast_parser.Transform.visit_Lambda(self,node)
sympy.ast_parser.Transform.visit_Name(self,node)
sympy.ast_parser.Transform.visit_Num(self,node)
sympy.ast_parser.parse_expr(s,local_dict)
sympy.parsing.ast_parser.Transform(self,local_dict,global_dict)
sympy.parsing.ast_parser.Transform.__init__(self,local_dict,global_dict)
sympy.parsing.ast_parser.Transform.visit_Lambda(self,node)
sympy.parsing.ast_parser.Transform.visit_Name(self,node)
sympy.parsing.ast_parser.Transform.visit_Num(self,node)
sympy.parsing.ast_parser.parse_expr(s,local_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/tests/test_sympy_parser.py----------------------------------------
A:sympy.parsing.tests.test_sympy_parser.x->Symbol('x')
A:sympy.parsing.tests.test_sympy_parser.y->Symbol('y')
A:sympy.parsing.tests.test_sympy_parser.xy->Symbol('xy')
A:sympy.parsing.tests.test_sympy_parser.a->Symbol('a')
A:sympy.parsing.tests.test_sympy_parser.f->Function('f')
sympy.parsing.tests.test_sympy_parser.test_factorial_fail()
sympy.parsing.tests.test_sympy_parser.test_global_dict()
sympy.parsing.tests.test_sympy_parser.test_issue_2515()
sympy.parsing.tests.test_sympy_parser.test_issue_7663()
sympy.parsing.tests.test_sympy_parser.test_local_dict()
sympy.parsing.tests.test_sympy_parser.test_rationalize()
sympy.parsing.tests.test_sympy_parser.test_split_symbols()
sympy.parsing.tests.test_sympy_parser.test_split_symbols_function()
sympy.parsing.tests.test_sympy_parser.test_sympy_parser()
sympy.tests.test_sympy_parser.test_factorial_fail()
sympy.tests.test_sympy_parser.test_global_dict()
sympy.tests.test_sympy_parser.test_issue_2515()
sympy.tests.test_sympy_parser.test_issue_7663()
sympy.tests.test_sympy_parser.test_local_dict()
sympy.tests.test_sympy_parser.test_rationalize()
sympy.tests.test_sympy_parser.test_split_symbols()
sympy.tests.test_sympy_parser.test_split_symbols_function()
sympy.tests.test_sympy_parser.test_sympy_parser()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/tests/test_mathematica.py----------------------------------------
sympy.parsing.tests.test_mathematica.test_mathematica()
sympy.tests.test_mathematica.test_mathematica()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/tests/test_implicit_multiplication_application.py----------------------------------------
A:sympy.parsing.tests.test_implicit_multiplication_application.implicit->parse_expr(case, transformations=transformations2)
A:sympy.parsing.tests.test_implicit_multiplication_application.normal->parse_expr(cases[case], transformations=transformations)
sympy.parsing.tests.test_implicit_multiplication_application.test_all_implicit_steps()
sympy.parsing.tests.test_implicit_multiplication_application.test_function_exponentiation()
sympy.parsing.tests.test_implicit_multiplication_application.test_implicit_application()
sympy.parsing.tests.test_implicit_multiplication_application.test_implicit_multiplication()
sympy.parsing.tests.test_implicit_multiplication_application.test_symbol_splitting()
sympy.tests.test_implicit_multiplication_application.test_all_implicit_steps()
sympy.tests.test_implicit_multiplication_application.test_function_exponentiation()
sympy.tests.test_implicit_multiplication_application.test_implicit_application()
sympy.tests.test_implicit_multiplication_application.test_implicit_multiplication()
sympy.tests.test_implicit_multiplication_application.test_symbol_splitting()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/parsing/tests/test_maxima.py----------------------------------------
A:sympy.parsing.tests.test_maxima.n->Symbol('n', integer=True)
sympy.parsing.tests.test_maxima.test_injection()
sympy.parsing.tests.test_maxima.test_maxima_functions()
sympy.parsing.tests.test_maxima.test_parser()
sympy.tests.test_maxima.test_injection()
sympy.tests.test_maxima.test_maxima_functions()
sympy.tests.test_maxima.test_parser()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/benchmarks/bench_meijerint.py----------------------------------------
A:sympy.benchmarks.bench_meijerint.(nu, beta, rho)->symbols('nu beta rho')
A:sympy.benchmarks.bench_meijerint.(apos, bpos, cpos, dpos, posk, p)->symbols('a b c d k p', positive=True)
A:sympy.benchmarks.bench_meijerint.k->Symbol('k', real=True)
A:sympy.benchmarks.bench_meijerint.negk->Symbol('k', negative=True)
A:sympy.benchmarks.bench_meijerint.(mu1, mu2)->symbols('mu1 mu2', real=True, nonzero=True, finite=True)
A:sympy.benchmarks.bench_meijerint.(sigma1, sigma2)->symbols('sigma1 sigma2', real=True, nonzero=True, finite=True, positive=True)
A:sympy.benchmarks.bench_meijerint.rate->Symbol('lambda', real=True, positive=True, finite=True)
A:sympy.benchmarks.bench_meijerint.(alpha, beta)->symbols('alpha beta', positive=True)
A:sympy.benchmarks.bench_meijerint.kint->Symbol('k', integer=True, positive=True)
A:sympy.benchmarks.bench_meijerint.(d1, d2)->symbols('d1 d2', positive=True)
A:sympy.benchmarks.bench_meijerint.(nupos, sigmapos)->symbols('nu sigma', positive=True)
A:sympy.benchmarks.bench_meijerint.mu->Symbol('mu', real=True)
A:sympy.benchmarks.bench_meijerint.u->Symbol('u', polar=True)
A:sympy.benchmarks.bench_meijerint.tpos->Symbol('t', positive=True)
A:sympy.benchmarks.bench_meijerint.res1->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (x, 0, oo), (y, -oo, oo), meijerg=True)
A:sympy.benchmarks.bench_meijerint.res2->integrate(expr * exponential(x, rate) * normal(y, mu1, sigma1), (y, -oo, oo), (x, 0, oo), meijerg=True)
A:sympy.benchmarks.bench_meijerint._t->time()
sympy.benchmarks.bench_meijerint.E(expr)
sympy.benchmarks.bench_meijerint.exponential(x,rate)
sympy.benchmarks.bench_meijerint.normal(x,mu,sigma)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/benchmarks/bench_symbench.py----------------------------------------
A:sympy.benchmarks.bench_symbench.a->right(x ** 2, 0, 5, 10 ** 4)
A:sympy.benchmarks.bench_symbench.v->srange(-pi, pi, sympify(1) / 10)
A:sympy.benchmarks.bench_symbench.L->uniq(L)
A:sympy.benchmarks.bench_symbench.s->sum((simplify((x + sin(i)) / x + (x - sin(i)) / x) for i in xrange(100)))
A:sympy.benchmarks.bench_symbench.b->sympify(b)
A:sympy.benchmarks.bench_symbench.n->sympify(n)
A:sympy.benchmarks.bench_symbench.x->f.expand().atoms(Symbol).pop()
A:sympy.benchmarks.bench_symbench.f->f.expand().expand()
A:sympy.benchmarks.bench_symbench.t->clock()
sympy.benchmarks.bench_symbench._bench_R9()
sympy.benchmarks.bench_symbench.bench_R1()
sympy.benchmarks.bench_symbench.bench_R10()
sympy.benchmarks.bench_symbench.bench_R11()
sympy.benchmarks.bench_symbench.bench_R2()
sympy.benchmarks.bench_symbench.bench_R3()
sympy.benchmarks.bench_symbench.bench_R4()
sympy.benchmarks.bench_symbench.bench_R5()
sympy.benchmarks.bench_symbench.bench_R6()
sympy.benchmarks.bench_symbench.bench_R7()
sympy.benchmarks.bench_symbench.bench_R8()
sympy.benchmarks.bench_symbench.bench_S1()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/rv.py----------------------------------------
A:sympy.stats.rv.symbols->random_symbols(expr)
A:sympy.stats.rv.condition->Eq(condition, condition.symbol)
A:sympy.stats.rv.s->Symbol(s)
A:sympy.stats.rv.pspace->property(lambda self: self.args[0])
A:sympy.stats.rv.symbol->property(lambda self: self.args[1])
A:sympy.stats.rv.name->property(lambda self: self.symbol.name)
A:sympy.stats.rv.obj->sympy.Basic.__new__(cls, *FiniteSet(*spaces))
A:sympy.stats.rv.rvs->list(ps.values)
A:sympy.stats.rv.expr->given(expr, condition, **kwargs)
A:sympy.stats.rv.domains2->FiniteSet(*domains2)
A:sympy.stats.rv.elem->frozenset([item for item in other if item[0] in domain.symbols])
A:sympy.stats.rv.condsymbols->random_symbols(condition)
A:sympy.stats.rv.results->solve(condition, rv)
A:sympy.stats.rv.fullspace->pspace(Tuple(expr, condition))
A:sympy.stats.rv.space->pspace(Tuple(expr, condition)).conditional_space(condition, **kwargs)
A:sympy.stats.rv.swapdict->dict([(rv, rv.symbol) for rv in symbols])
A:sympy.stats.rv.result->pspace(expr).compute_cdf(expr, **kwargs)
A:sympy.stats.rv.ps->pspace(expr)
A:sympy.stats.rv.fn->lambdify(rvs, expr, **kwargs)
A:sympy.stats.rv.given_fn->lambdify(rvs, condition, **kwargs)
A:sympy.stats.rv.d->pspace(expr).sample()
A:sympy.stats.rv.gd->Eq(condition, condition.symbol).xreplace(d)
A:sympy.stats.rv.samples->sample_iter(expr, given_condition, numsamples=numsamples, **kwargs)
A:sympy.stats.rv.z->Symbol('z', real=True)
sympy.stats.rv.ConditionalDomain(cls,fulldomain,condition)
sympy.stats.rv.ConditionalDomain.__new__(cls,fulldomain,condition)
sympy.stats.rv.ConditionalDomain.as_boolean(self)
sympy.stats.rv.ConditionalDomain.condition(self)
sympy.stats.rv.ConditionalDomain.fulldomain(self)
sympy.stats.rv.ConditionalDomain.set(self)
sympy.stats.rv.ConditionalDomain.symbols(self)
sympy.stats.rv.Density(Basic)
sympy.stats.rv.Density.condition(self)
sympy.stats.rv.Density.doit(self,evaluate=True,**kwargs)
sympy.stats.rv.NamedArgsMixin(object)
sympy.stats.rv.NamedArgsMixin.__getattr__(self,attr)
sympy.stats.rv.PSpace(Basic)
sympy.stats.rv.PSpace.compute_density(self,expr)
sympy.stats.rv.PSpace.density(self)
sympy.stats.rv.PSpace.domain(self)
sympy.stats.rv.PSpace.integrate(self,expr)
sympy.stats.rv.PSpace.probability(self,condition)
sympy.stats.rv.PSpace.sample(self)
sympy.stats.rv.PSpace.symbols(self)
sympy.stats.rv.PSpace.values(self)
sympy.stats.rv.PSpace.where(self,condition)
sympy.stats.rv.ProductDomain(cls,*domains)
sympy.stats.rv.ProductDomain.__contains__(self,other)
sympy.stats.rv.ProductDomain.__new__(cls,*domains)
sympy.stats.rv.ProductDomain.as_boolean(self)
sympy.stats.rv.ProductDomain.domains(self)
sympy.stats.rv.ProductDomain.set(self)
sympy.stats.rv.ProductDomain.sym_domain_dict(self)
sympy.stats.rv.ProductDomain.symbols(self)
sympy.stats.rv.ProductPSpace(cls,*spaces)
sympy.stats.rv.ProductPSpace.__new__(cls,*spaces)
sympy.stats.rv.ProductPSpace.density(self)
sympy.stats.rv.ProductPSpace.domain(self)
sympy.stats.rv.ProductPSpace.integrate(self,expr,rvs=None,**kwargs)
sympy.stats.rv.ProductPSpace.rs_space_dict(self)
sympy.stats.rv.ProductPSpace.sample(self)
sympy.stats.rv.ProductPSpace.spaces(self)
sympy.stats.rv.ProductPSpace.symbols(self)
sympy.stats.rv.ProductPSpace.values(self)
sympy.stats.rv.RandomDomain(cls,symbols,*args)
sympy.stats.rv.RandomDomain.__contains__(self,other)
sympy.stats.rv.RandomDomain.__new__(cls,symbols,*args)
sympy.stats.rv.RandomDomain.integrate(self,expr)
sympy.stats.rv.RandomDomain.set(self)
sympy.stats.rv.RandomDomain.symbols(self)
sympy.stats.rv.RandomSymbol(cls,pspace,symbol)
sympy.stats.rv.RandomSymbol.__new__(cls,pspace,symbol)
sympy.stats.rv.RandomSymbol._eval_is_integer(self)
sympy.stats.rv.RandomSymbol._eval_is_positive(self)
sympy.stats.rv.RandomSymbol._eval_is_real(self)
sympy.stats.rv.RandomSymbol._hashable_content(self)
sympy.stats.rv.RandomSymbol.free_symbols(self)
sympy.stats.rv.RandomSymbol.is_commutative(self)
sympy.stats.rv.SingleDomain(cls,symbol,set)
sympy.stats.rv.SingleDomain.__contains__(self,other)
sympy.stats.rv.SingleDomain.__new__(cls,symbol,set)
sympy.stats.rv.SingleDomain.symbol(self)
sympy.stats.rv.SingleDomain.symbols(self)
sympy.stats.rv.SinglePSpace(cls,s,distribution)
sympy.stats.rv.SinglePSpace.__new__(cls,s,distribution)
sympy.stats.rv.SinglePSpace.distribution(self)
sympy.stats.rv.SinglePSpace.pdf(self)
sympy.stats.rv.SinglePSpace.symbol(self)
sympy.stats.rv.SinglePSpace.value(self)
sympy.stats.rv._value_check(condition,message)
sympy.stats.rv.cdf(expr,condition=None,evaluate=True,**kwargs)
sympy.stats.rv.density(expr,condition=None,evaluate=True,numsamples=None,**kwargs)
sympy.stats.rv.dependent(a,b)
sympy.stats.rv.expectation(expr,condition=None,numsamples=None,evaluate=True,**kwargs)
sympy.stats.rv.given(expr,condition=None,**kwargs)
sympy.stats.rv.independent(a,b)
sympy.stats.rv.probability(condition,given_condition=None,numsamples=None,evaluate=True,**kwargs)
sympy.stats.rv.pspace(expr)
sympy.stats.rv.pspace_independent(a,b)
sympy.stats.rv.random_symbols(expr)
sympy.stats.rv.rs_swap(a,b)
sympy.stats.rv.rv_subs(expr,symbols=None)
sympy.stats.rv.sample(expr,condition=None,**kwargs)
sympy.stats.rv.sample_iter(expr,condition=None,numsamples=S.Infinity,**kwargs)
sympy.stats.rv.sample_iter_lambdify(expr,condition=None,numsamples=S.Infinity,**kwargs)
sympy.stats.rv.sample_iter_subs(expr,condition=None,numsamples=S.Infinity,**kwargs)
sympy.stats.rv.sampling_E(expr,given_condition=None,numsamples=1,evalf=True,**kwargs)
sympy.stats.rv.sampling_P(condition,given_condition=None,numsamples=1,evalf=True,**kwargs)
sympy.stats.rv.sampling_density(expr,given_condition=None,numsamples=1,**kwargs)
sympy.stats.rv.sumsets(sets)
sympy.stats.rv.where(condition,given_condition=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/crv.py----------------------------------------
A:sympy.stats.crv.expr->expr.xreplace(dict(((rv, rv.symbol) for rv in rvs))).xreplace(dict(((rv, rv.symbol) for rv in rvs)))
A:sympy.stats.crv.fullintgrl->self.fulldomain.integrate(expr, variables)
A:sympy.stats.crv.cond->conditions.pop()
A:sympy.stats.crv.symbol->tuple((rs.symbol for rs in randomsymbols)).pop()
A:sympy.stats.crv.cintvl->reduce_rational_inequalities_wrap(cond, symbol)
A:sympy.stats.crv.lintvl->Interval(limit[1], limit[2])
A:sympy.stats.crv.intvl->reduce_rational_inequalities_wrap(cond, symbol).intersect(lintvl)
A:sympy.stats.crv.set->Interval(-oo, oo)
A:sympy.stats.crv.args->list(map(sympify, args))
A:sympy.stats.crv.icdf->self._inverse_cdf_expression()
A:sympy.stats.crv.(x, z)->symbols('x, z', real=True, finite=True, cls=Dummy)
A:sympy.stats.crv.inverse_cdf->solve(self.cdf(x) - z, x)
A:sympy.stats.crv.pdf->self.compute_density(rv, **kwargs)
A:sympy.stats.crv.cdf->Piecewise((cdf, z >= left_bound), (0, True))
A:sympy.stats.crv.integral->Integral(expr * self.pdf(var), (var, self.set), **kwargs)
A:sympy.stats.crv.rvs->frozenset(random_symbols(condition))
A:sympy.stats.crv.domain_symbols->frozenset((rv.symbol for rv in rvs))
A:sympy.stats.crv.randomsymbols->tuple(set(self.values) - frozenset([expr]))
A:sympy.stats.crv.symbols->tuple((rs.symbol for rs in randomsymbols))
A:sympy.stats.crv.z->Dummy('z', real=True, finite=True)
A:sympy.stats.crv.d->self.compute_density(expr, **kwargs)
A:sympy.stats.crv.domain->ConditionalContinuousDomain(self.domain, condition)
A:sympy.stats.crv.dens->ContinuousDistributionHandmade(dens)
A:sympy.stats.crv.space->SingleContinuousPSpace(z, dens)
A:sympy.stats.crv.interval->interval.intersect(self.domain.set).intersect(self.domain.set)
A:sympy.stats.crv.condition->condition.xreplace(dict(((rv, rv.symbol) for rv in self.values))).xreplace(dict(((rv, rv.symbol) for rv in self.values)))
A:sympy.stats.crv.density->Lambda(domain.symbols, pdf)
A:sympy.stats.crv.y->Dummy('y')
A:sympy.stats.crv.gs->solve(expr - y, self.value)
A:sympy.stats.crv.fx->self.compute_density(self.value)
A:sympy.stats.crv.fy->sum((fx(g) * abs(g.diff(y)) for g in gs))
A:sympy.stats.crv.p->Mul(*[space.pdf for space in self.spaces])
A:sympy.stats.crv.I->I.intersect(i).intersect(i)
sympy.stats.crv.ConditionalContinuousDomain(ContinuousDomain,ConditionalDomain)
sympy.stats.crv.ConditionalContinuousDomain.as_boolean(self)
sympy.stats.crv.ConditionalContinuousDomain.integrate(self,expr,variables=None,**kwargs)
sympy.stats.crv.ConditionalContinuousDomain.set(self)
sympy.stats.crv.ContinuousDistribution(self,*args)
sympy.stats.crv.ContinuousDistribution.__call__(self,*args)
sympy.stats.crv.ContinuousDistributionHandmade(cls,pdf,set=Interval(-oo,oo))
sympy.stats.crv.ContinuousDistributionHandmade.__new__(cls,pdf,set=Interval(-oo,oo))
sympy.stats.crv.ContinuousDistributionHandmade.set(self)
sympy.stats.crv.ContinuousDomain(RandomDomain)
sympy.stats.crv.ContinuousDomain.as_boolean(self)
sympy.stats.crv.ContinuousPSpace(PSpace)
sympy.stats.crv.ContinuousPSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.compute_density(self,expr,**kwargs)
sympy.stats.crv.ContinuousPSpace.conditional_space(self,condition,normalize=True,**kwargs)
sympy.stats.crv.ContinuousPSpace.density(self)
sympy.stats.crv.ContinuousPSpace.domain(self)
sympy.stats.crv.ContinuousPSpace.integrate(self,expr,rvs=None,**kwargs)
sympy.stats.crv.ContinuousPSpace.pdf(self)
sympy.stats.crv.ContinuousPSpace.probability(self,condition,**kwargs)
sympy.stats.crv.ContinuousPSpace.where(self,condition)
sympy.stats.crv.ProductContinuousDomain(ProductDomain,ContinuousDomain)
sympy.stats.crv.ProductContinuousDomain.as_boolean(self)
sympy.stats.crv.ProductContinuousDomain.integrate(self,expr,variables=None,**kwargs)
sympy.stats.crv.ProductContinuousPSpace(ProductPSpace,ContinuousPSpace)
sympy.stats.crv.ProductContinuousPSpace.pdf(self)
sympy.stats.crv.SingleContinuousDistribution(cls,*args)
sympy.stats.crv.SingleContinuousDistribution.__new__(cls,*args)
sympy.stats.crv.SingleContinuousDistribution._inverse_cdf_expression(self)
sympy.stats.crv.SingleContinuousDistribution.cdf(self,x,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.check(*args)
sympy.stats.crv.SingleContinuousDistribution.compute_cdf(self,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.expectation(self,expr,var,evaluate=True,**kwargs)
sympy.stats.crv.SingleContinuousDistribution.sample(self)
sympy.stats.crv.SingleContinuousDomain(ContinuousDomain,SingleDomain)
sympy.stats.crv.SingleContinuousDomain.as_boolean(self)
sympy.stats.crv.SingleContinuousDomain.integrate(self,expr,variables=None,**kwargs)
sympy.stats.crv.SingleContinuousPSpace(ContinuousPSpace,SinglePSpace)
sympy.stats.crv.SingleContinuousPSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.compute_density(self,expr,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.domain(self)
sympy.stats.crv.SingleContinuousPSpace.integrate(self,expr,rvs=None,**kwargs)
sympy.stats.crv.SingleContinuousPSpace.sample(self)
sympy.stats.crv.SingleContinuousPSpace.set(self)
sympy.stats.crv._reduce_inequalities(conditions,var,**kwargs)
sympy.stats.crv.reduce_rational_inequalities_wrap(condition,var)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/frv.py----------------------------------------
A:sympy.stats.frv.item->sympify(item)
A:sympy.stats.frv.set->FiniteSet(*set)
A:sympy.stats.frv.proditer->product(*[iter(space._density.items()) for space in self.spaces])
A:sympy.stats.frv.cond->rv_subs(condition)
A:sympy.stats.frv.val->Tuple(*self.values).xreplace(dict(elem))
A:sympy.stats.frv.args->list(map(sympify, args))
A:sympy.stats.frv.x->random.uniform(0, 1)
A:sympy.stats.frv.values->property(lambda self: self.dict.values)
A:sympy.stats.frv.items->list(cdf.items())
A:sympy.stats.frv.__iter__->property(lambda self: self.dict.__iter__)
A:sympy.stats.frv.__getitem__->property(lambda self: self.dict.__getitem__)
A:sympy.stats.frv.density->dict(((key, val / prob) for (key, val) in self._density.items() if key in domain))
A:sympy.stats.frv.public_density->Dict(density)
A:sympy.stats.frv.obj->sympy.stats.rv.PSpace.__new__(cls, domain, public_density)
A:sympy.stats.frv.expr->Tuple(*self.values)
A:sympy.stats.frv.d->self.compute_density(expr)
A:sympy.stats.frv.prob->Mul(*probs)
A:sympy.stats.frv.cdf->self.sorted_cdf(expr, python_float=True)
A:sympy.stats.frv.sorted_items->sorted(items, key=lambda val_cumprob: val_cumprob[1])
A:sympy.stats.frv.cond_symbols->frozenset((rs.symbol for rs in random_symbols(condition)))
A:sympy.stats.frv.domain->self.where(condition)
A:sympy.stats.frv.(elems, probs)->list(zip(*items))
A:sympy.stats.frv.elem->sumsets(elems)
sympy.stats.frv.ConditionalFiniteDomain(cls,domain,condition)
sympy.stats.frv.ConditionalFiniteDomain.__contains__(self,other)
sympy.stats.frv.ConditionalFiniteDomain.__iter__(self)
sympy.stats.frv.ConditionalFiniteDomain.__new__(cls,domain,condition)
sympy.stats.frv.ConditionalFiniteDomain._test(self,elem)
sympy.stats.frv.ConditionalFiniteDomain.as_boolean(self)
sympy.stats.frv.ConditionalFiniteDomain.set(self)
sympy.stats.frv.FiniteDensity(self,item)
sympy.stats.frv.FiniteDensity.__call__(self,item)
sympy.stats.frv.FiniteDensity.dict(self)
sympy.stats.frv.FiniteDomain(RandomDomain)
sympy.stats.frv.FiniteDomain.__contains__(self,other)
sympy.stats.frv.FiniteDomain.__iter__(self)
sympy.stats.frv.FiniteDomain.as_boolean(self)
sympy.stats.frv.FiniteDomain.dict(self)
sympy.stats.frv.FiniteDomain.elements(self)
sympy.stats.frv.FiniteDomain.symbols(self)
sympy.stats.frv.FinitePSpace(cls,domain,density)
sympy.stats.frv.FinitePSpace.__new__(cls,domain,density)
sympy.stats.frv.FinitePSpace.compute_cdf(self,expr)
sympy.stats.frv.FinitePSpace.compute_density(self,expr)
sympy.stats.frv.FinitePSpace.conditional_space(self,condition)
sympy.stats.frv.FinitePSpace.density(self)
sympy.stats.frv.FinitePSpace.domain(self)
sympy.stats.frv.FinitePSpace.integrate(self,expr,rvs=None)
sympy.stats.frv.FinitePSpace.prob_of(self,elem)
sympy.stats.frv.FinitePSpace.probability(self,condition)
sympy.stats.frv.FinitePSpace.sample(self)
sympy.stats.frv.FinitePSpace.sorted_cdf(self,expr,python_float=False)
sympy.stats.frv.FinitePSpace.where(self,condition)
sympy.stats.frv.ProductFiniteDomain(ProductDomain,FiniteDomain)
sympy.stats.frv.ProductFiniteDomain.__iter__(self)
sympy.stats.frv.ProductFiniteDomain.elements(self)
sympy.stats.frv.ProductFinitePSpace(ProductPSpace,FinitePSpace)
sympy.stats.frv.ProductFinitePSpace._density(self)
sympy.stats.frv.ProductFinitePSpace.density(self)
sympy.stats.frv.ProductFinitePSpace.domain(self)
sympy.stats.frv.SingleFiniteDistribution(cls,*args)
sympy.stats.frv.SingleFiniteDistribution.__contains__(self,other)
sympy.stats.frv.SingleFiniteDistribution.__new__(cls,*args)
sympy.stats.frv.SingleFiniteDistribution.dict(self)
sympy.stats.frv.SingleFiniteDistribution.pdf(self)
sympy.stats.frv.SingleFiniteDistribution.set(self)
sympy.stats.frv.SingleFiniteDomain(cls,symbol,set)
sympy.stats.frv.SingleFiniteDomain.__contains__(self,other)
sympy.stats.frv.SingleFiniteDomain.__iter__(self)
sympy.stats.frv.SingleFiniteDomain.__new__(cls,symbol,set)
sympy.stats.frv.SingleFiniteDomain.elements(self)
sympy.stats.frv.SingleFiniteDomain.set(self)
sympy.stats.frv.SingleFiniteDomain.symbol(self)
sympy.stats.frv.SingleFiniteDomain.symbols(self)
sympy.stats.frv.SingleFinitePSpace(SinglePSpace,FinitePSpace)
sympy.stats.frv.SingleFinitePSpace._density(self)
sympy.stats.frv.SingleFinitePSpace.domain(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/crv_types.py----------------------------------------
A:sympy.stats.crv_types.pdf->Lambda(symbol, density)
A:sympy.stats.crv_types.dist->cls(*args)
A:sympy.stats.crv_types.args->list(map(sympify, args))
A:sympy.stats.crv_types.set->Interval(0, oo)
A:sympy.stats.crv_types.(a, s, m)->list(map(sympify, (a, s, m)))
A:sympy.stats.crv_types.z->Dummy('z', real=True, finite=True)
A:sympy.stats.crv_types.result->result.subs({Max(self.left, self.right): self.right, Min(self.left, self.right): self.left}).subs({Max(self.left, self.right): self.right, Min(self.left, self.right): self.left})
A:sympy.stats.crv_types.min->self.atoms(Min)
A:sympy.stats.crv_types.k->Dummy('k')
sympy.stats.Arcsin(name,a=0,b=1)
sympy.stats.ArcsinDistribution(SingleContinuousDistribution)
sympy.stats.ArcsinDistribution.pdf(self,x)
sympy.stats.Benini(name,alpha,beta,sigma)
sympy.stats.BeniniDistribution(SingleContinuousDistribution)
sympy.stats.BeniniDistribution.pdf(self,x)
sympy.stats.BeniniDistribution.set(self)
sympy.stats.Beta(name,alpha,beta)
sympy.stats.BetaDistribution(SingleContinuousDistribution)
sympy.stats.BetaDistribution.check(alpha,beta)
sympy.stats.BetaDistribution.pdf(self,x)
sympy.stats.BetaDistribution.sample(self)
sympy.stats.BetaPrime(name,alpha,beta)
sympy.stats.BetaPrimeDistribution(SingleContinuousDistribution)
sympy.stats.BetaPrimeDistribution.pdf(self,x)
sympy.stats.Cauchy(name,x0,gamma)
sympy.stats.CauchyDistribution(SingleContinuousDistribution)
sympy.stats.CauchyDistribution.pdf(self,x)
sympy.stats.Chi(name,k)
sympy.stats.ChiDistribution(SingleContinuousDistribution)
sympy.stats.ChiDistribution.pdf(self,x)
sympy.stats.ChiNoncentral(name,k,l)
sympy.stats.ChiNoncentralDistribution(SingleContinuousDistribution)
sympy.stats.ChiNoncentralDistribution.pdf(self,x)
sympy.stats.ChiSquared(name,k)
sympy.stats.ChiSquaredDistribution(SingleContinuousDistribution)
sympy.stats.ChiSquaredDistribution.pdf(self,x)
sympy.stats.ContinuousRV(symbol,density,set=Interval(-oo,oo))
sympy.stats.Dagum(name,p,a,b)
sympy.stats.DagumDistribution(SingleContinuousDistribution)
sympy.stats.DagumDistribution.pdf(self,x)
sympy.stats.Erlang(name,k,l)
sympy.stats.Exponential(name,rate)
sympy.stats.ExponentialDistribution(SingleContinuousDistribution)
sympy.stats.ExponentialDistribution.check(rate)
sympy.stats.ExponentialDistribution.pdf(self,x)
sympy.stats.ExponentialDistribution.sample(self)
sympy.stats.FDistribution(name,d1,d2)
sympy.stats.FDistributionDistribution(SingleContinuousDistribution)
sympy.stats.FDistributionDistribution.pdf(self,x)
sympy.stats.FisherZ(name,d1,d2)
sympy.stats.FisherZDistribution(SingleContinuousDistribution)
sympy.stats.FisherZDistribution.pdf(self,x)
sympy.stats.Frechet(name,a,s=1,m=0)
sympy.stats.FrechetDistribution(cls,a,s=1,m=0)
sympy.stats.FrechetDistribution.pdf(self,x)
sympy.stats.Gamma(name,k,theta)
sympy.stats.GammaDistribution(SingleContinuousDistribution)
sympy.stats.GammaDistribution.check(k,theta)
sympy.stats.GammaDistribution.pdf(self,x)
sympy.stats.GammaDistribution.sample(self)
sympy.stats.GammaInverse(name,a,b)
sympy.stats.GammaInverseDistribution(SingleContinuousDistribution)
sympy.stats.GammaInverseDistribution.check(a,b)
sympy.stats.GammaInverseDistribution.pdf(self,x)
sympy.stats.Kumaraswamy(name,a,b)
sympy.stats.KumaraswamyDistribution(SingleContinuousDistribution)
sympy.stats.KumaraswamyDistribution.check(a,b)
sympy.stats.KumaraswamyDistribution.pdf(self,x)
sympy.stats.Laplace(name,mu,b)
sympy.stats.LaplaceDistribution(SingleContinuousDistribution)
sympy.stats.LaplaceDistribution.pdf(self,x)
sympy.stats.LogNormal(name,mean,std)
sympy.stats.LogNormalDistribution(SingleContinuousDistribution)
sympy.stats.LogNormalDistribution.pdf(self,x)
sympy.stats.LogNormalDistribution.sample(self)
sympy.stats.Logistic(name,mu,s)
sympy.stats.LogisticDistribution(SingleContinuousDistribution)
sympy.stats.LogisticDistribution.pdf(self,x)
sympy.stats.Maxwell(name,a)
sympy.stats.MaxwellDistribution(SingleContinuousDistribution)
sympy.stats.MaxwellDistribution.pdf(self,x)
sympy.stats.Nakagami(name,mu,omega)
sympy.stats.NakagamiDistribution(SingleContinuousDistribution)
sympy.stats.NakagamiDistribution.pdf(self,x)
sympy.stats.Normal(name,mean,std)
sympy.stats.NormalDistribution(SingleContinuousDistribution)
sympy.stats.NormalDistribution.check(mean,std)
sympy.stats.NormalDistribution.pdf(self,x)
sympy.stats.NormalDistribution.sample(self)
sympy.stats.Pareto(name,xm,alpha)
sympy.stats.ParetoDistribution(SingleContinuousDistribution)
sympy.stats.ParetoDistribution.check(xm,alpha)
sympy.stats.ParetoDistribution.pdf(self,x)
sympy.stats.ParetoDistribution.sample(self)
sympy.stats.ParetoDistribution.set(self)
sympy.stats.QuadraticU(name,a,b)
sympy.stats.QuadraticUDistribution(SingleContinuousDistribution)
sympy.stats.QuadraticUDistribution.pdf(self,x)
sympy.stats.QuadraticUDistribution.set(self)
sympy.stats.RaisedCosine(name,mu,s)
sympy.stats.RaisedCosineDistribution(SingleContinuousDistribution)
sympy.stats.RaisedCosineDistribution.check(mu,s)
sympy.stats.RaisedCosineDistribution.pdf(self,x)
sympy.stats.RaisedCosineDistribution.set(self)
sympy.stats.Rayleigh(name,sigma)
sympy.stats.RayleighDistribution(SingleContinuousDistribution)
sympy.stats.RayleighDistribution.pdf(self,x)
sympy.stats.StudentT(name,nu)
sympy.stats.StudentTDistribution(SingleContinuousDistribution)
sympy.stats.StudentTDistribution.pdf(self,x)
sympy.stats.Triangular(name,a,b,c)
sympy.stats.TriangularDistribution(SingleContinuousDistribution)
sympy.stats.TriangularDistribution.pdf(self,x)
sympy.stats.Uniform(name,left,right)
sympy.stats.UniformDistribution(SingleContinuousDistribution)
sympy.stats.UniformDistribution.compute_cdf(self,**kwargs)
sympy.stats.UniformDistribution.expectation(self,expr,var,**kwargs)
sympy.stats.UniformDistribution.pdf(self,x)
sympy.stats.UniformDistribution.sample(self)
sympy.stats.UniformSum(name,n)
sympy.stats.UniformSumDistribution(SingleContinuousDistribution)
sympy.stats.UniformSumDistribution.pdf(self,x)
sympy.stats.UniformSumDistribution.set(self)
sympy.stats.VonMises(name,mu,k)
sympy.stats.VonMisesDistribution(SingleContinuousDistribution)
sympy.stats.VonMisesDistribution.check(mu,k)
sympy.stats.VonMisesDistribution.pdf(self,x)
sympy.stats.Weibull(name,alpha,beta)
sympy.stats.WeibullDistribution(SingleContinuousDistribution)
sympy.stats.WeibullDistribution.check(alpha,beta)
sympy.stats.WeibullDistribution.pdf(self,x)
sympy.stats.WeibullDistribution.sample(self)
sympy.stats.WignerSemicircle(name,R)
sympy.stats.WignerSemicircleDistribution(SingleContinuousDistribution)
sympy.stats.WignerSemicircleDistribution.pdf(self,x)
sympy.stats.WignerSemicircleDistribution.set(self)
sympy.stats.crv_types.Arcsin(name,a=0,b=1)
sympy.stats.crv_types.ArcsinDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ArcsinDistribution.pdf(self,x)
sympy.stats.crv_types.Benini(name,alpha,beta,sigma)
sympy.stats.crv_types.BeniniDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BeniniDistribution.pdf(self,x)
sympy.stats.crv_types.BeniniDistribution.set(self)
sympy.stats.crv_types.Beta(name,alpha,beta)
sympy.stats.crv_types.BetaDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BetaDistribution.check(alpha,beta)
sympy.stats.crv_types.BetaDistribution.pdf(self,x)
sympy.stats.crv_types.BetaDistribution.sample(self)
sympy.stats.crv_types.BetaPrime(name,alpha,beta)
sympy.stats.crv_types.BetaPrimeDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.BetaPrimeDistribution.pdf(self,x)
sympy.stats.crv_types.Cauchy(name,x0,gamma)
sympy.stats.crv_types.CauchyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.CauchyDistribution.pdf(self,x)
sympy.stats.crv_types.Chi(name,k)
sympy.stats.crv_types.ChiDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiDistribution.pdf(self,x)
sympy.stats.crv_types.ChiNoncentral(name,k,l)
sympy.stats.crv_types.ChiNoncentralDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiNoncentralDistribution.pdf(self,x)
sympy.stats.crv_types.ChiSquared(name,k)
sympy.stats.crv_types.ChiSquaredDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ChiSquaredDistribution.pdf(self,x)
sympy.stats.crv_types.ContinuousRV(symbol,density,set=Interval(-oo,oo))
sympy.stats.crv_types.Dagum(name,p,a,b)
sympy.stats.crv_types.DagumDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.DagumDistribution.pdf(self,x)
sympy.stats.crv_types.Erlang(name,k,l)
sympy.stats.crv_types.Exponential(name,rate)
sympy.stats.crv_types.ExponentialDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ExponentialDistribution.check(rate)
sympy.stats.crv_types.ExponentialDistribution.pdf(self,x)
sympy.stats.crv_types.ExponentialDistribution.sample(self)
sympy.stats.crv_types.FDistribution(name,d1,d2)
sympy.stats.crv_types.FDistributionDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.FDistributionDistribution.pdf(self,x)
sympy.stats.crv_types.FisherZ(name,d1,d2)
sympy.stats.crv_types.FisherZDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.FisherZDistribution.pdf(self,x)
sympy.stats.crv_types.Frechet(name,a,s=1,m=0)
sympy.stats.crv_types.FrechetDistribution(cls,a,s=1,m=0)
sympy.stats.crv_types.FrechetDistribution.__new__(cls,a,s=1,m=0)
sympy.stats.crv_types.FrechetDistribution.pdf(self,x)
sympy.stats.crv_types.Gamma(name,k,theta)
sympy.stats.crv_types.GammaDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GammaDistribution.check(k,theta)
sympy.stats.crv_types.GammaDistribution.pdf(self,x)
sympy.stats.crv_types.GammaDistribution.sample(self)
sympy.stats.crv_types.GammaInverse(name,a,b)
sympy.stats.crv_types.GammaInverseDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.GammaInverseDistribution.check(a,b)
sympy.stats.crv_types.GammaInverseDistribution.pdf(self,x)
sympy.stats.crv_types.Kumaraswamy(name,a,b)
sympy.stats.crv_types.KumaraswamyDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.KumaraswamyDistribution.check(a,b)
sympy.stats.crv_types.KumaraswamyDistribution.pdf(self,x)
sympy.stats.crv_types.Laplace(name,mu,b)
sympy.stats.crv_types.LaplaceDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LaplaceDistribution.pdf(self,x)
sympy.stats.crv_types.LogNormal(name,mean,std)
sympy.stats.crv_types.LogNormalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogNormalDistribution.pdf(self,x)
sympy.stats.crv_types.LogNormalDistribution.sample(self)
sympy.stats.crv_types.Logistic(name,mu,s)
sympy.stats.crv_types.LogisticDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.LogisticDistribution.pdf(self,x)
sympy.stats.crv_types.Maxwell(name,a)
sympy.stats.crv_types.MaxwellDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.MaxwellDistribution.pdf(self,x)
sympy.stats.crv_types.Nakagami(name,mu,omega)
sympy.stats.crv_types.NakagamiDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.NakagamiDistribution.pdf(self,x)
sympy.stats.crv_types.Normal(name,mean,std)
sympy.stats.crv_types.NormalDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.NormalDistribution.check(mean,std)
sympy.stats.crv_types.NormalDistribution.pdf(self,x)
sympy.stats.crv_types.NormalDistribution.sample(self)
sympy.stats.crv_types.Pareto(name,xm,alpha)
sympy.stats.crv_types.ParetoDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.ParetoDistribution.check(xm,alpha)
sympy.stats.crv_types.ParetoDistribution.pdf(self,x)
sympy.stats.crv_types.ParetoDistribution.sample(self)
sympy.stats.crv_types.ParetoDistribution.set(self)
sympy.stats.crv_types.QuadraticU(name,a,b)
sympy.stats.crv_types.QuadraticUDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.QuadraticUDistribution.pdf(self,x)
sympy.stats.crv_types.QuadraticUDistribution.set(self)
sympy.stats.crv_types.RaisedCosine(name,mu,s)
sympy.stats.crv_types.RaisedCosineDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.RaisedCosineDistribution.check(mu,s)
sympy.stats.crv_types.RaisedCosineDistribution.pdf(self,x)
sympy.stats.crv_types.RaisedCosineDistribution.set(self)
sympy.stats.crv_types.Rayleigh(name,sigma)
sympy.stats.crv_types.RayleighDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.RayleighDistribution.pdf(self,x)
sympy.stats.crv_types.StudentT(name,nu)
sympy.stats.crv_types.StudentTDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.StudentTDistribution.pdf(self,x)
sympy.stats.crv_types.Triangular(name,a,b,c)
sympy.stats.crv_types.TriangularDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.TriangularDistribution.pdf(self,x)
sympy.stats.crv_types.Uniform(name,left,right)
sympy.stats.crv_types.UniformDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.UniformDistribution.compute_cdf(self,**kwargs)
sympy.stats.crv_types.UniformDistribution.expectation(self,expr,var,**kwargs)
sympy.stats.crv_types.UniformDistribution.pdf(self,x)
sympy.stats.crv_types.UniformDistribution.sample(self)
sympy.stats.crv_types.UniformSum(name,n)
sympy.stats.crv_types.UniformSumDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.UniformSumDistribution.pdf(self,x)
sympy.stats.crv_types.UniformSumDistribution.set(self)
sympy.stats.crv_types.VonMises(name,mu,k)
sympy.stats.crv_types.VonMisesDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.VonMisesDistribution.check(mu,k)
sympy.stats.crv_types.VonMisesDistribution.pdf(self,x)
sympy.stats.crv_types.Weibull(name,alpha,beta)
sympy.stats.crv_types.WeibullDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.WeibullDistribution.check(alpha,beta)
sympy.stats.crv_types.WeibullDistribution.pdf(self,x)
sympy.stats.crv_types.WeibullDistribution.sample(self)
sympy.stats.crv_types.WignerSemicircle(name,R)
sympy.stats.crv_types.WignerSemicircleDistribution(SingleContinuousDistribution)
sympy.stats.crv_types.WignerSemicircleDistribution.pdf(self,x)
sympy.stats.crv_types.WignerSemicircleDistribution.set(self)
sympy.stats.crv_types.rv(symbol,cls,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/rv_interface.py----------------------------------------
A:sympy.stats.rv_interface.mu->expectation(X, condition, **kwargs)
A:sympy.stats.rv_interface.sigma->std(X, condition, **kwargs)
sympy.stats.cmoment(X,n,condition=None,**kwargs)
sympy.stats.correlation(X,Y,condition=None,**kwargs)
sympy.stats.covariance(X,Y,condition=None,**kwargs)
sympy.stats.moment(X,n,c=0,condition=None,**kwargs)
sympy.stats.rv_interface.cmoment(X,n,condition=None,**kwargs)
sympy.stats.rv_interface.correlation(X,Y,condition=None,**kwargs)
sympy.stats.rv_interface.covariance(X,Y,condition=None,**kwargs)
sympy.stats.rv_interface.moment(X,n,c=0,condition=None,**kwargs)
sympy.stats.rv_interface.skewness(X,condition=None,**kwargs)
sympy.stats.rv_interface.smoment(X,n,condition=None,**kwargs)
sympy.stats.rv_interface.standard_deviation(X,condition=None,**kwargs)
sympy.stats.rv_interface.variance(X,condition=None,**kwargs)
sympy.stats.skewness(X,condition=None,**kwargs)
sympy.stats.smoment(X,n,condition=None,**kwargs)
sympy.stats.variance(X,condition=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/drv.py----------------------------------------
A:sympy.stats.drv.args->list(map(sympify, args))
A:sympy.stats.drv.icdf->self._inverse_cdf_expression()
A:sympy.stats.drv.(x, z)->symbols('x, z', integer=True, finite=True, cls=Dummy)
A:sympy.stats.drv.inverse_cdf->solve(self.cdf(x) - z, x)
A:sympy.stats.drv.pdf->self.pdf(x)
A:sympy.stats.drv.cdf->Piecewise((cdf, z >= left_bound), (0, True))
A:sympy.stats.drv.expr->expr.xreplace(dict(((rv, rv.symbol) for rv in rvs))).xreplace(dict(((rv, rv.symbol) for rv in rvs)))
sympy.stats.drv.SingleDiscreteDistribution(cls,*args)
sympy.stats.drv.SingleDiscreteDistribution.__new__(cls,*args)
sympy.stats.drv.SingleDiscreteDistribution._inverse_cdf_expression(self)
sympy.stats.drv.SingleDiscreteDistribution.cdf(self,x,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.check(*args)
sympy.stats.drv.SingleDiscreteDistribution.compute_cdf(self,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.expectation(self,expr,var,evaluate=True,**kwargs)
sympy.stats.drv.SingleDiscreteDistribution.sample(self)
sympy.stats.drv.SingleDiscreteDomain(SingleDomain)
sympy.stats.drv.SingleDiscretePSpace(SinglePSpace)
sympy.stats.drv.SingleDiscretePSpace.compute_cdf(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.compute_density(self,expr,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.domain(self)
sympy.stats.drv.SingleDiscretePSpace.integrate(self,expr,rvs=None,**kwargs)
sympy.stats.drv.SingleDiscretePSpace.sample(self)
sympy.stats.drv.SingleDiscretePSpace.set(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/frv_types.py----------------------------------------
A:sympy.stats.frv_types.density->dict(((sympify(k), Rational(binomial(m, k) * binomial(N - m, n - k), binomial(N, n))) for k in range(max(0, n + m - N), min(m, n) + 1)))
A:sympy.stats.frv_types.sides_sym->sympify(sides)
A:sympy.stats.frv_types.sides->as_int(self.sides)
A:sympy.stats.frv_types.x->sympify(x)
A:sympy.stats.frv_types.n_sym->sympify(n)
A:sympy.stats.frv_types.p_sym->sympify(p)
A:sympy.stats.frv_types.n->as_int(n)
A:sympy.stats.frv_types.(N, m, n)->list(map(sympify, (N, m, n)))
sympy.stats.Bernoulli(name,p,succ=1,fail=0)
sympy.stats.BernoulliDistribution(SingleFiniteDistribution)
sympy.stats.BernoulliDistribution.dict(self)
sympy.stats.Binomial(name,n,p,succ=1,fail=0)
sympy.stats.BinomialDistribution(cls,*args)
sympy.stats.BinomialDistribution.dict(self)
sympy.stats.Coin(name,p=S.Half)
sympy.stats.Die(name,sides=6)
sympy.stats.DieDistribution(cls,sides)
sympy.stats.DieDistribution.dict(self)
sympy.stats.DieDistribution.pdf(self,x)
sympy.stats.DieDistribution.set(self)
sympy.stats.DiscreteUniform(name,items)
sympy.stats.DiscreteUniformDistribution(SingleFiniteDistribution)
sympy.stats.DiscreteUniformDistribution.dict(self)
sympy.stats.DiscreteUniformDistribution.p(self)
sympy.stats.DiscreteUniformDistribution.pdf(self,x)
sympy.stats.DiscreteUniformDistribution.set(self)
sympy.stats.FiniteRV(name,density)
sympy.stats.Hypergeometric(name,N,m,n)
sympy.stats.HypergeometricDistribution(SingleFiniteDistribution)
sympy.stats.HypergeometricDistribution.dict(self)
sympy.stats.Rademacher(name)
sympy.stats.RademacherDistribution(SingleFiniteDistribution)
sympy.stats.RademacherDistribution.dict(self)
sympy.stats.frv_types.Bernoulli(name,p,succ=1,fail=0)
sympy.stats.frv_types.BernoulliDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.BernoulliDistribution.dict(self)
sympy.stats.frv_types.Binomial(name,n,p,succ=1,fail=0)
sympy.stats.frv_types.BinomialDistribution(cls,*args)
sympy.stats.frv_types.BinomialDistribution.__new__(cls,*args)
sympy.stats.frv_types.BinomialDistribution.dict(self)
sympy.stats.frv_types.Coin(name,p=S.Half)
sympy.stats.frv_types.Die(name,sides=6)
sympy.stats.frv_types.DieDistribution(cls,sides)
sympy.stats.frv_types.DieDistribution.__new__(cls,sides)
sympy.stats.frv_types.DieDistribution.dict(self)
sympy.stats.frv_types.DieDistribution.pdf(self,x)
sympy.stats.frv_types.DieDistribution.set(self)
sympy.stats.frv_types.DiscreteUniform(name,items)
sympy.stats.frv_types.DiscreteUniformDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.DiscreteUniformDistribution.dict(self)
sympy.stats.frv_types.DiscreteUniformDistribution.p(self)
sympy.stats.frv_types.DiscreteUniformDistribution.pdf(self,x)
sympy.stats.frv_types.DiscreteUniformDistribution.set(self)
sympy.stats.frv_types.FiniteDistributionHandmade(cls,density)
sympy.stats.frv_types.FiniteDistributionHandmade.__new__(cls,density)
sympy.stats.frv_types.FiniteDistributionHandmade.dict(self)
sympy.stats.frv_types.FiniteRV(name,density)
sympy.stats.frv_types.Hypergeometric(name,N,m,n)
sympy.stats.frv_types.HypergeometricDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.HypergeometricDistribution.dict(self)
sympy.stats.frv_types.Rademacher(name)
sympy.stats.frv_types.RademacherDistribution(SingleFiniteDistribution)
sympy.stats.frv_types.RademacherDistribution.dict(self)
sympy.stats.frv_types.rv(name,cls,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/drv_types.py----------------------------------------
A:sympy.stats.drv_types.args->list(map(sympify, args))
A:sympy.stats.drv_types.dist->cls(*args)
sympy.stats.Geometric(name,p)
sympy.stats.GeometricDistribution(SingleDiscreteDistribution)
sympy.stats.GeometricDistribution.check(p)
sympy.stats.GeometricDistribution.pdf(self,k)
sympy.stats.Poisson(name,lamda)
sympy.stats.PoissonDistribution(SingleDiscreteDistribution)
sympy.stats.PoissonDistribution.check(lamda)
sympy.stats.PoissonDistribution.pdf(self,k)
sympy.stats.drv_types.Geometric(name,p)
sympy.stats.drv_types.GeometricDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.GeometricDistribution.check(p)
sympy.stats.drv_types.GeometricDistribution.pdf(self,k)
sympy.stats.drv_types.Poisson(name,lamda)
sympy.stats.drv_types.PoissonDistribution(SingleDiscreteDistribution)
sympy.stats.drv_types.PoissonDistribution.check(lamda)
sympy.stats.drv_types.PoissonDistribution.pdf(self,k)
sympy.stats.drv_types.rv(symbol,cls,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/test_rv.py----------------------------------------
A:sympy.stats.tests.test_rv.Z->Normal('Z', 0, 1)
A:sympy.stats.tests.test_rv.XX->Normal('x', 0, 2)
A:sympy.stats.tests.test_rv.X->Die('X', 6)
A:sympy.stats.tests.test_rv.Y->Normal('Y', 0, 1)
A:sympy.stats.tests.test_rv.YY->Normal('y', 0, 3)
A:sympy.stats.tests.test_rv.z->Symbol('z')
A:sympy.stats.tests.test_rv.A->given(X, True)
A:sympy.stats.tests.test_rv.B->given(X, Y > 2)
A:sympy.stats.tests.test_rv.(XX, YY)->given(Tuple(X, Y), X + Y > 5)
A:sympy.stats.tests.test_rv.(x, z)->symbols('x, z', real=True, finite=True)
A:sympy.stats.tests.test_rv.dens->density(X - Y, Eq(X + Y, z))
A:sympy.stats.tests.test_rv.d->Density(X)
A:sympy.stats.tests.test_rv.a->Foo(1, 2)
A:sympy.stats.tests.test_rv.x->Normal('x', 0, 1)
sympy.stats.tests.test_rv.test_Density()
sympy.stats.tests.test_rv.test_E()
sympy.stats.tests.test_rv.test_NamedArgsMixin()
sympy.stats.tests.test_rv.test_ProductPSpace()
sympy.stats.tests.test_rv.test_RandomSymbol()
sympy.stats.tests.test_rv.test_RandomSymbol_diff()
sympy.stats.tests.test_rv.test_Sample()
sympy.stats.tests.test_rv.test_density_constant()
sympy.stats.tests.test_rv.test_dependence()
sympy.stats.tests.test_rv.test_dependent_finite()
sympy.stats.tests.test_rv.test_given()
sympy.stats.tests.test_rv.test_normality()
sympy.stats.tests.test_rv.test_overlap()
sympy.stats.tests.test_rv.test_pspace()
sympy.stats.tests.test_rv.test_random_symbols()
sympy.stats.tests.test_rv.test_real()
sympy.stats.tests.test_rv.test_rs_swap()
sympy.stats.tests.test_rv.test_where()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/test_finite_rv.py----------------------------------------
A:sympy.stats.tests.test_finite_rv.(a, b, c)->symbols('a b c')
A:sympy.stats.tests.test_finite_rv.X->Rademacher('X')
A:sympy.stats.tests.test_finite_rv.Y->Binomial('Y', n, p, succ=H, fail=T)
A:sympy.stats.tests.test_finite_rv.(a, b)->symbols('a b')
A:sympy.stats.tests.test_finite_rv.d->density(x)
A:sympy.stats.tests.test_finite_rv.Z->Die('x', 4)
A:sympy.stats.tests.test_finite_rv.k->Symbol('k')
A:sympy.stats.tests.test_finite_rv.sym_die->Die('X', k)
A:sympy.stats.tests.test_finite_rv.(p, a, b)->symbols('p a b')
A:sympy.stats.tests.test_finite_rv.D->Die('D', 6)
A:sympy.stats.tests.test_finite_rv.(H, T)->symbols('H T')
A:sympy.stats.tests.test_finite_rv.F->FiniteRV('F', {1: S.Half, 2: S.One / 4, 3: S.One / 4})
A:sympy.stats.tests.test_finite_rv.nvals->range(5)
A:sympy.stats.tests.test_finite_rv.p->symbols('p', positive=True)
A:sympy.stats.tests.test_finite_rv.(N, m, n)->map(sympify, (N, m, n))
A:sympy.stats.tests.test_finite_rv.x->Bernoulli('x', p)
sympy.stats.tests.test_finite_rv.BayesTest(A,B)
sympy.stats.tests.test_finite_rv.test_FiniteRV()
sympy.stats.tests.test_finite_rv.test_bernoulli()
sympy.stats.tests.test_finite_rv.test_binomial_numeric()
sympy.stats.tests.test_finite_rv.test_binomial_symbolic()
sympy.stats.tests.test_finite_rv.test_binomial_verify_parameters()
sympy.stats.tests.test_finite_rv.test_cdf()
sympy.stats.tests.test_finite_rv.test_coins()
sympy.stats.tests.test_finite_rv.test_density_call()
sympy.stats.tests.test_finite_rv.test_dice()
sympy.stats.tests.test_finite_rv.test_dice_bayes()
sympy.stats.tests.test_finite_rv.test_die_args()
sympy.stats.tests.test_finite_rv.test_discreteuniform()
sympy.stats.tests.test_finite_rv.test_domains()
sympy.stats.tests.test_finite_rv.test_given()
sympy.stats.tests.test_finite_rv.test_hypergeometric_numeric()
sympy.stats.tests.test_finite_rv.test_rademacher()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/test_mix.py----------------------------------------
A:sympy.stats.tests.test_mix.x->Symbol('x')
A:sympy.stats.tests.test_mix.l->Symbol('l', positive=True)
A:sympy.stats.tests.test_mix.rate->Beta(l, 2, 3)
A:sympy.stats.tests.test_mix.X->Poisson(x, rate)
sympy.stats.tests.test_mix.test_density()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/test_discrete_rv.py----------------------------------------
A:sympy.stats.tests.test_discrete_rv.p->PoissonDistribution(l)
A:sympy.stats.tests.test_discrete_rv.x->Poisson('x', l)
A:sympy.stats.tests.test_discrete_rv.d->GeometricDistribution(p)
sympy.stats.tests.test_discrete_rv.test_GeometricDistribution()
sympy.stats.tests.test_discrete_rv.test_Poisson()
sympy.stats.tests.test_discrete_rv.test_PoissonDistribution()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/stats/tests/test_continuous_rv.py----------------------------------------
A:sympy.stats.tests.test_continuous_rv.(x, y, z)->map(Symbol, 'xyz')
A:sympy.stats.tests.test_continuous_rv.mu->Normal('mu', 2, 3)
A:sympy.stats.tests.test_continuous_rv.sigma->Symbol('sigma', positive=True)
A:sympy.stats.tests.test_continuous_rv.X->Normal('X', 0, 1)
A:sympy.stats.tests.test_continuous_rv.pdf->density(Y)
A:sympy.stats.tests.test_continuous_rv.x->Normal('x', 0, 1)
A:sympy.stats.tests.test_continuous_rv.Y->Normal('Y', 0, 2)
A:sympy.stats.tests.test_continuous_rv.(mu1, mu2)->symbols('mu1 mu2', real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.(s1, s2)->symbols('sigma1 sigma2', real=True, finite=True, positive=True)
A:sympy.stats.tests.test_continuous_rv.rate->Symbol('lambda', positive=True, real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.Z->ContinuousRV(z, exp(-z), set=Interval(0, oo))
A:sympy.stats.tests.test_continuous_rv.(a, b, c)->symbols('a b c', real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.d->cdf(Y)
A:sympy.stats.tests.test_continuous_rv.f->cdf(Z)
A:sympy.stats.tests.test_continuous_rv.z->Symbol('z')
A:sympy.stats.tests.test_continuous_rv.a->Symbol('a', real=True)
A:sympy.stats.tests.test_continuous_rv.b->Symbol('b', real=True)
A:sympy.stats.tests.test_continuous_rv.alpha->Symbol('alpha', positive=True)
A:sympy.stats.tests.test_continuous_rv.(a, b)->symbols('a b')
A:sympy.stats.tests.test_continuous_rv.B->Beta('B', 2, 5)
A:sympy.stats.tests.test_continuous_rv.dens->density(X)
A:sympy.stats.tests.test_continuous_rv.betap->Symbol('beta', positive=True)
A:sympy.stats.tests.test_continuous_rv.x0->Symbol('x0')
A:sympy.stats.tests.test_continuous_rv.gamma->Symbol('gamma', positive=True)
A:sympy.stats.tests.test_continuous_rv.k->Symbol('k', positive=True)
A:sympy.stats.tests.test_continuous_rv.l->Symbol('l', real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.p->Symbol('p', positive=True)
A:sympy.stats.tests.test_continuous_rv.d1->Symbol('d1', positive=True)
A:sympy.stats.tests.test_continuous_rv.d2->Symbol('d2', positive=True)
A:sympy.stats.tests.test_continuous_rv.s->Symbol('s', positive=True)
A:sympy.stats.tests.test_continuous_rv.m->Symbol('m', real=True)
A:sympy.stats.tests.test_continuous_rv.theta->Symbol('theta', positive=True)
A:sympy.stats.tests.test_continuous_rv.(k, theta)->symbols('k theta', real=True, finite=True, positive=True)
A:sympy.stats.tests.test_continuous_rv.mean->Symbol('mu', real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.std->Symbol('sigma', positive=True, real=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.omega->Symbol('omega', positive=True)
A:sympy.stats.tests.test_continuous_rv.(xm, beta)->symbols('xm beta', positive=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.nu->Symbol('nu', positive=True)
A:sympy.stats.tests.test_continuous_rv.c->Symbol('c')
A:sympy.stats.tests.test_continuous_rv.w->Symbol('w', positive=True, finite=True)
A:sympy.stats.tests.test_continuous_rv.n->Symbol('n', integer=True)
A:sympy.stats.tests.test_continuous_rv._k->Symbol('k')
A:sympy.stats.tests.test_continuous_rv.R->Symbol('R', positive=True)
A:sympy.stats.tests.test_continuous_rv.N->Normal('X', 0, 1)
A:sympy.stats.tests.test_continuous_rv.L->LogNormal('L', 0, 1)
A:sympy.stats.tests.test_continuous_rv.E->Exponential('Ex', 1)
A:sympy.stats.tests.test_continuous_rv.P->Pareto('P', 1, 3)
A:sympy.stats.tests.test_continuous_rv.W->Weibull('W', 1, 1)
A:sympy.stats.tests.test_continuous_rv.U->Uniform('U', 0, 1)
A:sympy.stats.tests.test_continuous_rv.G->Gamma('G', 1, 3)
A:sympy.stats.tests.test_continuous_rv.(p, q)->symbols('p q', positive=True)
A:sympy.stats.tests.test_continuous_rv.T->Normal('T', 30, 3)
A:sympy.stats.tests.test_continuous_rv.nd->NormalDistribution(0, 1)
A:sympy.stats.tests.test_continuous_rv.meas->Normal('T', mu, 1)
sympy.stats.tests.test_continuous_rv.test_ContinuousDomain()
sympy.stats.tests.test_continuous_rv.test_ContinuousRV()
sympy.stats.tests.test_continuous_rv.test_NormalDistribution()
sympy.stats.tests.test_continuous_rv.test_arcsin()
sympy.stats.tests.test_continuous_rv.test_benini()
sympy.stats.tests.test_continuous_rv.test_beta()
sympy.stats.tests.test_continuous_rv.test_betaprime()
sympy.stats.tests.test_continuous_rv.test_cauchy()
sympy.stats.tests.test_continuous_rv.test_cdf()
sympy.stats.tests.test_continuous_rv.test_chi()
sympy.stats.tests.test_continuous_rv.test_chi_noncentral()
sympy.stats.tests.test_continuous_rv.test_chi_squared()
sympy.stats.tests.test_continuous_rv.test_conditional_1d()
sympy.stats.tests.test_continuous_rv.test_conjugate_priors()
sympy.stats.tests.test_continuous_rv.test_dagum()
sympy.stats.tests.test_continuous_rv.test_density_unevaluated()
sympy.stats.tests.test_continuous_rv.test_difficult_univariate()
sympy.stats.tests.test_continuous_rv.test_erlang()
sympy.stats.tests.test_continuous_rv.test_exponential()
sympy.stats.tests.test_continuous_rv.test_f_distribution()
sympy.stats.tests.test_continuous_rv.test_fisher_z()
sympy.stats.tests.test_continuous_rv.test_frechet()
sympy.stats.tests.test_continuous_rv.test_gamma()
sympy.stats.tests.test_continuous_rv.test_gamma_inverse()
sympy.stats.tests.test_continuous_rv.test_input_value_assertions()
sympy.stats.tests.test_continuous_rv.test_kumaraswamy()
sympy.stats.tests.test_continuous_rv.test_laplace()
sympy.stats.tests.test_continuous_rv.test_logistic()
sympy.stats.tests.test_continuous_rv.test_lognormal()
sympy.stats.tests.test_continuous_rv.test_maxwell()
sympy.stats.tests.test_continuous_rv.test_multiple_normal()
sympy.stats.tests.test_continuous_rv.test_nakagami()
sympy.stats.tests.test_continuous_rv.test_pareto()
sympy.stats.tests.test_continuous_rv.test_pareto_numeric()
sympy.stats.tests.test_continuous_rv.test_prefab_sampling()
sympy.stats.tests.test_continuous_rv.test_probability_unevaluated()
sympy.stats.tests.test_continuous_rv.test_quadratic_u()
sympy.stats.tests.test_continuous_rv.test_raised_cosine()
sympy.stats.tests.test_continuous_rv.test_random_parameters()
sympy.stats.tests.test_continuous_rv.test_random_parameters_given()
sympy.stats.tests.test_continuous_rv.test_rayleigh()
sympy.stats.tests.test_continuous_rv.test_sample()
sympy.stats.tests.test_continuous_rv.test_single_normal()
sympy.stats.tests.test_continuous_rv.test_studentt()
sympy.stats.tests.test_continuous_rv.test_symbolic()
sympy.stats.tests.test_continuous_rv.test_triangular()
sympy.stats.tests.test_continuous_rv.test_unevaluated()
sympy.stats.tests.test_continuous_rv.test_uniform()
sympy.stats.tests.test_continuous_rv.test_uniform_P()
sympy.stats.tests.test_continuous_rv.test_uniformsum()
sympy.stats.tests.test_continuous_rv.test_von_mises()
sympy.stats.tests.test_continuous_rv.test_weibull()
sympy.stats.tests.test_continuous_rv.test_weibull_numeric()
sympy.stats.tests.test_continuous_rv.test_wignersemicircle()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/printing.py----------------------------------------
A:sympy.galgebra.printing.InvColorCode->dict(zip(ColorCode.values(), ColorCode.keys()))
A:sympy.galgebra.printing.paths->path.split(os.pathsep)
A:sympy.galgebra.printing.(base, ext)->os.path.splitext(executable)
A:sympy.galgebra.printing.pathext->os.environ['PATHEXT'].lower().split(os.pathsep)
A:sympy.galgebra.printing.f->os.path.join(p, execname)
A:sympy.galgebra.printing.new_s->new_s.replace(enhance_print.normal, '').replace(enhance_print.normal, '')
A:sympy.galgebra.printing.diff_args->list(map(self._print, expr.args))
A:sympy.galgebra.printing.ostr->expr.get_latex_normal_order_str()
A:sympy.galgebra.printing.sys.stdout->StringIO()
A:sympy.galgebra.printing.base->self._print(expr.base)
A:sympy.galgebra.printing.tex->self._print(S.NegativeOne * expr).strip()
A:sympy.galgebra.printing.(name, supers, subs)->split_super_sub(name_str)
A:sympy.galgebra.printing.greek->set(['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega'])
A:sympy.galgebra.printing.other->set(['aleph', 'beth', 'daleth', 'gimel', 'ell', 'eth', 'hbar', 'hslash', 'mho'])
A:sympy.galgebra.printing.tmp->s.lower()
A:sympy.galgebra.printing.name->latex(Symbol(func))
A:sympy.galgebra.printing.supers->list(map(translate, supers))
A:sympy.galgebra.printing.subs->list(map(translate, subs))
A:sympy.galgebra.printing.name_lst->name_str.split('.')
A:sympy.galgebra.printing.dim->len(expr.variables)
A:sympy.galgebra.printing.imax->max(imax, i)
A:sympy.galgebra.printing.latex_str->latex_str.replace('\n\n', '\n').replace('\n\n', '\n')
A:sympy.galgebra.printing.latex_lst->latex_str.replace('\n\n', '\n').replace('\n\n', '\n').split('\n')
A:sympy.galgebra.printing.latex_line->latex_line.strip().strip()
A:sympy.galgebra.printing.lhs->lhs.replace('>', '\\lfloor ').replace('>', '\\lfloor ')
A:sympy.galgebra.printing.latex_linelatex_line->latex_line.strip().strip().replace(lhs, '')
A:sympy.galgebra.printing.rootfilename->pyfilename.replace('.py', '')
A:sympy.galgebra.printing.latex_file->open(filename, 'w')
A:sympy.galgebra.printing.pdflatex->find_executable('pdflatex')
A:sympy.galgebra.printing.prog_file->open(sys.argv[0], 'r')
A:sympy.galgebra.printing.prog_str->open(sys.argv[0], 'r').read()
A:sympy.galgebra.printing.fct_name->fct_name.replace('_', ' ').replace('_', ' ')
A:sympy.galgebra.printing.ifct->open(sys.argv[0], 'r').read().find('def ' + fct_name)
A:sympy.galgebra.printing.iend->open(sys.argv[0], 'r').read().find('def ', ifct + 4)
sympy.galgebra.Get_Program(off=False)
sympy.galgebra.Print_Function()
sympy.galgebra.enhance_print(self,base=None,fct=None,deriv=None,on=True,keys=False)
sympy.galgebra.enhance_print.enhance_base(s)
sympy.galgebra.enhance_print.enhance_deriv(s)
sympy.galgebra.enhance_print.enhance_fct(s)
sympy.galgebra.enhance_print.strip_base(s)
sympy.galgebra.latex(expr,**settings)
sympy.galgebra.printing.GA_LatexPrinter(LatexPrinter)
sympy.galgebra.printing.GA_LatexPrinter._print_Derivative(self,expr)
sympy.galgebra.printing.GA_LatexPrinter._print_Function(self,expr,exp=None)
sympy.galgebra.printing.GA_LatexPrinter._print_MV(self,expr)
sympy.galgebra.printing.GA_LatexPrinter._print_Matrix(self,expr)
sympy.galgebra.printing.GA_LatexPrinter._print_Pow(self,expr)
sympy.galgebra.printing.GA_LatexPrinter._print_Symbol(self,expr)
sympy.galgebra.printing.GA_LatexPrinter.redirect(ipy=False)
sympy.galgebra.printing.GA_LatexPrinter.restore()
sympy.galgebra.printing.GA_Printer(StrPrinter)
sympy.galgebra.printing.GA_Printer.__enter__(self)
sympy.galgebra.printing.GA_Printer.__exit__(self,type,value,traceback)
sympy.galgebra.printing.GA_Printer._off()
sympy.galgebra.printing.GA_Printer._on()
sympy.galgebra.printing.GA_Printer._print_Derivative(self,expr)
sympy.galgebra.printing.GA_Printer._print_Function(self,expr)
sympy.galgebra.printing.GA_Printer._print_MV(self,expr)
sympy.galgebra.printing.GA_Printer._print_Vector(self,expr)
sympy.galgebra.printing.GA_Printer.off()
sympy.galgebra.printing.GA_Printer.on()
sympy.galgebra.printing.Get_Program(off=False)
sympy.galgebra.printing.Print_Function()
sympy.galgebra.printing.enhance_print(self,base=None,fct=None,deriv=None,on=True,keys=False)
sympy.galgebra.printing.enhance_print.__init__(self,base=None,fct=None,deriv=None,on=True,keys=False)
sympy.galgebra.printing.enhance_print.enhance_base(s)
sympy.galgebra.printing.enhance_print.enhance_deriv(s)
sympy.galgebra.printing.enhance_print.enhance_fct(s)
sympy.galgebra.printing.enhance_print.strip_base(s)
sympy.galgebra.printing.find_executable(executable,path=None)
sympy.galgebra.printing.latex(expr,**settings)
sympy.galgebra.printing.print_latex(expr,**settings)
sympy.galgebra.printing.xdvi(filename=None,debug=False,paper=(14,11))
sympy.galgebra.xdvi(filename=None,debug=False,paper=(14,11))


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/ncutil.py----------------------------------------
A:sympy.galgebra.ncutil.ONE_NC->Symbol('ONE', commutative=False)
A:sympy.galgebra.ncutil.(coefs, bases)->F.args_cnc()
A:sympy.galgebra.ncutil.(s, c)->symbols('s c')
A:sympy.galgebra.ncutil.new_expr->trigsimp(simplify(new_expr.subs(sub_dict)), recursive=True)
A:sympy.galgebra.ncutil.expr->expand(expr)
A:sympy.galgebra.ncutil.coefs->tuple(coefs)
A:sympy.galgebra.ncutil.term->arg.args_cnc()
A:sympy.galgebra.ncutil.coef->Mul(*coefs)
A:sympy.galgebra.ncutil.ibase->list(bases).index(base)
A:sympy.galgebra.ncutil.bases->tuple(bases)
A:sympy.galgebra.ncutil.tmp->bilinear_term(term, fct)
A:sympy.galgebra.ncutil.x(coefs, bases)->expand(expr).args_cnc()
A:sympy.galgebra.ncutil.dcoef->diff(coef, x)
A:sympy.galgebra.ncutil.Mlst->M.tolist()
A:sympy.galgebra.ncutil.nrows->len(Mlst)
A:sympy.galgebra.ncutil.ncols->len(Mlst[0])
A:sympy.galgebra.ncutil.Mlst[irow][icol]->float(Mlst[irow][icol])
sympy.galgebra.ncutil.bilinear_function(expr,fct)
sympy.galgebra.ncutil.bilinear_product(expr,fct)
sympy.galgebra.ncutil.coef_function(expr,fct)
sympy.galgebra.ncutil.get_commutative_coef(expr)
sympy.galgebra.ncutil.half_angle_reduce(expr,theta)
sympy.galgebra.ncutil.linear_derivation(expr,fct,x)
sympy.galgebra.ncutil.linear_expand(expr)
sympy.galgebra.ncutil.linear_function(expr,fct)
sympy.galgebra.ncutil.linear_projection(expr,plist=None)
sympy.galgebra.ncutil.multilinear_derivation(F,fct,x)
sympy.galgebra.ncutil.multilinear_function(expr,fct)
sympy.galgebra.ncutil.multilinear_product(expr,fct)
sympy.galgebra.ncutil.nc_substitue(expr,sub_dict)
sympy.galgebra.ncutil.non_scalar_projection(expr)
sympy.galgebra.ncutil.numpy_matrix(M)
sympy.galgebra.ncutil.product_derivation(F,fct,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/precedence.py----------------------------------------
A:sympy.galgebra.precedence.op_cntrct->re.compile('(([A-Za-z0-9\\_\\#]+)(\\||<|>)([A-Za-z0-9\\_\\#]+))')
A:sympy.galgebra.precedence.op_wedge->re.compile('(([A-Za-z0-9\\_\\#]+)[\\^]{1}([A-Za-z0-9\\_\\#]+)([\\^]{1}([A-Za-z0-9\\_\\#]+))*)')
A:sympy.galgebra.precedence.ops_search->re.compile('(\\^|\\||<|>)+')
A:sympy.galgebra.precedence.op_lst->op_ord.split(',')
A:sympy.galgebra.precedence.op_dict[op]->re.compile(OPS[op])
A:sympy.galgebra.precedence.max_level->max(max_level, level)
A:sympy.galgebra.precedence.replace_text->group_down[-1].replace(group[-3], group[-2])
A:sympy.galgebra.precedence.line->unparse_paren(level_lst)
A:sympy.galgebra.precedence.string->add_paren(string, op_dict[op])
A:sympy.galgebra.precedence.line_levels->parse_paren(line)
A:sympy.galgebra.precedence.group[-1]->re.sub(re_exprs, sub_paren, group[-1])
A:sympy.galgebra.precedence.level_lst->parse_paren(line)
A:sympy.galgebra.precedence.seval->parse_line(s)
sympy.galgebra.GAeval(s,pstr=False)
sympy.galgebra.define_precedence(gd,op_ord='<>|,^,*')
sympy.galgebra.precedence.GAeval(s,pstr=False)
sympy.galgebra.precedence.add_paren(line,re_exprs)
sympy.galgebra.precedence.contains_interval(interval1,interval2)
sympy.galgebra.precedence.define_precedence(gd,op_ord='<>|,^,*')
sympy.galgebra.precedence.parse_line(line)
sympy.galgebra.precedence.parse_paren(line)
sympy.galgebra.precedence.sub_paren(s)
sympy.galgebra.precedence.unparse_paren(level_lst)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/debug.py----------------------------------------
A:sympy.galgebra.debug.tmp_obj->list(obj)
A:sympy.galgebra.debug.titles->list(islice(args, None, None, 2))
A:sympy.galgebra.debug.objs->tuple(islice(args, 1, None, 2))
A:sympy.galgebra.debug.n->len(titles[0])
sympy.galgebra.debug.oprint(*args,**kwargs)
sympy.galgebra.debug.ostr(obj,dict_mode=False)
sympy.galgebra.debug.print_product_table(title,keys,pdict,op='*',blade_rep=True)
sympy.galgebra.debug.print_sub_table(title,keys,sdict,blade_rep=True)
sympy.galgebra.oprint(*args,**kwargs)
sympy.galgebra.ostr(obj,dict_mode=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/vector.py----------------------------------------
A:sympy.galgebra.vector.base_name_lst->base.split(' ')
A:sympy.galgebra.vector.base_lst->base.split('*')
A:sympy.galgebra.vector.Vector.subscripts->base_lst[1].split('|')
A:sympy.galgebra.vector.tmp->base_name.split('_')
A:sympy.galgebra.vector.basis_vec->Vector(base_name)
A:sympy.galgebra.vector.Vector.basis->tuple(basis)
A:sympy.galgebra.vector.Vector.metric->Matrix(tmp_metric)
A:sympy.galgebra.vector.metric_str_lst->flatten(str_array(metric))
A:sympy.galgebra.vector.Vector.metric[index]->S(metric_str_lst[index])
A:sympy.galgebra.vector.N->range(len(Vector.basis))
A:sympy.galgebra.vector.tau->expand(tau)
A:sympy.galgebra.vector.Vtau->Vector()
A:sympy.galgebra.vector.metric->metric.applyfunc(TrigSimp).applyfunc(TrigSimp)
A:sympy.galgebra.vector.dtau->expand(tau).diff(x).applyfunc(TrigSimp)
A:sympy.galgebra.vector.t_dtau->TrigSimp(t * dtau)
A:sympy.galgebra.vector.self.obj->Symbol(basis_str, commutative=False)
A:sympy.galgebra.vector.Dself->Vector()
A:sympy.galgebra.vector.Dself.obj->diff(self.obj, x)
A:sympy.galgebra.vector.i1->list(Vector.basis).index(v1)
A:sympy.galgebra.vector.i2->list(Vector.basis).index(v2)
A:sympy.galgebra.vector.self_x_v->Vector()
A:sympy.galgebra.vector.result->bilinear_product(result, Vector.dot)
A:sympy.galgebra.vector.s_x_self->Vector()
A:sympy.galgebra.vector.self_p_v->Vector()
A:sympy.galgebra.vector.self_m_v->Vector()
A:sympy.galgebra.vector.n_self->copy.deepcopy(self)
A:sympy.galgebra.vector.fct_self->Vector()
A:sympy.galgebra.vector.fct_self.obj->fct(self.obj)
sympy.galgebra.vector.TrigSimp(x)
sympy.galgebra.vector.Vector(self,basis_str=None)
sympy.galgebra.vector.Vector.Diff(b,x)
sympy.galgebra.vector.Vector.__add__(self,v)
sympy.galgebra.vector.Vector.__add_ab__(self,v)
sympy.galgebra.vector.Vector.__init__(self,basis_str=None)
sympy.galgebra.vector.Vector.__mul__(self,v)
sympy.galgebra.vector.Vector.__neg__(self)
sympy.galgebra.vector.Vector.__pos__(self)
sympy.galgebra.vector.Vector.__rmul__(self,s)
sympy.galgebra.vector.Vector.__str__(self)
sympy.galgebra.vector.Vector.__sub__(self,v)
sympy.galgebra.vector.Vector.__sub_ab__(self,v)
sympy.galgebra.vector.Vector.applyfunc(self,fct)
sympy.galgebra.vector.Vector.basic_dot(v1,v2)
sympy.galgebra.vector.Vector.diff(self,x)
sympy.galgebra.vector.Vector.dot(b1,b2)
sympy.galgebra.vector.Vector.setup(base,n=None,metric=None,coords=None,curv=(None,None),debug=False)
sympy.galgebra.vector.flatten(lst)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/ga.py----------------------------------------
A:sympy.galgebra.ga.str1->','.join(n * [n * '# ' + '0 0'])
A:sympy.galgebra.ga.blade_index->list(MV.blade_to_index[blade1] + MV.blade_to_index[blade2])
A:sympy.galgebra.ga.result->MV()
A:sympy.galgebra.ga.index->list(i1 + i2)
A:sympy.galgebra.ga.grade1->len(index1)
A:sympy.galgebra.ga.grade2->len(index2)
A:sympy.galgebra.ga.grade->abs(grade1 - grade2)
A:sympy.galgebra.ga.n->int(base_lst[1])
A:sympy.galgebra.ga.base_lst->latex(simplify(base[0])).split(sep)
A:sympy.galgebra.ga.fct_lst->fct_sym_array(base_lst, None)
A:sympy.galgebra.ga.self.obj->simplify(self.obj)
A:sympy.galgebra.ga.self->MVtypes[mvtype](self, base)
A:sympy.galgebra.ga.(coefs, bases)->linear_expand(self.obj)
A:sympy.galgebra.ga.icoef->bases.index(base.obj)
A:sympy.galgebra.ga.fself->MV(self)
A:sympy.galgebra.ga.mv->MV()
A:sympy.galgebra.ga.nself->MV(self)
A:sympy.galgebra.ga.self_add_b->MV(self)
A:sympy.galgebra.ga.b_add_self->MV(self)
A:sympy.galgebra.ga.selfb->MV(self)
A:sympy.galgebra.ga.self_sub_b->MV(self)
A:sympy.galgebra.ga.b_sub_self->MV(self)
A:sympy.galgebra.ga.obj->expand(mv1.obj - mv2.obj)
A:sympy.galgebra.ga.self_mul_b->MV(self)
A:sympy.galgebra.ga.b_mul_self->MV(self)
A:sympy.galgebra.ga.self_div_b->MV(self)
A:sympy.galgebra.ga.b_dot_self->MV()
A:sympy.galgebra.ga.b_W_self->MV(self)
A:sympy.galgebra.ga.(coefs, blades)->linear_expand(self.obj)
A:sympy.galgebra.ga.bases_lst->list(bases)
A:sympy.galgebra.ga.self_igrade->MV(result)
A:sympy.galgebra.ga.terms->sorted(terms, key=lambda x: MV.bases_flat1_lst.index(x[1]))
A:sympy.galgebra.ga.s->str(term[1])
A:sympy.galgebra.ga.tmp->MV()
A:sympy.galgebra.ga.coef_str->latex(simplify(base[0]))
A:sympy.galgebra.ga.base_str->latex(simplify(base[0]))
A:sympy.galgebra.ga.ngrades->len(grade_strs)
A:sympy.galgebra.ga.dderiv->MV()
A:sympy.galgebra.ga.dself->MV(self)
A:sympy.galgebra.ga.dself.obj->diff(self.obj, var)
A:sympy.galgebra.ga.coef->trigsimp(coef, **kwargs)
A:sympy.galgebra.ga.sself->MV(self)
A:sympy.galgebra.ga.ts_self->MV(self)
A:sympy.galgebra.ga.self_sq->(self * self).scalar()
A:sympy.galgebra.ga.norm->sqrt(abs(norm_sq))
A:sympy.galgebra.ga.xself->MV(self)
A:sympy.galgebra.ga.xself.obj->expand(self.obj)
A:sympy.galgebra.ga.fself.obj->factor_terms(self.obj)
A:sympy.galgebra.ga.xsubs->MVtypes[mvtype](self, base).obj.subs(x)
A:sympy.galgebra.ga.norm_sq->norm_sq.scalar().scalar()
A:sympy.galgebra.ga.self_rev->MVtypes[mvtype](self, base).rev()
A:sympy.galgebra.ga.self_rev.obj->simplify(self_rev.obj)
A:sympy.galgebra.ga.norm.obj->expand(norm.obj)
A:sympy.galgebra.ga.nblst->len(blst)
A:sympy.galgebra.ga.i->new_blst_expand.index(expand)
A:sympy.galgebra.ga.(coefs, indexes)->MV.reduce_basis(index)
A:sympy.galgebra.ga.obj12->bilinear_product(obj1 * obj2, mul_table)
A:sympy.galgebra.ga.i1_plus_i2->list(i1 + i2)
A:sympy.galgebra.ga.(sgn, i1_W_i2)->MV.blade_reduce(i1_plus_i2)
A:sympy.galgebra.ga.mv1_grades->mv1.get_grades()
A:sympy.galgebra.ga.mv2_grades->mv2.get_grades()
A:sympy.galgebra.ga.mv1mv2_grades->MV(mv1mv2).get_grades()
A:sympy.galgebra.ga.mv1mv2->MV(mv1)
A:sympy.galgebra.ga.indexes->tuple(range(dim))
A:sympy.galgebra.ga.MV.index->tuple(MV.index)
A:sympy.galgebra.ga.(base_sym, base_str, blade_sym, blade_str)->MV.make_base_blade_symbol(ibase)
A:sympy.galgebra.ga.MV.bases->tuple(MV.bases)
A:sympy.galgebra.ga.MV.bases_flat->tuple(MV.bases_flat)
A:sympy.galgebra.ga.MV.bases_set->set(MV.bases_flat[MV.dim:])
A:sympy.galgebra.ga.MV.bases_flat1_lst->list(MV.bases_flat1)
A:sympy.galgebra.ga.MV.blades->tuple(MV.blades)
A:sympy.galgebra.ga.MV.blades_flat->tuple(MV.blades_flat)
A:sympy.galgebra.ga.MV.blades_set->set(MV.blades_flat[MV.dim:])
A:sympy.galgebra.ga.MV.blades_flat1_lst->list(MV.blades_flat1)
A:sympy.galgebra.ga.b1b2->MV.symbol_product_bases(ib1, ib2)
A:sympy.galgebra.ga.MV.base_mul_table[key]->simplify(b1b2)
A:sympy.galgebra.ga.MV.blade_expand[MV.index_to_blade[ibase]]->simplify(expand(result / S(2)))
A:sympy.galgebra.ga.tmp_dict[base]->simplify(expand(-tmp))
A:sympy.galgebra.ga.test->MV.base_expand[key].subs(MV.blade_expand)
A:sympy.galgebra.ga.MV.I->MV(MV.blades_flat[-1])
A:sympy.galgebra.ga.MV.rcpr_norm->get_commutative_coef(simplify((MV.I * MV.I).obj))
A:sympy.galgebra.ga.duals->copy.copy(MFbasis[-2])
A:sympy.galgebra.ga.MV.grad->MV()
A:sympy.galgebra.ga.MV.grad.rcpr_bases_MV->tuple(rcpr_bases_MV)
A:sympy.galgebra.ga.MV.tangent_derivatives_MV[key]->MV(Vector.dtau_dict[key])
A:sympy.galgebra.ga.right_result->MV()
A:sympy.galgebra.ga.left_result->MV()
A:sympy.galgebra.ga.left_result.obj->expand(left_result.obj)
A:sympy.galgebra.ga.right_result.obj->expand(right_result.obj)
A:sympy.galgebra.ga.N->int(base_lst[1]).dual()
A:sympy.galgebra.ga.MV.basis_vectors->sympy.galgebra.vector.Vector.setup(basis, metric=metric, coords=coords, curv=curv, debug=debug)
A:sympy.galgebra.ga.MV.dim->len(MV.basis_vectors)
A:sympy.galgebra.ga.MV.blades_MV->tuple(MV.blades_MV)
A:sympy.galgebra.ga.MV.Isq->simplify((MV.I * MV.I).scalar())
A:sympy.galgebra.ga.sf->MV(f, 'scalar')
A:sympy.galgebra.ga.Px->MV(x)
A:sympy.galgebra.ga.Px.obj->Nsympy(x.obj, prec)
A:sympy.galgebra.ga.theta->itheta.norm()
A:sympy.galgebra.ga.j->B.is_blade()
A:sympy.galgebra.ga.k->A.is_blade()
A:sympy.galgebra.ga.dim->len(basis)
A:sympy.galgebra.ga.blade->blade.trigsimp(deep=True, recursive=True).trigsimp(deep=True, recursive=True)
A:sympy.galgebra.ga.E_sq->trigsimp((E * E).scalar(), deep=True, recursive=True)
A:sympy.galgebra.ga.recpv->(sgn * dual * E).trigsimp(deep=True, recursive=True)
sympy.galgebra.Com(A,B)
sympy.galgebra.DD(v,f)
sympy.galgebra.Format(Fmode=True,Dmode=True,ipy=False)
sympy.galgebra.MV(self,base=None,mvtype=None,fct=False,blade_rep=False)
sympy.galgebra.MV.Fmt(self,fmt=1,title=None)
sympy.galgebra.MV.__add__(self,b)
sympy.galgebra.MV.__add_ab__(self,b)
sympy.galgebra.MV.__div__(self,b)
sympy.galgebra.MV.__eq__(self,mv)
sympy.galgebra.MV.__gt__(self,b)
sympy.galgebra.MV.__lt__(self,b)
sympy.galgebra.MV.__mul__(self,b)
sympy.galgebra.MV.__mul_ab__(self,b)
sympy.galgebra.MV.__neg__(self)
sympy.galgebra.MV.__or__(self,b)
sympy.galgebra.MV.__pos__(self)
sympy.galgebra.MV.__radd__(self,b)
sympy.galgebra.MV.__rmul__(self,b)
sympy.galgebra.MV.__ror__(self,b)
sympy.galgebra.MV.__rsub__(self,b)
sympy.galgebra.MV.__rxor__(self,b)
sympy.galgebra.MV.__str__(self)
sympy.galgebra.MV.__sub__(self,b)
sympy.galgebra.MV.__sub_ab__(self,b)
sympy.galgebra.MV.__xor__(self,b)
sympy.galgebra.MV.base_to_blade(self)
sympy.galgebra.MV.basic_add(mv1,mv2)
sympy.galgebra.MV.basic_geometric_product(obj1,obj2)
sympy.galgebra.MV.basic_sub(mv1,mv2)
sympy.galgebra.MV.blade_reduce(lst)
sympy.galgebra.MV.blade_to_base(self)
sympy.galgebra.MV.build_base_blade_arrays(debug)
sympy.galgebra.MV.build_base_blade_expansion_tables(debug)
sympy.galgebra.MV.build_base_mul_table(debug)
sympy.galgebra.MV.build_curvilinear_connection(debug)
sympy.galgebra.MV.build_reciprocal_basis(debug)
sympy.galgebra.MV.characterize_expression(self,expr)
sympy.galgebra.MV.coef(self,base)
sympy.galgebra.MV.collect(self,x)
sympy.galgebra.MV.db(self)
sympy.galgebra.MV.dd(self,v)
sympy.galgebra.MV.diff(self,var)
sympy.galgebra.MV.discover_and_set_grade(self)
sympy.galgebra.MV.dot_orthogonal_blades(blade1,blade2)
sympy.galgebra.MV.dot_product(b1,b2)
sympy.galgebra.MV.dual(self)
sympy.galgebra.MV.even(self)
sympy.galgebra.MV.exp(self,alpha=1,norm=0,mode='T')
sympy.galgebra.MV.expand(self)
sympy.galgebra.MV.factor(self)
sympy.galgebra.MV.func(self,fct)
sympy.galgebra.MV.geometric_product(b1,b2)
sympy.galgebra.MV.get_grades(self)
sympy.galgebra.MV.get_latex_normal_order_str(self)
sympy.galgebra.MV.get_normal_order_str(self)
sympy.galgebra.MV.grade(self,igrade=0)
sympy.galgebra.MV.inv(self)
sympy.galgebra.MV.is_blade(self)
sympy.galgebra.MV.is_scalar(self)
sympy.galgebra.MV.make_base_blade_symbol(ibase)
sympy.galgebra.MV.non_orthogonal_products(mv1,mv2,mode='w')
sympy.galgebra.MV.norm(self)
sympy.galgebra.MV.norm2(self)
sympy.galgebra.MV.odd(self)
sympy.galgebra.MV.product_orthogonal_blades(blade1,blade2)
sympy.galgebra.MV.reduce_basis(blst)
sympy.galgebra.MV.reduce_basis_loop(blst)
sympy.galgebra.MV.rev(self)
sympy.galgebra.MV.scalar(self)
sympy.galgebra.MV.set_coef(self,igrade,ibase,value)
sympy.galgebra.MV.setup(basis,metric=None,coords=None,rframe=False,debug=False,curv=(None,None))
sympy.galgebra.MV.simplify(self)
sympy.galgebra.MV.subs(self,x)
sympy.galgebra.MV.symbol_product_bases(i1,i2)
sympy.galgebra.MV.trigsimp(self,**kwargs)
sympy.galgebra.MV.wedge_product(b1,b2)
sympy.galgebra.Nga(x,prec=5)
sympy.galgebra.ReciprocalFrame(basis,mode='norm')
sympy.galgebra.ScalarFunction(TheFunction)
sympy.galgebra.cross(M1,M2)
sympy.galgebra.dual(M)
sympy.galgebra.ga.Com(A,B)
sympy.galgebra.ga.DD(v,f)
sympy.galgebra.ga.Format(Fmode=True,Dmode=True,ipy=False)
sympy.galgebra.ga.MV(self,base=None,mvtype=None,fct=False,blade_rep=False)
sympy.galgebra.ga.MV.Fmt(self,fmt=1,title=None)
sympy.galgebra.ga.MV.__add__(self,b)
sympy.galgebra.ga.MV.__add_ab__(self,b)
sympy.galgebra.ga.MV.__div__(self,b)
sympy.galgebra.ga.MV.__eq__(self,mv)
sympy.galgebra.ga.MV.__gt__(self,b)
sympy.galgebra.ga.MV.__init__(self,base=None,mvtype=None,fct=False,blade_rep=False)
sympy.galgebra.ga.MV.__lt__(self,b)
sympy.galgebra.ga.MV.__mul__(self,b)
sympy.galgebra.ga.MV.__mul_ab__(self,b)
sympy.galgebra.ga.MV.__neg__(self)
sympy.galgebra.ga.MV.__or__(self,b)
sympy.galgebra.ga.MV.__pos__(self)
sympy.galgebra.ga.MV.__radd__(self,b)
sympy.galgebra.ga.MV.__rmul__(self,b)
sympy.galgebra.ga.MV.__ror__(self,b)
sympy.galgebra.ga.MV.__rsub__(self,b)
sympy.galgebra.ga.MV.__rxor__(self,b)
sympy.galgebra.ga.MV.__str__(self)
sympy.galgebra.ga.MV.__sub__(self,b)
sympy.galgebra.ga.MV.__sub_ab__(self,b)
sympy.galgebra.ga.MV.__xor__(self,b)
sympy.galgebra.ga.MV.base_to_blade(self)
sympy.galgebra.ga.MV.basic_add(mv1,mv2)
sympy.galgebra.ga.MV.basic_geometric_product(obj1,obj2)
sympy.galgebra.ga.MV.basic_sub(mv1,mv2)
sympy.galgebra.ga.MV.blade_reduce(lst)
sympy.galgebra.ga.MV.blade_to_base(self)
sympy.galgebra.ga.MV.build_base_blade_arrays(debug)
sympy.galgebra.ga.MV.build_base_blade_expansion_tables(debug)
sympy.galgebra.ga.MV.build_base_mul_table(debug)
sympy.galgebra.ga.MV.build_curvilinear_connection(debug)
sympy.galgebra.ga.MV.build_reciprocal_basis(debug)
sympy.galgebra.ga.MV.characterize_expression(self,expr)
sympy.galgebra.ga.MV.coef(self,base)
sympy.galgebra.ga.MV.collect(self,x)
sympy.galgebra.ga.MV.db(self)
sympy.galgebra.ga.MV.dd(self,v)
sympy.galgebra.ga.MV.diff(self,var)
sympy.galgebra.ga.MV.discover_and_set_grade(self)
sympy.galgebra.ga.MV.dot_orthogonal_blades(blade1,blade2)
sympy.galgebra.ga.MV.dot_product(b1,b2)
sympy.galgebra.ga.MV.dual(self)
sympy.galgebra.ga.MV.even(self)
sympy.galgebra.ga.MV.exp(self,alpha=1,norm=0,mode='T')
sympy.galgebra.ga.MV.expand(self)
sympy.galgebra.ga.MV.factor(self)
sympy.galgebra.ga.MV.func(self,fct)
sympy.galgebra.ga.MV.geometric_product(b1,b2)
sympy.galgebra.ga.MV.get_grades(self)
sympy.galgebra.ga.MV.get_latex_normal_order_str(self)
sympy.galgebra.ga.MV.get_normal_order_str(self)
sympy.galgebra.ga.MV.grade(self,igrade=0)
sympy.galgebra.ga.MV.inv(self)
sympy.galgebra.ga.MV.is_blade(self)
sympy.galgebra.ga.MV.is_scalar(self)
sympy.galgebra.ga.MV.make_base_blade_symbol(ibase)
sympy.galgebra.ga.MV.non_orthogonal_products(mv1,mv2,mode='w')
sympy.galgebra.ga.MV.norm(self)
sympy.galgebra.ga.MV.norm2(self)
sympy.galgebra.ga.MV.odd(self)
sympy.galgebra.ga.MV.product_orthogonal_blades(blade1,blade2)
sympy.galgebra.ga.MV.reduce_basis(blst)
sympy.galgebra.ga.MV.reduce_basis_loop(blst)
sympy.galgebra.ga.MV.rev(self)
sympy.galgebra.ga.MV.scalar(self)
sympy.galgebra.ga.MV.set_coef(self,igrade,ibase,value)
sympy.galgebra.ga.MV.setup(basis,metric=None,coords=None,rframe=False,debug=False,curv=(None,None))
sympy.galgebra.ga.MV.simplify(self)
sympy.galgebra.ga.MV.subs(self,x)
sympy.galgebra.ga.MV.symbol_product_bases(i1,i2)
sympy.galgebra.ga.MV.trigsimp(self,**kwargs)
sympy.galgebra.ga.MV.wedge_product(b1,b2)
sympy.galgebra.ga.Nga(x,prec=5)
sympy.galgebra.ga.ReciprocalFrame(basis,mode='norm')
sympy.galgebra.ga.ScalarFunction(TheFunction)
sympy.galgebra.ga.arbitrary_metric(n)
sympy.galgebra.ga.arbitrary_metric_conformal(n)
sympy.galgebra.ga.cross(M1,M2)
sympy.galgebra.ga.diagpq(p,q=0)
sympy.galgebra.ga.dual(M)
sympy.galgebra.ga.ga_print_off()
sympy.galgebra.ga.ga_print_on()
sympy.galgebra.ga.inv(B)
sympy.galgebra.ga.make_coef(self,coef_str)
sympy.galgebra.ga.proj(B,A)
sympy.galgebra.ga.refl(B,A)
sympy.galgebra.ga.rot(itheta,A)
sympy.galgebra.ga.rotor(theta,n)
sympy.galgebra.ga_print_off()
sympy.galgebra.ga_print_on()
sympy.galgebra.inv(B)
sympy.galgebra.proj(B,A)
sympy.galgebra.refl(B,A)
sympy.galgebra.rot(itheta,A)
sympy.galgebra.rotor(theta,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/stringarrays.py----------------------------------------
A:sympy.galgebra.stringarrays.base_split->base.split(',')
A:sympy.galgebra.stringarrays.symbol_str_lst->str_array(base, n)
A:sympy.galgebra.stringarrays.str_lst->list(map(lambda x: base + mode + x, map(lambda x: reduce(operator.add, x), combinations(map(lambda x: str(x), lst), rank))))
sympy.galgebra.stringarrays.fct_sym_array(str_lst,coords=None)
sympy.galgebra.stringarrays.str_array(base,n=None)
sympy.galgebra.stringarrays.str_combinations(base,lst,rank=1,mode='_')
sympy.galgebra.stringarrays.symbol_array(base,n=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/manifold.py----------------------------------------
A:sympy.galgebra.manifold.current_file->open(sys.argv[0], 'r')
A:sympy.galgebra.manifold.file_str->open(sys.argv[0], 'r').read()
A:sympy.galgebra.manifold.start_def->open(sys.argv[0], 'r').read().find('\ndef ' + fct_name)
A:sympy.galgebra.manifold.end_def->min(end_def, start_class)
A:sympy.galgebra.manifold.start_class->open(sys.argv[0], 'r').read().find('\nclass ', start_def + 5)
A:sympy.galgebra.manifold.(coefs, bases)->linear_expand(self.x.obj)
A:sympy.galgebra.manifold.id_new->template.replace('$' + v + '$', str(eval('self.' + v))).find('$', id_old + 1)
A:sympy.galgebra.manifold.template->template.replace('$' + v + '$', str(eval('self.' + v))).replace('$' + v + '$', str(eval('self.' + v)))
A:sympy.galgebra.manifold.tv->x.diff(u)
A:sympy.galgebra.manifold.str_base->str(base)
A:sympy.galgebra.manifold.self.dim->len(self.basis)
A:sympy.galgebra.manifold.indexes->tuple(range(self.dim))
A:sympy.galgebra.manifold.self.index->tuple(self.index)
A:sympy.galgebra.manifold.blade->blade.trigsimp(deep=True, recursive=True).trigsimp(deep=True, recursive=True)
A:sympy.galgebra.manifold.self.E_sq->trigsimp((self.E * self.E).scalar(), deep=True, recursive=True)
A:sympy.galgebra.manifold.duals->copy.copy(self.MFbasis[-2])
A:sympy.galgebra.manifold.recpv->(sgn * dual * self.E).trigsimp(deep=True, recursive=True)
A:sympy.galgebra.manifold.d->base.diff(coord).trigsimp(deep=True, recursive=True)
A:sympy.galgebra.manifold.self.grad->MV()
A:sympy.galgebra.manifold.self.grad.rcpr_bases_MV->tuple(self.grad.rcpr_bases_MV)
A:sympy.galgebra.manifold.dF->self.Grad(F)
A:sympy.galgebra.manifold.PF->PF.trigsimp(deep=True, recursive=True).trigsimp(deep=True, recursive=True)
A:sympy.galgebra.manifold.result->MV()
A:sympy.galgebra.manifold.self.fct_def->fct_to_str(fct_def)
A:sympy.galgebra.manifold.self.n->VectorComponents(self.normal, ['ex', 'ey', 'ez'])
A:sympy.galgebra.manifold.msurf->open('manifold_surf.py', 'w')
A:sympy.galgebra.manifold.plot_template->FillTemplate(self, plot_template)
A:sympy.galgebra.manifold.mayavi2->find_executable('mayavi2')
sympy.galgebra.Manifold(self,x,coords,debug=False,I=None)
sympy.galgebra.Manifold.Basis(self)
sympy.galgebra.Manifold.D(self,F)
sympy.galgebra.Manifold.DD(self,v,f,opstr=False)
sympy.galgebra.Manifold.Grad(self,F)
sympy.galgebra.Manifold.Plot2DSurface(self,u_range,v_range,surf=True,grid=True,tan=1.0,scalar_field=None,skip=[1,1],fct_def=None)
sympy.galgebra.Manifold.Proj(self,F)
sympy.galgebra.Manifold.Reject(self,F)
sympy.galgebra.Manifold.S(self,a)
sympy.galgebra.manifold.FillTemplate(self,template)
sympy.galgebra.manifold.Manifold(self,x,coords,debug=False,I=None)
sympy.galgebra.manifold.Manifold.Basis(self)
sympy.galgebra.manifold.Manifold.D(self,F)
sympy.galgebra.manifold.Manifold.DD(self,v,f,opstr=False)
sympy.galgebra.manifold.Manifold.Grad(self,F)
sympy.galgebra.manifold.Manifold.Plot2DSurface(self,u_range,v_range,surf=True,grid=True,tan=1.0,scalar_field=None,skip=[1,1],fct_def=None)
sympy.galgebra.manifold.Manifold.Proj(self,F)
sympy.galgebra.manifold.Manifold.Reject(self,F)
sympy.galgebra.manifold.Manifold.S(self,a)
sympy.galgebra.manifold.Manifold.__init__(self,x,coords,debug=False,I=None)
sympy.galgebra.manifold.VectorComponents(X,basis)
sympy.galgebra.manifold.fct_to_str(fct_names)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/galgebra/tests/test_ga.py----------------------------------------
A:sympy.galgebra.tests.test_ga.sym_lst->list(symbols(sym_str))
A:sympy.galgebra.tests.test_ga.a->simplify(W[BigC ** 2])
A:sympy.galgebra.tests.test_ga.(x, y, z)->symbols('x y z')
A:sympy.galgebra.tests.test_ga.(a, b, c)->symbols('a b c')
A:sympy.galgebra.tests.test_ga.(e_1, e_2, e_3)->sympy.galgebra.ga.MV.setup('e_1 e_2 e_3', '[1,1,1]')
A:sympy.galgebra.tests.test_ga.(e_x, e_y, e_z)->sympy.galgebra.ga.MV.setup('e_x e_y e_z', '1 0 0, 0 1 0, 0 0 1')
A:sympy.galgebra.tests.test_ga.Y->MV('Y', 'vector')
A:sympy.galgebra.tests.test_ga.(P1, P2, a)->sympy.galgebra.ga.MV.setup('P1 P2 a', metric)
A:sympy.galgebra.tests.test_ga.P1dota->Symbol('(P1.a)')
A:sympy.galgebra.tests.test_ga.P2dota->Symbol('(P2.a)')
A:sympy.galgebra.tests.test_ga.metric->arbitrary_metric_conformal(3)
A:sympy.galgebra.tests.test_ga.(p1, p2, p3)->sympy.galgebra.ga.MV.setup('p1 p2 p3', metric, debug=0)
A:sympy.galgebra.tests.test_ga.(x1, y1, z1)->symbols('x1 y1 z1')
A:sympy.galgebra.tests.test_ga.(x2, y2, z2)->symbols('x2 y2 z2')
A:sympy.galgebra.tests.test_ga.(e0, e1, e2, n, nbar)->sympy.galgebra.ga.MV.setup('e0 e1 e2 n nbar', metric, debug=0)
A:sympy.galgebra.tests.test_ga.A->make_vector(e1)
A:sympy.galgebra.tests.test_ga.B->make_vector(e2)
A:sympy.galgebra.tests.test_ga.C->make_vector(-e1)
A:sympy.galgebra.tests.test_ga.D->make_vector(e3)
A:sympy.galgebra.tests.test_ga.(x0, x1, x2)->symbols('x0 x1 x2')
A:sympy.galgebra.tests.test_ga.X->make_vector('x', 3)
A:sympy.galgebra.tests.test_ga.(p1, p2, p3, n, nbar)->sympy.galgebra.ga.MV.setup('p1 p2 p3 n nbar', metric)
A:sympy.galgebra.tests.test_ga.P1->F(p1, n, nbar)
A:sympy.galgebra.tests.test_ga.P2->F(p2, n, nbar)
A:sympy.galgebra.tests.test_ga.P3->F(p3, n, nbar)
A:sympy.galgebra.tests.test_ga.(e1, e2, e3)->sympy.galgebra.ga.MV.setup('e1 e2 e3', metric)
A:sympy.galgebra.tests.test_ga.Esq->expand(Esq)
A:sympy.galgebra.tests.test_ga.w->w.expand().scalar().expand().scalar()
A:sympy.galgebra.tests.test_ga.coords(x, y, z)->symbols('x y z')
A:sympy.galgebra.tests.test_ga.(e_x, e_y, e_z, _)->sympy.galgebra.ga.MV.setup('e', '1 0 0, 0 1 0, 0 0 1', coords=coords)
A:sympy.galgebra.tests.test_ga.(ex, ey, ez)->sympy.galgebra.ga.MV.setup('e_x e_y e_z', metric='[1,1,1]')
A:sympy.galgebra.tests.test_ga.(ex, ey)->sympy.galgebra.ga.MV.setup('e*x|y', metric='[1,1]')
A:sympy.galgebra.tests.test_ga.(a, b, c, d, e)->sympy.galgebra.ga.MV.setup('a b c d e')
A:sympy.galgebra.tests.test_ga.X(x, y, z)->symbols('x y z')
A:sympy.galgebra.tests.test_ga.(ex, ey, ez, grad)->sympy.galgebra.ga.MV.setup('e_x e_y e_z', metric='[1,1,1]', coords=X)
A:sympy.galgebra.tests.test_ga.f->MV('f', 'scalar', fct=True)
A:sympy.galgebra.tests.test_ga.X(r, th, phi)->symbols('r theta phi')
A:sympy.galgebra.tests.test_ga.(er, eth, ephi, grad)->sympy.galgebra.ga.MV.setup('e_r e_theta e_phi', metric='[1,1,1]', coords=X, curv=curv)
A:sympy.galgebra.tests.test_ga.(X, Y, e)->sympy.galgebra.ga.MV.setup('X Y e', metric)
A:sympy.galgebra.tests.test_ga.Bsq->Bsq.scalar().scalar()
A:sympy.galgebra.tests.test_ga.(s, c, Binv, M, BigS, BigC, alpha, XdotY, Xdote, Ydote)->symbols('s c (1/B) M S C alpha (X.Y) (X.e) (Y.e)')
A:sympy.galgebra.tests.test_ga.Z.obj->Z.obj.collect([Binv, s, c, XdotY])
A:sympy.galgebra.tests.test_ga.W->W.collect([BigC, BigC ** 2], evaluate=False).collect([BigC, BigC ** 2], evaluate=False)
A:sympy.galgebra.tests.test_ga.Bmag->sqrt(XdotY ** 2 - 2 * XdotY * Xdote * Ydote)
A:sympy.galgebra.tests.test_ga.Wd->collect(W, [BigC, BigS], exact=True, evaluate=False)
A:sympy.galgebra.tests.test_ga.Wd_1->Wd_1.subs(Bmag, 1 / Binv).subs(Bmag, 1 / Binv)
A:sympy.galgebra.tests.test_ga.Wd_C->Wd_C.subs(Bmag, 1 / Binv).subs(Bmag, 1 / Binv)
A:sympy.galgebra.tests.test_ga.Wd_S->Wd_S.subs(Bmag, 1 / Binv).subs(Bmag, 1 / Binv)
A:sympy.galgebra.tests.test_ga.b->simplify(W[BigC])
A:sympy.galgebra.tests.test_ga.c->simplify(W[S.One])
A:sympy.galgebra.tests.test_ga.x->Symbol('x')
A:sympy.galgebra.tests.test_ga.(e1, e2, e3, n, nbar)->sympy.galgebra.ga.MV.setup('e_1 e_2 e_3 n nbar', metric)
sympy.galgebra.tests.test_ga.F(x,n,nbar)
sympy.galgebra.tests.test_ga.make_vector(a,m=3)
sympy.galgebra.tests.test_ga.test_basic_multivector_operations()
sympy.galgebra.tests.test_ga.test_check_generalized_BAC_CAB_formulas()
sympy.galgebra.tests.test_ga.test_conformal_representations_of_circles_lines_spheres_and_planes()
sympy.galgebra.tests.test_ga.test_constructor()
sympy.galgebra.tests.test_ga.test_contraction()
sympy.galgebra.tests.test_ga.test_derivative()
sympy.galgebra.tests.test_ga.test_derivatives_in_rectangular_coordinates()
sympy.galgebra.tests.test_ga.test_derivatives_in_spherical_coordinates()
sympy.galgebra.tests.test_ga.test_extract_plane_and_line()
sympy.galgebra.tests.test_ga.test_extracting_vectors_from_conformal_2_blade()
sympy.galgebra.tests.test_ga.test_geometry()
sympy.galgebra.tests.test_ga.test_metric()
sympy.galgebra.tests.test_ga.test_metrics()
sympy.galgebra.tests.test_ga.test_metrics_xfail()
sympy.galgebra.tests.test_ga.test_noneuclidian_distance_calculation()
sympy.galgebra.tests.test_ga.test_properties_of_geometric_objects()
sympy.galgebra.tests.test_ga.test_reciprocal_frame()
sympy.galgebra.tests.test_ga.test_reciprocal_frame_test()
sympy.galgebra.tests.test_ga.test_rmul()
sympy.galgebra.tests.test_ga.test_rounding_numerical_components()
sympy.galgebra.tests.test_ga.test_str()
sympy.galgebra.tests.test_ga.test_substitution()
sympy.galgebra.tests.test_ga.test_vector_extraction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/immutable.py----------------------------------------
A:sympy.matrices.immutable.(rows, cols, flat_list)->cls._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.immutable.rows->Integer(s.rows)
A:sympy.matrices.immutable.cols->Integer(s.cols)
A:sympy.matrices.immutable.mat->Dict(s._smat)
A:sympy.matrices.immutable.s->MutableSparseMatrix(*args)
A:sympy.matrices.immutable.obj->sympy.core.Basic.__new__(cls, rows, cols, mat)
sympy.ImmutableMatrix(cls,*args,**kwargs)
sympy.ImmutableMatrix.__setitem__(self,*args)
sympy.ImmutableMatrix._entry(self,i,j)
sympy.ImmutableMatrix._eval_Eq(self,other)
sympy.ImmutableMatrix._mat(self)
sympy.ImmutableMatrix._new(cls,*args,**kwargs)
sympy.ImmutableMatrix.shape(self)
sympy.ImmutableSparseMatrix(cls,*args,**kwargs)
sympy.ImmutableSparseMatrix.__hash__(self)
sympy.ImmutableSparseMatrix.__setitem__(self,*args)
sympy.ImmutableSparseMatrix._new(cls,*args,**kwargs)
sympy.immutable.sympify_matrix(arg)
sympy.matrices.immutable.ImmutableMatrix(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableMatrix.__new__(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableMatrix.__setitem__(self,*args)
sympy.matrices.immutable.ImmutableMatrix._entry(self,i,j)
sympy.matrices.immutable.ImmutableMatrix._eval_Eq(self,other)
sympy.matrices.immutable.ImmutableMatrix._mat(self)
sympy.matrices.immutable.ImmutableMatrix._new(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableMatrix.shape(self)
sympy.matrices.immutable.ImmutableSparseMatrix(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableSparseMatrix.__hash__(self)
sympy.matrices.immutable.ImmutableSparseMatrix.__new__(cls,*args,**kwargs)
sympy.matrices.immutable.ImmutableSparseMatrix.__setitem__(self,*args)
sympy.matrices.immutable.ImmutableSparseMatrix._new(cls,*args,**kwargs)
sympy.matrices.immutable.sympify_matrix(arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/sparse.py----------------------------------------
A:sympy.matrices.sparse.self._smat->dict([((i, j), v) for i in range(self.rows) for j in range(self.cols)])
A:sympy.matrices.sparse.self.rows->as_int(args[0])
A:sympy.matrices.sparse.self.cols->as_int(args[1])
A:sympy.matrices.sparse.value->self._sympify(flat_list[i * self.cols + j])
A:sympy.matrices.sparse.(r, c, _list)->dense.Matrix._handle_creation_inputs(*args)
A:sympy.matrices.sparse.(i, j)->divmod(a2idx(key, len(self)), self.cols)
A:sympy.matrices.sparse.(m, n)->divmod(i, self.cols)
A:sympy.matrices.sparse.RL->property(row_list, None, None, 'Alternate faster representation')
A:sympy.matrices.sparse.CL->property(col_list, None, None, 'Alternate faster representation')
A:sympy.matrices.sparse.tran->self.zeros(self.cols, self.rows)
A:sympy.matrices.sparse.conj->self.copy()
A:sympy.matrices.sparse.conj._smat[key]->self._sympify(flat_list[i * self.cols + j]).conjugate()
A:sympy.matrices.sparse.Cdict->defaultdict(int)
A:sympy.matrices.sparse.rv->self._setitem(key, value)
A:sympy.matrices.sparse.rv._smat->dict([(k, v) for (k, v) in Cdict.items() if v])
A:sympy.matrices.sparse.M->self.as_mutable()
A:sympy.matrices.sparse.urow->list(uniq(rowsList))
A:sympy.matrices.sparse.ucol->list(uniq(colsList))
A:sympy.matrices.sparse.smat[i, j]->self._smat.get((r, c), 0)
A:sympy.matrices.sparse.i_previous->colsList.index(c)
A:sympy.matrices.sparse.out->self.copy()
A:sympy.matrices.sparse.fv->f(v, i)
A:sympy.matrices.sparse.(ii, jj)->divmod(n, cols)
A:sympy.matrices.sparse.inf->len(R)
A:sympy.matrices.sparse.(R, parent)->self.liupc()
A:sympy.matrices.sparse.Lrow->copy.deepcopy(R)
A:sympy.matrices.sparse.Lrow[k]->list(sorted(set(Lrow[k])))
A:sympy.matrices.sparse.Crowstruc->self.row_structure_symbolic_cholesky()
A:sympy.matrices.sparse.C->self.zeros(self.rows)
A:sympy.matrices.sparse.C[j, j]->sqrt(C[j, j])
A:sympy.matrices.sparse.Lrowstruc->self.row_structure_symbolic_cholesky()
A:sympy.matrices.sparse.L->self._cholesky_sparse()
A:sympy.matrices.sparse.D->self.zeros(self.rows, self.cols)
A:sympy.matrices.sparse.X->rhs.copy()
A:sympy.matrices.sparse.Y->self.zeros(self.rows, self.cols)._diagonal_solve(Z)
A:sympy.matrices.sparse.(L, D)->self.as_mutable()._LDL_sparse()
A:sympy.matrices.sparse.Z->self._cholesky_sparse()._lower_triangular_solve(rhs)
A:sympy.matrices.sparse.sym->self.is_symmetric()
A:sympy.matrices.sparse.I->self.as_mutable().eye(M.rows)
A:sympy.matrices.sparse.method->kwargs.get('method', 'LDL')
A:sympy.matrices.sparse.r->as_int(r)
A:sympy.matrices.sparse.c->as_int(c)
A:sympy.matrices.sparse.n->as_int(n)
A:sympy.matrices.sparse.k->a2idx(k, self.cols)
A:sympy.matrices.sparse.rows->self.col_list()
A:sympy.matrices.sparse.A->A.copy().copy()
A:sympy.matrices.sparse.(rlo, rhi, clo, chi)->self.key2bounds(key)
A:sympy.matrices.sparse.v->self._sympify(value)
sympy.MutableSparseMatrix(SparseMatrix,MatrixBase)
sympy.MutableSparseMatrix.__setitem__(self,key,value)
sympy.MutableSparseMatrix._new(cls,*args,**kwargs)
sympy.MutableSparseMatrix.as_mutable(self)
sympy.MutableSparseMatrix.col_del(self,k)
sympy.MutableSparseMatrix.col_join(self,other)
sympy.MutableSparseMatrix.col_op(self,j,f)
sympy.MutableSparseMatrix.col_swap(self,i,j)
sympy.MutableSparseMatrix.copyin_list(self,key,value)
sympy.MutableSparseMatrix.copyin_matrix(self,key,value)
sympy.MutableSparseMatrix.fill(self,value)
sympy.MutableSparseMatrix.row_del(self,k)
sympy.MutableSparseMatrix.row_join(self,other)
sympy.MutableSparseMatrix.row_op(self,i,f)
sympy.MutableSparseMatrix.row_swap(self,i,j)
sympy.MutableSparseMatrix.zip_row_op(self,i,k,f)
sympy.matrices.sparse.MutableSparseMatrix(SparseMatrix,MatrixBase)
sympy.matrices.sparse.MutableSparseMatrix.__setitem__(self,key,value)
sympy.matrices.sparse.MutableSparseMatrix._new(cls,*args,**kwargs)
sympy.matrices.sparse.MutableSparseMatrix.as_mutable(self)
sympy.matrices.sparse.MutableSparseMatrix.col_del(self,k)
sympy.matrices.sparse.MutableSparseMatrix.col_join(self,other)
sympy.matrices.sparse.MutableSparseMatrix.col_op(self,j,f)
sympy.matrices.sparse.MutableSparseMatrix.col_swap(self,i,j)
sympy.matrices.sparse.MutableSparseMatrix.copyin_list(self,key,value)
sympy.matrices.sparse.MutableSparseMatrix.copyin_matrix(self,key,value)
sympy.matrices.sparse.MutableSparseMatrix.fill(self,value)
sympy.matrices.sparse.MutableSparseMatrix.row_del(self,k)
sympy.matrices.sparse.MutableSparseMatrix.row_join(self,other)
sympy.matrices.sparse.MutableSparseMatrix.row_op(self,i,f)
sympy.matrices.sparse.MutableSparseMatrix.row_swap(self,i,j)
sympy.matrices.sparse.MutableSparseMatrix.zip_row_op(self,i,k,f)
sympy.matrices.sparse.SparseMatrix(self,*args)
sympy.matrices.sparse.SparseMatrix.LDLdecomposition(self)
sympy.matrices.sparse.SparseMatrix._LDL_solve(self,rhs)
sympy.matrices.sparse.SparseMatrix._LDL_sparse(self)
sympy.matrices.sparse.SparseMatrix.__add__(self,other)
sympy.matrices.sparse.SparseMatrix.__eq__(self,other)
sympy.matrices.sparse.SparseMatrix.__getitem__(self,key)
sympy.matrices.sparse.SparseMatrix.__init__(self,*args)
sympy.matrices.sparse.SparseMatrix.__mul__(self,other)
sympy.matrices.sparse.SparseMatrix.__ne__(self,other)
sympy.matrices.sparse.SparseMatrix.__neg__(self)
sympy.matrices.sparse.SparseMatrix.__rmul__(self,other)
sympy.matrices.sparse.SparseMatrix.__setitem__(self,key,value)
sympy.matrices.sparse.SparseMatrix._cholesky_solve(self,rhs)
sympy.matrices.sparse.SparseMatrix._cholesky_sparse(self)
sympy.matrices.sparse.SparseMatrix._diagonal_solve(self,rhs)
sympy.matrices.sparse.SparseMatrix._eval_conjugate(self)
sympy.matrices.sparse.SparseMatrix._eval_inverse(self,**kwargs)
sympy.matrices.sparse.SparseMatrix._eval_trace(self)
sympy.matrices.sparse.SparseMatrix._eval_transpose(self)
sympy.matrices.sparse.SparseMatrix._lower_triangular_solve(self,rhs)
sympy.matrices.sparse.SparseMatrix._upper_triangular_solve(self,rhs)
sympy.matrices.sparse.SparseMatrix.add(self,other)
sympy.matrices.sparse.SparseMatrix.applyfunc(self,f)
sympy.matrices.sparse.SparseMatrix.as_immutable(self)
sympy.matrices.sparse.SparseMatrix.as_mutable(self)
sympy.matrices.sparse.SparseMatrix.cholesky(self)
sympy.matrices.sparse.SparseMatrix.col(self,j)
sympy.matrices.sparse.SparseMatrix.col_list(self)
sympy.matrices.sparse.SparseMatrix.copy(self)
sympy.matrices.sparse.SparseMatrix.extract(self,rowsList,colsList)
sympy.matrices.sparse.SparseMatrix.eye(cls,n)
sympy.matrices.sparse.SparseMatrix.has(self,*patterns)
sympy.matrices.sparse.SparseMatrix.is_Identity(self)
sympy.matrices.sparse.SparseMatrix.is_hermitian(self)
sympy.matrices.sparse.SparseMatrix.is_symmetric(self,simplify=True)
sympy.matrices.sparse.SparseMatrix.liupc(self)
sympy.matrices.sparse.SparseMatrix.multiply(self,other)
sympy.matrices.sparse.SparseMatrix.nnz(self)
sympy.matrices.sparse.SparseMatrix.reshape(self,rows,cols)
sympy.matrices.sparse.SparseMatrix.row(self,i)
sympy.matrices.sparse.SparseMatrix.row_list(self)
sympy.matrices.sparse.SparseMatrix.row_structure_symbolic_cholesky(self)
sympy.matrices.sparse.SparseMatrix.scalar_multiply(self,scalar)
sympy.matrices.sparse.SparseMatrix.solve(self,rhs,method='LDL')
sympy.matrices.sparse.SparseMatrix.solve_least_squares(self,rhs,method='LDL')
sympy.matrices.sparse.SparseMatrix.tolist(self)
sympy.matrices.sparse.SparseMatrix.zeros(cls,r,c=None)
sympy.sparse.SparseMatrix(self,*args)
sympy.sparse.SparseMatrix.LDLdecomposition(self)
sympy.sparse.SparseMatrix._LDL_solve(self,rhs)
sympy.sparse.SparseMatrix._LDL_sparse(self)
sympy.sparse.SparseMatrix.__add__(self,other)
sympy.sparse.SparseMatrix.__eq__(self,other)
sympy.sparse.SparseMatrix.__getitem__(self,key)
sympy.sparse.SparseMatrix.__mul__(self,other)
sympy.sparse.SparseMatrix.__ne__(self,other)
sympy.sparse.SparseMatrix.__neg__(self)
sympy.sparse.SparseMatrix.__rmul__(self,other)
sympy.sparse.SparseMatrix.__setitem__(self,key,value)
sympy.sparse.SparseMatrix._cholesky_solve(self,rhs)
sympy.sparse.SparseMatrix._cholesky_sparse(self)
sympy.sparse.SparseMatrix._diagonal_solve(self,rhs)
sympy.sparse.SparseMatrix._eval_conjugate(self)
sympy.sparse.SparseMatrix._eval_inverse(self,**kwargs)
sympy.sparse.SparseMatrix._eval_trace(self)
sympy.sparse.SparseMatrix._eval_transpose(self)
sympy.sparse.SparseMatrix._lower_triangular_solve(self,rhs)
sympy.sparse.SparseMatrix._upper_triangular_solve(self,rhs)
sympy.sparse.SparseMatrix.add(self,other)
sympy.sparse.SparseMatrix.applyfunc(self,f)
sympy.sparse.SparseMatrix.as_immutable(self)
sympy.sparse.SparseMatrix.as_mutable(self)
sympy.sparse.SparseMatrix.cholesky(self)
sympy.sparse.SparseMatrix.col(self,j)
sympy.sparse.SparseMatrix.col_list(self)
sympy.sparse.SparseMatrix.copy(self)
sympy.sparse.SparseMatrix.extract(self,rowsList,colsList)
sympy.sparse.SparseMatrix.eye(cls,n)
sympy.sparse.SparseMatrix.has(self,*patterns)
sympy.sparse.SparseMatrix.is_Identity(self)
sympy.sparse.SparseMatrix.is_hermitian(self)
sympy.sparse.SparseMatrix.is_symmetric(self,simplify=True)
sympy.sparse.SparseMatrix.liupc(self)
sympy.sparse.SparseMatrix.multiply(self,other)
sympy.sparse.SparseMatrix.nnz(self)
sympy.sparse.SparseMatrix.reshape(self,rows,cols)
sympy.sparse.SparseMatrix.row(self,i)
sympy.sparse.SparseMatrix.row_list(self)
sympy.sparse.SparseMatrix.row_structure_symbolic_cholesky(self)
sympy.sparse.SparseMatrix.scalar_multiply(self,scalar)
sympy.sparse.SparseMatrix.solve(self,rhs,method='LDL')
sympy.sparse.SparseMatrix.solve_least_squares(self,rhs,method='LDL')
sympy.sparse.SparseMatrix.tolist(self)
sympy.sparse.SparseMatrix.zeros(cls,r,c=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/dense.py----------------------------------------
A:sympy.matrices.dense.(i, j)->object.__new__(cls).key2ij(key)
A:sympy.matrices.dense.out->zeros(N)
A:sympy.matrices.dense.method->kwargs.get('method', 'GE')
A:sympy.matrices.dense.iszerofunc->kwargs.get('iszerofunc', _iszero)
A:sympy.matrices.dense.blocks->object.__new__(cls).get_diag_blocks()
A:sympy.matrices.dense.M->object.__new__(cls).as_mutable()
A:sympy.matrices.dense.rv->object.__new__(cls)._setitem(key, value)
A:sympy.matrices.dense.ans->self[i, j].equals(other[i, j], failing_expression)
A:sympy.matrices.dense.L->eye(self.rows)
A:sympy.matrices.dense.L[i, i]->sqrt(self[i, i] - sum((L[i, k] ** 2 for k in range(i))))
A:sympy.matrices.dense.D->zeros(self.rows, self.rows)
A:sympy.matrices.dense.X->zeros(self.rows, rhs.cols)
A:sympy.matrices.dense.r->as_int(r)
A:sympy.matrices.dense.c->as_int(c)
A:sympy.matrices.dense.n->len(functions)
A:sympy.matrices.dense.a->empty(m.shape, dtype)
A:sympy.matrices.dense.(rows, cols, flat_list)->kwargs.pop('cls', None)._handle_creation_inputs(*args, **kwargs)
A:sympy.matrices.dense.self->object.__new__(cls)
A:sympy.matrices.dense.self._mat->list(flat_list)
A:sympy.matrices.dense.(rlo, rhi, clo, chi)->object.__new__(cls).key2bounds(key)
A:sympy.matrices.dense.self._mat[j::self.cols]->list(map(lambda t: f(*t), list(zip(self._mat[j::self.cols], list(range(self.rows))))))
A:sympy.matrices.dense.self._mat[i]->_simplify(self._mat[i], ratio=ratio, measure=measure)
A:sympy.matrices.dense.arr->empty(shape, dtype=object)
A:sympy.matrices.dense.arr[index]->Symbol('%s_%s' % (prefix, '_'.join(map(str, index))))
A:sympy.matrices.dense.ct->cos(theta)
A:sympy.matrices.dense.st->sin(theta)
A:sympy.matrices.dense.cls->kwargs.pop('cls', None)
A:sympy.matrices.dense.values->list(values)
A:sympy.matrices.dense.mvalues[i]->Matrix(m)
A:sympy.matrices.dense.res->sparse.MutableSparseMatrix.zeros(rows, cols)
A:sympy.matrices.dense.m->zeros(r)
A:sympy.matrices.dense.out[k, i + m]->g.diff(varlist[i])
A:sympy.matrices.dense.out[i + m, j + m]->f.diff(varlist[i]).diff(varlist[j])
A:sympy.matrices.dense.out[i]->out[i].normalized().normalized()
A:sympy.matrices.dense.functions[index]->sympify(functions[index])
A:sympy.matrices.dense.W->Matrix(n, n, lambda i, j: functions[i].diff(var, j))
A:sympy.matrices.dense.seqs->list(map(sympify, seqs))
A:sympy.matrices.dense.k->len(seqs)
A:sympy.matrices.dense.prng->random.Random(seed)
A:sympy.matrices.dense.m[i, j]->random.Random(seed).randint(min, max)
A:sympy.matrices.dense.z->int(r * c * percent // 100)
sympy.GramSchmidt(vlist,orthog=False)
sympy.casoratian(seqs,n,zero=True)
sympy.dense.DenseMatrix(MatrixBase)
sympy.dense.DenseMatrix._LDLdecomposition(self)
sympy.dense.DenseMatrix.__add__(self,other)
sympy.dense.DenseMatrix.__div__(self,other)
sympy.dense.DenseMatrix.__eq__(self,other)
sympy.dense.DenseMatrix.__getitem__(self,key)
sympy.dense.DenseMatrix.__mul__(self,other)
sympy.dense.DenseMatrix.__ne__(self,other)
sympy.dense.DenseMatrix.__pow__(self,other)
sympy.dense.DenseMatrix.__radd__(self,other)
sympy.dense.DenseMatrix.__rmul__(self,other)
sympy.dense.DenseMatrix.__rpow__(self,other)
sympy.dense.DenseMatrix.__rsub__(self,other)
sympy.dense.DenseMatrix.__setitem__(self,key,value)
sympy.dense.DenseMatrix.__sub__(self,other)
sympy.dense.DenseMatrix.__truediv__(self,other)
sympy.dense.DenseMatrix._cholesky(self)
sympy.dense.DenseMatrix._diagonal_solve(self,rhs)
sympy.dense.DenseMatrix._eval_adjoint(self)
sympy.dense.DenseMatrix._eval_conjugate(self)
sympy.dense.DenseMatrix._eval_determinant(self)
sympy.dense.DenseMatrix._eval_inverse(self,**kwargs)
sympy.dense.DenseMatrix._eval_trace(self)
sympy.dense.DenseMatrix._eval_transpose(self)
sympy.dense.DenseMatrix._lower_triangular_solve(self,rhs)
sympy.dense.DenseMatrix._upper_triangular_solve(self,rhs)
sympy.dense.DenseMatrix.applyfunc(self,f)
sympy.dense.DenseMatrix.as_immutable(self)
sympy.dense.DenseMatrix.as_mutable(self)
sympy.dense.DenseMatrix.col(self,j)
sympy.dense.DenseMatrix.equals(self,other,failing_expression=False)
sympy.dense.DenseMatrix.eye(cls,n)
sympy.dense.DenseMatrix.is_Identity(self)
sympy.dense.DenseMatrix.reshape(self,rows,cols)
sympy.dense.DenseMatrix.row(self,i)
sympy.dense.DenseMatrix.tolist(self)
sympy.dense.DenseMatrix.zeros(cls,r,c=None)
sympy.dense.MutableDenseMatrix(cls,*args,**kwargs)
sympy.dense.MutableDenseMatrix.__setitem__(self,key,value)
sympy.dense.MutableDenseMatrix._new(cls,*args,**kwargs)
sympy.dense.MutableDenseMatrix.as_mutable(self)
sympy.dense.MutableDenseMatrix.col_del(self,i)
sympy.dense.MutableDenseMatrix.col_op(self,j,f)
sympy.dense.MutableDenseMatrix.col_swap(self,i,j)
sympy.dense.MutableDenseMatrix.copyin_list(self,key,value)
sympy.dense.MutableDenseMatrix.copyin_matrix(self,key,value)
sympy.dense.MutableDenseMatrix.fill(self,value)
sympy.dense.MutableDenseMatrix.row_del(self,i)
sympy.dense.MutableDenseMatrix.row_op(self,i,f)
sympy.dense.MutableDenseMatrix.row_swap(self,i,j)
sympy.dense.MutableDenseMatrix.simplify(self,ratio=1.7,measure=count_ops)
sympy.dense.MutableDenseMatrix.zip_row_op(self,i,k,f)
sympy.dense._force_mutable(x)
sympy.dense._iszero(x)
sympy.diag(*values,**kwargs)
sympy.eye(n,cls=None)
sympy.hessian(f,varlist,constraints=[])
sympy.jordan_cell(eigenval,n)
sympy.list2numpy(l,dtype=object)
sympy.matrices.dense.DenseMatrix(MatrixBase)
sympy.matrices.dense.DenseMatrix._LDLdecomposition(self)
sympy.matrices.dense.DenseMatrix.__add__(self,other)
sympy.matrices.dense.DenseMatrix.__div__(self,other)
sympy.matrices.dense.DenseMatrix.__eq__(self,other)
sympy.matrices.dense.DenseMatrix.__getitem__(self,key)
sympy.matrices.dense.DenseMatrix.__mul__(self,other)
sympy.matrices.dense.DenseMatrix.__ne__(self,other)
sympy.matrices.dense.DenseMatrix.__pow__(self,other)
sympy.matrices.dense.DenseMatrix.__radd__(self,other)
sympy.matrices.dense.DenseMatrix.__rmul__(self,other)
sympy.matrices.dense.DenseMatrix.__rpow__(self,other)
sympy.matrices.dense.DenseMatrix.__rsub__(self,other)
sympy.matrices.dense.DenseMatrix.__setitem__(self,key,value)
sympy.matrices.dense.DenseMatrix.__sub__(self,other)
sympy.matrices.dense.DenseMatrix.__truediv__(self,other)
sympy.matrices.dense.DenseMatrix._cholesky(self)
sympy.matrices.dense.DenseMatrix._diagonal_solve(self,rhs)
sympy.matrices.dense.DenseMatrix._eval_adjoint(self)
sympy.matrices.dense.DenseMatrix._eval_conjugate(self)
sympy.matrices.dense.DenseMatrix._eval_determinant(self)
sympy.matrices.dense.DenseMatrix._eval_inverse(self,**kwargs)
sympy.matrices.dense.DenseMatrix._eval_trace(self)
sympy.matrices.dense.DenseMatrix._eval_transpose(self)
sympy.matrices.dense.DenseMatrix._lower_triangular_solve(self,rhs)
sympy.matrices.dense.DenseMatrix._upper_triangular_solve(self,rhs)
sympy.matrices.dense.DenseMatrix.applyfunc(self,f)
sympy.matrices.dense.DenseMatrix.as_immutable(self)
sympy.matrices.dense.DenseMatrix.as_mutable(self)
sympy.matrices.dense.DenseMatrix.col(self,j)
sympy.matrices.dense.DenseMatrix.equals(self,other,failing_expression=False)
sympy.matrices.dense.DenseMatrix.eye(cls,n)
sympy.matrices.dense.DenseMatrix.is_Identity(self)
sympy.matrices.dense.DenseMatrix.reshape(self,rows,cols)
sympy.matrices.dense.DenseMatrix.row(self,i)
sympy.matrices.dense.DenseMatrix.tolist(self)
sympy.matrices.dense.DenseMatrix.zeros(cls,r,c=None)
sympy.matrices.dense.GramSchmidt(vlist,orthog=False)
sympy.matrices.dense.MutableDenseMatrix(cls,*args,**kwargs)
sympy.matrices.dense.MutableDenseMatrix.__new__(cls,*args,**kwargs)
sympy.matrices.dense.MutableDenseMatrix.__setitem__(self,key,value)
sympy.matrices.dense.MutableDenseMatrix._new(cls,*args,**kwargs)
sympy.matrices.dense.MutableDenseMatrix.as_mutable(self)
sympy.matrices.dense.MutableDenseMatrix.col_del(self,i)
sympy.matrices.dense.MutableDenseMatrix.col_op(self,j,f)
sympy.matrices.dense.MutableDenseMatrix.col_swap(self,i,j)
sympy.matrices.dense.MutableDenseMatrix.copyin_list(self,key,value)
sympy.matrices.dense.MutableDenseMatrix.copyin_matrix(self,key,value)
sympy.matrices.dense.MutableDenseMatrix.fill(self,value)
sympy.matrices.dense.MutableDenseMatrix.row_del(self,i)
sympy.matrices.dense.MutableDenseMatrix.row_op(self,i,f)
sympy.matrices.dense.MutableDenseMatrix.row_swap(self,i,j)
sympy.matrices.dense.MutableDenseMatrix.simplify(self,ratio=1.7,measure=count_ops)
sympy.matrices.dense.MutableDenseMatrix.zip_row_op(self,i,k,f)
sympy.matrices.dense._force_mutable(x)
sympy.matrices.dense._iszero(x)
sympy.matrices.dense.casoratian(seqs,n,zero=True)
sympy.matrices.dense.diag(*values,**kwargs)
sympy.matrices.dense.eye(n,cls=None)
sympy.matrices.dense.hessian(f,varlist,constraints=[])
sympy.matrices.dense.jordan_cell(eigenval,n)
sympy.matrices.dense.list2numpy(l,dtype=object)
sympy.matrices.dense.matrix2numpy(m,dtype=object)
sympy.matrices.dense.matrix_multiply_elementwise(A,B)
sympy.matrices.dense.ones(r,c=None)
sympy.matrices.dense.randMatrix(r,c=None,min=0,max=99,seed=None,symmetric=False,percent=100)
sympy.matrices.dense.rot_axis1(theta)
sympy.matrices.dense.rot_axis2(theta)
sympy.matrices.dense.rot_axis3(theta)
sympy.matrices.dense.symarray(prefix,shape)
sympy.matrices.dense.wronskian(functions,var,method='bareis')
sympy.matrices.dense.zeros(r,c=None,cls=None)
sympy.matrix2numpy(m,dtype=object)
sympy.matrix_multiply_elementwise(A,B)
sympy.ones(r,c=None)
sympy.randMatrix(r,c=None,min=0,max=99,seed=None,symmetric=False,percent=100)
sympy.rot_axis1(theta)
sympy.rot_axis2(theta)
sympy.rot_axis3(theta)
sympy.symarray(prefix,shape)
sympy.wronskian(functions,var,method='bareis')
sympy.zeros(r,c=None,cls=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/matrices.py----------------------------------------
A:sympy.matrices.matrices._sympify->staticmethod(sympify)
A:sympy.matrices.matrices.rows->as_int(args[0])
A:sympy.matrices.matrices.cols->as_int(args[1])
A:sympy.matrices.matrices.arr->args[0].__array__()
A:sympy.matrices.matrices.flat_list[i]->cls._sympify(arr[i])
A:sympy.matrices.matrices.ncol->set()
A:sympy.matrices.matrices.is_slice->isinstance(key, slice)
A:sympy.matrices.matrices.(i, j)key->self.as_mutable().key2ij(key)
A:sympy.matrices.matrices.is_mat->isinstance(value, MatrixBase)
A:sympy.matrices.matrices.value->Matrix(value)
A:sympy.matrices.matrices.phi->totient(m)
A:sympy.matrices.matrices.det_K->self.as_mutable().det()
A:sympy.matrices.matrices.det_inv->pow(int(det_K), int(phi - 1), int(m))
A:sympy.matrices.matrices.K_adj->self.as_mutable().cofactorMatrix().transpose()
A:sympy.matrices.matrices.K_inv->self.as_mutable().__class__(N, N, [det_inv * K_adj[i, j] % m for i in range(N) for j in range(N)])
A:sympy.matrices.matrices.T->property(transpose, None, None, 'Matrix transposition.')
A:sympy.matrices.matrices.C->property(conjugate, None, None, 'By-element conjugation.')
A:sympy.matrices.matrices.blst->B.tolist()
A:sympy.matrices.matrices.alst->self.as_mutable().tolist()
A:sympy.matrices.matrices.n->int(n)
A:sympy.matrices.matrices.a->eye(self.cols)
A:sympy.matrices.matrices.(P, D)->self.as_mutable().diagonalize()
A:sympy.matrices.matrices.ret[i]->list(map(lambda j, k: j + k, alst[i], blst[i]))
A:sympy.matrices.matrices.rv->rv.reshape(*A.shape).reshape(*A.shape)
A:sympy.matrices.matrices.s->StrPrinter()._print(self[i, j])
A:sympy.matrices.matrices.maxlen[j]->max(len(s), maxlen[j])
A:sympy.matrices.matrices.row[j]->getattr(elem, align)(maxlen[j])
A:sympy.matrices.matrices.printer->StrPrinter()
A:sympy.matrices.matrices.L->self.as_mutable().zeros(self.rows)
A:sympy.matrices.matrices.Y->self.as_mutable().zeros(self.rows)._lower_triangular_solve(rhs)
A:sympy.matrices.matrices.(L, D)->(self.T * self).LDLdecomposition()
A:sympy.matrices.matrices.Z->diag(*diagvals)._diagonal_solve(Y)
A:sympy.matrices.matrices.rlo->a2idx(keys[0], self.rows)
A:sympy.matrices.matrices.clo->a2idx(keys[1], self.cols)
A:sympy.matrices.matrices.types->tuple([t if isinstance(t, type) else type(t) for t in types])
A:sympy.matrices.matrices.result->set()
A:sympy.matrices.matrices.(A, perm)->self.as_mutable().LUdecomposition_Simple(iszerofunc=_iszero)
A:sympy.matrices.matrices.b->rhs.permuteFwd(perm).as_mutable()
A:sympy.matrices.matrices.(combined, p)->self.as_mutable().LUdecomposition_Simple(iszerofunc=_iszero)
A:sympy.matrices.matrices.U->self.as_mutable().zeros(self.rows)
A:sympy.matrices.matrices.A->self.as_mutable().as_mutable()
A:sympy.matrices.matrices.DD->zeros(n, n)
A:sympy.matrices.matrices.out->sympy.matrices.MutableMatrix.zeros(n)
A:sympy.matrices.matrices.M->self.as_mutable().as_mutable()
A:sympy.matrices.matrices.X->self.as_mutable()._new(X)
A:sympy.matrices.matrices.self->self.as_mutable().as_mutable()
A:sympy.matrices.matrices.R[j, j]->tmp.norm()
A:sympy.matrices.matrices.R[i, j]->Q[:, i].dot(self[:, j])
A:sympy.matrices.matrices.(Q, R)->self.as_mutable().as_mutable().as_mutable().QRdecomposition()
A:sympy.matrices.matrices.prod->flatten((self * b).tolist())
A:sympy.matrices.matrices.norm->self.as_mutable().as_mutable().norm()
A:sympy.matrices.matrices.copy->self.as_mutable().as_mutable().copy()
A:sympy.matrices.matrices.(P, cells)->self.as_mutable().as_mutable().jordan_cells()
A:sympy.matrices.matrices.res->property(conjugate, None, None, 'By-element conjugation.').exp(l)
A:sympy.matrices.matrices.nex->eye(nr)
A:sympy.matrices.matrices.blocks->list(map(_jblock_exponential, cells))
A:sympy.matrices.matrices.eJ->diag(*blocks)
A:sympy.matrices.matrices.x->Dummy('x')
A:sympy.matrices.matrices.M[i, j]->cancel(D)
A:sympy.matrices.matrices.(l, u, p)->self.as_mutable().as_mutable().LUdecomposition()
A:sympy.matrices.matrices.big->dense.Matrix.hstack(self.as_mutable(), Matrix.eye(self.rows))
A:sympy.matrices.matrices.d->self.as_mutable().as_mutable().berkowitz_det()
A:sympy.matrices.matrices.zero->any((iszerofunc(ok[j, j]) for j in range(ok.rows)))
A:sympy.matrices.matrices.r[pivot, i]->simpfunc(r[pivot, i])
A:sympy.matrices.matrices.r[k, i]->simpfunc(r[k, i])
A:sympy.matrices.matrices.row_reduced->self.as_mutable().as_mutable().rref(iszerofunc=iszerofunc, simplify=simplify)
A:sympy.matrices.matrices.rank->len(row_reduced[-1])
A:sympy.matrices.matrices.(reduced, pivots)->self.as_mutable().as_mutable().rref(simplify=simpfunc)
A:sympy.matrices.matrices.line->pivots.index(i)
A:sympy.matrices.matrices.v->zeros(c * (c - 1) // 2, 1)
A:sympy.matrices.matrices.simplify->flags.get('simplify', True)
A:sympy.matrices.matrices.primitive->bool(flags.get('simplify', False))
A:sympy.matrices.matrices.chop->flags.pop('chop', False)
A:sympy.matrices.matrices.vlist->list(vlist.items())
A:sympy.matrices.matrices.basis->tmp.nullspace(simplify=simplify)
A:sympy.matrices.matrices.(c, p)->signsimp(b).as_content_primitive()
A:sympy.matrices.matrices.l->len(chain_vectors)
A:sympy.matrices.matrices.valmultpairs->(self.H * self).eigenvals()
A:sympy.matrices.matrices.singularvalues->self.as_mutable().as_mutable().singular_values()
A:sympy.matrices.matrices.self._eigenvects->self.as_mutable().as_mutable().eigenvects(simplify=True)
A:sympy.matrices.matrices.P->sympy.matrices.MutableMatrix.zeros(n)
A:sympy.matrices.matrices.D->diag(*diagvals)
A:sympy.matrices.matrices.self._is_symbolic->self.as_mutable().as_mutable().is_symbolic()
A:sympy.matrices.matrices.self._is_symmetric->self.as_mutable().as_mutable().is_symmetric()
A:sympy.matrices.matrices._eigenvects->self.as_mutable().as_mutable().eigenvects()
A:sympy.matrices.matrices.ev->self.as_mutable().as_mutable().eigenvals()
A:sympy.matrices.matrices.geometrical->len(vects)
A:sympy.matrices.matrices.I->sympy.matrices.MutableMatrix.eye(self.rows)
A:sympy.matrices.matrices.Ns_new->M_new.nullspace()
A:sympy.matrices.matrices.a_new->len(Ns_new)
A:sympy.matrices.matrices.S->sympy.core.singleton.S.col_join(old).col_join(old)
A:sympy.matrices.matrices.old->chain_vectors[k].transpose()
A:sympy.matrices.matrices.e0s->sympy.core.singleton.S.col_join(old).col_join(old).nullspace()
A:sympy.matrices.matrices.n_e0->len(e0s)
A:sympy.matrices.matrices.(P, Jcells)->self.as_mutable().as_mutable().jordan_cells()
A:sympy.matrices.matrices.J->diag(*Jcells)
A:sympy.matrices.matrices.jordan_block_structures->self.as_mutable().as_mutable()._jordan_block_structure()
A:sympy.matrices.matrices.block->self.as_mutable().as_mutable().jordan_cell(eigenval, s)
A:sympy.matrices.matrices.number_of_s_chains->len(s_chains)
A:sympy.matrices.matrices.lc->len(chain_vectors)
A:sympy.matrices.matrices.work->zeros(n)
A:sympy.matrices.matrices.newmat->sympy.matrices.MutableMatrix.zeros(self.rows, self.cols + mti.cols)
A:sympy.matrices.matrices.A_pinv->self.as_mutable().as_mutable().pinv()
A:sympy.matrices.matrices.w->symbols('w:{0}_:{1}'.format(rows, cols), cls=Dummy)
A:sympy.matrices.matrices.j->j.__index__().__index__()
sympy.DeferredVector(Symbol,NotIterable)
sympy.DeferredVector.__getitem__(self,i)
sympy.DeferredVector.__repr__(self)
sympy.DeferredVector.__str__(self)
sympy.MatrixBase(object)
sympy.MatrixBase.D(self)
sympy.MatrixBase.H(self)
sympy.MatrixBase.LDLdecomposition(self)
sympy.MatrixBase.LDLsolve(self,rhs)
sympy.MatrixBase.LUdecomposition(self,iszerofunc=_iszero)
sympy.MatrixBase.LUdecompositionFF(self)
sympy.MatrixBase.LUdecomposition_Simple(self,iszerofunc=_iszero)
sympy.MatrixBase.LUsolve(self,rhs,iszerofunc=_iszero)
sympy.MatrixBase.QRdecomposition(self)
sympy.MatrixBase.QRsolve(self,b)
sympy.MatrixBase.__add__(self,other)
sympy.MatrixBase.__array__(self)
sympy.MatrixBase.__div__(self,other)
sympy.MatrixBase.__getattr__(self,attr)
sympy.MatrixBase.__len__(self)
sympy.MatrixBase.__mathml__(self)
sympy.MatrixBase.__mul__(self,other)
sympy.MatrixBase.__neg__(self)
sympy.MatrixBase.__pow__(self,num)
sympy.MatrixBase.__radd__(self,other)
sympy.MatrixBase.__repr__(self)
sympy.MatrixBase.__rmul__(self,a)
sympy.MatrixBase.__rsub__(self,a)
sympy.MatrixBase.__str__(self)
sympy.MatrixBase.__sub__(self,a)
sympy.MatrixBase.__truediv__(self,other)
sympy.MatrixBase._diagonalize_clear_subproducts(self)
sympy.MatrixBase._format_str(self,printer=None)
sympy.MatrixBase._handle_creation_inputs(cls,*args,**kwargs)
sympy.MatrixBase._jordan_block_structure(self)
sympy.MatrixBase._jordan_split(self,algebraical,geometrical)
sympy.MatrixBase._setitem(self,key,value)
sympy.MatrixBase.add(self,b)
sympy.MatrixBase.adjoint(self)
sympy.MatrixBase.adjugate(self,method='berkowitz')
sympy.MatrixBase.atoms(self,*types)
sympy.MatrixBase.berkowitz(self)
sympy.MatrixBase.berkowitz_charpoly(self,x=Dummy('lambda'),simplify=_simplify)
sympy.MatrixBase.berkowitz_det(self)
sympy.MatrixBase.berkowitz_eigenvals(self,**flags)
sympy.MatrixBase.berkowitz_minors(self)
sympy.MatrixBase.cholesky(self)
sympy.MatrixBase.cholesky_solve(self,rhs)
sympy.MatrixBase.cofactor(self,i,j,method='berkowitz')
sympy.MatrixBase.cofactorMatrix(self,method='berkowitz')
sympy.MatrixBase.col_insert(self,pos,mti)
sympy.MatrixBase.col_join(self,bott)
sympy.MatrixBase.condition_number(self)
sympy.MatrixBase.conjugate(self)
sympy.MatrixBase.copy(self)
sympy.MatrixBase.cross(self,b)
sympy.MatrixBase.det(self,method='bareis')
sympy.MatrixBase.det_LU_decomposition(self)
sympy.MatrixBase.det_bareis(self)
sympy.MatrixBase.diagonal_solve(self,rhs)
sympy.MatrixBase.diagonalize(self,reals_only=False,sort=False,normalize=False)
sympy.MatrixBase.diff(self,*args)
sympy.MatrixBase.doit(self,**kwargs)
sympy.MatrixBase.dot(self,b)
sympy.MatrixBase.dual(self)
sympy.MatrixBase.eigenvals(self,**flags)
sympy.MatrixBase.eigenvects(self,**flags)
sympy.MatrixBase.evalf(self,prec=None,**options)
sympy.MatrixBase.exp(self)
sympy.MatrixBase.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.MatrixBase.extract(self,rowsList,colsList)
sympy.MatrixBase.free_symbols(self)
sympy.MatrixBase.get_diag_blocks(self)
sympy.MatrixBase.has(self,*patterns)
sympy.MatrixBase.hstack(cls,*args)
sympy.MatrixBase.integrate(self,*args)
sympy.MatrixBase.inv(self,method=None,**kwargs)
sympy.MatrixBase.inv_mod(self,m)
sympy.MatrixBase.inverse_ADJ(self,iszerofunc=_iszero)
sympy.MatrixBase.inverse_GE(self,iszerofunc=_iszero)
sympy.MatrixBase.inverse_LU(self,iszerofunc=_iszero)
sympy.MatrixBase.is_anti_symmetric(self,simplify=True)
sympy.MatrixBase.is_diagonal(self)
sympy.MatrixBase.is_diagonalizable(self,reals_only=False,clear_subproducts=True)
sympy.MatrixBase.is_hermitian(self)
sympy.MatrixBase.is_lower(self)
sympy.MatrixBase.is_lower_hessenberg(self)
sympy.MatrixBase.is_nilpotent(self)
sympy.MatrixBase.is_square(self)
sympy.MatrixBase.is_symbolic(self)
sympy.MatrixBase.is_symmetric(self,simplify=True)
sympy.MatrixBase.is_upper(self)
sympy.MatrixBase.is_upper_hessenberg(self)
sympy.MatrixBase.is_zero(self)
sympy.MatrixBase.jacobian(self,X)
sympy.MatrixBase.jordan_cell(self,eigenval,n)
sympy.MatrixBase.jordan_cells(self,calc_transformation=True)
sympy.MatrixBase.jordan_form(self,calc_transformation=True)
sympy.MatrixBase.key2bounds(self,keys)
sympy.MatrixBase.key2ij(self,key)
sympy.MatrixBase.limit(self,*args)
sympy.MatrixBase.lower_triangular_solve(self,rhs)
sympy.MatrixBase.minorEntry(self,i,j,method='berkowitz')
sympy.MatrixBase.minorMatrix(self,i,j)
sympy.MatrixBase.multiply(self,b)
sympy.MatrixBase.multiply_elementwise(self,b)
sympy.MatrixBase.norm(self,ord=None)
sympy.MatrixBase.normalized(self)
sympy.MatrixBase.nullspace(self,simplify=False)
sympy.MatrixBase.permuteBkwd(self,perm)
sympy.MatrixBase.permuteFwd(self,perm)
sympy.MatrixBase.pinv(self)
sympy.MatrixBase.pinv_solve(self,B,arbitrary_matrix=None)
sympy.MatrixBase.print_nonzero(self,symb='X')
sympy.MatrixBase.project(self,v)
sympy.MatrixBase.rank(self,iszerofunc=_iszero,simplify=False)
sympy.MatrixBase.replace(self,F,G,map=False)
sympy.MatrixBase.row_insert(self,pos,mti)
sympy.MatrixBase.row_join(self,rhs)
sympy.MatrixBase.rref(self,iszerofunc=_iszero,simplify=False)
sympy.MatrixBase.shape(self)
sympy.MatrixBase.simplify(self,ratio=1.7,measure=count_ops)
sympy.MatrixBase.singular_values(self)
sympy.MatrixBase.solve(self,rhs,method='GE')
sympy.MatrixBase.solve_least_squares(self,rhs,method='CH')
sympy.MatrixBase.subs(self,*args,**kwargs)
sympy.MatrixBase.table(self,printer,rowstart='[',rowend=']',rowsep='\n',colsep=',',align='right')
sympy.MatrixBase.trace(self)
sympy.MatrixBase.transpose(self)
sympy.MatrixBase.upper_triangular_solve(self,rhs)
sympy.MatrixBase.values(self)
sympy.MatrixBase.vec(self)
sympy.MatrixBase.vech(self,diagonal=True,check_symmetry=True)
sympy.MatrixBase.vstack(cls,*args)
sympy.MatrixError(Exception)
sympy.NonSquareMatrixError(ShapeError)
sympy.ShapeError(ValueError,MatrixError)
sympy._iszero(x)
sympy.a2idx(j,n=None)
sympy.classof(A,B)
sympy.matrices.matrices.DeferredVector(Symbol,NotIterable)
sympy.matrices.matrices.DeferredVector.__getitem__(self,i)
sympy.matrices.matrices.DeferredVector.__repr__(self)
sympy.matrices.matrices.DeferredVector.__str__(self)
sympy.matrices.matrices.MatrixBase(object)
sympy.matrices.matrices.MatrixBase.D(self)
sympy.matrices.matrices.MatrixBase.H(self)
sympy.matrices.matrices.MatrixBase.LDLdecomposition(self)
sympy.matrices.matrices.MatrixBase.LDLsolve(self,rhs)
sympy.matrices.matrices.MatrixBase.LUdecomposition(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.LUdecompositionFF(self)
sympy.matrices.matrices.MatrixBase.LUdecomposition_Simple(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.LUsolve(self,rhs,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.QRdecomposition(self)
sympy.matrices.matrices.MatrixBase.QRsolve(self,b)
sympy.matrices.matrices.MatrixBase.__add__(self,other)
sympy.matrices.matrices.MatrixBase.__array__(self)
sympy.matrices.matrices.MatrixBase.__div__(self,other)
sympy.matrices.matrices.MatrixBase.__getattr__(self,attr)
sympy.matrices.matrices.MatrixBase.__len__(self)
sympy.matrices.matrices.MatrixBase.__mathml__(self)
sympy.matrices.matrices.MatrixBase.__mul__(self,other)
sympy.matrices.matrices.MatrixBase.__neg__(self)
sympy.matrices.matrices.MatrixBase.__pow__(self,num)
sympy.matrices.matrices.MatrixBase.__radd__(self,other)
sympy.matrices.matrices.MatrixBase.__repr__(self)
sympy.matrices.matrices.MatrixBase.__rmul__(self,a)
sympy.matrices.matrices.MatrixBase.__rsub__(self,a)
sympy.matrices.matrices.MatrixBase.__str__(self)
sympy.matrices.matrices.MatrixBase.__sub__(self,a)
sympy.matrices.matrices.MatrixBase.__truediv__(self,other)
sympy.matrices.matrices.MatrixBase._diagonalize_clear_subproducts(self)
sympy.matrices.matrices.MatrixBase._format_str(self,printer=None)
sympy.matrices.matrices.MatrixBase._handle_creation_inputs(cls,*args,**kwargs)
sympy.matrices.matrices.MatrixBase._jordan_block_structure(self)
sympy.matrices.matrices.MatrixBase._jordan_split(self,algebraical,geometrical)
sympy.matrices.matrices.MatrixBase._setitem(self,key,value)
sympy.matrices.matrices.MatrixBase.add(self,b)
sympy.matrices.matrices.MatrixBase.adjoint(self)
sympy.matrices.matrices.MatrixBase.adjugate(self,method='berkowitz')
sympy.matrices.matrices.MatrixBase.atoms(self,*types)
sympy.matrices.matrices.MatrixBase.berkowitz(self)
sympy.matrices.matrices.MatrixBase.berkowitz_charpoly(self,x=Dummy('lambda'),simplify=_simplify)
sympy.matrices.matrices.MatrixBase.berkowitz_det(self)
sympy.matrices.matrices.MatrixBase.berkowitz_eigenvals(self,**flags)
sympy.matrices.matrices.MatrixBase.berkowitz_minors(self)
sympy.matrices.matrices.MatrixBase.cholesky(self)
sympy.matrices.matrices.MatrixBase.cholesky_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.cofactor(self,i,j,method='berkowitz')
sympy.matrices.matrices.MatrixBase.cofactorMatrix(self,method='berkowitz')
sympy.matrices.matrices.MatrixBase.col_insert(self,pos,mti)
sympy.matrices.matrices.MatrixBase.col_join(self,bott)
sympy.matrices.matrices.MatrixBase.condition_number(self)
sympy.matrices.matrices.MatrixBase.conjugate(self)
sympy.matrices.matrices.MatrixBase.copy(self)
sympy.matrices.matrices.MatrixBase.cross(self,b)
sympy.matrices.matrices.MatrixBase.det(self,method='bareis')
sympy.matrices.matrices.MatrixBase.det_LU_decomposition(self)
sympy.matrices.matrices.MatrixBase.det_bareis(self)
sympy.matrices.matrices.MatrixBase.diagonal_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.diagonalize(self,reals_only=False,sort=False,normalize=False)
sympy.matrices.matrices.MatrixBase.diff(self,*args)
sympy.matrices.matrices.MatrixBase.doit(self,**kwargs)
sympy.matrices.matrices.MatrixBase.dot(self,b)
sympy.matrices.matrices.MatrixBase.dual(self)
sympy.matrices.matrices.MatrixBase.eigenvals(self,**flags)
sympy.matrices.matrices.MatrixBase.eigenvects(self,**flags)
sympy.matrices.matrices.MatrixBase.evalf(self,prec=None,**options)
sympy.matrices.matrices.MatrixBase.exp(self)
sympy.matrices.matrices.MatrixBase.expand(self,deep=True,modulus=None,power_base=True,power_exp=True,mul=True,log=True,multinomial=True,basic=True,**hints)
sympy.matrices.matrices.MatrixBase.extract(self,rowsList,colsList)
sympy.matrices.matrices.MatrixBase.free_symbols(self)
sympy.matrices.matrices.MatrixBase.get_diag_blocks(self)
sympy.matrices.matrices.MatrixBase.has(self,*patterns)
sympy.matrices.matrices.MatrixBase.hstack(cls,*args)
sympy.matrices.matrices.MatrixBase.integrate(self,*args)
sympy.matrices.matrices.MatrixBase.inv(self,method=None,**kwargs)
sympy.matrices.matrices.MatrixBase.inv_mod(self,m)
sympy.matrices.matrices.MatrixBase.inverse_ADJ(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_GE(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.inverse_LU(self,iszerofunc=_iszero)
sympy.matrices.matrices.MatrixBase.is_anti_symmetric(self,simplify=True)
sympy.matrices.matrices.MatrixBase.is_diagonal(self)
sympy.matrices.matrices.MatrixBase.is_diagonalizable(self,reals_only=False,clear_subproducts=True)
sympy.matrices.matrices.MatrixBase.is_hermitian(self)
sympy.matrices.matrices.MatrixBase.is_lower(self)
sympy.matrices.matrices.MatrixBase.is_lower_hessenberg(self)
sympy.matrices.matrices.MatrixBase.is_nilpotent(self)
sympy.matrices.matrices.MatrixBase.is_square(self)
sympy.matrices.matrices.MatrixBase.is_symbolic(self)
sympy.matrices.matrices.MatrixBase.is_symmetric(self,simplify=True)
sympy.matrices.matrices.MatrixBase.is_upper(self)
sympy.matrices.matrices.MatrixBase.is_upper_hessenberg(self)
sympy.matrices.matrices.MatrixBase.is_zero(self)
sympy.matrices.matrices.MatrixBase.jacobian(self,X)
sympy.matrices.matrices.MatrixBase.jordan_cell(self,eigenval,n)
sympy.matrices.matrices.MatrixBase.jordan_cells(self,calc_transformation=True)
sympy.matrices.matrices.MatrixBase.jordan_form(self,calc_transformation=True)
sympy.matrices.matrices.MatrixBase.key2bounds(self,keys)
sympy.matrices.matrices.MatrixBase.key2ij(self,key)
sympy.matrices.matrices.MatrixBase.limit(self,*args)
sympy.matrices.matrices.MatrixBase.lower_triangular_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.minorEntry(self,i,j,method='berkowitz')
sympy.matrices.matrices.MatrixBase.minorMatrix(self,i,j)
sympy.matrices.matrices.MatrixBase.multiply(self,b)
sympy.matrices.matrices.MatrixBase.multiply_elementwise(self,b)
sympy.matrices.matrices.MatrixBase.norm(self,ord=None)
sympy.matrices.matrices.MatrixBase.normalized(self)
sympy.matrices.matrices.MatrixBase.nullspace(self,simplify=False)
sympy.matrices.matrices.MatrixBase.permuteBkwd(self,perm)
sympy.matrices.matrices.MatrixBase.permuteFwd(self,perm)
sympy.matrices.matrices.MatrixBase.pinv(self)
sympy.matrices.matrices.MatrixBase.pinv_solve(self,B,arbitrary_matrix=None)
sympy.matrices.matrices.MatrixBase.print_nonzero(self,symb='X')
sympy.matrices.matrices.MatrixBase.project(self,v)
sympy.matrices.matrices.MatrixBase.rank(self,iszerofunc=_iszero,simplify=False)
sympy.matrices.matrices.MatrixBase.replace(self,F,G,map=False)
sympy.matrices.matrices.MatrixBase.row_insert(self,pos,mti)
sympy.matrices.matrices.MatrixBase.row_join(self,rhs)
sympy.matrices.matrices.MatrixBase.rref(self,iszerofunc=_iszero,simplify=False)
sympy.matrices.matrices.MatrixBase.shape(self)
sympy.matrices.matrices.MatrixBase.simplify(self,ratio=1.7,measure=count_ops)
sympy.matrices.matrices.MatrixBase.singular_values(self)
sympy.matrices.matrices.MatrixBase.solve(self,rhs,method='GE')
sympy.matrices.matrices.MatrixBase.solve_least_squares(self,rhs,method='CH')
sympy.matrices.matrices.MatrixBase.subs(self,*args,**kwargs)
sympy.matrices.matrices.MatrixBase.table(self,printer,rowstart='[',rowend=']',rowsep='\n',colsep=',',align='right')
sympy.matrices.matrices.MatrixBase.trace(self)
sympy.matrices.matrices.MatrixBase.transpose(self)
sympy.matrices.matrices.MatrixBase.upper_triangular_solve(self,rhs)
sympy.matrices.matrices.MatrixBase.values(self)
sympy.matrices.matrices.MatrixBase.vec(self)
sympy.matrices.matrices.MatrixBase.vech(self,diagonal=True,check_symmetry=True)
sympy.matrices.matrices.MatrixBase.vstack(cls,*args)
sympy.matrices.matrices.MatrixError(Exception)
sympy.matrices.matrices.NonSquareMatrixError(ShapeError)
sympy.matrices.matrices.ShapeError(ValueError,MatrixError)
sympy.matrices.matrices._iszero(x)
sympy.matrices.matrices.a2idx(j,n=None)
sympy.matrices.matrices.classof(A,B)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/densesolve.py----------------------------------------
A:sympy.matrices.densesolve.result_matlist->row_echelon(result_matlist, K)
A:sympy.matrices.densesolve.nrow->len(copy_upper_triangle)
A:sympy.matrices.densesolve.new_matlist->copy.deepcopy(matlist)
A:sympy.matrices.densesolve.L->eye(nrow, K)
A:sympy.matrices.densesolve.L[i][j]->int(sqrt(new_matlist[i][j] - a))
A:sympy.matrices.densesolve.copy_matlist->copy.deepcopy(matlist)
A:sympy.matrices.densesolve.(lower_triangle, upper_triangle)->LU(copy_matlist, K, reverse=1)
A:sympy.matrices.densesolve.augmented->augment(new_matlist, constant, K)
A:sympy.matrices.densesolve.solution->rref(augmented, K)
A:sympy.matrices.densesolve.(L, U)->LU(new_matlist, K)
A:sympy.matrices.densesolve.(L, Lstar)->cholesky(new_matlist, K)
A:sympy.matrices.densesolve.copy_lower_triangle->copy.deepcopy(lower_triangle)
A:sympy.matrices.densesolve.copy_upper_triangle->copy.deepcopy(upper_triangle)
sympy.densesolve.LDL(matlist,K)
sympy.densesolve.LU(matlist,K,reverse=0)
sympy.densesolve.LU_solve(matlist,variable,constant,K)
sympy.densesolve.backward_substitution(upper_triangle,variable,constant,K)
sympy.densesolve.cholesky(matlist,K)
sympy.densesolve.cholesky_solve(matlist,variable,constant,K)
sympy.densesolve.forward_substitution(lower_triangle,variable,constant,K)
sympy.densesolve.lower_triangle(matlist,K)
sympy.densesolve.row_echelon(matlist,K)
sympy.densesolve.rref(matlist,K)
sympy.densesolve.rref_solve(matlist,variable,constant,K)
sympy.densesolve.upper_triangle(matlist,K)
sympy.matrices.densesolve.LDL(matlist,K)
sympy.matrices.densesolve.LU(matlist,K,reverse=0)
sympy.matrices.densesolve.LU_solve(matlist,variable,constant,K)
sympy.matrices.densesolve.backward_substitution(upper_triangle,variable,constant,K)
sympy.matrices.densesolve.cholesky(matlist,K)
sympy.matrices.densesolve.cholesky_solve(matlist,variable,constant,K)
sympy.matrices.densesolve.forward_substitution(lower_triangle,variable,constant,K)
sympy.matrices.densesolve.lower_triangle(matlist,K)
sympy.matrices.densesolve.row_echelon(matlist,K)
sympy.matrices.densesolve.rref(matlist,K)
sympy.matrices.densesolve.rref_solve(matlist,variable,constant,K)
sympy.matrices.densesolve.upper_triangle(matlist,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/densetools.py----------------------------------------
sympy.densetools.augment(matlist,column,K)
sympy.densetools.col(matlist,i)
sympy.densetools.conjugate(matlist,K)
sympy.densetools.conjugate_row(row,K)
sympy.densetools.conjugate_transpose(matlist,K)
sympy.densetools.eye(n,K)
sympy.densetools.isHermitian(matlist,K)
sympy.densetools.row(matlist,i)
sympy.densetools.rowadd(matlist,index1,index2,k,K)
sympy.densetools.rowmul(matlist,index,k,K)
sympy.densetools.rowswap(matlist,index1,index2,K)
sympy.densetools.trace(matlist,K)
sympy.densetools.transpose(matlist,K)
sympy.matrices.densetools.augment(matlist,column,K)
sympy.matrices.densetools.col(matlist,i)
sympy.matrices.densetools.conjugate(matlist,K)
sympy.matrices.densetools.conjugate_row(row,K)
sympy.matrices.densetools.conjugate_transpose(matlist,K)
sympy.matrices.densetools.eye(n,K)
sympy.matrices.densetools.isHermitian(matlist,K)
sympy.matrices.densetools.row(matlist,i)
sympy.matrices.densetools.rowadd(matlist,index1,index2,k,K)
sympy.matrices.densetools.rowmul(matlist,index,k,K)
sympy.matrices.densetools.rowswap(matlist,index1,index2,K)
sympy.matrices.densetools.trace(matlist,K)
sympy.matrices.densetools.transpose(matlist,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/sparsetools.py----------------------------------------
A:sympy.matrices.sparsetools.indices->slice(IA[i], IA[i + 1])
sympy.matrices.sparsetools._csrtodok(csr)
sympy.matrices.sparsetools._doktocsr(dok)
sympy.sparsetools._csrtodok(csr)
sympy.sparsetools._doktocsr(dok)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/densearith.py----------------------------------------
sympy.densearith.add(matlist1,matlist2,K)
sympy.densearith.addrow(row1,row2,K)
sympy.densearith.mulmatmat(matlist1,matlist2,K)
sympy.densearith.mulmatscaler(matlist,scaler,K)
sympy.densearith.mulrowcol(row,col,K)
sympy.densearith.mulrowscaler(row,scaler,K)
sympy.densearith.negate(matlist,K)
sympy.densearith.negaterow(row,K)
sympy.densearith.sub(matlist1,matlist2,K)
sympy.matrices.densearith.add(matlist1,matlist2,K)
sympy.matrices.densearith.addrow(row1,row2,K)
sympy.matrices.densearith.mulmatmat(matlist1,matlist2,K)
sympy.matrices.densearith.mulmatscaler(matlist,scaler,K)
sympy.matrices.densearith.mulrowcol(row,col,K)
sympy.matrices.densearith.mulrowscaler(row,scaler,K)
sympy.matrices.densearith.negate(matlist,K)
sympy.matrices.densearith.negaterow(row,K)
sympy.matrices.densearith.sub(matlist1,matlist2,K)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_interactions.py----------------------------------------
A:sympy.matrices.tests.test_interactions.SM->MatrixSymbol('X', 3, 3)
A:sympy.matrices.tests.test_interactions.MM->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_interactions.IM->ImmutableMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_interactions.meye->eye(3)
A:sympy.matrices.tests.test_interactions.imeye->ImmutableMatrix(eye(3))
A:sympy.matrices.tests.test_interactions.ideye->Identity(3)
A:sympy.matrices.tests.test_interactions.(a, b, c)->symbols('a,b,c')
A:sympy.matrices.tests.test_interactions.X->MatrixSymbol('X', 3, 3)
A:sympy.matrices.tests.test_interactions.A->Matrix(3, 3, range(9))
A:sympy.matrices.tests.test_interactions.B->ImmutableMatrix(3, 3, range(9))
A:sympy.matrices.tests.test_interactions.C->MatrixSymbol('C', 3, 3)
sympy.matrices.tests.test_interactions.test_IM_MM()
sympy.matrices.tests.test_interactions.test_ME_MM()
sympy.matrices.tests.test_interactions.test_classof()
sympy.matrices.tests.test_interactions.test_equality()
sympy.matrices.tests.test_interactions.test_indexing_interactions()
sympy.matrices.tests.test_interactions.test_matrix_symbol_MM()
sympy.tests.test_interactions.test_IM_MM()
sympy.tests.test_interactions.test_ME_MM()
sympy.tests.test_interactions.test_classof()
sympy.tests.test_interactions.test_equality()
sympy.tests.test_interactions.test_indexing_interactions()
sympy.tests.test_interactions.test_matrix_symbol_MM()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_densesolve.py----------------------------------------
sympy.matrices.tests.test_densesolve.test_LU_solve()
sympy.matrices.tests.test_densesolve.test_cholesky_solve()
sympy.matrices.tests.test_densesolve.test_rref_solve()
sympy.tests.test_densesolve.test_LU_solve()
sympy.tests.test_densesolve.test_cholesky_solve()
sympy.tests.test_densesolve.test_rref_solve()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_matrices.py----------------------------------------
A:sympy.matrices.tests.test_matrices.m->Matrix([[1, 2], [x, 1 - 1 / x]])
A:sympy.matrices.tests.test_matrices.v->Matrix([cos(x), sin(x)])
A:sympy.matrices.tests.test_matrices.n->Matrix(3, 3, range(1, 10))
A:sympy.matrices.tests.test_matrices.a->Matrix([[1, I], [-I, 1]])
A:sympy.matrices.tests.test_matrices.b->Matrix([S(1) / 2, 1 * I, 1])
A:sympy.matrices.tests.test_matrices.h->matrix_multiply_elementwise(a, c)
A:sympy.matrices.tests.test_matrices.A->Matrix([[1, 0], [0, 0]])
A:sympy.matrices.tests.test_matrices.c->Matrix([-1, -1, -1])
A:sympy.matrices.tests.test_matrices.M->Matrix(2, 2, lambda i, j: F(i + j))
A:sympy.matrices.tests.test_matrices.B->Matrix([3, 1])
A:sympy.matrices.tests.test_matrices.m0->Matrix([[x * (x + y), 2], [(x + y) * y * x, x * (y + x * (x + y))]])
A:sympy.matrices.tests.test_matrices.m1->Matrix(1, 2, [1, 2])
A:sympy.matrices.tests.test_matrices.m2->Matrix(1, 2, [2, 3])
A:sympy.matrices.tests.test_matrices.m[2:4, 2:4]->eye(2)
A:sympy.matrices.tests.test_matrices.m[:2, :2]->eye(2)
A:sympy.matrices.tests.test_matrices.m[:, 0]->Matrix(4, 1, (1, 2, 3, 4))
A:sympy.matrices.tests.test_matrices.m[:, :]->zeros(4)
A:sympy.matrices.tests.test_matrices.S->Matrix(2, 2, lambda i, j: F(i + j)).copy()
A:sympy.matrices.tests.test_matrices.testmat->Matrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])
A:sympy.matrices.tests.test_matrices.(L, U, p)->Matrix(2, 2, lambda i, j: F(i + j)).LUdecomposition()
A:sympy.matrices.tests.test_matrices.mL->Matrix(((1, 0, 0), (2, 3, 0)))
A:sympy.matrices.tests.test_matrices.mU->Matrix(((1, 2, 3), (0, 4, 5)))
A:sympy.matrices.tests.test_matrices.(P, L, Dee, U)->Matrix(2, 2, lambda i, j: F(i + j)).LUdecompositionFF()
A:sympy.matrices.tests.test_matrices.x->Symbol('x', real=True)
A:sympy.matrices.tests.test_matrices.soln->Matrix([[1, 0], [0, 0]]).LDLsolve(b)
A:sympy.matrices.tests.test_matrices.Ainv->Matrix([[1, 0], [0, 0]]).inv()
A:sympy.matrices.tests.test_matrices.Ai->Matrix(2, 2, [1, 1, 0, 1])
A:sympy.matrices.tests.test_matrices.v1->Matrix(1, 3, [1, 2, 3])
A:sympy.matrices.tests.test_matrices.v2->Matrix(1, 3, [3, 4, 5])
A:sympy.matrices.tests.test_matrices.test->Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_matrices.L->Matrix(1, 2, [x, x ** 2 * y ** 3])
A:sympy.matrices.tests.test_matrices.ans->Matrix([[0, 1], [-I, 0]])
A:sympy.matrices.tests.test_matrices.(Q, S)->Matrix([[1, 0], [0, 0]]).QRdecomposition()
A:sympy.matrices.tests.test_matrices.(Q, R)->Matrix([[1, 0], [0, 0]]).QRdecomposition()
A:sympy.matrices.tests.test_matrices.(out, tmp)->Matrix(2, 2, lambda i, j: F(i + j)).rref()
A:sympy.matrices.tests.test_matrices.basis->Matrix(2, 2, lambda i, j: F(i + j)).nullspace()
A:sympy.matrices.tests.test_matrices.r->Matrix(2, 2, lambda i, j: F(i + j)).eigenvects()
A:sympy.matrices.tests.test_matrices.eps->Symbol('eps', real=True)
A:sympy.matrices.tests.test_matrices.M._eigenvects->Matrix(2, 2, lambda i, j: F(i + j)).eigenvects(simplify=True)
A:sympy.matrices.tests.test_matrices.nevals->list(sorted(m.eigenvals(rational=False).keys()))
A:sympy.matrices.tests.test_matrices.sevals->list(sorted(evals.keys()))
A:sympy.matrices.tests.test_matrices.(f, n)->symbols('f, n')
A:sympy.matrices.tests.test_matrices.r1->Matrix(2, 2, lambda i, j: F(i + j)).row(0)
A:sympy.matrices.tests.test_matrices.c1->Matrix(2, 2, lambda i, j: F(i + j)).col(0)
A:sympy.matrices.tests.test_matrices.index1->Index1()
A:sympy.matrices.tests.test_matrices.index2->Index2()
A:sympy.matrices.tests.test_matrices.(rho, phi)->symbols('rho,phi')
A:sympy.matrices.tests.test_matrices.X->Matrix([[exp(x + y + z), exp(x + y + z)], [exp(x + y + z), exp(x + y + z)]])
A:sympy.matrices.tests.test_matrices.Y->Matrix([[x, y], [x, z]])
A:sympy.matrices.tests.test_matrices.J->X_slice.jacobian(Y_slice)
A:sympy.matrices.tests.test_matrices.g->g.applyfunc(trigsimp).applyfunc(trigsimp)
A:sympy.matrices.tests.test_matrices.m_vec->Matrix([[1, 2], [x, 1 - 1 / x]]).vec()
A:sympy.matrices.tests.test_matrices.m_vech->Matrix([[1, 2], [x, 1 - 1 / x]]).vech(diagonal=False, check_symmetry=False)
A:sympy.matrices.tests.test_matrices.(P, D)->Matrix([[1, 2], [x, 1 - 1 / x]]).diagonalize(True)
A:sympy.matrices.tests.test_matrices.(a, b, c, d)->symbols('a b c d')
A:sympy.matrices.tests.test_matrices.Jmust->Matrix(4, 4, [1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 4, 1, 0, 0, 0, 4])
A:sympy.matrices.tests.test_matrices.(P, J)->Matrix([[1, 2], [x, 1 - 1 / x]]).jordan_form()
A:sympy.matrices.tests.test_matrices.(P, Jcells)->Matrix([[1, 2], [x, 1 - 1 / x]]).jordan_cells()
A:sympy.matrices.tests.test_matrices.(UA, K_i, K_w)->symbols('UA K_i K_w')
A:sympy.matrices.tests.test_matrices.charpoly->Matrix([[1, 0], [0, 0]]).berkowitz_charpoly(x)
A:sympy.matrices.tests.test_matrices.m_exp->Matrix([[exp(3), -4 * exp(-2) / 5 + 4 * exp(3) / 5], [0, exp(-2)]])
A:sympy.matrices.tests.test_matrices.(L, D)->Matrix([[1, 0], [0, 0]]).LDLdecomposition()
A:sympy.matrices.tests.test_matrices.C->SparseMatrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.matrices.tests.test_matrices.D->Matrix(((1, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.matrices.tests.test_matrices.alpha->Symbol('alpha', real=True)
A:sympy.matrices.tests.test_matrices.d->Matrix([3, 2, I])
A:sympy.matrices.tests.test_matrices.e->Matrix([Integer(100.0), Rational(1, 100.0), 1])
A:sympy.matrices.tests.test_matrices.vals->Matrix([[1, 0], [0, 0]]).singular_values()
A:sympy.matrices.tests.test_matrices.Mc->Matrix(2, 2, lambda i, j: F(i + j)).condition_number()
A:sympy.matrices.tests.test_matrices.r4->Matrix([[4, 4, 4]])
A:sympy.matrices.tests.test_matrices.c4->Matrix([4, 4, 4])
A:sympy.matrices.tests.test_matrices.i->Matrix([[1, 0], [0, 1]])
A:sympy.matrices.tests.test_matrices.z->Matrix([[0, 0], [0, 0]])
A:sympy.matrices.tests.test_matrices.r3_plus->rot_axis3(theta)
A:sympy.matrices.tests.test_matrices.r3_minus->rot_axis3(-theta)
A:sympy.matrices.tests.test_matrices.r2_plus->rot_axis2(theta)
A:sympy.matrices.tests.test_matrices.r2_minus->rot_axis2(-theta)
A:sympy.matrices.tests.test_matrices.r1_plus->rot_axis1(theta)
A:sympy.matrices.tests.test_matrices.r1_minus->rot_axis1(-theta)
A:sympy.matrices.tests.test_matrices.s->set([cls.eye(1), cls.eye(1)])
A:sympy.matrices.tests.test_matrices.s[1, 1:]->Matrix([[5, 6]])
A:sympy.matrices.tests.test_matrices.s[0, 0]->SparseMatrix([1, 1, 1])
A:sympy.matrices.tests.test_matrices.(x, y)->symbols(u('x y'))
A:sympy.matrices.tests.test_matrices.(B_x, B_y, B_z, E_x, E_y, E_z)->symbols('B_x B_y B_z E_x E_y E_z', real=True)
A:sympy.matrices.tests.test_matrices.F->Matrix(((0, E_x, E_y, E_z), (-E_x, 0, B_z, -B_y), (-E_y, -B_z, 0, B_x), (-E_z, B_y, -B_x, 0)))
A:sympy.matrices.tests.test_matrices.Fd->Matrix(((0, -B_x, -B_y, -B_z), (B_x, 0, E_z, -E_y), (B_y, -E_z, 0, E_x), (B_z, E_y, -E_x, 0)))
A:sympy.matrices.tests.test_matrices.(P, Q)->Matrix([[1, 0], [0, 0]]).diagonalize(normalize=True, sort=True)
A:sympy.matrices.tests.test_matrices.col->Matrix([-2, 4, -2])
A:sympy.matrices.tests.test_matrices.p->zeros(3)
A:sympy.matrices.tests.test_matrices.(F, G)->symbols('F, G', cls=Function)
A:sympy.matrices.tests.test_matrices.K->Matrix(2, 2, [(G(0), {F(0): G(0)}), (G(1), {F(1): G(1)}), (G(1), {F(1): G(1)}), (G(2), {F(2): G(2)})])
A:sympy.matrices.tests.test_matrices.N->Matrix(2, 2, lambda i, j: F(i + j)).replace(F, G, True)
A:sympy.matrices.tests.test_matrices.A1->Matrix([[a, b], [c, d]])
A:sympy.matrices.tests.test_matrices.A_pinv->Matrix([[1, 0], [0, 0]]).pinv()
A:sympy.matrices.tests.test_matrices.solution->Matrix([[1, 0], [0, 0]]).pinv_solve(B)
A:sympy.matrices.tests.test_matrices.w1->Matrix([[1, 0], [0, 0]]).pinv_solve(B).atoms(Symbol).pop()
sympy.matrices.tests.test_matrices.test_DeferredVector()
sympy.matrices.tests.test_matrices.test_DeferredVector_Matrix()
sympy.matrices.tests.test_matrices.test_DeferredVector_not_iterable()
sympy.matrices.tests.test_matrices.test_GramSchmidt()
sympy.matrices.tests.test_matrices.test_LDLdecomposition()
sympy.matrices.tests.test_matrices.test_LDLsolve()
sympy.matrices.tests.test_matrices.test_LUdecomp()
sympy.matrices.tests.test_matrices.test_LUsolve()
sympy.matrices.tests.test_matrices.test_Matrix_berkowitz_charpoly()
sympy.matrices.tests.test_matrices.test_QR()
sympy.matrices.tests.test_matrices.test_QR_non_square()
sympy.matrices.tests.test_matrices.test_QRsolve()
sympy.matrices.tests.test_matrices.test_addition()
sympy.matrices.tests.test_matrices.test_adjoint()
sympy.matrices.tests.test_matrices.test_anti_symmetric()
sympy.matrices.tests.test_matrices.test_applyfunc()
sympy.matrices.tests.test_matrices.test_args()
sympy.matrices.tests.test_matrices.test_as_mutable()
sympy.matrices.tests.test_matrices.test_atoms()
sympy.matrices.tests.test_matrices.test_berkowitz_minors()
sympy.matrices.tests.test_matrices.test_casoratian()
sympy.matrices.tests.test_matrices.test_cholesky()
sympy.matrices.tests.test_matrices.test_cholesky_solve()
sympy.matrices.tests.test_matrices.test_col_insert()
sympy.matrices.tests.test_matrices.test_col_join()
sympy.matrices.tests.test_matrices.test_col_row_op()
sympy.matrices.tests.test_matrices.test_condition_number()
sympy.matrices.tests.test_matrices.test_conj_dirac()
sympy.matrices.tests.test_matrices.test_conjugate()
sympy.matrices.tests.test_matrices.test_copyin()
sympy.matrices.tests.test_matrices.test_creation()
sympy.matrices.tests.test_matrices.test_creation_args()
sympy.matrices.tests.test_matrices.test_cross()
sympy.matrices.tests.test_matrices.test_det_LU_decomposition()
sympy.matrices.tests.test_matrices.test_determinant()
sympy.matrices.tests.test_matrices.test_diag()
sympy.matrices.tests.test_matrices.test_diagonal_solve()
sympy.matrices.tests.test_matrices.test_diagonal_symmetrical()
sympy.matrices.tests.test_matrices.test_diagonalization()
sympy.matrices.tests.test_matrices.test_diff()
sympy.matrices.tests.test_matrices.test_division()
sympy.matrices.tests.test_matrices.test_dot()
sympy.matrices.tests.test_matrices.test_dual()
sympy.matrices.tests.test_matrices.test_eigen()
sympy.matrices.tests.test_matrices.test_eigen_vects()
sympy.matrices.tests.test_matrices.test_empty_zeros()
sympy.matrices.tests.test_matrices.test_equality()
sympy.matrices.tests.test_matrices.test_errors()
sympy.matrices.tests.test_matrices.test_evalf()
sympy.matrices.tests.test_matrices.test_exp()
sympy.matrices.tests.test_matrices.test_expand()
sympy.matrices.tests.test_matrices.test_extract()
sympy.matrices.tests.test_matrices.test_fancy_index_matrix()
sympy.matrices.tests.test_matrices.test_free_symbols()
sympy.matrices.tests.test_matrices.test_from_ndarray()
sympy.matrices.tests.test_matrices.test_get_diag_blocks1()
sympy.matrices.tests.test_matrices.test_get_diag_blocks2()
sympy.matrices.tests.test_matrices.test_getattr()
sympy.matrices.tests.test_matrices.test_has()
sympy.matrices.tests.test_matrices.test_hash()
sympy.matrices.tests.test_matrices.test_hermitian()
sympy.matrices.tests.test_matrices.test_hessenberg()
sympy.matrices.tests.test_matrices.test_integrate()
sympy.matrices.tests.test_matrices.test_inv_block()
sympy.matrices.tests.test_matrices.test_inv_iszerofunc()
sympy.matrices.tests.test_matrices.test_inverse()
sympy.matrices.tests.test_matrices.test_invertible_check()
sympy.matrices.tests.test_matrices.test_is_Identity()
sympy.matrices.tests.test_matrices.test_is_lower()
sympy.matrices.tests.test_matrices.test_is_nilpotent()
sympy.matrices.tests.test_matrices.test_is_symbolic()
sympy.matrices.tests.test_matrices.test_is_upper()
sympy.matrices.tests.test_matrices.test_is_zero()
sympy.matrices.tests.test_matrices.test_issue_3749()
sympy.matrices.tests.test_matrices.test_issue_3950()
sympy.matrices.tests.test_matrices.test_issue_3959()
sympy.matrices.tests.test_matrices.test_issue_3979()
sympy.matrices.tests.test_matrices.test_issue_3981()
sympy.matrices.tests.test_matrices.test_issue_4564()
sympy.matrices.tests.test_matrices.test_issue_5320()
sympy.matrices.tests.test_matrices.test_issue_5321()
sympy.matrices.tests.test_matrices.test_issue_5964()
sympy.matrices.tests.test_matrices.test_issue_7201()
sympy.matrices.tests.test_matrices.test_issue_7604()
sympy.matrices.tests.test_matrices.test_jacobian2()
sympy.matrices.tests.test_matrices.test_jacobian_hessian()
sympy.matrices.tests.test_matrices.test_jacobian_metrics()
sympy.matrices.tests.test_matrices.test_jordan_form()
sympy.matrices.tests.test_matrices.test_len()
sympy.matrices.tests.test_matrices.test_limit()
sympy.matrices.tests.test_matrices.test_lower_triangular_solve()
sympy.matrices.tests.test_matrices.test_matrix_inverse_mod()
sympy.matrices.tests.test_matrices.test_matrix_norm()
sympy.matrices.tests.test_matrices.test_multiplication()
sympy.matrices.tests.test_matrices.test_nonvectorJacobian()
sympy.matrices.tests.test_matrices.test_normalize_sort_diogonalization()
sympy.matrices.tests.test_matrices.test_normalized()
sympy.matrices.tests.test_matrices.test_nullspace()
sympy.matrices.tests.test_matrices.test_pinv()
sympy.matrices.tests.test_matrices.test_pinv_rank_deficient()
sympy.matrices.tests.test_matrices.test_pinv_solve()
sympy.matrices.tests.test_matrices.test_power()
sympy.matrices.tests.test_matrices.test_print_nonzero()
sympy.matrices.tests.test_matrices.test_random()
sympy.matrices.tests.test_matrices.test_rank()
sympy.matrices.tests.test_matrices.test_replace()
sympy.matrices.tests.test_matrices.test_replace_map()
sympy.matrices.tests.test_matrices.test_reshape()
sympy.matrices.tests.test_matrices.test_rotation_matrices()
sympy.matrices.tests.test_matrices.test_row_insert()
sympy.matrices.tests.test_matrices.test_shape()
sympy.matrices.tests.test_matrices.test_simplify()
sympy.matrices.tests.test_matrices.test_simplify_immutable()
sympy.matrices.tests.test_matrices.test_singular_values()
sympy.matrices.tests.test_matrices.test_slice_issue_2884()
sympy.matrices.tests.test_matrices.test_slice_issue_3401()
sympy.matrices.tests.test_matrices.test_slicing()
sympy.matrices.tests.test_matrices.test_submatrix_assignment()
sympy.matrices.tests.test_matrices.test_subs()
sympy.matrices.tests.test_matrices.test_sum()
sympy.matrices.tests.test_matrices.test_tolist()
sympy.matrices.tests.test_matrices.test_trace()
sympy.matrices.tests.test_matrices.test_transpose()
sympy.matrices.tests.test_matrices.test_upper_triangular_solve()
sympy.matrices.tests.test_matrices.test_util()
sympy.matrices.tests.test_matrices.test_vec()
sympy.matrices.tests.test_matrices.test_vech()
sympy.matrices.tests.test_matrices.test_vech_errors()
sympy.matrices.tests.test_matrices.test_wronskian()
sympy.matrices.tests.test_matrices.test_zero_dimension_multiply()
sympy.matrices.tests.test_matrices.test_zeros_eye()
sympy.matrices.tests.test_matrices.test_zeros_ones_fill()
sympy.matrices.tests.test_matrices.test_zip_row_op()
sympy.tests.test_test_DeferredVector()
sympy.tests.test_test_DeferredVector_Matrix()
sympy.tests.test_test_DeferredVector_not_iterable()
sympy.tests.test_test_GramSchmidt()
sympy.tests.test_test_LDLdecomposition()
sympy.tests.test_test_LDLsolve()
sympy.tests.test_test_LUdecomp()
sympy.tests.test_test_LUsolve()
sympy.tests.test_test_Matrix_berkowitz_charpoly()
sympy.tests.test_test_QR()
sympy.tests.test_test_QR_non_square()
sympy.tests.test_test_QRsolve()
sympy.tests.test_test_addition()
sympy.tests.test_test_adjoint()
sympy.tests.test_test_anti_symmetric()
sympy.tests.test_test_applyfunc()
sympy.tests.test_test_args()
sympy.tests.test_test_as_mutable()
sympy.tests.test_test_atoms()
sympy.tests.test_test_berkowitz_minors()
sympy.tests.test_test_casoratian()
sympy.tests.test_test_cholesky()
sympy.tests.test_test_cholesky_solve()
sympy.tests.test_test_col_insert()
sympy.tests.test_test_col_join()
sympy.tests.test_test_col_row_op()
sympy.tests.test_test_condition_number()
sympy.tests.test_test_conj_dirac()
sympy.tests.test_test_conjugate()
sympy.tests.test_test_copyin()
sympy.tests.test_test_creation()
sympy.tests.test_test_creation_args()
sympy.tests.test_test_cross()
sympy.tests.test_test_det_LU_decomposition()
sympy.tests.test_test_determinant()
sympy.tests.test_test_diag()
sympy.tests.test_test_diagonal_solve()
sympy.tests.test_test_diagonal_symmetrical()
sympy.tests.test_test_diagonalization()
sympy.tests.test_test_diff()
sympy.tests.test_test_division()
sympy.tests.test_test_dot()
sympy.tests.test_test_dual()
sympy.tests.test_test_eigen()
sympy.tests.test_test_eigen_vects()
sympy.tests.test_test_empty_zeros()
sympy.tests.test_test_equality()
sympy.tests.test_test_errors()
sympy.tests.test_test_evalf()
sympy.tests.test_test_exp()
sympy.tests.test_test_expand()
sympy.tests.test_test_extract()
sympy.tests.test_test_fancy_index_matrix()
sympy.tests.test_test_free_symbols()
sympy.tests.test_test_from_ndarray()
sympy.tests.test_test_get_diag_blocks1()
sympy.tests.test_test_get_diag_blocks2()
sympy.tests.test_test_getattr()
sympy.tests.test_test_has()
sympy.tests.test_test_hash()
sympy.tests.test_test_hermitian()
sympy.tests.test_test_hessenberg()
sympy.tests.test_test_integrate()
sympy.tests.test_test_inv_block()
sympy.tests.test_test_inv_iszerofunc()
sympy.tests.test_test_inverse()
sympy.tests.test_test_invertible_check()
sympy.tests.test_test_is_Identity()
sympy.tests.test_test_is_lower()
sympy.tests.test_test_is_nilpotent()
sympy.tests.test_test_is_symbolic()
sympy.tests.test_test_is_upper()
sympy.tests.test_test_is_zero()
sympy.tests.test_test_issue_3749()
sympy.tests.test_test_issue_3950()
sympy.tests.test_test_issue_3959()
sympy.tests.test_test_issue_3979()
sympy.tests.test_test_issue_3981()
sympy.tests.test_test_issue_4564()
sympy.tests.test_test_issue_5320()
sympy.tests.test_test_issue_5321()
sympy.tests.test_test_issue_5964()
sympy.tests.test_test_issue_7201()
sympy.tests.test_test_issue_7604()
sympy.tests.test_test_jacobian2()
sympy.tests.test_test_jacobian_hessian()
sympy.tests.test_test_jacobian_metrics()
sympy.tests.test_test_jordan_form()
sympy.tests.test_test_len()
sympy.tests.test_test_limit()
sympy.tests.test_test_lower_triangular_solve()
sympy.tests.test_test_matrix_inverse_mod()
sympy.tests.test_test_matrix_norm()
sympy.tests.test_test_multiplication()
sympy.tests.test_test_nonvectorJacobian()
sympy.tests.test_test_normalize_sort_diogonalization()
sympy.tests.test_test_normalized()
sympy.tests.test_test_nullspace()
sympy.tests.test_test_pinv()
sympy.tests.test_test_pinv_rank_deficient()
sympy.tests.test_test_pinv_solve()
sympy.tests.test_test_power()
sympy.tests.test_test_print_nonzero()
sympy.tests.test_test_random()
sympy.tests.test_test_rank()
sympy.tests.test_test_replace()
sympy.tests.test_test_replace_map()
sympy.tests.test_test_reshape()
sympy.tests.test_test_rotation_matrices()
sympy.tests.test_test_row_insert()
sympy.tests.test_test_shape()
sympy.tests.test_test_simplify()
sympy.tests.test_test_simplify_immutable()
sympy.tests.test_test_singular_values()
sympy.tests.test_test_slice_issue_2884()
sympy.tests.test_test_slice_issue_3401()
sympy.tests.test_test_slicing()
sympy.tests.test_test_submatrix_assignment()
sympy.tests.test_test_subs()
sympy.tests.test_test_sum()
sympy.tests.test_test_tolist()
sympy.tests.test_test_trace()
sympy.tests.test_test_transpose()
sympy.tests.test_test_upper_triangular_solve()
sympy.tests.test_test_util()
sympy.tests.test_test_vec()
sympy.tests.test_test_vech()
sympy.tests.test_test_vech_errors()
sympy.tests.test_test_wronskian()
sympy.tests.test_test_zero_dimension_multiply()
sympy.tests.test_test_zeros_eye()
sympy.tests.test_test_zeros_ones_fill()
sympy.tests.test_test_zip_row_op()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_densearith.py----------------------------------------
A:sympy.matrices.tests.test_densearith.c->eye(2, ZZ)
A:sympy.matrices.tests.test_densearith.a->eye(3, ZZ)
sympy.matrices.tests.test_densearith.test_add()
sympy.matrices.tests.test_densearith.test_mulmatmat()
sympy.matrices.tests.test_densearith.test_mulmatscaler()
sympy.matrices.tests.test_densearith.test_sub()
sympy.tests.test_densearith.test_add()
sympy.tests.test_densearith.test_mulmatmat()
sympy.tests.test_densearith.test_mulmatscaler()
sympy.tests.test_densearith.test_sub()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_sparse.py----------------------------------------
A:sympy.matrices.tests.test_sparse.a->SparseMatrix([[1, I], [-I, 1]])
A:sympy.matrices.tests.test_sparse.b->SparseMatrix(100, 100, lambda i, j: int(i != 0 and j % i == 0))
A:sympy.matrices.tests.test_sparse.x->Symbol('x')
A:sympy.matrices.tests.test_sparse.A->A.col_join(A).col_join(A)
A:sympy.matrices.tests.test_sparse.S->sympy.matrices.SparseMatrix.eye(3)
A:sympy.matrices.tests.test_sparse.c->SparseMatrix([[1, I], [-I, 1]]).copy()
A:sympy.matrices.tests.test_sparse.m0->sparse_eye(3)
A:sympy.matrices.tests.test_sparse.m1->SparseMatrix(3, 4, lambda i, j: i + j)
A:sympy.matrices.tests.test_sparse.m2->SparseMatrix([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15]])
A:sympy.matrices.tests.test_sparse.m->sparse_zeros(4)
A:sympy.matrices.tests.test_sparse.m[2:4, 2:4]->sparse_eye(2)
A:sympy.matrices.tests.test_sparse.m[:2, :2]->sparse_eye(2)
A:sympy.matrices.tests.test_sparse.m[:, 0]->SparseMatrix(4, 1, (1, 2, 3, 4))
A:sympy.matrices.tests.test_sparse.m[:, :]->sparse_zeros(4)
A:sympy.matrices.tests.test_sparse.testmat->SparseMatrix([[6, -2, 7, 4], [0, 3, 6, 7], [1, -2, 7, 4], [-9, 2, 6, 3]])
A:sympy.matrices.tests.test_sparse.(L, U, p)->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).LUdecomposition()
A:sympy.matrices.tests.test_sparse.M->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]])
A:sympy.matrices.tests.test_sparse.soln->A.col_join(A).col_join(A).LUsolve(b)
A:sympy.matrices.tests.test_sparse.Ainv->SparseMatrix(Matrix(A).inv())
A:sympy.matrices.tests.test_sparse.v1->Matrix(1, 3, [1, 2, 3])
A:sympy.matrices.tests.test_sparse.v2->Matrix(1, 3, [3, 4, 5])
A:sympy.matrices.tests.test_sparse.test->SparseMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_sparse.y->Symbol('y')
A:sympy.matrices.tests.test_sparse.L->SparseMatrix(1, 2, [x, x ** 2 * y ** 3])
A:sympy.matrices.tests.test_sparse.(Q, S)->A.col_join(A).col_join(A).QRdecomposition()
A:sympy.matrices.tests.test_sparse.(out, tmp)->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).rref()
A:sympy.matrices.tests.test_sparse.basis->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).nullspace()
A:sympy.matrices.tests.test_sparse.sparse_eye3->sparse_eye(3)
A:sympy.matrices.tests.test_sparse.vals->Matrix([[5, 0, 2], [3, 2, 0], [0, 0, 1]]).eigenvals()
A:sympy.matrices.tests.test_sparse.s->A.col_join(A).col_join(A).solve_least_squares(A[:, 0], 'LDL')
A:sympy.matrices.tests.test_sparse.s[1, 1:]->Matrix([[5, 6]])
A:sympy.matrices.tests.test_sparse.s[0, 0]->SparseMatrix([1, 1, 1])
A:sympy.matrices.tests.test_sparse.(L, D)->A.col_join(A).col_join(A).LDLdecomposition()
A:sympy.matrices.tests.test_sparse.ans->SparseMatrix([[S(2) / 3, S(1) / 3, S(1) / 6], [S(1) / 3, S(2) / 3, S(1) / 3], [0, 0, S(1) / 2]])
sympy.matrices.tests.test_sparse.test_CL_RL()
sympy.matrices.tests.test_sparse.test_add()
sympy.matrices.tests.test_sparse.test_copyin()
sympy.matrices.tests.test_sparse.test_errors()
sympy.matrices.tests.test_sparse.test_hermitian()
sympy.matrices.tests.test_sparse.test_len()
sympy.matrices.tests.test_sparse.test_sparse_matrix()
sympy.matrices.tests.test_sparse.test_sparse_solve()
sympy.matrices.tests.test_sparse.test_sparse_zeros_sparse_eye()
sympy.matrices.tests.test_sparse.test_trace()
sympy.matrices.tests.test_sparse.test_transpose()
sympy.tests.test_sparse.test_CL_RL()
sympy.tests.test_sparse.test_add()
sympy.tests.test_sparse.test_copyin()
sympy.tests.test_sparse.test_errors()
sympy.tests.test_sparse.test_hermitian()
sympy.tests.test_sparse.test_len()
sympy.tests.test_sparse.test_sparse_matrix()
sympy.tests.test_sparse.test_sparse_solve()
sympy.tests.test_sparse.test_sparse_zeros_sparse_eye()
sympy.tests.test_sparse.test_trace()
sympy.tests.test_sparse.test_transpose()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_sparsetools.py----------------------------------------
A:sympy.matrices.tests.test_sparsetools.a->SparseMatrix([[1, 2, 0, 0], [0, 3, 9, 0], [0, 1, 4, 0]])
A:sympy.matrices.tests.test_sparsetools.b->SparseMatrix(4, 6, [10, 20, 0, 0, 0, 0, 0, 30, 0, 40, 0, 0, 0, 0, 50, 60, 70, 0, 0, 0, 0, 0, 0, 80])
A:sympy.matrices.tests.test_sparsetools.c->SparseMatrix(4, 4, [0, 0, 0, 0, 0, 12, 0, 2, 15, 0, 12, 0, 0, 0, 0, 4])
A:sympy.matrices.tests.test_sparsetools.d->SparseMatrix(10, 10, {(1, 1): 12, (3, 5): 7, (7, 8): 12})
A:sympy.matrices.tests.test_sparsetools.e->SparseMatrix([[0, 0, 0], [1, 0, 2], [3, 0, 0]])
A:sympy.matrices.tests.test_sparsetools.f->SparseMatrix(7, 8, {(2, 3): 5, (4, 5): 12})
sympy.matrices.tests.test_sparsetools.test_csrtodok()
sympy.matrices.tests.test_sparsetools.test_doktocsr()
sympy.tests.test_sparsetools.test_csrtodok()
sympy.tests.test_sparsetools.test_doktocsr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_immutable.py----------------------------------------
A:sympy.matrices.tests.test_immutable.IM->ImmutableMatrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.matrices.tests.test_immutable.ieye->ImmutableMatrix(eye(3))
A:sympy.matrices.tests.test_immutable.A->ImmutableMatrix(3, 3, range(9))
A:sympy.matrices.tests.test_immutable.B->ImmutableMatrix([[1, 2], [x, 4]])
A:sympy.matrices.tests.test_immutable.C->ImmutableMatrix([[-x, x * y], [-(x + y), y ** 2]])
A:sympy.matrices.tests.test_immutable.X->ImmutableMatrix(eye(3))
A:sympy.matrices.tests.test_immutable.Y->ImmutableMatrix([[1], [0]])
A:sympy.matrices.tests.test_immutable.(q, r)->ImmutableMatrix(eye(3)).QRdecomposition()
A:sympy.matrices.tests.test_immutable.(L, D)->ImmutableMatrix(eye(3)).LDLdecomposition()
A:sympy.matrices.tests.test_immutable.M->ImmutableMatrix([x, y])
sympy.matrices.tests.test_immutable.test_Equality()
sympy.matrices.tests.test_immutable.test_as_immutable()
sympy.matrices.tests.test_immutable.test_deterimant()
sympy.matrices.tests.test_immutable.test_function_return_types()
sympy.matrices.tests.test_immutable.test_immutability()
sympy.matrices.tests.test_immutable.test_immutable_creation()
sympy.matrices.tests.test_immutable.test_immutable_evaluation()
sympy.matrices.tests.test_immutable.test_slicing()
sympy.matrices.tests.test_immutable.test_subs()
sympy.tests.test_immutable.test_Equality()
sympy.tests.test_immutable.test_as_immutable()
sympy.tests.test_immutable.test_deterimant()
sympy.tests.test_immutable.test_function_return_types()
sympy.tests.test_immutable.test_immutability()
sympy.tests.test_immutable.test_immutable_creation()
sympy.tests.test_immutable.test_immutable_evaluation()
sympy.tests.test_immutable.test_slicing()
sympy.tests.test_immutable.test_subs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/tests/test_densetools.py----------------------------------------
A:sympy.matrices.tests.test_densetools.b->eye(4, ZZ)
sympy.matrices.tests.test_densetools.test_trace()
sympy.matrices.tests.test_densetools.test_transpose()
sympy.tests.test_densetools.test_trace()
sympy.tests.test_densetools.test_transpose()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/benchmarks/bench_matrix.py----------------------------------------
A:sympy.matrices.benchmarks.bench_matrix.i3->Integer(3)
A:sympy.matrices.benchmarks.bench_matrix.M->eye(100)
sympy.benchmarks.bench_matrix.timeit_Matrix__getitem_II()
sympy.benchmarks.bench_matrix.timeit_Matrix__getitem_ii()
sympy.benchmarks.bench_matrix.timeit_Matrix__getslice()
sympy.benchmarks.bench_matrix.timeit_Matrix_zeronm()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getitem_II()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getitem_ii()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix__getslice()
sympy.matrices.benchmarks.bench_matrix.timeit_Matrix_zeronm()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/matpow.py----------------------------------------
A:sympy.matrices.expressions.matpow.base->_sympify(base)
A:sympy.matrices.expressions.matpow.exp->_sympify(exp)
A:sympy.matrices.expressions.matpow.T->MatMul(*[self.base for k in range(self.exp)])
sympy.MatPow(cls,base,exp)
sympy.MatPow._entry(self,i,j)
sympy.MatPow.base(self)
sympy.MatPow.exp(self)
sympy.MatPow.shape(self)
sympy.matrices.expressions.matpow.MatPow(cls,base,exp)
sympy.matrices.expressions.matpow.MatPow.__new__(cls,base,exp)
sympy.matrices.expressions.matpow.MatPow._entry(self,i,j)
sympy.matrices.expressions.matpow.MatPow.base(self)
sympy.matrices.expressions.matpow.MatPow.exp(self)
sympy.matrices.expressions.matpow.MatPow.shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/matexpr.py----------------------------------------
A:sympy.matrices.expressions.matexpr.b->sympify(b, strict=True)
A:sympy.matrices.expressions.matexpr.args->map(sympify, args)
A:sympy.matrices.expressions.matexpr.T->property(transpose, None, None, 'Matrix transposition.')
A:sympy.matrices.expressions.matexpr.key->sympify(key)
A:sympy.matrices.expressions.matexpr.a->empty(self.shape, dtype=object)
A:sympy.matrices.expressions.matexpr.parent->property(lambda self: self.args[0])
A:sympy.matrices.expressions.matexpr.i->property(lambda self: self.args[1])
A:sympy.matrices.expressions.matexpr.j->property(lambda self: self.args[2])
A:sympy.matrices.expressions.matexpr.obj->sympy.core.Basic.__new__(cls, name, n, m)
A:sympy.matrices.expressions.matexpr.shape->Tuple(*self.shape)._subs(old, new)
sympy.Identity(cls,n)
sympy.Identity._entry(self,i,j)
sympy.Identity._eval_determinant(self)
sympy.Identity._eval_inverse(self)
sympy.Identity._eval_trace(self)
sympy.Identity._eval_transpose(self)
sympy.Identity.cols(self)
sympy.Identity.conjugate(self)
sympy.Identity.rows(self)
sympy.Identity.shape(self)
sympy.MatrixExpr(cls,*args,**kwargs)
sympy.MatrixExpr.I(self)
sympy.MatrixExpr.__abs__(self)
sympy.MatrixExpr.__add__(self,other)
sympy.MatrixExpr.__array__(self)
sympy.MatrixExpr.__div__(self,other)
sympy.MatrixExpr.__getitem__(self,key)
sympy.MatrixExpr.__mul__(self,other)
sympy.MatrixExpr.__neg__(self)
sympy.MatrixExpr.__pow__(self,other)
sympy.MatrixExpr.__radd__(self,other)
sympy.MatrixExpr.__rdiv__(self,other)
sympy.MatrixExpr.__rmul__(self,other)
sympy.MatrixExpr.__rpow__(self,other)
sympy.MatrixExpr.__rsub__(self,other)
sympy.MatrixExpr.__sub__(self,other)
sympy.MatrixExpr._entry(self,i,j)
sympy.MatrixExpr._eval_adjoint(self)
sympy.MatrixExpr._eval_conjugate(self)
sympy.MatrixExpr._eval_inverse(self)
sympy.MatrixExpr._eval_power(self,exp)
sympy.MatrixExpr._eval_simplify(self,**kwargs)
sympy.MatrixExpr._eval_transpose(self)
sympy.MatrixExpr.adjoint(self)
sympy.MatrixExpr.as_coeff_mmul(self)
sympy.MatrixExpr.as_explicit(self)
sympy.MatrixExpr.as_mutable(self)
sympy.MatrixExpr.canonicalize(self)
sympy.MatrixExpr.cols(self)
sympy.MatrixExpr.conjugate(self)
sympy.MatrixExpr.equals(self,other)
sympy.MatrixExpr.inverse(self)
sympy.MatrixExpr.is_square(self)
sympy.MatrixExpr.rows(self)
sympy.MatrixExpr.transpose(self)
sympy.MatrixExpr.valid_index(self,i,j)
sympy.MatrixSymbol(cls,name,n,m)
sympy.MatrixSymbol._entry(self,i,j)
sympy.MatrixSymbol._eval_simplify(self,**kwargs)
sympy.MatrixSymbol._eval_subs(self,old,new)
sympy.MatrixSymbol._hashable_content(self)
sympy.MatrixSymbol.doit(self,**hints)
sympy.MatrixSymbol.free_symbols(self)
sympy.MatrixSymbol.name(self)
sympy.MatrixSymbol.shape(self)
sympy.ZeroMatrix(cls,m,n)
sympy.ZeroMatrix.__nonzero__(self)
sympy.ZeroMatrix.__pow__(self,other)
sympy.ZeroMatrix._entry(self,i,j)
sympy.ZeroMatrix._eval_determinant(self)
sympy.ZeroMatrix._eval_trace(self)
sympy.ZeroMatrix._eval_transpose(self)
sympy.ZeroMatrix.conjugate(self)
sympy.ZeroMatrix.shape(self)
sympy.expressions.matexpr.MatrixElement(Expr)
sympy.expressions.matexpr._sympifyit(arg,retval=None)
sympy.matrices.expressions.matexpr.Identity(cls,n)
sympy.matrices.expressions.matexpr.Identity.__new__(cls,n)
sympy.matrices.expressions.matexpr.Identity._entry(self,i,j)
sympy.matrices.expressions.matexpr.Identity._eval_determinant(self)
sympy.matrices.expressions.matexpr.Identity._eval_inverse(self)
sympy.matrices.expressions.matexpr.Identity._eval_trace(self)
sympy.matrices.expressions.matexpr.Identity._eval_transpose(self)
sympy.matrices.expressions.matexpr.Identity.cols(self)
sympy.matrices.expressions.matexpr.Identity.conjugate(self)
sympy.matrices.expressions.matexpr.Identity.rows(self)
sympy.matrices.expressions.matexpr.Identity.shape(self)
sympy.matrices.expressions.matexpr.MatrixElement(Expr)
sympy.matrices.expressions.matexpr.MatrixExpr(cls,*args,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr.I(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__abs__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__add__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__array__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__div__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__getitem__(self,key)
sympy.matrices.expressions.matexpr.MatrixExpr.__mul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__neg__(self)
sympy.matrices.expressions.matexpr.MatrixExpr.__new__(cls,*args,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr.__pow__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__radd__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rdiv__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rmul__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rpow__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__rsub__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.__sub__(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr._entry(self,i,j)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_adjoint(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_conjugate(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_inverse(self)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_power(self,exp)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_simplify(self,**kwargs)
sympy.matrices.expressions.matexpr.MatrixExpr._eval_transpose(self)
sympy.matrices.expressions.matexpr.MatrixExpr.adjoint(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_coeff_mmul(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_explicit(self)
sympy.matrices.expressions.matexpr.MatrixExpr.as_mutable(self)
sympy.matrices.expressions.matexpr.MatrixExpr.canonicalize(self)
sympy.matrices.expressions.matexpr.MatrixExpr.cols(self)
sympy.matrices.expressions.matexpr.MatrixExpr.conjugate(self)
sympy.matrices.expressions.matexpr.MatrixExpr.equals(self,other)
sympy.matrices.expressions.matexpr.MatrixExpr.inverse(self)
sympy.matrices.expressions.matexpr.MatrixExpr.is_square(self)
sympy.matrices.expressions.matexpr.MatrixExpr.rows(self)
sympy.matrices.expressions.matexpr.MatrixExpr.transpose(self)
sympy.matrices.expressions.matexpr.MatrixExpr.valid_index(self,i,j)
sympy.matrices.expressions.matexpr.MatrixSymbol(cls,name,n,m)
sympy.matrices.expressions.matexpr.MatrixSymbol.__new__(cls,name,n,m)
sympy.matrices.expressions.matexpr.MatrixSymbol._entry(self,i,j)
sympy.matrices.expressions.matexpr.MatrixSymbol._eval_simplify(self,**kwargs)
sympy.matrices.expressions.matexpr.MatrixSymbol._eval_subs(self,old,new)
sympy.matrices.expressions.matexpr.MatrixSymbol._hashable_content(self)
sympy.matrices.expressions.matexpr.MatrixSymbol.doit(self,**hints)
sympy.matrices.expressions.matexpr.MatrixSymbol.free_symbols(self)
sympy.matrices.expressions.matexpr.MatrixSymbol.name(self)
sympy.matrices.expressions.matexpr.MatrixSymbol.shape(self)
sympy.matrices.expressions.matexpr.ZeroMatrix(cls,m,n)
sympy.matrices.expressions.matexpr.ZeroMatrix.__new__(cls,m,n)
sympy.matrices.expressions.matexpr.ZeroMatrix.__nonzero__(self)
sympy.matrices.expressions.matexpr.ZeroMatrix.__pow__(self,other)
sympy.matrices.expressions.matexpr.ZeroMatrix._entry(self,i,j)
sympy.matrices.expressions.matexpr.ZeroMatrix._eval_determinant(self)
sympy.matrices.expressions.matexpr.ZeroMatrix._eval_trace(self)
sympy.matrices.expressions.matexpr.ZeroMatrix._eval_transpose(self)
sympy.matrices.expressions.matexpr.ZeroMatrix.conjugate(self)
sympy.matrices.expressions.matexpr.ZeroMatrix.shape(self)
sympy.matrices.expressions.matexpr._sympifyit(arg,retval=None)
sympy.matrices.expressions.matexpr.matrix_symbols(expr)
sympy.matrix_symbols(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/transpose.py----------------------------------------
A:sympy.matrices.expressions.transpose.arg->arg.doit(**hints).doit(**hints)
A:sympy.matrices.expressions.transpose.result->arg.doit(**hints).doit(**hints)._eval_transpose()
sympy.Transpose(MatrixExpr)
sympy.Transpose._entry(self,i,j)
sympy.Transpose._eval_adjoint(self)
sympy.Transpose._eval_conjugate(self)
sympy.Transpose._eval_determinant(self)
sympy.Transpose._eval_trace(self)
sympy.Transpose._eval_transpose(self)
sympy.Transpose.arg(self)
sympy.Transpose.doit(self,**hints)
sympy.Transpose.shape(self)
sympy.expressions.transpose.refine_Transpose(expr,assumptions)
sympy.expressions.transpose.transpose(expr)
sympy.matrices.expressions.transpose.Transpose(MatrixExpr)
sympy.matrices.expressions.transpose.Transpose._entry(self,i,j)
sympy.matrices.expressions.transpose.Transpose._eval_adjoint(self)
sympy.matrices.expressions.transpose.Transpose._eval_conjugate(self)
sympy.matrices.expressions.transpose.Transpose._eval_determinant(self)
sympy.matrices.expressions.transpose.Transpose._eval_trace(self)
sympy.matrices.expressions.transpose.Transpose._eval_transpose(self)
sympy.matrices.expressions.transpose.Transpose.arg(self)
sympy.matrices.expressions.transpose.Transpose.doit(self,**hints)
sympy.matrices.expressions.transpose.Transpose.shape(self)
sympy.matrices.expressions.transpose.refine_Transpose(expr,assumptions)
sympy.matrices.expressions.transpose.transpose(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/matmul.py----------------------------------------
A:sympy.matrices.expressions.matmul.check->kwargs.get('check', True)
A:sympy.matrices.expressions.matmul.args->list(map(sympify, args))
A:sympy.matrices.expressions.matmul.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.matrices.expressions.matmul.(factor, matrices)->operator.mul.as_coeff_matrices()
A:sympy.matrices.expressions.matmul.(coeff, matrices)->self.as_coeff_matrices()
A:sympy.matrices.expressions.matmul.Y->MatMul(*tail)
A:sympy.matrices.expressions.matmul.k->Dummy('k', integer=True)
A:sympy.matrices.expressions.matmul.result->rm_id(lambda x: x.is_Identity is True)(mmul)
A:sympy.matrices.expressions.matmul.coeff->Mul(*scalars)
A:sympy.matrices.expressions.matmul.(factor, mmul)->operator.mul.as_coeff_mmul()
A:sympy.matrices.expressions.matmul.square_matrices->only_squares(*matrices)
A:sympy.matrices.expressions.matmul.deep->kwargs.get('deep', False)
A:sympy.matrices.expressions.matmul.I->Identity(X.rows)
A:sympy.matrices.expressions.matmul.canonicalize->exhaust(typed({MatMul: do_one(*rules)}))
A:sympy.matrices.expressions.matmul.last->Identity(arg.shape[0])
sympy.MatMul(cls,*args,**kwargs)
sympy.MatMul._entry(self,i,j,expand=True)
sympy.MatMul._eval_adjoint(self)
sympy.MatMul._eval_determinant(self)
sympy.MatMul._eval_inverse(self)
sympy.MatMul._eval_trace(self)
sympy.MatMul._eval_transpose(self)
sympy.MatMul.as_coeff_matrices(self)
sympy.MatMul.as_coeff_mmul(self)
sympy.MatMul.doit(self,**kwargs)
sympy.MatMul.shape(self)
sympy.expressions.matmul.any_zeros(mul)
sympy.expressions.matmul.factor_in_front(mul)
sympy.expressions.matmul.merge_explicit(matmul)
sympy.expressions.matmul.newmul(*args)
sympy.expressions.matmul.only_squares(*matrices)
sympy.expressions.matmul.refine_MatMul(expr,assumptions)
sympy.expressions.matmul.remove_ids(mul)
sympy.expressions.matmul.validate(*matrices)
sympy.expressions.matmul.xxinv(mul)
sympy.matrices.expressions.matmul.MatMul(cls,*args,**kwargs)
sympy.matrices.expressions.matmul.MatMul.__new__(cls,*args,**kwargs)
sympy.matrices.expressions.matmul.MatMul._entry(self,i,j,expand=True)
sympy.matrices.expressions.matmul.MatMul._eval_adjoint(self)
sympy.matrices.expressions.matmul.MatMul._eval_determinant(self)
sympy.matrices.expressions.matmul.MatMul._eval_inverse(self)
sympy.matrices.expressions.matmul.MatMul._eval_trace(self)
sympy.matrices.expressions.matmul.MatMul._eval_transpose(self)
sympy.matrices.expressions.matmul.MatMul.as_coeff_matrices(self)
sympy.matrices.expressions.matmul.MatMul.as_coeff_mmul(self)
sympy.matrices.expressions.matmul.MatMul.doit(self,**kwargs)
sympy.matrices.expressions.matmul.MatMul.shape(self)
sympy.matrices.expressions.matmul.any_zeros(mul)
sympy.matrices.expressions.matmul.factor_in_front(mul)
sympy.matrices.expressions.matmul.merge_explicit(matmul)
sympy.matrices.expressions.matmul.newmul(*args)
sympy.matrices.expressions.matmul.only_squares(*matrices)
sympy.matrices.expressions.matmul.refine_MatMul(expr,assumptions)
sympy.matrices.expressions.matmul.remove_ids(mul)
sympy.matrices.expressions.matmul.validate(*matrices)
sympy.matrices.expressions.matmul.xxinv(mul)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/factorizations.py----------------------------------------
A:sympy.matrices.expressions.factorizations.arg->property(lambda self: self.args[0])
A:sympy.matrices.expressions.factorizations.shape->property(lambda self: self.arg.shape)
sympy.expressions.factorizations.EigenValues(Factorization)
sympy.expressions.factorizations.EigenVectors(Factorization)
sympy.expressions.factorizations.Factorization(MatrixExpr)
sympy.expressions.factorizations.LofCholesky(LofLU)
sympy.expressions.factorizations.LofLU(Factorization)
sympy.expressions.factorizations.QofQR(Factorization)
sympy.expressions.factorizations.RofQR(Factorization)
sympy.expressions.factorizations.SofSVD(Factorization)
sympy.expressions.factorizations.UofCholesky(UofLU)
sympy.expressions.factorizations.UofLU(Factorization)
sympy.expressions.factorizations.UofSVD(Factorization)
sympy.expressions.factorizations.VofSVD(Factorization)
sympy.expressions.factorizations.eig(expr)
sympy.expressions.factorizations.lu(expr)
sympy.expressions.factorizations.qr(expr)
sympy.expressions.factorizations.svd(expr)
sympy.matrices.expressions.factorizations.EigenValues(Factorization)
sympy.matrices.expressions.factorizations.EigenVectors(Factorization)
sympy.matrices.expressions.factorizations.Factorization(MatrixExpr)
sympy.matrices.expressions.factorizations.LofCholesky(LofLU)
sympy.matrices.expressions.factorizations.LofLU(Factorization)
sympy.matrices.expressions.factorizations.QofQR(Factorization)
sympy.matrices.expressions.factorizations.RofQR(Factorization)
sympy.matrices.expressions.factorizations.SofSVD(Factorization)
sympy.matrices.expressions.factorizations.UofCholesky(UofLU)
sympy.matrices.expressions.factorizations.UofLU(Factorization)
sympy.matrices.expressions.factorizations.UofSVD(Factorization)
sympy.matrices.expressions.factorizations.VofSVD(Factorization)
sympy.matrices.expressions.factorizations.eig(expr)
sympy.matrices.expressions.factorizations.lu(expr)
sympy.matrices.expressions.factorizations.qr(expr)
sympy.matrices.expressions.factorizations.svd(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/hadamard.py----------------------------------------
A:sympy.matrices.expressions.hadamard.args->list(map(sympify, args))
A:sympy.matrices.expressions.hadamard.check->kwargs.get('check', True)
A:sympy.matrices.expressions.hadamard.canonicalize->exhaust(condition(lambda x: isinstance(x, HadamardProduct), do_one(*rules)))
sympy.HadamardProduct(cls,*args,**kwargs)
sympy.HadamardProduct._entry(self,i,j)
sympy.HadamardProduct._eval_transpose(self)
sympy.HadamardProduct.doit(self,**ignored)
sympy.HadamardProduct.shape(self)
sympy.expressions.hadamard.validate(*args)
sympy.hadamard_product(*matrices)
sympy.matrices.expressions.hadamard.HadamardProduct(cls,*args,**kwargs)
sympy.matrices.expressions.hadamard.HadamardProduct.__new__(cls,*args,**kwargs)
sympy.matrices.expressions.hadamard.HadamardProduct._entry(self,i,j)
sympy.matrices.expressions.hadamard.HadamardProduct._eval_transpose(self)
sympy.matrices.expressions.hadamard.HadamardProduct.doit(self,**ignored)
sympy.matrices.expressions.hadamard.HadamardProduct.shape(self)
sympy.matrices.expressions.hadamard.hadamard_product(*matrices)
sympy.matrices.expressions.hadamard.validate(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/matadd.py----------------------------------------
A:sympy.matrices.expressions.matadd.args->list(map(sympify, args))
A:sympy.matrices.expressions.matadd.check->kwargs.get('check', True)
A:sympy.matrices.expressions.matadd.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.matrices.expressions.matadd.groups->sift(matadd.args, lambda arg: isinstance(arg, MatrixBase))
A:sympy.matrices.expressions.matadd.canonicalize->exhaust(condition(lambda x: isinstance(x, MatAdd), do_one(*rules)))
sympy.MatAdd(cls,*args,**kwargs)
sympy.MatAdd._entry(self,i,j)
sympy.MatAdd._eval_adjoint(self)
sympy.MatAdd._eval_trace(self)
sympy.MatAdd._eval_transpose(self)
sympy.MatAdd.doit(self,**ignored)
sympy.MatAdd.shape(self)
sympy.expressions.matadd.combine(cnt,mat)
sympy.expressions.matadd.merge_explicit(matadd)
sympy.expressions.matadd.validate(*args)
sympy.matrices.expressions.matadd.MatAdd(cls,*args,**kwargs)
sympy.matrices.expressions.matadd.MatAdd.__new__(cls,*args,**kwargs)
sympy.matrices.expressions.matadd.MatAdd._entry(self,i,j)
sympy.matrices.expressions.matadd.MatAdd._eval_adjoint(self)
sympy.matrices.expressions.matadd.MatAdd._eval_trace(self)
sympy.matrices.expressions.matadd.MatAdd._eval_transpose(self)
sympy.matrices.expressions.matadd.MatAdd.doit(self,**ignored)
sympy.matrices.expressions.matadd.MatAdd.shape(self)
sympy.matrices.expressions.matadd.combine(cnt,mat)
sympy.matrices.expressions.matadd.merge_explicit(matadd)
sympy.matrices.expressions.matadd.validate(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/blockmatrix.py----------------------------------------
A:sympy.matrices.expressions.blockmatrix.args->sift(expr.args, lambda M: isinstance(M, BlockMatrix))
A:sympy.matrices.expressions.blockmatrix.mat->Matrix([[expr.arg.blocks[0].inverse()]])
A:sympy.matrices.expressions.blockmatrix.obj->sympy.core.Basic.__new__(cls, mat)
A:sympy.matrices.expressions.blockmatrix.M->M.row_join(bb[row, col].blocks).row_join(bb[row, col].blocks)
A:sympy.matrices.expressions.blockmatrix.[[A, B], [C, D]]->expr.arg.blocks.tolist()
A:sympy.matrices.expressions.blockmatrix.n->len(self.args)
A:sympy.matrices.expressions.blockmatrix.rule->exhaust(bottom_up(exhaust(condition(hasbm, typed({MatAdd: do_one(bc_matadd, bc_block_plus_ident), MatMul: do_one(bc_matmul, bc_dist), Transpose: bc_transpose, Inverse: bc_inverse, BlockMatrix: do_one(bc_unpack, deblock)})))))
A:sympy.matrices.expressions.blockmatrix.result->rule(expr)
A:sympy.matrices.expressions.blockmatrix.block->block._blockadd(b)._blockadd(b)
A:sympy.matrices.expressions.blockmatrix.block_id->BlockDiagMatrix(*[Identity(k) for k in blocks[0].rowblocksizes])
A:sympy.matrices.expressions.blockmatrix.(factor, mat)->expr.as_coeff_mmul()
A:sympy.matrices.expressions.blockmatrix.(factor, matrices)->expr.as_coeff_matrices()
A:sympy.matrices.expressions.blockmatrix.matrices[i]->BlockMatrix([[A]])._blockmul(B)
A:sympy.matrices.expressions.blockmatrix.expr2->blockinverse_1x1(expr)
A:sympy.matrices.expressions.blockmatrix.bb->B.blocks.applyfunc(wrap)
A:sympy.matrices.expressions.blockmatrix.MM->MM.col_join(M).col_join(M)
A:sympy.matrices.expressions.blockmatrix.rowbounds->bounds(rowsizes)
A:sympy.matrices.expressions.blockmatrix.colbounds->bounds(colsizes)
sympy.BlockDiagMatrix(cls,*mats)
sympy.BlockDiagMatrix._blockadd(self,other)
sympy.BlockDiagMatrix._blockmul(self,other)
sympy.BlockDiagMatrix._eval_inverse(self,expand='ignored')
sympy.BlockDiagMatrix.blocks(self)
sympy.BlockDiagMatrix.blockshape(self)
sympy.BlockDiagMatrix.colblocksizes(self)
sympy.BlockDiagMatrix.diag(self)
sympy.BlockDiagMatrix.rowblocksizes(self)
sympy.BlockDiagMatrix.shape(self)
sympy.BlockMatrix(cls,*args)
sympy.BlockMatrix._blockadd(self,other)
sympy.BlockMatrix._blockmul(self,other)
sympy.BlockMatrix._entry(self,i,j)
sympy.BlockMatrix._eval_determinant(self)
sympy.BlockMatrix._eval_trace(self)
sympy.BlockMatrix._eval_transpose(self)
sympy.BlockMatrix.blocks(self)
sympy.BlockMatrix.blockshape(self)
sympy.BlockMatrix.colblocksizes(self)
sympy.BlockMatrix.equals(self,other)
sympy.BlockMatrix.is_Identity(self)
sympy.BlockMatrix.is_structurally_symmetric(self)
sympy.BlockMatrix.rowblocksizes(self)
sympy.BlockMatrix.shape(self)
sympy.BlockMatrix.structurally_equal(self,other)
sympy.BlockMatrix.transpose(self)
sympy.block_collapse(expr)
sympy.blockcut(expr,rowsizes,colsizes)
sympy.expressions.blockmatrix.bc_block_plus_ident(expr)
sympy.expressions.blockmatrix.bc_dist(expr)
sympy.expressions.blockmatrix.bc_inverse(expr)
sympy.expressions.blockmatrix.bc_matadd(expr)
sympy.expressions.blockmatrix.bc_matmul(expr)
sympy.expressions.blockmatrix.bc_transpose(expr)
sympy.expressions.blockmatrix.bc_unpack(expr)
sympy.expressions.blockmatrix.blockinverse_1x1(expr)
sympy.expressions.blockmatrix.blockinverse_2x2(expr)
sympy.expressions.blockmatrix.bounds(sizes)
sympy.expressions.blockmatrix.deblock(B)
sympy.expressions.blockmatrix.reblock_2x2(B)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix(cls,*mats)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.__new__(cls,*mats)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._blockadd(self,other)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._blockmul(self,other)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix._eval_inverse(self,expand='ignored')
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.blocks(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.blockshape(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.colblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.diag(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.rowblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockDiagMatrix.shape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix(cls,*args)
sympy.matrices.expressions.blockmatrix.BlockMatrix.__new__(cls,*args)
sympy.matrices.expressions.blockmatrix.BlockMatrix._blockadd(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix._blockmul(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix._entry(self,i,j)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_determinant(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_trace(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix._eval_transpose(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.blocks(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.blockshape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.colblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.equals(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix.is_Identity(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.is_structurally_symmetric(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.rowblocksizes(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.shape(self)
sympy.matrices.expressions.blockmatrix.BlockMatrix.structurally_equal(self,other)
sympy.matrices.expressions.blockmatrix.BlockMatrix.transpose(self)
sympy.matrices.expressions.blockmatrix.bc_block_plus_ident(expr)
sympy.matrices.expressions.blockmatrix.bc_dist(expr)
sympy.matrices.expressions.blockmatrix.bc_inverse(expr)
sympy.matrices.expressions.blockmatrix.bc_matadd(expr)
sympy.matrices.expressions.blockmatrix.bc_matmul(expr)
sympy.matrices.expressions.blockmatrix.bc_transpose(expr)
sympy.matrices.expressions.blockmatrix.bc_unpack(expr)
sympy.matrices.expressions.blockmatrix.block_collapse(expr)
sympy.matrices.expressions.blockmatrix.blockcut(expr,rowsizes,colsizes)
sympy.matrices.expressions.blockmatrix.blockinverse_1x1(expr)
sympy.matrices.expressions.blockmatrix.blockinverse_2x2(expr)
sympy.matrices.expressions.blockmatrix.bounds(sizes)
sympy.matrices.expressions.blockmatrix.deblock(B)
sympy.matrices.expressions.blockmatrix.reblock_2x2(B)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/inverse.py----------------------------------------
A:sympy.matrices.expressions.inverse.exp->S(-1)
A:sympy.matrices.expressions.inverse.mat->_sympify(mat)
sympy.Inverse(cls,mat)
sympy.Inverse._eval_determinant(self)
sympy.Inverse._eval_inverse(self)
sympy.Inverse.arg(self)
sympy.Inverse.doit(self,**hints)
sympy.Inverse.shape(self)
sympy.expressions.inverse.refine_Inverse(expr,assumptions)
sympy.matrices.expressions.inverse.Inverse(cls,mat)
sympy.matrices.expressions.inverse.Inverse.__new__(cls,mat)
sympy.matrices.expressions.inverse.Inverse._eval_determinant(self)
sympy.matrices.expressions.inverse.Inverse._eval_inverse(self)
sympy.matrices.expressions.inverse.Inverse.arg(self)
sympy.matrices.expressions.inverse.Inverse.doit(self,**hints)
sympy.matrices.expressions.inverse.Inverse.shape(self)
sympy.matrices.expressions.inverse.refine_Inverse(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/trace.py----------------------------------------
A:sympy.matrices.expressions.trace.arg->self.arg.doit()
A:sympy.matrices.expressions.trace.i->Dummy('i')
sympy.Trace(cls,mat)
sympy.Trace._eval_rewrite_as_Sum(self)
sympy.Trace._eval_transpose(self)
sympy.Trace.arg(self)
sympy.Trace.doit(self,**kwargs)
sympy.matrices.expressions.trace.Trace(cls,mat)
sympy.matrices.expressions.trace.Trace.__new__(cls,mat)
sympy.matrices.expressions.trace.Trace._eval_rewrite_as_Sum(self)
sympy.matrices.expressions.trace.Trace._eval_transpose(self)
sympy.matrices.expressions.trace.Trace.arg(self)
sympy.matrices.expressions.trace.Trace.doit(self,**kwargs)
sympy.matrices.expressions.trace.trace(expr)
sympy.trace(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/adjoint.py----------------------------------------
sympy.Adjoint(MatrixExpr)
sympy.Adjoint._entry(self,i,j)
sympy.Adjoint._eval_adjoint(self)
sympy.Adjoint._eval_conjugate(self)
sympy.Adjoint._eval_trace(self)
sympy.Adjoint._eval_transpose(self)
sympy.Adjoint.arg(self)
sympy.Adjoint.doit(self,**hints)
sympy.Adjoint.shape(self)
sympy.matrices.expressions.adjoint.Adjoint(MatrixExpr)
sympy.matrices.expressions.adjoint.Adjoint._entry(self,i,j)
sympy.matrices.expressions.adjoint.Adjoint._eval_adjoint(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_conjugate(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_trace(self)
sympy.matrices.expressions.adjoint.Adjoint._eval_transpose(self)
sympy.matrices.expressions.adjoint.Adjoint.arg(self)
sympy.matrices.expressions.adjoint.Adjoint.doit(self,**hints)
sympy.matrices.expressions.adjoint.Adjoint.shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/diagonal.py----------------------------------------
A:sympy.matrices.expressions.diagonal.arg->property(lambda self: self.args[0])
A:sympy.matrices.expressions.diagonal.shape->property(lambda self: (self.arg.shape[0], S.One))
sympy.DiagonalMatrix(MatrixExpr)
sympy.DiagonalMatrix._entry(self,i,j)
sympy.DiagonalOf(MatrixExpr)
sympy.DiagonalOf._entry(self,i,j)
sympy.matrices.expressions.diagonal.DiagonalMatrix(MatrixExpr)
sympy.matrices.expressions.diagonal.DiagonalMatrix._entry(self,i,j)
sympy.matrices.expressions.diagonal.DiagonalOf(MatrixExpr)
sympy.matrices.expressions.diagonal.DiagonalOf._entry(self,i,j)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/funcmatrix.py----------------------------------------
sympy.FunctionMatrix(cls,rows,cols,lamda)
sympy.FunctionMatrix._entry(self,i,j)
sympy.FunctionMatrix._eval_trace(self)
sympy.FunctionMatrix.lamda(self)
sympy.FunctionMatrix.shape(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix(cls,rows,cols,lamda)
sympy.matrices.expressions.funcmatrix.FunctionMatrix.__new__(cls,rows,cols,lamda)
sympy.matrices.expressions.funcmatrix.FunctionMatrix._entry(self,i,j)
sympy.matrices.expressions.funcmatrix.FunctionMatrix._eval_trace(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix.lamda(self)
sympy.matrices.expressions.funcmatrix.FunctionMatrix.shape(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/fourier.py----------------------------------------
A:sympy.matrices.expressions.fourier.n->property(lambda self: self.args[0])
A:sympy.matrices.expressions.fourier.shape->property(lambda self: (self.n, self.n))
A:sympy.matrices.expressions.fourier.w->exp(-2 * S.Pi * I / self.n)
sympy.expressions.fourier.DFT(MatrixExpr)
sympy.expressions.fourier.DFT._entry(self,i,j)
sympy.expressions.fourier.DFT._eval_inverse(self)
sympy.expressions.fourier.IDFT(DFT)
sympy.expressions.fourier.IDFT._entry(self,i,j)
sympy.expressions.fourier.IDFT._eval_inverse(self)
sympy.matrices.expressions.fourier.DFT(MatrixExpr)
sympy.matrices.expressions.fourier.DFT._entry(self,i,j)
sympy.matrices.expressions.fourier.DFT._eval_inverse(self)
sympy.matrices.expressions.fourier.IDFT(DFT)
sympy.matrices.expressions.fourier.IDFT._entry(self,i,j)
sympy.matrices.expressions.fourier.IDFT._eval_inverse(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/slice.py----------------------------------------
A:sympy.matrices.expressions.slice.i->list(i)
A:sympy.matrices.expressions.slice.parent->property(lambda self: self.args[0])
A:sympy.matrices.expressions.slice.rowslice->normalize(rowslice, parent.shape[0])
A:sympy.matrices.expressions.slice.colslice->normalize(colslice, parent.shape[1])
A:sympy.matrices.expressions.slice.row->slice_of_slice(parent.rowslice, rowslice)
A:sympy.matrices.expressions.slice.col->slice_of_slice(parent.colslice, colslice)
sympy.MatrixSlice(cls,parent,rowslice,colslice)
sympy.MatrixSlice._entry(self,i,j)
sympy.MatrixSlice.on_diag(self)
sympy.MatrixSlice.shape(self)
sympy.expressions.slice.mat_slice_of_slice(parent,rowslice,colslice)
sympy.expressions.slice.normalize(i,parentsize)
sympy.expressions.slice.slice_of_slice(s,t)
sympy.matrices.expressions.slice.MatrixSlice(cls,parent,rowslice,colslice)
sympy.matrices.expressions.slice.MatrixSlice.__new__(cls,parent,rowslice,colslice)
sympy.matrices.expressions.slice.MatrixSlice._entry(self,i,j)
sympy.matrices.expressions.slice.MatrixSlice.on_diag(self)
sympy.matrices.expressions.slice.MatrixSlice.shape(self)
sympy.matrices.expressions.slice.mat_slice_of_slice(parent,rowslice,colslice)
sympy.matrices.expressions.slice.normalize(i,parentsize)
sympy.matrices.expressions.slice.slice_of_slice(s,t)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/determinant.py----------------------------------------
A:sympy.matrices.expressions.determinant.mat->sympify(mat)
sympy.Determinant(cls,mat)
sympy.Determinant.arg(self)
sympy.Determinant.doit(self,expand=False)
sympy.det(matexpr)
sympy.determinant.refine_Determinant(expr,assumptions)
sympy.matrices.expressions.determinant.Determinant(cls,mat)
sympy.matrices.expressions.determinant.Determinant.__new__(cls,mat)
sympy.matrices.expressions.determinant.Determinant.arg(self)
sympy.matrices.expressions.determinant.Determinant.doit(self,expand=False)
sympy.matrices.expressions.determinant.det(matexpr)
sympy.matrices.expressions.determinant.refine_Determinant(expr,assumptions)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_fourier.py----------------------------------------
sympy.expressions.tests.test_fourier.test_dft()
sympy.matrices.expressions.tests.test_fourier.test_dft()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_matrix_exprs.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matrix_exprs.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_matrix_exprs.x->symbols('x')
A:sympy.matrices.expressions.tests.test_matrix_exprs.A->MatrixSymbol('A', 2, 3)
A:sympy.matrices.expressions.tests.test_matrix_exprs.B->MatrixSymbol('B', n, m)
A:sympy.matrices.expressions.tests.test_matrix_exprs.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matrix_exprs.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matrix_exprs.E->MatrixSymbol('E', m, n)
A:sympy.matrices.expressions.tests.test_matrix_exprs.Z->ZeroMatrix(n, m)
A:sympy.matrices.expressions.tests.test_matrix_exprs.Znn->ZeroMatrix(Add(n, n, evaluate=False), n)
A:sympy.matrices.expressions.tests.test_matrix_exprs.In->Identity(n)
A:sympy.matrices.expressions.tests.test_matrix_exprs.Im->Identity(m)
A:sympy.matrices.expressions.tests.test_matrix_exprs.Inn->Identity(Add(n, n, evaluate=False))
A:sympy.matrices.expressions.tests.test_matrix_exprs.AA->MatPow(A, 2)
A:sympy.matrices.expressions.tests.test_matrix_exprs.(n, m, t)->symbols('n,m,t')
A:sympy.matrices.expressions.tests.test_matrix_exprs.X->MatrixSymbol('X', n, n)
sympy.expressions.tests.test_matrix_exprs.test_Identity()
sympy.expressions.tests.test_matrix_exprs.test_Identity_doit()
sympy.expressions.tests.test_matrix_exprs.test_MatPow()
sympy.expressions.tests.test_matrix_exprs.test_MatrixElement_diff()
sympy.expressions.tests.test_matrix_exprs.test_MatrixSymbol()
sympy.expressions.tests.test_matrix_exprs.test_ZeroMatrix()
sympy.expressions.tests.test_matrix_exprs.test_ZeroMatrix_doit()
sympy.expressions.tests.test_matrix_exprs.test_addition()
sympy.expressions.tests.test_matrix_exprs.test_dense_conversion()
sympy.expressions.tests.test_matrix_exprs.test_free_symbols()
sympy.expressions.tests.test_matrix_exprs.test_indexing()
sympy.expressions.tests.test_matrix_exprs.test_invariants()
sympy.expressions.tests.test_matrix_exprs.test_matadd_simplify()
sympy.expressions.tests.test_matrix_exprs.test_matexpr()
sympy.expressions.tests.test_matrix_exprs.test_matmul_simplify()
sympy.expressions.tests.test_matrix_exprs.test_multiplication()
sympy.expressions.tests.test_matrix_exprs.test_shape()
sympy.expressions.tests.test_matrix_exprs.test_single_indexing()
sympy.expressions.tests.test_matrix_exprs.test_subs()
sympy.expressions.tests.test_matrix_exprs.test_zero_matmul()
sympy.matrices.expressions.tests.test_matrix_exprs.test_Identity()
sympy.matrices.expressions.tests.test_matrix_exprs.test_Identity_doit()
sympy.matrices.expressions.tests.test_matrix_exprs.test_MatPow()
sympy.matrices.expressions.tests.test_matrix_exprs.test_MatrixElement_diff()
sympy.matrices.expressions.tests.test_matrix_exprs.test_MatrixSymbol()
sympy.matrices.expressions.tests.test_matrix_exprs.test_ZeroMatrix()
sympy.matrices.expressions.tests.test_matrix_exprs.test_ZeroMatrix_doit()
sympy.matrices.expressions.tests.test_matrix_exprs.test_addition()
sympy.matrices.expressions.tests.test_matrix_exprs.test_dense_conversion()
sympy.matrices.expressions.tests.test_matrix_exprs.test_free_symbols()
sympy.matrices.expressions.tests.test_matrix_exprs.test_indexing()
sympy.matrices.expressions.tests.test_matrix_exprs.test_invariants()
sympy.matrices.expressions.tests.test_matrix_exprs.test_matadd_simplify()
sympy.matrices.expressions.tests.test_matrix_exprs.test_matexpr()
sympy.matrices.expressions.tests.test_matrix_exprs.test_matmul_simplify()
sympy.matrices.expressions.tests.test_matrix_exprs.test_multiplication()
sympy.matrices.expressions.tests.test_matrix_exprs.test_shape()
sympy.matrices.expressions.tests.test_matrix_exprs.test_single_indexing()
sympy.matrices.expressions.tests.test_matrix_exprs.test_subs()
sympy.matrices.expressions.tests.test_matrix_exprs.test_zero_matmul()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_inverse.py----------------------------------------
A:sympy.matrices.expressions.tests.test_inverse.(n, m, l)->symbols('n m l', integer=True)
A:sympy.matrices.expressions.tests.test_inverse.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_inverse.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_inverse.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_inverse.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_inverse.E->MatrixSymbol('E', m, n)
sympy.expressions.tests.test_inverse.test_inverse()
sympy.expressions.tests.test_inverse.test_refine()
sympy.matrices.expressions.tests.test_inverse.test_inverse()
sympy.matrices.expressions.tests.test_inverse.test_refine()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_transpose.py----------------------------------------
A:sympy.matrices.expressions.tests.test_transpose.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_transpose.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_transpose.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_transpose.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_transpose.Sq->MatrixSymbol('Sq', n, n)
sympy.expressions.tests.test_transpose.test_refine()
sympy.expressions.tests.test_transpose.test_transpose()
sympy.matrices.expressions.tests.test_transpose.test_refine()
sympy.matrices.expressions.tests.test_transpose.test_transpose()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_adjoint.py----------------------------------------
A:sympy.matrices.expressions.tests.test_adjoint.(n, m, l, k, p)->symbols('n m l k p', integer=True)
A:sympy.matrices.expressions.tests.test_adjoint.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_adjoint.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_adjoint.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_adjoint.Sq->MatrixSymbol('Sq', n, n)
sympy.expressions.tests.test_adjoint.test_adjoint()
sympy.matrices.expressions.tests.test_adjoint.test_adjoint()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_blockmatrix.py----------------------------------------
A:sympy.matrices.expressions.tests.test_blockmatrix.(i, j, k, l, m, n, p)->symbols('i:n, p', integer=True)
A:sympy.matrices.expressions.tests.test_blockmatrix.A->MatrixSymbol('A', n, m)
A:sympy.matrices.expressions.tests.test_blockmatrix.B->BlockMatrix([[MatrixSymbol('A_%d%d' % (i, j), n, n) for j in range(4)] for i in range(4)])
A:sympy.matrices.expressions.tests.test_blockmatrix.C->MatrixSymbol('C', l, l)
A:sympy.matrices.expressions.tests.test_blockmatrix.D->MatrixSymbol('D', m, m)
A:sympy.matrices.expressions.tests.test_blockmatrix.G->MatrixSymbol('G', n, n)
A:sympy.matrices.expressions.tests.test_blockmatrix.H->MatrixSymbol('H', n, n)
A:sympy.matrices.expressions.tests.test_blockmatrix.b1->BlockMatrix([[G, H]])
A:sympy.matrices.expressions.tests.test_blockmatrix.b2->BlockMatrix([[G], [H]])
A:sympy.matrices.expressions.tests.test_blockmatrix.X->BlockDiagMatrix(A, B, C)
A:sympy.matrices.expressions.tests.test_blockmatrix.M->ImmutableMatrix(4, 4, range(16))
A:sympy.matrices.expressions.tests.test_blockmatrix.N->MatrixSymbol('N', l + n, k + m)
A:sympy.matrices.expressions.tests.test_blockmatrix.E->MatrixSymbol('E', m, 1)
A:sympy.matrices.expressions.tests.test_blockmatrix.F->MatrixSymbol('F', k, 1)
A:sympy.matrices.expressions.tests.test_blockmatrix.Y->BlockDiagMatrix(A, 2 * B, 3 * C)
A:sympy.matrices.expressions.tests.test_blockmatrix.Ab->BlockMatrix([[A]])
A:sympy.matrices.expressions.tests.test_blockmatrix.Z->BlockMatrix([[Identity(n), B], [C, D]])
A:sympy.matrices.expressions.tests.test_blockmatrix.(A, B, C, D)->map(lambda s: MatrixSymbol(s, 3, 3), 'ABCD')
A:sympy.matrices.expressions.tests.test_blockmatrix.BB->reblock_2x2(B)
sympy.expressions.tests.test_blockmatrix.test_BlockDiagMatrix()
sympy.expressions.tests.test_blockmatrix.test_BlockMatrix()
sympy.expressions.tests.test_blockmatrix.test_BlockMatrix_Determinant()
sympy.expressions.tests.test_blockmatrix.test_BlockMatrix_trace()
sympy.expressions.tests.test_blockmatrix.test_bc_dist_diag()
sympy.expressions.tests.test_blockmatrix.test_bc_matadd()
sympy.expressions.tests.test_blockmatrix.test_bc_matmul()
sympy.expressions.tests.test_blockmatrix.test_bc_transpose()
sympy.expressions.tests.test_blockmatrix.test_block_plus_ident()
sympy.expressions.tests.test_blockmatrix.test_blockcut()
sympy.expressions.tests.test_blockmatrix.test_deblock()
sympy.expressions.tests.test_blockmatrix.test_reblock_2x2()
sympy.expressions.tests.test_blockmatrix.test_squareBlockMatrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockDiagMatrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_Determinant()
sympy.matrices.expressions.tests.test_blockmatrix.test_BlockMatrix_trace()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_dist_diag()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_matadd()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_matmul()
sympy.matrices.expressions.tests.test_blockmatrix.test_bc_transpose()
sympy.matrices.expressions.tests.test_blockmatrix.test_block_plus_ident()
sympy.matrices.expressions.tests.test_blockmatrix.test_blockcut()
sympy.matrices.expressions.tests.test_blockmatrix.test_deblock()
sympy.matrices.expressions.tests.test_blockmatrix.test_reblock_2x2()
sympy.matrices.expressions.tests.test_blockmatrix.test_squareBlockMatrix()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_slice.py----------------------------------------
A:sympy.matrices.expressions.tests.test_slice.X->MatrixSymbol('x', 10, 10)
A:sympy.matrices.expressions.tests.test_slice.Y->MatrixSymbol('Y', m, k)
A:sympy.matrices.expressions.tests.test_slice.B->MatrixSlice(X, (a, b), (c, d))
sympy.expressions.tests.test_slice.test_entry()
sympy.expressions.tests.test_slice.test_exceptions()
sympy.expressions.tests.test_slice.test_inputs()
sympy.expressions.tests.test_slice.test_negative_index()
sympy.expressions.tests.test_slice.test_on_diag()
sympy.expressions.tests.test_slice.test_shape()
sympy.expressions.tests.test_slice.test_slice_of_slice()
sympy.expressions.tests.test_slice.test_slicing()
sympy.expressions.tests.test_slice.test_symmetry()
sympy.matrices.expressions.tests.test_slice.test_entry()
sympy.matrices.expressions.tests.test_slice.test_exceptions()
sympy.matrices.expressions.tests.test_slice.test_inputs()
sympy.matrices.expressions.tests.test_slice.test_negative_index()
sympy.matrices.expressions.tests.test_slice.test_on_diag()
sympy.matrices.expressions.tests.test_slice.test_shape()
sympy.matrices.expressions.tests.test_slice.test_slice_of_slice()
sympy.matrices.expressions.tests.test_slice.test_slicing()
sympy.matrices.expressions.tests.test_slice.test_symmetry()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_factorizations.py----------------------------------------
A:sympy.matrices.expressions.tests.test_factorizations.n->Symbol('n')
A:sympy.matrices.expressions.tests.test_factorizations.X->MatrixSymbol('X', n, n)
A:sympy.matrices.expressions.tests.test_factorizations.(L, U)->lu(X)
A:sympy.matrices.expressions.tests.test_factorizations.L->LofCholesky(X)
A:sympy.matrices.expressions.tests.test_factorizations.(Q_, R)->qr(X)
A:sympy.matrices.expressions.tests.test_factorizations.(U, S, V)->svd(X)
sympy.expressions.tests.test_factorizations.test_Cholesky()
sympy.expressions.tests.test_factorizations.test_LU()
sympy.expressions.tests.test_factorizations.test_QR()
sympy.expressions.tests.test_factorizations.test_svd()
sympy.matrices.expressions.tests.test_factorizations.test_Cholesky()
sympy.matrices.expressions.tests.test_factorizations.test_LU()
sympy.matrices.expressions.tests.test_factorizations.test_QR()
sympy.matrices.expressions.tests.test_factorizations.test_svd()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_hadamard.py----------------------------------------
A:sympy.matrices.expressions.tests.test_hadamard.(n, m, k)->symbols('n,m,k')
A:sympy.matrices.expressions.tests.test_hadamard.Z->MatrixSymbol('Z', 2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.A->MatrixSymbol('A', m, n)
A:sympy.matrices.expressions.tests.test_hadamard.B->MatrixSymbol('B', m, n)
A:sympy.matrices.expressions.tests.test_hadamard.C->MatrixSymbol('C', m, p)
A:sympy.matrices.expressions.tests.test_hadamard.X->MatrixSymbol('X', 2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.Y->MatrixSymbol('Y', 2, 2)
A:sympy.matrices.expressions.tests.test_hadamard.expr->HadamardProduct(X, check=False)
A:sympy.matrices.expressions.tests.test_hadamard.expr2->HadamardProduct(X, check=False).doit()
A:sympy.matrices.expressions.tests.test_hadamard.(m, n, p)->symbols('m, n, p', integer=True)
sympy.expressions.tests.test_hadamard.test_HadamardProduct()
sympy.expressions.tests.test_hadamard.test_HadamardProduct_isnt_commutative()
sympy.expressions.tests.test_hadamard.test_canonicalize()
sympy.expressions.tests.test_hadamard.test_hadamard()
sympy.expressions.tests.test_hadamard.test_mixed_indexing()
sympy.matrices.expressions.tests.test_hadamard.test_HadamardProduct()
sympy.matrices.expressions.tests.test_hadamard.test_HadamardProduct_isnt_commutative()
sympy.matrices.expressions.tests.test_hadamard.test_canonicalize()
sympy.matrices.expressions.tests.test_hadamard.test_hadamard()
sympy.matrices.expressions.tests.test_hadamard.test_mixed_indexing()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_matadd.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matadd.X->MatrixSymbol('X', 2, 2)
A:sympy.matrices.expressions.tests.test_matadd.Y->MatrixSymbol('Y', 2, 2)
sympy.expressions.tests.test_matadd.test_matadd_of_matrices()
sympy.expressions.tests.test_matadd.test_matadd_sympify()
sympy.expressions.tests.test_matadd.test_sort_key()
sympy.matrices.expressions.tests.test_matadd.test_matadd_of_matrices()
sympy.matrices.expressions.tests.test_matadd.test_matadd_sympify()
sympy.matrices.expressions.tests.test_matadd.test_sort_key()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_trace.py----------------------------------------
A:sympy.matrices.expressions.tests.test_trace.n->symbols('n', integer=True)
A:sympy.matrices.expressions.tests.test_trace.A->MatrixSymbol('A', n, n)
A:sympy.matrices.expressions.tests.test_trace.B->MatrixSymbol('B', n, n)
A:sympy.matrices.expressions.tests.test_trace.C->MatrixSymbol('C', 3, 4)
A:sympy.matrices.expressions.tests.test_trace.(i, j)->symbols('i j')
A:sympy.matrices.expressions.tests.test_trace.F->FunctionMatrix(3, 3, Lambda((i, j), i + j))
sympy.expressions.tests.test_trace.test_Trace()
sympy.expressions.tests.test_trace.test_rewrite()
sympy.matrices.expressions.tests.test_trace.test_Trace()
sympy.matrices.expressions.tests.test_trace.test_rewrite()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_funcmatrix.py----------------------------------------
A:sympy.matrices.expressions.tests.test_funcmatrix.(i, j)->symbols('i,j')
A:sympy.matrices.expressions.tests.test_funcmatrix.X->FunctionMatrix(3, 3, Lambda((i, j), i - j))
sympy.expressions.tests.test_funcmatrix.test_funcmatrix()
sympy.matrices.expressions.tests.test_funcmatrix.test_funcmatrix()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_diagonal.py----------------------------------------
A:sympy.matrices.expressions.tests.test_diagonal.n->Symbol('n')
A:sympy.matrices.expressions.tests.test_diagonal.x->MatrixSymbol('x', n, 1)
A:sympy.matrices.expressions.tests.test_diagonal.X->MatrixSymbol('X', n, n)
A:sympy.matrices.expressions.tests.test_diagonal.D->DiagonalMatrix(x)
A:sympy.matrices.expressions.tests.test_diagonal.d->DiagonalOf(X)
sympy.expressions.tests.test_diagonal.test_DiagonalMatrix()
sympy.expressions.tests.test_diagonal.test_DiagonalMatrix_Assumptions()
sympy.expressions.tests.test_diagonal.test_DiagonalOf()
sympy.matrices.expressions.tests.test_diagonal.test_DiagonalMatrix()
sympy.matrices.expressions.tests.test_diagonal.test_DiagonalMatrix_Assumptions()
sympy.matrices.expressions.tests.test_diagonal.test_DiagonalOf()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_indexing.py----------------------------------------
A:sympy.matrices.expressions.tests.test_indexing.(k, l, m, n)->symbols('k l m n', integer=True)
A:sympy.matrices.expressions.tests.test_indexing.(i, j)->symbols('i j', integer=True)
A:sympy.matrices.expressions.tests.test_indexing.W->MatrixSymbol('W', k, l)
A:sympy.matrices.expressions.tests.test_indexing.X->MatrixSymbol('X', n, m)
A:sympy.matrices.expressions.tests.test_indexing.Y->MatrixSymbol('Y', m, k)
A:sympy.matrices.expressions.tests.test_indexing.Z->ZeroMatrix(3, 3)
A:sympy.matrices.expressions.tests.test_indexing.A->MatrixSymbol('A', 2, 2)
A:sympy.matrices.expressions.tests.test_indexing.B->BlockMatrix([[I, I], [I, I]])
A:sympy.matrices.expressions.tests.test_indexing.x->MatrixSymbol('x', 1, 2)
A:sympy.matrices.expressions.tests.test_indexing.y->MatrixSymbol('x', 2, 1)
A:sympy.matrices.expressions.tests.test_indexing.expected->Sum(X[4, i] * Y[i, 2], (i, 0, m - 1))
A:sympy.matrices.expressions.tests.test_indexing.Q->MatPow(A, 2)
A:sympy.matrices.expressions.tests.test_indexing.I->Identity(3)
A:sympy.matrices.expressions.tests.test_indexing.e3->ImmutableMatrix(eye(3))
A:sympy.matrices.expressions.tests.test_indexing.BB->BlockMatrix([[e3, e3], [e3, e3]])
A:sympy.matrices.expressions.tests.test_indexing.BI->BlockMatrix([[I, Z], [Z, I]])
sympy.expressions.tests.test_indexing.test_Identity_index()
sympy.expressions.tests.test_indexing.test_add_index()
sympy.expressions.tests.test_indexing.test_block_index()
sympy.expressions.tests.test_indexing.test_errors()
sympy.expressions.tests.test_indexing.test_mul_index()
sympy.expressions.tests.test_indexing.test_pow_index()
sympy.expressions.tests.test_indexing.test_slicing()
sympy.expressions.tests.test_indexing.test_symbolic_indexing()
sympy.expressions.tests.test_indexing.test_transpose_index()
sympy.matrices.expressions.tests.test_indexing.test_Identity_index()
sympy.matrices.expressions.tests.test_indexing.test_add_index()
sympy.matrices.expressions.tests.test_indexing.test_block_index()
sympy.matrices.expressions.tests.test_indexing.test_errors()
sympy.matrices.expressions.tests.test_indexing.test_mul_index()
sympy.matrices.expressions.tests.test_indexing.test_pow_index()
sympy.matrices.expressions.tests.test_indexing.test_slicing()
sympy.matrices.expressions.tests.test_indexing.test_symbolic_indexing()
sympy.matrices.expressions.tests.test_indexing.test_transpose_index()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_matmul.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matmul.(n, m, l, k)->symbols('n m l k', integer=True)
A:sympy.matrices.expressions.tests.test_matmul.A->Matrix([[1, 1], [1, 1]])
A:sympy.matrices.expressions.tests.test_matmul.B->Matrix([[1, 2], [3, 4]])
A:sympy.matrices.expressions.tests.test_matmul.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matmul.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matmul.E->MatrixSymbol('E', m, n)
A:sympy.matrices.expressions.tests.test_matmul.M->Matrix(2, 2, [1, 2 + I, 3, 4])
A:sympy.matrices.expressions.tests.test_matmul.MA->Matrix(2, 2, [1, 3, 2 - I, 4])
A:sympy.matrices.expressions.tests.test_matmul.MT->Matrix(2, 2, [1, 3, 2 + I, 4])
A:sympy.matrices.expressions.tests.test_matmul.x->MatMul(A, B)
sympy.expressions.tests.test_matmul.test_adjoint()
sympy.expressions.tests.test_matmul.test_any_zeros()
sympy.expressions.tests.test_matmul.test_collapse_MatrixBase()
sympy.expressions.tests.test_matmul.test_determinant()
sympy.expressions.tests.test_matmul.test_doit()
sympy.expressions.tests.test_matmul.test_factor_in_front()
sympy.expressions.tests.test_matmul.test_matmul_sympify()
sympy.expressions.tests.test_matmul.test_only_squares()
sympy.expressions.tests.test_matmul.test_refine()
sympy.expressions.tests.test_matmul.test_remove_ids()
sympy.expressions.tests.test_matmul.test_transpose()
sympy.expressions.tests.test_matmul.test_unpack()
sympy.expressions.tests.test_matmul.test_xxinv()
sympy.matrices.expressions.tests.test_matmul.test_adjoint()
sympy.matrices.expressions.tests.test_matmul.test_any_zeros()
sympy.matrices.expressions.tests.test_matmul.test_collapse_MatrixBase()
sympy.matrices.expressions.tests.test_matmul.test_determinant()
sympy.matrices.expressions.tests.test_matmul.test_doit()
sympy.matrices.expressions.tests.test_matmul.test_factor_in_front()
sympy.matrices.expressions.tests.test_matmul.test_matmul_sympify()
sympy.matrices.expressions.tests.test_matmul.test_only_squares()
sympy.matrices.expressions.tests.test_matmul.test_refine()
sympy.matrices.expressions.tests.test_matmul.test_remove_ids()
sympy.matrices.expressions.tests.test_matmul.test_transpose()
sympy.matrices.expressions.tests.test_matmul.test_unpack()
sympy.matrices.expressions.tests.test_matmul.test_xxinv()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_matpow.py----------------------------------------
A:sympy.matrices.expressions.tests.test_matpow.(n, m, l, k)->symbols('n m l k', integer=True)
A:sympy.matrices.expressions.tests.test_matpow.A->ImmutableMatrix([[1, 2, 3], [4, 5, 6]])
A:sympy.matrices.expressions.tests.test_matpow.B->MatrixSymbol('B', m, l)
A:sympy.matrices.expressions.tests.test_matpow.C->MatrixSymbol('C', n, n)
A:sympy.matrices.expressions.tests.test_matpow.D->MatrixSymbol('D', n, n)
A:sympy.matrices.expressions.tests.test_matpow.E->MatrixSymbol('E', m, n)
sympy.expressions.tests.test_matpow.test_as_explicit()
sympy.expressions.tests.test_matpow.test_as_explicit_nonsquare()
sympy.expressions.tests.test_matpow.test_entry()
sympy.matrices.expressions.tests.test_matpow.test_as_explicit()
sympy.matrices.expressions.tests.test_matpow.test_as_explicit_nonsquare()
sympy.matrices.expressions.tests.test_matpow.test_entry()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/matrices/expressions/tests/test_determinant.py----------------------------------------
A:sympy.matrices.expressions.tests.test_determinant.n->symbols('n', integer=True)
A:sympy.matrices.expressions.tests.test_determinant.A->MatrixSymbol('A', n, n)
A:sympy.matrices.expressions.tests.test_determinant.B->MatrixSymbol('B', n, n)
A:sympy.matrices.expressions.tests.test_determinant.C->MatrixSymbol('C', 3, 4)
sympy.expressions.tests.test_determinant.test_det()
sympy.expressions.tests.test_determinant.test_eval_determinant()
sympy.expressions.tests.test_determinant.test_refine()
sympy.matrices.expressions.tests.test_determinant.test_det()
sympy.matrices.expressions.tests.test_determinant.test_eval_determinant()
sympy.matrices.expressions.tests.test_determinant.test_refine()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_g.py----------------------------------------
A:sympy.liealgebras.type_g.m->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.type_g.TypeG(cls,n)
sympy.liealgebras.type_g.TypeG.__new__(cls,n)
sympy.liealgebras.type_g.TypeG.basis(self)
sympy.liealgebras.type_g.TypeG.cartan_matrix(self)
sympy.liealgebras.type_g.TypeG.dimension(self)
sympy.liealgebras.type_g.TypeG.dynkin_diagram(self)
sympy.liealgebras.type_g.TypeG.positive_roots(self)
sympy.liealgebras.type_g.TypeG.roots(self)
sympy.liealgebras.type_g.TypeG.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_b.py----------------------------------------
A:sympy.liealgebras.type_b.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_b.root->self.basic_root(i, j)
sympy.liealgebras.type_b.TypeB(cls,n)
sympy.liealgebras.type_b.TypeB.__new__(cls,n)
sympy.liealgebras.type_b.TypeB.basic_root(self,i,j)
sympy.liealgebras.type_b.TypeB.basis(self)
sympy.liealgebras.type_b.TypeB.cartan_matrix(self)
sympy.liealgebras.type_b.TypeB.dimension(self)
sympy.liealgebras.type_b.TypeB.dynkin_diagram(self)
sympy.liealgebras.type_b.TypeB.lie_algebra(self)
sympy.liealgebras.type_b.TypeB.positive_roots(self)
sympy.liealgebras.type_b.TypeB.roots(self)
sympy.liealgebras.type_b.TypeB.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/root_system.py----------------------------------------
A:sympy.liealgebras.root_system.obj->sympy.core.Basic.__new__(cls, cartantype)
A:sympy.liealgebras.root_system.obj.cartan_type->CartanType(cartantype)
A:sympy.liealgebras.root_system.n->self.cartan_type.rank()
A:sympy.liealgebras.root_system.root->self.cartan_type.simple_root(i)
A:sympy.liealgebras.root_system.alpha->self.all_roots()
A:sympy.liealgebras.root_system.keys->list(alpha.keys())
A:sympy.liealgebras.root_system.k->max(keys)
A:sympy.liealgebras.root_system.rs->' + '.join(('alpha[' + str(i) + ']' for i in range(1, n + 1)))
A:sympy.liealgebras.root_system.length->len(a1)
sympy.liealgebras.root_system.RootSystem(cls,cartantype)
sympy.liealgebras.root_system.RootSystem.__new__(cls,cartantype)
sympy.liealgebras.root_system.RootSystem.add_as_roots(self,root1,root2)
sympy.liealgebras.root_system.RootSystem.add_simple_roots(self,root1,root2)
sympy.liealgebras.root_system.RootSystem.all_roots(self)
sympy.liealgebras.root_system.RootSystem.cartan_matrix(self)
sympy.liealgebras.root_system.RootSystem.dynkin_diagram(self)
sympy.liealgebras.root_system.RootSystem.root_space(self)
sympy.liealgebras.root_system.RootSystem.simple_roots(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/dynkin_diagram.py----------------------------------------
sympy.liealgebras.dynkin_diagram.DynkinDiagram(t)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_d.py----------------------------------------
A:sympy.liealgebras.type_d.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_d.root->self.basic_root(i, j)
sympy.liealgebras.type_d.TypeD(cls,n)
sympy.liealgebras.type_d.TypeD.__new__(cls,n)
sympy.liealgebras.type_d.TypeD.basic_root(self,i,j)
sympy.liealgebras.type_d.TypeD.basis(self)
sympy.liealgebras.type_d.TypeD.cartan_matrix(self)
sympy.liealgebras.type_d.TypeD.dimension(self)
sympy.liealgebras.type_d.TypeD.dynkin_diagram(self)
sympy.liealgebras.type_d.TypeD.lie_algebra(self)
sympy.liealgebras.type_d.TypeD.positive_roots(self)
sympy.liealgebras.type_d.TypeD.roots(self)
sympy.liealgebras.type_d.TypeD.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/weyl_group.py----------------------------------------
A:sympy.liealgebras.weyl_group.obj->sympy.core.Basic.__new__(cls, cartantype)
A:sympy.liealgebras.weyl_group.obj.cartan_type->CartanType(cartantype)
A:sympy.liealgebras.weyl_group.n->self.cartan_type.rank()
A:sympy.liealgebras.weyl_group.a->int(elt)
A:sympy.liealgebras.weyl_group.elts->list(weylelt)
A:sympy.liealgebras.weyl_group.m->self.delete_doubles(m)
A:sympy.liealgebras.weyl_group.copy->list(reflections)
A:sympy.liealgebras.weyl_group.matrixform->eye(n)
A:sympy.liealgebras.weyl_group.mat->eye(n)
A:sympy.liealgebras.weyl_group.gen1->Matrix([[1, 0, 0], [0, 0, 1], [0, 1, 0]])
A:sympy.liealgebras.weyl_group.gen2->Matrix([[Rational(2, 3), Rational(2, 3), -Rational(1, 3)], [Rational(2, 3), Rational(-1, 3), Rational(2, 3)], [Rational(-1, 3), Rational(2, 3), Rational(2, 3)]])
sympy.liealgebras.weyl_group.WeylGroup(cls,cartantype)
sympy.liealgebras.weyl_group.WeylGroup.__new__(cls,cartantype)
sympy.liealgebras.weyl_group.WeylGroup.coxeter_diagram(self)
sympy.liealgebras.weyl_group.WeylGroup.delete_doubles(self,reflections)
sympy.liealgebras.weyl_group.WeylGroup.element_order(self,weylelt)
sympy.liealgebras.weyl_group.WeylGroup.generators(self)
sympy.liealgebras.weyl_group.WeylGroup.group_name(self)
sympy.liealgebras.weyl_group.WeylGroup.group_order(self)
sympy.liealgebras.weyl_group.WeylGroup.matrix_form(self,weylelt)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_e.py----------------------------------------
A:sympy.liealgebras.type_e.root->self.basic_root(i, j)
A:sympy.liealgebras.type_e.root[0]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[1]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[2]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[3]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[4]->Rational(-1, 2)
A:sympy.liealgebras.type_e.root[5]->Rational(1, 2)
A:sympy.liealgebras.type_e.root[6]->Rational(1, 2)
sympy.liealgebras.type_e.TypeE(cls,n)
sympy.liealgebras.type_e.TypeE.__new__(cls,n)
sympy.liealgebras.type_e.TypeE.basic_root(self,i,j)
sympy.liealgebras.type_e.TypeE.basis(self)
sympy.liealgebras.type_e.TypeE.cartan_matrix(self)
sympy.liealgebras.type_e.TypeE.dimension(self)
sympy.liealgebras.type_e.TypeE.dynkin_diagram(self)
sympy.liealgebras.type_e.TypeE.positive_roots(self)
sympy.liealgebras.type_e.TypeE.roots(self)
sympy.liealgebras.type_e.TypeE.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/cartan_matrix.py----------------------------------------
sympy.liealgebras.cartan_matrix.CartanMatrix(ct)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_f.py----------------------------------------
A:sympy.liealgebras.type_f.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_f.root->self.basic_root(i, j)
A:sympy.liealgebras.type_f.root[i]->Rational(-1, 2)
A:sympy.liealgebras.type_f.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -2, 0, 0, -1, 2, -1, 0, 0, -1, 2])
sympy.liealgebras.type_f.TypeF(cls,n)
sympy.liealgebras.type_f.TypeF.__new__(cls,n)
sympy.liealgebras.type_f.TypeF.basic_root(self,i,j)
sympy.liealgebras.type_f.TypeF.basis(self)
sympy.liealgebras.type_f.TypeF.cartan_matrix(self)
sympy.liealgebras.type_f.TypeF.dimension(self)
sympy.liealgebras.type_f.TypeF.dynkin_diagram(self)
sympy.liealgebras.type_f.TypeF.positive_roots(self)
sympy.liealgebras.type_f.TypeF.roots(self)
sympy.liealgebras.type_f.TypeF.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_c.py----------------------------------------
A:sympy.liealgebras.type_c.posroots[k]->self.basic_root(i, j)
A:sympy.liealgebras.type_c.root->self.basic_root(i, j)
sympy.liealgebras.type_c.TypeC(cls,n)
sympy.liealgebras.type_c.TypeC.__new__(cls,n)
sympy.liealgebras.type_c.TypeC.basic_root(self,i,j)
sympy.liealgebras.type_c.TypeC.basis(self)
sympy.liealgebras.type_c.TypeC.cartan_matrix(self)
sympy.liealgebras.type_c.TypeC.dimension(self)
sympy.liealgebras.type_c.TypeC.dynkin_diagram(self)
sympy.liealgebras.type_c.TypeC.lie_algebra(self)
sympy.liealgebras.type_c.TypeC.positive_roots(self)
sympy.liealgebras.type_c.TypeC.roots(self)
sympy.liealgebras.type_c.TypeC.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/cartan_type.py----------------------------------------
A:sympy.liealgebras.cartan_type.c->list(c)
A:sympy.liealgebras.cartan_type.CartanType->CartanType_generator()
A:sympy.liealgebras.cartan_type.obj->sympy.core.Basic.__new__(cls, series, n)
sympy.liealgebras.CartanType_generator(self,*args)
sympy.liealgebras.cartan_type.CartanType_generator(self,*args)
sympy.liealgebras.cartan_type.CartanType_generator.__call__(self,*args)
sympy.liealgebras.cartan_type.Standard_Cartan(cls,series,n)
sympy.liealgebras.cartan_type.Standard_Cartan.__new__(cls,series,n)
sympy.liealgebras.cartan_type.Standard_Cartan.rank(self)
sympy.liealgebras.cartan_type.Standard_Cartan.series(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/type_a.py----------------------------------------
A:sympy.liealgebras.type_a.posroots[k]->self.basic_root(i, j)
sympy.liealgebras.type_a.TypeA(cls,n)
sympy.liealgebras.type_a.TypeA.__new__(cls,n)
sympy.liealgebras.type_a.TypeA.basic_root(self,i,j)
sympy.liealgebras.type_a.TypeA.basis(self)
sympy.liealgebras.type_a.TypeA.cartan_matrix(self)
sympy.liealgebras.type_a.TypeA.dimension(self)
sympy.liealgebras.type_a.TypeA.dynkin_diagram(self)
sympy.liealgebras.type_a.TypeA.highest_root(self)
sympy.liealgebras.type_a.TypeA.lie_algebra(self)
sympy.liealgebras.type_a.TypeA.positive_roots(self)
sympy.liealgebras.type_a.TypeA.roots(self)
sympy.liealgebras.type_a.TypeA.simple_root(self,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_root_system.py----------------------------------------
A:sympy.liealgebras.tests.test_root_system.c->RootSystem('A3')
sympy.liealgebras.tests.test_root_system.test_root_system()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_weyl_group.py----------------------------------------
A:sympy.liealgebras.tests.test_weyl_group.c->WeylGroup('A3')
A:sympy.liealgebras.tests.test_weyl_group.d->WeylGroup('B5')
A:sympy.liealgebras.tests.test_weyl_group.e->WeylGroup('D5')
A:sympy.liealgebras.tests.test_weyl_group.f->WeylGroup('G2')
A:sympy.liealgebras.tests.test_weyl_group.g->WeylGroup('F4')
A:sympy.liealgebras.tests.test_weyl_group.h->WeylGroup('E6')
sympy.liealgebras.tests.test_weyl_group.test_weyl_group()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_F.py----------------------------------------
A:sympy.liealgebras.tests.test_type_F.c->CartanType('F4')
A:sympy.liealgebras.tests.test_type_F.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -2, 0, 0, -1, 2, -1, 0, 0, -1, 2])
sympy.liealgebras.tests.test_type_F.test_type_F()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_dynkin_diagram.py----------------------------------------
A:sympy.liealgebras.tests.test_dynkin_diagram.c->DynkinDiagram('A3')
A:sympy.liealgebras.tests.test_dynkin_diagram.ct->DynkinDiagram(['B', 3])
sympy.liealgebras.tests.test_dynkin_diagram.test_DynkinDiagram()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_A.py----------------------------------------
A:sympy.liealgebras.tests.test_type_A.c->CartanType('A3')
A:sympy.liealgebras.tests.test_type_A.m->Matrix(3, 3, [2, -1, 0, -1, 2, -1, 0, -1, 2])
sympy.liealgebras.tests.test_type_A.test_type_A()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_cartan_type.py----------------------------------------
A:sympy.liealgebras.tests.test_cartan_type.c->CartanType('A4')
A:sympy.liealgebras.tests.test_cartan_type.m->Standard_Cartan('A', 2)
sympy.liealgebras.tests.test_cartan_type.test_Standard_Cartan()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_cartan_matrix.py----------------------------------------
A:sympy.liealgebras.tests.test_cartan_matrix.c->CartanMatrix('A3')
A:sympy.liealgebras.tests.test_cartan_matrix.m->Matrix(3, 3, [2, -1, 0, -1, 2, -1, 0, -1, 2])
A:sympy.liealgebras.tests.test_cartan_matrix.a->CartanMatrix(['G', 2])
A:sympy.liealgebras.tests.test_cartan_matrix.mt->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.tests.test_cartan_matrix.test_CartanMatrix()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_B.py----------------------------------------
A:sympy.liealgebras.tests.test_type_B.c->CartanType('B3')
A:sympy.liealgebras.tests.test_type_B.m->Matrix(3, 3, [2, -1, 0, -1, 2, -2, 0, -1, 2])
sympy.liealgebras.tests.test_type_B.test_type_B()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_D.py----------------------------------------
A:sympy.liealgebras.tests.test_type_D.c->CartanType('D4')
A:sympy.liealgebras.tests.test_type_D.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -1, -1, 0, -1, 2, 0, 0, -1, 0, 2])
sympy.liealgebras.tests.test_type_D.test_type_D()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_E.py----------------------------------------
A:sympy.liealgebras.tests.test_type_E.c->CartanType('E6')
A:sympy.liealgebras.tests.test_type_E.m->Matrix(6, 6, [2, 0, -1, 0, 0, 0, 0, 2, 0, -1, 0, 0, -1, 0, 2, -1, 0, 0, 0, -1, -1, 2, -1, 0, 0, 0, 0, -1, 2, -1, 0, 0, 0, 0, -1, 2])
A:sympy.liealgebras.tests.test_type_E.posroots->CartanType('E6').positive_roots()
sympy.liealgebras.tests.test_type_E.test_type_E()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_C.py----------------------------------------
A:sympy.liealgebras.tests.test_type_C.c->CartanType('C4')
A:sympy.liealgebras.tests.test_type_C.m->Matrix(4, 4, [2, -1, 0, 0, -1, 2, -1, 0, 0, -1, 2, -1, 0, 0, -2, 2])
A:sympy.liealgebras.tests.test_type_C.t->CartanType(['C', 3])
sympy.liealgebras.tests.test_type_C.test_type_C()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/liealgebras/tests/test_type_G.py----------------------------------------
A:sympy.liealgebras.tests.test_type_G.c->CartanType('G2')
A:sympy.liealgebras.tests.test_type_G.m->Matrix(2, 2, [2, -1, -3, 2])
sympy.liealgebras.tests.test_type_G.test_type_G()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/scalar.py----------------------------------------
A:sympy.vector.scalar.obj->super(BaseScalar, cls).__new__(cls, name)
A:sympy.vector.scalar.obj._pretty_form->u(pretty_str)
sympy.vector.BaseScalar(cls,name,index,system,pretty_str,latex_str)
sympy.vector.BaseScalar.__eq__(self,other)
sympy.vector.BaseScalar.__hash__(self)
sympy.vector.BaseScalar.__ne__(self,other)
sympy.vector.BaseScalar.__str__(self,printer=None)
sympy.vector.BaseScalar._latex(self,printer=None)
sympy.vector.BaseScalar._pretty(self,printer=None)
sympy.vector.BaseScalar.system(self)
sympy.vector.scalar.BaseScalar(cls,name,index,system,pretty_str,latex_str)
sympy.vector.scalar.BaseScalar.__eq__(self,other)
sympy.vector.scalar.BaseScalar.__hash__(self)
sympy.vector.scalar.BaseScalar.__ne__(self,other)
sympy.vector.scalar.BaseScalar.__new__(cls,name,index,system,pretty_str,latex_str)
sympy.vector.scalar.BaseScalar.__str__(self,printer=None)
sympy.vector.scalar.BaseScalar._latex(self,printer=None)
sympy.vector.scalar.BaseScalar._pretty(self,printer=None)
sympy.vector.scalar.BaseScalar.system(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/dyadic.py----------------------------------------
A:sympy.vector.dyadic.vect_dot->k1.args[1].dot(k2.args[0])
A:sympy.vector.dyadic.outer_product->k1.args[0].outer(k2.args[1])
A:sympy.vector.dyadic.cross_product->k.args[1].cross(other)
A:sympy.vector.dyadic.outer->k.args[0].outer(cross_product)
A:sympy.vector.dyadic.obj->sympy.vector.basisdependent.BasisDependentZero.__new__(cls)
A:sympy.vector.dyadic.obj._pretty_form->u('(' + vector1._pretty_form + '|' + vector2._pretty_form + ')')
A:sympy.vector.dyadic.items->list(self.components.items())
A:sympy.vector.dyadic._pretty_form->u('(0|0)')
A:sympy.vector.dyadic.Dyadic.zero->DyadicZero()
sympy.vector.BaseDyadic(cls,vector1,vector2)
sympy.vector.BaseDyadic.__str__(self,printer=None)
sympy.vector.Dyadic(BasisDependent)
sympy.vector.Dyadic.__and__(self,other)
sympy.vector.Dyadic.__xor__(self,other)
sympy.vector.Dyadic.components(self)
sympy.vector.Dyadic.cross(self,other)
sympy.vector.Dyadic.dot(self,other)
sympy.vector.Dyadic.to_matrix(self,system,second_system=None)
sympy.vector.DyadicAdd(cls,*args,**options)
sympy.vector.DyadicAdd.__str__(self,printer=None)
sympy.vector.DyadicMul(cls,*args,**options)
sympy.vector.DyadicMul.base_dyadic(self)
sympy.vector.DyadicMul.measure_number(self)
sympy.vector.DyadicZero(cls)
sympy.vector.dyadic.BaseDyadic(cls,vector1,vector2)
sympy.vector.dyadic.BaseDyadic.__new__(cls,vector1,vector2)
sympy.vector.dyadic.BaseDyadic.__str__(self,printer=None)
sympy.vector.dyadic.Dyadic(BasisDependent)
sympy.vector.dyadic.Dyadic.__and__(self,other)
sympy.vector.dyadic.Dyadic.__xor__(self,other)
sympy.vector.dyadic.Dyadic.components(self)
sympy.vector.dyadic.Dyadic.cross(self,other)
sympy.vector.dyadic.Dyadic.dot(self,other)
sympy.vector.dyadic.Dyadic.to_matrix(self,system,second_system=None)
sympy.vector.dyadic.DyadicAdd(cls,*args,**options)
sympy.vector.dyadic.DyadicAdd.__new__(cls,*args,**options)
sympy.vector.dyadic.DyadicAdd.__str__(self,printer=None)
sympy.vector.dyadic.DyadicMul(cls,*args,**options)
sympy.vector.dyadic.DyadicMul.__new__(cls,*args,**options)
sympy.vector.dyadic.DyadicMul.base_dyadic(self)
sympy.vector.dyadic.DyadicMul.measure_number(self)
sympy.vector.dyadic.DyadicZero(cls)
sympy.vector.dyadic.DyadicZero.__new__(cls)
sympy.vector.dyadic._dyad_div(one,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/deloperator.py----------------------------------------
A:sympy.vector.deloperator.obj->super(Del, cls).__new__(cls, system)
A:sympy.vector.deloperator.scalar_field->express(scalar_field, self.system, variables=True)
A:sympy.vector.deloperator.vx->_diff_conditional(vect.dot(self._i), self._x)
A:sympy.vector.deloperator.vy->_diff_conditional(vect.dot(self._j), self._y)
A:sympy.vector.deloperator.vz->_diff_conditional(vect.dot(self._k), self._z)
A:sympy.vector.deloperator.vectx->express(vect.dot(self._i), self.system, variables=True)
A:sympy.vector.deloperator.vecty->express(vect.dot(self._j), self.system, variables=True)
A:sympy.vector.deloperator.vectz->express(vect.dot(self._k), self.system, variables=True)
A:sympy.vector.deloperator.new_expr->express(expr, base_scalar.system, variables=True)
sympy.vector.Del(cls,system)
sympy.vector.Del.__str__(self,printer=None)
sympy.vector.Del.cross(self,vect,doit=False)
sympy.vector.Del.dot(self,vect,doit=False)
sympy.vector.Del.gradient(self,scalar_field,doit=False)
sympy.vector.Del.system(self)
sympy.vector.deloperator.Del(cls,system)
sympy.vector.deloperator.Del.__new__(cls,system)
sympy.vector.deloperator.Del.__str__(self,printer=None)
sympy.vector.deloperator.Del.cross(self,vect,doit=False)
sympy.vector.deloperator.Del.dot(self,vect,doit=False)
sympy.vector.deloperator.Del.gradient(self,scalar_field,doit=False)
sympy.vector.deloperator.Del.system(self)
sympy.vector.deloperator._diff_conditional(expr,base_scalar)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/orienters.py----------------------------------------
A:sympy.vector.orienters.angle->sympify(angle)
A:sympy.vector.orienters.obj->super(QuaternionOrienter, cls).__new__(cls, q0, q1, q2, q3)
A:sympy.vector.orienters.axis->axis.to_matrix(system).to_matrix(system)
A:sympy.vector.orienters.rot_order->''.join(rot_order)
A:sympy.vector.orienters.a1->int(rot_order[0])
A:sympy.vector.orienters.a2->int(rot_order[1])
A:sympy.vector.orienters.a3->int(rot_order[2])
A:sympy.vector.orienters.angle1->sympify(angle1)
A:sympy.vector.orienters.angle2->sympify(angle2)
A:sympy.vector.orienters.angle3->sympify(angle3)
A:sympy.vector.orienters.q0->sympify(q0)
A:sympy.vector.orienters.q1->sympify(q1)
A:sympy.vector.orienters.q2->sympify(q2)
A:sympy.vector.orienters.q3->sympify(q3)
A:sympy.vector.orienters.parent_orient->Matrix([[q0 ** 2 + q1 ** 2 - q2 ** 2 - q3 ** 2, 2 * (q1 * q2 - q0 * q3), 2 * (q0 * q2 + q1 * q3)], [2 * (q1 * q2 + q0 * q3), q0 ** 2 - q1 ** 2 + q2 ** 2 - q3 ** 2, 2 * (q2 * q3 - q0 * q1)], [2 * (q1 * q3 - q0 * q2), 2 * (q0 * q1 + q2 * q3), q0 ** 2 - q1 ** 2 - q2 ** 2 + q3 ** 2]])
sympy.vector.AxisOrienter(self,angle,axis)
sympy.vector.AxisOrienter.angle(self)
sympy.vector.AxisOrienter.axis(self)
sympy.vector.AxisOrienter.rotation_matrix(self,system)
sympy.vector.BodyOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.QuaternionOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.QuaternionOrienter.q0(self)
sympy.vector.QuaternionOrienter.q1(self)
sympy.vector.QuaternionOrienter.q2(self)
sympy.vector.QuaternionOrienter.q3(self)
sympy.vector.SpaceOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.AxisOrienter(self,angle,axis)
sympy.vector.orienters.AxisOrienter.__init__(self,angle,axis)
sympy.vector.orienters.AxisOrienter.angle(self)
sympy.vector.orienters.AxisOrienter.axis(self)
sympy.vector.orienters.AxisOrienter.rotation_matrix(self,system)
sympy.vector.orienters.BodyOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.BodyOrienter.__init__(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.Orienter(Basic)
sympy.vector.orienters.Orienter.rotation_matrix(self)
sympy.vector.orienters.QuaternionOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.QuaternionOrienter.__init__(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.QuaternionOrienter.q0(self)
sympy.vector.orienters.QuaternionOrienter.q1(self)
sympy.vector.orienters.QuaternionOrienter.q2(self)
sympy.vector.orienters.QuaternionOrienter.q3(self)
sympy.vector.orienters.SpaceOrienter(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.SpaceOrienter.__init__(self,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.ThreeAngleOrienter(cls,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.ThreeAngleOrienter.__new__(cls,angle1,angle2,angle3,rot_order)
sympy.vector.orienters.ThreeAngleOrienter.angle1(self)
sympy.vector.orienters.ThreeAngleOrienter.angle2(self)
sympy.vector.orienters.ThreeAngleOrienter.angle3(self)
sympy.vector.orienters.ThreeAngleOrienter.rot_order(self)
sympy.vector.orienters._rot(axis,angle)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/functions.py----------------------------------------
A:sympy.vector.functions.system_list->set(system_list)
A:sympy.vector.functions.expr->sympify(expr)
A:sympy.vector.functions.parts->sympify(expr).separate()
A:sympy.vector.functions.system_set->set([])
A:sympy.vector.functions.field->express(field, coord_sys, variables=True)
A:sympy.vector.functions.dimensions->coord_sys.base_vectors()
A:sympy.vector.functions.scalars->coord_sys.base_scalars()
A:sympy.vector.functions.temp_function->integrate(field.dot(dimensions[0]), scalars[0])
A:sympy.vector.functions.partial_diff->diff(temp_function, scalars[i + 1])
A:sympy.vector.functions.scalar_fn->scalar_potential(field, coord_sys)
A:sympy.vector.functions.position1->express(point1.position_wrt(origin), coord_sys, variables=True)
A:sympy.vector.functions.position2->express(point2.position_wrt(origin), coord_sys, variables=True)
A:sympy.vector.functions.subs_dict1[scalars[i]]->x.dot(position1)
A:sympy.vector.functions.subs_dict2[scalars[i]]->x.dot(position2)
A:sympy.vector.functions.vects->system.base_vectors()
A:sympy.vector.functions.object_set->set(other_path)
A:sympy.vector.functions.index->len(from_path)
A:sympy.vector.functions.i->other_path.index(obj)
sympy.vector._path(from_object,to_object)
sympy.vector.curl(vect,coord_sys)
sympy.vector.divergence(vect,coord_sys)
sympy.vector.express(expr,system,system2=None,variables=False)
sympy.vector.functions._path(from_object,to_object)
sympy.vector.functions.curl(vect,coord_sys)
sympy.vector.functions.divergence(vect,coord_sys)
sympy.vector.functions.express(expr,system,system2=None,variables=False)
sympy.vector.functions.gradient(scalar,coord_sys)
sympy.vector.functions.is_conservative(field)
sympy.vector.functions.is_solenoidal(field)
sympy.vector.functions.matrix_to_vector(matrix,system)
sympy.vector.functions.scalar_potential(field,coord_sys)
sympy.vector.functions.scalar_potential_difference(field,coord_sys,point1,point2)
sympy.vector.gradient(scalar,coord_sys)
sympy.vector.is_conservative(field)
sympy.vector.is_solenoidal(field)
sympy.vector.matrix_to_vector(matrix,system)
sympy.vector.scalar_potential(field,coord_sys)
sympy.vector.scalar_potential_difference(field,coord_sys,point1,point2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/basisdependent.py----------------------------------------
A:sympy.vector.basisdependent.arg->cls._add_func(*arg.args)
A:sympy.vector.basisdependent.temp->list(components.keys())
A:sympy.vector.basisdependent.obj->super(BasisDependentZero, cls).__new__(cls)
A:sympy.vector.basisdependent.obj._assumptions->StdFactKB(assumptions)
A:sympy.vector.basisdependent.measure_number->S(1)
A:sympy.vector.basisdependent.measure_str->self._measure_number.__str__()
A:sympy.vector.basisdependent.obj._hash->tuple([S(0), cls]).__hash__()
sympy.vector.basisdependent.BasisDependent(Expr)
sympy.vector.basisdependent.BasisDependent.__add__(self,other)
sympy.vector.basisdependent.BasisDependent.__div__(self,other)
sympy.vector.basisdependent.BasisDependent.__mul__(self,other)
sympy.vector.basisdependent.BasisDependent.__neg__(self)
sympy.vector.basisdependent.BasisDependent.__radd__(self,other)
sympy.vector.basisdependent.BasisDependent.__rdiv__(self,other)
sympy.vector.basisdependent.BasisDependent.__rmul__(self,other)
sympy.vector.basisdependent.BasisDependent.__rsub__(self,other)
sympy.vector.basisdependent.BasisDependent.__sub__(self,other)
sympy.vector.basisdependent.BasisDependent._eval_Integral(self,*symbols,**assumptions)
sympy.vector.basisdependent.BasisDependent._eval_derivative(self,wrt)
sympy.vector.basisdependent.BasisDependent._eval_diff(self,*args,**kwargs)
sympy.vector.basisdependent.BasisDependent._eval_simplify(self,ratio,measure)
sympy.vector.basisdependent.BasisDependent._eval_trigsimp(self,**opts)
sympy.vector.basisdependent.BasisDependent.as_coeff_Mul(self,rational=False)
sympy.vector.basisdependent.BasisDependent.as_coeff_add(self,*deps)
sympy.vector.basisdependent.BasisDependent.as_numer_denom(self)
sympy.vector.basisdependent.BasisDependent.diff(self,*args,**kwargs)
sympy.vector.basisdependent.BasisDependent.doit(self,**hints)
sympy.vector.basisdependent.BasisDependent.evalf(self,prec=None,**options)
sympy.vector.basisdependent.BasisDependent.factor(self,*args,**kwargs)
sympy.vector.basisdependent.BasisDependent.simplify(self,ratio=1.7,measure=count_ops)
sympy.vector.basisdependent.BasisDependent.trigsimp(self,**opts)
sympy.vector.basisdependent.BasisDependentAdd(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentAdd.__new__(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentMul(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentMul.__new__(cls,*args,**options)
sympy.vector.basisdependent.BasisDependentMul.__str__(self,printer=None)
sympy.vector.basisdependent.BasisDependentZero(cls)
sympy.vector.basisdependent.BasisDependentZero.__add__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__eq__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__hash__(self)
sympy.vector.basisdependent.BasisDependentZero.__neg__(self)
sympy.vector.basisdependent.BasisDependentZero.__new__(cls)
sympy.vector.basisdependent.BasisDependentZero.__radd__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__rsub__(self,other)
sympy.vector.basisdependent.BasisDependentZero.__str__(self,printer=None)
sympy.vector.basisdependent.BasisDependentZero.__sub__(self,other)
sympy.vector.basisdependent.BasisDependentZero.normalize(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/point.py----------------------------------------
A:sympy.vector.point.arg_parent->Symbol('default')
A:sympy.vector.point.arg_self->Symbol('default')
A:sympy.vector.point.obj->super(Point, cls).__new__(cls, arg_self, position, arg_parent)
A:sympy.vector.point.(rootindex, path)->_path(self, other)
A:sympy.vector.point.pos_vect->self.position_wrt(coordinate_system.origin)
sympy.vector.Point(cls,name,position=Vector.zero,parent_point=None)
sympy.vector.Point.__str__(self,printer=None)
sympy.vector.Point.express_coordinates(self,coordinate_system)
sympy.vector.Point.locate_new(self,name,position)
sympy.vector.Point.position_wrt(self,other)
sympy.vector.point.Point(cls,name,position=Vector.zero,parent_point=None)
sympy.vector.point.Point.__new__(cls,name,position=Vector.zero,parent_point=None)
sympy.vector.point.Point.__str__(self,printer=None)
sympy.vector.point.Point.express_coordinates(self,coordinate_system)
sympy.vector.point.Point.locate_new(self,name,position)
sympy.vector.point.Point.position_wrt(self,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/vector.py----------------------------------------
A:sympy.vector.vector.vect_dot->k.args[0].dot(self)
A:sympy.vector.vector.field->express(field, other.system, variables=True)
A:sympy.vector.vector.v1->express(self, other._sys)
A:sympy.vector.vector.v2->express(other, other._sys)
A:sympy.vector.vector.dotproduct->S(0)
A:sympy.vector.vector.cross_product->self.cross(k.args[0])
A:sympy.vector.vector.outer->self.cross(k.args[0]).outer(k.args[1])
A:sympy.vector.vector.obj->sympy.vector.basisdependent.BasisDependentZero.__new__(cls)
A:sympy.vector.vector.obj._measure_number->S(1)
A:sympy.vector.vector.obj._pretty_form->u(pretty_str)
A:sympy.vector.vector.obj._assumptions->StdFactKB(assumptions)
A:sympy.vector.vector.items->list(self.separate().items())
A:sympy.vector.vector.base_vects->system.base_vectors()
A:sympy.vector.vector._pretty_form->u('0')
A:sympy.vector.vector.Vector.zero->VectorZero()
sympy.vector.BaseVector(cls,name,index,system,pretty_str,latex_str)
sympy.vector.BaseVector.__str__(self,printer=None)
sympy.vector.BaseVector.system(self)
sympy.vector.Vector(BasisDependent)
sympy.vector.Vector.__and__(self,other)
sympy.vector.Vector.__or__(self,other)
sympy.vector.Vector.__xor__(self,other)
sympy.vector.Vector.components(self)
sympy.vector.Vector.cross(self,other)
sympy.vector.Vector.dot(self,other)
sympy.vector.Vector.magnitude(self)
sympy.vector.Vector.normalize(self)
sympy.vector.Vector.outer(self,other)
sympy.vector.Vector.separate(self)
sympy.vector.Vector.to_matrix(self,system)
sympy.vector.VectorAdd(cls,*args,**options)
sympy.vector.VectorAdd.__str__(self,printer=None)
sympy.vector.VectorMul(cls,*args,**options)
sympy.vector.VectorMul.base_vector(self)
sympy.vector.VectorMul.measure_number(self)
sympy.vector.VectorZero(cls)
sympy.vector.vector.BaseVector(cls,name,index,system,pretty_str,latex_str)
sympy.vector.vector.BaseVector.__new__(cls,name,index,system,pretty_str,latex_str)
sympy.vector.vector.BaseVector.__str__(self,printer=None)
sympy.vector.vector.BaseVector.system(self)
sympy.vector.vector.Vector(BasisDependent)
sympy.vector.vector.Vector.__and__(self,other)
sympy.vector.vector.Vector.__or__(self,other)
sympy.vector.vector.Vector.__xor__(self,other)
sympy.vector.vector.Vector.components(self)
sympy.vector.vector.Vector.cross(self,other)
sympy.vector.vector.Vector.dot(self,other)
sympy.vector.vector.Vector.magnitude(self)
sympy.vector.vector.Vector.normalize(self)
sympy.vector.vector.Vector.outer(self,other)
sympy.vector.vector.Vector.separate(self)
sympy.vector.vector.Vector.to_matrix(self,system)
sympy.vector.vector.VectorAdd(cls,*args,**options)
sympy.vector.vector.VectorAdd.__new__(cls,*args,**options)
sympy.vector.vector.VectorAdd.__str__(self,printer=None)
sympy.vector.vector.VectorMul(cls,*args,**options)
sympy.vector.vector.VectorMul.__new__(cls,*args,**options)
sympy.vector.vector.VectorMul.base_vector(self)
sympy.vector.vector.VectorMul.measure_number(self)
sympy.vector.vector.VectorZero(cls)
sympy.vector.vector.VectorZero.__new__(cls)
sympy.vector.vector._vect_div(one,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/coordsysrect.py----------------------------------------
A:sympy.vector.coordsysrect.parent_orient->Matrix(eye(3))
A:sympy.vector.coordsysrect.origin->Point(name + '.origin')
A:sympy.vector.coordsysrect.arg_self->Symbol(name)
A:sympy.vector.coordsysrect.arg_parent->Symbol('default')
A:sympy.vector.coordsysrect.obj->super(CoordSysCartesian, cls).__new__(cls, arg_self, parent_orient, origin, arg_parent)
A:sympy.vector.coordsysrect.vector_names->list(vector_names)
A:sympy.vector.coordsysrect.obj._i->BaseVector(vector_names[0], 0, obj, pretty_vects[0], latex_vects[0])
A:sympy.vector.coordsysrect.obj._j->BaseVector(vector_names[1], 1, obj, pretty_vects[1], latex_vects[1])
A:sympy.vector.coordsysrect.obj._k->BaseVector(vector_names[2], 2, obj, pretty_vects[2], latex_vects[2])
A:sympy.vector.coordsysrect.variable_names->list(variable_names)
A:sympy.vector.coordsysrect.obj._x->BaseScalar(variable_names[0], 0, obj, pretty_scalars[0], latex_scalars[0])
A:sympy.vector.coordsysrect.obj._y->BaseScalar(variable_names[1], 1, obj, pretty_scalars[1], latex_scalars[1])
A:sympy.vector.coordsysrect.obj._z->BaseScalar(variable_names[2], 2, obj, pretty_scalars[2], latex_scalars[2])
A:sympy.vector.coordsysrect.obj._del->Del(obj)
A:sympy.vector.coordsysrect.(rootindex, path)->_path(self, other)
A:sympy.vector.coordsysrect.result->eye(3)
A:sympy.vector.coordsysrect.origin_coords->tuple(self.position_wrt(other).to_matrix(other))
A:sympy.vector.coordsysrect.mapping[x]->trigsimp(vars_matrix[i])
A:sympy.vector.coordsysrect.final_matrix->Matrix(eye(3))
A:sympy.vector.coordsysrect.orienter->QuaternionOrienter(q0, q1, q2, q3)
sympy.vector.CoordSysCartesian(self,name,location=None,rotation_matrix=None,parent=None,vector_names=None,variable_names=None,latex_vects=None,pretty_vects=None,latex_scalars=None,pretty_scalars=None)
sympy.vector.CoordSysCartesian.__iter__(self)
sympy.vector.CoordSysCartesian.__str__(self,printer=None)
sympy.vector.CoordSysCartesian.base_scalars(self)
sympy.vector.CoordSysCartesian.base_vectors(self)
sympy.vector.CoordSysCartesian.delop(self)
sympy.vector.CoordSysCartesian.i(self)
sympy.vector.CoordSysCartesian.j(self)
sympy.vector.CoordSysCartesian.k(self)
sympy.vector.CoordSysCartesian.locate_new(self,name,position,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.orient_new(self,name,orienters,location=None,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.orient_new_axis(self,name,angle,axis,location=None,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.orient_new_body(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.orient_new_quaternion(self,name,q0,q1,q2,q3,location=None,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.orient_new_space(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.CoordSysCartesian.origin(self)
sympy.vector.CoordSysCartesian.position_wrt(self,other)
sympy.vector.CoordSysCartesian.rotation_matrix(self,other)
sympy.vector.CoordSysCartesian.scalar_map(self,other)
sympy.vector.CoordSysCartesian.x(self)
sympy.vector.CoordSysCartesian.y(self)
sympy.vector.CoordSysCartesian.z(self)
sympy.vector.coordsysrect.CoordSysCartesian(self,name,location=None,rotation_matrix=None,parent=None,vector_names=None,variable_names=None,latex_vects=None,pretty_vects=None,latex_scalars=None,pretty_scalars=None)
sympy.vector.coordsysrect.CoordSysCartesian.__init__(self,name,location=None,rotation_matrix=None,parent=None,vector_names=None,variable_names=None,latex_vects=None,pretty_vects=None,latex_scalars=None,pretty_scalars=None)
sympy.vector.coordsysrect.CoordSysCartesian.__iter__(self)
sympy.vector.coordsysrect.CoordSysCartesian.__str__(self,printer=None)
sympy.vector.coordsysrect.CoordSysCartesian.base_scalars(self)
sympy.vector.coordsysrect.CoordSysCartesian.base_vectors(self)
sympy.vector.coordsysrect.CoordSysCartesian.delop(self)
sympy.vector.coordsysrect.CoordSysCartesian.i(self)
sympy.vector.coordsysrect.CoordSysCartesian.j(self)
sympy.vector.coordsysrect.CoordSysCartesian.k(self)
sympy.vector.coordsysrect.CoordSysCartesian.locate_new(self,name,position,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.orient_new(self,name,orienters,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.orient_new_axis(self,name,angle,axis,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.orient_new_body(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.orient_new_quaternion(self,name,q0,q1,q2,q3,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.orient_new_space(self,name,angle1,angle2,angle3,rotation_order,location=None,vector_names=None,variable_names=None)
sympy.vector.coordsysrect.CoordSysCartesian.origin(self)
sympy.vector.coordsysrect.CoordSysCartesian.position_wrt(self,other)
sympy.vector.coordsysrect.CoordSysCartesian.rotation_matrix(self,other)
sympy.vector.coordsysrect.CoordSysCartesian.scalar_map(self,other)
sympy.vector.coordsysrect.CoordSysCartesian.x(self)
sympy.vector.coordsysrect.CoordSysCartesian.y(self)
sympy.vector.coordsysrect.CoordSysCartesian.z(self)
sympy.vector.coordsysrect._check_strings(arg_name,arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_printing.py----------------------------------------
A:sympy.vector.tests.test_printing.N->CoordSysCartesian('N')
A:sympy.vector.tests.test_printing.C->CoordSysCartesian('N').orient_new_axis('C', a, N.k)
A:sympy.vector.tests.test_printing.f->Function('f')
A:sympy.vector.tests.test_printing.upretty_v_8->u('N_j + ⎛   2   ⌠        ⎞ N_k\n      ⎜C_x  - ⎮ f(b) db⎟    \n      ⎝       ⌡        ⎠    ')
A:sympy.vector.tests.test_printing.pretty_v_8->u('N_j + /         /       \\\n      |   2    |        |\n      |C_x  -  | f(b) db|\n      |        |        |\n      \\       /         / ')
A:sympy.vector.tests.test_printing.upretty_v_11->u('⎛ 2    ⎞ N_i + ⎛⌠        ⎞ N_k\n⎝a  + b⎠       ⎜⎮ f(b) db⎟    \n               ⎝⌡        ⎠    ')
A:sympy.vector.tests.test_printing.pretty_v_11->u('/ 2    \\ + /  /       \\\n\\a  + b/ N_i| |        |\n           | | f(b) db|\n           | |        |\n           \\/         / ')
A:sympy.vector.tests.test_printing.upretty_s->u('         2\n3⋅C_y⋅N_x ')
A:sympy.vector.tests.test_printing.pretty_s->u('         2\n3*C_y*N_x ')
A:sympy.vector.tests.test_printing.upretty_d_7->u('⎛ 2    ⎞ (N_i|N_k) + (3⋅C_y - 3⋅c) (N_k|N_k)\n⎝a  + b⎠                                    ')
A:sympy.vector.tests.test_printing.pretty_d_7->u('/ 2    \\ (N_i|N_k) + (3*C_y - 3*c) (N_k|N_k)\n\\a  + b/                                    ')
A:sympy.vector.tests.test_printing.A->CoordSysCartesian('A', vector_names=['x', 'y', 'z'], variable_names=['i', 'j', 'k'])
sympy.vector.tests.test_pretty(expr)
sympy.vector.tests.test_printing.pretty(expr)
sympy.vector.tests.test_printing.test_custom_names()
sympy.vector.tests.test_printing.test_latex_printing()
sympy.vector.tests.test_printing.test_pretty_print_unicode()
sympy.vector.tests.test_printing.test_pretty_printing_ascii()
sympy.vector.tests.test_printing.test_str_printing()
sympy.vector.tests.test_printing.upretty(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_functions.py----------------------------------------
A:sympy.vector.tests.test_functions.N->CoordSysCartesian('N')
A:sympy.vector.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.vector.tests.test_functions.A->CoordSysCartesian('N').orient_new_axis('A', q1, N.k)
A:sympy.vector.tests.test_functions.B->CoordSysCartesian('N').orient_new_axis('A', q1, N.k).orient_new_axis('B', q2, A.i)
A:sympy.vector.tests.test_functions.C->CoordSysCartesian('N').orient_new_axis('A', q1, N.k).orient_new_axis('B', q2, A.i).orient_new_axis('C', q3, B.j)
A:sympy.vector.tests.test_functions.m->Matrix([[q1], [q2], [q3]])
sympy.vector.tests.test_functions.test_express()
sympy.vector.tests.test_functions.test_matrix_to_vector()
sympy.vector.tests.test_test_express()
sympy.vector.tests.test_test_matrix_to_vector()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_vector.py----------------------------------------
A:sympy.vector.tests.test_vector.C->CoordSysCartesian('C')
A:sympy.vector.tests.test_vector.(i, j, k)->CoordSysCartesian('C').base_vectors()
A:sympy.vector.tests.test_vector.(a, b, c)->symbols('a b c')
A:sympy.vector.tests.test_vector.i1->BaseVector('i1', 0, C, ' ', ' ')
A:sympy.vector.tests.test_vector.(A, s, k, m)->symbols('A, s, k, m')
A:sympy.vector.tests.test_vector.test1->simplify(test1)
A:sympy.vector.tests.test_vector.test2->simplify(test2)
A:sympy.vector.tests.test_vector.test3->simplify(test3)
A:sympy.vector.tests.test_vector.test4->simplify(test4)
A:sympy.vector.tests.test_vector.f->Function('f')
sympy.vector.tests.test_vector.test_vector()
sympy.vector.tests.test_vector.test_vector_cross()
sympy.vector.tests.test_vector.test_vector_diff_integrate()
sympy.vector.tests.test_vector.test_vector_dot()
sympy.vector.tests.test_vector.test_vector_magnitude_normalize()
sympy.vector.tests.test_vector.test_vector_simplify()
sympy.vector.tests.test_vector.test_vector_sympy()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_dyadic.py----------------------------------------
A:sympy.vector.tests.test_dyadic.A->CoordSysCartesian('A')
A:sympy.vector.tests.test_dyadic.(a, b)->symbols('a, b')
A:sympy.vector.tests.test_dyadic.q->symbols('q')
A:sympy.vector.tests.test_dyadic.B->CoordSysCartesian('A').orient_new_axis('B', q, A.k)
A:sympy.vector.tests.test_dyadic.(a, b, c, d, e, f)->symbols('a, b, c, d, e, f')
A:sympy.vector.tests.test_dyadic.d4->v1.outer(v2)
A:sympy.vector.tests.test_dyadic.d5->v1.outer(v1)
A:sympy.vector.tests.test_dyadic.C->CoordSysCartesian('A').orient_new_axis('C', q, A.i)
A:sympy.vector.tests.test_dyadic.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.vector.tests.test_dyadic.N->CoordSysCartesian('N')
A:sympy.vector.tests.test_dyadic.test1->test1.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test2->test2.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test3->test3.simplify().simplify()
A:sympy.vector.tests.test_dyadic.test4->test4.simplify().simplify()
sympy.vector.tests.test_dyadic.test_dyadic()
sympy.vector.tests.test_dyadic.test_dyadic_simplify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_coordsysrect.py----------------------------------------
A:sympy.vector.tests.test_coordsysrect.(a, b, c, q)->symbols('a b c q')
A:sympy.vector.tests.test_coordsysrect.(q1, q2, q3, q4)->symbols('q1 q2 q3 q4')
A:sympy.vector.tests.test_coordsysrect.A->CoordSysCartesian('A')
A:sympy.vector.tests.test_coordsysrect.A1->CoordSysCartesian('A')
A:sympy.vector.tests.test_coordsysrect.B->CoordSysCartesian('A').orient_new_axis('B', q2, A.i)
A:sympy.vector.tests.test_coordsysrect.axis_orienter->AxisOrienter(a, A.k)
A:sympy.vector.tests.test_coordsysrect.body_orienter->BodyOrienter(a, b, c, '123')
A:sympy.vector.tests.test_coordsysrect.space_orienter->SpaceOrienter(a, b, c, '123')
A:sympy.vector.tests.test_coordsysrect.q_orienter->QuaternionOrienter(q1, q2, q3, q4)
A:sympy.vector.tests.test_coordsysrect.N->CoordSysCartesian('N')
A:sympy.vector.tests.test_coordsysrect.C->CoordSysCartesian('A').locate_new('C', v)
A:sympy.vector.tests.test_coordsysrect.mapping->CoordSysCartesian('A').scalar_map(C)
A:sympy.vector.tests.test_coordsysrect.D->CoordSysCartesian('N').orient_new('D', (orienter1,))
A:sympy.vector.tests.test_coordsysrect.E->CoordSysCartesian('N').orient_new('E', (orienter2,))
A:sympy.vector.tests.test_coordsysrect.F->CoordSysCartesian('N').orient_new('F', (orienter3,))
A:sympy.vector.tests.test_coordsysrect.G->CoordSysCartesian('N').orient_new('G', (orienter4,))
A:sympy.vector.tests.test_coordsysrect.orienter1->AxisOrienter(q4, N.j)
A:sympy.vector.tests.test_coordsysrect.orienter2->SpaceOrienter(q1, q2, q3, '123')
A:sympy.vector.tests.test_coordsysrect.orienter3->QuaternionOrienter(q1, q2, q3, q4)
A:sympy.vector.tests.test_coordsysrect.orienter4->BodyOrienter(q1, q2, q3, '123')
A:sympy.vector.tests.test_coordsysrect.p->CoordSysCartesian('A').origin.locate_new('p', -v)
A:sympy.vector.tests.test_coordsysrect.p1->CoordSysCartesian('A').origin.locate_new('p', -v).locate_new('p1', 2 * v)
A:sympy.vector.tests.test_coordsysrect.p2->CoordSysCartesian('A').origin.locate_new('p', -v).locate_new('p2', A.i)
sympy.vector.tests.test_coordsysrect.test_coordinate_vars()
sympy.vector.tests.test_coordsysrect.test_coordsyscartesian_equivalence()
sympy.vector.tests.test_coordsysrect.test_evalf()
sympy.vector.tests.test_coordsysrect.test_locatenew_point()
sympy.vector.tests.test_coordsysrect.test_orient_new_methods()
sympy.vector.tests.test_coordsysrect.test_orienters()
sympy.vector.tests.test_coordsysrect.test_rotation_matrix()
sympy.vector.tests.test_coordsysrect.test_vector()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/vector/tests/test_field_functions.py----------------------------------------
A:sympy.vector.tests.test_field_functions.C->CoordSysCartesian('C')
A:sympy.vector.tests.test_field_functions.(i, j, k)->CoordSysCartesian('C').base_vectors()
A:sympy.vector.tests.test_field_functions.(x, y, z)->CoordSysCartesian('C').base_scalars()
A:sympy.vector.tests.test_field_functions.(a, b, c, q)->symbols('a b c q')
A:sympy.vector.tests.test_field_functions.lhs->(delop ^ (u ^ v)).doit()
A:sympy.vector.tests.test_field_functions.rhs->(u * (delop & v) - v * (delop & u) + (v & delop)(u) - (u & delop)(v)).doit()
A:sympy.vector.tests.test_field_functions.P->CoordSysCartesian('C').orient_new_axis('P', q, C.k)
A:sympy.vector.tests.test_field_functions.grad_field->gradient(scalar_field, C)
A:sympy.vector.tests.test_field_functions.curl_field->curl(vector_field, C)
A:sympy.vector.tests.test_field_functions.point1->CoordSysCartesian('C').origin.locate_new('P1', 1 * i + 2 * j + 3 * k)
A:sympy.vector.tests.test_field_functions.point2->CoordSysCartesian('C').origin.locate_new('P2', 4 * i + 5 * j + 6 * k)
A:sympy.vector.tests.test_field_functions.genericpointC->CoordSysCartesian('C').origin.locate_new('RP', x * i + y * j + z * k)
A:sympy.vector.tests.test_field_functions.genericpointP->CoordSysCartesian('C').orient_new_axis('P', q, C.k).origin.locate_new('PP', P.x * P.i + P.y * P.j + P.z * P.k)
sympy.vector.tests.test_field_functions.test_conservative()
sympy.vector.tests.test_field_functions.test_del_operator()
sympy.vector.tests.test_field_functions.test_product_rules()
sympy.vector.tests.test_field_functions.test_scalar_potential()
sympy.vector.tests.test_field_functions.test_scalar_potential_difference()
sympy.vector.tests.test_field_functions.test_solenoidal()
sympy.vector.tests.test_field_test_conservative()
sympy.vector.tests.test_field_test_del_operator()
sympy.vector.tests.test_field_test_product_rules()
sympy.vector.tests.test_field_test_scalar_potential()
sympy.vector.tests.test_field_test_scalar_potential_difference()
sympy.vector.tests.test_field_test_solenoidal()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/usertools.py----------------------------------------
A:sympy.mpmath.usertools.v->g()
A:sympy.mpmath.usertools.once->kwargs.get('once')
A:sympy.mpmath.usertools.t1->clock()
A:sympy.mpmath.usertools.t2->clock()
A:sympy.mpmath.usertools.t->min(t, (t2 - t1) / 10)
sympy.mpmath.monitor(f,input='print',output='print')
sympy.mpmath.timing(f,*args,**kwargs)
sympy.mpmath.usertools.monitor(f,input='print',output='print')
sympy.mpmath.usertools.timing(f,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/__init__.py----------------------------------------
A:sympy.mpmath.__init__.fp->FPContext()
A:sympy.mpmath.__init__.mp->MPContext()
A:sympy.mpmath.__init__.iv->MPIntervalContext()
A:sympy.mpmath.__init__.testdir->os.path.dirname(os.path.abspath(getsourcefile(tests)))
A:sympy.mpmath.__init__.importdir->os.path.abspath(testdir + '/../..')
A:sympy.mpmath.__init__.globs->globals().copy()
A:sympy.mpmath.__init__.t1->clock()
A:sympy.mpmath.__init__.t2->clock()
sympy.mpmath.__init__.doctests(filter=[])
sympy.mpmath.__init__.runtests()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/rational.py----------------------------------------
A:sympy.mpmath.rational.v->new(mpq)
A:sympy.mpmath.rational.inverse->pow(b, HASH_MODULUS - 2, HASH_MODULUS)
A:sympy.mpmath.rational.ttype->type(t)
A:sympy.mpmath.rational.mpq_1->mpq((1, 1))
A:sympy.mpmath.rational.mpq_0->mpq((0, 1))
A:sympy.mpmath.rational.mpq_1_2->mpq((1, 2))
A:sympy.mpmath.rational.mpq_3_2->mpq((3, 2))
A:sympy.mpmath.rational.mpq_1_4->mpq((1, 4))
A:sympy.mpmath.rational.mpq_1_16->mpq((1, 16))
A:sympy.mpmath.rational.mpq_3_16->mpq((3, 16))
A:sympy.mpmath.rational.mpq_5_2->mpq((5, 2))
A:sympy.mpmath.rational.mpq_3_4->mpq((3, 4))
A:sympy.mpmath.rational.mpq_7_4->mpq((7, 4))
A:sympy.mpmath.rational.mpq_5_4->mpq((5, 4))
sympy.mpmath.rational.create_reduced(p,q,_cache={})
sympy.mpmath.rational.mpq(cls,p,q=1)
sympy.mpmath.rational.mpq.__abs__(s)
sympy.mpmath.rational.mpq.__add__(s,t)
sympy.mpmath.rational.mpq.__div__(s,t)
sympy.mpmath.rational.mpq.__eq__(s,t)
sympy.mpmath.rational.mpq.__ge__(s,t)
sympy.mpmath.rational.mpq.__gt__(s,t)
sympy.mpmath.rational.mpq.__hash__(s)
sympy.mpmath.rational.mpq.__int__(s)
sympy.mpmath.rational.mpq.__le__(s,t)
sympy.mpmath.rational.mpq.__lt__(s,t)
sympy.mpmath.rational.mpq.__mul__(s,t)
sympy.mpmath.rational.mpq.__ne__(s,t)
sympy.mpmath.rational.mpq.__neg__(s)
sympy.mpmath.rational.mpq.__new__(cls,p,q=1)
sympy.mpmath.rational.mpq.__nonzero__(s)
sympy.mpmath.rational.mpq.__pos__(s)
sympy.mpmath.rational.mpq.__pow__(s,t)
sympy.mpmath.rational.mpq.__rdiv__(s,t)
sympy.mpmath.rational.mpq.__repr__(s)
sympy.mpmath.rational.mpq.__rsub__(s,t)
sympy.mpmath.rational.mpq.__str__(s)
sympy.mpmath.rational.mpq.__sub__(s,t)
sympy.mpmath.rational.mpq._cmp(s,t,op)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/ctx_iv.py----------------------------------------
A:sympy.mpmath.ctx_iv.v->mpi_from_str(x, ctx.prec)
A:sympy.mpmath.ctx_iv.t->s.ctx.convert(t)
A:sympy.mpmath.ctx_iv.n->repr_dps(self.ctx.prec)
A:sympy.mpmath.ctx_iv.a->libmp.mpf_shift(a, n)
A:sympy.mpmath.ctx_iv.b->libmp.mpf_shift(b, n)
A:sympy.mpmath.ctx_iv.re->libmp.mpi_to_str(x._mpci_[0], n, **kwargs)
A:sympy.mpmath.ctx_iv.im->libmp.mpi_to_str(x._mpci_[1], n, **kwargs)
A:sympy.mpmath.ctx_iv.y->new(cls)
A:sympy.mpmath.ctx_iv.(ivmpf.__add__, ivmpf.__radd__, ivmpc.__add__, ivmpc.__radd__)->_binary_op(mpi_add, mpci_add)
A:sympy.mpmath.ctx_iv.(ivmpf.__sub__, ivmpf.__rsub__, ivmpc.__sub__, ivmpc.__rsub__)->_binary_op(mpi_sub, mpci_sub)
A:sympy.mpmath.ctx_iv.(ivmpf.__mul__, ivmpf.__rmul__, ivmpc.__mul__, ivmpc.__rmul__)->_binary_op(mpi_mul, mpci_mul)
A:sympy.mpmath.ctx_iv.(ivmpf.__div__, ivmpf.__rdiv__, ivmpc.__div__, ivmpc.__rdiv__)->_binary_op(mpi_div, mpci_div)
A:sympy.mpmath.ctx_iv.(ivmpf.__pow__, ivmpf.__rpow__, ivmpc.__pow__, ivmpc.__rpow__)->_binary_op(mpi_pow, mpci_pow)
A:sympy.mpmath.ctx_iv.self->new(cls)
A:sympy.mpmath.ctx_iv._mpi_->property(_get_mpi_)
A:sympy.mpmath.ctx_iv.ctx.mpf->type('ivmpf', (ivmpf,), {})
A:sympy.mpmath.ctx_iv.ctx.mpc->type('ivmpc', (ivmpc,), {})
A:sympy.mpmath.ctx_iv.ctx._constant->type('ivmpf_constant', (ivmpf_constant,), {})
A:sympy.mpmath.ctx_iv.ctx.one->ctx.mpf(1)
A:sympy.mpmath.ctx_iv.ctx.zero->ctx.mpf(0)
A:sympy.mpmath.ctx_iv.ctx.inf->ctx.mpf('inf')
A:sympy.mpmath.ctx_iv.ctx.nan->ctx.mpf('nan')
A:sympy.mpmath.ctx_iv.ctx.j->ctx.mpc(0, 1)
A:sympy.mpmath.ctx_iv.ctx.exp->ctx._wrap_mpi_function(libmp.mpi_exp, libmp.mpci_exp)
A:sympy.mpmath.ctx_iv.ctx.sqrt->ctx._wrap_mpi_function(libmp.mpi_sqrt)
A:sympy.mpmath.ctx_iv.ctx.ln->ctx._wrap_mpi_function(libmp.mpi_log, libmp.mpci_log)
A:sympy.mpmath.ctx_iv.ctx.cos->ctx._wrap_mpi_function(libmp.mpi_cos, libmp.mpci_cos)
A:sympy.mpmath.ctx_iv.ctx.sin->ctx._wrap_mpi_function(libmp.mpi_sin, libmp.mpci_sin)
A:sympy.mpmath.ctx_iv.ctx.tan->ctx._wrap_mpi_function(libmp.mpi_tan)
A:sympy.mpmath.ctx_iv.ctx.gamma->ctx._wrap_mpi_function(libmp.mpi_gamma, libmp.mpci_gamma)
A:sympy.mpmath.ctx_iv.ctx.loggamma->ctx._wrap_mpi_function(libmp.mpi_loggamma, libmp.mpci_loggamma)
A:sympy.mpmath.ctx_iv.ctx.rgamma->ctx._wrap_mpi_function(libmp.mpi_rgamma, libmp.mpci_rgamma)
A:sympy.mpmath.ctx_iv.ctx.factorial->ctx._wrap_mpi_function(libmp.mpi_factorial, libmp.mpci_factorial)
A:sympy.mpmath.ctx_iv.ctx.eps->ctx._constant(lambda prec, rnd: (0, MPZ_ONE, 1 - prec, 1))
A:sympy.mpmath.ctx_iv.ctx.pi->ctx._constant(libmp.mpf_pi)
A:sympy.mpmath.ctx_iv.ctx.e->ctx._constant(libmp.mpf_e)
A:sympy.mpmath.ctx_iv.ctx.ln2->ctx._constant(libmp.mpf_ln2)
A:sympy.mpmath.ctx_iv.ctx.ln10->ctx._constant(libmp.mpf_ln10)
A:sympy.mpmath.ctx_iv.ctx.phi->ctx._constant(libmp.mpf_phi)
A:sympy.mpmath.ctx_iv.ctx.euler->ctx._constant(libmp.mpf_euler)
A:sympy.mpmath.ctx_iv.ctx.catalan->ctx._constant(libmp.mpf_catalan)
A:sympy.mpmath.ctx_iv.ctx.glaisher->ctx._constant(libmp.mpf_glaisher)
A:sympy.mpmath.ctx_iv.ctx.khinchin->ctx._constant(libmp.mpf_khinchin)
A:sympy.mpmath.ctx_iv.ctx.twinprime->ctx._constant(libmp.mpf_twinprime)
A:sympy.mpmath.ctx_iv.prec->property(lambda ctx: ctx._prec[0], _set_prec)
A:sympy.mpmath.ctx_iv.x->ctx.convert(x)
A:sympy.mpmath.ctx_iv.retval->f(ctx, *args, **kwargs)
A:sympy.mpmath.ctx_iv.ctx._prec[0]->dps_to_prec(n)
A:sympy.mpmath.ctx_iv.ctx._dps->max(1, int(n))
A:sympy.mpmath.ctx_iv.dps->property(lambda ctx: ctx._dps, _set_dps)
A:sympy.mpmath.ctx_iv.(a, b)->libmp.mpi_abs(x._mpi_)
A:sympy.mpmath.ctx_iv.coeffs->list(coeffs)
A:sympy.mpmath.ctx_iv.num->range(p)
A:sympy.mpmath.ctx_iv.den->range(p, p + q)
sympy.mpmath.MPIntervalContext(ctx)
sympy.mpmath.MPIntervalContext._convert_param(ctx,x)
sympy.mpmath.MPIntervalContext._init_builtins(ctx)
sympy.mpmath.MPIntervalContext._is_complex_type(ctx,z)
sympy.mpmath.MPIntervalContext._is_real_type(ctx,z)
sympy.mpmath.MPIntervalContext._mpi(ctx,a,b=None)
sympy.mpmath.MPIntervalContext._mpq(ctx,pq)
sympy.mpmath.MPIntervalContext._set_dps(ctx,n)
sympy.mpmath.MPIntervalContext._set_prec(ctx,n)
sympy.mpmath.MPIntervalContext._wrap_mpi_function(ctx,f_real,f_complex=None)
sympy.mpmath.MPIntervalContext._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.MPIntervalContext.absmax(ctx,x)
sympy.mpmath.MPIntervalContext.absmin(ctx,x)
sympy.mpmath.MPIntervalContext.atan2(ctx,y,x)
sympy.mpmath.MPIntervalContext.convert(ctx,x)
sympy.mpmath.MPIntervalContext.hypsum(ctx,p,q,types,coeffs,z,maxterms=6000,**kwargs)
sympy.mpmath.MPIntervalContext.isinf(ctx,x)
sympy.mpmath.MPIntervalContext.isint(ctx,x)
sympy.mpmath.MPIntervalContext.isnan(ctx,x)
sympy.mpmath.MPIntervalContext.ldexp(ctx,x,n)
sympy.mpmath.MPIntervalContext.mag(ctx,x)
sympy.mpmath.MPIntervalContext.make_mpc(ctx,v)
sympy.mpmath.MPIntervalContext.make_mpf(ctx,v)
sympy.mpmath.MPIntervalContext.nstr(ctx,x,n=5,**kwargs)
sympy.mpmath.ctx_iv.MPIntervalContext(ctx)
sympy.mpmath.ctx_iv.MPIntervalContext.__init__(ctx)
sympy.mpmath.ctx_iv.MPIntervalContext._convert_param(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext._init_builtins(ctx)
sympy.mpmath.ctx_iv.MPIntervalContext._is_complex_type(ctx,z)
sympy.mpmath.ctx_iv.MPIntervalContext._is_real_type(ctx,z)
sympy.mpmath.ctx_iv.MPIntervalContext._mpi(ctx,a,b=None)
sympy.mpmath.ctx_iv.MPIntervalContext._mpq(ctx,pq)
sympy.mpmath.ctx_iv.MPIntervalContext._set_dps(ctx,n)
sympy.mpmath.ctx_iv.MPIntervalContext._set_prec(ctx,n)
sympy.mpmath.ctx_iv.MPIntervalContext._wrap_mpi_function(ctx,f_real,f_complex=None)
sympy.mpmath.ctx_iv.MPIntervalContext._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.ctx_iv.MPIntervalContext.absmax(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.absmin(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.atan2(ctx,y,x)
sympy.mpmath.ctx_iv.MPIntervalContext.convert(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.hypsum(ctx,p,q,types,coeffs,z,maxterms=6000,**kwargs)
sympy.mpmath.ctx_iv.MPIntervalContext.isinf(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.isint(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.isnan(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.ldexp(ctx,x,n)
sympy.mpmath.ctx_iv.MPIntervalContext.mag(ctx,x)
sympy.mpmath.ctx_iv.MPIntervalContext.make_mpc(ctx,v)
sympy.mpmath.ctx_iv.MPIntervalContext.make_mpf(ctx,v)
sympy.mpmath.ctx_iv.MPIntervalContext.nstr(ctx,x,n=5,**kwargs)
sympy.mpmath.ctx_iv._binary_op(f_real,f_complex)
sympy.mpmath.ctx_iv.convert_mpf_(x,prec,rounding)
sympy.mpmath.ctx_iv.ivmpc(cls,re=0,im=0)
sympy.mpmath.ctx_iv.ivmpc.__abs__(s)
sympy.mpmath.ctx_iv.ivmpc.__contains__(s,t)
sympy.mpmath.ctx_iv.ivmpc.__eq__(s,t)
sympy.mpmath.ctx_iv.ivmpc.__hash__(self)
sympy.mpmath.ctx_iv.ivmpc.__lt__(s,t)
sympy.mpmath.ctx_iv.ivmpc.__ne__(s,t)
sympy.mpmath.ctx_iv.ivmpc.__neg__(s)
sympy.mpmath.ctx_iv.ivmpc.__new__(cls,re=0,im=0)
sympy.mpmath.ctx_iv.ivmpc.__pos__(s)
sympy.mpmath.ctx_iv.ivmpc.__repr__(s)
sympy.mpmath.ctx_iv.ivmpc.__str__(s)
sympy.mpmath.ctx_iv.ivmpc._compare(s,t,ne=False)
sympy.mpmath.ctx_iv.ivmpc.a(self)
sympy.mpmath.ctx_iv.ivmpc.ae(s,t,rel_eps=None,abs_eps=None)
sympy.mpmath.ctx_iv.ivmpc.b(self)
sympy.mpmath.ctx_iv.ivmpc.c(self)
sympy.mpmath.ctx_iv.ivmpc.conjugate(s)
sympy.mpmath.ctx_iv.ivmpc.d(self)
sympy.mpmath.ctx_iv.ivmpc.imag(s)
sympy.mpmath.ctx_iv.ivmpc.overlap(s,t)
sympy.mpmath.ctx_iv.ivmpc.real(s)
sympy.mpmath.ctx_iv.ivmpf(cls,x=0)
sympy.mpmath.ctx_iv.ivmpf.__abs__(self)
sympy.mpmath.ctx_iv.ivmpf.__contains__(self,t)
sympy.mpmath.ctx_iv.ivmpf.__eq__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__ge__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__gt__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__hash__(self)
sympy.mpmath.ctx_iv.ivmpf.__int__(self)
sympy.mpmath.ctx_iv.ivmpf.__le__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__lt__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__ne__(s,t)
sympy.mpmath.ctx_iv.ivmpf.__neg__(self)
sympy.mpmath.ctx_iv.ivmpf.__new__(cls,x=0)
sympy.mpmath.ctx_iv.ivmpf.__pos__(self)
sympy.mpmath.ctx_iv.ivmpf.__repr__(self)
sympy.mpmath.ctx_iv.ivmpf.__str__(self)
sympy.mpmath.ctx_iv.ivmpf._compare(*args)
sympy.mpmath.ctx_iv.ivmpf._compare(s,t,cmpfun)
sympy.mpmath.ctx_iv.ivmpf._mpci_(self)
sympy.mpmath.ctx_iv.ivmpf.a(self)
sympy.mpmath.ctx_iv.ivmpf.ae(s,t,rel_eps=None,abs_eps=None)
sympy.mpmath.ctx_iv.ivmpf.b(self)
sympy.mpmath.ctx_iv.ivmpf.conjugate(self)
sympy.mpmath.ctx_iv.ivmpf.delta(self)
sympy.mpmath.ctx_iv.ivmpf.imag(self)
sympy.mpmath.ctx_iv.ivmpf.mid(self)
sympy.mpmath.ctx_iv.ivmpf.real(self)
sympy.mpmath.ctx_iv.ivmpf_constant(cls,f)
sympy.mpmath.ctx_iv.ivmpf_constant.__new__(cls,f)
sympy.mpmath.ctx_iv.ivmpf_constant._get_mpi_(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/ctx_mp.py----------------------------------------
A:sympy.mpmath.ctx_mp.get_complex->match.group('re').compile('^\\(?(?P<re>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?)??(?P<im>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?j)?\\)?$')
A:sympy.mpmath.ctx_mp.ctx.one->ctx.make_mpf(fone)
A:sympy.mpmath.ctx_mp.ctx.zero->ctx.make_mpf(fzero)
A:sympy.mpmath.ctx_mp.ctx.j->ctx.make_mpc((fzero, fone))
A:sympy.mpmath.ctx_mp.ctx.inf->ctx.make_mpf(finf)
A:sympy.mpmath.ctx_mp.ctx.ninf->ctx.make_mpf(fninf)
A:sympy.mpmath.ctx_mp.ctx.nan->ctx.make_mpf(fnan)
A:sympy.mpmath.ctx_mp.eps->ctx.constant(lambda prec, rnd: (0, MPZ_ONE, 1 - prec, 1), 'epsilon of working precision', 'eps')
A:sympy.mpmath.ctx_mp.ctx.pi->ctx.constant(mpf_pi, 'pi', 'pi')
A:sympy.mpmath.ctx_mp.ctx.ln2->ctx.constant(mpf_ln2, 'ln(2)', 'ln2')
A:sympy.mpmath.ctx_mp.ctx.ln10->ctx.constant(mpf_ln10, 'ln(10)', 'ln10')
A:sympy.mpmath.ctx_mp.ctx.phi->ctx.constant(mpf_phi, 'Golden ratio phi', 'phi')
A:sympy.mpmath.ctx_mp.ctx.e->ctx.constant(mpf_e, 'e = exp(1)', 'e')
A:sympy.mpmath.ctx_mp.ctx.euler->ctx.constant(mpf_euler, "Euler's constant", 'euler')
A:sympy.mpmath.ctx_mp.ctx.catalan->ctx.constant(mpf_catalan, "Catalan's constant", 'catalan')
A:sympy.mpmath.ctx_mp.ctx.khinchin->ctx.constant(mpf_khinchin, "Khinchin's constant", 'khinchin')
A:sympy.mpmath.ctx_mp.ctx.glaisher->ctx.constant(mpf_glaisher, "Glaisher's constant", 'glaisher')
A:sympy.mpmath.ctx_mp.ctx.apery->ctx.constant(mpf_apery, "Apery's constant", 'apery')
A:sympy.mpmath.ctx_mp.ctx.degree->ctx.constant(mpf_degree, '1 deg = pi / 180', 'degree')
A:sympy.mpmath.ctx_mp.ctx.twinprime->ctx.constant(mpf_twinprime, 'Twin prime constant', 'twinprime')
A:sympy.mpmath.ctx_mp.ctx.mertens->ctx.constant(mpf_mertens, "Mertens' constant", 'mertens')
A:sympy.mpmath.ctx_mp.ctx.sqrt->getattr(ctx, '_sage_sqrt', ctx.sqrt)
A:sympy.mpmath.ctx_mp.ctx.cbrt->ctx._wrap_libmp_function(libmp.mpf_cbrt, libmp.mpc_cbrt)
A:sympy.mpmath.ctx_mp.ctx.ln->getattr(ctx, '_sage_ln', ctx.ln)
A:sympy.mpmath.ctx_mp.ctx.atan->ctx._wrap_libmp_function(libmp.mpf_atan, libmp.mpc_atan)
A:sympy.mpmath.ctx_mp.ctx.exp->getattr(ctx, '_sage_exp', ctx.exp)
A:sympy.mpmath.ctx_mp.ctx.expj->ctx._wrap_libmp_function(libmp.mpf_expj, libmp.mpc_expj)
A:sympy.mpmath.ctx_mp.ctx.expjpi->ctx._wrap_libmp_function(libmp.mpf_expjpi, libmp.mpc_expjpi)
A:sympy.mpmath.ctx_mp.ctx.sin->getattr(ctx, '_sage_sin', ctx.sin)
A:sympy.mpmath.ctx_mp.ctx.cos->getattr(ctx, '_sage_cos', ctx.cos)
A:sympy.mpmath.ctx_mp.ctx.tan->ctx._wrap_libmp_function(libmp.mpf_tan, libmp.mpc_tan)
A:sympy.mpmath.ctx_mp.ctx.sinh->ctx._wrap_libmp_function(libmp.mpf_sinh, libmp.mpc_sinh)
A:sympy.mpmath.ctx_mp.ctx.cosh->ctx._wrap_libmp_function(libmp.mpf_cosh, libmp.mpc_cosh)
A:sympy.mpmath.ctx_mp.ctx.tanh->ctx._wrap_libmp_function(libmp.mpf_tanh, libmp.mpc_tanh)
A:sympy.mpmath.ctx_mp.ctx.asin->ctx._wrap_libmp_function(libmp.mpf_asin, libmp.mpc_asin)
A:sympy.mpmath.ctx_mp.ctx.acos->ctx._wrap_libmp_function(libmp.mpf_acos, libmp.mpc_acos)
A:sympy.mpmath.ctx_mp.ctx.asinh->ctx._wrap_libmp_function(libmp.mpf_asinh, libmp.mpc_asinh)
A:sympy.mpmath.ctx_mp.ctx.acosh->ctx._wrap_libmp_function(libmp.mpf_acosh, libmp.mpc_acosh)
A:sympy.mpmath.ctx_mp.ctx.atanh->ctx._wrap_libmp_function(libmp.mpf_atanh, libmp.mpc_atanh)
A:sympy.mpmath.ctx_mp.ctx.sinpi->ctx._wrap_libmp_function(libmp.mpf_sin_pi, libmp.mpc_sin_pi)
A:sympy.mpmath.ctx_mp.ctx.cospi->ctx._wrap_libmp_function(libmp.mpf_cos_pi, libmp.mpc_cos_pi)
A:sympy.mpmath.ctx_mp.ctx.floor->ctx._wrap_libmp_function(libmp.mpf_floor, libmp.mpc_floor)
A:sympy.mpmath.ctx_mp.ctx.ceil->ctx._wrap_libmp_function(libmp.mpf_ceil, libmp.mpc_ceil)
A:sympy.mpmath.ctx_mp.ctx.nint->ctx._wrap_libmp_function(libmp.mpf_nint, libmp.mpc_nint)
A:sympy.mpmath.ctx_mp.ctx.frac->ctx._wrap_libmp_function(libmp.mpf_frac, libmp.mpc_frac)
A:sympy.mpmath.ctx_mp.ctx.fibctx.fibonacci->ctx._wrap_libmp_function(libmp.mpf_fibonacci, libmp.mpc_fibonacci)
A:sympy.mpmath.ctx_mp.ctx.gamma->ctx._wrap_libmp_function(libmp.mpf_gamma, libmp.mpc_gamma)
A:sympy.mpmath.ctx_mp.ctx.rgamma->ctx._wrap_libmp_function(libmp.mpf_rgamma, libmp.mpc_rgamma)
A:sympy.mpmath.ctx_mp.ctx.loggamma->ctx._wrap_libmp_function(libmp.mpf_loggamma, libmp.mpc_loggamma)
A:sympy.mpmath.ctx_mp.ctx.facctx.factorial->ctx._wrap_libmp_function(libmp.mpf_factorial, libmp.mpc_factorial)
A:sympy.mpmath.ctx_mp.ctx.gamma_old->ctx._wrap_libmp_function(libmp.mpf_gamma_old, libmp.mpc_gamma_old)
A:sympy.mpmath.ctx_mp.ctx.fac_oldctx.factorial_old->ctx._wrap_libmp_function(libmp.mpf_factorial_old, libmp.mpc_factorial_old)
A:sympy.mpmath.ctx_mp.ctx.digamma->ctx._wrap_libmp_function(libmp.mpf_psi0, libmp.mpc_psi0)
A:sympy.mpmath.ctx_mp.ctx.harmonic->ctx._wrap_libmp_function(libmp.mpf_harmonic, libmp.mpc_harmonic)
A:sympy.mpmath.ctx_mp.ctx.ei->ctx._wrap_libmp_function(libmp.mpf_ei, libmp.mpc_ei)
A:sympy.mpmath.ctx_mp.ctx.e1->ctx._wrap_libmp_function(libmp.mpf_e1, libmp.mpc_e1)
A:sympy.mpmath.ctx_mp.ctx._ci->ctx._wrap_libmp_function(libmp.mpf_ci, libmp.mpc_ci)
A:sympy.mpmath.ctx_mp.ctx._si->ctx._wrap_libmp_function(libmp.mpf_si, libmp.mpc_si)
A:sympy.mpmath.ctx_mp.ctx.ellipk->ctx._wrap_libmp_function(libmp.mpf_ellipk, libmp.mpc_ellipk)
A:sympy.mpmath.ctx_mp.ctx._ellipe->ctx._wrap_libmp_function(libmp.mpf_ellipe, libmp.mpc_ellipe)
A:sympy.mpmath.ctx_mp.ctx.agm1->ctx._wrap_libmp_function(libmp.mpf_agm1, libmp.mpc_agm1)
A:sympy.mpmath.ctx_mp.ctx._erf->ctx._wrap_libmp_function(libmp.mpf_erf, None)
A:sympy.mpmath.ctx_mp.ctx._erfc->ctx._wrap_libmp_function(libmp.mpf_erfc, None)
A:sympy.mpmath.ctx_mp.ctx._zeta->ctx._wrap_libmp_function(libmp.mpf_zeta, libmp.mpc_zeta)
A:sympy.mpmath.ctx_mp.ctx._altzeta->ctx._wrap_libmp_function(libmp.mpf_altzeta, libmp.mpc_altzeta)
A:sympy.mpmath.ctx_mp.x->ctx.convert(x)
A:sympy.mpmath.ctx_mp.y->ctx.convert(y)
A:sympy.mpmath.ctx_mp.n->int(n)
A:sympy.mpmath.ctx_mp.(real, imag)->libmp.mpf_expint(n, z._mpf_, prec, rounding)
A:sympy.mpmath.ctx_mp.v->f(*args, **kwargs)
A:sympy.mpmath.ctx_mp.z->ctx.convert(z)
A:sympy.mpmath.ctx_mp.m->int(m)
A:sympy.mpmath.ctx_mp.(prec, rounding)->ctx._parse_prec(kwargs)
A:sympy.mpmath.ctx_mp.(c, s)->libmp.mpc_cos_sin_pi(x._mpc_, prec, rounding)
A:sympy.mpmath.ctx_mp.a->int(a)
A:sympy.mpmath.ctx_mp.maxprec2->ctx._default_hyper_maxprec(prec)
A:sympy.mpmath.ctx_mp.v1->f(*args, **kwargs)
A:sympy.mpmath.ctx_mp.v2->f(*args, **kwargs)
A:sympy.mpmath.ctx_mp.prec2->min(prec2, maxprec2)
A:sympy.mpmath.ctx_mp.match->match.group('re').compile('^\\(?(?P<re>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?)??(?P<im>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?j)?\\)?$').match(x)
A:sympy.mpmath.ctx_mp.re->match.group('re').compile('^\\(?(?P<re>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?)??(?P<im>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?j)?\\)?$').match(x).group('re')
A:sympy.mpmath.ctx_mp.im->match.group('re').compile('^\\(?(?P<re>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?)??(?P<im>[\\+\\-]?\\d*\\.?\\d*(e[\\+\\-]?\\d+)?j)?\\)?$').match(x).group('im').rstrip('j')
A:sympy.mpmath.ctx_mp.prec->dps_to_prec(dps)
A:sympy.mpmath.ctx_mp.maxprec->kwargs.get('maxprec', ctx._default_hyper_maxprec(prec))
A:sympy.mpmath.ctx_mp.(n, d)->ctx.nint_distance(c)
A:sympy.mpmath.ctx_mp.extraprec->max(extraprec, d - prec + 60)
A:sympy.mpmath.ctx_mp.mag_dict->dict(((n, None) for n in magnitude_check))
A:sympy.mpmath.ctx_mp.(zv, have_complex, magnitude)->summator(coeffs, v, prec, wp, epsshift, mag_dict, **kwargs)
A:sympy.mpmath.ctx_mp.zeroprec->kwargs.get('zeroprec')
A:sympy.mpmath.ctx_mp.(y, n)->libmp.mpf_frexp(x._mpf_)
A:sympy.mpmath.ctx_mp.typx->type(x)
A:sympy.mpmath.ctx_mp.(n, r)->divmod(p, q)
A:sympy.mpmath.ctx_mp.(xs, ys)->libmp.mpc_zetasum(s._mpc_, a, n, derivatives, reflect, prec)
A:sympy.mpmath.ctx_mp.self.ctx.prec->self.precfun(self.ctx.prec)
A:sympy.mpmath.ctx_mp.self.ctx.dps->self.dpsfun(self.ctx.dps)
sympy.mpmath.MPContext(ctx)
sympy.mpmath.MPContext.__str__(ctx)
sympy.mpmath.MPContext._agm(ctx,a,b=1)
sympy.mpmath.MPContext._as_points(ctx,x)
sympy.mpmath.MPContext._besselj(ctx,n,z)
sympy.mpmath.MPContext._convert_fallback(ctx,x,strings)
sympy.mpmath.MPContext._expint_int(ctx,n,z)
sympy.mpmath.MPContext._gamma_upper_int(ctx,n,z)
sympy.mpmath.MPContext._is_complex_type(ctx,x)
sympy.mpmath.MPContext._is_real_type(ctx,x)
sympy.mpmath.MPContext._nthroot(ctx,x,n)
sympy.mpmath.MPContext._parse_prec(ctx,kwargs)
sympy.mpmath.MPContext._repr_digits(ctx)
sympy.mpmath.MPContext._str_digits(ctx)
sympy.mpmath.MPContext._zeta_int(ctx,n)
sympy.mpmath.MPContext._zetasum_fast(ctx,s,a,n,derivatives=[0],reflect=False)
sympy.mpmath.MPContext.absmax(ctx,x)
sympy.mpmath.MPContext.absmin(ctx,x)
sympy.mpmath.MPContext.atan2(ctx,y,x)
sympy.mpmath.MPContext.autoprec(ctx,f,maxprec=None,catch=(),verbose=False)
sympy.mpmath.MPContext.bernoulli(ctx,n)
sympy.mpmath.MPContext.clone(ctx)
sympy.mpmath.MPContext.cos_sin(ctx,x,**kwargs)
sympy.mpmath.MPContext.cospi_sinpi(ctx,x,**kwargs)
sympy.mpmath.MPContext.extradps(ctx,n,normalize_output=False)
sympy.mpmath.MPContext.extraprec(ctx,n,normalize_output=False)
sympy.mpmath.MPContext.fadd(ctx,x,y,**kwargs)
sympy.mpmath.MPContext.fdiv(ctx,x,y,**kwargs)
sympy.mpmath.MPContext.fmul(ctx,x,y,**kwargs)
sympy.mpmath.MPContext.fneg(ctx,x,**kwargs)
sympy.mpmath.MPContext.fprod(ctx,factors)
sympy.mpmath.MPContext.fraction(ctx,p,q)
sympy.mpmath.MPContext.frexp(ctx,x)
sympy.mpmath.MPContext.fsub(ctx,x,y,**kwargs)
sympy.mpmath.MPContext.hypot(ctx,x,y)
sympy.mpmath.MPContext.hypsum(ctx,p,q,flags,coeffs,z,accurate_small=True,**kwargs)
sympy.mpmath.MPContext.init_builtins(ctx)
sympy.mpmath.MPContext.isfinite(ctx,x)
sympy.mpmath.MPContext.isnan(ctx,x)
sympy.mpmath.MPContext.isnpint(ctx,x)
sympy.mpmath.MPContext.ldexp(ctx,x,n)
sympy.mpmath.MPContext.mpmathify(ctx,*args,**kwargs)
sympy.mpmath.MPContext.nint_distance(ctx,x)
sympy.mpmath.MPContext.nstr(ctx,x,n=6,**kwargs)
sympy.mpmath.MPContext.psi(ctx,m,z)
sympy.mpmath.MPContext.rand(ctx)
sympy.mpmath.MPContext.to_fixed(ctx,x,prec)
sympy.mpmath.MPContext.workdps(ctx,n,normalize_output=False)
sympy.mpmath.MPContext.workprec(ctx,n,normalize_output=False)
sympy.mpmath.ctx_mp.MPContext(ctx)
sympy.mpmath.ctx_mp.MPContext.__init__(ctx)
sympy.mpmath.ctx_mp.MPContext.__str__(ctx)
sympy.mpmath.ctx_mp.MPContext._agm(ctx,a,b=1)
sympy.mpmath.ctx_mp.MPContext._as_points(ctx,x)
sympy.mpmath.ctx_mp.MPContext._besselj(ctx,n,z)
sympy.mpmath.ctx_mp.MPContext._convert_fallback(ctx,x,strings)
sympy.mpmath.ctx_mp.MPContext._expint_int(ctx,n,z)
sympy.mpmath.ctx_mp.MPContext._gamma_upper_int(ctx,n,z)
sympy.mpmath.ctx_mp.MPContext._is_complex_type(ctx,x)
sympy.mpmath.ctx_mp.MPContext._is_real_type(ctx,x)
sympy.mpmath.ctx_mp.MPContext._nthroot(ctx,x,n)
sympy.mpmath.ctx_mp.MPContext._parse_prec(ctx,kwargs)
sympy.mpmath.ctx_mp.MPContext._repr_digits(ctx)
sympy.mpmath.ctx_mp.MPContext._str_digits(ctx)
sympy.mpmath.ctx_mp.MPContext._zeta_int(ctx,n)
sympy.mpmath.ctx_mp.MPContext._zetasum_fast(ctx,s,a,n,derivatives=[0],reflect=False)
sympy.mpmath.ctx_mp.MPContext.absmax(ctx,x)
sympy.mpmath.ctx_mp.MPContext.absmin(ctx,x)
sympy.mpmath.ctx_mp.MPContext.atan2(ctx,y,x)
sympy.mpmath.ctx_mp.MPContext.autoprec(ctx,f,maxprec=None,catch=(),verbose=False)
sympy.mpmath.ctx_mp.MPContext.bernoulli(ctx,n)
sympy.mpmath.ctx_mp.MPContext.clone(ctx)
sympy.mpmath.ctx_mp.MPContext.cos_sin(ctx,x,**kwargs)
sympy.mpmath.ctx_mp.MPContext.cospi_sinpi(ctx,x,**kwargs)
sympy.mpmath.ctx_mp.MPContext.extradps(ctx,n,normalize_output=False)
sympy.mpmath.ctx_mp.MPContext.extraprec(ctx,n,normalize_output=False)
sympy.mpmath.ctx_mp.MPContext.fadd(ctx,x,y,**kwargs)
sympy.mpmath.ctx_mp.MPContext.fdiv(ctx,x,y,**kwargs)
sympy.mpmath.ctx_mp.MPContext.fmul(ctx,x,y,**kwargs)
sympy.mpmath.ctx_mp.MPContext.fneg(ctx,x,**kwargs)
sympy.mpmath.ctx_mp.MPContext.fprod(ctx,factors)
sympy.mpmath.ctx_mp.MPContext.fraction(ctx,p,q)
sympy.mpmath.ctx_mp.MPContext.frexp(ctx,x)
sympy.mpmath.ctx_mp.MPContext.fsub(ctx,x,y,**kwargs)
sympy.mpmath.ctx_mp.MPContext.hypot(ctx,x,y)
sympy.mpmath.ctx_mp.MPContext.hypsum(ctx,p,q,flags,coeffs,z,accurate_small=True,**kwargs)
sympy.mpmath.ctx_mp.MPContext.init_builtins(ctx)
sympy.mpmath.ctx_mp.MPContext.isfinite(ctx,x)
sympy.mpmath.ctx_mp.MPContext.isnan(ctx,x)
sympy.mpmath.ctx_mp.MPContext.isnpint(ctx,x)
sympy.mpmath.ctx_mp.MPContext.ldexp(ctx,x,n)
sympy.mpmath.ctx_mp.MPContext.mpmathify(ctx,*args,**kwargs)
sympy.mpmath.ctx_mp.MPContext.nint_distance(ctx,x)
sympy.mpmath.ctx_mp.MPContext.nstr(ctx,x,n=6,**kwargs)
sympy.mpmath.ctx_mp.MPContext.psi(ctx,m,z)
sympy.mpmath.ctx_mp.MPContext.rand(ctx)
sympy.mpmath.ctx_mp.MPContext.to_fixed(ctx,x,prec)
sympy.mpmath.ctx_mp.MPContext.workdps(ctx,n,normalize_output=False)
sympy.mpmath.ctx_mp.MPContext.workprec(ctx,n,normalize_output=False)
sympy.mpmath.ctx_mp.PrecisionManager(self,ctx,precfun,dpsfun,normalize_output=False)
sympy.mpmath.ctx_mp.PrecisionManager.__enter__(self)
sympy.mpmath.ctx_mp.PrecisionManager.__exit__(self,exc_type,exc_val,exc_tb)
sympy.mpmath.ctx_mp.PrecisionManager.__init__(self,ctx,precfun,dpsfun,normalize_output=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/function_docs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/ctx_base.py----------------------------------------
A:sympy.mpmath.ctx_base.xs->zip(xs, ys)
A:sympy.mpmath.ctx_base.x->ctx.convert(x)
A:sympy.mpmath.ctx_base.absx->abs(x)
A:sympy.mpmath.ctx_base.part_tol->max(tol, absx * tol)
A:sympy.mpmath.ctx_base.t->ctx.convert(t)
A:sympy.mpmath.ctx_base.rel_epsabs_eps->ctx.ldexp(1, -ctx.prec + 4)
A:sympy.mpmath.ctx_base.diff->abs(s - t)
A:sympy.mpmath.ctx_base.abss->abs(s)
A:sympy.mpmath.ctx_base.abst->abs(t)
A:sympy.mpmath.ctx_base.a->ctx.mpf(args[0])
A:sympy.mpmath.ctx_base.b->ctx.mpf(args[1])
A:sympy.mpmath.ctx_base.n->int(args[1])
A:sympy.mpmath.ctx_base._gcd->staticmethod(libmp.gcd)
A:sympy.mpmath.ctx_base.list_primes->staticmethod(libmp.list_primes)
A:sympy.mpmath.ctx_base.isprime->staticmethod(libmp.isprime)
A:sympy.mpmath.ctx_base.bernfrac->staticmethod(libmp.bernfrac)
A:sympy.mpmath.ctx_base.moebius->staticmethod(libmp.moebius)
A:sympy.mpmath.ctx_base._ifac->staticmethod(libmp.ifac)
A:sympy.mpmath.ctx_base._eulernum->staticmethod(libmp.eulernum)
A:sympy.mpmath.ctx_base._stirling1->staticmethod(libmp.stirling1)
A:sympy.mpmath.ctx_base._stirling2->staticmethod(libmp.stirling2)
A:sympy.mpmath.ctx_base.term_mag->ctx.mag(term)
A:sympy.mpmath.ctx_base.max_mag->max(max_mag, term_mag)
A:sympy.mpmath.ctx_base.sum_mag->ctx.mag(s - one)
A:sympy.mpmath.ctx_base.value->f(*args, **kwargs)
sympy.mpmath.ctx_base.Context(object)
sympy.mpmath.ctx_base.StandardBaseContext(ctx)
sympy.mpmath.ctx_base.StandardBaseContext.__init__(ctx)
sympy.mpmath.ctx_base.StandardBaseContext._as_points(ctx,x)
sympy.mpmath.ctx_base.StandardBaseContext._default_hyper_maxprec(ctx,p)
sympy.mpmath.ctx_base.StandardBaseContext._im(ctx,x)
sympy.mpmath.ctx_base.StandardBaseContext._init_aliases(ctx)
sympy.mpmath.ctx_base.StandardBaseContext._re(ctx,x)
sympy.mpmath.ctx_base.StandardBaseContext._zeta_int(ctx,n)
sympy.mpmath.ctx_base.StandardBaseContext.almosteq(ctx,s,t,rel_eps=None,abs_eps=None)
sympy.mpmath.ctx_base.StandardBaseContext.arange(ctx,*args)
sympy.mpmath.ctx_base.StandardBaseContext.bad_domain(ctx,msg)
sympy.mpmath.ctx_base.StandardBaseContext.chop(ctx,x,tol=None)
sympy.mpmath.ctx_base.StandardBaseContext.cos_sin(ctx,z,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.cospi_sinpi(ctx,z,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fadd(ctx,x,y,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fdiv(ctx,x,y,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fdot(ctx,xs,ys=None,conjugate=False)
sympy.mpmath.ctx_base.StandardBaseContext.fmul(ctx,x,y,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fneg(ctx,x,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fprod(ctx,args)
sympy.mpmath.ctx_base.StandardBaseContext.fsub(ctx,x,y,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.fsum(ctx,args,absolute=False,squared=False)
sympy.mpmath.ctx_base.StandardBaseContext.linspace(ctx,*args,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.maxcalls(ctx,f,N)
sympy.mpmath.ctx_base.StandardBaseContext.memoize(ctx,f)
sympy.mpmath.ctx_base.StandardBaseContext.mul_accurately(ctx,factors,check_step=1)
sympy.mpmath.ctx_base.StandardBaseContext.nprint(ctx,x,n=6,**kwargs)
sympy.mpmath.ctx_base.StandardBaseContext.power(ctx,x,y)
sympy.mpmath.ctx_base.StandardBaseContext.sum_accurately(ctx,terms,check_step=1)
sympy.mpmath.ctx_base.StandardBaseContext.warn(ctx,msg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/identification.py----------------------------------------
A:sympy.mpmath.identification.n->len(x)
A:sympy.mpmath.identification.target->int(prec * 0.75)
A:sympy.mpmath.identification.tol->ctx.mpf(tol)
A:sympy.mpmath.identification.minx->min((abs(xx) for xx in x[1:]))
A:sympy.mpmath.identification.g->sqrt_fixed((4 << prec) // 3, prec)
A:sympy.mpmath.identification.s[k]->sqrt_fixed(t, prec)
A:sympy.mpmath.identification.t->ft(ctx, x, c)
A:sympy.mpmath.identification.t0->sqrt_fixed(H[m, m] ** 2 + H[m, m + 1] ** 2 >> prec, prec)
A:sympy.mpmath.identification.err->abs(y[i])
A:sympy.mpmath.identification.best_err->min(err, best_err)
A:sympy.mpmath.identification.recnorm->max((abs(h) for h in H.values()))
A:sympy.mpmath.identification.x->ctx.mpf(x)
A:sympy.mpmath.identification.a->ctx.pslq(xs, **kwargs)
A:sympy.mpmath.identification.z->fracgcd(-p, q)
A:sympy.mpmath.identification.s->ftn.replace('$y', s).replace('$c', cn)
A:sympy.mpmath.identification.num->'*'.join(num)
A:sympy.mpmath.identification.den->'*'.join(den)
A:sympy.mpmath.identification.sol->ctx.identify(-x, constants, tol, maxcoeff, full, verbose)
A:sympy.mpmath.identification.namespace->dict(((name, getattr(ctx, name)) for name in dir(ctx)))
A:sympy.mpmath.identification.r->ctx.pslq([ctx.ln(x)] + [a[0] for a in logs], tol, M)
A:sympy.mpmath.identification.q->ctx.pslq([ctx.one, t, t ** 2], tol, M)
sympy.mpmath.identification.IdentificationMethods(object)
sympy.mpmath.identification.findpoly(ctx,x,n=1,**kwargs)
sympy.mpmath.identification.fracgcd(p,q)
sympy.mpmath.identification.identify(ctx,x,constants=[],tol=None,maxcoeff=1000,full=False,verbose=False)
sympy.mpmath.identification.prodstring(r,constants)
sympy.mpmath.identification.pslq(ctx,x,tol=None,maxcoeff=1000,maxsteps=100,verbose=False)
sympy.mpmath.identification.pslqstring(r,constants)
sympy.mpmath.identification.quadraticstring(ctx,t,a,b,c)
sympy.mpmath.identification.round_fixed(x,prec)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/ctx_mp_python.py----------------------------------------
A:sympy.mpmath.ctx_mp_python.prec->dps_to_prec(kwargs['dps'])
A:sympy.mpmath.ctx_mp_python.rounding->kwargs.get('rounding', rounding)
A:sympy.mpmath.ctx_mp_python.v->new(cls)
A:sympy.mpmath.ctx_mp_python.v._mpf_->mpc_abs(s._mpc_, prec, rounding)
A:sympy.mpmath.ctx_mp_python.t->ctx.make_mpf(s).mpc_convert_lhs(t)
A:sympy.mpmath.ctx_mp_python.x->ctx.convert(x)
A:sympy.mpmath.ctx_mp_python.man_exp->property(lambda self: self._mpf_[1:3])
A:sympy.mpmath.ctx_mp_python.man->property(lambda self: self._mpf_[1])
A:sympy.mpmath.ctx_mp_python.exp->property(lambda self: self._mpf_[2])
A:sympy.mpmath.ctx_mp_python.bc->property(lambda self: self._mpf_[3])
A:sympy.mpmath.ctx_mp_python.real->property(lambda self: self.context.make_mpf(self._mpc_[0]))
A:sympy.mpmath.ctx_mp_python.imag->property(lambda self: self.context.make_mpf(self._mpc_[1]))
A:sympy.mpmath.ctx_mp_python.self._mpf_->from_pickable(val)
A:sympy.mpmath.ctx_mp_python.code->code.replace('%NAME%', name).replace('%NAME%', name)
A:sympy.mpmath.ctx_mp_python._mpf.__eq__->binary_op('__eq__', 'return mpf_eq(sval, tval)', 'return mpf_eq(sval, from_int(other))', 'return (tval[1] == fzero) and mpf_eq(tval[0], sval)')
A:sympy.mpmath.ctx_mp_python._mpf.__add__->binary_op('__add__', 'val = mpf_add(sval, tval, prec, rounding)' + return_mpf, 'val = mpf_add(sval, from_int(other), prec, rounding)' + return_mpf, 'val = mpc_add_mpf(tval, sval, prec, rounding)' + return_mpc)
A:sympy.mpmath.ctx_mp_python._mpf.__sub__->binary_op('__sub__', 'val = mpf_sub(sval, tval, prec, rounding)' + return_mpf, 'val = mpf_sub(sval, from_int(other), prec, rounding)' + return_mpf, 'val = mpc_sub((sval, fzero), tval, prec, rounding)' + return_mpc)
A:sympy.mpmath.ctx_mp_python._mpf.__mul__->binary_op('__mul__', 'val = mpf_mul(sval, tval, prec, rounding)' + return_mpf, 'val = mpf_mul_int(sval, other, prec, rounding)' + return_mpf, 'val = mpc_mul_mpf(tval, sval, prec, rounding)' + return_mpc)
A:sympy.mpmath.ctx_mp_python._mpf.__div__->binary_op('__div__', 'val = mpf_div(sval, tval, prec, rounding)' + return_mpf, 'val = mpf_div(sval, from_int(other), prec, rounding)' + return_mpf, 'val = mpc_mpf_div(sval, tval, prec, rounding)' + return_mpc)
A:sympy.mpmath.ctx_mp_python._mpf.__mod__->binary_op('__mod__', 'val = mpf_mod(sval, tval, prec, rounding)' + return_mpf, 'val = mpf_mod(sval, from_int(other), prec, rounding)' + return_mpf, 'raise NotImplementedError("complex modulo")')
A:sympy.mpmath.ctx_mp_python._mpf.__pow__->binary_op('__pow__', mpf_pow_same, 'val = mpf_pow_int(sval, other, prec, rounding)' + return_mpf, 'val = mpc_pow((sval, fzero), tval, prec, rounding)' + return_mpc)
A:sympy.mpmath.ctx_mp_python.a->ctx.convert(a)
A:sympy.mpmath.ctx_mp_python.a.__doc__->getattr(function_docs, docname, '')
A:sympy.mpmath.ctx_mp_python.s->ctx.make_mpf(s)
A:sympy.mpmath.ctx_mp_python.v._mpc_->mpc_mul_int(s._mpc_, t, prec, rounding)
A:sympy.mpmath.ctx_mp_python.y->cls.context.convert(x)
A:sympy.mpmath.ctx_mp_python.b->ctx.convert(b)
A:sympy.mpmath.ctx_mp_python.ctx.mpf->type('mpf', (_mpf,), {})
A:sympy.mpmath.ctx_mp_python.ctx.mpc->type('mpc', (_mpc,), {})
A:sympy.mpmath.ctx_mp_python.ctx.constant->type('constant', (_constant,), {})
A:sympy.mpmath.ctx_mp_python.ctx._precctx._prec_rounding[0]->dps_to_prec(n)
A:sympy.mpmath.ctx_mp_python.ctx._dps->max(1, int(n))
A:sympy.mpmath.ctx_mp_python.dps->property(lambda ctx: ctx._dps, _set_dps)
A:sympy.mpmath.ctx_mp_python._mpf_->from_str(x, prec, rounding)
A:sympy.mpmath.ctx_mp_python.re_normal->bool(re[1])
A:sympy.mpmath.ctx_mp_python.im_normal->bool(im[1])
A:sympy.mpmath.ctx_mp_python.term->ctx.absmax(term)
A:sympy.mpmath.ctx_mp_python.(reval, imval)->mpc_pow_int((reval, imval), 2, prec + 10)
A:sympy.mpmath.ctx_mp_python.reval->mpf_abs(reval)
A:sympy.mpmath.ctx_mp_python.A->zip(A, B)
A:sympy.mpmath.ctx_mp_python.a_real->hasattr_(a, '_mpf_')
A:sympy.mpmath.ctx_mp_python.b_real->hasattr_(b, '_mpf_')
A:sympy.mpmath.ctx_mp_python.a_complex->hasattr_(a, '_mpc_')
A:sympy.mpmath.ctx_mp_python.b_complex->hasattr_(b, '_mpc_')
A:sympy.mpmath.ctx_mp_python.bim->mpf_neg(bim)
A:sympy.mpmath.ctx_mp_python.f.__doc__->function_docs.__dict__.get(name, 'Computes the %s of x' % doc)
A:sympy.mpmath.ctx_mp_python.retval->f(ctx, *args, **kwargs)
A:sympy.mpmath.ctx_mp_python.f_wrapped.__doc__->function_docs.__dict__.get(name, f.__doc__)
A:sympy.mpmath.ctx_mp_python.(p, q)->ctx.convert(x).split('/')
A:sympy.mpmath.ctx_mp_python.p->int(p)
A:sympy.mpmath.ctx_mp_python.q->int(q)
sympy.mpmath.ctx_mp_python.PythonMPContext(ctx)
sympy.mpmath.ctx_mp_python.PythonMPContext.__init__(ctx)
sympy.mpmath.ctx_mp_python.PythonMPContext._convert_param(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext._mpf_mag(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext._set_dps(ctx,n)
sympy.mpmath.ctx_mp_python.PythonMPContext._set_prec(ctx,n)
sympy.mpmath.ctx_mp_python.PythonMPContext._wrap_libmp_function(ctx,mpf_f,mpc_f=None,mpi_f=None,doc='<nodoc>')
sympy.mpmath.ctx_mp_python.PythonMPContext._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.ctx_mp_python.PythonMPContext.convert(ctx,x,strings=True)
sympy.mpmath.ctx_mp_python.PythonMPContext.default(ctx)
sympy.mpmath.ctx_mp_python.PythonMPContext.fdot(ctx,A,B=None,conjugate=False)
sympy.mpmath.ctx_mp_python.PythonMPContext.fsum(ctx,terms,absolute=False,squared=False)
sympy.mpmath.ctx_mp_python.PythonMPContext.isinf(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext.isint(ctx,x,gaussian=False)
sympy.mpmath.ctx_mp_python.PythonMPContext.isnan(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext.isnormal(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext.mag(ctx,x)
sympy.mpmath.ctx_mp_python.PythonMPContext.make_mpc(ctx,v)
sympy.mpmath.ctx_mp_python.PythonMPContext.make_mpf(ctx,v)
sympy.mpmath.ctx_mp_python._constant(cls,func,name,docname='')
sympy.mpmath.ctx_mp_python._constant.__new__(cls,func,name,docname='')
sympy.mpmath.ctx_mp_python._constant.__repr__(self)
sympy.mpmath.ctx_mp_python._constant._mpf_(self)
sympy.mpmath.ctx_mp_python._mpc(cls,real=0,imag=0)
sympy.mpmath.ctx_mp_python._mpc.__abs__(s)
sympy.mpmath.ctx_mp_python._mpc.__add__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__complex__(s)
sympy.mpmath.ctx_mp_python._mpc.__div__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__eq__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__getstate__(self)
sympy.mpmath.ctx_mp_python._mpc.__hash__(s)
sympy.mpmath.ctx_mp_python._mpc.__mul__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__ne__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__neg__(s)
sympy.mpmath.ctx_mp_python._mpc.__new__(cls,real=0,imag=0)
sympy.mpmath.ctx_mp_python._mpc.__nonzero__(s)
sympy.mpmath.ctx_mp_python._mpc.__pos__(s)
sympy.mpmath.ctx_mp_python._mpc.__pow__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__rdiv__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__repr__(s)
sympy.mpmath.ctx_mp_python._mpc.__rmul__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__rpow__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__rsub__(s,t)
sympy.mpmath.ctx_mp_python._mpc.__setstate__(self,val)
sympy.mpmath.ctx_mp_python._mpc.__str__(s)
sympy.mpmath.ctx_mp_python._mpc.__sub__(s,t)
sympy.mpmath.ctx_mp_python._mpc._compare(*args)
sympy.mpmath.ctx_mp_python._mpc.ae(s,t,rel_eps=None,abs_eps=None)
sympy.mpmath.ctx_mp_python._mpc.conjugate(s)
sympy.mpmath.ctx_mp_python._mpc.mpc_convert_lhs(cls,x)
sympy.mpmath.ctx_mp_python._mpf(cls,val=fzero,**kwargs)
sympy.mpmath.ctx_mp_python._mpf.__abs__(s)
sympy.mpmath.ctx_mp_python._mpf.__cmp__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__complex__(s)
sympy.mpmath.ctx_mp_python._mpf.__float__(s)
sympy.mpmath.ctx_mp_python._mpf.__ge__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__getstate__(self)
sympy.mpmath.ctx_mp_python._mpf.__gt__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__hash__(s)
sympy.mpmath.ctx_mp_python._mpf.__int__(s)
sympy.mpmath.ctx_mp_python._mpf.__le__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__long__(s)
sympy.mpmath.ctx_mp_python._mpf.__lt__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__ne__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__neg__(s)
sympy.mpmath.ctx_mp_python._mpf.__new__(cls,val=fzero,**kwargs)
sympy.mpmath.ctx_mp_python._mpf.__nonzero__(s)
sympy.mpmath.ctx_mp_python._mpf.__pos__(s)
sympy.mpmath.ctx_mp_python._mpf.__rdiv__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__repr__(s)
sympy.mpmath.ctx_mp_python._mpf.__rmod__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__round__(self,*args)
sympy.mpmath.ctx_mp_python._mpf.__rpow__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__rsub__(s,t)
sympy.mpmath.ctx_mp_python._mpf.__setstate__(self,val)
sympy.mpmath.ctx_mp_python._mpf.__str__(s)
sympy.mpmath.ctx_mp_python._mpf._cmp(s,t,func)
sympy.mpmath.ctx_mp_python._mpf.ae(s,t,rel_eps=None,abs_eps=None)
sympy.mpmath.ctx_mp_python._mpf.mpf_convert_arg(cls,x,prec,rounding)
sympy.mpmath.ctx_mp_python._mpf.mpf_convert_lhs(cls,x)
sympy.mpmath.ctx_mp_python._mpf.mpf_convert_rhs(cls,x)
sympy.mpmath.ctx_mp_python._mpf.sqrt(s)
sympy.mpmath.ctx_mp_python._mpf.to_fixed(self,prec)
sympy.mpmath.ctx_mp_python.binary_op(name,with_mpf='',with_int='',with_mpc='')
sympy.mpmath.ctx_mp_python.mpnumeric(cls,val)
sympy.mpmath.ctx_mp_python.mpnumeric.__new__(cls,val)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/math2.py----------------------------------------
A:sympy.mpmath.math2.x->float(x)
A:sympy.mpmath.math2.pow->_mathfun_n(operator.pow, lambda x, y: complex(x) ** y)
A:sympy.mpmath.math2.log->_mathfun_n(math_log, cmath.log)
A:sympy.mpmath.math2.sqrt->_mathfun(math_sqrt, cmath.sqrt)
A:sympy.mpmath.math2.exp->_mathfun_real(math.exp, cmath.exp)
A:sympy.mpmath.math2.cos->_mathfun_real(math.cos, cmath.cos)
A:sympy.mpmath.math2.sin->_mathfun_real(math.sin, cmath.sin)
A:sympy.mpmath.math2.tan->_mathfun_real(math.tan, cmath.tan)
A:sympy.mpmath.math2.acos->_mathfun(math.acos, cmath.acos)
A:sympy.mpmath.math2.asin->_mathfun(math.asin, cmath.asin)
A:sympy.mpmath.math2.atan->_mathfun_real(math.atan, cmath.atan)
A:sympy.mpmath.math2.cosh->_mathfun_real(math.cosh, cmath.cosh)
A:sympy.mpmath.math2.sinh->_mathfun_real(math.sinh, cmath.sinh)
A:sympy.mpmath.math2.tanh->_mathfun_real(math.tanh, cmath.tanh)
A:sympy.mpmath.math2.floor->_mathfun_real(math.floor, lambda z: complex(math.floor(z.real), math.floor(z.imag)))
A:sympy.mpmath.math2.ceil->_mathfun_real(math.ceil, lambda z: complex(math.ceil(z.real), math.ceil(z.imag)))
A:sympy.mpmath.math2.cos_sin->_mathfun_real(lambda x: (math.cos(x), math.sin(x)), lambda z: (cmath.cos(z), cmath.sin(z)))
A:sympy.mpmath.math2.cbrt->_mathfun(lambda x: x ** (1.0 / 3), lambda z: z ** (1.0 / 3))
A:sympy.mpmath.math2.(n, r)->divmod(z.real, 0.5)
A:sympy.mpmath.math2.cospi->_mathfun_real(_cospi_real, _cospi_complex)
A:sympy.mpmath.math2.sinpi->_mathfun_real(_sinpi_real, _sinpi_complex)
A:sympy.mpmath.math2._intx->int(x)
A:sympy.mpmath.math2.gamma->_mathfun_real(_gamma_real, _gamma_complex)
A:sympy.mpmath.math2.v->v.conjugate().conjugate()
A:sympy.mpmath.math2.refloor->floor(re)
A:sympy.mpmath.math2.digamma->_mathfun_real(_digamma_real, _digamma_complex)
A:sympy.mpmath.math2.typez->type(z)
A:sympy.mpmath.math2.z->complex(z.real, 0.0)
A:sympy.mpmath.math2.absz->abs(z)
A:sympy.mpmath.math2.ref->ei_asymp(zref, _e1)
A:sympy.mpmath.math2.s->complex(s)
A:sympy.mpmath.math2.n->int(s)
sympy.mpmath.math2._cospi_complex(z)
sympy.mpmath.math2._cospi_real(x)
sympy.mpmath.math2._digamma_complex(x)
sympy.mpmath.math2._digamma_real(x)
sympy.mpmath.math2._erf_taylor(x)
sympy.mpmath.math2._erfc_asymp(x)
sympy.mpmath.math2._erfc_mid(x)
sympy.mpmath.math2._gamma_complex(x)
sympy.mpmath.math2._gamma_real(x)
sympy.mpmath.math2._mathfun(f_real,f_complex)
sympy.mpmath.math2._mathfun_n(f_real,f_complex)
sympy.mpmath.math2._mathfun_real(f_real,f_complex)
sympy.mpmath.math2._polyval(coeffs,x)
sympy.mpmath.math2._sinpi_complex(z)
sympy.mpmath.math2._sinpi_real(x)
sympy.mpmath.math2.arg(x)
sympy.mpmath.math2.cotpi(x)
sympy.mpmath.math2.e1(z)
sympy.mpmath.math2.ei(z,_e1=False)
sympy.mpmath.math2.ei_asymp(z,_e1=False)
sympy.mpmath.math2.ei_taylor(z,_e1=False)
sympy.mpmath.math2.erf(x)
sympy.mpmath.math2.erfc(x)
sympy.mpmath.math2.factorial(x)
sympy.mpmath.math2.loggamma(x)
sympy.mpmath.math2.nthroot(x,n)
sympy.mpmath.math2.rgamma(x)
sympy.mpmath.math2.tanpi(x)
sympy.mpmath.math2.zeta(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/conftest.py----------------------------------------
A:sympy.mpmath.conftest.rootdir->os.path.abspath(os.getcwd())


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/ctx_fp.py----------------------------------------
A:sympy.mpmath.ctx_fp.prec->property(_get_prec, _set_prec)
A:sympy.mpmath.ctx_fp.dps->property(_get_dps, _set_dps)
A:sympy.mpmath.ctx_fp.f_wrapped.__doc__->function_docs.__dict__.get(name, f.__doc__)
A:sympy.mpmath.ctx_fp.cache[n]->to_float(mpf_bernoulli(n, 53, 'n'), strict=True)
A:sympy.mpmath.ctx_fp.power->staticmethod(math2.pow)
A:sympy.mpmath.ctx_fp.sqrt->staticmethod(math2.sqrt)
A:sympy.mpmath.ctx_fp.exp->staticmethod(math2.exp)
A:sympy.mpmath.ctx_fp.lnlog->staticmethod(math2.log)
A:sympy.mpmath.ctx_fp.cos->staticmethod(math2.cos)
A:sympy.mpmath.ctx_fp.sin->staticmethod(math2.sin)
A:sympy.mpmath.ctx_fp.tan->staticmethod(math2.tan)
A:sympy.mpmath.ctx_fp.cos_sin->staticmethod(math2.cos_sin)
A:sympy.mpmath.ctx_fp.acos->staticmethod(math2.acos)
A:sympy.mpmath.ctx_fp.asin->staticmethod(math2.asin)
A:sympy.mpmath.ctx_fp.atan->staticmethod(math2.atan)
A:sympy.mpmath.ctx_fp.cosh->staticmethod(math2.cosh)
A:sympy.mpmath.ctx_fp.sinh->staticmethod(math2.sinh)
A:sympy.mpmath.ctx_fp.tanh->staticmethod(math2.tanh)
A:sympy.mpmath.ctx_fp.gamma->staticmethod(math2.gamma)
A:sympy.mpmath.ctx_fp.rgamma->staticmethod(math2.rgamma)
A:sympy.mpmath.ctx_fp.facfactorial->staticmethod(math2.factorial)
A:sympy.mpmath.ctx_fp.floor->staticmethod(math2.floor)
A:sympy.mpmath.ctx_fp.ceil->staticmethod(math2.ceil)
A:sympy.mpmath.ctx_fp.cospi->staticmethod(math2.cospi)
A:sympy.mpmath.ctx_fp.sinpi->staticmethod(math2.sinpi)
A:sympy.mpmath.ctx_fp.cbrt->staticmethod(math2.cbrt)
A:sympy.mpmath.ctx_fp._nthroot->staticmethod(math2.nthroot)
A:sympy.mpmath.ctx_fp._ei->staticmethod(math2.ei)
A:sympy.mpmath.ctx_fp._e1->staticmethod(math2.e1)
A:sympy.mpmath.ctx_fp._zeta_zeta_int->staticmethod(math2.zeta)
A:sympy.mpmath.ctx_fp.z->complex(z)
A:sympy.mpmath.ctx_fp.n->round(z)
A:sympy.mpmath.ctx_fp.intz->int(z)
A:sympy.mpmath.ctx_fp.coeffs->list(coeffs)
A:sympy.mpmath.ctx_fp.num->range(p)
A:sympy.mpmath.ctx_fp.den->range(p, p + q)
A:sympy.mpmath.ctx_fp.m->int(m)
A:sympy.mpmath.ctx_fp.digamma->staticmethod(math2.digamma)
A:sympy.mpmath.ctx_fp.x->ctx.convert(x)
A:sympy.mpmath.ctx_fp._erf->staticmethod(math2.erf)
A:sympy.mpmath.ctx_fp._erfc->staticmethod(math2.erfc)
sympy.mpmath.FPContext(ctx)
sympy.mpmath.FPContext._convert_param(ctx,z)
sympy.mpmath.FPContext._get_dps(ctx)
sympy.mpmath.FPContext._get_prec(ctx)
sympy.mpmath.FPContext._is_complex_type(ctx,z)
sympy.mpmath.FPContext._is_real_type(ctx,z)
sympy.mpmath.FPContext._set_dps(ctx,p)
sympy.mpmath.FPContext._set_prec(ctx,p)
sympy.mpmath.FPContext._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.FPContext.arg(ctx,z)
sympy.mpmath.FPContext.atan2(ctx,x,y)
sympy.mpmath.FPContext.bernoulli(ctx,n)
sympy.mpmath.FPContext.convert(ctx,x)
sympy.mpmath.FPContext.expj(ctx,x)
sympy.mpmath.FPContext.expjpi(ctx,x)
sympy.mpmath.FPContext.harmonic(ctx,x)
sympy.mpmath.FPContext.hypsum(ctx,p,q,types,coeffs,z,maxterms=6000,**kwargs)
sympy.mpmath.FPContext.is_special(ctx,x)
sympy.mpmath.FPContext.isinf(ctx,x)
sympy.mpmath.FPContext.isint(ctx,z)
sympy.mpmath.FPContext.isnan(ctx,x)
sympy.mpmath.FPContext.isnormal(ctx,x)
sympy.mpmath.FPContext.isnpint(ctx,x)
sympy.mpmath.FPContext.mag(ctx,z)
sympy.mpmath.FPContext.nint_distance(ctx,z)
sympy.mpmath.FPContext.psi(ctx,m,z)
sympy.mpmath.FPContext.rand(ctx)
sympy.mpmath.FPContext.sum_accurately(ctx,terms,check_step=1)
sympy.mpmath.FPContext.to_fixed(ctx,x,prec)
sympy.mpmath.ctx_fp.FPContext(ctx)
sympy.mpmath.ctx_fp.FPContext.__init__(ctx)
sympy.mpmath.ctx_fp.FPContext._convert_param(ctx,z)
sympy.mpmath.ctx_fp.FPContext._get_dps(ctx)
sympy.mpmath.ctx_fp.FPContext._get_prec(ctx)
sympy.mpmath.ctx_fp.FPContext._is_complex_type(ctx,z)
sympy.mpmath.ctx_fp.FPContext._is_real_type(ctx,z)
sympy.mpmath.ctx_fp.FPContext._set_dps(ctx,p)
sympy.mpmath.ctx_fp.FPContext._set_prec(ctx,p)
sympy.mpmath.ctx_fp.FPContext._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.ctx_fp.FPContext.arg(ctx,z)
sympy.mpmath.ctx_fp.FPContext.atan2(ctx,x,y)
sympy.mpmath.ctx_fp.FPContext.bernoulli(ctx,n)
sympy.mpmath.ctx_fp.FPContext.convert(ctx,x)
sympy.mpmath.ctx_fp.FPContext.expj(ctx,x)
sympy.mpmath.ctx_fp.FPContext.expjpi(ctx,x)
sympy.mpmath.ctx_fp.FPContext.harmonic(ctx,x)
sympy.mpmath.ctx_fp.FPContext.hypsum(ctx,p,q,types,coeffs,z,maxterms=6000,**kwargs)
sympy.mpmath.ctx_fp.FPContext.is_special(ctx,x)
sympy.mpmath.ctx_fp.FPContext.isinf(ctx,x)
sympy.mpmath.ctx_fp.FPContext.isint(ctx,z)
sympy.mpmath.ctx_fp.FPContext.isnan(ctx,x)
sympy.mpmath.ctx_fp.FPContext.isnormal(ctx,x)
sympy.mpmath.ctx_fp.FPContext.isnpint(ctx,x)
sympy.mpmath.ctx_fp.FPContext.mag(ctx,z)
sympy.mpmath.ctx_fp.FPContext.nint_distance(ctx,z)
sympy.mpmath.ctx_fp.FPContext.psi(ctx,m,z)
sympy.mpmath.ctx_fp.FPContext.rand(ctx)
sympy.mpmath.ctx_fp.FPContext.sum_accurately(ctx,terms,check_step=1)
sympy.mpmath.ctx_fp.FPContext.to_fixed(ctx,x,prec)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/visualization.py----------------------------------------
A:sympy.mpmath.visualization.fig->pylab.figure()
A:sympy.mpmath.visualization.axes->mpl_toolkits.mplot3d.axes3d.Axes3D(fig)
A:sympy.mpmath.visualization.x->pylab.linspace(rea, reb, M)
A:sympy.mpmath.visualization.v->pylab.linspace(va, vb, N)
A:sympy.mpmath.visualization.re->float(v.real)
A:sympy.mpmath.visualization.im->float(v.imag)
A:sympy.mpmath.visualization.M->int(ctx.sqrt(points * dre / dim) + 1)
A:sympy.mpmath.visualization.N->int(ctx.sqrt(points * dim / dre) + 1)
A:sympy.mpmath.visualization.y->pylab.linspace(ima, imb, N)
A:sympy.mpmath.visualization.w->pylab.zeros((N, M, 3))
A:sympy.mpmath.visualization.z->ctx.mpc(x[m], y[n])
A:sympy.mpmath.visualization.u->pylab.linspace(ua, ub, M)
A:sympy.mpmath.visualization.fdata->f(ctx.convert(u[m]), ctx.convert(v[n]))
A:sympy.mpmath.visualization.maxd->max(dx, dy, dz)
sympy.mpmath.visualization.VisualizationMethods(object)
sympy.mpmath.visualization.cplot(ctx,f,re=[-5,5],im=[-5,5],points=2000,color=None,verbose=False,file=None,dpi=None,axes=None)
sympy.mpmath.visualization.default_color_function(ctx,z)
sympy.mpmath.visualization.plot(ctx,f,xlim=[-5,5],ylim=None,points=200,file=None,dpi=None,singularities=[],axes=None)
sympy.mpmath.visualization.splot(ctx,f,u=[-5,5],v=[-5,5],points=100,keep_aspect=True,wireframe=False,file=None,dpi=None,axes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_special.py----------------------------------------
sympy.mpmath.tests.test_special.test_convert_special()
sympy.mpmath.tests.test_special.test_div_bug()
sympy.mpmath.tests.test_special.test_functions_special()
sympy.mpmath.tests.test_special.test_special()
sympy.mpmath.tests.test_special.test_special_powers()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_bitwise.py----------------------------------------
A:sympy.mpmath.tests.test_bitwise.a->ldexp(1, 2 ** (p - 1))
A:sympy.mpmath.tests.test_bitwise.b->ldexp(1, 2 ** p)
A:sympy.mpmath.tests.test_bitwise.c->ldexp(1, 2 ** (p + 1))
A:sympy.mpmath.tests.test_bitwise.x->mpf(1)
A:sympy.mpmath.tests.test_bitwise.d->ldexp(1, -2 ** (p - 1))
A:sympy.mpmath.tests.test_bitwise.e->ldexp(1, -2 ** p)
A:sympy.mpmath.tests.test_bitwise.f->ldexp(1, -2 ** (p + 1))
sympy.mpmath.tests.test_bitwise.test_add_exact()
sympy.mpmath.tests.test_bitwise.test_bitcount()
sympy.mpmath.tests.test_bitwise.test_long_exponent_shifts()
sympy.mpmath.tests.test_bitwise.test_perturb()
sympy.mpmath.tests.test_bitwise.test_round_ceiling()
sympy.mpmath.tests.test_bitwise.test_round_down()
sympy.mpmath.tests.test_bitwise.test_round_floor()
sympy.mpmath.tests.test_bitwise.test_round_nearest()
sympy.mpmath.tests.test_bitwise.test_round_up()
sympy.mpmath.tests.test_bitwise.test_rounding_bugs()
sympy.mpmath.tests.test_bitwise.test_rounding_issue160()
sympy.mpmath.tests.test_bitwise.test_trailing()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_linalg.py----------------------------------------
A:sympy.mpmath.tests.test_linalg.A1->matrix([[3, 1, 6], [2, 1, 3], [1, 1, 1]])
A:sympy.mpmath.tests.test_linalg.A2->matrix([[2, -1, -1, 2], [6, -2, 3, -1], [-4, 2, 3, -2], [2, 0, 4, -3]])
A:sympy.mpmath.tests.test_linalg.A3->matrix([[1, 0, -1, -1, 0], [0, 1, 1, 0, -1], [4, -5, 2, 0, 0], [0, 0, -2, 9, -12], [0, 5, 0, 0, 12]])
A:sympy.mpmath.tests.test_linalg.A4->matrix([[10.235, -4.56, 0.0, -0.035, 5.67], [-2.463, 1.27, 3.97, -8.63, 1.08], [-6.58, 0.86, -0.257, 9.32, -43.6], [9.83, 7.39, -17.25, 0.036, 24.86], [-9.31, 34.9, 78.56, 1.07, 65.8]])
A:sympy.mpmath.tests.test_linalg.A5->matrix([[1, 2, -4], [-2, -3, 5], [3, 5, -8]])
A:sympy.mpmath.tests.test_linalg.A6->matrix([[1.37736, 2.4814, 5.35919], [2.67928, -1.22956, 25.56021], [-1.22528 + 1000000.0, 9.91018, -35.0499 - 1000000.0]])
A:sympy.mpmath.tests.test_linalg.A7->matrix([[1, -0.5], [2, 1], [-2, 6]])
A:sympy.mpmath.tests.test_linalg.A8->matrix([[1, 2, 3], [-1, 0, 1], [-1, -2, -1], [1, 0, -1]])
A:sympy.mpmath.tests.test_linalg.A9->matrix([[4, 2, -2], [2, 5, -4], [-2, -4, 5.5]])
A:sympy.mpmath.tests.test_linalg.A10->matrix([[1.0 + 1j, 2.0, 2.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
A:sympy.mpmath.tests.test_linalg.A->mp.matrix(m, n)
A:sympy.mpmath.tests.test_linalg.(A, p)->LU_decomp(A)
A:sympy.mpmath.tests.test_linalg.y->matrix(y)
A:sympy.mpmath.tests.test_linalg.x->fp.cholesky_solve(A9, b9)
A:sympy.mpmath.tests.test_linalg.bak->mp.matrix(m, n).copy()
A:sympy.mpmath.tests.test_linalg.inv->inverse(A)
A:sympy.mpmath.tests.test_linalg.(H, p, x, r)->householder(extend(A, y))
A:sympy.mpmath.tests.test_linalg.(P, L, U)->lu(A)
A:sympy.mpmath.tests.test_linalg.b->randmatrix(5, 1, min=-1000, max=1000)
A:sympy.mpmath.tests.test_linalg.B->repr(zeros(2))
A:sympy.mpmath.tests.test_linalg.a->diag(dg)
A:sympy.mpmath.tests.test_linalg.c->iv.lu_solve(a, b)
A:sympy.mpmath.tests.test_linalg.LU->LU_decomp(A)
A:sympy.mpmath.tests.test_linalg.x2->improve_solution(A, x1, b)
A:sympy.mpmath.tests.test_linalg.dg->range(1, N + 1)
A:sympy.mpmath.tests.test_linalg.expa->diag([exp(x) for x in dg])
A:sympy.mpmath.tests.test_linalg.m->int(max(num1, num2))
A:sympy.mpmath.tests.test_linalg.dm->det(m)
A:sympy.mpmath.tests.test_linalg.e1->expm(a1, method='pade')
A:sympy.mpmath.tests.test_linalg.zero->mpf('0.0')
A:sympy.mpmath.tests.test_linalg.flg->bool(k % 2)
A:sympy.mpmath.tests.test_linalg.num1->nint(2 + (maxm - 2) * rand())
A:sympy.mpmath.tests.test_linalg.num2->nint(2 + (maxm - 2) * rand())
A:sympy.mpmath.tests.test_linalg.n->int(min(num1, num2))
A:sympy.mpmath.tests.test_linalg.val->nint(lowlimit + (uplimit - lowlimit) * rand())
A:sympy.mpmath.tests.test_linalg.val2->nint(lowlimit + (uplimit - lowlimit) * rand())
A:sympy.mpmath.tests.test_linalg.A[i, j]->mpf(val)
A:sympy.mpmath.tests.test_linalg.(Q, R)->qr(A, mode, edps=exdps)
A:sympy.mpmath.tests.test_linalg.maxnorm->mpf('1.0E-11')
A:sympy.mpmath.tests.test_linalg.n1->norm(eye(m) - Q.conjugate() * Q.T)
sympy.mpmath.tests.test_linalg.test_LU_cache()
sympy.mpmath.tests.test_linalg.test_LU_decomp()
sympy.mpmath.tests.test_linalg.test_cholesky()
sympy.mpmath.tests.test_linalg.test_cond()
sympy.mpmath.tests.test_linalg.test_det()
sympy.mpmath.tests.test_linalg.test_exp_pade()
sympy.mpmath.tests.test_linalg.test_factorization()
sympy.mpmath.tests.test_linalg.test_householder()
sympy.mpmath.tests.test_linalg.test_improve_solution()
sympy.mpmath.tests.test_linalg.test_interval_matrix()
sympy.mpmath.tests.test_linalg.test_inverse()
sympy.mpmath.tests.test_linalg.test_precision()
sympy.mpmath.tests.test_linalg.test_qr()
sympy.mpmath.tests.test_linalg.test_singular()
sympy.mpmath.tests.test_linalg.test_solve()
sympy.mpmath.tests.test_linalg.test_solve_overdet_complex()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_pickle.py----------------------------------------
A:sympy.mpmath.tests.test_pickle.fn->tempfile.mktemp()
A:sympy.mpmath.tests.test_pickle.f->open(fn, 'rb')
A:sympy.mpmath.tests.test_pickle.obj2->pickle.load(f)
A:sympy.mpmath.tests.test_pickle.obj->mpc('0.5', '0.2')
sympy.mpmath.tests.test_pickle.pickler(obj)
sympy.mpmath.tests.test_pickle.test_pickle()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_ode.py----------------------------------------
A:sympy.mpmath.tests.test_ode.g->odefun(lambda x, y: [(cos(x) - y[0]) / x], 1, [f(1)], tol=0.01, degree=5)
A:sympy.mpmath.tests.test_ode.f->odefun(lambda x, y: [-y[1], y[0]], 0, [1, 0])
A:sympy.mpmath.tests.test_ode.(c, s)->f(x)
sympy.mpmath.tests.test_ode.test_odefun_harmonic()
sympy.mpmath.tests.test_ode.test_odefun_rational()
sympy.mpmath.tests.test_ode.test_odefun_sinc_large()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_matrices.py----------------------------------------
A:sympy.mpmath.tests.test_matrices.A1->ones(2, 3)
A:sympy.mpmath.tests.test_matrices.A2->zeros(3, 2)
A:sympy.mpmath.tests.test_matrices.A3->matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
A:sympy.mpmath.tests.test_matrices.A4->matrix([[1, 2, 3], [4, 5, 6]])
A:sympy.mpmath.tests.test_matrices.A5->matrix([[6, -1], [3, 2], [0, -3]])
A:sympy.mpmath.tests.test_matrices.A6->matrix(A6, force_type=float)
A:sympy.mpmath.tests.test_matrices.A7->matrix([[1, 2], [3, 4], [5, 6], [7, 8]])
A:sympy.mpmath.tests.test_matrices.x->matrix([0, 1, 2, 3, 4])
A:sympy.mpmath.tests.test_matrices.A8->ones(5)
A:sympy.mpmath.tests.test_matrices.A9->randmatrix(3)
A:sympy.mpmath.tests.test_matrices.A10->matrix(A9)
A:sympy.mpmath.tests.test_matrices.A->ones(6)
A:sympy.mpmath.tests.test_matrices.V->matrix([1, 2, 3, 4, 5])
A:sympy.mpmath.tests.test_matrices.A1[0, :]->matrix([[10, 11, 12]])
A:sympy.mpmath.tests.test_matrices.A1[:, 2]->matrix([[13], [14], [15]])
A:sympy.mpmath.tests.test_matrices.A1[:2, :2]->matrix([[16, 17], [18, 19]])
A:sympy.mpmath.tests.test_matrices.one->mpf(1)
A:sympy.mpmath.tests.test_matrices.B->ones(6).copy()
A:sympy.mpmath.tests.test_matrices.a->numpy.matrix(l)
sympy.mpmath.tests.test_matrices.test_matrix_basic()
sympy.mpmath.tests.test_matrices.test_matrix_conjugate()
sympy.mpmath.tests.test_matrices.test_matrix_copy()
sympy.mpmath.tests.test_matrices.test_matrix_creation()
sympy.mpmath.tests.test_matrices.test_matrix_numpy()
sympy.mpmath.tests.test_matrices.test_matrix_power()
sympy.mpmath.tests.test_matrices.test_matrix_slices()
sympy.mpmath.tests.test_matrices.test_matrix_transform()
sympy.mpmath.tests.test_matrices.test_norms()
sympy.mpmath.tests.test_matrices.test_vector()
sympy.mpmath.tests.test_test_matrix_basic()
sympy.mpmath.tests.test_test_matrix_conjugate()
sympy.mpmath.tests.test_test_matrix_copy()
sympy.mpmath.tests.test_test_matrix_creation()
sympy.mpmath.tests.test_test_matrix_numpy()
sympy.mpmath.tests.test_test_matrix_power()
sympy.mpmath.tests.test_test_matrix_slices()
sympy.mpmath.tests.test_test_matrix_transform()
sympy.mpmath.tests.test_test_norms()
sympy.mpmath.tests.test_test_vector()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_rootfinding.py----------------------------------------
A:sympy.mpmath.tests.test_rootfinding.x->findroot(f, (10, 10))
A:sympy.mpmath.tests.test_rootfinding.f1x->f1(x, y)
sympy.mpmath.tests.test_rootfinding.test_anewton()
sympy.mpmath.tests.test_rootfinding.test_bisection()
sympy.mpmath.tests.test_rootfinding.test_findroot()
sympy.mpmath.tests.test_rootfinding.test_mnewton()
sympy.mpmath.tests.test_rootfinding.test_muller()
sympy.mpmath.tests.test_rootfinding.test_multidimensional()
sympy.mpmath.tests.test_rootfinding.test_multiplicity()
sympy.mpmath.tests.test_rootfinding.test_trivial()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_str.py----------------------------------------
A:sympy.mpmath.tests.test_str.m->matrix([[0.75, 0.190940654, -0.0299195971], [0.190940654, 0.65625, 0.205663228], [-0.0299195971, 0.205663228, 6.4453125e-21]])
sympy.mpmath.tests.test_str.test_nstr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_division.py----------------------------------------
A:sympy.mpmath.tests.test_division.a->fb('-0.101' + '0' * 200 + '1')
A:sympy.mpmath.tests.test_division.b->fb('1.10101')
A:sympy.mpmath.tests.test_division.c->mpf_mul(a, b, 250, round_floor)
A:sympy.mpmath.tests.test_division.q->fi(1000000)
A:sympy.mpmath.tests.test_division.p->fi(p)
sympy.mpmath.tests.test_division.test_div_1_3()
sympy.mpmath.tests.test_division.test_div_300()
sympy.mpmath.tests.test_division.test_div_negative_rnd_bug()
sympy.mpmath.tests.test_division.test_epsilon_rounding()
sympy.mpmath.tests.test_division.test_mod()
sympy.mpmath.tests.test_division.test_mpf_divi_1_3()
sympy.mpmath.tests.test_division.test_tight_integer_division()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_visualization.py----------------------------------------
A:sympy.mpmath.tests.test_visualization.fig->pylab.figure()
A:sympy.mpmath.tests.test_visualization.axes->pylab.figure().add_subplot(111)
sympy.mpmath.tests.test_visualization.test_axes()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/runtests.py----------------------------------------
A:sympy.mpmath.tests.runtests.importdir->os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '../..'))
A:sympy.mpmath.tests.runtests.pattern->os.path.dirname(sys.argv[0])
A:sympy.mpmath.tests.runtests.module->__import__(name)
A:sympy.mpmath.tests.runtests.priority->__import__(name).__dict__.get('priority', 100)
A:sympy.mpmath.tests.runtests.tstart->clock()
A:sympy.mpmath.tests.runtests.t1->clock()
A:sympy.mpmath.tests.runtests.(etype, evalue, trb)->sys.exc_info()
A:sympy.mpmath.tests.runtests.t2->clock()
A:sympy.mpmath.tests.runtests.tend->clock()
A:sympy.mpmath.tests.runtests.tracer->trace.Trace(ignoredirs=[sys.prefix, sys.exec_prefix], trace=0, count=1)
A:sympy.mpmath.tests.runtests.r->trace.Trace(ignoredirs=[sys.prefix, sys.exec_prefix], trace=0, count=1).results()
sympy.mpmath.tests.runtests.testit(importdir='',testdir='')
sympy.mpmath.tests.testit(importdir='',testdir='')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_functions2.py----------------------------------------
A:sympy.mpmath.tests.test_functions2.v->erfc(50j)
A:sympy.mpmath.tests.test_functions2.r->ei(20000 + 10 * j)
A:sympy.mpmath.tests.test_functions2.u->hyp2f1(-5, 5, 0.5, 0.5)
A:sympy.mpmath.tests.test_functions2.z->exp(j * pi / 3)
A:sympy.mpmath.tests.test_functions2.w->lambertw(1, 10 ** 20)
A:sympy.mpmath.tests.test_functions2.y->convert(y)
A:sympy.mpmath.tests.test_functions2.type_ok->isinstance(x, mpf)
A:sympy.mpmath.tests.test_functions2.d3->mpf('1e-3')
A:sympy.mpmath.tests.test_functions2.d10->mpf('1e-10')
A:sympy.mpmath.tests.test_functions2.d20->mpf('1e-20')
A:sympy.mpmath.tests.test_functions2.d40->mpf('1e-40')
A:sympy.mpmath.tests.test_functions2.d80->mpf('1e-80')
A:sympy.mpmath.tests.test_functions2.d300->mpf('1e-300')
A:sympy.mpmath.tests.test_functions2.d1000->mpf('1e-1000')
A:sympy.mpmath.tests.test_functions2.x1->hyp1f1(a, b, z)
A:sympy.mpmath.tests.test_functions2.x->ldexp(2476979795053773, -52)
sympy.mpmath.tests.test_functions2.test_agm()
sympy.mpmath.tests.test_functions2.test_airy()
sympy.mpmath.tests.test_functions2.test_appellf1()
sympy.mpmath.tests.test_functions2.test_bessel()
sympy.mpmath.tests.test_functions2.test_bessel_zeros()
sympy.mpmath.tests.test_functions2.test_coulomb()
sympy.mpmath.tests.test_functions2.test_e1()
sympy.mpmath.tests.test_functions2.test_ei()
sympy.mpmath.tests.test_functions2.test_elliptic_integrals()
sympy.mpmath.tests.test_functions2.test_erf()
sympy.mpmath.tests.test_functions2.test_exp_integrals()
sympy.mpmath.tests.test_functions2.test_expint()
sympy.mpmath.tests.test_functions2.test_gammainc()
sympy.mpmath.tests.test_functions2.test_gammainc_expint_n()
sympy.mpmath.tests.test_functions2.test_gegenbauer()
sympy.mpmath.tests.test_functions2.test_hankel()
sympy.mpmath.tests.test_functions2.test_hermite()
sympy.mpmath.tests.test_functions2.test_hyper_0f1()
sympy.mpmath.tests.test_functions2.test_hyper_1f1()
sympy.mpmath.tests.test_functions2.test_hyper_1f2()
sympy.mpmath.tests.test_functions2.test_hyper_2f0()
sympy.mpmath.tests.test_functions2.test_hyper_2f1()
sympy.mpmath.tests.test_functions2.test_hyper_2f1_hard()
sympy.mpmath.tests.test_functions2.test_hyper_2f2()
sympy.mpmath.tests.test_functions2.test_hyper_2f3()
sympy.mpmath.tests.test_functions2.test_hyper_3f2_etc()
sympy.mpmath.tests.test_functions2.test_hyper_misc()
sympy.mpmath.tests.test_functions2.test_hyper_param_accuracy()
sympy.mpmath.tests.test_functions2.test_hyper_u()
sympy.mpmath.tests.test_functions2.test_hypercomb_zero_pow()
sympy.mpmath.tests.test_functions2.test_incomplete_beta()
sympy.mpmath.tests.test_functions2.test_issue_3298()
sympy.mpmath.tests.test_functions2.test_kelvin()
sympy.mpmath.tests.test_functions2.test_lambertw()
sympy.mpmath.tests.test_functions2.test_lambertw_hard()
sympy.mpmath.tests.test_functions2.test_legenp()
sympy.mpmath.tests.test_functions2.test_legenq()
sympy.mpmath.tests.test_functions2.test_meijerg()
sympy.mpmath.tests.test_functions2.test_orthpoly()
sympy.mpmath.tests.test_functions2.test_pdf()
sympy.mpmath.tests.test_functions2.test_qfunctions()
sympy.mpmath.tests.test_functions2.test_spherharm()
sympy.mpmath.tests.test_functions2.test_struve()
sympy.mpmath.tests.test_functions2.test_trig_integrals()
sympy.mpmath.tests.test_functions2.test_whittaker()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_eigen_symmetric.py----------------------------------------
A:sympy.mpmath.tests.test_eigen_symmetric.(D, Q)->sympy.mpmath.mp.eighe(A)
A:sympy.mpmath.tests.test_eigen_symmetric.NC->sympy.mpmath.mp.mnorm(C)
A:sympy.mpmath.tests.test_eigen_symmetric.NE->sympy.mpmath.mp.mnorm(E)
A:sympy.mpmath.tests.test_eigen_symmetric.eps->sympy.mpmath.mp.exp(0.8 * mp.log(mp.eps))
A:sympy.mpmath.tests.test_eigen_symmetric.(U, S0, V)->sympy.mpmath.mp.svd_c(A, full_matrices=full_matrices)
A:sympy.mpmath.tests.test_eigen_symmetric.S->sympy.mpmath.mp.svd_c(a, compute_uv=False)
A:sympy.mpmath.tests.test_eigen_symmetric.err->sympy.mpmath.mp.mnorm(E)
A:sympy.mpmath.tests.test_eigen_symmetric.(d, e)->sympy.mpmath.mp.gauss_quadrature(len(a), qtype)
A:sympy.mpmath.tests.test_eigen_symmetric.A->sympy.mpmath.mp.randmatrix(2 * n, 1)
A:sympy.mpmath.tests.test_eigen_symmetric.A[i, j]->int((2 * mp.rand() - 1) * range)
A:sympy.mpmath.tests.test_eigen_symmetric.A[i, i]->sympy.mpmath.mp.re(A[i, i])
A:sympy.mpmath.tests.test_eigen_symmetric.A[j, i]->sympy.mpmath.mp.conj(A[i, j])
A:sympy.mpmath.tests.test_eigen_symmetric.A[x, y]->int(A[x, y])
A:sympy.mpmath.tests.test_eigen_symmetric.a->sympy.mpmath.mp.matrix(a)
A:sympy.mpmath.tests.test_eigen_symmetric.b->sympy.mpmath.mp.quad(lambda x: FW(x) * F(x), R)
A:sympy.mpmath.tests.test_eigen_symmetric.(X, W)->sympy.mpmath.mp.gauss_quadrature(n, qtype, alpha=alpha, beta=beta)
A:sympy.mpmath.tests.test_eigen_symmetric.c->sympy.mpmath.mp.fabs(a - b)
sympy.mpmath.tests.test_eigen_symmetric.irandmatrix(n,range=10)
sympy.mpmath.tests.test_eigen_symmetric.run_eighe(A,verbose=False)
sympy.mpmath.tests.test_eigen_symmetric.run_eigsy(A,verbose=False)
sympy.mpmath.tests.test_eigen_symmetric.run_gauss(qtype,a,b)
sympy.mpmath.tests.test_eigen_symmetric.run_svd_c(A,full_matrices=False,verbose=True)
sympy.mpmath.tests.test_eigen_symmetric.run_svd_r(A,full_matrices=False,verbose=True)
sympy.mpmath.tests.test_eigen_symmetric.test_eighe_fixed_matrix()
sympy.mpmath.tests.test_eigen_symmetric.test_eighe_irandmatrix()
sympy.mpmath.tests.test_eigen_symmetric.test_eighe_randmatrix()
sympy.mpmath.tests.test_eigen_symmetric.test_eigsy_irandmatrix()
sympy.mpmath.tests.test_eigen_symmetric.test_eigsy_randmatrix()
sympy.mpmath.tests.test_eigen_symmetric.test_gauss_quadrature_dynamic(verbose=False)
sympy.mpmath.tests.test_eigen_symmetric.test_gauss_quadrature_static()
sympy.mpmath.tests.test_eigen_symmetric.test_svd_c_rand()
sympy.mpmath.tests.test_eigen_symmetric.test_svd_r_rand()
sympy.mpmath.tests.test_eigen_symmetric.test_svd_test_case()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_trig.py----------------------------------------
A:sympy.mpmath.tests.test_trig.x->ldexp(6381956970095103, 797)
A:sympy.mpmath.tests.test_trig.a->mpf('1e-100')
A:sympy.mpmath.tests.test_trig.b->mpf('-1e-100')
sympy.mpmath.tests.test_trig.test_trig_misc_hard()
sympy.mpmath.tests.test_trig.test_trig_near_n_pi()
sympy.mpmath.tests.test_trig.test_trig_near_zero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_elliptic.py----------------------------------------
A:sympy.mpmath.tests.test_elliptic.zero->mpf(0)
A:sympy.mpmath.tests.test_elliptic.one->mpf(1)
A:sympy.mpmath.tests.test_elliptic.jsn->ellipfun('sn')
A:sympy.mpmath.tests.test_elliptic.jcn->ellipfun('cn')
A:sympy.mpmath.tests.test_elliptic.jdn->ellipfun('dn')
A:sympy.mpmath.tests.test_elliptic.q->mpf(qstring)
A:sympy.mpmath.tests.test_elliptic.value->jdn(z, zero)
A:sympy.mpmath.tests.test_elliptic.r->jdn(u, m)
A:sympy.mpmath.tests.test_elliptic.res->mpf('0.9995017055025556219713297')
A:sympy.mpmath.tests.test_elliptic.result->jdn(arg, arg)
A:sympy.mpmath.tests.test_elliptic.qstring->str(random.random())
A:sympy.mpmath.tests.test_elliptic.r1->diff(lambda zz: jtheta(n, zz, q), z, n=3)
A:sympy.mpmath.tests.test_elliptic.r2->jtheta(1, z, q)
A:sympy.mpmath.tests.test_elliptic.q1->exp(j * 3)
A:sympy.mpmath.tests.test_elliptic.eps1->ldexp(eps, 30)
A:sympy.mpmath.tests.test_elliptic.zstring->str(random.random())
A:sympy.mpmath.tests.test_elliptic.z->mpf(zstring)
A:sympy.mpmath.tests.test_elliptic.a->jtheta(1, 0, q, 1)
A:sympy.mpmath.tests.test_elliptic.equality->jcn(K, m)
A:sympy.mpmath.tests.test_elliptic.m->mpf(mstring)
A:sympy.mpmath.tests.test_elliptic.cn->jcn(zero, q)
A:sympy.mpmath.tests.test_elliptic.mstring->str(random.random())
A:sympy.mpmath.tests.test_elliptic.dn->jdn(zero, m)
A:sympy.mpmath.tests.test_elliptic.k->mpf(mstring).sqrt()
A:sympy.mpmath.tests.test_elliptic.K->ellipk(k ** 2)
sympy.mpmath.tests.test_elliptic.mpc_ae(a,b,eps=eps)
sympy.mpmath.tests.test_elliptic.test_calculate_nome()
sympy.mpmath.tests.test_elliptic.test_djtheta()
sympy.mpmath.tests.test_elliptic.test_ellipfun()
sympy.mpmath.tests.test_elliptic.test_elliptic_integrals()
sympy.mpmath.tests.test_elliptic.test_issue_3297()
sympy.mpmath.tests.test_elliptic.test_jcn()
sympy.mpmath.tests.test_elliptic.test_jdn()
sympy.mpmath.tests.test_elliptic.test_jsn()
sympy.mpmath.tests.test_elliptic.test_jtheta()
sympy.mpmath.tests.test_elliptic.test_jtheta_complex()
sympy.mpmath.tests.test_elliptic.test_jtheta_identities()
sympy.mpmath.tests.test_elliptic.test_jtheta_issue39()
sympy.mpmath.tests.test_elliptic.test_sn_cn_dn_complex()
sympy.mpmath.tests.test_elliptic.test_sn_cn_dn_identities()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_functions.py----------------------------------------
A:sympy.mpmath.tests.test_functions.A->random.randint(10 ** (prec // 2 - 2), 10 ** (prec // 2 - 1))
A:sympy.mpmath.tests.test_functions.i->from_int(i)
A:sympy.mpmath.tests.test_functions.a->fib(10000)
A:sympy.mpmath.tests.test_functions.b->sinpi(2 + 3j)
A:sympy.mpmath.tests.test_functions.x1->random.uniform(-10, 10)
A:sympy.mpmath.tests.test_functions.y1->random.uniform(-10, 10)
A:sympy.mpmath.tests.test_functions.x2->random.uniform(-10, 10)
A:sympy.mpmath.tests.test_functions.y2->random.uniform(-10, 10)
A:sympy.mpmath.tests.test_functions.z1->complex(x1, y1)
A:sympy.mpmath.tests.test_functions.z2->complex(x2, y2)
A:sympy.mpmath.tests.test_functions.z->mpc(-a - j * b)
A:sympy.mpmath.tests.test_functions.x->mpf(0.3)
A:sympy.mpmath.tests.test_functions.one->mpf(1)
A:sympy.mpmath.tests.test_functions.r1->pow(a, -mpf(1) / n)
A:sympy.mpmath.tests.test_functions.r2->pow(a, one_third)
A:sympy.mpmath.tests.test_functions.r->nthroot(mpf('-1e-20'), 4)
A:sympy.mpmath.tests.test_functions.y->mpf(0.4)
A:sympy.mpmath.tests.test_functions.(c, s)->cos_sin(mpc(0, y))
A:sympy.mpmath.tests.test_functions.(a, b, c)->unitroots(3)
A:sympy.mpmath.tests.test_functions.u->sqrt(j, prec=500)
sympy.mpmath.tests.test_functions.mpc_ae(a,b,eps=eps)
sympy.mpmath.tests.test_functions.random_complexes(N)
sympy.mpmath.tests.test_functions.test_aliases()
sympy.mpmath.tests.test_functions.test_arange()
sympy.mpmath.tests.test_functions.test_areal_inverses()
sympy.mpmath.tests.test_functions.test_arg_sign()
sympy.mpmath.tests.test_functions.test_atan()
sympy.mpmath.tests.test_functions.test_atan2()
sympy.mpmath.tests.test_functions.test_atanh()
sympy.mpmath.tests.test_functions.test_call_with_dps()
sympy.mpmath.tests.test_functions.test_complex_functions()
sympy.mpmath.tests.test_functions.test_complex_inverse_functions()
sympy.mpmath.tests.test_functions.test_complex_parts()
sympy.mpmath.tests.test_functions.test_complex_powers()
sympy.mpmath.tests.test_functions.test_complex_sqrt_accuracy()
sympy.mpmath.tests.test_functions.test_constants()
sympy.mpmath.tests.test_functions.test_cospi_sinpi()
sympy.mpmath.tests.test_functions.test_cyclotomic()
sympy.mpmath.tests.test_functions.test_degrees()
sympy.mpmath.tests.test_functions.test_exact_cbrt()
sympy.mpmath.tests.test_functions.test_exact_sqrts()
sympy.mpmath.tests.test_functions.test_exp()
sympy.mpmath.tests.test_functions.test_expj()
sympy.mpmath.tests.test_functions.test_expm1()
sympy.mpmath.tests.test_functions.test_fibonacci()
sympy.mpmath.tests.test_functions.test_float_cbrt()
sympy.mpmath.tests.test_functions.test_float_sqrt()
sympy.mpmath.tests.test_functions.test_frexp()
sympy.mpmath.tests.test_functions.test_hypot()
sympy.mpmath.tests.test_functions.test_integer_parts()
sympy.mpmath.tests.test_functions.test_invhyperb_inaccuracy()
sympy.mpmath.tests.test_functions.test_issue_3132()
sympy.mpmath.tests.test_functions.test_issue_3195()
sympy.mpmath.tests.test_functions.test_ldexp()
sympy.mpmath.tests.test_functions.test_linspace()
sympy.mpmath.tests.test_functions.test_log()
sympy.mpmath.tests.test_functions.test_misc_bugs()
sympy.mpmath.tests.test_functions.test_mpcfun_real_imag()
sympy.mpmath.tests.test_functions.test_perturbation_rounding()
sympy.mpmath.tests.test_functions.test_powm1()
sympy.mpmath.tests.test_functions.test_reciprocal_functions()
sympy.mpmath.tests.test_functions.test_root()
sympy.mpmath.tests.test_functions.test_sinc()
sympy.mpmath.tests.test_functions.test_sqrt_rounding()
sympy.mpmath.tests.test_functions.test_tanh()
sympy.mpmath.tests.test_functions.test_trig_hyperb_basic()
sympy.mpmath.tests.test_functions.test_unitroots()
sympy.mpmath.tests.test_mpc_ae(a,b,eps=eps)
sympy.mpmath.tests.test_random_complexes(N)
sympy.mpmath.tests.test_test_aliases()
sympy.mpmath.tests.test_test_arange()
sympy.mpmath.tests.test_test_areal_inverses()
sympy.mpmath.tests.test_test_arg_sign()
sympy.mpmath.tests.test_test_atan()
sympy.mpmath.tests.test_test_atan2()
sympy.mpmath.tests.test_test_atanh()
sympy.mpmath.tests.test_test_call_with_dps()
sympy.mpmath.tests.test_test_complex_functions()
sympy.mpmath.tests.test_test_complex_inverse_functions()
sympy.mpmath.tests.test_test_complex_parts()
sympy.mpmath.tests.test_test_complex_powers()
sympy.mpmath.tests.test_test_complex_sqrt_accuracy()
sympy.mpmath.tests.test_test_constants()
sympy.mpmath.tests.test_test_cospi_sinpi()
sympy.mpmath.tests.test_test_cyclotomic()
sympy.mpmath.tests.test_test_degrees()
sympy.mpmath.tests.test_test_exact_cbrt()
sympy.mpmath.tests.test_test_exact_sqrts()
sympy.mpmath.tests.test_test_exp()
sympy.mpmath.tests.test_test_expj()
sympy.mpmath.tests.test_test_expm1()
sympy.mpmath.tests.test_test_fibonacci()
sympy.mpmath.tests.test_test_float_cbrt()
sympy.mpmath.tests.test_test_float_sqrt()
sympy.mpmath.tests.test_test_frexp()
sympy.mpmath.tests.test_test_hypot()
sympy.mpmath.tests.test_test_integer_parts()
sympy.mpmath.tests.test_test_invhyperb_inaccuracy()
sympy.mpmath.tests.test_test_issue_3132()
sympy.mpmath.tests.test_test_issue_3195()
sympy.mpmath.tests.test_test_ldexp()
sympy.mpmath.tests.test_test_linspace()
sympy.mpmath.tests.test_test_log()
sympy.mpmath.tests.test_test_misc_bugs()
sympy.mpmath.tests.test_test_mpcfun_real_imag()
sympy.mpmath.tests.test_test_perturbation_rounding()
sympy.mpmath.tests.test_test_powm1()
sympy.mpmath.tests.test_test_reciprocal_functions()
sympy.mpmath.tests.test_test_root()
sympy.mpmath.tests.test_test_sinc()
sympy.mpmath.tests.test_test_sqrt_rounding()
sympy.mpmath.tests.test_test_tanh()
sympy.mpmath.tests.test_test_trig_hyperb_basic()
sympy.mpmath.tests.test_test_unitroots()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_compatibility.py----------------------------------------
A:sympy.mpmath.tests.test_compatibility.mpx->mpf(x)
A:sympy.mpmath.tests.test_compatibility.mpy->mpf(y)
A:sympy.mpmath.tests.test_compatibility.x->abs(x)
sympy.mpmath.tests.test_compatibility.test_bugs()
sympy.mpmath.tests.test_compatibility.test_double_compatibility()
sympy.mpmath.tests.test_compatibility.test_sqrt()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/extratest_bessel.py----------------------------------------
sympy.mpmath.tests.extratest_bessel.test_bessel_zeros()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/extratest_gamma.py----------------------------------------
A:sympy.mpmath.tests.extratest_gamma.maxdps->int(sys.argv[sys.argv.index('-dps') + 1])
A:sympy.mpmath.tests.extratest_gamma.x->func(z)
A:sympy.mpmath.tests.extratest_gamma.z->eval(z)
A:sympy.mpmath.tests.extratest_gamma.gamma_val->exp(loggamma_val)
A:sympy.mpmath.tests.extratest_gamma.loggamma_val->eval(result)
A:sympy.mpmath.tests.extratest_gamma.factorial_val->factorial(z)
A:sympy.mpmath.tests.extratest_gamma.rgamma_val->rgamma(z)
A:sympy.mpmath.tests.extratest_gamma.t1->clock()
A:sympy.mpmath.tests.extratest_gamma.t2->clock()
sympy.mpmath.tests.extratest_gamma.check(name,func,z,y)
sympy.mpmath.tests.extratest_gamma.testcase(case)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_levin.py----------------------------------------
A:sympy.mpmath.tests.test_levin.eps->sympy.mpmath.mp.exp(0.9 * mp.log(mp.eps))
A:sympy.mpmath.tests.test_levin.L->sympy.mpmath.mp.levin(method='levin', variant='t')
A:sympy.mpmath.tests.test_levin.(v, e)->sympy.mpmath.mp.cohen_alt().update(A)
A:sympy.mpmath.tests.test_levin.err->abs(v - 1.06215090557106)
A:sympy.mpmath.tests.test_levin.w->sympy.mpmath.mp.nsum(lambda n: (-z) ** n * mp.fac(4 * n) / (mp.fac(n) * mp.fac(2 * n) * 4 ** n), [0, mp.inf], method='levin', levin_variant='t', workprec=8 * mp.prec, steps=[2] + [1 for x in xrange(1000)])
A:sympy.mpmath.tests.test_levin.z->sympy.mpmath.mp.mpf(2)
A:sympy.mpmath.tests.test_levin.exact->sympy.mpmath.mp.hyp2f1(2 / mp.mpf(3), 4 / mp.mpf(3), 1 / mp.mpf(3), z)
A:sympy.mpmath.tests.test_levin.a->sympy.mpmath.mp.nsum(lambda n: (-1) ** (n - 1) / n, [1, mp.inf], method='sidi')
A:sympy.mpmath.tests.test_levin.v->sympy.mpmath.mp.exp(v)
A:sympy.mpmath.tests.test_levin.AC->sympy.mpmath.mp.cohen_alt()
sympy.mpmath.tests.test_levin.test_cohen_alt_0()
sympy.mpmath.tests.test_levin.test_cohen_alt_1()
sympy.mpmath.tests.test_levin.test_levin_0()
sympy.mpmath.tests.test_levin.test_levin_1()
sympy.mpmath.tests.test_levin.test_levin_2()
sympy.mpmath.tests.test_levin.test_levin_3()
sympy.mpmath.tests.test_levin.test_levin_nsum()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/extratest_zeta.py----------------------------------------
A:sympy.mpmath.tests.extratest_zeta.t1->clock()
A:sympy.mpmath.tests.extratest_zeta.ok->zetazero(8637740722918).ae(complex(0.5, 2124447368584.393))
A:sympy.mpmath.tests.extratest_zeta.t2->clock()
sympy.mpmath.tests.extratest_zeta.test_zetazero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_eigen.py----------------------------------------
A:sympy.mpmath.tests.test_eigen.(Q, H)->sympy.mpmath.mp.hessenberg(A)
A:sympy.mpmath.tests.test_eigen.eps->sympy.mpmath.mp.exp(0.8 * mp.log(mp.eps))
A:sympy.mpmath.tests.test_eigen.(Q, R)->sympy.mpmath.mp.schur(A)
A:sympy.mpmath.tests.test_eigen.(E, EL, ER)->sympy.mpmath.mp.eig(A, left=True, right=True)
A:sympy.mpmath.tests.test_eigen.err0->max(err0, mp.mnorm(B))
A:sympy.mpmath.tests.test_eigen.A[x, y]->int(A[x, y])
A:sympy.mpmath.tests.test_eigen.A->sympy.mpmath.mp.matrix([[0, 0, 1], [1, 0, 0], [0, 1, 0]])
sympy.mpmath.tests.test_eigen.run_eig(A,verbose=0)
sympy.mpmath.tests.test_eigen.run_hessenberg(A,verbose=0)
sympy.mpmath.tests.test_eigen.run_schur(A,verbose=0)
sympy.mpmath.tests.test_eigen.test_eig()
sympy.mpmath.tests.test_eigen.test_eig_dyn()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_quad.py----------------------------------------
sympy.mpmath.tests.test_quad.ae(a,b)
sympy.mpmath.tests.test_quad.test_basic_integrals()
sympy.mpmath.tests.test_quad.test_complex_integration()
sympy.mpmath.tests.test_quad.test_double_1()
sympy.mpmath.tests.test_quad.test_double_2()
sympy.mpmath.tests.test_quad.test_double_3()
sympy.mpmath.tests.test_quad.test_double_4()
sympy.mpmath.tests.test_quad.test_double_5()
sympy.mpmath.tests.test_quad.test_double_6()
sympy.mpmath.tests.test_quad.test_double_trivial()
sympy.mpmath.tests.test_quad.test_expmath_integrals()
sympy.mpmath.tests.test_quad.test_quad_infinite_mirror()
sympy.mpmath.tests.test_quad.test_quad_symmetry()
sympy.mpmath.tests.test_quad.test_quadgl_linear()
sympy.mpmath.tests.test_quad.test_quadosc()
sympy.mpmath.tests.test_quad.xtest_double_7()
sympy.mpmath.tests.test_quad.xtest_expmath_fail()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_summation.py----------------------------------------
sympy.mpmath.tests.test_summation.test_fprod()
sympy.mpmath.tests.test_summation.test_fsum()
sympy.mpmath.tests.test_summation.test_nprod()
sympy.mpmath.tests.test_summation.test_nsum()
sympy.mpmath.tests.test_summation.test_sumem()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_diff.py----------------------------------------
sympy.mpmath.tests.test_diff.test_diff()
sympy.mpmath.tests.test_diff.test_diff_partial()
sympy.mpmath.tests.test_diff.test_diffs()
sympy.mpmath.tests.test_diff.test_taylor()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_basic_ops.py----------------------------------------
A:sympy.mpmath.tests.test_basic_ops.a->random.randint(-M2, M2)
A:sympy.mpmath.tests.test_basic_ops.b->random.randint(-M2, M2)
A:sympy.mpmath.tests.test_basic_ops.c->mpc(0.51 + 2.16j)
A:sympy.mpmath.tests.test_basic_ops.d->mpc(1.08 - 0.99j)
A:sympy.mpmath.tests.test_basic_ops.z0->op(x, y)
A:sympy.mpmath.tests.test_basic_ops.z1->op(x, y)
A:sympy.mpmath.tests.test_basic_ops.z2->op(x, y)
A:sympy.mpmath.tests.test_basic_ops.g->monitor(f, a.append, b.append)
A:sympy.mpmath.tests.test_basic_ops.u->mpf('1e-400')
sympy.mpmath.tests.test_basic_ops.test_add()
sympy.mpmath.tests.test_basic_ops.test_add_misc()
sympy.mpmath.tests.test_basic_ops.test_add_rounding()
sympy.mpmath.tests.test_basic_ops.test_almost_equal()
sympy.mpmath.tests.test_basic_ops.test_arithmetic_functions()
sympy.mpmath.tests.test_basic_ops.test_complex_misc()
sympy.mpmath.tests.test_basic_ops.test_complex_zeros()
sympy.mpmath.tests.test_basic_ops.test_div()
sympy.mpmath.tests.test_basic_ops.test_exact_integer_arithmetic()
sympy.mpmath.tests.test_basic_ops.test_floor_ceil_nint_frac()
sympy.mpmath.tests.test_basic_ops.test_hash()
sympy.mpmath.tests.test_basic_ops.test_isnan_etc()
sympy.mpmath.tests.test_basic_ops.test_mixed_misc()
sympy.mpmath.tests.test_basic_ops.test_monitor()
sympy.mpmath.tests.test_basic_ops.test_mul()
sympy.mpmath.tests.test_basic_ops.test_nint_distance()
sympy.mpmath.tests.test_basic_ops.test_odd_int_bug()
sympy.mpmath.tests.test_basic_ops.test_pow()
sympy.mpmath.tests.test_basic_ops.test_str_10000_digits()
sympy.mpmath.tests.test_basic_ops.test_str_1000_digits()
sympy.mpmath.tests.test_basic_ops.test_sub()
sympy.mpmath.tests.test_basic_ops.test_type_compare()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_power.py----------------------------------------
A:sympy.mpmath.tests.test_power.a->random.randint(1 << prec - 1, 1 << prec)
A:sympy.mpmath.tests.test_power.b->random.randint(2, 100)
sympy.mpmath.tests.test_power.test_fractional_pow()
sympy.mpmath.tests.test_power.test_pow_epsilon_rounding()
sympy.mpmath.tests.test_power.test_pow_integer_direction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_gammazeta.py----------------------------------------
A:sympy.mpmath.tests.test_gammazeta.(p, q)->bernfrac(1000)
A:sympy.mpmath.tests.test_gammazeta.v->zeta(33000)
A:sympy.mpmath.tests.test_gammazeta.y->gamma(a)
A:sympy.mpmath.tests.test_gammazeta.a->hyperfac(-3 + 0j)
A:sympy.mpmath.tests.test_gammazeta.s1->fadd(1, '1e-50', exact=True)
A:sympy.mpmath.tests.test_gammazeta.s2->fadd(1, '-1e-50', exact=True)
A:sympy.mpmath.tests.test_gammazeta.s3->fadd(1, '1e-50j', exact=True)
A:sympy.mpmath.tests.test_gammazeta.z->zeta(s3)
sympy.mpmath.tests.test_gammazeta.test_altzeta()
sympy.mpmath.tests.test_gammazeta.test_barnesg()
sympy.mpmath.tests.test_gammazeta.test_bell_polyexp()
sympy.mpmath.tests.test_gammazeta.test_bernoulli()
sympy.mpmath.tests.test_gammazeta.test_bernpoly_eulerpoly()
sympy.mpmath.tests.test_gammazeta.test_fac2()
sympy.mpmath.tests.test_gammazeta.test_foxtrot_identity()
sympy.mpmath.tests.test_gammazeta.test_gamma()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_1()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_2()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_3()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_4()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_5()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_6()
sympy.mpmath.tests.test_gammazeta.test_gamma_huge_7()
sympy.mpmath.tests.test_gammazeta.test_gamma_quotients()
sympy.mpmath.tests.test_gammazeta.test_harmonic()
sympy.mpmath.tests.test_gammazeta.test_polygamma()
sympy.mpmath.tests.test_gammazeta.test_polygamma_high_order()
sympy.mpmath.tests.test_gammazeta.test_polygamma_high_prec()
sympy.mpmath.tests.test_gammazeta.test_polygamma_identities()
sympy.mpmath.tests.test_gammazeta.test_polylog()
sympy.mpmath.tests.test_gammazeta.test_primezeta()
sympy.mpmath.tests.test_gammazeta.test_rs_zeta()
sympy.mpmath.tests.test_gammazeta.test_siegelz()
sympy.mpmath.tests.test_gammazeta.test_stieltjes()
sympy.mpmath.tests.test_gammazeta.test_zeta()
sympy.mpmath.tests.test_gammazeta.test_zeta_huge()
sympy.mpmath.tests.test_gammazeta.test_zeta_int_bug()
sympy.mpmath.tests.test_gammazeta.test_zeta_near_1()
sympy.mpmath.tests.test_gammazeta.test_zeta_negative()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_mpmath.py----------------------------------------
sympy.mpmath.tests.test_mpmath.test_newstyle_classes()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/torture.py----------------------------------------
A:sympy.mpmath.tests.torture.exponents->range(-20, 20)
A:sympy.mpmath.tests.torture.(p, q)->bernfrac(9000)
A:sympy.mpmath.tests.torture.t1->clock()
A:sympy.mpmath.tests.torture.t2->clock()
A:sympy.mpmath.tests.torture.tasks->cases.splitlines()
sympy.mpmath.tests.torture.test_asymp(f,maxdps=150,verbose=False,huge_range=False)
sympy.mpmath.tests.torture.test_bernoulli_huge()
sympy.mpmath.tests.torture.testit(line)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_convert.py----------------------------------------
A:sympy.mpmath.tests.test_convert.x->mpf(3)
A:sympy.mpmath.tests.test_convert.z->mpc(3)
A:sympy.mpmath.tests.test_convert.a->SomethingRandom()
A:sympy.mpmath.tests.test_convert.y->SomethingReal()
A:sympy.mpmath.tests.test_convert.w->SomethingComplex()
sympy.mpmath.tests.test_convert.test_basic_string()
sympy.mpmath.tests.test_convert.test_conversion_methods()
sympy.mpmath.tests.test_convert.test_convert_rational()
sympy.mpmath.tests.test_convert.test_custom_class()
sympy.mpmath.tests.test_convert.test_eval_repr_invariant()
sympy.mpmath.tests.test_convert.test_mpmathify()
sympy.mpmath.tests.test_convert.test_pretty()
sympy.mpmath.tests.test_convert.test_str_bugs()
sympy.mpmath.tests.test_convert.test_str_format()
sympy.mpmath.tests.test_convert.test_str_prec0()
sympy.mpmath.tests.test_convert.test_str_whitespace()
sympy.mpmath.tests.test_convert.test_tight_string_conversion()
sympy.mpmath.tests.test_convert.test_unicode()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_calculus.py----------------------------------------
A:sympy.mpmath.tests.test_calculus.(p, err)->chebyfit(f, [2, 4], 8, error=True)
A:sympy.mpmath.tests.test_calculus.p->polyroots([1, -4])
A:sympy.mpmath.tests.test_calculus.(p, q)->pade(a, N // 2, N // 2)
A:sympy.mpmath.tests.test_calculus.one->mpf(1)
A:sympy.mpmath.tests.test_calculus.(c, s)->fourier(lambda x: x + 1, [-1, 2], 2)
sympy.mpmath.tests.test_calculus.test_approximation()
sympy.mpmath.tests.test_calculus.test_differint()
sympy.mpmath.tests.test_calculus.test_fourier()
sympy.mpmath.tests.test_calculus.test_limits()
sympy.mpmath.tests.test_calculus.test_pade()
sympy.mpmath.tests.test_calculus.test_polyroots()
sympy.mpmath.tests.test_calculus.test_polyval()
sympy.mpmath.tests.test_test_approximation()
sympy.mpmath.tests.test_test_differint()
sympy.mpmath.tests.test_test_fourier()
sympy.mpmath.tests.test_test_limits()
sympy.mpmath.tests.test_test_pade()
sympy.mpmath.tests.test_test_polyroots()
sympy.mpmath.tests.test_test_polyval()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_fp.py----------------------------------------
A:sympy.mpmath.tests.test_fp.v->sympy.mpmath.fp.ei(320.0 - 80j)
sympy.mpmath.tests.test_fp.ae(x,y,tol=1e-12)
sympy.mpmath.tests.test_fp.test_conj()
sympy.mpmath.tests.test_fp.test_fp_bernoulli()
sympy.mpmath.tests.test_fp.test_fp_cospi_sinpi()
sympy.mpmath.tests.test_fp.test_fp_erf()
sympy.mpmath.tests.test_fp.test_fp_expj()
sympy.mpmath.tests.test_fp.test_fp_gamma()
sympy.mpmath.tests.test_fp.test_fp_hyp2f1()
sympy.mpmath.tests.test_fp.test_fp_lambertw()
sympy.mpmath.tests.test_fp.test_fp_number_parts()
sympy.mpmath.tests.test_fp.test_fp_psi()
sympy.mpmath.tests.test_fp.test_fp_stress_ei_e1()
sympy.mpmath.tests.test_fp.test_fp_zeta()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_identify.py----------------------------------------
sympy.mpmath.tests.test_identify.test_identify()
sympy.mpmath.tests.test_identify.test_pslq()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_hp.py----------------------------------------
A:sympy.mpmath.tests.test_hp.aa->mpf(a)
A:sympy.mpmath.tests.test_hp.bb->mpf(b)
A:sympy.mpmath.tests.test_hp.abi->mpc(aa, bb)
A:sympy.mpmath.tests.test_hp.r->exp(mpf(1) / 10)
A:sympy.mpmath.tests.test_hp.s->str(a)
A:sympy.mpmath.tests.test_hp.n->int(round(b))
A:sympy.mpmath.tests.test_hp.sn->str(n)
A:sympy.mpmath.tests.test_hp.res->last_digits(+r)
sympy.mpmath.tests.test_hp.last_digits(a)
sympy.mpmath.tests.test_hp.test_exp_hp()
sympy.mpmath.tests.test_hp.test_hp()
sympy.mpmath.tests.test_hp.test_log_hp()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/tests/test_interval.py----------------------------------------
A:sympy.mpmath.tests.test_interval.u->tan(mpi(0.5, 1))
A:sympy.mpmath.tests.test_interval.w->mpi(-inf, inf)
A:sympy.mpmath.tests.test_interval.sq->iv.sqrt(2)
A:sympy.mpmath.tests.test_interval.a->mpi(iv.pi)
A:sympy.mpmath.tests.test_interval.v->iv.cot(mpi(0.5, 1))
A:sympy.mpmath.tests.test_interval.x->mpi('5.2582327113062393041', '5.2582327113062749951')
A:sympy.mpmath.tests.test_interval.z->iv.loggamma(x)
A:sympy.mpmath.tests.test_interval.t->iv.arg(z)
A:sympy.mpmath.tests.test_interval.min_real->min([y.real for y in ys])
A:sympy.mpmath.tests.test_interval.max_real->max([y.real for y in ys])
A:sympy.mpmath.tests.test_interval.min_imag->min([y.imag for y in ys])
A:sympy.mpmath.tests.test_interval.max_imag->max([y.imag for y in ys])
sympy.mpmath.tests.test_interval.test_interval_ae()
sympy.mpmath.tests.test_interval.test_interval_arithmetic()
sympy.mpmath.tests.test_interval.test_interval_complex()
sympy.mpmath.tests.test_interval.test_interval_complex_arg()
sympy.mpmath.tests.test_interval.test_interval_cos_sin()
sympy.mpmath.tests.test_interval.test_interval_div()
sympy.mpmath.tests.test_interval.test_interval_gamma()
sympy.mpmath.tests.test_interval.test_interval_hash()
sympy.mpmath.tests.test_interval.test_interval_identity()
sympy.mpmath.tests.test_interval.test_interval_mul()
sympy.mpmath.tests.test_interval.test_interval_nstr()
sympy.mpmath.tests.test_interval.test_interval_pow()
sympy.mpmath.tests.test_interval.test_interval_sqrt()
sympy.mpmath.tests.test_interval.test_mpi_from_str()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libintmath.py----------------------------------------
A:sympy.mpmath.libmp.libintmath.bc->bitcount(x)
A:sympy.mpmath.libmp.libintmath.(n, digit)->divmod(n, base)
A:sympy.mpmath.libmp.libintmath.(A, B)->divmod(n, MPZ(base) ** half)
A:sympy.mpmath.libmp.libintmath.ad->numeral(A, base, half, digits)
A:sympy.mpmath.libmp.libintmath.bd->numeral(B, base, half, digits).rjust(half, '0')
A:sympy.mpmath.libmp.libintmath.y->isqrt_small_python(x)
A:sympy.mpmath.libmp.libintmath.startprec->min(50, hbc)
A:sympy.mpmath.libmp.libintmath.r->int(2.0 ** (2 * startprec) * (x >> bc - 2 * startprec) ** (-0.5))
A:sympy.mpmath.libmp.libintmath.isqrt_smallisqrt_fastisqrt->getattr(sage_utils, 'isqrt', lambda n: MPZ(n).isqrt())
A:sympy.mpmath.libmp.libintmath.f->_cache.get(m)
A:sympy.mpmath.libmp.libintmath.k->max(memo)
A:sympy.mpmath.libmp.libintmath.sieve->list(xrange(n))
A:sympy.mpmath.libmp.libintmath.small_odd_primes_set->set(small_odd_primes)
A:sympy.mpmath.libmp.libintmath.n->abs(int(n))
A:sympy.mpmath.libmp.libintmath.s->trailing(m)
A:sympy.mpmath.libmp.libintmath.x->pow(a, d, n)
sympy.mpmath.libmp.bin_to_radix(x,xbits,base,bdigits)
sympy.mpmath.libmp.eulernum(m,_cache={0:MPZ_ONE})
sympy.mpmath.libmp.gcd(*args)
sympy.mpmath.libmp.ifac(n,memo={0:1,1:1})
sympy.mpmath.libmp.ifac2(n,memo_pair=[{0:1},{1:1}])
sympy.mpmath.libmp.ifib(n,_cache={})
sympy.mpmath.libmp.isprime(n)
sympy.mpmath.libmp.isqrt_fast_python(x)
sympy.mpmath.libmp.isqrt_python(x)
sympy.mpmath.libmp.isqrt_small_python(x)
sympy.mpmath.libmp.libintmath.bin_to_radix(x,xbits,base,bdigits)
sympy.mpmath.libmp.libintmath.eulernum(m,_cache={0:MPZ_ONE})
sympy.mpmath.libmp.libintmath.gcd(*args)
sympy.mpmath.libmp.libintmath.giant_steps(start,target,n=2)
sympy.mpmath.libmp.libintmath.gmpy_bitcount(n)
sympy.mpmath.libmp.libintmath.ifac(n,memo={0:1,1:1})
sympy.mpmath.libmp.libintmath.ifac2(n,memo_pair=[{0:1},{1:1}])
sympy.mpmath.libmp.libintmath.ifib(n,_cache={})
sympy.mpmath.libmp.libintmath.isprime(n)
sympy.mpmath.libmp.libintmath.isqrt_fast_python(x)
sympy.mpmath.libmp.libintmath.isqrt_python(x)
sympy.mpmath.libmp.libintmath.isqrt_small_python(x)
sympy.mpmath.libmp.libintmath.list_primes(n)
sympy.mpmath.libmp.libintmath.lshift(x,n)
sympy.mpmath.libmp.libintmath.moebius(n)
sympy.mpmath.libmp.libintmath.numeral_gmpy(n,base=10,size=0,digits=stddigits)
sympy.mpmath.libmp.libintmath.numeral_python(n,base=10,size=0,digits=stddigits)
sympy.mpmath.libmp.libintmath.python_bitcount(n)
sympy.mpmath.libmp.libintmath.python_trailing(n)
sympy.mpmath.libmp.libintmath.rshift(x,n)
sympy.mpmath.libmp.libintmath.sage_trailing(n)
sympy.mpmath.libmp.libintmath.small_numeral(n,base=10,digits=stddigits)
sympy.mpmath.libmp.libintmath.sqrt_fixed(x,prec)
sympy.mpmath.libmp.libintmath.sqrtrem_python(x)
sympy.mpmath.libmp.libintmath.stirling1(n,k)
sympy.mpmath.libmp.libintmath.stirling2(n,k)
sympy.mpmath.libmp.list_primes(n)
sympy.mpmath.libmp.moebius(n)
sympy.mpmath.libmp.numeral_gmpy(n,base=10,size=0,digits=stddigits)
sympy.mpmath.libmp.numeral_python(n,base=10,size=0,digits=stddigits)
sympy.mpmath.libmp.sqrt_fixed(x,prec)
sympy.mpmath.libmp.sqrtrem_python(x)
sympy.mpmath.libmp.stirling1(n,k)
sympy.mpmath.libmp.stirling2(n,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libmpi.py----------------------------------------
A:sympy.mpmath.libmp.libmpi.a->mpf_neg(b)
A:sympy.mpmath.libmp.libmpi.b->mpf_pi(prec, round_ceiling)
A:sympy.mpmath.libmp.libmpi.sas->mpf_sign(sa)
A:sympy.mpmath.libmp.libmpi.sbs->mpf_sign(sb)
A:sympy.mpmath.libmp.libmpi.negsa->mpf_neg(sa)
A:sympy.mpmath.libmp.libmpi.tas->mpf_sign(ta)
A:sympy.mpmath.libmp.libmpi.tbs->mpf_sign(tb)
A:sympy.mpmath.libmp.libmpi.(a, b)->mpi_shift(s, -1).split(',')
A:sympy.mpmath.libmp.libmpi.sa->finalize(sa, round_floor)
A:sympy.mpmath.libmp.libmpi.(sa, sb)->mpf_min_max([sa, sb])
A:sympy.mpmath.libmp.libmpi.u->mpi_log(s, prec + 20)
A:sympy.mpmath.libmp.libmpi.v->mpf_mul(v, p, prec, rounding)
A:sympy.mpmath.libmp.libmpi.(c, s)->mpi_cos_sin(a, wp)
A:sympy.mpmath.libmp.libmpi.(t, n, wp_)->mod_pi2(man, exp, exp + bc, 15)
A:sympy.mpmath.libmp.libmpi.(ca, sa, na)->cos_sin_quadrant(a, wp)
A:sympy.mpmath.libmp.libmpi.(cb, sb, nb)->cos_sin_quadrant(b, wp)
A:sympy.mpmath.libmp.libmpi.(ca, cb)->mpf_min_max([ca, cb])
A:sympy.mpmath.libmp.libmpi.more->from_man_exp((MPZ_ONE << wp) + (MPZ_ONE << 10), -wp)
A:sympy.mpmath.libmp.libmpi.less->from_man_exp((MPZ_ONE << wp) - (MPZ_ONE << 10), -wp)
A:sympy.mpmath.libmp.libmpi.ca->finalize(ca, round_floor)
A:sympy.mpmath.libmp.libmpi.cb->finalize(cb, round_ceiling)
A:sympy.mpmath.libmp.libmpi.sb->finalize(sb, round_ceiling)
A:sympy.mpmath.libmp.libmpi.(cos, sin)->mpi_cos_sin(x, prec + 20)
A:sympy.mpmath.libmp.libmpi.xa->from_str(x, wp, round_floor)
A:sympy.mpmath.libmp.libmpi.xb->from_str(x, wp, round_ceiling)
A:sympy.mpmath.libmp.libmpi.y->mpf_div(y, from_int(100), wp, round_ceiling)
A:sympy.mpmath.libmp.libmpi.e->ValueError("Improperly formed interval number '%s'" % s)
A:sympy.mpmath.libmp.libmpi.s->mpi_shift(s, -1)
A:sympy.mpmath.libmp.libmpi.(x, y)->mpi_shift(s, -1).split('[')
A:sympy.mpmath.libmp.libmpi.(y, z)->mpf_div(y, from_int(100), wp, round_ceiling).split(',')
A:sympy.mpmath.libmp.libmpi.(z, e)->z.split(']')
A:sympy.mpmath.libmp.libmpi.prec->dps_to_prec(dps)
A:sympy.mpmath.libmp.libmpi.mid->mpi_mid(x, prec)
A:sympy.mpmath.libmp.libmpi.delta->mpi_delta(x, prec)
A:sympy.mpmath.libmp.libmpi.a_str->to_str(a, dps + 3, **kwargs)
A:sympy.mpmath.libmp.libmpi.b_str->to_str(b, dps + 3, **kwargs)
A:sympy.mpmath.libmp.libmpi.mid_str->to_str(mid, dps, **kwargs)
A:sympy.mpmath.libmp.libmpi.delta_str->to_str(mpf_shift(delta, -1), dps, **kwargs)
A:sympy.mpmath.libmp.libmpi.p->mpf_div(p, mpf_mul(mid, from_int(2)), wp)
A:sympy.mpmath.libmp.libmpi.r1->mpi_mul(a, c)
A:sympy.mpmath.libmp.libmpi.r2->mpi_mul(b, d)
A:sympy.mpmath.libmp.libmpi.re->mpi_sub(mpi_square(a), mpi_square(b), prec)
A:sympy.mpmath.libmp.libmpi.i1->mpi_mul(a, d)
A:sympy.mpmath.libmp.libmpi.i2->mpi_mul(b, c)
A:sympy.mpmath.libmp.libmpi.im->mpi_shift(im, 1)
A:sympy.mpmath.libmp.libmpi.m1->mpi_square(c)
A:sympy.mpmath.libmp.libmpi.m2->mpi_square(d)
A:sympy.mpmath.libmp.libmpi.m->mpi_add(m1, m2, wp)
A:sympy.mpmath.libmp.libmpi.r->mpi_exp(a, wp)
A:sympy.mpmath.libmp.libmpi.e1->mpi_exp(x, wp)
A:sympy.mpmath.libmp.libmpi.e2->mpi_div(mpi_one, e1, wp)
A:sympy.mpmath.libmp.libmpi.c->mpf_loggamma(b, prec, round_floor)
A:sympy.mpmath.libmp.libmpi.(ch, sh)->mpi_cosh_sinh(b, wp)
A:sympy.mpmath.libmp.libmpi.t->mpi_add(a, b, prec + 20)
A:sympy.mpmath.libmp.libmpi.result->mpci_mul(result, x, wp)
A:sympy.mpmath.libmp.libmpi.x->mpci_square(x, wp)
A:sympy.mpmath.libmp.libmpi.gamma_min_a->from_float(1.46163214496)
A:sympy.mpmath.libmp.libmpi.gamma_min_b->from_float(1.46163214497)
A:sympy.mpmath.libmp.libmpi.gamma_mono_imag_a->from_float(-1.1)
A:sympy.mpmath.libmp.libmpi.gamma_mono_imag_b->from_float(1.1)
A:sympy.mpmath.libmp.libmpi.d->mpf_loggamma(a, prec, round_ceiling)
A:sympy.mpmath.libmp.libmpi.znew->mpi_add(z, mpi_one, wp)
A:sympy.mpmath.libmp.libmpi.mag->max(amag, bmag)
A:sympy.mpmath.libmp.libmpi.an->abs(to_int(a2))
A:sympy.mpmath.libmp.libmpi.bn->abs(to_int(b2))
A:sympy.mpmath.libmp.libmpi.absn->max(an, bn)
A:sympy.mpmath.libmp.libmpi.gamma_size->max(0, absn * mag)
A:sympy.mpmath.libmp.libmpi.(a1, a2)->mpi_add((a1, a2), mpi_one, wp)
A:sympy.mpmath.libmp.libmpi.minre->mpc_loggamma((a1, b2), wp, round_ceiling)
A:sympy.mpmath.libmp.libmpi.maxre->mpc_loggamma((a2, fzero), wp, round_ceiling)
A:sympy.mpmath.libmp.libmpi.minim->mpc_loggamma((a2, b1), wp, round_floor)
A:sympy.mpmath.libmp.libmpi.maxim->mpc_loggamma((a2, b2), wp, round_floor)
A:sympy.mpmath.libmp.libmpi.w->mpci_neg(w)
sympy.mpmath.libmp.libmpi.MAX(x,y)
sympy.mpmath.libmp.libmpi.MIN(x,y)
sympy.mpmath.libmp.libmpi.cos_sin_quadrant(x,wp)
sympy.mpmath.libmp.libmpi.mpci_abs(x,prec)
sympy.mpmath.libmp.libmpi.mpci_add(x,y,prec)
sympy.mpmath.libmp.libmpi.mpci_arg(z,prec)
sympy.mpmath.libmp.libmpi.mpci_cos(x,prec)
sympy.mpmath.libmp.libmpi.mpci_div(x,y,prec)
sympy.mpmath.libmp.libmpi.mpci_exp(x,prec)
sympy.mpmath.libmp.libmpi.mpci_factorial(z,prec)
sympy.mpmath.libmp.libmpi.mpci_gamma(z,prec,type=0)
sympy.mpmath.libmp.libmpi.mpci_log(z,prec)
sympy.mpmath.libmp.libmpi.mpci_loggamma(z,prec)
sympy.mpmath.libmp.libmpi.mpci_mul(x,y,prec)
sympy.mpmath.libmp.libmpi.mpci_neg(x,prec=0)
sympy.mpmath.libmp.libmpi.mpci_pos(x,prec)
sympy.mpmath.libmp.libmpi.mpci_pow(x,y,prec)
sympy.mpmath.libmp.libmpi.mpci_pow_int(x,n,prec)
sympy.mpmath.libmp.libmpi.mpci_rgamma(z,prec)
sympy.mpmath.libmp.libmpi.mpci_sin(x,prec)
sympy.mpmath.libmp.libmpi.mpci_square(x,prec)
sympy.mpmath.libmp.libmpi.mpci_sub(x,y,prec)
sympy.mpmath.libmp.libmpi.mpi_abs(s,prec=0)
sympy.mpmath.libmp.libmpi.mpi_add(s,t,prec=0)
sympy.mpmath.libmp.libmpi.mpi_atan(s,prec)
sympy.mpmath.libmp.libmpi.mpi_atan2(y,x,prec)
sympy.mpmath.libmp.libmpi.mpi_cos(x,prec)
sympy.mpmath.libmp.libmpi.mpi_cos_sin(x,prec)
sympy.mpmath.libmp.libmpi.mpi_cosh_sinh(x,prec)
sympy.mpmath.libmp.libmpi.mpi_cot(x,prec)
sympy.mpmath.libmp.libmpi.mpi_delta(s,prec)
sympy.mpmath.libmp.libmpi.mpi_div(s,t,prec)
sympy.mpmath.libmp.libmpi.mpi_div_mpf(s,t,prec)
sympy.mpmath.libmp.libmpi.mpi_eq(s,t)
sympy.mpmath.libmp.libmpi.mpi_exp(s,prec)
sympy.mpmath.libmp.libmpi.mpi_factorial(z,prec)
sympy.mpmath.libmp.libmpi.mpi_from_str(s,prec)
sympy.mpmath.libmp.libmpi.mpi_from_str_a_b(x,y,percent,prec)
sympy.mpmath.libmp.libmpi.mpi_gamma(z,prec,type=0)
sympy.mpmath.libmp.libmpi.mpi_ge(s,t)
sympy.mpmath.libmp.libmpi.mpi_gt(s,t)
sympy.mpmath.libmp.libmpi.mpi_le(s,t)
sympy.mpmath.libmp.libmpi.mpi_log(s,prec)
sympy.mpmath.libmp.libmpi.mpi_loggamma(z,prec)
sympy.mpmath.libmp.libmpi.mpi_lt(s,t)
sympy.mpmath.libmp.libmpi.mpi_mid(s,prec)
sympy.mpmath.libmp.libmpi.mpi_mul(s,t,prec=0)
sympy.mpmath.libmp.libmpi.mpi_mul_mpf(s,t,prec)
sympy.mpmath.libmp.libmpi.mpi_ne(s,t)
sympy.mpmath.libmp.libmpi.mpi_neg(s,prec=0)
sympy.mpmath.libmp.libmpi.mpi_overlap(x,y)
sympy.mpmath.libmp.libmpi.mpi_pi(prec)
sympy.mpmath.libmp.libmpi.mpi_pos(s,prec)
sympy.mpmath.libmp.libmpi.mpi_pow(s,t,prec)
sympy.mpmath.libmp.libmpi.mpi_pow_int(s,n,prec)
sympy.mpmath.libmp.libmpi.mpi_rgamma(z,prec)
sympy.mpmath.libmp.libmpi.mpi_shift(x,n)
sympy.mpmath.libmp.libmpi.mpi_sin(x,prec)
sympy.mpmath.libmp.libmpi.mpi_sqrt(s,prec)
sympy.mpmath.libmp.libmpi.mpi_square(s,prec=0)
sympy.mpmath.libmp.libmpi.mpi_str(s,prec)
sympy.mpmath.libmp.libmpi.mpi_sub(s,t,prec=0)
sympy.mpmath.libmp.libmpi.mpi_tan(x,prec)
sympy.mpmath.libmp.libmpi.mpi_to_str(x,dps,use_spaces=True,brackets='[]',mode='brackets',error_dps=4,**kwargs)
sympy.mpmath.libmp.mpci_abs(x,prec)
sympy.mpmath.libmp.mpci_add(x,y,prec)
sympy.mpmath.libmp.mpci_cos(x,prec)
sympy.mpmath.libmp.mpci_div(x,y,prec)
sympy.mpmath.libmp.mpci_exp(x,prec)
sympy.mpmath.libmp.mpci_factorial(z,prec)
sympy.mpmath.libmp.mpci_gamma(z,prec,type=0)
sympy.mpmath.libmp.mpci_log(z,prec)
sympy.mpmath.libmp.mpci_loggamma(z,prec)
sympy.mpmath.libmp.mpci_mul(x,y,prec)
sympy.mpmath.libmp.mpci_neg(x,prec=0)
sympy.mpmath.libmp.mpci_pos(x,prec)
sympy.mpmath.libmp.mpci_pow(x,y,prec)
sympy.mpmath.libmp.mpci_pow_int(x,n,prec)
sympy.mpmath.libmp.mpci_rgamma(z,prec)
sympy.mpmath.libmp.mpci_sin(x,prec)
sympy.mpmath.libmp.mpci_sub(x,y,prec)
sympy.mpmath.libmp.mpi_abs(s,prec=0)
sympy.mpmath.libmp.mpi_add(s,t,prec=0)
sympy.mpmath.libmp.mpi_atan(s,prec)
sympy.mpmath.libmp.mpi_atan2(y,x,prec)
sympy.mpmath.libmp.mpi_cos(x,prec)
sympy.mpmath.libmp.mpi_cos_sin(x,prec)
sympy.mpmath.libmp.mpi_cosh_sinh(x,prec)
sympy.mpmath.libmp.mpi_cot(x,prec)
sympy.mpmath.libmp.mpi_delta(s,prec)
sympy.mpmath.libmp.mpi_div(s,t,prec)
sympy.mpmath.libmp.mpi_div_mpf(s,t,prec)
sympy.mpmath.libmp.mpi_eq(s,t)
sympy.mpmath.libmp.mpi_exp(s,prec)
sympy.mpmath.libmp.mpi_factorial(z,prec)
sympy.mpmath.libmp.mpi_from_str(s,prec)
sympy.mpmath.libmp.mpi_from_str_a_b(x,y,percent,prec)
sympy.mpmath.libmp.mpi_gamma(z,prec,type=0)
sympy.mpmath.libmp.mpi_ge(s,t)
sympy.mpmath.libmp.mpi_gt(s,t)
sympy.mpmath.libmp.mpi_le(s,t)
sympy.mpmath.libmp.mpi_log(s,prec)
sympy.mpmath.libmp.mpi_loggamma(z,prec)
sympy.mpmath.libmp.mpi_lt(s,t)
sympy.mpmath.libmp.mpi_mid(s,prec)
sympy.mpmath.libmp.mpi_mul(s,t,prec=0)
sympy.mpmath.libmp.mpi_mul_mpf(s,t,prec)
sympy.mpmath.libmp.mpi_ne(s,t)
sympy.mpmath.libmp.mpi_neg(s,prec=0)
sympy.mpmath.libmp.mpi_pos(s,prec)
sympy.mpmath.libmp.mpi_pow(s,t,prec)
sympy.mpmath.libmp.mpi_pow_int(s,n,prec)
sympy.mpmath.libmp.mpi_rgamma(z,prec)
sympy.mpmath.libmp.mpi_sin(x,prec)
sympy.mpmath.libmp.mpi_sqrt(s,prec)
sympy.mpmath.libmp.mpi_str(s,prec)
sympy.mpmath.libmp.mpi_sub(s,t,prec=0)
sympy.mpmath.libmp.mpi_tan(x,prec)
sympy.mpmath.libmp.mpi_to_str(x,dps,use_spaces=True,brackets='[]',mode='brackets',error_dps=4,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/backend.py----------------------------------------
A:sympy.mpmath.libmp.backend.MPZ_TYPE->type(MPZ(0))
A:sympy.mpmath.libmp.backend.MPZ_ZERO->MPZ(0)
A:sympy.mpmath.libmp.backend.MPZ_ONE->MPZ(1)
A:sympy.mpmath.libmp.backend.MPZ_TWO->MPZ(2)
A:sympy.mpmath.libmp.backend.MPZ_THREE->MPZ(3)
A:sympy.mpmath.libmp.backend.MPZ_FIVE->MPZ(5)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/gammazeta.py----------------------------------------
A:sympy.mpmath.libmp.gammazeta.wp->int(prec + prec ** 0.5 + 15)
A:sympy.mpmath.libmp.gammazeta.fac->mpf_mul_int(fac, 2 * k * (2 * k - 1), wp)
A:sympy.mpmath.libmp.gammazeta.pi->mpf_pi(wp)
A:sympy.mpmath.libmp.gammazeta.pipowtwopi2->mpf_shift(mpf_mul(pi, pi, wp), 2)
A:sympy.mpmath.libmp.gammazeta.zeta2n->to_fixed(zeta2n, wp)
A:sympy.mpmath.libmp.gammazeta.pipow->mpf_mul(pipow, twopi2, wp)
A:sympy.mpmath.libmp.gammazeta.K->to_fixed(K, prec)
A:sympy.mpmath.libmp.gammazeta.N->int(prec ** 0.787 + 2)
A:sympy.mpmath.libmp.gammazeta.logN->log_int_fixed(N, wp)
A:sympy.mpmath.libmp.gammazeta.D->from_man_exp(D, -wp)
A:sympy.mpmath.libmp.gammazeta.B->mpc_mul(B, r, wp)
A:sympy.mpmath.libmp.gammazeta.term->mpc_mul_mpf(zm, scal, wp)
A:sympy.mpmath.libmp.gammazeta.A->mpc_mul(A, mpc_exp(y, wp), wp)
A:sympy.mpmath.libmp.gammazeta.s->MPZ(s)
A:sympy.mpmath.libmp.gammazeta.t->mpf_mul(pi, mpf_floor(rezfloor), wp)
A:sympy.mpmath.libmp.gammazeta.a->from_man_exp(afix, -wp)
A:sympy.mpmath.libmp.gammazeta.ppowers[i]->mpf_mul(ppowers[i], primes[i], wp)
A:sympy.mpmath.libmp.gammazeta.res->mpf_div(res, from_int(4 * 16 * 36), wp)
A:sympy.mpmath.libmp.gammazeta.mpf_euler->def_mpf_constant(euler_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_apery->def_mpf_constant(apery_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_khinchin->def_mpf_constant(khinchin_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_glaisher->def_mpf_constant(glaisher_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_catalan->def_mpf_constant(catalan_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_mertens->def_mpf_constant(mertens_fixed)
A:sympy.mpmath.libmp.gammazeta.mpf_twinprime->def_mpf_constant(twinprime_fixed)
A:sympy.mpmath.libmp.gammazeta.f3->from_int(3)
A:sympy.mpmath.libmp.gammazeta.f6->from_int(6)
A:sympy.mpmath.libmp.gammazeta.lgn->math.log(n, 2)
A:sympy.mpmath.libmp.gammazeta.BERNOULLI_PREC_CUTOFF->bernoulli_size(MAX_BERNOULLI_CACHE)
A:sympy.mpmath.libmp.gammazeta.(p, q)->bernfrac(n)
A:sympy.mpmath.libmp.gammazeta.cached->bernoulli_cache.get(wp)
A:sympy.mpmath.libmp.gammazeta.szbm->bernoulli_size(m)
A:sympy.mpmath.libmp.gammazeta.b->mpc_zeta(y, wp)
A:sympy.mpmath.libmp.gammazeta.v->mpc_add(z, mpc_mul_mpf(mpc_mul(z, z, wp), mpf_euler(wp), wp), wp)
A:sympy.mpmath.libmp.gammazeta.n->int(math.floor((gi - yfb) / (2 * math.pi) + 0.5))
A:sympy.mpmath.libmp.gammazeta.p->mpc_psi0(mpc_sub(mpc_one, z, wp), wp)
A:sympy.mpmath.libmp.gammazeta.pint->to_int(p, round_nearest)
A:sympy.mpmath.libmp.gammazeta.e->mpf_exp(fone, wp)
A:sympy.mpmath.libmp.gammazeta.sq2pi->mpf_sqrt(mpf_shift(mpf_pi(wp), 1), wp)
A:sympy.mpmath.libmp.gammazeta.c[0]->to_fixed(sq2pi, prec)
A:sympy.mpmath.libmp.gammazeta.c[k]->to_fixed(term, prec)
A:sympy.mpmath.libmp.gammazeta.coefs->calc_spouge_coefficients(a, prec)
A:sympy.mpmath.libmp.gammazeta.x->mpc_div_mpf(x, from_int(12), wp)
A:sympy.mpmath.libmp.gammazeta.re->mpf_gamma(a, prec, rnd, 3)
A:sympy.mpmath.libmp.gammazeta.im->mpf_mul_int(mpf_pi(prec + 10), n, prec, rnd)
A:sympy.mpmath.libmp.gammazeta.size->int(size * math.log(size, 2))
A:sympy.mpmath.libmp.gammazeta.pix->mpc_mul(x, pi, wp)
A:sympy.mpmath.libmp.gammazeta.g->mpf_add(xmpf, from_int(-nearest_int))
A:sympy.mpmath.libmp.gammazeta.(sprec, a, c)->get_spouge_coefficients(wp)
A:sympy.mpmath.libmp.gammazeta.xpa->mpf_add(x, from_int(a), wp)
A:sympy.mpmath.libmp.gammazeta.logxpa->mpc_log((repa, im), wp)
A:sympy.mpmath.libmp.gammazeta.xph->mpf_add(x, fhalf, wp)
A:sympy.mpmath.libmp.gammazeta.u->math.atan2(zfb, zfa)
A:sympy.mpmath.libmp.gammazeta.w->from_man_exp(y, -wp)
A:sympy.mpmath.libmp.gammazeta.gamma_diff->mpf_div(a, b, wp)
A:sympy.mpmath.libmp.gammazeta.repa->mpf_add(re, from_int(a), wp)
A:sympy.mpmath.libmp.gammazeta.reph->mpf_add(re, fhalf, wp)
A:sympy.mpmath.libmp.gammazeta.(c, s)->mpf_cos_sin_pi(x, wp)
A:sympy.mpmath.libmp.gammazeta.q->mpc_sub(mpc_one, mpc_pow(mpc_two, r, wp), wp)
A:sympy.mpmath.libmp.gammazeta.m->to_int(x)
A:sympy.mpmath.libmp.gammazeta.(bsign, bman, bexp, bbc)->mpf_bernoulli(2 * k, wp)
A:sympy.mpmath.libmp.gammazeta.c->mpc_sin_pi(mpc_shift(s, -1), wp)
A:sympy.mpmath.libmp.gammazeta.z->mpc_neg(z)
A:sympy.mpmath.libmp.gammazeta.z2->mpc_pow_int(z, -2, wp)
A:sympy.mpmath.libmp.gammazeta.eps->mpf_shift(fone, amag - wp)
A:sympy.mpmath.libmp.gammazeta.bern->mpf_bernoulli(2 * k, wp)
A:sympy.mpmath.libmp.gammazeta.szterm->mpc_abs(term, 10)
A:sympy.mpmath.libmp.gammazeta.zm->mpc_mul(zm, z2, wp)
A:sympy.mpmath.libmp.gammazeta.integral_term->mpc_div_mpf(zm, from_int(m), wp)
A:sympy.mpmath.libmp.gammazeta.magn->mpc_abs(s, 10)
A:sympy.mpmath.libmp.gammazeta.scal->mpf_div(scal, from_int(b), wp)
A:sympy.mpmath.libmp.gammazeta.needed_terms->int(2.0 ** m + 1)
A:sympy.mpmath.libmp.gammazeta.powprec->int(wp - s * math.log(k, 2))
A:sympy.mpmath.libmp.gammazeta.d->int((1 + n_for_stirling ** 2 - bn ** 2) ** 0.5 - an)
A:sympy.mpmath.libmp.gammazeta.y->mpc_sub(y, mpc_log(r, wp), wp)
A:sympy.mpmath.libmp.gammazeta.r->from_man_exp(x * p * r, -3 * wp)
A:sympy.mpmath.libmp.gammazeta.(asign, aman, aexp, abc)->mpc_abs(r, 10)
A:sympy.mpmath.libmp.gammazeta.sf->to_fixed(s, wp)
A:sympy.mpmath.libmp.gammazeta.ln2->ln2_fixed(wp)
A:sympy.mpmath.libmp.gammazeta.eman->exp_fixed(u, wp, ln2)
A:sympy.mpmath.libmp.gammazeta.mag->max(amag, bmag)
A:sympy.mpmath.libmp.gammazeta.ref->to_fixed(re, wp)
A:sympy.mpmath.libmp.gammazeta.imf->to_fixed(im, wp)
A:sympy.mpmath.libmp.gammazeta.pi2->pi_fixed(wp - 1)
A:sympy.mpmath.libmp.gammazeta.log->pow_fixed(log, maxd, wp)
A:sympy.mpmath.libmp.gammazeta.(wre, wim)->cos_sin_fixed(-imf * log >> wp, wp, pi2)
A:sympy.mpmath.libmp.gammazeta.tre->from_man_exp(tre, -wp, wp)
A:sympy.mpmath.libmp.gammazeta.tim->from_man_exp(tim, -wp, wp)
A:sympy.mpmath.libmp.gammazeta.primes->list_primes(n)
A:sympy.mpmath.libmp.gammazeta.(sieve, primes, mult)->primesieve(a + n)
A:sympy.mpmath.libmp.gammazeta.(cos, sin)->cos_sin_fixed(-sim * log >> wp, wp, pi2)
A:sympy.mpmath.libmp.gammazeta.aa->max(a, 2)
A:sympy.mpmath.libmp.gammazeta.sre->to_fixed(sre, wp)
A:sympy.mpmath.libmp.gammazeta.sim->to_fixed(sim, wp)
A:sympy.mpmath.libmp.gammazeta.(re, im)->zetasum_sieved(critical_line, sre, sim, a, n, wp)
A:sympy.mpmath.libmp.gammazeta.maxd->max(derivatives)
A:sympy.mpmath.libmp.gammazeta.derivatives->range(maxd + 1)
A:sympy.mpmath.libmp.gammazeta.f_2pi->mpf_shift(mpf_pi(wp), 1)
A:sympy.mpmath.libmp.gammazeta.exp_2pi_kexp_2pi->mpf_exp(f_2pi, wp)
A:sympy.mpmath.libmp.gammazeta.q1->to_fixed(q1, wp)
A:sympy.mpmath.libmp.gammazeta.q2->to_fixed(q2, wp)
A:sympy.mpmath.libmp.gammazeta.exp_2pi_k->mpf_mul(exp_2pi_k, exp_2pi, wp)
A:sympy.mpmath.libmp.gammazeta.pi_powfpi->mpf_pow_int(mpf_shift(mpf_pi(wp), 1), 2, wp)
A:sympy.mpmath.libmp.gammazeta.pi_pow->mpf_div(pi_pow, from_int((n + 1) * (n + 2)), wp)
A:sympy.mpmath.libmp.gammazeta.zeta_values[n]->to_fixed(z, wp)
A:sympy.mpmath.libmp.gammazeta.prec->int(prec * 1.2)
A:sympy.mpmath.libmp.gammazeta.A[2]->euler_fixed(wp)
A:sympy.mpmath.libmp.gammazeta.zeta_values->zeta_array(N, wp)
A:sympy.mpmath.libmp.gammazeta.(coeffs, cwp)->gamma_taylor_coefficients(wp)
A:sympy.mpmath.libmp.gammazeta.usize->bitcount(max(abs(ure), abs(uim)))
A:sympy.mpmath.libmp.gammazeta.tsize->bitcount(max(abs(tre), abs(tim)))
A:sympy.mpmath.libmp.gammazeta.(p, q, pb, qb)->stirling_coefficient(k)
A:sympy.mpmath.libmp.gammazeta.f->ifac2(2 * n + 1)
A:sympy.mpmath.libmp.gammazeta.one_dist->abs(absxman - one)
A:sympy.mpmath.libmp.gammazeta.two_dist->abs(absxman - 2 * one)
A:sympy.mpmath.libmp.gammazeta.xsub1->mpf_sub(fone, x)
A:sympy.mpmath.libmp.gammazeta.xsub2->mpf_sub(ftwo, x)
A:sympy.mpmath.libmp.gammazeta.n_for_stirling->int(GAMMA_STIRLING_BETA * wp)
A:sympy.mpmath.libmp.gammazeta.xxabs->from_man_exp(absxman, -wp)
A:sympy.mpmath.libmp.gammazeta.xabs->mpf_abs(x)
A:sympy.mpmath.libmp.gammazeta.an->abs(to_int(a))
A:sympy.mpmath.libmp.gammazeta.bn->abs(to_int(b))
A:sympy.mpmath.libmp.gammazeta.absn->complex(an, bn)
A:sympy.mpmath.libmp.gammazeta.zsub1->mpc_sub_mpf(z, fone)
A:sympy.mpmath.libmp.gammazeta.yfinal->mpc_add(x, y, wp)
A:sympy.mpmath.libmp.gammazeta.zsub2->mpc_sub_mpf(z, ftwo)
A:sympy.mpmath.libmp.gammazeta.aabs->mpf_abs(a)
A:sympy.mpmath.libmp.gammazeta.x1->mpf_gamma(aabs, pp, type=type)
A:sympy.mpmath.libmp.gammazeta.x2->mpf_gamma(mpf_add(aabs, eps), pp, type=type)
A:sympy.mpmath.libmp.gammazeta.xprime->mpf_div(mpf_sub(x2, x1, pp), eps, pp)
A:sympy.mpmath.libmp.gammazeta.afix->to_fixed(a, wp)
A:sympy.mpmath.libmp.gammazeta.bfix->to_fixed(b, wp)
A:sympy.mpmath.libmp.gammazeta.(yre, yim)->complex_stirling_series(afix, bfix, wp)
A:sympy.mpmath.libmp.gammazeta.(lre, lim)->mpc_log(z, wp)
A:sympy.mpmath.libmp.gammazeta.lre->to_fixed(lre, wp)
A:sympy.mpmath.libmp.gammazeta.lim->to_fixed(lim, wp)
A:sympy.mpmath.libmp.gammazeta.zfa->to_float(zprered[0])
A:sympy.mpmath.libmp.gammazeta.zfb->to_float(zprered[1])
A:sympy.mpmath.libmp.gammazeta.zfabs->math.hypot(zfa, zfb)
A:sympy.mpmath.libmp.gammazeta.yfb->to_float(y[1])
A:sympy.mpmath.libmp.gammazeta.s1->mpc_sub(s1, t, wp)
A:sympy.mpmath.libmp.gammazeta.rezfloor->mpf_floor(zorig[0])
A:sympy.mpmath.libmp.gammazeta.imzsign->mpf_sign(zorig[1])
sympy.mpmath.libmp.apery_fixed(prec)
sympy.mpmath.libmp.bernfrac(n)
sympy.mpmath.libmp.catalan_fixed(prec)
sympy.mpmath.libmp.euler_fixed(prec)
sympy.mpmath.libmp.gammazeta.apery_fixed(prec)
sympy.mpmath.libmp.gammazeta.bernfrac(n)
sympy.mpmath.libmp.gammazeta.bernoulli_size(n)
sympy.mpmath.libmp.gammazeta.borwein_coefficients(n)
sympy.mpmath.libmp.gammazeta.calc_spouge_coefficients(a,prec)
sympy.mpmath.libmp.gammazeta.catalan_fixed(prec)
sympy.mpmath.libmp.gammazeta.complex_stirling_series(x,y,prec)
sympy.mpmath.libmp.gammazeta.euler_fixed(prec)
sympy.mpmath.libmp.gammazeta.gamma_fixed_taylor(xmpf,x,wp,prec,rnd,type)
sympy.mpmath.libmp.gammazeta.gamma_taylor_coefficients(inprec)
sympy.mpmath.libmp.gammazeta.get_spouge_coefficients(prec)
sympy.mpmath.libmp.gammazeta.glaisher_fixed(prec)
sympy.mpmath.libmp.gammazeta.khinchin_fixed(prec)
sympy.mpmath.libmp.gammazeta.mertens_fixed(prec)
sympy.mpmath.libmp.gammazeta.mpc_altzeta(s,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpc_factorial(x,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpc_factorial_old(x,prec,rounding=round_fast)
sympy.mpmath.libmp.gammazeta.mpc_gamma(z,prec,rnd='d',type=0)
sympy.mpmath.libmp.gammazeta.mpc_gamma_old(x,prec,rounding=round_fast,p1=1)
sympy.mpmath.libmp.gammazeta.mpc_harmonic(z,prec,rnd)
sympy.mpmath.libmp.gammazeta.mpc_loggamma(z,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpc_psi(m,z,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpc_psi0(z,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpc_rgamma(x,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpc_zeta(s,prec,rnd=round_fast,alt=0,force=False)
sympy.mpmath.libmp.gammazeta.mpc_zetasum(s,a,n,derivatives,reflect,prec)
sympy.mpmath.libmp.gammazeta.mpf_altzeta(s,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_bernoulli(n,prec,rnd=None)
sympy.mpmath.libmp.gammazeta.mpf_bernoulli_huge(n,prec,rnd=None)
sympy.mpmath.libmp.gammazeta.mpf_factorial(x,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpf_factorial_old(x,prec,rounding=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_gamma(x,prec,rnd='d',type=0)
sympy.mpmath.libmp.gammazeta.mpf_gamma_int(n,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_gamma_int_old(n,prec,rounding=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_gamma_old(x,prec,rounding=round_fast,p1=1)
sympy.mpmath.libmp.gammazeta.mpf_harmonic(x,prec,rnd)
sympy.mpmath.libmp.gammazeta.mpf_loggamma(x,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpf_psi(m,x,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_psi0(x,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.mpf_rgamma(x,prec,rnd='d')
sympy.mpmath.libmp.gammazeta.mpf_zeta(s,prec,rnd=round_fast,alt=0)
sympy.mpmath.libmp.gammazeta.mpf_zeta_int(s,prec,rnd=round_fast)
sympy.mpmath.libmp.gammazeta.pow_fixed(x,n,wp)
sympy.mpmath.libmp.gammazeta.primesieve(n)
sympy.mpmath.libmp.gammazeta.real_stirling_series(x,prec)
sympy.mpmath.libmp.gammazeta.spouge_sum_complex(re,im,prec,a,c)
sympy.mpmath.libmp.gammazeta.spouge_sum_rational(p,q,prec,a,c)
sympy.mpmath.libmp.gammazeta.spouge_sum_real(x,prec,a,c)
sympy.mpmath.libmp.gammazeta.stirling_coefficient(n)
sympy.mpmath.libmp.gammazeta.twinprime_fixed(prec)
sympy.mpmath.libmp.gammazeta.zeta_array(N,prec)
sympy.mpmath.libmp.gammazeta.zetasum_sieved(critical_line,sre,sim,a,n,wp)
sympy.mpmath.libmp.glaisher_fixed(prec)
sympy.mpmath.libmp.khinchin_fixed(prec)
sympy.mpmath.libmp.mertens_fixed(prec)
sympy.mpmath.libmp.mpc_altzeta(s,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_factorial(x,prec,rnd='d')
sympy.mpmath.libmp.mpc_factorial_old(x,prec,rounding=round_fast)
sympy.mpmath.libmp.mpc_gamma(z,prec,rnd='d',type=0)
sympy.mpmath.libmp.mpc_gamma_old(x,prec,rounding=round_fast,p1=1)
sympy.mpmath.libmp.mpc_harmonic(z,prec,rnd)
sympy.mpmath.libmp.mpc_loggamma(z,prec,rnd='d')
sympy.mpmath.libmp.mpc_psi(m,z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_psi0(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_rgamma(x,prec,rnd='d')
sympy.mpmath.libmp.mpc_zeta(s,prec,rnd=round_fast,alt=0,force=False)
sympy.mpmath.libmp.mpc_zetasum(s,a,n,derivatives,reflect,prec)
sympy.mpmath.libmp.mpf_altzeta(s,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_bernoulli(n,prec,rnd=None)
sympy.mpmath.libmp.mpf_bernoulli_huge(n,prec,rnd=None)
sympy.mpmath.libmp.mpf_factorial(x,prec,rnd='d')
sympy.mpmath.libmp.mpf_factorial_old(x,prec,rounding=round_fast)
sympy.mpmath.libmp.mpf_gamma(x,prec,rnd='d',type=0)
sympy.mpmath.libmp.mpf_gamma_int(n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_gamma_int_old(n,prec,rounding=round_fast)
sympy.mpmath.libmp.mpf_gamma_old(x,prec,rounding=round_fast,p1=1)
sympy.mpmath.libmp.mpf_harmonic(x,prec,rnd)
sympy.mpmath.libmp.mpf_loggamma(x,prec,rnd='d')
sympy.mpmath.libmp.mpf_psi(m,x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_psi0(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_rgamma(x,prec,rnd='d')
sympy.mpmath.libmp.mpf_zeta(s,prec,rnd=round_fast,alt=0)
sympy.mpmath.libmp.mpf_zeta_int(s,prec,rnd=round_fast)
sympy.mpmath.libmp.twinprime_fixed(prec)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libmpc.py----------------------------------------
A:sympy.mpmath.libmp.libmpc.rs->to_str(re, dps)
A:sympy.mpmath.libmp.libmpc.p->mpf_mul(a, a)
A:sympy.mpmath.libmp.libmpc.q->mpf_mul(b, b)
A:sympy.mpmath.libmp.libmpc.r->mpf_hypot(ap, b, wp)
A:sympy.mpmath.libmp.libmpc.s->mpf_hypot(am, b, wp)
A:sympy.mpmath.libmp.libmpc.re->mpf_mul(ey, c, prec, rnd)
A:sympy.mpmath.libmp.libmpc.im->mpf_mul(ey, s, prec, rnd)
A:sympy.mpmath.libmp.libmpc.mag->mpf_add(c, ch, wp)
A:sympy.mpmath.libmp.libmpc.t->mpf_sub(mpc_abs((a, b), wp), a, wp)
A:sympy.mpmath.libmp.libmpc.u->mpc_div_mpf(u, b, prec, rnd)
A:sympy.mpmath.libmp.libmpc.m->mpf_add(mpf_mul(a, a), mpf_mul(b, b), prec + 10)
A:sympy.mpmath.libmp.libmpc.sqrtz->mpc_sqrt(z, prec + 10)
A:sympy.mpmath.libmp.libmpc.v->mpc_div(v, u, wp)
A:sympy.mpmath.libmp.libmpc.abs_de->abs(de)
A:sympy.mpmath.libmp.libmpc.(re, im)->mpc_pow((a, b), (nth, fzero), prec2, rnd)
A:sympy.mpmath.libmp.libmpc.w->mpf_sqrt(v, wp)
A:sympy.mpmath.libmp.libmpc.a1->from_int(a1, start)
A:sympy.mpmath.libmp.libmpc.b1->from_int(b1, start)
A:sympy.mpmath.libmp.libmpc.fn->from_int(n)
A:sympy.mpmath.libmp.libmpc.nth->mpf_rdiv_int(1, fn, prec2)
A:sympy.mpmath.libmp.libmpc.(re2, im2)->complex_int_pow(re, im, n - 1)
A:sympy.mpmath.libmp.libmpc.re2->rshift(re2, (n - 1) * prevp - p - extra1)
A:sympy.mpmath.libmp.libmpc.im2->rshift(im2, (n - 1) * prevp - p - extra1)
A:sympy.mpmath.libmp.libmpc.ap->mpf_add(fone, a, wp)
A:sympy.mpmath.libmp.libmpc.bp->rshift(b, prec - p)
A:sympy.mpmath.libmp.libmpc.inverse->mpc_nthroot((a, b), -n, prec + 5, reciprocal_rnd[rnd])
A:sympy.mpmath.libmp.libmpc.prec2->int(1.2 * (prec + 10))
A:sympy.mpmath.libmp.libmpc.pf->mpc_abs((a, b), prec)
A:sympy.mpmath.libmp.libmpc.af->to_fixed(a, prec2)
A:sympy.mpmath.libmp.libmpc.bf->to_fixed(b, prec2)
A:sympy.mpmath.libmp.libmpc.(c, s)->mpf_cos_sin_pi(re, prec + 10)
A:sympy.mpmath.libmp.libmpc.(ch, sh)->mpf_cosh_sinh(b, wp)
A:sympy.mpmath.libmp.libmpc.a->mpf_phi(wp)
A:sympy.mpmath.libmp.libmpc.b->mpf_add(mpf_shift(a, 1), fnone, wp)
A:sympy.mpmath.libmp.libmpc.cre->mpf_mul(c, ch, prec, rnd)
A:sympy.mpmath.libmp.libmpc.cim->mpf_mul(s, sh, prec, rnd)
A:sympy.mpmath.libmp.libmpc.sre->mpf_mul(s, ch, prec, rnd)
A:sympy.mpmath.libmp.libmpc.sim->mpf_mul(c, sh, prec, rnd)
A:sympy.mpmath.libmp.libmpc.(b, a)->mpc_tan((b, a), prec, rnd)
A:sympy.mpmath.libmp.libmpc.l1->mpc_log(x, wp)
A:sympy.mpmath.libmp.libmpc.l2->mpc_log(y, wp)
A:sympy.mpmath.libmp.libmpc.(a, b)->mpc_acos(z, prec, rnd)
A:sympy.mpmath.libmp.libmpc.beta_crossover->from_float(0.6417)
A:sympy.mpmath.libmp.libmpc.alpha_crossover->from_float(1.5)
A:sympy.mpmath.libmp.libmpc.am->mpf_sub(fone, a, wp)
A:sympy.mpmath.libmp.libmpc.pi->mpf_pi(prec, rnd)
A:sympy.mpmath.libmp.libmpc.c->mpf_div(Ax, mpf_add(r, ap, wp), wp)
A:sympy.mpmath.libmp.libmpc.alpha->mpf_shift(mpf_add(r, s, wp), -1)
A:sympy.mpmath.libmp.libmpc.beta->mpf_div(a, alpha, wp)
A:sympy.mpmath.libmp.libmpc.b2->mpf_mul(b, b, wp)
A:sympy.mpmath.libmp.libmpc.Ax->mpf_add(alpha, a, wp)
A:sympy.mpmath.libmp.libmpc.d->mpf_div(Ax, mpf_sub(s, am, wp), wp)
A:sympy.mpmath.libmp.libmpc.c1->mpf_div(b2, mpf_add(r, ap, wp), wp)
A:sympy.mpmath.libmp.libmpc.c2->mpf_sub(s, am, wp)
A:sympy.mpmath.libmp.libmpc.Am1->mpf_shift(mpf_add(c1, c2, wp), -1)
A:sympy.mpmath.libmp.libmpc.size->max(abs(re[2] + re[3]), abs(re[2] + re[3]))
A:sympy.mpmath.libmp.libmpc.ey->mpf_exp(im, prec + 10)
sympy.mpmath.libmp.complex_int_pow(a,b,n)
sympy.mpmath.libmp.libmpc.acos_asin(z,prec,rnd,n)
sympy.mpmath.libmp.libmpc.complex_int_pow(a,b,n)
sympy.mpmath.libmp.libmpc.mpc_abs(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_acos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_acosh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_add(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_add_mpf(z,x,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_arg(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_asin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_asinh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_atan(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_atanh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cbrt(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_ceil(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_conjugate(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cos_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cos_sin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cos_sin_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_cosh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_div(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_div_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_exp(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_expj(z,prec,rnd='f')
sympy.mpmath.libmp.libmpc.mpc_expjpi(z,prec,rnd='f')
sympy.mpmath.libmp.libmpc.mpc_fibonacci(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_floor(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_frac(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_hash(z)
sympy.mpmath.libmp.libmpc.mpc_is_inf(z)
sympy.mpmath.libmp.libmpc.mpc_is_infnan(z)
sympy.mpmath.libmp.libmpc.mpc_is_nonzero(z)
sympy.mpmath.libmp.libmpc.mpc_log(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_mpf_div(p,z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_mul(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_mul_imag_mpf(z,x,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_mul_int(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_mul_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_neg(z,prec=None,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_nint(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_nthroot(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_nthroot_fixed(a,b,n,prec)
sympy.mpmath.libmp.libmpc.mpc_pos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_pow(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_pow_int(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_pow_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_reciprocal(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_shift(z,n)
sympy.mpmath.libmp.libmpc.mpc_sin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_sin_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_sinh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_sqrt(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_square(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_sub(z,w,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_sub_mpf(z,p,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_tan(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_tanh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpc.mpc_to_complex(z,strict=False)
sympy.mpmath.libmp.libmpc.mpc_to_str(z,dps,**kwargs)
sympy.mpmath.libmp.libmpc.mpf_expj(x,prec,rnd='f')
sympy.mpmath.libmp.libmpc.mpf_expjpi(x,prec,rnd='f')
sympy.mpmath.libmp.mpc_abs(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_acos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_acosh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_add(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_add_mpf(z,x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_arg(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_asin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_asinh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_atan(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_atanh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cbrt(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_ceil(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_conjugate(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cos_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cos_sin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cos_sin_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_cosh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_div(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_div_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_exp(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_expj(z,prec,rnd='f')
sympy.mpmath.libmp.mpc_expjpi(z,prec,rnd='f')
sympy.mpmath.libmp.mpc_fibonacci(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_floor(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_frac(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_hash(z)
sympy.mpmath.libmp.mpc_is_inf(z)
sympy.mpmath.libmp.mpc_is_infnan(z)
sympy.mpmath.libmp.mpc_is_nonzero(z)
sympy.mpmath.libmp.mpc_log(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_mpf_div(p,z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_mul(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_mul_imag_mpf(z,x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_mul_int(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_mul_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_neg(z,prec=None,rnd=round_fast)
sympy.mpmath.libmp.mpc_nint(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_nthroot(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_nthroot_fixed(a,b,n,prec)
sympy.mpmath.libmp.mpc_pos(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_pow(z,w,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_pow_int(z,n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_pow_mpf(z,p,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_reciprocal(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_shift(z,n)
sympy.mpmath.libmp.mpc_sin(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_sin_pi(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_sinh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_sqrt(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_square(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_sub(z,w,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpc_sub_mpf(z,p,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpc_tan(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_tanh(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_to_complex(z,strict=False)
sympy.mpmath.libmp.mpc_to_str(z,dps,**kwargs)
sympy.mpmath.libmp.mpf_expj(x,prec,rnd='f')
sympy.mpmath.libmp.mpf_expjpi(x,prec,rnd='f')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/six.py----------------------------------------
A:sympy.mpmath.libmp.six.MAXSIZE->int((1 << 63) - 1)
A:sympy.mpmath.libmp.six.result->self._resolve()
A:sympy.mpmath.libmp.six.module->_import_module(self.mod)
A:sympy.mpmath.libmp.six.movessys.modules[__name__ + '.moves']->_MovedItems('moves')
A:sympy.mpmath.libmp.six.get_method_function->operator.attrgetter(_meth_func)
A:sympy.mpmath.libmp.six.get_method_self->operator.attrgetter(_meth_self)
A:sympy.mpmath.libmp.six.get_function_code->operator.attrgetter(_func_code)
A:sympy.mpmath.libmp.six.get_function_defaults->operator.attrgetter(_func_defaults)
A:sympy.mpmath.libmp.six.int2byte->operator.methodcaller('to_bytes', 1, 'big')
A:sympy.mpmath.libmp.six.exec_->getattr(builtins, 'exec')
A:sympy.mpmath.libmp.six.print_->getattr(builtins, 'print')
A:sympy.mpmath.libmp.six.frame->sys._getframe(1)
A:sympy.mpmath.libmp.six.fp->kwargs.pop('file', sys.stdout)
A:sympy.mpmath.libmp.six.data->str(data)
A:sympy.mpmath.libmp.six.sep->kwargs.pop('sep', None)
A:sympy.mpmath.libmp.six.end->kwargs.pop('end', None)
A:sympy.mpmath.libmp.six.newline->unicode('\n')
A:sympy.mpmath.libmp.six.space->unicode(' ')
sympy.mpmath.libmp.six.MovedAttribute(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
sympy.mpmath.libmp.six.MovedAttribute.__init__(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
sympy.mpmath.libmp.six.MovedAttribute._resolve(self)
sympy.mpmath.libmp.six.MovedModule(self,name,old,new=None)
sympy.mpmath.libmp.six.MovedModule.__init__(self,name,old,new=None)
sympy.mpmath.libmp.six.MovedModule._resolve(self)
sympy.mpmath.libmp.six._LazyDescr(self,name)
sympy.mpmath.libmp.six._LazyDescr.__get__(self,obj,tp)
sympy.mpmath.libmp.six._LazyDescr.__init__(self,name)
sympy.mpmath.libmp.six._MovedItems(types.ModuleType)
sympy.mpmath.libmp.six._add_doc(func,doc)
sympy.mpmath.libmp.six._import_module(name)
sympy.mpmath.libmp.six.add_move(move)
sympy.mpmath.libmp.six.iteritems(d)
sympy.mpmath.libmp.six.iterkeys(d)
sympy.mpmath.libmp.six.itervalues(d)
sympy.mpmath.libmp.six.remove_move(name)
sympy.mpmath.libmp.six.with_metaclass(meta,base=object)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libhyper.py----------------------------------------
A:sympy.mpmath.libmp.libhyper.pstring->''.join(param_types)
A:sympy.mpmath.libmp.libhyper.l_areal->len(areal)
A:sympy.mpmath.libmp.libhyper.l_breal->len(breal)
A:sympy.mpmath.libmp.libhyper.cancellable_real->min(l_areal, l_breal)
A:sympy.mpmath.libmp.libhyper.multiplier->' * '.join(['AINT_#'.replace('#', str(i)) for i in aint] + ['AP_#'.replace('#', str(i)) for i in arat] + ['BQ_#'.replace('#', str(i)) for i in brat])
A:sympy.mpmath.libmp.libhyper.divisor->' * '.join(['BINT_#'.replace('#', str(i)) for i in bint] + ['BP_#'.replace('#', str(i)) for i in brat] + ['AQ_#'.replace('#', str(i)) for i in arat] + ['n'])
A:sympy.mpmath.libmp.libhyper.source->'\n'.join(('    ' + line for line in source))
A:sympy.mpmath.libmp.libhyper.x->to_fixed(x, wp)
A:sympy.mpmath.libmp.libhyper.c->mpf_sqrt(mpf_pi(prec + 20), prec + 20)
A:sympy.mpmath.libmp.libhyper.t->mpc_sub(mpc_one, z, wp)
A:sympy.mpmath.libmp.libhyper.n->abs(n)
A:sympy.mpmath.libmp.libhyper.s->from_man_exp(s, -wp, wp)
A:sympy.mpmath.libmp.libhyper.z->mpc_ci_si_taylor(re, im, wp, 1)
A:sympy.mpmath.libmp.libhyper.y->mpf_euler(wp)
A:sympy.mpmath.libmp.libhyper.v->mpc_agm1(a, wp)
A:sympy.mpmath.libmp.libhyper.u->mpc_log(z, wp)
A:sympy.mpmath.libmp.libhyper.t1->from_man_exp(v, -wp)
A:sympy.mpmath.libmp.libhyper.t2->mpf_log(xabs, wp)
A:sympy.mpmath.libmp.libhyper.zmag->max(amag, bmag)
A:sympy.mpmath.libmp.libhyper.zre->to_fixed(zre, prec)
A:sympy.mpmath.libmp.libhyper.zim->to_fixed(zim, prec)
A:sympy.mpmath.libmp.libhyper.(vre, vim)->complex_ei_taylor(zre, zim, wp)
A:sympy.mpmath.libmp.libhyper.nmag->bitcount(abs(n))
A:sympy.mpmath.libmp.libhyper.negx->mpf_neg(x)
A:sympy.mpmath.libmp.libhyper.re->from_man_exp(sre, -prec, origprec, rounding)
A:sympy.mpmath.libmp.libhyper.xi->abs(to_int(x))
A:sympy.mpmath.libmp.libhyper.m->min(max(1, xi - n), 2 * wp)
A:sympy.mpmath.libmp.libhyper.T1->mpf_mul(T1, mpf_pow_int(negx, n - 1, wp), wp)
A:sympy.mpmath.libmp.libhyper.rt->to_fixed(x, wp)
A:sympy.mpmath.libmp.libhyper.T2->mpf_mul(T2, mpf_pow_int(x, n_orig, wp), wp)
A:sympy.mpmath.libmp.libhyper.R->mpf_add(T1, T2)
A:sympy.mpmath.libmp.libhyper.M->from_int(-ifac(n - 1))
A:sympy.mpmath.libmp.libhyper.im->from_man_exp(sim, -prec, origprec, rounding)
A:sympy.mpmath.libmp.libhyper.mag->mpc_abs(z, 1)
A:sympy.mpmath.libmp.libhyper.si->mpf_pos(si, prec, rnd)
A:sympy.mpmath.libmp.libhyper.xabs->mpf_abs(x)
A:sympy.mpmath.libmp.libhyper.ci->mpc_add((cre, cim), mpc_log(z, wp), prec, rnd)
A:sympy.mpmath.libmp.libhyper.xf->to_fixed(x, wp)
A:sympy.mpmath.libmp.libhyper.s1->mpf_div(s1, x, wp)
A:sympy.mpmath.libmp.libhyper.s2->mpf_div(s2, x, wp)
A:sympy.mpmath.libmp.libhyper.(cos, sin)->mpf_cos_sin(x, wp)
A:sympy.mpmath.libmp.libhyper.(cre, cim)->mpc_ci_si_taylor(re, im, wp, 0)
A:sympy.mpmath.libmp.libhyper.cre->mpf_add(cre, mpf_euler(wp), wp)
A:sympy.mpmath.libmp.libhyper.(re, im)->complex_int_pow(zre, zim, n)
A:sympy.mpmath.libmp.libhyper.abs_mag_delta->abs(mag_delta)
A:sympy.mpmath.libmp.libhyper.min_mag->min(amag, bmag)
A:sympy.mpmath.libmp.libhyper.max_mag->max(amag, bmag)
A:sympy.mpmath.libmp.libhyper.a->mpc_sqrt(mpc_sub(mpc_one, z, wp), wp)
A:sympy.mpmath.libmp.libhyper.b->mpc_mul(Kdiff, mpc_shift(z, 1), wp)
A:sympy.mpmath.libmp.libhyper.af->to_fixed(a, wp)
A:sympy.mpmath.libmp.libhyper.bf->to_fixed(b, wp)
A:sympy.mpmath.libmp.libhyper.g->agm_fixed(af, bf, wp)
A:sympy.mpmath.libmp.libhyper.eps->mpf_shift(fone, -wp + 10)
A:sympy.mpmath.libmp.libhyper.a1->mpc_shift(mpc_add(a, b, wp), -1)
A:sympy.mpmath.libmp.libhyper.b1->mpc_sqrt(mpc_mul(a, b, wp), wp)
A:sympy.mpmath.libmp.libhyper.err->mpc_abs(mpc_sub(a, b, 10), 10)
A:sympy.mpmath.libmp.libhyper.r->mpc_mpf_div(mpf_pi(wp), v, prec, rnd)
A:sympy.mpmath.libmp.libhyper.h->mpf_shift(fone, p)
A:sympy.mpmath.libmp.libhyper.K->mpc_ellipk(z, 2 * wp)
A:sympy.mpmath.libmp.libhyper.Kh->mpc_ellipk(mpc_add_mpf(z, h, 2 * wp), 2 * wp)
A:sympy.mpmath.libmp.libhyper.Kdiff->mpc_shift(mpc_sub(Kh, K, wp), -p)
sympy.mpmath.libmp.NoConvergence(Exception)
sympy.mpmath.libmp.libhyper.NoConvergence(Exception)
sympy.mpmath.libmp.libhyper.complex_ei_asymptotic(zre,zim,prec)
sympy.mpmath.libmp.libhyper.complex_ei_taylor(zre,zim,prec)
sympy.mpmath.libmp.libhyper.ei_asymptotic(x,prec)
sympy.mpmath.libmp.libhyper.ei_taylor(x,prec)
sympy.mpmath.libmp.libhyper.erfc_check_series(x,prec)
sympy.mpmath.libmp.libhyper.make_hyp_summator(key)
sympy.mpmath.libmp.libhyper.mpc_agm(a,b,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_agm1(a,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_besseljn(n,z,prec,rounding=round_fast)
sympy.mpmath.libmp.libhyper.mpc_ci(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_ci_si_taylor(re,im,wp,which=0)
sympy.mpmath.libmp.libhyper.mpc_e1(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_ei(z,prec,rnd=round_fast,e1=False)
sympy.mpmath.libmp.libhyper.mpc_ellipe(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_ellipk(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpc_si(z,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_agm(a,b,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_agm1(a,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_besseljn(n,x,prec,rounding=round_fast)
sympy.mpmath.libmp.libhyper.mpf_ci(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_ci_si(x,prec,rnd=round_fast,which=2)
sympy.mpmath.libmp.libhyper.mpf_ci_si_taylor(x,wp,which=0)
sympy.mpmath.libmp.libhyper.mpf_e1(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_ei(x,prec,rnd=round_fast,e1=False)
sympy.mpmath.libmp.libhyper.mpf_ellipe(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_ellipk(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_erf(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_erfc(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libhyper.mpf_expint(n,x,prec,rnd=round_fast,gamma=False)
sympy.mpmath.libmp.libhyper.mpf_si(x,prec,rnd=round_fast)
sympy.mpmath.libmp.make_hyp_summator(key)
sympy.mpmath.libmp.mpc_agm(a,b,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_agm1(a,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_besseljn(n,z,prec,rounding=round_fast)
sympy.mpmath.libmp.mpc_ci(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_ci_si_taylor(re,im,wp,which=0)
sympy.mpmath.libmp.mpc_e1(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_ei(z,prec,rnd=round_fast,e1=False)
sympy.mpmath.libmp.mpc_ellipe(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_ellipk(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpc_si(z,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_agm(a,b,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_agm1(a,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_besseljn(n,x,prec,rounding=round_fast)
sympy.mpmath.libmp.mpf_ci(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_ci_si(x,prec,rnd=round_fast,which=2)
sympy.mpmath.libmp.mpf_ci_si_taylor(x,wp,which=0)
sympy.mpmath.libmp.mpf_e1(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_ei(x,prec,rnd=round_fast,e1=False)
sympy.mpmath.libmp.mpf_ellipe(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_ellipk(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_erf(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_erfc(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_expint(n,x,prec,rnd=round_fast,gamma=False)
sympy.mpmath.libmp.mpf_si(x,prec,rnd=round_fast)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libelefun.py----------------------------------------
A:sympy.mpmath.libmp.libelefun.newprec->int(prec * 1.05 + 10)
A:sympy.mpmath.libmp.libelefun.f.memo_val->f(newprec, **kwargs)
A:sympy.mpmath.libmp.libelefun.v->exp_basecase(t, prec)
A:sympy.mpmath.libmp.libelefun.a1->MPZ(2 * a + 3)
A:sympy.mpmath.libmp.libelefun.(p1, q1, r1)->bsp_acot(q, a, m, hyperbolic)
A:sympy.mpmath.libmp.libelefun.(p2, q2, r2)->bsp_acot(q, m, b, hyperbolic)
A:sympy.mpmath.libmp.libelefun.N->int(1.1 * prec / math.log(prec) + 20)
A:sympy.mpmath.libmp.libelefun.(p, q, r)->bsp_acot(a, 0, N, hyperbolic)
A:sympy.mpmath.libmp.libelefun.CHUD_A->MPZ(13591409)
A:sympy.mpmath.libmp.libelefun.CHUD_B->MPZ(545140134)
A:sympy.mpmath.libmp.libelefun.CHUD_C->MPZ(640320)
A:sympy.mpmath.libmp.libelefun.CHUD_D->MPZ(12)
A:sympy.mpmath.libmp.libelefun.g->MPZ((6 * b - 5) * (2 * b - 1) * (6 * b - 1))
A:sympy.mpmath.libmp.libelefun.(g1, p1, q1)->bs_chudnovsky(a, mid, level + 1, verbose)
A:sympy.mpmath.libmp.libelefun.(g2, p2, q2)->bs_chudnovsky(mid, b, level + 1, verbose)
A:sympy.mpmath.libmp.libelefun.(g, p, q)->bs_chudnovsky(0, N, 0, verbose)
A:sympy.mpmath.libmp.libelefun.sqrtC->isqrt_fast(CHUD_C << 2 * prec)
A:sympy.mpmath.libmp.libelefun.(p1, q1)->bspe(a, m)
A:sympy.mpmath.libmp.libelefun.(p2, q2)->bspe(m, b)
A:sympy.mpmath.libmp.libelefun.(p, q)->bspe(0, N)
A:sympy.mpmath.libmp.libelefun.mpf_phi->def_mpf_constant(phi_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_pi->def_mpf_constant(pi_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_e->def_mpf_constant(e_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_degree->def_mpf_constant(degree_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_ln2->def_mpf_constant(ln2_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_ln10->def_mpf_constant(ln10_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_sqrtpi->def_mpf_constant(sqrtpi_fixed)
A:sympy.mpmath.libmp.libelefun.mpf_ln_sqrt2pi->def_mpf_constant(ln_sqrt2pi_fixed)
A:sympy.mpmath.libmp.libelefun.c->from_man_exp(c, -wp, prec, rnd)
A:sympy.mpmath.libmp.libelefun.bc->bitcount(y)
A:sympy.mpmath.libmp.libelefun.y1->from_int(y1, start)
A:sympy.mpmath.libmp.libelefun.r->int(prec ** 0.5)
A:sympy.mpmath.libmp.libelefun.fn->from_int(n)
A:sympy.mpmath.libmp.libelefun.(pm, pe)->int_pow_fixed(r, n - 1, prevp)
A:sympy.mpmath.libmp.libelefun.r2->rshift(pm, (n - 1) * prevp - p - pe - extra1)
A:sympy.mpmath.libmp.libelefun.nth->mpf_rdiv_int(1, fn, prec2)
A:sympy.mpmath.libmp.libelefun.s->from_man_exp(s, -wp, prec, rnd)
A:sympy.mpmath.libmp.libelefun.man->exp_basecase(t, wp)
A:sympy.mpmath.libmp.libelefun.ln2->ln2_fixed(prec)
A:sympy.mpmath.libmp.libelefun.b->mpf_add(mpf_shift(a, 1), fnone, wp)
A:sympy.mpmath.libmp.libelefun.p->agm_fixed(s, t, prec)
A:sympy.mpmath.libmp.libelefun.x->mpf_mul(x, mpf_pi(wp))
A:sympy.mpmath.libmp.libelefun.log_a->log_taylor(a, cached_prec, 8)
A:sympy.mpmath.libmp.libelefun.abs_mag->abs(mag)
A:sympy.mpmath.libmp.libelefun.tbc->bitcount(tman)
A:sympy.mpmath.libmp.libelefun.t->to_fixed(x, wp)
A:sympy.mpmath.libmp.libelefun.m->log_taylor_cached(lshift(man, wp - bc), wp)
A:sympy.mpmath.libmp.libelefun.a2->mpf_mul(a, a)
A:sympy.mpmath.libmp.libelefun.b2->mpf_mul(b, b)
A:sympy.mpmath.libmp.libelefun.h2->mpf_add(a2, b2, prec + extra - min(a2[2], b2[2]))
A:sympy.mpmath.libmp.libelefun.cancelled->mpf_add(h2, fnone, 10)
A:sympy.mpmath.libmp.libelefun.(cos, sin)->cos_sin_fixed(r, wp)
A:sympy.mpmath.libmp.libelefun.atan_a->atan_newton(a, prec2)
A:sympy.mpmath.libmp.libelefun.(a, atan_a)->atan_taylor_get_cached(n, prec)
A:sympy.mpmath.libmp.libelefun.a->exp_basecase(x, prec)
A:sympy.mpmath.libmp.libelefun.tquo->mpf_atan(mpf_div(y, x, prec + 4), prec + 4)
A:sympy.mpmath.libmp.libelefun.q->mpf_sqrt(mpf_add(mpf_mul(x, x), fnone, wp), wp)
A:sympy.mpmath.libmp.libelefun.size->abs(exp + bc)
A:sympy.mpmath.libmp.libelefun.u->int(0.3 * prec ** 0.35)
A:sympy.mpmath.libmp.libelefun.(cosh, sinh)->exponential_series(x, prec, 1)
A:sympy.mpmath.libmp.libelefun.n->int(n)
A:sympy.mpmath.libmp.libelefun.(cos_t, sin_t)->exponential_series(w, 10 + COS_SIN_CACHE_PREC, 2)
A:sympy.mpmath.libmp.libelefun.e->mpf_e(wp + int(1.45 * mag))
A:sympy.mpmath.libmp.libelefun.lg2->ln2_fixed(wpmod)
A:sympy.mpmath.libmp.libelefun.(n, t)->divmod(x, ln2)
A:sympy.mpmath.libmp.libelefun.cosh->from_man_exp(cosh, n - wp - 1, prec, rnd)
A:sympy.mpmath.libmp.libelefun.sinh->from_man_exp(sinh, n - wp - 1, prec, rnd)
A:sympy.mpmath.libmp.libelefun.cs->mpf_shift(mpf_exp(mpf_abs(x), prec, rnd), -1)
A:sympy.mpmath.libmp.libelefun.(a, b)->exp_expneg_basecase(t, wp)
A:sympy.mpmath.libmp.libelefun.pi2->pi_fixed(prec - 1)
A:sympy.mpmath.libmp.libelefun.(n, y)->divmod(t, pi2)
A:sympy.mpmath.libmp.libelefun.(t, n, wp)->mod_pi2(man, exp, mag, wp)
A:sympy.mpmath.libmp.libelefun.(c, s)->cos_sin_basecase(t, prec)
sympy.mpmath.libmp.agm_fixed(a,b,prec)
sympy.mpmath.libmp.degree_fixed(prec)
sympy.mpmath.libmp.e_fixed(prec)
sympy.mpmath.libmp.libelefun.acot_fixed(a,prec,hyperbolic)
sympy.mpmath.libmp.libelefun.agm_fixed(a,b,prec)
sympy.mpmath.libmp.libelefun.atan_inf(sign,prec,rnd)
sympy.mpmath.libmp.libelefun.atan_newton(x,prec)
sympy.mpmath.libmp.libelefun.atan_taylor(x,prec)
sympy.mpmath.libmp.libelefun.atan_taylor_get_cached(n,prec)
sympy.mpmath.libmp.libelefun.bs_chudnovsky(a,b,level,verbose)
sympy.mpmath.libmp.libelefun.bsp_acot(q,a,b,hyperbolic)
sympy.mpmath.libmp.libelefun.bspe(a,b)
sympy.mpmath.libmp.libelefun.constant_memo(f)
sympy.mpmath.libmp.libelefun.cos_sin_basecase(x,prec)
sympy.mpmath.libmp.libelefun.cos_sin_fixed(x,prec,pi2=None)
sympy.mpmath.libmp.libelefun.def_mpf_constant(fixed)
sympy.mpmath.libmp.libelefun.degree_fixed(prec)
sympy.mpmath.libmp.libelefun.e_fixed(prec)
sympy.mpmath.libmp.libelefun.exp_basecase(x,prec)
sympy.mpmath.libmp.libelefun.exp_expneg_basecase(x,prec)
sympy.mpmath.libmp.libelefun.exp_fixed(x,prec,ln2=None)
sympy.mpmath.libmp.libelefun.exponential_series(x,prec,type=0)
sympy.mpmath.libmp.libelefun.int_pow_fixed(y,n,prec)
sympy.mpmath.libmp.libelefun.ln10_fixed(prec)
sympy.mpmath.libmp.libelefun.ln2_fixed(prec)
sympy.mpmath.libmp.libelefun.ln_sqrt2pi_fixed(prec)
sympy.mpmath.libmp.libelefun.log_agm(x,prec)
sympy.mpmath.libmp.libelefun.log_int_fixed(n,prec,ln2=None)
sympy.mpmath.libmp.libelefun.log_taylor(x,prec,r=0)
sympy.mpmath.libmp.libelefun.log_taylor_cached(x,prec)
sympy.mpmath.libmp.libelefun.machin(coefs,prec,hyperbolic=False)
sympy.mpmath.libmp.libelefun.mod_pi2(man,exp,mag,wp)
sympy.mpmath.libmp.libelefun.mpf_acos(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_acosh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_asin(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_asinh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_atan(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_atan2(y,x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_atanh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cbrt(s,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cos(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cos_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cos_sin(x,prec,rnd=round_fast,which=0,pi=False)
sympy.mpmath.libmp.libelefun.mpf_cos_sin_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cosh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_cosh_sinh(x,prec,rnd=round_fast,tanh=0)
sympy.mpmath.libmp.libelefun.mpf_exp(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_fibonacci(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_log(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_log_hypot(a,b,prec,rnd)
sympy.mpmath.libmp.libelefun.mpf_nthroot(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_pow(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_sin(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_sin_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_sinh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_tan(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.mpf_tanh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libelefun.nthroot_fixed(y,n,prec,exp1)
sympy.mpmath.libmp.libelefun.phi_fixed(prec)
sympy.mpmath.libmp.libelefun.pi_fixed(prec,verbose=False,verbose_base=None)
sympy.mpmath.libmp.libelefun.sqrtpi_fixed(prec)
sympy.mpmath.libmp.ln10_fixed(prec)
sympy.mpmath.libmp.ln2_fixed(prec)
sympy.mpmath.libmp.log_int_fixed(n,prec,ln2=None)
sympy.mpmath.libmp.mpf_acos(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_acosh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_asin(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_asinh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_atan(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_atan2(y,x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_atanh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cbrt(s,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cos(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cos_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cos_sin(x,prec,rnd=round_fast,which=0,pi=False)
sympy.mpmath.libmp.mpf_cos_sin_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cosh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_cosh_sinh(x,prec,rnd=round_fast,tanh=0)
sympy.mpmath.libmp.mpf_exp(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_fibonacci(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_log(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_log_hypot(a,b,prec,rnd)
sympy.mpmath.libmp.mpf_nthroot(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_pow(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_sin(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_sin_pi(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_sinh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_tan(x,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_tanh(x,prec,rnd=round_fast)
sympy.mpmath.libmp.phi_fixed(prec)
sympy.mpmath.libmp.pi_fixed(prec,verbose=False,verbose_base=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/libmp/libmpf.py----------------------------------------
A:sympy.mpmath.libmp.libmpf.round_nearest->intern('n')
A:sympy.mpmath.libmp.libmpf.round_floor->intern('f')
A:sympy.mpmath.libmp.libmpf.round_ceiling->intern('c')
A:sympy.mpmath.libmp.libmpf.round_up->intern('u')
A:sympy.mpmath.libmp.libmpf.round_down->intern('d')
A:sympy.mpmath.libmp.libmpf.dps->prec_to_dps(n)
A:sympy.mpmath.libmp.libmpf.man->isqrt(man << shift)
A:sympy.mpmath.libmp.libmpf.bc->bitcount(man)
A:sympy.mpmath.libmp.libmpf.int_cache->dict(((n, from_man_exp(n, 0)) for n in range(-10, 257)))
A:sympy.mpmath.libmp.libmpf.v->mpf_pos(v, prec, rnd)
A:sympy.mpmath.libmp.libmpf.(m, e)->math.frexp(x)
A:sympy.mpmath.libmp.libmpf.delta->mpf_sub(s, t, 5, round_floor)
A:sympy.mpmath.libmp.libmpf.t->mpf_neg(t)
A:sympy.mpmath.libmp.libmpf.x->x.strip().strip()
A:sympy.mpmath.libmp.libmpf.special->mpf_add(special or fzero, x, 1)
A:sympy.mpmath.libmp.libmpf.(quot, rem)->divmod(n << extra, man)
A:sympy.mpmath.libmp.libmpf.base->min(sexp, texp)
A:sympy.mpmath.libmp.libmpf.n->int(n)
A:sympy.mpmath.libmp.libmpf.inverse->mpf_pow_int(s, -n, prec + 5, reciprocal_rnd[rnd])
A:sympy.mpmath.libmp.libmpf.s->from_rational(man, 10 ** (-exp), prec, rnd)
A:sympy.mpmath.libmp.libmpf.tmp->mpf_div(tmp, mpf_ln10(expprec), expprec)
A:sympy.mpmath.libmp.libmpf.b->to_int(tmp)
A:sympy.mpmath.libmp.libmpf.fixprec->max(bitprec - exp - bc, 0)
A:sympy.mpmath.libmp.libmpf.fixdps->int(fixprec / math.log(10, 2) + 0.5)
A:sympy.mpmath.libmp.libmpf.sf->to_fixed(s, fixprec)
A:sympy.mpmath.libmp.libmpf.sd->bin_to_radix(sf, fixprec, 10, fixdps)
A:sympy.mpmath.libmp.libmpf.digits->digits.rstrip('0').rstrip('0')
A:sympy.mpmath.libmp.libmpf.min_fixed->min(-(dps // 3), -5)
A:sympy.mpmath.libmp.libmpf.(sign, digits, exponent)->to_digits_exp(s, dps + 3)
A:sympy.mpmath.libmp.libmpf.digits2->str(int(digits[:dps]) + 1)
A:sympy.mpmath.libmp.libmpf.parts->x.strip().strip().split('.')
A:sympy.mpmath.libmp.libmpf.exp->int(parts[1])
A:sympy.mpmath.libmp.libmpf.(p, q)->x.strip().strip().split('/')
A:sympy.mpmath.libmp.libmpf.(man, exp)->str_to_man_exp(x, base=2)
A:sympy.mpmath.libmp.libmpf.shift->max(4, 2 * prec - bc + 4)
A:sympy.mpmath.libmp.libmpf.(man, rem)->sqrtrem(man << shift)
A:sympy.mpmath.libmp.libmpf.hypot2->mpf_add(mpf_mul(x, x), mpf_mul(y, y), prec + 4)
sympy.mpmath.libmp.ComplexResult(ValueError)
sympy.mpmath.libmp.dps_to_prec(n)
sympy.mpmath.libmp.from_bstr(x)
sympy.mpmath.libmp.from_float(x,prec=53,rnd=round_fast)
sympy.mpmath.libmp.from_int(n,prec=0,rnd=round_fast)
sympy.mpmath.libmp.from_man_exp(man,exp,prec=None,rnd=round_fast)
sympy.mpmath.libmp.from_pickable(x)
sympy.mpmath.libmp.from_rational(p,q,prec,rnd=round_fast)
sympy.mpmath.libmp.from_str(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.ComplexResult(ValueError)
sympy.mpmath.libmp.libmpf._normalize(sign,man,exp,bc,prec,rnd)
sympy.mpmath.libmp.libmpf._normalize1(sign,man,exp,bc,prec,rnd)
sympy.mpmath.libmp.libmpf.dps_to_prec(n)
sympy.mpmath.libmp.libmpf.from_bstr(x)
sympy.mpmath.libmp.libmpf.from_float(x,prec=53,rnd=round_fast)
sympy.mpmath.libmp.libmpf.from_int(n,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.from_man_exp(man,exp,prec=None,rnd=round_fast)
sympy.mpmath.libmp.libmpf.from_pickable(x)
sympy.mpmath.libmp.libmpf.from_rational(p,q,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.from_str(x,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.gmpy_mpf_mul(s,t,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.gmpy_mpf_mul_int(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.h_mask_big
sympy.mpmath.libmp.libmpf.h_mask_big.__getitem__(self,n)
sympy.mpmath.libmp.libmpf.mpf_abs(s,prec=None,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_add(s,t,prec=0,rnd=round_fast,_sub=0)
sympy.mpmath.libmp.libmpf.mpf_ceil(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_cmp(s,t)
sympy.mpmath.libmp.libmpf.mpf_div(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_eq(s,t)
sympy.mpmath.libmp.libmpf.mpf_floor(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_frac(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_frexp(x)
sympy.mpmath.libmp.libmpf.mpf_ge(s,t)
sympy.mpmath.libmp.libmpf.mpf_gt(s,t)
sympy.mpmath.libmp.libmpf.mpf_hash(s)
sympy.mpmath.libmp.libmpf.mpf_hypot(x,y,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_le(s,t)
sympy.mpmath.libmp.libmpf.mpf_lt(s,t)
sympy.mpmath.libmp.libmpf.mpf_min_max(seq)
sympy.mpmath.libmp.libmpf.mpf_mod(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_neg(s,prec=None,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_nint(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_perturb(x,eps_sign,prec,rnd)
sympy.mpmath.libmp.libmpf.mpf_pos(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_pow_int(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_rand(prec)
sympy.mpmath.libmp.libmpf.mpf_rdiv_int(n,t,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_round_int(s,rnd)
sympy.mpmath.libmp.libmpf.mpf_shift(s,n)
sympy.mpmath.libmp.libmpf.mpf_sign(s)
sympy.mpmath.libmp.libmpf.mpf_sqrt(s,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_sub(s,t,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.mpf_sum(xs,prec=0,rnd=round_fast,absolute=False)
sympy.mpmath.libmp.libmpf.prec_to_dps(n)
sympy.mpmath.libmp.libmpf.python_mpf_mul(s,t,prec=0,rnd=round_fast)
sympy.mpmath.libmp.libmpf.python_mpf_mul_int(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.libmpf.repr_dps(n)
sympy.mpmath.libmp.libmpf.round_int(x,n,rnd)
sympy.mpmath.libmp.libmpf.str_to_man_exp(x,base=10)
sympy.mpmath.libmp.libmpf.strict_normalize(sign,man,exp,bc,prec,rnd)
sympy.mpmath.libmp.libmpf.strict_normalize1(sign,man,exp,bc,prec,rnd)
sympy.mpmath.libmp.libmpf.to_bstr(x)
sympy.mpmath.libmp.libmpf.to_digits_exp(s,dps)
sympy.mpmath.libmp.libmpf.to_fixed(s,prec)
sympy.mpmath.libmp.libmpf.to_float(s,strict=False)
sympy.mpmath.libmp.libmpf.to_int(s,rnd=None)
sympy.mpmath.libmp.libmpf.to_man_exp(s)
sympy.mpmath.libmp.libmpf.to_rational(s)
sympy.mpmath.libmp.libmpf.to_str(s,dps,strip_zeros=True,min_fixed=None,max_fixed=None,show_zero_exponent=False)
sympy.mpmath.libmp.mpf_abs(s,prec=None,rnd=round_fast)
sympy.mpmath.libmp.mpf_add(s,t,prec=0,rnd=round_fast,_sub=0)
sympy.mpmath.libmp.mpf_ceil(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_cmp(s,t)
sympy.mpmath.libmp.mpf_div(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_eq(s,t)
sympy.mpmath.libmp.mpf_floor(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_frac(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_frexp(x)
sympy.mpmath.libmp.mpf_ge(s,t)
sympy.mpmath.libmp.mpf_gt(s,t)
sympy.mpmath.libmp.mpf_hash(s)
sympy.mpmath.libmp.mpf_hypot(x,y,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_le(s,t)
sympy.mpmath.libmp.mpf_lt(s,t)
sympy.mpmath.libmp.mpf_mod(s,t,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_neg(s,prec=None,rnd=round_fast)
sympy.mpmath.libmp.mpf_nint(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_perturb(x,eps_sign,prec,rnd)
sympy.mpmath.libmp.mpf_pos(s,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_pow_int(s,n,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_rand(prec)
sympy.mpmath.libmp.mpf_rdiv_int(n,t,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_shift(s,n)
sympy.mpmath.libmp.mpf_sign(s)
sympy.mpmath.libmp.mpf_sqrt(s,prec,rnd=round_fast)
sympy.mpmath.libmp.mpf_sub(s,t,prec=0,rnd=round_fast)
sympy.mpmath.libmp.mpf_sum(xs,prec=0,rnd=round_fast,absolute=False)
sympy.mpmath.libmp.prec_to_dps(n)
sympy.mpmath.libmp.repr_dps(n)
sympy.mpmath.libmp.round_int(x,n,rnd)
sympy.mpmath.libmp.str_to_man_exp(x,base=10)
sympy.mpmath.libmp.to_bstr(x)
sympy.mpmath.libmp.to_digits_exp(s,dps)
sympy.mpmath.libmp.to_fixed(s,prec)
sympy.mpmath.libmp.to_float(s,strict=False)
sympy.mpmath.libmp.to_int(s,rnd=None)
sympy.mpmath.libmp.to_man_exp(s)
sympy.mpmath.libmp.to_rational(s)
sympy.mpmath.libmp.to_str(s,dps,strip_zeros=True,min_fixed=None,max_fixed=None,show_zero_exponent=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/approximation.py----------------------------------------
A:sympy.mpmath.calculus.approximation.s->ctx.mpf(0)
A:sympy.mpmath.calculus.approximation.h->ctx.mpf(0.5)
A:sympy.mpmath.calculus.approximation.t->ctx.cospi((k - h) / N)
A:sympy.mpmath.calculus.approximation.(a, b)->ctx._as_points(interval)
A:sympy.mpmath.calculus.approximation.T->chebT(ctx, ctx.mpf(2) / (b - a), ctx.mpf(-1) * (b + a) / (b - a))
A:sympy.mpmath.calculus.approximation.err->max(err, abs(f(x) - ctx.polyval(d, x)))
A:sympy.mpmath.calculus.approximation.interval->ctx._as_points(interval)
A:sympy.mpmath.calculus.approximation.ab->ctx._as_points(interval)
sympy.mpmath.approximation.chebT(ctx,a=1,b=0)
sympy.mpmath.approximation.chebcoeff(ctx,f,a,b,j,N)
sympy.mpmath.approximation.chebyfit(ctx,f,interval,N,error=False)
sympy.mpmath.approximation.fourier(ctx,f,interval,N)
sympy.mpmath.approximation.fourierval(ctx,series,interval,x)
sympy.mpmath.calculus.approximation.chebT(ctx,a=1,b=0)
sympy.mpmath.calculus.approximation.chebcoeff(ctx,f,a,b,j,N)
sympy.mpmath.calculus.approximation.chebyfit(ctx,f,interval,N,error=False)
sympy.mpmath.calculus.approximation.fourier(ctx,f,interval,N)
sympy.mpmath.calculus.approximation.fourierval(ctx,series,interval,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/optimization.py----------------------------------------
A:sympy.mpmath.calculus.optimization.error->abs(prevx - x0)
A:sympy.mpmath.calculus.optimization.f0->f(x0)
A:sympy.mpmath.calculus.optimization.f1->f(x1)
A:sympy.mpmath.calculus.optimization.fx->f(x)
A:sympy.mpmath.calculus.optimization.dfx->df(x)
A:sympy.mpmath.calculus.optimization.d2fx->d2f(x)
A:sympy.mpmath.calculus.optimization.fx0->f(x0)
A:sympy.mpmath.calculus.optimization.fx1->f(x1)
A:sympy.mpmath.calculus.optimization.fx2->f(x2)
A:sympy.mpmath.calculus.optimization.r->self.ctx.sqrt(w ** 2 - 4 * fx2 * fx2x1x0)
A:sympy.mpmath.calculus.optimization.fb->f(b)
A:sympy.mpmath.calculus.optimization.m->len(fx)
A:sympy.mpmath.calculus.optimization.fm->f(m)
A:sympy.mpmath.calculus.optimization.self.method->kwargs.get('method', 'illinois')
A:sympy.mpmath.calculus.optimization.self.getm->_getm(self.method)
A:sympy.mpmath.calculus.optimization.fa->f(a)
A:sympy.mpmath.calculus.optimization.fz->f(z)
A:sympy.mpmath.calculus.optimization.fx3->f(x3)
A:sympy.mpmath.calculus.optimization.fx4->f(x4)
A:sympy.mpmath.calculus.optimization.x0->ctx.matrix(x0)
A:sympy.mpmath.calculus.optimization.phi->steffensen(phi)
A:sympy.mpmath.calculus.optimization.x->ctx.matrix(x)
A:sympy.mpmath.calculus.optimization.h->ctx.sqrt(ctx.eps)
A:sympy.mpmath.calculus.optimization.n->len(x)
A:sympy.mpmath.calculus.optimization.J->ctx.matrix(m, n)
A:sympy.mpmath.calculus.optimization.xj->ctx.matrix(x).copy()
A:sympy.mpmath.calculus.optimization.fxnorm->norm(fx)
A:sympy.mpmath.calculus.optimization.Jx->J(*x0)
A:sympy.mpmath.calculus.optimization.s->self.ctx.lu_solve(Jx, fxn)
A:sympy.mpmath.calculus.optimization.newnorm->norm(fx)
A:sympy.mpmath.calculus.optimization.kwargs['verbose']->kwargs.get('verbose', verbose)
A:sympy.mpmath.calculus.optimization.f2->copy(f)
A:sympy.mpmath.calculus.optimization.multidimensional->isinstance(fx, (list, tuple, ctx.matrix))
A:sympy.mpmath.calculus.optimization.iterations->solver(ctx, f, x0, **kwargs)
A:sympy.mpmath.calculus.optimization.ffx->f(fx)
sympy.mpmath.calculus.optimization.ANewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.ANewton.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.ANewton.__iter__(self)
sympy.mpmath.calculus.optimization.Anderson(*args,**kwargs)
sympy.mpmath.calculus.optimization.Bisection(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Bisection.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Bisection.__iter__(self)
sympy.mpmath.calculus.optimization.Halley(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Halley.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Halley.__iter__(self)
sympy.mpmath.calculus.optimization.Illinois(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Illinois.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Illinois.__iter__(self)
sympy.mpmath.calculus.optimization.MDNewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.MDNewton.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.MDNewton.__iter__(self)
sympy.mpmath.calculus.optimization.MNewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.MNewton.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.MNewton.__iter__(self)
sympy.mpmath.calculus.optimization.Muller(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Muller.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Muller.__iter__(self)
sympy.mpmath.calculus.optimization.Newton(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Newton.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Newton.__iter__(self)
sympy.mpmath.calculus.optimization.OptimizationMethods(ctx)
sympy.mpmath.calculus.optimization.OptimizationMethods.__init__(ctx)
sympy.mpmath.calculus.optimization.Pegasus(*args,**kwargs)
sympy.mpmath.calculus.optimization.Ridder(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Ridder.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Ridder.__iter__(self)
sympy.mpmath.calculus.optimization.Secant(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Secant.__init__(self,ctx,f,x0,**kwargs)
sympy.mpmath.calculus.optimization.Secant.__iter__(self)
sympy.mpmath.calculus.optimization._getm(method)
sympy.mpmath.calculus.optimization.findroot(ctx,f,x0,solver=Secant,tol=None,verbose=False,verify=True,**kwargs)
sympy.mpmath.calculus.optimization.jacobian(ctx,f,x)
sympy.mpmath.calculus.optimization.multiplicity(ctx,f,root,tol=None,maxsteps=10,**kwargs)
sympy.mpmath.calculus.optimization.steffensen(f)
sympy.mpmath.optimization.ANewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.ANewton.__iter__(self)
sympy.mpmath.optimization.Anderson(*args,**kwargs)
sympy.mpmath.optimization.Bisection(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Bisection.__iter__(self)
sympy.mpmath.optimization.Halley(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Halley.__iter__(self)
sympy.mpmath.optimization.Illinois(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Illinois.__iter__(self)
sympy.mpmath.optimization.MDNewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.MDNewton.__iter__(self)
sympy.mpmath.optimization.MNewton(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.MNewton.__iter__(self)
sympy.mpmath.optimization.Muller(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Muller.__iter__(self)
sympy.mpmath.optimization.Newton(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Newton.__iter__(self)
sympy.mpmath.optimization.OptimizationMethods(ctx)
sympy.mpmath.optimization.Pegasus(*args,**kwargs)
sympy.mpmath.optimization.Ridder(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Ridder.__iter__(self)
sympy.mpmath.optimization.Secant(self,ctx,f,x0,**kwargs)
sympy.mpmath.optimization.Secant.__iter__(self)
sympy.mpmath.optimization._getm(method)
sympy.mpmath.optimization.findroot(ctx,f,x0,solver=Secant,tol=None,verbose=False,verify=True,**kwargs)
sympy.mpmath.optimization.jacobian(ctx,f,x)
sympy.mpmath.optimization.multiplicity(ctx,f,root,tol=None,maxsteps=10,**kwargs)
sympy.mpmath.optimization.steffensen(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/differentiation.py----------------------------------------
A:sympy.mpmath.calculus.differentiation.n->int(n)
A:sympy.mpmath.calculus.differentiation.singular->options.get('singular')
A:sympy.mpmath.calculus.differentiation.addprec->options.get('addprec', 10)
A:sympy.mpmath.calculus.differentiation.direction->options.get('direction', 0)
A:sympy.mpmath.calculus.differentiation.h->ctx.convert(h)
A:sympy.mpmath.calculus.differentiation.hextramag->int(ctx.mag(x))
A:sympy.mpmath.calculus.differentiation.steps->xrange(-n, n + 1, 2)
A:sympy.mpmath.calculus.differentiation.orders->list(n)
A:sympy.mpmath.calculus.differentiation.x->ctx.lu_solve(A, v)
A:sympy.mpmath.calculus.differentiation.method->options.get('method', 'step')
A:sympy.mpmath.calculus.differentiation.(values, norm, workprec)->hsteps(ctx, f, x, n, prec, **options)
A:sympy.mpmath.calculus.differentiation.radius->ctx.convert(options.get('radius', 0.25))
A:sympy.mpmath.calculus.differentiation.d->ctx.quadts(g, [0, 2 * ctx.pi])
A:sympy.mpmath.calculus.differentiation.(y, norm, workprec)->hsteps(ctx, f, x, B, callprec, **options)
A:sympy.mpmath.calculus.differentiation.B->min(B, n)
A:sympy.mpmath.calculus.differentiation.gen->enumerate(ctx.diffs(f, x, n, **options))
A:sympy.mpmath.calculus.differentiation.N->len(factors)
A:sympy.mpmath.calculus.differentiation.u->iterable_to_function(ctx.diffs_prod(factors[:N // 2]))
A:sympy.mpmath.calculus.differentiation.v->iterable_to_function(ctx.diffs_prod(factors[N // 2:]))
A:sympy.mpmath.calculus.differentiation.R->dict(((c + (0,), v) for (c, v) in iteritems(R)))
A:sympy.mpmath.calculus.differentiation.fn->iterable_to_function(fdiffs)
A:sympy.mpmath.calculus.differentiation.f0->ctx.exp(fn(0))
A:sympy.mpmath.calculus.differentiation.s->ctx.mpf(0)
A:sympy.mpmath.calculus.differentiation.m->max(int(ctx.ceil(ctx.re(n))) + 1, 1)
A:sympy.mpmath.calculus.differentiation.A->ctx.matrix(M)
sympy.mpmath.calculus.differentiation._partial_diff(ctx,f,xs,orders,options)
sympy.mpmath.calculus.differentiation.diff(ctx,f,x,n=1,**options)
sympy.mpmath.calculus.differentiation.difference(ctx,s,n)
sympy.mpmath.calculus.differentiation.differint(ctx,f,x,n=1,x0=0)
sympy.mpmath.calculus.differentiation.diffs(ctx,f,x,n=None,**options)
sympy.mpmath.calculus.differentiation.diffs_exp(ctx,fdiffs)
sympy.mpmath.calculus.differentiation.diffs_prod(ctx,factors)
sympy.mpmath.calculus.differentiation.diffun(ctx,f,n=1,**options)
sympy.mpmath.calculus.differentiation.dpoly(n,_cache={})
sympy.mpmath.calculus.differentiation.hsteps(ctx,f,x,n,prec,**options)
sympy.mpmath.calculus.differentiation.iterable_to_function(gen)
sympy.mpmath.calculus.differentiation.pade(ctx,a,L,M)
sympy.mpmath.calculus.differentiation.taylor(ctx,f,x,n,**options)
sympy.mpmath.differentiation._partial_diff(ctx,f,xs,orders,options)
sympy.mpmath.differentiation.diff(ctx,f,x,n=1,**options)
sympy.mpmath.differentiation.difference(ctx,s,n)
sympy.mpmath.differentiation.differint(ctx,f,x,n=1,x0=0)
sympy.mpmath.differentiation.diffs(ctx,f,x,n=None,**options)
sympy.mpmath.differentiation.diffs_exp(ctx,fdiffs)
sympy.mpmath.differentiation.diffs_prod(ctx,factors)
sympy.mpmath.differentiation.diffun(ctx,f,n=1,**options)
sympy.mpmath.differentiation.dpoly(n,_cache={})
sympy.mpmath.differentiation.hsteps(ctx,f,x,n,prec,**options)
sympy.mpmath.differentiation.iterable_to_function(gen)
sympy.mpmath.differentiation.pade(ctx,a,L,M)
sympy.mpmath.differentiation.taylor(ctx,f,x,n,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/odes.py----------------------------------------
A:sympy.mpmath.calculus.odes.htol->ctx.ldexp(1, -tol_prec)
A:sympy.mpmath.calculus.odes.dim->len(y0)
A:sympy.mpmath.calculus.odes.fxy->derivs(x, y)
A:sympy.mpmath.calculus.odes.radius->min(radius, ctx.nthroot(tol / abs(ts[-1]), n))
A:sympy.mpmath.calculus.odes.(ser, xb)->ode_taylor(ctx, F, xb, y, tol_prec, degree)
A:sympy.mpmath.calculus.odes.n->bisect(series_boundaries, x)
A:sympy.mpmath.calculus.odes.y->mpolyval(ser, x - xa)
A:sympy.mpmath.calculus.odes.x->ctx.convert(x)
A:sympy.mpmath.calculus.odes.(ser, xa, xb)->get_series(x)
sympy.mpmath.calculus.odes.ODEMethods(object)
sympy.mpmath.calculus.odes.ode_taylor(ctx,derivs,x0,y0,tol_prec,n)
sympy.mpmath.calculus.odes.odefun(ctx,F,x0,y0,tol=None,degree=None,method='taylor',verbose=False)
sympy.mpmath.odes.ODEMethods(object)
sympy.mpmath.odes.ode_taylor(ctx,derivs,x0,y0,tol_prec,n)
sympy.mpmath.odes.odefun(ctx,F,x0,y0,tol=None,degree=None,method='taylor',verbose=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/calculus.py----------------------------------------
sympy.mpmath.CalculusMethods(object)
sympy.mpmath.calculus.calculus.CalculusMethods(object)
sympy.mpmath.calculus.calculus.defun(f)
sympy.mpmath.defun(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/quadrature.py----------------------------------------
A:sympy.mpmath.calculus.quadrature.nodes->self.get_nodes(a, b, degree, prec, verbose)
A:sympy.mpmath.calculus.quadrature.a->ctx.convert(a)
A:sympy.mpmath.calculus.quadrature.b->ctx.convert(b)
A:sympy.mpmath.calculus.quadrature.half->ctx.mpf(0.5)
A:sympy.mpmath.calculus.quadrature.g->int(4 + max(0, self.ctx.log(prec / 30.0, 2)))
A:sympy.mpmath.calculus.quadrature.D1->self.ctx.log(abs(results[-1] - results[-2]), 10)
A:sympy.mpmath.calculus.quadrature.D2->self.ctx.log(abs(results[-1] - results[-3]), 10)
A:sympy.mpmath.calculus.quadrature.D4->min(0, max(D1 ** 2 / D2, 2 * D1, D3))
A:sympy.mpmath.calculus.quadrature.err->self.estimate_error(results, prec, epsilon)
A:sympy.mpmath.calculus.quadrature.tol->ctx.ldexp(1, -prec - 10)
A:sympy.mpmath.calculus.quadrature.t0->ctx.ldexp(1, -degree)
A:sympy.mpmath.calculus.quadrature.expt0->ctx.exp(t0)
A:sympy.mpmath.calculus.quadrature.udelta->ctx.exp(h)
A:sympy.mpmath.calculus.quadrature.c->ctx.exp(a - b)
A:sympy.mpmath.calculus.quadrature.diff->abs(x - 1)
A:sympy.mpmath.calculus.quadrature.epsilon->ctx.ldexp(1, -prec - 8)
A:sympy.mpmath.calculus.quadrature.ctx.prec->int(prec * 1.5)
A:sympy.mpmath.calculus.quadrature.r->ctx.mpf(math.cos(math.pi * (j - 0.25) / (n + 0.5)))
A:sympy.mpmath.calculus.quadrature.ctx._gauss_legendre->GaussLegendre(ctx)
A:sympy.mpmath.calculus.quadrature.ctx._tanh_sinh->TanhSinh(ctx)
A:sympy.mpmath.calculus.quadrature.rule->rule(ctx)
A:sympy.mpmath.calculus.quadrature.verbose->kwargs.get('verbose')
A:sympy.mpmath.calculus.quadrature.dim->len(points)
A:sympy.mpmath.calculus.quadrature.(v, err)->rule(ctx).summation(lambda x: rule.summation(lambda y: rule.summation(lambda z: f(x, y, z), points[2], prec, epsilon, m)[0], points[1], prec, epsilon, m)[0], points[0], prec, epsilon, m, verbose)
A:sympy.mpmath.calculus.quadrature.(a, b)->ctx._as_points(interval)
A:sympy.mpmath.calculus.quadrature.s1->ctx.quadosc(f, [a, 0], omega=omega, zeros=zeros, period=period)
A:sympy.mpmath.calculus.quadrature.s2->ctx.quadosc(f, [0, b], omega=omega, zeros=zeros, period=period)
A:sympy.mpmath.calculus.quadrature.s->ctx.quadgl(f, [a, zeros(n)])
sympy.mpmath.calculus.quadrature.GaussLegendre(QuadratureRule)
sympy.mpmath.calculus.quadrature.GaussLegendre.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.calculus.quadrature.QuadratureMethods(ctx,*args,**kwargs)
sympy.mpmath.calculus.quadrature.QuadratureMethods.__init__(ctx,*args,**kwargs)
sympy.mpmath.calculus.quadrature.QuadratureMethods.quad(ctx,f,*points,**kwargs)
sympy.mpmath.calculus.quadrature.QuadratureMethods.quadgl(ctx,*args,**kwargs)
sympy.mpmath.calculus.quadrature.QuadratureMethods.quadosc(ctx,f,interval,omega=None,period=None,zeros=None)
sympy.mpmath.calculus.quadrature.QuadratureMethods.quadts(ctx,*args,**kwargs)
sympy.mpmath.calculus.quadrature.QuadratureRule(self,ctx)
sympy.mpmath.calculus.quadrature.QuadratureRule.__init__(self,ctx)
sympy.mpmath.calculus.quadrature.QuadratureRule.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.calculus.quadrature.QuadratureRule.clear(self)
sympy.mpmath.calculus.quadrature.QuadratureRule.estimate_error(self,results,prec,epsilon)
sympy.mpmath.calculus.quadrature.QuadratureRule.get_nodes(self,a,b,degree,prec,verbose=False)
sympy.mpmath.calculus.quadrature.QuadratureRule.guess_degree(self,prec)
sympy.mpmath.calculus.quadrature.QuadratureRule.sum_next(self,f,nodes,degree,prec,previous,verbose=False)
sympy.mpmath.calculus.quadrature.QuadratureRule.summation(self,f,points,prec,epsilon,max_degree,verbose=False)
sympy.mpmath.calculus.quadrature.QuadratureRule.transform_nodes(self,nodes,a,b,verbose=False)
sympy.mpmath.calculus.quadrature.TanhSinh(QuadratureRule)
sympy.mpmath.calculus.quadrature.TanhSinh.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.calculus.quadrature.TanhSinh.sum_next(self,f,nodes,degree,prec,previous,verbose=False)
sympy.mpmath.quadrature.GaussLegendre(QuadratureRule)
sympy.mpmath.quadrature.GaussLegendre.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.quadrature.QuadratureMethods(ctx,*args,**kwargs)
sympy.mpmath.quadrature.QuadratureMethods.quad(ctx,f,*points,**kwargs)
sympy.mpmath.quadrature.QuadratureMethods.quadgl(ctx,*args,**kwargs)
sympy.mpmath.quadrature.QuadratureMethods.quadosc(ctx,f,interval,omega=None,period=None,zeros=None)
sympy.mpmath.quadrature.QuadratureMethods.quadts(ctx,*args,**kwargs)
sympy.mpmath.quadrature.QuadratureRule(self,ctx)
sympy.mpmath.quadrature.QuadratureRule.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.quadrature.QuadratureRule.clear(self)
sympy.mpmath.quadrature.QuadratureRule.estimate_error(self,results,prec,epsilon)
sympy.mpmath.quadrature.QuadratureRule.get_nodes(self,a,b,degree,prec,verbose=False)
sympy.mpmath.quadrature.QuadratureRule.guess_degree(self,prec)
sympy.mpmath.quadrature.QuadratureRule.sum_next(self,f,nodes,degree,prec,previous,verbose=False)
sympy.mpmath.quadrature.QuadratureRule.summation(self,f,points,prec,epsilon,max_degree,verbose=False)
sympy.mpmath.quadrature.QuadratureRule.transform_nodes(self,nodes,a,b,verbose=False)
sympy.mpmath.quadrature.TanhSinh(QuadratureRule)
sympy.mpmath.quadrature.TanhSinh.calc_nodes(self,degree,prec,verbose=False)
sympy.mpmath.quadrature.TanhSinh.sum_next(self,f,nodes,degree,prec,previous,verbose=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/extrapolation.py----------------------------------------
A:sympy.mpmath.calculus.extrapolation.maxc->max(abs(c), maxc)
A:sympy.mpmath.calculus.extrapolation.START->len(table)
A:sympy.mpmath.calculus.extrapolation.rnd->Random()
A:sympy.mpmath.calculus.extrapolation.f->fold_infinite(ctx, f, infinite)
A:sympy.mpmath.calculus.extrapolation.err->abs(value - self.last)
A:sympy.mpmath.calculus.extrapolation.L->cohen_alt_class()
A:sympy.mpmath.calculus.extrapolation.n->int(args[dim1])
A:sympy.mpmath.calculus.extrapolation.(i1, err1)->ctx.quad(g, [0, ctx.inf], error=True)
A:sympy.mpmath.calculus.extrapolation.(i2, err2)->ctx.quad(h, [0, ctx.inf], error=True)
A:sympy.mpmath.calculus.extrapolation.interval->ctx._as_points(interval)
A:sympy.mpmath.calculus.extrapolation.a->int(a)
A:sympy.mpmath.calculus.extrapolation.b->ctx.convert(interval[-1])
A:sympy.mpmath.calculus.extrapolation.mag->abs(term)
A:sympy.mpmath.calculus.extrapolation.(integral, ierr)->ctx.quad(f, interval, error=True)
A:sympy.mpmath.calculus.extrapolation.tol->option('tol', ctx.eps / 2 ** 10)
A:sympy.mpmath.calculus.extrapolation.verbose->option('verbose', False)
A:sympy.mpmath.calculus.extrapolation.maxterms->option('maxterms', ctx.dps * 10)
A:sympy.mpmath.calculus.extrapolation.method->set(option('method', 'r+s').split('+'))
A:sympy.mpmath.calculus.extrapolation.skip->option('skip', 0)
A:sympy.mpmath.calculus.extrapolation.steps->iter(option('steps', xrange(10, 10 ** 9, 10)))
A:sympy.mpmath.calculus.extrapolation.strict->option('strict')
A:sympy.mpmath.calculus.extrapolation.variant->kwargs.get('levin_variant', 'u')
A:sympy.mpmath.calculus.extrapolation.step->next(steps)
A:sympy.mpmath.calculus.extrapolation.error->abs(best - partial[-2])
A:sympy.mpmath.calculus.extrapolation.(value, maxc)->ctx.richardson(partial)
A:sympy.mpmath.calculus.extrapolation.richardson_error->abs(value - last_richardson_value)
A:sympy.mpmath.calculus.extrapolation.shanks_table->ctx.shanks(partial, shanks_table, randomized=True)
A:sympy.mpmath.calculus.extrapolation.shanks_error->abs(est1 - est2)
A:sympy.mpmath.calculus.extrapolation.(est, lerror)->cohen_alt_class().update_psum(partial)
A:sympy.mpmath.calculus.extrapolation.(value, em_error)->emfun(index, tol)
A:sympy.mpmath.calculus.extrapolation.(infinite, g)->standardize(ctx, f, intervals, options)
A:sympy.mpmath.calculus.extrapolation.v->ctx.nsum(lambda n: ctx.ln(f(n)), interval, **kwargs)
A:sympy.mpmath.calculus.extrapolation.(a, b)->ctx._as_points(interval)
A:sympy.mpmath.calculus.extrapolation.pools->map(tuple, args)
A:sympy.mpmath.calculus.extrapolation.args->list(args)
A:sympy.mpmath.calculus.extrapolation.args[dim]->ctx.mpf(x)
A:sympy.mpmath.calculus.extrapolation.s->f(*args)
A:sympy.mpmath.calculus.extrapolation.args[dim2]->ctx.mpf(y)
A:sympy.mpmath.calculus.extrapolation.args[dim1]->ctx.mpf(n)
A:sympy.mpmath.calculus.extrapolation.direction->ctx.sign(x)
sympy.mpmath.calculus.extrapolation.adaptive_extrapolation(ctx,update,emfun,kwargs)
sympy.mpmath.calculus.extrapolation.cartesian_product(args)
sympy.mpmath.calculus.extrapolation.cohen_alt(ctx)
sympy.mpmath.calculus.extrapolation.cohen_alt_class(self)
sympy.mpmath.calculus.extrapolation.cohen_alt_class.__init__(self)
sympy.mpmath.calculus.extrapolation.cohen_alt_class.update(self,A)
sympy.mpmath.calculus.extrapolation.cohen_alt_class.update_psum(self,S)
sympy.mpmath.calculus.extrapolation.fold_finite(ctx,f,intervals)
sympy.mpmath.calculus.extrapolation.fold_infinite(ctx,f,intervals)
sympy.mpmath.calculus.extrapolation.levin(ctx,method='levin',variant='u')
sympy.mpmath.calculus.extrapolation.levin_class(self,method='levin',variant='u')
sympy.mpmath.calculus.extrapolation.levin_class.__init__(self,method='levin',variant='u')
sympy.mpmath.calculus.extrapolation.levin_class.factor_levin(self,i)
sympy.mpmath.calculus.extrapolation.levin_class.factor_sidi(self,i)
sympy.mpmath.calculus.extrapolation.levin_class.run(self,s,a0,a1=0)
sympy.mpmath.calculus.extrapolation.levin_class.step(self,x)
sympy.mpmath.calculus.extrapolation.levin_class.step_psum(self,s)
sympy.mpmath.calculus.extrapolation.levin_class.update(self,X)
sympy.mpmath.calculus.extrapolation.levin_class.update_psum(self,S)
sympy.mpmath.calculus.extrapolation.limit(ctx,f,x,direction=1,exp=False,**kwargs)
sympy.mpmath.calculus.extrapolation.nprod(ctx,f,interval,nsum=False,**kwargs)
sympy.mpmath.calculus.extrapolation.nsum(ctx,f,*intervals,**options)
sympy.mpmath.calculus.extrapolation.richardson(ctx,seq)
sympy.mpmath.calculus.extrapolation.shanks(ctx,seq,table=None,randomized=False)
sympy.mpmath.calculus.extrapolation.standardize(ctx,f,intervals,options)
sympy.mpmath.calculus.extrapolation.standardize_infinite(ctx,f,intervals)
sympy.mpmath.calculus.extrapolation.sumap(ctx,f,interval,integral=None,error=False)
sympy.mpmath.calculus.extrapolation.sumem(ctx,f,interval,tol=None,reject=10,integral=None,adiffs=None,bdiffs=None,verbose=False,error=False,_fast_abort=False)
sympy.mpmath.calculus.extrapolation.wrapsafe(f)
sympy.mpmath.extrapolation.adaptive_extrapolation(ctx,update,emfun,kwargs)
sympy.mpmath.extrapolation.cartesian_product(args)
sympy.mpmath.extrapolation.cohen_alt(ctx)
sympy.mpmath.extrapolation.cohen_alt_class(self)
sympy.mpmath.extrapolation.cohen_alt_class.update(self,A)
sympy.mpmath.extrapolation.cohen_alt_class.update_psum(self,S)
sympy.mpmath.extrapolation.fold_finite(ctx,f,intervals)
sympy.mpmath.extrapolation.fold_infinite(ctx,f,intervals)
sympy.mpmath.extrapolation.levin(ctx,method='levin',variant='u')
sympy.mpmath.extrapolation.levin_class(self,method='levin',variant='u')
sympy.mpmath.extrapolation.levin_class.factor_levin(self,i)
sympy.mpmath.extrapolation.levin_class.factor_sidi(self,i)
sympy.mpmath.extrapolation.levin_class.run(self,s,a0,a1=0)
sympy.mpmath.extrapolation.levin_class.step(self,x)
sympy.mpmath.extrapolation.levin_class.step_psum(self,s)
sympy.mpmath.extrapolation.levin_class.update(self,X)
sympy.mpmath.extrapolation.levin_class.update_psum(self,S)
sympy.mpmath.extrapolation.limit(ctx,f,x,direction=1,exp=False,**kwargs)
sympy.mpmath.extrapolation.nprod(ctx,f,interval,nsum=False,**kwargs)
sympy.mpmath.extrapolation.nsum(ctx,f,*intervals,**options)
sympy.mpmath.extrapolation.richardson(ctx,seq)
sympy.mpmath.extrapolation.shanks(ctx,seq,table=None,randomized=False)
sympy.mpmath.extrapolation.standardize(ctx,f,intervals,options)
sympy.mpmath.extrapolation.standardize_infinite(ctx,f,intervals)
sympy.mpmath.extrapolation.sumap(ctx,f,interval,integral=None,error=False)
sympy.mpmath.extrapolation.sumem(ctx,f,interval,tol=None,reject=10,integral=None,adiffs=None,bdiffs=None,verbose=False,error=False,_fast_abort=False)
sympy.mpmath.extrapolation.wrapsafe(f)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/calculus/polynomials.py----------------------------------------
A:sympy.mpmath.calculus.polynomials.p->ctx.convert(coeffs[0])
A:sympy.mpmath.calculus.polynomials.lead->ctx.convert(coeffs[0])
A:sympy.mpmath.calculus.polynomials.x->f(p)
A:sympy.mpmath.calculus.polynomials.err[i]->abs(x)
A:sympy.mpmath.calculus.polynomials.err->max(err, ctx.ldexp(1, -orig + 1))
sympy.mpmath.calculus.polynomials.polyroots(ctx,coeffs,maxsteps=50,cleanup=True,extraprec=10,error=False)
sympy.mpmath.calculus.polynomials.polyval(ctx,coeffs,x,derivative=False)
sympy.mpmath.polynomials.polyroots(ctx,coeffs,maxsteps=50,cleanup=True,extraprec=10,error=False)
sympy.mpmath.polynomials.polyval(ctx,coeffs,x,derivative=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/eigen.py----------------------------------------
A:sympy.mpmath.matrices.eigen.rr->ctx.re(A[i, k])
A:sympy.mpmath.matrices.eigen.ii->ctx.im(A[i, k])
A:sympy.mpmath.matrices.eigen.f->abs(F)
A:sympy.mpmath.matrices.eigen.G->ctx.sqrt(H)
A:sympy.mpmath.matrices.eigen.A->A.copy().copy()
A:sympy.mpmath.matrices.eigen.T->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen.Q->A.copy().copy().copy()
A:sympy.mpmath.matrices.eigen.v->ctx.hypot(ctx.hypot(ctx.re(c), ctx.im(c)), ctx.hypot(ctx.re(s), ctx.im(s)))
A:sympy.mpmath.matrices.eigen.shift->abs(A[n1 - 1, n1 - 2])
A:sympy.mpmath.matrices.eigen.s->f(E[i])
A:sympy.mpmath.matrices.eigen.ER->eig_tr_r(ctx, A)
A:sympy.mpmath.matrices.eigen.unfl->ctx.ldexp(ctx.one, -ctx.prec * 30)
A:sympy.mpmath.matrices.eigen.smin->max(eps * abs(s), smlnum)
A:sympy.mpmath.matrices.eigen.rmax->max(rmax, abs(r))
A:sympy.mpmath.matrices.eigen.EL->eig_tr_l(ctx, A)
A:sympy.mpmath.matrices.eigen.n->len(E)
A:sympy.mpmath.matrices.eigen.c->f(E[j])
sympy.mpmath.eigen.Eigen(object)
sympy.mpmath.eigen.defun(f)
sympy.mpmath.eigen.eig(ctx,A,left=False,right=True,overwrite_a=False)
sympy.mpmath.eigen.eig_sort(ctx,E,EL=False,ER=False,f='real')
sympy.mpmath.eigen.eig_tr_l(ctx,A)
sympy.mpmath.eigen.eig_tr_r(ctx,A)
sympy.mpmath.eigen.hessenberg(ctx,A,overwrite_a=False)
sympy.mpmath.eigen.hessenberg_qr(ctx,A,Q)
sympy.mpmath.eigen.hessenberg_reduce_0(ctx,A,T)
sympy.mpmath.eigen.hessenberg_reduce_1(ctx,A,T)
sympy.mpmath.eigen.qr_step(ctx,n0,n1,A,Q,shift)
sympy.mpmath.eigen.schur(ctx,A,overwrite_a=False)
sympy.mpmath.matrices.eigen.Eigen(object)
sympy.mpmath.matrices.eigen.defun(f)
sympy.mpmath.matrices.eigen.eig(ctx,A,left=False,right=True,overwrite_a=False)
sympy.mpmath.matrices.eigen.eig_sort(ctx,E,EL=False,ER=False,f='real')
sympy.mpmath.matrices.eigen.eig_tr_l(ctx,A)
sympy.mpmath.matrices.eigen.eig_tr_r(ctx,A)
sympy.mpmath.matrices.eigen.hessenberg(ctx,A,overwrite_a=False)
sympy.mpmath.matrices.eigen.hessenberg_qr(ctx,A,Q)
sympy.mpmath.matrices.eigen.hessenberg_reduce_0(ctx,A,T)
sympy.mpmath.matrices.eigen.hessenberg_reduce_1(ctx,A,T)
sympy.mpmath.matrices.eigen.qr_step(ctx,n0,n1,A,Q,shift)
sympy.mpmath.matrices.eigen.schur(ctx,A,overwrite_a=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/matrices.py----------------------------------------
A:sympy.mpmath.matrices.matrices.convert->kwargs.get('force_type', self.ctx.convert)
A:sympy.mpmath.matrices.matrices.self.__rows->len(v)
A:sympy.mpmath.matrices.matrices.self.__cols->len(A[0])
A:sympy.mpmath.matrices.matrices.self[i, j]->convert(a)
A:sympy.mpmath.matrices.matrices.A->ctx.matrix(A)
A:sympy.mpmath.matrices.matrices.A[i, j]->convert(A[i, j])
A:sympy.mpmath.matrices.matrices.new->self.ctx.matrix(self.__rows, self.__cols)
A:sympy.mpmath.matrices.matrices.new[i, j]->self.ctx.fdot(((self[i, k], other[k, j]) for k in xrange(other.__rows)))
A:sympy.mpmath.matrices.matrices.string->str(self[i, j])
A:sympy.mpmath.matrices.matrices.maxlen[j]->max(len(string), maxlen[j])
A:sympy.mpmath.matrices.matrices.row[j]->elem.rjust(maxlen[j])
A:sympy.mpmath.matrices.matrices.a->repr(self[i, j])
A:sympy.mpmath.matrices.matrices.rows->property(__getrows, __setrows, doc='number of rows')
A:sympy.mpmath.matrices.matrices.columns->xrange(*key[1].indices(self.__cols))
A:sympy.mpmath.matrices.matrices.m->self.ctx.matrix(self.rows, 1)
A:sympy.mpmath.matrices.matrices.value->self.ctx.convert(value)
A:sympy.mpmath.matrices.matrices.z->self.copy()
A:sympy.mpmath.matrices.matrices.y->self.ctx.inverse(y)
A:sympy.mpmath.matrices.matrices.cols->property(__getcols, __setcols, doc='number of columns')
A:sympy.mpmath.matrices.matrices.T->property(transpose)
A:sympy.mpmath.matrices.matrices.H->property(transpose_conj)
A:sympy.mpmath.matrices.matrices.new.__data->self.__data.copy()
A:sympy.mpmath.matrices.matrices.ctx.matrix->type('matrix', (_matrix,), {})
A:sympy.mpmath.matrices.matrices.p->ctx.convert(p)
sympy.mpmath.MatrixMethods(ctx)
sympy.mpmath.MatrixMethods.diag(ctx,diagonal,**kwargs)
sympy.mpmath.MatrixMethods.extend(ctx,A,b)
sympy.mpmath.MatrixMethods.eye(ctx,n,**kwargs)
sympy.mpmath.MatrixMethods.hilbert(ctx,m,n=None)
sympy.mpmath.MatrixMethods.mnorm(ctx,A,p=1)
sympy.mpmath.MatrixMethods.norm(ctx,x,p=2)
sympy.mpmath.MatrixMethods.ones(ctx,*args,**kwargs)
sympy.mpmath.MatrixMethods.randmatrix(ctx,m,n=None,min=0,max=1,**kwargs)
sympy.mpmath.MatrixMethods.swap_row(ctx,A,i,j)
sympy.mpmath.MatrixMethods.zeros(ctx,*args,**kwargs)
sympy.mpmath._matrix(self,*args,**kwargs)
sympy.mpmath._matrix.__add__(self,other)
sympy.mpmath._matrix.__div__(self,other)
sympy.mpmath._matrix.__eq__(self,other)
sympy.mpmath._matrix.__get_element(self,key)
sympy.mpmath._matrix.__getcols(self)
sympy.mpmath._matrix.__getitem__(self,key)
sympy.mpmath._matrix.__getrows(self)
sympy.mpmath._matrix.__iter__(self)
sympy.mpmath._matrix.__len__(self)
sympy.mpmath._matrix.__mul__(self,other)
sympy.mpmath._matrix.__neg__(self)
sympy.mpmath._matrix.__nstr__(self,n=None,**kwargs)
sympy.mpmath._matrix.__pow__(self,other)
sympy.mpmath._matrix.__radd__(self,other)
sympy.mpmath._matrix.__repr__(self)
sympy.mpmath._matrix.__rmul__(self,other)
sympy.mpmath._matrix.__rsub__(self,other)
sympy.mpmath._matrix.__set_element(self,key,value)
sympy.mpmath._matrix.__setcols(self,value)
sympy.mpmath._matrix.__setitem__(self,key,value)
sympy.mpmath._matrix.__setrows(self,value)
sympy.mpmath._matrix.__str__(self)
sympy.mpmath._matrix.__sub__(self,other)
sympy.mpmath._matrix._toliststr(self,avoid_type=False)
sympy.mpmath._matrix.apply(self,f)
sympy.mpmath._matrix.column(self,n)
sympy.mpmath._matrix.conjugate(self)
sympy.mpmath._matrix.copy(self)
sympy.mpmath._matrix.tolist(self)
sympy.mpmath._matrix.transpose(self)
sympy.mpmath._matrix.transpose_conj(self)
sympy.mpmath.matrices.matrices.MatrixMethods(ctx)
sympy.mpmath.matrices.matrices.MatrixMethods.__init__(ctx)
sympy.mpmath.matrices.matrices.MatrixMethods.diag(ctx,diagonal,**kwargs)
sympy.mpmath.matrices.matrices.MatrixMethods.extend(ctx,A,b)
sympy.mpmath.matrices.matrices.MatrixMethods.eye(ctx,n,**kwargs)
sympy.mpmath.matrices.matrices.MatrixMethods.hilbert(ctx,m,n=None)
sympy.mpmath.matrices.matrices.MatrixMethods.mnorm(ctx,A,p=1)
sympy.mpmath.matrices.matrices.MatrixMethods.norm(ctx,x,p=2)
sympy.mpmath.matrices.matrices.MatrixMethods.ones(ctx,*args,**kwargs)
sympy.mpmath.matrices.matrices.MatrixMethods.randmatrix(ctx,m,n=None,min=0,max=1,**kwargs)
sympy.mpmath.matrices.matrices.MatrixMethods.swap_row(ctx,A,i,j)
sympy.mpmath.matrices.matrices.MatrixMethods.zeros(ctx,*args,**kwargs)
sympy.mpmath.matrices.matrices._matrix(self,*args,**kwargs)
sympy.mpmath.matrices.matrices._matrix.__add__(self,other)
sympy.mpmath.matrices.matrices._matrix.__div__(self,other)
sympy.mpmath.matrices.matrices._matrix.__eq__(self,other)
sympy.mpmath.matrices.matrices._matrix.__get_element(self,key)
sympy.mpmath.matrices.matrices._matrix.__getcols(self)
sympy.mpmath.matrices.matrices._matrix.__getitem__(self,key)
sympy.mpmath.matrices.matrices._matrix.__getrows(self)
sympy.mpmath.matrices.matrices._matrix.__init__(self,*args,**kwargs)
sympy.mpmath.matrices.matrices._matrix.__iter__(self)
sympy.mpmath.matrices.matrices._matrix.__len__(self)
sympy.mpmath.matrices.matrices._matrix.__mul__(self,other)
sympy.mpmath.matrices.matrices._matrix.__neg__(self)
sympy.mpmath.matrices.matrices._matrix.__nstr__(self,n=None,**kwargs)
sympy.mpmath.matrices.matrices._matrix.__pow__(self,other)
sympy.mpmath.matrices.matrices._matrix.__radd__(self,other)
sympy.mpmath.matrices.matrices._matrix.__repr__(self)
sympy.mpmath.matrices.matrices._matrix.__rmul__(self,other)
sympy.mpmath.matrices.matrices._matrix.__rsub__(self,other)
sympy.mpmath.matrices.matrices._matrix.__set_element(self,key,value)
sympy.mpmath.matrices.matrices._matrix.__setcols(self,value)
sympy.mpmath.matrices.matrices._matrix.__setitem__(self,key,value)
sympy.mpmath.matrices.matrices._matrix.__setrows(self,value)
sympy.mpmath.matrices.matrices._matrix.__str__(self)
sympy.mpmath.matrices.matrices._matrix.__sub__(self,other)
sympy.mpmath.matrices.matrices._matrix._toliststr(self,avoid_type=False)
sympy.mpmath.matrices.matrices._matrix.apply(self,f)
sympy.mpmath.matrices.matrices._matrix.column(self,n)
sympy.mpmath.matrices.matrices._matrix.conjugate(self)
sympy.mpmath.matrices.matrices._matrix.copy(self)
sympy.mpmath.matrices.matrices._matrix.tolist(self)
sympy.mpmath.matrices.matrices._matrix.transpose(self)
sympy.mpmath.matrices.matrices._matrix.transpose_conj(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/calculus.py----------------------------------------
A:sympy.mpmath.matrices.calculus.j->int(max(1, ctx.mag(ctx.mnorm(A, 'inf'))))
A:sympy.mpmath.matrices.calculus.den->ctx.eye(na)
A:sympy.mpmath.matrices.calculus.num->ctx.eye(na)
A:sympy.mpmath.matrices.calculus.x->ctx.eye(na)
A:sympy.mpmath.matrices.calculus.c->ctx.mpf(1)
A:sympy.mpmath.matrices.calculus.f->ctx.lu_solve_mat(den, num)
A:sympy.mpmath.matrices.calculus.A->ctx.matrix(A)
A:sympy.mpmath.matrices.calculus.res->ctx._exp_pade(A)
A:sympy.mpmath.matrices.calculus.B->ctx.sqrtm(B)
A:sympy.mpmath.matrices.calculus.d->ctx.det(A)
A:sympy.mpmath.matrices.calculus.Y->ctx._sqrtm_rot(A, _may_rotate - 1)
A:sympy.mpmath.matrices.calculus.mag1->ctx.mnorm(Y - Yprev, 'inf')
A:sympy.mpmath.matrices.calculus.mag2->ctx.mnorm(Y, 'inf')
A:sympy.mpmath.matrices.calculus.r->ctx.convert(r)
A:sympy.mpmath.matrices.calculus.y->int(r * 2)
A:sympy.mpmath.matrices.calculus.v->ctx.expm(r * ctx.logm(A))
sympy.mpmath.matrices.MatrixCalculusMethods(object)
sympy.mpmath.matrices.MatrixCalculusMethods._exp_pade(ctx,a)
sympy.mpmath.matrices.MatrixCalculusMethods._sqrtm_rot(ctx,A,_may_rotate)
sympy.mpmath.matrices.MatrixCalculusMethods.cosm(ctx,A)
sympy.mpmath.matrices.MatrixCalculusMethods.expm(ctx,A,method='taylor')
sympy.mpmath.matrices.MatrixCalculusMethods.logm(ctx,A)
sympy.mpmath.matrices.MatrixCalculusMethods.powm(ctx,A,r)
sympy.mpmath.matrices.MatrixCalculusMethods.sinm(ctx,A)
sympy.mpmath.matrices.MatrixCalculusMethods.sqrtm(ctx,A,_may_rotate=2)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods(object)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods._exp_pade(ctx,a)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods._sqrtm_rot(ctx,A,_may_rotate)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.cosm(ctx,A)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.expm(ctx,A,method='taylor')
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.logm(ctx,A)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.powm(ctx,A,r)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.sinm(ctx,A)
sympy.mpmath.matrices.calculus.MatrixCalculusMethods.sqrtm(ctx,A,_may_rotate=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/linalg.py----------------------------------------
A:sympy.mpmath.matrices.linalg.A->A.copy().copy()
A:sympy.mpmath.matrices.linalg.tol->ctx.absmin(ctx.mnorm(A, 1) * ctx.eps)
A:sympy.mpmath.matrices.linalg.s->ctx.fsum((A[i, j] ** 2 for i in xrange(j, m)))
A:sympy.mpmath.matrices.linalg.b->ctx.L_solve(A, b, p)
A:sympy.mpmath.matrices.linalg.x->ctx.U_solve(L.T, b)
A:sympy.mpmath.matrices.linalg.(A, p)->ctx.LU_decomp(A)
A:sympy.mpmath.matrices.linalg.r->ctx.matrix(a.rows, b.cols)
A:sympy.mpmath.matrices.linalg.dx->ctx.lu_solve(A, -r)
A:sympy.mpmath.matrices.linalg.L->ctx.cholesky(A)
A:sympy.mpmath.matrices.linalg.U->ctx.matrix(n)
A:sympy.mpmath.matrices.linalg.P->ctx.eye(n)
A:sympy.mpmath.matrices.linalg.e->ctx.unitvector(n, i)
A:sympy.mpmath.matrices.linalg.y->ctx.fsum((A[i, j] * A[i, k] for i in xrange(j + 1, m)))
A:sympy.mpmath.matrices.linalg.result->ctx.matrix(inv, **kwargs)
A:sympy.mpmath.matrices.linalg.(H, p, x, r)->ctx.householder(ctx.extend(A, b))
A:sympy.mpmath.matrices.linalg.res->ctx.norm(ctx.residual(A, x, b))
A:sympy.mpmath.matrices.linalg.c->ctx.lu_solve(a, b.column(i))
A:sympy.mpmath.matrices.linalg.L[j, j]->ctx.sqrt(s)
A:sympy.mpmath.matrices.linalg.t->ctx.fdot(it1, it2, conjugate=True)
A:sympy.mpmath.matrices.linalg.(R, p)->ctx.LU_decomp(A)
A:sympy.mpmath.matrices.linalg.cmplx->any((type(x) is ctx.mpc for x in A))
A:sympy.mpmath.matrices.linalg.tau->ctx.matrix(n, 1)
A:sympy.mpmath.matrices.linalg.one->ctx.mpf('1.0')
A:sympy.mpmath.matrices.linalg.zero->ctx.mpf('0.0')
A:sympy.mpmath.matrices.linalg.rzero->ctx.mpf('0.0')
A:sympy.mpmath.matrices.linalg.alphr->ctx.re(alpha)
A:sympy.mpmath.matrices.linalg.alphi->ctx.im(alpha)
A:sympy.mpmath.matrices.linalg.xnorm->abs(A[m - 1, j])
A:sympy.mpmath.matrices.linalg.beta->ctx.sqrt(alpha ** 2 + xnorm ** 2)
A:sympy.mpmath.matrices.linalg.tau[j]->ctx.mpc((beta - alphr) / beta, -alphi / beta)
A:sympy.mpmath.matrices.linalg.A[j, j]->ctx.mpc(beta, '0.0')
A:sympy.mpmath.matrices.linalg.R->A.copy().copy().copy()
sympy.mpmath.linalg.LinearAlgebraMethods(object)
sympy.mpmath.linalg.LinearAlgebraMethods.LU_decomp(ctx,A,overwrite=False,use_cache=True)
sympy.mpmath.linalg.LinearAlgebraMethods.L_solve(ctx,L,b,p=None)
sympy.mpmath.linalg.LinearAlgebraMethods.U_solve(ctx,U,y)
sympy.mpmath.linalg.LinearAlgebraMethods.cholesky(ctx,A,tol=None)
sympy.mpmath.linalg.LinearAlgebraMethods.cholesky_solve(ctx,A,b,**kwargs)
sympy.mpmath.linalg.LinearAlgebraMethods.cond(ctx,A,norm=None)
sympy.mpmath.linalg.LinearAlgebraMethods.det(ctx,A)
sympy.mpmath.linalg.LinearAlgebraMethods.householder(ctx,A)
sympy.mpmath.linalg.LinearAlgebraMethods.improve_solution(ctx,A,x,b,maxsteps=1)
sympy.mpmath.linalg.LinearAlgebraMethods.inverse(ctx,A,**kwargs)
sympy.mpmath.linalg.LinearAlgebraMethods.lu(ctx,A)
sympy.mpmath.linalg.LinearAlgebraMethods.lu_solve(ctx,A,b,**kwargs)
sympy.mpmath.linalg.LinearAlgebraMethods.lu_solve_mat(ctx,a,b)
sympy.mpmath.linalg.LinearAlgebraMethods.qr(ctx,A,mode='full',edps=10)
sympy.mpmath.linalg.LinearAlgebraMethods.qr_solve(ctx,A,b,norm=None,**kwargs)
sympy.mpmath.linalg.LinearAlgebraMethods.residual(ctx,A,x,b,**kwargs)
sympy.mpmath.linalg.LinearAlgebraMethods.unitvector(ctx,n,i)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods(object)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.LU_decomp(ctx,A,overwrite=False,use_cache=True)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.L_solve(ctx,L,b,p=None)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.U_solve(ctx,U,y)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.cholesky(ctx,A,tol=None)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.cholesky_solve(ctx,A,b,**kwargs)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.cond(ctx,A,norm=None)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.det(ctx,A)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.householder(ctx,A)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.improve_solution(ctx,A,x,b,maxsteps=1)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.inverse(ctx,A,**kwargs)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.lu(ctx,A)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.lu_solve(ctx,A,b,**kwargs)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.lu_solve_mat(ctx,a,b)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.qr(ctx,A,mode='full',edps=10)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.qr_solve(ctx,A,b,norm=None,**kwargs)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.residual(ctx,A,x,b,**kwargs)
sympy.mpmath.matrices.linalg.LinearAlgebraMethods.unitvector(ctx,n,i)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/matrices/eigen_symmetric.py----------------------------------------
A:sympy.mpmath.matrices.eigen_symmetric.G->ctx.sqrt(H)
A:sympy.mpmath.matrices.eigen_symmetric.f->ctx.conj(rbeta[i])
A:sympy.mpmath.matrices.eigen_symmetric.rr->ctx.re(A[k, i])
A:sympy.mpmath.matrices.eigen_symmetric.ii->ctx.im(A[k, i])
A:sympy.mpmath.matrices.eigen_symmetric.D[i]->ctx.re(A[i, i])
A:sympy.mpmath.matrices.eigen_symmetric.n->len(d)
A:sympy.mpmath.matrices.eigen_symmetric.r->ctx.hypot(s, 1)
A:sympy.mpmath.matrices.eigen_symmetric.A->A.copy().copy()
A:sympy.mpmath.matrices.eigen_symmetric.d->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.e->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.t->ctx.zeros(A.rows, 1)
A:sympy.mpmath.matrices.eigen_symmetric.B->ctx.eye(A.rows)
A:sympy.mpmath.matrices.eigen_symmetric.iscomplex->any((type(x) is ctx.mpc for x in A))
A:sympy.mpmath.matrices.eigen_symmetric.z->ctx.hypot(f, h)
A:sympy.mpmath.matrices.eigen_symmetric.e[i]->ctx.sqrt(4 * j * (j + alpha) * (j + beta) * (j + ab) / ((abi * abi - 1) * abi * abi))
A:sympy.mpmath.matrices.eigen_symmetric.w->qtype(d, e)
A:sympy.mpmath.matrices.eigen_symmetric.e[0]->ctx.sqrt(4 * (1 + alpha) * (1 + beta) / ((abi + 1) * (abi * abi)))
A:sympy.mpmath.matrices.eigen_symmetric.alpha->ctx.mpf(alpha)
A:sympy.mpmath.matrices.eigen_symmetric.beta->ctx.mpf(beta)
A:sympy.mpmath.matrices.eigen_symmetric.S->svd_c_raw(ctx, A, V, calc_u=True)
A:sympy.mpmath.matrices.eigen_symmetric.work->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.anorm->max(anorm, ctx.fabs(S[i]) + ctx.fabs(dwork[i]))
A:sympy.mpmath.matrices.eigen_symmetric.h->ctx.hypot(f, g)
A:sympy.mpmath.matrices.eigen_symmetric.g->ctx.hypot(f, 1)
A:sympy.mpmath.matrices.eigen_symmetric.s->ctx.fabs(S[i])
A:sympy.mpmath.matrices.eigen_symmetric.c->ctx.fabs(S[j])
A:sympy.mpmath.matrices.eigen_symmetric.lbeta->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.rbeta->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.dwork->ctx.zeros(n, 1)
A:sympy.mpmath.matrices.eigen_symmetric.ar->ctx.re(A[i, k])
A:sympy.mpmath.matrices.eigen_symmetric.ai->ctx.im(A[i, k])
A:sympy.mpmath.matrices.eigen_symmetric.V->ctx.zeros(n, n)
A:sympy.mpmath.matrices.eigen_symmetric.A0->ctx.zeros(m, m)
sympy.mpmath.eigen_symmetric.c_he_tridiag_0(ctx,A,D,E,T)
sympy.mpmath.eigen_symmetric.c_he_tridiag_1(ctx,A,T)
sympy.mpmath.eigen_symmetric.c_he_tridiag_2(ctx,A,T,B)
sympy.mpmath.eigen_symmetric.eigh(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.eigen_symmetric.eighe(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.eigen_symmetric.eigsy(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.eigen_symmetric.gauss_quadrature(ctx,n,qtype='legendre',alpha=0,beta=0)
sympy.mpmath.eigen_symmetric.r_sy_tridiag(ctx,A,D,E,calc_ev=True)
sympy.mpmath.eigen_symmetric.svd(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.eigen_symmetric.svd_c(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.eigen_symmetric.svd_c_raw(ctx,A,V=False,calc_u=False)
sympy.mpmath.eigen_symmetric.svd_r(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.eigen_symmetric.svd_r_raw(ctx,A,V=False,calc_u=False)
sympy.mpmath.eigen_symmetric.tridiag_eigen(ctx,d,e,z=False)
sympy.mpmath.matrices.eigen_symmetric.c_he_tridiag_0(ctx,A,D,E,T)
sympy.mpmath.matrices.eigen_symmetric.c_he_tridiag_1(ctx,A,T)
sympy.mpmath.matrices.eigen_symmetric.c_he_tridiag_2(ctx,A,T,B)
sympy.mpmath.matrices.eigen_symmetric.eigh(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.eighe(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.eigsy(ctx,A,eigvals_only=False,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.gauss_quadrature(ctx,n,qtype='legendre',alpha=0,beta=0)
sympy.mpmath.matrices.eigen_symmetric.r_sy_tridiag(ctx,A,D,E,calc_ev=True)
sympy.mpmath.matrices.eigen_symmetric.svd(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.svd_c(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.svd_c_raw(ctx,A,V=False,calc_u=False)
sympy.mpmath.matrices.eigen_symmetric.svd_r(ctx,A,full_matrices=False,compute_uv=True,overwrite_a=False)
sympy.mpmath.matrices.eigen_symmetric.svd_r_raw(ctx,A,V=False,calc_u=False)
sympy.mpmath.matrices.eigen_symmetric.tridiag_eigen(ctx,d,e,z=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/zetazeros.py----------------------------------------
A:sympy.mpmath.functions.zetazeros.t0->ctx.grampoint(a)
A:sympy.mpmath.functions.zetazeros.t1->ctx.grampoint(b)
A:sympy.mpmath.functions.zetazeros.v0->ctx._fp.siegelz(t0)
A:sympy.mpmath.functions.zetazeros.v1->ctx._fp.siegelz(t1)
A:sympy.mpmath.functions.zetazeros.(t, v, b)->compute_triple_tvb(ctx, m2)
A:sympy.mpmath.functions.zetazeros.variations->count_variations(V)
A:sympy.mpmath.functions.zetazeros.alpha->ctx.sqrt(u / v)
A:sympy.mpmath.functions.zetazeros.w->ctx.siegelz(b)
A:sympy.mpmath.functions.zetazeros.t->separate_my_zero(ctx, my_zero_number, zero_number_block, T, V, prec)
A:sympy.mpmath.functions.zetazeros.v->ctx.mpc(0.5, t)
A:sympy.mpmath.functions.zetazeros.wpz->wpzeros(n * ctx.log(n))
A:sympy.mpmath.functions.zetazeros.r->ctx.findroot(lambda x: ctx.siegelz(x), (t0, t1), solver='illinois', verbose=False)
A:sympy.mpmath.functions.zetazeros.z->ctx.mpc(0.5, ctx.im(znew))
A:sympy.mpmath.functions.zetazeros.g->ctx.grampoint(n - 100)
A:sympy.mpmath.functions.zetazeros.lg->len(goodpoints)
A:sympy.mpmath.functions.zetazeros.N->int(N)
A:sympy.mpmath.functions.zetazeros.sb->sure_number_block(ctx, n)
A:sympy.mpmath.functions.zetazeros.(A, B, separated)->separate_zeros_in_block(ctx, zn, T, V, limitloop=ITERATION_LIMIT, fp_tolerance=fp_tolerance)
A:sympy.mpmath.functions.zetazeros.(tr, vr, br)->compute_triple_tvb(ctx, r)
A:sympy.mpmath.functions.zetazeros.ar->Tf.index(tr)
A:sympy.mpmath.functions.zetazeros.(ts, vs, bs)->compute_triple_tvb(ctx, s)
A:sympy.mpmath.functions.zetazeros.as1->Tf.index(ts)
A:sympy.mpmath.functions.zetazeros.(tq, vq, bq)->compute_triple_tvb(ctx, q)
A:sympy.mpmath.functions.zetazeros.aq->Tf.index(tq)
A:sympy.mpmath.functions.zetazeros.(tt, vt, bt)->compute_triple_tvb(ctx, t)
A:sympy.mpmath.functions.zetazeros.at->Tf.index(tt)
A:sympy.mpmath.functions.zetazeros.(t0, v0, b0)->compute_triple_tvb(ctx, a)
A:sympy.mpmath.functions.zetazeros.(t1, v1, b1)->compute_triple_tvb(ctx, n)
A:sympy.mpmath.functions.zetazeros.lgT->len(T)
A:sympy.mpmath.functions.zetazeros.count->count_variations(L)
A:sympy.mpmath.functions.zetazeros.n->count_to(ctx, t, T, V)
A:sympy.mpmath.functions.zetazeros.(wpz, fp_tolerance)->comp_fp_tolerance(ctx, k)
A:sympy.mpmath.functions.zetazeros.(my_zero_number, block, T, V)->search_supergood_block(ctx, n, fp_tolerance)
A:sympy.mpmath.functions.zetazeros.(T, V, separated)->separate_zeros_in_block(ctx, zero_number_block, T, V, limitloop=ctx.inf, fp_tolerance=fp_tolerance)
A:sympy.mpmath.functions.zetazeros.pattern->pattern_construct(ctx, block, T, V)
A:sympy.mpmath.functions.zetazeros.prec->max(wpinitial, wpz)
A:sympy.mpmath.functions.zetazeros.h->int(h)
A:sympy.mpmath.functions.zetazeros.a->ctx.siegelz(t)
A:sympy.mpmath.functions.zetazeros.x->gram_index(ctx, t)
A:sympy.mpmath.functions.zetazeros.k->int(ctx.floor(x))
A:sympy.mpmath.functions.zetazeros.Rblock->search_supergood_block(ctx, k + 2, fp_tolerance)
sympy.mpmath.functions.zetazeros.backlunds(ctx,t)
sympy.mpmath.functions.zetazeros.comp_fp_tolerance(ctx,n)
sympy.mpmath.functions.zetazeros.compute_triple_tvb(ctx,n)
sympy.mpmath.functions.zetazeros.count_to(ctx,t,T,V)
sympy.mpmath.functions.zetazeros.count_variations(V)
sympy.mpmath.functions.zetazeros.find_rosser_block_zero(ctx,n)
sympy.mpmath.functions.zetazeros.gram_index(ctx,t)
sympy.mpmath.functions.zetazeros.nzeros(ctx,t)
sympy.mpmath.functions.zetazeros.pattern_construct(ctx,block,T,V)
sympy.mpmath.functions.zetazeros.search_supergood_block(ctx,n,fp_tolerance)
sympy.mpmath.functions.zetazeros.separate_my_zero(ctx,my_zero_number,zero_number_block,T,V,prec)
sympy.mpmath.functions.zetazeros.separate_zeros_in_block(ctx,zero_number_block,T,V,limitloop=None,fp_tolerance=None)
sympy.mpmath.functions.zetazeros.sure_number_block(ctx,n)
sympy.mpmath.functions.zetazeros.wpzeros(t)
sympy.mpmath.functions.zetazeros.zetazero(ctx,n,info=False,round=True)
sympy.mpmath.zetazeros.backlunds(ctx,t)
sympy.mpmath.zetazeros.comp_fp_tolerance(ctx,n)
sympy.mpmath.zetazeros.compute_triple_tvb(ctx,n)
sympy.mpmath.zetazeros.count_to(ctx,t,T,V)
sympy.mpmath.zetazeros.count_variations(V)
sympy.mpmath.zetazeros.find_rosser_block_zero(ctx,n)
sympy.mpmath.zetazeros.gram_index(ctx,t)
sympy.mpmath.zetazeros.nzeros(ctx,t)
sympy.mpmath.zetazeros.pattern_construct(ctx,block,T,V)
sympy.mpmath.zetazeros.search_supergood_block(ctx,n,fp_tolerance)
sympy.mpmath.zetazeros.separate_my_zero(ctx,my_zero_number,zero_number_block,T,V,prec)
sympy.mpmath.zetazeros.separate_zeros_in_block(ctx,zero_number_block,T,V,limitloop=None,fp_tolerance=None)
sympy.mpmath.zetazeros.sure_number_block(ctx,n)
sympy.mpmath.zetazeros.wpzeros(t)
sympy.mpmath.zetazeros.zetazero(ctx,n,info=False,round=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/theta.py----------------------------------------
A:sympy.mpmath.functions.theta.x->ctx.to_fixed(ctx._re(q), wp)
A:sympy.mpmath.functions.theta.s->ctx.mpc(sre, sim)
A:sympy.mpmath.functions.theta.xre->ctx.to_fixed(ctx._re(q), wp)
A:sympy.mpmath.functions.theta.xim->ctx.to_fixed(ctx._im(q), wp)
A:sympy.mpmath.functions.theta.sre->ctx.ldexp(sre, -wp)
A:sympy.mpmath.functions.theta.sim->ctx.ldexp(sim, -wp)
A:sympy.mpmath.functions.theta.(c1, s1)->ctx.cos_sin(2 * z)
A:sympy.mpmath.functions.theta.cnc1->ctx.to_fixed(c1, wp)
A:sympy.mpmath.functions.theta.sns1->ctx.to_fixed(s1, wp)
A:sympy.mpmath.functions.theta.cnrec1re->ctx.to_fixed(ctx._re(c1), wp)
A:sympy.mpmath.functions.theta.cnimc1im->ctx.to_fixed(ctx._im(c1), wp)
A:sympy.mpmath.functions.theta.snres1re->ctx.to_fixed(ctx._re(s1), wp)
A:sympy.mpmath.functions.theta.snims1im->ctx.to_fixed(ctx._im(s1), wp)
A:sympy.mpmath.functions.theta.c1->ctx.to_fixed(c1, wp)
A:sympy.mpmath.functions.theta.s1->ctx.to_fixed(s1, wp)
A:sympy.mpmath.functions.theta.nn0->int(-ctx._im(z) / abs(ctx._re(ctx.log(q))))
A:sympy.mpmath.functions.theta.e2->ctx.expj(-2 * z)
A:sympy.mpmath.functions.theta.ee0->ctx.expj(2 * n * z)
A:sympy.mpmath.functions.theta.aterm->abs(a)
A:sympy.mpmath.functions.theta.z->ctx.convert(z)
A:sympy.mpmath.functions.theta.q->ctx.convert(q)
A:sympy.mpmath.functions.theta.M->ctx.mag(z)
A:sympy.mpmath.functions.theta.res->ctx._djacobi_theta3(z, -q, nd)
A:sympy.mpmath.functions.theta.nd->int(derivative)
sympy.mpmath.functions.theta._djacobi_theta2(ctx,z,q,nd)
sympy.mpmath.functions.theta._djacobi_theta2a(ctx,z,q,nd)
sympy.mpmath.functions.theta._djacobi_theta3(ctx,z,q,nd)
sympy.mpmath.functions.theta._djacobi_theta3a(ctx,z,q,nd)
sympy.mpmath.functions.theta._djtheta(ctx,n,z,q,derivative=1)
sympy.mpmath.functions.theta._jacobi_theta2(ctx,z,q)
sympy.mpmath.functions.theta._jacobi_theta2a(ctx,z,q)
sympy.mpmath.functions.theta._jacobi_theta3(ctx,z,q)
sympy.mpmath.functions.theta._jacobi_theta3a(ctx,z,q)
sympy.mpmath.functions.theta.jtheta(ctx,n,z,q,derivative=0)
sympy.mpmath.theta._djacobi_theta2(ctx,z,q,nd)
sympy.mpmath.theta._djacobi_theta2a(ctx,z,q,nd)
sympy.mpmath.theta._djacobi_theta3(ctx,z,q,nd)
sympy.mpmath.theta._djacobi_theta3a(ctx,z,q,nd)
sympy.mpmath.theta._djtheta(ctx,n,z,q,derivative=1)
sympy.mpmath.theta._jacobi_theta2(ctx,z,q)
sympy.mpmath.theta._jacobi_theta2a(ctx,z,q)
sympy.mpmath.theta._jacobi_theta3(ctx,z,q)
sympy.mpmath.theta._jacobi_theta3a(ctx,z,q)
sympy.mpmath.theta.jtheta(ctx,n,z,q,derivative=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/bessel.py----------------------------------------
A:sympy.mpmath.functions.bessel.n->ctx.convert(n)
A:sympy.mpmath.functions.bessel.n_isint->ctx.isint(n)
A:sympy.mpmath.functions.bessel.z->ctx.convert(z)
A:sympy.mpmath.functions.bessel.M->ctx.mag(z)
A:sympy.mpmath.functions.bessel.d->ctx.convert(derivative)
A:sympy.mpmath.functions.bessel.v->ctx.mpf(v)
A:sympy.mpmath.functions.bessel.r->ctx.re(n)
A:sympy.mpmath.functions.bessel.w->ctx.square_exp_arg(z, mult=-0.25)
A:sympy.mpmath.functions.bessel.(m, d)->ctx.nint_distance(n)
A:sympy.mpmath.functions.bessel.(cos, sin)->ctx.cospi_sinpi(0.75 * n)
A:sympy.mpmath.functions.bessel.x->ctx.fmul(-0.5, z, exact=True)
A:sympy.mpmath.functions.bessel.g->abs(ctx.re(m))
A:sympy.mpmath.functions.bessel.(a, atype)->ctx._convert_param(a)
A:sympy.mpmath.functions.bessel.(b, btype)->ctx._convert_param(b)
A:sympy.mpmath.functions.bessel.(bb, bbtype)->ctx._convert_param(bb)
A:sympy.mpmath.functions.bessel.(c, s)->ctx.cospi_sinpi(u)
A:sympy.mpmath.functions.bessel.(cos1, sin1)->ctx.cospi_sinpi(0.75 * n)
A:sympy.mpmath.functions.bessel.(cos2, sin2)->ctx.cospi_sinpi(0.25 * n)
A:sympy.mpmath.functions.bessel.(p, v)->cache.get(name, (-1, 0))
A:sympy.mpmath.functions.bessel.(n, ntype)->ctx._convert_param(derivative)
A:sympy.mpmath.functions.bessel.extraprec->max(0, int(1.5 * ctx.mag(z)))
A:sympy.mpmath.functions.bessel.C2->ctx.coulombc(l2, eta)
A:sympy.mpmath.functions.bessel.C1->ctx.coulombc(l, eta)
A:sympy.mpmath.functions.bessel.k->int(k)
A:sympy.mpmath.functions.bessel.G3->ctx.loggamma(2 * l + 2)
A:sympy.mpmath.functions.bessel.G1->ctx.loggamma(1 + l + ctx.j * eta)
A:sympy.mpmath.functions.bessel.G2->ctx.loggamma(1 + l - ctx.j * eta)
A:sympy.mpmath.functions.bessel.jwz->ctx.fmul(jw, z, exact=True)
A:sympy.mpmath.functions.bessel.jwz2->ctx.fmul(jwz, -2, exact=True)
A:sympy.mpmath.functions.bessel.C->ctx.coulombc(l, eta)
A:sympy.mpmath.functions.bessel.l->ctx._re(l)
A:sympy.mpmath.functions.bessel.chi->ctx._coulomb_chi(l, eta)
A:sympy.mpmath.functions.bessel.s->ctx.sin(chi)
A:sympy.mpmath.functions.bessel.c->ctx.cos(chi)
A:sympy.mpmath.functions.bessel.u->ctx.exp(jw * z)
A:sympy.mpmath.functions.bessel.err->abs(terms[-1])
A:sympy.mpmath.functions.bessel.points->ctx.linspace(a, b, N)
A:sympy.mpmath.functions.bessel.m->int(m)
A:sympy.mpmath.functions.bessel.prime->int(prime)
A:sympy.mpmath.functions.bessel.(r, err)->mcmahon(ctx, kind, prime, v, m)
A:sympy.mpmath.functions.bessel.(r1, err)->mcmahon(ctx, kind, prime, v, n)
A:sympy.mpmath.functions.bessel.(r2, err2)->mcmahon(ctx, kind, prime, v, n + 1)
A:sympy.mpmath.functions.bessel.intervals->generalized_bisection(ctx, f, low, 0.5 * (r1 + r2), n)
sympy.mpmath.bessel._airy_zero(ctx,which,k,derivative,complex=False)
sympy.mpmath.bessel._airyai_C1(ctx)
sympy.mpmath.bessel._airyai_C2(ctx)
sympy.mpmath.bessel._airybi_C1(ctx)
sympy.mpmath.bessel._airybi_C2(ctx)
sympy.mpmath.bessel._airybi_n2_inf(ctx)
sympy.mpmath.bessel._airyderiv_0(ctx,z,n,ntype,which)
sympy.mpmath.bessel._anger(ctx,which,v,z,**kwargs)
sympy.mpmath.bessel._coulomb_chi(ctx,l,eta,_cache={})
sympy.mpmath.bessel._scorer(ctx,z,which,kwargs)
sympy.mpmath.bessel.airyai(ctx,z,derivative=0,**kwargs)
sympy.mpmath.bessel.airyaizero(ctx,k,derivative=0)
sympy.mpmath.bessel.airybi(ctx,z,derivative=0,**kwargs)
sympy.mpmath.bessel.airybizero(ctx,k,derivative=0,complex=False)
sympy.mpmath.bessel.angerj(ctx,v,z,**kwargs)
sympy.mpmath.bessel.bei(ctx,n,z,**kwargs)
sympy.mpmath.bessel.ber(ctx,n,z,**kwargs)
sympy.mpmath.bessel.bessel_zero(ctx,kind,prime,v,m,isoltol=0.01,_interval_cache={})
sympy.mpmath.bessel.besseli(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.bessel.besselj(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.bessel.besseljzero(ctx,v,m,derivative=0)
sympy.mpmath.bessel.besselk(ctx,n,z,**kwargs)
sympy.mpmath.bessel.bessely(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.bessel.besselyzero(ctx,v,m,derivative=0)
sympy.mpmath.bessel.c_memo(f)
sympy.mpmath.bessel.coulombc(ctx,l,eta,_cache={})
sympy.mpmath.bessel.coulombf(ctx,l,eta,z,w=1,chop=True,**kwargs)
sympy.mpmath.bessel.coulombg(ctx,l,eta,z,w=1,chop=True,**kwargs)
sympy.mpmath.bessel.find_in_interval(ctx,f,ab)
sympy.mpmath.bessel.generalized_bisection(ctx,f,a,b,n)
sympy.mpmath.bessel.hankel1(ctx,n,x,**kwargs)
sympy.mpmath.bessel.hankel2(ctx,n,x,**kwargs)
sympy.mpmath.bessel.hyperu(ctx,a,b,z,**kwargs)
sympy.mpmath.bessel.j0(ctx,x)
sympy.mpmath.bessel.j1(ctx,x)
sympy.mpmath.bessel.kei(ctx,n,z,**kwargs)
sympy.mpmath.bessel.ker(ctx,n,z,**kwargs)
sympy.mpmath.bessel.lommels1(ctx,u,v,z,**kwargs)
sympy.mpmath.bessel.lommels2(ctx,u,v,z,**kwargs)
sympy.mpmath.bessel.mcmahon(ctx,kind,prime,v,m)
sympy.mpmath.bessel.scorergi(ctx,z,**kwargs)
sympy.mpmath.bessel.scorerhi(ctx,z,**kwargs)
sympy.mpmath.bessel.struveh(ctx,n,z,**kwargs)
sympy.mpmath.bessel.struvel(ctx,n,z,**kwargs)
sympy.mpmath.bessel.webere(ctx,v,z,**kwargs)
sympy.mpmath.bessel.whitm(ctx,k,m,z,**kwargs)
sympy.mpmath.bessel.whitw(ctx,k,m,z,**kwargs)
sympy.mpmath.functions.bessel._airy_zero(ctx,which,k,derivative,complex=False)
sympy.mpmath.functions.bessel._airyai_C1(ctx)
sympy.mpmath.functions.bessel._airyai_C2(ctx)
sympy.mpmath.functions.bessel._airybi_C1(ctx)
sympy.mpmath.functions.bessel._airybi_C2(ctx)
sympy.mpmath.functions.bessel._airybi_n2_inf(ctx)
sympy.mpmath.functions.bessel._airyderiv_0(ctx,z,n,ntype,which)
sympy.mpmath.functions.bessel._anger(ctx,which,v,z,**kwargs)
sympy.mpmath.functions.bessel._coulomb_chi(ctx,l,eta,_cache={})
sympy.mpmath.functions.bessel._scorer(ctx,z,which,kwargs)
sympy.mpmath.functions.bessel.airyai(ctx,z,derivative=0,**kwargs)
sympy.mpmath.functions.bessel.airyaizero(ctx,k,derivative=0)
sympy.mpmath.functions.bessel.airybi(ctx,z,derivative=0,**kwargs)
sympy.mpmath.functions.bessel.airybizero(ctx,k,derivative=0,complex=False)
sympy.mpmath.functions.bessel.angerj(ctx,v,z,**kwargs)
sympy.mpmath.functions.bessel.bei(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.ber(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.bessel_zero(ctx,kind,prime,v,m,isoltol=0.01,_interval_cache={})
sympy.mpmath.functions.bessel.besseli(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.functions.bessel.besselj(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.functions.bessel.besseljzero(ctx,v,m,derivative=0)
sympy.mpmath.functions.bessel.besselk(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.bessely(ctx,n,z,derivative=0,**kwargs)
sympy.mpmath.functions.bessel.besselyzero(ctx,v,m,derivative=0)
sympy.mpmath.functions.bessel.c_memo(f)
sympy.mpmath.functions.bessel.coulombc(ctx,l,eta,_cache={})
sympy.mpmath.functions.bessel.coulombf(ctx,l,eta,z,w=1,chop=True,**kwargs)
sympy.mpmath.functions.bessel.coulombg(ctx,l,eta,z,w=1,chop=True,**kwargs)
sympy.mpmath.functions.bessel.find_in_interval(ctx,f,ab)
sympy.mpmath.functions.bessel.generalized_bisection(ctx,f,a,b,n)
sympy.mpmath.functions.bessel.hankel1(ctx,n,x,**kwargs)
sympy.mpmath.functions.bessel.hankel2(ctx,n,x,**kwargs)
sympy.mpmath.functions.bessel.hyperu(ctx,a,b,z,**kwargs)
sympy.mpmath.functions.bessel.j0(ctx,x)
sympy.mpmath.functions.bessel.j1(ctx,x)
sympy.mpmath.functions.bessel.kei(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.ker(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.lommels1(ctx,u,v,z,**kwargs)
sympy.mpmath.functions.bessel.lommels2(ctx,u,v,z,**kwargs)
sympy.mpmath.functions.bessel.mcmahon(ctx,kind,prime,v,m)
sympy.mpmath.functions.bessel.scorergi(ctx,z,**kwargs)
sympy.mpmath.functions.bessel.scorerhi(ctx,z,**kwargs)
sympy.mpmath.functions.bessel.struveh(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.struvel(ctx,n,z,**kwargs)
sympy.mpmath.functions.bessel.webere(ctx,v,z,**kwargs)
sympy.mpmath.functions.bessel.whitm(ctx,k,m,z,**kwargs)
sympy.mpmath.functions.bessel.whitw(ctx,k,m,z,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/hypergeometric.py----------------------------------------
A:sympy.mpmath.functions.hypergeometric.(n, d)->ctx.nint_distance(x)
A:sympy.mpmath.functions.hypergeometric.verbose->kwargs.get('verbose', False)
A:sympy.mpmath.functions.hypergeometric.maxprec->kwargs.get('maxprec', 100 * orig)
A:sympy.mpmath.functions.hypergeometric.zeroprec->kwargs.get('zeroprec')
A:sympy.mpmath.functions.hypergeometric.infprec->kwargs.get('infprec')
A:sympy.mpmath.functions.hypergeometric.terms->function(*params)
A:sympy.mpmath.functions.hypergeometric.(perturb, recompute, extraprec, discard)->_check_need_perturb(ctx, terms, orig, discard_known_zeros)
A:sympy.mpmath.functions.hypergeometric.hmag->int(ctx.prec * 0.3)
A:sympy.mpmath.functions.hypergeometric.h->ctx.ldexp(ctx.one, -hmag)
A:sympy.mpmath.functions.hypergeometric.v->ctx.re(v)
A:sympy.mpmath.functions.hypergeometric.sumvalue->ctx.fsum(evaluated_terms)
A:sympy.mpmath.functions.hypergeometric.max_magnitude->max(term_magnitudes)
A:sympy.mpmath.functions.hypergeometric.sum_magnitude->ctx.mag(sumvalue)
A:sympy.mpmath.functions.hypergeometric.increment->min(max(cancellation, orig // 2), max(extraprec, orig))
A:sympy.mpmath.functions.hypergeometric.z->ctx.convert(z)
A:sympy.mpmath.functions.hypergeometric.p->len(a_s)
A:sympy.mpmath.functions.hypergeometric.q->len(b_s)
A:sympy.mpmath.functions.hypergeometric.(coeffs, types)->zip(*a_s + b_s)
A:sympy.mpmath.functions.hypergeometric.magz->ctx.mag(z)
A:sympy.mpmath.functions.hypergeometric.w->ctx.sinpi(b)
A:sympy.mpmath.functions.hypergeometric.E->ctx.expjpi(a)
A:sympy.mpmath.functions.hypergeometric.d->ctx.mpf(0)
A:sympy.mpmath.functions.hypergeometric.e->ctx.mpf(1)
A:sympy.mpmath.functions.hypergeometric.f->ctx.mpf(0)
A:sympy.mpmath.functions.hypergeometric.maxmag->max(maxmag, mag(f1))
A:sympy.mpmath.functions.hypergeometric.absz->abs(z)
A:sympy.mpmath.functions.hypergeometric.(a_s, a_types)->zip(*a_s)
A:sympy.mpmath.functions.hypergeometric.(b_s, b_types)->zip(*b_s)
A:sympy.mpmath.functions.hypergeometric.a_s->list(c_s[:p])
A:sympy.mpmath.functions.hypergeometric.b_s->list(c_s[p:])
A:sympy.mpmath.functions.hypergeometric.S->ctx.nsum(term, [0, ctx.inf], verbose=kwargs.get('verbose'), strict=kwargs.get('strict', True))
A:sympy.mpmath.functions.hypergeometric.initial->ctx.gammaprod([b2 - a3, b1 - a3, a1, a2], [b2 - a3, b1 - a3, 1, u])
A:sympy.mpmath.functions.hypergeometric.k->int(kk)
A:sympy.mpmath.functions.hypergeometric.t->term(k)
A:sympy.mpmath.functions.hypergeometric.sum_method->kwargs.get('sum_method', 'r+s+e')
A:sympy.mpmath.functions.hypergeometric.C->ctx.gammaprod([b for b in b_s], [a for a in a_s])
A:sympy.mpmath.functions.hypergeometric.head->ctx.fsum((term(k) for k in xrange(trunc)))
A:sympy.mpmath.functions.hypergeometric.(tail, err)->ctx.sumem(term, [trunc, ctx.inf], tol=tol, adiffs=hyper_diffs(trunc), verbose=kwargs.get('verbose'), error=True, _fast_abort=True)
A:sympy.mpmath.functions.hypergeometric.negz->ctx.fneg(z, exact=True)
A:sympy.mpmath.functions.hypergeometric.kwargs['maxterms']->kwargs.get('maxterms', ctx.prec)
A:sympy.mpmath.functions.hypergeometric.tol->kwargs.get('asymp_tol', ctx.eps / 4)
A:sympy.mpmath.functions.hypergeometric.contour->kwargs.get('contour')
A:sympy.mpmath.functions.hypergeometric.quad_kwargs->kwargs.get('quad_kwargs', {})
A:sympy.mpmath.functions.hypergeometric.(I, err)->ctx.quad(g, contour, error=True, **quad_kwargs)
A:sympy.mpmath.functions.hypergeometric.kwargsb->kwargs.copy()
A:sympy.mpmath.functions.hypergeometric.kwargsb['maxterms']->kwargs.copy().get('maxterms', ctx.prec)
A:sympy.mpmath.functions.hypergeometric.n->len(an)
A:sympy.mpmath.functions.hypergeometric.m->ctx.mpf(0)
A:sympy.mpmath.functions.hypergeometric.x->ctx.convert(x)
A:sympy.mpmath.functions.hypergeometric.y->ctx.convert(y)
A:sympy.mpmath.functions.hypergeometric.args->list(args)
A:sympy.mpmath.functions.hypergeometric.a_m->parse(a, 'm')
A:sympy.mpmath.functions.hypergeometric.a_n->parse(a, 'n')
A:sympy.mpmath.functions.hypergeometric.a_m_add_n->parse(a, 'm+n')
A:sympy.mpmath.functions.hypergeometric.a_m_sub_n->parse(a, 'm-n')
A:sympy.mpmath.functions.hypergeometric.a_n_sub_m->parse(a, 'n-m')
A:sympy.mpmath.functions.hypergeometric.a_2m_add_n->parse(a, '2m+n')
A:sympy.mpmath.functions.hypergeometric.a_2m_sub_n->parse(a, '2m-n')
A:sympy.mpmath.functions.hypergeometric.a_2n_sub_m->parse(a, '2n-m')
A:sympy.mpmath.functions.hypergeometric.b_m->parse(b, 'm')
A:sympy.mpmath.functions.hypergeometric.b_n->parse(b, 'n')
A:sympy.mpmath.functions.hypergeometric.b_m_add_n->parse(b, 'm+n')
A:sympy.mpmath.functions.hypergeometric.maxterms->kwargs.get('maxterms', 20 * prec)
A:sympy.mpmath.functions.hypergeometric.inner_a->list(a_n)
A:sympy.mpmath.functions.hypergeometric.inner_b->list(b_n)
A:sympy.mpmath.functions.hypergeometric.inner->ctx.hyper(inner_a, inner_b, inner_sign * y, zeroprec=ctx.prec, **kwargs)
sympy.mpmath.functions.hypergeometric._check_need_perturb(ctx,terms,prec,discard_known_zeros)
sympy.mpmath.functions.hypergeometric._hyp0f1(ctx,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp1f0(ctx,a,z)
sympy.mpmath.functions.hypergeometric._hyp1f1(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp1f2(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp2f0(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp2f1(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp2f1_gosper(ctx,a,b,c,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp2f2(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp2f3(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hyp_borel(ctx,p,q,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric._hypq1fq(ctx,p,q,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric.appellf1(ctx,a,b1,b2,c,x,y,**kwargs)
sympy.mpmath.functions.hypergeometric.appellf2(ctx,a,b1,b2,c1,c2,x,y,**kwargs)
sympy.mpmath.functions.hypergeometric.appellf3(ctx,a1,a2,b1,b2,c,x,y,**kwargs)
sympy.mpmath.functions.hypergeometric.appellf4(ctx,a,b,c1,c2,x,y,**kwargs)
sympy.mpmath.functions.hypergeometric.bihyper(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp0f1(ctx,b,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp1f1(ctx,a,b,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp1f2(ctx,a1,b1,b2,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp2f0(ctx,a,b,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp2f1(ctx,a,b,c,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp2f2(ctx,a1,a2,b1,b2,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp2f3(ctx,a1,a2,b1,b2,b3,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyp3f2(ctx,a1,a2,a3,b1,b2,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyper(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.functions.hypergeometric.hyper2d(ctx,a,b,x,y,**kwargs)
sympy.mpmath.functions.hypergeometric.hypercomb(ctx,function,params=[],discard_known_zeros=True,**kwargs)
sympy.mpmath.functions.hypergeometric.meijerg(ctx,a_s,b_s,z,r=1,series=None,**kwargs)
sympy.mpmath.hypergeometric._check_need_perturb(ctx,terms,prec,discard_known_zeros)
sympy.mpmath.hypergeometric._hyp0f1(ctx,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp1f0(ctx,a,z)
sympy.mpmath.hypergeometric._hyp1f1(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp1f2(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp2f0(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp2f1(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp2f1_gosper(ctx,a,b,c,z,**kwargs)
sympy.mpmath.hypergeometric._hyp2f2(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp2f3(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hyp_borel(ctx,p,q,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric._hypq1fq(ctx,p,q,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric.appellf1(ctx,a,b1,b2,c,x,y,**kwargs)
sympy.mpmath.hypergeometric.appellf2(ctx,a,b1,b2,c1,c2,x,y,**kwargs)
sympy.mpmath.hypergeometric.appellf3(ctx,a1,a2,b1,b2,c,x,y,**kwargs)
sympy.mpmath.hypergeometric.appellf4(ctx,a,b,c1,c2,x,y,**kwargs)
sympy.mpmath.hypergeometric.bihyper(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric.hyp0f1(ctx,b,z,**kwargs)
sympy.mpmath.hypergeometric.hyp1f1(ctx,a,b,z,**kwargs)
sympy.mpmath.hypergeometric.hyp1f2(ctx,a1,b1,b2,z,**kwargs)
sympy.mpmath.hypergeometric.hyp2f0(ctx,a,b,z,**kwargs)
sympy.mpmath.hypergeometric.hyp2f1(ctx,a,b,c,z,**kwargs)
sympy.mpmath.hypergeometric.hyp2f2(ctx,a1,a2,b1,b2,z,**kwargs)
sympy.mpmath.hypergeometric.hyp2f3(ctx,a1,a2,b1,b2,b3,z,**kwargs)
sympy.mpmath.hypergeometric.hyp3f2(ctx,a1,a2,a3,b1,b2,z,**kwargs)
sympy.mpmath.hypergeometric.hyper(ctx,a_s,b_s,z,**kwargs)
sympy.mpmath.hypergeometric.hyper2d(ctx,a,b,x,y,**kwargs)
sympy.mpmath.hypergeometric.hypercomb(ctx,function,params=[],discard_known_zeros=True,**kwargs)
sympy.mpmath.hypergeometric.meijerg(ctx,a_s,b_s,z,r=1,series=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/rszeta.py----------------------------------------
A:sympy.mpmath.functions.rszeta.wpvw->max(ctx.mag(10 * (newJ + 3)), 4 * newJ + 5 - ctx.mag(neweps6))
A:sympy.mpmath.functions.rszeta.E->ctx._eulernum(2 * newJ)
A:sympy.mpmath.functions.rszeta.wppi->max(ctx.mag(40 * newJ), ctx.mag(newJ) + 3 + wpvw)
A:sympy.mpmath.functions.rszeta.wpp1->max(ctx.mag(10 * (n + 4)), 4 * n + wpp1a)
A:sympy.mpmath.functions.rszeta.wpp2->max(ctx.mag(10 * (n + 4)), 4 * n + wpp1a)
A:sympy.mpmath.functions.rszeta.wpc->max(6, 4 * n + wpc0)
A:sympy.mpmath.functions.rszeta.data->_coef(ctx._mp, J, eps)
A:sympy.mpmath.functions.rszeta.data[2]->dict(((k, ctx.convert(v)) for (k, v) in data[2].items()))
A:sympy.mpmath.functions.rszeta.data[3]->dict(((k, ctx.convert(v)) for (k, v) in data[3].items()))
A:sympy.mpmath.functions.rszeta.aux1->ctx.sqrt(X)
A:sympy.mpmath.functions.rszeta.h3->min(h1, h2)
A:sympy.mpmath.functions.rszeta.t->ctx._im(s)
A:sympy.mpmath.functions.rszeta.xsigma->ctx._re(s)
A:sympy.mpmath.functions.rszeta.a->trunc_a(t)
A:sympy.mpmath.functions.rszeta.xA1->ctx.power(2, ctx.mag(xasigma) - 1)
A:sympy.mpmath.functions.rszeta.yA1->ctx.power(2, ctx.mag(yasigma) - 1)
A:sympy.mpmath.functions.rszeta.eps->ctx.power(2, -wpinitial)
A:sympy.mpmath.functions.rszeta.xA->math.pow(2, -xsigma)
A:sympy.mpmath.functions.rszeta.yA->math.pow(2, -ysigma)
A:sympy.mpmath.functions.rszeta.xL->max(2, xL)
A:sympy.mpmath.functions.rszeta.yL->max(2, yL)
A:sympy.mpmath.functions.rszeta.L->max(2, L)
A:sympy.mpmath.functions.rszeta.xM->aux_M_Fp(ctx, xA, xeps4, a, xB1, xL)
A:sympy.mpmath.functions.rszeta.yM->aux_M_Fp(ctx, yA, yeps4, a, yB1, yL)
A:sympy.mpmath.functions.rszeta.M->aux_M_Fp(ctx, A, eps4, a, B1, L)
A:sympy.mpmath.functions.rszeta.h4->aux_J_needed(ctx, yA, yeps4, a, yB1, yM)
A:sympy.mpmath.functions.rszeta.aux2->math.sqrt(aux2)
A:sympy.mpmath.functions.rszeta.wpfp->max(wpfp, ctx.mag(aux * ctx.gamma(m + 1) / eps5[m]))
A:sympy.mpmath.functions.rszeta.N->ctx.floor(a)
A:sympy.mpmath.functions.rszeta.num->ctx.floor(p * ctx.mpf(2) ** wpfp)
A:sympy.mpmath.functions.rszeta.p->ctx.convert(num * ctx.mpf(2) ** (-wpfp))
A:sympy.mpmath.functions.rszeta.(cont, pipowers)->coef(ctx, J, eps6)
A:sympy.mpmath.functions.rszeta.cc->cont.copy()
A:sympy.mpmath.functions.rszeta.d1->max(6, ctx.mag(40 * L * L))
A:sympy.mpmath.functions.rszeta.xwpd[n]->max(xd3, d1)
A:sympy.mpmath.functions.rszeta.ywpd[n]->max(yd3, d1)
A:sympy.mpmath.functions.rszeta.c1->ctx.mag(40 * (L + 2))
A:sympy.mpmath.functions.rszeta.xc2->ctx.mag(68 * (L + 2) * xA)
A:sympy.mpmath.functions.rszeta.yc2->ctx.mag(68 * (L + 2) * yA)
A:sympy.mpmath.functions.rszeta.aa->trunc_a(t)
A:sympy.mpmath.functions.rszeta.ctx.prec->max(xwps3, ywps3)
A:sympy.mpmath.functions.rszeta.xwprssum->max(xwprssum, ctx.mag(10 * (L + 1)))
A:sympy.mpmath.functions.rszeta.ywprssum->max(ywprssum, ctx.mag(10 * (L + 1)))
A:sympy.mpmath.functions.rszeta.U->ctx.expj(-arg)
A:sympy.mpmath.functions.rszeta.xasigma->ctx.power(a, -xsigma)
A:sympy.mpmath.functions.rszeta.yasigma->ctx.power(a, -ysigma)
A:sympy.mpmath.functions.rszeta.wpsum->max(xwpsum, ywpsum)
A:sympy.mpmath.functions.rszeta.(xS1, yS1)->ctx._zetasum(s, 1, int(N) - 1, range(0, der + 1), True)
A:sympy.mpmath.functions.rszeta.xabsS1->abs(xS1[der])
A:sympy.mpmath.functions.rszeta.xabsS2->abs(xrssum[der] * xS3)
A:sympy.mpmath.functions.rszeta.xwpend->max(6, wpinitial + ctx.mag(6 * (3 * xabsS1 + 7 * xabsS2)))
A:sympy.mpmath.functions.rszeta.yabsS1->abs(yS1[der])
A:sympy.mpmath.functions.rszeta.yabsS2->abs(yrssum[der] * yS3)
A:sympy.mpmath.functions.rszeta.ywpend->max(6, wpinitial + ctx.mag(6 * (3 * yabsS1 + 7 * yabsS2)))
A:sympy.mpmath.functions.rszeta.yrz[chi]->ctx.conj(xrz[chi])
A:sympy.mpmath.functions.rszeta.der->max(derivatives)
A:sympy.mpmath.functions.rszeta.sigma->ctx._re(s)
A:sympy.mpmath.functions.rszeta.asigma->ctx.power(a, -sigma)
A:sympy.mpmath.functions.rszeta.A1->ctx.power(2, ctx.mag(asigma) - 1)
A:sympy.mpmath.functions.rszeta.A->math.pow(2, -sigma)
A:sympy.mpmath.functions.rszeta.wpd[n]->max(d3, d1)
A:sympy.mpmath.functions.rszeta.c2->ctx.mag(68 * (L + 2) * A)
A:sympy.mpmath.functions.rszeta.wprssum->max(wprssum, ctx.mag(10 * (L + 1)))
A:sympy.mpmath.functions.rszeta.absS1->abs(S1[der])
A:sympy.mpmath.functions.rszeta.absS2->abs(rssum[der] * S3)
A:sympy.mpmath.functions.rszeta.wpend->max(6, wpinitial + ctx.mag(6 * (3 * absS1 + 7 * absS2)))
A:sympy.mpmath.functions.rszeta.theta->ctx.siegeltheta(w)
A:sympy.mpmath.functions.rszeta.rz->Rzeta_set(ctx, s, range(der + 1))
A:sympy.mpmath.functions.rszeta.ps1->ctx._re(ctx.psi(0, s / 2) / 2 - ctx.ln(ctx.pi) / 2)
A:sympy.mpmath.functions.rszeta.ps2->ctx._re(ctx.j * ctx.psi(1, s / 2) / 4)
A:sympy.mpmath.functions.rszeta.ps3->ctx._re(-ctx.psi(2, s / 2) / 8)
A:sympy.mpmath.functions.rszeta.ps4->ctx._re(-ctx.j * ctx.psi(3, s / 2) / 16)
A:sympy.mpmath.functions.rszeta.exptheta->ctx.expj(theta)
A:sympy.mpmath.functions.rszeta.X->ctx.sqrt(abs(s1))
A:sympy.mpmath.functions.rszeta.abst->abs(0.5 - s)
A:sympy.mpmath.functions.rszeta.wpbasic->max(6, 3 + ctx.mag(T), ctx.mag(aux2 * (26 + 2 * T)) + aux3)
A:sympy.mpmath.functions.rszeta.wptheta->max(4, ctx.mag(2.04 * aux2) + aux3)
A:sympy.mpmath.functions.rszeta.xrz->Rzeta_set(ctx, s, range(k + 1))
A:sympy.mpmath.functions.rszeta.s2->ctx.conj(1 - s1)
A:sympy.mpmath.functions.rszeta.(xrz, yrz)->Rzeta_simul(ctx, s, k)
A:sympy.mpmath.functions.rszeta.s->ctx.convert(s)
A:sympy.mpmath.functions.rszeta.re->ctx._re(w)
A:sympy.mpmath.functions.rszeta.im->ctx._im(w)
A:sympy.mpmath.functions.rszeta.z->ctx.conj(ctx.rs_zeta(ctx.conj(s), derivative))
A:sympy.mpmath.functions.rszeta.w->ctx.convert(w)
sympy.mpmath.functions.rszeta.RSCache(ctx)
sympy.mpmath.functions.rszeta.RSCache.__init__(ctx)
sympy.mpmath.functions.rszeta.Rzeta_set(ctx,s,derivatives=[0])
sympy.mpmath.functions.rszeta.Rzeta_simul(ctx,s,der=0)
sympy.mpmath.functions.rszeta._coef(ctx,J,eps)
sympy.mpmath.functions.rszeta.aux_J_needed(ctx,xA,xeps4,a,xB1,xM)
sympy.mpmath.functions.rszeta.aux_M_Fp(ctx,xA,xeps4,a,xB1,xL)
sympy.mpmath.functions.rszeta.coef(ctx,J,eps)
sympy.mpmath.functions.rszeta.rs_z(ctx,w,derivative=0)
sympy.mpmath.functions.rszeta.rs_zeta(ctx,s,derivative=0,**kwargs)
sympy.mpmath.functions.rszeta.z_half(ctx,t,der=0)
sympy.mpmath.functions.rszeta.z_offline(ctx,w,k=0)
sympy.mpmath.functions.rszeta.zeta_half(ctx,s,k=0)
sympy.mpmath.functions.rszeta.zeta_offline(ctx,s,k=0)
sympy.mpmath.rszeta.RSCache(ctx)
sympy.mpmath.rszeta.Rzeta_set(ctx,s,derivatives=[0])
sympy.mpmath.rszeta.Rzeta_simul(ctx,s,der=0)
sympy.mpmath.rszeta._coef(ctx,J,eps)
sympy.mpmath.rszeta.aux_J_needed(ctx,xA,xeps4,a,xB1,xM)
sympy.mpmath.rszeta.aux_M_Fp(ctx,xA,xeps4,a,xB1,xL)
sympy.mpmath.rszeta.coef(ctx,J,eps)
sympy.mpmath.rszeta.rs_z(ctx,w,derivative=0)
sympy.mpmath.rszeta.rs_zeta(ctx,s,derivative=0,**kwargs)
sympy.mpmath.rszeta.z_half(ctx,t,der=0)
sympy.mpmath.rszeta.z_offline(ctx,w,k=0)
sympy.mpmath.rszeta.zeta_half(ctx,s,k=0)
sympy.mpmath.rszeta.zeta_offline(ctx,s,k=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/functions.py----------------------------------------
A:sympy.mpmath.functions.functions.self.mpq_1->self._mpq((1, 1))
A:sympy.mpmath.functions.functions.self.mpq_0->self._mpq((0, 1))
A:sympy.mpmath.functions.functions.self.mpq_1_2->self._mpq((1, 2))
A:sympy.mpmath.functions.functions.self.mpq_3_2->self._mpq((3, 2))
A:sympy.mpmath.functions.functions.self.mpq_1_4->self._mpq((1, 4))
A:sympy.mpmath.functions.functions.self.mpq_1_16->self._mpq((1, 16))
A:sympy.mpmath.functions.functions.self.mpq_3_16->self._mpq((3, 16))
A:sympy.mpmath.functions.functions.self.mpq_5_2->self._mpq((5, 2))
A:sympy.mpmath.functions.functions.self.mpq_3_4->self._mpq((3, 4))
A:sympy.mpmath.functions.functions.self.mpq_7_4->self._mpq((7, 4))
A:sympy.mpmath.functions.functions.self.mpq_5_4->self._mpq((5, 4))
A:sympy.mpmath.functions.functions.self.mpq_1_3->self._mpq((1, 3))
A:sympy.mpmath.functions.functions.self.mpq_2_3->self._mpq((2, 3))
A:sympy.mpmath.functions.functions.self.mpq_4_3->self._mpq((4, 3))
A:sympy.mpmath.functions.functions.self.mpq_1_6->self._mpq((1, 6))
A:sympy.mpmath.functions.functions.self.mpq_5_6->self._mpq((5, 6))
A:sympy.mpmath.functions.functions.self.mpq_5_3->self._mpq((5, 3))
A:sympy.mpmath.functions.functions.self.zetazero_memoized->self.memoize(self.zetazero)
A:sympy.mpmath.functions.functions.x->ctx.convert(x)
A:sympy.mpmath.functions.functions.a->ctx.convert(a)
A:sympy.mpmath.functions.functions.b->ctx.convert(b)
A:sympy.mpmath.functions.functions.M->mag(w)
A:sympy.mpmath.functions.functions.magy->mag(y)
A:sympy.mpmath.functions.functions.lnx->ctx.ln(x)
A:sympy.mpmath.functions.functions.k->int(k)
A:sympy.mpmath.functions.functions.n->int(n)
A:sympy.mpmath.functions.functions.re->ctx._re(x)
A:sympy.mpmath.functions.functions.im->ctx._im(x)
A:sympy.mpmath.functions.functions.y->float(y)
A:sympy.mpmath.functions.functions.z->ctx.convert(z)
A:sympy.mpmath.functions.functions.L1->ctx.ln(-z)
A:sympy.mpmath.functions.functions.L2->ctx.ln(L1)
A:sympy.mpmath.functions.functions.magz->ctx.mag(z)
A:sympy.mpmath.functions.functions.delta->ctx.sum_accurately(lambda : [z, ctx.exp(-1)])
A:sympy.mpmath.functions.functions.p->int(n ** (1.0 / k) + 0.5)
A:sympy.mpmath.functions.functions.a[l]->ctx.fsum((u[j] * u[l + 1 - j] for j in xrange(2, l)))
A:sympy.mpmath.functions.functions.(w, done)->_lambertw_series(ctx, z, k, tol)
A:sympy.mpmath.functions.functions.two->ctx.mpf(2)
A:sympy.mpmath.functions.functions.ew->ctx.exp(w)
A:sympy.mpmath.functions.functions.w->ctx.moebius(n // d)
A:sympy.mpmath.functions.functions.(q, r)->divmod(q, p)
A:sympy.mpmath.functions.functions.v->ctx._stirling2(int(n), int(k))
sympy.mpmath.SpecialFunctions(self)
sympy.mpmath.SpecialFunctions._altzeta(ctx,s)
sympy.mpmath.SpecialFunctions._besselj(ctx,n,z)
sympy.mpmath.SpecialFunctions._ci(ctx,z)
sympy.mpmath.SpecialFunctions._e1(ctx,z)
sympy.mpmath.SpecialFunctions._ei(ctx,z)
sympy.mpmath.SpecialFunctions._erf(ctx,z)
sympy.mpmath.SpecialFunctions._erfc(ctx,z)
sympy.mpmath.SpecialFunctions._expint_int(ctx,n,z)
sympy.mpmath.SpecialFunctions._gamma_upper_int(ctx,z,a)
sympy.mpmath.SpecialFunctions._si(ctx,z)
sympy.mpmath.SpecialFunctions._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.SpecialFunctions._zeta(ctx,s)
sympy.mpmath.SpecialFunctions._zetasum_fast(ctx,s,a,n,derivatives,reflect)
sympy.mpmath._lambertw_approx_hybrid(z,k)
sympy.mpmath._lambertw_series(ctx,z,k,tol)
sympy.mpmath._lambertw_special(ctx,z,k)
sympy.mpmath._polyexp(ctx,n,x,extra=False)
sympy.mpmath._rootof1(ctx,k,n)
sympy.mpmath.acot(ctx,z)
sympy.mpmath.acoth(ctx,z)
sympy.mpmath.acsc(ctx,z)
sympy.mpmath.acsch(ctx,z)
sympy.mpmath.agm(ctx,a,b=1)
sympy.mpmath.arg(ctx,x)
sympy.mpmath.asec(ctx,z)
sympy.mpmath.asech(ctx,z)
sympy.mpmath.bell(ctx,n,x=1)
sympy.mpmath.conj(ctx,x)
sympy.mpmath.cot(ctx,z)
sympy.mpmath.coth(ctx,z)
sympy.mpmath.csc(ctx,z)
sympy.mpmath.csch(ctx,z)
sympy.mpmath.cyclotomic(ctx,n,z)
sympy.mpmath.defun(f)
sympy.mpmath.defun_static(f)
sympy.mpmath.defun_wrapped(f)
sympy.mpmath.degrees(ctx,x)
sympy.mpmath.expm1(ctx,x)
sympy.mpmath.fabs(ctx,x)
sympy.mpmath.fmod(ctx,x,y)
sympy.mpmath.functions.functions.SpecialFunctions(self)
sympy.mpmath.functions.functions.SpecialFunctions.__init__(self)
sympy.mpmath.functions.functions.SpecialFunctions._altzeta(ctx,s)
sympy.mpmath.functions.functions.SpecialFunctions._besselj(ctx,n,z)
sympy.mpmath.functions.functions.SpecialFunctions._ci(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._e1(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._ei(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._erf(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._erfc(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._expint_int(ctx,n,z)
sympy.mpmath.functions.functions.SpecialFunctions._gamma_upper_int(ctx,z,a)
sympy.mpmath.functions.functions.SpecialFunctions._si(ctx,z)
sympy.mpmath.functions.functions.SpecialFunctions._wrap_specfun(cls,name,f,wrap)
sympy.mpmath.functions.functions.SpecialFunctions._zeta(ctx,s)
sympy.mpmath.functions.functions.SpecialFunctions._zetasum_fast(ctx,s,a,n,derivatives,reflect)
sympy.mpmath.functions.functions._lambertw_approx_hybrid(z,k)
sympy.mpmath.functions.functions._lambertw_series(ctx,z,k,tol)
sympy.mpmath.functions.functions._lambertw_special(ctx,z,k)
sympy.mpmath.functions.functions._polyexp(ctx,n,x,extra=False)
sympy.mpmath.functions.functions._rootof1(ctx,k,n)
sympy.mpmath.functions.functions.acot(ctx,z)
sympy.mpmath.functions.functions.acoth(ctx,z)
sympy.mpmath.functions.functions.acsc(ctx,z)
sympy.mpmath.functions.functions.acsch(ctx,z)
sympy.mpmath.functions.functions.agm(ctx,a,b=1)
sympy.mpmath.functions.functions.arg(ctx,x)
sympy.mpmath.functions.functions.asec(ctx,z)
sympy.mpmath.functions.functions.asech(ctx,z)
sympy.mpmath.functions.functions.bell(ctx,n,x=1)
sympy.mpmath.functions.functions.conj(ctx,x)
sympy.mpmath.functions.functions.cot(ctx,z)
sympy.mpmath.functions.functions.coth(ctx,z)
sympy.mpmath.functions.functions.csc(ctx,z)
sympy.mpmath.functions.functions.csch(ctx,z)
sympy.mpmath.functions.functions.cyclotomic(ctx,n,z)
sympy.mpmath.functions.functions.defun(f)
sympy.mpmath.functions.functions.defun_static(f)
sympy.mpmath.functions.functions.defun_wrapped(f)
sympy.mpmath.functions.functions.degrees(ctx,x)
sympy.mpmath.functions.functions.expm1(ctx,x)
sympy.mpmath.functions.functions.fabs(ctx,x)
sympy.mpmath.functions.functions.fmod(ctx,x,y)
sympy.mpmath.functions.functions.im(ctx,x)
sympy.mpmath.functions.functions.lambertw(ctx,z,k=0)
sympy.mpmath.functions.functions.log(ctx,x,b=None)
sympy.mpmath.functions.functions.log10(ctx,x)
sympy.mpmath.functions.functions.mangoldt(ctx,n)
sympy.mpmath.functions.functions.polar(ctx,z)
sympy.mpmath.functions.functions.polyexp(ctx,s,z)
sympy.mpmath.functions.functions.powm1(ctx,x,y)
sympy.mpmath.functions.functions.radians(ctx,x)
sympy.mpmath.functions.functions.re(ctx,x)
sympy.mpmath.functions.functions.rect(ctx,r,phi)
sympy.mpmath.functions.functions.root(ctx,x,n,k=0)
sympy.mpmath.functions.functions.sec(ctx,z)
sympy.mpmath.functions.functions.sech(ctx,z)
sympy.mpmath.functions.functions.sign(ctx,x)
sympy.mpmath.functions.functions.sinc(ctx,x)
sympy.mpmath.functions.functions.sincpi(ctx,x)
sympy.mpmath.functions.functions.stirling1(ctx,n,k,exact=False)
sympy.mpmath.functions.functions.stirling2(ctx,n,k,exact=False)
sympy.mpmath.functions.functions.unitroots(ctx,n,primitive=False)
sympy.mpmath.im(ctx,x)
sympy.mpmath.lambertw(ctx,z,k=0)
sympy.mpmath.log(ctx,x,b=None)
sympy.mpmath.log10(ctx,x)
sympy.mpmath.mangoldt(ctx,n)
sympy.mpmath.polar(ctx,z)
sympy.mpmath.polyexp(ctx,s,z)
sympy.mpmath.powm1(ctx,x,y)
sympy.mpmath.radians(ctx,x)
sympy.mpmath.re(ctx,x)
sympy.mpmath.rect(ctx,r,phi)
sympy.mpmath.root(ctx,x,n,k=0)
sympy.mpmath.sec(ctx,z)
sympy.mpmath.sech(ctx,z)
sympy.mpmath.sign(ctx,x)
sympy.mpmath.sinc(ctx,x)
sympy.mpmath.sincpi(ctx,x)
sympy.mpmath.stirling1(ctx,n,k,exact=False)
sympy.mpmath.stirling2(ctx,n,k,exact=False)
sympy.mpmath.unitroots(ctx,n,primitive=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/expintegrals.py----------------------------------------
A:sympy.mpmath.functions.expintegrals.z2->ctx.square_exp_arg(z)
A:sympy.mpmath.functions.expintegrals.nz2->ctx.fneg(z2, exact=True)
A:sympy.mpmath.functions.expintegrals.z->ctx.convert(z)
A:sympy.mpmath.functions.expintegrals.xre->ctx._re(x)
A:sympy.mpmath.functions.expintegrals.u->ctx.ln(2 / ctx.pi / (abs(x) - 1) ** 2)
A:sympy.mpmath.functions.expintegrals.sigma->ctx.convert(sigma)
A:sympy.mpmath.functions.expintegrals.v->ctx._re(v)
A:sympy.mpmath.functions.expintegrals.(m, d)->ctx.nint_distance(a)
A:sympy.mpmath.functions.expintegrals.regularized->bool(regularized)
A:sympy.mpmath.functions.expintegrals.a->ctx.convert(a)
A:sympy.mpmath.functions.expintegrals.b->ctx.convert(b)
A:sympy.mpmath.functions.expintegrals.negb->ctx.fneg(b, exact=True)
A:sympy.mpmath.functions.expintegrals.nega->ctx.fneg(a, exact=True)
A:sympy.mpmath.functions.expintegrals.pole->ctx.isnpint(z)
A:sympy.mpmath.functions.expintegrals.T1->ctx.gammainc(z, 0, b, regularized=regularized)
A:sympy.mpmath.functions.expintegrals.T2->ctx.gammainc(z, 0, a, regularized=regularized)
A:sympy.mpmath.functions.expintegrals.im->ctx._im(z)
A:sympy.mpmath.functions.expintegrals.jz->ctx.fmul(ctx.j, z, exact=True)
A:sympy.mpmath.functions.expintegrals.njz->ctx.fneg(jz, exact=True)
A:sympy.mpmath.functions.expintegrals.zreal->ctx._re(z)
A:sympy.mpmath.functions.expintegrals.zimag->ctx._im(z)
A:sympy.mpmath.functions.expintegrals.nz->ctx.fneg(z, exact=True)
sympy.mpmath.functions.exp_ci_generic(ctx,z)
sympy.mpmath.functions.exp_ei_generic(ctx,z)
sympy.mpmath.functions.exp_erf_complex(ctx,z)
sympy.mpmath.functions.exp_erfc_complex(ctx,z)
sympy.mpmath.functions.exp_gamma3(ctx,z,a,b,regularized=False)
sympy.mpmath.functions.exp_lower_gamma(ctx,z,b,regularized=False)
sympy.mpmath.functions.exp_si_generic(ctx,z)
sympy.mpmath.functions.exp_upper_gamma(ctx,z,a,regularized=False)
sympy.mpmath.functions.expbetainc(ctx,a,b,x1=0,x2=1,regularized=False)
sympy.mpmath.functions.expchi(ctx,z)
sympy.mpmath.functions.expci(ctx,z)
sympy.mpmath.functions.expe1(ctx,z)
sympy.mpmath.functions.expei(ctx,z)
sympy.mpmath.functions.experf(ctx,z)
sympy.mpmath.functions.experfc(ctx,z)
sympy.mpmath.functions.experfi(ctx,z)
sympy.mpmath.functions.experfinv(ctx,x)
sympy.mpmath.functions.expexpint(ctx,n,z)
sympy.mpmath.functions.expfresnelc(ctx,z)
sympy.mpmath.functions.expfresnels(ctx,z)
sympy.mpmath.functions.expgammainc(ctx,z,a=0,b=None,regularized=False)
sympy.mpmath.functions.expintegrals._ci_generic(ctx,z)
sympy.mpmath.functions.expintegrals._ei_generic(ctx,z)
sympy.mpmath.functions.expintegrals._erf_complex(ctx,z)
sympy.mpmath.functions.expintegrals._erfc_complex(ctx,z)
sympy.mpmath.functions.expintegrals._gamma3(ctx,z,a,b,regularized=False)
sympy.mpmath.functions.expintegrals._lower_gamma(ctx,z,b,regularized=False)
sympy.mpmath.functions.expintegrals._si_generic(ctx,z)
sympy.mpmath.functions.expintegrals._upper_gamma(ctx,z,a,regularized=False)
sympy.mpmath.functions.expintegrals.betainc(ctx,a,b,x1=0,x2=1,regularized=False)
sympy.mpmath.functions.expintegrals.chi(ctx,z)
sympy.mpmath.functions.expintegrals.ci(ctx,z)
sympy.mpmath.functions.expintegrals.e1(ctx,z)
sympy.mpmath.functions.expintegrals.ei(ctx,z)
sympy.mpmath.functions.expintegrals.erf(ctx,z)
sympy.mpmath.functions.expintegrals.erfc(ctx,z)
sympy.mpmath.functions.expintegrals.erfi(ctx,z)
sympy.mpmath.functions.expintegrals.erfinv(ctx,x)
sympy.mpmath.functions.expintegrals.expint(ctx,n,z)
sympy.mpmath.functions.expintegrals.fresnelc(ctx,z)
sympy.mpmath.functions.expintegrals.fresnels(ctx,z)
sympy.mpmath.functions.expintegrals.gammainc(ctx,z,a=0,b=None,regularized=False)
sympy.mpmath.functions.expintegrals.li(ctx,z,offset=False)
sympy.mpmath.functions.expintegrals.ncdf(ctx,x,mu=0,sigma=1)
sympy.mpmath.functions.expintegrals.npdf(ctx,x,mu=0,sigma=1)
sympy.mpmath.functions.expintegrals.shi(ctx,z)
sympy.mpmath.functions.expintegrals.si(ctx,z)
sympy.mpmath.functions.expintegrals.square_exp_arg(ctx,z,mult=1,reciprocal=False)
sympy.mpmath.functions.expli(ctx,z,offset=False)
sympy.mpmath.functions.expncdf(ctx,x,mu=0,sigma=1)
sympy.mpmath.functions.expnpdf(ctx,x,mu=0,sigma=1)
sympy.mpmath.functions.expshi(ctx,z)
sympy.mpmath.functions.expsi(ctx,z)
sympy.mpmath.functions.expsquare_exp_arg(ctx,z,mult=1,reciprocal=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/factorials.py----------------------------------------
A:sympy.mpmath.functions.factorials.i->poles_num.pop()
A:sympy.mpmath.functions.factorials.j->poles_den.pop()
A:sympy.mpmath.functions.factorials.x->ctx.convert(x)
A:sympy.mpmath.functions.factorials.y->ctx.convert(y)
A:sympy.mpmath.functions.factorials.u->ctx.arg(z)
A:sympy.mpmath.functions.factorials.v->ctx.exp(z * ctx.loggamma(zp1))
A:sympy.mpmath.functions.factorials.n->int(ctx.floor(a))
A:sympy.mpmath.functions.factorials.h->ctx.hyperfac(-n - 1)
A:sympy.mpmath.functions.factorials.a->ctx._re(z)
A:sympy.mpmath.functions.factorials.b->ctx._im(z)
A:sympy.mpmath.functions.factorials.w->ctx.ln(ctx.gamma_old(z))
sympy.mpmath.factorials.barnesg(ctx,z)
sympy.mpmath.factorials.beta(ctx,x,y)
sympy.mpmath.factorials.binomial(ctx,n,k)
sympy.mpmath.factorials.fac2(ctx,x)
sympy.mpmath.factorials.ff(ctx,x,n)
sympy.mpmath.factorials.gammaprod(ctx,a,b,_infsign=False)
sympy.mpmath.factorials.hyperfac(ctx,z)
sympy.mpmath.factorials.loggamma_old(ctx,z)
sympy.mpmath.factorials.rf(ctx,x,n)
sympy.mpmath.factorials.superfac(ctx,z)
sympy.mpmath.functions.factorials.barnesg(ctx,z)
sympy.mpmath.functions.factorials.beta(ctx,x,y)
sympy.mpmath.functions.factorials.binomial(ctx,n,k)
sympy.mpmath.functions.factorials.fac2(ctx,x)
sympy.mpmath.functions.factorials.ff(ctx,x,n)
sympy.mpmath.functions.factorials.gammaprod(ctx,a,b,_infsign=False)
sympy.mpmath.functions.factorials.hyperfac(ctx,z)
sympy.mpmath.functions.factorials.loggamma_old(ctx,z)
sympy.mpmath.functions.factorials.rf(ctx,x,n)
sympy.mpmath.functions.factorials.superfac(ctx,z)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/qfunctions.py----------------------------------------
A:sympy.mpmath.functions.qfunctions.a->ctx.convert(a)
A:sympy.mpmath.functions.qfunctions.n->int(ctx._re(z))
A:sympy.mpmath.functions.qfunctions.q->ctx.convert(q)
A:sympy.mpmath.functions.qfunctions.maxterms->kwargs.get('maxterms', 50 * ctx.prec)
A:sympy.mpmath.functions.qfunctions.z->ctx.convert(z)
A:sympy.mpmath.functions.qfunctions.r->len(a_s)
A:sympy.mpmath.functions.qfunctions.s->len(b_s)
sympy.mpmath.functions.qfunctions.qfac(ctx,z,q,**kwargs)
sympy.mpmath.functions.qfunctions.qgamma(ctx,z,q,**kwargs)
sympy.mpmath.functions.qfunctions.qhyper(ctx,a_s,b_s,q,z,**kwargs)
sympy.mpmath.functions.qfunctions.qp(ctx,a,q=None,n=None,**kwargs)
sympy.mpmath.qqfac(ctx,z,q,**kwargs)
sympy.mpmath.qqgamma(ctx,z,q,**kwargs)
sympy.mpmath.qqhyper(ctx,a_s,b_s,q,z,**kwargs)
sympy.mpmath.qqp(ctx,a,q=None,n=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/elliptic.py----------------------------------------
A:sympy.mpmath.functions.elliptic.m->ctx.convert(m)
A:sympy.mpmath.functions.elliptic.a->ctx.sqrt(x / y)
A:sympy.mpmath.functions.elliptic.b->ctx.sqrt(x - y)
A:sympy.mpmath.functions.elliptic.v->RJ_calc(ctx, x, y, z, p, tol)
A:sympy.mpmath.functions.elliptic.k->ctx.convert(k)
A:sympy.mpmath.functions.elliptic.qbar->ctx.convert(qbar)
A:sympy.mpmath.functions.elliptic.q->ctx.qfrom(tau=tau, **kwargs)
A:sympy.mpmath.functions.elliptic.u->ctx.convert(u)
A:sympy.mpmath.functions.elliptic.t2->ctx.jtheta(2, 0, q)
A:sympy.mpmath.functions.elliptic.t3->ctx.jtheta(3, 0, q)
A:sympy.mpmath.functions.elliptic.t4->ctx.jtheta(4, 0, q)
A:sympy.mpmath.functions.elliptic.g->ctx.mpf(0.25)
A:sympy.mpmath.functions.elliptic.xs->ctx.sqrt(xm)
A:sympy.mpmath.functions.elliptic.ys->ctx.sqrt(ym)
A:sympy.mpmath.functions.elliptic.zs->ctx.sqrt(zm)
A:sympy.mpmath.functions.elliptic.x->ctx.convert(x)
A:sympy.mpmath.functions.elliptic.y->ctx.convert(y)
A:sympy.mpmath.functions.elliptic.sx->ctx.sqrt(xm)
A:sympy.mpmath.functions.elliptic.sy->ctx.sqrt(ym)
A:sympy.mpmath.functions.elliptic.sz->ctx.sqrt(zm)
A:sympy.mpmath.functions.elliptic.sp->ctx.sqrt(pm)
A:sympy.mpmath.functions.elliptic.z->ctx.convert(z)
A:sympy.mpmath.functions.elliptic.p->ctx.convert(p)
A:sympy.mpmath.functions.elliptic.d->ctx.nint(x / pi)
A:sympy.mpmath.functions.elliptic.(c, s)->ctx.cos_sin(z)
A:sympy.mpmath.functions.elliptic.RF->ctx.elliprf(x, y, 1)
A:sympy.mpmath.functions.elliptic.RD->ctx.elliprd(x, y, 1)
A:sympy.mpmath.functions.elliptic.RJ->ctx.elliprj(x, y, 1, 1 - n * s ** 2)
sympy.mpmath.elliptic.RC_calc(ctx,x,y,r,pv=True)
sympy.mpmath.elliptic.RF_calc(ctx,x,y,z,r)
sympy.mpmath.elliptic.RJ_calc(ctx,x,y,z,p,r)
sympy.mpmath.elliptic.ellipe(ctx,*args)
sympy.mpmath.elliptic.ellipf(ctx,phi,m)
sympy.mpmath.elliptic.ellipfun(ctx,kind,u=None,m=None,q=None,k=None,tau=None)
sympy.mpmath.elliptic.ellippi(ctx,*args)
sympy.mpmath.elliptic.elliprc(ctx,x,y,pv=True)
sympy.mpmath.elliptic.elliprd(ctx,x,y,z)
sympy.mpmath.elliptic.elliprf(ctx,x,y,z)
sympy.mpmath.elliptic.elliprg(ctx,x,y,z)
sympy.mpmath.elliptic.elliprj(ctx,x,y,z,p)
sympy.mpmath.elliptic.kfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.elliptic.kleinj(ctx,tau=None,**kwargs)
sympy.mpmath.elliptic.mfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.elliptic.nome(ctx,m)
sympy.mpmath.elliptic.qbarfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.elliptic.qfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.elliptic.taufrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.functions.elliptic.RC_calc(ctx,x,y,r,pv=True)
sympy.mpmath.functions.elliptic.RF_calc(ctx,x,y,z,r)
sympy.mpmath.functions.elliptic.RJ_calc(ctx,x,y,z,p,r)
sympy.mpmath.functions.elliptic.ellipe(ctx,*args)
sympy.mpmath.functions.elliptic.ellipf(ctx,phi,m)
sympy.mpmath.functions.elliptic.ellipfun(ctx,kind,u=None,m=None,q=None,k=None,tau=None)
sympy.mpmath.functions.elliptic.ellippi(ctx,*args)
sympy.mpmath.functions.elliptic.elliprc(ctx,x,y,pv=True)
sympy.mpmath.functions.elliptic.elliprd(ctx,x,y,z)
sympy.mpmath.functions.elliptic.elliprf(ctx,x,y,z)
sympy.mpmath.functions.elliptic.elliprg(ctx,x,y,z)
sympy.mpmath.functions.elliptic.elliprj(ctx,x,y,z,p)
sympy.mpmath.functions.elliptic.kfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.functions.elliptic.kleinj(ctx,tau=None,**kwargs)
sympy.mpmath.functions.elliptic.mfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.functions.elliptic.nome(ctx,m)
sympy.mpmath.functions.elliptic.qbarfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.functions.elliptic.qfrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)
sympy.mpmath.functions.elliptic.taufrom(ctx,q=None,m=None,k=None,tau=None,qbar=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/orthogonal.py----------------------------------------
A:sympy.mpmath.functions.orthogonal.(n, ntyp)->ctx._convert_param(n)
A:sympy.mpmath.functions.orthogonal.z->ctx.convert(z)
A:sympy.mpmath.functions.orthogonal.u->ctx.square_exp_arg(z, 0.5)
A:sympy.mpmath.functions.orthogonal.w->ctx.square_exp_arg(z, -0.25)
A:sympy.mpmath.functions.orthogonal.w2->ctx.fmul(w, w, prec=expprec)
A:sympy.mpmath.functions.orthogonal.rw2->ctx.fdiv(1, w2, prec=expprec)
A:sympy.mpmath.functions.orthogonal.nrw2->ctx.fneg(rw2, exact=True)
A:sympy.mpmath.functions.orthogonal.nw->ctx.fneg(w, exact=True)
A:sympy.mpmath.functions.orthogonal.expu->ctx.exp(u)
A:sympy.mpmath.functions.orthogonal.(n, _)->ctx._convert_param(a)
A:sympy.mpmath.functions.orthogonal.(n, ntype)->ctx._convert_param(a)
A:sympy.mpmath.functions.orthogonal.jz->ctx.fmul(z, -1j, exact=True)
A:sympy.mpmath.functions.orthogonal.T1terms->_hermite_param(ctx, -n - q, z, 1)
A:sympy.mpmath.functions.orthogonal.T2terms->_hermite_param(ctx, n - q, jz, 1)
A:sympy.mpmath.functions.orthogonal.v->ctx._re(v)
A:sympy.mpmath.functions.orthogonal.e->ctx.exp(w)
A:sympy.mpmath.functions.orthogonal.(c, s)->ctx.cospi_sinpi(r + q * n)
A:sympy.mpmath.functions.orthogonal.phi2->ctx.arg(ctx.gamma(0.5 + ctx.j * n))
A:sympy.mpmath.functions.orthogonal.n->ctx.convert(n)
A:sympy.mpmath.functions.orthogonal.mag->ctx.mag(x)
A:sympy.mpmath.functions.orthogonal.m->ctx.convert(m)
A:sympy.mpmath.functions.orthogonal.(cos, sin)->ctx.cos_sin(0.5 * theta)
A:sympy.mpmath.functions.orthogonal.c->ctx.expjpi(m)
A:sympy.mpmath.functions.orthogonal.l->ctx.convert(l)
A:sympy.mpmath.functions.orthogonal.theta->ctx.convert(theta)
A:sympy.mpmath.functions.orthogonal.phi->ctx.convert(phi)
A:sympy.mpmath.functions.orthogonal.l_isint->ctx.isint(l)
A:sympy.mpmath.functions.orthogonal.m_isint->ctx.isint(m)
A:sympy.mpmath.functions.orthogonal.absm->abs(m)
sympy.mpmath.functions.orthogonal._hermite_param(ctx,n,z,parabolic_cylinder)
sympy.mpmath.functions.orthogonal.chebyt(ctx,n,x,**kwargs)
sympy.mpmath.functions.orthogonal.chebyu(ctx,n,x,**kwargs)
sympy.mpmath.functions.orthogonal.gegenbauer(ctx,n,a,z,**kwargs)
sympy.mpmath.functions.orthogonal.hermite(ctx,n,z,**kwargs)
sympy.mpmath.functions.orthogonal.jacobi(ctx,n,a,b,x,**kwargs)
sympy.mpmath.functions.orthogonal.laguerre(ctx,n,a,z,**kwargs)
sympy.mpmath.functions.orthogonal.legendre(ctx,n,x,**kwargs)
sympy.mpmath.functions.orthogonal.legenp(ctx,n,m,z,type=2,**kwargs)
sympy.mpmath.functions.orthogonal.legenq(ctx,n,m,z,type=2,**kwargs)
sympy.mpmath.functions.orthogonal.pcfd(ctx,n,z,**kwargs)
sympy.mpmath.functions.orthogonal.pcfu(ctx,a,z,**kwargs)
sympy.mpmath.functions.orthogonal.pcfv(ctx,a,z,**kwargs)
sympy.mpmath.functions.orthogonal.pcfw(ctx,a,z,**kwargs)
sympy.mpmath.functions.orthogonal.spherharm(ctx,l,m,theta,phi,**kwargs)
sympy.mpmath.orthogonal._hermite_param(ctx,n,z,parabolic_cylinder)
sympy.mpmath.orthogonal.chebyt(ctx,n,x,**kwargs)
sympy.mpmath.orthogonal.chebyu(ctx,n,x,**kwargs)
sympy.mpmath.orthogonal.gegenbauer(ctx,n,a,z,**kwargs)
sympy.mpmath.orthogonal.hermite(ctx,n,z,**kwargs)
sympy.mpmath.orthogonal.jacobi(ctx,n,a,b,x,**kwargs)
sympy.mpmath.orthogonal.laguerre(ctx,n,a,z,**kwargs)
sympy.mpmath.orthogonal.legendre(ctx,n,x,**kwargs)
sympy.mpmath.orthogonal.legenp(ctx,n,m,z,type=2,**kwargs)
sympy.mpmath.orthogonal.legenq(ctx,n,m,z,type=2,**kwargs)
sympy.mpmath.orthogonal.pcfd(ctx,n,z,**kwargs)
sympy.mpmath.orthogonal.pcfu(ctx,a,z,**kwargs)
sympy.mpmath.orthogonal.pcfv(ctx,a,z,**kwargs)
sympy.mpmath.orthogonal.pcfw(ctx,a,z,**kwargs)
sympy.mpmath.orthogonal.spherharm(ctx,l,m,theta,phi,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/mpmath/functions/zeta.py----------------------------------------
A:sympy.mpmath.functions.zeta.n->int(res)
A:sympy.mpmath.functions.zeta.a->ctx.convert(a)
A:sympy.mpmath.functions.zeta.mag->ctx.quad(f, [0, ctx.inf], maxdegree=3)
A:sympy.mpmath.functions.zeta.s->ctx.convert(s)
A:sympy.mpmath.functions.zeta.d->int(derivative)
A:sympy.mpmath.functions.zeta.b->ctx.bernoulli(k - n + 1)
A:sympy.mpmath.functions.zeta.t->ctx.convert(t)
A:sympy.mpmath.functions.zeta.t1->ctx._re(t)
A:sympy.mpmath.functions.zeta.t2->ctx._im(t)
A:sympy.mpmath.functions.zeta.v->ctx.chop(v)
A:sympy.mpmath.functions.zeta.e1->ctx.expj(ctx.siegeltheta(t))
A:sympy.mpmath.functions.zeta.z->ctx.convert(z)
A:sympy.mpmath.functions.zeta.z1->ctx.zeta(0.5 + ctx.j * t, derivative=1)
A:sympy.mpmath.functions.zeta.theta1->ctx.siegeltheta(t, derivative=1)
A:sympy.mpmath.functions.zeta.z2->ctx.zeta(0.5 + ctx.j * t, derivative=2)
A:sympy.mpmath.functions.zeta.theta2->ctx.siegeltheta(t, derivative=2)
A:sympy.mpmath.functions.zeta.z3->ctx.zeta(0.5 + ctx.j * t, derivative=3)
A:sympy.mpmath.functions.zeta.theta3->ctx.siegeltheta(t, derivative=3)
A:sympy.mpmath.functions.zeta.z4->ctx.zeta(0.5 + ctx.j * t, derivative=4)
A:sympy.mpmath.functions.zeta.theta4->ctx.siegeltheta(t, derivative=4)
A:sympy.mpmath.functions.zeta.comb3->ctx.sum_accurately(terms, 1)
A:sympy.mpmath.functions.zeta.u->ctx.ln(z)
A:sympy.mpmath.functions.zeta.x->ctx.fsum((ctx.ln(a + k) ** d * (a + k) ** negs for k in xrange(n + 1)))
A:sympy.mpmath.functions.zeta.mid->ctx.li(x)
A:sympy.mpmath.functions.zeta.r->ctx.re(s)
A:sympy.mpmath.functions.zeta.w->max(ctx.mag(abs(t)), 0)
A:sympy.mpmath.functions.zeta.logz->ctx.ln(z)
A:sympy.mpmath.functions.zeta.l->ctx._re(l)
A:sympy.mpmath.functions.zeta.method->kwargs.get('method')
A:sympy.mpmath.functions.zeta.verbose->kwargs.get('verbose')
A:sympy.mpmath.functions.zeta.im->abs(ctx._im(s))
A:sympy.mpmath.functions.zeta.re->abs(ctx._re(s))
A:sympy.mpmath.functions.zeta.abss->abs(s)
A:sympy.mpmath.functions.zeta.(a, atype)->ctx._convert_param(a)
A:sympy.mpmath.functions.zeta.(T1, T2)->_hurwitz_em(ctx, s, a, d, prec + 10, verbose)
A:sympy.mpmath.functions.zeta.extraprec->max(ctx.mag(t3), 0)
A:sympy.mpmath.functions.zeta.res->ctx.re(s)
A:sympy.mpmath.functions.zeta.p->int(a)
A:sympy.mpmath.functions.zeta.g->ctx.ln(z)
A:sympy.mpmath.functions.zeta.(C1, C2)->ctx.cospi_sinpi(0.5 * t)
A:sympy.mpmath.functions.zeta.logM2a->ctx.ln(M2a)
A:sympy.mpmath.functions.zeta.D->min(m, d + 1)
A:sympy.mpmath.functions.zeta.negs->ctx.fneg(s, exact=True)
A:sympy.mpmath.functions.zeta.maxd->max(derivatives)
A:sympy.mpmath.functions.zeta.derivatives->range(maxd + 1)
A:sympy.mpmath.functions.zeta.yterm->ctx.conj(ctx.one / (w * xterm))
A:sympy.mpmath.functions.zeta.q->len(chi)
A:sympy.mpmath.functions.zeta.gamm->ctx.im(ctx.zetazero_memoized(n))
A:sympy.mpmath.functions.zeta.term->f(n)
A:sympy.mpmath.functions.zeta.mg->abs(term)
A:sympy.mpmath.functions.zeta.sg->ctx.re(s)
A:sympy.mpmath.functions.zeta.err->max(err * 2 ** w, ctx.eps * 1.0 * 2 ** w)
A:sympy.mpmath.functions.zeta.m->int(ctx.ceil(1 - ctx.re(a)))
A:sympy.mpmath.functions.zeta.mg2->abs(term)
A:sympy.mpmath.functions.zeta.t3->secondzeta_exp_term(ctx, s, a)
A:sympy.mpmath.functions.zeta.(t1, r1, gt)->secondzeta_main_term(ctx, s, a, error='True', verbose='True')
A:sympy.mpmath.functions.zeta.(t2, r2, pt)->secondzeta_prime_term(ctx, s, a, error='True', verbose='True')
A:sympy.mpmath.functions.zeta.(t4, r4)->secondzeta_singular_term(ctx, s, a, error='True')
sympy.mpmath.functions.zeta._altzeta_generic(ctx,s)
sympy.mpmath.functions.zeta._hurwitz(ctx,s,a=1,d=0,**kwargs)
sympy.mpmath.functions.zeta._hurwitz_em(ctx,s,a,d,prec,verbose)
sympy.mpmath.functions.zeta._hurwitz_reflection(ctx,s,a,d,atype)
sympy.mpmath.functions.zeta._load_zeta_zeros(url)
sympy.mpmath.functions.zeta._zetasum(ctx,s,a,n,derivatives=[0],reflect=False)
sympy.mpmath.functions.zeta.altzeta(ctx,s,**kwargs)
sympy.mpmath.functions.zeta.bernpoly(ctx,n,z)
sympy.mpmath.functions.zeta.clcos(ctx,s,z,pi=False)
sympy.mpmath.functions.zeta.clsin(ctx,s,z,pi=False)
sympy.mpmath.functions.zeta.dirichlet(ctx,s,chi=[1],derivative=0)
sympy.mpmath.functions.zeta.eulernum(ctx,n,exact=False)
sympy.mpmath.functions.zeta.eulerpoly(ctx,n,z)
sympy.mpmath.functions.zeta.grampoint(ctx,n)
sympy.mpmath.functions.zeta.lerchphi(ctx,z,s,a)
sympy.mpmath.functions.zeta.oldzetazero(ctx,n,url='http://www.dtc.umn.edu/~odlyzko/zeta_tables/zeros1')
sympy.mpmath.functions.zeta.polylog(ctx,s,z)
sympy.mpmath.functions.zeta.polylog_continuation(ctx,n,z)
sympy.mpmath.functions.zeta.polylog_general(ctx,s,z)
sympy.mpmath.functions.zeta.polylog_series(ctx,s,z)
sympy.mpmath.functions.zeta.polylog_unitcircle(ctx,n,z)
sympy.mpmath.functions.zeta.primepi(ctx,x)
sympy.mpmath.functions.zeta.primepi2(ctx,x)
sympy.mpmath.functions.zeta.primezeta(ctx,s)
sympy.mpmath.functions.zeta.riemannr(ctx,x)
sympy.mpmath.functions.zeta.secondzeta(ctx,s,a=0.015,**kwargs)
sympy.mpmath.functions.zeta.secondzeta_exp_term(ctx,s,a)
sympy.mpmath.functions.zeta.secondzeta_main_term(ctx,s,a,**kwargs)
sympy.mpmath.functions.zeta.secondzeta_prime_term(ctx,s,a,**kwargs)
sympy.mpmath.functions.zeta.secondzeta_singular_term(ctx,s,a,**kwargs)
sympy.mpmath.functions.zeta.siegeltheta(ctx,t,derivative=0)
sympy.mpmath.functions.zeta.siegelz(ctx,t,**kwargs)
sympy.mpmath.functions.zeta.stieltjes(ctx,n,a=1)
sympy.mpmath.functions.zeta.zeta(ctx,s,a=1,derivative=0,method=None,**kwargs)
sympy.mpmath.zeta._altzeta_generic(ctx,s)
sympy.mpmath.zeta._hurwitz(ctx,s,a=1,d=0,**kwargs)
sympy.mpmath.zeta._hurwitz_em(ctx,s,a,d,prec,verbose)
sympy.mpmath.zeta._hurwitz_reflection(ctx,s,a,d,atype)
sympy.mpmath.zeta._load_zeta_zeros(url)
sympy.mpmath.zeta._zetasum(ctx,s,a,n,derivatives=[0],reflect=False)
sympy.mpmath.zeta.altzeta(ctx,s,**kwargs)
sympy.mpmath.zeta.bernpoly(ctx,n,z)
sympy.mpmath.zeta.clcos(ctx,s,z,pi=False)
sympy.mpmath.zeta.clsin(ctx,s,z,pi=False)
sympy.mpmath.zeta.dirichlet(ctx,s,chi=[1],derivative=0)
sympy.mpmath.zeta.eulernum(ctx,n,exact=False)
sympy.mpmath.zeta.eulerpoly(ctx,n,z)
sympy.mpmath.zeta.grampoint(ctx,n)
sympy.mpmath.zeta.lerchphi(ctx,z,s,a)
sympy.mpmath.zeta.oldzetazero(ctx,n,url='http://www.dtc.umn.edu/~odlyzko/zeta_tables/zeros1')
sympy.mpmath.zeta.polylog(ctx,s,z)
sympy.mpmath.zeta.polylog_continuation(ctx,n,z)
sympy.mpmath.zeta.polylog_general(ctx,s,z)
sympy.mpmath.zeta.polylog_series(ctx,s,z)
sympy.mpmath.zeta.polylog_unitcircle(ctx,n,z)
sympy.mpmath.zeta.primepi(ctx,x)
sympy.mpmath.zeta.primepi2(ctx,x)
sympy.mpmath.zeta.primezeta(ctx,s)
sympy.mpmath.zeta.riemannr(ctx,x)
sympy.mpmath.zeta.secondzeta(ctx,s,a=0.015,**kwargs)
sympy.mpmath.zeta.secondzeta_exp_term(ctx,s,a)
sympy.mpmath.zeta.secondzeta_main_term(ctx,s,a,**kwargs)
sympy.mpmath.zeta.secondzeta_prime_term(ctx,s,a,**kwargs)
sympy.mpmath.zeta.secondzeta_singular_term(ctx,s,a,**kwargs)
sympy.mpmath.zeta.siegeltheta(ctx,t,derivative=0)
sympy.mpmath.zeta.siegelz(ctx,t,**kwargs)
sympy.mpmath.zeta.stieltjes(ctx,n,a=1)
sympy.mpmath.zeta.zeta(ctx,s,a=1,derivative=0,method=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/secondquant.py----------------------------------------
A:sympy.physics.secondquant.arg->arg.expand().expand()
A:sympy.physics.secondquant.r->type(self[i]).eval(arg)
A:sympy.physics.secondquant.obj->sympy.Basic.__new__(cls, i, j)
A:sympy.physics.secondquant.d->arg.expand().expand()._dagger_()
A:sympy.physics.secondquant.(upper, signu)->_sort_anticommuting_fermions(upper, key=cls._sortkey)
A:sympy.physics.secondquant.(lower, signl)->_sort_anticommuting_fermions(lower, key=cls._sortkey)
A:sympy.physics.secondquant.symbol->sympify(symbol)
A:sympy.physics.secondquant.upper->Tuple(*upper)
A:sympy.physics.secondquant.lower->Tuple(*lower)
A:sympy.physics.secondquant.h->hash(self)
A:sympy.physics.secondquant.amp->sqrt(state[element] + 1)
A:sympy.physics.secondquant.label->str(self.args[0])
A:sympy.physics.secondquant.(c_part, nc_part)->m.args_cnc()
A:sympy.physics.secondquant.occupations->list(map(sympify, occupations))
A:sympy.physics.secondquant.i->iter(belows)
A:sympy.physics.secondquant.new_occs->list(self.args[0])
A:sympy.physics.secondquant.(occupations, sign)->_sort_anticommuting_fermions(occupations, key=hash)
A:sympy.physics.secondquant.hole->Dummy('i', below_fermi=True)
A:sympy.physics.secondquant.particle->Dummy('a', above_fermi=True)
A:sympy.physics.secondquant.pos->list(self.args[0]).index(i)
A:sympy.physics.secondquant.n_nc->len(nc_part)
A:sympy.physics.secondquant.result->evaluate_deltas(result)
A:sympy.physics.secondquant.e->e.expand().expand()
A:sympy.physics.secondquant.muls->e.expand().expand().atoms(Mul)
A:sympy.physics.secondquant.sbra->repr(self.bra)
A:sympy.physics.secondquant.sket->repr(self.ket)
A:sympy.physics.secondquant.a->iter(aboves)
A:sympy.physics.secondquant.a[i, j]->apply_operators(Dagger(basis[i]) * op * basis[j])
A:sympy.physics.secondquant.self.n_basis->len(self.basis)
A:sympy.physics.secondquant.b->b.doit(**hints).doit(**hints)
A:sympy.physics.secondquant.(ca, nca)->iter(aboves).args_cnc()
A:sympy.physics.secondquant.(cb, ncb)->b.doit(**hints).doit(**hints).args_cnc()
A:sympy.physics.secondquant.(c_part, seq)->arg.expand().expand().args_cnc()
A:sympy.physics.secondquant.coeff->Mul(*c_part)
A:sympy.physics.secondquant.(newseq, sign)->_sort_anticommuting_fermions(seq)
A:sympy.physics.secondquant.below->Dummy('i', **assume)
A:sympy.physics.secondquant.above->Dummy('a', **assume)
A:sympy.physics.secondquant.cls->type(self[i])
A:sympy.physics.secondquant.indices->iter(belows).indices(len(self))
A:sympy.physics.secondquant.iter->xrange(0, len(ops))
A:sympy.physics.secondquant.mul->arg0._new_rawargs(arg0.args[:i] + arg0.args[i + 1:])
A:sympy.physics.secondquant.rng->list(range(len(string1) - 1))
A:sympy.physics.secondquant.rev->list(range(len(string1) - 3, -1, -1))
A:sympy.physics.secondquant.keys->list(map(key, string1))
A:sympy.physics.secondquant.key_val->dict(list(zip(keys, string1)))
A:sympy.physics.secondquant.letters_above->pretty_indices.get('above', '')
A:sympy.physics.secondquant.letters_below->pretty_indices.get('below', '')
A:sympy.physics.secondquant.letters_general->pretty_indices.get('general', '')
A:sympy.physics.secondquant.len_above->len(letters_above)
A:sympy.physics.secondquant.len_below->len(letters_below)
A:sympy.physics.secondquant.len_general->len(letters_general)
A:sympy.physics.secondquant.dummies->sorted(dummies, key=default_sort_key)
A:sympy.physics.secondquant.sym->_p(p)
A:sympy.physics.secondquant.expr->expr.expand().expand()
A:sympy.physics.secondquant.terms->set(expr.args)
A:sympy.physics.secondquant.p->KeyPrinter()
A:sympy.physics.secondquant.ordered->_get_ordered_dummies(term)
A:sympy.physics.secondquant.subsdict[d]->next(p)
A:sympy.physics.secondquant.x->Dummy('x')
A:sympy.physics.secondquant.args->sympy.Mul.make_args(mul)
A:sympy.physics.secondquant.fac_dum->dict([(fac, fac.atoms(Dummy)) for fac in args])
A:sympy.physics.secondquant.fac_repr->dict([(fac, __kprint(fac)) for fac in args])
A:sympy.physics.secondquant.all_dums->reduce(set.union, list(fac_dum.values()), set())
A:sympy.physics.secondquant.dum_repr->dict([(d, __kprint(d)) for d in all_dums])
A:sympy.physics.secondquant.other_dums->fac_dum[fac].copy()
A:sympy.physics.secondquant.masked_facs->dict(list(zip(dumstruct, masked_facs)))
A:sympy.physics.secondquant.keydict->dict(list(zip(dumstruct, all_masked)))
A:sympy.physics.secondquant.facpos->masked_facs[fac].find(dum_repr[d], facpos + 1)
A:sympy.physics.secondquant.dumkey->dict(list(zip(all_dums, list(map(_key, all_dums)))))
A:sympy.physics.secondquant.unordered->defaultdict(set)
A:sympy.physics.secondquant.all_ambiguous->set()
A:sympy.physics.secondquant.nondum->_SymbolFactory('_]"]_')._next()
A:sympy.physics.secondquant.newterm->terms.pop().subs(subslist)
A:sympy.physics.secondquant.neworder->_get_ordered_dummies(newterm)
A:sympy.physics.secondquant.s->Symbol('%s%i' % (self._label, self._counterVar))
A:sympy.physics.secondquant._symbol_factory->_SymbolFactory('_]"]_')
A:sympy.physics.secondquant.c->contraction(string1[i], string1[j])
A:sympy.physics.secondquant.n->len(string1)
A:sympy.physics.secondquant.string1->tuple(string1)
A:sympy.physics.secondquant.(i, j)->sorted(map(sympify, (i, j)), key=default_sort_key)
A:sympy.physics.secondquant.tmp->Dummy()
A:sympy.physics.secondquant.new_terms->set([])
A:sympy.physics.secondquant.on_hold->set([])
A:sympy.physics.secondquant.term->set(expr.args).pop()
A:sympy.physics.secondquant.permuted->substitute_dummies(permuted)
A:sympy.physics.secondquant.keep->_choose_one_to_keep(term, permuted, P.args)
sympy.physics.secondquant.AnnihilateBoson(BosonicOperator,Annihilator)
sympy.physics.secondquant.AnnihilateBoson.__repr__(self)
sympy.physics.secondquant.AnnihilateBoson._dagger_(self)
sympy.physics.secondquant.AnnihilateBoson.apply_operator(self,state)
sympy.physics.secondquant.AnnihilateFermion(FermionicOperator,Annihilator)
sympy.physics.secondquant.AnnihilateFermion.__repr__(self)
sympy.physics.secondquant.AnnihilateFermion._dagger_(self)
sympy.physics.secondquant.AnnihilateFermion._latex(self,printer)
sympy.physics.secondquant.AnnihilateFermion.apply_operator(self,state)
sympy.physics.secondquant.AnnihilateFermion.is_only_q_annihilator(self)
sympy.physics.secondquant.AnnihilateFermion.is_only_q_creator(self)
sympy.physics.secondquant.AnnihilateFermion.is_q_annihilator(self)
sympy.physics.secondquant.AnnihilateFermion.is_q_creator(self)
sympy.physics.secondquant.Annihilator(SqOperator)
sympy.physics.secondquant.AntiSymmetricTensor(cls,symbol,upper,lower)
sympy.physics.secondquant.AntiSymmetricTensor.__new__(cls,symbol,upper,lower)
sympy.physics.secondquant.AntiSymmetricTensor.__str__(self)
sympy.physics.secondquant.AntiSymmetricTensor._latex(self,printer)
sympy.physics.secondquant.AntiSymmetricTensor._sortkey(cls,index)
sympy.physics.secondquant.AntiSymmetricTensor.doit(self,**kw_args)
sympy.physics.secondquant.AntiSymmetricTensor.lower(self)
sympy.physics.secondquant.AntiSymmetricTensor.symbol(self)
sympy.physics.secondquant.AntiSymmetricTensor.upper(self)
sympy.physics.secondquant.AppliesOnlyToSymbolicIndex(SecondQuantizationError)
sympy.physics.secondquant.BosonState(FockState)
sympy.physics.secondquant.BosonState.down(self,i)
sympy.physics.secondquant.BosonState.up(self,i)
sympy.physics.secondquant.BosonicBasis(object)
sympy.physics.secondquant.BosonicOperator(SqOperator)
sympy.physics.secondquant.Commutator(Function)
sympy.physics.secondquant.Commutator.__repr__(self)
sympy.physics.secondquant.Commutator.__str__(self)
sympy.physics.secondquant.Commutator._latex(self,printer)
sympy.physics.secondquant.Commutator.doit(self,**hints)
sympy.physics.secondquant.Commutator.eval(cls,a,b)
sympy.physics.secondquant.ContractionAppliesOnlyToFermions(SecondQuantizationError)
sympy.physics.secondquant.CreateBoson(BosonicOperator,Creator)
sympy.physics.secondquant.CreateBoson.__repr__(self)
sympy.physics.secondquant.CreateBoson._dagger_(self)
sympy.physics.secondquant.CreateBoson.apply_operator(self,state)
sympy.physics.secondquant.CreateFermion(FermionicOperator,Creator)
sympy.physics.secondquant.CreateFermion.__repr__(self)
sympy.physics.secondquant.CreateFermion._dagger_(self)
sympy.physics.secondquant.CreateFermion._latex(self,printer)
sympy.physics.secondquant.CreateFermion.apply_operator(self,state)
sympy.physics.secondquant.CreateFermion.is_only_q_annihilator(self)
sympy.physics.secondquant.CreateFermion.is_only_q_creator(self)
sympy.physics.secondquant.CreateFermion.is_q_annihilator(self)
sympy.physics.secondquant.CreateFermion.is_q_creator(self)
sympy.physics.secondquant.Creator(SqOperator)
sympy.physics.secondquant.Dagger(cls,arg)
sympy.physics.secondquant.Dagger.__new__(cls,arg)
sympy.physics.secondquant.Dagger._dagger_(self)
sympy.physics.secondquant.Dagger.eval(cls,arg)
sympy.physics.secondquant.FermionState(cls,occupations,fermi_level=0)
sympy.physics.secondquant.FermionState.__new__(cls,occupations,fermi_level=0)
sympy.physics.secondquant.FermionState.__repr__(self)
sympy.physics.secondquant.FermionState._add_orbit(self,i)
sympy.physics.secondquant.FermionState._count_holes(cls,list)
sympy.physics.secondquant.FermionState._labels(self)
sympy.physics.secondquant.FermionState._negate_holes(self,list)
sympy.physics.secondquant.FermionState._only_above_fermi(cls,i)
sympy.physics.secondquant.FermionState._only_below_fermi(cls,i)
sympy.physics.secondquant.FermionState._remove_orbit(self,i)
sympy.physics.secondquant.FermionState.down(self,i)
sympy.physics.secondquant.FermionState.up(self,i)
sympy.physics.secondquant.FermionicOperator(SqOperator)
sympy.physics.secondquant.FermionicOperator._sortkey(self)
sympy.physics.secondquant.FermionicOperator.is_above_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_below_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_only_above_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_only_below_fermi(self)
sympy.physics.secondquant.FermionicOperator.is_restricted(self)
sympy.physics.secondquant.FixedBosonicBasis(self,n_particles,n_levels)
sympy.physics.secondquant.FixedBosonicBasis.__getitem__(self,i)
sympy.physics.secondquant.FixedBosonicBasis.__init__(self,n_particles,n_levels)
sympy.physics.secondquant.FixedBosonicBasis.__len__(self)
sympy.physics.secondquant.FixedBosonicBasis.__repr__(self)
sympy.physics.secondquant.FixedBosonicBasis._build_particle_locations(self)
sympy.physics.secondquant.FixedBosonicBasis._build_states(self)
sympy.physics.secondquant.FixedBosonicBasis.index(self,state)
sympy.physics.secondquant.FixedBosonicBasis.state(self,i)
sympy.physics.secondquant.FockState(cls,occupations)
sympy.physics.secondquant.FockState.__getitem__(self,i)
sympy.physics.secondquant.FockState.__len__(self)
sympy.physics.secondquant.FockState.__new__(cls,occupations)
sympy.physics.secondquant.FockState.__repr__(self)
sympy.physics.secondquant.FockState.__str__(self)
sympy.physics.secondquant.FockState._labels(self)
sympy.physics.secondquant.FockStateBosonBra(BosonState,FockStateBra)
sympy.physics.secondquant.FockStateBosonBra._dagger_(self)
sympy.physics.secondquant.FockStateBosonKet(BosonState,FockStateKet)
sympy.physics.secondquant.FockStateBosonKet._dagger_(self)
sympy.physics.secondquant.FockStateBra(FockState)
sympy.physics.secondquant.FockStateBra.__mul__(self,other)
sympy.physics.secondquant.FockStateFermionBra(FermionState,FockStateBra)
sympy.physics.secondquant.FockStateFermionBra._dagger_(self)
sympy.physics.secondquant.FockStateFermionKet(FermionState,FockStateKet)
sympy.physics.secondquant.FockStateFermionKet._dagger_(self)
sympy.physics.secondquant.FockStateKet(FockState)
sympy.physics.secondquant.InnerProduct(cls,bra,ket)
sympy.physics.secondquant.InnerProduct.__new__(cls,bra,ket)
sympy.physics.secondquant.InnerProduct.__repr__(self)
sympy.physics.secondquant.InnerProduct.__str__(self)
sympy.physics.secondquant.InnerProduct.bra(self)
sympy.physics.secondquant.InnerProduct.eval(cls,bra,ket)
sympy.physics.secondquant.InnerProduct.ket(self)
sympy.physics.secondquant.KeyPrinter(StrPrinter)
sympy.physics.secondquant.KeyPrinter._print_Dummy(self,expr)
sympy.physics.secondquant.NO(cls,arg)
sympy.physics.secondquant.NO.__getitem__(self,i)
sympy.physics.secondquant.NO.__len__(self)
sympy.physics.secondquant.NO.__new__(cls,arg)
sympy.physics.secondquant.NO.__repr__(self)
sympy.physics.secondquant.NO.__str__(self)
sympy.physics.secondquant.NO._expand_operators(self)
sympy.physics.secondquant.NO._latex(self,printer)
sympy.physics.secondquant.NO._remove_brackets(self)
sympy.physics.secondquant.NO.doit(self,**kw_args)
sympy.physics.secondquant.NO.get_subNO(self,i)
sympy.physics.secondquant.NO.has_q_annihilators(self)
sympy.physics.secondquant.NO.has_q_creators(self)
sympy.physics.secondquant.NO.iter_q_annihilators(self)
sympy.physics.secondquant.NO.iter_q_creators(self)
sympy.physics.secondquant.PermutationOperator(cls,i,j)
sympy.physics.secondquant.PermutationOperator.__new__(cls,i,j)
sympy.physics.secondquant.PermutationOperator._latex(self,printer)
sympy.physics.secondquant.PermutationOperator.get_permuted(self,expr)
sympy.physics.secondquant.SecondQuantizationError(Exception)
sympy.physics.secondquant.SqOperator(cls,k)
sympy.physics.secondquant.SqOperator.__new__(cls,k)
sympy.physics.secondquant.SqOperator.__repr__(self)
sympy.physics.secondquant.SqOperator.__str__(self)
sympy.physics.secondquant.SqOperator.apply_operator(self,state)
sympy.physics.secondquant.SqOperator.doit(self,**kw_args)
sympy.physics.secondquant.SqOperator.is_symbolic(self)
sympy.physics.secondquant.SqOperator.state(self)
sympy.physics.secondquant.SubstitutionOfAmbigousOperatorFailed(SecondQuantizationError)
sympy.physics.secondquant.TensorSymbol(Expr)
sympy.physics.secondquant.VarBosonicBasis(self,n_max)
sympy.physics.secondquant.VarBosonicBasis.__getitem__(self,i)
sympy.physics.secondquant.VarBosonicBasis.__init__(self,n_max)
sympy.physics.secondquant.VarBosonicBasis.__len__(self)
sympy.physics.secondquant.VarBosonicBasis.__repr__(self)
sympy.physics.secondquant.VarBosonicBasis._build_states(self)
sympy.physics.secondquant.VarBosonicBasis.index(self,state)
sympy.physics.secondquant.VarBosonicBasis.state(self,i)
sympy.physics.secondquant.ViolationOfPauliPrinciple(SecondQuantizationError)
sympy.physics.secondquant.WicksTheoremDoesNotApply(SecondQuantizationError)
sympy.physics.secondquant._SymbolFactory(self,label)
sympy.physics.secondquant._SymbolFactory.__init__(self,label)
sympy.physics.secondquant._SymbolFactory._counter(self)
sympy.physics.secondquant._SymbolFactory._next(self)
sympy.physics.secondquant._SymbolFactory._set_counter(self,value)
sympy.physics.secondquant.__kprint(expr)
sympy.physics.secondquant._apply_Mul(m)
sympy.physics.secondquant._determine_ambiguous(term,ordered,ambiguous_groups)
sympy.physics.secondquant._get_contractions(string1,keep_only_fully_contracted=False)
sympy.physics.secondquant._get_ordered_dummies(mul,verbose=False)
sympy.physics.secondquant._sort_anticommuting_fermions(string1,key=_sqkey)
sympy.physics.secondquant._sqkey(sq_operator)
sympy.physics.secondquant.apply_operators(e)
sympy.physics.secondquant.contraction(a,b)
sympy.physics.secondquant.evaluate_deltas(e)
sympy.physics.secondquant.matrix_rep(op,basis)
sympy.physics.secondquant.simplify_index_permutations(expr,permutation_operators)
sympy.physics.secondquant.substitute_dummies(expr,new_indices=False,pretty_indices={})
sympy.physics.secondquant.wicks(e,**kw_args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/gaussopt.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/qho_1d.py----------------------------------------
A:sympy.physics.qho_1d.(n, x, m, omega)->map(S, [n, x, m, omega])
sympy.physics.qho_1d.E_n(n,omega)
sympy.physics.qho_1d.psi_n(n,x,m,omega)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/sho.py----------------------------------------
A:sympy.physics.sho.(n, l, nu, r)->map(S, [n, l, nu, r])
A:sympy.physics.sho.C->sqrt((2 * nu) ** (l + Rational(3, 2)) * 2 ** (n + l + 1) * factorial(n - 1) / (sqrt(pi) * factorial2(2 * n + 2 * l - 1)))
sympy.physics.sho.E_nl(n,l,hw)
sympy.physics.sho.R_nl(n,l,nu,r)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/matrices.py----------------------------------------
A:sympy.physics.matrices.m->Matrix(mat)
A:sympy.physics.matrices.minkowski_tensor->Matrix(((1, 0, 0, 0), (0, -1, 0, 0), (0, 0, -1, 0), (0, 0, 0, -1)))
A:sympy.physics.matrices.base->exp(-2 * pi * I / n)
sympy.physics.matrices.mdft(n)
sympy.physics.matrices.mgamma(mu,lower=False)
sympy.physics.matrices.msigma(i)
sympy.physics.matrices.pat_matrix(m,dx,dy,dz)
sympy.physics.mdft(n)
sympy.physics.mgamma(mu,lower=False)
sympy.physics.msigma(i)
sympy.physics.pat_matrix(m,dx,dy,dz)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/hydrogen.py----------------------------------------
A:sympy.physics.hydrogen.C->sqrt((S(2) / (n * a)) ** 3 * factorial(n_r) / (2 * n * factorial(n + l)))
A:sympy.physics.hydrogen.c->S(c)
A:sympy.physics.hydrogen.beta->sqrt(skappa ** 2 - Z ** 2 / c ** 2)
sympy.physics.hydrogen.E_nl(n,Z=1)
sympy.physics.hydrogen.E_nl_dirac(n,l,spin_up=True,Z=1,c=Float('137.035999037'))
sympy.physics.hydrogen.R_nl(n,l,r,Z=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/units.py----------------------------------------
A:sympy.physics.units.obj->sympy.core.AtomicExpr.__new__(cls, **assumptions)
A:sympy.physics.units.percentpercents->Rational(1, 100)
A:sympy.physics.units.permillepermille->Rational(1, 1000)
A:sympy.physics.units.ten->Rational(10)
A:sympy.physics.units.lengthmmetermeters->Unit('meter', 'm')
A:sympy.physics.units.masskgkilogramkilograms->Unit('kilogram', 'kg')
A:sympy.physics.units.timessecondseconds->Unit('second', 's')
A:sympy.physics.units.currentAampereamperes->Unit('ampere', 'A')
A:sympy.physics.units.temperatureKkelvinkelvins->Unit('kelvin', 'K')
A:sympy.physics.units.amountmolmolemoles->Unit('mole', 'mol')
A:sympy.physics.units.luminositycdcandelacandelas->Unit('candela', 'cd')
sympy.physics.units.Unit(cls,name,abbrev,**assumptions)
sympy.physics.units.Unit.__eq__(self,other)
sympy.physics.units.Unit.__getnewargs__(self)
sympy.physics.units.Unit.__hash__(self)
sympy.physics.units.Unit.__new__(cls,name,abbrev,**assumptions)
sympy.physics.units.Unit._hashable_content(self)
sympy.physics.units.Unit.free_symbols(self)
sympy.physics.units.find_unit(quantity)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/paulialgebra.py----------------------------------------
A:sympy.physics.paulialgebra.obj->sympy.Symbol.__new__(cls, 'sigma%d' % i, commutative=False)
A:sympy.physics.paulialgebra.tmp->arg.as_coeff_mul()
sympy.physics.paulialgebra.Pauli(cls,i)
sympy.physics.paulialgebra.Pauli.__getnewargs__(self)
sympy.physics.paulialgebra.Pauli.__mul__(self,other)
sympy.physics.paulialgebra.Pauli.__new__(cls,i)
sympy.physics.paulialgebra.Pauli._eval_power(b,e)
sympy.physics.paulialgebra.delta(i,j)
sympy.physics.paulialgebra.epsilon(i,j,k)
sympy.physics.paulialgebra.evaluate_pauli_product(arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/wigner.py----------------------------------------
A:sympy.physics.wigner.prefid->Integer((-1) ** int(j_1 - j_2 - m_3))
A:sympy.physics.wigner.maxfact->max(l_1 + l_2 + l_3 + 1, imax + 1)
A:sympy.physics.wigner.ressqrt->sqrt(argsqrt)
A:sympy.physics.wigner.imin->max(-l_3 + l_1 + m_2, -l_3 + l_2 - m_1, 0)
A:sympy.physics.wigner.imax->min(l_2 + m_2, l_1 - m_1, l_1 + l_2 - l_3)
A:sympy.physics.wigner.res->res.n(prec).n(prec)
sympy.physics.wigner._big_delta_coeff(aa,bb,cc,prec=None)
sympy.physics.wigner._calc_factlist(nn)
sympy.physics.wigner.clebsch_gordan(j_1,j_2,j_3,m_1,m_2,m_3)
sympy.physics.wigner.gaunt(l_1,l_2,l_3,m_1,m_2,m_3,prec=None)
sympy.physics.wigner.racah(aa,bb,cc,dd,ee,ff,prec=None)
sympy.physics.wigner.wigner_3j(j_1,j_2,j_3,m_1,m_2,m_3)
sympy.physics.wigner.wigner_6j(j_1,j_2,j_3,j_4,j_5,j_6,prec=None)
sympy.physics.wigner.wigner_9j(j_1,j_2,j_3,j_4,j_5,j_6,j_7,j_8,j_9,prec=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/pring.py----------------------------------------
sympy.physics.pring.energy(n,m,r)
sympy.physics.pring.wavefunction(n,x)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_pring.py----------------------------------------
sympy.physics.tests.test_pring.test_energy(n=1)
sympy.physics.tests.test_pring.test_norm(n=1)
sympy.physics.tests.test_pring.test_orthogonality(n=1)
sympy.physics.tests.test_pring.test_wavefunction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_units.py----------------------------------------
A:sympy.physics.tests.test_units.t->Symbol('t')
sympy.physics.tests.test_units.test_find_unit()
sympy.physics.tests.test_units.test_issue_5565()
sympy.physics.tests.test_units.test_issue_quart()
sympy.physics.tests.test_units.test_units()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_secondquant.py----------------------------------------
A:sympy.physics.tests.test_secondquant.(p, q, r, s)->symbols('p q r s', cls=Dummy)
A:sympy.physics.tests.test_secondquant.(f, g, h, i)->map(Function, 'fghi')
A:sympy.physics.tests.test_secondquant.(a, b, c, d)->symbols('a b c d', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(f, g)->map(Function, 'fg')
A:sympy.physics.tests.test_secondquant.result->simplify_index_permutations(expr, [P(a, b)])
A:sympy.physics.tests.test_secondquant.(i, j, n, m)->symbols('i,j,n,m')
A:sympy.physics.tests.test_secondquant.(i, j)->symbols('i j', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.o->B(0)
A:sympy.physics.tests.test_secondquant.s->BosonState([n, m])
A:sympy.physics.tests.test_secondquant.(A, C)->symbols('A,C', cls=Function)
A:sympy.physics.tests.test_secondquant.n->symbols('n')
A:sympy.physics.tests.test_secondquant.(n, m)->symbols('n,m', above_fermi=True)
A:sympy.physics.tests.test_secondquant.e->simplify(apply_operators(c * BKet([n, m])))
A:sympy.physics.tests.test_secondquant.(i, j, k, l)->symbols('i j k l', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.s1->BBra([n])
A:sympy.physics.tests.test_secondquant.s2->BKet([m])
A:sympy.physics.tests.test_secondquant.r->InnerProduct(s1, s2)
A:sympy.physics.tests.test_secondquant.b->FixedBosonicBasis(2, 6)
A:sympy.physics.tests.test_secondquant.m->matrix_rep(o, b)
A:sympy.physics.tests.test_secondquant.H->Sum(h_n, (n, 0, 5))
A:sympy.physics.tests.test_secondquant.c->Commutator(Fd(m), F(m))
A:sympy.physics.tests.test_secondquant.(X, Y, Z)->symbols('X,Y,Z', commutative=False)
A:sympy.physics.tests.test_secondquant.vacuum->FKet([], fermi_level=4)
A:sympy.physics.tests.test_secondquant.nstr->wicks(str)
A:sympy.physics.tests.test_secondquant.fasit->NO(KroneckerDelta(p, q) * KroneckerDelta(r, s) + KroneckerDelta(p, q) * AnnihilateFermion(r) * CreateFermion(s) + KroneckerDelta(r, s) * AnnihilateFermion(p) * CreateFermion(q) - KroneckerDelta(p, s) * AnnihilateFermion(r) * CreateFermion(q) - AnnihilateFermion(p) * AnnihilateFermion(r) * CreateFermion(q) * CreateFermion(s))
A:sympy.physics.tests.test_secondquant.expr->template.subs(subslist)
A:sympy.physics.tests.test_secondquant.no->NO(Fd(a) * F(i) * F(b) * Fd(j))
A:sympy.physics.tests.test_secondquant.(a, b)->symbols('a b', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p, q)->symbols('p q', cls=Dummy)
A:sympy.physics.tests.test_secondquant.restr->evaluate_deltas(contraction(F(p), Fd(q)))
A:sympy.physics.tests.test_secondquant.tabij->AT('t', (a, b), (i, j))
A:sympy.physics.tests.test_secondquant.Fai->wicks(NO(Fd(i) * F(a)) * Fock, keep_only_fully_contracted=True, simplify_kronecker_deltas=True)
A:sympy.physics.tests.test_secondquant.Vabij->wicks(NO(Fd(i) * Fd(j) * F(b) * F(a)) * V, keep_only_fully_contracted=True, simplify_kronecker_deltas=True)
A:sympy.physics.tests.test_secondquant.f->Function('f')
A:sympy.physics.tests.test_secondquant.ii->symbols('i', below_fermi=True)
A:sympy.physics.tests.test_secondquant.aa->symbols('a', above_fermi=True)
A:sympy.physics.tests.test_secondquant.(k, l)->symbols('k l', cls=Dummy)
A:sympy.physics.tests.test_secondquant.(c, d)->symbols('c d', cls=Dummy)
A:sympy.physics.tests.test_secondquant.v->Function('v')
A:sympy.physics.tests.test_secondquant.t->Function('t')
A:sympy.physics.tests.test_secondquant.(ii, jj)->symbols('i j')
A:sympy.physics.tests.test_secondquant.(aa, bb)->symbols('a b')
A:sympy.physics.tests.test_secondquant.(i, j, k, l, m, n)->symbols('i j k l m n', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(a, b, c, d, e, f)->symbols('a b c d e f', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p1, p2, p3, p4)->symbols('p1 p2 p3 p4', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(h1, h2, h3, h4)->symbols('h1 h2 h3 h4', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.permutator->variations([a, b, c, d], 4)
A:sympy.physics.tests.test_secondquant.base->template.subs(zip([p1, p2, p3, p4], next(permutator)))
A:sympy.physics.tests.test_secondquant.subslist->zip([p1, p2, p3, p4], permut)
A:sympy.physics.tests.test_secondquant.(k, l, m)->symbols('k l m', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.A->Function('A')
A:sympy.physics.tests.test_secondquant.B->Function('B')
A:sympy.physics.tests.test_secondquant.C->Function('C')
A:sympy.physics.tests.test_secondquant.(i, j, k, l, m)->symbols('i j k l m', below_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(a, b, c, d, e)->symbols('a b c d e', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(p5, p6, p7, p8)->symbols('p5 p6 p7 p8', above_fermi=True, cls=Dummy)
A:sympy.physics.tests.test_secondquant.(h5, h6, h7, h8)->symbols('h5 h6 h7 h8', below_fermi=True, cls=Dummy)
sympy.physics.tests.test_secondquant.att(*args)
sympy.physics.tests.test_secondquant.atv(*args)
sympy.physics.tests.test_secondquant.test_NO()
sympy.physics.tests.test_secondquant.test_PermutationOperator()
sympy.physics.tests.test_secondquant.test_Tensors()
sympy.physics.tests.test_secondquant.test_annihilate()
sympy.physics.tests.test_secondquant.test_annihilate_b()
sympy.physics.tests.test_secondquant.test_annihilate_f()
sympy.physics.tests.test_secondquant.test_basic_apply()
sympy.physics.tests.test_secondquant.test_basic_state()
sympy.physics.tests.test_secondquant.test_commutation()
sympy.physics.tests.test_secondquant.test_complex_apply()
sympy.physics.tests.test_secondquant.test_contraction()
sympy.physics.tests.test_secondquant.test_create()
sympy.physics.tests.test_secondquant.test_create_b()
sympy.physics.tests.test_secondquant.test_create_f()
sympy.physics.tests.test_secondquant.test_dagger()
sympy.physics.tests.test_secondquant.test_dummy_order_ambiguous()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1T1()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1T1_AT()
sympy.physics.tests.test_secondquant.test_dummy_order_inner_outer_lines_VT1T1T1_AT()
sympy.physics.tests.test_secondquant.test_dummy_order_well_defined()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT1T1()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT1T1_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_AT()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_ambiguous_order()
sympy.physics.tests.test_secondquant.test_equivalent_internal_lines_VT2conjT2_ambiguous_order_AT()
sympy.physics.tests.test_secondquant.test_fully_contracted()
sympy.physics.tests.test_secondquant.test_index_permutations_with_dummies()
sympy.physics.tests.test_secondquant.test_inner_product()
sympy.physics.tests.test_secondquant.test_internal_external_VT2T2()
sympy.physics.tests.test_secondquant.test_internal_external_VT2T2_AT()
sympy.physics.tests.test_secondquant.test_internal_external_pqrs()
sympy.physics.tests.test_secondquant.test_internal_external_pqrs_AT()
sympy.physics.tests.test_secondquant.test_matrix_elements()
sympy.physics.tests.test_secondquant.test_move1()
sympy.physics.tests.test_secondquant.test_move2()
sympy.physics.tests.test_secondquant.test_number_operator()
sympy.physics.tests.test_secondquant.test_operator()
sympy.physics.tests.test_secondquant.test_sho()
sympy.physics.tests.test_secondquant.test_sorting()
sympy.physics.tests.test_secondquant.test_substitute_dummies_NO_operator()
sympy.physics.tests.test_secondquant.test_substitute_dummies_SQ_operator()
sympy.physics.tests.test_secondquant.test_substitute_dummies_new_indices()
sympy.physics.tests.test_secondquant.test_substitute_dummies_substitution_order()
sympy.physics.tests.test_secondquant.test_substitute_dummies_without_dummies()
sympy.physics.tests.test_secondquant.test_symbolic_matrix_elements()
sympy.physics.tests.test_secondquant.test_wicks()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_qho_1d.py----------------------------------------
sympy.physics.tests.test_qho_1d.test_energies(n=1)
sympy.physics.tests.test_qho_1d.test_norm(n=1)
sympy.physics.tests.test_qho_1d.test_orthogonality(n=1)
sympy.physics.tests.test_qho_1d.test_wavefunction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_paulialgebra.py----------------------------------------
A:sympy.physics.tests.test_paulialgebra.sigma1->Pauli(1)
A:sympy.physics.tests.test_paulialgebra.sigma2->Pauli(2)
A:sympy.physics.tests.test_paulialgebra.sigma3->Pauli(3)
sympy.physics.tests.test_paulialgebra.test_Pauli()
sympy.physics.tests.test_paulialgebra.test_Pauli_should_work()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_hydrogen.py----------------------------------------
A:sympy.physics.tests.test_hydrogen.(n, r, Z)->symbols('n r Z')
A:sympy.physics.tests.test_hydrogen.a->float(a)
A:sympy.physics.tests.test_hydrogen.b->float(b)
A:sympy.physics.tests.test_hydrogen.relative_error->abs((a - b) / a)
sympy.physics.tests.test_hydrogen.feq(a,b,max_relative_error=1e-12,max_absolute_error=1e-12)
sympy.physics.tests.test_hydrogen.test_hydrogen_energies()
sympy.physics.tests.test_hydrogen.test_hydrogen_energies_relat()
sympy.physics.tests.test_hydrogen.test_norm()
sympy.physics.tests.test_hydrogen.test_wavefunction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_sho.py----------------------------------------
A:sympy.physics.tests.test_sho.(omega, r)->symbols('omega r')
A:sympy.physics.tests.test_sho.l->symbols('l', integer=True)
A:sympy.physics.tests.test_sho.u->Function('u')
A:sympy.physics.tests.test_sho.result->schreq.subs(u(r), r * R_nl(n, l, omega / 2, r))
A:sympy.physics.tests.test_sho.(n, l, hw)->symbols('n l hw')
sympy.physics.tests.test_sho.test_energy()
sympy.physics.tests.test_sho.test_sho_R_nl()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_physics_matrices.py----------------------------------------
A:sympy.physics.tests.test_physics_matrices.mat1->Matrix(((2, -1, -1), (-1, 2, -1), (-1, -1, 2)))
A:sympy.physics.tests.test_physics_matrices.mat2->Matrix(((0, 0, 0), (0, 1, 0), (0, 0, 1)))
A:sympy.physics.tests.test_physics_matrices.mat3->Matrix(((1, 0, 0), (0, 0, 0), (0, 0, 1)))
A:sympy.physics.tests.test_physics_matrices.mat4->Matrix(((1, 0, 0), (0, 1, 0), (0, 0, 0)))
A:sympy.physics.tests.test_physics_matrices.sigma1->msigma(1)
A:sympy.physics.tests.test_physics_matrices.sigma2->msigma(2)
A:sympy.physics.tests.test_physics_matrices.sigma3->msigma(3)
A:sympy.physics.tests.test_physics_matrices.gamma0->mgamma(0)
A:sympy.physics.tests.test_physics_matrices.gamma1->mgamma(1)
A:sympy.physics.tests.test_physics_matrices.gamma2->mgamma(2)
A:sympy.physics.tests.test_physics_matrices.gamma3->mgamma(3)
A:sympy.physics.tests.test_physics_matrices.gamma5->mgamma(5)
sympy.physics.tests.test_physics_matrices.test_Dirac()
sympy.physics.tests.test_physics_matrices.test_Pauli()
sympy.physics.tests.test_physics_matrices.test_mdft()
sympy.physics.tests.test_physics_matrices.test_parallel_axis_theorem()
sympy.physics.tests.test_physics_test_Dirac()
sympy.physics.tests.test_physics_test_Pauli()
sympy.physics.tests.test_physics_test_mdft()
sympy.physics.tests.test_physics_test_parallel_axis_theorem()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/tests/test_clebsch_gordan.py----------------------------------------
A:sympy.physics.tests.test_clebsch_gordan.j_1->S(1)
sympy.physics.tests.test_clebsch_gordan.test_clebsch_gordan1()
sympy.physics.tests.test_clebsch_gordan.test_clebsch_gordan2()
sympy.physics.tests.test_clebsch_gordan.test_clebsch_gordan_docs()
sympy.physics.tests.test_clebsch_gordan.test_gaunt()
sympy.physics.tests.test_clebsch_gordan.test_racah()
sympy.physics.tests.test_clebsch_gordan.test_wigner()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/dimensions.py----------------------------------------
A:sympy.physics.unitsystems.dimensions.name->kwargs.pop('name', None)
A:sympy.physics.unitsystems.dimensions.symbol->kwargs.pop('symbol', None)
A:sympy.physics.unitsystems.dimensions.arg->copy(arg)
A:sympy.physics.unitsystems.dimensions.new->sympy.Expr.__new__(cls, Dict(*pairs))
A:sympy.physics.unitsystems.dimensions.new._dict->dict(pairs)
A:sympy.physics.unitsystems.dimensions.other->sympify(other)
A:sympy.physics.unitsystems.dimensions.d->self.get_dim(key)
A:sympy.physics.unitsystems.dimensions.self._base_dims->self.sort_dims(base)
A:sympy.physics.unitsystems.dimensions.self._dims->tuple(set(base) | set(dims))
A:sympy.physics.unitsystems.dimensions.i->self._dims.index(dim)
A:sympy.physics.unitsystems.dimensions.gen->reduce(lambda x, y: x.mul(y), self._base_dims)
A:sympy.physics.unitsystems.dimensions.self._list_can_dims->tuple(sorted(map(str, gen.keys())))
A:sympy.physics.unitsystems.dimensions.matrix->reduce(lambda x, y: x.row_join(y), [self.dim_can_vector(d) for d in self._base_dims])
A:sympy.physics.unitsystems.dimensions.self._can_transf_matrix->reduce(lambda x, y: x.row_join(y), [self.dim_can_vector(d) for d in self._base_dims]).inv()
sympy.physics.unitsystems.Dimension(cls,*args,**kwargs)
sympy.physics.unitsystems.Dimension.__contains__(self,key)
sympy.physics.unitsystems.Dimension.__getitem__(self,key)
sympy.physics.unitsystems.Dimension.__iter__(self)
sympy.physics.unitsystems.Dimension.__len__(self)
sympy.physics.unitsystems.Dimension.__lt__(self,other)
sympy.physics.unitsystems.Dimension.__neg__(self)
sympy.physics.unitsystems.Dimension.__repr__(self)
sympy.physics.unitsystems.Dimension.__setitem__(self,key,value)
sympy.physics.unitsystems.Dimension.__str__(self)
sympy.physics.unitsystems.Dimension.add(self,other)
sympy.physics.unitsystems.Dimension.div(self,other)
sympy.physics.unitsystems.Dimension.get(self,key,default=None)
sympy.physics.unitsystems.Dimension.has_integer_powers(self)
sympy.physics.unitsystems.Dimension.is_dimensionless(self)
sympy.physics.unitsystems.Dimension.items(self)
sympy.physics.unitsystems.Dimension.keys(self)
sympy.physics.unitsystems.Dimension.mul(self,other)
sympy.physics.unitsystems.Dimension.pow(self,other)
sympy.physics.unitsystems.Dimension.rdiv(self,other)
sympy.physics.unitsystems.Dimension.sub(self,other)
sympy.physics.unitsystems.Dimension.values(self)
sympy.physics.unitsystems.DimensionSystem(self,base,dims=(),name='',descr='')
sympy.physics.unitsystems.DimensionSystem.__getitem__(self,key)
sympy.physics.unitsystems.DimensionSystem.__repr__(self)
sympy.physics.unitsystems.DimensionSystem.__str__(self)
sympy.physics.unitsystems.DimensionSystem.can_transf_matrix(self)
sympy.physics.unitsystems.DimensionSystem.dim(self)
sympy.physics.unitsystems.DimensionSystem.dim_can_vector(self,dim)
sympy.physics.unitsystems.DimensionSystem.dim_vector(self,dim)
sympy.physics.unitsystems.DimensionSystem.extend(self,base,dims=(),name='',description='')
sympy.physics.unitsystems.DimensionSystem.get_dim(self,dim)
sympy.physics.unitsystems.DimensionSystem.inv_can_transf_matrix(self)
sympy.physics.unitsystems.DimensionSystem.is_consistent(self)
sympy.physics.unitsystems.DimensionSystem.list_can_dims(self)
sympy.physics.unitsystems.DimensionSystem.print_dim_base(self,dim)
sympy.physics.unitsystems.DimensionSystem.sort_dims(dims)
sympy.physics.unitsystems.dimensions.Dimension(cls,*args,**kwargs)
sympy.physics.unitsystems.dimensions.Dimension.__contains__(self,key)
sympy.physics.unitsystems.dimensions.Dimension.__getitem__(self,key)
sympy.physics.unitsystems.dimensions.Dimension.__iter__(self)
sympy.physics.unitsystems.dimensions.Dimension.__len__(self)
sympy.physics.unitsystems.dimensions.Dimension.__lt__(self,other)
sympy.physics.unitsystems.dimensions.Dimension.__neg__(self)
sympy.physics.unitsystems.dimensions.Dimension.__new__(cls,*args,**kwargs)
sympy.physics.unitsystems.dimensions.Dimension.__repr__(self)
sympy.physics.unitsystems.dimensions.Dimension.__setitem__(self,key,value)
sympy.physics.unitsystems.dimensions.Dimension.__str__(self)
sympy.physics.unitsystems.dimensions.Dimension.add(self,other)
sympy.physics.unitsystems.dimensions.Dimension.div(self,other)
sympy.physics.unitsystems.dimensions.Dimension.get(self,key,default=None)
sympy.physics.unitsystems.dimensions.Dimension.has_integer_powers(self)
sympy.physics.unitsystems.dimensions.Dimension.is_dimensionless(self)
sympy.physics.unitsystems.dimensions.Dimension.items(self)
sympy.physics.unitsystems.dimensions.Dimension.keys(self)
sympy.physics.unitsystems.dimensions.Dimension.mul(self,other)
sympy.physics.unitsystems.dimensions.Dimension.pow(self,other)
sympy.physics.unitsystems.dimensions.Dimension.rdiv(self,other)
sympy.physics.unitsystems.dimensions.Dimension.sub(self,other)
sympy.physics.unitsystems.dimensions.Dimension.values(self)
sympy.physics.unitsystems.dimensions.DimensionSystem(self,base,dims=(),name='',descr='')
sympy.physics.unitsystems.dimensions.DimensionSystem.__getitem__(self,key)
sympy.physics.unitsystems.dimensions.DimensionSystem.__init__(self,base,dims=(),name='',descr='')
sympy.physics.unitsystems.dimensions.DimensionSystem.__repr__(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.__str__(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.can_transf_matrix(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.dim(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.dim_can_vector(self,dim)
sympy.physics.unitsystems.dimensions.DimensionSystem.dim_vector(self,dim)
sympy.physics.unitsystems.dimensions.DimensionSystem.extend(self,base,dims=(),name='',description='')
sympy.physics.unitsystems.dimensions.DimensionSystem.get_dim(self,dim)
sympy.physics.unitsystems.dimensions.DimensionSystem.inv_can_transf_matrix(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.is_consistent(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.list_can_dims(self)
sympy.physics.unitsystems.dimensions.DimensionSystem.print_dim_base(self,dim)
sympy.physics.unitsystems.dimensions.DimensionSystem.sort_dims(dims)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/units.py----------------------------------------
A:sympy.physics.unitsystems.units.factor->(self.factor ** other).evalf()
A:sympy.physics.unitsystems.units.obj->sympy.Expr.__new__(cls, arg_factor, obj_dim, **assumptions)
A:sympy.physics.unitsystems.units.other->sympify(other)
A:sympy.physics.unitsystems.units.dim->self.dim.div(other.dim)
A:sympy.physics.unitsystems.units.self._system->DimensionSystem([u.dim for u in base], [u.dim for u in units])
A:sympy.physics.unitsystems.units.self._units->tuple(set(base) | set(units))
A:sympy.physics.unitsystems.units.base_dict->dict(((u.dim, u) for u in base))
A:sympy.physics.unitsystems.units.self._base_units->tuple((base_dict[d] for d in self._system._base_dims))
A:sympy.physics.unitsystems.units.u->self.get_unit(key)
A:sympy.physics.unitsystems.units.i->self._units.index(unit)
A:sympy.physics.unitsystems.units.vec->self._system.dim_vector(unit.dim)
sympy.physics.unitsystems.Constant(Unit)
sympy.physics.unitsystems.Unit(cls,dim,abbrev='',factor=1,prefix=None,**assumptions)
sympy.physics.unitsystems.Unit.__repr__(self)
sympy.physics.unitsystems.Unit.__str__(self)
sympy.physics.unitsystems.Unit.abbrev(self)
sympy.physics.unitsystems.Unit.abbrev_dim(self)
sympy.physics.unitsystems.Unit.add(self,other)
sympy.physics.unitsystems.Unit.as_quantity(self)
sympy.physics.unitsystems.Unit.div(self,other)
sympy.physics.unitsystems.Unit.factor(self)
sympy.physics.unitsystems.Unit.is_compatible(self,other)
sympy.physics.unitsystems.Unit.mul(self,other)
sympy.physics.unitsystems.Unit.pow(self,other)
sympy.physics.unitsystems.Unit.rdiv(self,other)
sympy.physics.unitsystems.Unit.sub(self,other)
sympy.physics.unitsystems.UnitSystem(self,base,units=(),name='',descr='')
sympy.physics.unitsystems.UnitSystem.__getitem__(self,key)
sympy.physics.unitsystems.UnitSystem.__repr__(self)
sympy.physics.unitsystems.UnitSystem.__str__(self)
sympy.physics.unitsystems.UnitSystem.dim(self)
sympy.physics.unitsystems.UnitSystem.extend(self,base,units=(),name='',description='')
sympy.physics.unitsystems.UnitSystem.get_unit(self,unit)
sympy.physics.unitsystems.UnitSystem.is_consistent(self)
sympy.physics.unitsystems.UnitSystem.print_unit_base(self,unit)
sympy.physics.unitsystems.units.Constant(Unit)
sympy.physics.unitsystems.units.Unit(cls,dim,abbrev='',factor=1,prefix=None,**assumptions)
sympy.physics.unitsystems.units.Unit.__new__(cls,dim,abbrev='',factor=1,prefix=None,**assumptions)
sympy.physics.unitsystems.units.Unit.__repr__(self)
sympy.physics.unitsystems.units.Unit.__str__(self)
sympy.physics.unitsystems.units.Unit.abbrev(self)
sympy.physics.unitsystems.units.Unit.abbrev_dim(self)
sympy.physics.unitsystems.units.Unit.add(self,other)
sympy.physics.unitsystems.units.Unit.as_quantity(self)
sympy.physics.unitsystems.units.Unit.div(self,other)
sympy.physics.unitsystems.units.Unit.factor(self)
sympy.physics.unitsystems.units.Unit.is_compatible(self,other)
sympy.physics.unitsystems.units.Unit.mul(self,other)
sympy.physics.unitsystems.units.Unit.pow(self,other)
sympy.physics.unitsystems.units.Unit.rdiv(self,other)
sympy.physics.unitsystems.units.Unit.sub(self,other)
sympy.physics.unitsystems.units.UnitSystem(self,base,units=(),name='',descr='')
sympy.physics.unitsystems.units.UnitSystem.__getitem__(self,key)
sympy.physics.unitsystems.units.UnitSystem.__init__(self,base,units=(),name='',descr='')
sympy.physics.unitsystems.units.UnitSystem.__repr__(self)
sympy.physics.unitsystems.units.UnitSystem.__str__(self)
sympy.physics.unitsystems.units.UnitSystem.dim(self)
sympy.physics.unitsystems.units.UnitSystem.extend(self,base,units=(),name='',description='')
sympy.physics.unitsystems.units.UnitSystem.get_unit(self,unit)
sympy.physics.unitsystems.units.UnitSystem.is_consistent(self)
sympy.physics.unitsystems.units.UnitSystem.print_unit_base(self,unit)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/quantities.py----------------------------------------
A:sympy.physics.unitsystems.quantities.factor->sympify(factor)
A:sympy.physics.unitsystems.quantities.obj->sympy.Expr.__new__(cls, factor, unit, **assumptions)
A:sympy.physics.unitsystems.quantities.other->sympify(other)
sympy.physics.unitsystems.Quantity(cls,factor=1,unit=None,**assumptions)
sympy.physics.unitsystems.Quantity.__neg__(self)
sympy.physics.unitsystems.Quantity.__repr__(self)
sympy.physics.unitsystems.Quantity.__str__(self)
sympy.physics.unitsystems.Quantity.add(self,other)
sympy.physics.unitsystems.Quantity.as_unit(self)
sympy.physics.unitsystems.Quantity.convert_to(self,unit)
sympy.physics.unitsystems.Quantity.div(self,other)
sympy.physics.unitsystems.Quantity.mul(self,other)
sympy.physics.unitsystems.Quantity.pow(self,other)
sympy.physics.unitsystems.Quantity.rdiv(self,other)
sympy.physics.unitsystems.Quantity.sub(self,other)
sympy.physics.unitsystems.quantities.Quantity(cls,factor=1,unit=None,**assumptions)
sympy.physics.unitsystems.quantities.Quantity.__neg__(self)
sympy.physics.unitsystems.quantities.Quantity.__new__(cls,factor=1,unit=None,**assumptions)
sympy.physics.unitsystems.quantities.Quantity.__repr__(self)
sympy.physics.unitsystems.quantities.Quantity.__str__(self)
sympy.physics.unitsystems.quantities.Quantity.add(self,other)
sympy.physics.unitsystems.quantities.Quantity.as_unit(self)
sympy.physics.unitsystems.quantities.Quantity.convert_to(self,unit)
sympy.physics.unitsystems.quantities.Quantity.div(self,other)
sympy.physics.unitsystems.quantities.Quantity.mul(self,other)
sympy.physics.unitsystems.quantities.Quantity.pow(self,other)
sympy.physics.unitsystems.quantities.Quantity.rdiv(self,other)
sympy.physics.unitsystems.quantities.Quantity.sub(self,other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/simplifiers.py----------------------------------------
A:sympy.physics.unitsystems.simplifiers.arg->qsimplify(arg)
A:sympy.physics.unitsystems.simplifiers.quantities->reduce(lambda x, y: x.mul(y), q_args)
sympy.physics.unitsystems.simplifiers.dim_simplify(expr)
sympy.physics.unitsystems.simplifiers.qsimplify(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/prefixes.py----------------------------------------
sympy.physics.unitsystems.prefixes.Prefix(self,name,abbrev,exponent,base=sympify(10))
sympy.physics.unitsystems.prefixes.Prefix.__div__(self,other)
sympy.physics.unitsystems.prefixes.Prefix.__init__(self,name,abbrev,exponent,base=sympify(10))
sympy.physics.unitsystems.prefixes.Prefix.__mul__(self,other)
sympy.physics.unitsystems.prefixes.Prefix.__rdiv__(self,other)
sympy.physics.unitsystems.prefixes.Prefix.__str__(self)
sympy.physics.unitsystems.prefixes.prefix_unit(unit,prefixes)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_quantities.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_quantities.q->Quantity(5, Unit(m.dim, prefix=k))
A:sympy.physics.unitsystems.tests.test_quantities.p->Quantity(5, s)
sympy.physics.unitsystems.tests.test_quantities.test_convert_to()
sympy.physics.unitsystems.tests.test_quantities.test_definition()
sympy.physics.unitsystems.tests.test_quantities.test_eq()
sympy.physics.unitsystems.tests.test_quantities.test_error_definition()
sympy.physics.unitsystems.tests.test_quantities.test_error_operations()
sympy.physics.unitsystems.tests.test_quantities.test_operations()
sympy.physics.unitsystems.tests.test_quantities.test_str_repr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_dimensionsystem.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_dimensionsystem.length->Dimension(name='length', symbol='L', length=1)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.mass->Dimension(name='mass', symbol='M', mass=1)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.time->Dimension(name='time', symbol='T', time=1)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.velocity->Dimension(name='velocity', symbol='V', length=1, time=-1)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.action->Dimension(name='action', symbol='A', length=2, mass=1, time=-2)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.ms->DimensionSystem((length, time), (velocity,))
A:sympy.physics.unitsystems.tests.test_dimensionsystem.dimsys->DimensionSystem((length, mass, time), (velocity, action))
A:sympy.physics.unitsystems.tests.test_dimensionsystem.current->Dimension(name='current', symbol='I', current=1)
A:sympy.physics.unitsystems.tests.test_dimensionsystem.mksa->DimensionSystem((length, time, mass, current), (action,))
A:sympy.physics.unitsystems.tests.test_dimensionsystem.mks->DimensionSystem((length, time), (velocity,)).extend((mass,), (action,))
A:sympy.physics.unitsystems.tests.test_dimensionsystem.res->DimensionSystem((length, time, mass), (velocity, action))
sympy.physics.unitsystems.tests.test_dimensionsystem.test_call()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_can_transf_matrix()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_definition()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_dim()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_dim_can_vector()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_dim_vector()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_error_definition()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_extend()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_get_dim()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_inv_can_transf_matrix()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_is_consistent()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_list_dims()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_print_dim_base()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_sort_dims()
sympy.physics.unitsystems.tests.test_dimensionsystem.test_str_repr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_prefixes.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_prefixes.length->Dimension(length=1)
A:sympy.physics.unitsystems.tests.test_prefixes.m->Unit(length, abbrev='m')
sympy.physics.unitsystems.tests.test_prefixes.test_prefix_operations()
sympy.physics.unitsystems.tests.test_prefixes.test_prefix_unit()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_unitsystem.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_unitsystem.length->Dimension(name='length', symbol='L', length=1)
A:sympy.physics.unitsystems.tests.test_unitsystem.mass->Dimension(name='mass', symbol='M', mass=1)
A:sympy.physics.unitsystems.tests.test_unitsystem.time->Dimension(name='time', symbol='T', time=1)
A:sympy.physics.unitsystems.tests.test_unitsystem.current->Dimension(name='current', symbol='I', current=1)
A:sympy.physics.unitsystems.tests.test_unitsystem.velocity->Dimension(name='velocity', symbol='V', length=1, time=-1)
A:sympy.physics.unitsystems.tests.test_unitsystem.action->Dimension(name='action', symbol='A', length=2, mass=1, time=-2)
A:sympy.physics.unitsystems.tests.test_unitsystem.m->Unit(length, abbrev='m')
A:sympy.physics.unitsystems.tests.test_unitsystem.s->Unit(time, abbrev='s')
A:sympy.physics.unitsystems.tests.test_unitsystem.kg->Unit(mass, factor=10 ** 3, abbrev='kg')
A:sympy.physics.unitsystems.tests.test_unitsystem.c->Unit(velocity, abbrev='c')
A:sympy.physics.unitsystems.tests.test_unitsystem.dm->Unit(m, factor=0.1)
A:sympy.physics.unitsystems.tests.test_unitsystem.ms->UnitSystem((m, s), (c,))
A:sympy.physics.unitsystems.tests.test_unitsystem.A->Unit(current)
A:sympy.physics.unitsystems.tests.test_unitsystem.Js->Unit(action)
A:sympy.physics.unitsystems.tests.test_unitsystem.mksa->UnitSystem((m, kg, s, A), (Js,))
A:sympy.physics.unitsystems.tests.test_unitsystem.q->Quantity(10, Js)
A:sympy.physics.unitsystems.tests.test_unitsystem.mks->UnitSystem((m, s), (c,)).extend((kg,), (Js,))
A:sympy.physics.unitsystems.tests.test_unitsystem.res->UnitSystem((m, s, kg), (c, Js))
A:sympy.physics.unitsystems.tests.test_unitsystem.dimsys->UnitSystem((m, kg, s), (c,))
sympy.physics.unitsystems.tests.test_unitsystem.test_call()
sympy.physics.unitsystems.tests.test_unitsystem.test_definition()
sympy.physics.unitsystems.tests.test_unitsystem.test_dim()
sympy.physics.unitsystems.tests.test_unitsystem.test_error_definition()
sympy.physics.unitsystems.tests.test_unitsystem.test_extend()
sympy.physics.unitsystems.tests.test_unitsystem.test_get_unit()
sympy.physics.unitsystems.tests.test_unitsystem.test_is_consistent()
sympy.physics.unitsystems.tests.test_unitsystem.test_print_unit_base()
sympy.physics.unitsystems.tests.test_unitsystem.test_str_repr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_units.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_units.u->Unit(length, factor=10)
A:sympy.physics.unitsystems.tests.test_units.km->Unit(length, prefix=k)
A:sympy.physics.unitsystems.tests.test_units.v->Unit(length, factor=5)
A:sympy.physics.unitsystems.tests.test_units.w->Unit(time, factor=2)
A:sympy.physics.unitsystems.tests.test_units.q->Quantity(10, Unit(length))
sympy.physics.unitsystems.tests.test_units.test_abbrev()
sympy.physics.unitsystems.tests.test_units.test_abbrev_dim()
sympy.physics.unitsystems.tests.test_units.test_add_sub()
sympy.physics.unitsystems.tests.test_units.test_as_quantity()
sympy.physics.unitsystems.tests.test_units.test_definition()
sympy.physics.unitsystems.tests.test_units.test_div()
sympy.physics.unitsystems.tests.test_units.test_eq()
sympy.physics.unitsystems.tests.test_units.test_error_definition()
sympy.physics.unitsystems.tests.test_units.test_factor()
sympy.physics.unitsystems.tests.test_units.test_is_compatible()
sympy.physics.unitsystems.tests.test_units.test_mul()
sympy.physics.unitsystems.tests.test_units.test_pow()
sympy.physics.unitsystems.tests.test_units.test_repr()
sympy.physics.unitsystems.tests.test_units.test_str()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_simplifiers.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_simplifiers.q1->Q(10, m)
A:sympy.physics.unitsystems.tests.test_simplifiers.q2->Q(5, m)
A:sympy.physics.unitsystems.tests.test_simplifiers.q3->Q(2, s)
sympy.physics.unitsystems.tests.test_simplifiers.test_dim_simplify_add()
sympy.physics.unitsystems.tests.test_simplifiers.test_dim_simplify_mul()
sympy.physics.unitsystems.tests.test_simplifiers.test_dim_simplify_pow()
sympy.physics.unitsystems.tests.test_simplifiers.test_dim_simplify_rec()
sympy.physics.unitsystems.tests.test_simplifiers.test_qsimplify_add()
sympy.physics.unitsystems.tests.test_simplifiers.test_qsimplify_mul()
sympy.physics.unitsystems.tests.test_simplifiers.test_qsimplify_pow()
sympy.physics.unitsystems.tests.test_simplifiers.test_qsimplify_rec()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/tests/test_dimensions.py----------------------------------------
A:sympy.physics.unitsystems.tests.test_dimensions.length->Dimension(length=1)
A:sympy.physics.unitsystems.tests.test_dimensions.halflength->Dimension(name='length', length=0.5)
A:sympy.physics.unitsystems.tests.test_dimensions.d->Dimension(dic)
A:sympy.physics.unitsystems.tests.test_dimensions.time->Dimension(time=1)
A:sympy.physics.unitsystems.tests.test_dimensions.velocity->Dimension(length=1).div(time)
sympy.physics.unitsystems.tests.test_dimensions.test_add_sub()
sympy.physics.unitsystems.tests.test_dimensions.test_definition()
sympy.physics.unitsystems.tests.test_dimensions.test_dict_properties()
sympy.physics.unitsystems.tests.test_dimensions.test_error_definition()
sympy.physics.unitsystems.tests.test_dimensions.test_mul_div_exp()
sympy.physics.unitsystems.tests.test_dimensions.test_properties()
sympy.physics.unitsystems.tests.test_dimensions.test_str()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/systems/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/systems/mks.py----------------------------------------
A:sympy.physics.unitsystems.systems.mks.length->Dimension(name='length', symbol='L', length=1)
A:sympy.physics.unitsystems.systems.mks.mass->Dimension(name='mass', symbol='M', mass=1)
A:sympy.physics.unitsystems.systems.mks.time->Dimension(name='time', symbol='T', time=1)
A:sympy.physics.unitsystems.systems.mks.velocity->Dimension(name='velocity', length=1, time=-1)
A:sympy.physics.unitsystems.systems.mks.acceleration->Dimension(name='acceleration', length=1, time=-2)
A:sympy.physics.unitsystems.systems.mks.momentum->Dimension(name='momentum', mass=1, length=1, time=-1)
A:sympy.physics.unitsystems.systems.mks.force->Dimension(name='force', symbol='F', mass=1, length=1, time=-2)
A:sympy.physics.unitsystems.systems.mks.energy->Dimension(name='energy', symbol='E', mass=1, length=2, time=-2)
A:sympy.physics.unitsystems.systems.mks.power->Dimension(name='power', length=2, mass=1, time=-3)
A:sympy.physics.unitsystems.systems.mks.pressure->Dimension(name='pressure', mass=1, length=-1, time=-2)
A:sympy.physics.unitsystems.systems.mks.frequency->Dimension(name='frequency', symbol='f', time=-1)
A:sympy.physics.unitsystems.systems.mks.action->Dimension(name='action', symbol='A', length=2, mass=1, time=-1)
A:sympy.physics.unitsystems.systems.mks.mks_dim->DimensionSystem(base=(length, mass, time), dims=dims, name='MKS')
A:sympy.physics.unitsystems.systems.mks.m->Unit(length, abbrev='m')
A:sympy.physics.unitsystems.systems.mks.kg->Unit(mass, abbrev='g', prefix=PREFIXES['k'])
A:sympy.physics.unitsystems.systems.mks.s->Unit(time, abbrev='s')
A:sympy.physics.unitsystems.systems.mks.g->Unit(mass, abbrev='g')
A:sympy.physics.unitsystems.systems.mks.v->Unit(velocity)
A:sympy.physics.unitsystems.systems.mks.a->Unit(acceleration)
A:sympy.physics.unitsystems.systems.mks.p->Unit(momentum)
A:sympy.physics.unitsystems.systems.mks.J->Unit(energy, factor=10 ** 3, abbrev='J')
A:sympy.physics.unitsystems.systems.mks.N->Unit(force, factor=10 ** 3, abbrev='N')
A:sympy.physics.unitsystems.systems.mks.W->Unit(power, factor=10 ** 3, abbrev='W')
A:sympy.physics.unitsystems.systems.mks.Pa->Unit(pressure, factor=10 ** 3, abbrev='Pa')
A:sympy.physics.unitsystems.systems.mks.Hz->Unit(frequency, abbrev='Hz')
A:sympy.physics.unitsystems.systems.mks.G->Constant(qsimplify(m ** 3 * kg ** (-1) * s ** (-2)).as_unit, factor=6.67384e-11, abbrev='G')
A:sympy.physics.unitsystems.systems.mks.c->Constant(velocity, factor=299792458, abbrev='c')
A:sympy.physics.unitsystems.systems.mks.mks->UnitSystem(base=(m, kg, s), units=all_units, name='MKS')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/systems/mksa.py----------------------------------------
A:sympy.physics.unitsystems.systems.mksa.current->Dimension(name='current', symbol='I', current=1)
A:sympy.physics.unitsystems.systems.mksa.voltage->Dimension(name='voltage', symbol='U', mass=1, length=2, current=-1, time=-3)
A:sympy.physics.unitsystems.systems.mksa.impedance->Dimension(name='impedance', symbol='Z', mass=1, length=2, current=-2, time=-3)
A:sympy.physics.unitsystems.systems.mksa.conductance->Dimension(name='conductance', symbol='G', mass=-1, length=-2, current=2, time=3)
A:sympy.physics.unitsystems.systems.mksa.capacitance->Dimension(name='capacitance', mass=-1, length=-2, current=2, time=4)
A:sympy.physics.unitsystems.systems.mksa.inductance->Dimension(name='inductance', mass=1, length=2, current=-2, time=-2)
A:sympy.physics.unitsystems.systems.mksa.charge->Dimension(name='charge', symbol='Q', current=1, time=1)
A:sympy.physics.unitsystems.systems.mksa.magnetic_density->Dimension(name='charge', symbol='B', mass=1, current=-1, time=-2)
A:sympy.physics.unitsystems.systems.mksa.magnetic_flux->Dimension(name='charge', length=2, mass=1, current=-1, time=-2)
A:sympy.physics.unitsystems.systems.mksa.mksa_dim->sympy.physics.unitsystems.systems.mks.mks_dim.extend(base=(current,), dims=dims, name='MKSA')
A:sympy.physics.unitsystems.systems.mksa.A->Unit(current, abbrev='A')
A:sympy.physics.unitsystems.systems.mksa.V->Unit(voltage, factor=10 ** 3, abbrev='V')
A:sympy.physics.unitsystems.systems.mksa.ohm->Unit(impedance, factor=10 ** 3, abbrev='ohm')
A:sympy.physics.unitsystems.systems.mksa.S->Unit(conductance, factor=10 ** (-3), abbrev='S')
A:sympy.physics.unitsystems.systems.mksa.F->Unit(capacitance, factor=10 ** (-3), abbrev='F')
A:sympy.physics.unitsystems.systems.mksa.H->Unit(inductance, factor=10 ** 3, abbrev='H')
A:sympy.physics.unitsystems.systems.mksa.C->Unit(charge, abbrev='C')
A:sympy.physics.unitsystems.systems.mksa.T->Unit(magnetic_density, abbrev='T')
A:sympy.physics.unitsystems.systems.mksa.Wb->Unit(magnetic_flux, abbrev='Wb')
A:sympy.physics.unitsystems.systems.mksa.Z0->Constant(impedance, factor=119.9169832 * pi, abbrev='Z_0')
A:sympy.physics.unitsystems.systems.mksa.mksa->sympy.physics.unitsystems.systems.mks.mks.extend(base=(A,), units=all_units, name='MKSA')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/unitsystems/systems/natural.py----------------------------------------
A:sympy.physics.unitsystems.systems.natural.action->Dimension(name='action', symbol='A', length=2, mass=1, time=-1)
A:sympy.physics.unitsystems.systems.natural.energy->Dimension(name='energy', symbol='E', length=2, mass=1, time=-2)
A:sympy.physics.unitsystems.systems.natural.velocity->Dimension(name='velocity', symbol='V', length=1, time=-1)
A:sympy.physics.unitsystems.systems.natural.length->Dimension(name='length', symbol='L', length=1)
A:sympy.physics.unitsystems.systems.natural.mass->Dimension(name='mass', symbol='M', mass=1)
A:sympy.physics.unitsystems.systems.natural.time->Dimension(name='time', symbol='T', time=1)
A:sympy.physics.unitsystems.systems.natural.acceleration->Dimension(name='acceleration', length=1, time=-2)
A:sympy.physics.unitsystems.systems.natural.momentum->Dimension(name='momentum', mass=1, length=1, time=-1)
A:sympy.physics.unitsystems.systems.natural.force->Dimension(name='force', symbol='F', mass=1, length=1, time=-2)
A:sympy.physics.unitsystems.systems.natural.power->Dimension(name='power', length=2, mass=1, time=-3)
A:sympy.physics.unitsystems.systems.natural.frequency->Dimension(name='frequency', symbol='f', time=-1)
A:sympy.physics.unitsystems.systems.natural.natural_dim->DimensionSystem(base=(action, energy, velocity), dims=dims, name='Natural system')
A:sympy.physics.unitsystems.systems.natural.hbar->Constant(action, factor=1.05457266e-34, abbrev='hbar')
A:sympy.physics.unitsystems.systems.natural.eV->Unit(energy, factor=1.60219e-19, abbrev='eV')
A:sympy.physics.unitsystems.systems.natural.c->Constant(velocity, factor=299792458, abbrev='c')
A:sympy.physics.unitsystems.systems.natural.units->prefix_unit(eV, PREFIXES)
A:sympy.physics.unitsystems.systems.natural.natural->UnitSystem(base=(hbar, eV, c), units=units, name='Natural system')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/cg.py----------------------------------------
A:sympy.physics.quantum.cg.args->map(sympify, (j1, j2, j12, j3, j4, j34, j13, j24, j))
A:sympy.physics.quantum.cg.maxw[j]->max([m[j][i].width() for i in range(3)])
A:sympy.physics.quantum.cg.s->prettyForm(*s.left(' ' * wleft))
A:sympy.physics.quantum.cg.D_row->prettyForm(*D_row.right(s))
A:sympy.physics.quantum.cg.D->prettyForm(*D.parens(left='{', right='}'))
A:sympy.physics.quantum.cg.label->map(printer._print, (self.j1, self.j2, self.j12, self.j3, self.j4, self.j34, self.j13, self.j24, self.j))
A:sympy.physics.quantum.cg.bot->prettyForm(*bot.right(' ' * (pad - bot.width())))
A:sympy.physics.quantum.cg.top->prettyForm(*top.right(' ' * (pad - top.width())))
A:sympy.physics.quantum.cg.pad->max(top.width(), bot.width())
A:sympy.physics.quantum.cg.e->_check_varsh_sum_872_4(e)
A:sympy.physics.quantum.cg.(cg_part, other)->_check_varsh_872_9(cg_part)
A:sympy.physics.quantum.cg.(a, alpha, b, lt)->map(Wild, ('a', 'alpha', 'b', 'lt'))
A:sympy.physics.quantum.cg.(a, alpha, c, lt)->map(Wild, ('a', 'alpha', 'c', 'lt'))
A:sympy.physics.quantum.cg.(a, alpha, alphap, b, beta, betap, c, gamma, lt)->map(Wild, ('a', 'alpha', 'alphap', 'b', 'beta', 'betap', 'c', 'gamma', 'lt'))
A:sympy.physics.quantum.cg.x->abs(a - b)
A:sympy.physics.quantum.cg.y->abs(alpha + beta)
A:sympy.physics.quantum.cg.(term_list, other1)->_check_cg_simp(expr, simp, sign, lt, term_list, (a, alpha, b, beta, c, gamma, lt), (a, alpha, b, beta), build_expr, index_expr)
A:sympy.physics.quantum.cg.(term_list, other2)->_check_cg_simp(expr, simp, sign, lt, term_list, (a, alpha, b, beta, c, gamma, lt), (a, alpha, b, beta), build_expr, index_expr)
A:sympy.physics.quantum.cg.sign->sympify(1)
A:sympy.physics.quantum.cg.(term_list, other3)->_check_cg_simp(expr, simp, sign, sympify(1), term_list, (a, alpha, alphap, b, beta, betap, c, gamma), (a, alpha, alphap, b, beta, betap), build_expr, index_expr)
A:sympy.physics.quantum.cg.(term_list, other4)->_check_cg_simp(expr, simp, sign, sympify(1), term_list, (a, alpha, alphap, b, beta, betap, c, gamma), (a, alpha, alphap, b, beta, betap), build_expr, index_expr)
A:sympy.physics.quantum.cg.sub_1->_check_cg(term_list[i], expr, len(variables))
A:sympy.physics.quantum.cg.sub_2->_check_cg(term_list[j], expr.subs(sub_dep), len(variables) - len(dep_variables), sign=(sign.subs(sub_1), sign.subs(sub_dep)))
A:sympy.physics.quantum.cg.min_lt->min(*[abs(term[2]) for term in cg_index])
A:sympy.physics.quantum.cg.matches->cg_term.match(expr)
A:sympy.physics.quantum.cg.a->Wild('a')
A:sympy.physics.quantum.cg.alpha->Wild('alpha')
A:sympy.physics.quantum.cg.b->Wild('b')
A:sympy.physics.quantum.cg.match->_check_varsh_sum_872_4(e).match(Sum((-1) ** (a - alpha) * CG(a, alpha, a, -alpha, c, 0), (alpha, -a, a)))
A:sympy.physics.quantum.cg.c->Wild('c')
A:sympy.physics.quantum.cg.beta->Wild('beta')
A:sympy.physics.quantum.cg.cp->Wild('cp')
A:sympy.physics.quantum.cg.gamma->Wild('gamma')
A:sympy.physics.quantum.cg.gammap->Wild('gammap')
A:sympy.physics.quantum.cg.match1->_check_varsh_sum_872_4(e).match(Sum(CG(a, alpha, b, beta, c, gamma) * CG(a, alpha, b, beta, cp, gammap), (alpha, -a, a), (beta, -b, b)))
A:sympy.physics.quantum.cg.match2->_check_varsh_sum_872_4(e).match(Sum(CG(a, alpha, b, beta, c, gamma) ** 2, (alpha, -a, a), (beta, -b, b)))
sympy.physics.quantum.cg.CG(Wigner3j)
sympy.physics.quantum.cg.CG._latex(self,printer,*args)
sympy.physics.quantum.cg.CG._pretty(self,printer,*args)
sympy.physics.quantum.cg.CG.doit(self,**hints)
sympy.physics.quantum.cg.Wigner3j(cls,j1,m1,j2,m2,j3,m3)
sympy.physics.quantum.cg.Wigner3j.__new__(cls,j1,m1,j2,m2,j3,m3)
sympy.physics.quantum.cg.Wigner3j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner3j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner3j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner3j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner3j.j1(self)
sympy.physics.quantum.cg.Wigner3j.j2(self)
sympy.physics.quantum.cg.Wigner3j.j3(self)
sympy.physics.quantum.cg.Wigner3j.m1(self)
sympy.physics.quantum.cg.Wigner3j.m2(self)
sympy.physics.quantum.cg.Wigner3j.m3(self)
sympy.physics.quantum.cg.Wigner6j(cls,j1,j2,j12,j3,j,j23)
sympy.physics.quantum.cg.Wigner6j.__new__(cls,j1,j2,j12,j3,j,j23)
sympy.physics.quantum.cg.Wigner6j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner6j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner6j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner6j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner6j.j(self)
sympy.physics.quantum.cg.Wigner6j.j1(self)
sympy.physics.quantum.cg.Wigner6j.j12(self)
sympy.physics.quantum.cg.Wigner6j.j2(self)
sympy.physics.quantum.cg.Wigner6j.j23(self)
sympy.physics.quantum.cg.Wigner6j.j3(self)
sympy.physics.quantum.cg.Wigner9j(cls,j1,j2,j12,j3,j4,j34,j13,j24,j)
sympy.physics.quantum.cg.Wigner9j.__new__(cls,j1,j2,j12,j3,j4,j34,j13,j24,j)
sympy.physics.quantum.cg.Wigner9j._latex(self,printer,*args)
sympy.physics.quantum.cg.Wigner9j._pretty(self,printer,*args)
sympy.physics.quantum.cg.Wigner9j.doit(self,**hints)
sympy.physics.quantum.cg.Wigner9j.is_symbolic(self)
sympy.physics.quantum.cg.Wigner9j.j(self)
sympy.physics.quantum.cg.Wigner9j.j1(self)
sympy.physics.quantum.cg.Wigner9j.j12(self)
sympy.physics.quantum.cg.Wigner9j.j13(self)
sympy.physics.quantum.cg.Wigner9j.j2(self)
sympy.physics.quantum.cg.Wigner9j.j24(self)
sympy.physics.quantum.cg.Wigner9j.j3(self)
sympy.physics.quantum.cg.Wigner9j.j34(self)
sympy.physics.quantum.cg.Wigner9j.j4(self)
sympy.physics.quantum.cg._cg_list(term)
sympy.physics.quantum.cg._cg_simp_add(e)
sympy.physics.quantum.cg._cg_simp_sum(e)
sympy.physics.quantum.cg._check_cg(cg_term,expr,length,sign=None)
sympy.physics.quantum.cg._check_cg_simp(expr,simp,sign,lt,term_list,variables,dep_variables,build_index_expr,index_expr)
sympy.physics.quantum.cg._check_varsh_871_1(term_list)
sympy.physics.quantum.cg._check_varsh_871_2(term_list)
sympy.physics.quantum.cg._check_varsh_872_9(term_list)
sympy.physics.quantum.cg._check_varsh_sum_871_1(e)
sympy.physics.quantum.cg._check_varsh_sum_871_2(e)
sympy.physics.quantum.cg._check_varsh_sum_872_4(e)
sympy.physics.quantum.cg.cg_simp(e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/density.py----------------------------------------
A:sympy.physics.quantum.density.args->super(Density, cls)._eval_args(args)
A:sympy.physics.quantum.density.state->state.expand().expand()
A:sympy.physics.quantum.density.(c_part1, nc_part1)->arg1.args_cnc()
A:sympy.physics.quantum.density.(c_part2, nc_part2)->arg2.args_cnc()
A:sympy.physics.quantum.density.op->tensor_product_simp(nc_part1[0] * Dagger(nc_part2[0]))
A:sympy.physics.quantum.density.indices->kwargs.get('indices', [])
A:sympy.physics.quantum.density.density->to_numpy(density)
A:sympy.physics.quantum.density.eigvals->numpy.linalg.eigvals(density)
sympy.physics.quantum.density.Density(HermitianOperator)
sympy.physics.quantum.density.Density._eval_args(cls,args)
sympy.physics.quantum.density.Density._eval_trace(self,**kwargs)
sympy.physics.quantum.density.Density._generate_outer_prod(self,arg1,arg2)
sympy.physics.quantum.density.Density._print_operator_name_latex(self,printer,*args)
sympy.physics.quantum.density.Density._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.density.Density._represent(self,**options)
sympy.physics.quantum.density.Density.apply_op(self,op)
sympy.physics.quantum.density.Density.doit(self,**hints)
sympy.physics.quantum.density.Density.entropy(self)
sympy.physics.quantum.density.Density.get_prob(self,index)
sympy.physics.quantum.density.Density.get_state(self,index)
sympy.physics.quantum.density.Density.probs(self)
sympy.physics.quantum.density.Density.states(self)
sympy.physics.quantum.density.entropy(density)
sympy.physics.quantum.density.fidelity(state1,state2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/operatorordering.py----------------------------------------
A:sympy.physics.quantum.operatorordering.factors->_expand_powers(product)
A:sympy.physics.quantum.operatorordering.c->AntiCommutator(factors[n], factors[n + 1])
A:sympy.physics.quantum.operatorordering.expr->Mul(*new_factors).expand()
A:sympy.physics.quantum.operatorordering.new_term->_normal_order_factor(term, recursive_limit=recursive_limit, _recursive_depth=_recursive_depth)
sympy.physics.quantum.operatorordering._expand_powers(factors)
sympy.physics.quantum.operatorordering._normal_order_factor(product,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_order_terms(expr,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_ordered_form_factor(product,independent=False,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering._normal_ordered_form_terms(expr,independent=False,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering.normal_order(expr,recursive_limit=10,_recursive_depth=0)
sympy.physics.quantum.operatorordering.normal_ordered_form(expr,independent=False,recursive_limit=10,_recursive_depth=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/commutator.py----------------------------------------
A:sympy.physics.quantum.commutator.r->cls.eval(A, B)
A:sympy.physics.quantum.commutator.obj->sympy.Expr.__new__(cls, A, B)
A:sympy.physics.quantum.commutator.(ca, nca)->a.args_cnc()
A:sympy.physics.quantum.commutator.(cb, ncb)->Mul(*A.args[1:]).args_cnc()
A:sympy.physics.quantum.commutator.comm->A._eval_commutator(B, **hints)
A:sympy.physics.quantum.commutator.b->Mul(*A.args[1:])
A:sympy.physics.quantum.commutator.comm1->comm1._eval_expand_commutator()._eval_expand_commutator()
A:sympy.physics.quantum.commutator.comm2->comm2._eval_expand_commutator()._eval_expand_commutator()
A:sympy.physics.quantum.commutator.first->Mul(comm1, c)
A:sympy.physics.quantum.commutator.second->Mul(b, comm2)
A:sympy.physics.quantum.commutator.c->Mul(*B.args[1:])
A:sympy.physics.quantum.commutator.pform->prettyForm(*pform.parens(left='[', right=']'))
sympy.physics.quantum.Commutator(cls,A,B)
sympy.physics.quantum.Commutator._eval_adjoint(self)
sympy.physics.quantum.Commutator._eval_expand_commutator(self,**hints)
sympy.physics.quantum.Commutator._latex(self,printer,*args)
sympy.physics.quantum.Commutator._pretty(self,printer,*args)
sympy.physics.quantum.Commutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.Commutator._sympystr(self,printer,*args)
sympy.physics.quantum.Commutator.doit(self,**hints)
sympy.physics.quantum.Commutator.eval(cls,a,b)
sympy.physics.quantum.commutator.Commutator(cls,A,B)
sympy.physics.quantum.commutator.Commutator.__new__(cls,A,B)
sympy.physics.quantum.commutator.Commutator._eval_adjoint(self)
sympy.physics.quantum.commutator.Commutator._eval_expand_commutator(self,**hints)
sympy.physics.quantum.commutator.Commutator._latex(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._pretty(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.commutator.Commutator._sympystr(self,printer,*args)
sympy.physics.quantum.commutator.Commutator.doit(self,**hints)
sympy.physics.quantum.commutator.Commutator.eval(cls,a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/gate.py----------------------------------------
A:sympy.physics.quantum.gate.tandc->list(tandc)
A:sympy.physics.quantum.gate.gate_name->u('T')
A:sympy.physics.quantum.gate.gate_name_latex->u('SWAP')
A:sympy.physics.quantum.gate.args->Gate._eval_args(args)
A:sympy.physics.quantum.gate.target_matrix->self.get_target_matrix(format)
A:sympy.physics.quantum.gate.new_qubit->new_qubit.flip(targets[bit]).flip(targets[bit])
A:sympy.physics.quantum.gate.format->options.get('format', 'sympy')
A:sympy.physics.quantum.gate.nqubits->int(nqubits)
A:sympy.physics.quantum.gate.m->represent_zbasis(controls, targets, target_matrix, nqubits, format)
A:sympy.physics.quantum.gate.label->self._print_label(printer, *args)
A:sympy.physics.quantum.gate.a->stringPict(unicode(self.gate_name))
A:sympy.physics.quantum.gate.b->self._print_label_pretty(printer, *args)
A:sympy.physics.quantum.gate.control_value->Integer(1)
A:sympy.physics.quantum.gate.controls->self._print_sequence(self.controls, ',', printer, *args)
A:sympy.physics.quantum.gate.g1->CNotGate(i, j)
A:sympy.physics.quantum.gate.g2->CNotGate(j, i)
A:sympy.physics.quantum.gate.g3->HadamardGate(t)
A:sympy.physics.quantum.gate.g4->ZGate(t)
A:sympy.physics.quantum.gate.gate->printer._print(self.gate, *args)
A:sympy.physics.quantum.gate.first->self._print_subscript_pretty(gate_name, controls)
A:sympy.physics.quantum.gate.final->prettyForm(*first.right(gate))
A:sympy.physics.quantum.gate.min_wire->int(_min(self.targets))
A:sympy.physics.quantum.gate.max_wire->int(_max(self.targets))
A:sympy.physics.quantum.gate.targets->self._print_sequence(self.targets, ',', printer, *args)
A:sympy.physics.quantum.gate.min_target->_min(targets)
A:sympy.physics.quantum.gate.max_target->_max(targets)
A:sympy.physics.quantum.gate.op01->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op01', format)
A:sympy.physics.quantum.gate.op10->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op10', format)
A:sympy.physics.quantum.gate.op11->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op11', format)
A:sympy.physics.quantum.gate.op00->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('op00', format)
A:sympy.physics.quantum.gate.eye2->sympy.physics.quantum.matrixcache.matrix_cache.get_matrix('eye2', format)
A:sympy.physics.quantum.gate.new_result->matrix_tensor_product(*product)
A:sympy.physics.quantum.gate.circuit->Mul(*new_args)
A:sympy.physics.quantum.gate.(b, e)->Mul(*new_args).as_base_exp()
A:sympy.physics.quantum.gate.(first_base, first_exp)->circ_array[i].as_base_exp()
A:sympy.physics.quantum.gate.(second_base, second_exp)->circ_array[i + 1].as_base_exp()
A:sympy.physics.quantum.gate.qubit_space->range(nqubits)
A:sympy.physics.quantum.gate.g->g(qubit)
A:sympy.physics.quantum.gate.qubits->random.sample(qubit_space, 2)
A:sympy.physics.quantum.gate.qubit->random.choice(qubit_space)
sympy.physics.quantum.gate.CGate(Gate)
sympy.physics.quantum.gate.CGate._eval_args(cls,args)
sympy.physics.quantum.gate.CGate._eval_dagger(self)
sympy.physics.quantum.gate.CGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.CGate._eval_inverse(self)
sympy.physics.quantum.gate.CGate._eval_power(self,exp)
sympy.physics.quantum.gate.CGate._latex(self,printer,*args)
sympy.physics.quantum.gate.CGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.CGate._print_label(self,printer,*args)
sympy.physics.quantum.gate.CGate.controls(self)
sympy.physics.quantum.gate.CGate.decompose(self,**options)
sympy.physics.quantum.gate.CGate.eval_controls(self,qubit)
sympy.physics.quantum.gate.CGate.gate(self)
sympy.physics.quantum.gate.CGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.CGate.min_qubits(self)
sympy.physics.quantum.gate.CGate.nqubits(self)
sympy.physics.quantum.gate.CGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.CGate.targets(self)
sympy.physics.quantum.gate.CGateS(CGate)
sympy.physics.quantum.gate.CNotGate(HermitianOperator,CGate,TwoQubitGate)
sympy.physics.quantum.gate.CNotGate._eval_args(cls,args)
sympy.physics.quantum.gate.CNotGate._eval_commutator_CNotGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_PhaseGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_TGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.CNotGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.CNotGate._latex(self,printer,*args)
sympy.physics.quantum.gate.CNotGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.CNotGate._print_label(self,printer,*args)
sympy.physics.quantum.gate.CNotGate.controls(self)
sympy.physics.quantum.gate.CNotGate.gate(self)
sympy.physics.quantum.gate.CNotGate.min_qubits(self)
sympy.physics.quantum.gate.CNotGate.targets(self)
sympy.physics.quantum.gate.CPHASE(a,b)
sympy.physics.quantum.gate.Gate(UnitaryOperator)
sympy.physics.quantum.gate.Gate._apply_operator_IntQubit(self,qubits,**options)
sympy.physics.quantum.gate.Gate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.gate.Gate._eval_args(cls,args)
sympy.physics.quantum.gate.Gate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.Gate._latex(self,printer,*args)
sympy.physics.quantum.gate.Gate._pretty(self,printer,*args)
sympy.physics.quantum.gate.Gate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.gate.Gate._represent_default_basis(self,**options)
sympy.physics.quantum.gate.Gate._sympystr(self,printer,*args)
sympy.physics.quantum.gate.Gate.gate_name_plot(self)
sympy.physics.quantum.gate.Gate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.Gate.min_qubits(self)
sympy.physics.quantum.gate.Gate.nqubits(self)
sympy.physics.quantum.gate.Gate.plot_gate(self,axes,gate_idx,gate_grid,wire_grid)
sympy.physics.quantum.gate.Gate.targets(self)
sympy.physics.quantum.gate.HadamardGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.HadamardGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.IdentityGate(OneQubitGate)
sympy.physics.quantum.gate.IdentityGate._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.gate.IdentityGate._eval_commutator(self,other,**hints)
sympy.physics.quantum.gate.IdentityGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.OneQubitGate(Gate)
sympy.physics.quantum.gate.OneQubitGate._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.gate.OneQubitGate._eval_commutator(self,other,**hints)
sympy.physics.quantum.gate.OneQubitGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.PhaseGate(OneQubitGate)
sympy.physics.quantum.gate.PhaseGate._eval_commutator_TGate(self,other,**hints)
sympy.physics.quantum.gate.PhaseGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.PhaseGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.SwapGate(TwoQubitGate)
sympy.physics.quantum.gate.SwapGate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.gate.SwapGate.decompose(self,**options)
sympy.physics.quantum.gate.SwapGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.SwapGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.TGate(OneQubitGate)
sympy.physics.quantum.gate.TGate._eval_commutator_PhaseGate(self,other,**hints)
sympy.physics.quantum.gate.TGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.TGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.TwoQubitGate(Gate)
sympy.physics.quantum.gate.UGate(Gate)
sympy.physics.quantum.gate.UGate._eval_args(cls,args)
sympy.physics.quantum.gate.UGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.gate.UGate._latex(self,printer,*args)
sympy.physics.quantum.gate.UGate._pretty(self,printer,*args)
sympy.physics.quantum.gate.UGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.UGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.UGate.targets(self)
sympy.physics.quantum.gate.XGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.XGate._eval_anticommutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.XGate._eval_commutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.XGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.XGate.plot_gate(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.XGate.plot_gate_plus(self,circ_plot,gate_idx)
sympy.physics.quantum.gate.YGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.YGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.YGate._eval_anticommutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.YGate._eval_commutator_ZGate(self,other,**hints)
sympy.physics.quantum.gate.YGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate.ZGate(HermitianOperator,OneQubitGate)
sympy.physics.quantum.gate.ZGate._eval_anticommutator_YGate(self,other,**hints)
sympy.physics.quantum.gate.ZGate._eval_commutator_XGate(self,other,**hints)
sympy.physics.quantum.gate.ZGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.gate._max(*args,**kwargs)
sympy.physics.quantum.gate._min(*args,**kwargs)
sympy.physics.quantum.gate._validate_targets_controls(tandc)
sympy.physics.quantum.gate.gate_simp(circuit)
sympy.physics.quantum.gate.gate_sort(circuit)
sympy.physics.quantum.gate.normalized(normalize)
sympy.physics.quantum.gate.random_circuit(ngates,nqubits,gate_space=(X,Y,Z,S,T,H,CNOT,SWAP))
sympy.physics.quantum.gate.represent_zbasis(controls,targets,target_matrix,nqubits,format='sympy')
sympy.physics.quantum.gate.zx_basis_transform(self,format='sympy')
sympy.physics.quantum.gate.zy_basis_transform(self,format='sympy')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/operator.py----------------------------------------
A:sympy.physics.quantum.operator.pform->prettyForm(*pform.right(label_pform))
A:sympy.physics.quantum.operator.label_pform->prettyForm(*label_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.operator.format->options.get('format', 'sympy')
A:sympy.physics.quantum.operator.obj->sympy.Expr.__new__(cls, *args, **old_assumptions)
A:sympy.physics.quantum.operator.k->self.ket._represent(**options)
A:sympy.physics.quantum.operator.b->self.bra._represent(**options)
A:sympy.physics.quantum.operator.new_expr->Derivative(self.expr, symbol)
sympy.physics.quantum.DifferentialOperator(Operator)
sympy.physics.quantum.DifferentialOperator._apply_operator_Wavefunction(self,func)
sympy.physics.quantum.DifferentialOperator._eval_derivative(self,symbol)
sympy.physics.quantum.DifferentialOperator._print(self,printer,*args)
sympy.physics.quantum.DifferentialOperator._print_pretty(self,printer,*args)
sympy.physics.quantum.DifferentialOperator.expr(self)
sympy.physics.quantum.DifferentialOperator.free_symbols(self)
sympy.physics.quantum.DifferentialOperator.function(self)
sympy.physics.quantum.DifferentialOperator.variables(self)
sympy.physics.quantum.HermitianOperator(Operator)
sympy.physics.quantum.HermitianOperator._eval_inverse(self)
sympy.physics.quantum.HermitianOperator._eval_power(self,exp)
sympy.physics.quantum.IdentityOperator(self,*args,**hints)
sympy.physics.quantum.IdentityOperator.__mul__(self,other)
sympy.physics.quantum.IdentityOperator.__rmul__(self,other)
sympy.physics.quantum.IdentityOperator._apply_operator(self,ket,**options)
sympy.physics.quantum.IdentityOperator._eval_adjoint(self)
sympy.physics.quantum.IdentityOperator._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.IdentityOperator._eval_commutator(self,other,**hints)
sympy.physics.quantum.IdentityOperator._eval_inverse(self)
sympy.physics.quantum.IdentityOperator._eval_power(self,exp)
sympy.physics.quantum.IdentityOperator._print_contents(self,printer,*args)
sympy.physics.quantum.IdentityOperator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.IdentityOperator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.IdentityOperator._represent_default_basis(self,**options)
sympy.physics.quantum.IdentityOperator.default_args(self)
sympy.physics.quantum.IdentityOperator.dimension(self)
sympy.physics.quantum.Operator(QExpr)
sympy.physics.quantum.Operator._apply_operator(self,ket,**options)
sympy.physics.quantum.Operator._eval_anticommutator(self,other,**options)
sympy.physics.quantum.Operator._eval_commutator(self,other,**options)
sympy.physics.quantum.Operator._eval_inverse(self)
sympy.physics.quantum.Operator._print_contents(self,printer,*args)
sympy.physics.quantum.Operator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.Operator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.Operator._print_operator_name(self,printer,*args)
sympy.physics.quantum.Operator._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.Operator.default_args(self)
sympy.physics.quantum.Operator.inverse(self)
sympy.physics.quantum.Operator.matrix_element(self,*args)
sympy.physics.quantum.OuterProduct(cls,*args,**old_assumptions)
sympy.physics.quantum.OuterProduct._eval_adjoint(self)
sympy.physics.quantum.OuterProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.OuterProduct._latex(self,printer,*args)
sympy.physics.quantum.OuterProduct._pretty(self,printer,*args)
sympy.physics.quantum.OuterProduct._represent(self,**options)
sympy.physics.quantum.OuterProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.OuterProduct._sympystr(self,printer,*args)
sympy.physics.quantum.OuterProduct.bra(self)
sympy.physics.quantum.OuterProduct.ket(self)
sympy.physics.quantum.UnitaryOperator(Operator)
sympy.physics.quantum.UnitaryOperator._eval_adjoint(self)
sympy.physics.quantum.operator.DifferentialOperator(Operator)
sympy.physics.quantum.operator.DifferentialOperator._apply_operator_Wavefunction(self,func)
sympy.physics.quantum.operator.DifferentialOperator._eval_derivative(self,symbol)
sympy.physics.quantum.operator.DifferentialOperator._print(self,printer,*args)
sympy.physics.quantum.operator.DifferentialOperator._print_pretty(self,printer,*args)
sympy.physics.quantum.operator.DifferentialOperator.expr(self)
sympy.physics.quantum.operator.DifferentialOperator.free_symbols(self)
sympy.physics.quantum.operator.DifferentialOperator.function(self)
sympy.physics.quantum.operator.DifferentialOperator.variables(self)
sympy.physics.quantum.operator.HermitianOperator(Operator)
sympy.physics.quantum.operator.HermitianOperator._eval_inverse(self)
sympy.physics.quantum.operator.HermitianOperator._eval_power(self,exp)
sympy.physics.quantum.operator.IdentityOperator(self,*args,**hints)
sympy.physics.quantum.operator.IdentityOperator.__init__(self,*args,**hints)
sympy.physics.quantum.operator.IdentityOperator.__mul__(self,other)
sympy.physics.quantum.operator.IdentityOperator.__rmul__(self,other)
sympy.physics.quantum.operator.IdentityOperator._apply_operator(self,ket,**options)
sympy.physics.quantum.operator.IdentityOperator._eval_adjoint(self)
sympy.physics.quantum.operator.IdentityOperator._eval_anticommutator(self,other,**hints)
sympy.physics.quantum.operator.IdentityOperator._eval_commutator(self,other,**hints)
sympy.physics.quantum.operator.IdentityOperator._eval_inverse(self)
sympy.physics.quantum.operator.IdentityOperator._eval_power(self,exp)
sympy.physics.quantum.operator.IdentityOperator._print_contents(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.operator.IdentityOperator._represent_default_basis(self,**options)
sympy.physics.quantum.operator.IdentityOperator.default_args(self)
sympy.physics.quantum.operator.IdentityOperator.dimension(self)
sympy.physics.quantum.operator.Operator(QExpr)
sympy.physics.quantum.operator.Operator._apply_operator(self,ket,**options)
sympy.physics.quantum.operator.Operator._eval_anticommutator(self,other,**options)
sympy.physics.quantum.operator.Operator._eval_commutator(self,other,**options)
sympy.physics.quantum.operator.Operator._eval_inverse(self)
sympy.physics.quantum.operator.Operator._print_contents(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_contents_latex(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_operator_name(self,printer,*args)
sympy.physics.quantum.operator.Operator._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.operator.Operator.default_args(self)
sympy.physics.quantum.operator.Operator.inverse(self)
sympy.physics.quantum.operator.Operator.matrix_element(self,*args)
sympy.physics.quantum.operator.OuterProduct(cls,*args,**old_assumptions)
sympy.physics.quantum.operator.OuterProduct.__new__(cls,*args,**old_assumptions)
sympy.physics.quantum.operator.OuterProduct._eval_adjoint(self)
sympy.physics.quantum.operator.OuterProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.operator.OuterProduct._latex(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._pretty(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._represent(self,**options)
sympy.physics.quantum.operator.OuterProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct._sympystr(self,printer,*args)
sympy.physics.quantum.operator.OuterProduct.bra(self)
sympy.physics.quantum.operator.OuterProduct.ket(self)
sympy.physics.quantum.operator.UnitaryOperator(Operator)
sympy.physics.quantum.operator.UnitaryOperator._eval_adjoint(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/qubit.py----------------------------------------
A:sympy.physics.quantum.qubit.args->sympify(args)
A:sympy.physics.quantum.qubit.newargs->list(self.qubit_values)
A:sympy.physics.quantum.qubit.bit->int(self.dimension - i - 1)
A:sympy.physics.quantum.qubit.format->options.get('format', 'sympy')
A:sympy.physics.quantum.qubit.indices->kwargs.get('indices', [])
A:sympy.physics.quantum.qubit.sorted_idx->list(range(0, self.nqubits))
A:sympy.physics.quantum.qubit.new_mat->self._reduced_density(new_mat, int(sorted_idx[i]))
A:sympy.physics.quantum.qubit.old_matrix->represent(matrix, **options)
A:sympy.physics.quantum.qubit.new_matrix->Matrix().zeros(new_size)
A:sympy.physics.quantum.qubit.col->find_index_that_is_projected(j, k, qubit)
A:sympy.physics.quantum.qubit.row->find_index_that_is_projected(i, k, qubit)
A:sympy.physics.quantum.qubit.rvalues->reversed(range(bitcount(abs(args[0]))))
A:sympy.physics.quantum.qubit.need->bitcount(abs(args[0]))
A:sympy.physics.quantum.qubit.label->self._print_label(printer, *args)
A:sympy.physics.quantum.qubit.nqubits->int(math.log(size, 2) + 0.1)
A:sympy.physics.quantum.qubit.element->complex(element)
A:sympy.physics.quantum.qubit.result->result.expand().expand()
A:sympy.physics.quantum.qubit.eigen->mat.eigenvects()
A:sympy.physics.quantum.qubit.m->m.normalized().normalized()
A:sympy.physics.quantum.qubit.size->max(m.shape)
A:sympy.physics.quantum.qubit.possible_outcomes->_get_possible_outcomes(m, bits)
A:sympy.physics.quantum.qubit.next_matrix->matrix_to_qubit(outcome)
A:sympy.physics.quantum.qubit.random_number->random.random()
sympy.physics.quantum.qubit.IntQubit(IntQubitState,Qubit)
sympy.physics.quantum.qubit.IntQubit._eval_innerproduct_IntQubitBra(self,bra,**hints)
sympy.physics.quantum.qubit.IntQubit.dual_class(self)
sympy.physics.quantum.qubit.IntQubitBra(IntQubitState,QubitBra)
sympy.physics.quantum.qubit.IntQubitBra.dual_class(self)
sympy.physics.quantum.qubit.IntQubitState(QubitState)
sympy.physics.quantum.qubit.IntQubitState._eval_args(cls,args)
sympy.physics.quantum.qubit.IntQubitState._print_label(self,printer,*args)
sympy.physics.quantum.qubit.IntQubitState._print_label_pretty(self,printer,*args)
sympy.physics.quantum.qubit.IntQubitState.as_int(self)
sympy.physics.quantum.qubit.Qubit(QubitState,Ket)
sympy.physics.quantum.qubit.Qubit._eval_innerproduct_QubitBra(self,bra,**hints)
sympy.physics.quantum.qubit.Qubit._eval_trace(self,bra,**kwargs)
sympy.physics.quantum.qubit.Qubit._reduced_density(self,matrix,qubit,**options)
sympy.physics.quantum.qubit.Qubit._represent_ZGate(self,basis,**options)
sympy.physics.quantum.qubit.Qubit._represent_default_basis(self,**options)
sympy.physics.quantum.qubit.Qubit.dual_class(self)
sympy.physics.quantum.qubit.QubitBra(QubitState,Bra)
sympy.physics.quantum.qubit.QubitBra.dual_class(self)
sympy.physics.quantum.qubit.QubitState(State)
sympy.physics.quantum.qubit.QubitState.__getitem__(self,bit)
sympy.physics.quantum.qubit.QubitState.__len__(self)
sympy.physics.quantum.qubit.QubitState._eval_args(cls,args)
sympy.physics.quantum.qubit.QubitState._eval_hilbert_space(cls,args)
sympy.physics.quantum.qubit.QubitState.dimension(self)
sympy.physics.quantum.qubit.QubitState.flip(self,*bits)
sympy.physics.quantum.qubit.QubitState.nqubits(self)
sympy.physics.quantum.qubit.QubitState.qubit_values(self)
sympy.physics.quantum.qubit._get_possible_outcomes(m,bits)
sympy.physics.quantum.qubit.matrix_to_density(mat)
sympy.physics.quantum.qubit.matrix_to_qubit(matrix)
sympy.physics.quantum.qubit.measure_all(qubit,format='sympy',normalize=True)
sympy.physics.quantum.qubit.measure_all_oneshot(qubit,format='sympy')
sympy.physics.quantum.qubit.measure_partial(qubit,bits,format='sympy',normalize=True)
sympy.physics.quantum.qubit.measure_partial_oneshot(qubit,bits,format='sympy')
sympy.physics.quantum.qubit.qubit_to_matrix(qubit,format='sympy')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/fermion.py----------------------------------------
A:sympy.physics.quantum.fermion.pform->printer._print(self.args[0], *args)
sympy.physics.quantum.fermion.FermionFockBra(cls,n)
sympy.physics.quantum.fermion.FermionFockBra.__new__(cls,n)
sympy.physics.quantum.fermion.FermionFockBra.dual_class(self)
sympy.physics.quantum.fermion.FermionFockBra.n(self)
sympy.physics.quantum.fermion.FermionFockKet(cls,n)
sympy.physics.quantum.fermion.FermionFockKet.__new__(cls,n)
sympy.physics.quantum.fermion.FermionFockKet._apply_operator_FermionOp(self,op,**options)
sympy.physics.quantum.fermion.FermionFockKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.fermion.FermionFockKet._eval_innerproduct_FermionFockBra(self,bra,**hints)
sympy.physics.quantum.fermion.FermionFockKet.dual_class(self)
sympy.physics.quantum.fermion.FermionFockKet.n(self)
sympy.physics.quantum.fermion.FermionOp(cls,*args,**hints)
sympy.physics.quantum.fermion.FermionOp.__new__(cls,*args,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_adjoint(self)
sympy.physics.quantum.fermion.FermionOp._eval_anticommutator_BosonOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_anticommutator_FermionOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._eval_commutator_FermionOp(self,other,**hints)
sympy.physics.quantum.fermion.FermionOp._print_contents(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.fermion.FermionOp.default_args(self)
sympy.physics.quantum.fermion.FermionOp.is_annihilation(self)
sympy.physics.quantum.fermion.FermionOp.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/hilbert.py----------------------------------------
A:sympy.physics.quantum.hilbert.obj->sympy.Basic.__new__(cls, *args)
A:sympy.physics.quantum.hilbert.ustr->u('F')
A:sympy.physics.quantum.hilbert.dimension->sympify(dimension)
A:sympy.physics.quantum.hilbert.r->cls.eval(args)
A:sympy.physics.quantum.hilbert.pform_exp->prettyForm(*pform_exp.left(prettyForm('x')))
A:sympy.physics.quantum.hilbert.pform_base->printer._print(self.base, *args)
A:sympy.physics.quantum.hilbert.interval->printer._print(self.interval, *args)
A:sympy.physics.quantum.hilbert.s->printer._print(arg, *args)
A:sympy.physics.quantum.hilbert.spaces_reprs->self._spaces_printer(printer, *args)
A:sympy.physics.quantum.hilbert.spaces_strs->self._spaces_printer(printer, *args)
A:sympy.physics.quantum.hilbert.length->len(self.args)
A:sympy.physics.quantum.hilbert.pform->prettyForm(*pform.right(' + '))
A:sympy.physics.quantum.hilbert.next_pform->prettyForm(*next_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.hilbert.arg_s->printer._print(self.args[i], *args)
A:sympy.physics.quantum.hilbert.base->printer._print(self.base, *args)
A:sympy.physics.quantum.hilbert.exp->printer._print(self.exp, *args)
sympy.physics.quantum.ComplexSpace(cls,dimension)
sympy.physics.quantum.ComplexSpace._latex(self,printer,*args)
sympy.physics.quantum.ComplexSpace._pretty(self,printer,*args)
sympy.physics.quantum.ComplexSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.ComplexSpace._sympystr(self,printer,*args)
sympy.physics.quantum.ComplexSpace.dimension(self)
sympy.physics.quantum.ComplexSpace.eval(cls,dimension)
sympy.physics.quantum.DirectSumHilbertSpace(cls,*args)
sympy.physics.quantum.DirectSumHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.DirectSumHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.DirectSumHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.DirectSumHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.DirectSumHilbertSpace.dimension(self)
sympy.physics.quantum.DirectSumHilbertSpace.eval(cls,args)
sympy.physics.quantum.DirectSumHilbertSpace.spaces(self)
sympy.physics.quantum.FockSpace(cls)
sympy.physics.quantum.FockSpace._latex(self,printer,*args)
sympy.physics.quantum.FockSpace._pretty(self,printer,*args)
sympy.physics.quantum.FockSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.FockSpace._sympystr(self,printer,*args)
sympy.physics.quantum.FockSpace.dimension(self)
sympy.physics.quantum.HilbertSpace(cls)
sympy.physics.quantum.HilbertSpace.__add__(self,other)
sympy.physics.quantum.HilbertSpace.__contains__(self,other)
sympy.physics.quantum.HilbertSpace.__mul__(self,other)
sympy.physics.quantum.HilbertSpace.__pow__(self,other,mod=None)
sympy.physics.quantum.HilbertSpace.__radd__(self,other)
sympy.physics.quantum.HilbertSpace.__rmul__(self,other)
sympy.physics.quantum.HilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.HilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.HilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.HilbertSpace.dimension(self)
sympy.physics.quantum.HilbertSpaceError(QuantumError)
sympy.physics.quantum.L2(cls,interval)
sympy.physics.quantum.L2._latex(self,printer,*args)
sympy.physics.quantum.L2._pretty(self,printer,*args)
sympy.physics.quantum.L2._sympyrepr(self,printer,*args)
sympy.physics.quantum.L2._sympystr(self,printer,*args)
sympy.physics.quantum.L2.dimension(self)
sympy.physics.quantum.L2.interval(self)
sympy.physics.quantum.TensorPowerHilbertSpace(cls,*args)
sympy.physics.quantum.TensorPowerHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.TensorPowerHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.TensorPowerHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.TensorPowerHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.TensorPowerHilbertSpace.base(self)
sympy.physics.quantum.TensorPowerHilbertSpace.dimension(self)
sympy.physics.quantum.TensorPowerHilbertSpace.eval(cls,args)
sympy.physics.quantum.TensorPowerHilbertSpace.exp(self)
sympy.physics.quantum.TensorProductHilbertSpace(cls,*args)
sympy.physics.quantum.TensorProductHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.TensorProductHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.TensorProductHilbertSpace._spaces_printer(self,printer,*args)
sympy.physics.quantum.TensorProductHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.TensorProductHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.TensorProductHilbertSpace.dimension(self)
sympy.physics.quantum.TensorProductHilbertSpace.eval(cls,args)
sympy.physics.quantum.TensorProductHilbertSpace.spaces(self)
sympy.physics.quantum.hilbert.ComplexSpace(cls,dimension)
sympy.physics.quantum.hilbert.ComplexSpace.__new__(cls,dimension)
sympy.physics.quantum.hilbert.ComplexSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.ComplexSpace.dimension(self)
sympy.physics.quantum.hilbert.ComplexSpace.eval(cls,dimension)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.__new__(cls,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.DirectSumHilbertSpace.spaces(self)
sympy.physics.quantum.hilbert.FockSpace(cls)
sympy.physics.quantum.hilbert.FockSpace.__new__(cls)
sympy.physics.quantum.hilbert.FockSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.FockSpace.dimension(self)
sympy.physics.quantum.hilbert.HilbertSpace(cls)
sympy.physics.quantum.hilbert.HilbertSpace.__add__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__contains__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__mul__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__new__(cls)
sympy.physics.quantum.hilbert.HilbertSpace.__pow__(self,other,mod=None)
sympy.physics.quantum.hilbert.HilbertSpace.__radd__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace.__rmul__(self,other)
sympy.physics.quantum.hilbert.HilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.HilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.HilbertSpaceError(QuantumError)
sympy.physics.quantum.hilbert.L2(cls,interval)
sympy.physics.quantum.hilbert.L2.__new__(cls,interval)
sympy.physics.quantum.hilbert.L2._latex(self,printer,*args)
sympy.physics.quantum.hilbert.L2._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.L2._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.L2._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.L2.dimension(self)
sympy.physics.quantum.hilbert.L2.interval(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.__new__(cls,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.base(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.TensorPowerHilbertSpace.exp(self)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace(cls,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.__new__(cls,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._latex(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._pretty(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._spaces_printer(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._sympyrepr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace._sympystr(self,printer,*args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.dimension(self)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.eval(cls,args)
sympy.physics.quantum.hilbert.TensorProductHilbertSpace.spaces(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/operatorset.py----------------------------------------
A:sympy.physics.quantum.operatorset.op_mapping->dict(((v, k) for (k, v) in state_mapping.items()))
A:sympy.physics.quantum.operatorset.ops->frozenset(operators)
A:sympy.physics.quantum.operatorset.ret->_make_default(op_classes)
A:sympy.physics.quantum.operatorset.classes->frozenset(tmp)
A:sympy.physics.quantum.operatorset.op_instance->operators()
A:sympy.physics.quantum.operatorset.state_inst->_make_default(state)
sympy.physics.quantum.operatorset._get_ops(state_inst,op_classes,**options)
sympy.physics.quantum.operatorset._get_state(state_class,ops,**options)
sympy.physics.quantum.operatorset._make_default(expr)
sympy.physics.quantum.operatorset._make_set(ops)
sympy.physics.quantum.operatorset.operators_to_state(operators,**options)
sympy.physics.quantum.operatorset.state_to_operators(state,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/anticommutator.py----------------------------------------
A:sympy.physics.quantum.anticommutator.r->cls.eval(A, B)
A:sympy.physics.quantum.anticommutator.obj->sympy.Expr.__new__(cls, A, B)
A:sympy.physics.quantum.anticommutator.(ca, nca)->a.args_cnc()
A:sympy.physics.quantum.anticommutator.(cb, ncb)->b.args_cnc()
A:sympy.physics.quantum.anticommutator.comm->B._eval_anticommutator(A, **hints)
A:sympy.physics.quantum.anticommutator.pform->prettyForm(*pform.parens(left='{', right='}'))
sympy.physics.quantum.antiAntiCommutator(cls,A,B)
sympy.physics.quantum.antiAntiCommutator._eval_adjoint(self)
sympy.physics.quantum.antiAntiCommutator._latex(self,printer,*args)
sympy.physics.quantum.antiAntiCommutator._pretty(self,printer,*args)
sympy.physics.quantum.antiAntiCommutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.antiAntiCommutator._sympystr(self,printer,*args)
sympy.physics.quantum.antiAntiCommutator.doit(self,**hints)
sympy.physics.quantum.antiAntiCommutator.eval(cls,a,b)
sympy.physics.quantum.anticommutator.AntiCommutator(cls,A,B)
sympy.physics.quantum.anticommutator.AntiCommutator.__new__(cls,A,B)
sympy.physics.quantum.anticommutator.AntiCommutator._eval_adjoint(self)
sympy.physics.quantum.anticommutator.AntiCommutator._latex(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._pretty(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._sympyrepr(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator._sympystr(self,printer,*args)
sympy.physics.quantum.anticommutator.AntiCommutator.doit(self,**hints)
sympy.physics.quantum.anticommutator.AntiCommutator.eval(cls,a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/spin.py----------------------------------------
A:sympy.physics.quantum.spin.j->Add(*label[2])
A:sympy.physics.quantum.spin.a->expr.subs(state, _uncouple(state, jn, jcoupling_list)).atoms(SpinState)
A:sympy.physics.quantum.spin.b->prettyForm(u('2'))
A:sympy.physics.quantum.spin.(size, mvals)->m_values(j)
A:sympy.physics.quantum.spin.result->zeros(self.hilbert_space.dimension, 1)
A:sympy.physics.quantum.spin.me->self.matrix_element(j, mvals[p], j, mvals[q])
A:sympy.physics.quantum.spin.state->TensorProduct(*[evect(j, m) for (j, m) in zip(jn, mvals)])
A:sympy.physics.quantum.spin.ret->qapply(self * state)
A:sympy.physics.quantum.spin.new_func->qapply(self * s.function)
A:sympy.physics.quantum.spin.jp->JplusOp(self.name)._represent_JzOp(basis, **options)
A:sympy.physics.quantum.spin.jm->JminusOp(self.name)._represent_JzOp(basis, **options)
A:sympy.physics.quantum.spin.args->prettyForm(*args.parens())
A:sympy.physics.quantum.spin.evaluate->hints.get('evaluate', False)
A:sympy.physics.quantum.spin.result[p, q]->self.matrix_element(j, mvals[p], j, mvals[q]).doit()
A:sympy.physics.quantum.spin.size->m_values(j)
A:sympy.physics.quantum.spin.r->simplify(r)
A:sympy.physics.quantum.spin.z->simplify(r).doit()
A:sympy.physics.quantum.spin.mp->sympify(self.mp)
A:sympy.physics.quantum.spin.top->prettyForm(*top.right(' ' * (pad - top.width())))
A:sympy.physics.quantum.spin.bot->prettyForm(*bot.right(' ' * (pad - bot.width())))
A:sympy.physics.quantum.spin.pad->max(top.width(), bot.width())
A:sympy.physics.quantum.spin.s->prettyForm(*s.right(args))
A:sympy.physics.quantum.spin.m->sympify(m)
A:sympy.physics.quantum.spin.alpha->sympify(options.get('alpha', 0))
A:sympy.physics.quantum.spin.beta->sympify(options.get('beta', 0))
A:sympy.physics.quantum.spin.gamma->sympify(options.get('gamma', 0))
A:sympy.physics.quantum.spin.Jx->JxOp('J')
A:sympy.physics.quantum.spin.Jy->JyOp('J')
A:sympy.physics.quantum.spin.Jz->JzOp('J')
A:sympy.physics.quantum.spin.J2->J2Op('J')
A:sympy.physics.quantum.spin.Jplus->JplusOp('J')
A:sympy.physics.quantum.spin.Jminus->JminusOp('J')
A:sympy.physics.quantum.spin.result[p, 0]->Rotation.D(self.j, mval, self.m, alpha, beta, gamma)
A:sympy.physics.quantum.spin.vect->represent(self, basis=basis, **options)
A:sympy.physics.quantum.spin.mi->symbols('mi%d' % i)
A:sympy.physics.quantum.spin.lt->Rotation.D(j, mi, self.m, *angles)
A:sympy.physics.quantum.spin.n_sort->sorted(n_list[n1 - 1] + n_list[n2 - 1])
A:sympy.physics.quantum.spin.jn->Tuple(*[sympify(ji) for ji in jn])
A:sympy.physics.quantum.spin.jcoupling->Tuple(*[Tuple(sympify(n1), sympify(n2), sympify(ji)) for (n1, n2, ji) in jcoupling])
A:sympy.physics.quantum.spin.(coupled_n, coupled_jn)->_build_coupled(jcoupling_list, len(jn))
A:sympy.physics.quantum.spin.jvals->list(jn)
A:sympy.physics.quantum.spin.symb->prettyForm('j' + n + '=')
A:sympy.physics.quantum.spin.item->prettyForm(*symb.right(printer._print(jn)))
A:sympy.physics.quantum.spin.n->len(jn)
A:sympy.physics.quantum.spin.evect->TensorProduct(*[evect(j, m) for (j, m) in zip(jn, mvals)]).uncoupled_class()
A:sympy.physics.quantum.spin.result[start:start + 2 * self.j + 1, 0]->evect(self.j, self.m)._represent_base(**options)
A:sympy.physics.quantum.spin.expr->expr.subs(state, _uncouple(state, jn, jcoupling_list)).subs(state, _uncouple(state, jn, jcoupling_list))
A:sympy.physics.quantum.spin.coupled_evect->states[0].coupled_class()
A:sympy.physics.quantum.spin.j1_n->list(n_list[n1 - 1])
A:sympy.physics.quantum.spin.j2_n->list(n_list[n2 - 1])
A:sympy.physics.quantum.spin.n_list[min(n1, n2) - 1]->sorted(j1_n + j2_n)
A:sympy.physics.quantum.spin.tot->binomial(diff + n - 1, diff)
A:sympy.physics.quantum.spin.diff_list->_confignum_to_difflist(config_num, diff, n)
A:sympy.physics.quantum.spin.coupled_j->list(jn)
A:sympy.physics.quantum.spin.m1->Add(*[jn[x - 1] - diff_list[x - 1] for x in j1_n])
A:sympy.physics.quantum.spin.m2->Add(*[jn[x - 1] - diff_list[x - 1] for x in j2_n])
A:sympy.physics.quantum.spin.coeff->Mul(*[CG(*term).doit() for term in cg_terms])
A:sympy.physics.quantum.spin.j3->symbols(j3_name)
A:sympy.physics.quantum.spin.j_list->list(jn)
A:sympy.physics.quantum.spin.mvals->symbols(m_str)
A:sympy.physics.quantum.spin.cg_coeff->Mul(*[CG(*cg_term) for cg_term in cg_terms])
A:sympy.physics.quantum.spin.rem_configs->binomial(diff + rem_spots - 1, diff)
sympy.physics.quantum.spin.CoupledSpinState(cls,j,m,jn,*jcoupling)
sympy.physics.quantum.spin.CoupledSpinState.__new__(cls,j,m,jn,*jcoupling)
sympy.physics.quantum.spin.CoupledSpinState._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jx(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jy(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._eval_rewrite_as_Jz(self,*args,**options)
sympy.physics.quantum.spin.CoupledSpinState._print_label(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._print_label_latex(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._print_label_pretty(self,printer,*args)
sympy.physics.quantum.spin.CoupledSpinState._represent_coupled_base(self,**options)
sympy.physics.quantum.spin.CoupledSpinState.coupled_jn(self)
sympy.physics.quantum.spin.CoupledSpinState.coupled_n(self)
sympy.physics.quantum.spin.CoupledSpinState.coupling(self)
sympy.physics.quantum.spin.CoupledSpinState.jn(self)
sympy.physics.quantum.spin.J2Op(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.J2Op._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.J2Op._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.J2Op._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JplusOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.J2Op._eval_rewrite_as_plusminus(self,*args)
sympy.physics.quantum.spin.J2Op._eval_rewrite_as_xyz(self,*args)
sympy.physics.quantum.spin.J2Op._print_contents_latex(self,printer,*args)
sympy.physics.quantum.spin.J2Op._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.spin.J2Op._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.J2Op._represent_default_basis(self,**options)
sympy.physics.quantum.spin.J2Op.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JminusOp(SpinOpBase,Operator)
sympy.physics.quantum.spin.JminusOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JminusOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JminusOp._eval_rewrite_as_xyz(self,*args)
sympy.physics.quantum.spin.JminusOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JminusOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JminusOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JplusOp(SpinOpBase,Operator)
sympy.physics.quantum.spin.JplusOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JplusOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JplusOp._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.JplusOp._eval_rewrite_as_xyz(self,*args)
sympy.physics.quantum.spin.JplusOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JplusOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JplusOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.JxBra(SpinState,Bra)
sympy.physics.quantum.spin.JxBra.coupled_class(self)
sympy.physics.quantum.spin.JxBra.dual_class(self)
sympy.physics.quantum.spin.JxBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JxBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JxBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JxKet(SpinState,Ket)
sympy.physics.quantum.spin.JxKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JxKet.coupled_class(self)
sympy.physics.quantum.spin.JxKet.dual_class(self)
sympy.physics.quantum.spin.JxKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JxKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JxKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JxKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JxOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JxOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JxOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JxOp._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.JxOp._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.JxOp._eval_rewrite_as_plusminus(self,*args)
sympy.physics.quantum.spin.JxOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JxOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyBra(SpinState,Bra)
sympy.physics.quantum.spin.JyBra.coupled_class(self)
sympy.physics.quantum.spin.JyBra.dual_class(self)
sympy.physics.quantum.spin.JyBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JyBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JyBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JyKet(SpinState,Ket)
sympy.physics.quantum.spin.JyKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyKet.coupled_class(self)
sympy.physics.quantum.spin.JyKet.dual_class(self)
sympy.physics.quantum.spin.JyKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JyKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JyKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JyKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JyOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JyOp._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.JyOp._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.JyOp._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.JyOp._eval_commutator_JzOp(self,other)
sympy.physics.quantum.spin.JyOp._eval_rewrite_as_plusminus(self,*args)
sympy.physics.quantum.spin.JyOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JyOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzBra(SpinState,Bra)
sympy.physics.quantum.spin.JzBra.coupled_class(self)
sympy.physics.quantum.spin.JzBra.dual_class(self)
sympy.physics.quantum.spin.JzBraCoupled(CoupledSpinState,Bra)
sympy.physics.quantum.spin.JzBraCoupled.dual_class(self)
sympy.physics.quantum.spin.JzBraCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JzKet(SpinState,Ket)
sympy.physics.quantum.spin.JzKet._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzKet._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzKet.coupled_class(self)
sympy.physics.quantum.spin.JzKet.dual_class(self)
sympy.physics.quantum.spin.JzKetCoupled(CoupledSpinState,Ket)
sympy.physics.quantum.spin.JzKetCoupled._represent_JxOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_JyOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzKetCoupled._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzKetCoupled.dual_class(self)
sympy.physics.quantum.spin.JzKetCoupled.uncoupled_class(self)
sympy.physics.quantum.spin.JzOp(SpinOpBase,HermitianOperator)
sympy.physics.quantum.spin.JzOp._eval_commutator_JminusOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JplusOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JxOp(self,other)
sympy.physics.quantum.spin.JzOp._eval_commutator_JyOp(self,other)
sympy.physics.quantum.spin.JzOp._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.JzOp._represent_default_basis(self,**options)
sympy.physics.quantum.spin.JzOp.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.Rotation(UnitaryOperator)
sympy.physics.quantum.spin.Rotation.D(cls,j,m,mp,alpha,beta,gamma)
sympy.physics.quantum.spin.Rotation._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_coupled(self,state,ket,**options)
sympy.physics.quantum.spin.Rotation._apply_operator_uncoupled(self,state,ket,**options)
sympy.physics.quantum.spin.Rotation._eval_args(cls,args)
sympy.physics.quantum.spin.Rotation._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.Rotation._eval_inverse(self)
sympy.physics.quantum.spin.Rotation._print_operator_name(self,printer,*args)
sympy.physics.quantum.spin.Rotation._print_operator_name_latex(self,printer,*args)
sympy.physics.quantum.spin.Rotation._print_operator_name_pretty(self,printer,*args)
sympy.physics.quantum.spin.Rotation._represent_JzOp(self,basis,**options)
sympy.physics.quantum.spin.Rotation._represent_base(self,basis,**options)
sympy.physics.quantum.spin.Rotation._represent_default_basis(self,**options)
sympy.physics.quantum.spin.Rotation.alpha(self)
sympy.physics.quantum.spin.Rotation.beta(self)
sympy.physics.quantum.spin.Rotation.d(cls,j,m,mp,beta)
sympy.physics.quantum.spin.Rotation.gamma(self)
sympy.physics.quantum.spin.Rotation.matrix_element(self,j,m,jp,mp)
sympy.physics.quantum.spin.SpinOpBase(object)
sympy.physics.quantum.spin.SpinOpBase._apply_op(self,ket,orig_basis,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JxKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JxKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JyKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JyKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_JzKetCoupled(self,ket,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_Sum(self,s,**options)
sympy.physics.quantum.spin.SpinOpBase._apply_operator_TensorProduct(self,tp,**options)
sympy.physics.quantum.spin.SpinOpBase._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.SpinOpBase._eval_trace(self,**options)
sympy.physics.quantum.spin.SpinOpBase._print_contents(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._print_contents_latex(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.spin.SpinOpBase._represent_base(self,basis,**options)
sympy.physics.quantum.spin.SpinOpBase.name(self)
sympy.physics.quantum.spin.SpinState(cls,j,m)
sympy.physics.quantum.spin.SpinState.__new__(cls,j,m)
sympy.physics.quantum.spin.SpinState._eval_hilbert_space(cls,label)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JxBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JyBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_innerproduct_JzBra(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jx(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jy(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_rewrite_as_Jz(self,*args,**options)
sympy.physics.quantum.spin.SpinState._eval_trace(self,bra,**hints)
sympy.physics.quantum.spin.SpinState._represent_base(self,**options)
sympy.physics.quantum.spin.SpinState._rewrite_basis(self,basis,evect,**options)
sympy.physics.quantum.spin.SpinState.j(self)
sympy.physics.quantum.spin.SpinState.m(self)
sympy.physics.quantum.spin.WignerD(cls,*args,**hints)
sympy.physics.quantum.spin.WignerD.__new__(cls,*args,**hints)
sympy.physics.quantum.spin.WignerD._eval_wignerd(self)
sympy.physics.quantum.spin.WignerD._latex(self,printer,*args)
sympy.physics.quantum.spin.WignerD._pretty(self,printer,*args)
sympy.physics.quantum.spin.WignerD.alpha(self)
sympy.physics.quantum.spin.WignerD.beta(self)
sympy.physics.quantum.spin.WignerD.doit(self,**hints)
sympy.physics.quantum.spin.WignerD.gamma(self)
sympy.physics.quantum.spin.WignerD.j(self)
sympy.physics.quantum.spin.WignerD.m(self)
sympy.physics.quantum.spin.WignerD.mp(self)
sympy.physics.quantum.spin._build_coupled(jcoupling,length)
sympy.physics.quantum.spin._confignum_to_difflist(config_num,diff,list_len)
sympy.physics.quantum.spin._couple(tp,jcoupling_list)
sympy.physics.quantum.spin._uncouple(state,jn,jcoupling_list)
sympy.physics.quantum.spin.couple(expr,jcoupling_list=None)
sympy.physics.quantum.spin.m_values(j)
sympy.physics.quantum.spin.uncouple(expr,jn=None,jcoupling_list=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/boson.py----------------------------------------
A:sympy.physics.quantum.boson.args1->tuple((arg for arg in other.args if arg.is_commutative))
A:sympy.physics.quantum.boson.args2->tuple((arg for arg in other.args if not arg.is_commutative))
A:sympy.physics.quantum.boson.pform->printer._print(self.args[0], *args)
sympy.physics.quantum.boson.BosonCoherentBra(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentBra.__new__(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentBra._apply_operator_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonCoherentBra.alpha(self)
sympy.physics.quantum.boson.BosonCoherentBra.dual_class(self)
sympy.physics.quantum.boson.BosonCoherentKet(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentKet.__new__(cls,alpha)
sympy.physics.quantum.boson.BosonCoherentKet._apply_operator_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonCoherentKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonCoherentKet._eval_innerproduct_BosonCoherentBra(self,bra,**hints)
sympy.physics.quantum.boson.BosonCoherentKet.alpha(self)
sympy.physics.quantum.boson.BosonCoherentKet.dual_class(self)
sympy.physics.quantum.boson.BosonFockBra(cls,n)
sympy.physics.quantum.boson.BosonFockBra.__new__(cls,n)
sympy.physics.quantum.boson.BosonFockBra._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonFockBra.dual_class(self)
sympy.physics.quantum.boson.BosonFockBra.n(self)
sympy.physics.quantum.boson.BosonFockKet(cls,n)
sympy.physics.quantum.boson.BosonFockKet.__new__(cls,n)
sympy.physics.quantum.boson.BosonFockKet._apply_operator_BosonOp(self,op,**options)
sympy.physics.quantum.boson.BosonFockKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.boson.BosonFockKet._eval_innerproduct_BosonFockBra(self,bra,**hints)
sympy.physics.quantum.boson.BosonFockKet.dual_class(self)
sympy.physics.quantum.boson.BosonFockKet.n(self)
sympy.physics.quantum.boson.BosonOp(cls,*args,**hints)
sympy.physics.quantum.boson.BosonOp.__mul__(self,other)
sympy.physics.quantum.boson.BosonOp.__new__(cls,*args,**hints)
sympy.physics.quantum.boson.BosonOp._eval_adjoint(self)
sympy.physics.quantum.boson.BosonOp._eval_anticommutator_BosonOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._eval_commutator_FermionOp(self,other,**hints)
sympy.physics.quantum.boson.BosonOp._print_contents(self,printer,*args)
sympy.physics.quantum.boson.BosonOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.boson.BosonOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.boson.BosonOp.default_args(self)
sympy.physics.quantum.boson.BosonOp.is_annihilation(self)
sympy.physics.quantum.boson.BosonOp.name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/identitysearch.py----------------------------------------
A:sympy.physics.quantum.identitysearch.np->import_module('numpy')
A:sympy.physics.quantum.identitysearch.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.identitysearch.matrix->represent(Mul(*circuit), nqubits=nqubits)
A:sympy.physics.quantum.identitysearch.dense_matrix->represent(Mul(*circuit), nqubits=nqubits).todense().getA()
A:sympy.physics.quantum.identitysearch.bool_real->import_module('numpy').logical_and(dense_matrix.real > -eps, dense_matrix.real < eps)
A:sympy.physics.quantum.identitysearch.bool_imag->import_module('numpy').logical_and(dense_matrix.imag > -eps, dense_matrix.imag < eps)
A:sympy.physics.quantum.identitysearch.corrected_real->import_module('numpy').where(bool_real, 0.0, dense_matrix.real)
A:sympy.physics.quantum.identitysearch.corrected_imag->import_module('numpy').where(bool_imag, 0.0, dense_matrix.imag)
A:sympy.physics.quantum.identitysearch.is_diagonal->bool_indices.all()
A:sympy.physics.quantum.identitysearch.trace_of_corrected->(corrected_dense / first_element).trace()
A:sympy.physics.quantum.identitysearch.expected_trace->pow(2, nqubits)
A:sympy.physics.quantum.identitysearch.matrix_trace->represent(Mul(*circuit), nqubits=nqubits).trace()
A:sympy.physics.quantum.identitysearch.ll_gate_is_unitary->is_scalar_matrix((Dagger(ll_gate), ll_gate), _get_min_qubits(ll_gate), True)
A:sympy.physics.quantum.identitysearch.lr_gate_is_unitary->is_scalar_matrix((Dagger(lr_gate), lr_gate), _get_min_qubits(lr_gate), True)
A:sympy.physics.quantum.identitysearch.rl_gate_is_unitary->is_scalar_matrix((Dagger(rl_gate), rl_gate), _get_min_qubits(rl_gate), True)
A:sympy.physics.quantum.identitysearch.rr_gate_is_unitary->is_scalar_matrix((Dagger(rr_gate), rr_gate), _get_min_qubits(rr_gate), True)
A:sympy.physics.quantum.identitysearch.queue->deque([()])
A:sympy.physics.quantum.identitysearch.rules->set()
A:sympy.physics.quantum.identitysearch.max_ops->len(gate_seq)
A:sympy.physics.quantum.identitysearch.(left, right, ops)->deque([()]).popleft()
A:sympy.physics.quantum.identitysearch.new_rule->rr_op(left, right)
A:sympy.physics.quantum.identitysearch.mul_rules->set()
A:sympy.physics.quantum.identitysearch.eq_ids->set(map(convert_to_mul, eq_ids))
A:sympy.physics.quantum.identitysearch.gate_rules->generate_gate_rules(gate_seq)
A:sympy.physics.quantum.identitysearch.obj->sympy.Basic.__new__(cls, *args)
A:sympy.physics.quantum.identitysearch.obj._circuit->Mul(*args)
A:sympy.physics.quantum.identitysearch.obj._rules->generate_gate_rules(args)
A:sympy.physics.quantum.identitysearch.obj._eq_ids->generate_equivalent_ids(args)
A:sympy.physics.quantum.identitysearch.max_depth->len(gate_list)
A:sympy.physics.quantum.identitysearch.ids->set()
A:sympy.physics.quantum.identitysearch.current_circuit->deque([()]).popleft()
A:sympy.physics.quantum.identitysearch.circuit_reducible->is_reducible(new_circuit, nqubits, 1, len(new_circuit))
A:sympy.physics.quantum.identitysearch.gate_size->len(gate_list)
A:sympy.physics.quantum.identitysearch.is_scalar->is_scalar_matrix(circuit, nqubits, False)
sympy.physics.quantum.identitysearch.GateIdentity(cls,*args)
sympy.physics.quantum.identitysearch.GateIdentity.__new__(cls,*args)
sympy.physics.quantum.identitysearch.GateIdentity.__str__(self)
sympy.physics.quantum.identitysearch.GateIdentity.circuit(self)
sympy.physics.quantum.identitysearch.GateIdentity.equivalent_ids(self)
sympy.physics.quantum.identitysearch.GateIdentity.gate_rules(self)
sympy.physics.quantum.identitysearch.GateIdentity.sequence(self)
sympy.physics.quantum.identitysearch._get_min_qubits(a_gate)
sympy.physics.quantum.identitysearch.bfs_identity_search(gate_list,nqubits,max_depth=None,identity_only=False)
sympy.physics.quantum.identitysearch.generate_equivalent_ids(gate_seq,return_as_muls=False)
sympy.physics.quantum.identitysearch.generate_gate_rules(gate_seq,return_as_muls=False)
sympy.physics.quantum.identitysearch.is_degenerate(identity_set,gate_identity)
sympy.physics.quantum.identitysearch.is_reducible(circuit,nqubits,begin,end)
sympy.physics.quantum.identitysearch.is_scalar_nonsparse_matrix(circuit,nqubits,identity_only)
sympy.physics.quantum.identitysearch.is_scalar_sparse_matrix(circuit,nqubits,identity_only,eps=1e-11)
sympy.physics.quantum.identitysearch.ll_op(left,right)
sympy.physics.quantum.identitysearch.lr_op(left,right)
sympy.physics.quantum.identitysearch.random_identity_search(gate_list,numgates,nqubits)
sympy.physics.quantum.identitysearch.rl_op(left,right)
sympy.physics.quantum.identitysearch.rr_op(left,right)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/circuitplot.py----------------------------------------
A:sympy.physics.quantum.circuitplot.np->import_module('numpy')
A:sympy.physics.quantum.circuitplot.matplotlib->import_module('matplotlib', __import__kwargs={'fromlist': ['pyplot']}, catch=(RuntimeError,))
A:sympy.physics.quantum.circuitplot.self.ngates->len(self.circuit.args)
A:sympy.physics.quantum.circuitplot.wire_grid->import_module('numpy').arange(0.0, self.nqubits * scale, scale, dtype=float)
A:sympy.physics.quantum.circuitplot.gate_grid->import_module('numpy').arange(0.0, self.ngates * scale, scale, dtype=float)
A:sympy.physics.quantum.circuitplot.self._figure->pyplot.figure(figsize=(self.ngates * self.scale, self.nqubits * self.scale), facecolor='w', edgecolor='w')
A:sympy.physics.quantum.circuitplot.ax->self._figure.add_subplot(1, 1, 1, frameon=True)
A:sympy.physics.quantum.circuitplot.line->Line2D(xdata, ydata, color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.ismeasured->self._measurements()
A:sympy.physics.quantum.circuitplot.obj->self._axes.text(x, y, t, color='k', ha='center', va='center', bbox=dict(ec='k', fc='w', fill=True, lw=self.linewidth), size=self.fontsize)
A:sympy.physics.quantum.circuitplot.c->Circle((x, y), radius, ec='k', fc='w', fill=False, lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l->Line2D((x, x), (y - radius, y + radius), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l1->Line2D((x - d, x + d), (y - d, y + d), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.l2->Line2D((x - d, x + d), (y + d, y - d), color='k', lw=self.linewidth)
A:sympy.physics.quantum.circuitplot.init->inits.get(label)
A:sympy.physics.quantum.circuitplot.gate_name_latex->u('M_x')
A:sympy.physics.quantum.circuitplot.onequbitgate->CreateOneQubitGate(name, latexname)
sympy.physics.quantum.circuitplot.CreateCGate(name,latexname=None)
sympy.physics.quantum.circuitplot.CreateOneQubitGate(mcl,name,latexname=None)
sympy.physics.quantum.circuitplot.CreateOneQubitGate.__new__(mcl,name,latexname=None)
sympy.physics.quantum.circuitplot.Mx(OneQubitGate)
sympy.physics.quantum.circuitplot.Mz(OneQubitGate)
sympy.physics.quantum.circuitplot.labeller(n,symbol='q')
sympy.physics.quantum.circuitplot.render_label(label,inits={})


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/represent.py----------------------------------------
A:sympy.physics.quantum.represent.format->options.get('format', 'sympy')
A:sympy.physics.quantum.represent.temp_basis->get_basis(expr, **options)
A:sympy.physics.quantum.represent.result->integrate(result, (coord, start, end))
A:sympy.physics.quantum.represent.(base, exp)->expr().as_base_exp()
A:sympy.physics.quantum.represent.exp->_sympy_to_scalar(exp)
A:sympy.physics.quantum.represent.A->represent(expr.args[0], **options)
A:sympy.physics.quantum.represent.B->represent(expr.args[1], **options)
A:sympy.physics.quantum.represent.basis->options.pop('basis', None)
A:sympy.physics.quantum.represent.basis_kets->enumerate_states(basis_state, options['index'], 2)
A:sympy.physics.quantum.represent.prod->InnerProduct(bra, ket)
A:sympy.physics.quantum.represent.basis_state->get_basis(expr, **options)
A:sympy.physics.quantum.represent.options['basis']->get_basis(orig_expr, **options)
A:sympy.physics.quantum.represent.unities->options.pop('unities', [])
A:sympy.physics.quantum.represent.kets->enumerate_states(basis, unities)
A:sympy.physics.quantum.represent.basis_op->state_to_operators(basis)
A:sympy.physics.quantum.represent.replace_none->options.pop('replace_none', True)
A:sympy.physics.quantum.represent.state_inst->operators_to_state(expr)
A:sympy.physics.quantum.represent.state->operators_to_state(basis)
A:sympy.physics.quantum.represent.expr->expr()
A:sympy.physics.quantum.represent.num_states->len(args[1])
A:sympy.physics.quantum.represent.ret->operators_to_state(basis)._enumerate_state(num_states, **options)
sympy.physics.quantum._make_default(expr)
sympy.physics.quantum._sympy_to_scalar(e)
sympy.physics.quantum.enumerate_states(*args,**options)
sympy.physics.quantum.get_basis(expr,**options)
sympy.physics.quantum.integrate_result(orig_expr,result,**options)
sympy.physics.quantum.rep_expectation(expr,**options)
sympy.physics.quantum.rep_innerproduct(expr,**options)
sympy.physics.quantum.represent(expr,**options)
sympy.physics.quantum.represent._make_default(expr)
sympy.physics.quantum.represent._sympy_to_scalar(e)
sympy.physics.quantum.represent.enumerate_states(*args,**options)
sympy.physics.quantum.represent.get_basis(expr,**options)
sympy.physics.quantum.represent.integrate_result(orig_expr,result,**options)
sympy.physics.quantum.represent.rep_expectation(expr,**options)
sympy.physics.quantum.represent.rep_innerproduct(expr,**options)
sympy.physics.quantum.represent.represent(expr,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/pauli.py----------------------------------------
A:sympy.physics.quantum.pauli.format->options.get('format', 'sympy')
A:sympy.physics.quantum.pauli.t->type(e)
A:sympy.physics.quantum.pauli.(c, nc)->e.args_cnc()
A:sympy.physics.quantum.pauli.curr->Mul(*nc1)
A:sympy.physics.quantum.pauli.x->nc.pop(0)
A:sympy.physics.quantum.pauli.y->_qsimplify_pauli_product(curr, x)
A:sympy.physics.quantum.pauli.(c1, nc1)->_qsimplify_pauli_product(curr, x).args_cnc()
sympy.physics.quantum.pauli.SigmaMinus(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaMinus.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaPlus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaMinus._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaMinus._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaMinus._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaMinus._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaOpBase(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaOpBase.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaOpBase._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.pauli.SigmaOpBase.default_args(self)
sympy.physics.quantum.pauli.SigmaOpBase.name(self)
sympy.physics.quantum.pauli.SigmaOpBase.use_name(self)
sympy.physics.quantum.pauli.SigmaPlus(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaPlus.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaMinus(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaPlus._eval_mul(self,other)
sympy.physics.quantum.pauli.SigmaPlus._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaPlus._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaPlus._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaPlus._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaX(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaX.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaX._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_BosonOp(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaX._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaX._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaX._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaX._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaY(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaY.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaY._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_anticommutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_commutator_SigmaZ(self,other,**hints)
sympy.physics.quantum.pauli.SigmaY._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaY._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaY._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaY._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZ(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaZ.__new__(cls,*args,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_adjoint(self)
sympy.physics.quantum.pauli.SigmaZ._eval_anticommutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_anticommutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_commutator_SigmaX(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_commutator_SigmaY(self,other,**hints)
sympy.physics.quantum.pauli.SigmaZ._eval_power(self,e)
sympy.physics.quantum.pauli.SigmaZ._print_contents(self,printer,*args)
sympy.physics.quantum.pauli.SigmaZ._print_contents_latex(self,printer,*args)
sympy.physics.quantum.pauli.SigmaZ._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZBra(cls,n)
sympy.physics.quantum.pauli.SigmaZBra.__new__(cls,n)
sympy.physics.quantum.pauli.SigmaZBra.dual_class(self)
sympy.physics.quantum.pauli.SigmaZBra.n(self)
sympy.physics.quantum.pauli.SigmaZKet(cls,n)
sympy.physics.quantum.pauli.SigmaZKet.__new__(cls,n)
sympy.physics.quantum.pauli.SigmaZKet._apply_operator_SigmaMinus(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_operator_SigmaPlus(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_operator_SigmaX(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_operator_SigmaY(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._apply_operator_SigmaZ(self,op,**options)
sympy.physics.quantum.pauli.SigmaZKet._eval_hilbert_space(cls,label)
sympy.physics.quantum.pauli.SigmaZKet._eval_innerproduct_SigmaZBra(self,bra,**hints)
sympy.physics.quantum.pauli.SigmaZKet._represent_default_basis(self,**options)
sympy.physics.quantum.pauli.SigmaZKet.dual_class(self)
sympy.physics.quantum.pauli.SigmaZKet.n(self)
sympy.physics.quantum.pauli._qsimplify_pauli_product(a,b)
sympy.physics.quantum.pauli.qsimplify_pauli(e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/qasm.py----------------------------------------
A:sympy.physics.quantum.qasm.nq->len(labels)
A:sympy.physics.quantum.qasm.line->trim(line)
A:sympy.physics.quantum.qasm.words->trim(line).split()
A:sympy.physics.quantum.qasm.rest->' '.join(words[1:])
A:sympy.physics.quantum.qasm.c->c.replace(char, '').replace(char, '')
A:sympy.physics.quantum.qasm.s->s.replace("'", '').replace("'", '')
A:sympy.physics.quantum.qasm.(command, rest)->fullsplit(line)
A:sympy.physics.quantum.qasm.function->getattr(self, command)
A:sympy.physics.quantum.qasm.indices->self.indices(rest)
A:sympy.physics.quantum.qasm.(i1, i2, i3)->self.indices([a1, a2, a3])
A:sympy.physics.quantum.qasm.(fi, fj)->self.indices([a1, a2])
A:sympy.physics.quantum.qasm.ncontrols->int(ncontrols)
A:sympy.physics.quantum.qasm.command->fixcommand(name)
A:sympy.physics.quantum.qasm.symbol->stripquotes(symbol)
A:sympy.physics.quantum.qasm.self.defs[command]->CreateOneQubitGate(symbol)
sympy.physics.quantum.qasm.Qasm(self,*args,**kwargs)
sympy.physics.quantum.qasm.Qasm.__init__(self,*args,**kwargs)
sympy.physics.quantum.qasm.Qasm.add(self,*lines)
sympy.physics.quantum.qasm.Qasm.cnot(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cphase(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cx(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.cz(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.defbox(self,*args)
sympy.physics.quantum.qasm.Qasm.get_circuit(self)
sympy.physics.quantum.qasm.Qasm.get_labels(self)
sympy.physics.quantum.qasm.Qasm.h(self,arg)
sympy.physics.quantum.qasm.Qasm.index(self,arg)
sympy.physics.quantum.qasm.Qasm.indices(self,args)
sympy.physics.quantum.qasm.Qasm.measure(self,arg)
sympy.physics.quantum.qasm.Qasm.nop(self,*args)
sympy.physics.quantum.qasm.Qasm.plot(self)
sympy.physics.quantum.qasm.Qasm.qdef(self,name,ncontrols,symbol)
sympy.physics.quantum.qasm.Qasm.qubit(self,arg,init=None)
sympy.physics.quantum.qasm.Qasm.s(self,arg)
sympy.physics.quantum.qasm.Qasm.swap(self,a1,a2)
sympy.physics.quantum.qasm.Qasm.t(self,arg)
sympy.physics.quantum.qasm.Qasm.toffoli(self,a1,a2,a3)
sympy.physics.quantum.qasm.Qasm.x(self,arg)
sympy.physics.quantum.qasm.Qasm.z(self,arg)
sympy.physics.quantum.qasm.fixcommand(c)
sympy.physics.quantum.qasm.flip_index(i,n)
sympy.physics.quantum.qasm.fullsplit(line)
sympy.physics.quantum.qasm.get_index(target,labels)
sympy.physics.quantum.qasm.get_indices(targets,labels)
sympy.physics.quantum.qasm.nonblank(args)
sympy.physics.quantum.qasm.prod(c)
sympy.physics.quantum.qasm.read_qasm(lines)
sympy.physics.quantum.qasm.read_qasm_file(filename)
sympy.physics.quantum.qasm.stripquotes(s)
sympy.physics.quantum.qasm.trim(line)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/cartesian.py----------------------------------------
A:sympy.physics.quantum.cartesian.index->options.pop('index', 1)
A:sympy.physics.quantum.cartesian.states->basis._enumerate_state(2, start_index=index)
A:sympy.physics.quantum.cartesian.d->DifferentialOperator(coord1)
A:sympy.physics.quantum.cartesian.delta->DiracDelta(coord1 - coord2)
A:sympy.physics.quantum.cartesian.X->XOp('X')
A:sympy.physics.quantum.cartesian.Y->YOp('Y')
A:sympy.physics.quantum.cartesian.Z->ZOp('Z')
A:sympy.physics.quantum.cartesian.Px->PxOp('Px')
A:sympy.physics.quantum.cartesian.index_list->list(range(start_index, start_index + num_states))
A:sympy.physics.quantum.cartesian.start_index->options.pop('start_index', 1)
A:sympy.physics.quantum.cartesian.enum_states[i]->state_class(str(label) + '_' + str(ind), **options)
sympy.physics.quantum.cartesian.PositionBra3D(Bra,PositionState3D)
sympy.physics.quantum.cartesian.PositionBra3D.dual_class(self)
sympy.physics.quantum.cartesian.PositionKet3D(Ket,PositionState3D)
sympy.physics.quantum.cartesian.PositionKet3D._eval_innerproduct_PositionBra3D(self,bra,**options)
sympy.physics.quantum.cartesian.PositionKet3D.dual_class(self)
sympy.physics.quantum.cartesian.PositionState3D(State)
sympy.physics.quantum.cartesian.PositionState3D._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.PositionState3D._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.PositionState3D.default_args(self)
sympy.physics.quantum.cartesian.PositionState3D.position_x(self)
sympy.physics.quantum.cartesian.PositionState3D.position_y(self)
sympy.physics.quantum.cartesian.PositionState3D.position_z(self)
sympy.physics.quantum.cartesian.PxBra(Bra)
sympy.physics.quantum.cartesian.PxBra.default_args(self)
sympy.physics.quantum.cartesian.PxBra.dual_class(self)
sympy.physics.quantum.cartesian.PxBra.momentum(self)
sympy.physics.quantum.cartesian.PxKet(Ket)
sympy.physics.quantum.cartesian.PxKet._enumerate_state(self,*args,**options)
sympy.physics.quantum.cartesian.PxKet._eval_innerproduct_PxBra(self,bra,**hints)
sympy.physics.quantum.cartesian.PxKet._eval_innerproduct_XBra(self,bra,**hints)
sympy.physics.quantum.cartesian.PxKet._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.PxKet._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.PxKet.default_args(self)
sympy.physics.quantum.cartesian.PxKet.dual_class(self)
sympy.physics.quantum.cartesian.PxKet.momentum(self)
sympy.physics.quantum.cartesian.PxOp(HermitianOperator)
sympy.physics.quantum.cartesian.PxOp._apply_operator_PxKet(self,ket)
sympy.physics.quantum.cartesian.PxOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.PxOp._represent_XKet(self,basis,**options)
sympy.physics.quantum.cartesian.PxOp.default_args(self)
sympy.physics.quantum.cartesian.XBra(Bra)
sympy.physics.quantum.cartesian.XBra.default_args(self)
sympy.physics.quantum.cartesian.XBra.dual_class(self)
sympy.physics.quantum.cartesian.XBra.position(self)
sympy.physics.quantum.cartesian.XKet(Ket)
sympy.physics.quantum.cartesian.XKet._enumerate_state(self,num_states,**options)
sympy.physics.quantum.cartesian.XKet._eval_innerproduct_PxBra(self,bra,**hints)
sympy.physics.quantum.cartesian.XKet._eval_innerproduct_XBra(self,bra,**hints)
sympy.physics.quantum.cartesian.XKet._operators_to_state(self,op,**options)
sympy.physics.quantum.cartesian.XKet._state_to_operators(self,op_class,**options)
sympy.physics.quantum.cartesian.XKet.default_args(self)
sympy.physics.quantum.cartesian.XKet.dual_class(self)
sympy.physics.quantum.cartesian.XKet.position(self)
sympy.physics.quantum.cartesian.XOp(HermitianOperator)
sympy.physics.quantum.cartesian.XOp._apply_operator_PositionKet3D(self,ket)
sympy.physics.quantum.cartesian.XOp._apply_operator_XKet(self,ket)
sympy.physics.quantum.cartesian.XOp._eval_commutator_PxOp(self,other)
sympy.physics.quantum.cartesian.XOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.XOp._represent_PxKet(self,basis,**options)
sympy.physics.quantum.cartesian.XOp.default_args(self)
sympy.physics.quantum.cartesian.YOp(HermitianOperator)
sympy.physics.quantum.cartesian.YOp._apply_operator_PositionKet3D(self,ket)
sympy.physics.quantum.cartesian.YOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.YOp.default_args(self)
sympy.physics.quantum.cartesian.ZOp(HermitianOperator)
sympy.physics.quantum.cartesian.ZOp._apply_operator_PositionKet3D(self,ket)
sympy.physics.quantum.cartesian.ZOp._eval_hilbert_space(self,args)
sympy.physics.quantum.cartesian.ZOp.default_args(self)
sympy.physics.quantum.cartesian._enumerate_continuous_1D(*args,**options)
sympy.physics.quantum.cartesian._lowercase_labels(ops)
sympy.physics.quantum.cartesian._uppercase_labels(ops)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/innerproduct.py----------------------------------------
A:sympy.physics.quantum.innerproduct.obj->sympy.Expr.__new__(cls, bra, ket)
A:sympy.physics.quantum.innerproduct.sbra->str(self.bra)
A:sympy.physics.quantum.innerproduct.sket->str(self.ket)
A:sympy.physics.quantum.innerproduct.bra->self.bra._print_contents_pretty(printer, *args)
A:sympy.physics.quantum.innerproduct.ket->printer._print(self.ket, *args)
A:sympy.physics.quantum.innerproduct.height->max(bra.height(), ket.height())
A:sympy.physics.quantum.innerproduct.(lbracket, _)->self.bra._pretty_brackets(height, use_unicode)
A:sympy.physics.quantum.innerproduct.(cbracket, rbracket)->self.ket._pretty_brackets(height, use_unicode)
A:sympy.physics.quantum.innerproduct.pform->prettyForm(*pform.right(rbracket))
A:sympy.physics.quantum.innerproduct.bra_label->self.bra._print_contents_latex(printer, *args)
A:sympy.physics.quantum.innerproduct.r->conjugate(self.bra.dual._eval_innerproduct(self.ket.dual, **hints))
sympy.physics.quantum.InnerProduct(cls,bra,ket)
sympy.physics.quantum.InnerProduct._eval_conjugate(self)
sympy.physics.quantum.InnerProduct._latex(self,printer,*args)
sympy.physics.quantum.InnerProduct._pretty(self,printer,*args)
sympy.physics.quantum.InnerProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.InnerProduct._sympystr(self,printer,*args)
sympy.physics.quantum.InnerProduct.bra(self)
sympy.physics.quantum.InnerProduct.doit(self,**hints)
sympy.physics.quantum.InnerProduct.ket(self)
sympy.physics.quantum.innerproduct.InnerProduct(cls,bra,ket)
sympy.physics.quantum.innerproduct.InnerProduct.__new__(cls,bra,ket)
sympy.physics.quantum.innerproduct.InnerProduct._eval_conjugate(self)
sympy.physics.quantum.innerproduct.InnerProduct._latex(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._pretty(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._sympyrepr(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct._sympystr(self,printer,*args)
sympy.physics.quantum.innerproduct.InnerProduct.bra(self)
sympy.physics.quantum.innerproduct.InnerProduct.doit(self,**hints)
sympy.physics.quantum.innerproduct.InnerProduct.ket(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/qexpr.py----------------------------------------
A:sympy.physics.quantum.qexpr._label_separator->u('')
A:sympy.physics.quantum.qexpr.args->cls._eval_args(tuple(cls.default_args()))
A:sympy.physics.quantum.qexpr.inst->sympy.Expr.__new__(cls, *args, **old_assumptions)
A:sympy.physics.quantum.qexpr.inst.hilbert_space->cls._eval_hilbert_space(args)
A:sympy.physics.quantum.qexpr.obj->sympy.Expr.__new__(Dagger, self)
A:sympy.physics.quantum.qexpr.pform->self._print_contents_pretty(printer, *args)
A:sympy.physics.quantum.qexpr.top->prettyForm(*b.left(' ' * a.width()))
A:sympy.physics.quantum.qexpr.bot->prettyForm(*a.right(' ' * b.width()))
A:sympy.physics.quantum.qexpr.label->self._print_label_repr(printer, *args)
A:sympy.physics.quantum.qexpr.rewritten->getattr(self, rule)(*args, **hints)
A:sympy.physics.quantum.qexpr.basis->options.pop('basis', None)
A:sympy.physics.quantum.qexpr.result->f(arg, **options)
A:sympy.physics.quantum.qexpr.format->options.get('format', 'sympy')
A:sympy.physics.quantum.qexpr.(c_part, nc_part)->e.args_cnc()
A:sympy.physics.quantum.qexpr.c_part->list(c_part)
A:sympy.physics.quantum.qexpr.f->getattr(self, method_name)
sympy.physics.quantum.qexpr.QExpr(cls,*args,**old_assumptions)
sympy.physics.quantum.qexpr.QExpr.__new__(cls,*args,**old_assumptions)
sympy.physics.quantum.qexpr.QExpr._eval_adjoint(self)
sympy.physics.quantum.qexpr.QExpr._eval_args(cls,args)
sympy.physics.quantum.qexpr.QExpr._eval_hilbert_space(cls,args)
sympy.physics.quantum.qexpr.QExpr._eval_rewrite(self,pattern,rule,**hints)
sympy.physics.quantum.qexpr.QExpr._format_represent(self,result,format)
sympy.physics.quantum.qexpr.QExpr._latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._new_rawargs(cls,hilbert_space,*args,**old_assumptions)
sympy.physics.quantum.qexpr.QExpr._pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents_latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_latex(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_pretty(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_label_repr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_parens_pretty(self,pform,left='(',right=')')
sympy.physics.quantum.qexpr.QExpr._print_sequence(self,seq,sep,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_sequence_pretty(self,seq,sep,printer,*args)
sympy.physics.quantum.qexpr.QExpr._print_subscript_pretty(self,a,b)
sympy.physics.quantum.qexpr.QExpr._print_superscript_pretty(self,a,b)
sympy.physics.quantum.qexpr.QExpr._represent(self,**options)
sympy.physics.quantum.qexpr.QExpr._represent_default_basis(self,**options)
sympy.physics.quantum.qexpr.QExpr._sympyrepr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr._sympystr(self,printer,*args)
sympy.physics.quantum.qexpr.QExpr.default_args(self)
sympy.physics.quantum.qexpr.QExpr.doit(self,**kw_args)
sympy.physics.quantum.qexpr.QExpr.free_symbols(self)
sympy.physics.quantum.qexpr.QExpr.is_symbolic(self)
sympy.physics.quantum.qexpr.QExpr.label(self)
sympy.physics.quantum.qexpr.QuantumError(Exception)
sympy.physics.quantum.qexpr.__qsympify_sequence_helper(seq)
sympy.physics.quantum.qexpr._qsympify_sequence(seq)
sympy.physics.quantum.qexpr.dispatch_method(self,basename,arg,**options)
sympy.physics.quantum.qexpr.split_commutative_parts(e)
sympy.physics.quantum.qexpr.split_qexpr_parts(e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/matrixcache.py----------------------------------------
A:sympy.physics.quantum.matrixcache.m->to_scipy_sparse(m, dtype=self.dtype)
A:sympy.physics.quantum.matrixcache.sqrt2_inv->Pow(2, Rational(-1, 2), evaluate=False)
A:sympy.physics.quantum.matrixcache.matrix_cache->MatrixCache()
sympy.physics.quantum.matrixcache.MatrixCache(self,dtype='complex')
sympy.physics.quantum.matrixcache.MatrixCache.__init__(self,dtype='complex')
sympy.physics.quantum.matrixcache.MatrixCache._numpy_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache._scipy_sparse_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache._store_matrix(self,name,format,m)
sympy.physics.quantum.matrixcache.MatrixCache._sympy_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache.cache_matrix(self,name,m)
sympy.physics.quantum.matrixcache.MatrixCache.get_matrix(self,name,format)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/dagger.py----------------------------------------
A:sympy.physics.quantum.dagger.obj->arg.conjugate().transpose()
sympy.physics.quantum.Dagger(cls,arg)
sympy.physics.quantum.dagger.Dagger(cls,arg)
sympy.physics.quantum.dagger.Dagger.__new__(cls,arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/state.py----------------------------------------
A:sympy.physics.quantum.state._lbracket_ucode->u('⟨')
A:sympy.physics.quantum.state._rbracket_ucode->u('⟩')
A:sympy.physics.quantum.state._straight_bracket_ucode->u('❘')
A:sympy.physics.quantum.state.contents->self._print_contents_latex(printer, *args)
A:sympy.physics.quantum.state.pform->printer._print(self.time, *args)
A:sympy.physics.quantum.state.(lbracket, rbracket)->self._pretty_brackets(pform.height(), printer._use_unicode)
A:sympy.physics.quantum.state.state->self.dual_class().operators_to_state(ops, **options)
A:sympy.physics.quantum.state.dual_states->self.dual._enumerate_state(num_states, **options)
A:sympy.physics.quantum.state.label->self._print_sequence(self.label, self._label_separator, printer, *args)
A:sympy.physics.quantum.state.time->self._print_time_latex(printer, *args)
A:sympy.physics.quantum.state.new_args[ct]->Tuple(*arg)
A:sympy.physics.quantum.state.expr->expr.subs(symbol, val).subs(symbol, val)
A:sympy.physics.quantum.state.deriv->expr.subs(symbol, val).subs(symbol, val)._eval_derivative(symbol)
A:sympy.physics.quantum.state.exp->integrate(exp, (v, curr_limits[0], curr_limits[1]))
sympy.physics.quantum.Bra(State,BraBase)
sympy.physics.quantum.Bra.dual_class(self)
sympy.physics.quantum.BraBase(StateBase)
sympy.physics.quantum.BraBase.__mul__(self,other)
sympy.physics.quantum.BraBase.__rmul__(self,other)
sympy.physics.quantum.BraBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.BraBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.BraBase._represent(self,**options)
sympy.physics.quantum.BraBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.BraBase.default_args(self)
sympy.physics.quantum.BraBase.dual_class(self)
sympy.physics.quantum.Ket(State,KetBase)
sympy.physics.quantum.Ket.dual_class(self)
sympy.physics.quantum.KetBase(StateBase)
sympy.physics.quantum.KetBase.__mul__(self,other)
sympy.physics.quantum.KetBase.__rmul__(self,other)
sympy.physics.quantum.KetBase._apply_operator(self,op,**options)
sympy.physics.quantum.KetBase._eval_innerproduct(self,bra,**hints)
sympy.physics.quantum.KetBase.default_args(self)
sympy.physics.quantum.KetBase.dual_class(self)
sympy.physics.quantum.State(StateBase)
sympy.physics.quantum.StateBase(QExpr)
sympy.physics.quantum.StateBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.StateBase._eval_adjoint(self)
sympy.physics.quantum.StateBase._latex(self,printer,*args)
sympy.physics.quantum.StateBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.StateBase._pretty(self,printer,*args)
sympy.physics.quantum.StateBase._pretty_brackets(self,height,use_unicode=True)
sympy.physics.quantum.StateBase._represent_default_basis(self,**options)
sympy.physics.quantum.StateBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.StateBase._sympystr(self,printer,*args)
sympy.physics.quantum.StateBase.dual(self)
sympy.physics.quantum.StateBase.dual_class(self)
sympy.physics.quantum.StateBase.operators(self)
sympy.physics.quantum.TimeDepBra(TimeDepState,BraBase)
sympy.physics.quantum.TimeDepBra.dual_class(self)
sympy.physics.quantum.TimeDepKet(TimeDepState,KetBase)
sympy.physics.quantum.TimeDepKet.dual_class(self)
sympy.physics.quantum.TimeDepState(StateBase)
sympy.physics.quantum.TimeDepState._print_contents(self,printer,*args)
sympy.physics.quantum.TimeDepState._print_contents_latex(self,printer,*args)
sympy.physics.quantum.TimeDepState._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.TimeDepState._print_label_repr(self,printer,*args)
sympy.physics.quantum.TimeDepState._print_time(self,printer,*args)
sympy.physics.quantum.TimeDepState._print_time_pretty(self,printer,*args)
sympy.physics.quantum.TimeDepState.default_args(self)
sympy.physics.quantum.TimeDepState.label(self)
sympy.physics.quantum.TimeDepState.time(self)
sympy.physics.quantum.Wavefunction(cls,*args,**options)
sympy.physics.quantum.Wavefunction._eval_conjugate(self)
sympy.physics.quantum.Wavefunction._eval_derivative(self,symbol)
sympy.physics.quantum.Wavefunction._eval_transpose(self)
sympy.physics.quantum.Wavefunction.eval(self,*args)
sympy.physics.quantum.Wavefunction.expr(self)
sympy.physics.quantum.Wavefunction.free_symbols(self)
sympy.physics.quantum.Wavefunction.is_commutative(self)
sympy.physics.quantum.Wavefunction.is_normalized(self)
sympy.physics.quantum.Wavefunction.limits(self)
sympy.physics.quantum.Wavefunction.norm(self)
sympy.physics.quantum.Wavefunction.normalize(self)
sympy.physics.quantum.Wavefunction.prob(self)
sympy.physics.quantum.Wavefunction.variables(self)
sympy.physics.quantum.state.Bra(State,BraBase)
sympy.physics.quantum.state.Bra.dual_class(self)
sympy.physics.quantum.state.BraBase(StateBase)
sympy.physics.quantum.state.BraBase.__mul__(self,other)
sympy.physics.quantum.state.BraBase.__rmul__(self,other)
sympy.physics.quantum.state.BraBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.state.BraBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.state.BraBase._represent(self,**options)
sympy.physics.quantum.state.BraBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.state.BraBase.default_args(self)
sympy.physics.quantum.state.BraBase.dual_class(self)
sympy.physics.quantum.state.Ket(State,KetBase)
sympy.physics.quantum.state.Ket.dual_class(self)
sympy.physics.quantum.state.KetBase(StateBase)
sympy.physics.quantum.state.KetBase.__mul__(self,other)
sympy.physics.quantum.state.KetBase.__rmul__(self,other)
sympy.physics.quantum.state.KetBase._apply_operator(self,op,**options)
sympy.physics.quantum.state.KetBase._eval_innerproduct(self,bra,**hints)
sympy.physics.quantum.state.KetBase.default_args(self)
sympy.physics.quantum.state.KetBase.dual_class(self)
sympy.physics.quantum.state.State(StateBase)
sympy.physics.quantum.state.StateBase(QExpr)
sympy.physics.quantum.state.StateBase._enumerate_state(self,num_states,**options)
sympy.physics.quantum.state.StateBase._eval_adjoint(self)
sympy.physics.quantum.state.StateBase._latex(self,printer,*args)
sympy.physics.quantum.state.StateBase._operators_to_state(self,ops,**options)
sympy.physics.quantum.state.StateBase._pretty(self,printer,*args)
sympy.physics.quantum.state.StateBase._pretty_brackets(self,height,use_unicode=True)
sympy.physics.quantum.state.StateBase._represent_default_basis(self,**options)
sympy.physics.quantum.state.StateBase._state_to_operators(self,op_classes,**options)
sympy.physics.quantum.state.StateBase._sympystr(self,printer,*args)
sympy.physics.quantum.state.StateBase.dual(self)
sympy.physics.quantum.state.StateBase.dual_class(self)
sympy.physics.quantum.state.StateBase.operators(self)
sympy.physics.quantum.state.TimeDepBra(TimeDepState,BraBase)
sympy.physics.quantum.state.TimeDepBra.dual_class(self)
sympy.physics.quantum.state.TimeDepKet(TimeDepState,KetBase)
sympy.physics.quantum.state.TimeDepKet.dual_class(self)
sympy.physics.quantum.state.TimeDepState(StateBase)
sympy.physics.quantum.state.TimeDepState._print_contents(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_contents_latex(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_label_repr(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_time(self,printer,*args)
sympy.physics.quantum.state.TimeDepState._print_time_pretty(self,printer,*args)
sympy.physics.quantum.state.TimeDepState.default_args(self)
sympy.physics.quantum.state.TimeDepState.label(self)
sympy.physics.quantum.state.TimeDepState.time(self)
sympy.physics.quantum.state.Wavefunction(cls,*args,**options)
sympy.physics.quantum.state.Wavefunction.__new__(cls,*args,**options)
sympy.physics.quantum.state.Wavefunction._eval_conjugate(self)
sympy.physics.quantum.state.Wavefunction._eval_derivative(self,symbol)
sympy.physics.quantum.state.Wavefunction._eval_transpose(self)
sympy.physics.quantum.state.Wavefunction.eval(self,*args)
sympy.physics.quantum.state.Wavefunction.expr(self)
sympy.physics.quantum.state.Wavefunction.free_symbols(self)
sympy.physics.quantum.state.Wavefunction.is_commutative(self)
sympy.physics.quantum.state.Wavefunction.is_normalized(self)
sympy.physics.quantum.state.Wavefunction.limits(self)
sympy.physics.quantum.state.Wavefunction.norm(self)
sympy.physics.quantum.state.Wavefunction.normalize(self)
sympy.physics.quantum.state.Wavefunction.prob(self)
sympy.physics.quantum.state.Wavefunction.variables(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/circuitutils.py----------------------------------------
A:sympy.physics.quantum.circuitutils.table->kmp_table(subcircuit)
A:sympy.physics.quantum.circuitutils.end->len(circuit)
A:sympy.physics.quantum.circuitutils.loc->randrange(len(circuit) + 1)
A:sympy.physics.quantum.circuitutils.new_map[key]->sympify(mapping[key])
A:sympy.physics.quantum.circuitutils.index_gen->numbered_symbols(prefix='i', start=-1)
A:sympy.physics.quantum.circuitutils.cur_ndx->next(gen)
A:sympy.physics.quantum.circuitutils.ndx_map->_sympify_qubit_map(ndx_map)
A:sympy.physics.quantum.circuitutils.inv_map->create_inverse_map(ndx_map)
A:sympy.physics.quantum.circuitutils.result->convert_to_symbolic_indices(item, qubit_map=ndx_map, start=cur_ndx, gen=index_gen)
A:sympy.physics.quantum.circuitutils.sym_item->item.__class__(*sym_item)
A:sympy.physics.quantum.circuitutils.qubit_map->_sympify_qubit_map(qubit_map)
A:sympy.physics.quantum.circuitutils.real_item->item.__class__(*real_item)
A:sympy.physics.quantum.circuitutils.ids->reduce(collapse, ids, [])
A:sympy.physics.quantum.circuitutils.randrange->_randrange(seed)
A:sympy.physics.quantum.circuitutils.i->randrange(len(ids))
A:sympy.physics.quantum.circuitutils.id->reduce(collapse, ids, []).pop(i)
A:sympy.physics.quantum.circuitutils.circuit->list(circuit)
sympy.physics.quantum.circuitutils._sympify_qubit_map(mapping)
sympy.physics.quantum.circuitutils.convert_to_real_indices(seq,qubit_map)
sympy.physics.quantum.circuitutils.convert_to_symbolic_indices(seq,start=None,gen=None,qubit_map=None)
sympy.physics.quantum.circuitutils.find_subcircuit(circuit,subcircuit,start=0,end=0)
sympy.physics.quantum.circuitutils.flatten_ids(ids)
sympy.physics.quantum.circuitutils.kmp_table(word)
sympy.physics.quantum.circuitutils.random_insert(circuit,choices,seed=None)
sympy.physics.quantum.circuitutils.random_reduce(circuit,gate_ids,seed=None)
sympy.physics.quantum.circuitutils.replace_subcircuit(circuit,subcircuit,replace=None,pos=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/sho1d.py----------------------------------------
A:sympy.physics.quantum.sho1d.args->sympy.physics.quantum.qexpr.QExpr._eval_args(args)
A:sympy.physics.quantum.sho1d.ndim_info->options.get('ndim', 4)
A:sympy.physics.quantum.sho1d.format->options.get('format', 'sympy')
A:sympy.physics.quantum.sho1d.spmatrix->options.get('spmatrix', 'csr')
A:sympy.physics.quantum.sho1d.matrix->matrix.tocsr().tocsr()
A:sympy.physics.quantum.sho1d.value->Integer(1)
A:sympy.physics.quantum.sho1d.arg0->printer._print(self.args[0], *args)
A:sympy.physics.quantum.sho1d.pform->printer._print(self.args[0], *args)
A:sympy.physics.quantum.sho1d.arg->printer._print(self.args[0])
A:sympy.physics.quantum.sho1d.result->KroneckerDelta(self.n, bra.n)
A:sympy.physics.quantum.sho1d.vector->vector.tocsr().tocsr()
A:sympy.physics.quantum.sho1d.vector[self.n, 0]->Integer(1)
A:sympy.physics.quantum.sho1d.vector[0, self.n]->Integer(1)
A:sympy.physics.quantum.sho1d.ad->RaisingOp('a')
A:sympy.physics.quantum.sho1d.a->LoweringOp('a')
A:sympy.physics.quantum.sho1d.H->Hamiltonian('H')
A:sympy.physics.quantum.sho1d.N->NumberOp('N')
A:sympy.physics.quantum.sho1d.omega->Symbol('omega')
A:sympy.physics.quantum.sho1d.m->Symbol('m')
sympy.physics.quantum.sho1d.Hamiltonian(SHOOp)
sympy.physics.quantum.sho1d.Hamiltonian._apply_operator_SHOKet(self,ket)
sympy.physics.quantum.sho1d.Hamiltonian._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_N(self,*args)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_a(self,*args)
sympy.physics.quantum.sho1d.Hamiltonian._eval_rewrite_as_xp(self,*args)
sympy.physics.quantum.sho1d.Hamiltonian._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.Hamiltonian._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.Hamiltonian._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.LoweringOp(SHOOp)
sympy.physics.quantum.sho1d.LoweringOp._apply_operator_SHOKet(self,ket)
sympy.physics.quantum.sho1d.LoweringOp._eval_adjoint(self)
sympy.physics.quantum.sho1d.LoweringOp._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.LoweringOp._eval_commutator_RaisingOp(self,other)
sympy.physics.quantum.sho1d.LoweringOp._eval_rewrite_as_xp(self,*args)
sympy.physics.quantum.sho1d.LoweringOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.LoweringOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.LoweringOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.NumberOp(SHOOp)
sympy.physics.quantum.sho1d.NumberOp._apply_operator_SHOKet(self,ket)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_Hamiltonian(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_LoweringOp(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_commutator_RaisingOp(self,other)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_H(self,*args)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_a(self,*args)
sympy.physics.quantum.sho1d.NumberOp._eval_rewrite_as_xp(self,*args)
sympy.physics.quantum.sho1d.NumberOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.NumberOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.NumberOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.RaisingOp(SHOOp)
sympy.physics.quantum.sho1d.RaisingOp._apply_operator_SHOKet(self,ket)
sympy.physics.quantum.sho1d.RaisingOp._eval_adjoint(self)
sympy.physics.quantum.sho1d.RaisingOp._eval_commutator_LoweringOp(self,other)
sympy.physics.quantum.sho1d.RaisingOp._eval_commutator_NumberOp(self,other)
sympy.physics.quantum.sho1d.RaisingOp._eval_rewrite_as_xp(self,*args)
sympy.physics.quantum.sho1d.RaisingOp._print_contents(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._print_contents_latex(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._print_contents_pretty(self,printer,*args)
sympy.physics.quantum.sho1d.RaisingOp._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.RaisingOp._represent_XOp(self,basis,**options)
sympy.physics.quantum.sho1d.RaisingOp._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOBra(SHOState,Bra)
sympy.physics.quantum.sho1d.SHOBra._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.SHOBra._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOBra.dual_class(self)
sympy.physics.quantum.sho1d.SHOKet(SHOState,Ket)
sympy.physics.quantum.sho1d.SHOKet._eval_innerproduct_SHOBra(self,bra,**hints)
sympy.physics.quantum.sho1d.SHOKet._represent_NumberOp(self,basis,**options)
sympy.physics.quantum.sho1d.SHOKet._represent_default_basis(self,**options)
sympy.physics.quantum.sho1d.SHOKet.dual_class(self)
sympy.physics.quantum.sho1d.SHOOp(Operator)
sympy.physics.quantum.sho1d.SHOOp._eval_args(cls,args)
sympy.physics.quantum.sho1d.SHOOp._eval_hilbert_space(cls,label)
sympy.physics.quantum.sho1d.SHOState(State)
sympy.physics.quantum.sho1d.SHOState._eval_hilbert_space(cls,label)
sympy.physics.quantum.sho1d.SHOState.n(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/shor.py----------------------------------------
A:sympy.physics.quantum.shor.out->int(self.a ** k % self.N)
A:sympy.physics.quantum.shor.outarray->list(qubits.args[0][:self.t])
A:sympy.physics.quantum.shor.r->period_find(a, N)
A:sympy.physics.quantum.shor.fraction->continued_fraction(x, y)
A:sympy.physics.quantum.shor.total->ratioize(fraction, N)
A:sympy.physics.quantum.shor.t->int(2 * math.ceil(log(N, 2)))
A:sympy.physics.quantum.shor.circuit->measure_partial_oneshot(circuit, i + t)
A:sympy.physics.quantum.shor.g->getr(answer, 2 ** t, N)
sympy.physics.quantum.shor.CMod(Gate)
sympy.physics.quantum.shor.CMod.N(self)
sympy.physics.quantum.shor.CMod._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.shor.CMod._eval_args(cls,args)
sympy.physics.quantum.shor.CMod.a(self)
sympy.physics.quantum.shor.CMod.t(self)
sympy.physics.quantum.shor.OrderFindingException(QuantumError)
sympy.physics.quantum.shor.getr(x,y,N)
sympy.physics.quantum.shor.period_find(a,N)
sympy.physics.quantum.shor.ratioize(list,N)
sympy.physics.quantum.shor.shor(N)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/qft.py----------------------------------------
A:sympy.physics.quantum.qft.gate_name->u('IQFT')
A:sympy.physics.quantum.qft.gate_name_latex->u('{QFT^{-1}}')
A:sympy.physics.quantum.qft.args->cls._eval_args(args)
A:sympy.physics.quantum.qft.inst->sympy.Expr.__new__(cls, *args)
A:sympy.physics.quantum.qft.inst.hilbert_space->cls._eval_hilbert_space(args)
A:sympy.physics.quantum.qft.nqubits->options.get('nqubits', 0)
A:sympy.physics.quantum.qft.matrixFT->matrix_tensor_product(matrixFT, eye(2 ** (nqubits - self.min_qubits)))
sympy.physics.quantum.qft.Fourier(Gate)
sympy.physics.quantum.qft.Fourier._eval_args(self,args)
sympy.physics.quantum.qft.Fourier._represent_ZGate(self,basis,**options)
sympy.physics.quantum.qft.Fourier._represent_default_basis(self,**options)
sympy.physics.quantum.qft.Fourier.min_qubits(self)
sympy.physics.quantum.qft.Fourier.omega(self)
sympy.physics.quantum.qft.Fourier.size(self)
sympy.physics.quantum.qft.Fourier.targets(self)
sympy.physics.quantum.qft.IQFT(Fourier)
sympy.physics.quantum.qft.IQFT._eval_inverse(self)
sympy.physics.quantum.qft.IQFT.decompose(self)
sympy.physics.quantum.qft.IQFT.omega(self)
sympy.physics.quantum.qft.QFT(Fourier)
sympy.physics.quantum.qft.QFT._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.qft.QFT._eval_inverse(self)
sympy.physics.quantum.qft.QFT.decompose(self)
sympy.physics.quantum.qft.QFT.omega(self)
sympy.physics.quantum.qft.RkGate(cls,*args)
sympy.physics.quantum.qft.RkGate.__new__(cls,*args)
sympy.physics.quantum.qft.RkGate._eval_args(cls,args)
sympy.physics.quantum.qft.RkGate.gate_name_plot(self)
sympy.physics.quantum.qft.RkGate.get_target_matrix(self,format='sympy')
sympy.physics.quantum.qft.RkGate.k(self)
sympy.physics.quantum.qft.RkGate.targets(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/constants.py----------------------------------------
A:sympy.physics.quantum.constants.hbar->HBar()
sympy.physics.quantum.HBar(with_metaclass(Singleton,NumberSymbol))
sympy.physics.quantum.HBar._as_mpf_val(self,prec)
sympy.physics.quantum.HBar._latex(self,printer,*args)
sympy.physics.quantum.HBar._pretty(self,printer,*args)
sympy.physics.quantum.HBar._sympyrepr(self,printer,*args)
sympy.physics.quantum.HBar._sympystr(self,printer,*args)
sympy.physics.quantum.constants.HBar(with_metaclass(Singleton,NumberSymbol))
sympy.physics.quantum.constants.HBar._as_mpf_val(self,prec)
sympy.physics.quantum.constants.HBar._latex(self,printer,*args)
sympy.physics.quantum.constants.HBar._pretty(self,printer,*args)
sympy.physics.quantum.constants.HBar._sympyrepr(self,printer,*args)
sympy.physics.quantum.constants.HBar._sympystr(self,printer,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tensorproduct.py----------------------------------------
A:sympy.physics.quantum.tensorproduct.(c_part, new_args)->cls.flatten(sympify(args))
A:sympy.physics.quantum.tensorproduct.c_part->Mul(*c_part)
A:sympy.physics.quantum.tensorproduct.tp->tp._eval_expand_tensorproduct()._eval_expand_tensorproduct()
A:sympy.physics.quantum.tensorproduct.(cp, ncp)->arg.args_cnc()
A:sympy.physics.quantum.tensorproduct.length->len(self.args)
A:sympy.physics.quantum.tensorproduct.pform->prettyForm(*pform.right('x' + ' '))
A:sympy.physics.quantum.tensorproduct.next_pform->prettyForm(*next_pform.parens(left='(', right=')'))
A:sympy.physics.quantum.tensorproduct.length_i->len(self.args[i].args)
A:sympy.physics.quantum.tensorproduct.part_pform->printer._print(self.args[i].args[j], *args)
A:sympy.physics.quantum.tensorproduct.s->', '.join([_label_wrap(arg._print_label_latex(printer, *args), len(arg.args)) for arg in self.args])
A:sympy.physics.quantum.tensorproduct.indices->kwargs.get('indices', None)
A:sympy.physics.quantum.tensorproduct.exp->tensor_product_simp(self)
A:sympy.physics.quantum.tensorproduct.(c_part, nc_part)->e.args_cnc()
A:sympy.physics.quantum.tensorproduct.n_nc->len(nc_part)
A:sympy.physics.quantum.tensorproduct.n_terms->len(current.args)
A:sympy.physics.quantum.tensorproduct.new_args->list(current.args)
sympy.physics.quantum.TensorProduct(cls,*args)
sympy.physics.quantum.TensorProduct._eval_adjoint(self)
sympy.physics.quantum.TensorProduct._eval_expand_tensorproduct(self,**hints)
sympy.physics.quantum.TensorProduct._eval_rewrite(self,pattern,rule,**hints)
sympy.physics.quantum.TensorProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.TensorProduct._latex(self,printer,*args)
sympy.physics.quantum.TensorProduct._pretty(self,printer,*args)
sympy.physics.quantum.TensorProduct._sympystr(self,printer,*args)
sympy.physics.quantum.TensorProduct.doit(self,**hints)
sympy.physics.quantum.TensorProduct.flatten(cls,args)
sympy.physics.quantum.combined_tensor_printing(combined)
sympy.physics.quantum.tensor_product_simp(e,**hints)
sympy.physics.quantum.tensor_product_simp_Mul(e)
sympy.physics.quantum.tensorproduct.TensorProduct(cls,*args)
sympy.physics.quantum.tensorproduct.TensorProduct.__new__(cls,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_adjoint(self)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_expand_tensorproduct(self,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_rewrite(self,pattern,rule,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct._eval_trace(self,**kwargs)
sympy.physics.quantum.tensorproduct.TensorProduct._latex(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._pretty(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct._sympystr(self,printer,*args)
sympy.physics.quantum.tensorproduct.TensorProduct.doit(self,**hints)
sympy.physics.quantum.tensorproduct.TensorProduct.flatten(cls,args)
sympy.physics.quantum.tensorproduct.combined_tensor_printing(combined)
sympy.physics.quantum.tensorproduct.tensor_product_simp(e,**hints)
sympy.physics.quantum.tensorproduct.tensor_product_simp_Mul(e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/qapply.py----------------------------------------
A:sympy.physics.quantum.qapply.dagger->options.get('dagger', False)
A:sympy.physics.quantum.qapply.e->e.expand(commutator=True, tensorproduct=True).expand(commutator=True, tensorproduct=True)
A:sympy.physics.quantum.qapply.result->result.doit().doit()
A:sympy.physics.quantum.qapply.ip_doit->options.get('ip_doit', True)
A:sympy.physics.quantum.qapply.args->list(e.args)
A:sympy.physics.quantum.qapply.rhs->list(e.args).pop()
A:sympy.physics.quantum.qapply.lhs->list(e.args).pop()
A:sympy.physics.quantum.qapply.comm->list(e.args).pop().doit()
sympy.physics.quantum.qapply(e,**options)
sympy.physics.quantum.qapply.qapply(e,**options)
sympy.physics.quantum.qapply.qapply_Mul(e,**options)
sympy.physics.quantum.qapply_Mul(e,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/piab.py----------------------------------------
A:sympy.physics.quantum.piab.m->Symbol('m')
A:sympy.physics.quantum.piab.L->Symbol('L')
A:sympy.physics.quantum.piab.x->Symbol('x')
A:sympy.physics.quantum.piab.n->Symbol('n')
A:sympy.physics.quantum.piab.subs_info->options.get('subs', {})
sympy.physics.quantum.piab.PIABBra(Bra)
sympy.physics.quantum.piab.PIABBra._eval_hilbert_space(cls,label)
sympy.physics.quantum.piab.PIABBra.dual_class(self)
sympy.physics.quantum.piab.PIABHamiltonian(HermitianOperator)
sympy.physics.quantum.piab.PIABHamiltonian._apply_operator_PIABKet(self,ket,**options)
sympy.physics.quantum.piab.PIABHamiltonian._eval_hilbert_space(cls,label)
sympy.physics.quantum.piab.PIABKet(Ket)
sympy.physics.quantum.piab.PIABKet._eval_hilbert_space(cls,args)
sympy.physics.quantum.piab.PIABKet._eval_innerproduct_PIABBra(self,bra)
sympy.physics.quantum.piab.PIABKet._represent_XOp(self,basis,**options)
sympy.physics.quantum.piab.PIABKet._represent_default_basis(self,**options)
sympy.physics.quantum.piab.PIABKet.dual_class(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/grover.py----------------------------------------
A:sympy.physics.quantum.grover.gate_name->u('W')
A:sympy.physics.quantum.grover.gate_name_latex->u('W')
A:sympy.physics.quantum.grover.sub_args->sympy.physics.quantum.operator.UnitaryOperator._eval_args(sub_args)
A:sympy.physics.quantum.grover.args->sympy.physics.quantum.operator.UnitaryOperator._eval_args(args)
A:sympy.physics.quantum.grover.basis_states->superposition_basis(self.nqubits)
A:sympy.physics.quantum.grover.wgate->WGate(oracle.nqubits)
A:sympy.physics.quantum.grover.iterations->floor(sqrt(2 ** nqubits) * (pi / 4))
A:sympy.physics.quantum.grover.v->OracleGate(nqubits, oracle)
A:sympy.physics.quantum.grover.iterated->qapply(iterated)
sympy.physics.quantum.grover.OracleGate(Gate)
sympy.physics.quantum.grover.OracleGate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.grover.OracleGate._eval_args(cls,args)
sympy.physics.quantum.grover.OracleGate._eval_hilbert_space(cls,args)
sympy.physics.quantum.grover.OracleGate._represent_ZGate(self,basis,**options)
sympy.physics.quantum.grover.OracleGate.search_function(self)
sympy.physics.quantum.grover.OracleGate.targets(self)
sympy.physics.quantum.grover.WGate(Gate)
sympy.physics.quantum.grover.WGate._apply_operator_Qubit(self,qubits,**options)
sympy.physics.quantum.grover.WGate._eval_args(cls,args)
sympy.physics.quantum.grover.WGate.targets(self)
sympy.physics.quantum.grover.apply_grover(oracle,nqubits,iterations=None)
sympy.physics.quantum.grover.grover_iteration(qstate,oracle)
sympy.physics.quantum.grover.superposition_basis(nqubits)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/matrixutils.py----------------------------------------
A:sympy.physics.quantum.matrixutils.np->import_module('numpy')
A:sympy.physics.quantum.matrixutils.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.matrixutils.dtype->options.get('dtype', 'float64')
A:sympy.physics.quantum.matrixutils.e->_scipy_sparse_matrix_to_zero(e)
A:sympy.physics.quantum.matrixutils.start->start.row_join(matrix_expansion * mat[i * cols + j + 1]).row_join(matrix_expansion * mat[i * cols + j + 1])
A:sympy.physics.quantum.matrixutils.next->next.col_join(start).col_join(start)
A:sympy.physics.quantum.matrixutils.answer->sparse.kron(answer, item)
A:sympy.physics.quantum.matrixutils.format->options.get('format', 'sympy')
A:sympy.physics.quantum.matrixutils.spmatrix->options.get('spmatrix', 'csr')
A:sympy.physics.quantum.matrixutils.test->import_module('numpy').zeros_like(edense)
A:sympy.physics.quantum.matrixutils.edense->_scipy_sparse_matrix_to_zero(e).todense()
sympy.physics.quantum.matrixutils._numpy_eye(n)
sympy.physics.quantum.matrixutils._numpy_matrix_to_zero(e)
sympy.physics.quantum.matrixutils._numpy_tensor_product(*product)
sympy.physics.quantum.matrixutils._numpy_zeros(m,n,**options)
sympy.physics.quantum.matrixutils._scipy_sparse_eye(n)
sympy.physics.quantum.matrixutils._scipy_sparse_matrix_to_zero(e)
sympy.physics.quantum.matrixutils._scipy_sparse_tensor_product(*product)
sympy.physics.quantum.matrixutils._scipy_sparse_zeros(m,n,**options)
sympy.physics.quantum.matrixutils._sympy_tensor_product(*matrices)
sympy.physics.quantum.matrixutils.flatten_scalar(e)
sympy.physics.quantum.matrixutils.matrix_dagger(e)
sympy.physics.quantum.matrixutils.matrix_eye(n,**options)
sympy.physics.quantum.matrixutils.matrix_tensor_product(*product)
sympy.physics.quantum.matrixutils.matrix_to_zero(e)
sympy.physics.quantum.matrixutils.matrix_zeros(m,n,**options)
sympy.physics.quantum.matrixutils.numpy_to_sympy(m,**options)
sympy.physics.quantum.matrixutils.scipy_sparse_to_sympy(m,**options)
sympy.physics.quantum.matrixutils.sympy_to_numpy(m,**options)
sympy.physics.quantum.matrixutils.sympy_to_scipy_sparse(m,**options)
sympy.physics.quantum.matrixutils.to_numpy(m,**options)
sympy.physics.quantum.matrixutils.to_scipy_sparse(m,**options)
sympy.physics.quantum.matrixutils.to_sympy(m,**options)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_fermion.py----------------------------------------
A:sympy.physics.quantum.tests.test_fermion.c->FermionOp('c')
A:sympy.physics.quantum.tests.test_fermion.d->FermionOp('d')
sympy.physics.quantum.tests.test_fermion.test_fermion_states()
sympy.physics.quantum.tests.test_fermion.test_fermionoperator()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_anticommutator.py----------------------------------------
A:sympy.physics.quantum.tests.test_anticommutator.(a, b, c)->symbols('a,b,c')
A:sympy.physics.quantum.tests.test_anticommutator.(A, B, C, D)->symbols('A,B,C,D', commutative=False)
A:sympy.physics.quantum.tests.test_anticommutator.ac->AComm(A, B)
A:sympy.physics.quantum.tests.test_anticommutator.F->Foo('F')
A:sympy.physics.quantum.tests.test_anticommutator.B->Bar('B')
A:sympy.physics.quantum.tests.test_anticommutator.T->Tam('T')
sympy.physics.quantum.tests.test_antiBar(Operator)
sympy.physics.quantum.tests.test_antiFoo(Operator)
sympy.physics.quantum.tests.test_antiFoo._eval_anticommutator_Bar(self,bar)
sympy.physics.quantum.tests.test_antiTam(Operator)
sympy.physics.quantum.tests.test_antiTam._eval_anticommutator_Foo(self,foo)
sympy.physics.quantum.tests.test_anticommutator.Bar(Operator)
sympy.physics.quantum.tests.test_anticommutator.Foo(Operator)
sympy.physics.quantum.tests.test_anticommutator.Foo._eval_anticommutator_Bar(self,bar)
sympy.physics.quantum.tests.test_anticommutator.Tam(Operator)
sympy.physics.quantum.tests.test_anticommutator.Tam._eval_anticommutator_Foo(self,foo)
sympy.physics.quantum.tests.test_anticommutator.test_anticommutator()
sympy.physics.quantum.tests.test_anticommutator.test_anticommutator_dagger()
sympy.physics.quantum.tests.test_anticommutator.test_commutator_identities()
sympy.physics.quantum.tests.test_anticommutator.test_eval_commutator()
sympy.physics.quantum.tests.test_antitest_anticommutator()
sympy.physics.quantum.tests.test_antitest_anticommutator_dagger()
sympy.physics.quantum.tests.test_antitest_commutator_identities()
sympy.physics.quantum.tests.test_antitest_eval_commutator()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_gate.py----------------------------------------
A:sympy.physics.quantum.tests.test_gate.h->HadamardGate(1)
A:sympy.physics.quantum.tests.test_gate.i0->Wild('i0')
A:sympy.physics.quantum.tests.test_gate.i1->Wild('i1')
A:sympy.physics.quantum.tests.test_gate.h0_w1->HadamardGate(i0)
A:sympy.physics.quantum.tests.test_gate.h0_w2->HadamardGate(i0)
A:sympy.physics.quantum.tests.test_gate.h1_w1->HadamardGate(i1)
A:sympy.physics.quantum.tests.test_gate.cnot_10_w1->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_gate.cnot_10_w2->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_gate.cnot_01_w1->CNOT(i0, i1)
A:sympy.physics.quantum.tests.test_gate.(a, b, c, d)->symbols('a,b,c,d')
A:sympy.physics.quantum.tests.test_gate.uMat->Matrix([[a, b], [c, d]])
A:sympy.physics.quantum.tests.test_gate.u1->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_gate.u2->UGate((1,), uMat)
A:sympy.physics.quantum.tests.test_gate.u2Rep->represent(u2, nqubits=2)
A:sympy.physics.quantum.tests.test_gate.CNOTMatrix->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]])
A:sympy.physics.quantum.tests.test_gate.ToffoliGate->CGate((3, 0), XGate(1))
A:sympy.physics.quantum.tests.test_gate.CYGate->CGate(1, YGate(0))
A:sympy.physics.quantum.tests.test_gate.CYGate_matrix->Matrix(((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 0, -I), (0, 0, I, 0)))
A:sympy.physics.quantum.tests.test_gate.CZGate->CGate(0, ZGate(1))
A:sympy.physics.quantum.tests.test_gate.CZGate_matrix->Matrix(((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, -1)))
A:sympy.physics.quantum.tests.test_gate.CPhaseGate->CGate(0, PhaseGate(1))
A:sympy.physics.quantum.tests.test_gate.cMat->Matrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, a, b], [0, 0, c, d]])
A:sympy.physics.quantum.tests.test_gate.cu1->CGate(1, u1)
A:sympy.physics.quantum.tests.test_gate.answer->represent(circuit, nqubits=2)
A:sympy.physics.quantum.tests.test_gate.circuit->CNotGate(1, 0)
A:sympy.physics.quantum.tests.test_gate.e->AntiCommutator(g1(0), g2(1))
A:sympy.physics.quantum.tests.test_gate.swap_gate_matrix->Matrix(((1, 0, 0, 0), (0, 0, 1, 0), (0, 1, 0, 0), (0, 0, 0, 1)))
A:sympy.physics.quantum.tests.test_gate.a->matrix_to_zero(represent(e, nqubits=2, format='sympy'))
A:sympy.physics.quantum.tests.test_gate.b->matrix_to_zero(represent(e.doit(), nqubits=2, format='sympy'))
A:sympy.physics.quantum.tests.test_gate.c->random_circuit(10, 3)
A:sympy.physics.quantum.tests.test_gate.m->represent(c, nqubits=3)
A:sympy.physics.quantum.tests.test_gate.x->XGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.x_dagger->Dagger(x)
A:sympy.physics.quantum.tests.test_gate.y->YGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.y_dagger->Dagger(y)
A:sympy.physics.quantum.tests.test_gate.z->ZGate(1, 2)
A:sympy.physics.quantum.tests.test_gate.z_dagger->Dagger(z)
sympy.physics.quantum.tests.test_gate.test_UGate()
sympy.physics.quantum.tests.test_gate.test_UGate_CGate_combo()
sympy.physics.quantum.tests.test_gate.test_cgate()
sympy.physics.quantum.tests.test_gate.test_cnot_commutators()
sympy.physics.quantum.tests.test_gate.test_cnot_gate()
sympy.physics.quantum.tests.test_gate.test_compound_gates()
sympy.physics.quantum.tests.test_gate.test_gate()
sympy.physics.quantum.tests.test_gate.test_gate_simp()
sympy.physics.quantum.tests.test_gate.test_gate_sort()
sympy.physics.quantum.tests.test_gate.test_hermitian_XGate()
sympy.physics.quantum.tests.test_gate.test_hermitian_YGate()
sympy.physics.quantum.tests.test_gate.test_hermitian_ZGate()
sympy.physics.quantum.tests.test_gate.test_one_qubit_anticommutators()
sympy.physics.quantum.tests.test_gate.test_one_qubit_commutators()
sympy.physics.quantum.tests.test_gate.test_random_circuit()
sympy.physics.quantum.tests.test_gate.test_represent_hadamard()
sympy.physics.quantum.tests.test_gate.test_represent_phasegate()
sympy.physics.quantum.tests.test_gate.test_represent_tgate()
sympy.physics.quantum.tests.test_gate.test_represent_xgate()
sympy.physics.quantum.tests.test_gate.test_represent_ygate()
sympy.physics.quantum.tests.test_gate.test_represent_zgate()
sympy.physics.quantum.tests.test_gate.test_swap_gate()
sympy.physics.quantum.tests.test_gate.test_unitary_XGate()
sympy.physics.quantum.tests.test_gate.test_unitary_YGate()
sympy.physics.quantum.tests.test_gate.test_unitary_ZGate()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_printing.py----------------------------------------
A:sympy.physics.quantum.tests.test_printing.A->Operator('A')
A:sympy.physics.quantum.tests.test_printing.B->Operator('B')
A:sympy.physics.quantum.tests.test_printing.ac->AntiCommutator(A, B)
A:sympy.physics.quantum.tests.test_printing.ac_tall->AntiCommutator(A ** 2, B)
A:sympy.physics.quantum.tests.test_printing.ucode_str->u('⎛⎛ 1    2⎞    ⨂2⎞   ⎛ 2    ⎞\n⎝⎝C  ⨂ C ⎠ ⊕ F  ⎠ ⨂ ⎝L  ⊕ H⎠')
A:sympy.physics.quantum.tests.test_printing.cg->CG(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner3j->Wigner3j(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner6j->Wigner6j(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.wigner9j->Wigner9j(1, 2, 3, 4, 5, 6, 7, 8, 9)
A:sympy.physics.quantum.tests.test_printing.c->Commutator(A, B)
A:sympy.physics.quantum.tests.test_printing.c_tall->Commutator(A ** 2, B)
A:sympy.physics.quantum.tests.test_printing.x->symbols('x')
A:sympy.physics.quantum.tests.test_printing.expr->Dagger(x)
A:sympy.physics.quantum.tests.test_printing.(a, b, c, d)->symbols('a,b,c,d')
A:sympy.physics.quantum.tests.test_printing.uMat->Matrix([[a, b], [c, d]])
A:sympy.physics.quantum.tests.test_printing.g->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_printing.q->QExpr('q')
A:sympy.physics.quantum.tests.test_printing.g1->IdentityGate(2)
A:sympy.physics.quantum.tests.test_printing.g2->CGate((3, 0), XGate(1))
A:sympy.physics.quantum.tests.test_printing.g3->CNotGate(1, 0)
A:sympy.physics.quantum.tests.test_printing.g4->UGate((0,), uMat)
A:sympy.physics.quantum.tests.test_printing.h1->HilbertSpace()
A:sympy.physics.quantum.tests.test_printing.h2->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_printing.h3->FockSpace()
A:sympy.physics.quantum.tests.test_printing.h4->L2(Interval(0, oo))
A:sympy.physics.quantum.tests.test_printing.ip1->InnerProduct(Bra(), Ket())
A:sympy.physics.quantum.tests.test_printing.ip2->InnerProduct(TimeDepBra(), TimeDepKet())
A:sympy.physics.quantum.tests.test_printing.ip3->InnerProduct(JzBra(1, 1), JzKet(1, 1))
A:sympy.physics.quantum.tests.test_printing.ip4->InnerProduct(JzBraCoupled(1, 1, (1, 1)), JzKetCoupled(1, 1, (1, 1)))
A:sympy.physics.quantum.tests.test_printing.ip_tall1->InnerProduct(Bra(x / 2), Ket(x / 2))
A:sympy.physics.quantum.tests.test_printing.ip_tall2->InnerProduct(Bra(x), Ket(x / 2))
A:sympy.physics.quantum.tests.test_printing.ip_tall3->InnerProduct(Bra(x / 2), Ket(x))
A:sympy.physics.quantum.tests.test_printing.a->Operator('A')
A:sympy.physics.quantum.tests.test_printing.b->Operator('B', Symbol('t'), S(1) / 2)
A:sympy.physics.quantum.tests.test_printing.inv->Operator('A').inv()
A:sympy.physics.quantum.tests.test_printing.f->Function('f')
A:sympy.physics.quantum.tests.test_printing.d->DifferentialOperator(Derivative(f(x), x), f(x))
A:sympy.physics.quantum.tests.test_printing.op->OuterProduct(Ket(), Bra())
A:sympy.physics.quantum.tests.test_printing.q1->Qubit('0101')
A:sympy.physics.quantum.tests.test_printing.q2->IntQubit(8)
A:sympy.physics.quantum.tests.test_printing.lz->JzOp('L')
A:sympy.physics.quantum.tests.test_printing.ket->Ket()
A:sympy.physics.quantum.tests.test_printing.bra->Bra()
A:sympy.physics.quantum.tests.test_printing.cket->JzKetCoupled(1, 0, (1, 2))
A:sympy.physics.quantum.tests.test_printing.cbra->JzBraCoupled(1, 0, (1, 2))
A:sympy.physics.quantum.tests.test_printing.cket_big->JzKetCoupled(1, 0, (1, 2, 3))
A:sympy.physics.quantum.tests.test_printing.cbra_big->JzBraCoupled(1, 0, (1, 2, 3))
A:sympy.physics.quantum.tests.test_printing.rot->Rotation(1, 2, 3)
A:sympy.physics.quantum.tests.test_printing.bigd->WignerD(1, 2, 3, 4, 5, 6)
A:sympy.physics.quantum.tests.test_printing.smalld->WignerD(1, 2, 3, 0, 4, 0)
A:sympy.physics.quantum.tests.test_printing.bra_tall->Bra(x / 2)
A:sympy.physics.quantum.tests.test_printing.ket_tall->Ket(x / 2)
A:sympy.physics.quantum.tests.test_printing.tbra->TimeDepBra()
A:sympy.physics.quantum.tests.test_printing.tket->TimeDepKet()
A:sympy.physics.quantum.tests.test_printing.tp->TensorProduct(JzKet(1, 1), JzKet(1, 0))
A:sympy.physics.quantum.tests.test_printing.ad->RaisingOp('a')
sympy.physics.quantum.tests.test_pretty(expr)
sympy.physics.quantum.tests.test_printing._test_sho1d()
sympy.physics.quantum.tests.test_printing.pretty(expr)
sympy.physics.quantum.tests.test_printing.sT(expr,string)
sympy.physics.quantum.tests.test_printing.test_anticommutator()
sympy.physics.quantum.tests.test_printing.test_big_expr()
sympy.physics.quantum.tests.test_printing.test_cg()
sympy.physics.quantum.tests.test_printing.test_commutator()
sympy.physics.quantum.tests.test_printing.test_constants()
sympy.physics.quantum.tests.test_printing.test_dagger()
sympy.physics.quantum.tests.test_printing.test_gate()
sympy.physics.quantum.tests.test_printing.test_gate_failing()
sympy.physics.quantum.tests.test_printing.test_hilbert()
sympy.physics.quantum.tests.test_printing.test_innerproduct()
sympy.physics.quantum.tests.test_printing.test_operator()
sympy.physics.quantum.tests.test_printing.test_qexpr()
sympy.physics.quantum.tests.test_printing.test_qubit()
sympy.physics.quantum.tests.test_printing.test_spin()
sympy.physics.quantum.tests.test_printing.test_state()
sympy.physics.quantum.tests.test_printing.test_tensorproduct()
sympy.physics.quantum.tests.test_printing.upretty(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_circuitutils.py----------------------------------------
A:sympy.physics.quantum.tests.test_circuitutils.x->X(0)
A:sympy.physics.quantum.tests.test_circuitutils.y->Y(0)
A:sympy.physics.quantum.tests.test_circuitutils.z->Z(0)
A:sympy.physics.quantum.tests.test_circuitutils.h->H(0)
A:sympy.physics.quantum.tests.test_circuitutils.x1->X(1)
A:sympy.physics.quantum.tests.test_circuitutils.y1->Y(1)
A:sympy.physics.quantum.tests.test_circuitutils.i0->Symbol('i0')
A:sympy.physics.quantum.tests.test_circuitutils.x_i0->X(i0)
A:sympy.physics.quantum.tests.test_circuitutils.y_i0->Y(i0)
A:sympy.physics.quantum.tests.test_circuitutils.z_i0->Z(i0)
A:sympy.physics.quantum.tests.test_circuitutils.h_i0->H(i0)
A:sympy.physics.quantum.tests.test_circuitutils.result->find_subcircuit(circuit, subcircuit)
A:sympy.physics.quantum.tests.test_circuitutils.cnot->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z->CGate((0,), Z(1))
A:sympy.physics.quantum.tests.test_circuitutils.actual->random_insert(circuit, eq_ids, seed=[loc, choice])
A:sympy.physics.quantum.tests.test_circuitutils.(x, y, z, h)->create_gate_sequence()
A:sympy.physics.quantum.tests.test_circuitutils.(actual, act_map, sndx, gen)->convert_to_symbolic_indices(args)
A:sympy.physics.quantum.tests.test_circuitutils.(x1, y1, z1, h1)->create_gate_sequence(1)
A:sympy.physics.quantum.tests.test_circuitutils.i1->Symbol('i1')
A:sympy.physics.quantum.tests.test_circuitutils.cnot_10->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_circuitutils.cnot_01->CNOT(0, 1)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_10->CGate(1, Z(0))
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_01->CGate(0, Z(1))
A:sympy.physics.quantum.tests.test_circuitutils.i2->Symbol('i2')
A:sympy.physics.quantum.tests.test_circuitutils.ccgate_z->CGate(i0, CGate(i1, Z(i2)))
A:sympy.physics.quantum.tests.test_circuitutils.ccgate_x->CGate(i1, CGate(i2, X(i0)))
A:sympy.physics.quantum.tests.test_circuitutils.index_gen->numbered_symbols(prefix='i', start=1)
A:sympy.physics.quantum.tests.test_circuitutils.i3->Symbol('i3')
A:sympy.physics.quantum.tests.test_circuitutils.cgate_x0_c321->CGate((3, 2, 1), X(0))
A:sympy.physics.quantum.tests.test_circuitutils.cnot_i1_i0->CNOT(i1, i0)
A:sympy.physics.quantum.tests.test_circuitutils.cnot_i0_i1->CNOT(i0, i1)
A:sympy.physics.quantum.tests.test_circuitutils.cgate_z_i1_i0->CGate(i1, Z(i0))
A:sympy.physics.quantum.tests.test_circuitutils.ids->list(bfs_identity_search(gate_list, 2, max_depth=4))
A:sympy.physics.quantum.tests.test_circuitutils.circuit->Mul(*circuit)
A:sympy.physics.quantum.tests.test_circuitutils.eq_ids->flatten_ids(ids)
sympy.physics.quantum.tests.test_circuitutils.create_gate_sequence(qubit=0)
sympy.physics.quantum.tests.test_circuitutils.test_convert_to_real_indices()
sympy.physics.quantum.tests.test_circuitutils.test_convert_to_symbolic_indices()
sympy.physics.quantum.tests.test_circuitutils.test_find_subcircuit()
sympy.physics.quantum.tests.test_circuitutils.test_kmp_table()
sympy.physics.quantum.tests.test_circuitutils.test_random_insert()
sympy.physics.quantum.tests.test_circuitutils.test_random_reduce()
sympy.physics.quantum.tests.test_circuitutils.test_replace_subcircuit()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_matrixutils.py----------------------------------------
A:sympy.physics.quantum.tests.test_matrixutils.m->Matrix([[1, 2], [3, 4]])
A:sympy.physics.quantum.tests.test_matrixutils.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_matrixutils.result->sparse.csr_matrix([[1, 2], [3, 4]], dtype='complex')
A:sympy.physics.quantum.tests.test_matrixutils.l1->zeros(4)
A:sympy.physics.quantum.tests.test_matrixutils.l2->zeros(4)
A:sympy.physics.quantum.tests.test_matrixutils.l3->zeros(2)
A:sympy.physics.quantum.tests.test_matrixutils.vec->Matrix([1, 2, 3])
A:sympy.physics.quantum.tests.test_matrixutils.numpyl1->import_module('numpy').matrix(l1.tolist())
A:sympy.physics.quantum.tests.test_matrixutils.numpyl2->import_module('numpy').matrix(vec.tolist())
A:sympy.physics.quantum.tests.test_matrixutils.numpy_product->import_module('numpy').kron(l1, np.kron(vec, l2))
A:sympy.physics.quantum.tests.test_matrixutils.sympy_product->matrix_tensor_product(l1, vec, l2)
A:sympy.physics.quantum.tests.test_matrixutils.random_matrix1->import_module('numpy').random.rand(randint(1, 5), randint(1, 5))
A:sympy.physics.quantum.tests.test_matrixutils.random_matrix2->import_module('numpy').random.rand(randint(1, 5), randint(1, 5))
A:sympy.physics.quantum.tests.test_matrixutils.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_matrixutils.sym->matrix_zeros(4, 4, format='sympy')
A:sympy.physics.quantum.tests.test_matrixutils.num->matrix_zeros(4, 4, format='numpy')
A:sympy.physics.quantum.tests.test_matrixutils.sci->matrix_zeros(4, 4, format='scipy.sparse')
sympy.physics.quantum.tests.test_matrixutils.test_matrix_tensor_product()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_to_zero()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_numpy()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_scipy()
sympy.physics.quantum.tests.test_matrixutils.test_matrix_zeros_sympy()
sympy.physics.quantum.tests.test_matrixutils.test_sympy_to_sympy()
sympy.physics.quantum.tests.test_matrixutils.test_to_numpy()
sympy.physics.quantum.tests.test_matrixutils.test_to_scipy_sparse()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_dagger.py----------------------------------------
A:sympy.physics.quantum.tests.test_dagger.x->symbols('x')
A:sympy.physics.quantum.tests.test_dagger.i->Integer(3)
A:sympy.physics.quantum.tests.test_dagger.p->symbols('p')
A:sympy.physics.quantum.tests.test_dagger.A->symbols('A', commutative=False)
A:sympy.physics.quantum.tests.test_dagger.m->Matrix([[I, x * I], [2, 4]])
A:sympy.physics.quantum.tests.test_dagger.f->Foo()
A:sympy.physics.quantum.tests.test_dagger.d->Dagger(f)
A:sympy.physics.quantum.tests.test_dagger.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_dagger.a->sparse.csr_matrix([[1.0 + 0j, 2j], [-1j, 2.0 + 0j]])
A:sympy.physics.quantum.tests.test_dagger.adag->sparse.csr_matrix([[1.0 + 0j, 2j], [-1j, 2.0 + 0j]]).copy().transpose().conjugate()
A:sympy.physics.quantum.tests.test_dagger.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
sympy.physics.quantum.tests.test_Foo(Expr)
sympy.physics.quantum.tests.test_Foo._eval_adjoint(self)
sympy.physics.quantum.tests.test_dagger.Foo(Expr)
sympy.physics.quantum.tests.test_dagger.Foo._eval_adjoint(self)
sympy.physics.quantum.tests.test_dagger.test_eval_adjoint()
sympy.physics.quantum.tests.test_dagger.test_matrix()
sympy.physics.quantum.tests.test_dagger.test_numpy_dagger()
sympy.physics.quantum.tests.test_dagger.test_scalars()
sympy.physics.quantum.tests.test_dagger.test_scipy_sparse_dagger()
sympy.physics.quantum.tests.test_test_eval_adjoint()
sympy.physics.quantum.tests.test_test_matrix()
sympy.physics.quantum.tests.test_test_numpy_dagger()
sympy.physics.quantum.tests.test_test_scalars()
sympy.physics.quantum.tests.test_test_scipy_sparse_dagger()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_density.py----------------------------------------
A:sympy.physics.quantum.tests.test_density.d->Density([k1, 0.5], [k2, 0.5])
A:sympy.physics.quantum.tests.test_density.(x, y)->symbols('x y')
A:sympy.physics.quantum.tests.test_density.(A, B, C, D, E, F)->symbols('A B C D E F', commutative=False)
A:sympy.physics.quantum.tests.test_density.d_with_sym->Density([XKet(x * y), 0.5], [PxKet(x * y), 0.5])
A:sympy.physics.quantum.tests.test_density.t->Tr(d)
A:sympy.physics.quantum.tests.test_density.t2->TensorProduct(A, B)
A:sympy.physics.quantum.tests.test_density.t3->TensorProduct(C, D)
A:sympy.physics.quantum.tests.test_density.tp1->TensorProduct(JzKet(1, 1), JzKet(1, -1))
A:sympy.physics.quantum.tests.test_density.tp2->TensorProduct(JzKet(S(1) / 2, S(1) / 2), JzKet(S(1) / 2, -S(1) / 2))
A:sympy.physics.quantum.tests.test_density.states->Density([k1, 0.5], [k2, 0.5]).states()
A:sympy.physics.quantum.tests.test_density.probs->Density([k1, 0.5], [k2, 0.5]).probs()
A:sympy.physics.quantum.tests.test_density.up->JzKet(S(1) / 2, S(1) / 2)
A:sympy.physics.quantum.tests.test_density.down->JzKet(S(1) / 2, -S(1) / 2)
A:sympy.physics.quantum.tests.test_density.ent->entropy(np_mat)
A:sympy.physics.quantum.tests.test_density.np->import_module('numpy', min_module_version='1.4.0')
A:sympy.physics.quantum.tests.test_density.np_mat->represent(d, format='numpy')
A:sympy.physics.quantum.tests.test_density.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_density.mat->represent(d, format='scipy.sparse')
A:sympy.physics.quantum.tests.test_density.(x, t)->symbols('x t')
A:sympy.physics.quantum.tests.test_density.k1->TestTimeDepKet(0, 0.5)
A:sympy.physics.quantum.tests.test_density.k2->TestTimeDepKet(0, 1)
A:sympy.physics.quantum.tests.test_density.up_dm->Density([up, 1.0])
A:sympy.physics.quantum.tests.test_density.down_dm->Density([down, 1.0])
A:sympy.physics.quantum.tests.test_density.updown_dm->Density([updown, 1.0])
A:sympy.physics.quantum.tests.test_density.d1->Density([state3, 0.7], [state4, 0.3])
A:sympy.physics.quantum.tests.test_density.d2->Density([state3, 0.2], [state4, 0.8])
A:sympy.physics.quantum.tests.test_density.state1->Qubit('0')
A:sympy.physics.quantum.tests.test_density.state2->Qubit('1')
A:sympy.physics.quantum.tests.test_density.state1_dm->Density([state1, 1])
A:sympy.physics.quantum.tests.test_density.state2_dm->Density([state2, 1])
A:sympy.physics.quantum.tests.test_density.state3_dm->Density([state3, 1])
sympy.physics.quantum.tests.test_density.test_apply_op()
sympy.physics.quantum.tests.test_density.test_doit()
sympy.physics.quantum.tests.test_density.test_entropy()
sympy.physics.quantum.tests.test_density.test_eval_args()
sympy.physics.quantum.tests.test_density.test_eval_trace()
sympy.physics.quantum.tests.test_density.test_fidelity()
sympy.physics.quantum.tests.test_density.test_get_prob()
sympy.physics.quantum.tests.test_density.test_get_state()
sympy.physics.quantum.tests.test_density.test_probs()
sympy.physics.quantum.tests.test_density.test_represent()
sympy.physics.quantum.tests.test_density.test_states()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_qexpr.py----------------------------------------
A:sympy.physics.quantum.tests.test_qexpr.x->Symbol('x')
A:sympy.physics.quantum.tests.test_qexpr.y->Symbol('y')
A:sympy.physics.quantum.tests.test_qexpr.q->sympy.physics.quantum.qexpr.QExpr._new_rawargs(0, 1, HilbertSpace())
A:sympy.physics.quantum.tests.test_qexpr.q1->QExpr(x, y)
A:sympy.physics.quantum.tests.test_qexpr.q2->QExpr('q2')
sympy.physics.quantum.tests.test_qexpr.test_qexpr_commutative()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_commutative_free_symbols()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_new()
sympy.physics.quantum.tests.test_qexpr.test_qexpr_subs()
sympy.physics.quantum.tests.test_qexpr.test_qsympify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_pauli.py----------------------------------------
A:sympy.physics.quantum.tests.test_pauli.up->SigmaZBra(0)
A:sympy.physics.quantum.tests.test_pauli.down->SigmaZBra(1)
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_adjoint()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_adjoint_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_anticommutator()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_commutator()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_commutator_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_multiplication()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_multiplication_with_labels()
sympy.physics.quantum.tests.test_pauli.test_pauli_operators_types()
sympy.physics.quantum.tests.test_pauli.test_pauli_states()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_circuitplot.py----------------------------------------
A:sympy.physics.quantum.tests.test_circuitplot.mpl->import_module('matplotlib')
A:sympy.physics.quantum.tests.test_circuitplot.Qgate->CreateCGate('Q')
A:sympy.physics.quantum.tests.test_circuitplot.c->CircuitPlot(SWAP(0, 2) * H(0) * CGate((0,), S(1)) * H(1) * CGate((0,), T(2)) * CGate((1,), S(2)) * H(2), 3, labels=labeller(3, 'j'))
sympy.physics.quantum.tests.test_circuitplot.test_Mz()
sympy.physics.quantum.tests.test_circuitplot.test_cnot()
sympy.physics.quantum.tests.test_circuitplot.test_create1()
sympy.physics.quantum.tests.test_circuitplot.test_createc()
sympy.physics.quantum.tests.test_circuitplot.test_ex1()
sympy.physics.quantum.tests.test_circuitplot.test_ex4()
sympy.physics.quantum.tests.test_circuitplot.test_labeller()
sympy.physics.quantum.tests.test_circuitplot.test_render_label()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_qasm.py----------------------------------------
A:sympy.physics.quantum.tests.test_qasm.q->Qasm('def CQ,1,Q', 'qubit q0', 'qubit q1', 'CQ q0,q1')
A:sympy.physics.quantum.tests.test_qasm.Qgate->CreateCGate('Q')
sympy.physics.quantum.tests.test_qasm.test_qasm_1q()
sympy.physics.quantum.tests.test_qasm.test_qasm_2q()
sympy.physics.quantum.tests.test_qasm.test_qasm_3q()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex1()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex1_methodcalls()
sympy.physics.quantum.tests.test_qasm.test_qasm_ex2()
sympy.physics.quantum.tests.test_qasm.test_qasm_fixcommand()
sympy.physics.quantum.tests.test_qasm.test_qasm_flip_index()
sympy.physics.quantum.tests.test_qasm.test_qasm_fullsplit()
sympy.physics.quantum.tests.test_qasm.test_qasm_get_index()
sympy.physics.quantum.tests.test_qasm.test_qasm_nonblank()
sympy.physics.quantum.tests.test_qasm.test_qasm_prod()
sympy.physics.quantum.tests.test_qasm.test_qasm_qdef()
sympy.physics.quantum.tests.test_qasm.test_qasm_readqasm()
sympy.physics.quantum.tests.test_qasm.test_qasm_stripquotes()
sympy.physics.quantum.tests.test_qasm.test_qasm_swap()
sympy.physics.quantum.tests.test_qasm.test_qasm_trim()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_state.py----------------------------------------
A:sympy.physics.quantum.tests.test_state.(x, y, t)->symbols('x,y,t')
A:sympy.physics.quantum.tests.test_state.k->Wavefunction(x ** 2, 'x')
A:sympy.physics.quantum.tests.test_state.b->Bra('b')
A:sympy.physics.quantum.tests.test_state.k0->Ket(0)
A:sympy.physics.quantum.tests.test_state.k1->Ket(1)
A:sympy.physics.quantum.tests.test_state.x->symbols('x', complex=True)
A:sympy.physics.quantum.tests.test_state.k2->Ket('k2')
A:sympy.physics.quantum.tests.test_state.(x, y)->symbols('x y', real=True)
A:sympy.physics.quantum.tests.test_state.L->symbols('L', positive=True)
A:sympy.physics.quantum.tests.test_state.n->symbols('n', integer=True, positive=True)
A:sympy.physics.quantum.tests.test_state.f->Wavefunction(x ** 2, x)
A:sympy.physics.quantum.tests.test_state.p->Wavefunction(x ** 2, x).prob()
A:sympy.physics.quantum.tests.test_state.g->Wavefunction(x ** 2 * y + y ** 2 * x, (x, 0, 1), (y, 0, 2))
A:sympy.physics.quantum.tests.test_state.h->Wavefunction(sqrt(5) * x ** 2, (x, 0, 1))
A:sympy.physics.quantum.tests.test_state.piab->Wavefunction(sin(n * pi * x / L), (x, 0, L))
sympy.physics.quantum.tests.test_CustomKet(Ket)
sympy.physics.quantum.tests.test_CustomKet.default_args(self)
sympy.physics.quantum.tests.test_CustomKetMultipleLabels(Ket)
sympy.physics.quantum.tests.test_CustomKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_CustomTimeDepKet(TimeDepKet)
sympy.physics.quantum.tests.test_CustomTimeDepKet.default_args(self)
sympy.physics.quantum.tests.test_CustomTimeDepKetMultipleLabels(TimeDepKet)
sympy.physics.quantum.tests.test_CustomTimeDepKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_state.CustomKet(Ket)
sympy.physics.quantum.tests.test_state.CustomKet.default_args(self)
sympy.physics.quantum.tests.test_state.CustomKetMultipleLabels(Ket)
sympy.physics.quantum.tests.test_state.CustomKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_state.CustomTimeDepKet(TimeDepKet)
sympy.physics.quantum.tests.test_state.CustomTimeDepKet.default_args(self)
sympy.physics.quantum.tests.test_state.CustomTimeDepKetMultipleLabels(TimeDepKet)
sympy.physics.quantum.tests.test_state.CustomTimeDepKetMultipleLabels.default_args(self)
sympy.physics.quantum.tests.test_state.test_bra()
sympy.physics.quantum.tests.test_state.test_bra_ket_dagger()
sympy.physics.quantum.tests.test_state.test_ket()
sympy.physics.quantum.tests.test_state.test_ops()
sympy.physics.quantum.tests.test_state.test_time_dep_bra()
sympy.physics.quantum.tests.test_state.test_time_dep_ket()
sympy.physics.quantum.tests.test_state.test_wavefunction()
sympy.physics.quantum.tests.test_test_bra()
sympy.physics.quantum.tests.test_test_bra_ket_dagger()
sympy.physics.quantum.tests.test_test_ket()
sympy.physics.quantum.tests.test_test_ops()
sympy.physics.quantum.tests.test_test_time_dep_bra()
sympy.physics.quantum.tests.test_test_time_dep_ket()
sympy.physics.quantum.tests.test_test_wavefunction()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_shor.py----------------------------------------
sympy.physics.quantum.tests.test_shor.test_CMod()
sympy.physics.quantum.tests.test_shor.test_continued_frac()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_tensorproduct.py----------------------------------------
A:sympy.physics.quantum.tests.test_tensorproduct.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.physics.quantum.tests.test_tensorproduct.x->symbols('x')
A:sympy.physics.quantum.tests.test_tensorproduct.mat1->Matrix([[1, 2 * I], [1 + I, 3]])
A:sympy.physics.quantum.tests.test_tensorproduct.mat2->Matrix([[2 * I, 3], [4 * I, 2]])
A:sympy.physics.quantum.tests.test_tensorproduct.(A, B, C, D, E, F)->symbols('A B C D E F', commutative=False)
A:sympy.physics.quantum.tests.test_tensorproduct.t->Tr(d, [1])
A:sympy.physics.quantum.tests.test_tensorproduct.d->Density([t2 + t3, 1.0])
A:sympy.physics.quantum.tests.test_tensorproduct.tr->Tr(d, [0, 2])
A:sympy.physics.quantum.tests.test_tensorproduct.t2->TensorProduct(A, B)
A:sympy.physics.quantum.tests.test_tensorproduct.t3->TensorProduct(C, D)
sympy.physics.quantum.tests.test_tensorproduct.test_eval_trace()
sympy.physics.quantum.tests.test_tensorproduct.test_issue_5923()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_abstract()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_commutator()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_dagger()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_expand()
sympy.physics.quantum.tests.test_tensorproduct.test_tensor_product_simp()
sympy.physics.quantum.tests.test_test_eval_trace()
sympy.physics.quantum.tests.test_test_issue_5923()
sympy.physics.quantum.tests.test_test_tensor_product_abstract()
sympy.physics.quantum.tests.test_test_tensor_product_commutator()
sympy.physics.quantum.tests.test_test_tensor_product_dagger()
sympy.physics.quantum.tests.test_test_tensor_product_expand()
sympy.physics.quantum.tests.test_test_tensor_product_simp()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_piab.py----------------------------------------
A:sympy.physics.quantum.tests.test_piab.(i, j, n, x)->symbols('i j n x')
sympy.physics.quantum.tests.test_piab.test_H()
sympy.physics.quantum.tests.test_piab.test_states()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_operator.py----------------------------------------
A:sympy.physics.quantum.tests.test_operator.t_ket->CustomKet()
A:sympy.physics.quantum.tests.test_operator.t_op->CustomOp()
A:sympy.physics.quantum.tests.test_operator.A->Operator('A')
A:sympy.physics.quantum.tests.test_operator.B->Operator('B')
A:sympy.physics.quantum.tests.test_operator.C->Operator('C')
A:sympy.physics.quantum.tests.test_operator.H->HermitianOperator('H')
A:sympy.physics.quantum.tests.test_operator.U->UnitaryOperator('U')
A:sympy.physics.quantum.tests.test_operator.I->IdentityOperator()
A:sympy.physics.quantum.tests.test_operator.O->Operator('O')
A:sympy.physics.quantum.tests.test_operator.x->Symbol('x')
A:sympy.physics.quantum.tests.test_operator.k->Ket('k')
A:sympy.physics.quantum.tests.test_operator.b->Bra('b')
A:sympy.physics.quantum.tests.test_operator.op->OuterProduct(k, b)
A:sympy.physics.quantum.tests.test_operator.f->Function('f')
A:sympy.physics.quantum.tests.test_operator.d->DifferentialOperator(1 / r * Derivative(r * Derivative(f(r, th), r), r) + 1 / r ** 2 * Derivative(f(r, th), th, 2), f(r, th))
A:sympy.physics.quantum.tests.test_operator.g->Wavefunction(x ** 3, x)
A:sympy.physics.quantum.tests.test_operator.y->Symbol('y')
A:sympy.physics.quantum.tests.test_operator.w->Wavefunction(r ** 2 * sin(th), r, (th, 0, pi))
A:sympy.physics.quantum.tests.test_operator.(r, th)->symbols('r th')
sympy.physics.quantum.tests.test_CustomKet(Ket)
sympy.physics.quantum.tests.test_CustomKet.default_args(self)
sympy.physics.quantum.tests.test_CustomOp(HermitianOperator)
sympy.physics.quantum.tests.test_CustomOp.default_args(self)
sympy.physics.quantum.tests.test_operator.CustomKet(Ket)
sympy.physics.quantum.tests.test_operator.CustomKet.default_args(self)
sympy.physics.quantum.tests.test_operator.CustomOp(HermitianOperator)
sympy.physics.quantum.tests.test_operator.CustomOp.default_args(self)
sympy.physics.quantum.tests.test_operator.test_differential_operator()
sympy.physics.quantum.tests.test_operator.test_hermitian()
sympy.physics.quantum.tests.test_operator.test_identity()
sympy.physics.quantum.tests.test_operator.test_operator()
sympy.physics.quantum.tests.test_operator.test_operator_dagger()
sympy.physics.quantum.tests.test_operator.test_operator_inv()
sympy.physics.quantum.tests.test_operator.test_outer_product()
sympy.physics.quantum.tests.test_operator.test_unitary()
sympy.physics.quantum.tests.test_test_differential_operator()
sympy.physics.quantum.tests.test_test_hermitian()
sympy.physics.quantum.tests.test_test_identity()
sympy.physics.quantum.tests.test_test_operator()
sympy.physics.quantum.tests.test_test_operator_dagger()
sympy.physics.quantum.tests.test_test_operator_inv()
sympy.physics.quantum.tests.test_test_outer_product()
sympy.physics.quantum.tests.test_test_unitary()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_commutator.py----------------------------------------
A:sympy.physics.quantum.tests.test_commutator.(a, b, c)->symbols('a,b,c')
A:sympy.physics.quantum.tests.test_commutator.(A, B, C, D)->symbols('A,B,C,D', commutative=False)
A:sympy.physics.quantum.tests.test_commutator.c->Comm(A, B)
A:sympy.physics.quantum.tests.test_commutator.comm->Comm(A * B, C)
A:sympy.physics.quantum.tests.test_commutator.F->Foo('F')
A:sympy.physics.quantum.tests.test_commutator.B->Bar('B')
A:sympy.physics.quantum.tests.test_commutator.T->Tam('T')
sympy.physics.quantum.tests.test_Bar(Operator)
sympy.physics.quantum.tests.test_Foo(Operator)
sympy.physics.quantum.tests.test_Foo._eval_commutator_Bar(self,bar)
sympy.physics.quantum.tests.test_Tam(Operator)
sympy.physics.quantum.tests.test_Tam._eval_commutator_Foo(self,foo)
sympy.physics.quantum.tests.test_commutator.Bar(Operator)
sympy.physics.quantum.tests.test_commutator.Foo(Operator)
sympy.physics.quantum.tests.test_commutator.Foo._eval_commutator_Bar(self,bar)
sympy.physics.quantum.tests.test_commutator.Tam(Operator)
sympy.physics.quantum.tests.test_commutator.Tam._eval_commutator_Foo(self,foo)
sympy.physics.quantum.tests.test_commutator.test_commutator()
sympy.physics.quantum.tests.test_commutator.test_commutator_dagger()
sympy.physics.quantum.tests.test_commutator.test_commutator_identities()
sympy.physics.quantum.tests.test_commutator.test_eval_commutator()
sympy.physics.quantum.tests.test_test_commutator()
sympy.physics.quantum.tests.test_test_commutator_dagger()
sympy.physics.quantum.tests.test_test_commutator_identities()
sympy.physics.quantum.tests.test_test_eval_commutator()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_cartesian.py----------------------------------------
A:sympy.physics.quantum.tests.test_cartesian.(x, y, z, x_1, x_2, x_3, y_1, z_1)->symbols('x,y,z,x_1,x_2,x_3,y_1,z_1')
A:sympy.physics.quantum.tests.test_cartesian.(px, py, px_1, px_2)->symbols('px py px_1 px_2')
A:sympy.physics.quantum.tests.test_cartesian.rep_p->represent(XOp(), basis=PxOp)
A:sympy.physics.quantum.tests.test_cartesian.rep_x->represent(PxOp(), basis=XOp)
A:sympy.physics.quantum.tests.test_cartesian.test_ket->PositionKet3D(x, y, z)
A:sympy.physics.quantum.tests.test_cartesian.other_ket->PositionKet3D(x_1, y_1, z_1)
sympy.physics.quantum.tests.test_cartesian.test_3dpos()
sympy.physics.quantum.tests.test_cartesian.test_p()
sympy.physics.quantum.tests.test_cartesian.test_x()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_operatorset.py----------------------------------------
sympy.physics.quantum.tests.test_operatorset.test_op_to_state()
sympy.physics.quantum.tests.test_operatorset.test_spin()
sympy.physics.quantum.tests.test_operatorset.test_state_to_op()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_innerproduct.py----------------------------------------
A:sympy.physics.quantum.tests.test_innerproduct.k->Ket('k')
A:sympy.physics.quantum.tests.test_innerproduct.b->BarBra('bar')
A:sympy.physics.quantum.tests.test_innerproduct.ip->InnerProduct(b, k)
A:sympy.physics.quantum.tests.test_innerproduct.f->FooKet('foo')
sympy.physics.quantum.tests.test_BarBra(Bra,BarState)
sympy.physics.quantum.tests.test_BarBra.dual_class(self)
sympy.physics.quantum.tests.test_BarKet(Ket,BarState)
sympy.physics.quantum.tests.test_BarKet.dual_class(self)
sympy.physics.quantum.tests.test_BarState(StateBase)
sympy.physics.quantum.tests.test_FooBra(Bra,FooState)
sympy.physics.quantum.tests.test_FooBra.dual_class(self)
sympy.physics.quantum.tests.test_FooKet(Ket,FooState)
sympy.physics.quantum.tests.test_FooKet._eval_innerproduct_BarBra(self,bra)
sympy.physics.quantum.tests.test_FooKet._eval_innerproduct_FooBra(self,bra)
sympy.physics.quantum.tests.test_FooKet.dual_class(self)
sympy.physics.quantum.tests.test_FooState(StateBase)
sympy.physics.quantum.tests.test_innerproduct.BarBra(Bra,BarState)
sympy.physics.quantum.tests.test_innerproduct.BarBra.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.BarKet(Ket,BarState)
sympy.physics.quantum.tests.test_innerproduct.BarKet.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.BarState(StateBase)
sympy.physics.quantum.tests.test_innerproduct.FooBra(Bra,FooState)
sympy.physics.quantum.tests.test_innerproduct.FooBra.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.FooKet(Ket,FooState)
sympy.physics.quantum.tests.test_innerproduct.FooKet._eval_innerproduct_BarBra(self,bra)
sympy.physics.quantum.tests.test_innerproduct.FooKet._eval_innerproduct_FooBra(self,bra)
sympy.physics.quantum.tests.test_innerproduct.FooKet.dual_class(self)
sympy.physics.quantum.tests.test_innerproduct.FooState(StateBase)
sympy.physics.quantum.tests.test_innerproduct.test_doit()
sympy.physics.quantum.tests.test_innerproduct.test_innerproduct()
sympy.physics.quantum.tests.test_innerproduct.test_innerproduct_dagger()
sympy.physics.quantum.tests.test_test_doit()
sympy.physics.quantum.tests.test_test_innerproduct()
sympy.physics.quantum.tests.test_test_innerproduct_dagger()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_boson.py----------------------------------------
A:sympy.physics.quantum.tests.test_boson.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_boson.b->BosonOp('b')
sympy.physics.quantum.tests.test_boson.test_boson_states()
sympy.physics.quantum.tests.test_boson.test_bosonoperator()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_spin.py----------------------------------------
A:sympy.physics.quantum.tests.test_spin.(j1, j2, j3, j4, m1, m2, m3, m4)->symbols('j1:5 m1:5')
A:sympy.physics.quantum.tests.test_spin.(j12, j13, j24, j34, j123, j134, mi, mi1, mp)->symbols('j12 j13 j24 j34 j123 j134 mi mi1 mp')
A:sympy.physics.quantum.tests.test_spin.(a, b, g)->symbols('a b g')
A:sympy.physics.quantum.tests.test_spin.(j, m)->symbols('j m')
A:sympy.physics.quantum.tests.test_spin.got->qapply(Rotation(0, pi / 2, 0) * state)
sympy.physics.quantum.tests.test_spin.test_couple_2_states()
sympy.physics.quantum.tests.test_spin.test_couple_2_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_3_states()
sympy.physics.quantum.tests.test_spin.test_couple_3_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_4_states()
sympy.physics.quantum.tests.test_spin.test_couple_4_states_numerical()
sympy.physics.quantum.tests.test_spin.test_couple_symbolic()
sympy.physics.quantum.tests.test_spin.test_innerproduct()
sympy.physics.quantum.tests.test_spin.test_innerproducts_of_rewritten_states()
sympy.physics.quantum.tests.test_spin.test_j2()
sympy.physics.quantum.tests.test_spin.test_jminus()
sympy.physics.quantum.tests.test_spin.test_jplus()
sympy.physics.quantum.tests.test_spin.test_jx()
sympy.physics.quantum.tests.test_spin.test_jy()
sympy.physics.quantum.tests.test_spin.test_jz()
sympy.physics.quantum.tests.test_spin.test_jzket()
sympy.physics.quantum.tests.test_spin.test_jzketcoupled()
sympy.physics.quantum.tests.test_spin.test_represent_coupled_states()
sympy.physics.quantum.tests.test_spin.test_represent_rotation()
sympy.physics.quantum.tests.test_spin.test_represent_spin_operators()
sympy.physics.quantum.tests.test_spin.test_represent_spin_states()
sympy.physics.quantum.tests.test_spin.test_represent_uncoupled_states()
sympy.physics.quantum.tests.test_spin.test_rewrite_Bra()
sympy.physics.quantum.tests.test_spin.test_rewrite_Ket()
sympy.physics.quantum.tests.test_spin.test_rewrite_coupled_state()
sympy.physics.quantum.tests.test_spin.test_rewrite_same()
sympy.physics.quantum.tests.test_spin.test_rewrite_uncoupled_state()
sympy.physics.quantum.tests.test_spin.test_rotation()
sympy.physics.quantum.tests.test_spin.test_rotation_d()
sympy.physics.quantum.tests.test_spin.test_rotation_small_d()
sympy.physics.quantum.tests.test_spin.test_uncouple_2_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_2_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_3_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_3_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_4_coupled_states()
sympy.physics.quantum.tests.test_spin.test_uncouple_4_coupled_states_numerical()
sympy.physics.quantum.tests.test_spin.test_uncouple_symbolic()
sympy.physics.quantum.tests.test_spin.test_wignerd()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_qft.py----------------------------------------
A:sympy.physics.quantum.tests.test_qft.x->Symbol('x')
A:sympy.physics.quantum.tests.test_qft.c->QFT(0, 3)
A:sympy.physics.quantum.tests.test_qft.a->represent(c, nqubits=3)
A:sympy.physics.quantum.tests.test_qft.b->represent(c.decompose(), nqubits=3)
sympy.physics.quantum.tests.test_qft.test_RkGate()
sympy.physics.quantum.tests.test_qft.test_qft_represent()
sympy.physics.quantum.tests.test_qft.test_quantum_fourier()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_sho1d.py----------------------------------------
A:sympy.physics.quantum.tests.test_sho1d.ad->RaisingOp('a')
A:sympy.physics.quantum.tests.test_sho1d.a->LoweringOp('a')
A:sympy.physics.quantum.tests.test_sho1d.k->SHOKet('k')
A:sympy.physics.quantum.tests.test_sho1d.kz->SHOKet(0)
A:sympy.physics.quantum.tests.test_sho1d.kf->SHOKet(1)
A:sympy.physics.quantum.tests.test_sho1d.k3->SHOKet(3)
A:sympy.physics.quantum.tests.test_sho1d.b->SHOBra('b')
A:sympy.physics.quantum.tests.test_sho1d.b3->SHOBra(3)
A:sympy.physics.quantum.tests.test_sho1d.H->Hamiltonian('H')
A:sympy.physics.quantum.tests.test_sho1d.N->NumberOp('N')
A:sympy.physics.quantum.tests.test_sho1d.omega->Symbol('omega')
A:sympy.physics.quantum.tests.test_sho1d.m->Symbol('m')
A:sympy.physics.quantum.tests.test_sho1d.ndim->Integer(4)
A:sympy.physics.quantum.tests.test_sho1d.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_sho1d.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_sympy->represent(ad, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.a_rep->represent(a, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.N_rep->represent(N, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.H_rep->represent(H, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.k3_rep->represent(k3, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.b3_rep->represent(b3, basis=N, ndim=4, format='sympy')
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_numpy->represent(ad, basis=N, ndim=4, format='numpy')
A:sympy.physics.quantum.tests.test_sho1d.ad_rep_scipy->represent(ad, basis=N, ndim=4, format='scipy.sparse', spmatrix='lil')
sympy.physics.quantum.tests.test_sho1d.test_Hamiltonian()
sympy.physics.quantum.tests.test_sho1d.test_LoweringOp()
sympy.physics.quantum.tests.test_sho1d.test_NumberOp()
sympy.physics.quantum.tests.test_sho1d.test_RaisingOp()
sympy.physics.quantum.tests.test_sho1d.test_SHOKet()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_grover.py----------------------------------------
A:sympy.physics.quantum.tests.test_grover.v->OracleGate(numqubits, return_one_on_two)
A:sympy.physics.quantum.tests.test_grover.basis_states->superposition_basis(nqubits)
A:sympy.physics.quantum.tests.test_grover.expected->IntQubit(1, numqubits)
A:sympy.physics.quantum.tests.test_grover.iterated->qapply(iterated)
sympy.physics.quantum.tests.test_grover.return_one_on_one(qubits)
sympy.physics.quantum.tests.test_grover.return_one_on_two(qubits)
sympy.physics.quantum.tests.test_grover.test_OracleGate()
sympy.physics.quantum.tests.test_grover.test_WGate()
sympy.physics.quantum.tests.test_grover.test_grover()
sympy.physics.quantum.tests.test_grover.test_grover_iteration_1()
sympy.physics.quantum.tests.test_grover.test_grover_iteration_2()
sympy.physics.quantum.tests.test_grover.test_superposition_basis()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_qapply.py----------------------------------------
A:sympy.physics.quantum.tests.test_qapply.(j, jp, m, mp)->symbols("j j' m m'")
A:sympy.physics.quantum.tests.test_qapply.z->JzKet(1, 0)
A:sympy.physics.quantum.tests.test_qapply.po->JzKet(1, 1)
A:sympy.physics.quantum.tests.test_qapply.mo->JzKet(1, -1)
A:sympy.physics.quantum.tests.test_qapply.A->Ket(x, y)
A:sympy.physics.quantum.tests.test_qapply.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_qapply.b->BosonOp('b')
A:sympy.physics.quantum.tests.test_qapply.ket1->TensorProduct(BosonFockKet(1), BosonFockKet(2))
A:sympy.physics.quantum.tests.test_qapply.ket2->TensorProduct(BosonFockKet(0), BosonFockKet(0))
A:sympy.physics.quantum.tests.test_qapply.ket3->TensorProduct(BosonFockKet(0), BosonFockKet(2))
A:sympy.physics.quantum.tests.test_qapply.bra1->TensorProduct(BosonFockBra(0), BosonFockBra(0))
A:sympy.physics.quantum.tests.test_qapply.bra2->TensorProduct(BosonFockBra(1), BosonFockBra(2))
A:sympy.physics.quantum.tests.test_qapply.(x, y)->symbols('x y', commutative=False)
A:sympy.physics.quantum.tests.test_qapply.B->Operator('B')
A:sympy.physics.quantum.tests.test_qapply.d->Density([Jz * mo, 0.5], [Jz * po, 0.5])
sympy.physics.quantum.tests.test_Foo(Operator)
sympy.physics.quantum.tests.test_Foo._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.tests.test_qapply.Foo(Operator)
sympy.physics.quantum.tests.test_qapply.Foo._apply_operator_JzKet(self,ket,**options)
sympy.physics.quantum.tests.test_qapply.test_anticommutator()
sympy.physics.quantum.tests.test_qapply.test_basic()
sympy.physics.quantum.tests.test_qapply.test_commutator()
sympy.physics.quantum.tests.test_qapply.test_dagger()
sympy.physics.quantum.tests.test_qapply.test_density()
sympy.physics.quantum.tests.test_qapply.test_extra()
sympy.physics.quantum.tests.test_qapply.test_innerproduct()
sympy.physics.quantum.tests.test_qapply.test_issue_6073()
sympy.physics.quantum.tests.test_qapply.test_outerproduct()
sympy.physics.quantum.tests.test_qapply.test_tensorproduct()
sympy.physics.quantum.tests.test_qapply.test_zero()
sympy.physics.quantum.tests.test_test_anticommutator()
sympy.physics.quantum.tests.test_test_basic()
sympy.physics.quantum.tests.test_test_commutator()
sympy.physics.quantum.tests.test_test_dagger()
sympy.physics.quantum.tests.test_test_density()
sympy.physics.quantum.tests.test_test_extra()
sympy.physics.quantum.tests.test_test_innerproduct()
sympy.physics.quantum.tests.test_test_issue_6073()
sympy.physics.quantum.tests.test_test_outerproduct()
sympy.physics.quantum.tests.test_test_tensorproduct()
sympy.physics.quantum.tests.test_test_zero()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_constants.py----------------------------------------
sympy.physics.quantum.tests.test_constants.test_hbar()
sympy.physics.quantum.tests.test_test_hbar()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_operatorordering.py----------------------------------------
A:sympy.physics.quantum.tests.test_operatorordering.a->BosonOp('a')
A:sympy.physics.quantum.tests.test_operatorordering.b->BosonOp('b')
A:sympy.physics.quantum.tests.test_operatorordering.c->FermionOp('c')
A:sympy.physics.quantum.tests.test_operatorordering.d->FermionOp('d')
sympy.physics.quantum.tests.test_operatorordering.test_normal_order()
sympy.physics.quantum.tests.test_operatorordering.test_normal_ordered_form()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_hilbert.py----------------------------------------
A:sympy.physics.quantum.tests.test_hilbert.hs->HilbertSpace()
A:sympy.physics.quantum.tests.test_hilbert.c1->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_hilbert.n->Symbol('n')
A:sympy.physics.quantum.tests.test_hilbert.c2->ComplexSpace(n)
A:sympy.physics.quantum.tests.test_hilbert.b1->L2(Interval(-oo, 1))
A:sympy.physics.quantum.tests.test_hilbert.x->Symbol('x', real=True)
A:sympy.physics.quantum.tests.test_hilbert.y->Symbol('y', real=True)
A:sympy.physics.quantum.tests.test_hilbert.b2->L2(Interval(x, y))
A:sympy.physics.quantum.tests.test_hilbert.f1->FockSpace()
A:sympy.physics.quantum.tests.test_hilbert.f2->FockSpace()
A:sympy.physics.quantum.tests.test_hilbert.hs1->ComplexSpace(2)
A:sympy.physics.quantum.tests.test_hilbert.hs2->ComplexSpace(n)
A:sympy.physics.quantum.tests.test_hilbert.f->FockSpace()
sympy.physics.quantum.tests.test_hilbert.test_L2()
sympy.physics.quantum.tests.test_hilbert.test_complex_space()
sympy.physics.quantum.tests.test_hilbert.test_direct_sum()
sympy.physics.quantum.tests.test_hilbert.test_fock_space()
sympy.physics.quantum.tests.test_hilbert.test_hilbert_space()
sympy.physics.quantum.tests.test_hilbert.test_tensor_power()
sympy.physics.quantum.tests.test_hilbert.test_tensor_product()
sympy.physics.quantum.tests.test_test_L2()
sympy.physics.quantum.tests.test_test_complex_space()
sympy.physics.quantum.tests.test_test_direct_sum()
sympy.physics.quantum.tests.test_test_fock_space()
sympy.physics.quantum.tests.test_test_hilbert_space()
sympy.physics.quantum.tests.test_test_tensor_power()
sympy.physics.quantum.tests.test_test_tensor_product()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_cg.py----------------------------------------
A:sympy.physics.quantum.tests.test_cg.(j, m1, m1p, m2, m2p)->symbols('j m1 m1p m2 m2p')
A:sympy.physics.quantum.tests.test_cg.a->CG(S(1) / 2, S(1) / 2, S(1) / 2, -S(1) / 2, j, 0)
A:sympy.physics.quantum.tests.test_cg.b->CG(S(1) / 2, -S(1) / 2, S(1) / 2, S(1) / 2, j, 0)
A:sympy.physics.quantum.tests.test_cg.c->CG(1, 1, 1, -1, j, 0)
A:sympy.physics.quantum.tests.test_cg.d->CG(1, 0, 1, 0, j, 0)
A:sympy.physics.quantum.tests.test_cg.e->CG(1, -1, 1, 1, j, 0)
A:sympy.physics.quantum.tests.test_cg.(x, a, b, c, cp, alpha, beta, gamma, gammap)->symbols('x a b c cp alpha beta gamma gammap')
sympy.physics.quantum.tests.test_cg.test_cg_simp_add()
sympy.physics.quantum.tests.test_cg.test_cg_simp_sum()
sympy.physics.quantum.tests.test_cg.test_doit()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_identitysearch.py----------------------------------------
A:sympy.physics.quantum.tests.test_identitysearch.(x, y, z, h)->create_gate_sequence()
A:sympy.physics.quantum.tests.test_identitysearch.ph->PhaseGate(0)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_t->CGate(0, TGate(1))
A:sympy.physics.quantum.tests.test_identitysearch.gate_rules->set([((), (cgate_t ** (-1), ph ** (-1), x)), ((), (ph ** (-1), x, cgate_t ** (-1))), ((), (x, cgate_t ** (-1), ph ** (-1))), ((cgate_t,), (ph ** (-1), x)), ((ph,), (x, cgate_t ** (-1))), ((x,), (cgate_t ** (-1), ph ** (-1))), ((cgate_t, x), (ph ** (-1),)), ((ph, cgate_t), (x,)), ((x, ph), (cgate_t ** (-1),)), ((cgate_t, x, ph), ()), ((ph, cgate_t, x), ()), ((x, ph, cgate_t), ())])
A:sympy.physics.quantum.tests.test_identitysearch.actual->is_scalar_nonsparse_matrix(hh_circuit, numqubits, id_only)
A:sympy.physics.quantum.tests.test_identitysearch.expected->set([((), ())])
A:sympy.physics.quantum.tests.test_identitysearch.gate_ids->set([cnot * h * cgate_z * h, h * cgate_z * h * cnot, h * cnot * h * cgate_z, cgate_z * h * cnot * h])
A:sympy.physics.quantum.tests.test_identitysearch.cgate_y->CGate((1,), y)
A:sympy.physics.quantum.tests.test_identitysearch.cnot->CNOT(1, 0)
A:sympy.physics.quantum.tests.test_identitysearch.cgate_z->CGate((0,), Z(1))
A:sympy.physics.quantum.tests.test_identitysearch.circuit->Mul(*(cnot, h, cgate_z, h))
A:sympy.physics.quantum.tests.test_identitysearch.x0->X(0)
A:sympy.physics.quantum.tests.test_identitysearch.x1->X(1)
A:sympy.physics.quantum.tests.test_identitysearch.y1->Y(1)
A:sympy.physics.quantum.tests.test_identitysearch.z1->Z(1)
A:sympy.physics.quantum.tests.test_identitysearch.h->H(0)
A:sympy.physics.quantum.tests.test_identitysearch.h1->H(1)
A:sympy.physics.quantum.tests.test_identitysearch.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_identitysearch.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_identitysearch.gate_id->GateIdentity(x, y, z)
A:sympy.physics.quantum.tests.test_identitysearch.ids->set([gate_id])
A:sympy.physics.quantum.tests.test_identitysearch.id_set->set([GateIdentity(s, s, s, s)])
A:sympy.physics.quantum.tests.test_identitysearch.cgate_x->CGate((1,), x)
A:sympy.physics.quantum.tests.test_identitysearch.s->PhaseGate(0)
A:sympy.physics.quantum.tests.test_identitysearch.t->TGate(0)
sympy.physics.quantum.tests.test_identitysearch.create_gate_sequence(qubit=0)
sympy.physics.quantum.tests.test_identitysearch.test_bfs_identity_search()
sympy.physics.quantum.tests.test_identitysearch.test_generate_equivalent_ids_1()
sympy.physics.quantum.tests.test_identitysearch.test_generate_equivalent_ids_2()
sympy.physics.quantum.tests.test_identitysearch.test_generate_gate_rules_1()
sympy.physics.quantum.tests.test_identitysearch.test_generate_gate_rules_2()
sympy.physics.quantum.tests.test_identitysearch.test_is_degenerate()
sympy.physics.quantum.tests.test_identitysearch.test_is_reducible()
sympy.physics.quantum.tests.test_identitysearch.test_is_scalar_nonsparse_matrix()
sympy.physics.quantum.tests.test_identitysearch.test_is_scalar_sparse_matrix()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_qubit.py----------------------------------------
A:sympy.physics.quantum.tests.test_qubit.(x, y)->symbols('x,y')
A:sympy.physics.quantum.tests.test_qubit.qb->Qubit(0, 0, 0, 0)
A:sympy.physics.quantum.tests.test_qubit.qb_bra->QubitBra(0, 1)
A:sympy.physics.quantum.tests.test_qubit.iqb->IntQubit(4)
A:sympy.physics.quantum.tests.test_qubit.iqb_bra->IntQubitBra(5)
A:sympy.physics.quantum.tests.test_qubit.circuit->Qubit(int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2), int(random.random() * 2))
A:sympy.physics.quantum.tests.test_qubit.mat->Matrix([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
A:sympy.physics.quantum.tests.test_qubit.states->states.expand().expand()
A:sympy.physics.quantum.tests.test_qubit.state_rep->state_rep.expand().expand()
A:sympy.physics.quantum.tests.test_qubit.(a, b)->symbols('a b')
A:sympy.physics.quantum.tests.test_qubit.q1->Qubit('10110')
A:sympy.physics.quantum.tests.test_qubit.q2->Qubit('01010')
A:sympy.physics.quantum.tests.test_qubit.d->Density([q, 1.0])
A:sympy.physics.quantum.tests.test_qubit.t->Tr(d, 0)
sympy.physics.quantum.tests.test_qubit.test_IntQubit()
sympy.physics.quantum.tests.test_qubit.test_Qubit()
sympy.physics.quantum.tests.test_qubit.test_QubitBra()
sympy.physics.quantum.tests.test_qubit.test_apply_represent_equality()
sympy.physics.quantum.tests.test_qubit.test_eval_trace()
sympy.physics.quantum.tests.test_qubit.test_matrix_to_density()
sympy.physics.quantum.tests.test_qubit.test_matrix_to_qubits()
sympy.physics.quantum.tests.test_qubit.test_measure_all()
sympy.physics.quantum.tests.test_qubit.test_measure_normalize()
sympy.physics.quantum.tests.test_qubit.test_measure_partial()
sympy.physics.quantum.tests.test_qubit.test_superposition_of_states()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/quantum/tests/test_represent.py----------------------------------------
A:sympy.physics.quantum.tests.test_represent.Amat->Matrix([[1, I], [-I, 1]])
A:sympy.physics.quantum.tests.test_represent.Bmat->Matrix([[1, 2], [3, 4]])
A:sympy.physics.quantum.tests.test_represent.Avec->Matrix([[1], [I]])
A:sympy.physics.quantum.tests.test_represent.k->AKet('a')
A:sympy.physics.quantum.tests.test_represent.b->ABra('a')
A:sympy.physics.quantum.tests.test_represent.A->AOp('A')
A:sympy.physics.quantum.tests.test_represent.B->BOp('B')
A:sympy.physics.quantum.tests.test_represent.lhs->represent(test[0], basis=A, format='scipy.sparse')
A:sympy.physics.quantum.tests.test_represent.rhs->to_scipy_sparse(test[1])
A:sympy.physics.quantum.tests.test_represent.np->import_module('numpy')
A:sympy.physics.quantum.tests.test_represent.scipy->import_module('scipy', __import__kwargs={'fromlist': ['sparse']})
A:sympy.physics.quantum.tests.test_represent.x_ket->XKet('x')
A:sympy.physics.quantum.tests.test_represent.x_bra->XBra('x')
A:sympy.physics.quantum.tests.test_represent.x_op->XOp('X')
A:sympy.physics.quantum.tests.test_represent.basis_kets->enumerate_states(operators_to_state(x_op), 1, 2)
A:sympy.physics.quantum.tests.test_represent.test->XKet('foo')
sympy.physics.quantum.tests.test_ABra(Bra)
sympy.physics.quantum.tests.test_ABra.dual_class(self)
sympy.physics.quantum.tests.test_AKet(Ket)
sympy.physics.quantum.tests.test_AKet._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_AKet._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_AKet.dual_class(self)
sympy.physics.quantum.tests.test_AOp(Operator)
sympy.physics.quantum.tests.test_AOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_AOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_BOp(Operator)
sympy.physics.quantum.tests.test_BOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_BOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.ABra(Bra)
sympy.physics.quantum.tests.test_represent.ABra.dual_class(self)
sympy.physics.quantum.tests.test_represent.AKet(Ket)
sympy.physics.quantum.tests.test_represent.AKet._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.AKet._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.AKet.dual_class(self)
sympy.physics.quantum.tests.test_represent.AOp(Operator)
sympy.physics.quantum.tests.test_represent.AOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.AOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.BOp(Operator)
sympy.physics.quantum.tests.test_represent.BOp._represent_AOp(self,basis,**options)
sympy.physics.quantum.tests.test_represent.BOp._represent_default_basis(self,**options)
sympy.physics.quantum.tests.test_represent.test_enumerate_states()
sympy.physics.quantum.tests.test_represent.test_format_numpy()
sympy.physics.quantum.tests.test_represent.test_format_scipy_sparse()
sympy.physics.quantum.tests.test_represent.test_format_sympy()
sympy.physics.quantum.tests.test_represent.test_innerprod_represent()
sympy.physics.quantum.tests.test_represent.test_operator_represent()
sympy.physics.quantum.tests.test_represent.test_scalar_numpy()
sympy.physics.quantum.tests.test_represent.test_scalar_scipy_sparse()
sympy.physics.quantum.tests.test_represent.test_scalar_sympy()
sympy.physics.quantum.tests.test_test_enumerate_states()
sympy.physics.quantum.tests.test_test_format_numpy()
sympy.physics.quantum.tests.test_test_format_scipy_sparse()
sympy.physics.quantum.tests.test_test_format_sympy()
sympy.physics.quantum.tests.test_test_innerprod_represent()
sympy.physics.quantum.tests.test_test_operator_represent()
sympy.physics.quantum.tests.test_test_scalar_numpy()
sympy.physics.quantum.tests.test_test_scalar_scipy_sparse()
sympy.physics.quantum.tests.test_test_scalar_sympy()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/frame.py----------------------------------------
A:sympy.physics.vector.frame.obj->super(CoordinateSym, cls).__new__(cls, name)
A:sympy.physics.vector.frame.self._x->Vector([(Matrix([1, 0, 0]), self)])
A:sympy.physics.vector.frame.self._y->Vector([(Matrix([0, 1, 0]), self)])
A:sympy.physics.vector.frame.self._z->Vector([(Matrix([0, 0, 1]), self)])
A:sympy.physics.vector.frame.templist->kinematic_equations([u1, u2, u3], [q1, q2, q3], rot_type, rot_order)
A:sympy.physics.vector.frame.dcm2diff->self.dcm(otherframe)
A:sympy.physics.vector.frame.diffed->self.dcm(otherframe).diff(dynamicsymbols._t)
A:sympy.physics.vector.frame.w1->trigsimp(expand(angvelmat[7]), recursive=True)
A:sympy.physics.vector.frame.w2->trigsimp(expand(angvelmat[2]), recursive=True)
A:sympy.physics.vector.frame.w3->trigsimp(expand(angvelmat[3]), recursive=True)
A:sympy.physics.vector.frame.mapping[self.varlist[i]]->trigsimp(vars_matrix[i], method='fu')
A:sympy.physics.vector.frame.flist->self._dict_list(otherframe, 0)
A:sympy.physics.vector.frame.outvec->Vector(0)
A:sympy.physics.vector.frame.outdcm->eye(3)
A:sympy.physics.vector.frame.amounts->list(amounts)
A:sympy.physics.vector.frame.amounts[i]->sympify(v)
A:sympy.physics.vector.frame.rot_order->''.join(rot_order)
A:sympy.physics.vector.frame.rot_type->rot_type.upper().upper()
A:sympy.physics.vector.frame.axis->axis.express(parent).normalize().express(parent).normalize()
A:sympy.physics.vector.frame.parent_orient->Matrix([[q0 ** 2 + q1 ** 2 - q2 ** 2 - q3 ** 2, 2 * (q1 * q2 - q0 * q3), 2 * (q0 * q2 + q1 * q3)], [2 * (q1 * q2 + q0 * q3), q0 ** 2 - q1 ** 2 + q2 ** 2 - q3 ** 2, 2 * (q2 * q3 - q0 * q1)], [2 * (q1 * q3 - q0 * q2), 2 * (q0 * q1 + q2 * q3), q0 ** 2 - q1 ** 2 - q2 ** 2 + q3 ** 2]])
A:sympy.physics.vector.frame.a1->int(rot_order[0])
A:sympy.physics.vector.frame.a2->int(rot_order[1])
A:sympy.physics.vector.frame.a3->int(rot_order[2])
A:sympy.physics.vector.frame.frames->self._dcm_cache.keys()
A:sympy.physics.vector.frame.q0d->diff(q0, t)
A:sympy.physics.vector.frame.q1d->diff(q1, t)
A:sympy.physics.vector.frame.q2d->diff(q2, t)
A:sympy.physics.vector.frame.q3d->diff(q3, t)
A:sympy.physics.vector.frame.wvec->self._w_diff_dcm(parent)
A:sympy.physics.vector.frame.thetad->amounts[0].diff(dynamicsymbols._t)
A:sympy.physics.vector.frame.(u1, u2, u3)->dynamicsymbols('u1, u2, u3')
A:sympy.physics.vector.frame.td->solve(templist, [u1, u2, u3])
A:sympy.physics.vector.frame.u1->expand(td[u1])
A:sympy.physics.vector.frame.u2->expand(td[u2])
A:sympy.physics.vector.frame.u3->expand(td[u3])
A:sympy.physics.vector.frame.newframe->self.__class__(newname, variables, indices, latexs)
A:sympy.physics.vector.frame.value->_check_vector(value)
sympy.physics.frame.CoordinateSym(cls,name,frame,index)
sympy.physics.frame.CoordinateSym.__eq__(self,other)
sympy.physics.frame.CoordinateSym.__hash__(self)
sympy.physics.frame.CoordinateSym.__ne__(self,other)
sympy.physics.frame.CoordinateSym.frame(self)
sympy.physics.frame.ReferenceFrame(self,name,indices=None,latexs=None,variables=None)
sympy.physics.frame.ReferenceFrame.__getitem__(self,ind)
sympy.physics.frame.ReferenceFrame.__iter__(self)
sympy.physics.frame.ReferenceFrame.__str__(self)
sympy.physics.frame.ReferenceFrame._dict_list(self,other,num)
sympy.physics.frame.ReferenceFrame._w_diff_dcm(self,otherframe)
sympy.physics.frame.ReferenceFrame.ang_acc_in(self,otherframe)
sympy.physics.frame.ReferenceFrame.ang_vel_in(self,otherframe)
sympy.physics.frame.ReferenceFrame.dcm(self,otherframe)
sympy.physics.frame.ReferenceFrame.orient(self,parent,rot_type,amounts,rot_order='')
sympy.physics.frame.ReferenceFrame.orientnew(self,newname,rot_type,amounts,rot_order='',variables=None,indices=None,latexs=None)
sympy.physics.frame.ReferenceFrame.set_ang_acc(self,otherframe,value)
sympy.physics.frame.ReferenceFrame.set_ang_vel(self,otherframe,value)
sympy.physics.frame.ReferenceFrame.variable_map(self,otherframe)
sympy.physics.frame.ReferenceFrame.x(self)
sympy.physics.frame.ReferenceFrame.y(self)
sympy.physics.frame.ReferenceFrame.z(self)
sympy.physics.frame._check_frame(other)
sympy.physics.vector.frame.CoordinateSym(cls,name,frame,index)
sympy.physics.vector.frame.CoordinateSym.__eq__(self,other)
sympy.physics.vector.frame.CoordinateSym.__hash__(self)
sympy.physics.vector.frame.CoordinateSym.__ne__(self,other)
sympy.physics.vector.frame.CoordinateSym.__new__(cls,name,frame,index)
sympy.physics.vector.frame.CoordinateSym.frame(self)
sympy.physics.vector.frame.ReferenceFrame(self,name,indices=None,latexs=None,variables=None)
sympy.physics.vector.frame.ReferenceFrame.__getitem__(self,ind)
sympy.physics.vector.frame.ReferenceFrame.__init__(self,name,indices=None,latexs=None,variables=None)
sympy.physics.vector.frame.ReferenceFrame.__iter__(self)
sympy.physics.vector.frame.ReferenceFrame.__str__(self)
sympy.physics.vector.frame.ReferenceFrame._dict_list(self,other,num)
sympy.physics.vector.frame.ReferenceFrame._w_diff_dcm(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.ang_acc_in(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.ang_vel_in(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.dcm(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.orient(self,parent,rot_type,amounts,rot_order='')
sympy.physics.vector.frame.ReferenceFrame.orientnew(self,newname,rot_type,amounts,rot_order='',variables=None,indices=None,latexs=None)
sympy.physics.vector.frame.ReferenceFrame.set_ang_acc(self,otherframe,value)
sympy.physics.vector.frame.ReferenceFrame.set_ang_vel(self,otherframe,value)
sympy.physics.vector.frame.ReferenceFrame.variable_map(self,otherframe)
sympy.physics.vector.frame.ReferenceFrame.x(self)
sympy.physics.vector.frame.ReferenceFrame.y(self)
sympy.physics.vector.frame.ReferenceFrame.z(self)
sympy.physics.vector.frame._check_frame(other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/dyadic.py----------------------------------------
A:sympy.physics.vector.dyadic.other->_check_vector(other)
A:sympy.physics.vector.dyadic.ol->Dyadic(0)
A:sympy.physics.vector.dyadic.mlp->VectorLatexPrinter()
A:sympy.physics.vector.dyadic.arg_str->VectorStrPrinter().doprint(ar[i][0])
A:sympy.physics.vector.dyadic.outstr->''.join(ol)
A:sympy.physics.vector.dyadic.use_unicode->pretty_use_unicode()
A:sympy.physics.vector.dyadic.str_start->u(' + ')
A:sympy.physics.vector.dyadic.out->Dyadic(0)
sympy.physics.dyadic.Dyadic(self,inlist)
sympy.physics.dyadic.Dyadic.__add__(self,other)
sympy.physics.dyadic.Dyadic.__and__(self,other)
sympy.physics.dyadic.Dyadic.__div__(self,other)
sympy.physics.dyadic.Dyadic.__eq__(self,other)
sympy.physics.dyadic.Dyadic.__mul__(self,other)
sympy.physics.dyadic.Dyadic.__ne__(self,other)
sympy.physics.dyadic.Dyadic.__neg__(self)
sympy.physics.dyadic.Dyadic.__rand__(self,other)
sympy.physics.dyadic.Dyadic.__rsub__(self,other)
sympy.physics.dyadic.Dyadic.__rxor__(self,other)
sympy.physics.dyadic.Dyadic.__str__(self,printer=None)
sympy.physics.dyadic.Dyadic.__sub__(self,other)
sympy.physics.dyadic.Dyadic.__xor__(self,other)
sympy.physics.dyadic.Dyadic._latex(self,printer=None)
sympy.physics.dyadic.Dyadic._pretty(self,printer=None)
sympy.physics.dyadic.Dyadic.doit(self,**hints)
sympy.physics.dyadic.Dyadic.dt(self,frame)
sympy.physics.dyadic.Dyadic.express(self,frame1,frame2=None)
sympy.physics.dyadic.Dyadic.simplify(self)
sympy.physics.dyadic.Dyadic.subs(self,*args,**kwargs)
sympy.physics.dyadic.Dyadic.to_matrix(self,reference_frame,second_reference_frame=None)
sympy.physics.dyadic._check_dyadic(other)
sympy.physics.vector.dyadic.Dyadic(self,inlist)
sympy.physics.vector.dyadic.Dyadic.__add__(self,other)
sympy.physics.vector.dyadic.Dyadic.__and__(self,other)
sympy.physics.vector.dyadic.Dyadic.__div__(self,other)
sympy.physics.vector.dyadic.Dyadic.__eq__(self,other)
sympy.physics.vector.dyadic.Dyadic.__init__(self,inlist)
sympy.physics.vector.dyadic.Dyadic.__mul__(self,other)
sympy.physics.vector.dyadic.Dyadic.__ne__(self,other)
sympy.physics.vector.dyadic.Dyadic.__neg__(self)
sympy.physics.vector.dyadic.Dyadic.__rand__(self,other)
sympy.physics.vector.dyadic.Dyadic.__rsub__(self,other)
sympy.physics.vector.dyadic.Dyadic.__rxor__(self,other)
sympy.physics.vector.dyadic.Dyadic.__str__(self,printer=None)
sympy.physics.vector.dyadic.Dyadic.__sub__(self,other)
sympy.physics.vector.dyadic.Dyadic.__xor__(self,other)
sympy.physics.vector.dyadic.Dyadic._latex(self,printer=None)
sympy.physics.vector.dyadic.Dyadic._pretty(self,printer=None)
sympy.physics.vector.dyadic.Dyadic.doit(self,**hints)
sympy.physics.vector.dyadic.Dyadic.dt(self,frame)
sympy.physics.vector.dyadic.Dyadic.express(self,frame1,frame2=None)
sympy.physics.vector.dyadic.Dyadic.simplify(self)
sympy.physics.vector.dyadic.Dyadic.subs(self,*args,**kwargs)
sympy.physics.vector.dyadic.Dyadic.to_matrix(self,reference_frame,second_reference_frame=None)
sympy.physics.vector.dyadic._check_dyadic(other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/printing.py----------------------------------------
A:sympy.physics.vector.printing.ol->str(e.args[0].func)
A:sympy.physics.vector.printing.(name, supers, subs)->split_super_sub(func)
A:sympy.physics.vector.printing.name->translate(name)
A:sympy.physics.vector.printing.der_expr->der_expr.doit().doit()
A:sympy.physics.vector.printing.red->expr.atoms(AppliedUndef)
A:sympy.physics.vector.printing.dots->len(syms)
A:sympy.physics.vector.printing.base->self._print_Function(expr)
A:sympy.physics.vector.printing.base_split->self._print_Function(expr).split('_', 1)
A:sympy.physics.vector.printing.syms->list(reversed(deriv.variables))
A:sympy.physics.vector.printing.pform->self._print_Symbol(C.Symbol(func_name))
A:sympy.physics.vector.printing.outstr->vsprint(expr, **settings)
A:sympy.physics.vector.printing.p->VectorStrReprPrinter(settings)
A:sympy.physics.vector.printing.string_printer->VectorStrPrinter(settings)
A:sympy.physics.vector.printing.pp->VectorPrettyPrinter(settings)
A:sympy.physics.vector.printing.uflag->pretty_use_unicode(use_unicode)
A:sympy.physics.vector.printing.latex_printer->VectorLatexPrinter(settings)
A:sympy.physics.vector.printing.init_vprinting.__doc__->init_vprinting.__doc__.format(params)
sympy.physics.vector.VectorLatexPrinter(LatexPrinter)
sympy.physics.vector.VectorLatexPrinter._print_Derivative(self,der_expr)
sympy.physics.vector.VectorLatexPrinter._print_Function(self,expr,exp=None)
sympy.physics.vector.VectorPrettyPrinter(PrettyPrinter)
sympy.physics.vector.VectorPrettyPrinter._print_Derivative(self,deriv)
sympy.physics.vector.VectorPrettyPrinter._print_Function(self,e)
sympy.physics.vector.VectorStrPrinter(StrPrinter)
sympy.physics.vector.VectorStrPrinter._print_Derivative(self,e)
sympy.physics.vector.VectorStrPrinter._print_Function(self,e)
sympy.physics.vector.VectorStrReprPrinter(VectorStrPrinter)
sympy.physics.vector.VectorStrReprPrinter._print_str(self,s)
sympy.physics.vector.init_vprinting(**kwargs)
sympy.physics.vector.printing.VectorLatexPrinter(LatexPrinter)
sympy.physics.vector.printing.VectorLatexPrinter._print_Derivative(self,der_expr)
sympy.physics.vector.printing.VectorLatexPrinter._print_Function(self,expr,exp=None)
sympy.physics.vector.printing.VectorPrettyPrinter(PrettyPrinter)
sympy.physics.vector.printing.VectorPrettyPrinter._print_Derivative(self,deriv)
sympy.physics.vector.printing.VectorPrettyPrinter._print_Function(self,e)
sympy.physics.vector.printing.VectorStrPrinter(StrPrinter)
sympy.physics.vector.printing.VectorStrPrinter._print_Derivative(self,e)
sympy.physics.vector.printing.VectorStrPrinter._print_Function(self,e)
sympy.physics.vector.printing.VectorStrReprPrinter(VectorStrPrinter)
sympy.physics.vector.printing.VectorStrReprPrinter._print_str(self,s)
sympy.physics.vector.printing.init_vprinting(**kwargs)
sympy.physics.vector.printing.vlatex(expr,**settings)
sympy.physics.vector.printing.vpprint(expr,**settings)
sympy.physics.vector.printing.vprint(expr,**settings)
sympy.physics.vector.printing.vsprint(expr,**settings)
sympy.physics.vector.printing.vsstrrepr(expr,**settings)
sympy.physics.vector.vlatex(expr,**settings)
sympy.physics.vector.vpprint(expr,**settings)
sympy.physics.vector.vprint(expr,**settings)
sympy.physics.vector.vsprint(expr,**settings)
sympy.physics.vector.vsstrrepr(expr,**settings)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/functions.py----------------------------------------
A:sympy.physics.vector.functions.expr->sympify(expr)
A:sympy.physics.vector.functions.outvec->Vector(0)
A:sympy.physics.vector.functions.temp->temp.applyfunc(lambda x: trigsimp(x, method='fu')).applyfunc(lambda x: trigsimp(x, method='fu'))
A:sympy.physics.vector.functions.ol->Dyadic(0)
A:sympy.physics.vector.functions.frame_set->set([])
A:sympy.physics.vector.functions.rot_order->''.join(rot_order)
A:sympy.physics.vector.functions.rot_type->rot_type.upper().upper()
A:sympy.physics.vector.functions.w->Matrix(speeds + [0])
A:sympy.physics.vector.functions.E->Matrix([[e0, -e3, e2, e1], [e3, e0, -e1, e2], [-e2, e1, e0, e3], [-e1, -e2, -e3, e0]])
A:sympy.physics.vector.functions.edots->Matrix([diff(i, dynamicsymbols._t) for i in [e1, e2, e3, e0]])
A:sympy.physics.vector.functions.condition->express(condition, frame, variables=True)
A:sympy.physics.vector.functions.vectdiff1->express(vectdiff, frame)
A:sympy.physics.vector.functions.vectdiff2->time_derivative(vectdiff, frame)
A:sympy.physics.vector.functions.vectdiff0->Vector(0)
A:sympy.physics.vector.functions.function1->express(vectdiff, frame).dot(dim)
A:sympy.physics.vector.functions.abscissa->dim.dot(condition).subs({variable: ordinate})
A:sympy.physics.vector.functions.kwargs[x]->sympify(kwargs[x])
A:sympy.physics.vector.functions.vel->i.diff(j, frame)
A:sympy.physics.vector.functions.acc->time_derivative(vel, frame)
A:sympy.physics.vector.functions.esses->symbols(names, cls=Function)
A:sympy.physics.vector.functions.dynamicsymbols._t->Symbol('t')
sympy.physics.vector.cross(vec1,vec2)
sympy.physics.vector.dot(vec1,vec2)
sympy.physics.vector.dynamicsymbols(names,level=0)
sympy.physics.vector.express(expr,frame,frame2=None,variables=False)
sympy.physics.vector.functions.cross(vec1,vec2)
sympy.physics.vector.functions.dot(vec1,vec2)
sympy.physics.vector.functions.dynamicsymbols(names,level=0)
sympy.physics.vector.functions.express(expr,frame,frame2=None,variables=False)
sympy.physics.vector.functions.get_motion_params(frame,**kwargs)
sympy.physics.vector.functions.kinematic_equations(speeds,coords,rot_type,rot_order='')
sympy.physics.vector.functions.outer(vec1,vec2)
sympy.physics.vector.functions.partial_velocity(vel_list,u_list,frame)
sympy.physics.vector.functions.time_derivative(expr,frame,order=1)
sympy.physics.vector.get_motion_params(frame,**kwargs)
sympy.physics.vector.kinematic_equations(speeds,coords,rot_type,rot_order='')
sympy.physics.vector.outer(vec1,vec2)
sympy.physics.vector.partial_velocity(vel_list,u_list,frame)
sympy.physics.vector.time_derivative(expr,frame,order=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/point.py----------------------------------------
A:sympy.physics.vector.point.templist->v[-1]._pdlist[num].keys()
A:sympy.physics.vector.point.dist->self.pos_from(otherpoint)
A:sympy.physics.vector.point.v->otherpoint.vel(outframe)
A:sympy.physics.vector.point.a1->otherpoint.acc(outframe)
A:sympy.physics.vector.point.a2->self.acc(interframe)
A:sympy.physics.vector.point.omega->fixedframe.ang_vel_in(outframe)
A:sympy.physics.vector.point.alpha->fixedframe.ang_acc_in(outframe)
A:sympy.physics.vector.point.a->otherpoint.acc(outframe)
A:sympy.physics.vector.point.value->_check_vector(value)
A:sympy.physics.vector.point.p->Point(name)
A:sympy.physics.vector.point.outvec->Vector(0)
A:sympy.physics.vector.point.plist->self._pdict_list(otherpoint, 0)
A:sympy.physics.vector.point.v1->self.vel(interframe)
A:sympy.physics.vector.point.v2->otherpoint.vel(outframe)
sympy.physics.vector.Point(self,name)
sympy.physics.vector.Point.__str__(self)
sympy.physics.vector.Point._check_point(self,other)
sympy.physics.vector.Point._pdict_list(self,other,num)
sympy.physics.vector.Point.a1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.Point.a2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.Point.acc(self,frame)
sympy.physics.vector.Point.locatenew(self,name,value)
sympy.physics.vector.Point.pos_from(self,otherpoint)
sympy.physics.vector.Point.set_acc(self,frame,value)
sympy.physics.vector.Point.set_pos(self,otherpoint,value)
sympy.physics.vector.Point.set_vel(self,frame,value)
sympy.physics.vector.Point.v1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.Point.v2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.Point.vel(self,frame)
sympy.physics.vector.point.Point(self,name)
sympy.physics.vector.point.Point.__init__(self,name)
sympy.physics.vector.point.Point.__str__(self)
sympy.physics.vector.point.Point._check_point(self,other)
sympy.physics.vector.point.Point._pdict_list(self,other,num)
sympy.physics.vector.point.Point.a1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.point.Point.a2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.point.Point.acc(self,frame)
sympy.physics.vector.point.Point.locatenew(self,name,value)
sympy.physics.vector.point.Point.pos_from(self,otherpoint)
sympy.physics.vector.point.Point.set_acc(self,frame,value)
sympy.physics.vector.point.Point.set_pos(self,otherpoint,value)
sympy.physics.vector.point.Point.set_vel(self,frame,value)
sympy.physics.vector.point.Point.v1pt_theory(self,otherpoint,outframe,interframe)
sympy.physics.vector.point.Point.v2pt_theory(self,otherpoint,outframe,fixedframe)
sympy.physics.vector.point.Point.vel(self,frame)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/fieldfunctions.py----------------------------------------
A:sympy.physics.vector.fieldfunctions.vect->express(vect, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.vectx->express(vect, frame, variables=True).dot(frame.x)
A:sympy.physics.vector.fieldfunctions.vecty->express(vect, frame, variables=True).dot(frame.y)
A:sympy.physics.vector.fieldfunctions.vectz->express(vect, frame, variables=True).dot(frame.z)
A:sympy.physics.vector.fieldfunctions.outvec->Vector(0)
A:sympy.physics.vector.fieldfunctions.out->S(0)
A:sympy.physics.vector.fieldfunctions.scalar->express(scalar, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.field->express(field, frame, variables=True)
A:sympy.physics.vector.fieldfunctions.temp_function->integrate(field.dot(dimensions[0]), frame[0])
A:sympy.physics.vector.fieldfunctions.partial_diff->diff(temp_function, frame[i + 1])
A:sympy.physics.vector.fieldfunctions.scalar_fn->scalar_potential(field, frame)
A:sympy.physics.vector.fieldfunctions.position1->express(point1.pos_from(origin), frame, variables=True)
A:sympy.physics.vector.fieldfunctions.position2->express(point2.pos_from(origin), frame, variables=True)
A:sympy.physics.vector.fieldfunctions.subs_dict1[frame[i]]->x.dot(position1)
A:sympy.physics.vector.fieldfunctions.subs_dict2[frame[i]]->x.dot(position2)
sympy.physics.vector.curl(vect,frame)
sympy.physics.vector.divergence(vect,frame)
sympy.physics.vector.fieldfunctions.curl(vect,frame)
sympy.physics.vector.fieldfunctions.divergence(vect,frame)
sympy.physics.vector.fieldfunctions.gradient(scalar,frame)
sympy.physics.vector.fieldfunctions.is_conservative(field)
sympy.physics.vector.fieldfunctions.is_solenoidal(field)
sympy.physics.vector.fieldfunctions.scalar_potential(field,frame)
sympy.physics.vector.fieldfunctions.scalar_potential_difference(field,frame,point1,point2,origin)
sympy.physics.vector.gradient(scalar,frame)
sympy.physics.vector.is_conservative(field)
sympy.physics.vector.is_solenoidal(field)
sympy.physics.vector.scalar_potential(field,frame)
sympy.physics.vector.scalar_potential_difference(field,frame,point1,point2,origin)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/vector.py----------------------------------------
A:sympy.physics.vector.vector.other->_check_vector(other)
A:sympy.physics.vector.vector.out->S(0)
A:sympy.physics.vector.vector.ol->Dyadic(0)
A:sympy.physics.vector.vector.arg_str->VectorStrPrinter().doprint(ar[i][0][j])
A:sympy.physics.vector.vector.outstr->''.join(ol)
A:sympy.physics.vector.vector.str_start->u(' + ')
A:sympy.physics.vector.vector.outvec->Vector(0)
A:sympy.physics.vector.vector.components[x[1]]->Vector([x])
A:sympy.physics.vector.vector.wrt->sympify(wrt)
A:sympy.physics.vector.vector.d->Vector([v]).express(otherframe).args[0][0].diff(wrt)
A:sympy.physics.vector.vector.ov->Vector(0)
A:sympy.physics.vector.vector.msg->filldedent("Expected an instance of %s, but received object '%s' of %s." % (type(want), other, type(other)))
sympy.physics.Vector(self,inlist)
sympy.physics.Vector.__add__(self,other)
sympy.physics.Vector.__and__(self,other)
sympy.physics.Vector.__div__(self,other)
sympy.physics.Vector.__eq__(self,other)
sympy.physics.Vector.__hash__(self)
sympy.physics.Vector.__mul__(self,other)
sympy.physics.Vector.__ne__(self,other)
sympy.physics.Vector.__neg__(self)
sympy.physics.Vector.__or__(self,other)
sympy.physics.Vector.__ror__(self,other)
sympy.physics.Vector.__rsub__(self,other)
sympy.physics.Vector.__str__(self,printer=None)
sympy.physics.Vector.__sub__(self,other)
sympy.physics.Vector.__xor__(self,other)
sympy.physics.Vector._latex(self,printer=None)
sympy.physics.Vector._pretty(self,printer=None)
sympy.physics.Vector.cross(self,other)
sympy.physics.Vector.diff(self,wrt,otherframe)
sympy.physics.Vector.doit(self,**hints)
sympy.physics.Vector.dot(self,other)
sympy.physics.Vector.dt(self,otherframe)
sympy.physics.Vector.express(self,otherframe,variables=False)
sympy.physics.Vector.magnitude(self)
sympy.physics.Vector.normalize(self)
sympy.physics.Vector.outer(self,other)
sympy.physics.Vector.separate(self)
sympy.physics.Vector.simplify(self)
sympy.physics.Vector.subs(self,*args,**kwargs)
sympy.physics.Vector.to_matrix(self,reference_frame)
sympy.physics.VectorTypeError(self,other,want)
sympy.physics._check_vector(other)
sympy.physics.vector.vector.Vector(self,inlist)
sympy.physics.vector.vector.Vector.__add__(self,other)
sympy.physics.vector.vector.Vector.__and__(self,other)
sympy.physics.vector.vector.Vector.__div__(self,other)
sympy.physics.vector.vector.Vector.__eq__(self,other)
sympy.physics.vector.vector.Vector.__hash__(self)
sympy.physics.vector.vector.Vector.__init__(self,inlist)
sympy.physics.vector.vector.Vector.__mul__(self,other)
sympy.physics.vector.vector.Vector.__ne__(self,other)
sympy.physics.vector.vector.Vector.__neg__(self)
sympy.physics.vector.vector.Vector.__or__(self,other)
sympy.physics.vector.vector.Vector.__ror__(self,other)
sympy.physics.vector.vector.Vector.__rsub__(self,other)
sympy.physics.vector.vector.Vector.__str__(self,printer=None)
sympy.physics.vector.vector.Vector.__sub__(self,other)
sympy.physics.vector.vector.Vector.__xor__(self,other)
sympy.physics.vector.vector.Vector._latex(self,printer=None)
sympy.physics.vector.vector.Vector._pretty(self,printer=None)
sympy.physics.vector.vector.Vector.cross(self,other)
sympy.physics.vector.vector.Vector.diff(self,wrt,otherframe)
sympy.physics.vector.vector.Vector.doit(self,**hints)
sympy.physics.vector.vector.Vector.dot(self,other)
sympy.physics.vector.vector.Vector.dt(self,otherframe)
sympy.physics.vector.vector.Vector.express(self,otherframe,variables=False)
sympy.physics.vector.vector.Vector.magnitude(self)
sympy.physics.vector.vector.Vector.normalize(self)
sympy.physics.vector.vector.Vector.outer(self,other)
sympy.physics.vector.vector.Vector.separate(self)
sympy.physics.vector.vector.Vector.simplify(self)
sympy.physics.vector.vector.Vector.subs(self,*args,**kwargs)
sympy.physics.vector.vector.Vector.to_matrix(self,reference_frame)
sympy.physics.vector.vector.VectorTypeError(self,other,want)
sympy.physics.vector.vector.VectorTypeError.__init__(self,other,want)
sympy.physics.vector.vector._check_vector(other)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_output.py----------------------------------------
A:sympy.physics.vector.tests.test_output.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_output.zerov->Vector(0)
A:sympy.physics.vector.tests.test_output.zerod->Dyadic(0)
sympy.physics.tests.test_output.test_output_type()
sympy.physics.vector.tests.test_output.test_output_type()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_printing.py----------------------------------------
A:sympy.physics.vector.tests.test_printing.(a, b, c)->symbols('a, b, c')
A:sympy.physics.vector.tests.test_printing.(alpha, omega, beta)->dynamicsymbols('alpha, omega, beta')
A:sympy.physics.vector.tests.test_printing.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_printing.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_printing.r->Function('r')('t')
A:sympy.physics.vector.tests.test_printing.uexpected->u('α n_x⊗n_x + sin(ω) n_y⊗n_z + α⋅β n_z⊗n_x')
A:sympy.physics.vector.tests.test_printing.expected->u('alpha n_x|n_x + sin(omega) n_y|n_z + alpha*beta n_z|n_x')
A:sympy.physics.vector.tests.test_printing.(a, b, c, d, omega)->symbols('a, b, c, d, omega')
A:sympy.physics.vector.tests.test_printing.(theta, omega, alpha, q)->dynamicsymbols('theta, omega, alpha, q')
A:sympy.physics.vector.tests.test_printing.(phi1, phi2, phi3)->dynamicsymbols('phi1, phi2, phi3')
A:sympy.physics.vector.tests.test_printing.(theta1, theta2, theta3)->symbols('theta1, theta2, theta3')
A:sympy.physics.vector.tests.test_printing.lp->VectorLatexPrinter()
A:sympy.physics.vector.tests.test_printing.(omega, alpha)->dynamicsymbols('omega, alpha')
sympy.physics.vector.tests.test_ascii_vpretty(expr)
sympy.physics.vector.tests.test_printing.ascii_vpretty(expr)
sympy.physics.vector.tests.test_printing.test_dyadic_latex()
sympy.physics.vector.tests.test_printing.test_dyadic_pretty_print()
sympy.physics.vector.tests.test_printing.test_latex_printer()
sympy.physics.vector.tests.test_printing.test_vector_latex()
sympy.physics.vector.tests.test_printing.test_vector_latex_with_functions()
sympy.physics.vector.tests.test_printing.test_vector_pretty_print()
sympy.physics.vector.tests.test_printing.unicode_vpretty(expr)
sympy.physics.vector.tests.test_test_dyadic_latex()
sympy.physics.vector.tests.test_test_dyadic_pretty_print()
sympy.physics.vector.tests.test_test_latex_printer()
sympy.physics.vector.tests.test_test_vector_latex()
sympy.physics.vector.tests.test_test_vector_latex_with_functions()
sympy.physics.vector.tests.test_test_vector_pretty_print()
sympy.physics.vector.tests.test_unicode_vpretty(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_fieldfunctions.py----------------------------------------
A:sympy.physics.vector.tests.test_fieldfunctions.R->ReferenceFrame('R')
A:sympy.physics.vector.tests.test_fieldfunctions.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_fieldfunctions.P->ReferenceFrame('R').orientnew('P', 'Axis', [q, R.z])
A:sympy.physics.vector.tests.test_fieldfunctions.a->Symbol('a')
A:sympy.physics.vector.tests.test_fieldfunctions.grad_field->gradient(scalar_field, R)
A:sympy.physics.vector.tests.test_fieldfunctions.curl_field->curl(vector_field, R)
A:sympy.physics.vector.tests.test_fieldfunctions.origin->Point('O')
A:sympy.physics.vector.tests.test_fieldfunctions.point1->Point('O').locatenew('P1', 1 * R.x + 2 * R.y + 3 * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.point2->Point('O').locatenew('P2', 4 * R.x + 5 * R.y + 6 * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.genericpointR->Point('O').locatenew('RP', R[0] * R.x + R[1] * R.y + R[2] * R.z)
A:sympy.physics.vector.tests.test_fieldfunctions.genericpointP->Point('O').locatenew('PP', P[0] * P.x + P[1] * P.y + P[2] * P.z)
sympy.physics.vector.tests.test_fieldfunctions.test_conservative()
sympy.physics.vector.tests.test_fieldfunctions.test_curl()
sympy.physics.vector.tests.test_fieldfunctions.test_divergence()
sympy.physics.vector.tests.test_fieldfunctions.test_gradient()
sympy.physics.vector.tests.test_fieldfunctions.test_scalar_potential()
sympy.physics.vector.tests.test_fieldfunctions.test_scalar_potential_difference()
sympy.physics.vector.tests.test_fieldfunctions.test_solenoidal()
sympy.physics.vector.tests.test_test_conservative()
sympy.physics.vector.tests.test_test_curl()
sympy.physics.vector.tests.test_test_divergence()
sympy.physics.vector.tests.test_test_gradient()
sympy.physics.vector.tests.test_test_scalar_potential()
sympy.physics.vector.tests.test_test_scalar_potential_difference()
sympy.physics.vector.tests.test_test_solenoidal()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_functions.py----------------------------------------
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.physics.vector.tests.test_functions.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_functions.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_functions.B->ReferenceFrame('A').orientnew('B', 'Axis', [q, A.z])
A:sympy.physics.vector.tests.test_functions.C->Point('C')
A:sympy.physics.vector.tests.test_functions.zerov->Vector(0)
A:sympy.physics.vector.tests.test_functions.zerod->Dyadic(0)
A:sympy.physics.vector.tests.test_functions.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_functions.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_functions.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_functions.(q1dd, q2dd, q3dd, q4dd)->dynamicsymbols('q1 q2 q3 q4', 2)
A:sympy.physics.vector.tests.test_functions.(s1, s2, s3)->symbols('s1 s2 s3')
A:sympy.physics.vector.tests.test_functions.(S1, S2, S3)->symbols('S1 S2 S3')
A:sympy.physics.vector.tests.test_functions.(S4, S5, S6)->symbols('S4 S5 S6')
A:sympy.physics.vector.tests.test_functions.(t1, t2)->symbols('t1 t2')
A:sympy.physics.vector.tests.test_functions.(a, b, c)->dynamicsymbols('a b c')
A:sympy.physics.vector.tests.test_functions.(ad, bd, cd)->dynamicsymbols('a b c', 1)
A:sympy.physics.vector.tests.test_functions.(a2d, b2d, c2d)->dynamicsymbols('a b c', 2)
A:sympy.physics.vector.tests.test_functions.answer->get_motion_params(N, acceleration=a * N.x, velocity=S1 * N.x, position=S2 * N.x, timevalue1=t1, timevalue2=t2)
A:sympy.physics.vector.tests.test_functions.i1->Integral(a, (t, t2, t))
A:sympy.physics.vector.tests.test_functions.(q0, q1, q2, q3)->dynamicsymbols('q0 q1 q2 q3')
A:sympy.physics.vector.tests.test_functions.(q0d, q1d, q2d, q3d)->dynamicsymbols('q0 q1 q2 q3', 1)
A:sympy.physics.vector.tests.test_functions.(u1, u2, u3)->dynamicsymbols('u1 u2 u3')
A:sympy.physics.vector.tests.test_functions.kds->kinematic_equations([u1, u2, u3], [q0, q1, q2, q3], 'quaternion')
A:sympy.physics.vector.tests.test_functions.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1 q2 q3 u1 u2 u3')
A:sympy.physics.vector.tests.test_functions.(u4, u5)->dynamicsymbols('u4, u5')
A:sympy.physics.vector.tests.test_functions.r->symbols('r')
A:sympy.physics.vector.tests.test_functions.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.vector.tests.test_functions.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.vector.tests.test_functions.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.vector.tests.test_functions.Dmc->Point('C').locatenew('Dmc', r * L.z)
sympy.physics.vector.tests.test_functions.test_cross()
sympy.physics.vector.tests.test_functions.test_cross_different_frames()
sympy.physics.vector.tests.test_functions.test_dot()
sympy.physics.vector.tests.test_functions.test_dot_different_frames()
sympy.physics.vector.tests.test_functions.test_express()
sympy.physics.vector.tests.test_functions.test_get_motion_methods()
sympy.physics.vector.tests.test_functions.test_kin_eqs()
sympy.physics.vector.tests.test_functions.test_operator_match()
sympy.physics.vector.tests.test_functions.test_partial_velocity()
sympy.physics.vector.tests.test_functions.test_time_derivative()
sympy.physics.vector.tests.test_test_cross()
sympy.physics.vector.tests.test_test_cross_different_frames()
sympy.physics.vector.tests.test_test_dot()
sympy.physics.vector.tests.test_test_dot_different_frames()
sympy.physics.vector.tests.test_test_express()
sympy.physics.vector.tests.test_test_get_motion_methods()
sympy.physics.vector.tests.test_test_kin_eqs()
sympy.physics.vector.tests.test_test_operator_match()
sympy.physics.vector.tests.test_test_partial_velocity()
sympy.physics.vector.tests.test_test_time_derivative()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_point.py----------------------------------------
A:sympy.physics.vector.tests.test_point.(q, q2)->dynamicsymbols('q q2')
A:sympy.physics.vector.tests.test_point.(qd, q2d)->dynamicsymbols('q q2', 1)
A:sympy.physics.vector.tests.test_point.(qdd, q2dd)->dynamicsymbols('q q2', 2)
A:sympy.physics.vector.tests.test_point.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_point.B->ReferenceFrame('N').orientnew('B', 'Axis', [q, N.z])
A:sympy.physics.vector.tests.test_point.O->Point('O')
A:sympy.physics.vector.tests.test_point.P->Point('O').locatenew('P', 10 * N.x + 5 * B.x)
A:sympy.physics.vector.tests.test_point.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_point.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_point.qdd->dynamicsymbols('q', 2)
A:sympy.physics.vector.tests.test_point.Q->Point('O').locatenew('P', 10 * N.x + 5 * B.x).locatenew('Q', 10 * N.y + 5 * B.y)
sympy.physics.vector.tests.test_point.test_point_a1pt_theorys()
sympy.physics.vector.tests.test_point.test_point_a2pt_theorys()
sympy.physics.vector.tests.test_point.test_point_funcs()
sympy.physics.vector.tests.test_point.test_point_pos()
sympy.physics.vector.tests.test_point.test_point_v1pt_theorys()
sympy.physics.vector.tests.test_point.test_point_v2pt_theorys()
sympy.physics.vector.tests.test_test_point_a1pt_theorys()
sympy.physics.vector.tests.test_test_point_a2pt_theorys()
sympy.physics.vector.tests.test_test_point_funcs()
sympy.physics.vector.tests.test_test_point_pos()
sympy.physics.vector.tests.test_test_point_v1pt_theorys()
sympy.physics.vector.tests.test_test_point_v2pt_theorys()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_vector.py----------------------------------------
A:sympy.physics.vector.tests.test_vector.A->ReferenceFrame('N').orientnew('A', 'Axis', [q3, N.z])
A:sympy.physics.vector.tests.test_vector.q->symbols('q')
A:sympy.physics.vector.tests.test_vector.B->ReferenceFrame('N').orientnew('A', 'Axis', [q3, N.z]).orientnew('B', 'Axis', [q2, A.x])
A:sympy.physics.vector.tests.test_vector.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_vector.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_vector.(q1dd, q2dd, q3dd, q4dd)->dynamicsymbols('q1 q2 q3 q4', 2)
A:sympy.physics.vector.tests.test_vector.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_vector.v3->v1.dt(B)
A:sympy.physics.vector.tests.test_vector.v4->v2.dt(B)
A:sympy.physics.vector.tests.test_vector.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.physics.vector.tests.test_vector.test1->test1.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test2->test2.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test3->test3.simplify().simplify()
A:sympy.physics.vector.tests.test_vector.test4->test4.simplify().simplify()
sympy.physics.tests.test_test_Vector()
sympy.physics.tests.test_test_Vector_diffs()
sympy.physics.tests.test_test_vector_simplify()
sympy.physics.vector.tests.test_vector.test_Vector()
sympy.physics.vector.tests.test_vector.test_Vector_diffs()
sympy.physics.vector.tests.test_vector.test_vector_simplify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_dyadic.py----------------------------------------
A:sympy.physics.vector.tests.test_dyadic.A->ReferenceFrame('A')
A:sympy.physics.vector.tests.test_dyadic.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_dyadic.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_dyadic.B->ReferenceFrame('A').orientnew('B', 'Axis', [q, A.z])
A:sympy.physics.vector.tests.test_dyadic.(a, b, c, d, e, f)->symbols('a, b, c, d, e, f')
A:sympy.physics.vector.tests.test_dyadic.d4->v1.outer(v2)
A:sympy.physics.vector.tests.test_dyadic.d5->v1.outer(v1)
A:sympy.physics.vector.tests.test_dyadic.C->ReferenceFrame('A').orientnew('C', 'Axis', [q, A.x])
A:sympy.physics.vector.tests.test_dyadic.(x, y, z, k, n, m, w, f, s, A)->symbols('x, y, z, k, n, m, w, f, s, A')
A:sympy.physics.vector.tests.test_dyadic.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_dyadic.test1->test1.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test2->test2.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test3->test3.simplify().simplify()
A:sympy.physics.vector.tests.test_dyadic.test4->test4.simplify().simplify()
sympy.physics.tests.test_dyadic.test_dyadic()
sympy.physics.tests.test_dyadic.test_dyadic_simplify()
sympy.physics.vector.tests.test_dyadic.test_dyadic()
sympy.physics.vector.tests.test_dyadic.test_dyadic_simplify()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/vector/tests/test_frame.py----------------------------------------
A:sympy.physics.vector.tests.test_frame.A->ReferenceFrame('N').orientnew('A', 'Axis', [q1, N.z])
A:sympy.physics.vector.tests.test_frame.q->dynamicsymbols('q')
A:sympy.physics.vector.tests.test_frame.qd->dynamicsymbols('q', 1)
A:sympy.physics.vector.tests.test_frame.B->MyReferenceFrame('B')
A:sympy.physics.vector.tests.test_frame.N->ReferenceFrame('N')
A:sympy.physics.vector.tests.test_frame.C->MyReferenceFrame('B').orientnew('C', 'Axis', [0, B.x])
A:sympy.physics.vector.tests.test_frame.mapping->ReferenceFrame('N').orientnew('A', 'Axis', [q1, N.z]).variable_map(C)
A:sympy.physics.vector.tests.test_frame.(q1, q2, q3, q4)->dynamicsymbols('q1 q2 q3 q4')
A:sympy.physics.vector.tests.test_frame.(q1d, q2d, q3d, q4d)->dynamicsymbols('q1 q2 q3 q4', 1)
A:sympy.physics.vector.tests.test_frame.D->ReferenceFrame('N').orientnew('D', 'Axis', [q4, N.y])
A:sympy.physics.vector.tests.test_frame.(u1, u2, u3)->dynamicsymbols('u1 u2 u3')
A:sympy.physics.vector.tests.test_frame.A2->ReferenceFrame('N').orientnew('A2', 'Axis', [q4, N.y])
A:sympy.physics.vector.tests.test_frame.q0->dynamicsymbols('q0')
A:sympy.physics.vector.tests.test_frame.q0d->dynamicsymbols('q0', 1)
A:sympy.physics.vector.tests.test_frame.E->ReferenceFrame('N').orientnew('E', 'Space', [q1, q2, q3], '123')
A:sympy.physics.vector.tests.test_frame.F->ReferenceFrame('N').orientnew('F', 'Body', (q1, q2, q3), '313')
A:sympy.physics.vector.tests.test_frame.G->ReferenceFrame('N').orientnew('G', 'Axis', (q1, N.x + N.y))
sympy.physics.tests.test_frame.test_ang_vel()
sympy.physics.tests.test_frame.test_coordinate_vars()
sympy.physics.tests.test_frame.test_dcm()
sympy.physics.tests.test_frame.test_orientnew_respects_parent_class()
sympy.physics.vector.tests.test_frame.test_ang_vel()
sympy.physics.vector.tests.test_frame.test_coordinate_vars()
sympy.physics.vector.tests.test_frame.test_dcm()
sympy.physics.vector.tests.test_frame.test_orientnew_respects_parent_class()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/linearize.py----------------------------------------
A:sympy.physics.mechanics.linearize.self.f_0->Matrix(f_0)
A:sympy.physics.mechanics.linearize.self.f_1->Matrix(f_1)
A:sympy.physics.mechanics.linearize.self.f_2->Matrix(f_2)
A:sympy.physics.mechanics.linearize.self.f_3->Matrix(f_3)
A:sympy.physics.mechanics.linearize.self.f_4->Matrix(f_4)
A:sympy.physics.mechanics.linearize.self.f_c->Matrix(f_c)
A:sympy.physics.mechanics.linearize.self.f_v->Matrix(f_v)
A:sympy.physics.mechanics.linearize.self.f_a->Matrix(f_a)
A:sympy.physics.mechanics.linearize.self.q->Matrix(q)
A:sympy.physics.mechanics.linearize.self.u->Matrix(u)
A:sympy.physics.mechanics.linearize.self.q_i->none_handler(q_i)
A:sympy.physics.mechanics.linearize.self.q_d->none_handler(q_d)
A:sympy.physics.mechanics.linearize.self.u_i->none_handler(u_i)
A:sympy.physics.mechanics.linearize.self.u_d->none_handler(u_d)
A:sympy.physics.mechanics.linearize.self.r->none_handler(r)
A:sympy.physics.mechanics.linearize.self.lams->none_handler(lams)
A:sympy.physics.mechanics.linearize.self._qd->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.linearize.self._ud->self.u.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.linearize.dup_vars->set(self._qd).intersection(self.u)
A:sympy.physics.mechanics.linearize.self._qd_dup->Matrix([var if var not in dup_vars else Dummy() for var in self._qd])
A:sympy.physics.mechanics.linearize.l->len(self.f_c)
A:sympy.physics.mechanics.linearize.m->len(self.f_v)
A:sympy.physics.mechanics.linearize.n->len(self.q)
A:sympy.physics.mechanics.linearize.o->len(self.u)
A:sympy.physics.mechanics.linearize.s->len(self.r)
A:sympy.physics.mechanics.linearize.k->len(self.lams)
A:sympy.physics.mechanics.linearize.dims->collections.namedtuple('dims', ['l', 'm', 'n', 'o', 's', 'k'])
A:sympy.physics.mechanics.linearize.self._dims->dims(l, m, n, o, s, k)
A:sympy.physics.mechanics.linearize.self._Pq->permutation_matrix(self.q, Matrix([self.q_i, self.q_d]))
A:sympy.physics.mechanics.linearize.self._Pqd->Matrix()
A:sympy.physics.mechanics.linearize.self._Pu->permutation_matrix(self.u, Matrix([self.u_i, self.u_d]))
A:sympy.physics.mechanics.linearize.self._Pud->Matrix()
A:sympy.physics.mechanics.linearize.P_col1->Matrix([self._Pqi, zeros(o + k, n - l)])
A:sympy.physics.mechanics.linearize.P_col2->Matrix([zeros(n, o - m), self._Pui, zeros(k, o - m)])
A:sympy.physics.mechanics.linearize.self.perm_mat->Matrix([self._Pqi, zeros(o + k, n - l)]).row_join(P_col2)
A:sympy.physics.mechanics.linearize.f_c_jac_q->self.f_c.jacobian(self.q)
A:sympy.physics.mechanics.linearize.self._C_0->eye(n)
A:sympy.physics.mechanics.linearize.f_v_jac_u->self.f_v.jacobian(self.u)
A:sympy.physics.mechanics.linearize.f_v_jac_q->self.f_v.jacobian(self.q)
A:sympy.physics.mechanics.linearize.self._C_2->eye(o)
A:sympy.physics.mechanics.linearize.self._M_qq->Matrix()
A:sympy.physics.mechanics.linearize.self._A_qq->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uqc->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uqc->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uqd->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uqd->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uuc->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uuc->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uud->Matrix()
A:sympy.physics.mechanics.linearize.self._A_uud->Matrix()
A:sympy.physics.mechanics.linearize.self._A_qu->Matrix()
A:sympy.physics.mechanics.linearize.self._M_uld->Matrix()
A:sympy.physics.mechanics.linearize.self._B_u->Matrix()
A:sympy.physics.mechanics.linearize.col2->Matrix()
A:sympy.physics.mechanics.linearize.col3->Matrix([zeros(n + m, k), M_uld])
A:sympy.physics.mechanics.linearize.col1->Matrix()
A:sympy.physics.mechanics.linearize.M->Matrix().row_join(col3)
A:sympy.physics.mechanics.linearize.M_eq->msubs(M, op_point_dict)
A:sympy.physics.mechanics.linearize.r2c1->Matrix()
A:sympy.physics.mechanics.linearize.r3c1->Matrix()
A:sympy.physics.mechanics.linearize.r1c2->Matrix()
A:sympy.physics.mechanics.linearize.r2c2->Matrix()
A:sympy.physics.mechanics.linearize.r3c2->Matrix()
A:sympy.physics.mechanics.linearize.Amat->Matrix().row_join(col2)
A:sympy.physics.mechanics.linearize.Amat_eq->msubs(Amat, op_point_dict)
A:sympy.physics.mechanics.linearize.Bmat->zeros(n + m, s).col_join(B_u)
A:sympy.physics.mechanics.linearize.Bmat_eq->Matrix()
A:sympy.physics.mechanics.linearize.orig_vec->flatten(orig_vec)
A:sympy.physics.mechanics.linearize.per_vec->flatten(per_vec)
A:sympy.physics.mechanics.linearize.p_matrix->zeros(len(orig_vec))
sympy.physics.mechanics.Linearizer(self,f_0,f_1,f_2,f_3,f_4,f_c,f_v,f_a,q,u,q_i=None,q_d=None,u_i=None,u_d=None,r=None,lams=None)
sympy.physics.mechanics.Linearizer._form_block_matrices(self)
sympy.physics.mechanics.Linearizer._form_coefficient_matrices(self)
sympy.physics.mechanics.Linearizer._form_permutation_matrices(self)
sympy.physics.mechanics.Linearizer._setup(self)
sympy.physics.mechanics.Linearizer.linearize(self,op_point=None,A_and_B=False,simplify=False)
sympy.physics.mechanics.linearize.Linearizer(self,f_0,f_1,f_2,f_3,f_4,f_c,f_v,f_a,q,u,q_i=None,q_d=None,u_i=None,u_d=None,r=None,lams=None)
sympy.physics.mechanics.linearize.Linearizer.__init__(self,f_0,f_1,f_2,f_3,f_4,f_c,f_v,f_a,q,u,q_i=None,q_d=None,u_i=None,u_d=None,r=None,lams=None)
sympy.physics.mechanics.linearize.Linearizer._form_block_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._form_coefficient_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._form_permutation_matrices(self)
sympy.physics.mechanics.linearize.Linearizer._setup(self)
sympy.physics.mechanics.linearize.Linearizer.linearize(self,op_point=None,A_and_B=False,simplify=False)
sympy.physics.mechanics.linearize.permutation_matrix(orig_vec,per_vec)
sympy.physics.mechanics.permutation_matrix(orig_vec,per_vec)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/kane.py----------------------------------------
A:sympy.physics.mechanics.kane.q_dep->none_handler(q_dep)
A:sympy.physics.mechanics.kane.q_ind->Matrix(q_ind)
A:sympy.physics.mechanics.kane.self._q->Matrix([q_ind, q_dep])
A:sympy.physics.mechanics.kane.self._qdot->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.u_dep->none_handler(u_dep)
A:sympy.physics.mechanics.kane.u_ind->Matrix(u_ind)
A:sympy.physics.mechanics.kane.self._u->Matrix([u_ind, u_dep])
A:sympy.physics.mechanics.kane.self._udot->self.u.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.self._uaux->none_handler(u_aux)
A:sympy.physics.mechanics.kane.o->len(self.u)
A:sympy.physics.mechanics.kane.m->len(self._udep)
A:sympy.physics.mechanics.kane.config->none_handler(config)
A:sympy.physics.mechanics.kane.self._f_h->none_handler(config)
A:sympy.physics.mechanics.kane.vel->zero_uaux(body.point.vel(N))
A:sympy.physics.mechanics.kane.acc->zero_udot_uaux(body.point.acc(N))
A:sympy.physics.mechanics.kane.u_zero->dict(((i, 0) for i in self.u))
A:sympy.physics.mechanics.kane.udot_zero->dict(((i, 0) for i in self._udot))
A:sympy.physics.mechanics.kane.self._f_nh->Matrix()
A:sympy.physics.mechanics.kane.self._k_nh->Matrix()
A:sympy.physics.mechanics.kane.self._f_dnh->Matrix()
A:sympy.physics.mechanics.kane.self._k_dnh->Matrix()
A:sympy.physics.mechanics.kane.self._Ars->Matrix()
A:sympy.physics.mechanics.kane.kdeqs->Matrix(kdeqs)
A:sympy.physics.mechanics.kane.uaux_zero->dict(((i, 0) for i in Matrix([uaux, uauxdot])))
A:sympy.physics.mechanics.kane.qdot_zero->dict(((i, 0) for i in qdot))
A:sympy.physics.mechanics.kane.f_k->eye(len(qdot)).LUsolve(f_k)
A:sympy.physics.mechanics.kane.k_ku->eye(len(qdot)).LUsolve(k_ku)
A:sympy.physics.mechanics.kane.k_kqdot->eye(len(qdot))
A:sympy.physics.mechanics.kane.self._qdot_u_map->solve_linear_system_LU(Matrix([k_kqdot.T, -(k_ku * u + f_k).T]).T, qdot)
A:sympy.physics.mechanics.kane.self._f_k->Matrix()
A:sympy.physics.mechanics.kane.self._k_ku->Matrix()
A:sympy.physics.mechanics.kane.self._k_kqdot->Matrix()
A:sympy.physics.mechanics.kane.(vel_list, f_list)->_f_list_parser(fl, N)
A:sympy.physics.mechanics.kane.b->len(f_list)
A:sympy.physics.mechanics.kane.FR->zeros(o, 1)
A:sympy.physics.mechanics.kane.partials->partial_velocity(vel_list, self.u, N)
A:sympy.physics.mechanics.kane.FR[i]->sum((partials[j][i] & f_list[j] for j in range(b)))
A:sympy.physics.mechanics.kane.uauxdot_zero->dict(((i, 0) for i in uauxdot))
A:sympy.physics.mechanics.kane.q_ddot_u_map->dict(((k.diff(t), v.diff(t)) for (k, v) in self._qdot_u_map.items()))
A:sympy.physics.mechanics.kane.MM->zero_uaux(msubs(MM, q_ddot_u_map))
A:sympy.physics.mechanics.kane.nonMM->msubs(msubs(nonMM, q_ddot_u_map), udot_zero, uauxdot_zero, uaux_zero)
A:sympy.physics.mechanics.kane.M->zero_uaux(body.mass)
A:sympy.physics.mechanics.kane.I->zero_uaux(body.central_inertia)
A:sympy.physics.mechanics.kane.omega->zero_uaux(body.frame.ang_vel_in(N))
A:sympy.physics.mechanics.kane.inertial_torque->zero_uaux((I.dt(body.frame) & omega) + (I & body.frame.ang_acc_in(N)).subs(udot_zero) + (omega ^ I & omega))
A:sympy.physics.mechanics.kane.tmp_vel->zero_uaux(partials[i][0][j])
A:sympy.physics.mechanics.kane.tmp_ang->zero_uaux(I & partials[i][1][j])
A:sympy.physics.mechanics.kane.temp->zero_uaux(partials[i][0][j])
A:sympy.physics.mechanics.kane.f_v->Matrix()
A:sympy.physics.mechanics.kane.f_a->Matrix()
A:sympy.physics.mechanics.kane.ud_zero->dict(((i, 0) for i in self._udot))
A:sympy.physics.mechanics.kane.qd_zero->dict(((i, 0) for i in self._qdot))
A:sympy.physics.mechanics.kane.qd_u_zero->dict(((i, 0) for i in Matrix([self._qdot, self.u])))
A:sympy.physics.mechanics.kane.f_2->msubs(self._frstar, qd_u_zero)
A:sympy.physics.mechanics.kane.f_4->zeros(len(f_2), 1)
A:sympy.physics.mechanics.kane.uauxdot->uaux.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.kane.sym_list->set(Matrix([q, self._qdot, u, self._udot, uaux, uauxdot]))
A:sympy.physics.mechanics.kane.r->list(find_dynamicsymbols(self._f_d.subs(uaux_zero), sym_list))
A:sympy.physics.mechanics.kane.linearizer->self.to_linearizer()
A:sympy.physics.mechanics.kane.result->self.to_linearizer().linearize(**kwargs)
A:sympy.physics.mechanics.kane.subdict->dict(zip(uaux[:] + uauxdot[:], [0] * (len(uaux) + len(uauxdot))))
A:sympy.physics.mechanics.kane.insyms->set(self.q[:] + self._qdot[:] + self.u[:] + self._udot[:] + uaux[:] + uauxdot)
A:sympy.physics.mechanics.kane.other_dyns->list(find_dynamicsymbols(self._f_d.subs(subdict), insyms))
A:sympy.physics.mechanics.kane.n->len(self.q)
A:sympy.physics.mechanics.kane.l->len(self._qdep)
A:sympy.physics.mechanics.kane.qi->Matrix(self.q[:n - l])
A:sympy.physics.mechanics.kane.qd->Matrix(self.q[n - l:n])
A:sympy.physics.mechanics.kane.ui->Matrix(self.u[:o - m])
A:sympy.physics.mechanics.kane.ud->Matrix(self.u[o - m:o])
A:sympy.physics.mechanics.kane.qdot->Matrix(self._qdot)
A:sympy.physics.mechanics.kane.f2->f2.subs(subdict).subs(subdict)
A:sympy.physics.mechanics.kane.f1->f1.subs(subdict).subs(subdict)
A:sympy.physics.mechanics.kane.fh->self._f_h.subs(subdict)
A:sympy.physics.mechanics.kane.fku->(self._k_ku * Matrix(self.u)).subs(subdict)
A:sympy.physics.mechanics.kane.fkf->self._f_k.subs(subdict)
A:sympy.physics.mechanics.kane.fh_jac_qi->self._f_h.subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.fh_jac_qd->self._f_h.subs(subdict).jacobian(qd)
A:sympy.physics.mechanics.kane.fnh_jac_qi->fnh.jacobian(qi)
A:sympy.physics.mechanics.kane.fnh_jac_qd->fnh.jacobian(qd)
A:sympy.physics.mechanics.kane.fnh_jac_ui->fnh.jacobian(ui)
A:sympy.physics.mechanics.kane.fnh_jac_ud->fnh.jacobian(ud)
A:sympy.physics.mechanics.kane.fku_jac_qi->(self._k_ku * Matrix(self.u)).subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.fku_jac_qd->(self._k_ku * Matrix(self.u)).subs(subdict).jacobian(qd)
A:sympy.physics.mechanics.kane.fku_jac_ui->(self._k_ku * Matrix(self.u)).subs(subdict).jacobian(ui)
A:sympy.physics.mechanics.kane.fku_jac_ud->(self._k_ku * Matrix(self.u)).subs(subdict).jacobian(ud)
A:sympy.physics.mechanics.kane.fkf_jac_qi->self._f_k.subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.fkf_jac_qd->self._f_k.subs(subdict).jacobian(qd)
A:sympy.physics.mechanics.kane.f1_jac_qi->f1.subs(subdict).subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.f1_jac_qd->f1.subs(subdict).subs(subdict).jacobian(qd)
A:sympy.physics.mechanics.kane.f1_jac_ui->f1.subs(subdict).subs(subdict).jacobian(ui)
A:sympy.physics.mechanics.kane.f1_jac_ud->f1.subs(subdict).subs(subdict).jacobian(ud)
A:sympy.physics.mechanics.kane.f2_jac_qi->f2.subs(subdict).subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.f2_jac_qd->f2.subs(subdict).subs(subdict).jacobian(qd)
A:sympy.physics.mechanics.kane.f2_jac_ui->f2.subs(subdict).subs(subdict).jacobian(ui)
A:sympy.physics.mechanics.kane.f2_jac_ud->f2.subs(subdict).subs(subdict).jacobian(ud)
A:sympy.physics.mechanics.kane.f2_jac_qdot->f2.subs(subdict).subs(subdict).jacobian(qdot)
A:sympy.physics.mechanics.kane.dud_dqi->fnh.jacobian(ud).LUsolve(-fnh.jacobian(qi))
A:sympy.physics.mechanics.kane.f1_u->f1.subs(subdict).subs(subdict).jacobian(ui)
A:sympy.physics.mechanics.kane.f1_q->f1.subs(subdict).subs(subdict).jacobian(qi)
A:sympy.physics.mechanics.kane.f1_oths->f1.subs(subdict).subs(subdict).jacobian(other_dyns)
A:sympy.physics.mechanics.kane.f2_oths->f2.subs(subdict).subs(subdict).jacobian(other_dyns)
A:sympy.physics.mechanics.kane.f_lin_B->Matrix()
A:sympy.physics.mechanics.kane.fr->self._form_fr(FL)
A:sympy.physics.mechanics.kane.frstar->self._form_frstar(BL)
A:sympy.physics.mechanics.kane.km->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh)
A:sympy.physics.mechanics.kane.fraux->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh)._form_fr(FL)
A:sympy.physics.mechanics.kane.frstaraux->KanesMethod(self._inertial, self.q, self._uaux, u_auxiliary=self._uaux, u_dependent=self._udep, velocity_constraints=self._k_nh * self.u + self._f_nh)._form_frstar(BL)
A:sympy.physics.mechanics.kane.self._fr->self._form_fr(FL).col_join(fraux)
A:sympy.physics.mechanics.kane.self._frstar->self._form_frstar(BL).col_join(frstaraux)
A:sympy.physics.mechanics.kane.self._rhs->self.mass_matrix_full.LUsolve(self.forcing_full)
sympy.physics.mechanics.KanesMethod(self,frame,q_ind,u_ind,kd_eqs=None,q_dependent=None,configuration_constraints=None,u_dependent=None,velocity_constraints=None,acceleration_constraints=None,u_auxiliary=None)
sympy.physics.mechanics.KanesMethod._form_fr(self,fl)
sympy.physics.mechanics.KanesMethod._form_frstar(self,bl)
sympy.physics.mechanics.KanesMethod._initialize_constraint_matrices(self,config,vel,acc)
sympy.physics.mechanics.KanesMethod._initialize_kindiffeq_matrices(self,kdeqs)
sympy.physics.mechanics.KanesMethod._initialize_vectors(self,q_ind,q_dep,u_ind,u_dep,u_aux)
sympy.physics.mechanics.KanesMethod._old_linearize(self)
sympy.physics.mechanics.KanesMethod.auxiliary_eqs(self)
sympy.physics.mechanics.KanesMethod.bodylist(self)
sympy.physics.mechanics.KanesMethod.forcelist(self)
sympy.physics.mechanics.KanesMethod.forcing(self)
sympy.physics.mechanics.KanesMethod.forcing_full(self)
sympy.physics.mechanics.KanesMethod.kanes_equations(self,FL,BL)
sympy.physics.mechanics.KanesMethod.kindiffdict(self)
sympy.physics.mechanics.KanesMethod.linearize(self,**kwargs)
sympy.physics.mechanics.KanesMethod.mass_matrix(self)
sympy.physics.mechanics.KanesMethod.mass_matrix_full(self)
sympy.physics.mechanics.KanesMethod.q(self)
sympy.physics.mechanics.KanesMethod.rhs(self,inv_method=None)
sympy.physics.mechanics.KanesMethod.to_linearizer(self)
sympy.physics.mechanics.KanesMethod.u(self)
sympy.physics.mechanics.kane.KanesMethod(self,frame,q_ind,u_ind,kd_eqs=None,q_dependent=None,configuration_constraints=None,u_dependent=None,velocity_constraints=None,acceleration_constraints=None,u_auxiliary=None)
sympy.physics.mechanics.kane.KanesMethod.__init__(self,frame,q_ind,u_ind,kd_eqs=None,q_dependent=None,configuration_constraints=None,u_dependent=None,velocity_constraints=None,acceleration_constraints=None,u_auxiliary=None)
sympy.physics.mechanics.kane.KanesMethod._form_fr(self,fl)
sympy.physics.mechanics.kane.KanesMethod._form_frstar(self,bl)
sympy.physics.mechanics.kane.KanesMethod._initialize_constraint_matrices(self,config,vel,acc)
sympy.physics.mechanics.kane.KanesMethod._initialize_kindiffeq_matrices(self,kdeqs)
sympy.physics.mechanics.kane.KanesMethod._initialize_vectors(self,q_ind,q_dep,u_ind,u_dep,u_aux)
sympy.physics.mechanics.kane.KanesMethod._old_linearize(self)
sympy.physics.mechanics.kane.KanesMethod.auxiliary_eqs(self)
sympy.physics.mechanics.kane.KanesMethod.bodylist(self)
sympy.physics.mechanics.kane.KanesMethod.forcelist(self)
sympy.physics.mechanics.kane.KanesMethod.forcing(self)
sympy.physics.mechanics.kane.KanesMethod.forcing_full(self)
sympy.physics.mechanics.kane.KanesMethod.kanes_equations(self,FL,BL)
sympy.physics.mechanics.kane.KanesMethod.kindiffdict(self)
sympy.physics.mechanics.kane.KanesMethod.linearize(self,**kwargs)
sympy.physics.mechanics.kane.KanesMethod.mass_matrix(self)
sympy.physics.mechanics.kane.KanesMethod.mass_matrix_full(self)
sympy.physics.mechanics.kane.KanesMethod.q(self)
sympy.physics.mechanics.kane.KanesMethod.rhs(self,inv_method=None)
sympy.physics.mechanics.kane.KanesMethod.to_linearizer(self)
sympy.physics.mechanics.kane.KanesMethod.u(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/lagrange.py----------------------------------------
A:sympy.physics.mechanics.lagrange.self._L->Matrix([sympify(Lagrangian)])
A:sympy.physics.mechanics.lagrange.self._m_cd->coneqs.diff(dynamicsymbols._t).jacobian(self._qdoubledots)
A:sympy.physics.mechanics.lagrange.self._m_d->without_lam.jacobian(self._qdoubledots)
A:sympy.physics.mechanics.lagrange.self._f_cd->Matrix()
A:sympy.physics.mechanics.lagrange.self._f_d->Matrix()
A:sympy.physics.mechanics.lagrange.self.lam_coeffs->Matrix()
A:sympy.physics.mechanics.lagrange.self.lam_vec->Matrix(dynamicsymbols('lam1:' + str(m + 1)))
A:sympy.physics.mechanics.lagrange.self._term1->self._L.jacobian(qds)
A:sympy.physics.mechanics.lagrange.self._term2->Matrix()
A:sympy.physics.mechanics.lagrange.self._term3->zeros(n, 1)
A:sympy.physics.mechanics.lagrange.self._term4->zeros(n, 1)
A:sympy.physics.mechanics.lagrange.self._q->Matrix(qs)
A:sympy.physics.mechanics.lagrange.self._qdots->self.q.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.self._qdoubledots->self._qdots.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.hol_coneqs->mat_build(hol_coneqs)
A:sympy.physics.mechanics.lagrange.nonhol_coneqs->mat_build(nonhol_coneqs)
A:sympy.physics.mechanics.lagrange.self.coneqs->Matrix([hol_coneqs.diff(dynamicsymbols._t), nonhol_coneqs])
A:sympy.physics.mechanics.lagrange.qdd_zero->dict(((i, 0) for i in self._qdoubledots))
A:sympy.physics.mechanics.lagrange.n->len(self.q)
A:sympy.physics.mechanics.lagrange.m->len(self.coneqs)
A:sympy.physics.mechanics.lagrange.diffconeqs->coneqs.diff(dynamicsymbols._t)
A:sympy.physics.mechanics.lagrange.flist->zip(*_f_list_parser(self.forcelist, N))
A:sympy.physics.mechanics.lagrange.self._term4[i]->sum((v.diff(qd, N) & f for (v, f) in flist))
A:sympy.physics.mechanics.lagrange.row1->eye(n).row_join(zeros(n, n + m))
A:sympy.physics.mechanics.lagrange.row2->zeros(n, n).row_join(self.mass_matrix)
A:sympy.physics.mechanics.lagrange.row3->zeros(m, n).row_join(self._m_cd).row_join(zeros(m, m))
A:sympy.physics.mechanics.lagrange.ud->u.diff(t)
A:sympy.physics.mechanics.lagrange.q_i->mat_build(q_ind)
A:sympy.physics.mechanics.lagrange.q_d->mat_build(q_dep)
A:sympy.physics.mechanics.lagrange.u_i->mat_build(qd_ind)
A:sympy.physics.mechanics.lagrange.u_d->mat_build(qd_dep)
A:sympy.physics.mechanics.lagrange.f_a->f_v.diff(t)
A:sympy.physics.mechanics.lagrange.insyms->set(Matrix([q, u, ud, lams]))
A:sympy.physics.mechanics.lagrange.r->list(find_dynamicsymbols(f_3, insyms))
A:sympy.physics.mechanics.lagrange.linearizer->self.to_linearizer(q_ind, qd_ind, q_dep, qd_dep)
A:sympy.physics.mechanics.lagrange.result->self.to_linearizer(q_ind, qd_ind, q_dep, qd_dep).linearize(**kwargs)
A:sympy.physics.mechanics.lagrange.k->len(self.lam_vec)
A:sympy.physics.mechanics.lagrange.mass_matrix->msubs(mass_matrix, op_point_dict)
A:sympy.physics.mechanics.lagrange.force_matrix->msubs(force_matrix, op_point_dict)
A:sympy.physics.mechanics.lagrange.self._rhs->self.mass_matrix_full.LUsolve(self.forcing_full)
sympy.physics.mechanics.LagrangesMethod(self,Lagrangian,qs,coneqs=None,forcelist=None,frame=None,hol_coneqs=None,nonhol_coneqs=None)
sympy.physics.mechanics.LagrangesMethod.forcelist(self)
sympy.physics.mechanics.LagrangesMethod.forcing(self)
sympy.physics.mechanics.LagrangesMethod.forcing_full(self)
sympy.physics.mechanics.LagrangesMethod.form_lagranges_equations(self)
sympy.physics.mechanics.LagrangesMethod.linearize(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None,**kwargs)
sympy.physics.mechanics.LagrangesMethod.mass_matrix(self)
sympy.physics.mechanics.LagrangesMethod.mass_matrix_full(self)
sympy.physics.mechanics.LagrangesMethod.q(self)
sympy.physics.mechanics.LagrangesMethod.rhs(self,inv_method=None,**kwargs)
sympy.physics.mechanics.LagrangesMethod.solve_multipliers(self,op_point=None,sol_type='dict')
sympy.physics.mechanics.LagrangesMethod.to_linearizer(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None)
sympy.physics.mechanics.LagrangesMethod.u(self)
sympy.physics.mechanics.lagrange.LagrangesMethod(self,Lagrangian,qs,coneqs=None,forcelist=None,frame=None,hol_coneqs=None,nonhol_coneqs=None)
sympy.physics.mechanics.lagrange.LagrangesMethod.__init__(self,Lagrangian,qs,coneqs=None,forcelist=None,frame=None,hol_coneqs=None,nonhol_coneqs=None)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcelist(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcing(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.forcing_full(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.form_lagranges_equations(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.linearize(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None,**kwargs)
sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.mass_matrix_full(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.q(self)
sympy.physics.mechanics.lagrange.LagrangesMethod.rhs(self,inv_method=None,**kwargs)
sympy.physics.mechanics.lagrange.LagrangesMethod.solve_multipliers(self,op_point=None,sol_type='dict')
sympy.physics.mechanics.lagrange.LagrangesMethod.to_linearizer(self,q_ind=None,qd_ind=None,q_dep=None,qd_dep=None)
sympy.physics.mechanics.lagrange.LagrangesMethod.u(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/functions.py----------------------------------------
A:sympy.physics.mechanics.functions.linear_momentum_sys->Vector(0)
A:sympy.physics.mechanics.functions.angular_momentum_sys->Vector(0)
A:sympy.physics.mechanics.functions.ke_sys->S(0)
A:sympy.physics.mechanics.functions.pe_sys->S(0)
A:sympy.physics.mechanics.functions.t_set->set([dynamicsymbols._t])
A:sympy.physics.mechanics.functions.exclude_set->set()
A:sympy.physics.mechanics.functions.sub_dict->dict_merge(*sub_dicts)
A:sympy.physics.mechanics.functions.smart->kwargs.pop('smart', False)
A:sympy.physics.mechanics.functions.val->_sub_func(expr, sub_dict)
A:sympy.physics.mechanics.functions.expr->simplify(expr)
A:sympy.physics.mechanics.functions.(num, den)->_fraction_decomp(expr)
A:sympy.physics.mechanics.functions.denom_subbed->_recurser(den, sub_dict)
A:sympy.physics.mechanics.functions.num_subbed->_recurser(num, sub_dict)
A:sympy.physics.mechanics.functions.num->Mul(*num)
A:sympy.physics.mechanics.functions.den->Mul(*den)
A:sympy.physics.mechanics.functions.(vel_list, f_list)->unzip(list(flist_iter()))
sympy.physics.mechanics.Lagrangian(frame,*body)
sympy.physics.mechanics._crawl(expr,func,*args,**kwargs)
sympy.physics.mechanics._f_list_parser(fl,ref_frame)
sympy.physics.mechanics._fraction_decomp(expr)
sympy.physics.mechanics._smart_subs(expr,sub_dict)
sympy.physics.mechanics._sub_func(expr,sub_dict)
sympy.physics.mechanics._tan_repl_func(expr)
sympy.physics.mechanics.angular_momentum(point,frame,*body)
sympy.physics.mechanics.find_dynamicsymbols(expression,exclude=None)
sympy.physics.mechanics.functions.Lagrangian(frame,*body)
sympy.physics.mechanics.functions._crawl(expr,func,*args,**kwargs)
sympy.physics.mechanics.functions._f_list_parser(fl,ref_frame)
sympy.physics.mechanics.functions._fraction_decomp(expr)
sympy.physics.mechanics.functions._smart_subs(expr,sub_dict)
sympy.physics.mechanics.functions._sub_func(expr,sub_dict)
sympy.physics.mechanics.functions._tan_repl_func(expr)
sympy.physics.mechanics.functions.angular_momentum(point,frame,*body)
sympy.physics.mechanics.functions.find_dynamicsymbols(expression,exclude=None)
sympy.physics.mechanics.functions.inertia(frame,ixx,iyy,izz,ixy=0,iyz=0,izx=0)
sympy.physics.mechanics.functions.inertia_of_point_mass(mass,pos_vec,frame)
sympy.physics.mechanics.functions.kinetic_energy(frame,*body)
sympy.physics.mechanics.functions.linear_momentum(frame,*body)
sympy.physics.mechanics.functions.mechanics_printing(**kwargs)
sympy.physics.mechanics.functions.msubs(expr,*sub_dicts,**kwargs)
sympy.physics.mechanics.functions.potential_energy(*body)
sympy.physics.mechanics.inertia(frame,ixx,iyy,izz,ixy=0,iyz=0,izx=0)
sympy.physics.mechanics.inertia_of_point_mass(mass,pos_vec,frame)
sympy.physics.mechanics.kinetic_energy(frame,*body)
sympy.physics.mechanics.linear_momentum(frame,*body)
sympy.physics.mechanics.mechanics_printing(**kwargs)
sympy.physics.mechanics.msubs(expr,*sub_dicts,**kwargs)
sympy.physics.mechanics.potential_energy(*body)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/particle.py----------------------------------------
A:sympy.physics.mechanics.particle.self._pe->sympify(scalar)
A:sympy.physics.mechanics.particle.self._mass->sympify(mass)
A:sympy.physics.mechanics.particle.mass->property(get_mass, set_mass)
A:sympy.physics.mechanics.particle.point->property(get_point, set_point)
sympy.physics.mechanics.Particle(self,name,point,mass)
sympy.physics.mechanics.Particle.__str__(self)
sympy.physics.mechanics.Particle.angular_momentum(self,point,frame)
sympy.physics.mechanics.Particle.get_mass(self)
sympy.physics.mechanics.Particle.get_point(self)
sympy.physics.mechanics.Particle.kinetic_energy(self,frame)
sympy.physics.mechanics.Particle.linear_momentum(self,frame)
sympy.physics.mechanics.Particle.potential_energy(self)
sympy.physics.mechanics.Particle.set_mass(self,mass)
sympy.physics.mechanics.Particle.set_point(self,p)
sympy.physics.mechanics.Particle.set_potential_energy(self,scalar)
sympy.physics.mechanics.particle.Particle(self,name,point,mass)
sympy.physics.mechanics.particle.Particle.__init__(self,name,point,mass)
sympy.physics.mechanics.particle.Particle.__str__(self)
sympy.physics.mechanics.particle.Particle.angular_momentum(self,point,frame)
sympy.physics.mechanics.particle.Particle.get_mass(self)
sympy.physics.mechanics.particle.Particle.get_point(self)
sympy.physics.mechanics.particle.Particle.kinetic_energy(self,frame)
sympy.physics.mechanics.particle.Particle.linear_momentum(self,frame)
sympy.physics.mechanics.particle.Particle.potential_energy(self)
sympy.physics.mechanics.particle.Particle.set_mass(self,mass)
sympy.physics.mechanics.particle.Particle.set_point(self,p)
sympy.physics.mechanics.particle.Particle.set_potential_energy(self,scalar)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/rigidbody.py----------------------------------------
A:sympy.physics.mechanics.rigidbody.self._pe->sympify(scalar)
A:sympy.physics.mechanics.rigidbody.frame->property(get_frame, set_frame)
A:sympy.physics.mechanics.rigidbody.masscenter->property(get_masscenter, set_masscenter)
A:sympy.physics.mechanics.rigidbody.self._mass->sympify(m)
A:sympy.physics.mechanics.rigidbody.mass->property(get_mass, set_mass)
A:sympy.physics.mechanics.rigidbody.I_Ss_O->inertia_of_point_mass(self.mass, self.masscenter.pos_from(I[1]), self.frame)
A:sympy.physics.mechanics.rigidbody.inertia->property(get_inertia, set_inertia)
sympy.physics.mechanics.RigidBody(self,name,masscenter,frame,mass,inertia)
sympy.physics.mechanics.RigidBody.__str__(self)
sympy.physics.mechanics.RigidBody.angular_momentum(self,point,frame)
sympy.physics.mechanics.RigidBody.central_inertia(self)
sympy.physics.mechanics.RigidBody.get_frame(self)
sympy.physics.mechanics.RigidBody.get_inertia(self)
sympy.physics.mechanics.RigidBody.get_mass(self)
sympy.physics.mechanics.RigidBody.get_masscenter(self)
sympy.physics.mechanics.RigidBody.kinetic_energy(self,frame)
sympy.physics.mechanics.RigidBody.linear_momentum(self,frame)
sympy.physics.mechanics.RigidBody.potential_energy(self)
sympy.physics.mechanics.RigidBody.set_frame(self,F)
sympy.physics.mechanics.RigidBody.set_inertia(self,I)
sympy.physics.mechanics.RigidBody.set_mass(self,m)
sympy.physics.mechanics.RigidBody.set_masscenter(self,p)
sympy.physics.mechanics.RigidBody.set_potential_energy(self,scalar)
sympy.physics.mechanics.rigidbody.RigidBody(self,name,masscenter,frame,mass,inertia)
sympy.physics.mechanics.rigidbody.RigidBody.__init__(self,name,masscenter,frame,mass,inertia)
sympy.physics.mechanics.rigidbody.RigidBody.__str__(self)
sympy.physics.mechanics.rigidbody.RigidBody.angular_momentum(self,point,frame)
sympy.physics.mechanics.rigidbody.RigidBody.central_inertia(self)
sympy.physics.mechanics.rigidbody.RigidBody.get_frame(self)
sympy.physics.mechanics.rigidbody.RigidBody.get_inertia(self)
sympy.physics.mechanics.rigidbody.RigidBody.get_mass(self)
sympy.physics.mechanics.rigidbody.RigidBody.get_masscenter(self)
sympy.physics.mechanics.rigidbody.RigidBody.kinetic_energy(self,frame)
sympy.physics.mechanics.rigidbody.RigidBody.linear_momentum(self,frame)
sympy.physics.mechanics.rigidbody.RigidBody.potential_energy(self)
sympy.physics.mechanics.rigidbody.RigidBody.set_frame(self,F)
sympy.physics.mechanics.rigidbody.RigidBody.set_inertia(self,I)
sympy.physics.mechanics.rigidbody.RigidBody.set_mass(self,m)
sympy.physics.mechanics.rigidbody.RigidBody.set_masscenter(self,p)
sympy.physics.mechanics.rigidbody.RigidBody.set_potential_energy(self,scalar)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_kane3.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane3.(q1, q2, q4, q5)->dynamicsymbols('q1 q2 q4 q5')
A:sympy.physics.mechanics.tests.test_kane3.(q1d, q2d, q4d, q5d)->dynamicsymbols('q1 q2 q4 q5', 1)
A:sympy.physics.mechanics.tests.test_kane3.(u1, u2, u3, u4, u5, u6)->dynamicsymbols('u1 u2 u3 u4 u5 u6')
A:sympy.physics.mechanics.tests.test_kane3.(u1d, u2d, u3d, u4d, u5d, u6d)->dynamicsymbols('u1 u2 u3 u4 u5 u6', 1)
A:sympy.physics.mechanics.tests.test_kane3.(WFrad, WRrad, htangle, forkoffset)->symbols('WFrad WRrad htangle forkoffset')
A:sympy.physics.mechanics.tests.test_kane3.(forklength, framelength, forkcg1)->symbols('forklength framelength forkcg1')
A:sympy.physics.mechanics.tests.test_kane3.(forkcg3, framecg1, framecg3, Iwr11)->symbols('forkcg3 framecg1 framecg3 Iwr11')
A:sympy.physics.mechanics.tests.test_kane3.(Iwr22, Iwf11, Iwf22, Iframe11)->symbols('Iwr22 Iwf11 Iwf22 Iframe11')
A:sympy.physics.mechanics.tests.test_kane3.(Iframe22, Iframe33, Iframe31, Ifork11)->symbols('Iframe22 Iframe33 Iframe31 Ifork11')
A:sympy.physics.mechanics.tests.test_kane3.(Ifork22, Ifork33, Ifork31, g)->symbols('Ifork22 Ifork33 Ifork31 g')
A:sympy.physics.mechanics.tests.test_kane3.(mframe, mfork, mwf, mwr)->symbols('mframe mfork mwf mwr')
A:sympy.physics.mechanics.tests.test_kane3.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane3.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_kane3.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_kane3.Frame->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y])
A:sympy.physics.mechanics.tests.test_kane3.WR->ReferenceFrame('WR')
A:sympy.physics.mechanics.tests.test_kane3.TempFrame->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('TempFrame', 'Axis', [-htangle, Frame.y])
A:sympy.physics.mechanics.tests.test_kane3.Fork->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('Fork', 'Axis', [q5, Frame.x])
A:sympy.physics.mechanics.tests.test_kane3.TempFork->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('R', 'Axis', [q2, Y.x]).orientnew('Frame', 'Axis', [q4 + htangle, R.y]).orientnew('Fork', 'Axis', [q5, Frame.x]).orientnew('TempFork', 'Axis', [-htangle, Fork.y])
A:sympy.physics.mechanics.tests.test_kane3.WF->ReferenceFrame('WF')
A:sympy.physics.mechanics.tests.test_kane3.WR_cont->Point('WR_cont')
A:sympy.physics.mechanics.tests.test_kane3.WR_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z)
A:sympy.physics.mechanics.tests.test_kane3.Steer->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z)
A:sympy.physics.mechanics.tests.test_kane3.Frame_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Frame_mc', -framecg1 * Frame.x + framecg3 * Frame.z)
A:sympy.physics.mechanics.tests.test_kane3.Fork_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('Fork_mc', -forkcg1 * Fork.x + forkcg3 * Fork.z)
A:sympy.physics.mechanics.tests.test_kane3.WF_mc->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('WF_mc', forklength * Fork.x + forkoffset * Fork.z)
A:sympy.physics.mechanics.tests.test_kane3.WF_cont->Point('WR_cont').locatenew('WR_mc', WRrad * R.z).locatenew('Steer', framelength * Frame.z).locatenew('WF_mc', forklength * Fork.x + forkoffset * Fork.z).locatenew('WF_cont', WFrad * (dot(Fork.y, Y.z) * Fork.y - Y.z).normalize())
A:sympy.physics.mechanics.tests.test_kane3.BodyFrame->RigidBody('BodyFrame', Frame_mc, Frame, mframe, Frame_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyFork->RigidBody('BodyFork', Fork_mc, Fork, mfork, Fork_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyWR->RigidBody('BodyWR', WR_mc, WR, mwr, WR_I)
A:sympy.physics.mechanics.tests.test_kane3.BodyWF->RigidBody('BodyWF', WF_mc, WF, mwf, WF_I)
A:sympy.physics.mechanics.tests.test_kane3.KM->KanesMethod(N, q_ind=[q1, q2, q5], q_dependent=[q4], configuration_constraints=conlist_coord, u_ind=[u2, u3, u5], u_dependent=[u1, u4, u6], velocity_constraints=conlist_speed, kd_eqs=kd)
A:sympy.physics.mechanics.tests.test_kane3.(fr, frstar)->KanesMethod(N, q_ind=[q1, q2, q5], q_dependent=[q4], configuration_constraints=conlist_coord, u_ind=[u2, u3, u5], u_dependent=[u1, u4, u6], velocity_constraints=conlist_speed, kd_eqs=kd).kanes_equations(FL, BL)
A:sympy.physics.mechanics.tests.test_kane3.HTA->sympy.evalf.N(pi / 2 - pi / 10)
A:sympy.physics.mechanics.tests.test_kane3.rake->sympy.evalf.N(-(TrailPaper * sin(HTA) - PaperRadFront * cos(HTA)))
A:sympy.physics.mechanics.tests.test_kane3.FrameLength->sympy.evalf.N(PaperWb * sin(HTA) - (rake - (PaperRadFront - PaperRadRear) * cos(HTA)))
A:sympy.physics.mechanics.tests.test_kane3.FrameCGNorm->sympy.evalf.N((PaperFrameCgZ - PaperRadRear - PaperFrameCgX / sin(HTA) * cos(HTA)) * sin(HTA))
A:sympy.physics.mechanics.tests.test_kane3.FrameCGPar->sympy.evalf.N(PaperFrameCgX / sin(HTA) + (PaperFrameCgZ - PaperRadRear - PaperFrameCgX / sin(HTA) * cos(HTA)) * cos(HTA))
A:sympy.physics.mechanics.tests.test_kane3.tempa->sympy.evalf.N(PaperForkCgZ - PaperRadFront)
A:sympy.physics.mechanics.tests.test_kane3.tempb->sympy.evalf.N(PaperWb - PaperForkCgX)
A:sympy.physics.mechanics.tests.test_kane3.tempc->sympy.evalf.N(sqrt(tempa ** 2 + tempb ** 2))
A:sympy.physics.mechanics.tests.test_kane3.PaperForkL->sympy.evalf.N(PaperWb * cos(HTA) - (PaperRadFront - PaperRadRear) * sin(HTA))
A:sympy.physics.mechanics.tests.test_kane3.ForkCGNorm->sympy.evalf.N(rake + tempc * sin(pi / 2 - HTA - acos(tempa / tempc)))
A:sympy.physics.mechanics.tests.test_kane3.ForkCGPar->sympy.evalf.N(tempc * cos(pi / 2 - HTA - acos(tempa / tempc)) - PaperForkL)
A:sympy.physics.mechanics.tests.test_kane3.v->symbols('v')
A:sympy.physics.mechanics.tests.test_kane3.MM_full_s->MM_full_s.evalf().evalf()
A:sympy.physics.mechanics.tests.test_kane3.forcing_lin_s->forcing_lin_s.evalf().evalf()
A:sympy.physics.mechanics.tests.test_kane3.A->Amat.extract([1, 2, 4, 6], [1, 2, 3, 5])
A:sympy.physics.mechanics.tests.test_kane3.Res->Matrix([[0, 0, 1.0, 0], [0, 0, 0, 1.0], [9.48977444677355, -0.891197738059089 * v ** 2 - 0.571523173729245, -0.105522449805691 * v, -0.330515398992311 * v], [11.7194768719633, -1.97171508499972 * v ** 2 + 30.9087533932407, 3.67680523332152 * v, -3.08486552743311 * v]])
sympy.physics.mechanics.tests.test_kane3.test_bicycle()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_functions.py----------------------------------------
A:sympy.physics.mechanics.tests.test_functions.(q1, q2, q3, q4, q5)->symbols('q1 q2 q3 q4 q5')
A:sympy.physics.mechanics.tests.test_functions.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_functions.A->RigidBody('A', Ac, a, M, (I, Ac))
A:sympy.physics.mechanics.tests.test_functions.B->RigidBody('A', Ac, a, M, (I, Ac)).orientnew('B', 'Axis', [q2, A.x])
A:sympy.physics.mechanics.tests.test_functions.C->RigidBody('A', Ac, a, M, (I, Ac)).orientnew('B', 'Axis', [q2, A.x]).orientnew('C', 'Axis', [q3, B.y])
A:sympy.physics.mechanics.tests.test_functions.(ixx, iyy, izz)->symbols('ixx iyy izz')
A:sympy.physics.mechanics.tests.test_functions.(ixy, iyz, izx)->symbols('ixy iyz izx')
A:sympy.physics.mechanics.tests.test_functions.(r, s, t, m)->symbols('r s t m')
A:sympy.physics.mechanics.tests.test_functions.I->outer(N.z, N.z)
A:sympy.physics.mechanics.tests.test_functions.Ac->Point('O').locatenew('Ac', l1 * N.x)
A:sympy.physics.mechanics.tests.test_functions.P->Point('O').locatenew('Ac', l1 * N.x).locatenew('P', l1 * N.x)
A:sympy.physics.mechanics.tests.test_functions.Pa->Particle('Pa', P, m)
A:sympy.physics.mechanics.tests.test_functions.(m, M, l1)->symbols('m M l1')
A:sympy.physics.mechanics.tests.test_functions.q1d->dynamicsymbols('q1d')
A:sympy.physics.mechanics.tests.test_functions.O->Point('O')
A:sympy.physics.mechanics.tests.test_functions.a->ReferenceFrame('a')
A:sympy.physics.mechanics.tests.test_functions.omega->dynamicsymbols('omega')
A:sympy.physics.mechanics.tests.test_functions.(m, M, l1, g, h, H)->symbols('m M l1 g h H')
A:sympy.physics.mechanics.tests.test_functions.(a, b)->symbols('a, b')
A:sympy.physics.mechanics.tests.test_functions.(x, y, z)->dynamicsymbols('x, y, z')
A:sympy.physics.mechanics.tests.test_functions.expr->Matrix([[a * x + b, x * y.diff() + y], [x.diff().diff(), z + sin(z.diff())]])
A:sympy.physics.mechanics.tests.test_functions.sol->set([y.diff(), x.diff().diff(), z.diff()])
sympy.physics.mechanics.tests.test_functions.test_angular_momentum_and_linear_momentum()
sympy.physics.mechanics.tests.test_functions.test_find_dynamicsymbols()
sympy.physics.mechanics.tests.test_functions.test_inertia()
sympy.physics.mechanics.tests.test_functions.test_inertia_of_point_mass()
sympy.physics.mechanics.tests.test_functions.test_kinetic_energy()
sympy.physics.mechanics.tests.test_functions.test_linear_momentum()
sympy.physics.mechanics.tests.test_functions.test_msubs()
sympy.physics.mechanics.tests.test_functions.test_potential_energy()
sympy.physics.mechanics.tests.test_test_angular_momentum_and_linear_momentum()
sympy.physics.mechanics.tests.test_test_find_dynamicsymbols()
sympy.physics.mechanics.tests.test_test_inertia()
sympy.physics.mechanics.tests.test_test_inertia_of_point_mass()
sympy.physics.mechanics.tests.test_test_kinetic_energy()
sympy.physics.mechanics.tests.test_test_linear_momentum()
sympy.physics.mechanics.tests.test_test_msubs()
sympy.physics.mechanics.tests.test_test_potential_energy()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_particle.py----------------------------------------
A:sympy.physics.mechanics.tests.test_particle.(m, m2, v1, v2, v3, r, g, h)->symbols('m m2 v1 v2 v3 r g h')
A:sympy.physics.mechanics.tests.test_particle.P->Point('P')
A:sympy.physics.mechanics.tests.test_particle.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_particle.p->Particle('pa', P, m)
A:sympy.physics.mechanics.tests.test_particle.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_particle.O->Point('O')
sympy.physics.mechanics.tests.test_particle.test_particle()
sympy.physics.mechanics.tests.test_test_particle()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_linearize.py----------------------------------------
A:sympy.physics.mechanics.tests.test_linearize.(t, r, m, g, v)->symbols('t r m g v')
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2, q3, q4, q5, q6)q->dynamicsymbols('q1:7')
A:sympy.physics.mechanics.tests.test_linearize.u->dynamicsymbols('u:6')
A:sympy.physics.mechanics.tests.test_linearize.(u1, u2, u3, u4, u5, u6)u->dynamicsymbols('u1:7')
A:sympy.physics.mechanics.tests.test_linearize.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_linearize.NO->Point('NO')
A:sympy.physics.mechanics.tests.test_linearize.A->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z])
A:sympy.physics.mechanics.tests.test_linearize.B->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z]).orientnew('B', 'Axis', [q2, A.x])
A:sympy.physics.mechanics.tests.test_linearize.C->Point('C')
A:sympy.physics.mechanics.tests.test_linearize.CO->Point('NO').locatenew('CO', q4 * N.x + q5 * N.y + q6 * N.z)
A:sympy.physics.mechanics.tests.test_linearize.w_c_n_qd->Point('C').ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_linearize.w_b_n_qd->ReferenceFrame('N').orientnew('A', 'axis', [theta1, N.z]).orientnew('B', 'Axis', [q2, A.x]).ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_linearize.v_co_n_qd->Point('NO').locatenew('CO', q4 * N.x + q5 * N.y + q6 * N.z).pos_from(NO).dt(N)
A:sympy.physics.mechanics.tests.test_linearize.P->Point('N*').locatenew('P1', q1 * N.x + q2 * N.y)
A:sympy.physics.mechanics.tests.test_linearize.f_c->Matrix([q1 ** 2 + q2 ** 2 - L ** 2])
A:sympy.physics.mechanics.tests.test_linearize.f_v->Matrix([P.vel(N).express(A).dot(A.x)])
A:sympy.physics.mechanics.tests.test_linearize.kindiffs->Matrix([dot(w_c_n_qd - C.ang_vel_in(N), uv) for uv in B] + [dot(v_co_n_qd - CO.vel(N), uv) for uv in N])
A:sympy.physics.mechanics.tests.test_linearize.qdots->solve(kindiffs, qd)
A:sympy.physics.mechanics.tests.test_linearize.I_C_CO->inertia(C, I, J, I)
A:sympy.physics.mechanics.tests.test_linearize.Disc->RigidBody('Disc', CO, C, m, (I_C_CO, CO))
A:sympy.physics.mechanics.tests.test_linearize.KM->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde)
A:sympy.physics.mechanics.tests.test_linearize.(fr, fr_star)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).kanes_equations(FL, BL)
A:sympy.physics.mechanics.tests.test_linearize.linearizer->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).to_linearizer()
A:sympy.physics.mechanics.tests.test_linearize.sol->Matrix([[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 0, -6 * q3d, 0], [0, -4 * g / (5 * r), 0, 6 * q3d / 5, 0, 0], [0, 0, 0, 0, 0, 0]])
A:sympy.physics.mechanics.tests.test_linearize.(A, B)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).to_linearizer().linearize(op_point=[q_op, u_op, qd_op, ud_op], A_and_B=True, simplify=True)
A:sympy.physics.mechanics.tests.test_linearize.A_sol->Matrix([[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [sin(q1) * q3d, 0, 0, 0, 0, -sin(q1), -cos(q1), 0], [-cos(q1) * q3d, 0, 0, 0, 0, cos(q1), -sin(q1), 0], [0, 4 / 5, 0, 0, 0, 0, 0, 6 * q3d / 5], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, -2 * q3d, 0, 0]])
A:sympy.physics.mechanics.tests.test_linearize.B_sol->Matrix([])
A:sympy.physics.mechanics.tests.test_linearize.q1->dynamicsymbols('q1')
A:sympy.physics.mechanics.tests.test_linearize.u1->dynamicsymbols('u1')
A:sympy.physics.mechanics.tests.test_linearize.q1d->dynamicsymbols('q1', 1)
A:sympy.physics.mechanics.tests.test_linearize.(L, m, t)->symbols('L, m, t')
A:sympy.physics.mechanics.tests.test_linearize.pN->Point('N*')
A:sympy.physics.mechanics.tests.test_linearize.pP->Particle('pP', P, m)
A:sympy.physics.mechanics.tests.test_linearize.kde->Matrix([q1d - u1, q2d - u2])
A:sympy.physics.mechanics.tests.test_linearize.(fr, frstar)->KanesMethod(N, q_ind=[q2], u_ind=[u2], q_dependent=[q1], u_dependent=[u1], configuration_constraints=f_c, velocity_constraints=f_v, acceleration_constraints=f_a, kd_eqs=kde).kanes_equations([(P, R)], [pP])
A:sympy.physics.mechanics.tests.test_linearize.(A, B, inp_vec)->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N).linearize([q2], [q2d], [q1], [q1d], op_point=op_point, A_and_B=True)
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2)->dynamicsymbols('q1:3')
A:sympy.physics.mechanics.tests.test_linearize.(q1d, q2d)->dynamicsymbols('q1:3', level=1)
A:sympy.physics.mechanics.tests.test_linearize.(u1, u2)->dynamicsymbols('u1:3')
A:sympy.physics.mechanics.tests.test_linearize.(u1d, u2d)->dynamicsymbols('u1:3', level=1)
A:sympy.physics.mechanics.tests.test_linearize.theta1->atan(q2 / q1)
A:sympy.physics.mechanics.tests.test_linearize.dq_dict->solve(kde, [q1d, q2d])
A:sympy.physics.mechanics.tests.test_linearize.f_a->Matrix([P.vel(N).express(A).dot(A.x)]).diff(t)
A:sympy.physics.mechanics.tests.test_linearize.Lag->Lagrangian(N, BodyD)
A:sympy.physics.mechanics.tests.test_linearize.LM->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N)
A:sympy.physics.mechanics.tests.test_linearize.lam_op->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N).solve_multipliers(op_point=op_point)
A:sympy.physics.mechanics.tests.test_linearize.(q1, q2, q3)q->dynamicsymbols('q1 q2 q3')
A:sympy.physics.mechanics.tests.test_linearize.(q1d, q2d, q3d)qd->dynamicsymbols('q1 q2 q3', 1)
A:sympy.physics.mechanics.tests.test_linearize.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_linearize.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_linearize.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_linearize.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_linearize.Dmc->Point('C').locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_linearize.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_linearize.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_linearize.l->LagrangesMethod(Lag, q)
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_kane_minimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_kane_nonminimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_lagrange_minimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_pendulum_lagrange_nonminimal()
sympy.physics.mechanics.tests.test_linearize.test_linearize_rolling_disc_kane()
sympy.physics.mechanics.tests.test_linearize.test_linearize_rolling_disc_lagrange()
sympy.physics.mechanics.tests.test_test_linearize_pendulum_kane_minimal()
sympy.physics.mechanics.tests.test_test_linearize_pendulum_kane_nonminimal()
sympy.physics.mechanics.tests.test_test_linearize_pendulum_lagrange_minimal()
sympy.physics.mechanics.tests.test_test_linearize_pendulum_lagrange_nonminimal()
sympy.physics.mechanics.tests.test_test_linearize_rolling_disc_kane()
sympy.physics.mechanics.tests.test_test_linearize_rolling_disc_lagrange()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_kane.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane.(q, u)->dynamicsymbols('q u')
A:sympy.physics.mechanics.tests.test_kane.(qd, ud)->dynamicsymbols('q u', 1)
A:sympy.physics.mechanics.tests.test_kane.(m, c, k)->symbols('m c k')
A:sympy.physics.mechanics.tests.test_kane.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane.P->Point('P')
A:sympy.physics.mechanics.tests.test_kane.pa->Particle('pa', P, m)
A:sympy.physics.mechanics.tests.test_kane.KM->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3, u4, u5], kd_eqs=kd)
A:sympy.physics.mechanics.tests.test_kane.(F_A_old, F_B_old, r_old)->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3, u4, u5], kd_eqs=kd).linearize()
A:sympy.physics.mechanics.tests.test_kane.(M_new, F_A_new, F_B_new, r_new)->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3, u4, u5], kd_eqs=kd).linearize(new_method=True)
A:sympy.physics.mechanics.tests.test_kane.(q1, q2, u1, u2)->dynamicsymbols('q1 q2 u1 u2')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d, u1d, u2d)->dynamicsymbols('q1 q2 u1 u2', 1)
A:sympy.physics.mechanics.tests.test_kane.(m, c1, c2, k1, k2)->symbols('m c1 c2 k1 k2')
A:sympy.physics.mechanics.tests.test_kane.P1->Point('P1')
A:sympy.physics.mechanics.tests.test_kane.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_kane.pa1->Particle('pa1', P1, m)
A:sympy.physics.mechanics.tests.test_kane.pa2->Particle('pa2', P2, m)
A:sympy.physics.mechanics.tests.test_kane.(m, l, g)->symbols('m l g')
A:sympy.physics.mechanics.tests.test_kane.(q1, q2, q3, u1, u2, u3)->dynamicsymbols('q1 q2 q3 u1 u2 u3')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d, q3d, u1d, u2d, u3d)->dynamicsymbols('q1 q2 q3 u1 u2 u3', 1)
A:sympy.physics.mechanics.tests.test_kane.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_kane.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_kane.L->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_kane.R->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_kane.w_R_N_qd->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y]).ang_vel_in(N)
A:sympy.physics.mechanics.tests.test_kane.C->Point('O').locatenew('C', q1 * N.x)
A:sympy.physics.mechanics.tests.test_kane.Dmc->Point('O').locatenew('C', q1 * N.x).locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_kane.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_kane.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_kane.kdd->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3, u4, u5], kd_eqs=kd).kindiffdict()
A:sympy.physics.mechanics.tests.test_kane.rhs->rhs.subs(kdd).subs(kdd)
A:sympy.physics.mechanics.tests.test_kane.A_upright->ReferenceFrame('A').subs({r: 1, g: 1, m: 1}).subs({q1: 0, q2: 0, q3: 0, u1: 0, u3: 0})
A:sympy.physics.mechanics.tests.test_kane.(u4, u5, f1, f2)->dynamicsymbols('u4, u5, f1, f2')
A:sympy.physics.mechanics.tests.test_kane.(u4d, u5d)->dynamicsymbols('u4, u5', 1)
A:sympy.physics.mechanics.tests.test_kane.(fr, frstar)->KanesMethod(N, [q1, q2], [u1, u2], kindiffs).kanes_equations(forceList, bodyList)
A:sympy.physics.mechanics.tests.test_kane.fr->fr.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.frstar->frstar.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.KM2->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3], kd_eqs=kd, u_auxiliary=[u4, u5])
A:sympy.physics.mechanics.tests.test_kane.(fr2, frstar2)->KanesMethod(N, q_ind=[q1, q2, q3], u_ind=[u1, u2, u3], kd_eqs=kd, u_auxiliary=[u4, u5]).kanes_equations(ForceList, BodyList)
A:sympy.physics.mechanics.tests.test_kane.fr2->fr2.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.frstar2->frstar2.subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0}).subs({u4d: 0, u5d: 0}).subs({u4: 0, u5: 0})
A:sympy.physics.mechanics.tests.test_kane.gravity->symbols('g')
A:sympy.physics.mechanics.tests.test_kane.(k, ls)->symbols('k ls')
A:sympy.physics.mechanics.tests.test_kane.(a, mA, mC)->symbols('a mA mC')
A:sympy.physics.mechanics.tests.test_kane.F->dynamicsymbols('F')
A:sympy.physics.mechanics.tests.test_kane.(Ix, Iy, Iz)->symbols('Ix Iy Iz')
A:sympy.physics.mechanics.tests.test_kane.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_kane.(q1d, q2d)->dynamicsymbols('q1 q2', 1)
A:sympy.physics.mechanics.tests.test_kane.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_kane.(u1d, u2d)->dynamicsymbols('u1 u2', 1)
A:sympy.physics.mechanics.tests.test_kane.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_kane.O->Point('O')
A:sympy.physics.mechanics.tests.test_kane.Ao->Point('O').locatenew('C', q1 * N.x).locatenew('Ao', a * A.y)
A:sympy.physics.mechanics.tests.test_kane.Cart->Particle('Cart', C, mC)
A:sympy.physics.mechanics.tests.test_kane.Pendulum->RigidBody('Pendulum', Ao, A, mA, (inertia(A, Ix, Iy, Iz), C))
A:sympy.physics.mechanics.tests.test_kane.km->KanesMethod(N, [q1, q2], [u1, u2], kindiffs)
sympy.physics.mechanics.tests.test_kane.test_aux()
sympy.physics.mechanics.tests.test_kane.test_one_dof()
sympy.physics.mechanics.tests.test_kane.test_parallel_axis()
sympy.physics.mechanics.tests.test_kane.test_pend()
sympy.physics.mechanics.tests.test_kane.test_rolling_disc()
sympy.physics.mechanics.tests.test_kane.test_two_dof()
sympy.physics.mechanics.tests.test_test_aux()
sympy.physics.mechanics.tests.test_test_one_dof()
sympy.physics.mechanics.tests.test_test_parallel_axis()
sympy.physics.mechanics.tests.test_test_pend()
sympy.physics.mechanics.tests.test_test_rolling_disc()
sympy.physics.mechanics.tests.test_test_two_dof()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_lagrange.py----------------------------------------
A:sympy.physics.mechanics.tests.test_lagrange.(y, theta)->dynamicsymbols('y theta')
A:sympy.physics.mechanics.tests.test_lagrange.(yd, thetad)->dynamicsymbols('y theta', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(m, g, R, l, alpha)->symbols('m g R l alpha')
A:sympy.physics.mechanics.tests.test_lagrange.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_lagrange.A->ReferenceFrame('N').orientnew('A', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.B->ReferenceFrame('N').orientnew('B', 'Axis', [q2, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.Do->Point('Do')
A:sympy.physics.mechanics.tests.test_lagrange.D->RigidBody('D', Do, B, m, (I, Do))
A:sympy.physics.mechanics.tests.test_lagrange.L->N.orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x])
A:sympy.physics.mechanics.tests.test_lagrange.m->LagrangesMethod(L, q, hol_coneqs=hol_coneqs)
A:sympy.physics.mechanics.tests.test_lagrange.rhs->LagrangesMethod(L, q, hol_coneqs=hol_coneqs).rhs()
A:sympy.physics.mechanics.tests.test_lagrange.(q, u)->dynamicsymbols('q u')
A:sympy.physics.mechanics.tests.test_lagrange.(qd, ud)->dynamicsymbols('q u ', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(l, m, g)->symbols('l m g')
A:sympy.physics.mechanics.tests.test_lagrange.O->Point('O')
A:sympy.physics.mechanics.tests.test_lagrange.P->Point('O').locatenew('P', l * A.x)
A:sympy.physics.mechanics.tests.test_lagrange.Pa->Particle('Pa', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.lm->LagrangesMethod(L, [q1, q2])
A:sympy.physics.mechanics.tests.test_lagrange.RHS->LagrangesMethod(Lag, q).rhs()
A:sympy.physics.mechanics.tests.test_lagrange.(q1, q2)->dynamicsymbols('q1 q2')
A:sympy.physics.mechanics.tests.test_lagrange.(q1d, q2d)->dynamicsymbols('q1 q2', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(L, m, t)->symbols('L, m, t')
A:sympy.physics.mechanics.tests.test_lagrange.pN->Point('N*')
A:sympy.physics.mechanics.tests.test_lagrange.pP->Particle('pP', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.f_c->Matrix([q1 ** 2 + q2 ** 2 - L ** 2])
A:sympy.physics.mechanics.tests.test_lagrange.Lag->Lagrangian(N, BodyD)
A:sympy.physics.mechanics.tests.test_lagrange.LM->LagrangesMethod(Lag, [q1, q2], hol_coneqs=f_c, forcelist=[(P, m * g * N.x)], frame=N)
A:sympy.physics.mechanics.tests.test_lagrange.eom_sol->Matrix([[m * Derivative(q1, t, t) - 9.8 * m + 2 * lam1 * q1], [m * Derivative(q2, t, t) + 2 * lam1 * q2]])
A:sympy.physics.mechanics.tests.test_lagrange.lam_sol->Matrix([(19.6 * q1 + 2 * q1d ** 2 + 2 * q2d ** 2) / (4 * q1 ** 2 / m + 4 * q2 ** 2 / m)])
A:sympy.physics.mechanics.tests.test_lagrange.(q1dd, q2dd)->dynamicsymbols('q1 q2', 2)
A:sympy.physics.mechanics.tests.test_lagrange.(u1, u2)->dynamicsymbols('u1 u2')
A:sympy.physics.mechanics.tests.test_lagrange.(u1d, u2d)->dynamicsymbols('u1 u2', 1)
A:sympy.physics.mechanics.tests.test_lagrange.R->N.orientnew('Y', 'Axis', [q1, N.z]).orientnew('L', 'Axis', [q2, Y.x]).orientnew('R', 'Axis', [q3, L.y])
A:sympy.physics.mechanics.tests.test_lagrange.ParP->Particle('ParP', P, m)
A:sympy.physics.mechanics.tests.test_lagrange.ParR->Particle('ParR', R, m)
A:sympy.physics.mechanics.tests.test_lagrange.(q1, q2, q3)->dynamicsymbols('q1 q2 q3')
A:sympy.physics.mechanics.tests.test_lagrange.(q1d, q2d, q3d)->dynamicsymbols('q1 q2 q3', 1)
A:sympy.physics.mechanics.tests.test_lagrange.(r, m, g)->symbols('r m g')
A:sympy.physics.mechanics.tests.test_lagrange.Y->ReferenceFrame('N').orientnew('Y', 'Axis', [q1, N.z])
A:sympy.physics.mechanics.tests.test_lagrange.C->Point('C')
A:sympy.physics.mechanics.tests.test_lagrange.Dmc->Point('C').locatenew('Dmc', r * L.z)
A:sympy.physics.mechanics.tests.test_lagrange.I->inertia(L, m / 4 * r ** 2, m / 2 * r ** 2, m / 4 * r ** 2)
A:sympy.physics.mechanics.tests.test_lagrange.BodyD->RigidBody('BodyD', Dmc, R, m, (I, Dmc))
A:sympy.physics.mechanics.tests.test_lagrange.q1->Function('q1')
A:sympy.physics.mechanics.tests.test_lagrange.q2->Function('q2')
A:sympy.physics.mechanics.tests.test_lagrange.q3->Function('q3')
A:sympy.physics.mechanics.tests.test_lagrange.l->LagrangesMethod(Lag, q)
A:sympy.physics.mechanics.tests.test_lagrange.t->symbols('t')
sympy.physics.mechanics.tests.test_lagrange.test_disc_on_an_incline_plane()
sympy.physics.mechanics.tests.test_lagrange.test_dub_pen()
sympy.physics.mechanics.tests.test_lagrange.test_nonminimal_pendulum()
sympy.physics.mechanics.tests.test_lagrange.test_rolling_disc()
sympy.physics.mechanics.tests.test_lagrange.test_simp_pen()
sympy.physics.mechanics.tests.test_test_disc_on_an_incline_plane()
sympy.physics.mechanics.tests.test_test_dub_pen()
sympy.physics.mechanics.tests.test_test_nonminimal_pendulum()
sympy.physics.mechanics.tests.test_test_rolling_disc()
sympy.physics.mechanics.tests.test_test_simp_pen()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_kane2.py----------------------------------------
A:sympy.physics.mechanics.tests.test_kane2.(t, r, m, g, I, J)->symbols('t r m g I J')
A:sympy.physics.mechanics.tests.test_kane2.(Fx, Fy, Fz)->symbols('Fx Fy Fz')
A:sympy.physics.mechanics.tests.test_kane2.q->dynamicsymbols('q:4')
A:sympy.physics.mechanics.tests.test_kane2.u->dynamicsymbols('u:6')
A:sympy.physics.mechanics.tests.test_kane2.ud_zero->dict(zip(ud, [0.0] * len(ud)))
A:sympy.physics.mechanics.tests.test_kane2.ua->dynamicsymbols('ua:3')
A:sympy.physics.mechanics.tests.test_kane2.ua_zero->dict(zip(ua, [0.0] * len(ua)))
A:sympy.physics.mechanics.tests.test_kane2.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_kane2.A->F.orientnew('P', 'axis', [-theta, F.y]).orientnew('A', 'axis', [q1, P.x])
A:sympy.physics.mechanics.tests.test_kane2.B->F.orientnew('P', 'axis', [-theta, F.y]).orientnew('A', 'axis', [q1, P.x]).orientnew('B', 'axis', [q2, A.z])
A:sympy.physics.mechanics.tests.test_kane2.C->F.orientnew('P', 'axis', [-theta, F.y]).orientnew('A', 'axis', [q1, P.x]).orientnew('C', 'axis', [q3, A.z])
A:sympy.physics.mechanics.tests.test_kane2.P->ReferenceFrame('F').orientnew('P', 'axis', [-theta, F.y])
A:sympy.physics.mechanics.tests.test_kane2.O->ReferenceFrame('F').orientnew('P', 'axis', [-theta, F.y]).locatenew('O', q[3] * A.z + r * sin(q[1]) * A.y)
A:sympy.physics.mechanics.tests.test_kane2.kindiffs->Matrix([dot(w_c_n_qd - C.ang_vel_in(N), uv) for uv in B] + [dot(v_o_n_qd - O.vel(N), A.z)])
A:sympy.physics.mechanics.tests.test_kane2.qd_kd->solve(kindiffs, qd)
A:sympy.physics.mechanics.tests.test_kane2.steady_conditions->solve(kindiffs.subs({qd[1]: 0, qd[3]: 0}), u)
A:sympy.physics.mechanics.tests.test_kane2.f_c->Matrix([dot(-r * B.z, A.z) - q[3]])
A:sympy.physics.mechanics.tests.test_kane2.f_v->Matrix([dot(O.vel(N) - (P.vel(N) + cross(C.ang_vel_in(N), O.pos_from(P))), ai).expand() for ai in A])
A:sympy.physics.mechanics.tests.test_kane2.v_o_n->cross(C.ang_vel_in(N), O.pos_from(P))
A:sympy.physics.mechanics.tests.test_kane2.f_a->Matrix([dot(O.acc(N) - a_o_n, ai) for ai in A])
A:sympy.physics.mechanics.tests.test_kane2.M_v->zeros(3, 9)
A:sympy.physics.mechanics.tests.test_kane2.M_v[i, j]->f_v[i].diff(ui)
A:sympy.physics.mechanics.tests.test_kane2.M_v_i_aux->M_v_i.row_join(M_v_aux)
A:sympy.physics.mechanics.tests.test_kane2.u_dep_dict->dict(zip(u[3:], u_dep))
A:sympy.physics.mechanics.tests.test_kane2.Fr_u->Matrix([dot(F_O, pv_o) + dot(F_P, pv_p) for (pv_o, pv_p) in zip(partial_v_O, partial_v_P)])
A:sympy.physics.mechanics.tests.test_kane2.I_C_O->inertia(B, I, J, I)
A:sympy.physics.mechanics.tests.test_kane2.Fr_star_u->Matrix([dot(R_star_O, pv) + dot(T_star_C, pav) for (pv, pav) in zip(partial_v_O, partial_w_C)])
A:sympy.physics.mechanics.tests.test_kane2.Fr_star_steady->Fr_star_c.subs(ud_zero).subs(u_dep_dict).subs(steady_conditions).subs({q[3]: -r * cos(q[1])}).expand()
A:sympy.physics.mechanics.tests.test_kane2.disc->RigidBody('disc', O, C, m, iner_tuple)
A:sympy.physics.mechanics.tests.test_kane2.kane->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua)
A:sympy.physics.mechanics.tests.test_kane2.(fr, frstar)->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua).kanes_equations(forceList, bodyList)
A:sympy.physics.mechanics.tests.test_kane2.frstar_steady->frstar.subs(ud_zero).subs(u_dep_dict).subs(steady_conditions).subs({q[3]: -r * cos(q[1])}).expand()
A:sympy.physics.mechanics.tests.test_kane2.kdd->KanesMethod(N, q_ind=q[:3], u_ind=u[:3], kd_eqs=kindiffs, q_dependent=q[3:], configuration_constraints=f_c, u_dependent=u[3:], velocity_constraints=f_v, u_auxiliary=ua).kindiffdict()
A:sympy.physics.mechanics.tests.test_kane2.(q1, q2, q3)->dynamicsymbols('q1:4')
A:sympy.physics.mechanics.tests.test_kane2.(q1d, q2d, q3d)->dynamicsymbols('q1:4', level=1)
A:sympy.physics.mechanics.tests.test_kane2.(u1, u2, u3, u4, u5)->dynamicsymbols('u1:6')
A:sympy.physics.mechanics.tests.test_kane2.(u_prime, R, M, g, e, f, theta)->symbols("u' R, M, g, e, f, theta")
A:sympy.physics.mechanics.tests.test_kane2.(a, b, mA, mB, IA, J, K, t)->symbols('a b mA mB IA J K t')
A:sympy.physics.mechanics.tests.test_kane2.(Q1, Q2, Q3)->symbols('Q1 Q2 Q3')
A:sympy.physics.mechanics.tests.test_kane2.(IA22, IA23, IA33)->symbols('IA22 IA23 IA33')
A:sympy.physics.mechanics.tests.test_kane2.F->ReferenceFrame('F')
A:sympy.physics.mechanics.tests.test_kane2.pD->Point('D')
A:sympy.physics.mechanics.tests.test_kane2.pS_star->Point('D').locatenew('S*', e * A.y)
A:sympy.physics.mechanics.tests.test_kane2.pQ->Point('D').locatenew('Q', f * A.y - R * A.x)
A:sympy.physics.mechanics.tests.test_kane2.pA_star->Point('D').locatenew('A*', a * A.y)
A:sympy.physics.mechanics.tests.test_kane2.pB_star->Point('D').locatenew('B*', b * A.z)
A:sympy.physics.mechanics.tests.test_kane2.pC_star->Point('D').locatenew('C*', -b * A.z)
A:sympy.physics.mechanics.tests.test_kane2.pB_hat->Point('D').locatenew('B*', b * A.z).locatenew('B^', -R * A.x)
A:sympy.physics.mechanics.tests.test_kane2.pC_hat->Point('D').locatenew('C*', -b * A.z).locatenew('C^', -R * A.x)
A:sympy.physics.mechanics.tests.test_kane2.inertia_A->inertia(A, IA, IA22, IA33, 0, IA23, 0)
A:sympy.physics.mechanics.tests.test_kane2.inertia_B->inertia(B, K, K, J)
A:sympy.physics.mechanics.tests.test_kane2.inertia_C->inertia(C, K, K, J)
A:sympy.physics.mechanics.tests.test_kane2.rbA->RigidBody('rbA', pA_star, A, mA, (inertia_A, pA_star))
A:sympy.physics.mechanics.tests.test_kane2.rbB->RigidBody('rbB', pB_star, B, mB, (inertia_B, pB_star))
A:sympy.physics.mechanics.tests.test_kane2.rbC->RigidBody('rbC', pC_star, C, mB, (inertia_C, pC_star))
A:sympy.physics.mechanics.tests.test_kane2.km->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3])
A:sympy.physics.mechanics.tests.test_kane2.(fr, fr_star)->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3]).kanes_equations(forces, bodies)
A:sympy.physics.mechanics.tests.test_kane2.vc_map->solve(vc, [u4, u5])
A:sympy.physics.mechanics.tests.test_kane2.fr_star_expected->Matrix([-(IA + 2 * J * b ** 2 / R ** 2 + 2 * K + mA * a ** 2 + 2 * mB * b ** 2) * u1.diff(t) - mA * a * u1 * u2, -(mA + 2 * mB + 2 * J / R ** 2) * u2.diff(t) + mA * a * u1 ** 2, 0])
A:sympy.physics.mechanics.tests.test_kane2.(fr2, fr_star2)->KanesMethod(F, [q1, q2, q3], [u1, u2], kd_eqs=kde, u_auxiliary=[u3]).kanes_equations(forces, bodies2)
A:sympy.physics.mechanics.tests.test_kane2.(u1, u2, u3)->dynamicsymbols('u1:4')
A:sympy.physics.mechanics.tests.test_kane2.kde_map->solve(kde, [q1d, q2d, q3d])
A:sympy.physics.mechanics.tests.test_kane2.kde_map[k.diff(t)]->v.diff(t)
A:sympy.physics.mechanics.tests.test_kane2.fr_expected->Matrix([f * Q3 + M * g * e * sin(theta) * cos(q1), Q2 + M * g * sin(theta) * sin(q1), e * M * g * cos(theta) - Q1 * f - Q2 * R])
sympy.physics.mechanics.tests.test_kane2.test_aux_dep()
sympy.physics.mechanics.tests.test_kane2.test_non_central_inertia()
sympy.physics.mechanics.tests.test_kane2.test_sub_qdot()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/mechanics/tests/test_rigidbody.py----------------------------------------
A:sympy.physics.mechanics.tests.test_rigidbody.(m, m2, v1, v2, v3, omega)->symbols('m m2 v1 v2 v3 omega')
A:sympy.physics.mechanics.tests.test_rigidbody.A->ReferenceFrame('A')
A:sympy.physics.mechanics.tests.test_rigidbody.A2->ReferenceFrame('A2')
A:sympy.physics.mechanics.tests.test_rigidbody.P->Point('O').locatenew('P', p1 * B.x + p2 * B.y + p3 * B.z)
A:sympy.physics.mechanics.tests.test_rigidbody.P2->Point('P2')
A:sympy.physics.mechanics.tests.test_rigidbody.I->outer(B.x, B.x)
A:sympy.physics.mechanics.tests.test_rigidbody.I2->Dyadic(0)
A:sympy.physics.mechanics.tests.test_rigidbody.B->ReferenceFrame('A').orientnew('B', 'axis', [q1, A.x])
A:sympy.physics.mechanics.tests.test_rigidbody.N->ReferenceFrame('N')
A:sympy.physics.mechanics.tests.test_rigidbody.(M, v, r, omega, g, h)->dynamicsymbols('M v r omega g h')
A:sympy.physics.mechanics.tests.test_rigidbody.b->ReferenceFrame('b')
A:sympy.physics.mechanics.tests.test_rigidbody.O->Point('O')
A:sympy.physics.mechanics.tests.test_rigidbody.(q1, q2, q3, q4)->dynamicsymbols('q1:5')
A:sympy.physics.mechanics.tests.test_rigidbody.(p1, p2, p3)->symbols('p1:4')
A:sympy.physics.mechanics.tests.test_rigidbody.m->symbols('m')
A:sympy.physics.mechanics.tests.test_rigidbody.rb1->RigidBody('rb1', P, B, m, (I, P))
A:sympy.physics.mechanics.tests.test_rigidbody.rb2->RigidBody('rb2', P, B, m, (I + inertia_of_point_mass(m, P.pos_from(O), B), O))
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody2()
sympy.physics.mechanics.tests.test_rigidbody.test_rigidbody3()
sympy.physics.mechanics.tests.test_test_rigidbody()
sympy.physics.mechanics.tests.test_test_rigidbody2()
sympy.physics.mechanics.tests.test_test_rigidbody3()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/hep/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/hep/gamma_matrices.py----------------------------------------
A:sympy.physics.hep.gamma_matrices.DiracSpinorIndex->TensorIndexType('DiracSpinorIndex', dim=4, dummy_fmt='S')
A:sympy.physics.hep.gamma_matrices.lorentz_types->dict()
A:sympy.physics.hep.gamma_matrices.new_L->TensorIndexType('LorentzIndex', dim=dim, eps_dim=eps_dim, dummy_fmt=dummy_fmt)
A:sympy.physics.hep.gamma_matrices._gmhd->dict()
A:sympy.physics.hep.gamma_matrices.lorentz->_LorentzContainer(*key)
A:sympy.physics.hep.gamma_matrices.gmh->sympy.tensor.tensor.TensorHead.__new__(cls, 'gamma', TensorType(Tuple(lorentz, DiracSpinorIndex, DiracSpinorIndex), tensorsymmetry([1], [1], [1])), comm=2, matrix_behavior=True)
A:sympy.physics.hep.gamma_matrices.sp->expression.split()
A:sympy.physics.hep.gamma_matrices.(extracted_expr, residual_expr)->GammaMatrixHead.extract_type_tens(expression)
A:sympy.physics.hep.gamma_matrices.res_expr->GammaMatrixHead._simplify_single_line(extracted_expr)
A:sympy.physics.hep.gamma_matrices.elim->set()
A:sympy.physics.hep.gamma_matrices.ta->ex.sorted_components().split()
A:sympy.physics.hep.gamma_matrices.mu->TensorIndex('mu', GammaMatrix.LorentzIndex)
A:sympy.physics.hep.gamma_matrices.t->GammaMatrixHead().simplify_lines(t)
A:sympy.physics.hep.gamma_matrices.ex->ex.sorted_components().sorted_components()
A:sympy.physics.hep.gamma_matrices.(lines, traces, rest)->get_lines(ex, DiracSpinorIndex)
A:sympy.physics.hep.gamma_matrices.a->GammaMatrixHead().simplify_lines(t).split()
A:sympy.physics.hep.gamma_matrices.trest->tensor_mul(*[x for (i, x) in enumerate(a) if i in rest])
A:sympy.physics.hep.gamma_matrices.tx->tensor_mul(*[x for (i, x) in enumerate(a) if i in line])
A:sympy.physics.hep.gamma_matrices.tx1->GammaMatrixHead._simplify_single_line(tx)
A:sympy.physics.hep.gamma_matrices.res->self._trace_single_line(t)
A:sympy.physics.hep.gamma_matrices.(t1, t2)->GammaMatrixHead.extract_type_tens(expression)
A:sympy.physics.hep.gamma_matrices.t1->self._gamma_trace1(*a[i:j])
A:sympy.physics.hep.gamma_matrices.ncomps->len(components)
A:sympy.physics.hep.gamma_matrices.t2->tensor_mul(*a2)
A:sympy.physics.hep.gamma_matrices.t3->t3.contract_metric(g).contract_metric(g)
A:sympy.physics.hep.gamma_matrices.n->len(tids.components)
A:sympy.physics.hep.gamma_matrices.dc->abs(c0 - c1)
A:sympy.physics.hep.gamma_matrices.dum->sorted([_ for _ in tids.dum if _[0] == 0 and _[1] == 0])
A:sympy.physics.hep.gamma_matrices.first_dum_pos->min(min(dum_zip[0]), min(dum_zip[1]))
A:sympy.physics.hep.gamma_matrices.number_of_contractions->len(dum)
A:sympy.physics.hep.gamma_matrices.links->dict()
A:sympy.physics.hep.gamma_matrices.next_ones->dict().pop(pointer)
A:sympy.physics.hep.gamma_matrices.pointer->min(links.keys())
A:sympy.physics.hep.gamma_matrices.expr2->list(reversed(prepend_indices))
A:sympy.physics.hep.gamma_matrices.GammaMatrix->GammaMatrixHead()
sympy.physics.hep.gamma_GammaMatrixHead(cls,dim=4,eps_dim=4)
sympy.physics.hep.gamma_GammaMatrixHead._gamma_trace1(self,*a)
sympy.physics.hep.gamma_GammaMatrixHead._kahane_simplify(coeff,tids)
sympy.physics.hep.gamma_GammaMatrixHead._simplify_single_line(expression)
sympy.physics.hep.gamma_GammaMatrixHead._trace_single_line(self,t)
sympy.physics.hep.gamma_GammaMatrixHead.extract_type_tens(expression)
sympy.physics.hep.gamma_GammaMatrixHead.gamma_trace(self,t)
sympy.physics.hep.gamma_GammaMatrixHead.simplify_gpgp(ex,sort=True)
sympy.physics.hep.gamma_GammaMatrixHead.simplify_lines(ex)
sympy.physics.hep.gamma_GammaMatrixHead.simplify_this_type(expression)
sympy.physics.hep.gamma__LorentzContainer(cls,dim=4,eps_dim=None,dummy_fmt='L')
sympy.physics.hep.gamma_matrices.GammaMatrixHead(cls,dim=4,eps_dim=4)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.__new__(cls,dim=4,eps_dim=4)
sympy.physics.hep.gamma_matrices.GammaMatrixHead._gamma_trace1(self,*a)
sympy.physics.hep.gamma_matrices.GammaMatrixHead._kahane_simplify(coeff,tids)
sympy.physics.hep.gamma_matrices.GammaMatrixHead._simplify_single_line(expression)
sympy.physics.hep.gamma_matrices.GammaMatrixHead._trace_single_line(self,t)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.extract_type_tens(expression)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.gamma_trace(self,t)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.simplify_gpgp(ex,sort=True)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.simplify_lines(ex)
sympy.physics.hep.gamma_matrices.GammaMatrixHead.simplify_this_type(expression)
sympy.physics.hep.gamma_matrices._LorentzContainer(cls,dim=4,eps_dim=None,dummy_fmt='L')
sympy.physics.hep.gamma_matrices._LorentzContainer.__new__(cls,dim=4,eps_dim=None,dummy_fmt='L')


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/hep/tests/test_gamma_matrices.py----------------------------------------
A:sympy.physics.hep.tests.test_gamma_matrices.(mu, nu, rho, sigma)->tensor_indices('mu, nu, rho, sigma', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(a1, a2, a3, a4, a5, a6)->tensor_indices('a1:7', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52)->tensor_indices('mu11, mu12, mu21, mu31, mu32, mu41, mu51, mu52', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(mu61, mu71, mu72)->tensor_indices('mu61, mu71, mu72', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(m0, m1, m2, m3, m4, m5, m6)->tensor_indices('m0:7', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.ts->simplify(t)
A:sympy.physics.hep.tests.test_gamma_matrices.st->tfunc(t)
A:sympy.physics.hep.tests.test_gamma_matrices.t->G(m0)
A:sympy.physics.hep.tests.test_gamma_matrices.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15)->tensor_indices('i0:16', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16)->tensor_indices('s0:17', DiracSpinorIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.r->GammaMatrixHead(dim=D).simplify_lines(t)
A:sympy.physics.hep.tests.test_gamma_matrices.(i, j, k)->tensor_indices('i,j,k', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.A->tensorhead('A', [G.LorentzIndex], [[1]])
A:sympy.physics.hep.tests.test_gamma_matrices.(n0, n1, n2, n3, n4, n5)->tensor_indices('n0:6', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.t1->GammaMatrixHead(dim=D)._trace_single_line(t)
A:sympy.physics.hep.tests.test_gamma_matrices.st2->str(t2)
A:sympy.physics.hep.tests.test_gamma_matrices.t2->t2.contract_metric(g).contract_metric(g)
A:sympy.physics.hep.tests.test_gamma_matrices.(p, q)->tensorhead('p,q', [G.LorentzIndex], [[1]])
A:sympy.physics.hep.tests.test_gamma_matrices.D->symbols('D')
A:sympy.physics.hep.tests.test_gamma_matrices.G->GammaMatrixHead(dim=D)
A:sympy.physics.hep.tests.test_gamma_matrices.(m0, m1, m2, m3)->tensor_indices('m0:4', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13)->tensor_indices('i0:14', G.LorentzIndex)
A:sympy.physics.hep.tests.test_gamma_matrices.(i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12)->tensor_indices('i0:13', G.LorentzIndex)
sympy.physics.hep.tests.test_gamma__is_tensor_eq(arg1,arg2)
sympy.physics.hep.tests.test_gamma_execute_gamma_simplify_tests_for_function(tfunc,D)
sympy.physics.hep.tests.test_gamma_matrices._is_tensor_eq(arg1,arg2)
sympy.physics.hep.tests.test_gamma_matrices.execute_gamma_simplify_tests_for_function(tfunc,D)
sympy.physics.hep.tests.test_gamma_matrices.test_gamma_matrix_class()
sympy.physics.hep.tests.test_gamma_matrices.test_gamma_matrix_trace()
sympy.physics.hep.tests.test_gamma_matrices.test_get_lines()
sympy.physics.hep.tests.test_gamma_matrices.test_kahane_algorithm()
sympy.physics.hep.tests.test_gamma_matrices.test_kahane_simplify1()
sympy.physics.hep.tests.test_gamma_matrices.test_simple_trace_cases_symbolic_dim()
sympy.physics.hep.tests.test_gamma_matrices.test_simplify_lines()
sympy.physics.hep.tests.test_gamma_test_gamma_matrix_class()
sympy.physics.hep.tests.test_gamma_test_gamma_matrix_trace()
sympy.physics.hep.tests.test_gamma_test_get_lines()
sympy.physics.hep.tests.test_gamma_test_kahane_algorithm()
sympy.physics.hep.tests.test_gamma_test_kahane_simplify1()
sympy.physics.hep.tests.test_gamma_test_simple_trace_cases_symbolic_dim()
sympy.physics.hep.tests.test_gamma_test_simplify_lines()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/hep/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/gaussopt.py----------------------------------------
A:sympy.physics.optics.gaussopt.q->(temp[0] / temp[1]).expand(complex=True)
A:sympy.physics.optics.gaussopt.(n1, n2)->map(sympify, (n1, n2))
A:sympy.physics.optics.gaussopt.(R, n1, n2)->map(sympify, (R, n1, n2))
A:sympy.physics.optics.gaussopt.R->sympify(R)
A:sympy.physics.optics.gaussopt.f->sympify(kwargs['f'])
A:sympy.physics.optics.gaussopt.(wavelen, z)->map(sympify, (wavelen, z))
A:sympy.physics.optics.gaussopt.inst->sympy.Expr.__new__(cls, wavelen, z)
A:sympy.physics.optics.gaussopt.inst.z_r->waist2rayleigh(sympify(kwargs['w']), wavelen)
A:sympy.physics.optics.gaussopt.(w, wavelen)->map(sympify, (w, wavelen))
A:sympy.physics.optics.gaussopt.(z_r, wavelen)->map(sympify, (z_r, wavelen))
A:sympy.physics.optics.gaussopt.(a, b)->map(sympify, (a, b))
A:sympy.physics.optics.gaussopt.(a, f)->map(sympify, (a, f))
A:sympy.physics.optics.gaussopt.(s_in, z_r_in, f)->map(sympify, (s_in, z_r_in, f))
A:sympy.physics.optics.gaussopt.(wavelen, waist_in, waist_out)->map(sympify, (wavelen, waist_in, waist_out))
A:sympy.physics.optics.gaussopt.z->waist2rayleigh(waist_in, wavelen)
sympy.physics.optics.BeamParameter(cls,wavelen,z,**kwargs)
sympy.physics.optics.BeamParameter.divergence(self)
sympy.physics.optics.BeamParameter.gouy(self)
sympy.physics.optics.BeamParameter.q(self)
sympy.physics.optics.BeamParameter.radius(self)
sympy.physics.optics.BeamParameter.w(self)
sympy.physics.optics.BeamParameter.w_0(self)
sympy.physics.optics.BeamParameter.waist_approximation_limit(self)
sympy.physics.optics.CurvedMirror(cls,R)
sympy.physics.optics.CurvedRefraction(cls,R,n1,n2)
sympy.physics.optics.FlatMirror(cls)
sympy.physics.optics.FlatRefraction(cls,n1,n2)
sympy.physics.optics.FreeSpace(cls,d)
sympy.physics.optics.GeometricRay(cls,*args)
sympy.physics.optics.GeometricRay.angle(self)
sympy.physics.optics.GeometricRay.height(self)
sympy.physics.optics.RayTransferMatrix(cls,*args)
sympy.physics.optics.RayTransferMatrix.A(self)
sympy.physics.optics.RayTransferMatrix.B(self)
sympy.physics.optics.RayTransferMatrix.C(self)
sympy.physics.optics.RayTransferMatrix.D(self)
sympy.physics.optics.RayTransferMatrix.__mul__(self,other)
sympy.physics.optics.ThinLens(cls,f)
sympy.physics.optics.conjugate_gauss_beams(wavelen,waist_in,waist_out,**kwargs)
sympy.physics.optics.gaussian_conj(s_in,z_r_in,f)
sympy.physics.optics.gaussopt.BeamParameter(cls,wavelen,z,**kwargs)
sympy.physics.optics.gaussopt.BeamParameter.__new__(cls,wavelen,z,**kwargs)
sympy.physics.optics.gaussopt.BeamParameter.divergence(self)
sympy.physics.optics.gaussopt.BeamParameter.gouy(self)
sympy.physics.optics.gaussopt.BeamParameter.q(self)
sympy.physics.optics.gaussopt.BeamParameter.radius(self)
sympy.physics.optics.gaussopt.BeamParameter.w(self)
sympy.physics.optics.gaussopt.BeamParameter.w_0(self)
sympy.physics.optics.gaussopt.BeamParameter.waist_approximation_limit(self)
sympy.physics.optics.gaussopt.CurvedMirror(cls,R)
sympy.physics.optics.gaussopt.CurvedMirror.__new__(cls,R)
sympy.physics.optics.gaussopt.CurvedRefraction(cls,R,n1,n2)
sympy.physics.optics.gaussopt.CurvedRefraction.__new__(cls,R,n1,n2)
sympy.physics.optics.gaussopt.FlatMirror(cls)
sympy.physics.optics.gaussopt.FlatMirror.__new__(cls)
sympy.physics.optics.gaussopt.FlatRefraction(cls,n1,n2)
sympy.physics.optics.gaussopt.FlatRefraction.__new__(cls,n1,n2)
sympy.physics.optics.gaussopt.FreeSpace(cls,d)
sympy.physics.optics.gaussopt.FreeSpace.__new__(cls,d)
sympy.physics.optics.gaussopt.GeometricRay(cls,*args)
sympy.physics.optics.gaussopt.GeometricRay.__new__(cls,*args)
sympy.physics.optics.gaussopt.GeometricRay.angle(self)
sympy.physics.optics.gaussopt.GeometricRay.height(self)
sympy.physics.optics.gaussopt.RayTransferMatrix(cls,*args)
sympy.physics.optics.gaussopt.RayTransferMatrix.A(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.B(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.C(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.D(self)
sympy.physics.optics.gaussopt.RayTransferMatrix.__mul__(self,other)
sympy.physics.optics.gaussopt.RayTransferMatrix.__new__(cls,*args)
sympy.physics.optics.gaussopt.ThinLens(cls,f)
sympy.physics.optics.gaussopt.ThinLens.__new__(cls,f)
sympy.physics.optics.gaussopt.conjugate_gauss_beams(wavelen,waist_in,waist_out,**kwargs)
sympy.physics.optics.gaussopt.gaussian_conj(s_in,z_r_in,f)
sympy.physics.optics.gaussopt.geometric_conj_ab(a,b)
sympy.physics.optics.gaussopt.geometric_conj_af(a,f)
sympy.physics.optics.gaussopt.rayleigh2waist(z_r,wavelen)
sympy.physics.optics.gaussopt.waist2rayleigh(w,wavelen)
sympy.physics.optics.geometric_conj_ab(a,b)
sympy.physics.optics.geometric_conj_af(a,f)
sympy.physics.optics.rayleigh2waist(z_r,wavelen)
sympy.physics.optics.waist2rayleigh(w,wavelen)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/utils.py----------------------------------------
A:sympy.physics.optics.utils._incident->Matrix(incident.direction_ratio)
A:sympy.physics.optics.utils._normal->Matrix(_normal)
A:sympy.physics.optics.utils.intersection_pt->intersection(incident, normal)
A:sympy.physics.optics.utils.n1->sympify(medium1)
A:sympy.physics.optics.utils.n2->sympify(medium2)
A:sympy.physics.optics.utils.mag_incident->sqrt(sum([i ** 2 for i in _incident]))
A:sympy.physics.optics.utils.mag_normal->sqrt(sum([i ** 2 for i in _normal]))
A:sympy.physics.optics.utils.refracted->Matrix(refracted.direction_ratio)
A:sympy.physics.optics.utils.mag_refracted->sqrt(sum([i ** 2 for i in refracted]))
A:sympy.physics.optics.utils.i->acos(_incident.dot(_normal))
A:sympy.physics.optics.utils.r->acos(refracted.dot(_normal))
A:sympy.physics.optics.utils.n_lens->sympify(n_lens)
A:sympy.physics.optics.utils.n_surr->sympify(n_surr)
A:sympy.physics.optics.utils.r1->sympify(r1)
A:sympy.physics.optics.utils.r2->sympify(r2)
A:sympy.physics.optics.utils.focal_length->sympify(focal_length)
A:sympy.physics.optics.utils.u->sympify(u)
A:sympy.physics.optics.utils.v->sympify(v)
A:sympy.physics.optics.utils._u->Symbol('u')
A:sympy.physics.optics.utils._v->Symbol('v')
A:sympy.physics.optics.utils._f->Symbol('f')
sympy.physics.optics.deviation(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.lens_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.lens_makers_formula(n_lens,n_surr,r1,r2)
sympy.physics.optics.mirror_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.refraction_angle(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.utils.deviation(incident,medium1,medium2,normal=None,plane=None)
sympy.physics.optics.utils.lens_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.utils.lens_makers_formula(n_lens,n_surr,r1,r2)
sympy.physics.optics.utils.mirror_formula(focal_length=None,u=None,v=None)
sympy.physics.optics.utils.refraction_angle(incident,medium1,medium2,normal=None,plane=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/medium.py----------------------------------------
A:sympy.physics.optics.medium.obj->super(Medium, cls).__new__(cls, name)
A:sympy.physics.optics.medium.obj._permittivity->sympify(permittivity)
A:sympy.physics.optics.medium.obj._permeability->sympify(permeability)
A:sympy.physics.optics.medium.obj._n->sympify(n)
sympy.physics.optics.Medium(cls,name,permittivity=None,permeability=None,n=None)
sympy.physics.optics.Medium.__eq__(self,other)
sympy.physics.optics.Medium.__gt__(self,other)
sympy.physics.optics.Medium.__lt__(self,other)
sympy.physics.optics.Medium.__ne__(self,other)
sympy.physics.optics.Medium.__str__(self)
sympy.physics.optics.Medium.intrinsic_impedance(self)
sympy.physics.optics.Medium.permeability(self)
sympy.physics.optics.Medium.permittivity(self)
sympy.physics.optics.Medium.refractive_index(self)
sympy.physics.optics.Medium.speed(self)
sympy.physics.optics.medium.Medium(cls,name,permittivity=None,permeability=None,n=None)
sympy.physics.optics.medium.Medium.__eq__(self,other)
sympy.physics.optics.medium.Medium.__gt__(self,other)
sympy.physics.optics.medium.Medium.__lt__(self,other)
sympy.physics.optics.medium.Medium.__ne__(self,other)
sympy.physics.optics.medium.Medium.__new__(cls,name,permittivity=None,permeability=None,n=None)
sympy.physics.optics.medium.Medium.__str__(self)
sympy.physics.optics.medium.Medium.intrinsic_impedance(self)
sympy.physics.optics.medium.Medium.permeability(self)
sympy.physics.optics.medium.Medium.permittivity(self)
sympy.physics.optics.medium.Medium.refractive_index(self)
sympy.physics.optics.medium.Medium.speed(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/waves.py----------------------------------------
A:sympy.physics.optics.waves.frequency->sympify(frequency)
A:sympy.physics.optics.waves.amplitude->sympify(amplitude)
A:sympy.physics.optics.waves.phase->sympify(phase)
A:sympy.physics.optics.waves.time_period->sympify(time_period)
A:sympy.physics.optics.waves.n->sympify(n)
A:sympy.physics.optics.waves.(mu, epsilon, x, t)->symbols('mu, epsilon, x, t')
A:sympy.physics.optics.waves.E->Function('E')
sympy.physics.optics.TWave(self,amplitude,frequency=None,phase=S.Zero,time_period=None,n=Symbol('n'))
sympy.physics.optics.TWave.__add__(self,other)
sympy.physics.optics.TWave.__str__(self)
sympy.physics.optics.TWave._eval_rewrite_as_cos(self,*args)
sympy.physics.optics.TWave._eval_rewrite_as_exp(self,*args)
sympy.physics.optics.TWave._eval_rewrite_as_pde(self,*args)
sympy.physics.optics.TWave._eval_rewrite_as_sin(self,*args)
sympy.physics.optics.TWave.amplitude(self)
sympy.physics.optics.TWave.angular_velocity(self)
sympy.physics.optics.TWave.frequency(self)
sympy.physics.optics.TWave.phase(self)
sympy.physics.optics.TWave.speed(self)
sympy.physics.optics.TWave.time_period(self)
sympy.physics.optics.TWave.wavelength(self)
sympy.physics.optics.TWave.wavenumber(self)
sympy.physics.optics.waves.TWave(self,amplitude,frequency=None,phase=S.Zero,time_period=None,n=Symbol('n'))
sympy.physics.optics.waves.TWave.__add__(self,other)
sympy.physics.optics.waves.TWave.__init__(self,amplitude,frequency=None,phase=S.Zero,time_period=None,n=Symbol('n'))
sympy.physics.optics.waves.TWave.__str__(self)
sympy.physics.optics.waves.TWave._eval_rewrite_as_cos(self,*args)
sympy.physics.optics.waves.TWave._eval_rewrite_as_exp(self,*args)
sympy.physics.optics.waves.TWave._eval_rewrite_as_pde(self,*args)
sympy.physics.optics.waves.TWave._eval_rewrite_as_sin(self,*args)
sympy.physics.optics.waves.TWave.amplitude(self)
sympy.physics.optics.waves.TWave.angular_velocity(self)
sympy.physics.optics.waves.TWave.frequency(self)
sympy.physics.optics.waves.TWave.phase(self)
sympy.physics.optics.waves.TWave.speed(self)
sympy.physics.optics.waves.TWave.time_period(self)
sympy.physics.optics.waves.TWave.wavelength(self)
sympy.physics.optics.waves.TWave.wavenumber(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/tests/test_waves.py----------------------------------------
A:sympy.physics.optics.tests.test_waves.(A1, phi1, A2, phi2, f)->symbols('A1, phi1, A2, phi2, f')
A:sympy.physics.optics.tests.test_waves.n->Symbol('n')
A:sympy.physics.optics.tests.test_waves.t->Symbol('t')
A:sympy.physics.optics.tests.test_waves.x->Symbol('x')
A:sympy.physics.optics.tests.test_waves.k->Symbol('k')
A:sympy.physics.optics.tests.test_waves.E->Function('E')
A:sympy.physics.optics.tests.test_waves.w1->TWave(A1, f, phi1)
A:sympy.physics.optics.tests.test_waves.w2->TWave(A2, f, phi2)
sympy.physics.optics.tests.test_waves.test_twave()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/tests/test_medium.py----------------------------------------
A:sympy.physics.optics.tests.test_medium.m1->Medium('m1')
A:sympy.physics.optics.tests.test_medium.m2->Medium('m2', epsilon, mu)
A:sympy.physics.optics.tests.test_medium.m3->Medium('m3', 9.0 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), 1.45 * 10 ** (-6) * kg * m / (A ** 2 * s ** 2))
A:sympy.physics.optics.tests.test_medium.m4->Medium('m4', 7.0 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), 1.15 * 10 ** (-6) * kg * m / (A ** 2 * s ** 2))
A:sympy.physics.optics.tests.test_medium.m5->Medium('m5', permittivity=710 * 10 ** (-12) * s ** 4 * A ** 2 / (m ** 3 * kg), n=1.33)
sympy.physics.optics.tests.test_medium.test_medium()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/tests/test_utils.py----------------------------------------
A:sympy.physics.optics.tests.test_utils.(n1, n2)->symbols('n1, n2')
A:sympy.physics.optics.tests.test_utils.m1->Medium('m1', permittivity=e0, n=1)
A:sympy.physics.optics.tests.test_utils.m2->Medium('m2', permittivity=e0, n=1.33)
A:sympy.physics.optics.tests.test_utils.r1->Ray3D(Point3D(-1, -1, 1), Point3D(0, 0, 0))
A:sympy.physics.optics.tests.test_utils.i->Matrix([-1, -1, -1])
A:sympy.physics.optics.tests.test_utils.n->Matrix([0, 0, 1])
A:sympy.physics.optics.tests.test_utils.normal_ray->Ray3D(Point3D(0, 0, 0), Point3D(0, 0, 1))
A:sympy.physics.optics.tests.test_utils.P->Plane(Point3D(0, 0, 0), normal_vector=[0, 0, 1])
A:sympy.physics.optics.tests.test_utils.(u, v, f)->symbols('u, v, f')
sympy.physics.optics.tests.test_utils.test_deviation()
sympy.physics.optics.tests.test_utils.test_lens_formula()
sympy.physics.optics.tests.test_utils.test_lens_makers_formula()
sympy.physics.optics.tests.test_utils.test_mirror_formula()
sympy.physics.optics.tests.test_utils.test_refraction_angle()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/physics/optics/tests/test_gaussopt.py----------------------------------------
A:sympy.physics.optics.tests.test_gaussopt.mat->RayTransferMatrix(1, 2, 3, 4)
A:sympy.physics.optics.tests.test_gaussopt.(d, f, h, n1, n2, R)->symbols('d f h n1 n2 R')
A:sympy.physics.optics.tests.test_gaussopt.lens->ThinLens(f)
A:sympy.physics.optics.tests.test_gaussopt.angle->symbols('angle')
A:sympy.physics.optics.tests.test_gaussopt.p->BeamParameter(l, z, w=w)
A:sympy.physics.optics.tests.test_gaussopt.fs->FreeSpace(10)
A:sympy.physics.optics.tests.test_gaussopt.(w, wavelen)->symbols('w wavelen')
A:sympy.physics.optics.tests.test_gaussopt.(z_r, wavelen)->symbols('z_r wavelen')
A:sympy.physics.optics.tests.test_gaussopt.(a, b, f)->symbols('a b f')
A:sympy.physics.optics.tests.test_gaussopt.(s_in, z_r_in, f)->symbols('s_in z_r_in f')
A:sympy.physics.optics.tests.test_gaussopt.(l, w_i, w_o, f)->symbols('l w_i w_o f')
A:sympy.physics.optics.tests.test_gaussopt.(z, l, w)->symbols('z l r', positive=True)
sympy.physics.optics.tests.test_gaussopt.streq(a,b)
sympy.physics.optics.tests.test_gaussopt.test_gauss_opt()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/permutations.py----------------------------------------
A:sympy.combinatorics.permutations.m->zeros(self.size)
A:sympy.combinatorics.permutations.p0->_af_rmuln(*a[:m // 2])
A:sympy.combinatorics.permutations.p1->_af_rmuln(*a[m // 2:])
A:sympy.combinatorics.permutations.n->len(pi)
A:sympy.combinatorics.permutations.b->list(range(len(a)))
A:sympy.combinatorics.permutations.rv->defaultdict(int)
A:sympy.combinatorics.permutations.big->max([i for i in self.keys() if self[i] != i])
A:sympy.combinatorics.permutations.size->len(inversion)
A:sympy.combinatorics.permutations.s->''.join((str(tuple(c)) for c in cycles))
A:sympy.combinatorics.permutations.args->list(args[0])
A:sympy.combinatorics.permutations.temp->set(temp)
A:sympy.combinatorics.permutations.c->c(*ci)
A:sympy.combinatorics.permutations.aform->list(args)
A:sympy.combinatorics.permutations.obj->sympy.core.Basic.__new__(cls, aform)
A:sympy.combinatorics.permutations.p->sympy.core.Basic.__new__(Perm, perm)
A:sympy.combinatorics.permutations.p._size->len(perm)
A:sympy.combinatorics.permutations.a->_af_invert(self._array_form)
A:sympy.combinatorics.permutations.nx->len(x)
A:sympy.combinatorics.permutations.ic->list(zip(i, list(range(len(i)))))
A:sympy.combinatorics.permutations.id_perm->list(range(n))
A:sympy.combinatorics.permutations.r->self.rank_nonlex()
A:sympy.combinatorics.permutations.psize->int(ifac(n))
A:sympy.combinatorics.permutations.min->len(a)
A:sympy.combinatorics.permutations.d->rho.index(m)
A:sympy.combinatorics.permutations.par->_af_parity(rho[:m])
A:sympy.combinatorics.permutations.self_prec_mat->self.get_precedence_matrix()
A:sympy.combinatorics.permutations.other_prec_mat->other.get_precedence_matrix()
A:sympy.combinatorics.permutations.self_adj_mat->self.get_adjacency_matrix()
A:sympy.combinatorics.permutations.other_adj_mat->other.get_adjacency_matrix()
A:sympy.combinatorics.permutations.Q->deque(list(range(n)))
A:sympy.combinatorics.permutations.N->list(range(size + 1))
A:sympy.combinatorics.permutations.perm_array->list(range(n))
sympy.combinatorics.Cycle(self,*args)
sympy.combinatorics.Cycle.__iter__(self)
sympy.combinatorics.Cycle.__missing__(self,arg)
sympy.combinatorics.Cycle.__repr__(self)
sympy.combinatorics.Cycle.copy(self)
sympy.combinatorics.Cycle.list(self,size=None)
sympy.combinatorics.Cycle.size(self)
sympy.combinatorics.Permutation(cls,*args,**kwargs)
sympy.combinatorics.Permutation.__add__(self,other)
sympy.combinatorics.Permutation.__invert__(self)
sympy.combinatorics.Permutation.__iter__(self)
sympy.combinatorics.Permutation.__mul__(self,other)
sympy.combinatorics.Permutation.__pow__(self,n)
sympy.combinatorics.Permutation.__rmul__(self,other)
sympy.combinatorics.Permutation.__rxor__(self,i)
sympy.combinatorics.Permutation.__sub__(self,other)
sympy.combinatorics.Permutation.__xor__(self,h)
sympy.combinatorics.Permutation._af_new(perm)
sympy.combinatorics.Permutation._hashable_content(self)
sympy.combinatorics.Permutation.array_form(self)
sympy.combinatorics.Permutation.ascents(self)
sympy.combinatorics.Permutation.atoms(self)
sympy.combinatorics.Permutation.cardinality(self)
sympy.combinatorics.Permutation.commutator(self,x)
sympy.combinatorics.Permutation.commutes_with(self,other)
sympy.combinatorics.Permutation.cycle_structure(self)
sympy.combinatorics.Permutation.cycles(self)
sympy.combinatorics.Permutation.cyclic_form(self)
sympy.combinatorics.Permutation.descents(self)
sympy.combinatorics.Permutation.from_inversion_vector(self,inversion)
sympy.combinatorics.Permutation.from_sequence(self,i,key=None)
sympy.combinatorics.Permutation.full_cyclic_form(self)
sympy.combinatorics.Permutation.get_adjacency_distance(self,other)
sympy.combinatorics.Permutation.get_adjacency_matrix(self)
sympy.combinatorics.Permutation.get_positional_distance(self,other)
sympy.combinatorics.Permutation.get_precedence_distance(self,other)
sympy.combinatorics.Permutation.get_precedence_matrix(self)
sympy.combinatorics.Permutation.index(self)
sympy.combinatorics.Permutation.inversion_vector(self)
sympy.combinatorics.Permutation.inversions(self)
sympy.combinatorics.Permutation.is_Empty(self)
sympy.combinatorics.Permutation.is_Identity(self)
sympy.combinatorics.Permutation.is_Singleton(self)
sympy.combinatorics.Permutation.is_even(self)
sympy.combinatorics.Permutation.is_odd(self)
sympy.combinatorics.Permutation.josephus(self,m,n,s=1)
sympy.combinatorics.Permutation.length(self)
sympy.combinatorics.Permutation.list(self,size=None)
sympy.combinatorics.Permutation.max(self)
sympy.combinatorics.Permutation.min(self)
sympy.combinatorics.Permutation.mul_inv(self,other)
sympy.combinatorics.Permutation.next_lex(self)
sympy.combinatorics.Permutation.next_nonlex(self)
sympy.combinatorics.Permutation.next_trotterjohnson(self)
sympy.combinatorics.Permutation.order(self)
sympy.combinatorics.Permutation.parity(self)
sympy.combinatorics.Permutation.random(self,n)
sympy.combinatorics.Permutation.rank(self)
sympy.combinatorics.Permutation.rank_nonlex(self,inv_perm=None)
sympy.combinatorics.Permutation.rank_trotterjohnson(self)
sympy.combinatorics.Permutation.rmul(*args)
sympy.combinatorics.Permutation.rmul_with_af(*args)
sympy.combinatorics.Permutation.runs(self)
sympy.combinatorics.Permutation.signature(self)
sympy.combinatorics.Permutation.size(self)
sympy.combinatorics.Permutation.support(self)
sympy.combinatorics.Permutation.transpositions(self)
sympy.combinatorics.Permutation.unrank_lex(self,size,rank)
sympy.combinatorics.Permutation.unrank_nonlex(self,n,r)
sympy.combinatorics.Permutation.unrank_trotterjohnson(self,size,rank)
sympy.combinatorics.permutations.Cycle(self,*args)
sympy.combinatorics.permutations.Cycle.__init__(self,*args)
sympy.combinatorics.permutations.Cycle.__iter__(self)
sympy.combinatorics.permutations.Cycle.__missing__(self,arg)
sympy.combinatorics.permutations.Cycle.__repr__(self)
sympy.combinatorics.permutations.Cycle.copy(self)
sympy.combinatorics.permutations.Cycle.list(self,size=None)
sympy.combinatorics.permutations.Cycle.size(self)
sympy.combinatorics.permutations.Permutation(cls,*args,**kwargs)
sympy.combinatorics.permutations.Permutation.__add__(self,other)
sympy.combinatorics.permutations.Permutation.__invert__(self)
sympy.combinatorics.permutations.Permutation.__iter__(self)
sympy.combinatorics.permutations.Permutation.__mul__(self,other)
sympy.combinatorics.permutations.Permutation.__new__(cls,*args,**kwargs)
sympy.combinatorics.permutations.Permutation.__pow__(self,n)
sympy.combinatorics.permutations.Permutation.__rmul__(self,other)
sympy.combinatorics.permutations.Permutation.__rxor__(self,i)
sympy.combinatorics.permutations.Permutation.__sub__(self,other)
sympy.combinatorics.permutations.Permutation.__xor__(self,h)
sympy.combinatorics.permutations.Permutation._af_new(perm)
sympy.combinatorics.permutations.Permutation._hashable_content(self)
sympy.combinatorics.permutations.Permutation.array_form(self)
sympy.combinatorics.permutations.Permutation.ascents(self)
sympy.combinatorics.permutations.Permutation.atoms(self)
sympy.combinatorics.permutations.Permutation.cardinality(self)
sympy.combinatorics.permutations.Permutation.commutator(self,x)
sympy.combinatorics.permutations.Permutation.commutes_with(self,other)
sympy.combinatorics.permutations.Permutation.cycle_structure(self)
sympy.combinatorics.permutations.Permutation.cycles(self)
sympy.combinatorics.permutations.Permutation.cyclic_form(self)
sympy.combinatorics.permutations.Permutation.descents(self)
sympy.combinatorics.permutations.Permutation.from_inversion_vector(self,inversion)
sympy.combinatorics.permutations.Permutation.from_sequence(self,i,key=None)
sympy.combinatorics.permutations.Permutation.full_cyclic_form(self)
sympy.combinatorics.permutations.Permutation.get_adjacency_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_adjacency_matrix(self)
sympy.combinatorics.permutations.Permutation.get_positional_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_precedence_distance(self,other)
sympy.combinatorics.permutations.Permutation.get_precedence_matrix(self)
sympy.combinatorics.permutations.Permutation.index(self)
sympy.combinatorics.permutations.Permutation.inversion_vector(self)
sympy.combinatorics.permutations.Permutation.inversions(self)
sympy.combinatorics.permutations.Permutation.is_Empty(self)
sympy.combinatorics.permutations.Permutation.is_Identity(self)
sympy.combinatorics.permutations.Permutation.is_Singleton(self)
sympy.combinatorics.permutations.Permutation.is_even(self)
sympy.combinatorics.permutations.Permutation.is_odd(self)
sympy.combinatorics.permutations.Permutation.josephus(self,m,n,s=1)
sympy.combinatorics.permutations.Permutation.length(self)
sympy.combinatorics.permutations.Permutation.list(self,size=None)
sympy.combinatorics.permutations.Permutation.max(self)
sympy.combinatorics.permutations.Permutation.min(self)
sympy.combinatorics.permutations.Permutation.mul_inv(self,other)
sympy.combinatorics.permutations.Permutation.next_lex(self)
sympy.combinatorics.permutations.Permutation.next_nonlex(self)
sympy.combinatorics.permutations.Permutation.next_trotterjohnson(self)
sympy.combinatorics.permutations.Permutation.order(self)
sympy.combinatorics.permutations.Permutation.parity(self)
sympy.combinatorics.permutations.Permutation.random(self,n)
sympy.combinatorics.permutations.Permutation.rank(self)
sympy.combinatorics.permutations.Permutation.rank_nonlex(self,inv_perm=None)
sympy.combinatorics.permutations.Permutation.rank_trotterjohnson(self)
sympy.combinatorics.permutations.Permutation.rmul(*args)
sympy.combinatorics.permutations.Permutation.rmul_with_af(*args)
sympy.combinatorics.permutations.Permutation.runs(self)
sympy.combinatorics.permutations.Permutation.signature(self)
sympy.combinatorics.permutations.Permutation.size(self)
sympy.combinatorics.permutations.Permutation.support(self)
sympy.combinatorics.permutations.Permutation.transpositions(self)
sympy.combinatorics.permutations.Permutation.unrank_lex(self,size,rank)
sympy.combinatorics.permutations.Permutation.unrank_nonlex(self,n,r)
sympy.combinatorics.permutations.Permutation.unrank_trotterjohnson(self,size,rank)
sympy.combinatorics.permutations._af_commutes_with(a,b)
sympy.combinatorics.permutations._af_invert(a)
sympy.combinatorics.permutations._af_parity(pi)
sympy.combinatorics.permutations._af_pow(a,n)
sympy.combinatorics.permutations._af_rmul(a,b)
sympy.combinatorics.permutations._af_rmuln(*abc)
sympy.combinatorics.permutations._merge(arr,temp,left,mid,right)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/testutil.py----------------------------------------
A:sympy.combinatorics.testutil.elements->list(self.generate_dimino(af=True))
A:sympy.combinatorics.testutil.strong_gens_distr->_distribute_gens_by_base(base, gens)
A:sympy.combinatorics.testutil.candidate->PermutationGroup(strong_gens_distr[i])
A:sympy.combinatorics.testutil.current_stabilizer->current_stabilizer.stabilizer(base[i]).stabilizer(base[i])
A:sympy.combinatorics.testutil.centr->group.centralizer(arg)
A:sympy.combinatorics.testutil.centr_list->list(centr.generate_dimino(af=True))
A:sympy.combinatorics.testutil.centr_list_naive->_naive_list_centralizer(group, arg, af=True)
A:sympy.combinatorics.testutil.closure->group.normal_closure(arg)
A:sympy.combinatorics.testutil.conjugates->set()
A:sympy.combinatorics.testutil.naive_closure->PermutationGroup(list(conjugates))
A:sympy.combinatorics.testutil.(size, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.testutil.dgens->dummy_sgs(dummies, sym, size - 2)
A:sympy.combinatorics.testutil.num_types->len(sym)
A:sympy.combinatorics.testutil.S->PermutationGroup(sgens)
A:sympy.combinatorics.testutil.D->PermutationGroup([Permutation(x) for x in dgens])
A:sympy.combinatorics.testutil.dlist->list(D.generate(af=True))
A:sympy.combinatorics.testutil.st->set()
A:sympy.combinatorics.testutil.h->_af_rmul(g, s)
A:sympy.combinatorics.testutil.q->tuple(_af_rmul(d, h))
A:sympy.combinatorics.testutil.a->list(st)
A:sympy.combinatorics.testutil.items->list(gr.items())
A:sympy.combinatorics.testutil.pvert->_af_invert(pvert)
A:sympy.combinatorics.testutil.g->Permutation(g)
A:sympy.combinatorics.testutil.(base, gens)->get_symmetric_group_sgs(i)
A:sympy.combinatorics.testutil.dummies->list(range(num_indices))
A:sympy.combinatorics.testutil.can->canonicalize(g, dummies, 0, *v)
sympy.combinatorics.testutil._cmp_perm_lists(first,second)
sympy.combinatorics.testutil._naive_list_centralizer(self,other,af=False)
sympy.combinatorics.testutil._verify_bsgs(group,base,gens)
sympy.combinatorics.testutil._verify_centralizer(group,arg,centr=None)
sympy.combinatorics.testutil._verify_normal_closure(group,arg,closure=None)
sympy.combinatorics.testutil.canonicalize_naive(g,dummies,sym,*v)
sympy.combinatorics.testutil.graph_certificate(gr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/perm_groups.py----------------------------------------
A:sympy.combinatorics.perm_groups.args->list(uniq([_af_new(list(a)) for a in args]))
A:sympy.combinatorics.perm_groups.degree->max((a.size for a in args))
A:sympy.combinatorics.perm_groups.args[i]->Permutation(args[i], size=degree)
A:sympy.combinatorics.perm_groups.obj->sympy.core.Basic.__new__(cls, *args, **kwargs)
A:sympy.combinatorics.perm_groups.obj._r->len(obj._generators)
A:sympy.combinatorics.perm_groups.start->list(range(n1))
A:sympy.combinatorics.perm_groups.end->list(range(n1, n1 + n2))
A:sympy.combinatorics.perm_groups.k->len(points)
A:sympy.combinatorics.perm_groups.acc->list(range(deg))
A:sympy.combinatorics.perm_groups.rep_first->self._union_find_rep(first, parents)
A:sympy.combinatorics.perm_groups.rep_second->self._union_find_rep(second, parents)
A:sympy.combinatorics.perm_groups.(transversals, basic_orbits, strong_gens_distr)->_handle_precomputed_bsgs(base, strong_gens, transversals, basic_orbits, strong_gens_distr)
A:sympy.combinatorics.perm_groups.base_len->len(base)
A:sympy.combinatorics.perm_groups.stab_pos->PermutationGroup(strong_gens_distr[pos])
A:sympy.combinatorics.perm_groups.schreier_vector->self.schreier_vector(alpha)
A:sympy.combinatorics.perm_groups.new->PermutationGroup(strong_gens_distr[pos]).random_stab(base[pos + 1], schreier_vector=schreier_vector)
A:sympy.combinatorics.perm_groups.Gamma->set(basic_orbits[pos])
A:sympy.combinatorics.perm_groups.gamma->computed_words[l - 1]._array_form.index(sorted_orbits[l][c[l]])
A:sympy.combinatorics.perm_groups.temp->frozenset([gen[x] for x in b])
A:sympy.combinatorics.perm_groups.el->rmul(x, y)
A:sympy.combinatorics.perm_groups.strong_gens_new->_strong_gens_from_distr(strong_gens_new_distr)
A:sympy.combinatorics.perm_groups.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.perm_groups.identity->_af_new(list(range(degree)))
A:sympy.combinatorics.perm_groups.orbits->_orbits(degree, new_stab_gens)
A:sympy.combinatorics.perm_groups.num_orbits->len(orbits)
A:sympy.combinatorics.perm_groups.orbit->list(orbits[i])
A:sympy.combinatorics.perm_groups.orbit_reps_indices[i]->len(long_base)
A:sympy.combinatorics.perm_groups.(base, strong_gens)->self.schreier_sims_incremental()
A:sympy.combinatorics.perm_groups.num_rel_orbits->len(rel_orbits)
A:sympy.combinatorics.perm_groups.transversals[j]->dict(other.orbit_transversal(rep, pairs=True))
A:sympy.combinatorics.perm_groups.gens->_stabilizer(degree, gens, x)
A:sympy.combinatorics.perm_groups.commutator->rmul(hgen, ggen, ~hgen, ~ggen)
A:sympy.combinatorics.perm_groups.res->_strip(conj, base, basic_orbits, basic_transversals)
A:sympy.combinatorics.perm_groups.g->_random_prec['g'].pop()
A:sympy.combinatorics.perm_groups.I->set(sorted_I)
A:sympy.combinatorics.perm_groups.h->_af_new(h)
A:sympy.combinatorics.perm_groups.factors->self.coset_factor(g, True)
A:sympy.combinatorics.perm_groups.j->basic_orbits[i].index(k)
A:sympy.combinatorics.perm_groups.m->len(self)
A:sympy.combinatorics.perm_groups.(rank, c)->divmod(rank, len(transversals[i]))
A:sympy.combinatorics.perm_groups.next->self.commutator(self, current)
A:sympy.combinatorics.perm_groups.set_commutators->set()
A:sympy.combinatorics.perm_groups.rng->list(range(degree))
A:sympy.combinatorics.perm_groups.c->list(range(degree))
A:sympy.combinatorics.perm_groups.ct->tuple(c)
A:sympy.combinatorics.perm_groups.G2->self.normal_closure(cms)
A:sympy.combinatorics.perm_groups.idn->list(range(self.degree))
A:sympy.combinatorics.perm_groups.set_element_list->set([tuple(idn)])
A:sympy.combinatorics.perm_groups.ag->_af_rmul(a, g)
A:sympy.combinatorics.perm_groups.ap->_af_rmul(d, ag)
A:sympy.combinatorics.perm_groups.p->_af_rmuln(g1, g2, _af_invert(g1))
A:sympy.combinatorics.perm_groups.self._order->factorial(n)
A:sympy.combinatorics.perm_groups.u->list(reversed(u))
A:sympy.combinatorics.perm_groups.p1->_af_new(p)
A:sympy.combinatorics.perm_groups.N_eps->int(-log(eps) / d_n)
A:sympy.combinatorics.perm_groups.perm->self.random_pr()
A:sympy.combinatorics.perm_groups.lcs->self.lower_central_series()
A:sympy.combinatorics.perm_groups.v->self.schreier_vector(0)
A:sympy.combinatorics.perm_groups.stab->self.stabilizer(0)
A:sympy.combinatorics.perm_groups.x->choice([1, 2])
A:sympy.combinatorics.perm_groups.ds->self.derived_series()
A:sympy.combinatorics.perm_groups.parents->list(range(n))
A:sympy.combinatorics.perm_groups.delta->self._union_find_rep(temp, parents)
A:sympy.combinatorics.perm_groups.Z->PermutationGroup(gens)
A:sympy.combinatorics.perm_groups.(basic_orbits, basic_transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.perm_groups.(temp_base, temp_strong_gens)->PermutationGroup(gens).schreier_sims_incremental(base, strong_gens)
A:sympy.combinatorics.perm_groups.beta->rand(alpha)
A:sympy.combinatorics.perm_groups.stab_gens->_af_new(list(range(degree)))
A:sympy.combinatorics.perm_groups.n->int(n)
A:sympy.combinatorics.perm_groups.randrange->_randrange(seed)
A:sympy.combinatorics.perm_groups.result->rmul(result, p)
A:sympy.combinatorics.perm_groups.rank->randrange(self.order())
A:sympy.combinatorics.perm_groups.s->randrange(r)
A:sympy.combinatorics.perm_groups.t->randrange(r - 1)
A:sympy.combinatorics.perm_groups.e->choice([-1, 1])
A:sympy.combinatorics.perm_groups.random_gens[s]->_af_rmul(_af_pow(random_gens[t], e), random_gens[s])
A:sympy.combinatorics.perm_groups.random_gens[r]->_af_rmul(random_gens[s], random_gens[r])
A:sympy.combinatorics.perm_groups.rand->self.random_pr()
A:sympy.combinatorics.perm_groups.(basic_orbits, transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.perm_groups.id_af->list(range(degree))
A:sympy.combinatorics.perm_groups.transversals[i]->dict(_orbit_transversal(n, strong_gens_distr[i], base[i], pairs=True))
A:sympy.combinatorics.perm_groups.orbs[i]->list(transversals[i].keys())
A:sympy.combinatorics.perm_groups.g1->_af_rmul(gen._array_form, u_beta)
A:sympy.combinatorics.perm_groups.u1_invdb[gb]->_af_invert(u1)
A:sympy.combinatorics.perm_groups.schreier_gen->_af_rmuln(table_inv[temp], gen, table[b])
A:sympy.combinatorics.perm_groups.(h, j)->_strip(g, base, orbs, transversals)
A:sympy.combinatorics.perm_groups.transversals[l]->dict(_orbit_transversal(n, strong_gens_distr[l], base[l], pairs=True))
A:sympy.combinatorics.perm_groups.orbs[l]->list(transversals[l].keys())
A:sympy.combinatorics.perm_groups.strong_gens->list(uniq((i for gens in strong_gens_distr for i in gens)))
A:sympy.combinatorics.perm_groups.r->len(gens)
A:sympy.combinatorics.perm_groups.base_ordering->_base_ordering(base, degree)
A:sympy.combinatorics.perm_groups.init_subgroup->PermutationGroup([identity])
A:sympy.combinatorics.perm_groups.(res_base, res_strong_gens)->_strip(conj, base, basic_orbits, basic_transversals).schreier_sims_incremental(base=res_base)
A:sympy.combinatorics.perm_groups.res_strong_gens_distr->_distribute_gens_by_base(res_base, res_strong_gens)
A:sympy.combinatorics.perm_groups.orbit_reps[f]->get_reps(temp_orbits)
A:sympy.combinatorics.perm_groups.new_point->computed_words[l](base[l])
A:sympy.combinatorics.perm_groups.new_stab_gens->_stabilizer(degree, res_strong_gens_distr[l], new_point)
A:sympy.combinatorics.perm_groups.orbit_reps[l + 1]->get_reps(orbits)
A:sympy.combinatorics.perm_groups.candidate->computed_words[i](base[i])
A:sympy.combinatorics.perm_groups.computed_words[l]->rmul(computed_words[l - 1], u[l])
A:sympy.combinatorics.perm_groups.temp_point->g(base[l])
A:sympy.combinatorics.perm_groups.temp_orbits->_orbits(degree, res_strong_gens_distr[f])
A:sympy.combinatorics.perm_groups.orb->_orbit(degree, generators, i)
A:sympy.combinatorics.perm_groups.G->G.stabilizer(i).stabilizer(i)
A:sympy.combinatorics.perm_groups.alpha->frozenset(alpha)
A:sympy.combinatorics.perm_groups.used->set([alpha])
A:sympy.combinatorics.perm_groups.seen->set()
A:sympy.combinatorics.perm_groups.sorted_I->list(range(degree))
A:sympy.combinatorics.perm_groups.gen_temp->_af_rmul(gen, table[b])
A:sympy.combinatorics.perm_groups.table_inv[temp]->_af_invert(gen_temp)
sympy.combinatorics.PermutationGroup(cls,*args,**kwargs)
sympy.combinatorics.PermutationGroup.__eq__(self,other)
sympy.combinatorics.PermutationGroup.__getitem__(self,i)
sympy.combinatorics.PermutationGroup.__hash__(self)
sympy.combinatorics.PermutationGroup.__len__(self)
sympy.combinatorics.PermutationGroup.__mul__(self,other)
sympy.combinatorics.PermutationGroup._random_pr_init(self,r,n,_random_prec_n=None)
sympy.combinatorics.PermutationGroup._union_find_merge(self,first,second,ranks,parents,not_rep)
sympy.combinatorics.PermutationGroup._union_find_rep(self,num,parents)
sympy.combinatorics.PermutationGroup.base(self)
sympy.combinatorics.PermutationGroup.baseswap(self,base,strong_gens,pos,randomized=False,transversals=None,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.PermutationGroup.basic_orbits(self)
sympy.combinatorics.PermutationGroup.basic_stabilizers(self)
sympy.combinatorics.PermutationGroup.basic_transversals(self)
sympy.combinatorics.PermutationGroup.center(self)
sympy.combinatorics.PermutationGroup.centralizer(self,other)
sympy.combinatorics.PermutationGroup.commutator(self,G,H)
sympy.combinatorics.PermutationGroup.contains(self,g,strict=True)
sympy.combinatorics.PermutationGroup.coset_factor(self,g,factor_index=False)
sympy.combinatorics.PermutationGroup.coset_rank(self,g)
sympy.combinatorics.PermutationGroup.coset_unrank(self,rank,af=False)
sympy.combinatorics.PermutationGroup.degree(self)
sympy.combinatorics.PermutationGroup.derived_series(self)
sympy.combinatorics.PermutationGroup.derived_subgroup(self)
sympy.combinatorics.PermutationGroup.generate(self,method='coset',af=False)
sympy.combinatorics.PermutationGroup.generate_dimino(self,af=False)
sympy.combinatorics.PermutationGroup.generate_schreier_sims(self,af=False)
sympy.combinatorics.PermutationGroup.generators(self)
sympy.combinatorics.PermutationGroup.is_abelian(self)
sympy.combinatorics.PermutationGroup.is_alt_sym(self,eps=0.05,_random_prec=None)
sympy.combinatorics.PermutationGroup.is_group(self)
sympy.combinatorics.PermutationGroup.is_nilpotent(self)
sympy.combinatorics.PermutationGroup.is_normal(self,gr)
sympy.combinatorics.PermutationGroup.is_primitive(self,randomized=True)
sympy.combinatorics.PermutationGroup.is_solvable(self)
sympy.combinatorics.PermutationGroup.is_subgroup(self,G,strict=True)
sympy.combinatorics.PermutationGroup.is_transitive(self,strict=True)
sympy.combinatorics.PermutationGroup.is_trivial(self)
sympy.combinatorics.PermutationGroup.lower_central_series(self)
sympy.combinatorics.PermutationGroup.make_perm(self,n,seed=None)
sympy.combinatorics.PermutationGroup.max_div(self)
sympy.combinatorics.PermutationGroup.minimal_block(self,points)
sympy.combinatorics.PermutationGroup.normal_closure(self,other,k=10)
sympy.combinatorics.PermutationGroup.orbit(self,alpha,action='tuples')
sympy.combinatorics.PermutationGroup.orbit_rep(self,alpha,beta,schreier_vector=None)
sympy.combinatorics.PermutationGroup.orbit_transversal(self,alpha,pairs=False)
sympy.combinatorics.PermutationGroup.orbits(self,rep=False)
sympy.combinatorics.PermutationGroup.order(self)
sympy.combinatorics.PermutationGroup.pointwise_stabilizer(self,points,incremental=True)
sympy.combinatorics.PermutationGroup.random(self,af=False)
sympy.combinatorics.PermutationGroup.random_pr(self,gen_count=11,iterations=50,_random_prec=None)
sympy.combinatorics.PermutationGroup.random_stab(self,alpha,schreier_vector=None,_random_prec=None)
sympy.combinatorics.PermutationGroup.schreier_sims(self)
sympy.combinatorics.PermutationGroup.schreier_sims_incremental(self,base=None,gens=None)
sympy.combinatorics.PermutationGroup.schreier_sims_random(self,base=None,gens=None,consec_succ=10,_random_prec=None)
sympy.combinatorics.PermutationGroup.schreier_vector(self,alpha)
sympy.combinatorics.PermutationGroup.stabilizer(self,alpha)
sympy.combinatorics.PermutationGroup.strong_gens(self)
sympy.combinatorics.PermutationGroup.subgroup_search(self,prop,base=None,strong_gens=None,tests=None,init_subgroup=None)
sympy.combinatorics.PermutationGroup.transitivity_degree(self)
sympy.combinatorics.perm_groups.PermutationGroup(cls,*args,**kwargs)
sympy.combinatorics.perm_groups.PermutationGroup.__eq__(self,other)
sympy.combinatorics.perm_groups.PermutationGroup.__getitem__(self,i)
sympy.combinatorics.perm_groups.PermutationGroup.__hash__(self)
sympy.combinatorics.perm_groups.PermutationGroup.__len__(self)
sympy.combinatorics.perm_groups.PermutationGroup.__mul__(self,other)
sympy.combinatorics.perm_groups.PermutationGroup.__new__(cls,*args,**kwargs)
sympy.combinatorics.perm_groups.PermutationGroup._random_pr_init(self,r,n,_random_prec_n=None)
sympy.combinatorics.perm_groups.PermutationGroup._union_find_merge(self,first,second,ranks,parents,not_rep)
sympy.combinatorics.perm_groups.PermutationGroup._union_find_rep(self,num,parents)
sympy.combinatorics.perm_groups.PermutationGroup.base(self)
sympy.combinatorics.perm_groups.PermutationGroup.baseswap(self,base,strong_gens,pos,randomized=False,transversals=None,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.perm_groups.PermutationGroup.basic_orbits(self)
sympy.combinatorics.perm_groups.PermutationGroup.basic_stabilizers(self)
sympy.combinatorics.perm_groups.PermutationGroup.basic_transversals(self)
sympy.combinatorics.perm_groups.PermutationGroup.center(self)
sympy.combinatorics.perm_groups.PermutationGroup.centralizer(self,other)
sympy.combinatorics.perm_groups.PermutationGroup.commutator(self,G,H)
sympy.combinatorics.perm_groups.PermutationGroup.contains(self,g,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.coset_factor(self,g,factor_index=False)
sympy.combinatorics.perm_groups.PermutationGroup.coset_rank(self,g)
sympy.combinatorics.perm_groups.PermutationGroup.coset_unrank(self,rank,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.degree(self)
sympy.combinatorics.perm_groups.PermutationGroup.derived_series(self)
sympy.combinatorics.perm_groups.PermutationGroup.derived_subgroup(self)
sympy.combinatorics.perm_groups.PermutationGroup.generate(self,method='coset',af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generate_dimino(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generate_schreier_sims(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.generators(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_abelian(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym(self,eps=0.05,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.is_group(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_nilpotent(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_normal(self,gr)
sympy.combinatorics.perm_groups.PermutationGroup.is_primitive(self,randomized=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_solvable(self)
sympy.combinatorics.perm_groups.PermutationGroup.is_subgroup(self,G,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_transitive(self,strict=True)
sympy.combinatorics.perm_groups.PermutationGroup.is_trivial(self)
sympy.combinatorics.perm_groups.PermutationGroup.lower_central_series(self)
sympy.combinatorics.perm_groups.PermutationGroup.make_perm(self,n,seed=None)
sympy.combinatorics.perm_groups.PermutationGroup.max_div(self)
sympy.combinatorics.perm_groups.PermutationGroup.minimal_block(self,points)
sympy.combinatorics.perm_groups.PermutationGroup.normal_closure(self,other,k=10)
sympy.combinatorics.perm_groups.PermutationGroup.orbit(self,alpha,action='tuples')
sympy.combinatorics.perm_groups.PermutationGroup.orbit_rep(self,alpha,beta,schreier_vector=None)
sympy.combinatorics.perm_groups.PermutationGroup.orbit_transversal(self,alpha,pairs=False)
sympy.combinatorics.perm_groups.PermutationGroup.orbits(self,rep=False)
sympy.combinatorics.perm_groups.PermutationGroup.order(self)
sympy.combinatorics.perm_groups.PermutationGroup.pointwise_stabilizer(self,points,incremental=True)
sympy.combinatorics.perm_groups.PermutationGroup.random(self,af=False)
sympy.combinatorics.perm_groups.PermutationGroup.random_pr(self,gen_count=11,iterations=50,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.random_stab(self,alpha,schreier_vector=None,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims(self)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_incremental(self,base=None,gens=None)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_sims_random(self,base=None,gens=None,consec_succ=10,_random_prec=None)
sympy.combinatorics.perm_groups.PermutationGroup.schreier_vector(self,alpha)
sympy.combinatorics.perm_groups.PermutationGroup.stabilizer(self,alpha)
sympy.combinatorics.perm_groups.PermutationGroup.strong_gens(self)
sympy.combinatorics.perm_groups.PermutationGroup.subgroup_search(self,prop,base=None,strong_gens=None,tests=None,init_subgroup=None)
sympy.combinatorics.perm_groups.PermutationGroup.transitivity_degree(self)
sympy.combinatorics.perm_groups._orbit(degree,generators,alpha,action='tuples')
sympy.combinatorics.perm_groups._orbit_transversal(degree,generators,alpha,pairs,af=False)
sympy.combinatorics.perm_groups._orbits(degree,generators)
sympy.combinatorics.perm_groups._stabilizer(degree,generators,alpha)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/graycode.py----------------------------------------
A:sympy.combinatorics.graycode.n->int(n)
A:sympy.combinatorics.graycode.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.combinatorics.graycode.obj._current->sympy.core.Basic.__new__(cls, *args).unrank(n, obj._rank)
A:sympy.combinatorics.graycode.start->GrayCode.unrank(self.n, hints['rank'])
A:sympy.combinatorics.graycode.graycode_bin->gray_to_bin(current)
A:sympy.combinatorics.graycode.self._current->int(current, 2)
A:sympy.combinatorics.graycode.graycode_int->int(''.join(graycode_bin), 2)
A:sympy.combinatorics.graycode.self._rank->int(gray_to_bin(self.current), 2)
sympy.combinatorics.GrayCode(cls,n,*args,**kw_args)
sympy.combinatorics.GrayCode.current(self)
sympy.combinatorics.GrayCode.generate_gray(self,**hints)
sympy.combinatorics.GrayCode.n(self)
sympy.combinatorics.GrayCode.next(self,delta=1)
sympy.combinatorics.GrayCode.rank(self)
sympy.combinatorics.GrayCode.selections(self)
sympy.combinatorics.GrayCode.skip(self)
sympy.combinatorics.GrayCode.unrank(self,n,rank)
sympy.combinatorics.graycode.GrayCode(cls,n,*args,**kw_args)
sympy.combinatorics.graycode.GrayCode.__new__(cls,n,*args,**kw_args)
sympy.combinatorics.graycode.GrayCode.current(self)
sympy.combinatorics.graycode.GrayCode.generate_gray(self,**hints)
sympy.combinatorics.graycode.GrayCode.n(self)
sympy.combinatorics.graycode.GrayCode.next(self,delta=1)
sympy.combinatorics.graycode.GrayCode.rank(self)
sympy.combinatorics.graycode.GrayCode.selections(self)
sympy.combinatorics.graycode.GrayCode.skip(self)
sympy.combinatorics.graycode.GrayCode.unrank(self,n,rank)
sympy.combinatorics.graycode.bin_to_gray(bin_list)
sympy.combinatorics.graycode.get_subset_from_bitstring(super_set,bitstring)
sympy.combinatorics.graycode.gray_to_bin(bin_list)
sympy.combinatorics.graycode.graycode_subsets(gray_code_set)
sympy.combinatorics.graycode.random_bitstring(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/subsets.py----------------------------------------
A:sympy.combinatorics.subsets.obj->sympy.core.Basic.__new__(cls)
A:sympy.combinatorics.subsets.bin_list->Subset.bitlist_from_subset(self.subset, self.superset)
A:sympy.combinatorics.subsets.bits->bin(rank)[2:].rjust(len(superset), '0')
A:sympy.combinatorics.subsets.indices->Subset.subset_indices(self.subset, self.superset)
A:sympy.combinatorics.subsets.unranked_code->sympy.combinatorics.graycode.GrayCode.unrank(self.superset_size, (self.rank_gray + k) % self.cardinality)
A:sympy.combinatorics.subsets.self._rank_binary->int(''.join(Subset.bitlist_from_subset(self.subset, self.superset)), 2)
A:sympy.combinatorics.subsets.self._rank_lex->_ranklex(self, indices, 0, self.superset_size)
A:sympy.combinatorics.subsets.graycode_bitlist->sympy.combinatorics.graycode.GrayCode.unrank(len(superset), rank)
A:sympy.combinatorics.subsets.sb->set(b)
sympy.combinatorics.Subset(cls,subset,superset)
sympy.combinatorics.Subset.bitlist_from_subset(self,subset,superset)
sympy.combinatorics.Subset.cardinality(self)
sympy.combinatorics.Subset.iterate_binary(self,k)
sympy.combinatorics.Subset.iterate_graycode(self,k)
sympy.combinatorics.Subset.next_binary(self)
sympy.combinatorics.Subset.next_gray(self)
sympy.combinatorics.Subset.next_lexicographic(self)
sympy.combinatorics.Subset.prev_binary(self)
sympy.combinatorics.Subset.prev_gray(self)
sympy.combinatorics.Subset.prev_lexicographic(self)
sympy.combinatorics.Subset.rank_binary(self)
sympy.combinatorics.Subset.rank_gray(self)
sympy.combinatorics.Subset.rank_lexicographic(self)
sympy.combinatorics.Subset.size(self)
sympy.combinatorics.Subset.subset(self)
sympy.combinatorics.Subset.subset_from_bitlist(self,super_set,bitlist)
sympy.combinatorics.Subset.subset_indices(self,subset,superset)
sympy.combinatorics.Subset.superset(self)
sympy.combinatorics.Subset.superset_size(self)
sympy.combinatorics.Subset.unrank_binary(self,rank,superset)
sympy.combinatorics.Subset.unrank_gray(self,rank,superset)
sympy.combinatorics.subksubsets(superset,k)
sympy.combinatorics.subsets.Subset(cls,subset,superset)
sympy.combinatorics.subsets.Subset.__new__(cls,subset,superset)
sympy.combinatorics.subsets.Subset.bitlist_from_subset(self,subset,superset)
sympy.combinatorics.subsets.Subset.cardinality(self)
sympy.combinatorics.subsets.Subset.iterate_binary(self,k)
sympy.combinatorics.subsets.Subset.iterate_graycode(self,k)
sympy.combinatorics.subsets.Subset.next_binary(self)
sympy.combinatorics.subsets.Subset.next_gray(self)
sympy.combinatorics.subsets.Subset.next_lexicographic(self)
sympy.combinatorics.subsets.Subset.prev_binary(self)
sympy.combinatorics.subsets.Subset.prev_gray(self)
sympy.combinatorics.subsets.Subset.prev_lexicographic(self)
sympy.combinatorics.subsets.Subset.rank_binary(self)
sympy.combinatorics.subsets.Subset.rank_gray(self)
sympy.combinatorics.subsets.Subset.rank_lexicographic(self)
sympy.combinatorics.subsets.Subset.size(self)
sympy.combinatorics.subsets.Subset.subset(self)
sympy.combinatorics.subsets.Subset.subset_from_bitlist(self,super_set,bitlist)
sympy.combinatorics.subsets.Subset.subset_indices(self,subset,superset)
sympy.combinatorics.subsets.Subset.superset(self)
sympy.combinatorics.subsets.Subset.superset_size(self)
sympy.combinatorics.subsets.Subset.unrank_binary(self,rank,superset)
sympy.combinatorics.subsets.Subset.unrank_gray(self,rank,superset)
sympy.combinatorics.subsets.ksubsets(superset,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tensor_can.py----------------------------------------
A:sympy.combinatorics.tensor_can.a->list(range(ind1[0]))
A:sympy.combinatorics.tensor_can.num_types->len(msym)
A:sympy.combinatorics.tensor_can.k->dx.index(p0)
A:sympy.combinatorics.tensor_can.indices->list(range(num_dummies))
A:sympy.combinatorics.tensor_can.all_metrics_with_sym->all([_ is not None for _ in sym])
A:sympy.combinatorics.tensor_can.S_transversals->transversal2coset(size, b_S, S_transversals)
A:sympy.combinatorics.tensor_can.ginv->_af_invert(g)
A:sympy.combinatorics.tensor_can.idn->list(range(size))
A:sympy.combinatorics.tensor_can.deltab->set([b])
A:sympy.combinatorics.tensor_can.md->_min_dummies(dumx, sym, indices)
A:sympy.combinatorics.tensor_can.p_i->min([min([md[h[x]] for x in deltab]) for (s, d, h) in TAB])
A:sympy.combinatorics.tensor_can.nTAB->len(TAB)
A:sympy.combinatorics.tensor_can.(s, d, h)->TAB1.pop()
A:sympy.combinatorics.tensor_can.dg->_af_rmul(d, g)
A:sympy.combinatorics.tensor_can.dginv->_af_invert(dg)
A:sympy.combinatorics.tensor_can.s1->_trace_S(s, j, b, S_transversals)
A:sympy.combinatorics.tensor_can.d1->_trace_D(dg[j], p_i, Dxtrav)
A:sympy.combinatorics.tensor_can.nTAB1->len(TAB1)
A:sympy.combinatorics.tensor_can.size->len(gens[0])
A:sympy.combinatorics.tensor_can.transversals->get_transversals(base, gens)
A:sympy.combinatorics.tensor_can.m->len(base)
A:sympy.combinatorics.tensor_can.h1->_af_rmul(h, sk)
A:sympy.combinatorics.tensor_can.h->_af_rmul(h, s)
A:sympy.combinatorics.tensor_can.res->list(range(size))
A:sympy.combinatorics.tensor_can.fd->list(zip(fixed_slots, free))
A:sympy.combinatorics.tensor_can.num_free->len(free)
A:sympy.combinatorics.tensor_can.mbsgs->get_minimal_bsgs(base_i, gens_i)
A:sympy.combinatorics.tensor_can.can->canonicalize_naive(g, dummies, msym, *v)
A:sympy.combinatorics.tensor_can.(size1, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.tensor_can.g1->canonical_free(sbase, sgens, g, num_free)
A:sympy.combinatorics.tensor_can.(size, sbase, sgens)->gens_products(*v1)
A:sympy.combinatorics.tensor_can.map_slots->_get_map_slots(size, pos_free)
A:sympy.combinatorics.tensor_can.transv_red->get_transversals(sbase_red, sgens_red)
A:sympy.combinatorics.tensor_can.g1_red->_af_new(g1_red)
A:sympy.combinatorics.tensor_can.g2->double_coset_can_rep(dummies_red, msym, sbase_red, sgens_red, transv_red, g1_red)
A:sympy.combinatorics.tensor_can.g3->_lift_sgens(size, pos_free, free, g2)
A:sympy.combinatorics.tensor_can.start->list(range(n1))
A:sympy.combinatorics.tensor_can.end->list(range(n1, n1 + n2))
A:sympy.combinatorics.tensor_can.base->list(range(n - 1))
A:sympy.combinatorics.tensor_can.gens->perm_af_direct_product(gens1, gens2, signed)
A:sympy.combinatorics.tensor_can.id_af->list(range(res_size))
A:sympy.combinatorics.tensor_can.stabs->_distribute_gens_by_base(base, gens)
A:sympy.combinatorics.tensor_can.(orbits, transversals)->_orbits_transversals_from_bsgs(base, stabs)
A:sympy.combinatorics.tensor_can.G->PermutationGroup(gens)
A:sympy.combinatorics.tensor_can.(base, gens)->PermutationGroup(gens).schreier_sims_incremental()
A:sympy.combinatorics.tensor_can.H->PermutationGroup(gens).pointwise_stabilizer(free_indices)
A:sympy.combinatorics.tensor_can.(base, sgs)->PermutationGroup(gens).pointwise_stabilizer(free_indices).schreier_sims_incremental()
A:sympy.combinatorics.tensor_can.n->len(list_free_indices)
A:sympy.combinatorics.tensor_can.(res_base, res_gens)->bsgs_direct_product(res_base, res_gens, base, gens, 1)
A:sympy.combinatorics.tensor_can.(base1, gens1)->_get_bsgs(G, base, gens, list_free_indices[i])
A:sympy.combinatorics.tensor_can.res_base->list(res_base)
A:sympy.combinatorics.tensor_can.(res_size, res_base, res_gens)->tensor_gens(*v[0])
A:sympy.combinatorics.tensor_can.(size, base, gens)->tensor_gens(*v[i])
sympy.combinatorics.tensor_can._dumx_remove(dumx,dumx_flat,p0)
sympy.combinatorics.tensor_can._get_map_slots(size,fixed_slots)
sympy.combinatorics.tensor_can._is_minimal_bsgs(base,gens)
sympy.combinatorics.tensor_can._lift_sgens(size,fixed_slots,free,s)
sympy.combinatorics.tensor_can._min_dummies(dummies,sym,indices)
sympy.combinatorics.tensor_can._trace_D(gj,p_i,Dxtrav)
sympy.combinatorics.tensor_can._trace_S(s,j,b,S_cosets)
sympy.combinatorics.tensor_can.bsgs_direct_product(base1,gens1,base2,gens2,signed=True)
sympy.combinatorics.tensor_can.canonical_free(base,gens,g,num_free)
sympy.combinatorics.tensor_can.canonicalize(g,dummies,msym,*v)
sympy.combinatorics.tensor_can.double_coset_can_rep(dummies,sym,b_S,sgens,S_transversals,g)
sympy.combinatorics.tensor_can.dummy_sgs(dummies,sym,n)
sympy.combinatorics.tensor_can.gens_products(*v)
sympy.combinatorics.tensor_can.get_minimal_bsgs(base,gens)
sympy.combinatorics.tensor_can.get_symmetric_group_sgs(n,antisym=False)
sympy.combinatorics.tensor_can.get_transversals(base,gens)
sympy.combinatorics.tensor_can.perm_af_direct_product(gens1,gens2,signed=True)
sympy.combinatorics.tensor_can.tensor_gens(base,gens,list_free_indices,sym=0)
sympy.combinatorics.tensor_can.transversal2coset(size,base,transversal)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/named_groups.py----------------------------------------
A:sympy.combinatorics.named_groups.G->PermutationGroup([gen1, gen2])
A:sympy.combinatorics.named_groups.a->list(range(n))
A:sympy.combinatorics.named_groups.gen->_af_new(a)
A:sympy.combinatorics.named_groups.gen1->_af_new(a)
A:sympy.combinatorics.named_groups.gen2->_af_new(a)
sympy.combinatorics.AbelianGroup(*cyclic_orders)
sympy.combinatorics.AlternatingGroup(n)
sympy.combinatorics.CyclicGroup(n)
sympy.combinatorics.DihedralGroup(n)
sympy.combinatorics.RubikGroup(n)
sympy.combinatorics.SymmetricGroup(n)
sympy.combinatorics.named_groups.AbelianGroup(*cyclic_orders)
sympy.combinatorics.named_groups.AlternatingGroup(n)
sympy.combinatorics.named_groups.CyclicGroup(n)
sympy.combinatorics.named_groups.DihedralGroup(n)
sympy.combinatorics.named_groups.RubikGroup(n)
sympy.combinatorics.named_groups.SymmetricGroup(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/util.py----------------------------------------
A:sympy.combinatorics.util.base_len->len(base)
A:sympy.combinatorics.util.used->set()
A:sympy.combinatorics.util.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.util.(basic_orbits, transversals)->_orbits_transversals_from_bsgs(base, strong_gens_distr)
A:sympy.combinatorics.util.transversals->_orbits_transversals_from_bsgs(base, strong_gens_distr, transversals_only=True)
A:sympy.combinatorics.util.basic_orbits[i]->list(transversals[i].keys())
A:sympy.combinatorics.util.transversals[i]->dict(_orbit_transversal(degree, strong_gens_distr[i], base[i], pairs=True))
A:sympy.combinatorics.util.basic_orbit->_orbit(degree, strong_gens_distr[i], base[i])
A:sympy.combinatorics.util.temp_orbit->_orbit(degree, temp_gens, base[i])
A:sympy.combinatorics.util.h->_af_rmul(_af_invert(u), h)
sympy.combinatorics.util._base_ordering(base,degree)
sympy.combinatorics.util._check_cycles_alt_sym(perm)
sympy.combinatorics.util._distribute_gens_by_base(base,gens)
sympy.combinatorics.util._handle_precomputed_bsgs(base,strong_gens,transversals=None,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.util._orbits_transversals_from_bsgs(base,strong_gens_distr,transversals_only=False)
sympy.combinatorics.util._remove_gens(base,strong_gens,basic_orbits=None,strong_gens_distr=None)
sympy.combinatorics.util._strip(g,base,orbits,transversals)
sympy.combinatorics.util._strip_af(h,base,orbits,transversals,j)
sympy.combinatorics.util._strong_gens_from_distr(strong_gens_distr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/polyhedron.py----------------------------------------
A:sympy.combinatorics.polyhedron.obj->sympy.core.Basic.__new__(cls, *args)
A:sympy.combinatorics.polyhedron.obj._corners->tuple(corners)
A:sympy.combinatorics.polyhedron.obj._faces->FiniteSet(*faces)
A:sympy.combinatorics.polyhedron.obj._pgroup->PermutationGroup(pgroup or [Perm(range(len(corners)))])
A:sympy.combinatorics.polyhedron.corners->list(self.args[0])
A:sympy.combinatorics.polyhedron.output->set()
A:sympy.combinatorics.polyhedron.edge->tuple(sorted([face[i], face[i - 1]]))
A:sympy.combinatorics.polyhedron.self._edges->FiniteSet(*output)
A:sympy.combinatorics.polyhedron.self._corners->tuple(corners)
A:sympy.combinatorics.polyhedron.n->len(ordered_faces[0])
A:sympy.combinatorics.polyhedron.fmap->dict(zip(ordered_faces, range(len(ordered_faces))))
A:sympy.combinatorics.polyhedron.flat_faces->flatten(ordered_faces)
A:sympy.combinatorics.polyhedron.h->polyh.copy()
A:sympy.combinatorics.polyhedron.reorder->unflatten([c[j] for j in flat_faces], n)
A:sympy.combinatorics.polyhedron.tetrahedron->Polyhedron(range(4), tetrahedron_faces, _t_pgroup)
A:sympy.combinatorics.polyhedron.cube->Polyhedron(range(8), cube_faces, _c_pgroup)
A:sympy.combinatorics.polyhedron.octahedron->Polyhedron(range(6), octahedron_faces, _pgroup_of_double(cube, cube_faces, _c_pgroup))
A:sympy.combinatorics.polyhedron._f0->Perm([1, 2, 3, 4, 0, 6, 7, 8, 9, 5, 11, 12, 13, 14, 10, 16, 17, 18, 19, 15])
A:sympy.combinatorics.polyhedron._f1->Perm([5, 0, 4, 9, 14, 10, 1, 3, 13, 15, 6, 2, 8, 19, 16, 17, 11, 7, 12, 18])
A:sympy.combinatorics.polyhedron.dodecahedron->Polyhedron(range(20), dodecahedron_faces, _dodeca_pgroup)
A:sympy.combinatorics.polyhedron.icosahedron->Polyhedron(range(12), icosahedron_faces, _pgroup_of_double(dodecahedron, dodecahedron_faces, _dodeca_pgroup))
A:sympy.combinatorics.polyhedron.(tetrahedron, cube, octahedron, dodecahedron, icosahedron, tetrahedron_faces, cube_faces, octahedron_faces, dodecahedron_faces, icosahedron_faces)->_pgroup_calcs()
sympy.combinatorics.Polyhedron(cls,corners,faces=[],pgroup=[])
sympy.combinatorics.Polyhedron.array_form(self)
sympy.combinatorics.Polyhedron.corners(self)
sympy.combinatorics.Polyhedron.cyclic_form(self)
sympy.combinatorics.Polyhedron.edges(self)
sympy.combinatorics.Polyhedron.faces(self)
sympy.combinatorics.Polyhedron.pgroup(self)
sympy.combinatorics.Polyhedron.reset(self)
sympy.combinatorics.Polyhedron.rotate(self,perm)
sympy.combinatorics.Polyhedron.size(self)
sympy.combinatorics.polyhedron.Polyhedron(cls,corners,faces=[],pgroup=[])
sympy.combinatorics.polyhedron.Polyhedron.__new__(cls,corners,faces=[],pgroup=[])
sympy.combinatorics.polyhedron.Polyhedron.array_form(self)
sympy.combinatorics.polyhedron.Polyhedron.corners(self)
sympy.combinatorics.polyhedron.Polyhedron.cyclic_form(self)
sympy.combinatorics.polyhedron.Polyhedron.edges(self)
sympy.combinatorics.polyhedron.Polyhedron.faces(self)
sympy.combinatorics.polyhedron.Polyhedron.pgroup(self)
sympy.combinatorics.polyhedron.Polyhedron.reset(self)
sympy.combinatorics.polyhedron.Polyhedron.rotate(self,perm)
sympy.combinatorics.polyhedron.Polyhedron.size(self)
sympy.combinatorics.polyhedron._pgroup_calcs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/generators.py----------------------------------------
A:sympy.combinatorics.generators.gen->rotate_left(gen, 1)
A:sympy.combinatorics.generators.p->Permutation(perm)
A:sympy.combinatorics.generators.faces[f][:, n - i]->Matrix(n, 1, s)
A:sympy.combinatorics.generators.faces[f][:, i - 1]->Matrix(n, 1, s)
A:sympy.combinatorics.generators.faces[f][i - 1, :]->Matrix(1, n, s)
A:sympy.combinatorics.generators.faces[f][n - i, :]->Matrix(1, n, s)
A:sympy.combinatorics.generators.faces[F]->Matrix(n, n, rv)
A:sympy.combinatorics.generators.temp->getr(L, i)
A:sympy.combinatorics.generators.(U, F, R, B, L, D)names->symbols('U, F, R, B, L, D')
A:sympy.combinatorics.generators.faces[names[fi]]->Matrix(n, n, f)
A:sympy.combinatorics.generators.I->list(range(6 * n ** 2))
sympy.combinatorics.alternating(n)
sympy.combinatorics.cyclic(n)
sympy.combinatorics.dihedral(n)
sympy.combinatorics.generators.alternating(n)
sympy.combinatorics.generators.cyclic(n)
sympy.combinatorics.generators.dihedral(n)
sympy.combinatorics.generators.rubik(n)
sympy.combinatorics.generators.rubik_cube_generators()
sympy.combinatorics.generators.symmetric(n)
sympy.combinatorics.symmetric(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/prufer.py----------------------------------------
A:sympy.combinatorics.prufer.self._prufer_repr->self.to_prufer(self._tree_repr[:], self.nodes)
A:sympy.combinatorics.prufer.self._tree_repr->self.to_tree(self._prufer_repr[:])
A:sympy.combinatorics.prufer.self._rank->self.prufer_rank()
A:sympy.combinatorics.prufer.d->defaultdict(lambda : 1)
A:sympy.combinatorics.prufer.e->set()
A:sympy.combinatorics.prufer.got->set()
A:sympy.combinatorics.prufer.L->defaultdict(int)
A:sympy.combinatorics.prufer.ret_obj->sympy.core.Basic.__new__(cls, *args, **kw_args)
A:sympy.combinatorics.prufer.nodes->set(flatten(args[0]))
sympy.combinatorics.Prufer(cls,*args,**kw_args)
sympy.combinatorics.Prufer.edges(*runs)
sympy.combinatorics.Prufer.next(self,delta=1)
sympy.combinatorics.Prufer.nodes(self)
sympy.combinatorics.Prufer.prev(self,delta=1)
sympy.combinatorics.Prufer.prufer_rank(self)
sympy.combinatorics.Prufer.prufer_repr(self)
sympy.combinatorics.Prufer.rank(self)
sympy.combinatorics.Prufer.size(self)
sympy.combinatorics.Prufer.to_prufer(tree,n)
sympy.combinatorics.Prufer.to_tree(prufer)
sympy.combinatorics.Prufer.tree_repr(self)
sympy.combinatorics.Prufer.unrank(self,rank,n)
sympy.combinatorics.prufer.Prufer(cls,*args,**kw_args)
sympy.combinatorics.prufer.Prufer.__new__(cls,*args,**kw_args)
sympy.combinatorics.prufer.Prufer.edges(*runs)
sympy.combinatorics.prufer.Prufer.next(self,delta=1)
sympy.combinatorics.prufer.Prufer.nodes(self)
sympy.combinatorics.prufer.Prufer.prev(self,delta=1)
sympy.combinatorics.prufer.Prufer.prufer_rank(self)
sympy.combinatorics.prufer.Prufer.prufer_repr(self)
sympy.combinatorics.prufer.Prufer.rank(self)
sympy.combinatorics.prufer.Prufer.size(self)
sympy.combinatorics.prufer.Prufer.to_prufer(tree,n)
sympy.combinatorics.prufer.Prufer.to_tree(prufer)
sympy.combinatorics.prufer.Prufer.tree_repr(self)
sympy.combinatorics.prufer.Prufer.unrank(self,rank,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/partitions.py----------------------------------------
A:sympy.combinatorics.partitions.partition->flatten([[k] * m for (k, m) in partition])
A:sympy.combinatorics.partitions.obj->sympy.core.Basic.__new__(cls, integer, partition)
A:sympy.combinatorics.partitions.obj.members->tuple(partition)
A:sympy.combinatorics.partitions.obj.size->len(partition)
A:sympy.combinatorics.partitions.members->tuple(sorted(self.members, key=lambda w: default_sort_key(w, order)))
A:sympy.combinatorics.partitions.self._partition->sorted([sorted(p, key=default_sort_key) for p in self.args])
A:sympy.combinatorics.partitions.other->as_int(other)
A:sympy.combinatorics.partitions.result->RGS_unrank(offset % RGS_enum(self.size), self.size)
A:sympy.combinatorics.partitions.self._rank->RGS_rank(self.RGS)
A:sympy.combinatorics.partitions.integer->as_int(integer)
A:sympy.combinatorics.partitions.obj.partition->list(partition)
A:sympy.combinatorics.partitions.d->zeros(m + 1)
A:sympy.combinatorics.partitions.groups->group(self.partition, multiple=False)
A:sympy.combinatorics.partitions.self._dict->dict(groups)
A:sympy.combinatorics.partitions.n->len(rgs[i + 1:])
A:sympy.combinatorics.partitions.randint->_randint(seed)
A:sympy.combinatorics.partitions.k->randint(1, n)
A:sympy.combinatorics.partitions.mult->randint(1, n // k)
A:sympy.combinatorics.partitions.D->RGS_generalized(rgs_size)
A:sympy.combinatorics.partitions.L[i]->int(rank / v + 1)
A:sympy.combinatorics.partitions.rgs_size->len(rgs)
A:sympy.combinatorics.partitions.m->max(rgs[0:i])
sympy.combinatorics.IntegerPartition(cls,partition,integer=None)
sympy.combinatorics.IntegerPartition.__le__(self,other)
sympy.combinatorics.IntegerPartition.__lt__(self,other)
sympy.combinatorics.IntegerPartition.__str__(self)
sympy.combinatorics.IntegerPartition.as_dict(self)
sympy.combinatorics.IntegerPartition.as_ferrers(self,char='#')
sympy.combinatorics.IntegerPartition.conjugate(self)
sympy.combinatorics.IntegerPartition.next_lex(self)
sympy.combinatorics.IntegerPartition.prev_lex(self)
sympy.combinatorics.Partition(cls,*partition)
sympy.combinatorics.Partition.RGS(self)
sympy.combinatorics.Partition.__add__(self,other)
sympy.combinatorics.Partition.__le__(self,other)
sympy.combinatorics.Partition.__lt__(self,other)
sympy.combinatorics.Partition.__sub__(self,other)
sympy.combinatorics.Partition.from_rgs(self,rgs,elements)
sympy.combinatorics.Partition.partition(self)
sympy.combinatorics.Partition.rank(self)
sympy.combinatorics.Partition.sort_key(self,order=None)
sympy.combinatorics.RGS_enum(m)
sympy.combinatorics.RGS_rank(rgs)
sympy.combinatorics.RGS_unrank(rank,m)
sympy.combinatorics.partitions.IntegerPartition(cls,partition,integer=None)
sympy.combinatorics.partitions.IntegerPartition.__le__(self,other)
sympy.combinatorics.partitions.IntegerPartition.__lt__(self,other)
sympy.combinatorics.partitions.IntegerPartition.__new__(cls,partition,integer=None)
sympy.combinatorics.partitions.IntegerPartition.__str__(self)
sympy.combinatorics.partitions.IntegerPartition.as_dict(self)
sympy.combinatorics.partitions.IntegerPartition.as_ferrers(self,char='#')
sympy.combinatorics.partitions.IntegerPartition.conjugate(self)
sympy.combinatorics.partitions.IntegerPartition.next_lex(self)
sympy.combinatorics.partitions.IntegerPartition.prev_lex(self)
sympy.combinatorics.partitions.Partition(cls,*partition)
sympy.combinatorics.partitions.Partition.RGS(self)
sympy.combinatorics.partitions.Partition.__add__(self,other)
sympy.combinatorics.partitions.Partition.__le__(self,other)
sympy.combinatorics.partitions.Partition.__lt__(self,other)
sympy.combinatorics.partitions.Partition.__new__(cls,*partition)
sympy.combinatorics.partitions.Partition.__sub__(self,other)
sympy.combinatorics.partitions.Partition.from_rgs(self,rgs,elements)
sympy.combinatorics.partitions.Partition.partition(self)
sympy.combinatorics.partitions.Partition.rank(self)
sympy.combinatorics.partitions.Partition.sort_key(self,order=None)
sympy.combinatorics.partitions.RGS_enum(m)
sympy.combinatorics.partitions.RGS_generalized(m)
sympy.combinatorics.partitions.RGS_rank(rgs)
sympy.combinatorics.partitions.RGS_unrank(rank,m)
sympy.combinatorics.partitions.random_integer_partition(n,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/group_constructs.py----------------------------------------
A:sympy.combinatorics.group_constructs.current_num_gens->len(group.generators)
A:sympy.combinatorics.group_constructs.perm_gens->list(uniq([_af_new(list(a)) for a in array_gens]))
sympy.combinatorics.DirectProduct(*groups)
sympy.combinatorics.group_constructs.DirectProduct(*groups)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_permutations.py----------------------------------------
A:sympy.combinatorics.tests.test_permutations.p->Permutation([[1, 2], [4, 3]], size=5)
A:sympy.combinatorics.tests.test_permutations.q->Permutation([[6], [5], [0, 1, 2, 3, 4]])
A:sympy.combinatorics.tests.test_permutations.r->Permutation([3, 2, 1, 0])
A:sympy.combinatorics.tests.test_permutations.t->Permutation([[1, 2], [4, 3]], size=5).transpositions()
A:sympy.combinatorics.tests.test_permutations.a->Permutation([0, 2, 1, 3])
A:sympy.combinatorics.tests.test_permutations.b->b.next_trotterjohnson().next_trotterjohnson()
A:sympy.combinatorics.tests.test_permutations.I->Permutation(3)
A:sympy.combinatorics.tests.test_permutations.ans->Permutation(0, 5, 3, 1, 6)(2, 4)
A:sympy.combinatorics.tests.test_permutations.s->Permutation([0])
A:sympy.combinatorics.tests.test_permutations.iden->Permutation([0, 1, 2, 3])
A:sympy.combinatorics.tests.test_permutations.p1->Permutation(a[0])
A:sympy.combinatorics.tests.test_permutations.prank->Permutation([[1, 2], [4, 3]], size=5).rank_nonlex()
A:sympy.combinatorics.tests.test_permutations.qrank->Permutation([[6], [5], [0, 1, 2, 3, 4]]).rank_nonlex()
A:sympy.combinatorics.tests.test_permutations.p2->sympy.combinatorics.permutations.Permutation.rmul_with_af(*[Permutation(h) for h in a[N::-1]])
A:sympy.combinatorics.tests.test_permutations.h->_af_rmul(h, a[i])
A:sympy.combinatorics.tests.test_permutations.h2->_af_rmuln(*a[:i + 1])
sympy.combinatorics.tests.test_permutations.test_Cycle()
sympy.combinatorics.tests.test_permutations.test_Permutation()
sympy.combinatorics.tests.test_permutations.test_args()
sympy.combinatorics.tests.test_permutations.test_from_sequence()
sympy.combinatorics.tests.test_permutations.test_josephus()
sympy.combinatorics.tests.test_permutations.test_mul()
sympy.combinatorics.tests.test_permutations.test_ranking()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_generators.py----------------------------------------
sympy.combinatorics.tests.test_generators.test_generators()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_group_constructs.py----------------------------------------
A:sympy.combinatorics.tests.test_group_constructs.C->CyclicGroup(4)
A:sympy.combinatorics.tests.test_group_constructs.D->DihedralGroup(4)
A:sympy.combinatorics.tests.test_group_constructs.G->DirectProduct(C, C, C)
A:sympy.combinatorics.tests.test_group_constructs.H->DirectProduct(D, C)
sympy.combinatorics.tests.test_group_constructs.test_direct_product_n()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_subsets.py----------------------------------------
A:sympy.combinatorics.tests.test_subsets.a->a.prev_lexicographic().prev_lexicographic()
sympy.combinatorics.tests.test_subsets.test_subset()
sympy.combinatorics.tests.test_subtest_subset()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_tensor_can.py----------------------------------------
A:sympy.combinatorics.tests.test_tensor_can.a->dummy_sgs([2, 3, 4, 5], 1, 8)
A:sympy.combinatorics.tests.test_tensor_can.(base1, gens1)->get_symmetric_group_sgs(1)
A:sympy.combinatorics.tests.test_tensor_can.g->Permutation([4, 2, 10, 0, 11, 8, 1, 9, 6, 5, 7, 3, 12, 13])
A:sympy.combinatorics.tests.test_tensor_can.can->canonicalize(g, dummies, sym, (base, gens, 4, 0))
A:sympy.combinatorics.tests.test_tensor_can.(base2, gens2)->get_symmetric_group_sgs(2)
A:sympy.combinatorics.tests.test_tensor_can.(base2a, gens2a)->get_symmetric_group_sgs(2, 1)
A:sympy.combinatorics.tests.test_tensor_can.(base1a, gens1a)->get_symmetric_group_sgs(1, 1)
A:sympy.combinatorics.tests.test_tensor_can.(base3, gens3)->get_symmetric_group_sgs(3)
A:sympy.combinatorics.tests.test_tensor_can.(base3a, gens3a)->get_symmetric_group_sgs(3, 1)
A:sympy.combinatorics.tests.test_tensor_can.can1->canonicalize_naive(g, list(range(2, 8)), 0, (baser, gensr, 2, 0))
A:sympy.combinatorics.tests.test_tensor_can.(base_f, gens_f)->bsgs_direct_product(base1, gens1, base2a, gens2a)
A:sympy.combinatorics.tests.test_tensor_can.(base_A, gens_A)->bsgs_direct_product(base1, gens1, base1, gens1)
A:sympy.combinatorics.tests.test_tensor_can.(base, gens)->bsgs_direct_product(base1, gens1, base2, gens2)
A:sympy.combinatorics.tests.test_tensor_can.dummies->list(range(4, 12))
A:sympy.combinatorics.tests.test_tensor_can.p->list(range(size))
A:sympy.combinatorics.tests.test_tensor_can.c1->graph_certificate(g1)
A:sympy.combinatorics.tests.test_tensor_can.c2->graph_certificate(g2)
A:sympy.combinatorics.tests.test_tensor_can.g1a->randomize_graph(10, g1)
A:sympy.combinatorics.tests.test_tensor_can.c1a->graph_certificate(g1a)
sympy.combinatorics.tests.test_tensor_can.test_canonical_free()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize1()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize_no_dummies()
sympy.combinatorics.tests.test_tensor_can.test_canonicalize_no_slot_sym()
sympy.combinatorics.tests.test_tensor_can.test_dummy_sgs()
sympy.combinatorics.tests.test_tensor_can.test_get_symmetric_group_sgs()
sympy.combinatorics.tests.test_tensor_can.test_graph_certificate()
sympy.combinatorics.tests.test_tensor_can.test_no_metric_symmetry()
sympy.combinatorics.tests.test_tensor_can.test_perm_af_direct_product()
sympy.combinatorics.tests.test_tensor_can.test_riemann_invariants()
sympy.combinatorics.tests.test_tensor_can.test_riemann_invariants1()
sympy.combinatorics.tests.test_tensor_can.test_riemann_products()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_perm_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_perm_groups.a->Permutation([1, 2, 3, 4, 0])
A:sympy.combinatorics.tests.test_perm_groups.G->DihedralGroup(10)
A:sympy.combinatorics.tests.test_perm_groups.b->Permutation([1, 0, 2, 3, 4])
A:sympy.combinatorics.tests.test_perm_groups.g->SymmetricGroup(5).random_stab(2, _random_prec=_random_prec)
A:sympy.combinatorics.tests.test_perm_groups.v2->list(G.generate(method='dimino', af=True))
A:sympy.combinatorics.tests.test_perm_groups.S->SymmetricGroup(5)
A:sympy.combinatorics.tests.test_perm_groups.H->DihedralGroup(8)
A:sympy.combinatorics.tests.test_perm_groups.G0->DihedralGroup(10).stabilizer(0)
A:sympy.combinatorics.tests.test_perm_groups.G2->DihedralGroup(10).normal_closure(G1.generators)
A:sympy.combinatorics.tests.test_perm_groups.G2_1->DihedralGroup(10).normal_closure(G1.generators).stabilizer(1)
A:sympy.combinatorics.tests.test_perm_groups.v->SymmetricGroup(5).random_stab(2, _random_prec=_random_prec).coset_factor(c)
A:sympy.combinatorics.tests.test_perm_groups.D->DihedralGroup(i)
A:sympy.combinatorics.tests.test_perm_groups.A->AlternatingGroup(3)
A:sympy.combinatorics.tests.test_perm_groups.C->CyclicGroup(i)
A:sympy.combinatorics.tests.test_perm_groups.triv->PermutationGroup([Permutation(list(range(i)))])
A:sympy.combinatorics.tests.test_perm_groups.elements->list(S.generate_dimino())
A:sympy.combinatorics.tests.test_perm_groups.rk->DihedralGroup(10).coset_rank(h)
A:sympy.combinatorics.tests.test_perm_groups.h1->DihedralGroup(10).coset_unrank(rk, af=True)
A:sympy.combinatorics.tests.test_perm_groups.c->Permutation([1, 0, 2, 3, 5, 4])
A:sympy.combinatorics.tests.test_perm_groups.d->Permutation([1, 0, 2, 3, 4, 5])
A:sympy.combinatorics.tests.test_perm_groups.p->Permutation([1, 0, 2])
A:sympy.combinatorics.tests.test_perm_groups.G1->PermutationGroup(G[:3])
A:sympy.combinatorics.tests.test_perm_groups.G3->PermutationGroup(gens3)
A:sympy.combinatorics.tests.test_perm_groups.G4->PermutationGroup([Permutation([0, 1])])
A:sympy.combinatorics.tests.test_perm_groups.G5->PermutationGroup(gens5)
A:sympy.combinatorics.tests.test_perm_groups.G6->PermutationGroup(G[:3]).normal_closure(G5.generators)
A:sympy.combinatorics.tests.test_perm_groups.gens->rubik_cube_generators()
A:sympy.combinatorics.tests.test_perm_groups.C1->PermutationGroup(G[:3]).derived_subgroup()
A:sympy.combinatorics.tests.test_perm_groups.L->SymmetricGroup(4)
A:sympy.combinatorics.tests.test_perm_groups.block_system->DihedralGroup(i).minimal_block([0, 3])
A:sympy.combinatorics.tests.test_perm_groups._random_el->Permutation([1, 3, 2, 0, 4])
A:sympy.combinatorics.tests.test_perm_groups.h->SymmetricGroup(5).random_stab(1)
A:sympy.combinatorics.tests.test_perm_groups.perm->Permutation([1, 2, 0])
A:sympy.combinatorics.tests.test_perm_groups.gen1->rmul(gen0, gen1)
A:sympy.combinatorics.tests.test_perm_groups.gen2->Permutation([1, 2, 3, 4, 0])
A:sympy.combinatorics.tests.test_perm_groups.Alt->SymmetricGroup(5).subgroup_search(prop_even)
A:sympy.combinatorics.tests.test_perm_groups.deterministic->SymmetricGroup(5).baseswap(base, strong_gens, 1, randomized=False)
A:sympy.combinatorics.tests.test_perm_groups.randomized->SymmetricGroup(5).baseswap(base, strong_gens, 1)
A:sympy.combinatorics.tests.test_perm_groups.identity->Permutation([0, 1, 2])
A:sympy.combinatorics.tests.test_perm_groups.TrivialGroup->PermutationGroup([identity])
A:sympy.combinatorics.tests.test_perm_groups.(base, strong_gens)->AlternatingGroup(3).schreier_sims_incremental()
A:sympy.combinatorics.tests.test_perm_groups.gen0->rmul(gen0, gen1)
A:sympy.combinatorics.tests.test_perm_groups.Sym->SymmetricGroup(5).subgroup_search(prop_true, init_subgroup=C)
A:sympy.combinatorics.tests.test_perm_groups.fix35->AlternatingGroup(3).subgroup_search(prop_fix_points)
A:sympy.combinatorics.tests.test_perm_groups.fix5->AlternatingGroup(3).subgroup_search(prop_fix_points)
A:sympy.combinatorics.tests.test_perm_groups.comm_g->AlternatingGroup(3).subgroup_search(prop_comm_g, base=base, strong_gens=strong_gens)
A:sympy.combinatorics.tests.test_perm_groups.closure->SymmetricGroup(5).normal_closure(identity)
A:sympy.combinatorics.tests.test_perm_groups.series->SymmetricGroup(5).lower_central_series()
A:sympy.combinatorics.tests.test_perm_groups.A1->AbelianGroup(2, 5)
A:sympy.combinatorics.tests.test_perm_groups.A2->AbelianGroup(3, 4)
A:sympy.combinatorics.tests.test_perm_groups.Ab->AbelianGroup(5, 7, 10)
A:sympy.combinatorics.tests.test_perm_groups.stab->stab.stabilizer(point).stabilizer(point)
sympy.combinatorics.tests.test_perm_groups._subgroup_search(i,j,k)
sympy.combinatorics.tests.test_perm_groups.test_baseswap()
sympy.combinatorics.tests.test_perm_groups.test_center()
sympy.combinatorics.tests.test_perm_groups.test_centralizer()
sympy.combinatorics.tests.test_perm_groups.test_commutator()
sympy.combinatorics.tests.test_perm_groups.test_coset_factor()
sympy.combinatorics.tests.test_perm_groups.test_coset_rank()
sympy.combinatorics.tests.test_perm_groups.test_derived_series()
sympy.combinatorics.tests.test_perm_groups.test_derived_subgroup()
sympy.combinatorics.tests.test_perm_groups.test_direct_product()
sympy.combinatorics.tests.test_perm_groups.test_eq()
sympy.combinatorics.tests.test_perm_groups.test_generate()
sympy.combinatorics.tests.test_perm_groups.test_has()
sympy.combinatorics.tests.test_perm_groups.test_is_alt_sym()
sympy.combinatorics.tests.test_perm_groups.test_is_nilpotent()
sympy.combinatorics.tests.test_perm_groups.test_is_normal()
sympy.combinatorics.tests.test_perm_groups.test_is_primitive()
sympy.combinatorics.tests.test_perm_groups.test_is_solvable()
sympy.combinatorics.tests.test_perm_groups.test_is_trivial()
sympy.combinatorics.tests.test_perm_groups.test_lower_central_series()
sympy.combinatorics.tests.test_perm_groups.test_make_perm()
sympy.combinatorics.tests.test_perm_groups.test_max_div()
sympy.combinatorics.tests.test_perm_groups.test_minimal_block()
sympy.combinatorics.tests.test_perm_groups.test_normal_closure()
sympy.combinatorics.tests.test_perm_groups.test_orbit_rep()
sympy.combinatorics.tests.test_perm_groups.test_orbits()
sympy.combinatorics.tests.test_perm_groups.test_order()
sympy.combinatorics.tests.test_perm_groups.test_pointwise_stabilizer()
sympy.combinatorics.tests.test_perm_groups.test_random_pr()
sympy.combinatorics.tests.test_perm_groups.test_random_stab()
sympy.combinatorics.tests.test_perm_groups.test_rubik()
sympy.combinatorics.tests.test_perm_groups.test_rubik1()
sympy.combinatorics.tests.test_perm_groups.test_schreier_sims_incremental()
sympy.combinatorics.tests.test_perm_groups.test_schreier_sims_random()
sympy.combinatorics.tests.test_perm_groups.test_schreier_vector()
sympy.combinatorics.tests.test_perm_groups.test_stabilizer()
sympy.combinatorics.tests.test_perm_groups.test_subgroup_search()
sympy.combinatorics.tests.test_perm_groups.test_subgroup_search2()
sympy.combinatorics.tests.test_perm_groups.test_transitivity_degree()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_polyhedron.py----------------------------------------
A:sympy.combinatorics.tests.test_polyhedron.corners->tuple(symbols('A:H'))
A:sympy.combinatorics.tests.test_polyhedron.cube->Polyhedron(corners, faces, pgroup)
A:sympy.combinatorics.tests.test_polyhedron.got->set()
A:sympy.combinatorics.tests.test_polyhedron.P->h.copy()
sympy.combinatorics.tests.test_polyhedron.test_polyhedron()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_named_groups.py----------------------------------------
A:sympy.combinatorics.tests.test_named_groups.G->AlternatingGroup(5)
A:sympy.combinatorics.tests.test_named_groups.elements->list(G.generate())
A:sympy.combinatorics.tests.test_named_groups.H->AlternatingGroup(1)
A:sympy.combinatorics.tests.test_named_groups.L->AlternatingGroup(2)
A:sympy.combinatorics.tests.test_named_groups.A->AbelianGroup(3, 3, 3)
sympy.combinatorics.tests.test_named_groups.test_AbelianGroup()
sympy.combinatorics.tests.test_named_groups.test_AlternatingGroup()
sympy.combinatorics.tests.test_named_groups.test_CyclicGroup()
sympy.combinatorics.tests.test_named_groups.test_DihedralGroup()
sympy.combinatorics.tests.test_named_groups.test_SymmetricGroup()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_partitions.py----------------------------------------
A:sympy.combinatorics.tests.test_partitions.a->a.prev_lex().prev_lex()
A:sympy.combinatorics.tests.test_partitions.b->a.prev_lex().prev_lex().next_lex()
A:sympy.combinatorics.tests.test_partitions.c->IntegerPartition([1, 3, 4])
A:sympy.combinatorics.tests.test_partitions.d->IntegerPartition(8, {1: 3, 3: 1, 2: 1})
A:sympy.combinatorics.tests.test_partitions.next->set()
A:sympy.combinatorics.tests.test_partitions.prev->set()
A:sympy.combinatorics.tests.test_partitions.ans->set([IntegerPartition(p) for p in partitions(i)])
A:sympy.combinatorics.tests.test_partitions.n->len(ans)
sympy.combinatorics.tests.test_partitions.test_integer_partition()
sympy.combinatorics.tests.test_partitions.test_partition()
sympy.combinatorics.tests.test_partitions.test_rgs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_prufer.py----------------------------------------
A:sympy.combinatorics.tests.test_prufer.a->sorted(t.tree_repr)
A:sympy.combinatorics.tests.test_prufer.(e, n)->sympy.combinatorics.prufer.Prufer.edges(*t)
A:sympy.combinatorics.tests.test_prufer.t->Prufer(e, n)
sympy.combinatorics.tests.test_prufer.test_prufer()
sympy.combinatorics.tests.test_prufer.test_round_trip()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_testutil.py----------------------------------------
A:sympy.combinatorics.tests.test_testutil.S->SymmetricGroup(5)
A:sympy.combinatorics.tests.test_testutil.els->list(S.generate_dimino())
A:sympy.combinatorics.tests.test_testutil.A->AlternatingGroup(5)
A:sympy.combinatorics.tests.test_testutil.triv->PermutationGroup([Permutation([0, 1, 2])])
A:sympy.combinatorics.tests.test_testutil.C->CyclicGroup(5)
sympy.combinatorics.tests.test_testutil.test_cmp_perm_lists()
sympy.combinatorics.tests.test_testutil.test_naive_list_centralizer()
sympy.combinatorics.tests.test_testutil.test_verify_bsgs()
sympy.combinatorics.tests.test_testutil.test_verify_centralizer()
sympy.combinatorics.tests.test_testutil.test_verify_normal_closure()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_graycode.py----------------------------------------
A:sympy.combinatorics.tests.test_graycode.g->GrayCode(2)
A:sympy.combinatorics.tests.test_graycode.a->random_bitstring(5)
sympy.combinatorics.tests.test_graycode.test_graycode()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/combinatorics/tests/test_util.py----------------------------------------
A:sympy.combinatorics.tests.test_util.perm1->Permutation([[0, 1, 2, 3, 4, 5, 6], [7], [8], [9]])
A:sympy.combinatorics.tests.test_util.perm2->Permutation([[0, 1, 2, 3, 4, 5], [6, 7, 8, 9]])
A:sympy.combinatorics.tests.test_util.perm3->Permutation([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])
A:sympy.combinatorics.tests.test_util.D->DihedralGroup(2)
A:sympy.combinatorics.tests.test_util.member->Permutation([4, 0, 1, 2, 3])
A:sympy.combinatorics.tests.test_util.not_member1->Permutation([0, 1, 4, 3, 2])
A:sympy.combinatorics.tests.test_util.not_member2->Permutation([3, 1, 4, 2, 0])
A:sympy.combinatorics.tests.test_util.identity->Permutation([0, 1, 2, 3, 4])
A:sympy.combinatorics.tests.test_util.res1->_strip(member, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.res2->_strip(not_member1, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.res3->_strip(not_member2, D.base, D.basic_orbits, D.basic_transversals)
A:sympy.combinatorics.tests.test_util.S->SymmetricGroup(10)
A:sympy.combinatorics.tests.test_util.strong_gens_distr->_distribute_gens_by_base(base, strong_gens)
A:sympy.combinatorics.tests.test_util.result->_handle_precomputed_bsgs(base, strong_gens)
A:sympy.combinatorics.tests.test_util.base_len->len(base)
A:sympy.combinatorics.tests.test_util.A->AlternatingGroup(7)
A:sympy.combinatorics.tests.test_util.(base, strong_gens)->DihedralGroup(2).schreier_sims_incremental()
A:sympy.combinatorics.tests.test_util.new_gens->_remove_gens(base, strong_gens)
sympy.combinatorics.tests.test_util.test_base_ordering()
sympy.combinatorics.tests.test_util.test_check_cycles_alt_sym()
sympy.combinatorics.tests.test_util.test_distribute_gens_by_base()
sympy.combinatorics.tests.test_util.test_handle_precomputed_bsgs()
sympy.combinatorics.tests.test_util.test_orbits_transversals_from_bsgs()
sympy.combinatorics.tests.test_util.test_remove_gens()
sympy.combinatorics.tests.test_util.test_strip()
sympy.combinatorics.tests.test_util.test_strong_gens_from_distr()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/rn.py----------------------------------------
A:sympy.diffgeom.rn.R2->Manifold('R^2', 2)
A:sympy.diffgeom.rn.R2_origin->Patch('origin', R2)
A:sympy.diffgeom.rn.R2_r->CoordSystem('rectangular', R2_origin, ['x', 'y'])
A:sympy.diffgeom.rn.R2_p->CoordSystem('polar', R2_origin, ['r', 'theta'])
A:sympy.diffgeom.rn.(R2.x, R2.y)(R2_origin.x, R2_origin.y)(R2_r.x, R2_r.y)->CoordSystem('rectangular', R2_origin, ['x', 'y']).coord_functions()
A:sympy.diffgeom.rn.(R2.r, R2.theta)(R2_origin.r, R2_origin.theta)(R2_p.r, R2_p.theta)->CoordSystem('polar', R2_origin, ['r', 'theta']).coord_functions()
A:sympy.diffgeom.rn.(R2.e_x, R2.e_y)(R2_origin.e_x, R2_origin.e_y)(R2_r.e_x, R2_r.e_y)->CoordSystem('rectangular', R2_origin, ['x', 'y']).base_vectors()
A:sympy.diffgeom.rn.(R2.e_r, R2.e_theta)(R2_origin.e_r, R2_origin.e_theta)(R2_p.e_r, R2_p.e_theta)->CoordSystem('polar', R2_origin, ['r', 'theta']).base_vectors()
A:sympy.diffgeom.rn.(R2.dx, R2.dy)(R2_origin.dx, R2_origin.dy)(R2_r.dx, R2_r.dy)->CoordSystem('rectangular', R2_origin, ['x', 'y']).base_oneforms()
A:sympy.diffgeom.rn.(R2.dr, R2.dtheta)(R2_origin.dr, R2_origin.dtheta)(R2_p.dr, R2_p.dtheta)->CoordSystem('polar', R2_origin, ['r', 'theta']).base_oneforms()
A:sympy.diffgeom.rn.R3->Manifold('R^3', 3)
A:sympy.diffgeom.rn.R3_origin->Patch('origin', R3)
A:sympy.diffgeom.rn.R3_r->CoordSystem('rectangular', R3_origin, ['x', 'y', 'z'])
A:sympy.diffgeom.rn.R3_c->CoordSystem('cylindrical', R3_origin, ['rho', 'psi', 'z'])
A:sympy.diffgeom.rn.R3_s->CoordSystem('spherical', R3_origin, ['r', 'theta', 'phi'])
A:sympy.diffgeom.rn.(R3_r.x, R3_r.y, R3_r.z)->CoordSystem('rectangular', R3_origin, ['x', 'y', 'z']).coord_functions()
A:sympy.diffgeom.rn.(R3_c.rho, R3_c.psi, R3_c.z)->CoordSystem('cylindrical', R3_origin, ['rho', 'psi', 'z']).coord_functions()
A:sympy.diffgeom.rn.(R3_s.r, R3_s.theta, R3_s.phi)->CoordSystem('spherical', R3_origin, ['r', 'theta', 'phi']).coord_functions()
A:sympy.diffgeom.rn.(R3_r.e_x, R3_r.e_y, R3_r.e_z)->CoordSystem('rectangular', R3_origin, ['x', 'y', 'z']).base_vectors()
A:sympy.diffgeom.rn.(R3_c.e_rho, R3_c.e_psi, R3_c.e_z)->CoordSystem('cylindrical', R3_origin, ['rho', 'psi', 'z']).base_vectors()
A:sympy.diffgeom.rn.(R3_s.e_r, R3_s.e_theta, R3_s.e_phi)->CoordSystem('spherical', R3_origin, ['r', 'theta', 'phi']).base_vectors()
A:sympy.diffgeom.rn.(R3_r.dx, R3_r.dy, R3_r.dz)->CoordSystem('rectangular', R3_origin, ['x', 'y', 'z']).base_oneforms()
A:sympy.diffgeom.rn.(R3_c.drho, R3_c.dpsi, R3_c.dz)->CoordSystem('cylindrical', R3_origin, ['rho', 'psi', 'z']).base_oneforms()
A:sympy.diffgeom.rn.(R3_s.dr, R3_s.dtheta, R3_s.dphi)->CoordSystem('spherical', R3_origin, ['r', 'theta', 'phi']).base_oneforms()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/diffgeom.py----------------------------------------
A:sympy.diffgeom.diffgeom.self._dummy->Dummy()
A:sympy.diffgeom.diffgeom.(from_coords, to_exprs)->dummyfy(from_coords, to_exprs)
A:sympy.diffgeom.diffgeom.to_sys.transforms[self]->self._inv_transf(from_coords, to_exprs)
A:sympy.diffgeom.diffgeom.inv_to->solve([t[0] - t[1] for t in zip(inv_from, to_exprs)], list(from_coords))
A:sympy.diffgeom.diffgeom.coords->point.coords(self._coord_sys)
A:sympy.diffgeom.diffgeom.with_dummies->self.coord_tuple_transform_to(to_sys, self._dummies).jacobian(self._dummies)
A:sympy.diffgeom.diffgeom.self._coords->Matrix(coords)
A:sympy.diffgeom.diffgeom.free_symbols->set()
A:sympy.diffgeom.diffgeom.base_scalars->list(scalar_field.atoms(BaseScalarField))
A:sympy.diffgeom.diffgeom.d_result->d_result.subs(list(zip(d_funcs, vectors))).subs(list(zip(d_funcs, vectors)))
A:sympy.diffgeom.diffgeom.jac->cs.jacobian(to_sys, cs.coord_functions())
A:sympy.diffgeom.diffgeom.result->d_result.subs(list(zip(d_funcs, vectors))).subs(list(zip(d_funcs, vectors))).subs(list(zip(to_subs, derivs)))
A:sympy.diffgeom.diffgeom.coord_sys->expr.expand().atoms(CoordSystem).pop()
A:sympy.diffgeom.diffgeom.k->len(vector_fields)
A:sympy.diffgeom.diffgeom.t->f.rcall(*(c,) + v[:i] + v[i + 1:j] + v[j + 1:])
A:sympy.diffgeom.diffgeom.c->Commutator(v[i], v[j])
A:sympy.diffgeom.diffgeom.scalar->Mul(*[m for m in args if covariant_order(m) == 0])
A:sympy.diffgeom.diffgeom.tot_order->covariant_order(self)
A:sympy.diffgeom.diffgeom.tot_args->len(v_fields)
A:sympy.diffgeom.diffgeom.perms->permutations(vector_fields)
A:sympy.diffgeom.diffgeom.tensor_prod->TensorProduct(*self.args)
A:sympy.diffgeom.diffgeom.expr_form_ord->covariant_order(expr)
A:sympy.diffgeom.diffgeom.lead_term->v(expr(*args))
A:sympy.diffgeom.diffgeom.rest->Add(*[Mul(*args[:i] + (Commutator(v, args[i]),) + args[i + 1:]) for i in range(len(args))])
A:sympy.diffgeom.diffgeom.field->vectors_in_basis(field, self._coord_sys)
A:sympy.diffgeom.diffgeom.wrt_vector->self._coord_sys.base_vector(self._index)
A:sympy.diffgeom.diffgeom.wrt_scalar->self._coord_sys.coord_function(self._index)
A:sympy.diffgeom.diffgeom.vectors->expr.expand().atoms(CoordSystem).pop().base_vectors()
A:sympy.diffgeom.diffgeom.d->Add(*[self._christoffel[k][wrt_vector._index][v._index] * v._coord_sys.base_vector(k) for k in range(v._coord_sys.dim)])
A:sympy.diffgeom.diffgeom.coord_functions->expr.expand().atoms(CoordSystem).pop().coord_functions()
A:sympy.diffgeom.diffgeom.arbitrary_p->Point(coord_sys, gammas)
A:sympy.diffgeom.diffgeom.d_args->Matrix([s.as_dummy() for s in args])
A:sympy.diffgeom.diffgeom.d_exprs->Matrix([sympify(expr).subs(list(zip(args, d_args))) for expr in exprs])
A:sympy.diffgeom.diffgeom.expr->expr.expand().expand()
A:sympy.diffgeom.diffgeom.matrix->matrix.subs(list(zip(s_fields, dums))).inv().subs(list(zip(dums, s_fields))).subs(list(zip(s_fields, dums))).inv().subs(list(zip(dums, s_fields)))
A:sympy.diffgeom.diffgeom.indices->list(range(coord_sys.dim))
A:sympy.diffgeom.diffgeom.ch_1st->metric_to_Christoffel_1st(expr)
A:sympy.diffgeom.diffgeom.s_fields->list(s_fields)
A:sympy.diffgeom.diffgeom.ch_2nd->metric_to_Christoffel_2nd(expr)
A:sympy.diffgeom.diffgeom.riemann->metric_to_Riemann_components(expr)
sympy.diffgeom.BaseCovarDerivativeOp(self,coord_sys,index,christoffel)
sympy.diffgeom.BaseScalarField(self,coord_sys,index)
sympy.diffgeom.BaseScalarField.doit(self)
sympy.diffgeom.BaseVectorField(self,coord_sys,index)
sympy.diffgeom.Commutator(self,v1,v2)
sympy.diffgeom.CoordSystem(self,name,patch,names=None)
sympy.diffgeom.CoordSystem._fill_gaps_in_transformations()
sympy.diffgeom.CoordSystem._inv_transf(from_coords,to_exprs)
sympy.diffgeom.CoordSystem._latex(self,printer,*args)
sympy.diffgeom.CoordSystem.base_oneform(self,coord_index)
sympy.diffgeom.CoordSystem.base_oneforms(self)
sympy.diffgeom.CoordSystem.base_vector(self,coord_index)
sympy.diffgeom.CoordSystem.base_vectors(self)
sympy.diffgeom.CoordSystem.connect_to(self,to_sys,from_coords,to_exprs,inverse=True,fill_in_gaps=False)
sympy.diffgeom.CoordSystem.coord_function(self,coord_index)
sympy.diffgeom.CoordSystem.coord_functions(self)
sympy.diffgeom.CoordSystem.coord_tuple_transform_to(self,to_sys,coords)
sympy.diffgeom.CoordSystem.dim(self)
sympy.diffgeom.CoordSystem.jacobian(self,to_sys,coords)
sympy.diffgeom.CoordSystem.point(self,coords)
sympy.diffgeom.CoordSystem.point_to_coords(self,point)
sympy.diffgeom.CovarDerivativeOp(self,wrt,christoffel)
sympy.diffgeom.CovarDerivativeOp._latex(self,printer,*args)
sympy.diffgeom.Differential(self,form_field)
sympy.diffgeom.LieDerivative(self,v_field,expr)
sympy.diffgeom.Manifold(self,name,dim)
sympy.diffgeom.Manifold._latex(self,printer,*args)
sympy.diffgeom.Patch(self,name,manifold)
sympy.diffgeom.Patch._latex(self,printer,*args)
sympy.diffgeom.Patch.dim(self)
sympy.diffgeom.Point(self,coord_sys,coords)
sympy.diffgeom.Point.coords(self,to_sys=None)
sympy.diffgeom.Point.free_symbols(self)
sympy.diffgeom.TensorProduct(self,*args)
sympy.diffgeom.TensorProduct._latex(self,printer,*args)
sympy.diffgeom.WedgeProduct(self,*vector_fields)
sympy.diffgeom.contravariant_order(expr,_strict=False)
sympy.diffgeom.covariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp(self,coord_sys,index,christoffel)
sympy.diffgeom.diffgeom.BaseCovarDerivativeOp.__init__(self,coord_sys,index,christoffel)
sympy.diffgeom.diffgeom.BaseScalarField(self,coord_sys,index)
sympy.diffgeom.diffgeom.BaseScalarField.__init__(self,coord_sys,index)
sympy.diffgeom.diffgeom.BaseScalarField.doit(self)
sympy.diffgeom.diffgeom.BaseVectorField(self,coord_sys,index)
sympy.diffgeom.diffgeom.BaseVectorField.__init__(self,coord_sys,index)
sympy.diffgeom.diffgeom.Commutator(self,v1,v2)
sympy.diffgeom.diffgeom.Commutator.__init__(self,v1,v2)
sympy.diffgeom.diffgeom.CoordSystem(self,name,patch,names=None)
sympy.diffgeom.diffgeom.CoordSystem.__init__(self,name,patch,names=None)
sympy.diffgeom.diffgeom.CoordSystem._fill_gaps_in_transformations()
sympy.diffgeom.diffgeom.CoordSystem._inv_transf(from_coords,to_exprs)
sympy.diffgeom.diffgeom.CoordSystem._latex(self,printer,*args)
sympy.diffgeom.diffgeom.CoordSystem.base_oneform(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.base_oneforms(self)
sympy.diffgeom.diffgeom.CoordSystem.base_vector(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.base_vectors(self)
sympy.diffgeom.diffgeom.CoordSystem.connect_to(self,to_sys,from_coords,to_exprs,inverse=True,fill_in_gaps=False)
sympy.diffgeom.diffgeom.CoordSystem.coord_function(self,coord_index)
sympy.diffgeom.diffgeom.CoordSystem.coord_functions(self)
sympy.diffgeom.diffgeom.CoordSystem.coord_tuple_transform_to(self,to_sys,coords)
sympy.diffgeom.diffgeom.CoordSystem.dim(self)
sympy.diffgeom.diffgeom.CoordSystem.jacobian(self,to_sys,coords)
sympy.diffgeom.diffgeom.CoordSystem.point(self,coords)
sympy.diffgeom.diffgeom.CoordSystem.point_to_coords(self,point)
sympy.diffgeom.diffgeom.CovarDerivativeOp(self,wrt,christoffel)
sympy.diffgeom.diffgeom.CovarDerivativeOp.__init__(self,wrt,christoffel)
sympy.diffgeom.diffgeom.CovarDerivativeOp._latex(self,printer,*args)
sympy.diffgeom.diffgeom.Differential(self,form_field)
sympy.diffgeom.diffgeom.Differential.__init__(self,form_field)
sympy.diffgeom.diffgeom.LieDerivative(self,v_field,expr)
sympy.diffgeom.diffgeom.LieDerivative.__init__(self,v_field,expr)
sympy.diffgeom.diffgeom.Manifold(self,name,dim)
sympy.diffgeom.diffgeom.Manifold.__init__(self,name,dim)
sympy.diffgeom.diffgeom.Manifold._latex(self,printer,*args)
sympy.diffgeom.diffgeom.Patch(self,name,manifold)
sympy.diffgeom.diffgeom.Patch.__init__(self,name,manifold)
sympy.diffgeom.diffgeom.Patch._latex(self,printer,*args)
sympy.diffgeom.diffgeom.Patch.dim(self)
sympy.diffgeom.diffgeom.Point(self,coord_sys,coords)
sympy.diffgeom.diffgeom.Point.__init__(self,coord_sys,coords)
sympy.diffgeom.diffgeom.Point.coords(self,to_sys=None)
sympy.diffgeom.diffgeom.Point.free_symbols(self)
sympy.diffgeom.diffgeom.TensorProduct(self,*args)
sympy.diffgeom.diffgeom.TensorProduct.__init__(self,*args)
sympy.diffgeom.diffgeom.TensorProduct._latex(self,printer,*args)
sympy.diffgeom.diffgeom.WedgeProduct(self,*vector_fields)
sympy.diffgeom.diffgeom.WedgeProduct.__call__(self,*vector_fields)
sympy.diffgeom.diffgeom.contravariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.covariant_order(expr,_strict=False)
sympy.diffgeom.diffgeom.dummyfy(args,exprs)
sympy.diffgeom.diffgeom.intcurve_diffequ(vector_field,param,start_point,coord_sys=None)
sympy.diffgeom.diffgeom.intcurve_series(vector_field,param,start_point,n=6,coord_sys=None,coeffs=False)
sympy.diffgeom.diffgeom.list_to_tuple_rec(the_list)
sympy.diffgeom.diffgeom.metric_to_Christoffel_1st(expr)
sympy.diffgeom.diffgeom.metric_to_Christoffel_2nd(expr)
sympy.diffgeom.diffgeom.metric_to_Ricci_components(expr)
sympy.diffgeom.diffgeom.metric_to_Riemann_components(expr)
sympy.diffgeom.diffgeom.twoform_to_matrix(expr)
sympy.diffgeom.diffgeom.vectors_in_basis(expr,to_sys)
sympy.diffgeom.intcurve_diffequ(vector_field,param,start_point,coord_sys=None)
sympy.diffgeom.intcurve_series(vector_field,param,start_point,n=6,coord_sys=None,coeffs=False)
sympy.diffgeom.metric_to_Christoffel_1st(expr)
sympy.diffgeom.metric_to_Christoffel_2nd(expr)
sympy.diffgeom.metric_to_Ricci_components(expr)
sympy.diffgeom.metric_to_Riemann_components(expr)
sympy.diffgeom.twoform_to_matrix(expr)
sympy.diffgeom.vectors_in_basis(expr,to_sys)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/tests/test_class_structure.py----------------------------------------
A:sympy.diffgeom.tests.test_class_structure.m->Manifold('m', 2)
A:sympy.diffgeom.tests.test_class_structure.p->Patch('p', m)
A:sympy.diffgeom.tests.test_class_structure.cs->CoordSystem('cs', p, ['a', 'b'])
A:sympy.diffgeom.tests.test_class_structure.cs_noname->CoordSystem('cs', p)
A:sympy.diffgeom.tests.test_class_structure.(x, y)->symbols('x y')
A:sympy.diffgeom.tests.test_class_structure.f->Function('f')
A:sympy.diffgeom.tests.test_class_structure.(s1, s2)->CoordSystem('cs', p, ['a', 'b']).coord_functions()
A:sympy.diffgeom.tests.test_class_structure.(v1, v2)->CoordSystem('cs', p, ['a', 'b']).base_vectors()
A:sympy.diffgeom.tests.test_class_structure.(f1, f2)->CoordSystem('cs', p, ['a', 'b']).base_oneforms()
A:sympy.diffgeom.tests.test_class_structure.point->Point(cs, [x, y])
sympy.diffgeom.tests.test_class_structure.test_point()
sympy.diffgeom.tests.test_class_structure.test_rebuild()
sympy.diffgeom.tests.test_class_structure.test_subs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/tests/test_hyperbolic_space.py----------------------------------------
A:sympy.diffgeom.tests.test_hyperbolic_space.automat->twoform_to_matrix(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.mat->diag(y ** (-2), y ** (-2))
A:sympy.diffgeom.tests.test_hyperbolic_space.gamma1->metric_to_Christoffel_1st(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.gamma2->metric_to_Christoffel_2nd(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.Rm->metric_to_Riemann_components(g)
A:sympy.diffgeom.tests.test_hyperbolic_space.Ric->metric_to_Ricci_components(g)
sympy.diffgeom.tests.test_hyperbolic_space.test_H2()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/tests/test_diffgeom.py----------------------------------------
A:sympy.diffgeom.tests.test_diffgeom.(x0, y0, r0, theta0)->symbols('x0, y0, r0, theta0', real=True)
A:sympy.diffgeom.tests.test_diffgeom.point_r->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_diffgeom.point_p->sympy.diffgeom.rn.R2_p.point([r0, theta0])
A:sympy.diffgeom.tests.test_diffgeom.(a, b)->symbols('a b', positive=True)
A:sympy.diffgeom.tests.test_diffgeom.m->Matrix([[a], [b], [c]])
A:sympy.diffgeom.tests.test_diffgeom.(a, b, c)->symbols('a b c', positive=True)
A:sympy.diffgeom.tests.test_diffgeom.(x, y)->symbols('x, y')
A:sympy.diffgeom.tests.test_diffgeom.p->sympy.diffgeom.rn.R2_r.point([x, y])
A:sympy.diffgeom.tests.test_diffgeom.c->Commutator(R2.e_x, R2.e_r)
A:sympy.diffgeom.tests.test_diffgeom.dxdy->Differential(xdy)
A:sympy.diffgeom.tests.test_diffgeom.ch->metric_to_Christoffel_2nd(TP(R2.dx, R2.dx) + TP(R2.dy, R2.dy))
A:sympy.diffgeom.tests.test_diffgeom.cvd->CovarDerivativeOp(R2.x * R2.e_x, ch)
A:sympy.diffgeom.tests.test_diffgeom.t->symbols('t')
A:sympy.diffgeom.tests.test_diffgeom.start_point->sympy.diffgeom.rn.R2_r.point([1, 0])
A:sympy.diffgeom.tests.test_diffgeom.(equations, init_cond)->intcurve_diffequ(vector_field, t, start_point, R2_p)
A:sympy.diffgeom.tests.test_diffgeom.two_form->Differential(R2.x * R2.dr + R2.r * R2.dx)
A:sympy.diffgeom.tests.test_diffgeom.twoform_not_TP->WedgeProduct(R2.dx, R2.dy)
A:sympy.diffgeom.tests.test_diffgeom.a->Symbol('a')
sympy.diffgeom.tests.test_diffgeom.test_R2()
sympy.diffgeom.tests.test_diffgeom.test_R3()
sympy.diffgeom.tests.test_diffgeom.test_commutator()
sympy.diffgeom.tests.test_diffgeom.test_correct_arguments()
sympy.diffgeom.tests.test_diffgeom.test_covar_deriv()
sympy.diffgeom.tests.test_diffgeom.test_differential()
sympy.diffgeom.tests.test_diffgeom.test_helpers_and_coordinate_dependent()
sympy.diffgeom.tests.test_diffgeom.test_intcurve_diffequ()
sympy.diffgeom.tests.test_diffgeom.test_lie_derivative()
sympy.diffgeom.tests.test_diffgeom.test_point()
sympy.diffgeom.tests.test_diffgeom.test_products()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/diffgeom/tests/test_function_diffgeom_book.py----------------------------------------
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0, r0, theta0)->symbols('x0, y0, r0, theta0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y)->symbols('x, y', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.f->Function('f')
A:sympy.diffgeom.tests.test_function_diffgeom_book.field->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.p1_in_rect->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p1_in_polar->sympy.diffgeom.rn.R2_p.point([sqrt(x0 ** 2 + y0 ** 2), atan2(y0, x0)])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p_r->sympy.diffgeom.rn.R2_r.point([x0, y0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.p_p->sympy.diffgeom.rn.R2_p.point([r0, theta0])
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0)->symbols('x0, y0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y, t)->symbols('x, y, t', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.b1->Function('b1')
A:sympy.diffgeom.tests.test_function_diffgeom_book.b2->Function('b2')
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.series->intcurve_series(circ, t, R2_r.point([1, 0]), coeffs=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(series_x, series_y)->zip(*series)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x0, y0, theta0)->symbols('x0, y0, theta0', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(x, y, r, theta)->symbols('x, y, r, theta', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.r0->symbols('r0', positive=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field_r->f(R2.x, R2.y)
A:sympy.diffgeom.tests.test_function_diffgeom_book.df->Differential(s_field_p)
A:sympy.diffgeom.tests.test_function_diffgeom_book.s_field_p->f(R2.r, R2.theta)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(u0, u1, u2, v0, v1, v2, w0, w1, w2)->symbols('u0:3, v0:3, w0:3', real=True)
A:sympy.diffgeom.tests.test_function_diffgeom_book.wp->WedgeProduct(R3_r.dx, R3_r.dy, R3_r.dz)
A:sympy.diffgeom.tests.test_function_diffgeom_book.(a, b, c)->symbols('a, b, c', cls=Function)
A:sympy.diffgeom.tests.test_function_diffgeom_book.a_f->a(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.b_f->b(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.c_f->c(R3_r.x, R3_r.y, R3_r.z)
A:sympy.diffgeom.tests.test_function_diffgeom_book.dtheta->Differential(theta)
A:sympy.diffgeom.tests.test_function_diffgeom_book.da->Differential(a_f)
A:sympy.diffgeom.tests.test_function_diffgeom_book.db->Differential(b_f)
A:sympy.diffgeom.tests.test_function_diffgeom_book.dc->Differential(c_f)
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch2()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch3()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch4()
sympy.diffgeom.tests.test_function_diffgeom_book.test_functional_diffgeom_ch6()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/printing.py----------------------------------------
A:sympy.interactive.printing.dvioptions->dvi.split()
A:sympy.interactive.printing.exprbuffer->BytesIO()
A:sympy.interactive.printing.o->o.replace('\\overline', '\\bar').replace('\\overline', '\\bar')
A:sympy.interactive.printing.s->s.strip('$').strip('$')
A:sympy.interactive.printing.out->stringify_func(arg)
A:sympy.interactive.printing.ip->get_ipython()
A:sympy.interactive.printing.in_ipython->_is_ipython(ip)
sympy.init_printing(pretty_print=True,order=None,use_unicode=None,use_latex=None,wrap_line=None,num_columns=None,no_global=False,ip=None,euler=False,forecolor='Black',backcolor='Transparent',fontsize='10pt',latex_mode='equation*',print_builtin=True,str_printer=None,pretty_printer=None,latex_printer=None)
sympy.interactive.printing._init_ipython_printing(ip,stringify_func,use_latex,euler,forecolor,backcolor,fontsize,latex_mode,print_builtin,latex_printer)
sympy.interactive.printing._init_python_printing(stringify_func)
sympy.interactive.printing._is_ipython(shell)
sympy.interactive.printing.init_printing(pretty_print=True,order=None,use_unicode=None,use_latex=None,wrap_line=None,num_columns=None,no_global=False,ip=None,euler=False,forecolor='Black',backcolor='Transparent',fontsize='10pt',latex_mode='equation*',print_builtin=True,str_printer=None,pretty_printer=None,latex_printer=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/session.py----------------------------------------
A:sympy.interactive.session.cache->os.getenv('SYMPY_USE_CACHE')
A:sympy.interactive.session.g->generate_tokens(StringIO(s).readline)
A:sympy.interactive.session.hasshell->hasattr(app, 'shell')
A:sympy.interactive.session.cell->int_to_Integer(cell)
A:sympy.interactive.session.re_nameerror->re.compile("name '(?P<symbol>[A-Za-z_][A-Za-z0-9_]*)' is not defined")
A:sympy.interactive.session.match->re.compile("name '(?P<symbol>[A-Za-z_][A-Za-z0-9_]*)' is not defined").match(str(value))
A:sympy.interactive.session.stb->self.InteractiveTB.structured_traceback(etype, value, tb, tb_offset=tb_offset)
A:sympy.interactive.session.app->IPython.frontend.terminal.ipapp.TerminalIPythonApp()
A:sympy.interactive.session.readline->import_module('readline')
A:sympy.interactive.session.history->os.path.expanduser('~/.sympy-history')
A:sympy.interactive.session.ip->init_ipython_session(argv=argv, auto_symbols=auto_symbols, auto_int_to_Integer=auto_int_to_Integer)
A:sympy.interactive.session.in_ipython->bool(ip)
A:sympy.interactive.session.message->_make_message(ipython, quiet, _preexec_source)
sympy.init_session(ipython=None,pretty_print=True,order=None,use_unicode=None,use_latex=None,quiet=False,auto_symbols=False,auto_int_to_Integer=False,argv=[])
sympy.interactive.session._make_message(ipython=True,quiet=False,source=None)
sympy.interactive.session.enable_automatic_int_sympification(app)
sympy.interactive.session.enable_automatic_symbols(app)
sympy.interactive.session.init_ipython_session(argv=[],auto_symbols=False,auto_int_to_Integer=False)
sympy.interactive.session.init_python_session()
sympy.interactive.session.init_session(ipython=None,pretty_print=True,order=None,use_unicode=None,use_latex=None,quiet=False,auto_symbols=False,auto_int_to_Integer=False,argv=[])
sympy.interactive.session.int_to_Integer(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/ipythonprinting.py----------------------------------------
sympy.interactive.ipythonprinting.load_ipython_extension(ip)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/tests/test_ipython.py----------------------------------------
A:sympy.interactive.tests.test_ipython.ipython->import_module('IPython', min_module_version='0.11')
A:sympy.interactive.tests.test_ipython.readline->import_module('readline')
A:sympy.interactive.tests.test_ipython.app->init_ipython_session()
sympy.interactive.tests.test_ipython.test_automatic_symbols()
sympy.interactive.tests.test_ipython.test_int_to_Integer()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/tests/test_ipythonprinting.py----------------------------------------
A:sympy.interactive.tests.test_ipythonprinting.ipython->import_module('IPython', min_module_version='0.11')
A:sympy.interactive.tests.test_ipythonprinting.app->init_ipython_session()
sympy.interactive.tests.test_ipythonprinting.test_ipythonprinting()
sympy.interactive.tests.test_ipythonprinting.test_matplotlib_bad_latex()
sympy.interactive.tests.test_ipythonprinting.test_print_builtin_option()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/interactive/tests/test_interactive.py----------------------------------------
sympy.interactive.tests.test_interactive.test_int_to_Integer()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/bsplines.py----------------------------------------
A:sympy.functions.special.bsplines.rv->Piecewise(*new_args)
A:sympy.functions.special.bsplines.n_intervals->len(b1.args)
A:sympy.functions.special.bsplines.d->int(d)
A:sympy.functions.special.bsplines.n->int(n)
A:sympy.functions.special.bsplines.n_knots->len(knots)
A:sympy.functions.special.bsplines.result->_add_splines(A, b1, B, b2)
A:sympy.functions.special.bsplines.b2->bspline_basis(d - 1, knots, n + 1, x, close)
A:sympy.functions.special.bsplines.b1->bspline_basis(d - 1, knots, n, x, close and (B == S.Zero or b2 == S.Zero))
sympy.bspline_basis(d,knots,n,x,close=True)
sympy.bspline_basis_set(d,knots,x)
sympy.functions.special.bsplines._add_splines(c,b1,d,b2)
sympy.functions.special.bsplines.bspline_basis(d,knots,n,x,close=True)
sympy.functions.special.bsplines.bspline_basis_set(d,knots,x)
sympy.special.bsplines._add_splines(c,b1,d,b2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/spherical_harmonics.py----------------------------------------
A:sympy.functions.special.spherical_harmonics._x->Dummy('x')
A:sympy.functions.special.spherical_harmonics.term->term.xreplace({Abs(sin(theta)): sin(theta)}).xreplace({Abs(sin(theta)): sin(theta)})
A:sympy.functions.special.spherical_harmonics.n->self.args[0]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.m->self.args[1]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.theta->self.args[2]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.phi->self.args[3]._to_mpmath(prec)
A:sympy.functions.special.spherical_harmonics.res->sympy.mpmath.mp.spherharm(n, m, theta, phi)
sympy.Ynm(Function)
sympy.Ynm._eval_conjugate(self)
sympy.Ynm._eval_evalf(self,prec)
sympy.Ynm._eval_expand_func(self,**hints)
sympy.Ynm._eval_rewrite_as_cos(self,n,m,theta,phi)
sympy.Ynm._eval_rewrite_as_polynomial(self,n,m,theta,phi)
sympy.Ynm._eval_rewrite_as_sin(self,n,m,theta,phi)
sympy.Ynm.as_real_imag(self,deep=True,**hints)
sympy.Ynm.eval(cls,n,m,theta,phi)
sympy.Ynm.fdiff(self,argindex=4)
sympy.Ynm_c(n,m,theta,phi)
sympy.Znm(Function)
sympy.Znm.eval(cls,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm(Function)
sympy.functions.special.spherical_harmonics.Ynm._eval_conjugate(self)
sympy.functions.special.spherical_harmonics.Ynm._eval_evalf(self,prec)
sympy.functions.special.spherical_harmonics.Ynm._eval_expand_func(self,**hints)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_cos(self,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_polynomial(self,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm._eval_rewrite_as_sin(self,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm.as_real_imag(self,deep=True,**hints)
sympy.functions.special.spherical_harmonics.Ynm.eval(cls,n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Ynm.fdiff(self,argindex=4)
sympy.functions.special.spherical_harmonics.Ynm_c(n,m,theta,phi)
sympy.functions.special.spherical_harmonics.Znm(Function)
sympy.functions.special.spherical_harmonics.Znm.eval(cls,n,m,theta,phi)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/gamma_functions.py----------------------------------------
A:sympy.functions.special.gamma_functions.x->Dummy('x')
A:sympy.functions.special.gamma_functions.(coeff, tail)->arg.as_coeff_add()
A:sympy.functions.special.gamma_functions.intpart->floor(coeff)
A:sympy.functions.special.gamma_functions.tail->Add(*[C.Pow(z - i, e) for i in xrange(1, int(coeff) + 1)])
A:sympy.functions.special.gamma_functions.x0->self.args[0].limit(x, 0)
A:sympy.functions.special.gamma_functions.aa->printer._print(self.args[0])
A:sympy.functions.special.gamma_functions.(nx, n)->sympify(z).extract_branch_factor()
A:sympy.functions.special.gamma_functions.nx->unpolarify(z)
A:sympy.functions.special.gamma_functions.a->self.args[0]._to_mpmath(prec)
A:sympy.functions.special.gamma_functions.z->sympify(z)
A:sympy.functions.special.gamma_functions.res->sympy.mpmath.mp.gammainc(a, z, mp.inf)
A:sympy.functions.special.gamma_functions.o->sympy.core.C.Order(1 / z ** (2 * m - 1), x)
A:sympy.functions.special.gamma_functions.m->min(n, C.ceiling((n + S(1)) / 2))
A:sympy.functions.special.gamma_functions.fac->gamma(N)
A:sympy.functions.special.gamma_functions.(n, z)->list(map(sympify, (n, z)))
A:sympy.functions.special.gamma_functions.nz->unpolarify(z)
A:sympy.functions.special.gamma_functions.n->floor(1 - z)
A:sympy.functions.special.gamma_functions.t->sympify(z).extract_multiplicatively(S.ImaginaryUnit)
A:sympy.functions.special.gamma_functions.(coeff, z)->sympify(z).as_two_terms()
A:sympy.functions.special.gamma_functions.(p, q)->sympify(z).as_numer_denom()
A:sympy.functions.special.gamma_functions.k->Dummy('k')
A:sympy.functions.special.gamma_functions.f->self._eval_rewrite_as_intractable(*self.args)
sympy.digamma(x)
sympy.functions.special.gamma_functions.digamma(x)
sympy.functions.special.gamma_functions.gamma(Function)
sympy.functions.special.gamma_functions.gamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.gamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.gamma._eval_is_real(self)
sympy.functions.special.gamma_functions.gamma._eval_nseries(self,x,n,logx)
sympy.functions.special.gamma_functions.gamma._eval_rewrite_as_tractable(self,z)
sympy.functions.special.gamma_functions.gamma._latex(self,printer,exp=None)
sympy.functions.special.gamma_functions.gamma._latex_no_arg(printer)
sympy.functions.special.gamma_functions.gamma.eval(cls,arg)
sympy.functions.special.gamma_functions.gamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.loggamma(Function)
sympy.functions.special.gamma_functions.loggamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.loggamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.loggamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.loggamma._eval_is_real(self)
sympy.functions.special.gamma_functions.loggamma._eval_nseries(self,x,n,logx=None)
sympy.functions.special.gamma_functions.loggamma._eval_rewrite_as_intractable(self,z)
sympy.functions.special.gamma_functions.loggamma.eval(cls,z)
sympy.functions.special.gamma_functions.loggamma.fdiff(self,argindex=1)
sympy.functions.special.gamma_functions.lowergamma(Function)
sympy.functions.special.gamma_functions.lowergamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.lowergamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.lowergamma._eval_rewrite_as_expint(self,s,x)
sympy.functions.special.gamma_functions.lowergamma._eval_rewrite_as_uppergamma(self,s,x)
sympy.functions.special.gamma_functions.lowergamma._latex_no_arg(printer)
sympy.functions.special.gamma_functions.lowergamma.eval(cls,a,x)
sympy.functions.special.gamma_functions.lowergamma.fdiff(self,argindex=2)
sympy.functions.special.gamma_functions.polygamma(Function)
sympy.functions.special.gamma_functions.polygamma._eval_as_leading_term(self,x)
sympy.functions.special.gamma_functions.polygamma._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.gamma_functions.polygamma._eval_expand_func(self,**hints)
sympy.functions.special.gamma_functions.polygamma._eval_is_negative(self)
sympy.functions.special.gamma_functions.polygamma._eval_is_positive(self)
sympy.functions.special.gamma_functions.polygamma._eval_is_real(self)
sympy.functions.special.gamma_functions.polygamma._eval_rewrite_as_harmonic(self,n,z)
sympy.functions.special.gamma_functions.polygamma._eval_rewrite_as_zeta(self,n,z)
sympy.functions.special.gamma_functions.polygamma.eval(cls,n,z)
sympy.functions.special.gamma_functions.polygamma.fdiff(self,argindex=2)
sympy.functions.special.gamma_functions.trigamma(x)
sympy.functions.special.gamma_functions.uppergamma(Function)
sympy.functions.special.gamma_functions.uppergamma._eval_conjugate(self)
sympy.functions.special.gamma_functions.uppergamma._eval_evalf(self,prec)
sympy.functions.special.gamma_functions.uppergamma._eval_rewrite_as_expint(self,s,x)
sympy.functions.special.gamma_functions.uppergamma._eval_rewrite_as_lowergamma(self,s,x)
sympy.functions.special.gamma_functions.uppergamma.eval(cls,a,z)
sympy.functions.special.gamma_functions.uppergamma.fdiff(self,argindex=2)
sympy.gamma(Function)
sympy.gamma._eval_conjugate(self)
sympy.gamma._eval_expand_func(self,**hints)
sympy.gamma._eval_is_real(self)
sympy.gamma._eval_nseries(self,x,n,logx)
sympy.gamma._eval_rewrite_as_tractable(self,z)
sympy.gamma._latex(self,printer,exp=None)
sympy.gamma._latex_no_arg(printer)
sympy.gamma.eval(cls,arg)
sympy.gamma.fdiff(self,argindex=1)
sympy.loggamma(Function)
sympy.loggamma._eval_aseries(self,n,args0,x,logx)
sympy.loggamma._eval_conjugate(self)
sympy.loggamma._eval_expand_func(self,**hints)
sympy.loggamma._eval_is_real(self)
sympy.loggamma._eval_nseries(self,x,n,logx=None)
sympy.loggamma._eval_rewrite_as_intractable(self,z)
sympy.loggamma.eval(cls,z)
sympy.loggamma.fdiff(self,argindex=1)
sympy.lowergamma(Function)
sympy.lowergamma._eval_conjugate(self)
sympy.lowergamma._eval_evalf(self,prec)
sympy.lowergamma._eval_rewrite_as_expint(self,s,x)
sympy.lowergamma._eval_rewrite_as_uppergamma(self,s,x)
sympy.lowergamma._latex_no_arg(printer)
sympy.lowergamma.eval(cls,a,x)
sympy.lowergamma.fdiff(self,argindex=2)
sympy.polygamma(Function)
sympy.polygamma._eval_as_leading_term(self,x)
sympy.polygamma._eval_aseries(self,n,args0,x,logx)
sympy.polygamma._eval_expand_func(self,**hints)
sympy.polygamma._eval_is_negative(self)
sympy.polygamma._eval_is_positive(self)
sympy.polygamma._eval_is_real(self)
sympy.polygamma._eval_rewrite_as_harmonic(self,n,z)
sympy.polygamma._eval_rewrite_as_zeta(self,n,z)
sympy.polygamma.eval(cls,n,z)
sympy.polygamma.fdiff(self,argindex=2)
sympy.trigamma(x)
sympy.uppergamma(Function)
sympy.uppergamma._eval_conjugate(self)
sympy.uppergamma._eval_evalf(self,prec)
sympy.uppergamma._eval_rewrite_as_expint(self,s,x)
sympy.uppergamma._eval_rewrite_as_lowergamma(self,s,x)
sympy.uppergamma.eval(cls,a,z)
sympy.uppergamma.fdiff(self,argindex=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/beta_functions.py----------------------------------------
sympy.beta(Function)
sympy.beta._eval_conjugate(self)
sympy.beta._eval_expand_func(self,**hints)
sympy.beta._eval_is_real(self)
sympy.beta.eval(cls,x,y)
sympy.beta.fdiff(self,argindex)
sympy.functions.special.beta_functions.beta(Function)
sympy.functions.special.beta_functions.beta._eval_conjugate(self)
sympy.functions.special.beta_functions.beta._eval_expand_func(self,**hints)
sympy.functions.special.beta_functions.beta._eval_is_real(self)
sympy.functions.special.beta_functions.beta.eval(cls,x,y)
sympy.functions.special.beta_functions.beta.fdiff(self,argindex)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/elliptic_integrals.py----------------------------------------
A:sympy.functions.special.elliptic_integrals.fm->sqrt(1 - m * sin(z) ** 2)
sympy.elliptic_e(Function)
sympy.elliptic_e._eval_conjugate(self)
sympy.elliptic_e._eval_nseries(self,x,n,logx)
sympy.elliptic_e._eval_rewrite_as_hyper(self,*args)
sympy.elliptic_e._eval_rewrite_as_meijerg(self,*args)
sympy.elliptic_e.eval(cls,z,m=None)
sympy.elliptic_e.fdiff(self,argindex=1)
sympy.elliptic_f(Function)
sympy.elliptic_f._eval_conjugate(self)
sympy.elliptic_f.eval(cls,z,m)
sympy.elliptic_f.fdiff(self,argindex=1)
sympy.elliptic_k(Function)
sympy.elliptic_k._eval_conjugate(self)
sympy.elliptic_k._eval_nseries(self,x,n,logx)
sympy.elliptic_k._eval_rewrite_as_hyper(self,z)
sympy.elliptic_k._eval_rewrite_as_meijerg(self,z)
sympy.elliptic_k.eval(cls,z)
sympy.elliptic_k.fdiff(self,argindex=1)
sympy.elliptic_pi(Function)
sympy.elliptic_pi._eval_conjugate(self)
sympy.elliptic_pi.eval(cls,n,m,z=None)
sympy.elliptic_pi.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_e(Function)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_nseries(self,x,n,logx)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_rewrite_as_hyper(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_e._eval_rewrite_as_meijerg(self,*args)
sympy.functions.special.elliptic_integrals.elliptic_e.eval(cls,z,m=None)
sympy.functions.special.elliptic_integrals.elliptic_e.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_f(Function)
sympy.functions.special.elliptic_integrals.elliptic_f._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_f.eval(cls,z,m)
sympy.functions.special.elliptic_integrals.elliptic_f.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_k(Function)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_nseries(self,x,n,logx)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_rewrite_as_hyper(self,z)
sympy.functions.special.elliptic_integrals.elliptic_k._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.elliptic_integrals.elliptic_k.eval(cls,z)
sympy.functions.special.elliptic_integrals.elliptic_k.fdiff(self,argindex=1)
sympy.functions.special.elliptic_integrals.elliptic_pi(Function)
sympy.functions.special.elliptic_integrals.elliptic_pi._eval_conjugate(self)
sympy.functions.special.elliptic_integrals.elliptic_pi.eval(cls,n,m,z=None)
sympy.functions.special.elliptic_integrals.elliptic_pi.fdiff(self,argindex=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/bessel.py----------------------------------------
A:sympy.functions.special.bessel.newz->unpolarify(z)
A:sympy.functions.special.bessel.(newz, n)->symbs.pop().extract_branch_factor()
A:sympy.functions.special.bessel.nnu->unpolarify(nu)
A:sympy.functions.special.bessel.aj->self._eval_rewrite_as_besselj(*self.args)
A:sympy.functions.special.bessel.ai->self._eval_rewrite_as_besseli(*self.args)
A:sympy.functions.special.bessel.ay->self._eval_rewrite_as_bessely(*self.args)
A:sympy.functions.special.bessel.prec->dps_to_prec(dps)
A:sympy.functions.special.bessel.root->solver(f, root + pi)
A:sympy.functions.special.bessel.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.special.bessel.(x, y)->self._as_real_imag(deep=deep, **hints)
A:sympy.functions.special.bessel.(re_part, im_part)->self.as_real_imag(deep=deep, **hints)
A:sympy.functions.special.bessel.x->sympify(x)
A:sympy.functions.special.bessel.ot->Rational(1, 3)
A:sympy.functions.special.bessel.tt->Rational(2, 3)
A:sympy.functions.special.bessel.a->sympy.C.Pow(z, Rational(3, 2))
A:sympy.functions.special.bessel.z->symbs.pop()
A:sympy.functions.special.bessel.c->Wild('c', exclude=[z])
A:sympy.functions.special.bessel.d->Wild('d', exclude=[z])
A:sympy.functions.special.bessel.m->Wild('m', exclude=[z])
A:sympy.functions.special.bessel.n->Wild('n', exclude=[z])
A:sympy.functions.special.bessel.M->arg.match(c * (d * z ** n) ** m)
A:sympy.functions.special.bessel.b->sympy.C.Pow(a, tt)
A:sympy.functions.special.bessel.res->sympy.mpmath.mp.airybi(z, derivative=1)
sympy.airyai(AiryBase)
sympy.airyai._eval_expand_func(self,**hints)
sympy.airyai._eval_rewrite_as_besseli(self,z)
sympy.airyai._eval_rewrite_as_besselj(self,z)
sympy.airyai._eval_rewrite_as_hyper(self,z)
sympy.airyai.eval(cls,arg)
sympy.airyai.fdiff(self,argindex=1)
sympy.airyai.taylor_term(n,x,*previous_terms)
sympy.airyaiprime(AiryBase)
sympy.airyaiprime._eval_evalf(self,prec)
sympy.airyaiprime._eval_expand_func(self,**hints)
sympy.airyaiprime._eval_rewrite_as_besseli(self,z)
sympy.airyaiprime._eval_rewrite_as_besselj(self,z)
sympy.airyaiprime._eval_rewrite_as_hyper(self,z)
sympy.airyaiprime.eval(cls,arg)
sympy.airyaiprime.fdiff(self,argindex=1)
sympy.airybi(AiryBase)
sympy.airybi._eval_expand_func(self,**hints)
sympy.airybi._eval_rewrite_as_besseli(self,z)
sympy.airybi._eval_rewrite_as_besselj(self,z)
sympy.airybi._eval_rewrite_as_hyper(self,z)
sympy.airybi.eval(cls,arg)
sympy.airybi.fdiff(self,argindex=1)
sympy.airybi.taylor_term(n,x,*previous_terms)
sympy.airybiprime(AiryBase)
sympy.airybiprime._eval_evalf(self,prec)
sympy.airybiprime._eval_expand_func(self,**hints)
sympy.airybiprime._eval_rewrite_as_besseli(self,z)
sympy.airybiprime._eval_rewrite_as_besselj(self,z)
sympy.airybiprime._eval_rewrite_as_hyper(self,z)
sympy.airybiprime.eval(cls,arg)
sympy.airybiprime.fdiff(self,argindex=1)
sympy.besseli(BesselBase)
sympy.besseli._eval_is_real(self)
sympy.besseli._eval_rewrite_as_besselj(self,nu,z)
sympy.besseli._eval_rewrite_as_bessely(self,nu,z)
sympy.besseli._eval_rewrite_as_jn(self,nu,z)
sympy.besseli.eval(cls,nu,z)
sympy.besselj(BesselBase)
sympy.besselj._eval_is_real(self)
sympy.besselj._eval_rewrite_as_besseli(self,nu,z)
sympy.besselj._eval_rewrite_as_bessely(self,nu,z)
sympy.besselj._eval_rewrite_as_jn(self,nu,z)
sympy.besselj.eval(cls,nu,z)
sympy.besselk(BesselBase)
sympy.besselk._eval_is_real(self)
sympy.besselk._eval_rewrite_as_besseli(self,nu,z)
sympy.besselk._eval_rewrite_as_besselj(self,nu,z)
sympy.besselk._eval_rewrite_as_bessely(self,nu,z)
sympy.besselk._eval_rewrite_as_yn(self,nu,z)
sympy.besselk.eval(cls,nu,z)
sympy.bessely(BesselBase)
sympy.bessely._eval_is_real(self)
sympy.bessely._eval_rewrite_as_besseli(self,nu,z)
sympy.bessely._eval_rewrite_as_besselj(self,nu,z)
sympy.bessely._eval_rewrite_as_yn(self,nu,z)
sympy.bessely.eval(cls,nu,z)
sympy.functions.special.bessel.AiryBase(Function)
sympy.functions.special.bessel.AiryBase._as_real_imag(self,deep=True,**hints)
sympy.functions.special.bessel.AiryBase._eval_conjugate(self)
sympy.functions.special.bessel.AiryBase._eval_expand_complex(self,deep=True,**hints)
sympy.functions.special.bessel.AiryBase._eval_is_real(self)
sympy.functions.special.bessel.AiryBase.as_real_imag(self,deep=True,**hints)
sympy.functions.special.bessel.BesselBase(Function)
sympy.functions.special.bessel.BesselBase._eval_conjugate(self)
sympy.functions.special.bessel.BesselBase._eval_expand_func(self,**hints)
sympy.functions.special.bessel.BesselBase._eval_simplify(self,ratio,measure)
sympy.functions.special.bessel.BesselBase.argument(self)
sympy.functions.special.bessel.BesselBase.fdiff(self,argindex=2)
sympy.functions.special.bessel.BesselBase.order(self)
sympy.functions.special.bessel.SphericalBesselBase(BesselBase)
sympy.functions.special.bessel.SphericalBesselBase._eval_evalf(self,prec)
sympy.functions.special.bessel.SphericalBesselBase._eval_expand_func(self,**hints)
sympy.functions.special.bessel.SphericalBesselBase._expand(self,**hints)
sympy.functions.special.bessel.SphericalBesselBase._rewrite(self)
sympy.functions.special.bessel.SphericalBesselBase.fdiff(self,argindex=2)
sympy.functions.special.bessel.airyai(AiryBase)
sympy.functions.special.bessel.airyai._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airyai._eval_rewrite_as_besseli(self,z)
sympy.functions.special.bessel.airyai._eval_rewrite_as_besselj(self,z)
sympy.functions.special.bessel.airyai._eval_rewrite_as_hyper(self,z)
sympy.functions.special.bessel.airyai.eval(cls,arg)
sympy.functions.special.bessel.airyai.fdiff(self,argindex=1)
sympy.functions.special.bessel.airyai.taylor_term(n,x,*previous_terms)
sympy.functions.special.bessel.airyaiprime(AiryBase)
sympy.functions.special.bessel.airyaiprime._eval_evalf(self,prec)
sympy.functions.special.bessel.airyaiprime._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_besseli(self,z)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_besselj(self,z)
sympy.functions.special.bessel.airyaiprime._eval_rewrite_as_hyper(self,z)
sympy.functions.special.bessel.airyaiprime.eval(cls,arg)
sympy.functions.special.bessel.airyaiprime.fdiff(self,argindex=1)
sympy.functions.special.bessel.airybi(AiryBase)
sympy.functions.special.bessel.airybi._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airybi._eval_rewrite_as_besseli(self,z)
sympy.functions.special.bessel.airybi._eval_rewrite_as_besselj(self,z)
sympy.functions.special.bessel.airybi._eval_rewrite_as_hyper(self,z)
sympy.functions.special.bessel.airybi.eval(cls,arg)
sympy.functions.special.bessel.airybi.fdiff(self,argindex=1)
sympy.functions.special.bessel.airybi.taylor_term(n,x,*previous_terms)
sympy.functions.special.bessel.airybiprime(AiryBase)
sympy.functions.special.bessel.airybiprime._eval_evalf(self,prec)
sympy.functions.special.bessel.airybiprime._eval_expand_func(self,**hints)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_besseli(self,z)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_besselj(self,z)
sympy.functions.special.bessel.airybiprime._eval_rewrite_as_hyper(self,z)
sympy.functions.special.bessel.airybiprime.eval(cls,arg)
sympy.functions.special.bessel.airybiprime.fdiff(self,argindex=1)
sympy.functions.special.bessel.besseli(BesselBase)
sympy.functions.special.bessel.besseli._eval_is_real(self)
sympy.functions.special.bessel.besseli._eval_rewrite_as_besselj(self,nu,z)
sympy.functions.special.bessel.besseli._eval_rewrite_as_bessely(self,nu,z)
sympy.functions.special.bessel.besseli._eval_rewrite_as_jn(self,nu,z)
sympy.functions.special.bessel.besseli.eval(cls,nu,z)
sympy.functions.special.bessel.besselj(BesselBase)
sympy.functions.special.bessel.besselj._eval_is_real(self)
sympy.functions.special.bessel.besselj._eval_rewrite_as_besseli(self,nu,z)
sympy.functions.special.bessel.besselj._eval_rewrite_as_bessely(self,nu,z)
sympy.functions.special.bessel.besselj._eval_rewrite_as_jn(self,nu,z)
sympy.functions.special.bessel.besselj.eval(cls,nu,z)
sympy.functions.special.bessel.besselk(BesselBase)
sympy.functions.special.bessel.besselk._eval_is_real(self)
sympy.functions.special.bessel.besselk._eval_rewrite_as_besseli(self,nu,z)
sympy.functions.special.bessel.besselk._eval_rewrite_as_besselj(self,nu,z)
sympy.functions.special.bessel.besselk._eval_rewrite_as_bessely(self,nu,z)
sympy.functions.special.bessel.besselk._eval_rewrite_as_yn(self,nu,z)
sympy.functions.special.bessel.besselk.eval(cls,nu,z)
sympy.functions.special.bessel.bessely(BesselBase)
sympy.functions.special.bessel.bessely._eval_is_real(self)
sympy.functions.special.bessel.bessely._eval_rewrite_as_besseli(self,nu,z)
sympy.functions.special.bessel.bessely._eval_rewrite_as_besselj(self,nu,z)
sympy.functions.special.bessel.bessely._eval_rewrite_as_yn(self,nu,z)
sympy.functions.special.bessel.bessely.eval(cls,nu,z)
sympy.functions.special.bessel.hankel1(BesselBase)
sympy.functions.special.bessel.hankel1._eval_conjugate(self)
sympy.functions.special.bessel.hankel2(BesselBase)
sympy.functions.special.bessel.hankel2._eval_conjugate(self)
sympy.functions.special.bessel.jn(SphericalBesselBase)
sympy.functions.special.bessel.jn._eval_rewrite_as_besselj(self,nu,z)
sympy.functions.special.bessel.jn._expand(self,**hints)
sympy.functions.special.bessel.jn._rewrite(self)
sympy.functions.special.bessel.jn_zeros(n,k,method='sympy',dps=15)
sympy.functions.special.bessel.yn(SphericalBesselBase)
sympy.functions.special.bessel.yn._eval_rewrite_as_bessely(self,nu,z)
sympy.functions.special.bessel.yn._expand(self,**hints)
sympy.functions.special.bessel.yn._rewrite(self)
sympy.hankel1(BesselBase)
sympy.hankel1._eval_conjugate(self)
sympy.hankel2(BesselBase)
sympy.hankel2._eval_conjugate(self)
sympy.jn(SphericalBesselBase)
sympy.jn._eval_rewrite_as_besselj(self,nu,z)
sympy.jn._expand(self,**hints)
sympy.jn._rewrite(self)
sympy.jn_zeros(n,k,method='sympy',dps=15)
sympy.special.bessel.AiryBase(Function)
sympy.special.bessel.AiryBase._as_real_imag(self,deep=True,**hints)
sympy.special.bessel.AiryBase._eval_conjugate(self)
sympy.special.bessel.AiryBase._eval_expand_complex(self,deep=True,**hints)
sympy.special.bessel.AiryBase._eval_is_real(self)
sympy.special.bessel.AiryBase.as_real_imag(self,deep=True,**hints)
sympy.special.bessel.BesselBase(Function)
sympy.special.bessel.BesselBase._eval_conjugate(self)
sympy.special.bessel.BesselBase._eval_expand_func(self,**hints)
sympy.special.bessel.BesselBase._eval_simplify(self,ratio,measure)
sympy.special.bessel.BesselBase.argument(self)
sympy.special.bessel.BesselBase.fdiff(self,argindex=2)
sympy.special.bessel.BesselBase.order(self)
sympy.special.bessel.SphericalBesselBase(BesselBase)
sympy.special.bessel.SphericalBesselBase._eval_evalf(self,prec)
sympy.special.bessel.SphericalBesselBase._eval_expand_func(self,**hints)
sympy.special.bessel.SphericalBesselBase._expand(self,**hints)
sympy.special.bessel.SphericalBesselBase._rewrite(self)
sympy.special.bessel.SphericalBesselBase.fdiff(self,argindex=2)
sympy.yn(SphericalBesselBase)
sympy.yn._eval_rewrite_as_bessely(self,nu,z)
sympy.yn._expand(self,**hints)
sympy.yn._rewrite(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/delta_functions.py----------------------------------------
A:sympy.functions.special.delta_functions.k->sympify(k)
A:sympy.functions.special.delta_functions.arg->sympify(arg)
A:sympy.functions.special.delta_functions.argroots->roots(self.args[0], x)
A:sympy.functions.special.delta_functions.darg->abs(diff(self.args[0], x))
A:sympy.functions.special.delta_functions.p->self.args[0].as_poly(x)
sympy.DiracDelta(Function)
sympy.DiracDelta._latex_no_arg(printer)
sympy.DiracDelta.eval(cls,arg,k=0)
sympy.DiracDelta.fdiff(self,argindex=1)
sympy.DiracDelta.is_simple(self,x)
sympy.DiracDelta.simplify(self,x)
sympy.Heaviside(Function)
sympy.Heaviside._eval_rewrite_as_Piecewise(self,arg)
sympy.Heaviside._eval_rewrite_as_sign(self,arg)
sympy.Heaviside.eval(cls,arg)
sympy.Heaviside.fdiff(self,argindex=1)
sympy.functions.special.delta_functions.DiracDelta(Function)
sympy.functions.special.delta_functions.DiracDelta._latex_no_arg(printer)
sympy.functions.special.delta_functions.DiracDelta.eval(cls,arg,k=0)
sympy.functions.special.delta_functions.DiracDelta.fdiff(self,argindex=1)
sympy.functions.special.delta_functions.DiracDelta.is_simple(self,x)
sympy.functions.special.delta_functions.DiracDelta.simplify(self,x)
sympy.functions.special.delta_functions.Heaviside(Function)
sympy.functions.special.delta_functions.Heaviside._eval_rewrite_as_Piecewise(self,arg)
sympy.functions.special.delta_functions.Heaviside._eval_rewrite_as_sign(self,arg)
sympy.functions.special.delta_functions.Heaviside.eval(cls,arg)
sympy.functions.special.delta_functions.Heaviside.fdiff(self,argindex=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/error_functions.py----------------------------------------
A:sympy.functions.special.error_functions.t->point.extract_multiplicatively(S.ImaginaryUnit)
A:sympy.functions.special.error_functions.x->sympify(x)
A:sympy.functions.special.error_functions.k->sympy.core.C.floor((n - 1) / S(2))
A:sympy.functions.special.error_functions.arg->unpolarify(self.args[0])
A:sympy.functions.special.error_functions.(x, y)->self._as_real_imag(deep=deep, **hints)
A:sympy.functions.special.error_functions.nz->newarg.extract_multiplicatively(I)
A:sympy.functions.special.error_functions.sign_x->sympify(x).could_extract_minus_sign()
A:sympy.functions.special.error_functions.sign_y->y.could_extract_minus_sign()
A:sympy.functions.special.error_functions.(nz, n)->z.extract_branch_factor()
A:sympy.functions.special.error_functions.x0->self.args[0].limit(x, 0)
A:sympy.functions.special.error_functions.f->self._eval_rewrite_as_intractable(*self.args)
A:sympy.functions.special.error_functions.nu2->unpolarify(nu)
A:sympy.functions.special.error_functions.(z, n)->z.extract_branch_factor()
A:sympy.functions.special.error_functions.baseseries->baseseries.replace(Pow, lambda t, n: t ** n / n, simultaneous=False).replace(Pow, lambda t, n: t ** n / n, simultaneous=False)
A:sympy.functions.special.error_functions._atzero->S(0)
A:sympy.functions.special.error_functions.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.special.error_functions.o->sympy.core.C.Order(1 / z ** (n + 1), x)
sympy.Chi(TrigonometricIntegral)
sympy.Chi._Ifactor(cls,z,sign)
sympy.Chi._eval_rewrite_as_expint(self,z)
sympy.Chi._latex(self,printer,exp=None)
sympy.Chi._latex_no_arg(printer)
sympy.Chi._minusfactor(cls,z)
sympy.Ci(TrigonometricIntegral)
sympy.Ci._Ifactor(cls,z,sign)
sympy.Ci._eval_rewrite_as_expint(self,z)
sympy.Ci._minusfactor(cls,z)
sympy.E1(z)
sympy.Ei(Function)
sympy.Ei._eval_evalf(self,prec)
sympy.Ei._eval_nseries(self,x,n,logx)
sympy.Ei._eval_rewrite_as_Si(self,z)
sympy.Ei._eval_rewrite_as_expint(self,z)
sympy.Ei._eval_rewrite_as_li(self,z)
sympy.Ei._eval_rewrite_as_tractable(self,z)
sympy.Ei._eval_rewrite_as_uppergamma(self,z)
sympy.Ei.eval(cls,z)
sympy.Ei.fdiff(self,argindex=1)
sympy.Li(Function)
sympy.Li._eval_evalf(self,prec)
sympy.Li._eval_rewrite_as_li(self,z)
sympy.Li._eval_rewrite_as_tractable(self,z)
sympy.Li.eval(cls,z)
sympy.Li.fdiff(self,argindex=1)
sympy.Shi(TrigonometricIntegral)
sympy.Shi._Ifactor(cls,z,sign)
sympy.Shi._eval_rewrite_as_expint(self,z)
sympy.Shi._minusfactor(cls,z)
sympy.Si(TrigonometricIntegral)
sympy.Si._Ifactor(cls,z,sign)
sympy.Si._eval_rewrite_as_expint(self,z)
sympy.Si._minusfactor(cls,z)
sympy.erf(Function)
sympy.erf._eval_as_leading_term(self,x)
sympy.erf._eval_conjugate(self)
sympy.erf._eval_is_real(self)
sympy.erf._eval_rewrite_as_erfc(self,z)
sympy.erf._eval_rewrite_as_erfi(self,z)
sympy.erf._eval_rewrite_as_expint(self,z)
sympy.erf._eval_rewrite_as_fresnelc(self,z)
sympy.erf._eval_rewrite_as_fresnels(self,z)
sympy.erf._eval_rewrite_as_hyper(self,z)
sympy.erf._eval_rewrite_as_meijerg(self,z)
sympy.erf._eval_rewrite_as_tractable(self,z)
sympy.erf._eval_rewrite_as_uppergamma(self,z)
sympy.erf.as_real_imag(self,deep=True,**hints)
sympy.erf.eval(cls,arg)
sympy.erf.fdiff(self,argindex=1)
sympy.erf.inverse(self,argindex=1)
sympy.erf.taylor_term(n,x,*previous_terms)
sympy.erf2(Function)
sympy.erf2._eval_conjugate(self)
sympy.erf2._eval_is_real(self)
sympy.erf2._eval_rewrite_as_erf(self,x,y)
sympy.erf2._eval_rewrite_as_erfc(self,x,y)
sympy.erf2._eval_rewrite_as_erfi(self,x,y)
sympy.erf2._eval_rewrite_as_expint(self,x,y)
sympy.erf2._eval_rewrite_as_fresnelc(self,x,y)
sympy.erf2._eval_rewrite_as_fresnels(self,x,y)
sympy.erf2._eval_rewrite_as_hyper(self,x,y)
sympy.erf2._eval_rewrite_as_meijerg(self,x,y)
sympy.erf2._eval_rewrite_as_uppergamma(self,x,y)
sympy.erf2.eval(cls,x,y)
sympy.erf2.fdiff(self,argindex)
sympy.erf2inv(Function)
sympy.erf2inv.eval(cls,x,y)
sympy.erf2inv.fdiff(self,argindex)
sympy.erfc(Function)
sympy.erfc._eval_as_leading_term(self,x)
sympy.erfc._eval_conjugate(self)
sympy.erfc._eval_is_real(self)
sympy.erfc._eval_rewrite_as_erf(self,z)
sympy.erfc._eval_rewrite_as_erfi(self,z)
sympy.erfc._eval_rewrite_as_expint(self,z)
sympy.erfc._eval_rewrite_as_fresnelc(self,z)
sympy.erfc._eval_rewrite_as_fresnels(self,z)
sympy.erfc._eval_rewrite_as_hyper(self,z)
sympy.erfc._eval_rewrite_as_meijerg(self,z)
sympy.erfc._eval_rewrite_as_tractable(self,z)
sympy.erfc._eval_rewrite_as_uppergamma(self,z)
sympy.erfc.as_real_imag(self,deep=True,**hints)
sympy.erfc.eval(cls,arg)
sympy.erfc.fdiff(self,argindex=1)
sympy.erfc.inverse(self,argindex=1)
sympy.erfc.taylor_term(n,x,*previous_terms)
sympy.erfcinv(Function)
sympy.erfcinv._eval_rewrite_as_erfinv(self,z)
sympy.erfcinv.eval(cls,z)
sympy.erfcinv.fdiff(self,argindex=1)
sympy.erfcinv.inverse(self,argindex=1)
sympy.erfi(Function)
sympy.erfi._eval_conjugate(self)
sympy.erfi._eval_is_real(self)
sympy.erfi._eval_rewrite_as_erf(self,z)
sympy.erfi._eval_rewrite_as_erfc(self,z)
sympy.erfi._eval_rewrite_as_expint(self,z)
sympy.erfi._eval_rewrite_as_fresnelc(self,z)
sympy.erfi._eval_rewrite_as_fresnels(self,z)
sympy.erfi._eval_rewrite_as_hyper(self,z)
sympy.erfi._eval_rewrite_as_meijerg(self,z)
sympy.erfi._eval_rewrite_as_tractable(self,z)
sympy.erfi._eval_rewrite_as_uppergamma(self,z)
sympy.erfi.as_real_imag(self,deep=True,**hints)
sympy.erfi.eval(cls,z)
sympy.erfi.fdiff(self,argindex=1)
sympy.erfi.taylor_term(n,x,*previous_terms)
sympy.erfinv(Function)
sympy.erfinv._eval_rewrite_as_erfcinv(self,z)
sympy.erfinv.eval(cls,z)
sympy.erfinv.fdiff(self,argindex=1)
sympy.erfinv.inverse(self,argindex=1)
sympy.expint(Function)
sympy.expint._eval_expand_func(self,**hints)
sympy.expint._eval_nseries(self,x,n,logx)
sympy.expint._eval_rewrite_as_Ei(self,nu,z)
sympy.expint._eval_rewrite_as_Si(self,nu,z)
sympy.expint._eval_rewrite_as_uppergamma(self,nu,z)
sympy.expint.eval(cls,nu,z)
sympy.expint.fdiff(self,argindex)
sympy.fresnelc(FresnelIntegral)
sympy.fresnelc._eval_aseries(self,n,args0,x,logx)
sympy.fresnelc._eval_rewrite_as_erf(self,z)
sympy.fresnelc._eval_rewrite_as_hyper(self,z)
sympy.fresnelc._eval_rewrite_as_meijerg(self,z)
sympy.fresnelc.taylor_term(n,x,*previous_terms)
sympy.fresnels(FresnelIntegral)
sympy.fresnels._eval_aseries(self,n,args0,x,logx)
sympy.fresnels._eval_rewrite_as_erf(self,z)
sympy.fresnels._eval_rewrite_as_hyper(self,z)
sympy.fresnels._eval_rewrite_as_meijerg(self,z)
sympy.fresnels.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.Chi(TrigonometricIntegral)
sympy.functions.special.error_functions.Chi._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Chi._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.Chi._latex(self,printer,exp=None)
sympy.functions.special.error_functions.Chi._latex_no_arg(printer)
sympy.functions.special.error_functions.Chi._minusfactor(cls,z)
sympy.functions.special.error_functions.Ci(TrigonometricIntegral)
sympy.functions.special.error_functions.Ci._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Ci._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.Ci._minusfactor(cls,z)
sympy.functions.special.error_functions.E1(z)
sympy.functions.special.error_functions.Ei(Function)
sympy.functions.special.error_functions.Ei._eval_evalf(self,prec)
sympy.functions.special.error_functions.Ei._eval_nseries(self,x,n,logx)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_Si(self,z)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_li(self,z)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.Ei._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.Ei.eval(cls,z)
sympy.functions.special.error_functions.Ei.fdiff(self,argindex=1)
sympy.functions.special.error_functions.FresnelIntegral(Function)
sympy.functions.special.error_functions.FresnelIntegral._as_real_imag(self,deep=True,**hints)
sympy.functions.special.error_functions.FresnelIntegral._eval_conjugate(self)
sympy.functions.special.error_functions.FresnelIntegral._eval_is_real(self)
sympy.functions.special.error_functions.FresnelIntegral.as_real_imag(self,deep=True,**hints)
sympy.functions.special.error_functions.FresnelIntegral.eval(cls,z)
sympy.functions.special.error_functions.FresnelIntegral.fdiff(self,argindex=1)
sympy.functions.special.error_functions.Li(Function)
sympy.functions.special.error_functions.Li._eval_evalf(self,prec)
sympy.functions.special.error_functions.Li._eval_rewrite_as_li(self,z)
sympy.functions.special.error_functions.Li._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.Li.eval(cls,z)
sympy.functions.special.error_functions.Li.fdiff(self,argindex=1)
sympy.functions.special.error_functions.Shi(TrigonometricIntegral)
sympy.functions.special.error_functions.Shi._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Shi._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.Shi._minusfactor(cls,z)
sympy.functions.special.error_functions.Si(TrigonometricIntegral)
sympy.functions.special.error_functions.Si._Ifactor(cls,z,sign)
sympy.functions.special.error_functions.Si._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.Si._minusfactor(cls,z)
sympy.functions.special.error_functions.TrigonometricIntegral(Function)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_nseries(self,x,n,logx)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_rewrite_as_Ei(self,z)
sympy.functions.special.error_functions.TrigonometricIntegral._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.TrigonometricIntegral.eval(cls,z)
sympy.functions.special.error_functions.TrigonometricIntegral.fdiff(self,argindex=1)
sympy.functions.special.error_functions._eis(Function)
sympy.functions.special.error_functions._eis._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions._eis._eval_nseries(self,x,n,logx)
sympy.functions.special.error_functions._eis._eval_rewrite_as_intractable(self,z)
sympy.functions.special.error_functions._eis.fdiff(self,argindex=1)
sympy.functions.special.error_functions._erfs(Function)
sympy.functions.special.error_functions._erfs._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions._erfs._eval_rewrite_as_intractable(self,z)
sympy.functions.special.error_functions._erfs.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erf(Function)
sympy.functions.special.error_functions.erf._eval_as_leading_term(self,x)
sympy.functions.special.error_functions.erf._eval_conjugate(self)
sympy.functions.special.error_functions.erf._eval_is_real(self)
sympy.functions.special.error_functions.erf._eval_rewrite_as_erfc(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_erfi(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_fresnelc(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_fresnels(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.erf._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.erf.as_real_imag(self,deep=True,**hints)
sympy.functions.special.error_functions.erf.eval(cls,arg)
sympy.functions.special.error_functions.erf.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erf.inverse(self,argindex=1)
sympy.functions.special.error_functions.erf.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erf2(Function)
sympy.functions.special.error_functions.erf2._eval_conjugate(self)
sympy.functions.special.error_functions.erf2._eval_is_real(self)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erf(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erfc(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_erfi(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_expint(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_fresnelc(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_fresnels(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_hyper(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_meijerg(self,x,y)
sympy.functions.special.error_functions.erf2._eval_rewrite_as_uppergamma(self,x,y)
sympy.functions.special.error_functions.erf2.eval(cls,x,y)
sympy.functions.special.error_functions.erf2.fdiff(self,argindex)
sympy.functions.special.error_functions.erf2inv(Function)
sympy.functions.special.error_functions.erf2inv.eval(cls,x,y)
sympy.functions.special.error_functions.erf2inv.fdiff(self,argindex)
sympy.functions.special.error_functions.erfc(Function)
sympy.functions.special.error_functions.erfc._eval_as_leading_term(self,x)
sympy.functions.special.error_functions.erfc._eval_conjugate(self)
sympy.functions.special.error_functions.erfc._eval_is_real(self)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_erf(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_erfi(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_fresnelc(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_fresnels(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.erfc._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.erfc.as_real_imag(self,deep=True,**hints)
sympy.functions.special.error_functions.erfc.eval(cls,arg)
sympy.functions.special.error_functions.erfc.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfc.inverse(self,argindex=1)
sympy.functions.special.error_functions.erfc.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erfcinv(Function)
sympy.functions.special.error_functions.erfcinv._eval_rewrite_as_erfinv(self,z)
sympy.functions.special.error_functions.erfcinv.eval(cls,z)
sympy.functions.special.error_functions.erfcinv.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfcinv.inverse(self,argindex=1)
sympy.functions.special.error_functions.erfi(Function)
sympy.functions.special.error_functions.erfi._eval_conjugate(self)
sympy.functions.special.error_functions.erfi._eval_is_real(self)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_erf(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_erfc(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_expint(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_fresnelc(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_fresnels(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.erfi._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.erfi.as_real_imag(self,deep=True,**hints)
sympy.functions.special.error_functions.erfi.eval(cls,z)
sympy.functions.special.error_functions.erfi.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfi.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.erfinv(Function)
sympy.functions.special.error_functions.erfinv._eval_rewrite_as_erfcinv(self,z)
sympy.functions.special.error_functions.erfinv.eval(cls,z)
sympy.functions.special.error_functions.erfinv.fdiff(self,argindex=1)
sympy.functions.special.error_functions.erfinv.inverse(self,argindex=1)
sympy.functions.special.error_functions.expint(Function)
sympy.functions.special.error_functions.expint._eval_expand_func(self,**hints)
sympy.functions.special.error_functions.expint._eval_nseries(self,x,n,logx)
sympy.functions.special.error_functions.expint._eval_rewrite_as_Ei(self,nu,z)
sympy.functions.special.error_functions.expint._eval_rewrite_as_Si(self,nu,z)
sympy.functions.special.error_functions.expint._eval_rewrite_as_uppergamma(self,nu,z)
sympy.functions.special.error_functions.expint.eval(cls,nu,z)
sympy.functions.special.error_functions.expint.fdiff(self,argindex)
sympy.functions.special.error_functions.fresnelc(FresnelIntegral)
sympy.functions.special.error_functions.fresnelc._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_erf(self,z)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.fresnelc._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.fresnelc.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.fresnels(FresnelIntegral)
sympy.functions.special.error_functions.fresnels._eval_aseries(self,n,args0,x,logx)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_erf(self,z)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.fresnels._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.fresnels.taylor_term(n,x,*previous_terms)
sympy.functions.special.error_functions.li(Function)
sympy.functions.special.error_functions.li._eval_conjugate(self)
sympy.functions.special.error_functions.li._eval_rewrite_as_Ei(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_Li(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_Shi(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_Si(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_hyper(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_meijerg(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_tractable(self,z)
sympy.functions.special.error_functions.li._eval_rewrite_as_uppergamma(self,z)
sympy.functions.special.error_functions.li.eval(cls,z)
sympy.functions.special.error_functions.li.fdiff(self,argindex=1)
sympy.li(Function)
sympy.li._eval_conjugate(self)
sympy.li._eval_rewrite_as_Ei(self,z)
sympy.li._eval_rewrite_as_Li(self,z)
sympy.li._eval_rewrite_as_Shi(self,z)
sympy.li._eval_rewrite_as_Si(self,z)
sympy.li._eval_rewrite_as_hyper(self,z)
sympy.li._eval_rewrite_as_meijerg(self,z)
sympy.li._eval_rewrite_as_tractable(self,z)
sympy.li._eval_rewrite_as_uppergamma(self,z)
sympy.li.eval(cls,z)
sympy.li.fdiff(self,argindex=1)
sympy.special.error_FresnelIntegral(Function)
sympy.special.error_FresnelIntegral._as_real_imag(self,deep=True,**hints)
sympy.special.error_FresnelIntegral._eval_conjugate(self)
sympy.special.error_FresnelIntegral._eval_is_real(self)
sympy.special.error_FresnelIntegral.as_real_imag(self,deep=True,**hints)
sympy.special.error_FresnelIntegral.eval(cls,z)
sympy.special.error_FresnelIntegral.fdiff(self,argindex=1)
sympy.special.error_TrigonometricIntegral(Function)
sympy.special.error_TrigonometricIntegral._eval_nseries(self,x,n,logx)
sympy.special.error_TrigonometricIntegral._eval_rewrite_as_Ei(self,z)
sympy.special.error_TrigonometricIntegral._eval_rewrite_as_uppergamma(self,z)
sympy.special.error_TrigonometricIntegral.eval(cls,z)
sympy.special.error_TrigonometricIntegral.fdiff(self,argindex=1)
sympy.special.error__eis(Function)
sympy.special.error__eis._eval_aseries(self,n,args0,x,logx)
sympy.special.error__eis._eval_nseries(self,x,n,logx)
sympy.special.error__eis._eval_rewrite_as_intractable(self,z)
sympy.special.error__eis.fdiff(self,argindex=1)
sympy.special.error__erfs(Function)
sympy.special.error__erfs._eval_aseries(self,n,args0,x,logx)
sympy.special.error__erfs._eval_rewrite_as_intractable(self,z)
sympy.special.error__erfs.fdiff(self,argindex=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/zeta_functions.py----------------------------------------
A:sympy.functions.special.zeta_functions.t->Dummy('t')
A:sympy.functions.special.zeta_functions.p->Poly((t + a) ** (-s), t)
A:sympy.functions.special.zeta_functions.res->self._eval_expand_func()
A:sympy.functions.special.zeta_functions.add->Add(*[z ** (n - 1 - k) / (a - k - 1) ** s for k in xrange(n)])
A:sympy.functions.special.zeta_functions.mul->S(1)
A:sympy.functions.special.zeta_functions.n->floor(a)
A:sympy.functions.special.zeta_functions.(m, n)->S([a.p, a.q])
A:sympy.functions.special.zeta_functions.zet->exp_polar(2 * pi * I / n)
A:sympy.functions.special.zeta_functions.(p, q)->S([arg.p, arg.q])
A:sympy.functions.special.zeta_functions.u->Dummy('u')
A:sympy.functions.special.zeta_functions.(z, a)->list(map(sympify, (z, a_)))
A:sympy.functions.special.zeta_functions.z->zeta(s)
sympy.dirichlet_eta(Function)
sympy.dirichlet_eta._eval_rewrite_as_zeta(self,s)
sympy.dirichlet_eta.eval(cls,s)
sympy.functions.special.zeta_functions.dirichlet_eta(Function)
sympy.functions.special.zeta_functions.dirichlet_eta._eval_rewrite_as_zeta(self,s)
sympy.functions.special.zeta_functions.dirichlet_eta.eval(cls,s)
sympy.functions.special.zeta_functions.lerchphi(Function)
sympy.functions.special.zeta_functions.lerchphi._eval_expand_func(self,**hints)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_as_polylog(self,z,s,a)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_as_zeta(self,z,s,a)
sympy.functions.special.zeta_functions.lerchphi._eval_rewrite_helper(self,z,s,a,target)
sympy.functions.special.zeta_functions.lerchphi.fdiff(self,argindex=1)
sympy.functions.special.zeta_functions.polylog(Function)
sympy.functions.special.zeta_functions.polylog._eval_expand_func(self,**hints)
sympy.functions.special.zeta_functions.polylog._eval_rewrite_as_lerchphi(self,s,z)
sympy.functions.special.zeta_functions.polylog.eval(cls,s,z)
sympy.functions.special.zeta_functions.polylog.fdiff(self,argindex=1)
sympy.functions.special.zeta_functions.zeta(Function)
sympy.functions.special.zeta_functions.zeta._eval_rewrite_as_dirichlet_eta(self,s,a=1)
sympy.functions.special.zeta_functions.zeta._eval_rewrite_as_lerchphi(self,s,a=1)
sympy.functions.special.zeta_functions.zeta.eval(cls,z,a_=None)
sympy.functions.special.zeta_functions.zeta.fdiff(self,argindex=1)
sympy.lerchphi(Function)
sympy.lerchphi._eval_expand_func(self,**hints)
sympy.lerchphi._eval_rewrite_as_polylog(self,z,s,a)
sympy.lerchphi._eval_rewrite_as_zeta(self,z,s,a)
sympy.lerchphi._eval_rewrite_helper(self,z,s,a,target)
sympy.lerchphi.fdiff(self,argindex=1)
sympy.polylog(Function)
sympy.polylog._eval_expand_func(self,**hints)
sympy.polylog._eval_rewrite_as_lerchphi(self,s,z)
sympy.polylog.eval(cls,s,z)
sympy.polylog.fdiff(self,argindex=1)
sympy.zeta(Function)
sympy.zeta._eval_rewrite_as_dirichlet_eta(self,s,a=1)
sympy.zeta._eval_rewrite_as_lerchphi(self,s,a=1)
sympy.zeta.eval(cls,z,a_=None)
sympy.zeta.fdiff(self,argindex=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tensor_functions.py----------------------------------------
A:sympy.functions.special.tensor_functions.n->len(args)
A:sympy.functions.special.tensor_functions.diff->sympy.core.function.C.Abs(i - j)
sympy.Eijk(*args,**kwargs)
sympy.KroneckerDelta(Function)
sympy.KroneckerDelta._eval_power(self,expt)
sympy.KroneckerDelta._get_preferred_index(self)
sympy.KroneckerDelta._latex_no_arg(printer)
sympy.KroneckerDelta.eval(cls,i,j)
sympy.KroneckerDelta.indices_contain_equal_information(self)
sympy.KroneckerDelta.is_above_fermi(self)
sympy.KroneckerDelta.is_below_fermi(self)
sympy.KroneckerDelta.is_only_above_fermi(self)
sympy.KroneckerDelta.is_only_below_fermi(self)
sympy.KroneckerDelta.killable_index(self)
sympy.KroneckerDelta.preferred_index(self)
sympy.LeviCivita(Function)
sympy.LeviCivita.doit(self)
sympy.LeviCivita.eval(cls,*args)
sympy.functions.special.tensor_functions.Eijk(*args,**kwargs)
sympy.functions.special.tensor_functions.KroneckerDelta(Function)
sympy.functions.special.tensor_functions.KroneckerDelta._eval_power(self,expt)
sympy.functions.special.tensor_functions.KroneckerDelta._get_preferred_index(self)
sympy.functions.special.tensor_functions.KroneckerDelta._latex_no_arg(printer)
sympy.functions.special.tensor_functions.KroneckerDelta.eval(cls,i,j)
sympy.functions.special.tensor_functions.KroneckerDelta.indices_contain_equal_information(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_above_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_below_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_only_above_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.is_only_below_fermi(self)
sympy.functions.special.tensor_functions.KroneckerDelta.killable_index(self)
sympy.functions.special.tensor_functions.KroneckerDelta.preferred_index(self)
sympy.functions.special.tensor_functions.LeviCivita(Function)
sympy.functions.special.tensor_functions.LeviCivita.doit(self)
sympy.functions.special.tensor_functions.LeviCivita.eval(cls,*args)
sympy.functions.special.tensor_functions.eval_levicivita(*args)
sympy.special.tensor_eval_levicivita(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/hyper.py----------------------------------------
A:sympy.functions.special.hyper.m->self._diffargs[i].diff(s)
A:sympy.functions.special.hyper.nz->unpolarify(z)
A:sympy.functions.special.hyper.nap->Tuple(*[a + 1 for a in self.ap])
A:sympy.functions.special.hyper.nbq->Tuple(*[b + 1 for b in self.bq])
A:sympy.functions.special.hyper.n->sympy.core.C.Dummy('n', integer=True)
A:sympy.functions.special.hyper.rfap->Tuple(*[RisingFactorial(a, n) for a in ap])
A:sympy.functions.special.hyper.rfbq->Tuple(*[RisingFactorial(b, n) for b in bq])
A:sympy.functions.special.hyper.a->list(self.an)
A:sympy.functions.special.hyper.c1->And(re(e) < 0, abs(z) <= 1)
A:sympy.functions.special.hyper.c2->And(0 <= re(e), re(e) < 1, abs(z) <= 1, Ne(z, 1))
A:sympy.functions.special.hyper.c3->And(re(e) >= 1, abs(z) < 1)
A:sympy.functions.special.hyper.G->meijerg(self.an, self.aother, b, self.bother, self.argument)
A:sympy.functions.special.hyper.b->list(self.bm)
A:sympy.functions.special.hyper.an->list(self.an)
A:sympy.functions.special.hyper.ap->list(self.aother)
A:sympy.functions.special.hyper.bm->list(self.bm)
A:sympy.functions.special.hyper.bq->list(self.bother)
A:sympy.functions.special.hyper.x->l1.pop()
A:sympy.functions.special.hyper.beta->compute(self.bm)
A:sympy.functions.special.hyper.alpha->compute(self.an)
A:sympy.functions.special.hyper.znum->self.argument._eval_evalf(prec)
A:sympy.functions.special.hyper.(znum, branch)->self.argument._eval_evalf(prec).as_coeff_mul(exp_polar)
A:sympy.functions.special.hyper.branch->S(0)
A:sympy.functions.special.hyper.v->sympy.mpmath.meijerg(ap, bq, z, r)
A:sympy.functions.special.hyper.(x, n)->self.args[-1].extract_branch_factor(allow_half=True)
A:sympy.functions.special.hyper.small->self._expr_small(*newargs)
A:sympy.functions.special.hyper.big->self._expr_big(*newerargs)
sympy.functions.special.hyper.HyperRep(Function)
sympy.functions.special.hyper.HyperRep._eval_rewrite_as_nonrep(self,*args)
sympy.functions.special.hyper.HyperRep._eval_rewrite_as_nonrepsmall(self,*args)
sympy.functions.special.hyper.HyperRep._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep.eval(cls,*args)
sympy.functions.special.hyper.HyperRep_asin1(HyperRep)
sympy.functions.special.hyper.HyperRep_asin1._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin1._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin1._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_asin1._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_asin2(HyperRep)
sympy.functions.special.hyper.HyperRep_asin2._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin2._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_asin2._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_asin2._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_atanh(HyperRep)
sympy.functions.special.hyper.HyperRep_atanh._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep_atanh._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep_atanh._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep_atanh._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep_cosasin(HyperRep)
sympy.functions.special.hyper.HyperRep_cosasin._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_cosasin._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_cosasin._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_cosasin._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_log1(HyperRep)
sympy.functions.special.hyper.HyperRep_log1._expr_big(cls,x,n)
sympy.functions.special.hyper.HyperRep_log1._expr_big_minus(cls,x,n)
sympy.functions.special.hyper.HyperRep_log1._expr_small(cls,x)
sympy.functions.special.hyper.HyperRep_log1._expr_small_minus(cls,x)
sympy.functions.special.hyper.HyperRep_log2(HyperRep)
sympy.functions.special.hyper.HyperRep_log2._expr_big(cls,z,n)
sympy.functions.special.hyper.HyperRep_log2._expr_big_minus(cls,z,n)
sympy.functions.special.hyper.HyperRep_log2._expr_small(cls,z)
sympy.functions.special.hyper.HyperRep_log2._expr_small_minus(cls,z)
sympy.functions.special.hyper.HyperRep_power1(HyperRep)
sympy.functions.special.hyper.HyperRep_power1._expr_big(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power1._expr_big_minus(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power1._expr_small(cls,a,x)
sympy.functions.special.hyper.HyperRep_power1._expr_small_minus(cls,a,x)
sympy.functions.special.hyper.HyperRep_power2(HyperRep)
sympy.functions.special.hyper.HyperRep_power2._expr_big(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power2._expr_big_minus(cls,a,x,n)
sympy.functions.special.hyper.HyperRep_power2._expr_small(cls,a,x)
sympy.functions.special.hyper.HyperRep_power2._expr_small_minus(cls,a,x)
sympy.functions.special.hyper.HyperRep_sinasin(HyperRep)
sympy.functions.special.hyper.HyperRep_sinasin._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sinasin._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sinasin._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sinasin._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts1(HyperRep)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts1._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts2(HyperRep)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_big(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_big_minus(cls,a,z,n)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_small(cls,a,z)
sympy.functions.special.hyper.HyperRep_sqrts2._expr_small_minus(cls,a,z)
sympy.functions.special.hyper.TupleArg(Tuple)
sympy.functions.special.hyper.TupleArg.limit(self,x,xlim,dir='+')
sympy.functions.special.hyper.TupleParametersBase(Function)
sympy.functions.special.hyper.TupleParametersBase._eval_derivative(self,s)
sympy.functions.special.hyper._prep_tuple(v)
sympy.functions.special.hyper.hyper(cls,ap,bq,z)
sympy.functions.special.hyper.hyper.__new__(cls,ap,bq,z)
sympy.functions.special.hyper.hyper._diffargs(self)
sympy.functions.special.hyper.hyper._eval_expand_func(self,**hints)
sympy.functions.special.hyper.hyper._eval_rewrite_as_Sum(self,ap,bq,z)
sympy.functions.special.hyper.hyper._eval_simplify(self,ratio,measure)
sympy.functions.special.hyper.hyper.ap(self)
sympy.functions.special.hyper.hyper.argument(self)
sympy.functions.special.hyper.hyper.bq(self)
sympy.functions.special.hyper.hyper.convergence_statement(self)
sympy.functions.special.hyper.hyper.eta(self)
sympy.functions.special.hyper.hyper.eval(cls,ap,bq,z)
sympy.functions.special.hyper.hyper.fdiff(self,argindex=3)
sympy.functions.special.hyper.hyper.radius_of_convergence(self)
sympy.functions.special.hyper.meijerg(cls,*args)
sympy.functions.special.hyper.meijerg.__new__(cls,*args)
sympy.functions.special.hyper.meijerg._diff_wrt_parameter(self,idx)
sympy.functions.special.hyper.meijerg._diffargs(self)
sympy.functions.special.hyper.meijerg._eval_evalf(self,prec)
sympy.functions.special.hyper.meijerg._eval_expand_func(self,**hints)
sympy.functions.special.hyper.meijerg.an(self)
sympy.functions.special.hyper.meijerg.aother(self)
sympy.functions.special.hyper.meijerg.ap(self)
sympy.functions.special.hyper.meijerg.argument(self)
sympy.functions.special.hyper.meijerg.bm(self)
sympy.functions.special.hyper.meijerg.bother(self)
sympy.functions.special.hyper.meijerg.bq(self)
sympy.functions.special.hyper.meijerg.delta(self)
sympy.functions.special.hyper.meijerg.fdiff(self,argindex=3)
sympy.functions.special.hyper.meijerg.get_period(self)
sympy.functions.special.hyper.meijerg.integrand(self,s)
sympy.functions.special.hyper.meijerg.nu(self)
sympy.hyper(cls,ap,bq,z)
sympy.hyper._diffargs(self)
sympy.hyper._eval_expand_func(self,**hints)
sympy.hyper._eval_rewrite_as_Sum(self,ap,bq,z)
sympy.hyper._eval_simplify(self,ratio,measure)
sympy.hyper.ap(self)
sympy.hyper.argument(self)
sympy.hyper.bq(self)
sympy.hyper.convergence_statement(self)
sympy.hyper.eta(self)
sympy.hyper.eval(cls,ap,bq,z)
sympy.hyper.fdiff(self,argindex=3)
sympy.hyper.radius_of_convergence(self)
sympy.meijerg(cls,*args)
sympy.meijerg._diff_wrt_parameter(self,idx)
sympy.meijerg._diffargs(self)
sympy.meijerg._eval_evalf(self,prec)
sympy.meijerg._eval_expand_func(self,**hints)
sympy.meijerg.an(self)
sympy.meijerg.aother(self)
sympy.meijerg.ap(self)
sympy.meijerg.argument(self)
sympy.meijerg.bm(self)
sympy.meijerg.bother(self)
sympy.meijerg.bq(self)
sympy.meijerg.delta(self)
sympy.meijerg.fdiff(self,argindex=3)
sympy.meijerg.get_period(self)
sympy.meijerg.integrand(self,s)
sympy.meijerg.nu(self)
sympy.special.hyper.HyperRep(Function)
sympy.special.hyper.HyperRep._eval_rewrite_as_nonrep(self,*args)
sympy.special.hyper.HyperRep._eval_rewrite_as_nonrepsmall(self,*args)
sympy.special.hyper.HyperRep._expr_big(cls,x,n)
sympy.special.hyper.HyperRep._expr_big_minus(cls,x,n)
sympy.special.hyper.HyperRep._expr_small(cls,x)
sympy.special.hyper.HyperRep._expr_small_minus(cls,x)
sympy.special.hyper.HyperRep.eval(cls,*args)
sympy.special.hyper.HyperRep_asin1(HyperRep)
sympy.special.hyper.HyperRep_asin1._expr_big(cls,z,n)
sympy.special.hyper.HyperRep_asin1._expr_big_minus(cls,z,n)
sympy.special.hyper.HyperRep_asin1._expr_small(cls,z)
sympy.special.hyper.HyperRep_asin1._expr_small_minus(cls,z)
sympy.special.hyper.HyperRep_asin2(HyperRep)
sympy.special.hyper.HyperRep_asin2._expr_big(cls,z,n)
sympy.special.hyper.HyperRep_asin2._expr_big_minus(cls,z,n)
sympy.special.hyper.HyperRep_asin2._expr_small(cls,z)
sympy.special.hyper.HyperRep_asin2._expr_small_minus(cls,z)
sympy.special.hyper.HyperRep_atanh(HyperRep)
sympy.special.hyper.HyperRep_atanh._expr_big(cls,x,n)
sympy.special.hyper.HyperRep_atanh._expr_big_minus(cls,x,n)
sympy.special.hyper.HyperRep_atanh._expr_small(cls,x)
sympy.special.hyper.HyperRep_atanh._expr_small_minus(cls,x)
sympy.special.hyper.HyperRep_cosasin(HyperRep)
sympy.special.hyper.HyperRep_cosasin._expr_big(cls,a,z,n)
sympy.special.hyper.HyperRep_cosasin._expr_big_minus(cls,a,z,n)
sympy.special.hyper.HyperRep_cosasin._expr_small(cls,a,z)
sympy.special.hyper.HyperRep_cosasin._expr_small_minus(cls,a,z)
sympy.special.hyper.HyperRep_log1(HyperRep)
sympy.special.hyper.HyperRep_log1._expr_big(cls,x,n)
sympy.special.hyper.HyperRep_log1._expr_big_minus(cls,x,n)
sympy.special.hyper.HyperRep_log1._expr_small(cls,x)
sympy.special.hyper.HyperRep_log1._expr_small_minus(cls,x)
sympy.special.hyper.HyperRep_log2(HyperRep)
sympy.special.hyper.HyperRep_log2._expr_big(cls,z,n)
sympy.special.hyper.HyperRep_log2._expr_big_minus(cls,z,n)
sympy.special.hyper.HyperRep_log2._expr_small(cls,z)
sympy.special.hyper.HyperRep_log2._expr_small_minus(cls,z)
sympy.special.hyper.HyperRep_power1(HyperRep)
sympy.special.hyper.HyperRep_power1._expr_big(cls,a,x,n)
sympy.special.hyper.HyperRep_power1._expr_big_minus(cls,a,x,n)
sympy.special.hyper.HyperRep_power1._expr_small(cls,a,x)
sympy.special.hyper.HyperRep_power1._expr_small_minus(cls,a,x)
sympy.special.hyper.HyperRep_power2(HyperRep)
sympy.special.hyper.HyperRep_power2._expr_big(cls,a,x,n)
sympy.special.hyper.HyperRep_power2._expr_big_minus(cls,a,x,n)
sympy.special.hyper.HyperRep_power2._expr_small(cls,a,x)
sympy.special.hyper.HyperRep_power2._expr_small_minus(cls,a,x)
sympy.special.hyper.HyperRep_sinasin(HyperRep)
sympy.special.hyper.HyperRep_sinasin._expr_big(cls,a,z,n)
sympy.special.hyper.HyperRep_sinasin._expr_big_minus(cls,a,z,n)
sympy.special.hyper.HyperRep_sinasin._expr_small(cls,a,z)
sympy.special.hyper.HyperRep_sinasin._expr_small_minus(cls,a,z)
sympy.special.hyper.HyperRep_sqrts1(HyperRep)
sympy.special.hyper.HyperRep_sqrts1._expr_big(cls,a,z,n)
sympy.special.hyper.HyperRep_sqrts1._expr_big_minus(cls,a,z,n)
sympy.special.hyper.HyperRep_sqrts1._expr_small(cls,a,z)
sympy.special.hyper.HyperRep_sqrts1._expr_small_minus(cls,a,z)
sympy.special.hyper.HyperRep_sqrts2(HyperRep)
sympy.special.hyper.HyperRep_sqrts2._expr_big(cls,a,z,n)
sympy.special.hyper.HyperRep_sqrts2._expr_big_minus(cls,a,z,n)
sympy.special.hyper.HyperRep_sqrts2._expr_small(cls,a,z)
sympy.special.hyper.HyperRep_sqrts2._expr_small_minus(cls,a,z)
sympy.special.hyper.TupleArg(Tuple)
sympy.special.hyper.TupleArg.limit(self,x,xlim,dir='+')
sympy.special.hyper.TupleParametersBase(Function)
sympy.special.hyper.TupleParametersBase._eval_derivative(self,s)
sympy.special.hyper._prep_tuple(v)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/polynomials.py----------------------------------------
A:sympy.functions.special.polynomials._x->sympy.core.basic.C.Dummy('x')
A:sympy.functions.special.polynomials.k->sympy.core.basic.C.Dummy('k')
A:sympy.functions.special.polynomials._ortho_poly->staticmethod(hermite_poly)
A:sympy.functions.special.polynomials.P->legendre_poly(n, _x, polys=True).diff((_x, m))
sympy.assoc_laguerre(OrthogonalPolynomial)
sympy.assoc_laguerre._eval_conjugate(self)
sympy.assoc_laguerre._eval_rewrite_as_polynomial(self,n,x)
sympy.assoc_laguerre.eval(cls,n,alpha,x)
sympy.assoc_laguerre.fdiff(self,argindex=3)
sympy.assoc_legendre(Function)
sympy.assoc_legendre._eval_at_order(cls,n,m)
sympy.assoc_legendre._eval_conjugate(self)
sympy.assoc_legendre._eval_rewrite_as_polynomial(self,n,m,x)
sympy.assoc_legendre.eval(cls,n,m,x)
sympy.assoc_legendre.fdiff(self,argindex=3)
sympy.chebyshevt(OrthogonalPolynomial)
sympy.chebyshevt._eval_rewrite_as_polynomial(self,n,x)
sympy.chebyshevt.eval(cls,n,x)
sympy.chebyshevt.fdiff(self,argindex=2)
sympy.chebyshevt_root(Function)
sympy.chebyshevt_root.eval(cls,n,k)
sympy.chebyshevu(OrthogonalPolynomial)
sympy.chebyshevu._eval_rewrite_as_polynomial(self,n,x)
sympy.chebyshevu.eval(cls,n,x)
sympy.chebyshevu.fdiff(self,argindex=2)
sympy.chebyshevu_root(Function)
sympy.chebyshevu_root.eval(cls,n,k)
sympy.functions.special.polynomials.OrthogonalPolynomial(Function)
sympy.functions.special.polynomials.OrthogonalPolynomial._eval_at_order(cls,n,x)
sympy.functions.special.polynomials.OrthogonalPolynomial._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_laguerre(OrthogonalPolynomial)
sympy.functions.special.polynomials.assoc_laguerre._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_laguerre._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.assoc_laguerre.eval(cls,n,alpha,x)
sympy.functions.special.polynomials.assoc_laguerre.fdiff(self,argindex=3)
sympy.functions.special.polynomials.assoc_legendre(Function)
sympy.functions.special.polynomials.assoc_legendre._eval_at_order(cls,n,m)
sympy.functions.special.polynomials.assoc_legendre._eval_conjugate(self)
sympy.functions.special.polynomials.assoc_legendre._eval_rewrite_as_polynomial(self,n,m,x)
sympy.functions.special.polynomials.assoc_legendre.eval(cls,n,m,x)
sympy.functions.special.polynomials.assoc_legendre.fdiff(self,argindex=3)
sympy.functions.special.polynomials.chebyshevt(OrthogonalPolynomial)
sympy.functions.special.polynomials.chebyshevt._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.chebyshevt.eval(cls,n,x)
sympy.functions.special.polynomials.chebyshevt.fdiff(self,argindex=2)
sympy.functions.special.polynomials.chebyshevt_root(Function)
sympy.functions.special.polynomials.chebyshevt_root.eval(cls,n,k)
sympy.functions.special.polynomials.chebyshevu(OrthogonalPolynomial)
sympy.functions.special.polynomials.chebyshevu._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.chebyshevu.eval(cls,n,x)
sympy.functions.special.polynomials.chebyshevu.fdiff(self,argindex=2)
sympy.functions.special.polynomials.chebyshevu_root(Function)
sympy.functions.special.polynomials.chebyshevu_root.eval(cls,n,k)
sympy.functions.special.polynomials.gegenbauer(OrthogonalPolynomial)
sympy.functions.special.polynomials.gegenbauer._eval_conjugate(self)
sympy.functions.special.polynomials.gegenbauer._eval_rewrite_as_polynomial(self,n,a,x)
sympy.functions.special.polynomials.gegenbauer.eval(cls,n,a,x)
sympy.functions.special.polynomials.gegenbauer.fdiff(self,argindex=3)
sympy.functions.special.polynomials.hermite(OrthogonalPolynomial)
sympy.functions.special.polynomials.hermite._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.hermite.eval(cls,n,x)
sympy.functions.special.polynomials.hermite.fdiff(self,argindex=2)
sympy.functions.special.polynomials.jacobi(OrthogonalPolynomial)
sympy.functions.special.polynomials.jacobi._eval_conjugate(self)
sympy.functions.special.polynomials.jacobi._eval_rewrite_as_polynomial(self,n,a,b,x)
sympy.functions.special.polynomials.jacobi.eval(cls,n,a,b,x)
sympy.functions.special.polynomials.jacobi.fdiff(self,argindex=4)
sympy.functions.special.polynomials.jacobi_normalized(n,a,b,x)
sympy.functions.special.polynomials.laguerre(OrthogonalPolynomial)
sympy.functions.special.polynomials.laguerre._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.laguerre.eval(cls,n,x)
sympy.functions.special.polynomials.laguerre.fdiff(self,argindex=2)
sympy.functions.special.polynomials.legendre(OrthogonalPolynomial)
sympy.functions.special.polynomials.legendre._eval_rewrite_as_polynomial(self,n,x)
sympy.functions.special.polynomials.legendre.eval(cls,n,x)
sympy.functions.special.polynomials.legendre.fdiff(self,argindex=2)
sympy.gegenbauer(OrthogonalPolynomial)
sympy.gegenbauer._eval_conjugate(self)
sympy.gegenbauer._eval_rewrite_as_polynomial(self,n,a,x)
sympy.gegenbauer.eval(cls,n,a,x)
sympy.gegenbauer.fdiff(self,argindex=3)
sympy.hermite(OrthogonalPolynomial)
sympy.hermite._eval_rewrite_as_polynomial(self,n,x)
sympy.hermite.eval(cls,n,x)
sympy.hermite.fdiff(self,argindex=2)
sympy.jacobi(OrthogonalPolynomial)
sympy.jacobi._eval_conjugate(self)
sympy.jacobi._eval_rewrite_as_polynomial(self,n,a,b,x)
sympy.jacobi.eval(cls,n,a,b,x)
sympy.jacobi.fdiff(self,argindex=4)
sympy.jacobi_normalized(n,a,b,x)
sympy.laguerre(OrthogonalPolynomial)
sympy.laguerre._eval_rewrite_as_polynomial(self,n,x)
sympy.laguerre.eval(cls,n,x)
sympy.laguerre.fdiff(self,argindex=2)
sympy.legendre(OrthogonalPolynomial)
sympy.legendre._eval_rewrite_as_polynomial(self,n,x)
sympy.legendre.eval(cls,n,x)
sympy.legendre.fdiff(self,argindex=2)
sympy.special.polynomials.OrthogonalPolynomial(Function)
sympy.special.polynomials.OrthogonalPolynomial._eval_at_order(cls,n,x)
sympy.special.polynomials.OrthogonalPolynomial._eval_conjugate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_hyper.py----------------------------------------
A:sympy.functions.special.tests.test_hyper.p->hyper((), (), z ** 2)
A:sympy.functions.special.tests.test_hyper.h->hyper((randcplx(), randcplx(), randcplx()), (randcplx(), randcplx()), z)
A:sympy.functions.special.tests.test_hyper.(a1, a2, b1, b2, b3)->symbols('a1:3, b1:4')
A:sympy.functions.special.tests.test_hyper.dum->func.subs(z, exp_polar(I * pi) * z).rewrite('nonrep').atoms(Dummy)
A:sympy.functions.special.tests.test_hyper._k->Dummy('k')
A:sympy.functions.special.tests.test_hyper.g->meijerg(Tuple(), Tuple(), Tuple(randcplx()), Tuple(randcplx(), randcplx()), z)
A:sympy.functions.special.tests.test_hyper.(a1, a2, b1, b2, c1, c2, d1, d2)->symbols('a1:3, b1:3, c1:3, d1:3')
A:sympy.functions.special.tests.test_hyper.y->randcplx()
A:sympy.functions.special.tests.test_hyper.(a, b, c, d, z)->symbols('a b c d z')
A:sympy.functions.special.tests.test_hyper.expr->func.subs(z, exp_polar(I * pi) * z).rewrite('nonrep')
A:sympy.functions.special.tests.test_hyper.rv->func.subs(z, exp_polar(a) * z).rewrite('nonrep')
A:sympy.functions.special.tests.test_hyper.expr1->dosubs(func, 2 * I * pi * (n + 1), -I * pi / 2)
A:sympy.functions.special.tests.test_hyper.expr2->dosubs(func, 2 * I * pi * (n + 1), -I * pi / 2).subs(k, l)
A:sympy.functions.special.tests.test_hyper.a->randcplx()
A:sympy.functions.special.tests.test_hyper.(k, x)->symbols('k, x')
sympy.functions.special.tests.test_hyper.replace_dummy(expr,sym)
sympy.functions.special.tests.test_hyper.test_TupleParametersBase()
sympy.functions.special.tests.test_hyper.test_expand_func()
sympy.functions.special.tests.test_hyper.test_hyper()
sympy.functions.special.tests.test_hyper.test_hyper_rewrite_sum()
sympy.functions.special.tests.test_hyper.test_hyper_unpolarify()
sympy.functions.special.tests.test_hyper.test_hyperrep()
sympy.functions.special.tests.test_hyper.test_limits()
sympy.functions.special.tests.test_hyper.test_meijer()
sympy.functions.special.tests.test_hyper.test_meijerg_derivative()
sympy.functions.special.tests.test_hyper.test_meijerg_eval()
sympy.functions.special.tests.test_hyper.test_meijerg_period()
sympy.functions.special.tests.test_hyper.test_radius_of_convergence()
sympy.special.tests.test_hyper.replace_dummy(expr,sym)
sympy.special.tests.test_hyper.test_TupleParametersBase()
sympy.special.tests.test_hyper.test_expand_func()
sympy.special.tests.test_hyper.test_hyper()
sympy.special.tests.test_hyper.test_hyper_rewrite_sum()
sympy.special.tests.test_hyper.test_hyper_unpolarify()
sympy.special.tests.test_hyper.test_hyperrep()
sympy.special.tests.test_hyper.test_limits()
sympy.special.tests.test_hyper.test_meijer()
sympy.special.tests.test_hyper.test_meijerg_derivative()
sympy.special.tests.test_hyper.test_meijerg_eval()
sympy.special.tests.test_hyper.test_meijerg_period()
sympy.special.tests.test_hyper.test_radius_of_convergence()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_gamma_functions.py----------------------------------------
A:sympy.functions.special.tests.test_gamma_functions.x->Symbol('x')
A:sympy.functions.special.tests.test_gamma_functions.y->Symbol('y')
A:sympy.functions.special.tests.test_gamma_functions.n->Symbol('n', integer=True, positive=True)
A:sympy.functions.special.tests.test_gamma_functions.w->Symbol('w', real=True)
A:sympy.functions.special.tests.test_gamma_functions.c->uniform(1, 5)
A:sympy.functions.special.tests.test_gamma_functions.k->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_gamma_functions.r->polygamma(0, x)
A:sympy.functions.special.tests.test_gamma_functions.ni->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_gamma_functions.e->polygamma(3, x + y + S(3) / 4)
A:sympy.functions.special.tests.test_gamma_functions.L->loggamma(23 / S(7) - 6)
A:sympy.functions.special.tests.test_gamma_functions.s1->loggamma(x).series(x)
sympy.functions.special.tests.test_gamma_functions.test_gamma()
sympy.functions.special.tests.test_gamma_functions.test_gamma_series()
sympy.functions.special.tests.test_gamma_functions.test_loggamma()
sympy.functions.special.tests.test_gamma_functions.test_lowergamma()
sympy.functions.special.tests.test_gamma_functions.test_polygamma()
sympy.functions.special.tests.test_gamma_functions.test_polygamma_expand_func()
sympy.functions.special.tests.test_gamma_functions.test_polygamma_expansion()
sympy.functions.special.tests.test_gamma_functions.test_uppergamma()
sympy.functions.special.tests.test_gamma_functions.tn_branch(s,func)
sympy.special.tests.test_gamma_test_gamma()
sympy.special.tests.test_gamma_test_gamma_series()
sympy.special.tests.test_gamma_test_loggamma()
sympy.special.tests.test_gamma_test_lowergamma()
sympy.special.tests.test_gamma_test_polygamma()
sympy.special.tests.test_gamma_test_polygamma_expand_func()
sympy.special.tests.test_gamma_test_polygamma_expansion()
sympy.special.tests.test_gamma_test_uppergamma()
sympy.special.tests.test_gamma_tn_branch(s,func)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_bsplines.py----------------------------------------
A:sympy.functions.special.tests.test_bsplines.(x, y)->symbols('x,y')
A:sympy.functions.special.tests.test_bsplines.knots->range(5)
A:sympy.functions.special.tests.test_bsplines.splines->bspline_basis_set(d, knots, x)
A:sympy.functions.special.tests.test_bsplines.b0->Piecewise((x ** 3 / 6, Interval(0, 1, False, True).contains(x)), (Rational(2, 3) - 2 * x + 2 * x ** 2 - x ** 3 / 2, Interval(1, 2, False, True).contains(x)), (Rational(-22, 3) + 10 * x - 4 * x ** 2 + x ** 3 / 2, Interval(2, 3, False, True).contains(x)), (Rational(32, 3) - 8 * x + 2 * x ** 2 - x ** 3 / 6, Interval(3, 4).contains(x)), (0, True))
A:sympy.functions.special.tests.test_bsplines.b1->Piecewise((Rational(1, 2) - x + x ** 2 / 2, Interval(1, 2, False, True).contains(x)), (Rational(-11, 2) + 5 * x - x ** 2, Interval(2, 3, False, True).contains(x)), (8 - 4 * x + x ** 2 / 2, Interval(3, 4).contains(x)), (0, True))
sympy.functions.special.tests.test_bsplines.test_basic_degree_0()
sympy.functions.special.tests.test_bsplines.test_basic_degree_1()
sympy.functions.special.tests.test_bsplines.test_basic_degree_2()
sympy.functions.special.tests.test_bsplines.test_basic_degree_3()
sympy.functions.special.tests.test_bsplines.test_repeated_degree_1()
sympy.special.tests.test_bsplines.test_basic_degree_0()
sympy.special.tests.test_bsplines.test_basic_degree_1()
sympy.special.tests.test_bsplines.test_basic_degree_2()
sympy.special.tests.test_bsplines.test_basic_degree_3()
sympy.special.tests.test_bsplines.test_repeated_degree_1()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_bessel.py----------------------------------------
A:sympy.functions.special.tests.test_bessel.randint->_randint()
A:sympy.functions.special.tests.test_bessel.nu->Symbol('nu')
A:sympy.functions.special.tests.test_bessel.rn->randcplx(a=1, b=0, d=0, c=2)
A:sympy.functions.special.tests.test_bessel.n->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_bessel.r->Symbol('r', real=True)
A:sympy.functions.special.tests.test_bessel.p->Symbol('p', positive=True)
A:sympy.functions.special.tests.test_bessel.i->Symbol('i', integer=True)
A:sympy.functions.special.tests.test_bessel.(x, z)->symbols('x z')
A:sympy.functions.special.tests.test_bessel.z->Symbol('z', real=False)
A:sympy.functions.special.tests.test_bessel.rz->randcplx(b=0.5)
A:sympy.functions.special.tests.test_bessel.c->uniform(1, 5)
A:sympy.functions.special.tests.test_bessel.x->Symbol('x', real=True)
A:sympy.functions.special.tests.test_bessel.y->Symbol('y', real=True)
A:sympy.functions.special.tests.test_bessel.t->Symbol('t', negative=True)
sympy.functions.special.tests.test_bessel.eq(a,b,tol=1e-06)
sympy.functions.special.tests.test_bessel.mjn(n,z)
sympy.functions.special.tests.test_bessel.myn(n,z)
sympy.functions.special.tests.test_bessel.test_airy_base()
sympy.functions.special.tests.test_bessel.test_airyai()
sympy.functions.special.tests.test_bessel.test_airyaiprime()
sympy.functions.special.tests.test_bessel.test_airybi()
sympy.functions.special.tests.test_bessel.test_airybiprime()
sympy.functions.special.tests.test_bessel.test_bessel_eval()
sympy.functions.special.tests.test_bessel.test_bessel_rand()
sympy.functions.special.tests.test_bessel.test_branching()
sympy.functions.special.tests.test_bessel.test_conjugate()
sympy.functions.special.tests.test_bessel.test_diff()
sympy.functions.special.tests.test_bessel.test_expand()
sympy.functions.special.tests.test_bessel.test_fn()
sympy.functions.special.tests.test_bessel.test_jn()
sympy.functions.special.tests.test_bessel.test_jn_zeros()
sympy.functions.special.tests.test_bessel.test_rewrite()
sympy.functions.special.tests.test_bessel.test_sympify_yn()
sympy.functions.special.tests.test_bessel.test_yn()
sympy.special.tests.test_bessel.eq(a,b,tol=1e-06)
sympy.special.tests.test_bessel.mjn(n,z)
sympy.special.tests.test_bessel.myn(n,z)
sympy.special.tests.test_bessel.test_airy_base()
sympy.special.tests.test_bessel.test_airyai()
sympy.special.tests.test_bessel.test_airyaiprime()
sympy.special.tests.test_bessel.test_airybi()
sympy.special.tests.test_bessel.test_airybiprime()
sympy.special.tests.test_bessel.test_bessel_eval()
sympy.special.tests.test_bessel.test_bessel_rand()
sympy.special.tests.test_bessel.test_branching()
sympy.special.tests.test_bessel.test_conjugate()
sympy.special.tests.test_bessel.test_diff()
sympy.special.tests.test_bessel.test_expand()
sympy.special.tests.test_bessel.test_fn()
sympy.special.tests.test_bessel.test_jn()
sympy.special.tests.test_bessel.test_jn_zeros()
sympy.special.tests.test_bessel.test_rewrite()
sympy.special.tests.test_bessel.test_sympify_yn()
sympy.special.tests.test_bessel.test_yn()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_beta_functions.py----------------------------------------
sympy.functions.special.tests.test_beta_functions.test_beta()
sympy.special.tests.test_beta_test_beta()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_delta_functions.py----------------------------------------
A:sympy.functions.special.tests.test_delta_functions.(x, y)->symbols('x y')
sympy.functions.special.tests.test_delta_functions.test_DiracDelta()
sympy.functions.special.tests.test_delta_functions.test_heaviside()
sympy.functions.special.tests.test_delta_functions.test_rewrite()
sympy.special.tests.test_delta_test_DiracDelta()
sympy.special.tests.test_delta_test_heaviside()
sympy.special.tests.test_delta_test_rewrite()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_zeta_functions.py----------------------------------------
A:sympy.functions.special.tests.test_zeta_functions.x->Symbol('x')
A:sympy.functions.special.tests.test_zeta_functions.a->Symbol('a')
A:sympy.functions.special.tests.test_zeta_functions.z->Symbol('z')
A:sympy.functions.special.tests.test_zeta_functions.s->Symbol('s')
A:sympy.functions.special.tests.test_zeta_functions.b->randcplx()
A:sympy.functions.special.tests.test_zeta_functions.c->randcplx()
A:sympy.functions.special.tests.test_zeta_functions.expanded->expand_func(func)
A:sympy.functions.special.tests.test_zeta_functions.subs[a]->randcplx()
sympy.functions.special.tests.test_zeta_functions.myexpand(func,target)
sympy.functions.special.tests.test_zeta_functions.test_derivatives()
sympy.functions.special.tests.test_zeta_functions.test_dirichlet_eta_eval()
sympy.functions.special.tests.test_zeta_functions.test_lerchphi_expansion()
sympy.functions.special.tests.test_zeta_functions.test_polylog_expansion()
sympy.functions.special.tests.test_zeta_functions.test_rewriting()
sympy.functions.special.tests.test_zeta_functions.test_zeta_eval()
sympy.functions.special.tests.test_zeta_functions.test_zeta_series()
sympy.special.tests.test_zeta_myexpand(func,target)
sympy.special.tests.test_zeta_test_derivatives()
sympy.special.tests.test_zeta_test_dirichlet_eta_eval()
sympy.special.tests.test_zeta_test_lerchphi_expansion()
sympy.special.tests.test_zeta_test_polylog_expansion()
sympy.special.tests.test_zeta_test_rewriting()
sympy.special.tests.test_zeta_test_zeta_eval()
sympy.special.tests.test_zeta_test_zeta_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_spherical_harmonics.py----------------------------------------
sympy.functions.special.tests.test_spherical_harmonics.test_Ynm()
sympy.functions.special.tests.test_spherical_harmonics.test_Ynm_c()
sympy.functions.special.tests.test_spherical_harmonics.test_Znm()
sympy.special.tests.test_spherical_harmonics.test_Ynm()
sympy.special.tests.test_spherical_harmonics.test_Ynm_c()
sympy.special.tests.test_spherical_harmonics.test_Znm()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_elliptic_integrals.py----------------------------------------
A:sympy.functions.special.tests.test_elliptic_integrals.i->Symbol('i', integer=True)
A:sympy.functions.special.tests.test_elliptic_integrals.j->Symbol('k', integer=True, positive=True)
A:sympy.functions.special.tests.test_elliptic_integrals.zi->Symbol('z', real=False)
A:sympy.functions.special.tests.test_elliptic_integrals.zr->Symbol('z', real=True, negative=True)
A:sympy.functions.special.tests.test_elliptic_integrals.r->randcplx()
A:sympy.functions.special.tests.test_elliptic_integrals.mi->Symbol('m', real=False)
A:sympy.functions.special.tests.test_elliptic_integrals.mr->Symbol('m', real=True, negative=True)
sympy.functions.special.tests.test_elliptic_integrals.test_E()
sympy.functions.special.tests.test_elliptic_integrals.test_F()
sympy.functions.special.tests.test_elliptic_integrals.test_K()
sympy.functions.special.tests.test_elliptic_integrals.test_P()
sympy.functions.special.tests.test_elliptic_test_E()
sympy.functions.special.tests.test_elliptic_test_F()
sympy.functions.special.tests.test_elliptic_test_K()
sympy.functions.special.tests.test_elliptic_test_P()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_error_functions.py----------------------------------------
A:sympy.functions.special.tests.test_error_functions.(x, y, z)->symbols('x,y,z')
A:sympy.functions.special.tests.test_error_functions.w->Symbol('w', real=True)
A:sympy.functions.special.tests.test_error_functions.n->Symbol('n', integer=True)
A:sympy.functions.special.tests.test_error_functions.subs[a]->random_complex_number()
A:sympy.functions.special.tests.test_error_functions.c->uniform(1, 5)
A:sympy.functions.special.tests.test_error_functions.pos->Symbol('p', positive=True)
A:sympy.functions.special.tests.test_error_functions.neg->Symbol('n', negative=True)
A:sympy.functions.special.tests.test_error_functions.v->uniform(1, 5)
A:sympy.functions.special.tests.test_error_functions.v1->func(arg * x).subs(x, v).n()
A:sympy.functions.special.tests.test_error_functions.v2->func(e1 * v + e2 * 1e-15).n()
A:sympy.functions.special.tests.test_error_functions.z->Symbol('z')
A:sympy.functions.special.tests.test_error_functions.zr->Symbol('z', real=True)
A:sympy.functions.special.tests.test_error_functions.zp->Symbol('z', positive=True)
A:sympy.functions.special.tests.test_error_functions.zn->Symbol('z', negative=True)
A:sympy.functions.special.tests.test_error_functions.m1->exp_polar(I * pi)
A:sympy.functions.special.tests.test_error_functions.m1_->exp_polar(-I * pi)
A:sympy.functions.special.tests.test_error_functions.pI->exp_polar(I * pi / 2)
A:sympy.functions.special.tests.test_error_functions.mI->exp_polar(-I * pi / 2)
sympy.functions.special.tests.test_error_functions.mytd(expr1,expr2,x)
sympy.functions.special.tests.test_error_functions.mytn(expr1,expr2,expr3,x,d=0)
sympy.functions.special.tests.test_error_functions.test_Li()
sympy.functions.special.tests.test_error_functions.test__eis()
sympy.functions.special.tests.test_error_functions.test__erfs()
sympy.functions.special.tests.test_error_functions.test_ci()
sympy.functions.special.tests.test_error_functions.test_ei()
sympy.functions.special.tests.test_error_functions.test_erf()
sympy.functions.special.tests.test_error_functions.test_erf2()
sympy.functions.special.tests.test_error_functions.test_erf2inv()
sympy.functions.special.tests.test_error_functions.test_erf_evalf()
sympy.functions.special.tests.test_error_functions.test_erf_series()
sympy.functions.special.tests.test_error_functions.test_erfc()
sympy.functions.special.tests.test_error_functions.test_erfc_evalf()
sympy.functions.special.tests.test_error_functions.test_erfc_series()
sympy.functions.special.tests.test_error_functions.test_erfcinv()
sympy.functions.special.tests.test_error_functions.test_erfi()
sympy.functions.special.tests.test_error_functions.test_erfi_evalf()
sympy.functions.special.tests.test_error_functions.test_erfi_series()
sympy.functions.special.tests.test_error_functions.test_erfinv()
sympy.functions.special.tests.test_error_functions.test_erfinv_evalf()
sympy.functions.special.tests.test_error_functions.test_expint()
sympy.functions.special.tests.test_error_functions.test_fresnel()
sympy.functions.special.tests.test_error_functions.test_li()
sympy.functions.special.tests.test_error_functions.test_si()
sympy.functions.special.tests.test_error_functions.tn_arg(func)
sympy.functions.special.tests.test_error_functions.tn_branch(func,s=None)
sympy.special.tests.test_error_mytd(expr1,expr2,x)
sympy.special.tests.test_error_mytn(expr1,expr2,expr3,x,d=0)
sympy.special.tests.test_error_test_Li()
sympy.special.tests.test_error_test__eis()
sympy.special.tests.test_error_test__erfs()
sympy.special.tests.test_error_test_ci()
sympy.special.tests.test_error_test_ei()
sympy.special.tests.test_error_test_erf()
sympy.special.tests.test_error_test_erf2()
sympy.special.tests.test_error_test_erf2inv()
sympy.special.tests.test_error_test_erf_evalf()
sympy.special.tests.test_error_test_erf_series()
sympy.special.tests.test_error_test_erfc()
sympy.special.tests.test_error_test_erfc_evalf()
sympy.special.tests.test_error_test_erfc_series()
sympy.special.tests.test_error_test_erfcinv()
sympy.special.tests.test_error_test_erfi()
sympy.special.tests.test_error_test_erfi_evalf()
sympy.special.tests.test_error_test_erfi_series()
sympy.special.tests.test_error_test_erfinv()
sympy.special.tests.test_error_test_erfinv_evalf()
sympy.special.tests.test_error_test_expint()
sympy.special.tests.test_error_test_fresnel()
sympy.special.tests.test_error_test_li()
sympy.special.tests.test_error_test_si()
sympy.special.tests.test_error_tn_arg(func)
sympy.special.tests.test_error_tn_branch(func,s=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_tensor_functions.py----------------------------------------
A:sympy.functions.special.tests.test_tensor_functions.(x, y)->symbols('x y')
A:sympy.functions.special.tests.test_tensor_functions.(i, j, k)->symbols('i j k')
A:sympy.functions.special.tests.test_tensor_functions.(i, j)->symbols('i j')
A:sympy.functions.special.tests.test_tensor_functions.k->Symbol('k', nonzero=True)
A:sympy.functions.special.tests.test_tensor_functions.(i, j, v, w)->symbols('i j v w', below_fermi=True, cls=Dummy)
A:sympy.functions.special.tests.test_tensor_functions.(a, b, t, u)->symbols('a b t u', above_fermi=True, cls=Dummy)
A:sympy.functions.special.tests.test_tensor_functions.(p, q, r, s)->symbols('p q r s', cls=Dummy)
sympy.functions.special.tests.test_tensor_functions.test_kronecker_delta()
sympy.functions.special.tests.test_tensor_functions.test_kronecker_delta_secondquant()
sympy.functions.special.tests.test_tensor_functions.test_levicivita()
sympy.special.tests.test_tensor_test_kronecker_delta()
sympy.special.tests.test_tensor_test_kronecker_delta_secondquant()
sympy.special.tests.test_tensor_test_levicivita()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/tests/test_spec_polynomials.py----------------------------------------
A:sympy.functions.special.tests.test_spec_polynomials.x->Symbol('x')
A:sympy.functions.special.tests.test_spec_polynomials.n->Symbol('n')
A:sympy.functions.special.tests.test_spec_polynomials.a->Symbol('a')
A:sympy.functions.special.tests.test_spec_polynomials.b->Symbol('b')
A:sympy.functions.special.tests.test_spec_polynomials.X->assoc_laguerre(n, m, x)
A:sympy.functions.special.tests.test_spec_polynomials.m->Symbol('m')
A:sympy.functions.special.tests.test_spec_polynomials.Q->sqrt(1 - x ** 2)
A:sympy.functions.special.tests.test_spec_polynomials.z->chebyshevu_root(n, k)
A:sympy.functions.special.tests.test_spec_polynomials.alpha->Symbol('alpha')
sympy.functions.special.tests.test_spec_polynomials.test_assoc_laguerre()
sympy.functions.special.tests.test_spec_polynomials.test_assoc_legendre()
sympy.functions.special.tests.test_spec_polynomials.test_chebyshev()
sympy.functions.special.tests.test_spec_polynomials.test_gegenbauer()
sympy.functions.special.tests.test_spec_polynomials.test_hermite()
sympy.functions.special.tests.test_spec_polynomials.test_jacobi()
sympy.functions.special.tests.test_spec_polynomials.test_laguerre()
sympy.functions.special.tests.test_spec_polynomials.test_legendre()
sympy.special.tests.test_spec_polynomials.test_assoc_laguerre()
sympy.special.tests.test_spec_polynomials.test_assoc_legendre()
sympy.special.tests.test_spec_polynomials.test_chebyshev()
sympy.special.tests.test_spec_polynomials.test_gegenbauer()
sympy.special.tests.test_spec_polynomials.test_hermite()
sympy.special.tests.test_spec_polynomials.test_jacobi()
sympy.special.tests.test_spec_polynomials.test_laguerre()
sympy.special.tests.test_spec_polynomials.test_legendre()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/special/benchmarks/bench_special.py----------------------------------------
A:sympy.functions.special.benchmarks.bench_special.(x, y)->symbols('x,y')
sympy.functions.special.benchmarks.bench_special.timeit_Ynm_xy()
sympy.special.benchmarks.bench_special.timeit_Ynm_xy()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/complexes.py----------------------------------------
A:sympy.functions.elementary.complexes.args->sympy.core.Add.make_args(arg)
A:sympy.functions.elementary.complexes.coeff->term.as_coefficient(S.ImaginaryUnit)
A:sympy.functions.elementary.complexes.real_imag->term.as_real_imag(ignore=arg)
A:sympy.functions.elementary.complexes.(a, b, c)->map(lambda xs: Add(*xs), [included, reverted, excluded])
A:sympy.functions.elementary.complexes.(c, args)->periodic_argument(c, period).as_coeff_mul()
A:sympy.functions.elementary.complexes.s->self.args[0]._eval_nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.complexes.ai->im(a)
A:sympy.functions.elementary.complexes.obj->periodic_argument(c, period)._eval_transpose()
A:sympy.functions.elementary.complexes.arg->periodic_argument(c, period)
A:sympy.functions.elementary.complexes.tnew->cls(t)
A:sympy.functions.elementary.complexes.known->Mul(*known)
A:sympy.functions.elementary.complexes.(base, exponent)->periodic_argument(c, period).as_base_exp()
A:sympy.functions.elementary.complexes.when->Eq(direction, 0)
A:sympy.functions.elementary.complexes.(c, arg_)->factor_terms(arg).as_coeff_Mul()
A:sympy.functions.elementary.complexes.arg_->Mul(*[a if sign(a) not in (-1, 1) else sign(a) for a in arg_.args])
A:sympy.functions.elementary.complexes.rv->sympy.core.C.atan2(y, x)
A:sympy.functions.elementary.complexes.pform->printer._print(self.args[0], *args)
A:sympy.functions.elementary.complexes.ar->argument(arg)
A:sympy.functions.elementary.complexes.(re, im)->a.exp.as_real_imag()
A:sympy.functions.elementary.complexes.unbranched->periodic_argument._getunbranched(z)
A:sympy.functions.elementary.complexes.ub->periodic_argument(x, oo)
A:sympy.functions.elementary.complexes.barg->periodic_argument(x, period)
A:sympy.functions.elementary.complexes.pl->pl.replace(polar_lift, mr).replace(polar_lift, mr)
A:sympy.functions.elementary.complexes.(c, m)->x.as_coeff_mul(*x.free_symbols)
A:sympy.functions.elementary.complexes.m->tuple(others)
A:sympy.functions.elementary.complexes.p->periodic_argument(z, period)._eval_evalf(prec)
sympy.Abs(Function)
sympy.Abs._eval_derivative(self,x)
sympy.Abs._eval_is_nonzero(self)
sympy.Abs._eval_is_positive(self)
sympy.Abs._eval_nseries(self,x,n,logx)
sympy.Abs._eval_power(self,other)
sympy.Abs._eval_rewrite_as_Heaviside(self,arg)
sympy.Abs._eval_rewrite_as_Piecewise(self,arg)
sympy.Abs._eval_rewrite_as_sign(self,arg)
sympy.Abs._sage_(self)
sympy.Abs.eval(cls,arg)
sympy.Abs.fdiff(self,argindex=1)
sympy.adjoint(Function)
sympy.adjoint._eval_adjoint(self)
sympy.adjoint._eval_conjugate(self)
sympy.adjoint._eval_transpose(self)
sympy.adjoint._latex(self,printer,exp=None,*args)
sympy.adjoint._pretty(self,printer,*args)
sympy.adjoint.eval(cls,arg)
sympy.arg(Function)
sympy.arg._eval_derivative(self,t)
sympy.arg._eval_rewrite_as_atan2(self,arg)
sympy.arg.eval(cls,arg)
sympy.conjugate(Function)
sympy.conjugate._eval_Abs(self)
sympy.conjugate._eval_adjoint(self)
sympy.conjugate._eval_conjugate(self)
sympy.conjugate._eval_derivative(self,x)
sympy.conjugate._eval_transpose(self)
sympy.conjugate.eval(cls,arg)
sympy.functions.elementary.complexes.Abs(Function)
sympy.functions.elementary.complexes.Abs._eval_derivative(self,x)
sympy.functions.elementary.complexes.Abs._eval_is_nonzero(self)
sympy.functions.elementary.complexes.Abs._eval_is_positive(self)
sympy.functions.elementary.complexes.Abs._eval_nseries(self,x,n,logx)
sympy.functions.elementary.complexes.Abs._eval_power(self,other)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_Heaviside(self,arg)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_Piecewise(self,arg)
sympy.functions.elementary.complexes.Abs._eval_rewrite_as_sign(self,arg)
sympy.functions.elementary.complexes.Abs._sage_(self)
sympy.functions.elementary.complexes.Abs.eval(cls,arg)
sympy.functions.elementary.complexes.Abs.fdiff(self,argindex=1)
sympy.functions.elementary.complexes.adjoint(Function)
sympy.functions.elementary.complexes.adjoint._eval_adjoint(self)
sympy.functions.elementary.complexes.adjoint._eval_conjugate(self)
sympy.functions.elementary.complexes.adjoint._eval_transpose(self)
sympy.functions.elementary.complexes.adjoint._latex(self,printer,exp=None,*args)
sympy.functions.elementary.complexes.adjoint._pretty(self,printer,*args)
sympy.functions.elementary.complexes.adjoint.eval(cls,arg)
sympy.functions.elementary.complexes.arg(Function)
sympy.functions.elementary.complexes.arg._eval_derivative(self,t)
sympy.functions.elementary.complexes.arg._eval_rewrite_as_atan2(self,arg)
sympy.functions.elementary.complexes.arg.eval(cls,arg)
sympy.functions.elementary.complexes.conjugate(Function)
sympy.functions.elementary.complexes.conjugate._eval_Abs(self)
sympy.functions.elementary.complexes.conjugate._eval_adjoint(self)
sympy.functions.elementary.complexes.conjugate._eval_conjugate(self)
sympy.functions.elementary.complexes.conjugate._eval_derivative(self,x)
sympy.functions.elementary.complexes.conjugate._eval_transpose(self)
sympy.functions.elementary.complexes.conjugate.eval(cls,arg)
sympy.functions.elementary.complexes.im(Function)
sympy.functions.elementary.complexes.im._eval_derivative(self,x)
sympy.functions.elementary.complexes.im._sage_(self)
sympy.functions.elementary.complexes.im.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.complexes.im.eval(cls,arg)
sympy.functions.elementary.complexes.periodic_argument(Function)
sympy.functions.elementary.complexes.periodic_argument._eval_evalf(self,prec)
sympy.functions.elementary.complexes.periodic_argument._getunbranched(cls,ar)
sympy.functions.elementary.complexes.periodic_argument.eval(cls,ar,period)
sympy.functions.elementary.complexes.polar_lift(Function)
sympy.functions.elementary.complexes.polar_lift._eval_Abs(self)
sympy.functions.elementary.complexes.polar_lift._eval_evalf(self,prec)
sympy.functions.elementary.complexes.polar_lift.eval(cls,arg)
sympy.functions.elementary.complexes.principal_branch(Function)
sympy.functions.elementary.complexes.principal_branch._eval_evalf(self,prec)
sympy.functions.elementary.complexes.principal_branch.eval(self,x,period)
sympy.functions.elementary.complexes.re(Function)
sympy.functions.elementary.complexes.re._eval_derivative(self,x)
sympy.functions.elementary.complexes.re._sage_(self)
sympy.functions.elementary.complexes.re.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.complexes.re.eval(cls,arg)
sympy.functions.elementary.complexes.sign(Function)
sympy.functions.elementary.complexes.sign._eval_Abs(self)
sympy.functions.elementary.complexes.sign._eval_conjugate(self)
sympy.functions.elementary.complexes.sign._eval_derivative(self,x)
sympy.functions.elementary.complexes.sign._eval_is_imaginary(self)
sympy.functions.elementary.complexes.sign._eval_is_integer(self)
sympy.functions.elementary.complexes.sign._eval_is_nonnegative(self)
sympy.functions.elementary.complexes.sign._eval_is_nonpositive(self)
sympy.functions.elementary.complexes.sign._eval_is_zero(self)
sympy.functions.elementary.complexes.sign._eval_power(self,other)
sympy.functions.elementary.complexes.sign._eval_rewrite_as_Heaviside(self,arg)
sympy.functions.elementary.complexes.sign._eval_rewrite_as_Piecewise(self,arg)
sympy.functions.elementary.complexes.sign._eval_simplify(self,ratio,measure)
sympy.functions.elementary.complexes.sign._sage_(self)
sympy.functions.elementary.complexes.sign.doit(self)
sympy.functions.elementary.complexes.sign.eval(cls,arg)
sympy.functions.elementary.complexes.transpose(Function)
sympy.functions.elementary.complexes.transpose._eval_adjoint(self)
sympy.functions.elementary.complexes.transpose._eval_conjugate(self)
sympy.functions.elementary.complexes.transpose._eval_transpose(self)
sympy.functions.elementary.complexes.transpose.eval(cls,arg)
sympy.functions.elementary.complexes.unbranched_argument(arg)
sympy.im(Function)
sympy.im._eval_derivative(self,x)
sympy.im._sage_(self)
sympy.im.as_real_imag(self,deep=True,**hints)
sympy.im.eval(cls,arg)
sympy.periodic_argument(Function)
sympy.periodic_argument._eval_evalf(self,prec)
sympy.periodic_argument._getunbranched(cls,ar)
sympy.periodic_argument.eval(cls,ar,period)
sympy.polar_lift(Function)
sympy.polar_lift._eval_Abs(self)
sympy.polar_lift._eval_evalf(self,prec)
sympy.polar_lift.eval(cls,arg)
sympy.principal_branch(Function)
sympy.principal_branch._eval_evalf(self,prec)
sympy.principal_branch.eval(self,x,period)
sympy.re(Function)
sympy.re._eval_derivative(self,x)
sympy.re._sage_(self)
sympy.re.as_real_imag(self,deep=True,**hints)
sympy.re.eval(cls,arg)
sympy.sign(Function)
sympy.sign._eval_Abs(self)
sympy.sign._eval_conjugate(self)
sympy.sign._eval_derivative(self,x)
sympy.sign._eval_is_imaginary(self)
sympy.sign._eval_is_integer(self)
sympy.sign._eval_is_nonnegative(self)
sympy.sign._eval_is_nonpositive(self)
sympy.sign._eval_is_zero(self)
sympy.sign._eval_power(self,other)
sympy.sign._eval_rewrite_as_Heaviside(self,arg)
sympy.sign._eval_rewrite_as_Piecewise(self,arg)
sympy.sign._eval_simplify(self,ratio,measure)
sympy.sign._sage_(self)
sympy.sign.doit(self)
sympy.sign.eval(cls,arg)
sympy.transpose(Function)
sympy.transpose._eval_adjoint(self)
sympy.transpose._eval_conjugate(self)
sympy.transpose._eval_transpose(self)
sympy.transpose.eval(cls,arg)
sympy.unbranched_argument(arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/hyperbolic.py----------------------------------------
A:sympy.functions.elementary.hyperbolic.arg->self.args[0].as_leading_term(x)
A:sympy.functions.elementary.hyperbolic.i_coeff->self.args[0].as_leading_term(x).as_coefficient(S.ImaginaryUnit)
A:sympy.functions.elementary.hyperbolic.x->sympify(x)
A:sympy.functions.elementary.hyperbolic.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.elementary.hyperbolic.(re_part, im_part)->self.as_real_imag(deep=deep, **hints)
A:sympy.functions.elementary.hyperbolic.(x, y)->self.args[0].as_leading_term(x).as_two_terms()
A:sympy.functions.elementary.hyperbolic.(coeff, terms)->self.args[0].as_leading_term(x).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.hyperbolic.tanh_half->tanh(S.Half * arg)
A:sympy.functions.elementary.hyperbolic.coth_half->coth(S.Half * arg)
A:sympy.functions.elementary.hyperbolic.B->sympy.core.C.bernoulli(n + 1)
A:sympy.functions.elementary.hyperbolic.F->sympy.core.C.factorial(k)
A:sympy.functions.elementary.hyperbolic.R->sympy.core.C.RisingFactorial(S.Half, k)
sympy.acosh(Function)
sympy.acosh._eval_as_leading_term(self,x)
sympy.acosh._sage_(self)
sympy.acosh.eval(cls,arg)
sympy.acosh.fdiff(self,argindex=1)
sympy.acosh.inverse(self,argindex=1)
sympy.acosh.taylor_term(n,x,*previous_terms)
sympy.acoth(Function)
sympy.acoth._eval_as_leading_term(self,x)
sympy.acoth._sage_(self)
sympy.acoth.eval(cls,arg)
sympy.acoth.fdiff(self,argindex=1)
sympy.acoth.inverse(self,argindex=1)
sympy.acoth.taylor_term(n,x,*previous_terms)
sympy.asinh(Function)
sympy.asinh._eval_as_leading_term(self,x)
sympy.asinh._sage_(self)
sympy.asinh.eval(cls,arg)
sympy.asinh.fdiff(self,argindex=1)
sympy.asinh.inverse(self,argindex=1)
sympy.asinh.taylor_term(n,x,*previous_terms)
sympy.atanh(Function)
sympy.atanh._eval_as_leading_term(self,x)
sympy.atanh._sage_(self)
sympy.atanh.eval(cls,arg)
sympy.atanh.fdiff(self,argindex=1)
sympy.atanh.inverse(self,argindex=1)
sympy.atanh.taylor_term(n,x,*previous_terms)
sympy.cosh(HyperbolicFunction)
sympy.cosh._eval_as_leading_term(self,x)
sympy.cosh._eval_conjugate(self)
sympy.cosh._eval_expand_complex(self,deep=True,**hints)
sympy.cosh._eval_expand_trig(self,deep=True,**hints)
sympy.cosh._eval_is_finite(self)
sympy.cosh._eval_is_real(self)
sympy.cosh._eval_rewrite_as_coth(self,arg)
sympy.cosh._eval_rewrite_as_exp(self,arg)
sympy.cosh._eval_rewrite_as_sinh(self,arg)
sympy.cosh._eval_rewrite_as_tanh(self,arg)
sympy.cosh._eval_rewrite_as_tractable(self,arg)
sympy.cosh._sage_(self)
sympy.cosh.as_real_imag(self,deep=True,**hints)
sympy.cosh.eval(cls,arg)
sympy.cosh.fdiff(self,argindex=1)
sympy.cosh.taylor_term(n,x,*previous_terms)
sympy.coth(HyperbolicFunction)
sympy.coth._eval_as_leading_term(self,x)
sympy.coth._eval_conjugate(self)
sympy.coth._eval_rewrite_as_cosh(self,arg)
sympy.coth._eval_rewrite_as_exp(self,arg)
sympy.coth._eval_rewrite_as_sinh(self,arg)
sympy.coth._eval_rewrite_as_tanh(self,arg)
sympy.coth._eval_rewrite_as_tractable(self,arg)
sympy.coth._sage_(self)
sympy.coth.as_real_imag(self,deep=True,**hints)
sympy.coth.eval(cls,arg)
sympy.coth.fdiff(self,argindex=1)
sympy.coth.inverse(self,argindex=1)
sympy.coth.taylor_term(n,x,*previous_terms)
sympy.elementary.hyperbolic.HyperbolicFunction(Function)
sympy.functions.elementary.hyperbolic.HyperbolicFunction(Function)
sympy.functions.elementary.hyperbolic.acosh(Function)
sympy.functions.elementary.hyperbolic.acosh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.acosh._sage_(self)
sympy.functions.elementary.hyperbolic.acosh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.acosh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.acosh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.acosh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.acoth(Function)
sympy.functions.elementary.hyperbolic.acoth._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.acoth._sage_(self)
sympy.functions.elementary.hyperbolic.acoth.eval(cls,arg)
sympy.functions.elementary.hyperbolic.acoth.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.acoth.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.acoth.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.asinh(Function)
sympy.functions.elementary.hyperbolic.asinh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.asinh._sage_(self)
sympy.functions.elementary.hyperbolic.asinh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.asinh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.asinh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.asinh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.atanh(Function)
sympy.functions.elementary.hyperbolic.atanh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.atanh._sage_(self)
sympy.functions.elementary.hyperbolic.atanh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.atanh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.atanh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.atanh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.cosh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.cosh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.cosh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.cosh._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh._eval_expand_trig(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.cosh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_coth(self,arg)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_sinh(self,arg)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_tanh(self,arg)
sympy.functions.elementary.hyperbolic.cosh._eval_rewrite_as_tractable(self,arg)
sympy.functions.elementary.hyperbolic.cosh._sage_(self)
sympy.functions.elementary.hyperbolic.cosh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.cosh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.cosh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.cosh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.coth(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.coth._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.coth._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_cosh(self,arg)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_sinh(self,arg)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_tanh(self,arg)
sympy.functions.elementary.hyperbolic.coth._eval_rewrite_as_tractable(self,arg)
sympy.functions.elementary.hyperbolic.coth._sage_(self)
sympy.functions.elementary.hyperbolic.coth.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.coth.eval(cls,arg)
sympy.functions.elementary.hyperbolic.coth.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.coth.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.coth.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.sinh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.sinh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.sinh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.sinh._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh._eval_expand_trig(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.sinh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_cosh(self,arg)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_coth(self,arg)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_tanh(self,arg)
sympy.functions.elementary.hyperbolic.sinh._eval_rewrite_as_tractable(self,arg)
sympy.functions.elementary.hyperbolic.sinh._sage_(self)
sympy.functions.elementary.hyperbolic.sinh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.sinh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.sinh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.sinh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.sinh.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.hyperbolic.tanh(HyperbolicFunction)
sympy.functions.elementary.hyperbolic.tanh._eval_as_leading_term(self,x)
sympy.functions.elementary.hyperbolic.tanh._eval_conjugate(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_finite(self)
sympy.functions.elementary.hyperbolic.tanh._eval_is_real(self)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_cosh(self,arg)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_coth(self,arg)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_sinh(self,arg)
sympy.functions.elementary.hyperbolic.tanh._eval_rewrite_as_tractable(self,arg)
sympy.functions.elementary.hyperbolic.tanh._sage_(self)
sympy.functions.elementary.hyperbolic.tanh.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.hyperbolic.tanh.eval(cls,arg)
sympy.functions.elementary.hyperbolic.tanh.fdiff(self,argindex=1)
sympy.functions.elementary.hyperbolic.tanh.inverse(self,argindex=1)
sympy.functions.elementary.hyperbolic.tanh.taylor_term(n,x,*previous_terms)
sympy.sinh(HyperbolicFunction)
sympy.sinh._eval_as_leading_term(self,x)
sympy.sinh._eval_conjugate(self)
sympy.sinh._eval_expand_complex(self,deep=True,**hints)
sympy.sinh._eval_expand_trig(self,deep=True,**hints)
sympy.sinh._eval_is_finite(self)
sympy.sinh._eval_is_real(self)
sympy.sinh._eval_rewrite_as_cosh(self,arg)
sympy.sinh._eval_rewrite_as_coth(self,arg)
sympy.sinh._eval_rewrite_as_exp(self,arg)
sympy.sinh._eval_rewrite_as_tanh(self,arg)
sympy.sinh._eval_rewrite_as_tractable(self,arg)
sympy.sinh._sage_(self)
sympy.sinh.as_real_imag(self,deep=True,**hints)
sympy.sinh.eval(cls,arg)
sympy.sinh.fdiff(self,argindex=1)
sympy.sinh.inverse(self,argindex=1)
sympy.sinh.taylor_term(n,x,*previous_terms)
sympy.tanh(HyperbolicFunction)
sympy.tanh._eval_as_leading_term(self,x)
sympy.tanh._eval_conjugate(self)
sympy.tanh._eval_is_finite(self)
sympy.tanh._eval_is_real(self)
sympy.tanh._eval_rewrite_as_cosh(self,arg)
sympy.tanh._eval_rewrite_as_coth(self,arg)
sympy.tanh._eval_rewrite_as_exp(self,arg)
sympy.tanh._eval_rewrite_as_sinh(self,arg)
sympy.tanh._eval_rewrite_as_tractable(self,arg)
sympy.tanh._sage_(self)
sympy.tanh.as_real_imag(self,deep=True,**hints)
sympy.tanh.eval(cls,arg)
sympy.tanh.fdiff(self,argindex=1)
sympy.tanh.inverse(self,argindex=1)
sympy.tanh.taylor_term(n,x,*previous_terms)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/exponential.py----------------------------------------
A:sympy.functions.elementary.exponential.neg_exp->_coeff_isneg(exp)
A:sympy.functions.elementary.exponential.s->self.func(*self.args)
A:sympy.functions.elementary.exponential.(b, e)->self.as_base_exp()
A:sympy.functions.elementary.exponential.i->im(self.args[0])
A:sympy.functions.elementary.exponential.res->exp(self.args[0])._eval_evalf(prec)
A:sympy.functions.elementary.exponential.coeff->self.args[0].as_leading_term(x).as_coefficient(S.ImaginaryUnit)
A:sympy.functions.elementary.exponential.(coeff, terms)->self.args[0].as_leading_term(x).as_coeff_Mul()
A:sympy.functions.elementary.exponential.newa->cls(a)
A:sympy.functions.elementary.exponential.x->sympify(x)
A:sympy.functions.elementary.exponential.(re, im)->self.args[0].as_real_imag()
A:sympy.functions.elementary.exponential.re->sympy.re.expand(deep, **hints).expand(deep, **hints)
A:sympy.functions.elementary.exponential.im->sympy.im.expand(deep, **hints).expand(deep, **hints)
A:sympy.functions.elementary.exponential.old->exp(old.exp * log(old.base))
A:sympy.functions.elementary.exponential.arg_series->self.args[0].as_leading_term(x)._eval_nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.exponential.arg0->limit(arg_series.removeO(), x, 0)
A:sympy.functions.elementary.exponential.t->Dummy('t')
A:sympy.functions.elementary.exponential.exp_series->exp_series.removeO().removeO()
A:sympy.functions.elementary.exponential.o->exp_series.removeO().removeO().getO()
A:sympy.functions.elementary.exponential.r->self.args[0].as_leading_term(x).match(k * x ** l)
A:sympy.functions.elementary.exponential.g->g.nseries(x, n=n, logx=logx).nseries(x, n=n, logx=logx)
A:sympy.functions.elementary.exponential.arg->self.args[0].as_leading_term(x)
A:sympy.functions.elementary.exponential.base->sympify(base)
A:sympy.functions.elementary.exponential.n->multiplicity(base, arg)
A:sympy.functions.elementary.exponential.force->hints.get('force', False)
A:sympy.functions.elementary.exponential.p->cancel(s / (a * x ** b) - 1)
A:sympy.functions.elementary.exponential.a->self.func(b)
A:sympy.functions.elementary.exponential.expr->expand_log(expr, deep=True)
A:sympy.functions.elementary.exponential.abs->sympy.core.C.Abs(self.args[0])
A:sympy.functions.elementary.exponential.logx->log(x)
A:sympy.functions.elementary.exponential.(a, b)->self.func(*self.args).leadterm(x)
sympy.LambertW(Function)
sympy.LambertW._eval_is_algebraic(self)
sympy.LambertW._eval_is_real(self)
sympy.LambertW.eval(cls,x,k=None)
sympy.LambertW.fdiff(self,argindex=1)
sympy.elementary.exponential.ExpBase(Function)
sympy.elementary.exponential.ExpBase._eval_conjugate(self)
sympy.elementary.exponential.ExpBase._eval_expand_power_exp(self,**hints)
sympy.elementary.exponential.ExpBase._eval_is_finite(self)
sympy.elementary.exponential.ExpBase._eval_is_rational(self)
sympy.elementary.exponential.ExpBase._eval_is_zero(self)
sympy.elementary.exponential.ExpBase._eval_power(self,other)
sympy.elementary.exponential.ExpBase.as_base_exp(self)
sympy.elementary.exponential.ExpBase.as_numer_denom(self)
sympy.elementary.exponential.ExpBase.exp(self)
sympy.elementary.exponential.ExpBase.inverse(self,argindex=1)
sympy.exp(ExpBase)
sympy.exp._eval_as_leading_term(self,x)
sympy.exp._eval_is_algebraic(self)
sympy.exp._eval_is_positive(self)
sympy.exp._eval_is_real(self)
sympy.exp._eval_nseries(self,x,n,logx)
sympy.exp._eval_rewrite_as_cos(self,arg)
sympy.exp._eval_rewrite_as_sin(self,arg)
sympy.exp._eval_rewrite_as_tanh(self,arg)
sympy.exp._eval_subs(self,old,new)
sympy.exp._sage_(self)
sympy.exp._taylor(self,x,n)
sympy.exp.as_real_imag(self,deep=True,**hints)
sympy.exp.base(self)
sympy.exp.eval(cls,arg)
sympy.exp.fdiff(self,argindex=1)
sympy.exp.taylor_term(n,x,*previous_terms)
sympy.exp_polar(ExpBase)
sympy.exp_polar._eval_Abs(self)
sympy.exp_polar._eval_evalf(self,prec)
sympy.exp_polar._eval_is_real(self)
sympy.exp_polar._eval_power(self,other)
sympy.exp_polar.as_base_exp(self)
sympy.functions.elementary.exponential.ExpBase(Function)
sympy.functions.elementary.exponential.ExpBase._eval_conjugate(self)
sympy.functions.elementary.exponential.ExpBase._eval_expand_power_exp(self,**hints)
sympy.functions.elementary.exponential.ExpBase._eval_is_finite(self)
sympy.functions.elementary.exponential.ExpBase._eval_is_rational(self)
sympy.functions.elementary.exponential.ExpBase._eval_is_zero(self)
sympy.functions.elementary.exponential.ExpBase._eval_power(self,other)
sympy.functions.elementary.exponential.ExpBase.as_base_exp(self)
sympy.functions.elementary.exponential.ExpBase.as_numer_denom(self)
sympy.functions.elementary.exponential.ExpBase.exp(self)
sympy.functions.elementary.exponential.ExpBase.inverse(self,argindex=1)
sympy.functions.elementary.exponential.LambertW(Function)
sympy.functions.elementary.exponential.LambertW._eval_is_algebraic(self)
sympy.functions.elementary.exponential.LambertW._eval_is_real(self)
sympy.functions.elementary.exponential.LambertW.eval(cls,x,k=None)
sympy.functions.elementary.exponential.LambertW.fdiff(self,argindex=1)
sympy.functions.elementary.exponential.exp(ExpBase)
sympy.functions.elementary.exponential.exp._eval_as_leading_term(self,x)
sympy.functions.elementary.exponential.exp._eval_is_algebraic(self)
sympy.functions.elementary.exponential.exp._eval_is_positive(self)
sympy.functions.elementary.exponential.exp._eval_is_real(self)
sympy.functions.elementary.exponential.exp._eval_nseries(self,x,n,logx)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_cos(self,arg)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_sin(self,arg)
sympy.functions.elementary.exponential.exp._eval_rewrite_as_tanh(self,arg)
sympy.functions.elementary.exponential.exp._eval_subs(self,old,new)
sympy.functions.elementary.exponential.exp._sage_(self)
sympy.functions.elementary.exponential.exp._taylor(self,x,n)
sympy.functions.elementary.exponential.exp.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.exponential.exp.base(self)
sympy.functions.elementary.exponential.exp.eval(cls,arg)
sympy.functions.elementary.exponential.exp.fdiff(self,argindex=1)
sympy.functions.elementary.exponential.exp.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.exponential.exp_polar(ExpBase)
sympy.functions.elementary.exponential.exp_polar._eval_Abs(self)
sympy.functions.elementary.exponential.exp_polar._eval_evalf(self,prec)
sympy.functions.elementary.exponential.exp_polar._eval_is_real(self)
sympy.functions.elementary.exponential.exp_polar._eval_power(self,other)
sympy.functions.elementary.exponential.exp_polar.as_base_exp(self)
sympy.functions.elementary.exponential.log(Function)
sympy.functions.elementary.exponential.log._eval_as_leading_term(self,x)
sympy.functions.elementary.exponential.log._eval_expand_log(self,deep=True,**hints)
sympy.functions.elementary.exponential.log._eval_is_algebraic(self)
sympy.functions.elementary.exponential.log._eval_is_finite(self)
sympy.functions.elementary.exponential.log._eval_is_positive(self)
sympy.functions.elementary.exponential.log._eval_is_rational(self)
sympy.functions.elementary.exponential.log._eval_is_real(self)
sympy.functions.elementary.exponential.log._eval_is_zero(self)
sympy.functions.elementary.exponential.log._eval_nseries(self,x,n,logx)
sympy.functions.elementary.exponential.log._eval_simplify(self,ratio,measure)
sympy.functions.elementary.exponential.log._sage_(self)
sympy.functions.elementary.exponential.log.as_base_exp(self)
sympy.functions.elementary.exponential.log.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.exponential.log.eval(cls,arg,base=None)
sympy.functions.elementary.exponential.log.fdiff(self,argindex=1)
sympy.functions.elementary.exponential.log.inverse(self,argindex=1)
sympy.functions.elementary.exponential.log.taylor_term(n,x,*previous_terms)
sympy.log(Function)
sympy.log._eval_as_leading_term(self,x)
sympy.log._eval_expand_log(self,deep=True,**hints)
sympy.log._eval_is_algebraic(self)
sympy.log._eval_is_finite(self)
sympy.log._eval_is_positive(self)
sympy.log._eval_is_rational(self)
sympy.log._eval_is_real(self)
sympy.log._eval_is_zero(self)
sympy.log._eval_nseries(self,x,n,logx)
sympy.log._eval_simplify(self,ratio,measure)
sympy.log._sage_(self)
sympy.log.as_base_exp(self)
sympy.log.as_real_imag(self,deep=True,**hints)
sympy.log.eval(cls,arg,base=None)
sympy.log.fdiff(self,argindex=1)
sympy.log.inverse(self,argindex=1)
sympy.log.taylor_term(n,x,*previous_terms)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/integers.py----------------------------------------
A:sympy.functions.elementary.integers.i->sympy.core.basic.C.im(arg)
A:sympy.functions.elementary.integers.v->cls._eval_number(arg)
A:sympy.functions.elementary.integers.terms->sympy.core.Add.make_args(arg)
A:sympy.functions.elementary.integers.(re, im)->get_integer_part(npart, cls._dir, {}, return_ints=True)
A:sympy.functions.elementary.integers.r->self.subs(x, 0)
A:sympy.functions.elementary.integers.args0->args.subs(x, 0)
sympy.ceiling(RoundFunction)
sympy.ceiling._eval_nseries(self,x,n,logx)
sympy.ceiling._eval_number(cls,arg)
sympy.elementary.integers.RoundFunction(Function)
sympy.elementary.integers.RoundFunction._eval_is_finite(self)
sympy.elementary.integers.RoundFunction._eval_is_integer(self)
sympy.elementary.integers.RoundFunction._eval_is_real(self)
sympy.elementary.integers.RoundFunction.eval(cls,arg)
sympy.floor(RoundFunction)
sympy.floor._eval_nseries(self,x,n,logx)
sympy.floor._eval_number(cls,arg)
sympy.functions.elementary.integers.RoundFunction(Function)
sympy.functions.elementary.integers.RoundFunction._eval_is_finite(self)
sympy.functions.elementary.integers.RoundFunction._eval_is_integer(self)
sympy.functions.elementary.integers.RoundFunction._eval_is_real(self)
sympy.functions.elementary.integers.RoundFunction.eval(cls,arg)
sympy.functions.elementary.integers.ceiling(RoundFunction)
sympy.functions.elementary.integers.ceiling._eval_nseries(self,x,n,logx)
sympy.functions.elementary.integers.ceiling._eval_number(cls,arg)
sympy.functions.elementary.integers.floor(RoundFunction)
sympy.functions.elementary.integers.floor._eval_nseries(self,x,n,logx)
sympy.functions.elementary.integers.floor._eval_number(cls,arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/piecewise.py----------------------------------------
A:sympy.functions.elementary.piecewise.pair->ExprCondPair(*ec)
A:sympy.functions.elementary.piecewise.r->cls.eval(*newargs)
A:sympy.functions.elementary.piecewise.or1->Or(*[cond for (_, cond) in args if cond != true])
A:sympy.functions.elementary.piecewise.or2->Or(*[c for (_, c) in expr.args if c != true])
A:sympy.functions.elementary.piecewise.cond_eval->cls.__eval_cond(cond)
A:sympy.functions.elementary.piecewise.newcond->distribute_and_over_or(newcond)
A:sympy.functions.elementary.piecewise.non_false_ecpairs[-1]->ExprCondPair(expr, newcond)
A:sympy.functions.elementary.piecewise.e->e._subs(old, new)._subs(old, new)
A:sympy.functions.elementary.piecewise.c->c._subs(old, new)._subs(old, new)
A:sympy.functions.elementary.piecewise.intervals->self._sort_expr_cond(sym, S.NegativeInfinity, S.Infinity, c)
A:sympy.functions.elementary.piecewise.val->e._subs(old, new)._subs(old, new)._eval_interval(sym, a, b)
A:sympy.functions.elementary.piecewise.int_expr->self._sort_expr_cond(sym, a, b)
A:sympy.functions.elementary.piecewise.default->self.func(*independent_expr_cond)
A:sympy.functions.elementary.piecewise.cond2->_solve_inequality(cond2, sym)
A:sympy.functions.elementary.piecewise.upper->Min(upper, int_expr[n][0])
A:sympy.functions.elementary.piecewise.lower->Max(cond2.lts, lower)
A:sympy.functions.elementary.piecewise.cond->_solve_inequality(cond, sym)
A:sympy.functions.elementary.piecewise.int_expr[n][1]->Min(lower, int_expr[n][1])
A:sympy.functions.elementary.piecewise.int_expr[n][0]->Max(upper, int_expr[n][0])
A:sympy.functions.elementary.piecewise.or_cond->Or(or_cond, cond)
A:sympy.functions.elementary.piecewise.newval->Max(*int_expr[n][:-1])
A:sympy.functions.elementary.piecewise.curr_low->Min(b, int_b)
A:sympy.functions.elementary.piecewise.args->list(self.args)
A:sympy.functions.elementary.piecewise.a->getattr(expr, is_attr)
A:sympy.functions.elementary.piecewise.cond_int->U.intersect(cond.as_set())
A:sympy.functions.elementary.piecewise.new_args->list(map(piecewise_fold, expr.args))
A:sympy.functions.elementary.piecewise.rtn->Or(rtn, And(other, c, e))
A:sympy.functions.elementary.piecewise.other->And(other, Not(c))
sympy.Piecewise(cls,*args,**options)
sympy.Piecewise.__eval_cond(cls,cond)
sympy.Piecewise._eval_adjoint(self)
sympy.Piecewise._eval_as_leading_term(self,x)
sympy.Piecewise._eval_conjugate(self)
sympy.Piecewise._eval_derivative(self,x)
sympy.Piecewise._eval_evalf(self,prec)
sympy.Piecewise._eval_integral(self,x)
sympy.Piecewise._eval_interval(self,sym,a,b)
sympy.Piecewise._eval_nseries(self,x,n,logx)
sympy.Piecewise._eval_power(self,s)
sympy.Piecewise._eval_subs(self,old,new)
sympy.Piecewise._eval_template_is_attr(self,is_attr,when_multiple=None)
sympy.Piecewise._eval_transpose(self)
sympy.Piecewise._sort_expr_cond(self,sym,a,b,targetcond=None)
sympy.Piecewise.as_expr_set_pairs(self)
sympy.Piecewise.doit(self,**hints)
sympy.Piecewise.eval(cls,*args)
sympy.elementary.piecewise.ExprCondPair(cls,expr,cond)
sympy.elementary.piecewise.ExprCondPair.__iter__(self)
sympy.elementary.piecewise.ExprCondPair.cond(self)
sympy.elementary.piecewise.ExprCondPair.expr(self)
sympy.elementary.piecewise.ExprCondPair.free_symbols(self)
sympy.elementary.piecewise.ExprCondPair.is_commutative(self)
sympy.functions.elementary.piecewise.ExprCondPair(cls,expr,cond)
sympy.functions.elementary.piecewise.ExprCondPair.__iter__(self)
sympy.functions.elementary.piecewise.ExprCondPair.__new__(cls,expr,cond)
sympy.functions.elementary.piecewise.ExprCondPair.cond(self)
sympy.functions.elementary.piecewise.ExprCondPair.expr(self)
sympy.functions.elementary.piecewise.ExprCondPair.free_symbols(self)
sympy.functions.elementary.piecewise.ExprCondPair.is_commutative(self)
sympy.functions.elementary.piecewise.Piecewise(cls,*args,**options)
sympy.functions.elementary.piecewise.Piecewise.__eval_cond(cls,cond)
sympy.functions.elementary.piecewise.Piecewise.__new__(cls,*args,**options)
sympy.functions.elementary.piecewise.Piecewise._eval_adjoint(self)
sympy.functions.elementary.piecewise.Piecewise._eval_as_leading_term(self,x)
sympy.functions.elementary.piecewise.Piecewise._eval_conjugate(self)
sympy.functions.elementary.piecewise.Piecewise._eval_derivative(self,x)
sympy.functions.elementary.piecewise.Piecewise._eval_evalf(self,prec)
sympy.functions.elementary.piecewise.Piecewise._eval_integral(self,x)
sympy.functions.elementary.piecewise.Piecewise._eval_interval(self,sym,a,b)
sympy.functions.elementary.piecewise.Piecewise._eval_nseries(self,x,n,logx)
sympy.functions.elementary.piecewise.Piecewise._eval_power(self,s)
sympy.functions.elementary.piecewise.Piecewise._eval_subs(self,old,new)
sympy.functions.elementary.piecewise.Piecewise._eval_template_is_attr(self,is_attr,when_multiple=None)
sympy.functions.elementary.piecewise.Piecewise._eval_transpose(self)
sympy.functions.elementary.piecewise.Piecewise._sort_expr_cond(self,sym,a,b,targetcond=None)
sympy.functions.elementary.piecewise.Piecewise.as_expr_set_pairs(self)
sympy.functions.elementary.piecewise.Piecewise.doit(self,**hints)
sympy.functions.elementary.piecewise.Piecewise.eval(cls,*args)
sympy.functions.elementary.piecewise.piecewise_fold(expr)
sympy.piecewise_fold(expr)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/miscellaneous.py----------------------------------------
A:sympy.functions.elementary.miscellaneous.x->sympy.core.C.Dummy('x')
A:sympy.functions.elementary.miscellaneous.obj->sympy.core.expr.Expr.__new__(cls, _args, **assumptions)
A:sympy.functions.elementary.miscellaneous.obj.nargs->FiniteSet(1)
A:sympy.functions.elementary.miscellaneous.n->len(self.args)
A:sympy.functions.elementary.miscellaneous.rv->sympify(arg)
A:sympy.functions.elementary.miscellaneous.n1pow->Transform(lambda x: S.NegativeOne, lambda x: x.is_Pow and x.base is S.NegativeOne and x.exp.is_Rational and (x.exp.p == 1) and x.exp.q % 2)
A:sympy.functions.elementary.miscellaneous._args->frozenset(args)
A:sympy.functions.elementary.miscellaneous.args->cls._find_localzeros(set(_args), **assumptions)
A:sympy.functions.elementary.miscellaneous.localzeros->set()
A:sympy.functions.elementary.miscellaneous.localzeros_->list(localzeros)
A:sympy.functions.elementary.miscellaneous.xy->cls._rel(x, y)
A:sympy.functions.elementary.miscellaneous.yx->cls._rel_inversed(x, y)
A:sympy.functions.elementary.miscellaneous.da->a.diff(s)
A:sympy.functions.elementary.miscellaneous.df->Function.fdiff(self, i)
A:sympy.functions.elementary.miscellaneous.newargs->tuple([self.args[i] for i in xrange(n) if i != argindex])
sympy.IdentityFunction(cls)
sympy.Max(MinMaxBase,Application)
sympy.Max._eval_rewrite_as_Heaviside(self,*args)
sympy.Max._rel(cls,x,y)
sympy.Max._rel_inversed(cls,x,y)
sympy.Max.fdiff(self,argindex)
sympy.Min(MinMaxBase,Application)
sympy.Min._eval_rewrite_as_Heaviside(self,*args)
sympy.Min._rel(cls,x,y)
sympy.Min._rel_inversed(cls,x,y)
sympy.Min.fdiff(self,argindex)
sympy.MinMaxBase(cls,*args,**assumptions)
sympy.MinMaxBase._eval_derivative(self,s)
sympy.MinMaxBase._find_localzeros(cls,values,**options)
sympy.MinMaxBase._is_asneeded(cls,x,y)
sympy.MinMaxBase._is_connected(cls,x,y)
sympy.MinMaxBase._new_args_filter(cls,arg_sequence)
sympy.MinMaxBase.evalf(self,prec=None,**options)
sympy.MinMaxBase.is_real(self)
sympy.cbrt(arg)
sympy.functions.elementary.miscellaneous.IdentityFunction(cls)
sympy.functions.elementary.miscellaneous.IdentityFunction.__new__(cls)
sympy.functions.elementary.miscellaneous.Max(MinMaxBase,Application)
sympy.functions.elementary.miscellaneous.Max._eval_rewrite_as_Heaviside(self,*args)
sympy.functions.elementary.miscellaneous.Max._rel(cls,x,y)
sympy.functions.elementary.miscellaneous.Max._rel_inversed(cls,x,y)
sympy.functions.elementary.miscellaneous.Max.fdiff(self,argindex)
sympy.functions.elementary.miscellaneous.Min(MinMaxBase,Application)
sympy.functions.elementary.miscellaneous.Min._eval_rewrite_as_Heaviside(self,*args)
sympy.functions.elementary.miscellaneous.Min._rel(cls,x,y)
sympy.functions.elementary.miscellaneous.Min._rel_inversed(cls,x,y)
sympy.functions.elementary.miscellaneous.Min.fdiff(self,argindex)
sympy.functions.elementary.miscellaneous.MinMaxBase(cls,*args,**assumptions)
sympy.functions.elementary.miscellaneous.MinMaxBase.__new__(cls,*args,**assumptions)
sympy.functions.elementary.miscellaneous.MinMaxBase._eval_derivative(self,s)
sympy.functions.elementary.miscellaneous.MinMaxBase._find_localzeros(cls,values,**options)
sympy.functions.elementary.miscellaneous.MinMaxBase._is_asneeded(cls,x,y)
sympy.functions.elementary.miscellaneous.MinMaxBase._is_connected(cls,x,y)
sympy.functions.elementary.miscellaneous.MinMaxBase._new_args_filter(cls,arg_sequence)
sympy.functions.elementary.miscellaneous.MinMaxBase.evalf(self,prec=None,**options)
sympy.functions.elementary.miscellaneous.MinMaxBase.is_real(self)
sympy.functions.elementary.miscellaneous.cbrt(arg)
sympy.functions.elementary.miscellaneous.real_root(arg,n=None)
sympy.functions.elementary.miscellaneous.root(arg,n)
sympy.functions.elementary.miscellaneous.sqrt(arg)
sympy.real_root(arg,n=None)
sympy.root(arg,n)
sympy.sqrt(arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/trigonometric.py----------------------------------------
A:sympy.functions.elementary.trigonometric.s->self.func(*self.args)
A:sympy.functions.elementary.trigonometric.pi_coeff->_pi_coeff(arg)
A:sympy.functions.elementary.trigonometric.(re_part, im_part)->self.as_real_imag(deep=deep, **hints)
A:sympy.functions.elementary.trigonometric.(re, im)->self._as_real_imag(deep=deep, **hints)
A:sympy.functions.elementary.trigonometric.(K, p)->a.as_two_terms()
A:sympy.functions.elementary.trigonometric.arg->self.args[0].as_leading_term(x)
A:sympy.functions.elementary.trigonometric.cx->cot(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.(c, x)->cot(x, evaluate=False)._eval_expand_trig().as_coeff_Mul()
A:sympy.functions.elementary.trigonometric.i->int(cm)
A:sympy.functions.elementary.trigonometric.c->sympy.core.basic.C.Rational(int(c))
A:sympy.functions.elementary.trigonometric.i_coeff->self.args[0].as_leading_term(x).as_coefficient(S.ImaginaryUnit)
A:sympy.functions.elementary.trigonometric.result->cos(narg)
A:sympy.functions.elementary.trigonometric.(x, m)->_peeloff_pi(arg)
A:sympy.functions.elementary.trigonometric.x->sympy.core.basic.C.im(x)
A:sympy.functions.elementary.trigonometric.tan_half->tan(S.Half * arg)
A:sympy.functions.elementary.trigonometric.cot_half->cot(arg / 2)
A:sympy.functions.elementary.trigonometric.(x, y)->self.args[0].as_leading_term(x).as_two_terms()
A:sympy.functions.elementary.trigonometric.sx->sin(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.sy->sin(y, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.cy->cos(y, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.(n, x)->self.args[0].as_leading_term(x).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.trigonometric.nval->nval.rewrite(sqrt).rewrite(sqrt)
A:sympy.functions.elementary.trigonometric.g->migcdex(x[1:])
A:sympy.functions.elementary.trigonometric.(u, v, h)->igcdex(x[0], g[-1])
A:sympy.functions.elementary.trigonometric.h->migcdex(a)
A:sympy.functions.elementary.trigonometric.primes->dict([(p, 0) for p in cst_table_some])
A:sympy.functions.elementary.trigonometric.FC->fermatCoords(pi_coeff.q)
A:sympy.functions.elementary.trigonometric.decomp->ipartfrac(pi_coeff)
A:sympy.functions.elementary.trigonometric.pcls->cos(sum([x[0] for x in X]))._eval_expand_trig().subs(X)
A:sympy.functions.elementary.trigonometric.(coeff, terms)->self.args[0].as_leading_term(x).as_coeff_Mul(rational=True)
A:sympy.functions.elementary.trigonometric.tanm->tan(m)
A:sympy.functions.elementary.trigonometric.tanx->tan(x)
A:sympy.functions.elementary.trigonometric.B->sympy.core.basic.C.bernoulli(n + 1)
A:sympy.functions.elementary.trigonometric.F->sympy.core.basic.C.factorial(k)
A:sympy.functions.elementary.trigonometric.n->len(arg.args)
A:sympy.functions.elementary.trigonometric.tx->tan(x, evaluate=False)._eval_expand_trig()
A:sympy.functions.elementary.trigonometric.Yg->numbered_symbols('Y')
A:sympy.functions.elementary.trigonometric.z->sympy.core.basic.C.Symbol('dummy', real=True)
A:sympy.functions.elementary.trigonometric.P->((z + I) ** coeff).expand()
A:sympy.functions.elementary.trigonometric.y->sympy.core.basic.C.im(y)
A:sympy.functions.elementary.trigonometric.cotm->cot(m)
A:sympy.functions.elementary.trigonometric.cotx->cot(x)
A:sympy.functions.elementary.trigonometric.argnew->self.args[0].as_leading_term(x).subs(old, new)
A:sympy.functions.elementary.trigonometric.t->self._call_reciprocal(method_name, arg)
A:sympy.functions.elementary.trigonometric.o->self._reciprocal_of(self.args[0])
A:sympy.functions.elementary.trigonometric.R->sympy.core.basic.C.RisingFactorial(S.Half, k)
A:sympy.functions.elementary.trigonometric.r->self.func(self.args[0].conjugate())
sympy.acos(InverseTrigonometricFunction)
sympy.acos._eval_as_leading_term(self,x)
sympy.acos._eval_conjugate(self)
sympy.acos._eval_is_positive(self)
sympy.acos._eval_is_rational(self)
sympy.acos._eval_is_real(self)
sympy.acos._eval_rewrite_as_acot(self,arg)
sympy.acos._eval_rewrite_as_acsc(self,arg)
sympy.acos._eval_rewrite_as_asec(self,arg)
sympy.acos._eval_rewrite_as_asin(self,x)
sympy.acos._eval_rewrite_as_atan(self,x)
sympy.acos._eval_rewrite_as_log(self,x)
sympy.acos._sage_(self)
sympy.acos.eval(cls,arg)
sympy.acos.fdiff(self,argindex=1)
sympy.acos.inverse(self,argindex=1)
sympy.acos.taylor_term(n,x,*previous_terms)
sympy.acot(InverseTrigonometricFunction)
sympy.acot._eval_as_leading_term(self,x)
sympy.acot._eval_aseries(self,n,args0,x,logx)
sympy.acot._eval_is_positive(self)
sympy.acot._eval_is_rational(self)
sympy.acot._eval_is_real(self)
sympy.acot._eval_rewrite_as_acos(self,arg)
sympy.acot._eval_rewrite_as_acsc(self,arg)
sympy.acot._eval_rewrite_as_asec(self,arg)
sympy.acot._eval_rewrite_as_asin(self,arg)
sympy.acot._eval_rewrite_as_atan(self,arg)
sympy.acot._eval_rewrite_as_log(self,x)
sympy.acot._sage_(self)
sympy.acot.eval(cls,arg)
sympy.acot.fdiff(self,argindex=1)
sympy.acot.inverse(self,argindex=1)
sympy.acot.taylor_term(n,x,*previous_terms)
sympy.acsc(InverseTrigonometricFunction)
sympy.acsc._eval_as_leading_term(self,x)
sympy.acsc._eval_rewrite_as_acos(self,arg)
sympy.acsc._eval_rewrite_as_acot(self,arg)
sympy.acsc._eval_rewrite_as_asec(self,arg)
sympy.acsc._eval_rewrite_as_asin(self,arg)
sympy.acsc._eval_rewrite_as_atan(self,arg)
sympy.acsc._eval_rewrite_as_log(self,arg)
sympy.acsc._sage_(self)
sympy.acsc.eval(cls,arg)
sympy.acsc.fdiff(self,argindex=1)
sympy.acsc.inverse(self,argindex=1)
sympy.asec(InverseTrigonometricFunction)
sympy.asec._eval_as_leading_term(self,x)
sympy.asec._eval_rewrite_as_acos(self,arg)
sympy.asec._eval_rewrite_as_acot(self,arg)
sympy.asec._eval_rewrite_as_acsc(self,arg)
sympy.asec._eval_rewrite_as_asin(self,arg)
sympy.asec._eval_rewrite_as_atan(self,arg)
sympy.asec._eval_rewrite_as_log(self,arg)
sympy.asec._sage_(self)
sympy.asec.eval(cls,arg)
sympy.asec.fdiff(self,argindex=1)
sympy.asec.inverse(self,argindex=1)
sympy.asin(InverseTrigonometricFunction)
sympy.asin._eval_as_leading_term(self,x)
sympy.asin._eval_is_positive(self)
sympy.asin._eval_is_rational(self)
sympy.asin._eval_is_real(self)
sympy.asin._eval_rewrite_as_acos(self,x)
sympy.asin._eval_rewrite_as_acot(self,arg)
sympy.asin._eval_rewrite_as_acsc(self,arg)
sympy.asin._eval_rewrite_as_asec(self,arg)
sympy.asin._eval_rewrite_as_atan(self,x)
sympy.asin._eval_rewrite_as_log(self,x)
sympy.asin._sage_(self)
sympy.asin.eval(cls,arg)
sympy.asin.fdiff(self,argindex=1)
sympy.asin.inverse(self,argindex=1)
sympy.asin.taylor_term(n,x,*previous_terms)
sympy.atan(InverseTrigonometricFunction)
sympy.atan._eval_as_leading_term(self,x)
sympy.atan._eval_aseries(self,n,args0,x,logx)
sympy.atan._eval_is_positive(self)
sympy.atan._eval_is_rational(self)
sympy.atan._eval_is_real(self)
sympy.atan._eval_rewrite_as_acos(self,arg)
sympy.atan._eval_rewrite_as_acot(self,arg)
sympy.atan._eval_rewrite_as_acsc(self,arg)
sympy.atan._eval_rewrite_as_asec(self,arg)
sympy.atan._eval_rewrite_as_asin(self,arg)
sympy.atan._eval_rewrite_as_log(self,x)
sympy.atan._sage_(self)
sympy.atan.eval(cls,arg)
sympy.atan.fdiff(self,argindex=1)
sympy.atan.inverse(self,argindex=1)
sympy.atan.taylor_term(n,x,*previous_terms)
sympy.atan2(InverseTrigonometricFunction)
sympy.atan2._eval_conjugate(self)
sympy.atan2._eval_evalf(self,prec)
sympy.atan2._eval_is_real(self)
sympy.atan2._eval_rewrite_as_arg(self,y,x)
sympy.atan2._eval_rewrite_as_atan(self,y,x)
sympy.atan2._eval_rewrite_as_log(self,y,x)
sympy.atan2._sage_(self)
sympy.atan2.eval(cls,y,x)
sympy.atan2.fdiff(self,argindex)
sympy.cos(TrigonometricFunction)
sympy.cos._eval_as_leading_term(self,x)
sympy.cos._eval_conjugate(self)
sympy.cos._eval_expand_trig(self,**hints)
sympy.cos._eval_is_finite(self)
sympy.cos._eval_is_real(self)
sympy.cos._eval_rewrite_as_Pow(self,arg)
sympy.cos._eval_rewrite_as_cot(self,arg)
sympy.cos._eval_rewrite_as_exp(self,arg)
sympy.cos._eval_rewrite_as_pow(self,arg)
sympy.cos._eval_rewrite_as_sec(self,arg)
sympy.cos._eval_rewrite_as_sin(self,arg)
sympy.cos._eval_rewrite_as_sincos(self,arg)
sympy.cos._eval_rewrite_as_sqrt(self,arg)
sympy.cos._eval_rewrite_as_tan(self,arg)
sympy.cos._sage_(self)
sympy.cos.as_real_imag(self,deep=True,**hints)
sympy.cos.eval(cls,arg)
sympy.cos.fdiff(self,argindex=1)
sympy.cos.taylor_term(n,x,*previous_terms)
sympy.cot(TrigonometricFunction)
sympy.cot._eval_as_leading_term(self,x)
sympy.cot._eval_conjugate(self)
sympy.cot._eval_expand_trig(self,**hints)
sympy.cot._eval_is_finite(self)
sympy.cot._eval_is_real(self)
sympy.cot._eval_nseries(self,x,n,logx)
sympy.cot._eval_rewrite_as_Pow(self,arg)
sympy.cot._eval_rewrite_as_cos(self,x)
sympy.cot._eval_rewrite_as_exp(self,arg)
sympy.cot._eval_rewrite_as_pow(self,arg)
sympy.cot._eval_rewrite_as_sin(self,x)
sympy.cot._eval_rewrite_as_sincos(self,arg)
sympy.cot._eval_rewrite_as_sqrt(self,arg)
sympy.cot._eval_rewrite_as_tan(self,arg)
sympy.cot._eval_subs(self,old,new)
sympy.cot._sage_(self)
sympy.cot.as_real_imag(self,deep=True,**hints)
sympy.cot.eval(cls,arg)
sympy.cot.fdiff(self,argindex=1)
sympy.cot.inverse(self,argindex=1)
sympy.cot.taylor_term(n,x,*previous_terms)
sympy.csc(ReciprocalTrigonometricFunction)
sympy.csc._eval_rewrite_as_cot(self,arg)
sympy.csc._eval_rewrite_as_sin(self,arg)
sympy.csc._eval_rewrite_as_sincos(self,arg)
sympy.csc._sage_(self)
sympy.csc.fdiff(self,argindex=1)
sympy.csc.taylor_term(n,x,*previous_terms)
sympy.elementary.trigonometric.InverseTrigonometricFunction(Function)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction(TrigonometricFunction)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._calculate_reciprocal(self,method_name,*args,**kwargs)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._call_reciprocal(self,method_name,*args,**kwargs)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_as_leading_term(self,x)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_conjugate(self)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_expand_trig(self,**hints)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_finite(self)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_real(self)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_nseries(self,x,n,logx)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_Pow(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_cos(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_exp(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_pow(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sin(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sqrt(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_tan(self,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction._rewrite_reciprocal(self,method_name,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction.as_real_imag(self,deep=True,**hints)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction.eval(cls,arg)
sympy.elementary.trigonometric.ReciprocalTrigonometricFunction.fdiff(self,argindex=1)
sympy.elementary.trigonometric.TrigonometricFunction(Function)
sympy.elementary.trigonometric.TrigonometricFunction._as_real_imag(self,deep=True,**hints)
sympy.elementary.trigonometric.TrigonometricFunction._eval_expand_complex(self,deep=True,**hints)
sympy.elementary.trigonometric.TrigonometricFunction._eval_is_algebraic(self)
sympy.elementary.trigonometric.TrigonometricFunction._eval_is_rational(self)
sympy.elementary.trigonometric._peeloff_pi(arg)
sympy.elementary.trigonometric._pi_coeff(arg,cycles=1)
sympy.functions.elementary.trigonometric.InverseTrigonometricFunction(Function)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction(TrigonometricFunction)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._calculate_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._call_reciprocal(self,method_name,*args,**kwargs)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_conjugate(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_finite(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_is_real(self)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_nseries(self,x,n,logx)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_Pow(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_cos(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_pow(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sin(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_sqrt(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._eval_rewrite_as_tan(self,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction._rewrite_reciprocal(self,method_name,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.eval(cls,arg)
sympy.functions.elementary.trigonometric.ReciprocalTrigonometricFunction.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.TrigonometricFunction(Function)
sympy.functions.elementary.trigonometric.TrigonometricFunction._as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_expand_complex(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_is_algebraic(self)
sympy.functions.elementary.trigonometric.TrigonometricFunction._eval_is_rational(self)
sympy.functions.elementary.trigonometric._peeloff_pi(arg)
sympy.functions.elementary.trigonometric._pi_coeff(arg,cycles=1)
sympy.functions.elementary.trigonometric.acos(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acos._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.acos._eval_conjugate(self)
sympy.functions.elementary.trigonometric.acos._eval_is_positive(self)
sympy.functions.elementary.trigonometric.acos._eval_is_rational(self)
sympy.functions.elementary.trigonometric.acos._eval_is_real(self)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_acot(self,arg)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_acsc(self,arg)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_asec(self,arg)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_asin(self,x)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_atan(self,x)
sympy.functions.elementary.trigonometric.acos._eval_rewrite_as_log(self,x)
sympy.functions.elementary.trigonometric.acos._sage_(self)
sympy.functions.elementary.trigonometric.acos.eval(cls,arg)
sympy.functions.elementary.trigonometric.acos.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acos.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.acos.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.acot(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acot._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.acot._eval_aseries(self,n,args0,x,logx)
sympy.functions.elementary.trigonometric.acot._eval_is_positive(self)
sympy.functions.elementary.trigonometric.acot._eval_is_rational(self)
sympy.functions.elementary.trigonometric.acot._eval_is_real(self)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_acos(self,arg)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_acsc(self,arg)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_asec(self,arg)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_asin(self,arg)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_atan(self,arg)
sympy.functions.elementary.trigonometric.acot._eval_rewrite_as_log(self,x)
sympy.functions.elementary.trigonometric.acot._sage_(self)
sympy.functions.elementary.trigonometric.acot.eval(cls,arg)
sympy.functions.elementary.trigonometric.acot.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acot.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.acot.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.acsc(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.acsc._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_acos(self,arg)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_acot(self,arg)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_asec(self,arg)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_asin(self,arg)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_atan(self,arg)
sympy.functions.elementary.trigonometric.acsc._eval_rewrite_as_log(self,arg)
sympy.functions.elementary.trigonometric.acsc._sage_(self)
sympy.functions.elementary.trigonometric.acsc.eval(cls,arg)
sympy.functions.elementary.trigonometric.acsc.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.acsc.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.asec(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.asec._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acos(self,arg)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acot(self,arg)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_acsc(self,arg)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_asin(self,arg)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_atan(self,arg)
sympy.functions.elementary.trigonometric.asec._eval_rewrite_as_log(self,arg)
sympy.functions.elementary.trigonometric.asec._sage_(self)
sympy.functions.elementary.trigonometric.asec.eval(cls,arg)
sympy.functions.elementary.trigonometric.asec.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.asec.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.asin(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.asin._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.asin._eval_is_positive(self)
sympy.functions.elementary.trigonometric.asin._eval_is_rational(self)
sympy.functions.elementary.trigonometric.asin._eval_is_real(self)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acos(self,x)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acot(self,arg)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_acsc(self,arg)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_asec(self,arg)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_atan(self,x)
sympy.functions.elementary.trigonometric.asin._eval_rewrite_as_log(self,x)
sympy.functions.elementary.trigonometric.asin._sage_(self)
sympy.functions.elementary.trigonometric.asin.eval(cls,arg)
sympy.functions.elementary.trigonometric.asin.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.asin.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.asin.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.atan(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.atan._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.atan._eval_aseries(self,n,args0,x,logx)
sympy.functions.elementary.trigonometric.atan._eval_is_positive(self)
sympy.functions.elementary.trigonometric.atan._eval_is_rational(self)
sympy.functions.elementary.trigonometric.atan._eval_is_real(self)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acos(self,arg)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acot(self,arg)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_acsc(self,arg)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_asec(self,arg)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_asin(self,arg)
sympy.functions.elementary.trigonometric.atan._eval_rewrite_as_log(self,x)
sympy.functions.elementary.trigonometric.atan._sage_(self)
sympy.functions.elementary.trigonometric.atan.eval(cls,arg)
sympy.functions.elementary.trigonometric.atan.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.atan.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.atan.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.atan2(InverseTrigonometricFunction)
sympy.functions.elementary.trigonometric.atan2._eval_conjugate(self)
sympy.functions.elementary.trigonometric.atan2._eval_evalf(self,prec)
sympy.functions.elementary.trigonometric.atan2._eval_is_real(self)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_arg(self,y,x)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_atan(self,y,x)
sympy.functions.elementary.trigonometric.atan2._eval_rewrite_as_log(self,y,x)
sympy.functions.elementary.trigonometric.atan2._sage_(self)
sympy.functions.elementary.trigonometric.atan2.eval(cls,y,x)
sympy.functions.elementary.trigonometric.atan2.fdiff(self,argindex)
sympy.functions.elementary.trigonometric.cos(TrigonometricFunction)
sympy.functions.elementary.trigonometric.cos._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.cos._eval_conjugate(self)
sympy.functions.elementary.trigonometric.cos._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.cos._eval_is_finite(self)
sympy.functions.elementary.trigonometric.cos._eval_is_real(self)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_Pow(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_cot(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_pow(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sec(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sin(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_sqrt(self,arg)
sympy.functions.elementary.trigonometric.cos._eval_rewrite_as_tan(self,arg)
sympy.functions.elementary.trigonometric.cos._sage_(self)
sympy.functions.elementary.trigonometric.cos.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.cos.eval(cls,arg)
sympy.functions.elementary.trigonometric.cos.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.cos.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.cot(TrigonometricFunction)
sympy.functions.elementary.trigonometric.cot._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.cot._eval_conjugate(self)
sympy.functions.elementary.trigonometric.cot._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.cot._eval_is_finite(self)
sympy.functions.elementary.trigonometric.cot._eval_is_real(self)
sympy.functions.elementary.trigonometric.cot._eval_nseries(self,x,n,logx)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_Pow(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_cos(self,x)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_pow(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sin(self,x)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_sqrt(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_rewrite_as_tan(self,arg)
sympy.functions.elementary.trigonometric.cot._eval_subs(self,old,new)
sympy.functions.elementary.trigonometric.cot._sage_(self)
sympy.functions.elementary.trigonometric.cot.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.cot.eval(cls,arg)
sympy.functions.elementary.trigonometric.cot.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.cot.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.cot.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.csc(ReciprocalTrigonometricFunction)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_cot(self,arg)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_sin(self,arg)
sympy.functions.elementary.trigonometric.csc._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.csc._sage_(self)
sympy.functions.elementary.trigonometric.csc.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.csc.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.sec(ReciprocalTrigonometricFunction)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_cos(self,arg)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_cot(self,arg)
sympy.functions.elementary.trigonometric.sec._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.sec._sage_(self)
sympy.functions.elementary.trigonometric.sec.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.sec.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.sin(TrigonometricFunction)
sympy.functions.elementary.trigonometric.sin._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.sin._eval_conjugate(self)
sympy.functions.elementary.trigonometric.sin._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.sin._eval_is_finite(self)
sympy.functions.elementary.trigonometric.sin._eval_is_real(self)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_Pow(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_cos(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_cot(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_csc(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_pow(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_sqrt(self,arg)
sympy.functions.elementary.trigonometric.sin._eval_rewrite_as_tan(self,arg)
sympy.functions.elementary.trigonometric.sin._sage_(self)
sympy.functions.elementary.trigonometric.sin.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.sin.eval(cls,arg)
sympy.functions.elementary.trigonometric.sin.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.sin.taylor_term(n,x,*previous_terms)
sympy.functions.elementary.trigonometric.tan(TrigonometricFunction)
sympy.functions.elementary.trigonometric.tan._eval_as_leading_term(self,x)
sympy.functions.elementary.trigonometric.tan._eval_conjugate(self)
sympy.functions.elementary.trigonometric.tan._eval_expand_trig(self,**hints)
sympy.functions.elementary.trigonometric.tan._eval_is_finite(self)
sympy.functions.elementary.trigonometric.tan._eval_is_real(self)
sympy.functions.elementary.trigonometric.tan._eval_nseries(self,x,n,logx)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_Pow(self,arg)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_cos(self,x)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_cot(self,arg)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_exp(self,arg)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_pow(self,arg)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sin(self,x)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sincos(self,arg)
sympy.functions.elementary.trigonometric.tan._eval_rewrite_as_sqrt(self,arg)
sympy.functions.elementary.trigonometric.tan._sage_(self)
sympy.functions.elementary.trigonometric.tan.as_real_imag(self,deep=True,**hints)
sympy.functions.elementary.trigonometric.tan.eval(cls,arg)
sympy.functions.elementary.trigonometric.tan.fdiff(self,argindex=1)
sympy.functions.elementary.trigonometric.tan.inverse(self,argindex=1)
sympy.functions.elementary.trigonometric.tan.taylor_term(n,x,*previous_terms)
sympy.sec(ReciprocalTrigonometricFunction)
sympy.sec._eval_rewrite_as_cos(self,arg)
sympy.sec._eval_rewrite_as_cot(self,arg)
sympy.sec._eval_rewrite_as_sincos(self,arg)
sympy.sec._sage_(self)
sympy.sec.fdiff(self,argindex=1)
sympy.sec.taylor_term(n,x,*previous_terms)
sympy.sin(TrigonometricFunction)
sympy.sin._eval_as_leading_term(self,x)
sympy.sin._eval_conjugate(self)
sympy.sin._eval_expand_trig(self,**hints)
sympy.sin._eval_is_finite(self)
sympy.sin._eval_is_real(self)
sympy.sin._eval_rewrite_as_Pow(self,arg)
sympy.sin._eval_rewrite_as_cos(self,arg)
sympy.sin._eval_rewrite_as_cot(self,arg)
sympy.sin._eval_rewrite_as_csc(self,arg)
sympy.sin._eval_rewrite_as_exp(self,arg)
sympy.sin._eval_rewrite_as_pow(self,arg)
sympy.sin._eval_rewrite_as_sincos(self,arg)
sympy.sin._eval_rewrite_as_sqrt(self,arg)
sympy.sin._eval_rewrite_as_tan(self,arg)
sympy.sin._sage_(self)
sympy.sin.as_real_imag(self,deep=True,**hints)
sympy.sin.eval(cls,arg)
sympy.sin.fdiff(self,argindex=1)
sympy.sin.taylor_term(n,x,*previous_terms)
sympy.tan(TrigonometricFunction)
sympy.tan._eval_as_leading_term(self,x)
sympy.tan._eval_conjugate(self)
sympy.tan._eval_expand_trig(self,**hints)
sympy.tan._eval_is_finite(self)
sympy.tan._eval_is_real(self)
sympy.tan._eval_nseries(self,x,n,logx)
sympy.tan._eval_rewrite_as_Pow(self,arg)
sympy.tan._eval_rewrite_as_cos(self,x)
sympy.tan._eval_rewrite_as_cot(self,arg)
sympy.tan._eval_rewrite_as_exp(self,arg)
sympy.tan._eval_rewrite_as_pow(self,arg)
sympy.tan._eval_rewrite_as_sin(self,x)
sympy.tan._eval_rewrite_as_sincos(self,arg)
sympy.tan._eval_rewrite_as_sqrt(self,arg)
sympy.tan._sage_(self)
sympy.tan.as_real_imag(self,deep=True,**hints)
sympy.tan.eval(cls,arg)
sympy.tan.fdiff(self,argindex=1)
sympy.tan.inverse(self,argindex=1)
sympy.tan.taylor_term(n,x,*previous_terms)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_interface.py----------------------------------------
A:sympy.functions.elementary.tests.test_interface.arg->sympify(arg)
A:sympy.functions.elementary.tests.test_interface.e->tanh(x)
A:sympy.functions.elementary.tests.test_interface.f->mytanh(x)
sympy.elementary.tests.test_interface.test_function_series1()
sympy.elementary.tests.test_interface.test_function_series2()
sympy.elementary.tests.test_interface.test_function_series3()
sympy.functions.elementary.tests.test_interface.test_function_series1()
sympy.functions.elementary.tests.test_interface.test_function_series2()
sympy.functions.elementary.tests.test_interface.test_function_series3()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_miscellaneous.py----------------------------------------
A:sympy.functions.elementary.tests.test_miscellaneous.n->Symbol('n', integer=True)
A:sympy.functions.elementary.tests.test_miscellaneous.n_->Symbol('n_', negative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.nn->Symbol('nn', nonnegative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.nn_->Symbol('nn_', nonnegative=True)
A:sympy.functions.elementary.tests.test_miscellaneous.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.p_->Symbol('p_', positive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.np->Symbol('np', nonpositive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.np_->Symbol('np_', nonpositive=True)
A:sympy.functions.elementary.tests.test_miscellaneous.f->Function('f')
A:sympy.functions.elementary.tests.test_miscellaneous.e->Max(0, x)
A:sympy.functions.elementary.tests.test_miscellaneous.r->root(-7, 4)
A:sympy.functions.elementary.tests.test_miscellaneous.r1->root(-1, 3)
A:sympy.functions.elementary.tests.test_miscellaneous.r3->root(-1, 4)
sympy.elementary.tests.test_miscellaneous.test_Max()
sympy.elementary.tests.test_miscellaneous.test_Min()
sympy.elementary.tests.test_miscellaneous.test_nthroot()
sympy.elementary.tests.test_miscellaneous.test_rewrite_MaxMin_as_Heaviside()
sympy.elementary.tests.test_miscellaneous.test_root()
sympy.functions.elementary.tests.test_miscellaneous.test_Max()
sympy.functions.elementary.tests.test_miscellaneous.test_Min()
sympy.functions.elementary.tests.test_miscellaneous.test_nthroot()
sympy.functions.elementary.tests.test_miscellaneous.test_rewrite_MaxMin_as_Heaviside()
sympy.functions.elementary.tests.test_miscellaneous.test_root()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_exponential.py----------------------------------------
A:sympy.functions.elementary.tests.test_exponential.(x, y)->symbols('x,y', positive=True)
A:sympy.functions.elementary.tests.test_exponential.k->Symbol('k')
A:sympy.functions.elementary.tests.test_exponential.x->Symbol('x')
A:sympy.functions.elementary.tests.test_exponential.y->Symbol('y')
A:sympy.functions.elementary.tests.test_exponential.z->Symbol('z')
A:sympy.functions.elementary.tests.test_exponential.e->LambertW(-1)
A:sympy.functions.elementary.tests.test_exponential.(p, q)->symbols('p,q', positive=True)
A:sympy.functions.elementary.tests.test_exponential.r->Symbol('r', rational=True)
A:sympy.functions.elementary.tests.test_exponential.i->Symbol('i', imaginary=True)
A:sympy.functions.elementary.tests.test_exponential.a->Symbol('a', algebraic=True)
A:sympy.functions.elementary.tests.test_exponential.an->Symbol('an', algebraic=True, nonzero=True)
A:sympy.functions.elementary.tests.test_exponential.rn->Symbol('rn', rational=True, nonzero=True)
A:sympy.functions.elementary.tests.test_exponential.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_exponential.n->symbols('n', negative=True)
A:sympy.functions.elementary.tests.test_exponential.value->(log(3) / log(2) - 1).evalf()
A:sympy.functions.elementary.tests.test_exponential.w->Symbol('w', positive=True)
A:sympy.functions.elementary.tests.test_exponential.(x, y, z)->symbols('x,y,z')
A:sympy.functions.elementary.tests.test_exponential.na->Symbol('na', nonzero=True, algebraic=True)
A:sympy.functions.elementary.tests.test_exponential.(A, B, C)->symbols('A,B,C', commutative=False)
A:sympy.functions.elementary.tests.test_exponential.(i, j)->symbols('i,j', positive=True, integer=True)
A:sympy.functions.elementary.tests.test_exponential.expr->log(Product(-2, (n, 0, 4)))
sympy.elementary.tests.test_exponential.test_as_numer_denom()
sympy.elementary.tests.test_exponential.test_exp__as_base_exp()
sympy.elementary.tests.test_exponential.test_exp_assumptions()
sympy.elementary.tests.test_exponential.test_exp_conjugate()
sympy.elementary.tests.test_exponential.test_exp_expand()
sympy.elementary.tests.test_exponential.test_exp_expand_NC()
sympy.elementary.tests.test_exponential.test_exp_infinity()
sympy.elementary.tests.test_exponential.test_exp_leading_term()
sympy.elementary.tests.test_exponential.test_exp_log()
sympy.elementary.tests.test_exponential.test_exp_rewrite()
sympy.elementary.tests.test_exponential.test_exp_subs()
sympy.elementary.tests.test_exponential.test_exp_values()
sympy.elementary.tests.test_exponential.test_issue_5673()
sympy.elementary.tests.test_exponential.test_lambertw()
sympy.elementary.tests.test_exponential.test_log_apply_evalf()
sympy.elementary.tests.test_exponential.test_log_assumptions()
sympy.elementary.tests.test_exponential.test_log_base()
sympy.elementary.tests.test_exponential.test_log_expand()
sympy.elementary.tests.test_exponential.test_log_expand_complex()
sympy.elementary.tests.test_exponential.test_log_hashing()
sympy.elementary.tests.test_exponential.test_log_product()
sympy.elementary.tests.test_exponential.test_log_sign()
sympy.elementary.tests.test_exponential.test_log_simplify()
sympy.elementary.tests.test_exponential.test_log_symbolic()
sympy.elementary.tests.test_exponential.test_log_values()
sympy.elementary.tests.test_exponential.test_polar()
sympy.functions.elementary.tests.test_exponential.test_as_numer_denom()
sympy.functions.elementary.tests.test_exponential.test_exp__as_base_exp()
sympy.functions.elementary.tests.test_exponential.test_exp_assumptions()
sympy.functions.elementary.tests.test_exponential.test_exp_conjugate()
sympy.functions.elementary.tests.test_exponential.test_exp_expand()
sympy.functions.elementary.tests.test_exponential.test_exp_expand_NC()
sympy.functions.elementary.tests.test_exponential.test_exp_infinity()
sympy.functions.elementary.tests.test_exponential.test_exp_leading_term()
sympy.functions.elementary.tests.test_exponential.test_exp_log()
sympy.functions.elementary.tests.test_exponential.test_exp_rewrite()
sympy.functions.elementary.tests.test_exponential.test_exp_subs()
sympy.functions.elementary.tests.test_exponential.test_exp_values()
sympy.functions.elementary.tests.test_exponential.test_issue_5673()
sympy.functions.elementary.tests.test_exponential.test_lambertw()
sympy.functions.elementary.tests.test_exponential.test_log_apply_evalf()
sympy.functions.elementary.tests.test_exponential.test_log_assumptions()
sympy.functions.elementary.tests.test_exponential.test_log_base()
sympy.functions.elementary.tests.test_exponential.test_log_expand()
sympy.functions.elementary.tests.test_exponential.test_log_expand_complex()
sympy.functions.elementary.tests.test_exponential.test_log_hashing()
sympy.functions.elementary.tests.test_exponential.test_log_product()
sympy.functions.elementary.tests.test_exponential.test_log_sign()
sympy.functions.elementary.tests.test_exponential.test_log_simplify()
sympy.functions.elementary.tests.test_exponential.test_log_symbolic()
sympy.functions.elementary.tests.test_exponential.test_log_values()
sympy.functions.elementary.tests.test_exponential.test_polar()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_trigonometric.py----------------------------------------
A:sympy.functions.elementary.tests.test_trigonometric.(x, y, z)->symbols('x y z')
A:sympy.functions.elementary.tests.test_trigonometric.r->symbols('r', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.k->Symbol('k', integer=True)
A:sympy.functions.elementary.tests.test_trigonometric.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_trigonometric.n->symbols('n', integer=True, even=False)
A:sympy.functions.elementary.tests.test_trigonometric.a->cos(2)
A:sympy.functions.elementary.tests.test_trigonometric.na->Symbol('na', nonzero=True, algebraic=True)
A:sympy.functions.elementary.tests.test_trigonometric.(x, y)->symbols('x y')
A:sympy.functions.elementary.tests.test_trigonometric.ne->symbols('ne', integer=True, even=False)
A:sympy.functions.elementary.tests.test_trigonometric.e->Symbol('e', even=True)
A:sympy.functions.elementary.tests.test_trigonometric.q->Symbol('q', rational=True)
A:sympy.functions.elementary.tests.test_trigonometric.c->Float('123456789012345678901234567890.25', '')
A:sympy.functions.elementary.tests.test_trigonometric.i->Symbol('i', integer=True)
A:sympy.functions.elementary.tests.test_trigonometric.t5->acos(x).taylor_term(5, x)
A:sympy.functions.elementary.tests.test_trigonometric.eq->func(arg)
A:sympy.functions.elementary.tests.test_trigonometric.u->Symbol('u', negative=True)
A:sympy.functions.elementary.tests.test_trigonometric.rewrite->Symbol('e', even=True).rewrite(arg)
A:sympy.functions.elementary.tests.test_trigonometric.b->sin(1)
A:sympy.functions.elementary.tests.test_trigonometric.o->Symbol('o', odd=True)
A:sympy.functions.elementary.tests.test_trigonometric.(a, b)->symbols('a b', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.s1->sin(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.c1->cot(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.t1->tan(x).rewrite(sqrt)
A:sympy.functions.elementary.tests.test_trigonometric.x->symbols('x', real=True)
A:sympy.functions.elementary.tests.test_trigonometric.z->symbols('z')
A:sympy.functions.elementary.tests.test_trigonometric.cosecant->csc('x')
sympy.elementary.tests.test_trigonometric._check_even_rewrite(func,arg)
sympy.elementary.tests.test_trigonometric._check_no_rewrite(func,arg)
sympy.elementary.tests.test_trigonometric._check_odd_rewrite(func,arg)
sympy.elementary.tests.test_trigonometric.test_acos()
sympy.elementary.tests.test_trigonometric.test_acos_rewrite()
sympy.elementary.tests.test_trigonometric.test_acos_series()
sympy.elementary.tests.test_trigonometric.test_acot()
sympy.elementary.tests.test_trigonometric.test_acot_rewrite()
sympy.elementary.tests.test_trigonometric.test_acsc()
sympy.elementary.tests.test_trigonometric.test_as_leading_term_issue_5272()
sympy.elementary.tests.test_trigonometric.test_asec()
sympy.elementary.tests.test_trigonometric.test_aseries()
sympy.elementary.tests.test_trigonometric.test_asin()
sympy.elementary.tests.test_trigonometric.test_asin_rewrite()
sympy.elementary.tests.test_trigonometric.test_asin_series()
sympy.elementary.tests.test_trigonometric.test_atan()
sympy.elementary.tests.test_trigonometric.test_atan2()
sympy.elementary.tests.test_trigonometric.test_atan2_expansion()
sympy.elementary.tests.test_trigonometric.test_atan_rewrite()
sympy.elementary.tests.test_trigonometric.test_attributes()
sympy.elementary.tests.test_trigonometric.test_cos()
sympy.elementary.tests.test_trigonometric.test_cos_expansion()
sympy.elementary.tests.test_trigonometric.test_cos_rewrite()
sympy.elementary.tests.test_trigonometric.test_cos_series()
sympy.elementary.tests.test_trigonometric.test_cot()
sympy.elementary.tests.test_trigonometric.test_cot_expansion()
sympy.elementary.tests.test_trigonometric.test_cot_rewrite()
sympy.elementary.tests.test_trigonometric.test_cot_series()
sympy.elementary.tests.test_trigonometric.test_cot_subs()
sympy.elementary.tests.test_trigonometric.test_csc()
sympy.elementary.tests.test_trigonometric.test_csc_rewrite_failing()
sympy.elementary.tests.test_trigonometric.test_evenodd_rewrite()
sympy.elementary.tests.test_trigonometric.test_inverses()
sympy.elementary.tests.test_trigonometric.test_issue_4420()
sympy.elementary.tests.test_trigonometric.test_issue_4547()
sympy.elementary.tests.test_trigonometric.test_issue_6190()
sympy.elementary.tests.test_trigonometric.test_leading_terms()
sympy.elementary.tests.test_trigonometric.test_real_imag()
sympy.elementary.tests.test_trigonometric.test_sec()
sympy.elementary.tests.test_trigonometric.test_sin()
sympy.elementary.tests.test_trigonometric.test_sin_cos()
sympy.elementary.tests.test_trigonometric.test_sin_cos_with_infinity()
sympy.elementary.tests.test_trigonometric.test_sin_expansion()
sympy.elementary.tests.test_trigonometric.test_sin_rewrite()
sympy.elementary.tests.test_trigonometric.test_sin_series()
sympy.elementary.tests.test_trigonometric.test_sincos_rewrite()
sympy.elementary.tests.test_trigonometric.test_sincos_rewrite_sqrt()
sympy.elementary.tests.test_trigonometric.test_tan()
sympy.elementary.tests.test_trigonometric.test_tan_expansion()
sympy.elementary.tests.test_trigonometric.test_tan_rewrite()
sympy.elementary.tests.test_trigonometric.test_tan_series()
sympy.elementary.tests.test_trigonometric.test_tan_subs()
sympy.elementary.tests.test_trigonometric.test_tancot_rewrite_sqrt()
sympy.elementary.tests.test_trigonometric.test_trig_symmetry()
sympy.functions.elementary.tests.test_trigonometric._check_even_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric._check_no_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric._check_odd_rewrite(func,arg)
sympy.functions.elementary.tests.test_trigonometric.test_acos()
sympy.functions.elementary.tests.test_trigonometric.test_acos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_acos_series()
sympy.functions.elementary.tests.test_trigonometric.test_acot()
sympy.functions.elementary.tests.test_trigonometric.test_acot_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_acsc()
sympy.functions.elementary.tests.test_trigonometric.test_as_leading_term_issue_5272()
sympy.functions.elementary.tests.test_trigonometric.test_asec()
sympy.functions.elementary.tests.test_trigonometric.test_aseries()
sympy.functions.elementary.tests.test_trigonometric.test_asin()
sympy.functions.elementary.tests.test_trigonometric.test_asin_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_asin_series()
sympy.functions.elementary.tests.test_trigonometric.test_atan()
sympy.functions.elementary.tests.test_trigonometric.test_atan2()
sympy.functions.elementary.tests.test_trigonometric.test_atan2_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_atan_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_attributes()
sympy.functions.elementary.tests.test_trigonometric.test_cos()
sympy.functions.elementary.tests.test_trigonometric.test_cos_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_cos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_cos_series()
sympy.functions.elementary.tests.test_trigonometric.test_cot()
sympy.functions.elementary.tests.test_trigonometric.test_cot_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_cot_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_cot_series()
sympy.functions.elementary.tests.test_trigonometric.test_cot_subs()
sympy.functions.elementary.tests.test_trigonometric.test_csc()
sympy.functions.elementary.tests.test_trigonometric.test_csc_rewrite_failing()
sympy.functions.elementary.tests.test_trigonometric.test_evenodd_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_inverses()
sympy.functions.elementary.tests.test_trigonometric.test_issue_4420()
sympy.functions.elementary.tests.test_trigonometric.test_issue_4547()
sympy.functions.elementary.tests.test_trigonometric.test_issue_6190()
sympy.functions.elementary.tests.test_trigonometric.test_leading_terms()
sympy.functions.elementary.tests.test_trigonometric.test_real_imag()
sympy.functions.elementary.tests.test_trigonometric.test_sec()
sympy.functions.elementary.tests.test_trigonometric.test_sin()
sympy.functions.elementary.tests.test_trigonometric.test_sin_cos()
sympy.functions.elementary.tests.test_trigonometric.test_sin_cos_with_infinity()
sympy.functions.elementary.tests.test_trigonometric.test_sin_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_sin_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_sin_series()
sympy.functions.elementary.tests.test_trigonometric.test_sincos_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_sincos_rewrite_sqrt()
sympy.functions.elementary.tests.test_trigonometric.test_tan()
sympy.functions.elementary.tests.test_trigonometric.test_tan_expansion()
sympy.functions.elementary.tests.test_trigonometric.test_tan_rewrite()
sympy.functions.elementary.tests.test_trigonometric.test_tan_series()
sympy.functions.elementary.tests.test_trigonometric.test_tan_subs()
sympy.functions.elementary.tests.test_trigonometric.test_tancot_rewrite_sqrt()
sympy.functions.elementary.tests.test_trigonometric.test_trig_symmetry()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_complexes.py----------------------------------------
A:sympy.functions.elementary.tests.test_complexes.(x, y)->symbols('x y', commutative=False)
A:sympy.functions.elementary.tests.test_complexes.(a, b)->symbols('a,b', real=True)
A:sympy.functions.elementary.tests.test_complexes.r->Symbol('r', real=True)
A:sympy.functions.elementary.tests.test_complexes.i->int(n)
A:sympy.functions.elementary.tests.test_complexes.x->Symbol('x')
A:sympy.functions.elementary.tests.test_complexes.p->Symbol('p', positive=True)
A:sympy.functions.elementary.tests.test_complexes.n->Symbol('n', negative=True)
A:sympy.functions.elementary.tests.test_complexes.m->Symbol('m', negative=True)
A:sympy.functions.elementary.tests.test_complexes.nz->Symbol('nz', nonzero=True, integer=True)
A:sympy.functions.elementary.tests.test_complexes.a->Symbol('a', complex=True)
A:sympy.functions.elementary.tests.test_complexes.y->Symbol('y', imaginary=True)
A:sympy.functions.elementary.tests.test_complexes.nn->Symbol('nn', nonnegative=True, real=True)
A:sympy.functions.elementary.tests.test_complexes.np->Symbol('np', nonpositive=True, real=True)
A:sympy.functions.elementary.tests.test_complexes.w->Symbol('w', complex=True, zero=False)
A:sympy.functions.elementary.tests.test_complexes.q->Symbol('q', positive=True)
A:sympy.functions.elementary.tests.test_complexes.f->Function('f')
A:sympy.functions.elementary.tests.test_complexes.b->Symbol('b', imaginary=True)
A:sympy.functions.elementary.tests.test_complexes.neg->Symbol('x', negative=True)
sympy.elementary.tests.test_complexes.N_equals(a,b)
sympy.elementary.tests.test_complexes.test_Abs()
sympy.elementary.tests.test_complexes.test_Abs_properties()
sympy.elementary.tests.test_complexes.test_Abs_real()
sympy.elementary.tests.test_complexes.test_Abs_rewrite()
sympy.elementary.tests.test_complexes.test_abs()
sympy.elementary.tests.test_complexes.test_adjoint()
sympy.elementary.tests.test_complexes.test_arg()
sympy.elementary.tests.test_complexes.test_arg_rewrite()
sympy.elementary.tests.test_complexes.test_as_real_imag()
sympy.elementary.tests.test_complexes.test_conjugate()
sympy.elementary.tests.test_complexes.test_conjugate_transpose()
sympy.elementary.tests.test_complexes.test_derivatives_issue_4757()
sympy.elementary.tests.test_complexes.test_im()
sympy.elementary.tests.test_complexes.test_issue_3206()
sympy.elementary.tests.test_complexes.test_issue_4035()
sympy.elementary.tests.test_complexes.test_issue_4754_derivative_conjugate()
sympy.elementary.tests.test_complexes.test_issue_6167_6151()
sympy.elementary.tests.test_complexes.test_periodic_argument()
sympy.elementary.tests.test_complexes.test_principal_branch()
sympy.elementary.tests.test_complexes.test_principal_branch_fail()
sympy.elementary.tests.test_complexes.test_re()
sympy.elementary.tests.test_complexes.test_sign()
sympy.elementary.tests.test_complexes.test_sign_issue_3068()
sympy.elementary.tests.test_complexes.test_transpose()
sympy.functions.elementary.tests.test_complexes.N_equals(a,b)
sympy.functions.elementary.tests.test_complexes.test_Abs()
sympy.functions.elementary.tests.test_complexes.test_Abs_properties()
sympy.functions.elementary.tests.test_complexes.test_Abs_real()
sympy.functions.elementary.tests.test_complexes.test_Abs_rewrite()
sympy.functions.elementary.tests.test_complexes.test_abs()
sympy.functions.elementary.tests.test_complexes.test_adjoint()
sympy.functions.elementary.tests.test_complexes.test_arg()
sympy.functions.elementary.tests.test_complexes.test_arg_rewrite()
sympy.functions.elementary.tests.test_complexes.test_as_real_imag()
sympy.functions.elementary.tests.test_complexes.test_conjugate()
sympy.functions.elementary.tests.test_complexes.test_conjugate_transpose()
sympy.functions.elementary.tests.test_complexes.test_derivatives_issue_4757()
sympy.functions.elementary.tests.test_complexes.test_im()
sympy.functions.elementary.tests.test_complexes.test_issue_3206()
sympy.functions.elementary.tests.test_complexes.test_issue_4035()
sympy.functions.elementary.tests.test_complexes.test_issue_4754_derivative_conjugate()
sympy.functions.elementary.tests.test_complexes.test_issue_6167_6151()
sympy.functions.elementary.tests.test_complexes.test_periodic_argument()
sympy.functions.elementary.tests.test_complexes.test_principal_branch()
sympy.functions.elementary.tests.test_complexes.test_principal_branch_fail()
sympy.functions.elementary.tests.test_complexes.test_re()
sympy.functions.elementary.tests.test_complexes.test_sign()
sympy.functions.elementary.tests.test_complexes.test_sign_issue_3068()
sympy.functions.elementary.tests.test_complexes.test_transpose()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_hyperbolic.py----------------------------------------
A:sympy.functions.elementary.tests.test_hyperbolic.(x, y)->symbols('x,y')
A:sympy.functions.elementary.tests.test_hyperbolic.k->Symbol('k', integer=True)
A:sympy.functions.elementary.tests.test_hyperbolic.x->Symbol('x')
A:sympy.functions.elementary.tests.test_hyperbolic.t5->acosh(x).taylor_term(5, x)
A:sympy.functions.elementary.tests.test_hyperbolic.eq->func(arg)
A:sympy.functions.elementary.tests.test_hyperbolic.(a, b)->symbols('a,b', real=True)
A:sympy.functions.elementary.tests.test_hyperbolic.tanh_half->tanh(S.Half * x)
A:sympy.functions.elementary.tests.test_hyperbolic.coth_half->coth(S.Half * x)
sympy.elementary.tests.test_hyperbolic.test_acosh()
sympy.elementary.tests.test_hyperbolic.test_acosh_infinities()
sympy.elementary.tests.test_hyperbolic.test_acosh_series()
sympy.elementary.tests.test_hyperbolic.test_acoth()
sympy.elementary.tests.test_hyperbolic.test_acoth_series()
sympy.elementary.tests.test_hyperbolic.test_asinh()
sympy.elementary.tests.test_hyperbolic.test_asinh_series()
sympy.elementary.tests.test_hyperbolic.test_atanh()
sympy.elementary.tests.test_hyperbolic.test_atanh_infinities()
sympy.elementary.tests.test_hyperbolic.test_atanh_series()
sympy.elementary.tests.test_hyperbolic.test_complex()
sympy.elementary.tests.test_hyperbolic.test_complex_2899()
sympy.elementary.tests.test_hyperbolic.test_cosh()
sympy.elementary.tests.test_hyperbolic.test_cosh_expansion()
sympy.elementary.tests.test_hyperbolic.test_cosh_rewrite()
sympy.elementary.tests.test_hyperbolic.test_cosh_series()
sympy.elementary.tests.test_hyperbolic.test_coth()
sympy.elementary.tests.test_hyperbolic.test_coth_rewrite()
sympy.elementary.tests.test_hyperbolic.test_coth_series()
sympy.elementary.tests.test_hyperbolic.test_derivs()
sympy.elementary.tests.test_hyperbolic.test_inverses()
sympy.elementary.tests.test_hyperbolic.test_issue_4136()
sympy.elementary.tests.test_hyperbolic.test_leading_term()
sympy.elementary.tests.test_hyperbolic.test_simplifications()
sympy.elementary.tests.test_hyperbolic.test_sinh()
sympy.elementary.tests.test_hyperbolic.test_sinh_expansion()
sympy.elementary.tests.test_hyperbolic.test_sinh_rewrite()
sympy.elementary.tests.test_hyperbolic.test_sinh_series()
sympy.elementary.tests.test_hyperbolic.test_tanh()
sympy.elementary.tests.test_hyperbolic.test_tanh_rewrite()
sympy.elementary.tests.test_hyperbolic.test_tanh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_infinities()
sympy.functions.elementary.tests.test_hyperbolic.test_acosh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth()
sympy.functions.elementary.tests.test_hyperbolic.test_acoth_series()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh()
sympy.functions.elementary.tests.test_hyperbolic.test_asinh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_infinities()
sympy.functions.elementary.tests.test_hyperbolic.test_atanh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_complex()
sympy.functions.elementary.tests.test_hyperbolic.test_complex_2899()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_expansion()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_cosh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_coth()
sympy.functions.elementary.tests.test_hyperbolic.test_coth_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_coth_series()
sympy.functions.elementary.tests.test_hyperbolic.test_derivs()
sympy.functions.elementary.tests.test_hyperbolic.test_inverses()
sympy.functions.elementary.tests.test_hyperbolic.test_issue_4136()
sympy.functions.elementary.tests.test_hyperbolic.test_leading_term()
sympy.functions.elementary.tests.test_hyperbolic.test_simplifications()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_expansion()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_sinh_series()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh_rewrite()
sympy.functions.elementary.tests.test_hyperbolic.test_tanh_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_integers.py----------------------------------------
A:sympy.functions.elementary.tests.test_integers.x->Symbol('x')
A:sympy.functions.elementary.tests.test_integers.i->Symbol('i', imaginary=True)
A:sympy.functions.elementary.tests.test_integers.y->Symbol('y', real=True)
A:sympy.functions.elementary.tests.test_integers.(k, n)->symbols('k,n', integer=True)
A:sympy.functions.elementary.tests.test_integers.e->ceiling(i)
A:sympy.functions.elementary.tests.test_integers.(x, y)->symbols('x,y')
sympy.elementary.tests.test_integers.test_ceiling()
sympy.elementary.tests.test_integers.test_floor()
sympy.elementary.tests.test_integers.test_issue_4149()
sympy.elementary.tests.test_integers.test_series()
sympy.functions.elementary.tests.test_integers.test_ceiling()
sympy.functions.elementary.tests.test_integers.test_floor()
sympy.functions.elementary.tests.test_integers.test_issue_4149()
sympy.functions.elementary.tests.test_integers.test_series()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/tests/test_piecewise.py----------------------------------------
A:sympy.functions.elementary.tests.test_piecewise.(x, y)->symbols('x y', real=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.z->symbols('z', nonzero=True)
A:sympy.functions.elementary.tests.test_piecewise.p->Piecewise((x, True), evaluate=False)
A:sympy.functions.elementary.tests.test_piecewise.p_x2->Piecewise((-1, x ** 2 < -1), (x ** 4, x ** 2 < 0), (log(x ** 2), x ** 2 >= 0))
A:sympy.functions.elementary.tests.test_piecewise.p2->Piecewise((2 * I, x < 0), (I, 0 <= x))
A:sympy.functions.elementary.tests.test_piecewise.p3->Piecewise((I * x, x > 1), (1 + I, True))
A:sympy.functions.elementary.tests.test_piecewise.p4->Piecewise((-I * conjugate(x), x > 1), (1 - I, True))
A:sympy.functions.elementary.tests.test_piecewise.(f, g, h)->symbols('f,g,h', cls=Function)
A:sympy.functions.elementary.tests.test_piecewise.pf->Piecewise((f(x), x < -1), (f(x) + h(x) + 2, x <= 1))
A:sympy.functions.elementary.tests.test_piecewise.pg->Piecewise((g(x), x < -1), (g(x) + h(x) + 2, x <= 1))
A:sympy.functions.elementary.tests.test_piecewise.p5->Piecewise((1 / x, x > 1), (x, True))
A:sympy.functions.elementary.tests.test_piecewise.f_int->Piecewise((Integral(x, (x, 0, 1)), x < 1))
A:sympy.functions.elementary.tests.test_piecewise.dp->Piecewise((0, x < -1), (2 * x, x < 0), (1 / x, x >= 0))
A:sympy.functions.elementary.tests.test_piecewise.dp2->Piecewise((0, x < -1), (4 * x ** 2, x < 0), (1 / x ** 2, x >= 0))
A:sympy.functions.elementary.tests.test_piecewise.peval->Piecewise((f1, x < 0), (f2, x > 0))
A:sympy.functions.elementary.tests.test_piecewise.peval2->Piecewise((f1, x < 0), (f2, True))
A:sympy.functions.elementary.tests.test_piecewise.p_int->Piecewise((-x, x < -1), (x ** 3 / 3.0, x < 0), (-x + x * log(x), x >= 0))
A:sympy.functions.elementary.tests.test_piecewise.a->Symbol('a', real=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.f->lambdify(x, p)
A:sympy.functions.elementary.tests.test_piecewise.g->Piecewise(((x - 5) ** 5, x >= 2), (-x + 2, x - 2 <= 0), (x - 2, x - 2 > 0))
A:sympy.functions.elementary.tests.test_piecewise.(c1, c2)->symbols('c1 c2', positive=True)
A:sympy.functions.elementary.tests.test_piecewise.b->Symbol('b', real=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.x->Symbol('x', real=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.y->Symbol('y', real=True, finite=True)
A:sympy.functions.elementary.tests.test_piecewise.p0->Piecewise((0, Or(x < a, x > b)), (1, True))
A:sympy.functions.elementary.tests.test_piecewise.p1->Piecewise((2, x < 0), (1, 0 <= x))
A:sympy.functions.elementary.tests.test_piecewise.abs2->Piecewise((-x, x <= 0), (x, x > 0))
A:sympy.functions.elementary.tests.test_piecewise.p6->Piecewise((1 / x, x < 1), (x, True))
A:sympy.functions.elementary.tests.test_piecewise.p7->Piecewise((x, x < 1), (1 / x, True))
A:sympy.functions.elementary.tests.test_piecewise.p8->Piecewise((x, x > 1), (1 / x, True))
A:sympy.functions.elementary.tests.test_piecewise.(A, B)->symbols('A B', commutative=False)
sympy.elementary.tests.test_piecewise.test_as_expr_set_pairs()
sympy.elementary.tests.test_piecewise.test_conjugate_transpose()
sympy.elementary.tests.test_piecewise.test_doit()
sympy.elementary.tests.test_piecewise.test_piecewise()
sympy.elementary.tests.test_piecewise.test_piecewise_as_leading_term()
sympy.elementary.tests.test_piecewise.test_piecewise_collapse()
sympy.elementary.tests.test_piecewise.test_piecewise_complex()
sympy.elementary.tests.test_piecewise.test_piecewise_duplicate()
sympy.elementary.tests.test_piecewise.test_piecewise_evaluate()
sympy.elementary.tests.test_piecewise.test_piecewise_fold()
sympy.elementary.tests.test_piecewise.test_piecewise_fold_expand()
sympy.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond()
sympy.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond_2()
sympy.elementary.tests.test_piecewise.test_piecewise_free_symbols()
sympy.elementary.tests.test_piecewise.test_piecewise_integrate()
sympy.elementary.tests.test_piecewise.test_piecewise_integrate_independent_conditions()
sympy.elementary.tests.test_piecewise.test_piecewise_integrate_inequality_conditions()
sympy.elementary.tests.test_piecewise.test_piecewise_integrate_symbolic_conditions()
sympy.elementary.tests.test_piecewise.test_piecewise_interval()
sympy.elementary.tests.test_piecewise.test_piecewise_lambdify()
sympy.elementary.tests.test_piecewise.test_piecewise_series()
sympy.elementary.tests.test_piecewise.test_piecewise_simplify()
sympy.elementary.tests.test_piecewise.test_piecewise_solve()
sympy.elementary.tests.test_piecewise.test_piecewise_solve2()
sympy.functions.elementary.tests.test_piecewise.test_as_expr_set_pairs()
sympy.functions.elementary.tests.test_piecewise.test_conjugate_transpose()
sympy.functions.elementary.tests.test_piecewise.test_doit()
sympy.functions.elementary.tests.test_piecewise.test_piecewise()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_as_leading_term()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_collapse()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_complex()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_duplicate()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_evaluate()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_expand()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_fold_piecewise_in_cond_2()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_free_symbols()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate_independent_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate_inequality_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_integrate_symbolic_conditions()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_interval()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_lambdify()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_series()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_simplify()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_solve()
sympy.functions.elementary.tests.test_piecewise.test_piecewise_solve2()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/benchmarks/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/elementary/benchmarks/bench_exp.py----------------------------------------
A:sympy.functions.elementary.benchmarks.bench_exp.(x, y)->symbols('x,y')
A:sympy.functions.elementary.benchmarks.bench_exp.e->exp(2 * x)
A:sympy.functions.elementary.benchmarks.bench_exp.q->exp(3 * x)
sympy.elementary.benchmarks.bench_exp.timeit_exp_subs()
sympy.functions.elementary.benchmarks.bench_exp.timeit_exp_subs()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/numbers.py----------------------------------------
A:sympy.functions.combinatorial.numbers._sym->Symbol('x')
A:sympy.functions.combinatorial.numbers._symbols->Function('x')
A:sympy.functions.combinatorial.numbers.n->_multiset_histogram(n)
A:sympy.functions.combinatorial.numbers.a->int(C.binomial(n + 3, n - 6))
A:sympy.functions.combinatorial.numbers.(p, q)->_multiset_histogram(n).as_numer_denom()
A:sympy.functions.combinatorial.numbers.b->cls._calc_bernoulli(i)
A:sympy.functions.combinatorial.numbers.r->cls._bell_incomplete_poly(int(n), int(k_sym), symbols)
A:sympy.functions.combinatorial.numbers.k->as_int(k)
A:sympy.functions.combinatorial.numbers.m->MultisetPartitionTraverser()
A:sympy.functions.combinatorial.numbers.res->sympy.mpmath.mp.eulernum(m)
A:sympy.functions.combinatorial.numbers.j->sympy.core.C.Dummy('j', integer=True)
A:sympy.functions.combinatorial.numbers._M->slice(None, _ITEMS)
A:sympy.functions.combinatorial.numbers.tot->sum(n.values())
A:sympy.functions.combinatorial.numbers.items->sum((1 for k in n if n[k] > 0))
A:sympy.functions.combinatorial.numbers.s->set(n)
A:sympy.functions.combinatorial.numbers.d->defaultdict(int)
A:sympy.functions.combinatorial.numbers.ord->sum(n)
A:sympy.functions.combinatorial.numbers.ni->_multiset_histogram(n).pop()
A:sympy.functions.combinatorial.numbers.rev->list(reversed(rv))
A:sympy.functions.combinatorial.numbers.u->len(set(n))
A:sympy.functions.combinatorial.numbers.(m, r)->divmod(N, 2)
A:sympy.functions.combinatorial.numbers.rv->sum((nC(n, i) for i in range(1, m + 1)))
sympy.bell(Function)
sympy.bell._bell(n,prev)
sympy.bell._bell_incomplete_poly(n,k,symbols)
sympy.bell._bell_poly(n,prev)
sympy.bell.eval(cls,n,k_sym=None,symbols=None)
sympy.bernoulli(Function)
sympy.bernoulli._calc_bernoulli(n)
sympy.bernoulli.eval(cls,n,sym=None)
sympy.catalan(Function)
sympy.catalan._eval_evalf(self,prec)
sympy.catalan._eval_rewrite_as_binomial(self,n)
sympy.catalan._eval_rewrite_as_gamma(self,n)
sympy.catalan._eval_rewrite_as_hyper(self,n)
sympy.catalan.eval(cls,n,evaluate=None)
sympy.catalan.fdiff(self,argindex=1)
sympy.combinatorial.numbers._AOP_product(n)
sympy.combinatorial.numbers._MultisetHistogram(tuple)
sympy.combinatorial.numbers._multiset_histogram(n)
sympy.combinatorial.numbers._nP(n,k=None,replacement=False)
sympy.combinatorial.numbers._nT(n,k)
sympy.combinatorial.numbers._product(a,b)
sympy.combinatorial.numbers._stirling1(n,k)
sympy.combinatorial.numbers._stirling2(n,k)
sympy.combinatorial.numbers.nC(n,k=None,replacement=False)
sympy.combinatorial.numbers.nP(n,k=None,replacement=False)
sympy.combinatorial.numbers.nT(n,k=None)
sympy.combinatorial.numbers.stirling(n,k,d=None,kind=2,signed=False)
sympy.euler(Function)
sympy.euler._eval_evalf(self,prec)
sympy.euler._eval_rewrite_as_Sum(self,arg)
sympy.euler.eval(cls,m,evaluate=None)
sympy.fibonacci(Function)
sympy.fibonacci._fib(n)
sympy.fibonacci._fibpoly(n,prev)
sympy.fibonacci.eval(cls,n,sym=None)
sympy.functions.combinatorial.numbers._AOP_product(n)
sympy.functions.combinatorial.numbers._MultisetHistogram(tuple)
sympy.functions.combinatorial.numbers._multiset_histogram(n)
sympy.functions.combinatorial.numbers._nP(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers._nT(n,k)
sympy.functions.combinatorial.numbers._product(a,b)
sympy.functions.combinatorial.numbers._stirling1(n,k)
sympy.functions.combinatorial.numbers._stirling2(n,k)
sympy.functions.combinatorial.numbers.bell(Function)
sympy.functions.combinatorial.numbers.bell._bell(n,prev)
sympy.functions.combinatorial.numbers.bell._bell_incomplete_poly(n,k,symbols)
sympy.functions.combinatorial.numbers.bell._bell_poly(n,prev)
sympy.functions.combinatorial.numbers.bell.eval(cls,n,k_sym=None,symbols=None)
sympy.functions.combinatorial.numbers.bernoulli(Function)
sympy.functions.combinatorial.numbers.bernoulli._calc_bernoulli(n)
sympy.functions.combinatorial.numbers.bernoulli.eval(cls,n,sym=None)
sympy.functions.combinatorial.numbers.catalan(Function)
sympy.functions.combinatorial.numbers.catalan._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_binomial(self,n)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_gamma(self,n)
sympy.functions.combinatorial.numbers.catalan._eval_rewrite_as_hyper(self,n)
sympy.functions.combinatorial.numbers.catalan.eval(cls,n,evaluate=None)
sympy.functions.combinatorial.numbers.catalan.fdiff(self,argindex=1)
sympy.functions.combinatorial.numbers.euler(Function)
sympy.functions.combinatorial.numbers.euler._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.euler._eval_rewrite_as_Sum(self,arg)
sympy.functions.combinatorial.numbers.euler.eval(cls,m,evaluate=None)
sympy.functions.combinatorial.numbers.fibonacci(Function)
sympy.functions.combinatorial.numbers.fibonacci._fib(n)
sympy.functions.combinatorial.numbers.fibonacci._fibpoly(n,prev)
sympy.functions.combinatorial.numbers.fibonacci.eval(cls,n,sym=None)
sympy.functions.combinatorial.numbers.harmonic(Function)
sympy.functions.combinatorial.numbers.harmonic._eval_evalf(self,prec)
sympy.functions.combinatorial.numbers.harmonic._eval_expand_func(self,**hints)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_Sum(self,n,m=None)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_digamma(self,n,m=1)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_polygamma(self,n,m=1)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_tractable(self,n,m=1)
sympy.functions.combinatorial.numbers.harmonic._eval_rewrite_as_trigamma(self,n,m=1)
sympy.functions.combinatorial.numbers.harmonic.eval(cls,n,m=None)
sympy.functions.combinatorial.numbers.lucas(Function)
sympy.functions.combinatorial.numbers.lucas.eval(cls,n)
sympy.functions.combinatorial.numbers.nC(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers.nP(n,k=None,replacement=False)
sympy.functions.combinatorial.numbers.nT(n,k=None)
sympy.functions.combinatorial.numbers.stirling(n,k,d=None,kind=2,signed=False)
sympy.harmonic(Function)
sympy.harmonic._eval_evalf(self,prec)
sympy.harmonic._eval_expand_func(self,**hints)
sympy.harmonic._eval_rewrite_as_Sum(self,n,m=None)
sympy.harmonic._eval_rewrite_as_digamma(self,n,m=1)
sympy.harmonic._eval_rewrite_as_polygamma(self,n,m=1)
sympy.harmonic._eval_rewrite_as_tractable(self,n,m=1)
sympy.harmonic._eval_rewrite_as_trigamma(self,n,m=1)
sympy.harmonic.eval(cls,n,m=None)
sympy.lucas(Function)
sympy.lucas.eval(cls,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/factorials.py----------------------------------------
A:sympy.functions.combinatorial.factorials.expr->combsimp(self)
A:sympy.functions.combinatorial.factorials.n->sympify(n)
A:sympy.functions.combinatorial.factorials.arg->as_int(arg)
A:sympy.functions.combinatorial.factorials.x->sympify(x)
A:sympy.functions.combinatorial.factorials.k->sympify(k)
A:sympy.functions.combinatorial.factorials.(n, k)->map(sympify, (n, k))
A:sympy.functions.combinatorial.factorials.a->int(N % prime < K % prime + a)
sympy.FallingFactorial(CombinatorialFunction)
sympy.FallingFactorial._eval_rewrite_as_gamma(self,x,k)
sympy.FallingFactorial.eval(cls,x,k)
sympy.RisingFactorial(CombinatorialFunction)
sympy.RisingFactorial._eval_rewrite_as_gamma(self,x,k)
sympy.RisingFactorial.eval(cls,x,k)
sympy.binomial(CombinatorialFunction)
sympy.binomial._eval_expand_func(self,**hints)
sympy.binomial._eval_is_integer(self)
sympy.binomial._eval_rewrite_as_factorial(self,n,k)
sympy.binomial._eval_rewrite_as_gamma(self,n,k)
sympy.binomial.eval(cls,n,k)
sympy.binomial.fdiff(self,argindex=1)
sympy.combinatorial.factorials.CombinatorialFunction(Function)
sympy.combinatorial.factorials.CombinatorialFunction._eval_simplify(self,ratio,measure)
sympy.combinatorial.factorials.MultiFactorial(CombinatorialFunction)
sympy.factorial(CombinatorialFunction)
sympy.factorial._eval_is_integer(self)
sympy.factorial._eval_is_positive(self)
sympy.factorial._eval_rewrite_as_gamma(self,n)
sympy.factorial._recursive(cls,n)
sympy.factorial._swing(cls,n)
sympy.factorial.eval(cls,n)
sympy.factorial.fdiff(self,argindex=1)
sympy.factorial2(CombinatorialFunction)
sympy.factorial2.eval(cls,arg)
sympy.functions.combinatorial.factorials.CombinatorialFunction(Function)
sympy.functions.combinatorial.factorials.CombinatorialFunction._eval_simplify(self,ratio,measure)
sympy.functions.combinatorial.factorials.FallingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.FallingFactorial._eval_rewrite_as_gamma(self,x,k)
sympy.functions.combinatorial.factorials.FallingFactorial.eval(cls,x,k)
sympy.functions.combinatorial.factorials.MultiFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.RisingFactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.RisingFactorial._eval_rewrite_as_gamma(self,x,k)
sympy.functions.combinatorial.factorials.RisingFactorial.eval(cls,x,k)
sympy.functions.combinatorial.factorials.binomial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.binomial._eval_expand_func(self,**hints)
sympy.functions.combinatorial.factorials.binomial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_factorial(self,n,k)
sympy.functions.combinatorial.factorials.binomial._eval_rewrite_as_gamma(self,n,k)
sympy.functions.combinatorial.factorials.binomial.eval(cls,n,k)
sympy.functions.combinatorial.factorials.binomial.fdiff(self,argindex=1)
sympy.functions.combinatorial.factorials.factorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.factorial._eval_is_integer(self)
sympy.functions.combinatorial.factorials.factorial._eval_is_positive(self)
sympy.functions.combinatorial.factorials.factorial._eval_rewrite_as_gamma(self,n)
sympy.functions.combinatorial.factorials.factorial._recursive(cls,n)
sympy.functions.combinatorial.factorials.factorial._swing(cls,n)
sympy.functions.combinatorial.factorials.factorial.eval(cls,n)
sympy.functions.combinatorial.factorials.factorial.fdiff(self,argindex=1)
sympy.functions.combinatorial.factorials.factorial2(CombinatorialFunction)
sympy.functions.combinatorial.factorials.factorial2.eval(cls,arg)
sympy.functions.combinatorial.factorials.subfactorial(CombinatorialFunction)
sympy.functions.combinatorial.factorials.subfactorial._eval(self,n)
sympy.functions.combinatorial.factorials.subfactorial.eval(cls,arg)
sympy.subfactorial(CombinatorialFunction)
sympy.subfactorial._eval(self,n)
sympy.subfactorial.eval(cls,arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/tests/test_comb_factorials.py----------------------------------------
A:sympy.functions.combinatorial.tests.test_comb_factorials.(x, y)->symbols('x,y')
A:sympy.functions.combinatorial.tests.test_comb_factorials.n->Symbol('n', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.k->Symbol('k', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.u->Symbol('v', negative=True)
A:sympy.functions.combinatorial.tests.test_comb_factorials.v->Symbol('m', positive=True)
sympy.combinatorial.tests.test_comb_factorials.test_binomial()
sympy.combinatorial.tests.test_comb_factorials.test_binomial_diff()
sympy.combinatorial.tests.test_comb_factorials.test_binomial_rewrite()
sympy.combinatorial.tests.test_comb_factorials.test_factorial()
sympy.combinatorial.tests.test_comb_factorials.test_factorial2()
sympy.combinatorial.tests.test_comb_factorials.test_factorial_diff()
sympy.combinatorial.tests.test_comb_factorials.test_factorial_rewrite()
sympy.combinatorial.tests.test_comb_factorials.test_factorial_series()
sympy.combinatorial.tests.test_comb_factorials.test_factorial_simplify_fail()
sympy.combinatorial.tests.test_comb_factorials.test_ff_eval_apply()
sympy.combinatorial.tests.test_comb_factorials.test_rf_eval_apply()
sympy.combinatorial.tests.test_comb_factorials.test_subfactorial()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_diff()
sympy.functions.combinatorial.tests.test_comb_factorials.test_binomial_rewrite()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial2()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_diff()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_rewrite()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_series()
sympy.functions.combinatorial.tests.test_comb_factorials.test_factorial_simplify_fail()
sympy.functions.combinatorial.tests.test_comb_factorials.test_ff_eval_apply()
sympy.functions.combinatorial.tests.test_comb_factorials.test_rf_eval_apply()
sympy.functions.combinatorial.tests.test_comb_factorials.test_subfactorial()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/functions/combinatorial/tests/test_comb_numbers.py----------------------------------------
A:sympy.functions.combinatorial.tests.test_comb_numbers.x->Symbol('x')
A:sympy.functions.combinatorial.tests.test_comb_numbers.b->bernoulli(10 ** 6, evaluate=False).evalf()
A:sympy.functions.combinatorial.tests.test_comb_numbers.X->symbols('x:6')
A:sympy.functions.combinatorial.tests.test_comb_numbers.n->Symbol('n', integer=True)
A:sympy.functions.combinatorial.tests.test_comb_numbers.ne->S(6)
A:sympy.functions.combinatorial.tests.test_comb_numbers.no->S(5)
A:sympy.functions.combinatorial.tests.test_comb_numbers.pe->S(8)
A:sympy.functions.combinatorial.tests.test_comb_numbers.po->S(9)
A:sympy.functions.combinatorial.tests.test_comb_numbers.qe->S(10)
A:sympy.functions.combinatorial.tests.test_comb_numbers.qo->S(13)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heee->harmonic(ne + pe / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heeo->harmonic(ne + pe / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heoe->harmonic(ne + po / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Heoo->harmonic(ne + po / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hoee->harmonic(no + pe / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hoeo->harmonic(no + pe / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hooe->harmonic(no + po / qe)
A:sympy.functions.combinatorial.tests.test_comb_numbers.Hooo->harmonic(no + po / qo)
A:sympy.functions.combinatorial.tests.test_comb_numbers.e->expand_func(h).doit()
A:sympy.functions.combinatorial.tests.test_comb_numbers.m->Symbol('m')
A:sympy.functions.combinatorial.tests.test_comb_numbers._k->Dummy('k')
A:sympy.functions.combinatorial.tests.test_comb_numbers.dum->expr.atoms(Dummy)
A:sympy.functions.combinatorial.tests.test_comb_numbers.c->catalan(0.5).evalf()
A:sympy.functions.combinatorial.tests.test_comb_numbers.s->''.join((choice(c) for i in range(7)))
A:sympy.functions.combinatorial.tests.test_comb_numbers.check->nT(s, i)
A:sympy.functions.combinatorial.tests.test_comb_numbers.perms->list(permutations(range(4)))
A:sympy.functions.combinatorial.tests.test_comb_numbers.parts->multiset_partitions(range(5), 3)
sympy.combinatorial.tests.test_comb_numbers.replace_dummy(expr,sym)
sympy.combinatorial.tests.test_comb_numbers.test_bell()
sympy.combinatorial.tests.test_comb_numbers.test_bernoulli()
sympy.combinatorial.tests.test_comb_numbers.test_catalan()
sympy.combinatorial.tests.test_comb_numbers.test_euler()
sympy.combinatorial.tests.test_comb_numbers.test_euler_failing()
sympy.combinatorial.tests.test_comb_numbers.test_fibonacci()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_evalf()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_limit_fail()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_rational()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_polygamma()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_sum()
sympy.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_sum_fail()
sympy.combinatorial.tests.test_comb_numbers.test_nC_nP_nT()
sympy.functions.combinatorial.tests.test_comb_numbers.replace_dummy(expr,sym)
sympy.functions.combinatorial.tests.test_comb_numbers.test_bell()
sympy.functions.combinatorial.tests.test_comb_numbers.test_bernoulli()
sympy.functions.combinatorial.tests.test_comb_numbers.test_catalan()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler()
sympy.functions.combinatorial.tests.test_comb_numbers.test_euler_failing()
sympy.functions.combinatorial.tests.test_comb_numbers.test_fibonacci()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_evalf()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_limit_fail()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rational()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_polygamma()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_sum()
sympy.functions.combinatorial.tests.test_comb_numbers.test_harmonic_rewrite_sum_fail()
sympy.functions.combinatorial.tests.test_comb_numbers.test_nC_nP_nT()


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/plane.py----------------------------------------
A:sympy.geometry.plane.p1->Point3D(p1)
A:sympy.geometry.plane.a->Point3D(o.arbitrary_point(t))
A:sympy.geometry.plane.p2->Point3D(a)
A:sympy.geometry.plane.p3->Point3D(0, 0, 1)
A:sympy.geometry.plane.b->self.equation(x, y, z)
A:sympy.geometry.plane.normal_vector->tuple(Matrix(a).cross(Matrix(b)))
A:sympy.geometry.plane.rv->Point3D(pt)
A:sympy.geometry.plane.c->list(a.cross(b))
A:sympy.geometry.plane.(x, y, z)->map(Dummy, 'xyz')
A:sympy.geometry.plane.k->self.equation(x, y, z)
A:sympy.geometry.plane.d->Point3D(o.arbitrary_point(t))
A:sympy.geometry.plane.t->Dummy()
A:sympy.geometry.plane.e->self.equation(x, y, z).subs([(x, d.x), (y, d.y), (z, d.z)])
A:sympy.geometry.plane.f->solve((d.subs(z, 0), e.subs(z, 0)), [x, y])
A:sympy.geometry.plane.planes->list(planes)
A:sympy.geometry.plane.first->list(planes).pop(0)
A:sympy.geometry.plane.sol->list(planes).pop(0).intersection(planes[0])
A:sympy.geometry.plane.l->Line3D(p1, p2)
A:sympy.geometry.plane.pts->list(pts)
A:sympy.geometry.plane.n->Line3D(p1, direction_ratio=self.normal_vector)
A:sympy.geometry.plane.rng->random.Random(seed)
A:sympy.geometry.plane.m->Dummy()
A:sympy.geometry.plane.p->Point3D(o.arbitrary_point(t)).subs(t, c[0])
A:sympy.geometry.plane.o->Point3D(o)
A:sympy.geometry.plane.g->solve((d.subs(y, 0), e.subs(y, 0)), [x, z])
A:sympy.geometry.plane.h->solve((d.subs(x, 0), e.subs(x, 0)), [y, z])
sympy.Plane(cls,p1,a=None,b=None,**kwargs)
sympy.Plane.__contains__(self,o)
sympy.Plane.angle_between(self,o)
sympy.Plane.arbitrary_point(self,t=None)
sympy.Plane.are_concurrent(*planes)
sympy.Plane.distance(self,o)
sympy.Plane.equation(self,x=None,y=None,z=None)
sympy.Plane.intersection(self,o)
sympy.Plane.is_coplanar(self,o)
sympy.Plane.is_parallel(self,l)
sympy.Plane.is_perpendicular(self,l)
sympy.Plane.normal_vector(self)
sympy.Plane.p1(self)
sympy.Plane.parallel_plane(self,pt)
sympy.Plane.perpendicular_line(self,pt)
sympy.Plane.perpendicular_plane(self,*pts)
sympy.Plane.projection(self,pt)
sympy.Plane.projection_line(self,line)
sympy.Plane.random_point(self,seed=None)
sympy.geometry.plane.Plane(cls,p1,a=None,b=None,**kwargs)
sympy.geometry.plane.Plane.__contains__(self,o)
sympy.geometry.plane.Plane.__new__(cls,p1,a=None,b=None,**kwargs)
sympy.geometry.plane.Plane.angle_between(self,o)
sympy.geometry.plane.Plane.arbitrary_point(self,t=None)
sympy.geometry.plane.Plane.are_concurrent(*planes)
sympy.geometry.plane.Plane.distance(self,o)
sympy.geometry.plane.Plane.equation(self,x=None,y=None,z=None)
sympy.geometry.plane.Plane.intersection(self,o)
sympy.geometry.plane.Plane.is_coplanar(self,o)
sympy.geometry.plane.Plane.is_parallel(self,l)
sympy.geometry.plane.Plane.is_perpendicular(self,l)
sympy.geometry.plane.Plane.normal_vector(self)
sympy.geometry.plane.Plane.p1(self)
sympy.geometry.plane.Plane.parallel_plane(self,pt)
sympy.geometry.plane.Plane.perpendicular_line(self,pt)
sympy.geometry.plane.Plane.perpendicular_plane(self,*pts)
sympy.geometry.plane.Plane.projection(self,pt)
sympy.geometry.plane.Plane.projection_line(self,line)
sympy.geometry.plane.Plane.random_point(self,seed=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/point3d.py----------------------------------------
A:sympy.geometry.point3d.eval->kwargs.get('evaluate', global_evaluate[0])
A:sympy.geometry.point3d.coords->coords.xreplace(dict([(f, simplify(nsimplify(f, rational=True))) for f in coords.atoms(Float)])).xreplace(dict([(f, simplify(nsimplify(f, rational=True))) for f in coords.atoms(Float)]))
A:sympy.geometry.point3d.a->points[0].direction_cosine(points[1])
A:sympy.geometry.point3d.b->points[0].direction_cosine(points[2])
A:sympy.geometry.point3d.points->list(set(points))
A:sympy.geometry.point3d.rank->Matrix([pv1, pv2]).rank()
A:sympy.geometry.point3d.p->Point3D(p)
A:sympy.geometry.point3d.pt->Point3D(pt)
A:sympy.geometry.point3d.p2->Point3D(p2)
A:sympy.geometry.point3d.factor->sympify(factor)
A:sympy.geometry.point3d.divisor->sympify(divisor)
A:sympy.geometry.point3d.origin->Point3D([0] * len(self.args))
sympy.Point3D(cls,*args,**kwargs)
sympy.Point3D.__abs__(self)
sympy.Point3D.__add__(self,other)
sympy.Point3D.__contains__(self,item)
sympy.Point3D.__div__(self,divisor)
sympy.Point3D.__mul__(self,factor)
sympy.Point3D.__neg__(self)
sympy.Point3D.__sub__(self,other)
sympy.Point3D.are_collinear(*points)
sympy.Point3D.are_coplanar(*points)
sympy.Point3D.direction_cosine(self,point)
sympy.Point3D.direction_ratio(self,point)
sympy.Point3D.distance(self,p)
sympy.Point3D.dot(self,p2)
sympy.Point3D.equals(self,other)
sympy.Point3D.evalf(self,prec=None,**options)
sympy.Point3D.intersection(self,o)
sympy.Point3D.length(self)
sympy.Point3D.midpoint(self,p)
sympy.Point3D.scale(self,x=1,y=1,z=1,pt=None)
sympy.Point3D.transform(self,matrix)
sympy.Point3D.translate(self,x=0,y=0,z=0)
sympy.Point3D.x(self)
sympy.Point3D.y(self)
sympy.Point3D.z(self)
sympy.geometry.point3d.Point3D(cls,*args,**kwargs)
sympy.geometry.point3d.Point3D.__abs__(self)
sympy.geometry.point3d.Point3D.__add__(self,other)
sympy.geometry.point3d.Point3D.__contains__(self,item)
sympy.geometry.point3d.Point3D.__div__(self,divisor)
sympy.geometry.point3d.Point3D.__mul__(self,factor)
sympy.geometry.point3d.Point3D.__neg__(self)
sympy.geometry.point3d.Point3D.__new__(cls,*args,**kwargs)
sympy.geometry.point3d.Point3D.__sub__(self,other)
sympy.geometry.point3d.Point3D.are_collinear(*points)
sympy.geometry.point3d.Point3D.are_coplanar(*points)
sympy.geometry.point3d.Point3D.direction_cosine(self,point)
sympy.geometry.point3d.Point3D.direction_ratio(self,point)
sympy.geometry.point3d.Point3D.distance(self,p)
sympy.geometry.point3d.Point3D.dot(self,p2)
sympy.geometry.point3d.Point3D.equals(self,other)
sympy.geometry.point3d.Point3D.evalf(self,prec=None,**options)
sympy.geometry.point3d.Point3D.intersection(self,o)
sympy.geometry.point3d.Point3D.length(self)
sympy.geometry.point3d.Point3D.midpoint(self,p)
sympy.geometry.point3d.Point3D.scale(self,x=1,y=1,z=1,pt=None)
sympy.geometry.point3d.Point3D.transform(self,matrix)
sympy.geometry.point3d.Point3D.translate(self,x=0,y=0,z=0)
sympy.geometry.point3d.Point3D.x(self)
sympy.geometry.point3d.Point3D.y(self)
sympy.geometry.point3d.Point3D.z(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/exceptions.py----------------------------------------
sympy.GeometryError(ValueError)
sympy.geometry.exceptions.GeometryError(ValueError)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/polygon.py----------------------------------------
A:sympy.geometry.polygon.n->len(args)
A:sympy.geometry.polygon.args->list(args)
A:sympy.geometry.polygon.got->set()
A:sympy.geometry.polygon.shared->set()
A:sympy.geometry.polygon.vertices->list(filter(lambda x: x is not None, nodup))
A:sympy.geometry.polygon.rv->tan(rad(d))
A:sympy.geometry.polygon.convex->tan(rad(d)).is_convex()
A:sympy.geometry.polygon.hit->si.intersection(sj)
A:sympy.geometry.polygon.t_area->simplify(ba.x * ca.y - ca.x * ba.y)
A:sympy.geometry.polygon.cw->Polygon(*lit)._isright(args[-2], args[-1], args[0])
A:sympy.geometry.polygon.ang->Segment(cc, vv).angle_between(Segment(c, v))
A:sympy.geometry.polygon.p->sum(l)
A:sympy.geometry.polygon.self->Polygon(*lit)
A:sympy.geometry.polygon.indices->range(-len(args), 1)
A:sympy.geometry.polygon.t->Symbol(parameter, real=True)
A:sympy.geometry.polygon.pt->Point(pt)
A:sympy.geometry.polygon.inter->side.intersection(o)
A:sympy.geometry.polygon.current->side.distance(o)
A:sympy.geometry.polygon.r->abs(self._radius)
A:sympy.geometry.polygon.center_dist->point.Point.distance(e1_center, e2_center)
A:sympy.geometry.polygon.e1_ymax->Point(0, -oo)
A:sympy.geometry.polygon.e2_ymin->Point(0, oo)
A:sympy.geometry.polygon.min_dist->point.Point.distance(e1_ymax, e2_ymin)
A:sympy.geometry.polygon.support_line->Line(e1_current, e1_next)
A:sympy.geometry.polygon.angle1->Line(e1_current, e1_next).angle_between(Line(e2_ymin, point1))
A:sympy.geometry.polygon.angle2->Line(e1_current, e1_next).angle_between(Line(e2_ymin, point2))
A:sympy.geometry.polygon.e1_angle->Line(e1_current, e1_next).angle_between(Line(e1_current, e1_next))
A:sympy.geometry.polygon.e1_segment->Segment(e1_current, e1_next)
A:sympy.geometry.polygon.min_dist_current->min(min1, min2)
A:sympy.geometry.polygon.e2_segment->Segment(e2_current, e2_next)
A:sympy.geometry.polygon.min1->Segment(e1_current, e1_next).distance(e2_next)
A:sympy.geometry.polygon.min2->Segment(e2_current, e2_next).distance(e1_next)
A:sympy.geometry.polygon.(r, n, rot)->map(sympify, (r, n, rot))
A:sympy.geometry.polygon.c->Point(c)
A:sympy.geometry.polygon.obj->entity.GeometryEntity.__new__(self, c, r, n, **kwargs)
A:sympy.geometry.polygon.cc->Point(c).reflect(line)
A:sympy.geometry.polygon.vv->v.reflect(line)
A:sympy.geometry.polygon.(a, b, c)->sorted([nodup[i], nodup[i + 1], nodup[i + 2]], key=default_sort_key)
A:sympy.geometry.polygon.e1->simplify(u1 / v1)
A:sympy.geometry.polygon.e2->simplify(u2 / v2)
A:sympy.geometry.polygon.e3->simplify(u3 / v3)
A:sympy.geometry.polygon.l1->Segment(v[0], Line(v[0], c).intersection(s[1])[0])
A:sympy.geometry.polygon.l2->Segment(v[1], Line(v[1], c).intersection(s[2])[0])
A:sympy.geometry.polygon.l3->Segment(v[2], Line(v[2], c).intersection(s[0])[0])
A:sympy.geometry.polygon.l->Matrix([s[i].length for i in [1, 2, 0]])
A:sympy.geometry.polygon.x->simplify(l.dot(Matrix([vi.x for vi in v])) / p)
A:sympy.geometry.polygon.y->simplify(l.dot(Matrix([vi.y for vi in v])) / p)
A:sympy.geometry.polygon.c1->Circle((0, 0), l3)
A:sympy.geometry.polygon.c2->Circle((l1, 0), l2)
A:sympy.geometry.polygon.p1->Point(0, 0)
A:sympy.geometry.polygon.p2->Point(l2, 0)
A:sympy.geometry.polygon.p3->Point(cos(rad(d)) * l1, sin(rad(d)) * l1)
sympy.Polygon(cls,*args,**kwargs)
sympy.Polygon.__contains__(self,o)
sympy.Polygon.__eq__(self,o)
sympy.Polygon.__hash__(self)
sympy.Polygon._do_poly_distance(self,e2)
sympy.Polygon._isright(a,b,c)
sympy.Polygon.angles(self)
sympy.Polygon.arbitrary_point(self,parameter='t')
sympy.Polygon.area(self)
sympy.Polygon.centroid(self)
sympy.Polygon.distance(self,o)
sympy.Polygon.encloses_point(self,p)
sympy.Polygon.intersection(self,o)
sympy.Polygon.is_convex(self)
sympy.Polygon.perimeter(self)
sympy.Polygon.plot_interval(self,parameter='t')
sympy.Polygon.sides(self)
sympy.Polygon.vertices(self)
sympy.RegularPolygon(self,c,r,n,rot=0,**kwargs)
sympy.RegularPolygon.__eq__(self,o)
sympy.RegularPolygon.__hash__(self)
sympy.RegularPolygon.__repr__(self)
sympy.RegularPolygon.__str__(self)
sympy.RegularPolygon.angles(self)
sympy.RegularPolygon.apothem(self)
sympy.RegularPolygon.area(self)
sympy.RegularPolygon.args(self)
sympy.RegularPolygon.center(self)
sympy.RegularPolygon.circumcenter(self)
sympy.RegularPolygon.circumcircle(self)
sympy.RegularPolygon.circumradius(self)
sympy.RegularPolygon.encloses_point(self,p)
sympy.RegularPolygon.exterior_angle(self)
sympy.RegularPolygon.incircle(self)
sympy.RegularPolygon.inradius(self)
sympy.RegularPolygon.interior_angle(self)
sympy.RegularPolygon.length(self)
sympy.RegularPolygon.radius(self)
sympy.RegularPolygon.reflect(self,line)
sympy.RegularPolygon.rotate(self,angle,pt=None)
sympy.RegularPolygon.rotation(self)
sympy.RegularPolygon.scale(self,x=1,y=1,pt=None)
sympy.RegularPolygon.spin(self,angle)
sympy.RegularPolygon.vertices(self)
sympy.Triangle(cls,*args,**kwargs)
sympy.Triangle.altitudes(self)
sympy.Triangle.bisectors(self)
sympy.Triangle.circumcenter(self)
sympy.Triangle.circumcircle(self)
sympy.Triangle.circumradius(self)
sympy.Triangle.incenter(self)
sympy.Triangle.incircle(self)
sympy.Triangle.inradius(self)
sympy.Triangle.is_equilateral(self)
sympy.Triangle.is_isosceles(self)
sympy.Triangle.is_right(self)
sympy.Triangle.is_scalene(self)
sympy.Triangle.is_similar(t1,t2)
sympy.Triangle.medial(self)
sympy.Triangle.medians(self)
sympy.Triangle.orthocenter(self)
sympy.Triangle.vertices(self)
sympy.deg(r)
sympy.geometry.polygon.Polygon(cls,*args,**kwargs)
sympy.geometry.polygon.Polygon.__contains__(self,o)
sympy.geometry.polygon.Polygon.__eq__(self,o)
sympy.geometry.polygon.Polygon.__hash__(self)
sympy.geometry.polygon.Polygon.__new__(cls,*args,**kwargs)
sympy.geometry.polygon.Polygon._do_poly_distance(self,e2)
sympy.geometry.polygon.Polygon._isright(a,b,c)
sympy.geometry.polygon.Polygon.angles(self)
sympy.geometry.polygon.Polygon.arbitrary_point(self,parameter='t')
sympy.geometry.polygon.Polygon.area(self)
sympy.geometry.polygon.Polygon.centroid(self)
sympy.geometry.polygon.Polygon.distance(self,o)
sympy.geometry.polygon.Polygon.encloses_point(self,p)
sympy.geometry.polygon.Polygon.intersection(self,o)
sympy.geometry.polygon.Polygon.is_convex(self)
sympy.geometry.polygon.Polygon.perimeter(self)
sympy.geometry.polygon.Polygon.plot_interval(self,parameter='t')
sympy.geometry.polygon.Polygon.sides(self)
sympy.geometry.polygon.Polygon.vertices(self)
sympy.geometry.polygon.RegularPolygon(self,c,r,n,rot=0,**kwargs)
sympy.geometry.polygon.RegularPolygon.__eq__(self,o)
sympy.geometry.polygon.RegularPolygon.__hash__(self)
sympy.geometry.polygon.RegularPolygon.__new__(self,c,r,n,rot=0,**kwargs)
sympy.geometry.polygon.RegularPolygon.__repr__(self)
sympy.geometry.polygon.RegularPolygon.__str__(self)
sympy.geometry.polygon.RegularPolygon.angles(self)
sympy.geometry.polygon.RegularPolygon.apothem(self)
sympy.geometry.polygon.RegularPolygon.area(self)
sympy.geometry.polygon.RegularPolygon.args(self)
sympy.geometry.polygon.RegularPolygon.center(self)
sympy.geometry.polygon.RegularPolygon.circumcenter(self)
sympy.geometry.polygon.RegularPolygon.circumcircle(self)
sympy.geometry.polygon.RegularPolygon.circumradius(self)
sympy.geometry.polygon.RegularPolygon.encloses_point(self,p)
sympy.geometry.polygon.RegularPolygon.exterior_angle(self)
sympy.geometry.polygon.RegularPolygon.incircle(self)
sympy.geometry.polygon.RegularPolygon.inradius(self)
sympy.geometry.polygon.RegularPolygon.interior_angle(self)
sympy.geometry.polygon.RegularPolygon.length(self)
sympy.geometry.polygon.RegularPolygon.radius(self)
sympy.geometry.polygon.RegularPolygon.reflect(self,line)
sympy.geometry.polygon.RegularPolygon.rotate(self,angle,pt=None)
sympy.geometry.polygon.RegularPolygon.rotation(self)
sympy.geometry.polygon.RegularPolygon.scale(self,x=1,y=1,pt=None)
sympy.geometry.polygon.RegularPolygon.spin(self,angle)
sympy.geometry.polygon.RegularPolygon.vertices(self)
sympy.geometry.polygon.Triangle(cls,*args,**kwargs)
sympy.geometry.polygon.Triangle.__new__(cls,*args,**kwargs)
sympy.geometry.polygon.Triangle.altitudes(self)
sympy.geometry.polygon.Triangle.bisectors(self)
sympy.geometry.polygon.Triangle.circumcenter(self)
sympy.geometry.polygon.Triangle.circumcircle(self)
sympy.geometry.polygon.Triangle.circumradius(self)
sympy.geometry.polygon.Triangle.incenter(self)
sympy.geometry.polygon.Triangle.incircle(self)
sympy.geometry.polygon.Triangle.inradius(self)
sympy.geometry.polygon.Triangle.is_equilateral(self)
sympy.geometry.polygon.Triangle.is_isosceles(self)
sympy.geometry.polygon.Triangle.is_right(self)
sympy.geometry.polygon.Triangle.is_scalene(self)
sympy.geometry.polygon.Triangle.is_similar(t1,t2)
sympy.geometry.polygon.Triangle.medial(self)
sympy.geometry.polygon.Triangle.medians(self)
sympy.geometry.polygon.Triangle.orthocenter(self)
sympy.geometry.polygon.Triangle.vertices(self)
sympy.geometry.polygon._asa(d1,l,d2)
sympy.geometry.polygon._sas(l1,d,l2)
sympy.geometry.polygon._slope(d)
sympy.geometry.polygon._sss(l1,l2,l3)
sympy.geometry.polygon.deg(r)
sympy.geometry.polygon.rad(d)
sympy.polygon._asa(d1,l,d2)
sympy.polygon._sas(l1,d,l2)
sympy.polygon._slope(d)
sympy.polygon._sss(l1,l2,l3)
sympy.rad(d)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/line.py----------------------------------------
A:sympy.geometry.line.p1->Point(p1)
A:sympy.geometry.line.p2->Point(p2)
A:sympy.geometry.line.p->lines[0].intersection(lines[1])
A:sympy.geometry.line.tline->Line(self.p1, self.p2)
A:sympy.geometry.line.l1->Line(self.p1, self.p2).perpendicular_line(p)
A:sympy.geometry.line.n_p1->_project(o.p1)
A:sympy.geometry.line.n_p2->_project(o.p2)
A:sympy.geometry.line.projected->Point(o).__class__(n_p1, n_p2)
A:sympy.geometry.line.t->Dummy('t')
A:sympy.geometry.line.px->simplify((b1 * c2 - c1 * b2) / t)
A:sympy.geometry.line.py->simplify((a2 * c1 - a1 * c2) / t)
A:sympy.geometry.line.inter->Point(px, py)
A:sympy.geometry.line.sray->Ray(self.p1, inter)
A:sympy.geometry.line.x->Piecewise((-1, left), (Piecewise((0, Eq(m % 1, 0)), (1, True)), True))
A:sympy.geometry.line.y->Piecewise((-C.tan(c), left), (Piecewise((1, Eq(m, 1)), (-1, Eq(m, 3)), (C.tan(c), True)), True))
A:sympy.geometry.line.result->self.contains(other)
A:sympy.geometry.line.slope->sympify(slope)
A:sympy.geometry.line.o->Point(o)
A:sympy.geometry.line.eq->self.equation(x, y)
A:sympy.geometry.line.c->pi_coeff(sympify(angle))
A:sympy.geometry.line.left->And(1 < m, m < 3)
A:sympy.geometry.line.s->self.perpendicular_segment(o)
A:sympy.geometry.line.l->LinearEntity.perpendicular_line(self, self.midpoint)
A:sympy.geometry.line.distance->point.Point.distance(self.p1 + Point(t * seg_vector.x, t * seg_vector.y), o)
sympy.Line(cls,p1,pt=None,slope=None,**kwargs)
sympy.Line.contains(self,o)
sympy.Line.distance(self,o)
sympy.Line.equal(self,other)
sympy.Line.equation(self,x='x',y='y')
sympy.Line.plot_interval(self,parameter='t')
sympy.LinearEntity(cls,p1,p2,**kwargs)
sympy.LinearEntity.__contains__(self,other)
sympy.LinearEntity.angle_between(l1,l2)
sympy.LinearEntity.arbitrary_point(self,parameter='t')
sympy.LinearEntity.are_concurrent(*lines)
sympy.LinearEntity.coefficients(self)
sympy.LinearEntity.contains(self,other)
sympy.LinearEntity.intersection(self,o)
sympy.LinearEntity.is_parallel(l1,l2)
sympy.LinearEntity.is_perpendicular(l1,l2)
sympy.LinearEntity.is_similar(self,other)
sympy.LinearEntity.length(self)
sympy.LinearEntity.p1(self)
sympy.LinearEntity.p2(self)
sympy.LinearEntity.parallel_line(self,p)
sympy.LinearEntity.perpendicular_line(self,p)
sympy.LinearEntity.perpendicular_segment(self,p)
sympy.LinearEntity.points(self)
sympy.LinearEntity.projection(self,o)
sympy.LinearEntity.random_point(self)
sympy.LinearEntity.slope(self)
sympy.Ray(cls,p1,pt=None,angle=None,**kwargs)
sympy.Ray.contains(self,o)
sympy.Ray.distance(self,o)
sympy.Ray.equals(self,other)
sympy.Ray.plot_interval(self,parameter='t')
sympy.Ray.source(self)
sympy.Ray.xdirection(self)
sympy.Ray.ydirection(self)
sympy.Segment(cls,p1,p2,**kwargs)
sympy.Segment.contains(self,other)
sympy.Segment.distance(self,o)
sympy.Segment.length(self)
sympy.Segment.midpoint(self)
sympy.Segment.perpendicular_bisector(self,p=None)
sympy.Segment.plot_interval(self,parameter='t')
sympy.geometry.line.Line(cls,p1,pt=None,slope=None,**kwargs)
sympy.geometry.line.Line.__new__(cls,p1,pt=None,slope=None,**kwargs)
sympy.geometry.line.Line.contains(self,o)
sympy.geometry.line.Line.distance(self,o)
sympy.geometry.line.Line.equal(self,other)
sympy.geometry.line.Line.equation(self,x='x',y='y')
sympy.geometry.line.Line.plot_interval(self,parameter='t')
sympy.geometry.line.LinearEntity(cls,p1,p2,**kwargs)
sympy.geometry.line.LinearEntity.__contains__(self,other)
sympy.geometry.line.LinearEntity.__new__(cls,p1,p2,**kwargs)
sympy.geometry.line.LinearEntity.angle_between(l1,l2)
sympy.geometry.line.LinearEntity.arbitrary_point(self,parameter='t')
sympy.geometry.line.LinearEntity.are_concurrent(*lines)
sympy.geometry.line.LinearEntity.coefficients(self)
sympy.geometry.line.LinearEntity.contains(self,other)
sympy.geometry.line.LinearEntity.intersection(self,o)
sympy.geometry.line.LinearEntity.is_parallel(l1,l2)
sympy.geometry.line.LinearEntity.is_perpendicular(l1,l2)
sympy.geometry.line.LinearEntity.is_similar(self,other)
sympy.geometry.line.LinearEntity.length(self)
sympy.geometry.line.LinearEntity.p1(self)
sympy.geometry.line.LinearEntity.p2(self)
sympy.geometry.line.LinearEntity.parallel_line(self,p)
sympy.geometry.line.LinearEntity.perpendicular_line(self,p)
sympy.geometry.line.LinearEntity.perpendicular_segment(self,p)
sympy.geometry.line.LinearEntity.points(self)
sympy.geometry.line.LinearEntity.projection(self,o)
sympy.geometry.line.LinearEntity.random_point(self)
sympy.geometry.line.LinearEntity.slope(self)
sympy.geometry.line.Ray(cls,p1,pt=None,angle=None,**kwargs)
sympy.geometry.line.Ray.__new__(cls,p1,pt=None,angle=None,**kwargs)
sympy.geometry.line.Ray.contains(self,o)
sympy.geometry.line.Ray.distance(self,o)
sympy.geometry.line.Ray.equals(self,other)
sympy.geometry.line.Ray.plot_interval(self,parameter='t')
sympy.geometry.line.Ray.source(self)
sympy.geometry.line.Ray.xdirection(self)
sympy.geometry.line.Ray.ydirection(self)
sympy.geometry.line.Segment(cls,p1,p2,**kwargs)
sympy.geometry.line.Segment.__new__(cls,p1,p2,**kwargs)
sympy.geometry.line.Segment.contains(self,other)
sympy.geometry.line.Segment.distance(self,o)
sympy.geometry.line.Segment.length(self)
sympy.geometry.line.Segment.midpoint(self)
sympy.geometry.line.Segment.perpendicular_bisector(self,p=None)
sympy.geometry.line.Segment.plot_interval(self,parameter='t')
sympy.geometry.line.Undecidable(ValueError)
sympy.line.Undecidable(ValueError)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/point.py----------------------------------------
A:sympy.geometry.point.eval->kwargs.get('evaluate', global_evaluate[0])
A:sympy.geometry.point.coords->coords.xreplace(dict([(f, simplify(nsimplify(f, rational=True))) for f in coords.atoms(Float)])).xreplace(dict([(f, simplify(nsimplify(f, rational=True))) for f in coords.atoms(Float)]))
A:sympy.geometry.point.points->list(set(points))
A:sympy.geometry.point.test->simplify(x1 * y2 - y1 * x2).equals(0)
A:sympy.geometry.point.c->cos(angle)
A:sympy.geometry.point.p->Point(p)
A:sympy.geometry.point.s->sin(angle)
A:sympy.geometry.point.pt->Point(pt)
A:sympy.geometry.point.rv->Point(c * x - s * y, s * x + c * y)
A:sympy.geometry.point.p2->Point(p2)
A:sympy.geometry.point.factor->sympify(factor)
A:sympy.geometry.point.divisor->sympify(divisor)
A:sympy.geometry.point.origin->Point([0] * len(self.args))
sympy.Point(cls,*args,**kwargs)
sympy.Point.__abs__(self)
sympy.Point.__add__(self,other)
sympy.Point.__contains__(self,item)
sympy.Point.__div__(self,divisor)
sympy.Point.__mul__(self,factor)
sympy.Point.__neg__(self)
sympy.Point.__sub__(self,other)
sympy.Point.distance(self,p)
sympy.Point.dot(self,p2)
sympy.Point.evalf(self,prec=None,**options)
sympy.Point.intersection(self,o)
sympy.Point.is_collinear(*points)
sympy.Point.is_concyclic(*points)
sympy.Point.length(self)
sympy.Point.midpoint(self,p)
sympy.Point.rotate(self,angle,pt=None)
sympy.Point.scale(self,x=1,y=1,pt=None)
sympy.Point.transform(self,matrix)
sympy.Point.translate(self,x=0,y=0)
sympy.Point.x(self)
sympy.Point.y(self)
sympy.geometry.point.Point(cls,*args,**kwargs)
sympy.geometry.point.Point.__abs__(self)
sympy.geometry.point.Point.__add__(self,other)
sympy.geometry.point.Point.__contains__(self,item)
sympy.geometry.point.Point.__div__(self,divisor)
sympy.geometry.point.Point.__mul__(self,factor)
sympy.geometry.point.Point.__neg__(self)
sympy.geometry.point.Point.__new__(cls,*args,**kwargs)
sympy.geometry.point.Point.__sub__(self,other)
sympy.geometry.point.Point.distance(self,p)
sympy.geometry.point.Point.dot(self,p2)
sympy.geometry.point.Point.evalf(self,prec=None,**options)
sympy.geometry.point.Point.intersection(self,o)
sympy.geometry.point.Point.is_collinear(*points)
sympy.geometry.point.Point.is_concyclic(*points)
sympy.geometry.point.Point.length(self)
sympy.geometry.point.Point.midpoint(self,p)
sympy.geometry.point.Point.rotate(self,angle,pt=None)
sympy.geometry.point.Point.scale(self,x=1,y=1,pt=None)
sympy.geometry.point.Point.transform(self,matrix)
sympy.geometry.point.Point.translate(self,x=0,y=0)
sympy.geometry.point.Point.x(self)
sympy.geometry.point.Point.y(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/ellipse.py----------------------------------------
A:sympy.geometry.ellipse.hradius->sympify(hradius)
A:sympy.geometry.ellipse.vradius->sympify(vradius)
A:sympy.geometry.ellipse.eccentricity->sympify(eccentricity)
A:sympy.geometry.ellipse.center->Point(center)
A:sympy.geometry.ellipse.rv->Max(*self.args[1:3])
A:sympy.geometry.ellipse.x->_symbol(x)
A:sympy.geometry.ellipse.fd->sqrt(self.major ** 2 - self.minor ** 2)
A:sympy.geometry.ellipse.pt->Point(pt)
A:sympy.geometry.ellipse.c->c.reflect(line).reflect(line)
A:sympy.geometry.ellipse.expr->self.equation(x, y)
A:sympy.geometry.ellipse.p->Point(p)
A:sympy.geometry.ellipse.result->solve([seq, oeq], [x, y])
A:sympy.geometry.ellipse.p2->Point(simplify(p.x + run), simplify(p.y + rise))
A:sympy.geometry.ellipse.eq->self.equation(x, y)
A:sympy.geometry.ellipse.dydx->idiff(eq, y, x)
A:sympy.geometry.ellipse.tangent_points->solve([slope - dydx, eq], [x, y])
A:sympy.geometry.ellipse.inter->self._do_line_intersection(seg)
A:sympy.geometry.ellipse.xeq->self.equation(x, y).subs(y, yis).as_numer_denom()[0].expand()
A:sympy.geometry.ellipse.xvals->solve(xeq, x)
A:sympy.geometry.ellipse.t->Triangle(*args)
A:sympy.geometry.ellipse.rng->random.Random(seed)
A:sympy.geometry.ellipse.s->sqrt(1 - c ** 2)
A:sympy.geometry.ellipse.p1->Point(x.subs(cos(t), c), y.subs(sin(t), s))
A:sympy.geometry.ellipse.y->_symbol(y)
A:sympy.geometry.ellipse.mdir->Point(ldir.x / hr_sq, ldir.y / vr_sq)
A:sympy.geometry.ellipse.mdiff->Point(diff.x / hr_sq, diff.y / vr_sq)
A:sympy.geometry.ellipse.a->simplify((self.radius ** 2 - o.radius ** 2 + d ** 2) / (2 * d))
A:sympy.geometry.ellipse.b->ldir.dot(mdiff)
A:sympy.geometry.ellipse.det->simplify(b * b - a * c)
A:sympy.geometry.ellipse.root->sqrt(det)
A:sympy.geometry.ellipse.seq->self.equation(x, y)
A:sympy.geometry.ellipse.oeq->o.equation(x, y)
A:sympy.geometry.ellipse.res->self.equation(x, y).subs({x: o.x, y: o.y})
A:sympy.geometry.ellipse.r->sympify(args[1])
A:sympy.geometry.ellipse.d->sqrt(simplify(dy ** 2 + dx ** 2))
A:sympy.geometry.ellipse.h->sqrt(simplify(self.radius ** 2 - a ** 2))
A:sympy.geometry.ellipse.xi_1->simplify(x2 + rx)
A:sympy.geometry.ellipse.xi_2->simplify(x2 - rx)
A:sympy.geometry.ellipse.yi_1->simplify(y2 + ry)
A:sympy.geometry.ellipse.yi_2->simplify(y2 - ry)
sympy.Circle(cls,*args,**kwargs)
sympy.Circle.circumference(self)
sympy.Circle.equation(self,x='x',y='y')
sympy.Circle.intersection(self,o)
sympy.Circle.radius(self)
sympy.Circle.reflect(self,line)
sympy.Circle.scale(self,x=1,y=1,pt=None)
sympy.Circle.vradius(self)
sympy.Ellipse(cls,center=None,hradius=None,vradius=None,eccentricity=None,**kwargs)
sympy.Ellipse.__contains__(self,o)
sympy.Ellipse.__eq__(self,o)
sympy.Ellipse.__hash__(self)
sympy.Ellipse._do_ellipse_intersection(self,o)
sympy.Ellipse._do_line_intersection(self,o)
sympy.Ellipse.apoapsis(self)
sympy.Ellipse.arbitrary_point(self,parameter='t')
sympy.Ellipse.area(self)
sympy.Ellipse.center(self)
sympy.Ellipse.circumference(self)
sympy.Ellipse.eccentricity(self)
sympy.Ellipse.encloses_point(self,p)
sympy.Ellipse.equation(self,x='x',y='y')
sympy.Ellipse.evolute(self,x='x',y='y')
sympy.Ellipse.foci(self)
sympy.Ellipse.focus_distance(self)
sympy.Ellipse.hradius(self)
sympy.Ellipse.intersection(self,o)
sympy.Ellipse.is_tangent(self,o)
sympy.Ellipse.major(self)
sympy.Ellipse.minor(self)
sympy.Ellipse.normal_lines(self,p,prec=None)
sympy.Ellipse.periapsis(self)
sympy.Ellipse.plot_interval(self,parameter='t')
sympy.Ellipse.random_point(self,seed=None)
sympy.Ellipse.reflect(self,line)
sympy.Ellipse.rotate(self,angle=0,pt=None)
sympy.Ellipse.scale(self,x=1,y=1,pt=None)
sympy.Ellipse.tangent_lines(self,p)
sympy.Ellipse.vradius(self)
sympy.geometry.ellipse.Circle(cls,*args,**kwargs)
sympy.geometry.ellipse.Circle.__new__(cls,*args,**kwargs)
sympy.geometry.ellipse.Circle.circumference(self)
sympy.geometry.ellipse.Circle.equation(self,x='x',y='y')
sympy.geometry.ellipse.Circle.intersection(self,o)
sympy.geometry.ellipse.Circle.radius(self)
sympy.geometry.ellipse.Circle.reflect(self,line)
sympy.geometry.ellipse.Circle.scale(self,x=1,y=1,pt=None)
sympy.geometry.ellipse.Circle.vradius(self)
sympy.geometry.ellipse.Ellipse(cls,center=None,hradius=None,vradius=None,eccentricity=None,**kwargs)
sympy.geometry.ellipse.Ellipse.__contains__(self,o)
sympy.geometry.ellipse.Ellipse.__eq__(self,o)
sympy.geometry.ellipse.Ellipse.__hash__(self)
sympy.geometry.ellipse.Ellipse.__new__(cls,center=None,hradius=None,vradius=None,eccentricity=None,**kwargs)
sympy.geometry.ellipse.Ellipse._do_ellipse_intersection(self,o)
sympy.geometry.ellipse.Ellipse._do_line_intersection(self,o)
sympy.geometry.ellipse.Ellipse.apoapsis(self)
sympy.geometry.ellipse.Ellipse.arbitrary_point(self,parameter='t')
sympy.geometry.ellipse.Ellipse.area(self)
sympy.geometry.ellipse.Ellipse.center(self)
sympy.geometry.ellipse.Ellipse.circumference(self)
sympy.geometry.ellipse.Ellipse.eccentricity(self)
sympy.geometry.ellipse.Ellipse.encloses_point(self,p)
sympy.geometry.ellipse.Ellipse.equation(self,x='x',y='y')
sympy.geometry.ellipse.Ellipse.evolute(self,x='x',y='y')
sympy.geometry.ellipse.Ellipse.foci(self)
sympy.geometry.ellipse.Ellipse.focus_distance(self)
sympy.geometry.ellipse.Ellipse.hradius(self)
sympy.geometry.ellipse.Ellipse.intersection(self,o)
sympy.geometry.ellipse.Ellipse.is_tangent(self,o)
sympy.geometry.ellipse.Ellipse.major(self)
sympy.geometry.ellipse.Ellipse.minor(self)
sympy.geometry.ellipse.Ellipse.normal_lines(self,p,prec=None)
sympy.geometry.ellipse.Ellipse.periapsis(self)
sympy.geometry.ellipse.Ellipse.plot_interval(self,parameter='t')
sympy.geometry.ellipse.Ellipse.random_point(self,seed=None)
sympy.geometry.ellipse.Ellipse.reflect(self,line)
sympy.geometry.ellipse.Ellipse.rotate(self,angle=0,pt=None)
sympy.geometry.ellipse.Ellipse.scale(self,x=1,y=1,pt=None)
sympy.geometry.ellipse.Ellipse.tangent_lines(self,p)
sympy.geometry.ellipse.Ellipse.vradius(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/curve.py----------------------------------------
A:sympy.geometry.curve.fun->sympify(function)
A:sympy.geometry.curve.free->free.difference(set([self.parameter])).difference(set([self.parameter]))
A:sympy.geometry.curve.rv->self.func(f[0, :2].tolist()[0], self.limits)
A:sympy.geometry.curve.f->Matrix(1, 3, f)
A:sympy.geometry.curve.pt->Point(pt)
A:sympy.geometry.curve.tnew->_symbol(parameter, self.parameter)
A:sympy.geometry.curve.t->_symbol(parameter, self.parameter)
sympy.Curve(cls,function,limits)
sympy.Curve._eval_subs(self,old,new)
sympy.Curve.arbitrary_point(self,parameter='t')
sympy.Curve.free_symbols(self)
sympy.Curve.functions(self)
sympy.Curve.limits(self)
sympy.Curve.parameter(self)
sympy.Curve.plot_interval(self,parameter='t')
sympy.Curve.rotate(self,angle=0,pt=None)
sympy.Curve.scale(self,x=1,y=1,pt=None)
sympy.Curve.translate(self,x=0,y=0)
sympy.geometry.curve.Curve(cls,function,limits)
sympy.geometry.curve.Curve.__new__(cls,function,limits)
sympy.geometry.curve.Curve._eval_subs(self,old,new)
sympy.geometry.curve.Curve.arbitrary_point(self,parameter='t')
sympy.geometry.curve.Curve.free_symbols(self)
sympy.geometry.curve.Curve.functions(self)
sympy.geometry.curve.Curve.limits(self)
sympy.geometry.curve.Curve.parameter(self)
sympy.geometry.curve.Curve.plot_interval(self,parameter='t')
sympy.geometry.curve.Curve.rotate(self,angle=0,pt=None)
sympy.geometry.curve.Curve.scale(self,x=1,y=1,pt=None)
sympy.geometry.curve.Curve.translate(self,x=0,y=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/util.py----------------------------------------
A:sympy.geometry.util.dep->set([y])
A:sympy.geometry.util.f->dict([(s, Function(s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
A:sympy.geometry.util.dydx->dydx.diff(x).diff(x)
A:sympy.geometry.util.eq->eq.subs(f).subs(f)
A:sympy.geometry.util.yp->solve(eq.diff(x), dydx)[0].subs(derivs)
A:sympy.geometry.util.syms->set.union(*[e.free_symbols for e in exprs])
A:sympy.geometry.util.entities[i]->Point(e)
A:sympy.geometry.util.res->entities[0].intersection(entities[1])
A:sympy.geometry.util.p->Plane(a, b, e.pop())
A:sympy.geometry.util.e->set(e)
A:sympy.geometry.util.convexHull->tuple(L + U[1:-1])
A:sympy.geometry.util.c->Point(0, 0)
A:sympy.geometry.util.den->len(args)
sympy.are_similar(e1,e2)
sympy.centroid(*args)
sympy.convex_hull(*args)
sympy.geometry.util._symbol(s,matching_symbol=None)
sympy.geometry.util._uniquely_named_symbol(xname,*exprs)
sympy.geometry.util.are_coplanar(*e)
sympy.geometry.util.are_similar(e1,e2)
sympy.geometry.util.centroid(*args)
sympy.geometry.util.convex_hull(*args)
sympy.geometry.util.idiff(eq,y,x,n=1)
sympy.geometry.util.intersection(*entities)
sympy.idiff(eq,y,x,n=1)
sympy.intersection(*entities)
sympy.util._symbol(s,matching_symbol=None)
sympy.util._uniquely_named_symbol(xname,*exprs)
sympy.util.are_coplanar(*e)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/entity.py----------------------------------------
A:sympy.geometry.entity.args->map(sympify, args)
A:sympy.geometry.entity.pt->Point(pt)
A:sympy.geometry.entity.o->Point(0, 0)
A:sympy.geometry.entity.a->atan(l.slope)
A:sympy.geometry.entity.xf->xf.translate(y=-d).rotate(-a, o).scale(y=-1).rotate(a, o).translate(y=d).translate(y=-d).rotate(-a, o).scale(y=-1).rotate(a, o).translate(y=d)
A:sympy.geometry.entity.i1->ordering_of_classes.index(cls.__name__)
A:sympy.geometry.entity.i2->ordering_of_classes.index(cls.__name__)
A:sympy.geometry.entity.old->Point(old)
A:sympy.geometry.entity.new->Point(new)
A:sympy.geometry.entity.rv->eye(3)
A:sympy.geometry.entity.tr1->translate(*(-pt).args)
A:sympy.geometry.entity.tr2->translate(*pt.args)
A:sympy.geometry.entity.s->sin(th)
sympy.entity.GeometryEntity(cls,*args,**kwargs)
sympy.entity.GeometryEntity.__cmp__(self,other)
sympy.entity.GeometryEntity.__contains__(self,other)
sympy.entity.GeometryEntity.__getnewargs__(self)
sympy.entity.GeometryEntity.__ne__(self,o)
sympy.entity.GeometryEntity.__radd__(self,a)
sympy.entity.GeometryEntity.__rdiv__(self,a)
sympy.entity.GeometryEntity.__repr__(self)
sympy.entity.GeometryEntity.__rmul__(self,a)
sympy.entity.GeometryEntity.__rsub__(self,a)
sympy.entity.GeometryEntity.__str__(self)
sympy.entity.GeometryEntity._eval_subs(self,old,new)
sympy.entity.GeometryEntity._sympy_(self)
sympy.entity.GeometryEntity.encloses(self,o)
sympy.entity.GeometryEntity.equals(self,o)
sympy.entity.GeometryEntity.intersection(self,o)
sympy.entity.GeometryEntity.is_similar(self,other)
sympy.entity.GeometryEntity.reflect(self,line)
sympy.entity.GeometryEntity.rotate(self,angle,pt=None)
sympy.entity.GeometryEntity.scale(self,x=1,y=1,pt=None)
sympy.entity.GeometryEntity.translate(self,x=0,y=0)
sympy.entity.rotate(th)
sympy.entity.scale(x,y,pt=None)
sympy.entity.translate(x,y)
sympy.geometry.entity.GeometryEntity(cls,*args,**kwargs)
sympy.geometry.entity.GeometryEntity.__cmp__(self,other)
sympy.geometry.entity.GeometryEntity.__contains__(self,other)
sympy.geometry.entity.GeometryEntity.__getnewargs__(self)
sympy.geometry.entity.GeometryEntity.__ne__(self,o)
sympy.geometry.entity.GeometryEntity.__new__(cls,*args,**kwargs)
sympy.geometry.entity.GeometryEntity.__radd__(self,a)
sympy.geometry.entity.GeometryEntity.__rdiv__(self,a)
sympy.geometry.entity.GeometryEntity.__repr__(self)
sympy.geometry.entity.GeometryEntity.__rmul__(self,a)
sympy.geometry.entity.GeometryEntity.__rsub__(self,a)
sympy.geometry.entity.GeometryEntity.__str__(self)
sympy.geometry.entity.GeometryEntity._eval_subs(self,old,new)
sympy.geometry.entity.GeometryEntity._sympy_(self)
sympy.geometry.entity.GeometryEntity.encloses(self,o)
sympy.geometry.entity.GeometryEntity.equals(self,o)
sympy.geometry.entity.GeometryEntity.intersection(self,o)
sympy.geometry.entity.GeometryEntity.is_similar(self,other)
sympy.geometry.entity.GeometryEntity.reflect(self,line)
sympy.geometry.entity.GeometryEntity.rotate(self,angle,pt=None)
sympy.geometry.entity.GeometryEntity.scale(self,x=1,y=1,pt=None)
sympy.geometry.entity.GeometryEntity.translate(self,x=0,y=0)
sympy.geometry.entity.rotate(th)
sympy.geometry.entity.scale(x,y,pt=None)
sympy.geometry.entity.translate(x,y)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/line3d.py----------------------------------------
A:sympy.geometry.line3d.p1->Point3D(p1)
A:sympy.geometry.line3d.p2->Point3D(p2)
A:sympy.geometry.line3d.p->lines[0].intersection(lines[1])
A:sympy.geometry.line3d.a->Point3D(p1).direction_ratio(p2)
A:sympy.geometry.line3d.t->_symbol(parameter)
A:sympy.geometry.line3d.c->solve([a.x - b.x, a.y - b.y], [t1, t2])
A:sympy.geometry.line3d.d->solve([a.x - b.x, a.z - b.z], [t1, t2])
A:sympy.geometry.line3d.e->Point3D(p1).direction_ratio(p2).subs(t1, c[t1])
A:sympy.geometry.line3d.tline->Line3D(self.p1, self.p2)
A:sympy.geometry.line3d.l1->Line3D(self.p1, self.p2).perpendicular_line(p)
A:sympy.geometry.line3d.n_p1->_project(o.p1)
A:sympy.geometry.line3d.n_p2->_project(o.p2)
A:sympy.geometry.line3d.projected->Point3D(o).__class__(n_p1, n_p2)
A:sympy.geometry.line3d.t1->Symbol('t1')
A:sympy.geometry.line3d.t2->Symbol('t2')
A:sympy.geometry.line3d.b->Point3D(o).arbitrary_point(t2)
A:sympy.geometry.line3d.x->simplify(self.p1.x + t * (self.p2.x - self.p1.x))
A:sympy.geometry.line3d.y->simplify(self.p1.y + t * (self.p2.y - self.p1.y))
A:sympy.geometry.line3d.z->simplify(self.p1.z + t * (self.p2.z - self.p1.z))
A:sympy.geometry.line3d.result->self.contains(other)
A:sympy.geometry.line3d.pt->Point3D(p1.x + direction_ratio[0], p1.y + direction_ratio[1], p1.z + direction_ratio[2])
A:sympy.geometry.line3d.o->Point3D(o)
A:sympy.geometry.line3d.sym->list(map(Dummy, 'xyz'))
A:sympy.geometry.line3d.eq->self.equation(*sym)
A:sympy.geometry.line3d.first->Point3D(p1).direction_ratio(p2).pop(0)
A:sympy.geometry.line3d.rv->Point3D(p1).direction_ratio(p2).pop(0).equals(i)
A:sympy.geometry.line3d.s->self.perpendicular_segment(o)
A:sympy.geometry.line3d.distance->point3d.Point3D.distance(self.p1 + Point3D(t * seg_vector.x, t * seg_vector.y, t * seg_vector.y), o)
A:sympy.geometry.line3d.other->Point3D(other)
sympy.Line3D(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.Line3D.contains(self,o)
sympy.Line3D.distance(self,o)
sympy.Line3D.equals(self,other)
sympy.Line3D.equation(self,x='x',y='y',z='z',k='k')
sympy.Line3D.plot_interval(self,parameter='t')
sympy.Ray3D(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.Ray3D.contains(self,o)
sympy.Ray3D.distance(self,o)
sympy.Ray3D.equals(self,other)
sympy.Ray3D.plot_interval(self,parameter='t')
sympy.Ray3D.source(self)
sympy.Ray3D.xdirection(self)
sympy.Ray3D.ydirection(self)
sympy.Ray3D.zdirection(self)
sympy.Segment3D(cls,p1,p2,**kwargs)
sympy.Segment3D.contains(self,other)
sympy.Segment3D.distance(self,o)
sympy.Segment3D.length(self)
sympy.Segment3D.midpoint(self)
sympy.Segment3D.plot_interval(self,parameter='t')
sympy.geometry.line3d.Line3D(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.geometry.line3d.Line3D.__new__(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.geometry.line3d.Line3D.contains(self,o)
sympy.geometry.line3d.Line3D.distance(self,o)
sympy.geometry.line3d.Line3D.equals(self,other)
sympy.geometry.line3d.Line3D.equation(self,x='x',y='y',z='z',k='k')
sympy.geometry.line3d.Line3D.plot_interval(self,parameter='t')
sympy.geometry.line3d.LinearEntity3D(cls,p1,p2,**kwargs)
sympy.geometry.line3d.LinearEntity3D.__contains__(self,other)
sympy.geometry.line3d.LinearEntity3D.__new__(cls,p1,p2,**kwargs)
sympy.geometry.line3d.LinearEntity3D.angle_between(l1,l2)
sympy.geometry.line3d.LinearEntity3D.arbitrary_point(self,parameter='t')
sympy.geometry.line3d.LinearEntity3D.are_concurrent(*lines)
sympy.geometry.line3d.LinearEntity3D.contains(self,other)
sympy.geometry.line3d.LinearEntity3D.direction_cosine(self)
sympy.geometry.line3d.LinearEntity3D.direction_ratio(self)
sympy.geometry.line3d.LinearEntity3D.intersection(self,o)
sympy.geometry.line3d.LinearEntity3D.is_parallel(l1,l2)
sympy.geometry.line3d.LinearEntity3D.is_perpendicular(l1,l2)
sympy.geometry.line3d.LinearEntity3D.is_similar(self,other)
sympy.geometry.line3d.LinearEntity3D.length(self)
sympy.geometry.line3d.LinearEntity3D.p1(self)
sympy.geometry.line3d.LinearEntity3D.p2(self)
sympy.geometry.line3d.LinearEntity3D.parallel_line(self,p)
sympy.geometry.line3d.LinearEntity3D.perpendicular_line(self,p)
sympy.geometry.line3d.LinearEntity3D.perpendicular_segment(self,p)
sympy.geometry.line3d.LinearEntity3D.points(self)
sympy.geometry.line3d.LinearEntity3D.projection(self,o)
sympy.geometry.line3d.Ray3D(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.geometry.line3d.Ray3D.__new__(cls,p1,pt=None,direction_ratio=[],**kwargs)
sympy.geometry.line3d.Ray3D.contains(self,o)
sympy.geometry.line3d.Ray3D.distance(self,o)
sympy.geometry.line3d.Ray3D.equals(self,other)
sympy.geometry.line3d.Ray3D.plot_interval(self,parameter='t')
sympy.geometry.line3d.Ray3D.source(self)
sympy.geometry.line3d.Ray3D.xdirection(self)
sympy.geometry.line3d.Ray3D.ydirection(self)
sympy.geometry.line3d.Ray3D.zdirection(self)
sympy.geometry.line3d.Segment3D(cls,p1,p2,**kwargs)
sympy.geometry.line3d.Segment3D.__new__(cls,p1,p2,**kwargs)
sympy.geometry.line3d.Segment3D.contains(self,other)
sympy.geometry.line3d.Segment3D.distance(self,o)
sympy.geometry.line3d.Segment3D.length(self)
sympy.geometry.line3d.Segment3D.midpoint(self)
sympy.geometry.line3d.Segment3D.plot_interval(self,parameter='t')
sympy.line3d.LinearEntity3D(cls,p1,p2,**kwargs)
sympy.line3d.LinearEntity3D.__contains__(self,other)
sympy.line3d.LinearEntity3D.angle_between(l1,l2)
sympy.line3d.LinearEntity3D.arbitrary_point(self,parameter='t')
sympy.line3d.LinearEntity3D.are_concurrent(*lines)
sympy.line3d.LinearEntity3D.contains(self,other)
sympy.line3d.LinearEntity3D.direction_cosine(self)
sympy.line3d.LinearEntity3D.direction_ratio(self)
sympy.line3d.LinearEntity3D.intersection(self,o)
sympy.line3d.LinearEntity3D.is_parallel(l1,l2)
sympy.line3d.LinearEntity3D.is_perpendicular(l1,l2)
sympy.line3d.LinearEntity3D.is_similar(self,other)
sympy.line3d.LinearEntity3D.length(self)
sympy.line3d.LinearEntity3D.p1(self)
sympy.line3d.LinearEntity3D.p2(self)
sympy.line3d.LinearEntity3D.parallel_line(self,p)
sympy.line3d.LinearEntity3D.perpendicular_line(self,p)
sympy.line3d.LinearEntity3D.perpendicular_segment(self,p)
sympy.line3d.LinearEntity3D.points(self)
sympy.line3d.LinearEntity3D.projection(self,o)


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/tests/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/sympy0.7.6.1/lib/python3.6/site-packages/sympy/geometry/tests/test_geometry.py----------------------------------------
A:sympy.geometry.tests.test_geometry.x->Symbol('x', real=True)
A:sympy.geometry.tests.test_geometry.y->Symbol('y', real=True)
A:sympy.geometry.tests.test_geometry.z->Symbol('z')
A:sympy.geometry.tests.test_geometry.t->Triangle((0, 0), (1, 0), (2, 3))
A:sympy.geometry.tests.test_geometry.k->Symbol('k', real=True)
A:sympy.geometry.tests.test_geometry.x1->Symbol('x1', real=True)
A:sympy.geometry.tests.test_geometry.x2->Symbol('x2', real=True)
A:sympy.geometry.tests.test_geometry.x3->Symbol('x3', real=True)
A:sympy.geometry.tests.test_geometry.y1->Symbol('y1', real=True)
A:sympy.geometry.tests.test_geometry.y2->Symbol('y2', real=True)
A:sympy.geometry.tests.test_geometry.y3->Symbol('y3', real=True)
A:sympy.geometry.tests.test_geometry.z1->Symbol('z1', real=True)
A:sympy.geometry.tests.test_geometry.z2->Symbol('z2', real=True)
A:sympy.geometry.tests.test_geometry.z3->Symbol('z3', real=True)
A:sympy.geometry.tests.test_geometry.half->Rational(1, 2)
A:sympy.geometry.tests.test_geometry.s->Polygon(Point(0, 0), Point(1, 0), Point(1, 1), Point(0, 1), Point(S.Half, S.Half))
A:sympy.geometry.tests.test_geometry.c->Circle((x, y), 3)
A:sympy.geometry.tests.test_geometry.p1->Polygon(Point(0, 0), Point(1, 0), Point(1, 1), Point(0, 1))
A:sympy.geometry.tests.test_geometry.p2->Polygon(Point(0, Rational(5) / 4), Point(1, Rational(5) / 4), Point(1, Rational(9) / 4), Point(0, Rational(9) / 4))
A:sympy.geometry.tests.test_geometry.p3->Polygon(Point(1, 2), Point(2, 2), Point(2, 1))
A:sympy.geometry.tests.test_geometry.p4->Polygon(Point(1, 1), Point(Rational(6) / 5, 1), Point(1, Rational(6) / 5))
A:sympy.geometry.tests.test_geometry.p5->Polygon(Point(0, 0), Point(4, 4), Point(0, 4))
A:sympy.geometry.tests.test_geometry.p1_1->Point(v, v)
A:sympy.geometry.tests.test_geometry.p1_2->Point3D(y2, y2, y2)
A:sympy.geometry.tests.test_geometry.p1_3->Point3D(x1 + 1, x1, x1)
A:sympy.geometry.tests.test_geometry.line->Line(Point(k, z), slope=0)
A:sympy.geometry.tests.test_geometry.x_pos->Symbol('x', real=True, positive=True)
A:sympy.geometry.tests.test_geometry.p2_1->Point(x_pos, 0)
A:sympy.geometry.tests.test_geometry.p2_2->Point(0, x_pos)
A:sympy.geometry.tests.test_geometry.p2_3->Point(-x_pos, 0)
A:sympy.geometry.tests.test_geometry.p2_4->Point(0, -x_pos)
A:sympy.geometry.tests.test_geometry.p2_5->Point(x_pos, 5)
A:sympy.geometry.tests.test_geometry.p->Point(x, y)
A:sympy.geometry.tests.test_geometry.p6->Polygon(Point(-11, 1), Point(-9, 6.6), Point(-4, -3), Point(-8.4, -8.7))
A:sympy.geometry.tests.test_geometry.p7->Point3D(0, 1, 1)
A:sympy.geometry.tests.test_geometry.p8->Point3D(2, 0, 3)
A:sympy.geometry.tests.test_geometry.p9->Point3D(2, 1, 4)
A:sympy.geometry.tests.test_geometry.l1->f(a, b)
A:sympy.geometry.tests.test_geometry.l2->g(c, d)
A:sympy.geometry.tests.test_geometry.l3->Line(Point(-1, -1), Point(1, 1))
A:sympy.geometry.tests.test_geometry.l4->Line(Point(-10, 0), Point(0, 10))
A:sympy.geometry.tests.test_geometry.l5->Line3D(p1, p7)
A:sympy.geometry.tests.test_geometry.l6->Line3D(p8, p9)
A:sympy.geometry.tests.test_geometry.l7->Line3D(p2, p9)
A:sympy.geometry.tests.test_geometry.l1_1->Line3D(p1, Point3D(5, 0, 0))
A:sympy.geometry.tests.test_geometry.l2_1->Line(p3, p5)
A:sympy.geometry.tests.test_geometry.l3_1->Line(Point(5, x1), Point(-Rational(3, 5), x1))
A:sympy.geometry.tests.test_geometry.r->Point(x, y).reflect(l)
A:sympy.geometry.tests.test_geometry.r1->Ray3D(Point3D(0, 0, 0), Point3D(3, 4, 0))
A:sympy.geometry.tests.test_geometry.r2->Ray3D(Point3D(2, 2, 2), Point3D(0, 0, 0))
A:sympy.geometry.tests.test_geometry.r3->Ray3D(Point3D(1, 1, 1), Point3D(-1, -1, -1))
A:sympy.geometry.tests.test_geometry.r4->Ray3D(Point3D(0, 4, 2), Point3D(-1, -5, -1))
A:sympy.geometry.tests.test_geometry.r5->Ray3D(Point3D(0, 0, 0), Point3D(1, 1, 1))
A:sympy.geometry.tests.test_geometry.r6->Ray3D(Point3D(0, 0, 0), Point3D(2, 2, 2))
A:sympy.geometry.tests.test_geometry.r7->Ray3D(Point3D(0, 1, 1), Point3D(0, -1, 1))
A:sympy.geometry.tests.test_geometry.r8->Ray(Point(0, 0), Point(0, 4))
A:sympy.geometry.tests.test_geometry.r9->Ray(Point(0, 1), Point(0, -1))
A:sympy.geometry.tests.test_geometry.s1->Segment3D(Point3D(0, 0, 0), Point3D(3, 4, 0))
A:sympy.geometry.tests.test_geometry.s2->Segment3D(Point3D(-1, 5, 2), Point3D(-5, -10, 0))
A:sympy.geometry.tests.test_geometry.s3->Segment(Point(0, 4), Point(-2, 2))
A:sympy.geometry.tests.test_geometry.(a, b)->symbols('a,b')
A:sympy.geometry.tests.test_geometry.pt1->Point(half, half)
A:sympy.geometry.tests.test_geometry.pt2->Point(1, 1)
A:sympy.geometry.tests.test_geometry.m->Symbol('m')
A:sympy.geometry.tests.test_geometry.l->Line((0, pi), slope=sqrt(2))
A:sympy.geometry.tests.test_geometry.entity1->Segment(Point(-10, 10), Point(10, 10))
A:sympy.geometry.tests.test_geometry.entity2->Segment(Point(-5, -5), Point(-5, 5))
A:sympy.geometry.tests.test_geometry.p_r3->Ray3D(Point3D(1, 1, 1), Point3D(-1, -1, -1)).random_point()
A:sympy.geometry.tests.test_geometry.p_r4->Ray3D(Point3D(0, 4, 2), Point3D(-1, -5, -1)).random_point()
A:sympy.geometry.tests.test_geometry.p10->Point(2000, 2000)
A:sympy.geometry.tests.test_geometry.p_s1->Segment3D(Point3D(0, 0, 0), Point3D(3, 4, 0)).random_point()
A:sympy.geometry.tests.test_geometry.p11->Point(2000, 2000).scale(2, 2)
A:sympy.geometry.tests.test_geometry.q->Segment((0, 0), (2, 2))
A:sympy.geometry.tests.test_geometry.pl3->Plane(p1, p2, p3)
A:sympy.geometry.tests.test_geometry.pl4->Plane(p1, normal_vector=(1, 1, 1))
A:sympy.geometry.tests.test_geometry.pl5->Plane(p3, normal_vector=(1, 2, 3))
A:sympy.geometry.tests.test_geometry.pl6->Plane(Point3D(2, 3, 7), normal_vector=(2, 2, 2))
A:sympy.geometry.tests.test_geometry.pl7->Plane(Point3D(1, -5, -6), normal_vector=(1, -2, 1))
A:sympy.geometry.tests.test_geometry.a->Plane(p1, p2, p3).perpendicular_line(r).arbitrary_point(t)
A:sympy.geometry.tests.test_geometry.n->Point3D(*Z)
A:sympy.geometry.tests.test_geometry.e1->Ellipse(Point(0, 0), 5, 10)
A:sympy.geometry.tests.test_geometry.e2->Ellipse(Point(x, y), 4, 8)
A:sympy.geometry.tests.test_geometry.e3->Ellipse(Point(0, 0), y1, y1)
A:sympy.geometry.tests.test_geometry.c1->Circle(p1, 1)
A:sympy.geometry.tests.test_geometry.c2->Circle(p2, 1)
A:sympy.geometry.tests.test_geometry.c3->Circle(Point(sqrt(2), sqrt(2)), 1)
A:sympy.geometry.tests.test_geometry.M->Symbol('M')
A:sympy.geometry.tests.test_geometry._x->Circle((x, y), 3).atoms(Dummy).pop()
A:sympy.geometry.tests.test_geometry.ef->Ellipse(Point(0, 0), 4, 2)
A:sympy.geometry.tests.test_geometry.e->Ellipse((1, 0), 1, 2)
A:sympy.geometry.tests.test_geometry.e4->Ellipse(p2, major, minor)
A:sympy.geometry.tests.test_geometry.csmall->Circle(p1, 3)
A:sympy.geometry.tests.test_geometry.cbig->Circle(p1, 5)
A:sympy.geometry.tests.test_geometry.cout->Curve((2 * x - 4, 3 * x ** 2 - 10), (x, 0, 1))
A:sympy.geometry.tests.test_geometry.v->sqrt(2)
A:sympy.geometry.tests.test_geometry.t1->Triangle(p1, p2, p3)
A:sympy.geometry.tests.test_geometry.points->intersection(t1, c1)
A:sympy.geometry.tests.test_geometry.circ->Circle(Point(0, 0), 5)
A:sympy.geometry.tests.test_geometry.elip->Ellipse(Point(0, 0), 3, 2)
A:sympy.geometry.tests.test_geometry.t2->Triangle(p1, p2, Point(Rational(5, 2), sqrt(Rational(75, 4))))
A:sympy.geometry.tests.test_geometry.t3->Triangle(p1, Point(x1, 0), Point(0, x1))
A:sympy.geometry.tests.test_geometry.bisectors->Triangle(p1, p2, p3).bisectors()
A:sympy.geometry.tests.test_geometry.ch->Polygon(p[0], p[3], p[9], p[10], p[6], p[1])
A:sympy.geometry.tests.test_geometry.ch2->Segment(another_p[0], another_p[1])
A:sympy.geometry.tests.test_geometry.(a, b, c, d, e, f, s)->symbols('a:f,s')
A:sympy.geometry.tests.test_geometry.b->Symbol('b')
A:sympy.geometry.tests.test_geometry.cr->Circle((x, y), 3).reflect(l)
A:sympy.geometry.tests.test_geometry.pent->RegularPolygon((1, 2), 1, 5)
A:sympy.geometry.tests.test_geometry.rpent->RegularPolygon((1, 2), 1, 5).reflect(l)
A:sympy.geometry.tests.test_geometry.poly_pent->Polygon(*pent.vertices)
A:sympy.geometry.tests.test_geometry.circle->Circle(Point(x, 0), y)
sympy.geometry.tests.test_geometry.feq(a,b)
sympy.geometry.tests.test_geometry.test_concyclic_doctest_bug()
sympy.geometry.tests.test_geometry.test_convex_hull()
sympy.geometry.tests.test_geometry.test_curve()
sympy.geometry.tests.test_geometry.test_ellipse_geom()
sympy.geometry.tests.test_geometry.test_ellipse_random_point()
sympy.geometry.tests.test_geometry.test_encloses()
sympy.geometry.tests.test_geometry.test_free_symbols()
sympy.geometry.tests.test_geometry.test_geometry_transforms()
sympy.geometry.tests.test_geometry.test_idiff()
sympy.geometry.tests.test_geometry.test_issue_2941()
sympy.geometry.tests.test_geometry.test_line3d()
sympy.geometry.tests.test_geometry.test_line_geom()
sympy.geometry.tests.test_geometry.test_line_intersection()
sympy.geometry.tests.test_geometry.test_plane()
sympy.geometry.tests.test_geometry.test_point()
sympy.geometry.tests.test_geometry.test_point3D()
sympy.geometry.tests.test_geometry.test_polygon()
sympy.geometry.tests.test_geometry.test_reflect()
sympy.geometry.tests.test_geometry.test_repr()
sympy.geometry.tests.test_geometry.test_subs()
sympy.geometry.tests.test_geometry.test_symbolic_intersect()
sympy.geometry.tests.test_geometry.test_transform()
sympy.geometry.tests.test_geometry.test_triangle_kwargs()
sympy.geometry.tests.test_geometry.test_util()
sympy.geometry.tests.test_geometry.test_util_centroid()
sympy.tests.test_feq(a,b)
sympy.tests.test_test_concyclic_doctest_bug()
sympy.tests.test_test_convex_hull()
sympy.tests.test_test_curve()
sympy.tests.test_test_ellipse_geom()
sympy.tests.test_test_ellipse_random_point()
sympy.tests.test_test_encloses()
sympy.tests.test_test_free_symbols()
sympy.tests.test_test_geometry_transforms()
sympy.tests.test_test_idiff()
sympy.tests.test_test_issue_2941()
sympy.tests.test_test_line3d()
sympy.tests.test_test_line_geom()
sympy.tests.test_test_line_intersection()
sympy.tests.test_test_plane()
sympy.tests.test_test_point()
sympy.tests.test_test_point3D()
sympy.tests.test_test_polygon()
sympy.tests.test_test_reflect()
sympy.tests.test_test_repr()
sympy.tests.test_test_subs()
sympy.tests.test_test_symbolic_intersect()
sympy.tests.test_test_transform()
sympy.tests.test_test_triangle_kwargs()
sympy.tests.test_test_util()
sympy.tests.test_test_util_centroid()

