
----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/compatibility.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/optimize.py----------------------------------------
A:dask.optimize.nxt->set()
A:dask.optimize.deadbeats->set()
A:dask.optimize.deps->get_dependencies(dsk, parent, as_list=True)
A:dask.optimize.children->dict(map(reversed, parents.items()))
A:dask.optimize.(child, parent)->parents.popitem()
A:dask.optimize.parent->chain.pop()
A:dask.optimize.child->chain.pop()
A:dask.optimize.fused->set()
A:dask.optimize.val->subs(val, item, keysubs[item])
A:dask.optimize.keys->set([keys])
A:dask.optimize.replaceorder->toposort(dict(((k, dsk[k]) for k in keys if k in dsk)))
A:dask.optimize.fast_functions->set(fast_functions)
A:dask.optimize.dependencies->dict(((k, get_dependencies(dsk, k)) for k in dsk))
A:dask.optimize.dependents->reverse_dict(dependencies)
A:dask.optimize.result->set()
dask.optimize.cull(dsk,keys)
dask.optimize.functions_of(task)
dask.optimize.fuse(dsk)
dask.optimize.inline(dsk,keys=None,inline_constants=True)
dask.optimize.inline_functions(dsk,fast_functions=None,inline_constants=False)
dask.optimize.unwrap_partial(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/core.py----------------------------------------
A:dask.core.val->func(*results)
A:dask.core.cycle->'->'.join(cycle)
A:dask.core.key->args.pop()
A:dask.core.v->list(v)
A:dask.core.arg->subs(arg, key, val)
A:dask.core.result->dict(((t, set()) for t in terms))
A:dask.core.completed->set()
A:dask.core.seen->set()
dask.core._deps(dsk,arg)
dask.core._get_task(d,task,maxdepth=1000)
dask.core._toposort(dsk,keys=None,returncycle=False)
dask.core.flatten(seq)
dask.core.get(d,key,get=None,concrete=True,**kwargs)
dask.core.get_dependencies(dsk,task,as_list=False)
dask.core.getcycle(d,keys)
dask.core.inc(x)
dask.core.isdag(d,keys)
dask.core.ishashable(x)
dask.core.istask(x)
dask.core.reverse_dict(d)
dask.core.subs(task,key,val)
dask.core.toposort(dsk)
dask.get(d,key,get=None,concrete=True,**kwargs)
dask.get_dependencies(dsk,task,as_list=False)
dask.getcycle(d,keys)
dask.istask(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/utils.py----------------------------------------
dask.utils.deepmap(func,*seqs)
dask.utils.raises(err,lamda)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/dot.py----------------------------------------
A:dask.dot.data_attributes->dict()
A:dask.dot.function_attributes->dict()
A:dask.dot.g->networkx.DiGraph()
A:dask.dot.func_node->make_hashable((v, 'function'))
A:dask.dot.arg2->make_hashable(dep)
A:dask.dot.p->networkx.to_pydot(dg)
A:dask.dot.dg->to_networkx(d, **kwargs)
dask.dot.dot_graph(d,filename='mydask',**kwargs)
dask.dot.lower(func)
dask.dot.make_hashable(x)
dask.dot.to_networkx(d,data_attributes=None,function_attributes=None)
dask.dot.write_networkx_to_dot(dg,filename='mydask')


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/async.py----------------------------------------
A:dask.async.cache->dict()
A:dask.async.dependencies->dict(((k, get_dependencies(dsk, k)) for k in dsk))
A:dask.async.waiting->dict(((k, v) for (k, v) in waiting.items() if v))
A:dask.async.dependents->reverse_dict(dependencies)
A:dask.async.waiting_data->dict(((k, v.copy()) for (k, v) in dependents.items() if v))
A:dask.async.ready->set([k for (k, v) in waiting.items() if not v])
A:dask.async.result->_execute_task(task, data)
A:dask.async.(exc_type, exc_value, exc_traceback)->sys.exc_info()
A:dask.async.tb->''.join(traceback.format_tb(exc_traceback))
A:dask.async.result_flat->set([result])
A:dask.async.results->set(result_flat)
A:dask.async.state->start_state_from_dask(dsk, cache=cache)
A:dask.async.key->choose_task(state)
A:dask.async.data->dict(((dep, state['cache'][dep]) for dep in get_dependencies(dsk, key)))
A:dask.async.(key, res, tb)->Queue().get()
A:dask.async.g->state_to_networkx(dsk, state)
A:dask.async.(data, func)->color_nodes(dsk, state)
A:dask.async.queue->Queue()
dask.async._execute_task(arg,cache,dsk=None)
dask.async.apply_sync(func,args=(),kwds={})
dask.async.choose_task(state,score=score)
dask.async.color_nodes(dsk,state)
dask.async.double(x)
dask.async.execute_task(key,task,data,queue)
dask.async.finish_task(dsk,key,result,state,results)
dask.async.get_async(apply_async,num_workers,dsk,result,cache=None,debug_counts=None,queue=None,**kwargs)
dask.async.get_sync(dsk,keys,**kwargs)
dask.async.inc(x)
dask.async.nested_get(ind,coll,lazy=False)
dask.async.release_data(key,state)
dask.async.score(key,state)
dask.async.start_state_from_dask(dsk,cache=None)
dask.async.state_to_networkx(dsk,state)
dask.async.visualize(dsk,state,filename='dask')


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/wrap.py----------------------------------------
A:dask.array.wrap.kwargs['size']->kwargs.pop('shape')
A:dask.array.wrap.size->kwargs.pop('size')
A:dask.array.wrap.blockshape->kwargs.pop('blockshape', None)
A:dask.array.wrap.blockdims->blockdims_from_blockshape(shape, blockshape)
A:dask.array.wrap.name->kwargs.pop('name', None)
A:dask.array.wrap.keys->product([name], *[range(len(bd)) for bd in blockdims])
A:dask.array.wrap.sizes->product(*blockdims)
A:dask.array.wrap.dsk->dict(zip(keys, vals))
A:dask.array.wrap.shape->kwargs.pop('shape')
A:dask.array.wrap.shapes->product(*blockdims)
A:dask.array.wrap.func->curry(func, **kwargs)
A:dask.array.wrap.f->curry(wrap_func, func)
A:dask.array.wrap.w->wrap(wrap_func_shape_as_first_arg)
A:dask.array.wrap.ones->w(np.ones)
A:dask.array.wrap.zeros->w(np.zeros)
A:dask.array.wrap.empty->w(np.empty)
dask.array.wrap.blockdims_from_blockshape(shape,blockshape)
dask.array.wrap.dims_from_size(size,blocksize)
dask.array.wrap.wrap(wrap_func,func)
dask.array.wrap.wrap_func_shape_as_first_arg(func,*args,**kwargs)
dask.array.wrap.wrap_func_size_as_kwarg(func,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/blaze.py----------------------------------------
A:dask.array.blaze.func->get_numba_ufunc(expr)
A:dask.array.blaze.chunk->symbol('chunk', DataShape(*tuple(map(first, data.blockdims)) + (leaf.dshape.measure,)))
A:dask.array.blaze.((chunk, chunk_expr), (agg, agg_expr))->split(expr._child, expr, chunk=chunk)
A:dask.array.blaze.inds->tuple(range(ndim(leaf)))
A:dask.array.blaze.tmp->atop(curry(compute_it, chunk_expr, [chunk], **kwargs), next(names), inds, data, inds)
dask.array.blaze.compute_it(expr,leaves,*data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,lhs,rhs,**kwargs)
dask.array.blaze.elemwise_array(expr,*data,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/slicing.py----------------------------------------
A:dask.array.slicing.ind->ind.tolist().tolist()
A:dask.array.slicing.index->tuple(map(sanitize_index_lists, index))
A:dask.array.slicing.blockdims->tuple(map(tuple, blockdims))
A:dask.array.slicing.(dsk_out, bd_out)->slice_with_newaxes(out_name, in_name, blockdims, index2)
A:dask.array.slicing.bd_out->tuple(map(tuple, bd_out))
A:dask.array.slicing.index2->posify_index(shape, index)
A:dask.array.slicing.(dsk, blockdims2)->slice_slices_and_integers(tmp, in_name, blockdims, index_without_list)
A:dask.array.slicing.dsk2->take(out_name, tmp, blockdims2, index2[axis], axis=axis2)
A:dask.array.slicing.dsk3->merge(dsk, dsk2)
A:dask.array.slicing.blockdims3->tuple([bd if not isinstance(i, list) else (len(i),) for (i, bd) in zip(index4, blockdims2)])
A:dask.array.slicing.shape->tuple(map(sum, blockdims))
A:dask.array.slicing.index_without_list->tuple((slice(None, None, None) if isinstance(i, list) else i for i in index2))
A:dask.array.slicing.tmp->next(slice_names)
A:dask.array.slicing.block_slices->list(map(_slice_1d, shape, blockdims, index))
A:dask.array.slicing.in_names->product([in_name], *[i.keys() for i in block_slices])
A:dask.array.slicing.out_names->product([out_name], *[range(len(d)) for (d, i) in zip(block_slices, index) if not isinstance(i, int)])
A:dask.array.slicing.all_slices->list(product(*[i.values() for i in block_slices]))
A:dask.array.slicing.dsk_out->dict(((out_name, (getitem, in_name, slices)) for (out_name, in_name, slices) in zip(out_names, in_names, all_slices)))
A:dask.array.slicing.lens->list(lengths)
A:dask.array.slicing.d->dict()
A:dask.array.slicing.d[i]->slice(start - tail_index[i], max(stop, -length - 1), step)
A:dask.array.slicing.tail_index->list(accumulate(add, lengths))
A:dask.array.slicing.pos_step->abs(step)
A:dask.array.slicing.seq->list(seq)
A:dask.array.slicing.result->list()
A:dask.array.slicing.L->list()
A:dask.array.slicing.n->len(blockdims)
A:dask.array.slicing.index_lists->partition_by_size(sizes, sorted(index))
A:dask.array.slicing.keys->list(product([outname], *dims))
A:dask.array.slicing.colon->slice(None, None, None)
A:dask.array.slicing.rev_index->tuple(map(sorted(index).index, index))
A:dask.array.slicing.pairs->sorted(_slice_1d(dim_shape, lengths, index).items(), key=first)
dask.array.slicing._slice_1d(dim_shape,lengths,index)
dask.array.slicing.insert_many(seq,where,val)
dask.array.slicing.new_blockdim(dim_shape,lengths,index)
dask.array.slicing.partition_by_size(sizes,seq)
dask.array.slicing.posify_index(shape,ind)
dask.array.slicing.sanitize_index_lists(ind)
dask.array.slicing.slice_array(out_name,in_name,blockdims,index)
dask.array.slicing.slice_slices_and_integers(out_name,in_name,blockdims,index)
dask.array.slicing.slice_with_newaxes(out_name,in_name,blockdims,index)
dask.array.slicing.slice_wrap_lists(out_name,in_name,blockdims,index)
dask.array.slicing.take(outname,inname,blockdims,index,axis=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/random.py----------------------------------------
A:dask.array.random.wrap->wrap(wrap_func_size_as_kwarg)
A:dask.array.random.random->wrap(np.random.random)
A:dask.array.random.beta->wrap(np.random.beta)
A:dask.array.random.binomial->wrap(np.random.binomial)
A:dask.array.random.chisquare->wrap(np.random.chisquare)
A:dask.array.random.exponential->wrap(np.random.exponential)
A:dask.array.random.f->wrap(np.random.f)
A:dask.array.random.gamma->wrap(np.random.gamma)
A:dask.array.random.geometric->wrap(np.random.geometric)
A:dask.array.random.gumbel->wrap(np.random.gumbel)
A:dask.array.random.hypergeometric->wrap(np.random.hypergeometric)
A:dask.array.random.laplace->wrap(np.random.laplace)
A:dask.array.random.logistic->wrap(np.random.logistic)
A:dask.array.random.lognormal->wrap(np.random.lognormal)
A:dask.array.random.logseries->wrap(np.random.logseries)
A:dask.array.random.negative_binomial->wrap(np.random.negative_binomial)
A:dask.array.random.noncentral_chisquare->wrap(np.random.noncentral_chisquare)
A:dask.array.random.noncentral_f->wrap(np.random.noncentral_f)
A:dask.array.random.normal->wrap(np.random.normal)
A:dask.array.random.pareto->wrap(np.random.pareto)
A:dask.array.random.poisson->wrap(np.random.poisson)
A:dask.array.random.power->wrap(np.random.power)
A:dask.array.random.rayleigh->wrap(np.random.rayleigh)
A:dask.array.random.triangular->wrap(np.random.triangular)
A:dask.array.random.uniform->wrap(np.random.uniform)
A:dask.array.random.vonmises->wrap(np.random.vonmises)
A:dask.array.random.wald->wrap(np.random.wald)
A:dask.array.random.weibull->wrap(np.random.weibull)
A:dask.array.random.zipf->wrap(np.random.zipf)
A:dask.array.random.standard_cauchy->wrap(np.random.standard_cauchy)
A:dask.array.random.standard_exponential->wrap(np.random.standard_exponential)
A:dask.array.random.standard_gamma->wrap(np.random.standard_gamma)
A:dask.array.random.standard_normal->wrap(np.random.standard_normal)
A:dask.array.random.standard_t->wrap(np.random.standard_t)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/reductions.py----------------------------------------
A:dask.array.reductions.axis->tuple(range(x.ndim))
A:dask.array.reductions.chunk2->partial(chunk, axis=axis, keepdims=True)
A:dask.array.reductions.aggregate2->partial(aggregate, axis=axis, keepdims=keepdims)
A:dask.array.reductions.inds->tuple(range(x.ndim))
A:dask.array.reductions.tmp->atop(chunk2, next(names), inds, x, inds)
A:dask.array.reductions.inds2->tuple((i for i in inds if i not in axis))
A:dask.array.reductions.result->numpy.empty(shape=n.shape, dtype=[('x', x.dtype), ('x2', x2.dtype), ('n', n.dtype)])
A:dask.array.reductions.dsk->numpy.empty(shape=n.shape, dtype=[('x', x.dtype), ('x2', x2.dtype), ('n', n.dtype)]).dask.copy()
A:dask.array.reductions.dsk[k2]->numpy.empty(shape=n.shape, dtype=[('x', x.dtype), ('x2', x2.dtype), ('n', n.dtype)]).dask.copy().pop(k)
A:dask.array.reductions.blockdims->insert_many(result.blockdims, axis, [1])
A:dask.array.reductions.n->A['n'].sum(**kwargs)
A:dask.array.reductions.total->numpy.sum(x, **kwargs)
A:dask.array.reductions.x->A['x'].sum(**kwargs)
A:dask.array.reductions.x2->A['x2'].sum(**kwargs)
dask.array.all(a,axis=None,keepdims=False)
dask.array.any(a,axis=None,keepdims=False)
dask.array.max(a,axis=None,keepdims=False)
dask.array.mean(a,axis=None,keepdims=False)
dask.array.min(a,axis=None,keepdims=False)
dask.array.reductions.all(a,axis=None,keepdims=False)
dask.array.reductions.any(a,axis=None,keepdims=False)
dask.array.reductions.max(a,axis=None,keepdims=False)
dask.array.reductions.mean(a,axis=None,keepdims=False)
dask.array.reductions.min(a,axis=None,keepdims=False)
dask.array.reductions.reduction(x,chunk,aggregate,axis=None,keepdims=None)
dask.array.reductions.std(a,axis=None,keepdims=False,ddof=0)
dask.array.reductions.sum(a,axis=None,keepdims=False)
dask.array.reductions.var(a,axis=None,keepdims=False,ddof=0)
dask.array.reductions.vnorm(a,ord=None,axis=None,keepdims=False)
dask.array.std(a,axis=None,keepdims=False,ddof=0)
dask.array.sum(a,axis=None,keepdims=False)
dask.array.var(a,axis=None,keepdims=False,ddof=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/array/into.py----------------------------------------
A:dask.array.into.block->a._get_block(*[0] * a.ndim)
A:dask.array.into.s->list(x.shape)
dask.array.into.array_to_dask(x,name=None,blockshape=None,**kwargs)
dask.array.into.dask_to_float(x,**kwargs)
dask.array.into.dask_to_numpy(x,**kwargs)
dask.array.into.discover_dask_array(a,**kwargs)
dask.array.into.store_Array_in_ooc_data(out,arr,inplace=False,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/bag/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/bag/core.py----------------------------------------
A:dask.bag.core.get->curry(mpget, optimizations=[fuse, lazify])
A:dask.bag.core.filenames->sorted(glob(filenames))
A:dask.bag.core.d->dict((((name, i), part) for (i, part) in enumerate(parts)))
A:dask.bag.core.seq->list(seq)
A:dask.bag.core.partition_size->int(len(seq) / 100)
A:dask.bag.core.parts->list(partition_all(partition_size, seq))
A:dask.bag.core.name->next(names)
A:dask.bag.core.dsk->dict((((a, i), (reduceby, key, binop, (self.name, i))) for i in range(self.npartitions)))
A:dask.bag.core.a->next(names)
A:dask.bag.core.b->next(names)
A:dask.bag.core.topk->curry(heapq.nlargest, key=key)
A:dask.bag.core.(totals, counts)->list(zip(*x))
A:dask.bag.core.(squares, totals, counts)->list(zip(*x))
A:dask.bag.core.results->iter(results)
dask.bag.Bag(self,dsk,name,npartitions,get=get)
dask.bag.Bag.__iter__(self)
dask.bag.Bag._keys(self)
dask.bag.Bag._reduction(self,perpartition,aggregate)
dask.bag.Bag.all(self)
dask.bag.Bag.any(self)
dask.bag.Bag.count(self)
dask.bag.Bag.filter(self,predicate)
dask.bag.Bag.fold(self,binop,combine=None,initial=None)
dask.bag.Bag.foldby(self,key,binop,initial=None,combine=None,combine_initial=None)
dask.bag.Bag.frequencies(self)
dask.bag.Bag.from_filenames(cls,filenames)
dask.bag.Bag.from_sequence(cls,seq,partition_size=None,npartitions=None)
dask.bag.Bag.join(self,other,on_self,on_other=None)
dask.bag.Bag.map(self,func)
dask.bag.Bag.map_partitions(self,func)
dask.bag.Bag.max(self)
dask.bag.Bag.mean(self)
dask.bag.Bag.min(self)
dask.bag.Bag.pluck(self,key)
dask.bag.Bag.product(self,other)
dask.bag.Bag.std(self,ddof=0)
dask.bag.Bag.sum(self)
dask.bag.Bag.take(self,k)
dask.bag.Bag.topk(self,k,key=None)
dask.bag.Bag.var(self,ddof=0)
dask.bag.Item(self,dsk,key,get=get)
dask.bag.Item.compute(self)
dask.bag.core.Bag(self,dsk,name,npartitions,get=get)
dask.bag.core.Bag.__init__(self,dsk,name,npartitions,get=get)
dask.bag.core.Bag.__iter__(self)
dask.bag.core.Bag._keys(self)
dask.bag.core.Bag._reduction(self,perpartition,aggregate)
dask.bag.core.Bag.all(self)
dask.bag.core.Bag.any(self)
dask.bag.core.Bag.count(self)
dask.bag.core.Bag.filter(self,predicate)
dask.bag.core.Bag.fold(self,binop,combine=None,initial=None)
dask.bag.core.Bag.foldby(self,key,binop,initial=None,combine=None,combine_initial=None)
dask.bag.core.Bag.frequencies(self)
dask.bag.core.Bag.from_filenames(cls,filenames)
dask.bag.core.Bag.from_sequence(cls,seq,partition_size=None,npartitions=None)
dask.bag.core.Bag.join(self,other,on_self,on_other=None)
dask.bag.core.Bag.map(self,func)
dask.bag.core.Bag.map_partitions(self,func)
dask.bag.core.Bag.max(self)
dask.bag.core.Bag.mean(self)
dask.bag.core.Bag.min(self)
dask.bag.core.Bag.pluck(self,key)
dask.bag.core.Bag.product(self,other)
dask.bag.core.Bag.std(self,ddof=0)
dask.bag.core.Bag.sum(self)
dask.bag.core.Bag.take(self,k)
dask.bag.core.Bag.topk(self,k,key=None)
dask.bag.core.Bag.var(self,ddof=0)
dask.bag.core.Item(self,dsk,key,get=get)
dask.bag.core.Item.__init__(self,dsk,key,get=get)
dask.bag.core.Item.compute(self)
dask.bag.core.dictitems(d)
dask.bag.core.lazify(dsk)
dask.bag.core.lazify_task(task,start=True)
dask.bag.core.list2(seq)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.1/lib/python3.6/site-packages/dask/bag/into.py----------------------------------------
A:dask.bag.into.keys->keywords(Bag.from_sequence)
A:dask.bag.into.kwargs2->dict(((k, v) for (k, v) in kwargs.items() if k in keys))
dask.bag.into.bag_to_iterator(x,**kwargs)
dask.bag.into.bag_to_iterator(x,**kwargs)
dask.bag.into.bag_to_iterator(x,**kwargs)

