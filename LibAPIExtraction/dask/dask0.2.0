
----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/threaded.py----------------------------------------
A:dask.threaded.cache->dict()
A:dask.threaded.dependencies->dict(((k, get_dependencies(dsk, k)) for k in dsk))
A:dask.threaded.waiting->dict(((k, v) for (k, v) in waiting.items() if v))
A:dask.threaded.dependents->reverse_dict(dependencies)
A:dask.threaded.waiting_data->dict(((k, v.copy()) for (k, v) in dependents.items() if v))
A:dask.threaded.ready->set([k for (k, v) in waiting.items() if not v])
A:dask.threaded.result->dict(((k, expand_value(dsk, fast_functions, k)) for (k, v) in dsk.items() if not dependents[k] or not istask(v) or (not isfast(v[0]))))
A:dask.threaded.(exc_type, exc_value, exc_traceback)->sys.exc_info()
A:dask.threaded.result_flat->set([result])
A:dask.threaded.results->set(result_flat)
A:dask.threaded.pool->ThreadPool(nthreads)
A:dask.threaded.state->start_state_from_dask(dsk, cache=cache)
A:dask.threaded.queue->Queue()
A:dask.threaded.lock->Lock()
A:dask.threaded.key->choose_task(state)
A:dask.threaded.(key, finished_task, res, tb)->Queue().get()
A:dask.threaded.g->state_to_networkx(dsk, state)
A:dask.threaded.(data, func)->color_nodes(dsk, state)
dask.threaded._execute_task(arg,cache,dsk=None)
dask.threaded.choose_task(state,score=score)
dask.threaded.color_nodes(dsk,state)
dask.threaded.double(x)
dask.threaded.execute_task(dsk,key,state,queue,results,lock)
dask.threaded.expand_key(dsk,fast,key)
dask.threaded.expand_value(dsk,fast,key)
dask.threaded.finish_task(dsk,key,result,state,results)
dask.threaded.get(dsk,result,nthreads=psutil.NUM_CPUS,cache=None,debug_counts=None,**kwargs)
dask.threaded.inc(x)
dask.threaded.inline(dsk,fast_functions=None)
dask.threaded.nested_get(ind,coll,lazy=False)
dask.threaded.release_data(key,state)
dask.threaded.score(key,state)
dask.threaded.start_state_from_dask(dsk,cache=None)
dask.threaded.state_to_networkx(dsk,state)
dask.threaded.visualize(dsk,state,filename='dask')


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/compatibility.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/core.py----------------------------------------
A:dask.core.v->list(v)
A:dask.core.result->dict(((t, builtins.set()) for t in terms))
A:dask.core.nxt->compatibility.builtins.set()
dask.core._deps(dsk,arg)
dask.core.cull(dsk,keys)
dask.core.flatten(seq)
dask.core.get(d,key,get=None,concrete=True,**kwargs)
dask.core.get_dependencies(dsk,task)
dask.core.inc(x)
dask.core.ishashable(x)
dask.core.istask(x)
dask.core.reverse_dict(d)
dask.core.set(d,key,val,args=[])
dask.get(d,key,get=None,concrete=True,**kwargs)
dask.get_dependencies(dsk,task)
dask.istask(x)
dask.set(d,key,val,args=[])


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/utils.py----------------------------------------
dask.utils.deepmap(func,seq)
dask.utils.raises(err,lamda)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/dot.py----------------------------------------
A:dask.dot.data_attributes->dict()
A:dask.dot.function_attributes->dict()
A:dask.dot.g->networkx.DiGraph()
A:dask.dot.func_node->make_hashable((v, 'function'))
A:dask.dot.arg2->make_hashable(dep)
A:dask.dot.p->networkx.to_pydot(dg)
A:dask.dot.dg->to_networkx(d, **kwargs)
dask.dot.dot_graph(d,filename='mydask',**kwargs)
dask.dot.make_hashable(x)
dask.dot.to_networkx(d,data_attributes=None,function_attributes=None)
dask.dot.write_networkx_to_dot(dg,filename='mydask')


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/array/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/array/core.py----------------------------------------
A:dask.array.core.numblocks->dict([(a.name, a.numblocks) for (a, ind) in arginds])
A:dask.array.core.A->map(leftfunc, A)
A:dask.array.core.B->map(rightfunc, B)
A:dask.array.core.L->concat([zip(inds, dims) for ((x, inds), (x, dims)) in join(first, argpairs, first, numblocks.items())])
A:dask.array.core.g->dict(((k, set([d for (i, d) in v])) for (k, v) in g.items()))
A:dask.array.core.g2->dict(((k, v - set(sentinels) if len(v) > 1 else v) for (k, v) in g.items()))
A:dask.array.core.argpairs->list(partition(2, arrind_pairs))
A:dask.array.core.all_indices->pipe(argpairs, pluck(1), concat, set)
A:dask.array.core.dims->broadcast_dimensions(arginds, shapes)
A:dask.array.core.keytups->list(product(*[range(dims[i]) for i in out_indices]))
A:dask.array.core.dummies->dict(((i, list(range(dims[i]))) for i in dummy_indices))
A:dask.array.core.tups->lol_tuples((arg,), ind, kd, dummies)
A:dask.array.core.tups2->zero_broadcast_dimensions(tups, numblocks[arg])
A:dask.array.core.arrays->list(map(list, arrays))
A:dask.array.core.pairs->sorted(_slice_1d(dim_shape, lengths, index).items(), key=first)
A:dask.array.core.lens->list(lengths)
A:dask.array.core.d->dict()
A:dask.array.core.d[i]->slice(start - tail_indexes[i], max(stop, -length - 1), step)
A:dask.array.core.tail_indexes->list(accumulate(add, lengths))
A:dask.array.core.pos_step->abs(step)
A:dask.array.core.empty->slice(None, None, None)
A:dask.array.core.block_slices->list(map(_slice_1d, shape, blockdims, indexes))
A:dask.array.core.out_names->product([out_name], *[range(len(d)) for (d, i) in zip(block_slices, indexes) if not isinstance(i, int)])
A:dask.array.core.in_names->product([in_name], *[i.keys() for i in block_slices])
A:dask.array.core.all_slices->product(*[i.values() for i in block_slices])
A:dask.array.core.final_out->dict(((out_name, (getitem_func, in_name, slices)) for (out_name, in_name, slices) in zip(out_names, in_names, all_slices)))
A:dask.array.core.blockdims->tuple((blockdimss[i] for i in out_ind))
A:dask.array.core.self.blockdims->tuple(map(tuple, blockdims))
A:dask.array.core.ind->len(args)
A:dask.array.core.arginds->list(partition(2, args))
A:dask.array.core.argindsstr->list(concat([(a.name, ind) for (a, ind) in arginds]))
A:dask.array.core.dsk->top(func, out, out_ind, *argindsstr, numblocks=numblocks)
A:dask.array.core.shapes->dict(((a, a.shape) for (a, _) in arginds))
A:dask.array.core.shape->tuple((dims[i] for i in out_ind))
A:dask.array.core.blockdim_dict->dict(((a, a.blockdims) for (a, _) in arginds))
A:dask.array.core.blockdimss->broadcast_dimensions(arginds, blockdim_dict)
A:dask.array.core.fast_functions->kwargs.get('fast_functions', set([operator.getitem, np.transpose]))
A:dask.array.core.dsk2->threaded.inline(dsk, fast_functions=fast_functions)
A:dask.array.core.dsk3->core.cull(dsk2, list(core.flatten(keys)))
dask.array.Array(self,dask,name,shape,blockshape=None,blockdims=None)
dask.array.Array._get_block(self,*args)
dask.array.Array.keys(self,*args)
dask.array.Array.ndim(self)
dask.array.Array.numblocks(self)
dask.array.core.Array(self,dask,name,shape,blockshape=None,blockdims=None)
dask.array.core.Array.__init__(self,dask,name,shape,blockshape=None,blockdims=None)
dask.array.core.Array._get_block(self,*args)
dask.array.core.Array.keys(self,*args)
dask.array.core.Array.ndim(self)
dask.array.core.Array.numblocks(self)
dask.array.core._slice_1d(dim_shape,lengths,index)
dask.array.core.atop(func,out,out_ind,*args)
dask.array.core.broadcast_dimensions(argpairs,numblocks,sentinels=(1,(1,)))
dask.array.core.concatenate(arrays,axis=0)
dask.array.core.concatenate2(arrays,axes=[])
dask.array.core.dask_slice(out_name,in_name,shape,blockdims,indexes,getitem_func=operator.getitem)
dask.array.core.dotmany(A,B,leftfunc=None,rightfunc=None,**kwargs)
dask.array.core.get(dsk,keys,get=threaded.get,**kwargs)
dask.array.core.getem(arr,blocksize,shape)
dask.array.core.lol_tuples(head,ind,values,dummies)
dask.array.core.new_blockdim(dim_shape,lengths,index)
dask.array.core.top(func,output,out_indices,*arrind_pairs,**kwargs)
dask.array.core.zero_broadcast_dimensions(lol,nblocks)
dask.array.get(dsk,keys,get=threaded.get,**kwargs)
dask.array.getem(arr,blocksize,shape)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/array/blaze.py----------------------------------------
A:dask.array.blaze.func->many(binop=np.tensordot, reduction=sum, axes=(expr._left_axes, expr._right_axes))
A:dask.array.blaze.chunk->symbol('chunk', DataShape(*tuple(map(first, data.blockdims)) + (leaf.dshape.measure,)))
A:dask.array.blaze.((chunk, chunk_expr), (agg, agg_expr))->split(expr._child, expr, chunk=chunk)
A:dask.array.blaze.inds->tuple(range(ndim(leaf)))
A:dask.array.blaze.tmp->atop(curry(compute_it, chunk_expr, [chunk], **kwargs), next(names), inds, data, inds)
A:dask.array.blaze.ALPHABET->alphabet.upper()
A:dask.array.blaze.left_index->list(alphabet[:ndim(lhs)])
A:dask.array.blaze.right_index->list(ALPHABET[:ndim(rhs)])
A:dask.array.blaze.out->next(names)
A:dask.array.blaze.dsk->dask_slice(out, data.name, data.shape, data.blockdims, index)
dask.array.blaze.compute_it(expr,leaves,*data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,data,**kwargs)
dask.array.blaze.compute_up(expr,lhs,rhs,**kwargs)
dask.array.blaze.elemwise_array(expr,*data,**kwargs)
dask.array.blaze.many(a,b,binop=None,reduction=None,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/dask0.2.0/lib/python3.6/site-packages/dask/array/into.py----------------------------------------
A:dask.array.into.block->a._get_block(*[0] * a.ndim)
A:dask.array.into.dask->merge({name: x}, getem(name, blockshape, x.shape))
A:dask.array.into.result->get(x.dask, x.keys(), **kwargs)
A:dask.array.into.lock->Lock()
A:dask.array.into.ind->tuple([slice(loc[i], loc[i + 1]) for (i, loc) in zip(args, locs)])
A:dask.array.into.update->insert_to_ooc(out, arr)
A:dask.array.into.dsk->merge(arr.dask, update)
A:dask.array.into.s->list(x.shape)
dask.array.into.array_to_dask(x,name=None,blockshape=None,**kwargs)
dask.array.into.dask_to_float(x,**kwargs)
dask.array.into.dask_to_numpy(x,**kwargs)
dask.array.into.discover_dask_array(a,**kwargs)
dask.array.into.insert_to_ooc(out,arr)
dask.array.into.resize(x,shape)
dask.array.into.resize(x,size)
dask.array.into.resize(x,size)
dask.array.into.store_Array_in_ooc_data(out,arr,**kwargs)

