
----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_urldispatcher.py----------------------------------------
A:aiohttp.web_urldispatcher.html_escape->functools.partial(html.escape, quote=True)
A:aiohttp.web_urldispatcher.method->getattr(self, self.request.method.lower(), None)
A:aiohttp.web_urldispatcher.result->result.replace('%25', '%').replace('%25', '%')
A:aiohttp.web_urldispatcher.expect->request.headers.get(hdrs.EXPECT, '')
A:aiohttp.web_urldispatcher.route_obj->ResourceRoute(method, handler, self, expect_handler=expect_handler)
A:aiohttp.web_urldispatcher.match_dict->self._match(request.rel_url.raw_path)
A:aiohttp.web_urldispatcher.DYN->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*)\\}')
A:aiohttp.web_urldispatcher.DYN_WITH_RE->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*):(?P<re>.+)\\}')
A:aiohttp.web_urldispatcher.match->self._pattern.fullmatch(path)
A:aiohttp.web_urldispatcher.part->_requote_path(part)
A:aiohttp.web_urldispatcher.compiled->re.compile(pattern)
A:aiohttp.web_urldispatcher.self._pattern->re.compile(re.escape(prefix) + self._pattern.pattern)
A:aiohttp.web_urldispatcher.url->URL('http://' + domain)
A:aiohttp.web_urldispatcher.self._prefix->_requote_path(prefix)
A:aiohttp.web_urldispatcher.directory->Path(directory).expanduser().resolve(strict=True)
A:aiohttp.web_urldispatcher.filename->Path(rel_url)
A:aiohttp.web_urldispatcher.unresolved_path->self._directory.joinpath(filename)
A:aiohttp.web_urldispatcher.normalized_path->Path(os.path.normpath(unresolved_path))
A:aiohttp.web_urldispatcher.filepath->self._directory.joinpath(filename).resolve()
A:aiohttp.web_urldispatcher.file_bytes->f.read()
A:aiohttp.web_urldispatcher.h->self._get_file_hash(file_bytes)
A:aiohttp.web_urldispatcher.m->hashlib.sha256()
A:aiohttp.web_urldispatcher.b64->base64.urlsafe_b64encode(m.digest())
A:aiohttp.web_urldispatcher.self._routes['OPTIONS']->ResourceRoute('OPTIONS', handler, self, expect_handler=self._expect_handler)
A:aiohttp.web_urldispatcher.allowed_methods->set(self._routes)
A:aiohttp.web_urldispatcher.loop->asyncio.get_running_loop()
A:aiohttp.web_urldispatcher.file_path->self._directory.joinpath(filename).resolve()
A:aiohttp.web_urldispatcher.relative_path_to_dir->dir_path.relative_to(self._directory).as_posix()
A:aiohttp.web_urldispatcher.dir_index->dir_path.iterdir()
A:aiohttp.web_urldispatcher.rel_path->_file.relative_to(self._directory).as_posix()
A:aiohttp.web_urldispatcher.quoted_file_url->_quote_path(f'{self._prefix}/{rel_path}')
A:aiohttp.web_urldispatcher.ul->'<ul>\n{}\n</ul>'.format('\n'.join(index_list))
A:aiohttp.web_urldispatcher.methods->set()
A:aiohttp.web_urldispatcher.re_part->re.compile('(?!-)[a-z\\d\\*-]{1,63}(?<!-)')
A:aiohttp.web_urldispatcher.self._domain->self.validation(domain)
A:aiohttp.web_urldispatcher.domain->domain.rstrip('.').lower().rstrip('.').lower()
A:aiohttp.web_urldispatcher.host->request.headers.get(hdrs.HOST)
A:aiohttp.web_urldispatcher.mask->self._domain.replace('.', '\\.').replace('*', '.*')
A:aiohttp.web_urldispatcher.self._mask->re.compile(mask)
A:aiohttp.web_urldispatcher.NAME_SPLIT_RE->re.compile('[.:-]')
A:aiohttp.web_urldispatcher.parts->self.NAME_SPLIT_RE.split(name)
A:aiohttp.web_urldispatcher.resource_key->self._get_resource_index_key(resource)
A:aiohttp.web_urldispatcher.resource->self.add_resource(path, name=name)
A:aiohttp.web_urldispatcher.value->value.replace('%', '%25').replace('%', '%25')
aiohttp.web_urldispatcher.AbstractResource(self,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.AbstractResource.__init__(self,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.AbstractResource.add_prefix(self,prefix:str)->None
aiohttp.web_urldispatcher.AbstractResource.canonical(self)->str
aiohttp.web_urldispatcher.AbstractResource.freeze(self)->None
aiohttp.web_urldispatcher.AbstractResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.AbstractResource.name(self)->Optional[str]
aiohttp.web_urldispatcher.AbstractResource.raw_match(self,path:str)->bool
aiohttp.web_urldispatcher.AbstractResource.resolve(self,request:Request)->_Resolve
aiohttp.web_urldispatcher.AbstractResource.url_for(self,**kwargs:str)->URL
aiohttp.web_urldispatcher.AbstractRoute(self,method:str,handler:Union[Handler,Type[AbstractView]],*,expect_handler:Optional[_ExpectHandler]=None,resource:Optional[AbstractResource]=None)
aiohttp.web_urldispatcher.AbstractRoute.__init__(self,method:str,handler:Union[Handler,Type[AbstractView]],*,expect_handler:Optional[_ExpectHandler]=None,resource:Optional[AbstractResource]=None)
aiohttp.web_urldispatcher.AbstractRoute.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.AbstractRoute.handle_expect_header(self,request:Request)->Optional[StreamResponse]
aiohttp.web_urldispatcher.AbstractRoute.handler(self)->Handler
aiohttp.web_urldispatcher.AbstractRoute.method(self)->str
aiohttp.web_urldispatcher.AbstractRoute.name(self)->Optional[str]
aiohttp.web_urldispatcher.AbstractRoute.resource(self)->Optional[AbstractResource]
aiohttp.web_urldispatcher.AbstractRoute.url_for(self,*args:str,**kwargs:str)->URL
aiohttp.web_urldispatcher.AbstractRuleMatching(abc.ABC)
aiohttp.web_urldispatcher.AbstractRuleMatching.canonical(self)->str
aiohttp.web_urldispatcher.AbstractRuleMatching.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.AbstractRuleMatching.match(self,request:Request)->bool
aiohttp.web_urldispatcher.Domain(self,domain:str)
aiohttp.web_urldispatcher.Domain.__init__(self,domain:str)
aiohttp.web_urldispatcher.Domain.canonical(self)->str
aiohttp.web_urldispatcher.Domain.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.Domain.match(self,request:Request)->bool
aiohttp.web_urldispatcher.Domain.match_domain(self,host:str)->bool
aiohttp.web_urldispatcher.Domain.validation(self,domain:str)->str
aiohttp.web_urldispatcher.DynamicResource(self,path:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.DynamicResource.__init__(self,path:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.DynamicResource.__repr__(self)->str
aiohttp.web_urldispatcher.DynamicResource._match(self,path:str)->Optional[Dict[str, str]]
aiohttp.web_urldispatcher.DynamicResource.add_prefix(self,prefix:str)->None
aiohttp.web_urldispatcher.DynamicResource.canonical(self)->str
aiohttp.web_urldispatcher.DynamicResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.DynamicResource.raw_match(self,path:str)->bool
aiohttp.web_urldispatcher.DynamicResource.url_for(self,**parts:str)->URL
aiohttp.web_urldispatcher.MaskDomain(self,domain:str)
aiohttp.web_urldispatcher.MaskDomain.__init__(self,domain:str)
aiohttp.web_urldispatcher.MaskDomain.canonical(self)->str
aiohttp.web_urldispatcher.MaskDomain.match_domain(self,host:str)->bool
aiohttp.web_urldispatcher.MatchInfoError(self,http_exception:HTTPException)
aiohttp.web_urldispatcher.MatchInfoError.__init__(self,http_exception:HTTPException)
aiohttp.web_urldispatcher.MatchInfoError.__repr__(self)->str
aiohttp.web_urldispatcher.MatchInfoError.http_exception(self)->HTTPException
aiohttp.web_urldispatcher.MatchedSubAppResource(self,rule:AbstractRuleMatching,app:'Application')
aiohttp.web_urldispatcher.MatchedSubAppResource.__init__(self,rule:AbstractRuleMatching,app:'Application')
aiohttp.web_urldispatcher.MatchedSubAppResource.__repr__(self)->str
aiohttp.web_urldispatcher.MatchedSubAppResource.canonical(self)->str
aiohttp.web_urldispatcher.MatchedSubAppResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.MatchedSubAppResource.resolve(self,request:Request)->_Resolve
aiohttp.web_urldispatcher.PlainResource(self,path:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.PlainResource.__init__(self,path:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.PlainResource.__repr__(self)->str
aiohttp.web_urldispatcher.PlainResource._match(self,path:str)->Optional[Dict[str, str]]
aiohttp.web_urldispatcher.PlainResource.add_prefix(self,prefix:str)->None
aiohttp.web_urldispatcher.PlainResource.canonical(self)->str
aiohttp.web_urldispatcher.PlainResource.freeze(self)->None
aiohttp.web_urldispatcher.PlainResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.PlainResource.raw_match(self,path:str)->bool
aiohttp.web_urldispatcher.PlainResource.url_for(self)->URL
aiohttp.web_urldispatcher.PrefixResource(self,prefix:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.PrefixResource.__init__(self,prefix:str,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.PrefixResource.add_prefix(self,prefix:str)->None
aiohttp.web_urldispatcher.PrefixResource.canonical(self)->str
aiohttp.web_urldispatcher.PrefixResource.raw_match(self,prefix:str)->bool
aiohttp.web_urldispatcher.PrefixedSubAppResource(self,prefix:str,app:'Application')
aiohttp.web_urldispatcher.PrefixedSubAppResource.__init__(self,prefix:str,app:'Application')
aiohttp.web_urldispatcher.PrefixedSubAppResource.__iter__(self)->Iterator[AbstractRoute]
aiohttp.web_urldispatcher.PrefixedSubAppResource.__len__(self)->int
aiohttp.web_urldispatcher.PrefixedSubAppResource.__repr__(self)->str
aiohttp.web_urldispatcher.PrefixedSubAppResource._add_prefix_to_resources(self,prefix:str)->None
aiohttp.web_urldispatcher.PrefixedSubAppResource.add_prefix(self,prefix:str)->None
aiohttp.web_urldispatcher.PrefixedSubAppResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.PrefixedSubAppResource.resolve(self,request:Request)->_Resolve
aiohttp.web_urldispatcher.PrefixedSubAppResource.url_for(self,*args:str,**kwargs:str)->URL
aiohttp.web_urldispatcher.Resource(self,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.Resource.__init__(self,*,name:Optional[str]=None)
aiohttp.web_urldispatcher.Resource.__iter__(self)->Iterator['ResourceRoute']
aiohttp.web_urldispatcher.Resource.__len__(self)->int
aiohttp.web_urldispatcher.Resource._match(self,path:str)->Optional[Dict[str, str]]
aiohttp.web_urldispatcher.Resource.add_route(self,method:str,handler:Union[Type[AbstractView],Handler],*,expect_handler:Optional[_ExpectHandler]=None)->'ResourceRoute'
aiohttp.web_urldispatcher.Resource.register_route(self,route:'ResourceRoute')->None
aiohttp.web_urldispatcher.Resource.resolve(self,request:Request)->_Resolve
aiohttp.web_urldispatcher.ResourceRoute(self,method:str,handler:Union[Handler,Type[AbstractView]],resource:AbstractResource,*,expect_handler:Optional[_ExpectHandler]=None)
aiohttp.web_urldispatcher.ResourceRoute.__init__(self,method:str,handler:Union[Handler,Type[AbstractView]],resource:AbstractResource,*,expect_handler:Optional[_ExpectHandler]=None)
aiohttp.web_urldispatcher.ResourceRoute.__repr__(self)->str
aiohttp.web_urldispatcher.ResourceRoute.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.ResourceRoute.name(self)->Optional[str]
aiohttp.web_urldispatcher.ResourceRoute.url_for(self,*args:str,**kwargs:str)->URL
aiohttp.web_urldispatcher.ResourcesView(self,resources:List[AbstractResource])
aiohttp.web_urldispatcher.ResourcesView.__contains__(self,resource:object)->bool
aiohttp.web_urldispatcher.ResourcesView.__init__(self,resources:List[AbstractResource])
aiohttp.web_urldispatcher.ResourcesView.__iter__(self)->Iterator[AbstractResource]
aiohttp.web_urldispatcher.ResourcesView.__len__(self)->int
aiohttp.web_urldispatcher.RoutesView(self,resources:List[AbstractResource])
aiohttp.web_urldispatcher.RoutesView.__contains__(self,route:object)->bool
aiohttp.web_urldispatcher.RoutesView.__init__(self,resources:List[AbstractResource])
aiohttp.web_urldispatcher.RoutesView.__iter__(self)->Iterator[AbstractRoute]
aiohttp.web_urldispatcher.RoutesView.__len__(self)->int
aiohttp.web_urldispatcher.StaticResource(self,prefix:str,directory:PathLike,*,name:Optional[str]=None,expect_handler:Optional[_ExpectHandler]=None,chunk_size:int=256*1024,show_index:bool=False,follow_symlinks:bool=False,append_version:bool=False)
aiohttp.web_urldispatcher.StaticResource.__init__(self,prefix:str,directory:PathLike,*,name:Optional[str]=None,expect_handler:Optional[_ExpectHandler]=None,chunk_size:int=256*1024,show_index:bool=False,follow_symlinks:bool=False,append_version:bool=False)
aiohttp.web_urldispatcher.StaticResource.__iter__(self)->Iterator[AbstractRoute]
aiohttp.web_urldispatcher.StaticResource.__len__(self)->int
aiohttp.web_urldispatcher.StaticResource.__repr__(self)->str
aiohttp.web_urldispatcher.StaticResource._directory_as_html(self,dir_path:Path)->str
aiohttp.web_urldispatcher.StaticResource._get_file_hash(byte_array:bytes)->str
aiohttp.web_urldispatcher.StaticResource._handle(self,request:Request)->StreamResponse
aiohttp.web_urldispatcher.StaticResource._resolve_path_to_response(self,unresolved_path:Path)->StreamResponse
aiohttp.web_urldispatcher.StaticResource.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.StaticResource.resolve(self,request:Request)->_Resolve
aiohttp.web_urldispatcher.StaticResource.set_options_route(self,handler:Handler)->None
aiohttp.web_urldispatcher.StaticResource.url_for(self,*,filename:PathLike,append_version:Optional[bool]=None)->URL
aiohttp.web_urldispatcher.SystemRoute(self,http_exception:HTTPException)
aiohttp.web_urldispatcher.SystemRoute.__init__(self,http_exception:HTTPException)
aiohttp.web_urldispatcher.SystemRoute.__repr__(self)->str
aiohttp.web_urldispatcher.SystemRoute._handle(self,request:Request)->StreamResponse
aiohttp.web_urldispatcher.SystemRoute.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.SystemRoute.name(self)->Optional[str]
aiohttp.web_urldispatcher.SystemRoute.reason(self)->str
aiohttp.web_urldispatcher.SystemRoute.status(self)->int
aiohttp.web_urldispatcher.SystemRoute.url_for(self,*args:str,**kwargs:str)->URL
aiohttp.web_urldispatcher.UrlDispatcher(self)
aiohttp.web_urldispatcher.UrlDispatcher.__contains__(self,resource:object)->bool
aiohttp.web_urldispatcher.UrlDispatcher.__getitem__(self,name:str)->AbstractResource
aiohttp.web_urldispatcher.UrlDispatcher.__init__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__iter__(self)->Iterator[str]
aiohttp.web_urldispatcher.UrlDispatcher.__len__(self)->int
aiohttp.web_urldispatcher.UrlDispatcher._get_resource_index_key(self,resource:AbstractResource)->str
aiohttp.web_urldispatcher.UrlDispatcher.add_delete(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_get(self,path:str,handler:Handler,*,name:Optional[str]=None,allow_head:bool=True,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_head(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_options(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_patch(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_post(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_put(self,path:str,handler:Handler,**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_resource(self,path:str,*,name:Optional[str]=None)->Resource
aiohttp.web_urldispatcher.UrlDispatcher.add_route(self,method:str,path:str,handler:Union[Handler,Type[AbstractView]],*,name:Optional[str]=None,expect_handler:Optional[_ExpectHandler]=None)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.add_routes(self,routes:Iterable[AbstractRouteDef])->List[AbstractRoute]
aiohttp.web_urldispatcher.UrlDispatcher.add_static(self,prefix:str,path:PathLike,*,name:Optional[str]=None,expect_handler:Optional[_ExpectHandler]=None,chunk_size:int=256*1024,show_index:bool=False,follow_symlinks:bool=False,append_version:bool=False)->AbstractResource
aiohttp.web_urldispatcher.UrlDispatcher.add_view(self,path:str,handler:Type[AbstractView],**kwargs:Any)->AbstractRoute
aiohttp.web_urldispatcher.UrlDispatcher.freeze(self)->None
aiohttp.web_urldispatcher.UrlDispatcher.index_resource(self,resource:AbstractResource)->None
aiohttp.web_urldispatcher.UrlDispatcher.named_resources(self)->Mapping[str, AbstractResource]
aiohttp.web_urldispatcher.UrlDispatcher.register_resource(self,resource:AbstractResource)->None
aiohttp.web_urldispatcher.UrlDispatcher.resolve(self,request:Request)->UrlMappingMatchInfo
aiohttp.web_urldispatcher.UrlDispatcher.resources(self)->ResourcesView
aiohttp.web_urldispatcher.UrlDispatcher.routes(self)->RoutesView
aiohttp.web_urldispatcher.UrlDispatcher.unindex_resource(self,resource:AbstractResource)->None
aiohttp.web_urldispatcher.UrlMappingMatchInfo(self,match_dict:Dict[str,str],route:AbstractRoute)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__init__(self,match_dict:Dict[str,str],route:AbstractRoute)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__repr__(self)->str
aiohttp.web_urldispatcher.UrlMappingMatchInfo.add_app(self,app:'Application')->None
aiohttp.web_urldispatcher.UrlMappingMatchInfo.apps(self)->Tuple['Application', ...]
aiohttp.web_urldispatcher.UrlMappingMatchInfo.current_app(self)->'Application'
aiohttp.web_urldispatcher.UrlMappingMatchInfo.expect_handler(self)->_ExpectHandler
aiohttp.web_urldispatcher.UrlMappingMatchInfo.freeze(self)->None
aiohttp.web_urldispatcher.UrlMappingMatchInfo.get_info(self)->_InfoDict
aiohttp.web_urldispatcher.UrlMappingMatchInfo.handler(self)->Handler
aiohttp.web_urldispatcher.UrlMappingMatchInfo.http_exception(self)->Optional[HTTPException]
aiohttp.web_urldispatcher.UrlMappingMatchInfo.route(self)->AbstractRoute
aiohttp.web_urldispatcher.UrlMappingMatchInfo.set_current_app(self,app:'Application')->Generator[None, None, None]
aiohttp.web_urldispatcher.View(AbstractView)
aiohttp.web_urldispatcher.View.__await__(self)->Generator[Any, None, StreamResponse]
aiohttp.web_urldispatcher.View._iter(self)->StreamResponse
aiohttp.web_urldispatcher.View._raise_allowed_methods(self)->NoReturn
aiohttp.web_urldispatcher._InfoDict(TypedDict,total=False)
aiohttp.web_urldispatcher._default_expect_handler(request:Request)->None
aiohttp.web_urldispatcher._quote_path(value:str)->str
aiohttp.web_urldispatcher._requote_path(value:str)->str
aiohttp.web_urldispatcher._unquote_path(value:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/streams.py----------------------------------------
A:aiohttp.streams._T->TypeVar('_T')
A:aiohttp.streams.loop->asyncio.get_event_loop()
A:aiohttp.streams.self._eof_waiter->self._loop.create_future()
A:aiohttp.streams.waiterself._waiter->self._loop.create_future()
A:aiohttp.streams.seplen->len(separator)
A:aiohttp.streams.data->self._buffer.popleft()
A:aiohttp.streams.pos->self._http_chunk_splits.pop(0)
A:aiohttp.streams.partial->b''.join(blocks)
A:aiohttp.streams.chunk->self._read_nowait_chunk(n)
A:aiohttp.streams.self._waiter->self._loop.create_future()
A:aiohttp.streams.(data, size)->self._buffer.popleft()
aiohttp.DataQueue(self,loop:asyncio.AbstractEventLoop)
aiohttp.DataQueue.__aiter__(self)->AsyncStreamIterator[_T]
aiohttp.DataQueue.__len__(self)->int
aiohttp.DataQueue.at_eof(self)->bool
aiohttp.DataQueue.exception(self)->Optional[BaseException]
aiohttp.DataQueue.feed_data(self,data:_T,size:int=0)->None
aiohttp.DataQueue.feed_eof(self)->None
aiohttp.DataQueue.is_eof(self)->bool
aiohttp.DataQueue.read(self)->_T
aiohttp.DataQueue.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.EofStream(Exception)
aiohttp.FlowControlDataQueue(self,protocol:BaseProtocol,limit:int,*,loop:asyncio.AbstractEventLoop)
aiohttp.FlowControlDataQueue.feed_data(self,data:_T,size:int=0)->None
aiohttp.FlowControlDataQueue.read(self)->_T
aiohttp.StreamReader(self,protocol:BaseProtocol,limit:int,*,timer:Optional[BaseTimerContext]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.StreamReader.__repr__(self)->str
aiohttp.StreamReader._read_nowait(self,n:int)->bytes
aiohttp.StreamReader._read_nowait_chunk(self,n:int)->bytes
aiohttp.StreamReader._wait(self,func_name:str)->None
aiohttp.StreamReader.at_eof(self)->bool
aiohttp.StreamReader.begin_http_chunk_receiving(self)->None
aiohttp.StreamReader.end_http_chunk_receiving(self)->None
aiohttp.StreamReader.exception(self)->Optional[BaseException]
aiohttp.StreamReader.feed_data(self,data:bytes,size:int=0)->None
aiohttp.StreamReader.feed_eof(self)->None
aiohttp.StreamReader.get_read_buffer_limits(self)->Tuple[int, int]
aiohttp.StreamReader.is_eof(self)->bool
aiohttp.StreamReader.on_eof(self,callback:Callable[[],None])->None
aiohttp.StreamReader.read(self,n:int=-1)->bytes
aiohttp.StreamReader.read_nowait(self,n:int=-1)->bytes
aiohttp.StreamReader.readany(self)->bytes
aiohttp.StreamReader.readchunk(self)->Tuple[bytes, bool]
aiohttp.StreamReader.readexactly(self,n:int)->bytes
aiohttp.StreamReader.readline(self)->bytes
aiohttp.StreamReader.readuntil(self,separator:bytes=b'\n')->bytes
aiohttp.StreamReader.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.StreamReader.unread_data(self,data:bytes)->None
aiohttp.StreamReader.wait_eof(self)->None
aiohttp.streams.AsyncStreamIterator(self,read_func:Callable[[],Awaitable[_T]])
aiohttp.streams.AsyncStreamIterator.__aiter__(self)->'AsyncStreamIterator[_T]'
aiohttp.streams.AsyncStreamIterator.__anext__(self)->_T
aiohttp.streams.AsyncStreamIterator.__init__(self,read_func:Callable[[],Awaitable[_T]])
aiohttp.streams.AsyncStreamReaderMixin
aiohttp.streams.AsyncStreamReaderMixin.__aiter__(self)->AsyncStreamIterator[bytes]
aiohttp.streams.AsyncStreamReaderMixin.iter_any(self)->AsyncStreamIterator[bytes]
aiohttp.streams.AsyncStreamReaderMixin.iter_chunked(self,n:int)->AsyncStreamIterator[bytes]
aiohttp.streams.AsyncStreamReaderMixin.iter_chunks(self)->ChunkTupleAsyncStreamIterator
aiohttp.streams.ChunkTupleAsyncStreamIterator(self,stream:'StreamReader')
aiohttp.streams.ChunkTupleAsyncStreamIterator.__aiter__(self)->'ChunkTupleAsyncStreamIterator'
aiohttp.streams.ChunkTupleAsyncStreamIterator.__anext__(self)->Tuple[bytes, bool]
aiohttp.streams.ChunkTupleAsyncStreamIterator.__init__(self,stream:'StreamReader')
aiohttp.streams.DataQueue(self,loop:asyncio.AbstractEventLoop)
aiohttp.streams.DataQueue.__aiter__(self)->AsyncStreamIterator[_T]
aiohttp.streams.DataQueue.__init__(self,loop:asyncio.AbstractEventLoop)
aiohttp.streams.DataQueue.__len__(self)->int
aiohttp.streams.DataQueue.at_eof(self)->bool
aiohttp.streams.DataQueue.exception(self)->Optional[BaseException]
aiohttp.streams.DataQueue.feed_data(self,data:_T,size:int=0)->None
aiohttp.streams.DataQueue.feed_eof(self)->None
aiohttp.streams.DataQueue.is_eof(self)->bool
aiohttp.streams.DataQueue.read(self)->_T
aiohttp.streams.DataQueue.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.streams.EmptyStreamReader(self)
aiohttp.streams.EmptyStreamReader.__init__(self)
aiohttp.streams.EmptyStreamReader.__repr__(self)->str
aiohttp.streams.EmptyStreamReader.at_eof(self)->bool
aiohttp.streams.EmptyStreamReader.exception(self)->Optional[BaseException]
aiohttp.streams.EmptyStreamReader.feed_data(self,data:bytes,n:int=0)->None
aiohttp.streams.EmptyStreamReader.feed_eof(self)->None
aiohttp.streams.EmptyStreamReader.is_eof(self)->bool
aiohttp.streams.EmptyStreamReader.on_eof(self,callback:Callable[[],None])->None
aiohttp.streams.EmptyStreamReader.read(self,n:int=-1)->bytes
aiohttp.streams.EmptyStreamReader.read_nowait(self,n:int=-1)->bytes
aiohttp.streams.EmptyStreamReader.readany(self)->bytes
aiohttp.streams.EmptyStreamReader.readchunk(self)->Tuple[bytes, bool]
aiohttp.streams.EmptyStreamReader.readexactly(self,n:int)->bytes
aiohttp.streams.EmptyStreamReader.readline(self)->bytes
aiohttp.streams.EmptyStreamReader.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.streams.EmptyStreamReader.wait_eof(self)->None
aiohttp.streams.EofStream(Exception)
aiohttp.streams.FlowControlDataQueue(self,protocol:BaseProtocol,limit:int,*,loop:asyncio.AbstractEventLoop)
aiohttp.streams.FlowControlDataQueue.__init__(self,protocol:BaseProtocol,limit:int,*,loop:asyncio.AbstractEventLoop)
aiohttp.streams.FlowControlDataQueue.feed_data(self,data:_T,size:int=0)->None
aiohttp.streams.FlowControlDataQueue.read(self)->_T
aiohttp.streams.StreamReader(self,protocol:BaseProtocol,limit:int,*,timer:Optional[BaseTimerContext]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.streams.StreamReader.__init__(self,protocol:BaseProtocol,limit:int,*,timer:Optional[BaseTimerContext]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.streams.StreamReader.__repr__(self)->str
aiohttp.streams.StreamReader._read_nowait(self,n:int)->bytes
aiohttp.streams.StreamReader._read_nowait_chunk(self,n:int)->bytes
aiohttp.streams.StreamReader._wait(self,func_name:str)->None
aiohttp.streams.StreamReader.at_eof(self)->bool
aiohttp.streams.StreamReader.begin_http_chunk_receiving(self)->None
aiohttp.streams.StreamReader.end_http_chunk_receiving(self)->None
aiohttp.streams.StreamReader.exception(self)->Optional[BaseException]
aiohttp.streams.StreamReader.feed_data(self,data:bytes,size:int=0)->None
aiohttp.streams.StreamReader.feed_eof(self)->None
aiohttp.streams.StreamReader.get_read_buffer_limits(self)->Tuple[int, int]
aiohttp.streams.StreamReader.is_eof(self)->bool
aiohttp.streams.StreamReader.on_eof(self,callback:Callable[[],None])->None
aiohttp.streams.StreamReader.read(self,n:int=-1)->bytes
aiohttp.streams.StreamReader.read_nowait(self,n:int=-1)->bytes
aiohttp.streams.StreamReader.readany(self)->bytes
aiohttp.streams.StreamReader.readchunk(self)->Tuple[bytes, bool]
aiohttp.streams.StreamReader.readexactly(self,n:int)->bytes
aiohttp.streams.StreamReader.readline(self)->bytes
aiohttp.streams.StreamReader.readuntil(self,separator:bytes=b'\n')->bytes
aiohttp.streams.StreamReader.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.streams.StreamReader.unread_data(self,data:bytes)->None
aiohttp.streams.StreamReader.wait_eof(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/__init__.py----------------------------------------
aiohttp.__init__.__dir__()->Tuple[str, ...]
aiohttp.__init__.__getattr__(name:str)->object


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/http_websocket.py----------------------------------------
A:aiohttp.http_websocket.WS_CLOSED_MESSAGE->WSMessage(WSMsgType.CLOSED, None, None)
A:aiohttp.http_websocket.WS_CLOSING_MESSAGE->WSMessage(WSMsgType.CLOSING, None, None)
A:aiohttp.http_websocket._XOR_TABLE->_xor_table()
A:aiohttp.http_websocket.data[::4]->data[::4].translate(a).translate(a)
A:aiohttp.http_websocket.data[1::4]->data[1::4].translate(b).translate(b)
A:aiohttp.http_websocket.data[2::4]->data[2::4].translate(c).translate(c)
A:aiohttp.http_websocket.data[3::4]->data[3::4].translate(d).translate(d)
A:aiohttp.http_websocket.defext->ext.group(1)
A:aiohttp.http_websocket.match->_WS_EXT_RE.match(defext)
A:aiohttp.http_websocket.compress->int(match.group(6))
A:aiohttp.http_websocket.self._partial->bytearray()
A:aiohttp.http_websocket.self._frame_payload->bytearray()
A:aiohttp.http_websocket.self._decompressobj->ZLibDecompressor(suppress_deflate_header=True)
A:aiohttp.http_websocket.close_message->payload[2:].decode('utf-8')
A:aiohttp.http_websocket.msg->WSMessage(WSMsgType.CLOSE, 0, '')
A:aiohttp.http_websocket.payload_merged->bytes(self._partial)
A:aiohttp.http_websocket.left->len(self._decompressobj.unconsumed_tail)
A:aiohttp.http_websocket.text->bytes(self._partial).decode('utf-8')
A:aiohttp.http_websocket.buf_length->len(buf)
A:aiohttp.http_websocket.self._frame_fin->bool(fin)
A:aiohttp.http_websocket.self._has_mask->bool(has_mask)
A:aiohttp.http_websocket.self.get_random_bits->partial(random.getrandbits, 32)
A:aiohttp.http_websocket.compressobj->self._make_compress_obj(compress)
A:aiohttp.http_websocket.self._compressobj->self._make_compress_obj(self.compress)
A:aiohttp.http_websocket.msg_length->len(message)
A:aiohttp.http_websocket.header->PACK_LEN3(128 | rsv | opcode, 127 | mask_bit, msg_length)
A:aiohttp.http_websocket.mask->PACK_RANDBITS(self.get_random_bits())
A:aiohttp.http_websocket.message->message.encode('utf-8').encode('utf-8')
aiohttp.http_websocket.WSCloseCode(IntEnum)
aiohttp.http_websocket.WSHandshakeError(Exception)
aiohttp.http_websocket.WSMessage(NamedTuple)
aiohttp.http_websocket.WSMessage.json(self,*,loads:Callable[[Any],Any]=json.loads)->Any
aiohttp.http_websocket.WSMsgType(IntEnum)
aiohttp.http_websocket.WSParserState(IntEnum)
aiohttp.http_websocket.WebSocketError(self,code:int,message:str)
aiohttp.http_websocket.WebSocketError.__init__(self,code:int,message:str)
aiohttp.http_websocket.WebSocketError.__str__(self)->str
aiohttp.http_websocket.WebSocketReader(self,queue:DataQueue[WSMessage],max_msg_size:int,compress:bool=True)
aiohttp.http_websocket.WebSocketReader.__init__(self,queue:DataQueue[WSMessage],max_msg_size:int,compress:bool=True)
aiohttp.http_websocket.WebSocketReader._feed_data(self,data:bytes)->Tuple[bool, bytes]
aiohttp.http_websocket.WebSocketReader.feed_data(self,data:bytes)->Tuple[bool, bytes]
aiohttp.http_websocket.WebSocketReader.feed_eof(self)->None
aiohttp.http_websocket.WebSocketReader.parse_frame(self,buf:bytes)->List[Tuple[bool, Optional[int], bytearray, Optional[bool]]]
aiohttp.http_websocket.WebSocketWriter(self,protocol:BaseProtocol,transport:asyncio.Transport,*,use_mask:bool=False,limit:int=DEFAULT_LIMIT,random:random.Random=random.Random(),compress:int=0,notakeover:bool=False)
aiohttp.http_websocket.WebSocketWriter.__init__(self,protocol:BaseProtocol,transport:asyncio.Transport,*,use_mask:bool=False,limit:int=DEFAULT_LIMIT,random:random.Random=random.Random(),compress:int=0,notakeover:bool=False)
aiohttp.http_websocket.WebSocketWriter._make_compress_obj(self,compress:int)->ZLibCompressor
aiohttp.http_websocket.WebSocketWriter._send_frame(self,message:bytes,opcode:int,compress:Optional[int]=None)->None
aiohttp.http_websocket.WebSocketWriter._write(self,data:bytes)->None
aiohttp.http_websocket.WebSocketWriter.close(self,code:int=1000,message:Union[bytes,str]=b'')->None
aiohttp.http_websocket.WebSocketWriter.ping(self,message:Union[bytes,str]=b'')->None
aiohttp.http_websocket.WebSocketWriter.pong(self,message:Union[bytes,str]=b'')->None
aiohttp.http_websocket.WebSocketWriter.send(self,message:Union[str,bytes],binary:bool=False,compress:Optional[int]=None)->None
aiohttp.http_websocket._websocket_mask_python(mask:bytes,data:bytearray)->None
aiohttp.http_websocket._xor_table()->List[bytes]
aiohttp.http_websocket.ws_ext_gen(compress:int=15,isserver:bool=False,server_notakeover:bool=False)->str
aiohttp.http_websocket.ws_ext_parse(extstr:Optional[str],isserver:bool=False)->Tuple[int, bool]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_middlewares.py----------------------------------------
A:aiohttp.web_middlewares._Func->TypeVar('_Func')
A:aiohttp.web_middlewares.alt_request->request.clone(rel_url=path)
A:aiohttp.web_middlewares.(path, query)->request.raw_path.split('?', 1)
A:aiohttp.web_middlewares.merged_slashes->re.sub('//+', '/', path)
A:aiohttp.web_middlewares.path->re.sub('^//+', '/', path)
aiohttp.web_middlewares._check_request_resolves(request:Request,path:str)->Tuple[bool, Request]
aiohttp.web_middlewares._fix_request_current_app(app:'Application')->Middleware
aiohttp.web_middlewares.middleware(f:_Func)->_Func
aiohttp.web_middlewares.normalize_path_middleware(*,append_slash:bool=True,remove_slash:bool=False,merge_slashes:bool=True,redirect_class:Type[HTTPMove]=HTTPPermanentRedirect)->Middleware


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/multipart.py----------------------------------------
A:aiohttp.multipart.Self->TypeVar('Self', bound='BodyPartReader')
A:aiohttp.multipart.(disptype, *parts)->header.split(';')
A:aiohttp.multipart.item->parts.pop(0)
A:aiohttp.multipart.(key, value)->parts.pop(0).split('=', 1)
A:aiohttp.multipart.key->key.lower().strip().lower().strip()
A:aiohttp.multipart.value->''.join(parts)
A:aiohttp.multipart.(encoding, _, value)->''.join(parts).split("'", 2)
A:aiohttp.multipart.fnparams->sorted(((key, value) for (key, value) in params.items() if key.startswith(name_suf)))
A:aiohttp.multipart.(_, tail)->key.lower().strip().lower().strip().split('*', 1)
A:aiohttp.multipart.data->urlencode(obj, doseq=True)
A:aiohttp.multipart.encoding->get_payload(obj, headers=headers).headers.get(CONTENT_ENCODING, '').lower()
A:aiohttp.multipart.stripped_chunk->b''.join(chunk.split())
A:aiohttp.multipart.chunk_size->min(size, self._length - self._read_bytes)
A:aiohttp.multipart.idx->window.find(sub, max(0, len(self._prev_chunk) - len(sub)))
A:aiohttp.multipart.line->self._unread.popleft()
A:aiohttp.multipart.sline->self._unread.popleft().rstrip(b'\r\n')
A:aiohttp.multipart.real_encoding->self.get_charset(default='utf-8')
A:aiohttp.multipart.decoded_data->urlencode(obj, doseq=True).rstrip().decode(real_encoding)
A:aiohttp.multipart.ctype->CIMultiDict().get(CONTENT_TYPE, '')
A:aiohttp.multipart.mimetype->parse_mimetype(ctype)
A:aiohttp.multipart.(_, params)->parse_content_disposition(part.headers.get(CONTENT_DISPOSITION))
A:aiohttp.multipart.self._mimetype->parse_mimetype(headers[CONTENT_TYPE])
A:aiohttp.multipart.self._boundary->boundary.encode('ascii')
A:aiohttp.multipart.obj->list(obj.items())
A:aiohttp.multipart.self._default_charset->charset.strip().decode()
A:aiohttp.multipart.chunk->self._compress.flush()
A:aiohttp.multipart.parser->HeadersParser()
A:aiohttp.multipart.(headers, raw_headers)->HeadersParser().parse_headers(lines)
A:aiohttp.multipart._valid_tchar_regex->re.compile(b"\\A[!#$%&'*+\\-.^_`|~\\w]+\\Z")
A:aiohttp.multipart._invalid_qdtext_char_regex->re.compile(b'[\\x00-\\x08\\x0A-\\x1F\\x7F]')
A:aiohttp.multipart.quoted_value_content->quoted_value_content.replace(b'"', b'\\"').replace(b'"', b'\\"')
A:aiohttp.multipart.headers->CIMultiDict()
A:aiohttp.multipart.payload->get_payload(obj, headers=headers)
A:aiohttp.multipart.te_encoding->get_payload(obj, headers=headers).headers.get(CONTENT_TRANSFER_ENCODING, '').lower()
A:aiohttp.multipart.payload.headers[CONTENT_LENGTH]->str(size)
A:aiohttp.multipart.w->MultipartPayloadWriter(writer)
A:aiohttp.multipart.self._encoding_buffer->bytearray()
A:aiohttp.multipart.self._compress->ZLibCompressor(encoding=encoding, suppress_deflate_header=True, strategy=strategy)
A:aiohttp.multipart.(div, mod)->divmod(len(buf), 3)
A:aiohttp.multipart.b64chunk->base64.b64encode(enc_chunk)
aiohttp.BadContentDispositionHeader(RuntimeWarning)
aiohttp.BadContentDispositionParam(RuntimeWarning)
aiohttp.BodyPartReader(self,boundary:bytes,headers:'CIMultiDictProxy[str]',content:StreamReader,*,subtype:str='mixed',default_charset:Optional[str]=None)
aiohttp.BodyPartReader.__aiter__(self:Self)->Self
aiohttp.BodyPartReader.__anext__(self)->bytes
aiohttp.BodyPartReader._decode_content(self,data:bytes)->bytes
aiohttp.BodyPartReader._decode_content_transfer(self,data:bytes)->bytes
aiohttp.BodyPartReader._read_chunk_from_length(self,size:int)->bytes
aiohttp.BodyPartReader._read_chunk_from_stream(self,size:int)->bytes
aiohttp.BodyPartReader.at_eof(self)->bool
aiohttp.BodyPartReader.decode(self,data:bytes)->bytes
aiohttp.BodyPartReader.filename(self)->Optional[str]
aiohttp.BodyPartReader.form(self,*,encoding:Optional[str]=None)->List[Tuple[str, str]]
aiohttp.BodyPartReader.get_charset(self,default:str)->str
aiohttp.BodyPartReader.json(self,*,encoding:Optional[str]=None)->Optional[Dict[str, Any]]
aiohttp.BodyPartReader.name(self)->Optional[str]
aiohttp.BodyPartReader.next(self)->Optional[bytes]
aiohttp.BodyPartReader.read(self,*,decode:bool=False)->bytes
aiohttp.BodyPartReader.read_chunk(self,size:int=chunk_size)->bytes
aiohttp.BodyPartReader.readline(self)->bytes
aiohttp.BodyPartReader.release(self)->None
aiohttp.BodyPartReader.text(self,*,encoding:Optional[str]=None)->str
aiohttp.BodyPartReaderPayload(self,value:BodyPartReader,*args:Any,**kwargs:Any)
aiohttp.BodyPartReaderPayload.write(self,writer:Any)->None
aiohttp.MultipartReader(self,headers:Mapping[str,str],content:StreamReader)
aiohttp.MultipartReader.__aiter__(self:Self)->Self
aiohttp.MultipartReader.__anext__(self)->Optional[Union['MultipartReader', BodyPartReader]]
aiohttp.MultipartReader._get_boundary(self)->str
aiohttp.MultipartReader._get_part_reader(self,headers:'CIMultiDictProxy[str]')->Union['MultipartReader', BodyPartReader]
aiohttp.MultipartReader._maybe_release_last_part(self)->None
aiohttp.MultipartReader._read_boundary(self)->None
aiohttp.MultipartReader._read_headers(self)->'CIMultiDictProxy[str]'
aiohttp.MultipartReader._read_until_first_boundary(self)->None
aiohttp.MultipartReader._readline(self)->bytes
aiohttp.MultipartReader.at_eof(self)->bool
aiohttp.MultipartReader.fetch_next_part(self)->Union['MultipartReader', BodyPartReader]
aiohttp.MultipartReader.from_response(cls,response:'ClientResponse')->MultipartResponseWrapper
aiohttp.MultipartReader.next(self)->Optional[Union['MultipartReader', BodyPartReader]]
aiohttp.MultipartReader.release(self)->None
aiohttp.MultipartWriter(self,subtype:str='mixed',boundary:Optional[str]=None)
aiohttp.MultipartWriter.__bool__(self)->bool
aiohttp.MultipartWriter.__enter__(self)->'MultipartWriter'
aiohttp.MultipartWriter.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.MultipartWriter.__iter__(self)->Iterator[_Part]
aiohttp.MultipartWriter.__len__(self)->int
aiohttp.MultipartWriter._boundary_value(self)->str
aiohttp.MultipartWriter.append(self,obj:Any,headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.MultipartWriter.append_form(self,obj:Union[Sequence[Tuple[str,str]],Mapping[str,str]],headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.MultipartWriter.append_json(self,obj:Any,headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.MultipartWriter.append_payload(self,payload:Payload)->Payload
aiohttp.MultipartWriter.boundary(self)->str
aiohttp.MultipartWriter.size(self)->Optional[int]
aiohttp.MultipartWriter.write(self,writer:Any,close_boundary:bool=True)->None
aiohttp.content_disposition_filename(params:Mapping[str,str],name:str='filename')->Optional[str]
aiohttp.multipart.BadContentDispositionHeader(RuntimeWarning)
aiohttp.multipart.BadContentDispositionParam(RuntimeWarning)
aiohttp.multipart.BodyPartReader(self,boundary:bytes,headers:'CIMultiDictProxy[str]',content:StreamReader,*,subtype:str='mixed',default_charset:Optional[str]=None)
aiohttp.multipart.BodyPartReader.__aiter__(self:Self)->Self
aiohttp.multipart.BodyPartReader.__anext__(self)->bytes
aiohttp.multipart.BodyPartReader.__init__(self,boundary:bytes,headers:'CIMultiDictProxy[str]',content:StreamReader,*,subtype:str='mixed',default_charset:Optional[str]=None)
aiohttp.multipart.BodyPartReader._decode_content(self,data:bytes)->bytes
aiohttp.multipart.BodyPartReader._decode_content_transfer(self,data:bytes)->bytes
aiohttp.multipart.BodyPartReader._read_chunk_from_length(self,size:int)->bytes
aiohttp.multipart.BodyPartReader._read_chunk_from_stream(self,size:int)->bytes
aiohttp.multipart.BodyPartReader.at_eof(self)->bool
aiohttp.multipart.BodyPartReader.decode(self,data:bytes)->bytes
aiohttp.multipart.BodyPartReader.filename(self)->Optional[str]
aiohttp.multipart.BodyPartReader.form(self,*,encoding:Optional[str]=None)->List[Tuple[str, str]]
aiohttp.multipart.BodyPartReader.get_charset(self,default:str)->str
aiohttp.multipart.BodyPartReader.json(self,*,encoding:Optional[str]=None)->Optional[Dict[str, Any]]
aiohttp.multipart.BodyPartReader.name(self)->Optional[str]
aiohttp.multipart.BodyPartReader.next(self)->Optional[bytes]
aiohttp.multipart.BodyPartReader.read(self,*,decode:bool=False)->bytes
aiohttp.multipart.BodyPartReader.read_chunk(self,size:int=chunk_size)->bytes
aiohttp.multipart.BodyPartReader.readline(self)->bytes
aiohttp.multipart.BodyPartReader.release(self)->None
aiohttp.multipart.BodyPartReader.text(self,*,encoding:Optional[str]=None)->str
aiohttp.multipart.BodyPartReaderPayload(self,value:BodyPartReader,*args:Any,**kwargs:Any)
aiohttp.multipart.BodyPartReaderPayload.__init__(self,value:BodyPartReader,*args:Any,**kwargs:Any)
aiohttp.multipart.BodyPartReaderPayload.write(self,writer:Any)->None
aiohttp.multipart.MultipartPayloadWriter(self,writer:Any)
aiohttp.multipart.MultipartPayloadWriter.__init__(self,writer:Any)
aiohttp.multipart.MultipartPayloadWriter.enable_compression(self,encoding:str='deflate',strategy:int=zlib.Z_DEFAULT_STRATEGY)->None
aiohttp.multipart.MultipartPayloadWriter.enable_encoding(self,encoding:str)->None
aiohttp.multipart.MultipartPayloadWriter.write(self,chunk:bytes)->None
aiohttp.multipart.MultipartPayloadWriter.write_eof(self)->None
aiohttp.multipart.MultipartReader(self,headers:Mapping[str,str],content:StreamReader)
aiohttp.multipart.MultipartReader.__aiter__(self:Self)->Self
aiohttp.multipart.MultipartReader.__anext__(self)->Optional[Union['MultipartReader', BodyPartReader]]
aiohttp.multipart.MultipartReader.__init__(self,headers:Mapping[str,str],content:StreamReader)
aiohttp.multipart.MultipartReader._get_boundary(self)->str
aiohttp.multipart.MultipartReader._get_part_reader(self,headers:'CIMultiDictProxy[str]')->Union['MultipartReader', BodyPartReader]
aiohttp.multipart.MultipartReader._maybe_release_last_part(self)->None
aiohttp.multipart.MultipartReader._read_boundary(self)->None
aiohttp.multipart.MultipartReader._read_headers(self)->'CIMultiDictProxy[str]'
aiohttp.multipart.MultipartReader._read_until_first_boundary(self)->None
aiohttp.multipart.MultipartReader._readline(self)->bytes
aiohttp.multipart.MultipartReader.at_eof(self)->bool
aiohttp.multipart.MultipartReader.fetch_next_part(self)->Union['MultipartReader', BodyPartReader]
aiohttp.multipart.MultipartReader.from_response(cls,response:'ClientResponse')->MultipartResponseWrapper
aiohttp.multipart.MultipartReader.next(self)->Optional[Union['MultipartReader', BodyPartReader]]
aiohttp.multipart.MultipartReader.release(self)->None
aiohttp.multipart.MultipartResponseWrapper(self,resp:'ClientResponse',stream:'MultipartReader')
aiohttp.multipart.MultipartResponseWrapper.__aiter__(self)->'MultipartResponseWrapper'
aiohttp.multipart.MultipartResponseWrapper.__anext__(self)->Union['MultipartReader', 'BodyPartReader']
aiohttp.multipart.MultipartResponseWrapper.__init__(self,resp:'ClientResponse',stream:'MultipartReader')
aiohttp.multipart.MultipartResponseWrapper.at_eof(self)->bool
aiohttp.multipart.MultipartResponseWrapper.next(self)->Optional[Union['MultipartReader', 'BodyPartReader']]
aiohttp.multipart.MultipartResponseWrapper.release(self)->None
aiohttp.multipart.MultipartWriter(self,subtype:str='mixed',boundary:Optional[str]=None)
aiohttp.multipart.MultipartWriter.__bool__(self)->bool
aiohttp.multipart.MultipartWriter.__enter__(self)->'MultipartWriter'
aiohttp.multipart.MultipartWriter.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.multipart.MultipartWriter.__init__(self,subtype:str='mixed',boundary:Optional[str]=None)
aiohttp.multipart.MultipartWriter.__iter__(self)->Iterator[_Part]
aiohttp.multipart.MultipartWriter.__len__(self)->int
aiohttp.multipart.MultipartWriter._boundary_value(self)->str
aiohttp.multipart.MultipartWriter.append(self,obj:Any,headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.multipart.MultipartWriter.append_form(self,obj:Union[Sequence[Tuple[str,str]],Mapping[str,str]],headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.multipart.MultipartWriter.append_json(self,obj:Any,headers:Optional[Mapping[str,str]]=None)->Payload
aiohttp.multipart.MultipartWriter.append_payload(self,payload:Payload)->Payload
aiohttp.multipart.MultipartWriter.boundary(self)->str
aiohttp.multipart.MultipartWriter.size(self)->Optional[int]
aiohttp.multipart.MultipartWriter.write(self,writer:Any,close_boundary:bool=True)->None
aiohttp.multipart.content_disposition_filename(params:Mapping[str,str],name:str='filename')->Optional[str]
aiohttp.multipart.parse_content_disposition(header:Optional[str])->Tuple[Optional[str], Dict[str, str]]
aiohttp.parse_content_disposition(header:Optional[str])->Tuple[Optional[str], Dict[str, str]]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/payload_streamer.py----------------------------------------
A:aiohttp.payload_streamer.self.coro->types.coroutine(coro)
aiohttp.payload_streamer.StreamPayload(self,value:Any,*args:Any,**kwargs:Any)
aiohttp.payload_streamer.StreamPayload.__init__(self,value:Any,*args:Any,**kwargs:Any)
aiohttp.payload_streamer.StreamPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload_streamer.StreamWrapperPayload(Payload)
aiohttp.payload_streamer.StreamWrapperPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload_streamer._stream_wrapper(self,coro:Callable[...,Awaitable[None]],args:Tuple[Any,...],kwargs:Dict[str,Any])
aiohttp.payload_streamer._stream_wrapper.__init__(self,coro:Callable[...,Awaitable[None]],args:Tuple[Any,...],kwargs:Dict[str,Any])
aiohttp.payload_streamer.streamer(self,coro:Callable[...,Awaitable[None]])
aiohttp.payload_streamer.streamer.__init__(self,coro:Callable[...,Awaitable[None]])
aiohttp.streamer(self,coro:Callable[...,Awaitable[None]])


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/hdrs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web.py----------------------------------------
A:aiohttp.web.app->func(extra_argv)
A:aiohttp.web.runner->AppRunner(app, handle_signals=handle_signals, access_log_class=access_log_class, access_log_format=access_log_format, access_log=access_log, keepalive_timeout=keepalive_timeout, shutdown_timeout=shutdown_timeout, handler_cancellation=handler_cancellation)
A:aiohttp.web.names->sorted((str(s.name) for s in runner.sites))
A:aiohttp.web.loop->asyncio.new_event_loop()
A:aiohttp.web.main_task->asyncio.new_event_loop().create_task(_run_app(app, host=host, port=port, path=path, sock=sock, shutdown_timeout=shutdown_timeout, keepalive_timeout=keepalive_timeout, ssl_context=ssl_context, print=print, backlog=backlog, access_log_class=access_log_class, access_log_format=access_log_format, access_log=access_log, handle_signals=handle_signals, reuse_address=reuse_address, reuse_port=reuse_port, handler_cancellation=handler_cancellation))
A:aiohttp.web.arg_parser->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web')
A:aiohttp.web.(args, extra_argv)->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web').parse_known_args(argv)
A:aiohttp.web.(mod_str, _, func_str)->args.entry_func.partition(':')
A:aiohttp.web.module->import_module(mod_str)
A:aiohttp.web.func->getattr(module, func_str)
aiohttp.web._cancel_tasks(to_cancel:Set['asyncio.Task[Any]'],loop:asyncio.AbstractEventLoop)->None
aiohttp.web._run_app(app:Union[Application,Awaitable[Application]],*,host:Optional[Union[str,HostSequence]]=None,port:Optional[int]=None,path:Union[PathLike,TypingIterable[PathLike],None]=None,sock:Optional[Union[socket.socket,TypingIterable[socket.socket]]]=None,shutdown_timeout:float=60.0,keepalive_timeout:float=75.0,ssl_context:Optional[SSLContext]=None,print:Optional[Callable[...,None]]=print,backlog:int=128,access_log_class:Type[AbstractAccessLogger]=AccessLogger,access_log_format:str=AccessLogger.LOG_FORMAT,access_log:Optional[logging.Logger]=access_logger,handle_signals:bool=True,reuse_address:Optional[bool]=None,reuse_port:Optional[bool]=None,handler_cancellation:bool=False)->None
aiohttp.web.main(argv:List[str])->None
aiohttp.web.run_app(app:Union[Application,Awaitable[Application]],*,host:Optional[Union[str,HostSequence]]=None,port:Optional[int]=None,path:Union[PathLike,TypingIterable[PathLike],None]=None,sock:Optional[Union[socket.socket,TypingIterable[socket.socket]]]=None,shutdown_timeout:float=60.0,keepalive_timeout:float=75.0,ssl_context:Optional[SSLContext]=None,print:Optional[Callable[...,None]]=print,backlog:int=128,access_log_class:Type[AbstractAccessLogger]=AccessLogger,access_log_format:str=AccessLogger.LOG_FORMAT,access_log:Optional[logging.Logger]=access_logger,handle_signals:bool=True,reuse_address:Optional[bool]=None,reuse_port:Optional[bool]=None,handler_cancellation:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/client_proto.py----------------------------------------
A:aiohttp.client_proto.uncompleted->self._parser.feed_eof()
A:aiohttp.client_proto.reraised_exc->ServerDisconnectedError(uncompleted)
A:aiohttp.client_proto.self._parser->HttpResponseParser(self, self._loop, read_bufsize, timer=timer, payload_exception=ClientPayloadError, response_with_body=not skip_payload, read_until_eof=read_until_eof, auto_decompress=auto_decompress, max_line_size=max_line_size, max_field_size=max_field_size)
A:aiohttp.client_proto.self._read_timeout_handle->self._loop.call_later(timeout, self._on_read_timeout)
A:aiohttp.client_proto.exc->SocketTimeoutError('Timeout on reading data from socket')
A:aiohttp.client_proto.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.client_proto.(messages, upgraded, tail)->self._parser.feed_data(data)
aiohttp.client_proto.ResponseHandler(self,loop:asyncio.AbstractEventLoop)
aiohttp.client_proto.ResponseHandler.__init__(self,loop:asyncio.AbstractEventLoop)
aiohttp.client_proto.ResponseHandler._drop_timeout(self)->None
aiohttp.client_proto.ResponseHandler._on_read_timeout(self)->None
aiohttp.client_proto.ResponseHandler._reschedule_timeout(self)->None
aiohttp.client_proto.ResponseHandler.close(self)->None
aiohttp.client_proto.ResponseHandler.connection_lost(self,exc:Optional[BaseException])->None
aiohttp.client_proto.ResponseHandler.data_received(self,data:bytes)->None
aiohttp.client_proto.ResponseHandler.eof_received(self)->None
aiohttp.client_proto.ResponseHandler.force_close(self)->None
aiohttp.client_proto.ResponseHandler.is_connected(self)->bool
aiohttp.client_proto.ResponseHandler.pause_reading(self)->None
aiohttp.client_proto.ResponseHandler.read_timeout(self)->Optional[float]
aiohttp.client_proto.ResponseHandler.read_timeout(self,read_timeout:Optional[float])->None
aiohttp.client_proto.ResponseHandler.resume_reading(self)->None
aiohttp.client_proto.ResponseHandler.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.client_proto.ResponseHandler.set_parser(self,parser:Any,payload:Any)->None
aiohttp.client_proto.ResponseHandler.set_response_params(self,*,timer:Optional[BaseTimerContext]=None,skip_payload:bool=False,read_until_eof:bool=False,auto_decompress:bool=True,read_timeout:Optional[float]=None,read_bufsize:int=2**16,timeout_ceil_threshold:float=5,max_line_size:int=8190,max_field_size:int=8190)->None
aiohttp.client_proto.ResponseHandler.should_close(self)->bool
aiohttp.client_proto.ResponseHandler.start_timeout(self)->None
aiohttp.client_proto.ResponseHandler.upgraded(self)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/helpers.py----------------------------------------
A:aiohttp.helpers._T->TypeVar('_T')
A:aiohttp.helpers._S->TypeVar('_S')
A:aiohttp.helpers._SENTINEL->enum.Enum('_SENTINEL', 'sentinel')
A:aiohttp.helpers.NO_EXTENSIONS->bool(os.environ.get('AIOHTTP_NO_EXTENSIONS'))
A:aiohttp.helpers.(auth_type, encoded_credentials)->auth_header.split(' ', 1)
A:aiohttp.helpers.decoded->base64.b64decode(encoded_credentials.encode('ascii'), validate=True).decode(encoding)
A:aiohttp.helpers.(username, password)->base64.b64decode(encoded_credentials.encode('ascii'), validate=True).decode(encoding).split(':', 1)
A:aiohttp.helpers.creds->f'{self.login}:{self.password}'.encode(self.encoding)
A:aiohttp.helpers.auth->basicauth_from_netrc(netrc_obj, proxy.host)
A:aiohttp.helpers.netrc_env->os.environ.get('NETRC')
A:aiohttp.helpers.netrc_path->Path(netrc_env)
A:aiohttp.helpers.home_dir->pathlib.Path.home()
A:aiohttp.helpers.netrc_exists->Path(netrc_env).is_file()
A:aiohttp.helpers.auth_from_netrc->netrc_from_env().authenticators(host)
A:aiohttp.helpers.netrc_obj->netrc_from_env()
A:aiohttp.helpers.ret[proto]->ProxyInfo(proxy, auth)
A:aiohttp.helpers.proxies_in_env->proxies_from_env()
A:aiohttp.helpers.parts->mimetype.split(';')
A:aiohttp.helpers.(key, _, value)->item.partition('=')
A:aiohttp.helpers.fulltype->parts[0].strip().lower()
A:aiohttp.helpers.(mtype, _, stype)->parts[0].strip().lower().partition('/')
A:aiohttp.helpers.(stype, _, suffix)->stype.partition('+')
A:aiohttp.helpers.name->getattr(obj, 'name', None)
A:aiohttp.helpers.not_qtext_re->re.compile('[^\\041\\043-\\133\\135-\\176]')
A:aiohttp.helpers.qval->self.wrapped(inst).replace('\\', '\\\\').replace('"', '\\"')
A:aiohttp.helpers.sparams->'; '.join(('='.join(pair) for pair in lparams))
A:aiohttp.helpers.value->'; '.join((value, sparams))
A:aiohttp.helpers.val->self.wrapped(inst)
A:aiohttp.helpers._ipv4_regex->re.compile(_ipv4_pattern)
A:aiohttp.helpers._ipv6_regex->re.compile(_ipv6_pattern, flags=re.IGNORECASE)
A:aiohttp.helpers._ipv4_regexb->re.compile(_ipv4_pattern.encode('ascii'))
A:aiohttp.helpers._ipv6_regexb->re.compile(_ipv6_pattern.encode('ascii'), flags=re.IGNORECASE)
A:aiohttp.helpers.is_ipv4_address->functools.partial(_is_ip_address, _ipv4_regex, _ipv4_regexb)
A:aiohttp.helpers.is_ipv6_address->functools.partial(_is_ip_address, _ipv6_regex, _ipv6_regexb)
A:aiohttp.helpers.now->asyncio.get_running_loop().time()
A:aiohttp.helpers.(year, month, day, hh, mm, ss, wd, *tail)->time.gmtime(now)
A:aiohttp.helpers.ob->ref()
A:aiohttp.helpers.when->ceil(when)
A:aiohttp.helpers.timer->TimerContext(self._loop)
A:aiohttp.helpers.task->asyncio.current_task(loop=self._loop)
A:aiohttp.helpers.loop->asyncio.get_running_loop()
A:aiohttp.helpers.ATTRS->frozenset(['_content_type', '_content_dict', '_stored_content_type'])
A:aiohttp.helpers.msg->HeaderParser().parsestr('Content-Type: ' + raw)
A:aiohttp.helpers.self._content_type->HeaderParser().parsestr('Content-Type: ' + raw).get_content_type()
A:aiohttp.helpers.params->HeaderParser().parsestr('Content-Type: ' + raw).get_params(())
A:aiohttp.helpers.self._content_dict->dict(params[1:])
A:aiohttp.helpers.raw->self._headers.get(hdrs.CONTENT_TYPE)
A:aiohttp.helpers.content_length->self._headers.get(hdrs.CONTENT_LENGTH)
A:aiohttp.helpers._EXC_SENTINEL->BaseException()
A:aiohttp.helpers.frame->inspect.currentframe()
A:aiohttp.helpers.t_repr->repr(t)
A:aiohttp.helpers.self._maps->tuple(maps)
A:aiohttp.helpers.content->', '.join(map(repr, self._maps))
A:aiohttp.helpers._ETAGC_RE->re.compile(_ETAGC)
A:aiohttp.helpers.QUOTED_ETAG_RE->re.compile(_QUOTED_ETAG)
A:aiohttp.helpers.LIST_QUOTED_ETAG_RE->re.compile(f'({_QUOTED_ETAG})(?:\\s*,\\s*|$)|(.)')
A:aiohttp.helpers.timetuple->parsedate(date_str)
aiohttp.BasicAuth(cls,login:str,password:str='',encoding:str='latin1')
aiohttp.BasicAuth.decode(cls,auth_header:str,encoding:str='latin1')->'BasicAuth'
aiohttp.BasicAuth.encode(self)->str
aiohttp.BasicAuth.from_url(cls,url:URL,*,encoding:str='latin1')->Optional['BasicAuth']
aiohttp.ChainMapProxy(self,maps:Iterable[Mapping[Union[str,AppKey[Any]],Any]])
aiohttp.ChainMapProxy.__bool__(self)->bool
aiohttp.ChainMapProxy.__contains__(self,key:object)->bool
aiohttp.ChainMapProxy.__getitem__(self,key:Union[str,AppKey[_T]])->Any
aiohttp.ChainMapProxy.__init_subclass__(cls)->None
aiohttp.ChainMapProxy.__iter__(self)->Iterator[Union[str, AppKey[Any]]]
aiohttp.ChainMapProxy.__len__(self)->int
aiohttp.ChainMapProxy.__repr__(self)->str
aiohttp.ChainMapProxy.get(self,key:Union[str,AppKey[_T]],default:Any=None)->Any
aiohttp.ETag
aiohttp.helpers.AppKey(self,name:str,t:Optional[Type[_T]]=None)
aiohttp.helpers.AppKey.__init__(self,name:str,t:Optional[Type[_T]]=None)
aiohttp.helpers.AppKey.__lt__(self,other:object)->bool
aiohttp.helpers.AppKey.__repr__(self)->str
aiohttp.helpers.BaseTimerContext(ContextManager['BaseTimerContext'])
aiohttp.helpers.BaseTimerContext.assert_timeout(self)->None
aiohttp.helpers.BasicAuth(cls,login:str,password:str='',encoding:str='latin1')
aiohttp.helpers.BasicAuth.__new__(cls,login:str,password:str='',encoding:str='latin1')
aiohttp.helpers.BasicAuth.decode(cls,auth_header:str,encoding:str='latin1')->'BasicAuth'
aiohttp.helpers.BasicAuth.encode(self)->str
aiohttp.helpers.BasicAuth.from_url(cls,url:URL,*,encoding:str='latin1')->Optional['BasicAuth']
aiohttp.helpers.ChainMapProxy(self,maps:Iterable[Mapping[Union[str,AppKey[Any]],Any]])
aiohttp.helpers.ChainMapProxy.__bool__(self)->bool
aiohttp.helpers.ChainMapProxy.__contains__(self,key:object)->bool
aiohttp.helpers.ChainMapProxy.__getitem__(self,key:Union[str,AppKey[_T]])->Any
aiohttp.helpers.ChainMapProxy.__init__(self,maps:Iterable[Mapping[Union[str,AppKey[Any]],Any]])
aiohttp.helpers.ChainMapProxy.__init_subclass__(cls)->None
aiohttp.helpers.ChainMapProxy.__iter__(self)->Iterator[Union[str, AppKey[Any]]]
aiohttp.helpers.ChainMapProxy.__len__(self)->int
aiohttp.helpers.ChainMapProxy.__repr__(self)->str
aiohttp.helpers.ChainMapProxy.get(self,key:Union[str,AppKey[_T]],default:Any=None)->Any
aiohttp.helpers.ETag
aiohttp.helpers.ErrorableProtocol(Protocol)
aiohttp.helpers.ErrorableProtocol.set_exception(self,exc:BaseException,exc_cause:BaseException=...)->None
aiohttp.helpers.HeadersMixin
aiohttp.helpers.HeadersMixin._parse_content_type(self,raw:Optional[str])->None
aiohttp.helpers.HeadersMixin.charset(self)->Optional[str]
aiohttp.helpers.HeadersMixin.content_length(self)->Optional[int]
aiohttp.helpers.HeadersMixin.content_type(self)->str
aiohttp.helpers.MimeType
aiohttp.helpers.ProxyInfo
aiohttp.helpers.TimeoutHandle(self,loop:asyncio.AbstractEventLoop,timeout:Optional[float],ceil_threshold:float=5)
aiohttp.helpers.TimeoutHandle.__init__(self,loop:asyncio.AbstractEventLoop,timeout:Optional[float],ceil_threshold:float=5)
aiohttp.helpers.TimeoutHandle.close(self)->None
aiohttp.helpers.TimeoutHandle.register(self,callback:Callable[...,None],*args:Any,**kwargs:Any)->None
aiohttp.helpers.TimeoutHandle.start(self)->Optional[asyncio.TimerHandle]
aiohttp.helpers.TimeoutHandle.timer(self)->'BaseTimerContext'
aiohttp.helpers.TimerContext(self,loop:asyncio.AbstractEventLoop)
aiohttp.helpers.TimerContext.__enter__(self)->BaseTimerContext
aiohttp.helpers.TimerContext.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->Optional[bool]
aiohttp.helpers.TimerContext.__init__(self,loop:asyncio.AbstractEventLoop)
aiohttp.helpers.TimerContext.assert_timeout(self)->None
aiohttp.helpers.TimerContext.timeout(self)->None
aiohttp.helpers.TimerNoop(BaseTimerContext)
aiohttp.helpers.TimerNoop.__enter__(self)->BaseTimerContext
aiohttp.helpers.TimerNoop.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.helpers._TSelf(Protocol,Generic[_T])
aiohttp.helpers._is_ip_address(regex:Pattern[str],regexb:Pattern[bytes],host:Optional[Union[str,bytes]])->bool
aiohttp.helpers._weakref_handle(info:'Tuple[weakref.ref[object],str]')->None
aiohttp.helpers.basicauth_from_netrc(netrc_obj:Optional[netrc.netrc],host:str)->BasicAuth
aiohttp.helpers.calculate_timeout_when(loop_time:float,timeout:float,timeout_ceiling_threshold:float)->float
aiohttp.helpers.call_later(cb:Callable[[],Any],timeout:float,loop:asyncio.AbstractEventLoop,timeout_ceil_threshold:float=5)->Optional[asyncio.TimerHandle]
aiohttp.helpers.ceil_timeout(delay:Optional[float],ceil_threshold:float=5)->async_timeout.Timeout
aiohttp.helpers.content_disposition_header(disptype:str,quote_fields:bool=True,_charset:str='utf-8',**params:str)->str
aiohttp.helpers.get_env_proxy_for_url(url:URL)->Tuple[URL, Optional[BasicAuth]]
aiohttp.helpers.guess_filename(obj:Any,default:Optional[str]=None)->Optional[str]
aiohttp.helpers.is_ip_address(host:Optional[Union[str,bytes,bytearray,memoryview]])->bool
aiohttp.helpers.method_must_be_empty_body(method:str)->bool
aiohttp.helpers.must_be_empty_body(method:str,code:int)->bool
aiohttp.helpers.netrc_from_env()->Optional[netrc.netrc]
aiohttp.helpers.noop
aiohttp.helpers.noop.__await__(self)->Generator[None, None, None]
aiohttp.helpers.parse_http_date(date_str:Optional[str])->Optional[datetime.datetime]
aiohttp.helpers.parse_mimetype(mimetype:str)->MimeType
aiohttp.helpers.proxies_from_env()->Dict[str, ProxyInfo]
aiohttp.helpers.quoted_string(content:str)->str
aiohttp.helpers.reify(self,wrapped:Callable[...,_T])
aiohttp.helpers.reify.__get__(self,inst:_TSelf[_T],owner:Optional[Type[Any]]=None)->_T
aiohttp.helpers.reify.__init__(self,wrapped:Callable[...,_T])
aiohttp.helpers.reify.__set__(self,inst:_TSelf[_T],value:_T)->None
aiohttp.helpers.rfc822_formatted_time()->str
aiohttp.helpers.set_exception(fut:'asyncio.Future[_T]|ErrorableProtocol',exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.helpers.set_result(fut:'asyncio.Future[_T]',result:_T)->None
aiohttp.helpers.should_remove_content_length(method:str,code:int)->bool
aiohttp.helpers.status_code_must_be_empty_body(code:int)->bool
aiohttp.helpers.strip_auth_from_url(url:URL)->Tuple[URL, Optional[BasicAuth]]
aiohttp.helpers.validate_etag_value(value:str)->None
aiohttp.helpers.weakref_handle(ob:object,name:str,timeout:float,loop:asyncio.AbstractEventLoop,timeout_ceil_threshold:float=5)->Optional[asyncio.TimerHandle]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/client_exceptions.py----------------------------------------
A:aiohttp.client_exceptions.cert_errors->tuple()
A:aiohttp.client_exceptions.ssl_errors->tuple()
aiohttp.client_exceptions.ClientConnectionError(ClientError)
aiohttp.client_exceptions.ClientConnectorCertificateError(self,connection_key:ConnectionKey,certificate_error:Exception)
aiohttp.client_exceptions.ClientConnectorCertificateError.__init__(self,connection_key:ConnectionKey,certificate_error:Exception)
aiohttp.client_exceptions.ClientConnectorCertificateError.__str__(self)->str
aiohttp.client_exceptions.ClientConnectorCertificateError.certificate_error(self)->Exception
aiohttp.client_exceptions.ClientConnectorCertificateError.host(self)->str
aiohttp.client_exceptions.ClientConnectorCertificateError.port(self)->Optional[int]
aiohttp.client_exceptions.ClientConnectorCertificateError.ssl(self)->bool
aiohttp.client_exceptions.ClientConnectorError(self,connection_key:ConnectionKey,os_error:OSError)
aiohttp.client_exceptions.ClientConnectorError.__init__(self,connection_key:ConnectionKey,os_error:OSError)
aiohttp.client_exceptions.ClientConnectorError.__str__(self)->str
aiohttp.client_exceptions.ClientConnectorError.host(self)->str
aiohttp.client_exceptions.ClientConnectorError.os_error(self)->OSError
aiohttp.client_exceptions.ClientConnectorError.port(self)->Optional[int]
aiohttp.client_exceptions.ClientConnectorError.ssl(self)->Union[SSLContext, bool, 'Fingerprint']
aiohttp.client_exceptions.ClientConnectorSSLError(*ssl_error_bases)
aiohttp.client_exceptions.ClientError(Exception)
aiohttp.client_exceptions.ClientHttpProxyError(ClientResponseError)
aiohttp.client_exceptions.ClientOSError(ClientConnectionError,OSError)
aiohttp.client_exceptions.ClientPayloadError(ClientError)
aiohttp.client_exceptions.ClientProxyConnectionError(ClientConnectorError)
aiohttp.client_exceptions.ClientResponseError(self,request_info:RequestInfo,history:Tuple[ClientResponse,...],*,code:Optional[int]=None,status:Optional[int]=None,message:str='',headers:Optional[LooseHeaders]=None)
aiohttp.client_exceptions.ClientResponseError.__init__(self,request_info:RequestInfo,history:Tuple[ClientResponse,...],*,code:Optional[int]=None,status:Optional[int]=None,message:str='',headers:Optional[LooseHeaders]=None)
aiohttp.client_exceptions.ClientResponseError.__repr__(self)->str
aiohttp.client_exceptions.ClientResponseError.__str__(self)->str
aiohttp.client_exceptions.ClientResponseError.code(self)->int
aiohttp.client_exceptions.ClientResponseError.code(self,value:int)->None
aiohttp.client_exceptions.ClientSSLError(ClientConnectorError)
aiohttp.client_exceptions.ConnectionTimeoutError(ServerTimeoutError)
aiohttp.client_exceptions.ContentTypeError(ClientResponseError)
aiohttp.client_exceptions.InvalidURL(self,url:StrOrURL,description:Union[str,None]=None)
aiohttp.client_exceptions.InvalidURL.__init__(self,url:StrOrURL,description:Union[str,None]=None)
aiohttp.client_exceptions.InvalidURL.__repr__(self)->str
aiohttp.client_exceptions.InvalidURL.__str__(self)->str
aiohttp.client_exceptions.InvalidURL.description(self)->'str | None'
aiohttp.client_exceptions.InvalidURL.url(self)->StrOrURL
aiohttp.client_exceptions.InvalidUrlClientError(InvalidURL)
aiohttp.client_exceptions.InvalidUrlRedirectClientError(InvalidUrlClientError,RedirectClientError)
aiohttp.client_exceptions.NonHttpUrlClientError(ClientError)
aiohttp.client_exceptions.NonHttpUrlRedirectClientError(NonHttpUrlClientError,RedirectClientError)
aiohttp.client_exceptions.RedirectClientError(ClientError)
aiohttp.client_exceptions.ServerConnectionError(ClientConnectionError)
aiohttp.client_exceptions.ServerDisconnectedError(self,message:Union[RawResponseMessage,str,None]=None)
aiohttp.client_exceptions.ServerDisconnectedError.__init__(self,message:Union[RawResponseMessage,str,None]=None)
aiohttp.client_exceptions.ServerFingerprintMismatch(self,expected:bytes,got:bytes,host:str,port:int)
aiohttp.client_exceptions.ServerFingerprintMismatch.__init__(self,expected:bytes,got:bytes,host:str,port:int)
aiohttp.client_exceptions.ServerFingerprintMismatch.__repr__(self)->str
aiohttp.client_exceptions.ServerTimeoutError(ServerConnectionError,asyncio.TimeoutError)
aiohttp.client_exceptions.SocketTimeoutError(ServerTimeoutError)
aiohttp.client_exceptions.TooManyRedirects(ClientResponseError)
aiohttp.client_exceptions.UnixClientConnectorError(self,path:str,connection_key:ConnectionKey,os_error:OSError)
aiohttp.client_exceptions.UnixClientConnectorError.__init__(self,path:str,connection_key:ConnectionKey,os_error:OSError)
aiohttp.client_exceptions.UnixClientConnectorError.__str__(self)->str
aiohttp.client_exceptions.UnixClientConnectorError.path(self)->str
aiohttp.client_exceptions.WSServerHandshakeError(ClientResponseError)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/client.py----------------------------------------
A:aiohttp.client.IDEMPOTENT_METHODS->frozenset({'GET', 'HEAD', 'OPTIONS', 'TRACE', 'PUT', 'DELETE'})
A:aiohttp.client._RetType->TypeVar('_RetType')
A:aiohttp.client.ATTRS->frozenset(['_base_url', '_source_traceback', '_connector', 'requote_redirect_url', '_loop', '_cookie_jar', '_connector_owner', '_default_auth', '_version', '_json_serialize', '_requote_redirect_url', '_timeout', '_raise_for_status', '_auto_decompress', '_trust_env', '_default_headers', '_skip_auto_headers', '_request_class', '_response_class', '_ws_response_class', '_trace_configs', '_read_bufsize', '_max_line_size', '_max_field_size', '_resolve_charset'])
A:aiohttp.client.self._base_url->URL(base_url)
A:aiohttp.client.self._timeout->attr.evolve(self._timeout, connect=conn_timeout)
A:aiohttp.client.connector->TCPConnector(loop=loop, force_close=True)
A:aiohttp.client.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client.cookie_jar->CookieJar(loop=loop)
A:aiohttp.client.real_headers->CIMultiDict(headers)
A:aiohttp.client.self._skip_auto_headers->frozenset()
A:aiohttp.client.url->self._build_url(str_or_url)
A:aiohttp.client.ssl->_merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)
A:aiohttp.client.data->payload.JsonPayload(json, dumps=self._json_serialize)
A:aiohttp.client.headers->CIMultiDict(headers)
A:aiohttp.client.proxy_headers->self._prepare_headers(proxy_headers)
A:aiohttp.client.skip_headers->set(self._skip_auto_headers)
A:aiohttp.client.proxy->URL(proxy)
A:aiohttp.client.real_timeout->ClientTimeout(total=timeout)
A:aiohttp.client.tm->TimeoutHandle(self._loop, real_timeout.total, ceil_threshold=real_timeout.ceil_threshold)
A:aiohttp.client.handle->TimeoutHandle(self._loop, real_timeout.total, ceil_threshold=real_timeout.ceil_threshold).start()
A:aiohttp.client.timer->TimeoutHandle(self._loop, real_timeout.total, ceil_threshold=real_timeout.ceil_threshold).timer()
A:aiohttp.client.(url, auth_from_url)->strip_auth_from_url(url)
A:aiohttp.client.all_cookies->self._cookie_jar.filter_cookies(url)
A:aiohttp.client.tmp_cookie_jar->CookieJar()
A:aiohttp.client.req_cookies->CookieJar().filter_cookies(url)
A:aiohttp.client.(proxy, proxy_auth)->get_env_proxy_for_url(url)
A:aiohttp.client.req->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=all_cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer, session=self, ssl=ssl if ssl is not None else True, server_hostname=server_hostname, proxy_headers=proxy_headers, traces=traces, trust_env=self.trust_env)
A:aiohttp.client.parsed_redirect_url->self._build_url(str_or_url).join(parsed_redirect_url)
A:aiohttp.client.redirect_origin->self._build_url(str_or_url).join(parsed_redirect_url).origin()
A:aiohttp.client.resp._history->tuple(history)
A:aiohttp.client.sec_key->base64.b64encode(os.urandom(16))
A:aiohttp.client.real_headers[hdrs.SEC_WEBSOCKET_KEY]->base64.b64encode(os.urandom(16)).decode()
A:aiohttp.client.real_headers[hdrs.SEC_WEBSOCKET_PROTOCOL]->','.join(protocols)
A:aiohttp.client.extstr->ws_ext_gen(compress=compress)
A:aiohttp.client.r_key->resp.headers.get(hdrs.SEC_WEBSOCKET_ACCEPT, '')
A:aiohttp.client.match->base64.b64encode(hashlib.sha1(sec_key + WS_KEY).digest()).decode()
A:aiohttp.client.compress_hdrs->resp.headers.get(hdrs.SEC_WEBSOCKET_EXTENSIONS)
A:aiohttp.client.(compress, notakeover)->ws_ext_parse(compress_hdrs)
A:aiohttp.client.conn_proto.read_timeout->max(receive_timeout, conn_proto.read_timeout)
A:aiohttp.client.writer->WebSocketWriter(conn_proto, transport, use_mask=True, compress=compress, notakeover=notakeover)
A:aiohttp.client.result->CIMultiDict(self._default_headers)
A:aiohttp.client.ret->self._coro.__await__()
A:aiohttp.client.session->ClientSession(loop=loop, cookies=cookies, version=version, timeout=timeout, connector=connector, connector_owner=connector_owner)
aiohttp.ClientSession(self,base_url:Optional[StrOrURL]=None,*,connector:Optional[BaseConnector]=None,loop:Optional[asyncio.AbstractEventLoop]=None,cookies:Optional[LooseCookies]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,json_serialize:JSONEncoder=json.dumps,request_class:Type[ClientRequest]=ClientRequest,response_class:Type[ClientResponse]=ClientResponse,ws_response_class:Type[ClientWebSocketResponse]=ClientWebSocketResponse,version:HttpVersion=http.HttpVersion11,cookie_jar:Optional[AbstractCookieJar]=None,connector_owner:bool=True,raise_for_status:Union[bool,Callable[[ClientResponse],Awaitable[None]]]=False,read_timeout:Union[float,_SENTINEL]=sentinel,conn_timeout:Optional[float]=None,timeout:Union[object,ClientTimeout]=sentinel,auto_decompress:bool=True,trust_env:bool=False,requote_redirect_url:bool=True,trace_configs:Optional[List[TraceConfig]]=None,read_bufsize:int=2**16,max_line_size:int=8190,max_field_size:int=8190,fallback_charset_resolver:_CharsetResolver=lambdar,b:'utf-8')
aiohttp.ClientSession.__aenter__(self)->'ClientSession'
aiohttp.ClientSession.__aexit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.ClientSession.__del__(self,_warnings:Any=warnings)->None
aiohttp.ClientSession.__enter__(self)->None
aiohttp.ClientSession.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.ClientSession.__init_subclass__(cls:Type['ClientSession'])->None
aiohttp.ClientSession._build_url(self,str_or_url:StrOrURL)->URL
aiohttp.ClientSession._prepare_headers(self,headers:Optional[LooseHeaders])->'CIMultiDict[str]'
aiohttp.ClientSession._request(self,method:str,str_or_url:StrOrURL,*,params:Optional[Mapping[str,str]]=None,data:Any=None,json:Any=None,cookies:Optional[LooseCookies]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,allow_redirects:bool=True,max_redirects:int=10,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,raise_for_status:Union[None,bool,Callable[[ClientResponse],Awaitable[None]]]=None,read_until_eof:bool=True,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,timeout:Union[ClientTimeout,_SENTINEL]=sentinel,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,server_hostname:Optional[str]=None,proxy_headers:Optional[LooseHeaders]=None,trace_request_ctx:Optional[Mapping[str,str]]=None,read_bufsize:Optional[int]=None,auto_decompress:Optional[bool]=None,max_line_size:Optional[int]=None,max_field_size:Optional[int]=None)->ClientResponse
aiohttp.ClientSession._ws_connect(self,url:StrOrURL,*,method:str=hdrs.METH_GET,protocols:Iterable[str]=(),timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,auth:Optional[BasicAuth]=None,origin:Optional[str]=None,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,proxy_headers:Optional[LooseHeaders]=None,compress:int=0,max_msg_size:int=4*1024*1024)->ClientWebSocketResponse
aiohttp.ClientSession.auth(self)->Optional[BasicAuth]
aiohttp.ClientSession.auto_decompress(self)->bool
aiohttp.ClientSession.close(self)->None
aiohttp.ClientSession.closed(self)->bool
aiohttp.ClientSession.connector(self)->Optional[BaseConnector]
aiohttp.ClientSession.connector_owner(self)->bool
aiohttp.ClientSession.cookie_jar(self)->AbstractCookieJar
aiohttp.ClientSession.detach(self)->None
aiohttp.ClientSession.headers(self)->'CIMultiDict[str]'
aiohttp.ClientSession.json_serialize(self)->JSONEncoder
aiohttp.ClientSession.loop(self)->asyncio.AbstractEventLoop
aiohttp.ClientSession.raise_for_status(self)->Union[bool, Callable[[ClientResponse], Awaitable[None]]]
aiohttp.ClientSession.requote_redirect_url(self)->bool
aiohttp.ClientSession.requote_redirect_url(self,val:bool)->None
aiohttp.ClientSession.skip_auto_headers(self)->FrozenSet[istr]
aiohttp.ClientSession.timeout(self)->ClientTimeout
aiohttp.ClientSession.trace_configs(self)->List[TraceConfig]
aiohttp.ClientSession.trust_env(self)->bool
aiohttp.ClientSession.version(self)->Tuple[int, int]
aiohttp.ClientSession.ws_connect(self,url:StrOrURL,*,method:str=hdrs.METH_GET,protocols:Iterable[str]=(),timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,auth:Optional[BasicAuth]=None,origin:Optional[str]=None,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,proxy_headers:Optional[LooseHeaders]=None,compress:int=0,max_msg_size:int=4*1024*1024)->'_WSRequestContextManager'
aiohttp.ClientTimeout
aiohttp.client.ClientSession(self,base_url:Optional[StrOrURL]=None,*,connector:Optional[BaseConnector]=None,loop:Optional[asyncio.AbstractEventLoop]=None,cookies:Optional[LooseCookies]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,json_serialize:JSONEncoder=json.dumps,request_class:Type[ClientRequest]=ClientRequest,response_class:Type[ClientResponse]=ClientResponse,ws_response_class:Type[ClientWebSocketResponse]=ClientWebSocketResponse,version:HttpVersion=http.HttpVersion11,cookie_jar:Optional[AbstractCookieJar]=None,connector_owner:bool=True,raise_for_status:Union[bool,Callable[[ClientResponse],Awaitable[None]]]=False,read_timeout:Union[float,_SENTINEL]=sentinel,conn_timeout:Optional[float]=None,timeout:Union[object,ClientTimeout]=sentinel,auto_decompress:bool=True,trust_env:bool=False,requote_redirect_url:bool=True,trace_configs:Optional[List[TraceConfig]]=None,read_bufsize:int=2**16,max_line_size:int=8190,max_field_size:int=8190,fallback_charset_resolver:_CharsetResolver=lambdar,b:'utf-8')
aiohttp.client.ClientSession.__aenter__(self)->'ClientSession'
aiohttp.client.ClientSession.__aexit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.client.ClientSession.__del__(self,_warnings:Any=warnings)->None
aiohttp.client.ClientSession.__enter__(self)->None
aiohttp.client.ClientSession.__exit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.client.ClientSession.__init__(self,base_url:Optional[StrOrURL]=None,*,connector:Optional[BaseConnector]=None,loop:Optional[asyncio.AbstractEventLoop]=None,cookies:Optional[LooseCookies]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,json_serialize:JSONEncoder=json.dumps,request_class:Type[ClientRequest]=ClientRequest,response_class:Type[ClientResponse]=ClientResponse,ws_response_class:Type[ClientWebSocketResponse]=ClientWebSocketResponse,version:HttpVersion=http.HttpVersion11,cookie_jar:Optional[AbstractCookieJar]=None,connector_owner:bool=True,raise_for_status:Union[bool,Callable[[ClientResponse],Awaitable[None]]]=False,read_timeout:Union[float,_SENTINEL]=sentinel,conn_timeout:Optional[float]=None,timeout:Union[object,ClientTimeout]=sentinel,auto_decompress:bool=True,trust_env:bool=False,requote_redirect_url:bool=True,trace_configs:Optional[List[TraceConfig]]=None,read_bufsize:int=2**16,max_line_size:int=8190,max_field_size:int=8190,fallback_charset_resolver:_CharsetResolver=lambdar,b:'utf-8')
aiohttp.client.ClientSession.__init_subclass__(cls:Type['ClientSession'])->None
aiohttp.client.ClientSession._build_url(self,str_or_url:StrOrURL)->URL
aiohttp.client.ClientSession._prepare_headers(self,headers:Optional[LooseHeaders])->'CIMultiDict[str]'
aiohttp.client.ClientSession._request(self,method:str,str_or_url:StrOrURL,*,params:Optional[Mapping[str,str]]=None,data:Any=None,json:Any=None,cookies:Optional[LooseCookies]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,allow_redirects:bool=True,max_redirects:int=10,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,raise_for_status:Union[None,bool,Callable[[ClientResponse],Awaitable[None]]]=None,read_until_eof:bool=True,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,timeout:Union[ClientTimeout,_SENTINEL]=sentinel,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,server_hostname:Optional[str]=None,proxy_headers:Optional[LooseHeaders]=None,trace_request_ctx:Optional[Mapping[str,str]]=None,read_bufsize:Optional[int]=None,auto_decompress:Optional[bool]=None,max_line_size:Optional[int]=None,max_field_size:Optional[int]=None)->ClientResponse
aiohttp.client.ClientSession._ws_connect(self,url:StrOrURL,*,method:str=hdrs.METH_GET,protocols:Iterable[str]=(),timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,auth:Optional[BasicAuth]=None,origin:Optional[str]=None,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,proxy_headers:Optional[LooseHeaders]=None,compress:int=0,max_msg_size:int=4*1024*1024)->ClientWebSocketResponse
aiohttp.client.ClientSession.auth(self)->Optional[BasicAuth]
aiohttp.client.ClientSession.auto_decompress(self)->bool
aiohttp.client.ClientSession.close(self)->None
aiohttp.client.ClientSession.closed(self)->bool
aiohttp.client.ClientSession.connector(self)->Optional[BaseConnector]
aiohttp.client.ClientSession.connector_owner(self)->bool
aiohttp.client.ClientSession.cookie_jar(self)->AbstractCookieJar
aiohttp.client.ClientSession.detach(self)->None
aiohttp.client.ClientSession.headers(self)->'CIMultiDict[str]'
aiohttp.client.ClientSession.json_serialize(self)->JSONEncoder
aiohttp.client.ClientSession.loop(self)->asyncio.AbstractEventLoop
aiohttp.client.ClientSession.raise_for_status(self)->Union[bool, Callable[[ClientResponse], Awaitable[None]]]
aiohttp.client.ClientSession.requote_redirect_url(self)->bool
aiohttp.client.ClientSession.requote_redirect_url(self,val:bool)->None
aiohttp.client.ClientSession.skip_auto_headers(self)->FrozenSet[istr]
aiohttp.client.ClientSession.timeout(self)->ClientTimeout
aiohttp.client.ClientSession.trace_configs(self)->List[TraceConfig]
aiohttp.client.ClientSession.trust_env(self)->bool
aiohttp.client.ClientSession.version(self)->Tuple[int, int]
aiohttp.client.ClientSession.ws_connect(self,url:StrOrURL,*,method:str=hdrs.METH_GET,protocols:Iterable[str]=(),timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,auth:Optional[BasicAuth]=None,origin:Optional[str]=None,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,ssl:Union[SSLContext,bool,Fingerprint]=True,verify_ssl:Optional[bool]=None,fingerprint:Optional[bytes]=None,ssl_context:Optional[SSLContext]=None,proxy_headers:Optional[LooseHeaders]=None,compress:int=0,max_msg_size:int=4*1024*1024)->'_WSRequestContextManager'
aiohttp.client.ClientTimeout
aiohttp.client._BaseRequestContextManager(self,coro:Coroutine['asyncio.Future[Any]',None,_RetType])
aiohttp.client._BaseRequestContextManager.__aenter__(self)->_RetType
aiohttp.client._BaseRequestContextManager.__await__(self)->Generator[Any, None, _RetType]
aiohttp.client._BaseRequestContextManager.__init__(self,coro:Coroutine['asyncio.Future[Any]',None,_RetType])
aiohttp.client._BaseRequestContextManager.__iter__(self)->Generator[Any, None, _RetType]
aiohttp.client._BaseRequestContextManager.close(self)->None
aiohttp.client._BaseRequestContextManager.send(self,arg:None)->'asyncio.Future[Any]'
aiohttp.client._BaseRequestContextManager.throw(self,*args:Any,**kwargs:Any)->'asyncio.Future[Any]'
aiohttp.client._RequestContextManager(_BaseRequestContextManager[ClientResponse])
aiohttp.client._RequestContextManager.__aexit__(self,exc_type:Optional[Type[BaseException]],exc:Optional[BaseException],tb:Optional[TracebackType])->None
aiohttp.client._RequestOptions(TypedDict,total=False)
aiohttp.client._SessionRequestContextManager(self,coro:Coroutine['asyncio.Future[Any]',None,ClientResponse],session:ClientSession)
aiohttp.client._SessionRequestContextManager.__aenter__(self)->ClientResponse
aiohttp.client._SessionRequestContextManager.__aexit__(self,exc_type:Optional[Type[BaseException]],exc:Optional[BaseException],tb:Optional[TracebackType])->None
aiohttp.client._SessionRequestContextManager.__init__(self,coro:Coroutine['asyncio.Future[Any]',None,ClientResponse],session:ClientSession)
aiohttp.client._WSRequestContextManager(_BaseRequestContextManager[ClientWebSocketResponse])
aiohttp.client._WSRequestContextManager.__aexit__(self,exc_type:Optional[Type[BaseException]],exc:Optional[BaseException],tb:Optional[TracebackType])->None
aiohttp.client.request(method:str,url:StrOrURL,*,params:Optional[Mapping[str,str]]=None,data:Any=None,json:Any=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,allow_redirects:bool=True,max_redirects:int=10,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,raise_for_status:Optional[bool]=None,read_until_eof:bool=True,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,timeout:Union[ClientTimeout,object]=sentinel,cookies:Optional[LooseCookies]=None,version:HttpVersion=http.HttpVersion11,connector:Optional[BaseConnector]=None,read_bufsize:Optional[int]=None,loop:Optional[asyncio.AbstractEventLoop]=None,max_line_size:int=8190,max_field_size:int=8190)->_SessionRequestContextManager
aiohttp.request(method:str,url:StrOrURL,*,params:Optional[Mapping[str,str]]=None,data:Any=None,json:Any=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Optional[Iterable[str]]=None,auth:Optional[BasicAuth]=None,allow_redirects:bool=True,max_redirects:int=10,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,raise_for_status:Optional[bool]=None,read_until_eof:bool=True,proxy:Optional[StrOrURL]=None,proxy_auth:Optional[BasicAuth]=None,timeout:Union[ClientTimeout,object]=sentinel,cookies:Optional[LooseCookies]=None,version:HttpVersion=http.HttpVersion11,connector:Optional[BaseConnector]=None,read_bufsize:Optional[int]=None,loop:Optional[asyncio.AbstractEventLoop]=None,max_line_size:int=8190,max_field_size:int=8190)->_SessionRequestContextManager


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_app.py----------------------------------------
A:aiohttp.web_app._T->TypeVar('_T')
A:aiohttp.web_app._U->TypeVar('_U')
A:aiohttp.web_app._Resource->TypeVar('_Resource', bound=AbstractResource)
A:aiohttp.web_app.ATTRS->frozenset(['logger', '_debug', '_router', '_loop', '_handler_args', '_middlewares', '_middlewares_handlers', '_run_middlewares', '_state', '_frozen', '_pre_frozen', '_subapps', '_on_response_prepare', '_on_startup', '_on_shutdown', '_on_cleanup', '_client_max_size', '_cleanup_ctx'])
A:aiohttp.web_app.router->UrlDispatcher()
A:aiohttp.web_app.self._cleanup_ctx->CleanupContext()
A:aiohttp.web_app.loop->asyncio.get_event_loop()
A:aiohttp.web_app.self._debug->asyncio.get_event_loop().get_debug()
A:aiohttp.web_app.self._middlewares_handlers->tuple(self._prepare_middleware())
A:aiohttp.web_app.subsig->getattr(subapp, signame)
A:aiohttp.web_app.appsig->getattr(self, signame)
A:aiohttp.web_app.prefix->prefix.rstrip('/').rstrip('/')
A:aiohttp.web_app.factory->partial(MatchedSubAppResource, rule, subapp)
A:aiohttp.web_app.resource->resource_factory()
A:aiohttp.web_app.rule->Domain(domain)
A:aiohttp.web_app.debug->asyncio.get_event_loop().get_debug()
A:aiohttp.web_app.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web_app.handler->update_wrapper(partial(m, handler=handler), handler)
A:aiohttp.web_app.it->cb(app).__aiter__()
aiohttp.web_app.Application(self,*,logger:logging.Logger=web_logger,router:Optional[UrlDispatcher]=None,middlewares:Iterable[Middleware]=(),handler_args:Optional[Mapping[str,Any]]=None,client_max_size:int=1024**2,loop:Optional[asyncio.AbstractEventLoop]=None,debug:Any=...)
aiohttp.web_app.Application.__bool__(self)->bool
aiohttp.web_app.Application.__delitem__(self,key:Union[str,AppKey[_T]])->None
aiohttp.web_app.Application.__eq__(self,other:object)->bool
aiohttp.web_app.Application.__getitem__(self,key:Union[str,AppKey[_T]])->Any
aiohttp.web_app.Application.__init__(self,*,logger:logging.Logger=web_logger,router:Optional[UrlDispatcher]=None,middlewares:Iterable[Middleware]=(),handler_args:Optional[Mapping[str,Any]]=None,client_max_size:int=1024**2,loop:Optional[asyncio.AbstractEventLoop]=None,debug:Any=...)
aiohttp.web_app.Application.__init_subclass__(cls:Type['Application'])->None
aiohttp.web_app.Application.__iter__(self)->Iterator[Union[str, AppKey[Any]]]
aiohttp.web_app.Application.__len__(self)->int
aiohttp.web_app.Application.__repr__(self)->str
aiohttp.web_app.Application.__setitem__(self,key:Union[str,AppKey[_T]],value:Any)->None
aiohttp.web_app.Application._add_subapp(self,resource_factory:Callable[[],_Resource],subapp:'Application')->_Resource
aiohttp.web_app.Application._check_frozen(self)->None
aiohttp.web_app.Application._handle(self,request:Request)->StreamResponse
aiohttp.web_app.Application._make_handler(self,*,loop:Optional[asyncio.AbstractEventLoop]=None,access_log_class:Type[AbstractAccessLogger]=AccessLogger,**kwargs:Any)->Server
aiohttp.web_app.Application._make_request(self,message:RawRequestMessage,payload:StreamReader,protocol:RequestHandler,writer:AbstractStreamWriter,task:'asyncio.Task[None]',_cls:Type[Request]=Request)->Request
aiohttp.web_app.Application._prepare_middleware(self)->Iterator[Tuple[Middleware, bool]]
aiohttp.web_app.Application._reg_subapp_signals(self,subapp:'Application')->None
aiohttp.web_app.Application._set_loop(self,loop:Optional[asyncio.AbstractEventLoop])->None
aiohttp.web_app.Application.add_domain(self,domain:str,subapp:'Application')->MatchedSubAppResource
aiohttp.web_app.Application.add_routes(self,routes:Iterable[AbstractRouteDef])->List[AbstractRoute]
aiohttp.web_app.Application.add_subapp(self,prefix:str,subapp:'Application')->PrefixedSubAppResource
aiohttp.web_app.Application.cleanup(self)->None
aiohttp.web_app.Application.cleanup_ctx(self)->'CleanupContext'
aiohttp.web_app.Application.debug(self)->bool
aiohttp.web_app.Application.freeze(self)->None
aiohttp.web_app.Application.frozen(self)->bool
aiohttp.web_app.Application.get(self,key:Union[str,AppKey[_T]],default:Any=None)->Any
aiohttp.web_app.Application.loop(self)->asyncio.AbstractEventLoop
aiohttp.web_app.Application.make_handler(self,*,loop:Optional[asyncio.AbstractEventLoop]=None,access_log_class:Type[AbstractAccessLogger]=AccessLogger,**kwargs:Any)->Server
aiohttp.web_app.Application.middlewares(self)->_Middlewares
aiohttp.web_app.Application.on_cleanup(self)->_AppSignal
aiohttp.web_app.Application.on_response_prepare(self)->_RespPrepareSignal
aiohttp.web_app.Application.on_shutdown(self)->_AppSignal
aiohttp.web_app.Application.on_startup(self)->_AppSignal
aiohttp.web_app.Application.pre_freeze(self)->None
aiohttp.web_app.Application.pre_frozen(self)->bool
aiohttp.web_app.Application.router(self)->UrlDispatcher
aiohttp.web_app.Application.shutdown(self)->None
aiohttp.web_app.Application.startup(self)->None
aiohttp.web_app.CleanupContext(self)
aiohttp.web_app.CleanupContext.__init__(self)
aiohttp.web_app.CleanupContext._on_cleanup(self,app:Application)->None
aiohttp.web_app.CleanupContext._on_startup(self,app:Application)->None
aiohttp.web_app.CleanupError(RuntimeError)
aiohttp.web_app.CleanupError.exceptions(self)->List[BaseException]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/http_exceptions.py----------------------------------------
A:aiohttp.http_exceptions.msg->indent(self.message, '  ')
A:aiohttp.http_exceptions.line->repr(line)
aiohttp.http_exceptions.BadHttpMessage(self,message:str,*,headers:Optional[_CIMultiDict]=None)
aiohttp.http_exceptions.BadHttpMessage.__init__(self,message:str,*,headers:Optional[_CIMultiDict]=None)
aiohttp.http_exceptions.BadStatusLine(self,line:str='',error:Optional[str]=None)
aiohttp.http_exceptions.BadStatusLine.__init__(self,line:str='',error:Optional[str]=None)
aiohttp.http_exceptions.ContentEncodingError(PayloadEncodingError)
aiohttp.http_exceptions.ContentLengthError(PayloadEncodingError)
aiohttp.http_exceptions.HttpBadRequest(BadHttpMessage)
aiohttp.http_exceptions.HttpProcessingError(self,*,code:Optional[int]=None,message:str='',headers:Optional[_CIMultiDict]=None)
aiohttp.http_exceptions.HttpProcessingError.__init__(self,*,code:Optional[int]=None,message:str='',headers:Optional[_CIMultiDict]=None)
aiohttp.http_exceptions.HttpProcessingError.__repr__(self)->str
aiohttp.http_exceptions.HttpProcessingError.__str__(self)->str
aiohttp.http_exceptions.InvalidHeader(self,hdr:Union[bytes,str])
aiohttp.http_exceptions.InvalidHeader.__init__(self,hdr:Union[bytes,str])
aiohttp.http_exceptions.InvalidURLError(BadHttpMessage)
aiohttp.http_exceptions.LineTooLong(self,line:str,limit:str='Unknown',actual_size:str='Unknown')
aiohttp.http_exceptions.LineTooLong.__init__(self,line:str,limit:str='Unknown',actual_size:str='Unknown')
aiohttp.http_exceptions.PayloadEncodingError(BadHttpMessage)
aiohttp.http_exceptions.TransferEncodingError(PayloadEncodingError)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/cookiejar.py----------------------------------------
A:aiohttp.cookiejar.DATE_TOKENS_RE->re.compile('[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]*(?P<token>[\\x00-\\x08\\x0A-\\x1F\\d:a-zA-Z\\x7F-\\xFF]+)')
A:aiohttp.cookiejar.DATE_HMS_TIME_RE->re.compile('(\\d{1,2}):(\\d{1,2}):(\\d{1,2})')
A:aiohttp.cookiejar.DATE_DAY_OF_MONTH_RE->re.compile('(\\d{1,2})')
A:aiohttp.cookiejar.DATE_MONTH_RE->re.compile('(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)', re.I)
A:aiohttp.cookiejar.DATE_YEAR_RE->re.compile('(\\d{2,4})')
A:aiohttp.cookiejar.MAX_TIME->calendar.timegm((3000, 12, 31, 23, 59, 59, -1, -1, -1))
A:aiohttp.cookiejar.file_path->pathlib.Path(file_path)
A:aiohttp.cookiejar.self._cookies->pickle.load(f)
A:aiohttp.cookiejar.self._next_expiration->min(self._next_expiration, when)
A:aiohttp.cookiejar.now->time.time()
A:aiohttp.cookiejar.cookies->itertools.chain.from_iterable((self._cookies[p].values() for p in pairs))
A:aiohttp.cookiejar.tmp->SimpleCookie()
A:aiohttp.cookiejar.path->path.rstrip('/').rstrip('/')
A:aiohttp.cookiejar.delta_seconds->int(max_age)
A:aiohttp.cookiejar.max_age_expiration->min(time.time() + delta_seconds, self.MAX_TIME)
A:aiohttp.cookiejar.expire_time->self._parse_date(expires)
A:aiohttp.cookiejar.request_url->URL(request_url)
A:aiohttp.cookiejar.request_origin->URL(request_url).origin()
A:aiohttp.cookiejar.domains->itertools.accumulate(reversed(hostname.split('.')), _FORMAT_DOMAIN_REVERSED)
A:aiohttp.cookiejar.paths->itertools.accumulate(request_url.path.split('/'), _FORMAT_PATH)
A:aiohttp.cookiejar.pairs->itertools.product(domains, paths)
A:aiohttp.cookiejar.path_len->len(request_url.path)
A:aiohttp.cookiejar.mrsl_val->cast('Morsel[str]', cookie.get(cookie.key, Morsel()))
A:aiohttp.cookiejar.token->token_match.group('token')
A:aiohttp.cookiejar.time_match->cls.DATE_HMS_TIME_RE.match(token)
A:aiohttp.cookiejar.day_match->cls.DATE_DAY_OF_MONTH_RE.match(token)
A:aiohttp.cookiejar.day->int(day_match.group())
A:aiohttp.cookiejar.month_match->cls.DATE_MONTH_RE.match(token)
A:aiohttp.cookiejar.year_match->cls.DATE_YEAR_RE.match(token)
A:aiohttp.cookiejar.year->int(year_match.group())
aiohttp.CookieJar(self,*,unsafe:bool=False,quote_cookie:bool=True,treat_as_secure_origin:Union[StrOrURL,List[StrOrURL],None]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.CookieJar.__iter__(self)->'Iterator[Morsel[str]]'
aiohttp.CookieJar.__len__(self)->int
aiohttp.CookieJar._do_expiration(self)->None
aiohttp.CookieJar._expire_cookie(self,when:float,domain:str,path:str,name:str)->None
aiohttp.CookieJar._is_domain_match(domain:str,hostname:str)->bool
aiohttp.CookieJar._parse_date(cls,date_str:str)->Optional[int]
aiohttp.CookieJar.clear(self,predicate:Optional[ClearCookiePredicate]=None)->None
aiohttp.CookieJar.clear_domain(self,domain:str)->None
aiohttp.CookieJar.filter_cookies(self,request_url:URL=URL())->'BaseCookie[str]'
aiohttp.CookieJar.load(self,file_path:PathLike)->None
aiohttp.CookieJar.save(self,file_path:PathLike)->None
aiohttp.CookieJar.update_cookies(self,cookies:LooseCookies,response_url:URL=URL())->None
aiohttp.DummyCookieJar(self,*,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.DummyCookieJar.__iter__(self)->'Iterator[Morsel[str]]'
aiohttp.DummyCookieJar.__len__(self)->int
aiohttp.DummyCookieJar.clear(self,predicate:Optional[ClearCookiePredicate]=None)->None
aiohttp.DummyCookieJar.clear_domain(self,domain:str)->None
aiohttp.DummyCookieJar.filter_cookies(self,request_url:URL)->'BaseCookie[str]'
aiohttp.DummyCookieJar.update_cookies(self,cookies:LooseCookies,response_url:URL=URL())->None
aiohttp.cookiejar.CookieJar(self,*,unsafe:bool=False,quote_cookie:bool=True,treat_as_secure_origin:Union[StrOrURL,List[StrOrURL],None]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.cookiejar.CookieJar.__init__(self,*,unsafe:bool=False,quote_cookie:bool=True,treat_as_secure_origin:Union[StrOrURL,List[StrOrURL],None]=None,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.cookiejar.CookieJar.__iter__(self)->'Iterator[Morsel[str]]'
aiohttp.cookiejar.CookieJar.__len__(self)->int
aiohttp.cookiejar.CookieJar._do_expiration(self)->None
aiohttp.cookiejar.CookieJar._expire_cookie(self,when:float,domain:str,path:str,name:str)->None
aiohttp.cookiejar.CookieJar._is_domain_match(domain:str,hostname:str)->bool
aiohttp.cookiejar.CookieJar._parse_date(cls,date_str:str)->Optional[int]
aiohttp.cookiejar.CookieJar.clear(self,predicate:Optional[ClearCookiePredicate]=None)->None
aiohttp.cookiejar.CookieJar.clear_domain(self,domain:str)->None
aiohttp.cookiejar.CookieJar.filter_cookies(self,request_url:URL=URL())->'BaseCookie[str]'
aiohttp.cookiejar.CookieJar.load(self,file_path:PathLike)->None
aiohttp.cookiejar.CookieJar.save(self,file_path:PathLike)->None
aiohttp.cookiejar.CookieJar.update_cookies(self,cookies:LooseCookies,response_url:URL=URL())->None
aiohttp.cookiejar.DummyCookieJar(self,*,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.cookiejar.DummyCookieJar.__init__(self,*,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.cookiejar.DummyCookieJar.__iter__(self)->'Iterator[Morsel[str]]'
aiohttp.cookiejar.DummyCookieJar.__len__(self)->int
aiohttp.cookiejar.DummyCookieJar.clear(self,predicate:Optional[ClearCookiePredicate]=None)->None
aiohttp.cookiejar.DummyCookieJar.clear_domain(self,domain:str)->None
aiohttp.cookiejar.DummyCookieJar.filter_cookies(self,request_url:URL)->'BaseCookie[str]'
aiohttp.cookiejar.DummyCookieJar.update_cookies(self,cookies:LooseCookies,response_url:URL=URL())->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/http_parser.py----------------------------------------
A:aiohttp.http_parser._MsgT->TypeVar('_MsgT', RawRequestMessage, RawResponseMessage)
A:aiohttp.http_parser.line_count->len(lines)
A:aiohttp.http_parser.(bname, bvalue)->lines[0].decode('utf-8', 'surrogateescape').split(b':', 1)
A:aiohttp.http_parser.bvalue->bvalue.strip(b' \t').strip(b' \t')
A:aiohttp.http_parser.name->bname.decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.header_length->len(bvalue)
A:aiohttp.http_parser.value->bvalue.strip(b' \t').strip(b' \t').decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.self._headers_parser->HeadersParser(max_line_size, max_headers, max_field_size, self.lax)
A:aiohttp.http_parser.data_len->len(data)
A:aiohttp.http_parser.pos->self.decompressor.flush().find(SEP)
A:aiohttp.http_parser.line->lines[0].decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.length_hdr->msg.headers.get(CONTENT_LENGTH)
A:aiohttp.http_parser.length->get_content_length()
A:aiohttp.http_parser.method->getattr(msg, 'method', self.method)
A:aiohttp.http_parser.code->getattr(msg, 'code', 0)
A:aiohttp.http_parser.payload->StreamReader(self.protocol, timer=self.timer, loop=loop, limit=self._limit)
A:aiohttp.http_parser.payload_parser->HttpPayloadParser(payload, length=length, chunked=msg.chunked, method=method, compression=msg.compression, code=self.code, response_with_body=self.response_with_body, auto_decompress=self._auto_decompress, lax=self.lax)
A:aiohttp.http_parser.self._payload_parser->HttpPayloadParser(payload, method=msg.method, compression=msg.compression, auto_decompress=self._auto_decompress, lax=self.lax)
A:aiohttp.http_parser.(eof, data)->self._payload_parser.feed_data(data[start_pos:], SEP)
A:aiohttp.http_parser.reraised_exc->self.payload_exception(str(underlying_exc))
A:aiohttp.http_parser.(headers, raw_headers)->self._headers_parser.parse_headers(lines)
A:aiohttp.http_parser.bad_hdr->next((h for h in singletons if len(headers.getall(h, ())) > 1), None)
A:aiohttp.http_parser.conn->headers.get(hdrs.CONNECTION)
A:aiohttp.http_parser.v->headers.get(hdrs.CONNECTION).lower()
A:aiohttp.http_parser.enc->enc.lower().lower()
A:aiohttp.http_parser.te->headers.get(hdrs.TRANSFER_ENCODING)
A:aiohttp.http_parser.(method, path, version)->lines[0].decode('utf-8', 'surrogateescape').split(' ', maxsplit=2)
A:aiohttp.http_parser.match->VERSRE.fullmatch(version)
A:aiohttp.http_parser.version_o->HttpVersion(int(match.group(1)), int(match.group(2)))
A:aiohttp.http_parser.url->URL(path, encoded=True)
A:aiohttp.http_parser.(path_part, _hash_separator, url_fragment)->path.partition('#')
A:aiohttp.http_parser.(path_part, _question_mark_separator, qs_part)->path_part.partition('?')
A:aiohttp.http_parser.(headers, raw_headers, close, compression, upgrade, chunked)->self.parse_headers(lines)
A:aiohttp.http_parser.(version, status)->lines[0].decode('utf-8', 'surrogateescape').split(maxsplit=1)
A:aiohttp.http_parser.(status, reason)->status.strip().split(maxsplit=1)
A:aiohttp.http_parser.status->status.strip().strip()
A:aiohttp.http_parser.status_i->int(status)
A:aiohttp.http_parser.chunk_len->len(chunk)
A:aiohttp.http_parser.i->self.decompressor.flush().find(CHUNK_EXT, 0, pos)
A:aiohttp.http_parser.size_b->size_b.strip().strip()
A:aiohttp.http_parser.exc->TransferEncodingError(chunk[:pos].decode('ascii', 'surrogateescape'))
A:aiohttp.http_parser.size->int(bytes(size_b), 16)
A:aiohttp.http_parser.self.decompressor->ZLibDecompressor(encoding=self.encoding, suppress_deflate_header=True)
A:aiohttp.http_parser.chunk->self.decompressor.flush()
aiohttp.http_parser.ChunkState(IntEnum)
aiohttp.http_parser.DeflateBuffer(self,out:StreamReader,encoding:Optional[str])
aiohttp.http_parser.DeflateBuffer.__init__(self,out:StreamReader,encoding:Optional[str])
aiohttp.http_parser.DeflateBuffer.begin_http_chunk_receiving(self)->None
aiohttp.http_parser.DeflateBuffer.end_http_chunk_receiving(self)->None
aiohttp.http_parser.DeflateBuffer.feed_data(self,chunk:bytes,size:int)->None
aiohttp.http_parser.DeflateBuffer.feed_eof(self)->None
aiohttp.http_parser.DeflateBuffer.set_exception(self,exc:BaseException,exc_cause:BaseException=_EXC_SENTINEL)->None
aiohttp.http_parser.HeadersParser(self,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,lax:bool=False)
aiohttp.http_parser.HeadersParser.__init__(self,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,lax:bool=False)
aiohttp.http_parser.HeadersParser.parse_headers(self,lines:List[bytes])->Tuple['CIMultiDictProxy[str]', RawHeaders]
aiohttp.http_parser.HttpParser(self,protocol:Optional[BaseProtocol]=None,loop:Optional[asyncio.AbstractEventLoop]=None,limit:int=2**16,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,timer:Optional[BaseTimerContext]=None,code:Optional[int]=None,method:Optional[str]=None,payload_exception:Optional[Type[BaseException]]=None,response_with_body:bool=True,read_until_eof:bool=False,auto_decompress:bool=True)
aiohttp.http_parser.HttpParser.__init__(self,protocol:Optional[BaseProtocol]=None,loop:Optional[asyncio.AbstractEventLoop]=None,limit:int=2**16,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,timer:Optional[BaseTimerContext]=None,code:Optional[int]=None,method:Optional[str]=None,payload_exception:Optional[Type[BaseException]]=None,response_with_body:bool=True,read_until_eof:bool=False,auto_decompress:bool=True)
aiohttp.http_parser.HttpParser.feed_data(self,data:bytes,SEP:_SEP=b'\r\n',EMPTY:bytes=b'',CONTENT_LENGTH:istr=hdrs.CONTENT_LENGTH,METH_CONNECT:str=hdrs.METH_CONNECT,SEC_WEBSOCKET_KEY1:istr=hdrs.SEC_WEBSOCKET_KEY1)->Tuple[List[Tuple[_MsgT, StreamReader]], bool, bytes]
aiohttp.http_parser.HttpParser.feed_eof(self)->Optional[_MsgT]
aiohttp.http_parser.HttpParser.parse_headers(self,lines:List[bytes])->Tuple['CIMultiDictProxy[str]', RawHeaders, Optional[bool], Optional[str], bool, bool]
aiohttp.http_parser.HttpParser.parse_message(self,lines:List[bytes])->_MsgT
aiohttp.http_parser.HttpParser.set_upgraded(self,val:bool)->None
aiohttp.http_parser.HttpPayloadParser(self,payload:StreamReader,length:Optional[int]=None,chunked:bool=False,compression:Optional[str]=None,code:Optional[int]=None,method:Optional[str]=None,response_with_body:bool=True,auto_decompress:bool=True,lax:bool=False)
aiohttp.http_parser.HttpPayloadParser.__init__(self,payload:StreamReader,length:Optional[int]=None,chunked:bool=False,compression:Optional[str]=None,code:Optional[int]=None,method:Optional[str]=None,response_with_body:bool=True,auto_decompress:bool=True,lax:bool=False)
aiohttp.http_parser.HttpPayloadParser.feed_data(self,chunk:bytes,SEP:_SEP=b'\r\n',CHUNK_EXT:bytes=b';')->Tuple[bool, bytes]
aiohttp.http_parser.HttpPayloadParser.feed_eof(self)->None
aiohttp.http_parser.HttpRequestParser(HttpParser[RawRequestMessage])
aiohttp.http_parser.HttpRequestParser.parse_message(self,lines:List[bytes])->RawRequestMessage
aiohttp.http_parser.HttpResponseParser(HttpParser[RawResponseMessage])
aiohttp.http_parser.HttpResponseParser.feed_data(self,data:bytes,SEP:Optional[_SEP]=None,*args:Any,**kwargs:Any)->Tuple[List[Tuple[RawResponseMessage, StreamReader]], bool, bytes]
aiohttp.http_parser.HttpResponseParser.parse_message(self,lines:List[bytes])->RawResponseMessage
aiohttp.http_parser.ParseState(IntEnum)
aiohttp.http_parser.RawRequestMessage(NamedTuple)
aiohttp.http_parser.RawResponseMessage(NamedTuple)
aiohttp.http_parser._is_supported_upgrade(headers:CIMultiDictProxy[str])->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/worker.py----------------------------------------
A:aiohttp.worker.self.loop->asyncio.new_event_loop()
A:aiohttp.worker.self._task->self.loop.create_task(self._run())
A:aiohttp.worker.runner->aiohttp.web.AppRunner(app, logger=self.log, keepalive_timeout=self.cfg.keepalive, access_log=access_log, access_log_format=self._get_valid_log_format(self.cfg.access_log_format), shutdown_timeout=self.cfg.graceful_timeout / 100 * 95)
A:aiohttp.worker.site->aiohttp.web.SockSite(runner, sock, ssl_context=ctx)
A:aiohttp.worker.pid->os.getpid()
A:aiohttp.worker.self._notify_waiterwaiter->loop.create_future()
A:aiohttp.worker.ctx->ssl.SSLContext(cfg.ssl_version)
aiohttp.guv(GunicornWebWorker)
aiohttp.guv.init_process(self)->None
aiohttp.gw(self,*args:Any,**kw:Any)
aiohttp.gw._create_ssl_context(cfg:Any)->'SSLContext'
aiohttp.gw._get_valid_log_format(self,source_format:str)->str
aiohttp.gw._notify_waiter_done(self,waiter:Optional['asyncio.Future[bool]']=None)->None
aiohttp.gw._run(self)->None
aiohttp.gw._wait_next_notify(self)->'asyncio.Future[bool]'
aiohttp.gw.handle_abort(self,sig:int,frame:Optional[FrameType])->None
aiohttp.gw.handle_quit(self,sig:int,frame:Optional[FrameType])->None
aiohttp.gw.init_process(self)->None
aiohttp.gw.init_signals(self)->None
aiohttp.gw.run(self)->None
aiohttp.worker.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.worker.GunicornUVLoopWebWorker.init_process(self)->None
aiohttp.worker.GunicornWebWorker(self,*args:Any,**kw:Any)
aiohttp.worker.GunicornWebWorker.__init__(self,*args:Any,**kw:Any)
aiohttp.worker.GunicornWebWorker._create_ssl_context(cfg:Any)->'SSLContext'
aiohttp.worker.GunicornWebWorker._get_valid_log_format(self,source_format:str)->str
aiohttp.worker.GunicornWebWorker._notify_waiter_done(self,waiter:Optional['asyncio.Future[bool]']=None)->None
aiohttp.worker.GunicornWebWorker._run(self)->None
aiohttp.worker.GunicornWebWorker._wait_next_notify(self)->'asyncio.Future[bool]'
aiohttp.worker.GunicornWebWorker.handle_abort(self,sig:int,frame:Optional[FrameType])->None
aiohttp.worker.GunicornWebWorker.handle_quit(self,sig:int,frame:Optional[FrameType])->None
aiohttp.worker.GunicornWebWorker.init_process(self)->None
aiohttp.worker.GunicornWebWorker.init_signals(self)->None
aiohttp.worker.GunicornWebWorker.run(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/connector.py----------------------------------------
A:aiohttp.connector.EMPTY_SCHEMA_SET->frozenset({''})
A:aiohttp.connector.HTTP_SCHEMA_SET->frozenset({'http', 'https'})
A:aiohttp.connector.WS_SCHEMA_SET->frozenset({'ws', 'wss'})
A:aiohttp.connector.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.connector.self._keepalive_timeout->cast(float, keepalive_timeout)
A:aiohttp.connector.self._waiters->defaultdict(deque)
A:aiohttp.connector.self._factory->functools.partial(ResponseHandler, loop=loop)
A:aiohttp.connector.self.cookies->SimpleCookie()
A:aiohttp.connector.now->self._loop.time()
A:aiohttp.connector.self._cleanup_handle->helpers.weakref_handle(self, '_cleanup', self._keepalive_timeout, self._loop, timeout_ceil_threshold=self._timeout_ceil_threshold)
A:aiohttp.connector.self._cleanup_closed_handle->helpers.weakref_handle(self, '_cleanup_closed', self._cleanup_closed_period, self._loop, timeout_ceil_threshold=self._timeout_ceil_threshold)
A:aiohttp.connector.acquired->self._acquired_per_host.get(key)
A:aiohttp.connector.available->self._available_connections(key)
A:aiohttp.connector.fut->self._loop.create_future()
A:aiohttp.connector.proto->self._get(key)
A:aiohttp.connector.placeholder->cast(ResponseHandler, _TransportPlaceholder())
A:aiohttp.connector.t1->self._loop.time()
A:aiohttp.connector.(proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector.queues->list(self._waiters.keys())
A:aiohttp.connector.waiter->waiters.popleft()
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector.self._timestamps[key]->monotonic()
A:aiohttp.connector.addrs->list(islice(loop, length))
A:aiohttp.connector.self._ssl->_merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)
A:aiohttp.connector.resolver->DefaultResolver(loop=self._loop)
A:aiohttp.connector.self._cached_hosts->_DNSCacheTable(ttl=ttl_dns_cache)
A:aiohttp.connector.self._local_addr_infos->aiohappyeyeballs.addr_to_addr_infos(local_addr)
A:aiohttp.connector.result->self._cached_hosts.next_addrs(key)
A:aiohttp.connector.resolved_host_task->asyncio.create_task(self._resolve_host_with_throttle(key, host, port, traces))
A:aiohttp.connector.self._throttle_dns_events[key]->EventResultOrError(self._loop)
A:aiohttp.connector.sslcontext->self._get_ssl_context(req)
A:aiohttp.connector.future->loop.create_future()
A:aiohttp.connector.asyncio_supports_tls_in_tls->getattr(underlying_transport, '_start_tls_compatible', False)
A:aiohttp.connector.tls_proto->self._factory()
A:aiohttp.connector.fingerprint->self._get_fingerprint(req)
A:aiohttp.connector.addr_infos->self._convert_hosts_to_addr_infos(hosts)
A:aiohttp.connector.bad_peer->sock.getpeername()
A:aiohttp.connector.runtime_has_start_tls->self._loop_supports_start_tls()
A:aiohttp.connector.proxy_req->ClientRequest(hdrs.METH_GET, url, headers=headers, auth=req.proxy_auth, loop=self._loop, ssl=req.ssl)
A:aiohttp.connector.auth->ClientRequest(hdrs.METH_GET, url, headers=headers, auth=req.proxy_auth, loop=self._loop, ssl=req.ssl).headers.pop(hdrs.AUTHORIZATION, None)
A:aiohttp.connector.key->attr.evolve(req.connection_key, proxy=None, proxy_auth=None, proxy_headers_hash=None)
A:aiohttp.connector.conn->Connection(self, key, proto, self._loop)
A:aiohttp.connector.rawsock->rawsock.dup().dup()
aiohttp.connector.BaseConnector(self,*,keepalive_timeout:Union[object,None,float]=sentinel,force_close:bool=False,limit:int=100,limit_per_host:int=0,enable_cleanup_closed:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,timeout_ceil_threshold:float=5)
aiohttp.connector.BaseConnector.__aenter__(self)->'BaseConnector'
aiohttp.connector.BaseConnector.__aexit__(self,exc_type:Optional[Type[BaseException]]=None,exc_value:Optional[BaseException]=None,exc_traceback:Optional[TracebackType]=None)->None
aiohttp.connector.BaseConnector.__del__(self,_warnings:Any=warnings)->None
aiohttp.connector.BaseConnector.__enter__(self)->'BaseConnector'
aiohttp.connector.BaseConnector.__exit__(self,*exc:Any)->None
aiohttp.connector.BaseConnector.__init__(self,*,keepalive_timeout:Union[object,None,float]=sentinel,force_close:bool=False,limit:int=100,limit_per_host:int=0,enable_cleanup_closed:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,timeout_ceil_threshold:float=5)
aiohttp.connector.BaseConnector._available_connections(self,key:'ConnectionKey')->int
aiohttp.connector.BaseConnector._cleanup(self)->None
aiohttp.connector.BaseConnector._cleanup_closed(self)->None
aiohttp.connector.BaseConnector._close(self)->None
aiohttp.connector.BaseConnector._create_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->ResponseHandler
aiohttp.connector.BaseConnector._drop_acquired_per_host(self,key:'ConnectionKey',val:ResponseHandler)->None
aiohttp.connector.BaseConnector._get(self,key:'ConnectionKey')->Optional[ResponseHandler]
aiohttp.connector.BaseConnector._release(self,key:'ConnectionKey',protocol:ResponseHandler,*,should_close:bool=False)->None
aiohttp.connector.BaseConnector._release_acquired(self,key:'ConnectionKey',proto:ResponseHandler)->None
aiohttp.connector.BaseConnector._release_waiter(self)->None
aiohttp.connector.BaseConnector.close(self)->Awaitable[None]
aiohttp.connector.BaseConnector.closed(self)->bool
aiohttp.connector.BaseConnector.connect(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->Connection
aiohttp.connector.BaseConnector.force_close(self)->bool
aiohttp.connector.BaseConnector.limit(self)->int
aiohttp.connector.BaseConnector.limit_per_host(self)->int
aiohttp.connector.Connection(self,connector:'BaseConnector',key:'ConnectionKey',protocol:ResponseHandler,loop:asyncio.AbstractEventLoop)
aiohttp.connector.Connection.__bool__(self)->Literal[True]
aiohttp.connector.Connection.__del__(self,_warnings:Any=warnings)->None
aiohttp.connector.Connection.__init__(self,connector:'BaseConnector',key:'ConnectionKey',protocol:ResponseHandler,loop:asyncio.AbstractEventLoop)
aiohttp.connector.Connection.__repr__(self)->str
aiohttp.connector.Connection._notify_release(self)->None
aiohttp.connector.Connection.add_callback(self,callback:Callable[[],None])->None
aiohttp.connector.Connection.close(self)->None
aiohttp.connector.Connection.closed(self)->bool
aiohttp.connector.Connection.loop(self)->asyncio.AbstractEventLoop
aiohttp.connector.Connection.protocol(self)->Optional[ResponseHandler]
aiohttp.connector.Connection.release(self)->None
aiohttp.connector.Connection.transport(self)->Optional[asyncio.Transport]
aiohttp.connector.NamedPipeConnector(self,path:str,force_close:bool=False,keepalive_timeout:Union[object,float,None]=sentinel,limit:int=100,limit_per_host:int=0,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.connector.NamedPipeConnector.__init__(self,path:str,force_close:bool=False,keepalive_timeout:Union[object,float,None]=sentinel,limit:int=100,limit_per_host:int=0,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.connector.NamedPipeConnector._create_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->ResponseHandler
aiohttp.connector.NamedPipeConnector.path(self)->str
aiohttp.connector.TCPConnector(self,*,verify_ssl:bool=True,fingerprint:Optional[bytes]=None,use_dns_cache:bool=True,ttl_dns_cache:Optional[int]=10,family:socket.AddressFamily=socket.AddressFamily.AF_UNSPEC,ssl_context:Optional[SSLContext]=None,ssl:Union[bool,Fingerprint,SSLContext]=True,local_addr:Optional[Tuple[str,int]]=None,resolver:Optional[AbstractResolver]=None,keepalive_timeout:Union[None,float,object]=sentinel,force_close:bool=False,limit:int=100,limit_per_host:int=0,enable_cleanup_closed:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,timeout_ceil_threshold:float=5,happy_eyeballs_delay:Optional[float]=0.25,interleave:Optional[int]=None)
aiohttp.connector.TCPConnector.__init__(self,*,verify_ssl:bool=True,fingerprint:Optional[bytes]=None,use_dns_cache:bool=True,ttl_dns_cache:Optional[int]=10,family:socket.AddressFamily=socket.AddressFamily.AF_UNSPEC,ssl_context:Optional[SSLContext]=None,ssl:Union[bool,Fingerprint,SSLContext]=True,local_addr:Optional[Tuple[str,int]]=None,resolver:Optional[AbstractResolver]=None,keepalive_timeout:Union[None,float,object]=sentinel,force_close:bool=False,limit:int=100,limit_per_host:int=0,enable_cleanup_closed:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,timeout_ceil_threshold:float=5,happy_eyeballs_delay:Optional[float]=0.25,interleave:Optional[int]=None)
aiohttp.connector.TCPConnector._check_loop_for_start_tls(self)->None
aiohttp.connector.TCPConnector._convert_hosts_to_addr_infos(self,hosts:List[ResolveResult])->List[aiohappyeyeballs.AddrInfoType]
aiohttp.connector.TCPConnector._create_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->ResponseHandler
aiohttp.connector.TCPConnector._create_direct_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout',*,client_error:Type[Exception]=ClientConnectorError)->Tuple[asyncio.Transport, ResponseHandler]
aiohttp.connector.TCPConnector._create_proxy_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->Tuple[asyncio.BaseTransport, ResponseHandler]
aiohttp.connector.TCPConnector._fail_on_no_start_tls(self,req:'ClientRequest')->None
aiohttp.connector.TCPConnector._get_fingerprint(self,req:ClientRequest)->Optional['Fingerprint']
aiohttp.connector.TCPConnector._get_ssl_context(self,req:ClientRequest)->Optional[SSLContext]
aiohttp.connector.TCPConnector._loop_supports_start_tls(self)->bool
aiohttp.connector.TCPConnector._make_or_get_ssl_context(self,verified:bool)->SSLContext
aiohttp.connector.TCPConnector._make_ssl_context(verified:bool)->SSLContext
aiohttp.connector.TCPConnector._resolve_host(self,host:str,port:int,traces:Optional[Sequence['Trace']]=None)->List[ResolveResult]
aiohttp.connector.TCPConnector._resolve_host_with_throttle(self,key:Tuple[str,int],host:str,port:int,traces:Optional[Sequence['Trace']])->List[ResolveResult]
aiohttp.connector.TCPConnector._start_tls_connection(self,underlying_transport:asyncio.Transport,req:ClientRequest,timeout:'ClientTimeout',client_error:Type[Exception]=ClientConnectorError)->Tuple[asyncio.BaseTransport, ResponseHandler]
aiohttp.connector.TCPConnector._warn_about_tls_in_tls(self,underlying_transport:asyncio.Transport,req:ClientRequest)->None
aiohttp.connector.TCPConnector._wrap_create_connection(self,*args:Any,addr_infos:List[aiohappyeyeballs.AddrInfoType],req:ClientRequest,timeout:'ClientTimeout',client_error:Type[Exception]=ClientConnectorError,**kwargs:Any)->Tuple[asyncio.Transport, ResponseHandler]
aiohttp.connector.TCPConnector._wrap_existing_connection(self,*args:Any,req:ClientRequest,timeout:'ClientTimeout',client_error:Type[Exception]=ClientConnectorError,**kwargs:Any)->Tuple[asyncio.Transport, ResponseHandler]
aiohttp.connector.TCPConnector.clear_dns_cache(self,host:Optional[str]=None,port:Optional[int]=None)->None
aiohttp.connector.TCPConnector.close(self)->Awaitable[None]
aiohttp.connector.TCPConnector.family(self)->int
aiohttp.connector.TCPConnector.use_dns_cache(self)->bool
aiohttp.connector.UnixConnector(self,path:str,force_close:bool=False,keepalive_timeout:Union[object,float,None]=sentinel,limit:int=100,limit_per_host:int=0,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.connector.UnixConnector.__init__(self,path:str,force_close:bool=False,keepalive_timeout:Union[object,float,None]=sentinel,limit:int=100,limit_per_host:int=0,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.connector.UnixConnector._create_connection(self,req:ClientRequest,traces:List['Trace'],timeout:'ClientTimeout')->ResponseHandler
aiohttp.connector.UnixConnector.path(self)->str
aiohttp.connector._DNSCacheTable(self,ttl:Optional[float]=None)
aiohttp.connector._DNSCacheTable.__contains__(self,host:object)->bool
aiohttp.connector._DNSCacheTable.__init__(self,ttl:Optional[float]=None)
aiohttp.connector._DNSCacheTable.add(self,key:Tuple[str,int],addrs:List[ResolveResult])->None
aiohttp.connector._DNSCacheTable.clear(self)->None
aiohttp.connector._DNSCacheTable.expired(self,key:Tuple[str,int])->bool
aiohttp.connector._DNSCacheTable.next_addrs(self,key:Tuple[str,int])->List[ResolveResult]
aiohttp.connector._DNSCacheTable.remove(self,key:Tuple[str,int])->None
aiohttp.connector._DeprecationWaiter(self,awaitable:Awaitable[Any])
aiohttp.connector._DeprecationWaiter.__await__(self)->Any
aiohttp.connector._DeprecationWaiter.__del__(self)->None
aiohttp.connector._DeprecationWaiter.__init__(self,awaitable:Awaitable[Any])
aiohttp.connector._TransportPlaceholder
aiohttp.connector._TransportPlaceholder.close(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/pytest_plugin.py----------------------------------------
A:aiohttp.pytest_plugin._loop->request.getfixturevalue('loop')
A:aiohttp.pytest_plugin.gen->func(*args, **kwargs)
A:aiohttp.pytest_plugin.loop->setup_test_loop()
A:aiohttp.pytest_plugin.fast->pyfuncitem.config.getoption('--aiohttp-fast')
A:aiohttp.pytest_plugin.name->name.strip(' ?').strip(' ?')
A:aiohttp.pytest_plugin.policy->asyncio.WindowsProactorEventLoopPolicy()
A:aiohttp.pytest_plugin.server->TestServer(__param, loop=loop, **server_kwargs)
A:aiohttp.pytest_plugin.__param->__param(loop, *args, **kwargs)
A:aiohttp.pytest_plugin.client->TestClient(__param, loop=loop, **kwargs)
aiohttp.pytest_plugin.AiohttpClient(self,__param:Union[Application,BaseTestServer],*,server_kwargs:Optional[Dict[str,Any]]=None,**kwargs:Any)
aiohttp.pytest_plugin.AiohttpClient.__call__(self,__param:Union[Application,BaseTestServer],*,server_kwargs:Optional[Dict[str,Any]]=None,**kwargs:Any)
aiohttp.pytest_plugin.AiohttpServer(self,app:Application,*,port:Optional[int]=None,**kwargs:Any)
aiohttp.pytest_plugin.AiohttpServer.__call__(self,app:Application,*,port:Optional[int]=None,**kwargs:Any)
aiohttp.pytest_plugin._passthrough_loop_context(loop,fast=False)
aiohttp.pytest_plugin._runtime_warning_context()
aiohttp.pytest_plugin.aiohttp_client(loop:asyncio.AbstractEventLoop)->Iterator[AiohttpClient]
aiohttp.pytest_plugin.aiohttp_raw_server(loop:asyncio.AbstractEventLoop)->Iterator[AiohttpRawServer]
aiohttp.pytest_plugin.aiohttp_server(loop:asyncio.AbstractEventLoop)->Iterator[AiohttpServer]
aiohttp.pytest_plugin.aiohttp_unused_port()->Callable[[], int]
aiohttp.pytest_plugin.fast(request)
aiohttp.pytest_plugin.loop(loop_factory,fast,loop_debug)
aiohttp.pytest_plugin.loop_debug(request)
aiohttp.pytest_plugin.proactor_loop()
aiohttp.pytest_plugin.pytest_addoption(parser)
aiohttp.pytest_plugin.pytest_fixture_setup(fixturedef)
aiohttp.pytest_plugin.pytest_generate_tests(metafunc)
aiohttp.pytest_plugin.pytest_pycollect_makeitem(collector,name,obj)
aiohttp.pytest_plugin.pytest_pyfunc_call(pyfuncitem)
aiohttp.pytest_plugin.raw_test_server(aiohttp_raw_server)
aiohttp.pytest_plugin.test_client(aiohttp_client)
aiohttp.pytest_plugin.test_server(aiohttp_server)
aiohttp.pytest_plugin.unused_port(aiohttp_unused_port:Callable[[],int])->Callable[[], int]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/abc.py----------------------------------------
aiohttp.abc.AbstractAccessLogger(self,logger:logging.Logger,log_format:str)
aiohttp.abc.AbstractAccessLogger.__init__(self,logger:logging.Logger,log_format:str)
aiohttp.abc.AbstractAccessLogger.log(self,request:BaseRequest,response:StreamResponse,time:float)->None
aiohttp.abc.AbstractCookieJar(self,*,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.abc.AbstractCookieJar.__init__(self,*,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.abc.AbstractCookieJar.clear(self,predicate:Optional[ClearCookiePredicate]=None)->None
aiohttp.abc.AbstractCookieJar.clear_domain(self,domain:str)->None
aiohttp.abc.AbstractCookieJar.filter_cookies(self,request_url:URL)->'BaseCookie[str]'
aiohttp.abc.AbstractCookieJar.update_cookies(self,cookies:LooseCookies,response_url:URL=URL())->None
aiohttp.abc.AbstractMatchInfo(ABC)
aiohttp.abc.AbstractMatchInfo.add_app(self,app:Application)->None
aiohttp.abc.AbstractMatchInfo.apps(self)->Tuple[Application, ...]
aiohttp.abc.AbstractMatchInfo.expect_handler(self)->Callable[[Request], Awaitable[Optional[StreamResponse]]]
aiohttp.abc.AbstractMatchInfo.freeze(self)->None
aiohttp.abc.AbstractMatchInfo.get_info(self)->Dict[str, Any]
aiohttp.abc.AbstractMatchInfo.handler(self)->Callable[[Request], Awaitable[StreamResponse]]
aiohttp.abc.AbstractMatchInfo.http_exception(self)->Optional[HTTPException]
aiohttp.abc.AbstractResolver(ABC)
aiohttp.abc.AbstractResolver.close(self)->None
aiohttp.abc.AbstractResolver.resolve(self,host:str,port:int=0,family:socket.AddressFamily=socket.AF_INET)->List[ResolveResult]
aiohttp.abc.AbstractRouter(self)
aiohttp.abc.AbstractRouter.__init__(self)
aiohttp.abc.AbstractRouter.freeze(self)->None
aiohttp.abc.AbstractRouter.frozen(self)->bool
aiohttp.abc.AbstractRouter.post_init(self,app:Application)->None
aiohttp.abc.AbstractRouter.resolve(self,request:Request)->'AbstractMatchInfo'
aiohttp.abc.AbstractStreamWriter(ABC)
aiohttp.abc.AbstractStreamWriter.drain(self)->None
aiohttp.abc.AbstractStreamWriter.enable_chunking(self)->None
aiohttp.abc.AbstractStreamWriter.enable_compression(self,encoding:str='deflate')->None
aiohttp.abc.AbstractStreamWriter.write(self,chunk:bytes)->None
aiohttp.abc.AbstractStreamWriter.write_eof(self,chunk:bytes=b'')->None
aiohttp.abc.AbstractStreamWriter.write_headers(self,status_line:str,headers:'CIMultiDict[str]')->None
aiohttp.abc.AbstractView(self,request:Request)
aiohttp.abc.AbstractView.__await__(self)->Generator[Any, None, StreamResponse]
aiohttp.abc.AbstractView.__init__(self,request:Request)
aiohttp.abc.AbstractView.request(self)->Request
aiohttp.abc.ResolveResult(TypedDict)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/base_protocol.py----------------------------------------
A:aiohttp.base_protocol.tr->cast(asyncio.Transport, transport)
A:aiohttp.base_protocol.waiter->self._loop.create_future()
aiohttp.base_protocol.BaseProtocol(self,loop:asyncio.AbstractEventLoop)
aiohttp.base_protocol.BaseProtocol.__init__(self,loop:asyncio.AbstractEventLoop)
aiohttp.base_protocol.BaseProtocol._drain_helper(self)->None
aiohttp.base_protocol.BaseProtocol.connected(self)->bool
aiohttp.base_protocol.BaseProtocol.connection_lost(self,exc:Optional[BaseException])->None
aiohttp.base_protocol.BaseProtocol.connection_made(self,transport:asyncio.BaseTransport)->None
aiohttp.base_protocol.BaseProtocol.pause_reading(self)->None
aiohttp.base_protocol.BaseProtocol.pause_writing(self)->None
aiohttp.base_protocol.BaseProtocol.resume_reading(self)->None
aiohttp.base_protocol.BaseProtocol.resume_writing(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/compression_utils.py----------------------------------------
A:aiohttp.compression_utils.self._compressor->zlib.compressobj(wbits=self._mode, strategy=strategy, level=level)
A:aiohttp.compression_utils.self._compress_lock->asyncio.Lock()
A:aiohttp.compression_utils.self._decompressor->zlib.decompressobj(wbits=self._mode)
A:aiohttp.compression_utils.self._obj->brotli.Decompressor()
aiohttp.compression_utils.BrotliDecompressor(self)
aiohttp.compression_utils.BrotliDecompressor.__init__(self)
aiohttp.compression_utils.BrotliDecompressor.decompress_sync(self,data:bytes)->bytes
aiohttp.compression_utils.BrotliDecompressor.flush(self)->bytes
aiohttp.compression_utils.ZLibCompressor(self,encoding:Optional[str]=None,suppress_deflate_header:bool=False,level:Optional[int]=None,wbits:Optional[int]=None,strategy:int=zlib.Z_DEFAULT_STRATEGY,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.ZLibCompressor.__init__(self,encoding:Optional[str]=None,suppress_deflate_header:bool=False,level:Optional[int]=None,wbits:Optional[int]=None,strategy:int=zlib.Z_DEFAULT_STRATEGY,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.ZLibCompressor.compress(self,data:bytes)->bytes
aiohttp.compression_utils.ZLibCompressor.compress_sync(self,data:bytes)->bytes
aiohttp.compression_utils.ZLibCompressor.flush(self,mode:int=zlib.Z_FINISH)->bytes
aiohttp.compression_utils.ZLibDecompressor(self,encoding:Optional[str]=None,suppress_deflate_header:bool=False,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.ZLibDecompressor.__init__(self,encoding:Optional[str]=None,suppress_deflate_header:bool=False,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.ZLibDecompressor.decompress(self,data:bytes,max_length:int=0)->bytes
aiohttp.compression_utils.ZLibDecompressor.decompress_sync(self,data:bytes,max_length:int=0)->bytes
aiohttp.compression_utils.ZLibDecompressor.eof(self)->bool
aiohttp.compression_utils.ZLibDecompressor.flush(self,length:int=0)->bytes
aiohttp.compression_utils.ZLibDecompressor.unconsumed_tail(self)->bytes
aiohttp.compression_utils.ZLibDecompressor.unused_data(self)->bytes
aiohttp.compression_utils.ZlibBaseHandler(self,mode:int,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.ZlibBaseHandler.__init__(self,mode:int,executor:Optional[Executor]=None,max_sync_chunk_size:Optional[int]=MAX_SYNC_CHUNK_SIZE)
aiohttp.compression_utils.encoding_to_mode(encoding:Optional[str]=None,suppress_deflate_header:bool=False)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/tracing.py----------------------------------------
A:aiohttp.tracing._ParamT_contra->TypeVar('_ParamT_contra', contravariant=True)
aiohttp.TraceConfig(self,trace_config_ctx_factory:Type[SimpleNamespace]=SimpleNamespace)
aiohttp.TraceConfig.freeze(self)->None
aiohttp.TraceConfig.on_connection_create_end(self)->'Signal[_SignalCallback[TraceConnectionCreateEndParams]]'
aiohttp.TraceConfig.on_connection_create_start(self)->'Signal[_SignalCallback[TraceConnectionCreateStartParams]]'
aiohttp.TraceConfig.on_connection_queued_end(self)->'Signal[_SignalCallback[TraceConnectionQueuedEndParams]]'
aiohttp.TraceConfig.on_connection_queued_start(self)->'Signal[_SignalCallback[TraceConnectionQueuedStartParams]]'
aiohttp.TraceConfig.on_connection_reuseconn(self)->'Signal[_SignalCallback[TraceConnectionReuseconnParams]]'
aiohttp.TraceConfig.on_dns_cache_hit(self)->'Signal[_SignalCallback[TraceDnsCacheHitParams]]'
aiohttp.TraceConfig.on_dns_cache_miss(self)->'Signal[_SignalCallback[TraceDnsCacheMissParams]]'
aiohttp.TraceConfig.on_dns_resolvehost_end(self)->'Signal[_SignalCallback[TraceDnsResolveHostEndParams]]'
aiohttp.TraceConfig.on_dns_resolvehost_start(self)->'Signal[_SignalCallback[TraceDnsResolveHostStartParams]]'
aiohttp.TraceConfig.on_request_chunk_sent(self)->'Signal[_SignalCallback[TraceRequestChunkSentParams]]'
aiohttp.TraceConfig.on_request_end(self)->'Signal[_SignalCallback[TraceRequestEndParams]]'
aiohttp.TraceConfig.on_request_exception(self)->'Signal[_SignalCallback[TraceRequestExceptionParams]]'
aiohttp.TraceConfig.on_request_headers_sent(self)->'Signal[_SignalCallback[TraceRequestHeadersSentParams]]'
aiohttp.TraceConfig.on_request_redirect(self)->'Signal[_SignalCallback[TraceRequestRedirectParams]]'
aiohttp.TraceConfig.on_request_start(self)->'Signal[_SignalCallback[TraceRequestStartParams]]'
aiohttp.TraceConfig.on_response_chunk_received(self)->'Signal[_SignalCallback[TraceResponseChunkReceivedParams]]'
aiohttp.TraceConfig.trace_config_ctx(self,trace_request_ctx:Optional[Mapping[str,str]]=None)->SimpleNamespace
aiohttp.TraceConnectionCreateEndParams
aiohttp.TraceConnectionCreateStartParams
aiohttp.TraceConnectionQueuedEndParams
aiohttp.TraceConnectionQueuedStartParams
aiohttp.TraceConnectionReuseconnParams
aiohttp.TraceDnsCacheHitParams
aiohttp.TraceDnsCacheMissParams
aiohttp.TraceDnsResolveHostEndParams
aiohttp.TraceDnsResolveHostStartParams
aiohttp.TraceRequestChunkSentParams
aiohttp.TraceRequestEndParams
aiohttp.TraceRequestExceptionParams
aiohttp.TraceRequestRedirectParams
aiohttp.TraceRequestStartParams
aiohttp.TraceResponseChunkReceivedParams
aiohttp.tracing.Trace(self,session:'ClientSession',trace_config:TraceConfig,trace_config_ctx:SimpleNamespace)
aiohttp.tracing.Trace.__init__(self,session:'ClientSession',trace_config:TraceConfig,trace_config_ctx:SimpleNamespace)
aiohttp.tracing.Trace.send_connection_create_end(self)->None
aiohttp.tracing.Trace.send_connection_create_start(self)->None
aiohttp.tracing.Trace.send_connection_queued_end(self)->None
aiohttp.tracing.Trace.send_connection_queued_start(self)->None
aiohttp.tracing.Trace.send_connection_reuseconn(self)->None
aiohttp.tracing.Trace.send_dns_cache_hit(self,host:str)->None
aiohttp.tracing.Trace.send_dns_cache_miss(self,host:str)->None
aiohttp.tracing.Trace.send_dns_resolvehost_end(self,host:str)->None
aiohttp.tracing.Trace.send_dns_resolvehost_start(self,host:str)->None
aiohttp.tracing.Trace.send_request_chunk_sent(self,method:str,url:URL,chunk:bytes)->None
aiohttp.tracing.Trace.send_request_end(self,method:str,url:URL,headers:'CIMultiDict[str]',response:ClientResponse)->None
aiohttp.tracing.Trace.send_request_exception(self,method:str,url:URL,headers:'CIMultiDict[str]',exception:BaseException)->None
aiohttp.tracing.Trace.send_request_headers(self,method:str,url:URL,headers:'CIMultiDict[str]')->None
aiohttp.tracing.Trace.send_request_redirect(self,method:str,url:URL,headers:'CIMultiDict[str]',response:ClientResponse)->None
aiohttp.tracing.Trace.send_request_start(self,method:str,url:URL,headers:'CIMultiDict[str]')->None
aiohttp.tracing.Trace.send_response_chunk_received(self,method:str,url:URL,chunk:bytes)->None
aiohttp.tracing.TraceConfig(self,trace_config_ctx_factory:Type[SimpleNamespace]=SimpleNamespace)
aiohttp.tracing.TraceConfig.__init__(self,trace_config_ctx_factory:Type[SimpleNamespace]=SimpleNamespace)
aiohttp.tracing.TraceConfig.freeze(self)->None
aiohttp.tracing.TraceConfig.on_connection_create_end(self)->'Signal[_SignalCallback[TraceConnectionCreateEndParams]]'
aiohttp.tracing.TraceConfig.on_connection_create_start(self)->'Signal[_SignalCallback[TraceConnectionCreateStartParams]]'
aiohttp.tracing.TraceConfig.on_connection_queued_end(self)->'Signal[_SignalCallback[TraceConnectionQueuedEndParams]]'
aiohttp.tracing.TraceConfig.on_connection_queued_start(self)->'Signal[_SignalCallback[TraceConnectionQueuedStartParams]]'
aiohttp.tracing.TraceConfig.on_connection_reuseconn(self)->'Signal[_SignalCallback[TraceConnectionReuseconnParams]]'
aiohttp.tracing.TraceConfig.on_dns_cache_hit(self)->'Signal[_SignalCallback[TraceDnsCacheHitParams]]'
aiohttp.tracing.TraceConfig.on_dns_cache_miss(self)->'Signal[_SignalCallback[TraceDnsCacheMissParams]]'
aiohttp.tracing.TraceConfig.on_dns_resolvehost_end(self)->'Signal[_SignalCallback[TraceDnsResolveHostEndParams]]'
aiohttp.tracing.TraceConfig.on_dns_resolvehost_start(self)->'Signal[_SignalCallback[TraceDnsResolveHostStartParams]]'
aiohttp.tracing.TraceConfig.on_request_chunk_sent(self)->'Signal[_SignalCallback[TraceRequestChunkSentParams]]'
aiohttp.tracing.TraceConfig.on_request_end(self)->'Signal[_SignalCallback[TraceRequestEndParams]]'
aiohttp.tracing.TraceConfig.on_request_exception(self)->'Signal[_SignalCallback[TraceRequestExceptionParams]]'
aiohttp.tracing.TraceConfig.on_request_headers_sent(self)->'Signal[_SignalCallback[TraceRequestHeadersSentParams]]'
aiohttp.tracing.TraceConfig.on_request_redirect(self)->'Signal[_SignalCallback[TraceRequestRedirectParams]]'
aiohttp.tracing.TraceConfig.on_request_start(self)->'Signal[_SignalCallback[TraceRequestStartParams]]'
aiohttp.tracing.TraceConfig.on_response_chunk_received(self)->'Signal[_SignalCallback[TraceResponseChunkReceivedParams]]'
aiohttp.tracing.TraceConfig.trace_config_ctx(self,trace_request_ctx:Optional[Mapping[str,str]]=None)->SimpleNamespace
aiohttp.tracing.TraceConnectionCreateEndParams
aiohttp.tracing.TraceConnectionCreateStartParams
aiohttp.tracing.TraceConnectionQueuedEndParams
aiohttp.tracing.TraceConnectionQueuedStartParams
aiohttp.tracing.TraceConnectionReuseconnParams
aiohttp.tracing.TraceDnsCacheHitParams
aiohttp.tracing.TraceDnsCacheMissParams
aiohttp.tracing.TraceDnsResolveHostEndParams
aiohttp.tracing.TraceDnsResolveHostStartParams
aiohttp.tracing.TraceRequestChunkSentParams
aiohttp.tracing.TraceRequestEndParams
aiohttp.tracing.TraceRequestExceptionParams
aiohttp.tracing.TraceRequestHeadersSentParams
aiohttp.tracing.TraceRequestRedirectParams
aiohttp.tracing.TraceRequestStartParams
aiohttp.tracing.TraceResponseChunkReceivedParams


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/_helpers.pyi----------------------------------------
aiohttp._helpers.reify(self,wrapped:Any)
aiohttp._helpers.reify.__get__(self,inst:Any,owner:Any)->Any
aiohttp._helpers.reify.__init__(self,wrapped:Any)
aiohttp._helpers.reify.__set__(self,inst:Any,value:Any)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/http_writer.py----------------------------------------
A:aiohttp.http_writer.HttpVersion10->HttpVersion(1, 0)
A:aiohttp.http_writer.HttpVersion11->HttpVersion(1, 1)
A:aiohttp.http_writer.self._compress->ZLibCompressor(encoding=encoding, strategy=strategy)
A:aiohttp.http_writer.size->len(chunk)
A:aiohttp.http_writer.chunk->chunk.cast('c').cast('c')
A:aiohttp.http_writer.chunk_len->('%x\r\n' % len(chunk)).encode('ascii')
A:aiohttp.http_writer.chunk_len_pre->('%x\r\n' % len(chunk)).encode('ascii')
A:aiohttp.http_writer.buf->_serialize_headers(status_line, headers)
aiohttp.http_writer.HttpVersion(NamedTuple)
aiohttp.http_writer.StreamWriter(self,protocol:BaseProtocol,loop:asyncio.AbstractEventLoop,on_chunk_sent:_T_OnChunkSent=None,on_headers_sent:_T_OnHeadersSent=None)
aiohttp.http_writer.StreamWriter.__init__(self,protocol:BaseProtocol,loop:asyncio.AbstractEventLoop,on_chunk_sent:_T_OnChunkSent=None,on_headers_sent:_T_OnHeadersSent=None)
aiohttp.http_writer.StreamWriter._write(self,chunk:bytes)->None
aiohttp.http_writer.StreamWriter.drain(self)->None
aiohttp.http_writer.StreamWriter.enable_chunking(self)->None
aiohttp.http_writer.StreamWriter.enable_compression(self,encoding:str='deflate',strategy:int=zlib.Z_DEFAULT_STRATEGY)->None
aiohttp.http_writer.StreamWriter.protocol(self)->BaseProtocol
aiohttp.http_writer.StreamWriter.transport(self)->Optional[asyncio.Transport]
aiohttp.http_writer.StreamWriter.write(self,chunk:bytes,*,drain:bool=True,LIMIT:int=65536)->None
aiohttp.http_writer.StreamWriter.write_eof(self,chunk:bytes=b'')->None
aiohttp.http_writer.StreamWriter.write_headers(self,status_line:str,headers:'CIMultiDict[str]')->None
aiohttp.http_writer._py_serialize_headers(status_line:str,headers:'CIMultiDict[str]')->bytes
aiohttp.http_writer._safe_header(string:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/client_reqrep.py----------------------------------------
A:aiohttp.client_reqrep._CONTAINS_CONTROL_CHAR_RE->re.compile("[^-!#$%&'*+.^_`|~0-9a-zA-Z]")
A:aiohttp.client_reqrep.json_re->re.compile('^application/(?:[\\w.+-]+?\\+)?json')
A:aiohttp.client_reqrep.digestlen->len(fingerprint)
A:aiohttp.client_reqrep.hashfunc->self.HASHFUNC_BY_DIGESTLEN.get(digestlen)
A:aiohttp.client_reqrep.sslobj->transport.get_extra_info('ssl_object')
A:aiohttp.client_reqrep.cert->transport.get_extra_info('ssl_object').getpeercert(binary_form=True)
A:aiohttp.client_reqrep.got->self._hashfunc(cert).digest()
A:aiohttp.client_reqrep.(host, port, *_)->transport.get_extra_info('peername')
A:aiohttp.client_reqrep.ssl->Fingerprint(fingerprint)
A:aiohttp.client_reqrep.ALL_METHODS->GET_METHODS.union(POST_METHODS).union({hdrs.METH_DELETE})
A:aiohttp.client_reqrep.loop->asyncio.get_event_loop()
A:aiohttp.client_reqrep.match->re.match('^\\s*(\\S*)\\s*=\\s*([\'\\"]?)(.*?)(\\2)\\s*$', param, re.M)
A:aiohttp.client_reqrep.self._session->cast('ClientSession', session)
A:aiohttp.client_reqrep.q->MultiDict(url.query)
A:aiohttp.client_reqrep.url2->url.with_query(q).with_query(params)
A:aiohttp.client_reqrep.url->url.with_query(q).with_query(q)
A:aiohttp.client_reqrep.self.url->url.with_query(q).with_query(q).with_fragment(None)
A:aiohttp.client_reqrep.self.method->method.upper()
A:aiohttp.client_reqrep.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client_reqrep.self.auth->helpers.BasicAuth(username, password or '')
A:aiohttp.client_reqrep.version->http.HttpVersion(int(v[0]), int(v[1]))
A:aiohttp.client_reqrep.netloc->netloc.rstrip('.').rstrip('.')
A:aiohttp.client_reqrep.headers->headers.items().items()
A:aiohttp.client_reqrep.self.skip_auto_headers->CIMultiDict(((hdr, None) for hdr in sorted(skip_auto_headers)))
A:aiohttp.client_reqrep.used_headers->self.headers.copy()
A:aiohttp.client_reqrep.c->SimpleCookie()
A:aiohttp.client_reqrep.iter_cookies->cookies.items()
A:aiohttp.client_reqrep.mrsl_val->value.get(value.key, Morsel())
A:aiohttp.client_reqrep.self.headers[hdrs.COOKIE]->SimpleCookie().output(header='', sep=';').strip()
A:aiohttp.client_reqrep.enc->self.headers.get(hdrs.CONTENT_ENCODING, '').lower()
A:aiohttp.client_reqrep.te->self.headers.get(hdrs.TRANSFER_ENCODING, '').lower()
A:aiohttp.client_reqrep.self.headers[hdrs.CONTENT_LENGTH]->str(size)
A:aiohttp.client_reqrep.netrc_obj->netrc_from_env()
A:aiohttp.client_reqrep.auth->basicauth_from_netrc(netrc_obj, self.url.host)
A:aiohttp.client_reqrep.self.headers[hdrs.AUTHORIZATION]->basicauth_from_netrc(netrc_obj, self.url.host).encode()
A:aiohttp.client_reqrep.body->FormData(body)()
A:aiohttp.client_reqrep.self._continue->self.loop.create_future()
A:aiohttp.client_reqrep.proxy_headers->CIMultiDict(proxy_headers)
A:aiohttp.client_reqrep.reraised_exc->ClientOSError(underlying_exc.errno, f'Can not write request body for {self.url!s}')
A:aiohttp.client_reqrep.path->str(self.url)
A:aiohttp.client_reqrep.writer->StreamWriter(protocol, self.loop, on_chunk_sent=functools.partial(self._on_chunk_request_sent, self.method, self.url), on_headers_sent=functools.partial(self._on_headers_request_sent, self.method, self.url))
A:aiohttp.client_reqrep.connection->self.headers.get(hdrs.CONNECTION)
A:aiohttp.client_reqrep.status_line->'{0} {1} HTTP/{v.major}.{v.minor}'.format(self.method, path, v=self.version)
A:aiohttp.client_reqrep.coro->self.write_bytes(writer, conn)
A:aiohttp.client_reqrep.task->self.loop.create_task(coro)
A:aiohttp.client_reqrep.self.response->response_class(self.method, self.original_url, writer=self._writer, continue100=self._continue, timer=self._timer, request_info=self.request_info, traces=self._traces, loop=self.loop, session=self._session)
A:aiohttp.client_reqrep.self.cookies->SimpleCookie()
A:aiohttp.client_reqrep.self._url->url.with_query(q).with_query(q).with_fragment(None)
A:aiohttp.client_reqrep.raw->self._headers.get(hdrs.CONTENT_DISPOSITION)
A:aiohttp.client_reqrep.(disposition_type, params_dct)->multipart.parse_content_disposition(raw)
A:aiohttp.client_reqrep.params->MappingProxyType(params_dct)
A:aiohttp.client_reqrep.filename->multipart.content_disposition_filename(params)
A:aiohttp.client_reqrep.out->io.StringIO()
A:aiohttp.client_reqrep.ascii_encodable_url->str(self.url)
A:aiohttp.client_reqrep.ascii_encodable_reason->self.reason.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.client_reqrep.links_str->', '.join(self.headers.getall('link', []))
A:aiohttp.client_reqrep.(url, params_str)->re.match('^\\s*(\\S*)\\s*=\\s*([\'\\"]?)(.*?)(\\2)\\s*$', param, re.M).groups()
A:aiohttp.client_reqrep.(key, _, value, _)->re.match('^\\s*(\\S*)\\s*=\\s*([\'\\"]?)(.*?)(\\2)\\s*$', param, re.M).groups()
A:aiohttp.client_reqrep.key->link.get('rel', url)
A:aiohttp.client_reqrep.ctype->self.headers.get(hdrs.CONTENT_TYPE, '').lower()
A:aiohttp.client_reqrep.mimetype->helpers.parse_mimetype(ctype)
A:aiohttp.client_reqrep.encoding->self.get_encoding()
A:aiohttp.client_reqrep.stripped->self._body.strip()
aiohttp.client_reqrep.ClientRequest(self,method:str,url:URL,*,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Iterable[str]=frozenset(),data:Any=None,cookies:Optional[LooseCookies]=None,auth:Optional[BasicAuth]=None,version:http.HttpVersion=http.HttpVersion11,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,response_class:Optional[Type['ClientResponse']]=None,proxy:Optional[URL]=None,proxy_auth:Optional[BasicAuth]=None,timer:Optional[BaseTimerContext]=None,session:Optional['ClientSession']=None,ssl:Union[SSLContext,bool,Fingerprint]=True,proxy_headers:Optional[LooseHeaders]=None,traces:Optional[List['Trace']]=None,trust_env:bool=False,server_hostname:Optional[str]=None)
aiohttp.client_reqrep.ClientRequest.__init__(self,method:str,url:URL,*,params:Optional[Mapping[str,str]]=None,headers:Optional[LooseHeaders]=None,skip_auto_headers:Iterable[str]=frozenset(),data:Any=None,cookies:Optional[LooseCookies]=None,auth:Optional[BasicAuth]=None,version:http.HttpVersion=http.HttpVersion11,compress:Optional[str]=None,chunked:Optional[bool]=None,expect100:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,response_class:Optional[Type['ClientResponse']]=None,proxy:Optional[URL]=None,proxy_auth:Optional[BasicAuth]=None,timer:Optional[BaseTimerContext]=None,session:Optional['ClientSession']=None,ssl:Union[SSLContext,bool,Fingerprint]=True,proxy_headers:Optional[LooseHeaders]=None,traces:Optional[List['Trace']]=None,trust_env:bool=False,server_hostname:Optional[str]=None)
aiohttp.client_reqrep.ClientRequest.__reset_writer(self,_:object=None)->None
aiohttp.client_reqrep.ClientRequest._on_chunk_request_sent(self,method:str,url:URL,chunk:bytes)->None
aiohttp.client_reqrep.ClientRequest._on_headers_request_sent(self,method:str,url:URL,headers:'CIMultiDict[str]')->None
aiohttp.client_reqrep.ClientRequest._writer(self)->Optional['asyncio.Task[None]']
aiohttp.client_reqrep.ClientRequest._writer(self,writer:Optional['asyncio.Task[None]'])->None
aiohttp.client_reqrep.ClientRequest.close(self)->None
aiohttp.client_reqrep.ClientRequest.connection_key(self)->ConnectionKey
aiohttp.client_reqrep.ClientRequest.host(self)->str
aiohttp.client_reqrep.ClientRequest.is_ssl(self)->bool
aiohttp.client_reqrep.ClientRequest.keep_alive(self)->bool
aiohttp.client_reqrep.ClientRequest.port(self)->Optional[int]
aiohttp.client_reqrep.ClientRequest.request_info(self)->RequestInfo
aiohttp.client_reqrep.ClientRequest.send(self,conn:'Connection')->'ClientResponse'
aiohttp.client_reqrep.ClientRequest.ssl(self)->Union['SSLContext', bool, Fingerprint]
aiohttp.client_reqrep.ClientRequest.terminate(self)->None
aiohttp.client_reqrep.ClientRequest.update_auth(self,auth:Optional[BasicAuth],trust_env:bool=False)->None
aiohttp.client_reqrep.ClientRequest.update_auto_headers(self,skip_auto_headers:Iterable[str])->None
aiohttp.client_reqrep.ClientRequest.update_body_from_data(self,body:Any)->None
aiohttp.client_reqrep.ClientRequest.update_content_encoding(self,data:Any)->None
aiohttp.client_reqrep.ClientRequest.update_cookies(self,cookies:Optional[LooseCookies])->None
aiohttp.client_reqrep.ClientRequest.update_expect_continue(self,expect:bool=False)->None
aiohttp.client_reqrep.ClientRequest.update_headers(self,headers:Optional[LooseHeaders])->None
aiohttp.client_reqrep.ClientRequest.update_host(self,url:URL)->None
aiohttp.client_reqrep.ClientRequest.update_proxy(self,proxy:Optional[URL],proxy_auth:Optional[BasicAuth],proxy_headers:Optional[LooseHeaders])->None
aiohttp.client_reqrep.ClientRequest.update_transfer_encoding(self)->None
aiohttp.client_reqrep.ClientRequest.update_version(self,version:Union[http.HttpVersion,str])->None
aiohttp.client_reqrep.ClientRequest.write_bytes(self,writer:AbstractStreamWriter,conn:'Connection')->None
aiohttp.client_reqrep.ClientResponse(self,method:str,url:URL,*,writer:'asyncio.Task[None]',continue100:Optional['asyncio.Future[bool]'],timer:BaseTimerContext,request_info:RequestInfo,traces:List['Trace'],loop:asyncio.AbstractEventLoop,session:'ClientSession')
aiohttp.client_reqrep.ClientResponse.__aenter__(self)->'ClientResponse'
aiohttp.client_reqrep.ClientResponse.__aexit__(self,exc_type:Optional[Type[BaseException]],exc_val:Optional[BaseException],exc_tb:Optional[TracebackType])->None
aiohttp.client_reqrep.ClientResponse.__del__(self,_warnings:Any=warnings)->None
aiohttp.client_reqrep.ClientResponse.__init__(self,method:str,url:URL,*,writer:'asyncio.Task[None]',continue100:Optional['asyncio.Future[bool]'],timer:BaseTimerContext,request_info:RequestInfo,traces:List['Trace'],loop:asyncio.AbstractEventLoop,session:'ClientSession')
aiohttp.client_reqrep.ClientResponse.__repr__(self)->str
aiohttp.client_reqrep.ClientResponse.__reset_writer(self,_:object=None)->None
aiohttp.client_reqrep.ClientResponse._cleanup_writer(self)->None
aiohttp.client_reqrep.ClientResponse._notify_content(self)->None
aiohttp.client_reqrep.ClientResponse._release_connection(self)->None
aiohttp.client_reqrep.ClientResponse._response_eof(self)->None
aiohttp.client_reqrep.ClientResponse._wait_released(self)->None
aiohttp.client_reqrep.ClientResponse._writer(self)->Optional['asyncio.Task[None]']
aiohttp.client_reqrep.ClientResponse._writer(self,writer:Optional['asyncio.Task[None]'])->None
aiohttp.client_reqrep.ClientResponse.close(self)->None
aiohttp.client_reqrep.ClientResponse.closed(self)->bool
aiohttp.client_reqrep.ClientResponse.connection(self)->Optional['Connection']
aiohttp.client_reqrep.ClientResponse.content_disposition(self)->Optional[ContentDisposition]
aiohttp.client_reqrep.ClientResponse.get_encoding(self)->str
aiohttp.client_reqrep.ClientResponse.headers(self)->'CIMultiDictProxy[str]'
aiohttp.client_reqrep.ClientResponse.history(self)->Tuple['ClientResponse', ...]
aiohttp.client_reqrep.ClientResponse.host(self)->str
aiohttp.client_reqrep.ClientResponse.json(self,*,encoding:Optional[str]=None,loads:JSONDecoder=DEFAULT_JSON_DECODER,content_type:Optional[str]='application/json')->Any
aiohttp.client_reqrep.ClientResponse.links(self)->'MultiDictProxy[MultiDictProxy[Union[str, URL]]]'
aiohttp.client_reqrep.ClientResponse.ok(self)->bool
aiohttp.client_reqrep.ClientResponse.raise_for_status(self)->None
aiohttp.client_reqrep.ClientResponse.raw_headers(self)->RawHeaders
aiohttp.client_reqrep.ClientResponse.read(self)->bytes
aiohttp.client_reqrep.ClientResponse.real_url(self)->URL
aiohttp.client_reqrep.ClientResponse.release(self)->Any
aiohttp.client_reqrep.ClientResponse.request_info(self)->RequestInfo
aiohttp.client_reqrep.ClientResponse.start(self,connection:'Connection')->'ClientResponse'
aiohttp.client_reqrep.ClientResponse.text(self,encoding:Optional[str]=None,errors:str='strict')->str
aiohttp.client_reqrep.ClientResponse.url(self)->URL
aiohttp.client_reqrep.ClientResponse.url_obj(self)->URL
aiohttp.client_reqrep.ClientResponse.wait_for_close(self)->None
aiohttp.client_reqrep.ConnectionKey
aiohttp.client_reqrep.ContentDisposition
aiohttp.client_reqrep.Fingerprint(self,fingerprint:bytes)
aiohttp.client_reqrep.Fingerprint.__init__(self,fingerprint:bytes)
aiohttp.client_reqrep.Fingerprint.check(self,transport:asyncio.Transport)->None
aiohttp.client_reqrep.Fingerprint.fingerprint(self)->bytes
aiohttp.client_reqrep.RequestInfo
aiohttp.client_reqrep.RequestInfo.real_url_default(self)->URL
aiohttp.client_reqrep._gen_default_accept_encoding()->str
aiohttp.client_reqrep._is_expected_content_type(response_content_type:str,expected_content_type:str)->bool
aiohttp.client_reqrep._merge_ssl_params(ssl:Union['SSLContext',bool,Fingerprint],verify_ssl:Optional[bool],ssl_context:Optional['SSLContext'],fingerprint:Optional[bytes])->Union['SSLContext', bool, Fingerprint]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_response.py----------------------------------------
A:aiohttp.web_response.self._cookies->SimpleCookie()
A:aiohttp.web_response.self._headers->CIMultiDict()
A:aiohttp.web_response.self._status->int(status)
A:aiohttp.web_response.old->self._cookies.get(name)
A:aiohttp.web_response.c['max-age']->str(max_age)
A:aiohttp.web_response.value->int(value)
A:aiohttp.web_response.self._headers[hdrs.CONTENT_LENGTH]->str(len(self._compressed_body))
A:aiohttp.web_response.self._content_type->str(value)
A:aiohttp.web_response.self._content_dict['charset']->str(value).lower()
A:aiohttp.web_response.self._headers[hdrs.LAST_MODIFIED]->time.strftime('%a, %d %b %Y %H:%M:%S GMT', value.utctimetuple())
A:aiohttp.web_response.quoted_value->self._headers.get(hdrs.ETAG)
A:aiohttp.web_response.match->helpers.QUOTED_ETAG_RE.fullmatch(quoted_value)
A:aiohttp.web_response.(is_weak, value)->helpers.QUOTED_ETAG_RE.fullmatch(quoted_value).group(1, 2)
A:aiohttp.web_response.params->'; '.join((f'{k}={v}' for (k, v) in self._content_dict.items()))
A:aiohttp.web_response.accept_encoding->request.headers.get(hdrs.ACCEPT_ENCODING, '').lower()
A:aiohttp.web_response.self._must_be_empty_body->must_be_empty_body(request.method, self.status)
A:aiohttp.web_response.status_line->'HTTP/{}.{} {} {}'.format(version[0], version[1], self._status, self._reason)
A:aiohttp.web_response.real_headers->CIMultiDict(headers)
A:aiohttp.web_response.body->dumps(data).encode(charset)
A:aiohttp.web_response.self._bodybody->cast(Payload, body).PAYLOAD_REGISTRY.get(body)
A:aiohttp.web_response.self._body->dumps(data).encode(self.charset)
A:aiohttp.web_response.payload->cast(Payload, body)
A:aiohttp.web_response.compressor->ZLibCompressor(encoding=str(coding.value), max_sync_chunk_size=self._zlib_executor_size, executor=self._zlib_executor)
A:aiohttp.web_response.text->dumps(data)
aiohttp.web_response.ContentCoding(enum.Enum)
aiohttp.web_response.Response(self,*,body:Any=None,status:int=200,reason:Optional[str]=None,text:Optional[str]=None,headers:Optional[LooseHeaders]=None,content_type:Optional[str]=None,charset:Optional[str]=None,zlib_executor_size:Optional[int]=None,zlib_executor:Optional[Executor]=None)
aiohttp.web_response.Response.__init__(self,*,body:Any=None,status:int=200,reason:Optional[str]=None,text:Optional[str]=None,headers:Optional[LooseHeaders]=None,content_type:Optional[str]=None,charset:Optional[str]=None,zlib_executor_size:Optional[int]=None,zlib_executor:Optional[Executor]=None)
aiohttp.web_response.Response._do_start_compression(self,coding:ContentCoding)->None
aiohttp.web_response.Response._start(self,request:'BaseRequest')->AbstractStreamWriter
aiohttp.web_response.Response.body(self)->Optional[Union[bytes, Payload]]
aiohttp.web_response.Response.body(self,body:bytes)->None
aiohttp.web_response.Response.content_length(self)->Optional[int]
aiohttp.web_response.Response.content_length(self,value:Optional[int])->None
aiohttp.web_response.Response.text(self)->Optional[str]
aiohttp.web_response.Response.text(self,text:str)->None
aiohttp.web_response.Response.write_eof(self,data:bytes=b'')->None
aiohttp.web_response.StreamResponse(self,*,status:int=200,reason:Optional[str]=None,headers:Optional[LooseHeaders]=None)
aiohttp.web_response.StreamResponse.__delitem__(self,key:str)->None
aiohttp.web_response.StreamResponse.__eq__(self,other:object)->bool
aiohttp.web_response.StreamResponse.__getitem__(self,key:str)->Any
aiohttp.web_response.StreamResponse.__hash__(self)->int
aiohttp.web_response.StreamResponse.__init__(self,*,status:int=200,reason:Optional[str]=None,headers:Optional[LooseHeaders]=None)
aiohttp.web_response.StreamResponse.__iter__(self)->Iterator[str]
aiohttp.web_response.StreamResponse.__len__(self)->int
aiohttp.web_response.StreamResponse.__repr__(self)->str
aiohttp.web_response.StreamResponse.__setitem__(self,key:str,value:Any)->None
aiohttp.web_response.StreamResponse._do_start_compression(self,coding:ContentCoding)->None
aiohttp.web_response.StreamResponse._generate_content_type_header(self,CONTENT_TYPE:istr=hdrs.CONTENT_TYPE)->None
aiohttp.web_response.StreamResponse._prepare_headers(self)->None
aiohttp.web_response.StreamResponse._start(self,request:'BaseRequest')->AbstractStreamWriter
aiohttp.web_response.StreamResponse._start_compression(self,request:'BaseRequest')->None
aiohttp.web_response.StreamResponse._write_headers(self)->None
aiohttp.web_response.StreamResponse.body_length(self)->int
aiohttp.web_response.StreamResponse.charset(self)->Optional[str]
aiohttp.web_response.StreamResponse.charset(self,value:Optional[str])->None
aiohttp.web_response.StreamResponse.chunked(self)->bool
aiohttp.web_response.StreamResponse.compression(self)->bool
aiohttp.web_response.StreamResponse.content_length(self)->Optional[int]
aiohttp.web_response.StreamResponse.content_length(self,value:Optional[int])->None
aiohttp.web_response.StreamResponse.content_type(self)->str
aiohttp.web_response.StreamResponse.content_type(self,value:str)->None
aiohttp.web_response.StreamResponse.cookies(self)->SimpleCookie
aiohttp.web_response.StreamResponse.del_cookie(self,name:str,*,domain:Optional[str]=None,path:str='/')->None
aiohttp.web_response.StreamResponse.drain(self)->None
aiohttp.web_response.StreamResponse.enable_chunked_encoding(self,chunk_size:Optional[int]=None)->None
aiohttp.web_response.StreamResponse.enable_compression(self,force:Optional[Union[bool,ContentCoding]]=None)->None
aiohttp.web_response.StreamResponse.etag(self)->Optional[ETag]
aiohttp.web_response.StreamResponse.etag(self,value:Optional[Union[ETag,str]])->None
aiohttp.web_response.StreamResponse.force_close(self)->None
aiohttp.web_response.StreamResponse.headers(self)->'CIMultiDict[str]'
aiohttp.web_response.StreamResponse.keep_alive(self)->Optional[bool]
aiohttp.web_response.StreamResponse.last_modified(self)->Optional[datetime.datetime]
aiohttp.web_response.StreamResponse.last_modified(self,value:Optional[Union[int,float,datetime.datetime,str]])->None
aiohttp.web_response.StreamResponse.output_length(self)->int
aiohttp.web_response.StreamResponse.prepare(self,request:'BaseRequest')->Optional[AbstractStreamWriter]
aiohttp.web_response.StreamResponse.prepared(self)->bool
aiohttp.web_response.StreamResponse.reason(self)->str
aiohttp.web_response.StreamResponse.set_cookie(self,name:str,value:str,*,expires:Optional[str]=None,domain:Optional[str]=None,max_age:Optional[Union[int,str]]=None,path:str='/',secure:Optional[bool]=None,httponly:Optional[bool]=None,version:Optional[str]=None,samesite:Optional[str]=None)->None
aiohttp.web_response.StreamResponse.set_status(self,status:int,reason:Optional[str]=None)->None
aiohttp.web_response.StreamResponse.status(self)->int
aiohttp.web_response.StreamResponse.task(self)->'Optional[asyncio.Task[None]]'
aiohttp.web_response.StreamResponse.write(self,data:bytes)->None
aiohttp.web_response.StreamResponse.write_eof(self,data:bytes=b'')->None
aiohttp.web_response.json_response(data:Any=sentinel,*,text:Optional[str]=None,body:Optional[bytes]=None,status:int=200,reason:Optional[str]=None,headers:Optional[LooseHeaders]=None,content_type:str='application/json',dumps:JSONEncoder=json.dumps)->Response


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/formdata.py----------------------------------------
A:aiohttp.formdata.self._writer->multipart.MultipartWriter('form-data')
A:aiohttp.formdata.fields->list(fields.items())
A:aiohttp.formdata.filename->guess_filename(value, name)
A:aiohttp.formdata.to_add->list(fields)
A:aiohttp.formdata.rec->list(fields).pop(0)
A:aiohttp.formdata.k->guess_filename(rec, 'unknown')
A:aiohttp.formdata.part->payload.get_payload(value, headers=headers, encoding=self._charset)
aiohttp.FormData(self,fields:Iterable[Any]=(),quote_fields:bool=True,charset:Optional[str]=None)
aiohttp.FormData._gen_form_data(self)->multipart.MultipartWriter
aiohttp.FormData._gen_form_urlencoded(self)->payload.BytesPayload
aiohttp.FormData.add_field(self,name:str,value:Any,*,content_type:Optional[str]=None,filename:Optional[str]=None,content_transfer_encoding:Optional[str]=None)->None
aiohttp.FormData.add_fields(self,*fields:Any)->None
aiohttp.FormData.is_multipart(self)->bool
aiohttp.formdata.FormData(self,fields:Iterable[Any]=(),quote_fields:bool=True,charset:Optional[str]=None)
aiohttp.formdata.FormData.__init__(self,fields:Iterable[Any]=(),quote_fields:bool=True,charset:Optional[str]=None)
aiohttp.formdata.FormData._gen_form_data(self)->multipart.MultipartWriter
aiohttp.formdata.FormData._gen_form_urlencoded(self)->payload.BytesPayload
aiohttp.formdata.FormData.add_field(self,name:str,value:Any,*,content_type:Optional[str]=None,filename:Optional[str]=None,content_transfer_encoding:Optional[str]=None)->None
aiohttp.formdata.FormData.add_fields(self,*fields:Any)->None
aiohttp.formdata.FormData.is_multipart(self)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_log.py----------------------------------------
A:aiohttp.web_log.KeyMethod->namedtuple('KeyMethod', 'key method')
A:aiohttp.web_log.FORMAT_RE->re.compile('%(\\{([A-Za-z0-9\\-_]+)\\}([ioe])|[atPrsbOD]|Tf?)')
A:aiohttp.web_log.CLEANUP_RE->re.compile('(%[^s])')
A:aiohttp.web_log._compiled_format->self.compile_format(log_format)
A:aiohttp.web_log.methods->list()
A:aiohttp.web_log.m->getattr(AccessLogger, '_format_%s' % atom[2])
A:aiohttp.web_log.key_method->KeyMethod(format_key2, functools.partial(m, atom[1]))
A:aiohttp.web_log.log_format->self.CLEANUP_RE.sub('%\\1', log_format)
A:aiohttp.web_log.tz->datetime.timezone(datetime.timedelta(seconds=-time_mod.timezone))
A:aiohttp.web_log.now->datetime.datetime.now(tz)
A:aiohttp.web_log.fmt_info->self._format_line(request, response, time)
A:aiohttp.web_log.values->list()
A:aiohttp.web_log.extra->dict()
A:aiohttp.web_log.dct->dict().get(k1, {})
aiohttp.web_log.AccessLogger(self,logger:logging.Logger,log_format:str=LOG_FORMAT)
aiohttp.web_log.AccessLogger.__init__(self,logger:logging.Logger,log_format:str=LOG_FORMAT)
aiohttp.web_log.AccessLogger._format_D(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_P(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_T(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_Tf(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_a(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_b(request:BaseRequest,response:StreamResponse,time:float)->int
aiohttp.web_log.AccessLogger._format_i(key:str,request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_line(self,request:BaseRequest,response:StreamResponse,time:float)->Iterable[Tuple[str, Callable[[BaseRequest, StreamResponse, float], str]]]
aiohttp.web_log.AccessLogger._format_o(key:str,request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_r(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger._format_s(request:BaseRequest,response:StreamResponse,time:float)->int
aiohttp.web_log.AccessLogger._format_t(request:BaseRequest,response:StreamResponse,time:float)->str
aiohttp.web_log.AccessLogger.compile_format(self,log_format:str)->Tuple[str, List[KeyMethod]]
aiohttp.web_log.AccessLogger.log(self,request:BaseRequest,response:StreamResponse,time:float)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_exceptions.py----------------------------------------
A:aiohttp.web_exceptions.self.headers['Location']->str(URL(location))
A:aiohttp.web_exceptions.allow->','.join(sorted(allowed_methods))
A:aiohttp.web_exceptions.self.method->method.upper()
A:aiohttp.web_exceptions.self._link->URL(link)
aiohttp.web_exceptions.HTTPAccepted(HTTPSuccessful)
aiohttp.web_exceptions.HTTPBadGateway(HTTPServerError)
aiohttp.web_exceptions.HTTPBadRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPClientError(HTTPError)
aiohttp.web_exceptions.HTTPConflict(HTTPClientError)
aiohttp.web_exceptions.HTTPCreated(HTTPSuccessful)
aiohttp.web_exceptions.HTTPError(HTTPException)
aiohttp.web_exceptions.HTTPException(self,*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPException.__bool__(self)->bool
aiohttp.web_exceptions.HTTPException.__init__(self,*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPExpectationFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPFailedDependency(HTTPClientError)
aiohttp.web_exceptions.HTTPForbidden(HTTPClientError)
aiohttp.web_exceptions.HTTPFound(HTTPMove)
aiohttp.web_exceptions.HTTPGatewayTimeout(HTTPServerError)
aiohttp.web_exceptions.HTTPGone(HTTPClientError)
aiohttp.web_exceptions.HTTPInsufficientStorage(HTTPServerError)
aiohttp.web_exceptions.HTTPInternalServerError(HTTPServerError)
aiohttp.web_exceptions.HTTPLengthRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPMethodNotAllowed(self,method:str,allowed_methods:Iterable[str],*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPMethodNotAllowed.__init__(self,method:str,allowed_methods:Iterable[str],*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPMisdirectedRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPMove(self,location:StrOrURL,*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPMove.__init__(self,location:StrOrURL,*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPMovedPermanently(HTTPMove)
aiohttp.web_exceptions.HTTPMultipleChoices(HTTPMove)
aiohttp.web_exceptions.HTTPNetworkAuthenticationRequired(HTTPServerError)
aiohttp.web_exceptions.HTTPNoContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNonAuthoritativeInformation(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNotAcceptable(HTTPClientError)
aiohttp.web_exceptions.HTTPNotExtended(HTTPServerError)
aiohttp.web_exceptions.HTTPNotFound(HTTPClientError)
aiohttp.web_exceptions.HTTPNotImplemented(HTTPServerError)
aiohttp.web_exceptions.HTTPNotModified(HTTPRedirection)
aiohttp.web_exceptions.HTTPOk(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPartialContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPaymentRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPPermanentRedirect(HTTPMove)
aiohttp.web_exceptions.HTTPPreconditionFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPPreconditionRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPProxyAuthenticationRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPRedirection(HTTPException)
aiohttp.web_exceptions.HTTPRequestEntityTooLarge(self,max_size:float,actual_size:float,**kwargs:Any)
aiohttp.web_exceptions.HTTPRequestEntityTooLarge.__init__(self,max_size:float,actual_size:float,**kwargs:Any)
aiohttp.web_exceptions.HTTPRequestHeaderFieldsTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestRangeNotSatisfiable(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestTimeout(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestURITooLong(HTTPClientError)
aiohttp.web_exceptions.HTTPResetContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPSeeOther(HTTPMove)
aiohttp.web_exceptions.HTTPServerError(HTTPError)
aiohttp.web_exceptions.HTTPServiceUnavailable(HTTPServerError)
aiohttp.web_exceptions.HTTPSuccessful(HTTPException)
aiohttp.web_exceptions.HTTPTemporaryRedirect(HTTPMove)
aiohttp.web_exceptions.HTTPTooManyRequests(HTTPClientError)
aiohttp.web_exceptions.HTTPUnauthorized(HTTPClientError)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons(self,link:Optional[StrOrURL],*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.__init__(self,link:Optional[StrOrURL],*,headers:Optional[LooseHeaders]=None,reason:Optional[str]=None,body:Any=None,text:Optional[str]=None,content_type:Optional[str]=None)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.link(self)->Optional[URL]
aiohttp.web_exceptions.HTTPUnprocessableEntity(HTTPClientError)
aiohttp.web_exceptions.HTTPUnsupportedMediaType(HTTPClientError)
aiohttp.web_exceptions.HTTPUpgradeRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPUseProxy(HTTPMove)
aiohttp.web_exceptions.HTTPVariantAlsoNegotiates(HTTPServerError)
aiohttp.web_exceptions.HTTPVersionNotSupported(HTTPServerError)
aiohttp.web_exceptions.NotAppKeyWarning(UserWarning)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_routedef.py----------------------------------------
A:aiohttp.web_routedef.reg->getattr(router, 'add_' + self.method.lower())
A:aiohttp.web_routedef.resource->router.add_static(self.prefix, self.path, **self.kwargs)
A:aiohttp.web_routedef.routes->router.add_static(self.prefix, self.path, **self.kwargs).get_info().get('routes', {})
aiohttp.web_routedef.AbstractRouteDef(abc.ABC)
aiohttp.web_routedef.AbstractRouteDef.register(self,router:UrlDispatcher)->List[AbstractRoute]
aiohttp.web_routedef.RouteDef(AbstractRouteDef)
aiohttp.web_routedef.RouteDef.__repr__(self)->str
aiohttp.web_routedef.RouteDef.register(self,router:UrlDispatcher)->List[AbstractRoute]
aiohttp.web_routedef.RouteTableDef(self)
aiohttp.web_routedef.RouteTableDef.__contains__(self,item:object)->bool
aiohttp.web_routedef.RouteTableDef.__getitem__(self,index)
aiohttp.web_routedef.RouteTableDef.__init__(self)
aiohttp.web_routedef.RouteTableDef.__iter__(self)->Iterator[AbstractRouteDef]
aiohttp.web_routedef.RouteTableDef.__len__(self)->int
aiohttp.web_routedef.RouteTableDef.__repr__(self)->str
aiohttp.web_routedef.RouteTableDef.delete(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.get(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.head(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.options(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.patch(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.post(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.put(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.route(self,method:str,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.RouteTableDef.static(self,prefix:str,path:PathLike,**kwargs:Any)->None
aiohttp.web_routedef.RouteTableDef.view(self,path:str,**kwargs:Any)->_Deco
aiohttp.web_routedef.StaticDef(AbstractRouteDef)
aiohttp.web_routedef.StaticDef.__repr__(self)->str
aiohttp.web_routedef.StaticDef.register(self,router:UrlDispatcher)->List[AbstractRoute]
aiohttp.web_routedef.delete(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.get(path:str,handler:_HandlerType,*,name:Optional[str]=None,allow_head:bool=True,**kwargs:Any)->RouteDef
aiohttp.web_routedef.head(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.options(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.patch(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.post(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.put(path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.route(method:str,path:str,handler:_HandlerType,**kwargs:Any)->RouteDef
aiohttp.web_routedef.static(prefix:str,path:PathLike,**kwargs:Any)->StaticDef
aiohttp.web_routedef.view(path:str,handler:Type[AbstractView],**kwargs:Any)->RouteDef


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/tcp_helpers.py----------------------------------------
A:aiohttp.tcp_helpers.sock->transport.get_extra_info('socket')
A:aiohttp.tcp_helpers.value->bool(value)
aiohttp.tcp_helpers.tcp_nodelay(transport:asyncio.Transport,value:bool)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/typedefs.py----------------------------------------
aiohttp.typedefs.Middleware(self,request:'Request',handler:Handler)
aiohttp.typedefs.Middleware.__call__(self,request:'Request',handler:Handler)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_server.py----------------------------------------
aiohttp.web_server.Server(self,handler:_RequestHandler,*,request_factory:Optional[_RequestFactory]=None,handler_cancellation:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,**kwargs:Any)
aiohttp.web_server.Server.__init__(self,handler:_RequestHandler,*,request_factory:Optional[_RequestFactory]=None,handler_cancellation:bool=False,loop:Optional[asyncio.AbstractEventLoop]=None,**kwargs:Any)
aiohttp.web_server.Server._make_request(self,message:RawRequestMessage,payload:StreamReader,protocol:RequestHandler,writer:AbstractStreamWriter,task:'asyncio.Task[None]')->BaseRequest
aiohttp.web_server.Server.connection_lost(self,handler:RequestHandler,exc:Optional[BaseException]=None)->None
aiohttp.web_server.Server.connection_made(self,handler:RequestHandler,transport:asyncio.Transport)->None
aiohttp.web_server.Server.connections(self)->List[RequestHandler]
aiohttp.web_server.Server.pre_shutdown(self)->None
aiohttp.web_server.Server.shutdown(self,timeout:Optional[float]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/test_utils.py----------------------------------------
A:aiohttp.test_utils.s->socket.socket(family, socket.SOCK_STREAM)
A:aiohttp.test_utils.self._ssl->kwargs.pop('ssl', None)
A:aiohttp.test_utils._sock->self.socket_factory(self.host, self.port, family)
A:aiohttp.test_utils.site->SockSite(self.runner, sock=_sock, ssl_context=self._ssl)
A:aiohttp.test_utils.self._root->URL(f'{self.scheme}://{self.host}:{self.port}')
A:aiohttp.test_utils.url->URL(path)
A:aiohttp.test_utils.srv->Server(self._handler, loop=self._loop, debug=debug, **kwargs)
A:aiohttp.test_utils.cookie_jar->aiohttp.CookieJar(unsafe=True, loop=loop)
A:aiohttp.test_utils.self._session->ClientSession(loop=loop, cookie_jar=cookie_jar, **kwargs)
A:aiohttp.test_utils.self.loop->asyncio.get_running_loop()
A:aiohttp.test_utils.loop->unittest.mock.Mock()
A:aiohttp.test_utils.closed->unittest.mock.Mock().is_closed()
A:aiohttp.test_utils.app->_create_app_mock()
A:aiohttp.test_utils.app.on_response_prepare->Signal(app)
A:aiohttp.test_utils.transport->_create_transport(sslcontext)
A:aiohttp.test_utils.task->unittest.mock.Mock()
A:aiohttp.test_utils.headers->CIMultiDictProxy(CIMultiDict())
A:aiohttp.test_utils.raw_hdrs->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in headers.items()))
A:aiohttp.test_utils.message->RawRequestMessage(method, path, version, headers, raw_hdrs, closing, None, False, chunked, URL(path))
A:aiohttp.test_utils.protocol->unittest.mock.Mock()
A:aiohttp.test_utils.writer->unittest.mock.Mock()
A:aiohttp.test_utils.writer.write_headers->make_mocked_coro(None)
A:aiohttp.test_utils.writer.write->make_mocked_coro(None)
A:aiohttp.test_utils.writer.write_eof->make_mocked_coro(None)
A:aiohttp.test_utils.writer.drain->make_mocked_coro(None)
A:aiohttp.test_utils.payload->unittest.mock.Mock()
A:aiohttp.test_utils.req->Request(message, payload, protocol, writer, task, loop, client_max_size=client_max_size)
A:aiohttp.test_utils.match_info->UrlMappingMatchInfo({} if match_info is sentinel else match_info, mock.Mock())
aiohttp.test_utils.AioHTTPTestCase(IsolatedAsyncioTestCase)
aiohttp.test_utils.AioHTTPTestCase.asyncSetUp(self)->None
aiohttp.test_utils.AioHTTPTestCase.asyncTearDown(self)->None
aiohttp.test_utils.AioHTTPTestCase.get_app(self)->Application
aiohttp.test_utils.AioHTTPTestCase.get_application(self)->Application
aiohttp.test_utils.AioHTTPTestCase.get_client(self,server:TestServer)->TestClient
aiohttp.test_utils.AioHTTPTestCase.get_server(self,app:Application)->TestServer
aiohttp.test_utils.AioHTTPTestCase.setUpAsync(self)->None
aiohttp.test_utils.AioHTTPTestCase.tearDownAsync(self)->None
aiohttp.test_utils.BaseTestServer(self,*,scheme:str='',loop:Optional[asyncio.AbstractEventLoop]=None,host:str='127.0.0.1',port:Optional[int]=None,skip_url_asserts:bool=False,socket_factory:Callable[[str,int,socket.AddressFamily],socket.socket]=get_port_socket,**kwargs:Any)
aiohttp.test_utils.BaseTestServer.__aenter__(self)->'BaseTestServer'
aiohttp.test_utils.BaseTestServer.__aexit__(self,exc_type:Optional[Type[BaseException]],exc_value:Optional[BaseException],traceback:Optional[TracebackType])->None
aiohttp.test_utils.BaseTestServer.__enter__(self)->None
aiohttp.test_utils.BaseTestServer.__exit__(self,exc_type:Optional[Type[BaseException]],exc_value:Optional[BaseException],traceback:Optional[TracebackType])->None
aiohttp.test_utils.BaseTestServer.__init__(self,*,scheme:str='',loop:Optional[asyncio.AbstractEventLoop]=None,host:str='127.0.0.1',port:Optional[int]=None,skip_url_asserts:bool=False,socket_factory:Callable[[str,int,socket.AddressFamily],socket.socket]=get_port_socket,**kwargs:Any)
aiohttp.test_utils.BaseTestServer._make_runner(self,**kwargs:Any)->BaseRunner
aiohttp.test_utils.BaseTestServer.close(self)->None
aiohttp.test_utils.BaseTestServer.closed(self)->bool
aiohttp.test_utils.BaseTestServer.handler(self)->Server
aiohttp.test_utils.BaseTestServer.make_url(self,path:StrOrURL)->URL
aiohttp.test_utils.BaseTestServer.start_server(self,loop:Optional[asyncio.AbstractEventLoop]=None,**kwargs:Any)->None
aiohttp.test_utils.BaseTestServer.started(self)->bool
aiohttp.test_utils.RawTestServer(self,handler:_RequestHandler,*,scheme:str='',host:str='127.0.0.1',port:Optional[int]=None,**kwargs:Any)
aiohttp.test_utils.RawTestServer.__init__(self,handler:_RequestHandler,*,scheme:str='',host:str='127.0.0.1',port:Optional[int]=None,**kwargs:Any)
aiohttp.test_utils.RawTestServer._make_runner(self,debug:bool=True,**kwargs:Any)->ServerRunner
aiohttp.test_utils.TestClient(self,server:BaseTestServer,*,cookie_jar:Optional[AbstractCookieJar]=None,loop:Optional[asyncio.AbstractEventLoop]=None,**kwargs:Any)
aiohttp.test_utils.TestClient.__aenter__(self)->'TestClient'
aiohttp.test_utils.TestClient.__aexit__(self,exc_type:Optional[Type[BaseException]],exc:Optional[BaseException],tb:Optional[TracebackType])->None
aiohttp.test_utils.TestClient.__enter__(self)->None
aiohttp.test_utils.TestClient.__exit__(self,exc_type:Optional[Type[BaseException]],exc:Optional[BaseException],tb:Optional[TracebackType])->None
aiohttp.test_utils.TestClient.__init__(self,server:BaseTestServer,*,cookie_jar:Optional[AbstractCookieJar]=None,loop:Optional[asyncio.AbstractEventLoop]=None,**kwargs:Any)
aiohttp.test_utils.TestClient._request(self,method:str,path:StrOrURL,**kwargs:Any)->ClientResponse
aiohttp.test_utils.TestClient._ws_connect(self,path:StrOrURL,**kwargs:Any)->ClientWebSocketResponse
aiohttp.test_utils.TestClient.app(self)->Optional[Application]
aiohttp.test_utils.TestClient.close(self)->None
aiohttp.test_utils.TestClient.host(self)->str
aiohttp.test_utils.TestClient.make_url(self,path:StrOrURL)->URL
aiohttp.test_utils.TestClient.port(self)->Optional[int]
aiohttp.test_utils.TestClient.server(self)->BaseTestServer
aiohttp.test_utils.TestClient.session(self)->ClientSession
aiohttp.test_utils.TestClient.start_server(self)->None
aiohttp.test_utils.TestClient.ws_connect(self,path:StrOrURL,**kwargs:Any)->_WSRequestContextManager
aiohttp.test_utils.TestServer(self,app:Application,*,scheme:str='',host:str='127.0.0.1',port:Optional[int]=None,**kwargs:Any)
aiohttp.test_utils.TestServer.__init__(self,app:Application,*,scheme:str='',host:str='127.0.0.1',port:Optional[int]=None,**kwargs:Any)
aiohttp.test_utils.TestServer._make_runner(self,**kwargs:Any)->BaseRunner
aiohttp.test_utils._create_app_mock()->mock.MagicMock
aiohttp.test_utils._create_transport(sslcontext:Optional[SSLContext]=None)->mock.Mock
aiohttp.test_utils.get_port_socket(host:str,port:int,family:socket.AddressFamily)->socket.socket
aiohttp.test_utils.get_unused_port_socket(host:str,family:socket.AddressFamily=socket.AF_INET)->socket.socket
aiohttp.test_utils.loop_context(loop_factory:_LOOP_FACTORY=asyncio.new_event_loop,fast:bool=False)->Iterator[asyncio.AbstractEventLoop]
aiohttp.test_utils.make_mocked_coro(return_value:Any=sentinel,raise_exception:Any=sentinel)->Any
aiohttp.test_utils.make_mocked_request(method:str,path:str,headers:Any=None,*,match_info:Any=sentinel,version:HttpVersion=HttpVersion(1,1),closing:bool=False,app:Any=None,writer:Any=sentinel,protocol:Any=sentinel,transport:Any=sentinel,payload:Any=sentinel,sslcontext:Optional[SSLContext]=None,client_max_size:int=1024**2,loop:Any=...)->Request
aiohttp.test_utils.setup_test_loop(loop_factory:_LOOP_FACTORY=asyncio.new_event_loop)->asyncio.AbstractEventLoop
aiohttp.test_utils.teardown_test_loop(loop:asyncio.AbstractEventLoop,fast:bool=False)->None
aiohttp.test_utils.unittest_run_loop(func:Any,*args:Any,**kwargs:Any)->Any
aiohttp.test_utils.unused_port()->int


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/resolver.py----------------------------------------
A:aiohttp.resolver.aiodns_default->hasattr(aiodns.DNSResolver, 'getaddrinfo')
A:aiohttp.resolver.port->int(_port)
A:aiohttp.resolver.self._resolver->aiodns.DNSResolver(*args, **kwargs)
A:aiohttp.resolver.resolved_host->address[0].decode('ascii')
aiohttp.AsyncResolver(self,loop:Optional[asyncio.AbstractEventLoop]=None,*args:Any,**kwargs:Any)
aiohttp.AsyncResolver._resolve_with_query(self,host:str,port:int=0,family:int=socket.AF_INET)->List[Dict[str, Any]]
aiohttp.AsyncResolver.close(self)->None
aiohttp.AsyncResolver.resolve(self,host:str,port:int=0,family:socket.AddressFamily=socket.AF_INET)->List[ResolveResult]
aiohttp.ThreadedResolver(self,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.ThreadedResolver.close(self)->None
aiohttp.ThreadedResolver.resolve(self,host:str,port:int=0,family:socket.AddressFamily=socket.AF_INET)->List[ResolveResult]
aiohttp.resolver.AsyncResolver(self,loop:Optional[asyncio.AbstractEventLoop]=None,*args:Any,**kwargs:Any)
aiohttp.resolver.AsyncResolver.__init__(self,loop:Optional[asyncio.AbstractEventLoop]=None,*args:Any,**kwargs:Any)
aiohttp.resolver.AsyncResolver._resolve_with_query(self,host:str,port:int=0,family:int=socket.AF_INET)->List[Dict[str, Any]]
aiohttp.resolver.AsyncResolver.close(self)->None
aiohttp.resolver.AsyncResolver.resolve(self,host:str,port:int=0,family:socket.AddressFamily=socket.AF_INET)->List[ResolveResult]
aiohttp.resolver.ThreadedResolver(self,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.resolver.ThreadedResolver.__init__(self,loop:Optional[asyncio.AbstractEventLoop]=None)
aiohttp.resolver.ThreadedResolver.close(self)->None
aiohttp.resolver.ThreadedResolver.resolve(self,host:str,port:int=0,family:socket.AddressFamily=socket.AF_INET)->List[ResolveResult]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_runner.py----------------------------------------
A:aiohttp.web_runner.loop->asyncio.get_event_loop()
A:aiohttp.web_runner.name->str(URL.build(scheme=scheme, host=host, port=port))
aiohttp.web_runner.AppRunner(self,app:Application,*,handle_signals:bool=False,**kwargs:Any)
aiohttp.web_runner.AppRunner.__init__(self,app:Application,*,handle_signals:bool=False,**kwargs:Any)
aiohttp.web_runner.AppRunner._cleanup_server(self)->None
aiohttp.web_runner.AppRunner._make_server(self)->Server
aiohttp.web_runner.AppRunner.app(self)->Application
aiohttp.web_runner.AppRunner.shutdown(self)->None
aiohttp.web_runner.BaseRunner(self,*,handle_signals:bool=False,shutdown_timeout:float=60.0,**kwargs:Any)
aiohttp.web_runner.BaseRunner.__init__(self,*,handle_signals:bool=False,shutdown_timeout:float=60.0,**kwargs:Any)
aiohttp.web_runner.BaseRunner._check_site(self,site:BaseSite)->None
aiohttp.web_runner.BaseRunner._cleanup_server(self)->None
aiohttp.web_runner.BaseRunner._make_server(self)->Server
aiohttp.web_runner.BaseRunner._reg_site(self,site:BaseSite)->None
aiohttp.web_runner.BaseRunner._unreg_site(self,site:BaseSite)->None
aiohttp.web_runner.BaseRunner.addresses(self)->List[Any]
aiohttp.web_runner.BaseRunner.cleanup(self)->None
aiohttp.web_runner.BaseRunner.server(self)->Optional[Server]
aiohttp.web_runner.BaseRunner.setup(self)->None
aiohttp.web_runner.BaseRunner.shutdown(self)->None
aiohttp.web_runner.BaseRunner.sites(self)->Set[BaseSite]
aiohttp.web_runner.BaseSite(self,runner:'BaseRunner',*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.BaseSite.__init__(self,runner:'BaseRunner',*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.BaseSite.name(self)->str
aiohttp.web_runner.BaseSite.start(self)->None
aiohttp.web_runner.BaseSite.stop(self)->None
aiohttp.web_runner.GracefulExit(SystemExit)
aiohttp.web_runner.NamedPipeSite(self,runner:'BaseRunner',path:str,*,shutdown_timeout:float=60.0)
aiohttp.web_runner.NamedPipeSite.__init__(self,runner:'BaseRunner',path:str,*,shutdown_timeout:float=60.0)
aiohttp.web_runner.NamedPipeSite.name(self)->str
aiohttp.web_runner.NamedPipeSite.start(self)->None
aiohttp.web_runner.ServerRunner(self,web_server:Server,*,handle_signals:bool=False,**kwargs:Any)
aiohttp.web_runner.ServerRunner.__init__(self,web_server:Server,*,handle_signals:bool=False,**kwargs:Any)
aiohttp.web_runner.ServerRunner._cleanup_server(self)->None
aiohttp.web_runner.ServerRunner._make_server(self)->Server
aiohttp.web_runner.ServerRunner.shutdown(self)->None
aiohttp.web_runner.SockSite(self,runner:'BaseRunner',sock:socket.socket,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.SockSite.__init__(self,runner:'BaseRunner',sock:socket.socket,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.SockSite.name(self)->str
aiohttp.web_runner.SockSite.start(self)->None
aiohttp.web_runner.TCPSite(self,runner:'BaseRunner',host:Optional[str]=None,port:Optional[int]=None,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128,reuse_address:Optional[bool]=None,reuse_port:Optional[bool]=None)
aiohttp.web_runner.TCPSite.__init__(self,runner:'BaseRunner',host:Optional[str]=None,port:Optional[int]=None,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128,reuse_address:Optional[bool]=None,reuse_port:Optional[bool]=None)
aiohttp.web_runner.TCPSite.name(self)->str
aiohttp.web_runner.TCPSite.start(self)->None
aiohttp.web_runner.UnixSite(self,runner:'BaseRunner',path:PathLike,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.UnixSite.__init__(self,runner:'BaseRunner',path:PathLike,*,shutdown_timeout:float=60.0,ssl_context:Optional[SSLContext]=None,backlog:int=128)
aiohttp.web_runner.UnixSite.name(self)->str
aiohttp.web_runner.UnixSite.start(self)->None
aiohttp.web_runner._raise_graceful_exit()->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/log.py----------------------------------------
A:aiohttp.log.access_logger->logging.getLogger('aiohttp.access')
A:aiohttp.log.client_logger->logging.getLogger('aiohttp.client')
A:aiohttp.log.internal_logger->logging.getLogger('aiohttp.internal')
A:aiohttp.log.server_logger->logging.getLogger('aiohttp.server')
A:aiohttp.log.web_logger->logging.getLogger('aiohttp.web')
A:aiohttp.log.ws_logger->logging.getLogger('aiohttp.websocket')


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_request.py----------------------------------------
A:aiohttp.web_request.self._rel_url->yarl.URL.build(scheme=self.scheme, host=self.host).relative()
A:aiohttp.web_request.self._transport_sslcontext->transport.get_extra_info('sslcontext')
A:aiohttp.web_request.self._transport_peername->transport.get_extra_info('peername')
A:aiohttp.web_request.dct['path']->str(new_url)
A:aiohttp.web_request.dct['headers']->CIMultiDictProxy(CIMultiDict(headers))
A:aiohttp.web_request.dct['raw_headers']->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in dct['headers'].items()))
A:aiohttp.web_request.message->self._message._replace(**dct)
A:aiohttp.web_request.length->len(field_value)
A:aiohttp.web_request.match->_FORWARDED_PAIR_RE.match(field_value, pos)
A:aiohttp.web_request.pos->field_value.find(',', pos)
A:aiohttp.web_request.(name, value, port)->_FORWARDED_PAIR_RE.match(field_value, pos).groups()
A:aiohttp.web_request.value->_QUOTED_PAIR_REPLACE_RE.sub('\\1', value[1:-1])
A:aiohttp.web_request.host->self._message.headers.get(hdrs.HOST)
A:aiohttp.web_request.url->yarl.URL.build(scheme=self.scheme, host=self.host)
A:aiohttp.web_request.(is_weak, value, garbage)->_FORWARDED_PAIR_RE.match(field_value, pos).group(2, 3, 4)
A:aiohttp.web_request.raw->self.headers.get(hdrs.COOKIE, '')
A:aiohttp.web_request.parsed->SimpleCookie(raw)
A:aiohttp.web_request.rng->self._headers.get(hdrs.RANGE)
A:aiohttp.web_request.body->bytearray()
A:aiohttp.web_request.body_size->len(body)
A:aiohttp.web_request.self._read_bytes->bytes(body)
A:aiohttp.web_request.self._post->MultiDictProxy(out)
A:aiohttp.web_request.field_ct->field.headers.get(hdrs.CONTENT_TYPE)
A:aiohttp.web_request.chunk->field.decode(chunk)
A:aiohttp.web_request.ff->FileField(field.name, field.filename, cast(io.BufferedReader, tmp), field_ct, field.headers)
A:aiohttp.web_request.charset->field.get_charset(default='utf-8')
A:aiohttp.web_request.ascii_encodable_path->self.path.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.web_request.ret->super().clone(method=method, rel_url=rel_url, headers=headers, scheme=scheme, host=host, remote=remote, client_max_size=client_max_size)
A:aiohttp.web_request.new_ret->cast(Request, ret)
A:aiohttp.web_request.idx->lst.index(app)
A:aiohttp.web_request.sublist->list(reversed(lst[:idx + 1]))
aiohttp.web_request.BaseRequest(self,message:RawRequestMessage,payload:StreamReader,protocol:'RequestHandler',payload_writer:AbstractStreamWriter,task:'asyncio.Task[None]',loop:asyncio.AbstractEventLoop,*,client_max_size:int=1024**2,state:Optional[Dict[str,Any]]=None,scheme:Optional[str]=None,host:Optional[str]=None,remote:Optional[str]=None)
aiohttp.web_request.BaseRequest.__bool__(self)->bool
aiohttp.web_request.BaseRequest.__delitem__(self,key:str)->None
aiohttp.web_request.BaseRequest.__eq__(self,other:object)->bool
aiohttp.web_request.BaseRequest.__getitem__(self,key:str)->Any
aiohttp.web_request.BaseRequest.__init__(self,message:RawRequestMessage,payload:StreamReader,protocol:'RequestHandler',payload_writer:AbstractStreamWriter,task:'asyncio.Task[None]',loop:asyncio.AbstractEventLoop,*,client_max_size:int=1024**2,state:Optional[Dict[str,Any]]=None,scheme:Optional[str]=None,host:Optional[str]=None,remote:Optional[str]=None)
aiohttp.web_request.BaseRequest.__iter__(self)->Iterator[str]
aiohttp.web_request.BaseRequest.__len__(self)->int
aiohttp.web_request.BaseRequest.__repr__(self)->str
aiohttp.web_request.BaseRequest.__setitem__(self,key:str,value:Any)->None
aiohttp.web_request.BaseRequest._cancel(self,exc:BaseException)->None
aiohttp.web_request.BaseRequest._etag_values(etag_header:str)->Iterator[ETag]
aiohttp.web_request.BaseRequest._finish(self)->None
aiohttp.web_request.BaseRequest._if_match_or_none_impl(cls,header_value:Optional[str])->Optional[Tuple[ETag, ...]]
aiohttp.web_request.BaseRequest._prepare_hook(self,response:StreamResponse)->None
aiohttp.web_request.BaseRequest.body_exists(self)->bool
aiohttp.web_request.BaseRequest.can_read_body(self)->bool
aiohttp.web_request.BaseRequest.client_max_size(self)->int
aiohttp.web_request.BaseRequest.clone(self,*,method:Union[str,_SENTINEL]=sentinel,rel_url:Union[StrOrURL,_SENTINEL]=sentinel,headers:Union[LooseHeaders,_SENTINEL]=sentinel,scheme:Union[str,_SENTINEL]=sentinel,host:Union[str,_SENTINEL]=sentinel,remote:Union[str,_SENTINEL]=sentinel,client_max_size:Union[int,_SENTINEL]=sentinel)->'BaseRequest'
aiohttp.web_request.BaseRequest.content(self)->StreamReader
aiohttp.web_request.BaseRequest.cookies(self)->Mapping[str, str]
aiohttp.web_request.BaseRequest.forwarded(self)->Tuple[Mapping[str, str], ...]
aiohttp.web_request.BaseRequest.get_extra_info(self,name:str,default:Any=None)->Any
aiohttp.web_request.BaseRequest.has_body(self)->bool
aiohttp.web_request.BaseRequest.headers(self)->'MultiMapping[str]'
aiohttp.web_request.BaseRequest.host(self)->str
aiohttp.web_request.BaseRequest.http_range(self)->slice
aiohttp.web_request.BaseRequest.if_match(self)->Optional[Tuple[ETag, ...]]
aiohttp.web_request.BaseRequest.if_modified_since(self)->Optional[datetime.datetime]
aiohttp.web_request.BaseRequest.if_none_match(self)->Optional[Tuple[ETag, ...]]
aiohttp.web_request.BaseRequest.if_range(self)->Optional[datetime.datetime]
aiohttp.web_request.BaseRequest.if_unmodified_since(self)->Optional[datetime.datetime]
aiohttp.web_request.BaseRequest.json(self,*,loads:JSONDecoder=DEFAULT_JSON_DECODER)->Any
aiohttp.web_request.BaseRequest.keep_alive(self)->bool
aiohttp.web_request.BaseRequest.loop(self)->asyncio.AbstractEventLoop
aiohttp.web_request.BaseRequest.message(self)->RawRequestMessage
aiohttp.web_request.BaseRequest.method(self)->str
aiohttp.web_request.BaseRequest.multipart(self)->MultipartReader
aiohttp.web_request.BaseRequest.path(self)->str
aiohttp.web_request.BaseRequest.path_qs(self)->str
aiohttp.web_request.BaseRequest.post(self)->'MultiDictProxy[Union[str, bytes, FileField]]'
aiohttp.web_request.BaseRequest.protocol(self)->'RequestHandler'
aiohttp.web_request.BaseRequest.query(self)->'MultiMapping[str]'
aiohttp.web_request.BaseRequest.query_string(self)->str
aiohttp.web_request.BaseRequest.raw_headers(self)->RawHeaders
aiohttp.web_request.BaseRequest.raw_path(self)->str
aiohttp.web_request.BaseRequest.read(self)->bytes
aiohttp.web_request.BaseRequest.rel_url(self)->URL
aiohttp.web_request.BaseRequest.release(self)->None
aiohttp.web_request.BaseRequest.remote(self)->Optional[str]
aiohttp.web_request.BaseRequest.scheme(self)->str
aiohttp.web_request.BaseRequest.secure(self)->bool
aiohttp.web_request.BaseRequest.task(self)->'asyncio.Task[None]'
aiohttp.web_request.BaseRequest.text(self)->str
aiohttp.web_request.BaseRequest.transport(self)->Optional[asyncio.Transport]
aiohttp.web_request.BaseRequest.url(self)->URL
aiohttp.web_request.BaseRequest.version(self)->HttpVersion
aiohttp.web_request.BaseRequest.writer(self)->AbstractStreamWriter
aiohttp.web_request.FileField
aiohttp.web_request.Request(self,*args:Any,**kwargs:Any)
aiohttp.web_request.Request.__init__(self,*args:Any,**kwargs:Any)
aiohttp.web_request.Request._prepare_hook(self,response:StreamResponse)->None
aiohttp.web_request.Request.app(self)->'Application'
aiohttp.web_request.Request.clone(self,*,method:Union[str,_SENTINEL]=sentinel,rel_url:Union[StrOrURL,_SENTINEL]=sentinel,headers:Union[LooseHeaders,_SENTINEL]=sentinel,scheme:Union[str,_SENTINEL]=sentinel,host:Union[str,_SENTINEL]=sentinel,remote:Union[str,_SENTINEL]=sentinel,client_max_size:Union[int,_SENTINEL]=sentinel)->'Request'
aiohttp.web_request.Request.config_dict(self)->ChainMapProxy
aiohttp.web_request.Request.match_info(self)->'UrlMappingMatchInfo'


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_fileresponse.py----------------------------------------
A:aiohttp.web_fileresponse.ENCODING_EXTENSIONS->MappingProxyType({ext: CONTENT_TYPES.encodings_map[ext] for ext in ('.br', '.gz')})
A:aiohttp.web_fileresponse.ADDITIONAL_CONTENT_TYPES->MappingProxyType({'application/gzip': '.gz', 'application/x-brotli': '.br', 'application/x-bzip2': '.bz2', 'application/x-compress': '.Z', 'application/x-xz': '.xz'})
A:aiohttp.web_fileresponse.self._path->pathlib.Path(path)
A:aiohttp.web_fileresponse.loop->asyncio.get_running_loop()
A:aiohttp.web_fileresponse.compressed_path->file_path.with_suffix(file_path.suffix + file_extension)
A:aiohttp.web_fileresponse.st->file_path.with_suffix(file_path.suffix + file_extension).lstat()
A:aiohttp.web_fileresponse.accept_encoding->request.headers.get(hdrs.ACCEPT_ENCODING, '').lower()
A:aiohttp.web_fileresponse.real_start->cast(int, start)
A:aiohttp.web_fileresponse.self.headers[hdrs.CONTENT_RANGE]->'bytes {}-{}/{}'.format(real_start, real_start + count - 1, file_size)
aiohttp.web_fileresponse.FileResponse(self,path:PathLike,chunk_size:int=256*1024,status:int=200,reason:Optional[str]=None,headers:Optional[LooseHeaders]=None)
aiohttp.web_fileresponse.FileResponse.__init__(self,path:PathLike,chunk_size:int=256*1024,status:int=200,reason:Optional[str]=None,headers:Optional[LooseHeaders]=None)
aiohttp.web_fileresponse.FileResponse._get_file_path_stat_encoding(self,accept_encoding:str)->Tuple[pathlib.Path, os.stat_result, Optional[str]]
aiohttp.web_fileresponse.FileResponse._not_modified(self,request:'BaseRequest',etag_value:str,last_modified:float)->Optional[AbstractStreamWriter]
aiohttp.web_fileresponse.FileResponse._precondition_failed(self,request:'BaseRequest')->Optional[AbstractStreamWriter]
aiohttp.web_fileresponse.FileResponse._sendfile(self,request:'BaseRequest',fobj:IO[Any],offset:int,count:int)->AbstractStreamWriter
aiohttp.web_fileresponse.FileResponse._sendfile_fallback(self,writer:AbstractStreamWriter,fobj:IO[Any],offset:int,count:int)->AbstractStreamWriter
aiohttp.web_fileresponse.FileResponse._strong_etag_match(etag_value:str,etags:Tuple[ETag,...])->bool
aiohttp.web_fileresponse.FileResponse.prepare(self,request:'BaseRequest')->Optional[AbstractStreamWriter]


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/client_ws.py----------------------------------------
A:aiohttp.client_ws.now->loop.time()
A:aiohttp.client_ws.when->calculate_timeout_when(now, self._pong_heartbeat, timeout_ceil_threshold)
A:aiohttp.client_ws.self._heartbeat_cb->loop.call_at(self._heartbeat_when, self._send_heartbeat)
A:aiohttp.client_ws.self._pong_response_cb->loop.call_at(when, self._pong_not_received)
A:aiohttp.client_ws.ping_task->loop.create_task(self._writer.ping())
A:aiohttp.client_ws.self._close_wait->self._loop.create_future()
aiohttp.client_ws.ClientWebSocketResponse(self,reader:'FlowControlDataQueue[WSMessage]',writer:WebSocketWriter,protocol:Optional[str],response:ClientResponse,timeout:float,autoclose:bool,autoping:bool,loop:asyncio.AbstractEventLoop,*,receive_timeout:Optional[float]=None,heartbeat:Optional[float]=None,compress:int=0,client_notakeover:bool=False)
aiohttp.client_ws.ClientWebSocketResponse.__aiter__(self)->'ClientWebSocketResponse'
aiohttp.client_ws.ClientWebSocketResponse.__anext__(self)->WSMessage
aiohttp.client_ws.ClientWebSocketResponse.__init__(self,reader:'FlowControlDataQueue[WSMessage]',writer:WebSocketWriter,protocol:Optional[str],response:ClientResponse,timeout:float,autoclose:bool,autoping:bool,loop:asyncio.AbstractEventLoop,*,receive_timeout:Optional[float]=None,heartbeat:Optional[float]=None,compress:int=0,client_notakeover:bool=False)
aiohttp.client_ws.ClientWebSocketResponse._cancel_heartbeat(self)->None
aiohttp.client_ws.ClientWebSocketResponse._cancel_pong_response_cb(self)->None
aiohttp.client_ws.ClientWebSocketResponse._handle_ping_pong_exception(self,exc:BaseException)->None
aiohttp.client_ws.ClientWebSocketResponse._ping_task_done(self,task:'asyncio.Task[None]')->None
aiohttp.client_ws.ClientWebSocketResponse._pong_not_received(self)->None
aiohttp.client_ws.ClientWebSocketResponse._reset_heartbeat(self)->None
aiohttp.client_ws.ClientWebSocketResponse._send_heartbeat(self)->None
aiohttp.client_ws.ClientWebSocketResponse._set_closed(self)->None
aiohttp.client_ws.ClientWebSocketResponse._set_closing(self)->None
aiohttp.client_ws.ClientWebSocketResponse.client_notakeover(self)->bool
aiohttp.client_ws.ClientWebSocketResponse.close(self,*,code:int=WSCloseCode.OK,message:bytes=b'')->bool
aiohttp.client_ws.ClientWebSocketResponse.close_code(self)->Optional[int]
aiohttp.client_ws.ClientWebSocketResponse.closed(self)->bool
aiohttp.client_ws.ClientWebSocketResponse.compress(self)->int
aiohttp.client_ws.ClientWebSocketResponse.exception(self)->Optional[BaseException]
aiohttp.client_ws.ClientWebSocketResponse.get_extra_info(self,name:str,default:Any=None)->Any
aiohttp.client_ws.ClientWebSocketResponse.ping(self,message:bytes=b'')->None
aiohttp.client_ws.ClientWebSocketResponse.pong(self,message:bytes=b'')->None
aiohttp.client_ws.ClientWebSocketResponse.protocol(self)->Optional[str]
aiohttp.client_ws.ClientWebSocketResponse.receive(self,timeout:Optional[float]=None)->WSMessage
aiohttp.client_ws.ClientWebSocketResponse.receive_bytes(self,*,timeout:Optional[float]=None)->bytes
aiohttp.client_ws.ClientWebSocketResponse.receive_json(self,*,loads:JSONDecoder=DEFAULT_JSON_DECODER,timeout:Optional[float]=None)->Any
aiohttp.client_ws.ClientWebSocketResponse.receive_str(self,*,timeout:Optional[float]=None)->str
aiohttp.client_ws.ClientWebSocketResponse.send_bytes(self,data:bytes,compress:Optional[int]=None)->None
aiohttp.client_ws.ClientWebSocketResponse.send_json(self,data:Any,compress:Optional[int]=None,*,dumps:JSONEncoder=DEFAULT_JSON_ENCODER)->None
aiohttp.client_ws.ClientWebSocketResponse.send_str(self,data:str,compress:Optional[int]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/payload.py----------------------------------------
A:aiohttp.payload.self._headers[hdrs.CONTENT_DISPOSITION]->content_disposition_header(disptype, quote_fields=quote_fields, _charset=_charset, **params)
A:aiohttp.payload.self._size->len(value)
A:aiohttp.payload.mimetype->parse_mimetype(content_type)
A:aiohttp.payload.real_encoding->parse_mimetype(content_type).parameters.get('charset', 'utf-8')
A:aiohttp.payload.kwargs['filename']->guess_filename(value)
A:aiohttp.payload.loop->asyncio.get_event_loop()
A:aiohttp.payload.encoding->parse_mimetype(content_type).parameters.get('charset', 'utf-8')
A:aiohttp.payload.position->self._value.tell()
A:aiohttp.payload.end->self._value.seek(0, os.SEEK_END)
A:aiohttp.payload.self._iter->value.__aiter__()
A:aiohttp.payload.PAYLOAD_REGISTRY->PayloadRegistry()
aiohttp.AsyncIterablePayload(self,value:_AsyncIterable,*args:Any,**kwargs:Any)
aiohttp.AsyncIterablePayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.BufferedReaderPayload(IOBasePayload)
aiohttp.BufferedReaderPayload.size(self)->Optional[int]
aiohttp.BytesIOPayload(IOBasePayload)
aiohttp.BytesIOPayload.size(self)->int
aiohttp.BytesPayload(self,value:Union[bytes,bytearray,memoryview],*args:Any,**kwargs:Any)
aiohttp.BytesPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.IOBasePayload(self,value:IO[Any],disposition:str='attachment',*args:Any,**kwargs:Any)
aiohttp.IOBasePayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.JsonPayload(self,value:Any,encoding:str='utf-8',content_type:str='application/json',dumps:JSONEncoder=json.dumps,*args:Any,**kwargs:Any)
aiohttp.Payload(self,value:Any,headers:Optional[Union[_CIMultiDict,Dict[str,str],Iterable[Tuple[str,str]]]]=None,content_type:Union[str,None,_SENTINEL]=sentinel,filename:Optional[str]=None,encoding:Optional[str]=None,**kwargs:Any)
aiohttp.Payload._binary_headers(self)->bytes
aiohttp.Payload.content_type(self)->str
aiohttp.Payload.encoding(self)->Optional[str]
aiohttp.Payload.filename(self)->Optional[str]
aiohttp.Payload.headers(self)->_CIMultiDict
aiohttp.Payload.set_content_disposition(self,disptype:str,quote_fields:bool=True,_charset:str='utf-8',**params:Any)->None
aiohttp.Payload.size(self)->Optional[int]
aiohttp.Payload.write(self,writer:AbstractStreamWriter)->None
aiohttp.PayloadRegistry(self)
aiohttp.PayloadRegistry.get(self,data:Any,*args:Any,_CHAIN:'Type[chain[_PayloadRegistryItem]]'=chain,**kwargs:Any)->'Payload'
aiohttp.PayloadRegistry.register(self,factory:PayloadType,type:Any,*,order:Order=Order.normal)->None
aiohttp.StringIOPayload(self,value:IO[str],*args:Any,**kwargs:Any)
aiohttp.StringPayload(self,value:str,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.TextIOPayload(self,value:TextIO,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.TextIOPayload.size(self)->Optional[int]
aiohttp.TextIOPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.get_payload(data:Any,*args:Any,**kwargs:Any)->'Payload'
aiohttp.payload.AsyncIterablePayload(self,value:_AsyncIterable,*args:Any,**kwargs:Any)
aiohttp.payload.AsyncIterablePayload.__init__(self,value:_AsyncIterable,*args:Any,**kwargs:Any)
aiohttp.payload.AsyncIterablePayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload.BufferedReaderPayload(IOBasePayload)
aiohttp.payload.BufferedReaderPayload.size(self)->Optional[int]
aiohttp.payload.BytesIOPayload(IOBasePayload)
aiohttp.payload.BytesIOPayload.size(self)->int
aiohttp.payload.BytesPayload(self,value:Union[bytes,bytearray,memoryview],*args:Any,**kwargs:Any)
aiohttp.payload.BytesPayload.__init__(self,value:Union[bytes,bytearray,memoryview],*args:Any,**kwargs:Any)
aiohttp.payload.BytesPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload.IOBasePayload(self,value:IO[Any],disposition:str='attachment',*args:Any,**kwargs:Any)
aiohttp.payload.IOBasePayload.__init__(self,value:IO[Any],disposition:str='attachment',*args:Any,**kwargs:Any)
aiohttp.payload.IOBasePayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload.JsonPayload(self,value:Any,encoding:str='utf-8',content_type:str='application/json',dumps:JSONEncoder=json.dumps,*args:Any,**kwargs:Any)
aiohttp.payload.JsonPayload.__init__(self,value:Any,encoding:str='utf-8',content_type:str='application/json',dumps:JSONEncoder=json.dumps,*args:Any,**kwargs:Any)
aiohttp.payload.LookupError(Exception)
aiohttp.payload.Order(str,enum.Enum)
aiohttp.payload.Payload(self,value:Any,headers:Optional[Union[_CIMultiDict,Dict[str,str],Iterable[Tuple[str,str]]]]=None,content_type:Union[str,None,_SENTINEL]=sentinel,filename:Optional[str]=None,encoding:Optional[str]=None,**kwargs:Any)
aiohttp.payload.Payload.__init__(self,value:Any,headers:Optional[Union[_CIMultiDict,Dict[str,str],Iterable[Tuple[str,str]]]]=None,content_type:Union[str,None,_SENTINEL]=sentinel,filename:Optional[str]=None,encoding:Optional[str]=None,**kwargs:Any)
aiohttp.payload.Payload._binary_headers(self)->bytes
aiohttp.payload.Payload.content_type(self)->str
aiohttp.payload.Payload.encoding(self)->Optional[str]
aiohttp.payload.Payload.filename(self)->Optional[str]
aiohttp.payload.Payload.headers(self)->_CIMultiDict
aiohttp.payload.Payload.set_content_disposition(self,disptype:str,quote_fields:bool=True,_charset:str='utf-8',**params:Any)->None
aiohttp.payload.Payload.size(self)->Optional[int]
aiohttp.payload.Payload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload.PayloadRegistry(self)
aiohttp.payload.PayloadRegistry.__init__(self)
aiohttp.payload.PayloadRegistry.get(self,data:Any,*args:Any,_CHAIN:'Type[chain[_PayloadRegistryItem]]'=chain,**kwargs:Any)->'Payload'
aiohttp.payload.PayloadRegistry.register(self,factory:PayloadType,type:Any,*,order:Order=Order.normal)->None
aiohttp.payload.StreamReaderPayload(self,value:StreamReader,*args:Any,**kwargs:Any)
aiohttp.payload.StreamReaderPayload.__init__(self,value:StreamReader,*args:Any,**kwargs:Any)
aiohttp.payload.StringIOPayload(self,value:IO[str],*args:Any,**kwargs:Any)
aiohttp.payload.StringIOPayload.__init__(self,value:IO[str],*args:Any,**kwargs:Any)
aiohttp.payload.StringPayload(self,value:str,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.payload.StringPayload.__init__(self,value:str,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.payload.TextIOPayload(self,value:TextIO,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.payload.TextIOPayload.__init__(self,value:TextIO,*args:Any,encoding:Optional[str]=None,content_type:Optional[str]=None,**kwargs:Any)
aiohttp.payload.TextIOPayload.size(self)->Optional[int]
aiohttp.payload.TextIOPayload.write(self,writer:AbstractStreamWriter)->None
aiohttp.payload.get_payload(data:Any,*args:Any,**kwargs:Any)->'Payload'
aiohttp.payload.payload_type(self,type:Any,*,order:Order=Order.normal)
aiohttp.payload.payload_type.__init__(self,type:Any,*,order:Order=Order.normal)
aiohttp.payload.register_payload(factory:Type['Payload'],type:Any,*,order:Order=Order.normal)->None
aiohttp.payload_type(self,type:Any,*,order:Order=Order.normal)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/locks.py----------------------------------------
A:aiohttp.locks.self._event->asyncio.Event()
A:aiohttp.locks.waiter->self._loop.create_task(self._event.wait())
aiohttp.locks.EventResultOrError(self,loop:asyncio.AbstractEventLoop)
aiohttp.locks.EventResultOrError.__init__(self,loop:asyncio.AbstractEventLoop)
aiohttp.locks.EventResultOrError.cancel(self)->None
aiohttp.locks.EventResultOrError.set(self,exc:Optional[BaseException]=None)->None
aiohttp.locks.EventResultOrError.wait(self)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_protocol.py----------------------------------------
A:aiohttp.web_protocol.ERROR->RawRequestMessage('UNKNOWN', '/', HttpVersion10, {}, {}, True, None, False, False, yarl.URL('/'))
A:aiohttp.web_protocol.self._lingering_time->float(lingering_time)
A:aiohttp.web_protocol.self._timeout_ceil_threshold->float(timeout_ceil_threshold)
A:aiohttp.web_protocol.real_transport->cast(asyncio.Transport, transport)
A:aiohttp.web_protocol.task->loop.create_task(coro)
A:aiohttp.web_protocol.exc->ConnectionResetError('Connection lost')
A:aiohttp.web_protocol.(messages, upgraded, tail)->self._request_parser.feed_data(data)
A:aiohttp.web_protocol.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.web_protocol.now->loop.time()
A:aiohttp.web_protocol.self._keepalive_handle->loop.call_at(close_time, self._process_keepalive)
A:aiohttp.web_protocol.self._handler_waiter->self._loop.create_future()
A:aiohttp.web_protocol.resp->Response(status=status, text=message, content_type=ct)
A:aiohttp.web_protocol.handler->asyncio.current_task(loop)
A:aiohttp.web_protocol.self._waiter->loop.create_future()
A:aiohttp.web_protocol.(message, payload)->self._messages.popleft()
A:aiohttp.web_protocol.start->loop.time()
A:aiohttp.web_protocol.writer->StreamWriter(self, loop)
A:aiohttp.web_protocol.request_handler->self._make_error_handler(message)
A:aiohttp.web_protocol.request->self._request_factory(message, payload, self, writer, handler)
A:aiohttp.web_protocol.coro->self._handle_request(request, start, request_handler)
A:aiohttp.web_protocol.self._keepalive->bool(resp.keep_alive)
A:aiohttp.web_protocol.title->'{0.value} {0.phrase}'.format(HTTPStatus.INTERNAL_SERVER_ERROR)
A:aiohttp.web_protocol.tb->html_escape(tb)
A:aiohttp.web_protocol.message->'<html><head><title>{title}</title></head><body>\n<h1>{title}</h1>\n{msg}\n</body></html>\n'.format(title=title, msg=msg)
aiohttp.web_protocol.PayloadAccessError(Exception)
aiohttp.web_protocol.RequestHandler(self,manager:'Server',*,loop:asyncio.AbstractEventLoop,keepalive_timeout:float=75.0,tcp_keepalive:bool=True,logger:Logger=server_logger,access_log_class:Type[AbstractAccessLogger]=AccessLogger,access_log:Logger=access_logger,access_log_format:str=AccessLogger.LOG_FORMAT,debug:bool=False,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,lingering_time:float=10.0,read_bufsize:int=2**16,auto_decompress:bool=True,timeout_ceil_threshold:float=5)
aiohttp.web_protocol.RequestHandler.__init__(self,manager:'Server',*,loop:asyncio.AbstractEventLoop,keepalive_timeout:float=75.0,tcp_keepalive:bool=True,logger:Logger=server_logger,access_log_class:Type[AbstractAccessLogger]=AccessLogger,access_log:Logger=access_logger,access_log_format:str=AccessLogger.LOG_FORMAT,debug:bool=False,max_line_size:int=8190,max_headers:int=32768,max_field_size:int=8190,lingering_time:float=10.0,read_bufsize:int=2**16,auto_decompress:bool=True,timeout_ceil_threshold:float=5)
aiohttp.web_protocol.RequestHandler.__repr__(self)->str
aiohttp.web_protocol.RequestHandler._handle_request(self,request:BaseRequest,start_time:float,request_handler:Callable[[BaseRequest],Awaitable[StreamResponse]])->Tuple[StreamResponse, bool]
aiohttp.web_protocol.RequestHandler._make_error_handler(self,err_info:_ErrInfo)->Callable[[BaseRequest], Awaitable[StreamResponse]]
aiohttp.web_protocol.RequestHandler._process_keepalive(self)->None
aiohttp.web_protocol.RequestHandler.close(self)->None
aiohttp.web_protocol.RequestHandler.connection_lost(self,exc:Optional[BaseException])->None
aiohttp.web_protocol.RequestHandler.connection_made(self,transport:asyncio.BaseTransport)->None
aiohttp.web_protocol.RequestHandler.data_received(self,data:bytes)->None
aiohttp.web_protocol.RequestHandler.eof_received(self)->None
aiohttp.web_protocol.RequestHandler.finish_response(self,request:BaseRequest,resp:StreamResponse,start_time:float)->bool
aiohttp.web_protocol.RequestHandler.force_close(self)->None
aiohttp.web_protocol.RequestHandler.handle_error(self,request:BaseRequest,status:int=500,exc:Optional[BaseException]=None,message:Optional[str]=None)->StreamResponse
aiohttp.web_protocol.RequestHandler.keep_alive(self,val:bool)->None
aiohttp.web_protocol.RequestHandler.keepalive_timeout(self)->float
aiohttp.web_protocol.RequestHandler.log_access(self,request:BaseRequest,response:StreamResponse,time:float)->None
aiohttp.web_protocol.RequestHandler.log_debug(self,*args:Any,**kw:Any)->None
aiohttp.web_protocol.RequestHandler.log_exception(self,*args:Any,**kw:Any)->None
aiohttp.web_protocol.RequestHandler.set_parser(self,parser:Any)->None
aiohttp.web_protocol.RequestHandler.shutdown(self,timeout:Optional[float]=15.0)->None
aiohttp.web_protocol.RequestHandler.start(self)->None
aiohttp.web_protocol.RequestPayloadError(Exception)
aiohttp.web_protocol._ErrInfo


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/http.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp3.10.4/lib/python3.9/site-packages/aiohttp/web_ws.py----------------------------------------
A:aiohttp.web_ws.now->loop.time()
A:aiohttp.web_ws.when->calculate_timeout_when(now, self._pong_heartbeat, timeout_ceil_threshold)
A:aiohttp.web_ws.self._heartbeat_cb->loop.call_at(self._heartbeat_when, self._send_heartbeat)
A:aiohttp.web_ws.self._pong_response_cb->loop.call_at(when, self._pong_not_received)
A:aiohttp.web_ws.ping_task->loop.create_task(self._writer.ping())
A:aiohttp.web_ws.(protocol, writer)->self._pre_start(request)
A:aiohttp.web_ws.version->headers.get(hdrs.SEC_WEBSOCKET_VERSION, '')
A:aiohttp.web_ws.key->headers.get(hdrs.SEC_WEBSOCKET_KEY)
A:aiohttp.web_ws.accept_val->base64.b64encode(hashlib.sha1(key.encode() + WS_KEY).digest()).decode()
A:aiohttp.web_ws.response_headers->CIMultiDict({hdrs.UPGRADE: 'websocket', hdrs.CONNECTION: 'upgrade', hdrs.SEC_WEBSOCKET_ACCEPT: accept_val})
A:aiohttp.web_ws.extensions->headers.get(hdrs.SEC_WEBSOCKET_EXTENSIONS)
A:aiohttp.web_ws.(compress, notakeover)->ws_ext_parse(extensions, isserver=True)
A:aiohttp.web_ws.enabledext->ws_ext_gen(compress=compress, isserver=True, server_notakeover=notakeover)
A:aiohttp.web_ws.(headers, protocol, compress, notakeover)->self._handshake(request)
A:aiohttp.web_ws.writer->WebSocketWriter(request._protocol, transport, compress=compress, notakeover=notakeover)
A:aiohttp.web_ws.self._reader->FlowControlDataQueue(request._protocol, 2 ** 16, loop=loop)
A:aiohttp.web_ws.(_, protocol, _, _)->self._handshake(request)
A:aiohttp.web_ws.self._close_wait->self._loop.create_future()
A:aiohttp.web_ws.self._exception->asyncio.TimeoutError()
aiohttp.web_ws.WebSocketReady
aiohttp.web_ws.WebSocketReady.__bool__(self)->bool
aiohttp.web_ws.WebSocketResponse(self,*,timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,protocols:Iterable[str]=(),compress:bool=True,max_msg_size:int=4*1024*1024)
aiohttp.web_ws.WebSocketResponse.__aiter__(self)->'WebSocketResponse'
aiohttp.web_ws.WebSocketResponse.__anext__(self)->WSMessage
aiohttp.web_ws.WebSocketResponse.__init__(self,*,timeout:float=10.0,receive_timeout:Optional[float]=None,autoclose:bool=True,autoping:bool=True,heartbeat:Optional[float]=None,protocols:Iterable[str]=(),compress:bool=True,max_msg_size:int=4*1024*1024)
aiohttp.web_ws.WebSocketResponse._cancel(self,exc:BaseException)->None
aiohttp.web_ws.WebSocketResponse._cancel_heartbeat(self)->None
aiohttp.web_ws.WebSocketResponse._cancel_pong_response_cb(self)->None
aiohttp.web_ws.WebSocketResponse._close_transport(self)->None
aiohttp.web_ws.WebSocketResponse._handle_ping_pong_exception(self,exc:BaseException)->None
aiohttp.web_ws.WebSocketResponse._handshake(self,request:BaseRequest)->Tuple['CIMultiDict[str]', str, bool, bool]
aiohttp.web_ws.WebSocketResponse._ping_task_done(self,task:'asyncio.Task[None]')->None
aiohttp.web_ws.WebSocketResponse._pong_not_received(self)->None
aiohttp.web_ws.WebSocketResponse._post_start(self,request:BaseRequest,protocol:str,writer:WebSocketWriter)->None
aiohttp.web_ws.WebSocketResponse._pre_start(self,request:BaseRequest)->Tuple[str, WebSocketWriter]
aiohttp.web_ws.WebSocketResponse._reset_heartbeat(self)->None
aiohttp.web_ws.WebSocketResponse._send_heartbeat(self)->None
aiohttp.web_ws.WebSocketResponse._set_closed(self)->None
aiohttp.web_ws.WebSocketResponse._set_closing(self,code:WSCloseCode)->None
aiohttp.web_ws.WebSocketResponse._set_code_close_transport(self,code:WSCloseCode)->None
aiohttp.web_ws.WebSocketResponse.can_prepare(self,request:BaseRequest)->WebSocketReady
aiohttp.web_ws.WebSocketResponse.close(self,*,code:int=WSCloseCode.OK,message:bytes=b'',drain:bool=True)->bool
aiohttp.web_ws.WebSocketResponse.close_code(self)->Optional[int]
aiohttp.web_ws.WebSocketResponse.closed(self)->bool
aiohttp.web_ws.WebSocketResponse.compress(self)->bool
aiohttp.web_ws.WebSocketResponse.exception(self)->Optional[BaseException]
aiohttp.web_ws.WebSocketResponse.get_extra_info(self,name:str,default:Any=None)->Any
aiohttp.web_ws.WebSocketResponse.ping(self,message:bytes=b'')->None
aiohttp.web_ws.WebSocketResponse.pong(self,message:bytes=b'')->None
aiohttp.web_ws.WebSocketResponse.prepare(self,request:BaseRequest)->AbstractStreamWriter
aiohttp.web_ws.WebSocketResponse.receive(self,timeout:Optional[float]=None)->WSMessage
aiohttp.web_ws.WebSocketResponse.receive_bytes(self,*,timeout:Optional[float]=None)->bytes
aiohttp.web_ws.WebSocketResponse.receive_json(self,*,loads:JSONDecoder=json.loads,timeout:Optional[float]=None)->Any
aiohttp.web_ws.WebSocketResponse.receive_str(self,*,timeout:Optional[float]=None)->str
aiohttp.web_ws.WebSocketResponse.send_bytes(self,data:bytes,compress:Optional[bool]=None)->None
aiohttp.web_ws.WebSocketResponse.send_json(self,data:Any,compress:Optional[bool]=None,*,dumps:JSONEncoder=json.dumps)->None
aiohttp.web_ws.WebSocketResponse.send_str(self,data:str,compress:Optional[bool]=None)->None
aiohttp.web_ws.WebSocketResponse.write(self,data:bytes)->None
aiohttp.web_ws.WebSocketResponse.write_eof(self)->None
aiohttp.web_ws.WebSocketResponse.ws_protocol(self)->Optional[str]

