
----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/abc.py----------------------------------------
aiohttp.abc.AbstractAccessLogger(self,logger,log_format)
aiohttp.abc.AbstractAccessLogger.__init__(self,logger,log_format)
aiohttp.abc.AbstractAccessLogger.log(self,request,response,time)
aiohttp.abc.AbstractCookieJar(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.__init__(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.clear(self)
aiohttp.abc.AbstractCookieJar.filter_cookies(self,request_url)
aiohttp.abc.AbstractCookieJar.update_cookies(self,cookies,response_url=None)
aiohttp.abc.AbstractMatchInfo(ABC)
aiohttp.abc.AbstractMatchInfo.add_app(self,app)
aiohttp.abc.AbstractMatchInfo.apps(self)
aiohttp.abc.AbstractMatchInfo.freeze(self)
aiohttp.abc.AbstractMatchInfo.get_info(self)
aiohttp.abc.AbstractMatchInfo.http_exception(self)
aiohttp.abc.AbstractResolver(ABC)
aiohttp.abc.AbstractRouter(self)
aiohttp.abc.AbstractRouter.__init__(self)
aiohttp.abc.AbstractRouter.freeze(self)
aiohttp.abc.AbstractRouter.frozen(self)
aiohttp.abc.AbstractRouter.post_init(self,app)
aiohttp.abc.AbstractStreamWriter(ABC)
aiohttp.abc.AbstractView(self,request)
aiohttp.abc.AbstractView.__await__(self)
aiohttp.abc.AbstractView.__init__(self,request)
aiohttp.abc.AbstractView.request(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/http_websocket.py----------------------------------------
A:aiohttp.http_websocket._WSMessageBase->collections.namedtuple('_WSMessageBase', ['type', 'data', 'extra'])
A:aiohttp.http_websocket.WS_CLOSED_MESSAGE->WSMessage(WSMsgType.CLOSED, None, None)
A:aiohttp.http_websocket.WS_CLOSING_MESSAGE->WSMessage(WSMsgType.CLOSING, None, None)
A:aiohttp.http_websocket.data[::4]->data[::4].translate(a).translate(a)
A:aiohttp.http_websocket.data[1::4]->data[1::4].translate(b).translate(b)
A:aiohttp.http_websocket.data[2::4]->data[2::4].translate(c).translate(c)
A:aiohttp.http_websocket.data[3::4]->data[3::4].translate(d).translate(d)
A:aiohttp.http_websocket._WS_DEFLATE_TRAILING->bytes([0, 0, 255, 255])
A:aiohttp.http_websocket._WS_EXT_RE->re.compile('^(?:;\\s*(?:(server_no_context_takeover)|(client_no_context_takeover)|(server_max_window_bits(?:=(\\d+))?)|(client_max_window_bits(?:=(\\d+))?)))*$')
A:aiohttp.http_websocket._WS_EXT_RE_SPLIT->re.compile('permessage-deflate([^,]+)?')
A:aiohttp.http_websocket.defext->ext.group(1)
A:aiohttp.http_websocket.match->re.compile('^(?:;\\s*(?:(server_no_context_takeover)|(client_no_context_takeover)|(server_max_window_bits(?:=(\\d+))?)|(client_max_window_bits(?:=(\\d+))?)))*$').match(defext)
A:aiohttp.http_websocket.compress->int(match.group(6))
A:aiohttp.http_websocket.self._frame_payload->bytearray()
A:aiohttp.http_websocket.self._decompressobj->zlib.decompressobj(wbits=-zlib.MAX_WBITS)
A:aiohttp.http_websocket.close_message->payload[2:].decode('utf-8')
A:aiohttp.http_websocket.msg->WSMessage(WSMsgType.CLOSE, 0, '')
A:aiohttp.http_websocket.payload_merged->self._decompressobj.decompress(payload_merged + _WS_DEFLATE_TRAILING)
A:aiohttp.http_websocket.text->self._decompressobj.decompress(payload_merged + _WS_DEFLATE_TRAILING).decode('utf-8')
A:aiohttp.http_websocket.buf_length->len(buf)
A:aiohttp.http_websocket.compressobj->zlib.compressobj(wbits=-compress)
A:aiohttp.http_websocket.self._compressobj->zlib.compressobj(wbits=-self.compress)
A:aiohttp.http_websocket.message->message.encode('utf-8').encode('utf-8')
A:aiohttp.http_websocket.msg_length->len(message)
A:aiohttp.http_websocket.header->PACK_LEN3(128 | rsv | opcode, 127 | mask_bit, msg_length)
A:aiohttp.http_websocket.mask->mask.to_bytes(4, 'big').to_bytes(4, 'big')
aiohttp.http_websocket.WSCloseCode(IntEnum)
aiohttp.http_websocket.WSHandshakeError(Exception)
aiohttp.http_websocket.WSMessage(_WSMessageBase)
aiohttp.http_websocket.WSMessage.json(self,*,loads=json.loads)
aiohttp.http_websocket.WSMsgType(IntEnum)
aiohttp.http_websocket.WSParserState(IntEnum)
aiohttp.http_websocket.WebSocketError(self,code,message)
aiohttp.http_websocket.WebSocketError.__init__(self,code,message)
aiohttp.http_websocket.WebSocketReader(self,queue,compress=True)
aiohttp.http_websocket.WebSocketReader.__init__(self,queue,compress=True)
aiohttp.http_websocket.WebSocketReader._feed_data(self,data)
aiohttp.http_websocket.WebSocketReader.feed_data(self,data)
aiohttp.http_websocket.WebSocketReader.feed_eof(self)
aiohttp.http_websocket.WebSocketReader.parse_frame(self,buf)
aiohttp.http_websocket.WebSocketWriter(self,protocol,transport,*,use_mask=False,limit=DEFAULT_LIMIT,random=random.Random(),compress=0,notakeover=False)
aiohttp.http_websocket.WebSocketWriter.__init__(self,protocol,transport,*,use_mask=False,limit=DEFAULT_LIMIT,random=random.Random(),compress=0,notakeover=False)
aiohttp.http_websocket.WebSocketWriter._send_frame(self,message,opcode,compress=None)
aiohttp.http_websocket.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp.http_websocket.WebSocketWriter.ping(self,message=b'')
aiohttp.http_websocket.WebSocketWriter.pong(self,message=b'')
aiohttp.http_websocket.WebSocketWriter.send(self,message,binary=False,compress=None)
aiohttp.http_websocket._websocket_mask_python(mask,data)
aiohttp.http_websocket.ws_ext_gen(compress=15,isserver=False,server_notakeover=False)
aiohttp.http_websocket.ws_ext_parse(extstr,isserver=False)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_server.py----------------------------------------
A:aiohttp.web_server.loop->asyncio.get_event_loop()
aiohttp.web_server.Server(self,handler,*,request_factory=None,loop=None,**kwargs)
aiohttp.web_server.Server.__init__(self,handler,*,request_factory=None,loop=None,**kwargs)
aiohttp.web_server.Server._make_request(self,message,payload,protocol,writer,task)
aiohttp.web_server.Server.connection_lost(self,handler,exc=None)
aiohttp.web_server.Server.connection_made(self,handler,transport)
aiohttp.web_server.Server.connections(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/tracing.py----------------------------------------
A:aiohttp.tracing.self._on_request_start->Signal(self)
A:aiohttp.tracing.self._on_request_end->Signal(self)
A:aiohttp.tracing.self._on_request_exception->Signal(self)
A:aiohttp.tracing.self._on_request_redirect->Signal(self)
A:aiohttp.tracing.self._on_connection_queued_start->Signal(self)
A:aiohttp.tracing.self._on_connection_queued_end->Signal(self)
A:aiohttp.tracing.self._on_connection_create_start->Signal(self)
A:aiohttp.tracing.self._on_connection_create_end->Signal(self)
A:aiohttp.tracing.self._on_connection_reuseconn->Signal(self)
A:aiohttp.tracing.self._on_dns_resolvehost_start->Signal(self)
A:aiohttp.tracing.self._on_dns_resolvehost_end->Signal(self)
A:aiohttp.tracing.self._on_dns_cache_hit->Signal(self)
A:aiohttp.tracing.self._on_dns_cache_miss->Signal(self)
A:aiohttp.tracing.method->attr.ib(type=str)
A:aiohttp.tracing.url->attr.ib(type=URL)
A:aiohttp.tracing.headers->attr.ib(type=CIMultiDict)
A:aiohttp.tracing.response->attr.ib(type=ClientResponse)
A:aiohttp.tracing.exception->attr.ib(type=Exception)
A:aiohttp.tracing.host->attr.ib(type=str)
aiohttp.Trace(self,session,trace_config,trace_config_ctx)
aiohttp.TraceConfig(self,trace_config_ctx_factory=SimpleNamespace)
aiohttp.TraceConfig.freeze(self)
aiohttp.TraceConfig.on_connection_create_end(self)
aiohttp.TraceConfig.on_connection_create_start(self)
aiohttp.TraceConfig.on_connection_queued_end(self)
aiohttp.TraceConfig.on_connection_queued_start(self)
aiohttp.TraceConfig.on_connection_reuseconn(self)
aiohttp.TraceConfig.on_dns_cache_hit(self)
aiohttp.TraceConfig.on_dns_cache_miss(self)
aiohttp.TraceConfig.on_dns_resolvehost_end(self)
aiohttp.TraceConfig.on_dns_resolvehost_start(self)
aiohttp.TraceConfig.on_request_end(self)
aiohttp.TraceConfig.on_request_exception(self)
aiohttp.TraceConfig.on_request_redirect(self)
aiohttp.TraceConfig.on_request_start(self)
aiohttp.TraceConfig.trace_config_ctx(self,trace_request_ctx=None)
aiohttp.TraceConnectionCreateEndParams
aiohttp.TraceConnectionCreateStartParams
aiohttp.TraceConnectionQueuedEndParams
aiohttp.TraceConnectionQueuedStartParams
aiohttp.TraceConnectionReuseconnParams
aiohttp.TraceDnsCacheHitParams
aiohttp.TraceDnsCacheMissParams
aiohttp.TraceDnsResolveHostEndParams
aiohttp.TraceDnsResolveHostStartParams
aiohttp.TraceRequestEndParams
aiohttp.TraceRequestExceptionParams
aiohttp.TraceRequestRedirectParams
aiohttp.TraceRequestStartParams
aiohttp.tracing.Trace(self,session,trace_config,trace_config_ctx)
aiohttp.tracing.Trace.__init__(self,session,trace_config,trace_config_ctx)
aiohttp.tracing.TraceConfig(self,trace_config_ctx_factory=SimpleNamespace)
aiohttp.tracing.TraceConfig.__init__(self,trace_config_ctx_factory=SimpleNamespace)
aiohttp.tracing.TraceConfig.freeze(self)
aiohttp.tracing.TraceConfig.on_connection_create_end(self)
aiohttp.tracing.TraceConfig.on_connection_create_start(self)
aiohttp.tracing.TraceConfig.on_connection_queued_end(self)
aiohttp.tracing.TraceConfig.on_connection_queued_start(self)
aiohttp.tracing.TraceConfig.on_connection_reuseconn(self)
aiohttp.tracing.TraceConfig.on_dns_cache_hit(self)
aiohttp.tracing.TraceConfig.on_dns_cache_miss(self)
aiohttp.tracing.TraceConfig.on_dns_resolvehost_end(self)
aiohttp.tracing.TraceConfig.on_dns_resolvehost_start(self)
aiohttp.tracing.TraceConfig.on_request_end(self)
aiohttp.tracing.TraceConfig.on_request_exception(self)
aiohttp.tracing.TraceConfig.on_request_redirect(self)
aiohttp.tracing.TraceConfig.on_request_start(self)
aiohttp.tracing.TraceConfig.trace_config_ctx(self,trace_request_ctx=None)
aiohttp.tracing.TraceConnectionCreateEndParams
aiohttp.tracing.TraceConnectionCreateStartParams
aiohttp.tracing.TraceConnectionQueuedEndParams
aiohttp.tracing.TraceConnectionQueuedStartParams
aiohttp.tracing.TraceConnectionReuseconnParams
aiohttp.tracing.TraceDnsCacheHitParams
aiohttp.tracing.TraceDnsCacheMissParams
aiohttp.tracing.TraceDnsResolveHostEndParams
aiohttp.tracing.TraceDnsResolveHostStartParams
aiohttp.tracing.TraceRequestEndParams
aiohttp.tracing.TraceRequestExceptionParams
aiohttp.tracing.TraceRequestRedirectParams
aiohttp.tracing.TraceRequestStartParams


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/worker.py----------------------------------------
A:aiohttp.worker.self.loop->asyncio.new_event_loop()
A:aiohttp.worker.params->dict(logger=self.log, keepalive_timeout=self.cfg.keepalive, access_log=access_log, access_log_format=self._get_valid_log_format(self.cfg.access_log_format))
A:aiohttp.worker.self._runner->aiohttp.web.AppRunner(self.wsgi, **params)
A:aiohttp.worker.self._task->self.loop.create_task(self._run())
A:aiohttp.worker.site->aiohttp.web.SockSite(self._runner, sock, ssl_context=ctx, shutdown_timeout=self.cfg.graceful_timeout / 100 * 95)
A:aiohttp.worker.pid->os.getpid()
A:aiohttp.worker.self._notify_waiterwaiter->self.loop.create_future()
A:aiohttp.worker.ctx->ssl.SSLContext(cfg.ssl_version)
aiohttp.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.GunicornUVLoopWebWorker.init_process(self)
aiohttp.GunicornWebWorker(self,*args,**kw)
aiohttp.GunicornWebWorker._create_ssl_context(cfg)
aiohttp.GunicornWebWorker._get_valid_log_format(self,source_format)
aiohttp.GunicornWebWorker._notify_waiter_done(self,waiter=None)
aiohttp.GunicornWebWorker._wait_next_notify(self)
aiohttp.GunicornWebWorker.handle_abort(self,sig,frame)
aiohttp.GunicornWebWorker.handle_quit(self,sig,frame)
aiohttp.GunicornWebWorker.init_process(self)
aiohttp.GunicornWebWorker.init_signals(self)
aiohttp.GunicornWebWorker.run(self)
aiohttp.worker.GunicornTokioWebWorker(GunicornWebWorker)
aiohttp.worker.GunicornTokioWebWorker.init_process(self)
aiohttp.worker.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.worker.GunicornUVLoopWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker(self,*args,**kw)
aiohttp.worker.GunicornWebWorker.__init__(self,*args,**kw)
aiohttp.worker.GunicornWebWorker._create_ssl_context(cfg)
aiohttp.worker.GunicornWebWorker._get_valid_log_format(self,source_format)
aiohttp.worker.GunicornWebWorker._notify_waiter_done(self,waiter=None)
aiohttp.worker.GunicornWebWorker._wait_next_notify(self)
aiohttp.worker.GunicornWebWorker.handle_abort(self,sig,frame)
aiohttp.worker.GunicornWebWorker.handle_quit(self,sig,frame)
aiohttp.worker.GunicornWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker.init_signals(self)
aiohttp.worker.GunicornWebWorker.run(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_fileresponse.py----------------------------------------
A:aiohttp.web_fileresponse.NOSENDFILE->bool(os.environ.get('AIOHTTP_NOSENDFILE'))
A:aiohttp.web_fileresponse.n->os.sendfile(out_fd, in_fd, offset, count)
A:aiohttp.web_fileresponse.out_socket->self.transport.get_extra_info('socket').dup()
A:aiohttp.web_fileresponse.out_fd->self.transport.get_extra_info('socket').dup().fileno()
A:aiohttp.web_fileresponse.in_fd->fobj.fileno()
A:aiohttp.web_fileresponse.offset->fobj.tell()
A:aiohttp.web_fileresponse.data->b''.join(self._sendfile_buffer)
A:aiohttp.web_fileresponse.fut->loop.create_future()
A:aiohttp.web_fileresponse.path->pathlib.Path(path)
A:aiohttp.web_fileresponse.writer->SendfileStreamWriter(request.protocol, transport, request.loop)
A:aiohttp.web_fileresponse.chunk->fobj.read(min(chunk_size, count))
A:aiohttp.web_fileresponse.gzip_path->filepath.with_name(filepath.name + '.gz')
A:aiohttp.web_fileresponse.st->filepath.stat()
A:aiohttp.web_fileresponse.(ct, encoding)->mimetypes.guess_type(str(filepath))
aiohttp.web_fileresponse.FileResponse(self,path,chunk_size=256*1024,*args,**kwargs)
aiohttp.web_fileresponse.FileResponse.__init__(self,path,chunk_size=256*1024,*args,**kwargs)
aiohttp.web_fileresponse.SendfileStreamWriter(self,*args,**kwargs)
aiohttp.web_fileresponse.SendfileStreamWriter.__init__(self,*args,**kwargs)
aiohttp.web_fileresponse.SendfileStreamWriter._sendfile_cb(self,fut,out_fd,in_fd,offset,count,loop,registered)
aiohttp.web_fileresponse.SendfileStreamWriter._write(self,chunk)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/payload_streamer.py----------------------------------------
A:aiohttp.payload_streamer.self.coro->asyncio.coroutine(coro)
aiohttp.StreamPayload(self,value,*args,**kwargs)
aiohttp.StreamWrapperPayload(Payload)
aiohttp._stream_wrapper(self,coro,args,kwargs)
aiohttp.payload_streamer.StreamPayload(self,value,*args,**kwargs)
aiohttp.payload_streamer.StreamPayload.__init__(self,value,*args,**kwargs)
aiohttp.payload_streamer.StreamWrapperPayload(Payload)
aiohttp.payload_streamer._stream_wrapper(self,coro,args,kwargs)
aiohttp.payload_streamer._stream_wrapper.__init__(self,coro,args,kwargs)
aiohttp.payload_streamer.streamer(self,coro)
aiohttp.payload_streamer.streamer.__init__(self,coro)
aiohttp.streamer(self,coro)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/multipart.py----------------------------------------
A:aiohttp.multipart.(disptype, *parts)->header.split(';')
A:aiohttp.multipart.item->parts.pop(0)
A:aiohttp.multipart.(key, value)->parts.pop(0).split('=', 1)
A:aiohttp.multipart.key->key.lower().strip().lower().strip()
A:aiohttp.multipart.value->''.join(parts)
A:aiohttp.multipart.(encoding, _, value)->''.join(parts).split("'", 2)
A:aiohttp.multipart.fnparams->sorted(((key, value) for (key, value) in params.items() if key.startswith(name_suf)))
A:aiohttp.multipart.(_, tail)->key.lower().strip().lower().strip().split('*', 1)
A:aiohttp.multipart.length->self.headers.get(CONTENT_LENGTH, None)
A:aiohttp.multipart.self._unread->deque()
A:aiohttp.multipart.data->urlencode(obj, doseq=True)
A:aiohttp.multipart.chunk_size->min(size, self._length - self._read_bytes)
A:aiohttp.multipart.idx->window.find(sub, max(0, len(self._prev_chunk) - len(sub)))
A:aiohttp.multipart.line->self._unread.popleft()
A:aiohttp.multipart.sline->self._unread.popleft().rstrip(b'\r\n')
A:aiohttp.multipart.encoding->payload.headers.get(CONTENT_ENCODING, '').lower()
A:aiohttp.multipart.ctype->'multipart/{}; boundary={}'.format(subtype, self._boundary_value)
A:aiohttp.multipart.mimetype->parse_mimetype(self.headers[CONTENT_TYPE])
A:aiohttp.multipart.(_, params)->parse_content_disposition(self.headers.get(CONTENT_DISPOSITION))
A:aiohttp.multipart.self._boundary->boundary.encode('ascii')
A:aiohttp.multipart.obj->list(obj.items())
A:aiohttp.multipart.chunk->self._compress.compress(chunk)
A:aiohttp.multipart.parser->HttpParser()
A:aiohttp.multipart.(headers, *_)->HttpParser().parse_headers(lines)
A:aiohttp.multipart.self._headers->CIMultiDict()
A:aiohttp.multipart._valid_tchar_regex->re.compile(b"\\A[!#$%&'*+\\-.^_`|~\\w]+\\Z")
A:aiohttp.multipart._invalid_qdtext_char_regex->re.compile(b'[\\x00-\\x08\\x0A-\\x1F\\x7F]')
A:aiohttp.multipart.quoted_value_content->quoted_value_content.replace(b'"', b'\\"').replace(b'"', b'\\"')
A:aiohttp.multipart.headers->CIMultiDict()
A:aiohttp.multipart.te_encoding->payload.headers.get(CONTENT_TRANSFER_ENCODING, '').lower()
A:aiohttp.multipart.payload.headers[CONTENT_LENGTH]->str(size)
A:aiohttp.multipart.w->MultipartPayloadWriter(writer)
A:aiohttp.multipart.self._encoding_buffer->bytearray()
A:aiohttp.multipart.self._compress->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.multipart.(div, mod)->divmod(len(buffer), 3)
A:aiohttp.multipart.enc_chunk->base64.b64encode(enc_chunk)
aiohttp.BadContentDispositionHeader(RuntimeWarning)
aiohttp.BadContentDispositionParam(RuntimeWarning)
aiohttp.BodyPartReader(self,boundary,headers,content)
aiohttp.BodyPartReader.__aiter__(self)
aiohttp.BodyPartReader._decode_content(self,data)
aiohttp.BodyPartReader._decode_content_transfer(self,data)
aiohttp.BodyPartReader.at_eof(self)
aiohttp.BodyPartReader.decode(self,data)
aiohttp.BodyPartReader.filename(self)
aiohttp.BodyPartReader.get_charset(self,default=None)
aiohttp.BodyPartReader.name(self)
aiohttp.BodyPartReaderPayload(self,value,*args,**kwargs)
aiohttp.MultipartPayloadWriter(self,writer)
aiohttp.MultipartPayloadWriter.enable_compression(self,encoding='deflate')
aiohttp.MultipartPayloadWriter.enable_encoding(self,encoding)
aiohttp.MultipartReader(self,headers,content)
aiohttp.MultipartReader.__aiter__(self)
aiohttp.MultipartReader._get_boundary(self)
aiohttp.MultipartReader._get_part_reader(self,headers)
aiohttp.MultipartReader.at_eof(self)
aiohttp.MultipartReader.from_response(cls,response)
aiohttp.MultipartResponseWrapper(self,resp,stream)
aiohttp.MultipartResponseWrapper.__aiter__(self)
aiohttp.MultipartResponseWrapper.at_eof(self)
aiohttp.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.MultipartWriter.__enter__(self)
aiohttp.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.MultipartWriter.__iter__(self)
aiohttp.MultipartWriter.__len__(self)
aiohttp.MultipartWriter._boundary_value(self)
aiohttp.MultipartWriter.append(self,obj,headers=None)
aiohttp.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.MultipartWriter.append_payload(self,payload)
aiohttp.MultipartWriter.boundary(self)
aiohttp.MultipartWriter.size(self)
aiohttp.content_disposition_filename(params,name='filename')
aiohttp.multipart.BadContentDispositionHeader(RuntimeWarning)
aiohttp.multipart.BadContentDispositionParam(RuntimeWarning)
aiohttp.multipart.BodyPartReader(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader.__aiter__(self)
aiohttp.multipart.BodyPartReader.__init__(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader._decode_content(self,data)
aiohttp.multipart.BodyPartReader._decode_content_transfer(self,data)
aiohttp.multipart.BodyPartReader.at_eof(self)
aiohttp.multipart.BodyPartReader.decode(self,data)
aiohttp.multipart.BodyPartReader.filename(self)
aiohttp.multipart.BodyPartReader.get_charset(self,default=None)
aiohttp.multipart.BodyPartReader.name(self)
aiohttp.multipart.BodyPartReaderPayload(self,value,*args,**kwargs)
aiohttp.multipart.BodyPartReaderPayload.__init__(self,value,*args,**kwargs)
aiohttp.multipart.MultipartPayloadWriter(self,writer)
aiohttp.multipart.MultipartPayloadWriter.__init__(self,writer)
aiohttp.multipart.MultipartPayloadWriter.enable_compression(self,encoding='deflate')
aiohttp.multipart.MultipartPayloadWriter.enable_encoding(self,encoding)
aiohttp.multipart.MultipartReader(self,headers,content)
aiohttp.multipart.MultipartReader.__aiter__(self)
aiohttp.multipart.MultipartReader.__init__(self,headers,content)
aiohttp.multipart.MultipartReader._get_boundary(self)
aiohttp.multipart.MultipartReader._get_part_reader(self,headers)
aiohttp.multipart.MultipartReader.at_eof(self)
aiohttp.multipart.MultipartReader.from_response(cls,response)
aiohttp.multipart.MultipartResponseWrapper(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.__aiter__(self)
aiohttp.multipart.MultipartResponseWrapper.__init__(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.at_eof(self)
aiohttp.multipart.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__enter__(self)
aiohttp.multipart.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.multipart.MultipartWriter.__init__(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__iter__(self)
aiohttp.multipart.MultipartWriter.__len__(self)
aiohttp.multipart.MultipartWriter._boundary_value(self)
aiohttp.multipart.MultipartWriter.append(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_payload(self,payload)
aiohttp.multipart.MultipartWriter.boundary(self)
aiohttp.multipart.MultipartWriter.size(self)
aiohttp.multipart.content_disposition_filename(params,name='filename')
aiohttp.multipart.parse_content_disposition(header)
aiohttp.parse_content_disposition(header)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/formdata.py----------------------------------------
A:aiohttp.formdata.self._writer->multipart.MultipartWriter('form-data')
A:aiohttp.formdata.fields->list(fields.items())
A:aiohttp.formdata.type_options->MultiDict({'name': name})
A:aiohttp.formdata.filename->guess_filename(value, name)
A:aiohttp.formdata.to_add->list(fields)
A:aiohttp.formdata.rec->list(fields).pop(0)
A:aiohttp.formdata.k->guess_filename(rec, 'unknown')
A:aiohttp.formdata.part->payload.get_payload(value, headers=headers, encoding=self._charset)
aiohttp.FormData(self,fields=(),quote_fields=True,charset=None)
aiohttp.FormData._gen_form_data(self)
aiohttp.FormData._gen_form_urlencoded(self)
aiohttp.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.FormData.add_fields(self,*fields)
aiohttp.FormData.is_multipart(self)
aiohttp.formdata.FormData(self,fields=(),quote_fields=True,charset=None)
aiohttp.formdata.FormData.__init__(self,fields=(),quote_fields=True,charset=None)
aiohttp.formdata.FormData._gen_form_data(self)
aiohttp.formdata.FormData._gen_form_urlencoded(self)
aiohttp.formdata.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.formdata.FormData.add_fields(self,*fields)
aiohttp.formdata.FormData.is_multipart(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/payload.py----------------------------------------
A:aiohttp.payload.self._headers->CIMultiDict()
A:aiohttp.payload.self._headers[hdrs.CONTENT_DISPOSITION]->content_disposition_header(disptype, quote_fields=quote_fields, **params)
A:aiohttp.payload.self._size->len(value)
A:aiohttp.payload.mimetype->parse_mimetype(content_type)
A:aiohttp.payload.encoding->parse_mimetype(content_type).parameters.get('charset', 'utf-8')
A:aiohttp.payload.kwargs['filename']->guess_filename(value)
A:aiohttp.payload.chunk->self._value.read(DEFAULT_LIMIT)
A:aiohttp.payload.position->self._value.tell()
A:aiohttp.payload.end->self._value.seek(0, os.SEEK_END)
A:aiohttp.payload.PAYLOAD_REGISTRY->PayloadRegistry()
aiohttp.BufferedReaderPayload(IOBasePayload)
aiohttp.BufferedReaderPayload.size(self)
aiohttp.BytesIOPayload(IOBasePayload)
aiohttp.BytesIOPayload.size(self)
aiohttp.BytesPayload(self,value,*args,**kwargs)
aiohttp.IOBasePayload(self,value,disposition='attachment',*args,**kwargs)
aiohttp.JsonPayload(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.LookupError(Exception)
aiohttp.Payload(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None,**kwargs)
aiohttp.Payload.content_type(self)
aiohttp.Payload.encoding(self)
aiohttp.Payload.filename(self)
aiohttp.Payload.headers(self)
aiohttp.Payload.set_content_disposition(self,disptype,quote_fields=True,**params)
aiohttp.Payload.size(self)
aiohttp.PayloadRegistry(self)
aiohttp.PayloadRegistry.get(self,data,*args,**kwargs)
aiohttp.PayloadRegistry.register(self,factory,type)
aiohttp.StringIOPayload(self,value,*args,**kwargs)
aiohttp.StringPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.TextIOPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.TextIOPayload.size(self)
aiohttp.get_payload(data,*args,**kwargs)
aiohttp.payload.BufferedReaderPayload(IOBasePayload)
aiohttp.payload.BufferedReaderPayload.size(self)
aiohttp.payload.BytesIOPayload(IOBasePayload)
aiohttp.payload.BytesIOPayload.size(self)
aiohttp.payload.BytesPayload(self,value,*args,**kwargs)
aiohttp.payload.BytesPayload.__init__(self,value,*args,**kwargs)
aiohttp.payload.IOBasePayload(self,value,disposition='attachment',*args,**kwargs)
aiohttp.payload.IOBasePayload.__init__(self,value,disposition='attachment',*args,**kwargs)
aiohttp.payload.JsonPayload(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.payload.JsonPayload.__init__(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.payload.LookupError(Exception)
aiohttp.payload.Payload(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None,**kwargs)
aiohttp.payload.Payload.__init__(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None,**kwargs)
aiohttp.payload.Payload.content_type(self)
aiohttp.payload.Payload.encoding(self)
aiohttp.payload.Payload.filename(self)
aiohttp.payload.Payload.headers(self)
aiohttp.payload.Payload.set_content_disposition(self,disptype,quote_fields=True,**params)
aiohttp.payload.Payload.size(self)
aiohttp.payload.PayloadRegistry(self)
aiohttp.payload.PayloadRegistry.__init__(self)
aiohttp.payload.PayloadRegistry.get(self,data,*args,**kwargs)
aiohttp.payload.PayloadRegistry.register(self,factory,type)
aiohttp.payload.StringIOPayload(self,value,*args,**kwargs)
aiohttp.payload.StringIOPayload.__init__(self,value,*args,**kwargs)
aiohttp.payload.StringPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.StringPayload.__init__(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload.__init__(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload.size(self)
aiohttp.payload.get_payload(data,*args,**kwargs)
aiohttp.payload.payload_type(self,type)
aiohttp.payload.payload_type.__init__(self,type)
aiohttp.payload.register_payload(factory,type)
aiohttp.payload_type(self,type)
aiohttp.register_payload(factory,type)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/http_exceptions.py----------------------------------------
A:aiohttp.http_exceptions.hdr->hdr.decode('utf-8', 'surrogateescape').decode('utf-8', 'surrogateescape')
A:aiohttp.http_exceptions.line->repr(line)
aiohttp.http_exceptions.BadHttpMessage(self,message,*,headers=None)
aiohttp.http_exceptions.BadHttpMessage.__init__(self,message,*,headers=None)
aiohttp.http_exceptions.BadStatusLine(self,line='')
aiohttp.http_exceptions.BadStatusLine.__init__(self,line='')
aiohttp.http_exceptions.ContentEncodingError(PayloadEncodingError)
aiohttp.http_exceptions.ContentLengthError(PayloadEncodingError)
aiohttp.http_exceptions.HttpBadRequest(BadHttpMessage)
aiohttp.http_exceptions.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.http_exceptions.HttpProcessingError.__init__(self,*,code=None,message='',headers=None)
aiohttp.http_exceptions.InvalidHeader(self,hdr)
aiohttp.http_exceptions.InvalidHeader.__init__(self,hdr)
aiohttp.http_exceptions.InvalidURLError(BadHttpMessage)
aiohttp.http_exceptions.LineTooLong(self,line,limit='Unknown')
aiohttp.http_exceptions.LineTooLong.__init__(self,line,limit='Unknown')
aiohttp.http_exceptions.PayloadEncodingError(BadHttpMessage)
aiohttp.http_exceptions.TransferEncodingError(PayloadEncodingError)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/frozenlist.py----------------------------------------
A:aiohttp.frozenlist.items->list(items)
aiohttp.frozenlist.PyFrozenList(self,items=None)
aiohttp.frozenlist.PyFrozenList.__delitem__(self,index)
aiohttp.frozenlist.PyFrozenList.__eq__(self,other)
aiohttp.frozenlist.PyFrozenList.__getitem__(self,index)
aiohttp.frozenlist.PyFrozenList.__init__(self,items=None)
aiohttp.frozenlist.PyFrozenList.__iter__(self)
aiohttp.frozenlist.PyFrozenList.__le__(self,other)
aiohttp.frozenlist.PyFrozenList.__len__(self)
aiohttp.frozenlist.PyFrozenList.__repr__(self)
aiohttp.frozenlist.PyFrozenList.__reversed__(self)
aiohttp.frozenlist.PyFrozenList.__setitem__(self,index,value)
aiohttp.frozenlist.PyFrozenList.freeze(self)
aiohttp.frozenlist.PyFrozenList.frozen(self)
aiohttp.frozenlist.PyFrozenList.insert(self,pos,item)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/log.py----------------------------------------
A:aiohttp.log.access_logger->logging.getLogger('aiohttp.access')
A:aiohttp.log.client_logger->logging.getLogger('aiohttp.client')
A:aiohttp.log.internal_logger->logging.getLogger('aiohttp.internal')
A:aiohttp.log.server_logger->logging.getLogger('aiohttp.server')
A:aiohttp.log.web_logger->logging.getLogger('aiohttp.web')
A:aiohttp.log.ws_logger->logging.getLogger('aiohttp.websocket')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/tcp_helpers.py----------------------------------------
A:aiohttp.tcp_helpers.sock->transport.get_extra_info('socket')
A:aiohttp.tcp_helpers.value->bool(value)
aiohttp.tcp_helpers.tcp_cork(transport,value)
aiohttp.tcp_helpers.tcp_nodelay(transport,value)
aiohttp.tcp_tcp_cork(transport,value)
aiohttp.tcp_tcp_nodelay(transport,value)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_response.py----------------------------------------
A:aiohttp.web_response.self._cookies->SimpleCookie()
A:aiohttp.web_response.self._headers->CIMultiDict()
A:aiohttp.web_response.self._status->int(status)
A:aiohttp.web_response.old->self._cookies.get(name)
A:aiohttp.web_response.value->int(value)
A:aiohttp.web_response.self._headers[hdrs.CONTENT_LENGTH]->str(len(self._compressed_body))
A:aiohttp.web_response.self._content_type->str(value)
A:aiohttp.web_response.self._content_dict['charset']->str(value).lower()
A:aiohttp.web_response.httpdate->self.headers.get(_LAST_MODIFIED)
A:aiohttp.web_response.timetuple->parsedate(httpdate)
A:aiohttp.web_response.self.headers[hdrs.LAST_MODIFIED]->time.strftime('%a, %d %b %Y %H:%M:%S GMT', value.utctimetuple())
A:aiohttp.web_response.params->'; '.join(('%s=%s' % i for i in self._content_dict.items()))
A:aiohttp.web_response.accept_encoding->request.headers.get(hdrs.ACCEPT_ENCODING, '').lower()
A:aiohttp.web_response.status_line->'HTTP/{}.{} {} {}\r\n'.format(version[0], version[1], self._status, self._reason)
A:aiohttp.web_response.info->'{} {} '.format(self._req.method, self._req.path)
A:aiohttp.web_response.headers->CIMultiDict(headers)
A:aiohttp.web_response.body->dumps(data).encode(charset)
A:aiohttp.web_response.self._bodybody->payload.PAYLOAD_REGISTRY.get(body)
A:aiohttp.web_response.headers[CONTENT_LENGTH]->str(size)
A:aiohttp.web_response.self._body->dumps(data).encode(self.charset)
A:aiohttp.web_response.compressobj->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.web_response.text->dumps(data)
aiohttp.web_response.ContentCoding(enum.Enum)
aiohttp.web_response.Response(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_response.Response.__init__(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_response.Response._do_start_compression(self,coding)
aiohttp.web_response.Response._start(self,request)
aiohttp.web_response.Response.body(self)
aiohttp.web_response.Response.body(self,body,CONTENT_TYPE=hdrs.CONTENT_TYPE,CONTENT_LENGTH=hdrs.CONTENT_LENGTH)
aiohttp.web_response.Response.content_length(self)
aiohttp.web_response.Response.content_length(self,value)
aiohttp.web_response.Response.text(self)
aiohttp.web_response.Response.text(self,text)
aiohttp.web_response.StreamResponse(self,*,status=200,reason=None,headers=None)
aiohttp.web_response.StreamResponse.__delitem__(self,key)
aiohttp.web_response.StreamResponse.__getitem__(self,key)
aiohttp.web_response.StreamResponse.__hash__(self)
aiohttp.web_response.StreamResponse.__init__(self,*,status=200,reason=None,headers=None)
aiohttp.web_response.StreamResponse.__iter__(self)
aiohttp.web_response.StreamResponse.__len__(self)
aiohttp.web_response.StreamResponse.__repr__(self)
aiohttp.web_response.StreamResponse.__setitem__(self,key,value)
aiohttp.web_response.StreamResponse._do_start_compression(self,coding)
aiohttp.web_response.StreamResponse._generate_content_type_header(self,CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web_response.StreamResponse._start(self,request,HttpVersion10=HttpVersion10,HttpVersion11=HttpVersion11,CONNECTION=hdrs.CONNECTION,DATE=hdrs.DATE,SERVER=hdrs.SERVER,CONTENT_TYPE=hdrs.CONTENT_TYPE,CONTENT_LENGTH=hdrs.CONTENT_LENGTH,SET_COOKIE=hdrs.SET_COOKIE,SERVER_SOFTWARE=SERVER_SOFTWARE,TRANSFER_ENCODING=hdrs.TRANSFER_ENCODING)
aiohttp.web_response.StreamResponse._start_compression(self,request)
aiohttp.web_response.StreamResponse.body_length(self)
aiohttp.web_response.StreamResponse.charset(self)
aiohttp.web_response.StreamResponse.charset(self,value)
aiohttp.web_response.StreamResponse.chunked(self)
aiohttp.web_response.StreamResponse.compression(self)
aiohttp.web_response.StreamResponse.content_length(self)
aiohttp.web_response.StreamResponse.content_length(self,value)
aiohttp.web_response.StreamResponse.content_type(self)
aiohttp.web_response.StreamResponse.content_type(self,value)
aiohttp.web_response.StreamResponse.cookies(self)
aiohttp.web_response.StreamResponse.del_cookie(self,name,*,domain=None,path='/')
aiohttp.web_response.StreamResponse.enable_chunked_encoding(self,chunk_size=None)
aiohttp.web_response.StreamResponse.enable_compression(self,force=None)
aiohttp.web_response.StreamResponse.force_close(self)
aiohttp.web_response.StreamResponse.headers(self)
aiohttp.web_response.StreamResponse.keep_alive(self)
aiohttp.web_response.StreamResponse.last_modified(self,_LAST_MODIFIED=hdrs.LAST_MODIFIED)
aiohttp.web_response.StreamResponse.last_modified(self,value)
aiohttp.web_response.StreamResponse.output_length(self)
aiohttp.web_response.StreamResponse.prepared(self)
aiohttp.web_response.StreamResponse.reason(self)
aiohttp.web_response.StreamResponse.set_cookie(self,name,value,*,expires=None,domain=None,max_age=None,path='/',secure=None,httponly=None,version=None)
aiohttp.web_response.StreamResponse.set_status(self,status,reason=None,_RESPONSES=RESPONSES)
aiohttp.web_response.StreamResponse.status(self)
aiohttp.web_response.StreamResponse.task(self)
aiohttp.web_response.json_response(data=sentinel,*,text=None,body=None,status=200,reason=None,headers=None,content_type='application/json',dumps=json.dumps)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/client_ws.py----------------------------------------
A:aiohttp.client_ws.self._heartbeat_cb->call_later(self._send_heartbeat, self._heartbeat, self._loop)
A:aiohttp.client_ws.self._pong_response_cb->call_later(self._pong_not_received, self._pong_heartbeat, self._loop)
A:aiohttp.client_ws.self._exception->asyncio.TimeoutError()
A:aiohttp.client_ws.self._waiting->self._loop.create_future()
aiohttp.client_ws.ClientWebSocketResponse(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop,*,receive_timeout=None,heartbeat=None,compress=0,client_notakeover=False)
aiohttp.client_ws.ClientWebSocketResponse.__aiter__(self)
aiohttp.client_ws.ClientWebSocketResponse.__init__(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop,*,receive_timeout=None,heartbeat=None,compress=0,client_notakeover=False)
aiohttp.client_ws.ClientWebSocketResponse._cancel_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse._pong_not_received(self)
aiohttp.client_ws.ClientWebSocketResponse._reset_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse._send_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse.client_notakeover(self)
aiohttp.client_ws.ClientWebSocketResponse.close_code(self)
aiohttp.client_ws.ClientWebSocketResponse.closed(self)
aiohttp.client_ws.ClientWebSocketResponse.compress(self)
aiohttp.client_ws.ClientWebSocketResponse.exception(self)
aiohttp.client_ws.ClientWebSocketResponse.get_extra_info(self,name,default=None)
aiohttp.client_ws.ClientWebSocketResponse.protocol(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/client_exceptions.py----------------------------------------
A:aiohttp.client_exceptions.certificate_errors->tuple()
A:aiohttp.client_exceptions.ssl_errors->tuple()
aiohttp.client_exceptions.ClientConnectionError(ClientError)
aiohttp.client_exceptions.ClientConnectorCertificateError(self,connection_key,certificate_error)
aiohttp.client_exceptions.ClientConnectorCertificateError.__init__(self,connection_key,certificate_error)
aiohttp.client_exceptions.ClientConnectorCertificateError.__str__(self)
aiohttp.client_exceptions.ClientConnectorCertificateError.certificate_error(self)
aiohttp.client_exceptions.ClientConnectorCertificateError.host(self)
aiohttp.client_exceptions.ClientConnectorCertificateError.port(self)
aiohttp.client_exceptions.ClientConnectorCertificateError.ssl(self)
aiohttp.client_exceptions.ClientConnectorError(self,connection_key,os_error)
aiohttp.client_exceptions.ClientConnectorError.__init__(self,connection_key,os_error)
aiohttp.client_exceptions.ClientConnectorError.__str__(self)
aiohttp.client_exceptions.ClientConnectorError.host(self)
aiohttp.client_exceptions.ClientConnectorError.os_error(self)
aiohttp.client_exceptions.ClientConnectorError.port(self)
aiohttp.client_exceptions.ClientConnectorError.ssl(self)
aiohttp.client_exceptions.ClientConnectorSSLError(*ssl_error_bases)
aiohttp.client_exceptions.ClientError(Exception)
aiohttp.client_exceptions.ClientHttpProxyError(ClientResponseError)
aiohttp.client_exceptions.ClientOSError(ClientConnectionError,OSError)
aiohttp.client_exceptions.ClientPayloadError(ClientError)
aiohttp.client_exceptions.ClientProxyConnectionError(ClientConnectorError)
aiohttp.client_exceptions.ClientResponseError(self,request_info,history,*,code=0,message='',headers=None)
aiohttp.client_exceptions.ClientResponseError.__init__(self,request_info,history,*,code=0,message='',headers=None)
aiohttp.client_exceptions.ClientSSLError(ClientConnectorError)
aiohttp.client_exceptions.ContentTypeError(ClientResponseError)
aiohttp.client_exceptions.InvalidURL(self,url)
aiohttp.client_exceptions.InvalidURL.__init__(self,url)
aiohttp.client_exceptions.InvalidURL.__repr__(self)
aiohttp.client_exceptions.InvalidURL.url(self)
aiohttp.client_exceptions.ServerConnectionError(ClientConnectionError)
aiohttp.client_exceptions.ServerDisconnectedError(self,message=None)
aiohttp.client_exceptions.ServerDisconnectedError.__init__(self,message=None)
aiohttp.client_exceptions.ServerFingerprintMismatch(self,expected,got,host,port)
aiohttp.client_exceptions.ServerFingerprintMismatch.__init__(self,expected,got,host,port)
aiohttp.client_exceptions.ServerFingerprintMismatch.__repr__(self)
aiohttp.client_exceptions.ServerTimeoutError(ServerConnectionError,asyncio.TimeoutError)
aiohttp.client_exceptions.WSServerHandshakeError(ClientResponseError)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/signals.py----------------------------------------
aiohttp.Signal(self,owner)
aiohttp.Signal.__repr__(self)
aiohttp.signals.Signal(self,owner)
aiohttp.signals.Signal.__init__(self,owner)
aiohttp.signals.Signal.__repr__(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/test_utils.py----------------------------------------
A:aiohttp.test_utils.self._ssl->kwargs.pop('ssl', None)
A:aiohttp.test_utils.self.port->unused_port()
A:aiohttp.test_utils.site->TCPSite(self.runner, host=self.host, port=self.port, ssl_context=self._ssl)
A:aiohttp.test_utils.self._root->URL('{}://{}:{}'.format(self.scheme, self.host, self.port))
A:aiohttp.test_utils.url->URL(path)
A:aiohttp.test_utils.srv->Server(self._handler, loop=self._loop, debug=True, **kwargs)
A:aiohttp.test_utils.cookie_jar->aiohttp.CookieJar(unsafe=True, loop=loop)
A:aiohttp.test_utils.self._session->ClientSession(loop=loop, cookie_jar=cookie_jar, **kwargs)
A:aiohttp.test_utils.self.loop->setup_test_loop()
A:aiohttp.test_utils.self.app->self.loop.run_until_complete(self.get_application())
A:aiohttp.test_utils.self.server->self.loop.run_until_complete(self.get_server(self.app))
A:aiohttp.test_utils.self.client->self.loop.run_until_complete(self.get_client(self.server))
A:aiohttp.test_utils.loop->unittest.mock.Mock()
A:aiohttp.test_utils.policy->asyncio.get_event_loop_policy()
A:aiohttp.test_utils.watcher->asyncio.SafeChildWatcher()
A:aiohttp.test_utils.closed->unittest.mock.Mock().is_closed()
A:aiohttp.test_utils.app->_create_app_mock()
A:aiohttp.test_utils.app.on_response_prepare->Signal(app)
A:aiohttp.test_utils.transport->_create_transport(sslcontext)
A:aiohttp.test_utils.task->unittest.mock.Mock()
A:aiohttp.test_utils.headers->CIMultiDict()
A:aiohttp.test_utils.raw_hdrs->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in headers.items()))
A:aiohttp.test_utils.message->RawRequestMessage(method, path, version, headers, raw_hdrs, closing, False, False, chunked, URL(path))
A:aiohttp.test_utils.protocol->unittest.mock.Mock()
A:aiohttp.test_utils.writer->unittest.mock.Mock()
A:aiohttp.test_utils.payload_writer->unittest.mock.Mock()
A:aiohttp.test_utils.payload_writer.write->make_mocked_coro(None)
A:aiohttp.test_utils.payload_writer.write_eof->make_mocked_coro(None)
A:aiohttp.test_utils.payload_writer.drain->make_mocked_coro(None)
A:aiohttp.test_utils.payload->unittest.mock.Mock()
A:aiohttp.test_utils.req->Request(message, payload, protocol, payload_writer, task, loop, client_max_size=client_max_size)
A:aiohttp.test_utils.match_info->UrlMappingMatchInfo({} if match_info is sentinel else match_info, mock.Mock())
aiohttp.test_utils.AioHTTPTestCase(unittest.TestCase)
aiohttp.test_utils.AioHTTPTestCase.get_app(self)
aiohttp.test_utils.AioHTTPTestCase.setUp(self)
aiohttp.test_utils.AioHTTPTestCase.tearDown(self)
aiohttp.test_utils.BaseTestServer(self,*,scheme=sentinel,loop=None,host='127.0.0.1',port=None,skip_url_asserts=False,**kwargs)
aiohttp.test_utils.BaseTestServer.__enter__(self)
aiohttp.test_utils.BaseTestServer.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.BaseTestServer.__init__(self,*,scheme=sentinel,loop=None,host='127.0.0.1',port=None,skip_url_asserts=False,**kwargs)
aiohttp.test_utils.BaseTestServer.closed(self)
aiohttp.test_utils.BaseTestServer.handler(self)
aiohttp.test_utils.BaseTestServer.make_url(self,path)
aiohttp.test_utils.BaseTestServer.started(self)
aiohttp.test_utils.RawTestServer(self,handler,*,scheme=sentinel,host='127.0.0.1',port=None,**kwargs)
aiohttp.test_utils.RawTestServer.__init__(self,handler,*,scheme=sentinel,host='127.0.0.1',port=None,**kwargs)
aiohttp.test_utils.TestClient(self,server,*,cookie_jar=None,loop=None,**kwargs)
aiohttp.test_utils.TestClient.__enter__(self)
aiohttp.test_utils.TestClient.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.TestClient.__init__(self,server,*,cookie_jar=None,loop=None,**kwargs)
aiohttp.test_utils.TestClient.delete(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.get(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.head(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.host(self)
aiohttp.test_utils.TestClient.make_url(self,path)
aiohttp.test_utils.TestClient.options(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.patch(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.port(self)
aiohttp.test_utils.TestClient.post(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.put(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.server(self)
aiohttp.test_utils.TestClient.session(self)
aiohttp.test_utils.TestClient.ws_connect(self,path,*args,**kwargs)
aiohttp.test_utils.TestServer(self,app,*,scheme=sentinel,host='127.0.0.1',port=None,**kwargs)
aiohttp.test_utils.TestServer.__init__(self,app,*,scheme=sentinel,host='127.0.0.1',port=None,**kwargs)
aiohttp.test_utils._create_app_mock()
aiohttp.test_utils._create_transport(sslcontext=None)
aiohttp.test_utils.loop_context(loop_factory=asyncio.new_event_loop,fast=False)
aiohttp.test_utils.make_mocked_coro(return_value=sentinel,raise_exception=sentinel)
aiohttp.test_utils.make_mocked_request(method,path,headers=None,*,match_info=sentinel,version=HttpVersion(1,1),closing=False,app=None,writer=sentinel,payload_writer=sentinel,protocol=sentinel,transport=sentinel,payload=sentinel,sslcontext=None,client_max_size=1024**2,loop=...)
aiohttp.test_utils.setup_test_loop(loop_factory=asyncio.new_event_loop)
aiohttp.test_utils.teardown_test_loop(loop,fast=False)
aiohttp.test_utils.unittest_run_loop(func,*args,**kwargs)
aiohttp.test_utils.unused_port()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_runner.py----------------------------------------
A:aiohttp.web_runner.loop->asyncio.get_event_loop()
A:aiohttp.web_runner.name->str(URL.build(scheme=scheme, host=host, port=port))
A:aiohttp.web_runner.self._sites->set()
aiohttp.web_runner.AppRunner(self,app,*,handle_signals=False,**kwargs)
aiohttp.web_runner.AppRunner.__init__(self,app,*,handle_signals=False,**kwargs)
aiohttp.web_runner.AppRunner.app(self)
aiohttp.web_runner.BaseRunner(self,*,handle_signals=False,**kwargs)
aiohttp.web_runner.BaseRunner.__init__(self,*,handle_signals=False,**kwargs)
aiohttp.web_runner.BaseRunner._check_site(self,site)
aiohttp.web_runner.BaseRunner._reg_site(self,site)
aiohttp.web_runner.BaseRunner._unreg_site(self,site)
aiohttp.web_runner.BaseRunner.server(self)
aiohttp.web_runner.BaseRunner.sites(self)
aiohttp.web_runner.BaseSite(self,runner,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.BaseSite.__init__(self,runner,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.BaseSite.name(self)
aiohttp.web_runner.GracefulExit(SystemExit)
aiohttp.web_runner.ServerRunner(self,web_server,*,handle_signals=False,**kwargs)
aiohttp.web_runner.ServerRunner.__init__(self,web_server,*,handle_signals=False,**kwargs)
aiohttp.web_runner.SockSite(self,runner,sock,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.SockSite.__init__(self,runner,sock,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.SockSite.name(self)
aiohttp.web_runner.TCPSite(self,runner,host=None,port=None,*,shutdown_timeout=60.0,ssl_context=None,backlog=128,reuse_address=None,reuse_port=None)
aiohttp.web_runner.TCPSite.__init__(self,runner,host=None,port=None,*,shutdown_timeout=60.0,ssl_context=None,backlog=128,reuse_address=None,reuse_port=None)
aiohttp.web_runner.TCPSite.name(self)
aiohttp.web_runner.UnixSite(self,runner,path,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.UnixSite.__init__(self,runner,path,*,shutdown_timeout=60.0,ssl_context=None,backlog=128)
aiohttp.web_runner.UnixSite.name(self)
aiohttp.web_runner._raise_graceful_exit()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_ws.py----------------------------------------
A:aiohttp.web_ws.ok->attr.ib(type=bool)
A:aiohttp.web_ws.protocol->attr.ib(type=str)
A:aiohttp.web_ws.self._heartbeat_cb->call_later(self._send_heartbeat, self._heartbeat, self._loop)
A:aiohttp.web_ws.self._pong_response_cb->call_later(self._pong_not_received, self._pong_heartbeat, self._loop)
A:aiohttp.web_ws.self._exception->asyncio.TimeoutError()
A:aiohttp.web_ws.(protocol, writer)->self._pre_start(request)
A:aiohttp.web_ws.version->headers.get(hdrs.SEC_WEBSOCKET_VERSION, '')
A:aiohttp.web_ws.key->headers.get(hdrs.SEC_WEBSOCKET_KEY)
A:aiohttp.web_ws.accept_val->base64.b64encode(hashlib.sha1(key.encode() + WS_KEY).digest()).decode()
A:aiohttp.web_ws.response_headers->CIMultiDict({hdrs.UPGRADE: 'websocket', hdrs.CONNECTION: 'upgrade', hdrs.TRANSFER_ENCODING: 'chunked', hdrs.SEC_WEBSOCKET_ACCEPT: accept_val})
A:aiohttp.web_ws.extensions->headers.get(hdrs.SEC_WEBSOCKET_EXTENSIONS)
A:aiohttp.web_ws.(compress, notakeover)->ws_ext_parse(extensions, isserver=True)
A:aiohttp.web_ws.enabledext->ws_ext_gen(compress=compress, isserver=True, server_notakeover=notakeover)
A:aiohttp.web_ws.(headers, protocol, compress, notakeover)->self._handshake(request)
A:aiohttp.web_ws.writer->WebSocketWriter(request._protocol, request._protocol.transport, compress=compress, notakeover=notakeover)
A:aiohttp.web_ws.self._reader->FlowControlDataQueue(request._protocol, limit=2 ** 16, loop=self._loop)
A:aiohttp.web_ws.(_, protocol, _, _)->self._handshake(request)
A:aiohttp.web_ws.self._waiting->self._loop.create_future()
aiohttp.web_ws.WebSocketReady
aiohttp.web_ws.WebSocketReady.__bool__(self)
aiohttp.web_ws.WebSocketResponse(self,*,timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,protocols=(),compress=True)
aiohttp.web_ws.WebSocketResponse.__aiter__(self)
aiohttp.web_ws.WebSocketResponse.__init__(self,*,timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,protocols=(),compress=True)
aiohttp.web_ws.WebSocketResponse._cancel_heartbeat(self)
aiohttp.web_ws.WebSocketResponse._handshake(self,request)
aiohttp.web_ws.WebSocketResponse._pong_not_received(self)
aiohttp.web_ws.WebSocketResponse._post_start(self,request,protocol,writer)
aiohttp.web_ws.WebSocketResponse._pre_start(self,request)
aiohttp.web_ws.WebSocketResponse._reset_heartbeat(self)
aiohttp.web_ws.WebSocketResponse._send_heartbeat(self)
aiohttp.web_ws.WebSocketResponse.can_prepare(self,request)
aiohttp.web_ws.WebSocketResponse.close_code(self)
aiohttp.web_ws.WebSocketResponse.closed(self)
aiohttp.web_ws.WebSocketResponse.compress(self)
aiohttp.web_ws.WebSocketResponse.exception(self)
aiohttp.web_ws.WebSocketResponse.ws_protocol(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_app.py----------------------------------------
A:aiohttp.web_app.ATTRS->frozenset(['logger', '_debug', '_router', '_loop', '_handler_args', '_middlewares', '_middlewares_handlers', '_run_middlewares', '_state', '_frozen', '_subapps', '_on_response_prepare', '_on_startup', '_on_shutdown', '_on_cleanup', '_client_max_size'])
A:aiohttp.web_app.router->UrlDispatcher()
A:aiohttp.web_app.self._middlewares->FrozenList(middlewares)
A:aiohttp.web_app.self._on_response_prepare->Signal(self)
A:aiohttp.web_app.self._on_startup->Signal(self)
A:aiohttp.web_app.self._on_shutdown->Signal(self)
A:aiohttp.web_app.self._on_cleanup->Signal(self)
A:aiohttp.web_app.loop->asyncio.get_event_loop()
A:aiohttp.web_app.self._debug->asyncio.get_event_loop().get_debug()
A:aiohttp.web_app.self._middlewares_handlers->tuple(self._prepare_middleware())
A:aiohttp.web_app.subsig->getattr(subapp, signame)
A:aiohttp.web_app.appsig->getattr(self, signame)
A:aiohttp.web_app.resource->PrefixedSubAppResource(prefix, subapp)
A:aiohttp.web_app.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web_app.handler->partial(m, handler=handler)
aiohttp.web_app.Application(self,*,logger=web_logger,router=None,middlewares=(),handler_args=None,client_max_size=1024**2,loop=None,debug=...)
aiohttp.web_app.Application.__delitem__(self,key)
aiohttp.web_app.Application.__eq__(self,other)
aiohttp.web_app.Application.__getitem__(self,key)
aiohttp.web_app.Application.__init__(self,*,logger=web_logger,router=None,middlewares=(),handler_args=None,client_max_size=1024**2,loop=None,debug=...)
aiohttp.web_app.Application.__init_subclass__(cls)
aiohttp.web_app.Application.__iter__(self)
aiohttp.web_app.Application.__len__(self)
aiohttp.web_app.Application.__repr__(self)
aiohttp.web_app.Application.__setattr__(self,name,val)
aiohttp.web_app.Application.__setitem__(self,key,value)
aiohttp.web_app.Application._check_frozen(self)
aiohttp.web_app.Application._make_request(self,message,payload,protocol,writer,task,_cls=Request)
aiohttp.web_app.Application._prepare_middleware(self)
aiohttp.web_app.Application._reg_subapp_signals(self,subapp)
aiohttp.web_app.Application._set_loop(self,loop)
aiohttp.web_app.Application.add_subapp(self,prefix,subapp)
aiohttp.web_app.Application.debug(self)
aiohttp.web_app.Application.freeze(self)
aiohttp.web_app.Application.frozen(self)
aiohttp.web_app.Application.loop(self)
aiohttp.web_app.Application.make_handler(self,*,loop=None,access_log_class=AccessLogger,**kwargs)
aiohttp.web_app.Application.middlewares(self)
aiohttp.web_app.Application.on_cleanup(self)
aiohttp.web_app.Application.on_response_prepare(self)
aiohttp.web_app.Application.on_shutdown(self)
aiohttp.web_app.Application.on_startup(self)
aiohttp.web_app.Application.router(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_middlewares.py----------------------------------------
A:aiohttp.web_middlewares.alt_request->request.clone(rel_url=path)
A:aiohttp.web_middlewares.(path, query)->request.raw_path.split('?', 1)
aiohttp.web_middlewares._fix_request_current_app(app)
aiohttp.web_middlewares.middleware(f)
aiohttp.web_middlewares.normalize_path_middleware(*,append_slash=True,merge_slashes=True,redirect_class=HTTPMovedPermanently)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/locks.py----------------------------------------
A:aiohttp.locks.self._event->asyncio.Event(loop=loop)
A:aiohttp.locks.self._waiters->collections.deque()
A:aiohttp.locks.waiter->self._loop.create_task(self._event.wait())
aiohttp.locks.EventResultOrError(self,loop)
aiohttp.locks.EventResultOrError.__init__(self,loop)
aiohttp.locks.EventResultOrError.cancel(self)
aiohttp.locks.EventResultOrError.set(self,exc=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/connector.py----------------------------------------
A:aiohttp.connector.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.connector.loop->asyncio.get_event_loop()
A:aiohttp.connector.self._acquired->set()
A:aiohttp.connector.self._acquired_per_host->defaultdict(set)
A:aiohttp.connector.self._waiters->defaultdict(list)
A:aiohttp.connector.self._factory->functools.partial(ResponseHandler, loop=loop)
A:aiohttp.connector.self.cookies->SimpleCookie()
A:aiohttp.connector.now->self._loop.time()
A:aiohttp.connector.transport->protocol.close()
A:aiohttp.connector.self._cleanup_handle->helpers.weakref_handle(self, '_cleanup', self._keepalive_timeout, self._loop)
A:aiohttp.connector.self._cleanup_closed_handle->helpers.weakref_handle(self, '_cleanup_closed', self._cleanup_closed_period, self._loop)
A:aiohttp.connector.fut->self._loop.create_future()
A:aiohttp.connector.proto->self._get(key)
A:aiohttp.connector.placeholder->_TransportPlaceholder()
A:aiohttp.connector.t1->self._loop.time()
A:aiohttp.connector.(proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector.self._timestamps[host]->monotonic()
A:aiohttp.connector.addrs->list(islice(loop, length))
A:aiohttp.connector.self._ssl->_merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)
A:aiohttp.connector.resolver->DefaultResolver(loop=self._loop)
A:aiohttp.connector.self._cached_hosts->_DNSCacheTable(ttl=ttl_dns_cache)
A:aiohttp.connector.self._throttle_dns_events[key]->EventResultOrError(self._loop)
A:aiohttp.connector.sslcontext->self._get_ssl_context(req)
A:aiohttp.connector.fingerprint->self._get_fingerprint(req)
A:aiohttp.connector.proxy_req->ClientRequest(hdrs.METH_GET, req.proxy, headers=headers, auth=req.proxy_auth, loop=self._loop, ssl=req.ssl)
A:aiohttp.connector.auth->ClientRequest(hdrs.METH_GET, req.proxy, headers=headers, auth=req.proxy_auth, loop=self._loop, ssl=req.ssl).headers.pop(hdrs.AUTHORIZATION, None)
A:aiohttp.connector.conn->Connection(self, key, proto, self._loop)
A:aiohttp.connector.proxy_resp->ClientRequest(hdrs.METH_GET, req.proxy, headers=headers, auth=req.proxy_auth, loop=self._loop, ssl=req.ssl).send(conn)
A:aiohttp.connector.rawsock->rawsock.dup().dup()
aiohttp.connector.BaseConnector(self,*,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,enable_cleanup_closed=False,loop=None)
aiohttp.connector.BaseConnector.__del__(self,_warnings=warnings)
aiohttp.connector.BaseConnector.__enter__(self)
aiohttp.connector.BaseConnector.__exit__(self,*exc)
aiohttp.connector.BaseConnector.__init__(self,*,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,enable_cleanup_closed=False,loop=None)
aiohttp.connector.BaseConnector._cleanup(self)
aiohttp.connector.BaseConnector._cleanup_closed(self)
aiohttp.connector.BaseConnector._drop_acquired_per_host(self,key,val)
aiohttp.connector.BaseConnector._get(self,key)
aiohttp.connector.BaseConnector._release(self,key,protocol,*,should_close=False)
aiohttp.connector.BaseConnector._release_acquired(self,key,proto)
aiohttp.connector.BaseConnector._release_waiter(self)
aiohttp.connector.BaseConnector.close(self)
aiohttp.connector.BaseConnector.closed(self)
aiohttp.connector.BaseConnector.force_close(self)
aiohttp.connector.BaseConnector.limit(self)
aiohttp.connector.BaseConnector.limit_per_host(self)
aiohttp.connector.Connection(self,connector,key,protocol,loop)
aiohttp.connector.Connection.__del__(self,_warnings=warnings)
aiohttp.connector.Connection.__init__(self,connector,key,protocol,loop)
aiohttp.connector.Connection.__repr__(self)
aiohttp.connector.Connection._notify_release(self)
aiohttp.connector.Connection.add_callback(self,callback)
aiohttp.connector.Connection.close(self)
aiohttp.connector.Connection.closed(self)
aiohttp.connector.Connection.detach(self)
aiohttp.connector.Connection.loop(self)
aiohttp.connector.Connection.protocol(self)
aiohttp.connector.Connection.release(self)
aiohttp.connector.Connection.transport(self)
aiohttp.connector.Connection.writer(self)
aiohttp.connector.TCPConnector(self,*,verify_ssl=True,fingerprint=None,use_dns_cache=True,ttl_dns_cache=10,family=0,ssl_context=None,ssl=None,local_addr=None,resolver=None,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,enable_cleanup_closed=False,loop=None)
aiohttp.connector.TCPConnector.__init__(self,*,verify_ssl=True,fingerprint=None,use_dns_cache=True,ttl_dns_cache=10,family=0,ssl_context=None,ssl=None,local_addr=None,resolver=None,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,enable_cleanup_closed=False,loop=None)
aiohttp.connector.TCPConnector._get_fingerprint(self,req)
aiohttp.connector.TCPConnector._get_ssl_context(self,req)
aiohttp.connector.TCPConnector._make_ssl_context(verified)
aiohttp.connector.TCPConnector.clear_dns_cache(self,host=None,port=None)
aiohttp.connector.TCPConnector.close(self)
aiohttp.connector.TCPConnector.family(self)
aiohttp.connector.TCPConnector.use_dns_cache(self)
aiohttp.connector.UnixConnector(self,path,force_close=False,keepalive_timeout=sentinel,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.UnixConnector.__init__(self,path,force_close=False,keepalive_timeout=sentinel,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.UnixConnector.path(self)
aiohttp.connector._DNSCacheTable(self,ttl=None)
aiohttp.connector._DNSCacheTable.__contains__(self,host)
aiohttp.connector._DNSCacheTable.__init__(self,ttl=None)
aiohttp.connector._DNSCacheTable.add(self,host,addrs)
aiohttp.connector._DNSCacheTable.clear(self)
aiohttp.connector._DNSCacheTable.expired(self,host)
aiohttp.connector._DNSCacheTable.next_addrs(self,host)
aiohttp.connector._DNSCacheTable.remove(self,host)
aiohttp.connector._TransportPlaceholder
aiohttp.connector._TransportPlaceholder.close(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/pytest_plugin.py----------------------------------------
A:aiohttp.pytest_plugin._loop->request.getfixturevalue('loop')
A:aiohttp.pytest_plugin.gen->func(*args, **kwargs)
A:aiohttp.pytest_plugin.loop->setup_test_loop()
A:aiohttp.pytest_plugin.fast->pyfuncitem.config.getoption('--aiohttp-fast')
A:aiohttp.pytest_plugin.existing_loop->pyfuncitem.funcargs.get('loop', None)
A:aiohttp.pytest_plugin.name->name.strip(' ?').strip(' ?')
A:aiohttp.pytest_plugin.server->TestServer(__param, loop=loop, **server_kwargs)
A:aiohttp.pytest_plugin.__param->__param(loop, *args, **kwargs)
A:aiohttp.pytest_plugin.client->TestClient(__param, loop=loop, **kwargs)
aiohttp.pytest_plugin._passthrough_loop_context(loop,fast=False)
aiohttp.pytest_plugin._runtime_warning_context()
aiohttp.pytest_plugin.aiohttp_client(loop)
aiohttp.pytest_plugin.aiohttp_raw_server(loop)
aiohttp.pytest_plugin.aiohttp_server(loop)
aiohttp.pytest_plugin.aiohttp_unused_port()
aiohttp.pytest_plugin.fast(request)
aiohttp.pytest_plugin.loop(loop_factory,fast,loop_debug)
aiohttp.pytest_plugin.loop_debug(request)
aiohttp.pytest_plugin.pytest_addoption(parser)
aiohttp.pytest_plugin.pytest_fixture_setup(fixturedef)
aiohttp.pytest_plugin.pytest_generate_tests(metafunc)
aiohttp.pytest_plugin.pytest_pycollect_makeitem(collector,name,obj)
aiohttp.pytest_plugin.pytest_pyfunc_call(pyfuncitem)
aiohttp.pytest_plugin.raw_test_server(aiohttp_raw_server)
aiohttp.pytest_plugin.test_client(aiohttp_client)
aiohttp.pytest_plugin.test_server(aiohttp_server)
aiohttp.pytest_plugin.unused_port(aiohttp_unused_port)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_exceptions.py----------------------------------------
A:aiohttp.web_exceptions.self.text->'{}: {}'.format(self.status, self.reason)
A:aiohttp.web_exceptions.self.headers['Location']->str(location)
A:aiohttp.web_exceptions.allow->','.join(sorted(allowed_methods))
A:aiohttp.web_exceptions.self.method->method.upper()
aiohttp.web_exceptions.HTTPAccepted(HTTPSuccessful)
aiohttp.web_exceptions.HTTPBadGateway(HTTPServerError)
aiohttp.web_exceptions.HTTPBadRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPClientError(HTTPError)
aiohttp.web_exceptions.HTTPConflict(HTTPClientError)
aiohttp.web_exceptions.HTTPCreated(HTTPSuccessful)
aiohttp.web_exceptions.HTTPError(HTTPException)
aiohttp.web_exceptions.HTTPException(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPException.__init__(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPExpectationFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPFailedDependency(HTTPClientError)
aiohttp.web_exceptions.HTTPForbidden(HTTPClientError)
aiohttp.web_exceptions.HTTPFound(_HTTPMove)
aiohttp.web_exceptions.HTTPGatewayTimeout(HTTPServerError)
aiohttp.web_exceptions.HTTPGone(HTTPClientError)
aiohttp.web_exceptions.HTTPInsufficientStorage(HTTPServerError)
aiohttp.web_exceptions.HTTPInternalServerError(HTTPServerError)
aiohttp.web_exceptions.HTTPLengthRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPMethodNotAllowed(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMethodNotAllowed.__init__(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMisdirectedRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPMovedPermanently(_HTTPMove)
aiohttp.web_exceptions.HTTPMultipleChoices(_HTTPMove)
aiohttp.web_exceptions.HTTPNetworkAuthenticationRequired(HTTPServerError)
aiohttp.web_exceptions.HTTPNoContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNonAuthoritativeInformation(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNotAcceptable(HTTPClientError)
aiohttp.web_exceptions.HTTPNotExtended(HTTPServerError)
aiohttp.web_exceptions.HTTPNotFound(HTTPClientError)
aiohttp.web_exceptions.HTTPNotImplemented(HTTPServerError)
aiohttp.web_exceptions.HTTPNotModified(HTTPRedirection)
aiohttp.web_exceptions.HTTPOk(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPartialContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPaymentRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPPermanentRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPPreconditionFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPPreconditionRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPProxyAuthenticationRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPRedirection(HTTPException)
aiohttp.web_exceptions.HTTPRequestEntityTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestHeaderFieldsTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestRangeNotSatisfiable(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestTimeout(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestURITooLong(HTTPClientError)
aiohttp.web_exceptions.HTTPResetContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPSeeOther(_HTTPMove)
aiohttp.web_exceptions.HTTPServerError(HTTPError)
aiohttp.web_exceptions.HTTPServiceUnavailable(HTTPServerError)
aiohttp.web_exceptions.HTTPSuccessful(HTTPException)
aiohttp.web_exceptions.HTTPTemporaryRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPTooManyRequests(HTTPClientError)
aiohttp.web_exceptions.HTTPUnauthorized(HTTPClientError)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.__init__(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnprocessableEntity(HTTPClientError)
aiohttp.web_exceptions.HTTPUnsupportedMediaType(HTTPClientError)
aiohttp.web_exceptions.HTTPUpgradeRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPUseProxy(_HTTPMove)
aiohttp.web_exceptions.HTTPVariantAlsoNegotiates(HTTPServerError)
aiohttp.web_exceptions.HTTPVersionNotSupported(HTTPServerError)
aiohttp.web_exceptions._HTTPMove(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions._HTTPMove.__init__(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/cookiejar.py----------------------------------------
A:aiohttp.cookiejar.DATE_TOKENS_RE->re.compile('[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]*(?P<token>[\\x00-\\x08\\x0A-\\x1F\\d:a-zA-Z\\x7F-\\xFF]+)')
A:aiohttp.cookiejar.DATE_HMS_TIME_RE->re.compile('(\\d{1,2}):(\\d{1,2}):(\\d{1,2})')
A:aiohttp.cookiejar.DATE_DAY_OF_MONTH_RE->re.compile('(\\d{1,2})')
A:aiohttp.cookiejar.DATE_MONTH_RE->re.compile('(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)', re.I)
A:aiohttp.cookiejar.DATE_YEAR_RE->re.compile('(\\d{2,4})')
A:aiohttp.cookiejar.self._cookies->pickle.load(f)
A:aiohttp.cookiejar.self._host_only_cookies->set()
A:aiohttp.cookiejar.self._next_expiration->min(self._next_expiration, when)
A:aiohttp.cookiejar.file_path->pathlib.Path(file_path)
A:aiohttp.cookiejar.now->self._loop.time()
A:aiohttp.cookiejar.next_expiration->min(next_expiration, when)
A:aiohttp.cookiejar.cookies->cookies.items().items()
A:aiohttp.cookiejar.tmp->SimpleCookie()
A:aiohttp.cookiejar.delta_seconds->int(max_age)
A:aiohttp.cookiejar.expire_time->self._parse_date(expires)
A:aiohttp.cookiejar.request_url->URL(request_url)
A:aiohttp.cookiejar.filtered->SimpleCookie()
A:aiohttp.cookiejar.mrsl_val->cookie.get(cookie.key, Morsel())
A:aiohttp.cookiejar.token->token_match.group('token')
A:aiohttp.cookiejar.time_match->cls.DATE_HMS_TIME_RE.match(token)
A:aiohttp.cookiejar.day_match->cls.DATE_DAY_OF_MONTH_RE.match(token)
A:aiohttp.cookiejar.day->int(day_match.group())
A:aiohttp.cookiejar.month_match->cls.DATE_MONTH_RE.match(token)
A:aiohttp.cookiejar.year_match->cls.DATE_YEAR_RE.match(token)
A:aiohttp.cookiejar.year->int(year_match.group())
aiohttp.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.CookieJar.__iter__(self)
aiohttp.CookieJar.__len__(self)
aiohttp.CookieJar._do_expiration(self)
aiohttp.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.CookieJar._is_domain_match(domain,hostname)
aiohttp.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.CookieJar._parse_date(cls,date_str)
aiohttp.CookieJar.clear(self)
aiohttp.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.CookieJar.load(self,file_path)
aiohttp.CookieJar.save(self,file_path)
aiohttp.CookieJar.update_cookies(self,cookies,response_url=URL())
aiohttp.DummyCookieJar(self,*,loop=None)
aiohttp.DummyCookieJar.__iter__(self)
aiohttp.DummyCookieJar.__len__(self)
aiohttp.DummyCookieJar.clear(self)
aiohttp.DummyCookieJar.filter_cookies(self,request_url)
aiohttp.DummyCookieJar.update_cookies(self,cookies,response_url=None)
aiohttp.cookiejar.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__init__(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__iter__(self)
aiohttp.cookiejar.CookieJar.__len__(self)
aiohttp.cookiejar.CookieJar._do_expiration(self)
aiohttp.cookiejar.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.cookiejar.CookieJar._is_domain_match(domain,hostname)
aiohttp.cookiejar.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.cookiejar.CookieJar._parse_date(cls,date_str)
aiohttp.cookiejar.CookieJar.clear(self)
aiohttp.cookiejar.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.cookiejar.CookieJar.load(self,file_path)
aiohttp.cookiejar.CookieJar.save(self,file_path)
aiohttp.cookiejar.CookieJar.update_cookies(self,cookies,response_url=URL())
aiohttp.cookiejar.DummyCookieJar(self,*,loop=None)
aiohttp.cookiejar.DummyCookieJar.__init__(self,*,loop=None)
aiohttp.cookiejar.DummyCookieJar.__iter__(self)
aiohttp.cookiejar.DummyCookieJar.__len__(self)
aiohttp.cookiejar.DummyCookieJar.clear(self)
aiohttp.cookiejar.DummyCookieJar.filter_cookies(self,request_url)
aiohttp.cookiejar.DummyCookieJar.update_cookies(self,cookies,response_url=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/resolver.py----------------------------------------
A:aiohttp.resolver.loop->asyncio.get_event_loop()
A:aiohttp.resolver.self._resolver->aiodns.DNSResolver(*args, loop=loop, **kwargs)
aiohttp.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.ThreadedResolver(self,loop=None)
aiohttp.resolver.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.resolver.AsyncResolver.__init__(self,loop=None,*args,**kwargs)
aiohttp.resolver.ThreadedResolver(self,loop=None)
aiohttp.resolver.ThreadedResolver.__init__(self,loop=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/streams.py----------------------------------------
A:aiohttp.streams.loop->asyncio.get_event_loop()
A:aiohttp.streams.self._buffer->collections.deque()
A:aiohttp.streams.self._eof_waiter->self._loop.create_future()
A:aiohttp.streams.waiterself._waiter->self._loop.create_future()
A:aiohttp.streams.data->self._buffer.popleft()
A:aiohttp.streams.partial->b''.join(blocks)
A:aiohttp.streams.chunk->self._read_nowait_chunk(n)
A:aiohttp.streams.EMPTY_PAYLOAD->EmptyStreamReader()
A:aiohttp.streams.self._waiter->self._loop.create_future()
A:aiohttp.streams.(data, size)->self._buffer.popleft()
aiohttp.AsyncStreamIterator(self,read_func)
aiohttp.AsyncStreamIterator.__aiter__(self)
aiohttp.AsyncStreamReaderMixin
aiohttp.AsyncStreamReaderMixin.__aiter__(self)
aiohttp.AsyncStreamReaderMixin.iter_any(self)
aiohttp.AsyncStreamReaderMixin.iter_chunked(self,n)
aiohttp.AsyncStreamReaderMixin.iter_chunks(self)
aiohttp.ChunkTupleAsyncStreamIterator(AsyncStreamIterator)
aiohttp.DataQueue(self,*,loop=None)
aiohttp.DataQueue.__aiter__(self)
aiohttp.DataQueue.__len__(self)
aiohttp.DataQueue.at_eof(self)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data,size=0)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.is_eof(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.EmptyStreamReader.at_eof(self)
aiohttp.EmptyStreamReader.exception(self)
aiohttp.EmptyStreamReader.feed_data(self,data)
aiohttp.EmptyStreamReader.feed_eof(self)
aiohttp.EmptyStreamReader.is_eof(self)
aiohttp.EmptyStreamReader.on_eof(self,callback)
aiohttp.EmptyStreamReader.read_nowait(self)
aiohttp.EmptyStreamReader.set_exception(self,exc)
aiohttp.EofStream(Exception)
aiohttp.FlowControlDataQueue(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.StreamReader(self,protocol,*,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.StreamReader.__repr__(self)
aiohttp.StreamReader._read_nowait(self,n)
aiohttp.StreamReader._read_nowait_chunk(self,n)
aiohttp.StreamReader.at_eof(self)
aiohttp.StreamReader.begin_http_chunk_receiving(self)
aiohttp.StreamReader.end_http_chunk_receiving(self)
aiohttp.StreamReader.exception(self)
aiohttp.StreamReader.feed_data(self,data,size=0)
aiohttp.StreamReader.feed_eof(self)
aiohttp.StreamReader.is_eof(self)
aiohttp.StreamReader.on_eof(self,callback)
aiohttp.StreamReader.read_nowait(self,n=-1)
aiohttp.StreamReader.set_exception(self,exc)
aiohttp.StreamReader.unread_data(self,data)
aiohttp.streams.AsyncStreamIterator(self,read_func)
aiohttp.streams.AsyncStreamIterator.__aiter__(self)
aiohttp.streams.AsyncStreamIterator.__init__(self,read_func)
aiohttp.streams.AsyncStreamReaderMixin
aiohttp.streams.AsyncStreamReaderMixin.__aiter__(self)
aiohttp.streams.AsyncStreamReaderMixin.iter_any(self)
aiohttp.streams.AsyncStreamReaderMixin.iter_chunked(self,n)
aiohttp.streams.AsyncStreamReaderMixin.iter_chunks(self)
aiohttp.streams.ChunkTupleAsyncStreamIterator(AsyncStreamIterator)
aiohttp.streams.DataQueue(self,*,loop=None)
aiohttp.streams.DataQueue.__aiter__(self)
aiohttp.streams.DataQueue.__init__(self,*,loop=None)
aiohttp.streams.DataQueue.__len__(self)
aiohttp.streams.DataQueue.at_eof(self)
aiohttp.streams.DataQueue.exception(self)
aiohttp.streams.DataQueue.feed_data(self,data,size=0)
aiohttp.streams.DataQueue.feed_eof(self)
aiohttp.streams.DataQueue.is_eof(self)
aiohttp.streams.DataQueue.set_exception(self,exc)
aiohttp.streams.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.streams.EmptyStreamReader.at_eof(self)
aiohttp.streams.EmptyStreamReader.exception(self)
aiohttp.streams.EmptyStreamReader.feed_data(self,data)
aiohttp.streams.EmptyStreamReader.feed_eof(self)
aiohttp.streams.EmptyStreamReader.is_eof(self)
aiohttp.streams.EmptyStreamReader.on_eof(self,callback)
aiohttp.streams.EmptyStreamReader.read_nowait(self)
aiohttp.streams.EmptyStreamReader.set_exception(self,exc)
aiohttp.streams.EofStream(Exception)
aiohttp.streams.FlowControlDataQueue(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.__init__(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.streams.StreamReader(self,protocol,*,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.streams.StreamReader.__init__(self,protocol,*,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.streams.StreamReader.__repr__(self)
aiohttp.streams.StreamReader._read_nowait(self,n)
aiohttp.streams.StreamReader._read_nowait_chunk(self,n)
aiohttp.streams.StreamReader.at_eof(self)
aiohttp.streams.StreamReader.begin_http_chunk_receiving(self)
aiohttp.streams.StreamReader.end_http_chunk_receiving(self)
aiohttp.streams.StreamReader.exception(self)
aiohttp.streams.StreamReader.feed_data(self,data,size=0)
aiohttp.streams.StreamReader.feed_eof(self)
aiohttp.streams.StreamReader.is_eof(self)
aiohttp.streams.StreamReader.on_eof(self,callback)
aiohttp.streams.StreamReader.read_nowait(self,n=-1)
aiohttp.streams.StreamReader.set_exception(self,exc)
aiohttp.streams.StreamReader.unread_data(self,data)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/client_proto.py----------------------------------------
A:aiohttp.client_proto.uncompleted->self._parser.feed_eof()
A:aiohttp.client_proto.exc->ServerDisconnectedError(uncompleted)
A:aiohttp.client_proto.self._parser->HttpResponseParser(self, self._loop, timer=timer, payload_exception=ClientPayloadError, read_until_eof=read_until_eof, auto_decompress=auto_decompress)
A:aiohttp.client_proto.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.client_proto.(messages, upgraded, tail)->self._parser.feed_data(data)
aiohttp.client_proto.ResponseHandler(self,*,loop=None)
aiohttp.client_proto.ResponseHandler.__init__(self,*,loop=None)
aiohttp.client_proto.ResponseHandler.close(self)
aiohttp.client_proto.ResponseHandler.connection_lost(self,exc)
aiohttp.client_proto.ResponseHandler.connection_made(self,transport)
aiohttp.client_proto.ResponseHandler.data_received(self,data)
aiohttp.client_proto.ResponseHandler.eof_received(self)
aiohttp.client_proto.ResponseHandler.is_connected(self)
aiohttp.client_proto.ResponseHandler.pause_reading(self)
aiohttp.client_proto.ResponseHandler.resume_reading(self)
aiohttp.client_proto.ResponseHandler.set_exception(self,exc)
aiohttp.client_proto.ResponseHandler.set_parser(self,parser,payload)
aiohttp.client_proto.ResponseHandler.set_response_params(self,*,timer=None,skip_payload=False,read_until_eof=False,auto_decompress=True)
aiohttp.client_proto.ResponseHandler.should_close(self)
aiohttp.client_proto.ResponseHandler.upgraded(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/http.py----------------------------------------
A:aiohttp.http.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} aiohttp/{1}'.format(sys.version_info, __version__)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_urldispatcher.py----------------------------------------
A:aiohttp.web_urldispatcher.HTTP_METHOD_RE->re.compile("^[0-9A-Za-z!#\\$%&'\\*\\+\\-\\.\\^_`\\|~]+$")
A:aiohttp.web_urldispatcher.ROUTE_RE->re.compile('(\\{[_a-zA-Z][^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\})')
A:aiohttp.web_urldispatcher.PATH_SEP->re.escape('/')
A:aiohttp.web_urldispatcher.method->getattr(self, self.request.method.lower(), None)
A:aiohttp.web_urldispatcher.path->attr.ib(type=str)
A:aiohttp.web_urldispatcher.handler->attr.ib()
A:aiohttp.web_urldispatcher.kwargs->attr.ib()
A:aiohttp.web_urldispatcher.reg->getattr(router, 'add_' + self.method.lower())
A:aiohttp.web_urldispatcher.result->old_handler(*args, **kwargs)
A:aiohttp.web_urldispatcher.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web_urldispatcher.route_obj->ResourceRoute(method, handler, self, expect_handler=expect_handler)
A:aiohttp.web_urldispatcher.allowed_methods->set()
A:aiohttp.web_urldispatcher.match_dict->self._match(request.rel_url.raw_path)
A:aiohttp.web_urldispatcher.DYN->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*)\\}')
A:aiohttp.web_urldispatcher.DYN_WITH_RE->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*):(?P<re>.+)\\}')
A:aiohttp.web_urldispatcher.match->self._pattern.fullmatch(path)
A:aiohttp.web_urldispatcher.compiled->re.compile(pattern)
A:aiohttp.web_urldispatcher.self._pattern->re.compile(re.escape(prefix) + self._pattern.pattern)
A:aiohttp.web_urldispatcher.url->yarl.URL.build(path=path)
A:aiohttp.web_urldispatcher.directory->directory.resolve().resolve()
A:aiohttp.web_urldispatcher.filename->Path(rel_url)
A:aiohttp.web_urldispatcher.filepath->self._directory.joinpath(filename).resolve()
A:aiohttp.web_urldispatcher.file_bytes->f.read()
A:aiohttp.web_urldispatcher.h->self._get_file_hash(file_bytes)
A:aiohttp.web_urldispatcher.m->hashlib.sha256()
A:aiohttp.web_urldispatcher.b64->base64.urlsafe_b64encode(m.digest())
A:aiohttp.web_urldispatcher.self._routes['OPTIONS']->ResourceRoute('OPTIONS', handler, self, expect_handler=self._expect_handler)
A:aiohttp.web_urldispatcher.ret->FileResponse(filepath, chunk_size=self._chunk_size)
A:aiohttp.web_urldispatcher.relative_path_to_dir->self._directory.joinpath(filename).resolve().relative_to(self._directory).as_posix()
A:aiohttp.web_urldispatcher.index_of->'Index of /{}'.format(relative_path_to_dir)
A:aiohttp.web_urldispatcher.h1->'<h1>{}</h1>'.format(index_of)
A:aiohttp.web_urldispatcher.dir_index->self._directory.joinpath(filename).resolve().iterdir()
A:aiohttp.web_urldispatcher.rel_path->_file.relative_to(self._directory).as_posix()
A:aiohttp.web_urldispatcher.file_name->'{}/'.format(_file.name)
A:aiohttp.web_urldispatcher.ul->'<ul>\n{}\n</ul>'.format('\n'.join(index_list))
A:aiohttp.web_urldispatcher.body->'<body>\n{}\n{}\n</body>'.format(h1, ul)
A:aiohttp.web_urldispatcher.head_str->'<head>\n<title>{}</title>\n</head>'.format(index_of)
A:aiohttp.web_urldispatcher.html->'<html>\n{}\n{}\n</html>'.format(head_str, body)
A:aiohttp.web_urldispatcher.methods->set()
A:aiohttp.web_urldispatcher.NAME_SPLIT_RE->re.compile('[.:-]')
A:aiohttp.web_urldispatcher.parts->self.NAME_SPLIT_RE.split(name)
A:aiohttp.web_urldispatcher.resource->self.add_resource(path, name=name)
aiohttp.web_urldispatcher.AbstractResource(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.AbstractResource.freeze(self)
aiohttp.web_urldispatcher.AbstractResource.get_info(self)
aiohttp.web_urldispatcher.AbstractResource.name(self)
aiohttp.web_urldispatcher.AbstractResource.raw_match(self,path)
aiohttp.web_urldispatcher.AbstractResource.url_for(self,**kwargs)
aiohttp.web_urldispatcher.AbstractRoute(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.__init__(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.get_info(self)
aiohttp.web_urldispatcher.AbstractRoute.handler(self)
aiohttp.web_urldispatcher.AbstractRoute.method(self)
aiohttp.web_urldispatcher.AbstractRoute.name(self)
aiohttp.web_urldispatcher.AbstractRoute.resource(self)
aiohttp.web_urldispatcher.AbstractRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.DynamicResource(self,path,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__init__(self,path,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__repr__(self)
aiohttp.web_urldispatcher.DynamicResource._match(self,path)
aiohttp.web_urldispatcher.DynamicResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.DynamicResource.get_info(self)
aiohttp.web_urldispatcher.DynamicResource.raw_match(self,path)
aiohttp.web_urldispatcher.DynamicResource.url_for(self,**parts)
aiohttp.web_urldispatcher.MatchInfoError(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__init__(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__repr__(self)
aiohttp.web_urldispatcher.MatchInfoError.http_exception(self)
aiohttp.web_urldispatcher.PlainResource(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__init__(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__repr__(self)
aiohttp.web_urldispatcher.PlainResource._match(self,path)
aiohttp.web_urldispatcher.PlainResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PlainResource.freeze(self)
aiohttp.web_urldispatcher.PlainResource.get_info(self)
aiohttp.web_urldispatcher.PlainResource.raw_match(self,path)
aiohttp.web_urldispatcher.PlainResource.url_for(self)
aiohttp.web_urldispatcher.PrefixResource(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.__init__(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixResource.raw_match(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__init__(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__iter__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__len__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__repr__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource.get_info(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.Resource(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__iter__(self)
aiohttp.web_urldispatcher.Resource.__len__(self)
aiohttp.web_urldispatcher.Resource.add_route(self,method,handler,*,expect_handler=None)
aiohttp.web_urldispatcher.Resource.register_route(self,route)
aiohttp.web_urldispatcher.ResourceRoute(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__init__(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__repr__(self)
aiohttp.web_urldispatcher.ResourceRoute.get_info(self)
aiohttp.web_urldispatcher.ResourceRoute.name(self)
aiohttp.web_urldispatcher.ResourceRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.ResourcesView(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__contains__(self,resource)
aiohttp.web_urldispatcher.ResourcesView.__init__(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__iter__(self)
aiohttp.web_urldispatcher.ResourcesView.__len__(self)
aiohttp.web_urldispatcher.RouteDef
aiohttp.web_urldispatcher.RouteDef.__repr__(self)
aiohttp.web_urldispatcher.RouteDef.register(self,router)
aiohttp.web_urldispatcher.RouteTableDef(self)
aiohttp.web_urldispatcher.RouteTableDef.__contains__(self,item)
aiohttp.web_urldispatcher.RouteTableDef.__getitem__(self,index)
aiohttp.web_urldispatcher.RouteTableDef.__init__(self)
aiohttp.web_urldispatcher.RouteTableDef.__iter__(self)
aiohttp.web_urldispatcher.RouteTableDef.__len__(self)
aiohttp.web_urldispatcher.RouteTableDef.__repr__(self)
aiohttp.web_urldispatcher.RouteTableDef.delete(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.get(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.head(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.patch(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.post(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.put(self,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.route(self,method,path,**kwargs)
aiohttp.web_urldispatcher.RouteTableDef.view(self,path,**kwargs)
aiohttp.web_urldispatcher.RoutesView(self,resources)
aiohttp.web_urldispatcher.RoutesView.__contains__(self,route_obj)
aiohttp.web_urldispatcher.RoutesView.__init__(self,resources)
aiohttp.web_urldispatcher.RoutesView.__iter__(self)
aiohttp.web_urldispatcher.RoutesView.__len__(self)
aiohttp.web_urldispatcher.StaticResource(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,show_index=False,follow_symlinks=False,append_version=False)
aiohttp.web_urldispatcher.StaticResource.__init__(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,show_index=False,follow_symlinks=False,append_version=False)
aiohttp.web_urldispatcher.StaticResource.__iter__(self)
aiohttp.web_urldispatcher.StaticResource.__len__(self)
aiohttp.web_urldispatcher.StaticResource.__repr__(self)
aiohttp.web_urldispatcher.StaticResource._directory_as_html(self,filepath)
aiohttp.web_urldispatcher.StaticResource._get_file_hash(byte_array)
aiohttp.web_urldispatcher.StaticResource.get_info(self)
aiohttp.web_urldispatcher.StaticResource.set_options_route(self,handler)
aiohttp.web_urldispatcher.StaticResource.url_for(self,*,filename,append_version=None)
aiohttp.web_urldispatcher.SystemRoute(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__init__(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__repr__(self)
aiohttp.web_urldispatcher.SystemRoute.get_info(self)
aiohttp.web_urldispatcher.SystemRoute.name(self)
aiohttp.web_urldispatcher.SystemRoute.reason(self)
aiohttp.web_urldispatcher.SystemRoute.status(self)
aiohttp.web_urldispatcher.SystemRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher(self)
aiohttp.web_urldispatcher.UrlDispatcher.__contains__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__getitem__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__init__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__iter__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__len__(self)
aiohttp.web_urldispatcher.UrlDispatcher.add_delete(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_get(self,path,handler,*,name=None,allow_head=True,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_head(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_patch(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_post(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_put(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_resource(self,path,*,name=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_route(self,method,path,handler,*,name=None,expect_handler=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_routes(self,routes)
aiohttp.web_urldispatcher.UrlDispatcher.add_static(self,prefix,path,*,name=None,expect_handler=None,chunk_size=256*1024,show_index=False,follow_symlinks=False,append_version=False)
aiohttp.web_urldispatcher.UrlDispatcher.add_view(self,path,handler,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.freeze(self)
aiohttp.web_urldispatcher.UrlDispatcher.named_resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.register_resource(self,resource)
aiohttp.web_urldispatcher.UrlDispatcher.resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.routes(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__init__(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__repr__(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.add_app(self,app)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.apps(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.current_app(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.expect_handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.freeze(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.get_info(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.http_exception(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.route(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.set_current_app(self,app)
aiohttp.web_urldispatcher.View(AbstractView)
aiohttp.web_urldispatcher.View.__await__(self)
aiohttp.web_urldispatcher.View._raise_allowed_methods(self)
aiohttp.web_urldispatcher.delete(path,handler,**kwargs)
aiohttp.web_urldispatcher.get(path,handler,*,name=None,allow_head=True,**kwargs)
aiohttp.web_urldispatcher.head(path,handler,**kwargs)
aiohttp.web_urldispatcher.patch(path,handler,**kwargs)
aiohttp.web_urldispatcher.post(path,handler,**kwargs)
aiohttp.web_urldispatcher.put(path,handler,**kwargs)
aiohttp.web_urldispatcher.route(method,path,handler,**kwargs)
aiohttp.web_urldispatcher.view(path,handler,**kwargs)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/helpers.py----------------------------------------
A:aiohttp.helpers.sentinel->object()
A:aiohttp.helpers.NO_EXTENSIONS->bool(os.environ.get('AIOHTTP_NO_EXTENSIONS'))
A:aiohttp.helpers.CHAR->set((chr(i) for i in range(0, 128)))
A:aiohttp.helpers.split->auth_header.strip().split(' ')
A:aiohttp.helpers.(username, _, password)->base64.b64decode(to_decode.encode('ascii')).decode(encoding).partition(':')
A:aiohttp.helpers.creds->('%s:%s' % (self.login, self.password)).encode(self.encoding)
A:aiohttp.helpers.auth->BasicAuth(logins[0] if logins[0] else logins[-1], password)
A:aiohttp.helpers.netrc_path->pathlib.Path.home().joinpath('.netrc')
A:aiohttp.helpers.home_dir->pathlib.Path.home()
A:aiohttp.helpers.netrc_obj->netrc_from_env()
A:aiohttp.helpers.proxy->attr.ib(type=str)
A:aiohttp.helpers.proxy_auth->attr.ib(type=BasicAuth)
A:aiohttp.helpers.auth_from_netrc->netrc_from_env().authenticators(proxy.host)
A:aiohttp.helpers.ret[proto]->ProxyInfo(proxy, auth)
A:aiohttp.helpers.loop->asyncio.get_event_loop()
A:aiohttp.helpers.task->current_task(loop=self._loop)
A:aiohttp.helpers.type->attr.ib(type=str)
A:aiohttp.helpers.subtype->attr.ib(type=str)
A:aiohttp.helpers.suffix->attr.ib(type=str)
A:aiohttp.helpers.parameters->attr.ib(type=MultiDict)
A:aiohttp.helpers.parts->mimetype.split(';')
A:aiohttp.helpers.params->MultiDict(params)
A:aiohttp.helpers.fulltype->parts[0].strip().lower()
A:aiohttp.helpers.name->getattr(obj, 'name', None)
A:aiohttp.helpers.sparams->'; '.join(('='.join(pair) for pair in lparams))
A:aiohttp.helpers.value->'; '.join((value, sparams))
A:aiohttp.helpers.FORMAT_RE->re.compile('%(\\{([A-Za-z0-9\\-_]+)\\}([ioe])|[atPrsbOD]|Tf?)')
A:aiohttp.helpers.CLEANUP_RE->re.compile('(%[^s])')
A:aiohttp.helpers.KeyMethod->namedtuple('KeyMethod', 'key method')
A:aiohttp.helpers._compiled_format->self.compile_format(log_format)
A:aiohttp.helpers.methods->list()
A:aiohttp.helpers.m->functools.partial(m, atom[1])
A:aiohttp.helpers.log_format->self.CLEANUP_RE.sub('%\\1', log_format)
A:aiohttp.helpers.now->int(time.time())
A:aiohttp.helpers.fmt_info->self._format_line(request, response, time)
A:aiohttp.helpers.values->list()
A:aiohttp.helpers.extra->dict()
A:aiohttp.helpers.dct->dict().get(k1, {})
A:aiohttp.helpers.val->self.wrapped(inst)
A:aiohttp.helpers._ipv4_regex->re.compile(_ipv4_pattern)
A:aiohttp.helpers._ipv6_regex->re.compile(_ipv6_pattern, flags=re.IGNORECASE)
A:aiohttp.helpers._ipv4_regexb->re.compile(_ipv4_pattern.encode('ascii'))
A:aiohttp.helpers._ipv6_regexb->re.compile(_ipv6_pattern.encode('ascii'), flags=re.IGNORECASE)
A:aiohttp.helpers.(year, month, day, hh, mm, ss, wd, y, z)->time.gmtime(now)
A:aiohttp.helpers.ob->ref()
A:aiohttp.helpers.when->ceil(loop.time() + timeout)
A:aiohttp.helpers.at->ceil(self._loop.time() + self._timeout)
A:aiohttp.helpers.timer->TimerNoop()
A:aiohttp.helpers.self._task->current_task(loop=self._loop)
A:aiohttp.helpers.self._cancel_handler->self._loop.call_at(ceil(self._loop.time() + self._timeout), self._cancel_task)
A:aiohttp.helpers.ATTRS->frozenset(['_content_type', '_content_dict', '_stored_content_type'])
A:aiohttp.helpers.(self._content_type, self._content_dict)->cgi.parse_header(raw)
A:aiohttp.helpers.raw->self._headers.get(_CONTENT_TYPE)
A:aiohttp.helpers.content_length->self._headers.get(_CONTENT_LENGTH)
aiohttp.AccessLogger(self,logger,log_format=LOG_FORMAT)
aiohttp.AccessLogger._format_D(request,response,time)
aiohttp.AccessLogger._format_P(request,response,time)
aiohttp.AccessLogger._format_T(request,response,time)
aiohttp.AccessLogger._format_Tf(request,response,time)
aiohttp.AccessLogger._format_a(request,response,time)
aiohttp.AccessLogger._format_b(request,response,time)
aiohttp.AccessLogger._format_i(key,request,response,time)
aiohttp.AccessLogger._format_line(self,request,response,time)
aiohttp.AccessLogger._format_o(key,request,response,time)
aiohttp.AccessLogger._format_r(request,response,time)
aiohttp.AccessLogger._format_s(request,response,time)
aiohttp.AccessLogger._format_t(request,response,time)
aiohttp.AccessLogger.compile_format(self,log_format)
aiohttp.AccessLogger.log(self,request,response,time)
aiohttp.BasicAuth(cls,login,password='',encoding='latin1')
aiohttp.BasicAuth.decode(cls,auth_header,encoding='latin1')
aiohttp.BasicAuth.encode(self)
aiohttp.BasicAuth.from_url(cls,url,*,encoding='latin1')
aiohttp.CeilTimeout(async_timeout.timeout)
aiohttp.CeilTimeout.__enter__(self)
aiohttp.HeadersMixin
aiohttp.HeadersMixin._parse_content_type(self,raw)
aiohttp.HeadersMixin.charset(self,*,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.HeadersMixin.content_length(self,*,_CONTENT_LENGTH=hdrs.CONTENT_LENGTH)
aiohttp.HeadersMixin.content_type(self,*,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.MimeType
aiohttp.ProxyInfo
aiohttp.TimeoutHandle(self,loop,timeout)
aiohttp.TimeoutHandle.close(self)
aiohttp.TimeoutHandle.register(self,callback,*args,**kwargs)
aiohttp.TimeoutHandle.start(self)
aiohttp.TimeoutHandle.timer(self)
aiohttp.TimerContext(self,loop)
aiohttp.TimerContext.__enter__(self)
aiohttp.TimerContext.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.TimerContext.timeout(self)
aiohttp.TimerNoop
aiohttp.TimerNoop.__enter__(self)
aiohttp.TimerNoop.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp._weakref_handle(info)
aiohttp.call_later(cb,timeout,loop)
aiohttp.content_disposition_header(disptype,quote_fields=True,**params)
aiohttp.current_task(loop=None)
aiohttp.guess_filename(obj,default=None)
aiohttp.helpers.AccessLogger(self,logger,log_format=LOG_FORMAT)
aiohttp.helpers.AccessLogger.__init__(self,logger,log_format=LOG_FORMAT)
aiohttp.helpers.AccessLogger._format_D(request,response,time)
aiohttp.helpers.AccessLogger._format_P(request,response,time)
aiohttp.helpers.AccessLogger._format_T(request,response,time)
aiohttp.helpers.AccessLogger._format_Tf(request,response,time)
aiohttp.helpers.AccessLogger._format_a(request,response,time)
aiohttp.helpers.AccessLogger._format_b(request,response,time)
aiohttp.helpers.AccessLogger._format_i(key,request,response,time)
aiohttp.helpers.AccessLogger._format_line(self,request,response,time)
aiohttp.helpers.AccessLogger._format_o(key,request,response,time)
aiohttp.helpers.AccessLogger._format_r(request,response,time)
aiohttp.helpers.AccessLogger._format_s(request,response,time)
aiohttp.helpers.AccessLogger._format_t(request,response,time)
aiohttp.helpers.AccessLogger.compile_format(self,log_format)
aiohttp.helpers.AccessLogger.log(self,request,response,time)
aiohttp.helpers.BasicAuth(cls,login,password='',encoding='latin1')
aiohttp.helpers.BasicAuth.__new__(cls,login,password='',encoding='latin1')
aiohttp.helpers.BasicAuth.decode(cls,auth_header,encoding='latin1')
aiohttp.helpers.BasicAuth.encode(self)
aiohttp.helpers.BasicAuth.from_url(cls,url,*,encoding='latin1')
aiohttp.helpers.CeilTimeout(async_timeout.timeout)
aiohttp.helpers.CeilTimeout.__enter__(self)
aiohttp.helpers.HeadersMixin
aiohttp.helpers.HeadersMixin._parse_content_type(self,raw)
aiohttp.helpers.HeadersMixin.charset(self,*,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.helpers.HeadersMixin.content_length(self,*,_CONTENT_LENGTH=hdrs.CONTENT_LENGTH)
aiohttp.helpers.HeadersMixin.content_type(self,*,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.helpers.MimeType
aiohttp.helpers.ProxyInfo
aiohttp.helpers.TimeoutHandle(self,loop,timeout)
aiohttp.helpers.TimeoutHandle.__init__(self,loop,timeout)
aiohttp.helpers.TimeoutHandle.close(self)
aiohttp.helpers.TimeoutHandle.register(self,callback,*args,**kwargs)
aiohttp.helpers.TimeoutHandle.start(self)
aiohttp.helpers.TimeoutHandle.timer(self)
aiohttp.helpers.TimerContext(self,loop)
aiohttp.helpers.TimerContext.__enter__(self)
aiohttp.helpers.TimerContext.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.helpers.TimerContext.__init__(self,loop)
aiohttp.helpers.TimerContext.timeout(self)
aiohttp.helpers.TimerNoop
aiohttp.helpers.TimerNoop.__enter__(self)
aiohttp.helpers.TimerNoop.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.helpers._weakref_handle(info)
aiohttp.helpers.call_later(cb,timeout,loop)
aiohttp.helpers.content_disposition_header(disptype,quote_fields=True,**params)
aiohttp.helpers.current_task(loop=None)
aiohttp.helpers.guess_filename(obj,default=None)
aiohttp.helpers.is_ip_address(host)
aiohttp.helpers.isasyncgenfunction(obj)
aiohttp.helpers.netrc_from_env()
aiohttp.helpers.noop(*args,**kwargs)
aiohttp.helpers.parse_mimetype(mimetype)
aiohttp.helpers.proxies_from_env()
aiohttp.helpers.reify(self,wrapped)
aiohttp.helpers.reify.__get__(self,inst,owner,_sentinel=sentinel)
aiohttp.helpers.reify.__init__(self,wrapped)
aiohttp.helpers.reify.__set__(self,inst,value)
aiohttp.helpers.rfc822_formatted_time()
aiohttp.helpers.set_exception(fut,exc)
aiohttp.helpers.set_result(fut,result)
aiohttp.helpers.strip_auth_from_url(url)
aiohttp.helpers.weakref_handle(ob,name,timeout,loop,ceil_timeout=True)
aiohttp.is_ip_address(host)
aiohttp.isasyncgenfunction(obj)
aiohttp.netrc_from_env()
aiohttp.noop(*args,**kwargs)
aiohttp.parse_mimetype(mimetype)
aiohttp.proxies_from_env()
aiohttp.reify(self,wrapped)
aiohttp.reify.__get__(self,inst,owner,_sentinel=sentinel)
aiohttp.reify.__set__(self,inst,value)
aiohttp.rfc822_formatted_time()
aiohttp.set_exception(fut,exc)
aiohttp.set_result(fut,result)
aiohttp.strip_auth_from_url(url)
aiohttp.weakref_handle(ob,name,timeout,loop,ceil_timeout=True)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web.py----------------------------------------
A:aiohttp.web.loop->asyncio.get_event_loop()
A:aiohttp.web.runner->AppRunner(app, handle_signals=handle_signals, access_log_class=access_log_class, access_log_format=access_log_format, access_log=access_log)
A:aiohttp.web.names->sorted((str(s.name) for s in runner.sites))
A:aiohttp.web.arg_parser->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web')
A:aiohttp.web.(args, extra_argv)->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web').parse_known_args(argv)
A:aiohttp.web.(mod_str, _, func_str)->args.entry_func.partition(':')
A:aiohttp.web.module->import_module(mod_str)
A:aiohttp.web.func->getattr(module, func_str)
A:aiohttp.web.app->func(extra_argv)
aiohttp.web.main(argv)
aiohttp.web.run_app(app,*,host=None,port=None,path=None,sock=None,shutdown_timeout=60.0,ssl_context=None,print=print,backlog=128,access_log_class=helpers.AccessLogger,access_log_format=helpers.AccessLogger.LOG_FORMAT,access_log=access_logger,handle_signals=True,reuse_address=None,reuse_port=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/http_parser.py----------------------------------------
A:aiohttp.http_parser.ASCIISET->set(string.printable)
A:aiohttp.http_parser.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.http_parser.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.http_parser.HDRRE->re.compile(b'[\\x00-\\x1F\\x7F()<>@,;:\\[\\]={} \\t\\\\\\\\\\"]')
A:aiohttp.http_parser.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked', 'url'])
A:aiohttp.http_parser.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked'])
A:aiohttp.http_parser.data_len->len(data)
A:aiohttp.http_parser.pos->self.decompressor.flush().find(SEP)
A:aiohttp.http_parser.msg->self.parse_message(self._lines)
A:aiohttp.http_parser.length->int(length)
A:aiohttp.http_parser.method->method.upper().upper()
A:aiohttp.http_parser.payload->DeflateBuffer(payload, compression)
A:aiohttp.http_parser.payload_parser->HttpPayloadParser(payload, length=length, chunked=msg.chunked, method=method, compression=msg.compression, code=self.code, readall=True, response_with_body=self.response_with_body, auto_decompress=self._auto_decompress)
A:aiohttp.http_parser.self._payload_parser->HttpPayloadParser(payload, method=msg.method, compression=msg.compression, readall=True, auto_decompress=self._auto_decompress)
A:aiohttp.http_parser.(eof, data)->self._payload_parser.feed_data(data[start_pos:])
A:aiohttp.http_parser.headers->CIMultiDict()
A:aiohttp.http_parser.line_count->len(lines)
A:aiohttp.http_parser.header_length->len(line)
A:aiohttp.http_parser.(bname, bvalue)->lines[0].decode('utf-8', 'surrogateescape').split(b':', 1)
A:aiohttp.http_parser.bname->bname.strip(b' \t').strip(b' \t')
A:aiohttp.http_parser.bvalue->bvalue.strip().strip()
A:aiohttp.http_parser.name->bname.strip(b' \t').strip(b' \t').decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.value->bvalue.strip().strip().decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.raw_headers->tuple(raw_headers)
A:aiohttp.http_parser.conn->CIMultiDict().get(hdrs.CONNECTION)
A:aiohttp.http_parser.v->CIMultiDict().get(hdrs.CONNECTION).lower()
A:aiohttp.http_parser.enc->enc.lower().lower()
A:aiohttp.http_parser.te->CIMultiDict().get(hdrs.TRANSFER_ENCODING)
A:aiohttp.http_parser.line->lines[0].decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.(method, path, version)->lines[0].decode('utf-8', 'surrogateescape').split(None, 2)
A:aiohttp.http_parser.(n1, n2)->version[5:].split('.', 1)
A:aiohttp.http_parser.version->HttpVersion(int(match.group(1)), int(match.group(2)))
A:aiohttp.http_parser.(headers, raw_headers, close, compression, upgrade, chunked)->self.parse_headers(lines)
A:aiohttp.http_parser.(version, status)->lines[0].decode('utf-8', 'surrogateescape').split(None, 1)
A:aiohttp.http_parser.(status, reason)->int(status).split(None, 1)
A:aiohttp.http_parser.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.http_parser.status->int(status)
A:aiohttp.http_parser.chunk_len->len(chunk)
A:aiohttp.http_parser.i->self.decompressor.flush().find(CHUNK_EXT, 0, pos)
A:aiohttp.http_parser.size->int(bytes(size), 16)
A:aiohttp.http_parser.exc->TransferEncodingError(chunk[:pos])
A:aiohttp.http_parser.self.decompressor->zlib.decompressobj()
A:aiohttp.http_parser.chunk->self.decompressor.flush()
aiohttp.http_parser.ChunkState(IntEnum)
aiohttp.http_parser.DeflateBuffer(self,out,encoding)
aiohttp.http_parser.DeflateBuffer.__init__(self,out,encoding)
aiohttp.http_parser.DeflateBuffer.begin_http_chunk_receiving(self)
aiohttp.http_parser.DeflateBuffer.end_http_chunk_receiving(self)
aiohttp.http_parser.DeflateBuffer.feed_data(self,chunk,size)
aiohttp.http_parser.DeflateBuffer.feed_eof(self)
aiohttp.http_parser.DeflateBuffer.set_exception(self,exc)
aiohttp.http_parser.HttpParser(self,protocol=None,loop=None,max_line_size=8190,max_headers=32768,max_field_size=8190,timer=None,code=None,method=None,readall=False,payload_exception=None,response_with_body=True,read_until_eof=False,auto_decompress=True)
aiohttp.http_parser.HttpParser.__init__(self,protocol=None,loop=None,max_line_size=8190,max_headers=32768,max_field_size=8190,timer=None,code=None,method=None,readall=False,payload_exception=None,response_with_body=True,read_until_eof=False,auto_decompress=True)
aiohttp.http_parser.HttpParser.feed_data(self,data,SEP=b'\r\n',EMPTY=b'',CONTENT_LENGTH=hdrs.CONTENT_LENGTH,METH_CONNECT=hdrs.METH_CONNECT,SEC_WEBSOCKET_KEY1=hdrs.SEC_WEBSOCKET_KEY1)
aiohttp.http_parser.HttpParser.feed_eof(self)
aiohttp.http_parser.HttpParser.parse_headers(self,lines)
aiohttp.http_parser.HttpPayloadParser(self,payload,length=None,chunked=False,compression=None,code=None,method=None,readall=False,response_with_body=True,auto_decompress=True)
aiohttp.http_parser.HttpPayloadParser.__init__(self,payload,length=None,chunked=False,compression=None,code=None,method=None,readall=False,response_with_body=True,auto_decompress=True)
aiohttp.http_parser.HttpPayloadParser.feed_data(self,chunk,SEP=b'\r\n',CHUNK_EXT=b';')
aiohttp.http_parser.HttpPayloadParser.feed_eof(self)
aiohttp.http_parser.HttpRequestParserPy(HttpParser)
aiohttp.http_parser.HttpRequestParserPy.parse_message(self,lines)
aiohttp.http_parser.HttpResponseParserPy(HttpParser)
aiohttp.http_parser.HttpResponseParserPy.parse_message(self,lines)
aiohttp.http_parser.ParseState(IntEnum)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/client.py----------------------------------------
A:aiohttp.client.ATTRS->frozenset(['_source_traceback', '_connector', 'requote_redirect_url', '_loop', '_cookie_jar', '_connector_owner', '_default_auth', '_version', '_json_serialize', '_read_timeout', '_conn_timeout', '_raise_for_status', '_auto_decompress', '_trust_env', '_default_headers', '_skip_auto_headers', '_request_class', '_response_class', '_ws_response_class', '_trace_configs'])
A:aiohttp.client.loop->asyncio.get_event_loop()
A:aiohttp.client.connector->TCPConnector(loop=loop, force_close=True)
A:aiohttp.client.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client.cookie_jar->CookieJar(loop=loop)
A:aiohttp.client.headers->CIMultiDict(headers)
A:aiohttp.client.self._skip_auto_headers->frozenset()
A:aiohttp.client.ssl->_merge_ssl_params(ssl, verify_ssl, ssl_context, fingerprint)
A:aiohttp.client.data->payload.JsonPayload(json, dumps=self._json_serialize)
A:aiohttp.client.proxy_headers->self._prepare_headers(proxy_headers)
A:aiohttp.client.url->url.with_fragment(None).with_fragment(None)
A:aiohttp.client.skip_headers->set(self._skip_auto_headers)
A:aiohttp.client.proxy->URL(proxy)
A:aiohttp.client.tm->TimeoutHandle(self._loop, timeout if timeout is not sentinel else self._read_timeout)
A:aiohttp.client.handle->TimeoutHandle(self._loop, timeout if timeout is not sentinel else self._read_timeout).start()
A:aiohttp.client.timer->TimeoutHandle(self._loop, timeout if timeout is not sentinel else self._read_timeout).timer()
A:aiohttp.client.(url, auth_from_url)->strip_auth_from_url(url)
A:aiohttp.client.cookies->self._cookie_jar.filter_cookies(url)
A:aiohttp.client.req->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer, session=self, auto_decompress=self._auto_decompress, ssl=ssl, proxy_headers=proxy_headers)
A:aiohttp.client.resp->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer, session=self, auto_decompress=self._auto_decompress, ssl=ssl, proxy_headers=proxy_headers).send(conn)
A:aiohttp.client.r_url->url.with_fragment(None).with_fragment(None).join(r_url)
A:aiohttp.client.resp._history->tuple(history)
A:aiohttp.client.sec_key->base64.b64encode(os.urandom(16))
A:aiohttp.client.headers[hdrs.SEC_WEBSOCKET_KEY]->base64.b64encode(os.urandom(16)).decode()
A:aiohttp.client.headers[hdrs.SEC_WEBSOCKET_PROTOCOL]->','.join(protocols)
A:aiohttp.client.extstr->ws_ext_gen(compress=compress)
A:aiohttp.client.key->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer, session=self, auto_decompress=self._auto_decompress, ssl=ssl, proxy_headers=proxy_headers).send(conn).headers.get(hdrs.SEC_WEBSOCKET_ACCEPT, '')
A:aiohttp.client.match->base64.b64encode(hashlib.sha1(sec_key + WS_KEY).digest()).decode()
A:aiohttp.client.compress_hdrs->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer, session=self, auto_decompress=self._auto_decompress, ssl=ssl, proxy_headers=proxy_headers).send(conn).headers.get(hdrs.SEC_WEBSOCKET_EXTENSIONS)
A:aiohttp.client.(compress, notakeover)->ws_ext_parse(compress_hdrs)
A:aiohttp.client.reader->FlowControlDataQueue(proto, limit=2 ** 16, loop=self._loop)
A:aiohttp.client.writer->WebSocketWriter(proto, transport, use_mask=True, compress=compress, notakeover=notakeover)
A:aiohttp.client.result->CIMultiDict(self._default_headers)
A:aiohttp.client.added_names->set()
A:aiohttp.client.ret->self._coro.__await__()
A:aiohttp.client.session->ClientSession(loop=loop, cookies=cookies, version=version, connector=connector, connector_owner=connector_owner)
aiohttp.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=sentinel,conn_timeout=None,auto_decompress=True,trust_env=False,trace_configs=None)
aiohttp.ClientSession.__del__(self,_warnings=warnings)
aiohttp.ClientSession.__enter__(self)
aiohttp.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.ClientSession.__init_subclass__(cls)
aiohttp.ClientSession.__setattr__(self,name,val)
aiohttp.ClientSession._prepare_headers(self,headers)
aiohttp.ClientSession.closed(self)
aiohttp.ClientSession.connector(self)
aiohttp.ClientSession.cookie_jar(self)
aiohttp.ClientSession.delete(self,url,**kwargs)
aiohttp.ClientSession.detach(self)
aiohttp.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.ClientSession.loop(self)
aiohttp.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.request(self,method,url,**kwargs)
aiohttp.ClientSession.version(self)
aiohttp.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None,ssl=None,verify_ssl=None,fingerprint=None,ssl_context=None,proxy_headers=None,compress=0)
aiohttp._BaseRequestContextManager(self,coro)
aiohttp._BaseRequestContextManager.__await__(self)
aiohttp._BaseRequestContextManager.__iter__(self)
aiohttp._BaseRequestContextManager.close(self)
aiohttp._BaseRequestContextManager.send(self,arg)
aiohttp._BaseRequestContextManager.throw(self,arg)
aiohttp._RequestContextManager(_BaseRequestContextManager)
aiohttp._SessionRequestContextManager(self,coro,session)
aiohttp._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=sentinel,conn_timeout=None,auto_decompress=True,trust_env=False,trace_configs=None)
aiohttp.client.ClientSession.__del__(self,_warnings=warnings)
aiohttp.client.ClientSession.__enter__(self)
aiohttp.client.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.client.ClientSession.__init__(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=sentinel,conn_timeout=None,auto_decompress=True,trust_env=False,trace_configs=None)
aiohttp.client.ClientSession.__init_subclass__(cls)
aiohttp.client.ClientSession.__setattr__(self,name,val)
aiohttp.client.ClientSession._prepare_headers(self,headers)
aiohttp.client.ClientSession.closed(self)
aiohttp.client.ClientSession.connector(self)
aiohttp.client.ClientSession.cookie_jar(self)
aiohttp.client.ClientSession.delete(self,url,**kwargs)
aiohttp.client.ClientSession.detach(self)
aiohttp.client.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.client.ClientSession.loop(self)
aiohttp.client.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.request(self,method,url,**kwargs)
aiohttp.client.ClientSession.version(self)
aiohttp.client.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None,ssl=None,verify_ssl=None,fingerprint=None,ssl_context=None,proxy_headers=None,compress=0)
aiohttp.client._BaseRequestContextManager(self,coro)
aiohttp.client._BaseRequestContextManager.__await__(self)
aiohttp.client._BaseRequestContextManager.__init__(self,coro)
aiohttp.client._BaseRequestContextManager.__iter__(self)
aiohttp.client._BaseRequestContextManager.close(self)
aiohttp.client._BaseRequestContextManager.send(self,arg)
aiohttp.client._BaseRequestContextManager.throw(self,arg)
aiohttp.client._RequestContextManager(_BaseRequestContextManager)
aiohttp.client._SessionRequestContextManager(self,coro,session)
aiohttp.client._SessionRequestContextManager.__init__(self,coro,session)
aiohttp.client._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.request(method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,proxy=None,proxy_auth=None)
aiohttp.request(method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,proxy=None,proxy_auth=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/http_writer.py----------------------------------------
A:aiohttp.http_writer.HttpVersion->collections.namedtuple('HttpVersion', ['major', 'minor'])
A:aiohttp.http_writer.HttpVersion10->HttpVersion(1, 0)
A:aiohttp.http_writer.HttpVersion11->HttpVersion(1, 1)
A:aiohttp.http_writer.self._compress->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.http_writer.size->len(chunk)
A:aiohttp.http_writer.chunk->self._compress.compress(chunk)
A:aiohttp.http_writer.chunk_len->('%x\r\n' % len(chunk)).encode('ascii')
aiohttp.http_writer.StreamWriter(self,protocol,transport,loop)
aiohttp.http_writer.StreamWriter.__init__(self,protocol,transport,loop)
aiohttp.http_writer.StreamWriter._write(self,chunk)
aiohttp.http_writer.StreamWriter.enable_chunking(self)
aiohttp.http_writer.StreamWriter.enable_compression(self,encoding='deflate')
aiohttp.http_writer.StreamWriter.protocol(self)
aiohttp.http_writer.StreamWriter.transport(self)
aiohttp.http_writer.StreamWriter.write(self,chunk,*,drain=True,LIMIT=64*1024)
aiohttp.http_writer.StreamWriter.write_headers(self,status_line,headers,SEP=':',END='\r\n')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_request.py----------------------------------------
A:aiohttp.web_request.name->attr.ib(type=str)
A:aiohttp.web_request.filename->attr.ib(type=str)
A:aiohttp.web_request.file->attr.ib(type=io.BufferedReader)
A:aiohttp.web_request.content_type->field.headers.get(hdrs.CONTENT_TYPE)
A:aiohttp.web_request.headers->attr.ib(type=CIMultiDictProxy)
A:aiohttp.web_request._TOKEN->'[{tchar}]+'.format(tchar=_TCHAR)
A:aiohttp.web_request._QDTEXT->'[{}]'.format(''.join((chr(c) for c in (9, 32, 33) + tuple(range(35, 127)))))
A:aiohttp.web_request._QUOTED_STRING->'"(?:{quoted_pair}|{qdtext})*"'.format(qdtext=_QDTEXT, quoted_pair=_QUOTED_PAIR)
A:aiohttp.web_request._FORWARDED_PAIR->'({token})=({token}|{quoted_string})'.format(token=_TOKEN, quoted_string=_QUOTED_STRING)
A:aiohttp.web_request._QUOTED_PAIR_REPLACE_RE->re.compile('\\\\([\\t !-~])')
A:aiohttp.web_request._FORWARDED_PAIR_RE->re.compile(_FORWARDED_PAIR)
A:aiohttp.web_request.rel_url->URL(rel_url)
A:aiohttp.web_request.dct['path']->str(rel_url)
A:aiohttp.web_request.dct['headers']->CIMultiDict(headers)
A:aiohttp.web_request.dct['raw_headers']->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in headers.items()))
A:aiohttp.web_request.message->self._message._replace(**dct)
A:aiohttp.web_request.length->len(field_value)
A:aiohttp.web_request.match->re.compile(_FORWARDED_PAIR).match(field_value, pos)
A:aiohttp.web_request.pos->field_value.find(',', pos)
A:aiohttp.web_request.(name, value)->re.compile(_FORWARDED_PAIR).match(field_value, pos).groups()
A:aiohttp.web_request.value->value.decode(charset).decode(charset)
A:aiohttp.web_request.host->self._message.headers.get(hdrs.HOST)
A:aiohttp.web_request.peername->self.transport.get_extra_info('peername')
A:aiohttp.web_request.url->yarl.URL.build(scheme=self.scheme, host=self.host)
A:aiohttp.web_request.httpdate->self.headers.get(_IF_MODIFIED_SINCE)
A:aiohttp.web_request.timetuple->parsedate(httpdate)
A:aiohttp.web_request.raw->self.headers.get(hdrs.COOKIE, '')
A:aiohttp.web_request.parsed->SimpleCookie(raw)
A:aiohttp.web_request.rng->self._headers.get(_RANGE)
A:aiohttp.web_request.body->bytearray()
A:aiohttp.web_request.self._read_bytes->bytes(body)
A:aiohttp.web_request.self._post->MultiDictProxy(out)
A:aiohttp.web_request.out->MultiDict()
A:aiohttp.web_request.tmp->tempfile.TemporaryFile()
A:aiohttp.web_request.chunk->field.decode(chunk)
A:aiohttp.web_request.ff->FileField(field.name, field.filename, tmp, content_type, field.headers)
A:aiohttp.web_request.charset->field.get_charset(default='utf-8')
A:aiohttp.web_request.ascii_encodable_path->self.path.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.web_request.ret->super().clone(method=method, rel_url=rel_url, headers=headers, scheme=scheme, host=host, remote=remote)
aiohttp.web_request.BaseRequest(self,message,payload,protocol,payload_writer,task,loop,*,client_max_size=1024**2,state=None,scheme=None,host=None,remote=None)
aiohttp.web_request.BaseRequest.__delitem__(self,key)
aiohttp.web_request.BaseRequest.__getitem__(self,key)
aiohttp.web_request.BaseRequest.__init__(self,message,payload,protocol,payload_writer,task,loop,*,client_max_size=1024**2,state=None,scheme=None,host=None,remote=None)
aiohttp.web_request.BaseRequest.__iter__(self)
aiohttp.web_request.BaseRequest.__len__(self)
aiohttp.web_request.BaseRequest.__repr__(self)
aiohttp.web_request.BaseRequest.__setitem__(self,key,value)
aiohttp.web_request.BaseRequest._prepare_hook(self,response)
aiohttp.web_request.BaseRequest.body_exists(self)
aiohttp.web_request.BaseRequest.can_read_body(self)
aiohttp.web_request.BaseRequest.clone(self,*,method=sentinel,rel_url=sentinel,headers=sentinel,scheme=sentinel,host=sentinel,remote=sentinel)
aiohttp.web_request.BaseRequest.content(self)
aiohttp.web_request.BaseRequest.cookies(self)
aiohttp.web_request.BaseRequest.forwarded(self)
aiohttp.web_request.BaseRequest.has_body(self)
aiohttp.web_request.BaseRequest.headers(self)
aiohttp.web_request.BaseRequest.host(self)
aiohttp.web_request.BaseRequest.http_range(self,*,_RANGE=hdrs.RANGE)
aiohttp.web_request.BaseRequest.if_modified_since(self,_IF_MODIFIED_SINCE=hdrs.IF_MODIFIED_SINCE)
aiohttp.web_request.BaseRequest.keep_alive(self)
aiohttp.web_request.BaseRequest.loop(self)
aiohttp.web_request.BaseRequest.message(self)
aiohttp.web_request.BaseRequest.method(self)
aiohttp.web_request.BaseRequest.path(self)
aiohttp.web_request.BaseRequest.path_qs(self)
aiohttp.web_request.BaseRequest.protocol(self)
aiohttp.web_request.BaseRequest.query(self)
aiohttp.web_request.BaseRequest.query_string(self)
aiohttp.web_request.BaseRequest.raw_headers(self)
aiohttp.web_request.BaseRequest.raw_path(self)
aiohttp.web_request.BaseRequest.rel_url(self)
aiohttp.web_request.BaseRequest.remote(self)
aiohttp.web_request.BaseRequest.scheme(self)
aiohttp.web_request.BaseRequest.secure(self)
aiohttp.web_request.BaseRequest.task(self)
aiohttp.web_request.BaseRequest.transport(self)
aiohttp.web_request.BaseRequest.url(self)
aiohttp.web_request.BaseRequest.version(self)
aiohttp.web_request.BaseRequest.writer(self)
aiohttp.web_request.FileField
aiohttp.web_request.Request(self,*args,**kwargs)
aiohttp.web_request.Request.__init__(self,*args,**kwargs)
aiohttp.web_request.Request.__setattr__(self,name,val)
aiohttp.web_request.Request.app(self)
aiohttp.web_request.Request.clone(self,*,method=sentinel,rel_url=sentinel,headers=sentinel,scheme=sentinel,host=sentinel,remote=sentinel)
aiohttp.web_request.Request.match_info(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/web_protocol.py----------------------------------------
A:aiohttp.web_protocol.ERROR->http.RawRequestMessage('UNKNOWN', '/', http.HttpVersion10, {}, {}, True, False, False, False, yarl.URL('/'))
A:aiohttp.web_protocol.self._lingering_time->float(lingering_time)
A:aiohttp.web_protocol.self._messages->deque()
A:aiohttp.web_protocol.self._task_handler->self._loop.create_task(self.start())
A:aiohttp.web_protocol.self._request_parser->HttpRequestParser(self, loop, max_line_size=max_line_size, max_field_size=max_field_size, max_headers=max_headers, payload_exception=RequestPayloadError)
A:aiohttp.web_protocol.self.access_logger->access_log_class(access_log, access_log_format)
A:aiohttp.web_protocol.(messages, upgraded, tail)->self._request_parser.feed_data(data)
A:aiohttp.web_protocol.self._error_handler->self._loop.create_task(self.handle_parse_error(StreamWriter(self, self.transport, self._loop), 500, exc))
A:aiohttp.web_protocol.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.web_protocol.self._keepalive_handle->loop.call_at(now + keepalive_timeout, self._process_keepalive)
A:aiohttp.web_protocol.self._waiter->loop.create_future()
A:aiohttp.web_protocol.(message, payload)->self._messages.popleft()
A:aiohttp.web_protocol.now->self._loop.time()
A:aiohttp.web_protocol.writer->StreamWriter(self, self.transport, loop)
A:aiohttp.web_protocol.request->BaseRequest(ERROR, EMPTY_PAYLOAD, self, writer, None, self._loop)
A:aiohttp.web_protocol.resp->self.handle_error(request, status, exc, message)
A:aiohttp.web_protocol.timeout->min(end_t - now, lingering_time)
A:aiohttp.web_protocol.tb->html_escape(tb)
aiohttp.web_protocol.RequestHandler(self,manager,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,logger=server_logger,access_log_class=helpers.AccessLogger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,lingering_time=10.0)
aiohttp.web_protocol.RequestHandler.__init__(self,manager,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,logger=server_logger,access_log_class=helpers.AccessLogger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,lingering_time=10.0)
aiohttp.web_protocol.RequestHandler.__repr__(self)
aiohttp.web_protocol.RequestHandler._process_keepalive(self)
aiohttp.web_protocol.RequestHandler.close(self)
aiohttp.web_protocol.RequestHandler.connection_lost(self,exc)
aiohttp.web_protocol.RequestHandler.connection_made(self,transport)
aiohttp.web_protocol.RequestHandler.data_received(self,data)
aiohttp.web_protocol.RequestHandler.eof_received(self)
aiohttp.web_protocol.RequestHandler.force_close(self,send_last_heartbeat=False)
aiohttp.web_protocol.RequestHandler.handle_error(self,request,status=500,exc=None,message=None)
aiohttp.web_protocol.RequestHandler.keep_alive(self,val)
aiohttp.web_protocol.RequestHandler.keepalive_timeout(self)
aiohttp.web_protocol.RequestHandler.log_access(self,request,response,time)
aiohttp.web_protocol.RequestHandler.log_debug(self,*args,**kw)
aiohttp.web_protocol.RequestHandler.log_exception(self,*args,**kw)
aiohttp.web_protocol.RequestHandler.pause_reading(self)
aiohttp.web_protocol.RequestHandler.resume_reading(self)
aiohttp.web_protocol.RequestHandler.set_parser(self,parser)
aiohttp.web_protocol.RequestPayloadError(Exception)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/client_reqrep.py----------------------------------------
A:aiohttp.client_reqrep.type->attr.ib(type=str)
A:aiohttp.client_reqrep.parameters->attr.ib(type=MappingProxyType)
A:aiohttp.client_reqrep.filename->multipart.content_disposition_filename(params)
A:aiohttp.client_reqrep.url->url.with_query(q).with_query(q)
A:aiohttp.client_reqrep.method->attr.ib(type=str)
A:aiohttp.client_reqrep.headers->headers.items().items()
A:aiohttp.client_reqrep.digestlen->len(fingerprint)
A:aiohttp.client_reqrep.hashfunc->self.HASHFUNC_BY_DIGESTLEN.get(digestlen)
A:aiohttp.client_reqrep.sslobj->transport.get_extra_info('ssl_object')
A:aiohttp.client_reqrep.cert->transport.get_extra_info('ssl_object').getpeercert(binary_form=True)
A:aiohttp.client_reqrep.got->self._hashfunc(cert).digest()
A:aiohttp.client_reqrep.(host, port, *_)->transport.get_extra_info('peername')
A:aiohttp.client_reqrep.SSL_ALLOWED_TYPES->type(None)
A:aiohttp.client_reqrep.ssl->Fingerprint(fingerprint)
A:aiohttp.client_reqrep.ConnectionKey->namedtuple('ConnectionKey', ['host', 'port', 'ssl'])
A:aiohttp.client_reqrep.ALL_METHODS->GET_METHODS.union(POST_METHODS).union({hdrs.METH_DELETE})
A:aiohttp.client_reqrep.loop->asyncio.get_event_loop()
A:aiohttp.client_reqrep.q->MultiDict(url.query)
A:aiohttp.client_reqrep.url2->url.with_query(q).with_query(q).with_query(params)
A:aiohttp.client_reqrep.self.url->url.with_query(q).with_query(q).with_fragment(None)
A:aiohttp.client_reqrep.self.method->attr.ib(type=str).upper()
A:aiohttp.client_reqrep.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client_reqrep.self.auth->helpers.BasicAuth(username, password or '')
A:aiohttp.client_reqrep.self.headers->CIMultiDictProxy(message.headers)
A:aiohttp.client_reqrep.self.skip_auto_headers->CIMultiDict(((hdr, None) for hdr in sorted(skip_auto_headers)))
A:aiohttp.client_reqrep.used_headers->self.headers.copy()
A:aiohttp.client_reqrep.c->SimpleCookie()
A:aiohttp.client_reqrep.mrsl_val->value.get(value.key, Morsel())
A:aiohttp.client_reqrep.self.headers[hdrs.COOKIE]->SimpleCookie().output(header='', sep=';').strip()
A:aiohttp.client_reqrep.enc->self.headers.get(hdrs.CONTENT_ENCODING, '').lower()
A:aiohttp.client_reqrep.te->self.headers.get(hdrs.TRANSFER_ENCODING, '').lower()
A:aiohttp.client_reqrep.self.headers[hdrs.CONTENT_LENGTH]->str(size)
A:aiohttp.client_reqrep.self.headers[hdrs.AUTHORIZATION]->auth.encode()
A:aiohttp.client_reqrep.body->FormData(body)()
A:aiohttp.client_reqrep.self._continue->self.loop.create_future()
A:aiohttp.client_reqrep.new_exc->ClientOSError(exc.errno, 'Can not write request body for %s' % self.url)
A:aiohttp.client_reqrep.path->str(self.url)
A:aiohttp.client_reqrep.writer->StreamWriter(conn.protocol, conn.transport, self.loop)
A:aiohttp.client_reqrep.connection->self.headers.get(hdrs.CONNECTION)
A:aiohttp.client_reqrep.status_line->'{0} {1} HTTP/{2[0]}.{2[1]}\r\n'.format(self.method, path, self.version)
A:aiohttp.client_reqrep.self._writer->self.loop.create_task(self.write_bytes(writer, conn))
A:aiohttp.client_reqrep.self.response->self.response_class(self.method, self.original_url, writer=self._writer, continue100=self._continue, timer=self._timer, request_info=self.request_info, auto_decompress=self._auto_decompress)
A:aiohttp.client_reqrep.self.cookies->SimpleCookie()
A:aiohttp.client_reqrep.raw->self._headers.get(hdrs.CONTENT_DISPOSITION)
A:aiohttp.client_reqrep.(disposition_type, params)->multipart.parse_content_disposition(raw)
A:aiohttp.client_reqrep.params->MappingProxyType(params)
A:aiohttp.client_reqrep.out->io.StringIO()
A:aiohttp.client_reqrep.ascii_encodable_url->str(self.url)
A:aiohttp.client_reqrep.ascii_encodable_reason->self.reason.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.client_reqrep.self.raw_headers->tuple(message.raw_headers)
A:aiohttp.client_reqrep.ctype->self.headers.get(hdrs.CONTENT_TYPE, '').lower()
A:aiohttp.client_reqrep.mimetype->helpers.parse_mimetype(ctype)
A:aiohttp.client_reqrep.encoding->self.get_encoding()
A:aiohttp.client_reqrep.stripped->self._content.strip()
aiohttp.client_reqrep.ClientRequest(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timer=None,session=None,auto_decompress=True,ssl=None,proxy_headers=None)
aiohttp.client_reqrep.ClientRequest.__init__(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timer=None,session=None,auto_decompress=True,ssl=None,proxy_headers=None)
aiohttp.client_reqrep.ClientRequest.connection_key(self)
aiohttp.client_reqrep.ClientRequest.host(self)
aiohttp.client_reqrep.ClientRequest.is_ssl(self)
aiohttp.client_reqrep.ClientRequest.keep_alive(self)
aiohttp.client_reqrep.ClientRequest.port(self)
aiohttp.client_reqrep.ClientRequest.request_info(self)
aiohttp.client_reqrep.ClientRequest.send(self,conn)
aiohttp.client_reqrep.ClientRequest.ssl(self)
aiohttp.client_reqrep.ClientRequest.terminate(self)
aiohttp.client_reqrep.ClientRequest.update_auth(self,auth)
aiohttp.client_reqrep.ClientRequest.update_auto_headers(self,skip_auto_headers)
aiohttp.client_reqrep.ClientRequest.update_body_from_data(self,body)
aiohttp.client_reqrep.ClientRequest.update_content_encoding(self,data)
aiohttp.client_reqrep.ClientRequest.update_cookies(self,cookies)
aiohttp.client_reqrep.ClientRequest.update_expect_continue(self,expect=False)
aiohttp.client_reqrep.ClientRequest.update_headers(self,headers)
aiohttp.client_reqrep.ClientRequest.update_host(self,url)
aiohttp.client_reqrep.ClientRequest.update_proxy(self,proxy,proxy_auth,proxy_headers)
aiohttp.client_reqrep.ClientRequest.update_transfer_encoding(self)
aiohttp.client_reqrep.ClientRequest.update_version(self,version)
aiohttp.client_reqrep.ClientResponse(self,method,url,*,writer=None,continue100=None,timer=None,request_info=None,auto_decompress=True)
aiohttp.client_reqrep.ClientResponse.__del__(self,_warnings=warnings)
aiohttp.client_reqrep.ClientResponse.__init__(self,method,url,*,writer=None,continue100=None,timer=None,request_info=None,auto_decompress=True)
aiohttp.client_reqrep.ClientResponse.__repr__(self)
aiohttp.client_reqrep.ClientResponse._cleanup_writer(self)
aiohttp.client_reqrep.ClientResponse._headers(self)
aiohttp.client_reqrep.ClientResponse._notify_content(self)
aiohttp.client_reqrep.ClientResponse._post_init(self,loop,session)
aiohttp.client_reqrep.ClientResponse._response_eof(self)
aiohttp.client_reqrep.ClientResponse.close(self)
aiohttp.client_reqrep.ClientResponse.closed(self)
aiohttp.client_reqrep.ClientResponse.connection(self)
aiohttp.client_reqrep.ClientResponse.content_disposition(self)
aiohttp.client_reqrep.ClientResponse.get_encoding(self)
aiohttp.client_reqrep.ClientResponse.history(self)
aiohttp.client_reqrep.ClientResponse.host(self)
aiohttp.client_reqrep.ClientResponse.raise_for_status(self)
aiohttp.client_reqrep.ClientResponse.release(self)
aiohttp.client_reqrep.ClientResponse.request_info(self)
aiohttp.client_reqrep.ClientResponse.url(self)
aiohttp.client_reqrep.ClientResponse.url_obj(self)
aiohttp.client_reqrep.ContentDisposition
aiohttp.client_reqrep.Fingerprint(self,fingerprint)
aiohttp.client_reqrep.Fingerprint.__init__(self,fingerprint)
aiohttp.client_reqrep.Fingerprint.check(self,transport)
aiohttp.client_reqrep.Fingerprint.fingerprint(self)
aiohttp.client_reqrep.RequestInfo
aiohttp.client_reqrep._merge_ssl_params(ssl,verify_ssl,ssl_context,fingerprint)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp3.0.9/hdrs.py----------------------------------------
A:aiohttp.hdrs.ACCEPT->istr('ACCEPT')
A:aiohttp.hdrs.ACCEPT_CHARSET->istr('ACCEPT-CHARSET')
A:aiohttp.hdrs.ACCEPT_ENCODING->istr('ACCEPT-ENCODING')
A:aiohttp.hdrs.ACCEPT_LANGUAGE->istr('ACCEPT-LANGUAGE')
A:aiohttp.hdrs.ACCEPT_RANGES->istr('ACCEPT-RANGES')
A:aiohttp.hdrs.ACCESS_CONTROL_MAX_AGE->istr('ACCESS-CONTROL-MAX-AGE')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_CREDENTIALS->istr('ACCESS-CONTROL-ALLOW-CREDENTIALS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_HEADERS->istr('ACCESS-CONTROL-ALLOW-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_METHODS->istr('ACCESS-CONTROL-ALLOW-METHODS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_ORIGIN->istr('ACCESS-CONTROL-ALLOW-ORIGIN')
A:aiohttp.hdrs.ACCESS_CONTROL_EXPOSE_HEADERS->istr('ACCESS-CONTROL-EXPOSE-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_HEADERS->istr('ACCESS-CONTROL-REQUEST-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_METHOD->istr('ACCESS-CONTROL-REQUEST-METHOD')
A:aiohttp.hdrs.AGE->istr('AGE')
A:aiohttp.hdrs.ALLOW->istr('ALLOW')
A:aiohttp.hdrs.AUTHORIZATION->istr('AUTHORIZATION')
A:aiohttp.hdrs.CACHE_CONTROL->istr('CACHE-CONTROL')
A:aiohttp.hdrs.CONNECTION->istr('CONNECTION')
A:aiohttp.hdrs.CONTENT_DISPOSITION->istr('CONTENT-DISPOSITION')
A:aiohttp.hdrs.CONTENT_ENCODING->istr('CONTENT-ENCODING')
A:aiohttp.hdrs.CONTENT_LANGUAGE->istr('CONTENT-LANGUAGE')
A:aiohttp.hdrs.CONTENT_LENGTH->istr('CONTENT-LENGTH')
A:aiohttp.hdrs.CONTENT_LOCATION->istr('CONTENT-LOCATION')
A:aiohttp.hdrs.CONTENT_MD5->istr('CONTENT-MD5')
A:aiohttp.hdrs.CONTENT_RANGE->istr('CONTENT-RANGE')
A:aiohttp.hdrs.CONTENT_TRANSFER_ENCODING->istr('CONTENT-TRANSFER-ENCODING')
A:aiohttp.hdrs.CONTENT_TYPE->istr('CONTENT-TYPE')
A:aiohttp.hdrs.COOKIE->istr('COOKIE')
A:aiohttp.hdrs.DATE->istr('DATE')
A:aiohttp.hdrs.DESTINATION->istr('DESTINATION')
A:aiohttp.hdrs.DIGEST->istr('DIGEST')
A:aiohttp.hdrs.ETAG->istr('ETAG')
A:aiohttp.hdrs.EXPECT->istr('EXPECT')
A:aiohttp.hdrs.EXPIRES->istr('EXPIRES')
A:aiohttp.hdrs.FORWARDED->istr('FORWARDED')
A:aiohttp.hdrs.FROM->istr('FROM')
A:aiohttp.hdrs.HOST->istr('HOST')
A:aiohttp.hdrs.IF_MATCH->istr('IF-MATCH')
A:aiohttp.hdrs.IF_MODIFIED_SINCE->istr('IF-MODIFIED-SINCE')
A:aiohttp.hdrs.IF_NONE_MATCH->istr('IF-NONE-MATCH')
A:aiohttp.hdrs.IF_RANGE->istr('IF-RANGE')
A:aiohttp.hdrs.IF_UNMODIFIED_SINCE->istr('IF-UNMODIFIED-SINCE')
A:aiohttp.hdrs.KEEP_ALIVE->istr('KEEP-ALIVE')
A:aiohttp.hdrs.LAST_EVENT_ID->istr('LAST-EVENT-ID')
A:aiohttp.hdrs.LAST_MODIFIED->istr('LAST-MODIFIED')
A:aiohttp.hdrs.LINK->istr('LINK')
A:aiohttp.hdrs.LOCATION->istr('LOCATION')
A:aiohttp.hdrs.MAX_FORWARDS->istr('MAX-FORWARDS')
A:aiohttp.hdrs.ORIGIN->istr('ORIGIN')
A:aiohttp.hdrs.PRAGMA->istr('PRAGMA')
A:aiohttp.hdrs.PROXY_AUTHENTICATE->istr('PROXY_AUTHENTICATE')
A:aiohttp.hdrs.PROXY_AUTHORIZATION->istr('PROXY-AUTHORIZATION')
A:aiohttp.hdrs.RANGE->istr('RANGE')
A:aiohttp.hdrs.REFERER->istr('REFERER')
A:aiohttp.hdrs.RETRY_AFTER->istr('RETRY-AFTER')
A:aiohttp.hdrs.SEC_WEBSOCKET_ACCEPT->istr('SEC-WEBSOCKET-ACCEPT')
A:aiohttp.hdrs.SEC_WEBSOCKET_VERSION->istr('SEC-WEBSOCKET-VERSION')
A:aiohttp.hdrs.SEC_WEBSOCKET_PROTOCOL->istr('SEC-WEBSOCKET-PROTOCOL')
A:aiohttp.hdrs.SEC_WEBSOCKET_EXTENSIONS->istr('SEC-WEBSOCKET-EXTENSIONS')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY->istr('SEC-WEBSOCKET-KEY')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY1->istr('SEC-WEBSOCKET-KEY1')
A:aiohttp.hdrs.SERVER->istr('SERVER')
A:aiohttp.hdrs.SET_COOKIE->istr('SET-COOKIE')
A:aiohttp.hdrs.TE->istr('TE')
A:aiohttp.hdrs.TRAILER->istr('TRAILER')
A:aiohttp.hdrs.TRANSFER_ENCODING->istr('TRANSFER-ENCODING')
A:aiohttp.hdrs.UPGRADE->istr('UPGRADE')
A:aiohttp.hdrs.WEBSOCKET->istr('WEBSOCKET')
A:aiohttp.hdrs.URI->istr('URI')
A:aiohttp.hdrs.USER_AGENT->istr('USER-AGENT')
A:aiohttp.hdrs.VARY->istr('VARY')
A:aiohttp.hdrs.VIA->istr('VIA')
A:aiohttp.hdrs.WANT_DIGEST->istr('WANT-DIGEST')
A:aiohttp.hdrs.WARNING->istr('WARNING')
A:aiohttp.hdrs.WWW_AUTHENTICATE->istr('WWW-AUTHENTICATE')
A:aiohttp.hdrs.X_FORWARDED_FOR->istr('X-FORWARDED-FOR')
A:aiohttp.hdrs.X_FORWARDED_HOST->istr('X-FORWARDED-HOST')
A:aiohttp.hdrs.X_FORWARDED_PROTO->istr('X-FORWARDED-PROTO')

