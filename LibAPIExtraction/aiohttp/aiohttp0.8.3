
----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/protocol.py----------------------------------------
A:aiohttp.protocol.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.protocol.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.protocol.HDRRE->re.compile('[\x00-\x1f\x7f()<>@,;:\\[\\]={} \t\\\\"]')
A:aiohttp.protocol.EOF_MARKER->object()
A:aiohttp.protocol.EOL_MARKER->object()
A:aiohttp.protocol.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.header_length->len(line)
A:aiohttp.protocol.(name, value)->line.strip().split(':', 1)
A:aiohttp.protocol.name->name.strip().upper().strip().upper()
A:aiohttp.protocol.value->value.strip().strip()
A:aiohttp.protocol.v->value.strip().strip().lower()
A:aiohttp.protocol.enc->value.strip().strip().lower()
A:aiohttp.protocol.method->method.upper().upper()
A:aiohttp.protocol.lines->raw_data.decode('ascii', 'surrogateescape').splitlines(True)
A:aiohttp.protocol.(method, path, version)->line.strip().split(None, 2)
A:aiohttp.protocol.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.protocol.(headers, close, compression)->self.parse_headers(lines)
A:aiohttp.protocol.(version, status)->line.strip().split(None, 1)
A:aiohttp.protocol.(status, reason)->int(status).split(None, 1)
A:aiohttp.protocol.status->int(status)
A:aiohttp.protocol.length->max(0, length - l)
A:aiohttp.protocol.out->DeflateBuffer(out, self.message.compression)
A:aiohttp.protocol.i->line.strip().find(b';')
A:aiohttp.protocol.line->line.strip().strip()
A:aiohttp.protocol.size->int(line, 16)
A:aiohttp.protocol.self.zlib->zlib.decompressobj(wbits=zlib_mode)
A:aiohttp.protocol.chunk->bytes(buf[:chunk_size])
A:aiohttp.protocol.new_filter->func(self, *args, **kw)
A:aiohttp.protocol.self.filter->filter_pipe(filter, new_filter)
A:aiohttp.protocol.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} aiohttp/{1}'.format(sys.version_info, aiohttp.__version__)
A:aiohttp.protocol.self.headers->aiohttp.multidict.CaseInsensitiveMutableMultiDict()
A:aiohttp.protocol.self.length->int(value)
A:aiohttp.protocol.val->value.strip().strip().lower()
A:aiohttp.protocol.self.writer->self._write_eof_payload()
A:aiohttp.protocol.hdrs->''.join(itertools.chain((self.status_line,), *((k, ': ', v, '\r\n') for (k, v) in ((k, value) for (k, value) in self.headers.items(getall=True)))))
A:aiohttp.protocol.chunk_len->'{:x}\r\n'.format(len(chunk)).encode('ascii')
A:aiohttp.protocol.l->len(chunk)
A:aiohttp.protocol.buf->bytearray()
A:aiohttp.protocol.zcomp->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.protocol.self.status_line->'{0} {1} HTTP/{2[0]}.{2[1]}\r\n'.format(method, path, http_version)
aiohttp.DeflateBuffer(self,out,encoding)
aiohttp.DeflateBuffer.feed_data(self,chunk)
aiohttp.DeflateBuffer.feed_eof(self)
aiohttp.HttpMessage(self,transport,version,close)
aiohttp.HttpMessage._add_default_headers(self)
aiohttp.HttpMessage._write_chunked_payload(self)
aiohttp.HttpMessage._write_eof_payload(self)
aiohttp.HttpMessage._write_length_payload(self,length)
aiohttp.HttpMessage.add_chunking_filter(self,chunk_size=16*1024)
aiohttp.HttpMessage.add_compression_filter(self,encoding='deflate')
aiohttp.HttpMessage.add_header(self,name,value)
aiohttp.HttpMessage.add_headers(self,*headers)
aiohttp.HttpMessage.force_chunked(self)
aiohttp.HttpMessage.force_close(self)
aiohttp.HttpMessage.is_headers_sent(self)
aiohttp.HttpMessage.keep_alive(self)
aiohttp.HttpMessage.send_headers(self)
aiohttp.HttpMessage.write(self,chunk)
aiohttp.HttpMessage.write_eof(self)
aiohttp.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.HttpParser.parse_headers(self,lines)
aiohttp.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.HttpPrefixParser(self,allowed_methods=())
aiohttp.HttpRequestParser(self,out,buf)
aiohttp.HttpResponseParser(self,out,buf)
aiohttp.Request(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.Request._add_default_headers(self)
aiohttp.Response(self,transport,status,http_version=(1,1),close=False)
aiohttp.Response._add_default_headers(self)
aiohttp.filter_pipe(filter,filter2)
aiohttp.protocol.DeflateBuffer(self,out,encoding)
aiohttp.protocol.DeflateBuffer.__init__(self,out,encoding)
aiohttp.protocol.DeflateBuffer.feed_data(self,chunk)
aiohttp.protocol.DeflateBuffer.feed_eof(self)
aiohttp.protocol.HttpMessage(self,transport,version,close)
aiohttp.protocol.HttpMessage.__init__(self,transport,version,close)
aiohttp.protocol.HttpMessage._add_default_headers(self)
aiohttp.protocol.HttpMessage._write_chunked_payload(self)
aiohttp.protocol.HttpMessage._write_eof_payload(self)
aiohttp.protocol.HttpMessage._write_length_payload(self,length)
aiohttp.protocol.HttpMessage.add_chunking_filter(self,chunk_size=16*1024)
aiohttp.protocol.HttpMessage.add_compression_filter(self,encoding='deflate')
aiohttp.protocol.HttpMessage.add_header(self,name,value)
aiohttp.protocol.HttpMessage.add_headers(self,*headers)
aiohttp.protocol.HttpMessage.force_chunked(self)
aiohttp.protocol.HttpMessage.force_close(self)
aiohttp.protocol.HttpMessage.is_headers_sent(self)
aiohttp.protocol.HttpMessage.keep_alive(self)
aiohttp.protocol.HttpMessage.send_headers(self)
aiohttp.protocol.HttpMessage.write(self,chunk)
aiohttp.protocol.HttpMessage.write_eof(self)
aiohttp.protocol.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.__init__(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.parse_headers(self,lines)
aiohttp.protocol.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.__init__(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.protocol.HttpPrefixParser(self,allowed_methods=())
aiohttp.protocol.HttpPrefixParser.__init__(self,allowed_methods=())
aiohttp.protocol.HttpRequestParser(self,out,buf)
aiohttp.protocol.HttpRequestParser.__call__(self,out,buf)
aiohttp.protocol.HttpResponseParser(self,out,buf)
aiohttp.protocol.HttpResponseParser.__call__(self,out,buf)
aiohttp.protocol.Request(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.protocol.Request.__init__(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.protocol.Request._add_default_headers(self)
aiohttp.protocol.Response(self,transport,status,http_version=(1,1),close=False)
aiohttp.protocol.Response.__init__(self,transport,status,http_version=(1,1),close=False)
aiohttp.protocol.Response._add_default_headers(self)
aiohttp.protocol.filter_pipe(filter,filter2)
aiohttp.protocol.wrap_payload_filter(func)
aiohttp.wrap_payload_filter(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/helpers.py----------------------------------------
A:aiohttp.helpers.parts->mimetype.split(';')
A:aiohttp.helpers.params->dict(params)
A:aiohttp.helpers.fulltype->parts[0].strip().lower()
A:aiohttp.helpers.name->getattr(obj, 'name', None)
A:aiohttp.helpers.fp->io.BytesIO(fp)
A:aiohttp.helpers.chunk->io.BytesIO(fp).read(chunk_size)
aiohttp.helpers.encode_multipart_data(fields,boundary,encoding='utf-8',chunk_size=8196)
aiohttp.helpers.guess_filename(obj,default=None)
aiohttp.helpers.parse_mimetype(mimetype)
aiohttp.helpers.str_to_bytes(s,encoding='utf-8')


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/multidict.py----------------------------------------
A:aiohttp.multidict._marker->object()
A:aiohttp.multidict.self._items->OrderedDict()
A:aiohttp.multidict.args->list(args[0])
A:aiohttp.multidict.key->key.upper().upper()
A:aiohttp.multidict.result->super().getall(key, default)
A:aiohttp.multidict.items->args[0].items()
aiohttp.multidict.BaseMutableMultiDict(abc.MutableMapping)
aiohttp.multidict.BaseMutableMultiDict.__delitem__(self,key)
aiohttp.multidict.BaseMutableMultiDict.__setitem__(self,key,value)
aiohttp.multidict.BaseMutableMultiDict.add(self,key,value)
aiohttp.multidict.BaseMutableMultiDict.clear(self)
aiohttp.multidict.BaseMutableMultiDict.extend(self,*args,**kwargs)
aiohttp.multidict.BaseMutableMultiDict.getall(self,key,default=_marker)
aiohttp.multidict.BaseMutableMultiDict.pop(self,key,default=None)
aiohttp.multidict.BaseMutableMultiDict.popitem(self)
aiohttp.multidict.BaseMutableMultiDict.update(self,*args,**kw)
aiohttp.multidict.CaseInsensitiveMultiDict(MultiDict)
aiohttp.multidict.CaseInsensitiveMultiDict.__contains__(self,key)
aiohttp.multidict.CaseInsensitiveMultiDict.__getitem__(self,key)
aiohttp.multidict.CaseInsensitiveMultiDict.get(self,key,default=None)
aiohttp.multidict.CaseInsensitiveMultiDict.getall(self,key,default=_marker)
aiohttp.multidict.CaseInsensitiveMultiDict.getone(self,key)
aiohttp.multidict.CaseInsensitiveMutableMultiDict(BaseMutableMultiDict,CaseInsensitiveMultiDict)
aiohttp.multidict.CaseInsensitiveMutableMultiDict.getall(self,key,default=_marker)
aiohttp.multidict.MultiDict(self,*args,**kwargs)
aiohttp.multidict.MultiDict.__contains__(self,key)
aiohttp.multidict.MultiDict.__eq__(self,other)
aiohttp.multidict.MultiDict.__getitem__(self,key)
aiohttp.multidict.MultiDict.__init__(self,*args,**kwargs)
aiohttp.multidict.MultiDict.__iter__(self)
aiohttp.multidict.MultiDict.__len__(self)
aiohttp.multidict.MultiDict.__repr__(self)
aiohttp.multidict.MultiDict.copy(self)
aiohttp.multidict.MultiDict.get(self,key,default=None)
aiohttp.multidict.MultiDict.getall(self,key,default=_marker)
aiohttp.multidict.MultiDict.getone(self,key)
aiohttp.multidict.MultiDict.items(self,*,getall=False)
aiohttp.multidict.MultiDict.values(self,*,getall=False)
aiohttp.multidict.MutableMultiDict(BaseMutableMultiDict,MultiDict)
aiohttp.multidict._ItemsView(self,mapping,*,getall=False)
aiohttp.multidict._ItemsView.__contains__(self,item)
aiohttp.multidict._ItemsView.__init__(self,mapping,*,getall=False)
aiohttp.multidict._ItemsView.__iter__(self)
aiohttp.multidict._ValuesView(self,mapping,*,getall=False)
aiohttp.multidict._ValuesView.__contains__(self,value)
aiohttp.multidict._ValuesView.__init__(self,mapping,*,getall=False)
aiohttp.multidict._ValuesView.__iter__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/utils.py----------------------------------------
A:aiohttp.utils.r->'{} {} HTTP/{}.{}'.format(message.method, message.path, message.version[0], message.version[1])
A:aiohttp.utils.self[key]->value.replace('"', '\\"')
aiohttp.utils.SafeAtoms(self,atoms,i_headers,o_headers)
aiohttp.utils.SafeAtoms.__getitem__(self,k)
aiohttp.utils.SafeAtoms.__init__(self,atoms,i_headers,o_headers)
aiohttp.utils.atoms(message,environ,response,request_time)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/connector.py----------------------------------------
A:aiohttp.connector.self._wr->weakref.ref(self, lambda wr, f=self._do_close, conns=self._conns: f(conns))
A:aiohttp.connector.loop->asyncio.get_event_loop()
A:aiohttp.connector.self._factory->functools.partial(aiohttp.StreamProtocol, loop=loop)
A:aiohttp.connector.self.cookies->http.cookies.SimpleCookie()
A:aiohttp.connector.now->time.time()
A:aiohttp.connector.self._cleanup_handle->self._loop.call_later(self._keepalive_timeout, self._cleanup)
A:aiohttp.connector.cookies->cookies.items().items()
A:aiohttp.connector.(transport, proto)->self._get(key)
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector.(transport, proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector.sslcontext->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:aiohttp.connector.hinfo->hosts.pop()
A:aiohttp.connector.proxy_req->ClientRequest('GET', self._proxy, headers={'Host': req.host}, auth=aiohttp.BasicAuth(self._basic_login, self._basic_passwd), loop=self._loop)
A:aiohttp.connector.req.path->'{scheme}://{host}{path}'.format(scheme=req.scheme, host=req.host, path=req.path)
A:aiohttp.connector.proxy_req.path->'{}:{}'.format(req.host, req.port)
A:aiohttp.connector.conn->Connection(self, key, proxy_req, transport, proto)
A:aiohttp.connector.proxy_resp->ClientRequest('GET', self._proxy, headers={'Host': req.host}, auth=aiohttp.BasicAuth(self._basic_login, self._basic_passwd), loop=self._loop).send(conn.writer, conn.reader)
A:aiohttp.connector.rawsock->transport.get_extra_info('socket', default=None)
aiohttp.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None,**kwargs)
aiohttp.BaseConnector._cleanup(self)
aiohttp.BaseConnector._create_connection(self,req,*args,**kwargs)
aiohttp.BaseConnector._do_close(conns)
aiohttp.BaseConnector._get(self,key)
aiohttp.BaseConnector._release(self,key,req,transport,protocol)
aiohttp.BaseConnector._start_cleanup_task(self)
aiohttp.BaseConnector.close(self)
aiohttp.BaseConnector.connect(self,req)
aiohttp.BaseConnector.update_cookies(self,cookies)
aiohttp.Connection(self,connector,key,request,transport,protocol)
aiohttp.Connection.close(self)
aiohttp.Connection.release(self)
aiohttp.ProxyConnector(self,proxy,proxy_login=None,proxy_passwd=None,*args,**kwargs)
aiohttp.ProxyConnector._create_connection(self,req,**kwargs)
aiohttp.ProxyConnector.proxy(self)
aiohttp.TCPConnector(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,**kwargs)
aiohttp.TCPConnector._create_connection(self,req,**kwargs)
aiohttp.TCPConnector._resolve_host(self,host,port)
aiohttp.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.TCPConnector.family(self)
aiohttp.TCPConnector.resolve(self)
aiohttp.TCPConnector.resolved_hosts(self)
aiohttp.TCPConnector.verify_ssl(self)
aiohttp.UnixConnector(self,path,*args,**kw)
aiohttp.UnixConnector._create_connection(self,req,**kwargs)
aiohttp.UnixConnector.path(self)
aiohttp.connector.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None,**kwargs)
aiohttp.connector.BaseConnector.__init__(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None,**kwargs)
aiohttp.connector.BaseConnector._cleanup(self)
aiohttp.connector.BaseConnector._create_connection(self,req,*args,**kwargs)
aiohttp.connector.BaseConnector._do_close(conns)
aiohttp.connector.BaseConnector._get(self,key)
aiohttp.connector.BaseConnector._release(self,key,req,transport,protocol)
aiohttp.connector.BaseConnector._start_cleanup_task(self)
aiohttp.connector.BaseConnector.close(self)
aiohttp.connector.BaseConnector.connect(self,req)
aiohttp.connector.BaseConnector.update_cookies(self,cookies)
aiohttp.connector.Connection(self,connector,key,request,transport,protocol)
aiohttp.connector.Connection.__init__(self,connector,key,request,transport,protocol)
aiohttp.connector.Connection.close(self)
aiohttp.connector.Connection.release(self)
aiohttp.connector.ProxyConnector(self,proxy,proxy_login=None,proxy_passwd=None,*args,**kwargs)
aiohttp.connector.ProxyConnector.__init__(self,proxy,proxy_login=None,proxy_passwd=None,*args,**kwargs)
aiohttp.connector.ProxyConnector._create_connection(self,req,**kwargs)
aiohttp.connector.ProxyConnector.proxy(self)
aiohttp.connector.TCPConnector(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,**kwargs)
aiohttp.connector.TCPConnector.__init__(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,**kwargs)
aiohttp.connector.TCPConnector._create_connection(self,req,**kwargs)
aiohttp.connector.TCPConnector._resolve_host(self,host,port)
aiohttp.connector.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.connector.TCPConnector.family(self)
aiohttp.connector.TCPConnector.resolve(self)
aiohttp.connector.TCPConnector.resolved_hosts(self)
aiohttp.connector.TCPConnector.verify_ssl(self)
aiohttp.connector.UnixConnector(self,path,*args,**kw)
aiohttp.connector.UnixConnector.__init__(self,path,*args,**kw)
aiohttp.connector.UnixConnector._create_connection(self,req,**kwargs)
aiohttp.connector.UnixConnector.path(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/parsers.py----------------------------------------
A:aiohttp.parsers.output->DataQueue(self, loop=self._loop)
A:aiohttp.parsers.p->parser(output, self._buffer)
A:aiohttp.parsers.self.reader->StreamParser(loop=loop, **kwargs)
A:aiohttp.parsers.self.writer->asyncio.streams.StreamWriter(transport, self, self.reader, self._loop)
A:aiohttp.parsers.waiter->asyncio.Future(loop=self._loop)
A:aiohttp.parsers.self._buffer->collections.deque()
A:aiohttp.parsers.self._waiter->asyncio.Future(loop=self._loop)
A:aiohttp.parsers.self._writer->self._feed_data()
A:aiohttp.parsers.self.size->len(self)
A:aiohttp.parsers.chunk_len->len(chunk)
A:aiohttp.parsers.stop_len->len(stop)
A:aiohttp.parsers.pos->self.find(stop, self.offset)
A:aiohttp.parsers.stop_line->self.find(stop, self.offset)
aiohttp.ChunksParser(self,size=8196)
aiohttp.DataQueue(self,stream,*,loop=None)
aiohttp.DataQueue.at_eof(self)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.read(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EofStream(Exception)
aiohttp.LinesParser(self,limit=2**16)
aiohttp.ParserBuffer(self,*args,limit=BUF_LIMIT)
aiohttp.ParserBuffer.__bytes__(self)
aiohttp.ParserBuffer._feed_data(self)
aiohttp.ParserBuffer.exception(self)
aiohttp.ParserBuffer.feed_data(self,data)
aiohttp.ParserBuffer.read(self,size)
aiohttp.ParserBuffer.readsome(self,size=None)
aiohttp.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.ParserBuffer.set_exception(self,exc)
aiohttp.ParserBuffer.shrink(self)
aiohttp.ParserBuffer.skip(self,size)
aiohttp.ParserBuffer.skipuntil(self,stop)
aiohttp.ParserBuffer.wait(self,size)
aiohttp.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.StreamParser(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT)
aiohttp.StreamParser.at_eof(self)
aiohttp.StreamParser.exception(self)
aiohttp.StreamParser.feed_data(self,data)
aiohttp.StreamParser.feed_eof(self)
aiohttp.StreamParser.output(self)
aiohttp.StreamParser.pause_stream(self)
aiohttp.StreamParser.resume_stream(self)
aiohttp.StreamParser.set_exception(self,exc)
aiohttp.StreamParser.set_parser(self,parser)
aiohttp.StreamParser.set_transport(self,transport)
aiohttp.StreamParser.unset_parser(self)
aiohttp.StreamProtocol(self,*,loop=None,**kwargs)
aiohttp.StreamProtocol._make_drain_waiter(self)
aiohttp.StreamProtocol.connection_lost(self,exc)
aiohttp.StreamProtocol.connection_made(self,transport)
aiohttp.StreamProtocol.data_received(self,data)
aiohttp.StreamProtocol.eof_received(self)
aiohttp.StreamProtocol.is_connected(self)
aiohttp.parsers.ChunksParser(self,size=8196)
aiohttp.parsers.ChunksParser.__init__(self,size=8196)
aiohttp.parsers.DataQueue(self,stream,*,loop=None)
aiohttp.parsers.DataQueue.__init__(self,stream,*,loop=None)
aiohttp.parsers.DataQueue.at_eof(self)
aiohttp.parsers.DataQueue.exception(self)
aiohttp.parsers.DataQueue.feed_data(self,data)
aiohttp.parsers.DataQueue.feed_eof(self)
aiohttp.parsers.DataQueue.read(self)
aiohttp.parsers.DataQueue.set_exception(self,exc)
aiohttp.parsers.EofStream(Exception)
aiohttp.parsers.LinesParser(self,limit=2**16)
aiohttp.parsers.LinesParser.__init__(self,limit=2**16)
aiohttp.parsers.ParserBuffer(self,*args,limit=BUF_LIMIT)
aiohttp.parsers.ParserBuffer.__bytes__(self)
aiohttp.parsers.ParserBuffer.__init__(self,*args,limit=BUF_LIMIT)
aiohttp.parsers.ParserBuffer._feed_data(self)
aiohttp.parsers.ParserBuffer.exception(self)
aiohttp.parsers.ParserBuffer.feed_data(self,data)
aiohttp.parsers.ParserBuffer.read(self,size)
aiohttp.parsers.ParserBuffer.readsome(self,size=None)
aiohttp.parsers.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.parsers.ParserBuffer.set_exception(self,exc)
aiohttp.parsers.ParserBuffer.shrink(self)
aiohttp.parsers.ParserBuffer.skip(self,size)
aiohttp.parsers.ParserBuffer.skipuntil(self,stop)
aiohttp.parsers.ParserBuffer.wait(self,size)
aiohttp.parsers.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.parsers.StreamParser(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT)
aiohttp.parsers.StreamParser.__init__(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT)
aiohttp.parsers.StreamParser.at_eof(self)
aiohttp.parsers.StreamParser.exception(self)
aiohttp.parsers.StreamParser.feed_data(self,data)
aiohttp.parsers.StreamParser.feed_eof(self)
aiohttp.parsers.StreamParser.output(self)
aiohttp.parsers.StreamParser.pause_stream(self)
aiohttp.parsers.StreamParser.resume_stream(self)
aiohttp.parsers.StreamParser.set_exception(self,exc)
aiohttp.parsers.StreamParser.set_parser(self,parser)
aiohttp.parsers.StreamParser.set_transport(self,transport)
aiohttp.parsers.StreamParser.unset_parser(self)
aiohttp.parsers.StreamProtocol(self,*,loop=None,**kwargs)
aiohttp.parsers.StreamProtocol.__init__(self,*,loop=None,**kwargs)
aiohttp.parsers.StreamProtocol._make_drain_waiter(self)
aiohttp.parsers.StreamProtocol.connection_lost(self,exc)
aiohttp.parsers.StreamProtocol.connection_made(self,transport)
aiohttp.parsers.StreamProtocol.data_received(self,data)
aiohttp.parsers.StreamProtocol.eof_received(self)
aiohttp.parsers.StreamProtocol.is_connected(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/wsgi.py----------------------------------------
A:aiohttp.wsgi.SCRIPT_NAME->os.environ.get('SCRIPT_NAME', '')
A:aiohttp.wsgi.uri_parts->urlsplit(message.path)
A:aiohttp.wsgi.forward->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip()
A:aiohttp.wsgi.host->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip().split(':')[0].lower()
A:aiohttp.wsgi.environ['REMOTE_PORT']->str(remote[1])
A:aiohttp.wsgi.server->aiohttp.server.split(':').split(':')
A:aiohttp.wsgi.environ['SERVER_PORT']->str(server[1])
A:aiohttp.wsgi.environ['PATH_INFO']->unquote(path_info)
A:aiohttp.wsgi.now->time.time()
A:aiohttp.wsgi.wsgiinput->io.BytesIO()
A:aiohttp.wsgi.environ->self.create_wsgi_environ(message, payload)
A:aiohttp.wsgi.response->self.create_wsgi_response(message)
A:aiohttp.wsgi.riter->self.wsgi(environ, response.start_response)
A:aiohttp.wsgi.data->self.fobj.read(self.chunk_size)
A:aiohttp.wsgi.status_code->int(status.split(' ', 1)[0])
A:aiohttp.wsgi.respself.response->aiohttp.Response(self.writer, status_code, self.message.version, self.message.should_close)
aiohttp.wsgi.FileWrapper(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__init__(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__iter__(self)
aiohttp.wsgi.FileWrapper.__next__(self)
aiohttp.wsgi.WSGIServerHttpProtocol(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.__init__(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_environ(self,message,payload)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_response(self,message)
aiohttp.wsgi.WSGIServerHttpProtocol.handle_request(self,message,payload)
aiohttp.wsgi.WsgiResponse(self,writer,message)
aiohttp.wsgi.WsgiResponse.__init__(self,writer,message)
aiohttp.wsgi.WsgiResponse.start_response(self,status,headers,exc_info=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/errors.py----------------------------------------
A:aiohttp.errors.line->repr(line)
aiohttp.BadStatusLine(self,line='')
aiohttp.ClientConnectionError(ConnectionError)
aiohttp.ConnectionError(Exception)
aiohttp.HttpBadRequest(HttpException)
aiohttp.HttpErrorException(self,code,message='',headers=None)
aiohttp.HttpException(Exception)
aiohttp.HttpMethodNotAllowed(HttpException)
aiohttp.HttpProxyError(HttpErrorException)
aiohttp.IncompleteRead(self,partial,expected=None)
aiohttp.IncompleteRead.__repr__(self)
aiohttp.IncompleteRead.__str__(self)
aiohttp.InvalidHeader(self,hdr)
aiohttp.LineLimitExceededParserError(self,msg,limit)
aiohttp.LineTooLong(self,line,limit='Unknown')
aiohttp.OsConnectionError(ConnectionError)
aiohttp.ParserError(Exception)
aiohttp.ProxyConnectionError(ClientConnectionError)
aiohttp.errors.BadStatusLine(self,line='')
aiohttp.errors.BadStatusLine.__init__(self,line='')
aiohttp.errors.ClientConnectionError(ConnectionError)
aiohttp.errors.ConnectionError(Exception)
aiohttp.errors.HttpBadRequest(HttpException)
aiohttp.errors.HttpErrorException(self,code,message='',headers=None)
aiohttp.errors.HttpErrorException.__init__(self,code,message='',headers=None)
aiohttp.errors.HttpException(Exception)
aiohttp.errors.HttpMethodNotAllowed(HttpException)
aiohttp.errors.HttpProxyError(HttpErrorException)
aiohttp.errors.IncompleteRead(self,partial,expected=None)
aiohttp.errors.IncompleteRead.__init__(self,partial,expected=None)
aiohttp.errors.IncompleteRead.__repr__(self)
aiohttp.errors.IncompleteRead.__str__(self)
aiohttp.errors.InvalidHeader(self,hdr)
aiohttp.errors.InvalidHeader.__init__(self,hdr)
aiohttp.errors.LineLimitExceededParserError(self,msg,limit)
aiohttp.errors.LineLimitExceededParserError.__init__(self,msg,limit)
aiohttp.errors.LineTooLong(self,line,limit='Unknown')
aiohttp.errors.LineTooLong.__init__(self,line,limit='Unknown')
aiohttp.errors.OsConnectionError(ConnectionError)
aiohttp.errors.ParserError(Exception)
aiohttp.errors.ProxyConnectionError(ClientConnectionError)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/websocket.py----------------------------------------
A:aiohttp.websocket.Message->collections.namedtuple('Message', ['tp', 'data', 'extra'])
A:aiohttp.websocket.(first_byte, second_byte)->struct.unpack('!BB', data)
A:aiohttp.websocket.payload->bytes((b ^ mask[i % 4] for (i, b) in enumerate(payload)))
A:aiohttp.websocket.header->bytes([128 | opcode])
A:aiohttp.websocket.msg_length->len(message)
A:aiohttp.websocket.message->message.encode('utf-8').encode('utf-8')
A:aiohttp.websocket.version->headers.get('SEC-WEBSOCKET-VERSION')
A:aiohttp.websocket.key->headers.get('SEC-WEBSOCKET-KEY')
aiohttp.websocket.WebSocketError(Exception)
aiohttp.websocket.WebSocketParser(out,buf)
aiohttp.websocket.WebSocketWriter(self,writer)
aiohttp.websocket.WebSocketWriter.__init__(self,writer)
aiohttp.websocket.WebSocketWriter._send_frame(self,message,opcode)
aiohttp.websocket.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp.websocket.WebSocketWriter.ping(self)
aiohttp.websocket.WebSocketWriter.pong(self)
aiohttp.websocket.WebSocketWriter.send(self,message,binary=False)
aiohttp.websocket.do_handshake(method,headers,transport)
aiohttp.websocket.parse_frame(buf)
aiohttp.websocket.parse_message(buf)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/test_utils.py----------------------------------------
A:aiohttp.test_utils.t->asyncio.Task(once(), loop=loop)
A:aiohttp.test_utils.self._url->'{}://{}:{}'.format('https' if use_ssl else 'http', host, port)
A:aiohttp.test_utils.body->json.dumps(resp, indent=4, sort_keys=True)
A:aiohttp.test_utils.rob->router(self, properties, self.transport, message, bytes(body))
A:aiohttp.test_utils.response->aiohttp.Response(self.writer, 200, message.version)
A:aiohttp.test_utils.here->os.path.join(os.path.dirname(__file__), '..', 'tests')
A:aiohttp.test_utils.keyfile->os.path.join(here, 'sample.key')
A:aiohttp.test_utils.certfile->os.path.join(here, 'sample.crt')
A:aiohttp.test_utils.sslcontext->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:aiohttp.test_utils.thread_loop->asyncio.new_event_loop()
A:aiohttp.test_utils.server_coroutine->asyncio.new_event_loop().create_unix_server(lambda : TestHttpServer(keep_alive=0.5), listen_addr, ssl=sslcontext)
A:aiohttp.test_utils.server->asyncio.new_event_loop().run_until_complete(server_coroutine)
A:aiohttp.test_utils.waiter->asyncio.Future(loop=thread_loop)
A:aiohttp.test_utils.fut->asyncio.Future(loop=loop)
A:aiohttp.test_utils.server_thread->threading.Thread(target=run, args=(loop, fut))
A:aiohttp.test_utils.(thread_loop, waiter, addr)->loop.run_until_complete(fut)
A:aiohttp.test_utils.self._headers->http.client.HTTPMessage()
A:aiohttp.test_utils.url->urllib.parse.urlsplit(self._uri)
A:aiohttp.test_utils.mapping->f_locals.setdefault('_mapping', [])
A:aiohttp.test_utils.match->route.match(self._path)
A:aiohttp.test_utils.out->io.BytesIO()
A:aiohttp.test_utils.key->'-'.join((p.capitalize() for p in key.split('-')))
A:aiohttp.test_utils.encoding->self._headers.get('content-encoding', '').lower()
A:aiohttp.test_utils.ct->self._headers.get('content-type', '').lower()
A:aiohttp.test_utils.resp['form']->urllib.parse.parse_qs(self._body.decode('latin1'))
A:aiohttp.test_utils.message->email.parser.BytesParser().parse(out)
A:aiohttp.test_utils.(key, params)->cgi.parse_header(msg.get('content-disposition', ''))
A:aiohttp.test_utils.params['data']->msg.get_payload()
A:aiohttp.test_utils.params['content-type']->msg.get_content_type()
aiohttp.test_utils.Router(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router.__init__(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router._response(self,response,body=None,headers=None,chunked=False,write_body=None)
aiohttp.test_utils.Router._start_response(self,code)
aiohttp.test_utils.Router.define(rmatch)
aiohttp.test_utils.Router.dispatch(self)
aiohttp.test_utils.run_briefly(loop)
aiohttp.test_utils.run_server(loop,*,listen_addr=('127.0.0.1',0),use_ssl=False,router=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/aiohttp0.8.3/lib/python3.9/site-packages/aiohttp/log.py----------------------------------------
A:aiohttp.log.access_log->logging.getLogger('asyncio.access')
A:aiohttp.log.client_log->logging.getLogger('asyncio.client')
A:aiohttp.log.internal_log->logging.getLogger('asyncio.internal')
A:aiohttp.log.server_log->logging.getLogger('asyncio.server')

