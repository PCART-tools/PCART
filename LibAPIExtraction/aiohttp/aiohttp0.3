
----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/session.py----------------------------------------
A:aiohttp.session.self.cookies->http.cookies.SimpleCookie()
A:aiohttp.session.cookies->cookies.items().items()
A:aiohttp.session.(transport, proto)->self._get(key)
A:aiohttp.session.wrp->TransportWrapper(self._release, key, transport, proto, req)
A:aiohttp.session.conns->self._conns.get(key)
aiohttp.Session(self)
aiohttp.Session.__del__(self)
aiohttp.Session._get(self,key)
aiohttp.Session._release(self,req,key,conn)
aiohttp.Session.close(self)
aiohttp.Session.start(self,req,loop,new_conn=False,set_cookies=True)
aiohttp.Session.update_cookies(self,cookies)
aiohttp.TransportWrapper(self,release,key,transport,protocol,request)
aiohttp.TransportWrapper.close(self,force=False)
aiohttp.session.Session(self)
aiohttp.session.Session.__del__(self)
aiohttp.session.Session.__init__(self)
aiohttp.session.Session._get(self,key)
aiohttp.session.Session._release(self,req,key,conn)
aiohttp.session.Session.close(self)
aiohttp.session.Session.start(self,req,loop,new_conn=False,set_cookies=True)
aiohttp.session.Session.update_cookies(self,cookies)
aiohttp.session.TransportWrapper(self,release,key,transport,protocol,request)
aiohttp.session.TransportWrapper.__init__(self,release,key,transport,protocol,request)
aiohttp.session.TransportWrapper.close(self,force=False)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/utils.py----------------------------------------
A:aiohttp.utils.r->'{} {} HTTP/{}.{}'.format(message.method, message.path, message.version[0], message.version[1])
A:aiohttp.utils.self[key]->value.replace('"', '\\"')
A:aiohttp.utils.kl->k.lower()
aiohttp.utils.SafeAtoms(self,atoms)
aiohttp.utils.SafeAtoms.__getitem__(self,k)
aiohttp.utils.SafeAtoms.__init__(self,atoms)
aiohttp.utils.atoms(message,environ,response,request_time)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/test_utils.py----------------------------------------
A:aiohttp.test_utils.t->asyncio.Task(once(), loop=loop)
A:aiohttp.test_utils.self._url->'{}://{}:{}'.format('https' if use_ssl else 'http', host, port)
A:aiohttp.test_utils.body->json.dumps(resp, indent=4, sort_keys=True)
A:aiohttp.test_utils.rob->router(self, properties, self.transport, message, bytes(body))
A:aiohttp.test_utils.response->aiohttp.Response(self.transport, 200, message.version)
A:aiohttp.test_utils.here->os.path.join(os.path.dirname(__file__), '..', 'tests')
A:aiohttp.test_utils.keyfile->os.path.join(here, 'sample.key')
A:aiohttp.test_utils.certfile->os.path.join(here, 'sample.crt')
A:aiohttp.test_utils.sslcontext->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:aiohttp.test_utils.thread_loop->asyncio.new_event_loop()
A:aiohttp.test_utils.server->asyncio.new_event_loop().run_until_complete(thread_loop.create_server(lambda : TestHttpServer(keep_alive=0.5), host, port, ssl=sslcontext))
A:aiohttp.test_utils.waiter->asyncio.Future(loop=thread_loop)
A:aiohttp.test_utils.fut->asyncio.Future(loop=loop)
A:aiohttp.test_utils.server_thread->threading.Thread(target=run, args=(loop, fut))
A:aiohttp.test_utils.(thread_loop, waiter, addr)->loop.run_until_complete(fut)
A:aiohttp.test_utils.self._headers->http.client.HTTPMessage()
A:aiohttp.test_utils.url->urllib.parse.urlsplit(self._uri)
A:aiohttp.test_utils.mapping->f_locals.setdefault('_mapping', [])
A:aiohttp.test_utils.match->route.match(self._path)
A:aiohttp.test_utils.out->io.BytesIO()
A:aiohttp.test_utils.key->'-'.join((p.capitalize() for p in key.split('-')))
A:aiohttp.test_utils.encoding->self._headers.get('content-encoding', '').lower()
A:aiohttp.test_utils.ct->self._headers.get('content-type', '').lower()
A:aiohttp.test_utils.resp['form']->urllib.parse.parse_qs(self._body.decode('latin1'))
A:aiohttp.test_utils.message->email.parser.BytesParser().parse(out)
A:aiohttp.test_utils.(key, params)->cgi.parse_header(msg.get('content-disposition', ''))
A:aiohttp.test_utils.params['data']->msg.get_payload()
A:aiohttp.test_utils.params['content-type']->msg.get_content_type()
aiohttp.test_utils.Router(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router.__init__(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router._response(self,response,body=None,headers=None,chunked=False)
aiohttp.test_utils.Router._start_response(self,code)
aiohttp.test_utils.Router.define(rmatch)
aiohttp.test_utils.Router.dispatch(self)
aiohttp.test_utils.run_briefly(loop)
aiohttp.test_utils.run_server(loop,*,host='127.0.0.1',port=0,use_ssl=False,router=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/protocol.py----------------------------------------
A:aiohttp.protocol.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.protocol.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.protocol.HDRRE->re.compile('[\x00-\x1f\x7f()<>@,;:\\[\\]={} \t\\\\"]')
A:aiohttp.protocol.EOF_MARKER->object()
A:aiohttp.protocol.EOL_MARKER->object()
A:aiohttp.protocol.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.headers->collections.deque()
A:aiohttp.protocol.header_length->len(line)
A:aiohttp.protocol.(name, value)->line.strip().split(':', 1)
A:aiohttp.protocol.name->name.strip().upper().strip().upper()
A:aiohttp.protocol.value->value.strip().strip()
A:aiohttp.protocol.v->value.strip().strip().lower()
A:aiohttp.protocol.enc->value.strip().strip().lower()
A:aiohttp.protocol.lines->raw_data.decode('ascii', 'surrogateescape').splitlines(True)
A:aiohttp.protocol.(method, path, version)->line.strip().split(None, 2)
A:aiohttp.protocol.method->method.upper().upper()
A:aiohttp.protocol.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.protocol.(headers, close, compression)->self.parse_headers(lines)
A:aiohttp.protocol.(version, status)->line.strip().split(None, 1)
A:aiohttp.protocol.(status, reason)->int(status).split(None, 1)
A:aiohttp.protocol.status->int(status)
A:aiohttp.protocol.out->DeflateBuffer(out, self.message.compression)
A:aiohttp.protocol.length->max(0, length - l)
A:aiohttp.protocol.i->line.strip().find(b';')
A:aiohttp.protocol.line->line.strip().strip()
A:aiohttp.protocol.size->int(line, 16)
A:aiohttp.protocol.self.zlib->zlib.decompressobj(wbits=zlib_mode)
A:aiohttp.protocol.chunk->bytes(buf[:chunk_size])
A:aiohttp.protocol.new_filter->func(self, *args, **kw)
A:aiohttp.protocol.self.filter->filter_pipe(filter, new_filter)
A:aiohttp.protocol.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} asyncio/0.1'.format(sys.version_info)
A:aiohttp.protocol.self.headers->collections.deque()
A:aiohttp.protocol.self.length->int(value)
A:aiohttp.protocol.val->value.strip().strip().lower()
A:aiohttp.protocol.self.writer->self._write_eof_payload()
A:aiohttp.protocol.hdrs->''.join(itertools.chain((self.status_line,), *((k, ': ', v, '\r\n') for (k, v) in self.headers)))
A:aiohttp.protocol.chunk_len->'{:x}\r\n'.format(len(chunk)).encode('ascii')
A:aiohttp.protocol.l->len(chunk)
A:aiohttp.protocol.buf->bytearray()
A:aiohttp.protocol.zcomp->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.protocol.self.status_line->'{0} {1} HTTP/{2[0]}.{2[1]}\r\n'.format(method, path, http_version)
aiohttp.DeflateBuffer(self,out,encoding)
aiohttp.DeflateBuffer.feed_data(self,chunk)
aiohttp.DeflateBuffer.feed_eof(self)
aiohttp.HttpMessage(self,transport,version,close)
aiohttp.HttpMessage._add_default_headers(self)
aiohttp.HttpMessage._write_chunked_payload(self)
aiohttp.HttpMessage._write_eof_payload(self)
aiohttp.HttpMessage._write_length_payload(self,length)
aiohttp.HttpMessage.add_chunking_filter(self,chunk_size=16*1024)
aiohttp.HttpMessage.add_compression_filter(self,encoding='deflate')
aiohttp.HttpMessage.add_header(self,name,value)
aiohttp.HttpMessage.add_headers(self,*headers)
aiohttp.HttpMessage.force_chunked(self)
aiohttp.HttpMessage.force_close(self)
aiohttp.HttpMessage.is_headers_sent(self)
aiohttp.HttpMessage.keep_alive(self)
aiohttp.HttpMessage.send_headers(self)
aiohttp.HttpMessage.write(self,chunk)
aiohttp.HttpMessage.write_eof(self)
aiohttp.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.HttpParser.parse_headers(self,lines)
aiohttp.HttpPayloadParser(self,message,length=None,compression=True,readall=False)
aiohttp.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_length_payload(self,out,buf,length)
aiohttp.HttpRequestParser(self,out,buf)
aiohttp.HttpResponseParser(self,out,buf)
aiohttp.Request(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.Request._add_default_headers(self)
aiohttp.Response(self,transport,status,http_version=(1,1),close=False)
aiohttp.Response._add_default_headers(self)
aiohttp.filter_pipe(filter,filter2)
aiohttp.protocol.DeflateBuffer(self,out,encoding)
aiohttp.protocol.DeflateBuffer.__init__(self,out,encoding)
aiohttp.protocol.DeflateBuffer.feed_data(self,chunk)
aiohttp.protocol.DeflateBuffer.feed_eof(self)
aiohttp.protocol.HttpMessage(self,transport,version,close)
aiohttp.protocol.HttpMessage.__init__(self,transport,version,close)
aiohttp.protocol.HttpMessage._add_default_headers(self)
aiohttp.protocol.HttpMessage._write_chunked_payload(self)
aiohttp.protocol.HttpMessage._write_eof_payload(self)
aiohttp.protocol.HttpMessage._write_length_payload(self,length)
aiohttp.protocol.HttpMessage.add_chunking_filter(self,chunk_size=16*1024)
aiohttp.protocol.HttpMessage.add_compression_filter(self,encoding='deflate')
aiohttp.protocol.HttpMessage.add_header(self,name,value)
aiohttp.protocol.HttpMessage.add_headers(self,*headers)
aiohttp.protocol.HttpMessage.force_chunked(self)
aiohttp.protocol.HttpMessage.force_close(self)
aiohttp.protocol.HttpMessage.is_headers_sent(self)
aiohttp.protocol.HttpMessage.keep_alive(self)
aiohttp.protocol.HttpMessage.send_headers(self)
aiohttp.protocol.HttpMessage.write(self,chunk)
aiohttp.protocol.HttpMessage.write_eof(self)
aiohttp.protocol.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.__init__(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.parse_headers(self,lines)
aiohttp.protocol.HttpPayloadParser(self,message,length=None,compression=True,readall=False)
aiohttp.protocol.HttpPayloadParser.__init__(self,message,length=None,compression=True,readall=False)
aiohttp.protocol.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_length_payload(self,out,buf,length)
aiohttp.protocol.HttpRequestParser(self,out,buf)
aiohttp.protocol.HttpRequestParser.__call__(self,out,buf)
aiohttp.protocol.HttpResponseParser(self,out,buf)
aiohttp.protocol.HttpResponseParser.__call__(self,out,buf)
aiohttp.protocol.Request(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.protocol.Request.__init__(self,transport,method,path,http_version=(1,1),close=False)
aiohttp.protocol.Request._add_default_headers(self)
aiohttp.protocol.Response(self,transport,status,http_version=(1,1),close=False)
aiohttp.protocol.Response.__init__(self,transport,status,http_version=(1,1),close=False)
aiohttp.protocol.Response._add_default_headers(self)
aiohttp.protocol.filter_pipe(filter,filter2)
aiohttp.protocol.wrap_payload_filter(func)
aiohttp.wrap_payload_filter(func)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/errors.py----------------------------------------
aiohttp.BadRequestException(HttpException)
aiohttp.BadStatusLine(BadRequestException,http.client.BadStatusLine)
aiohttp.ConnectionError(Exception)
aiohttp.HttpErrorException(self,code,message='',headers=None)
aiohttp.HttpException(http.client.HTTPException)
aiohttp.IncompleteRead(BadRequestException,http.client.IncompleteRead)
aiohttp.InvalidHeader(self,hdr)
aiohttp.LineTooLong(BadRequestException,http.client.LineTooLong)
aiohttp.errors.BadRequestException(HttpException)
aiohttp.errors.BadStatusLine(BadRequestException,http.client.BadStatusLine)
aiohttp.errors.ConnectionError(Exception)
aiohttp.errors.HttpErrorException(self,code,message='',headers=None)
aiohttp.errors.HttpErrorException.__init__(self,code,message='',headers=None)
aiohttp.errors.HttpException(http.client.HTTPException)
aiohttp.errors.IncompleteRead(BadRequestException,http.client.IncompleteRead)
aiohttp.errors.InvalidHeader(self,hdr)
aiohttp.errors.InvalidHeader.__init__(self,hdr)
aiohttp.errors.LineTooLong(BadRequestException,http.client.LineTooLong)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/wsgi.py----------------------------------------
A:aiohttp.wsgi.SCRIPT_NAME->os.environ.get('SCRIPT_NAME', '')
A:aiohttp.wsgi.uri_parts->urlsplit(message.path)
A:aiohttp.wsgi.forward->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip()
A:aiohttp.wsgi.host->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip().split(':')[0].lower()
A:aiohttp.wsgi.environ['REMOTE_PORT']->str(remote[1])
A:aiohttp.wsgi.server->aiohttp.server.split(':').split(':')
A:aiohttp.wsgi.environ['SERVER_PORT']->str(server[1])
A:aiohttp.wsgi.environ['PATH_INFO']->unquote(path_info)
A:aiohttp.wsgi.now->time.time()
A:aiohttp.wsgi.wsgiinput->io.BytesIO()
A:aiohttp.wsgi.environ->self.create_wsgi_environ(message, payload)
A:aiohttp.wsgi.response->self.create_wsgi_response(message)
A:aiohttp.wsgi.riter->self.wsgi(environ, response.start_response)
A:aiohttp.wsgi.data->self.fobj.read(self.chunk_size)
A:aiohttp.wsgi.status_code->int(status.split(' ', 1)[0])
A:aiohttp.wsgi.respself.response->aiohttp.Response(self.transport, status_code, self.message.version, self.message.should_close)
aiohttp.wsgi.FileWrapper(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__init__(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__iter__(self)
aiohttp.wsgi.FileWrapper.__next__(self)
aiohttp.wsgi.WSGIServerHttpProtocol(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.__init__(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_environ(self,message,payload)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_response(self,message)
aiohttp.wsgi.WSGIServerHttpProtocol.handle_request(self,message,payload)
aiohttp.wsgi.WsgiResponse(self,transport,message)
aiohttp.wsgi.WsgiResponse.__init__(self,transport,message)
aiohttp.wsgi.WsgiResponse.start_response(self,status,headers,exc_info=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/websocket.py----------------------------------------
A:aiohttp.websocket.Message->collections.namedtuple('Message', ['tp', 'data', 'extra'])
A:aiohttp.websocket.(first_byte, second_byte)->struct.unpack('!BB', data)
A:aiohttp.websocket.payload->bytes((b ^ mask[i % 4] for (i, b) in enumerate(payload)))
A:aiohttp.websocket.header->bytes([128 | opcode])
A:aiohttp.websocket.msg_length->len(message)
A:aiohttp.websocket.message->message.encode('utf-8').encode('utf-8')
A:aiohttp.websocket.headers->dict(((hdr, val) for (hdr, val) in headers if hdr in WS_HDRS))
A:aiohttp.websocket.version->dict(((hdr, val) for (hdr, val) in headers if hdr in WS_HDRS)).get('SEC-WEBSOCKET-VERSION')
A:aiohttp.websocket.key->dict(((hdr, val) for (hdr, val) in headers if hdr in WS_HDRS)).get('SEC-WEBSOCKET-KEY')
aiohttp.websocket.WebSocketError(Exception)
aiohttp.websocket.WebSocketParser(out,buf)
aiohttp.websocket.WebSocketWriter(self,transport)
aiohttp.websocket.WebSocketWriter.__init__(self,transport)
aiohttp.websocket.WebSocketWriter._send_frame(self,message,opcode)
aiohttp.websocket.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp.websocket.WebSocketWriter.ping(self)
aiohttp.websocket.WebSocketWriter.pong(self)
aiohttp.websocket.WebSocketWriter.send(self,message,binary=False)
aiohttp.websocket.do_handshake(method,headers,transport)
aiohttp.websocket.parse_frame(buf)
aiohttp.websocket.parse_message(buf)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.3/parsers.py----------------------------------------
A:aiohttp.parsers.output->DataQueue(loop=self._loop)
A:aiohttp.parsers.p->parser(output, self._input)
A:aiohttp.parsers.self._buffer->collections.deque()
A:aiohttp.parsers.self._waiter->asyncio.Future(loop=self._loop)
A:aiohttp.parsers.self._writer->self._feed_data()
A:aiohttp.parsers.self.size->len(self)
A:aiohttp.parsers.chunk_len->len(chunk)
A:aiohttp.parsers.stop_len->len(stop)
A:aiohttp.parsers.pos->self.find(stop, self.offset)
A:aiohttp.parsers.stop_line->self.find(stop, self.offset)
aiohttp.ChunksParser(self,size=8196)
aiohttp.DataQueue(self,*,loop=None)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.read(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EofStream(Exception)
aiohttp.LinesParser(self,limit=2**16,exc=ValueError)
aiohttp.ParserBuffer(self,*args)
aiohttp.ParserBuffer.__bytes__(self)
aiohttp.ParserBuffer._feed_data(self)
aiohttp.ParserBuffer._shrink(self)
aiohttp.ParserBuffer.feed_data(self,data)
aiohttp.ParserBuffer.read(self,size)
aiohttp.ParserBuffer.readsome(self,size=None)
aiohttp.ParserBuffer.readuntil(self,stop,limit=None,exc=ValueError)
aiohttp.ParserBuffer.skip(self,size)
aiohttp.ParserBuffer.skipuntil(self,stop)
aiohttp.StreamParser(self,*,loop=None,inbuf=None)
aiohttp.StreamParser.exception(self)
aiohttp.StreamParser.feed_data(self,data)
aiohttp.StreamParser.feed_eof(self)
aiohttp.StreamParser.is_connected(self)
aiohttp.StreamParser.set_exception(self,exc)
aiohttp.StreamParser.set_parser(self,parser)
aiohttp.StreamParser.unset_parser(self)
aiohttp.StreamProtocol(StreamParser,asyncio.Protocol)
aiohttp.StreamProtocol.connection_lost(self,exc)
aiohttp.StreamProtocol.connection_made(self,transport)
aiohttp.parsers.ChunksParser(self,size=8196)
aiohttp.parsers.ChunksParser.__init__(self,size=8196)
aiohttp.parsers.DataQueue(self,*,loop=None)
aiohttp.parsers.DataQueue.__init__(self,*,loop=None)
aiohttp.parsers.DataQueue.exception(self)
aiohttp.parsers.DataQueue.feed_data(self,data)
aiohttp.parsers.DataQueue.feed_eof(self)
aiohttp.parsers.DataQueue.read(self)
aiohttp.parsers.DataQueue.set_exception(self,exc)
aiohttp.parsers.EofStream(Exception)
aiohttp.parsers.LinesParser(self,limit=2**16,exc=ValueError)
aiohttp.parsers.LinesParser.__init__(self,limit=2**16,exc=ValueError)
aiohttp.parsers.ParserBuffer(self,*args)
aiohttp.parsers.ParserBuffer.__bytes__(self)
aiohttp.parsers.ParserBuffer.__init__(self,*args)
aiohttp.parsers.ParserBuffer._feed_data(self)
aiohttp.parsers.ParserBuffer._shrink(self)
aiohttp.parsers.ParserBuffer.feed_data(self,data)
aiohttp.parsers.ParserBuffer.read(self,size)
aiohttp.parsers.ParserBuffer.readsome(self,size=None)
aiohttp.parsers.ParserBuffer.readuntil(self,stop,limit=None,exc=ValueError)
aiohttp.parsers.ParserBuffer.skip(self,size)
aiohttp.parsers.ParserBuffer.skipuntil(self,stop)
aiohttp.parsers.StreamParser(self,*,loop=None,inbuf=None)
aiohttp.parsers.StreamParser.__init__(self,*,loop=None,inbuf=None)
aiohttp.parsers.StreamParser.exception(self)
aiohttp.parsers.StreamParser.feed_data(self,data)
aiohttp.parsers.StreamParser.feed_eof(self)
aiohttp.parsers.StreamParser.is_connected(self)
aiohttp.parsers.StreamParser.set_exception(self,exc)
aiohttp.parsers.StreamParser.set_parser(self,parser)
aiohttp.parsers.StreamParser.unset_parser(self)
aiohttp.parsers.StreamProtocol(StreamParser,asyncio.Protocol)
aiohttp.parsers.StreamProtocol.connection_lost(self,exc)
aiohttp.parsers.StreamProtocol.connection_made(self,transport)

