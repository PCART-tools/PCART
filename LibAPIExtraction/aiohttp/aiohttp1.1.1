
----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/abc.py----------------------------------------
aiohttp.abc.AbstractCookieJar(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.__init__(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.clear(self)
aiohttp.abc.AbstractCookieJar.filter_cookies(self,request_url)
aiohttp.abc.AbstractCookieJar.update_cookies(self,cookies,response_url=None)
aiohttp.abc.AbstractMatchInfo(ABC)
aiohttp.abc.AbstractMatchInfo.add_app(self,app)
aiohttp.abc.AbstractMatchInfo.apps(self)
aiohttp.abc.AbstractMatchInfo.expect_handler(self,request)
aiohttp.abc.AbstractMatchInfo.freeze(self)
aiohttp.abc.AbstractMatchInfo.get_info(self)
aiohttp.abc.AbstractMatchInfo.handler(self,request)
aiohttp.abc.AbstractMatchInfo.http_exception(self)
aiohttp.abc.AbstractResolver(ABC)
aiohttp.abc.AbstractResolver.close(self)
aiohttp.abc.AbstractResolver.resolve(self,hostname)
aiohttp.abc.AbstractRouter(self)
aiohttp.abc.AbstractRouter.__init__(self)
aiohttp.abc.AbstractRouter.freeze(self)
aiohttp.abc.AbstractRouter.frozen(self)
aiohttp.abc.AbstractRouter.resolve(self,request)
aiohttp.abc.AbstractView(self,request)
aiohttp.abc.AbstractView.__init__(self,request)
aiohttp.abc.AbstractView.__iter__(self)
aiohttp.abc.AbstractView.request(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/worker.py----------------------------------------
A:aiohttp.worker.self.loop->asyncio.new_event_loop()
A:aiohttp.worker.self._runner->ensure_future(self._run(), loop=self.loop)
A:aiohttp.worker.handler->self.make_handler(self.wsgi)
A:aiohttp.worker.pid->os.getpid()
A:aiohttp.worker.cnt->sum((handler.requests_count for handler in self.servers.values()))
A:aiohttp.worker.ctx->ssl.SSLContext(cfg.ssl_version)
aiohttp.worker.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.worker.GunicornUVLoopWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker(self,*args,**kw)
aiohttp.worker.GunicornWebWorker.__init__(self,*args,**kw)
aiohttp.worker.GunicornWebWorker._create_ssl_context(cfg)
aiohttp.worker.GunicornWebWorker._get_valid_log_format(self,source_format)
aiohttp.worker.GunicornWebWorker._run(self)
aiohttp.worker.GunicornWebWorker.close(self)
aiohttp.worker.GunicornWebWorker.handle_abort(self,sig,frame)
aiohttp.worker.GunicornWebWorker.handle_quit(self,sig,frame)
aiohttp.worker.GunicornWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker.init_signals(self)
aiohttp.worker.GunicornWebWorker.make_handler(self,app)
aiohttp.worker.GunicornWebWorker.run(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/multipart.py----------------------------------------
A:aiohttp.multipart.CHAR->set((chr(i) for i in range(0, 128)))
A:aiohttp.multipart.(disptype, *parts)->header.split(';')
A:aiohttp.multipart.(key, value)->item.split('=', 1)
A:aiohttp.multipart.key->key.lower().strip().lower().strip()
A:aiohttp.multipart.value->'; '.join((value, sparams))
A:aiohttp.multipart.(encoding, _, value)->'; '.join((value, sparams)).split("'", 2)
A:aiohttp.multipart.fnparams->sorted(((key, value) for (key, value) in params.items() if key.startswith('filename*')))
A:aiohttp.multipart.(_, tail)->key.lower().strip().lower().strip().split('*', 1)
A:aiohttp.multipart.__aiter__->asyncio.coroutine(__aiter__)
A:aiohttp.multipart.length->self.headers.get(CONTENT_LENGTH, None)
A:aiohttp.multipart.self._unread->deque()
A:aiohttp.multipart.data->self._decode_content_transfer(data)
A:aiohttp.multipart.chunk_size->min(size, self._length - self._read_bytes)
A:aiohttp.multipart.idx->window.find(sub, max(0, len(self._prev_chunk) - len(sub)))
A:aiohttp.multipart.line->self._unread.popleft()
A:aiohttp.multipart.sline->self._unread.popleft().rstrip(b'\r\n')
A:aiohttp.multipart.encoding->self.headers[CONTENT_TRANSFER_ENCODING].lower()
A:aiohttp.multipart.ctype->CIMultiDict().get(CONTENT_TYPE, '')
A:aiohttp.multipart.(*_, params)->parse_mimetype(self.headers.get(CONTENT_TYPE))
A:aiohttp.multipart.(_, params)->parse_content_disposition(self.headers.get(CONTENT_DISPOSITION))
A:aiohttp.multipart.self._boundary->('--' + self._get_boundary()).encode()
A:aiohttp.multipart.obj->list(obj.items())
A:aiohttp.multipart.(mtype, *_)->parse_mimetype(ctype)
A:aiohttp.multipart.(mtype, *_, params)->parse_mimetype(self.headers[CONTENT_TYPE])
A:aiohttp.multipart.chunk->next(stream, None)
A:aiohttp.multipart.parser->HttpParser()
A:aiohttp.multipart.(headers, *_)->HttpParser().parse_headers(lines)
A:aiohttp.multipart.headers->CIMultiDict()
A:aiohttp.multipart.content_type->self._guess_content_type(self.obj)
A:aiohttp.multipart.content_length->self._guess_content_length(self.obj)
A:aiohttp.multipart.self.headers[CONTENT_LENGTH]->str(content_length)
A:aiohttp.multipart.filename->self._guess_filename(self.obj)
A:aiohttp.multipart.charset->params.get('charset', 'us-ascii')
A:aiohttp.multipart.name->getattr(obj, 'name', None)
A:aiohttp.multipart.(mtype, stype, *_)->parse_mimetype(self.headers.get(CONTENT_TYPE))
A:aiohttp.multipart.serializer->self._serialize_map.get((mtype, stype))
A:aiohttp.multipart.stream->self._apply_content_transfer_encoding(stream)
A:aiohttp.multipart.zcomp->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.multipart.buffer->bytearray()
A:aiohttp.multipart.(div, mod)->divmod(len(buffer), 3)
A:aiohttp.multipart.qval->quote(val, '')
A:aiohttp.multipart.sparams->'; '.join(('='.join(pair) for pair in lparams))
A:aiohttp.multipart.self.headers->CIMultiDict()
A:aiohttp.multipart.self.headers[CONTENT_TYPE]->'multipart/{}; boundary="{}"'.format(subtype, boundary)
aiohttp.BadContentDispositionHeader(RuntimeWarning)
aiohttp.BadContentDispositionParam(RuntimeWarning)
aiohttp.BodyPartReader(self,boundary,headers,content)
aiohttp.BodyPartReader._decode_content(self,data)
aiohttp.BodyPartReader._decode_content_transfer(self,data)
aiohttp.BodyPartReader._read_chunk_from_length(self,size)
aiohttp.BodyPartReader._read_chunk_from_stream(self,size)
aiohttp.BodyPartReader.at_eof(self)
aiohttp.BodyPartReader.decode(self,data)
aiohttp.BodyPartReader.filename(self)
aiohttp.BodyPartReader.form(self,*,encoding=None)
aiohttp.BodyPartReader.get_charset(self,default=None)
aiohttp.BodyPartReader.json(self,*,encoding=None)
aiohttp.BodyPartReader.next(self)
aiohttp.BodyPartReader.read(self,*,decode=False)
aiohttp.BodyPartReader.read_chunk(self,size=chunk_size)
aiohttp.BodyPartReader.readline(self)
aiohttp.BodyPartReader.release(self)
aiohttp.BodyPartReader.text(self,*,encoding=None)
aiohttp.BodyPartWriter(self,obj,headers=None,*,chunk_size=8192)
aiohttp.BodyPartWriter._apply_content_encoding(self,stream)
aiohttp.BodyPartWriter._apply_content_transfer_encoding(self,stream)
aiohttp.BodyPartWriter._fill_headers_with_defaults(self)
aiohttp.BodyPartWriter._guess_content_length(self,obj)
aiohttp.BodyPartWriter._guess_content_type(self,obj,default='application/octet-stream')
aiohttp.BodyPartWriter._guess_filename(self,obj)
aiohttp.BodyPartWriter._maybe_encode_stream(self,stream)
aiohttp.BodyPartWriter._serialize_bytes(self,obj)
aiohttp.BodyPartWriter._serialize_default(self,obj)
aiohttp.BodyPartWriter._serialize_form(self,obj)
aiohttp.BodyPartWriter._serialize_io(self,obj)
aiohttp.BodyPartWriter._serialize_json(self,obj)
aiohttp.BodyPartWriter._serialize_multipart(self,obj)
aiohttp.BodyPartWriter._serialize_obj(self)
aiohttp.BodyPartWriter._serialize_str(self,obj)
aiohttp.BodyPartWriter.filename(self)
aiohttp.BodyPartWriter.serialize(self)
aiohttp.BodyPartWriter.set_content_disposition(self,disptype,**params)
aiohttp.MultipartReader(self,headers,content)
aiohttp.MultipartReader._get_boundary(self)
aiohttp.MultipartReader._get_part_reader(self,headers)
aiohttp.MultipartReader._maybe_release_last_part(self)
aiohttp.MultipartReader._read_boundary(self)
aiohttp.MultipartReader._read_headers(self)
aiohttp.MultipartReader._read_until_first_boundary(self)
aiohttp.MultipartReader._readline(self)
aiohttp.MultipartReader.at_eof(self)
aiohttp.MultipartReader.fetch_next_part(self)
aiohttp.MultipartReader.from_response(cls,response)
aiohttp.MultipartReader.next(self)
aiohttp.MultipartReader.release(self)
aiohttp.MultipartResponseWrapper(self,resp,stream)
aiohttp.MultipartResponseWrapper.at_eof(self)
aiohttp.MultipartResponseWrapper.next(self)
aiohttp.MultipartResponseWrapper.release(self)
aiohttp.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.MultipartWriter.__enter__(self)
aiohttp.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.MultipartWriter.__iter__(self)
aiohttp.MultipartWriter.__len__(self)
aiohttp.MultipartWriter.append(self,obj,headers=None)
aiohttp.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.MultipartWriter.boundary(self)
aiohttp.MultipartWriter.serialize(self)
aiohttp.content_disposition_filename(params)
aiohttp.multipart.BadContentDispositionHeader(RuntimeWarning)
aiohttp.multipart.BadContentDispositionParam(RuntimeWarning)
aiohttp.multipart.BodyPartReader(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader.__init__(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader._decode_content(self,data)
aiohttp.multipart.BodyPartReader._decode_content_transfer(self,data)
aiohttp.multipart.BodyPartReader._read_chunk_from_length(self,size)
aiohttp.multipart.BodyPartReader._read_chunk_from_stream(self,size)
aiohttp.multipart.BodyPartReader.at_eof(self)
aiohttp.multipart.BodyPartReader.decode(self,data)
aiohttp.multipart.BodyPartReader.filename(self)
aiohttp.multipart.BodyPartReader.form(self,*,encoding=None)
aiohttp.multipart.BodyPartReader.get_charset(self,default=None)
aiohttp.multipart.BodyPartReader.json(self,*,encoding=None)
aiohttp.multipart.BodyPartReader.next(self)
aiohttp.multipart.BodyPartReader.read(self,*,decode=False)
aiohttp.multipart.BodyPartReader.read_chunk(self,size=chunk_size)
aiohttp.multipart.BodyPartReader.readline(self)
aiohttp.multipart.BodyPartReader.release(self)
aiohttp.multipart.BodyPartReader.text(self,*,encoding=None)
aiohttp.multipart.BodyPartWriter(self,obj,headers=None,*,chunk_size=8192)
aiohttp.multipart.BodyPartWriter.__init__(self,obj,headers=None,*,chunk_size=8192)
aiohttp.multipart.BodyPartWriter._apply_content_encoding(self,stream)
aiohttp.multipart.BodyPartWriter._apply_content_transfer_encoding(self,stream)
aiohttp.multipart.BodyPartWriter._fill_headers_with_defaults(self)
aiohttp.multipart.BodyPartWriter._guess_content_length(self,obj)
aiohttp.multipart.BodyPartWriter._guess_content_type(self,obj,default='application/octet-stream')
aiohttp.multipart.BodyPartWriter._guess_filename(self,obj)
aiohttp.multipart.BodyPartWriter._maybe_encode_stream(self,stream)
aiohttp.multipart.BodyPartWriter._serialize_bytes(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_default(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_form(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_io(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_json(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_multipart(self,obj)
aiohttp.multipart.BodyPartWriter._serialize_obj(self)
aiohttp.multipart.BodyPartWriter._serialize_str(self,obj)
aiohttp.multipart.BodyPartWriter.filename(self)
aiohttp.multipart.BodyPartWriter.serialize(self)
aiohttp.multipart.BodyPartWriter.set_content_disposition(self,disptype,**params)
aiohttp.multipart.MultipartReader(self,headers,content)
aiohttp.multipart.MultipartReader.__init__(self,headers,content)
aiohttp.multipart.MultipartReader._get_boundary(self)
aiohttp.multipart.MultipartReader._get_part_reader(self,headers)
aiohttp.multipart.MultipartReader._maybe_release_last_part(self)
aiohttp.multipart.MultipartReader._read_boundary(self)
aiohttp.multipart.MultipartReader._read_headers(self)
aiohttp.multipart.MultipartReader._read_until_first_boundary(self)
aiohttp.multipart.MultipartReader._readline(self)
aiohttp.multipart.MultipartReader.at_eof(self)
aiohttp.multipart.MultipartReader.fetch_next_part(self)
aiohttp.multipart.MultipartReader.from_response(cls,response)
aiohttp.multipart.MultipartReader.next(self)
aiohttp.multipart.MultipartReader.release(self)
aiohttp.multipart.MultipartResponseWrapper(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.__init__(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.at_eof(self)
aiohttp.multipart.MultipartResponseWrapper.next(self)
aiohttp.multipart.MultipartResponseWrapper.release(self)
aiohttp.multipart.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__enter__(self)
aiohttp.multipart.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.multipart.MultipartWriter.__init__(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__iter__(self)
aiohttp.multipart.MultipartWriter.__len__(self)
aiohttp.multipart.MultipartWriter.append(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.boundary(self)
aiohttp.multipart.MultipartWriter.serialize(self)
aiohttp.multipart.content_disposition_filename(params)
aiohttp.multipart.parse_content_disposition(header)
aiohttp.parse_content_disposition(header)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/log.py----------------------------------------
A:aiohttp.log.access_logger->logging.getLogger('aiohttp.access')
A:aiohttp.log.client_logger->logging.getLogger('aiohttp.client')
A:aiohttp.log.internal_logger->logging.getLogger('aiohttp.internal')
A:aiohttp.log.server_logger->logging.getLogger('aiohttp.server')
A:aiohttp.log.web_logger->logging.getLogger('aiohttp.web')
A:aiohttp.log.ws_logger->logging.getLogger('aiohttp.websocket')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/client_ws.py----------------------------------------
A:aiohttp.client_ws.__aiter__->asyncio.coroutine(__aiter__)
aiohttp.ClientWebSocketResponse(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop)
aiohttp.ClientWebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.ClientWebSocketResponse.close_code(self)
aiohttp.ClientWebSocketResponse.closed(self)
aiohttp.ClientWebSocketResponse.exception(self)
aiohttp.ClientWebSocketResponse.ping(self,message='b')
aiohttp.ClientWebSocketResponse.pong(self,message='b')
aiohttp.ClientWebSocketResponse.protocol(self)
aiohttp.ClientWebSocketResponse.receive(self)
aiohttp.ClientWebSocketResponse.receive_bytes(self)
aiohttp.ClientWebSocketResponse.receive_json(self,*,loads=json.loads)
aiohttp.ClientWebSocketResponse.receive_str(self)
aiohttp.ClientWebSocketResponse.send_bytes(self,data)
aiohttp.ClientWebSocketResponse.send_json(self,data,*,dumps=json.dumps)
aiohttp.ClientWebSocketResponse.send_str(self,data)
aiohttp.client_ws.ClientWebSocketResponse(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop)
aiohttp.client_ws.ClientWebSocketResponse.__init__(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop)
aiohttp.client_ws.ClientWebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.client_ws.ClientWebSocketResponse.close_code(self)
aiohttp.client_ws.ClientWebSocketResponse.closed(self)
aiohttp.client_ws.ClientWebSocketResponse.exception(self)
aiohttp.client_ws.ClientWebSocketResponse.ping(self,message='b')
aiohttp.client_ws.ClientWebSocketResponse.pong(self,message='b')
aiohttp.client_ws.ClientWebSocketResponse.protocol(self)
aiohttp.client_ws.ClientWebSocketResponse.receive(self)
aiohttp.client_ws.ClientWebSocketResponse.receive_bytes(self)
aiohttp.client_ws.ClientWebSocketResponse.receive_json(self,*,loads=json.loads)
aiohttp.client_ws.ClientWebSocketResponse.receive_str(self)
aiohttp.client_ws.ClientWebSocketResponse.send_bytes(self,data)
aiohttp.client_ws.ClientWebSocketResponse.send_json(self,data,*,dumps=json.dumps)
aiohttp.client_ws.ClientWebSocketResponse.send_str(self,data)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/signals.py----------------------------------------
A:aiohttp.signals.res->receiver(*args, **kwargs)
A:aiohttp.signals.ordinal->self._pre.ordinal()
A:aiohttp.signals.self._counter->count(1)
aiohttp.signals.BaseSignal(FrozenList)
aiohttp.signals.BaseSignal._send(self,*args,**kwargs)
aiohttp.signals.DebugSignal(BaseSignal)
aiohttp.signals.DebugSignal.send(self,ordinal,name,*args,**kwargs)
aiohttp.signals.PostSignal(DebugSignal)
aiohttp.signals.PreSignal(self)
aiohttp.signals.PreSignal.__init__(self)
aiohttp.signals.PreSignal.ordinal(self)
aiohttp.signals.Signal(self,app)
aiohttp.signals.Signal.__init__(self,app)
aiohttp.signals.Signal.send(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/test_utils.py----------------------------------------
A:aiohttp.test_utils.t->asyncio.Task(once(), loop=loop)
A:aiohttp.test_utils.self.port->unused_port()
A:aiohttp.test_utils.self._ssl->kwargs.pop('ssl', None)
A:aiohttp.test_utils.self._root->URL('{}://{}:{}'.format(self.scheme, self.host, self.port))
A:aiohttp.test_utils.self.handler->self.app.make_handler(**kwargs)
A:aiohttp.test_utils.self._server->TestServer(app_or_server, scheme=scheme, host=host)
A:aiohttp.test_utils.cookie_jar->aiohttp.CookieJar(unsafe=True, loop=self._loop)
A:aiohttp.test_utils.self._session->ClientSession(loop=self._loop, cookie_jar=cookie_jar, **kwargs)
A:aiohttp.test_utils.self.loop->setup_test_loop()
A:aiohttp.test_utils.self.app->self.get_app(self.loop)
A:aiohttp.test_utils.self.client->TestClient(self.app)
A:aiohttp.test_utils.loop->loop_factory()
A:aiohttp.test_utils.closed->loop_factory().is_closed()
A:aiohttp.test_utils.app->_create_app_mock()
A:aiohttp.test_utils.app.on_response_prepare->Signal(app)
A:aiohttp.test_utils.transport->_create_transport(sslcontext)
A:aiohttp.test_utils.hdrs->CIMultiDict()
A:aiohttp.test_utils.message->RawRequestMessage(method, path, version, hdrs, raw_hdrs, closing, False)
A:aiohttp.test_utils.reader->unittest.mock.Mock()
A:aiohttp.test_utils.writer->unittest.mock.Mock()
A:aiohttp.test_utils.payload->unittest.mock.Mock()
A:aiohttp.test_utils.time_service->unittest.mock.Mock()
A:aiohttp.test_utils.req->Request(message, payload, transport, reader, writer, time_service, secure_proxy_ssl_header=secure_proxy_ssl_header)
A:aiohttp.test_utils.match_info->UrlMappingMatchInfo({}, mock.Mock())
aiohttp.test_utils.AioHTTPTestCase(unittest.TestCase)
aiohttp.test_utils.AioHTTPTestCase.get_app(self,loop)
aiohttp.test_utils.AioHTTPTestCase.setUp(self)
aiohttp.test_utils.AioHTTPTestCase.tearDown(self)
aiohttp.test_utils.TestClient(self,app_or_server,*,scheme=sentinel,host=sentinel,cookie_jar=None,**kwargs)
aiohttp.test_utils.TestClient.__enter__(self)
aiohttp.test_utils.TestClient.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.TestClient.__init__(self,app_or_server,*,scheme=sentinel,host=sentinel,cookie_jar=None,**kwargs)
aiohttp.test_utils.TestClient.app(self)
aiohttp.test_utils.TestClient.close(self)
aiohttp.test_utils.TestClient.delete(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.get(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.handler(self)
aiohttp.test_utils.TestClient.head(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.host(self)
aiohttp.test_utils.TestClient.make_url(self,path)
aiohttp.test_utils.TestClient.options(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.patch(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.port(self)
aiohttp.test_utils.TestClient.post(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.put(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.request(self,method,path,*args,**kwargs)
aiohttp.test_utils.TestClient.server(self)
aiohttp.test_utils.TestClient.session(self)
aiohttp.test_utils.TestClient.start_server(self)
aiohttp.test_utils.TestClient.ws_connect(self,path,*args,**kwargs)
aiohttp.test_utils.TestServer(self,app,*,scheme=sentinel,host='127.0.0.1')
aiohttp.test_utils.TestServer.__enter__(self)
aiohttp.test_utils.TestServer.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.TestServer.__init__(self,app,*,scheme=sentinel,host='127.0.0.1')
aiohttp.test_utils.TestServer.close(self)
aiohttp.test_utils.TestServer.make_url(self,path)
aiohttp.test_utils.TestServer.start_server(self,**kwargs)
aiohttp.test_utils._create_app_mock()
aiohttp.test_utils._create_transport(sslcontext=None)
aiohttp.test_utils.loop_context(loop_factory=asyncio.new_event_loop)
aiohttp.test_utils.make_mocked_coro(return_value=sentinel,raise_exception=sentinel)
aiohttp.test_utils.make_mocked_request(method,path,headers=None,*,version=HttpVersion(1,1),closing=False,app=None,reader=sentinel,writer=sentinel,transport=sentinel,payload=sentinel,sslcontext=None,secure_proxy_ssl_header=None)
aiohttp.test_utils.run_briefly(loop)
aiohttp.test_utils.setup_test_loop(loop_factory=asyncio.new_event_loop)
aiohttp.test_utils.teardown_test_loop(loop)
aiohttp.test_utils.unittest_run_loop(func)
aiohttp.test_utils.unused_port()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/protocol.py----------------------------------------
A:aiohttp.protocol.ASCIISET->set(string.printable)
A:aiohttp.protocol.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.protocol.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.protocol.HDRRE->re.compile(b'[\x00-\x1f\x7f()<>@,;:\\[\\]={} \t\\\\"]')
A:aiohttp.protocol.EOF_MARKER->object()
A:aiohttp.protocol.EOL_MARKER->object()
A:aiohttp.protocol.STATUS_LINE_READY->object()
A:aiohttp.protocol.HttpVersion->collections.namedtuple('HttpVersion', ['major', 'minor'])
A:aiohttp.protocol.HttpVersion10->HttpVersion(1, 0)
A:aiohttp.protocol.HttpVersion11->HttpVersion(1, 1)
A:aiohttp.protocol.RawStatusLineMessage->collections.namedtuple('RawStatusLineMessage', ['method', 'path', 'version'])
A:aiohttp.protocol.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'raw_headers', 'should_close', 'compression'])
A:aiohttp.protocol.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'raw_headers', 'should_close', 'compression'])
A:aiohttp.protocol.headers->CIMultiDict()
A:aiohttp.protocol.header_length->len(line)
A:aiohttp.protocol.(bname, bvalue)->line.strip().split(b':', 1)
A:aiohttp.protocol.bname->bname.strip(b' \t').upper().strip(b' \t').upper()
A:aiohttp.protocol.bvalue->bvalue.strip().strip()
A:aiohttp.protocol.name->istr(name)
A:aiohttp.protocol.value->value.strip().strip()
A:aiohttp.protocol.v->value.strip().strip().lower()
A:aiohttp.protocol.enc->value.strip().strip().lower()
A:aiohttp.protocol.method->method.upper().upper()
A:aiohttp.protocol.lines->raw_data.split(b'\r\n')
A:aiohttp.protocol.line->line.strip().strip()
A:aiohttp.protocol.(method, path, version)->line.strip().strip().split(None, 2)
A:aiohttp.protocol.(n1, n2)->version[5:].split('.', 1)
A:aiohttp.protocol.version->HttpVersion(int(match.group(1)), int(match.group(2)))
A:aiohttp.protocol.(headers, raw_headers, close, compression)->self.parse_headers(lines)
A:aiohttp.protocol.(version, status)->line.strip().strip().split(None, 1)
A:aiohttp.protocol.(status, reason)->int(status).split(None, 1)
A:aiohttp.protocol.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.protocol.status->int(status)
A:aiohttp.protocol.length->int(length)
A:aiohttp.protocol.out->DeflateBuffer(out, self.message.compression)
A:aiohttp.protocol.i->line.strip().strip().find(b';')
A:aiohttp.protocol.size->int(line, 16)
A:aiohttp.protocol.self.zlib->zlib.decompressobj(wbits=zlib_mode)
A:aiohttp.protocol.chunk->bytes(buf[:chunk_size])
A:aiohttp.protocol.new_filter->func(self, *args, **kw)
A:aiohttp.protocol.self.filter->filter_pipe(filter, new_filter)
A:aiohttp.protocol.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} aiohttp/{1}'.format(sys.version_info, aiohttp.__version__)
A:aiohttp.protocol.self.headers->CIMultiDict()
A:aiohttp.protocol.self.length->int(value)
A:aiohttp.protocol.val->value.strip().strip().lower()
A:aiohttp.protocol.self.writer->self._write_eof_payload()
A:aiohttp.protocol.self.headers_length->len(headers)
A:aiohttp.protocol.chunk_len->'{:x}\r\n'.format(len(chunk)).encode('ascii')
A:aiohttp.protocol.l->len(chunk)
A:aiohttp.protocol.buf->bytearray()
A:aiohttp.protocol.zcomp->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.protocol.record->_RESPONSES.get(status)
A:aiohttp.protocol.reason->self.calc_reason(status)
aiohttp.DeflateBuffer(self,out,encoding)
aiohttp.DeflateBuffer.feed_data(self,chunk,size)
aiohttp.DeflateBuffer.feed_eof(self)
aiohttp.HttpMessage(self,transport,version,close)
aiohttp.HttpMessage._add_default_headers(self)
aiohttp.HttpMessage._write_chunked_payload(self)
aiohttp.HttpMessage._write_eof_payload(self)
aiohttp.HttpMessage._write_length_payload(self,length)
aiohttp.HttpMessage.add_chunking_filter(self,chunk_size=16*1024,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.add_compression_filter(self,encoding='deflate',*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.add_header(self,name,value)
aiohttp.HttpMessage.add_headers(self,*headers)
aiohttp.HttpMessage.autochunked(self)
aiohttp.HttpMessage.body_length(self)
aiohttp.HttpMessage.enable_chunked_encoding(self)
aiohttp.HttpMessage.force_close(self)
aiohttp.HttpMessage.is_headers_sent(self)
aiohttp.HttpMessage.keep_alive(self)
aiohttp.HttpMessage.send_headers(self,_sep=':',_end='\r\n')
aiohttp.HttpMessage.status_line(self)
aiohttp.HttpMessage.version(self)
aiohttp.HttpMessage.write(self,chunk,*,drain=False,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.write_eof(self)
aiohttp.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.HttpParser.parse_headers(self,lines)
aiohttp.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.HttpPrefixParser(self,allowed_methods=())
aiohttp.HttpRequestParser(self,out,buf)
aiohttp.HttpResponseParser(self,out,buf)
aiohttp.Request(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.Request.autochunked(self)
aiohttp.Request.method(self)
aiohttp.Request.path(self)
aiohttp.Request.status_line(self)
aiohttp.Response(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.Response._add_default_headers(self)
aiohttp.Response.autochunked(self)
aiohttp.Response.calc_reason(status,*,_RESPONSES=RESPONSES)
aiohttp.Response.reason(self)
aiohttp.Response.status(self)
aiohttp.Response.status_line(self)
aiohttp.WebResponse(Response)
aiohttp.WebResponse._add_default_headers(self)
aiohttp.filter_pipe(filter,filter2,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.DeflateBuffer(self,out,encoding)
aiohttp.protocol.DeflateBuffer.__init__(self,out,encoding)
aiohttp.protocol.DeflateBuffer.feed_data(self,chunk,size)
aiohttp.protocol.DeflateBuffer.feed_eof(self)
aiohttp.protocol.HttpMessage(self,transport,version,close)
aiohttp.protocol.HttpMessage.__init__(self,transport,version,close)
aiohttp.protocol.HttpMessage._add_default_headers(self)
aiohttp.protocol.HttpMessage._write_chunked_payload(self)
aiohttp.protocol.HttpMessage._write_eof_payload(self)
aiohttp.protocol.HttpMessage._write_length_payload(self,length)
aiohttp.protocol.HttpMessage.add_chunking_filter(self,chunk_size=16*1024,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.add_compression_filter(self,encoding='deflate',*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.add_header(self,name,value)
aiohttp.protocol.HttpMessage.add_headers(self,*headers)
aiohttp.protocol.HttpMessage.autochunked(self)
aiohttp.protocol.HttpMessage.body_length(self)
aiohttp.protocol.HttpMessage.enable_chunked_encoding(self)
aiohttp.protocol.HttpMessage.force_close(self)
aiohttp.protocol.HttpMessage.is_headers_sent(self)
aiohttp.protocol.HttpMessage.keep_alive(self)
aiohttp.protocol.HttpMessage.send_headers(self,_sep=':',_end='\r\n')
aiohttp.protocol.HttpMessage.status_line(self)
aiohttp.protocol.HttpMessage.version(self)
aiohttp.protocol.HttpMessage.write(self,chunk,*,drain=False,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.write_eof(self)
aiohttp.protocol.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.__init__(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.parse_headers(self,lines)
aiohttp.protocol.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.__init__(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.protocol.HttpPrefixParser(self,allowed_methods=())
aiohttp.protocol.HttpPrefixParser.__init__(self,allowed_methods=())
aiohttp.protocol.HttpRequestParser(self,out,buf)
aiohttp.protocol.HttpRequestParser.__call__(self,out,buf)
aiohttp.protocol.HttpResponseParser(self,out,buf)
aiohttp.protocol.HttpResponseParser.__call__(self,out,buf)
aiohttp.protocol.Request(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.protocol.Request.__init__(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.protocol.Request.autochunked(self)
aiohttp.protocol.Request.method(self)
aiohttp.protocol.Request.path(self)
aiohttp.protocol.Request.status_line(self)
aiohttp.protocol.Response(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.protocol.Response.__init__(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.protocol.Response._add_default_headers(self)
aiohttp.protocol.Response.autochunked(self)
aiohttp.protocol.Response.calc_reason(status,*,_RESPONSES=RESPONSES)
aiohttp.protocol.Response.reason(self)
aiohttp.protocol.Response.status(self)
aiohttp.protocol.Response.status_line(self)
aiohttp.protocol.WebResponse(Response)
aiohttp.protocol.WebResponse._add_default_headers(self)
aiohttp.protocol.filter_pipe(filter,filter2,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.wrap_payload_filter(func)
aiohttp.wrap_payload_filter(func)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/errors.py----------------------------------------
A:aiohttp.errors.hdr->hdr.decode('utf-8', 'surrogateescape').decode('utf-8', 'surrogateescape')
A:aiohttp.errors.line->repr(line)
aiohttp.BadHttpMessage(self,message,*,headers=None)
aiohttp.BadStatusLine(self,line='')
aiohttp.ClientConnectionError(ClientError)
aiohttp.ClientDisconnectedError(DisconnectedError)
aiohttp.ClientError(Exception)
aiohttp.ClientHttpProcessingError(ClientError)
aiohttp.ClientOSError(ClientConnectionError,OSError)
aiohttp.ClientRequestError(ClientHttpProcessingError)
aiohttp.ClientResponseError(ClientHttpProcessingError)
aiohttp.ClientTimeoutError(ClientConnectionError,TimeoutError)
aiohttp.ContentEncodingError(BadHttpMessage)
aiohttp.DisconnectedError(Exception)
aiohttp.FingerprintMismatch(self,expected,got,host,port)
aiohttp.FingerprintMismatch.__repr__(self)
aiohttp.HttpBadRequest(BadHttpMessage)
aiohttp.HttpMethodNotAllowed(HttpProcessingError)
aiohttp.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.HttpProxyError(HttpProcessingError)
aiohttp.InvalidHeader(self,hdr)
aiohttp.LineLimitExceededParserError(self,msg,limit)
aiohttp.LineTooLong(self,line,limit='Unknown')
aiohttp.ProxyConnectionError(ClientConnectionError)
aiohttp.ServerDisconnectedError(DisconnectedError)
aiohttp.TransferEncodingError(BadHttpMessage)
aiohttp.WSServerHandshakeError(HttpProcessingError)
aiohttp.errors.BadHttpMessage(self,message,*,headers=None)
aiohttp.errors.BadHttpMessage.__init__(self,message,*,headers=None)
aiohttp.errors.BadStatusLine(self,line='')
aiohttp.errors.BadStatusLine.__init__(self,line='')
aiohttp.errors.ClientConnectionError(ClientError)
aiohttp.errors.ClientDisconnectedError(DisconnectedError)
aiohttp.errors.ClientError(Exception)
aiohttp.errors.ClientHttpProcessingError(ClientError)
aiohttp.errors.ClientOSError(ClientConnectionError,OSError)
aiohttp.errors.ClientRequestError(ClientHttpProcessingError)
aiohttp.errors.ClientResponseError(ClientHttpProcessingError)
aiohttp.errors.ClientTimeoutError(ClientConnectionError,TimeoutError)
aiohttp.errors.ContentEncodingError(BadHttpMessage)
aiohttp.errors.DisconnectedError(Exception)
aiohttp.errors.FingerprintMismatch(self,expected,got,host,port)
aiohttp.errors.FingerprintMismatch.__init__(self,expected,got,host,port)
aiohttp.errors.FingerprintMismatch.__repr__(self)
aiohttp.errors.HttpBadRequest(BadHttpMessage)
aiohttp.errors.HttpMethodNotAllowed(HttpProcessingError)
aiohttp.errors.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.errors.HttpProcessingError.__init__(self,*,code=None,message='',headers=None)
aiohttp.errors.HttpProxyError(HttpProcessingError)
aiohttp.errors.InvalidHeader(self,hdr)
aiohttp.errors.InvalidHeader.__init__(self,hdr)
aiohttp.errors.LineLimitExceededParserError(self,msg,limit)
aiohttp.errors.LineLimitExceededParserError.__init__(self,msg,limit)
aiohttp.errors.LineTooLong(self,line,limit='Unknown')
aiohttp.errors.LineTooLong.__init__(self,line,limit='Unknown')
aiohttp.errors.ProxyConnectionError(ClientConnectionError)
aiohttp.errors.ServerDisconnectedError(DisconnectedError)
aiohttp.errors.TransferEncodingError(BadHttpMessage)
aiohttp.errors.WSServerHandshakeError(HttpProcessingError)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/web_ws.py----------------------------------------
A:aiohttp.web_ws.resp_impl->super().start(request)
A:aiohttp.web_ws.(parser, protocol, writer)->self._pre_start(request)
A:aiohttp.web_ws.(status, headers, parser, writer, protocol)->do_handshake(request.method, request.headers, request.transport, self._protocols)
A:aiohttp.web_ws.self._reader->request._reader.set_parser(parser)
A:aiohttp.web_ws.(_, _, _, _, protocol)->do_handshake(request.method, request.headers, request.transport, self._protocols)
A:aiohttp.web_ws.begin->self._loop.time()
A:aiohttp.web_ws.self._exception->asyncio.TimeoutError()
A:aiohttp.web_ws.__aiter__->asyncio.coroutine(__aiter__)
aiohttp.web_ws.WebSocketReady(namedtuple('WebSocketReady','okprotocol'))
aiohttp.web_ws.WebSocketReady.__bool__(self)
aiohttp.web_ws.WebSocketResponse(self,*,timeout=10.0,autoclose=True,autoping=True,protocols=())
aiohttp.web_ws.WebSocketResponse.__init__(self,*,timeout=10.0,autoclose=True,autoping=True,protocols=())
aiohttp.web_ws.WebSocketResponse._post_start(self,request,parser,protocol,writer)
aiohttp.web_ws.WebSocketResponse._pre_start(self,request)
aiohttp.web_ws.WebSocketResponse.can_prepare(self,request)
aiohttp.web_ws.WebSocketResponse.can_start(self,request)
aiohttp.web_ws.WebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.web_ws.WebSocketResponse.close_code(self)
aiohttp.web_ws.WebSocketResponse.closed(self)
aiohttp.web_ws.WebSocketResponse.exception(self)
aiohttp.web_ws.WebSocketResponse.ping(self,message='b')
aiohttp.web_ws.WebSocketResponse.pong(self,message='b')
aiohttp.web_ws.WebSocketResponse.prepare(self,request)
aiohttp.web_ws.WebSocketResponse.protocol(self)
aiohttp.web_ws.WebSocketResponse.receive(self)
aiohttp.web_ws.WebSocketResponse.receive_bytes(self)
aiohttp.web_ws.WebSocketResponse.receive_json(self,*,loads=json.loads)
aiohttp.web_ws.WebSocketResponse.receive_msg(self)
aiohttp.web_ws.WebSocketResponse.receive_str(self)
aiohttp.web_ws.WebSocketResponse.send_bytes(self,data)
aiohttp.web_ws.WebSocketResponse.send_json(self,data,*,dumps=json.dumps)
aiohttp.web_ws.WebSocketResponse.send_str(self,data)
aiohttp.web_ws.WebSocketResponse.start(self,request)
aiohttp.web_ws.WebSocketResponse.write(self,data)
aiohttp.web_ws.WebSocketResponse.write_eof(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/wsgi.py----------------------------------------
A:aiohttp.wsgi.SCRIPT_NAME->os.environ.get('SCRIPT_NAME', '')
A:aiohttp.wsgi.uri_parts->urlsplit(message.path)
A:aiohttp.wsgi.hdr_name->hdr_name.upper().upper()
A:aiohttp.wsgi.url_scheme->self.create_wsgi_environ(message, payload).get('HTTP_X_FORWARDED_PROTO')
A:aiohttp.wsgi.peername->self.transport.get_extra_info('peername')
A:aiohttp.wsgi.environ['REMOTE_PORT']->str(peername[1])
A:aiohttp.wsgi.http_host->message.headers.get('HOST', None)
A:aiohttp.wsgi.hostport->message.headers.get('HOST', None).split(':')
A:aiohttp.wsgi.environ['SERVER_PORT']->str(sockname[1])
A:aiohttp.wsgi.sockname->self.transport.get_extra_info('sockname')
A:aiohttp.wsgi.environ[header]->message.headers.get(header, '')
A:aiohttp.wsgi.now->self._loop.time()
A:aiohttp.wsgi.wsgiinput->io.BytesIO()
A:aiohttp.wsgi.environ->self.create_wsgi_environ(message, payload)
A:aiohttp.wsgi.response->self.create_wsgi_response(message)
A:aiohttp.wsgi.riter->self.wsgi(environ, response.start_response)
A:aiohttp.wsgi.data->self.fobj.read(self.chunk_size)
A:aiohttp.wsgi.status_code->int(status.split(' ', 1)[0])
A:aiohttp.wsgi.respself.response->aiohttp.Response(self.writer, status_code, self.message.version, self.message.should_close)
aiohttp.wsgi.FileWrapper(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__init__(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__iter__(self)
aiohttp.wsgi.FileWrapper.__next__(self)
aiohttp.wsgi.WSGIServerHttpProtocol(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.__init__(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_environ(self,message,payload)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_response(self,message)
aiohttp.wsgi.WSGIServerHttpProtocol.handle_request(self,message,payload)
aiohttp.wsgi.WsgiResponse(self,writer,message)
aiohttp.wsgi.WsgiResponse.__init__(self,writer,message)
aiohttp.wsgi.WsgiResponse.start_response(self,status,headers,exc_info=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/web_reqrep.py----------------------------------------
A:aiohttp.web_reqrep.FileField->collections.namedtuple('Field', 'name filename file content_type')
A:aiohttp.web_reqrep.dct['path']->str(URL(rel_url))
A:aiohttp.web_reqrep.dct['headers']->CIMultiDict(headers)
A:aiohttp.web_reqrep.message->self._message._replace(**dct)
A:aiohttp.web_reqrep.httpdate->self.headers.get(_LAST_MODIFIED)
A:aiohttp.web_reqrep.timetuple->parsedate(httpdate)
A:aiohttp.web_reqrep.raw->self.headers.get(hdrs.COOKIE, '')
A:aiohttp.web_reqrep.parsed->http.cookies.SimpleCookie(raw)
A:aiohttp.web_reqrep.body->dumps(data).encode(charset)
A:aiohttp.web_reqrep.self._read_bytes->bytes(body)
A:aiohttp.web_reqrep.self._post->MultiDictProxy(out)
A:aiohttp.web_reqrep.fs->cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True, encoding=content_charset)
A:aiohttp.web_reqrep.out->MultiDict()
A:aiohttp.web_reqrep.transfer_encoding->field.headers.get(hdrs.CONTENT_TRANSFER_ENCODING, None)
A:aiohttp.web_reqrep.ff->FileField(field.name, field.filename, field.file, field.type)
A:aiohttp.web_reqrep.value->int(value)
A:aiohttp.web_reqrep.ascii_encodable_path->self.path.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.web_reqrep.self._headers->CIMultiDict()
A:aiohttp.web_reqrep.self._cookies->http.cookies.SimpleCookie()
A:aiohttp.web_reqrep.self._status->int(status)
A:aiohttp.web_reqrep.reason->protocol.WebResponse.calc_reason(status)
A:aiohttp.web_reqrep.old->self._cookies.get(name)
A:aiohttp.web_reqrep.self.headers[hdrs.CONTENT_LENGTH]->str(value)
A:aiohttp.web_reqrep.self._content_type->str(value)
A:aiohttp.web_reqrep.self._content_dict['charset']->str(value).lower()
A:aiohttp.web_reqrep.self.headers[hdrs.LAST_MODIFIED]->time.strftime('%a, %d %b %Y %H:%M:%S GMT', value.utctimetuple())
A:aiohttp.web_reqrep.params->'; '.join(('%s=%s' % i for i in self._content_dict.items()))
A:aiohttp.web_reqrep.accept_encoding->request.headers.get(hdrs.ACCEPT_ENCODING, '').lower()
A:aiohttp.web_reqrep.resp_impl->self._start_pre_check(request)
A:aiohttp.web_reqrep.resp_implself._resp_impl->ResponseImpl(request._writer, self._status, version, not keep_alive, self._reason)
A:aiohttp.web_reqrep.headers[hdrs.DATE]->request._time_service.strtime()
A:aiohttp.web_reqrep.info->'{} {} '.format(self._req.method, self._req.path)
A:aiohttp.web_reqrep.headers->CIMultiDict(headers)
A:aiohttp.web_reqrep.self.content_length->len(body)
A:aiohttp.web_reqrep.self.body->dumps(data).encode(self.charset)
A:aiohttp.web_reqrep.text->dumps(data)
aiohttp.web_reqrep.ContentCoding(enum.Enum)
aiohttp.web_reqrep.Request(self,message,payload,transport,reader,writer,time_service,*,secure_proxy_ssl_header=None)
aiohttp.web_reqrep.Request.GET(self)
aiohttp.web_reqrep.Request.POST(self)
aiohttp.web_reqrep.Request.__delitem__(self,key)
aiohttp.web_reqrep.Request.__getitem__(self,key)
aiohttp.web_reqrep.Request.__init__(self,message,payload,transport,reader,writer,time_service,*,secure_proxy_ssl_header=None)
aiohttp.web_reqrep.Request.__iter__(self)
aiohttp.web_reqrep.Request.__len__(self)
aiohttp.web_reqrep.Request.__repr__(self)
aiohttp.web_reqrep.Request.__setitem__(self,key,value)
aiohttp.web_reqrep.Request._scheme(self)
aiohttp.web_reqrep.Request.app(self)
aiohttp.web_reqrep.Request.clone(self,*,method=sentinel,rel_url=sentinel,headers=sentinel)
aiohttp.web_reqrep.Request.content(self)
aiohttp.web_reqrep.Request.cookies(self)
aiohttp.web_reqrep.Request.has_body(self)
aiohttp.web_reqrep.Request.headers(self)
aiohttp.web_reqrep.Request.host(self)
aiohttp.web_reqrep.Request.if_modified_since(self,_IF_MODIFIED_SINCE=hdrs.IF_MODIFIED_SINCE)
aiohttp.web_reqrep.Request.json(self,*,loads=json.loads,loader=None)
aiohttp.web_reqrep.Request.keep_alive(self)
aiohttp.web_reqrep.Request.match_info(self)
aiohttp.web_reqrep.Request.method(self)
aiohttp.web_reqrep.Request.multipart(self,*,reader=multipart.MultipartReader)
aiohttp.web_reqrep.Request.path(self)
aiohttp.web_reqrep.Request.path_qs(self)
aiohttp.web_reqrep.Request.post(self)
aiohttp.web_reqrep.Request.query_string(self)
aiohttp.web_reqrep.Request.raw_headers(self)
aiohttp.web_reqrep.Request.raw_path(self)
aiohttp.web_reqrep.Request.read(self)
aiohttp.web_reqrep.Request.rel_url(self)
aiohttp.web_reqrep.Request.release(self)
aiohttp.web_reqrep.Request.scheme(self)
aiohttp.web_reqrep.Request.text(self)
aiohttp.web_reqrep.Request.transport(self)
aiohttp.web_reqrep.Request.url(self)
aiohttp.web_reqrep.Request.version(self)
aiohttp.web_reqrep.Response(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_reqrep.Response.__init__(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_reqrep.Response.body(self)
aiohttp.web_reqrep.Response.body(self,body)
aiohttp.web_reqrep.Response.text(self)
aiohttp.web_reqrep.Response.text(self,text)
aiohttp.web_reqrep.Response.write_eof(self)
aiohttp.web_reqrep.StreamResponse(self,*,status=200,reason=None,headers=None)
aiohttp.web_reqrep.StreamResponse.__init__(self,*,status=200,reason=None,headers=None)
aiohttp.web_reqrep.StreamResponse.__repr__(self)
aiohttp.web_reqrep.StreamResponse._copy_cookies(self)
aiohttp.web_reqrep.StreamResponse._do_start_compression(self,coding)
aiohttp.web_reqrep.StreamResponse._generate_content_type_header(self,CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web_reqrep.StreamResponse._send_headers(self,resp_impl)
aiohttp.web_reqrep.StreamResponse._start(self,request)
aiohttp.web_reqrep.StreamResponse._start_compression(self,request)
aiohttp.web_reqrep.StreamResponse._start_pre_check(self,request)
aiohttp.web_reqrep.StreamResponse.charset(self)
aiohttp.web_reqrep.StreamResponse.charset(self,value)
aiohttp.web_reqrep.StreamResponse.chunked(self)
aiohttp.web_reqrep.StreamResponse.compression(self)
aiohttp.web_reqrep.StreamResponse.content_length(self)
aiohttp.web_reqrep.StreamResponse.content_length(self,value)
aiohttp.web_reqrep.StreamResponse.content_type(self)
aiohttp.web_reqrep.StreamResponse.content_type(self,value)
aiohttp.web_reqrep.StreamResponse.cookies(self)
aiohttp.web_reqrep.StreamResponse.del_cookie(self,name,*,domain=None,path='/')
aiohttp.web_reqrep.StreamResponse.drain(self)
aiohttp.web_reqrep.StreamResponse.enable_chunked_encoding(self,chunk_size=None)
aiohttp.web_reqrep.StreamResponse.enable_compression(self,force=None)
aiohttp.web_reqrep.StreamResponse.force_close(self)
aiohttp.web_reqrep.StreamResponse.headers(self)
aiohttp.web_reqrep.StreamResponse.keep_alive(self)
aiohttp.web_reqrep.StreamResponse.last_modified(self,_LAST_MODIFIED=hdrs.LAST_MODIFIED)
aiohttp.web_reqrep.StreamResponse.last_modified(self,value)
aiohttp.web_reqrep.StreamResponse.prepare(self,request)
aiohttp.web_reqrep.StreamResponse.prepared(self)
aiohttp.web_reqrep.StreamResponse.reason(self)
aiohttp.web_reqrep.StreamResponse.set_cookie(self,name,value,*,expires=None,domain=None,max_age=None,path='/',secure=None,httponly=None,version=None)
aiohttp.web_reqrep.StreamResponse.set_status(self,status,reason=None)
aiohttp.web_reqrep.StreamResponse.set_tcp_cork(self,value)
aiohttp.web_reqrep.StreamResponse.set_tcp_nodelay(self,value)
aiohttp.web_reqrep.StreamResponse.start(self,request)
aiohttp.web_reqrep.StreamResponse.started(self)
aiohttp.web_reqrep.StreamResponse.status(self)
aiohttp.web_reqrep.StreamResponse.tcp_cork(self)
aiohttp.web_reqrep.StreamResponse.tcp_nodelay(self)
aiohttp.web_reqrep.StreamResponse.write(self,data)
aiohttp.web_reqrep.StreamResponse.write_eof(self)
aiohttp.web_reqrep.json_response(data=sentinel,*,text=None,body=None,status=200,reason=None,headers=None,content_type='application/json',dumps=json.dumps)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/connector.py----------------------------------------
A:aiohttp.connector.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.connector.loop->asyncio.get_event_loop()
A:aiohttp.connector.self._acquired->defaultdict(set)
A:aiohttp.connector.self._waiters->defaultdict(list)
A:aiohttp.connector.self._factory->functools.partial(aiohttp.StreamProtocol, loop=loop, disconnect_error=ServerDisconnectedError)
A:aiohttp.connector.self.cookies->http.cookies.SimpleCookie()
A:aiohttp.connector.now->self._loop.time()
A:aiohttp.connector.self._cleanup_handle->self._loop.call_at(ceil(now + self._keepalive_timeout), self._cleanup)
A:aiohttp.connector.ret->helpers.create_future(self._loop)
A:aiohttp.connector.fut->helpers.create_future(self._loop)
A:aiohttp.connector.(transport, proto)->self._get(key)
A:aiohttp.connector.conn->Connection(self, key, proxy_req, transport, proto, self._loop)
A:aiohttp.connector.t1->self._loop.time()
A:aiohttp.connector.(transport, proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector.waiter->waiters.pop(0)
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector._SSL_OP_NO_COMPRESSION->getattr(ssl, 'OP_NO_COMPRESSION', 0)
A:aiohttp.connector.digestlen->len(fingerprint)
A:aiohttp.connector.hashfunc->HASHFUNC_BY_DIGESTLEN.get(digestlen)
A:aiohttp.connector.resolver->DefaultResolver(loop=self._loop)
A:aiohttp.connector.sslcontext->ssl.create_default_context()
A:aiohttp.connector.has_cert->transp.get_extra_info('sslcontext')
A:aiohttp.connector.sock->transp.get_extra_info('socket')
A:aiohttp.connector.cert->transp.get_extra_info('socket').getpeercert(binary_form=True)
A:aiohttp.connector.got->self._hashfunc(cert).digest()
A:aiohttp.connector.proxy_req->ClientRequest(hdrs.METH_GET, req.proxy, headers={hdrs.HOST: req.host}, auth=req.proxy_auth, loop=self._loop)
A:aiohttp.connector.req.path->str(req.url)
A:aiohttp.connector.proxy_req.path->'{}:{}'.format(req.host, req.port)
A:aiohttp.connector.proxy_resp->ClientRequest(hdrs.METH_GET, req.proxy, headers={hdrs.HOST: req.host}, auth=req.proxy_auth, loop=self._loop).send(conn.writer, conn.reader)
A:aiohttp.connector.rawsock->transport.get_extra_info('socket', default=None)
A:aiohttp.connector.proxy->URL(proxy)
aiohttp.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.BaseConnector.__del__(self,_warnings=warnings)
aiohttp.BaseConnector.__enter__(self)
aiohttp.BaseConnector.__exit__(self,*exc)
aiohttp.BaseConnector._cleanup(self)
aiohttp.BaseConnector._create_connection(self,req)
aiohttp.BaseConnector._get(self,key)
aiohttp.BaseConnector._release(self,key,req,transport,protocol,*,should_close=False)
aiohttp.BaseConnector._release_waiter(self,key)
aiohttp.BaseConnector._start_cleanup_task(self)
aiohttp.BaseConnector.close(self)
aiohttp.BaseConnector.closed(self)
aiohttp.BaseConnector.connect(self,req)
aiohttp.BaseConnector.force_close(self)
aiohttp.BaseConnector.limit(self)
aiohttp.Connection(self,connector,key,request,transport,protocol,loop)
aiohttp.Connection.__del__(self,_warnings=warnings)
aiohttp.Connection.__repr__(self)
aiohttp.Connection.close(self)
aiohttp.Connection.closed(self)
aiohttp.Connection.detach(self)
aiohttp.Connection.loop(self)
aiohttp.Connection.release(self)
aiohttp.ProxyConnector(self,proxy,*,proxy_auth=None,force_close=True,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.ProxyConnector._create_connection(self,req)
aiohttp.ProxyConnector.proxy(self)
aiohttp.ProxyConnector.proxy_auth(self)
aiohttp.TCPConnector(self,*,verify_ssl=True,fingerprint=None,resolve=sentinel,use_dns_cache=sentinel,family=0,ssl_context=None,local_addr=None,resolver=None,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.TCPConnector._create_connection(self,req)
aiohttp.TCPConnector._create_direct_connection(self,req)
aiohttp.TCPConnector._create_proxy_connection(self,req)
aiohttp.TCPConnector._resolve_host(self,host,port)
aiohttp.TCPConnector.cached_hosts(self)
aiohttp.TCPConnector.clear_dns_cache(self,host=None,port=None)
aiohttp.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.TCPConnector.family(self)
aiohttp.TCPConnector.fingerprint(self)
aiohttp.TCPConnector.resolve(self)
aiohttp.TCPConnector.resolved_hosts(self)
aiohttp.TCPConnector.ssl_context(self)
aiohttp.TCPConnector.use_dns_cache(self)
aiohttp.TCPConnector.verify_ssl(self)
aiohttp.UnixConnector(self,path,force_close=False,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.UnixConnector._create_connection(self,req)
aiohttp.UnixConnector.path(self)
aiohttp.connector.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.connector.BaseConnector.__del__(self,_warnings=warnings)
aiohttp.connector.BaseConnector.__enter__(self)
aiohttp.connector.BaseConnector.__exit__(self,*exc)
aiohttp.connector.BaseConnector.__init__(self,*,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.connector.BaseConnector._cleanup(self)
aiohttp.connector.BaseConnector._create_connection(self,req)
aiohttp.connector.BaseConnector._get(self,key)
aiohttp.connector.BaseConnector._release(self,key,req,transport,protocol,*,should_close=False)
aiohttp.connector.BaseConnector._release_waiter(self,key)
aiohttp.connector.BaseConnector._start_cleanup_task(self)
aiohttp.connector.BaseConnector.close(self)
aiohttp.connector.BaseConnector.closed(self)
aiohttp.connector.BaseConnector.connect(self,req)
aiohttp.connector.BaseConnector.force_close(self)
aiohttp.connector.BaseConnector.limit(self)
aiohttp.connector.Connection(self,connector,key,request,transport,protocol,loop)
aiohttp.connector.Connection.__del__(self,_warnings=warnings)
aiohttp.connector.Connection.__init__(self,connector,key,request,transport,protocol,loop)
aiohttp.connector.Connection.__repr__(self)
aiohttp.connector.Connection.close(self)
aiohttp.connector.Connection.closed(self)
aiohttp.connector.Connection.detach(self)
aiohttp.connector.Connection.loop(self)
aiohttp.connector.Connection.release(self)
aiohttp.connector.ProxyConnector(self,proxy,*,proxy_auth=None,force_close=True,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.connector.ProxyConnector.__init__(self,proxy,*,proxy_auth=None,force_close=True,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.connector.ProxyConnector._create_connection(self,req)
aiohttp.connector.ProxyConnector.proxy(self)
aiohttp.connector.ProxyConnector.proxy_auth(self)
aiohttp.connector.TCPConnector(self,*,verify_ssl=True,fingerprint=None,resolve=sentinel,use_dns_cache=sentinel,family=0,ssl_context=None,local_addr=None,resolver=None,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.connector.TCPConnector.__init__(self,*,verify_ssl=True,fingerprint=None,resolve=sentinel,use_dns_cache=sentinel,family=0,ssl_context=None,local_addr=None,resolver=None,conn_timeout=None,keepalive_timeout=sentinel,force_close=False,limit=20,loop=None)
aiohttp.connector.TCPConnector._create_connection(self,req)
aiohttp.connector.TCPConnector._create_direct_connection(self,req)
aiohttp.connector.TCPConnector._create_proxy_connection(self,req)
aiohttp.connector.TCPConnector._resolve_host(self,host,port)
aiohttp.connector.TCPConnector.cached_hosts(self)
aiohttp.connector.TCPConnector.clear_dns_cache(self,host=None,port=None)
aiohttp.connector.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.connector.TCPConnector.family(self)
aiohttp.connector.TCPConnector.fingerprint(self)
aiohttp.connector.TCPConnector.resolve(self)
aiohttp.connector.TCPConnector.resolved_hosts(self)
aiohttp.connector.TCPConnector.ssl_context(self)
aiohttp.connector.TCPConnector.use_dns_cache(self)
aiohttp.connector.TCPConnector.verify_ssl(self)
aiohttp.connector.UnixConnector(self,path,force_close=False,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.connector.UnixConnector.__init__(self,path,force_close=False,conn_timeout=None,keepalive_timeout=sentinel,limit=20,loop=None)
aiohttp.connector.UnixConnector._create_connection(self,req)
aiohttp.connector.UnixConnector.path(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/pytest_plugin.py----------------------------------------
A:aiohttp.pytest_plugin.loop->setup_test_loop()
A:aiohttp.pytest_plugin.existing_loop->pyfuncitem.funcargs.get('loop', None)
A:aiohttp.pytest_plugin.task->_loop.create_task(pyfuncitem.obj(**testargs))
A:aiohttp.pytest_plugin.server->TestServer(app)
A:aiohttp.pytest_plugin.client->TestClient(__param)
A:aiohttp.pytest_plugin.__param->__param(loop, *args, **kwargs)
aiohttp.pytest_plugin._passthrough_loop_context(loop)
aiohttp.pytest_plugin.loop()
aiohttp.pytest_plugin.pytest_pycollect_makeitem(collector,name,obj)
aiohttp.pytest_plugin.pytest_pyfunc_call(pyfuncitem)
aiohttp.pytest_plugin.test_client(loop)
aiohttp.pytest_plugin.test_server(loop)
aiohttp.pytest_plugin.unused_port()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/file_sender.py----------------------------------------
A:aiohttp.file_sender.n->os.sendfile(out_fd, in_fd, offset, count)
A:aiohttp.file_sender.out_socket->transport.get_extra_info('socket').dup()
A:aiohttp.file_sender.out_fd->transport.get_extra_info('socket').dup().fileno()
A:aiohttp.file_sender.in_fd->fobj.fileno()
A:aiohttp.file_sender.bheaders->''.join(headers).encode('utf-8')
A:aiohttp.file_sender.headers_length->len(bheaders)
A:aiohttp.file_sender.fut->create_future(loop)
A:aiohttp.file_sender.chunk->fobj.read(count)
A:aiohttp.file_sender.st->filepath.stat()
A:aiohttp.file_sender.(ct, encoding)->mimetypes.guess_type(str(filepath))
A:aiohttp.file_sender.resp->self._response_factory()
aiohttp.FileSender(self,*,resp_factory=StreamResponse,chunk_size=256*1024)
aiohttp.FileSender._sendfile_cb(self,fut,out_fd,in_fd,offset,count,loop,registered)
aiohttp.FileSender._sendfile_fallback(self,request,resp,fobj,count)
aiohttp.FileSender._sendfile_system(self,request,resp,fobj,count)
aiohttp.FileSender.send(self,request,filepath)
aiohttp.file_sender.FileSender(self,*,resp_factory=StreamResponse,chunk_size=256*1024)
aiohttp.file_sender.FileSender.__init__(self,*,resp_factory=StreamResponse,chunk_size=256*1024)
aiohttp.file_sender.FileSender._sendfile_cb(self,fut,out_fd,in_fd,offset,count,loop,registered)
aiohttp.file_sender.FileSender._sendfile_fallback(self,request,resp,fobj,count)
aiohttp.file_sender.FileSender._sendfile_system(self,request,resp,fobj,count)
aiohttp.file_sender.FileSender.send(self,request,filepath)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/web_exceptions.py----------------------------------------
A:aiohttp.web_exceptions.self.text->'{}: {}'.format(self.status, self.reason)
A:aiohttp.web_exceptions.self.headers['Location']->str(location)
A:aiohttp.web_exceptions.allow->','.join(sorted(allowed_methods))
A:aiohttp.web_exceptions.self.method->method.upper()
aiohttp.web_exceptions.HTTPAccepted(HTTPSuccessful)
aiohttp.web_exceptions.HTTPBadGateway(HTTPServerError)
aiohttp.web_exceptions.HTTPBadRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPClientError(HTTPError)
aiohttp.web_exceptions.HTTPConflict(HTTPClientError)
aiohttp.web_exceptions.HTTPCreated(HTTPSuccessful)
aiohttp.web_exceptions.HTTPError(HTTPException)
aiohttp.web_exceptions.HTTPException(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPException.__init__(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPExpectationFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPForbidden(HTTPClientError)
aiohttp.web_exceptions.HTTPFound(_HTTPMove)
aiohttp.web_exceptions.HTTPGatewayTimeout(HTTPServerError)
aiohttp.web_exceptions.HTTPGone(HTTPClientError)
aiohttp.web_exceptions.HTTPInternalServerError(HTTPServerError)
aiohttp.web_exceptions.HTTPLengthRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPMethodNotAllowed(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMethodNotAllowed.__init__(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMisdirectedRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPMovedPermanently(_HTTPMove)
aiohttp.web_exceptions.HTTPMultipleChoices(_HTTPMove)
aiohttp.web_exceptions.HTTPNetworkAuthenticationRequired(HTTPServerError)
aiohttp.web_exceptions.HTTPNoContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNonAuthoritativeInformation(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNotAcceptable(HTTPClientError)
aiohttp.web_exceptions.HTTPNotExtended(HTTPServerError)
aiohttp.web_exceptions.HTTPNotFound(HTTPClientError)
aiohttp.web_exceptions.HTTPNotImplemented(HTTPServerError)
aiohttp.web_exceptions.HTTPNotModified(HTTPRedirection)
aiohttp.web_exceptions.HTTPOk(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPartialContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPaymentRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPPermanentRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPPreconditionFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPPreconditionRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPProxyAuthenticationRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPRedirection(HTTPException)
aiohttp.web_exceptions.HTTPRequestEntityTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestHeaderFieldsTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestRangeNotSatisfiable(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestTimeout(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestURITooLong(HTTPClientError)
aiohttp.web_exceptions.HTTPResetContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPSeeOther(_HTTPMove)
aiohttp.web_exceptions.HTTPServerError(HTTPError)
aiohttp.web_exceptions.HTTPServiceUnavailable(HTTPServerError)
aiohttp.web_exceptions.HTTPSuccessful(HTTPException)
aiohttp.web_exceptions.HTTPTemporaryRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPTooManyRequests(HTTPClientError)
aiohttp.web_exceptions.HTTPUnauthorized(HTTPClientError)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.__init__(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnsupportedMediaType(HTTPClientError)
aiohttp.web_exceptions.HTTPUpgradeRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPUseProxy(_HTTPMove)
aiohttp.web_exceptions.HTTPVariantAlsoNegotiates(HTTPServerError)
aiohttp.web_exceptions.HTTPVersionNotSupported(HTTPServerError)
aiohttp.web_exceptions._HTTPMove(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions._HTTPMove.__init__(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/cookiejar.py----------------------------------------
A:aiohttp.cookiejar.DATE_TOKENS_RE->re.compile('[\t -/;-@[-`{-~]*(?P<token>[\x00-\x08\n-\x1f\\d:a-zA-Z\x7f-ÿ]+)')
A:aiohttp.cookiejar.DATE_HMS_TIME_RE->re.compile('(\\d{1,2}):(\\d{1,2}):(\\d{1,2})')
A:aiohttp.cookiejar.DATE_DAY_OF_MONTH_RE->re.compile('(\\d{1,2})')
A:aiohttp.cookiejar.DATE_MONTH_RE->re.compile('(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)', re.I)
A:aiohttp.cookiejar.DATE_YEAR_RE->re.compile('(\\d{2,4})')
A:aiohttp.cookiejar.self._cookies->pickle.load(f)
A:aiohttp.cookiejar.self._host_only_cookies->set()
A:aiohttp.cookiejar.self._next_expiration->min(self._next_expiration, when)
A:aiohttp.cookiejar.file_path->pathlib.Path(file_path)
A:aiohttp.cookiejar.now->self._loop.time()
A:aiohttp.cookiejar.next_expiration->min(next_expiration, when)
A:aiohttp.cookiejar.cookies->cookies.items().items()
A:aiohttp.cookiejar.tmp->SimpleCookie()
A:aiohttp.cookiejar.delta_seconds->int(max_age)
A:aiohttp.cookiejar.expire_time->self._parse_date(expires)
A:aiohttp.cookiejar.filtered->SimpleCookie()
A:aiohttp.cookiejar.token->token_match.group('token')
A:aiohttp.cookiejar.time_match->cls.DATE_HMS_TIME_RE.match(token)
A:aiohttp.cookiejar.day_match->cls.DATE_DAY_OF_MONTH_RE.match(token)
A:aiohttp.cookiejar.day->int(day_match.group())
A:aiohttp.cookiejar.month_match->cls.DATE_MONTH_RE.match(token)
A:aiohttp.cookiejar.year_match->cls.DATE_YEAR_RE.match(token)
A:aiohttp.cookiejar.year->int(year_match.group())
aiohttp.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.CookieJar.__iter__(self)
aiohttp.CookieJar.__len__(self)
aiohttp.CookieJar._do_expiration(self)
aiohttp.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.CookieJar._is_domain_match(domain,hostname)
aiohttp.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.CookieJar._parse_date(cls,date_str)
aiohttp.CookieJar.clear(self)
aiohttp.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.CookieJar.load(self,file_path)
aiohttp.CookieJar.save(self,file_path)
aiohttp.CookieJar.update_cookies(self,cookies,response_url=URL())
aiohttp.cookiejar.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__init__(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__iter__(self)
aiohttp.cookiejar.CookieJar.__len__(self)
aiohttp.cookiejar.CookieJar._do_expiration(self)
aiohttp.cookiejar.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.cookiejar.CookieJar._is_domain_match(domain,hostname)
aiohttp.cookiejar.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.cookiejar.CookieJar._parse_date(cls,date_str)
aiohttp.cookiejar.CookieJar.clear(self)
aiohttp.cookiejar.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.cookiejar.CookieJar.load(self,file_path)
aiohttp.cookiejar.CookieJar.save(self,file_path)
aiohttp.cookiejar.CookieJar.update_cookies(self,cookies,response_url=URL())


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/resolver.py----------------------------------------
A:aiohttp.resolver.loop->asyncio.get_event_loop()
A:aiohttp.resolver.self._resolver->aiodns.DNSResolver(*args, loop=loop, **kwargs)
aiohttp.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.AsyncResolver.close(self)
aiohttp.AsyncResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.AsyncResolver.resolve_with_query(self,host,port=0,family=socket.AF_INET)
aiohttp.ThreadedResolver(self,loop=None)
aiohttp.ThreadedResolver.close(self)
aiohttp.ThreadedResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.resolver.AsyncResolver.__init__(self,loop=None,*args,**kwargs)
aiohttp.resolver.AsyncResolver.close(self)
aiohttp.resolver.AsyncResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.AsyncResolver.resolve_with_query(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.ThreadedResolver(self,loop=None)
aiohttp.resolver.ThreadedResolver.__init__(self,loop=None)
aiohttp.resolver.ThreadedResolver.close(self)
aiohttp.resolver.ThreadedResolver.resolve(self,host,port=0,family=socket.AF_INET)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/streams.py----------------------------------------
A:aiohttp.streams.__aiter__->asyncio.coroutine(__aiter__)
A:aiohttp.streams.loop->asyncio.get_event_loop()
A:aiohttp.streams.self._buffer->collections.deque()
A:aiohttp.streams.self._eof_waiter->helpers.create_future(self._loop)
A:aiohttp.streams.waiterself._waiter->helpers.create_future(self._loop)
A:aiohttp.streams.self._canceller->self._loop.call_later(self._timeout, self.set_exception, asyncio.TimeoutError())
A:aiohttp.streams.data->self._buffer.popleft()
A:aiohttp.streams.stack->traceback.format_stack()
A:aiohttp.streams.partial->b''.join(blocks)
A:aiohttp.streams.chunk->self._read_nowait_chunk(n)
A:aiohttp.streams.self._waiter->helpers.create_future(self._loop)
A:aiohttp.streams.(data, size)->self._buffer.popleft()
A:aiohttp.streams.result->func(self, *args, **kw)
aiohttp.AsyncStreamReaderMixin
aiohttp.ChunksQueue(DataQueue)
aiohttp.ChunksQueue.read(self)
aiohttp.DataQueue(self,*,loop=None)
aiohttp.DataQueue.at_eof(self)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data,size=0)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.is_eof(self)
aiohttp.DataQueue.read(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.EmptyStreamReader.at_eof(self)
aiohttp.EmptyStreamReader.exception(self)
aiohttp.EmptyStreamReader.feed_data(self,data)
aiohttp.EmptyStreamReader.feed_eof(self)
aiohttp.EmptyStreamReader.is_eof(self)
aiohttp.EmptyStreamReader.read(self,n=-1)
aiohttp.EmptyStreamReader.read_nowait(self)
aiohttp.EmptyStreamReader.readany(self)
aiohttp.EmptyStreamReader.readexactly(self,n)
aiohttp.EmptyStreamReader.readline(self)
aiohttp.EmptyStreamReader.set_exception(self,exc)
aiohttp.EmptyStreamReader.wait_eof(self)
aiohttp.EofStream(Exception)
aiohttp.FlowControlChunksQueue(FlowControlDataQueue)
aiohttp.FlowControlChunksQueue.read(self)
aiohttp.FlowControlDataQueue(self,stream,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.FlowControlDataQueue.read(self)
aiohttp.FlowControlStreamReader(self,stream,limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.FlowControlStreamReader._check_buffer_size(self)
aiohttp.FlowControlStreamReader.feed_data(self,data,size=0)
aiohttp.FlowControlStreamReader.read(self,n=-1)
aiohttp.FlowControlStreamReader.read_nowait(self,n=-1)
aiohttp.FlowControlStreamReader.readany(self)
aiohttp.FlowControlStreamReader.readexactly(self,n)
aiohttp.FlowControlStreamReader.readline(self)
aiohttp.StreamReader(self,limit=DEFAULT_LIMIT,timeout=None,loop=None)
aiohttp.StreamReader.__repr__(self)
aiohttp.StreamReader._read_nowait(self,n)
aiohttp.StreamReader._read_nowait_chunk(self,n)
aiohttp.StreamReader._wait(self,func_name)
aiohttp.StreamReader.at_eof(self)
aiohttp.StreamReader.exception(self)
aiohttp.StreamReader.feed_data(self,data)
aiohttp.StreamReader.feed_eof(self)
aiohttp.StreamReader.is_eof(self)
aiohttp.StreamReader.read(self,n=-1)
aiohttp.StreamReader.read_nowait(self,n=-1)
aiohttp.StreamReader.readany(self)
aiohttp.StreamReader.readexactly(self,n)
aiohttp.StreamReader.readline(self)
aiohttp.StreamReader.set_exception(self,exc)
aiohttp.StreamReader.unread_data(self,data)
aiohttp.StreamReader.wait_eof(self)
aiohttp.maybe_resume(func)
aiohttp.streams.AsyncStreamReaderMixin
aiohttp.streams.ChunksQueue(DataQueue)
aiohttp.streams.ChunksQueue.read(self)
aiohttp.streams.DataQueue(self,*,loop=None)
aiohttp.streams.DataQueue.__init__(self,*,loop=None)
aiohttp.streams.DataQueue.at_eof(self)
aiohttp.streams.DataQueue.exception(self)
aiohttp.streams.DataQueue.feed_data(self,data,size=0)
aiohttp.streams.DataQueue.feed_eof(self)
aiohttp.streams.DataQueue.is_eof(self)
aiohttp.streams.DataQueue.read(self)
aiohttp.streams.DataQueue.set_exception(self,exc)
aiohttp.streams.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.streams.EmptyStreamReader.at_eof(self)
aiohttp.streams.EmptyStreamReader.exception(self)
aiohttp.streams.EmptyStreamReader.feed_data(self,data)
aiohttp.streams.EmptyStreamReader.feed_eof(self)
aiohttp.streams.EmptyStreamReader.is_eof(self)
aiohttp.streams.EmptyStreamReader.read(self,n=-1)
aiohttp.streams.EmptyStreamReader.read_nowait(self)
aiohttp.streams.EmptyStreamReader.readany(self)
aiohttp.streams.EmptyStreamReader.readexactly(self,n)
aiohttp.streams.EmptyStreamReader.readline(self)
aiohttp.streams.EmptyStreamReader.set_exception(self,exc)
aiohttp.streams.EmptyStreamReader.wait_eof(self)
aiohttp.streams.EofStream(Exception)
aiohttp.streams.FlowControlChunksQueue(FlowControlDataQueue)
aiohttp.streams.FlowControlChunksQueue.read(self)
aiohttp.streams.FlowControlDataQueue(self,stream,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.__init__(self,stream,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.streams.FlowControlDataQueue.read(self)
aiohttp.streams.FlowControlStreamReader(self,stream,limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader.__init__(self,stream,limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader._check_buffer_size(self)
aiohttp.streams.FlowControlStreamReader.feed_data(self,data,size=0)
aiohttp.streams.FlowControlStreamReader.read(self,n=-1)
aiohttp.streams.FlowControlStreamReader.read_nowait(self,n=-1)
aiohttp.streams.FlowControlStreamReader.readany(self)
aiohttp.streams.FlowControlStreamReader.readexactly(self,n)
aiohttp.streams.FlowControlStreamReader.readline(self)
aiohttp.streams.StreamReader(self,limit=DEFAULT_LIMIT,timeout=None,loop=None)
aiohttp.streams.StreamReader.__init__(self,limit=DEFAULT_LIMIT,timeout=None,loop=None)
aiohttp.streams.StreamReader.__repr__(self)
aiohttp.streams.StreamReader._read_nowait(self,n)
aiohttp.streams.StreamReader._read_nowait_chunk(self,n)
aiohttp.streams.StreamReader._wait(self,func_name)
aiohttp.streams.StreamReader.at_eof(self)
aiohttp.streams.StreamReader.exception(self)
aiohttp.streams.StreamReader.feed_data(self,data)
aiohttp.streams.StreamReader.feed_eof(self)
aiohttp.streams.StreamReader.is_eof(self)
aiohttp.streams.StreamReader.read(self,n=-1)
aiohttp.streams.StreamReader.read_nowait(self,n=-1)
aiohttp.streams.StreamReader.readany(self)
aiohttp.streams.StreamReader.readexactly(self,n)
aiohttp.streams.StreamReader.readline(self)
aiohttp.streams.StreamReader.set_exception(self,exc)
aiohttp.streams.StreamReader.unread_data(self,data)
aiohttp.streams.StreamReader.wait_eof(self)
aiohttp.streams.maybe_resume(func)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/server.py----------------------------------------
A:aiohttp.server.sock->transport.get_extra_info('socket')
A:aiohttp.server.EMPTY_PAYLOAD->aiohttp.streams.EmptyStreamReader()
A:aiohttp.server.logger->_get_kwarg(kwargs, 'log', 'logger', logger)
A:aiohttp.server.tcp_keepalive->_get_kwarg(kwargs, 'keep_alive_on', 'tcp_keepalive', tcp_keepalive)
A:aiohttp.server.keepalive_timeout->_get_kwarg(kwargs, 'keep_alive', 'keepalive_timeout', keepalive_timeout)
A:aiohttp.server.slow_request_timeout->_get_kwarg(kwargs, 'timeout', 'slow_request_timeout', slow_request_timeout)
A:aiohttp.server.self._request_prefix->aiohttp.HttpPrefixParser()
A:aiohttp.server.self._request_parser->aiohttp.HttpRequestParser(max_line_size=max_line_size, max_field_size=max_field_size, max_headers=max_headers)
A:aiohttp.server.self.access_logger->aiohttp.helpers.AccessLogger(access_log, access_log_format)
A:aiohttp.server.canceller->self._loop.call_later(timeout, self._request_handler.cancel)
A:aiohttp.server.self._request_handler->ensure_future(self.start(), loop=self._loop)
A:aiohttp.server.prefix->reader.set_parser(self._request_prefix)
A:aiohttp.server.httpstream->reader.set_parser(self._request_parser)
A:aiohttp.server.content_length->int(message.headers.get(hdrs.CONTENT_LENGTH, 0))
A:aiohttp.server.payload->aiohttp.streams.FlowControlStreamReader(reader, loop=self._loop)
A:aiohttp.server.now->self._loop.time()
A:aiohttp.server.tb->html_escape(tb)
A:aiohttp.server.html->DEFAULT_ERROR_MESSAGE.format(status=status, reason=reason, message=msg).encode('utf-8')
A:aiohttp.server.response->aiohttp.Response(self.writer, 404, http_version=message.version, close=True)
A:aiohttp.server.drain->aiohttp.Response(self.writer, 404, http_version=message.version, close=True).write_eof()
aiohttp.server.ServerHttpProtocol(self,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,slow_request_timeout=0,logger=server_logger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,**kwargs)
aiohttp.server.ServerHttpProtocol.__init__(self,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,slow_request_timeout=0,logger=server_logger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,**kwargs)
aiohttp.server.ServerHttpProtocol.connection_lost(self,exc)
aiohttp.server.ServerHttpProtocol.connection_made(self,transport)
aiohttp.server.ServerHttpProtocol.data_received(self,data)
aiohttp.server.ServerHttpProtocol.handle_error(self,status=500,message=None,payload=None,exc=None,headers=None,reason=None)
aiohttp.server.ServerHttpProtocol.handle_request(self,message,payload)
aiohttp.server.ServerHttpProtocol.keep_alive(self,val)
aiohttp.server.ServerHttpProtocol.keep_alive_timeout(self)
aiohttp.server.ServerHttpProtocol.keepalive_timeout(self)
aiohttp.server.ServerHttpProtocol.log_access(self,message,environ,response,time)
aiohttp.server.ServerHttpProtocol.log_debug(self,*args,**kw)
aiohttp.server.ServerHttpProtocol.log_exception(self,*args,**kw)
aiohttp.server.ServerHttpProtocol.shutdown(self,timeout=15.0)
aiohttp.server.ServerHttpProtocol.start(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/web_urldispatcher.py----------------------------------------
A:aiohttp.web_urldispatcher.HTTP_METHOD_RE->re.compile("^[0-9A-Za-z!#\\$%&'\\*\\+\\-\\.\\^_`\\|~]+$")
A:aiohttp.web_urldispatcher.method->getattr(self, self.request.method.lower(), None)
A:aiohttp.web_urldispatcher.result->old_handler(*args, **kwargs)
A:aiohttp.web_urldispatcher.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web_urldispatcher.route->ResourceRoute(method, handler, self, expect_handler=expect_handler)
A:aiohttp.web_urldispatcher.allowed_methods->set()
A:aiohttp.web_urldispatcher.match_dict->self._match(request.rel_url.raw_path)
A:aiohttp.web_urldispatcher.self._pattern->re.compile(re.escape(prefix) + self._pattern.pattern[2:])
A:aiohttp.web_urldispatcher.match->self.DYN_WITH_RE.fullmatch(part)
A:aiohttp.web_urldispatcher.url->self._formatter.format_map(parts)
A:aiohttp.web_urldispatcher.self._prefix->quote(prefix, safe='/')
A:aiohttp.web_urldispatcher.self._prefix_len->len(self._prefix)
A:aiohttp.web_urldispatcher.directory->directory.resolve().resolve()
A:aiohttp.web_urldispatcher.self._file_sender->FileSender(resp_factory=response_factory, chunk_size=chunk_size)
A:aiohttp.web_urldispatcher.filename->unquote(request.match_info['filename'])
A:aiohttp.web_urldispatcher.self._routes['OPTIONS']->ResourceRoute('OPTIONS', handler, self, expect_handler=self._expect_handler)
A:aiohttp.web_urldispatcher.filepath->self._directory.joinpath(filename).resolve()
A:aiohttp.web_urldispatcher.ret->Response(text=self._directory_as_html(filepath), content_type='text/html')
A:aiohttp.web_urldispatcher.posix_dir_len->len(self._directory.as_posix())
A:aiohttp.web_urldispatcher.index_of->'Index of /{}'.format(relative_path_to_dir)
A:aiohttp.web_urldispatcher.head->'<head>\n<title>{}</title>\n</head>'.format(index_of)
A:aiohttp.web_urldispatcher.h1->'<h1>{}</h1>'.format(index_of)
A:aiohttp.web_urldispatcher.dir_index->self._directory.joinpath(filename).resolve().iterdir()
A:aiohttp.web_urldispatcher.file_name->'{}/'.format(_file.name)
A:aiohttp.web_urldispatcher.ul->'<ul>\n{}\n</ul>'.format('\n'.join(index_list))
A:aiohttp.web_urldispatcher.body->'<body>\n{}\n{}\n</body>'.format(h1, ul)
A:aiohttp.web_urldispatcher.html->'<html>\n{}\n{}\n</html>'.format(head, body)
A:aiohttp.web_urldispatcher.methods->set()
A:aiohttp.web_urldispatcher.DYN->re.compile('\\{(?P<var>[a-zA-Z][_a-zA-Z0-9]*)\\}')
A:aiohttp.web_urldispatcher.DYN_WITH_RE->re.compile('\\{(?P<var>[a-zA-Z][_a-zA-Z0-9]*):(?P<re>.+)\\}')
A:aiohttp.web_urldispatcher.ROUTE_RE->re.compile('(\\{[_a-zA-Z][^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\})')
A:aiohttp.web_urldispatcher.NAME_SPLIT_RE->re.compile('[.:-]')
A:aiohttp.web_urldispatcher.parts->self.NAME_SPLIT_RE.split(name)
A:aiohttp.web_urldispatcher.resource->PrefixedSubAppResource(prefix, subapp)
A:aiohttp.web_urldispatcher.part->quote(part, safe='/')
A:aiohttp.web_urldispatcher.compiled->re.compile(pattern)
aiohttp.web_urldispatcher.AbstractResource(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.AbstractResource.get_info(self)
aiohttp.web_urldispatcher.AbstractResource.name(self)
aiohttp.web_urldispatcher.AbstractResource.resolve(self,request)
aiohttp.web_urldispatcher.AbstractResource.url(self,**kwargs)
aiohttp.web_urldispatcher.AbstractResource.url_for(self,**kwargs)
aiohttp.web_urldispatcher.AbstractRoute(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.__init__(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.get_info(self)
aiohttp.web_urldispatcher.AbstractRoute.handle_expect_header(self,request)
aiohttp.web_urldispatcher.AbstractRoute.handler(self)
aiohttp.web_urldispatcher.AbstractRoute.method(self)
aiohttp.web_urldispatcher.AbstractRoute.name(self)
aiohttp.web_urldispatcher.AbstractRoute.resource(self)
aiohttp.web_urldispatcher.AbstractRoute.url(self,**kwargs)
aiohttp.web_urldispatcher.AbstractRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.DynamicResource(self,pattern,formatter,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__init__(self,pattern,formatter,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__repr__(self)
aiohttp.web_urldispatcher.DynamicResource._match(self,path)
aiohttp.web_urldispatcher.DynamicResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.DynamicResource.get_info(self)
aiohttp.web_urldispatcher.DynamicResource.url(self,*,parts,query=None)
aiohttp.web_urldispatcher.DynamicResource.url_for(self,**parts)
aiohttp.web_urldispatcher.MatchInfoError(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__init__(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__repr__(self)
aiohttp.web_urldispatcher.MatchInfoError.http_exception(self)
aiohttp.web_urldispatcher.PlainResource(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__init__(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__repr__(self)
aiohttp.web_urldispatcher.PlainResource._match(self,path)
aiohttp.web_urldispatcher.PlainResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PlainResource.get_info(self)
aiohttp.web_urldispatcher.PlainResource.url(self,*,query=None)
aiohttp.web_urldispatcher.PlainResource.url_for(self)
aiohttp.web_urldispatcher.PrefixResource(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.__init__(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__init__(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__iter__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__len__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__repr__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource.get_info(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.resolve(self,request)
aiohttp.web_urldispatcher.PrefixedSubAppResource.url(self,**kwargs)
aiohttp.web_urldispatcher.PrefixedSubAppResource.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.Resource(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__iter__(self)
aiohttp.web_urldispatcher.Resource.__len__(self)
aiohttp.web_urldispatcher.Resource.add_route(self,method,handler,*,expect_handler=None)
aiohttp.web_urldispatcher.Resource.register_route(self,route)
aiohttp.web_urldispatcher.Resource.resolve(self,request)
aiohttp.web_urldispatcher.ResourceRoute(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__init__(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__repr__(self)
aiohttp.web_urldispatcher.ResourceRoute.get_info(self)
aiohttp.web_urldispatcher.ResourceRoute.name(self)
aiohttp.web_urldispatcher.ResourceRoute.url(self,**kwargs)
aiohttp.web_urldispatcher.ResourceRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.ResourcesView(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__contains__(self,resource)
aiohttp.web_urldispatcher.ResourcesView.__init__(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__iter__(self)
aiohttp.web_urldispatcher.ResourcesView.__len__(self)
aiohttp.web_urldispatcher.RoutesView(self,resources)
aiohttp.web_urldispatcher.RoutesView.__contains__(self,route)
aiohttp.web_urldispatcher.RoutesView.__init__(self,resources)
aiohttp.web_urldispatcher.RoutesView.__iter__(self)
aiohttp.web_urldispatcher.RoutesView.__len__(self)
aiohttp.web_urldispatcher.StaticResource(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.StaticResource.__init__(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.StaticResource.__iter__(self)
aiohttp.web_urldispatcher.StaticResource.__len__(self)
aiohttp.web_urldispatcher.StaticResource.__repr__(self)
aiohttp.web_urldispatcher.StaticResource._directory_as_html(self,filepath)
aiohttp.web_urldispatcher.StaticResource._handle(self,request)
aiohttp.web_urldispatcher.StaticResource.get_info(self)
aiohttp.web_urldispatcher.StaticResource.resolve(self,request)
aiohttp.web_urldispatcher.StaticResource.set_options_route(self,handler)
aiohttp.web_urldispatcher.StaticResource.url(self,*,filename,query=None)
aiohttp.web_urldispatcher.StaticResource.url_for(self,*,filename)
aiohttp.web_urldispatcher.SystemRoute(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__init__(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__repr__(self)
aiohttp.web_urldispatcher.SystemRoute._handler(self,request)
aiohttp.web_urldispatcher.SystemRoute.get_info(self)
aiohttp.web_urldispatcher.SystemRoute.name(self)
aiohttp.web_urldispatcher.SystemRoute.reason(self)
aiohttp.web_urldispatcher.SystemRoute.status(self)
aiohttp.web_urldispatcher.SystemRoute.url(self,*args,**kwargs)
aiohttp.web_urldispatcher.SystemRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher(self,app)
aiohttp.web_urldispatcher.UrlDispatcher.__contains__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__getitem__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__init__(self,app)
aiohttp.web_urldispatcher.UrlDispatcher.__iter__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__len__(self)
aiohttp.web_urldispatcher.UrlDispatcher._reg_resource(self,resource)
aiohttp.web_urldispatcher.UrlDispatcher.add_delete(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_get(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_head(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_patch(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_post(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_put(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_resource(self,path,*,name=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_route(self,method,path,handler,*,name=None,expect_handler=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_static(self,prefix,path,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.UrlDispatcher.add_subapp(self,prefix,subapp)
aiohttp.web_urldispatcher.UrlDispatcher.named_resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.resolve(self,request)
aiohttp.web_urldispatcher.UrlDispatcher.resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.routes(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__init__(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__repr__(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.add_app(self,app)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.apps(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.expect_handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.freeze(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.get_info(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.http_exception(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.route(self)
aiohttp.web_urldispatcher.View(AbstractView)
aiohttp.web_urldispatcher.View.__iter__(self)
aiohttp.web_urldispatcher.View._raise_allowed_methods(self)
aiohttp.web_urldispatcher._defaultExpectHandler(request)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/_ws_impl.py----------------------------------------
A:aiohttp._ws_impl._WSMessageBase->collections.namedtuple('_WSMessageBase', ['type', 'data', 'extra'])
A:aiohttp._ws_impl.CLOSED_MESSAGE->WSMessage(WSMsgType.CLOSED, None, None)
A:aiohttp._ws_impl.close_message->payload[2:].decode('utf-8')
A:aiohttp._ws_impl.msg->WSMessage(WSMsgType.CLOSE, 0, '')
A:aiohttp._ws_impl.text->b''.join(data).decode('utf-8')
A:aiohttp._ws_impl.data->int.from_bytes(data, native_byteorder)
A:aiohttp._ws_impl.datalen->len(data)
A:aiohttp._ws_impl.mask->mask.to_bytes(4, 'big').to_bytes(4, 'big')
A:aiohttp._ws_impl.payload->_websocket_mask(bytes(mask), payload)
A:aiohttp._ws_impl.msg_length->len(message)
A:aiohttp._ws_impl.header->PACK_LEN3(128 | opcode, 127 | mask_bit, msg_length)
A:aiohttp._ws_impl.message->message.encode('utf-8').encode('utf-8')
A:aiohttp._ws_impl.version->headers.get(hdrs.SEC_WEBSOCKET_VERSION, '')
A:aiohttp._ws_impl.key->headers.get(hdrs.SEC_WEBSOCKET_KEY)
aiohttp.WSCloseCode(IntEnum)
aiohttp.WSMessage(_WSMessageBase)
aiohttp.WSMessage.json(self,*,loads=json.loads)
aiohttp.WSMessage.tp(self)
aiohttp.WSMsgType(IntEnum)
aiohttp.WebSocketError(self,code,message)
aiohttp._ws_impl.WSCloseCode(IntEnum)
aiohttp._ws_impl.WSMessage(_WSMessageBase)
aiohttp._ws_impl.WSMessage.json(self,*,loads=json.loads)
aiohttp._ws_impl.WSMessage.tp(self)
aiohttp._ws_impl.WSMsgType(IntEnum)
aiohttp._ws_impl.WebSocketError(self,code,message)
aiohttp._ws_impl.WebSocketError.__init__(self,code,message)
aiohttp._ws_impl.WebSocketParser(out,buf)
aiohttp._ws_impl.WebSocketWriter(self,writer,*,use_mask=False,random=random.Random())
aiohttp._ws_impl.WebSocketWriter.__init__(self,writer,*,use_mask=False,random=random.Random())
aiohttp._ws_impl.WebSocketWriter._send_frame(self,message,opcode)
aiohttp._ws_impl.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp._ws_impl.WebSocketWriter.ping(self,message=b'')
aiohttp._ws_impl.WebSocketWriter.pong(self,message=b'')
aiohttp._ws_impl.WebSocketWriter.send(self,message,binary=False)
aiohttp._ws_impl._websocket_mask_python(mask,data)
aiohttp._ws_impl.do_handshake(method,headers,transport,protocols=())
aiohttp._ws_impl.parse_frame(buf,continuation=False)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/web.py----------------------------------------
A:aiohttp.web.now->self._loop.time()
A:aiohttp.web.request->web_reqrep.Request(message, payload, self.transport, self.reader, self.writer, self._time_service, secure_proxy_ssl_header=self._secure_proxy_ssl_header)
A:aiohttp.web.expect->web_reqrep.Request(message, payload, self.transport, self.reader, self.writer, self._time_service, secure_proxy_ssl_header=self._secure_proxy_ssl_header).headers.get(hdrs.EXPECT)
A:aiohttp.web.self._time_service->TimeService(self._loop)
A:aiohttp.web.loop->asyncio.get_event_loop()
A:aiohttp.web.router->web_urldispatcher.UrlDispatcher(self)
A:aiohttp.web.self._middlewares->FrozenList(middlewares)
A:aiohttp.web.self._on_pre_signal->PreSignal()
A:aiohttp.web.self._on_post_signal->PostSignal()
A:aiohttp.web.self._on_response_prepare->Signal(self)
A:aiohttp.web.self._on_startup->Signal(self)
A:aiohttp.web.self._on_shutdown->Signal(self)
A:aiohttp.web.self._on_cleanup->Signal(self)
A:aiohttp.web.subsig->getattr(subapp, signame)
A:aiohttp.web.appsig->getattr(self, signame)
A:aiohttp.web.debug->kwargs.pop('debug', sentinel)
A:aiohttp.web.make_handler_kwargs->dict()
A:aiohttp.web.handler->func(extra_argv).make_handler(access_log=access_log, **make_handler_kwargs)
A:aiohttp.web.server->asyncio.get_event_loop().create_server(handler, host, port, ssl=ssl_context, backlog=backlog)
A:aiohttp.web.(srv, startup_res)->asyncio.get_event_loop().run_until_complete(asyncio.gather(server, app.startup(), loop=loop))
A:aiohttp.web.url->url.with_host(host).with_port(port).with_host(host).with_port(port)
A:aiohttp.web.arg_parser->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web')
A:aiohttp.web.(args, extra_argv)->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web').parse_known_args(argv)
A:aiohttp.web.(mod_str, _, func_str)->args.entry_func.partition(':')
A:aiohttp.web.module->import_module(mod_str)
A:aiohttp.web.func->getattr(module, func_str)
A:aiohttp.web.app->func(extra_argv)
aiohttp.web.Application(self,*,logger=web_logger,loop=None,router=None,handler_factory=RequestHandlerFactory,middlewares=(),debug=False)
aiohttp.web.Application.__delitem__(self,key)
aiohttp.web.Application.__getitem__(self,key)
aiohttp.web.Application.__init__(self,*,logger=web_logger,loop=None,router=None,handler_factory=RequestHandlerFactory,middlewares=(),debug=False)
aiohttp.web.Application.__iter__(self)
aiohttp.web.Application.__len__(self)
aiohttp.web.Application.__repr__(self)
aiohttp.web.Application.__setitem__(self,key,value)
aiohttp.web.Application._check_frozen(self)
aiohttp.web.Application._reg_subapp_signals(self,subapp)
aiohttp.web.Application.cleanup(self)
aiohttp.web.Application.copy(self)
aiohttp.web.Application.debug(self)
aiohttp.web.Application.finish(self)
aiohttp.web.Application.freeze(self)
aiohttp.web.Application.frozen(self)
aiohttp.web.Application.loop(self)
aiohttp.web.Application.make_handler(self,**kwargs)
aiohttp.web.Application.middlewares(self)
aiohttp.web.Application.on_cleanup(self)
aiohttp.web.Application.on_post_signal(self)
aiohttp.web.Application.on_pre_signal(self)
aiohttp.web.Application.on_response_prepare(self)
aiohttp.web.Application.on_shutdown(self)
aiohttp.web.Application.on_startup(self)
aiohttp.web.Application.register_on_finish(self,func,*args,**kwargs)
aiohttp.web.Application.router(self)
aiohttp.web.Application.shutdown(self)
aiohttp.web.Application.startup(self)
aiohttp.web.RequestHandler(self,manager,app,router,time_service,*,secure_proxy_ssl_header=None,**kwargs)
aiohttp.web.RequestHandler.__init__(self,manager,app,router,time_service,*,secure_proxy_ssl_header=None,**kwargs)
aiohttp.web.RequestHandler.__repr__(self)
aiohttp.web.RequestHandler.connection_lost(self,exc)
aiohttp.web.RequestHandler.connection_made(self,transport)
aiohttp.web.RequestHandler.handle_request(self,message,payload)
aiohttp.web.RequestHandlerFactory(self,app,router,*,handler=RequestHandler,loop=None,secure_proxy_ssl_header=None,**kwargs)
aiohttp.web.RequestHandlerFactory.__init__(self,app,router,*,handler=RequestHandler,loop=None,secure_proxy_ssl_header=None,**kwargs)
aiohttp.web.RequestHandlerFactory.connection_lost(self,handler,exc=None)
aiohttp.web.RequestHandlerFactory.connection_made(self,handler,transport)
aiohttp.web.RequestHandlerFactory.connections(self)
aiohttp.web.RequestHandlerFactory.finish_connections(self,timeout=None)
aiohttp.web.RequestHandlerFactory.requests_count(self)
aiohttp.web.RequestHandlerFactory.secure_proxy_ssl_header(self)
aiohttp.web.main(argv)
aiohttp.web.run_app(app,*,host='0.0.0.0',port=None,shutdown_timeout=60.0,ssl_context=None,print=print,backlog=128,access_log_format=None,access_log=access_logger)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/parsers.py----------------------------------------
A:aiohttp.parsers.output->FlowControlDataQueue(self, limit=self._limit, loop=self._loop)
A:aiohttp.parsers.p->parser(output, self._buffer)
A:aiohttp.parsers.self._socket->transport.get_extra_info('socket')
A:aiohttp.parsers.value->bool(value)
A:aiohttp.parsers.self.reader->StreamParser(loop=loop, eof_exc_class=disconnect_error, **kwargs)
A:aiohttp.parsers.self.writer->StreamWriter(transport, self, self.reader, self._loop)
A:aiohttp.parsers.self._data->bytearray(*args)
A:aiohttp.parsers.self._helper->_ParserBufferHelper(None, self._data)
A:aiohttp.parsers.self._writer->self._feed_data(self._helper)
A:aiohttp.parsers.length->len(self._data)
A:aiohttp.parsers.stop_len->len(stop)
A:aiohttp.parsers.pos->self._data.find(stop)
A:aiohttp.parsers.stop_line->self._data.find(stop)
aiohttp.ParserBuffer(self,*args)
aiohttp.ParserBuffer.__bytes__(self)
aiohttp.ParserBuffer.__len__(self)
aiohttp.ParserBuffer._feed_data(helper)
aiohttp.ParserBuffer.exception(self)
aiohttp.ParserBuffer.extend(self,data)
aiohttp.ParserBuffer.feed_data(self,data)
aiohttp.ParserBuffer.read(self,size)
aiohttp.ParserBuffer.readsome(self,size=None)
aiohttp.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.ParserBuffer.set_exception(self,exc)
aiohttp.ParserBuffer.skip(self,size)
aiohttp.ParserBuffer.skipuntil(self,stop)
aiohttp.ParserBuffer.wait(self,size)
aiohttp.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.StreamParser(self,*,loop=None,buf=None,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.StreamParser.at_eof(self)
aiohttp.StreamParser.exception(self)
aiohttp.StreamParser.feed_data(self,data)
aiohttp.StreamParser.feed_eof(self)
aiohttp.StreamParser.output(self)
aiohttp.StreamParser.set_exception(self,exc)
aiohttp.StreamParser.set_parser(self,parser,output=None)
aiohttp.StreamParser.set_transport(self,transport)
aiohttp.StreamParser.unset_parser(self)
aiohttp.StreamProtocol(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.StreamProtocol.connection_lost(self,exc)
aiohttp.StreamProtocol.connection_made(self,transport)
aiohttp.StreamProtocol.data_received(self,data)
aiohttp.StreamProtocol.eof_received(self)
aiohttp.StreamProtocol.is_connected(self)
aiohttp.StreamWriter(self,transport,protocol,reader,loop)
aiohttp.StreamWriter.set_tcp_cork(self,value)
aiohttp.StreamWriter.set_tcp_nodelay(self,value)
aiohttp.StreamWriter.tcp_cork(self)
aiohttp.StreamWriter.tcp_nodelay(self)
aiohttp._ParserBufferHelper(self,exception,data)
aiohttp.parsers.ParserBuffer(self,*args)
aiohttp.parsers.ParserBuffer.__bytes__(self)
aiohttp.parsers.ParserBuffer.__init__(self,*args)
aiohttp.parsers.ParserBuffer.__len__(self)
aiohttp.parsers.ParserBuffer._feed_data(helper)
aiohttp.parsers.ParserBuffer.exception(self)
aiohttp.parsers.ParserBuffer.extend(self,data)
aiohttp.parsers.ParserBuffer.feed_data(self,data)
aiohttp.parsers.ParserBuffer.read(self,size)
aiohttp.parsers.ParserBuffer.readsome(self,size=None)
aiohttp.parsers.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.parsers.ParserBuffer.set_exception(self,exc)
aiohttp.parsers.ParserBuffer.skip(self,size)
aiohttp.parsers.ParserBuffer.skipuntil(self,stop)
aiohttp.parsers.ParserBuffer.wait(self,size)
aiohttp.parsers.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.parsers.StreamParser(self,*,loop=None,buf=None,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.parsers.StreamParser.__init__(self,*,loop=None,buf=None,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.parsers.StreamParser.at_eof(self)
aiohttp.parsers.StreamParser.exception(self)
aiohttp.parsers.StreamParser.feed_data(self,data)
aiohttp.parsers.StreamParser.feed_eof(self)
aiohttp.parsers.StreamParser.output(self)
aiohttp.parsers.StreamParser.set_exception(self,exc)
aiohttp.parsers.StreamParser.set_parser(self,parser,output=None)
aiohttp.parsers.StreamParser.set_transport(self,transport)
aiohttp.parsers.StreamParser.unset_parser(self)
aiohttp.parsers.StreamProtocol(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.parsers.StreamProtocol.__init__(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.parsers.StreamProtocol.connection_lost(self,exc)
aiohttp.parsers.StreamProtocol.connection_made(self,transport)
aiohttp.parsers.StreamProtocol.data_received(self,data)
aiohttp.parsers.StreamProtocol.eof_received(self)
aiohttp.parsers.StreamProtocol.is_connected(self)
aiohttp.parsers.StreamWriter(self,transport,protocol,reader,loop)
aiohttp.parsers.StreamWriter.__init__(self,transport,protocol,reader,loop)
aiohttp.parsers.StreamWriter.set_tcp_cork(self,value)
aiohttp.parsers.StreamWriter.set_tcp_nodelay(self,value)
aiohttp.parsers.StreamWriter.tcp_cork(self)
aiohttp.parsers.StreamWriter.tcp_nodelay(self)
aiohttp.parsers._ParserBufferHelper(self,exception,data)
aiohttp.parsers._ParserBufferHelper.__init__(self,exception,data)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/client.py----------------------------------------
A:aiohttp.client.connector->aiohttp.TCPConnector(loop=loop, force_close=True)
A:aiohttp.client.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client.cookie_jar->CookieJar(loop=loop)
A:aiohttp.client.headers->CIMultiDict(headers)
A:aiohttp.client.self._skip_auto_headers->frozenset()
A:aiohttp.client.skip_headers->set(self._skip_auto_headers)
A:aiohttp.client.proxy->URL(proxy)
A:aiohttp.client.url->URL(url).with_fragment(None)
A:aiohttp.client.cookies->self._cookie_jar.filter_cookies(url)
A:aiohttp.client.req->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, encoding=encoding, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timeout=timeout)
A:aiohttp.client.resp->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, encoding=encoding, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timeout=timeout).send(conn.writer, conn.reader)
A:aiohttp.client.r_url->URL(url).with_fragment(None).join(r_url)
A:aiohttp.client.resp._history->tuple(history)
A:aiohttp.client.sec_key->base64.b64encode(os.urandom(16))
A:aiohttp.client.headers[hdrs.SEC_WEBSOCKET_PROTOCOL]->','.join(protocols)
A:aiohttp.client.key->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, encoding=encoding, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timeout=timeout).send(conn.writer, conn.reader).headers.get(hdrs.SEC_WEBSOCKET_ACCEPT, '')
A:aiohttp.client.match->base64.b64encode(hashlib.sha1(sec_key + WS_KEY).digest()).decode()
A:aiohttp.client.reader->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, encoding=encoding, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timeout=timeout).send(conn.writer, conn.reader).connection.reader.set_parser(WebSocketParser)
A:aiohttp.client.writer->WebSocketWriter(resp.connection.writer, use_mask=True)
A:aiohttp.client.result->CIMultiDict(self._default_headers)
A:aiohttp.client.added_names->set()
A:aiohttp.client.ret->helpers.create_future(self._loop)
A:aiohttp.client.session->aiohttp.ClientSession(loop=loop, connector=connector, auth=auth, ws_response_class=ws_response_class, headers=headers)
A:aiohttp.client.loop->asyncio.get_event_loop()
aiohttp.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=aiohttp.HttpVersion11,cookie_jar=None)
aiohttp.ClientSession.__del__(self,_warnings=warnings)
aiohttp.ClientSession.__enter__(self)
aiohttp.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.ClientSession._prepare_headers(self,headers)
aiohttp.ClientSession._request(self,method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.ClientSession._ws_connect(self,url,*,protocols=(),timeout=10.0,autoclose=True,autoping=True,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.ClientSession.close(self)
aiohttp.ClientSession.closed(self)
aiohttp.ClientSession.connector(self)
aiohttp.ClientSession.cookie_jar(self)
aiohttp.ClientSession.delete(self,url,**kwargs)
aiohttp.ClientSession.detach(self)
aiohttp.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.ClientSession.loop(self)
aiohttp.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.request(self,method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.ClientSession.version(self)
aiohttp.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,autoclose=True,autoping=True,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp._BaseRequestContextManager(self,coro)
aiohttp._BaseRequestContextManager.__iter__(self)
aiohttp._BaseRequestContextManager.__next__(self)
aiohttp._BaseRequestContextManager.gi_code(self)
aiohttp._BaseRequestContextManager.gi_frame(self)
aiohttp._BaseRequestContextManager.gi_running(self)
aiohttp._DetachedRequestContextManager(self,coro,session)
aiohttp._DetachedRequestContextManager.__del__(self)
aiohttp._DetachedRequestContextManager.__iter__(self)
aiohttp._DetachedWSRequestContextManager(self,coro,session)
aiohttp._DetachedWSRequestContextManager.__del__(self)
aiohttp._RequestContextManager(_BaseRequestContextManager)
aiohttp._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=aiohttp.HttpVersion11,cookie_jar=None)
aiohttp.client.ClientSession.__del__(self,_warnings=warnings)
aiohttp.client.ClientSession.__enter__(self)
aiohttp.client.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.client.ClientSession.__init__(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=aiohttp.HttpVersion11,cookie_jar=None)
aiohttp.client.ClientSession._prepare_headers(self,headers)
aiohttp.client.ClientSession._request(self,method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.client.ClientSession._ws_connect(self,url,*,protocols=(),timeout=10.0,autoclose=True,autoping=True,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.client.ClientSession.close(self)
aiohttp.client.ClientSession.closed(self)
aiohttp.client.ClientSession.connector(self)
aiohttp.client.ClientSession.cookie_jar(self)
aiohttp.client.ClientSession.delete(self,url,**kwargs)
aiohttp.client.ClientSession.detach(self)
aiohttp.client.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.client.ClientSession.loop(self)
aiohttp.client.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.request(self,method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.client.ClientSession.version(self)
aiohttp.client.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,autoclose=True,autoping=True,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.client._BaseRequestContextManager(self,coro)
aiohttp.client._BaseRequestContextManager.__init__(self,coro)
aiohttp.client._BaseRequestContextManager.__iter__(self)
aiohttp.client._BaseRequestContextManager.__next__(self)
aiohttp.client._BaseRequestContextManager.gi_code(self)
aiohttp.client._BaseRequestContextManager.gi_frame(self)
aiohttp.client._BaseRequestContextManager.gi_running(self)
aiohttp.client._DetachedRequestContextManager(self,coro,session)
aiohttp.client._DetachedRequestContextManager.__del__(self)
aiohttp.client._DetachedRequestContextManager.__init__(self,coro,session)
aiohttp.client._DetachedRequestContextManager.__iter__(self)
aiohttp.client._DetachedWSRequestContextManager(self,coro,session)
aiohttp.client._DetachedWSRequestContextManager.__del__(self)
aiohttp.client._DetachedWSRequestContextManager.__init__(self,coro,session)
aiohttp.client._RequestContextManager(_BaseRequestContextManager)
aiohttp.client._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.delete(url,**kwargs)
aiohttp.client.get(url,**kwargs)
aiohttp.client.head(url,**kwargs)
aiohttp.client.options(url,**kwargs)
aiohttp.client.patch(url,**kwargs)
aiohttp.client.post(url,**kwargs)
aiohttp.client.put(url,**kwargs)
aiohttp.client.request(method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,request_class=None,response_class=None,proxy=None,proxy_auth=None)
aiohttp.client.ws_connect(url,*,protocols=(),timeout=10.0,connector=None,auth=None,ws_response_class=ClientWebSocketResponse,autoclose=True,autoping=True,loop=None,origin=None,headers=None)
aiohttp.delete(url,**kwargs)
aiohttp.get(url,**kwargs)
aiohttp.head(url,**kwargs)
aiohttp.options(url,**kwargs)
aiohttp.patch(url,**kwargs)
aiohttp.post(url,**kwargs)
aiohttp.put(url,**kwargs)
aiohttp.request(method,url,*,params=None,data=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,encoding='utf-8',version=None,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,request_class=None,response_class=None,proxy=None,proxy_auth=None)
aiohttp.ws_connect(url,*,protocols=(),timeout=10.0,connector=None,auth=None,ws_response_class=ClientWebSocketResponse,autoclose=True,autoping=True,loop=None,origin=None,headers=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/client_reqrep.py----------------------------------------
A:aiohttp.client_reqrep.ALL_METHODS->GET_METHODS.union(POST_METHODS).union({hdrs.METH_DELETE, hdrs.METH_TRACE})
A:aiohttp.client_reqrep.loop->asyncio.get_event_loop()
A:aiohttp.client_reqrep.q->MultiDict(url.query)
A:aiohttp.client_reqrep.url2->url.with_query(q).with_query(params)
A:aiohttp.client_reqrep.url->url.with_query(q).with_query(q)
A:aiohttp.client_reqrep.self.url->url.with_query(q).with_query(q).with_fragment(None)
A:aiohttp.client_reqrep.self.method->method.upper()
A:aiohttp.client_reqrep.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client_reqrep.self.auth->helpers.BasicAuth(username, password or '')
A:aiohttp.client_reqrep.self.headers->CIMultiDictProxy(message.headers)
A:aiohttp.client_reqrep.headers->headers.items().items()
A:aiohttp.client_reqrep.c->http.cookies.SimpleCookie()
A:aiohttp.client_reqrep.self.headers[hdrs.COOKIE]->http.cookies.SimpleCookie().output(header='', sep=';').strip()
A:aiohttp.client_reqrep.enc->self.headers.get(hdrs.CONTENT_ENCODING, '').lower()
A:aiohttp.client_reqrep.self.headers[hdrs.AUTHORIZATION]->auth.encode()
A:aiohttp.client_reqrep.data->helpers.FormData(data)
A:aiohttp.client_reqrep.self.headers[hdrs.CONTENT_LENGTH]->str(len(self.body))
A:aiohttp.client_reqrep.size->len(data.getbuffer())
A:aiohttp.client_reqrep.self.body->data(self.encoding)
A:aiohttp.client_reqrep.te->self.headers.get(hdrs.TRANSFER_ENCODING, '').lower()
A:aiohttp.client_reqrep.self._continue->helpers.create_future(self.loop)
A:aiohttp.client_reqrep.result->stream.send(value)
A:aiohttp.client_reqrep.chunk->self.body.read(self.chunked)
A:aiohttp.client_reqrep.new_exc->aiohttp.ClientRequestError('Can not write request body for %s' % self.url)
A:aiohttp.client_reqrep.ret->aiohttp.Request(writer, self.method, path, self.version).write_eof()
A:aiohttp.client_reqrep.request->aiohttp.Request(writer, self.method, path, self.version)
A:aiohttp.client_reqrep.self._writer->helpers.ensure_future(self.write_bytes(request, reader), loop=self.loop)
A:aiohttp.client_reqrep.self.response->self.response_class(self.method, self.url, writer=self._writer, continue100=self._continue, timeout=self._timeout)
A:aiohttp.client_reqrep._response_parser->aiohttp.HttpResponseParser()
A:aiohttp.client_reqrep.self.cookies->http.cookies.SimpleCookie()
A:aiohttp.client_reqrep.out->io.StringIO()
A:aiohttp.client_reqrep.ascii_encodable_url->str(self.url)
A:aiohttp.client_reqrep.ascii_encodable_reason->self.reason.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.client_reqrep.self.content->self.flow_control_class(connection.reader, loop=connection.loop, timeout=self._timeout)
A:aiohttp.client_reqrep.httpstream->self._reader.set_parser(self._response_parser)
A:aiohttp.client_reqrep.self.raw_headers->tuple(message.raw_headers)
A:aiohttp.client_reqrep.rwb->self._need_parse_response_body()
A:aiohttp.client_reqrep.ctype->self.headers.get(hdrs.CONTENT_TYPE, '').lower()
A:aiohttp.client_reqrep.(mtype, stype, _, params)->helpers.parse_mimetype(ctype)
A:aiohttp.client_reqrep.encoding->self._get_encoding()
A:aiohttp.client_reqrep.stripped->self._content.strip()
aiohttp.ClientRequest(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,encoding='utf-8',version=aiohttp.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.ClientRequest.close(self)
aiohttp.ClientRequest.host(self)
aiohttp.ClientRequest.port(self)
aiohttp.ClientRequest.send(self,writer,reader)
aiohttp.ClientRequest.terminate(self)
aiohttp.ClientRequest.update_auth(self,auth)
aiohttp.ClientRequest.update_auto_headers(self,skip_auto_headers)
aiohttp.ClientRequest.update_body_from_data(self,data,skip_auto_headers)
aiohttp.ClientRequest.update_content_encoding(self,data)
aiohttp.ClientRequest.update_cookies(self,cookies)
aiohttp.ClientRequest.update_expect_continue(self,expect=False)
aiohttp.ClientRequest.update_headers(self,headers)
aiohttp.ClientRequest.update_host(self,url)
aiohttp.ClientRequest.update_proxy(self,proxy,proxy_auth)
aiohttp.ClientRequest.update_transfer_encoding(self)
aiohttp.ClientRequest.update_version(self,version)
aiohttp.ClientRequest.write_bytes(self,request,reader)
aiohttp.ClientResponse(self,method,url,*,writer=None,continue100=None,timeout=5*60)
aiohttp.ClientResponse.__del__(self,_warnings=warnings)
aiohttp.ClientResponse.__repr__(self)
aiohttp.ClientResponse._cleanup_writer(self)
aiohttp.ClientResponse._get_encoding(self)
aiohttp.ClientResponse._need_parse_response_body(self)
aiohttp.ClientResponse._notify_content(self)
aiohttp.ClientResponse._post_init(self,loop)
aiohttp.ClientResponse._setup_connection(self,connection)
aiohttp.ClientResponse.close(self)
aiohttp.ClientResponse.connection(self)
aiohttp.ClientResponse.history(self)
aiohttp.ClientResponse.host(self)
aiohttp.ClientResponse.json(self,*,encoding=None,loads=json.loads)
aiohttp.ClientResponse.raise_for_status(self)
aiohttp.ClientResponse.read(self)
aiohttp.ClientResponse.release(self)
aiohttp.ClientResponse.start(self,connection,read_until_eof=False)
aiohttp.ClientResponse.text(self,encoding=None)
aiohttp.ClientResponse.url(self)
aiohttp.ClientResponse.url_obj(self)
aiohttp.ClientResponse.wait_for_close(self)
aiohttp.client_reqrep.ClientRequest(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,encoding='utf-8',version=aiohttp.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.client_reqrep.ClientRequest.__init__(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,encoding='utf-8',version=aiohttp.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timeout=5*60)
aiohttp.client_reqrep.ClientRequest.close(self)
aiohttp.client_reqrep.ClientRequest.host(self)
aiohttp.client_reqrep.ClientRequest.port(self)
aiohttp.client_reqrep.ClientRequest.send(self,writer,reader)
aiohttp.client_reqrep.ClientRequest.terminate(self)
aiohttp.client_reqrep.ClientRequest.update_auth(self,auth)
aiohttp.client_reqrep.ClientRequest.update_auto_headers(self,skip_auto_headers)
aiohttp.client_reqrep.ClientRequest.update_body_from_data(self,data,skip_auto_headers)
aiohttp.client_reqrep.ClientRequest.update_content_encoding(self,data)
aiohttp.client_reqrep.ClientRequest.update_cookies(self,cookies)
aiohttp.client_reqrep.ClientRequest.update_expect_continue(self,expect=False)
aiohttp.client_reqrep.ClientRequest.update_headers(self,headers)
aiohttp.client_reqrep.ClientRequest.update_host(self,url)
aiohttp.client_reqrep.ClientRequest.update_proxy(self,proxy,proxy_auth)
aiohttp.client_reqrep.ClientRequest.update_transfer_encoding(self)
aiohttp.client_reqrep.ClientRequest.update_version(self,version)
aiohttp.client_reqrep.ClientRequest.write_bytes(self,request,reader)
aiohttp.client_reqrep.ClientResponse(self,method,url,*,writer=None,continue100=None,timeout=5*60)
aiohttp.client_reqrep.ClientResponse.__del__(self,_warnings=warnings)
aiohttp.client_reqrep.ClientResponse.__init__(self,method,url,*,writer=None,continue100=None,timeout=5*60)
aiohttp.client_reqrep.ClientResponse.__repr__(self)
aiohttp.client_reqrep.ClientResponse._cleanup_writer(self)
aiohttp.client_reqrep.ClientResponse._get_encoding(self)
aiohttp.client_reqrep.ClientResponse._need_parse_response_body(self)
aiohttp.client_reqrep.ClientResponse._notify_content(self)
aiohttp.client_reqrep.ClientResponse._post_init(self,loop)
aiohttp.client_reqrep.ClientResponse._setup_connection(self,connection)
aiohttp.client_reqrep.ClientResponse.close(self)
aiohttp.client_reqrep.ClientResponse.connection(self)
aiohttp.client_reqrep.ClientResponse.history(self)
aiohttp.client_reqrep.ClientResponse.host(self)
aiohttp.client_reqrep.ClientResponse.json(self,*,encoding=None,loads=json.loads)
aiohttp.client_reqrep.ClientResponse.raise_for_status(self)
aiohttp.client_reqrep.ClientResponse.read(self)
aiohttp.client_reqrep.ClientResponse.release(self)
aiohttp.client_reqrep.ClientResponse.start(self,connection,read_until_eof=False)
aiohttp.client_reqrep.ClientResponse.text(self,encoding=None)
aiohttp.client_reqrep.ClientResponse.url(self)
aiohttp.client_reqrep.ClientResponse.url_obj(self)
aiohttp.client_reqrep.ClientResponse.wait_for_close(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp1.1.1/hdrs.py----------------------------------------
A:aiohttp.hdrs.ACCEPT->istr('ACCEPT')
A:aiohttp.hdrs.ACCEPT_CHARSET->istr('ACCEPT-CHARSET')
A:aiohttp.hdrs.ACCEPT_ENCODING->istr('ACCEPT-ENCODING')
A:aiohttp.hdrs.ACCEPT_LANGUAGE->istr('ACCEPT-LANGUAGE')
A:aiohttp.hdrs.ACCEPT_RANGES->istr('ACCEPT-RANGES')
A:aiohttp.hdrs.ACCESS_CONTROL_MAX_AGE->istr('ACCESS-CONTROL-MAX-AGE')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_CREDENTIALS->istr('ACCESS-CONTROL-ALLOW-CREDENTIALS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_HEADERS->istr('ACCESS-CONTROL-ALLOW-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_METHODS->istr('ACCESS-CONTROL-ALLOW-METHODS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_ORIGIN->istr('ACCESS-CONTROL-ALLOW-ORIGIN')
A:aiohttp.hdrs.ACCESS_CONTROL_EXPOSE_HEADERS->istr('ACCESS-CONTROL-EXPOSE-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_HEADERS->istr('ACCESS-CONTROL-REQUEST-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_METHOD->istr('ACCESS-CONTROL-REQUEST-METHOD')
A:aiohttp.hdrs.AGE->istr('AGE')
A:aiohttp.hdrs.ALLOW->istr('ALLOW')
A:aiohttp.hdrs.AUTHORIZATION->istr('AUTHORIZATION')
A:aiohttp.hdrs.CACHE_CONTROL->istr('CACHE-CONTROL')
A:aiohttp.hdrs.CONNECTION->istr('CONNECTION')
A:aiohttp.hdrs.CONTENT_DISPOSITION->istr('CONTENT-DISPOSITION')
A:aiohttp.hdrs.CONTENT_ENCODING->istr('CONTENT-ENCODING')
A:aiohttp.hdrs.CONTENT_LANGUAGE->istr('CONTENT-LANGUAGE')
A:aiohttp.hdrs.CONTENT_LENGTH->istr('CONTENT-LENGTH')
A:aiohttp.hdrs.CONTENT_LOCATION->istr('CONTENT-LOCATION')
A:aiohttp.hdrs.CONTENT_MD5->istr('CONTENT-MD5')
A:aiohttp.hdrs.CONTENT_RANGE->istr('CONTENT-RANGE')
A:aiohttp.hdrs.CONTENT_TRANSFER_ENCODING->istr('CONTENT-TRANSFER-ENCODING')
A:aiohttp.hdrs.CONTENT_TYPE->istr('CONTENT-TYPE')
A:aiohttp.hdrs.COOKIE->istr('COOKIE')
A:aiohttp.hdrs.DATE->istr('DATE')
A:aiohttp.hdrs.DESTINATION->istr('DESTINATION')
A:aiohttp.hdrs.DIGEST->istr('DIGEST')
A:aiohttp.hdrs.ETAG->istr('ETAG')
A:aiohttp.hdrs.EXPECT->istr('EXPECT')
A:aiohttp.hdrs.EXPIRES->istr('EXPIRES')
A:aiohttp.hdrs.FROM->istr('FROM')
A:aiohttp.hdrs.HOST->istr('HOST')
A:aiohttp.hdrs.IF_MATCH->istr('IF-MATCH')
A:aiohttp.hdrs.IF_MODIFIED_SINCE->istr('IF-MODIFIED-SINCE')
A:aiohttp.hdrs.IF_NONE_MATCH->istr('IF-NONE-MATCH')
A:aiohttp.hdrs.IF_RANGE->istr('IF-RANGE')
A:aiohttp.hdrs.IF_UNMODIFIED_SINCE->istr('IF-UNMODIFIED-SINCE')
A:aiohttp.hdrs.KEEP_ALIVE->istr('KEEP-ALIVE')
A:aiohttp.hdrs.LAST_EVENT_ID->istr('LAST-EVENT-ID')
A:aiohttp.hdrs.LAST_MODIFIED->istr('LAST-MODIFIED')
A:aiohttp.hdrs.LINK->istr('LINK')
A:aiohttp.hdrs.LOCATION->istr('LOCATION')
A:aiohttp.hdrs.MAX_FORWARDS->istr('MAX-FORWARDS')
A:aiohttp.hdrs.ORIGIN->istr('ORIGIN')
A:aiohttp.hdrs.PRAGMA->istr('PRAGMA')
A:aiohttp.hdrs.PROXY_AUTHENTICATE->istr('PROXY_AUTHENTICATE')
A:aiohttp.hdrs.PROXY_AUTHORIZATION->istr('PROXY-AUTHORIZATION')
A:aiohttp.hdrs.RANGE->istr('RANGE')
A:aiohttp.hdrs.REFERER->istr('REFERER')
A:aiohttp.hdrs.RETRY_AFTER->istr('RETRY-AFTER')
A:aiohttp.hdrs.SEC_WEBSOCKET_ACCEPT->istr('SEC-WEBSOCKET-ACCEPT')
A:aiohttp.hdrs.SEC_WEBSOCKET_VERSION->istr('SEC-WEBSOCKET-VERSION')
A:aiohttp.hdrs.SEC_WEBSOCKET_PROTOCOL->istr('SEC-WEBSOCKET-PROTOCOL')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY->istr('SEC-WEBSOCKET-KEY')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY1->istr('SEC-WEBSOCKET-KEY1')
A:aiohttp.hdrs.SERVER->istr('SERVER')
A:aiohttp.hdrs.SET_COOKIE->istr('SET-COOKIE')
A:aiohttp.hdrs.TE->istr('TE')
A:aiohttp.hdrs.TRAILER->istr('TRAILER')
A:aiohttp.hdrs.TRANSFER_ENCODING->istr('TRANSFER-ENCODING')
A:aiohttp.hdrs.UPGRADE->istr('UPGRADE')
A:aiohttp.hdrs.WEBSOCKET->istr('WEBSOCKET')
A:aiohttp.hdrs.URI->istr('URI')
A:aiohttp.hdrs.USER_AGENT->istr('USER-AGENT')
A:aiohttp.hdrs.VARY->istr('VARY')
A:aiohttp.hdrs.VIA->istr('VIA')
A:aiohttp.hdrs.WANT_DIGEST->istr('WANT-DIGEST')
A:aiohttp.hdrs.WARNING->istr('WARNING')
A:aiohttp.hdrs.WWW_AUTHENTICATE->istr('WWW-AUTHENTICATE')

