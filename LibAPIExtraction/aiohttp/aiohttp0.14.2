
----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/abc.py----------------------------------------
aiohttp.abc.AbstractMatchInfo(metaclass=ABCMeta)
aiohttp.abc.AbstractMatchInfo.handler(self)
aiohttp.abc.AbstractRouter(metaclass=ABCMeta)
aiohttp.abc.AbstractRouter.resolve(self,request)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/log.py----------------------------------------
A:aiohttp.log.access_logger->logging.getLogger('aiohttp.access')
A:aiohttp.log.client_logger->logging.getLogger('aiohttp.client')
A:aiohttp.log.internal_logger->logging.getLogger('aiohttp.internal')
A:aiohttp.log.server_logger->logging.getLogger('aiohttp.server')
A:aiohttp.log.web_logger->logging.getLogger('aiohttp.web')
A:aiohttp.log.ws_logger->logging.getLogger('aiohttp.websocket')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/test_utils.py----------------------------------------
A:aiohttp.test_utils.t->asyncio.Task(once(), loop=loop)
A:aiohttp.test_utils.self._url->'{}://{}:{}'.format('https' if use_ssl else 'http', host, port)
A:aiohttp.test_utils.rob->router(self, properties, self.transport, message, body)
A:aiohttp.test_utils.response->aiohttp.Response(self.writer, 200, message.version)
A:aiohttp.test_utils.here->os.path.join(os.path.dirname(__file__), '..', 'tests')
A:aiohttp.test_utils.keyfile->os.path.join(here, 'sample.key')
A:aiohttp.test_utils.certfile->os.path.join(here, 'sample.crt')
A:aiohttp.test_utils.sslcontext->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:aiohttp.test_utils.thread_loop->asyncio.new_event_loop()
A:aiohttp.test_utils.server_coroutine->asyncio.new_event_loop().create_unix_server(lambda : TestHttpServer(keep_alive=0.5), listen_addr, ssl=sslcontext)
A:aiohttp.test_utils.server->asyncio.new_event_loop().run_until_complete(server_coroutine)
A:aiohttp.test_utils.waiter->asyncio.Future(loop=thread_loop)
A:aiohttp.test_utils.fut->asyncio.Future(loop=loop)
A:aiohttp.test_utils.server_thread->threading.Thread(target=run, args=(loop, fut))
A:aiohttp.test_utils.(thread_loop, waiter, addr)->loop.run_until_complete(fut)
A:aiohttp.test_utils.self._headers->http.client.HTTPMessage()
A:aiohttp.test_utils.url->urllib.parse.urlsplit(self._uri)
A:aiohttp.test_utils.mapping->f_locals.setdefault('_mapping', [])
A:aiohttp.test_utils.match->route.match(self._path)
A:aiohttp.test_utils.out->io.BytesIO()
A:aiohttp.test_utils.key->'-'.join((p.capitalize() for p in key.split('-')))
A:aiohttp.test_utils.encoding->self._headers.get('content-encoding', '').lower()
A:aiohttp.test_utils.resp['content']->self._body.decode('utf-8', 'ignore')
A:aiohttp.test_utils.ct->self._headers.get('content-type', '').lower()
A:aiohttp.test_utils.resp['form']->urllib.parse.parse_qs(self._body.decode('latin1'))
A:aiohttp.test_utils.message->email.parser.BytesParser().parse(out)
A:aiohttp.test_utils.(key, params)->cgi.parse_header(msg.get('content-disposition', ''))
A:aiohttp.test_utils.params['data']->msg.get_payload()
A:aiohttp.test_utils.params['content-type']->msg.get_content_type()
A:aiohttp.test_utils.cte->msg.get('content-transfer-encoding')
A:aiohttp.test_utils.body->json.dumps(resp, indent=4, sort_keys=True)
aiohttp.test_utils.Router(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router.__init__(self,srv,props,transport,message,payload)
aiohttp.test_utils.Router._response(self,response,body=None,headers=None,chunked=False,write_body=None)
aiohttp.test_utils.Router._start_response(self,code)
aiohttp.test_utils.Router.define(rmatch)
aiohttp.test_utils.Router.dispatch(self)
aiohttp.test_utils.run_briefly(loop)
aiohttp.test_utils.run_server(loop,*,listen_addr=('127.0.0.1',0),use_ssl=False,router=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/protocol.py----------------------------------------
A:aiohttp.protocol.ASCIISET->set(string.printable)
A:aiohttp.protocol.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.protocol.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.protocol.HDRRE->re.compile('[\x00-\x1f\x7f()<>@,;:\\[\\]={} \t\\\\"]')
A:aiohttp.protocol.EOF_MARKER->object()
A:aiohttp.protocol.EOL_MARKER->object()
A:aiohttp.protocol.HttpVersion->collections.namedtuple('HttpVersion', ['major', 'minor'])
A:aiohttp.protocol.HttpVersion10->HttpVersion(1, 0)
A:aiohttp.protocol.HttpVersion11->HttpVersion(1, 1)
A:aiohttp.protocol.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'should_close', 'compression'])
A:aiohttp.protocol.headers->''.join(itertools.chain((self.status_line,), *((k, ': ', v, '\r\n') for (k, v) in ((k, value) for (k, value) in self.headers.items()))))
A:aiohttp.protocol.header_length->len(line)
A:aiohttp.protocol.(name, value)->line.strip().split(':', 1)
A:aiohttp.protocol.name->name.strip().upper().strip().upper()
A:aiohttp.protocol.value->value.strip().strip()
A:aiohttp.protocol.v->value.strip().strip().lower()
A:aiohttp.protocol.enc->value.strip().strip().lower()
A:aiohttp.protocol.method->method.upper().upper()
A:aiohttp.protocol.lines->raw_data.decode('utf-8', 'surrogateescape').split('\r\n')
A:aiohttp.protocol.(method, path, version)->line.strip().split(None, 2)
A:aiohttp.protocol.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.protocol.version->HttpVersion(int(match.group(1)), int(match.group(2)))
A:aiohttp.protocol.(headers, close, compression)->self.parse_headers(lines)
A:aiohttp.protocol.(version, status)->line.strip().split(None, 1)
A:aiohttp.protocol.(status, reason)->int(status).split(None, 1)
A:aiohttp.protocol.status->int(status)
A:aiohttp.protocol.length->max(0, length - l)
A:aiohttp.protocol.out->DeflateBuffer(out, self.message.compression)
A:aiohttp.protocol.i->line.strip().find(b';')
A:aiohttp.protocol.line->line.strip().strip()
A:aiohttp.protocol.size->int(line, 16)
A:aiohttp.protocol.self.zlib->zlib.decompressobj(wbits=zlib_mode)
A:aiohttp.protocol.chunk->bytes(buf[:chunk_size])
A:aiohttp.protocol.new_filter->func(self, *args, **kw)
A:aiohttp.protocol.self.filter->filter_pipe(filter, new_filter)
A:aiohttp.protocol.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} aiohttp/{1}'.format(sys.version_info, aiohttp.__version__)
A:aiohttp.protocol.self.headers->CIMultiDict()
A:aiohttp.protocol.self.length->int(value)
A:aiohttp.protocol.val->value.strip().strip().lower()
A:aiohttp.protocol.self.writer->self._write_eof_payload()
A:aiohttp.protocol.chunk_len->'{:x}\r\n'.format(len(chunk)).encode('ascii')
A:aiohttp.protocol.l->len(chunk)
A:aiohttp.protocol.buf->bytearray()
A:aiohttp.protocol.zcomp->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.protocol.record->RESPONSES.get(status)
A:aiohttp.protocol.reason->self.calc_reason(status)
A:aiohttp.protocol.self.status_line->'{0} {1} HTTP/{2[0]}.{2[1]}\r\n'.format(method, path, http_version)
aiohttp.DeflateBuffer(self,out,encoding)
aiohttp.DeflateBuffer.feed_data(self,chunk)
aiohttp.DeflateBuffer.feed_eof(self)
aiohttp.HttpMessage(self,transport,version,close)
aiohttp.HttpMessage._add_default_headers(self)
aiohttp.HttpMessage._write_chunked_payload(self)
aiohttp.HttpMessage._write_eof_payload(self)
aiohttp.HttpMessage._write_length_payload(self,length)
aiohttp.HttpMessage.add_chunking_filter(self,chunk_size=16*1024,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.add_compression_filter(self,encoding='deflate',*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.add_header(self,name,value)
aiohttp.HttpMessage.add_headers(self,*headers)
aiohttp.HttpMessage.enable_chunked_encoding(self)
aiohttp.HttpMessage.force_close(self)
aiohttp.HttpMessage.is_headers_sent(self)
aiohttp.HttpMessage.keep_alive(self)
aiohttp.HttpMessage.send_headers(self)
aiohttp.HttpMessage.write(self,chunk,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.HttpMessage.write_eof(self)
aiohttp.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.HttpParser.parse_headers(self,lines)
aiohttp.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.HttpPrefixParser(self,allowed_methods=())
aiohttp.HttpRequestParser(self,out,buf)
aiohttp.HttpResponseParser(self,out,buf)
aiohttp.Request(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.Request._add_default_headers(self)
aiohttp.Response(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.Response._add_default_headers(self)
aiohttp.Response.calc_reason(status)
aiohttp.filter_pipe(filter,filter2,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.DeflateBuffer(self,out,encoding)
aiohttp.protocol.DeflateBuffer.__init__(self,out,encoding)
aiohttp.protocol.DeflateBuffer.feed_data(self,chunk)
aiohttp.protocol.DeflateBuffer.feed_eof(self)
aiohttp.protocol.HttpMessage(self,transport,version,close)
aiohttp.protocol.HttpMessage.__init__(self,transport,version,close)
aiohttp.protocol.HttpMessage._add_default_headers(self)
aiohttp.protocol.HttpMessage._write_chunked_payload(self)
aiohttp.protocol.HttpMessage._write_eof_payload(self)
aiohttp.protocol.HttpMessage._write_length_payload(self,length)
aiohttp.protocol.HttpMessage.add_chunking_filter(self,chunk_size=16*1024,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.add_compression_filter(self,encoding='deflate',*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.add_header(self,name,value)
aiohttp.protocol.HttpMessage.add_headers(self,*headers)
aiohttp.protocol.HttpMessage.enable_chunked_encoding(self)
aiohttp.protocol.HttpMessage.force_close(self)
aiohttp.protocol.HttpMessage.is_headers_sent(self)
aiohttp.protocol.HttpMessage.keep_alive(self)
aiohttp.protocol.HttpMessage.send_headers(self)
aiohttp.protocol.HttpMessage.write(self,chunk,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.HttpMessage.write_eof(self)
aiohttp.protocol.HttpParser(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.__init__(self,max_line_size=8190,max_headers=32768,max_field_size=8190)
aiohttp.protocol.HttpParser.parse_headers(self,lines)
aiohttp.protocol.HttpPayloadParser(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.__init__(self,message,length=None,compression=True,readall=False,response_with_body=True)
aiohttp.protocol.HttpPayloadParser.parse_chunked_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_eof_payload(self,out,buf)
aiohttp.protocol.HttpPayloadParser.parse_length_payload(self,out,buf,length=0)
aiohttp.protocol.HttpPrefixParser(self,allowed_methods=())
aiohttp.protocol.HttpPrefixParser.__init__(self,allowed_methods=())
aiohttp.protocol.HttpRequestParser(self,out,buf)
aiohttp.protocol.HttpRequestParser.__call__(self,out,buf)
aiohttp.protocol.HttpResponseParser(self,out,buf)
aiohttp.protocol.HttpResponseParser.__call__(self,out,buf)
aiohttp.protocol.Request(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.protocol.Request.__init__(self,transport,method,path,http_version=HttpVersion11,close=False)
aiohttp.protocol.Request._add_default_headers(self)
aiohttp.protocol.Response(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.protocol.Response.__init__(self,transport,status,http_version=HttpVersion11,close=False,reason=None)
aiohttp.protocol.Response._add_default_headers(self)
aiohttp.protocol.Response.calc_reason(status)
aiohttp.protocol.filter_pipe(filter,filter2,*,EOF_MARKER=EOF_MARKER,EOL_MARKER=EOL_MARKER)
aiohttp.protocol.wrap_payload_filter(func)
aiohttp.wrap_payload_filter(func)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/errors.py----------------------------------------
A:aiohttp.errors.line->repr(line)
aiohttp.BadHttpMessage(self,message,*,headers=None)
aiohttp.BadStatusLine(self,line='')
aiohttp.ClientConnectionError(ClientError)
aiohttp.ClientDisconnectedError(DisconnectedError)
aiohttp.ClientError(Exception)
aiohttp.ClientHttpProcessingError(ClientError)
aiohttp.ClientOSError(ClientConnectionError,OSError)
aiohttp.ClientRequestError(ClientHttpProcessingError)
aiohttp.ClientResponseError(ClientHttpProcessingError)
aiohttp.ClientTimeoutError(ClientConnectionError,TimeoutError)
aiohttp.ContentEncodingError(BadHttpMessage)
aiohttp.DisconnectedError(Exception)
aiohttp.HttpBadRequest(BadHttpMessage)
aiohttp.HttpMethodNotAllowed(HttpProcessingError)
aiohttp.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.HttpProxyError(HttpProcessingError)
aiohttp.InvalidHeader(self,hdr)
aiohttp.LineLimitExceededParserError(self,msg,limit)
aiohttp.LineTooLong(self,line,limit='Unknown')
aiohttp.ParserError(Exception)
aiohttp.ProxyConnectionError(ClientConnectionError)
aiohttp.ServerDisconnectedError(DisconnectedError)
aiohttp.TransferEncodingError(BadHttpMessage)
aiohttp.WSClientDisconnectedError(self,code=None,message=None)
aiohttp.WSClientDisconnectedError.code(self)
aiohttp.WSClientDisconnectedError.message(self)
aiohttp.errors.BadHttpMessage(self,message,*,headers=None)
aiohttp.errors.BadHttpMessage.__init__(self,message,*,headers=None)
aiohttp.errors.BadStatusLine(self,line='')
aiohttp.errors.BadStatusLine.__init__(self,line='')
aiohttp.errors.ClientConnectionError(ClientError)
aiohttp.errors.ClientDisconnectedError(DisconnectedError)
aiohttp.errors.ClientError(Exception)
aiohttp.errors.ClientHttpProcessingError(ClientError)
aiohttp.errors.ClientOSError(ClientConnectionError,OSError)
aiohttp.errors.ClientRequestError(ClientHttpProcessingError)
aiohttp.errors.ClientResponseError(ClientHttpProcessingError)
aiohttp.errors.ClientTimeoutError(ClientConnectionError,TimeoutError)
aiohttp.errors.ContentEncodingError(BadHttpMessage)
aiohttp.errors.DisconnectedError(Exception)
aiohttp.errors.HttpBadRequest(BadHttpMessage)
aiohttp.errors.HttpMethodNotAllowed(HttpProcessingError)
aiohttp.errors.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.errors.HttpProcessingError.__init__(self,*,code=None,message='',headers=None)
aiohttp.errors.HttpProxyError(HttpProcessingError)
aiohttp.errors.InvalidHeader(self,hdr)
aiohttp.errors.InvalidHeader.__init__(self,hdr)
aiohttp.errors.LineLimitExceededParserError(self,msg,limit)
aiohttp.errors.LineLimitExceededParserError.__init__(self,msg,limit)
aiohttp.errors.LineTooLong(self,line,limit='Unknown')
aiohttp.errors.LineTooLong.__init__(self,line,limit='Unknown')
aiohttp.errors.ParserError(Exception)
aiohttp.errors.ProxyConnectionError(ClientConnectionError)
aiohttp.errors.ServerDisconnectedError(DisconnectedError)
aiohttp.errors.TransferEncodingError(BadHttpMessage)
aiohttp.errors.WSClientDisconnectedError(self,code=None,message=None)
aiohttp.errors.WSClientDisconnectedError.__init__(self,code=None,message=None)
aiohttp.errors.WSClientDisconnectedError.code(self)
aiohttp.errors.WSClientDisconnectedError.message(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/multidict.py----------------------------------------
A:aiohttp.multidict._marker->object()
A:aiohttp.multidict.val->val.upper().upper()
A:aiohttp.multidict.nv->other.get(k, _marker)
A:aiohttp.multidict.body->', '.join(("'{}': {!r}".format(k, v) for (k, v) in self.items()))
A:aiohttp.multidict.items->arg.items()
A:aiohttp.multidict.key->key.upper().upper()
aiohttp._Base
aiohttp._Base.__contains__(self,key)
aiohttp._Base.__eq__(self,other)
aiohttp._Base.__getitem__(self,key)
aiohttp._Base.__iter__(self)
aiohttp._Base.__len__(self)
aiohttp._Base.__repr__(self)
aiohttp._Base.get(self,key,default=None)
aiohttp._Base.getall(self,key,default=_marker)
aiohttp._Base.getone(self,key,default=_marker)
aiohttp._Base.items(self)
aiohttp._Base.keys(self)
aiohttp._Base.values(self)
aiohttp._CIBase(_Base)
aiohttp._CIBase.__contains__(self,key)
aiohttp._CIBase.__getitem__(self,key)
aiohttp._CIBase.get(self,key,default=None)
aiohttp._CIBase.getall(self,key,default=_marker)
aiohttp._CIBase.getone(self,key,default=_marker)
aiohttp._CIMultiDict(_CIBase,_MultiDict)
aiohttp._CIMultiDict.__delitem__(self,key)
aiohttp._CIMultiDict.__setitem__(self,key,value)
aiohttp._CIMultiDict._replace(self,key,value)
aiohttp._CIMultiDict.add(self,key,value)
aiohttp._CIMultiDict.setdefault(self,key,default=None)
aiohttp._CIMultiDictProxy(self,arg)
aiohttp._CIMultiDictProxy.copy(self)
aiohttp._ItemsView(_ViewBase,abc.ItemsView)
aiohttp._ItemsView.__contains__(self,item)
aiohttp._ItemsView.__iter__(self)
aiohttp._KeysView(_ViewBase,abc.KeysView)
aiohttp._KeysView.__contains__(self,key)
aiohttp._KeysView.__iter__(self)
aiohttp._MultiDict(self,*args,**kwargs)
aiohttp._MultiDict.__delitem__(self,key)
aiohttp._MultiDict.__setitem__(self,key,value)
aiohttp._MultiDict._extend(self,args,kwargs,name,method)
aiohttp._MultiDict._replace(self,key,value)
aiohttp._MultiDict.add(self,key,value)
aiohttp._MultiDict.clear(self)
aiohttp._MultiDict.copy(self)
aiohttp._MultiDict.extend(self,*args,**kwargs)
aiohttp._MultiDict.pop(self,key,default=_marker)
aiohttp._MultiDict.popitem(self)
aiohttp._MultiDict.setdefault(self,key,default=None)
aiohttp._MultiDict.update(self,*args,**kwargs)
aiohttp._MultiDictProxy(self,arg)
aiohttp._MultiDictProxy.copy(self)
aiohttp._ValuesView(_ViewBase,abc.ValuesView)
aiohttp._ValuesView.__contains__(self,value)
aiohttp._ValuesView.__iter__(self)
aiohttp._ViewBase(self,items)
aiohttp._ViewBase.__len__(self)
aiohttp._upstr(cls,val='',encoding=sys.getdefaultencoding(),errors='strict')
aiohttp._upstr.upper(self)
aiohttp.multidict._Base
aiohttp.multidict._Base.__contains__(self,key)
aiohttp.multidict._Base.__eq__(self,other)
aiohttp.multidict._Base.__getitem__(self,key)
aiohttp.multidict._Base.__iter__(self)
aiohttp.multidict._Base.__len__(self)
aiohttp.multidict._Base.__repr__(self)
aiohttp.multidict._Base.get(self,key,default=None)
aiohttp.multidict._Base.getall(self,key,default=_marker)
aiohttp.multidict._Base.getone(self,key,default=_marker)
aiohttp.multidict._Base.items(self)
aiohttp.multidict._Base.keys(self)
aiohttp.multidict._Base.values(self)
aiohttp.multidict._CIBase(_Base)
aiohttp.multidict._CIBase.__contains__(self,key)
aiohttp.multidict._CIBase.__getitem__(self,key)
aiohttp.multidict._CIBase.get(self,key,default=None)
aiohttp.multidict._CIBase.getall(self,key,default=_marker)
aiohttp.multidict._CIBase.getone(self,key,default=_marker)
aiohttp.multidict._CIMultiDict(_CIBase,_MultiDict)
aiohttp.multidict._CIMultiDict.__delitem__(self,key)
aiohttp.multidict._CIMultiDict.__setitem__(self,key,value)
aiohttp.multidict._CIMultiDict._replace(self,key,value)
aiohttp.multidict._CIMultiDict.add(self,key,value)
aiohttp.multidict._CIMultiDict.setdefault(self,key,default=None)
aiohttp.multidict._CIMultiDictProxy(self,arg)
aiohttp.multidict._CIMultiDictProxy.__init__(self,arg)
aiohttp.multidict._CIMultiDictProxy.copy(self)
aiohttp.multidict._ItemsView(_ViewBase,abc.ItemsView)
aiohttp.multidict._ItemsView.__contains__(self,item)
aiohttp.multidict._ItemsView.__iter__(self)
aiohttp.multidict._KeysView(_ViewBase,abc.KeysView)
aiohttp.multidict._KeysView.__contains__(self,key)
aiohttp.multidict._KeysView.__iter__(self)
aiohttp.multidict._MultiDict(self,*args,**kwargs)
aiohttp.multidict._MultiDict.__delitem__(self,key)
aiohttp.multidict._MultiDict.__init__(self,*args,**kwargs)
aiohttp.multidict._MultiDict.__setitem__(self,key,value)
aiohttp.multidict._MultiDict._extend(self,args,kwargs,name,method)
aiohttp.multidict._MultiDict._replace(self,key,value)
aiohttp.multidict._MultiDict.add(self,key,value)
aiohttp.multidict._MultiDict.clear(self)
aiohttp.multidict._MultiDict.copy(self)
aiohttp.multidict._MultiDict.extend(self,*args,**kwargs)
aiohttp.multidict._MultiDict.pop(self,key,default=_marker)
aiohttp.multidict._MultiDict.popitem(self)
aiohttp.multidict._MultiDict.setdefault(self,key,default=None)
aiohttp.multidict._MultiDict.update(self,*args,**kwargs)
aiohttp.multidict._MultiDictProxy(self,arg)
aiohttp.multidict._MultiDictProxy.__init__(self,arg)
aiohttp.multidict._MultiDictProxy.copy(self)
aiohttp.multidict._ValuesView(_ViewBase,abc.ValuesView)
aiohttp.multidict._ValuesView.__contains__(self,value)
aiohttp.multidict._ValuesView.__iter__(self)
aiohttp.multidict._ViewBase(self,items)
aiohttp.multidict._ViewBase.__init__(self,items)
aiohttp.multidict._ViewBase.__len__(self)
aiohttp.multidict._upstr(cls,val='',encoding=sys.getdefaultencoding(),errors='strict')
aiohttp.multidict._upstr.__new__(cls,val='',encoding=sys.getdefaultencoding(),errors='strict')
aiohttp.multidict._upstr.upper(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/wsgi.py----------------------------------------
A:aiohttp.wsgi.SCRIPT_NAME->os.environ.get('SCRIPT_NAME', '')
A:aiohttp.wsgi.uri_parts->urlsplit(message.path)
A:aiohttp.wsgi.forward->self.transport.get_extra_info('addr', '127.0.0.1')
A:aiohttp.wsgi.remote->aiohttp.helpers.parse_remote_addr(forward)
A:aiohttp.wsgi.server->aiohttp.server.split(':').split(':')
A:aiohttp.wsgi.environ['SERVER_PORT']->str(server[1])
A:aiohttp.wsgi.now->time.time()
A:aiohttp.wsgi.wsgiinput->io.BytesIO()
A:aiohttp.wsgi.environ->self.create_wsgi_environ(message, payload)
A:aiohttp.wsgi.response->self.create_wsgi_response(message)
A:aiohttp.wsgi.riter->self.wsgi(environ, response.start_response)
A:aiohttp.wsgi.data->self.fobj.read(self.chunk_size)
A:aiohttp.wsgi.status_code->int(status.split(' ', 1)[0])
A:aiohttp.wsgi.respself.response->aiohttp.Response(self.writer, status_code, self.message.version, self.message.should_close)
aiohttp.wsgi.FileWrapper(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__init__(self,fobj,chunk_size=8192)
aiohttp.wsgi.FileWrapper.__iter__(self)
aiohttp.wsgi.FileWrapper.__next__(self)
aiohttp.wsgi.WSGIServerHttpProtocol(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.__init__(self,app,readpayload=False,is_ssl=False,*args,**kw)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_environ(self,message,payload)
aiohttp.wsgi.WSGIServerHttpProtocol.create_wsgi_response(self,message)
aiohttp.wsgi.WSGIServerHttpProtocol.handle_request(self,message,payload)
aiohttp.wsgi.WsgiResponse(self,writer,message)
aiohttp.wsgi.WsgiResponse.__init__(self,writer,message)
aiohttp.wsgi.WsgiResponse.start_response(self,status,headers,exc_info=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/websocket.py----------------------------------------
A:aiohttp.websocket.Message->collections.namedtuple('Message', ['tp', 'data', 'extra'])
A:aiohttp.websocket.(first_byte, second_byte)->struct.unpack('!BB', data)
A:aiohttp.websocket.payload->bytes((b ^ mask[i % 4] for (i, b) in enumerate(payload)))
A:aiohttp.websocket.header->bytes([128 | opcode])
A:aiohttp.websocket.msg_length->len(message)
A:aiohttp.websocket.message->message.encode('utf-8').encode('utf-8')
A:aiohttp.websocket.version->headers.get('SEC-WEBSOCKET-VERSION')
A:aiohttp.websocket.key->headers.get('SEC-WEBSOCKET-KEY')
aiohttp.websocket.WebSocketError(Exception)
aiohttp.websocket.WebSocketParser(out,buf)
aiohttp.websocket.WebSocketWriter(self,writer)
aiohttp.websocket.WebSocketWriter.__init__(self,writer)
aiohttp.websocket.WebSocketWriter._send_frame(self,message,opcode)
aiohttp.websocket.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp.websocket.WebSocketWriter.ping(self,message=b'')
aiohttp.websocket.WebSocketWriter.pong(self,message=b'')
aiohttp.websocket.WebSocketWriter.send(self,message,binary=False)
aiohttp.websocket.do_handshake(method,headers,transport,protocols=())
aiohttp.websocket.parse_frame(buf)
aiohttp.websocket.parse_message(buf)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/connector.py----------------------------------------
A:aiohttp.connector.self._wr->weakref.ref(self, lambda wr, f=self._do_close, conns=self._conns: f(conns))
A:aiohttp.connector.loop->asyncio.get_event_loop()
A:aiohttp.connector.self._factory->functools.partial(aiohttp.StreamProtocol, loop=loop, disconnect_error=ServerDisconnectedError)
A:aiohttp.connector.self.cookies->http.cookies.SimpleCookie()
A:aiohttp.connector.now->time.time()
A:aiohttp.connector.self._cleanup_handle->self._loop.call_later(self._keepalive_timeout, self._cleanup)
A:aiohttp.connector.cookies->cookies.items().items()
A:aiohttp.connector.(transport, proto)->self._get(key)
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector.(transport, proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector._SSL_OP_NO_COMPRESSION->getattr(ssl, 'OP_NO_COMPRESSION', 0)
A:aiohttp.connector._SSH_HAS_CREATE_DEFAULT_CONTEXT->hasattr(ssl, 'create_default_context')
A:aiohttp.connector.sslcontext->ssl.SSLContext(ssl.PROTOCOL_SSLv23)
A:aiohttp.connector.hinfo->hosts.pop()
A:aiohttp.connector.proxy_req->ClientRequest('GET', self._proxy, headers={'Host': req.host}, auth=self._proxy_auth, loop=self._loop)
A:aiohttp.connector.req.path->'{scheme}://{host}{path}'.format(scheme=req.scheme, host=req.netloc, path=req.path)
A:aiohttp.connector.proxy_req.path->'{}:{}'.format(req.host, req.port)
A:aiohttp.connector.conn->Connection(self, key, proxy_req, transport, proto, self._loop)
A:aiohttp.connector.proxy_resp->ClientRequest('GET', self._proxy, headers={'Host': req.host}, auth=self._proxy_auth, loop=self._loop).send(conn.writer, conn.reader)
A:aiohttp.connector.rawsock->transport.get_extra_info('socket', default=None)
aiohttp.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None)
aiohttp.BaseConnector._cleanup(self)
aiohttp.BaseConnector._create_connection(self,req,*args,**kwargs)
aiohttp.BaseConnector._do_close(conns)
aiohttp.BaseConnector._get(self,key)
aiohttp.BaseConnector._release(self,key,req,transport,protocol,*,should_close=False)
aiohttp.BaseConnector._start_cleanup_task(self)
aiohttp.BaseConnector.close(self)
aiohttp.BaseConnector.connect(self,req)
aiohttp.BaseConnector.update_cookies(self,cookies)
aiohttp.Connection(self,connector,key,request,transport,protocol,loop)
aiohttp.Connection.close(self)
aiohttp.Connection.loop(self)
aiohttp.Connection.release(self)
aiohttp.Connection.share_cookies(self,cookies)
aiohttp.ProxyConnector(self,proxy,*args,proxy_auth=None,**kwargs)
aiohttp.ProxyConnector._create_connection(self,req,**kwargs)
aiohttp.ProxyConnector.proxy(self)
aiohttp.TCPConnector(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,ssl_context=None,**kwargs)
aiohttp.TCPConnector._create_connection(self,req,**kwargs)
aiohttp.TCPConnector._resolve_host(self,host,port)
aiohttp.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.TCPConnector.family(self)
aiohttp.TCPConnector.resolve(self)
aiohttp.TCPConnector.resolved_hosts(self)
aiohttp.TCPConnector.ssl_context(self)
aiohttp.TCPConnector.verify_ssl(self)
aiohttp.UnixConnector(self,path,*args,**kw)
aiohttp.UnixConnector._create_connection(self,req,**kwargs)
aiohttp.UnixConnector.path(self)
aiohttp.connector.BaseConnector(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None)
aiohttp.connector.BaseConnector.__init__(self,*,conn_timeout=None,keepalive_timeout=30,share_cookies=False,force_close=False,loop=None)
aiohttp.connector.BaseConnector._cleanup(self)
aiohttp.connector.BaseConnector._create_connection(self,req,*args,**kwargs)
aiohttp.connector.BaseConnector._do_close(conns)
aiohttp.connector.BaseConnector._get(self,key)
aiohttp.connector.BaseConnector._release(self,key,req,transport,protocol,*,should_close=False)
aiohttp.connector.BaseConnector._start_cleanup_task(self)
aiohttp.connector.BaseConnector.close(self)
aiohttp.connector.BaseConnector.connect(self,req)
aiohttp.connector.BaseConnector.update_cookies(self,cookies)
aiohttp.connector.Connection(self,connector,key,request,transport,protocol,loop)
aiohttp.connector.Connection.__init__(self,connector,key,request,transport,protocol,loop)
aiohttp.connector.Connection.close(self)
aiohttp.connector.Connection.loop(self)
aiohttp.connector.Connection.release(self)
aiohttp.connector.Connection.share_cookies(self,cookies)
aiohttp.connector.ProxyConnector(self,proxy,*args,proxy_auth=None,**kwargs)
aiohttp.connector.ProxyConnector.__init__(self,proxy,*args,proxy_auth=None,**kwargs)
aiohttp.connector.ProxyConnector._create_connection(self,req,**kwargs)
aiohttp.connector.ProxyConnector.proxy(self)
aiohttp.connector.TCPConnector(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,ssl_context=None,**kwargs)
aiohttp.connector.TCPConnector.__init__(self,*args,verify_ssl=True,resolve=False,family=socket.AF_INET,ssl_context=None,**kwargs)
aiohttp.connector.TCPConnector._create_connection(self,req,**kwargs)
aiohttp.connector.TCPConnector._resolve_host(self,host,port)
aiohttp.connector.TCPConnector.clear_resolved_hosts(self,host=None,port=None)
aiohttp.connector.TCPConnector.family(self)
aiohttp.connector.TCPConnector.resolve(self)
aiohttp.connector.TCPConnector.resolved_hosts(self)
aiohttp.connector.TCPConnector.ssl_context(self)
aiohttp.connector.TCPConnector.verify_ssl(self)
aiohttp.connector.UnixConnector(self,path,*args,**kw)
aiohttp.connector.UnixConnector.__init__(self,path,*args,**kw)
aiohttp.connector.UnixConnector._create_connection(self,req,**kwargs)
aiohttp.connector.UnixConnector.path(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/streams.py----------------------------------------
A:aiohttp.streams.loop->asyncio.get_event_loop()
A:aiohttp.streams.self._buffer->collections.deque()
A:aiohttp.streams.self._eof_waiter->asyncio.Future(loop=self._loop)
A:aiohttp.streams.line->bytearray()
A:aiohttp.streams.ichar->self._buffer.find(b'\n')
A:aiohttp.streams.self._waiter->asyncio.Future(loop=self._loop)
A:aiohttp.streams.stack->traceback.format_stack()
A:aiohttp.streams.data->bytes(self._buffer)
A:aiohttp.streams.partial->b''.join(blocks)
aiohttp.ChunksQueue(DataQueue)
aiohttp.ChunksQueue.read(self)
aiohttp.DataQueue(self,*,loop=None)
aiohttp.DataQueue.at_eof(self)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.is_eof(self)
aiohttp.DataQueue.read(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EofStream(Exception)
aiohttp.FlowControlChunksQueue(FlowControlDataQueue,ChunksQueue)
aiohttp.FlowControlDataQueue(self,stream,*,loop=None)
aiohttp.FlowControlDataQueue.read(self)
aiohttp.FlowControlStreamReader(self,stream,*args,**kwargs)
aiohttp.FlowControlStreamReader.read(self,n=-1)
aiohttp.FlowControlStreamReader.readany(self)
aiohttp.FlowControlStreamReader.readexactly(self,n)
aiohttp.FlowControlStreamReader.readline(self)
aiohttp.StreamReader(self,limit=DEFAULT_LIMIT,loop=None)
aiohttp.StreamReader._create_waiter(self,func_name)
aiohttp.StreamReader.at_eof(self)
aiohttp.StreamReader.exception(self)
aiohttp.StreamReader.feed_data(self,data)
aiohttp.StreamReader.feed_eof(self)
aiohttp.StreamReader.is_eof(self)
aiohttp.StreamReader.read(self,n=-1)
aiohttp.StreamReader.read_nowait(self)
aiohttp.StreamReader.readany(self)
aiohttp.StreamReader.readexactly(self,n)
aiohttp.StreamReader.readline(self)
aiohttp.StreamReader.set_exception(self,exc)
aiohttp.StreamReader.wait_eof(self)
aiohttp.streams.ChunksQueue(DataQueue)
aiohttp.streams.ChunksQueue.read(self)
aiohttp.streams.DataQueue(self,*,loop=None)
aiohttp.streams.DataQueue.__init__(self,*,loop=None)
aiohttp.streams.DataQueue.at_eof(self)
aiohttp.streams.DataQueue.exception(self)
aiohttp.streams.DataQueue.feed_data(self,data)
aiohttp.streams.DataQueue.feed_eof(self)
aiohttp.streams.DataQueue.is_eof(self)
aiohttp.streams.DataQueue.read(self)
aiohttp.streams.DataQueue.set_exception(self,exc)
aiohttp.streams.EofStream(Exception)
aiohttp.streams.FlowControlChunksQueue(FlowControlDataQueue,ChunksQueue)
aiohttp.streams.FlowControlDataQueue(self,stream,*,loop=None)
aiohttp.streams.FlowControlDataQueue.__init__(self,stream,*,loop=None)
aiohttp.streams.FlowControlDataQueue.read(self)
aiohttp.streams.FlowControlStreamReader(self,stream,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader.__init__(self,stream,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader.read(self,n=-1)
aiohttp.streams.FlowControlStreamReader.readany(self)
aiohttp.streams.FlowControlStreamReader.readexactly(self,n)
aiohttp.streams.FlowControlStreamReader.readline(self)
aiohttp.streams.StreamReader(self,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.StreamReader.__init__(self,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.StreamReader._create_waiter(self,func_name)
aiohttp.streams.StreamReader.at_eof(self)
aiohttp.streams.StreamReader.exception(self)
aiohttp.streams.StreamReader.feed_data(self,data)
aiohttp.streams.StreamReader.feed_eof(self)
aiohttp.streams.StreamReader.is_eof(self)
aiohttp.streams.StreamReader.read(self,n=-1)
aiohttp.streams.StreamReader.read_nowait(self)
aiohttp.streams.StreamReader.readany(self)
aiohttp.streams.StreamReader.readexactly(self,n)
aiohttp.streams.StreamReader.readline(self)
aiohttp.streams.StreamReader.set_exception(self,exc)
aiohttp.streams.StreamReader.wait_eof(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/helpers.py----------------------------------------
A:aiohttp.helpers.creds->('%s:%s' % (self.login, self.password)).encode(self.encoding)
A:aiohttp.helpers.fields->list(fields.items())
A:aiohttp.helpers.type_options->multidict.MultiDict({'name': name})
A:aiohttp.helpers.filename->guess_filename(value, name)
A:aiohttp.helpers.conv->supported_tranfer_encoding.get(content_transfer_encoding)
A:aiohttp.helpers.value->io.BytesIO(value)
A:aiohttp.helpers.to_add->list(fields)
A:aiohttp.helpers.rec->list(fields).pop(0)
A:aiohttp.helpers.k->guess_filename(rec, 'unknown')
A:aiohttp.helpers.data->urllib.parse.urlencode(data, doseq=True)
A:aiohttp.helpers.boundary->self._boundary.encode('latin1')
A:aiohttp.helpers.opts->'; '.join(('{0[0]}="{0[1]}"'.format(i) for i in type_options.items()))
A:aiohttp.helpers.chunk->io.BytesIO(value).read(chunk_size)
A:aiohttp.helpers.parts->mimetype.split(';')
A:aiohttp.helpers.params->dict(params)
A:aiohttp.helpers.fulltype->parts[0].strip().lower()
A:aiohttp.helpers.name->getattr(obj, 'name', None)
A:aiohttp.helpers.forward->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip()
A:aiohttp.helpers.host->forward.rsplit(',', 1)[-1].strip().rsplit(',', 1)[-1].strip().split(':')[0].lower()
A:aiohttp.helpers.r->'{} {} HTTP/{}.{}'.format(message.method, message.path, message.version[0], message.version[1])
A:aiohttp.helpers.remote_addr->parse_remote_addr(transport.get_extra_info('addr', '127.0.0.1'))
A:aiohttp.helpers.self[key]->io.BytesIO(value).replace('"', '\\"')
A:aiohttp.helpers.val->self.wrapped(inst)
aiohttp.BasicAuth(cls,login,password='',encoding='latin1')
aiohttp.BasicAuth.encode(self)
aiohttp.FormData(self,fields=())
aiohttp.FormData._gen_form_data(self,encoding='utf-8',chunk_size=8192)
aiohttp.FormData._gen_form_urlencoded(self,encoding)
aiohttp.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.FormData.add_fields(self,*fields)
aiohttp.FormData.content_type(self)
aiohttp.FormData.is_multipart(self)
aiohttp.SafeAtoms(self,atoms,i_headers,o_headers)
aiohttp.SafeAtoms.__getitem__(self,k)
aiohttp.atoms(message,environ,response,transport,request_time)
aiohttp.guess_filename(obj,default=None)
aiohttp.helpers.BasicAuth(cls,login,password='',encoding='latin1')
aiohttp.helpers.BasicAuth.__new__(cls,login,password='',encoding='latin1')
aiohttp.helpers.BasicAuth.encode(self)
aiohttp.helpers.FormData(self,fields=())
aiohttp.helpers.FormData.__init__(self,fields=())
aiohttp.helpers.FormData._gen_form_data(self,encoding='utf-8',chunk_size=8192)
aiohttp.helpers.FormData._gen_form_urlencoded(self,encoding)
aiohttp.helpers.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.helpers.FormData.add_fields(self,*fields)
aiohttp.helpers.FormData.content_type(self)
aiohttp.helpers.FormData.is_multipart(self)
aiohttp.helpers.SafeAtoms(self,atoms,i_headers,o_headers)
aiohttp.helpers.SafeAtoms.__getitem__(self,k)
aiohttp.helpers.SafeAtoms.__init__(self,atoms,i_headers,o_headers)
aiohttp.helpers.atoms(message,environ,response,transport,request_time)
aiohttp.helpers.guess_filename(obj,default=None)
aiohttp.helpers.parse_mimetype(mimetype)
aiohttp.helpers.parse_remote_addr(forward)
aiohttp.helpers.reify(self,wrapped)
aiohttp.helpers.reify.__get__(self,inst,objtype=None)
aiohttp.helpers.reify.__init__(self,wrapped)
aiohttp.helpers.str_to_bytes(s,encoding='utf-8')
aiohttp.parse_mimetype(mimetype)
aiohttp.parse_remote_addr(forward)
aiohttp.reify(self,wrapped)
aiohttp.reify.__get__(self,inst,objtype=None)
aiohttp.str_to_bytes(s,encoding='utf-8')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/web.py----------------------------------------
A:aiohttp.web.sentinel->object()
A:aiohttp.web.(self._content_type, self._content_dict)->cgi.parse_header(raw)
A:aiohttp.web.raw->self.headers.get(hdrs.COOKIE, '')
A:aiohttp.web.l->self.headers.get(_CONTENT_LENGTH)
A:aiohttp.web.FileField->collections.namedtuple('Field', 'name filename file content_type')
A:aiohttp.web.self._host->message.headers.get(_HOST)
A:aiohttp.web.res->cb(self, *args, **kwargs)
A:aiohttp.web.self._path->unquote(res.path)
A:aiohttp.web.self._headers->CIMultiDict()
A:aiohttp.web.parsed->http.cookies.SimpleCookie(raw)
A:aiohttp.web.self._cookies->http.cookies.SimpleCookie()
A:aiohttp.web.body->bytearray()
A:aiohttp.web.self._read_bytes->bytes(body)
A:aiohttp.web.self._post->MultiDictProxy(out)
A:aiohttp.web.fs->cgi.FieldStorage(fp=io.BytesIO(body), environ=environ, keep_blank_values=True, encoding=content_charset)
A:aiohttp.web.out->MultiDict()
A:aiohttp.web.transfer_encoding->field.headers.get('Content-Transfer-Encoding', None)
A:aiohttp.web.ff->FileField(field.name, field.filename, field.file, field.type)
A:aiohttp.web.value->int(value)
A:aiohttp.web.self._status->int(status)
A:aiohttp.web.reason->protocol.Response.calc_reason(status)
A:aiohttp.web.old->self._cookies.get(name)
A:aiohttp.web.self.headers[hdrs.CONTENT_LENGTH]->str(value)
A:aiohttp.web.self._content_type->str(value)
A:aiohttp.web.self._content_dict['charset']->str(value).lower()
A:aiohttp.web.params->'; '.join(('%s=%s' % i for i in self._content_dict.items()))
A:aiohttp.web.resp_impl->super().start(request)
A:aiohttp.web.resp_implself._resp_impl->ResponseImpl(request._writer, self._status, request.version, not keep_alive, self._reason)
A:aiohttp.web.headers->self.headers.items()
A:aiohttp.web.self.body->text.encode(self.charset)
A:aiohttp.web.self.content_length->len(body)
A:aiohttp.web.(status, headers, parser, writer, protocol)->do_handshake(request.method, request.headers, request.transport, self._protocols)
A:aiohttp.web.self._reader->Request(app, message, payload, self.transport, self.reader, self.writer)._reader.set_parser(parser)
A:aiohttp.web.self._closing_fut->asyncio.Future(loop=self._loop)
A:aiohttp.web.(_, _, _, _, protocol)->do_handshake(request.method, request.headers, request.transport, self._protocols)
A:aiohttp.web.exc->WSClientDisconnectedError(msg.data, msg.extra)
A:aiohttp.web.self.text->'{}: {}'.format(self.status, self.reason)
A:aiohttp.web.allow->','.join(sorted(allowed_methods))
A:aiohttp.web.self.method->method.upper().upper()
A:aiohttp.web.match->self.DYN_WITH_RE.match(part)
A:aiohttp.web.url->self._formatter.format_map(parts)
A:aiohttp.web.self._prefix_len->len(self._prefix)
A:aiohttp.web.resp->StreamResponse()
A:aiohttp.web.filepath->os.path.join(self._directory, filename)
A:aiohttp.web.chunk->f.read(self.limit)
A:aiohttp.web.DYN->re.compile('^\\{(?P<var>[a-zA-Z][_a-zA-Z0-9]*)\\}$')
A:aiohttp.web.DYN_WITH_RE->re.compile('^\\{(?P<var>[a-zA-Z][_a-zA-Z0-9]*):(?P<re>.+)\\}$')
A:aiohttp.web.PLAIN->re.compile('^' + GOOD + '$')
A:aiohttp.web.allowed_methods->set()
A:aiohttp.web.match_dict->StaticRoute(name, prefix, path).match(path)
A:aiohttp.web.handler->asyncio.coroutine(handler)
A:aiohttp.web.method->method.upper().upper()
A:aiohttp.web.route->StaticRoute(name, prefix, path)
A:aiohttp.web.compiled->re.compile('^' + pattern + '$')
A:aiohttp.web.path->os.path.abspath(path)
A:aiohttp.web.now->self._loop.time()
A:aiohttp.web.request->Request(app, message, payload, self.transport, self.reader, self.writer)
A:aiohttp.web.resp_msg->StreamResponse().start(request)
A:aiohttp.web.loop->asyncio.get_event_loop()
A:aiohttp.web.router->UrlDispatcher()
A:aiohttp.web.self._middlewares->tuple(middlewares)
aiohttp.web.Application(self,*,logger=web_logger,loop=None,router=None,handler_factory=RequestHandlerFactory,middlewares=())
aiohttp.web.Application.__init__(self,*,logger=web_logger,loop=None,router=None,handler_factory=RequestHandlerFactory,middlewares=())
aiohttp.web.Application.finish(self)
aiohttp.web.Application.loop(self)
aiohttp.web.Application.make_handler(self,**kwargs)
aiohttp.web.Application.middlewares(self)
aiohttp.web.Application.register_on_finish(self,func,*args,**kwargs)
aiohttp.web.Application.router(self)
aiohttp.web.DynamicRoute(self,method,handler,name,pattern,formatter)
aiohttp.web.DynamicRoute.__init__(self,method,handler,name,pattern,formatter)
aiohttp.web.DynamicRoute.__repr__(self)
aiohttp.web.DynamicRoute.match(self,path)
aiohttp.web.DynamicRoute.url(self,*,parts,query=None)
aiohttp.web.HTTPAccepted(HTTPSuccessful)
aiohttp.web.HTTPBadGateway(HTTPServerError)
aiohttp.web.HTTPBadRequest(HTTPClientError)
aiohttp.web.HTTPClientError(HTTPError)
aiohttp.web.HTTPConflict(HTTPClientError)
aiohttp.web.HTTPCreated(HTTPSuccessful)
aiohttp.web.HTTPError(HTTPException)
aiohttp.web.HTTPException(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web.HTTPException.__init__(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web.HTTPExpectationFailed(HTTPClientError)
aiohttp.web.HTTPForbidden(HTTPClientError)
aiohttp.web.HTTPFound(_HTTPMove)
aiohttp.web.HTTPGatewayTimeout(HTTPServerError)
aiohttp.web.HTTPGone(HTTPClientError)
aiohttp.web.HTTPInternalServerError(HTTPServerError)
aiohttp.web.HTTPLengthRequired(HTTPClientError)
aiohttp.web.HTTPMethodNotAllowed(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web.HTTPMethodNotAllowed.__init__(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web.HTTPMovedPermanently(_HTTPMove)
aiohttp.web.HTTPMultipleChoices(_HTTPMove)
aiohttp.web.HTTPNoContent(HTTPSuccessful)
aiohttp.web.HTTPNonAuthoritativeInformation(HTTPSuccessful)
aiohttp.web.HTTPNotAcceptable(HTTPClientError)
aiohttp.web.HTTPNotFound(HTTPClientError)
aiohttp.web.HTTPNotImplemented(HTTPServerError)
aiohttp.web.HTTPNotModified(HTTPRedirection)
aiohttp.web.HTTPOk(HTTPSuccessful)
aiohttp.web.HTTPPartialContent(HTTPSuccessful)
aiohttp.web.HTTPPaymentRequired(HTTPClientError)
aiohttp.web.HTTPPreconditionFailed(HTTPClientError)
aiohttp.web.HTTPProxyAuthenticationRequired(HTTPClientError)
aiohttp.web.HTTPRedirection(HTTPException)
aiohttp.web.HTTPRequestEntityTooLarge(HTTPClientError)
aiohttp.web.HTTPRequestRangeNotSatisfiable(HTTPClientError)
aiohttp.web.HTTPRequestTimeout(HTTPClientError)
aiohttp.web.HTTPRequestURITooLong(HTTPClientError)
aiohttp.web.HTTPResetContent(HTTPSuccessful)
aiohttp.web.HTTPSeeOther(_HTTPMove)
aiohttp.web.HTTPServerError(HTTPError)
aiohttp.web.HTTPServiceUnavailable(HTTPServerError)
aiohttp.web.HTTPSuccessful(HTTPException)
aiohttp.web.HTTPTemporaryRedirect(_HTTPMove)
aiohttp.web.HTTPUnauthorized(HTTPClientError)
aiohttp.web.HTTPUnsupportedMediaType(HTTPClientError)
aiohttp.web.HTTPUseProxy(_HTTPMove)
aiohttp.web.HTTPVersionNotSupported(HTTPServerError)
aiohttp.web.HeadersMixin
aiohttp.web.HeadersMixin._parse_content_type(self,raw)
aiohttp.web.HeadersMixin.charset(self,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web.HeadersMixin.content_length(self,_CONTENT_LENGTH=hdrs.CONTENT_LENGTH)
aiohttp.web.HeadersMixin.content_type(self,_CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web.PlainRoute(self,method,handler,name,path)
aiohttp.web.PlainRoute.__init__(self,method,handler,name,path)
aiohttp.web.PlainRoute.__repr__(self)
aiohttp.web.PlainRoute.match(self,path)
aiohttp.web.PlainRoute.url(self,*,query=None)
aiohttp.web.Request(self,app,message,payload,transport,reader,writer,*,_HOST=hdrs.HOST)
aiohttp.web.Request.GET(self)
aiohttp.web.Request.POST(self)
aiohttp.web.Request.__init__(self,app,message,payload,transport,reader,writer,*,_HOST=hdrs.HOST)
aiohttp.web.Request.app(self)
aiohttp.web.Request.content(self)
aiohttp.web.Request.cookies(self)
aiohttp.web.Request.headers(self)
aiohttp.web.Request.host(self)
aiohttp.web.Request.json(self,*,loader=json.loads)
aiohttp.web.Request.keep_alive(self)
aiohttp.web.Request.match_info(self)
aiohttp.web.Request.method(self)
aiohttp.web.Request.path(self)
aiohttp.web.Request.path_qs(self)
aiohttp.web.Request.payload(self)
aiohttp.web.Request.post(self)
aiohttp.web.Request.query_string(self)
aiohttp.web.Request.read(self)
aiohttp.web.Request.release(self)
aiohttp.web.Request.text(self)
aiohttp.web.Request.transport(self)
aiohttp.web.Request.version(self)
aiohttp.web.RequestHandler(self,manager,app,router,**kwargs)
aiohttp.web.RequestHandler.__init__(self,manager,app,router,**kwargs)
aiohttp.web.RequestHandler.connection_lost(self,exc)
aiohttp.web.RequestHandler.connection_made(self,transport)
aiohttp.web.RequestHandler.handle_request(self,message,payload)
aiohttp.web.RequestHandlerFactory(self,app,router,*,handler=RequestHandler,loop=None,**kwargs)
aiohttp.web.RequestHandlerFactory.__init__(self,app,router,*,handler=RequestHandler,loop=None,**kwargs)
aiohttp.web.RequestHandlerFactory.connection_lost(self,handler,exc=None)
aiohttp.web.RequestHandlerFactory.connection_made(self,handler,transport)
aiohttp.web.RequestHandlerFactory.connections(self)
aiohttp.web.RequestHandlerFactory.finish_connections(self,timeout=None)
aiohttp.web.Response(self,*,body=None,status=200,reason=None,headers=None,text=None,content_type=None)
aiohttp.web.Response.__init__(self,*,body=None,status=200,reason=None,headers=None,text=None,content_type=None)
aiohttp.web.Response.body(self)
aiohttp.web.Response.body(self,body)
aiohttp.web.Response.text(self)
aiohttp.web.Response.text(self,text)
aiohttp.web.Response.write_eof(self)
aiohttp.web.Route(self,method,handler,name)
aiohttp.web.Route.__init__(self,method,handler,name)
aiohttp.web.Route._append_query(url,query)
aiohttp.web.Route.handler(self)
aiohttp.web.Route.match(self,path)
aiohttp.web.Route.method(self)
aiohttp.web.Route.name(self)
aiohttp.web.Route.url(self,**kwargs)
aiohttp.web.StaticRoute(self,name,prefix,directory)
aiohttp.web.StaticRoute.__init__(self,name,prefix,directory)
aiohttp.web.StaticRoute.__repr__(self)
aiohttp.web.StaticRoute.handle(self,request)
aiohttp.web.StaticRoute.match(self,path)
aiohttp.web.StaticRoute.url(self,*,filename,query=None)
aiohttp.web.StreamResponse(self,*,status=200,reason=None)
aiohttp.web.StreamResponse.__init__(self,*,status=200,reason=None)
aiohttp.web.StreamResponse._copy_cookies(self)
aiohttp.web.StreamResponse._generate_content_type_header(self,CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web.StreamResponse._start_pre_check(self,request)
aiohttp.web.StreamResponse.charset(self)
aiohttp.web.StreamResponse.charset(self,value)
aiohttp.web.StreamResponse.chunked(self)
aiohttp.web.StreamResponse.compression(self)
aiohttp.web.StreamResponse.content_length(self)
aiohttp.web.StreamResponse.content_length(self,value)
aiohttp.web.StreamResponse.content_type(self)
aiohttp.web.StreamResponse.content_type(self,value)
aiohttp.web.StreamResponse.cookies(self)
aiohttp.web.StreamResponse.del_cookie(self,name,*,domain=None,path=None)
aiohttp.web.StreamResponse.drain(self)
aiohttp.web.StreamResponse.enable_chunked_encoding(self,chunk_size=None)
aiohttp.web.StreamResponse.enable_compression(self,force=False)
aiohttp.web.StreamResponse.force_close(self)
aiohttp.web.StreamResponse.headers(self)
aiohttp.web.StreamResponse.keep_alive(self)
aiohttp.web.StreamResponse.reason(self)
aiohttp.web.StreamResponse.set_cookie(self,name,value,*,expires=None,domain=None,max_age=None,path=None,secure=None,httponly=None,version=None)
aiohttp.web.StreamResponse.set_status(self,status,reason=None)
aiohttp.web.StreamResponse.start(self,request)
aiohttp.web.StreamResponse.started(self)
aiohttp.web.StreamResponse.status(self)
aiohttp.web.StreamResponse.write(self,data)
aiohttp.web.StreamResponse.write_eof(self)
aiohttp.web.UrlDispatcher(self)
aiohttp.web.UrlDispatcher.__contains__(self,name)
aiohttp.web.UrlDispatcher.__getitem__(self,name)
aiohttp.web.UrlDispatcher.__init__(self)
aiohttp.web.UrlDispatcher.__iter__(self)
aiohttp.web.UrlDispatcher.__len__(self)
aiohttp.web.UrlDispatcher._register_endpoint(self,route)
aiohttp.web.UrlDispatcher.add_route(self,method,path,handler,*,name=None)
aiohttp.web.UrlDispatcher.add_static(self,prefix,path,*,name=None)
aiohttp.web.UrlDispatcher.resolve(self,request)
aiohttp.web.UrlMappingMatchInfo(self,match_dict,route)
aiohttp.web.UrlMappingMatchInfo.__init__(self,match_dict,route)
aiohttp.web.UrlMappingMatchInfo.handler(self)
aiohttp.web.UrlMappingMatchInfo.route(self)
aiohttp.web.WebSocketResponse(self,*,protocols=())
aiohttp.web.WebSocketResponse.__init__(self,*,protocols=())
aiohttp.web.WebSocketResponse.can_start(self,request)
aiohttp.web.WebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.web.WebSocketResponse.closing(self)
aiohttp.web.WebSocketResponse.ping(self,message='b')
aiohttp.web.WebSocketResponse.pong(self,message='b')
aiohttp.web.WebSocketResponse.protocol(self)
aiohttp.web.WebSocketResponse.receive_bytes(self)
aiohttp.web.WebSocketResponse.receive_msg(self)
aiohttp.web.WebSocketResponse.receive_str(self)
aiohttp.web.WebSocketResponse.send_bytes(self,data)
aiohttp.web.WebSocketResponse.send_str(self,data)
aiohttp.web.WebSocketResponse.start(self,request)
aiohttp.web.WebSocketResponse.wait_closed(self)
aiohttp.web.WebSocketResponse.write(self,data)
aiohttp.web.WebSocketResponse.write_eof(self)
aiohttp.web._HTTPMove(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web._HTTPMove.__init__(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web._MethodNotAllowedMatchInfo(self,method,allowed_methods)
aiohttp.web._MethodNotAllowedMatchInfo.__init__(self,method,allowed_methods)
aiohttp.web._MethodNotAllowedMatchInfo._not_allowed(self,request)
aiohttp.web._MethodNotAllowedMatchInfo.handler(self)
aiohttp.web._MethodNotAllowedMatchInfo.route(self)
aiohttp.web._NotFoundMatchInfo(self)
aiohttp.web._NotFoundMatchInfo.__init__(self)
aiohttp.web._NotFoundMatchInfo._not_found(self,request)
aiohttp.web._NotFoundMatchInfo.handler(self)
aiohttp.web._NotFoundMatchInfo.route(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/parsers.py----------------------------------------
A:aiohttp.parsers.output->FlowControlDataQueue(self, loop=self._loop)
A:aiohttp.parsers.p->parser(output, self._buffer)
A:aiohttp.parsers.self.reader->StreamParser(loop=loop, eof_exc_class=disconnect_error, **kwargs)
A:aiohttp.parsers.self.writer->asyncio.streams.StreamWriter(transport, self, self.reader, self._loop)
A:aiohttp.parsers.waiter->asyncio.Future(loop=self._loop)
A:aiohttp.parsers.self._writer->self._feed_data()
A:aiohttp.parsers.length->len(self)
A:aiohttp.parsers.data->bytes(self[:size])
A:aiohttp.parsers.stop_len->len(stop)
A:aiohttp.parsers.pos->self.find(stop)
A:aiohttp.parsers.stop_line->self.find(stop)
aiohttp.ChunksParser(self,size=8192)
aiohttp.LinesParser(self,limit=DEFAULT_LIMIT)
aiohttp.ParserBuffer(self,*args,limit=BUF_LIMIT)
aiohttp.ParserBuffer._feed_data(self)
aiohttp.ParserBuffer.exception(self)
aiohttp.ParserBuffer.feed_data(self,data)
aiohttp.ParserBuffer.read(self,size)
aiohttp.ParserBuffer.readsome(self,size=None)
aiohttp.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.ParserBuffer.set_exception(self,exc)
aiohttp.ParserBuffer.skip(self,size)
aiohttp.ParserBuffer.skipuntil(self,stop)
aiohttp.ParserBuffer.wait(self,size)
aiohttp.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.StreamParser(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.StreamParser.at_eof(self)
aiohttp.StreamParser.exception(self)
aiohttp.StreamParser.feed_data(self,data)
aiohttp.StreamParser.feed_eof(self)
aiohttp.StreamParser.output(self)
aiohttp.StreamParser.pause_stream(self)
aiohttp.StreamParser.resume_stream(self)
aiohttp.StreamParser.set_exception(self,exc)
aiohttp.StreamParser.set_parser(self,parser,output=None)
aiohttp.StreamParser.set_transport(self,transport)
aiohttp.StreamParser.unset_parser(self)
aiohttp.StreamProtocol(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.StreamProtocol._make_drain_waiter(self)
aiohttp.StreamProtocol.connection_lost(self,exc)
aiohttp.StreamProtocol.connection_made(self,transport)
aiohttp.StreamProtocol.data_received(self,data)
aiohttp.StreamProtocol.eof_received(self)
aiohttp.StreamProtocol.is_connected(self)
aiohttp.parsers.ChunksParser(self,size=8192)
aiohttp.parsers.ChunksParser.__init__(self,size=8192)
aiohttp.parsers.LinesParser(self,limit=DEFAULT_LIMIT)
aiohttp.parsers.LinesParser.__init__(self,limit=DEFAULT_LIMIT)
aiohttp.parsers.ParserBuffer(self,*args,limit=BUF_LIMIT)
aiohttp.parsers.ParserBuffer.__init__(self,*args,limit=BUF_LIMIT)
aiohttp.parsers.ParserBuffer._feed_data(self)
aiohttp.parsers.ParserBuffer.exception(self)
aiohttp.parsers.ParserBuffer.feed_data(self,data)
aiohttp.parsers.ParserBuffer.read(self,size)
aiohttp.parsers.ParserBuffer.readsome(self,size=None)
aiohttp.parsers.ParserBuffer.readuntil(self,stop,limit=None)
aiohttp.parsers.ParserBuffer.set_exception(self,exc)
aiohttp.parsers.ParserBuffer.skip(self,size)
aiohttp.parsers.ParserBuffer.skipuntil(self,stop)
aiohttp.parsers.ParserBuffer.wait(self,size)
aiohttp.parsers.ParserBuffer.waituntil(self,stop,limit=None)
aiohttp.parsers.StreamParser(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.parsers.StreamParser.__init__(self,*,loop=None,buf=None,paused=True,limit=DEFAULT_LIMIT,eof_exc_class=RuntimeError)
aiohttp.parsers.StreamParser.at_eof(self)
aiohttp.parsers.StreamParser.exception(self)
aiohttp.parsers.StreamParser.feed_data(self,data)
aiohttp.parsers.StreamParser.feed_eof(self)
aiohttp.parsers.StreamParser.output(self)
aiohttp.parsers.StreamParser.pause_stream(self)
aiohttp.parsers.StreamParser.resume_stream(self)
aiohttp.parsers.StreamParser.set_exception(self,exc)
aiohttp.parsers.StreamParser.set_parser(self,parser,output=None)
aiohttp.parsers.StreamParser.set_transport(self,transport)
aiohttp.parsers.StreamParser.unset_parser(self)
aiohttp.parsers.StreamProtocol(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.parsers.StreamProtocol.__init__(self,*,loop=None,disconnect_error=RuntimeError,**kwargs)
aiohttp.parsers.StreamProtocol._make_drain_waiter(self)
aiohttp.parsers.StreamProtocol.connection_lost(self,exc)
aiohttp.parsers.StreamProtocol.connection_made(self,transport)
aiohttp.parsers.StreamProtocol.data_received(self,data)
aiohttp.parsers.StreamProtocol.eof_received(self)
aiohttp.parsers.StreamProtocol.is_connected(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp0.14.2/hdrs.py----------------------------------------
A:aiohttp.hdrs.ACCEPT->upstr('ACCEPT')
A:aiohttp.hdrs.ACCEPT_CHARSET->upstr('ACCEPT-CHARSET')
A:aiohttp.hdrs.ACCEPT_ENCODING->upstr('ACCEPT-ENCODING')
A:aiohttp.hdrs.ACCEPT_LANGUAGE->upstr('ACCEPT-LANGUAGE')
A:aiohttp.hdrs.AGE->upstr('AGE')
A:aiohttp.hdrs.ALLOW->upstr('ALLOW')
A:aiohttp.hdrs.AUTHORIZATION->upstr('AUTHORIZATION')
A:aiohttp.hdrs.CACHE_CONTROL->upstr('CACHE-CONTROL')
A:aiohttp.hdrs.CONNECTION->upstr('CONNECTION')
A:aiohttp.hdrs.CONTENT_ENCODING->upstr('CONTENT-ENCODING')
A:aiohttp.hdrs.CONTENT_LANGUAGE->upstr('CONTENT-LANGUAGE')
A:aiohttp.hdrs.CONTENT_LENGTH->upstr('CONTENT-LENGTH')
A:aiohttp.hdrs.CONTENT_LOCATION->upstr('CONTENT-LOCATION')
A:aiohttp.hdrs.CONTENT_MD5->upstr('CONTENT-MD5')
A:aiohttp.hdrs.CONTENT_RANGE->upstr('CONTENT-RANGE')
A:aiohttp.hdrs.CONTENT_TRANSFER_ENCODING->upstr('CONTENT-TRANSFER-ENCODING')
A:aiohttp.hdrs.CONTENT_TYPE->upstr('CONTENT-TYPE')
A:aiohttp.hdrs.COOKIE->upstr('COOKIE')
A:aiohttp.hdrs.DATE->upstr('DATE')
A:aiohttp.hdrs.DESTINATION->upstr('DESTINATION')
A:aiohttp.hdrs.DIGEST->upstr('DIGEST')
A:aiohttp.hdrs.ETAG->upstr('ETAG')
A:aiohttp.hdrs.EXPECT->upstr('EXPECT')
A:aiohttp.hdrs.EXPIRES->upstr('EXPIRES')
A:aiohttp.hdrs.FROM->upstr('FROM')
A:aiohttp.hdrs.HOST->upstr('HOST')
A:aiohttp.hdrs.IF_MATCH->upstr('IF-MATCH')
A:aiohttp.hdrs.IF_MODIFIED_SINCE->upstr('IF-MODIFIED-SINCE')
A:aiohttp.hdrs.IF_NONE_MATCH->upstr('IF-NONE-MATCH')
A:aiohttp.hdrs.IF_RANGE->upstr('IF-RANGE')
A:aiohttp.hdrs.IF_UNMODIFIED_SINCE->upstr('IF-UNMODIFIED-SINCE')
A:aiohttp.hdrs.KEEP_ALIVE->upstr('KEEP-ALIVE')
A:aiohttp.hdrs.LAST_EVENT_ID->upstr('LAST-EVENT-ID')
A:aiohttp.hdrs.LAST_MODIFIED->upstr('LAST-MODIFIED')
A:aiohttp.hdrs.LINK->upstr('LINK')
A:aiohttp.hdrs.LOCATION->upstr('LOCATION')
A:aiohttp.hdrs.MAX_FORWARDS->upstr('MAX-FORWARDS')
A:aiohttp.hdrs.PRAGMA->upstr('PRAGMA')
A:aiohttp.hdrs.PROXY_AUTHENTICATE->upstr('PROXY_AUTHENTICATE')
A:aiohttp.hdrs.PROXY_AUTHORIZATION->upstr('PROXY-AUTHORIZATION')
A:aiohttp.hdrs.RANGE->upstr('RANGE')
A:aiohttp.hdrs.REFERER->upstr('REFERER')
A:aiohttp.hdrs.RETRY_AFTER->upstr('RETRY-AFTER')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY1->upstr('SEC-WEBSOCKET-KEY1')
A:aiohttp.hdrs.SERVER->upstr('SERVER')
A:aiohttp.hdrs.SET_COOKIE->upstr('SET-COOKIE')
A:aiohttp.hdrs.TE->upstr('TE')
A:aiohttp.hdrs.TRAILER->upstr('TRAILER')
A:aiohttp.hdrs.TRANSFER_ENCODING->upstr('TRANSFER-ENCODING')
A:aiohttp.hdrs.UPGRADE->upstr('UPGRADE')
A:aiohttp.hdrs.URI->upstr('URI')
A:aiohttp.hdrs.USER_AGENT->upstr('USER-AGENT')
A:aiohttp.hdrs.VARY->upstr('VARY')
A:aiohttp.hdrs.VIA->upstr('VIA')
A:aiohttp.hdrs.WANT_DIGEST->upstr('WANT-DIGEST')
A:aiohttp.hdrs.WARNING->upstr('WARNING')
A:aiohttp.hdrs.WWW_AUTHENTICATE->upstr('WWW-AUTHENTICATE')

