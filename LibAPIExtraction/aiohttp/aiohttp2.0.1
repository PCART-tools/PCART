
----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/abc.py----------------------------------------
aiohttp.abc.AbstractCookieJar(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.__init__(self,*,loop=None)
aiohttp.abc.AbstractCookieJar.clear(self)
aiohttp.abc.AbstractCookieJar.filter_cookies(self,request_url)
aiohttp.abc.AbstractCookieJar.update_cookies(self,cookies,response_url=None)
aiohttp.abc.AbstractMatchInfo(ABC)
aiohttp.abc.AbstractMatchInfo.add_app(self,app)
aiohttp.abc.AbstractMatchInfo.apps(self)
aiohttp.abc.AbstractMatchInfo.expect_handler(self,request)
aiohttp.abc.AbstractMatchInfo.freeze(self)
aiohttp.abc.AbstractMatchInfo.get_info(self)
aiohttp.abc.AbstractMatchInfo.handler(self,request)
aiohttp.abc.AbstractMatchInfo.http_exception(self)
aiohttp.abc.AbstractPayloadWriter(ABC)
aiohttp.abc.AbstractPayloadWriter.drain(self)
aiohttp.abc.AbstractPayloadWriter.write(self,chunk)
aiohttp.abc.AbstractPayloadWriter.write_eof(self,chunk=b'')
aiohttp.abc.AbstractResolver(ABC)
aiohttp.abc.AbstractResolver.close(self)
aiohttp.abc.AbstractResolver.resolve(self,hostname)
aiohttp.abc.AbstractRouter(self)
aiohttp.abc.AbstractRouter.__init__(self)
aiohttp.abc.AbstractRouter.freeze(self)
aiohttp.abc.AbstractRouter.frozen(self)
aiohttp.abc.AbstractRouter.post_init(self,app)
aiohttp.abc.AbstractRouter.resolve(self,request)
aiohttp.abc.AbstractView(self,request)
aiohttp.abc.AbstractView.__init__(self,request)
aiohttp.abc.AbstractView.__iter__(self)
aiohttp.abc.AbstractView.request(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/http_websocket.py----------------------------------------
A:aiohttp.http_websocket._WSMessageBase->collections.namedtuple('_WSMessageBase', ['type', 'data', 'extra'])
A:aiohttp.http_websocket.WS_CLOSED_MESSAGE->WSMessage(WSMsgType.CLOSED, None, None)
A:aiohttp.http_websocket.WS_CLOSING_MESSAGE->WSMessage(WSMsgType.CLOSING, None, None)
A:aiohttp.http_websocket.datalen->len(data)
A:aiohttp.http_websocket.data->b''.join(self._partial)
A:aiohttp.http_websocket.mask->mask.to_bytes(4, 'big').to_bytes(4, 'big')
A:aiohttp.http_websocket.self._frame_payload->bytearray()
A:aiohttp.http_websocket.close_message->payload[2:].decode('utf-8')
A:aiohttp.http_websocket.msg->WSMessage(WSMsgType.CLOSE, 0, '')
A:aiohttp.http_websocket.text->b''.join(self._partial).decode('utf-8')
A:aiohttp.http_websocket.buf_length->len(buf)
A:aiohttp.http_websocket.payload->_websocket_mask(self._frame_mask, payload)
A:aiohttp.http_websocket.msg_length->len(message)
A:aiohttp.http_websocket.header->PACK_LEN3(128 | opcode, 127 | mask_bit, msg_length)
A:aiohttp.http_websocket.message->message.encode('utf-8').encode('utf-8')
A:aiohttp.http_websocket.version->headers.get(hdrs.SEC_WEBSOCKET_VERSION, '')
A:aiohttp.http_websocket.key->headers.get(hdrs.SEC_WEBSOCKET_KEY)
aiohttp.http_websocket.WSCloseCode(IntEnum)
aiohttp.http_websocket.WSMessage(_WSMessageBase)
aiohttp.http_websocket.WSMessage.json(self,*,loads=json.loads)
aiohttp.http_websocket.WSMessage.tp(self)
aiohttp.http_websocket.WSMsgType(IntEnum)
aiohttp.http_websocket.WSParserState(IntEnum)
aiohttp.http_websocket.WebSocketError(self,code,message)
aiohttp.http_websocket.WebSocketError.__init__(self,code,message)
aiohttp.http_websocket.WebSocketReader(self,queue)
aiohttp.http_websocket.WebSocketReader.__init__(self,queue)
aiohttp.http_websocket.WebSocketReader._feed_data(self,data)
aiohttp.http_websocket.WebSocketReader.feed_data(self,data)
aiohttp.http_websocket.WebSocketReader.feed_eof(self)
aiohttp.http_websocket.WebSocketReader.parse_frame(self,buf,continuation=False,EMPTY=b'')
aiohttp.http_websocket.WebSocketWriter(self,stream,*,use_mask=False,limit=DEFAULT_LIMIT,random=random.Random())
aiohttp.http_websocket.WebSocketWriter.__init__(self,stream,*,use_mask=False,limit=DEFAULT_LIMIT,random=random.Random())
aiohttp.http_websocket.WebSocketWriter._send_frame(self,message,opcode)
aiohttp.http_websocket.WebSocketWriter.close(self,code=1000,message=b'')
aiohttp.http_websocket.WebSocketWriter.ping(self,message=b'')
aiohttp.http_websocket.WebSocketWriter.pong(self,message=b'')
aiohttp.http_websocket.WebSocketWriter.send(self,message,binary=False)
aiohttp.http_websocket._websocket_mask_python(mask,data)
aiohttp.http_websocket.do_handshake(method,headers,stream,protocols=(),write_buffer_size=DEFAULT_LIMIT)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_server.py----------------------------------------
A:aiohttp.web_server.loop->asyncio.get_event_loop()
A:aiohttp.web_server.self.time_service->TimeService(self._loop)
aiohttp.web_server.Server(self,handler,*,request_factory=None,loop=None,**kwargs)
aiohttp.web_server.Server.__init__(self,handler,*,request_factory=None,loop=None,**kwargs)
aiohttp.web_server.Server._make_request(self,message,payload,protocol,writer,task)
aiohttp.web_server.Server.connection_lost(self,handler,exc=None)
aiohttp.web_server.Server.connection_made(self,handler,transport)
aiohttp.web_server.Server.connections(self)
aiohttp.web_server.Server.shutdown(self,timeout=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/worker.py----------------------------------------
A:aiohttp.worker.self.loop->asyncio.new_event_loop()
A:aiohttp.worker.self._runner->ensure_future(self._run(), loop=self.loop)
A:aiohttp.worker.handler->self.make_handler(self.wsgi)
A:aiohttp.worker.pid->os.getpid()
A:aiohttp.worker.cnt->sum((handler.requests_count for handler in self.servers.values()))
A:aiohttp.worker.self._notify_waiterwaiter->asyncio.Future(loop=self.loop)
A:aiohttp.worker.self._closing->ensure_future(self.close(), loop=self.loop)
A:aiohttp.worker.ctx->ssl.SSLContext(cfg.ssl_version)
aiohttp.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.GunicornUVLoopWebWorker.init_process(self)
aiohttp.GunicornWebWorker(self,*args,**kw)
aiohttp.GunicornWebWorker._create_ssl_context(cfg)
aiohttp.GunicornWebWorker._get_valid_log_format(self,source_format)
aiohttp.GunicornWebWorker._notify_waiter_done(self)
aiohttp.GunicornWebWorker._run(self)
aiohttp.GunicornWebWorker._wait_next_notify(self)
aiohttp.GunicornWebWorker.close(self)
aiohttp.GunicornWebWorker.handle_abort(self,sig,frame)
aiohttp.GunicornWebWorker.handle_quit(self,sig,frame)
aiohttp.GunicornWebWorker.init_process(self)
aiohttp.GunicornWebWorker.init_signals(self)
aiohttp.GunicornWebWorker.make_handler(self,app)
aiohttp.GunicornWebWorker.run(self)
aiohttp.worker.GunicornUVLoopWebWorker(GunicornWebWorker)
aiohttp.worker.GunicornUVLoopWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker(self,*args,**kw)
aiohttp.worker.GunicornWebWorker.__init__(self,*args,**kw)
aiohttp.worker.GunicornWebWorker._create_ssl_context(cfg)
aiohttp.worker.GunicornWebWorker._get_valid_log_format(self,source_format)
aiohttp.worker.GunicornWebWorker._notify_waiter_done(self)
aiohttp.worker.GunicornWebWorker._run(self)
aiohttp.worker.GunicornWebWorker._wait_next_notify(self)
aiohttp.worker.GunicornWebWorker.close(self)
aiohttp.worker.GunicornWebWorker.handle_abort(self,sig,frame)
aiohttp.worker.GunicornWebWorker.handle_quit(self,sig,frame)
aiohttp.worker.GunicornWebWorker.init_process(self)
aiohttp.worker.GunicornWebWorker.init_signals(self)
aiohttp.worker.GunicornWebWorker.make_handler(self,app)
aiohttp.worker.GunicornWebWorker.run(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_fileresponse.py----------------------------------------
A:aiohttp.web_fileresponse.NOSENDFILE->bool(os.environ.get('AIOHTTP_NOSENDFILE'))
A:aiohttp.web_fileresponse.n->os.sendfile(out_fd, in_fd, offset, count)
A:aiohttp.web_fileresponse.self._drain_waiter->create_future(self.loop)
A:aiohttp.web_fileresponse.out_socket->self._transport.get_extra_info('socket').dup()
A:aiohttp.web_fileresponse.out_fd->self._transport.get_extra_info('socket').dup().fileno()
A:aiohttp.web_fileresponse.in_fd->fobj.fileno()
A:aiohttp.web_fileresponse.offset->fobj.tell()
A:aiohttp.web_fileresponse.fut->create_future(loop)
A:aiohttp.web_fileresponse.path->pathlib.Path(path)
A:aiohttp.web_fileresponse.writer->request._protocol.writer.replace(request._writer, SendfilePayloadWriter)
A:aiohttp.web_fileresponse.chunk->fobj.read(min(chunk_size, count))
A:aiohttp.web_fileresponse.gzip_path->filepath.with_name(filepath.name + '.gz')
A:aiohttp.web_fileresponse.st->filepath.stat()
A:aiohttp.web_fileresponse.(ct, encoding)->mimetypes.guess_type(str(filepath))
aiohttp.web_fileresponse.FileResponse(self,path,chunk_size=256*1024,*args,**kwargs)
aiohttp.web_fileresponse.FileResponse.__init__(self,path,chunk_size=256*1024,*args,**kwargs)
aiohttp.web_fileresponse.FileResponse._sendfile_fallback(self,request,fobj,count)
aiohttp.web_fileresponse.FileResponse._sendfile_system(self,request,fobj,count)
aiohttp.web_fileresponse.FileResponse.prepare(self,request)
aiohttp.web_fileresponse.SendfilePayloadWriter(PayloadWriter)
aiohttp.web_fileresponse.SendfilePayloadWriter._sendfile_cb(self,fut,out_fd,in_fd,offset,count,loop,registered)
aiohttp.web_fileresponse.SendfilePayloadWriter._write(self,chunk)
aiohttp.web_fileresponse.SendfilePayloadWriter.sendfile(self,fobj,count)
aiohttp.web_fileresponse.SendfilePayloadWriter.set_transport(self,transport)
aiohttp.web_fileresponse.SendfilePayloadWriter.write_eof(self,chunk=b'')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/payload_streamer.py----------------------------------------
A:aiohttp.payload_streamer.self.coro->asyncio.coroutine(coro)
aiohttp.StreamPayload(self,value,*args,**kwargs)
aiohttp.StreamPayload.write(self,writer)
aiohttp.StreamWrapperPayload(Payload)
aiohttp.StreamWrapperPayload.write(self,writer)
aiohttp._stream_wrapper(self,coro,args,kwargs)
aiohttp.payload_streamer.StreamPayload(self,value,*args,**kwargs)
aiohttp.payload_streamer.StreamPayload.__init__(self,value,*args,**kwargs)
aiohttp.payload_streamer.StreamPayload.write(self,writer)
aiohttp.payload_streamer.StreamWrapperPayload(Payload)
aiohttp.payload_streamer.StreamWrapperPayload.write(self,writer)
aiohttp.payload_streamer._stream_wrapper(self,coro,args,kwargs)
aiohttp.payload_streamer._stream_wrapper.__init__(self,coro,args,kwargs)
aiohttp.payload_streamer.streamer(self,coro)
aiohttp.payload_streamer.streamer.__init__(self,coro)
aiohttp.streamer(self,coro)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/multipart.py----------------------------------------
A:aiohttp.multipart.(disptype, *parts)->header.split(';')
A:aiohttp.multipart.(key, value)->item.split('=', 1)
A:aiohttp.multipart.key->key.lower().strip().lower().strip()
A:aiohttp.multipart.value->''.join(parts)
A:aiohttp.multipart.(encoding, _, value)->''.join(parts).split("'", 2)
A:aiohttp.multipart.fnparams->sorted(((key, value) for (key, value) in params.items() if key.startswith(name_suf)))
A:aiohttp.multipart.(_, tail)->key.lower().strip().lower().strip().split('*', 1)
A:aiohttp.multipart.__aiter__->asyncio.coroutine(__aiter__)
A:aiohttp.multipart.length->self.headers.get(CONTENT_LENGTH, None)
A:aiohttp.multipart.self._unread->deque()
A:aiohttp.multipart.data->urlencode(obj, doseq=True)
A:aiohttp.multipart.chunk_size->min(size, self._length - self._read_bytes)
A:aiohttp.multipart.idx->window.find(sub, max(0, len(self._prev_chunk) - len(sub)))
A:aiohttp.multipart.line->self._unread.popleft()
A:aiohttp.multipart.sline->self._unread.popleft().rstrip(b'\r\n')
A:aiohttp.multipart.encoding->payload.headers.get(CONTENT_ENCODING, '').lower()
A:aiohttp.multipart.ctype->'multipart/{}; boundary="{}"'.format(subtype, boundary)
A:aiohttp.multipart.(*_, params)->parse_mimetype(ctype)
A:aiohttp.multipart.(_, params)->parse_content_disposition(self.headers.get(CONTENT_DISPOSITION))
A:aiohttp.multipart.self._boundary->boundary.encode('us-ascii')
A:aiohttp.multipart.obj->list(obj.items())
A:aiohttp.multipart.(mtype, *_)->parse_mimetype(ctype)
A:aiohttp.multipart.(mtype, *_, params)->parse_mimetype(self.headers[CONTENT_TYPE])
A:aiohttp.multipart.chunk->self._compress.compress(chunk)
A:aiohttp.multipart.parser->HttpParser()
A:aiohttp.multipart.(headers, *_)->HttpParser().parse_headers(lines)
A:aiohttp.multipart.self._headers->CIMultiDict()
A:aiohttp.multipart.headers->CIMultiDict()
A:aiohttp.multipart.te_encoding->payload.headers.get(CONTENT_TRANSFER_ENCODING, '').lower()
A:aiohttp.multipart.payload.headers[CONTENT_LENGTH]->str(size)
A:aiohttp.multipart.w->MultipartPayloadWriter(writer)
A:aiohttp.multipart.self._encoding_buffer->bytearray()
A:aiohttp.multipart.self._compress->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.multipart.(div, mod)->divmod(len(buffer), 3)
A:aiohttp.multipart.enc_chunk->base64.b64encode(enc_chunk)
aiohttp.BadContentDispositionHeader(RuntimeWarning)
aiohttp.BadContentDispositionParam(RuntimeWarning)
aiohttp.BodyPartReader(self,boundary,headers,content)
aiohttp.BodyPartReader._decode_content(self,data)
aiohttp.BodyPartReader._decode_content_transfer(self,data)
aiohttp.BodyPartReader._read_chunk_from_length(self,size)
aiohttp.BodyPartReader._read_chunk_from_stream(self,size)
aiohttp.BodyPartReader.at_eof(self)
aiohttp.BodyPartReader.decode(self,data)
aiohttp.BodyPartReader.filename(self)
aiohttp.BodyPartReader.form(self,*,encoding=None)
aiohttp.BodyPartReader.get_charset(self,default=None)
aiohttp.BodyPartReader.json(self,*,encoding=None)
aiohttp.BodyPartReader.name(self)
aiohttp.BodyPartReader.next(self)
aiohttp.BodyPartReader.read(self,*,decode=False)
aiohttp.BodyPartReader.read_chunk(self,size=chunk_size)
aiohttp.BodyPartReader.readline(self)
aiohttp.BodyPartReader.release(self)
aiohttp.BodyPartReader.text(self,*,encoding=None)
aiohttp.BodyPartReaderPayload(self,value,*args,**kwargs)
aiohttp.BodyPartReaderPayload.write(self,writer)
aiohttp.MultipartPayloadWriter(self,writer)
aiohttp.MultipartPayloadWriter.enable_compression(self,encoding='deflate')
aiohttp.MultipartPayloadWriter.enable_encoding(self,encoding)
aiohttp.MultipartPayloadWriter.write(self,chunk)
aiohttp.MultipartPayloadWriter.write_eof(self)
aiohttp.MultipartReader(self,headers,content)
aiohttp.MultipartReader._get_boundary(self)
aiohttp.MultipartReader._get_part_reader(self,headers)
aiohttp.MultipartReader._maybe_release_last_part(self)
aiohttp.MultipartReader._read_boundary(self)
aiohttp.MultipartReader._read_headers(self)
aiohttp.MultipartReader._read_until_first_boundary(self)
aiohttp.MultipartReader._readline(self)
aiohttp.MultipartReader.at_eof(self)
aiohttp.MultipartReader.fetch_next_part(self)
aiohttp.MultipartReader.from_response(cls,response)
aiohttp.MultipartReader.next(self)
aiohttp.MultipartReader.release(self)
aiohttp.MultipartResponseWrapper(self,resp,stream)
aiohttp.MultipartResponseWrapper.at_eof(self)
aiohttp.MultipartResponseWrapper.next(self)
aiohttp.MultipartResponseWrapper.release(self)
aiohttp.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.MultipartWriter.__enter__(self)
aiohttp.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.MultipartWriter.__iter__(self)
aiohttp.MultipartWriter.__len__(self)
aiohttp.MultipartWriter.append(self,obj,headers=None)
aiohttp.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.MultipartWriter.append_payload(self,payload)
aiohttp.MultipartWriter.boundary(self)
aiohttp.MultipartWriter.size(self)
aiohttp.MultipartWriter.write(self,writer)
aiohttp.content_disposition_filename(params,name='filename')
aiohttp.multipart.BadContentDispositionHeader(RuntimeWarning)
aiohttp.multipart.BadContentDispositionParam(RuntimeWarning)
aiohttp.multipart.BodyPartReader(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader.__init__(self,boundary,headers,content)
aiohttp.multipart.BodyPartReader._decode_content(self,data)
aiohttp.multipart.BodyPartReader._decode_content_transfer(self,data)
aiohttp.multipart.BodyPartReader._read_chunk_from_length(self,size)
aiohttp.multipart.BodyPartReader._read_chunk_from_stream(self,size)
aiohttp.multipart.BodyPartReader.at_eof(self)
aiohttp.multipart.BodyPartReader.decode(self,data)
aiohttp.multipart.BodyPartReader.filename(self)
aiohttp.multipart.BodyPartReader.form(self,*,encoding=None)
aiohttp.multipart.BodyPartReader.get_charset(self,default=None)
aiohttp.multipart.BodyPartReader.json(self,*,encoding=None)
aiohttp.multipart.BodyPartReader.name(self)
aiohttp.multipart.BodyPartReader.next(self)
aiohttp.multipart.BodyPartReader.read(self,*,decode=False)
aiohttp.multipart.BodyPartReader.read_chunk(self,size=chunk_size)
aiohttp.multipart.BodyPartReader.readline(self)
aiohttp.multipart.BodyPartReader.release(self)
aiohttp.multipart.BodyPartReader.text(self,*,encoding=None)
aiohttp.multipart.BodyPartReaderPayload(self,value,*args,**kwargs)
aiohttp.multipart.BodyPartReaderPayload.__init__(self,value,*args,**kwargs)
aiohttp.multipart.BodyPartReaderPayload.write(self,writer)
aiohttp.multipart.MultipartPayloadWriter(self,writer)
aiohttp.multipart.MultipartPayloadWriter.__init__(self,writer)
aiohttp.multipart.MultipartPayloadWriter.enable_compression(self,encoding='deflate')
aiohttp.multipart.MultipartPayloadWriter.enable_encoding(self,encoding)
aiohttp.multipart.MultipartPayloadWriter.write(self,chunk)
aiohttp.multipart.MultipartPayloadWriter.write_eof(self)
aiohttp.multipart.MultipartReader(self,headers,content)
aiohttp.multipart.MultipartReader.__init__(self,headers,content)
aiohttp.multipart.MultipartReader._get_boundary(self)
aiohttp.multipart.MultipartReader._get_part_reader(self,headers)
aiohttp.multipart.MultipartReader._maybe_release_last_part(self)
aiohttp.multipart.MultipartReader._read_boundary(self)
aiohttp.multipart.MultipartReader._read_headers(self)
aiohttp.multipart.MultipartReader._read_until_first_boundary(self)
aiohttp.multipart.MultipartReader._readline(self)
aiohttp.multipart.MultipartReader.at_eof(self)
aiohttp.multipart.MultipartReader.fetch_next_part(self)
aiohttp.multipart.MultipartReader.from_response(cls,response)
aiohttp.multipart.MultipartReader.next(self)
aiohttp.multipart.MultipartReader.release(self)
aiohttp.multipart.MultipartResponseWrapper(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.__init__(self,resp,stream)
aiohttp.multipart.MultipartResponseWrapper.at_eof(self)
aiohttp.multipart.MultipartResponseWrapper.next(self)
aiohttp.multipart.MultipartResponseWrapper.release(self)
aiohttp.multipart.MultipartWriter(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__enter__(self)
aiohttp.multipart.MultipartWriter.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.multipart.MultipartWriter.__init__(self,subtype='mixed',boundary=None)
aiohttp.multipart.MultipartWriter.__iter__(self)
aiohttp.multipart.MultipartWriter.__len__(self)
aiohttp.multipart.MultipartWriter.append(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_form(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_json(self,obj,headers=None)
aiohttp.multipart.MultipartWriter.append_payload(self,payload)
aiohttp.multipart.MultipartWriter.boundary(self)
aiohttp.multipart.MultipartWriter.size(self)
aiohttp.multipart.MultipartWriter.write(self,writer)
aiohttp.multipart.content_disposition_filename(params,name='filename')
aiohttp.multipart.parse_content_disposition(header)
aiohttp.parse_content_disposition(header)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/formdata.py----------------------------------------
A:aiohttp.formdata.self._writer->multipart.MultipartWriter('form-data')
A:aiohttp.formdata.fields->list(fields.items())
A:aiohttp.formdata.type_options->MultiDict({'name': name})
A:aiohttp.formdata.filename->guess_filename(value, name)
A:aiohttp.formdata.to_add->list(fields)
A:aiohttp.formdata.rec->list(fields).pop(0)
A:aiohttp.formdata.k->guess_filename(rec, 'unknown')
A:aiohttp.formdata.part->payload.get_payload(value, headers=headers, encoding=self._charset)
aiohttp.FormData(self,fields=(),quote_fields=True,charset=None)
aiohttp.FormData._gen_form_data(self)
aiohttp.FormData._gen_form_urlencoded(self)
aiohttp.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.FormData.add_fields(self,*fields)
aiohttp.FormData.is_multipart(self)
aiohttp.formdata.FormData(self,fields=(),quote_fields=True,charset=None)
aiohttp.formdata.FormData.__init__(self,fields=(),quote_fields=True,charset=None)
aiohttp.formdata.FormData._gen_form_data(self)
aiohttp.formdata.FormData._gen_form_urlencoded(self)
aiohttp.formdata.FormData.add_field(self,name,value,*,content_type=None,filename=None,content_transfer_encoding=None)
aiohttp.formdata.FormData.add_fields(self,*fields)
aiohttp.formdata.FormData.is_multipart(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/payload.py----------------------------------------
A:aiohttp.payload.self._headers->CIMultiDict()
A:aiohttp.payload.self._headers[hdrs.CONTENT_DISPOSITION]->content_disposition_header(disptype, quote_fields=quote_fields, **params)
A:aiohttp.payload.self._size->len(value)
A:aiohttp.payload.(*_, params)->parse_mimetype(content_type)
A:aiohttp.payload.encoding->params.get('charset', 'utf-8')
A:aiohttp.payload.kwargs['filename']->guess_filename(value)
A:aiohttp.payload.chunk->self._value.read(DEFAULT_LIMIT)
A:aiohttp.payload.PAYLOAD_REGISTRY->PayloadRegistry()
aiohttp.BufferedReaderPayload(IOBasePayload)
aiohttp.BufferedReaderPayload.size(self)
aiohttp.BytesIOPayload(IOBasePayload)
aiohttp.BytesIOPayload.size(self)
aiohttp.BytesPayload(self,value,*args,**kwargs)
aiohttp.BytesPayload.write(self,writer)
aiohttp.DataQueuePayload(Payload)
aiohttp.DataQueuePayload.write(self,writer)
aiohttp.IOBasePayload(self,value,*args,**kwargs)
aiohttp.IOBasePayload.write(self,writer)
aiohttp.JsonPayload(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.LookupError(Exception)
aiohttp.Payload(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None)
aiohttp.Payload.content_type(self)
aiohttp.Payload.encoding(self)
aiohttp.Payload.filename(self)
aiohttp.Payload.headers(self)
aiohttp.Payload.set_content_disposition(self,disptype,quote_fields=True,**params)
aiohttp.Payload.size(self)
aiohttp.Payload.write(self,writer)
aiohttp.PayloadRegistry(self)
aiohttp.PayloadRegistry.get(self,data,*args,**kwargs)
aiohttp.PayloadRegistry.register(self,factory,type)
aiohttp.StreamReaderPayload(Payload)
aiohttp.StreamReaderPayload.write(self,writer)
aiohttp.StringIOPayload(TextIOPayload)
aiohttp.StringIOPayload.size(self)
aiohttp.StringPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.TextIOPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.TextIOPayload.size(self)
aiohttp.TextIOPayload.write(self,writer)
aiohttp.get_payload(data,*args,**kwargs)
aiohttp.payload.BufferedReaderPayload(IOBasePayload)
aiohttp.payload.BufferedReaderPayload.size(self)
aiohttp.payload.BytesIOPayload(IOBasePayload)
aiohttp.payload.BytesIOPayload.size(self)
aiohttp.payload.BytesPayload(self,value,*args,**kwargs)
aiohttp.payload.BytesPayload.__init__(self,value,*args,**kwargs)
aiohttp.payload.BytesPayload.write(self,writer)
aiohttp.payload.DataQueuePayload(Payload)
aiohttp.payload.DataQueuePayload.write(self,writer)
aiohttp.payload.IOBasePayload(self,value,*args,**kwargs)
aiohttp.payload.IOBasePayload.__init__(self,value,*args,**kwargs)
aiohttp.payload.IOBasePayload.write(self,writer)
aiohttp.payload.JsonPayload(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.payload.JsonPayload.__init__(self,value,encoding='utf-8',content_type='application/json',dumps=json.dumps,*args,**kwargs)
aiohttp.payload.LookupError(Exception)
aiohttp.payload.Payload(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None)
aiohttp.payload.Payload.__init__(self,value,*,headers=None,content_type=sentinel,filename=None,encoding=None)
aiohttp.payload.Payload.content_type(self)
aiohttp.payload.Payload.encoding(self)
aiohttp.payload.Payload.filename(self)
aiohttp.payload.Payload.headers(self)
aiohttp.payload.Payload.set_content_disposition(self,disptype,quote_fields=True,**params)
aiohttp.payload.Payload.size(self)
aiohttp.payload.Payload.write(self,writer)
aiohttp.payload.PayloadRegistry(self)
aiohttp.payload.PayloadRegistry.__init__(self)
aiohttp.payload.PayloadRegistry.get(self,data,*args,**kwargs)
aiohttp.payload.PayloadRegistry.register(self,factory,type)
aiohttp.payload.StreamReaderPayload(Payload)
aiohttp.payload.StreamReaderPayload.write(self,writer)
aiohttp.payload.StringIOPayload(TextIOPayload)
aiohttp.payload.StringIOPayload.size(self)
aiohttp.payload.StringPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.StringPayload.__init__(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload.__init__(self,value,*args,encoding=None,content_type=None,**kwargs)
aiohttp.payload.TextIOPayload.size(self)
aiohttp.payload.TextIOPayload.write(self,writer)
aiohttp.payload.get_payload(data,*args,**kwargs)
aiohttp.payload.payload_type(self,type)
aiohttp.payload.payload_type.__init__(self,type)
aiohttp.payload.register_payload(factory,type)
aiohttp.payload_type(self,type)
aiohttp.register_payload(factory,type)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/http_exceptions.py----------------------------------------
A:aiohttp.http_exceptions.hdr->hdr.decode('utf-8', 'surrogateescape').decode('utf-8', 'surrogateescape')
A:aiohttp.http_exceptions.line->repr(line)
aiohttp.http_exceptions.BadHttpMessage(self,message,*,headers=None)
aiohttp.http_exceptions.BadHttpMessage.__init__(self,message,*,headers=None)
aiohttp.http_exceptions.BadStatusLine(self,line='')
aiohttp.http_exceptions.BadStatusLine.__init__(self,line='')
aiohttp.http_exceptions.ContentEncodingError(PayloadEncodingError)
aiohttp.http_exceptions.ContentLengthError(PayloadEncodingError)
aiohttp.http_exceptions.HttpBadRequest(BadHttpMessage)
aiohttp.http_exceptions.HttpProcessingError(self,*,code=None,message='',headers=None)
aiohttp.http_exceptions.HttpProcessingError.__init__(self,*,code=None,message='',headers=None)
aiohttp.http_exceptions.InvalidHeader(self,hdr)
aiohttp.http_exceptions.InvalidHeader.__init__(self,hdr)
aiohttp.http_exceptions.InvalidURLError(BadHttpMessage)
aiohttp.http_exceptions.LineTooLong(self,line,limit='Unknown')
aiohttp.http_exceptions.LineTooLong.__init__(self,line,limit='Unknown')
aiohttp.http_exceptions.PayloadEncodingError(BadHttpMessage)
aiohttp.http_exceptions.TransferEncodingError(PayloadEncodingError)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/log.py----------------------------------------
A:aiohttp.log.access_logger->logging.getLogger('aiohttp.access')
A:aiohttp.log.client_logger->logging.getLogger('aiohttp.client')
A:aiohttp.log.internal_logger->logging.getLogger('aiohttp.internal')
A:aiohttp.log.server_logger->logging.getLogger('aiohttp.server')
A:aiohttp.log.web_logger->logging.getLogger('aiohttp.web')
A:aiohttp.log.ws_logger->logging.getLogger('aiohttp.websocket')


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_response.py----------------------------------------
A:aiohttp.web_response.self._cookies->SimpleCookie()
A:aiohttp.web_response.self._headers->CIMultiDict()
A:aiohttp.web_response.self._status->int(status)
A:aiohttp.web_response.old->self._cookies.get(name)
A:aiohttp.web_response.value->int(value)
A:aiohttp.web_response.self._headers[hdrs.CONTENT_LENGTH]->str(len(self._body))
A:aiohttp.web_response.self._content_type->str(value)
A:aiohttp.web_response.self._content_dict['charset']->str(value).lower()
A:aiohttp.web_response.httpdate->self.headers.get(_LAST_MODIFIED)
A:aiohttp.web_response.timetuple->parsedate(httpdate)
A:aiohttp.web_response.self.headers[hdrs.LAST_MODIFIED]->time.strftime('%a, %d %b %Y %H:%M:%S GMT', value.utctimetuple())
A:aiohttp.web_response.params->'; '.join(('%s=%s' % i for i in self._content_dict.items()))
A:aiohttp.web_response.accept_encoding->request.headers.get(hdrs.ACCEPT_ENCODING, '').lower()
A:aiohttp.web_response.status_line->'HTTP/{}.{} {} {}\r\n'.format(version[0], version[1], self._status, self._reason)
A:aiohttp.web_response.info->'{} {} '.format(self._req.method, self._req.path)
A:aiohttp.web_response.headers->CIMultiDict(headers)
A:aiohttp.web_response.body->dumps(data).encode(charset)
A:aiohttp.web_response.self._bodybody->payload.PAYLOAD_REGISTRY.get(body)
A:aiohttp.web_response.headers[CONTENT_LENGTH]->str(size)
A:aiohttp.web_response.self._body->dumps(data).encode(self.charset)
A:aiohttp.web_response.text->dumps(data)
aiohttp.web_response.ContentCoding(enum.Enum)
aiohttp.web_response.Response(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_response.Response.__init__(self,*,body=None,status=200,reason=None,text=None,headers=None,content_type=None,charset=None)
aiohttp.web_response.Response._start(self,request)
aiohttp.web_response.Response.body(self)
aiohttp.web_response.Response.body(self,body,CONTENT_TYPE=hdrs.CONTENT_TYPE,CONTENT_LENGTH=hdrs.CONTENT_LENGTH)
aiohttp.web_response.Response.content_length(self)
aiohttp.web_response.Response.content_length(self,value)
aiohttp.web_response.Response.text(self)
aiohttp.web_response.Response.text(self,text)
aiohttp.web_response.Response.write_eof(self)
aiohttp.web_response.StreamResponse(self,*,status=200,reason=None,headers=None)
aiohttp.web_response.StreamResponse.__init__(self,*,status=200,reason=None,headers=None)
aiohttp.web_response.StreamResponse.__repr__(self)
aiohttp.web_response.StreamResponse._do_start_compression(self,coding)
aiohttp.web_response.StreamResponse._generate_content_type_header(self,CONTENT_TYPE=hdrs.CONTENT_TYPE)
aiohttp.web_response.StreamResponse._start(self,request,HttpVersion10=HttpVersion10,HttpVersion11=HttpVersion11,CONNECTION=hdrs.CONNECTION,DATE=hdrs.DATE,SERVER=hdrs.SERVER,CONTENT_TYPE=hdrs.CONTENT_TYPE,CONTENT_LENGTH=hdrs.CONTENT_LENGTH,SET_COOKIE=hdrs.SET_COOKIE,SERVER_SOFTWARE=SERVER_SOFTWARE,TRANSFER_ENCODING=hdrs.TRANSFER_ENCODING)
aiohttp.web_response.StreamResponse._start_compression(self,request)
aiohttp.web_response.StreamResponse.body_length(self)
aiohttp.web_response.StreamResponse.charset(self)
aiohttp.web_response.StreamResponse.charset(self,value)
aiohttp.web_response.StreamResponse.chunked(self)
aiohttp.web_response.StreamResponse.compression(self)
aiohttp.web_response.StreamResponse.content_length(self)
aiohttp.web_response.StreamResponse.content_length(self,value)
aiohttp.web_response.StreamResponse.content_type(self)
aiohttp.web_response.StreamResponse.content_type(self,value)
aiohttp.web_response.StreamResponse.cookies(self)
aiohttp.web_response.StreamResponse.del_cookie(self,name,*,domain=None,path='/')
aiohttp.web_response.StreamResponse.drain(self)
aiohttp.web_response.StreamResponse.enable_chunked_encoding(self,chunk_size=None)
aiohttp.web_response.StreamResponse.enable_compression(self,force=None)
aiohttp.web_response.StreamResponse.force_close(self)
aiohttp.web_response.StreamResponse.headers(self)
aiohttp.web_response.StreamResponse.keep_alive(self)
aiohttp.web_response.StreamResponse.last_modified(self,_LAST_MODIFIED=hdrs.LAST_MODIFIED)
aiohttp.web_response.StreamResponse.last_modified(self,value)
aiohttp.web_response.StreamResponse.output_length(self)
aiohttp.web_response.StreamResponse.prepare(self,request)
aiohttp.web_response.StreamResponse.prepared(self)
aiohttp.web_response.StreamResponse.reason(self)
aiohttp.web_response.StreamResponse.set_cookie(self,name,value,*,expires=None,domain=None,max_age=None,path='/',secure=None,httponly=None,version=None)
aiohttp.web_response.StreamResponse.set_status(self,status,reason=None,_RESPONSES=RESPONSES)
aiohttp.web_response.StreamResponse.set_tcp_cork(self,value)
aiohttp.web_response.StreamResponse.set_tcp_nodelay(self,value)
aiohttp.web_response.StreamResponse.status(self)
aiohttp.web_response.StreamResponse.task(self)
aiohttp.web_response.StreamResponse.tcp_cork(self)
aiohttp.web_response.StreamResponse.tcp_nodelay(self)
aiohttp.web_response.StreamResponse.write(self,data)
aiohttp.web_response.StreamResponse.write_eof(self,data=b'')
aiohttp.web_response.json_response(data=sentinel,*,text=None,body=None,status=200,reason=None,headers=None,content_type='application/json',dumps=json.dumps)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/client_ws.py----------------------------------------
A:aiohttp.client_ws.self._heartbeat_cb->call_later(self._send_heartbeat, self._heartbeat, self._loop)
A:aiohttp.client_ws.self._pong_response_cb->call_later(self._pong_not_received, self._pong_heartbeat, self._loop)
A:aiohttp.client_ws.self._exception->asyncio.TimeoutError()
A:aiohttp.client_ws.self._waiting->create_future(self._loop)
A:aiohttp.client_ws.__aiter__->asyncio.coroutine(__aiter__)
aiohttp.client_ws.ClientWebSocketResponse(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop,*,receive_timeout=None,heartbeat=None)
aiohttp.client_ws.ClientWebSocketResponse.__init__(self,reader,writer,protocol,response,timeout,autoclose,autoping,loop,*,receive_timeout=None,heartbeat=None)
aiohttp.client_ws.ClientWebSocketResponse._cancel_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse._pong_not_received(self)
aiohttp.client_ws.ClientWebSocketResponse._reset_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse._send_heartbeat(self)
aiohttp.client_ws.ClientWebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.client_ws.ClientWebSocketResponse.close_code(self)
aiohttp.client_ws.ClientWebSocketResponse.closed(self)
aiohttp.client_ws.ClientWebSocketResponse.exception(self)
aiohttp.client_ws.ClientWebSocketResponse.get_extra_info(self,name,default=None)
aiohttp.client_ws.ClientWebSocketResponse.ping(self,message='b')
aiohttp.client_ws.ClientWebSocketResponse.pong(self,message='b')
aiohttp.client_ws.ClientWebSocketResponse.protocol(self)
aiohttp.client_ws.ClientWebSocketResponse.receive(self,timeout=None)
aiohttp.client_ws.ClientWebSocketResponse.receive_bytes(self,*,timeout=None)
aiohttp.client_ws.ClientWebSocketResponse.receive_json(self,*,loads=json.loads,timeout=None)
aiohttp.client_ws.ClientWebSocketResponse.receive_str(self,*,timeout=None)
aiohttp.client_ws.ClientWebSocketResponse.send_bytes(self,data)
aiohttp.client_ws.ClientWebSocketResponse.send_json(self,data,*,dumps=json.dumps)
aiohttp.client_ws.ClientWebSocketResponse.send_str(self,data)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/client_exceptions.py----------------------------------------
aiohttp.client_exceptions.ClientConnectionError(ClientError)
aiohttp.client_exceptions.ClientConnectorError(ClientOSError)
aiohttp.client_exceptions.ClientError(Exception)
aiohttp.client_exceptions.ClientHttpProxyError(ClientResponseError)
aiohttp.client_exceptions.ClientOSError(ClientConnectionError,OSError)
aiohttp.client_exceptions.ClientPayloadError(ClientError)
aiohttp.client_exceptions.ClientProxyConnectionError(ClientConnectorError)
aiohttp.client_exceptions.ClientResponseError(self,*,code=None,message='',headers=None)
aiohttp.client_exceptions.ClientResponseError.__init__(self,*,code=None,message='',headers=None)
aiohttp.client_exceptions.ServerConnectionError(ClientConnectionError)
aiohttp.client_exceptions.ServerDisconnectedError(ServerConnectionError)
aiohttp.client_exceptions.ServerFingerprintMismatch(self,expected,got,host,port)
aiohttp.client_exceptions.ServerFingerprintMismatch.__init__(self,expected,got,host,port)
aiohttp.client_exceptions.ServerFingerprintMismatch.__repr__(self)
aiohttp.client_exceptions.ServerTimeoutError(ServerConnectionError,TimeoutError)
aiohttp.client_exceptions.WSServerHandshakeError(ClientResponseError)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/signals.py----------------------------------------
A:aiohttp.signals.res->receiver(*args, **kwargs)
A:aiohttp.signals.ordinal->self._pre.ordinal()
A:aiohttp.signals.self._counter->count(1)
aiohttp.signals.BaseSignal(FrozenList)
aiohttp.signals.BaseSignal._send(self,*args,**kwargs)
aiohttp.signals.DebugSignal(BaseSignal)
aiohttp.signals.DebugSignal.send(self,ordinal,name,*args,**kwargs)
aiohttp.signals.PostSignal(DebugSignal)
aiohttp.signals.PreSignal(self)
aiohttp.signals.PreSignal.__init__(self)
aiohttp.signals.PreSignal.ordinal(self)
aiohttp.signals.Signal(self,app)
aiohttp.signals.Signal.__init__(self,app)
aiohttp.signals.Signal.send(self,*args,**kwargs)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/test_utils.py----------------------------------------
A:aiohttp.test_utils.t->asyncio.Task(once(), loop=loop)
A:aiohttp.test_utils.self.port->unused_port()
A:aiohttp.test_utils.self._ssl->kwargs.pop('ssl', None)
A:aiohttp.test_utils.self._root->URL('{}://{}:{}'.format(self.scheme, self.host, self.port))
A:aiohttp.test_utils.url->URL(path)
A:aiohttp.test_utils.self.handler->Server(self._handler, loop=self._loop, debug=True, **kwargs)
A:aiohttp.test_utils.self._server->TestServer(app_or_server, scheme=scheme, host=host, **server_kwargs)
A:aiohttp.test_utils.cookie_jar->aiohttp.CookieJar(unsafe=True, loop=loop)
A:aiohttp.test_utils.self._session->ClientSession(loop=loop, cookie_jar=cookie_jar, **kwargs)
A:aiohttp.test_utils.self.loop->setup_test_loop()
A:aiohttp.test_utils.self.app->self.loop.run_until_complete(self.get_application())
A:aiohttp.test_utils.self.client->self.loop.run_until_complete(self._get_client(self.app))
A:aiohttp.test_utils.loop->unittest.mock.Mock()
A:aiohttp.test_utils.closed->unittest.mock.Mock().is_closed()
A:aiohttp.test_utils.app->_create_app_mock()
A:aiohttp.test_utils.app.on_response_prepare->Signal(app)
A:aiohttp.test_utils.transport->_create_transport(sslcontext)
A:aiohttp.test_utils.task->unittest.mock.Mock()
A:aiohttp.test_utils.headers->CIMultiDict()
A:aiohttp.test_utils.raw_hdrs->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in headers.items()))
A:aiohttp.test_utils.message->RawRequestMessage(method, path, version, headers, raw_hdrs, closing, False, False, chunked, URL(path))
A:aiohttp.test_utils.protocol->unittest.mock.Mock()
A:aiohttp.test_utils.writer->unittest.mock.Mock()
A:aiohttp.test_utils.payload_writer->unittest.mock.Mock()
A:aiohttp.test_utils.payload->unittest.mock.Mock()
A:aiohttp.test_utils.time_service->unittest.mock.Mock()
A:aiohttp.test_utils.time_service.timeout->unittest.mock.Mock()
A:aiohttp.test_utils.req->Request(message, payload, protocol, payload_writer, time_service, task, secure_proxy_ssl_header=secure_proxy_ssl_header, client_max_size=client_max_size)
A:aiohttp.test_utils.match_info->UrlMappingMatchInfo({}, mock.Mock())
aiohttp.test_utils.AioHTTPTestCase(unittest.TestCase)
aiohttp.test_utils.AioHTTPTestCase._get_client(self,app)
aiohttp.test_utils.AioHTTPTestCase.get_app(self)
aiohttp.test_utils.AioHTTPTestCase.get_application(self)
aiohttp.test_utils.AioHTTPTestCase.setUp(self)
aiohttp.test_utils.AioHTTPTestCase.tearDown(self)
aiohttp.test_utils.BaseTestServer(self,*,scheme=sentinel,loop=None,host='127.0.0.1',skip_url_asserts=False,**kwargs)
aiohttp.test_utils.BaseTestServer.__enter__(self)
aiohttp.test_utils.BaseTestServer.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.BaseTestServer.__init__(self,*,scheme=sentinel,loop=None,host='127.0.0.1',skip_url_asserts=False,**kwargs)
aiohttp.test_utils.BaseTestServer._close_hook(self)
aiohttp.test_utils.BaseTestServer._make_factory(self,**kwargs)
aiohttp.test_utils.BaseTestServer.close(self)
aiohttp.test_utils.BaseTestServer.closed(self)
aiohttp.test_utils.BaseTestServer.make_url(self,path)
aiohttp.test_utils.BaseTestServer.start_server(self,loop=None,**kwargs)
aiohttp.test_utils.BaseTestServer.started(self)
aiohttp.test_utils.RawTestServer(self,handler,*,scheme=sentinel,host='127.0.0.1',**kwargs)
aiohttp.test_utils.RawTestServer.__init__(self,handler,*,scheme=sentinel,host='127.0.0.1',**kwargs)
aiohttp.test_utils.RawTestServer._close_hook(self)
aiohttp.test_utils.RawTestServer._make_factory(self,debug=True,**kwargs)
aiohttp.test_utils.TestClient(self,app_or_server,*,scheme=sentinel,host=sentinel,cookie_jar=None,server_kwargs=None,loop=None,**kwargs)
aiohttp.test_utils.TestClient.__enter__(self)
aiohttp.test_utils.TestClient.__exit__(self,exc_type,exc_value,traceback)
aiohttp.test_utils.TestClient.__init__(self,app_or_server,*,scheme=sentinel,host=sentinel,cookie_jar=None,server_kwargs=None,loop=None,**kwargs)
aiohttp.test_utils.TestClient.close(self)
aiohttp.test_utils.TestClient.delete(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.get(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.head(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.host(self)
aiohttp.test_utils.TestClient.make_url(self,path)
aiohttp.test_utils.TestClient.options(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.patch(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.port(self)
aiohttp.test_utils.TestClient.post(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.put(self,path,*args,**kwargs)
aiohttp.test_utils.TestClient.request(self,method,path,*args,**kwargs)
aiohttp.test_utils.TestClient.server(self)
aiohttp.test_utils.TestClient.session(self)
aiohttp.test_utils.TestClient.start_server(self)
aiohttp.test_utils.TestClient.ws_connect(self,path,*args,**kwargs)
aiohttp.test_utils.TestServer(self,app,*,scheme=sentinel,host='127.0.0.1',**kwargs)
aiohttp.test_utils.TestServer.__init__(self,app,*,scheme=sentinel,host='127.0.0.1',**kwargs)
aiohttp.test_utils.TestServer._close_hook(self)
aiohttp.test_utils.TestServer._make_factory(self,**kwargs)
aiohttp.test_utils._create_app_mock()
aiohttp.test_utils._create_transport(sslcontext=None)
aiohttp.test_utils.loop_context(loop_factory=asyncio.new_event_loop,fast=False)
aiohttp.test_utils.make_mocked_coro(return_value=sentinel,raise_exception=sentinel)
aiohttp.test_utils.make_mocked_request(method,path,headers=None,*,version=HttpVersion(1,1),closing=False,app=None,writer=sentinel,payload_writer=sentinel,protocol=sentinel,transport=sentinel,payload=sentinel,sslcontext=None,secure_proxy_ssl_header=None,client_max_size=1024**2)
aiohttp.test_utils.run_briefly(loop)
aiohttp.test_utils.setup_test_loop(loop_factory=asyncio.new_event_loop)
aiohttp.test_utils.teardown_test_loop(loop,fast=False)
aiohttp.test_utils.unittest_run_loop(func)
aiohttp.test_utils.unused_port()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/backport_cookies.py----------------------------------------
A:aiohttp.backport_cookies._OctalPatt->re.compile('\\\\[0-3][0-7][0-7]')
A:aiohttp.backport_cookies._QuotePatt->re.compile('[\\\\].')
A:aiohttp.backport_cookies.n->len(str)
A:aiohttp.backport_cookies.o_match->re.compile('\\\\[0-3][0-7][0-7]').search(str, i)
A:aiohttp.backport_cookies.q_match->re.compile('[\\\\].').search(str, i)
A:aiohttp.backport_cookies.j->re.compile('\\\\[0-3][0-7][0-7]').search(str, i).start(0)
A:aiohttp.backport_cookies.k->re.compile('[\\\\].').search(str, i).start(0)
A:aiohttp.backport_cookies.now->time()
A:aiohttp.backport_cookies.(year, month, day, hh, mm, ss, wd, y, z)->gmtime(now + future)
A:aiohttp.backport_cookies._CookiePattern->re.compile("\n    (?x)                           # This is a verbose pattern\n    \\s*                            # Optional whitespace at start of cookie\n    (?P<key>                       # Start of group 'key'\n    [" + _LegalKeyChars + ']+?   # Any word of at least one letter\n    )                              # End of group \'key\'\n    (                              # Optional group: there may not be a value.\n    \\s*=\\s*                          # Equal Sign\n    (?P<val>                         # Start of group \'val\'\n    "(?:[^\\\\"]|\\\\.)*"                  # Any doublequoted string\n    |                                  # or\n    \\w{3},\\s[\\w\\d\\s-]{9,11}\\s[\\d:]{8}\\sGMT  # Special case for "expires" attr\n    |                                  # or\n    [' + _LegalValueChars + "]*      # Any word or empty string\n    )                                # End of group 'val'\n    )?                             # End of optional value group\n    \\s*                            # Any number of spaces.\n    (\\s+|;|$)                      # Ending either at space, semicolon, or EOS.\n    ", re.ASCII)
A:aiohttp.backport_cookies.strval->str(val)
A:aiohttp.backport_cookies.M->self.get(key, Morsel())
A:aiohttp.backport_cookies.(rval, cval)->self.value_decode(value)
A:aiohttp.backport_cookies.items->sorted(self.items())
A:aiohttp.backport_cookies.match->patt.match(str, i)
A:aiohttp.backport_cookies.i->patt.match(str, i).end(0)
A:aiohttp.backport_cookies.M[key]->_unquote(value)
aiohttp.backport_cookies.BaseCookie(self,input=None)
aiohttp.backport_cookies.BaseCookie.__init__(self,input=None)
aiohttp.backport_cookies.BaseCookie.__parse_string(self,str,patt=_CookiePattern)
aiohttp.backport_cookies.BaseCookie.__repr__(self)
aiohttp.backport_cookies.BaseCookie.__set(self,key,real_value,coded_value)
aiohttp.backport_cookies.BaseCookie.__setitem__(self,key,value)
aiohttp.backport_cookies.BaseCookie.js_output(self,attrs=None)
aiohttp.backport_cookies.BaseCookie.load(self,rawdata)
aiohttp.backport_cookies.BaseCookie.output(self,attrs=None,header='Set-Cookie:',sep='\r\n')
aiohttp.backport_cookies.BaseCookie.value_decode(self,val)
aiohttp.backport_cookies.BaseCookie.value_encode(self,val)
aiohttp.backport_cookies.SimpleCookie(BaseCookie)
aiohttp.backport_cookies.SimpleCookie.value_decode(self,val)
aiohttp.backport_cookies.SimpleCookie.value_encode(self,val)
aiohttp.backport_cookies._getdate(future=0,weekdayname=_weekdayname,monthname=_monthname)
aiohttp.backport_cookies._quote(str,LegalChars=_LegalChars)
aiohttp.backport_cookies._unquote(str)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_ws.py----------------------------------------
A:aiohttp.web_ws.self._heartbeat_cb->call_later(self._send_heartbeat, self._heartbeat, self._loop)
A:aiohttp.web_ws.self._pong_response_cb->call_later(self._pong_not_received, self._pong_heartbeat, self._loop)
A:aiohttp.web_ws.self._exception->asyncio.TimeoutError()
A:aiohttp.web_ws.(protocol, writer)->self._pre_start(request)
A:aiohttp.web_ws.(status, headers, _, writer, protocol)->do_handshake(request.method, request.headers, request._protocol.writer, self._protocols)
A:aiohttp.web_ws.self._reader->FlowControlDataQueue(request._protocol, limit=2 ** 16, loop=self._loop)
A:aiohttp.web_ws.(_, _, _, _, protocol)->do_handshake(request.method, request.headers, request._protocol.writer, self._protocols)
A:aiohttp.web_ws.self._waiting->create_future(self._loop)
A:aiohttp.web_ws.__aiter__->asyncio.coroutine(__aiter__)
aiohttp.web_ws.WebSocketReady(namedtuple('WebSocketReady','okprotocol'))
aiohttp.web_ws.WebSocketReady.__bool__(self)
aiohttp.web_ws.WebSocketResponse(self,*,timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,protocols=())
aiohttp.web_ws.WebSocketResponse.__init__(self,*,timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,protocols=())
aiohttp.web_ws.WebSocketResponse._cancel_heartbeat(self)
aiohttp.web_ws.WebSocketResponse._pong_not_received(self)
aiohttp.web_ws.WebSocketResponse._post_start(self,request,protocol,writer)
aiohttp.web_ws.WebSocketResponse._pre_start(self,request)
aiohttp.web_ws.WebSocketResponse._reset_heartbeat(self)
aiohttp.web_ws.WebSocketResponse._send_heartbeat(self)
aiohttp.web_ws.WebSocketResponse.can_prepare(self,request)
aiohttp.web_ws.WebSocketResponse.close(self,*,code=1000,message=b'')
aiohttp.web_ws.WebSocketResponse.close_code(self)
aiohttp.web_ws.WebSocketResponse.closed(self)
aiohttp.web_ws.WebSocketResponse.exception(self)
aiohttp.web_ws.WebSocketResponse.ping(self,message='b')
aiohttp.web_ws.WebSocketResponse.pong(self,message='b')
aiohttp.web_ws.WebSocketResponse.prepare(self,request)
aiohttp.web_ws.WebSocketResponse.receive(self,timeout=None)
aiohttp.web_ws.WebSocketResponse.receive_bytes(self,*,timeout=None)
aiohttp.web_ws.WebSocketResponse.receive_json(self,*,loads=json.loads,timeout=None)
aiohttp.web_ws.WebSocketResponse.receive_str(self,*,timeout=None)
aiohttp.web_ws.WebSocketResponse.send_bytes(self,data)
aiohttp.web_ws.WebSocketResponse.send_json(self,data,*,dumps=json.dumps)
aiohttp.web_ws.WebSocketResponse.send_str(self,data)
aiohttp.web_ws.WebSocketResponse.write(self,data)
aiohttp.web_ws.WebSocketResponse.write_eof(self)
aiohttp.web_ws.WebSocketResponse.ws_protocol(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_middlewares.py----------------------------------------
A:aiohttp.web_middlewares.alt_request->request.clone(rel_url=path)
aiohttp.web_middlewares._check_request_resolves(request,path)
aiohttp.web_middlewares.normalize_path_middleware(*,append_slash=True,merge_slashes=True,redirect_class=HTTPMovedPermanently)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/connector.py----------------------------------------
A:aiohttp.connector.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.connector.loop->asyncio.get_event_loop()
A:aiohttp.connector.self._acquired->set()
A:aiohttp.connector.self._acquired_per_host->defaultdict(set)
A:aiohttp.connector.self._waiters->defaultdict(list)
A:aiohttp.connector.self._factory->functools.partial(ResponseHandler, loop=loop)
A:aiohttp.connector.self.cookies->SimpleCookie()
A:aiohttp.connector.now->self._loop.time()
A:aiohttp.connector.transport->protocol.close()
A:aiohttp.connector.self._cleanup_handle->helpers.weakref_handle(self._cleanup, self._keepalive_timeout, self._loop)
A:aiohttp.connector.self._cleanup_closed_handle->helpers.weakref_handle(self._cleanup_closed, self._cleanup_closed_period, self._loop)
A:aiohttp.connector.fut->helpers.create_future(self._loop)
A:aiohttp.connector.proto->self._get(key)
A:aiohttp.connector.placeholder->_TransportPlaceholder()
A:aiohttp.connector.t1->self._loop.time()
A:aiohttp.connector.(proto, t0)->self._conns.get(key).pop()
A:aiohttp.connector.conns->self._conns.get(key)
A:aiohttp.connector._SSL_OP_NO_COMPRESSION->getattr(ssl, 'OP_NO_COMPRESSION', 0)
A:aiohttp.connector.digestlen->len(fingerprint)
A:aiohttp.connector.hashfunc->HASHFUNC_BY_DIGESTLEN.get(digestlen)
A:aiohttp.connector.resolver->DefaultResolver(loop=self._loop)
A:aiohttp.connector.sslcontext->ssl.create_default_context()
A:aiohttp.connector.has_cert->transp.get_extra_info('sslcontext')
A:aiohttp.connector.sock->transp.get_extra_info('socket')
A:aiohttp.connector.cert->transp.get_extra_info('socket').getpeercert(binary_form=True)
A:aiohttp.connector.got->self._hashfunc(cert).digest()
A:aiohttp.connector.proxy_req->ClientRequest(hdrs.METH_GET, req.proxy, headers={hdrs.HOST: req.headers[hdrs.HOST]}, auth=req.proxy_auth, loop=self._loop)
A:aiohttp.connector.conn->Connection(self, key, proto, self._loop)
A:aiohttp.connector.proxy_resp->ClientRequest(hdrs.METH_GET, req.proxy, headers={hdrs.HOST: req.headers[hdrs.HOST]}, auth=req.proxy_auth, loop=self._loop).send(conn)
A:aiohttp.connector.rawsock->rawsock.dup().dup()
aiohttp.connector.BaseConnector(self,*,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,disable_cleanup_closed=False,loop=None)
aiohttp.connector.BaseConnector.__del__(self,_warnings=warnings)
aiohttp.connector.BaseConnector.__enter__(self)
aiohttp.connector.BaseConnector.__exit__(self,*exc)
aiohttp.connector.BaseConnector.__init__(self,*,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,disable_cleanup_closed=False,loop=None)
aiohttp.connector.BaseConnector._cleanup(self)
aiohttp.connector.BaseConnector._cleanup_closed(self)
aiohttp.connector.BaseConnector._create_connection(self,req)
aiohttp.connector.BaseConnector._get(self,key)
aiohttp.connector.BaseConnector._release(self,key,protocol,*,should_close=False)
aiohttp.connector.BaseConnector._release_acquired(self,key,proto)
aiohttp.connector.BaseConnector._release_waiter(self)
aiohttp.connector.BaseConnector.close(self)
aiohttp.connector.BaseConnector.closed(self)
aiohttp.connector.BaseConnector.connect(self,req)
aiohttp.connector.BaseConnector.force_close(self)
aiohttp.connector.BaseConnector.limit(self)
aiohttp.connector.BaseConnector.limit_per_host(self)
aiohttp.connector.Connection(self,connector,key,protocol,loop)
aiohttp.connector.Connection.__del__(self,_warnings=warnings)
aiohttp.connector.Connection.__init__(self,connector,key,protocol,loop)
aiohttp.connector.Connection.__repr__(self)
aiohttp.connector.Connection._notify_release(self)
aiohttp.connector.Connection.add_callback(self,callback)
aiohttp.connector.Connection.close(self)
aiohttp.connector.Connection.closed(self)
aiohttp.connector.Connection.detach(self)
aiohttp.connector.Connection.loop(self)
aiohttp.connector.Connection.protocol(self)
aiohttp.connector.Connection.release(self)
aiohttp.connector.Connection.transport(self)
aiohttp.connector.Connection.writer(self)
aiohttp.connector.TCPConnector(self,*,verify_ssl=True,fingerprint=None,resolve=sentinel,use_dns_cache=True,family=0,ssl_context=None,local_addr=None,resolver=None,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.TCPConnector.__init__(self,*,verify_ssl=True,fingerprint=None,resolve=sentinel,use_dns_cache=True,family=0,ssl_context=None,local_addr=None,resolver=None,keepalive_timeout=sentinel,force_close=False,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.TCPConnector._create_connection(self,req)
aiohttp.connector.TCPConnector._create_direct_connection(self,req)
aiohttp.connector.TCPConnector._create_proxy_connection(self,req)
aiohttp.connector.TCPConnector._resolve_host(self,host,port)
aiohttp.connector.TCPConnector.cached_hosts(self)
aiohttp.connector.TCPConnector.clear_dns_cache(self,host=None,port=None)
aiohttp.connector.TCPConnector.family(self)
aiohttp.connector.TCPConnector.fingerprint(self)
aiohttp.connector.TCPConnector.ssl_context(self)
aiohttp.connector.TCPConnector.use_dns_cache(self)
aiohttp.connector.TCPConnector.verify_ssl(self)
aiohttp.connector.UnixConnector(self,path,force_close=False,keepalive_timeout=sentinel,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.UnixConnector.__init__(self,path,force_close=False,keepalive_timeout=sentinel,limit=100,limit_per_host=0,loop=None)
aiohttp.connector.UnixConnector._create_connection(self,req)
aiohttp.connector.UnixConnector.path(self)
aiohttp.connector._TransportPlaceholder
aiohttp.connector._TransportPlaceholder.close(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/pytest_plugin.py----------------------------------------
A:aiohttp.pytest_plugin.loop->setup_test_loop()
A:aiohttp.pytest_plugin.fast->request.config.getoption('--fast')
A:aiohttp.pytest_plugin.existing_loop->pyfuncitem.funcargs.get('loop', None)
A:aiohttp.pytest_plugin.task->_loop.create_task(pyfuncitem.obj(**testargs))
A:aiohttp.pytest_plugin.uvloop_only->config.getoption('--with-uvloop-only')
A:aiohttp.pytest_plugin.debug->request.config.getoption('--enable-loop-debug')
A:aiohttp.pytest_plugin.server->RawTestServer(handler)
A:aiohttp.pytest_plugin.client->TestClient(__param, loop=loop)
A:aiohttp.pytest_plugin.__param->__param(loop, *args, **kwargs)
A:aiohttp.pytest_plugin.tmpdir->py.path.local(tempfile.mkdtemp())
aiohttp.pytest_plugin._passthrough_loop_context(loop,fast=False)
aiohttp.pytest_plugin.fast(request)
aiohttp.pytest_plugin.loop(request)
aiohttp.pytest_plugin.pytest_addoption(parser)
aiohttp.pytest_plugin.pytest_configure(config)
aiohttp.pytest_plugin.pytest_pycollect_makeitem(collector,name,obj)
aiohttp.pytest_plugin.pytest_pyfunc_call(pyfuncitem)
aiohttp.pytest_plugin.raw_test_server(loop)
aiohttp.pytest_plugin.shorttmpdir()
aiohttp.pytest_plugin.test_client(loop)
aiohttp.pytest_plugin.test_server(loop)
aiohttp.pytest_plugin.unused_port()


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_exceptions.py----------------------------------------
A:aiohttp.web_exceptions.self.text->'{}: {}'.format(self.status, self.reason)
A:aiohttp.web_exceptions.self.headers['Location']->str(location)
A:aiohttp.web_exceptions.allow->','.join(sorted(allowed_methods))
A:aiohttp.web_exceptions.self.method->method.upper()
aiohttp.web_exceptions.HTTPAccepted(HTTPSuccessful)
aiohttp.web_exceptions.HTTPBadGateway(HTTPServerError)
aiohttp.web_exceptions.HTTPBadRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPClientError(HTTPError)
aiohttp.web_exceptions.HTTPConflict(HTTPClientError)
aiohttp.web_exceptions.HTTPCreated(HTTPSuccessful)
aiohttp.web_exceptions.HTTPError(HTTPException)
aiohttp.web_exceptions.HTTPException(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPException.__init__(self,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPExpectationFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPForbidden(HTTPClientError)
aiohttp.web_exceptions.HTTPFound(_HTTPMove)
aiohttp.web_exceptions.HTTPGatewayTimeout(HTTPServerError)
aiohttp.web_exceptions.HTTPGone(HTTPClientError)
aiohttp.web_exceptions.HTTPInternalServerError(HTTPServerError)
aiohttp.web_exceptions.HTTPLengthRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPMethodNotAllowed(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMethodNotAllowed.__init__(self,method,allowed_methods,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPMisdirectedRequest(HTTPClientError)
aiohttp.web_exceptions.HTTPMovedPermanently(_HTTPMove)
aiohttp.web_exceptions.HTTPMultipleChoices(_HTTPMove)
aiohttp.web_exceptions.HTTPNetworkAuthenticationRequired(HTTPServerError)
aiohttp.web_exceptions.HTTPNoContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNonAuthoritativeInformation(HTTPSuccessful)
aiohttp.web_exceptions.HTTPNotAcceptable(HTTPClientError)
aiohttp.web_exceptions.HTTPNotExtended(HTTPServerError)
aiohttp.web_exceptions.HTTPNotFound(HTTPClientError)
aiohttp.web_exceptions.HTTPNotImplemented(HTTPServerError)
aiohttp.web_exceptions.HTTPNotModified(HTTPRedirection)
aiohttp.web_exceptions.HTTPOk(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPartialContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPPaymentRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPPermanentRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPPreconditionFailed(HTTPClientError)
aiohttp.web_exceptions.HTTPPreconditionRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPProxyAuthenticationRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPRedirection(HTTPException)
aiohttp.web_exceptions.HTTPRequestEntityTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestHeaderFieldsTooLarge(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestRangeNotSatisfiable(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestTimeout(HTTPClientError)
aiohttp.web_exceptions.HTTPRequestURITooLong(HTTPClientError)
aiohttp.web_exceptions.HTTPResetContent(HTTPSuccessful)
aiohttp.web_exceptions.HTTPSeeOther(_HTTPMove)
aiohttp.web_exceptions.HTTPServerError(HTTPError)
aiohttp.web_exceptions.HTTPServiceUnavailable(HTTPServerError)
aiohttp.web_exceptions.HTTPSuccessful(HTTPException)
aiohttp.web_exceptions.HTTPTemporaryRedirect(_HTTPMove)
aiohttp.web_exceptions.HTTPTooManyRequests(HTTPClientError)
aiohttp.web_exceptions.HTTPUnauthorized(HTTPClientError)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnavailableForLegalReasons.__init__(self,link,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions.HTTPUnsupportedMediaType(HTTPClientError)
aiohttp.web_exceptions.HTTPUpgradeRequired(HTTPClientError)
aiohttp.web_exceptions.HTTPUseProxy(_HTTPMove)
aiohttp.web_exceptions.HTTPVariantAlsoNegotiates(HTTPServerError)
aiohttp.web_exceptions.HTTPVersionNotSupported(HTTPServerError)
aiohttp.web_exceptions._HTTPMove(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)
aiohttp.web_exceptions._HTTPMove.__init__(self,location,*,headers=None,reason=None,body=None,text=None,content_type=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/cookiejar.py----------------------------------------
A:aiohttp.cookiejar.DATE_TOKENS_RE->re.compile('[\\x09\\x20-\\x2F\\x3B-\\x40\\x5B-\\x60\\x7B-\\x7E]*(?P<token>[\\x00-\\x08\\x0A-\\x1F\\d:a-zA-Z\\x7F-\\xFF]+)')
A:aiohttp.cookiejar.DATE_HMS_TIME_RE->re.compile('(\\d{1,2}):(\\d{1,2}):(\\d{1,2})')
A:aiohttp.cookiejar.DATE_DAY_OF_MONTH_RE->re.compile('(\\d{1,2})')
A:aiohttp.cookiejar.DATE_MONTH_RE->re.compile('(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)', re.I)
A:aiohttp.cookiejar.DATE_YEAR_RE->re.compile('(\\d{2,4})')
A:aiohttp.cookiejar.self._cookies->pickle.load(f)
A:aiohttp.cookiejar.self._host_only_cookies->set()
A:aiohttp.cookiejar.self._next_expiration->min(self._next_expiration, when)
A:aiohttp.cookiejar.file_path->pathlib.Path(file_path)
A:aiohttp.cookiejar.now->self._loop.time()
A:aiohttp.cookiejar.next_expiration->min(next_expiration, when)
A:aiohttp.cookiejar.cookies->cookies.items().items()
A:aiohttp.cookiejar.tmp->SimpleCookie()
A:aiohttp.cookiejar.delta_seconds->int(max_age)
A:aiohttp.cookiejar.expire_time->self._parse_date(expires)
A:aiohttp.cookiejar.request_url->URL(request_url)
A:aiohttp.cookiejar.filtered->SimpleCookie()
A:aiohttp.cookiejar.mrsl_val->cookie.get(cookie.key, Morsel())
A:aiohttp.cookiejar.token->token_match.group('token')
A:aiohttp.cookiejar.time_match->cls.DATE_HMS_TIME_RE.match(token)
A:aiohttp.cookiejar.day_match->cls.DATE_DAY_OF_MONTH_RE.match(token)
A:aiohttp.cookiejar.day->int(day_match.group())
A:aiohttp.cookiejar.month_match->cls.DATE_MONTH_RE.match(token)
A:aiohttp.cookiejar.year_match->cls.DATE_YEAR_RE.match(token)
A:aiohttp.cookiejar.year->int(year_match.group())
aiohttp.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.CookieJar.__iter__(self)
aiohttp.CookieJar.__len__(self)
aiohttp.CookieJar._do_expiration(self)
aiohttp.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.CookieJar._is_domain_match(domain,hostname)
aiohttp.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.CookieJar._parse_date(cls,date_str)
aiohttp.CookieJar.clear(self)
aiohttp.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.CookieJar.load(self,file_path)
aiohttp.CookieJar.save(self,file_path)
aiohttp.CookieJar.update_cookies(self,cookies,response_url=URL())
aiohttp.cookiejar.CookieJar(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__init__(self,*,unsafe=False,loop=None)
aiohttp.cookiejar.CookieJar.__iter__(self)
aiohttp.cookiejar.CookieJar.__len__(self)
aiohttp.cookiejar.CookieJar._do_expiration(self)
aiohttp.cookiejar.CookieJar._expire_cookie(self,when,domain,name)
aiohttp.cookiejar.CookieJar._is_domain_match(domain,hostname)
aiohttp.cookiejar.CookieJar._is_path_match(req_path,cookie_path)
aiohttp.cookiejar.CookieJar._parse_date(cls,date_str)
aiohttp.cookiejar.CookieJar.clear(self)
aiohttp.cookiejar.CookieJar.filter_cookies(self,request_url=URL())
aiohttp.cookiejar.CookieJar.load(self,file_path)
aiohttp.cookiejar.CookieJar.save(self,file_path)
aiohttp.cookiejar.CookieJar.update_cookies(self,cookies,response_url=URL())


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/resolver.py----------------------------------------
A:aiohttp.resolver.loop->asyncio.get_event_loop()
A:aiohttp.resolver.self._resolver->aiodns.DNSResolver(*args, loop=loop, **kwargs)
aiohttp.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.AsyncResolver.close(self)
aiohttp.AsyncResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.AsyncResolver.resolve_with_query(self,host,port=0,family=socket.AF_INET)
aiohttp.ThreadedResolver(self,loop=None)
aiohttp.ThreadedResolver.close(self)
aiohttp.ThreadedResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.AsyncResolver(self,loop=None,*args,**kwargs)
aiohttp.resolver.AsyncResolver.__init__(self,loop=None,*args,**kwargs)
aiohttp.resolver.AsyncResolver.close(self)
aiohttp.resolver.AsyncResolver.resolve(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.AsyncResolver.resolve_with_query(self,host,port=0,family=socket.AF_INET)
aiohttp.resolver.ThreadedResolver(self,loop=None)
aiohttp.resolver.ThreadedResolver.__init__(self,loop=None)
aiohttp.resolver.ThreadedResolver.close(self)
aiohttp.resolver.ThreadedResolver.resolve(self,host,port=0,family=socket.AF_INET)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/streams.py----------------------------------------
A:aiohttp.streams.__aiter__->asyncio.coroutine(__aiter__)
A:aiohttp.streams.loop->asyncio.get_event_loop()
A:aiohttp.streams.self._buffer->collections.deque()
A:aiohttp.streams.self._eof_waiter->helpers.create_future(self._loop)
A:aiohttp.streams.waiterself._waiter->helpers.create_future(self._loop)
A:aiohttp.streams.data->self._buffer.popleft()
A:aiohttp.streams.stack->traceback.format_stack()
A:aiohttp.streams.partial->b''.join(blocks)
A:aiohttp.streams.chunk->self._read_nowait_chunk(n)
A:aiohttp.streams.EMPTY_PAYLOAD->EmptyStreamReader()
A:aiohttp.streams.self._waiter->helpers.create_future(self._loop)
A:aiohttp.streams.(data, size)->self._buffer.popleft()
aiohttp.AsyncStreamReaderMixin
aiohttp.ChunksQueue(DataQueue)
aiohttp.ChunksQueue.read(self)
aiohttp.DataQueue(self,*,loop=None)
aiohttp.DataQueue.__len__(self)
aiohttp.DataQueue.at_eof(self)
aiohttp.DataQueue.exception(self)
aiohttp.DataQueue.feed_data(self,data,size=0)
aiohttp.DataQueue.feed_eof(self)
aiohttp.DataQueue.is_eof(self)
aiohttp.DataQueue.read(self)
aiohttp.DataQueue.set_exception(self,exc)
aiohttp.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.EmptyStreamReader.at_eof(self)
aiohttp.EmptyStreamReader.exception(self)
aiohttp.EmptyStreamReader.feed_data(self,data)
aiohttp.EmptyStreamReader.feed_eof(self)
aiohttp.EmptyStreamReader.is_eof(self)
aiohttp.EmptyStreamReader.on_eof(self,callback)
aiohttp.EmptyStreamReader.read(self,n=-1)
aiohttp.EmptyStreamReader.read_nowait(self)
aiohttp.EmptyStreamReader.readany(self)
aiohttp.EmptyStreamReader.readexactly(self,n)
aiohttp.EmptyStreamReader.readline(self)
aiohttp.EmptyStreamReader.set_exception(self,exc)
aiohttp.EmptyStreamReader.wait_eof(self)
aiohttp.EofStream(Exception)
aiohttp.FlowControlChunksQueue(FlowControlDataQueue)
aiohttp.FlowControlChunksQueue.read(self)
aiohttp.FlowControlDataQueue(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.FlowControlDataQueue.read(self)
aiohttp.FlowControlStreamReader(self,protocol,buffer_limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.FlowControlStreamReader.feed_data(self,data,size=0)
aiohttp.FlowControlStreamReader.read(self,n=-1)
aiohttp.FlowControlStreamReader.read_nowait(self,n=-1)
aiohttp.FlowControlStreamReader.readany(self)
aiohttp.FlowControlStreamReader.readexactly(self,n)
aiohttp.FlowControlStreamReader.readline(self)
aiohttp.StreamReader(self,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.StreamReader.__repr__(self)
aiohttp.StreamReader._read_nowait(self,n)
aiohttp.StreamReader._read_nowait_chunk(self,n)
aiohttp.StreamReader._wait(self,func_name)
aiohttp.StreamReader.at_eof(self)
aiohttp.StreamReader.exception(self)
aiohttp.StreamReader.feed_data(self,data)
aiohttp.StreamReader.feed_eof(self)
aiohttp.StreamReader.is_eof(self)
aiohttp.StreamReader.on_eof(self,callback)
aiohttp.StreamReader.read(self,n=-1)
aiohttp.StreamReader.read_nowait(self,n=-1)
aiohttp.StreamReader.readany(self)
aiohttp.StreamReader.readexactly(self,n)
aiohttp.StreamReader.readline(self)
aiohttp.StreamReader.set_exception(self,exc)
aiohttp.StreamReader.unread_data(self,data)
aiohttp.StreamReader.wait_eof(self)
aiohttp.streams.AsyncStreamReaderMixin
aiohttp.streams.ChunksQueue(DataQueue)
aiohttp.streams.ChunksQueue.read(self)
aiohttp.streams.DataQueue(self,*,loop=None)
aiohttp.streams.DataQueue.__init__(self,*,loop=None)
aiohttp.streams.DataQueue.__len__(self)
aiohttp.streams.DataQueue.at_eof(self)
aiohttp.streams.DataQueue.exception(self)
aiohttp.streams.DataQueue.feed_data(self,data,size=0)
aiohttp.streams.DataQueue.feed_eof(self)
aiohttp.streams.DataQueue.is_eof(self)
aiohttp.streams.DataQueue.read(self)
aiohttp.streams.DataQueue.set_exception(self,exc)
aiohttp.streams.EmptyStreamReader(AsyncStreamReaderMixin)
aiohttp.streams.EmptyStreamReader.at_eof(self)
aiohttp.streams.EmptyStreamReader.exception(self)
aiohttp.streams.EmptyStreamReader.feed_data(self,data)
aiohttp.streams.EmptyStreamReader.feed_eof(self)
aiohttp.streams.EmptyStreamReader.is_eof(self)
aiohttp.streams.EmptyStreamReader.on_eof(self,callback)
aiohttp.streams.EmptyStreamReader.read(self,n=-1)
aiohttp.streams.EmptyStreamReader.read_nowait(self)
aiohttp.streams.EmptyStreamReader.readany(self)
aiohttp.streams.EmptyStreamReader.readexactly(self,n)
aiohttp.streams.EmptyStreamReader.readline(self)
aiohttp.streams.EmptyStreamReader.set_exception(self,exc)
aiohttp.streams.EmptyStreamReader.wait_eof(self)
aiohttp.streams.EofStream(Exception)
aiohttp.streams.FlowControlChunksQueue(FlowControlDataQueue)
aiohttp.streams.FlowControlChunksQueue.read(self)
aiohttp.streams.FlowControlDataQueue(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.__init__(self,protocol,*,limit=DEFAULT_LIMIT,loop=None)
aiohttp.streams.FlowControlDataQueue.feed_data(self,data,size)
aiohttp.streams.FlowControlDataQueue.read(self)
aiohttp.streams.FlowControlStreamReader(self,protocol,buffer_limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader.__init__(self,protocol,buffer_limit=DEFAULT_LIMIT,*args,**kwargs)
aiohttp.streams.FlowControlStreamReader.feed_data(self,data,size=0)
aiohttp.streams.FlowControlStreamReader.read(self,n=-1)
aiohttp.streams.FlowControlStreamReader.read_nowait(self,n=-1)
aiohttp.streams.FlowControlStreamReader.readany(self)
aiohttp.streams.FlowControlStreamReader.readexactly(self,n)
aiohttp.streams.FlowControlStreamReader.readline(self)
aiohttp.streams.StreamReader(self,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.streams.StreamReader.__init__(self,limit=DEFAULT_LIMIT,timer=None,loop=None)
aiohttp.streams.StreamReader.__repr__(self)
aiohttp.streams.StreamReader._read_nowait(self,n)
aiohttp.streams.StreamReader._read_nowait_chunk(self,n)
aiohttp.streams.StreamReader._wait(self,func_name)
aiohttp.streams.StreamReader.at_eof(self)
aiohttp.streams.StreamReader.exception(self)
aiohttp.streams.StreamReader.feed_data(self,data)
aiohttp.streams.StreamReader.feed_eof(self)
aiohttp.streams.StreamReader.is_eof(self)
aiohttp.streams.StreamReader.on_eof(self,callback)
aiohttp.streams.StreamReader.read(self,n=-1)
aiohttp.streams.StreamReader.read_nowait(self,n=-1)
aiohttp.streams.StreamReader.readany(self)
aiohttp.streams.StreamReader.readexactly(self,n)
aiohttp.streams.StreamReader.readline(self)
aiohttp.streams.StreamReader.set_exception(self,exc)
aiohttp.streams.StreamReader.unread_data(self,data)
aiohttp.streams.StreamReader.wait_eof(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/client_proto.py----------------------------------------
A:aiohttp.client_proto.self.writer->StreamWriter(self, transport, self._loop)
A:aiohttp.client_proto.exc->ServerDisconnectedError()
A:aiohttp.client_proto.self._parser->HttpResponseParser(self, self._loop, timer=timer, payload_exception=ClientPayloadError, read_until_eof=read_until_eof)
A:aiohttp.client_proto.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.client_proto.(messages, upgraded, tail)->self._parser.feed_data(data)
aiohttp.client_proto.ResponseHandler(self,*,loop=None,**kwargs)
aiohttp.client_proto.ResponseHandler.__init__(self,*,loop=None,**kwargs)
aiohttp.client_proto.ResponseHandler.close(self)
aiohttp.client_proto.ResponseHandler.connection_lost(self,exc)
aiohttp.client_proto.ResponseHandler.connection_made(self,transport)
aiohttp.client_proto.ResponseHandler.data_received(self,data)
aiohttp.client_proto.ResponseHandler.eof_received(self)
aiohttp.client_proto.ResponseHandler.is_connected(self)
aiohttp.client_proto.ResponseHandler.pause_reading(self)
aiohttp.client_proto.ResponseHandler.resume_reading(self)
aiohttp.client_proto.ResponseHandler.set_exception(self,exc)
aiohttp.client_proto.ResponseHandler.set_parser(self,parser,payload)
aiohttp.client_proto.ResponseHandler.set_response_params(self,*,timer=None,skip_payload=False,skip_status_codes=(),read_until_eof=False)
aiohttp.client_proto.ResponseHandler.should_close(self)
aiohttp.client_proto.ResponseHandler.upgraded(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/http.py----------------------------------------
A:aiohttp.http.SERVER_SOFTWARE->'Python/{0[0]}.{0[1]} aiohttp/{1}'.format(sys.version_info, __version__)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_urldispatcher.py----------------------------------------
A:aiohttp.web_urldispatcher.HTTP_METHOD_RE->re.compile("^[0-9A-Za-z!#\\$%&'\\*\\+\\-\\.\\^_`\\|~]+$")
A:aiohttp.web_urldispatcher.method->getattr(self, self.request._method.lower(), None)
A:aiohttp.web_urldispatcher.result->old_handler(*args, **kwargs)
A:aiohttp.web_urldispatcher.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web_urldispatcher.route->ResourceRoute(method, handler, self, expect_handler=expect_handler)
A:aiohttp.web_urldispatcher.allowed_methods->set()
A:aiohttp.web_urldispatcher.match_dict->self._match(request.rel_url.raw_path)
A:aiohttp.web_urldispatcher.self._pattern->re.compile(re.escape(prefix) + self._pattern.pattern)
A:aiohttp.web_urldispatcher.match->self.DYN_WITH_RE.fullmatch(part)
A:aiohttp.web_urldispatcher.url->URL(path)
A:aiohttp.web_urldispatcher.directory->directory.resolve().resolve()
A:aiohttp.web_urldispatcher.filename->unquote(request.match_info['filename'])
A:aiohttp.web_urldispatcher.self._routes['OPTIONS']->ResourceRoute('OPTIONS', handler, self, expect_handler=self._expect_handler)
A:aiohttp.web_urldispatcher.filepath->self._directory.joinpath(filename).resolve()
A:aiohttp.web_urldispatcher.ret->FileResponse(filepath, chunk_size=self._chunk_size)
A:aiohttp.web_urldispatcher.posix_dir_len->len(self._directory.as_posix())
A:aiohttp.web_urldispatcher.index_of->'Index of /{}'.format(relative_path_to_dir)
A:aiohttp.web_urldispatcher.head->'<head>\n<title>{}</title>\n</head>'.format(index_of)
A:aiohttp.web_urldispatcher.h1->'<h1>{}</h1>'.format(index_of)
A:aiohttp.web_urldispatcher.dir_index->self._directory.joinpath(filename).resolve().iterdir()
A:aiohttp.web_urldispatcher.file_name->'{}/'.format(_file.name)
A:aiohttp.web_urldispatcher.ul->'<ul>\n{}\n</ul>'.format('\n'.join(index_list))
A:aiohttp.web_urldispatcher.body->'<body>\n{}\n{}\n</body>'.format(h1, ul)
A:aiohttp.web_urldispatcher.html->'<html>\n{}\n{}\n</html>'.format(head, body)
A:aiohttp.web_urldispatcher.methods->set()
A:aiohttp.web_urldispatcher.DYN->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*)\\}')
A:aiohttp.web_urldispatcher.DYN_WITH_RE->re.compile('\\{(?P<var>[_a-zA-Z][_a-zA-Z0-9]*):(?P<re>.+)\\}')
A:aiohttp.web_urldispatcher.ROUTE_RE->re.compile('(\\{[_a-zA-Z][^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\})')
A:aiohttp.web_urldispatcher.NAME_SPLIT_RE->re.compile('[.:-]')
A:aiohttp.web_urldispatcher.parts->self.NAME_SPLIT_RE.split(name)
A:aiohttp.web_urldispatcher.resource->StaticResource(prefix, path, name=name, expect_handler=expect_handler, chunk_size=chunk_size, response_factory=response_factory, show_index=show_index, follow_symlinks=follow_symlinks)
A:aiohttp.web_urldispatcher.compiled->re.compile(pattern)
aiohttp.web_urldispatcher.AbstractResource(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.AbstractResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.AbstractResource.freeze(self)
aiohttp.web_urldispatcher.AbstractResource.get_info(self)
aiohttp.web_urldispatcher.AbstractResource.name(self)
aiohttp.web_urldispatcher.AbstractResource.resolve(self,request)
aiohttp.web_urldispatcher.AbstractResource.url(self,**kwargs)
aiohttp.web_urldispatcher.AbstractResource.url_for(self,**kwargs)
aiohttp.web_urldispatcher.AbstractRoute(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.__init__(self,method,handler,*,expect_handler=None,resource=None)
aiohttp.web_urldispatcher.AbstractRoute.get_info(self)
aiohttp.web_urldispatcher.AbstractRoute.handle_expect_header(self,request)
aiohttp.web_urldispatcher.AbstractRoute.handler(self)
aiohttp.web_urldispatcher.AbstractRoute.method(self)
aiohttp.web_urldispatcher.AbstractRoute.name(self)
aiohttp.web_urldispatcher.AbstractRoute.resource(self)
aiohttp.web_urldispatcher.AbstractRoute.url(self,**kwargs)
aiohttp.web_urldispatcher.AbstractRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.DynamicResource(self,pattern,formatter,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__init__(self,pattern,formatter,*,name=None)
aiohttp.web_urldispatcher.DynamicResource.__repr__(self)
aiohttp.web_urldispatcher.DynamicResource._match(self,path)
aiohttp.web_urldispatcher.DynamicResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.DynamicResource.get_info(self)
aiohttp.web_urldispatcher.DynamicResource.url(self,*,parts,query=None)
aiohttp.web_urldispatcher.DynamicResource.url_for(self,**parts)
aiohttp.web_urldispatcher.MatchInfoError(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__init__(self,http_exception)
aiohttp.web_urldispatcher.MatchInfoError.__repr__(self)
aiohttp.web_urldispatcher.MatchInfoError.http_exception(self)
aiohttp.web_urldispatcher.PlainResource(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__init__(self,path,*,name=None)
aiohttp.web_urldispatcher.PlainResource.__repr__(self)
aiohttp.web_urldispatcher.PlainResource._match(self,path)
aiohttp.web_urldispatcher.PlainResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PlainResource.freeze(self)
aiohttp.web_urldispatcher.PlainResource.get_info(self)
aiohttp.web_urldispatcher.PlainResource.url(self,*,query=None)
aiohttp.web_urldispatcher.PlainResource.url_for(self)
aiohttp.web_urldispatcher.PrefixResource(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.__init__(self,prefix,*,name=None)
aiohttp.web_urldispatcher.PrefixResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__init__(self,prefix,app)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__iter__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__len__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.__repr__(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.add_prefix(self,prefix)
aiohttp.web_urldispatcher.PrefixedSubAppResource.get_info(self)
aiohttp.web_urldispatcher.PrefixedSubAppResource.resolve(self,request)
aiohttp.web_urldispatcher.PrefixedSubAppResource.url(self,**kwargs)
aiohttp.web_urldispatcher.PrefixedSubAppResource.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.Resource(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__init__(self,*,name=None)
aiohttp.web_urldispatcher.Resource.__iter__(self)
aiohttp.web_urldispatcher.Resource.__len__(self)
aiohttp.web_urldispatcher.Resource.add_route(self,method,handler,*,expect_handler=None)
aiohttp.web_urldispatcher.Resource.register_route(self,route)
aiohttp.web_urldispatcher.Resource.resolve(self,request)
aiohttp.web_urldispatcher.ResourceRoute(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__init__(self,method,handler,resource,*,expect_handler=None)
aiohttp.web_urldispatcher.ResourceRoute.__repr__(self)
aiohttp.web_urldispatcher.ResourceRoute.get_info(self)
aiohttp.web_urldispatcher.ResourceRoute.name(self)
aiohttp.web_urldispatcher.ResourceRoute.url(self,**kwargs)
aiohttp.web_urldispatcher.ResourceRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.ResourcesView(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__contains__(self,resource)
aiohttp.web_urldispatcher.ResourcesView.__init__(self,resources)
aiohttp.web_urldispatcher.ResourcesView.__iter__(self)
aiohttp.web_urldispatcher.ResourcesView.__len__(self)
aiohttp.web_urldispatcher.RoutesView(self,resources)
aiohttp.web_urldispatcher.RoutesView.__contains__(self,route)
aiohttp.web_urldispatcher.RoutesView.__init__(self,resources)
aiohttp.web_urldispatcher.RoutesView.__iter__(self)
aiohttp.web_urldispatcher.RoutesView.__len__(self)
aiohttp.web_urldispatcher.StaticResource(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.StaticResource.__init__(self,prefix,directory,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.StaticResource.__iter__(self)
aiohttp.web_urldispatcher.StaticResource.__len__(self)
aiohttp.web_urldispatcher.StaticResource.__repr__(self)
aiohttp.web_urldispatcher.StaticResource._directory_as_html(self,filepath)
aiohttp.web_urldispatcher.StaticResource._handle(self,request)
aiohttp.web_urldispatcher.StaticResource.get_info(self)
aiohttp.web_urldispatcher.StaticResource.resolve(self,request)
aiohttp.web_urldispatcher.StaticResource.set_options_route(self,handler)
aiohttp.web_urldispatcher.StaticResource.url(self,*,filename,query=None)
aiohttp.web_urldispatcher.StaticResource.url_for(self,*,filename)
aiohttp.web_urldispatcher.SystemRoute(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__init__(self,http_exception)
aiohttp.web_urldispatcher.SystemRoute.__repr__(self)
aiohttp.web_urldispatcher.SystemRoute._handler(self,request)
aiohttp.web_urldispatcher.SystemRoute.get_info(self)
aiohttp.web_urldispatcher.SystemRoute.name(self)
aiohttp.web_urldispatcher.SystemRoute.reason(self)
aiohttp.web_urldispatcher.SystemRoute.status(self)
aiohttp.web_urldispatcher.SystemRoute.url(self,*args,**kwargs)
aiohttp.web_urldispatcher.SystemRoute.url_for(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher(self)
aiohttp.web_urldispatcher.UrlDispatcher.__contains__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__getitem__(self,name)
aiohttp.web_urldispatcher.UrlDispatcher.__init__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__iter__(self)
aiohttp.web_urldispatcher.UrlDispatcher.__len__(self)
aiohttp.web_urldispatcher.UrlDispatcher.add_delete(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_get(self,*args,name=None,allow_head=True,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_head(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_patch(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_post(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_put(self,*args,**kwargs)
aiohttp.web_urldispatcher.UrlDispatcher.add_resource(self,path,*,name=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_route(self,method,path,handler,*,name=None,expect_handler=None)
aiohttp.web_urldispatcher.UrlDispatcher.add_static(self,prefix,path,*,name=None,expect_handler=None,chunk_size=256*1024,response_factory=StreamResponse,show_index=False,follow_symlinks=False)
aiohttp.web_urldispatcher.UrlDispatcher.freeze(self)
aiohttp.web_urldispatcher.UrlDispatcher.named_resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.register_resource(self,resource)
aiohttp.web_urldispatcher.UrlDispatcher.resolve(self,request)
aiohttp.web_urldispatcher.UrlDispatcher.resources(self)
aiohttp.web_urldispatcher.UrlDispatcher.routes(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__init__(self,match_dict,route)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.__repr__(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.add_app(self,app)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.apps(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.expect_handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.freeze(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.get_info(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.handler(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.http_exception(self)
aiohttp.web_urldispatcher.UrlMappingMatchInfo.route(self)
aiohttp.web_urldispatcher.View(AbstractView)
aiohttp.web_urldispatcher.View.__iter__(self)
aiohttp.web_urldispatcher.View._raise_allowed_methods(self)
aiohttp.web_urldispatcher._defaultExpectHandler(request)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web.py----------------------------------------
A:aiohttp.web.router->web_urldispatcher.UrlDispatcher()
A:aiohttp.web.self._middlewares->tuple(reversed(self._middlewares))
A:aiohttp.web.self._on_pre_signal->PreSignal()
A:aiohttp.web.self._on_post_signal->PostSignal()
A:aiohttp.web.self._on_loop_available->Signal(self)
A:aiohttp.web.self._on_response_prepare->Signal(self)
A:aiohttp.web.self._on_startup->Signal(self)
A:aiohttp.web.self._on_shutdown->Signal(self)
A:aiohttp.web.self._on_cleanup->Signal(self)
A:aiohttp.web.loop->asyncio.get_event_loop()
A:aiohttp.web.self._debug->asyncio.get_event_loop().get_debug()
A:aiohttp.web.subsig->getattr(subapp, signame)
A:aiohttp.web.appsig->getattr(self, signame)
A:aiohttp.web.resource->PrefixedSubAppResource(prefix, subapp)
A:aiohttp.web.expect->request.headers.get(hdrs.EXPECT)
A:aiohttp.web.make_handler_kwargs->dict()
A:aiohttp.web.handler->func(extra_argv).make_handler(loop=loop, access_log=access_log, **make_handler_kwargs)
A:aiohttp.web.base_url->URL('{}://localhost'.format(scheme)).with_port(port)
A:aiohttp.web.(host, port)->sock.getsockname()
A:aiohttp.web.servers->asyncio.get_event_loop().run_until_complete(asyncio.gather(*server_creations, loop=loop))
A:aiohttp.web.arg_parser->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web')
A:aiohttp.web.(args, extra_argv)->ArgumentParser(description='aiohttp.web Application server', prog='aiohttp.web').parse_known_args(argv)
A:aiohttp.web.(mod_str, _, func_str)->args.entry_func.partition(':')
A:aiohttp.web.module->import_module(mod_str)
A:aiohttp.web.func->getattr(module, func_str)
A:aiohttp.web.app->func(extra_argv)
aiohttp.web.Application(self,*,logger=web_logger,router=None,middlewares=(),handler_args=None,client_max_size=1024**2,loop=None,debug=...)
aiohttp.web.Application.__delitem__(self,key)
aiohttp.web.Application.__getitem__(self,key)
aiohttp.web.Application.__init__(self,*,logger=web_logger,router=None,middlewares=(),handler_args=None,client_max_size=1024**2,loop=None,debug=...)
aiohttp.web.Application.__iter__(self)
aiohttp.web.Application.__len__(self)
aiohttp.web.Application.__repr__(self)
aiohttp.web.Application.__setitem__(self,key,value)
aiohttp.web.Application._check_frozen(self)
aiohttp.web.Application._handle(self,request)
aiohttp.web.Application._make_request(self,message,payload,protocol,writer,task,_cls=web_request.Request)
aiohttp.web.Application._reg_subapp_signals(self,subapp)
aiohttp.web.Application._set_loop(self,loop)
aiohttp.web.Application.add_subapp(self,prefix,subapp)
aiohttp.web.Application.cleanup(self)
aiohttp.web.Application.debug(self)
aiohttp.web.Application.freeze(self)
aiohttp.web.Application.frozen(self)
aiohttp.web.Application.loop(self)
aiohttp.web.Application.make_handler(self,*,loop=None,secure_proxy_ssl_header=None,**kwargs)
aiohttp.web.Application.middlewares(self)
aiohttp.web.Application.on_cleanup(self)
aiohttp.web.Application.on_loop_available(self)
aiohttp.web.Application.on_post_signal(self)
aiohttp.web.Application.on_pre_signal(self)
aiohttp.web.Application.on_response_prepare(self)
aiohttp.web.Application.on_shutdown(self)
aiohttp.web.Application.on_startup(self)
aiohttp.web.Application.router(self)
aiohttp.web.Application.shutdown(self)
aiohttp.web.Application.startup(self)
aiohttp.web.main(argv)
aiohttp.web.run_app(app,*,host=None,port=None,path=None,sock=None,shutdown_timeout=60.0,ssl_context=None,print=print,backlog=128,access_log_format=None,access_log=access_logger,loop=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/http_parser.py----------------------------------------
A:aiohttp.http_parser.ASCIISET->set(string.printable)
A:aiohttp.http_parser.METHRE->re.compile('[A-Z0-9$-_.]+')
A:aiohttp.http_parser.VERSRE->re.compile('HTTP/(\\d+).(\\d+)')
A:aiohttp.http_parser.HDRRE->re.compile(b'[\\x00-\\x1F\\x7F()<>@,;:\\[\\]={} \\t\\\\\\\\\\"]')
A:aiohttp.http_parser.RawRequestMessage->collections.namedtuple('RawRequestMessage', ['method', 'path', 'version', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked', 'url'])
A:aiohttp.http_parser.RawResponseMessage->collections.namedtuple('RawResponseMessage', ['version', 'code', 'reason', 'headers', 'raw_headers', 'should_close', 'compression', 'upgrade', 'chunked'])
A:aiohttp.http_parser.data_len->len(data)
A:aiohttp.http_parser.pos->self.zlib.flush().find(SEP)
A:aiohttp.http_parser.msg->self.parse_message(self._lines)
A:aiohttp.http_parser.length->int(length)
A:aiohttp.http_parser.method->method.upper().upper()
A:aiohttp.http_parser.payload->DeflateBuffer(payload, compression)
A:aiohttp.http_parser.payload_parser->HttpPayloadParser(payload, length=length, chunked=msg.chunked, method=method, compression=msg.compression, code=self.code, readall=True, response_with_body=self.response_with_body)
A:aiohttp.http_parser.self._payload_parser->HttpPayloadParser(payload, method=msg.method, compression=msg.compression, readall=True)
A:aiohttp.http_parser.(eof, data)->self._payload_parser.feed_data(data[start_pos:])
A:aiohttp.http_parser.headers->CIMultiDict()
A:aiohttp.http_parser.line_count->len(lines)
A:aiohttp.http_parser.header_length->len(line)
A:aiohttp.http_parser.(bname, bvalue)->lines[0].decode('utf-8', 'surrogateescape').split(b':', 1)
A:aiohttp.http_parser.bname->bname.strip(b' \t').strip(b' \t')
A:aiohttp.http_parser.bvalue->bvalue.strip().strip()
A:aiohttp.http_parser.name->istr(bname.decode('utf-8', 'surrogateescape'))
A:aiohttp.http_parser.value->bvalue.strip().strip().decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.raw_headers->tuple(raw_headers)
A:aiohttp.http_parser.conn->CIMultiDict().get(hdrs.CONNECTION)
A:aiohttp.http_parser.v->CIMultiDict().get(hdrs.CONNECTION).lower()
A:aiohttp.http_parser.enc->enc.lower().lower()
A:aiohttp.http_parser.te->CIMultiDict().get(hdrs.TRANSFER_ENCODING)
A:aiohttp.http_parser.line->lines[0].decode('utf-8', 'surrogateescape')
A:aiohttp.http_parser.(method, path, version)->lines[0].decode('utf-8', 'surrogateescape').split(None, 2)
A:aiohttp.http_parser.(n1, n2)->version[5:].split('.', 1)
A:aiohttp.http_parser.version->HttpVersion(int(match.group(1)), int(match.group(2)))
A:aiohttp.http_parser.(headers, raw_headers, close, compression, upgrade, chunked)->self.parse_headers(lines)
A:aiohttp.http_parser.(version, status)->lines[0].decode('utf-8', 'surrogateescape').split(None, 1)
A:aiohttp.http_parser.(status, reason)->int(status).split(None, 1)
A:aiohttp.http_parser.match->re.compile('HTTP/(\\d+).(\\d+)').match(version)
A:aiohttp.http_parser.status->int(status)
A:aiohttp.http_parser.chunk_len->len(chunk)
A:aiohttp.http_parser.i->self.zlib.flush().find(CHUNK_EXT, 0, pos)
A:aiohttp.http_parser.size->int(size, 16)
A:aiohttp.http_parser.exc->TransferEncodingError(chunk[:pos])
A:aiohttp.http_parser.self.zlib->zlib.decompressobj(wbits=zlib_mode)
A:aiohttp.http_parser.chunk->self.zlib.flush()
aiohttp.http_parser.ChunkState(IntEnum)
aiohttp.http_parser.DeflateBuffer(self,out,encoding)
aiohttp.http_parser.DeflateBuffer.__init__(self,out,encoding)
aiohttp.http_parser.DeflateBuffer.feed_data(self,chunk,size)
aiohttp.http_parser.DeflateBuffer.feed_eof(self)
aiohttp.http_parser.DeflateBuffer.set_exception(self,exc)
aiohttp.http_parser.HttpParser(self,protocol=None,loop=None,max_line_size=8190,max_headers=32768,max_field_size=8190,timer=None,code=None,method=None,readall=False,payload_exception=None,response_with_body=True,read_until_eof=False)
aiohttp.http_parser.HttpParser.__init__(self,protocol=None,loop=None,max_line_size=8190,max_headers=32768,max_field_size=8190,timer=None,code=None,method=None,readall=False,payload_exception=None,response_with_body=True,read_until_eof=False)
aiohttp.http_parser.HttpParser.feed_data(self,data,SEP=b'\r\n',EMPTY=b'',CONTENT_LENGTH=hdrs.CONTENT_LENGTH,METH_CONNECT=hdrs.METH_CONNECT,SEC_WEBSOCKET_KEY1=hdrs.SEC_WEBSOCKET_KEY1)
aiohttp.http_parser.HttpParser.feed_eof(self)
aiohttp.http_parser.HttpParser.parse_headers(self,lines)
aiohttp.http_parser.HttpPayloadParser(self,payload,length=None,chunked=False,compression=None,code=None,method=None,readall=False,response_with_body=True)
aiohttp.http_parser.HttpPayloadParser.__init__(self,payload,length=None,chunked=False,compression=None,code=None,method=None,readall=False,response_with_body=True)
aiohttp.http_parser.HttpPayloadParser.feed_data(self,chunk,SEP=b'\r\n',CHUNK_EXT=b';')
aiohttp.http_parser.HttpPayloadParser.feed_eof(self)
aiohttp.http_parser.HttpRequestParserPy(HttpParser)
aiohttp.http_parser.HttpRequestParserPy.parse_message(self,lines)
aiohttp.http_parser.HttpResponseParserPy(HttpParser)
aiohttp.http_parser.HttpResponseParserPy.parse_message(self,lines)
aiohttp.http_parser.ParseState(IntEnum)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/client.py----------------------------------------
A:aiohttp.client.loop->asyncio.get_event_loop()
A:aiohttp.client.connector->TCPConnector(loop=loop, force_close=True)
A:aiohttp.client.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client.cookie_jar->CookieJar(loop=loop)
A:aiohttp.client.headers->CIMultiDict(headers)
A:aiohttp.client.self._skip_auto_headers->frozenset()
A:aiohttp.client.data->payload.JsonPayload(json, dumps=self._json_serialize)
A:aiohttp.client.skip_headers->set(self._skip_auto_headers)
A:aiohttp.client.proxy->URL(proxy)
A:aiohttp.client.tm->TimeoutHandle(self._loop, timeout if timeout is not None else self._read_timeout)
A:aiohttp.client.handle->TimeoutHandle(self._loop, timeout if timeout is not None else self._read_timeout).start()
A:aiohttp.client.timer->TimeoutHandle(self._loop, timeout if timeout is not None else self._read_timeout).timer()
A:aiohttp.client.url->URL(url).with_fragment(None)
A:aiohttp.client.cookies->self._cookie_jar.filter_cookies(url)
A:aiohttp.client.req->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer)
A:aiohttp.client.resp->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer).send(conn)
A:aiohttp.client.r_url->URL(url).with_fragment(None).join(r_url)
A:aiohttp.client.resp._history->tuple(history)
A:aiohttp.client.sec_key->base64.b64encode(os.urandom(16))
A:aiohttp.client.headers[hdrs.SEC_WEBSOCKET_KEY]->base64.b64encode(os.urandom(16)).decode()
A:aiohttp.client.headers[hdrs.SEC_WEBSOCKET_PROTOCOL]->','.join(protocols)
A:aiohttp.client.key->self._request_class(method, url, params=params, headers=headers, skip_auto_headers=skip_headers, data=data, cookies=cookies, auth=auth, version=version, compress=compress, chunked=chunked, expect100=expect100, loop=self._loop, response_class=self._response_class, proxy=proxy, proxy_auth=proxy_auth, timer=timer).send(conn).headers.get(hdrs.SEC_WEBSOCKET_ACCEPT, '')
A:aiohttp.client.match->base64.b64encode(hashlib.sha1(sec_key + WS_KEY).digest()).decode()
A:aiohttp.client.reader->FlowControlDataQueue(proto, limit=2 ** 16, loop=self._loop)
A:aiohttp.client.writer->WebSocketWriter(resp.connection.writer, use_mask=True)
A:aiohttp.client.result->CIMultiDict(self._default_headers)
A:aiohttp.client.added_names->set()
A:aiohttp.client.session->ClientSession(loop=loop, cookies=cookies, version=version, connector=connector, connector_owner=connector_owner)
aiohttp.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=None,conn_timeout=None)
aiohttp.ClientSession.__del__(self,_warnings=warnings)
aiohttp.ClientSession.__enter__(self)
aiohttp.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.ClientSession._prepare_headers(self,headers)
aiohttp.ClientSession._request(self,method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=DEFAULT_TIMEOUT)
aiohttp.ClientSession._ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.ClientSession.close(self)
aiohttp.ClientSession.closed(self)
aiohttp.ClientSession.connector(self)
aiohttp.ClientSession.cookie_jar(self)
aiohttp.ClientSession.delete(self,url,**kwargs)
aiohttp.ClientSession.detach(self)
aiohttp.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.ClientSession.loop(self)
aiohttp.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.ClientSession.request(self,method,url,**kwargs)
aiohttp.ClientSession.version(self)
aiohttp.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp._BaseRequestContextManager(self,coro)
aiohttp._BaseRequestContextManager.__iter__(self)
aiohttp._BaseRequestContextManager.__next__(self)
aiohttp._BaseRequestContextManager.gi_code(self)
aiohttp._BaseRequestContextManager.gi_frame(self)
aiohttp._BaseRequestContextManager.gi_running(self)
aiohttp._DetachedRequestContextManager(self,coro,session)
aiohttp._DetachedRequestContextManager.__del__(self)
aiohttp._DetachedRequestContextManager.__iter__(self)
aiohttp._RequestContextManager(_BaseRequestContextManager)
aiohttp._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.ClientSession(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=None,conn_timeout=None)
aiohttp.client.ClientSession.__del__(self,_warnings=warnings)
aiohttp.client.ClientSession.__enter__(self)
aiohttp.client.ClientSession.__exit__(self,exc_type,exc_val,exc_tb)
aiohttp.client.ClientSession.__init__(self,*,connector=None,loop=None,cookies=None,headers=None,skip_auto_headers=None,auth=None,json_serialize=json.dumps,request_class=ClientRequest,response_class=ClientResponse,ws_response_class=ClientWebSocketResponse,version=http.HttpVersion11,cookie_jar=None,connector_owner=True,raise_for_status=False,read_timeout=None,conn_timeout=None)
aiohttp.client.ClientSession._prepare_headers(self,headers)
aiohttp.client.ClientSession._request(self,method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,auth=None,allow_redirects=True,max_redirects=10,encoding=None,compress=None,chunked=None,expect100=False,read_until_eof=True,proxy=None,proxy_auth=None,timeout=DEFAULT_TIMEOUT)
aiohttp.client.ClientSession._ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.client.ClientSession.close(self)
aiohttp.client.ClientSession.closed(self)
aiohttp.client.ClientSession.connector(self)
aiohttp.client.ClientSession.cookie_jar(self)
aiohttp.client.ClientSession.delete(self,url,**kwargs)
aiohttp.client.ClientSession.detach(self)
aiohttp.client.ClientSession.get(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.head(self,url,*,allow_redirects=False,**kwargs)
aiohttp.client.ClientSession.loop(self)
aiohttp.client.ClientSession.options(self,url,*,allow_redirects=True,**kwargs)
aiohttp.client.ClientSession.patch(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.post(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.put(self,url,*,data=None,**kwargs)
aiohttp.client.ClientSession.request(self,method,url,**kwargs)
aiohttp.client.ClientSession.version(self)
aiohttp.client.ClientSession.ws_connect(self,url,*,protocols=(),timeout=10.0,receive_timeout=None,autoclose=True,autoping=True,heartbeat=None,auth=None,origin=None,headers=None,proxy=None,proxy_auth=None)
aiohttp.client._BaseRequestContextManager(self,coro)
aiohttp.client._BaseRequestContextManager.__init__(self,coro)
aiohttp.client._BaseRequestContextManager.__iter__(self)
aiohttp.client._BaseRequestContextManager.__next__(self)
aiohttp.client._BaseRequestContextManager.gi_code(self)
aiohttp.client._BaseRequestContextManager.gi_frame(self)
aiohttp.client._BaseRequestContextManager.gi_running(self)
aiohttp.client._DetachedRequestContextManager(self,coro,session)
aiohttp.client._DetachedRequestContextManager.__del__(self)
aiohttp.client._DetachedRequestContextManager.__init__(self,coro,session)
aiohttp.client._DetachedRequestContextManager.__iter__(self)
aiohttp.client._RequestContextManager(_BaseRequestContextManager)
aiohttp.client._WSRequestContextManager(_BaseRequestContextManager)
aiohttp.client.request(method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,encoding=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,proxy=None,proxy_auth=None)
aiohttp.request(method,url,*,params=None,data=None,json=None,headers=None,skip_auto_headers=None,cookies=None,auth=None,allow_redirects=True,max_redirects=10,encoding=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,connector=None,loop=None,read_until_eof=True,proxy=None,proxy_auth=None)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/http_writer.py----------------------------------------
A:aiohttp.http_writer.HttpVersion->collections.namedtuple('HttpVersion', ['major', 'minor'])
A:aiohttp.http_writer.HttpVersion10->HttpVersion(1, 0)
A:aiohttp.http_writer.HttpVersion11->HttpVersion(1, 1)
A:aiohttp.http_writer.self._socket->transport.get_extra_info('socket')
A:aiohttp.http_writer.writer->factory(self, self._loop, False)
A:aiohttp.http_writer.idx->self._waiters.index(writer)
A:aiohttp.http_writer.value->bool(value)
A:aiohttp.http_writer.chunk->self._compress.compress(chunk)
A:aiohttp.http_writer.self._compress->zlib.compressobj(wbits=zlib_mode)
A:aiohttp.http_writer.size->len(headers)
A:aiohttp.http_writer.chunk_len->('%x\r\n' % len(chunk)).encode('ascii')
A:aiohttp.http_writer.self._drain_waiter->create_future(self.loop)
A:aiohttp.http_writer.path->yarl.quote(path, safe='@:', protected='/', strict=False)
A:aiohttp.http_writer.query->yarl.quote(query, safe='=+&?/:@', protected=yarl.PROTECT_CHARS, qs=True, strict=False)
A:aiohttp.http_writer.fragment->yarl.quote(fragment, safe='?/:@', strict=False)
A:aiohttp.http_writer.self._val->SplitResult(schema or '', netloc=netloc, path=path, query=query, fragment=fragment)
aiohttp.http_writer.PayloadWriter(self,stream,loop,acquire=True)
aiohttp.http_writer.PayloadWriter.__init__(self,stream,loop,acquire=True)
aiohttp.http_writer.PayloadWriter._write(self,chunk)
aiohttp.http_writer.PayloadWriter.buffer_data(self,chunk)
aiohttp.http_writer.PayloadWriter.drain(self,last=False)
aiohttp.http_writer.PayloadWriter.enable_chunking(self)
aiohttp.http_writer.PayloadWriter.enable_compression(self,encoding='deflate')
aiohttp.http_writer.PayloadWriter.set_tcp_cork(self,value)
aiohttp.http_writer.PayloadWriter.set_tcp_nodelay(self,value)
aiohttp.http_writer.PayloadWriter.set_transport(self,transport)
aiohttp.http_writer.PayloadWriter.tcp_cork(self)
aiohttp.http_writer.PayloadWriter.tcp_nodelay(self)
aiohttp.http_writer.PayloadWriter.write(self,chunk,*,drain=True,LIMIT=64*1024)
aiohttp.http_writer.PayloadWriter.write_eof(self,chunk=b'')
aiohttp.http_writer.PayloadWriter.write_headers(self,status_line,headers,SEP=':',END='\r\n')
aiohttp.http_writer.StreamWriter(self,protocol,transport,loop)
aiohttp.http_writer.StreamWriter.__init__(self,protocol,transport,loop)
aiohttp.http_writer.StreamWriter.acquire(self,writer)
aiohttp.http_writer.StreamWriter.drain(self)
aiohttp.http_writer.StreamWriter.release(self)
aiohttp.http_writer.StreamWriter.replace(self,writer,factory)
aiohttp.http_writer.StreamWriter.set_tcp_cork(self,value)
aiohttp.http_writer.StreamWriter.set_tcp_nodelay(self,value)
aiohttp.http_writer.StreamWriter.tcp_cork(self)
aiohttp.http_writer.StreamWriter.tcp_nodelay(self)
aiohttp.http_writer.URL(self,schema,netloc,port,path,query,fragment,userinfo)
aiohttp.http_writer.URL.__init__(self,schema,netloc,port,path,query,fragment,userinfo)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_request.py----------------------------------------
A:aiohttp.web_request.FileField->collections.namedtuple('Field', 'name filename file content_type headers')
A:aiohttp.web_request.rel_url->URL(rel_url)
A:aiohttp.web_request.dct['path']->str(rel_url)
A:aiohttp.web_request.dct['headers']->CIMultiDict(headers)
A:aiohttp.web_request.dct['raw_headers']->tuple(((k.encode('utf-8'), v.encode('utf-8')) for (k, v) in headers.items()))
A:aiohttp.web_request.message->self._message._replace(**dct)
A:aiohttp.web_request.httpdate->self.headers.get(_IF_MODIFIED_SINCE)
A:aiohttp.web_request.timetuple->parsedate(httpdate)
A:aiohttp.web_request.raw->self.headers.get(hdrs.COOKIE, '')
A:aiohttp.web_request.parsed->SimpleCookie(raw)
A:aiohttp.web_request.rng->self._headers.get(_RANGE)
A:aiohttp.web_request.body->bytearray()
A:aiohttp.web_request.self._read_bytes->bytes(body)
A:aiohttp.web_request.self._post->MultiDictProxy(out)
A:aiohttp.web_request.out->MultiDict()
A:aiohttp.web_request.content_type->field.headers.get(hdrs.CONTENT_TYPE)
A:aiohttp.web_request.tmp->tempfile.TemporaryFile()
A:aiohttp.web_request.chunk->field.decode(chunk)
A:aiohttp.web_request.ff->FileField(field.name, field.filename, tmp, content_type, field.headers)
A:aiohttp.web_request.charset->field.get_charset(default='utf-8')
A:aiohttp.web_request.value->value.decode(charset).decode(charset)
A:aiohttp.web_request.ascii_encodable_path->self.path.encode('ascii', 'backslashreplace').decode('ascii')
aiohttp.web_request.BaseRequest(self,message,payload,protocol,writer,time_service,task,*,secure_proxy_ssl_header=None,client_max_size=1024**2)
aiohttp.web_request.BaseRequest.GET(self)
aiohttp.web_request.BaseRequest.__delitem__(self,key)
aiohttp.web_request.BaseRequest.__getitem__(self,key)
aiohttp.web_request.BaseRequest.__init__(self,message,payload,protocol,writer,time_service,task,*,secure_proxy_ssl_header=None,client_max_size=1024**2)
aiohttp.web_request.BaseRequest.__iter__(self)
aiohttp.web_request.BaseRequest.__len__(self)
aiohttp.web_request.BaseRequest.__repr__(self)
aiohttp.web_request.BaseRequest.__setitem__(self,key,value)
aiohttp.web_request.BaseRequest._prepare_hook(self,response)
aiohttp.web_request.BaseRequest._scheme(self)
aiohttp.web_request.BaseRequest.clone(self,*,method=sentinel,rel_url=sentinel,headers=sentinel)
aiohttp.web_request.BaseRequest.content(self)
aiohttp.web_request.BaseRequest.cookies(self)
aiohttp.web_request.BaseRequest.has_body(self)
aiohttp.web_request.BaseRequest.headers(self)
aiohttp.web_request.BaseRequest.host(self)
aiohttp.web_request.BaseRequest.http_range(self,*,_RANGE=hdrs.RANGE)
aiohttp.web_request.BaseRequest.if_modified_since(self,_IF_MODIFIED_SINCE=hdrs.IF_MODIFIED_SINCE)
aiohttp.web_request.BaseRequest.json(self,*,loads=json.loads)
aiohttp.web_request.BaseRequest.keep_alive(self)
aiohttp.web_request.BaseRequest.message(self)
aiohttp.web_request.BaseRequest.method(self)
aiohttp.web_request.BaseRequest.multipart(self,*,reader=multipart.MultipartReader)
aiohttp.web_request.BaseRequest.path(self)
aiohttp.web_request.BaseRequest.path_qs(self)
aiohttp.web_request.BaseRequest.post(self)
aiohttp.web_request.BaseRequest.protocol(self)
aiohttp.web_request.BaseRequest.query(self)
aiohttp.web_request.BaseRequest.query_string(self)
aiohttp.web_request.BaseRequest.raw_headers(self)
aiohttp.web_request.BaseRequest.raw_path(self)
aiohttp.web_request.BaseRequest.read(self)
aiohttp.web_request.BaseRequest.rel_url(self)
aiohttp.web_request.BaseRequest.release(self)
aiohttp.web_request.BaseRequest.scheme(self)
aiohttp.web_request.BaseRequest.task(self)
aiohttp.web_request.BaseRequest.text(self)
aiohttp.web_request.BaseRequest.time_service(self)
aiohttp.web_request.BaseRequest.transport(self)
aiohttp.web_request.BaseRequest.url(self)
aiohttp.web_request.BaseRequest.version(self)
aiohttp.web_request.BaseRequest.writer(self)
aiohttp.web_request.Request(self,*args,**kwargs)
aiohttp.web_request.Request.__init__(self,*args,**kwargs)
aiohttp.web_request.Request._prepare_hook(self,response)
aiohttp.web_request.Request.app(self)
aiohttp.web_request.Request.match_info(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/web_protocol.py----------------------------------------
A:aiohttp.web_protocol.ERROR->http.RawRequestMessage('UNKNOWN', '/', http.HttpVersion10, {}, {}, True, False, False, False, http.URL('/'))
A:aiohttp.web_protocol.sock->transport.get_extra_info('socket')
A:aiohttp.web_protocol.logger->kwargs.get('logger', logger)
A:aiohttp.web_protocol.self._lingering_time->float(lingering_time)
A:aiohttp.web_protocol.self._messages->deque()
A:aiohttp.web_protocol.self._waiters->deque()
A:aiohttp.web_protocol.self._request_parser->HttpRequestParser(self, loop, max_line_size=max_line_size, max_field_size=max_field_size, max_headers=max_headers, payload_exception=RequestPayloadError)
A:aiohttp.web_protocol.self.access_logger->helpers.AccessLogger(access_log, access_log_format)
A:aiohttp.web_protocol.self.writer->StreamWriter(self, transport, self._loop)
A:aiohttp.web_protocol.(messages, upgraded, tail)->self._request_parser.feed_data(data)
A:aiohttp.web_protocol.self._error_handler->ensure_future(self.handle_parse_error(PayloadWriter(self.writer, self._loop), 500, exc), loop=self._loop)
A:aiohttp.web_protocol.waiter->create_future(loop)
A:aiohttp.web_protocol.handler->ensure_future(self.start(msg, payload, data), loop=self._loop)
A:aiohttp.web_protocol.(eof, tail)->self._payload_parser.feed_data(data)
A:aiohttp.web_protocol.self._keepalive_handle->loop.call_at(now + keepalive_timeout, self._process_keepalive)
A:aiohttp.web_protocol.now->loop.time()
A:aiohttp.web_protocol.writer->PayloadWriter(self.writer, loop)
A:aiohttp.web_protocol.request->BaseRequest(ERROR, EMPTY_PAYLOAD, self, writer, self._time_service, None)
A:aiohttp.web_protocol.resp->self.handle_error(request, status, exc, message)
A:aiohttp.web_protocol.timeout->min(end_t - now, lingering_time)
A:aiohttp.web_protocol.(message, payload)->self._messages.popleft()
A:aiohttp.web_protocol.tb->html_escape(tb)
aiohttp.web_protocol.RequestHandler(self,manager,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,slow_request_timeout=None,logger=server_logger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,lingering_time=10.0,max_concurrent_handlers=2,**kwargs)
aiohttp.web_protocol.RequestHandler.__init__(self,manager,*,loop=None,keepalive_timeout=75,tcp_keepalive=True,slow_request_timeout=None,logger=server_logger,access_log=access_logger,access_log_format=helpers.AccessLogger.LOG_FORMAT,debug=False,max_line_size=8190,max_headers=32768,max_field_size=8190,lingering_time=10.0,max_concurrent_handlers=2,**kwargs)
aiohttp.web_protocol.RequestHandler.__repr__(self)
aiohttp.web_protocol.RequestHandler._process_keepalive(self)
aiohttp.web_protocol.RequestHandler.close(self)
aiohttp.web_protocol.RequestHandler.connection_lost(self,exc)
aiohttp.web_protocol.RequestHandler.connection_made(self,transport)
aiohttp.web_protocol.RequestHandler.data_received(self,data)
aiohttp.web_protocol.RequestHandler.eof_received(self)
aiohttp.web_protocol.RequestHandler.force_close(self)
aiohttp.web_protocol.RequestHandler.handle_error(self,request,status=500,exc=None,message=None)
aiohttp.web_protocol.RequestHandler.handle_parse_error(self,writer,status,exc=None,message=None)
aiohttp.web_protocol.RequestHandler.keep_alive(self,val)
aiohttp.web_protocol.RequestHandler.keepalive_timeout(self)
aiohttp.web_protocol.RequestHandler.log_access(self,message,environ,response,time)
aiohttp.web_protocol.RequestHandler.log_debug(self,*args,**kw)
aiohttp.web_protocol.RequestHandler.log_exception(self,*args,**kw)
aiohttp.web_protocol.RequestHandler.pause_reading(self)
aiohttp.web_protocol.RequestHandler.resume_reading(self)
aiohttp.web_protocol.RequestHandler.set_parser(self,parser)
aiohttp.web_protocol.RequestHandler.shutdown(self,timeout=15.0)
aiohttp.web_protocol.RequestHandler.start(self,message,payload,handler)
aiohttp.web_protocol.RequestHandler.time_service(self)
aiohttp.web_protocol.RequestPayloadError(Exception)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/client_reqrep.py----------------------------------------
A:aiohttp.client_reqrep.ALL_METHODS->GET_METHODS.union(POST_METHODS).union({hdrs.METH_DELETE, hdrs.METH_TRACE})
A:aiohttp.client_reqrep.loop->asyncio.get_event_loop()
A:aiohttp.client_reqrep.q->MultiDict(url.query)
A:aiohttp.client_reqrep.url2->url.with_query(q).with_query(params)
A:aiohttp.client_reqrep.url->url.with_query(q).with_query(q)
A:aiohttp.client_reqrep.self.url->url.with_query(q).with_query(q).with_fragment(None)
A:aiohttp.client_reqrep.self.method->method.upper()
A:aiohttp.client_reqrep.self._source_traceback->traceback.extract_stack(sys._getframe(1))
A:aiohttp.client_reqrep.self.auth->helpers.BasicAuth(username, password or '')
A:aiohttp.client_reqrep.self.headers->CIMultiDictProxy(message.headers)
A:aiohttp.client_reqrep.headers->headers.items().items()
A:aiohttp.client_reqrep.c->SimpleCookie()
A:aiohttp.client_reqrep.mrsl_val->value.get(value.key, Morsel())
A:aiohttp.client_reqrep.self.headers[hdrs.COOKIE]->SimpleCookie().output(header='', sep=';').strip()
A:aiohttp.client_reqrep.enc->self.headers.get(hdrs.CONTENT_ENCODING, '').lower()
A:aiohttp.client_reqrep.te->self.headers.get(hdrs.TRANSFER_ENCODING, '').lower()
A:aiohttp.client_reqrep.self.headers[hdrs.CONTENT_LENGTH]->str(size)
A:aiohttp.client_reqrep.self.headers[hdrs.AUTHORIZATION]->auth.encode()
A:aiohttp.client_reqrep.body->FormData(body)()
A:aiohttp.client_reqrep.self._continue->helpers.create_future(self.loop)
A:aiohttp.client_reqrep.new_exc->ClientOSError(exc.errno, 'Can not write request body for %s' % self.url)
A:aiohttp.client_reqrep.path->str(self.url)
A:aiohttp.client_reqrep.writer->PayloadWriter(conn.writer, self.loop)
A:aiohttp.client_reqrep.connection->self.headers.get(hdrs.CONNECTION)
A:aiohttp.client_reqrep.status_line->'{0} {1} HTTP/{2[0]}.{2[1]}\r\n'.format(self.method, path, self.version)
A:aiohttp.client_reqrep.self._writer->helpers.ensure_future(self.write_bytes(writer, conn), loop=self.loop)
A:aiohttp.client_reqrep.self.response->self.response_class(self.method, self.original_url, writer=self._writer, continue100=self._continue, timer=self._timer)
A:aiohttp.client_reqrep.self.cookies->SimpleCookie()
A:aiohttp.client_reqrep.out->io.StringIO()
A:aiohttp.client_reqrep.ascii_encodable_url->str(self.url)
A:aiohttp.client_reqrep.ascii_encodable_reason->self.reason.encode('ascii', 'backslashreplace').decode('ascii')
A:aiohttp.client_reqrep.self.raw_headers->tuple(message.raw_headers)
A:aiohttp.client_reqrep.ctype->self.headers.get(hdrs.CONTENT_TYPE, '').lower()
A:aiohttp.client_reqrep.(mtype, stype, _, params)->helpers.parse_mimetype(ctype)
A:aiohttp.client_reqrep.encoding->self._get_encoding()
A:aiohttp.client_reqrep.stripped->self._content.strip()
aiohttp.client_reqrep.ClientRequest(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timer=None)
aiohttp.client_reqrep.ClientRequest.__init__(self,method,url,*,params=None,headers=None,skip_auto_headers=frozenset(),data=None,cookies=None,auth=None,version=http.HttpVersion11,compress=None,chunked=None,expect100=False,loop=None,response_class=None,proxy=None,proxy_auth=None,timer=None)
aiohttp.client_reqrep.ClientRequest.close(self)
aiohttp.client_reqrep.ClientRequest.host(self)
aiohttp.client_reqrep.ClientRequest.keep_alive(self)
aiohttp.client_reqrep.ClientRequest.port(self)
aiohttp.client_reqrep.ClientRequest.send(self,conn)
aiohttp.client_reqrep.ClientRequest.terminate(self)
aiohttp.client_reqrep.ClientRequest.update_auth(self,auth)
aiohttp.client_reqrep.ClientRequest.update_auto_headers(self,skip_auto_headers)
aiohttp.client_reqrep.ClientRequest.update_body_from_data(self,body,skip_auto_headers)
aiohttp.client_reqrep.ClientRequest.update_content_encoding(self,data)
aiohttp.client_reqrep.ClientRequest.update_cookies(self,cookies)
aiohttp.client_reqrep.ClientRequest.update_expect_continue(self,expect=False)
aiohttp.client_reqrep.ClientRequest.update_headers(self,headers)
aiohttp.client_reqrep.ClientRequest.update_host(self,url)
aiohttp.client_reqrep.ClientRequest.update_proxy(self,proxy,proxy_auth)
aiohttp.client_reqrep.ClientRequest.update_transfer_encoding(self)
aiohttp.client_reqrep.ClientRequest.update_version(self,version)
aiohttp.client_reqrep.ClientRequest.write_bytes(self,writer,conn)
aiohttp.client_reqrep.ClientResponse(self,method,url,*,writer=None,continue100=None,timer=None)
aiohttp.client_reqrep.ClientResponse.__del__(self,_warnings=warnings)
aiohttp.client_reqrep.ClientResponse.__init__(self,method,url,*,writer=None,continue100=None,timer=None)
aiohttp.client_reqrep.ClientResponse.__repr__(self)
aiohttp.client_reqrep.ClientResponse._cleanup_writer(self)
aiohttp.client_reqrep.ClientResponse._get_encoding(self)
aiohttp.client_reqrep.ClientResponse._headers(self)
aiohttp.client_reqrep.ClientResponse._notify_content(self)
aiohttp.client_reqrep.ClientResponse._post_init(self,loop)
aiohttp.client_reqrep.ClientResponse._response_eof(self)
aiohttp.client_reqrep.ClientResponse.close(self)
aiohttp.client_reqrep.ClientResponse.closed(self)
aiohttp.client_reqrep.ClientResponse.connection(self)
aiohttp.client_reqrep.ClientResponse.history(self)
aiohttp.client_reqrep.ClientResponse.host(self)
aiohttp.client_reqrep.ClientResponse.json(self,*,encoding=None,loads=json.loads,content_type='application/json')
aiohttp.client_reqrep.ClientResponse.raise_for_status(self)
aiohttp.client_reqrep.ClientResponse.read(self)
aiohttp.client_reqrep.ClientResponse.release(self)
aiohttp.client_reqrep.ClientResponse.start(self,connection,read_until_eof=False)
aiohttp.client_reqrep.ClientResponse.text(self,encoding=None,errors='strict')
aiohttp.client_reqrep.ClientResponse.url(self)
aiohttp.client_reqrep.ClientResponse.url_obj(self)
aiohttp.client_reqrep.ClientResponse.wait_for_close(self)


----------------------------------------/home/zhang/Packages/aiohttp/aiohttp2.0.1/hdrs.py----------------------------------------
A:aiohttp.hdrs.ACCEPT->istr('ACCEPT')
A:aiohttp.hdrs.ACCEPT_CHARSET->istr('ACCEPT-CHARSET')
A:aiohttp.hdrs.ACCEPT_ENCODING->istr('ACCEPT-ENCODING')
A:aiohttp.hdrs.ACCEPT_LANGUAGE->istr('ACCEPT-LANGUAGE')
A:aiohttp.hdrs.ACCEPT_RANGES->istr('ACCEPT-RANGES')
A:aiohttp.hdrs.ACCESS_CONTROL_MAX_AGE->istr('ACCESS-CONTROL-MAX-AGE')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_CREDENTIALS->istr('ACCESS-CONTROL-ALLOW-CREDENTIALS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_HEADERS->istr('ACCESS-CONTROL-ALLOW-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_METHODS->istr('ACCESS-CONTROL-ALLOW-METHODS')
A:aiohttp.hdrs.ACCESS_CONTROL_ALLOW_ORIGIN->istr('ACCESS-CONTROL-ALLOW-ORIGIN')
A:aiohttp.hdrs.ACCESS_CONTROL_EXPOSE_HEADERS->istr('ACCESS-CONTROL-EXPOSE-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_HEADERS->istr('ACCESS-CONTROL-REQUEST-HEADERS')
A:aiohttp.hdrs.ACCESS_CONTROL_REQUEST_METHOD->istr('ACCESS-CONTROL-REQUEST-METHOD')
A:aiohttp.hdrs.AGE->istr('AGE')
A:aiohttp.hdrs.ALLOW->istr('ALLOW')
A:aiohttp.hdrs.AUTHORIZATION->istr('AUTHORIZATION')
A:aiohttp.hdrs.CACHE_CONTROL->istr('CACHE-CONTROL')
A:aiohttp.hdrs.CONNECTION->istr('CONNECTION')
A:aiohttp.hdrs.CONTENT_DISPOSITION->istr('CONTENT-DISPOSITION')
A:aiohttp.hdrs.CONTENT_ENCODING->istr('CONTENT-ENCODING')
A:aiohttp.hdrs.CONTENT_LANGUAGE->istr('CONTENT-LANGUAGE')
A:aiohttp.hdrs.CONTENT_LENGTH->istr('CONTENT-LENGTH')
A:aiohttp.hdrs.CONTENT_LOCATION->istr('CONTENT-LOCATION')
A:aiohttp.hdrs.CONTENT_MD5->istr('CONTENT-MD5')
A:aiohttp.hdrs.CONTENT_RANGE->istr('CONTENT-RANGE')
A:aiohttp.hdrs.CONTENT_TRANSFER_ENCODING->istr('CONTENT-TRANSFER-ENCODING')
A:aiohttp.hdrs.CONTENT_TYPE->istr('CONTENT-TYPE')
A:aiohttp.hdrs.COOKIE->istr('COOKIE')
A:aiohttp.hdrs.DATE->istr('DATE')
A:aiohttp.hdrs.DESTINATION->istr('DESTINATION')
A:aiohttp.hdrs.DIGEST->istr('DIGEST')
A:aiohttp.hdrs.ETAG->istr('ETAG')
A:aiohttp.hdrs.EXPECT->istr('EXPECT')
A:aiohttp.hdrs.EXPIRES->istr('EXPIRES')
A:aiohttp.hdrs.FROM->istr('FROM')
A:aiohttp.hdrs.HOST->istr('HOST')
A:aiohttp.hdrs.IF_MATCH->istr('IF-MATCH')
A:aiohttp.hdrs.IF_MODIFIED_SINCE->istr('IF-MODIFIED-SINCE')
A:aiohttp.hdrs.IF_NONE_MATCH->istr('IF-NONE-MATCH')
A:aiohttp.hdrs.IF_RANGE->istr('IF-RANGE')
A:aiohttp.hdrs.IF_UNMODIFIED_SINCE->istr('IF-UNMODIFIED-SINCE')
A:aiohttp.hdrs.KEEP_ALIVE->istr('KEEP-ALIVE')
A:aiohttp.hdrs.LAST_EVENT_ID->istr('LAST-EVENT-ID')
A:aiohttp.hdrs.LAST_MODIFIED->istr('LAST-MODIFIED')
A:aiohttp.hdrs.LINK->istr('LINK')
A:aiohttp.hdrs.LOCATION->istr('LOCATION')
A:aiohttp.hdrs.MAX_FORWARDS->istr('MAX-FORWARDS')
A:aiohttp.hdrs.ORIGIN->istr('ORIGIN')
A:aiohttp.hdrs.PRAGMA->istr('PRAGMA')
A:aiohttp.hdrs.PROXY_AUTHENTICATE->istr('PROXY_AUTHENTICATE')
A:aiohttp.hdrs.PROXY_AUTHORIZATION->istr('PROXY-AUTHORIZATION')
A:aiohttp.hdrs.RANGE->istr('RANGE')
A:aiohttp.hdrs.REFERER->istr('REFERER')
A:aiohttp.hdrs.RETRY_AFTER->istr('RETRY-AFTER')
A:aiohttp.hdrs.SEC_WEBSOCKET_ACCEPT->istr('SEC-WEBSOCKET-ACCEPT')
A:aiohttp.hdrs.SEC_WEBSOCKET_VERSION->istr('SEC-WEBSOCKET-VERSION')
A:aiohttp.hdrs.SEC_WEBSOCKET_PROTOCOL->istr('SEC-WEBSOCKET-PROTOCOL')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY->istr('SEC-WEBSOCKET-KEY')
A:aiohttp.hdrs.SEC_WEBSOCKET_KEY1->istr('SEC-WEBSOCKET-KEY1')
A:aiohttp.hdrs.SERVER->istr('SERVER')
A:aiohttp.hdrs.SET_COOKIE->istr('SET-COOKIE')
A:aiohttp.hdrs.TE->istr('TE')
A:aiohttp.hdrs.TRAILER->istr('TRAILER')
A:aiohttp.hdrs.TRANSFER_ENCODING->istr('TRANSFER-ENCODING')
A:aiohttp.hdrs.UPGRADE->istr('UPGRADE')
A:aiohttp.hdrs.WEBSOCKET->istr('WEBSOCKET')
A:aiohttp.hdrs.URI->istr('URI')
A:aiohttp.hdrs.USER_AGENT->istr('USER-AGENT')
A:aiohttp.hdrs.VARY->istr('VARY')
A:aiohttp.hdrs.VIA->istr('VIA')
A:aiohttp.hdrs.WANT_DIGEST->istr('WANT-DIGEST')
A:aiohttp.hdrs.WARNING->istr('WARNING')
A:aiohttp.hdrs.WWW_AUTHENTICATE->istr('WWW-AUTHENTICATE')

