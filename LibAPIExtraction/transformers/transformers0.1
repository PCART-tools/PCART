
----------------------------------------/home/zhang/Packages/transformers/transformers0.1/matmul_pipe.py----------------------------------------
A:transformers.matmul_pipe.node->ast.fix_missing_locations(node)
A:transformers.matmul_pipe.transformer->MatMulPipeTransformer()
transformers.matmul_pipe.MatMulPipeTransformer(ast.NodeTransformer)
transformers.matmul_pipe.MatMulPipeTransformer._replace_with_call(self,node)
transformers.matmul_pipe.MatMulPipeTransformer.visit_BinOp(self,node)


----------------------------------------/home/zhang/Packages/transformers/transformers0.1/ellipsis_partial.py----------------------------------------
A:transformers.ellipsis_partial.replacement->ast.Name(id=arg_name, ctx=ast.Load())
A:transformers.ellipsis_partial.arg_name->self._get_arg_name()
A:transformers.ellipsis_partial.node->ast.fix_missing_locations(node)
A:transformers.ellipsis_partial.transformer->EllipsisPartialTransformer()
transformers.ellipsis_partial.EllipsisPartialTransformer(self)
transformers.ellipsis_partial.EllipsisPartialTransformer.__init__(self)
transformers.ellipsis_partial.EllipsisPartialTransformer._get_arg_name(self)
transformers.ellipsis_partial.EllipsisPartialTransformer._is_ellipsis(self,arg)
transformers.ellipsis_partial.EllipsisPartialTransformer._replace_argument(self,node,arg_name)
transformers.ellipsis_partial.EllipsisPartialTransformer._wrap_in_lambda(self,node)
transformers.ellipsis_partial.EllipsisPartialTransformer.visit_Call(self,node)


----------------------------------------/home/zhang/Packages/transformers/transformers0.1/__main__.py----------------------------------------
A:transformers.__main__.path->Path(sys.argv[0]).parent.as_posix()


----------------------------------------/home/zhang/Packages/transformers/transformers0.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/transformers/transformers0.1/loader.py----------------------------------------
A:transformers.loader.visitor->cls()
A:transformers.loader.transformers->NodeVisitor.get_transformers(tree)
A:transformers.loader.module->import_module('.{}'.format(module_name), '__transformers__')
A:transformers.loader.tree->transform(tree)
A:transformers.loader.spec->super(Finder, cls).find_spec(fullname, path, target)
A:transformers.loader.spec.loader->Loader(spec.loader.name, spec.loader.path)
transformers.loader.Finder(PathFinder)
transformers.loader.Finder.find_spec(cls,fullname,path=None,target=None)
transformers.loader.Loader(SourceFileLoader)
transformers.loader.Loader.source_to_code(self,data,path,*,_optimize=-1)
transformers.loader.NodeVisitor(self)
transformers.loader.NodeVisitor.__init__(self)
transformers.loader.NodeVisitor.get_transformers(cls,tree)
transformers.loader.NodeVisitor.visit_ImportFrom(self,node)
transformers.loader.setup()
transformers.loader.transform(tree)
transformers.setup()

